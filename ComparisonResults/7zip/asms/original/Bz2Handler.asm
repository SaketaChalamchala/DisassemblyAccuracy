; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\CPP\7zip\Archive\Bz2Handler.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
_kProps	DB	07H
	DB	08H
	ORG $+2
_kArcProps DB	04aH
	DB	026H
	ORG $+2
_k_Signature DB	042H
	DB	05aH
	DB	068H
	ORG $+1
$SG71091 DB	'bzip2', 00H
	ORG $+2
$SG71092 DB	'bz2 bzip2 tbz2 tbz', 00H
	ORG $+1
$SG71093 DB	'* * .tar .tar', 00H
	ORG $+2
_g_ArcInfo DW	01H
	DB	02H
	DB	03H
	DW	00H
	ORG $+2
	DD	FLAT:_k_Signature
	DD	FLAT:$SG71091
	DD	FLAT:$SG71092
	DD	FLAT:$SG71093
	DD	FLAT:?CreateArc@NBz2@NArchive@@YGPAUIInArchive@@XZ
	DD	FLAT:?CreateArcOut@NBz2@NArchive@@YGPAUIOutArchive@@XZ
	DD	FLAT:_IsArc_BZip2@8
CONST	ENDS
PUBLIC	?GetNumberOfProperties@CHandler@NBz2@NArchive@@UAGJPAI@Z ; NArchive::NBz2::CHandler::GetNumberOfProperties
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\cpp\7zip\archive\bz2handler.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_this$ = 8						; size = 4
_numProps$ = 12						; size = 4
?GetNumberOfProperties@CHandler@NBz2@NArchive@@UAGJPAI@Z PROC ; NArchive::NBz2::CHandler::GetNumberOfProperties
; Line 76
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _numProps$[ebp]
	mov	DWORD PTR [eax], 2
	xor	eax, eax
	pop	ebp
	ret	8
?GetNumberOfProperties@CHandler@NBz2@NArchive@@UAGJPAI@Z ENDP ; NArchive::NBz2::CHandler::GetNumberOfProperties
_TEXT	ENDS
PUBLIC	?GetPropertyInfo@CHandler@NBz2@NArchive@@UAGJIPAPA_WPAKPAG@Z ; NArchive::NBz2::CHandler::GetPropertyInfo
EXTRN	?k7z_PROPID_To_VARTYPE@@3QBEB:BYTE		; k7z_PROPID_To_VARTYPE
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = 8						; size = 4
_index$ = 12						; size = 4
_name$ = 16						; size = 4
_propID$ = 20						; size = 4
_varType$ = 24						; size = 4
?GetPropertyInfo@CHandler@NBz2@NArchive@@UAGJIPAPA_WPAKPAG@Z PROC ; NArchive::NBz2::CHandler::GetPropertyInfo
; Line 76
	push	ebp
	mov	ebp, esp
	cmp	DWORD PTR _index$[ebp], 2
	jb	SHORT $LN1@GetPropert
	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN2@GetPropert
$LN1@GetPropert:
	mov	eax, DWORD PTR _index$[ebp]
	movzx	ecx, BYTE PTR _kProps[eax]
	mov	edx, DWORD PTR _propID$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR _propID$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	dx, BYTE PTR ?k7z_PROPID_To_VARTYPE@@3QBEB[ecx]
	mov	eax, DWORD PTR _varType$[ebp]
	mov	WORD PTR [eax], dx
	mov	ecx, DWORD PTR _name$[ebp]
	mov	DWORD PTR [ecx], 0
	xor	eax, eax
$LN2@GetPropert:
	pop	ebp
	ret	20					; 00000014H
?GetPropertyInfo@CHandler@NBz2@NArchive@@UAGJIPAPA_WPAKPAG@Z ENDP ; NArchive::NBz2::CHandler::GetPropertyInfo
_TEXT	ENDS
PUBLIC	?GetNumberOfArchiveProperties@CHandler@NBz2@NArchive@@UAGJPAI@Z ; NArchive::NBz2::CHandler::GetNumberOfArchiveProperties
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = 8						; size = 4
_numProps$ = 12						; size = 4
?GetNumberOfArchiveProperties@CHandler@NBz2@NArchive@@UAGJPAI@Z PROC ; NArchive::NBz2::CHandler::GetNumberOfArchiveProperties
; Line 77
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _numProps$[ebp]
	mov	DWORD PTR [eax], 2
	xor	eax, eax
	pop	ebp
	ret	8
?GetNumberOfArchiveProperties@CHandler@NBz2@NArchive@@UAGJPAI@Z ENDP ; NArchive::NBz2::CHandler::GetNumberOfArchiveProperties
_TEXT	ENDS
PUBLIC	?GetArchivePropertyInfo@CHandler@NBz2@NArchive@@UAGJIPAPA_WPAKPAG@Z ; NArchive::NBz2::CHandler::GetArchivePropertyInfo
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = 8						; size = 4
_index$ = 12						; size = 4
_name$ = 16						; size = 4
_propID$ = 20						; size = 4
_varType$ = 24						; size = 4
?GetArchivePropertyInfo@CHandler@NBz2@NArchive@@UAGJIPAPA_WPAKPAG@Z PROC ; NArchive::NBz2::CHandler::GetArchivePropertyInfo
; Line 77
	push	ebp
	mov	ebp, esp
	cmp	DWORD PTR _index$[ebp], 2
	jb	SHORT $LN1@GetArchive
	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN2@GetArchive
$LN1@GetArchive:
	mov	eax, DWORD PTR _index$[ebp]
	movzx	ecx, BYTE PTR _kArcProps[eax]
	mov	edx, DWORD PTR _propID$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR _propID$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	dx, BYTE PTR ?k7z_PROPID_To_VARTYPE@@3QBEB[ecx]
	mov	eax, DWORD PTR _varType$[ebp]
	mov	WORD PTR [eax], dx
	mov	ecx, DWORD PTR _name$[ebp]
	mov	DWORD PTR [ecx], 0
	xor	eax, eax
$LN2@GetArchive:
	pop	ebp
	ret	20					; 00000014H
?GetArchivePropertyInfo@CHandler@NBz2@NArchive@@UAGJIPAPA_WPAKPAG@Z ENDP ; NArchive::NBz2::CHandler::GetArchivePropertyInfo
_TEXT	ENDS
PUBLIC	??1CPropVariant@NCOM@NWindows@@QAE@XZ		; NWindows::NCOM::CPropVariant::~CPropVariant
PUBLIC	??0CPropVariant@NCOM@NWindows@@QAE@XZ		; NWindows::NCOM::CPropVariant::CPropVariant
PUBLIC	?GetArchiveProperty@CHandler@NBz2@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z ; NArchive::NBz2::CHandler::GetArchiveProperty
EXTRN	?Detach@CPropVariant@NCOM@NWindows@@QAEJPAUtagPROPVARIANT@@@Z:PROC ; NWindows::NCOM::CPropVariant::Detach
EXTRN	??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z:PROC ; NWindows::NCOM::CPropVariant::operator=
EXTRN	??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z:PROC ; NWindows::NCOM::CPropVariant::operator=
EXTRN	__RTC_CheckEsp:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv67 = -36						; size = 4
$T71764 = -32						; size = 4
_v$70708 = -28						; size = 4
_prop$ = -20						; size = 16
_this$ = 8						; size = 4
_propID$ = 12						; size = 4
_value$ = 16						; size = 4
?GetArchiveProperty@CHandler@NBz2@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z PROC ; NArchive::NBz2::CHandler::GetArchiveProperty
; Line 80
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 81
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
; Line 82
	mov	eax, DWORD PTR _propID$[ebp]
	mov	DWORD PTR tv67[ebp], eax
	mov	ecx, DWORD PTR tv67[ebp]
	sub	ecx, 38					; 00000026H
	mov	DWORD PTR tv67[ebp], ecx
	cmp	DWORD PTR tv67[ebp], 40			; 00000028H
	ja	$LN13@GetArchive@2
	mov	edx, DWORD PTR tv67[ebp]
	movzx	eax, BYTE PTR $LN17@GetArchive@2[edx]
	jmp	DWORD PTR $LN21@GetArchive@2[eax*4]
$LN12@GetArchive@2:
; Line 84
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+32]
	test	edx, edx
	je	SHORT $LN11@GetArchive@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	mov	edx, DWORD PTR [eax+40]
	push	edx
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=
$LN11@GetArchive@2:
	jmp	$LN13@GetArchive@2
$LN10@GetArchive@2:
; Line 85
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+33]
	test	ecx, ecx
	je	SHORT $LN9@GetArchive@2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+52]
	push	eax
	mov	ecx, DWORD PTR [edx+48]
	push	ecx
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=
$LN9@GetArchive@2:
	jmp	$LN13@GetArchive@2
$LN8@GetArchive@2:
; Line 86
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+34]
	test	eax, eax
	je	SHORT $LN7@GetArchive@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	push	edx
	mov	eax, DWORD PTR [ecx+56]
	push	eax
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=
$LN7@GetArchive@2:
	jmp	SHORT $LN13@GetArchive@2
$LN6@GetArchive@2:
; Line 87
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+35]
	test	edx, edx
	je	SHORT $LN5@GetArchive@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	push	ecx
	mov	edx, DWORD PTR [eax+64]
	push	edx
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=
$LN5@GetArchive@2:
	jmp	SHORT $LN13@GetArchive@2
$LN4@GetArchive@2:
; Line 90
	mov	DWORD PTR _v$70708[ebp], 0
; Line 91
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+28]
	test	ecx, ecx
	jne	SHORT $LN3@GetArchive@2
	mov	edx, DWORD PTR _v$70708[ebp]
	or	edx, 1
	mov	DWORD PTR _v$70708[ebp], edx
$LN3@GetArchive@2:
; Line 92
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+31]
	test	ecx, ecx
	je	SHORT $LN2@GetArchive@2
	mov	edx, DWORD PTR _v$70708[ebp]
	or	edx, 32					; 00000020H
	mov	DWORD PTR _v$70708[ebp], edx
$LN2@GetArchive@2:
; Line 93
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+30]
	test	ecx, ecx
	je	SHORT $LN1@GetArchive@2
	mov	edx, DWORD PTR _v$70708[ebp]
	or	edx, 64					; 00000040H
	mov	DWORD PTR _v$70708[ebp], edx
$LN1@GetArchive@2:
; Line 94
	mov	eax, DWORD PTR _v$70708[ebp]
	push	eax
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z ; NWindows::NCOM::CPropVariant::operator=
$LN13@GetArchive@2:
; Line 97
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _prop$[ebp]
	call	?Detach@CPropVariant@NCOM@NWindows@@QAEJPAUtagPROPVARIANT@@@Z ; NWindows::NCOM::CPropVariant::Detach
; Line 98
	mov	DWORD PTR $T71764[ebp], 0
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T71764[ebp]
; Line 99
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@GetArchive@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN20@GetArchive@2:
	DD	1
	DD	$LN19@GetArchive@2
$LN19@GetArchive@2:
	DD	-20					; ffffffecH
	DD	16					; 00000010H
	DD	$LN18@GetArchive@2
$LN18@GetArchive@2:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
	npad	3
$LN21@GetArchive@2:
	DD	$LN6@GetArchive@2
	DD	$LN12@GetArchive@2
	DD	$LN4@GetArchive@2
	DD	$LN8@GetArchive@2
	DD	$LN10@GetArchive@2
	DD	$LN13@GetArchive@2
$LN17@GetArchive@2:
	DB	0
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	1
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	2
	DB	5
	DB	5
	DB	3
	DB	5
	DB	5
	DB	5
	DB	4
?GetArchiveProperty@CHandler@NBz2@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z ENDP ; NArchive::NBz2::CHandler::GetArchiveProperty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CPropVariant@NCOM@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CPropVariant@NCOM@NWindows@@QAE@XZ PROC		; NWindows::NCOM::CPropVariant::CPropVariant, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\propvariant.h
; Line 47
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 49
	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx], ax
; Line 50
	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+2], dx
; Line 54
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
; Line 55
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CPropVariant@NCOM@NWindows@@QAE@XZ ENDP		; NWindows::NCOM::CPropVariant::CPropVariant
_TEXT	ENDS
EXTRN	?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ:PROC	; NWindows::NCOM::CPropVariant::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CPropVariant@NCOM@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CPropVariant@NCOM@NWindows@@QAE@XZ PROC		; NWindows::NCOM::CPropVariant::~CPropVariant, COMDAT
; _this$ = ecx
; Line 56
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ ; NWindows::NCOM::CPropVariant::Clear
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CPropVariant@NCOM@NWindows@@QAE@XZ ENDP		; NWindows::NCOM::CPropVariant::~CPropVariant
_TEXT	ENDS
PUBLIC	?GetNumberOfItems@CHandler@NBz2@NArchive@@UAGJPAI@Z ; NArchive::NBz2::CHandler::GetNumberOfItems
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = 8						; size = 4
_numItems$ = 12						; size = 4
?GetNumberOfItems@CHandler@NBz2@NArchive@@UAGJPAI@Z PROC ; NArchive::NBz2::CHandler::GetNumberOfItems
; File c:\workspace\7z1505-src\cpp\7zip\archive\bz2handler.cpp
; Line 102
	push	ebp
	mov	ebp, esp
; Line 103
	mov	eax, DWORD PTR _numItems$[ebp]
	mov	DWORD PTR [eax], 1
; Line 104
	xor	eax, eax
; Line 105
	pop	ebp
	ret	8
?GetNumberOfItems@CHandler@NBz2@NArchive@@UAGJPAI@Z ENDP ; NArchive::NBz2::CHandler::GetNumberOfItems
_TEXT	ENDS
PUBLIC	?GetProperty@CHandler@NBz2@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z ; NArchive::NBz2::CHandler::GetProperty
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv67 = -32						; size = 4
$T71778 = -28						; size = 4
_prop$ = -20						; size = 16
_this$ = 8						; size = 4
___formal$ = 12						; size = 4
_propID$ = 16						; size = 4
_value$ = 20						; size = 4
?GetProperty@CHandler@NBz2@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z PROC ; NArchive::NBz2::CHandler::GetProperty
; Line 108
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 109
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
; Line 110
	mov	eax, DWORD PTR _propID$[ebp]
	mov	DWORD PTR tv67[ebp], eax
	cmp	DWORD PTR tv67[ebp], 7
	je	SHORT $LN2@GetPropert@2
	cmp	DWORD PTR tv67[ebp], 8
	je	SHORT $LN4@GetPropert@2
	jmp	SHORT $LN5@GetPropert@2
$LN4@GetPropert@2:
; Line 112
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+32]
	test	edx, edx
	je	SHORT $LN3@GetPropert@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	mov	edx, DWORD PTR [eax+40]
	push	edx
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=
$LN3@GetPropert@2:
	jmp	SHORT $LN5@GetPropert@2
$LN2@GetPropert@2:
; Line 113
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+33]
	test	ecx, ecx
	je	SHORT $LN5@GetPropert@2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+52]
	push	eax
	mov	ecx, DWORD PTR [edx+48]
	push	ecx
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=
$LN5@GetPropert@2:
; Line 115
	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	lea	ecx, DWORD PTR _prop$[ebp]
	call	?Detach@CPropVariant@NCOM@NWindows@@QAEJPAUtagPROPVARIANT@@@Z ; NWindows::NCOM::CPropVariant::Detach
; Line 116
	mov	DWORD PTR $T71778[ebp], 0
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T71778[ebp]
; Line 117
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@GetPropert@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN11@GetPropert@2:
	DD	1
	DD	$LN10@GetPropert@2
$LN10@GetPropert@2:
	DD	-20					; ffffffecH
	DD	16					; 00000010H
	DD	$LN9@GetPropert@2
$LN9@GetPropert@2:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
?GetProperty@CHandler@NBz2@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z ENDP ; NArchive::NBz2::CHandler::GetProperty
_TEXT	ENDS
EXTRN	?IsEndSig@NBZip2@NCompress@@YG_NPBE@Z:PROC	; NCompress::NBZip2::IsEndSig
EXTRN	?IsBlockSig@NBZip2@NCompress@@YG_NPBE@Z:PROC	; NCompress::NBZip2::IsBlockSig
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = 8							; size = 4
_size$ = 12						; size = 4
_IsArc_BZip2@8 PROC
; Line 122
	push	ebp
	mov	ebp, esp
; Line 123
	cmp	DWORD PTR _size$[ebp], 10		; 0000000aH
	jae	SHORT $LN5@IsArc_BZip
; Line 124
	mov	eax, 2
	jmp	SHORT $LN6@IsArc_BZip
$LN5@IsArc_BZip:
; Line 125
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 66					; 00000042H
	jne	SHORT $LN3@IsArc_BZip
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	cmp	eax, 90					; 0000005aH
	jne	SHORT $LN3@IsArc_BZip
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+2]
	cmp	edx, 104				; 00000068H
	jne	SHORT $LN3@IsArc_BZip
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+3]
	cmp	ecx, 49					; 00000031H
	jl	SHORT $LN3@IsArc_BZip
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+3]
	cmp	eax, 57					; 00000039H
	jle	SHORT $LN4@IsArc_BZip
$LN3@IsArc_BZip:
; Line 126
	xor	eax, eax
	jmp	SHORT $LN6@IsArc_BZip
$LN4@IsArc_BZip:
; Line 127
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx
; Line 128
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	?IsBlockSig@NBZip2@NCompress@@YG_NPBE@Z	; NCompress::NBZip2::IsBlockSig
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@IsArc_BZip
; Line 129
	mov	eax, 1
	jmp	SHORT $LN6@IsArc_BZip
$LN2@IsArc_BZip:
; Line 130
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	?IsEndSig@NBZip2@NCompress@@YG_NPBE@Z	; NCompress::NBZip2::IsEndSig
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@IsArc_BZip
; Line 131
	mov	eax, 1
	jmp	SHORT $LN6@IsArc_BZip
$LN1@IsArc_BZip:
; Line 132
	xor	eax, eax
$LN6@IsArc_BZip:
; Line 133
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_IsArc_BZip2@8 ENDP
_TEXT	ENDS
PUBLIC	??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=
PUBLIC	??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ; CMyComPtr<IInStream>::operator=
PUBLIC	__$ArrayPad$
PUBLIC	?Open@CHandler@NBz2@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z ; NArchive::NBz2::CHandler::Open
EXTRN	?ReadStream_FALSE@@YGJPAUISequentialInStream@@PAXI@Z:PROC ; ReadStream_FALSE
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
xdata$x	SEGMENT
__catchsym$?Open@CHandler@NBz2@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?Open@CHandler@NBz2@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$0
__unwindtable$?Open@CHandler@NBz2@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?Open@CHandler@NBz2@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?Open@CHandler@NBz2@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$2
__ehfuncinfo$?Open@CHandler@NBz2@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Open@CHandler@NBz2@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?Open@CHandler@NBz2@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T71785 = -48						; size = 4
___result_$70754 = -44					; size = 4
_buf$70753 = -36					; size = 10
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_this$ = 8						; size = 4
_stream$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
?Open@CHandler@NBz2@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z PROC ; NArchive::NBz2::CHandler::Open
; Line 137
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Open@CHandler@NBz2@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	push	edi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-48], eax
	mov	DWORD PTR [ebp-44], eax
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
; Line 138
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 139
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 142
	push	10					; 0000000aH
	lea	ecx, DWORD PTR _buf$70753[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	?ReadStream_FALSE@@YGJPAUISequentialInStream@@PAXI@Z ; ReadStream_FALSE
	mov	DWORD PTR ___result_$70754[ebp], eax
	cmp	DWORD PTR ___result_$70754[ebp], 0
	je	SHORT $LN2@Open
	mov	eax, DWORD PTR ___result_$70754[ebp]
	jmp	SHORT $LN4@Open
$LN2@Open:
; Line 143
	push	10					; 0000000aH
	lea	eax, DWORD PTR _buf$70753[ebp]
	push	eax
	call	_IsArc_BZip2@8
	test	eax, eax
	jne	SHORT $LN1@Open
; Line 144
	mov	eax, 1
	jmp	SHORT $LN4@Open
$LN1@Open:
; Line 145
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+28], 1
; Line 146
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ; CMyComPtr<IInStream>::operator=
; Line 147
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=
; Line 148
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+29], 1
; Line 150
	xor	eax, eax
	jmp	SHORT $LN4@Open
__catch$?Open@CHandler@NBz2@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$0:
; Line 151
	mov	DWORD PTR $T71785[ebp], -2147024882	; 8007000eH
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN9@Open
	ret	0
	mov	eax, __tryend$?Open@CHandler@NBz2@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$1
	ret	0
__tryend$?Open@CHandler@NBz2@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$1:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN4@Open
$LN9@Open:
	mov	eax, DWORD PTR $T71785[ebp]
$LN4@Open:
; Line 152
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@Open
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN14@Open:
	DD	1
	DD	$LN13@Open
$LN13@Open:
	DD	-36					; ffffffdcH
	DD	10					; 0000000aH
	DD	$LN11@Open
$LN11@Open:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__ehhandler$?Open@CHandler@NBz2@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Open@CHandler@NBz2@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Open@CHandler@NBz2@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z ENDP ; NArchive::NBz2::CHandler::Open
PUBLIC	?OpenSeq@CHandler@NBz2@NArchive@@UAGJPAUISequentialInStream@@@Z ; NArchive::NBz2::CHandler::OpenSeq
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = 8						; size = 4
_stream$ = 12						; size = 4
?OpenSeq@CHandler@NBz2@NArchive@@UAGJPAUISequentialInStream@@@Z PROC ; NArchive::NBz2::CHandler::OpenSeq
; Line 156
	push	ebp
	mov	ebp, esp
	push	esi
; Line 157
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 158
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+24], 1
; Line 159
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=
; Line 160
	xor	eax, eax
; Line 161
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?OpenSeq@CHandler@NBz2@NArchive@@UAGJPAUISequentialInStream@@@Z ENDP ; NArchive::NBz2::CHandler::OpenSeq
_TEXT	ENDS
PUBLIC	?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ	; CMyComPtr<IInStream>::Release
PUBLIC	?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ ; CMyComPtr<ISequentialInStream>::Release
PUBLIC	?Close@CHandler@NBz2@NArchive@@UAGJXZ		; NArchive::NBz2::CHandler::Close
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = 8						; size = 4
?Close@CHandler@NBz2@NArchive@@UAGJXZ PROC		; NArchive::NBz2::CHandler::Close
; Line 164
	push	ebp
	mov	ebp, esp
; Line 165
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+28], 0
; Line 166
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+29], 0
; Line 167
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+30], 0
; Line 168
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+31], 0
; Line 170
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+32], 0
; Line 171
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+33], 0
; Line 172
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+34], 0
; Line 173
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+35], 0
; Line 175
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+40], 0
	mov	DWORD PTR [edx+44], 0
; Line 177
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ ; CMyComPtr<ISequentialInStream>::Release
; Line 178
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ ; CMyComPtr<IInStream>::Release
; Line 179
	xor	eax, eax
; Line 180
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
?Close@CHandler@NBz2@NArchive@@UAGJXZ ENDP		; NArchive::NBz2::CHandler::Close
_TEXT	ENDS
PUBLIC	?GetNumBlocks@CDecoder@NBZip2@NCompress@@QBE_KXZ ; NCompress::NBZip2::CDecoder::GetNumBlocks
PUBLIC	?GetInputProcessedSize@CDecoder@NBZip2@NCompress@@QBE_KXZ ; NCompress::NBZip2::CDecoder::GetInputProcessedSize
PUBLIC	?ExtraBitsWereRead@?$CDecoder@VCInBuffer@@@NBitm@@QBE_NXZ ; NBitm::CDecoder<CInBuffer>::ExtraBitsWereRead
PUBLIC	?GetStreamSize@CDecoder@NBZip2@NCompress@@QBE_KXZ ; NCompress::NBZip2::CDecoder::GetStreamSize
PUBLIC	?GetSize@CDummyOutStream@@QBE_KXZ		; CDummyOutStream::GetSize
PUBLIC	??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *
PUBLIC	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ	; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
PUBLIC	?InitNumBlocks@CDecoder@NBZip2@NCompress@@QAEXXZ ; NCompress::NBZip2::CDecoder::InitNumBlocks
PUBLIC	??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>
PUBLIC	?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ; CMyComPtr<ISequentialOutStream>::Release
PUBLIC	?Init@CDummyOutStream@@QAEXXZ			; CDummyOutStream::Init
PUBLIC	?SetStream@CDummyOutStream@@QAEXPAUISequentialOutStream@@@Z ; CDummyOutStream::SetStream
PUBLIC	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
PUBLIC	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
PUBLIC	??0CDummyOutStream@@QAE@XZ			; CDummyOutStream::CDummyOutStream
PUBLIC	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ	; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
PUBLIC	??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
PUBLIC	??0?$CMyComPtr@UICompressCoder@@@@QAE@PAUICompressCoder@@@Z ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>
PUBLIC	??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->
PUBLIC	??7?$CMyComPtr@UIInStream@@@@QBE_NXZ		; CMyComPtr<IInStream>::operator!
PUBLIC	??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ	; CMyComPtr<ISequentialOutStream>::operator!
PUBLIC	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ	; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
PUBLIC	??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator&
PUBLIC	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ	; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
PUBLIC	?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z ; NArchive::NBz2::CHandler::Extract
PUBLIC	??_R0?AUCInBufferException@@@8			; CInBufferException `RTTI Type Descriptor'
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	?CodeResume@CDecoder@NBZip2@NCompress@@QAEJPAUISequentialOutStream@@PAUICompressProgressInfo@@@Z:PROC ; NCompress::NBZip2::CDecoder::CodeResume
EXTRN	?SetCur@CLocalProgress@@QAEJXZ:PROC		; CLocalProgress::SetCur
EXTRN	?Init@CLocalProgress@@QAEXPAUIProgress@@_N@Z:PROC ; CLocalProgress::Init
EXTRN	??0CLocalProgress@@QAE@XZ:PROC			; CLocalProgress::CLocalProgress
EXTRN	??0CDecoder@NBZip2@NCompress@@QAE@XZ:PROC	; NCompress::NBZip2::CDecoder::CDecoder
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_R0?AUCInBufferException@@@8
_DATA	SEGMENT
??_R0?AUCInBufferException@@@8 DD FLAT:??_7type_info@@6B@ ; CInBufferException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUCInBufferException@@', 00H
_DATA	ENDS
xdata$x	SEGMENT
__catchsym$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$12 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$2
__catchsym$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$11 DD 09H
	DD	FLAT:??_R0?AUCInBufferException@@@8
	DD	0ffffff70H
	DD	FLAT:__catch$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$0
__ehfuncinfo$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z DD 019930522H
	DD	0bH
	DD	FLAT:__unwindtable$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
	DD	02H
	DD	FLAT:__tryblocktable$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z DD 02H
	DD	08H
	DD	09H
	DD	01H
	DD	FLAT:__catchsym$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$11
	DD	00H
	DD	09H
	DD	0aH
	DD	01H
	DD	FLAT:__catchsym$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$12
__unwindtable$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$4
	DD	01H
	DD	00H
	DD	02H
	DD	FLAT:__unwindfunclet$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$5
	DD	02H
	DD	FLAT:__unwindfunclet$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$6
	DD	04H
	DD	FLAT:__unwindfunclet$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$7
	DD	04H
	DD	FLAT:__unwindfunclet$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$8
	DD	06H
	DD	FLAT:__unwindfunclet$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$9
	DD	06H
	DD	FLAT:__unwindfunclet$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$10
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv406 = -352						; size = 4
tv405 = -348						; size = 8
tv404 = -340						; size = 8
tv403 = -329						; size = 1
tv402 = -328						; size = 8
tv401 = -320						; size = 8
tv400 = -312						; size = 4
tv399 = -308						; size = 4
tv398 = -304						; size = 4
tv221 = -300						; size = 4
tv220 = -296						; size = 4
tv397 = -292						; size = 4
tv395 = -288						; size = 4
tv200 = -284						; size = 4
tv199 = -280						; size = 4
tv394 = -276						; size = 4
tv392 = -272						; size = 4
tv391 = -268						; size = 4
tv165 = -264						; size = 4
tv164 = -260						; size = 4
tv390 = -256						; size = 4
tv388 = -252						; size = 4
tv387 = -248						; size = 4
tv148 = -244						; size = 4
tv386 = -240						; size = 4
tv385 = -234						; size = 1
tv384 = -233						; size = 1
tv383 = -232						; size = 4
tv382 = -228						; size = 4
tv381 = -224						; size = 4
$T71831 = -220						; size = 4
$T71830 = -216						; size = 4
$T71829 = -212						; size = 4
$T71828 = -208						; size = 4
$T71827 = -204						; size = 4
$T71826 = -200						; size = 4
$T71825 = -196						; size = 4
$T71822 = -192						; size = 4
$T71821 = -188						; size = 4
$T71818 = -184						; size = 4
$T71817 = -180						; size = 4
$T71816 = -176						; size = 4
$T71813 = -172						; size = 4
$T71812 = -168						; size = 4
$T71811 = -164						; size = 4
$T71810 = -160						; size = 4
$T71809 = -156						; size = 4
$T71808 = -152						; size = 4
_e$70917 = -144						; size = 4
_streamSize$70889 = -136				; size = 8
___result_$70877 = -128					; size = 4
_result$70872 = -124					; size = 4
_numStreams$70871 = -120				; size = 8
_unpackedSize$70870 = -112				; size = 8
_packSize$70869 = -104					; size = 8
_progress$70868 = -92					; size = 4
_lps$70862 = -84					; size = 4
_outStream$70861 = -76					; size = 4
_outStreamSpec$70855 = -68				; size = 4
___result_$70851 = -64					; size = 4
_decoder$70850 = -56					; size = 4
_decoderSpec$70808 = -48				; size = 4
_opRes$70806 = -44					; size = 4
___result_$70801 = -40					; size = 4
___result_$70790 = -36					; size = 4
_askMode$70789 = -32					; size = 4
_realOutStream$70788 = -24				; size = 4
__$EHRec$ = -16						; size = 16
_this$ = 8						; size = 4
_indices$ = 12						; size = 4
_numItems$ = 16						; size = 4
_testMode$ = 20						; size = 4
_extractCallback$ = 24					; size = 4
?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z PROC ; NArchive::NBz2::CHandler::Extract
; Line 184
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 336				; 00000150H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-352]
	mov	ecx, 84					; 00000054H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
; Line 185
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 186
	cmp	DWORD PTR _numItems$[ebp], 0
	jne	SHORT $LN37@Extract
; Line 187
	xor	eax, eax
	jmp	$LN39@Extract
$LN37@Extract:
; Line 188
	cmp	DWORD PTR _numItems$[ebp], -1
	je	SHORT $LN36@Extract
	cmp	DWORD PTR _numItems$[ebp], 1
	jne	SHORT $LN35@Extract
	mov	eax, DWORD PTR _indices$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN36@Extract
$LN35@Extract:
; Line 189
	mov	eax, -2147024809			; 80070057H
	jmp	$LN39@Extract
$LN36@Extract:
; Line 191
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+32]
	test	edx, edx
	je	SHORT $LN34@Extract
; Line 192
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	mov	edx, DWORD PTR [eax+40]
	push	edx
	mov	eax, DWORD PTR _extractCallback$[ebp]
	push	eax
	mov	ecx, DWORD PTR _extractCallback$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN34@Extract:
; Line 196
	lea	ecx, DWORD PTR _realOutStream$70788[ebp]
	call	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
	mov	DWORD PTR tv381[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 1
; Line 199
	xor	ecx, ecx
	cmp	DWORD PTR _testMode$[ebp], 0
	setne	cl
	mov	DWORD PTR _askMode$70789[ebp], ecx
; Line 200
	lea	ecx, DWORD PTR _realOutStream$70788[ebp]
	call	??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator&
	mov	DWORD PTR tv382[ebp], eax
	mov	esi, esp
	mov	edx, DWORD PTR _askMode$70789[ebp]
	push	edx
	mov	eax, DWORD PTR tv382[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _extractCallback$[ebp]
	push	ecx
	mov	edx, DWORD PTR _extractCallback$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv383[ebp], eax
	mov	edx, DWORD PTR tv383[ebp]
	mov	DWORD PTR ___result_$70790[ebp], edx
	cmp	DWORD PTR ___result_$70790[ebp], 0
	je	SHORT $LN33@Extract
	mov	eax, DWORD PTR ___result_$70790[ebp]
	mov	DWORD PTR $T71808[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _realOutStream$70788[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	eax, DWORD PTR $T71808[ebp]
	jmp	$LN39@Extract
$LN33@Extract:
; Line 201
	cmp	DWORD PTR _testMode$[ebp], 0
	jne	SHORT $LN32@Extract
	lea	ecx, DWORD PTR _realOutStream$70788[ebp]
	call	??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ ; CMyComPtr<ISequentialOutStream>::operator!
	mov	BYTE PTR tv384[ebp], al
	movzx	ecx, BYTE PTR tv384[ebp]
	test	ecx, ecx
	je	SHORT $LN32@Extract
; Line 202
	mov	DWORD PTR $T71809[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _realOutStream$70788[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	eax, DWORD PTR $T71809[ebp]
	jmp	$LN39@Extract
$LN32@Extract:
; Line 204
	mov	esi, esp
	mov	edx, DWORD PTR _askMode$70789[ebp]
	push	edx
	mov	eax, DWORD PTR _extractCallback$[ebp]
	push	eax
	mov	ecx, DWORD PTR _extractCallback$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 207
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+29]
	test	edx, edx
	je	$LN31@Extract
; Line 209
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??7?$CMyComPtr@UIInStream@@@@QBE_NXZ	; CMyComPtr<IInStream>::operator!
	mov	BYTE PTR tv385[ebp], al
	movzx	eax, BYTE PTR tv385[ebp]
	test	eax, eax
	je	SHORT $LN30@Extract
; Line 210
	mov	DWORD PTR $T71810[ebp], -2147467259	; 80004005H
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _realOutStream$70788[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	eax, DWORD PTR $T71810[ebp]
	jmp	$LN39@Extract
$LN30@Extract:
; Line 211
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->
	mov	DWORD PTR tv386[ebp], eax
	mov	ecx, DWORD PTR tv386[ebp]
	mov	DWORD PTR tv148[ebp], ecx
	mov	esi, esp
	push	0
	push	0
	push	0
	push	0
	mov	edx, DWORD PTR tv148[ebp]
	push	edx
	mov	eax, DWORD PTR tv148[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv387[ebp], eax
	mov	eax, DWORD PTR tv387[ebp]
	mov	DWORD PTR ___result_$70801[ebp], eax
	cmp	DWORD PTR ___result_$70801[ebp], 0
	je	SHORT $LN29@Extract
	mov	ecx, DWORD PTR ___result_$70801[ebp]
	mov	DWORD PTR $T71811[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _realOutStream$70788[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	eax, DWORD PTR $T71811[ebp]
	jmp	$LN39@Extract
$LN29@Extract:
; Line 213
	jmp	SHORT $LN28@Extract
$LN31@Extract:
; Line 214
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+29], 1
$LN28@Extract:
; Line 219
	mov	BYTE PTR __$EHRec$[ebp+12], 2
; Line 221
	push	28752					; 00007050H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR tv388[ebp], eax
	mov	eax, DWORD PTR tv388[ebp]
	mov	DWORD PTR $T71813[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	cmp	DWORD PTR $T71813[ebp], 0
	je	SHORT $LN41@Extract
	mov	ecx, DWORD PTR $T71813[ebp]
	call	??0CDecoder@NBZip2@NCompress@@QAE@XZ	; NCompress::NBZip2::CDecoder::CDecoder
	mov	DWORD PTR tv390[ebp], eax
	mov	ecx, DWORD PTR tv390[ebp]
	mov	DWORD PTR tv164[ebp], ecx
	jmp	SHORT $LN42@Extract
$LN41@Extract:
	mov	DWORD PTR tv164[ebp], 0
$LN42@Extract:
	mov	edx, DWORD PTR tv164[ebp]
	mov	DWORD PTR $T71812[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	mov	eax, DWORD PTR $T71812[ebp]
	mov	DWORD PTR _decoderSpec$70808[ebp], eax
; Line 222
	mov	ecx, DWORD PTR _decoderSpec$70808[ebp]
	push	ecx
	lea	ecx, DWORD PTR _decoder$70850[ebp]
	call	??0?$CMyComPtr@UICompressCoder@@@@QAE@PAUICompressCoder@@@Z ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>
	mov	BYTE PTR __$EHRec$[ebp+12], 4
; Line 223
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
	mov	DWORD PTR tv165[ebp], eax
	mov	esi, esp
	mov	edx, DWORD PTR tv165[ebp]
	push	edx
	mov	eax, DWORD PTR _decoderSpec$70808[ebp]
	push	eax
	mov	ecx, DWORD PTR _decoderSpec$70808[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 226
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+112]
	push	edx
	mov	eax, DWORD PTR _decoderSpec$70808[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _decoderSpec$70808[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv391[ebp], eax
	mov	ecx, DWORD PTR tv391[ebp]
	mov	DWORD PTR ___result_$70851[ebp], ecx
	cmp	DWORD PTR ___result_$70851[ebp], 0
	je	SHORT $LN26@Extract
	mov	edx, DWORD PTR ___result_$70851[ebp]
	mov	DWORD PTR $T71816[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _decoder$70850[ebp]
	call	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _realOutStream$70788[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	eax, DWORD PTR $T71816[ebp]
	jmp	$LN39@Extract
$LN26@Extract:
; Line 229
	push	24					; 00000018H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR tv392[ebp], eax
	mov	eax, DWORD PTR tv392[ebp]
	mov	DWORD PTR $T71818[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 5
	cmp	DWORD PTR $T71818[ebp], 0
	je	SHORT $LN43@Extract
	mov	ecx, DWORD PTR $T71818[ebp]
	call	??0CDummyOutStream@@QAE@XZ
	mov	DWORD PTR tv394[ebp], eax
	mov	ecx, DWORD PTR tv394[ebp]
	mov	DWORD PTR tv199[ebp], ecx
	jmp	SHORT $LN44@Extract
$LN43@Extract:
	mov	DWORD PTR tv199[ebp], 0
$LN44@Extract:
	mov	edx, DWORD PTR tv199[ebp]
	mov	DWORD PTR $T71817[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	mov	eax, DWORD PTR $T71817[ebp]
	mov	DWORD PTR _outStreamSpec$70855[ebp], eax
; Line 230
	mov	ecx, DWORD PTR _outStreamSpec$70855[ebp]
	push	ecx
	lea	ecx, DWORD PTR _outStream$70861[ebp]
	call	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 6
; Line 231
	lea	ecx, DWORD PTR _realOutStream$70788[ebp]
	call	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
	mov	DWORD PTR tv200[ebp], eax
	mov	edx, DWORD PTR tv200[ebp]
	push	edx
	mov	ecx, DWORD PTR _outStreamSpec$70855[ebp]
	call	?SetStream@CDummyOutStream@@QAEXPAUISequentialOutStream@@@Z ; CDummyOutStream::SetStream
; Line 232
	mov	ecx, DWORD PTR _outStreamSpec$70855[ebp]
	call	?Init@CDummyOutStream@@QAEXXZ		; CDummyOutStream::Init
; Line 234
	lea	ecx, DWORD PTR _realOutStream$70788[ebp]
	call	?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ; CMyComPtr<ISequentialOutStream>::Release
; Line 236
	push	56					; 00000038H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR tv395[ebp], eax
	mov	eax, DWORD PTR tv395[ebp]
	mov	DWORD PTR $T71822[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 7
	cmp	DWORD PTR $T71822[ebp], 0
	je	SHORT $LN45@Extract
	mov	ecx, DWORD PTR $T71822[ebp]
	call	??0CLocalProgress@@QAE@XZ		; CLocalProgress::CLocalProgress
	mov	DWORD PTR tv397[ebp], eax
	mov	ecx, DWORD PTR tv397[ebp]
	mov	DWORD PTR tv220[ebp], ecx
	jmp	SHORT $LN46@Extract
$LN45@Extract:
	mov	DWORD PTR tv220[ebp], 0
$LN46@Extract:
	mov	edx, DWORD PTR tv220[ebp]
	mov	DWORD PTR $T71821[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 6
	mov	eax, DWORD PTR $T71821[ebp]
	mov	DWORD PTR _lps$70862[ebp], eax
; Line 237
	mov	ecx, DWORD PTR _lps$70862[ebp]
	push	ecx
	lea	ecx, DWORD PTR _progress$70868[ebp]
	call	??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+12], 8
; Line 238
	push	1
	mov	edx, DWORD PTR _extractCallback$[ebp]
	push	edx
	mov	ecx, DWORD PTR _lps$70862[ebp]
	call	?Init@CLocalProgress@@QAEXPAUIProgress@@_N@Z ; CLocalProgress::Init
; Line 240
	mov	DWORD PTR _packSize$70869[ebp], 0
	mov	DWORD PTR _packSize$70869[ebp+4], 0
; Line 241
	mov	DWORD PTR _unpackedSize$70870[ebp], 0
	mov	DWORD PTR _unpackedSize$70870[ebp+4], 0
; Line 242
	mov	DWORD PTR _numStreams$70871[ebp], 0
	mov	DWORD PTR _numStreams$70871[ebp+4], 0
; Line 244
	mov	ecx, DWORD PTR _decoderSpec$70808[ebp]
	call	?InitNumBlocks@CDecoder@NBZip2@NCompress@@QAEXXZ ; NCompress::NBZip2::CDecoder::InitNumBlocks
; Line 246
	mov	DWORD PTR _result$70872[ebp], 0
$LN25@Extract:
; Line 250
	mov	eax, DWORD PTR _lps$70862[ebp]
	mov	ecx, DWORD PTR _packSize$70869[ebp]
	mov	DWORD PTR [eax+32], ecx
	mov	edx, DWORD PTR _packSize$70869[ebp+4]
	mov	DWORD PTR [eax+36], edx
; Line 251
	mov	eax, DWORD PTR _lps$70862[ebp]
	mov	ecx, DWORD PTR _unpackedSize$70870[ebp]
	mov	DWORD PTR [eax+40], ecx
	mov	edx, DWORD PTR _unpackedSize$70870[ebp+4]
	mov	DWORD PTR [eax+44], edx
; Line 253
	mov	ecx, DWORD PTR _lps$70862[ebp]
	call	?SetCur@CLocalProgress@@QAEJXZ		; CLocalProgress::SetCur
	mov	DWORD PTR tv221[ebp], eax
	mov	eax, DWORD PTR tv221[ebp]
	mov	DWORD PTR ___result_$70877[ebp], eax
	cmp	DWORD PTR ___result_$70877[ebp], 0
	je	SHORT $LN23@Extract
	mov	ecx, DWORD PTR ___result_$70877[ebp]
	mov	DWORD PTR $T71825[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 6
	lea	ecx, DWORD PTR _progress$70868[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _outStream$70861[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _decoder$70850[ebp]
	call	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _realOutStream$70788[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	eax, DWORD PTR $T71825[ebp]
	jmp	$LN39@Extract
$LN23@Extract:
; Line 255
	lea	ecx, DWORD PTR _progress$70868[ebp]
	call	??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *
	mov	DWORD PTR tv398[ebp], eax
	lea	ecx, DWORD PTR _outStream$70861[ebp]
	call	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
	mov	DWORD PTR tv399[ebp], eax
	mov	edx, DWORD PTR tv398[ebp]
	push	edx
	mov	eax, DWORD PTR tv399[ebp]
	push	eax
	mov	ecx, DWORD PTR _decoderSpec$70808[ebp]
	call	?CodeResume@CDecoder@NBZip2@NCompress@@QAEJPAUISequentialOutStream@@PAUICompressProgressInfo@@@Z ; NCompress::NBZip2::CDecoder::CodeResume
	mov	DWORD PTR tv400[ebp], eax
	mov	ecx, DWORD PTR tv400[ebp]
	mov	DWORD PTR _result$70872[ebp], ecx
; Line 257
	cmp	DWORD PTR _result$70872[ebp], 1
	je	SHORT $LN22@Extract
	cmp	DWORD PTR _result$70872[ebp], 0
	je	SHORT $LN22@Extract
; Line 258
	mov	edx, DWORD PTR _result$70872[ebp]
	mov	DWORD PTR $T71826[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 6
	lea	ecx, DWORD PTR _progress$70868[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _outStream$70861[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _decoder$70850[ebp]
	call	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _realOutStream$70788[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	eax, DWORD PTR $T71826[ebp]
	jmp	$LN39@Extract
$LN22@Extract:
; Line 260
	mov	eax, DWORD PTR _decoderSpec$70808[ebp]
	movzx	ecx, BYTE PTR [eax+28744]
	test	ecx, ecx
	je	SHORT $LN21@Extract
; Line 261
	mov	edx, DWORD PTR _numStreams$70871[ebp]
	add	edx, 1
	mov	eax, DWORD PTR _numStreams$70871[ebp+4]
	adc	eax, 0
	mov	DWORD PTR _numStreams$70871[ebp], edx
	mov	DWORD PTR _numStreams$70871[ebp+4], eax
	jmp	SHORT $LN20@Extract
$LN21@Extract:
; Line 262
	mov	ecx, DWORD PTR _numStreams$70871[ebp]
	or	ecx, DWORD PTR _numStreams$70871[ebp+4]
	jne	SHORT $LN20@Extract
; Line 264
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+28], 0
; Line 265
	mov	DWORD PTR _result$70872[ebp], 1
; Line 266
	jmp	$LN24@Extract
$LN20@Extract:
; Line 269
	mov	ecx, DWORD PTR _outStreamSpec$70855[ebp]
	call	?GetSize@CDummyOutStream@@QBE_KXZ	; CDummyOutStream::GetSize
	mov	DWORD PTR tv401[ebp], eax
	mov	DWORD PTR tv401[ebp+4], edx
	mov	eax, DWORD PTR tv401[ebp]
	mov	DWORD PTR _unpackedSize$70870[ebp], eax
	mov	ecx, DWORD PTR tv401[ebp+4]
	mov	DWORD PTR _unpackedSize$70870[ebp+4], ecx
; Line 270
	mov	ecx, DWORD PTR _decoderSpec$70808[ebp]
	call	?GetStreamSize@CDecoder@NBZip2@NCompress@@QBE_KXZ ; NCompress::NBZip2::CDecoder::GetStreamSize
	mov	DWORD PTR tv402[ebp], eax
	mov	DWORD PTR tv402[ebp+4], edx
	mov	edx, DWORD PTR tv402[ebp]
	mov	DWORD PTR _streamSize$70889[ebp], edx
	mov	eax, DWORD PTR tv402[ebp+4]
	mov	DWORD PTR _streamSize$70889[ebp+4], eax
; Line 272
	mov	ecx, DWORD PTR _streamSize$70889[ebp]
	cmp	ecx, DWORD PTR _packSize$70869[ebp]
	jne	SHORT $LN18@Extract
	mov	edx, DWORD PTR _streamSize$70889[ebp+4]
	cmp	edx, DWORD PTR _packSize$70869[ebp+4]
	jne	SHORT $LN18@Extract
; Line 275
	mov	DWORD PTR _result$70872[ebp], 0
; Line 276
	jmp	$LN24@Extract
$LN18@Extract:
; Line 279
	mov	eax, DWORD PTR _decoderSpec$70808[ebp]
	movzx	ecx, BYTE PTR [eax+28744]
	test	ecx, ecx
	jne	SHORT $LN17@Extract
; Line 281
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+30], 1
; Line 282
	mov	DWORD PTR _result$70872[ebp], 1
; Line 283
	jmp	$LN24@Extract
$LN17@Extract:
; Line 286
	mov	ecx, DWORD PTR _decoderSpec$70808[ebp]
	add	ecx, 320				; 00000140H
	call	?ExtraBitsWereRead@?$CDecoder@VCInBuffer@@@NBitm@@QBE_NXZ ; NBitm::CDecoder<CInBuffer>::ExtraBitsWereRead
	mov	BYTE PTR tv403[ebp], al
	movzx	eax, BYTE PTR tv403[ebp]
	test	eax, eax
	je	SHORT $LN16@Extract
; Line 288
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+31], 1
; Line 289
	mov	edx, DWORD PTR _streamSize$70889[ebp]
	mov	DWORD PTR _packSize$70869[ebp], edx
	mov	eax, DWORD PTR _streamSize$70889[ebp+4]
	mov	DWORD PTR _packSize$70869[ebp+4], eax
; Line 290
	mov	DWORD PTR _result$70872[ebp], 1
; Line 291
	jmp	$LN24@Extract
$LN16@Extract:
; Line 294
	mov	ecx, DWORD PTR _decoderSpec$70808[ebp]
	call	?GetInputProcessedSize@CDecoder@NBZip2@NCompress@@QBE_KXZ ; NCompress::NBZip2::CDecoder::GetInputProcessedSize
	mov	DWORD PTR tv404[ebp], eax
	mov	DWORD PTR tv404[ebp+4], edx
	mov	ecx, DWORD PTR tv404[ebp]
	mov	DWORD PTR _packSize$70869[ebp], ecx
	mov	edx, DWORD PTR tv404[ebp+4]
	mov	DWORD PTR _packSize$70869[ebp+4], edx
; Line 296
	mov	eax, DWORD PTR _packSize$70869[ebp+4]
	cmp	eax, DWORD PTR _streamSize$70889[ebp+4]
	jb	SHORT $LN15@Extract
	ja	SHORT $LN69@Extract
	mov	ecx, DWORD PTR _packSize$70869[ebp]
	cmp	ecx, DWORD PTR _streamSize$70889[ebp]
	jbe	SHORT $LN15@Extract
$LN69@Extract:
; Line 297
	mov	DWORD PTR $T71827[ebp], -2147467259	; 80004005H
	mov	BYTE PTR __$EHRec$[ebp+12], 6
	lea	ecx, DWORD PTR _progress$70868[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _outStream$70861[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _decoder$70850[ebp]
	call	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _realOutStream$70788[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	eax, DWORD PTR $T71827[ebp]
	jmp	$LN39@Extract
$LN15@Extract:
; Line 299
	cmp	DWORD PTR _result$70872[ebp], 0
	je	SHORT $LN14@Extract
; Line 300
	jmp	SHORT $LN24@Extract
$LN14@Extract:
; Line 301
	jmp	$LN25@Extract
$LN24@Extract:
; Line 303
	mov	edx, DWORD PTR _numStreams$70871[ebp]
	or	edx, DWORD PTR _numStreams$70871[ebp+4]
	je	SHORT $LN13@Extract
; Line 305
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _packSize$70869[ebp]
	mov	DWORD PTR [eax+40], ecx
	mov	edx, DWORD PTR _packSize$70869[ebp+4]
	mov	DWORD PTR [eax+44], edx
; Line 306
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _unpackedSize$70870[ebp]
	mov	DWORD PTR [eax+48], ecx
	mov	edx, DWORD PTR _unpackedSize$70870[ebp+4]
	mov	DWORD PTR [eax+52], edx
; Line 307
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _numStreams$70871[ebp]
	mov	DWORD PTR [eax+56], ecx
	mov	edx, DWORD PTR _numStreams$70871[ebp+4]
	mov	DWORD PTR [eax+60], edx
; Line 308
	mov	ecx, DWORD PTR _decoderSpec$70808[ebp]
	call	?GetNumBlocks@CDecoder@NBZip2@NCompress@@QBE_KXZ ; NCompress::NBZip2::CDecoder::GetNumBlocks
	mov	DWORD PTR tv405[ebp], eax
	mov	DWORD PTR tv405[ebp+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR tv405[ebp]
	mov	DWORD PTR [eax+64], ecx
	mov	edx, DWORD PTR tv405[ebp+4]
	mov	DWORD PTR [eax+68], edx
; Line 310
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+32], 1
; Line 311
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+33], 1
; Line 312
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+34], 1
; Line 313
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+35], 1
$LN13@Extract:
; Line 316
	mov	esi, esp
	mov	ecx, DWORD PTR _decoderSpec$70808[ebp]
	push	ecx
	mov	edx, DWORD PTR _decoderSpec$70808[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 317
	lea	ecx, DWORD PTR _outStream$70861[ebp]
	call	?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ; CMyComPtr<ISequentialOutStream>::Release
; Line 319
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+28]
	test	eax, eax
	jne	SHORT $LN12@Extract
; Line 320
	mov	DWORD PTR _opRes$70806[ebp], 7
	jmp	$LN11@Extract
$LN12@Extract:
; Line 321
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+31]
	test	edx, edx
	je	SHORT $LN10@Extract
; Line 322
	mov	DWORD PTR _opRes$70806[ebp], 5
	jmp	$LN11@Extract
$LN10@Extract:
; Line 323
	mov	eax, DWORD PTR _decoderSpec$70808[ebp]
	movzx	ecx, BYTE PTR [eax+28746]
	test	ecx, ecx
	je	SHORT $LN8@Extract
; Line 324
	mov	DWORD PTR _opRes$70806[ebp], 3
	jmp	SHORT $LN11@Extract
$LN8@Extract:
; Line 325
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+30]
	test	eax, eax
	je	SHORT $LN6@Extract
; Line 326
	mov	DWORD PTR _opRes$70806[ebp], 6
	jmp	SHORT $LN11@Extract
$LN6@Extract:
; Line 327
	cmp	DWORD PTR _result$70872[ebp], 1
	jne	SHORT $LN4@Extract
; Line 328
	mov	DWORD PTR _opRes$70806[ebp], 2
	jmp	SHORT $LN11@Extract
$LN4@Extract:
; Line 329
	cmp	DWORD PTR _result$70872[ebp], 0
	jne	SHORT $LN2@Extract
; Line 330
	mov	DWORD PTR _opRes$70806[ebp], 0
; Line 331
	jmp	SHORT $LN11@Extract
$LN2@Extract:
; Line 332
	mov	ecx, DWORD PTR _result$70872[ebp]
	mov	DWORD PTR $T71828[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 6
	lea	ecx, DWORD PTR _progress$70868[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _outStream$70861[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _decoder$70850[ebp]
	call	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _realOutStream$70788[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	eax, DWORD PTR $T71828[ebp]
	jmp	$LN39@Extract
$LN11@Extract:
; Line 334
	mov	BYTE PTR __$EHRec$[ebp+12], 6
	lea	ecx, DWORD PTR _progress$70868[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _outStream$70861[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _decoder$70850[ebp]
	call	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
	jmp	SHORT $LN48@Extract
__catch$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$0:
; Line 335
	mov	edx, DWORD PTR _e$70917[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T71829[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	mov	eax, $LN59@Extract
	ret	0
	mov	eax, $LN48@Extract
	ret	0
$LN48@Extract:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT $LN58@Extract
$LN59@Extract:
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _realOutStream$70788[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	eax, DWORD PTR $T71829[ebp]
	jmp	SHORT $LN39@Extract
$LN58@Extract:
; Line 337
	mov	esi, esp
	mov	ecx, DWORD PTR _opRes$70806[ebp]
	push	ecx
	mov	edx, DWORD PTR _extractCallback$[ebp]
	push	edx
	mov	eax, DWORD PTR _extractCallback$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv406[ebp], eax
	mov	eax, DWORD PTR tv406[ebp]
	mov	DWORD PTR $T71830[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _realOutStream$70788[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	eax, DWORD PTR $T71830[ebp]
	jmp	SHORT $LN39@Extract
__catch$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$2:
; Line 339
	mov	DWORD PTR $T71831[ebp], -2147024882	; 8007000eH
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN61@Extract
	ret	0
	mov	eax, __tryend$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$3
	ret	0
__tryend$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$3:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN39@Extract
$LN61@Extract:
	mov	eax, DWORD PTR $T71831[ebp]
$LN39@Extract:
; Line 340
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN77@Extract
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 352				; 00000160H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
	npad	1
$LN77@Extract:
	DD	5
	DD	$LN76@Extract
$LN76@Extract:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN70@Extract
	DD	-56					; ffffffc8H
	DD	4
	DD	$LN71@Extract
	DD	-76					; ffffffb4H
	DD	4
	DD	$LN72@Extract
	DD	-92					; ffffffa4H
	DD	4
	DD	$LN73@Extract
	DD	-144					; ffffff70H
	DD	4
	DD	$LN74@Extract
$LN74@Extract:
	DB	101					; 00000065H
	DB	0
$LN73@Extract:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	103					; 00000067H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	0
$LN72@Extract:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN71@Extract:
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN70@Extract:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	79					; 0000004fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$4:
	lea	ecx, DWORD PTR _realOutStream$70788[ebp]
	jmp	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
__unwindfunclet$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$5:
	mov	eax, DWORD PTR $T71813[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$6:
	lea	ecx, DWORD PTR _decoder$70850[ebp]
	jmp	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
__unwindfunclet$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$7:
	mov	eax, DWORD PTR $T71818[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$8:
	lea	ecx, DWORD PTR _outStream$70861[ebp]
	jmp	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
__unwindfunclet$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$9:
	mov	eax, DWORD PTR $T71822[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$10:
	lea	ecx, DWORD PTR _progress$70868[ebp]
	jmp	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
__ehhandler$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-356]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z ENDP ; NArchive::NBz2::CHandler::Extract
PUBLIC	?GetStreamSize@?$CDecoder@VCInBuffer@@@NBitm@@QBE_KXZ ; NBitm::CDecoder<CInBuffer>::GetStreamSize
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetStreamSize@CDecoder@NBZip2@NCompress@@QBE_KXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetStreamSize@CDecoder@NBZip2@NCompress@@QBE_KXZ PROC	; NCompress::NBZip2::CDecoder::GetStreamSize, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\compress\bzip2decoder.h
; Line 193
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 320				; 00000140H
	call	?GetStreamSize@?$CDecoder@VCInBuffer@@@NBitm@@QBE_KXZ ; NBitm::CDecoder<CInBuffer>::GetStreamSize
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetStreamSize@CDecoder@NBZip2@NCompress@@QBE_KXZ ENDP	; NCompress::NBZip2::CDecoder::GetStreamSize
_TEXT	ENDS
PUBLIC	?GetProcessedSize@?$CDecoder@VCInBuffer@@@NBitm@@QBE_KXZ ; NBitm::CDecoder<CInBuffer>::GetProcessedSize
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetInputProcessedSize@CDecoder@NBZip2@NCompress@@QBE_KXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetInputProcessedSize@CDecoder@NBZip2@NCompress@@QBE_KXZ PROC ; NCompress::NBZip2::CDecoder::GetInputProcessedSize, COMDAT
; _this$ = ecx
; Line 194
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 320				; 00000140H
	call	?GetProcessedSize@?$CDecoder@VCInBuffer@@@NBitm@@QBE_KXZ ; NBitm::CDecoder<CInBuffer>::GetProcessedSize
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetInputProcessedSize@CDecoder@NBZip2@NCompress@@QBE_KXZ ENDP ; NCompress::NBZip2::CDecoder::GetInputProcessedSize
_TEXT	ENDS
PUBLIC	?InitNumBlocks@CBase@NBZip2@NCompress@@QAEXXZ	; NCompress::NBZip2::CBase::InitNumBlocks
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?InitNumBlocks@CDecoder@NBZip2@NCompress@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?InitNumBlocks@CDecoder@NBZip2@NCompress@@QAEXXZ PROC	; NCompress::NBZip2::CDecoder::InitNumBlocks, COMDAT
; _this$ = ecx
; Line 196
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 312				; 00000138H
	call	?InitNumBlocks@CBase@NBZip2@NCompress@@QAEXXZ ; NCompress::NBZip2::CBase::InitNumBlocks
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?InitNumBlocks@CDecoder@NBZip2@NCompress@@QAEXXZ ENDP	; NCompress::NBZip2::CDecoder::InitNumBlocks
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?InitNumBlocks@CBase@NBZip2@NCompress@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?InitNumBlocks@CBase@NBZip2@NCompress@@QAEXXZ PROC	; NCompress::NBZip2::CBase::InitNumBlocks, COMDAT
; _this$ = ecx
; Line 87
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28336], 0
	mov	DWORD PTR [eax+28340], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?InitNumBlocks@CBase@NBZip2@NCompress@@QAEXXZ ENDP	; NCompress::NBZip2::CBase::InitNumBlocks
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetNumBlocks@CDecoder@NBZip2@NCompress@@QBE_KXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNumBlocks@CDecoder@NBZip2@NCompress@@QBE_KXZ PROC	; NCompress::NBZip2::CDecoder::GetNumBlocks, COMDAT
; _this$ = ecx
; Line 197
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+28648]
	mov	edx, DWORD PTR [ecx+28652]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetNumBlocks@CDecoder@NBZip2@NCompress@@QBE_KXZ ENDP	; NCompress::NBZip2::CDecoder::GetNumBlocks
_TEXT	ENDS
PUBLIC	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetStream@CDummyOutStream@@QAEXPAUISequentialOutStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_outStream$ = 8						; size = 4
?SetStream@CDummyOutStream@@QAEXPAUISequentialOutStream@@@Z PROC ; CDummyOutStream::SetStream, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\common\dummyoutstream.h
; Line 17
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _outStream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetStream@CDummyOutStream@@QAEXPAUISequentialOutStream@@@Z ENDP ; CDummyOutStream::SetStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Init@CDummyOutStream@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Init@CDummyOutStream@@QAEXXZ PROC			; CDummyOutStream::Init, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0
	mov	DWORD PTR [eax+20], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Init@CDummyOutStream@@QAEXXZ ENDP			; CDummyOutStream::Init
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetSize@CDummyOutStream@@QBE_KXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSize@CDummyOutStream@@QBE_KXZ PROC			; CDummyOutStream::GetSize, COMDAT
; _this$ = ecx
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+16]
	mov	edx, DWORD PTR [ecx+20]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSize@CDummyOutStream@@QBE_KXZ ENDP			; CDummyOutStream::GetSize
_TEXT	ENDS
PUBLIC	??_7CDummyOutStream@@6B@			; CDummyOutStream::`vftable'
PUBLIC	??0CMyUnknownImp@@QAE@XZ			; CMyUnknownImp::CMyUnknownImp
PUBLIC	??0ISequentialOutStream@@QAE@XZ			; ISequentialOutStream::ISequentialOutStream
PUBLIC	??_R4CDummyOutStream@@6B@			; CDummyOutStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCDummyOutStream@@@8			; CDummyOutStream `RTTI Type Descriptor'
PUBLIC	??_R3CDummyOutStream@@8				; CDummyOutStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CDummyOutStream@@8				; CDummyOutStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CDummyOutStream@@8		; CDummyOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ISequentialOutStream@@8		; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUISequentialOutStream@@@8		; ISequentialOutStream `RTTI Type Descriptor'
PUBLIC	??_R3ISequentialOutStream@@8			; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ISequentialOutStream@@8			; ISequentialOutStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIUnknown@@@8				; IUnknown `RTTI Type Descriptor'
PUBLIC	??_R3IUnknown@@8				; IUnknown::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IUnknown@@8				; IUnknown::`RTTI Base Class Array'
PUBLIC	??_R13?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AVCMyUnknownImp@@@8			; CMyUnknownImp `RTTI Type Descriptor'
PUBLIC	??_R3CMyUnknownImp@@8				; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMyUnknownImp@@8				; CMyUnknownImp::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?QueryInterface@CDummyOutStream@@UAGJABU_GUID@@PAPAX@Z ; CDummyOutStream::QueryInterface
PUBLIC	?AddRef@CDummyOutStream@@UAGKXZ			; CDummyOutStream::AddRef
PUBLIC	?Release@CDummyOutStream@@UAGKXZ		; CDummyOutStream::Release
EXTRN	?Write@CDummyOutStream@@UAGJPBXIPAI@Z:PROC	; CDummyOutStream::Write
;	COMDAT ??_R1A@?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R2CMyUnknownImp@@8
rdata$r	SEGMENT
??_R2CMyUnknownImp@@8 DD FLAT:??_R1A@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMyUnknownImp@@8
rdata$r	SEGMENT
??_R3CMyUnknownImp@@8 DD 00H				; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMyUnknownImp@@@8
_DATA	SEGMENT
??_R0?AVCMyUnknownImp@@@8 DD FLAT:??_7type_info@@6B@	; CMyUnknownImp `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMyUnknownImp@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R13?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R2IUnknown@@8
rdata$r	SEGMENT
??_R2IUnknown@@8 DD FLAT:??_R1A@?0A@EA@IUnknown@@8	; IUnknown::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3IUnknown@@8
rdata$r	SEGMENT
??_R3IUnknown@@8 DD 00H					; IUnknown::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIUnknown@@@8
_DATA	SEGMENT
??_R0?AUIUnknown@@@8 DD FLAT:??_7type_info@@6B@		; IUnknown `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIUnknown@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IUnknown@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R2ISequentialOutStream@@8
rdata$r	SEGMENT
??_R2ISequentialOutStream@@8 DD FLAT:??_R1A@?0A@EA@ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ISequentialOutStream@@8
rdata$r	SEGMENT
??_R3ISequentialOutStream@@8 DD 00H			; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ISequentialOutStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUISequentialOutStream@@@8
_DATA	SEGMENT
??_R0?AUISequentialOutStream@@@8 DD FLAT:??_7type_info@@6B@ ; ISequentialOutStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUISequentialOutStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ISequentialOutStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ISequentialOutStream@@8 DD FLAT:??_R0?AUISequentialOutStream@@@8 ; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ISequentialOutStream@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CDummyOutStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CDummyOutStream@@8 DD FLAT:??_R0?AVCDummyOutStream@@@8 ; CDummyOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CDummyOutStream@@8
rdata$r	ENDS
;	COMDAT ??_R2CDummyOutStream@@8
rdata$r	SEGMENT
??_R2CDummyOutStream@@8 DD FLAT:??_R1A@?0A@EA@CDummyOutStream@@8 ; CDummyOutStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ISequentialOutStream@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CDummyOutStream@@8
rdata$r	SEGMENT
??_R3CDummyOutStream@@8 DD 00H				; CDummyOutStream::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2CDummyOutStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCDummyOutStream@@@8
_DATA	SEGMENT
??_R0?AVCDummyOutStream@@@8 DD FLAT:??_7type_info@@6B@	; CDummyOutStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCDummyOutStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CDummyOutStream@@6B@
rdata$r	SEGMENT
??_R4CDummyOutStream@@6B@ DD 00H			; CDummyOutStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCDummyOutStream@@@8
	DD	FLAT:??_R3CDummyOutStream@@8
rdata$r	ENDS
;	COMDAT ??_7CDummyOutStream@@6B@
CONST	SEGMENT
??_7CDummyOutStream@@6B@ DD FLAT:??_R4CDummyOutStream@@6B@ ; CDummyOutStream::`vftable'
	DD	FLAT:?QueryInterface@CDummyOutStream@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CDummyOutStream@@UAGKXZ
	DD	FLAT:?Release@CDummyOutStream@@UAGKXZ
	DD	FLAT:?Write@CDummyOutStream@@UAGJPBXIPAI@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CDummyOutStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CDummyOutStream@@QAE@XZ PROC				; CDummyOutStream::CDummyOutStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ISequentialOutStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CDummyOutStream@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CDummyOutStream@@QAE@XZ ENDP				; CDummyOutStream::CDummyOutStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CMyUnknownImp@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMyUnknownImp@@QAE@XZ PROC				; CMyUnknownImp::CMyUnknownImp, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 167
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CMyUnknownImp@@QAE@XZ ENDP				; CMyUnknownImp::CMyUnknownImp
_TEXT	ENDS
PUBLIC	_==@8
EXTRN	_IID_IUnknown:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@CDummyOutStream@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CDummyOutStream@@UAGJABU_GUID@@PAPAX@Z PROC ; CDummyOutStream::QueryInterface, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\archive\common\dummyoutstream.h
; Line 20
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN1@QueryInter
$LN2@QueryInter:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN3@QueryInter
$LN1@QueryInter:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	xor	eax, eax
$LN3@QueryInter:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CDummyOutStream@@UAGJABU_GUID@@PAPAX@Z ENDP ; CDummyOutStream::QueryInterface
_TEXT	ENDS
PUBLIC	_IsEqualGUID@8
; Function compile flags: /Odtp /RTCsu
;	COMDAT _==@8
_TEXT	SEGMENT
_guidOne$ = 8						; size = 4
_guidOther$ = 12					; size = 4
_==@8	PROC						; COMDAT
; File c:\program files (x86)\microsoft sdks\windows\v7.0a\include\guiddef.h
; Line 193
	push	ebp
	mov	ebp, esp
; Line 194
	mov	eax, DWORD PTR _guidOther$[ebp]
	push	eax
	mov	ecx, DWORD PTR _guidOne$[ebp]
	push	ecx
	call	_IsEqualGUID@8
; Line 195
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_==@8	ENDP
_TEXT	ENDS
EXTRN	_memcmp:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT _IsEqualGUID@8
_TEXT	SEGMENT
_rguid1$ = 8						; size = 4
_rguid2$ = 12						; size = 4
_IsEqualGUID@8 PROC					; COMDAT
; Line 160
	push	ebp
	mov	ebp, esp
; Line 161
	push	16					; 00000010H
	mov	eax, DWORD PTR _rguid2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rguid1$[ebp]
	push	ecx
	call	_memcmp
	add	esp, 12					; 0000000cH
	neg	eax
	sbb	eax, eax
	add	eax, 1
; Line 162
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_IsEqualGUID@8 ENDP
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CDummyOutStream@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CDummyOutStream@@UAGKXZ PROC			; CDummyOutStream::AddRef, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\archive\common\dummyoutstream.h
; Line 20
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CDummyOutStream@@UAGKXZ ENDP			; CDummyOutStream::AddRef
_TEXT	ENDS
PUBLIC	??_GCDummyOutStream@@QAEPAXI@Z			; CDummyOutStream::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CDummyOutStream@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T71900 = -8						; size = 4
$T71899 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CDummyOutStream@@UAGKXZ PROC			; CDummyOutStream::Release, COMDAT
; Line 20
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	jmp	SHORT $LN2@Release
$LN1@Release:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T71900[ebp], edx
	mov	eax, DWORD PTR $T71900[ebp]
	mov	DWORD PTR $T71899[ebp], eax
	cmp	DWORD PTR $T71899[ebp], 0
	je	SHORT $LN4@Release
	push	1
	mov	ecx, DWORD PTR $T71899[ebp]
	call	??_GCDummyOutStream@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release
$LN4@Release:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release:
	xor	eax, eax
$LN2@Release:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CDummyOutStream@@UAGKXZ ENDP			; CDummyOutStream::Release
_TEXT	ENDS
PUBLIC	??1CDummyOutStream@@QAE@XZ			; CDummyOutStream::~CDummyOutStream
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCDummyOutStream@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCDummyOutStream@@QAEPAXI@Z PROC			; CDummyOutStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CDummyOutStream@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCDummyOutStream@@QAEPAXI@Z ENDP			; CDummyOutStream::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CDummyOutStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CDummyOutStream@@QAE@XZ PROC				; CDummyOutStream::~CDummyOutStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CDummyOutStream@@QAE@XZ ENDP				; CDummyOutStream::~CDummyOutStream
_TEXT	ENDS
PUBLIC	??_7ISequentialOutStream@@6B@			; ISequentialOutStream::`vftable'
PUBLIC	??0IUnknown@@QAE@XZ				; IUnknown::IUnknown
PUBLIC	??_R4ISequentialOutStream@@6B@			; ISequentialOutStream::`RTTI Complete Object Locator'
EXTRN	__purecall:PROC
;	COMDAT ??_R4ISequentialOutStream@@6B@
rdata$r	SEGMENT
??_R4ISequentialOutStream@@6B@ DD 00H			; ISequentialOutStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUISequentialOutStream@@@8
	DD	FLAT:??_R3ISequentialOutStream@@8
rdata$r	ENDS
;	COMDAT ??_7ISequentialOutStream@@6B@
CONST	SEGMENT
??_7ISequentialOutStream@@6B@ DD FLAT:??_R4ISequentialOutStream@@6B@ ; ISequentialOutStream::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ISequentialOutStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ISequentialOutStream@@QAE@XZ PROC			; ISequentialOutStream::ISequentialOutStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ISequentialOutStream@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ISequentialOutStream@@QAE@XZ ENDP			; ISequentialOutStream::ISequentialOutStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0IUnknown@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IUnknown@@QAE@XZ PROC				; IUnknown::IUnknown, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0IUnknown@@QAE@XZ ENDP				; IUnknown::IUnknown
_TEXT	ENDS
PUBLIC	?GetFileTimeType@CHandler@NBz2@NArchive@@UAGJPAI@Z ; NArchive::NBz2::CHandler::GetFileTimeType
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = 8						; size = 4
_type$ = 12						; size = 4
?GetFileTimeType@CHandler@NBz2@NArchive@@UAGJPAI@Z PROC	; NArchive::NBz2::CHandler::GetFileTimeType
; File c:\workspace\7z1505-src\cpp\7zip\archive\bz2handler.cpp
; Line 362
	push	ebp
	mov	ebp, esp
; Line 363
	mov	eax, DWORD PTR _type$[ebp]
	mov	DWORD PTR [eax], 1
; Line 364
	xor	eax, eax
; Line 365
	pop	ebp
	ret	8
?GetFileTimeType@CHandler@NBz2@NArchive@@UAGJPAI@Z ENDP	; NArchive::NBz2::CHandler::GetFileTimeType
_TEXT	ENDS
PUBLIC	??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *
PUBLIC	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
PUBLIC	??C?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator->
PUBLIC	??B?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator IArchiveUpdateCallbackFile *
PUBLIC	??I?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAEPAPAUIArchiveUpdateCallbackFile@@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator&
PUBLIC	??0?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::CMyComPtr<IArchiveUpdateCallbackFile>
PUBLIC	?IntToBool@@YG_NH@Z				; IntToBool
PUBLIC	?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z ; NArchive::NBz2::CHandler::UpdateItems
EXTRN	?CopyStream@NCompress@@YGJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z:PROC ; NCompress::CopyStream
EXTRN	_IID_IArchiveUpdateCallbackFile:BYTE
xdata$x	SEGMENT
__catchsym$?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$7 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$0
__tryblocktable$?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z DD 00H
	DD	05H
	DD	06H
	DD	01H
	DD	FLAT:__catchsym$?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$7
__ehfuncinfo$?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$3
	DD	00H
	DD	FLAT:__unwindfunclet$?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$4
	DD	00H
	DD	FLAT:__unwindfunclet$?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$5
	DD	04H
	DD	FLAT:__unwindfunclet$?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$6
	DD	0ffffffffH
	DD	00H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv341 = -292						; size = 4
tv340 = -288						; size = 4
tv339 = -284						; size = 4
tv338 = -280						; size = 4
tv251 = -276						; size = 4
tv337 = -272						; size = 4
tv336 = -268						; size = 4
tv335 = -264						; size = 4
tv233 = -260						; size = 4
tv334 = -256						; size = 4
tv333 = -252						; size = 4
tv332 = -248						; size = 4
tv199 = -244						; size = 4
tv198 = -240						; size = 4
tv331 = -236						; size = 4
tv329 = -232						; size = 4
tv328 = -228						; size = 4
tv327 = -224						; size = 4
tv326 = -220						; size = 4
tv325 = -213						; size = 1
tv324 = -212						; size = 4
tv323 = -208						; size = 4
tv322 = -201						; size = 1
tv321 = -200						; size = 4
$T71926 = -196						; size = 4
$T71925 = -192						; size = 4
$T71924 = -188						; size = 4
$T71923 = -184						; size = 4
$T71920 = -180						; size = 4
$T71919 = -176						; size = 4
$T71918 = -172						; size = 4
$T71917 = -168						; size = 4
$T71916 = -164						; size = 4
$T71915 = -160						; size = 4
___result_$71064 = -156					; size = 4
___result_$71059 = -152					; size = 4
_opCallback$71056 = -144				; size = 4
_progress$71018 = -132					; size = 4
_lps$71012 = -124					; size = 4
___result_$71003 = -120					; size = 4
_prop$71002 = -112					; size = 16
_size$71001 = -92					; size = 8
___result_$70990 = -84					; size = 4
_prop$70989 = -76					; size = 16
___result_$70985 = -56					; size = 4
_indexInArchive$70982 = -48				; size = 4
_newProps$70981 = -36					; size = 4
_newData$70980 = -24					; size = 4
__$EHRec$ = -16						; size = 16
_this$ = 8						; size = 4
_outStream$ = 12					; size = 4
_numItems$ = 16						; size = 4
_updateCallback$ = 20					; size = 4
?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z PROC ; NArchive::NBz2::CHandler::UpdateItems
; Line 369
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-292]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
; Line 370
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 372
	cmp	DWORD PTR _numItems$[ebp], 1
	je	SHORT $LN16@UpdateItem
; Line 373
	mov	eax, -2147024809			; 80070057H
	jmp	$LN18@UpdateItem
$LN16@UpdateItem:
; Line 377
	cmp	DWORD PTR _updateCallback$[ebp], 0
	jne	SHORT $LN15@UpdateItem
; Line 378
	mov	eax, -2147467259			; 80004005H
	jmp	$LN18@UpdateItem
$LN15@UpdateItem:
; Line 379
	mov	esi, esp
	lea	eax, DWORD PTR _indexInArchive$70982[ebp]
	push	eax
	lea	ecx, DWORD PTR _newProps$70981[ebp]
	push	ecx
	lea	edx, DWORD PTR _newData$70980[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _updateCallback$[ebp]
	push	eax
	mov	ecx, DWORD PTR _updateCallback$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv321[ebp], eax
	mov	ecx, DWORD PTR tv321[ebp]
	mov	DWORD PTR ___result_$70985[ebp], ecx
	cmp	DWORD PTR ___result_$70985[ebp], 0
	je	SHORT $LN14@UpdateItem
	mov	eax, DWORD PTR ___result_$70985[ebp]
	jmp	$LN18@UpdateItem
$LN14@UpdateItem:
; Line 381
	mov	edx, DWORD PTR _newProps$70981[ebp]
	push	edx
	call	?IntToBool@@YG_NH@Z			; IntToBool
	mov	BYTE PTR tv322[ebp], al
	movzx	eax, BYTE PTR tv322[ebp]
	test	eax, eax
	je	$LN13@UpdateItem
; Line 384
	lea	ecx, DWORD PTR _prop$70989[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
	mov	DWORD PTR tv323[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 1
; Line 385
	mov	esi, esp
	lea	ecx, DWORD PTR _prop$70989[ebp]
	push	ecx
	push	6
	push	0
	mov	edx, DWORD PTR _updateCallback$[ebp]
	push	edx
	mov	eax, DWORD PTR _updateCallback$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv324[ebp], eax
	mov	eax, DWORD PTR tv324[ebp]
	mov	DWORD PTR ___result_$70990[ebp], eax
	cmp	DWORD PTR ___result_$70990[ebp], 0
	je	SHORT $LN12@UpdateItem
	mov	ecx, DWORD PTR ___result_$70990[ebp]
	mov	DWORD PTR $T71915[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _prop$70989[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T71915[ebp]
	jmp	$LN18@UpdateItem
$LN12@UpdateItem:
; Line 386
	movzx	edx, WORD PTR _prop$70989[ebp]
	test	edx, edx
	je	SHORT $LN11@UpdateItem
; Line 387
	movzx	eax, WORD PTR _prop$70989[ebp]
	cmp	eax, 11					; 0000000bH
	jne	SHORT $LN9@UpdateItem
	movsx	ecx, WORD PTR _prop$70989[ebp+8]
	test	ecx, ecx
	je	SHORT $LN11@UpdateItem
$LN9@UpdateItem:
; Line 388
	mov	DWORD PTR $T71916[ebp], -2147024809	; 80070057H
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _prop$70989[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T71916[ebp]
	jmp	$LN18@UpdateItem
$LN11@UpdateItem:
; Line 389
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _prop$70989[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
$LN13@UpdateItem:
; Line 392
	mov	edx, DWORD PTR _newData$70980[ebp]
	push	edx
	call	?IntToBool@@YG_NH@Z			; IntToBool
	mov	BYTE PTR tv325[ebp], al
	movzx	eax, BYTE PTR tv325[ebp]
	test	eax, eax
	je	$LN8@UpdateItem
; Line 396
	lea	ecx, DWORD PTR _prop$71002[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
	mov	DWORD PTR tv326[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 2
; Line 397
	mov	esi, esp
	lea	ecx, DWORD PTR _prop$71002[ebp]
	push	ecx
	push	7
	push	0
	mov	edx, DWORD PTR _updateCallback$[ebp]
	push	edx
	mov	eax, DWORD PTR _updateCallback$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv327[ebp], eax
	mov	eax, DWORD PTR tv327[ebp]
	mov	DWORD PTR ___result_$71003[ebp], eax
	cmp	DWORD PTR ___result_$71003[ebp], 0
	je	SHORT $LN7@UpdateItem
	mov	ecx, DWORD PTR ___result_$71003[ebp]
	mov	DWORD PTR $T71917[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _prop$71002[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T71917[ebp]
	jmp	$LN18@UpdateItem
$LN7@UpdateItem:
; Line 398
	movzx	edx, WORD PTR _prop$71002[ebp]
	cmp	edx, 21					; 00000015H
	je	SHORT $LN6@UpdateItem
; Line 399
	mov	DWORD PTR $T71918[ebp], -2147024809	; 80070057H
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _prop$71002[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T71918[ebp]
	jmp	$LN18@UpdateItem
$LN6@UpdateItem:
; Line 400
	mov	eax, DWORD PTR _prop$71002[ebp+8]
	mov	DWORD PTR _size$71001[ebp], eax
	mov	ecx, DWORD PTR _prop$71002[ebp+12]
	mov	DWORD PTR _size$71001[ebp+4], ecx
; Line 401
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _prop$71002[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
; Line 402
	mov	edx, DWORD PTR _updateCallback$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 64					; 00000040H
	push	eax
	mov	ecx, DWORD PTR _outStream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _size$71001[ebp+4]
	push	edx
	mov	eax, DWORD PTR _size$71001[ebp]
	push	eax
	call	?UpdateArchive@NBz2@NArchive@@YGJ_KPAUISequentialOutStream@@ABUCProps@@PAUIArchiveUpdateCallback@@@Z ; NArchive::NBz2::UpdateArchive
	mov	DWORD PTR tv328[ebp], eax
	mov	eax, DWORD PTR tv328[ebp]
	jmp	$LN18@UpdateItem
$LN8@UpdateItem:
; Line 405
	cmp	DWORD PTR _indexInArchive$70982[ebp], 0
	je	SHORT $LN5@UpdateItem
; Line 406
	mov	eax, -2147024809			; 80070057H
	jmp	$LN18@UpdateItem
$LN5@UpdateItem:
; Line 408
	push	56					; 00000038H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR tv329[ebp], eax
	mov	ecx, DWORD PTR tv329[ebp]
	mov	DWORD PTR $T71920[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	cmp	DWORD PTR $T71920[ebp], 0
	je	SHORT $LN20@UpdateItem
	mov	ecx, DWORD PTR $T71920[ebp]
	call	??0CLocalProgress@@QAE@XZ		; CLocalProgress::CLocalProgress
	mov	DWORD PTR tv331[ebp], eax
	mov	edx, DWORD PTR tv331[ebp]
	mov	DWORD PTR tv198[ebp], edx
	jmp	SHORT $LN21@UpdateItem
$LN20@UpdateItem:
	mov	DWORD PTR tv198[ebp], 0
$LN21@UpdateItem:
	mov	eax, DWORD PTR tv198[ebp]
	mov	DWORD PTR $T71919[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	mov	ecx, DWORD PTR $T71919[ebp]
	mov	DWORD PTR _lps$71012[ebp], ecx
; Line 409
	mov	edx, DWORD PTR _lps$71012[ebp]
	push	edx
	lea	ecx, DWORD PTR _progress$71018[ebp]
	call	??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+12], 4
; Line 410
	push	1
	mov	eax, DWORD PTR _updateCallback$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lps$71012[ebp]
	call	?Init@CLocalProgress@@QAEXPAUIProgress@@_N@Z ; CLocalProgress::Init
; Line 412
	lea	ecx, DWORD PTR _opCallback$71056[ebp]
	call	??0?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::CMyComPtr<IArchiveUpdateCallbackFile>
	mov	DWORD PTR tv199[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 5
; Line 413
	lea	ecx, DWORD PTR _opCallback$71056[ebp]
	call	??I?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAEPAPAUIArchiveUpdateCallbackFile@@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator&
	mov	DWORD PTR tv332[ebp], eax
	mov	esi, esp
	mov	ecx, DWORD PTR tv332[ebp]
	push	ecx
	push	OFFSET _IID_IArchiveUpdateCallbackFile
	mov	edx, DWORD PTR _updateCallback$[ebp]
	push	edx
	mov	eax, DWORD PTR _updateCallback$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 414
	lea	ecx, DWORD PTR _opCallback$71056[ebp]
	call	??B?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator IArchiveUpdateCallbackFile *
	mov	DWORD PTR tv333[ebp], eax
	cmp	DWORD PTR tv333[ebp], 0
	je	$LN4@UpdateItem
; Line 418
	lea	ecx, DWORD PTR _opCallback$71056[ebp]
	call	??C?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator->
	mov	DWORD PTR tv334[ebp], eax
	mov	eax, DWORD PTR tv334[ebp]
	mov	DWORD PTR tv233[ebp], eax
	mov	esi, esp
	push	3
	push	0
	push	1
	mov	ecx, DWORD PTR tv233[ebp]
	push	ecx
	mov	edx, DWORD PTR tv233[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv335[ebp], eax
	mov	edx, DWORD PTR tv335[ebp]
	mov	DWORD PTR ___result_$71059[ebp], edx
	cmp	DWORD PTR ___result_$71059[ebp], 0
	je	SHORT $LN4@UpdateItem
	mov	eax, DWORD PTR ___result_$71059[ebp]
	mov	DWORD PTR $T71923[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _opCallback$71056[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _progress$71018[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	eax, DWORD PTR $T71923[ebp]
	jmp	$LN18@UpdateItem
$LN4@UpdateItem:
; Line 421
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *
	mov	DWORD PTR tv336[ebp], eax
	cmp	DWORD PTR tv336[ebp], 0
	je	$LN2@UpdateItem
; Line 422
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->
	mov	DWORD PTR tv337[ebp], eax
	mov	ecx, DWORD PTR tv337[ebp]
	mov	DWORD PTR tv251[ebp], ecx
	mov	esi, esp
	push	0
	push	0
	push	0
	push	0
	mov	edx, DWORD PTR tv251[ebp]
	push	edx
	mov	eax, DWORD PTR tv251[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv338[ebp], eax
	mov	eax, DWORD PTR tv338[ebp]
	mov	DWORD PTR ___result_$71064[ebp], eax
	cmp	DWORD PTR ___result_$71064[ebp], 0
	je	SHORT $LN2@UpdateItem
	mov	ecx, DWORD PTR ___result_$71064[ebp]
	mov	DWORD PTR $T71924[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _opCallback$71056[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _progress$71018[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	eax, DWORD PTR $T71924[ebp]
	jmp	$LN18@UpdateItem
$LN2@UpdateItem:
; Line 424
	lea	ecx, DWORD PTR _progress$71018[ebp]
	call	??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *
	mov	DWORD PTR tv339[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *
	mov	DWORD PTR tv340[ebp], eax
	mov	edx, DWORD PTR tv339[ebp]
	push	edx
	mov	eax, DWORD PTR _outStream$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv340[ebp]
	push	ecx
	call	?CopyStream@NCompress@@YGJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z ; NCompress::CopyStream
	mov	DWORD PTR tv341[ebp], eax
	mov	edx, DWORD PTR tv341[ebp]
	mov	DWORD PTR $T71925[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _opCallback$71056[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _progress$71018[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	eax, DWORD PTR $T71925[ebp]
	jmp	SHORT $LN18@UpdateItem
__catch$?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$0:
; Line 426
	mov	DWORD PTR $T71926[ebp], -2147024882	; 8007000eH
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN30@UpdateItem
	ret	0
	mov	eax, __tryend$?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$1
	ret	0
__tryend$?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$1:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN18@UpdateItem
$LN30@UpdateItem:
	mov	eax, DWORD PTR $T71926[ebp]
$LN18@UpdateItem:
; Line 427
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN41@UpdateItem
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 292				; 00000124H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN41@UpdateItem:
	DD	7
	DD	$LN40@UpdateItem
$LN40@UpdateItem:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN32@UpdateItem
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN33@UpdateItem
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN34@UpdateItem
	DD	-76					; ffffffb4H
	DD	16					; 00000010H
	DD	$LN35@UpdateItem
	DD	-112					; ffffff90H
	DD	16					; 00000010H
	DD	$LN36@UpdateItem
	DD	-132					; ffffff7cH
	DD	4
	DD	$LN37@UpdateItem
	DD	-144					; ffffff70H
	DD	4
	DD	$LN38@UpdateItem
$LN38@UpdateItem:
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	98					; 00000062H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
$LN37@UpdateItem:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	103					; 00000067H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	0
$LN36@UpdateItem:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
$LN35@UpdateItem:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
$LN34@UpdateItem:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	65					; 00000041H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	0
$LN33@UpdateItem:
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	115					; 00000073H
	DB	0
$LN32@UpdateItem:
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$2:
	lea	ecx, DWORD PTR _prop$70989[ebp]
	jmp	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
__unwindfunclet$?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$3:
	lea	ecx, DWORD PTR _prop$71002[ebp]
	jmp	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
__unwindfunclet$?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$4:
	mov	eax, DWORD PTR $T71920[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$5:
	lea	ecx, DWORD PTR _progress$71018[ebp]
	jmp	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
__unwindfunclet$?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$6:
	lea	ecx, DWORD PTR _opCallback$71056[ebp]
	jmp	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
__ehhandler$?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-296]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z ENDP ; NArchive::NBz2::CHandler::UpdateItems
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IntToBool@@YG_NH@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?IntToBool@@YG_NH@Z PROC				; IntToBool, COMDAT
; File c:\workspace\7z1505-src\cpp\common\defs.h
; Line 18
	push	ebp
	mov	ebp, esp
	xor	eax, eax
	cmp	DWORD PTR _value$[ebp], 0
	setne	al
	pop	ebp
	ret	4
?IntToBool@@YG_NH@Z ENDP				; IntToBool
_TEXT	ENDS
PUBLIC	??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator->
PUBLIC	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ	; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
PUBLIC	??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator&
PUBLIC	??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ	; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
EXTRN	?SetCoderProps@CProps@@QBEJPAUICompressSetCoderProperties@@PB_K@Z:PROC ; CProps::SetCoderProps
EXTRN	??0CEncoder@NBZip2@NCompress@@QAE@XZ:PROC	; NCompress::NBZip2::CEncoder::CEncoder
xdata$x	SEGMENT
__ehfuncinfo$?UpdateArchive@NBz2@NArchive@@YGJ_KPAUISequentialOutStream@@ABUCProps@@PAUIArchiveUpdateCallback@@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?UpdateArchive@NBz2@NArchive@@YGJ_KPAUISequentialOutStream@@ABUCProps@@PAUIArchiveUpdateCallback@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?UpdateArchive@NBz2@NArchive@@YGJ_KPAUISequentialOutStream@@ABUCProps@@PAUIArchiveUpdateCallback@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?UpdateArchive@NBz2@NArchive@@YGJ_KPAUISequentialOutStream@@ABUCProps@@PAUIArchiveUpdateCallback@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?UpdateArchive@NBz2@NArchive@@YGJ_KPAUISequentialOutStream@@ABUCProps@@PAUIArchiveUpdateCallback@@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?UpdateArchive@NBz2@NArchive@@YGJ_KPAUISequentialOutStream@@ABUCProps@@PAUIArchiveUpdateCallback@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?UpdateArchive@NBz2@NArchive@@YGJ_KPAUISequentialOutStream@@ABUCProps@@PAUIArchiveUpdateCallback@@@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$?UpdateArchive@NBz2@NArchive@@YGJ_KPAUISequentialOutStream@@ABUCProps@@PAUIArchiveUpdateCallback@@@Z$4
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv169 = -120						; size = 4
tv162 = -116						; size = 4
tv147 = -112						; size = 4
tv93 = -108						; size = 4
$T71968 = -104						; size = 4
$T71967 = -100						; size = 4
$T71966 = -96						; size = 4
$T71961 = -92						; size = 4
$T71960 = -88						; size = 4
$T71957 = -84						; size = 4
$T71956 = -80						; size = 4
$T71955 = -76						; size = 4
___result_$70961 = -72					; size = 4
___result_$70957 = -68					; size = 4
_encoder$ = -60						; size = 4
_encoderSpec$ = -52					; size = 4
_localProgress$ = -44					; size = 4
_localProgressSpec$ = -36				; size = 4
___result_$70939 = -32					; size = 4
_fileInStream$ = -24					; size = 4
___result_$70934 = -16					; size = 4
__$EHRec$ = -12						; size = 12
_unpackSize$ = 8					; size = 8
_outStream$ = 16					; size = 4
_props$ = 20						; size = 4
_updateCallback$ = 24					; size = 4
?UpdateArchive@NBz2@NArchive@@YGJ_KPAUISequentialOutStream@@ABUCProps@@PAUIArchiveUpdateCallback@@@Z PROC ; NArchive::NBz2::UpdateArchive
; File c:\workspace\7z1505-src\cpp\7zip\archive\bz2handler.cpp
; Line 347
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?UpdateArchive@NBz2@NArchive@@YGJ_KPAUISequentialOutStream@@ABUCProps@@PAUIArchiveUpdateCallback@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 108				; 0000006cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-120]
	mov	ecx, 27					; 0000001bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 348
	mov	esi, esp
	mov	eax, DWORD PTR _unpackSize$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _unpackSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _updateCallback$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _updateCallback$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result_$70934[ebp], eax
	cmp	DWORD PTR ___result_$70934[ebp], 0
	je	SHORT $LN4@UpdateArch
	mov	eax, DWORD PTR ___result_$70934[ebp]
	jmp	$LN5@UpdateArch
$LN4@UpdateArch:
; Line 349
	lea	ecx, DWORD PTR _fileInStream$[ebp]
	call	??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 350
	lea	ecx, DWORD PTR _fileInStream$[ebp]
	call	??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator&
	mov	esi, esp
	push	eax
	push	0
	mov	eax, DWORD PTR _updateCallback$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _updateCallback$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+28]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result_$70939[ebp], eax
	cmp	DWORD PTR ___result_$70939[ebp], 0
	je	SHORT $LN3@UpdateArch
	mov	ecx, DWORD PTR ___result_$70939[ebp]
	mov	DWORD PTR $T71955[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _fileInStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T71955[ebp]
	jmp	$LN5@UpdateArch
$LN3@UpdateArch:
; Line 351
	push	56					; 00000038H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T71957[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T71957[ebp], 0
	je	SHORT $LN7@UpdateArch
	mov	ecx, DWORD PTR $T71957[ebp]
	call	??0CLocalProgress@@QAE@XZ		; CLocalProgress::CLocalProgress
	mov	DWORD PTR tv93[ebp], eax
	jmp	SHORT $LN8@UpdateArch
$LN7@UpdateArch:
	mov	DWORD PTR tv93[ebp], 0
$LN8@UpdateArch:
	mov	edx, DWORD PTR tv93[ebp]
	mov	DWORD PTR $T71956[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR $T71956[ebp]
	mov	DWORD PTR _localProgressSpec$[ebp], eax
; Line 352
	mov	ecx, DWORD PTR _localProgressSpec$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _localProgress$[ebp]
	call	??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
; Line 353
	push	1
	mov	edx, DWORD PTR _updateCallback$[ebp]
	push	edx
	mov	ecx, DWORD PTR _localProgressSpec$[ebp]
	call	?Init@CLocalProgress@@QAEXPAUIProgress@@_N@Z ; CLocalProgress::Init
; Line 354
	push	440					; 000001b8H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T71961[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	cmp	DWORD PTR $T71961[ebp], 0
	je	SHORT $LN9@UpdateArch
	mov	ecx, DWORD PTR $T71961[ebp]
	call	??0CEncoder@NBZip2@NCompress@@QAE@XZ	; NCompress::NBZip2::CEncoder::CEncoder
	mov	DWORD PTR tv147[ebp], eax
	jmp	SHORT $LN10@UpdateArch
$LN9@UpdateArch:
	mov	DWORD PTR tv147[ebp], 0
$LN10@UpdateArch:
	mov	eax, DWORD PTR tv147[ebp]
	mov	DWORD PTR $T71960[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR $T71960[ebp]
	mov	DWORD PTR _encoderSpec$[ebp], ecx
; Line 355
	mov	edx, DWORD PTR _encoderSpec$[ebp]
	push	edx
	lea	ecx, DWORD PTR _encoder$[ebp]
	call	??0?$CMyComPtr@UICompressCoder@@@@QAE@PAUICompressCoder@@@Z ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
; Line 356
	cmp	DWORD PTR _encoderSpec$[ebp], 0
	je	SHORT $LN11@UpdateArch
	mov	eax, DWORD PTR _encoderSpec$[ebp]
	add	eax, 4
	mov	DWORD PTR tv162[ebp], eax
	jmp	SHORT $LN12@UpdateArch
$LN11@UpdateArch:
	mov	DWORD PTR tv162[ebp], 0
$LN12@UpdateArch:
	push	0
	mov	ecx, DWORD PTR tv162[ebp]
	push	ecx
	mov	ecx, DWORD PTR _props$[ebp]
	call	?SetCoderProps@CProps@@QBEJPAUICompressSetCoderProperties@@PB_K@Z ; CProps::SetCoderProps
	mov	DWORD PTR ___result_$70957[ebp], eax
	cmp	DWORD PTR ___result_$70957[ebp], 0
	je	SHORT $LN2@UpdateArch
	mov	edx, DWORD PTR ___result_$70957[ebp]
	mov	DWORD PTR $T71966[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _encoder$[ebp]
	call	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _localProgress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _fileInStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T71966[ebp]
	jmp	$LN5@UpdateArch
$LN2@UpdateArch:
; Line 357
	lea	ecx, DWORD PTR _encoder$[ebp]
	call	??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator->
	mov	DWORD PTR tv169[ebp], eax
	lea	ecx, DWORD PTR _localProgress$[ebp]
	call	??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *
	mov	esi, esp
	push	eax
	push	0
	push	0
	mov	eax, DWORD PTR _outStream$[ebp]
	push	eax
	lea	ecx, DWORD PTR _fileInStream$[ebp]
	call	??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
	push	eax
	mov	ecx, DWORD PTR tv169[ebp]
	push	ecx
	mov	edx, DWORD PTR tv169[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result_$70961[ebp], eax
	cmp	DWORD PTR ___result_$70961[ebp], 0
	je	SHORT $LN1@UpdateArch
	mov	edx, DWORD PTR ___result_$70961[ebp]
	mov	DWORD PTR $T71967[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _encoder$[ebp]
	call	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _localProgress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _fileInStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T71967[ebp]
	jmp	SHORT $LN5@UpdateArch
$LN1@UpdateArch:
; Line 358
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _updateCallback$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _updateCallback$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+32]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T71968[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _encoder$[ebp]
	call	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _localProgress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _fileInStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T71968[ebp]
$LN5@UpdateArch:
; Line 359
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN23@UpdateArch
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 120				; 00000078H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
	npad	1
$LN23@UpdateArch:
	DD	3
	DD	$LN22@UpdateArch
$LN22@UpdateArch:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN18@UpdateArch
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN19@UpdateArch
	DD	-60					; ffffffc4H
	DD	4
	DD	$LN20@UpdateArch
$LN20@UpdateArch:
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN19@UpdateArch:
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	103					; 00000067H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	0
$LN18@UpdateArch:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?UpdateArchive@NBz2@NArchive@@YGJ_KPAUISequentialOutStream@@ABUCProps@@PAUIArchiveUpdateCallback@@@Z$0:
	lea	ecx, DWORD PTR _fileInStream$[ebp]
	jmp	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
__unwindfunclet$?UpdateArchive@NBz2@NArchive@@YGJ_KPAUISequentialOutStream@@ABUCProps@@PAUIArchiveUpdateCallback@@@Z$1:
	mov	eax, DWORD PTR $T71957[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?UpdateArchive@NBz2@NArchive@@YGJ_KPAUISequentialOutStream@@ABUCProps@@PAUIArchiveUpdateCallback@@@Z$2:
	lea	ecx, DWORD PTR _localProgress$[ebp]
	jmp	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
__unwindfunclet$?UpdateArchive@NBz2@NArchive@@YGJ_KPAUISequentialOutStream@@ABUCProps@@PAUIArchiveUpdateCallback@@@Z$3:
	mov	eax, DWORD PTR $T71961[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?UpdateArchive@NBz2@NArchive@@YGJ_KPAUISequentialOutStream@@ABUCProps@@PAUIArchiveUpdateCallback@@@Z$4:
	lea	ecx, DWORD PTR _encoder$[ebp]
	jmp	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
__ehhandler$?UpdateArchive@NBz2@NArchive@@YGJ_KPAUISequentialOutStream@@ABUCProps@@PAUIArchiveUpdateCallback@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-120]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?UpdateArchive@NBz2@NArchive@@YGJ_KPAUISequentialOutStream@@ABUCProps@@PAUIArchiveUpdateCallback@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?UpdateArchive@NBz2@NArchive@@YGJ_KPAUISequentialOutStream@@ABUCProps@@PAUIArchiveUpdateCallback@@@Z ENDP ; NArchive::NBz2::UpdateArchive
PUBLIC	?SetProperties@CHandler@NBz2@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z ; NArchive::NBz2::CHandler::SetProperties
EXTRN	?SetProperties@CSingleMethodProps@NArchive@@QAEJPBQB_WPBUtagPROPVARIANT@@I@Z:PROC ; NArchive::CSingleMethodProps::SetProperties
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = 8						; size = 4
_names$ = 12						; size = 4
_values$ = 16						; size = 4
_numProps$ = 20						; size = 4
?SetProperties@CHandler@NBz2@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z PROC ; NArchive::NBz2::CHandler::SetProperties
; Line 430
	push	ebp
	mov	ebp, esp
; Line 431
	mov	eax, DWORD PTR _numProps$[ebp]
	push	eax
	mov	ecx, DWORD PTR _values$[ebp]
	push	ecx
	mov	edx, DWORD PTR _names$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	?SetProperties@CSingleMethodProps@NArchive@@QAEJPBQB_WPBUtagPROPVARIANT@@I@Z ; NArchive::CSingleMethodProps::SetProperties
; Line 432
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	16					; 00000010H
?SetProperties@CHandler@NBz2@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z ENDP ; NArchive::NBz2::CHandler::SetProperties
_TEXT	ENDS
PUBLIC	??0CHandler@NBz2@NArchive@@QAE@XZ		; NArchive::NBz2::CHandler::CHandler
xdata$x	SEGMENT
__unwindtable$?CreateArc@NBz2@NArchive@@YGPAUIInArchive@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateArc@NBz2@NArchive@@YGPAUIInArchive@@XZ$0
__ehfuncinfo$?CreateArc@NBz2@NArchive@@YGPAUIInArchive@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreateArc@NBz2@NArchive@@YGPAUIInArchive@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv74 = -24						; size = 4
$T71986 = -20						; size = 4
$T71985 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?CreateArc@NBz2@NArchive@@YGPAUIInArchive@@XZ PROC	; NArchive::NBz2::CreateArc
; Line 441
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateArc@NBz2@NArchive@@YGPAUIInArchive@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-24], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	push	120					; 00000078H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T71986[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T71986[ebp], 0
	je	SHORT $LN3@CreateArc
	mov	ecx, DWORD PTR $T71986[ebp]
	call	??0CHandler@NBz2@NArchive@@QAE@XZ	; NArchive::NBz2::CHandler::CHandler
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@CreateArc
$LN3@CreateArc:
	mov	DWORD PTR tv74[ebp], 0
$LN4@CreateArc:
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T71985[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T71985[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateArc@NBz2@NArchive@@YGPAUIInArchive@@XZ$0:
	mov	eax, DWORD PTR $T71986[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?CreateArc@NBz2@NArchive@@YGPAUIInArchive@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateArc@NBz2@NArchive@@YGPAUIInArchive@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateArc@NBz2@NArchive@@YGPAUIInArchive@@XZ ENDP	; NArchive::NBz2::CreateArc
PUBLIC	??1?$CMyComPtr@UIInStream@@@@QAE@XZ		; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
PUBLIC	??0CSingleMethodProps@NArchive@@QAE@XZ		; NArchive::CSingleMethodProps::CSingleMethodProps
PUBLIC	??0?$CMyComPtr@UIInStream@@@@QAE@XZ		; CMyComPtr<IInStream>::CMyComPtr<IInStream>
PUBLIC	??_7CHandler@NBz2@NArchive@@6BISetProperties@@@	; NArchive::NBz2::CHandler::`vftable'
PUBLIC	??_7CHandler@NBz2@NArchive@@6BIOutArchive@@@	; NArchive::NBz2::CHandler::`vftable'
PUBLIC	??_7CHandler@NBz2@NArchive@@6BIArchiveOpenSeq@@@ ; NArchive::NBz2::CHandler::`vftable'
PUBLIC	??_7CHandler@NBz2@NArchive@@6BIInArchive@@@	; NArchive::NBz2::CHandler::`vftable'
PUBLIC	??0ISetProperties@@QAE@XZ			; ISetProperties::ISetProperties
PUBLIC	??0IOutArchive@@QAE@XZ				; IOutArchive::IOutArchive
PUBLIC	??0IArchiveOpenSeq@@QAE@XZ			; IArchiveOpenSeq::IArchiveOpenSeq
PUBLIC	??0IInArchive@@QAE@XZ				; IInArchive::IInArchive
PUBLIC	??_R4CHandler@NBz2@NArchive@@6BIInArchive@@@	; NArchive::NBz2::CHandler::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCHandler@NBz2@NArchive@@@8		; NArchive::NBz2::CHandler `RTTI Type Descriptor'
PUBLIC	??_R3CHandler@NBz2@NArchive@@8			; NArchive::NBz2::CHandler::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CHandler@NBz2@NArchive@@8			; NArchive::NBz2::CHandler::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CHandler@NBz2@NArchive@@8		; NArchive::NBz2::CHandler::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@IInArchive@@8			; IInArchive::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIInArchive@@@8				; IInArchive `RTTI Type Descriptor'
PUBLIC	??_R3IInArchive@@8				; IInArchive::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IInArchive@@8				; IInArchive::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EC@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
PUBLIC	??_R13?0A@EA@IArchiveOpenSeq@@8			; IArchiveOpenSeq::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AUIArchiveOpenSeq@@@8			; IArchiveOpenSeq `RTTI Type Descriptor'
PUBLIC	??_R3IArchiveOpenSeq@@8				; IArchiveOpenSeq::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IArchiveOpenSeq@@8				; IArchiveOpenSeq::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IArchiveOpenSeq@@8		; IArchiveOpenSeq::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EC@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
PUBLIC	??_R17?0A@EA@IOutArchive@@8			; IOutArchive::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	??_R0?AUIOutArchive@@@8				; IOutArchive `RTTI Type Descriptor'
PUBLIC	??_R3IOutArchive@@8				; IOutArchive::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IOutArchive@@8				; IOutArchive::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IOutArchive@@8			; IOutArchive::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R17?0A@EC@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
PUBLIC	??_R1M@?0A@EA@ISetProperties@@8			; ISetProperties::`RTTI Base Class Descriptor at (12,-1,0,64)'
PUBLIC	??_R0?AUISetProperties@@@8			; ISetProperties `RTTI Type Descriptor'
PUBLIC	??_R3ISetProperties@@8				; ISetProperties::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ISetProperties@@8				; ISetProperties::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ISetProperties@@8			; ISetProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1M@?0A@EC@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (12,-1,0,66)'
PUBLIC	??_R1BA@?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (16,-1,0,64)'
PUBLIC	?QueryInterface@CHandler@NBz2@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::NBz2::CHandler::QueryInterface
PUBLIC	?AddRef@CHandler@NBz2@NArchive@@UAGKXZ		; NArchive::NBz2::CHandler::AddRef
PUBLIC	?Release@CHandler@NBz2@NArchive@@UAGKXZ		; NArchive::NBz2::CHandler::Release
PUBLIC	??_R4CHandler@NBz2@NArchive@@6BIArchiveOpenSeq@@@ ; NArchive::NBz2::CHandler::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@CHandler@NBz2@NArchive@@W3AGJABU_GUID@@PAPAX@Z ; [thunk]:NArchive::NBz2::CHandler::QueryInterface`adjustor{4}'
PUBLIC	?AddRef@CHandler@NBz2@NArchive@@W3AGKXZ		; [thunk]:NArchive::NBz2::CHandler::AddRef`adjustor{4}'
PUBLIC	?Release@CHandler@NBz2@NArchive@@W3AGKXZ	; [thunk]:NArchive::NBz2::CHandler::Release`adjustor{4}'
PUBLIC	??_R4CHandler@NBz2@NArchive@@6BIOutArchive@@@	; NArchive::NBz2::CHandler::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@CHandler@NBz2@NArchive@@W7AGJABU_GUID@@PAPAX@Z ; [thunk]:NArchive::NBz2::CHandler::QueryInterface`adjustor{8}'
PUBLIC	?AddRef@CHandler@NBz2@NArchive@@W7AGKXZ		; [thunk]:NArchive::NBz2::CHandler::AddRef`adjustor{8}'
PUBLIC	?Release@CHandler@NBz2@NArchive@@W7AGKXZ	; [thunk]:NArchive::NBz2::CHandler::Release`adjustor{8}'
PUBLIC	??_R4CHandler@NBz2@NArchive@@6BISetProperties@@@ ; NArchive::NBz2::CHandler::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@CHandler@NBz2@NArchive@@WM@AGJABU_GUID@@PAPAX@Z ; [thunk]:NArchive::NBz2::CHandler::QueryInterface`adjustor{12}'
PUBLIC	?AddRef@CHandler@NBz2@NArchive@@WM@AGKXZ	; [thunk]:NArchive::NBz2::CHandler::AddRef`adjustor{12}'
PUBLIC	?Release@CHandler@NBz2@NArchive@@WM@AGKXZ	; [thunk]:NArchive::NBz2::CHandler::Release`adjustor{12}'
;	COMDAT ??_R4CHandler@NBz2@NArchive@@6BISetProperties@@@
rdata$r	SEGMENT
??_R4CHandler@NBz2@NArchive@@6BISetProperties@@@ DD 00H	; NArchive::NBz2::CHandler::`RTTI Complete Object Locator'
	DD	0cH
	DD	00H
	DD	FLAT:??_R0?AVCHandler@NBz2@NArchive@@@8
	DD	FLAT:??_R3CHandler@NBz2@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R4CHandler@NBz2@NArchive@@6BIOutArchive@@@
rdata$r	SEGMENT
??_R4CHandler@NBz2@NArchive@@6BIOutArchive@@@ DD 00H	; NArchive::NBz2::CHandler::`RTTI Complete Object Locator'
	DD	08H
	DD	00H
	DD	FLAT:??_R0?AVCHandler@NBz2@NArchive@@@8
	DD	FLAT:??_R3CHandler@NBz2@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R4CHandler@NBz2@NArchive@@6BIArchiveOpenSeq@@@
rdata$r	SEGMENT
??_R4CHandler@NBz2@NArchive@@6BIArchiveOpenSeq@@@ DD 00H ; NArchive::NBz2::CHandler::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVCHandler@NBz2@NArchive@@@8
	DD	FLAT:??_R3CHandler@NBz2@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R1BA@?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R1BA@?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (16,-1,0,64)'
	DD	00H
	DD	010H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R1M@?0A@EC@IUnknown@@8
rdata$r	SEGMENT
??_R1M@?0A@EC@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (12,-1,0,66)'
	DD	00H
	DD	0cH
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ISetProperties@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ISetProperties@@8 DD FLAT:??_R0?AUISetProperties@@@8 ; ISetProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ISetProperties@@8
rdata$r	ENDS
;	COMDAT ??_R2ISetProperties@@8
rdata$r	SEGMENT
??_R2ISetProperties@@8 DD FLAT:??_R1A@?0A@EA@ISetProperties@@8 ; ISetProperties::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ISetProperties@@8
rdata$r	SEGMENT
??_R3ISetProperties@@8 DD 00H				; ISetProperties::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ISetProperties@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUISetProperties@@@8
_DATA	SEGMENT
??_R0?AUISetProperties@@@8 DD FLAT:??_7type_info@@6B@	; ISetProperties `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUISetProperties@@', 00H
_DATA	ENDS
;	COMDAT ??_R1M@?0A@EA@ISetProperties@@8
rdata$r	SEGMENT
??_R1M@?0A@EA@ISetProperties@@8 DD FLAT:??_R0?AUISetProperties@@@8 ; ISetProperties::`RTTI Base Class Descriptor at (12,-1,0,64)'
	DD	01H
	DD	0cH
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ISetProperties@@8
rdata$r	ENDS
;	COMDAT ??_R17?0A@EC@IUnknown@@8
rdata$r	SEGMENT
??_R17?0A@EC@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@IOutArchive@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IOutArchive@@8 DD FLAT:??_R0?AUIOutArchive@@@8 ; IOutArchive::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IOutArchive@@8
rdata$r	ENDS
;	COMDAT ??_R2IOutArchive@@8
rdata$r	SEGMENT
??_R2IOutArchive@@8 DD FLAT:??_R1A@?0A@EA@IOutArchive@@8 ; IOutArchive::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3IOutArchive@@8
rdata$r	SEGMENT
??_R3IOutArchive@@8 DD 00H				; IOutArchive::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2IOutArchive@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIOutArchive@@@8
_DATA	SEGMENT
??_R0?AUIOutArchive@@@8 DD FLAT:??_7type_info@@6B@	; IOutArchive `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIOutArchive@@', 00H
_DATA	ENDS
;	COMDAT ??_R17?0A@EA@IOutArchive@@8
rdata$r	SEGMENT
??_R17?0A@EA@IOutArchive@@8 DD FLAT:??_R0?AUIOutArchive@@@8 ; IOutArchive::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	01H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IOutArchive@@8
rdata$r	ENDS
;	COMDAT ??_R13?0A@EC@IUnknown@@8
rdata$r	SEGMENT
??_R13?0A@EC@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@IArchiveOpenSeq@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IArchiveOpenSeq@@8 DD FLAT:??_R0?AUIArchiveOpenSeq@@@8 ; IArchiveOpenSeq::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IArchiveOpenSeq@@8
rdata$r	ENDS
;	COMDAT ??_R2IArchiveOpenSeq@@8
rdata$r	SEGMENT
??_R2IArchiveOpenSeq@@8 DD FLAT:??_R1A@?0A@EA@IArchiveOpenSeq@@8 ; IArchiveOpenSeq::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3IArchiveOpenSeq@@8
rdata$r	SEGMENT
??_R3IArchiveOpenSeq@@8 DD 00H				; IArchiveOpenSeq::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2IArchiveOpenSeq@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIArchiveOpenSeq@@@8
_DATA	SEGMENT
??_R0?AUIArchiveOpenSeq@@@8 DD FLAT:??_7type_info@@6B@	; IArchiveOpenSeq `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIArchiveOpenSeq@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@IArchiveOpenSeq@@8
rdata$r	SEGMENT
??_R13?0A@EA@IArchiveOpenSeq@@8 DD FLAT:??_R0?AUIArchiveOpenSeq@@@8 ; IArchiveOpenSeq::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	01H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IArchiveOpenSeq@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EC@IUnknown@@8
rdata$r	SEGMENT
??_R1A@?0A@EC@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R2IInArchive@@8
rdata$r	SEGMENT
??_R2IInArchive@@8 DD FLAT:??_R1A@?0A@EA@IInArchive@@8	; IInArchive::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3IInArchive@@8
rdata$r	SEGMENT
??_R3IInArchive@@8 DD 00H				; IInArchive::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2IInArchive@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIInArchive@@@8
_DATA	SEGMENT
??_R0?AUIInArchive@@@8 DD FLAT:??_7type_info@@6B@	; IInArchive `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIInArchive@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IInArchive@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IInArchive@@8 DD FLAT:??_R0?AUIInArchive@@@8 ; IInArchive::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IInArchive@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CHandler@NBz2@NArchive@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CHandler@NBz2@NArchive@@8 DD FLAT:??_R0?AVCHandler@NBz2@NArchive@@@8 ; NArchive::NBz2::CHandler::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	09H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CHandler@NBz2@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R2CHandler@NBz2@NArchive@@8
rdata$r	SEGMENT
??_R2CHandler@NBz2@NArchive@@8 DD FLAT:??_R1A@?0A@EA@CHandler@NBz2@NArchive@@8 ; NArchive::NBz2::CHandler::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IInArchive@@8
	DD	FLAT:??_R1A@?0A@EC@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@IArchiveOpenSeq@@8
	DD	FLAT:??_R13?0A@EC@IUnknown@@8
	DD	FLAT:??_R17?0A@EA@IOutArchive@@8
	DD	FLAT:??_R17?0A@EC@IUnknown@@8
	DD	FLAT:??_R1M@?0A@EA@ISetProperties@@8
	DD	FLAT:??_R1M@?0A@EC@IUnknown@@8
	DD	FLAT:??_R1BA@?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CHandler@NBz2@NArchive@@8
rdata$r	SEGMENT
??_R3CHandler@NBz2@NArchive@@8 DD 00H			; NArchive::NBz2::CHandler::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	0aH
	DD	FLAT:??_R2CHandler@NBz2@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCHandler@NBz2@NArchive@@@8
_DATA	SEGMENT
??_R0?AVCHandler@NBz2@NArchive@@@8 DD FLAT:??_7type_info@@6B@ ; NArchive::NBz2::CHandler `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCHandler@NBz2@NArchive@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CHandler@NBz2@NArchive@@6BIInArchive@@@
rdata$r	SEGMENT
??_R4CHandler@NBz2@NArchive@@6BIInArchive@@@ DD 00H	; NArchive::NBz2::CHandler::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCHandler@NBz2@NArchive@@@8
	DD	FLAT:??_R3CHandler@NBz2@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_7CHandler@NBz2@NArchive@@6BISetProperties@@@
CONST	SEGMENT
??_7CHandler@NBz2@NArchive@@6BISetProperties@@@ DD FLAT:??_R4CHandler@NBz2@NArchive@@6BISetProperties@@@ ; NArchive::NBz2::CHandler::`vftable'
	DD	FLAT:?QueryInterface@CHandler@NBz2@NArchive@@WM@AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CHandler@NBz2@NArchive@@WM@AGKXZ
	DD	FLAT:?Release@CHandler@NBz2@NArchive@@WM@AGKXZ
	DD	FLAT:?SetProperties@CHandler@NBz2@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z
CONST	ENDS
;	COMDAT ??_7CHandler@NBz2@NArchive@@6BIOutArchive@@@
CONST	SEGMENT
??_7CHandler@NBz2@NArchive@@6BIOutArchive@@@ DD FLAT:??_R4CHandler@NBz2@NArchive@@6BIOutArchive@@@ ; NArchive::NBz2::CHandler::`vftable'
	DD	FLAT:?QueryInterface@CHandler@NBz2@NArchive@@W7AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CHandler@NBz2@NArchive@@W7AGKXZ
	DD	FLAT:?Release@CHandler@NBz2@NArchive@@W7AGKXZ
	DD	FLAT:?UpdateItems@CHandler@NBz2@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z
	DD	FLAT:?GetFileTimeType@CHandler@NBz2@NArchive@@UAGJPAI@Z
CONST	ENDS
;	COMDAT ??_7CHandler@NBz2@NArchive@@6BIArchiveOpenSeq@@@
CONST	SEGMENT
??_7CHandler@NBz2@NArchive@@6BIArchiveOpenSeq@@@ DD FLAT:??_R4CHandler@NBz2@NArchive@@6BIArchiveOpenSeq@@@ ; NArchive::NBz2::CHandler::`vftable'
	DD	FLAT:?QueryInterface@CHandler@NBz2@NArchive@@W3AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CHandler@NBz2@NArchive@@W3AGKXZ
	DD	FLAT:?Release@CHandler@NBz2@NArchive@@W3AGKXZ
	DD	FLAT:?OpenSeq@CHandler@NBz2@NArchive@@UAGJPAUISequentialInStream@@@Z
CONST	ENDS
;	COMDAT ??_7CHandler@NBz2@NArchive@@6BIInArchive@@@
CONST	SEGMENT
??_7CHandler@NBz2@NArchive@@6BIInArchive@@@ DD FLAT:??_R4CHandler@NBz2@NArchive@@6BIInArchive@@@ ; NArchive::NBz2::CHandler::`vftable'
	DD	FLAT:?QueryInterface@CHandler@NBz2@NArchive@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CHandler@NBz2@NArchive@@UAGKXZ
	DD	FLAT:?Release@CHandler@NBz2@NArchive@@UAGKXZ
	DD	FLAT:?Open@CHandler@NBz2@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
	DD	FLAT:?Close@CHandler@NBz2@NArchive@@UAGJXZ
	DD	FLAT:?GetNumberOfItems@CHandler@NBz2@NArchive@@UAGJPAI@Z
	DD	FLAT:?GetProperty@CHandler@NBz2@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
	DD	FLAT:?Extract@CHandler@NBz2@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
	DD	FLAT:?GetArchiveProperty@CHandler@NBz2@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z
	DD	FLAT:?GetNumberOfProperties@CHandler@NBz2@NArchive@@UAGJPAI@Z
	DD	FLAT:?GetPropertyInfo@CHandler@NBz2@NArchive@@UAGJIPAPA_WPAKPAG@Z
	DD	FLAT:?GetNumberOfArchiveProperties@CHandler@NBz2@NArchive@@UAGJPAI@Z
	DD	FLAT:?GetArchivePropertyInfo@CHandler@NBz2@NArchive@@UAGJIPAPA_WPAKPAG@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CHandler@NBz2@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CHandler@NBz2@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CHandler@NBz2@NArchive@@QAE@XZ$1
__ehfuncinfo$??0CHandler@NBz2@NArchive@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CHandler@NBz2@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CHandler@NBz2@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CHandler@NBz2@NArchive@@QAE@XZ PROC			; NArchive::NBz2::CHandler::CHandler, COMDAT
; _this$ = ecx
; Line 61
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CHandler@NBz2@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IInArchive@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0IArchiveOpenSeq@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0IOutArchive@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0ISetProperties@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CHandler@NBz2@NArchive@@6BIInArchive@@@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], OFFSET ??_7CHandler@NBz2@NArchive@@6BIArchiveOpenSeq@@@
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], OFFSET ??_7CHandler@NBz2@NArchive@@6BIOutArchive@@@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], OFFSET ??_7CHandler@NBz2@NArchive@@6BISetProperties@@@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??0?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::CMyComPtr<IInStream>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	call	??0CSingleMethodProps@NArchive@@QAE@XZ	; NArchive::CSingleMethodProps::CSingleMethodProps
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CHandler@NBz2@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	jmp	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
__unwindfunclet$??0CHandler@NBz2@NArchive@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
__ehhandler$??0CHandler@NBz2@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CHandler@NBz2@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CHandler@NBz2@NArchive@@QAE@XZ ENDP			; NArchive::NBz2::CHandler::CHandler
PUBLIC	??1COneMethodInfo@@QAE@XZ			; COneMethodInfo::~COneMethodInfo
PUBLIC	??0COneMethodInfo@@QAE@XZ			; COneMethodInfo::COneMethodInfo
EXTRN	?Init@CSingleMethodProps@NArchive@@QAEXXZ:PROC	; NArchive::CSingleMethodProps::Init
;	COMDAT xdata$x
; File c:\workspace\7z1505-src\cpp\7zip\archive\common\handlerout.h
xdata$x	SEGMENT
__unwindtable$??0CSingleMethodProps@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CSingleMethodProps@NArchive@@QAE@XZ$0
__ehfuncinfo$??0CSingleMethodProps@NArchive@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CSingleMethodProps@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CSingleMethodProps@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CSingleMethodProps@NArchive@@QAE@XZ PROC		; NArchive::CSingleMethodProps::CSingleMethodProps, COMDAT
; _this$ = ecx
; Line 60
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CSingleMethodProps@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0COneMethodInfo@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Init@CSingleMethodProps@NArchive@@QAEXXZ ; NArchive::CSingleMethodProps::Init
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CSingleMethodProps@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1COneMethodInfo@@QAE@XZ
__ehhandler$??0CSingleMethodProps@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CSingleMethodProps@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CSingleMethodProps@NArchive@@QAE@XZ ENDP		; NArchive::CSingleMethodProps::CSingleMethodProps
PUBLIC	??1AString@@QAE@XZ				; AString::~AString
PUBLIC	??1CMethodProps@@QAE@XZ				; CMethodProps::~CMethodProps
PUBLIC	??0CMethodProps@@QAE@XZ				; CMethodProps::CMethodProps
EXTRN	??0UString@@QAE@XZ:PROC				; UString::UString
EXTRN	??0AString@@QAE@XZ:PROC				; AString::AString
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0COneMethodInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0COneMethodInfo@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0COneMethodInfo@@QAE@XZ$1
__ehfuncinfo$??0COneMethodInfo@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0COneMethodInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0COneMethodInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0COneMethodInfo@@QAE@XZ PROC				; COneMethodInfo::COneMethodInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0COneMethodInfo@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CMethodProps@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0AString@@QAE@XZ			; AString::AString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0COneMethodInfo@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CMethodProps@@QAE@XZ
__unwindfunclet$??0COneMethodInfo@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1AString@@QAE@XZ			; AString::~AString
__ehhandler$??0COneMethodInfo@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0COneMethodInfo@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0COneMethodInfo@@QAE@XZ ENDP				; COneMethodInfo::COneMethodInfo
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1AString@@QAE@XZ
_TEXT	SEGMENT
$T72026 = -8						; size = 4
_this$ = -4						; size = 4
??1AString@@QAE@XZ PROC					; AString::~AString, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 232
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T72026[ebp], ecx
	mov	edx, DWORD PTR $T72026[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1AString@@QAE@XZ ENDP					; AString::~AString
_TEXT	ENDS
PUBLIC	??1UString@@QAE@XZ				; UString::~UString
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1COneMethodInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1COneMethodInfo@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1COneMethodInfo@@QAE@XZ$1
__ehfuncinfo$??1COneMethodInfo@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1COneMethodInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1COneMethodInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1COneMethodInfo@@QAE@XZ PROC				; COneMethodInfo::~COneMethodInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1COneMethodInfo@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CMethodProps@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1COneMethodInfo@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CMethodProps@@QAE@XZ
__unwindfunclet$??1COneMethodInfo@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1AString@@QAE@XZ			; AString::~AString
__ehhandler$??1COneMethodInfo@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1COneMethodInfo@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1COneMethodInfo@@QAE@XZ ENDP				; COneMethodInfo::~COneMethodInfo
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1UString@@QAE@XZ
_TEXT	SEGMENT
$T72040 = -8						; size = 4
_this$ = -4						; size = 4
??1UString@@QAE@XZ PROC					; UString::~UString, COMDAT
; _this$ = ecx
; Line 470
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T72040[ebp], ecx
	mov	edx, DWORD PTR $T72040[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1UString@@QAE@XZ ENDP					; UString::~UString
_TEXT	ENDS
PUBLIC	??0CProps@@QAE@XZ				; CProps::CProps
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CMethodProps@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMethodProps@@QAE@XZ PROC				; CMethodProps::CMethodProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CProps@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CMethodProps@@QAE@XZ ENDP				; CMethodProps::CMethodProps
_TEXT	ENDS
PUBLIC	??1CProps@@QAE@XZ				; CProps::~CProps
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CMethodProps@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CMethodProps@@QAE@XZ PROC				; CMethodProps::~CMethodProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CProps@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CMethodProps@@QAE@XZ ENDP				; CMethodProps::~CMethodProps
_TEXT	ENDS
PUBLIC	??0?$CObjectVector@UCProp@@@@QAE@XZ		; CObjectVector<CProp>::CObjectVector<CProp>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CProps@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CProps@@QAE@XZ PROC					; CProps::CProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CObjectVector@UCProp@@@@QAE@XZ	; CObjectVector<CProp>::CObjectVector<CProp>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CProps@@QAE@XZ ENDP					; CProps::CProps
_TEXT	ENDS
PUBLIC	??1?$CObjectVector@UCProp@@@@QAE@XZ		; CObjectVector<CProp>::~CObjectVector<CProp>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CProps@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CProps@@QAE@XZ PROC					; CProps::~CProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CObjectVector@UCProp@@@@QAE@XZ	; CObjectVector<CProp>::~CObjectVector<CProp>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CProps@@QAE@XZ ENDP					; CProps::~CProps
_TEXT	ENDS
EXTRN	_IID_ISetProperties:BYTE
EXTRN	_IID_IOutArchive:BYTE
EXTRN	_IID_IArchiveOpenSeq:BYTE
EXTRN	_IID_IInArchive:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@CHandler@NBz2@NArchive@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
tv144 = -12						; size = 4
tv134 = -8						; size = 4
tv92 = -4						; size = 4
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CHandler@NBz2@NArchive@@UAGJABU_GUID@@PAPAX@Z PROC ; NArchive::NBz2::CHandler::QueryInterface, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\archive\bz2handler.cpp
; Line 55
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN10@QueryInter@2
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	$LN9@QueryInter@2
$LN10@QueryInter@2:
	push	OFFSET _IID_IInArchive
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN8@QueryInter@2
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	$LN9@QueryInter@2
$LN8@QueryInter@2:
	push	OFFSET _IID_IArchiveOpenSeq
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN6@QueryInter@2
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN13@QueryInter@2
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	mov	DWORD PTR tv92[ebp], edx
	jmp	SHORT $LN14@QueryInter@2
$LN13@QueryInter@2:
	mov	DWORD PTR tv92[ebp], 0
$LN14@QueryInter@2:
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	ecx, DWORD PTR tv92[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN9@QueryInter@2
$LN6@QueryInter@2:
	push	OFFSET _IID_IOutArchive
	mov	edx, DWORD PTR _iid$[ebp]
	push	edx
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@QueryInter@2
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN15@QueryInter@2
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	mov	DWORD PTR tv134[ebp], eax
	jmp	SHORT $LN16@QueryInter@2
$LN15@QueryInter@2:
	mov	DWORD PTR tv134[ebp], 0
$LN16@QueryInter@2:
	mov	ecx, DWORD PTR _outObject$[ebp]
	mov	edx, DWORD PTR tv134[ebp]
	mov	DWORD PTR [ecx], edx
	jmp	SHORT $LN9@QueryInter@2
$LN4@QueryInter@2:
	push	OFFSET _IID_ISetProperties
	mov	eax, DWORD PTR _iid$[ebp]
	push	eax
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@2
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN17@QueryInter@2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR tv144[ebp], ecx
	jmp	SHORT $LN18@QueryInter@2
$LN17@QueryInter@2:
	mov	DWORD PTR tv144[ebp], 0
$LN18@QueryInter@2:
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR tv144[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN9@QueryInter@2
$LN2@QueryInter@2:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN11@QueryInter@2
$LN9@QueryInter@2:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], edx
	xor	eax, eax
$LN11@QueryInter@2:
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CHandler@NBz2@NArchive@@UAGJABU_GUID@@PAPAX@Z ENDP ; NArchive::NBz2::CHandler::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CHandler@NBz2@NArchive@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CHandler@NBz2@NArchive@@UAGKXZ PROC		; NArchive::NBz2::CHandler::AddRef, COMDAT
; Line 55
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+16], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CHandler@NBz2@NArchive@@UAGKXZ ENDP		; NArchive::NBz2::CHandler::AddRef
_TEXT	ENDS
PUBLIC	??_GCHandler@NBz2@NArchive@@QAEPAXI@Z		; NArchive::NBz2::CHandler::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CHandler@NBz2@NArchive@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T72066 = -8						; size = 4
$T72065 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CHandler@NBz2@NArchive@@UAGKXZ PROC		; NArchive::NBz2::CHandler::Release, COMDAT
; Line 55
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+16], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+16]
	jmp	SHORT $LN2@Release@2
$LN1@Release@2:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T72066[ebp], edx
	mov	eax, DWORD PTR $T72066[ebp]
	mov	DWORD PTR $T72065[ebp], eax
	cmp	DWORD PTR $T72065[ebp], 0
	je	SHORT $LN4@Release@2
	push	1
	mov	ecx, DWORD PTR $T72065[ebp]
	call	??_GCHandler@NBz2@NArchive@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release@2
$LN4@Release@2:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release@2:
	xor	eax, eax
$LN2@Release@2:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CHandler@NBz2@NArchive@@UAGKXZ ENDP		; NArchive::NBz2::CHandler::Release
_TEXT	ENDS
PUBLIC	??1CHandler@NBz2@NArchive@@QAE@XZ		; NArchive::NBz2::CHandler::~CHandler
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCHandler@NBz2@NArchive@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCHandler@NBz2@NArchive@@QAEPAXI@Z PROC		; NArchive::NBz2::CHandler::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CHandler@NBz2@NArchive@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCHandler@NBz2@NArchive@@QAEPAXI@Z ENDP		; NArchive::NBz2::CHandler::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_7IInArchive@@6B@				; IInArchive::`vftable'
PUBLIC	??_R4IInArchive@@6B@				; IInArchive::`RTTI Complete Object Locator'
;	COMDAT ??_R4IInArchive@@6B@
rdata$r	SEGMENT
??_R4IInArchive@@6B@ DD 00H				; IInArchive::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIInArchive@@@8
	DD	FLAT:??_R3IInArchive@@8
rdata$r	ENDS
;	COMDAT ??_7IInArchive@@6B@
CONST	SEGMENT
??_7IInArchive@@6B@ DD FLAT:??_R4IInArchive@@6B@	; IInArchive::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0IInArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IInArchive@@QAE@XZ PROC				; IInArchive::IInArchive, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7IInArchive@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0IInArchive@@QAE@XZ ENDP				; IInArchive::IInArchive
_TEXT	ENDS
PUBLIC	??_7IArchiveOpenSeq@@6B@			; IArchiveOpenSeq::`vftable'
PUBLIC	??_R4IArchiveOpenSeq@@6B@			; IArchiveOpenSeq::`RTTI Complete Object Locator'
;	COMDAT ??_R4IArchiveOpenSeq@@6B@
rdata$r	SEGMENT
??_R4IArchiveOpenSeq@@6B@ DD 00H			; IArchiveOpenSeq::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIArchiveOpenSeq@@@8
	DD	FLAT:??_R3IArchiveOpenSeq@@8
rdata$r	ENDS
;	COMDAT ??_7IArchiveOpenSeq@@6B@
CONST	SEGMENT
??_7IArchiveOpenSeq@@6B@ DD FLAT:??_R4IArchiveOpenSeq@@6B@ ; IArchiveOpenSeq::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0IArchiveOpenSeq@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IArchiveOpenSeq@@QAE@XZ PROC				; IArchiveOpenSeq::IArchiveOpenSeq, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7IArchiveOpenSeq@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0IArchiveOpenSeq@@QAE@XZ ENDP				; IArchiveOpenSeq::IArchiveOpenSeq
_TEXT	ENDS
PUBLIC	??_7IOutArchive@@6B@				; IOutArchive::`vftable'
PUBLIC	??_R4IOutArchive@@6B@				; IOutArchive::`RTTI Complete Object Locator'
;	COMDAT ??_R4IOutArchive@@6B@
rdata$r	SEGMENT
??_R4IOutArchive@@6B@ DD 00H				; IOutArchive::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIOutArchive@@@8
	DD	FLAT:??_R3IOutArchive@@8
rdata$r	ENDS
;	COMDAT ??_7IOutArchive@@6B@
CONST	SEGMENT
??_7IOutArchive@@6B@ DD FLAT:??_R4IOutArchive@@6B@	; IOutArchive::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0IOutArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IOutArchive@@QAE@XZ PROC				; IOutArchive::IOutArchive, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7IOutArchive@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0IOutArchive@@QAE@XZ ENDP				; IOutArchive::IOutArchive
_TEXT	ENDS
PUBLIC	??_7ISetProperties@@6B@				; ISetProperties::`vftable'
PUBLIC	??_R4ISetProperties@@6B@			; ISetProperties::`RTTI Complete Object Locator'
;	COMDAT ??_R4ISetProperties@@6B@
rdata$r	SEGMENT
??_R4ISetProperties@@6B@ DD 00H				; ISetProperties::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUISetProperties@@@8
	DD	FLAT:??_R3ISetProperties@@8
rdata$r	ENDS
;	COMDAT ??_7ISetProperties@@6B@
CONST	SEGMENT
??_7ISetProperties@@6B@ DD FLAT:??_R4ISetProperties@@6B@ ; ISetProperties::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ISetProperties@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ISetProperties@@QAE@XZ PROC				; ISetProperties::ISetProperties, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ISetProperties@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ISetProperties@@QAE@XZ ENDP				; ISetProperties::ISetProperties
_TEXT	ENDS
PUBLIC	??1CSingleMethodProps@NArchive@@QAE@XZ		; NArchive::CSingleMethodProps::~CSingleMethodProps
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CHandler@NBz2@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CHandler@NBz2@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CHandler@NBz2@NArchive@@QAE@XZ$1
__ehfuncinfo$??1CHandler@NBz2@NArchive@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CHandler@NBz2@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CHandler@NBz2@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CHandler@NBz2@NArchive@@QAE@XZ PROC			; NArchive::NBz2::CHandler::~CHandler, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CHandler@NBz2@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	call	??1CSingleMethodProps@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CHandler@NBz2@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	jmp	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
__unwindfunclet$??1CHandler@NBz2@NArchive@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
__ehhandler$??1CHandler@NBz2@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CHandler@NBz2@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CHandler@NBz2@NArchive@@QAE@XZ ENDP			; NArchive::NBz2::CHandler::~CHandler
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CSingleMethodProps@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CSingleMethodProps@NArchive@@QAE@XZ PROC		; NArchive::CSingleMethodProps::~CSingleMethodProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1COneMethodInfo@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CSingleMethodProps@NArchive@@QAE@XZ ENDP		; NArchive::CSingleMethodProps::~CSingleMethodProps
_TEXT	ENDS
xdata$x	SEGMENT
__unwindtable$?CreateArcOut@NBz2@NArchive@@YGPAUIOutArchive@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateArcOut@NBz2@NArchive@@YGPAUIOutArchive@@XZ$0
__ehfuncinfo$?CreateArcOut@NBz2@NArchive@@YGPAUIOutArchive@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreateArcOut@NBz2@NArchive@@YGPAUIOutArchive@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv75 = -28						; size = 4
tv74 = -24						; size = 4
$T72096 = -20						; size = 4
$T72095 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?CreateArcOut@NBz2@NArchive@@YGPAUIOutArchive@@XZ PROC	; NArchive::NBz2::CreateArcOut
; Line 441
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateArcOut@NBz2@NArchive@@YGPAUIOutArchive@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	push	120					; 00000078H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T72096[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T72096[ebp], 0
	je	SHORT $LN3@CreateArcO
	mov	ecx, DWORD PTR $T72096[ebp]
	call	??0CHandler@NBz2@NArchive@@QAE@XZ	; NArchive::NBz2::CHandler::CHandler
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@CreateArcO
$LN3@CreateArcO:
	mov	DWORD PTR tv74[ebp], 0
$LN4@CreateArcO:
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T72095[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	cmp	DWORD PTR $T72095[ebp], 0
	je	SHORT $LN5@CreateArcO
	mov	ecx, DWORD PTR $T72095[ebp]
	add	ecx, 8
	mov	DWORD PTR tv75[ebp], ecx
	jmp	SHORT $LN6@CreateArcO
$LN5@CreateArcO:
	mov	DWORD PTR tv75[ebp], 0
$LN6@CreateArcO:
	mov	eax, DWORD PTR tv75[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateArcOut@NBz2@NArchive@@YGPAUIOutArchive@@XZ$0:
	mov	eax, DWORD PTR $T72096[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?CreateArcOut@NBz2@NArchive@@YGPAUIOutArchive@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateArcOut@NBz2@NArchive@@YGPAUIOutArchive@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateArcOut@NBz2@NArchive@@YGPAUIOutArchive@@XZ ENDP	; NArchive::NBz2::CreateArcOut
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z PROC ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@CMyComPtr
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z ENDP ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ PROC	; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@2:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ENDP	; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ PROC ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ENDP ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@3:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ PROC ; CMyComPtr<ISequentialInStream>::Release, COMDAT
; _this$ = ecx
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Release@3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
$LN2@Release@3:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ ENDP ; CMyComPtr<ISequentialInStream>::Release
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ PROC ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ENDP ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ PROC ; CMyComPtr<ISequentialInStream>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ ENDP ; CMyComPtr<ISequentialInStream>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z PROC ; CMyComPtr<ISequentialInStream>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ENDP ; CMyComPtr<ISequentialInStream>::operator=
_TEXT	ENDS
PUBLIC	?GetStreamSize@CInBufferBase@@QBE_KXZ		; CInBufferBase::GetStreamSize
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetStreamSize@?$CDecoder@VCInBuffer@@@NBitm@@QBE_KXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetStreamSize@?$CDecoder@VCInBuffer@@@NBitm@@QBE_KXZ PROC ; NBitm::CDecoder<CInBuffer>::GetStreamSize, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\compress\bitmdecoder.h
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?GetStreamSize@CInBufferBase@@QBE_KXZ	; CInBufferBase::GetStreamSize
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetStreamSize@?$CDecoder@VCInBuffer@@@NBitm@@QBE_KXZ ENDP ; NBitm::CDecoder<CInBuffer>::GetStreamSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetStreamSize@CInBufferBase@@QBE_KXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetStreamSize@CInBufferBase@@QBE_KXZ PROC		; CInBufferBase::GetStreamSize, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\inbuffer.h
; Line 41
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	sub	eax, DWORD PTR [ecx+8]
	cdq
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	adc	edx, DWORD PTR [ecx+20]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetStreamSize@CInBufferBase@@QBE_KXZ ENDP		; CInBufferBase::GetStreamSize
_TEXT	ENDS
PUBLIC	?GetProcessedSize@CInBufferBase@@QBE_KXZ	; CInBufferBase::GetProcessedSize
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetProcessedSize@?$CDecoder@VCInBuffer@@@NBitm@@QBE_KXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetProcessedSize@?$CDecoder@VCInBuffer@@@NBitm@@QBE_KXZ PROC ; NBitm::CDecoder<CInBuffer>::GetProcessedSize, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\compress\bitmdecoder.h
; Line 38
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?GetProcessedSize@CInBufferBase@@QBE_KXZ ; CInBufferBase::GetProcessedSize
	mov	ecx, DWORD PTR _this$[ebp]
	mov	esi, 32					; 00000020H
	sub	esi, DWORD PTR [ecx]
	shr	esi, 3
	xor	ecx, ecx
	sub	eax, esi
	sbb	edx, ecx
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetProcessedSize@?$CDecoder@VCInBuffer@@@NBitm@@QBE_KXZ ENDP ; NBitm::CDecoder<CInBuffer>::GetProcessedSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetProcessedSize@CInBufferBase@@QBE_KXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetProcessedSize@CInBufferBase@@QBE_KXZ PROC		; CInBufferBase::GetProcessedSize, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\inbuffer.h
; Line 42
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	xor	esi, esi
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+16]
	adc	esi, DWORD PTR [edx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	sub	eax, DWORD PTR [edx+8]
	cdq
	add	ecx, eax
	adc	esi, edx
	mov	eax, ecx
	mov	edx, esi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?GetProcessedSize@CInBufferBase@@QBE_KXZ ENDP		; CInBufferBase::GetProcessedSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ExtraBitsWereRead@?$CDecoder@VCInBuffer@@@NBitm@@QBE_NXZ
_TEXT	SEGMENT
tv80 = -8						; size = 4
_this$ = -4						; size = 4
?ExtraBitsWereRead@?$CDecoder@VCInBuffer@@@NBitm@@QBE_NXZ PROC ; NBitm::CDecoder<CInBuffer>::ExtraBitsWereRead, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\compress\bitmdecoder.h
; Line 41
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 42
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+40], 4
	ja	SHORT $LN3@ExtraBitsW
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, 32					; 00000020H
	sub	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	shl	ecx, 3
	cmp	edx, ecx
	jb	SHORT $LN3@ExtraBitsW
	mov	DWORD PTR tv80[ebp], 0
	jmp	SHORT $LN4@ExtraBitsW
$LN3@ExtraBitsW:
	mov	DWORD PTR tv80[ebp], 1
$LN4@ExtraBitsW:
	mov	al, BYTE PTR tv80[ebp]
; Line 43
	mov	esp, ebp
	pop	ebp
	ret	0
?ExtraBitsWereRead@?$CDecoder@VCInBuffer@@@NBitm@@QBE_NXZ ENDP ; NBitm::CDecoder<CInBuffer>::ExtraBitsWereRead
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z PROC ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@CMyComPtr@4
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@4:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z ENDP ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@5:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ PROC ; CMyComPtr<ISequentialOutStream>::Release, COMDAT
; _this$ = ecx
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Release@4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
$LN2@Release@4:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ENDP ; CMyComPtr<ISequentialOutStream>::Release
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ PROC ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ENDP ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ PROC ; CMyComPtr<ISequentialOutStream>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ ENDP ; CMyComPtr<ISequentialOutStream>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z PROC ; CMyComPtr<ISequentialOutStream>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@2
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@2:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@2
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@2:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ENDP ; CMyComPtr<ISequentialOutStream>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ PROC	; CMyComPtr<ISequentialOutStream>::operator!, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ ENDP	; CMyComPtr<ISequentialOutStream>::operator!
_TEXT	ENDS
PUBLIC	??0?$CRecordVector@PAX@@QAE@XZ			; CRecordVector<void *>::CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CObjectVector@UCProp@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@UCProp@@@@QAE@XZ PROC		; CObjectVector<CProp>::CObjectVector<CProp>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@UCProp@@@@QAE@XZ ENDP		; CObjectVector<CProp>::CObjectVector<CProp>
_TEXT	ENDS
PUBLIC	??1?$CRecordVector@PAX@@QAE@XZ			; CRecordVector<void *>::~CRecordVector<void *>
PUBLIC	??_GCProp@@QAEPAXI@Z				; CProp::`scalar deleting destructor'
PUBLIC	??A?$CRecordVector@PAX@@QAEAAPAXI@Z		; CRecordVector<void *>::operator[]
PUBLIC	?Size@?$CRecordVector@PAX@@QBEIXZ		; CRecordVector<void *>::Size
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@UCProp@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@UCProp@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@UCProp@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@UCProp@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T72157 = -28						; size = 4
$T72156 = -24						; size = 4
_i$71209 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@UCProp@@@@QAE@XZ PROC		; CObjectVector<CProp>::~CObjectVector<CProp>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$71209[ebp], eax
$LN2@CObjectVec:
	cmp	DWORD PTR _i$71209[ebp], 0
	je	SHORT $LN3@CObjectVec
; Line 489
	mov	eax, DWORD PTR _i$71209[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$71209[ebp], eax
	mov	ecx, DWORD PTR _i$71209[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T72157[ebp], edx
	mov	eax, DWORD PTR $T72157[ebp]
	mov	DWORD PTR $T72156[ebp], eax
	cmp	DWORD PTR $T72156[ebp], 0
	je	SHORT $LN5@CObjectVec
	push	1
	mov	ecx, DWORD PTR $T72156[ebp]
	call	??_GCProp@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec
$LN5@CObjectVec:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec:
	jmp	SHORT $LN2@CObjectVec
$LN3@CObjectVec:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@UCProp@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@UCProp@@@@QAE@XZ ENDP		; CObjectVector<CProp>::~CObjectVector<CProp>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CMyComPtr@UIInStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UIInStream@@@@QAE@XZ PROC		; CMyComPtr<IInStream>::CMyComPtr<IInStream>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UIInStream@@@@QAE@XZ ENDP		; CMyComPtr<IInStream>::CMyComPtr<IInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIInStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIInStream@@@@QAE@XZ PROC		; CMyComPtr<IInStream>::~CMyComPtr<IInStream>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@6:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIInStream@@@@QAE@XZ ENDP		; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ PROC		; CMyComPtr<IInStream>::Release, COMDAT
; _this$ = ecx
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Release@5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
$LN2@Release@5:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ ENDP		; CMyComPtr<IInStream>::Release
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ PROC	; CMyComPtr<IInStream>::operator IInStream *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ENDP	; CMyComPtr<IInStream>::operator IInStream *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ PROC	; CMyComPtr<IInStream>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ENDP	; CMyComPtr<IInStream>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z PROC ; CMyComPtr<IInStream>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@3
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@3:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@3
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@3:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ENDP ; CMyComPtr<IInStream>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??7?$CMyComPtr@UIInStream@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??7?$CMyComPtr@UIInStream@@@@QBE_NXZ PROC		; CMyComPtr<IInStream>::operator!, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
??7?$CMyComPtr@UIInStream@@@@QBE_NXZ ENDP		; CMyComPtr<IInStream>::operator!
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICompressCoder@@@@QAE@PAUICompressCoder@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??0?$CMyComPtr@UICompressCoder@@@@QAE@PAUICompressCoder@@@Z PROC ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@CMyComPtr@7
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@7:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UICompressCoder@@@@QAE@PAUICompressCoder@@@Z ENDP ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ PROC		; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@8:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ENDP		; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ PROC ; CMyComPtr<ICompressCoder>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ENDP ; CMyComPtr<ICompressCoder>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ PROC ; CMyComPtr<IArchiveUpdateCallbackFile>::CMyComPtr<IArchiveUpdateCallbackFile>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ENDP ; CMyComPtr<IArchiveUpdateCallbackFile>::CMyComPtr<IArchiveUpdateCallbackFile>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ PROC ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@9
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@9:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ENDP ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ PROC ; CMyComPtr<IArchiveUpdateCallbackFile>::operator IArchiveUpdateCallbackFile *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ ENDP ; CMyComPtr<IArchiveUpdateCallbackFile>::operator IArchiveUpdateCallbackFile *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAEPAPAUIArchiveUpdateCallbackFile@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAEPAPAUIArchiveUpdateCallbackFile@@XZ PROC ; CMyComPtr<IArchiveUpdateCallbackFile>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAEPAPAUIArchiveUpdateCallbackFile@@XZ ENDP ; CMyComPtr<IArchiveUpdateCallbackFile>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ PROC ; CMyComPtr<IArchiveUpdateCallbackFile>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ ENDP ; CMyComPtr<IArchiveUpdateCallbackFile>::operator->
_TEXT	ENDS
PUBLIC	??1CProp@@QAE@XZ				; CProp::~CProp
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCProp@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCProp@@QAEPAXI@Z PROC				; CProp::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CProp@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@3
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCProp@@QAEPAXI@Z ENDP				; CProp::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CProp@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CProp@@QAE@XZ PROC					; CProp::~CProp, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CProp@@QAE@XZ ENDP					; CProp::~CProp
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@PAX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@PAX@@QAE@XZ PROC			; CRecordVector<void *>::CRecordVector<void *>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@PAX@@QAE@XZ ENDP			; CRecordVector<void *>::CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@PAX@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@PAX@@QBEIXZ PROC			; CRecordVector<void *>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@PAX@@QBEIXZ ENDP			; CRecordVector<void *>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@PAX@@QAE@XZ
_TEXT	SEGMENT
$T72207 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@PAX@@QAE@XZ PROC			; CRecordVector<void *>::~CRecordVector<void *>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T72207[ebp], ecx
	mov	edx, DWORD PTR $T72207[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@PAX@@QAE@XZ ENDP			; CRecordVector<void *>::~CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@PAX@@QAEAAPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@PAX@@QAEAAPAXI@Z PROC		; CRecordVector<void *>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@PAX@@QAEAAPAXI@Z ENDP		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CHandler@NBz2@NArchive@@WM@AGKXZ
_TEXT	SEGMENT
?AddRef@CHandler@NBz2@NArchive@@WM@AGKXZ PROC		; [thunk]:NArchive::NBz2::CHandler::AddRef`adjustor{12}', COMDAT
	sub	DWORD PTR [esp+4], 12			; 0000000cH
	jmp	?AddRef@CHandler@NBz2@NArchive@@UAGKXZ	; NArchive::NBz2::CHandler::AddRef
?AddRef@CHandler@NBz2@NArchive@@WM@AGKXZ ENDP		; [thunk]:NArchive::NBz2::CHandler::AddRef`adjustor{12}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CHandler@NBz2@NArchive@@W7AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CHandler@NBz2@NArchive@@W7AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:NArchive::NBz2::CHandler::QueryInterface`adjustor{8}', COMDAT
	sub	DWORD PTR [esp+4], 8
	jmp	?QueryInterface@CHandler@NBz2@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::NBz2::CHandler::QueryInterface
?QueryInterface@CHandler@NBz2@NArchive@@W7AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:NArchive::NBz2::CHandler::QueryInterface`adjustor{8}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CHandler@NBz2@NArchive@@WM@AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CHandler@NBz2@NArchive@@WM@AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:NArchive::NBz2::CHandler::QueryInterface`adjustor{12}', COMDAT
	sub	DWORD PTR [esp+4], 12			; 0000000cH
	jmp	?QueryInterface@CHandler@NBz2@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::NBz2::CHandler::QueryInterface
?QueryInterface@CHandler@NBz2@NArchive@@WM@AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:NArchive::NBz2::CHandler::QueryInterface`adjustor{12}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CHandler@NBz2@NArchive@@W3AGKXZ
_TEXT	SEGMENT
?Release@CHandler@NBz2@NArchive@@W3AGKXZ PROC		; [thunk]:NArchive::NBz2::CHandler::Release`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?Release@CHandler@NBz2@NArchive@@UAGKXZ	; NArchive::NBz2::CHandler::Release
?Release@CHandler@NBz2@NArchive@@W3AGKXZ ENDP		; [thunk]:NArchive::NBz2::CHandler::Release`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CHandler@NBz2@NArchive@@W7AGKXZ
_TEXT	SEGMENT
?Release@CHandler@NBz2@NArchive@@W7AGKXZ PROC		; [thunk]:NArchive::NBz2::CHandler::Release`adjustor{8}', COMDAT
	sub	DWORD PTR [esp+4], 8
	jmp	?Release@CHandler@NBz2@NArchive@@UAGKXZ	; NArchive::NBz2::CHandler::Release
?Release@CHandler@NBz2@NArchive@@W7AGKXZ ENDP		; [thunk]:NArchive::NBz2::CHandler::Release`adjustor{8}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CHandler@NBz2@NArchive@@WM@AGKXZ
_TEXT	SEGMENT
?Release@CHandler@NBz2@NArchive@@WM@AGKXZ PROC		; [thunk]:NArchive::NBz2::CHandler::Release`adjustor{12}', COMDAT
	sub	DWORD PTR [esp+4], 12			; 0000000cH
	jmp	?Release@CHandler@NBz2@NArchive@@UAGKXZ	; NArchive::NBz2::CHandler::Release
?Release@CHandler@NBz2@NArchive@@WM@AGKXZ ENDP		; [thunk]:NArchive::NBz2::CHandler::Release`adjustor{12}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CHandler@NBz2@NArchive@@W3AGKXZ
_TEXT	SEGMENT
?AddRef@CHandler@NBz2@NArchive@@W3AGKXZ PROC		; [thunk]:NArchive::NBz2::CHandler::AddRef`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?AddRef@CHandler@NBz2@NArchive@@UAGKXZ	; NArchive::NBz2::CHandler::AddRef
?AddRef@CHandler@NBz2@NArchive@@W3AGKXZ ENDP		; [thunk]:NArchive::NBz2::CHandler::AddRef`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CHandler@NBz2@NArchive@@W7AGKXZ
_TEXT	SEGMENT
?AddRef@CHandler@NBz2@NArchive@@W7AGKXZ PROC		; [thunk]:NArchive::NBz2::CHandler::AddRef`adjustor{8}', COMDAT
	sub	DWORD PTR [esp+4], 8
	jmp	?AddRef@CHandler@NBz2@NArchive@@UAGKXZ	; NArchive::NBz2::CHandler::AddRef
?AddRef@CHandler@NBz2@NArchive@@W7AGKXZ ENDP		; [thunk]:NArchive::NBz2::CHandler::AddRef`adjustor{8}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CHandler@NBz2@NArchive@@W3AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CHandler@NBz2@NArchive@@W3AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:NArchive::NBz2::CHandler::QueryInterface`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?QueryInterface@CHandler@NBz2@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::NBz2::CHandler::QueryInterface
?QueryInterface@CHandler@NBz2@NArchive@@W3AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:NArchive::NBz2::CHandler::QueryInterface`adjustor{4}'
_TEXT	ENDS
PUBLIC	??0CRegisterArc@NBz2@NArchive@@QAE@XZ		; NArchive::NBz2::CRegisterArc::CRegisterArc
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??__Eg_RegisterArc@NBz2@NArchive@@YAXXZ
text$yc	SEGMENT
??__Eg_RegisterArc@NBz2@NArchive@@YAXXZ PROC		; NArchive::NBz2::`dynamic initializer for 'g_RegisterArc'', COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\archive\bz2handler.cpp
; Line 441
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET _g_RegisterArc
	call	??0CRegisterArc@NBz2@NArchive@@QAE@XZ	; NArchive::NBz2::CRegisterArc::CRegisterArc
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__Eg_RegisterArc@NBz2@NArchive@@YAXXZ ENDP		; NArchive::NBz2::`dynamic initializer for 'g_RegisterArc''
text$yc	ENDS
EXTRN	?RegisterArc@@YGXPBUCArcInfo@@@Z:PROC		; RegisterArc
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CRegisterArc@NBz2@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CRegisterArc@NBz2@NArchive@@QAE@XZ PROC		; NArchive::NBz2::CRegisterArc::CRegisterArc, COMDAT
; _this$ = ecx
; Line 441
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET _g_ArcInfo
	call	?RegisterArc@@YGXPBUCArcInfo@@@Z	; RegisterArc
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CRegisterArc@NBz2@NArchive@@QAE@XZ ENDP		; NArchive::NBz2::CRegisterArc::CRegisterArc
_TEXT	ENDS
_BSS	SEGMENT
_g_RegisterArc DB 01H DUP (?)
_BSS	ENDS
CRT$XCU	SEGMENT
_g_RegisterArc$initializer$ DD FLAT:??__Eg_RegisterArc@NBz2@NArchive@@YAXXZ
CRT$XCU	ENDS
END
