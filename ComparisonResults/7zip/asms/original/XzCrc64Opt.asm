; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\C\XzCrc64Opt.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	@XzCrc64UpdateT4@20
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__aullshr:PROC
EXTRN	__allmul:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\c\xzcrc64opt.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_d$2678 = -16						; size = 4
_p$ = -12						; size = 4
_size$ = -8						; size = 4
_data$ = -4						; size = 4
_v$ = 8							; size = 8
_table$ = 16						; size = 4
@XzCrc64UpdateT4@20 PROC
; _data$ = ecx
; _size$ = edx
; Line 13
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _size$[ebp], edx
	mov	DWORD PTR _data$[ebp], ecx
; Line 14
	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 15
	jmp	SHORT $LN9@
$LN8@:
	mov	ecx, DWORD PTR _size$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _size$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
$LN9@:
	cmp	DWORD PTR _size$[ebp], 0
	jbe	SHORT $LN7@
	mov	eax, DWORD PTR _p$[ebp]
	and	eax, 3
	je	SHORT $LN7@
; Line 16
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx]
	cdq
	xor	eax, DWORD PTR _v$[ebp]
	xor	edx, DWORD PTR _v$[ebp+4]
	and	eax, 255				; 000000ffH
	and	edx, 0
	push	0
	push	8
	push	edx
	push	eax
	call	__allmul
	mov	esi, eax
	mov	eax, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR _v$[ebp+4]
	mov	cl, 8
	call	__aullshr
	mov	ecx, DWORD PTR _table$[ebp]
	xor	eax, DWORD PTR [ecx+esi]
	xor	edx, DWORD PTR [ecx+esi+4]
	mov	DWORD PTR _v$[ebp], eax
	mov	DWORD PTR _v$[ebp+4], edx
	jmp	SHORT $LN8@
$LN7@:
; Line 17
	jmp	SHORT $LN6@
$LN5@:
	mov	edx, DWORD PTR _size$[ebp]
	sub	edx, 4
	mov	DWORD PTR _size$[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 4
	mov	DWORD PTR _p$[ebp], eax
$LN6@:
	cmp	DWORD PTR _size$[ebp], 4
	jb	$LN4@
; Line 19
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	xor	ecx, DWORD PTR [edx]
	mov	DWORD PTR _d$2678[ebp], ecx
; Line 24
	mov	eax, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR _v$[ebp+4]
	mov	cl, 32					; 00000020H
	call	__aullshr
	mov	ecx, DWORD PTR _d$2678[ebp]
	and	ecx, 255				; 000000ffH
	mov	esi, DWORD PTR _table$[ebp]
	xor	eax, DWORD PTR [esi+ecx*8+6144]
	xor	edx, DWORD PTR [esi+ecx*8+6148]
	mov	ecx, DWORD PTR _d$2678[ebp]
	shr	ecx, 8
	and	ecx, 255				; 000000ffH
	mov	esi, DWORD PTR _table$[ebp]
	xor	eax, DWORD PTR [esi+ecx*8+4096]
	xor	edx, DWORD PTR [esi+ecx*8+4100]
	mov	ecx, DWORD PTR _d$2678[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 255				; 000000ffH
	mov	esi, DWORD PTR _table$[ebp]
	xor	eax, DWORD PTR [esi+ecx*8+2048]
	xor	edx, DWORD PTR [esi+ecx*8+2052]
	mov	ecx, DWORD PTR _d$2678[ebp]
	shr	ecx, 24					; 00000018H
	mov	esi, DWORD PTR _table$[ebp]
	xor	eax, DWORD PTR [esi+ecx*8]
	xor	edx, DWORD PTR [esi+ecx*8+4]
	mov	DWORD PTR _v$[ebp], eax
	mov	DWORD PTR _v$[ebp+4], edx
; Line 25
	jmp	$LN5@
$LN4@:
; Line 26
	jmp	SHORT $LN3@
$LN2@:
	mov	edx, DWORD PTR _size$[ebp]
	sub	edx, 1
	mov	DWORD PTR _size$[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
$LN3@:
	cmp	DWORD PTR _size$[ebp], 0
	jbe	SHORT $LN1@
; Line 27
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx]
	cdq
	xor	eax, DWORD PTR _v$[ebp]
	xor	edx, DWORD PTR _v$[ebp+4]
	and	eax, 255				; 000000ffH
	and	edx, 0
	push	0
	push	8
	push	edx
	push	eax
	call	__allmul
	mov	esi, eax
	mov	eax, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR _v$[ebp+4]
	mov	cl, 8
	call	__aullshr
	mov	ecx, DWORD PTR _table$[ebp]
	xor	eax, DWORD PTR [ecx+esi]
	xor	edx, DWORD PTR [ecx+esi+4]
	mov	DWORD PTR _v$[ebp], eax
	mov	DWORD PTR _v$[ebp+4], edx
	jmp	SHORT $LN2@
$LN1@:
; Line 28
	mov	eax, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR _v$[ebp+4]
; Line 29
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
@XzCrc64UpdateT4@20 ENDP
_TEXT	ENDS
END
