; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\CPP\7zip\UI\Console\Main.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_IID_IProgress
PUBLIC	_IID_ISequentialInStream
PUBLIC	_IID_ISequentialOutStream
PUBLIC	_IID_IInStream
PUBLIC	_IID_IOutStream
PUBLIC	_IID_IStreamGetSize
PUBLIC	_IID_IOutStreamFinish
PUBLIC	_IID_IStreamGetProps
PUBLIC	_IID_IStreamGetProps2
PUBLIC	_IID_IArchiveOpenCallback
PUBLIC	_IID_IArchiveExtractCallback
PUBLIC	_IID_IArchiveExtractCallbackMessage
PUBLIC	_IID_IArchiveOpenVolumeCallback
PUBLIC	_IID_IInArchiveGetStream
PUBLIC	_IID_IArchiveOpenSetSubArchiveName
PUBLIC	_IID_IInArchive
PUBLIC	_IID_IArchiveGetRawProps
PUBLIC	_IID_IArchiveGetRootProps
PUBLIC	_IID_IArchiveOpenSeq
PUBLIC	_IID_IArchiveUpdateCallback
PUBLIC	_IID_IArchiveUpdateCallback2
PUBLIC	_IID_IArchiveUpdateCallbackFile
PUBLIC	_IID_IOutArchive
PUBLIC	_IID_ISetProperties
PUBLIC	_IID_IArchiveKeepModeForNextOpen
PUBLIC	_IID_IArchiveAllowTail
PUBLIC	_IID_ICryptoGetTextPassword
PUBLIC	_IID_ICryptoGetTextPassword2
PUBLIC	_GUID_DEVINTERFACE_DISK
PUBLIC	_GUID_DEVINTERFACE_CDROM
PUBLIC	_GUID_DEVINTERFACE_PARTITION
PUBLIC	_GUID_DEVINTERFACE_TAPE
PUBLIC	_GUID_DEVINTERFACE_WRITEONCEDISK
PUBLIC	_GUID_DEVINTERFACE_VOLUME
PUBLIC	_GUID_DEVINTERFACE_MEDIUMCHANGER
PUBLIC	_GUID_DEVINTERFACE_FLOPPY
PUBLIC	_GUID_DEVINTERFACE_CDCHANGER
PUBLIC	_GUID_DEVINTERFACE_STORAGEPORT
PUBLIC	_GUID_DEVINTERFACE_HIDDEN_VOLUME
PUBLIC	_GUID_DEVINTERFACE_COMPORT
PUBLIC	_GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR
PUBLIC	_IID_ICompressProgressInfo
PUBLIC	_IID_ICompressCoder
PUBLIC	_IID_ICompressCoder2
PUBLIC	_IID_ICompressSetCoderProperties
PUBLIC	_IID_ICompressSetDecoderProperties2
PUBLIC	_IID_ICompressWriteCoderProperties
PUBLIC	_IID_ICompressGetInStreamProcessedSize
PUBLIC	_IID_ICompressSetCoderMt
PUBLIC	_IID_ICompressSetFinishMode
PUBLIC	_IID_ICompressGetSubStreamSize
PUBLIC	_IID_ICompressSetInStream
PUBLIC	_IID_ICompressSetOutStream
PUBLIC	_IID_ICompressSetOutStreamSize
PUBLIC	_IID_ICompressSetBufSize
PUBLIC	_IID_ICompressInitEncoder
PUBLIC	_IID_ICompressSetInStream2
PUBLIC	_IID_ICompressFilter
PUBLIC	_IID_ICompressCodecsInfo
PUBLIC	_IID_ISetCompressCodecsInfo
PUBLIC	_IID_ICryptoProperties
PUBLIC	_IID_ICryptoResetInitVector
PUBLIC	_IID_ICryptoSetPassword
PUBLIC	_IID_ICryptoSetCRC
PUBLIC	_IID_IHasher
PUBLIC	_IID_IHashers
PUBLIC	_IID_IFolderArchiveExtractCallback
PUBLIC	_IID_IFolderArchiveExtractCallback2
PUBLIC	_IID_IGetProp
PUBLIC	_IID_IFolderExtractToStreamCallback
PUBLIC	?g_hInstance@@3PAUHINSTANCE__@@A		; g_hInstance
_BSS	SEGMENT
?g_hInstance@@3PAUHINSTANCE__@@A DD 01H DUP (?)		; g_hInstance
_BSS	ENDS
_DATA	SEGMENT
_kCopyrightString DD FLAT:$SG77136
_kHelpString DD	FLAT:$SG77138
_kEverythingIsOk DD FLAT:$SG77140
_kUserErrorMessage DD FLAT:$SG77142
_kNoFormats DD	FLAT:$SG77144
_kUnsupportedArcTypeMessage DD FLAT:$SG77146
_kDefaultSfxModule DD FLAT:$SG77148
_DATA	ENDS
CONST	SEGMENT
$SG77136 DB	0aH, '7-Zip (a) [32] 15.05 beta : Copyright (c) 1999-2015'
	DB	' Igor Pavlov : 2015-06-14', 0aH, 0aH, 00H
$SG77138 DB	'Usage: 7za <command> [<switches>...] <archive_name> [<fi'
	DB	'le_names>...]', 0aH, '       [<@listfiles...>]', 0aH, 0aH, '<'
	DB	'Commands>', 0aH, '  a : Add files to archive', 0aH, '  b : Be'
	DB	'nchmark', 0aH, '  d : Delete files from archive', 0aH, '  e :'
	DB	' Extract files from archive (without using directory names)', 0aH
	DB	'  h : Calculate hash values for files', 0aH, '  i : Show info'
	DB	'rmation about supported formats', 0aH, '  l : List contents o'
	DB	'f archive', 0aH, '  rn : Rename files in archive', 0aH, '  t '
	DB	': Test integrity of archive', 0aH, '  u : Update files to arc'
	DB	'hive', 0aH, '  x : eXtract files with full paths', 0aH, '<Swi'
	DB	'tches>', 0aH, '  -- : Stop switches parsing', 0aH, '  -ai[r[-'
	DB	'|0]]{@listfile|!wildcard} : Include archives', 0aH, '  -ax[r['
	DB	'-|0]]{@listfile|!wildcard} : eXclude archives', 0aH, '  -bd :'
	DB	' Disable percentage indicator', 0aH, '  -i[r[-|0]]{@listfile|'
	DB	'!wildcard} : Include filenames', 0aH, '  -m{Parameters} : set'
	DB	' compression Method', 0aH, '  -o{Directory} : set Output dire'
	DB	'ctory', 0aH, '  -p{Password} : set Password', 0aH, '  -r[-|0]'
	DB	' : Recurse subdirectories', 0aH, '  -scs{UTF-8|UTF-16LE|UTF-1'
	DB	'6BE|WIN|DOS|{id}} : set charset for list files', 0aH, '  -sde'
	DB	'l : Delete files after compression', 0aH, '  -sfx[{name}] : C'
	DB	'reate SFX archive', 0aH, '  -si[{name}] : read data from stdi'
	DB	'n', 0aH, '  -slt : show technical information for l (List) co'
	DB	'mmand', 0aH, '  -so : write data to stdout', 0aH, '  -ssc[-] '
	DB	': set sensitive case mode', 0aH, '  -ssw : compress shared fi'
	DB	'les', 0aH, '  -t{Type} : Set type of archive', 0aH, '  -u[-]['
	DB	'p#][q#][r#][x#][y#][z#][!newArchiveName] : Update options', 0aH
	DB	'  -v{Size}[b|k|m|g] : Create volumes', 0aH, '  -w[{path}] : a'
	DB	'ssign Work directory. Empty path means a temporary directory', 0aH
	DB	'  -x[r[-|0]]]{@listfile|!wildcard} : eXclude filenames', 0aH, ' '
	DB	' -y : assume Yes on all queries', 0aH, 00H
$SG77140 DB	'Everything is Ok', 00H
	ORG $+3
$SG77142 DB	'Incorrect command line', 00H
	ORG $+1
$SG77144 DB	'7-Zip cannot find the code that works with archives.', 00H
	ORG $+3
$SG77146 DB	'Unsupported archive type', 00H
	ORG $+3
$SG77148 DB	'7', 00H, 'z', 00H, 'C', 00H, 'o', 00H, 'n', 00H, '.', 00H
	DB	's', 00H, 'f', 00H, 'x', 00H, 00H, 00H
$SG77154 DB	'ERROR: ', 00H
$SG77189 DB	'  ', 00H
	ORG $+1
$SG77212 DB	' : ', 00H
$SG77214 DB	'----------------', 00H
	ORG $+3
$SG77224 DB	'Scan WARNINGS for files and folders:', 00H
	ORG $+3
$SG77225 DB	'Scan WARNINGS: ', 00H
$SG77238 DB	0aH, 00H, 'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H
	DB	':', 00H, 0aH, 00H, 00H, 00H
	ORG $+2
$SG77245 DB	'WARNINGS for files:', 00H
$SG77246 DB	'WARNING: Cannot open ', 00H
	ORG $+2
$SG77247 DB	' file', 00H
	ORG $+2
$SG77276 DB	' Time =', 00H
$SG77287 DB	' =', 00H
	ORG $+1
$SG77292 DB	'    ', 00H
	ORG $+3
$SG77293 DB	' Memory =', 00H
	ORG $+2
$SG77294 DB	' MB', 00H
$SG77315 DB	'K32GetProcessMemoryInfo', 00H
$SG77316 DB	'k', 00H, 'e', 00H, 'r', 00H, 'n', 00H, 'e', 00H, 'l', 00H
	DB	'3', 00H, '2', 00H, '.', 00H, 'd', 00H, 'l', 00H, 'l', 00H, 00H
	DB	00H
	ORG $+2
$SG77319 DB	'P', 00H, 's', 00H, 'a', 00H, 'p', 00H, 'i', 00H, '.', 00H
	DB	'd', 00H, 'l', 00H, 'l', 00H, 00H, 00H
$SG77322 DB	'GetProcessMemoryInfo', 00H
	ORG $+3
$SG77329 DB	'Kernel ', 00H
$SG77330 DB	'User   ', 00H
$SG77331 DB	'Process', 00H
$SG77333 DB	'Virtual ', 00H
	ORG $+3
$SG77334 DB	'Global ', 00H
$SG77336 DB	'Physical', 00H
	ORG $+3
$SG77505 DB	'Formats:', 00H
	ORG $+3
$SG77507 DB	'KSNFMGOPBELH', 00H
	ORG $+3
$SG77514 DB	'  ', 00H
	ORG $+1
$SG77530 DB	' ', 00H, '(', 00H, 00H, 00H
	ORG $+2
$SG77532 DB	'offset=', 00H
$SG77538 DB	'  ||  ', 00H
	ORG $+1
$SG77549 DB	'Codecs:', 00H
$SG77558 DB	'Hashers:', 00H
	ORG $+3
$SG77569 DB	0aH, 'Decoding ERROR', 0aH, 00H
	ORG $+3
$SG77580 DB	'Scanning the drive for archives:', 00H
	ORG $+3
$SG77607 DB	'ERROR:', 00H
	ORG $+1
$SG77612 DB	'Archives: ', 00H
	ORG $+1
$SG77613 DB	'OK archives: ', 00H
	ORG $+2
$SG77616 DB	'Can''t open as archive: ', 00H
$SG77618 DB	'Archives with Errors: ', 00H
	ORG $+1
$SG77620 DB	'Archives with Warnings: ', 00H
	ORG $+3
$SG77623 DB	'Warnings: ', 00H
	ORG $+1
$SG77626 DB	'Open Errors: ', 00H
	ORG $+2
$SG77631 DB	'Sub items Errors: ', 00H
	ORG $+1
$SG77636 DB	'Folders: ', 00H
	ORG $+2
$SG77639 DB	'Files: ', 00H
$SG77641 DB	'Alternate Streams: ', 00H
$SG77642 DB	'Alternate Streams Size: ', 00H
	ORG $+3
$SG77643 DB	'Size:       ', 00H
	ORG $+3
$SG77644 DB	'Compressed: ', 00H
	ORG $+3
$SG77651 DB	'Warnings: ', 00H
	ORG $+1
$SG77654 DB	'Errors: ', 00H
CONST	ENDS
;	COMDAT _IID_IFolderExtractToStreamCallback
CONST	SEGMENT
_IID_IFolderExtractToStreamCallback DD 023170f69H
	DW	040c1H
	DW	0278aH
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	030H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT _IID_IGetProp
CONST	SEGMENT
_IID_IGetProp DD 023170f69H
	DW	040c1H
	DW	0278aH
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	020H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT _IID_IFolderArchiveExtractCallback2
CONST	SEGMENT
_IID_IFolderArchiveExtractCallback2 DD 023170f69H
	DW	040c1H
	DW	0278aH
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	08H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT _IID_IFolderArchiveExtractCallback
CONST	SEGMENT
_IID_IFolderArchiveExtractCallback DD 023170f69H
	DW	040c1H
	DW	0278aH
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	07H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT _IID_IHashers
CONST	SEGMENT
_IID_IHashers DD 023170f69H
	DW	040c1H
	DW	0278aH
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	0c1H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT _IID_IHasher
CONST	SEGMENT
_IID_IHasher DD	023170f69H
	DW	040c1H
	DW	0278aH
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	0c0H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT _IID_ICryptoSetCRC
CONST	SEGMENT
_IID_ICryptoSetCRC DD 023170f69H
	DW	040c1H
	DW	0278aH
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	0a0H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT _IID_ICryptoSetPassword
CONST	SEGMENT
_IID_ICryptoSetPassword DD 023170f69H
	DW	040c1H
	DW	0278aH
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	090H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT _IID_ICryptoResetInitVector
CONST	SEGMENT
_IID_ICryptoResetInitVector DD 023170f69H
	DW	040c1H
	DW	0278aH
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	08cH
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT _IID_ICryptoProperties
CONST	SEGMENT
_IID_ICryptoProperties DD 023170f69H
	DW	040c1H
	DW	0278aH
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	080H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT _IID_ISetCompressCodecsInfo
CONST	SEGMENT
_IID_ISetCompressCodecsInfo DD 023170f69H
	DW	040c1H
	DW	0278aH
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	061H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT _IID_ICompressCodecsInfo
CONST	SEGMENT
_IID_ICompressCodecsInfo DD 023170f69H
	DW	040c1H
	DW	0278aH
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	060H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT _IID_ICompressFilter
CONST	SEGMENT
_IID_ICompressFilter DD 023170f69H
	DW	040c1H
	DW	0278aH
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	040H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT _IID_ICompressSetInStream2
CONST	SEGMENT
_IID_ICompressSetInStream2 DD 023170f69H
	DW	040c1H
	DW	0278aH
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	037H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT _IID_ICompressInitEncoder
CONST	SEGMENT
_IID_ICompressInitEncoder DD 023170f69H
	DW	040c1H
	DW	0278aH
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	036H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT _IID_ICompressSetBufSize
CONST	SEGMENT
_IID_ICompressSetBufSize DD 023170f69H
	DW	040c1H
	DW	0278aH
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	035H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT _IID_ICompressSetOutStreamSize
CONST	SEGMENT
_IID_ICompressSetOutStreamSize DD 023170f69H
	DW	040c1H
	DW	0278aH
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	034H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT _IID_ICompressSetOutStream
CONST	SEGMENT
_IID_ICompressSetOutStream DD 023170f69H
	DW	040c1H
	DW	0278aH
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	032H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT _IID_ICompressSetInStream
CONST	SEGMENT
_IID_ICompressSetInStream DD 023170f69H
	DW	040c1H
	DW	0278aH
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	031H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT _IID_ICompressGetSubStreamSize
CONST	SEGMENT
_IID_ICompressGetSubStreamSize DD 023170f69H
	DW	040c1H
	DW	0278aH
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	030H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT _IID_ICompressSetFinishMode
CONST	SEGMENT
_IID_ICompressSetFinishMode DD 023170f69H
	DW	040c1H
	DW	0278aH
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	026H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT _IID_ICompressSetCoderMt
CONST	SEGMENT
_IID_ICompressSetCoderMt DD 023170f69H
	DW	040c1H
	DW	0278aH
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	025H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT _IID_ICompressGetInStreamProcessedSize
CONST	SEGMENT
_IID_ICompressGetInStreamProcessedSize DD 023170f69H
	DW	040c1H
	DW	0278aH
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	024H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT _IID_ICompressWriteCoderProperties
CONST	SEGMENT
_IID_ICompressWriteCoderProperties DD 023170f69H
	DW	040c1H
	DW	0278aH
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	023H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT _IID_ICompressSetDecoderProperties2
CONST	SEGMENT
_IID_ICompressSetDecoderProperties2 DD 023170f69H
	DW	040c1H
	DW	0278aH
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	022H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT _IID_ICompressSetCoderProperties
CONST	SEGMENT
_IID_ICompressSetCoderProperties DD 023170f69H
	DW	040c1H
	DW	0278aH
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	020H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT _IID_ICompressCoder2
CONST	SEGMENT
_IID_ICompressCoder2 DD 023170f69H
	DW	040c1H
	DW	0278aH
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	018H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT _IID_ICompressCoder
CONST	SEGMENT
_IID_ICompressCoder DD 023170f69H
	DW	040c1H
	DW	0278aH
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	05H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT _IID_ICompressProgressInfo
CONST	SEGMENT
_IID_ICompressProgressInfo DD 023170f69H
	DW	040c1H
	DW	0278aH
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT _GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR
CONST	SEGMENT
_GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR DD 04d36e978H
	DW	0e325H
	DW	011ceH
	DB	0bfH
	DB	0c1H
	DB	08H
	DB	00H
	DB	02bH
	DB	0e1H
	DB	03H
	DB	018H
CONST	ENDS
;	COMDAT _GUID_DEVINTERFACE_COMPORT
CONST	SEGMENT
_GUID_DEVINTERFACE_COMPORT DD 086e0d1e0H
	DW	08089H
	DW	011d0H
	DB	09cH
	DB	0e4H
	DB	08H
	DB	00H
	DB	03eH
	DB	030H
	DB	01fH
	DB	073H
CONST	ENDS
;	COMDAT _GUID_DEVINTERFACE_HIDDEN_VOLUME
CONST	SEGMENT
_GUID_DEVINTERFACE_HIDDEN_VOLUME DD 07f108a28H
	DW	09833H
	DW	04b3bH
	DB	0b7H
	DB	080H
	DB	02cH
	DB	06bH
	DB	05fH
	DB	0a5H
	DB	0c0H
	DB	062H
CONST	ENDS
;	COMDAT _GUID_DEVINTERFACE_STORAGEPORT
CONST	SEGMENT
_GUID_DEVINTERFACE_STORAGEPORT DD 02accfe60H
	DW	0c130H
	DW	011d2H
	DB	0b0H
	DB	082H
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	01eH
	DB	0fbH
	DB	08bH
CONST	ENDS
;	COMDAT _GUID_DEVINTERFACE_CDCHANGER
CONST	SEGMENT
_GUID_DEVINTERFACE_CDCHANGER DD 053f56312H
	DW	0b6bfH
	DW	011d0H
	DB	094H
	DB	0f2H
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	01eH
	DB	0fbH
	DB	08bH
CONST	ENDS
;	COMDAT _GUID_DEVINTERFACE_FLOPPY
CONST	SEGMENT
_GUID_DEVINTERFACE_FLOPPY DD 053f56311H
	DW	0b6bfH
	DW	011d0H
	DB	094H
	DB	0f2H
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	01eH
	DB	0fbH
	DB	08bH
CONST	ENDS
;	COMDAT _GUID_DEVINTERFACE_MEDIUMCHANGER
CONST	SEGMENT
_GUID_DEVINTERFACE_MEDIUMCHANGER DD 053f56310H
	DW	0b6bfH
	DW	011d0H
	DB	094H
	DB	0f2H
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	01eH
	DB	0fbH
	DB	08bH
CONST	ENDS
;	COMDAT _GUID_DEVINTERFACE_VOLUME
CONST	SEGMENT
_GUID_DEVINTERFACE_VOLUME DD 053f5630dH
	DW	0b6bfH
	DW	011d0H
	DB	094H
	DB	0f2H
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	01eH
	DB	0fbH
	DB	08bH
CONST	ENDS
;	COMDAT _GUID_DEVINTERFACE_WRITEONCEDISK
CONST	SEGMENT
_GUID_DEVINTERFACE_WRITEONCEDISK DD 053f5630cH
	DW	0b6bfH
	DW	011d0H
	DB	094H
	DB	0f2H
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	01eH
	DB	0fbH
	DB	08bH
CONST	ENDS
;	COMDAT _GUID_DEVINTERFACE_TAPE
CONST	SEGMENT
_GUID_DEVINTERFACE_TAPE DD 053f5630bH
	DW	0b6bfH
	DW	011d0H
	DB	094H
	DB	0f2H
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	01eH
	DB	0fbH
	DB	08bH
CONST	ENDS
;	COMDAT _GUID_DEVINTERFACE_PARTITION
CONST	SEGMENT
_GUID_DEVINTERFACE_PARTITION DD 053f5630aH
	DW	0b6bfH
	DW	011d0H
	DB	094H
	DB	0f2H
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	01eH
	DB	0fbH
	DB	08bH
CONST	ENDS
;	COMDAT _GUID_DEVINTERFACE_CDROM
CONST	SEGMENT
_GUID_DEVINTERFACE_CDROM DD 053f56308H
	DW	0b6bfH
	DW	011d0H
	DB	094H
	DB	0f2H
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	01eH
	DB	0fbH
	DB	08bH
CONST	ENDS
;	COMDAT _GUID_DEVINTERFACE_DISK
CONST	SEGMENT
_GUID_DEVINTERFACE_DISK DD 053f56307H
	DW	0b6bfH
	DW	011d0H
	DB	094H
	DB	0f2H
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	01eH
	DB	0fbH
	DB	08bH
CONST	ENDS
;	COMDAT _IID_ICryptoGetTextPassword2
CONST	SEGMENT
_IID_ICryptoGetTextPassword2 DD 023170f69H
	DW	040c1H
	DW	0278aH
	DB	00H
	DB	00H
	DB	00H
	DB	05H
	DB	00H
	DB	011H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT _IID_ICryptoGetTextPassword
CONST	SEGMENT
_IID_ICryptoGetTextPassword DD 023170f69H
	DW	040c1H
	DW	0278aH
	DB	00H
	DB	00H
	DB	00H
	DB	05H
	DB	00H
	DB	010H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT _IID_IArchiveAllowTail
CONST	SEGMENT
_IID_IArchiveAllowTail DD 023170f69H
	DW	040c1H
	DW	0278aH
	DB	00H
	DB	00H
	DB	00H
	DB	06H
	DB	00H
	DB	05H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT _IID_IArchiveKeepModeForNextOpen
CONST	SEGMENT
_IID_IArchiveKeepModeForNextOpen DD 023170f69H
	DW	040c1H
	DW	0278aH
	DB	00H
	DB	00H
	DB	00H
	DB	06H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT _IID_ISetProperties
CONST	SEGMENT
_IID_ISetProperties DD 023170f69H
	DW	040c1H
	DW	0278aH
	DB	00H
	DB	00H
	DB	00H
	DB	06H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT _IID_IOutArchive
CONST	SEGMENT
_IID_IOutArchive DD 023170f69H
	DW	040c1H
	DW	0278aH
	DB	00H
	DB	00H
	DB	00H
	DB	06H
	DB	00H
	DB	0a0H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT _IID_IArchiveUpdateCallbackFile
CONST	SEGMENT
_IID_IArchiveUpdateCallbackFile DD 023170f69H
	DW	040c1H
	DW	0278aH
	DB	00H
	DB	00H
	DB	00H
	DB	06H
	DB	00H
	DB	083H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT _IID_IArchiveUpdateCallback2
CONST	SEGMENT
_IID_IArchiveUpdateCallback2 DD 023170f69H
	DW	040c1H
	DW	0278aH
	DB	00H
	DB	00H
	DB	00H
	DB	06H
	DB	00H
	DB	082H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT _IID_IArchiveUpdateCallback
CONST	SEGMENT
_IID_IArchiveUpdateCallback DD 023170f69H
	DW	040c1H
	DW	0278aH
	DB	00H
	DB	00H
	DB	00H
	DB	06H
	DB	00H
	DB	080H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT _IID_IArchiveOpenSeq
CONST	SEGMENT
_IID_IArchiveOpenSeq DD 023170f69H
	DW	040c1H
	DW	0278aH
	DB	00H
	DB	00H
	DB	00H
	DB	06H
	DB	00H
	DB	061H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT _IID_IArchiveGetRootProps
CONST	SEGMENT
_IID_IArchiveGetRootProps DD 023170f69H
	DW	040c1H
	DW	0278aH
	DB	00H
	DB	00H
	DB	00H
	DB	06H
	DB	00H
	DB	071H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT _IID_IArchiveGetRawProps
CONST	SEGMENT
_IID_IArchiveGetRawProps DD 023170f69H
	DW	040c1H
	DW	0278aH
	DB	00H
	DB	00H
	DB	00H
	DB	06H
	DB	00H
	DB	070H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT _IID_IInArchive
CONST	SEGMENT
_IID_IInArchive DD 023170f69H
	DW	040c1H
	DW	0278aH
	DB	00H
	DB	00H
	DB	00H
	DB	06H
	DB	00H
	DB	060H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT _IID_IArchiveOpenSetSubArchiveName
CONST	SEGMENT
_IID_IArchiveOpenSetSubArchiveName DD 023170f69H
	DW	040c1H
	DW	0278aH
	DB	00H
	DB	00H
	DB	00H
	DB	06H
	DB	00H
	DB	050H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT _IID_IInArchiveGetStream
CONST	SEGMENT
_IID_IInArchiveGetStream DD 023170f69H
	DW	040c1H
	DW	0278aH
	DB	00H
	DB	00H
	DB	00H
	DB	06H
	DB	00H
	DB	040H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT _IID_IArchiveOpenVolumeCallback
CONST	SEGMENT
_IID_IArchiveOpenVolumeCallback DD 023170f69H
	DW	040c1H
	DW	0278aH
	DB	00H
	DB	00H
	DB	00H
	DB	06H
	DB	00H
	DB	030H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT _IID_IArchiveExtractCallbackMessage
CONST	SEGMENT
_IID_IArchiveExtractCallbackMessage DD 023170f69H
	DW	040c1H
	DW	0278aH
	DB	00H
	DB	00H
	DB	00H
	DB	06H
	DB	00H
	DB	021H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT _IID_IArchiveExtractCallback
CONST	SEGMENT
_IID_IArchiveExtractCallback DD 023170f69H
	DW	040c1H
	DW	0278aH
	DB	00H
	DB	00H
	DB	00H
	DB	06H
	DB	00H
	DB	020H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT _IID_IArchiveOpenCallback
CONST	SEGMENT
_IID_IArchiveOpenCallback DD 023170f69H
	DW	040c1H
	DW	0278aH
	DB	00H
	DB	00H
	DB	00H
	DB	06H
	DB	00H
	DB	010H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT _IID_IStreamGetProps2
CONST	SEGMENT
_IID_IStreamGetProps2 DD 023170f69H
	DW	040c1H
	DW	0278aH
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	09H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT _IID_IStreamGetProps
CONST	SEGMENT
_IID_IStreamGetProps DD 023170f69H
	DW	040c1H
	DW	0278aH
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	08H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT _IID_IOutStreamFinish
CONST	SEGMENT
_IID_IOutStreamFinish DD 023170f69H
	DW	040c1H
	DW	0278aH
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	07H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT _IID_IStreamGetSize
CONST	SEGMENT
_IID_IStreamGetSize DD 023170f69H
	DW	040c1H
	DW	0278aH
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	06H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT _IID_IOutStream
CONST	SEGMENT
_IID_IOutStream DD 023170f69H
	DW	040c1H
	DW	0278aH
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT _IID_IInStream
CONST	SEGMENT
_IID_IInStream DD 023170f69H
	DW	040c1H
	DW	0278aH
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT _IID_ISequentialOutStream
CONST	SEGMENT
_IID_ISequentialOutStream DD 023170f69H
	DW	040c1H
	DW	0278aH
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT _IID_ISequentialInStream
CONST	SEGMENT
_IID_ISequentialInStream DD 023170f69H
	DW	040c1H
	DW	0278aH
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT _IID_IProgress
CONST	SEGMENT
_IID_IProgress DD 023170f69H
	DW	040c1H
	DW	0278aH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	05H
	DB	00H
	DB	00H
CONST	ENDS
PUBLIC	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ		; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
PUBLIC	??1?$CObjectVector@UCOpenType@@@@QAE@XZ		; CObjectVector<COpenType>::~CObjectVector<COpenType>
PUBLIC	??1CHashCallbackConsole@@QAE@XZ			; CHashCallbackConsole::~CHashCallbackConsole
PUBLIC	??1AString@@QAE@XZ				; AString::~AString
PUBLIC	??0CHashCallbackConsole@@QAE@XZ			; CHashCallbackConsole::CHashCallbackConsole
PUBLIC	??1COpenCallbackConsole@@QAE@XZ			; COpenCallbackConsole::~COpenCallbackConsole
PUBLIC	??1CUpdateCallbackConsole@@QAE@XZ		; CUpdateCallbackConsole::~CUpdateCallbackConsole
PUBLIC	??1CUpdateErrorInfo@@QAE@XZ			; CUpdateErrorInfo::~CUpdateErrorInfo
PUBLIC	?ClosePercents2@CCallbackConsoleBase@@QAEXXZ	; CCallbackConsoleBase::ClosePercents2
PUBLIC	??0CUpdateErrorInfo@@QAE@XZ			; CUpdateErrorInfo::CUpdateErrorInfo
PUBLIC	?Init@CCallbackConsoleBase@@QAEXPAVCStdOutStream@@00@Z ; CCallbackConsoleBase::Init
PUBLIC	?SetWindowWidth@CCallbackConsoleBase@@QAEXI@Z	; CCallbackConsoleBase::SetWindowWidth
PUBLIC	??0CUpdateCallbackConsole@@QAE@XZ		; CUpdateCallbackConsole::CUpdateCallbackConsole
PUBLIC	?Init@COpenCallbackConsole@@QAEXPAVCStdOutStream@@00@Z ; COpenCallbackConsole::Init
PUBLIC	??0COpenCallbackConsole@@QAE@XZ			; COpenCallbackConsole::COpenCallbackConsole
PUBLIC	??1?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IFolderArchiveExtractCallback>::~CMyComPtr<IFolderArchiveExtractCallback>
PUBLIC	??1CExtractOptions@@QAE@XZ			; CExtractOptions::~CExtractOptions
PUBLIC	??1CHashBundle@@QAE@XZ				; CHashBundle::~CHashBundle
PUBLIC	??BUString@@QBEPB_WXZ				; UString::operator wchar_t const *
PUBLIC	?ClosePercents@COpenCallbackConsole@@QAEXXZ	; COpenCallbackConsole::ClosePercents
PUBLIC	?Front@?$CObjectVector@UCPair@NWildcard@@@@QAEAAUCPair@NWildcard@@XZ ; CObjectVector<NWildcard::CPair>::Front
PUBLIC	?Init@CHashBundle@@QAEXXZ			; CHashBundle::Init
PUBLIC	?IsEmpty@?$CObjectVector@VUString@@@@QBE_NXZ	; CObjectVector<UString>::IsEmpty
PUBLIC	??0CHashBundle@@QAE@XZ				; CHashBundle::CHashBundle
PUBLIC	??4?$CObjectVector@UCProperty@@@@QAEAAV0@ABV0@@Z ; CObjectVector<CProperty>::operator=
PUBLIC	?IsTestCommand@CArcCommand@@QBE_NXZ		; CArcCommand::IsTestCommand
PUBLIC	??4CExtractOptionsBase@@QAEAAU0@ABU0@@Z		; CExtractOptionsBase::operator=
PUBLIC	??0CExtractOptions@@QAE@XZ			; CExtractOptions::CExtractOptions
PUBLIC	?SetWindowWidth@CExtractCallbackConsole@@QAEXI@Z ; CExtractCallbackConsole::SetWindowWidth
PUBLIC	?Init@CExtractCallbackConsole@@QAEXPAVCStdOutStream@@00@Z ; CExtractCallbackConsole::Init
PUBLIC	??0?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QAE@PAUIFolderArchiveExtractCallback@@@Z ; CMyComPtr<IFolderArchiveExtractCallback>::CMyComPtr<IFolderArchiveExtractCallback>
PUBLIC	??0CExtractCallbackConsole@@QAE@XZ		; CExtractCallbackConsole::CExtractCallbackConsole
PUBLIC	??1CExtractScanConsole@@QAE@XZ			; CExtractScanConsole::~CExtractScanConsole
PUBLIC	?CloseScanning@CExtractScanConsole@@QAEXXZ	; CExtractScanConsole::CloseScanning
PUBLIC	??0CDirItemsStat@@QAE@XZ			; CDirItemsStat::CDirItemsStat
PUBLIC	?SetWindowWidth@CExtractScanConsole@@QAEXI@Z	; CExtractScanConsole::SetWindowWidth
PUBLIC	?Init@CExtractScanConsole@@QAEXPAVCStdOutStream@@00@Z ; CExtractScanConsole::Init
PUBLIC	??0CExtractScanConsole@@QAE@XZ			; CExtractScanConsole::CExtractScanConsole
PUBLIC	?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z ; CObjectVector<UString>::Add
PUBLIC	??BCStdOutStream@@QAEPAU_iobuf@@XZ		; CStdOutStream::operator _iobuf *
PUBLIC	??B?$CBuffer@E@@QBEPBEXZ			; CBuffer<unsigned char>::operator unsigned char const *
PUBLIC	?Size@?$CBuffer@E@@QBEIXZ			; CBuffer<unsigned char>::Size
PUBLIC	??A?$CObjectVector@V?$CBuffer@E@@@@QBEABV?$CBuffer@E@@I@Z ; CObjectVector<CBuffer<unsigned char> >::operator[]
PUBLIC	?Size@?$CObjectVector@V?$CBuffer@E@@@@QBEIXZ	; CObjectVector<CBuffer<unsigned char> >::Size
PUBLIC	??YUString@@QAEAAV0@_W@Z			; UString::operator+=
PUBLIC	?IsEmpty@UString@@QBE_NXZ			; UString::IsEmpty
PUBLIC	??A?$CObjectVector@UCArcExtInfo@@@@QBEABUCArcExtInfo@@I@Z ; CObjectVector<CArcExtInfo>::operator[]
PUBLIC	?Size@?$CObjectVector@UCArcExtInfo@@@@QBEIXZ	; CObjectVector<CArcExtInfo>::Size
PUBLIC	??6CStdOutStream@@QAEAAV0@D@Z			; CStdOutStream::operator<<
PUBLIC	??A?$CObjectVector@UCArcInfoEx@@@@QAEAAUCArcInfoEx@@I@Z ; CObjectVector<CArcInfoEx>::operator[]
PUBLIC	??6CStdOutStream@@QAEAAV0@PBD@Z			; CStdOutStream::operator<<
PUBLIC	??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z	; CStdOutStream::operator<<
PUBLIC	??1?$CRecordVector@H@@QAE@XZ			; CRecordVector<int>::~CRecordVector<int>
PUBLIC	?AddToUniqueSorted@?$CRecordVector@H@@QAEIH@Z	; CRecordVector<int>::AddToUniqueSorted
PUBLIC	??A?$CRecordVector@H@@QAEAAHI@Z			; CRecordVector<int>::operator[]
PUBLIC	?Size@?$CRecordVector@H@@QBEIXZ			; CRecordVector<int>::Size
PUBLIC	??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[]
PUBLIC	??0?$CRecordVector@H@@QAE@XZ			; CRecordVector<int>::CRecordVector<int>
PUBLIC	??0?$CObjectVector@UCOpenType@@@@QAE@XZ		; CObjectVector<COpenType>::CObjectVector<COpenType>
PUBLIC	__TI2CPAD
PUBLIC	?Size@?$CObjectVector@UCArcInfoEx@@@@QBEIXZ	; CObjectVector<CArcInfoEx>::Size
PUBLIC	??0?$CMyComPtr@UIUnknown@@@@QAE@PAUIUnknown@@@Z	; CMyComPtr<IUnknown>::CMyComPtr<IUnknown>
PUBLIC	??0CCodecs@@QAE@XZ				; CCodecs::CCodecs
PUBLIC	?EnablePrivilege_LockMemory@NSecurity@NWindows@@YG_N_N@Z ; NWindows::NSecurity::EnablePrivilege_LockMemory
PUBLIC	?EnablePrivilege_SymLink@NSecurity@NWindows@@YGXXZ ; NWindows::NSecurity::EnablePrivilege_SymLink
PUBLIC	??1CArcCmdLineOptions@@QAE@XZ			; CArcCmdLineOptions::~CArcCmdLineOptions
PUBLIC	??1CArcCmdLineParser@@QAE@XZ			; CArcCmdLineParser::~CArcCmdLineParser
PUBLIC	??0CArcCmdLineOptions@@QAE@XZ			; CArcCmdLineOptions::CArcCmdLineOptions
PUBLIC	?Delete@?$CObjectVector@VUString@@@@QAEXI@Z	; CObjectVector<UString>::Delete
PUBLIC	??1?$CObjectVector@VUString@@@@QAE@XZ		; CObjectVector<UString>::~CObjectVector<UString>
PUBLIC	?Size@?$CObjectVector@VUString@@@@QBEIXZ	; CObjectVector<UString>::Size
PUBLIC	??1UString@@QAE@XZ				; UString::~UString
PUBLIC	??0?$CObjectVector@VUString@@@@QAE@XZ		; CObjectVector<UString>::CObjectVector<UString>
PUBLIC	__$ArrayPad$
PUBLIC	?Main2@@YGHXZ					; Main2
PUBLIC	__CTA2PAD
PUBLIC	__CT??_R0PAD@84
PUBLIC	??_R0PAD@8					; char * `RTTI Type Descriptor'
PUBLIC	__CT??_R0PAX@84
PUBLIC	??_R0PAX@8					; void * `RTTI Type Descriptor'
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??4AString@@QAEAAV0@ABV0@@Z:PROC		; AString::operator=
EXTRN	?HashCalc@@YGJABVCCensor@NWildcard@@ABUCHashOptions@@AAVAString@@PAUIHashCallbackUI@@@Z:PROC ; HashCalc
EXTRN	??0AString@@QAE@XZ:PROC				; AString::AString
EXTRN	?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z:PROC ; UpdateArchive
EXTRN	??4UString@@QAEAAV0@PB_W@Z:PROC			; UString::operator=
EXTRN	?ListArchives@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@_NAAV?$CObjectVector@VUString@@@@433ABVCCensorNode@NWildcard@@33AA_NAAVUString@@PBV?$CObjectVector@UCProperty@@@@AA_K9@Z:PROC ; ListArchives
EXTRN	?PrintHashStat@@YGXAAVCStdOutStream@@ABUCHashBundle@@@Z:PROC ; PrintHashStat
EXTRN	??6CStdOutStream@@QAEAAV0@_K@Z:PROC		; CStdOutStream::operator<<
EXTRN	??6CStdOutStream@@QAEAAV0@PB_W@Z:PROC		; CStdOutStream::operator<<
EXTRN	?Extract@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@AAV?$CObjectVector@VUString@@@@3ABVCCensorNode@NWildcard@@ABUCExtractOptions@@PAUIOpenCallbackUI@@PAUIExtractCallbackUI@@PAUIHashCalc@@AAVUString@@AAUCDecompressStat@@@Z:PROC ; Extract
EXTRN	?SetMethods@CHashBundle@@QAEJABV?$CObjectVector@VUString@@@@@Z:PROC ; CHashBundle::SetMethods
EXTRN	??4UString@@QAEAAV0@ABV0@@Z:PROC		; UString::operator=
EXTRN	?PrintStat@CExtractScanConsole@@QAEXABUCDirItemsStat@@@Z:PROC ; CExtractScanConsole::PrintStat
EXTRN	?EnumerateDirItemsAndSort@@YGJAAVCCensor@NWildcard@@W4ECensorPathMode@2@ABVUString@@AAV?$CObjectVector@VUString@@@@3AAUCDirItemsStat@@PAUIDirItemsCallback@@@Z:PROC ; EnumerateDirItemsAndSort
EXTRN	?StartScanning@CExtractScanConsole@@QAEXXZ:PROC	; CExtractScanConsole::StartScanning
EXTRN	?BenchCon@@YGJABV?$CObjectVector@UCProperty@@@@IPAU_iobuf@@@Z:PROC ; BenchCon
EXTRN	?g_Hashers@@3PAPBUCHasherInfo@@A:BYTE		; g_Hashers
EXTRN	?g_NumHashers@@3IA:DWORD			; g_NumHashers
EXTRN	?g_Codecs@@3PAPBUCCodecInfo@@A:BYTE		; g_Codecs
EXTRN	?g_NumCodecs@@3IA:DWORD				; g_NumCodecs
EXTRN	??6CStdOutStream@@QAEAAV0@I@Z:PROC		; CStdOutStream::operator<<
EXTRN	??YUString@@QAEAAV0@PB_W@Z:PROC			; UString::operator+=
EXTRN	??YUString@@QAEAAV0@ABV0@@Z:PROC		; UString::operator+=
EXTRN	?Add_Space@UString@@QAEXXZ:PROC			; UString::Add_Space
EXTRN	??0UString@@QAE@XZ:PROC				; UString::UString
EXTRN	_strlen:PROC
EXTRN	?endl@@YGAAVCStdOutStream@@AAV1@@Z:PROC		; endl
EXTRN	?FindFormatForArchiveType@CCodecs@@QBE_NABVUString@@AAV?$CRecordVector@H@@@Z:PROC ; CCodecs::FindFormatForArchiveType
EXTRN	?ParseOpenTypes@@YG_NAAVCCodecs@@ABVUString@@AAV?$CObjectVector@UCOpenType@@@@@Z:PROC ; ParseOpenTypes
EXTRN	?IsFromUpdateGroup@CArcCommand@@QBE_NXZ:PROC	; CArcCommand::IsFromUpdateGroup
EXTRN	?IsFromExtractGroup@CArcCommand@@QBE_NXZ:PROC	; CArcCommand::IsFromExtractGroup
EXTRN	?Load@CCodecs@@QAEJXZ:PROC			; CCodecs::Load
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__imp__GetConsoleScreenBufferInfo@8:PROC
EXTRN	__imp__GetStdHandle@4:PROC
EXTRN	?Parse2@CArcCmdLineParser@@QAEXAAUCArcCmdLineOptions@@@Z:PROC ; CArcCmdLineParser::Parse2
EXTRN	_SetLargePageSize@0:PROC
EXTRN	?g_ErrStream@@3PAVCStdOutStream@@A:DWORD	; g_ErrStream
EXTRN	?g_StdOut@@3VCStdOutStream@@A:QWORD		; g_StdOut
EXTRN	?g_StdErr@@3VCStdOutStream@@A:QWORD		; g_StdErr
EXTRN	?Parse1@CArcCmdLineParser@@QAEXABV?$CObjectVector@VUString@@@@AAUCArcCmdLineOptions@@@Z:PROC ; CArcCmdLineParser::Parse1
EXTRN	??0CArcCmdLineParser@@QAE@XZ:PROC		; CArcCmdLineParser::CArcCmdLineParser
EXTRN	?g_StdStream@@3PAVCStdOutStream@@A:DWORD	; g_StdStream
EXTRN	?SplitCommandLine@NCommandLineParser@@YGXABVUString@@AAV?$CObjectVector@VUString@@@@@Z:PROC ; NCommandLineParser::SplitCommandLine
EXTRN	??0UString@@QAE@PB_W@Z:PROC			; UString::UString
EXTRN	__imp__GetCommandLineW@0:PROC
EXTRN	__imp__SetFileApisToOEM@0:PROC
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_R0PAX@8
; File c:\workspace\7z1505-src\cpp\7zip\ui\console\main.cpp
_DATA	SEGMENT
??_R0PAX@8 DD	FLAT:??_7type_info@@6B@			; void * `RTTI Type Descriptor'
	DD	00H
	DB	'.PAX', 00H
_DATA	ENDS
;	COMDAT __CT??_R0PAX@84
xdata$x	SEGMENT
__CT??_R0PAX@84 DD 01H
	DD	FLAT:??_R0PAX@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	00H
xdata$x	ENDS
;	COMDAT ??_R0PAD@8
_DATA	SEGMENT
??_R0PAD@8 DD	FLAT:??_7type_info@@6B@			; char * `RTTI Type Descriptor'
	DD	00H
	DB	'.PAD', 00H
_DATA	ENDS
;	COMDAT __CT??_R0PAD@84
xdata$x	SEGMENT
__CT??_R0PAD@84 DD 01H
	DD	FLAT:??_R0PAD@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	00H
xdata$x	ENDS
;	COMDAT __CTA2PAD
xdata$x	SEGMENT
__CTA2PAD DD	02H
	DD	FLAT:__CT??_R0PAD@84
	DD	FLAT:__CT??_R0PAX@84
xdata$x	ENDS
;	COMDAT __TI2CPAD
xdata$x	SEGMENT
__TI2CPAD DD	01H
	DD	00H
	DD	00H
	DD	FLAT:__CTA2PAD
xdata$x	ENDS
xdata$x	SEGMENT
__ehfuncinfo$?Main2@@YGHXZ DD 019930522H
	DD	019H
	DD	FLAT:__unwindtable$?Main2@@YGHXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Main2@@YGHXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Main2@@YGHXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Main2@@YGHXZ$1
	DD	00H
	DD	FLAT:__unwindfunclet$?Main2@@YGHXZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$?Main2@@YGHXZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$?Main2@@YGHXZ$4
	DD	03H
	DD	FLAT:__unwindfunclet$?Main2@@YGHXZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$?Main2@@YGHXZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$?Main2@@YGHXZ$7
	DD	07H
	DD	FLAT:__unwindfunclet$?Main2@@YGHXZ$8
	DD	07H
	DD	FLAT:__unwindfunclet$?Main2@@YGHXZ$9
	DD	07H
	DD	FLAT:__unwindfunclet$?Main2@@YGHXZ$10
	DD	0aH
	DD	FLAT:__unwindfunclet$?Main2@@YGHXZ$11
	DD	0bH
	DD	FLAT:__unwindfunclet$?Main2@@YGHXZ$12
	DD	0cH
	DD	FLAT:__unwindfunclet$?Main2@@YGHXZ$13
	DD	0bH
	DD	FLAT:__unwindfunclet$?Main2@@YGHXZ$14
	DD	0bH
	DD	FLAT:__unwindfunclet$?Main2@@YGHXZ$15
	DD	0fH
	DD	FLAT:__unwindfunclet$?Main2@@YGHXZ$16
	DD	010H
	DD	FLAT:__unwindfunclet$?Main2@@YGHXZ$17
	DD	011H
	DD	FLAT:__unwindfunclet$?Main2@@YGHXZ$18
	DD	07H
	DD	FLAT:__unwindfunclet$?Main2@@YGHXZ$19
	DD	013H
	DD	FLAT:__unwindfunclet$?Main2@@YGHXZ$20
	DD	014H
	DD	FLAT:__unwindfunclet$?Main2@@YGHXZ$21
	DD	07H
	DD	FLAT:__unwindfunclet$?Main2@@YGHXZ$22
	DD	016H
	DD	FLAT:__unwindfunclet$?Main2@@YGHXZ$23
	DD	017H
	DD	FLAT:__unwindfunclet$?Main2@@YGHXZ$24
xdata$x	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
tv1173 = -2524						; size = 4
tv1125 = -2520						; size = 4
tv1073 = -2516						; size = 4
tv1011 = -2512						; size = 4
tv1587 = -2508						; size = 4
tv1580 = -2504						; size = 4
tv1573 = -2500						; size = 4
tv1558 = -2496						; size = 4
tv1551 = -2492						; size = 4
tv1536 = -2488						; size = 4
tv1529 = -2484						; size = 4
tv1514 = -2480						; size = 4
tv1499 = -2476						; size = 4
tv1484 = -2472						; size = 4
tv1463 = -2468						; size = 4
tv699 = -2464						; size = 4
tv583 = -2460						; size = 4
tv1201 = -2456						; size = 4
tv530 = -2452						; size = 4
tv299 = -2445						; size = 1
tv163 = -2444						; size = 4
tv132 = -2440						; size = 4
tv130 = -2436						; size = 4
$T79276 = -2432						; size = 4
$T79263 = -2428						; size = 4
$T79262 = -2424						; size = 4
$T79261 = -2420						; size = 12
$T79258 = -2408						; size = 4
$T79257 = -2404						; size = 4
$T79255 = -2400						; size = 4
$T79252 = -2396						; size = 4
$T79251 = -2392						; size = 4
$T79250 = -2388						; size = 4
$T79247 = -2384						; size = 4
$T79244 = -2380						; size = 4
$T79243 = -2376						; size = 12
_errorInfo$77670 = -2360				; size = 28
_errorInfoString$77669 = -2324				; size = 12
_callback$77667 = -2304					; size = 312
_uo$77666 = -1988					; size = 4
_errorInfo$77663 = -1980				; size = 28
_callback$77661 = -1944					; size = 304
_passwordIsDefined$77660 = -1633			; size = 1
_openCallback$77659 = -1628				; size = 208
_uo$77657 = -1416					; size = 4
_numWarnings$77648 = -1408				; size = 8
_numErrors$77647 = -1392				; size = 8
_isError$77614 = -1377					; size = 1
_hashCalc$77603 = -1376					; size = 4
_hb$77602 = -1368					; size = 72
_stat$77601 = -1288					; size = 56
_errorMessage$77600 = -1224				; size = 12
_eo$77598 = -1204					; size = 52
_extractCallback$77596 = -1144				; size = 4
_ecs$77590 = -1136					; size = 4
_st$77581 = -1128					; size = 48
_scan$77578 = -1072					; size = 192
_ArchivePathsFullSorted$77575 = -872			; size = 12
_ArchivePathsSorted$77574 = -852			; size = 12
_codec$77562 = -836					; size = 4
_cod$77553 = -832					; size = 4
_b$77545 = -825						; size = 1
_j$77540 = -824						; size = 4
_sig$77539 = -820					; size = 4
_si$77533 = -816					; size = 4
_ext$77528 = -812					; size = 4
_t$77523 = -808						; size = 4
_s$77522 = -800						; size = 12
_b$77516 = -784						; size = 4
_arc$77513 = -780					; size = 4
_kNumArcFlags$77508 = -776				; size = 4
_kArcFlags$77506 = -772					; size = 4
_i$77504 = -768						; size = 4
_hresultMain$ = -764					; size = 4
_retCode$ = -760					; size = 4
_tempIndices$77496 = -752				; size = 12
_k$77492 = -736						; size = 4
_excludedFormats$ = -728				; size = 12
_types$ = -708						; size = 12
_isExtractGroupCommand$ = -689				; size = 1
___codecsRef$ = -684					; size = 4
_codecs$ = -676						; size = 4
_consoleInfo$77367 = -668				; size = 22
_consoleWidth$ = -640					; size = 4
_percentsNameLevel$ = -636				; size = 4
_so$ = -632						; size = 4
_percentsStream$ = -628					; size = 4
_parser$ = -620						; size = 44
_options$ = -568					; size = 528
_commandStrings$ = -32					; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?Main2@@YGHXZ PROC					; Main2
; Line 439
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Main2@@YGHXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 2512				; 000009d0H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-2524]
	mov	ecx, 628				; 00000274H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 441
	mov	esi, esp
	call	DWORD PTR __imp__SetFileApisToOEM@0
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 444
	lea	ecx, DWORD PTR _commandStrings$[ebp]
	call	??0?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::CObjectVector<UString>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 447
	mov	esi, esp
	call	DWORD PTR __imp__GetCommandLineW@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	lea	ecx, DWORD PTR $T79243[ebp]
	call	??0UString@@QAE@PB_W@Z			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	eax, DWORD PTR _commandStrings$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T79243[ebp]
	push	ecx
	call	?SplitCommandLine@NCommandLineParser@@YGXABVUString@@AAV?$CObjectVector@VUString@@@@@Z ; NCommandLineParser::SplitCommandLine
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T79243[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
; Line 452
	lea	ecx, DWORD PTR _commandStrings$[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	cmp	eax, 1
	jne	SHORT $LN103@Main2
; Line 454
	push	1
	mov	edx, DWORD PTR ?g_StdStream@@3PAVCStdOutStream@@A ; g_StdStream
	push	edx
	call	?ShowCopyrightAndHelp@@YGXPAVCStdOutStream@@_N@Z ; ShowCopyrightAndHelp
; Line 455
	mov	DWORD PTR $T79244[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _commandStrings$[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	eax, DWORD PTR $T79244[ebp]
	jmp	$LN105@Main2
$LN103@Main2:
; Line 458
	push	0
	lea	ecx, DWORD PTR _commandStrings$[ebp]
	call	?Delete@?$CObjectVector@VUString@@@@QAEXI@Z ; CObjectVector<UString>::Delete
; Line 460
	lea	ecx, DWORD PTR _options$[ebp]
	call	??0CArcCmdLineOptions@@QAE@XZ		; CArcCmdLineOptions::CArcCmdLineOptions
	mov	BYTE PTR __$EHRec$[ebp+8], 2
; Line 462
	lea	ecx, DWORD PTR _parser$[ebp]
	call	??0CArcCmdLineParser@@QAE@XZ		; CArcCmdLineParser::CArcCmdLineParser
	mov	BYTE PTR __$EHRec$[ebp+8], 3
; Line 464
	lea	eax, DWORD PTR _options$[ebp]
	push	eax
	lea	ecx, DWORD PTR _commandStrings$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _parser$[ebp]
	call	?Parse1@CArcCmdLineParser@@QAEXABV?$CObjectVector@VUString@@@@AAUCArcCmdLineOptions@@@Z ; CArcCmdLineParser::Parse1
; Line 467
	cmp	DWORD PTR _options$[ebp+508], 1
	je	SHORT $LN102@Main2
; Line 468
	xor	edx, edx
	cmp	DWORD PTR _options$[ebp+508], 2
	setne	dl
	sub	edx, 1
	and	edx, OFFSET ?g_StdErr@@3VCStdOutStream@@A ; g_StdErr
	mov	DWORD PTR ?g_StdStream@@3PAVCStdOutStream@@A, edx ; g_StdStream
$LN102@Main2:
; Line 470
	cmp	DWORD PTR _options$[ebp+512], 2
	je	SHORT $LN101@Main2
; Line 471
	mov	eax, DWORD PTR _options$[ebp+512]
	sub	eax, 1
	neg	eax
	sbb	eax, eax
	not	eax
	and	eax, OFFSET ?g_StdOut@@3VCStdOutStream@@A ; g_StdOut
	mov	DWORD PTR ?g_ErrStream@@3PAVCStdOutStream@@A, eax ; g_ErrStream
$LN101@Main2:
; Line 473
	mov	DWORD PTR _percentsStream$[ebp], 0
; Line 474
	cmp	DWORD PTR _options$[ebp+516], 0
	je	SHORT $LN100@Main2
; Line 475
	cmp	DWORD PTR _options$[ebp+516], 2
	jne	SHORT $LN106@Main2
	mov	DWORD PTR tv130[ebp], OFFSET ?g_StdErr@@3VCStdOutStream@@A ; g_StdErr
	jmp	SHORT $LN107@Main2
$LN106@Main2:
	mov	DWORD PTR tv130[ebp], OFFSET ?g_StdOut@@3VCStdOutStream@@A ; g_StdOut
$LN107@Main2:
	mov	ecx, DWORD PTR tv130[ebp]
	mov	DWORD PTR _percentsStream$[ebp], ecx
$LN100@Main2:
; Line 477
	cmp	DWORD PTR ?g_StdStream@@3PAVCStdOutStream@@A, 0 ; g_StdStream
	je	SHORT $LN108@Main2
	mov	edx, DWORD PTR ?g_StdStream@@3PAVCStdOutStream@@A ; g_StdStream
	mov	DWORD PTR tv132[ebp], edx
	jmp	SHORT $LN109@Main2
$LN108@Main2:
	mov	DWORD PTR tv132[ebp], OFFSET ?g_StdOut@@3VCStdOutStream@@A ; g_StdOut
$LN109@Main2:
	mov	eax, DWORD PTR tv132[ebp]
	mov	DWORD PTR $T79247[ebp], eax
	mov	ecx, DWORD PTR $T79247[ebp]
	mov	DWORD PTR _so$[ebp], ecx
; Line 480
	movzx	edx, BYTE PTR _options$[ebp]
	test	edx, edx
	je	SHORT $LN99@Main2
; Line 482
	push	1
	mov	eax, DWORD PTR ?g_StdStream@@3PAVCStdOutStream@@A ; g_StdStream
	push	eax
	call	?ShowCopyrightAndHelp@@YGXPAVCStdOutStream@@_N@Z ; ShowCopyrightAndHelp
; Line 483
	mov	DWORD PTR $T79250[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _parser$[ebp]
	call	??1CArcCmdLineParser@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _options$[ebp]
	call	??1CArcCmdLineOptions@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _commandStrings$[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	eax, DWORD PTR $T79250[ebp]
	jmp	$LN105@Main2
$LN99@Main2:
; Line 487
	call	?EnablePrivilege_SymLink@NSecurity@NWindows@@YGXXZ ; NWindows::NSecurity::EnablePrivilege_SymLink
; Line 491
	movzx	ecx, BYTE PTR _options$[ebp+1]
	test	ecx, ecx
	je	SHORT $LN98@Main2
; Line 493
	call	_SetLargePageSize@0
; Line 495
	push	1
	call	?EnablePrivilege_LockMemory@NSecurity@NWindows@@YG_N_N@Z ; NWindows::NSecurity::EnablePrivilege_LockMemory
$LN98@Main2:
; Line 500
	movzx	edx, BYTE PTR _options$[ebp+9]
	test	edx, edx
	je	SHORT $LN97@Main2
; Line 501
	push	0
	mov	eax, DWORD PTR ?g_StdStream@@3PAVCStdOutStream@@A ; g_StdStream
	push	eax
	call	?ShowCopyrightAndHelp@@YGXPAVCStdOutStream@@_N@Z ; ShowCopyrightAndHelp
$LN97@Main2:
; Line 503
	lea	ecx, DWORD PTR _options$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _parser$[ebp]
	call	?Parse2@CArcCmdLineParser@@QAEXAAUCArcCmdLineOptions@@@Z ; CArcCmdLineParser::Parse2
; Line 505
	mov	DWORD PTR _percentsNameLevel$[ebp], 1
; Line 506
	cmp	DWORD PTR _options$[ebp+520], 0
	je	SHORT $LN95@Main2
	mov	edx, DWORD PTR _options$[ebp+516]
	cmp	edx, DWORD PTR _options$[ebp+508]
	je	SHORT $LN96@Main2
$LN95@Main2:
; Line 507
	mov	DWORD PTR _percentsNameLevel$[ebp], 2
$LN96@Main2:
; Line 509
	mov	DWORD PTR _consoleWidth$[ebp], 80	; 00000050H
; Line 511
	cmp	DWORD PTR _percentsStream$[ebp], 0
	je	SHORT $LN94@Main2
; Line 517
	mov	esi, esp
	lea	eax, DWORD PTR _consoleInfo$77367[ebp]
	push	eax
	mov	edi, esp
	push	-11					; fffffff5H
	call	DWORD PTR __imp__GetStdHandle@4
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	DWORD PTR __imp__GetConsoleScreenBufferInfo@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN94@Main2
; Line 518
	movsx	ecx, WORD PTR _consoleInfo$77367[ebp]
	mov	DWORD PTR _consoleWidth$[ebp], ecx
$LN94@Main2:
; Line 530
	push	24					; 00000018H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T79252[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	cmp	DWORD PTR $T79252[ebp], 0
	je	SHORT $LN110@Main2
	mov	ecx, DWORD PTR $T79252[ebp]
	call	??0CCodecs@@QAE@XZ			; CCodecs::CCodecs
	mov	DWORD PTR tv163[ebp], eax
	jmp	SHORT $LN111@Main2
$LN110@Main2:
	mov	DWORD PTR tv163[ebp], 0
$LN111@Main2:
	mov	edx, DWORD PTR tv163[ebp]
	mov	DWORD PTR $T79251[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	eax, DWORD PTR $T79251[ebp]
	mov	DWORD PTR _codecs$[ebp], eax
	mov	ecx, DWORD PTR _codecs$[ebp]
	push	ecx
	lea	ecx, DWORD PTR ___codecsRef$[ebp]
	call	??0?$CMyComPtr@UIUnknown@@@@QAE@PAUIUnknown@@@Z ; CMyComPtr<IUnknown>::CMyComPtr<IUnknown>
	mov	BYTE PTR __$EHRec$[ebp+8], 5
; Line 532
	mov	edx, DWORD PTR _codecs$[ebp]
	mov	al, BYTE PTR _options$[ebp+2]
	mov	BYTE PTR [edx+20], al
; Line 533
	mov	ecx, DWORD PTR _codecs$[ebp]
	mov	dl, BYTE PTR _options$[ebp+3]
	mov	BYTE PTR [ecx+21], dl
; Line 534
	mov	ecx, DWORD PTR _codecs$[ebp]
	call	?Load@CCodecs@@QAEJXZ			; CCodecs::Load
	push	eax
	call	?ThrowException_if_Error@@YGXJ@Z	; ThrowException_if_Error
; Line 536
	lea	ecx, DWORD PTR _options$[ebp+36]
	call	?IsFromExtractGroup@CArcCommand@@QBE_NXZ ; CArcCommand::IsFromExtractGroup
	mov	BYTE PTR _isExtractGroupCommand$[ebp], al
; Line 541
	mov	ecx, DWORD PTR _codecs$[ebp]
	add	ecx, 8
	call	?Size@?$CObjectVector@UCArcInfoEx@@@@QBEIXZ ; CObjectVector<CArcInfoEx>::Size
	test	eax, eax
	jne	SHORT $LN92@Main2
	movzx	eax, BYTE PTR _isExtractGroupCommand$[ebp]
	test	eax, eax
	jne	SHORT $LN91@Main2
	cmp	DWORD PTR _options$[ebp+36], 6
	je	SHORT $LN91@Main2
	lea	ecx, DWORD PTR _options$[ebp+36]
	call	?IsFromUpdateGroup@CArcCommand@@QBE_NXZ	; CArcCommand::IsFromUpdateGroup
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN92@Main2
$LN91@Main2:
; Line 552
	mov	edx, DWORD PTR _kNoFormats
	mov	DWORD PTR $T79255[ebp], edx
	push	OFFSET __TI2CPAD
	lea	eax, DWORD PTR $T79255[ebp]
	push	eax
	call	__CxxThrowException@8
$LN92@Main2:
; Line 555
	lea	ecx, DWORD PTR _types$[ebp]
	call	??0?$CObjectVector@UCOpenType@@@@QAE@XZ	; CObjectVector<COpenType>::CObjectVector<COpenType>
	mov	BYTE PTR __$EHRec$[ebp+8], 6
; Line 556
	lea	ecx, DWORD PTR _types$[ebp]
	push	ecx
	lea	edx, DWORD PTR _options$[ebp+484]
	push	edx
	mov	eax, DWORD PTR _codecs$[ebp]
	push	eax
	call	?ParseOpenTypes@@YG_NAAVCCodecs@@ABVUString@@AAV?$CObjectVector@UCOpenType@@@@@Z ; ParseOpenTypes
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN90@Main2
; Line 557
	mov	edx, DWORD PTR _kUnsupportedArcTypeMessage
	mov	DWORD PTR $T79257[ebp], edx
	push	OFFSET __TI2CPAD
	lea	eax, DWORD PTR $T79257[ebp]
	push	eax
	call	__CxxThrowException@8
$LN90@Main2:
; Line 559
	lea	ecx, DWORD PTR _excludedFormats$[ebp]
	call	??0?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 7
; Line 560
	mov	DWORD PTR _k$77492[ebp], 0
	jmp	SHORT $LN89@Main2
$LN88@Main2:
	mov	ecx, DWORD PTR _k$77492[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$77492[ebp], ecx
$LN89@Main2:
	lea	ecx, DWORD PTR _options$[ebp+496]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	cmp	DWORD PTR _k$77492[ebp], eax
	jae	$LN87@Main2
; Line 562
	lea	ecx, DWORD PTR _tempIndices$77496[ebp]
	call	??0?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 8
; Line 564
	lea	edx, DWORD PTR _tempIndices$77496[ebp]
	push	edx
	mov	eax, DWORD PTR _k$77492[ebp]
	push	eax
	lea	ecx, DWORD PTR _options$[ebp+496]
	call	??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[]
	push	eax
	mov	ecx, DWORD PTR _codecs$[ebp]
	call	?FindFormatForArchiveType@CCodecs@@QBE_NABVUString@@AAV?$CRecordVector@H@@@Z ; CCodecs::FindFormatForArchiveType
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN85@Main2
	lea	ecx, DWORD PTR _tempIndices$77496[ebp]
	call	?Size@?$CRecordVector@H@@QBEIXZ		; CRecordVector<int>::Size
	cmp	eax, 1
	je	SHORT $LN86@Main2
$LN85@Main2:
; Line 565
	mov	edx, DWORD PTR _kUnsupportedArcTypeMessage
	mov	DWORD PTR $T79258[ebp], edx
	push	OFFSET __TI2CPAD
	lea	eax, DWORD PTR $T79258[ebp]
	push	eax
	call	__CxxThrowException@8
$LN86@Main2:
; Line 566
	push	0
	lea	ecx, DWORD PTR _tempIndices$77496[ebp]
	call	??A?$CRecordVector@H@@QAEAAHI@Z		; CRecordVector<int>::operator[]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR _excludedFormats$[ebp]
	call	?AddToUniqueSorted@?$CRecordVector@H@@QAEIH@Z ; CRecordVector<int>::AddToUniqueSorted
; Line 568
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _tempIndices$77496[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	jmp	$LN88@Main2
$LN87@Main2:
; Line 578
	mov	DWORD PTR _retCode$[ebp], 0
; Line 579
	mov	DWORD PTR _hresultMain$[ebp], 0
; Line 590
	cmp	DWORD PTR _options$[ebp+36], 8
	jne	$LN84@Main2
; Line 603
	push	OFFSET ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl
	push	OFFSET $SG77505
	push	OFFSET ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl
	mov	ecx, DWORD PTR _so$[ebp]
	call	??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@PBD@Z		; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<
; Line 605
	mov	DWORD PTR _kArcFlags$77506[ebp], OFFSET $SG77507
; Line 606
	mov	edx, DWORD PTR _kArcFlags$77506[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _kNumArcFlags$77508[ebp], eax
; Line 608
	mov	DWORD PTR _i$77504[ebp], 0
	jmp	SHORT $LN83@Main2
$LN82@Main2:
	mov	eax, DWORD PTR _i$77504[ebp]
	add	eax, 1
	mov	DWORD PTR _i$77504[ebp], eax
$LN83@Main2:
	mov	ecx, DWORD PTR _codecs$[ebp]
	add	ecx, 8
	call	?Size@?$CObjectVector@UCArcInfoEx@@@@QBEIXZ ; CObjectVector<CArcInfoEx>::Size
	cmp	DWORD PTR _i$77504[ebp], eax
	jae	$LN81@Main2
; Line 610
	mov	ecx, DWORD PTR _i$77504[ebp]
	push	ecx
	mov	ecx, DWORD PTR _codecs$[ebp]
	add	ecx, 8
	call	??A?$CObjectVector@UCArcInfoEx@@@@QAEAAUCArcInfoEx@@I@Z ; CObjectVector<CArcInfoEx>::operator[]
	mov	DWORD PTR _arc$77513[ebp], eax
; Line 615
	push	OFFSET $SG77514
	mov	ecx, DWORD PTR _so$[ebp]
	call	??6CStdOutStream@@QAEAAV0@PBD@Z		; CStdOutStream::operator<<
; Line 618
	mov	edx, DWORD PTR _arc$77513[ebp]
	movzx	eax, BYTE PTR [edx+40]
	neg	eax
	sbb	al, al
	and	al, 35					; 00000023H
	add	al, 32					; 00000020H
	movzx	ecx, al
	push	ecx
	mov	ecx, DWORD PTR _so$[ebp]
	call	??6CStdOutStream@@QAEAAV0@D@Z		; CStdOutStream::operator<<
; Line 620
	mov	DWORD PTR _b$77516[ebp], 0
	jmp	SHORT $LN80@Main2
$LN79@Main2:
	mov	edx, DWORD PTR _b$77516[ebp]
	add	edx, 1
	mov	DWORD PTR _b$77516[ebp], edx
$LN80@Main2:
	mov	eax, DWORD PTR _b$77516[ebp]
	cmp	eax, DWORD PTR _kNumArcFlags$77508[ebp]
	jae	SHORT $LN78@Main2
; Line 623
	mov	edx, 1
	mov	ecx, DWORD PTR _b$77516[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _arc$77513[ebp]
	and	edx, DWORD PTR [eax]
	je	SHORT $LN112@Main2
	mov	ecx, DWORD PTR _kArcFlags$77506[ebp]
	add	ecx, DWORD PTR _b$77516[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR tv299[ebp], dl
	jmp	SHORT $LN113@Main2
$LN112@Main2:
	mov	BYTE PTR tv299[ebp], 32			; 00000020H
$LN113@Main2:
	movzx	eax, BYTE PTR tv299[ebp]
	push	eax
	mov	ecx, DWORD PTR _so$[ebp]
	call	??6CStdOutStream@@QAEAAV0@D@Z		; CStdOutStream::operator<<
; Line 624
	jmp	SHORT $LN79@Main2
$LN78@Main2:
; Line 626
	push	32					; 00000020H
	mov	ecx, DWORD PTR _so$[ebp]
	call	??6CStdOutStream@@QAEAAV0@D@Z		; CStdOutStream::operator<<
; Line 627
	push	8
	mov	ecx, DWORD PTR _arc$77513[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	edx, DWORD PTR _so$[ebp]
	push	edx
	call	?PrintString@@YGXAAVCStdOutStream@@ABVUString@@I@Z ; PrintString
; Line 628
	push	32					; 00000020H
	mov	ecx, DWORD PTR _so$[ebp]
	call	??6CStdOutStream@@QAEAAV0@D@Z		; CStdOutStream::operator<<
; Line 629
	lea	ecx, DWORD PTR _s$77522[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 9
; Line 631
	mov	DWORD PTR _t$77523[ebp], 0
	jmp	SHORT $LN77@Main2
$LN76@Main2:
	mov	eax, DWORD PTR _t$77523[ebp]
	add	eax, 1
	mov	DWORD PTR _t$77523[ebp], eax
$LN77@Main2:
	mov	ecx, DWORD PTR _arc$77513[ebp]
	add	ecx, 24					; 00000018H
	call	?Size@?$CObjectVector@UCArcExtInfo@@@@QBEIXZ ; CObjectVector<CArcExtInfo>::Size
	cmp	DWORD PTR _t$77523[ebp], eax
	jae	$LN75@Main2
; Line 633
	cmp	DWORD PTR _t$77523[ebp], 0
	je	SHORT $LN74@Main2
; Line 634
	lea	ecx, DWORD PTR _s$77522[ebp]
	call	?Add_Space@UString@@QAEXXZ		; UString::Add_Space
$LN74@Main2:
; Line 635
	mov	ecx, DWORD PTR _t$77523[ebp]
	push	ecx
	mov	ecx, DWORD PTR _arc$77513[ebp]
	add	ecx, 24					; 00000018H
	call	??A?$CObjectVector@UCArcExtInfo@@@@QBEABUCArcExtInfo@@I@Z ; CObjectVector<CArcExtInfo>::operator[]
	mov	DWORD PTR _ext$77528[ebp], eax
; Line 636
	mov	edx, DWORD PTR _ext$77528[ebp]
	push	edx
	lea	ecx, DWORD PTR _s$77522[ebp]
	call	??YUString@@QAEAAV0@ABV0@@Z		; UString::operator+=
; Line 637
	mov	ecx, DWORD PTR _ext$77528[ebp]
	add	ecx, 12					; 0000000cH
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN73@Main2
; Line 639
	push	OFFSET $SG77530
	lea	ecx, DWORD PTR _s$77522[ebp]
	call	??YUString@@QAEAAV0@PB_W@Z		; UString::operator+=
; Line 640
	mov	ecx, DWORD PTR _ext$77528[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	lea	ecx, DWORD PTR _s$77522[ebp]
	call	??YUString@@QAEAAV0@ABV0@@Z		; UString::operator+=
; Line 641
	push	41					; 00000029H
	lea	ecx, DWORD PTR _s$77522[ebp]
	call	??YUString@@QAEAAV0@_W@Z		; UString::operator+=
$LN73@Main2:
; Line 643
	jmp	$LN76@Main2
$LN75@Main2:
; Line 645
	push	13					; 0000000dH
	lea	edx, DWORD PTR _s$77522[ebp]
	push	edx
	mov	eax, DWORD PTR _so$[ebp]
	push	eax
	call	?PrintString@@YGXAAVCStdOutStream@@ABVUString@@I@Z ; PrintString
; Line 646
	push	32					; 00000020H
	mov	ecx, DWORD PTR _so$[ebp]
	call	??6CStdOutStream@@QAEAAV0@D@Z		; CStdOutStream::operator<<
; Line 648
	mov	ecx, DWORD PTR _arc$77513[ebp]
	cmp	DWORD PTR [ecx+44], 0
	je	SHORT $LN72@Main2
; Line 649
	push	32					; 00000020H
	mov	edx, DWORD PTR _arc$77513[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	push	OFFSET $SG77532
	mov	ecx, DWORD PTR _so$[ebp]
	call	??6CStdOutStream@@QAEAAV0@PBD@Z		; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@I@Z		; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@D@Z		; CStdOutStream::operator<<
$LN72@Main2:
; Line 651
	mov	DWORD PTR _si$77533[ebp], 0
	jmp	SHORT $LN71@Main2
$LN70@Main2:
	mov	ecx, DWORD PTR _si$77533[ebp]
	add	ecx, 1
	mov	DWORD PTR _si$77533[ebp], ecx
$LN71@Main2:
	mov	ecx, DWORD PTR _arc$77513[ebp]
	add	ecx, 48					; 00000030H
	call	?Size@?$CObjectVector@V?$CBuffer@E@@@@QBEIXZ ; CObjectVector<CBuffer<unsigned char> >::Size
	cmp	DWORD PTR _si$77533[ebp], eax
	jae	$LN69@Main2
; Line 653
	cmp	DWORD PTR _si$77533[ebp], 0
	je	SHORT $LN68@Main2
; Line 654
	push	OFFSET $SG77538
	mov	ecx, DWORD PTR _so$[ebp]
	call	??6CStdOutStream@@QAEAAV0@PBD@Z		; CStdOutStream::operator<<
$LN68@Main2:
; Line 656
	mov	edx, DWORD PTR _si$77533[ebp]
	push	edx
	mov	ecx, DWORD PTR _arc$77513[ebp]
	add	ecx, 48					; 00000030H
	call	??A?$CObjectVector@V?$CBuffer@E@@@@QBEABV?$CBuffer@E@@I@Z ; CObjectVector<CBuffer<unsigned char> >::operator[]
	mov	DWORD PTR _sig$77539[ebp], eax
; Line 658
	mov	DWORD PTR _j$77540[ebp], 0
	jmp	SHORT $LN67@Main2
$LN66@Main2:
	mov	eax, DWORD PTR _j$77540[ebp]
	add	eax, 1
	mov	DWORD PTR _j$77540[ebp], eax
$LN67@Main2:
	mov	ecx, DWORD PTR _sig$77539[ebp]
	call	?Size@?$CBuffer@E@@QBEIXZ		; CBuffer<unsigned char>::Size
	cmp	DWORD PTR _j$77540[ebp], eax
	jae	$LN65@Main2
; Line 660
	cmp	DWORD PTR _j$77540[ebp], 0
	je	SHORT $LN64@Main2
; Line 661
	push	32					; 00000020H
	mov	ecx, DWORD PTR _so$[ebp]
	call	??6CStdOutStream@@QAEAAV0@D@Z		; CStdOutStream::operator<<
$LN64@Main2:
; Line 662
	mov	ecx, DWORD PTR _sig$77539[ebp]
	call	??B?$CBuffer@E@@QBEPBEXZ		; CBuffer<unsigned char>::operator unsigned char const *
	mov	ecx, DWORD PTR _j$77540[ebp]
	mov	dl, BYTE PTR [eax+ecx]
	mov	BYTE PTR _b$77545[ebp], dl
; Line 663
	movzx	eax, BYTE PTR _b$77545[ebp]
	cmp	eax, 32					; 00000020H
	jle	SHORT $LN63@Main2
	movzx	ecx, BYTE PTR _b$77545[ebp]
	cmp	ecx, 128				; 00000080H
	jge	SHORT $LN63@Main2
; Line 665
	movzx	edx, BYTE PTR _b$77545[ebp]
	push	edx
	mov	ecx, DWORD PTR _so$[ebp]
	call	??6CStdOutStream@@QAEAAV0@D@Z		; CStdOutStream::operator<<
; Line 667
	jmp	SHORT $LN62@Main2
$LN63@Main2:
; Line 669
	movzx	eax, BYTE PTR _b$77545[ebp]
	sar	eax, 4
	and	eax, 15					; 0000000fH
	push	eax
	call	?GetHex@@YGDI@Z				; GetHex
	movzx	ecx, al
	push	ecx
	mov	ecx, DWORD PTR _so$[ebp]
	call	??6CStdOutStream@@QAEAAV0@D@Z		; CStdOutStream::operator<<
; Line 670
	movzx	edx, BYTE PTR _b$77545[ebp]
	and	edx, 15					; 0000000fH
	push	edx
	call	?GetHex@@YGDI@Z				; GetHex
	movzx	eax, al
	push	eax
	mov	ecx, DWORD PTR _so$[ebp]
	call	??6CStdOutStream@@QAEAAV0@D@Z		; CStdOutStream::operator<<
$LN62@Main2:
; Line 672
	jmp	$LN66@Main2
$LN65@Main2:
; Line 673
	jmp	$LN70@Main2
$LN69@Main2:
; Line 674
	push	OFFSET ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl
	mov	ecx, DWORD PTR _so$[ebp]
	call	??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<
; Line 675
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _s$77522[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	jmp	$LN82@Main2
$LN81@Main2:
; Line 677
	push	OFFSET ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl
	push	OFFSET $SG77549
	push	OFFSET ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl
	mov	ecx, DWORD PTR _so$[ebp]
	call	??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@PBD@Z		; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<
; Line 679
	mov	DWORD PTR _i$77504[ebp], 0
	jmp	SHORT $LN61@Main2
$LN60@Main2:
	mov	ecx, DWORD PTR _i$77504[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$77504[ebp], ecx
$LN61@Main2:
	mov	edx, DWORD PTR _i$77504[ebp]
	cmp	edx, DWORD PTR ?g_NumCodecs@@3IA	; g_NumCodecs
	jae	$LN59@Main2
; Line 681
	mov	eax, DWORD PTR _i$77504[ebp]
	mov	ecx, DWORD PTR ?g_Codecs@@3PAPBUCCodecInfo@@A[eax*4]
	mov	DWORD PTR _cod$77553[ebp], ecx
; Line 683
	push	-1
	mov	edx, DWORD PTR _so$[ebp]
	push	edx
	call	?PrintLibIndex@@YGXAAVCStdOutStream@@H@Z ; PrintLibIndex
; Line 685
	mov	eax, DWORD PTR _cod$77553[ebp]
	cmp	DWORD PTR [eax+20], 1
	jne	SHORT $LN58@Main2
; Line 686
	push	32					; 00000020H
	mov	ecx, DWORD PTR _so$[ebp]
	call	??6CStdOutStream@@QAEAAV0@D@Z		; CStdOutStream::operator<<
; Line 687
	jmp	SHORT $LN57@Main2
$LN58@Main2:
; Line 688
	mov	ecx, DWORD PTR _cod$77553[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	ecx, DWORD PTR _so$[ebp]
	call	??6CStdOutStream@@QAEAAV0@I@Z		; CStdOutStream::operator<<
$LN57@Main2:
; Line 690
	mov	eax, DWORD PTR _cod$77553[ebp]
	mov	ecx, DWORD PTR [eax+4]
	neg	ecx
	sbb	cl, cl
	and	cl, 37					; 00000025H
	add	cl, 32					; 00000020H
	movzx	edx, cl
	push	edx
	mov	ecx, DWORD PTR _so$[ebp]
	call	??6CStdOutStream@@QAEAAV0@D@Z		; CStdOutStream::operator<<
; Line 691
	mov	eax, DWORD PTR _cod$77553[ebp]
	mov	ecx, DWORD PTR [eax]
	neg	ecx
	sbb	cl, cl
	and	cl, 36					; 00000024H
	add	cl, 32					; 00000020H
	movzx	edx, cl
	push	edx
	mov	ecx, DWORD PTR _so$[ebp]
	call	??6CStdOutStream@@QAEAAV0@D@Z		; CStdOutStream::operator<<
; Line 693
	push	32					; 00000020H
	mov	ecx, DWORD PTR _so$[ebp]
	call	??6CStdOutStream@@QAEAAV0@D@Z		; CStdOutStream::operator<<
; Line 694
	mov	eax, DWORD PTR _cod$77553[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	push	edx
	mov	eax, DWORD PTR _so$[ebp]
	push	eax
	call	?PrintHexId@@YGXAAVCStdOutStream@@_K@Z	; PrintHexId
; Line 695
	push	OFFSET ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl
	mov	ecx, DWORD PTR _cod$77553[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	push	32					; 00000020H
	mov	ecx, DWORD PTR _so$[ebp]
	call	??6CStdOutStream@@QAEAAV0@D@Z		; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@PBD@Z		; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<
; Line 696
	jmp	$LN60@Main2
$LN59@Main2:
; Line 728
	push	OFFSET ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl
	push	OFFSET $SG77558
	push	OFFSET ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl
	mov	ecx, DWORD PTR _so$[ebp]
	call	??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@PBD@Z		; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<
; Line 730
	mov	DWORD PTR _i$77504[ebp], 0
	jmp	SHORT $LN56@Main2
$LN55@Main2:
	mov	eax, DWORD PTR _i$77504[ebp]
	add	eax, 1
	mov	DWORD PTR _i$77504[ebp], eax
$LN56@Main2:
	mov	ecx, DWORD PTR _i$77504[ebp]
	cmp	ecx, DWORD PTR ?g_NumHashers@@3IA	; g_NumHashers
	jae	$LN54@Main2
; Line 732
	mov	edx, DWORD PTR _i$77504[ebp]
	mov	eax, DWORD PTR ?g_Hashers@@3PAPBUCHasherInfo@@A[edx*4]
	mov	DWORD PTR _codec$77562[ebp], eax
; Line 733
	push	-1
	mov	ecx, DWORD PTR _so$[ebp]
	push	ecx
	call	?PrintLibIndex@@YGXAAVCStdOutStream@@H@Z ; PrintLibIndex
; Line 734
	push	4
	mov	edx, DWORD PTR _codec$77562[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR _so$[ebp]
	push	ecx
	call	?PrintUInt32@@YGXAAVCStdOutStream@@II@Z	; PrintUInt32
; Line 735
	push	32					; 00000020H
	mov	ecx, DWORD PTR _so$[ebp]
	call	??6CStdOutStream@@QAEAAV0@D@Z		; CStdOutStream::operator<<
; Line 736
	mov	edx, DWORD PTR _codec$77562[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR [edx+8]
	push	ecx
	mov	edx, DWORD PTR _so$[ebp]
	push	edx
	call	?PrintHexId@@YGXAAVCStdOutStream@@_K@Z	; PrintHexId
; Line 737
	push	OFFSET ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl
	mov	eax, DWORD PTR _codec$77562[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	push	32					; 00000020H
	mov	ecx, DWORD PTR _so$[ebp]
	call	??6CStdOutStream@@QAEAAV0@D@Z		; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@PBD@Z		; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<
; Line 738
	jmp	$LN55@Main2
$LN54@Main2:
; Line 755
	jmp	$LN53@Main2
$LN84@Main2:
	cmp	DWORD PTR _options$[ebp+36], 7
	jne	SHORT $LN52@Main2
; Line 758
	mov	ecx, DWORD PTR _so$[ebp]
	call	??BCStdOutStream@@QAEPAU_iobuf@@XZ	; CStdOutStream::operator _iobuf *
	push	eax
	mov	edx, DWORD PTR _options$[ebp+524]
	push	edx
	lea	eax, DWORD PTR _options$[ebp+124]
	push	eax
	call	?BenchCon@@YGJABV?$CObjectVector@UCProperty@@@@IPAU_iobuf@@@Z ; BenchCon
	mov	DWORD PTR _hresultMain$[ebp], eax
; Line 759
	cmp	DWORD PTR _hresultMain$[ebp], 1
	jne	SHORT $LN51@Main2
; Line 761
	cmp	DWORD PTR ?g_ErrStream@@3PAVCStdOutStream@@A, 0 ; g_ErrStream
	je	SHORT $LN50@Main2
; Line 762
	push	OFFSET $SG77569
	mov	ecx, DWORD PTR ?g_ErrStream@@3PAVCStdOutStream@@A ; g_ErrStream
	call	??6CStdOutStream@@QAEAAV0@PBD@Z		; CStdOutStream::operator<<
$LN50@Main2:
; Line 763
	mov	DWORD PTR _retCode$[ebp], 2
; Line 764
	mov	DWORD PTR _hresultMain$[ebp], 0
$LN51@Main2:
; Line 766
	jmp	$LN53@Main2
$LN52@Main2:
; Line 767
	movzx	ecx, BYTE PTR _isExtractGroupCommand$[ebp]
	test	ecx, ecx
	jne	SHORT $LN47@Main2
	cmp	DWORD PTR _options$[ebp+36], 6
	jne	$LN48@Main2
$LN47@Main2:
; Line 769
	lea	ecx, DWORD PTR _ArchivePathsSorted$77574[ebp]
	call	??0?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::CObjectVector<UString>
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
; Line 770
	lea	ecx, DWORD PTR _ArchivePathsFullSorted$77575[ebp]
	call	??0?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::CObjectVector<UString>
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
; Line 772
	movzx	edx, BYTE PTR _options$[ebp+7]
	test	edx, edx
	je	SHORT $LN46@Main2
; Line 774
	lea	eax, DWORD PTR _options$[ebp+112]
	push	eax
	lea	ecx, DWORD PTR _ArchivePathsSorted$77574[ebp]
	call	?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z ; CObjectVector<UString>::Add
; Line 775
	lea	ecx, DWORD PTR _options$[ebp+112]
	push	ecx
	lea	ecx, DWORD PTR _ArchivePathsFullSorted$77575[ebp]
	call	?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z ; CObjectVector<UString>::Add
; Line 777
	jmp	$LN45@Main2
$LN46@Main2:
; Line 779
	lea	ecx, DWORD PTR _scan$77578[ebp]
	call	??0CExtractScanConsole@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
; Line 781
	mov	edx, DWORD PTR _percentsStream$[ebp]
	push	edx
	mov	eax, DWORD PTR ?g_ErrStream@@3PAVCStdOutStream@@A ; g_ErrStream
	push	eax
	movzx	ecx, BYTE PTR _options$[ebp+9]
	neg	ecx
	sbb	ecx, ecx
	and	ecx, DWORD PTR ?g_StdStream@@3PAVCStdOutStream@@A ; g_StdStream
	push	ecx
	lea	ecx, DWORD PTR _scan$77578[ebp]
	call	?Init@CExtractScanConsole@@QAEXPAVCStdOutStream@@00@Z ; CExtractScanConsole::Init
; Line 782
	mov	edx, DWORD PTR _consoleWidth$[ebp]
	push	edx
	lea	ecx, DWORD PTR _scan$77578[ebp]
	call	?SetWindowWidth@CExtractScanConsole@@QAEXI@Z ; CExtractScanConsole::SetWindowWidth
; Line 784
	cmp	DWORD PTR ?g_StdStream@@3PAVCStdOutStream@@A, 0 ; g_StdStream
	je	SHORT $LN44@Main2
	movzx	eax, BYTE PTR _options$[ebp+9]
	test	eax, eax
	je	SHORT $LN44@Main2
; Line 785
	push	OFFSET ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl
	push	OFFSET $SG77580
	mov	ecx, DWORD PTR ?g_StdStream@@3PAVCStdOutStream@@A ; g_StdStream
	call	??6CStdOutStream@@QAEAAV0@PBD@Z		; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<
$LN44@Main2:
; Line 787
	lea	ecx, DWORD PTR _st$77581[ebp]
	call	??0CDirItemsStat@@QAE@XZ		; CDirItemsStat::CDirItemsStat
; Line 789
	lea	ecx, DWORD PTR _scan$77578[ebp]
	call	?StartScanning@CExtractScanConsole@@QAEXXZ ; CExtractScanConsole::StartScanning
; Line 798
	lea	ecx, DWORD PTR _scan$77578[ebp]
	push	ecx
	lea	edx, DWORD PTR _st$77581[ebp]
	push	edx
	lea	eax, DWORD PTR _ArchivePathsFullSorted$77575[ebp]
	push	eax
	lea	ecx, DWORD PTR _ArchivePathsSorted$77574[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T79261[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR tv530[ebp], eax
	mov	edx, DWORD PTR tv530[ebp]
	mov	DWORD PTR tv1201[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH
	mov	eax, DWORD PTR tv1201[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _options$[ebp+88]
	push	ecx
	call	?EnumerateDirItemsAndSort@@YGJAAVCCensor@NWildcard@@W4ECensorPathMode@2@ABVUString@@AAV?$CObjectVector@VUString@@@@3AAUCDirItemsStat@@PAUIDirItemsCallback@@@Z ; EnumerateDirItemsAndSort
	mov	DWORD PTR _hresultMain$[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR $T79261[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
; Line 800
	lea	ecx, DWORD PTR _scan$77578[ebp]
	call	?CloseScanning@CExtractScanConsole@@QAEXXZ ; CExtractScanConsole::CloseScanning
; Line 802
	cmp	DWORD PTR _hresultMain$[ebp], 0
	jne	SHORT $LN41@Main2
; Line 804
	movzx	edx, BYTE PTR _options$[ebp+9]
	test	edx, edx
	je	SHORT $LN41@Main2
; Line 805
	lea	eax, DWORD PTR _st$77581[ebp]
	push	eax
	lea	ecx, DWORD PTR _scan$77578[ebp]
	call	?PrintStat@CExtractScanConsole@@QAEXABUCDirItemsStat@@@Z ; CExtractScanConsole::PrintStat
$LN41@Main2:
; Line 818
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _scan$77578[ebp]
	call	??1CExtractScanConsole@@QAE@XZ
$LN45@Main2:
; Line 820
	cmp	DWORD PTR _hresultMain$[ebp], 0
	jne	$LN40@Main2
; Line 821
	movzx	ecx, BYTE PTR _isExtractGroupCommand$[ebp]
	test	ecx, ecx
	je	$LN39@Main2
; Line 823
	push	360					; 00000168H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T79263[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 14		; 0000000eH
	cmp	DWORD PTR $T79263[ebp], 0
	je	SHORT $LN114@Main2
	mov	ecx, DWORD PTR $T79263[ebp]
	call	??0CExtractCallbackConsole@@QAE@XZ	; CExtractCallbackConsole::CExtractCallbackConsole
	mov	DWORD PTR tv583[ebp], eax
	jmp	SHORT $LN115@Main2
$LN114@Main2:
	mov	DWORD PTR tv583[ebp], 0
$LN115@Main2:
	mov	edx, DWORD PTR tv583[ebp]
	mov	DWORD PTR $T79262[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	mov	eax, DWORD PTR $T79262[ebp]
	mov	DWORD PTR _ecs$77590[ebp], eax
; Line 824
	mov	ecx, DWORD PTR _ecs$77590[ebp]
	push	ecx
	lea	ecx, DWORD PTR _extractCallback$77596[ebp]
	call	??0?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QAE@PAUIFolderArchiveExtractCallback@@@Z ; CMyComPtr<IFolderArchiveExtractCallback>::CMyComPtr<IFolderArchiveExtractCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 15		; 0000000fH
; Line 827
	mov	edx, DWORD PTR _ecs$77590[ebp]
	mov	al, BYTE PTR _options$[ebp+52]
	mov	BYTE PTR [edx+211], al
; Line 828
	lea	ecx, DWORD PTR _options$[ebp+56]
	push	ecx
	mov	ecx, DWORD PTR _ecs$77590[ebp]
	add	ecx, 212				; 000000d4H
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
; Line 831
	mov	edx, DWORD PTR _percentsStream$[ebp]
	push	edx
	mov	eax, DWORD PTR ?g_ErrStream@@3PAVCStdOutStream@@A ; g_ErrStream
	push	eax
	mov	ecx, DWORD PTR ?g_StdStream@@3PAVCStdOutStream@@A ; g_StdStream
	push	ecx
	mov	ecx, DWORD PTR _ecs$77590[ebp]
	call	?Init@CExtractCallbackConsole@@QAEXPAVCStdOutStream@@00@Z ; CExtractCallbackConsole::Init
; Line 832
	lea	ecx, DWORD PTR _ArchivePathsSorted$77574[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	mov	edx, 1
	cmp	edx, eax
	sbb	eax, eax
	neg	eax
	mov	ecx, DWORD PTR _ecs$77590[ebp]
	mov	BYTE PTR [ecx+210], al
; Line 834
	mov	edx, DWORD PTR _ecs$77590[ebp]
	mov	eax, DWORD PTR _options$[ebp+520]
	mov	DWORD PTR [edx+352], eax
; Line 835
	mov	ecx, DWORD PTR _ecs$77590[ebp]
	mov	edx, DWORD PTR _percentsNameLevel$[ebp]
	mov	DWORD PTR [ecx+348], edx
; Line 837
	cmp	DWORD PTR _percentsStream$[ebp], 0
	je	SHORT $LN38@Main2
; Line 838
	mov	eax, DWORD PTR _consoleWidth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ecs$77590[ebp]
	call	?SetWindowWidth@CExtractCallbackConsole@@QAEXI@Z ; CExtractCallbackConsole::SetWindowWidth
$LN38@Main2:
; Line 850
	lea	ecx, DWORD PTR _eo$77598[ebp]
	call	??0CExtractOptions@@QAE@XZ		; CExtractOptions::CExtractOptions
	mov	BYTE PTR __$EHRec$[ebp+8], 16		; 00000010H
; Line 851
	lea	ecx, DWORD PTR _options$[ebp+136]
	push	ecx
	lea	ecx, DWORD PTR _eo$77598[ebp]
	call	??4CExtractOptionsBase@@QAEAAU0@ABU0@@Z
; Line 853
	mov	dl, BYTE PTR _options$[ebp+7]
	mov	BYTE PTR _eo$77598[ebp+36], dl
; Line 854
	mov	al, BYTE PTR _options$[ebp+8]
	mov	BYTE PTR _eo$77598[ebp+37], al
; Line 855
	mov	cl, BYTE PTR _options$[ebp+10]
	mov	BYTE PTR _eo$77598[ebp+38], cl
; Line 856
	lea	ecx, DWORD PTR _options$[ebp+36]
	call	?IsTestCommand@CArcCommand@@QBE_NXZ	; CArcCommand::IsTestCommand
	mov	BYTE PTR _eo$77598[ebp+39], al
; Line 859
	lea	edx, DWORD PTR _options$[ebp+124]
	push	edx
	lea	ecx, DWORD PTR _eo$77598[ebp+40]
	call	??4?$CObjectVector@UCProperty@@@@QAEAAV0@ABV0@@Z ; CObjectVector<CProperty>::operator=
; Line 862
	lea	ecx, DWORD PTR _errorMessage$77600[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
; Line 864
	lea	ecx, DWORD PTR _hb$77602[ebp]
	call	??0CHashBundle@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
; Line 865
	mov	DWORD PTR _hashCalc$77603[ebp], 0
; Line 867
	lea	ecx, DWORD PTR _options$[ebp+72]
	call	?IsEmpty@?$CObjectVector@VUString@@@@QBE_NXZ ; CObjectVector<UString>::IsEmpty
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN37@Main2
; Line 869
	lea	ecx, DWORD PTR _hb$77602[ebp]
	mov	DWORD PTR _hashCalc$77603[ebp], ecx
; Line 870
	lea	edx, DWORD PTR _options$[ebp+72]
	push	edx
	lea	ecx, DWORD PTR _hb$77602[ebp]
	call	?SetMethods@CHashBundle@@QAEJABV?$CObjectVector@VUString@@@@@Z ; CHashBundle::SetMethods
	push	eax
	call	?ThrowException_if_Error@@YGXJ@Z	; ThrowException_if_Error
; Line 871
	lea	ecx, DWORD PTR _hb$77602[ebp]
	call	?Init@CHashBundle@@QAEXXZ		; CHashBundle::Init
$LN37@Main2:
; Line 881
	cmp	DWORD PTR _ecs$77590[ebp], 0
	je	SHORT $LN116@Main2
	mov	eax, DWORD PTR _ecs$77590[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR tv699[ebp], eax
	jmp	SHORT $LN117@Main2
$LN116@Main2:
	mov	DWORD PTR tv699[ebp], 0
$LN117@Main2:
	lea	ecx, DWORD PTR _stat$77601[ebp]
	push	ecx
	lea	edx, DWORD PTR _errorMessage$77600[ebp]
	push	edx
	mov	eax, DWORD PTR _hashCalc$77603[ebp]
	push	eax
	mov	ecx, DWORD PTR _ecs$77590[ebp]
	push	ecx
	mov	edx, DWORD PTR tv699[ebp]
	push	edx
	lea	eax, DWORD PTR _eo$77598[ebp]
	push	eax
	lea	ecx, DWORD PTR _options$[ebp+12]
	call	?Front@?$CObjectVector@UCPair@NWildcard@@@@QAEAAUCPair@NWildcard@@XZ ; CObjectVector<NWildcard::CPair>::Front
	add	eax, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _ArchivePathsFullSorted$77575[ebp]
	push	ecx
	lea	edx, DWORD PTR _ArchivePathsSorted$77574[ebp]
	push	edx
	lea	eax, DWORD PTR _excludedFormats$[ebp]
	push	eax
	lea	ecx, DWORD PTR _types$[ebp]
	push	ecx
	mov	edx, DWORD PTR _codecs$[ebp]
	push	edx
	call	?Extract@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@AAV?$CObjectVector@VUString@@@@3ABVCCensorNode@NWildcard@@ABUCExtractOptions@@PAUIOpenCallbackUI@@PAUIExtractCallbackUI@@PAUIHashCalc@@AAVUString@@AAUCDecompressStat@@@Z ; Extract
	mov	DWORD PTR _hresultMain$[ebp], eax
; Line 883
	mov	ecx, DWORD PTR _ecs$77590[ebp]
	add	ecx, 16					; 00000010H
	call	?ClosePercents@COpenCallbackConsole@@QAEXXZ ; COpenCallbackConsole::ClosePercents
; Line 885
	lea	ecx, DWORD PTR _errorMessage$77600[ebp]
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN36@Main2
; Line 887
	cmp	DWORD PTR ?g_ErrStream@@3PAVCStdOutStream@@A, 0 ; g_ErrStream
	je	SHORT $LN35@Main2
; Line 888
	push	OFFSET ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl
	lea	ecx, DWORD PTR _errorMessage$77600[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	push	OFFSET ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl
	push	OFFSET $SG77607
	push	OFFSET ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl
	mov	ecx, DWORD PTR ?g_ErrStream@@3PAVCStdOutStream@@A ; g_ErrStream
	call	??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@PBD@Z		; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@PB_W@Z	; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<
$LN35@Main2:
; Line 889
	cmp	DWORD PTR _hresultMain$[ebp], 0
	jne	SHORT $LN36@Main2
; Line 890
	mov	DWORD PTR _hresultMain$[ebp], -2147467259 ; 80004005H
$LN36@Main2:
; Line 893
	push	OFFSET ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl
	mov	ecx, DWORD PTR _so$[ebp]
	call	??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<
; Line 895
	mov	ecx, DWORD PTR _ecs$77590[ebp]
	mov	DWORD PTR tv1463[ebp], ecx
	mov	edx, DWORD PTR tv1463[ebp]
	cmp	DWORD PTR [edx+268], 0
	ja	SHORT $LN151@Main2
	mov	eax, DWORD PTR tv1463[ebp]
	cmp	DWORD PTR [eax+264], 1
	jbe	SHORT $LN33@Main2
$LN151@Main2:
; Line 897
	push	OFFSET ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl
	mov	ecx, DWORD PTR _ecs$77590[ebp]
	mov	edx, DWORD PTR [ecx+268]
	push	edx
	mov	eax, DWORD PTR [ecx+264]
	push	eax
	push	OFFSET $SG77612
	mov	ecx, DWORD PTR _so$[ebp]
	call	??6CStdOutStream@@QAEAAV0@PBD@Z		; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@_K@Z		; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<
; Line 898
	push	OFFSET ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl
	mov	ecx, DWORD PTR _ecs$77590[ebp]
	mov	edx, DWORD PTR [ecx+284]
	push	edx
	mov	eax, DWORD PTR [ecx+280]
	push	eax
	push	OFFSET $SG77613
	mov	ecx, DWORD PTR _so$[ebp]
	call	??6CStdOutStream@@QAEAAV0@PBD@Z		; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@_K@Z		; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<
$LN33@Main2:
; Line 900
	mov	BYTE PTR _isError$77614[ebp], 0
; Line 901
	mov	ecx, DWORD PTR _ecs$77590[ebp]
	mov	DWORD PTR tv1484[ebp], ecx
	mov	edx, DWORD PTR tv1484[ebp]
	mov	eax, DWORD PTR tv1484[ebp]
	mov	ecx, DWORD PTR [edx+288]
	or	ecx, DWORD PTR [eax+292]
	je	SHORT $LN32@Main2
; Line 903
	mov	BYTE PTR _isError$77614[ebp], 1
; Line 904
	push	OFFSET ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl
	mov	edx, DWORD PTR _ecs$77590[ebp]
	mov	eax, DWORD PTR [edx+292]
	push	eax
	mov	ecx, DWORD PTR [edx+288]
	push	ecx
	push	OFFSET $SG77616
	mov	ecx, DWORD PTR _so$[ebp]
	call	??6CStdOutStream@@QAEAAV0@PBD@Z		; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@_K@Z		; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<
$LN32@Main2:
; Line 906
	mov	edx, DWORD PTR _ecs$77590[ebp]
	mov	DWORD PTR tv1499[ebp], edx
	mov	eax, DWORD PTR tv1499[ebp]
	mov	ecx, DWORD PTR tv1499[ebp]
	mov	edx, DWORD PTR [eax+296]
	or	edx, DWORD PTR [ecx+300]
	je	SHORT $LN31@Main2
; Line 908
	mov	BYTE PTR _isError$77614[ebp], 1
; Line 909
	push	OFFSET ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl
	mov	eax, DWORD PTR _ecs$77590[ebp]
	mov	ecx, DWORD PTR [eax+300]
	push	ecx
	mov	edx, DWORD PTR [eax+296]
	push	edx
	push	OFFSET $SG77618
	mov	ecx, DWORD PTR _so$[ebp]
	call	??6CStdOutStream@@QAEAAV0@PBD@Z		; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@_K@Z		; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<
$LN31@Main2:
; Line 911
	mov	eax, DWORD PTR _ecs$77590[ebp]
	mov	DWORD PTR tv1514[ebp], eax
	mov	ecx, DWORD PTR tv1514[ebp]
	mov	edx, DWORD PTR tv1514[ebp]
	mov	eax, DWORD PTR [ecx+304]
	or	eax, DWORD PTR [edx+308]
	je	SHORT $LN30@Main2
; Line 912
	push	OFFSET ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl
	mov	ecx, DWORD PTR _ecs$77590[ebp]
	mov	edx, DWORD PTR [ecx+308]
	push	edx
	mov	eax, DWORD PTR [ecx+304]
	push	eax
	push	OFFSET $SG77620
	mov	ecx, DWORD PTR _so$[ebp]
	call	??6CStdOutStream@@QAEAAV0@PBD@Z		; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@_K@Z		; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<
$LN30@Main2:
; Line 914
	mov	ecx, DWORD PTR _ecs$77590[ebp]
	mov	DWORD PTR tv1529[ebp], ecx
	mov	edx, DWORD PTR tv1529[ebp]
	mov	eax, DWORD PTR tv1529[ebp]
	mov	ecx, DWORD PTR [edx+320]
	or	ecx, DWORD PTR [eax+324]
	je	SHORT $LN29@Main2
; Line 916
	push	OFFSET ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl
	mov	ecx, DWORD PTR _so$[ebp]
	call	??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<
; Line 917
	mov	edx, DWORD PTR _ecs$77590[ebp]
	mov	DWORD PTR tv1536[ebp], edx
	mov	eax, DWORD PTR tv1536[ebp]
	mov	ecx, DWORD PTR tv1536[ebp]
	mov	edx, DWORD PTR [eax+320]
	or	edx, DWORD PTR [ecx+324]
	je	SHORT $LN29@Main2
; Line 918
	push	OFFSET ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl
	mov	eax, DWORD PTR _ecs$77590[ebp]
	mov	ecx, DWORD PTR [eax+324]
	push	ecx
	mov	edx, DWORD PTR [eax+320]
	push	edx
	push	OFFSET $SG77623
	mov	ecx, DWORD PTR _so$[ebp]
	call	??6CStdOutStream@@QAEAAV0@PBD@Z		; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@_K@Z		; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<
$LN29@Main2:
; Line 921
	mov	eax, DWORD PTR _ecs$77590[ebp]
	mov	DWORD PTR tv1551[ebp], eax
	mov	ecx, DWORD PTR tv1551[ebp]
	mov	edx, DWORD PTR tv1551[ebp]
	mov	eax, DWORD PTR [ecx+312]
	or	eax, DWORD PTR [edx+316]
	je	SHORT $LN27@Main2
; Line 923
	mov	BYTE PTR _isError$77614[ebp], 1
; Line 924
	push	OFFSET ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl
	mov	ecx, DWORD PTR _so$[ebp]
	call	??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<
; Line 925
	mov	ecx, DWORD PTR _ecs$77590[ebp]
	mov	DWORD PTR tv1558[ebp], ecx
	mov	edx, DWORD PTR tv1558[ebp]
	mov	eax, DWORD PTR tv1558[ebp]
	mov	ecx, DWORD PTR [edx+312]
	or	ecx, DWORD PTR [eax+316]
	je	SHORT $LN27@Main2
; Line 926
	push	OFFSET ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl
	mov	edx, DWORD PTR _ecs$77590[ebp]
	mov	eax, DWORD PTR [edx+316]
	push	eax
	mov	ecx, DWORD PTR [edx+312]
	push	ecx
	push	OFFSET $SG77626
	mov	ecx, DWORD PTR _so$[ebp]
	call	??6CStdOutStream@@QAEAAV0@PBD@Z		; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@_K@Z		; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<
$LN27@Main2:
; Line 929
	movzx	edx, BYTE PTR _isError$77614[ebp]
	test	edx, edx
	je	SHORT $LN25@Main2
; Line 930
	mov	DWORD PTR _retCode$[ebp], 2
$LN25@Main2:
; Line 932
	mov	eax, DWORD PTR _ecs$77590[ebp]
	mov	DWORD PTR tv1573[ebp], eax
	mov	ecx, DWORD PTR tv1573[ebp]
	mov	edx, DWORD PTR tv1573[ebp]
	mov	eax, DWORD PTR [ecx+296]
	or	eax, DWORD PTR [edx+300]
	jne	SHORT $LN23@Main2
	mov	ecx, DWORD PTR _ecs$77590[ebp]
	mov	DWORD PTR tv1580[ebp], ecx
	mov	edx, DWORD PTR tv1580[ebp]
	mov	eax, DWORD PTR tv1580[ebp]
	mov	ecx, DWORD PTR [edx+328]
	or	ecx, DWORD PTR [eax+332]
	je	SHORT $LN24@Main2
$LN23@Main2:
; Line 936
	push	OFFSET ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl
	mov	ecx, DWORD PTR _so$[ebp]
	call	??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<
; Line 937
	mov	edx, DWORD PTR _ecs$77590[ebp]
	mov	DWORD PTR tv1587[ebp], edx
	mov	eax, DWORD PTR tv1587[ebp]
	mov	ecx, DWORD PTR tv1587[ebp]
	mov	edx, DWORD PTR [eax+328]
	or	edx, DWORD PTR [ecx+332]
	je	SHORT $LN22@Main2
; Line 938
	push	OFFSET ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl
	mov	eax, DWORD PTR _ecs$77590[ebp]
	mov	ecx, DWORD PTR [eax+332]
	push	ecx
	mov	edx, DWORD PTR [eax+328]
	push	edx
	push	OFFSET $SG77631
	mov	ecx, DWORD PTR _so$[ebp]
	call	??6CStdOutStream@@QAEAAV0@PBD@Z		; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@_K@Z		; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<
$LN22@Main2:
; Line 939
	jmp	$LN21@Main2
$LN24@Main2:
; Line 941
	cmp	DWORD PTR _hresultMain$[ebp], 0
	jne	$LN21@Main2
; Line 943
	mov	eax, DWORD PTR _stat$77601[ebp+32]
	or	eax, DWORD PTR _stat$77601[ebp+36]
	je	SHORT $LN19@Main2
; Line 944
	push	OFFSET ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl
	mov	ecx, DWORD PTR _stat$77601[ebp+36]
	push	ecx
	mov	edx, DWORD PTR _stat$77601[ebp+32]
	push	edx
	push	OFFSET $SG77636
	mov	ecx, DWORD PTR _so$[ebp]
	call	??6CStdOutStream@@QAEAAV0@PBD@Z		; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@_K@Z		; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<
$LN19@Main2:
; Line 945
	cmp	DWORD PTR _stat$77601[ebp+40], 1
	jne	SHORT $LN17@Main2
	cmp	DWORD PTR _stat$77601[ebp+44], 0
	jne	SHORT $LN17@Main2
	mov	eax, DWORD PTR _stat$77601[ebp+32]
	or	eax, DWORD PTR _stat$77601[ebp+36]
	jne	SHORT $LN17@Main2
	mov	ecx, DWORD PTR _stat$77601[ebp+48]
	or	ecx, DWORD PTR _stat$77601[ebp+52]
	je	SHORT $LN18@Main2
$LN17@Main2:
; Line 946
	push	OFFSET ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl
	mov	edx, DWORD PTR _stat$77601[ebp+44]
	push	edx
	mov	eax, DWORD PTR _stat$77601[ebp+40]
	push	eax
	push	OFFSET $SG77639
	mov	ecx, DWORD PTR _so$[ebp]
	call	??6CStdOutStream@@QAEAAV0@PBD@Z		; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@_K@Z		; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<
$LN18@Main2:
; Line 947
	mov	ecx, DWORD PTR _stat$77601[ebp+48]
	or	ecx, DWORD PTR _stat$77601[ebp+52]
	je	SHORT $LN16@Main2
; Line 949
	push	OFFSET ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl
	mov	edx, DWORD PTR _stat$77601[ebp+52]
	push	edx
	mov	eax, DWORD PTR _stat$77601[ebp+48]
	push	eax
	push	OFFSET $SG77641
	mov	ecx, DWORD PTR _so$[ebp]
	call	??6CStdOutStream@@QAEAAV0@PBD@Z		; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@_K@Z		; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<
; Line 950
	push	OFFSET ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl
	mov	ecx, DWORD PTR _stat$77601[ebp+20]
	push	ecx
	mov	edx, DWORD PTR _stat$77601[ebp+16]
	push	edx
	push	OFFSET $SG77642
	mov	ecx, DWORD PTR _so$[ebp]
	call	??6CStdOutStream@@QAEAAV0@PBD@Z		; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@_K@Z		; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<
$LN16@Main2:
; Line 955
	push	OFFSET ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl
	mov	eax, DWORD PTR _stat$77601[ebp+28]
	push	eax
	mov	ecx, DWORD PTR _stat$77601[ebp+24]
	push	ecx
	push	OFFSET $SG77644
	push	OFFSET ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl
	mov	edx, DWORD PTR _stat$77601[ebp+12]
	push	edx
	mov	eax, DWORD PTR _stat$77601[ebp+8]
	push	eax
	push	OFFSET $SG77643
	mov	ecx, DWORD PTR _so$[ebp]
	call	??6CStdOutStream@@QAEAAV0@PBD@Z		; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@_K@Z		; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@PBD@Z		; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@_K@Z		; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<
; Line 956
	cmp	DWORD PTR _hashCalc$77603[ebp], 0
	je	SHORT $LN21@Main2
; Line 958
	push	OFFSET ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl
	mov	ecx, DWORD PTR _so$[ebp]
	call	??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<
; Line 959
	lea	ecx, DWORD PTR _hb$77602[ebp]
	push	ecx
	mov	edx, DWORD PTR _so$[ebp]
	push	edx
	call	?PrintHashStat@@YGXAAVCStdOutStream@@ABUCHashBundle@@@Z ; PrintHashStat
$LN21@Main2:
; Line 962
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	lea	ecx, DWORD PTR _hb$77602[ebp]
	call	??1CHashBundle@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 16		; 00000010H
	lea	ecx, DWORD PTR _errorMessage$77600[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 15		; 0000000fH
	lea	ecx, DWORD PTR _eo$77598[ebp]
	call	??1CExtractOptions@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _extractCallback$77596[ebp]
	call	??1?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IFolderArchiveExtractCallback>::~CMyComPtr<IFolderArchiveExtractCallback>
; Line 963
	jmp	$LN40@Main2
$LN39@Main2:
; Line 965
	mov	DWORD PTR _numErrors$77647[ebp], 0
	mov	DWORD PTR _numErrors$77647[ebp+4], 0
; Line 966
	mov	DWORD PTR _numWarnings$77648[ebp], 0
	mov	DWORD PTR _numWarnings$77648[ebp+4], 0
; Line 987
	lea	eax, DWORD PTR _numWarnings$77648[ebp]
	push	eax
	lea	ecx, DWORD PTR _numErrors$77647[ebp]
	push	ecx
	lea	edx, DWORD PTR _options$[ebp+124]
	push	edx
	lea	eax, DWORD PTR _options$[ebp+56]
	push	eax
	lea	ecx, DWORD PTR _options$[ebp+52]
	push	ecx
	movzx	edx, BYTE PTR _options$[ebp+68]
	push	edx
	movzx	eax, BYTE PTR _options$[ebp+9]
	push	eax
	lea	ecx, DWORD PTR _options$[ebp+12]
	call	?Front@?$CObjectVector@UCPair@NWildcard@@@@QAEAAUCPair@NWildcard@@XZ ; CObjectVector<NWildcard::CPair>::Front
	add	eax, 12					; 0000000cH
	push	eax
	movzx	ecx, BYTE PTR _options$[ebp+174]
	push	ecx
	movzx	edx, BYTE PTR _options$[ebp+166]
	push	edx
	lea	eax, DWORD PTR _ArchivePathsFullSorted$77575[ebp]
	push	eax
	lea	ecx, DWORD PTR _ArchivePathsSorted$77574[ebp]
	push	ecx
	movzx	edx, BYTE PTR _options$[ebp+7]
	push	edx
	lea	eax, DWORD PTR _excludedFormats$[ebp]
	push	eax
	lea	ecx, DWORD PTR _types$[ebp]
	push	ecx
	mov	edx, DWORD PTR _codecs$[ebp]
	push	edx
	call	?ListArchives@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABV?$CRecordVector@H@@_NAAV?$CObjectVector@VUString@@@@433ABVCCensorNode@NWildcard@@33AA_NAAVUString@@PBV?$CObjectVector@UCProperty@@@@AA_K9@Z ; ListArchives
	mov	DWORD PTR _hresultMain$[ebp], eax
; Line 989
	movzx	eax, BYTE PTR _options$[ebp+9]
	test	eax, eax
	je	SHORT $LN13@Main2
; Line 990
	cmp	DWORD PTR _numWarnings$77648[ebp+4], 0
	ja	SHORT $LN152@Main2
	cmp	DWORD PTR _numWarnings$77648[ebp], 0
	jbe	SHORT $LN13@Main2
$LN152@Main2:
; Line 991
	push	OFFSET ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl
	mov	ecx, DWORD PTR _numWarnings$77648[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _numWarnings$77648[ebp]
	push	edx
	push	OFFSET $SG77651
	push	OFFSET ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl
	mov	ecx, OFFSET ?g_StdOut@@3VCStdOutStream@@A ; g_StdOut
	call	??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@PBD@Z		; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@_K@Z		; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<
$LN13@Main2:
; Line 993
	cmp	DWORD PTR _numErrors$77647[ebp+4], 0
	ja	SHORT $LN153@Main2
	cmp	DWORD PTR _numErrors$77647[ebp], 0
	jbe	SHORT $LN40@Main2
$LN153@Main2:
; Line 995
	movzx	eax, BYTE PTR _options$[ebp+9]
	test	eax, eax
	je	SHORT $LN10@Main2
; Line 996
	push	OFFSET ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl
	mov	ecx, DWORD PTR _numErrors$77647[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _numErrors$77647[ebp]
	push	edx
	push	OFFSET $SG77654
	push	OFFSET ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl
	mov	ecx, OFFSET ?g_StdOut@@3VCStdOutStream@@A ; g_StdOut
	call	??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@PBD@Z		; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@_K@Z		; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<
$LN10@Main2:
; Line 997
	mov	DWORD PTR _retCode$[ebp], 2
$LN40@Main2:
; Line 1000
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _ArchivePathsFullSorted$77575[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _ArchivePathsSorted$77574[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	jmp	$LN53@Main2
$LN48@Main2:
; Line 1001
	lea	ecx, DWORD PTR _options$[ebp+36]
	call	?IsFromUpdateGroup@CArcCommand@@QBE_NXZ	; CArcCommand::IsFromUpdateGroup
	movzx	eax, al
	test	eax, eax
	je	$LN8@Main2
; Line 1003
	lea	ecx, DWORD PTR _options$[ebp+184]
	mov	DWORD PTR _uo$77657[ebp], ecx
; Line 1004
	mov	edx, DWORD PTR _uo$77657[ebp]
	movzx	eax, BYTE PTR [edx+164]
	test	eax, eax
	je	SHORT $LN7@Main2
	mov	ecx, DWORD PTR _uo$77657[ebp]
	add	ecx, 168				; 000000a8H
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN7@Main2
; Line 1005
	mov	edx, DWORD PTR _kDefaultSfxModule
	push	edx
	mov	ecx, DWORD PTR _uo$77657[ebp]
	add	ecx, 168				; 000000a8H
	call	??4UString@@QAEAAV0@PB_W@Z		; UString::operator=
$LN7@Main2:
; Line 1007
	lea	ecx, DWORD PTR _openCallback$77659[ebp]
	call	??0COpenCallbackConsole@@QAE@XZ		; COpenCallbackConsole::COpenCallbackConsole
	mov	BYTE PTR __$EHRec$[ebp+8], 19		; 00000013H
; Line 1008
	mov	eax, DWORD PTR _percentsStream$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?g_ErrStream@@3PAVCStdOutStream@@A ; g_ErrStream
	push	ecx
	mov	edx, DWORD PTR ?g_StdStream@@3PAVCStdOutStream@@A ; g_StdStream
	push	edx
	lea	ecx, DWORD PTR _openCallback$77659[ebp]
	call	?Init@COpenCallbackConsole@@QAEXPAVCStdOutStream@@00@Z ; COpenCallbackConsole::Init
; Line 1012
	movzx	eax, BYTE PTR _options$[ebp+52]
	test	eax, eax
	je	SHORT $LN118@Main2
	lea	ecx, DWORD PTR _options$[ebp+56]
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN118@Main2
	mov	DWORD PTR tv1011[ebp], 1
	jmp	SHORT $LN119@Main2
$LN118@Main2:
	mov	DWORD PTR tv1011[ebp], 0
$LN119@Main2:
	mov	dl, BYTE PTR tv1011[ebp]
	mov	BYTE PTR _passwordIsDefined$77660[ebp], dl
; Line 1013
	mov	al, BYTE PTR _passwordIsDefined$77660[ebp]
	mov	BYTE PTR _openCallback$77659[ebp+195], al
; Line 1014
	lea	ecx, DWORD PTR _options$[ebp+56]
	push	ecx
	lea	ecx, DWORD PTR _openCallback$77659[ebp+196]
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
; Line 1017
	lea	ecx, DWORD PTR _callback$77661[ebp]
	call	??0CUpdateCallbackConsole@@QAE@XZ	; CUpdateCallbackConsole::CUpdateCallbackConsole
	mov	BYTE PTR __$EHRec$[ebp+8], 20		; 00000014H
; Line 1018
	mov	edx, DWORD PTR _options$[ebp+520]
	mov	DWORD PTR _callback$77661[ebp+200], edx
; Line 1019
	mov	eax, DWORD PTR _percentsNameLevel$[ebp]
	mov	DWORD PTR _callback$77661[ebp+196], eax
; Line 1021
	cmp	DWORD PTR _percentsStream$[ebp], 0
	je	SHORT $LN6@Main2
; Line 1022
	mov	ecx, DWORD PTR _consoleWidth$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _callback$77661[ebp+8]
	call	?SetWindowWidth@CCallbackConsoleBase@@QAEXI@Z ; CCallbackConsoleBase::SetWindowWidth
$LN6@Main2:
; Line 1025
	mov	dl, BYTE PTR _passwordIsDefined$77660[ebp]
	mov	BYTE PTR _callback$77661[ebp+280], dl
; Line 1026
	movzx	eax, BYTE PTR _options$[ebp+52]
	test	eax, eax
	je	SHORT $LN120@Main2
	lea	ecx, DWORD PTR _options$[ebp+56]
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN120@Main2
	mov	DWORD PTR tv1073[ebp], 1
	jmp	SHORT $LN121@Main2
$LN120@Main2:
	mov	DWORD PTR tv1073[ebp], 0
$LN121@Main2:
	mov	dl, BYTE PTR tv1073[ebp]
	mov	BYTE PTR _callback$77661[ebp+296], dl
; Line 1027
	lea	eax, DWORD PTR _options$[ebp+56]
	push	eax
	lea	ecx, DWORD PTR _callback$77661[ebp+284]
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
; Line 1030
	mov	ecx, DWORD PTR _uo$77657[ebp]
	mov	dl, BYTE PTR [ecx+196]
	mov	BYTE PTR _callback$77661[ebp+192], dl
; Line 1033
	mov	eax, DWORD PTR _percentsStream$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?g_ErrStream@@3PAVCStdOutStream@@A ; g_ErrStream
	push	ecx
	mov	edx, DWORD PTR ?g_StdStream@@3PAVCStdOutStream@@A ; g_StdStream
	push	edx
	lea	ecx, DWORD PTR _callback$77661[ebp+8]
	call	?Init@CCallbackConsoleBase@@QAEXPAVCStdOutStream@@00@Z ; CCallbackConsoleBase::Init
; Line 1035
	lea	ecx, DWORD PTR _errorInfo$77663[ebp]
	call	??0CUpdateErrorInfo@@QAE@XZ		; CUpdateErrorInfo::CUpdateErrorInfo
	mov	BYTE PTR __$EHRec$[ebp+8], 21		; 00000015H
; Line 1046
	push	1
	lea	eax, DWORD PTR _callback$77661[ebp]
	push	eax
	lea	ecx, DWORD PTR _openCallback$77659[ebp]
	push	ecx
	lea	edx, DWORD PTR _errorInfo$77663[ebp]
	push	edx
	mov	eax, DWORD PTR _uo$77657[ebp]
	push	eax
	lea	ecx, DWORD PTR _options$[ebp+12]
	push	ecx
	lea	edx, DWORD PTR _options$[ebp+40]
	push	edx
	lea	eax, DWORD PTR _types$[ebp]
	push	eax
	mov	ecx, DWORD PTR _codecs$[ebp]
	push	ecx
	call	?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z ; UpdateArchive
	mov	DWORD PTR _hresultMain$[ebp], eax
; Line 1048
	lea	ecx, DWORD PTR _callback$77661[ebp+8]
	call	?ClosePercents2@CCallbackConsoleBase@@QAEXXZ ; CCallbackConsoleBase::ClosePercents2
; Line 1052
	lea	edx, DWORD PTR _callback$77661[ebp]
	test	edx, edx
	je	SHORT $LN122@Main2
	lea	eax, DWORD PTR _callback$77661[ebp]
	add	eax, 8
	mov	DWORD PTR tv1125[ebp], eax
	jmp	SHORT $LN123@Main2
$LN122@Main2:
	mov	DWORD PTR tv1125[ebp], 0
$LN123@Main2:
	push	1
	mov	ecx, DWORD PTR _so$[ebp]
	push	ecx
	lea	edx, DWORD PTR _errorInfo$77663[ebp]
	push	edx
	mov	eax, DWORD PTR tv1125[ebp]
	push	eax
	mov	ecx, DWORD PTR _hresultMain$[ebp]
	push	ecx
	call	?WarningsCheck@@YGHJABVCCallbackConsoleBase@@ABUCUpdateErrorInfo@@AAVCStdOutStream@@_N@Z ; WarningsCheck
	mov	DWORD PTR _retCode$[ebp], eax
; Line 1053
	mov	BYTE PTR __$EHRec$[ebp+8], 20		; 00000014H
	lea	ecx, DWORD PTR _errorInfo$77663[ebp]
	call	??1CUpdateErrorInfo@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 19		; 00000013H
	lea	ecx, DWORD PTR _callback$77661[ebp]
	call	??1CUpdateCallbackConsole@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _openCallback$77659[ebp]
	call	??1COpenCallbackConsole@@QAE@XZ
	jmp	$LN53@Main2
$LN8@Main2:
; Line 1054
	cmp	DWORD PTR _options$[ebp+36], 9
	jne	$LN4@Main2
; Line 1056
	lea	edx, DWORD PTR _options$[ebp+464]
	mov	DWORD PTR _uo$77666[ebp], edx
; Line 1058
	lea	ecx, DWORD PTR _callback$77667[ebp]
	call	??0CHashCallbackConsole@@QAE@XZ		; CHashCallbackConsole::CHashCallbackConsole
	mov	BYTE PTR __$EHRec$[ebp+8], 22		; 00000016H
; Line 1059
	cmp	DWORD PTR _percentsStream$[ebp], 0
	je	SHORT $LN3@Main2
; Line 1060
	mov	eax, DWORD PTR _consoleWidth$[ebp]
	push	eax
	lea	ecx, DWORD PTR _callback$77667[ebp+8]
	call	?SetWindowWidth@CCallbackConsoleBase@@QAEXI@Z ; CCallbackConsoleBase::SetWindowWidth
$LN3@Main2:
; Line 1062
	mov	ecx, DWORD PTR _percentsStream$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?g_ErrStream@@3PAVCStdOutStream@@A ; g_ErrStream
	push	edx
	mov	eax, DWORD PTR ?g_StdStream@@3PAVCStdOutStream@@A ; g_StdStream
	push	eax
	lea	ecx, DWORD PTR _callback$77667[ebp+8]
	call	?Init@CCallbackConsoleBase@@QAEXPAVCStdOutStream@@00@Z ; CCallbackConsoleBase::Init
; Line 1063
	mov	cl, BYTE PTR _options$[ebp+9]
	mov	BYTE PTR _callback$77667[ebp+305], cl
; Line 1065
	lea	ecx, DWORD PTR _errorInfoString$77669[ebp]
	call	??0AString@@QAE@XZ			; AString::AString
	mov	BYTE PTR __$EHRec$[ebp+8], 23		; 00000017H
; Line 1068
	lea	edx, DWORD PTR _callback$77667[ebp]
	push	edx
	lea	eax, DWORD PTR _errorInfoString$77669[ebp]
	push	eax
	mov	ecx, DWORD PTR _uo$77666[ebp]
	push	ecx
	lea	edx, DWORD PTR _options$[ebp+12]
	push	edx
	call	?HashCalc@@YGJABVCCensor@NWildcard@@ABUCHashOptions@@AAVAString@@PAUIHashCallbackUI@@@Z ; HashCalc
	mov	DWORD PTR _hresultMain$[ebp], eax
; Line 1069
	lea	ecx, DWORD PTR _errorInfo$77670[ebp]
	call	??0CUpdateErrorInfo@@QAE@XZ		; CUpdateErrorInfo::CUpdateErrorInfo
	mov	BYTE PTR __$EHRec$[ebp+8], 24		; 00000018H
; Line 1070
	lea	eax, DWORD PTR _errorInfoString$77669[ebp]
	push	eax
	lea	ecx, DWORD PTR _errorInfo$77670[ebp+4]
	call	??4AString@@QAEAAV0@ABV0@@Z		; AString::operator=
; Line 1071
	lea	ecx, DWORD PTR _callback$77667[ebp]
	test	ecx, ecx
	je	SHORT $LN124@Main2
	lea	edx, DWORD PTR _callback$77667[ebp]
	add	edx, 8
	mov	DWORD PTR tv1173[ebp], edx
	jmp	SHORT $LN125@Main2
$LN124@Main2:
	mov	DWORD PTR tv1173[ebp], 0
$LN125@Main2:
	movzx	eax, BYTE PTR _options$[ebp+9]
	push	eax
	mov	ecx, DWORD PTR _so$[ebp]
	push	ecx
	lea	edx, DWORD PTR _errorInfo$77670[ebp]
	push	edx
	mov	eax, DWORD PTR tv1173[ebp]
	push	eax
	mov	ecx, DWORD PTR _hresultMain$[ebp]
	push	ecx
	call	?WarningsCheck@@YGHJABVCCallbackConsoleBase@@ABUCUpdateErrorInfo@@AAVCStdOutStream@@_N@Z ; WarningsCheck
	mov	DWORD PTR _retCode$[ebp], eax
; Line 1072
	mov	BYTE PTR __$EHRec$[ebp+8], 23		; 00000017H
	lea	ecx, DWORD PTR _errorInfo$77670[ebp]
	call	??1CUpdateErrorInfo@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 22		; 00000016H
	lea	ecx, DWORD PTR _errorInfoString$77669[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _callback$77667[ebp]
	call	??1CHashCallbackConsole@@QAE@XZ		; CHashCallbackConsole::~CHashCallbackConsole
; Line 1073
	jmp	SHORT $LN53@Main2
$LN4@Main2:
; Line 1074
	push	7
	mov	edx, DWORD PTR _kUserErrorMessage
	push	edx
	call	?ShowMessageAndThrowException@@YGXPBDW4EEnum@NExitCode@@@Z ; ShowMessageAndThrowException
$LN53@Main2:
; Line 1076
	movzx	eax, BYTE PTR _options$[ebp+69]
	test	eax, eax
	je	SHORT $LN1@Main2
	cmp	DWORD PTR ?g_StdStream@@3PAVCStdOutStream@@A, 0 ; g_StdStream
	je	SHORT $LN1@Main2
; Line 1077
	call	?PrintStat@@YGXXZ			; PrintStat
$LN1@Main2:
; Line 1079
	mov	ecx, DWORD PTR _hresultMain$[ebp]
	push	ecx
	call	?ThrowException_if_Error@@YGXJ@Z	; ThrowException_if_Error
; Line 1081
	mov	edx, DWORD PTR _retCode$[ebp]
	mov	DWORD PTR $T79276[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _excludedFormats$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _types$[ebp]
	call	??1?$CObjectVector@UCOpenType@@@@QAE@XZ	; CObjectVector<COpenType>::~CObjectVector<COpenType>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR ___codecsRef$[ebp]
	call	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _parser$[ebp]
	call	??1CArcCmdLineParser@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _options$[ebp]
	call	??1CArcCmdLineOptions@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _commandStrings$[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	eax, DWORD PTR $T79276[ebp]
$LN105@Main2:
; Line 1082
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN182@Main2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 2524				; 000009dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN182@Main2:
	DD	26					; 0000001aH
	DD	$LN181@Main2
$LN181@Main2:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN154@Main2
	DD	-568					; fffffdc8H
	DD	528					; 00000210H
	DD	$LN155@Main2
	DD	-620					; fffffd94H
	DD	44					; 0000002cH
	DD	$LN156@Main2
	DD	-668					; fffffd64H
	DD	22					; 00000016H
	DD	$LN157@Main2
	DD	-684					; fffffd54H
	DD	4
	DD	$LN158@Main2
	DD	-708					; fffffd3cH
	DD	12					; 0000000cH
	DD	$LN159@Main2
	DD	-728					; fffffd28H
	DD	12					; 0000000cH
	DD	$LN160@Main2
	DD	-752					; fffffd10H
	DD	12					; 0000000cH
	DD	$LN161@Main2
	DD	-800					; fffffce0H
	DD	12					; 0000000cH
	DD	$LN162@Main2
	DD	-852					; fffffcacH
	DD	12					; 0000000cH
	DD	$LN163@Main2
	DD	-872					; fffffc98H
	DD	12					; 0000000cH
	DD	$LN164@Main2
	DD	-1072					; fffffbd0H
	DD	192					; 000000c0H
	DD	$LN165@Main2
	DD	-1128					; fffffb98H
	DD	48					; 00000030H
	DD	$LN166@Main2
	DD	-1144					; fffffb88H
	DD	4
	DD	$LN167@Main2
	DD	-1204					; fffffb4cH
	DD	52					; 00000034H
	DD	$LN168@Main2
	DD	-1224					; fffffb38H
	DD	12					; 0000000cH
	DD	$LN169@Main2
	DD	-1288					; fffffaf8H
	DD	56					; 00000038H
	DD	$LN170@Main2
	DD	-1368					; fffffaa8H
	DD	72					; 00000048H
	DD	$LN171@Main2
	DD	-1392					; fffffa90H
	DD	8
	DD	$LN172@Main2
	DD	-1408					; fffffa80H
	DD	8
	DD	$LN173@Main2
	DD	-1628					; fffff9a4H
	DD	208					; 000000d0H
	DD	$LN174@Main2
	DD	-1944					; fffff868H
	DD	304					; 00000130H
	DD	$LN175@Main2
	DD	-1980					; fffff844H
	DD	28					; 0000001cH
	DD	$LN176@Main2
	DD	-2304					; fffff700H
	DD	312					; 00000138H
	DD	$LN177@Main2
	DD	-2324					; fffff6ecH
	DD	12					; 0000000cH
	DD	$LN178@Main2
	DD	-2360					; fffff6c8H
	DD	28					; 0000001cH
	DD	$LN179@Main2
$LN179@Main2:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	0
$LN178@Main2:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
$LN177@Main2:
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	98					; 00000062H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
$LN176@Main2:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	0
$LN175@Main2:
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	98					; 00000062H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
$LN174@Main2:
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	98					; 00000062H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
$LN173@Main2:
	DB	110					; 0000006eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	87					; 00000057H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	110					; 0000006eH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	115					; 00000073H
	DB	0
$LN172@Main2:
	DB	110					; 0000006eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	69					; 00000045H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	0
$LN171@Main2:
	DB	104					; 00000068H
	DB	98					; 00000062H
	DB	0
$LN170@Main2:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
$LN169@Main2:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	77					; 0000004dH
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	97					; 00000061H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	0
$LN168@Main2:
	DB	101					; 00000065H
	DB	111					; 0000006fH
	DB	0
$LN167@Main2:
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	98					; 00000062H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
$LN166@Main2:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN165@Main2:
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	0
$LN164@Main2:
	DB	65					; 00000041H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	115					; 00000073H
	DB	70					; 00000046H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	83					; 00000053H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$LN163@Main2:
	DB	65					; 00000041H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	115					; 00000073H
	DB	83					; 00000053H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$LN162@Main2:
	DB	115					; 00000073H
	DB	0
$LN161@Main2:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN160@Main2:
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	99					; 00000063H
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	70					; 00000046H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
$LN159@Main2:
	DB	116					; 00000074H
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN158@Main2:
	DB	95					; 0000005fH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	115					; 00000073H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	0
$LN157@Main2:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	0
$LN156@Main2:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN155@Main2:
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	0
$LN154@Main2:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	115					; 00000073H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Main2@@YGHXZ$0:
	lea	ecx, DWORD PTR _commandStrings$[ebp]
	jmp	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
__unwindfunclet$?Main2@@YGHXZ$1:
	lea	ecx, DWORD PTR $T79243[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?Main2@@YGHXZ$2:
	lea	ecx, DWORD PTR _options$[ebp]
	jmp	??1CArcCmdLineOptions@@QAE@XZ
__unwindfunclet$?Main2@@YGHXZ$3:
	lea	ecx, DWORD PTR _parser$[ebp]
	jmp	??1CArcCmdLineParser@@QAE@XZ
__unwindfunclet$?Main2@@YGHXZ$4:
	mov	eax, DWORD PTR $T79252[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Main2@@YGHXZ$5:
	lea	ecx, DWORD PTR ___codecsRef$[ebp]
	jmp	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
__unwindfunclet$?Main2@@YGHXZ$6:
	lea	ecx, DWORD PTR _types$[ebp]
	jmp	??1?$CObjectVector@UCOpenType@@@@QAE@XZ	; CObjectVector<COpenType>::~CObjectVector<COpenType>
__unwindfunclet$?Main2@@YGHXZ$7:
	lea	ecx, DWORD PTR _excludedFormats$[ebp]
	jmp	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
__unwindfunclet$?Main2@@YGHXZ$8:
	lea	ecx, DWORD PTR _tempIndices$77496[ebp]
	jmp	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
__unwindfunclet$?Main2@@YGHXZ$9:
	lea	ecx, DWORD PTR _s$77522[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?Main2@@YGHXZ$10:
	lea	ecx, DWORD PTR _ArchivePathsSorted$77574[ebp]
	jmp	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
__unwindfunclet$?Main2@@YGHXZ$11:
	lea	ecx, DWORD PTR _ArchivePathsFullSorted$77575[ebp]
	jmp	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
__unwindfunclet$?Main2@@YGHXZ$12:
	lea	ecx, DWORD PTR _scan$77578[ebp]
	jmp	??1CExtractScanConsole@@QAE@XZ
__unwindfunclet$?Main2@@YGHXZ$13:
	lea	ecx, DWORD PTR $T79261[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?Main2@@YGHXZ$14:
	mov	eax, DWORD PTR $T79263[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Main2@@YGHXZ$15:
	lea	ecx, DWORD PTR _extractCallback$77596[ebp]
	jmp	??1?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IFolderArchiveExtractCallback>::~CMyComPtr<IFolderArchiveExtractCallback>
__unwindfunclet$?Main2@@YGHXZ$16:
	lea	ecx, DWORD PTR _eo$77598[ebp]
	jmp	??1CExtractOptions@@QAE@XZ
__unwindfunclet$?Main2@@YGHXZ$17:
	lea	ecx, DWORD PTR _errorMessage$77600[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?Main2@@YGHXZ$18:
	lea	ecx, DWORD PTR _hb$77602[ebp]
	jmp	??1CHashBundle@@QAE@XZ
__unwindfunclet$?Main2@@YGHXZ$19:
	lea	ecx, DWORD PTR _openCallback$77659[ebp]
	jmp	??1COpenCallbackConsole@@QAE@XZ
__unwindfunclet$?Main2@@YGHXZ$20:
	lea	ecx, DWORD PTR _callback$77661[ebp]
	jmp	??1CUpdateCallbackConsole@@QAE@XZ
__unwindfunclet$?Main2@@YGHXZ$21:
	lea	ecx, DWORD PTR _errorInfo$77663[ebp]
	jmp	??1CUpdateErrorInfo@@QAE@XZ
__unwindfunclet$?Main2@@YGHXZ$22:
	lea	ecx, DWORD PTR _callback$77667[ebp]
	jmp	??1CHashCallbackConsole@@QAE@XZ		; CHashCallbackConsole::~CHashCallbackConsole
__unwindfunclet$?Main2@@YGHXZ$23:
	lea	ecx, DWORD PTR _errorInfoString$77669[ebp]
	jmp	??1AString@@QAE@XZ			; AString::~AString
__unwindfunclet$?Main2@@YGHXZ$24:
	lea	ecx, DWORD PTR _errorInfo$77670[ebp]
	jmp	??1CUpdateErrorInfo@@QAE@XZ
__ehhandler$?Main2@@YGHXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-2524]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Main2@@YGHXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Main2@@YGHXZ ENDP					; Main2
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1AString@@QAE@XZ
_TEXT	SEGMENT
$T79351 = -8						; size = 4
_this$ = -4						; size = 4
??1AString@@QAE@XZ PROC					; AString::~AString, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 232
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T79351[ebp], ecx
	mov	edx, DWORD PTR $T79351[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1AString@@QAE@XZ ENDP					; AString::~AString
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1UString@@QAE@XZ
_TEXT	SEGMENT
$T79354 = -8						; size = 4
_this$ = -4						; size = 4
??1UString@@QAE@XZ PROC					; UString::~UString, COMDAT
; _this$ = ecx
; Line 470
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T79354[ebp], ecx
	mov	edx, DWORD PTR $T79354[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1UString@@QAE@XZ ENDP					; UString::~UString
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsEmpty@UString@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@UString@@QBE_NXZ PROC				; UString::IsEmpty, COMDAT
; _this$ = ecx
; Line 473
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+4], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@UString@@QBE_NXZ ENDP				; UString::IsEmpty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??BUString@@QBEPB_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BUString@@QBEPB_WXZ PROC				; UString::operator wchar_t const *, COMDAT
; _this$ = ecx
; Line 476
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??BUString@@QBEPB_WXZ ENDP				; UString::operator wchar_t const *
_TEXT	ENDS
EXTRN	?Grow_1@UString@@AAEXXZ:PROC			; UString::Grow_1
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??YUString@@QAEAAV0@_W@Z
_TEXT	SEGMENT
_chars$ = -12						; size = 4
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_c$ = 8							; size = 2
??YUString@@QAEAAV0@_W@Z PROC				; UString::operator+=, COMDAT
; _this$ = ecx
; Line 515
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 516
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+4]
	jne	SHORT $LN1@operator
; Line 517
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Grow_1@UString@@AAEXXZ			; UString::Grow_1
$LN1@operator:
; Line 518
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _len$[ebp], ecx
; Line 519
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _chars$[ebp], eax
; Line 520
	mov	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _chars$[ebp]
	mov	ax, WORD PTR _c$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
	mov	ecx, DWORD PTR _len$[ebp]
	add	ecx, 1
	mov	DWORD PTR _len$[ebp], ecx
; Line 521
	xor	edx, edx
	mov	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _chars$[ebp]
	mov	WORD PTR [ecx+eax*2], dx
; Line 522
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 523
	mov	eax, DWORD PTR _this$[ebp]
; Line 524
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??YUString@@QAEAAV0@_W@Z ENDP				; UString::operator+=
_TEXT	ENDS
PUBLIC	??_C@_0BG@OCFLNMAB@SeLockMemoryPrivilege?$AA@	; `string'
EXTRN	?EnablePrivilege@NSecurity@NWindows@@YG_NPBD_N@Z:PROC ; NWindows::NSecurity::EnablePrivilege
;	COMDAT ??_C@_0BG@OCFLNMAB@SeLockMemoryPrivilege?$AA@
; File c:\workspace\7z1505-src\cpp\windows\memorylock.h
CONST	SEGMENT
??_C@_0BG@OCFLNMAB@SeLockMemoryPrivilege?$AA@ DB 'SeLockMemoryPrivilege', 00H ; `string'
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ?EnablePrivilege_LockMemory@NSecurity@NWindows@@YG_N_N@Z
_TEXT	SEGMENT
_enable$ = 8						; size = 1
?EnablePrivilege_LockMemory@NSecurity@NWindows@@YG_N_N@Z PROC ; NWindows::NSecurity::EnablePrivilege_LockMemory, COMDAT
; Line 14
	push	ebp
	mov	ebp, esp
; Line 15
	movzx	eax, BYTE PTR _enable$[ebp]
	push	eax
	push	OFFSET ??_C@_0BG@OCFLNMAB@SeLockMemoryPrivilege?$AA@
	call	?EnablePrivilege@NSecurity@NWindows@@YG_NPBD_N@Z ; NWindows::NSecurity::EnablePrivilege
; Line 16
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
?EnablePrivilege_LockMemory@NSecurity@NWindows@@YG_N_N@Z ENDP ; NWindows::NSecurity::EnablePrivilege_LockMemory
_TEXT	ENDS
PUBLIC	??_C@_0BO@JMOKIFMN@SeCreateSymbolicLinkPrivilege?$AA@ ; `string'
PUBLIC	??_C@_0BD@CPPEOGLA@SeRestorePrivilege?$AA@	; `string'
;	COMDAT ??_C@_0BO@JMOKIFMN@SeCreateSymbolicLinkPrivilege?$AA@
CONST	SEGMENT
??_C@_0BO@JMOKIFMN@SeCreateSymbolicLinkPrivilege?$AA@ DB 'SeCreateSymboli'
	DB	'cLinkPrivilege', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@CPPEOGLA@SeRestorePrivilege?$AA@
CONST	SEGMENT
??_C@_0BD@CPPEOGLA@SeRestorePrivilege?$AA@ DB 'SeRestorePrivilege', 00H ; `string'
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ?EnablePrivilege_SymLink@NSecurity@NWindows@@YGXXZ
_TEXT	SEGMENT
?EnablePrivilege_SymLink@NSecurity@NWindows@@YGXXZ PROC	; NWindows::NSecurity::EnablePrivilege_SymLink, COMDAT
; Line 19
	push	ebp
	mov	ebp, esp
; Line 22
	push	1
	push	OFFSET ??_C@_0BD@CPPEOGLA@SeRestorePrivilege?$AA@
	call	?EnablePrivilege@NSecurity@NWindows@@YG_NPBD_N@Z ; NWindows::NSecurity::EnablePrivilege
; Line 27
	push	1
	push	OFFSET ??_C@_0BO@JMOKIFMN@SeCreateSymbolicLinkPrivilege?$AA@
	call	?EnablePrivilege@NSecurity@NWindows@@YG_NPBD_N@Z ; NWindows::NSecurity::EnablePrivilege
; Line 30
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?EnablePrivilege_SymLink@NSecurity@NWindows@@YGXXZ ENDP	; NWindows::NSecurity::EnablePrivilege_SymLink
_TEXT	ENDS
PUBLIC	??0?$CObjectVector@UCArcInfoEx@@@@QAE@XZ	; CObjectVector<CArcInfoEx>::CObjectVector<CArcInfoEx>
PUBLIC	??_7CCodecs@@6B@				; CCodecs::`vftable'
PUBLIC	??0CMyUnknownImp@@QAE@XZ			; CMyUnknownImp::CMyUnknownImp
PUBLIC	??0IUnknown@@QAE@XZ				; IUnknown::IUnknown
PUBLIC	??_R4CCodecs@@6B@				; CCodecs::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCCodecs@@@8				; CCodecs `RTTI Type Descriptor'
PUBLIC	??_R3CCodecs@@8					; CCodecs::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCodecs@@8					; CCodecs::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCodecs@@8			; CCodecs::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIUnknown@@@8				; IUnknown `RTTI Type Descriptor'
PUBLIC	??_R3IUnknown@@8				; IUnknown::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IUnknown@@8				; IUnknown::`RTTI Base Class Array'
PUBLIC	??_R13?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AVCMyUnknownImp@@@8			; CMyUnknownImp `RTTI Type Descriptor'
PUBLIC	??_R3CMyUnknownImp@@8				; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMyUnknownImp@@8				; CMyUnknownImp::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?QueryInterface@CCodecs@@UAGJABU_GUID@@PAPAX@Z	; CCodecs::QueryInterface
PUBLIC	?AddRef@CCodecs@@UAGKXZ				; CCodecs::AddRef
PUBLIC	?Release@CCodecs@@UAGKXZ			; CCodecs::Release
;	COMDAT ??_R1A@?0A@EA@CMyUnknownImp@@8
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\loadcodecs.h
rdata$r	SEGMENT
??_R1A@?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R2CMyUnknownImp@@8
rdata$r	SEGMENT
??_R2CMyUnknownImp@@8 DD FLAT:??_R1A@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMyUnknownImp@@8
rdata$r	SEGMENT
??_R3CMyUnknownImp@@8 DD 00H				; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMyUnknownImp@@@8
_DATA	SEGMENT
??_R0?AVCMyUnknownImp@@@8 DD FLAT:??_7type_info@@6B@	; CMyUnknownImp `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMyUnknownImp@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R13?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R2IUnknown@@8
rdata$r	SEGMENT
??_R2IUnknown@@8 DD FLAT:??_R1A@?0A@EA@IUnknown@@8	; IUnknown::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3IUnknown@@8
rdata$r	SEGMENT
??_R3IUnknown@@8 DD 00H					; IUnknown::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIUnknown@@@8
_DATA	SEGMENT
??_R0?AUIUnknown@@@8 DD FLAT:??_7type_info@@6B@		; IUnknown `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIUnknown@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IUnknown@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CCodecs@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CCodecs@@8 DD FLAT:??_R0?AVCCodecs@@@8	; CCodecs::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCodecs@@8
rdata$r	ENDS
;	COMDAT ??_R2CCodecs@@8
rdata$r	SEGMENT
??_R2CCodecs@@8 DD FLAT:??_R1A@?0A@EA@CCodecs@@8	; CCodecs::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CCodecs@@8
rdata$r	SEGMENT
??_R3CCodecs@@8 DD 00H					; CCodecs::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	03H
	DD	FLAT:??_R2CCodecs@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCodecs@@@8
_DATA	SEGMENT
??_R0?AVCCodecs@@@8 DD FLAT:??_7type_info@@6B@		; CCodecs `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCodecs@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CCodecs@@6B@
rdata$r	SEGMENT
??_R4CCodecs@@6B@ DD 00H				; CCodecs::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCCodecs@@@8
	DD	FLAT:??_R3CCodecs@@8
rdata$r	ENDS
;	COMDAT ??_7CCodecs@@6B@
CONST	SEGMENT
??_7CCodecs@@6B@ DD FLAT:??_R4CCodecs@@6B@		; CCodecs::`vftable'
	DD	FLAT:?QueryInterface@CCodecs@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CCodecs@@UAGKXZ
	DD	FLAT:?Release@CCodecs@@UAGKXZ
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CCodecs@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CCodecs@@QAE@XZ PROC					; CCodecs::CCodecs, COMDAT
; _this$ = ecx
; Line 300
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CCodecs@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$CObjectVector@UCArcInfoEx@@@@QAE@XZ ; CObjectVector<CArcInfoEx>::CObjectVector<CArcInfoEx>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+20], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+21], 0
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CCodecs@@QAE@XZ ENDP					; CCodecs::CCodecs
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CMyUnknownImp@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMyUnknownImp@@QAE@XZ PROC				; CMyUnknownImp::CMyUnknownImp, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 167
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CMyUnknownImp@@QAE@XZ ENDP				; CMyUnknownImp::CMyUnknownImp
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0IUnknown@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IUnknown@@QAE@XZ PROC				; IUnknown::IUnknown, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0IUnknown@@QAE@XZ ENDP				; IUnknown::IUnknown
_TEXT	ENDS
PUBLIC	_==@8
EXTRN	_IID_IUnknown:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@CCodecs@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CCodecs@@UAGJABU_GUID@@PAPAX@Z PROC	; CCodecs::QueryInterface, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\loadcodecs.h
; Line 336
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN1@QueryInter
$LN2@QueryInter:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN3@QueryInter
$LN1@QueryInter:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	xor	eax, eax
$LN3@QueryInter:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CCodecs@@UAGJABU_GUID@@PAPAX@Z ENDP	; CCodecs::QueryInterface
_TEXT	ENDS
PUBLIC	_IsEqualGUID@8
; Function compile flags: /Odtp /RTCsu
;	COMDAT _==@8
_TEXT	SEGMENT
_guidOne$ = 8						; size = 4
_guidOther$ = 12					; size = 4
_==@8	PROC						; COMDAT
; File c:\program files (x86)\microsoft sdks\windows\v7.0a\include\guiddef.h
; Line 193
	push	ebp
	mov	ebp, esp
; Line 194
	mov	eax, DWORD PTR _guidOther$[ebp]
	push	eax
	mov	ecx, DWORD PTR _guidOne$[ebp]
	push	ecx
	call	_IsEqualGUID@8
; Line 195
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_==@8	ENDP
_TEXT	ENDS
EXTRN	_memcmp:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT _IsEqualGUID@8
_TEXT	SEGMENT
_rguid1$ = 8						; size = 4
_rguid2$ = 12						; size = 4
_IsEqualGUID@8 PROC					; COMDAT
; Line 160
	push	ebp
	mov	ebp, esp
; Line 161
	push	16					; 00000010H
	mov	eax, DWORD PTR _rguid2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rguid1$[ebp]
	push	ecx
	call	_memcmp
	add	esp, 12					; 0000000cH
	neg	eax
	sbb	eax, eax
	add	eax, 1
; Line 162
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_IsEqualGUID@8 ENDP
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CCodecs@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CCodecs@@UAGKXZ PROC				; CCodecs::AddRef, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\loadcodecs.h
; Line 336
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CCodecs@@UAGKXZ ENDP				; CCodecs::AddRef
_TEXT	ENDS
PUBLIC	??_GCCodecs@@QAEPAXI@Z				; CCodecs::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CCodecs@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T79383 = -8						; size = 4
$T79382 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CCodecs@@UAGKXZ PROC				; CCodecs::Release, COMDAT
; Line 336
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	jmp	SHORT $LN2@Release
$LN1@Release:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T79383[ebp], edx
	mov	eax, DWORD PTR $T79383[ebp]
	mov	DWORD PTR $T79382[ebp], eax
	cmp	DWORD PTR $T79382[ebp], 0
	je	SHORT $LN4@Release
	push	1
	mov	ecx, DWORD PTR $T79382[ebp]
	call	??_GCCodecs@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release
$LN4@Release:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release:
	xor	eax, eax
$LN2@Release:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CCodecs@@UAGKXZ ENDP				; CCodecs::Release
_TEXT	ENDS
PUBLIC	??1CCodecs@@QAE@XZ				; CCodecs::~CCodecs
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCCodecs@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCCodecs@@QAEPAXI@Z PROC				; CCodecs::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CCodecs@@QAE@XZ			; CCodecs::~CCodecs
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCCodecs@@QAEPAXI@Z ENDP				; CCodecs::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1?$CObjectVector@UCArcInfoEx@@@@QAE@XZ	; CObjectVector<CArcInfoEx>::~CObjectVector<CArcInfoEx>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CCodecs@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CCodecs@@QAE@XZ PROC					; CCodecs::~CCodecs, COMDAT
; _this$ = ecx
; Line 303
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CCodecs@@6B@
; Line 305
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$CObjectVector@UCArcInfoEx@@@@QAE@XZ ; CObjectVector<CArcInfoEx>::~CObjectVector<CArcInfoEx>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CCodecs@@QAE@XZ ENDP					; CCodecs::~CCodecs
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CDirItemsStat@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CDirItemsStat@@QAE@XZ PROC				; CDirItemsStat::CDirItemsStat, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\diritem.h
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0
	mov	DWORD PTR [eax+28], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+40], 0
	mov	DWORD PTR [edx+44], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CDirItemsStat@@QAE@XZ ENDP				; CDirItemsStat::CDirItemsStat
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Init@CHashBundle@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Init@CHashBundle@@QAEXXZ PROC				; CHashBundle::Init, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\hashcalc.h
; Line 58
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 59
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+56], 0
	mov	DWORD PTR [eax+60], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+48], 0
	mov	DWORD PTR [ecx+52], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+40], 0
	mov	DWORD PTR [edx+44], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0
	mov	DWORD PTR [eax+36], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
; Line 60
	mov	esp, ebp
	pop	ebp
	ret	0
?Init@CHashBundle@@QAEXXZ ENDP				; CHashBundle::Init
_TEXT	ENDS
PUBLIC	??1CExtractOptionsBase@@QAE@XZ			; CExtractOptionsBase::~CExtractOptionsBase
PUBLIC	??0?$CObjectVector@UCProperty@@@@QAE@XZ		; CObjectVector<CProperty>::CObjectVector<CProperty>
PUBLIC	??0CExtractOptionsBase@@QAE@XZ			; CExtractOptionsBase::CExtractOptionsBase
;	COMDAT xdata$x
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\extract.h
xdata$x	SEGMENT
__unwindtable$??0CExtractOptions@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CExtractOptions@@QAE@XZ$0
__ehfuncinfo$??0CExtractOptions@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CExtractOptions@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CExtractOptions@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CExtractOptions@@QAE@XZ PROC				; CExtractOptions::CExtractOptions, COMDAT
; _this$ = ecx
; Line 60
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CExtractOptions@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CExtractOptionsBase@@QAE@XZ		; CExtractOptionsBase::CExtractOptionsBase
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+36], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+37], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+38], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+39], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??0?$CObjectVector@UCProperty@@@@QAE@XZ	; CObjectVector<CProperty>::CObjectVector<CProperty>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CExtractOptions@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CExtractOptionsBase@@QAE@XZ
__ehhandler$??0CExtractOptions@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CExtractOptions@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CExtractOptions@@QAE@XZ ENDP				; CExtractOptions::CExtractOptions
PUBLIC	??0CExtractNtOptions@@QAE@XZ			; CExtractNtOptions::CExtractNtOptions
PUBLIC	??0CBoolPair@@QAE@XZ				; CBoolPair::CBoolPair
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CExtractOptionsBase@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CExtractOptionsBase@@QAE@XZ$0
__ehfuncinfo$??0CExtractOptionsBase@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CExtractOptionsBase@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CExtractOptionsBase@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CExtractOptionsBase@@QAE@XZ PROC			; CExtractOptionsBase::CExtractOptionsBase, COMDAT
; _this$ = ecx
; Line 34
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CExtractOptionsBase@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CBoolPair@@QAE@XZ			; CBoolPair::CBoolPair
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+2], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+3], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0CExtractNtOptions@@QAE@XZ		; CExtractNtOptions::CExtractNtOptions
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CExtractOptionsBase@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$??0CExtractOptionsBase@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CExtractOptionsBase@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CExtractOptionsBase@@QAE@XZ ENDP			; CExtractOptionsBase::CExtractOptionsBase
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CBoolPair@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CBoolPair@@QAE@XZ PROC				; CBoolPair::CBoolPair, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mytypes.h
; Line 15
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CBoolPair@@QAE@XZ ENDP				; CBoolPair::CBoolPair
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CExtractNtOptions@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CExtractNtOptions@@QAE@XZ PROC			; CExtractNtOptions::CExtractNtOptions, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\archiveextractcallback.h
; Line 63
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CBoolPair@@QAE@XZ			; CBoolPair::CBoolPair
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 2
	call	??0CBoolPair@@QAE@XZ			; CBoolPair::CBoolPair
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CBoolPair@@QAE@XZ			; CBoolPair::CBoolPair
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 6
	call	??0CBoolPair@@QAE@XZ			; CBoolPair::CBoolPair
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+9], 0
; Line 64
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+2], 1
; Line 65
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+4], 1
; Line 66
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+6], 1
; Line 67
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CExtractNtOptions@@QAE@XZ ENDP			; CExtractNtOptions::CExtractNtOptions
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CExtractOptionsBase@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CExtractOptionsBase@@QAE@XZ PROC			; CExtractOptionsBase::~CExtractOptionsBase, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1UString@@QAE@XZ			; UString::~UString
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CExtractOptionsBase@@QAE@XZ ENDP			; CExtractOptionsBase::~CExtractOptionsBase
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\update.h
xdata$x	SEGMENT
__unwindtable$??0CUpdateErrorInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CUpdateErrorInfo@@QAE@XZ$0
__ehfuncinfo$??0CUpdateErrorInfo@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CUpdateErrorInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CUpdateErrorInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CUpdateErrorInfo@@QAE@XZ PROC			; CUpdateErrorInfo::CUpdateErrorInfo, COMDAT
; _this$ = ecx
; Line 160
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CUpdateErrorInfo@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0AString@@QAE@XZ			; AString::AString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::CObjectVector<UString>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CUpdateErrorInfo@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1AString@@QAE@XZ			; AString::~AString
__ehhandler$??0CUpdateErrorInfo@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CUpdateErrorInfo@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CUpdateErrorInfo@@QAE@XZ ENDP			; CUpdateErrorInfo::CUpdateErrorInfo
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsTestCommand@CArcCommand@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsTestCommand@CArcCommand@@QBE_NXZ PROC		; CArcCommand::IsTestCommand, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\archivecommandline.h
; Line 39
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 3
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?IsTestCommand@CArcCommand@@QBE_NXZ ENDP		; CArcCommand::IsTestCommand
_TEXT	ENDS
PUBLIC	??1CHashOptions@@QAE@XZ				; CHashOptions::~CHashOptions
PUBLIC	??1CUpdateOptions@@QAE@XZ			; CUpdateOptions::~CUpdateOptions
PUBLIC	??1?$CObjectVector@UCProperty@@@@QAE@XZ		; CObjectVector<CProperty>::~CObjectVector<CProperty>
PUBLIC	??1CCensor@NWildcard@@QAE@XZ			; NWildcard::CCensor::~CCensor
PUBLIC	??0CHashOptions@@QAE@XZ				; CHashOptions::CHashOptions
PUBLIC	??0CUpdateOptions@@QAE@XZ			; CUpdateOptions::CUpdateOptions
PUBLIC	??0CCensor@NWildcard@@QAE@XZ			; NWildcard::CCensor::CCensor
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0CArcCmdLineOptions@@QAE@XZ DD 019930522H
	DD	0bH
	DD	FLAT:__unwindtable$??0CArcCmdLineOptions@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0CArcCmdLineOptions@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CArcCmdLineOptions@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CArcCmdLineOptions@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CArcCmdLineOptions@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CArcCmdLineOptions@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0CArcCmdLineOptions@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0CArcCmdLineOptions@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0CArcCmdLineOptions@@QAE@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??0CArcCmdLineOptions@@QAE@XZ$7
	DD	07H
	DD	FLAT:__unwindfunclet$??0CArcCmdLineOptions@@QAE@XZ$8
	DD	08H
	DD	FLAT:__unwindfunclet$??0CArcCmdLineOptions@@QAE@XZ$9
	DD	09H
	DD	FLAT:__unwindfunclet$??0CArcCmdLineOptions@@QAE@XZ$10
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CArcCmdLineOptions@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CArcCmdLineOptions@@QAE@XZ PROC			; CArcCmdLineOptions::CArcCmdLineOptions, COMDAT
; _this$ = ecx
; Line 125
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CArcCmdLineOptions@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+2], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+3], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+7], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0CCensor@NWildcard@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	call	??0?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::CObjectVector<UString>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 88					; 00000058H
	call	??0CCensor@NWildcard@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 124				; 0000007cH
	call	??0?$CObjectVector@UCProperty@@@@QAE@XZ	; CObjectVector<CProperty>::CObjectVector<CProperty>
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 136				; 00000088H
	call	??0CExtractOptionsBase@@QAE@XZ		; CExtractOptionsBase::CExtractOptionsBase
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 172				; 000000acH
	call	??0CBoolPair@@QAE@XZ			; CBoolPair::CBoolPair
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 174				; 000000aeH
	call	??0CBoolPair@@QAE@XZ			; CBoolPair::CBoolPair
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 176				; 000000b0H
	call	??0CBoolPair@@QAE@XZ			; CBoolPair::CBoolPair
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 178				; 000000b2H
	call	??0CBoolPair@@QAE@XZ			; CBoolPair::CBoolPair
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 184				; 000000b8H
	call	??0CUpdateOptions@@QAE@XZ		; CUpdateOptions::CUpdateOptions
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 464				; 000001d0H
	call	??0CHashOptions@@QAE@XZ			; CHashOptions::CHashOptions
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 484				; 000001e4H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 496				; 000001f0H
	call	??0?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::CObjectVector<UString>
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+508], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+512], 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+516], 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+520], 0
; Line 126
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CArcCmdLineOptions@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1CCensor@NWildcard@@QAE@XZ
__unwindfunclet$??0CArcCmdLineOptions@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??0CArcCmdLineOptions@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??0CArcCmdLineOptions@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	jmp	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
__unwindfunclet$??0CArcCmdLineOptions@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 88					; 00000058H
	jmp	??1CCensor@NWildcard@@QAE@XZ
__unwindfunclet$??0CArcCmdLineOptions@@QAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??0CArcCmdLineOptions@@QAE@XZ$6:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 124				; 0000007cH
	jmp	??1?$CObjectVector@UCProperty@@@@QAE@XZ	; CObjectVector<CProperty>::~CObjectVector<CProperty>
__unwindfunclet$??0CArcCmdLineOptions@@QAE@XZ$7:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 136				; 00000088H
	jmp	??1CExtractOptionsBase@@QAE@XZ
__unwindfunclet$??0CArcCmdLineOptions@@QAE@XZ$8:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 184				; 000000b8H
	jmp	??1CUpdateOptions@@QAE@XZ
__unwindfunclet$??0CArcCmdLineOptions@@QAE@XZ$9:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 464				; 000001d0H
	jmp	??1CHashOptions@@QAE@XZ
__unwindfunclet$??0CArcCmdLineOptions@@QAE@XZ$10:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 484				; 000001e4H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$??0CArcCmdLineOptions@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CArcCmdLineOptions@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CArcCmdLineOptions@@QAE@XZ ENDP			; CArcCmdLineOptions::CArcCmdLineOptions
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CHashOptions@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CHashOptions@@QAE@XZ PROC				; CHashOptions::CHashOptions, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\hashcalc.h
; Line 95
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::CObjectVector<UString>
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+13], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+14], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CHashOptions@@QAE@XZ ENDP				; CHashOptions::CHashOptions
_TEXT	ENDS
PUBLIC	??1?$CObjectVector@UCRenamePair@@@@QAE@XZ	; CObjectVector<CRenamePair>::~CObjectVector<CRenamePair>
PUBLIC	??1CArchivePath@@QAE@XZ				; CArchivePath::~CArchivePath
PUBLIC	??1?$CObjectVector@UCUpdateArchiveCommand@@@@QAE@XZ ; CObjectVector<CUpdateArchiveCommand>::~CObjectVector<CUpdateArchiveCommand>
PUBLIC	??1CCompressionMethodMode@@QAE@XZ		; CCompressionMethodMode::~CCompressionMethodMode
PUBLIC	??0?$CRecordVector@_K@@QAE@XZ			; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>
PUBLIC	??0?$CObjectVector@UCRenamePair@@@@QAE@XZ	; CObjectVector<CRenamePair>::CObjectVector<CRenamePair>
PUBLIC	??0CArchivePath@@QAE@XZ				; CArchivePath::CArchivePath
PUBLIC	??0?$CObjectVector@UCUpdateArchiveCommand@@@@QAE@XZ ; CObjectVector<CUpdateArchiveCommand>::CObjectVector<CUpdateArchiveCommand>
PUBLIC	??0CCompressionMethodMode@@QAE@XZ		; CCompressionMethodMode::CCompressionMethodMode
;	COMDAT xdata$x
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\update.h
xdata$x	SEGMENT
__ehfuncinfo$??0CUpdateOptions@@QAE@XZ DD 019930522H
	DD	09H
	DD	FLAT:__unwindtable$??0CUpdateOptions@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0CUpdateOptions@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CUpdateOptions@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CUpdateOptions@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CUpdateOptions@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CUpdateOptions@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0CUpdateOptions@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0CUpdateOptions@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0CUpdateOptions@@QAE@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??0CUpdateOptions@@QAE@XZ$7
	DD	07H
	DD	FLAT:__unwindfunclet$??0CUpdateOptions@@QAE@XZ$8
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CUpdateOptions@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CUpdateOptions@@QAE@XZ PROC				; CUpdateOptions::CUpdateOptions, COMDAT
; _this$ = ecx
; Line 136
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CUpdateOptions@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CCompressionMethodMode@@QAE@XZ	; CCompressionMethodMode::CCompressionMethodMode
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	??0?$CObjectVector@UCUpdateArchiveCommand@@@@QAE@XZ ; CObjectVector<CUpdateArchiveCommand>::CObjectVector<CUpdateArchiveCommand>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+68], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	call	??0CArchivePath@@QAE@XZ			; CArchivePath::CArchivePath
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+160], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+164], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 168				; 000000a8H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+180], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+181], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 184				; 000000b8H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+196], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+197], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+198], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 200				; 000000c8H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 212				; 000000d4H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+224], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 228				; 000000e4H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 240				; 000000f0H
	call	??0CBoolPair@@QAE@XZ			; CBoolPair::CBoolPair
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 242				; 000000f2H
	call	??0CBoolPair@@QAE@XZ			; CBoolPair::CBoolPair
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 244				; 000000f4H
	call	??0CBoolPair@@QAE@XZ			; CBoolPair::CBoolPair
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 246				; 000000f6H
	call	??0CBoolPair@@QAE@XZ			; CBoolPair::CBoolPair
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+248], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+249], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 252				; 000000fcH
	call	??0?$CObjectVector@UCRenamePair@@@@QAE@XZ ; CObjectVector<CRenamePair>::CObjectVector<CRenamePair>
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 264				; 00000108H
	call	??0?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CUpdateOptions@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CCompressionMethodMode@@QAE@XZ
__unwindfunclet$??0CUpdateOptions@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	jmp	??1?$CObjectVector@UCUpdateArchiveCommand@@@@QAE@XZ ; CObjectVector<CUpdateArchiveCommand>::~CObjectVector<CUpdateArchiveCommand>
__unwindfunclet$??0CUpdateOptions@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	jmp	??1CArchivePath@@QAE@XZ
__unwindfunclet$??0CUpdateOptions@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 168				; 000000a8H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??0CUpdateOptions@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 184				; 000000b8H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??0CUpdateOptions@@QAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 200				; 000000c8H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??0CUpdateOptions@@QAE@XZ$6:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 212				; 000000d4H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??0CUpdateOptions@@QAE@XZ$7:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 228				; 000000e4H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??0CUpdateOptions@@QAE@XZ$8:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 252				; 000000fcH
	jmp	??1?$CObjectVector@UCRenamePair@@@@QAE@XZ ; CObjectVector<CRenamePair>::~CObjectVector<CRenamePair>
__ehhandler$??0CUpdateOptions@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CUpdateOptions@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CUpdateOptions@@QAE@XZ ENDP				; CUpdateOptions::CUpdateOptions
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0CArchivePath@@QAE@XZ DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??0CArchivePath@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0CArchivePath@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CArchivePath@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CArchivePath@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CArchivePath@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CArchivePath@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0CArchivePath@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0CArchivePath@@QAE@XZ$5
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CArchivePath@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CArchivePath@@QAE@XZ PROC				; CArchivePath::CArchivePath, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CArchivePath@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+60], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CArchivePath@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??0CArchivePath@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??0CArchivePath@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??0CArchivePath@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??0CArchivePath@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??0CArchivePath@@QAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$??0CArchivePath@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CArchivePath@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CArchivePath@@QAE@XZ ENDP				; CArchivePath::CArchivePath
PUBLIC	??0COpenType@@QAE@XZ				; COpenType::COpenType
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CCompressionMethodMode@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CCompressionMethodMode@@QAE@XZ PROC			; CCompressionMethodMode::CCompressionMethodMode, COMDAT
; _this$ = ecx
; Line 59
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0COpenType@@QAE@XZ			; COpenType::COpenType
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??0?$CObjectVector@UCProperty@@@@QAE@XZ	; CObjectVector<CProperty>::CObjectVector<CProperty>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CCompressionMethodMode@@QAE@XZ ENDP			; CCompressionMethodMode::CCompressionMethodMode
_TEXT	ENDS
PUBLIC	??0COpenSpecFlags@@QAE@XZ			; COpenSpecFlags::COpenSpecFlags
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0COpenType@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0COpenType@@QAE@XZ PROC				; COpenType::COpenType, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\openarchive.h
; Line 99
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0COpenSpecFlags@@QAE@XZ		; COpenSpecFlags::COpenSpecFlags
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 7
	call	??0COpenSpecFlags@@QAE@XZ		; COpenSpecFlags::COpenSpecFlags
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 10					; 0000000aH
	call	??0COpenSpecFlags@@QAE@XZ		; COpenSpecFlags::COpenSpecFlags
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 13					; 0000000dH
	call	??0COpenSpecFlags@@QAE@XZ		; COpenSpecFlags::COpenSpecFlags
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+16], 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+17], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+18], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+19], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+20], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+21], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
; Line 100
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+4], 1
; Line 101
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+5], 1
; Line 102
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+6], 1
; Line 104
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+7], 1
; Line 106
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+14], 1
; Line 107
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+15], 1
; Line 108
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+13], 1
; Line 111
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0COpenType@@QAE@XZ ENDP				; COpenType::COpenType
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0COpenSpecFlags@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0COpenSpecFlags@@QAE@XZ PROC				; COpenSpecFlags::COpenSpecFlags, COMDAT
; _this$ = ecx
; Line 57
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+2], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0COpenSpecFlags@@QAE@XZ ENDP				; COpenSpecFlags::COpenSpecFlags
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CCompressionMethodMode@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CCompressionMethodMode@@QAE@XZ PROC			; CCompressionMethodMode::~CCompressionMethodMode, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??1?$CObjectVector@UCProperty@@@@QAE@XZ	; CObjectVector<CProperty>::~CObjectVector<CProperty>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CCompressionMethodMode@@QAE@XZ ENDP			; CCompressionMethodMode::~CCompressionMethodMode
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CArchivePath@@QAE@XZ DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??1CArchivePath@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1CArchivePath@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CArchivePath@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CArchivePath@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CArchivePath@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CArchivePath@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1CArchivePath@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??1CArchivePath@@QAE@XZ$5
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CArchivePath@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CArchivePath@@QAE@XZ PROC				; CArchivePath::~CArchivePath, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CArchivePath@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CArchivePath@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??1CArchivePath@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??1CArchivePath@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??1CArchivePath@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??1CArchivePath@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??1CArchivePath@@QAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$??1CArchivePath@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CArchivePath@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CArchivePath@@QAE@XZ ENDP				; CArchivePath::~CArchivePath
PUBLIC	??1?$CObjectVector@UCPair@NWildcard@@@@QAE@XZ	; CObjectVector<NWildcard::CPair>::~CObjectVector<NWildcard::CPair>
PUBLIC	??0?$CObjectVector@UCCensorPath@NWildcard@@@@QAE@XZ ; CObjectVector<NWildcard::CCensorPath>::CObjectVector<NWildcard::CCensorPath>
PUBLIC	??0?$CObjectVector@UCPair@NWildcard@@@@QAE@XZ	; CObjectVector<NWildcard::CPair>::CObjectVector<NWildcard::CPair>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CCensor@NWildcard@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CCensor@NWildcard@@QAE@XZ$0
__ehfuncinfo$??0CCensor@NWildcard@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CCensor@NWildcard@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CCensor@NWildcard@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CCensor@NWildcard@@QAE@XZ PROC			; NWildcard::CCensor::CCensor, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CCensor@NWildcard@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CObjectVector@UCPair@NWildcard@@@@QAE@XZ ; CObjectVector<NWildcard::CPair>::CObjectVector<NWildcard::CPair>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0?$CObjectVector@UCCensorPath@NWildcard@@@@QAE@XZ ; CObjectVector<NWildcard::CCensorPath>::CObjectVector<NWildcard::CCensorPath>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CCensor@NWildcard@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CObjectVector@UCPair@NWildcard@@@@QAE@XZ ; CObjectVector<NWildcard::CPair>::~CObjectVector<NWildcard::CPair>
__ehhandler$??0CCensor@NWildcard@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CCensor@NWildcard@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CCensor@NWildcard@@QAE@XZ ENDP			; NWildcard::CCensor::CCensor
PUBLIC	??1?$CObjectVector@UCCensorPath@NWildcard@@@@QAE@XZ ; CObjectVector<NWildcard::CCensorPath>::~CObjectVector<NWildcard::CCensorPath>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CCensor@NWildcard@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CCensor@NWildcard@@QAE@XZ$0
__ehfuncinfo$??1CCensor@NWildcard@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CCensor@NWildcard@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CCensor@NWildcard@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CCensor@NWildcard@@QAE@XZ PROC			; NWildcard::CCensor::~CCensor, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CCensor@NWildcard@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1?$CObjectVector@UCCensorPath@NWildcard@@@@QAE@XZ ; CObjectVector<NWildcard::CCensorPath>::~CObjectVector<NWildcard::CCensorPath>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CObjectVector@UCPair@NWildcard@@@@QAE@XZ ; CObjectVector<NWildcard::CPair>::~CObjectVector<NWildcard::CPair>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CCensor@NWildcard@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CObjectVector@UCPair@NWildcard@@@@QAE@XZ ; CObjectVector<NWildcard::CPair>::~CObjectVector<NWildcard::CPair>
__ehhandler$??1CCensor@NWildcard@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CCensor@NWildcard@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CCensor@NWildcard@@QAE@XZ ENDP			; NWildcard::CCensor::~CCensor
PUBLIC	??1?$CRecordVector@_K@@QAE@XZ			; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CUpdateOptions@@QAE@XZ DD 019930522H
	DD	09H
	DD	FLAT:__unwindtable$??1CUpdateOptions@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1CUpdateOptions@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CUpdateOptions@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CUpdateOptions@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CUpdateOptions@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CUpdateOptions@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1CUpdateOptions@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??1CUpdateOptions@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??1CUpdateOptions@@QAE@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??1CUpdateOptions@@QAE@XZ$7
	DD	07H
	DD	FLAT:__unwindfunclet$??1CUpdateOptions@@QAE@XZ$8
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CUpdateOptions@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CUpdateOptions@@QAE@XZ PROC				; CUpdateOptions::~CUpdateOptions, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CUpdateOptions@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 8
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 264				; 00000108H
	call	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 252				; 000000fcH
	call	??1?$CObjectVector@UCRenamePair@@@@QAE@XZ ; CObjectVector<CRenamePair>::~CObjectVector<CRenamePair>
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 228				; 000000e4H
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 212				; 000000d4H
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 200				; 000000c8H
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 184				; 000000b8H
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 168				; 000000a8H
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	call	??1CArchivePath@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	??1?$CObjectVector@UCUpdateArchiveCommand@@@@QAE@XZ ; CObjectVector<CUpdateArchiveCommand>::~CObjectVector<CUpdateArchiveCommand>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CCompressionMethodMode@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CUpdateOptions@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CCompressionMethodMode@@QAE@XZ
__unwindfunclet$??1CUpdateOptions@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	jmp	??1?$CObjectVector@UCUpdateArchiveCommand@@@@QAE@XZ ; CObjectVector<CUpdateArchiveCommand>::~CObjectVector<CUpdateArchiveCommand>
__unwindfunclet$??1CUpdateOptions@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	jmp	??1CArchivePath@@QAE@XZ
__unwindfunclet$??1CUpdateOptions@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 168				; 000000a8H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??1CUpdateOptions@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 184				; 000000b8H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??1CUpdateOptions@@QAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 200				; 000000c8H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??1CUpdateOptions@@QAE@XZ$6:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 212				; 000000d4H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??1CUpdateOptions@@QAE@XZ$7:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 228				; 000000e4H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??1CUpdateOptions@@QAE@XZ$8:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 252				; 000000fcH
	jmp	??1?$CObjectVector@UCRenamePair@@@@QAE@XZ ; CObjectVector<CRenamePair>::~CObjectVector<CRenamePair>
__ehhandler$??1CUpdateOptions@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CUpdateOptions@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CUpdateOptions@@QAE@XZ ENDP				; CUpdateOptions::~CUpdateOptions
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CHashOptions@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CHashOptions@@QAE@XZ PROC				; CHashOptions::~CHashOptions, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CHashOptions@@QAE@XZ ENDP				; CHashOptions::~CHashOptions
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??BCStdOutStream@@QAEPAU_iobuf@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BCStdOutStream@@QAEPAU_iobuf@@XZ PROC			; CStdOutStream::operator _iobuf *, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\stdoutstream.h
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??BCStdOutStream@@QAEPAU_iobuf@@XZ ENDP			; CStdOutStream::operator _iobuf *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_func$ = 8						; size = 4
??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z PROC	; CStdOutStream::operator<<, COMDAT
; _this$ = ecx
; Line 29
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 30
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	DWORD PTR _func$[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 31
	mov	eax, DWORD PTR _this$[ebp]
; Line 32
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ENDP	; CStdOutStream::operator<<
_TEXT	ENDS
EXTRN	__imp__fputs:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??6CStdOutStream@@QAEAAV0@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
??6CStdOutStream@@QAEAAV0@PBD@Z PROC			; CStdOutStream::operator<<, COMDAT
; _this$ = ecx
; Line 35
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 36
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	DWORD PTR __imp__fputs
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 37
	mov	eax, DWORD PTR _this$[ebp]
; Line 38
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??6CStdOutStream@@QAEAAV0@PBD@Z ENDP			; CStdOutStream::operator<<
_TEXT	ENDS
EXTRN	__imp__fputc:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??6CStdOutStream@@QAEAAV0@D@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_c$ = 8							; size = 1
??6CStdOutStream@@QAEAAV0@D@Z PROC			; CStdOutStream::operator<<, COMDAT
; _this$ = ecx
; Line 41
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 42
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	DWORD PTR __imp__fputc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 43
	mov	eax, DWORD PTR _this$[ebp]
; Line 44
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??6CStdOutStream@@QAEAAV0@D@Z ENDP			; CStdOutStream::operator<<
_TEXT	ENDS
PUBLIC	?NeedPercents@COpenCallbackConsole@@IBE_NXZ	; COpenCallbackConsole::NeedPercents
EXTRN	?ClosePrint@CPercentPrinter@@QAEX_N@Z:PROC	; CPercentPrinter::ClosePrint
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ClosePercents@COpenCallbackConsole@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ClosePercents@COpenCallbackConsole@@QAEXXZ PROC	; COpenCallbackConsole::ClosePercents, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\console\opencallbackconsole.h
; Line 32
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 33
	mov	ecx, DWORD PTR _this$[ebp]
	call	?NeedPercents@COpenCallbackConsole@@IBE_NXZ ; COpenCallbackConsole::NeedPercents
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@ClosePerce
; Line 34
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?ClosePrint@CPercentPrinter@@QAEX_N@Z	; CPercentPrinter::ClosePrint
$LN2@ClosePerce:
; Line 35
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ClosePercents@COpenCallbackConsole@@QAEXXZ ENDP	; COpenCallbackConsole::ClosePercents
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?NeedPercents@COpenCallbackConsole@@IBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?NeedPercents@COpenCallbackConsole@@IBE_NXZ PROC	; COpenCallbackConsole::NeedPercents, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+172], 0
	setne	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?NeedPercents@COpenCallbackConsole@@IBE_NXZ ENDP	; COpenCallbackConsole::NeedPercents
_TEXT	ENDS
PUBLIC	??0CPercentPrinter@@QAE@I@Z			; CPercentPrinter::CPercentPrinter
PUBLIC	??_7COpenCallbackConsole@@6B@			; COpenCallbackConsole::`vftable'
PUBLIC	??0IOpenCallbackUI@@QAE@XZ			; IOpenCallbackUI::IOpenCallbackUI
PUBLIC	??_R4COpenCallbackConsole@@6B@			; COpenCallbackConsole::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCOpenCallbackConsole@@@8		; COpenCallbackConsole `RTTI Type Descriptor'
PUBLIC	??_R3COpenCallbackConsole@@8			; COpenCallbackConsole::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2COpenCallbackConsole@@8			; COpenCallbackConsole::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@COpenCallbackConsole@@8		; COpenCallbackConsole::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@IOpenCallbackUI@@8		; IOpenCallbackUI::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIOpenCallbackUI@@@8			; IOpenCallbackUI `RTTI Type Descriptor'
PUBLIC	??_R3IOpenCallbackUI@@8				; IOpenCallbackUI::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IOpenCallbackUI@@8				; IOpenCallbackUI::`RTTI Base Class Array'
EXTRN	??1CPercentPrinter@@QAE@XZ:PROC			; CPercentPrinter::~CPercentPrinter
EXTRN	?Open_CheckBreak@COpenCallbackConsole@@UAEJXZ:PROC ; COpenCallbackConsole::Open_CheckBreak
EXTRN	?Open_SetTotal@COpenCallbackConsole@@UAEJPB_K0@Z:PROC ; COpenCallbackConsole::Open_SetTotal
EXTRN	?Open_SetCompleted@COpenCallbackConsole@@UAEJPB_K0@Z:PROC ; COpenCallbackConsole::Open_SetCompleted
EXTRN	?Open_Finished@COpenCallbackConsole@@UAEJXZ:PROC ; COpenCallbackConsole::Open_Finished
EXTRN	?Open_CryptoGetTextPassword@COpenCallbackConsole@@UAEJPAPA_W@Z:PROC ; COpenCallbackConsole::Open_CryptoGetTextPassword
;	COMDAT ??_R2IOpenCallbackUI@@8
rdata$r	SEGMENT
??_R2IOpenCallbackUI@@8 DD FLAT:??_R1A@?0A@EA@IOpenCallbackUI@@8 ; IOpenCallbackUI::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3IOpenCallbackUI@@8
rdata$r	SEGMENT
??_R3IOpenCallbackUI@@8 DD 00H				; IOpenCallbackUI::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2IOpenCallbackUI@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIOpenCallbackUI@@@8
_DATA	SEGMENT
??_R0?AUIOpenCallbackUI@@@8 DD FLAT:??_7type_info@@6B@	; IOpenCallbackUI `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIOpenCallbackUI@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IOpenCallbackUI@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IOpenCallbackUI@@8 DD FLAT:??_R0?AUIOpenCallbackUI@@@8 ; IOpenCallbackUI::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IOpenCallbackUI@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@COpenCallbackConsole@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@COpenCallbackConsole@@8 DD FLAT:??_R0?AVCOpenCallbackConsole@@@8 ; COpenCallbackConsole::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3COpenCallbackConsole@@8
rdata$r	ENDS
;	COMDAT ??_R2COpenCallbackConsole@@8
rdata$r	SEGMENT
??_R2COpenCallbackConsole@@8 DD FLAT:??_R1A@?0A@EA@COpenCallbackConsole@@8 ; COpenCallbackConsole::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IOpenCallbackUI@@8
rdata$r	ENDS
;	COMDAT ??_R3COpenCallbackConsole@@8
rdata$r	SEGMENT
??_R3COpenCallbackConsole@@8 DD 00H			; COpenCallbackConsole::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2COpenCallbackConsole@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCOpenCallbackConsole@@@8
_DATA	SEGMENT
??_R0?AVCOpenCallbackConsole@@@8 DD FLAT:??_7type_info@@6B@ ; COpenCallbackConsole `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCOpenCallbackConsole@@', 00H
_DATA	ENDS
;	COMDAT ??_R4COpenCallbackConsole@@6B@
rdata$r	SEGMENT
??_R4COpenCallbackConsole@@6B@ DD 00H			; COpenCallbackConsole::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCOpenCallbackConsole@@@8
	DD	FLAT:??_R3COpenCallbackConsole@@8
rdata$r	ENDS
;	COMDAT ??_7COpenCallbackConsole@@6B@
CONST	SEGMENT
??_7COpenCallbackConsole@@6B@ DD FLAT:??_R4COpenCallbackConsole@@6B@ ; COpenCallbackConsole::`vftable'
	DD	FLAT:?Open_CheckBreak@COpenCallbackConsole@@UAEJXZ
	DD	FLAT:?Open_SetTotal@COpenCallbackConsole@@UAEJPB_K0@Z
	DD	FLAT:?Open_SetCompleted@COpenCallbackConsole@@UAEJPB_K0@Z
	DD	FLAT:?Open_Finished@COpenCallbackConsole@@UAEJXZ
	DD	FLAT:?Open_CryptoGetTextPassword@COpenCallbackConsole@@UAEJPAPA_W@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0COpenCallbackConsole@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0COpenCallbackConsole@@QAE@XZ$0
__ehfuncinfo$??0COpenCallbackConsole@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0COpenCallbackConsole@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0COpenCallbackConsole@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0COpenCallbackConsole@@QAE@XZ PROC			; COpenCallbackConsole::COpenCallbackConsole, COMDAT
; _this$ = ecx
; Line 47
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0COpenCallbackConsole@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IOpenCallbackUI@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7COpenCallbackConsole@@6B@
	push	200					; 000000c8H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0CPercentPrinter@@QAE@I@Z		; CPercentPrinter::CPercentPrinter
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+192], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+193], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+194], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+195], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 196				; 000000c4H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0COpenCallbackConsole@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1CPercentPrinter@@QAE@XZ		; CPercentPrinter::~CPercentPrinter
__ehhandler$??0COpenCallbackConsole@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0COpenCallbackConsole@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0COpenCallbackConsole@@QAE@XZ ENDP			; COpenCallbackConsole::COpenCallbackConsole
PUBLIC	??1CPercentPrinterState@@QAE@XZ			; CPercentPrinterState::~CPercentPrinterState
PUBLIC	??0CPercentPrinterState@@QAE@XZ			; CPercentPrinterState::CPercentPrinterState
;	COMDAT xdata$x
; File c:\workspace\7z1505-src\cpp\7zip\ui\console\percentprinter.h
xdata$x	SEGMENT
__ehfuncinfo$??0CPercentPrinter@@QAE@I@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??0CPercentPrinter@@QAE@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0CPercentPrinter@@QAE@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CPercentPrinter@@QAE@I@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CPercentPrinter@@QAE@I@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CPercentPrinter@@QAE@I@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CPercentPrinter@@QAE@I@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0CPercentPrinter@@QAE@I@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0CPercentPrinter@@QAE@I@Z$5
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CPercentPrinter@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_tickStep$ = 8						; size = 4
??0CPercentPrinter@@QAE@I@Z PROC			; CPercentPrinter::CPercentPrinter, COMDAT
; _this$ = ecx
; Line 54
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CPercentPrinter@@QAE@I@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CPercentPrinterState@@QAE@XZ		; CPercentPrinterState::CPercentPrinterState
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _tickStep$[ebp]
	mov	DWORD PTR [eax+48], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+52], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	??0AString@@QAE@XZ			; AString::AString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	call	??0AString@@QAE@XZ			; AString::AString
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	call	??0AString@@QAE@XZ			; AString::AString
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 92					; 0000005cH
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 104				; 00000068H
	call	??0CPercentPrinterState@@QAE@XZ		; CPercentPrinterState::CPercentPrinterState
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 152				; 00000098H
	call	??0AString@@QAE@XZ			; AString::AString
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+168], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+172], 79			; 0000004fH
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CPercentPrinter@@QAE@I@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CPercentPrinterState@@QAE@XZ
__unwindfunclet$??0CPercentPrinter@@QAE@I@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	jmp	??1AString@@QAE@XZ			; AString::~AString
__unwindfunclet$??0CPercentPrinter@@QAE@I@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	jmp	??1AString@@QAE@XZ			; AString::~AString
__unwindfunclet$??0CPercentPrinter@@QAE@I@Z$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	jmp	??1AString@@QAE@XZ			; AString::~AString
__unwindfunclet$??0CPercentPrinter@@QAE@I@Z$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 92					; 0000005cH
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??0CPercentPrinter@@QAE@I@Z$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 104				; 00000068H
	jmp	??1CPercentPrinterState@@QAE@XZ
__ehhandler$??0CPercentPrinter@@QAE@I@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CPercentPrinter@@QAE@I@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CPercentPrinter@@QAE@I@Z ENDP			; CPercentPrinter::CPercentPrinter
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CPercentPrinterState@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CPercentPrinterState@@QAE@XZ$0
__ehfuncinfo$??0CPercentPrinterState@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CPercentPrinterState@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CPercentPrinterState@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CPercentPrinterState@@QAE@XZ PROC			; CPercentPrinterState::CPercentPrinterState, COMDAT
; _this$ = ecx
; Line 24
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CPercentPrinterState@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], -1
	mov	DWORD PTR [ecx+12], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0AString@@QAE@XZ			; AString::AString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CPercentPrinterState@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1AString@@QAE@XZ			; AString::~AString
__ehhandler$??0CPercentPrinterState@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CPercentPrinterState@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CPercentPrinterState@@QAE@XZ ENDP			; CPercentPrinterState::CPercentPrinterState
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CPercentPrinterState@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CPercentPrinterState@@QAE@XZ$0
__ehfuncinfo$??1CPercentPrinterState@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CPercentPrinterState@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CPercentPrinterState@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CPercentPrinterState@@QAE@XZ PROC			; CPercentPrinterState::~CPercentPrinterState, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CPercentPrinterState@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CPercentPrinterState@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1AString@@QAE@XZ			; AString::~AString
__ehhandler$??1CPercentPrinterState@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CPercentPrinterState@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CPercentPrinterState@@QAE@XZ ENDP			; CPercentPrinterState::~CPercentPrinterState
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Init@COpenCallbackConsole@@QAEXPAVCStdOutStream@@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_outStream$ = 8						; size = 4
_errorStream$ = 12					; size = 4
_percentStream$ = 16					; size = 4
?Init@COpenCallbackConsole@@QAEXPAVCStdOutStream@@00@Z PROC ; COpenCallbackConsole::Init, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\console\opencallbackconsole.h
; Line 50
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 51
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _outStream$[ebp]
	mov	DWORD PTR [eax+184], ecx
; Line 52
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _errorStream$[ebp]
	mov	DWORD PTR [edx+188], eax
; Line 53
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _percentStream$[ebp]
	mov	DWORD PTR [ecx+172], edx
; Line 54
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Init@COpenCallbackConsole@@QAEXPAVCStdOutStream@@00@Z ENDP ; COpenCallbackConsole::Init
_TEXT	ENDS
PUBLIC	??_7IOpenCallbackUI@@6B@			; IOpenCallbackUI::`vftable'
PUBLIC	??_R4IOpenCallbackUI@@6B@			; IOpenCallbackUI::`RTTI Complete Object Locator'
EXTRN	__purecall:PROC
;	COMDAT ??_R4IOpenCallbackUI@@6B@
rdata$r	SEGMENT
??_R4IOpenCallbackUI@@6B@ DD 00H			; IOpenCallbackUI::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIOpenCallbackUI@@@8
	DD	FLAT:??_R3IOpenCallbackUI@@8
rdata$r	ENDS
;	COMDAT ??_7IOpenCallbackUI@@6B@
CONST	SEGMENT
??_7IOpenCallbackUI@@6B@ DD FLAT:??_R4IOpenCallbackUI@@6B@ ; IOpenCallbackUI::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0IOpenCallbackUI@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IOpenCallbackUI@@QAE@XZ PROC				; IOpenCallbackUI::IOpenCallbackUI, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7IOpenCallbackUI@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0IOpenCallbackUI@@QAE@XZ ENDP				; IOpenCallbackUI::IOpenCallbackUI
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Init@CExtractScanConsole@@QAEXPAVCStdOutStream@@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_outStream$ = 8						; size = 4
_errorStream$ = 12					; size = 4
_percentStream$ = 16					; size = 4
?Init@CExtractScanConsole@@QAEXPAVCStdOutStream@@00@Z PROC ; CExtractScanConsole::Init, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\console\extractcallbackconsole.h
; Line 36
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 37
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _outStream$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 38
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _errorStream$[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 39
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _percentStream$[ebp]
	mov	DWORD PTR [ecx+180], edx
; Line 40
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Init@CExtractScanConsole@@QAEXPAVCStdOutStream@@00@Z ENDP ; CExtractScanConsole::Init
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SetWindowWidth@CExtractScanConsole@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_width$ = 8						; size = 4
?SetWindowWidth@CExtractScanConsole@@QAEXI@Z PROC	; CExtractScanConsole::SetWindowWidth, COMDAT
; _this$ = ecx
; Line 42
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _width$[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+188], eax
	mov	esp, ebp
	pop	ebp
	ret	4
?SetWindowWidth@CExtractScanConsole@@QAEXI@Z ENDP	; CExtractScanConsole::SetWindowWidth
_TEXT	ENDS
PUBLIC	?NeedPercents@CExtractScanConsole@@ABE_NXZ	; CExtractScanConsole::NeedPercents
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?CloseScanning@CExtractScanConsole@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CloseScanning@CExtractScanConsole@@QAEXXZ PROC		; CExtractScanConsole::CloseScanning, COMDAT
; _this$ = ecx
; Line 49
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 50
	mov	ecx, DWORD PTR _this$[ebp]
	call	?NeedPercents@CExtractScanConsole@@ABE_NXZ ; CExtractScanConsole::NeedPercents
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@CloseScann
; Line 51
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?ClosePrint@CPercentPrinter@@QAEX_N@Z	; CPercentPrinter::ClosePrint
$LN2@CloseScann:
; Line 52
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?CloseScanning@CExtractScanConsole@@QAEXXZ ENDP		; CExtractScanConsole::CloseScanning
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?NeedPercents@CExtractScanConsole@@ABE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?NeedPercents@CExtractScanConsole@@ABE_NXZ PROC		; CExtractScanConsole::NeedPercents, COMDAT
; _this$ = ecx
; Line 24
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+180], 0
	setne	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?NeedPercents@CExtractScanConsole@@ABE_NXZ ENDP		; CExtractScanConsole::NeedPercents
_TEXT	ENDS
PUBLIC	??_7CExtractCallbackConsole@@6BCOpenCallbackConsole@@@ ; CExtractCallbackConsole::`vftable'
PUBLIC	??_7CExtractCallbackConsole@@6BICryptoGetTextPassword@@@ ; CExtractCallbackConsole::`vftable'
PUBLIC	??_7CExtractCallbackConsole@@6BIFolderArchiveExtractCallback2@@@ ; CExtractCallbackConsole::`vftable'
PUBLIC	??_7CExtractCallbackConsole@@6BIExtractCallbackUI@@@ ; CExtractCallbackConsole::`vftable'
PUBLIC	??0ICryptoGetTextPassword@@QAE@XZ		; ICryptoGetTextPassword::ICryptoGetTextPassword
PUBLIC	??0IFolderArchiveExtractCallback2@@QAE@XZ	; IFolderArchiveExtractCallback2::IFolderArchiveExtractCallback2
PUBLIC	??0IExtractCallbackUI@@QAE@XZ			; IExtractCallbackUI::IExtractCallbackUI
PUBLIC	??_R4CExtractCallbackConsole@@6BIExtractCallbackUI@@@ ; CExtractCallbackConsole::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCExtractCallbackConsole@@@8		; CExtractCallbackConsole `RTTI Type Descriptor'
PUBLIC	??_R3CExtractCallbackConsole@@8			; CExtractCallbackConsole::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CExtractCallbackConsole@@8			; CExtractCallbackConsole::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CExtractCallbackConsole@@8	; CExtractCallbackConsole::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@IExtractCallbackUI@@8		; IExtractCallbackUI::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIExtractCallbackUI@@@8			; IExtractCallbackUI `RTTI Type Descriptor'
PUBLIC	??_R3IExtractCallbackUI@@8			; IExtractCallbackUI::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IExtractCallbackUI@@8			; IExtractCallbackUI::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IFolderArchiveExtractCallback@@8	; IFolderArchiveExtractCallback::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIFolderArchiveExtractCallback@@@8	; IFolderArchiveExtractCallback `RTTI Type Descriptor'
PUBLIC	??_R3IFolderArchiveExtractCallback@@8		; IFolderArchiveExtractCallback::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IFolderArchiveExtractCallback@@8		; IFolderArchiveExtractCallback::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IProgress@@8			; IProgress::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIProgress@@@8				; IProgress `RTTI Type Descriptor'
PUBLIC	??_R3IProgress@@8				; IProgress::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IProgress@@8				; IProgress::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EC@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
PUBLIC	??_R13?0A@EA@IFolderArchiveExtractCallback2@@8	; IFolderArchiveExtractCallback2::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AUIFolderArchiveExtractCallback2@@@8	; IFolderArchiveExtractCallback2 `RTTI Type Descriptor'
PUBLIC	??_R3IFolderArchiveExtractCallback2@@8		; IFolderArchiveExtractCallback2::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IFolderArchiveExtractCallback2@@8		; IFolderArchiveExtractCallback2::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IFolderArchiveExtractCallback2@@8	; IFolderArchiveExtractCallback2::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EC@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
PUBLIC	??_R17?0A@EA@ICryptoGetTextPassword@@8		; ICryptoGetTextPassword::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	??_R0?AUICryptoGetTextPassword@@@8		; ICryptoGetTextPassword `RTTI Type Descriptor'
PUBLIC	??_R3ICryptoGetTextPassword@@8			; ICryptoGetTextPassword::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ICryptoGetTextPassword@@8			; ICryptoGetTextPassword::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ICryptoGetTextPassword@@8		; ICryptoGetTextPassword::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R17?0A@EC@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
PUBLIC	??_R1BA@?0A@EA@COpenCallbackConsole@@8		; COpenCallbackConsole::`RTTI Base Class Descriptor at (16,-1,0,64)'
PUBLIC	??_R1BA@?0A@EA@IOpenCallbackUI@@8		; IOpenCallbackUI::`RTTI Base Class Descriptor at (16,-1,0,64)'
PUBLIC	??_R1OA@?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (224,-1,0,64)'
PUBLIC	?QueryInterface@CExtractCallbackConsole@@UAGJABU_GUID@@PAPAX@Z ; CExtractCallbackConsole::QueryInterface
PUBLIC	?AddRef@CExtractCallbackConsole@@UAGKXZ		; CExtractCallbackConsole::AddRef
PUBLIC	?Release@CExtractCallbackConsole@@UAGKXZ	; CExtractCallbackConsole::Release
PUBLIC	??_R4CExtractCallbackConsole@@6BIFolderArchiveExtractCallback2@@@ ; CExtractCallbackConsole::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@CExtractCallbackConsole@@W3AGJABU_GUID@@PAPAX@Z ; [thunk]:CExtractCallbackConsole::QueryInterface`adjustor{4}'
PUBLIC	?AddRef@CExtractCallbackConsole@@W3AGKXZ	; [thunk]:CExtractCallbackConsole::AddRef`adjustor{4}'
PUBLIC	?Release@CExtractCallbackConsole@@W3AGKXZ	; [thunk]:CExtractCallbackConsole::Release`adjustor{4}'
PUBLIC	??_R4CExtractCallbackConsole@@6BICryptoGetTextPassword@@@ ; CExtractCallbackConsole::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@CExtractCallbackConsole@@W7AGJABU_GUID@@PAPAX@Z ; [thunk]:CExtractCallbackConsole::QueryInterface`adjustor{8}'
PUBLIC	?AddRef@CExtractCallbackConsole@@W7AGKXZ	; [thunk]:CExtractCallbackConsole::AddRef`adjustor{8}'
PUBLIC	?Release@CExtractCallbackConsole@@W7AGKXZ	; [thunk]:CExtractCallbackConsole::Release`adjustor{8}'
PUBLIC	??_R4CExtractCallbackConsole@@6BCOpenCallbackConsole@@@ ; CExtractCallbackConsole::`RTTI Complete Object Locator'
EXTRN	?SetTotal@CExtractCallbackConsole@@UAGJ_K@Z:PROC ; CExtractCallbackConsole::SetTotal
EXTRN	?SetCompleted@CExtractCallbackConsole@@UAGJPB_K@Z:PROC ; CExtractCallbackConsole::SetCompleted
EXTRN	?AskOverwrite@CExtractCallbackConsole@@UAGJPB_WPBU_FILETIME@@PB_K012PAH@Z:PROC ; CExtractCallbackConsole::AskOverwrite
EXTRN	?PrepareOperation@CExtractCallbackConsole@@UAGJPB_WHHPB_K@Z:PROC ; CExtractCallbackConsole::PrepareOperation
EXTRN	?MessageError@CExtractCallbackConsole@@UAGJPB_W@Z:PROC ; CExtractCallbackConsole::MessageError
EXTRN	?SetOperationResult@CExtractCallbackConsole@@UAGJHH@Z:PROC ; CExtractCallbackConsole::SetOperationResult
EXTRN	?BeforeOpen@CExtractCallbackConsole@@UAEJPB_W_N@Z:PROC ; CExtractCallbackConsole::BeforeOpen
EXTRN	?OpenResult@CExtractCallbackConsole@@UAEJPBVCCodecs@@ABUCArchiveLink@@PB_WJ@Z:PROC ; CExtractCallbackConsole::OpenResult
EXTRN	?ThereAreNoFiles@CExtractCallbackConsole@@UAEJXZ:PROC ; CExtractCallbackConsole::ThereAreNoFiles
EXTRN	?ExtractResult@CExtractCallbackConsole@@UAEJJ@Z:PROC ; CExtractCallbackConsole::ExtractResult
EXTRN	?SetPassword@CExtractCallbackConsole@@UAEJABVUString@@@Z:PROC ; CExtractCallbackConsole::SetPassword
EXTRN	?ReportExtractResult@CExtractCallbackConsole@@UAGJHHPB_W@Z:PROC ; CExtractCallbackConsole::ReportExtractResult
EXTRN	?CryptoGetTextPassword@CExtractCallbackConsole@@UAGJPAPA_W@Z:PROC ; CExtractCallbackConsole::CryptoGetTextPassword
;	COMDAT ??_R4CExtractCallbackConsole@@6BCOpenCallbackConsole@@@
rdata$r	SEGMENT
??_R4CExtractCallbackConsole@@6BCOpenCallbackConsole@@@ DD 00H ; CExtractCallbackConsole::`RTTI Complete Object Locator'
	DD	010H
	DD	00H
	DD	FLAT:??_R0?AVCExtractCallbackConsole@@@8
	DD	FLAT:??_R3CExtractCallbackConsole@@8
rdata$r	ENDS
;	COMDAT ??_R4CExtractCallbackConsole@@6BICryptoGetTextPassword@@@
rdata$r	SEGMENT
??_R4CExtractCallbackConsole@@6BICryptoGetTextPassword@@@ DD 00H ; CExtractCallbackConsole::`RTTI Complete Object Locator'
	DD	08H
	DD	00H
	DD	FLAT:??_R0?AVCExtractCallbackConsole@@@8
	DD	FLAT:??_R3CExtractCallbackConsole@@8
rdata$r	ENDS
;	COMDAT ??_R4CExtractCallbackConsole@@6BIFolderArchiveExtractCallback2@@@
rdata$r	SEGMENT
??_R4CExtractCallbackConsole@@6BIFolderArchiveExtractCallback2@@@ DD 00H ; CExtractCallbackConsole::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVCExtractCallbackConsole@@@8
	DD	FLAT:??_R3CExtractCallbackConsole@@8
rdata$r	ENDS
;	COMDAT ??_R1OA@?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R1OA@?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (224,-1,0,64)'
	DD	00H
	DD	0e0H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R1BA@?0A@EA@IOpenCallbackUI@@8
rdata$r	SEGMENT
??_R1BA@?0A@EA@IOpenCallbackUI@@8 DD FLAT:??_R0?AUIOpenCallbackUI@@@8 ; IOpenCallbackUI::`RTTI Base Class Descriptor at (16,-1,0,64)'
	DD	00H
	DD	010H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IOpenCallbackUI@@8
rdata$r	ENDS
;	COMDAT ??_R1BA@?0A@EA@COpenCallbackConsole@@8
rdata$r	SEGMENT
??_R1BA@?0A@EA@COpenCallbackConsole@@8 DD FLAT:??_R0?AVCOpenCallbackConsole@@@8 ; COpenCallbackConsole::`RTTI Base Class Descriptor at (16,-1,0,64)'
	DD	01H
	DD	010H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3COpenCallbackConsole@@8
rdata$r	ENDS
;	COMDAT ??_R17?0A@EC@IUnknown@@8
rdata$r	SEGMENT
??_R17?0A@EC@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ICryptoGetTextPassword@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ICryptoGetTextPassword@@8 DD FLAT:??_R0?AUICryptoGetTextPassword@@@8 ; ICryptoGetTextPassword::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICryptoGetTextPassword@@8
rdata$r	ENDS
;	COMDAT ??_R2ICryptoGetTextPassword@@8
rdata$r	SEGMENT
??_R2ICryptoGetTextPassword@@8 DD FLAT:??_R1A@?0A@EA@ICryptoGetTextPassword@@8 ; ICryptoGetTextPassword::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ICryptoGetTextPassword@@8
rdata$r	SEGMENT
??_R3ICryptoGetTextPassword@@8 DD 00H			; ICryptoGetTextPassword::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ICryptoGetTextPassword@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUICryptoGetTextPassword@@@8
_DATA	SEGMENT
??_R0?AUICryptoGetTextPassword@@@8 DD FLAT:??_7type_info@@6B@ ; ICryptoGetTextPassword `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUICryptoGetTextPassword@@', 00H
_DATA	ENDS
;	COMDAT ??_R17?0A@EA@ICryptoGetTextPassword@@8
rdata$r	SEGMENT
??_R17?0A@EA@ICryptoGetTextPassword@@8 DD FLAT:??_R0?AUICryptoGetTextPassword@@@8 ; ICryptoGetTextPassword::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	01H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICryptoGetTextPassword@@8
rdata$r	ENDS
;	COMDAT ??_R13?0A@EC@IUnknown@@8
rdata$r	SEGMENT
??_R13?0A@EC@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@IFolderArchiveExtractCallback2@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IFolderArchiveExtractCallback2@@8 DD FLAT:??_R0?AUIFolderArchiveExtractCallback2@@@8 ; IFolderArchiveExtractCallback2::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IFolderArchiveExtractCallback2@@8
rdata$r	ENDS
;	COMDAT ??_R2IFolderArchiveExtractCallback2@@8
rdata$r	SEGMENT
??_R2IFolderArchiveExtractCallback2@@8 DD FLAT:??_R1A@?0A@EA@IFolderArchiveExtractCallback2@@8 ; IFolderArchiveExtractCallback2::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3IFolderArchiveExtractCallback2@@8
rdata$r	SEGMENT
??_R3IFolderArchiveExtractCallback2@@8 DD 00H		; IFolderArchiveExtractCallback2::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2IFolderArchiveExtractCallback2@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIFolderArchiveExtractCallback2@@@8
_DATA	SEGMENT
??_R0?AUIFolderArchiveExtractCallback2@@@8 DD FLAT:??_7type_info@@6B@ ; IFolderArchiveExtractCallback2 `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIFolderArchiveExtractCallback2@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@IFolderArchiveExtractCallback2@@8
rdata$r	SEGMENT
??_R13?0A@EA@IFolderArchiveExtractCallback2@@8 DD FLAT:??_R0?AUIFolderArchiveExtractCallback2@@@8 ; IFolderArchiveExtractCallback2::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	01H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IFolderArchiveExtractCallback2@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EC@IUnknown@@8
rdata$r	SEGMENT
??_R1A@?0A@EC@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R2IProgress@@8
rdata$r	SEGMENT
??_R2IProgress@@8 DD FLAT:??_R1A@?0A@EA@IProgress@@8	; IProgress::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3IProgress@@8
rdata$r	SEGMENT
??_R3IProgress@@8 DD 00H				; IProgress::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2IProgress@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIProgress@@@8
_DATA	SEGMENT
??_R0?AUIProgress@@@8 DD FLAT:??_7type_info@@6B@	; IProgress `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIProgress@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IProgress@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IProgress@@8 DD FLAT:??_R0?AUIProgress@@@8 ; IProgress::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IProgress@@8
rdata$r	ENDS
;	COMDAT ??_R2IFolderArchiveExtractCallback@@8
rdata$r	SEGMENT
??_R2IFolderArchiveExtractCallback@@8 DD FLAT:??_R1A@?0A@EA@IFolderArchiveExtractCallback@@8 ; IFolderArchiveExtractCallback::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IProgress@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3IFolderArchiveExtractCallback@@8
rdata$r	SEGMENT
??_R3IFolderArchiveExtractCallback@@8 DD 00H		; IFolderArchiveExtractCallback::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2IFolderArchiveExtractCallback@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIFolderArchiveExtractCallback@@@8
_DATA	SEGMENT
??_R0?AUIFolderArchiveExtractCallback@@@8 DD FLAT:??_7type_info@@6B@ ; IFolderArchiveExtractCallback `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIFolderArchiveExtractCallback@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IFolderArchiveExtractCallback@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IFolderArchiveExtractCallback@@8 DD FLAT:??_R0?AUIFolderArchiveExtractCallback@@@8 ; IFolderArchiveExtractCallback::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IFolderArchiveExtractCallback@@8
rdata$r	ENDS
;	COMDAT ??_R2IExtractCallbackUI@@8
rdata$r	SEGMENT
??_R2IExtractCallbackUI@@8 DD FLAT:??_R1A@?0A@EA@IExtractCallbackUI@@8 ; IExtractCallbackUI::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IFolderArchiveExtractCallback@@8
	DD	FLAT:??_R1A@?0A@EA@IProgress@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3IExtractCallbackUI@@8
rdata$r	SEGMENT
??_R3IExtractCallbackUI@@8 DD 00H			; IExtractCallbackUI::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2IExtractCallbackUI@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIExtractCallbackUI@@@8
_DATA	SEGMENT
??_R0?AUIExtractCallbackUI@@@8 DD FLAT:??_7type_info@@6B@ ; IExtractCallbackUI `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIExtractCallbackUI@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IExtractCallbackUI@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IExtractCallbackUI@@8 DD FLAT:??_R0?AUIExtractCallbackUI@@@8 ; IExtractCallbackUI::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IExtractCallbackUI@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CExtractCallbackConsole@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CExtractCallbackConsole@@8 DD FLAT:??_R0?AVCExtractCallbackConsole@@@8 ; CExtractCallbackConsole::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	0bH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CExtractCallbackConsole@@8
rdata$r	ENDS
;	COMDAT ??_R2CExtractCallbackConsole@@8
rdata$r	SEGMENT
??_R2CExtractCallbackConsole@@8 DD FLAT:??_R1A@?0A@EA@CExtractCallbackConsole@@8 ; CExtractCallbackConsole::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IExtractCallbackUI@@8
	DD	FLAT:??_R1A@?0A@EA@IFolderArchiveExtractCallback@@8
	DD	FLAT:??_R1A@?0A@EA@IProgress@@8
	DD	FLAT:??_R1A@?0A@EC@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@IFolderArchiveExtractCallback2@@8
	DD	FLAT:??_R13?0A@EC@IUnknown@@8
	DD	FLAT:??_R17?0A@EA@ICryptoGetTextPassword@@8
	DD	FLAT:??_R17?0A@EC@IUnknown@@8
	DD	FLAT:??_R1BA@?0A@EA@COpenCallbackConsole@@8
	DD	FLAT:??_R1BA@?0A@EA@IOpenCallbackUI@@8
	DD	FLAT:??_R1OA@?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CExtractCallbackConsole@@8
rdata$r	SEGMENT
??_R3CExtractCallbackConsole@@8 DD 00H			; CExtractCallbackConsole::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	0cH
	DD	FLAT:??_R2CExtractCallbackConsole@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCExtractCallbackConsole@@@8
_DATA	SEGMENT
??_R0?AVCExtractCallbackConsole@@@8 DD FLAT:??_7type_info@@6B@ ; CExtractCallbackConsole `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCExtractCallbackConsole@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CExtractCallbackConsole@@6BIExtractCallbackUI@@@
rdata$r	SEGMENT
??_R4CExtractCallbackConsole@@6BIExtractCallbackUI@@@ DD 00H ; CExtractCallbackConsole::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCExtractCallbackConsole@@@8
	DD	FLAT:??_R3CExtractCallbackConsole@@8
rdata$r	ENDS
;	COMDAT ??_7CExtractCallbackConsole@@6BCOpenCallbackConsole@@@
CONST	SEGMENT
??_7CExtractCallbackConsole@@6BCOpenCallbackConsole@@@ DD FLAT:??_R4CExtractCallbackConsole@@6BCOpenCallbackConsole@@@ ; CExtractCallbackConsole::`vftable'
	DD	FLAT:?Open_CheckBreak@COpenCallbackConsole@@UAEJXZ
	DD	FLAT:?Open_SetTotal@COpenCallbackConsole@@UAEJPB_K0@Z
	DD	FLAT:?Open_SetCompleted@COpenCallbackConsole@@UAEJPB_K0@Z
	DD	FLAT:?Open_Finished@COpenCallbackConsole@@UAEJXZ
	DD	FLAT:?Open_CryptoGetTextPassword@COpenCallbackConsole@@UAEJPAPA_W@Z
CONST	ENDS
;	COMDAT ??_7CExtractCallbackConsole@@6BICryptoGetTextPassword@@@
CONST	SEGMENT
??_7CExtractCallbackConsole@@6BICryptoGetTextPassword@@@ DD FLAT:??_R4CExtractCallbackConsole@@6BICryptoGetTextPassword@@@ ; CExtractCallbackConsole::`vftable'
	DD	FLAT:?QueryInterface@CExtractCallbackConsole@@W7AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CExtractCallbackConsole@@W7AGKXZ
	DD	FLAT:?Release@CExtractCallbackConsole@@W7AGKXZ
	DD	FLAT:?CryptoGetTextPassword@CExtractCallbackConsole@@UAGJPAPA_W@Z
CONST	ENDS
;	COMDAT ??_7CExtractCallbackConsole@@6BIFolderArchiveExtractCallback2@@@
CONST	SEGMENT
??_7CExtractCallbackConsole@@6BIFolderArchiveExtractCallback2@@@ DD FLAT:??_R4CExtractCallbackConsole@@6BIFolderArchiveExtractCallback2@@@ ; CExtractCallbackConsole::`vftable'
	DD	FLAT:?QueryInterface@CExtractCallbackConsole@@W3AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CExtractCallbackConsole@@W3AGKXZ
	DD	FLAT:?Release@CExtractCallbackConsole@@W3AGKXZ
	DD	FLAT:?ReportExtractResult@CExtractCallbackConsole@@UAGJHHPB_W@Z
CONST	ENDS
;	COMDAT ??_7CExtractCallbackConsole@@6BIExtractCallbackUI@@@
CONST	SEGMENT
??_7CExtractCallbackConsole@@6BIExtractCallbackUI@@@ DD FLAT:??_R4CExtractCallbackConsole@@6BIExtractCallbackUI@@@ ; CExtractCallbackConsole::`vftable'
	DD	FLAT:?QueryInterface@CExtractCallbackConsole@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CExtractCallbackConsole@@UAGKXZ
	DD	FLAT:?Release@CExtractCallbackConsole@@UAGKXZ
	DD	FLAT:?SetTotal@CExtractCallbackConsole@@UAGJ_K@Z
	DD	FLAT:?SetCompleted@CExtractCallbackConsole@@UAGJPB_K@Z
	DD	FLAT:?AskOverwrite@CExtractCallbackConsole@@UAGJPB_WPBU_FILETIME@@PB_K012PAH@Z
	DD	FLAT:?PrepareOperation@CExtractCallbackConsole@@UAGJPB_WHHPB_K@Z
	DD	FLAT:?MessageError@CExtractCallbackConsole@@UAGJPB_W@Z
	DD	FLAT:?SetOperationResult@CExtractCallbackConsole@@UAGJHH@Z
	DD	FLAT:?BeforeOpen@CExtractCallbackConsole@@UAEJPB_W_N@Z
	DD	FLAT:?OpenResult@CExtractCallbackConsole@@UAEJPBVCCodecs@@ABUCArchiveLink@@PB_WJ@Z
	DD	FLAT:?ThereAreNoFiles@CExtractCallbackConsole@@UAEJXZ
	DD	FLAT:?ExtractResult@CExtractCallbackConsole@@UAEJJ@Z
	DD	FLAT:?SetPassword@CExtractCallbackConsole@@UAEJABVUString@@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CExtractCallbackConsole@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CExtractCallbackConsole@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CExtractCallbackConsole@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CExtractCallbackConsole@@QAE@XZ$2
__ehfuncinfo$??0CExtractCallbackConsole@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0CExtractCallbackConsole@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CExtractCallbackConsole@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CExtractCallbackConsole@@QAE@XZ PROC			; CExtractCallbackConsole::CExtractCallbackConsole, COMDAT
; _this$ = ecx
; Line 138
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CExtractCallbackConsole@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IExtractCallbackUI@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0IFolderArchiveExtractCallback2@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0ICryptoGetTextPassword@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0COpenCallbackConsole@@QAE@XZ		; COpenCallbackConsole::COpenCallbackConsole
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 224				; 000000e0H
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CExtractCallbackConsole@@6BIExtractCallbackUI@@@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], OFFSET ??_7CExtractCallbackConsole@@6BIFolderArchiveExtractCallback2@@@
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], OFFSET ??_7CExtractCallbackConsole@@6BICryptoGetTextPassword@@@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], OFFSET ??_7CExtractCallbackConsole@@6BCOpenCallbackConsole@@@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 228				; 000000e4H
	call	??0AString@@QAE@XZ			; AString::AString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 240				; 000000f0H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 252				; 000000fcH
	call	??0UString@@QAE@XZ			; UString::UString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+344], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+348], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+352], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CExtractCallbackConsole@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	jmp	??1COpenCallbackConsole@@QAE@XZ
__unwindfunclet$??0CExtractCallbackConsole@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 228				; 000000e4H
	jmp	??1AString@@QAE@XZ			; AString::~AString
__unwindfunclet$??0CExtractCallbackConsole@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 240				; 000000f0H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$??0CExtractCallbackConsole@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CExtractCallbackConsole@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CExtractCallbackConsole@@QAE@XZ ENDP			; CExtractCallbackConsole::CExtractCallbackConsole
PUBLIC	??_7ICryptoGetTextPassword@@6B@			; ICryptoGetTextPassword::`vftable'
PUBLIC	??_R4ICryptoGetTextPassword@@6B@		; ICryptoGetTextPassword::`RTTI Complete Object Locator'
;	COMDAT ??_R4ICryptoGetTextPassword@@6B@
rdata$r	SEGMENT
??_R4ICryptoGetTextPassword@@6B@ DD 00H			; ICryptoGetTextPassword::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUICryptoGetTextPassword@@@8
	DD	FLAT:??_R3ICryptoGetTextPassword@@8
rdata$r	ENDS
;	COMDAT ??_7ICryptoGetTextPassword@@6B@
CONST	SEGMENT
??_7ICryptoGetTextPassword@@6B@ DD FLAT:??_R4ICryptoGetTextPassword@@6B@ ; ICryptoGetTextPassword::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ICryptoGetTextPassword@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ICryptoGetTextPassword@@QAE@XZ PROC			; ICryptoGetTextPassword::ICryptoGetTextPassword, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ICryptoGetTextPassword@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ICryptoGetTextPassword@@QAE@XZ ENDP			; ICryptoGetTextPassword::ICryptoGetTextPassword
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CExtractCallbackConsole@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
tv134 = -8						; size = 4
tv92 = -4						; size = 4
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CExtractCallbackConsole@@UAGJABU_GUID@@PAPAX@Z PROC ; CExtractCallbackConsole::QueryInterface, COMDAT
; Line 90
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN8@QueryInter@2
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	$LN7@QueryInter@2
$LN8@QueryInter@2:
	push	OFFSET _IID_IFolderArchiveExtractCallback
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN6@QueryInter@2
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN7@QueryInter@2
$LN6@QueryInter@2:
; Line 92
	push	OFFSET _IID_IFolderArchiveExtractCallback2
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@QueryInter@2
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN11@QueryInter@2
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	mov	DWORD PTR tv92[ebp], edx
	jmp	SHORT $LN12@QueryInter@2
$LN11@QueryInter@2:
	mov	DWORD PTR tv92[ebp], 0
$LN12@QueryInter@2:
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	ecx, DWORD PTR tv92[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN7@QueryInter@2
$LN4@QueryInter@2:
; Line 94
	push	OFFSET _IID_ICryptoGetTextPassword
	mov	edx, DWORD PTR _iid$[ebp]
	push	edx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@2
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN13@QueryInter@2
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	mov	DWORD PTR tv134[ebp], eax
	jmp	SHORT $LN14@QueryInter@2
$LN13@QueryInter@2:
	mov	DWORD PTR tv134[ebp], 0
$LN14@QueryInter@2:
	mov	ecx, DWORD PTR _outObject$[ebp]
	mov	edx, DWORD PTR tv134[ebp]
	mov	DWORD PTR [ecx], edx
	jmp	SHORT $LN7@QueryInter@2
$LN2@QueryInter@2:
; Line 96
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN9@QueryInter@2
$LN7@QueryInter@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+224]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+224], ecx
	xor	eax, eax
$LN9@QueryInter@2:
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CExtractCallbackConsole@@UAGJABU_GUID@@PAPAX@Z ENDP ; CExtractCallbackConsole::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CExtractCallbackConsole@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CExtractCallbackConsole@@UAGKXZ PROC		; CExtractCallbackConsole::AddRef, COMDAT
; Line 97
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+224]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+224], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CExtractCallbackConsole@@UAGKXZ ENDP		; CExtractCallbackConsole::AddRef
_TEXT	ENDS
PUBLIC	??_GCExtractCallbackConsole@@QAEPAXI@Z		; CExtractCallbackConsole::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CExtractCallbackConsole@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T79649 = -8						; size = 4
$T79648 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CExtractCallbackConsole@@UAGKXZ PROC		; CExtractCallbackConsole::Release, COMDAT
; Line 97
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+224]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+224], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+224]
	jmp	SHORT $LN2@Release@2
$LN1@Release@2:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T79649[ebp], edx
	mov	eax, DWORD PTR $T79649[ebp]
	mov	DWORD PTR $T79648[ebp], eax
	cmp	DWORD PTR $T79648[ebp], 0
	je	SHORT $LN4@Release@2
	push	1
	mov	ecx, DWORD PTR $T79648[ebp]
	call	??_GCExtractCallbackConsole@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release@2
$LN4@Release@2:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release@2:
	xor	eax, eax
$LN2@Release@2:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CExtractCallbackConsole@@UAGKXZ ENDP		; CExtractCallbackConsole::Release
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SetWindowWidth@CExtractCallbackConsole@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_width$ = 8						; size = 4
?SetWindowWidth@CExtractCallbackConsole@@QAEXI@Z PROC	; CExtractCallbackConsole::SetWindowWidth, COMDAT
; _this$ = ecx
; Line 140
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _width$[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+196], eax
	mov	esp, ebp
	pop	ebp
	ret	4
?SetWindowWidth@CExtractCallbackConsole@@QAEXI@Z ENDP	; CExtractCallbackConsole::SetWindowWidth
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Init@CExtractCallbackConsole@@QAEXPAVCStdOutStream@@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_outStream$ = 8						; size = 4
_errorStream$ = 12					; size = 4
_percentStream$ = 16					; size = 4
?Init@CExtractCallbackConsole@@QAEXPAVCStdOutStream@@00@Z PROC ; CExtractCallbackConsole::Init, COMDAT
; _this$ = ecx
; Line 143
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 144
	mov	eax, DWORD PTR _percentStream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _errorStream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _outStream$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?Init@COpenCallbackConsole@@QAEXPAVCStdOutStream@@00@Z ; COpenCallbackConsole::Init
; Line 146
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+264], 0
	mov	DWORD PTR [eax+268], 0
; Line 148
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+272], 0
; Line 149
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+273], 0
; Line 151
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+280], 0
	mov	DWORD PTR [eax+284], 0
; Line 152
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+288], 0
	mov	DWORD PTR [ecx+292], 0
; Line 153
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+296], 0
	mov	DWORD PTR [edx+300], 0
; Line 154
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+304], 0
	mov	DWORD PTR [eax+308], 0
; Line 156
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+312], 0
	mov	DWORD PTR [ecx+316], 0
; Line 157
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+320], 0
	mov	DWORD PTR [edx+324], 0
; Line 159
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+328], 0
	mov	DWORD PTR [eax+332], 0
; Line 160
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+336], 0
	mov	DWORD PTR [ecx+340], 0
; Line 161
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Init@CExtractCallbackConsole@@QAEXPAVCStdOutStream@@00@Z ENDP ; CExtractCallbackConsole::Init
_TEXT	ENDS
PUBLIC	??1CExtractCallbackConsole@@QAE@XZ		; CExtractCallbackConsole::~CExtractCallbackConsole
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCExtractCallbackConsole@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCExtractCallbackConsole@@QAEPAXI@Z PROC		; CExtractCallbackConsole::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CExtractCallbackConsole@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCExtractCallbackConsole@@QAEPAXI@Z ENDP		; CExtractCallbackConsole::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_7IExtractCallbackUI@@6B@			; IExtractCallbackUI::`vftable'
PUBLIC	??0IFolderArchiveExtractCallback@@QAE@XZ	; IFolderArchiveExtractCallback::IFolderArchiveExtractCallback
PUBLIC	??_R4IExtractCallbackUI@@6B@			; IExtractCallbackUI::`RTTI Complete Object Locator'
;	COMDAT ??_R4IExtractCallbackUI@@6B@
rdata$r	SEGMENT
??_R4IExtractCallbackUI@@6B@ DD 00H			; IExtractCallbackUI::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIExtractCallbackUI@@@8
	DD	FLAT:??_R3IExtractCallbackUI@@8
rdata$r	ENDS
;	COMDAT ??_7IExtractCallbackUI@@6B@
CONST	SEGMENT
??_7IExtractCallbackUI@@6B@ DD FLAT:??_R4IExtractCallbackUI@@6B@ ; IExtractCallbackUI::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0IExtractCallbackUI@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IExtractCallbackUI@@QAE@XZ PROC			; IExtractCallbackUI::IExtractCallbackUI, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IFolderArchiveExtractCallback@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7IExtractCallbackUI@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0IExtractCallbackUI@@QAE@XZ ENDP			; IExtractCallbackUI::IExtractCallbackUI
_TEXT	ENDS
PUBLIC	??_7IFolderArchiveExtractCallback2@@6B@		; IFolderArchiveExtractCallback2::`vftable'
PUBLIC	??_R4IFolderArchiveExtractCallback2@@6B@	; IFolderArchiveExtractCallback2::`RTTI Complete Object Locator'
;	COMDAT ??_R4IFolderArchiveExtractCallback2@@6B@
rdata$r	SEGMENT
??_R4IFolderArchiveExtractCallback2@@6B@ DD 00H		; IFolderArchiveExtractCallback2::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIFolderArchiveExtractCallback2@@@8
	DD	FLAT:??_R3IFolderArchiveExtractCallback2@@8
rdata$r	ENDS
;	COMDAT ??_7IFolderArchiveExtractCallback2@@6B@
CONST	SEGMENT
??_7IFolderArchiveExtractCallback2@@6B@ DD FLAT:??_R4IFolderArchiveExtractCallback2@@6B@ ; IFolderArchiveExtractCallback2::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0IFolderArchiveExtractCallback2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IFolderArchiveExtractCallback2@@QAE@XZ PROC		; IFolderArchiveExtractCallback2::IFolderArchiveExtractCallback2, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7IFolderArchiveExtractCallback2@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0IFolderArchiveExtractCallback2@@QAE@XZ ENDP		; IFolderArchiveExtractCallback2::IFolderArchiveExtractCallback2
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1COpenCallbackConsole@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1COpenCallbackConsole@@QAE@XZ$0
__ehfuncinfo$??1COpenCallbackConsole@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1COpenCallbackConsole@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1COpenCallbackConsole@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1COpenCallbackConsole@@QAE@XZ PROC			; COpenCallbackConsole::~COpenCallbackConsole, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1COpenCallbackConsole@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 196				; 000000c4H
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1CPercentPrinter@@QAE@XZ		; CPercentPrinter::~CPercentPrinter
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1COpenCallbackConsole@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1CPercentPrinter@@QAE@XZ		; CPercentPrinter::~CPercentPrinter
__ehhandler$??1COpenCallbackConsole@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1COpenCallbackConsole@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1COpenCallbackConsole@@QAE@XZ ENDP			; COpenCallbackConsole::~COpenCallbackConsole
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CExtractCallbackConsole@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CExtractCallbackConsole@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CExtractCallbackConsole@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CExtractCallbackConsole@@QAE@XZ$2
__ehfuncinfo$??1CExtractCallbackConsole@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1CExtractCallbackConsole@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CExtractCallbackConsole@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CExtractCallbackConsole@@QAE@XZ PROC			; CExtractCallbackConsole::~CExtractCallbackConsole, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CExtractCallbackConsole@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 252				; 000000fcH
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 240				; 000000f0H
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 228				; 000000e4H
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??1COpenCallbackConsole@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CExtractCallbackConsole@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	jmp	??1COpenCallbackConsole@@QAE@XZ
__unwindfunclet$??1CExtractCallbackConsole@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 228				; 000000e4H
	jmp	??1AString@@QAE@XZ			; AString::~AString
__unwindfunclet$??1CExtractCallbackConsole@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 240				; 000000f0H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$??1CExtractCallbackConsole@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CExtractCallbackConsole@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CExtractCallbackConsole@@QAE@XZ ENDP			; CExtractCallbackConsole::~CExtractCallbackConsole
PUBLIC	??_7IFolderArchiveExtractCallback@@6B@		; IFolderArchiveExtractCallback::`vftable'
PUBLIC	??0IProgress@@QAE@XZ				; IProgress::IProgress
PUBLIC	??_R4IFolderArchiveExtractCallback@@6B@		; IFolderArchiveExtractCallback::`RTTI Complete Object Locator'
;	COMDAT ??_R4IFolderArchiveExtractCallback@@6B@
rdata$r	SEGMENT
??_R4IFolderArchiveExtractCallback@@6B@ DD 00H		; IFolderArchiveExtractCallback::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIFolderArchiveExtractCallback@@@8
	DD	FLAT:??_R3IFolderArchiveExtractCallback@@8
rdata$r	ENDS
;	COMDAT ??_7IFolderArchiveExtractCallback@@6B@
CONST	SEGMENT
??_7IFolderArchiveExtractCallback@@6B@ DD FLAT:??_R4IFolderArchiveExtractCallback@@6B@ ; IFolderArchiveExtractCallback::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0IFolderArchiveExtractCallback@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IFolderArchiveExtractCallback@@QAE@XZ PROC		; IFolderArchiveExtractCallback::IFolderArchiveExtractCallback, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IProgress@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7IFolderArchiveExtractCallback@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0IFolderArchiveExtractCallback@@QAE@XZ ENDP		; IFolderArchiveExtractCallback::IFolderArchiveExtractCallback
_TEXT	ENDS
PUBLIC	??_7IProgress@@6B@				; IProgress::`vftable'
PUBLIC	??_R4IProgress@@6B@				; IProgress::`RTTI Complete Object Locator'
;	COMDAT ??_R4IProgress@@6B@
rdata$r	SEGMENT
??_R4IProgress@@6B@ DD 00H				; IProgress::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIProgress@@@8
	DD	FLAT:??_R3IProgress@@8
rdata$r	ENDS
;	COMDAT ??_7IProgress@@6B@
CONST	SEGMENT
??_7IProgress@@6B@ DD FLAT:??_R4IProgress@@6B@		; IProgress::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0IProgress@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IProgress@@QAE@XZ PROC				; IProgress::IProgress, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7IProgress@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0IProgress@@QAE@XZ ENDP				; IProgress::IProgress
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SetWindowWidth@CCallbackConsoleBase@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_width$ = 8						; size = 4
?SetWindowWidth@CCallbackConsoleBase@@QAEXI@Z PROC	; CCallbackConsoleBase::SetWindowWidth, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\console\updatecallbackconsole.h
; Line 62
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _width$[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+172], eax
	mov	esp, ebp
	pop	ebp
	ret	4
?SetWindowWidth@CCallbackConsoleBase@@QAEXI@Z ENDP	; CCallbackConsoleBase::SetWindowWidth
_TEXT	ENDS
PUBLIC	?Clear@CErrorPathCodes@@QAEXXZ			; CErrorPathCodes::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Init@CCallbackConsoleBase@@QAEXPAVCStdOutStream@@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_outStream$ = 8						; size = 4
_errorStream$ = 12					; size = 4
_percentStream$ = 16					; size = 4
?Init@CCallbackConsoleBase@@QAEXPAVCStdOutStream@@00@Z PROC ; CCallbackConsoleBase::Init, COMDAT
; _this$ = ecx
; Line 65
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 66
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 220				; 000000dcH
	call	?Clear@CErrorPathCodes@@QAEXXZ		; CErrorPathCodes::Clear
; Line 68
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _outStream$[ebp]
	mov	DWORD PTR [eax+176], ecx
; Line 69
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _errorStream$[ebp]
	mov	DWORD PTR [edx+180], eax
; Line 70
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _percentStream$[ebp]
	mov	DWORD PTR [ecx+164], edx
; Line 71
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Init@CCallbackConsoleBase@@QAEXPAVCStdOutStream@@00@Z ENDP ; CCallbackConsoleBase::Init
_TEXT	ENDS
PUBLIC	?Clear@?$CRecordVector@K@@QAEXXZ		; CRecordVector<unsigned long>::Clear
PUBLIC	?Clear@?$CObjectVector@VUString@@@@QAEXXZ	; CObjectVector<UString>::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Clear@CErrorPathCodes@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@CErrorPathCodes@@QAEXXZ PROC			; CErrorPathCodes::Clear, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CObjectVector@VUString@@@@QAEXXZ ; CObjectVector<UString>::Clear
; Line 25
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Clear@?$CRecordVector@K@@QAEXXZ	; CRecordVector<unsigned long>::Clear
; Line 26
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@CErrorPathCodes@@QAEXXZ ENDP			; CErrorPathCodes::Clear
_TEXT	ENDS
PUBLIC	?NeedPercents@CCallbackConsoleBase@@QBE_NXZ	; CCallbackConsoleBase::NeedPercents
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ClosePercents2@CCallbackConsoleBase@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ClosePercents2@CCallbackConsoleBase@@QAEXXZ PROC	; CCallbackConsoleBase::ClosePercents2, COMDAT
; _this$ = ecx
; Line 74
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 75
	mov	ecx, DWORD PTR _this$[ebp]
	call	?NeedPercents@CCallbackConsoleBase@@QBE_NXZ ; CCallbackConsoleBase::NeedPercents
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@ClosePerce@2
; Line 76
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClosePrint@CPercentPrinter@@QAEX_N@Z	; CPercentPrinter::ClosePrint
$LN2@ClosePerce@2:
; Line 77
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ClosePercents2@CCallbackConsoleBase@@QAEXXZ ENDP	; CCallbackConsoleBase::ClosePercents2
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?NeedPercents@CCallbackConsoleBase@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?NeedPercents@CCallbackConsoleBase@@QBE_NXZ PROC	; CCallbackConsoleBase::NeedPercents, COMDAT
; _this$ = ecx
; Line 44
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+164], 0
	setne	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?NeedPercents@CCallbackConsoleBase@@QBE_NXZ ENDP	; CCallbackConsoleBase::NeedPercents
_TEXT	ENDS
PUBLIC	??1CCallbackConsoleBase@@QAE@XZ			; CCallbackConsoleBase::~CCallbackConsoleBase
PUBLIC	??_7CUpdateCallbackConsole@@6BIDirItemsCallback@@@ ; CUpdateCallbackConsole::`vftable'
PUBLIC	??_7CUpdateCallbackConsole@@6BIUpdateCallbackUI@@@ ; CUpdateCallbackConsole::`vftable'
PUBLIC	??0CCallbackConsoleBase@@QAE@XZ			; CCallbackConsoleBase::CCallbackConsoleBase
PUBLIC	??0IUpdateCallbackUI2@@QAE@XZ			; IUpdateCallbackUI2::IUpdateCallbackUI2
PUBLIC	??_R4CUpdateCallbackConsole@@6BIUpdateCallbackUI@@@ ; CUpdateCallbackConsole::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCUpdateCallbackConsole@@@8		; CUpdateCallbackConsole `RTTI Type Descriptor'
PUBLIC	??_R3CUpdateCallbackConsole@@8			; CUpdateCallbackConsole::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CUpdateCallbackConsole@@8			; CUpdateCallbackConsole::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CUpdateCallbackConsole@@8		; CUpdateCallbackConsole::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@IUpdateCallbackUI2@@8		; IUpdateCallbackUI2::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIUpdateCallbackUI2@@@8			; IUpdateCallbackUI2 `RTTI Type Descriptor'
PUBLIC	??_R3IUpdateCallbackUI2@@8			; IUpdateCallbackUI2::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IUpdateCallbackUI2@@8			; IUpdateCallbackUI2::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IUpdateCallbackUI@@8		; IUpdateCallbackUI::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIUpdateCallbackUI@@@8			; IUpdateCallbackUI `RTTI Type Descriptor'
PUBLIC	??_R3IUpdateCallbackUI@@8			; IUpdateCallbackUI::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IUpdateCallbackUI@@8			; IUpdateCallbackUI::`RTTI Base Class Array'
PUBLIC	??_R13?0A@EA@IDirItemsCallback@@8		; IDirItemsCallback::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AUIDirItemsCallback@@@8			; IDirItemsCallback `RTTI Type Descriptor'
PUBLIC	??_R3IDirItemsCallback@@8			; IDirItemsCallback::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IDirItemsCallback@@8			; IDirItemsCallback::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IDirItemsCallback@@8		; IDirItemsCallback::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R17?0A@EA@CCallbackConsoleBase@@8		; CCallbackConsoleBase::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	??_R0?AVCCallbackConsoleBase@@@8		; CCallbackConsoleBase `RTTI Type Descriptor'
PUBLIC	??_R3CCallbackConsoleBase@@8			; CCallbackConsoleBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCallbackConsoleBase@@8			; CCallbackConsoleBase::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCallbackConsoleBase@@8		; CCallbackConsoleBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CUpdateCallbackConsole@@6BIDirItemsCallback@@@ ; CUpdateCallbackConsole::`RTTI Complete Object Locator'
EXTRN	?WriteSfx@CUpdateCallbackConsole@@UAEJPB_W_K@Z:PROC ; CUpdateCallbackConsole::WriteSfx
EXTRN	?SetTotal@CUpdateCallbackConsole@@UAEJ_K@Z:PROC	; CUpdateCallbackConsole::SetTotal
EXTRN	?SetCompleted@CUpdateCallbackConsole@@UAEJPB_K@Z:PROC ; CUpdateCallbackConsole::SetCompleted
EXTRN	?SetRatioInfo@CUpdateCallbackConsole@@UAEJPB_K0@Z:PROC ; CUpdateCallbackConsole::SetRatioInfo
EXTRN	?CheckBreak@CUpdateCallbackConsole@@UAEJXZ:PROC	; CUpdateCallbackConsole::CheckBreak
EXTRN	?SetNumItems@CUpdateCallbackConsole@@UAEJ_K@Z:PROC ; CUpdateCallbackConsole::SetNumItems
EXTRN	?GetStream@CUpdateCallbackConsole@@UAEJPB_W_N1I@Z:PROC ; CUpdateCallbackConsole::GetStream
EXTRN	?OpenFileError@CUpdateCallbackConsole@@UAEJABVUString@@K@Z:PROC ; CUpdateCallbackConsole::OpenFileError
EXTRN	?ReadingFileError@CUpdateCallbackConsole@@UAEJABVUString@@K@Z:PROC ; CUpdateCallbackConsole::ReadingFileError
EXTRN	?SetOperationResult@CUpdateCallbackConsole@@UAEJH@Z:PROC ; CUpdateCallbackConsole::SetOperationResult
EXTRN	?ReportExtractResult@CUpdateCallbackConsole@@UAEJHHPB_W@Z:PROC ; CUpdateCallbackConsole::ReportExtractResult
EXTRN	?ReportUpdateOpeartion@CUpdateCallbackConsole@@UAEJIPB_W_N@Z:PROC ; CUpdateCallbackConsole::ReportUpdateOpeartion
EXTRN	?CryptoGetTextPassword2@CUpdateCallbackConsole@@UAEJPAHPAPA_W@Z:PROC ; CUpdateCallbackConsole::CryptoGetTextPassword2
EXTRN	?CryptoGetTextPassword@CUpdateCallbackConsole@@UAEJPAPA_W@Z:PROC ; CUpdateCallbackConsole::CryptoGetTextPassword
EXTRN	?ShowDeleteFile@CUpdateCallbackConsole@@UAEJPB_W_N@Z:PROC ; CUpdateCallbackConsole::ShowDeleteFile
EXTRN	?OpenResult@CUpdateCallbackConsole@@UAEJPBVCCodecs@@ABUCArchiveLink@@PB_WJ@Z:PROC ; CUpdateCallbackConsole::OpenResult
EXTRN	?StartScanning@CUpdateCallbackConsole@@UAEJXZ:PROC ; CUpdateCallbackConsole::StartScanning
EXTRN	?FinishScanning@CUpdateCallbackConsole@@UAEJABUCDirItemsStat@@@Z:PROC ; CUpdateCallbackConsole::FinishScanning
EXTRN	?StartOpenArchive@CUpdateCallbackConsole@@UAEJPB_W@Z:PROC ; CUpdateCallbackConsole::StartOpenArchive
EXTRN	?StartArchive@CUpdateCallbackConsole@@UAEJPB_W_N@Z:PROC ; CUpdateCallbackConsole::StartArchive
EXTRN	?FinishArchive@CUpdateCallbackConsole@@UAEJABUCFinishArchiveStat@@@Z:PROC ; CUpdateCallbackConsole::FinishArchive
EXTRN	?DeletingAfterArchiving@CUpdateCallbackConsole@@UAEJABVUString@@_N@Z:PROC ; CUpdateCallbackConsole::DeletingAfterArchiving
EXTRN	?FinishDeletingAfterArchiving@CUpdateCallbackConsole@@UAEJXZ:PROC ; CUpdateCallbackConsole::FinishDeletingAfterArchiving
EXTRN	?ScanError@CUpdateCallbackConsole@@UAEJABVUString@@K@Z:PROC ; CUpdateCallbackConsole::ScanError
EXTRN	?ScanProgress@CUpdateCallbackConsole@@UAEJABUCDirItemsStat@@ABVUString@@_N@Z:PROC ; CUpdateCallbackConsole::ScanProgress
;	COMDAT ??_R4CUpdateCallbackConsole@@6BIDirItemsCallback@@@
rdata$r	SEGMENT
??_R4CUpdateCallbackConsole@@6BIDirItemsCallback@@@ DD 00H ; CUpdateCallbackConsole::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVCUpdateCallbackConsole@@@8
	DD	FLAT:??_R3CUpdateCallbackConsole@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CCallbackConsoleBase@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CCallbackConsoleBase@@8 DD FLAT:??_R0?AVCCallbackConsoleBase@@@8 ; CCallbackConsoleBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCallbackConsoleBase@@8
rdata$r	ENDS
;	COMDAT ??_R2CCallbackConsoleBase@@8
rdata$r	SEGMENT
??_R2CCallbackConsoleBase@@8 DD FLAT:??_R1A@?0A@EA@CCallbackConsoleBase@@8 ; CCallbackConsoleBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CCallbackConsoleBase@@8
rdata$r	SEGMENT
??_R3CCallbackConsoleBase@@8 DD 00H			; CCallbackConsoleBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CCallbackConsoleBase@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCallbackConsoleBase@@@8
_DATA	SEGMENT
??_R0?AVCCallbackConsoleBase@@@8 DD FLAT:??_7type_info@@6B@ ; CCallbackConsoleBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCallbackConsoleBase@@', 00H
_DATA	ENDS
;	COMDAT ??_R17?0A@EA@CCallbackConsoleBase@@8
rdata$r	SEGMENT
??_R17?0A@EA@CCallbackConsoleBase@@8 DD FLAT:??_R0?AVCCallbackConsoleBase@@@8 ; CCallbackConsoleBase::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCallbackConsoleBase@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@IDirItemsCallback@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IDirItemsCallback@@8 DD FLAT:??_R0?AUIDirItemsCallback@@@8 ; IDirItemsCallback::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IDirItemsCallback@@8
rdata$r	ENDS
;	COMDAT ??_R2IDirItemsCallback@@8
rdata$r	SEGMENT
??_R2IDirItemsCallback@@8 DD FLAT:??_R1A@?0A@EA@IDirItemsCallback@@8 ; IDirItemsCallback::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3IDirItemsCallback@@8
rdata$r	SEGMENT
??_R3IDirItemsCallback@@8 DD 00H			; IDirItemsCallback::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2IDirItemsCallback@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIDirItemsCallback@@@8
_DATA	SEGMENT
??_R0?AUIDirItemsCallback@@@8 DD FLAT:??_7type_info@@6B@ ; IDirItemsCallback `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIDirItemsCallback@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@IDirItemsCallback@@8
rdata$r	SEGMENT
??_R13?0A@EA@IDirItemsCallback@@8 DD FLAT:??_R0?AUIDirItemsCallback@@@8 ; IDirItemsCallback::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IDirItemsCallback@@8
rdata$r	ENDS
;	COMDAT ??_R2IUpdateCallbackUI@@8
rdata$r	SEGMENT
??_R2IUpdateCallbackUI@@8 DD FLAT:??_R1A@?0A@EA@IUpdateCallbackUI@@8 ; IUpdateCallbackUI::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3IUpdateCallbackUI@@8
rdata$r	SEGMENT
??_R3IUpdateCallbackUI@@8 DD 00H			; IUpdateCallbackUI::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2IUpdateCallbackUI@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIUpdateCallbackUI@@@8
_DATA	SEGMENT
??_R0?AUIUpdateCallbackUI@@@8 DD FLAT:??_7type_info@@6B@ ; IUpdateCallbackUI `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIUpdateCallbackUI@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IUpdateCallbackUI@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IUpdateCallbackUI@@8 DD FLAT:??_R0?AUIUpdateCallbackUI@@@8 ; IUpdateCallbackUI::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IUpdateCallbackUI@@8
rdata$r	ENDS
;	COMDAT ??_R2IUpdateCallbackUI2@@8
rdata$r	SEGMENT
??_R2IUpdateCallbackUI2@@8 DD FLAT:??_R1A@?0A@EA@IUpdateCallbackUI2@@8 ; IUpdateCallbackUI2::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUpdateCallbackUI@@8
	DD	FLAT:??_R13?0A@EA@IDirItemsCallback@@8
rdata$r	ENDS
;	COMDAT ??_R3IUpdateCallbackUI2@@8
rdata$r	SEGMENT
??_R3IUpdateCallbackUI2@@8 DD 00H			; IUpdateCallbackUI2::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	03H
	DD	FLAT:??_R2IUpdateCallbackUI2@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIUpdateCallbackUI2@@@8
_DATA	SEGMENT
??_R0?AUIUpdateCallbackUI2@@@8 DD FLAT:??_7type_info@@6B@ ; IUpdateCallbackUI2 `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIUpdateCallbackUI2@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IUpdateCallbackUI2@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IUpdateCallbackUI2@@8 DD FLAT:??_R0?AUIUpdateCallbackUI2@@@8 ; IUpdateCallbackUI2::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IUpdateCallbackUI2@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CUpdateCallbackConsole@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CUpdateCallbackConsole@@8 DD FLAT:??_R0?AVCUpdateCallbackConsole@@@8 ; CUpdateCallbackConsole::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CUpdateCallbackConsole@@8
rdata$r	ENDS
;	COMDAT ??_R2CUpdateCallbackConsole@@8
rdata$r	SEGMENT
??_R2CUpdateCallbackConsole@@8 DD FLAT:??_R1A@?0A@EA@CUpdateCallbackConsole@@8 ; CUpdateCallbackConsole::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUpdateCallbackUI2@@8
	DD	FLAT:??_R1A@?0A@EA@IUpdateCallbackUI@@8
	DD	FLAT:??_R13?0A@EA@IDirItemsCallback@@8
	DD	FLAT:??_R17?0A@EA@CCallbackConsoleBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CUpdateCallbackConsole@@8
rdata$r	SEGMENT
??_R3CUpdateCallbackConsole@@8 DD 00H			; CUpdateCallbackConsole::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2CUpdateCallbackConsole@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCUpdateCallbackConsole@@@8
_DATA	SEGMENT
??_R0?AVCUpdateCallbackConsole@@@8 DD FLAT:??_7type_info@@6B@ ; CUpdateCallbackConsole `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCUpdateCallbackConsole@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CUpdateCallbackConsole@@6BIUpdateCallbackUI@@@
rdata$r	SEGMENT
??_R4CUpdateCallbackConsole@@6BIUpdateCallbackUI@@@ DD 00H ; CUpdateCallbackConsole::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCUpdateCallbackConsole@@@8
	DD	FLAT:??_R3CUpdateCallbackConsole@@8
rdata$r	ENDS
;	COMDAT ??_7CUpdateCallbackConsole@@6BIDirItemsCallback@@@
CONST	SEGMENT
??_7CUpdateCallbackConsole@@6BIDirItemsCallback@@@ DD FLAT:??_R4CUpdateCallbackConsole@@6BIDirItemsCallback@@@ ; CUpdateCallbackConsole::`vftable'
	DD	FLAT:?ScanError@CUpdateCallbackConsole@@UAEJABVUString@@K@Z
	DD	FLAT:?ScanProgress@CUpdateCallbackConsole@@UAEJABUCDirItemsStat@@ABVUString@@_N@Z
CONST	ENDS
;	COMDAT ??_7CUpdateCallbackConsole@@6BIUpdateCallbackUI@@@
CONST	SEGMENT
??_7CUpdateCallbackConsole@@6BIUpdateCallbackUI@@@ DD FLAT:??_R4CUpdateCallbackConsole@@6BIUpdateCallbackUI@@@ ; CUpdateCallbackConsole::`vftable'
	DD	FLAT:?WriteSfx@CUpdateCallbackConsole@@UAEJPB_W_K@Z
	DD	FLAT:?SetTotal@CUpdateCallbackConsole@@UAEJ_K@Z
	DD	FLAT:?SetCompleted@CUpdateCallbackConsole@@UAEJPB_K@Z
	DD	FLAT:?SetRatioInfo@CUpdateCallbackConsole@@UAEJPB_K0@Z
	DD	FLAT:?CheckBreak@CUpdateCallbackConsole@@UAEJXZ
	DD	FLAT:?SetNumItems@CUpdateCallbackConsole@@UAEJ_K@Z
	DD	FLAT:?GetStream@CUpdateCallbackConsole@@UAEJPB_W_N1I@Z
	DD	FLAT:?OpenFileError@CUpdateCallbackConsole@@UAEJABVUString@@K@Z
	DD	FLAT:?ReadingFileError@CUpdateCallbackConsole@@UAEJABVUString@@K@Z
	DD	FLAT:?SetOperationResult@CUpdateCallbackConsole@@UAEJH@Z
	DD	FLAT:?ReportExtractResult@CUpdateCallbackConsole@@UAEJHHPB_W@Z
	DD	FLAT:?ReportUpdateOpeartion@CUpdateCallbackConsole@@UAEJIPB_W_N@Z
	DD	FLAT:?CryptoGetTextPassword2@CUpdateCallbackConsole@@UAEJPAHPAPA_W@Z
	DD	FLAT:?CryptoGetTextPassword@CUpdateCallbackConsole@@UAEJPAPA_W@Z
	DD	FLAT:?ShowDeleteFile@CUpdateCallbackConsole@@UAEJPB_W_N@Z
	DD	FLAT:?OpenResult@CUpdateCallbackConsole@@UAEJPBVCCodecs@@ABUCArchiveLink@@PB_WJ@Z
	DD	FLAT:?StartScanning@CUpdateCallbackConsole@@UAEJXZ
	DD	FLAT:?FinishScanning@CUpdateCallbackConsole@@UAEJABUCDirItemsStat@@@Z
	DD	FLAT:?StartOpenArchive@CUpdateCallbackConsole@@UAEJPB_W@Z
	DD	FLAT:?StartArchive@CUpdateCallbackConsole@@UAEJPB_W_N@Z
	DD	FLAT:?FinishArchive@CUpdateCallbackConsole@@UAEJABUCFinishArchiveStat@@@Z
	DD	FLAT:?DeletingAfterArchiving@CUpdateCallbackConsole@@UAEJABVUString@@_N@Z
	DD	FLAT:?FinishDeletingAfterArchiving@CUpdateCallbackConsole@@UAEJXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CUpdateCallbackConsole@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CUpdateCallbackConsole@@QAE@XZ$0
__ehfuncinfo$??0CUpdateCallbackConsole@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CUpdateCallbackConsole@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CUpdateCallbackConsole@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CUpdateCallbackConsole@@QAE@XZ PROC			; CUpdateCallbackConsole::CUpdateCallbackConsole, COMDAT
; _this$ = ecx
; Line 112
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CUpdateCallbackConsole@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUpdateCallbackUI2@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0CCallbackConsoleBase@@QAE@XZ		; CCallbackConsoleBase::CCallbackConsoleBase
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CUpdateCallbackConsole@@6BIUpdateCallbackUI@@@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], OFFSET ??_7CUpdateCallbackConsole@@6BIDirItemsCallback@@@
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+280], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 284				; 0000011cH
	call	??0UString@@QAE@XZ			; UString::UString
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+296], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+297], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CUpdateCallbackConsole@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1CCallbackConsoleBase@@QAE@XZ
__ehhandler$??0CUpdateCallbackConsole@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CUpdateCallbackConsole@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CUpdateCallbackConsole@@QAE@XZ ENDP			; CUpdateCallbackConsole::CUpdateCallbackConsole
PUBLIC	??1CErrorPathCodes@@QAE@XZ			; CErrorPathCodes::~CErrorPathCodes
PUBLIC	??0CErrorPathCodes@@QAE@XZ			; CErrorPathCodes::CErrorPathCodes
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CCallbackConsoleBase@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CCallbackConsoleBase@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CCallbackConsoleBase@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CCallbackConsoleBase@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CCallbackConsoleBase@@QAE@XZ$3
__ehfuncinfo$??0CCallbackConsoleBase@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0CCallbackConsoleBase@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CCallbackConsoleBase@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CCallbackConsoleBase@@QAE@XZ PROC			; CCallbackConsoleBase::CCallbackConsoleBase, COMDAT
; _this$ = ecx
; Line 60
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CCallbackConsoleBase@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	200					; 000000c8H
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CPercentPrinter@@QAE@I@Z		; CPercentPrinter::CPercentPrinter
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+184], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+185], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+188], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+192], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 196				; 000000c4H
	call	??0AString@@QAE@XZ			; AString::AString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 208				; 000000d0H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 220				; 000000dcH
	call	??0CErrorPathCodes@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 244				; 000000f4H
	call	??0CErrorPathCodes@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CCallbackConsoleBase@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CPercentPrinter@@QAE@XZ		; CPercentPrinter::~CPercentPrinter
__unwindfunclet$??0CCallbackConsoleBase@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 196				; 000000c4H
	jmp	??1AString@@QAE@XZ			; AString::~AString
__unwindfunclet$??0CCallbackConsoleBase@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 208				; 000000d0H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??0CCallbackConsoleBase@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 220				; 000000dcH
	jmp	??1CErrorPathCodes@@QAE@XZ
__ehhandler$??0CCallbackConsoleBase@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CCallbackConsoleBase@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CCallbackConsoleBase@@QAE@XZ ENDP			; CCallbackConsoleBase::CCallbackConsoleBase
PUBLIC	??0?$CRecordVector@K@@QAE@XZ			; CRecordVector<unsigned long>::CRecordVector<unsigned long>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CErrorPathCodes@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CErrorPathCodes@@QAE@XZ$0
__ehfuncinfo$??0CErrorPathCodes@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CErrorPathCodes@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CErrorPathCodes@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CErrorPathCodes@@QAE@XZ PROC				; CErrorPathCodes::CErrorPathCodes, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CErrorPathCodes@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::CObjectVector<UString>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0?$CRecordVector@K@@QAE@XZ		; CRecordVector<unsigned long>::CRecordVector<unsigned long>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CErrorPathCodes@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
__ehhandler$??0CErrorPathCodes@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CErrorPathCodes@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CErrorPathCodes@@QAE@XZ ENDP				; CErrorPathCodes::CErrorPathCodes
PUBLIC	??1?$CRecordVector@K@@QAE@XZ			; CRecordVector<unsigned long>::~CRecordVector<unsigned long>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CErrorPathCodes@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CErrorPathCodes@@QAE@XZ$0
__ehfuncinfo$??1CErrorPathCodes@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CErrorPathCodes@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CErrorPathCodes@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CErrorPathCodes@@QAE@XZ PROC				; CErrorPathCodes::~CErrorPathCodes, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CErrorPathCodes@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1?$CRecordVector@K@@QAE@XZ		; CRecordVector<unsigned long>::~CRecordVector<unsigned long>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CErrorPathCodes@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
__ehhandler$??1CErrorPathCodes@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CErrorPathCodes@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CErrorPathCodes@@QAE@XZ ENDP				; CErrorPathCodes::~CErrorPathCodes
PUBLIC	??_7IUpdateCallbackUI2@@6BIDirItemsCallback@@@	; IUpdateCallbackUI2::`vftable'
PUBLIC	??_7IUpdateCallbackUI2@@6BIUpdateCallbackUI@@@	; IUpdateCallbackUI2::`vftable'
PUBLIC	??0IDirItemsCallback@@QAE@XZ			; IDirItemsCallback::IDirItemsCallback
PUBLIC	??0IUpdateCallbackUI@@QAE@XZ			; IUpdateCallbackUI::IUpdateCallbackUI
PUBLIC	??_R4IUpdateCallbackUI2@@6BIUpdateCallbackUI@@@	; IUpdateCallbackUI2::`RTTI Complete Object Locator'
PUBLIC	??_R4IUpdateCallbackUI2@@6BIDirItemsCallback@@@	; IUpdateCallbackUI2::`RTTI Complete Object Locator'
;	COMDAT ??_R4IUpdateCallbackUI2@@6BIDirItemsCallback@@@
rdata$r	SEGMENT
??_R4IUpdateCallbackUI2@@6BIDirItemsCallback@@@ DD 00H	; IUpdateCallbackUI2::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AUIUpdateCallbackUI2@@@8
	DD	FLAT:??_R3IUpdateCallbackUI2@@8
rdata$r	ENDS
;	COMDAT ??_R4IUpdateCallbackUI2@@6BIUpdateCallbackUI@@@
rdata$r	SEGMENT
??_R4IUpdateCallbackUI2@@6BIUpdateCallbackUI@@@ DD 00H	; IUpdateCallbackUI2::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIUpdateCallbackUI2@@@8
	DD	FLAT:??_R3IUpdateCallbackUI2@@8
rdata$r	ENDS
;	COMDAT ??_7IUpdateCallbackUI2@@6BIDirItemsCallback@@@
CONST	SEGMENT
??_7IUpdateCallbackUI2@@6BIDirItemsCallback@@@ DD FLAT:??_R4IUpdateCallbackUI2@@6BIDirItemsCallback@@@ ; IUpdateCallbackUI2::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7IUpdateCallbackUI2@@6BIUpdateCallbackUI@@@
CONST	SEGMENT
??_7IUpdateCallbackUI2@@6BIUpdateCallbackUI@@@ DD FLAT:??_R4IUpdateCallbackUI2@@6BIUpdateCallbackUI@@@ ; IUpdateCallbackUI2::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0IUpdateCallbackUI2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IUpdateCallbackUI2@@QAE@XZ PROC			; IUpdateCallbackUI2::IUpdateCallbackUI2, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUpdateCallbackUI@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0IDirItemsCallback@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7IUpdateCallbackUI2@@6BIUpdateCallbackUI@@@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], OFFSET ??_7IUpdateCallbackUI2@@6BIDirItemsCallback@@@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0IUpdateCallbackUI2@@QAE@XZ ENDP			; IUpdateCallbackUI2::IUpdateCallbackUI2
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CCallbackConsoleBase@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CCallbackConsoleBase@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CCallbackConsoleBase@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CCallbackConsoleBase@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CCallbackConsoleBase@@QAE@XZ$3
__ehfuncinfo$??1CCallbackConsoleBase@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??1CCallbackConsoleBase@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CCallbackConsoleBase@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CCallbackConsoleBase@@QAE@XZ PROC			; CCallbackConsoleBase::~CCallbackConsoleBase, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CCallbackConsoleBase@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 244				; 000000f4H
	call	??1CErrorPathCodes@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 220				; 000000dcH
	call	??1CErrorPathCodes@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 208				; 000000d0H
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 196				; 000000c4H
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CPercentPrinter@@QAE@XZ		; CPercentPrinter::~CPercentPrinter
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CCallbackConsoleBase@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CPercentPrinter@@QAE@XZ		; CPercentPrinter::~CPercentPrinter
__unwindfunclet$??1CCallbackConsoleBase@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 196				; 000000c4H
	jmp	??1AString@@QAE@XZ			; AString::~AString
__unwindfunclet$??1CCallbackConsoleBase@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 208				; 000000d0H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??1CCallbackConsoleBase@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 220				; 000000dcH
	jmp	??1CErrorPathCodes@@QAE@XZ
__ehhandler$??1CCallbackConsoleBase@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CCallbackConsoleBase@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CCallbackConsoleBase@@QAE@XZ ENDP			; CCallbackConsoleBase::~CCallbackConsoleBase
PUBLIC	??_7IUpdateCallbackUI@@6B@			; IUpdateCallbackUI::`vftable'
PUBLIC	??_R4IUpdateCallbackUI@@6B@			; IUpdateCallbackUI::`RTTI Complete Object Locator'
;	COMDAT ??_R4IUpdateCallbackUI@@6B@
rdata$r	SEGMENT
??_R4IUpdateCallbackUI@@6B@ DD 00H			; IUpdateCallbackUI::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIUpdateCallbackUI@@@8
	DD	FLAT:??_R3IUpdateCallbackUI@@8
rdata$r	ENDS
;	COMDAT ??_7IUpdateCallbackUI@@6B@
CONST	SEGMENT
??_7IUpdateCallbackUI@@6B@ DD FLAT:??_R4IUpdateCallbackUI@@6B@ ; IUpdateCallbackUI::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0IUpdateCallbackUI@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IUpdateCallbackUI@@QAE@XZ PROC			; IUpdateCallbackUI::IUpdateCallbackUI, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7IUpdateCallbackUI@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0IUpdateCallbackUI@@QAE@XZ ENDP			; IUpdateCallbackUI::IUpdateCallbackUI
_TEXT	ENDS
PUBLIC	??_7IDirItemsCallback@@6B@			; IDirItemsCallback::`vftable'
PUBLIC	??_R4IDirItemsCallback@@6B@			; IDirItemsCallback::`RTTI Complete Object Locator'
;	COMDAT ??_R4IDirItemsCallback@@6B@
rdata$r	SEGMENT
??_R4IDirItemsCallback@@6B@ DD 00H			; IDirItemsCallback::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIDirItemsCallback@@@8
	DD	FLAT:??_R3IDirItemsCallback@@8
rdata$r	ENDS
;	COMDAT ??_7IDirItemsCallback@@6B@
CONST	SEGMENT
??_7IDirItemsCallback@@6B@ DD FLAT:??_R4IDirItemsCallback@@6B@ ; IDirItemsCallback::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0IDirItemsCallback@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IDirItemsCallback@@QAE@XZ PROC			; IDirItemsCallback::IDirItemsCallback, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7IDirItemsCallback@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0IDirItemsCallback@@QAE@XZ ENDP			; IDirItemsCallback::IDirItemsCallback
_TEXT	ENDS
PUBLIC	??_7CHashCallbackConsole@@6B@			; CHashCallbackConsole::`vftable'
PUBLIC	??0IHashCallbackUI@@QAE@XZ			; IHashCallbackUI::IHashCallbackUI
PUBLIC	??_R4CHashCallbackConsole@@6B@			; CHashCallbackConsole::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCHashCallbackConsole@@@8		; CHashCallbackConsole `RTTI Type Descriptor'
PUBLIC	??_R3CHashCallbackConsole@@8			; CHashCallbackConsole::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CHashCallbackConsole@@8			; CHashCallbackConsole::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CHashCallbackConsole@@8		; CHashCallbackConsole::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@IHashCallbackUI@@8		; IHashCallbackUI::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIHashCallbackUI@@@8			; IHashCallbackUI `RTTI Type Descriptor'
PUBLIC	??_R3IHashCallbackUI@@8				; IHashCallbackUI::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IHashCallbackUI@@8				; IHashCallbackUI::`RTTI Base Class Array'
EXTRN	?ScanError@CHashCallbackConsole@@UAEJABVUString@@K@Z:PROC ; CHashCallbackConsole::ScanError
EXTRN	?ScanProgress@CHashCallbackConsole@@UAEJABUCDirItemsStat@@ABVUString@@_N@Z:PROC ; CHashCallbackConsole::ScanProgress
EXTRN	?StartScanning@CHashCallbackConsole@@UAEJXZ:PROC ; CHashCallbackConsole::StartScanning
EXTRN	?FinishScanning@CHashCallbackConsole@@UAEJABUCDirItemsStat@@@Z:PROC ; CHashCallbackConsole::FinishScanning
EXTRN	?SetNumFiles@CHashCallbackConsole@@UAEJ_K@Z:PROC ; CHashCallbackConsole::SetNumFiles
EXTRN	?SetTotal@CHashCallbackConsole@@UAEJ_K@Z:PROC	; CHashCallbackConsole::SetTotal
EXTRN	?SetCompleted@CHashCallbackConsole@@UAEJPB_K@Z:PROC ; CHashCallbackConsole::SetCompleted
EXTRN	?CheckBreak@CHashCallbackConsole@@UAEJXZ:PROC	; CHashCallbackConsole::CheckBreak
EXTRN	?BeforeFirstFile@CHashCallbackConsole@@UAEJABUCHashBundle@@@Z:PROC ; CHashCallbackConsole::BeforeFirstFile
EXTRN	?GetStream@CHashCallbackConsole@@UAEJPB_W_N@Z:PROC ; CHashCallbackConsole::GetStream
EXTRN	?OpenFileError@CHashCallbackConsole@@UAEJABVUString@@K@Z:PROC ; CHashCallbackConsole::OpenFileError
EXTRN	?SetOperationResult@CHashCallbackConsole@@UAEJ_KABUCHashBundle@@_N@Z:PROC ; CHashCallbackConsole::SetOperationResult
EXTRN	?AfterLastFile@CHashCallbackConsole@@UAEJABUCHashBundle@@@Z:PROC ; CHashCallbackConsole::AfterLastFile
;	COMDAT ??_R2IHashCallbackUI@@8
; File c:\workspace\7z1505-src\cpp\7zip\ui\console\hashcon.h
rdata$r	SEGMENT
??_R2IHashCallbackUI@@8 DD FLAT:??_R1A@?0A@EA@IHashCallbackUI@@8 ; IHashCallbackUI::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IDirItemsCallback@@8
rdata$r	ENDS
;	COMDAT ??_R3IHashCallbackUI@@8
rdata$r	SEGMENT
??_R3IHashCallbackUI@@8 DD 00H				; IHashCallbackUI::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2IHashCallbackUI@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIHashCallbackUI@@@8
_DATA	SEGMENT
??_R0?AUIHashCallbackUI@@@8 DD FLAT:??_7type_info@@6B@	; IHashCallbackUI `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIHashCallbackUI@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IHashCallbackUI@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IHashCallbackUI@@8 DD FLAT:??_R0?AUIHashCallbackUI@@@8 ; IHashCallbackUI::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IHashCallbackUI@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CHashCallbackConsole@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CHashCallbackConsole@@8 DD FLAT:??_R0?AVCHashCallbackConsole@@@8 ; CHashCallbackConsole::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CHashCallbackConsole@@8
rdata$r	ENDS
;	COMDAT ??_R2CHashCallbackConsole@@8
rdata$r	SEGMENT
??_R2CHashCallbackConsole@@8 DD FLAT:??_R1A@?0A@EA@CHashCallbackConsole@@8 ; CHashCallbackConsole::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IHashCallbackUI@@8
	DD	FLAT:??_R1A@?0A@EA@IDirItemsCallback@@8
	DD	FLAT:??_R17?0A@EA@CCallbackConsoleBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CHashCallbackConsole@@8
rdata$r	SEGMENT
??_R3CHashCallbackConsole@@8 DD 00H			; CHashCallbackConsole::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2CHashCallbackConsole@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCHashCallbackConsole@@@8
_DATA	SEGMENT
??_R0?AVCHashCallbackConsole@@@8 DD FLAT:??_7type_info@@6B@ ; CHashCallbackConsole `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCHashCallbackConsole@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CHashCallbackConsole@@6B@
rdata$r	SEGMENT
??_R4CHashCallbackConsole@@6B@ DD 00H			; CHashCallbackConsole::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCHashCallbackConsole@@@8
	DD	FLAT:??_R3CHashCallbackConsole@@8
rdata$r	ENDS
;	COMDAT ??_7CHashCallbackConsole@@6B@
CONST	SEGMENT
??_7CHashCallbackConsole@@6B@ DD FLAT:??_R4CHashCallbackConsole@@6B@ ; CHashCallbackConsole::`vftable'
	DD	FLAT:?ScanError@CHashCallbackConsole@@UAEJABVUString@@K@Z
	DD	FLAT:?ScanProgress@CHashCallbackConsole@@UAEJABUCDirItemsStat@@ABVUString@@_N@Z
	DD	FLAT:?StartScanning@CHashCallbackConsole@@UAEJXZ
	DD	FLAT:?FinishScanning@CHashCallbackConsole@@UAEJABUCDirItemsStat@@@Z
	DD	FLAT:?SetNumFiles@CHashCallbackConsole@@UAEJ_K@Z
	DD	FLAT:?SetTotal@CHashCallbackConsole@@UAEJ_K@Z
	DD	FLAT:?SetCompleted@CHashCallbackConsole@@UAEJPB_K@Z
	DD	FLAT:?CheckBreak@CHashCallbackConsole@@UAEJXZ
	DD	FLAT:?BeforeFirstFile@CHashCallbackConsole@@UAEJABUCHashBundle@@@Z
	DD	FLAT:?GetStream@CHashCallbackConsole@@UAEJPB_W_N@Z
	DD	FLAT:?OpenFileError@CHashCallbackConsole@@UAEJABVUString@@K@Z
	DD	FLAT:?SetOperationResult@CHashCallbackConsole@@UAEJ_KABUCHashBundle@@_N@Z
	DD	FLAT:?AfterLastFile@CHashCallbackConsole@@UAEJABUCHashBundle@@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CHashCallbackConsole@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CHashCallbackConsole@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CHashCallbackConsole@@QAE@XZ$1
__ehfuncinfo$??0CHashCallbackConsole@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CHashCallbackConsole@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CHashCallbackConsole@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CHashCallbackConsole@@QAE@XZ PROC			; CHashCallbackConsole::CHashCallbackConsole, COMDAT
; _this$ = ecx
; Line 39
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CHashCallbackConsole@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IHashCallbackUI@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0CCallbackConsoleBase@@QAE@XZ		; CCallbackConsoleBase::CCallbackConsoleBase
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CHashCallbackConsole@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 280				; 00000118H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 292				; 00000124H
	call	??0AString@@QAE@XZ			; AString::AString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+304], 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+305], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+306], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+307], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CHashCallbackConsole@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1CCallbackConsoleBase@@QAE@XZ
__unwindfunclet$??0CHashCallbackConsole@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 280				; 00000118H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$??0CHashCallbackConsole@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CHashCallbackConsole@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CHashCallbackConsole@@QAE@XZ ENDP			; CHashCallbackConsole::CHashCallbackConsole
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CHashCallbackConsole@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CHashCallbackConsole@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CHashCallbackConsole@@QAE@XZ$1
__ehfuncinfo$??1CHashCallbackConsole@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CHashCallbackConsole@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CHashCallbackConsole@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CHashCallbackConsole@@QAE@XZ PROC			; CHashCallbackConsole::~CHashCallbackConsole, COMDAT
; _this$ = ecx
; Line 41
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CHashCallbackConsole@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CHashCallbackConsole@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 292				; 00000124H
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 280				; 00000118H
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1CCallbackConsoleBase@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CHashCallbackConsole@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1CCallbackConsoleBase@@QAE@XZ
__unwindfunclet$??1CHashCallbackConsole@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 280				; 00000118H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$??1CHashCallbackConsole@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CHashCallbackConsole@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CHashCallbackConsole@@QAE@XZ ENDP			; CHashCallbackConsole::~CHashCallbackConsole
PUBLIC	??_7IHashCallbackUI@@6B@			; IHashCallbackUI::`vftable'
PUBLIC	??_R4IHashCallbackUI@@6B@			; IHashCallbackUI::`RTTI Complete Object Locator'
;	COMDAT ??_R4IHashCallbackUI@@6B@
rdata$r	SEGMENT
??_R4IHashCallbackUI@@6B@ DD 00H			; IHashCallbackUI::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIHashCallbackUI@@@8
	DD	FLAT:??_R3IHashCallbackUI@@8
rdata$r	ENDS
;	COMDAT ??_7IHashCallbackUI@@6B@
CONST	SEGMENT
??_7IHashCallbackUI@@6B@ DD FLAT:??_R4IHashCallbackUI@@6B@ ; IHashCallbackUI::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0IHashCallbackUI@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IHashCallbackUI@@QAE@XZ PROC				; IHashCallbackUI::IHashCallbackUI, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IDirItemsCallback@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7IHashCallbackUI@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0IHashCallbackUI@@QAE@XZ ENDP				; IHashCallbackUI::IHashCallbackUI
_TEXT	ENDS
PUBLIC	__TI1?AW4EEnum@NExitCode@@
PUBLIC	__CTA1?AW4EEnum@NExitCode@@
PUBLIC	__CT??_R0?AW4EEnum@NExitCode@@@84
PUBLIC	??_R0?AW4EEnum@NExitCode@@@8			; enum NExitCode::EEnum `RTTI Type Descriptor'
;	COMDAT ??_R0?AW4EEnum@NExitCode@@@8
; File c:\workspace\7z1505-src\cpp\7zip\ui\console\main.cpp
_DATA	SEGMENT
??_R0?AW4EEnum@NExitCode@@@8 DD FLAT:??_7type_info@@6B@	; enum NExitCode::EEnum `RTTI Type Descriptor'
	DD	00H
	DB	'.?AW4EEnum@NExitCode@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AW4EEnum@NExitCode@@@84
xdata$x	SEGMENT
__CT??_R0?AW4EEnum@NExitCode@@@84 DD 01H
	DD	FLAT:??_R0?AW4EEnum@NExitCode@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	00H
xdata$x	ENDS
;	COMDAT __CTA1?AW4EEnum@NExitCode@@
xdata$x	SEGMENT
__CTA1?AW4EEnum@NExitCode@@ DD 01H
	DD	FLAT:__CT??_R0?AW4EEnum@NExitCode@@@84
xdata$x	ENDS
;	COMDAT __TI1?AW4EEnum@NExitCode@@
xdata$x	SEGMENT
__TI1?AW4EEnum@NExitCode@@ DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA1?AW4EEnum@NExitCode@@
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T79786 = -4						; size = 4
_message$ = 8						; size = 4
_code$ = 12						; size = 4
?ShowMessageAndThrowException@@YGXPBDW4EEnum@NExitCode@@@Z PROC ; ShowMessageAndThrowException
; Line 156
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 157
	cmp	DWORD PTR ?g_ErrStream@@3PAVCStdOutStream@@A, 0 ; g_ErrStream
	je	SHORT $LN1@ShowMessag
; Line 158
	push	OFFSET ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl
	mov	eax, DWORD PTR _message$[ebp]
	push	eax
	push	OFFSET $SG77154
	push	OFFSET ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl
	mov	ecx, DWORD PTR ?g_ErrStream@@3PAVCStdOutStream@@A ; g_ErrStream
	call	??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@PBD@Z		; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@PBD@Z		; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<
$LN1@ShowMessag:
; Line 159
	mov	ecx, DWORD PTR _code$[ebp]
	mov	DWORD PTR $T79786[ebp], ecx
	push	OFFSET __TI1?AW4EEnum@NExitCode@@
	lea	edx, DWORD PTR $T79786[ebp]
	push	edx
	call	__CxxThrowException@8
$LN3@ShowMessag:
; Line 160
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?ShowMessageAndThrowException@@YGXPBDW4EEnum@NExitCode@@@Z ENDP ; ShowMessageAndThrowException
; Function compile flags: /Odtp /RTCsu
_so$ = 8						; size = 4
_needHelp$ = 12						; size = 1
?ShowCopyrightAndHelp@@YGXPAVCStdOutStream@@_N@Z PROC	; ShowCopyrightAndHelp
; Line 175
	push	ebp
	mov	ebp, esp
; Line 176
	cmp	DWORD PTR _so$[ebp], 0
	jne	SHORT $LN2@ShowCopyri
; Line 177
	jmp	SHORT $LN3@ShowCopyri
$LN2@ShowCopyri:
; Line 178
	mov	eax, DWORD PTR _kCopyrightString
	push	eax
	mov	ecx, DWORD PTR _so$[ebp]
	call	??6CStdOutStream@@QAEAAV0@PBD@Z		; CStdOutStream::operator<<
; Line 180
	movzx	ecx, BYTE PTR _needHelp$[ebp]
	test	ecx, ecx
	je	SHORT $LN3@ShowCopyri
; Line 181
	mov	edx, DWORD PTR _kHelpString
	push	edx
	mov	ecx, DWORD PTR _so$[ebp]
	call	??6CStdOutStream@@QAEAAV0@PBD@Z		; CStdOutStream::operator<<
$LN3@ShowCopyri:
; Line 182
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?ShowCopyrightAndHelp@@YGXPAVCStdOutStream@@_N@Z ENDP	; ShowCopyrightAndHelp
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	??0AString@@QAE@PBD@Z:PROC			; AString::AString
EXTRN	?ConvertUInt32ToString@@YGXIPAD@Z:PROC		; ConvertUInt32ToString
xdata$x	SEGMENT
__unwindtable$?PrintUInt32@@YGXAAVCStdOutStream@@II@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PrintUInt32@@YGXAAVCStdOutStream@@II@Z$0
__ehfuncinfo$?PrintUInt32@@YGXAAVCStdOutStream@@II@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PrintUInt32@@YGXAAVCStdOutStream@@II@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T79790 = -52						; size = 12
_s$ = -36						; size = 16
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_so$ = 8						; size = 4
_val$ = 12						; size = 4
_size$ = 16						; size = 4
?PrintUInt32@@YGXAAVCStdOutStream@@II@Z PROC		; PrintUInt32
; Line 194
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?PrintUInt32@@YGXAAVCStdOutStream@@II@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 196
	lea	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _val$[ebp]
	push	ecx
	call	?ConvertUInt32ToString@@YGXIPAD@Z	; ConvertUInt32ToString
; Line 197
	lea	edx, DWORD PTR _s$[ebp]
	push	edx
	lea	ecx, DWORD PTR $T79790[ebp]
	call	??0AString@@QAE@PBD@Z			; AString::AString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T79790[ebp]
	push	ecx
	mov	edx, DWORD PTR _so$[ebp]
	push	edx
	call	?PrintStringRight@@YGXAAVCStdOutStream@@ABVAString@@I@Z ; PrintStringRight
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T79790[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
; Line 198
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@PrintUInt3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN7@PrintUInt3:
	DD	1
	DD	$LN6@PrintUInt3
$LN6@PrintUInt3:
	DD	-36					; ffffffdcH
	DD	16					; 00000010H
	DD	$LN4@PrintUInt3
$LN4@PrintUInt3:
	DB	115					; 00000073H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?PrintUInt32@@YGXAAVCStdOutStream@@II@Z$0:
	lea	ecx, DWORD PTR $T79790[ebp]
	jmp	??1AString@@QAE@XZ			; AString::~AString
__ehhandler$?PrintUInt32@@YGXAAVCStdOutStream@@II@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-48]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?PrintUInt32@@YGXAAVCStdOutStream@@II@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?PrintUInt32@@YGXAAVCStdOutStream@@II@Z ENDP		; PrintUInt32
PUBLIC	??BAString@@QBEPBDXZ				; AString::operator char const *
PUBLIC	?Len@AString@@QBEIXZ				; AString::Len
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$77172 = -8						; size = 4
_len$ = -4						; size = 4
_so$ = 8						; size = 4
_s$ = 12						; size = 4
_size$ = 16						; size = 4
?PrintStringRight@@YGXAAVCStdOutStream@@ABVAString@@I@Z PROC ; PrintStringRight
; Line 186
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 187
	mov	ecx, DWORD PTR _s$[ebp]
	call	?Len@AString@@QBEIXZ			; AString::Len
	mov	DWORD PTR _len$[ebp], eax
; Line 188
	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR _i$77172[ebp], eax
	jmp	SHORT $LN3@PrintStrin
$LN2@PrintStrin:
	mov	ecx, DWORD PTR _i$77172[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$77172[ebp], ecx
$LN3@PrintStrin:
	mov	edx, DWORD PTR _i$77172[ebp]
	cmp	edx, DWORD PTR _size$[ebp]
	jae	SHORT $LN1@PrintStrin
; Line 189
	push	32					; 00000020H
	mov	ecx, DWORD PTR _so$[ebp]
	call	??6CStdOutStream@@QAEAAV0@D@Z		; CStdOutStream::operator<<
	jmp	SHORT $LN2@PrintStrin
$LN1@PrintStrin:
; Line 190
	mov	ecx, DWORD PTR _s$[ebp]
	call	??BAString@@QBEPBDXZ			; AString::operator char const *
	push	eax
	mov	ecx, DWORD PTR _so$[ebp]
	call	??6CStdOutStream@@QAEAAV0@PBD@Z		; CStdOutStream::operator<<
; Line 191
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?PrintStringRight@@YGXAAVCStdOutStream@@ABVAString@@I@Z ENDP ; PrintStringRight
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Len@AString@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Len@AString@@QBEIXZ PROC				; AString::Len, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 234
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Len@AString@@QBEIXZ ENDP				; AString::Len
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??BAString@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BAString@@QBEPBDXZ PROC				; AString::operator char const *, COMDAT
; _this$ = ecx
; Line 238
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??BAString@@QBEPBDXZ ENDP				; AString::operator char const *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
_TEXT	SEGMENT
_so$ = 8						; size = 4
_libIndex$ = 12						; size = 4
?PrintLibIndex@@YGXAAVCStdOutStream@@H@Z PROC		; PrintLibIndex
; File c:\workspace\7z1505-src\cpp\7zip\ui\console\main.cpp
; Line 201
	push	ebp
	mov	ebp, esp
; Line 202
	cmp	DWORD PTR _libIndex$[ebp], 0
	jl	SHORT $LN2@PrintLibIn
; Line 203
	push	2
	mov	eax, DWORD PTR _libIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _so$[ebp]
	push	ecx
	call	?PrintUInt32@@YGXAAVCStdOutStream@@II@Z	; PrintUInt32
; Line 204
	jmp	SHORT $LN1@PrintLibIn
$LN2@PrintLibIn:
; Line 205
	push	OFFSET $SG77189
	mov	ecx, DWORD PTR _so$[ebp]
	call	??6CStdOutStream@@QAEAAV0@PBD@Z		; CStdOutStream::operator<<
$LN1@PrintLibIn:
; Line 206
	push	32					; 00000020H
	mov	ecx, DWORD PTR _so$[ebp]
	call	??6CStdOutStream@@QAEAAV0@D@Z		; CStdOutStream::operator<<
; Line 207
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?PrintLibIndex@@YGXAAVCStdOutStream@@H@Z ENDP		; PrintLibIndex
_TEXT	ENDS
PUBLIC	?Len@UString@@QBEIXZ				; UString::Len
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$77196 = -8						; size = 4
_len$ = -4						; size = 4
_so$ = 8						; size = 4
_s$ = 12						; size = 4
_size$ = 16						; size = 4
?PrintString@@YGXAAVCStdOutStream@@ABVUString@@I@Z PROC	; PrintString
; Line 210
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 211
	mov	ecx, DWORD PTR _s$[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	mov	DWORD PTR _len$[ebp], eax
; Line 212
	mov	ecx, DWORD PTR _s$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	mov	ecx, DWORD PTR _so$[ebp]
	call	??6CStdOutStream@@QAEAAV0@PB_W@Z	; CStdOutStream::operator<<
; Line 213
	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR _i$77196[ebp], eax
	jmp	SHORT $LN3@PrintStrin@2
$LN2@PrintStrin@2:
	mov	ecx, DWORD PTR _i$77196[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$77196[ebp], ecx
$LN3@PrintStrin@2:
	mov	edx, DWORD PTR _i$77196[ebp]
	cmp	edx, DWORD PTR _size$[ebp]
	jae	SHORT $LN4@PrintStrin@2
; Line 214
	push	32					; 00000020H
	mov	ecx, DWORD PTR _so$[ebp]
	call	??6CStdOutStream@@QAEAAV0@D@Z		; CStdOutStream::operator<<
	jmp	SHORT $LN2@PrintStrin@2
$LN4@PrintStrin@2:
; Line 215
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?PrintString@@YGXAAVCStdOutStream@@ABVUString@@I@Z ENDP	; PrintString
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Len@UString@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Len@UString@@QBEIXZ PROC				; UString::Len, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 472
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Len@UString@@QBEIXZ ENDP				; UString::Len
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
_TEXT	SEGMENT
tv68 = -4						; size = 4
_val$ = 8						; size = 4
?GetHex@@YGDI@Z PROC					; GetHex
; File c:\workspace\7z1505-src\cpp\7zip\ui\console\main.cpp
; Line 218
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 219
	cmp	DWORD PTR _val$[ebp], 10		; 0000000aH
	jae	SHORT $LN3@GetHex
	mov	eax, DWORD PTR _val$[ebp]
	add	eax, 48					; 00000030H
	mov	DWORD PTR tv68[ebp], eax
	jmp	SHORT $LN4@GetHex
$LN3@GetHex:
	mov	ecx, DWORD PTR _val$[ebp]
	add	ecx, 55					; 00000037H
	mov	DWORD PTR tv68[ebp], ecx
$LN4@GetHex:
	mov	al, BYTE PTR tv68[ebp]
; Line 220
	mov	esp, ebp
	pop	ebp
	ret	4
?GetHex@@YGDI@Z ENDP					; GetHex
_TEXT	ENDS
PUBLIC	??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[]
PUBLIC	?IsEmpty@AString@@QBE_NXZ			; AString::IsEmpty
PUBLIC	?ThereIsError@CUpdateErrorInfo@@QBE_NXZ		; CUpdateErrorInfo::ThereIsError
EXTRN	?MyFormatMessage@NError@NWindows@@YG?AVUString@@K@Z:PROC ; NWindows::NError::MyFormatMessage
EXTRN	?Add_LF@UString@@QAEXXZ:PROC			; UString::Add_LF
EXTRN	?AddAscii@UString@@QAEXPBD@Z:PROC		; UString::AddAscii
xdata$x	SEGMENT
__unwindtable$?WarningsCheck@@YGHJABVCCallbackConsoleBase@@ABUCUpdateErrorInfo@@AAVCStdOutStream@@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?WarningsCheck@@YGHJABVCCallbackConsoleBase@@ABUCUpdateErrorInfo@@AAVCStdOutStream@@_N@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?WarningsCheck@@YGHJABVCCallbackConsoleBase@@ABUCUpdateErrorInfo@@AAVCStdOutStream@@_N@Z$1
__ehfuncinfo$?WarningsCheck@@YGHJABVCCallbackConsoleBase@@ABUCUpdateErrorInfo@@AAVCStdOutStream@@_N@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?WarningsCheck@@YGHJABVCCallbackConsoleBase@@ABUCUpdateErrorInfo@@AAVCStdOutStream@@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv221 = -68						; size = 4
tv131 = -64						; size = 4
$T79813 = -60						; size = 4
$T79812 = -56						; size = 12
_numErrors$ = -44					; size = 4
_i$77231 = -40						; size = 4
_message$77229 = -32					; size = 12
_exitCode$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_result$ = 8						; size = 4
_callback$ = 12						; size = 4
_errorInfo$ = 16					; size = 4
_so$ = 20						; size = 4
_showHeaders$ = 24					; size = 1
?WarningsCheck@@YGHJABVCCallbackConsoleBase@@ABUCUpdateErrorInfo@@AAVCStdOutStream@@_N@Z PROC ; WarningsCheck
; Line 234
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?WarningsCheck@@YGHJABVCCallbackConsoleBase@@ABUCUpdateErrorInfo@@AAVCStdOutStream@@_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 56					; 00000038H
	push	edi
	lea	edi, DWORD PTR [ebp-68]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 235
	mov	DWORD PTR _exitCode$[ebp], 0
; Line 237
	mov	ecx, DWORD PTR _callback$[ebp]
	add	ecx, 244				; 000000f4H
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	test	eax, eax
	je	SHORT $LN14@WarningsCh
; Line 239
	push	OFFSET ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl
	mov	ecx, DWORD PTR _so$[ebp]
	call	??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<
; Line 240
	push	OFFSET ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl
	push	OFFSET ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl
	push	OFFSET $SG77224
	mov	ecx, DWORD PTR _so$[ebp]
	call	??6CStdOutStream@@QAEAAV0@PBD@Z		; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<
; Line 241
	mov	eax, DWORD PTR _so$[ebp]
	push	eax
	mov	ecx, DWORD PTR _callback$[ebp]
	add	ecx, 244				; 000000f4H
	push	ecx
	call	?PrintWarningsPaths@@YGXABUCErrorPathCodes@@AAVCStdOutStream@@@Z ; PrintWarningsPaths
; Line 242
	mov	ecx, DWORD PTR _callback$[ebp]
	add	ecx, 244				; 000000f4H
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	push	eax
	push	OFFSET $SG77225
	mov	ecx, DWORD PTR _so$[ebp]
	call	??6CStdOutStream@@QAEAAV0@PBD@Z		; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@I@Z		; CStdOutStream::operator<<
; Line 243
	push	OFFSET ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl
	mov	ecx, DWORD PTR _so$[ebp]
	call	??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<
; Line 244
	mov	DWORD PTR _exitCode$[ebp], 1
$LN14@WarningsCh:
; Line 247
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN12@WarningsCh
	mov	ecx, DWORD PTR _errorInfo$[ebp]
	call	?ThereIsError@CUpdateErrorInfo@@QBE_NXZ	; CUpdateErrorInfo::ThereIsError
	movzx	edx, al
	test	edx, edx
	je	$LN13@WarningsCh
$LN12@WarningsCh:
; Line 249
	lea	ecx, DWORD PTR _message$77229[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 250
	mov	ecx, DWORD PTR _errorInfo$[ebp]
	add	ecx, 4
	call	?IsEmpty@AString@@QBE_NXZ		; AString::IsEmpty
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN11@WarningsCh
; Line 252
	mov	ecx, DWORD PTR _errorInfo$[ebp]
	add	ecx, 4
	call	??BAString@@QBEPBDXZ			; AString::operator char const *
	push	eax
	lea	ecx, DWORD PTR _message$77229[ebp]
	call	?AddAscii@UString@@QAEXPBD@Z		; UString::AddAscii
; Line 253
	lea	ecx, DWORD PTR _message$77229[ebp]
	call	?Add_LF@UString@@QAEXXZ			; UString::Add_LF
$LN11@WarningsCh:
; Line 256
	mov	DWORD PTR _i$77231[ebp], 0
	jmp	SHORT $LN10@WarningsCh
$LN9@WarningsCh:
	mov	ecx, DWORD PTR _i$77231[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$77231[ebp], ecx
$LN10@WarningsCh:
	mov	ecx, DWORD PTR _errorInfo$[ebp]
	add	ecx, 16					; 00000010H
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	cmp	DWORD PTR _i$77231[ebp], eax
	jae	SHORT $LN8@WarningsCh
; Line 258
	mov	edx, DWORD PTR _i$77231[ebp]
	push	edx
	mov	ecx, DWORD PTR _errorInfo$[ebp]
	add	ecx, 16					; 00000010H
	call	??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[]
	push	eax
	lea	ecx, DWORD PTR _message$77229[ebp]
	call	??YUString@@QAEAAV0@ABV0@@Z		; UString::operator+=
; Line 259
	lea	ecx, DWORD PTR _message$77229[ebp]
	call	?Add_LF@UString@@QAEXXZ			; UString::Add_LF
; Line 260
	jmp	SHORT $LN9@WarningsCh
$LN8@WarningsCh:
; Line 262
	mov	eax, DWORD PTR _errorInfo$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN7@WarningsCh
; Line 264
	mov	ecx, DWORD PTR _errorInfo$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	lea	eax, DWORD PTR $T79812[ebp]
	push	eax
	call	?MyFormatMessage@NError@NWindows@@YG?AVUString@@K@Z ; NWindows::NError::MyFormatMessage
	mov	DWORD PTR tv131[ebp], eax
	mov	ecx, DWORD PTR tv131[ebp]
	mov	DWORD PTR tv221[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR tv221[ebp]
	push	edx
	lea	ecx, DWORD PTR _message$77229[ebp]
	call	??YUString@@QAEAAV0@ABV0@@Z		; UString::operator+=
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T79812[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
; Line 265
	lea	ecx, DWORD PTR _message$77229[ebp]
	call	?Add_LF@UString@@QAEXXZ			; UString::Add_LF
$LN7@WarningsCh:
; Line 267
	lea	ecx, DWORD PTR _message$77229[ebp]
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN6@WarningsCh
; Line 268
	lea	ecx, DWORD PTR _message$77229[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	push	OFFSET $SG77238
	mov	ecx, DWORD PTR _so$[ebp]
	call	??6CStdOutStream@@QAEAAV0@PB_W@Z	; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@PB_W@Z	; CStdOutStream::operator<<
$LN6@WarningsCh:
; Line 272
	mov	DWORD PTR $T79813[ebp], 2
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _message$77229[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T79813[ebp]
	jmp	$LN15@WarningsCh
$LN13@WarningsCh:
; Line 275
	mov	ecx, DWORD PTR _callback$[ebp]
	add	ecx, 220				; 000000dcH
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	mov	DWORD PTR _numErrors$[ebp], eax
; Line 276
	cmp	DWORD PTR _numErrors$[ebp], 0
	jne	SHORT $LN5@WarningsCh
; Line 278
	movzx	ecx, BYTE PTR _showHeaders$[ebp]
	test	ecx, ecx
	je	SHORT $LN4@WarningsCh
; Line 279
	mov	ecx, DWORD PTR _callback$[ebp]
	add	ecx, 244				; 000000f4H
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	test	eax, eax
	jne	SHORT $LN4@WarningsCh
; Line 280
	push	OFFSET ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl
	mov	edx, DWORD PTR _kEverythingIsOk
	push	edx
	mov	ecx, DWORD PTR _so$[ebp]
	call	??6CStdOutStream@@QAEAAV0@PBD@Z		; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<
$LN4@WarningsCh:
; Line 282
	jmp	$LN2@WarningsCh
$LN5@WarningsCh:
; Line 284
	push	OFFSET ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl
	mov	ecx, DWORD PTR _so$[ebp]
	call	??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<
; Line 285
	push	OFFSET ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl
	push	OFFSET ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl
	push	OFFSET $SG77245
	mov	ecx, DWORD PTR _so$[ebp]
	call	??6CStdOutStream@@QAEAAV0@PBD@Z		; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<
; Line 286
	mov	eax, DWORD PTR _so$[ebp]
	push	eax
	mov	ecx, DWORD PTR _callback$[ebp]
	add	ecx, 220				; 000000dcH
	push	ecx
	call	?PrintWarningsPaths@@YGXABUCErrorPathCodes@@AAVCStdOutStream@@@Z ; PrintWarningsPaths
; Line 287
	push	OFFSET $SG77247
	mov	edx, DWORD PTR _numErrors$[ebp]
	push	edx
	push	OFFSET $SG77246
	mov	ecx, DWORD PTR _so$[ebp]
	call	??6CStdOutStream@@QAEAAV0@PBD@Z		; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@I@Z		; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@PBD@Z		; CStdOutStream::operator<<
; Line 288
	cmp	DWORD PTR _numErrors$[ebp], 1
	jbe	SHORT $LN1@WarningsCh
; Line 289
	push	115					; 00000073H
	mov	ecx, DWORD PTR _so$[ebp]
	call	??6CStdOutStream@@QAEAAV0@D@Z		; CStdOutStream::operator<<
$LN1@WarningsCh:
; Line 290
	push	OFFSET ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl
	mov	ecx, DWORD PTR _so$[ebp]
	call	??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<
; Line 291
	mov	DWORD PTR _exitCode$[ebp], 1
$LN2@WarningsCh:
; Line 294
	mov	eax, DWORD PTR _exitCode$[ebp]
$LN15@WarningsCh:
; Line 295
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN22@WarningsCh
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 68					; 00000044H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$LN22@WarningsCh:
	DD	1
	DD	$LN21@WarningsCh
$LN21@WarningsCh:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN19@WarningsCh
$LN19@WarningsCh:
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	97					; 00000061H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?WarningsCheck@@YGHJABVCCallbackConsoleBase@@ABUCUpdateErrorInfo@@AAVCStdOutStream@@_N@Z$0:
	lea	ecx, DWORD PTR _message$77229[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?WarningsCheck@@YGHJABVCCallbackConsoleBase@@ABUCUpdateErrorInfo@@AAVCStdOutStream@@_N@Z$1:
	lea	ecx, DWORD PTR $T79812[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$?WarningsCheck@@YGHJABVCCallbackConsoleBase@@ABUCUpdateErrorInfo@@AAVCStdOutStream@@_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-64]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?WarningsCheck@@YGHJABVCCallbackConsoleBase@@ABUCUpdateErrorInfo@@AAVCStdOutStream@@_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?WarningsCheck@@YGHJABVCCallbackConsoleBase@@ABUCUpdateErrorInfo@@AAVCStdOutStream@@_N@Z ENDP ; WarningsCheck
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsEmpty@AString@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@AString@@QBE_NXZ PROC				; AString::IsEmpty, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 235
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+4], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@AString@@QBE_NXZ ENDP				; AString::IsEmpty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ThereIsError@CUpdateErrorInfo@@QBE_NXZ
_TEXT	SEGMENT
tv75 = -8						; size = 4
_this$ = -4						; size = 4
?ThereIsError@CUpdateErrorInfo@@QBE_NXZ PROC		; CUpdateErrorInfo::ThereIsError, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\update.h
; Line 155
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN3@ThereIsErr
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?IsEmpty@AString@@QBE_NXZ		; AString::IsEmpty
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@ThereIsErr
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?IsEmpty@?$CObjectVector@VUString@@@@QBE_NXZ ; CObjectVector<UString>::IsEmpty
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN3@ThereIsErr
	mov	DWORD PTR tv75[ebp], 0
	jmp	SHORT $LN4@ThereIsErr
$LN3@ThereIsErr:
	mov	DWORD PTR tv75[ebp], 1
$LN4@ThereIsErr:
	mov	al, BYTE PTR tv75[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ThereIsError@CUpdateErrorInfo@@QBE_NXZ ENDP		; CUpdateErrorInfo::ThereIsError
_TEXT	ENDS
PUBLIC	??A?$CRecordVector@K@@QBEABKI@Z			; CRecordVector<unsigned long>::operator[]
xdata$x	SEGMENT
__unwindtable$?PrintWarningsPaths@@YGXABUCErrorPathCodes@@AAVCStdOutStream@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PrintWarningsPaths@@YGXABUCErrorPathCodes@@AAVCStdOutStream@@@Z$0
__ehfuncinfo$?PrintWarningsPaths@@YGXABUCErrorPathCodes@@AAVCStdOutStream@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PrintWarningsPaths@@YGXABUCErrorPathCodes@@AAVCStdOutStream@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv132 = -36						; size = 4
tv133 = -32						; size = 4
$T79830 = -28						; size = 12
_i$77208 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pc$ = 8						; size = 4
_so$ = 12						; size = 4
?PrintWarningsPaths@@YGXABUCErrorPathCodes@@AAVCStdOutStream@@@Z PROC ; PrintWarningsPaths
; File c:\workspace\7z1505-src\cpp\7zip\ui\console\main.cpp
; Line 223
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?PrintWarningsPaths@@YGXABUCErrorPathCodes@@AAVCStdOutStream@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 224
	mov	DWORD PTR _i$77208[ebp], 0
	jmp	SHORT $LN3@PrintWarni
$LN2@PrintWarni:
	mov	eax, DWORD PTR _i$77208[ebp]
	add	eax, 1
	mov	DWORD PTR _i$77208[ebp], eax
$LN3@PrintWarni:
	mov	ecx, DWORD PTR _pc$[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	cmp	DWORD PTR _i$77208[ebp], eax
	jae	$LN1@PrintWarni
; Line 226
	push	OFFSET $SG77212
	mov	ecx, DWORD PTR _i$77208[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pc$[ebp]
	call	??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[]
	mov	ecx, eax
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	mov	ecx, DWORD PTR _so$[ebp]
	call	??6CStdOutStream@@QAEAAV0@PB_W@Z	; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@PBD@Z		; CStdOutStream::operator<<
; Line 227
	push	OFFSET ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl
	mov	edx, DWORD PTR _i$77208[ebp]
	push	edx
	mov	ecx, DWORD PTR _pc$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$CRecordVector@K@@QBEABKI@Z		; CRecordVector<unsigned long>::operator[]
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR $T79830[ebp]
	push	ecx
	call	?MyFormatMessage@NError@NWindows@@YG?AVUString@@K@Z ; NWindows::NError::MyFormatMessage
	mov	DWORD PTR tv133[ebp], eax
	mov	edx, DWORD PTR tv133[ebp]
	mov	DWORD PTR tv132[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR tv132[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	mov	ecx, DWORD PTR _so$[ebp]
	call	??6CStdOutStream@@QAEAAV0@PB_W@Z	; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T79830[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
; Line 228
	jmp	$LN2@PrintWarni
$LN1@PrintWarni:
; Line 229
	push	OFFSET ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl
	push	OFFSET $SG77214
	mov	ecx, DWORD PTR _so$[ebp]
	call	??6CStdOutStream@@QAEAAV0@PBD@Z		; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<
; Line 230
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?PrintWarningsPaths@@YGXABUCErrorPathCodes@@AAVCStdOutStream@@@Z$0:
	lea	ecx, DWORD PTR $T79830[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$?PrintWarningsPaths@@YGXABUCErrorPathCodes@@AAVCStdOutStream@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?PrintWarningsPaths@@YGXABUCErrorPathCodes@@AAVCStdOutStream@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?PrintWarningsPaths@@YGXABUCErrorPathCodes@@AAVCStdOutStream@@@Z ENDP ; PrintWarningsPaths
PUBLIC	__TI1?AUCSystemException@@
PUBLIC	??0CSystemException@@QAE@J@Z			; CSystemException::CSystemException
PUBLIC	__CTA1?AUCSystemException@@
PUBLIC	__CT??_R0?AUCSystemException@@@84
PUBLIC	??_R0?AUCSystemException@@@8			; CSystemException `RTTI Type Descriptor'
;	COMDAT ??_R0?AUCSystemException@@@8
_DATA	SEGMENT
??_R0?AUCSystemException@@@8 DD FLAT:??_7type_info@@6B@	; CSystemException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUCSystemException@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AUCSystemException@@@84
xdata$x	SEGMENT
__CT??_R0?AUCSystemException@@@84 DD 00H
	DD	FLAT:??_R0?AUCSystemException@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	00H
xdata$x	ENDS
;	COMDAT __CTA1?AUCSystemException@@
xdata$x	SEGMENT
__CTA1?AUCSystemException@@ DD 01H
	DD	FLAT:__CT??_R0?AUCSystemException@@@84
xdata$x	ENDS
;	COMDAT __TI1?AUCSystemException@@
xdata$x	SEGMENT
__TI1?AUCSystemException@@ DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA1?AUCSystemException@@
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T79838 = -8						; size = 4
$T79837 = -4						; size = 4
_res$ = 8						; size = 4
?ThrowException_if_Error@@YGXJ@Z PROC			; ThrowException_if_Error
; Line 298
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 299
	cmp	DWORD PTR _res$[ebp], 0
	je	SHORT $LN3@ThrowExcep
; Line 300
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T79838[ebp]
	call	??0CSystemException@@QAE@J@Z		; CSystemException::CSystemException
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T79837[ebp], ecx
	push	OFFSET __TI1?AUCSystemException@@
	lea	edx, DWORD PTR $T79837[ebp]
	push	edx
	call	__CxxThrowException@8
$LN3@ThrowExcep:
; Line 301
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ThrowException_if_Error@@YGXJ@Z ENDP			; ThrowException_if_Error
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CSystemException@@QAE@J@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_errorCode$ = 8						; size = 4
??0CSystemException@@QAE@J@Z PROC			; CSystemException::CSystemException, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myexception.h
; Line 11
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _errorCode$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0CSystemException@@QAE@J@Z ENDP			; CSystemException::CSystemException
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	__imp__LoadLibraryW@4:PROC
EXTRN	__imp__GetProcAddress@8:PROC
EXTRN	__imp__GetModuleHandleW@4:PROC
EXTRN	_memset:PROC
EXTRN	?GetCurUtcFileTime@NTime@NWindows@@YGXAAU_FILETIME@@@Z:PROC ; NWindows::NTime::GetCurUtcFileTime
EXTRN	__imp__GetProcessTimes@20:PROC
EXTRN	__imp__GetCurrentProcess@0:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_totalTime$ = -184					; size = 8
_userTime$ = -176					; size = 8
_kernelTime$ = -168					; size = 8
_creationTime$ = -160					; size = 8
_curTime$ = -152					; size = 8
_lib$77318 = -144					; size = 4
_my_GetProcessMemoryInfo$77313 = -140			; size = 4
_memDefined$ = -136					; size = 4
_m$ = -128						; size = 40
_curTimeFT$ = -80					; size = 8
_userTimeFT$ = -64					; size = 8
_kernelTimeFT$ = -48					; size = 8
_exitTimeFT$ = -32					; size = 8
_creationTimeFT$ = -16					; size = 8
__$ArrayPad$ = -4					; size = 4
?PrintStat@@YGXXZ PROC					; PrintStat
; File c:\workspace\7z1505-src\cpp\7zip\ui\console\main.cpp
; Line 360
	push	ebp
	mov	ebp, esp
	sub	esp, 184				; 000000b8H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-184]
	mov	ecx, 46					; 0000002eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 369
	mov	esi, esp
	lea	eax, DWORD PTR _userTimeFT$[ebp]
	push	eax
	lea	ecx, DWORD PTR _kernelTimeFT$[ebp]
	push	ecx
	lea	edx, DWORD PTR _exitTimeFT$[ebp]
	push	edx
	lea	eax, DWORD PTR _creationTimeFT$[ebp]
	push	eax
	mov	edi, esp
	call	DWORD PTR __imp__GetCurrentProcess@0
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	DWORD PTR __imp__GetProcessTimes@20
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN6@PrintStat
; Line 370
	jmp	$LN7@PrintStat
$LN6@PrintStat:
; Line 372
	lea	ecx, DWORD PTR _curTimeFT$[ebp]
	push	ecx
	call	?GetCurUtcFileTime@NTime@NWindows@@YGXAAU_FILETIME@@@Z ; NWindows::NTime::GetCurUtcFileTime
; Line 377
	push	40					; 00000028H
	push	0
	lea	edx, DWORD PTR _m$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 378
	mov	DWORD PTR _memDefined$[ebp], 0
; Line 390
	mov	esi, esp
	push	OFFSET $SG77315
	mov	edi, esp
	push	OFFSET $SG77316
	call	DWORD PTR __imp__GetModuleHandleW@4
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _my_GetProcessMemoryInfo$77313[ebp], eax
; Line 391
	cmp	DWORD PTR _my_GetProcessMemoryInfo$77313[ebp], 0
	jne	SHORT $LN5@PrintStat
; Line 393
	mov	esi, esp
	push	OFFSET $SG77319
	call	DWORD PTR __imp__LoadLibraryW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _lib$77318[ebp], eax
; Line 394
	cmp	DWORD PTR _lib$77318[ebp], 0
	je	SHORT $LN5@PrintStat
; Line 395
	mov	esi, esp
	push	OFFSET $SG77322
	mov	eax, DWORD PTR _lib$77318[ebp]
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _my_GetProcessMemoryInfo$77313[ebp], eax
$LN5@PrintStat:
; Line 397
	cmp	DWORD PTR _my_GetProcessMemoryInfo$77313[ebp], 0
	je	SHORT $LN3@PrintStat
; Line 398
	mov	esi, esp
	push	40					; 00000028H
	lea	ecx, DWORD PTR _m$[ebp]
	push	ecx
	mov	edi, esp
	call	DWORD PTR __imp__GetCurrentProcess@0
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	DWORD PTR _my_GetProcessMemoryInfo$77313[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _memDefined$[ebp], eax
$LN3@PrintStat:
; Line 404
	lea	edx, DWORD PTR _curTimeFT$[ebp]
	push	edx
	call	?GetTime64@@YG_KABU_FILETIME@@@Z	; GetTime64
	mov	DWORD PTR _curTime$[ebp], eax
	mov	DWORD PTR _curTime$[ebp+4], edx
; Line 405
	lea	eax, DWORD PTR _creationTimeFT$[ebp]
	push	eax
	call	?GetTime64@@YG_KABU_FILETIME@@@Z	; GetTime64
	mov	DWORD PTR _creationTime$[ebp], eax
	mov	DWORD PTR _creationTime$[ebp+4], edx
; Line 406
	lea	ecx, DWORD PTR _kernelTimeFT$[ebp]
	push	ecx
	call	?GetTime64@@YG_KABU_FILETIME@@@Z	; GetTime64
	mov	DWORD PTR _kernelTime$[ebp], eax
	mov	DWORD PTR _kernelTime$[ebp+4], edx
; Line 407
	lea	edx, DWORD PTR _userTimeFT$[ebp]
	push	edx
	call	?GetTime64@@YG_KABU_FILETIME@@@Z	; GetTime64
	mov	DWORD PTR _userTime$[ebp], eax
	mov	DWORD PTR _userTime$[ebp+4], edx
; Line 409
	mov	eax, DWORD PTR _curTime$[ebp]
	sub	eax, DWORD PTR _creationTime$[ebp]
	mov	ecx, DWORD PTR _curTime$[ebp+4]
	sbb	ecx, DWORD PTR _creationTime$[ebp+4]
	mov	DWORD PTR _totalTime$[ebp], eax
	mov	DWORD PTR _totalTime$[ebp+4], ecx
; Line 411
	mov	edx, DWORD PTR _totalTime$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _totalTime$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kernelTime$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _kernelTime$[ebp]
	push	edx
	push	OFFSET $SG77329
	call	?PrintTime@@YGXPBD_K1@Z			; PrintTime
; Line 412
	mov	eax, DWORD PTR _totalTime$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _totalTime$[ebp]
	push	ecx
	mov	edx, DWORD PTR _userTime$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _userTime$[ebp]
	push	eax
	push	OFFSET $SG77330
	call	?PrintTime@@YGXPBD_K1@Z			; PrintTime
; Line 414
	mov	ecx, DWORD PTR _totalTime$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _totalTime$[ebp]
	push	edx
	mov	eax, DWORD PTR _kernelTime$[ebp]
	add	eax, DWORD PTR _userTime$[ebp]
	mov	ecx, DWORD PTR _kernelTime$[ebp+4]
	adc	ecx, DWORD PTR _userTime$[ebp+4]
	push	ecx
	push	eax
	push	OFFSET $SG77331
	call	?PrintTime@@YGXPBD_K1@Z			; PrintTime
; Line 416
	cmp	DWORD PTR _memDefined$[ebp], 0
	je	SHORT $LN2@PrintStat
	mov	edx, DWORD PTR _m$[ebp+36]
	xor	eax, eax
	push	eax
	push	edx
	push	OFFSET $SG77333
	call	?PrintMemUsage@@YGXPBD_K@Z		; PrintMemUsage
$LN2@PrintStat:
; Line 419
	mov	ecx, DWORD PTR _totalTime$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _totalTime$[ebp]
	push	edx
	mov	eax, DWORD PTR _totalTime$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _totalTime$[ebp]
	push	ecx
	push	OFFSET $SG77334
	call	?PrintTime@@YGXPBD_K1@Z			; PrintTime
; Line 421
	cmp	DWORD PTR _memDefined$[ebp], 0
	je	SHORT $LN1@PrintStat
	mov	edx, DWORD PTR _m$[ebp+8]
	xor	eax, eax
	push	eax
	push	edx
	push	OFFSET $SG77336
	call	?PrintMemUsage@@YGXPBD_K@Z		; PrintMemUsage
$LN1@PrintStat:
; Line 424
	push	OFFSET ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl
	mov	ecx, DWORD PTR ?g_StdStream@@3PAVCStdOutStream@@A ; g_StdStream
	call	??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<
$LN7@PrintStat:
; Line 425
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@PrintStat
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 184				; 000000b8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN16@PrintStat:
	DD	6
	DD	$LN15@PrintStat
$LN15@PrintStat:
	DD	-16					; fffffff0H
	DD	8
	DD	$LN9@PrintStat
	DD	-32					; ffffffe0H
	DD	8
	DD	$LN10@PrintStat
	DD	-48					; ffffffd0H
	DD	8
	DD	$LN11@PrintStat
	DD	-64					; ffffffc0H
	DD	8
	DD	$LN12@PrintStat
	DD	-80					; ffffffb0H
	DD	8
	DD	$LN13@PrintStat
	DD	-128					; ffffff80H
	DD	40					; 00000028H
	DD	$LN14@PrintStat
$LN14@PrintStat:
	DB	109					; 0000006dH
	DB	0
$LN13@PrintStat:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	84					; 00000054H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	70					; 00000046H
	DB	84					; 00000054H
	DB	0
$LN12@PrintStat:
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	84					; 00000054H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	70					; 00000046H
	DB	84					; 00000054H
	DB	0
$LN11@PrintStat:
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	84					; 00000054H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	70					; 00000046H
	DB	84					; 00000054H
	DB	0
$LN10@PrintStat:
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	84					; 00000054H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	70					; 00000046H
	DB	84					; 00000054H
	DB	0
$LN9@PrintStat:
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	84					; 00000054H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	70					; 00000046H
	DB	84					; 00000054H
	DB	0
?PrintStat@@YGXXZ ENDP					; PrintStat
_TEXT	ENDS
EXTRN	__aullshr:PROC
EXTRN	__allmul:PROC
EXTRN	__aulldiv:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_percent$ = -24						; size = 8
_ms$ = -16						; size = 4
_sec$ = -12						; size = 8
_kFreq$ = -4						; size = 4
_s$ = 8							; size = 4
_val$ = 12						; size = 8
_total$ = 20						; size = 8
?PrintTime@@YGXPBD_K1@Z PROC				; PrintTime
; Line 316
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 317
	push	OFFSET $SG77276
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	push	OFFSET ?endl@@YGAAVCStdOutStream@@AAV1@@Z ; endl
	mov	ecx, DWORD PTR ?g_StdStream@@3PAVCStdOutStream@@A ; g_StdStream
	call	??6CStdOutStream@@QAEAAV0@P6GAAV0@AAV0@@Z@Z ; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@PBD@Z		; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@PBD@Z		; CStdOutStream::operator<<
; Line 318
	mov	DWORD PTR _kFreq$[ebp], 10000000	; 00989680H
; Line 319
	push	0
	push	10000000				; 00989680H
	mov	ecx, DWORD PTR _val$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _val$[ebp]
	push	edx
	call	__aulldiv
	mov	DWORD PTR _sec$[ebp], eax
	mov	DWORD PTR _sec$[ebp+4], edx
; Line 320
	push	32					; 00000020H
	push	6
	mov	eax, DWORD PTR _sec$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _sec$[ebp]
	push	ecx
	call	?PrintNum@@YGX_KID@Z			; PrintNum
; Line 321
	push	46					; 0000002eH
	mov	ecx, DWORD PTR ?g_StdStream@@3PAVCStdOutStream@@A ; g_StdStream
	call	??6CStdOutStream@@QAEAAV0@D@Z		; CStdOutStream::operator<<
; Line 322
	push	0
	push	10000000				; 00989680H
	mov	edx, DWORD PTR _sec$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _sec$[ebp]
	push	eax
	call	__allmul
	mov	ecx, DWORD PTR _val$[ebp]
	sub	ecx, eax
	mov	eax, DWORD PTR _val$[ebp+4]
	sbb	eax, edx
	mov	eax, ecx
	xor	edx, edx
	mov	ecx, 10000				; 00002710H
	div	ecx
	mov	DWORD PTR _ms$[ebp], eax
; Line 323
	push	48					; 00000030H
	push	3
	mov	edx, DWORD PTR _ms$[ebp]
	xor	eax, eax
	push	eax
	push	edx
	call	?PrintNum@@YGX_KID@Z			; PrintNum
$LN3@PrintTime:
; Line 325
	cmp	DWORD PTR _val$[ebp+4], 16777216	; 01000000H
	jb	SHORT $LN2@PrintTime
	ja	SHORT $LN6@PrintTime
	cmp	DWORD PTR _val$[ebp], 0
	jbe	SHORT $LN2@PrintTime
$LN6@PrintTime:
; Line 327
	mov	eax, DWORD PTR _val$[ebp]
	mov	edx, DWORD PTR _val$[ebp+4]
	mov	cl, 1
	call	__aullshr
	mov	DWORD PTR _val$[ebp], eax
	mov	DWORD PTR _val$[ebp+4], edx
; Line 328
	mov	eax, DWORD PTR _total$[ebp]
	mov	edx, DWORD PTR _total$[ebp+4]
	mov	cl, 1
	call	__aullshr
	mov	DWORD PTR _total$[ebp], eax
	mov	DWORD PTR _total$[ebp+4], edx
; Line 329
	jmp	SHORT $LN3@PrintTime
$LN2@PrintTime:
; Line 331
	mov	DWORD PTR _percent$[ebp], 0
	mov	DWORD PTR _percent$[ebp+4], 0
; Line 332
	mov	ecx, DWORD PTR _total$[ebp]
	or	ecx, DWORD PTR _total$[ebp+4]
	je	SHORT $LN1@PrintTime
; Line 333
	push	0
	push	100					; 00000064H
	mov	edx, DWORD PTR _val$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _val$[ebp]
	push	eax
	call	__allmul
	mov	ecx, DWORD PTR _total$[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR _total$[ebp]
	push	ecx
	push	edx
	push	eax
	call	__aulldiv
	mov	DWORD PTR _percent$[ebp], eax
	mov	DWORD PTR _percent$[ebp+4], edx
$LN1@PrintTime:
; Line 334
	push	OFFSET $SG77287
	mov	ecx, DWORD PTR ?g_StdStream@@3PAVCStdOutStream@@A ; g_StdStream
	call	??6CStdOutStream@@QAEAAV0@PBD@Z		; CStdOutStream::operator<<
; Line 335
	push	32					; 00000020H
	push	5
	mov	edx, DWORD PTR _percent$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _percent$[ebp]
	push	eax
	call	?PrintNum@@YGX_KID@Z			; PrintNum
; Line 336
	push	37					; 00000025H
	mov	ecx, DWORD PTR ?g_StdStream@@3PAVCStdOutStream@@A ; g_StdStream
	call	??6CStdOutStream@@QAEAAV0@D@Z		; CStdOutStream::operator<<
; Line 337
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?PrintTime@@YGXPBD_K1@Z ENDP				; PrintTime
_TEXT	ENDS
PUBLIC	?MyStringLen@@YGIPBD@Z				; MyStringLen
PUBLIC	__$ArrayPad$
EXTRN	?ConvertUInt64ToString@@YGX_KPAD@Z:PROC		; ConvertUInt64ToString
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_len$ = -84						; size = 4
_p$ = -80						; size = 4
_temp$ = -72						; size = 64
__$ArrayPad$ = -4					; size = 4
_val$ = 8						; size = 8
_numDigits$ = 16					; size = 4
_c$ = 20						; size = 1
?PrintNum@@YGX_KID@Z PROC				; PrintNum
; Line 305
	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	edi
	lea	edi, DWORD PTR [ebp-84]
	mov	ecx, 21					; 00000015H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 307
	lea	eax, DWORD PTR _temp$[ebp+32]
	mov	DWORD PTR _p$[ebp], eax
; Line 308
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _val$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _val$[ebp]
	push	eax
	call	?ConvertUInt64ToString@@YGX_KPAD@Z	; ConvertUInt64ToString
; Line 309
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	?MyStringLen@@YGIPBD@Z			; MyStringLen
	mov	DWORD PTR _len$[ebp], eax
; Line 310
	jmp	SHORT $LN3@PrintNum
$LN2@PrintNum:
	mov	edx, DWORD PTR _len$[ebp]
	add	edx, 1
	mov	DWORD PTR _len$[ebp], edx
$LN3@PrintNum:
	mov	eax, DWORD PTR _len$[ebp]
	cmp	eax, DWORD PTR _numDigits$[ebp]
	jae	SHORT $LN1@PrintNum
; Line 311
	mov	ecx, DWORD PTR _p$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	al, BYTE PTR _c$[ebp]
	mov	BYTE PTR [edx], al
	jmp	SHORT $LN2@PrintNum
$LN1@PrintNum:
; Line 312
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?g_StdStream@@3PAVCStdOutStream@@A ; g_StdStream
	call	??6CStdOutStream@@QAEAAV0@PBD@Z		; CStdOutStream::operator<<
; Line 313
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@PrintNum
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 84					; 00000054H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN8@PrintNum:
	DD	1
	DD	$LN7@PrintNum
$LN7@PrintNum:
	DD	-72					; ffffffb8H
	DD	64					; 00000040H
	DD	$LN6@PrintNum
$LN6@PrintNum:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
?PrintNum@@YGX_KID@Z ENDP				; PrintNum
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?MyStringLen@@YGIPBD@Z
_TEXT	SEGMENT
_i$ = -4						; size = 4
_s$ = 8							; size = 4
?MyStringLen@@YGIPBD@Z PROC				; MyStringLen, COMDAT
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 28
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@MyStringLe
$LN2@MyStringLe:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@MyStringLe:
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN1@MyStringLe
	jmp	SHORT $LN2@MyStringLe
$LN1@MyStringLe:
; Line 29
	mov	eax, DWORD PTR _i$[ebp]
; Line 30
	mov	esp, ebp
	pop	ebp
	ret	4
?MyStringLen@@YGIPBD@Z ENDP				; MyStringLen
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
_TEXT	SEGMENT
_s$ = 8							; size = 4
_val$ = 12						; size = 8
?PrintMemUsage@@YGXPBD_K@Z PROC				; PrintMemUsage
; File c:\workspace\7z1505-src\cpp\7zip\ui\console\main.cpp
; Line 344
	push	ebp
	mov	ebp, esp
; Line 345
	push	OFFSET $SG77293
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	push	OFFSET $SG77292
	mov	ecx, DWORD PTR ?g_StdStream@@3PAVCStdOutStream@@A ; g_StdStream
	call	??6CStdOutStream@@QAEAAV0@PBD@Z		; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@PBD@Z		; CStdOutStream::operator<<
	mov	ecx, eax
	call	??6CStdOutStream@@QAEAAV0@PBD@Z		; CStdOutStream::operator<<
; Line 346
	push	32					; 00000020H
	push	7
	mov	eax, DWORD PTR _val$[ebp]
	add	eax, 1048576				; 00100000H
	mov	edx, DWORD PTR _val$[ebp+4]
	adc	edx, 0
	sub	eax, 1
	sbb	edx, 0
	mov	cl, 20					; 00000014H
	call	__aullshr
	push	edx
	push	eax
	call	?PrintNum@@YGX_KID@Z			; PrintNum
; Line 347
	push	OFFSET $SG77294
	mov	ecx, DWORD PTR ?g_StdStream@@3PAVCStdOutStream@@A ; g_StdStream
	call	??6CStdOutStream@@QAEAAV0@PBD@Z		; CStdOutStream::operator<<
; Line 348
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?PrintMemUsage@@YGXPBD_K@Z ENDP				; PrintMemUsage
_TEXT	ENDS
EXTRN	__allshl:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_t$ = 8							; size = 4
?GetTime64@@YG_KABU_FILETIME@@@Z PROC			; GetTime64
; Line 357
	push	ebp
	mov	ebp, esp
	push	esi
	mov	eax, DWORD PTR _t$[ebp]
	mov	eax, DWORD PTR [eax+4]
	xor	edx, edx
	mov	cl, 32					; 00000020H
	call	__allshl
	mov	ecx, DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR [ecx]
	xor	esi, esi
	or	eax, ecx
	or	edx, esi
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
?GetTime64@@YG_KABU_FILETIME@@@Z ENDP			; GetTime64
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	?ConvertUInt64ToHex@@YGX_KPAD@Z:PROC		; ConvertUInt64ToHex
xdata$x	SEGMENT
__unwindtable$?PrintHexId@@YGXAAVCStdOutStream@@_K@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PrintHexId@@YGXAAVCStdOutStream@@_K@Z$0
__ehfuncinfo$?PrintHexId@@YGXAAVCStdOutStream@@_K@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PrintHexId@@YGXAAVCStdOutStream@@_K@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T79868 = -68						; size = 12
_s$ = -52						; size = 32
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_so$ = 8						; size = 4
_id$ = 12						; size = 8
?PrintHexId@@YGXAAVCStdOutStream@@_K@Z PROC		; PrintHexId
; Line 428
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?PrintHexId@@YGXAAVCStdOutStream@@_K@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 56					; 00000038H
	push	edi
	lea	edi, DWORD PTR [ebp-68]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 430
	lea	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _id$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	call	?ConvertUInt64ToHex@@YGX_KPAD@Z		; ConvertUInt64ToHex
; Line 431
	lea	eax, DWORD PTR _s$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T79868[ebp]
	call	??0AString@@QAE@PBD@Z			; AString::AString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	push	8
	lea	ecx, DWORD PTR $T79868[ebp]
	push	ecx
	mov	edx, DWORD PTR _so$[ebp]
	push	edx
	call	?PrintStringRight@@YGXAAVCStdOutStream@@ABVAString@@I@Z ; PrintStringRight
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T79868[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
; Line 432
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@PrintHexId
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 68					; 00000044H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	3
$LN7@PrintHexId:
	DD	1
	DD	$LN6@PrintHexId
$LN6@PrintHexId:
	DD	-52					; ffffffccH
	DD	32					; 00000020H
	DD	$LN4@PrintHexId
$LN4@PrintHexId:
	DB	115					; 00000073H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?PrintHexId@@YGXAAVCStdOutStream@@_K@Z$0:
	lea	ecx, DWORD PTR $T79868[ebp]
	jmp	??1AString@@QAE@XZ			; AString::~AString
__ehhandler$?PrintHexId@@YGXAAVCStdOutStream@@_K@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-64]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?PrintHexId@@YGXAAVCStdOutStream@@_K@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?PrintHexId@@YGXAAVCStdOutStream@@_K@Z ENDP		; PrintHexId
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CArcCmdLineOptions@@QAE@XZ DD 019930522H
	DD	0bH
	DD	FLAT:__unwindtable$??1CArcCmdLineOptions@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1CArcCmdLineOptions@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CArcCmdLineOptions@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CArcCmdLineOptions@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CArcCmdLineOptions@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CArcCmdLineOptions@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1CArcCmdLineOptions@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??1CArcCmdLineOptions@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??1CArcCmdLineOptions@@QAE@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??1CArcCmdLineOptions@@QAE@XZ$7
	DD	07H
	DD	FLAT:__unwindfunclet$??1CArcCmdLineOptions@@QAE@XZ$8
	DD	08H
	DD	FLAT:__unwindfunclet$??1CArcCmdLineOptions@@QAE@XZ$9
	DD	09H
	DD	FLAT:__unwindfunclet$??1CArcCmdLineOptions@@QAE@XZ$10
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CArcCmdLineOptions@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CArcCmdLineOptions@@QAE@XZ PROC			; CArcCmdLineOptions::~CArcCmdLineOptions, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CArcCmdLineOptions@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 10		; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 496				; 000001f0H
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 484				; 000001e4H
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 464				; 000001d0H
	call	??1CHashOptions@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 184				; 000000b8H
	call	??1CUpdateOptions@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 136				; 00000088H
	call	??1CExtractOptionsBase@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 124				; 0000007cH
	call	??1?$CObjectVector@UCProperty@@@@QAE@XZ	; CObjectVector<CProperty>::~CObjectVector<CProperty>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 88					; 00000058H
	call	??1CCensor@NWildcard@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1CCensor@NWildcard@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CArcCmdLineOptions@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1CCensor@NWildcard@@QAE@XZ
__unwindfunclet$??1CArcCmdLineOptions@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??1CArcCmdLineOptions@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??1CArcCmdLineOptions@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	jmp	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
__unwindfunclet$??1CArcCmdLineOptions@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 88					; 00000058H
	jmp	??1CCensor@NWildcard@@QAE@XZ
__unwindfunclet$??1CArcCmdLineOptions@@QAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??1CArcCmdLineOptions@@QAE@XZ$6:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 124				; 0000007cH
	jmp	??1?$CObjectVector@UCProperty@@@@QAE@XZ	; CObjectVector<CProperty>::~CObjectVector<CProperty>
__unwindfunclet$??1CArcCmdLineOptions@@QAE@XZ$7:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 136				; 00000088H
	jmp	??1CExtractOptionsBase@@QAE@XZ
__unwindfunclet$??1CArcCmdLineOptions@@QAE@XZ$8:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 184				; 000000b8H
	jmp	??1CUpdateOptions@@QAE@XZ
__unwindfunclet$??1CArcCmdLineOptions@@QAE@XZ$9:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 464				; 000001d0H
	jmp	??1CHashOptions@@QAE@XZ
__unwindfunclet$??1CArcCmdLineOptions@@QAE@XZ$10:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 484				; 000001e4H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$??1CArcCmdLineOptions@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CArcCmdLineOptions@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CArcCmdLineOptions@@QAE@XZ ENDP			; CArcCmdLineOptions::~CArcCmdLineOptions
EXTRN	??1CParser@NCommandLineParser@@QAE@XZ:PROC	; NCommandLineParser::CParser::~CParser
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CArcCmdLineParser@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CArcCmdLineParser@@QAE@XZ PROC			; CArcCmdLineParser::~CArcCmdLineParser, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CParser@NCommandLineParser@@QAE@XZ	; NCommandLineParser::CParser::~CParser
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CArcCmdLineParser@@QAE@XZ ENDP			; CArcCmdLineParser::~CArcCmdLineParser
_TEXT	ENDS
PUBLIC	??_7CExtractScanConsole@@6B@			; CExtractScanConsole::`vftable'
PUBLIC	??_R4CExtractScanConsole@@6B@			; CExtractScanConsole::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCExtractScanConsole@@@8			; CExtractScanConsole `RTTI Type Descriptor'
PUBLIC	??_R3CExtractScanConsole@@8			; CExtractScanConsole::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CExtractScanConsole@@8			; CExtractScanConsole::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CExtractScanConsole@@8		; CExtractScanConsole::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	?ScanError@CExtractScanConsole@@UAEJABVUString@@K@Z:PROC ; CExtractScanConsole::ScanError
EXTRN	?ScanProgress@CExtractScanConsole@@UAEJABUCDirItemsStat@@ABVUString@@_N@Z:PROC ; CExtractScanConsole::ScanProgress
;	COMDAT ??_R1A@?0A@EA@CExtractScanConsole@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CExtractScanConsole@@8 DD FLAT:??_R0?AVCExtractScanConsole@@@8 ; CExtractScanConsole::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CExtractScanConsole@@8
rdata$r	ENDS
;	COMDAT ??_R2CExtractScanConsole@@8
rdata$r	SEGMENT
??_R2CExtractScanConsole@@8 DD FLAT:??_R1A@?0A@EA@CExtractScanConsole@@8 ; CExtractScanConsole::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IDirItemsCallback@@8
rdata$r	ENDS
;	COMDAT ??_R3CExtractScanConsole@@8
rdata$r	SEGMENT
??_R3CExtractScanConsole@@8 DD 00H			; CExtractScanConsole::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CExtractScanConsole@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCExtractScanConsole@@@8
_DATA	SEGMENT
??_R0?AVCExtractScanConsole@@@8 DD FLAT:??_7type_info@@6B@ ; CExtractScanConsole `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCExtractScanConsole@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CExtractScanConsole@@6B@
rdata$r	SEGMENT
??_R4CExtractScanConsole@@6B@ DD 00H			; CExtractScanConsole::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCExtractScanConsole@@@8
	DD	FLAT:??_R3CExtractScanConsole@@8
rdata$r	ENDS
;	COMDAT ??_7CExtractScanConsole@@6B@
CONST	SEGMENT
??_7CExtractScanConsole@@6B@ DD FLAT:??_R4CExtractScanConsole@@6B@ ; CExtractScanConsole::`vftable'
	DD	FLAT:?ScanError@CExtractScanConsole@@UAEJABVUString@@K@Z
	DD	FLAT:?ScanProgress@CExtractScanConsole@@UAEJABUCDirItemsStat@@ABVUString@@_N@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CExtractScanConsole@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CExtractScanConsole@@QAE@XZ PROC			; CExtractScanConsole::CExtractScanConsole, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IDirItemsCallback@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CExtractScanConsole@@6B@
	push	200					; 000000c8H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0CPercentPrinter@@QAE@I@Z		; CPercentPrinter::CPercentPrinter
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CExtractScanConsole@@QAE@XZ ENDP			; CExtractScanConsole::CExtractScanConsole
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CExtractScanConsole@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CExtractScanConsole@@QAE@XZ PROC			; CExtractScanConsole::~CExtractScanConsole, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??1CPercentPrinter@@QAE@XZ		; CPercentPrinter::~CPercentPrinter
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CExtractScanConsole@@QAE@XZ ENDP			; CExtractScanConsole::~CExtractScanConsole
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CExtractOptions@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CExtractOptions@@QAE@XZ$0
__ehfuncinfo$??1CExtractOptions@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CExtractOptions@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CExtractOptions@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CExtractOptions@@QAE@XZ PROC				; CExtractOptions::~CExtractOptions, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CExtractOptions@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??1?$CObjectVector@UCProperty@@@@QAE@XZ	; CObjectVector<CProperty>::~CObjectVector<CProperty>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CExtractOptionsBase@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CExtractOptions@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CExtractOptionsBase@@QAE@XZ
__ehhandler$??1CExtractOptions@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CExtractOptions@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CExtractOptions@@QAE@XZ ENDP				; CExtractOptions::~CExtractOptions
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4CExtractOptionsBase@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4CExtractOptionsBase@@QAEAAU0@ABU0@@Z PROC		; CExtractOptionsBase::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cx, WORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx], cx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+2]
	mov	BYTE PTR [eax+2], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+3]
	mov	BYTE PTR [eax+3], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 24					; 00000018H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	cx, WORD PTR [ecx+8]
	mov	WORD PTR [edx+8], cx
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4CExtractOptionsBase@@QAEAAU0@ABU0@@Z ENDP		; CExtractOptionsBase::operator=
_TEXT	ENDS
PUBLIC	??0?$CObjectVector@UCHasherState@@@@QAE@XZ	; CObjectVector<CHasherState>::CObjectVector<CHasherState>
PUBLIC	??_7CHashBundle@@6B@				; CHashBundle::`vftable'
PUBLIC	??0IHashCalc@@QAE@XZ				; IHashCalc::IHashCalc
PUBLIC	??_R4CHashBundle@@6B@				; CHashBundle::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUCHashBundle@@@8				; CHashBundle `RTTI Type Descriptor'
PUBLIC	??_R3CHashBundle@@8				; CHashBundle::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CHashBundle@@8				; CHashBundle::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CHashBundle@@8			; CHashBundle::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@IHashCalc@@8			; IHashCalc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIHashCalc@@@8				; IHashCalc `RTTI Type Descriptor'
PUBLIC	??_R3IHashCalc@@8				; IHashCalc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IHashCalc@@8				; IHashCalc::`RTTI Base Class Array'
EXTRN	?InitForNewFile@CHashBundle@@UAEXXZ:PROC	; CHashBundle::InitForNewFile
EXTRN	?Update@CHashBundle@@UAEXPBXI@Z:PROC		; CHashBundle::Update
EXTRN	?SetSize@CHashBundle@@UAEX_K@Z:PROC		; CHashBundle::SetSize
EXTRN	?Final@CHashBundle@@UAEX_N0ABVUString@@@Z:PROC	; CHashBundle::Final
;	COMDAT ??_R2IHashCalc@@8
rdata$r	SEGMENT
??_R2IHashCalc@@8 DD FLAT:??_R1A@?0A@EA@IHashCalc@@8	; IHashCalc::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3IHashCalc@@8
rdata$r	SEGMENT
??_R3IHashCalc@@8 DD 00H				; IHashCalc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2IHashCalc@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIHashCalc@@@8
_DATA	SEGMENT
??_R0?AUIHashCalc@@@8 DD FLAT:??_7type_info@@6B@	; IHashCalc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIHashCalc@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IHashCalc@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IHashCalc@@8 DD FLAT:??_R0?AUIHashCalc@@@8 ; IHashCalc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IHashCalc@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CHashBundle@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CHashBundle@@8 DD FLAT:??_R0?AUCHashBundle@@@8 ; CHashBundle::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CHashBundle@@8
rdata$r	ENDS
;	COMDAT ??_R2CHashBundle@@8
rdata$r	SEGMENT
??_R2CHashBundle@@8 DD FLAT:??_R1A@?0A@EA@CHashBundle@@8 ; CHashBundle::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IHashCalc@@8
rdata$r	ENDS
;	COMDAT ??_R3CHashBundle@@8
rdata$r	SEGMENT
??_R3CHashBundle@@8 DD 00H				; CHashBundle::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CHashBundle@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUCHashBundle@@@8
_DATA	SEGMENT
??_R0?AUCHashBundle@@@8 DD FLAT:??_7type_info@@6B@	; CHashBundle `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUCHashBundle@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CHashBundle@@6B@
rdata$r	SEGMENT
??_R4CHashBundle@@6B@ DD 00H				; CHashBundle::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUCHashBundle@@@8
	DD	FLAT:??_R3CHashBundle@@8
rdata$r	ENDS
;	COMDAT ??_7CHashBundle@@6B@
CONST	SEGMENT
??_7CHashBundle@@6B@ DD FLAT:??_R4CHashBundle@@6B@	; CHashBundle::`vftable'
	DD	FLAT:?InitForNewFile@CHashBundle@@UAEXXZ
	DD	FLAT:?Update@CHashBundle@@UAEXPBXI@Z
	DD	FLAT:?SetSize@CHashBundle@@UAEX_K@Z
	DD	FLAT:?Final@CHashBundle@@UAEX_N0ABVUString@@@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CHashBundle@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CHashBundle@@QAE@XZ PROC				; CHashBundle::CHashBundle, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IHashCalc@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CHashBundle@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$CObjectVector@UCHasherState@@@@QAE@XZ ; CObjectVector<CHasherState>::CObjectVector<CHasherState>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CHashBundle@@QAE@XZ ENDP				; CHashBundle::CHashBundle
_TEXT	ENDS
PUBLIC	??1?$CObjectVector@UCHasherState@@@@QAE@XZ	; CObjectVector<CHasherState>::~CObjectVector<CHasherState>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CHashBundle@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CHashBundle@@QAE@XZ PROC				; CHashBundle::~CHashBundle, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1?$CObjectVector@UCHasherState@@@@QAE@XZ ; CObjectVector<CHasherState>::~CObjectVector<CHasherState>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CHashBundle@@QAE@XZ ENDP				; CHashBundle::~CHashBundle
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CUpdateCallbackConsole@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CUpdateCallbackConsole@@QAE@XZ$0
__ehfuncinfo$??1CUpdateCallbackConsole@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CUpdateCallbackConsole@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CUpdateCallbackConsole@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CUpdateCallbackConsole@@QAE@XZ PROC			; CUpdateCallbackConsole::~CUpdateCallbackConsole, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CUpdateCallbackConsole@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 284				; 0000011cH
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1CCallbackConsoleBase@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CUpdateCallbackConsole@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1CCallbackConsoleBase@@QAE@XZ
__ehhandler$??1CUpdateCallbackConsole@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CUpdateCallbackConsole@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CUpdateCallbackConsole@@QAE@XZ ENDP			; CUpdateCallbackConsole::~CUpdateCallbackConsole
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CUpdateErrorInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CUpdateErrorInfo@@QAE@XZ$0
__ehfuncinfo$??1CUpdateErrorInfo@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CUpdateErrorInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CUpdateErrorInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CUpdateErrorInfo@@QAE@XZ PROC			; CUpdateErrorInfo::~CUpdateErrorInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CUpdateErrorInfo@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CUpdateErrorInfo@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1AString@@QAE@XZ			; AString::~AString
__ehhandler$??1CUpdateErrorInfo@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CUpdateErrorInfo@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CUpdateErrorInfo@@QAE@XZ ENDP			; CUpdateErrorInfo::~CUpdateErrorInfo
PUBLIC	??_7IHashCalc@@6B@				; IHashCalc::`vftable'
PUBLIC	??_R4IHashCalc@@6B@				; IHashCalc::`RTTI Complete Object Locator'
;	COMDAT ??_R4IHashCalc@@6B@
rdata$r	SEGMENT
??_R4IHashCalc@@6B@ DD 00H				; IHashCalc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIHashCalc@@@8
	DD	FLAT:??_R3IHashCalc@@8
rdata$r	ENDS
;	COMDAT ??_7IHashCalc@@6B@
CONST	SEGMENT
??_7IHashCalc@@6B@ DD FLAT:??_R4IHashCalc@@6B@		; IHashCalc::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0IHashCalc@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IHashCalc@@QAE@XZ PROC				; IHashCalc::IHashCalc, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7IHashCalc@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0IHashCalc@@QAE@XZ ENDP				; IHashCalc::IHashCalc
_TEXT	ENDS
PUBLIC	?Size@?$CRecordVector@PAX@@QBEIXZ		; CRecordVector<void *>::Size
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Size@?$CObjectVector@VUString@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@VUString@@@@QBEIXZ PROC		; CObjectVector<UString>::Size, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@VUString@@@@QBEIXZ ENDP		; CObjectVector<UString>::Size
_TEXT	ENDS
PUBLIC	?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ		; CRecordVector<void *>::IsEmpty
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsEmpty@?$CObjectVector@VUString@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@?$CObjectVector@VUString@@@@QBE_NXZ PROC	; CObjectVector<UString>::IsEmpty, COMDAT
; _this$ = ecx
; Line 416
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ	; CRecordVector<void *>::IsEmpty
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@?$CObjectVector@VUString@@@@QBE_NXZ ENDP	; CObjectVector<UString>::IsEmpty
_TEXT	ENDS
PUBLIC	??0?$CRecordVector@PAX@@QAE@XZ			; CRecordVector<void *>::CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CObjectVector@VUString@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@VUString@@@@QAE@XZ PROC		; CObjectVector<UString>::CObjectVector<UString>, COMDAT
; _this$ = ecx
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@VUString@@@@QAE@XZ ENDP		; CObjectVector<UString>::CObjectVector<UString>
_TEXT	ENDS
PUBLIC	??A?$CRecordVector@PAX@@QBEABQAXI@Z		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z PROC	; CObjectVector<UString>::operator[], COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ENDP	; CObjectVector<UString>::operator[]
_TEXT	ENDS
PUBLIC	??A?$CRecordVector@PAX@@QAEAAPAXI@Z		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z PROC	; CObjectVector<UString>::operator[], COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ENDP	; CObjectVector<UString>::operator[]
_TEXT	ENDS
PUBLIC	?Add@?$CRecordVector@PAX@@QAEIQAX@Z		; CRecordVector<void *>::Add
EXTRN	??0UString@@QAE@ABV0@@Z:PROC			; UString::UString
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z$0
__ehfuncinfo$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
_TEXT	SEGMENT
tv74 = -28						; size = 4
$T79959 = -24						; size = 4
$T79958 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_item$ = 8						; size = 4
?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z PROC ; CObjectVector<UString>::Add, COMDAT
; _this$ = ecx
; Line 459
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T79959[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T79959[ebp], 0
	je	SHORT $LN3@Add
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T79959[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@Add
$LN3@Add:
	mov	DWORD PTR tv74[ebp], 0
$LN4@Add:
	mov	ecx, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T79958[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T79958[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z$0:
	mov	eax, DWORD PTR $T79959[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z ENDP ; CObjectVector<UString>::Add
PUBLIC	??1?$CRecordVector@PAX@@QAE@XZ			; CRecordVector<void *>::~CRecordVector<void *>
PUBLIC	??_GUString@@QAEPAXI@Z				; UString::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@VUString@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@VUString@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@VUString@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@VUString@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@VUString@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T79972 = -28						; size = 4
$T79971 = -24						; size = 4
_i$77724 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@VUString@@@@QAE@XZ PROC		; CObjectVector<UString>::~CObjectVector<UString>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@VUString@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$77724[ebp], eax
$LN2@CObjectVec:
	cmp	DWORD PTR _i$77724[ebp], 0
	je	SHORT $LN3@CObjectVec
; Line 489
	mov	eax, DWORD PTR _i$77724[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$77724[ebp], eax
	mov	ecx, DWORD PTR _i$77724[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T79972[ebp], edx
	mov	eax, DWORD PTR $T79972[ebp]
	mov	DWORD PTR $T79971[ebp], eax
	cmp	DWORD PTR $T79971[ebp], 0
	je	SHORT $LN5@CObjectVec
	push	1
	mov	ecx, DWORD PTR $T79971[ebp]
	call	??_GUString@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec
$LN5@CObjectVec:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec:
	jmp	SHORT $LN2@CObjectVec
$LN3@CObjectVec:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@VUString@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@VUString@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@VUString@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@VUString@@@@QAE@XZ ENDP		; CObjectVector<UString>::~CObjectVector<UString>
PUBLIC	?Clear@?$CRecordVector@PAX@@QAEXXZ		; CRecordVector<void *>::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Clear@?$CObjectVector@VUString@@@@QAEXXZ
_TEXT	SEGMENT
tv75 = -20						; size = 4
$T79985 = -16						; size = 4
$T79984 = -12						; size = 4
_i$77733 = -8						; size = 4
_this$ = -4						; size = 4
?Clear@?$CObjectVector@VUString@@@@QAEXXZ PROC		; CObjectVector<UString>::Clear, COMDAT
; _this$ = ecx
; Line 499
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 500
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$77733[ebp], eax
$LN2@Clear:
	cmp	DWORD PTR _i$77733[ebp], 0
	je	SHORT $LN1@Clear
; Line 501
	mov	eax, DWORD PTR _i$77733[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$77733[ebp], eax
	mov	ecx, DWORD PTR _i$77733[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T79985[ebp], edx
	mov	eax, DWORD PTR $T79985[ebp]
	mov	DWORD PTR $T79984[ebp], eax
	cmp	DWORD PTR $T79984[ebp], 0
	je	SHORT $LN5@Clear
	push	1
	mov	ecx, DWORD PTR $T79984[ebp]
	call	??_GUString@@QAEPAXI@Z
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN6@Clear
$LN5@Clear:
	mov	DWORD PTR tv75[ebp], 0
$LN6@Clear:
	jmp	SHORT $LN2@Clear
$LN1@Clear:
; Line 502
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CRecordVector@PAX@@QAEXXZ	; CRecordVector<void *>::Clear
; Line 503
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CObjectVector@VUString@@@@QAEXXZ ENDP		; CObjectVector<UString>::Clear
_TEXT	ENDS
PUBLIC	?Delete@?$CRecordVector@PAX@@QAEXI@Z		; CRecordVector<void *>::Delete
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Delete@?$CObjectVector@VUString@@@@QAEXI@Z
_TEXT	SEGMENT
tv71 = -16						; size = 4
$T79991 = -12						; size = 4
$T79990 = -8						; size = 4
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?Delete@?$CObjectVector@VUString@@@@QAEXI@Z PROC	; CObjectVector<UString>::Delete, COMDAT
; _this$ = ecx
; Line 527
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 528
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T79991[ebp], ecx
	mov	edx, DWORD PTR $T79991[ebp]
	mov	DWORD PTR $T79990[ebp], edx
	cmp	DWORD PTR $T79990[ebp], 0
	je	SHORT $LN3@Delete
	push	1
	mov	ecx, DWORD PTR $T79990[ebp]
	call	??_GUString@@QAEPAXI@Z
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN4@Delete
$LN3@Delete:
	mov	DWORD PTR tv71[ebp], 0
$LN4@Delete:
; Line 529
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Delete@?$CRecordVector@PAX@@QAEXI@Z	; CRecordVector<void *>::Delete
; Line 530
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Delete@?$CObjectVector@VUString@@@@QAEXI@Z ENDP	; CObjectVector<UString>::Delete
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CObjectVector@UCPair@NWildcard@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@UCPair@NWildcard@@@@QAE@XZ PROC	; CObjectVector<NWildcard::CPair>::CObjectVector<NWildcard::CPair>, COMDAT
; _this$ = ecx
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@UCPair@NWildcard@@@@QAE@XZ ENDP	; CObjectVector<NWildcard::CPair>::CObjectVector<NWildcard::CPair>
_TEXT	ENDS
PUBLIC	??A?$CObjectVector@UCPair@NWildcard@@@@QAEAAUCPair@NWildcard@@I@Z ; CObjectVector<NWildcard::CPair>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Front@?$CObjectVector@UCPair@NWildcard@@@@QAEAAUCPair@NWildcard@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Front@?$CObjectVector@UCPair@NWildcard@@@@QAEAAUCPair@NWildcard@@XZ PROC ; CObjectVector<NWildcard::CPair>::Front, COMDAT
; _this$ = ecx
; Line 453
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CObjectVector@UCPair@NWildcard@@@@QAEAAUCPair@NWildcard@@I@Z ; CObjectVector<NWildcard::CPair>::operator[]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Front@?$CObjectVector@UCPair@NWildcard@@@@QAEAAUCPair@NWildcard@@XZ ENDP ; CObjectVector<NWildcard::CPair>::Front
_TEXT	ENDS
PUBLIC	??_GCPair@NWildcard@@QAEPAXI@Z			; NWildcard::CPair::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@UCPair@NWildcard@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@UCPair@NWildcard@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@UCPair@NWildcard@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@UCPair@NWildcard@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@UCPair@NWildcard@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T80002 = -28						; size = 4
$T80001 = -24						; size = 4
_i$77777 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@UCPair@NWildcard@@@@QAE@XZ PROC	; CObjectVector<NWildcard::CPair>::~CObjectVector<NWildcard::CPair>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@UCPair@NWildcard@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$77777[ebp], eax
$LN2@CObjectVec@2:
	cmp	DWORD PTR _i$77777[ebp], 0
	je	SHORT $LN3@CObjectVec@2
; Line 489
	mov	eax, DWORD PTR _i$77777[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$77777[ebp], eax
	mov	ecx, DWORD PTR _i$77777[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T80002[ebp], edx
	mov	eax, DWORD PTR $T80002[ebp]
	mov	DWORD PTR $T80001[ebp], eax
	cmp	DWORD PTR $T80001[ebp], 0
	je	SHORT $LN5@CObjectVec@2
	push	1
	mov	ecx, DWORD PTR $T80001[ebp]
	call	??_GCPair@NWildcard@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@2
$LN5@CObjectVec@2:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@2:
	jmp	SHORT $LN2@CObjectVec@2
$LN3@CObjectVec@2:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@UCPair@NWildcard@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@UCPair@NWildcard@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@UCPair@NWildcard@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@UCPair@NWildcard@@@@QAE@XZ ENDP	; CObjectVector<NWildcard::CPair>::~CObjectVector<NWildcard::CPair>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CObjectVector@UCCensorPath@NWildcard@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@UCCensorPath@NWildcard@@@@QAE@XZ PROC ; CObjectVector<NWildcard::CCensorPath>::CObjectVector<NWildcard::CCensorPath>, COMDAT
; _this$ = ecx
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@UCCensorPath@NWildcard@@@@QAE@XZ ENDP ; CObjectVector<NWildcard::CCensorPath>::CObjectVector<NWildcard::CCensorPath>
_TEXT	ENDS
PUBLIC	??_GCCensorPath@NWildcard@@QAEPAXI@Z		; NWildcard::CCensorPath::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@UCCensorPath@NWildcard@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@UCCensorPath@NWildcard@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@UCCensorPath@NWildcard@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@UCCensorPath@NWildcard@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@UCCensorPath@NWildcard@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T80018 = -28						; size = 4
$T80017 = -24						; size = 4
_i$77788 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@UCCensorPath@NWildcard@@@@QAE@XZ PROC ; CObjectVector<NWildcard::CCensorPath>::~CObjectVector<NWildcard::CCensorPath>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@UCCensorPath@NWildcard@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$77788[ebp], eax
$LN2@CObjectVec@3:
	cmp	DWORD PTR _i$77788[ebp], 0
	je	SHORT $LN3@CObjectVec@3
; Line 489
	mov	eax, DWORD PTR _i$77788[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$77788[ebp], eax
	mov	ecx, DWORD PTR _i$77788[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T80018[ebp], edx
	mov	eax, DWORD PTR $T80018[ebp]
	mov	DWORD PTR $T80017[ebp], eax
	cmp	DWORD PTR $T80017[ebp], 0
	je	SHORT $LN5@CObjectVec@3
	push	1
	mov	ecx, DWORD PTR $T80017[ebp]
	call	??_GCCensorPath@NWildcard@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@3
$LN5@CObjectVec@3:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@3:
	jmp	SHORT $LN2@CObjectVec@3
$LN3@CObjectVec@3:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@UCCensorPath@NWildcard@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@UCCensorPath@NWildcard@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@UCCensorPath@NWildcard@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@UCCensorPath@NWildcard@@@@QAE@XZ ENDP ; CObjectVector<NWildcard::CCensorPath>::~CObjectVector<NWildcard::CCensorPath>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Size@?$CObjectVector@UCArcExtInfo@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@UCArcExtInfo@@@@QBEIXZ PROC	; CObjectVector<CArcExtInfo>::Size, COMDAT
; _this$ = ecx
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@UCArcExtInfo@@@@QBEIXZ ENDP	; CObjectVector<CArcExtInfo>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@UCArcExtInfo@@@@QBEABUCArcExtInfo@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCArcExtInfo@@@@QBEABUCArcExtInfo@@I@Z PROC ; CObjectVector<CArcExtInfo>::operator[], COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCArcExtInfo@@@@QBEABUCArcExtInfo@@I@Z ENDP ; CObjectVector<CArcExtInfo>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CObjectVector@V?$CBuffer@E@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@V?$CBuffer@E@@@@QBEIXZ PROC	; CObjectVector<CBuffer<unsigned char> >::Size, COMDAT
; _this$ = ecx
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@V?$CBuffer@E@@@@QBEIXZ ENDP	; CObjectVector<CBuffer<unsigned char> >::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@V?$CBuffer@E@@@@QBEABV?$CBuffer@E@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@V?$CBuffer@E@@@@QBEABV?$CBuffer@E@@I@Z PROC ; CObjectVector<CBuffer<unsigned char> >::operator[], COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@V?$CBuffer@E@@@@QBEABV?$CBuffer@E@@I@Z ENDP ; CObjectVector<CBuffer<unsigned char> >::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CObjectVector@UCArcInfoEx@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@UCArcInfoEx@@@@QBEIXZ PROC	; CObjectVector<CArcInfoEx>::Size, COMDAT
; _this$ = ecx
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@UCArcInfoEx@@@@QBEIXZ ENDP	; CObjectVector<CArcInfoEx>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CObjectVector@UCArcInfoEx@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@UCArcInfoEx@@@@QAE@XZ PROC		; CObjectVector<CArcInfoEx>::CObjectVector<CArcInfoEx>, COMDAT
; _this$ = ecx
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@UCArcInfoEx@@@@QAE@XZ ENDP		; CObjectVector<CArcInfoEx>::CObjectVector<CArcInfoEx>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@UCArcInfoEx@@@@QAEAAUCArcInfoEx@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCArcInfoEx@@@@QAEAAUCArcInfoEx@@I@Z PROC ; CObjectVector<CArcInfoEx>::operator[], COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCArcInfoEx@@@@QAEAAUCArcInfoEx@@I@Z ENDP ; CObjectVector<CArcInfoEx>::operator[]
_TEXT	ENDS
PUBLIC	??_GCArcInfoEx@@QAEPAXI@Z			; CArcInfoEx::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@UCArcInfoEx@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@UCArcInfoEx@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@UCArcInfoEx@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@UCArcInfoEx@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@UCArcInfoEx@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T80046 = -28						; size = 4
$T80045 = -24						; size = 4
_i$77847 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@UCArcInfoEx@@@@QAE@XZ PROC		; CObjectVector<CArcInfoEx>::~CObjectVector<CArcInfoEx>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@UCArcInfoEx@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$77847[ebp], eax
$LN2@CObjectVec@4:
	cmp	DWORD PTR _i$77847[ebp], 0
	je	SHORT $LN3@CObjectVec@4
; Line 489
	mov	eax, DWORD PTR _i$77847[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$77847[ebp], eax
	mov	ecx, DWORD PTR _i$77847[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T80046[ebp], edx
	mov	eax, DWORD PTR $T80046[ebp]
	mov	DWORD PTR $T80045[ebp], eax
	cmp	DWORD PTR $T80045[ebp], 0
	je	SHORT $LN5@CObjectVec@4
	push	1
	mov	ecx, DWORD PTR $T80045[ebp]
	call	??_GCArcInfoEx@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@4
$LN5@CObjectVec@4:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@4:
	jmp	SHORT $LN2@CObjectVec@4
$LN3@CObjectVec@4:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@UCArcInfoEx@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@UCArcInfoEx@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@UCArcInfoEx@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@UCArcInfoEx@@@@QAE@XZ ENDP		; CObjectVector<CArcInfoEx>::~CObjectVector<CArcInfoEx>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CRecordVector@_K@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@_K@@QAE@XZ PROC			; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>, COMDAT
; _this$ = ecx
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@_K@@QAE@XZ ENDP			; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@_K@@QAE@XZ
_TEXT	SEGMENT
$T80060 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@_K@@QAE@XZ PROC			; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T80060[ebp], ecx
	mov	edx, DWORD PTR $T80060[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@_K@@QAE@XZ ENDP			; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CBuffer@E@@QBEPBEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CBuffer@E@@QBEPBEXZ PROC				; CBuffer<unsigned char>::operator unsigned char const *, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mybuffer.h
; Line 40
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CBuffer@E@@QBEPBEXZ ENDP				; CBuffer<unsigned char>::operator unsigned char const *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CBuffer@E@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CBuffer@E@@QBEIXZ PROC				; CBuffer<unsigned char>::Size, COMDAT
; _this$ = ecx
; Line 41
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CBuffer@E@@QBEIXZ ENDP				; CBuffer<unsigned char>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@H@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@H@@QAE@XZ PROC			; CRecordVector<int>::CRecordVector<int>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@H@@QAE@XZ ENDP			; CRecordVector<int>::CRecordVector<int>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@H@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@H@@QBEIXZ PROC			; CRecordVector<int>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@H@@QBEIXZ ENDP			; CRecordVector<int>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@H@@QAE@XZ
_TEXT	SEGMENT
$T80071 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@H@@QAE@XZ PROC			; CRecordVector<int>::~CRecordVector<int>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T80071[ebp], ecx
	mov	edx, DWORD PTR $T80071[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@H@@QAE@XZ ENDP			; CRecordVector<int>::~CRecordVector<int>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@H@@QAEAAHI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@H@@QAEAAHI@Z PROC			; CRecordVector<int>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@H@@QAEAAHI@Z ENDP			; CRecordVector<int>::operator[]
_TEXT	ENDS
PUBLIC	?Insert@?$CRecordVector@H@@QAEXIH@Z		; CRecordVector<int>::Insert
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?AddToUniqueSorted@?$CRecordVector@H@@QAEIH@Z
_TEXT	SEGMENT
_midVal$77982 = -20					; size = 4
_mid$77981 = -16					; size = 4
_right$ = -12						; size = 4
_left$ = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?AddToUniqueSorted@?$CRecordVector@H@@QAEIH@Z PROC	; CRecordVector<int>::AddToUniqueSorted, COMDAT
; _this$ = ecx
; Line 287
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 288
	mov	DWORD PTR _left$[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _right$[ebp], ecx
$LN5@AddToUniqu:
; Line 289
	mov	edx, DWORD PTR _left$[ebp]
	cmp	edx, DWORD PTR _right$[ebp]
	je	SHORT $LN4@AddToUniqu
; Line 291
	mov	eax, DWORD PTR _left$[ebp]
	add	eax, DWORD PTR _right$[ebp]
	shr	eax, 1
	mov	DWORD PTR _mid$77981[ebp], eax
; Line 292
	mov	ecx, DWORD PTR _mid$77981[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@H@@QAEAAHI@Z		; CRecordVector<int>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _midVal$77982[ebp], edx
; Line 293
	mov	eax, DWORD PTR _item$[ebp]
	cmp	eax, DWORD PTR _midVal$77982[ebp]
	jne	SHORT $LN3@AddToUniqu
; Line 294
	mov	eax, DWORD PTR _mid$77981[ebp]
	jmp	SHORT $LN6@AddToUniqu
$LN3@AddToUniqu:
; Line 295
	mov	ecx, DWORD PTR _item$[ebp]
	cmp	ecx, DWORD PTR _midVal$77982[ebp]
	jge	SHORT $LN2@AddToUniqu
; Line 296
	mov	edx, DWORD PTR _mid$77981[ebp]
	mov	DWORD PTR _right$[ebp], edx
; Line 297
	jmp	SHORT $LN1@AddToUniqu
$LN2@AddToUniqu:
; Line 298
	mov	eax, DWORD PTR _mid$77981[ebp]
	add	eax, 1
	mov	DWORD PTR _left$[ebp], eax
$LN1@AddToUniqu:
; Line 299
	jmp	SHORT $LN5@AddToUniqu
$LN4@AddToUniqu:
; Line 300
	mov	ecx, DWORD PTR _item$[ebp]
	push	ecx
	mov	edx, DWORD PTR _right$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Insert@?$CRecordVector@H@@QAEXIH@Z	; CRecordVector<int>::Insert
; Line 301
	mov	eax, DWORD PTR _right$[ebp]
$LN6@AddToUniqu:
; Line 302
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?AddToUniqueSorted@?$CRecordVector@H@@QAEIH@Z ENDP	; CRecordVector<int>::AddToUniqueSorted
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CObjectVector@UCHasherState@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@UCHasherState@@@@QAE@XZ PROC		; CObjectVector<CHasherState>::CObjectVector<CHasherState>, COMDAT
; _this$ = ecx
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@UCHasherState@@@@QAE@XZ ENDP		; CObjectVector<CHasherState>::CObjectVector<CHasherState>
_TEXT	ENDS
PUBLIC	??_GCHasherState@@QAEPAXI@Z			; CHasherState::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@UCHasherState@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@UCHasherState@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@UCHasherState@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@UCHasherState@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@UCHasherState@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T80082 = -28						; size = 4
$T80081 = -24						; size = 4
_i$77993 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@UCHasherState@@@@QAE@XZ PROC		; CObjectVector<CHasherState>::~CObjectVector<CHasherState>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@UCHasherState@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$77993[ebp], eax
$LN2@CObjectVec@5:
	cmp	DWORD PTR _i$77993[ebp], 0
	je	SHORT $LN3@CObjectVec@5
; Line 489
	mov	eax, DWORD PTR _i$77993[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$77993[ebp], eax
	mov	ecx, DWORD PTR _i$77993[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T80082[ebp], edx
	mov	eax, DWORD PTR $T80082[ebp]
	mov	DWORD PTR $T80081[ebp], eax
	cmp	DWORD PTR $T80081[ebp], 0
	je	SHORT $LN5@CObjectVec@5
	push	1
	mov	ecx, DWORD PTR $T80081[ebp]
	call	??_GCHasherState@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@5
$LN5@CObjectVec@5:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@5:
	jmp	SHORT $LN2@CObjectVec@5
$LN3@CObjectVec@5:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@UCHasherState@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@UCHasherState@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@UCHasherState@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@UCHasherState@@@@QAE@XZ ENDP		; CObjectVector<CHasherState>::~CObjectVector<CHasherState>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QAE@PAUIFolderArchiveExtractCallback@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??0?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QAE@PAUIFolderArchiveExtractCallback@@@Z PROC ; CMyComPtr<IFolderArchiveExtractCallback>::CMyComPtr<IFolderArchiveExtractCallback>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@CMyComPtr
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QAE@PAUIFolderArchiveExtractCallback@@@Z ENDP ; CMyComPtr<IFolderArchiveExtractCallback>::CMyComPtr<IFolderArchiveExtractCallback>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QAE@XZ PROC ; CMyComPtr<IFolderArchiveExtractCallback>::~CMyComPtr<IFolderArchiveExtractCallback>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@2:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QAE@XZ ENDP ; CMyComPtr<IFolderArchiveExtractCallback>::~CMyComPtr<IFolderArchiveExtractCallback>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CObjectVector@UCProperty@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@UCProperty@@@@QAE@XZ PROC		; CObjectVector<CProperty>::CObjectVector<CProperty>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@UCProperty@@@@QAE@XZ ENDP		; CObjectVector<CProperty>::CObjectVector<CProperty>
_TEXT	ENDS
PUBLIC	?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z	; CRecordVector<void *>::AddInReserved
PUBLIC	??0CProperty@@QAE@ABU0@@Z			; CProperty::CProperty
PUBLIC	??A?$CObjectVector@UCProperty@@@@QBEABUCProperty@@I@Z ; CObjectVector<CProperty>::operator[]
PUBLIC	?Reserve@?$CRecordVector@PAX@@QAEXI@Z		; CRecordVector<void *>::Reserve
PUBLIC	?Size@?$CObjectVector@UCProperty@@@@QBEIXZ	; CObjectVector<CProperty>::Size
PUBLIC	?Clear@?$CObjectVector@UCProperty@@@@QAEXXZ	; CObjectVector<CProperty>::Clear
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??4?$CObjectVector@UCProperty@@@@QAEAAV0@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??4?$CObjectVector@UCProperty@@@@QAEAAV0@ABV0@@Z$0
__ehfuncinfo$??4?$CObjectVector@UCProperty@@@@QAEAAV0@ABV0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??4?$CObjectVector@UCProperty@@@@QAEAAV0@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??4?$CObjectVector@UCProperty@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
tv84 = -36						; size = 4
$T80102 = -32						; size = 4
$T80101 = -28						; size = 4
_i$78055 = -24						; size = 4
_size$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_v$ = 8							; size = 4
??4?$CObjectVector@UCProperty@@@@QAEAAV0@ABV0@@Z PROC	; CObjectVector<CProperty>::operator=, COMDAT
; _this$ = ecx
; Line 430
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??4?$CObjectVector@UCProperty@@@@QAEAAV0@ABV0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 431
	mov	eax, DWORD PTR _v$[ebp]
	cmp	eax, DWORD PTR _this$[ebp]
	jne	SHORT $LN4@operator@2
; Line 432
	mov	eax, DWORD PTR _this$[ebp]
	jmp	$LN5@operator@2
$LN4@operator@2:
; Line 433
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CObjectVector@UCProperty@@@@QAEXXZ ; CObjectVector<CProperty>::Clear
; Line 434
	mov	ecx, DWORD PTR _v$[ebp]
	call	?Size@?$CObjectVector@UCProperty@@@@QBEIXZ ; CObjectVector<CProperty>::Size
	mov	DWORD PTR _size$[ebp], eax
; Line 435
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reserve@?$CRecordVector@PAX@@QAEXI@Z	; CRecordVector<void *>::Reserve
; Line 436
	mov	DWORD PTR _i$78055[ebp], 0
	jmp	SHORT $LN3@operator@2
$LN2@operator@2:
	mov	edx, DWORD PTR _i$78055[ebp]
	add	edx, 1
	mov	DWORD PTR _i$78055[ebp], edx
$LN3@operator@2:
	mov	eax, DWORD PTR _i$78055[ebp]
	cmp	eax, DWORD PTR _size$[ebp]
	jae	SHORT $LN1@operator@2
; Line 437
	push	24					; 00000018H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T80102[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T80102[ebp], 0
	je	SHORT $LN7@operator@2
	mov	ecx, DWORD PTR _i$78055[ebp]
	push	ecx
	mov	ecx, DWORD PTR _v$[ebp]
	call	??A?$CObjectVector@UCProperty@@@@QBEABUCProperty@@I@Z ; CObjectVector<CProperty>::operator[]
	push	eax
	mov	ecx, DWORD PTR $T80102[ebp]
	call	??0CProperty@@QAE@ABU0@@Z
	mov	DWORD PTR tv84[ebp], eax
	jmp	SHORT $LN8@operator@2
$LN7@operator@2:
	mov	DWORD PTR tv84[ebp], 0
$LN8@operator@2:
	mov	edx, DWORD PTR tv84[ebp]
	mov	DWORD PTR $T80101[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T80101[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ; CRecordVector<void *>::AddInReserved
	jmp	SHORT $LN2@operator@2
$LN1@operator@2:
; Line 438
	mov	eax, DWORD PTR _this$[ebp]
$LN5@operator@2:
; Line 439
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??4?$CObjectVector@UCProperty@@@@QAEAAV0@ABV0@@Z$0:
	mov	eax, DWORD PTR $T80102[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??4?$CObjectVector@UCProperty@@@@QAEAAV0@ABV0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??4?$CObjectVector@UCProperty@@@@QAEAAV0@ABV0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??4?$CObjectVector@UCProperty@@@@QAEAAV0@ABV0@@Z ENDP	; CObjectVector<CProperty>::operator=
PUBLIC	??_GCProperty@@QAEPAXI@Z			; CProperty::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@UCProperty@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@UCProperty@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@UCProperty@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@UCProperty@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@UCProperty@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T80115 = -28						; size = 4
$T80114 = -24						; size = 4
_i$78065 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@UCProperty@@@@QAE@XZ PROC		; CObjectVector<CProperty>::~CObjectVector<CProperty>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@UCProperty@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$78065[ebp], eax
$LN2@CObjectVec@6:
	cmp	DWORD PTR _i$78065[ebp], 0
	je	SHORT $LN3@CObjectVec@6
; Line 489
	mov	eax, DWORD PTR _i$78065[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$78065[ebp], eax
	mov	ecx, DWORD PTR _i$78065[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T80115[ebp], edx
	mov	eax, DWORD PTR $T80115[ebp]
	mov	DWORD PTR $T80114[ebp], eax
	cmp	DWORD PTR $T80114[ebp], 0
	je	SHORT $LN5@CObjectVec@6
	push	1
	mov	ecx, DWORD PTR $T80114[ebp]
	call	??_GCProperty@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@6
$LN5@CObjectVec@6:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@6:
	jmp	SHORT $LN2@CObjectVec@6
$LN3@CObjectVec@6:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@UCProperty@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@UCProperty@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@UCProperty@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@UCProperty@@@@QAE@XZ ENDP		; CObjectVector<CProperty>::~CObjectVector<CProperty>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CObjectVector@UCUpdateArchiveCommand@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@UCUpdateArchiveCommand@@@@QAE@XZ PROC ; CObjectVector<CUpdateArchiveCommand>::CObjectVector<CUpdateArchiveCommand>, COMDAT
; _this$ = ecx
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@UCUpdateArchiveCommand@@@@QAE@XZ ENDP ; CObjectVector<CUpdateArchiveCommand>::CObjectVector<CUpdateArchiveCommand>
_TEXT	ENDS
PUBLIC	??_GCUpdateArchiveCommand@@QAEPAXI@Z		; CUpdateArchiveCommand::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@UCUpdateArchiveCommand@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@UCUpdateArchiveCommand@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@UCUpdateArchiveCommand@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@UCUpdateArchiveCommand@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@UCUpdateArchiveCommand@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T80131 = -28						; size = 4
$T80130 = -24						; size = 4
_i$78088 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@UCUpdateArchiveCommand@@@@QAE@XZ PROC ; CObjectVector<CUpdateArchiveCommand>::~CObjectVector<CUpdateArchiveCommand>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@UCUpdateArchiveCommand@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$78088[ebp], eax
$LN2@CObjectVec@7:
	cmp	DWORD PTR _i$78088[ebp], 0
	je	SHORT $LN3@CObjectVec@7
; Line 489
	mov	eax, DWORD PTR _i$78088[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$78088[ebp], eax
	mov	ecx, DWORD PTR _i$78088[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T80131[ebp], edx
	mov	eax, DWORD PTR $T80131[ebp]
	mov	DWORD PTR $T80130[ebp], eax
	cmp	DWORD PTR $T80130[ebp], 0
	je	SHORT $LN5@CObjectVec@7
	push	1
	mov	ecx, DWORD PTR $T80130[ebp]
	call	??_GCUpdateArchiveCommand@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@7
$LN5@CObjectVec@7:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@7:
	jmp	SHORT $LN2@CObjectVec@7
$LN3@CObjectVec@7:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@UCUpdateArchiveCommand@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@UCUpdateArchiveCommand@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@UCUpdateArchiveCommand@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@UCUpdateArchiveCommand@@@@QAE@XZ ENDP ; CObjectVector<CUpdateArchiveCommand>::~CObjectVector<CUpdateArchiveCommand>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CObjectVector@UCRenamePair@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@UCRenamePair@@@@QAE@XZ PROC		; CObjectVector<CRenamePair>::CObjectVector<CRenamePair>, COMDAT
; _this$ = ecx
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@UCRenamePair@@@@QAE@XZ ENDP		; CObjectVector<CRenamePair>::CObjectVector<CRenamePair>
_TEXT	ENDS
PUBLIC	??_GCRenamePair@@QAEPAXI@Z			; CRenamePair::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@UCRenamePair@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@UCRenamePair@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@UCRenamePair@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@UCRenamePair@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@UCRenamePair@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T80147 = -28						; size = 4
$T80146 = -24						; size = 4
_i$78108 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@UCRenamePair@@@@QAE@XZ PROC		; CObjectVector<CRenamePair>::~CObjectVector<CRenamePair>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@UCRenamePair@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$78108[ebp], eax
$LN2@CObjectVec@8:
	cmp	DWORD PTR _i$78108[ebp], 0
	je	SHORT $LN3@CObjectVec@8
; Line 489
	mov	eax, DWORD PTR _i$78108[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$78108[ebp], eax
	mov	ecx, DWORD PTR _i$78108[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T80147[ebp], edx
	mov	eax, DWORD PTR $T80147[ebp]
	mov	DWORD PTR $T80146[ebp], eax
	cmp	DWORD PTR $T80146[ebp], 0
	je	SHORT $LN5@CObjectVec@8
	push	1
	mov	ecx, DWORD PTR $T80146[ebp]
	call	??_GCRenamePair@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@8
$LN5@CObjectVec@8:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@8:
	jmp	SHORT $LN2@CObjectVec@8
$LN3@CObjectVec@8:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@UCRenamePair@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@UCRenamePair@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@UCRenamePair@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@UCRenamePair@@@@QAE@XZ ENDP		; CObjectVector<CRenamePair>::~CObjectVector<CRenamePair>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CRecordVector@K@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@K@@QAE@XZ PROC			; CRecordVector<unsigned long>::CRecordVector<unsigned long>, COMDAT
; _this$ = ecx
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@K@@QAE@XZ ENDP			; CRecordVector<unsigned long>::CRecordVector<unsigned long>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@K@@QAE@XZ
_TEXT	SEGMENT
$T80161 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@K@@QAE@XZ PROC			; CRecordVector<unsigned long>::~CRecordVector<unsigned long>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T80161[ebp], ecx
	mov	edx, DWORD PTR $T80161[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@K@@QAE@XZ ENDP			; CRecordVector<unsigned long>::~CRecordVector<unsigned long>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Clear@?$CRecordVector@K@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$CRecordVector@K@@QAEXXZ PROC			; CRecordVector<unsigned long>::Clear, COMDAT
; _this$ = ecx
; Line 131
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CRecordVector@K@@QAEXXZ ENDP			; CRecordVector<unsigned long>::Clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@K@@QBEABKI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@K@@QBEABKI@Z PROC			; CRecordVector<unsigned long>::operator[], COMDAT
; _this$ = ecx
; Line 227
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@K@@QBEABKI@Z ENDP			; CRecordVector<unsigned long>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIUnknown@@@@QAE@PAUIUnknown@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??0?$CMyComPtr@UIUnknown@@@@QAE@PAUIUnknown@@@Z PROC	; CMyComPtr<IUnknown>::CMyComPtr<IUnknown>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@CMyComPtr@3
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@3:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UIUnknown@@@@QAE@PAUIUnknown@@@Z ENDP	; CMyComPtr<IUnknown>::CMyComPtr<IUnknown>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIUnknown@@@@QAE@XZ PROC			; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@4:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIUnknown@@@@QAE@XZ ENDP			; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CObjectVector@UCOpenType@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@UCOpenType@@@@QAE@XZ PROC		; CObjectVector<COpenType>::CObjectVector<COpenType>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@UCOpenType@@@@QAE@XZ ENDP		; CObjectVector<COpenType>::CObjectVector<COpenType>
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@UCOpenType@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@UCOpenType@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@UCOpenType@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@UCOpenType@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@UCOpenType@@@@QAE@XZ
_TEXT	SEGMENT
$T80175 = -24						; size = 4
_i$78136 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@UCOpenType@@@@QAE@XZ PROC		; CObjectVector<COpenType>::~CObjectVector<COpenType>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@UCOpenType@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-24], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$78136[ebp], eax
$LN2@CObjectVec@9:
	cmp	DWORD PTR _i$78136[ebp], 0
	je	SHORT $LN3@CObjectVec@9
; Line 489
	mov	eax, DWORD PTR _i$78136[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$78136[ebp], eax
	mov	ecx, DWORD PTR _i$78136[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T80175[ebp], edx
	mov	eax, DWORD PTR $T80175[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	jmp	SHORT $LN2@CObjectVec@9
$LN3@CObjectVec@9:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@UCOpenType@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@UCOpenType@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@UCOpenType@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@UCOpenType@@@@QAE@XZ ENDP		; CObjectVector<COpenType>::~CObjectVector<COpenType>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GUString@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GUString@@QAEPAXI@Z PROC				; UString::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@3
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GUString@@QAEPAXI@Z ENDP				; UString::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1CPair@NWildcard@@QAE@XZ			; NWildcard::CPair::~CPair
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCPair@NWildcard@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCPair@NWildcard@@QAEPAXI@Z PROC			; NWildcard::CPair::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CPair@NWildcard@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@4:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCPair@NWildcard@@QAEPAXI@Z ENDP			; NWildcard::CPair::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1CCensorPath@NWildcard@@QAE@XZ		; NWildcard::CCensorPath::~CCensorPath
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCCensorPath@NWildcard@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCCensorPath@NWildcard@@QAEPAXI@Z PROC		; NWildcard::CCensorPath::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CCensorPath@NWildcard@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@5
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@5:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCCensorPath@NWildcard@@QAEPAXI@Z ENDP		; NWildcard::CCensorPath::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1CArcInfoEx@@QAE@XZ				; CArcInfoEx::~CArcInfoEx
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCArcInfoEx@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCArcInfoEx@@QAEPAXI@Z PROC				; CArcInfoEx::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CArcInfoEx@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@6
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@6:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCArcInfoEx@@QAEPAXI@Z ENDP				; CArcInfoEx::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1CHasherState@@QAE@XZ				; CHasherState::~CHasherState
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCHasherState@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCHasherState@@QAEPAXI@Z PROC			; CHasherState::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CHasherState@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@7
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@7:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCHasherState@@QAEPAXI@Z ENDP			; CHasherState::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CProperty@@QAE@ABU0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CProperty@@QAE@ABU0@@Z$0
__ehfuncinfo$??0CProperty@@QAE@ABU0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CProperty@@QAE@ABU0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CProperty@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0CProperty@@QAE@ABU0@@Z PROC				; CProperty::CProperty, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CProperty@@QAE@ABU0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CProperty@@QAE@ABU0@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$??0CProperty@@QAE@ABU0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CProperty@@QAE@ABU0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CProperty@@QAE@ABU0@@Z ENDP				; CProperty::CProperty
PUBLIC	??1CProperty@@QAE@XZ				; CProperty::~CProperty
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCProperty@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCProperty@@QAEPAXI@Z PROC				; CProperty::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CProperty@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@8
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@8:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCProperty@@QAEPAXI@Z ENDP				; CProperty::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1CUpdateArchiveCommand@@QAE@XZ		; CUpdateArchiveCommand::~CUpdateArchiveCommand
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCUpdateArchiveCommand@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCUpdateArchiveCommand@@QAEPAXI@Z PROC		; CUpdateArchiveCommand::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CUpdateArchiveCommand@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@9
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@9:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCUpdateArchiveCommand@@QAEPAXI@Z ENDP		; CUpdateArchiveCommand::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CUpdateArchiveCommand@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CUpdateArchiveCommand@@QAE@XZ$0
__ehfuncinfo$??1CUpdateArchiveCommand@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CUpdateArchiveCommand@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CUpdateArchiveCommand@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CUpdateArchiveCommand@@QAE@XZ PROC			; CUpdateArchiveCommand::~CUpdateArchiveCommand, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CUpdateArchiveCommand@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1CArchivePath@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CUpdateArchiveCommand@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$??1CUpdateArchiveCommand@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CUpdateArchiveCommand@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CUpdateArchiveCommand@@QAE@XZ ENDP			; CUpdateArchiveCommand::~CUpdateArchiveCommand
PUBLIC	??1CRenamePair@@QAE@XZ				; CRenamePair::~CRenamePair
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCRenamePair@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCRenamePair@@QAEPAXI@Z PROC				; CRenamePair::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CRenamePair@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@10
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@10:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCRenamePair@@QAEPAXI@Z ENDP				; CRenamePair::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1CCensorNode@NWildcard@@QAE@XZ		; NWildcard::CCensorNode::~CCensorNode
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CPair@NWildcard@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CPair@NWildcard@@QAE@XZ$0
__ehfuncinfo$??1CPair@NWildcard@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CPair@NWildcard@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CPair@NWildcard@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CPair@NWildcard@@QAE@XZ PROC				; NWildcard::CPair::~CPair, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CPair@NWildcard@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1CCensorNode@NWildcard@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CPair@NWildcard@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$??1CPair@NWildcard@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CPair@NWildcard@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CPair@NWildcard@@QAE@XZ ENDP				; NWildcard::CPair::~CPair
PUBLIC	??1?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ ; CObjectVector<NWildcard::CCensorNode>::~CObjectVector<NWildcard::CCensorNode>
PUBLIC	??1?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ	; CObjectVector<NWildcard::CItem>::~CObjectVector<NWildcard::CItem>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CCensorNode@NWildcard@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CCensorNode@NWildcard@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CCensorNode@NWildcard@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CCensorNode@NWildcard@@QAE@XZ$2
__ehfuncinfo$??1CCensorNode@NWildcard@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1CCensorNode@NWildcard@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CCensorNode@NWildcard@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CCensorNode@NWildcard@@QAE@XZ PROC			; NWildcard::CCensorNode::~CCensorNode, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CCensorNode@NWildcard@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??1?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ ; CObjectVector<NWildcard::CItem>::~CObjectVector<NWildcard::CItem>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??1?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ ; CObjectVector<NWildcard::CItem>::~CObjectVector<NWildcard::CItem>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??1?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ ; CObjectVector<NWildcard::CCensorNode>::~CObjectVector<NWildcard::CCensorNode>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CCensorNode@NWildcard@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??1CCensorNode@NWildcard@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	jmp	??1?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ ; CObjectVector<NWildcard::CCensorNode>::~CObjectVector<NWildcard::CCensorNode>
__unwindfunclet$??1CCensorNode@NWildcard@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	jmp	??1?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ ; CObjectVector<NWildcard::CItem>::~CObjectVector<NWildcard::CItem>
__ehhandler$??1CCensorNode@NWildcard@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CCensorNode@NWildcard@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CCensorNode@NWildcard@@QAE@XZ ENDP			; NWildcard::CCensorNode::~CCensorNode
PUBLIC	??_GCCensorNode@NWildcard@@QAEPAXI@Z		; NWildcard::CCensorNode::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T80244 = -28						; size = 4
$T80243 = -24						; size = 4
_i$77749 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ PROC ; CObjectVector<NWildcard::CCensorNode>::~CObjectVector<NWildcard::CCensorNode>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$77749[ebp], eax
$LN2@CObjectVec@10:
	cmp	DWORD PTR _i$77749[ebp], 0
	je	SHORT $LN3@CObjectVec@10
; Line 489
	mov	eax, DWORD PTR _i$77749[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$77749[ebp], eax
	mov	ecx, DWORD PTR _i$77749[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T80244[ebp], edx
	mov	eax, DWORD PTR $T80244[ebp]
	mov	DWORD PTR $T80243[ebp], eax
	cmp	DWORD PTR $T80243[ebp], 0
	je	SHORT $LN5@CObjectVec@10
	push	1
	mov	ecx, DWORD PTR $T80243[ebp]
	call	??_GCCensorNode@NWildcard@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@10
$LN5@CObjectVec@10:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@10:
	jmp	SHORT $LN2@CObjectVec@10
$LN3@CObjectVec@10:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ ENDP ; CObjectVector<NWildcard::CCensorNode>::~CObjectVector<NWildcard::CCensorNode>
PUBLIC	??_GCItem@NWildcard@@QAEPAXI@Z			; NWildcard::CItem::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T80257 = -28						; size = 4
$T80256 = -24						; size = 4
_i$77760 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ PROC	; CObjectVector<NWildcard::CItem>::~CObjectVector<NWildcard::CItem>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$77760[ebp], eax
$LN2@CObjectVec@11:
	cmp	DWORD PTR _i$77760[ebp], 0
	je	SHORT $LN3@CObjectVec@11
; Line 489
	mov	eax, DWORD PTR _i$77760[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$77760[ebp], eax
	mov	ecx, DWORD PTR _i$77760[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T80257[ebp], edx
	mov	eax, DWORD PTR $T80257[ebp]
	mov	DWORD PTR $T80256[ebp], eax
	cmp	DWORD PTR $T80256[ebp], 0
	je	SHORT $LN5@CObjectVec@11
	push	1
	mov	ecx, DWORD PTR $T80256[ebp]
	call	??_GCItem@NWildcard@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@11
$LN5@CObjectVec@11:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@11:
	jmp	SHORT $LN2@CObjectVec@11
$LN3@CObjectVec@11:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ ENDP	; CObjectVector<NWildcard::CItem>::~CObjectVector<NWildcard::CItem>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCCensorNode@NWildcard@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCCensorNode@NWildcard@@QAEPAXI@Z PROC		; NWildcard::CCensorNode::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CCensorNode@NWildcard@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@11
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@11:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCCensorNode@NWildcard@@QAEPAXI@Z ENDP		; NWildcard::CCensorNode::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1CItem@NWildcard@@QAE@XZ			; NWildcard::CItem::~CItem
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCItem@NWildcard@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCItem@NWildcard@@QAEPAXI@Z PROC			; NWildcard::CItem::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CItem@NWildcard@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@12
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@12:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCItem@NWildcard@@QAEPAXI@Z ENDP			; NWildcard::CItem::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CItem@NWildcard@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CItem@NWildcard@@QAE@XZ PROC				; NWildcard::CItem::~CItem, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CItem@NWildcard@@QAE@XZ ENDP				; NWildcard::CItem::~CItem
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CCensorPath@NWildcard@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CCensorPath@NWildcard@@QAE@XZ PROC			; NWildcard::CCensorPath::~CCensorPath, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CCensorPath@NWildcard@@QAE@XZ ENDP			; NWildcard::CCensorPath::~CCensorPath
_TEXT	ENDS
PUBLIC	??1?$CObjectVector@UCArcExtInfo@@@@QAE@XZ	; CObjectVector<CArcExtInfo>::~CObjectVector<CArcExtInfo>
PUBLIC	??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ	; CObjectVector<CBuffer<unsigned char> >::~CObjectVector<CBuffer<unsigned char> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CArcInfoEx@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CArcInfoEx@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CArcInfoEx@@QAE@XZ$1
__ehfuncinfo$??1CArcInfoEx@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CArcInfoEx@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CArcInfoEx@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CArcInfoEx@@QAE@XZ PROC				; CArcInfoEx::~CArcInfoEx, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CArcInfoEx@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ ; CObjectVector<CBuffer<unsigned char> >::~CObjectVector<CBuffer<unsigned char> >
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1?$CObjectVector@UCArcExtInfo@@@@QAE@XZ ; CObjectVector<CArcExtInfo>::~CObjectVector<CArcExtInfo>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CArcInfoEx@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??1CArcInfoEx@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1?$CObjectVector@UCArcExtInfo@@@@QAE@XZ ; CObjectVector<CArcExtInfo>::~CObjectVector<CArcExtInfo>
__ehhandler$??1CArcInfoEx@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CArcInfoEx@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CArcInfoEx@@QAE@XZ ENDP				; CArcInfoEx::~CArcInfoEx
PUBLIC	??_GCArcExtInfo@@QAEPAXI@Z			; CArcExtInfo::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@UCArcExtInfo@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@UCArcExtInfo@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@UCArcExtInfo@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@UCArcExtInfo@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@UCArcExtInfo@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T80291 = -28						; size = 4
$T80290 = -24						; size = 4
_i$77812 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@UCArcExtInfo@@@@QAE@XZ PROC		; CObjectVector<CArcExtInfo>::~CObjectVector<CArcExtInfo>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@UCArcExtInfo@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$77812[ebp], eax
$LN2@CObjectVec@12:
	cmp	DWORD PTR _i$77812[ebp], 0
	je	SHORT $LN3@CObjectVec@12
; Line 489
	mov	eax, DWORD PTR _i$77812[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$77812[ebp], eax
	mov	ecx, DWORD PTR _i$77812[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T80291[ebp], edx
	mov	eax, DWORD PTR $T80291[ebp]
	mov	DWORD PTR $T80290[ebp], eax
	cmp	DWORD PTR $T80290[ebp], 0
	je	SHORT $LN5@CObjectVec@12
	push	1
	mov	ecx, DWORD PTR $T80290[ebp]
	call	??_GCArcExtInfo@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@12
$LN5@CObjectVec@12:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@12:
	jmp	SHORT $LN2@CObjectVec@12
$LN3@CObjectVec@12:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@UCArcExtInfo@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@UCArcExtInfo@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@UCArcExtInfo@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@UCArcExtInfo@@@@QAE@XZ ENDP		; CObjectVector<CArcExtInfo>::~CObjectVector<CArcExtInfo>
PUBLIC	??_G?$CBuffer@E@@QAEPAXI@Z			; CBuffer<unsigned char>::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T80304 = -28						; size = 4
$T80303 = -24						; size = 4
_i$77828 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ PROC		; CObjectVector<CBuffer<unsigned char> >::~CObjectVector<CBuffer<unsigned char> >, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$77828[ebp], eax
$LN2@CObjectVec@13:
	cmp	DWORD PTR _i$77828[ebp], 0
	je	SHORT $LN3@CObjectVec@13
; Line 489
	mov	eax, DWORD PTR _i$77828[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$77828[ebp], eax
	mov	ecx, DWORD PTR _i$77828[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T80304[ebp], edx
	mov	eax, DWORD PTR $T80304[ebp]
	mov	DWORD PTR $T80303[ebp], eax
	cmp	DWORD PTR $T80303[ebp], 0
	je	SHORT $LN5@CObjectVec@13
	push	1
	mov	ecx, DWORD PTR $T80303[ebp]
	call	??_G?$CBuffer@E@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@13
$LN5@CObjectVec@13:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@13:
	jmp	SHORT $LN2@CObjectVec@13
$LN3@CObjectVec@13:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ ENDP		; CObjectVector<CBuffer<unsigned char> >::~CObjectVector<CBuffer<unsigned char> >
PUBLIC	??1CArcExtInfo@@QAE@XZ				; CArcExtInfo::~CArcExtInfo
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCArcExtInfo@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCArcExtInfo@@QAEPAXI@Z PROC				; CArcExtInfo::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CArcExtInfo@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@13
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@13:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCArcExtInfo@@QAEPAXI@Z ENDP				; CArcExtInfo::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1?$CBuffer@E@@QAE@XZ				; CBuffer<unsigned char>::~CBuffer<unsigned char>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_G?$CBuffer@E@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$CBuffer@E@@QAEPAXI@Z PROC				; CBuffer<unsigned char>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@14
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@14:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$CBuffer@E@@QAEPAXI@Z ENDP				; CBuffer<unsigned char>::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CBuffer@E@@QAE@XZ
_TEXT	SEGMENT
$T80320 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CBuffer@E@@QAE@XZ PROC				; CBuffer<unsigned char>::~CBuffer<unsigned char>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mybuffer.h
; Line 37
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T80320[ebp], ecx
	mov	edx, DWORD PTR $T80320[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CBuffer@E@@QAE@XZ ENDP				; CBuffer<unsigned char>::~CBuffer<unsigned char>
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CArcExtInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CArcExtInfo@@QAE@XZ$0
__ehfuncinfo$??1CArcExtInfo@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CArcExtInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CArcExtInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CArcExtInfo@@QAE@XZ PROC				; CArcExtInfo::~CArcExtInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CArcExtInfo@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CArcExtInfo@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$??1CArcExtInfo@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CArcExtInfo@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CArcExtInfo@@QAE@XZ ENDP				; CArcExtInfo::~CArcExtInfo
PUBLIC	??1?$CMyComPtr@UIHasher@@@@QAE@XZ		; CMyComPtr<IHasher>::~CMyComPtr<IHasher>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CHasherState@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CHasherState@@QAE@XZ$0
__ehfuncinfo$??1CHasherState@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CHasherState@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CHasherState@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CHasherState@@QAE@XZ PROC				; CHasherState::~CHasherState, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CHasherState@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CMyComPtr@UIHasher@@@@QAE@XZ	; CMyComPtr<IHasher>::~CMyComPtr<IHasher>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CHasherState@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CMyComPtr@UIHasher@@@@QAE@XZ	; CMyComPtr<IHasher>::~CMyComPtr<IHasher>
__ehhandler$??1CHasherState@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CHasherState@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CHasherState@@QAE@XZ ENDP				; CHasherState::~CHasherState
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CProperty@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CProperty@@QAE@XZ$0
__ehfuncinfo$??1CProperty@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CProperty@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CProperty@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CProperty@@QAE@XZ PROC				; CProperty::~CProperty, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CProperty@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CProperty@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$??1CProperty@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CProperty@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CProperty@@QAE@XZ ENDP				; CProperty::~CProperty
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CRenamePair@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CRenamePair@@QAE@XZ$0
__ehfuncinfo$??1CRenamePair@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CRenamePair@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CRenamePair@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CRenamePair@@QAE@XZ PROC				; CRenamePair::~CRenamePair, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CRenamePair@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CRenamePair@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$??1CRenamePair@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CRenamePair@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CRenamePair@@QAE@XZ ENDP				; CRenamePair::~CRenamePair
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CRecordVector@PAX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@PAX@@QAE@XZ PROC			; CRecordVector<void *>::CRecordVector<void *>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@PAX@@QAE@XZ ENDP			; CRecordVector<void *>::CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@PAX@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@PAX@@QBEIXZ PROC			; CRecordVector<void *>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@PAX@@QBEIXZ ENDP			; CRecordVector<void *>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ PROC		; CRecordVector<void *>::IsEmpty, COMDAT
; _this$ = ecx
; Line 49
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+4], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ ENDP		; CRecordVector<void *>::IsEmpty
_TEXT	ENDS
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Reserve@?$CRecordVector@PAX@@QAEXI@Z
_TEXT	SEGMENT
$T80370 = -16						; size = 4
$T80369 = -12						; size = 4
_p$78242 = -8						; size = 4
_this$ = -4						; size = 4
_newCapacity$ = 8					; size = 4
?Reserve@?$CRecordVector@PAX@@QAEXI@Z PROC		; CRecordVector<void *>::Reserve, COMDAT
; _this$ = ecx
; Line 61
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 62
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	SHORT $LN3@Reserve
; Line 64
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T80369[ebp], eax
	mov	eax, DWORD PTR $T80369[ebp]
	mov	DWORD PTR _p$78242[ebp], eax
; Line 65
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@Reserve
; Line 66
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$78242[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@Reserve:
; Line 67
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T80370[ebp], edx
	mov	eax, DWORD PTR $T80370[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 68
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$78242[ebp]
	mov	DWORD PTR [ecx], edx
; Line 69
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@Reserve:
; Line 71
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Reserve@?$CRecordVector@PAX@@QAEXI@Z ENDP		; CRecordVector<void *>::Reserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@PAX@@QAE@XZ
_TEXT	SEGMENT
$T80373 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@PAX@@QAE@XZ PROC			; CRecordVector<void *>::~CRecordVector<void *>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T80373[ebp], ecx
	mov	edx, DWORD PTR $T80373[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@PAX@@QAE@XZ ENDP			; CRecordVector<void *>::~CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Clear@?$CRecordVector@PAX@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$CRecordVector@PAX@@QAEXXZ PROC			; CRecordVector<void *>::Clear, COMDAT
; _this$ = ecx
; Line 131
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CRecordVector@PAX@@QAEXXZ ENDP			; CRecordVector<void *>::Clear
_TEXT	ENDS
PUBLIC	?MoveItems@?$CRecordVector@PAX@@AAEXII@Z	; CRecordVector<void *>::MoveItems
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Delete@?$CRecordVector@PAX@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?Delete@?$CRecordVector@PAX@@QAEXI@Z PROC		; CRecordVector<void *>::Delete, COMDAT
; _this$ = ecx
; Line 151
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 152
	mov	eax, DWORD PTR _index$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MoveItems@?$CRecordVector@PAX@@AAEXII@Z ; CRecordVector<void *>::MoveItems
; Line 153
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	sub	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 154
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Delete@?$CRecordVector@PAX@@QAEXI@Z ENDP		; CRecordVector<void *>::Delete
_TEXT	ENDS
PUBLIC	?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ	; CRecordVector<void *>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@PAX@@QAEIQAX@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?Add@?$CRecordVector@PAX@@QAEIQAX@Z PROC		; CRecordVector<void *>::Add, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ; CRecordVector<void *>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 201
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv72[ebp]
; Line 202
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CRecordVector@PAX@@QAEIQAX@Z ENDP		; CRecordVector<void *>::Add
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z PROC	; CRecordVector<void *>::AddInReserved, COMDAT
; _this$ = ecx
; Line 205
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 206
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 207
	mov	esp, ebp
	pop	ebp
	ret	4
?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ENDP	; CRecordVector<void *>::AddInReserved
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@PAX@@QBEABQAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@PAX@@QBEABQAXI@Z PROC		; CRecordVector<void *>::operator[], COMDAT
; _this$ = ecx
; Line 227
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@PAX@@QBEABQAXI@Z ENDP		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@PAX@@QAEAAPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@PAX@@QAEAAPAXI@Z PROC		; CRecordVector<void *>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@PAX@@QAEAAPAXI@Z ENDP		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@UCPair@NWildcard@@@@QAEAAUCPair@NWildcard@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCPair@NWildcard@@@@QAEAAUCPair@NWildcard@@I@Z PROC ; CObjectVector<NWildcard::CPair>::operator[], COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCPair@NWildcard@@@@QAEAAUCPair@NWildcard@@I@Z ENDP ; CObjectVector<NWildcard::CPair>::operator[]
_TEXT	ENDS
PUBLIC	?MoveItems@?$CRecordVector@H@@AAEXII@Z		; CRecordVector<int>::MoveItems
PUBLIC	?ReserveOnePosition@?$CRecordVector@H@@AAEXXZ	; CRecordVector<int>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Insert@?$CRecordVector@H@@QAEXIH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
_item$ = 12						; size = 4
?Insert@?$CRecordVector@H@@QAEXIH@Z PROC		; CRecordVector<int>::Insert, COMDAT
; _this$ = ecx
; Line 210
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 211
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@H@@AAEXXZ ; CRecordVector<int>::ReserveOnePosition
; Line 212
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MoveItems@?$CRecordVector@H@@AAEXII@Z	; CRecordVector<int>::MoveItems
; Line 213
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 214
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 215
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Insert@?$CRecordVector@H@@QAEXIH@Z ENDP		; CRecordVector<int>::Insert
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIHasher@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIHasher@@@@QAE@XZ PROC			; CMyComPtr<IHasher>::~CMyComPtr<IHasher>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@5:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIHasher@@@@QAE@XZ ENDP			; CMyComPtr<IHasher>::~CMyComPtr<IHasher>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CObjectVector@UCProperty@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@UCProperty@@@@QBEIXZ PROC		; CObjectVector<CProperty>::Size, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@UCProperty@@@@QBEIXZ ENDP		; CObjectVector<CProperty>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@UCProperty@@@@QBEABUCProperty@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCProperty@@@@QBEABUCProperty@@I@Z PROC ; CObjectVector<CProperty>::operator[], COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCProperty@@@@QBEABUCProperty@@I@Z ENDP ; CObjectVector<CProperty>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Clear@?$CObjectVector@UCProperty@@@@QAEXXZ
_TEXT	SEGMENT
tv75 = -20						; size = 4
$T80399 = -16						; size = 4
$T80398 = -12						; size = 4
_i$78285 = -8						; size = 4
_this$ = -4						; size = 4
?Clear@?$CObjectVector@UCProperty@@@@QAEXXZ PROC	; CObjectVector<CProperty>::Clear, COMDAT
; _this$ = ecx
; Line 499
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 500
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$78285[ebp], eax
$LN2@Clear@2:
	cmp	DWORD PTR _i$78285[ebp], 0
	je	SHORT $LN1@Clear@2
; Line 501
	mov	eax, DWORD PTR _i$78285[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$78285[ebp], eax
	mov	ecx, DWORD PTR _i$78285[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T80399[ebp], edx
	mov	eax, DWORD PTR $T80399[ebp]
	mov	DWORD PTR $T80398[ebp], eax
	cmp	DWORD PTR $T80398[ebp], 0
	je	SHORT $LN5@Clear@2
	push	1
	mov	ecx, DWORD PTR $T80398[ebp]
	call	??_GCProperty@@QAEPAXI@Z
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN6@Clear@2
$LN5@Clear@2:
	mov	DWORD PTR tv75[ebp], 0
$LN6@Clear@2:
	jmp	SHORT $LN2@Clear@2
$LN1@Clear@2:
; Line 502
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CRecordVector@PAX@@QAEXXZ	; CRecordVector<void *>::Clear
; Line 503
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CObjectVector@UCProperty@@@@QAEXXZ ENDP	; CObjectVector<CProperty>::Clear
_TEXT	ENDS
EXTRN	__imp__memmove:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?MoveItems@?$CRecordVector@PAX@@AAEXII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_destIndex$ = 8						; size = 4
_srcIndex$ = 12						; size = 4
?MoveItems@?$CRecordVector@PAX@@AAEXII@Z PROC		; CRecordVector<void *>::MoveItems, COMDAT
; _this$ = ecx
; Line 14
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 15
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR _srcIndex$[ebp]
	shl	ecx, 2
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _srcIndex$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _destIndex$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 16
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?MoveItems@?$CRecordVector@PAX@@AAEXII@Z ENDP		; CRecordVector<void *>::MoveItems
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ
_TEXT	SEGMENT
$T80407 = -20						; size = 4
$T80406 = -16						; size = 4
_p$78311 = -12						; size = 4
_newCapacity$78310 = -8					; size = 4
_this$ = -4						; size = 4
?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ PROC	; CRecordVector<void *>::ReserveOnePosition, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@ReserveOne
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$78310[ebp], ecx
; Line 23
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$78310[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T80406[ebp], eax
	mov	eax, DWORD PTR $T80406[ebp]
	mov	DWORD PTR _p$78311[ebp], eax
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@ReserveOne
; Line 25
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$78311[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne:
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T80407[ebp], edx
	mov	eax, DWORD PTR $T80407[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$78311[ebp]
	mov	DWORD PTR [ecx], edx
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$78310[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ReserveOne:
; Line 30
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ENDP	; CRecordVector<void *>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?MoveItems@?$CRecordVector@H@@AAEXII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_destIndex$ = 8						; size = 4
_srcIndex$ = 12						; size = 4
?MoveItems@?$CRecordVector@H@@AAEXII@Z PROC		; CRecordVector<int>::MoveItems, COMDAT
; _this$ = ecx
; Line 14
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 15
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR _srcIndex$[ebp]
	shl	ecx, 2
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _srcIndex$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _destIndex$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 16
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?MoveItems@?$CRecordVector@H@@AAEXII@Z ENDP		; CRecordVector<int>::MoveItems
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReserveOnePosition@?$CRecordVector@H@@AAEXXZ
_TEXT	SEGMENT
$T80413 = -20						; size = 4
$T80412 = -16						; size = 4
_p$78326 = -12						; size = 4
_newCapacity$78325 = -8					; size = 4
_this$ = -4						; size = 4
?ReserveOnePosition@?$CRecordVector@H@@AAEXXZ PROC	; CRecordVector<int>::ReserveOnePosition, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@ReserveOne@2
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$78325[ebp], ecx
; Line 23
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$78325[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T80412[ebp], eax
	mov	eax, DWORD PTR $T80412[ebp]
	mov	DWORD PTR _p$78326[ebp], eax
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@ReserveOne@2
; Line 25
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$78326[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne@2:
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T80413[ebp], edx
	mov	eax, DWORD PTR $T80413[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$78326[ebp]
	mov	DWORD PTR [ecx], edx
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$78325[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ReserveOne@2:
; Line 30
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveOnePosition@?$CRecordVector@H@@AAEXXZ ENDP	; CRecordVector<int>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CExtractCallbackConsole@@W3AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CExtractCallbackConsole@@W3AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:CExtractCallbackConsole::QueryInterface`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?QueryInterface@CExtractCallbackConsole@@UAGJABU_GUID@@PAPAX@Z ; CExtractCallbackConsole::QueryInterface
?QueryInterface@CExtractCallbackConsole@@W3AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:CExtractCallbackConsole::QueryInterface`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CExtractCallbackConsole@@W7AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CExtractCallbackConsole@@W7AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:CExtractCallbackConsole::QueryInterface`adjustor{8}', COMDAT
	sub	DWORD PTR [esp+4], 8
	jmp	?QueryInterface@CExtractCallbackConsole@@UAGJABU_GUID@@PAPAX@Z ; CExtractCallbackConsole::QueryInterface
?QueryInterface@CExtractCallbackConsole@@W7AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:CExtractCallbackConsole::QueryInterface`adjustor{8}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CExtractCallbackConsole@@W3AGKXZ
_TEXT	SEGMENT
?Release@CExtractCallbackConsole@@W3AGKXZ PROC		; [thunk]:CExtractCallbackConsole::Release`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?Release@CExtractCallbackConsole@@UAGKXZ ; CExtractCallbackConsole::Release
?Release@CExtractCallbackConsole@@W3AGKXZ ENDP		; [thunk]:CExtractCallbackConsole::Release`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CExtractCallbackConsole@@W7AGKXZ
_TEXT	SEGMENT
?Release@CExtractCallbackConsole@@W7AGKXZ PROC		; [thunk]:CExtractCallbackConsole::Release`adjustor{8}', COMDAT
	sub	DWORD PTR [esp+4], 8
	jmp	?Release@CExtractCallbackConsole@@UAGKXZ ; CExtractCallbackConsole::Release
?Release@CExtractCallbackConsole@@W7AGKXZ ENDP		; [thunk]:CExtractCallbackConsole::Release`adjustor{8}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CExtractCallbackConsole@@W3AGKXZ
_TEXT	SEGMENT
?AddRef@CExtractCallbackConsole@@W3AGKXZ PROC		; [thunk]:CExtractCallbackConsole::AddRef`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?AddRef@CExtractCallbackConsole@@UAGKXZ	; CExtractCallbackConsole::AddRef
?AddRef@CExtractCallbackConsole@@W3AGKXZ ENDP		; [thunk]:CExtractCallbackConsole::AddRef`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CExtractCallbackConsole@@W7AGKXZ
_TEXT	SEGMENT
?AddRef@CExtractCallbackConsole@@W7AGKXZ PROC		; [thunk]:CExtractCallbackConsole::AddRef`adjustor{8}', COMDAT
	sub	DWORD PTR [esp+4], 8
	jmp	?AddRef@CExtractCallbackConsole@@UAGKXZ	; CExtractCallbackConsole::AddRef
?AddRef@CExtractCallbackConsole@@W7AGKXZ ENDP		; [thunk]:CExtractCallbackConsole::AddRef`adjustor{8}'
_TEXT	ENDS
END
