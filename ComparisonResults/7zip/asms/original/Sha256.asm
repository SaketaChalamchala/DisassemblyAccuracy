; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\C\Sha256.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
_K	DD	0428a2f98H
	DD	071374491H
	DD	0b5c0fbcfH
	DD	0e9b5dba5H
	DD	03956c25bH
	DD	059f111f1H
	DD	0923f82a4H
	DD	0ab1c5ed5H
	DD	0d807aa98H
	DD	012835b01H
	DD	0243185beH
	DD	0550c7dc3H
	DD	072be5d74H
	DD	080deb1feH
	DD	09bdc06a7H
	DD	0c19bf174H
	DD	0e49b69c1H
	DD	0efbe4786H
	DD	0fc19dc6H
	DD	0240ca1ccH
	DD	02de92c6fH
	DD	04a7484aaH
	DD	05cb0a9dcH
	DD	076f988daH
	DD	0983e5152H
	DD	0a831c66dH
	DD	0b00327c8H
	DD	0bf597fc7H
	DD	0c6e00bf3H
	DD	0d5a79147H
	DD	06ca6351H
	DD	014292967H
	DD	027b70a85H
	DD	02e1b2138H
	DD	04d2c6dfcH
	DD	053380d13H
	DD	0650a7354H
	DD	0766a0abbH
	DD	081c2c92eH
	DD	092722c85H
	DD	0a2bfe8a1H
	DD	0a81a664bH
	DD	0c24b8b70H
	DD	0c76c51a3H
	DD	0d192e819H
	DD	0d6990624H
	DD	0f40e3585H
	DD	0106aa070H
	DD	019a4c116H
	DD	01e376c08H
	DD	02748774cH
	DD	034b0bcb5H
	DD	0391c0cb3H
	DD	04ed8aa4aH
	DD	05b9cca4fH
	DD	0682e6ff3H
	DD	0748f82eeH
	DD	078a5636fH
	DD	084c87814H
	DD	08cc70208H
	DD	090befffaH
	DD	0a4506cebH
	DD	0bef9a3f7H
	DD	0c67178f2H
CONST	ENDS
PUBLIC	_Sha256_Init@4
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\c\sha256.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_p$ = 8							; size = 4
_Sha256_Init@4 PROC
; Line 22
	push	ebp
	mov	ebp, esp
; Line 23
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], 1779033703		; 6a09e667H
; Line 24
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+4], -1150833019		; bb67ae85H
; Line 25
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+8], 1013904242		; 3c6ef372H
; Line 26
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+12], -1521486534		; a54ff53aH
; Line 27
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+16], 1359893119		; 510e527fH
; Line 28
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+20], -1694144372		; 9b05688cH
; Line 29
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+24], 528734635		; 1f83d9abH
; Line 30
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+28], 1541459225		; 5be0cd19H
; Line 31
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+32], 0
	mov	DWORD PTR [edx+36], 0
; Line 32
	pop	ebp
	ret	4
_Sha256_Init@4 ENDP
_TEXT	ENDS
PUBLIC	_Sha256_Update@12
EXTRN	_memcpy:PROC
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_num$3537 = -8						; size = 4
_pos$3535 = -4						; size = 4
_p$ = 8							; size = 4
_data$ = 12						; size = 4
_size$ = 16						; size = 4
_Sha256_Update@12 PROC
; Line 170
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 171
	cmp	DWORD PTR _size$[ebp], 0
	jne	SHORT $LN6@Sha256_Upd
; Line 172
	jmp	$LN7@Sha256_Upd
$LN6@Sha256_Upd:
; Line 175
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	and	ecx, 63					; 0000003fH
	mov	DWORD PTR _pos$3535[ebp], ecx
; Line 178
	mov	edx, DWORD PTR _size$[ebp]
	xor	eax, eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	edx, DWORD PTR [ecx+32]
	adc	eax, DWORD PTR [ecx+36]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+32], edx
	mov	DWORD PTR [ecx+36], eax
; Line 180
	mov	edx, 64					; 00000040H
	sub	edx, DWORD PTR _pos$3535[ebp]
	mov	DWORD PTR _num$3537[ebp], edx
; Line 181
	mov	eax, DWORD PTR _num$3537[ebp]
	cmp	eax, DWORD PTR _size$[ebp]
	jbe	SHORT $LN5@Sha256_Upd
; Line 183
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	mov	eax, DWORD PTR _pos$3535[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	lea	edx, DWORD PTR [ecx+eax+40]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 184
	jmp	$LN7@Sha256_Upd
$LN5@Sha256_Upd:
; Line 187
	mov	eax, DWORD PTR _size$[ebp]
	sub	eax, DWORD PTR _num$3537[ebp]
	mov	DWORD PTR _size$[ebp], eax
; Line 188
	mov	ecx, DWORD PTR _num$3537[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	mov	eax, DWORD PTR _pos$3535[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	lea	edx, DWORD PTR [ecx+eax+40]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 189
	mov	eax, DWORD PTR _data$[ebp]
	add	eax, DWORD PTR _num$3537[ebp]
	mov	DWORD PTR _data$[ebp], eax
$LN4@Sha256_Upd:
; Line 194
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_Sha256_WriteByteBlock@4
; Line 195
	cmp	DWORD PTR _size$[ebp], 64		; 00000040H
	jae	SHORT $LN2@Sha256_Upd
; Line 196
	jmp	SHORT $LN3@Sha256_Upd
$LN2@Sha256_Upd:
; Line 197
	mov	edx, DWORD PTR _size$[ebp]
	sub	edx, 64					; 00000040H
	mov	DWORD PTR _size$[ebp], edx
; Line 198
	push	64					; 00000040H
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 40					; 00000028H
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 199
	mov	edx, DWORD PTR _data$[ebp]
	add	edx, 64					; 00000040H
	mov	DWORD PTR _data$[ebp], edx
; Line 200
	jmp	SHORT $LN4@Sha256_Upd
$LN3@Sha256_Upd:
; Line 202
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN7@Sha256_Upd
; Line 203
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 40					; 00000028H
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN7@Sha256_Upd:
; Line 204
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_Sha256_Update@12 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv1243 = -180						; size = 4
tv1174 = -176						; size = 4
tv1102 = -172						; size = 4
tv1030 = -168						; size = 4
tv958 = -164						; size = 4
tv886 = -160						; size = 4
tv814 = -156						; size = 4
tv742 = -152						; size = 4
tv670 = -148						; size = 4
tv599 = -144						; size = 4
tv527 = -140						; size = 4
tv455 = -136						; size = 4
tv383 = -132						; size = 4
tv311 = -128						; size = 4
tv242 = -124						; size = 4
tv170 = -120						; size = 4
_h$ = -116						; size = 4
_g$ = -112						; size = 4
_f$ = -108						; size = 4
_e$ = -104						; size = 4
_d$ = -100						; size = 4
_c$ = -96						; size = 4
_b$ = -92						; size = 4
_a$ = -88						; size = 4
_state$ = -84						; size = 4
_j$ = -80						; size = 4
_W$ = -72						; size = 64
__$ArrayPad$ = -4					; size = 4
_p$ = 8							; size = 4
_Sha256_WriteByteBlock@4 PROC
; Line 113
	push	ebp
	mov	ebp, esp
	sub	esp, 180				; 000000b4H
	push	edi
	lea	edi, DWORD PTR [ebp-180]
	mov	ecx, 45					; 0000002dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 116
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _state$[ebp], eax
; Line 120
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _a$[ebp], edx
; Line 121
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _b$[ebp], ecx
; Line 122
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _c$[ebp], eax
; Line 123
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _d$[ebp], edx
; Line 124
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _e$[ebp], ecx
; Line 125
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _f$[ebp], eax
; Line 126
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _g$[ebp], edx
; Line 127
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _h$[ebp], ecx
; Line 134
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN6@Sha256_Wri
$LN5@Sha256_Wri:
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 2
	mov	DWORD PTR _j$[ebp], edx
$LN6@Sha256_Wri:
	cmp	DWORD PTR _j$[ebp], 16			; 00000010H
	jae	SHORT $LN4@Sha256_Wri
; Line 136
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+40]
	bswap	edx
	mov	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR _W$[ebp+eax*4], edx
; Line 137
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+44]
	bswap	eax
	mov	ecx, DWORD PTR _j$[ebp]
	mov	DWORD PTR _W$[ebp+ecx*4+4], eax
; Line 138
	jmp	SHORT $LN5@Sha256_Wri
$LN4@Sha256_Wri:
; Line 140
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN3@Sha256_Wri
$LN2@Sha256_Wri:
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR _j$[ebp], edx
$LN3@Sha256_Wri:
	cmp	DWORD PTR _j$[ebp], 64			; 00000040H
	jae	$LN1@Sha256_Wri
; Line 142
	cmp	DWORD PTR _j$[ebp], 0
	je	SHORT $LN9@Sha256_Wri
	mov	eax, DWORD PTR _W$[ebp+56]
	ror	eax, 17					; 00000011H
	mov	ecx, DWORD PTR _W$[ebp+56]
	ror	ecx, 19					; 00000013H
	xor	eax, ecx
	mov	edx, DWORD PTR _W$[ebp+56]
	shr	edx, 10					; 0000000aH
	xor	eax, edx
	add	eax, DWORD PTR _W$[ebp+36]
	mov	ecx, DWORD PTR _W$[ebp+4]
	ror	ecx, 7
	mov	edx, DWORD PTR _W$[ebp+4]
	ror	edx, 18					; 00000012H
	xor	ecx, edx
	mov	edx, DWORD PTR _W$[ebp+4]
	shr	edx, 3
	xor	ecx, edx
	add	ecx, DWORD PTR _W$[ebp]
	add	ecx, eax
	mov	DWORD PTR _W$[ebp], ecx
	mov	eax, DWORD PTR _W$[ebp]
	mov	DWORD PTR tv170[ebp], eax
	jmp	SHORT $LN10@Sha256_Wri
$LN9@Sha256_Wri:
	mov	ecx, DWORD PTR _W$[ebp]
	mov	DWORD PTR tv170[ebp], ecx
$LN10@Sha256_Wri:
	mov	edx, DWORD PTR _e$[ebp]
	ror	edx, 6
	mov	eax, DWORD PTR _e$[ebp]
	ror	eax, 11					; 0000000bH
	xor	edx, eax
	mov	ecx, DWORD PTR _e$[ebp]
	ror	ecx, 25					; 00000019H
	xor	edx, ecx
	mov	eax, DWORD PTR _f$[ebp]
	xor	eax, DWORD PTR _g$[ebp]
	and	eax, DWORD PTR _e$[ebp]
	xor	eax, DWORD PTR _g$[ebp]
	add	edx, eax
	mov	ecx, DWORD PTR _j$[ebp]
	add	edx, DWORD PTR _K[ecx*4]
	add	edx, DWORD PTR tv170[ebp]
	add	edx, DWORD PTR _h$[ebp]
	mov	DWORD PTR _h$[ebp], edx
	mov	edx, DWORD PTR _d$[ebp]
	add	edx, DWORD PTR _h$[ebp]
	mov	DWORD PTR _d$[ebp], edx
	mov	eax, DWORD PTR _a$[ebp]
	ror	eax, 2
	mov	ecx, DWORD PTR _a$[ebp]
	ror	ecx, 13					; 0000000dH
	xor	eax, ecx
	mov	edx, DWORD PTR _a$[ebp]
	ror	edx, 22					; 00000016H
	xor	eax, edx
	mov	ecx, DWORD PTR _a$[ebp]
	and	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR _a$[ebp]
	or	edx, DWORD PTR _b$[ebp]
	and	edx, DWORD PTR _c$[ebp]
	or	ecx, edx
	add	ecx, DWORD PTR _h$[ebp]
	add	ecx, eax
	mov	DWORD PTR _h$[ebp], ecx
	cmp	DWORD PTR _j$[ebp], 0
	je	SHORT $LN11@Sha256_Wri
	mov	eax, DWORD PTR _W$[ebp+60]
	ror	eax, 17					; 00000011H
	mov	ecx, DWORD PTR _W$[ebp+60]
	ror	ecx, 19					; 00000013H
	xor	eax, ecx
	mov	edx, DWORD PTR _W$[ebp+60]
	shr	edx, 10					; 0000000aH
	xor	eax, edx
	add	eax, DWORD PTR _W$[ebp+40]
	mov	ecx, DWORD PTR _W$[ebp+8]
	ror	ecx, 7
	mov	edx, DWORD PTR _W$[ebp+8]
	ror	edx, 18					; 00000012H
	xor	ecx, edx
	mov	edx, DWORD PTR _W$[ebp+8]
	shr	edx, 3
	xor	ecx, edx
	add	ecx, DWORD PTR _W$[ebp+4]
	add	ecx, eax
	mov	DWORD PTR _W$[ebp+4], ecx
	mov	eax, DWORD PTR _W$[ebp+4]
	mov	DWORD PTR tv242[ebp], eax
	jmp	SHORT $LN12@Sha256_Wri
$LN11@Sha256_Wri:
	mov	ecx, DWORD PTR _W$[ebp+4]
	mov	DWORD PTR tv242[ebp], ecx
$LN12@Sha256_Wri:
	mov	edx, DWORD PTR _d$[ebp]
	ror	edx, 6
	mov	eax, DWORD PTR _d$[ebp]
	ror	eax, 11					; 0000000bH
	xor	edx, eax
	mov	ecx, DWORD PTR _d$[ebp]
	ror	ecx, 25					; 00000019H
	xor	edx, ecx
	mov	eax, DWORD PTR _e$[ebp]
	xor	eax, DWORD PTR _f$[ebp]
	and	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _f$[ebp]
	add	edx, eax
	mov	ecx, DWORD PTR _j$[ebp]
	add	edx, DWORD PTR _K[ecx*4+4]
	add	edx, DWORD PTR tv242[ebp]
	add	edx, DWORD PTR _g$[ebp]
	mov	DWORD PTR _g$[ebp], edx
	mov	edx, DWORD PTR _c$[ebp]
	add	edx, DWORD PTR _g$[ebp]
	mov	DWORD PTR _c$[ebp], edx
	mov	eax, DWORD PTR _h$[ebp]
	ror	eax, 2
	mov	ecx, DWORD PTR _h$[ebp]
	ror	ecx, 13					; 0000000dH
	xor	eax, ecx
	mov	edx, DWORD PTR _h$[ebp]
	ror	edx, 22					; 00000016H
	xor	eax, edx
	mov	ecx, DWORD PTR _h$[ebp]
	and	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _h$[ebp]
	or	edx, DWORD PTR _a$[ebp]
	and	edx, DWORD PTR _b$[ebp]
	or	ecx, edx
	add	ecx, DWORD PTR _g$[ebp]
	add	ecx, eax
	mov	DWORD PTR _g$[ebp], ecx
	cmp	DWORD PTR _j$[ebp], 0
	je	SHORT $LN13@Sha256_Wri
	mov	eax, DWORD PTR _W$[ebp]
	ror	eax, 17					; 00000011H
	mov	ecx, DWORD PTR _W$[ebp]
	ror	ecx, 19					; 00000013H
	xor	eax, ecx
	mov	edx, DWORD PTR _W$[ebp]
	shr	edx, 10					; 0000000aH
	xor	eax, edx
	add	eax, DWORD PTR _W$[ebp+44]
	mov	ecx, DWORD PTR _W$[ebp+12]
	ror	ecx, 7
	mov	edx, DWORD PTR _W$[ebp+12]
	ror	edx, 18					; 00000012H
	xor	ecx, edx
	mov	edx, DWORD PTR _W$[ebp+12]
	shr	edx, 3
	xor	ecx, edx
	add	ecx, DWORD PTR _W$[ebp+8]
	add	ecx, eax
	mov	DWORD PTR _W$[ebp+8], ecx
	mov	eax, DWORD PTR _W$[ebp+8]
	mov	DWORD PTR tv311[ebp], eax
	jmp	SHORT $LN14@Sha256_Wri
$LN13@Sha256_Wri:
	mov	ecx, DWORD PTR _W$[ebp+8]
	mov	DWORD PTR tv311[ebp], ecx
$LN14@Sha256_Wri:
	mov	edx, DWORD PTR _c$[ebp]
	ror	edx, 6
	mov	eax, DWORD PTR _c$[ebp]
	ror	eax, 11					; 0000000bH
	xor	edx, eax
	mov	ecx, DWORD PTR _c$[ebp]
	ror	ecx, 25					; 00000019H
	xor	edx, ecx
	mov	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _e$[ebp]
	and	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _e$[ebp]
	add	edx, eax
	mov	ecx, DWORD PTR _j$[ebp]
	add	edx, DWORD PTR _K[ecx*4+8]
	add	edx, DWORD PTR tv311[ebp]
	add	edx, DWORD PTR _f$[ebp]
	mov	DWORD PTR _f$[ebp], edx
	mov	edx, DWORD PTR _b$[ebp]
	add	edx, DWORD PTR _f$[ebp]
	mov	DWORD PTR _b$[ebp], edx
	mov	eax, DWORD PTR _g$[ebp]
	ror	eax, 2
	mov	ecx, DWORD PTR _g$[ebp]
	ror	ecx, 13					; 0000000dH
	xor	eax, ecx
	mov	edx, DWORD PTR _g$[ebp]
	ror	edx, 22					; 00000016H
	xor	eax, edx
	mov	ecx, DWORD PTR _g$[ebp]
	and	ecx, DWORD PTR _h$[ebp]
	mov	edx, DWORD PTR _g$[ebp]
	or	edx, DWORD PTR _h$[ebp]
	and	edx, DWORD PTR _a$[ebp]
	or	ecx, edx
	add	ecx, DWORD PTR _f$[ebp]
	add	ecx, eax
	mov	DWORD PTR _f$[ebp], ecx
	cmp	DWORD PTR _j$[ebp], 0
	je	SHORT $LN15@Sha256_Wri
	mov	eax, DWORD PTR _W$[ebp+4]
	ror	eax, 17					; 00000011H
	mov	ecx, DWORD PTR _W$[ebp+4]
	ror	ecx, 19					; 00000013H
	xor	eax, ecx
	mov	edx, DWORD PTR _W$[ebp+4]
	shr	edx, 10					; 0000000aH
	xor	eax, edx
	add	eax, DWORD PTR _W$[ebp+48]
	mov	ecx, DWORD PTR _W$[ebp+16]
	ror	ecx, 7
	mov	edx, DWORD PTR _W$[ebp+16]
	ror	edx, 18					; 00000012H
	xor	ecx, edx
	mov	edx, DWORD PTR _W$[ebp+16]
	shr	edx, 3
	xor	ecx, edx
	add	ecx, DWORD PTR _W$[ebp+12]
	add	ecx, eax
	mov	DWORD PTR _W$[ebp+12], ecx
	mov	eax, DWORD PTR _W$[ebp+12]
	mov	DWORD PTR tv383[ebp], eax
	jmp	SHORT $LN16@Sha256_Wri
$LN15@Sha256_Wri:
	mov	ecx, DWORD PTR _W$[ebp+12]
	mov	DWORD PTR tv383[ebp], ecx
$LN16@Sha256_Wri:
	mov	edx, DWORD PTR _b$[ebp]
	ror	edx, 6
	mov	eax, DWORD PTR _b$[ebp]
	ror	eax, 11					; 0000000bH
	xor	edx, eax
	mov	ecx, DWORD PTR _b$[ebp]
	ror	ecx, 25					; 00000019H
	xor	edx, ecx
	mov	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	and	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	add	edx, eax
	mov	ecx, DWORD PTR _j$[ebp]
	add	edx, DWORD PTR _K[ecx*4+12]
	add	edx, DWORD PTR tv383[ebp]
	add	edx, DWORD PTR _e$[ebp]
	mov	DWORD PTR _e$[ebp], edx
	mov	edx, DWORD PTR _a$[ebp]
	add	edx, DWORD PTR _e$[ebp]
	mov	DWORD PTR _a$[ebp], edx
	mov	eax, DWORD PTR _f$[ebp]
	ror	eax, 2
	mov	ecx, DWORD PTR _f$[ebp]
	ror	ecx, 13					; 0000000dH
	xor	eax, ecx
	mov	edx, DWORD PTR _f$[ebp]
	ror	edx, 22					; 00000016H
	xor	eax, edx
	mov	ecx, DWORD PTR _f$[ebp]
	and	ecx, DWORD PTR _g$[ebp]
	mov	edx, DWORD PTR _f$[ebp]
	or	edx, DWORD PTR _g$[ebp]
	and	edx, DWORD PTR _h$[ebp]
	or	ecx, edx
	add	ecx, DWORD PTR _e$[ebp]
	add	ecx, eax
	mov	DWORD PTR _e$[ebp], ecx
	cmp	DWORD PTR _j$[ebp], 0
	je	SHORT $LN17@Sha256_Wri
	mov	eax, DWORD PTR _W$[ebp+8]
	ror	eax, 17					; 00000011H
	mov	ecx, DWORD PTR _W$[ebp+8]
	ror	ecx, 19					; 00000013H
	xor	eax, ecx
	mov	edx, DWORD PTR _W$[ebp+8]
	shr	edx, 10					; 0000000aH
	xor	eax, edx
	add	eax, DWORD PTR _W$[ebp+52]
	mov	ecx, DWORD PTR _W$[ebp+20]
	ror	ecx, 7
	mov	edx, DWORD PTR _W$[ebp+20]
	ror	edx, 18					; 00000012H
	xor	ecx, edx
	mov	edx, DWORD PTR _W$[ebp+20]
	shr	edx, 3
	xor	ecx, edx
	add	ecx, DWORD PTR _W$[ebp+16]
	add	ecx, eax
	mov	DWORD PTR _W$[ebp+16], ecx
	mov	eax, DWORD PTR _W$[ebp+16]
	mov	DWORD PTR tv455[ebp], eax
	jmp	SHORT $LN18@Sha256_Wri
$LN17@Sha256_Wri:
	mov	ecx, DWORD PTR _W$[ebp+16]
	mov	DWORD PTR tv455[ebp], ecx
$LN18@Sha256_Wri:
	mov	edx, DWORD PTR _a$[ebp]
	ror	edx, 6
	mov	eax, DWORD PTR _a$[ebp]
	ror	eax, 11					; 0000000bH
	xor	edx, eax
	mov	ecx, DWORD PTR _a$[ebp]
	ror	ecx, 25					; 00000019H
	xor	edx, ecx
	mov	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	and	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	add	edx, eax
	mov	ecx, DWORD PTR _j$[ebp]
	add	edx, DWORD PTR _K[ecx*4+16]
	add	edx, DWORD PTR tv455[ebp]
	add	edx, DWORD PTR _d$[ebp]
	mov	DWORD PTR _d$[ebp], edx
	mov	edx, DWORD PTR _h$[ebp]
	add	edx, DWORD PTR _d$[ebp]
	mov	DWORD PTR _h$[ebp], edx
	mov	eax, DWORD PTR _e$[ebp]
	ror	eax, 2
	mov	ecx, DWORD PTR _e$[ebp]
	ror	ecx, 13					; 0000000dH
	xor	eax, ecx
	mov	edx, DWORD PTR _e$[ebp]
	ror	edx, 22					; 00000016H
	xor	eax, edx
	mov	ecx, DWORD PTR _e$[ebp]
	and	ecx, DWORD PTR _f$[ebp]
	mov	edx, DWORD PTR _e$[ebp]
	or	edx, DWORD PTR _f$[ebp]
	and	edx, DWORD PTR _g$[ebp]
	or	ecx, edx
	add	ecx, DWORD PTR _d$[ebp]
	add	ecx, eax
	mov	DWORD PTR _d$[ebp], ecx
	cmp	DWORD PTR _j$[ebp], 0
	je	SHORT $LN19@Sha256_Wri
	mov	eax, DWORD PTR _W$[ebp+12]
	ror	eax, 17					; 00000011H
	mov	ecx, DWORD PTR _W$[ebp+12]
	ror	ecx, 19					; 00000013H
	xor	eax, ecx
	mov	edx, DWORD PTR _W$[ebp+12]
	shr	edx, 10					; 0000000aH
	xor	eax, edx
	add	eax, DWORD PTR _W$[ebp+56]
	mov	ecx, DWORD PTR _W$[ebp+24]
	ror	ecx, 7
	mov	edx, DWORD PTR _W$[ebp+24]
	ror	edx, 18					; 00000012H
	xor	ecx, edx
	mov	edx, DWORD PTR _W$[ebp+24]
	shr	edx, 3
	xor	ecx, edx
	add	ecx, DWORD PTR _W$[ebp+20]
	add	ecx, eax
	mov	DWORD PTR _W$[ebp+20], ecx
	mov	eax, DWORD PTR _W$[ebp+20]
	mov	DWORD PTR tv527[ebp], eax
	jmp	SHORT $LN20@Sha256_Wri
$LN19@Sha256_Wri:
	mov	ecx, DWORD PTR _W$[ebp+20]
	mov	DWORD PTR tv527[ebp], ecx
$LN20@Sha256_Wri:
	mov	edx, DWORD PTR _h$[ebp]
	ror	edx, 6
	mov	eax, DWORD PTR _h$[ebp]
	ror	eax, 11					; 0000000bH
	xor	edx, eax
	mov	ecx, DWORD PTR _h$[ebp]
	ror	ecx, 25					; 00000019H
	xor	edx, ecx
	mov	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	and	eax, DWORD PTR _h$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	add	edx, eax
	mov	ecx, DWORD PTR _j$[ebp]
	add	edx, DWORD PTR _K[ecx*4+20]
	add	edx, DWORD PTR tv527[ebp]
	add	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR _c$[ebp], edx
	mov	edx, DWORD PTR _g$[ebp]
	add	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR _g$[ebp], edx
	mov	eax, DWORD PTR _d$[ebp]
	ror	eax, 2
	mov	ecx, DWORD PTR _d$[ebp]
	ror	ecx, 13					; 0000000dH
	xor	eax, ecx
	mov	edx, DWORD PTR _d$[ebp]
	ror	edx, 22					; 00000016H
	xor	eax, edx
	mov	ecx, DWORD PTR _d$[ebp]
	and	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR _d$[ebp]
	or	edx, DWORD PTR _e$[ebp]
	and	edx, DWORD PTR _f$[ebp]
	or	ecx, edx
	add	ecx, DWORD PTR _c$[ebp]
	add	ecx, eax
	mov	DWORD PTR _c$[ebp], ecx
	cmp	DWORD PTR _j$[ebp], 0
	je	SHORT $LN21@Sha256_Wri
	mov	eax, DWORD PTR _W$[ebp+16]
	ror	eax, 17					; 00000011H
	mov	ecx, DWORD PTR _W$[ebp+16]
	ror	ecx, 19					; 00000013H
	xor	eax, ecx
	mov	edx, DWORD PTR _W$[ebp+16]
	shr	edx, 10					; 0000000aH
	xor	eax, edx
	add	eax, DWORD PTR _W$[ebp+60]
	mov	ecx, DWORD PTR _W$[ebp+28]
	ror	ecx, 7
	mov	edx, DWORD PTR _W$[ebp+28]
	ror	edx, 18					; 00000012H
	xor	ecx, edx
	mov	edx, DWORD PTR _W$[ebp+28]
	shr	edx, 3
	xor	ecx, edx
	add	ecx, DWORD PTR _W$[ebp+24]
	add	ecx, eax
	mov	DWORD PTR _W$[ebp+24], ecx
	mov	eax, DWORD PTR _W$[ebp+24]
	mov	DWORD PTR tv599[ebp], eax
	jmp	SHORT $LN22@Sha256_Wri
$LN21@Sha256_Wri:
	mov	ecx, DWORD PTR _W$[ebp+24]
	mov	DWORD PTR tv599[ebp], ecx
$LN22@Sha256_Wri:
	mov	edx, DWORD PTR _g$[ebp]
	ror	edx, 6
	mov	eax, DWORD PTR _g$[ebp]
	ror	eax, 11					; 0000000bH
	xor	edx, eax
	mov	ecx, DWORD PTR _g$[ebp]
	ror	ecx, 25					; 00000019H
	xor	edx, ecx
	mov	eax, DWORD PTR _h$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	and	eax, DWORD PTR _g$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	add	edx, eax
	mov	ecx, DWORD PTR _j$[ebp]
	add	edx, DWORD PTR _K[ecx*4+24]
	add	edx, DWORD PTR tv599[ebp]
	add	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _b$[ebp], edx
	mov	edx, DWORD PTR _f$[ebp]
	add	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _f$[ebp], edx
	mov	eax, DWORD PTR _c$[ebp]
	ror	eax, 2
	mov	ecx, DWORD PTR _c$[ebp]
	ror	ecx, 13					; 0000000dH
	xor	eax, ecx
	mov	edx, DWORD PTR _c$[ebp]
	ror	edx, 22					; 00000016H
	xor	eax, edx
	mov	ecx, DWORD PTR _c$[ebp]
	and	ecx, DWORD PTR _d$[ebp]
	mov	edx, DWORD PTR _c$[ebp]
	or	edx, DWORD PTR _d$[ebp]
	and	edx, DWORD PTR _e$[ebp]
	or	ecx, edx
	add	ecx, DWORD PTR _b$[ebp]
	add	ecx, eax
	mov	DWORD PTR _b$[ebp], ecx
	cmp	DWORD PTR _j$[ebp], 0
	je	SHORT $LN23@Sha256_Wri
	mov	eax, DWORD PTR _W$[ebp+20]
	ror	eax, 17					; 00000011H
	mov	ecx, DWORD PTR _W$[ebp+20]
	ror	ecx, 19					; 00000013H
	xor	eax, ecx
	mov	edx, DWORD PTR _W$[ebp+20]
	shr	edx, 10					; 0000000aH
	xor	eax, edx
	add	eax, DWORD PTR _W$[ebp]
	mov	ecx, DWORD PTR _W$[ebp+32]
	ror	ecx, 7
	mov	edx, DWORD PTR _W$[ebp+32]
	ror	edx, 18					; 00000012H
	xor	ecx, edx
	mov	edx, DWORD PTR _W$[ebp+32]
	shr	edx, 3
	xor	ecx, edx
	add	ecx, DWORD PTR _W$[ebp+28]
	add	ecx, eax
	mov	DWORD PTR _W$[ebp+28], ecx
	mov	eax, DWORD PTR _W$[ebp+28]
	mov	DWORD PTR tv670[ebp], eax
	jmp	SHORT $LN24@Sha256_Wri
$LN23@Sha256_Wri:
	mov	ecx, DWORD PTR _W$[ebp+28]
	mov	DWORD PTR tv670[ebp], ecx
$LN24@Sha256_Wri:
	mov	edx, DWORD PTR _f$[ebp]
	ror	edx, 6
	mov	eax, DWORD PTR _f$[ebp]
	ror	eax, 11					; 0000000bH
	xor	edx, eax
	mov	ecx, DWORD PTR _f$[ebp]
	ror	ecx, 25					; 00000019H
	xor	edx, ecx
	mov	eax, DWORD PTR _g$[ebp]
	xor	eax, DWORD PTR _h$[ebp]
	and	eax, DWORD PTR _f$[ebp]
	xor	eax, DWORD PTR _h$[ebp]
	add	edx, eax
	mov	ecx, DWORD PTR _j$[ebp]
	add	edx, DWORD PTR _K[ecx*4+28]
	add	edx, DWORD PTR tv670[ebp]
	add	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR _a$[ebp], edx
	mov	edx, DWORD PTR _e$[ebp]
	add	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR _e$[ebp], edx
	mov	eax, DWORD PTR _b$[ebp]
	ror	eax, 2
	mov	ecx, DWORD PTR _b$[ebp]
	ror	ecx, 13					; 0000000dH
	xor	eax, ecx
	mov	edx, DWORD PTR _b$[ebp]
	ror	edx, 22					; 00000016H
	xor	eax, edx
	mov	ecx, DWORD PTR _b$[ebp]
	and	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	or	edx, DWORD PTR _c$[ebp]
	and	edx, DWORD PTR _d$[ebp]
	or	ecx, edx
	add	ecx, DWORD PTR _a$[ebp]
	add	ecx, eax
	mov	DWORD PTR _a$[ebp], ecx
	cmp	DWORD PTR _j$[ebp], 0
	je	SHORT $LN25@Sha256_Wri
	mov	eax, DWORD PTR _W$[ebp+24]
	ror	eax, 17					; 00000011H
	mov	ecx, DWORD PTR _W$[ebp+24]
	ror	ecx, 19					; 00000013H
	xor	eax, ecx
	mov	edx, DWORD PTR _W$[ebp+24]
	shr	edx, 10					; 0000000aH
	xor	eax, edx
	add	eax, DWORD PTR _W$[ebp+4]
	mov	ecx, DWORD PTR _W$[ebp+36]
	ror	ecx, 7
	mov	edx, DWORD PTR _W$[ebp+36]
	ror	edx, 18					; 00000012H
	xor	ecx, edx
	mov	edx, DWORD PTR _W$[ebp+36]
	shr	edx, 3
	xor	ecx, edx
	add	ecx, DWORD PTR _W$[ebp+32]
	add	ecx, eax
	mov	DWORD PTR _W$[ebp+32], ecx
	mov	eax, DWORD PTR _W$[ebp+32]
	mov	DWORD PTR tv742[ebp], eax
	jmp	SHORT $LN26@Sha256_Wri
$LN25@Sha256_Wri:
	mov	ecx, DWORD PTR _W$[ebp+32]
	mov	DWORD PTR tv742[ebp], ecx
$LN26@Sha256_Wri:
	mov	edx, DWORD PTR _e$[ebp]
	ror	edx, 6
	mov	eax, DWORD PTR _e$[ebp]
	ror	eax, 11					; 0000000bH
	xor	edx, eax
	mov	ecx, DWORD PTR _e$[ebp]
	ror	ecx, 25					; 00000019H
	xor	edx, ecx
	mov	eax, DWORD PTR _f$[ebp]
	xor	eax, DWORD PTR _g$[ebp]
	and	eax, DWORD PTR _e$[ebp]
	xor	eax, DWORD PTR _g$[ebp]
	add	edx, eax
	mov	ecx, DWORD PTR _j$[ebp]
	add	edx, DWORD PTR _K[ecx*4+32]
	add	edx, DWORD PTR tv742[ebp]
	add	edx, DWORD PTR _h$[ebp]
	mov	DWORD PTR _h$[ebp], edx
	mov	edx, DWORD PTR _d$[ebp]
	add	edx, DWORD PTR _h$[ebp]
	mov	DWORD PTR _d$[ebp], edx
	mov	eax, DWORD PTR _a$[ebp]
	ror	eax, 2
	mov	ecx, DWORD PTR _a$[ebp]
	ror	ecx, 13					; 0000000dH
	xor	eax, ecx
	mov	edx, DWORD PTR _a$[ebp]
	ror	edx, 22					; 00000016H
	xor	eax, edx
	mov	ecx, DWORD PTR _a$[ebp]
	and	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR _a$[ebp]
	or	edx, DWORD PTR _b$[ebp]
	and	edx, DWORD PTR _c$[ebp]
	or	ecx, edx
	add	ecx, DWORD PTR _h$[ebp]
	add	ecx, eax
	mov	DWORD PTR _h$[ebp], ecx
	cmp	DWORD PTR _j$[ebp], 0
	je	SHORT $LN27@Sha256_Wri
	mov	eax, DWORD PTR _W$[ebp+28]
	ror	eax, 17					; 00000011H
	mov	ecx, DWORD PTR _W$[ebp+28]
	ror	ecx, 19					; 00000013H
	xor	eax, ecx
	mov	edx, DWORD PTR _W$[ebp+28]
	shr	edx, 10					; 0000000aH
	xor	eax, edx
	add	eax, DWORD PTR _W$[ebp+8]
	mov	ecx, DWORD PTR _W$[ebp+40]
	ror	ecx, 7
	mov	edx, DWORD PTR _W$[ebp+40]
	ror	edx, 18					; 00000012H
	xor	ecx, edx
	mov	edx, DWORD PTR _W$[ebp+40]
	shr	edx, 3
	xor	ecx, edx
	add	ecx, DWORD PTR _W$[ebp+36]
	add	ecx, eax
	mov	DWORD PTR _W$[ebp+36], ecx
	mov	eax, DWORD PTR _W$[ebp+36]
	mov	DWORD PTR tv814[ebp], eax
	jmp	SHORT $LN28@Sha256_Wri
$LN27@Sha256_Wri:
	mov	ecx, DWORD PTR _W$[ebp+36]
	mov	DWORD PTR tv814[ebp], ecx
$LN28@Sha256_Wri:
	mov	edx, DWORD PTR _d$[ebp]
	ror	edx, 6
	mov	eax, DWORD PTR _d$[ebp]
	ror	eax, 11					; 0000000bH
	xor	edx, eax
	mov	ecx, DWORD PTR _d$[ebp]
	ror	ecx, 25					; 00000019H
	xor	edx, ecx
	mov	eax, DWORD PTR _e$[ebp]
	xor	eax, DWORD PTR _f$[ebp]
	and	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _f$[ebp]
	add	edx, eax
	mov	ecx, DWORD PTR _j$[ebp]
	add	edx, DWORD PTR _K[ecx*4+36]
	add	edx, DWORD PTR tv814[ebp]
	add	edx, DWORD PTR _g$[ebp]
	mov	DWORD PTR _g$[ebp], edx
	mov	edx, DWORD PTR _c$[ebp]
	add	edx, DWORD PTR _g$[ebp]
	mov	DWORD PTR _c$[ebp], edx
	mov	eax, DWORD PTR _h$[ebp]
	ror	eax, 2
	mov	ecx, DWORD PTR _h$[ebp]
	ror	ecx, 13					; 0000000dH
	xor	eax, ecx
	mov	edx, DWORD PTR _h$[ebp]
	ror	edx, 22					; 00000016H
	xor	eax, edx
	mov	ecx, DWORD PTR _h$[ebp]
	and	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _h$[ebp]
	or	edx, DWORD PTR _a$[ebp]
	and	edx, DWORD PTR _b$[ebp]
	or	ecx, edx
	add	ecx, DWORD PTR _g$[ebp]
	add	ecx, eax
	mov	DWORD PTR _g$[ebp], ecx
	cmp	DWORD PTR _j$[ebp], 0
	je	SHORT $LN29@Sha256_Wri
	mov	eax, DWORD PTR _W$[ebp+32]
	ror	eax, 17					; 00000011H
	mov	ecx, DWORD PTR _W$[ebp+32]
	ror	ecx, 19					; 00000013H
	xor	eax, ecx
	mov	edx, DWORD PTR _W$[ebp+32]
	shr	edx, 10					; 0000000aH
	xor	eax, edx
	add	eax, DWORD PTR _W$[ebp+12]
	mov	ecx, DWORD PTR _W$[ebp+44]
	ror	ecx, 7
	mov	edx, DWORD PTR _W$[ebp+44]
	ror	edx, 18					; 00000012H
	xor	ecx, edx
	mov	edx, DWORD PTR _W$[ebp+44]
	shr	edx, 3
	xor	ecx, edx
	add	ecx, DWORD PTR _W$[ebp+40]
	add	ecx, eax
	mov	DWORD PTR _W$[ebp+40], ecx
	mov	eax, DWORD PTR _W$[ebp+40]
	mov	DWORD PTR tv886[ebp], eax
	jmp	SHORT $LN30@Sha256_Wri
$LN29@Sha256_Wri:
	mov	ecx, DWORD PTR _W$[ebp+40]
	mov	DWORD PTR tv886[ebp], ecx
$LN30@Sha256_Wri:
	mov	edx, DWORD PTR _c$[ebp]
	ror	edx, 6
	mov	eax, DWORD PTR _c$[ebp]
	ror	eax, 11					; 0000000bH
	xor	edx, eax
	mov	ecx, DWORD PTR _c$[ebp]
	ror	ecx, 25					; 00000019H
	xor	edx, ecx
	mov	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _e$[ebp]
	and	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _e$[ebp]
	add	edx, eax
	mov	ecx, DWORD PTR _j$[ebp]
	add	edx, DWORD PTR _K[ecx*4+40]
	add	edx, DWORD PTR tv886[ebp]
	add	edx, DWORD PTR _f$[ebp]
	mov	DWORD PTR _f$[ebp], edx
	mov	edx, DWORD PTR _b$[ebp]
	add	edx, DWORD PTR _f$[ebp]
	mov	DWORD PTR _b$[ebp], edx
	mov	eax, DWORD PTR _g$[ebp]
	ror	eax, 2
	mov	ecx, DWORD PTR _g$[ebp]
	ror	ecx, 13					; 0000000dH
	xor	eax, ecx
	mov	edx, DWORD PTR _g$[ebp]
	ror	edx, 22					; 00000016H
	xor	eax, edx
	mov	ecx, DWORD PTR _g$[ebp]
	and	ecx, DWORD PTR _h$[ebp]
	mov	edx, DWORD PTR _g$[ebp]
	or	edx, DWORD PTR _h$[ebp]
	and	edx, DWORD PTR _a$[ebp]
	or	ecx, edx
	add	ecx, DWORD PTR _f$[ebp]
	add	ecx, eax
	mov	DWORD PTR _f$[ebp], ecx
	cmp	DWORD PTR _j$[ebp], 0
	je	SHORT $LN31@Sha256_Wri
	mov	eax, DWORD PTR _W$[ebp+36]
	ror	eax, 17					; 00000011H
	mov	ecx, DWORD PTR _W$[ebp+36]
	ror	ecx, 19					; 00000013H
	xor	eax, ecx
	mov	edx, DWORD PTR _W$[ebp+36]
	shr	edx, 10					; 0000000aH
	xor	eax, edx
	add	eax, DWORD PTR _W$[ebp+16]
	mov	ecx, DWORD PTR _W$[ebp+48]
	ror	ecx, 7
	mov	edx, DWORD PTR _W$[ebp+48]
	ror	edx, 18					; 00000012H
	xor	ecx, edx
	mov	edx, DWORD PTR _W$[ebp+48]
	shr	edx, 3
	xor	ecx, edx
	add	ecx, DWORD PTR _W$[ebp+44]
	add	ecx, eax
	mov	DWORD PTR _W$[ebp+44], ecx
	mov	eax, DWORD PTR _W$[ebp+44]
	mov	DWORD PTR tv958[ebp], eax
	jmp	SHORT $LN32@Sha256_Wri
$LN31@Sha256_Wri:
	mov	ecx, DWORD PTR _W$[ebp+44]
	mov	DWORD PTR tv958[ebp], ecx
$LN32@Sha256_Wri:
	mov	edx, DWORD PTR _b$[ebp]
	ror	edx, 6
	mov	eax, DWORD PTR _b$[ebp]
	ror	eax, 11					; 0000000bH
	xor	edx, eax
	mov	ecx, DWORD PTR _b$[ebp]
	ror	ecx, 25					; 00000019H
	xor	edx, ecx
	mov	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	and	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	add	edx, eax
	mov	ecx, DWORD PTR _j$[ebp]
	add	edx, DWORD PTR _K[ecx*4+44]
	add	edx, DWORD PTR tv958[ebp]
	add	edx, DWORD PTR _e$[ebp]
	mov	DWORD PTR _e$[ebp], edx
	mov	edx, DWORD PTR _a$[ebp]
	add	edx, DWORD PTR _e$[ebp]
	mov	DWORD PTR _a$[ebp], edx
	mov	eax, DWORD PTR _f$[ebp]
	ror	eax, 2
	mov	ecx, DWORD PTR _f$[ebp]
	ror	ecx, 13					; 0000000dH
	xor	eax, ecx
	mov	edx, DWORD PTR _f$[ebp]
	ror	edx, 22					; 00000016H
	xor	eax, edx
	mov	ecx, DWORD PTR _f$[ebp]
	and	ecx, DWORD PTR _g$[ebp]
	mov	edx, DWORD PTR _f$[ebp]
	or	edx, DWORD PTR _g$[ebp]
	and	edx, DWORD PTR _h$[ebp]
	or	ecx, edx
	add	ecx, DWORD PTR _e$[ebp]
	add	ecx, eax
	mov	DWORD PTR _e$[ebp], ecx
	cmp	DWORD PTR _j$[ebp], 0
	je	SHORT $LN33@Sha256_Wri
	mov	eax, DWORD PTR _W$[ebp+40]
	ror	eax, 17					; 00000011H
	mov	ecx, DWORD PTR _W$[ebp+40]
	ror	ecx, 19					; 00000013H
	xor	eax, ecx
	mov	edx, DWORD PTR _W$[ebp+40]
	shr	edx, 10					; 0000000aH
	xor	eax, edx
	add	eax, DWORD PTR _W$[ebp+20]
	mov	ecx, DWORD PTR _W$[ebp+52]
	ror	ecx, 7
	mov	edx, DWORD PTR _W$[ebp+52]
	ror	edx, 18					; 00000012H
	xor	ecx, edx
	mov	edx, DWORD PTR _W$[ebp+52]
	shr	edx, 3
	xor	ecx, edx
	add	ecx, DWORD PTR _W$[ebp+48]
	add	ecx, eax
	mov	DWORD PTR _W$[ebp+48], ecx
	mov	eax, DWORD PTR _W$[ebp+48]
	mov	DWORD PTR tv1030[ebp], eax
	jmp	SHORT $LN34@Sha256_Wri
$LN33@Sha256_Wri:
	mov	ecx, DWORD PTR _W$[ebp+48]
	mov	DWORD PTR tv1030[ebp], ecx
$LN34@Sha256_Wri:
	mov	edx, DWORD PTR _a$[ebp]
	ror	edx, 6
	mov	eax, DWORD PTR _a$[ebp]
	ror	eax, 11					; 0000000bH
	xor	edx, eax
	mov	ecx, DWORD PTR _a$[ebp]
	ror	ecx, 25					; 00000019H
	xor	edx, ecx
	mov	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	and	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	add	edx, eax
	mov	ecx, DWORD PTR _j$[ebp]
	add	edx, DWORD PTR _K[ecx*4+48]
	add	edx, DWORD PTR tv1030[ebp]
	add	edx, DWORD PTR _d$[ebp]
	mov	DWORD PTR _d$[ebp], edx
	mov	edx, DWORD PTR _h$[ebp]
	add	edx, DWORD PTR _d$[ebp]
	mov	DWORD PTR _h$[ebp], edx
	mov	eax, DWORD PTR _e$[ebp]
	ror	eax, 2
	mov	ecx, DWORD PTR _e$[ebp]
	ror	ecx, 13					; 0000000dH
	xor	eax, ecx
	mov	edx, DWORD PTR _e$[ebp]
	ror	edx, 22					; 00000016H
	xor	eax, edx
	mov	ecx, DWORD PTR _e$[ebp]
	and	ecx, DWORD PTR _f$[ebp]
	mov	edx, DWORD PTR _e$[ebp]
	or	edx, DWORD PTR _f$[ebp]
	and	edx, DWORD PTR _g$[ebp]
	or	ecx, edx
	add	ecx, DWORD PTR _d$[ebp]
	add	ecx, eax
	mov	DWORD PTR _d$[ebp], ecx
	cmp	DWORD PTR _j$[ebp], 0
	je	SHORT $LN35@Sha256_Wri
	mov	eax, DWORD PTR _W$[ebp+44]
	ror	eax, 17					; 00000011H
	mov	ecx, DWORD PTR _W$[ebp+44]
	ror	ecx, 19					; 00000013H
	xor	eax, ecx
	mov	edx, DWORD PTR _W$[ebp+44]
	shr	edx, 10					; 0000000aH
	xor	eax, edx
	add	eax, DWORD PTR _W$[ebp+24]
	mov	ecx, DWORD PTR _W$[ebp+56]
	ror	ecx, 7
	mov	edx, DWORD PTR _W$[ebp+56]
	ror	edx, 18					; 00000012H
	xor	ecx, edx
	mov	edx, DWORD PTR _W$[ebp+56]
	shr	edx, 3
	xor	ecx, edx
	add	ecx, DWORD PTR _W$[ebp+52]
	add	ecx, eax
	mov	DWORD PTR _W$[ebp+52], ecx
	mov	eax, DWORD PTR _W$[ebp+52]
	mov	DWORD PTR tv1102[ebp], eax
	jmp	SHORT $LN36@Sha256_Wri
$LN35@Sha256_Wri:
	mov	ecx, DWORD PTR _W$[ebp+52]
	mov	DWORD PTR tv1102[ebp], ecx
$LN36@Sha256_Wri:
	mov	edx, DWORD PTR _h$[ebp]
	ror	edx, 6
	mov	eax, DWORD PTR _h$[ebp]
	ror	eax, 11					; 0000000bH
	xor	edx, eax
	mov	ecx, DWORD PTR _h$[ebp]
	ror	ecx, 25					; 00000019H
	xor	edx, ecx
	mov	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	and	eax, DWORD PTR _h$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	add	edx, eax
	mov	ecx, DWORD PTR _j$[ebp]
	add	edx, DWORD PTR _K[ecx*4+52]
	add	edx, DWORD PTR tv1102[ebp]
	add	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR _c$[ebp], edx
	mov	edx, DWORD PTR _g$[ebp]
	add	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR _g$[ebp], edx
	mov	eax, DWORD PTR _d$[ebp]
	ror	eax, 2
	mov	ecx, DWORD PTR _d$[ebp]
	ror	ecx, 13					; 0000000dH
	xor	eax, ecx
	mov	edx, DWORD PTR _d$[ebp]
	ror	edx, 22					; 00000016H
	xor	eax, edx
	mov	ecx, DWORD PTR _d$[ebp]
	and	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR _d$[ebp]
	or	edx, DWORD PTR _e$[ebp]
	and	edx, DWORD PTR _f$[ebp]
	or	ecx, edx
	add	ecx, DWORD PTR _c$[ebp]
	add	ecx, eax
	mov	DWORD PTR _c$[ebp], ecx
	cmp	DWORD PTR _j$[ebp], 0
	je	SHORT $LN37@Sha256_Wri
	mov	eax, DWORD PTR _W$[ebp+48]
	ror	eax, 17					; 00000011H
	mov	ecx, DWORD PTR _W$[ebp+48]
	ror	ecx, 19					; 00000013H
	xor	eax, ecx
	mov	edx, DWORD PTR _W$[ebp+48]
	shr	edx, 10					; 0000000aH
	xor	eax, edx
	add	eax, DWORD PTR _W$[ebp+28]
	mov	ecx, DWORD PTR _W$[ebp+60]
	ror	ecx, 7
	mov	edx, DWORD PTR _W$[ebp+60]
	ror	edx, 18					; 00000012H
	xor	ecx, edx
	mov	edx, DWORD PTR _W$[ebp+60]
	shr	edx, 3
	xor	ecx, edx
	add	ecx, DWORD PTR _W$[ebp+56]
	add	ecx, eax
	mov	DWORD PTR _W$[ebp+56], ecx
	mov	eax, DWORD PTR _W$[ebp+56]
	mov	DWORD PTR tv1174[ebp], eax
	jmp	SHORT $LN38@Sha256_Wri
$LN37@Sha256_Wri:
	mov	ecx, DWORD PTR _W$[ebp+56]
	mov	DWORD PTR tv1174[ebp], ecx
$LN38@Sha256_Wri:
	mov	edx, DWORD PTR _g$[ebp]
	ror	edx, 6
	mov	eax, DWORD PTR _g$[ebp]
	ror	eax, 11					; 0000000bH
	xor	edx, eax
	mov	ecx, DWORD PTR _g$[ebp]
	ror	ecx, 25					; 00000019H
	xor	edx, ecx
	mov	eax, DWORD PTR _h$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	and	eax, DWORD PTR _g$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	add	edx, eax
	mov	ecx, DWORD PTR _j$[ebp]
	add	edx, DWORD PTR _K[ecx*4+56]
	add	edx, DWORD PTR tv1174[ebp]
	add	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _b$[ebp], edx
	mov	edx, DWORD PTR _f$[ebp]
	add	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _f$[ebp], edx
	mov	eax, DWORD PTR _c$[ebp]
	ror	eax, 2
	mov	ecx, DWORD PTR _c$[ebp]
	ror	ecx, 13					; 0000000dH
	xor	eax, ecx
	mov	edx, DWORD PTR _c$[ebp]
	ror	edx, 22					; 00000016H
	xor	eax, edx
	mov	ecx, DWORD PTR _c$[ebp]
	and	ecx, DWORD PTR _d$[ebp]
	mov	edx, DWORD PTR _c$[ebp]
	or	edx, DWORD PTR _d$[ebp]
	and	edx, DWORD PTR _e$[ebp]
	or	ecx, edx
	add	ecx, DWORD PTR _b$[ebp]
	add	ecx, eax
	mov	DWORD PTR _b$[ebp], ecx
	cmp	DWORD PTR _j$[ebp], 0
	je	SHORT $LN39@Sha256_Wri
	mov	eax, DWORD PTR _W$[ebp+52]
	ror	eax, 17					; 00000011H
	mov	ecx, DWORD PTR _W$[ebp+52]
	ror	ecx, 19					; 00000013H
	xor	eax, ecx
	mov	edx, DWORD PTR _W$[ebp+52]
	shr	edx, 10					; 0000000aH
	xor	eax, edx
	add	eax, DWORD PTR _W$[ebp+32]
	mov	ecx, DWORD PTR _W$[ebp]
	ror	ecx, 7
	mov	edx, DWORD PTR _W$[ebp]
	ror	edx, 18					; 00000012H
	xor	ecx, edx
	mov	edx, DWORD PTR _W$[ebp]
	shr	edx, 3
	xor	ecx, edx
	add	ecx, DWORD PTR _W$[ebp+60]
	add	ecx, eax
	mov	DWORD PTR _W$[ebp+60], ecx
	mov	eax, DWORD PTR _W$[ebp+60]
	mov	DWORD PTR tv1243[ebp], eax
	jmp	SHORT $LN40@Sha256_Wri
$LN39@Sha256_Wri:
	mov	ecx, DWORD PTR _W$[ebp+60]
	mov	DWORD PTR tv1243[ebp], ecx
$LN40@Sha256_Wri:
	mov	edx, DWORD PTR _f$[ebp]
	ror	edx, 6
	mov	eax, DWORD PTR _f$[ebp]
	ror	eax, 11					; 0000000bH
	xor	edx, eax
	mov	ecx, DWORD PTR _f$[ebp]
	ror	ecx, 25					; 00000019H
	xor	edx, ecx
	mov	eax, DWORD PTR _g$[ebp]
	xor	eax, DWORD PTR _h$[ebp]
	and	eax, DWORD PTR _f$[ebp]
	xor	eax, DWORD PTR _h$[ebp]
	add	edx, eax
	mov	ecx, DWORD PTR _j$[ebp]
	add	edx, DWORD PTR _K[ecx*4+60]
	add	edx, DWORD PTR tv1243[ebp]
	add	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR _a$[ebp], edx
	mov	edx, DWORD PTR _e$[ebp]
	add	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR _e$[ebp], edx
	mov	eax, DWORD PTR _b$[ebp]
	ror	eax, 2
	mov	ecx, DWORD PTR _b$[ebp]
	ror	ecx, 13					; 0000000dH
	xor	eax, ecx
	mov	edx, DWORD PTR _b$[ebp]
	ror	edx, 22					; 00000016H
	xor	eax, edx
	mov	ecx, DWORD PTR _b$[ebp]
	and	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	or	edx, DWORD PTR _c$[ebp]
	and	edx, DWORD PTR _d$[ebp]
	or	ecx, edx
	add	ecx, DWORD PTR _a$[ebp]
	add	ecx, eax
	mov	DWORD PTR _a$[ebp], ecx
; Line 143
	jmp	$LN2@Sha256_Wri
$LN1@Sha256_Wri:
; Line 146
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 147
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 148
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 149
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, DWORD PTR _d$[ebp]
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+12], ecx
; Line 150
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+16], ecx
; Line 151
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, DWORD PTR _f$[ebp]
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+20], ecx
; Line 152
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	add	ecx, DWORD PTR _g$[ebp]
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+24], ecx
; Line 153
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	add	ecx, DWORD PTR _h$[ebp]
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+28], ecx
; Line 162
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN43@Sha256_Wri
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN43@Sha256_Wri:
	DD	1
	DD	$LN42@Sha256_Wri
$LN42@Sha256_Wri:
	DD	-72					; ffffffb8H
	DD	64					; 00000040H
	DD	$LN41@Sha256_Wri
$LN41@Sha256_Wri:
	DB	87					; 00000057H
	DB	0
_Sha256_WriteByteBlock@4 ENDP
_TEXT	ENDS
PUBLIC	_Sha256_Final@8
EXTRN	__aullshr:PROC
EXTRN	__allshl:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_v$3566 = -20						; size = 4
_numBits$3556 = -16					; size = 8
_i$ = -8						; size = 4
_pos$ = -4						; size = 4
_p$ = 8							; size = 4
_digest$ = 12						; size = 4
_Sha256_Final@8 PROC
; Line 207
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 208
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	and	ecx, 63					; 0000003fH
	mov	DWORD PTR _pos$[ebp], ecx
; Line 211
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, DWORD PTR _pos$[ebp]
	mov	BYTE PTR [edx+40], 128			; 00000080H
	mov	eax, DWORD PTR _pos$[ebp]
	add	eax, 1
	mov	DWORD PTR _pos$[ebp], eax
$LN6@Sha256_Fin:
; Line 213
	cmp	DWORD PTR _pos$[ebp], 56		; 00000038H
	je	SHORT $LN5@Sha256_Fin
; Line 215
	mov	ecx, DWORD PTR _pos$[ebp]
	and	ecx, 63					; 0000003fH
	mov	DWORD PTR _pos$[ebp], ecx
; Line 216
	jne	SHORT $LN4@Sha256_Fin
; Line 217
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_Sha256_WriteByteBlock@4
$LN4@Sha256_Fin:
; Line 218
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR _pos$[ebp]
	mov	BYTE PTR [eax+40], 0
	mov	ecx, DWORD PTR _pos$[ebp]
	add	ecx, 1
	mov	DWORD PTR _pos$[ebp], ecx
; Line 219
	jmp	SHORT $LN6@Sha256_Fin
$LN5@Sha256_Fin:
; Line 222
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	edx, DWORD PTR [edx+36]
	mov	cl, 3
	call	__allshl
	mov	DWORD PTR _numBits$3556[ebp], eax
	mov	DWORD PTR _numBits$3556[ebp+4], edx
; Line 223
	mov	eax, DWORD PTR _numBits$3556[ebp]
	mov	edx, DWORD PTR _numBits$3556[ebp+4]
	mov	cl, 32					; 00000020H
	call	__aullshr
	bswap	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+96], eax
; Line 224
	mov	edx, DWORD PTR _numBits$3556[ebp]
	bswap	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+100], edx
; Line 227
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_Sha256_WriteByteBlock@4
; Line 229
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@Sha256_Fin
$LN2@Sha256_Fin:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN3@Sha256_Fin:
	cmp	DWORD PTR _i$[ebp], 8
	jae	SHORT $LN1@Sha256_Fin
; Line 231
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _v$3566[ebp], edx
; Line 232
	mov	eax, DWORD PTR _v$3566[ebp]
	bswap	eax
	mov	ecx, DWORD PTR _digest$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 233
	mov	edx, DWORD PTR _digest$[ebp]
	add	edx, 4
	mov	DWORD PTR _digest$[ebp], edx
; Line 234
	jmp	SHORT $LN2@Sha256_Fin
$LN1@Sha256_Fin:
; Line 236
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_Sha256_Init@4
; Line 237
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_Sha256_Final@8 ENDP
_TEXT	ENDS
END
