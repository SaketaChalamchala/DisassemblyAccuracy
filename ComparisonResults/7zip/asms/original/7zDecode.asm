; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\CPP\7zip\Archive\7z\7zDecode.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??C?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator->
PUBLIC	?SetRatioInfo@CDecProgress@N7z@NArchive@@UAGJPB_K0@Z ; NArchive::N7z::CDecProgress::SetRatioInfo
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zdecode.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
tv68 = -4						; size = 4
_this$ = 8						; size = 4
___formal$ = 12						; size = 4
_outSize$ = 16						; size = 4
?SetRatioInfo@CDecProgress@N7z@NArchive@@UAGJPB_K0@Z PROC ; NArchive::N7z::CDecProgress::SetRatioInfo
; Line 27
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 28
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??C?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator->
	mov	DWORD PTR tv68[ebp], eax
	mov	esi, esp
	mov	eax, DWORD PTR _outSize$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR tv68[ebp]
	push	ecx
	mov	edx, DWORD PTR tv68[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 29
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetRatioInfo@CDecProgress@N7z@NArchive@@UAGJPB_K0@Z ENDP ; NArchive::N7z::CDecProgress::SetRatioInfo
_TEXT	ENDS
PUBLIC	??1CBindInfoEx@N7z@NArchive@@QAE@XZ		; NArchive::N7z::CBindInfoEx::~CBindInfoEx
PUBLIC	??0?$CMyComPtr@UIUnknown@@@@QAE@XZ		; CMyComPtr<IUnknown>::CMyComPtr<IUnknown>
PUBLIC	??0CBindInfoEx@N7z@NArchive@@QAE@XZ		; NArchive::N7z::CBindInfoEx::CBindInfoEx
PUBLIC	??0CDecoder@N7z@NArchive@@QAE@_N@Z		; NArchive::N7z::CDecoder::CDecoder
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
xdata$x	SEGMENT
__unwindtable$??0CDecoder@N7z@NArchive@@QAE@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CDecoder@N7z@NArchive@@QAE@_N@Z$0
__ehfuncinfo$??0CDecoder@N7z@NArchive@@QAE@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CDecoder@N7z@NArchive@@QAE@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_useMixerMT$ = 8					; size = 1
??0CDecoder@N7z@NArchive@@QAE@_N@Z PROC			; NArchive::N7z::CDecoder::CDecoder
; _this$ = ecx
; Line 115
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CDecoder@N7z@NArchive@@QAE@_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CBindInfoEx@N7z@NArchive@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR _useMixerMT$[ebp]
	mov	BYTE PTR [ecx+80], dl
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??0?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::CMyComPtr<IUnknown>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0CDecoder@N7z@NArchive@@QAE@_N@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1CBindInfoEx@N7z@NArchive@@QAE@XZ
__ehhandler$??0CDecoder@N7z@NArchive@@QAE@_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CDecoder@N7z@NArchive@@QAE@_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CDecoder@N7z@NArchive@@QAE@_N@Z ENDP			; NArchive::N7z::CDecoder::CDecoder
PUBLIC	??1CBindInfo@NCoderMixer2@@QAE@XZ		; NCoderMixer2::CBindInfo::~CBindInfo
PUBLIC	??0?$CRecordVector@_K@@QAE@XZ			; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>
PUBLIC	??0CBindInfo@NCoderMixer2@@QAE@XZ		; NCoderMixer2::CBindInfo::CBindInfo
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CBindInfoEx@N7z@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CBindInfoEx@N7z@NArchive@@QAE@XZ$0
__ehfuncinfo$??0CBindInfoEx@N7z@NArchive@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CBindInfoEx@N7z@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CBindInfoEx@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CBindInfoEx@N7z@NArchive@@QAE@XZ PROC		; NArchive::N7z::CBindInfoEx::CBindInfoEx, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CBindInfoEx@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CBindInfo@NCoderMixer2@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??0?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CBindInfoEx@N7z@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CBindInfo@NCoderMixer2@@QAE@XZ
__ehhandler$??0CBindInfoEx@N7z@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CBindInfoEx@N7z@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CBindInfoEx@N7z@NArchive@@QAE@XZ ENDP		; NArchive::N7z::CBindInfoEx::CBindInfoEx
PUBLIC	??1?$CRecordVector@I@@QAE@XZ			; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
PUBLIC	??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CBond>::~CRecordVector<NCoderMixer2::CBond>
PUBLIC	??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::~CRecordVector<NCoderMixer2::CCoderStreamsInfo>
PUBLIC	??0?$CRecordVector@I@@QAE@XZ			; CRecordVector<unsigned int>::CRecordVector<unsigned int>
PUBLIC	??0?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CBond>::CRecordVector<NCoderMixer2::CBond>
PUBLIC	??0?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::CRecordVector<NCoderMixer2::CCoderStreamsInfo>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CBindInfo@NCoderMixer2@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$3
__ehfuncinfo$??0CBindInfo@NCoderMixer2@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0CBindInfo@NCoderMixer2@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CBindInfo@NCoderMixer2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CBindInfo@NCoderMixer2@@QAE@XZ PROC			; NCoderMixer2::CBindInfo::CBindInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CBindInfo@NCoderMixer2@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::CRecordVector<NCoderMixer2::CCoderStreamsInfo>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CBond>::CRecordVector<NCoderMixer2::CBond>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??0?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??0?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::CRecordVector<unsigned int>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::~CRecordVector<NCoderMixer2::CCoderStreamsInfo>
__unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CBond>::~CRecordVector<NCoderMixer2::CBond>
__unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
__unwindfunclet$??0CBindInfo@NCoderMixer2@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	jmp	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
__ehhandler$??0CBindInfo@NCoderMixer2@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CBindInfo@NCoderMixer2@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CBindInfo@NCoderMixer2@@QAE@XZ ENDP			; NCoderMixer2::CBindInfo::CBindInfo
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CBindInfo@NCoderMixer2@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$3
__ehfuncinfo$??1CBindInfo@NCoderMixer2@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??1CBindInfo@NCoderMixer2@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CBindInfo@NCoderMixer2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CBindInfo@NCoderMixer2@@QAE@XZ PROC			; NCoderMixer2::CBindInfo::~CBindInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CBindInfo@NCoderMixer2@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CBond>::~CRecordVector<NCoderMixer2::CBond>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::~CRecordVector<NCoderMixer2::CCoderStreamsInfo>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::~CRecordVector<NCoderMixer2::CCoderStreamsInfo>
__unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CBond>::~CRecordVector<NCoderMixer2::CBond>
__unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
__unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	jmp	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
__ehhandler$??1CBindInfo@NCoderMixer2@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CBindInfo@NCoderMixer2@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CBindInfo@NCoderMixer2@@QAE@XZ ENDP			; NCoderMixer2::CBindInfo::~CBindInfo
PUBLIC	??1?$CRecordVector@_K@@QAE@XZ			; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CBindInfoEx@N7z@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CBindInfoEx@N7z@NArchive@@QAE@XZ$0
__ehfuncinfo$??1CBindInfoEx@N7z@NArchive@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CBindInfoEx@N7z@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CBindInfoEx@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CBindInfoEx@N7z@NArchive@@QAE@XZ PROC		; NArchive::N7z::CBindInfoEx::~CBindInfoEx, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CBindInfoEx@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CBindInfo@NCoderMixer2@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CBindInfoEx@N7z@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CBindInfo@NCoderMixer2@@QAE@XZ
__ehhandler$??1CBindInfoEx@N7z@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CBindInfoEx@N7z@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CBindInfoEx@N7z@NArchive@@QAE@XZ ENDP		; NArchive::N7z::CBindInfoEx::~CBindInfoEx
PUBLIC	??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock
PUBLIC	??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->
PUBLIC	??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z ; NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock
PUBLIC	?Read@CLockedSequentialInStreamMT@N7z@NArchive@@UAGJPAXIPAI@Z ; NArchive::N7z::CLockedSequentialInStreamMT::Read
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv132 = -56						; size = 4
tv79 = -52						; size = 4
tv160 = -48						; size = 4
tv159 = -44						; size = 4
$T74776 = -40						; size = 4
$T74775 = -36						; size = 4
_res$ = -32						; size = 4
_realProcessedSize$ = -24				; size = 4
___result_$73031 = -16					; size = 4
_lock$ = -8						; size = 4
_this$ = 8						; size = 4
_data$ = 12						; size = 4
_size$ = 16						; size = 4
_processedSize$ = 20					; size = 4
?Read@CLockedSequentialInStreamMT@N7z@NArchive@@UAGJPAXIPAI@Z PROC ; NArchive::N7z::CLockedSequentialInStreamMT::Read
; Line 156
	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 157
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 24					; 00000018H
	push	ecx
	lea	ecx, DWORD PTR _lock$[ebp]
	call	??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z ; NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock
; Line 159
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv159[ebp], ecx
	mov	DWORD PTR tv160[ebp], eax
	mov	edx, DWORD PTR tv159[ebp]
	mov	eax, DWORD PTR tv160[ebp]
	mov	ecx, DWORD PTR [edx+16]
	cmp	ecx, DWORD PTR [eax+16]
	jne	SHORT $LN6@Read
	mov	edx, DWORD PTR tv159[ebp]
	mov	eax, DWORD PTR tv160[ebp]
	mov	ecx, DWORD PTR [edx+20]
	cmp	ecx, DWORD PTR [eax+20]
	je	SHORT $LN3@Read
$LN6@Read:
; Line 161
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	add	ecx, 8
	call	??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->
	mov	DWORD PTR tv79[ebp], eax
	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR [eax+16]
	push	edx
	mov	eax, DWORD PTR tv79[ebp]
	push	eax
	mov	ecx, DWORD PTR tv79[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result_$73031[ebp], eax
	cmp	DWORD PTR ___result_$73031[ebp], 0
	je	SHORT $LN2@Read
	mov	ecx, DWORD PTR ___result_$73031[ebp]
	mov	DWORD PTR $T74775[ebp], ecx
	lea	ecx, DWORD PTR _lock$[ebp]
	call	??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock
	mov	eax, DWORD PTR $T74775[ebp]
	jmp	$LN4@Read
$LN2@Read:
; Line 162
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	ecx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], ecx
$LN3@Read:
; Line 165
	mov	DWORD PTR _realProcessedSize$[ebp], 0
; Line 166
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	add	ecx, 8
	call	??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->
	mov	DWORD PTR tv132[ebp], eax
	mov	esi, esp
	lea	eax, DWORD PTR _realProcessedSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	mov	eax, DWORD PTR tv132[ebp]
	push	eax
	mov	ecx, DWORD PTR tv132[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _res$[ebp], eax
; Line 167
	mov	ecx, DWORD PTR _realProcessedSize$[ebp]
	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+16]
	adc	edx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], ecx
	mov	DWORD PTR [eax+20], edx
; Line 168
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], ecx
	mov	eax, DWORD PTR [eax+20]
	mov	DWORD PTR [edx+20], eax
; Line 169
	cmp	DWORD PTR _processedSize$[ebp], 0
	je	SHORT $LN1@Read
; Line 170
	mov	ecx, DWORD PTR _processedSize$[ebp]
	mov	edx, DWORD PTR _realProcessedSize$[ebp]
	mov	DWORD PTR [ecx], edx
$LN1@Read:
; Line 171
	mov	eax, DWORD PTR _res$[ebp]
	mov	DWORD PTR $T74776[ebp], eax
	lea	ecx, DWORD PTR _lock$[ebp]
	call	??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock
	mov	eax, DWORD PTR $T74776[ebp]
$LN4@Read:
; Line 172
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@Read
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	1
$LN10@Read:
	DD	2
	DD	$LN9@Read
$LN9@Read:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN7@Read
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN8@Read
$LN8@Read:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN7@Read:
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
?Read@CLockedSequentialInStreamMT@N7z@NArchive@@UAGJPAXIPAI@Z ENDP ; NArchive::N7z::CLockedSequentialInStreamMT::Read
_TEXT	ENDS
PUBLIC	?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ; NWindows::NSynchronization::CCriticalSection::Enter
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_object$ = 8						; size = 4
??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z PROC ; NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\synchronization.h
; Line 158
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _object$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ; NWindows::NSynchronization::CCriticalSection::Enter
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z ENDP ; NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock
_TEXT	ENDS
EXTRN	__imp__EnterCriticalSection@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ PROC ; NWindows::NSynchronization::CCriticalSection::Enter, COMDAT
; _this$ = ecx
; Line 149
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	DWORD PTR __imp__EnterCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ENDP ; NWindows::NSynchronization::CCriticalSection::Enter
_TEXT	ENDS
PUBLIC	?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ ; NWindows::NSynchronization::CCriticalSectionLock::Unlock
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ PROC ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock, COMDAT
; _this$ = ecx
; Line 159
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ ; NWindows::NSynchronization::CCriticalSectionLock::Unlock
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ENDP ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock
_TEXT	ENDS
PUBLIC	?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ; NWindows::NSynchronization::CCriticalSection::Leave
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ PROC ; NWindows::NSynchronization::CCriticalSectionLock::Unlock, COMDAT
; _this$ = ecx
; Line 156
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ; NWindows::NSynchronization::CCriticalSection::Leave
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ ENDP ; NWindows::NSynchronization::CCriticalSectionLock::Unlock
_TEXT	ENDS
EXTRN	__imp__LeaveCriticalSection@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ PROC ; NWindows::NSynchronization::CCriticalSection::Leave, COMDAT
; _this$ = ecx
; Line 150
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	DWORD PTR __imp__LeaveCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ENDP ; NWindows::NSynchronization::CCriticalSection::Leave
_TEXT	ENDS
PUBLIC	?Read@CLockedSequentialInStreamST@N7z@NArchive@@UAGJPAXIPAI@Z ; NArchive::N7z::CLockedSequentialInStreamST::Read
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv94 = -36						; size = 4
tv73 = -32						; size = 4
tv151 = -28						; size = 4
tv150 = -24						; size = 4
_res$ = -20						; size = 4
_realProcessedSize$ = -12				; size = 4
___result_$73103 = -4					; size = 4
_this$ = 8						; size = 4
_data$ = 12						; size = 4
_size$ = 16						; size = 4
_processedSize$ = 20					; size = 4
?Read@CLockedSequentialInStreamST@N7z@NArchive@@UAGJPAXIPAI@Z PROC ; NArchive::N7z::CLockedSequentialInStreamST::Read
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zdecode.cpp
; Line 200
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 201
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv150[ebp], edx
	mov	DWORD PTR tv151[ebp], ecx
	mov	eax, DWORD PTR tv150[ebp]
	mov	ecx, DWORD PTR tv151[ebp]
	mov	edx, DWORD PTR [eax+16]
	cmp	edx, DWORD PTR [ecx+16]
	jne	SHORT $LN6@Read@2
	mov	eax, DWORD PTR tv150[ebp]
	mov	ecx, DWORD PTR tv151[ebp]
	mov	edx, DWORD PTR [eax+20]
	cmp	edx, DWORD PTR [ecx+20]
	je	SHORT $LN3@Read@2
$LN6@Read@2:
; Line 203
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 8
	call	??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->
	mov	DWORD PTR tv73[ebp], eax
	mov	esi, esp
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	eax, DWORD PTR [ecx+16]
	push	eax
	mov	ecx, DWORD PTR tv73[ebp]
	push	ecx
	mov	edx, DWORD PTR tv73[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result_$73103[ebp], eax
	cmp	DWORD PTR ___result_$73103[ebp], 0
	je	SHORT $LN2@Read@2
	mov	eax, DWORD PTR ___result_$73103[ebp]
	jmp	$LN4@Read@2
$LN2@Read@2:
; Line 204
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	ecx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], ecx
$LN3@Read@2:
; Line 207
	mov	DWORD PTR _realProcessedSize$[ebp], 0
; Line 208
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	add	ecx, 8
	call	??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->
	mov	DWORD PTR tv94[ebp], eax
	mov	esi, esp
	lea	eax, DWORD PTR _realProcessedSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	mov	eax, DWORD PTR tv94[ebp]
	push	eax
	mov	ecx, DWORD PTR tv94[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _res$[ebp], eax
; Line 209
	mov	ecx, DWORD PTR _realProcessedSize$[ebp]
	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+16]
	adc	edx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], ecx
	mov	DWORD PTR [eax+20], edx
; Line 210
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], ecx
	mov	eax, DWORD PTR [eax+20]
	mov	DWORD PTR [edx+20], eax
; Line 211
	cmp	DWORD PTR _processedSize$[ebp], 0
	je	SHORT $LN1@Read@2
; Line 212
	mov	ecx, DWORD PTR _processedSize$[ebp]
	mov	edx, DWORD PTR _realProcessedSize$[ebp]
	mov	DWORD PTR [ecx], edx
$LN1@Read@2:
; Line 213
	mov	eax, DWORD PTR _res$[ebp]
$LN4@Read@2:
; Line 214
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@Read@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN9@Read@2:
	DD	1
	DD	$LN8@Read@2
$LN8@Read@2:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN7@Read@2
$LN7@Read@2:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
?Read@CLockedSequentialInStreamST@N7z@NArchive@@UAGJPAXIPAI@Z ENDP ; NArchive::N7z::CLockedSequentialInStreamST::Read
_TEXT	ENDS
PUBLIC	??1?$CObjArray@PAUISequentialInStream@@@@QAE@XZ	; CObjArray<ISequentialInStream *>::~CObjArray<ISequentialInStream *>
PUBLIC	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ	; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
PUBLIC	??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *
PUBLIC	??4?$CMyComPtr@UICompressProgressInfo@@@@QAEPAUICompressProgressInfo@@PAU1@@Z ; CMyComPtr<ICompressProgressInfo>::operator=
PUBLIC	??0CDecProgress@N7z@NArchive@@QAE@PAUICompressProgressInfo@@@Z ; NArchive::N7z::CDecProgress::CDecProgress
PUBLIC	??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ	; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>
PUBLIC	??B?$CObjArray@PAUISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ ; CObjArray<ISequentialInStream *>::operator ISequentialInStream * *
PUBLIC	??A?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@I@Z ; CObjectVector<CMyComPtr<ISequentialInStream> >::operator[]
PUBLIC	??0?$CObjArray@PAUISequentialInStream@@@@QAE@I@Z ; CObjArray<ISequentialInStream *>::CObjArray<ISequentialInStream *>
PUBLIC	?Size@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QBEIXZ ; CObjectVector<CMyComPtr<ISequentialInStream> >::Size
PUBLIC	?Init@CLimitedSequentialInStream@@QAEX_K@Z	; CLimitedSequentialInStream::Init
PUBLIC	?SetStream@CLimitedSequentialInStream@@QAEXPAUISequentialInStream@@@Z ; CLimitedSequentialInStream::SetStream
PUBLIC	??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
PUBLIC	?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@XZ ; CObjectVector<CMyComPtr<ISequentialInStream> >::AddNew
PUBLIC	??0CLimitedSequentialInStream@@QAE@XZ		; CLimitedSequentialInStream::CLimitedSequentialInStream
PUBLIC	?Init@CLockedSequentialInStreamST@N7z@NArchive@@QAEXPAUCLockedInStream@23@_K@Z ; NArchive::N7z::CLockedSequentialInStreamST::Init
PUBLIC	??0CLockedSequentialInStreamST@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CLockedSequentialInStreamST::CLockedSequentialInStreamST
PUBLIC	?Init@CLockedSequentialInStreamMT@N7z@NArchive@@QAEXPAUCLockedInStream@23@_K@Z ; NArchive::N7z::CLockedSequentialInStreamMT::Init
PUBLIC	??0CLockedSequentialInStreamMT@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CLockedSequentialInStreamMT::CLockedSequentialInStreamMT
PUBLIC	??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=
PUBLIC	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ	; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
PUBLIC	??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ	; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
PUBLIC	??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ; CMyComPtr<IInStream>::operator=
PUBLIC	??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialInStream> >::~CObjectVector<CMyComPtr<ISequentialInStream> >
PUBLIC	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ		; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
PUBLIC	?Size@?$CObjArray2@I@@QBEIXZ			; CObjArray2<unsigned int>::Size
PUBLIC	??0?$CMyComPtr@UIUnknown@@@@QAE@PAUIUnknown@@@Z	; CMyComPtr<IUnknown>::CMyComPtr<IUnknown>
PUBLIC	??0CLockedInStream@N7z@NArchive@@QAE@XZ		; NArchive::N7z::CLockedInStream::CLockedInStream
PUBLIC	??0?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialInStream> >::CObjectVector<CMyComPtr<ISequentialInStream> >
PUBLIC	??B?$CObjArray@_K@@QAEPA_KXZ			; CObjArray<unsigned __int64>::operator unsigned __int64 *
PUBLIC	??1?$CObjArray@_K@@QAE@XZ			; CObjArray<unsigned __int64>::~CObjArray<unsigned __int64>
PUBLIC	??1?$CObjArray@PB_K@@QAE@XZ			; CObjArray<unsigned __int64 const *>::~CObjArray<unsigned __int64 const *>
PUBLIC	?Find_in_PackStreams@CFolder@N7z@NArchive@@QBEHI@Z ; NArchive::N7z::CFolder::Find_in_PackStreams
PUBLIC	??B?$CObjArray@PB_K@@QAEPAPB_KXZ		; CObjArray<unsigned __int64 const *>::operator unsigned __int64 const * *
PUBLIC	??B?$CObjArray2@UCBond@N7z@NArchive@@@@QAEPAUCBond@N7z@NArchive@@XZ ; CObjArray2<NArchive::N7z::CBond>::operator NArchive::N7z::CBond *
PUBLIC	?FindBond_for_PackStream@CFolder@N7z@NArchive@@QBEHI@Z ; NArchive::N7z::CFolder::FindBond_for_PackStream
PUBLIC	??0?$CObjArray@PB_K@@QAE@I@Z			; CObjArray<unsigned __int64 const *>::CObjArray<unsigned __int64 const *>
PUBLIC	??0?$CObjArray@_K@@QAE@I@Z			; CObjArray<unsigned __int64>::CObjArray<unsigned __int64>
PUBLIC	??1?$CMyComPtr@UICompressSetFinishMode@@@@QAE@XZ ; CMyComPtr<ICompressSetFinishMode>::~CMyComPtr<ICompressSetFinishMode>
PUBLIC	?BoolToInt@@YGH_N@Z				; BoolToInt
PUBLIC	??C?$CMyComPtr@UICompressSetFinishMode@@@@QBEPAUICompressSetFinishMode@@XZ ; CMyComPtr<ICompressSetFinishMode>::operator->
PUBLIC	??B?$CMyComPtr@UICompressSetFinishMode@@@@QBEPAUICompressSetFinishMode@@XZ ; CMyComPtr<ICompressSetFinishMode>::operator ICompressSetFinishMode *
PUBLIC	??I?$CMyComPtr@UICompressSetFinishMode@@@@QAEPAPAUICompressSetFinishMode@@XZ ; CMyComPtr<ICompressSetFinishMode>::operator&
PUBLIC	??0?$CMyComPtr@UICompressSetFinishMode@@@@QAE@XZ ; CMyComPtr<ICompressSetFinishMode>::CMyComPtr<ICompressSetFinishMode>
PUBLIC	??1?$CBuffer@E@@QAE@XZ				; CBuffer<unsigned char>::~CBuffer<unsigned char>
PUBLIC	??C?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ ; CMyComPtr<ICryptoSetPassword>::operator->
PUBLIC	??B?$CBuffer@E@@QAEPAEXZ			; CBuffer<unsigned char>::operator unsigned char *
PUBLIC	??0?$CBuffer@E@@QAE@I@Z				; CBuffer<unsigned char>::CBuffer<unsigned char>
PUBLIC	?Len@UString@@QBEIXZ				; UString::Len
PUBLIC	??BCMyComBSTR@@QBEPB_WXZ			; CMyComBSTR::operator wchar_t const *
PUBLIC	?Empty@UString@@QAEXXZ				; UString::Empty
PUBLIC	??1CMyComBSTR@@QAE@XZ				; CMyComBSTR::~CMyComBSTR
PUBLIC	??ICMyComBSTR@@QAEPAPA_WXZ			; CMyComBSTR::operator&
PUBLIC	??0CMyComBSTR@@QAE@XZ				; CMyComBSTR::CMyComBSTR
PUBLIC	??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ	; CMyComPtr<ICryptoSetPassword>::~CMyComPtr<ICryptoSetPassword>
PUBLIC	??B?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ ; CMyComPtr<ICryptoSetPassword>::operator ICryptoSetPassword *
PUBLIC	??I?$CMyComPtr@UICryptoSetPassword@@@@QAEPAPAUICryptoSetPassword@@XZ ; CMyComPtr<ICryptoSetPassword>::operator&
PUBLIC	??0?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ	; CMyComPtr<ICryptoSetPassword>::CMyComPtr<ICryptoSetPassword>
PUBLIC	??1?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ	; CMyComPtr<ICompressSetCoderMt>::~CMyComPtr<ICompressSetCoderMt>
PUBLIC	??C?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ ; CMyComPtr<ICompressSetCoderMt>::operator->
PUBLIC	??B?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ ; CMyComPtr<ICompressSetCoderMt>::operator ICompressSetCoderMt *
PUBLIC	??I?$CMyComPtr@UICompressSetCoderMt@@@@QAEPAPAUICompressSetCoderMt@@XZ ; CMyComPtr<ICompressSetCoderMt>::operator&
PUBLIC	??0?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ	; CMyComPtr<ICompressSetCoderMt>::CMyComPtr<ICompressSetCoderMt>
PUBLIC	??B?$CBuffer@E@@QBEPBEXZ			; CBuffer<unsigned char>::operator unsigned char const *
PUBLIC	??C?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBEPAUICompressSetDecoderProperties2@@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::operator->
PUBLIC	??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::~CMyComPtr<ICompressSetDecoderProperties2>
PUBLIC	?Size@?$CBuffer@E@@QBEIXZ			; CBuffer<unsigned char>::Size
PUBLIC	??B?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBEPAUICompressSetDecoderProperties2@@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::operator ICompressSetDecoderProperties2 *
PUBLIC	??I?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAEPAPAUICompressSetDecoderProperties2@@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::operator&
PUBLIC	??0?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::CMyComPtr<ICompressSetDecoderProperties2>
PUBLIC	?GetUnknown@CCoder@NCoderMixer2@@QBEPAUIUnknown@@XZ ; NCoderMixer2::CCoder::GetUnknown
PUBLIC	??4CBindInfoEx@N7z@NArchive@@QAEAAU012@ABU012@@Z ; NArchive::N7z::CBindInfoEx::operator=
PUBLIC	??7?$CMyComPtr@UICompressCoder2@@@@QBE_NXZ	; CMyComPtr<ICompressCoder2>::operator!
PUBLIC	??7?$CMyComPtr@UICompressCoder@@@@QBE_NXZ	; CMyComPtr<ICompressCoder>::operator!
PUBLIC	?IsSimpleCoder@CCoderInfo@N7z@NArchive@@QBE_NXZ	; NArchive::N7z::CCoderInfo::IsSimpleCoder
PUBLIC	??1CCreatedCoder@@QAE@XZ			; CCreatedCoder::~CCreatedCoder
PUBLIC	??0CCreatedCoder@@QAE@XZ			; CCreatedCoder::CCreatedCoder
PUBLIC	??B?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEPAUCCoderInfo@N7z@NArchive@@XZ ; CObjArray2<NArchive::N7z::CCoderInfo>::operator NArchive::N7z::CCoderInfo *
PUBLIC	?Size@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEIXZ ; CObjArray2<NArchive::N7z::CCoderInfo>::Size
PUBLIC	??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z ; CMyComPtr<IUnknown>::operator=
PUBLIC	??0CMixerMT@NCoderMixer2@@QAE@_N@Z		; NCoderMixer2::CMixerMT::CMixerMT
PUBLIC	?Release@?$CMyComPtr@UIUnknown@@@@QAEXXZ	; CMyComPtr<IUnknown>::Release
PUBLIC	?GetFolderUnpackSize@CFolders@N7z@NArchive@@QBE_KI@Z ; NArchive::N7z::CFolders::GetFolderUnpackSize
PUBLIC	??1CFolderEx@N7z@NArchive@@QAE@XZ		; NArchive::N7z::CFolderEx::~CFolderEx
PUBLIC	?IsDecodingSupported@CFolder@N7z@NArchive@@QBE_NXZ ; NArchive::N7z::CFolder::IsDecodingSupported
PUBLIC	?ParseFolderEx@CFolders@N7z@NArchive@@QBEXIAAUCFolderEx@23@@Z ; NArchive::N7z::CFolders::ParseFolderEx
PUBLIC	??0CFolderEx@N7z@NArchive@@QAE@XZ		; NArchive::N7z::CFolderEx::CFolderEx
PUBLIC	??B?$CObjArray@I@@QBEPBIXZ			; CObjArray<unsigned int>::operator unsigned int const *
PUBLIC	??B?$CObjArray@_K@@QBEPB_KXZ			; CObjArray<unsigned __int64>::operator unsigned __int64 const *
PUBLIC	?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z ; NArchive::N7z::CDecoder::Decode
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	?GetMainUnpackStream@CMixerST@NCoderMixer2@@QAEJPBQAUISequentialInStream@@PAPAU3@@Z:PROC ; NCoderMixer2::CMixerST::GetMainUnpackStream
EXTRN	?Is_PackSize_Correct_for_Coder@CMixer@NCoderMixer2@@QAE_NI@Z:PROC ; NCoderMixer2::CMixer::Is_PackSize_Correct_for_Coder
EXTRN	?IsThere_ExternalCoder_in_PackTree@CMixer@NCoderMixer2@@QAE_NI@Z:PROC ; NCoderMixer2::CMixer::IsThere_ExternalCoder_in_PackTree
EXTRN	_IID_ICompressSetFinishMode:BYTE
EXTRN	??4UString@@QAEAAV0@PB_W@Z:PROC			; UString::operator=
EXTRN	_IID_ICryptoSetPassword:BYTE
EXTRN	_IID_ICompressSetCoderMt:BYTE
EXTRN	_IID_ICompressSetDecoderProperties2:BYTE
EXTRN	?CreateCoder@@YGJ_K_NAAUCCreatedCoder@@@Z:PROC	; CreateCoder
EXTRN	??0CMixerST@NCoderMixer2@@QAE@_N@Z:PROC		; NCoderMixer2::CMixerST::CMixerST
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	?CalcMapsAndCheck@CBindInfo@NCoderMixer2@@QAE_NXZ:PROC ; NCoderMixer2::CBindInfo::CalcMapsAndCheck
xdata$x	SEGMENT
__ehfuncinfo$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z DD 019930522H
	DD	017H
	DD	FLAT:__unwindtable$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$3
	DD	01H
	DD	FLAT:__unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$4
	DD	01H
	DD	FLAT:__unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$5
	DD	01H
	DD	FLAT:__unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$6
	DD	01H
	DD	FLAT:__unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$7
	DD	07H
	DD	FLAT:__unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$8
	DD	08H
	DD	FLAT:__unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$9
	DD	01H
	DD	FLAT:__unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$10
	DD	01H
	DD	FLAT:__unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$11
	DD	0bH
	DD	FLAT:__unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$12
	DD	01H
	DD	FLAT:__unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$13
	DD	0dH
	DD	FLAT:__unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$14
	DD	0dH
	DD	FLAT:__unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$15
	DD	0fH
	DD	FLAT:__unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$16
	DD	010H
	DD	FLAT:__unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$17
	DD	010H
	DD	FLAT:__unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$18
	DD	010H
	DD	FLAT:__unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$19
	DD	0fH
	DD	FLAT:__unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$20
	DD	014H
	DD	FLAT:__unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$21
	DD	015H
	DD	FLAT:__unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$22
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv867 = -712						; size = 4
tv853 = -708						; size = 4
tv790 = -704						; size = 4
tv774 = -700						; size = 4
tv726 = -696						; size = 4
tv640 = -692						; size = 4
tv605 = -688						; size = 4
tv518 = -684						; size = 4
tv491 = -680						; size = 4
tv392 = -676						; size = 4
tv364 = -672						; size = 4
tv203 = -668						; size = 4
tv204 = -664						; size = 4
tv189 = -660						; size = 4
tv177 = -656						; size = 4
tv178 = -652						; size = 4
tv163 = -648						; size = 4
tv139 = -644						; size = 4
tv1004 = -640						; size = 4
tv995 = -636						; size = 4
$T74855 = -632						; size = 4
$T74852 = -628						; size = 4
$T74849 = -624						; size = 4
$T74848 = -620						; size = 4
$T74845 = -616						; size = 4
$T74844 = -612						; size = 4
$T74841 = -608						; size = 4
$T74840 = -604						; size = 4
$T74837 = -600						; size = 4
$T74836 = -596						; size = 4
$T74835 = -592						; size = 4
$T74834 = -588						; size = 4
$T74831 = -584						; size = 4
$T74830 = -580						; size = 4
$T74827 = -576						; size = 4
$T74826 = -572						; size = 4
$T74825 = -568						; size = 4
$T74824 = -564						; size = 4
$T74823 = -560						; size = 4
$T74822 = -556						; size = 4
$T74821 = -552						; size = 4
$T74820 = -548						; size = 4
$T74819 = -544						; size = 4
$T74818 = -540						; size = 4
$T74817 = -536						; size = 4
$T74816 = -532						; size = 4
$T74811 = -528						; size = 4
$T74810 = -524						; size = 4
$T74805 = -520						; size = 4
$T74804 = -516						; size = 4
$T74801 = -512						; size = 4
$T74800 = -508						; size = 4
$T74799 = -504						; size = 4
_outStreamPointer$73518 = -496				; size = 4
_progress2$73512 = -484					; size = 4
_inStreamPointers$ = -472				; size = 4
_num$ = -464						; size = 4
_streamSpec$73479 = -460				; size = 4
_lockedStreamImpSpec$73474 = -456			; size = 4
_lockedStreamImpSpec$73468 = -452			; size = 4
___result_$73461 = -448					; size = 4
_packPos$73459 = -444					; size = 8
_packStream$73458 = -432				; size = 4
_j$73453 = -424						; size = 4
___result_$73448 = -420					; size = 4
_needMtLock$ = -413					; size = 1
_lockedInStream$ = -408					; size = 4
_lockedInStreamSpec$ = -400				; size = 4
_inStreams$ = -392					; size = 12
_unpackSizesPointer$73434 = -376			; size = 4
_index$73428 = -372					; size = 4
_bond$73424 = -368					; size = 4
_j$73420 = -364						; size = 4
_packSizesPointers$73419 = -356				; size = 4
_packSizes$73397 = -344					; size = 4
_numStreams$73394 = -336				; size = 4
___result_$73390 = -332					; size = 4
_setFinishMode$73387 = -324				; size = 4
___result_$73344 = -316					; size = 4
_c$73339 = -312						; size = 2
_i$73335 = -308						; size = 4
_buffer$73334 = -300					; size = 8
_len$73332 = -288					; size = 4
___result_$73328 = -284					; size = 4
_passwordBSTR$73327 = -276				; size = 4
_cryptoSetPassword$73321 = -264				; size = 4
___result_$73280 = -256					; size = 4
_setCoderMt$73277 = -248				; size = 4
___result_$73235 = -240					; size = 4
_res$73229 = -236					; size = 4
_size$73225 = -232					; size = 4
_props$73224 = -228					; size = 4
_setDecoderProperties$73221 = -220			; size = 4
_decoder$73183 = -212					; size = 4
_coderInfo$73182 = -208					; size = 4
_i$ = -204						; size = 4
_unpackStreamIndexStart$ = -200				; size = 4
_packStreamIndex$ = -196				; size = 4
___result_$73163 = -192					; size = 4
_cod$73162 = -184					; size = 16
_coderInfo$73161 = -164					; size = 4
_i$73157 = -160						; size = 4
___result_$73153 = -156					; size = 4
_fullUnpack$ = -149					; size = 1
_folderUnpackSize$ = -148				; size = 8
_bindInfo$ = -136					; size = 76
_folderInfo$ = -52					; size = 28
_packPositions$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_inStream$ = 8						; size = 4
_startPos$ = 12						; size = 8
_folders$ = 20						; size = 4
_folderIndex$ = 24					; size = 4
_unpackSize$ = 28					; size = 4
_outStream$ = 32					; size = 4
_compressProgress$ = 36					; size = 4
_inStreamMainRes$ = 40					; size = 4
_getTextPassword$ = 44					; size = 4
_isEncrypted$ = 48					; size = 4
_passwordIsDefined$ = 52				; size = 4
_password$ = 56						; size = 4
_mtMode$ = 60						; size = 1
_numThreads$ = 64					; size = 4
?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z PROC ; NArchive::N7z::CDecoder::Decode
; _this$ = ecx
; Line 241
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 700				; 000002bcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-712]
	mov	ecx, 175				; 000000afH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 242
	mov	ecx, DWORD PTR _folders$[ebp]
	add	ecx, 8
	call	??B?$CObjArray@_K@@QBEPB_KXZ		; CObjArray<unsigned __int64>::operator unsigned __int64 const *
	mov	esi, eax
	mov	ecx, DWORD PTR _folders$[ebp]
	add	ecx, 48					; 00000030H
	call	??B?$CObjArray@I@@QBEPBIXZ		; CObjArray<unsigned int>::operator unsigned int const *
	mov	ecx, DWORD PTR _folderIndex$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	lea	eax, DWORD PTR [esi+edx*8]
	mov	DWORD PTR _packPositions$[ebp], eax
; Line 243
	lea	ecx, DWORD PTR _folderInfo$[ebp]
	call	??0CFolderEx@N7z@NArchive@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 244
	lea	ecx, DWORD PTR _folderInfo$[ebp]
	push	ecx
	mov	edx, DWORD PTR _folderIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _folders$[ebp]
	call	?ParseFolderEx@CFolders@N7z@NArchive@@QBEXIAAUCFolderEx@23@@Z ; NArchive::N7z::CFolders::ParseFolderEx
; Line 246
	lea	ecx, DWORD PTR _folderInfo$[ebp]
	call	?IsDecodingSupported@CFolder@N7z@NArchive@@QBE_NXZ ; NArchive::N7z::CFolder::IsDecodingSupported
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN62@Decode
; Line 247
	mov	DWORD PTR $T74799[ebp], -2147467263	; 80004001H
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _folderInfo$[ebp]
	call	??1CFolderEx@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T74799[ebp]
	jmp	$LN63@Decode
$LN62@Decode:
; Line 249
	lea	ecx, DWORD PTR _bindInfo$[ebp]
	call	??0CBindInfoEx@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
; Line 250
	lea	ecx, DWORD PTR _bindInfo$[ebp]
	push	ecx
	lea	edx, DWORD PTR _folderInfo$[ebp]
	push	edx
	call	?Convert_FolderInfo_to_BindInfo@N7z@NArchive@@YGXABUCFolderEx@12@AAUCBindInfoEx@12@@Z ; NArchive::N7z::Convert_FolderInfo_to_BindInfo
; Line 251
	lea	ecx, DWORD PTR _bindInfo$[ebp]
	call	?CalcMapsAndCheck@CBindInfo@NCoderMixer2@@QAE_NXZ ; NCoderMixer2::CBindInfo::CalcMapsAndCheck
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN61@Decode
; Line 252
	mov	DWORD PTR $T74800[ebp], -2147467263	; 80004001H
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _bindInfo$[ebp]
	call	??1CBindInfoEx@N7z@NArchive@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _folderInfo$[ebp]
	call	??1CFolderEx@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T74800[ebp]
	jmp	$LN63@Decode
$LN61@Decode:
; Line 254
	mov	ecx, DWORD PTR _folderIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _folders$[ebp]
	call	?GetFolderUnpackSize@CFolders@N7z@NArchive@@QBE_KI@Z ; NArchive::N7z::CFolders::GetFolderUnpackSize
	mov	DWORD PTR _folderUnpackSize$[ebp], eax
	mov	DWORD PTR _folderUnpackSize$[ebp+4], edx
; Line 255
	mov	BYTE PTR _fullUnpack$[ebp], 1
; Line 256
	cmp	DWORD PTR _unpackSize$[ebp], 0
	je	$LN60@Decode
; Line 258
	mov	edx, DWORD PTR _unpackSize$[ebp]
	mov	DWORD PTR tv995[ebp], edx
	mov	eax, DWORD PTR tv995[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR _folderUnpackSize$[ebp+4]
	jb	SHORT $LN59@Decode
	ja	SHORT $LN112@Decode
	mov	edx, DWORD PTR tv995[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR _folderUnpackSize$[ebp]
	jbe	SHORT $LN59@Decode
$LN112@Decode:
; Line 259
	mov	DWORD PTR $T74801[ebp], -2147467259	; 80004005H
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _bindInfo$[ebp]
	call	??1CBindInfoEx@N7z@NArchive@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _folderInfo$[ebp]
	call	??1CFolderEx@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T74801[ebp]
	jmp	$LN63@Decode
$LN59@Decode:
; Line 260
	mov	ecx, DWORD PTR _unpackSize$[ebp]
	mov	DWORD PTR tv1004[ebp], ecx
	mov	edx, DWORD PTR tv1004[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR _folderUnpackSize$[ebp]
	jne	SHORT $LN65@Decode
	mov	ecx, DWORD PTR tv1004[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR _folderUnpackSize$[ebp+4]
	jne	SHORT $LN65@Decode
	mov	DWORD PTR tv139[ebp], 1
	jmp	SHORT $LN66@Decode
$LN65@Decode:
	mov	DWORD PTR tv139[ebp], 0
$LN66@Decode:
	mov	al, BYTE PTR tv139[ebp]
	mov	BYTE PTR _fullUnpack$[ebp], al
$LN60@Decode:
; Line 273
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN57@Decode
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	lea	ecx, DWORD PTR _bindInfo$[ebp]
	push	ecx
	call	?AreBindInfoExEqual@N7z@NArchive@@YG_NABUCBindInfoEx@12@0@Z ; NArchive::N7z::AreBindInfoExEqual
	movzx	edx, al
	test	edx, edx
	jne	$LN58@Decode
$LN57@Decode:
; Line 275
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	?Release@?$CMyComPtr@UIUnknown@@@@QAEXXZ ; CMyComPtr<IUnknown>::Release
; Line 279
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+80]
	test	ecx, ecx
	je	$LN56@Decode
; Line 282
	push	132					; 00000084H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T74805[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T74805[ebp], 0
	je	SHORT $LN67@Decode
	push	0
	mov	ecx, DWORD PTR $T74805[ebp]
	call	??0CMixerMT@NCoderMixer2@@QAE@_N@Z	; NCoderMixer2::CMixerMT::CMixerMT
	mov	DWORD PTR tv163[ebp], eax
	jmp	SHORT $LN68@Decode
$LN67@Decode:
	mov	DWORD PTR tv163[ebp], 0
$LN68@Decode:
	mov	edx, DWORD PTR tv163[ebp]
	mov	DWORD PTR $T74804[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T74804[ebp]
	mov	DWORD PTR [eax+88], ecx
; Line 283
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+88]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z ; CMyComPtr<IUnknown>::operator=
; Line 284
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	DWORD PTR tv178[ebp], edx
	cmp	DWORD PTR tv178[ebp], 0
	je	SHORT $LN69@Decode
	mov	eax, DWORD PTR tv178[ebp]
	add	eax, 4
	mov	DWORD PTR tv177[ebp], eax
	jmp	SHORT $LN70@Decode
$LN69@Decode:
	mov	DWORD PTR tv177[ebp], 0
$LN70@Decode:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv177[ebp]
	mov	DWORD PTR [ecx+92], edx
; Line 287
	jmp	$LN55@Decode
$LN56@Decode:
; Line 292
	push	132					; 00000084H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T74811[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	cmp	DWORD PTR $T74811[ebp], 0
	je	SHORT $LN71@Decode
	push	0
	mov	ecx, DWORD PTR $T74811[ebp]
	call	??0CMixerST@NCoderMixer2@@QAE@_N@Z	; NCoderMixer2::CMixerST::CMixerST
	mov	DWORD PTR tv189[ebp], eax
	jmp	SHORT $LN72@Decode
$LN71@Decode:
	mov	DWORD PTR tv189[ebp], 0
$LN72@Decode:
	mov	eax, DWORD PTR tv189[ebp]
	mov	DWORD PTR $T74810[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T74810[ebp]
	mov	DWORD PTR [ecx+84], edx
; Line 293
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z ; CMyComPtr<IUnknown>::operator=
; Line 294
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	DWORD PTR tv204[ebp], eax
	cmp	DWORD PTR tv204[ebp], 0
	je	SHORT $LN73@Decode
	mov	ecx, DWORD PTR tv204[ebp]
	add	ecx, 4
	mov	DWORD PTR tv203[ebp], ecx
	jmp	SHORT $LN74@Decode
$LN73@Decode:
	mov	DWORD PTR tv203[ebp], 0
$LN74@Decode:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv203[ebp]
	mov	DWORD PTR [edx+92], eax
$LN55@Decode:
; Line 298
	mov	esi, esp
	lea	ecx, DWORD PTR _bindInfo$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+92]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+92]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result_$73153[ebp], eax
	cmp	DWORD PTR ___result_$73153[ebp], 0
	je	SHORT $LN54@Decode
	mov	ecx, DWORD PTR ___result_$73153[ebp]
	mov	DWORD PTR $T74816[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _bindInfo$[ebp]
	call	??1CBindInfoEx@N7z@NArchive@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _folderInfo$[ebp]
	call	??1CFolderEx@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T74816[ebp]
	jmp	$LN63@Decode
$LN54@Decode:
; Line 300
	mov	DWORD PTR _i$73157[ebp], 0
	jmp	SHORT $LN53@Decode
$LN52@Decode:
	mov	edx, DWORD PTR _i$73157[ebp]
	add	edx, 1
	mov	DWORD PTR _i$73157[ebp], edx
$LN53@Decode:
	lea	ecx, DWORD PTR _folderInfo$[ebp]
	call	?Size@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEIXZ ; CObjArray2<NArchive::N7z::CCoderInfo>::Size
	cmp	DWORD PTR _i$73157[ebp], eax
	jae	$LN51@Decode
; Line 302
	lea	ecx, DWORD PTR _folderInfo$[ebp]
	call	??B?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEPAUCCoderInfo@N7z@NArchive@@XZ ; CObjArray2<NArchive::N7z::CCoderInfo>::operator NArchive::N7z::CCoderInfo *
	mov	ecx, DWORD PTR _i$73157[ebp]
	imul	ecx, 24					; 00000018H
	add	eax, ecx
	mov	DWORD PTR _coderInfo$73161[ebp], eax
; Line 304
	lea	ecx, DWORD PTR _cod$73162[ebp]
	call	??0CCreatedCoder@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
; Line 307
	lea	edx, DWORD PTR _cod$73162[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _coderInfo$73161[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?CreateCoder@@YGJ_K_NAAUCCreatedCoder@@@Z ; CreateCoder
	mov	DWORD PTR ___result_$73163[ebp], eax
	cmp	DWORD PTR ___result_$73163[ebp], 0
	je	SHORT $LN50@Decode
	mov	eax, DWORD PTR ___result_$73163[ebp]
	mov	DWORD PTR $T74817[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _cod$73162[ebp]
	call	??1CCreatedCoder@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _bindInfo$[ebp]
	call	??1CBindInfoEx@N7z@NArchive@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _folderInfo$[ebp]
	call	??1CFolderEx@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T74817[ebp]
	jmp	$LN63@Decode
$LN50@Decode:
; Line 309
	mov	ecx, DWORD PTR _coderInfo$73161[ebp]
	call	?IsSimpleCoder@CCoderInfo@N7z@NArchive@@QBE_NXZ ; NArchive::N7z::CCoderInfo::IsSimpleCoder
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN49@Decode
; Line 311
	lea	ecx, DWORD PTR _cod$73162[ebp]
	call	??7?$CMyComPtr@UICompressCoder@@@@QBE_NXZ ; CMyComPtr<ICompressCoder>::operator!
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN48@Decode
; Line 312
	mov	DWORD PTR $T74818[ebp], -2147467263	; 80004001H
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _cod$73162[ebp]
	call	??1CCreatedCoder@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _bindInfo$[ebp]
	call	??1CBindInfoEx@N7z@NArchive@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _folderInfo$[ebp]
	call	??1CFolderEx@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T74818[ebp]
	jmp	$LN63@Decode
$LN48@Decode:
; Line 316
	jmp	SHORT $LN47@Decode
$LN49@Decode:
; Line 318
	lea	ecx, DWORD PTR _cod$73162[ebp+4]
	call	??7?$CMyComPtr@UICompressCoder2@@@@QBE_NXZ ; CMyComPtr<ICompressCoder2>::operator!
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN45@Decode
	mov	ecx, DWORD PTR _coderInfo$73161[ebp]
	mov	edx, DWORD PTR _cod$73162[ebp+12]
	cmp	edx, DWORD PTR [ecx+16]
	je	SHORT $LN47@Decode
$LN45@Decode:
; Line 319
	mov	DWORD PTR $T74819[ebp], -2147467263	; 80004001H
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _cod$73162[ebp]
	call	??1CCreatedCoder@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _bindInfo$[ebp]
	call	??1CBindInfoEx@N7z@NArchive@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _folderInfo$[ebp]
	call	??1CFolderEx@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T74819[ebp]
	jmp	$LN63@Decode
$LN47@Decode:
; Line 321
	mov	esi, esp
	lea	eax, DWORD PTR _cod$73162[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+92]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 335
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _cod$73162[ebp]
	call	??1CCreatedCoder@@QAE@XZ
	jmp	$LN52@Decode
$LN51@Decode:
; Line 337
	lea	ecx, DWORD PTR _bindInfo$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??4CBindInfoEx@N7z@NArchive@@QAEAAU012@ABU012@@Z
; Line 338
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx], 1
$LN58@Decode:
; Line 341
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+92]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 343
	mov	DWORD PTR _packStreamIndex$[ebp], 0
; Line 344
	mov	ecx, DWORD PTR _folders$[ebp]
	add	ecx, 44					; 0000002cH
	call	??B?$CObjArray@I@@QBEPBIXZ		; CObjArray<unsigned int>::operator unsigned int const *
	mov	ecx, DWORD PTR _folderIndex$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _unpackStreamIndexStart$[ebp], edx
; Line 348
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN44@Decode
$LN43@Decode:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN44@Decode:
	lea	ecx, DWORD PTR _folderInfo$[ebp]
	call	?Size@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEIXZ ; CObjArray2<NArchive::N7z::CCoderInfo>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	$LN42@Decode
; Line 350
	lea	ecx, DWORD PTR _folderInfo$[ebp]
	call	??B?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEPAUCCoderInfo@N7z@NArchive@@XZ ; CObjArray2<NArchive::N7z::CCoderInfo>::operator NArchive::N7z::CCoderInfo *
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 24					; 00000018H
	add	eax, ecx
	mov	DWORD PTR _coderInfo$73182[ebp], eax
; Line 351
	mov	esi, esp
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+92]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	?GetUnknown@CCoder@NCoderMixer2@@QBEPAUIUnknown@@XZ ; NCoderMixer2::CCoder::GetUnknown
	mov	DWORD PTR _decoder$73183[ebp], eax
; Line 354
	lea	ecx, DWORD PTR _setDecoderProperties$73221[ebp]
	call	??0?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::CMyComPtr<ICompressSetDecoderProperties2>
	mov	BYTE PTR __$EHRec$[ebp+8], 5
; Line 355
	lea	ecx, DWORD PTR _setDecoderProperties$73221[ebp]
	call	??I?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAEPAPAUICompressSetDecoderProperties2@@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::operator&
	mov	esi, esp
	push	eax
	push	OFFSET _IID_ICompressSetDecoderProperties2
	mov	ecx, DWORD PTR _decoder$73183[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _decoder$73183[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 356
	lea	ecx, DWORD PTR _setDecoderProperties$73221[ebp]
	call	??B?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBEPAUICompressSetDecoderProperties2@@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::operator ICompressSetDecoderProperties2 *
	test	eax, eax
	je	$LN41@Decode
; Line 358
	mov	edx, DWORD PTR _coderInfo$73182[ebp]
	add	edx, 8
	mov	DWORD PTR _props$73224[ebp], edx
; Line 359
	mov	ecx, DWORD PTR _props$73224[ebp]
	call	?Size@?$CBuffer@E@@QBEIXZ		; CBuffer<unsigned char>::Size
	mov	DWORD PTR _size$73225[ebp], eax
; Line 360
	cmp	DWORD PTR _size$73225[ebp], -1
	jbe	SHORT $LN40@Decode
; Line 361
	mov	DWORD PTR $T74820[ebp], -2147467263	; 80004001H
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _setDecoderProperties$73221[ebp]
	call	??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::~CMyComPtr<ICompressSetDecoderProperties2>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _bindInfo$[ebp]
	call	??1CBindInfoEx@N7z@NArchive@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _folderInfo$[ebp]
	call	??1CFolderEx@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T74820[ebp]
	jmp	$LN63@Decode
$LN40@Decode:
; Line 362
	lea	ecx, DWORD PTR _setDecoderProperties$73221[ebp]
	call	??C?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBEPAUICompressSetDecoderProperties2@@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::operator->
	mov	DWORD PTR tv364[ebp], eax
	mov	esi, esp
	mov	eax, DWORD PTR _size$73225[ebp]
	push	eax
	mov	ecx, DWORD PTR _props$73224[ebp]
	call	??B?$CBuffer@E@@QBEPBEXZ		; CBuffer<unsigned char>::operator unsigned char const *
	push	eax
	mov	ecx, DWORD PTR tv364[ebp]
	push	ecx
	mov	edx, DWORD PTR tv364[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _res$73229[ebp], eax
; Line 363
	cmp	DWORD PTR _res$73229[ebp], -2147024809	; 80070057H
	jne	SHORT $LN39@Decode
; Line 364
	mov	DWORD PTR _res$73229[ebp], -2147467263	; 80004001H
$LN39@Decode:
; Line 365
	mov	edx, DWORD PTR _res$73229[ebp]
	mov	DWORD PTR ___result_$73235[ebp], edx
	cmp	DWORD PTR ___result_$73235[ebp], 0
	je	SHORT $LN41@Decode
	mov	eax, DWORD PTR ___result_$73235[ebp]
	mov	DWORD PTR $T74821[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _setDecoderProperties$73221[ebp]
	call	??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::~CMyComPtr<ICompressSetDecoderProperties2>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _bindInfo$[ebp]
	call	??1CBindInfoEx@N7z@NArchive@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _folderInfo$[ebp]
	call	??1CFolderEx@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T74821[ebp]
	jmp	$LN63@Decode
$LN41@Decode:
; Line 367
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _setDecoderProperties$73221[ebp]
	call	??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::~CMyComPtr<ICompressSetDecoderProperties2>
; Line 370
	movzx	ecx, BYTE PTR _mtMode$[ebp]
	test	ecx, ecx
	je	$LN37@Decode
; Line 372
	lea	ecx, DWORD PTR _setCoderMt$73277[ebp]
	call	??0?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderMt>::CMyComPtr<ICompressSetCoderMt>
	mov	BYTE PTR __$EHRec$[ebp+8], 6
; Line 373
	lea	ecx, DWORD PTR _setCoderMt$73277[ebp]
	call	??I?$CMyComPtr@UICompressSetCoderMt@@@@QAEPAPAUICompressSetCoderMt@@XZ ; CMyComPtr<ICompressSetCoderMt>::operator&
	mov	esi, esp
	push	eax
	push	OFFSET _IID_ICompressSetCoderMt
	mov	edx, DWORD PTR _decoder$73183[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _decoder$73183[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 374
	lea	ecx, DWORD PTR _setCoderMt$73277[ebp]
	call	??B?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ ; CMyComPtr<ICompressSetCoderMt>::operator ICompressSetCoderMt *
	test	eax, eax
	je	$LN36@Decode
; Line 376
	lea	ecx, DWORD PTR _setCoderMt$73277[ebp]
	call	??C?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ ; CMyComPtr<ICompressSetCoderMt>::operator->
	mov	DWORD PTR tv392[ebp], eax
	mov	esi, esp
	mov	eax, DWORD PTR _numThreads$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv392[ebp]
	push	ecx
	mov	edx, DWORD PTR tv392[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result_$73280[ebp], eax
	cmp	DWORD PTR ___result_$73280[ebp], 0
	je	SHORT $LN36@Decode
	mov	edx, DWORD PTR ___result_$73280[ebp]
	mov	DWORD PTR $T74822[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _setCoderMt$73277[ebp]
	call	??1?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderMt>::~CMyComPtr<ICompressSetCoderMt>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _bindInfo$[ebp]
	call	??1CBindInfoEx@N7z@NArchive@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _folderInfo$[ebp]
	call	??1CFolderEx@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T74822[ebp]
	jmp	$LN63@Decode
$LN36@Decode:
; Line 378
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _setCoderMt$73277[ebp]
	call	??1?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderMt>::~CMyComPtr<ICompressSetCoderMt>
$LN37@Decode:
; Line 383
	lea	ecx, DWORD PTR _cryptoSetPassword$73321[ebp]
	call	??0?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ ; CMyComPtr<ICryptoSetPassword>::CMyComPtr<ICryptoSetPassword>
	mov	BYTE PTR __$EHRec$[ebp+8], 7
; Line 384
	lea	ecx, DWORD PTR _cryptoSetPassword$73321[ebp]
	call	??I?$CMyComPtr@UICryptoSetPassword@@@@QAEPAPAUICryptoSetPassword@@XZ ; CMyComPtr<ICryptoSetPassword>::operator&
	mov	esi, esp
	push	eax
	push	OFFSET _IID_ICryptoSetPassword
	mov	eax, DWORD PTR _decoder$73183[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _decoder$73183[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 385
	lea	ecx, DWORD PTR _cryptoSetPassword$73321[ebp]
	call	??B?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ ; CMyComPtr<ICryptoSetPassword>::operator ICryptoSetPassword *
	test	eax, eax
	je	$LN34@Decode
; Line 387
	mov	ecx, DWORD PTR _isEncrypted$[ebp]
	mov	BYTE PTR [ecx], 1
; Line 388
	cmp	DWORD PTR _getTextPassword$[ebp], 0
	jne	SHORT $LN33@Decode
; Line 389
	mov	DWORD PTR $T74823[ebp], -2147467263	; 80004001H
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _cryptoSetPassword$73321[ebp]
	call	??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ ; CMyComPtr<ICryptoSetPassword>::~CMyComPtr<ICryptoSetPassword>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _bindInfo$[ebp]
	call	??1CBindInfoEx@N7z@NArchive@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _folderInfo$[ebp]
	call	??1CFolderEx@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T74823[ebp]
	jmp	$LN63@Decode
$LN33@Decode:
; Line 390
	lea	ecx, DWORD PTR _passwordBSTR$73327[ebp]
	call	??0CMyComBSTR@@QAE@XZ			; CMyComBSTR::CMyComBSTR
	mov	BYTE PTR __$EHRec$[ebp+8], 8
; Line 391
	lea	ecx, DWORD PTR _passwordBSTR$73327[ebp]
	call	??ICMyComBSTR@@QAEPAPA_WXZ		; CMyComBSTR::operator&
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR _getTextPassword$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _getTextPassword$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result_$73328[ebp], eax
	cmp	DWORD PTR ___result_$73328[ebp], 0
	je	SHORT $LN32@Decode
	mov	eax, DWORD PTR ___result_$73328[ebp]
	mov	DWORD PTR $T74824[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _passwordBSTR$73327[ebp]
	call	??1CMyComBSTR@@QAE@XZ			; CMyComBSTR::~CMyComBSTR
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _cryptoSetPassword$73321[ebp]
	call	??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ ; CMyComPtr<ICryptoSetPassword>::~CMyComPtr<ICryptoSetPassword>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _bindInfo$[ebp]
	call	??1CBindInfoEx@N7z@NArchive@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _folderInfo$[ebp]
	call	??1CFolderEx@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T74824[ebp]
	jmp	$LN63@Decode
$LN32@Decode:
; Line 392
	mov	ecx, DWORD PTR _passwordIsDefined$[ebp]
	mov	BYTE PTR [ecx], 1
; Line 393
	mov	ecx, DWORD PTR _password$[ebp]
	call	?Empty@UString@@QAEXXZ			; UString::Empty
; Line 394
	mov	DWORD PTR _len$73332[ebp], 0
; Line 395
	lea	ecx, DWORD PTR _passwordBSTR$73327[ebp]
	call	??BCMyComBSTR@@QBEPB_WXZ		; CMyComBSTR::operator wchar_t const *
	test	eax, eax
	je	SHORT $LN31@Decode
; Line 397
	lea	ecx, DWORD PTR _passwordBSTR$73327[ebp]
	call	??BCMyComBSTR@@QBEPB_WXZ		; CMyComBSTR::operator wchar_t const *
	push	eax
	mov	ecx, DWORD PTR _password$[ebp]
	call	??4UString@@QAEAAV0@PB_W@Z		; UString::operator=
; Line 398
	mov	ecx, DWORD PTR _password$[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	mov	DWORD PTR _len$73332[ebp], eax
$LN31@Decode:
; Line 400
	mov	edx, DWORD PTR _len$73332[ebp]
	shl	edx, 1
	push	edx
	lea	ecx, DWORD PTR _buffer$73334[ebp]
	call	??0?$CBuffer@E@@QAE@I@Z			; CBuffer<unsigned char>::CBuffer<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+8], 9
; Line 401
	mov	DWORD PTR _i$73335[ebp], 0
	jmp	SHORT $LN30@Decode
$LN29@Decode:
	mov	eax, DWORD PTR _i$73335[ebp]
	add	eax, 1
	mov	DWORD PTR _i$73335[ebp], eax
$LN30@Decode:
	mov	ecx, DWORD PTR _i$73335[ebp]
	cmp	ecx, DWORD PTR _len$73332[ebp]
	jae	SHORT $LN28@Decode
; Line 403
	lea	ecx, DWORD PTR _passwordBSTR$73327[ebp]
	call	??BCMyComBSTR@@QBEPB_WXZ		; CMyComBSTR::operator wchar_t const *
	mov	edx, DWORD PTR _i$73335[ebp]
	mov	ax, WORD PTR [eax+edx*2]
	mov	WORD PTR _c$73339[ebp], ax
; Line 404
	lea	ecx, DWORD PTR _buffer$73334[ebp]
	call	??B?$CBuffer@E@@QAEPAEXZ		; CBuffer<unsigned char>::operator unsigned char *
	mov	ecx, DWORD PTR _i$73335[ebp]
	mov	dl, BYTE PTR _c$73339[ebp]
	mov	BYTE PTR [eax+ecx*2], dl
; Line 405
	movzx	ebx, WORD PTR _c$73339[ebp]
	sar	ebx, 8
	lea	ecx, DWORD PTR _buffer$73334[ebp]
	call	??B?$CBuffer@E@@QAEPAEXZ		; CBuffer<unsigned char>::operator unsigned char *
	mov	ecx, DWORD PTR _i$73335[ebp]
	mov	BYTE PTR [eax+ecx*2+1], bl
; Line 406
	jmp	SHORT $LN29@Decode
$LN28@Decode:
; Line 407
	lea	ecx, DWORD PTR _cryptoSetPassword$73321[ebp]
	call	??C?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ ; CMyComPtr<ICryptoSetPassword>::operator->
	mov	DWORD PTR tv491[ebp], eax
	lea	ecx, DWORD PTR _buffer$73334[ebp]
	call	?Size@?$CBuffer@E@@QBEIXZ		; CBuffer<unsigned char>::Size
	mov	esi, esp
	push	eax
	lea	ecx, DWORD PTR _buffer$73334[ebp]
	call	??B?$CBuffer@E@@QAEPAEXZ		; CBuffer<unsigned char>::operator unsigned char *
	push	eax
	mov	edx, DWORD PTR tv491[ebp]
	push	edx
	mov	eax, DWORD PTR tv491[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result_$73344[ebp], eax
	cmp	DWORD PTR ___result_$73344[ebp], 0
	je	SHORT $LN27@Decode
	mov	eax, DWORD PTR ___result_$73344[ebp]
	mov	DWORD PTR $T74825[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _buffer$73334[ebp]
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _passwordBSTR$73327[ebp]
	call	??1CMyComBSTR@@QAE@XZ			; CMyComBSTR::~CMyComBSTR
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _cryptoSetPassword$73321[ebp]
	call	??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ ; CMyComPtr<ICryptoSetPassword>::~CMyComPtr<ICryptoSetPassword>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _bindInfo$[ebp]
	call	??1CBindInfoEx@N7z@NArchive@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _folderInfo$[ebp]
	call	??1CFolderEx@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T74825[ebp]
	jmp	$LN63@Decode
$LN27@Decode:
; Line 408
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _buffer$73334[ebp]
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _passwordBSTR$73327[ebp]
	call	??1CMyComBSTR@@QAE@XZ			; CMyComBSTR::~CMyComBSTR
$LN34@Decode:
; Line 409
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _cryptoSetPassword$73321[ebp]
	call	??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ ; CMyComPtr<ICryptoSetPassword>::~CMyComPtr<ICryptoSetPassword>
; Line 413
	lea	ecx, DWORD PTR _setFinishMode$73387[ebp]
	call	??0?$CMyComPtr@UICompressSetFinishMode@@@@QAE@XZ ; CMyComPtr<ICompressSetFinishMode>::CMyComPtr<ICompressSetFinishMode>
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
; Line 414
	lea	ecx, DWORD PTR _setFinishMode$73387[ebp]
	call	??I?$CMyComPtr@UICompressSetFinishMode@@@@QAEPAPAUICompressSetFinishMode@@XZ ; CMyComPtr<ICompressSetFinishMode>::operator&
	mov	esi, esp
	push	eax
	push	OFFSET _IID_ICompressSetFinishMode
	mov	ecx, DWORD PTR _decoder$73183[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _decoder$73183[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 415
	lea	ecx, DWORD PTR _setFinishMode$73387[ebp]
	call	??B?$CMyComPtr@UICompressSetFinishMode@@@@QBEPAUICompressSetFinishMode@@XZ ; CMyComPtr<ICompressSetFinishMode>::operator ICompressSetFinishMode *
	test	eax, eax
	je	$LN26@Decode
; Line 417
	lea	ecx, DWORD PTR _setFinishMode$73387[ebp]
	call	??C?$CMyComPtr@UICompressSetFinishMode@@@@QBEPAUICompressSetFinishMode@@XZ ; CMyComPtr<ICompressSetFinishMode>::operator->
	mov	DWORD PTR tv518[ebp], eax
	movzx	edx, BYTE PTR _fullUnpack$[ebp]
	push	edx
	call	?BoolToInt@@YGH_N@Z			; BoolToInt
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR tv518[ebp]
	push	eax
	mov	ecx, DWORD PTR tv518[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result_$73390[ebp], eax
	cmp	DWORD PTR ___result_$73390[ebp], 0
	je	SHORT $LN26@Decode
	mov	ecx, DWORD PTR ___result_$73390[ebp]
	mov	DWORD PTR $T74826[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _setFinishMode$73387[ebp]
	call	??1?$CMyComPtr@UICompressSetFinishMode@@@@QAE@XZ ; CMyComPtr<ICompressSetFinishMode>::~CMyComPtr<ICompressSetFinishMode>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _bindInfo$[ebp]
	call	??1CBindInfoEx@N7z@NArchive@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _folderInfo$[ebp]
	call	??1CFolderEx@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T74826[ebp]
	jmp	$LN63@Decode
$LN26@Decode:
; Line 419
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _setFinishMode$73387[ebp]
	call	??1?$CMyComPtr@UICompressSetFinishMode@@@@QAE@XZ ; CMyComPtr<ICompressSetFinishMode>::~CMyComPtr<ICompressSetFinishMode>
; Line 421
	mov	edx, DWORD PTR _coderInfo$73182[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _numStreams$73394[ebp], eax
; Line 423
	mov	ecx, DWORD PTR _numStreams$73394[ebp]
	push	ecx
	lea	ecx, DWORD PTR _packSizes$73397[ebp]
	call	??0?$CObjArray@_K@@QAE@I@Z		; CObjArray<unsigned __int64>::CObjArray<unsigned __int64>
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
; Line 424
	mov	edx, DWORD PTR _numStreams$73394[ebp]
	push	edx
	lea	ecx, DWORD PTR _packSizesPointers$73419[ebp]
	call	??0?$CObjArray@PB_K@@QAE@I@Z		; CObjArray<unsigned __int64 const *>::CObjArray<unsigned __int64 const *>
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
; Line 426
	mov	DWORD PTR _j$73420[ebp], 0
	jmp	SHORT $LN24@Decode
$LN23@Decode:
	mov	eax, DWORD PTR _j$73420[ebp]
	add	eax, 1
	mov	DWORD PTR _j$73420[ebp], eax
	mov	ecx, DWORD PTR _packStreamIndex$[ebp]
	add	ecx, 1
	mov	DWORD PTR _packStreamIndex$[ebp], ecx
$LN24@Decode:
	mov	edx, DWORD PTR _j$73420[ebp]
	cmp	edx, DWORD PTR _numStreams$73394[ebp]
	jae	$LN22@Decode
; Line 428
	mov	eax, DWORD PTR _packStreamIndex$[ebp]
	push	eax
	lea	ecx, DWORD PTR _folderInfo$[ebp]
	call	?FindBond_for_PackStream@CFolder@N7z@NArchive@@QBEHI@Z ; NArchive::N7z::CFolder::FindBond_for_PackStream
	mov	DWORD PTR _bond$73424[ebp], eax
; Line 430
	cmp	DWORD PTR _bond$73424[ebp], 0
	jl	SHORT $LN21@Decode
; Line 431
	mov	ecx, DWORD PTR _folders$[ebp]
	add	ecx, 40					; 00000028H
	call	??B?$CObjArray@_K@@QBEPB_KXZ		; CObjArray<unsigned __int64>::operator unsigned __int64 const *
	mov	esi, eax
	lea	ecx, DWORD PTR _folderInfo$[ebp+8]
	call	??B?$CObjArray2@UCBond@N7z@NArchive@@@@QAEPAUCBond@N7z@NArchive@@XZ ; CObjArray2<NArchive::N7z::CBond>::operator NArchive::N7z::CBond *
	mov	ecx, DWORD PTR _bond$73424[ebp]
	mov	edx, DWORD PTR _unpackStreamIndexStart$[ebp]
	add	edx, DWORD PTR [eax+ecx*8+4]
	lea	esi, DWORD PTR [esi+edx*8]
	lea	ecx, DWORD PTR _packSizesPointers$73419[ebp]
	call	??B?$CObjArray@PB_K@@QAEPAPB_KXZ	; CObjArray<unsigned __int64 const *>::operator unsigned __int64 const * *
	mov	ecx, DWORD PTR _j$73420[ebp]
	mov	DWORD PTR [eax+ecx*4], esi
; Line 432
	jmp	$LN20@Decode
$LN21@Decode:
; Line 434
	mov	edx, DWORD PTR _packStreamIndex$[ebp]
	push	edx
	lea	ecx, DWORD PTR _folderInfo$[ebp]
	call	?Find_in_PackStreams@CFolder@N7z@NArchive@@QBEHI@Z ; NArchive::N7z::CFolder::Find_in_PackStreams
	mov	DWORD PTR _index$73428[ebp], eax
; Line 435
	cmp	DWORD PTR _index$73428[ebp], 0
	jge	SHORT $LN19@Decode
; Line 436
	mov	DWORD PTR $T74827[ebp], -2147467263	; 80004001H
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _packSizesPointers$73419[ebp]
	call	??1?$CObjArray@PB_K@@QAE@XZ		; CObjArray<unsigned __int64 const *>::~CObjArray<unsigned __int64 const *>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _packSizes$73397[ebp]
	call	??1?$CObjArray@_K@@QAE@XZ		; CObjArray<unsigned __int64>::~CObjArray<unsigned __int64>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _bindInfo$[ebp]
	call	??1CBindInfoEx@N7z@NArchive@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _folderInfo$[ebp]
	call	??1CFolderEx@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T74827[ebp]
	jmp	$LN63@Decode
$LN19@Decode:
; Line 437
	mov	eax, DWORD PTR _index$73428[ebp]
	mov	ecx, DWORD PTR _packPositions$[ebp]
	mov	edx, DWORD PTR _index$73428[ebp]
	mov	esi, DWORD PTR _packPositions$[ebp]
	mov	edi, DWORD PTR [ecx+eax*8+8]
	sub	edi, DWORD PTR [esi+edx*8]
	mov	ebx, DWORD PTR [ecx+eax*8+12]
	sbb	ebx, DWORD PTR [esi+edx*8+4]
	lea	ecx, DWORD PTR _packSizes$73397[ebp]
	call	??B?$CObjArray@_K@@QAEPA_KXZ		; CObjArray<unsigned __int64>::operator unsigned __int64 *
	mov	ecx, DWORD PTR _j$73420[ebp]
	mov	DWORD PTR [eax+ecx*8], edi
	mov	DWORD PTR [eax+ecx*8+4], ebx
; Line 438
	lea	ecx, DWORD PTR _packSizes$73397[ebp]
	call	??B?$CObjArray@_K@@QAEPA_KXZ		; CObjArray<unsigned __int64>::operator unsigned __int64 *
	mov	edx, DWORD PTR _j$73420[ebp]
	lea	esi, DWORD PTR [eax+edx*8]
	lea	ecx, DWORD PTR _packSizesPointers$73419[ebp]
	call	??B?$CObjArray@PB_K@@QAEPAPB_KXZ	; CObjArray<unsigned __int64 const *>::operator unsigned __int64 const * *
	mov	ecx, DWORD PTR _j$73420[ebp]
	mov	DWORD PTR [eax+ecx*4], esi
$LN20@Decode:
; Line 440
	jmp	$LN23@Decode
$LN22@Decode:
; Line 445
	cmp	DWORD PTR _unpackSize$[ebp], 0
	je	SHORT $LN75@Decode
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _bindInfo$[ebp+36]
	jne	SHORT $LN75@Decode
	mov	eax, DWORD PTR _unpackSize$[ebp]
	mov	DWORD PTR tv605[ebp], eax
	jmp	SHORT $LN76@Decode
$LN75@Decode:
	mov	ecx, DWORD PTR _folders$[ebp]
	add	ecx, 40					; 00000028H
	call	??B?$CObjArray@_K@@QBEPB_KXZ		; CObjArray<unsigned __int64>::operator unsigned __int64 const *
	mov	ecx, DWORD PTR _unpackStreamIndexStart$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	mov	DWORD PTR tv605[ebp], edx
$LN76@Decode:
	mov	eax, DWORD PTR tv605[ebp]
	mov	DWORD PTR _unpackSizesPointer$73434[ebp], eax
; Line 447
	lea	ecx, DWORD PTR _packSizesPointers$73419[ebp]
	call	??B?$CObjArray@PB_K@@QAEPAPB_KXZ	; CObjArray<unsigned __int64 const *>::operator unsigned __int64 const * *
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _unpackSizesPointer$73434[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+92]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 448
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _packSizesPointers$73419[ebp]
	call	??1?$CObjArray@PB_K@@QAE@XZ		; CObjArray<unsigned __int64 const *>::~CObjArray<unsigned __int64 const *>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _packSizes$73397[ebp]
	call	??1?$CObjArray@_K@@QAE@XZ		; CObjArray<unsigned __int64>::~CObjArray<unsigned __int64>
	jmp	$LN43@Decode
$LN42@Decode:
; Line 450
	cmp	DWORD PTR _outStream$[ebp], 0
	je	SHORT $LN18@Decode
; Line 452
	movzx	ecx, BYTE PTR _fullUnpack$[ebp]
	test	ecx, ecx
	sete	dl
	mov	esi, esp
	movzx	eax, dl
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+92]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN18@Decode:
; Line 455
	lea	ecx, DWORD PTR _inStreams$[ebp]
	call	??0?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialInStream> >::CObjectVector<CMyComPtr<ISequentialInStream> >
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH
; Line 457
	push	48					; 00000030H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T74831[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 14		; 0000000eH
	cmp	DWORD PTR $T74831[ebp], 0
	je	SHORT $LN77@Decode
	mov	ecx, DWORD PTR $T74831[ebp]
	call	??0CLockedInStream@N7z@NArchive@@QAE@XZ
	mov	DWORD PTR tv640[ebp], eax
	jmp	SHORT $LN78@Decode
$LN77@Decode:
	mov	DWORD PTR tv640[ebp], 0
$LN78@Decode:
	mov	ecx, DWORD PTR tv640[ebp]
	mov	DWORD PTR $T74830[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH
	mov	edx, DWORD PTR $T74830[ebp]
	mov	DWORD PTR _lockedInStreamSpec$[ebp], edx
; Line 458
	mov	eax, DWORD PTR _lockedInStreamSpec$[ebp]
	push	eax
	lea	ecx, DWORD PTR _lockedInStream$[ebp]
	call	??0?$CMyComPtr@UIUnknown@@@@QAE@PAUIUnknown@@@Z ; CMyComPtr<IUnknown>::CMyComPtr<IUnknown>
	mov	BYTE PTR __$EHRec$[ebp+8], 15		; 0000000fH
; Line 460
	mov	BYTE PTR _needMtLock$[ebp], 0
; Line 462
	lea	ecx, DWORD PTR _folderInfo$[ebp+16]
	call	?Size@?$CObjArray2@I@@QBEIXZ		; CObjArray2<unsigned int>::Size
	cmp	eax, 1
	jbe	$LN17@Decode
; Line 466
	mov	ecx, DWORD PTR _lockedInStreamSpec$[ebp]
	add	ecx, 16					; 00000010H
	mov	esi, esp
	push	ecx
	push	0
	mov	edx, DWORD PTR _packPositions$[ebp]
	mov	eax, DWORD PTR _startPos$[ebp]
	add	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _startPos$[ebp+4]
	adc	ecx, DWORD PTR [edx+4]
	push	ecx
	push	eax
	mov	edx, DWORD PTR _inStream$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _inStream$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result_$73448[ebp], eax
	cmp	DWORD PTR ___result_$73448[ebp], 0
	je	SHORT $LN16@Decode
	mov	eax, DWORD PTR ___result_$73448[ebp]
	mov	DWORD PTR $T74834[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH
	lea	ecx, DWORD PTR _lockedInStream$[ebp]
	call	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _inStreams$[ebp]
	call	??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialInStream> >::~CObjectVector<CMyComPtr<ISequentialInStream> >
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _bindInfo$[ebp]
	call	??1CBindInfoEx@N7z@NArchive@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _folderInfo$[ebp]
	call	??1CFolderEx@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T74834[ebp]
	jmp	$LN63@Decode
$LN16@Decode:
; Line 467
	mov	ecx, DWORD PTR _inStream$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _lockedInStreamSpec$[ebp]
	add	ecx, 8
	call	??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ; CMyComPtr<IInStream>::operator=
; Line 470
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+92]
	mov	ecx, DWORD PTR [eax+96]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+92]
	call	?IsThere_ExternalCoder_in_PackTree@CMixer@NCoderMixer2@@QAE_NI@Z ; NCoderMixer2::CMixer::IsThere_ExternalCoder_in_PackTree
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN17@Decode
; Line 472
	mov	BYTE PTR _needMtLock$[ebp], 1
$LN17@Decode:
; Line 475
	mov	DWORD PTR _j$73453[ebp], 0
	jmp	SHORT $LN14@Decode
$LN13@Decode:
	mov	ecx, DWORD PTR _j$73453[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$73453[ebp], ecx
$LN14@Decode:
	lea	ecx, DWORD PTR _folderInfo$[ebp+16]
	call	?Size@?$CObjArray2@I@@QBEIXZ		; CObjArray2<unsigned int>::Size
	cmp	DWORD PTR _j$73453[ebp], eax
	jae	$LN12@Decode
; Line 477
	lea	ecx, DWORD PTR _packStream$73458[ebp]
	call	??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 16		; 00000010H
; Line 478
	mov	edx, DWORD PTR _j$73453[ebp]
	mov	eax, DWORD PTR _packPositions$[ebp]
	mov	ecx, DWORD PTR _startPos$[ebp]
	add	ecx, DWORD PTR [eax+edx*8]
	mov	esi, DWORD PTR _startPos$[ebp+4]
	adc	esi, DWORD PTR [eax+edx*8+4]
	mov	DWORD PTR _packPos$73459[ebp], ecx
	mov	DWORD PTR _packPos$73459[ebp+4], esi
; Line 480
	lea	ecx, DWORD PTR _folderInfo$[ebp+16]
	call	?Size@?$CObjArray2@I@@QBEIXZ		; CObjArray2<unsigned int>::Size
	cmp	eax, 1
	jne	$LN11@Decode
; Line 482
	mov	esi, esp
	push	0
	push	0
	mov	edx, DWORD PTR _packPos$73459[ebp+4]
	push	edx
	mov	eax, DWORD PTR _packPos$73459[ebp]
	push	eax
	mov	ecx, DWORD PTR _inStream$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _inStream$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result_$73461[ebp], eax
	cmp	DWORD PTR ___result_$73461[ebp], 0
	je	SHORT $LN10@Decode
	mov	edx, DWORD PTR ___result_$73461[ebp]
	mov	DWORD PTR $T74835[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 15		; 0000000fH
	lea	ecx, DWORD PTR _packStream$73458[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH
	lea	ecx, DWORD PTR _lockedInStream$[ebp]
	call	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _inStreams$[ebp]
	call	??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialInStream> >::~CObjectVector<CMyComPtr<ISequentialInStream> >
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _bindInfo$[ebp]
	call	??1CBindInfoEx@N7z@NArchive@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _folderInfo$[ebp]
	call	??1CFolderEx@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T74835[ebp]
	jmp	$LN63@Decode
$LN10@Decode:
; Line 483
	mov	eax, DWORD PTR _inStream$[ebp]
	push	eax
	lea	ecx, DWORD PTR _packStream$73458[ebp]
	call	??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=
; Line 485
	jmp	$LN9@Decode
$LN11@Decode:
; Line 489
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+80]
	test	edx, edx
	jne	SHORT $LN7@Decode
	movzx	eax, BYTE PTR _needMtLock$[ebp]
	test	eax, eax
	je	$LN8@Decode
$LN7@Decode:
; Line 492
	push	32					; 00000020H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T74837[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	cmp	DWORD PTR $T74837[ebp], 0
	je	SHORT $LN79@Decode
	mov	ecx, DWORD PTR $T74837[ebp]
	call	??0CLockedSequentialInStreamMT@N7z@NArchive@@QAE@XZ
	mov	DWORD PTR tv726[ebp], eax
	jmp	SHORT $LN80@Decode
$LN79@Decode:
	mov	DWORD PTR tv726[ebp], 0
$LN80@Decode:
	mov	ecx, DWORD PTR tv726[ebp]
	mov	DWORD PTR $T74836[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 16		; 00000010H
	mov	edx, DWORD PTR $T74836[ebp]
	mov	DWORD PTR _lockedStreamImpSpec$73468[ebp], edx
; Line 493
	mov	eax, DWORD PTR _lockedStreamImpSpec$73468[ebp]
	push	eax
	lea	ecx, DWORD PTR _packStream$73458[ebp]
	call	??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=
; Line 494
	mov	ecx, DWORD PTR _packPos$73459[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _packPos$73459[ebp]
	push	edx
	mov	eax, DWORD PTR _lockedInStreamSpec$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lockedStreamImpSpec$73468[ebp]
	call	?Init@CLockedSequentialInStreamMT@N7z@NArchive@@QAEXPAUCLockedInStream@23@_K@Z ; NArchive::N7z::CLockedSequentialInStreamMT::Init
; Line 497
	jmp	$LN9@Decode
$LN8@Decode:
; Line 502
	push	32					; 00000020H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T74841[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
	cmp	DWORD PTR $T74841[ebp], 0
	je	SHORT $LN81@Decode
	mov	ecx, DWORD PTR $T74841[ebp]
	call	??0CLockedSequentialInStreamST@N7z@NArchive@@QAE@XZ
	mov	DWORD PTR tv774[ebp], eax
	jmp	SHORT $LN82@Decode
$LN81@Decode:
	mov	DWORD PTR tv774[ebp], 0
$LN82@Decode:
	mov	ecx, DWORD PTR tv774[ebp]
	mov	DWORD PTR $T74840[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 16		; 00000010H
	mov	edx, DWORD PTR $T74840[ebp]
	mov	DWORD PTR _lockedStreamImpSpec$73474[ebp], edx
; Line 503
	mov	eax, DWORD PTR _lockedStreamImpSpec$73474[ebp]
	push	eax
	lea	ecx, DWORD PTR _packStream$73458[ebp]
	call	??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=
; Line 504
	mov	ecx, DWORD PTR _packPos$73459[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _packPos$73459[ebp]
	push	edx
	mov	eax, DWORD PTR _lockedInStreamSpec$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lockedStreamImpSpec$73474[ebp]
	call	?Init@CLockedSequentialInStreamST@N7z@NArchive@@QAEXPAUCLockedInStream@23@_K@Z ; NArchive::N7z::CLockedSequentialInStreamST::Init
$LN9@Decode:
; Line 509
	push	40					; 00000028H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T74845[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 19		; 00000013H
	cmp	DWORD PTR $T74845[ebp], 0
	je	SHORT $LN83@Decode
	mov	ecx, DWORD PTR $T74845[ebp]
	call	??0CLimitedSequentialInStream@@QAE@XZ
	mov	DWORD PTR tv790[ebp], eax
	jmp	SHORT $LN84@Decode
$LN83@Decode:
	mov	DWORD PTR tv790[ebp], 0
$LN84@Decode:
	mov	ecx, DWORD PTR tv790[ebp]
	mov	DWORD PTR $T74844[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 16		; 00000010H
	mov	edx, DWORD PTR $T74844[ebp]
	mov	DWORD PTR _streamSpec$73479[ebp], edx
; Line 510
	mov	eax, DWORD PTR _streamSpec$73479[ebp]
	push	eax
	lea	ecx, DWORD PTR _inStreams$[ebp]
	call	?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@XZ ; CObjectVector<CMyComPtr<ISequentialInStream> >::AddNew
	mov	ecx, eax
	call	??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=
; Line 511
	lea	ecx, DWORD PTR _packStream$73458[ebp]
	call	??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
	push	eax
	mov	ecx, DWORD PTR _streamSpec$73479[ebp]
	call	?SetStream@CLimitedSequentialInStream@@QAEXPAUISequentialInStream@@@Z ; CLimitedSequentialInStream::SetStream
; Line 512
	mov	ecx, DWORD PTR _j$73453[ebp]
	mov	edx, DWORD PTR _packPositions$[ebp]
	mov	eax, DWORD PTR _j$73453[ebp]
	mov	esi, DWORD PTR _packPositions$[ebp]
	mov	edi, DWORD PTR [edx+ecx*8+8]
	sub	edi, DWORD PTR [esi+eax*8]
	mov	ecx, DWORD PTR [edx+ecx*8+12]
	sbb	ecx, DWORD PTR [esi+eax*8+4]
	push	ecx
	push	edi
	mov	ecx, DWORD PTR _streamSpec$73479[ebp]
	call	?Init@CLimitedSequentialInStream@@QAEX_K@Z ; CLimitedSequentialInStream::Init
; Line 513
	mov	BYTE PTR __$EHRec$[ebp+8], 15		; 0000000fH
	lea	ecx, DWORD PTR _packStream$73458[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	jmp	$LN13@Decode
$LN12@Decode:
; Line 515
	lea	ecx, DWORD PTR _inStreams$[ebp]
	call	?Size@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QBEIXZ ; CObjectVector<CMyComPtr<ISequentialInStream> >::Size
	mov	DWORD PTR _num$[ebp], eax
; Line 516
	mov	edx, DWORD PTR _num$[ebp]
	push	edx
	lea	ecx, DWORD PTR _inStreamPointers$[ebp]
	call	??0?$CObjArray@PAUISequentialInStream@@@@QAE@I@Z ; CObjArray<ISequentialInStream *>::CObjArray<ISequentialInStream *>
	mov	BYTE PTR __$EHRec$[ebp+8], 20		; 00000014H
; Line 517
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@Decode
$LN4@Decode:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN5@Decode:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _num$[ebp]
	jae	SHORT $LN3@Decode
; Line 518
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	lea	ecx, DWORD PTR _inStreams$[ebp]
	call	??A?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@I@Z ; CObjectVector<CMyComPtr<ISequentialInStream> >::operator[]
	mov	ecx, eax
	call	??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
	mov	esi, eax
	lea	ecx, DWORD PTR _inStreamPointers$[ebp]
	call	??B?$CObjArray@PAUISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ ; CObjArray<ISequentialInStream *>::operator ISequentialInStream * *
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+ecx*4], esi
	jmp	SHORT $LN4@Decode
$LN3@Decode:
; Line 520
	cmp	DWORD PTR _outStream$[ebp], 0
	je	$LN2@Decode
; Line 522
	lea	ecx, DWORD PTR _progress2$73512[ebp]
	call	??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 21		; 00000015H
; Line 523
	cmp	DWORD PTR _compressProgress$[ebp], 0
	je	SHORT $LN1@Decode
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+92]
	mov	ecx, DWORD PTR [eax+96]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+92]
	call	?Is_PackSize_Correct_for_Coder@CMixer@NCoderMixer2@@QAE_NI@Z ; NCoderMixer2::CMixer::Is_PackSize_Correct_for_Coder
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@Decode
; Line 524
	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T74849[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 22		; 00000016H
	cmp	DWORD PTR $T74849[ebp], 0
	je	SHORT $LN85@Decode
	mov	ecx, DWORD PTR _compressProgress$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T74849[ebp]
	call	??0CDecProgress@N7z@NArchive@@QAE@PAUICompressProgressInfo@@@Z ; NArchive::N7z::CDecProgress::CDecProgress
	mov	DWORD PTR tv853[ebp], eax
	jmp	SHORT $LN86@Decode
$LN85@Decode:
	mov	DWORD PTR tv853[ebp], 0
$LN86@Decode:
	mov	edx, DWORD PTR tv853[ebp]
	mov	DWORD PTR $T74848[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 21		; 00000015H
	mov	eax, DWORD PTR $T74848[ebp]
	push	eax
	lea	ecx, DWORD PTR _progress2$73512[ebp]
	call	??4?$CMyComPtr@UICompressProgressInfo@@@@QAEPAUICompressProgressInfo@@PAU1@@Z ; CMyComPtr<ICompressProgressInfo>::operator=
$LN1@Decode:
; Line 526
	mov	ecx, DWORD PTR _outStream$[ebp]
	mov	DWORD PTR _outStreamPointer$73518[ebp], ecx
; Line 527
	lea	ecx, DWORD PTR _progress2$73512[ebp]
	call	??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *
	test	eax, eax
	je	SHORT $LN87@Decode
	lea	ecx, DWORD PTR _progress2$73512[ebp]
	call	??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *
	mov	DWORD PTR tv867[ebp], eax
	jmp	SHORT $LN88@Decode
$LN87@Decode:
	mov	edx, DWORD PTR _compressProgress$[ebp]
	mov	DWORD PTR tv867[ebp], edx
$LN88@Decode:
	mov	esi, esp
	mov	eax, DWORD PTR tv867[ebp]
	push	eax
	lea	ecx, DWORD PTR _outStreamPointer$73518[ebp]
	push	ecx
	lea	ecx, DWORD PTR _inStreamPointers$[ebp]
	call	??B?$CObjArray@PAUISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ ; CObjArray<ISequentialInStream *>::operator ISequentialInStream * *
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+92]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+92]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T74852[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 20		; 00000014H
	lea	ecx, DWORD PTR _progress2$73512[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 15		; 0000000fH
	lea	ecx, DWORD PTR _inStreamPointers$[ebp]
	call	??1?$CObjArray@PAUISequentialInStream@@@@QAE@XZ ; CObjArray<ISequentialInStream *>::~CObjArray<ISequentialInStream *>
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH
	lea	ecx, DWORD PTR _lockedInStream$[ebp]
	call	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _inStreams$[ebp]
	call	??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialInStream> >::~CObjectVector<CMyComPtr<ISequentialInStream> >
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _bindInfo$[ebp]
	call	??1CBindInfoEx@N7z@NArchive@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _folderInfo$[ebp]
	call	??1CFolderEx@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T74852[ebp]
	jmp	SHORT $LN63@Decode
$LN2@Decode:
; Line 531
	mov	ecx, DWORD PTR _inStreamMainRes$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _inStreamPointers$[ebp]
	call	??B?$CObjArray@PAUISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ ; CObjArray<ISequentialInStream *>::operator ISequentialInStream * *
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+84]
	call	?GetMainUnpackStream@CMixerST@NCoderMixer2@@QAEJPBQAUISequentialInStream@@PAPAU3@@Z ; NCoderMixer2::CMixerST::GetMainUnpackStream
	mov	DWORD PTR $T74855[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 15		; 0000000fH
	lea	ecx, DWORD PTR _inStreamPointers$[ebp]
	call	??1?$CObjArray@PAUISequentialInStream@@@@QAE@XZ ; CObjArray<ISequentialInStream *>::~CObjArray<ISequentialInStream *>
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH
	lea	ecx, DWORD PTR _lockedInStream$[ebp]
	call	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _inStreams$[ebp]
	call	??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialInStream> >::~CObjectVector<CMyComPtr<ISequentialInStream> >
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _bindInfo$[ebp]
	call	??1CBindInfoEx@N7z@NArchive@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _folderInfo$[ebp]
	call	??1CFolderEx@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T74855[ebp]
$LN63@Decode:
; Line 535
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN132@Decode
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 712				; 000002c8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	60					; 0000003cH
	npad	1
$LN132@Decode:
	DD	17					; 00000011H
	DD	$LN131@Decode
$LN131@Decode:
	DD	-52					; ffffffccH
	DD	28					; 0000001cH
	DD	$LN113@Decode
	DD	-136					; ffffff78H
	DD	76					; 0000004cH
	DD	$LN114@Decode
	DD	-184					; ffffff48H
	DD	16					; 00000010H
	DD	$LN115@Decode
	DD	-220					; ffffff24H
	DD	4
	DD	$LN116@Decode
	DD	-248					; ffffff08H
	DD	4
	DD	$LN117@Decode
	DD	-264					; fffffef8H
	DD	4
	DD	$LN118@Decode
	DD	-276					; fffffeecH
	DD	4
	DD	$LN119@Decode
	DD	-300					; fffffed4H
	DD	8
	DD	$LN120@Decode
	DD	-324					; fffffebcH
	DD	4
	DD	$LN121@Decode
	DD	-344					; fffffea8H
	DD	4
	DD	$LN122@Decode
	DD	-356					; fffffe9cH
	DD	4
	DD	$LN123@Decode
	DD	-392					; fffffe78H
	DD	12					; 0000000cH
	DD	$LN124@Decode
	DD	-408					; fffffe68H
	DD	4
	DD	$LN125@Decode
	DD	-432					; fffffe50H
	DD	4
	DD	$LN126@Decode
	DD	-472					; fffffe28H
	DD	4
	DD	$LN127@Decode
	DD	-484					; fffffe1cH
	DD	4
	DD	$LN128@Decode
	DD	-496					; fffffe10H
	DD	4
	DD	$LN129@Decode
$LN129@Decode:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN128@Decode:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	103					; 00000067H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	50					; 00000032H
	DB	0
$LN127@Decode:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	0
$LN126@Decode:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN125@Decode:
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN124@Decode:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	115					; 00000073H
	DB	0
$LN123@Decode:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	0
$LN122@Decode:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN121@Decode:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	70					; 00000046H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	104					; 00000068H
	DB	77					; 0000004dH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN120@Decode:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN119@Decode:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	66					; 00000042H
	DB	83					; 00000053H
	DB	84					; 00000054H
	DB	82					; 00000052H
	DB	0
$LN118@Decode:
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	83					; 00000053H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	0
$LN117@Decode:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	77					; 0000004dH
	DB	116					; 00000074H
	DB	0
$LN116@Decode:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN115@Decode:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	0
$LN114@Decode:
	DB	98					; 00000062H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	0
$LN113@Decode:
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$0:
	lea	ecx, DWORD PTR _folderInfo$[ebp]
	jmp	??1CFolderEx@N7z@NArchive@@QAE@XZ
__unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$1:
	lea	ecx, DWORD PTR _bindInfo$[ebp]
	jmp	??1CBindInfoEx@N7z@NArchive@@QAE@XZ
__unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$2:
	mov	eax, DWORD PTR $T74805[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$3:
	mov	eax, DWORD PTR $T74811[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$4:
	lea	ecx, DWORD PTR _cod$73162[ebp]
	jmp	??1CCreatedCoder@@QAE@XZ
__unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$5:
	lea	ecx, DWORD PTR _setDecoderProperties$73221[ebp]
	jmp	??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::~CMyComPtr<ICompressSetDecoderProperties2>
__unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$6:
	lea	ecx, DWORD PTR _setCoderMt$73277[ebp]
	jmp	??1?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderMt>::~CMyComPtr<ICompressSetCoderMt>
__unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$7:
	lea	ecx, DWORD PTR _cryptoSetPassword$73321[ebp]
	jmp	??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ ; CMyComPtr<ICryptoSetPassword>::~CMyComPtr<ICryptoSetPassword>
__unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$8:
	lea	ecx, DWORD PTR _passwordBSTR$73327[ebp]
	jmp	??1CMyComBSTR@@QAE@XZ			; CMyComBSTR::~CMyComBSTR
__unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$9:
	lea	ecx, DWORD PTR _buffer$73334[ebp]
	jmp	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
__unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$10:
	lea	ecx, DWORD PTR _setFinishMode$73387[ebp]
	jmp	??1?$CMyComPtr@UICompressSetFinishMode@@@@QAE@XZ ; CMyComPtr<ICompressSetFinishMode>::~CMyComPtr<ICompressSetFinishMode>
__unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$11:
	lea	ecx, DWORD PTR _packSizes$73397[ebp]
	jmp	??1?$CObjArray@_K@@QAE@XZ		; CObjArray<unsigned __int64>::~CObjArray<unsigned __int64>
__unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$12:
	lea	ecx, DWORD PTR _packSizesPointers$73419[ebp]
	jmp	??1?$CObjArray@PB_K@@QAE@XZ		; CObjArray<unsigned __int64 const *>::~CObjArray<unsigned __int64 const *>
__unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$13:
	lea	ecx, DWORD PTR _inStreams$[ebp]
	jmp	??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialInStream> >::~CObjectVector<CMyComPtr<ISequentialInStream> >
__unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$14:
	mov	eax, DWORD PTR $T74831[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$15:
	lea	ecx, DWORD PTR _lockedInStream$[ebp]
	jmp	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
__unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$16:
	lea	ecx, DWORD PTR _packStream$73458[ebp]
	jmp	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
__unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$17:
	mov	eax, DWORD PTR $T74837[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$18:
	mov	eax, DWORD PTR $T74841[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$19:
	mov	eax, DWORD PTR $T74845[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$20:
	lea	ecx, DWORD PTR _inStreamPointers$[ebp]
	jmp	??1?$CObjArray@PAUISequentialInStream@@@@QAE@XZ ; CObjArray<ISequentialInStream *>::~CObjArray<ISequentialInStream *>
__unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$21:
	lea	ecx, DWORD PTR _progress2$73512[ebp]
	jmp	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
__unwindfunclet$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z$22:
	mov	eax, DWORD PTR $T74849[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-716]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z ENDP ; NArchive::N7z::CDecoder::Decode
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?BoolToInt@@YGH_N@Z
_TEXT	SEGMENT
_value$ = 8						; size = 1
?BoolToInt@@YGH_N@Z PROC				; BoolToInt, COMDAT
; File c:\workspace\7z1505-src\cpp\common\defs.h
; Line 15
	push	ebp
	mov	ebp, esp
	movzx	eax, BYTE PTR _value$[ebp]
	neg	eax
	sbb	eax, eax
	neg	eax
	pop	ebp
	ret	4
?BoolToInt@@YGH_N@Z ENDP				; BoolToInt
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CMyComBSTR@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMyComBSTR@@QAE@XZ PROC				; CMyComBSTR::CMyComBSTR, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 87
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CMyComBSTR@@QAE@XZ ENDP				; CMyComBSTR::CMyComBSTR
_TEXT	ENDS
EXTRN	__imp__SysFreeString@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CMyComBSTR@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CMyComBSTR@@QAE@XZ PROC				; CMyComBSTR::~CMyComBSTR, COMDAT
; _this$ = ecx
; Line 88
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__SysFreeString@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CMyComBSTR@@QAE@XZ ENDP				; CMyComBSTR::~CMyComBSTR
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??ICMyComBSTR@@QAEPAPA_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??ICMyComBSTR@@QAEPAPA_WXZ PROC				; CMyComBSTR::operator&, COMDAT
; _this$ = ecx
; Line 89
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??ICMyComBSTR@@QAEPAPA_WXZ ENDP				; CMyComBSTR::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??BCMyComBSTR@@QBEPB_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BCMyComBSTR@@QBEPB_WXZ PROC				; CMyComBSTR::operator wchar_t const *, COMDAT
; _this$ = ecx
; Line 90
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??BCMyComBSTR@@QBEPB_WXZ ENDP				; CMyComBSTR::operator wchar_t const *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SetStream@CLimitedSequentialInStream@@QAEXPAUISequentialInStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_stream$ = 8						; size = 4
?SetStream@CLimitedSequentialInStream@@QAEXPAUISequentialInStream@@@Z PROC ; CLimitedSequentialInStream::SetStream, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\limitedstreams.h
; Line 20
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetStream@CLimitedSequentialInStream@@QAEXPAUISequentialInStream@@@Z ENDP ; CLimitedSequentialInStream::SetStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Init@CLimitedSequentialInStream@@QAEX_K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_streamSize$ = 8					; size = 8
?Init@CLimitedSequentialInStream@@QAEX_K@Z PROC		; CLimitedSequentialInStream::Init, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 24
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _streamSize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR _streamSize$[ebp+4]
	mov	DWORD PTR [eax+20], edx
; Line 25
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0
	mov	DWORD PTR [eax+28], 0
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+32], 0
; Line 27
	mov	esp, ebp
	pop	ebp
	ret	8
?Init@CLimitedSequentialInStream@@QAEX_K@Z ENDP		; CLimitedSequentialInStream::Init
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Len@UString@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Len@UString@@QBEIXZ PROC				; UString::Len, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 472
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Len@UString@@QBEIXZ ENDP				; UString::Len
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Empty@UString@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Empty@UString@@QAEXXZ PROC				; UString::Empty, COMDAT
; _this$ = ecx
; Line 474
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	xor	eax, eax
	mov	WORD PTR [edx], ax
	mov	esp, ebp
	pop	ebp
	ret	0
?Empty@UString@@QAEXXZ ENDP				; UString::Empty
_TEXT	ENDS
PUBLIC	??B?$CMyComPtr@UICompressCoder2@@@@QBEPAUICompressCoder2@@XZ ; CMyComPtr<ICompressCoder2>::operator ICompressCoder2 *
PUBLIC	??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator ICompressCoder *
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetUnknown@CCoder@NCoderMixer2@@QBEPAUIUnknown@@XZ
_TEXT	SEGMENT
tv80 = -8						; size = 4
_this$ = -4						; size = 4
?GetUnknown@CCoder@NCoderMixer2@@QBEPAUIUnknown@@XZ PROC ; NCoderMixer2::CCoder::GetUnknown, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\common\codermixer2.h
; Line 209
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 210
	mov	ecx, DWORD PTR _this$[ebp]
	call	??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator ICompressCoder *
	test	eax, eax
	je	SHORT $LN3@GetUnknown
	mov	ecx, DWORD PTR _this$[ebp]
	call	??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator ICompressCoder *
	mov	DWORD PTR tv80[ebp], eax
	jmp	SHORT $LN4@GetUnknown
$LN3@GetUnknown:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??B?$CMyComPtr@UICompressCoder2@@@@QBEPAUICompressCoder2@@XZ ; CMyComPtr<ICompressCoder2>::operator ICompressCoder2 *
	mov	DWORD PTR tv80[ebp], eax
$LN4@GetUnknown:
	mov	eax, DWORD PTR tv80[ebp]
; Line 211
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnknown@CCoder@NCoderMixer2@@QBEPAUIUnknown@@XZ ENDP ; NCoderMixer2::CCoder::GetUnknown
_TEXT	ENDS
PUBLIC	??1?$CObjectVector@VCStreamBinder@@@@QAE@XZ	; CObjectVector<CStreamBinder>::~CObjectVector<CStreamBinder>
PUBLIC	??1CMixer@NCoderMixer2@@QAE@XZ			; NCoderMixer2::CMixer::~CMixer
PUBLIC	??0?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ ; CObjectVector<NCoderMixer2::CCoderMT>::CObjectVector<NCoderMixer2::CCoderMT>
PUBLIC	??0?$CObjectVector@VCStreamBinder@@@@QAE@XZ	; CObjectVector<CStreamBinder>::CObjectVector<CStreamBinder>
PUBLIC	??_7CMixerMT@NCoderMixer2@@6BCMixer@1@@		; NCoderMixer2::CMixerMT::`vftable'
PUBLIC	??_7CMixerMT@NCoderMixer2@@6BIUnknown@@@	; NCoderMixer2::CMixerMT::`vftable'
PUBLIC	??0CMyUnknownImp@@QAE@XZ			; CMyUnknownImp::CMyUnknownImp
PUBLIC	??0CMixer@NCoderMixer2@@QAE@_N@Z		; NCoderMixer2::CMixer::CMixer
PUBLIC	??0IUnknown@@QAE@XZ				; IUnknown::IUnknown
PUBLIC	??_R4CMixerMT@NCoderMixer2@@6BIUnknown@@@	; NCoderMixer2::CMixerMT::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCMixerMT@NCoderMixer2@@@8		; NCoderMixer2::CMixerMT `RTTI Type Descriptor'
PUBLIC	??_R3CMixerMT@NCoderMixer2@@8			; NCoderMixer2::CMixerMT::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMixerMT@NCoderMixer2@@8			; NCoderMixer2::CMixerMT::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMixerMT@NCoderMixer2@@8		; NCoderMixer2::CMixerMT::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIUnknown@@@8				; IUnknown `RTTI Type Descriptor'
PUBLIC	??_R3IUnknown@@8				; IUnknown::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IUnknown@@8				; IUnknown::`RTTI Base Class Array'
PUBLIC	??_R13?0A@EA@CMixer@NCoderMixer2@@8		; NCoderMixer2::CMixer::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AVCMixer@NCoderMixer2@@@8			; NCoderMixer2::CMixer `RTTI Type Descriptor'
PUBLIC	??_R3CMixer@NCoderMixer2@@8			; NCoderMixer2::CMixer::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMixer@NCoderMixer2@@8			; NCoderMixer2::CMixer::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMixer@NCoderMixer2@@8		; NCoderMixer2::CMixer::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1GI@?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (104,-1,0,64)'
PUBLIC	??_R0?AVCMyUnknownImp@@@8			; CMyUnknownImp `RTTI Type Descriptor'
PUBLIC	??_R3CMyUnknownImp@@8				; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMyUnknownImp@@8				; CMyUnknownImp::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?QueryInterface@CMixerMT@NCoderMixer2@@UAGJABU_GUID@@PAPAX@Z ; NCoderMixer2::CMixerMT::QueryInterface
PUBLIC	?AddRef@CMixerMT@NCoderMixer2@@UAGKXZ		; NCoderMixer2::CMixerMT::AddRef
PUBLIC	?Release@CMixerMT@NCoderMixer2@@UAGKXZ		; NCoderMixer2::CMixerMT::Release
PUBLIC	??_R4CMixerMT@NCoderMixer2@@6BCMixer@1@@	; NCoderMixer2::CMixerMT::`RTTI Complete Object Locator'
PUBLIC	?SetCoderInfo@CMixerMT@NCoderMixer2@@UAEXIPB_KPBQB_K@Z ; NCoderMixer2::CMixerMT::SetCoderInfo
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?SetBindInfo@CMixerMT@NCoderMixer2@@UAEJABUCBindInfo@2@@Z:PROC ; NCoderMixer2::CMixerMT::SetBindInfo
EXTRN	?AddCoder@CMixerMT@NCoderMixer2@@UAEXABUCCreatedCoder@@@Z:PROC ; NCoderMixer2::CMixerMT::AddCoder
EXTRN	?GetCoder@CMixerMT@NCoderMixer2@@UAEAAVCCoder@2@I@Z:PROC ; NCoderMixer2::CMixerMT::GetCoder
EXTRN	?SelectMainCoder@CMixerMT@NCoderMixer2@@UAEX_N@Z:PROC ; NCoderMixer2::CMixerMT::SelectMainCoder
EXTRN	?ReInit@CMixerMT@NCoderMixer2@@UAEXXZ:PROC	; NCoderMixer2::CMixerMT::ReInit
EXTRN	?Code@CMixerMT@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z:PROC ; NCoderMixer2::CMixerMT::Code
EXTRN	?GetBondStreamSize@CMixerMT@NCoderMixer2@@UBE_KI@Z:PROC ; NCoderMixer2::CMixerMT::GetBondStreamSize
;	COMDAT ??_R4CMixerMT@NCoderMixer2@@6BCMixer@1@@
rdata$r	SEGMENT
??_R4CMixerMT@NCoderMixer2@@6BCMixer@1@@ DD 00H		; NCoderMixer2::CMixerMT::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVCMixerMT@NCoderMixer2@@@8
	DD	FLAT:??_R3CMixerMT@NCoderMixer2@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R2CMyUnknownImp@@8
rdata$r	SEGMENT
??_R2CMyUnknownImp@@8 DD FLAT:??_R1A@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMyUnknownImp@@8
rdata$r	SEGMENT
??_R3CMyUnknownImp@@8 DD 00H				; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMyUnknownImp@@@8
_DATA	SEGMENT
??_R0?AVCMyUnknownImp@@@8 DD FLAT:??_7type_info@@6B@	; CMyUnknownImp `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMyUnknownImp@@', 00H
_DATA	ENDS
;	COMDAT ??_R1GI@?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R1GI@?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (104,-1,0,64)'
	DD	00H
	DD	068H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CMixer@NCoderMixer2@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CMixer@NCoderMixer2@@8 DD FLAT:??_R0?AVCMixer@NCoderMixer2@@@8 ; NCoderMixer2::CMixer::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMixer@NCoderMixer2@@8
rdata$r	ENDS
;	COMDAT ??_R2CMixer@NCoderMixer2@@8
rdata$r	SEGMENT
??_R2CMixer@NCoderMixer2@@8 DD FLAT:??_R1A@?0A@EA@CMixer@NCoderMixer2@@8 ; NCoderMixer2::CMixer::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMixer@NCoderMixer2@@8
rdata$r	SEGMENT
??_R3CMixer@NCoderMixer2@@8 DD 00H			; NCoderMixer2::CMixer::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMixer@NCoderMixer2@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMixer@NCoderMixer2@@@8
_DATA	SEGMENT
??_R0?AVCMixer@NCoderMixer2@@@8 DD FLAT:??_7type_info@@6B@ ; NCoderMixer2::CMixer `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMixer@NCoderMixer2@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@CMixer@NCoderMixer2@@8
rdata$r	SEGMENT
??_R13?0A@EA@CMixer@NCoderMixer2@@8 DD FLAT:??_R0?AVCMixer@NCoderMixer2@@@8 ; NCoderMixer2::CMixer::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMixer@NCoderMixer2@@8
rdata$r	ENDS
;	COMDAT ??_R2IUnknown@@8
rdata$r	SEGMENT
??_R2IUnknown@@8 DD FLAT:??_R1A@?0A@EA@IUnknown@@8	; IUnknown::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3IUnknown@@8
rdata$r	SEGMENT
??_R3IUnknown@@8 DD 00H					; IUnknown::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIUnknown@@@8
_DATA	SEGMENT
??_R0?AUIUnknown@@@8 DD FLAT:??_7type_info@@6B@		; IUnknown `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIUnknown@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IUnknown@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CMixerMT@NCoderMixer2@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CMixerMT@NCoderMixer2@@8 DD FLAT:??_R0?AVCMixerMT@NCoderMixer2@@@8 ; NCoderMixer2::CMixerMT::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMixerMT@NCoderMixer2@@8
rdata$r	ENDS
;	COMDAT ??_R2CMixerMT@NCoderMixer2@@8
rdata$r	SEGMENT
??_R2CMixerMT@NCoderMixer2@@8 DD FLAT:??_R1A@?0A@EA@CMixerMT@NCoderMixer2@@8 ; NCoderMixer2::CMixerMT::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CMixer@NCoderMixer2@@8
	DD	FLAT:??_R1GI@?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CMixerMT@NCoderMixer2@@8
rdata$r	SEGMENT
??_R3CMixerMT@NCoderMixer2@@8 DD 00H			; NCoderMixer2::CMixerMT::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2CMixerMT@NCoderMixer2@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMixerMT@NCoderMixer2@@@8
_DATA	SEGMENT
??_R0?AVCMixerMT@NCoderMixer2@@@8 DD FLAT:??_7type_info@@6B@ ; NCoderMixer2::CMixerMT `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMixerMT@NCoderMixer2@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CMixerMT@NCoderMixer2@@6BIUnknown@@@
rdata$r	SEGMENT
??_R4CMixerMT@NCoderMixer2@@6BIUnknown@@@ DD 00H	; NCoderMixer2::CMixerMT::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCMixerMT@NCoderMixer2@@@8
	DD	FLAT:??_R3CMixerMT@NCoderMixer2@@8
rdata$r	ENDS
;	COMDAT ??_7CMixerMT@NCoderMixer2@@6BCMixer@1@@
CONST	SEGMENT
??_7CMixerMT@NCoderMixer2@@6BCMixer@1@@ DD FLAT:??_R4CMixerMT@NCoderMixer2@@6BCMixer@1@@ ; NCoderMixer2::CMixerMT::`vftable'
	DD	FLAT:?SetBindInfo@CMixerMT@NCoderMixer2@@UAEJABUCBindInfo@2@@Z
	DD	FLAT:?AddCoder@CMixerMT@NCoderMixer2@@UAEXABUCCreatedCoder@@@Z
	DD	FLAT:?GetCoder@CMixerMT@NCoderMixer2@@UAEAAVCCoder@2@I@Z
	DD	FLAT:?SelectMainCoder@CMixerMT@NCoderMixer2@@UAEX_N@Z
	DD	FLAT:?ReInit@CMixerMT@NCoderMixer2@@UAEXXZ
	DD	FLAT:?SetCoderInfo@CMixerMT@NCoderMixer2@@UAEXIPB_KPBQB_K@Z
	DD	FLAT:?Code@CMixerMT@NCoderMixer2@@UAEJPBQAUISequentialInStream@@PBQAUISequentialOutStream@@PAUICompressProgressInfo@@@Z
	DD	FLAT:?GetBondStreamSize@CMixerMT@NCoderMixer2@@UBE_KI@Z
CONST	ENDS
;	COMDAT ??_7CMixerMT@NCoderMixer2@@6BIUnknown@@@
CONST	SEGMENT
??_7CMixerMT@NCoderMixer2@@6BIUnknown@@@ DD FLAT:??_R4CMixerMT@NCoderMixer2@@6BIUnknown@@@ ; NCoderMixer2::CMixerMT::`vftable'
	DD	FLAT:?QueryInterface@CMixerMT@NCoderMixer2@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CMixerMT@NCoderMixer2@@UAGKXZ
	DD	FLAT:?Release@CMixerMT@NCoderMixer2@@UAGKXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CMixerMT@NCoderMixer2@@QAE@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CMixerMT@NCoderMixer2@@QAE@_N@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CMixerMT@NCoderMixer2@@QAE@_N@Z$1
__ehfuncinfo$??0CMixerMT@NCoderMixer2@@QAE@_N@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CMixerMT@NCoderMixer2@@QAE@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CMixerMT@NCoderMixer2@@QAE@_N@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_encodeMode$ = 8					; size = 1
??0CMixerMT@NCoderMixer2@@QAE@_N@Z PROC			; NCoderMixer2::CMixerMT::CMixerMT, COMDAT
; _this$ = ecx
; Line 430
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CMixerMT@NCoderMixer2@@QAE@_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	movzx	eax, BYTE PTR _encodeMode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CMixer@NCoderMixer2@@QAE@_N@Z	; NCoderMixer2::CMixer::CMixer
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 104				; 00000068H
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7CMixerMT@NCoderMixer2@@6BIUnknown@@@
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], OFFSET ??_7CMixerMT@NCoderMixer2@@6BCMixer@1@@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 108				; 0000006cH
	call	??0?$CObjectVector@VCStreamBinder@@@@QAE@XZ ; CObjectVector<CStreamBinder>::CObjectVector<CStreamBinder>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	call	??0?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ ; CObjectVector<NCoderMixer2::CCoderMT>::CObjectVector<NCoderMixer2::CCoderMT>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CMixerMT@NCoderMixer2@@QAE@_N@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1CMixer@NCoderMixer2@@QAE@XZ
__unwindfunclet$??0CMixerMT@NCoderMixer2@@QAE@_N@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 108				; 0000006cH
	jmp	??1?$CObjectVector@VCStreamBinder@@@@QAE@XZ ; CObjectVector<CStreamBinder>::~CObjectVector<CStreamBinder>
__ehhandler$??0CMixerMT@NCoderMixer2@@QAE@_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CMixerMT@NCoderMixer2@@QAE@_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CMixerMT@NCoderMixer2@@QAE@_N@Z ENDP			; NCoderMixer2::CMixerMT::CMixerMT
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CMyUnknownImp@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMyUnknownImp@@QAE@XZ PROC				; CMyUnknownImp::CMyUnknownImp, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 167
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CMyUnknownImp@@QAE@XZ ENDP				; CMyUnknownImp::CMyUnknownImp
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0IUnknown@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IUnknown@@QAE@XZ PROC				; IUnknown::IUnknown, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0IUnknown@@QAE@XZ ENDP				; IUnknown::IUnknown
_TEXT	ENDS
PUBLIC	??1?$CRecordVector@_N@@QAE@XZ			; CRecordVector<bool>::~CRecordVector<bool>
PUBLIC	??0?$CRecordVector@_N@@QAE@XZ			; CRecordVector<bool>::CRecordVector<bool>
PUBLIC	??_7CMixer@NCoderMixer2@@6B@			; NCoderMixer2::CMixer::`vftable'
PUBLIC	??_R4CMixer@NCoderMixer2@@6B@			; NCoderMixer2::CMixer::`RTTI Complete Object Locator'
PUBLIC	?SetBindInfo@CMixer@NCoderMixer2@@UAEJABUCBindInfo@2@@Z ; NCoderMixer2::CMixer::SetBindInfo
EXTRN	__purecall:PROC
;	COMDAT ??_R4CMixer@NCoderMixer2@@6B@
; File c:\workspace\7z1505-src\cpp\7zip\archive\common\codermixer2.h
rdata$r	SEGMENT
??_R4CMixer@NCoderMixer2@@6B@ DD 00H			; NCoderMixer2::CMixer::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCMixer@NCoderMixer2@@@8
	DD	FLAT:??_R3CMixer@NCoderMixer2@@8
rdata$r	ENDS
;	COMDAT ??_7CMixer@NCoderMixer2@@6B@
CONST	SEGMENT
??_7CMixer@NCoderMixer2@@6B@ DD FLAT:??_R4CMixer@NCoderMixer2@@6B@ ; NCoderMixer2::CMixer::`vftable'
	DD	FLAT:?SetBindInfo@CMixer@NCoderMixer2@@UAEJABUCBindInfo@2@@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CMixer@NCoderMixer2@@QAE@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CMixer@NCoderMixer2@@QAE@_N@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CMixer@NCoderMixer2@@QAE@_N@Z$1
__ehfuncinfo$??0CMixer@NCoderMixer2@@QAE@_N@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CMixer@NCoderMixer2@@QAE@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CMixer@NCoderMixer2@@QAE@_N@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_encodeMode$ = 8					; size = 1
??0CMixer@NCoderMixer2@@QAE@_N@Z PROC			; NCoderMixer2::CMixer::CMixer, COMDAT
; _this$ = ecx
; Line 245
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CMixer@NCoderMixer2@@QAE@_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CMixer@NCoderMixer2@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CBindInfo@NCoderMixer2@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	call	??0?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::CRecordVector<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	call	??0?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::CRecordVector<bool>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR _encodeMode$[ebp]
	mov	BYTE PTR [ecx+92], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+96], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CMixer@NCoderMixer2@@QAE@_N@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1CBindInfo@NCoderMixer2@@QAE@XZ
__unwindfunclet$??0CMixer@NCoderMixer2@@QAE@_N@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	jmp	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
__ehhandler$??0CMixer@NCoderMixer2@@QAE@_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CMixer@NCoderMixer2@@QAE@_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CMixer@NCoderMixer2@@QAE@_N@Z ENDP			; NCoderMixer2::CMixer::CMixer
PUBLIC	?Clear@?$CRecordVector@_N@@QAEXXZ		; CRecordVector<bool>::Clear
PUBLIC	??4CBindInfo@NCoderMixer2@@QAEAAU01@ABU01@@Z	; NCoderMixer2::CBindInfo::operator=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetBindInfo@CMixer@NCoderMixer2@@UAEJABUCBindInfo@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_bindInfo$ = 8						; size = 4
?SetBindInfo@CMixer@NCoderMixer2@@UAEJABUCBindInfo@2@@Z PROC ; NCoderMixer2::CMixer::SetBindInfo, COMDAT
; _this$ = ecx
; Line 265
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 266
	mov	eax, DWORD PTR _bindInfo$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??4CBindInfo@NCoderMixer2@@QAEAAU01@ABU01@@Z
; Line 267
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	call	?Clear@?$CRecordVector@_N@@QAEXXZ	; CRecordVector<bool>::Clear
; Line 268
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+96], 0
; Line 269
	xor	eax, eax
; Line 270
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetBindInfo@CMixer@NCoderMixer2@@UAEJABUCBindInfo@2@@Z ENDP ; NCoderMixer2::CMixer::SetBindInfo
_TEXT	ENDS
PUBLIC	??4?$CRecordVector@I@@QAEAAV0@ABV0@@Z		; CRecordVector<unsigned int>::operator=
PUBLIC	??4?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAV0@ABV0@@Z ; CRecordVector<NCoderMixer2::CBond>::operator=
PUBLIC	??4?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAV0@ABV0@@Z ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4CBindInfo@NCoderMixer2@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4CBindInfo@NCoderMixer2@@QAEAAU01@ABU01@@Z PROC	; NCoderMixer2::CBindInfo::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAV0@ABV0@@Z ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator=
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAV0@ABV0@@Z ; CRecordVector<NCoderMixer2::CBond>::operator=
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 24					; 00000018H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??4?$CRecordVector@I@@QAEAAV0@ABV0@@Z	; CRecordVector<unsigned int>::operator=
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR [eax+36], edx
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 40					; 00000028H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??4?$CRecordVector@I@@QAEAAV0@ABV0@@Z	; CRecordVector<unsigned int>::operator=
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 52					; 00000034H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??4?$CRecordVector@I@@QAEAAV0@ABV0@@Z	; CRecordVector<unsigned int>::operator=
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4CBindInfo@NCoderMixer2@@QAEAAU01@ABU01@@Z ENDP	; NCoderMixer2::CBindInfo::operator=
_TEXT	ENDS
PUBLIC	_==@8
EXTRN	_IID_IUnknown:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@CMixerMT@NCoderMixer2@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CMixerMT@NCoderMixer2@@UAGJABU_GUID@@PAPAX@Z PROC ; NCoderMixer2::CMixerMT::QueryInterface, COMDAT
; Line 415
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN1@QueryInter
$LN2@QueryInter:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN3@QueryInter
$LN1@QueryInter:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+104], edx
	xor	eax, eax
$LN3@QueryInter:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CMixerMT@NCoderMixer2@@UAGJABU_GUID@@PAPAX@Z ENDP ; NCoderMixer2::CMixerMT::QueryInterface
_TEXT	ENDS
PUBLIC	_IsEqualGUID@8
; Function compile flags: /Odtp /RTCsu
;	COMDAT _==@8
_TEXT	SEGMENT
_guidOne$ = 8						; size = 4
_guidOther$ = 12					; size = 4
_==@8	PROC						; COMDAT
; File c:\program files (x86)\microsoft sdks\windows\v7.0a\include\guiddef.h
; Line 193
	push	ebp
	mov	ebp, esp
; Line 194
	mov	eax, DWORD PTR _guidOther$[ebp]
	push	eax
	mov	ecx, DWORD PTR _guidOne$[ebp]
	push	ecx
	call	_IsEqualGUID@8
; Line 195
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_==@8	ENDP
_TEXT	ENDS
EXTRN	_memcmp:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT _IsEqualGUID@8
_TEXT	SEGMENT
_rguid1$ = 8						; size = 4
_rguid2$ = 12						; size = 4
_IsEqualGUID@8 PROC					; COMDAT
; Line 160
	push	ebp
	mov	ebp, esp
; Line 161
	push	16					; 00000010H
	mov	eax, DWORD PTR _rguid2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rguid1$[ebp]
	push	ecx
	call	_memcmp
	add	esp, 12					; 0000000cH
	neg	eax
	sbb	eax, eax
	add	eax, 1
; Line 162
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_IsEqualGUID@8 ENDP
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CMixerMT@NCoderMixer2@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CMixerMT@NCoderMixer2@@UAGKXZ PROC		; NCoderMixer2::CMixerMT::AddRef, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\archive\common\codermixer2.h
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+104], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CMixerMT@NCoderMixer2@@UAGKXZ ENDP		; NCoderMixer2::CMixerMT::AddRef
_TEXT	ENDS
PUBLIC	??_GCMixerMT@NCoderMixer2@@QAEPAXI@Z		; NCoderMixer2::CMixerMT::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CMixerMT@NCoderMixer2@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T74965 = -8						; size = 4
$T74964 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CMixerMT@NCoderMixer2@@UAGKXZ PROC		; NCoderMixer2::CMixerMT::Release, COMDAT
; Line 415
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+104], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+104]
	jmp	SHORT $LN2@Release
$LN1@Release:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T74965[ebp], edx
	mov	eax, DWORD PTR $T74965[ebp]
	mov	DWORD PTR $T74964[ebp], eax
	cmp	DWORD PTR $T74964[ebp], 0
	je	SHORT $LN4@Release
	push	1
	mov	ecx, DWORD PTR $T74964[ebp]
	call	??_GCMixerMT@NCoderMixer2@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release
$LN4@Release:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release:
	xor	eax, eax
$LN2@Release:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CMixerMT@NCoderMixer2@@UAGKXZ ENDP		; NCoderMixer2::CMixerMT::Release
_TEXT	ENDS
PUBLIC	??A?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CCoderMT>::operator[]
EXTRN	?SetCoderInfo@CCoder@NCoderMixer2@@QAEXPB_KPBQB_K@Z:PROC ; NCoderMixer2::CCoder::SetCoderInfo
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetCoderInfo@CMixerMT@NCoderMixer2@@UAEXIPB_KPBQB_K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_coderIndex$ = 8					; size = 4
_unpackSize$ = 12					; size = 4
_packSizes$ = 16					; size = 4
?SetCoderInfo@CMixerMT@NCoderMixer2@@UAEXIPB_KPBQB_K@Z PROC ; NCoderMixer2::CMixerMT::SetCoderInfo, COMDAT
; _this$ = ecx
; Line 423
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _packSizes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _unpackSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _coderIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 116				; 00000074H
	call	??A?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@I@Z ; CObjectVector<NCoderMixer2::CCoderMT>::operator[]
	add	eax, 24					; 00000018H
	mov	ecx, eax
	call	?SetCoderInfo@CCoder@NCoderMixer2@@QAEXPB_KPBQB_K@Z ; NCoderMixer2::CCoder::SetCoderInfo
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetCoderInfo@CMixerMT@NCoderMixer2@@UAEXIPB_KPBQB_K@Z ENDP ; NCoderMixer2::CMixerMT::SetCoderInfo
_TEXT	ENDS
PUBLIC	??1CMixerMT@NCoderMixer2@@QAE@XZ		; NCoderMixer2::CMixerMT::~CMixerMT
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCMixerMT@NCoderMixer2@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCMixerMT@NCoderMixer2@@QAEPAXI@Z PROC		; NCoderMixer2::CMixerMT::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CMixerMT@NCoderMixer2@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCMixerMT@NCoderMixer2@@QAEPAXI@Z ENDP		; NCoderMixer2::CMixerMT::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CMixer@NCoderMixer2@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CMixer@NCoderMixer2@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CMixer@NCoderMixer2@@QAE@XZ$1
__ehfuncinfo$??1CMixer@NCoderMixer2@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CMixer@NCoderMixer2@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CMixer@NCoderMixer2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CMixer@NCoderMixer2@@QAE@XZ PROC			; NCoderMixer2::CMixer::~CMixer, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CMixer@NCoderMixer2@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	call	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	call	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1CBindInfo@NCoderMixer2@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CMixer@NCoderMixer2@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1CBindInfo@NCoderMixer2@@QAE@XZ
__unwindfunclet$??1CMixer@NCoderMixer2@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	jmp	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
__ehhandler$??1CMixer@NCoderMixer2@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CMixer@NCoderMixer2@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CMixer@NCoderMixer2@@QAE@XZ ENDP			; NCoderMixer2::CMixer::~CMixer
PUBLIC	??1?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ ; CObjectVector<NCoderMixer2::CCoderMT>::~CObjectVector<NCoderMixer2::CCoderMT>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CMixerMT@NCoderMixer2@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CMixerMT@NCoderMixer2@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CMixerMT@NCoderMixer2@@QAE@XZ$1
__ehfuncinfo$??1CMixerMT@NCoderMixer2@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CMixerMT@NCoderMixer2@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CMixerMT@NCoderMixer2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CMixerMT@NCoderMixer2@@QAE@XZ PROC			; NCoderMixer2::CMixerMT::~CMixerMT, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CMixerMT@NCoderMixer2@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	call	??1?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ ; CObjectVector<NCoderMixer2::CCoderMT>::~CObjectVector<NCoderMixer2::CCoderMT>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 108				; 0000006cH
	call	??1?$CObjectVector@VCStreamBinder@@@@QAE@XZ ; CObjectVector<CStreamBinder>::~CObjectVector<CStreamBinder>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1CMixer@NCoderMixer2@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CMixerMT@NCoderMixer2@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1CMixer@NCoderMixer2@@QAE@XZ
__unwindfunclet$??1CMixerMT@NCoderMixer2@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 108				; 0000006cH
	jmp	??1?$CObjectVector@VCStreamBinder@@@@QAE@XZ ; CObjectVector<CStreamBinder>::~CObjectVector<CStreamBinder>
__ehhandler$??1CMixerMT@NCoderMixer2@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CMixerMT@NCoderMixer2@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CMixerMT@NCoderMixer2@@QAE@XZ ENDP			; NCoderMixer2::CMixerMT::~CMixerMT
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsSimpleCoder@CCoderInfo@N7z@NArchive@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsSimpleCoder@CCoderInfo@N7z@NArchive@@QBE_NXZ PROC	; NArchive::N7z::CCoderInfo::IsSimpleCoder, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zitem.h
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+16], 1
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSimpleCoder@CCoderInfo@N7z@NArchive@@QBE_NXZ ENDP	; NArchive::N7z::CCoderInfo::IsSimpleCoder
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsDecodingSupported@CFolder@N7z@NArchive@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsDecodingSupported@CFolder@N7z@NArchive@@QBE_NXZ PROC	; NArchive::N7z::CFolder::IsDecodingSupported, COMDAT
; _this$ = ecx
; Line 45
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEIXZ ; CObjArray2<NArchive::N7z::CCoderInfo>::Size
	mov	ecx, 32					; 00000020H
	cmp	ecx, eax
	sbb	eax, eax
	add	eax, 1
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsDecodingSupported@CFolder@N7z@NArchive@@QBE_NXZ ENDP	; NArchive::N7z::CFolder::IsDecodingSupported
_TEXT	ENDS
PUBLIC	??B?$CObjArray2@I@@QBEPBIXZ			; CObjArray2<unsigned int>::operator unsigned int const *
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Find_in_PackStreams@CFolder@N7z@NArchive@@QBEHI@Z
_TEXT	SEGMENT
_i$72121 = -8						; size = 4
_this$ = -4						; size = 4
_packStream$ = 8					; size = 4
?Find_in_PackStreams@CFolder@N7z@NArchive@@QBEHI@Z PROC	; NArchive::N7z::CFolder::Find_in_PackStreams, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 49
	mov	DWORD PTR _i$72121[ebp], 0
	jmp	SHORT $LN4@Find_in_Pa
$LN3@Find_in_Pa:
	mov	eax, DWORD PTR _i$72121[ebp]
	add	eax, 1
	mov	DWORD PTR _i$72121[ebp], eax
$LN4@Find_in_Pa:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?Size@?$CObjArray2@I@@QBEIXZ		; CObjArray2<unsigned int>::Size
	cmp	DWORD PTR _i$72121[ebp], eax
	jae	SHORT $LN2@Find_in_Pa
; Line 50
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??B?$CObjArray2@I@@QBEPBIXZ		; CObjArray2<unsigned int>::operator unsigned int const *
	mov	ecx, DWORD PTR _i$72121[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	cmp	edx, DWORD PTR _packStream$[ebp]
	jne	SHORT $LN1@Find_in_Pa
; Line 51
	mov	eax, DWORD PTR _i$72121[ebp]
	jmp	SHORT $LN5@Find_in_Pa
$LN1@Find_in_Pa:
; Line 52
	jmp	SHORT $LN3@Find_in_Pa
$LN2@Find_in_Pa:
	or	eax, -1
$LN5@Find_in_Pa:
; Line 53
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Find_in_PackStreams@CFolder@N7z@NArchive@@QBEHI@Z ENDP	; NArchive::N7z::CFolder::Find_in_PackStreams
_TEXT	ENDS
PUBLIC	??B?$CObjArray2@UCBond@N7z@NArchive@@@@QBEPBUCBond@N7z@NArchive@@XZ ; CObjArray2<NArchive::N7z::CBond>::operator NArchive::N7z::CBond const *
PUBLIC	?Size@?$CObjArray2@UCBond@N7z@NArchive@@@@QBEIXZ ; CObjArray2<NArchive::N7z::CBond>::Size
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?FindBond_for_PackStream@CFolder@N7z@NArchive@@QBEHI@Z
_TEXT	SEGMENT
_i$72128 = -8						; size = 4
_this$ = -4						; size = 4
_packStream$ = 8					; size = 4
?FindBond_for_PackStream@CFolder@N7z@NArchive@@QBEHI@Z PROC ; NArchive::N7z::CFolder::FindBond_for_PackStream, COMDAT
; _this$ = ecx
; Line 56
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 57
	mov	DWORD PTR _i$72128[ebp], 0
	jmp	SHORT $LN4@FindBond_f
$LN3@FindBond_f:
	mov	eax, DWORD PTR _i$72128[ebp]
	add	eax, 1
	mov	DWORD PTR _i$72128[ebp], eax
$LN4@FindBond_f:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Size@?$CObjArray2@UCBond@N7z@NArchive@@@@QBEIXZ ; CObjArray2<NArchive::N7z::CBond>::Size
	cmp	DWORD PTR _i$72128[ebp], eax
	jae	SHORT $LN2@FindBond_f
; Line 58
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??B?$CObjArray2@UCBond@N7z@NArchive@@@@QBEPBUCBond@N7z@NArchive@@XZ ; CObjArray2<NArchive::N7z::CBond>::operator NArchive::N7z::CBond const *
	mov	ecx, DWORD PTR _i$72128[ebp]
	mov	edx, DWORD PTR [eax+ecx*8]
	cmp	edx, DWORD PTR _packStream$[ebp]
	jne	SHORT $LN1@FindBond_f
; Line 59
	mov	eax, DWORD PTR _i$72128[ebp]
	jmp	SHORT $LN5@FindBond_f
$LN1@FindBond_f:
; Line 60
	jmp	SHORT $LN3@FindBond_f
$LN2@FindBond_f:
	or	eax, -1
$LN5@FindBond_f:
; Line 61
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?FindBond_for_PackStream@CFolder@N7z@NArchive@@QBEHI@Z ENDP ; NArchive::N7z::CFolder::FindBond_for_PackStream
_TEXT	ENDS
PUBLIC	??B?$CObjArray@E@@QBEPBEXZ			; CObjArray<unsigned char>::operator unsigned char const *
EXTRN	?ParseFolderInfo@CFolders@N7z@NArchive@@QBEXIAAUCFolder@23@@Z:PROC ; NArchive::N7z::CFolders::ParseFolderInfo
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ParseFolderEx@CFolders@N7z@NArchive@@QBEXIAAUCFolderEx@23@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_folderIndex$ = 8					; size = 4
_folder$ = 12						; size = 4
?ParseFolderEx@CFolders@N7z@NArchive@@QBEXIAAUCFolderEx@23@@Z PROC ; NArchive::N7z::CFolders::ParseFolderEx, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zin.h
; Line 70
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 71
	mov	eax, DWORD PTR _folder$[ebp]
	push	eax
	mov	ecx, DWORD PTR _folderIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ParseFolderInfo@CFolders@N7z@NArchive@@QBEXIAAUCFolder@23@@Z ; NArchive::N7z::CFolders::ParseFolderInfo
; Line 72
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??B?$CObjArray@E@@QBEPBEXZ		; CObjArray<unsigned char>::operator unsigned char const *
	mov	edx, DWORD PTR _folderIndex$[ebp]
	movzx	eax, BYTE PTR [eax+edx]
	mov	ecx, DWORD PTR _folder$[ebp]
	mov	DWORD PTR [ecx+24], eax
; Line 73
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?ParseFolderEx@CFolders@N7z@NArchive@@QBEXIAAUCFolderEx@23@@Z ENDP ; NArchive::N7z::CFolders::ParseFolderEx
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetFolderUnpackSize@CFolders@N7z@NArchive@@QBE_KI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_folderIndex$ = 8					; size = 4
?GetFolderUnpackSize@CFolders@N7z@NArchive@@QBE_KI@Z PROC ; NArchive::N7z::CFolders::GetFolderUnpackSize, COMDAT
; _this$ = ecx
; Line 81
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 82
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??B?$CObjArray@_K@@QBEPB_KXZ		; CObjArray<unsigned __int64>::operator unsigned __int64 const *
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??B?$CObjArray@I@@QBEPBIXZ		; CObjArray<unsigned int>::operator unsigned int const *
	mov	edi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??B?$CObjArray@E@@QBEPBEXZ		; CObjArray<unsigned char>::operator unsigned char const *
	mov	ecx, DWORD PTR _folderIndex$[ebp]
	movzx	edx, BYTE PTR [eax+ecx]
	mov	eax, DWORD PTR _folderIndex$[ebp]
	add	edx, DWORD PTR [edi+eax*4]
	mov	eax, DWORD PTR [esi+edx*8]
	mov	edx, DWORD PTR [esi+edx*8+4]
; Line 83
	pop	edi
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetFolderUnpackSize@CFolders@N7z@NArchive@@QBE_KI@Z ENDP ; NArchive::N7z::CFolders::GetFolderUnpackSize
_TEXT	ENDS
PUBLIC	??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>
PUBLIC	??_7CDecProgress@N7z@NArchive@@6B@		; NArchive::N7z::CDecProgress::`vftable'
PUBLIC	??0ICompressProgressInfo@@QAE@XZ		; ICompressProgressInfo::ICompressProgressInfo
PUBLIC	??_R4CDecProgress@N7z@NArchive@@6B@		; NArchive::N7z::CDecProgress::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCDecProgress@N7z@NArchive@@@8		; NArchive::N7z::CDecProgress `RTTI Type Descriptor'
PUBLIC	??_R3CDecProgress@N7z@NArchive@@8		; NArchive::N7z::CDecProgress::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CDecProgress@N7z@NArchive@@8		; NArchive::N7z::CDecProgress::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CDecProgress@N7z@NArchive@@8	; NArchive::N7z::CDecProgress::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ICompressProgressInfo@@8		; ICompressProgressInfo::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUICompressProgressInfo@@@8		; ICompressProgressInfo `RTTI Type Descriptor'
PUBLIC	??_R3ICompressProgressInfo@@8			; ICompressProgressInfo::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ICompressProgressInfo@@8			; ICompressProgressInfo::`RTTI Base Class Array'
PUBLIC	??_R13?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	?QueryInterface@CDecProgress@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::N7z::CDecProgress::QueryInterface
PUBLIC	?AddRef@CDecProgress@N7z@NArchive@@UAGKXZ	; NArchive::N7z::CDecProgress::AddRef
PUBLIC	?Release@CDecProgress@N7z@NArchive@@UAGKXZ	; NArchive::N7z::CDecProgress::Release
;	COMDAT ??_R13?0A@EA@CMyUnknownImp@@8
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zdecode.cpp
rdata$r	SEGMENT
??_R13?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R2ICompressProgressInfo@@8
rdata$r	SEGMENT
??_R2ICompressProgressInfo@@8 DD FLAT:??_R1A@?0A@EA@ICompressProgressInfo@@8 ; ICompressProgressInfo::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ICompressProgressInfo@@8
rdata$r	SEGMENT
??_R3ICompressProgressInfo@@8 DD 00H			; ICompressProgressInfo::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ICompressProgressInfo@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUICompressProgressInfo@@@8
_DATA	SEGMENT
??_R0?AUICompressProgressInfo@@@8 DD FLAT:??_7type_info@@6B@ ; ICompressProgressInfo `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUICompressProgressInfo@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ICompressProgressInfo@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ICompressProgressInfo@@8 DD FLAT:??_R0?AUICompressProgressInfo@@@8 ; ICompressProgressInfo::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICompressProgressInfo@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CDecProgress@N7z@NArchive@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CDecProgress@N7z@NArchive@@8 DD FLAT:??_R0?AVCDecProgress@N7z@NArchive@@@8 ; NArchive::N7z::CDecProgress::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CDecProgress@N7z@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R2CDecProgress@N7z@NArchive@@8
rdata$r	SEGMENT
??_R2CDecProgress@N7z@NArchive@@8 DD FLAT:??_R1A@?0A@EA@CDecProgress@N7z@NArchive@@8 ; NArchive::N7z::CDecProgress::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ICompressProgressInfo@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CDecProgress@N7z@NArchive@@8
rdata$r	SEGMENT
??_R3CDecProgress@N7z@NArchive@@8 DD 00H		; NArchive::N7z::CDecProgress::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2CDecProgress@N7z@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCDecProgress@N7z@NArchive@@@8
_DATA	SEGMENT
??_R0?AVCDecProgress@N7z@NArchive@@@8 DD FLAT:??_7type_info@@6B@ ; NArchive::N7z::CDecProgress `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCDecProgress@N7z@NArchive@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CDecProgress@N7z@NArchive@@6B@
rdata$r	SEGMENT
??_R4CDecProgress@N7z@NArchive@@6B@ DD 00H		; NArchive::N7z::CDecProgress::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCDecProgress@N7z@NArchive@@@8
	DD	FLAT:??_R3CDecProgress@N7z@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_7CDecProgress@N7z@NArchive@@6B@
CONST	SEGMENT
??_7CDecProgress@N7z@NArchive@@6B@ DD FLAT:??_R4CDecProgress@N7z@NArchive@@6B@ ; NArchive::N7z::CDecProgress::`vftable'
	DD	FLAT:?QueryInterface@CDecProgress@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CDecProgress@N7z@NArchive@@UAGKXZ
	DD	FLAT:?Release@CDecProgress@N7z@NArchive@@UAGKXZ
	DD	FLAT:?SetRatioInfo@CDecProgress@N7z@NArchive@@UAGJPB_K0@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CDecProgress@N7z@NArchive@@QAE@PAUICompressProgressInfo@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_progress$ = 8						; size = 4
??0CDecProgress@N7z@NArchive@@QAE@PAUICompressProgressInfo@@@Z PROC ; NArchive::N7z::CDecProgress::CDecProgress, COMDAT
; _this$ = ecx
; Line 20
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ICompressProgressInfo@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CDecProgress@N7z@NArchive@@6B@
	mov	ecx, DWORD PTR _progress$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CDecProgress@N7z@NArchive@@QAE@PAUICompressProgressInfo@@@Z ENDP ; NArchive::N7z::CDecProgress::CDecProgress
_TEXT	ENDS
EXTRN	_IID_ICompressProgressInfo:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@CDecProgress@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CDecProgress@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z PROC ; NArchive::N7z::CDecProgress::QueryInterface, COMDAT
; Line 22
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@QueryInter@2
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN3@QueryInter@2
$LN4@QueryInter@2:
	push	OFFSET _IID_ICompressProgressInfo
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@2
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN3@QueryInter@2
$LN2@QueryInter@2:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN5@QueryInter@2
$LN3@QueryInter@2:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	xor	eax, eax
$LN5@QueryInter@2:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CDecProgress@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z ENDP ; NArchive::N7z::CDecProgress::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CDecProgress@N7z@NArchive@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CDecProgress@N7z@NArchive@@UAGKXZ PROC		; NArchive::N7z::CDecProgress::AddRef, COMDAT
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CDecProgress@N7z@NArchive@@UAGKXZ ENDP		; NArchive::N7z::CDecProgress::AddRef
_TEXT	ENDS
PUBLIC	??_GCDecProgress@N7z@NArchive@@QAEPAXI@Z	; NArchive::N7z::CDecProgress::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CDecProgress@N7z@NArchive@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T75016 = -8						; size = 4
$T75015 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CDecProgress@N7z@NArchive@@UAGKXZ PROC		; NArchive::N7z::CDecProgress::Release, COMDAT
; Line 22
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	jmp	SHORT $LN2@Release@2
$LN1@Release@2:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T75016[ebp], edx
	mov	eax, DWORD PTR $T75016[ebp]
	mov	DWORD PTR $T75015[ebp], eax
	cmp	DWORD PTR $T75015[ebp], 0
	je	SHORT $LN4@Release@2
	push	1
	mov	ecx, DWORD PTR $T75015[ebp]
	call	??_GCDecProgress@N7z@NArchive@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release@2
$LN4@Release@2:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release@2:
	xor	eax, eax
$LN2@Release@2:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CDecProgress@N7z@NArchive@@UAGKXZ ENDP		; NArchive::N7z::CDecProgress::Release
_TEXT	ENDS
PUBLIC	??_7ICompressProgressInfo@@6B@			; ICompressProgressInfo::`vftable'
PUBLIC	??_R4ICompressProgressInfo@@6B@			; ICompressProgressInfo::`RTTI Complete Object Locator'
;	COMDAT ??_R4ICompressProgressInfo@@6B@
rdata$r	SEGMENT
??_R4ICompressProgressInfo@@6B@ DD 00H			; ICompressProgressInfo::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUICompressProgressInfo@@@8
	DD	FLAT:??_R3ICompressProgressInfo@@8
rdata$r	ENDS
;	COMDAT ??_7ICompressProgressInfo@@6B@
CONST	SEGMENT
??_7ICompressProgressInfo@@6B@ DD FLAT:??_R4ICompressProgressInfo@@6B@ ; ICompressProgressInfo::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ICompressProgressInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ICompressProgressInfo@@QAE@XZ PROC			; ICompressProgressInfo::ICompressProgressInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ICompressProgressInfo@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ICompressProgressInfo@@QAE@XZ ENDP			; ICompressProgressInfo::ICompressProgressInfo
_TEXT	ENDS
PUBLIC	??1CDecProgress@N7z@NArchive@@QAE@XZ		; NArchive::N7z::CDecProgress::~CDecProgress
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCDecProgress@N7z@NArchive@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCDecProgress@N7z@NArchive@@QAEPAXI@Z PROC		; NArchive::N7z::CDecProgress::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CDecProgress@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCDecProgress@N7z@NArchive@@QAEPAXI@Z ENDP		; NArchive::N7z::CDecProgress::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CDecProgress@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CDecProgress@N7z@NArchive@@QAE@XZ PROC		; NArchive::N7z::CDecProgress::~CDecProgress, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CDecProgress@N7z@NArchive@@QAE@XZ ENDP		; NArchive::N7z::CDecProgress::~CDecProgress
_TEXT	ENDS
PUBLIC	??A?$CRecordVector@I@@QAEAAII@Z			; CRecordVector<unsigned int>::operator[]
PUBLIC	?ClearAndSetSize@?$CRecordVector@I@@QAEXI@Z	; CRecordVector<unsigned int>::ClearAndSetSize
PUBLIC	??A?$CRecordVector@_K@@QAEAA_KI@Z		; CRecordVector<unsigned __int64>::operator[]
PUBLIC	??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAUCCoderStreamsInfo@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator[]
PUBLIC	??B?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEPBUCCoderInfo@N7z@NArchive@@XZ ; CObjArray2<NArchive::N7z::CCoderInfo>::operator NArchive::N7z::CCoderInfo const *
PUBLIC	?ClearAndSetSize@?$CRecordVector@_K@@QAEXI@Z	; CRecordVector<unsigned __int64>::ClearAndSetSize
PUBLIC	?ClearAndSetSize@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEXI@Z ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::ClearAndSetSize
PUBLIC	??A?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAUCBond@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CBond>::operator[]
PUBLIC	?ClearAndSetSize@?$CRecordVector@UCBond@NCoderMixer2@@@@QAEXI@Z ; CRecordVector<NCoderMixer2::CBond>::ClearAndSetSize
PUBLIC	?Clear@CBindInfoEx@N7z@NArchive@@QAEXXZ		; NArchive::N7z::CBindInfoEx::Clear
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_coderInfo$72878 = -16					; size = 4
_folderBond$72874 = -12					; size = 4
_bond$72873 = -8					; size = 4
_i$ = -4						; size = 4
_folder$ = 8						; size = 4
_bi$ = 12						; size = 4
?Convert_FolderInfo_to_BindInfo@N7z@NArchive@@YGXABUCFolderEx@12@AAUCBindInfoEx@12@@Z PROC ; NArchive::N7z::Convert_FolderInfo_to_BindInfo
; Line 32
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 33
	mov	ecx, DWORD PTR _bi$[ebp]
	call	?Clear@CBindInfoEx@N7z@NArchive@@QAEXXZ	; NArchive::N7z::CBindInfoEx::Clear
; Line 35
	mov	ecx, DWORD PTR _folder$[ebp]
	add	ecx, 8
	call	?Size@?$CObjArray2@UCBond@N7z@NArchive@@@@QBEIXZ ; CObjArray2<NArchive::N7z::CBond>::Size
	push	eax
	mov	ecx, DWORD PTR _bi$[ebp]
	add	ecx, 12					; 0000000cH
	call	?ClearAndSetSize@?$CRecordVector@UCBond@NCoderMixer2@@@@QAEXI@Z ; CRecordVector<NCoderMixer2::CBond>::ClearAndSetSize
; Line 37
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN9@Convert_Fo
$LN8@Convert_Fo:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN9@Convert_Fo:
	mov	ecx, DWORD PTR _folder$[ebp]
	add	ecx, 8
	call	?Size@?$CObjArray2@UCBond@N7z@NArchive@@@@QBEIXZ ; CObjArray2<NArchive::N7z::CBond>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN7@Convert_Fo
; Line 39
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _bi$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAUCBond@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CBond>::operator[]
	mov	DWORD PTR _bond$72873[ebp], eax
; Line 40
	mov	ecx, DWORD PTR _folder$[ebp]
	add	ecx, 8
	call	??B?$CObjArray2@UCBond@N7z@NArchive@@@@QBEPBUCBond@N7z@NArchive@@XZ ; CObjArray2<NArchive::N7z::CBond>::operator NArchive::N7z::CBond const *
	mov	edx, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [eax+edx*8]
	mov	DWORD PTR _folderBond$72874[ebp], eax
; Line 41
	mov	ecx, DWORD PTR _bond$72873[ebp]
	mov	edx, DWORD PTR _folderBond$72874[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
; Line 42
	mov	ecx, DWORD PTR _bond$72873[ebp]
	mov	edx, DWORD PTR _folderBond$72874[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
; Line 43
	jmp	SHORT $LN8@Convert_Fo
$LN7@Convert_Fo:
; Line 45
	mov	ecx, DWORD PTR _folder$[ebp]
	call	?Size@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEIXZ ; CObjArray2<NArchive::N7z::CCoderInfo>::Size
	push	eax
	mov	ecx, DWORD PTR _bi$[ebp]
	call	?ClearAndSetSize@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEXI@Z ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::ClearAndSetSize
; Line 46
	mov	ecx, DWORD PTR _folder$[ebp]
	call	?Size@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEIXZ ; CObjArray2<NArchive::N7z::CCoderInfo>::Size
	push	eax
	mov	ecx, DWORD PTR _bi$[ebp]
	add	ecx, 64					; 00000040H
	call	?ClearAndSetSize@?$CRecordVector@_K@@QAEXI@Z ; CRecordVector<unsigned __int64>::ClearAndSetSize
; Line 47
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@Convert_Fo
$LN5@Convert_Fo:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN6@Convert_Fo:
	mov	ecx, DWORD PTR _folder$[ebp]
	call	?Size@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEIXZ ; CObjArray2<NArchive::N7z::CCoderInfo>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN4@Convert_Fo
; Line 49
	mov	ecx, DWORD PTR _folder$[ebp]
	call	??B?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEPBUCCoderInfo@N7z@NArchive@@XZ ; CObjArray2<NArchive::N7z::CCoderInfo>::operator NArchive::N7z::CCoderInfo const *
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 24					; 00000018H
	add	eax, edx
	mov	DWORD PTR _coderInfo$72878[ebp], eax
; Line 50
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bi$[ebp]
	call	??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAUCCoderStreamsInfo@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator[]
	mov	ecx, DWORD PTR _coderInfo$72878[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax], edx
; Line 51
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bi$[ebp]
	add	ecx, 64					; 00000040H
	call	??A?$CRecordVector@_K@@QAEAA_KI@Z	; CRecordVector<unsigned __int64>::operator[]
	mov	ecx, DWORD PTR _coderInfo$72878[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
; Line 52
	jmp	SHORT $LN5@Convert_Fo
$LN4@Convert_Fo:
; Line 58
	mov	edx, DWORD PTR _bi$[ebp]
	mov	eax, DWORD PTR _folder$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR [edx+36], ecx
; Line 59
	mov	ecx, DWORD PTR _folder$[ebp]
	add	ecx, 16					; 00000010H
	call	?Size@?$CObjArray2@I@@QBEIXZ		; CObjArray2<unsigned int>::Size
	push	eax
	mov	ecx, DWORD PTR _bi$[ebp]
	add	ecx, 24					; 00000018H
	call	?ClearAndSetSize@?$CRecordVector@I@@QAEXI@Z ; CRecordVector<unsigned int>::ClearAndSetSize
; Line 60
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@Convert_Fo
$LN2@Convert_Fo:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN3@Convert_Fo:
	mov	ecx, DWORD PTR _folder$[ebp]
	add	ecx, 16					; 00000010H
	call	?Size@?$CObjArray2@I@@QBEIXZ		; CObjArray2<unsigned int>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN10@Convert_Fo
; Line 61
	mov	ecx, DWORD PTR _folder$[ebp]
	add	ecx, 16					; 00000010H
	call	??B?$CObjArray2@I@@QBEPBIXZ		; CObjArray2<unsigned int>::operator unsigned int const *
	mov	esi, eax
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bi$[ebp]
	add	ecx, 24					; 00000018H
	call	??A?$CRecordVector@I@@QAEAAII@Z		; CRecordVector<unsigned int>::operator[]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [esi+ecx*4]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN2@Convert_Fo
$LN10@Convert_Fo:
; Line 62
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Convert_FolderInfo_to_BindInfo@N7z@NArchive@@YGXABUCFolderEx@12@AAUCBindInfoEx@12@@Z ENDP ; NArchive::N7z::Convert_FolderInfo_to_BindInfo
_TEXT	ENDS
PUBLIC	?Clear@?$CRecordVector@_K@@QAEXXZ		; CRecordVector<unsigned __int64>::Clear
PUBLIC	?Clear@CBindInfo@NCoderMixer2@@QAEXXZ		; NCoderMixer2::CBindInfo::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Clear@CBindInfoEx@N7z@NArchive@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@CBindInfoEx@N7z@NArchive@@QAEXXZ PROC		; NArchive::N7z::CBindInfoEx::Clear, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zdecode.h
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 19
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@CBindInfo@NCoderMixer2@@QAEXXZ	; NCoderMixer2::CBindInfo::Clear
; Line 20
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?Clear@?$CRecordVector@_K@@QAEXXZ	; CRecordVector<unsigned __int64>::Clear
; Line 21
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@CBindInfoEx@N7z@NArchive@@QAEXXZ ENDP		; NArchive::N7z::CBindInfoEx::Clear
_TEXT	ENDS
PUBLIC	?Clear@?$CRecordVector@I@@QAEXXZ		; CRecordVector<unsigned int>::Clear
PUBLIC	?Clear@?$CRecordVector@UCBond@NCoderMixer2@@@@QAEXXZ ; CRecordVector<NCoderMixer2::CBond>::Clear
PUBLIC	?Clear@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEXXZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Clear
EXTRN	?ClearMaps@CBindInfo@NCoderMixer2@@QAEXXZ:PROC	; NCoderMixer2::CBindInfo::ClearMaps
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Clear@CBindInfo@NCoderMixer2@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@CBindInfo@NCoderMixer2@@QAEXXZ PROC		; NCoderMixer2::CBindInfo::Clear, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\common\codermixer2.h
; Line 173
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 174
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEXXZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Clear
; Line 175
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Clear@?$CRecordVector@UCBond@NCoderMixer2@@@@QAEXXZ ; CRecordVector<NCoderMixer2::CBond>::Clear
; Line 176
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?Clear@?$CRecordVector@I@@QAEXXZ	; CRecordVector<unsigned int>::Clear
; Line 178
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearMaps@CBindInfo@NCoderMixer2@@QAEXXZ ; NCoderMixer2::CBindInfo::ClearMaps
; Line 179
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@CBindInfo@NCoderMixer2@@QAEXXZ ENDP		; NCoderMixer2::CBindInfo::Clear
_TEXT	ENDS
PUBLIC	??A?$CRecordVector@I@@QBEABII@Z			; CRecordVector<unsigned int>::operator[]
PUBLIC	?Size@?$CRecordVector@I@@QBEIXZ			; CRecordVector<unsigned int>::Size
PUBLIC	??A?$CRecordVector@_K@@QBEAB_KI@Z		; CRecordVector<unsigned __int64>::operator[]
PUBLIC	?Size@?$CRecordVector@_K@@QBEIXZ		; CRecordVector<unsigned __int64>::Size
PUBLIC	??A?$CRecordVector@UCBond@NCoderMixer2@@@@QBEABUCBond@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CBond>::operator[]
PUBLIC	?Size@?$CRecordVector@UCBond@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CBond>::Size
PUBLIC	??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEABUCCoderStreamsInfo@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator[]
PUBLIC	?Size@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv278 = -12						; size = 4
tv277 = -8						; size = 4
_i$ = -4						; size = 4
_a1$ = 8						; size = 4
_a2$ = 12						; size = 4
?AreBindInfoExEqual@N7z@NArchive@@YG_NABUCBindInfoEx@12@0@Z PROC ; NArchive::N7z::AreBindInfoExEqual
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zdecode.cpp
; Line 81
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 82
	mov	ecx, DWORD PTR _a1$[ebp]
	call	?Size@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Size
	mov	esi, eax
	mov	ecx, DWORD PTR _a2$[ebp]
	call	?Size@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Size
	cmp	esi, eax
	je	SHORT $LN19@AreBindInf
; Line 83
	xor	al, al
	jmp	$LN20@AreBindInf
$LN19@AreBindInf:
; Line 85
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN18@AreBindInf
$LN17@AreBindInf:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN18@AreBindInf:
	mov	ecx, DWORD PTR _a1$[ebp]
	call	?Size@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN16@AreBindInf
; Line 86
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _a2$[ebp]
	call	??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEABUCCoderStreamsInfo@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator[]
	push	eax
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _a1$[ebp]
	call	??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEABUCCoderStreamsInfo@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator[]
	push	eax
	call	?AreCodersEqual@N7z@NArchive@@YG_NABUCCoderStreamsInfo@NCoderMixer2@@0@Z ; NArchive::N7z::AreCodersEqual
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN15@AreBindInf
; Line 87
	xor	al, al
	jmp	$LN20@AreBindInf
$LN15@AreBindInf:
; Line 89
	jmp	SHORT $LN17@AreBindInf
$LN16@AreBindInf:
	mov	ecx, DWORD PTR _a1$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Size@?$CRecordVector@UCBond@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CBond>::Size
	mov	esi, eax
	mov	ecx, DWORD PTR _a2$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Size@?$CRecordVector@UCBond@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CBond>::Size
	cmp	esi, eax
	je	SHORT $LN14@AreBindInf
; Line 90
	xor	al, al
	jmp	$LN20@AreBindInf
$LN14@AreBindInf:
; Line 91
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN13@AreBindInf
$LN12@AreBindInf:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN13@AreBindInf:
	mov	ecx, DWORD PTR _a1$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Size@?$CRecordVector@UCBond@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CBond>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN11@AreBindInf
; Line 92
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _a2$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$CRecordVector@UCBond@NCoderMixer2@@@@QBEABUCBond@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CBond>::operator[]
	push	eax
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a1$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$CRecordVector@UCBond@NCoderMixer2@@@@QBEABUCBond@NCoderMixer2@@I@Z ; CRecordVector<NCoderMixer2::CBond>::operator[]
	push	eax
	call	?AreBondsEqual@N7z@NArchive@@YG_NABUCBond@NCoderMixer2@@0@Z ; NArchive::N7z::AreBondsEqual
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN10@AreBindInf
; Line 93
	xor	al, al
	jmp	$LN20@AreBindInf
$LN10@AreBindInf:
; Line 95
	jmp	SHORT $LN12@AreBindInf
$LN11@AreBindInf:
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN9@AreBindInf
$LN8@AreBindInf:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN9@AreBindInf:
	mov	ecx, DWORD PTR _a1$[ebp]
	add	ecx, 64					; 00000040H
	call	?Size@?$CRecordVector@_K@@QBEIXZ	; CRecordVector<unsigned __int64>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN7@AreBindInf
; Line 96
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a1$[ebp]
	add	ecx, 64					; 00000040H
	call	??A?$CRecordVector@_K@@QBEAB_KI@Z	; CRecordVector<unsigned __int64>::operator[]
	mov	esi, eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _a2$[ebp]
	add	ecx, 64					; 00000040H
	call	??A?$CRecordVector@_K@@QBEAB_KI@Z	; CRecordVector<unsigned __int64>::operator[]
	mov	DWORD PTR tv277[ebp], esi
	mov	DWORD PTR tv278[ebp], eax
	mov	edx, DWORD PTR tv277[ebp]
	mov	eax, DWORD PTR tv278[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN22@AreBindInf
	mov	edx, DWORD PTR tv277[ebp]
	mov	eax, DWORD PTR tv278[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+4]
	je	SHORT $LN6@AreBindInf
$LN22@AreBindInf:
; Line 97
	xor	al, al
	jmp	SHORT $LN20@AreBindInf
$LN6@AreBindInf:
; Line 99
	jmp	SHORT $LN8@AreBindInf
$LN7@AreBindInf:
	mov	ecx, DWORD PTR _a1$[ebp]
	add	ecx, 24					; 00000018H
	call	?Size@?$CRecordVector@I@@QBEIXZ		; CRecordVector<unsigned int>::Size
	mov	esi, eax
	mov	ecx, DWORD PTR _a2$[ebp]
	add	ecx, 24					; 00000018H
	call	?Size@?$CRecordVector@I@@QBEIXZ		; CRecordVector<unsigned int>::Size
	cmp	esi, eax
	je	SHORT $LN5@AreBindInf
; Line 100
	xor	al, al
	jmp	SHORT $LN20@AreBindInf
$LN5@AreBindInf:
; Line 101
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@AreBindInf
$LN3@AreBindInf:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN4@AreBindInf:
	mov	ecx, DWORD PTR _a1$[ebp]
	add	ecx, 24					; 00000018H
	call	?Size@?$CRecordVector@I@@QBEIXZ		; CRecordVector<unsigned int>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN2@AreBindInf
; Line 102
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a1$[ebp]
	add	ecx, 24					; 00000018H
	call	??A?$CRecordVector@I@@QBEABII@Z		; CRecordVector<unsigned int>::operator[]
	mov	esi, eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _a2$[ebp]
	add	ecx, 24					; 00000018H
	call	??A?$CRecordVector@I@@QBEABII@Z		; CRecordVector<unsigned int>::operator[]
	mov	edx, DWORD PTR [esi]
	cmp	edx, DWORD PTR [eax]
	je	SHORT $LN1@AreBindInf
; Line 103
	xor	al, al
	jmp	SHORT $LN20@AreBindInf
$LN1@AreBindInf:
; Line 109
	jmp	SHORT $LN3@AreBindInf
$LN2@AreBindInf:
	mov	al, 1
$LN20@AreBindInf:
; Line 110
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?AreBindInfoExEqual@N7z@NArchive@@YG_NABUCBindInfoEx@12@0@Z ENDP ; NArchive::N7z::AreBindInfoExEqual
; Function compile flags: /Odtp /RTCsu
_a1$ = 8						; size = 4
_a2$ = 12						; size = 4
?AreCodersEqual@N7z@NArchive@@YG_NABUCCoderStreamsInfo@NCoderMixer2@@0@Z PROC ; NArchive::N7z::AreCodersEqual
; Line 67
	push	ebp
	mov	ebp, esp
; Line 68
	mov	eax, DWORD PTR _a1$[ebp]
	mov	ecx, DWORD PTR _a2$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx]
	sete	al
; Line 69
	pop	ebp
	ret	8
?AreCodersEqual@N7z@NArchive@@YG_NABUCCoderStreamsInfo@NCoderMixer2@@0@Z ENDP ; NArchive::N7z::AreCodersEqual
; Function compile flags: /Odtp /RTCsu
tv68 = -4						; size = 4
_a1$ = 8						; size = 4
_a2$ = 12						; size = 4
?AreBondsEqual@N7z@NArchive@@YG_NABUCBond@NCoderMixer2@@0@Z PROC ; NArchive::N7z::AreBondsEqual
; Line 74
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 77
	mov	eax, DWORD PTR _a1$[ebp]
	mov	ecx, DWORD PTR _a2$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN3@AreBondsEq
	mov	eax, DWORD PTR _a1$[ebp]
	mov	ecx, DWORD PTR _a2$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+4]
	jne	SHORT $LN3@AreBondsEq
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@AreBondsEq
$LN3@AreBondsEq:
	mov	DWORD PTR tv68[ebp], 0
$LN4@AreBondsEq:
	mov	al, BYTE PTR tv68[ebp]
; Line 78
	mov	esp, ebp
	pop	ebp
	ret	8
?AreBondsEqual@N7z@NArchive@@YG_NABUCBond@NCoderMixer2@@0@Z ENDP ; NArchive::N7z::AreBondsEqual
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Init@CLockedSequentialInStreamMT@N7z@NArchive@@QAEXPAUCLockedInStream@23@_K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lockedInStream$ = 8					; size = 4
_startPos$ = 12						; size = 8
?Init@CLockedSequentialInStreamMT@N7z@NArchive@@QAEXPAUCLockedInStream@23@_K@Z PROC ; NArchive::N7z::CLockedSequentialInStreamMT::Init, COMDAT
; _this$ = ecx
; Line 144
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 145
	mov	eax, DWORD PTR _lockedInStream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z ; CMyComPtr<IUnknown>::operator=
; Line 146
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _lockedInStream$[ebp]
	mov	DWORD PTR [ecx+8], edx
; Line 147
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _startPos$[ebp]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR _startPos$[ebp+4]
	mov	DWORD PTR [eax+20], edx
; Line 148
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Init@CLockedSequentialInStreamMT@N7z@NArchive@@QAEXPAUCLockedInStream@23@_K@Z ENDP ; NArchive::N7z::CLockedSequentialInStreamMT::Init
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Init@CLockedSequentialInStreamST@N7z@NArchive@@QAEXPAUCLockedInStream@23@_K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lockedInStream$ = 8					; size = 4
_startPos$ = 12						; size = 8
?Init@CLockedSequentialInStreamST@N7z@NArchive@@QAEXPAUCLockedInStream@23@_K@Z PROC ; NArchive::N7z::CLockedSequentialInStreamST::Init, COMDAT
; _this$ = ecx
; Line 188
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 189
	mov	eax, DWORD PTR _lockedInStream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z ; CMyComPtr<IUnknown>::operator=
; Line 190
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _lockedInStream$[ebp]
	mov	DWORD PTR [ecx+8], edx
; Line 191
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _startPos$[ebp]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR _startPos$[ebp+4]
	mov	DWORD PTR [eax+20], edx
; Line 192
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Init@CLockedSequentialInStreamST@N7z@NArchive@@QAEXPAUCLockedInStream@23@_K@Z ENDP ; NArchive::N7z::CLockedSequentialInStreamST::Init
_TEXT	ENDS
PUBLIC	??0CFolder@N7z@NArchive@@QAE@XZ			; NArchive::N7z::CFolder::CFolder
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CFolderEx@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CFolderEx@N7z@NArchive@@QAE@XZ PROC			; NArchive::N7z::CFolderEx::CFolderEx, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CFolder@N7z@NArchive@@QAE@XZ		; NArchive::N7z::CFolder::CFolder
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CFolderEx@N7z@NArchive@@QAE@XZ ENDP			; NArchive::N7z::CFolderEx::CFolderEx
_TEXT	ENDS
PUBLIC	??1?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ	; CObjArray2<NArchive::N7z::CBond>::~CObjArray2<NArchive::N7z::CBond>
PUBLIC	??1?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ ; CObjArray2<NArchive::N7z::CCoderInfo>::~CObjArray2<NArchive::N7z::CCoderInfo>
PUBLIC	??0?$CObjArray2@I@@QAE@XZ			; CObjArray2<unsigned int>::CObjArray2<unsigned int>
PUBLIC	??0?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ	; CObjArray2<NArchive::N7z::CBond>::CObjArray2<NArchive::N7z::CBond>
PUBLIC	??0?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ ; CObjArray2<NArchive::N7z::CCoderInfo>::CObjArray2<NArchive::N7z::CCoderInfo>
;	COMDAT xdata$x
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zitem.h
xdata$x	SEGMENT
__unwindtable$??0CFolder@N7z@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CFolder@N7z@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CFolder@N7z@NArchive@@QAE@XZ$1
__ehfuncinfo$??0CFolder@N7z@NArchive@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CFolder@N7z@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CFolder@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CFolder@N7z@NArchive@@QAE@XZ PROC			; NArchive::N7z::CFolder::CFolder, COMDAT
; _this$ = ecx
; Line 43
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CFolder@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ ; CObjArray2<NArchive::N7z::CCoderInfo>::CObjArray2<NArchive::N7z::CCoderInfo>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ ; CObjArray2<NArchive::N7z::CBond>::CObjArray2<NArchive::N7z::CBond>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0?$CObjArray2@I@@QAE@XZ		; CObjArray2<unsigned int>::CObjArray2<unsigned int>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CFolder@N7z@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ ; CObjArray2<NArchive::N7z::CCoderInfo>::~CObjArray2<NArchive::N7z::CCoderInfo>
__unwindfunclet$??0CFolder@N7z@NArchive@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ ; CObjArray2<NArchive::N7z::CBond>::~CObjArray2<NArchive::N7z::CBond>
__ehhandler$??0CFolder@N7z@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CFolder@N7z@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CFolder@N7z@NArchive@@QAE@XZ ENDP			; NArchive::N7z::CFolder::CFolder
PUBLIC	??1CFolder@N7z@NArchive@@QAE@XZ			; NArchive::N7z::CFolder::~CFolder
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CFolderEx@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CFolderEx@N7z@NArchive@@QAE@XZ PROC			; NArchive::N7z::CFolderEx::~CFolderEx, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CFolder@N7z@NArchive@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CFolderEx@N7z@NArchive@@QAE@XZ ENDP			; NArchive::N7z::CFolderEx::~CFolderEx
_TEXT	ENDS
PUBLIC	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ	; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
PUBLIC	??0?$CMyComPtr@UICompressCoder2@@@@QAE@XZ	; CMyComPtr<ICompressCoder2>::CMyComPtr<ICompressCoder2>
PUBLIC	??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ	; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CCreatedCoder@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CCreatedCoder@@QAE@XZ$0
__ehfuncinfo$??0CCreatedCoder@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CCreatedCoder@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CCreatedCoder@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CCreatedCoder@@QAE@XZ PROC				; CCreatedCoder::CCreatedCoder, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CCreatedCoder@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$CMyComPtr@UICompressCoder2@@@@QAE@XZ ; CMyComPtr<ICompressCoder2>::CMyComPtr<ICompressCoder2>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CCreatedCoder@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
__ehhandler$??0CCreatedCoder@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CCreatedCoder@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CCreatedCoder@@QAE@XZ ENDP				; CCreatedCoder::CCreatedCoder
PUBLIC	??1?$CMyComPtr@UICompressCoder2@@@@QAE@XZ	; CMyComPtr<ICompressCoder2>::~CMyComPtr<ICompressCoder2>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CCreatedCoder@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CCreatedCoder@@QAE@XZ$0
__ehfuncinfo$??1CCreatedCoder@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CCreatedCoder@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CCreatedCoder@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CCreatedCoder@@QAE@XZ PROC				; CCreatedCoder::~CCreatedCoder, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CCreatedCoder@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1?$CMyComPtr@UICompressCoder2@@@@QAE@XZ ; CMyComPtr<ICompressCoder2>::~CMyComPtr<ICompressCoder2>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CCreatedCoder@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
__ehhandler$??1CCreatedCoder@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CCreatedCoder@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CCreatedCoder@@QAE@XZ ENDP				; CCreatedCoder::~CCreatedCoder
PUBLIC	??4?$CRecordVector@_K@@QAEAAV0@ABV0@@Z		; CRecordVector<unsigned __int64>::operator=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4CBindInfoEx@N7z@NArchive@@QAEAAU012@ABU012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4CBindInfoEx@N7z@NArchive@@QAEAAU012@ABU012@@Z PROC	; NArchive::N7z::CBindInfoEx::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4CBindInfo@NCoderMixer2@@QAEAAU01@ABU01@@Z
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 64					; 00000040H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??4?$CRecordVector@_K@@QAEAAV0@ABV0@@Z	; CRecordVector<unsigned __int64>::operator=
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4CBindInfoEx@N7z@NArchive@@QAEAAU012@ABU012@@Z ENDP	; NArchive::N7z::CBindInfoEx::operator=
_TEXT	ENDS
PUBLIC	??1?$CMyComPtr@UIInStream@@@@QAE@XZ		; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
PUBLIC	??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSection::CCriticalSection
PUBLIC	??0?$CMyComPtr@UIInStream@@@@QAE@XZ		; CMyComPtr<IInStream>::CMyComPtr<IInStream>
PUBLIC	??_7CLockedInStream@N7z@NArchive@@6B@		; NArchive::N7z::CLockedInStream::`vftable'
PUBLIC	??_R4CLockedInStream@N7z@NArchive@@6B@		; NArchive::N7z::CLockedInStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUCLockedInStream@N7z@NArchive@@@8	; NArchive::N7z::CLockedInStream `RTTI Type Descriptor'
PUBLIC	??_R3CLockedInStream@N7z@NArchive@@8		; NArchive::N7z::CLockedInStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CLockedInStream@N7z@NArchive@@8		; NArchive::N7z::CLockedInStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CLockedInStream@N7z@NArchive@@8	; NArchive::N7z::CLockedInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?QueryInterface@CLockedInStream@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::N7z::CLockedInStream::QueryInterface
PUBLIC	?AddRef@CLockedInStream@N7z@NArchive@@UAGKXZ	; NArchive::N7z::CLockedInStream::AddRef
PUBLIC	?Release@CLockedInStream@N7z@NArchive@@UAGKXZ	; NArchive::N7z::CLockedInStream::Release
;	COMDAT ??_R1A@?0A@EA@CLockedInStream@N7z@NArchive@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CLockedInStream@N7z@NArchive@@8 DD FLAT:??_R0?AUCLockedInStream@N7z@NArchive@@@8 ; NArchive::N7z::CLockedInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CLockedInStream@N7z@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R2CLockedInStream@N7z@NArchive@@8
rdata$r	SEGMENT
??_R2CLockedInStream@N7z@NArchive@@8 DD FLAT:??_R1A@?0A@EA@CLockedInStream@N7z@NArchive@@8 ; NArchive::N7z::CLockedInStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CLockedInStream@N7z@NArchive@@8
rdata$r	SEGMENT
??_R3CLockedInStream@N7z@NArchive@@8 DD 00H		; NArchive::N7z::CLockedInStream::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	03H
	DD	FLAT:??_R2CLockedInStream@N7z@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUCLockedInStream@N7z@NArchive@@@8
_DATA	SEGMENT
??_R0?AUCLockedInStream@N7z@NArchive@@@8 DD FLAT:??_7type_info@@6B@ ; NArchive::N7z::CLockedInStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUCLockedInStream@N7z@NArchive@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CLockedInStream@N7z@NArchive@@6B@
rdata$r	SEGMENT
??_R4CLockedInStream@N7z@NArchive@@6B@ DD 00H		; NArchive::N7z::CLockedInStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUCLockedInStream@N7z@NArchive@@@8
	DD	FLAT:??_R3CLockedInStream@N7z@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_7CLockedInStream@N7z@NArchive@@6B@
CONST	SEGMENT
??_7CLockedInStream@N7z@NArchive@@6B@ DD FLAT:??_R4CLockedInStream@N7z@NArchive@@6B@ ; NArchive::N7z::CLockedInStream::`vftable'
	DD	FLAT:?QueryInterface@CLockedInStream@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CLockedInStream@N7z@NArchive@@UAGKXZ
	DD	FLAT:?Release@CLockedInStream@N7z@NArchive@@UAGKXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CLockedInStream@N7z@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CLockedInStream@N7z@NArchive@@QAE@XZ$0
__ehfuncinfo$??0CLockedInStream@N7z@NArchive@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CLockedInStream@N7z@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CLockedInStream@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CLockedInStream@N7z@NArchive@@QAE@XZ PROC		; NArchive::N7z::CLockedInStream::CLockedInStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CLockedInStream@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CLockedInStream@N7z@NArchive@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::CMyComPtr<IInStream>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSection::CCriticalSection
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CLockedInStream@N7z@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
__ehhandler$??0CLockedInStream@N7z@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CLockedInStream@N7z@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CLockedInStream@N7z@NArchive@@QAE@XZ ENDP		; NArchive::N7z::CLockedInStream::CLockedInStream
EXTRN	_CriticalSection_Init@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ PROC ; NWindows::NSynchronization::CCriticalSection::CCriticalSection, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\synchronization.h
; Line 147
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	_CriticalSection_Init@4
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ ENDP ; NWindows::NSynchronization::CCriticalSection::CCriticalSection
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CLockedInStream@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CLockedInStream@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z PROC ; NArchive::N7z::CLockedInStream::QueryInterface, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zdecode.cpp
; Line 125
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@3
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN1@QueryInter@3
$LN2@QueryInter@3:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN3@QueryInter@3
$LN1@QueryInter@3:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	xor	eax, eax
$LN3@QueryInter@3:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CLockedInStream@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z ENDP ; NArchive::N7z::CLockedInStream::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CLockedInStream@N7z@NArchive@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CLockedInStream@N7z@NArchive@@UAGKXZ PROC	; NArchive::N7z::CLockedInStream::AddRef, COMDAT
; Line 125
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CLockedInStream@N7z@NArchive@@UAGKXZ ENDP	; NArchive::N7z::CLockedInStream::AddRef
_TEXT	ENDS
PUBLIC	??_GCLockedInStream@N7z@NArchive@@QAEPAXI@Z	; NArchive::N7z::CLockedInStream::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CLockedInStream@N7z@NArchive@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T75099 = -8						; size = 4
$T75098 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CLockedInStream@N7z@NArchive@@UAGKXZ PROC	; NArchive::N7z::CLockedInStream::Release, COMDAT
; Line 125
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	jmp	SHORT $LN2@Release@3
$LN1@Release@3:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T75099[ebp], edx
	mov	eax, DWORD PTR $T75099[ebp]
	mov	DWORD PTR $T75098[ebp], eax
	cmp	DWORD PTR $T75098[ebp], 0
	je	SHORT $LN4@Release@3
	push	1
	mov	ecx, DWORD PTR $T75098[ebp]
	call	??_GCLockedInStream@N7z@NArchive@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release@3
$LN4@Release@3:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release@3:
	xor	eax, eax
$LN2@Release@3:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CLockedInStream@N7z@NArchive@@UAGKXZ ENDP	; NArchive::N7z::CLockedInStream::Release
_TEXT	ENDS
PUBLIC	??1CLockedInStream@N7z@NArchive@@QAE@XZ		; NArchive::N7z::CLockedInStream::~CLockedInStream
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCLockedInStream@N7z@NArchive@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCLockedInStream@N7z@NArchive@@QAEPAXI@Z PROC	; NArchive::N7z::CLockedInStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CLockedInStream@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@3
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCLockedInStream@N7z@NArchive@@QAEPAXI@Z ENDP	; NArchive::N7z::CLockedInStream::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSection::~CCriticalSection
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CLockedInStream@N7z@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CLockedInStream@N7z@NArchive@@QAE@XZ$0
__ehfuncinfo$??1CLockedInStream@N7z@NArchive@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CLockedInStream@N7z@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CLockedInStream@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CLockedInStream@N7z@NArchive@@QAE@XZ PROC		; NArchive::N7z::CLockedInStream::~CLockedInStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CLockedInStream@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSection::~CCriticalSection
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CLockedInStream@N7z@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
__ehhandler$??1CLockedInStream@N7z@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CLockedInStream@N7z@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CLockedInStream@N7z@NArchive@@QAE@XZ ENDP		; NArchive::N7z::CLockedInStream::~CLockedInStream
EXTRN	__imp__DeleteCriticalSection@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ PROC ; NWindows::NSynchronization::CCriticalSection::~CCriticalSection, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\synchronization.h
; Line 148
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	DWORD PTR __imp__DeleteCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ ENDP ; NWindows::NSynchronization::CCriticalSection::~CCriticalSection
_TEXT	ENDS
PUBLIC	??_7CLockedSequentialInStreamMT@N7z@NArchive@@6B@ ; NArchive::N7z::CLockedSequentialInStreamMT::`vftable'
PUBLIC	??0ISequentialInStream@@QAE@XZ			; ISequentialInStream::ISequentialInStream
PUBLIC	??_R4CLockedSequentialInStreamMT@N7z@NArchive@@6B@ ; NArchive::N7z::CLockedSequentialInStreamMT::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCLockedSequentialInStreamMT@N7z@NArchive@@@8 ; NArchive::N7z::CLockedSequentialInStreamMT `RTTI Type Descriptor'
PUBLIC	??_R3CLockedSequentialInStreamMT@N7z@NArchive@@8 ; NArchive::N7z::CLockedSequentialInStreamMT::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CLockedSequentialInStreamMT@N7z@NArchive@@8 ; NArchive::N7z::CLockedSequentialInStreamMT::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CLockedSequentialInStreamMT@N7z@NArchive@@8 ; NArchive::N7z::CLockedSequentialInStreamMT::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ISequentialInStream@@8		; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUISequentialInStream@@@8			; ISequentialInStream `RTTI Type Descriptor'
PUBLIC	??_R3ISequentialInStream@@8			; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ISequentialInStream@@8			; ISequentialInStream::`RTTI Base Class Array'
PUBLIC	?QueryInterface@CLockedSequentialInStreamMT@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::N7z::CLockedSequentialInStreamMT::QueryInterface
PUBLIC	?AddRef@CLockedSequentialInStreamMT@N7z@NArchive@@UAGKXZ ; NArchive::N7z::CLockedSequentialInStreamMT::AddRef
PUBLIC	?Release@CLockedSequentialInStreamMT@N7z@NArchive@@UAGKXZ ; NArchive::N7z::CLockedSequentialInStreamMT::Release
;	COMDAT ??_R2ISequentialInStream@@8
rdata$r	SEGMENT
??_R2ISequentialInStream@@8 DD FLAT:??_R1A@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ISequentialInStream@@8
rdata$r	SEGMENT
??_R3ISequentialInStream@@8 DD 00H			; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ISequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUISequentialInStream@@@8
_DATA	SEGMENT
??_R0?AUISequentialInStream@@@8 DD FLAT:??_7type_info@@6B@ ; ISequentialInStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUISequentialInStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ISequentialInStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ISequentialInStream@@8 DD FLAT:??_R0?AUISequentialInStream@@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ISequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CLockedSequentialInStreamMT@N7z@NArchive@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CLockedSequentialInStreamMT@N7z@NArchive@@8 DD FLAT:??_R0?AVCLockedSequentialInStreamMT@N7z@NArchive@@@8 ; NArchive::N7z::CLockedSequentialInStreamMT::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CLockedSequentialInStreamMT@N7z@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R2CLockedSequentialInStreamMT@N7z@NArchive@@8
rdata$r	SEGMENT
??_R2CLockedSequentialInStreamMT@N7z@NArchive@@8 DD FLAT:??_R1A@?0A@EA@CLockedSequentialInStreamMT@N7z@NArchive@@8 ; NArchive::N7z::CLockedSequentialInStreamMT::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ISequentialInStream@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CLockedSequentialInStreamMT@N7z@NArchive@@8
rdata$r	SEGMENT
??_R3CLockedSequentialInStreamMT@N7z@NArchive@@8 DD 00H	; NArchive::N7z::CLockedSequentialInStreamMT::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2CLockedSequentialInStreamMT@N7z@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCLockedSequentialInStreamMT@N7z@NArchive@@@8
_DATA	SEGMENT
??_R0?AVCLockedSequentialInStreamMT@N7z@NArchive@@@8 DD FLAT:??_7type_info@@6B@ ; NArchive::N7z::CLockedSequentialInStreamMT `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCLockedSequentialInStreamMT@N7z@NArchive@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CLockedSequentialInStreamMT@N7z@NArchive@@6B@
rdata$r	SEGMENT
??_R4CLockedSequentialInStreamMT@N7z@NArchive@@6B@ DD 00H ; NArchive::N7z::CLockedSequentialInStreamMT::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCLockedSequentialInStreamMT@N7z@NArchive@@@8
	DD	FLAT:??_R3CLockedSequentialInStreamMT@N7z@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_7CLockedSequentialInStreamMT@N7z@NArchive@@6B@
CONST	SEGMENT
??_7CLockedSequentialInStreamMT@N7z@NArchive@@6B@ DD FLAT:??_R4CLockedSequentialInStreamMT@N7z@NArchive@@6B@ ; NArchive::N7z::CLockedSequentialInStreamMT::`vftable'
	DD	FLAT:?QueryInterface@CLockedSequentialInStreamMT@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CLockedSequentialInStreamMT@N7z@NArchive@@UAGKXZ
	DD	FLAT:?Release@CLockedSequentialInStreamMT@N7z@NArchive@@UAGKXZ
	DD	FLAT:?Read@CLockedSequentialInStreamMT@N7z@NArchive@@UAGJPAXIPAI@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CLockedSequentialInStreamMT@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CLockedSequentialInStreamMT@N7z@NArchive@@QAE@XZ PROC ; NArchive::N7z::CLockedSequentialInStreamMT::CLockedSequentialInStreamMT, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ISequentialInStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CLockedSequentialInStreamMT@N7z@NArchive@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::CMyComPtr<IUnknown>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CLockedSequentialInStreamMT@N7z@NArchive@@QAE@XZ ENDP ; NArchive::N7z::CLockedSequentialInStreamMT::CLockedSequentialInStreamMT
_TEXT	ENDS
PUBLIC	??_7ISequentialInStream@@6B@			; ISequentialInStream::`vftable'
PUBLIC	??_R4ISequentialInStream@@6B@			; ISequentialInStream::`RTTI Complete Object Locator'
;	COMDAT ??_R4ISequentialInStream@@6B@
rdata$r	SEGMENT
??_R4ISequentialInStream@@6B@ DD 00H			; ISequentialInStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUISequentialInStream@@@8
	DD	FLAT:??_R3ISequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_7ISequentialInStream@@6B@
CONST	SEGMENT
??_7ISequentialInStream@@6B@ DD FLAT:??_R4ISequentialInStream@@6B@ ; ISequentialInStream::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ISequentialInStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ISequentialInStream@@QAE@XZ PROC			; ISequentialInStream::ISequentialInStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ISequentialInStream@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ISequentialInStream@@QAE@XZ ENDP			; ISequentialInStream::ISequentialInStream
_TEXT	ENDS
EXTRN	_IID_ISequentialInStream:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@CLockedSequentialInStreamMT@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CLockedSequentialInStreamMT@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z PROC ; NArchive::N7z::CLockedSequentialInStreamMT::QueryInterface, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zdecode.cpp
; Line 150
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@QueryInter@4
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN3@QueryInter@4
$LN4@QueryInter@4:
	push	OFFSET _IID_ISequentialInStream
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@4
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN3@QueryInter@4
$LN2@QueryInter@4:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN5@QueryInter@4
$LN3@QueryInter@4:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	xor	eax, eax
$LN5@QueryInter@4:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CLockedSequentialInStreamMT@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z ENDP ; NArchive::N7z::CLockedSequentialInStreamMT::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CLockedSequentialInStreamMT@N7z@NArchive@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CLockedSequentialInStreamMT@N7z@NArchive@@UAGKXZ PROC ; NArchive::N7z::CLockedSequentialInStreamMT::AddRef, COMDAT
; Line 150
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CLockedSequentialInStreamMT@N7z@NArchive@@UAGKXZ ENDP ; NArchive::N7z::CLockedSequentialInStreamMT::AddRef
_TEXT	ENDS
PUBLIC	??_GCLockedSequentialInStreamMT@N7z@NArchive@@QAEPAXI@Z ; NArchive::N7z::CLockedSequentialInStreamMT::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CLockedSequentialInStreamMT@N7z@NArchive@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T75128 = -8						; size = 4
$T75127 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CLockedSequentialInStreamMT@N7z@NArchive@@UAGKXZ PROC ; NArchive::N7z::CLockedSequentialInStreamMT::Release, COMDAT
; Line 150
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	jmp	SHORT $LN2@Release@4
$LN1@Release@4:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T75128[ebp], edx
	mov	eax, DWORD PTR $T75128[ebp]
	mov	DWORD PTR $T75127[ebp], eax
	cmp	DWORD PTR $T75127[ebp], 0
	je	SHORT $LN4@Release@4
	push	1
	mov	ecx, DWORD PTR $T75127[ebp]
	call	??_GCLockedSequentialInStreamMT@N7z@NArchive@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release@4
$LN4@Release@4:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release@4:
	xor	eax, eax
$LN2@Release@4:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CLockedSequentialInStreamMT@N7z@NArchive@@UAGKXZ ENDP ; NArchive::N7z::CLockedSequentialInStreamMT::Release
_TEXT	ENDS
PUBLIC	??1CLockedSequentialInStreamMT@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CLockedSequentialInStreamMT::~CLockedSequentialInStreamMT
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCLockedSequentialInStreamMT@N7z@NArchive@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCLockedSequentialInStreamMT@N7z@NArchive@@QAEPAXI@Z PROC ; NArchive::N7z::CLockedSequentialInStreamMT::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CLockedSequentialInStreamMT@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@4:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCLockedSequentialInStreamMT@N7z@NArchive@@QAEPAXI@Z ENDP ; NArchive::N7z::CLockedSequentialInStreamMT::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CLockedSequentialInStreamMT@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CLockedSequentialInStreamMT@N7z@NArchive@@QAE@XZ PROC ; NArchive::N7z::CLockedSequentialInStreamMT::~CLockedSequentialInStreamMT, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CLockedSequentialInStreamMT@N7z@NArchive@@QAE@XZ ENDP ; NArchive::N7z::CLockedSequentialInStreamMT::~CLockedSequentialInStreamMT
_TEXT	ENDS
PUBLIC	??_7CLockedSequentialInStreamST@N7z@NArchive@@6B@ ; NArchive::N7z::CLockedSequentialInStreamST::`vftable'
PUBLIC	??_R4CLockedSequentialInStreamST@N7z@NArchive@@6B@ ; NArchive::N7z::CLockedSequentialInStreamST::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCLockedSequentialInStreamST@N7z@NArchive@@@8 ; NArchive::N7z::CLockedSequentialInStreamST `RTTI Type Descriptor'
PUBLIC	??_R3CLockedSequentialInStreamST@N7z@NArchive@@8 ; NArchive::N7z::CLockedSequentialInStreamST::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CLockedSequentialInStreamST@N7z@NArchive@@8 ; NArchive::N7z::CLockedSequentialInStreamST::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CLockedSequentialInStreamST@N7z@NArchive@@8 ; NArchive::N7z::CLockedSequentialInStreamST::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?QueryInterface@CLockedSequentialInStreamST@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::N7z::CLockedSequentialInStreamST::QueryInterface
PUBLIC	?AddRef@CLockedSequentialInStreamST@N7z@NArchive@@UAGKXZ ; NArchive::N7z::CLockedSequentialInStreamST::AddRef
PUBLIC	?Release@CLockedSequentialInStreamST@N7z@NArchive@@UAGKXZ ; NArchive::N7z::CLockedSequentialInStreamST::Release
;	COMDAT ??_R1A@?0A@EA@CLockedSequentialInStreamST@N7z@NArchive@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CLockedSequentialInStreamST@N7z@NArchive@@8 DD FLAT:??_R0?AVCLockedSequentialInStreamST@N7z@NArchive@@@8 ; NArchive::N7z::CLockedSequentialInStreamST::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CLockedSequentialInStreamST@N7z@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R2CLockedSequentialInStreamST@N7z@NArchive@@8
rdata$r	SEGMENT
??_R2CLockedSequentialInStreamST@N7z@NArchive@@8 DD FLAT:??_R1A@?0A@EA@CLockedSequentialInStreamST@N7z@NArchive@@8 ; NArchive::N7z::CLockedSequentialInStreamST::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ISequentialInStream@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CLockedSequentialInStreamST@N7z@NArchive@@8
rdata$r	SEGMENT
??_R3CLockedSequentialInStreamST@N7z@NArchive@@8 DD 00H	; NArchive::N7z::CLockedSequentialInStreamST::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2CLockedSequentialInStreamST@N7z@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCLockedSequentialInStreamST@N7z@NArchive@@@8
_DATA	SEGMENT
??_R0?AVCLockedSequentialInStreamST@N7z@NArchive@@@8 DD FLAT:??_7type_info@@6B@ ; NArchive::N7z::CLockedSequentialInStreamST `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCLockedSequentialInStreamST@N7z@NArchive@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CLockedSequentialInStreamST@N7z@NArchive@@6B@
rdata$r	SEGMENT
??_R4CLockedSequentialInStreamST@N7z@NArchive@@6B@ DD 00H ; NArchive::N7z::CLockedSequentialInStreamST::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCLockedSequentialInStreamST@N7z@NArchive@@@8
	DD	FLAT:??_R3CLockedSequentialInStreamST@N7z@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_7CLockedSequentialInStreamST@N7z@NArchive@@6B@
CONST	SEGMENT
??_7CLockedSequentialInStreamST@N7z@NArchive@@6B@ DD FLAT:??_R4CLockedSequentialInStreamST@N7z@NArchive@@6B@ ; NArchive::N7z::CLockedSequentialInStreamST::`vftable'
	DD	FLAT:?QueryInterface@CLockedSequentialInStreamST@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CLockedSequentialInStreamST@N7z@NArchive@@UAGKXZ
	DD	FLAT:?Release@CLockedSequentialInStreamST@N7z@NArchive@@UAGKXZ
	DD	FLAT:?Read@CLockedSequentialInStreamST@N7z@NArchive@@UAGJPAXIPAI@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CLockedSequentialInStreamST@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CLockedSequentialInStreamST@N7z@NArchive@@QAE@XZ PROC ; NArchive::N7z::CLockedSequentialInStreamST::CLockedSequentialInStreamST, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ISequentialInStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CLockedSequentialInStreamST@N7z@NArchive@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::CMyComPtr<IUnknown>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CLockedSequentialInStreamST@N7z@NArchive@@QAE@XZ ENDP ; NArchive::N7z::CLockedSequentialInStreamST::CLockedSequentialInStreamST
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CLockedSequentialInStreamST@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CLockedSequentialInStreamST@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z PROC ; NArchive::N7z::CLockedSequentialInStreamST::QueryInterface, COMDAT
; Line 194
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@QueryInter@5
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN3@QueryInter@5
$LN4@QueryInter@5:
	push	OFFSET _IID_ISequentialInStream
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@5
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN3@QueryInter@5
$LN2@QueryInter@5:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN5@QueryInter@5
$LN3@QueryInter@5:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	xor	eax, eax
$LN5@QueryInter@5:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CLockedSequentialInStreamST@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z ENDP ; NArchive::N7z::CLockedSequentialInStreamST::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CLockedSequentialInStreamST@N7z@NArchive@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CLockedSequentialInStreamST@N7z@NArchive@@UAGKXZ PROC ; NArchive::N7z::CLockedSequentialInStreamST::AddRef, COMDAT
; Line 194
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CLockedSequentialInStreamST@N7z@NArchive@@UAGKXZ ENDP ; NArchive::N7z::CLockedSequentialInStreamST::AddRef
_TEXT	ENDS
PUBLIC	??_GCLockedSequentialInStreamST@N7z@NArchive@@QAEPAXI@Z ; NArchive::N7z::CLockedSequentialInStreamST::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CLockedSequentialInStreamST@N7z@NArchive@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T75146 = -8						; size = 4
$T75145 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CLockedSequentialInStreamST@N7z@NArchive@@UAGKXZ PROC ; NArchive::N7z::CLockedSequentialInStreamST::Release, COMDAT
; Line 194
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	jmp	SHORT $LN2@Release@5
$LN1@Release@5:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T75146[ebp], edx
	mov	eax, DWORD PTR $T75146[ebp]
	mov	DWORD PTR $T75145[ebp], eax
	cmp	DWORD PTR $T75145[ebp], 0
	je	SHORT $LN4@Release@5
	push	1
	mov	ecx, DWORD PTR $T75145[ebp]
	call	??_GCLockedSequentialInStreamST@N7z@NArchive@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release@5
$LN4@Release@5:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release@5:
	xor	eax, eax
$LN2@Release@5:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CLockedSequentialInStreamST@N7z@NArchive@@UAGKXZ ENDP ; NArchive::N7z::CLockedSequentialInStreamST::Release
_TEXT	ENDS
PUBLIC	??1CLockedSequentialInStreamST@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CLockedSequentialInStreamST::~CLockedSequentialInStreamST
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCLockedSequentialInStreamST@N7z@NArchive@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCLockedSequentialInStreamST@N7z@NArchive@@QAEPAXI@Z PROC ; NArchive::N7z::CLockedSequentialInStreamST::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CLockedSequentialInStreamST@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@5
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@5:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCLockedSequentialInStreamST@N7z@NArchive@@QAEPAXI@Z ENDP ; NArchive::N7z::CLockedSequentialInStreamST::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CLockedSequentialInStreamST@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CLockedSequentialInStreamST@N7z@NArchive@@QAE@XZ PROC ; NArchive::N7z::CLockedSequentialInStreamST::~CLockedSequentialInStreamST, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CLockedSequentialInStreamST@N7z@NArchive@@QAE@XZ ENDP ; NArchive::N7z::CLockedSequentialInStreamST::~CLockedSequentialInStreamST
_TEXT	ENDS
PUBLIC	??_7CLimitedSequentialInStream@@6B@		; CLimitedSequentialInStream::`vftable'
PUBLIC	??_R4CLimitedSequentialInStream@@6B@		; CLimitedSequentialInStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCLimitedSequentialInStream@@@8		; CLimitedSequentialInStream `RTTI Type Descriptor'
PUBLIC	??_R3CLimitedSequentialInStream@@8		; CLimitedSequentialInStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CLimitedSequentialInStream@@8		; CLimitedSequentialInStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CLimitedSequentialInStream@@8	; CLimitedSequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?QueryInterface@CLimitedSequentialInStream@@UAGJABU_GUID@@PAPAX@Z ; CLimitedSequentialInStream::QueryInterface
PUBLIC	?AddRef@CLimitedSequentialInStream@@UAGKXZ	; CLimitedSequentialInStream::AddRef
PUBLIC	?Release@CLimitedSequentialInStream@@UAGKXZ	; CLimitedSequentialInStream::Release
EXTRN	?Read@CLimitedSequentialInStream@@UAGJPAXIPAI@Z:PROC ; CLimitedSequentialInStream::Read
;	COMDAT ??_R1A@?0A@EA@CLimitedSequentialInStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CLimitedSequentialInStream@@8 DD FLAT:??_R0?AVCLimitedSequentialInStream@@@8 ; CLimitedSequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CLimitedSequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_R2CLimitedSequentialInStream@@8
rdata$r	SEGMENT
??_R2CLimitedSequentialInStream@@8 DD FLAT:??_R1A@?0A@EA@CLimitedSequentialInStream@@8 ; CLimitedSequentialInStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ISequentialInStream@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CLimitedSequentialInStream@@8
rdata$r	SEGMENT
??_R3CLimitedSequentialInStream@@8 DD 00H		; CLimitedSequentialInStream::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2CLimitedSequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCLimitedSequentialInStream@@@8
_DATA	SEGMENT
??_R0?AVCLimitedSequentialInStream@@@8 DD FLAT:??_7type_info@@6B@ ; CLimitedSequentialInStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCLimitedSequentialInStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CLimitedSequentialInStream@@6B@
rdata$r	SEGMENT
??_R4CLimitedSequentialInStream@@6B@ DD 00H		; CLimitedSequentialInStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCLimitedSequentialInStream@@@8
	DD	FLAT:??_R3CLimitedSequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_7CLimitedSequentialInStream@@6B@
CONST	SEGMENT
??_7CLimitedSequentialInStream@@6B@ DD FLAT:??_R4CLimitedSequentialInStream@@6B@ ; CLimitedSequentialInStream::`vftable'
	DD	FLAT:?QueryInterface@CLimitedSequentialInStream@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CLimitedSequentialInStream@@UAGKXZ
	DD	FLAT:?Release@CLimitedSequentialInStream@@UAGKXZ
	DD	FLAT:?Read@CLimitedSequentialInStream@@UAGJPAXIPAI@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CLimitedSequentialInStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CLimitedSequentialInStream@@QAE@XZ PROC		; CLimitedSequentialInStream::CLimitedSequentialInStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ISequentialInStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CLimitedSequentialInStream@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CLimitedSequentialInStream@@QAE@XZ ENDP		; CLimitedSequentialInStream::CLimitedSequentialInStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CLimitedSequentialInStream@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CLimitedSequentialInStream@@UAGJABU_GUID@@PAPAX@Z PROC ; CLimitedSequentialInStream::QueryInterface, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\common\limitedstreams.h
; Line 29
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@QueryInter@6
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN3@QueryInter@6
$LN4@QueryInter@6:
	push	OFFSET _IID_ISequentialInStream
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@6
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN3@QueryInter@6
$LN2@QueryInter@6:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN5@QueryInter@6
$LN3@QueryInter@6:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	xor	eax, eax
$LN5@QueryInter@6:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CLimitedSequentialInStream@@UAGJABU_GUID@@PAPAX@Z ENDP ; CLimitedSequentialInStream::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CLimitedSequentialInStream@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CLimitedSequentialInStream@@UAGKXZ PROC		; CLimitedSequentialInStream::AddRef, COMDAT
; Line 29
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CLimitedSequentialInStream@@UAGKXZ ENDP		; CLimitedSequentialInStream::AddRef
_TEXT	ENDS
PUBLIC	??_GCLimitedSequentialInStream@@QAEPAXI@Z	; CLimitedSequentialInStream::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CLimitedSequentialInStream@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T75164 = -8						; size = 4
$T75163 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CLimitedSequentialInStream@@UAGKXZ PROC	; CLimitedSequentialInStream::Release, COMDAT
; Line 29
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	jmp	SHORT $LN2@Release@6
$LN1@Release@6:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T75164[ebp], edx
	mov	eax, DWORD PTR $T75164[ebp]
	mov	DWORD PTR $T75163[ebp], eax
	cmp	DWORD PTR $T75163[ebp], 0
	je	SHORT $LN4@Release@6
	push	1
	mov	ecx, DWORD PTR $T75163[ebp]
	call	??_GCLimitedSequentialInStream@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release@6
$LN4@Release@6:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release@6:
	xor	eax, eax
$LN2@Release@6:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CLimitedSequentialInStream@@UAGKXZ ENDP	; CLimitedSequentialInStream::Release
_TEXT	ENDS
PUBLIC	??1CLimitedSequentialInStream@@QAE@XZ		; CLimitedSequentialInStream::~CLimitedSequentialInStream
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCLimitedSequentialInStream@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCLimitedSequentialInStream@@QAEPAXI@Z PROC		; CLimitedSequentialInStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CLimitedSequentialInStream@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@6
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@6:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCLimitedSequentialInStream@@QAEPAXI@Z ENDP		; CLimitedSequentialInStream::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CLimitedSequentialInStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CLimitedSequentialInStream@@QAE@XZ PROC		; CLimitedSequentialInStream::~CLimitedSequentialInStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CLimitedSequentialInStream@@QAE@XZ ENDP		; CLimitedSequentialInStream::~CLimitedSequentialInStream
_TEXT	ENDS
PUBLIC	??1?$CObjArray2@I@@QAE@XZ			; CObjArray2<unsigned int>::~CObjArray2<unsigned int>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CFolder@N7z@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CFolder@N7z@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CFolder@N7z@NArchive@@QAE@XZ$1
__ehfuncinfo$??1CFolder@N7z@NArchive@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CFolder@N7z@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CFolder@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CFolder@N7z@NArchive@@QAE@XZ PROC			; NArchive::N7z::CFolder::~CFolder, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CFolder@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??1?$CObjArray2@I@@QAE@XZ		; CObjArray2<unsigned int>::~CObjArray2<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ ; CObjArray2<NArchive::N7z::CBond>::~CObjArray2<NArchive::N7z::CBond>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ ; CObjArray2<NArchive::N7z::CCoderInfo>::~CObjArray2<NArchive::N7z::CCoderInfo>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CFolder@N7z@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ ; CObjArray2<NArchive::N7z::CCoderInfo>::~CObjArray2<NArchive::N7z::CCoderInfo>
__unwindfunclet$??1CFolder@N7z@NArchive@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ ; CObjArray2<NArchive::N7z::CBond>::~CObjArray2<NArchive::N7z::CBond>
__ehhandler$??1CFolder@N7z@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CFolder@N7z@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CFolder@N7z@NArchive@@QAE@XZ ENDP			; NArchive::N7z::CFolder::~CFolder
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ PROC ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ENDP ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z PROC ; CMyComPtr<ISequentialInStream>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ENDP ; CMyComPtr<ISequentialInStream>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIInStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UIInStream@@@@QAE@XZ PROC		; CMyComPtr<IInStream>::CMyComPtr<IInStream>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UIInStream@@@@QAE@XZ ENDP		; CMyComPtr<IInStream>::CMyComPtr<IInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIInStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIInStream@@@@QAE@XZ PROC		; CMyComPtr<IInStream>::~CMyComPtr<IInStream>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@2:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIInStream@@@@QAE@XZ ENDP		; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ PROC	; CMyComPtr<IInStream>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ENDP	; CMyComPtr<IInStream>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z PROC ; CMyComPtr<IInStream>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@2
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@2:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@2
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@2:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ENDP ; CMyComPtr<IInStream>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@I@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@I@@QAE@XZ PROC			; CRecordVector<unsigned int>::CRecordVector<unsigned int>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@I@@QAE@XZ ENDP			; CRecordVector<unsigned int>::CRecordVector<unsigned int>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@I@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@I@@QBEIXZ PROC			; CRecordVector<unsigned int>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@I@@QBEIXZ ENDP			; CRecordVector<unsigned int>::Size
_TEXT	ENDS
PUBLIC	?ClearAndReserve@?$CRecordVector@I@@QAEXI@Z	; CRecordVector<unsigned int>::ClearAndReserve
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ClearAndSetSize@?$CRecordVector@I@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newSize$ = 8						; size = 4
?ClearAndSetSize@?$CRecordVector@I@@QAEXI@Z PROC	; CRecordVector<unsigned int>::ClearAndSetSize, COMDAT
; _this$ = ecx
; Line 87
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 88
	mov	eax, DWORD PTR _newSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearAndReserve@?$CRecordVector@I@@QAEXI@Z ; CRecordVector<unsigned int>::ClearAndReserve
; Line 89
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _newSize$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 90
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearAndSetSize@?$CRecordVector@I@@QAEXI@Z ENDP	; CRecordVector<unsigned int>::ClearAndSetSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@I@@QAE@XZ
_TEXT	SEGMENT
$T75207 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@I@@QAE@XZ PROC			; CRecordVector<unsigned int>::~CRecordVector<unsigned int>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T75207[ebp], ecx
	mov	edx, DWORD PTR $T75207[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@I@@QAE@XZ ENDP			; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Clear@?$CRecordVector@I@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$CRecordVector@I@@QAEXXZ PROC			; CRecordVector<unsigned int>::Clear, COMDAT
; _this$ = ecx
; Line 131
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CRecordVector@I@@QAEXXZ ENDP			; CRecordVector<unsigned int>::Clear
_TEXT	ENDS
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4?$CRecordVector@I@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
$T75213 = -16						; size = 4
$T75212 = -12						; size = 4
_size$ = -8						; size = 4
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??4?$CRecordVector@I@@QAEAAV0@ABV0@@Z PROC		; CRecordVector<unsigned int>::operator=, COMDAT
; _this$ = ecx
; Line 168
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 169
	mov	eax, DWORD PTR _v$[ebp]
	cmp	eax, DWORD PTR _this$[ebp]
	jne	SHORT $LN3@operator@3
; Line 170
	mov	eax, DWORD PTR _this$[ebp]
	jmp	$LN4@operator@3
$LN3@operator@3:
; Line 171
	mov	ecx, DWORD PTR _v$[ebp]
	call	?Size@?$CRecordVector@I@@QBEIXZ		; CRecordVector<unsigned int>::Size
	mov	DWORD PTR _size$[ebp], eax
; Line 172
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jbe	SHORT $LN2@operator@3
; Line 174
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T75212[ebp], ecx
	mov	edx, DWORD PTR $T75212[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 175
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 176
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 177
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0
; Line 178
	xor	ecx, ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T75213[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T75213[ebp]
	mov	DWORD PTR [eax], ecx
; Line 179
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@operator@3:
; Line 181
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 182
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN1@operator@3
; Line 183
	mov	eax, DWORD PTR _size$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@operator@3:
; Line 184
	mov	eax, DWORD PTR _this$[ebp]
$LN4@operator@3:
; Line 185
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CRecordVector@I@@QAEAAV0@ABV0@@Z ENDP		; CRecordVector<unsigned int>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@I@@QBEABII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@I@@QBEABII@Z PROC			; CRecordVector<unsigned int>::operator[], COMDAT
; _this$ = ecx
; Line 227
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@I@@QBEABII@Z ENDP			; CRecordVector<unsigned int>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@I@@QAEAAII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@I@@QAEAAII@Z PROC			; CRecordVector<unsigned int>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@I@@QAEAAII@Z ENDP			; CRecordVector<unsigned int>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CBuffer@E@@QAE@I@Z
_TEXT	SEGMENT
$T75220 = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
??0?$CBuffer@E@@QAE@I@Z PROC				; CBuffer<unsigned char>::CBuffer<unsigned char>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mybuffer.h
; Line 25
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T75220[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T75220[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CBuffer@E@@QAE@I@Z ENDP				; CBuffer<unsigned char>::CBuffer<unsigned char>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CBuffer@E@@QAE@XZ
_TEXT	SEGMENT
$T75223 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CBuffer@E@@QAE@XZ PROC				; CBuffer<unsigned char>::~CBuffer<unsigned char>, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T75223[ebp], ecx
	mov	edx, DWORD PTR $T75223[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CBuffer@E@@QAE@XZ ENDP				; CBuffer<unsigned char>::~CBuffer<unsigned char>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CBuffer@E@@QAEPAEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CBuffer@E@@QAEPAEXZ PROC				; CBuffer<unsigned char>::operator unsigned char *, COMDAT
; _this$ = ecx
; Line 39
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CBuffer@E@@QAEPAEXZ ENDP				; CBuffer<unsigned char>::operator unsigned char *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CBuffer@E@@QBEPBEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CBuffer@E@@QBEPBEXZ PROC				; CBuffer<unsigned char>::operator unsigned char const *, COMDAT
; _this$ = ecx
; Line 40
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CBuffer@E@@QBEPBEXZ ENDP				; CBuffer<unsigned char>::operator unsigned char const *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CBuffer@E@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CBuffer@E@@QBEIXZ PROC				; CBuffer<unsigned char>::Size, COMDAT
; _this$ = ecx
; Line 41
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CBuffer@E@@QBEIXZ ENDP				; CBuffer<unsigned char>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ PROC	; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ENDP	; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z PROC ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@CMyComPtr@3
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@3:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z ENDP ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ PROC	; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@4:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ENDP	; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ PROC ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ENDP ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ PROC ; CMyComPtr<ICompressProgressInfo>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ENDP ; CMyComPtr<ICompressProgressInfo>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UICompressProgressInfo@@@@QAEPAUICompressProgressInfo@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UICompressProgressInfo@@@@QAEPAUICompressProgressInfo@@PAU1@@Z PROC ; CMyComPtr<ICompressProgressInfo>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@4
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@4:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@4
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@4:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UICompressProgressInfo@@@@QAEPAUICompressProgressInfo@@PAU1@@Z ENDP ; CMyComPtr<ICompressProgressInfo>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIUnknown@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UIUnknown@@@@QAE@XZ PROC			; CMyComPtr<IUnknown>::CMyComPtr<IUnknown>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UIUnknown@@@@QAE@XZ ENDP			; CMyComPtr<IUnknown>::CMyComPtr<IUnknown>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIUnknown@@@@QAE@PAUIUnknown@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??0?$CMyComPtr@UIUnknown@@@@QAE@PAUIUnknown@@@Z PROC	; CMyComPtr<IUnknown>::CMyComPtr<IUnknown>, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@CMyComPtr@5
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@5:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UIUnknown@@@@QAE@PAUIUnknown@@@Z ENDP	; CMyComPtr<IUnknown>::CMyComPtr<IUnknown>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIUnknown@@@@QAE@XZ PROC			; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@6:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIUnknown@@@@QAE@XZ ENDP			; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@?$CMyComPtr@UIUnknown@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Release@?$CMyComPtr@UIUnknown@@@@QAEXXZ PROC		; CMyComPtr<IUnknown>::Release, COMDAT
; _this$ = ecx
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Release@7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
$LN2@Release@7:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Release@?$CMyComPtr@UIUnknown@@@@QAEXXZ ENDP		; CMyComPtr<IUnknown>::Release
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z PROC ; CMyComPtr<IUnknown>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@5
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@5:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@5
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@5:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z ENDP ; CMyComPtr<IUnknown>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ PROC		; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ ENDP		; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ PROC		; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@7:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ENDP		; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ PROC ; CMyComPtr<ICompressCoder>::operator ICompressCoder *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ENDP ; CMyComPtr<ICompressCoder>::operator ICompressCoder *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??7?$CMyComPtr@UICompressCoder@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??7?$CMyComPtr@UICompressCoder@@@@QBE_NXZ PROC		; CMyComPtr<ICompressCoder>::operator!, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
??7?$CMyComPtr@UICompressCoder@@@@QBE_NXZ ENDP		; CMyComPtr<ICompressCoder>::operator!
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICompressCoder2@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UICompressCoder2@@@@QAE@XZ PROC		; CMyComPtr<ICompressCoder2>::CMyComPtr<ICompressCoder2>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UICompressCoder2@@@@QAE@XZ ENDP		; CMyComPtr<ICompressCoder2>::CMyComPtr<ICompressCoder2>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICompressCoder2@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICompressCoder2@@@@QAE@XZ PROC		; CMyComPtr<ICompressCoder2>::~CMyComPtr<ICompressCoder2>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@8:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICompressCoder2@@@@QAE@XZ ENDP		; CMyComPtr<ICompressCoder2>::~CMyComPtr<ICompressCoder2>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UICompressCoder2@@@@QBEPAUICompressCoder2@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UICompressCoder2@@@@QBEPAUICompressCoder2@@XZ PROC ; CMyComPtr<ICompressCoder2>::operator ICompressCoder2 *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UICompressCoder2@@@@QBEPAUICompressCoder2@@XZ ENDP ; CMyComPtr<ICompressCoder2>::operator ICompressCoder2 *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??7?$CMyComPtr@UICompressCoder2@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??7?$CMyComPtr@UICompressCoder2@@@@QBE_NXZ PROC		; CMyComPtr<ICompressCoder2>::operator!, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
??7?$CMyComPtr@UICompressCoder2@@@@QBE_NXZ ENDP		; CMyComPtr<ICompressCoder2>::operator!
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ PROC ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::CRecordVector<NCoderMixer2::CCoderStreamsInfo>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ ENDP ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::CRecordVector<NCoderMixer2::CCoderStreamsInfo>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEIXZ PROC ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEIXZ ENDP ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Size
_TEXT	ENDS
PUBLIC	?ClearAndReserve@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEXI@Z ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::ClearAndReserve
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ClearAndSetSize@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newSize$ = 8						; size = 4
?ClearAndSetSize@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEXI@Z PROC ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::ClearAndSetSize, COMDAT
; _this$ = ecx
; Line 87
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 88
	mov	eax, DWORD PTR _newSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearAndReserve@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEXI@Z ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::ClearAndReserve
; Line 89
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _newSize$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 90
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearAndSetSize@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEXI@Z ENDP ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::ClearAndSetSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ
_TEXT	SEGMENT
$T75276 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ PROC ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::~CRecordVector<NCoderMixer2::CCoderStreamsInfo>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T75276[ebp], ecx
	mov	edx, DWORD PTR $T75276[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ ENDP ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::~CRecordVector<NCoderMixer2::CCoderStreamsInfo>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Clear@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEXXZ PROC ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Clear, COMDAT
; _this$ = ecx
; Line 131
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEXXZ ENDP ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
$T75282 = -16						; size = 4
$T75281 = -12						; size = 4
_size$ = -8						; size = 4
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??4?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAV0@ABV0@@Z PROC ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator=, COMDAT
; _this$ = ecx
; Line 168
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 169
	mov	eax, DWORD PTR _v$[ebp]
	cmp	eax, DWORD PTR _this$[ebp]
	jne	SHORT $LN3@operator@6
; Line 170
	mov	eax, DWORD PTR _this$[ebp]
	jmp	$LN4@operator@6
$LN3@operator@6:
; Line 171
	mov	ecx, DWORD PTR _v$[ebp]
	call	?Size@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Size
	mov	DWORD PTR _size$[ebp], eax
; Line 172
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jbe	SHORT $LN2@operator@6
; Line 174
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T75281[ebp], ecx
	mov	edx, DWORD PTR $T75281[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 175
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 176
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 177
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0
; Line 178
	xor	ecx, ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T75282[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T75282[ebp]
	mov	DWORD PTR [eax], ecx
; Line 179
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@operator@6:
; Line 181
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 182
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN1@operator@6
; Line 183
	mov	eax, DWORD PTR _size$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@operator@6:
; Line 184
	mov	eax, DWORD PTR _this$[ebp]
$LN4@operator@6:
; Line 185
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAV0@ABV0@@Z ENDP ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEABUCCoderStreamsInfo@NCoderMixer2@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEABUCCoderStreamsInfo@NCoderMixer2@@I@Z PROC ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator[], COMDAT
; _this$ = ecx
; Line 227
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QBEABUCCoderStreamsInfo@NCoderMixer2@@I@Z ENDP ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAUCCoderStreamsInfo@NCoderMixer2@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAUCCoderStreamsInfo@NCoderMixer2@@I@Z PROC ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEAAUCCoderStreamsInfo@NCoderMixer2@@I@Z ENDP ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ PROC	; CRecordVector<NCoderMixer2::CBond>::CRecordVector<NCoderMixer2::CBond>, COMDAT
; _this$ = ecx
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ ENDP	; CRecordVector<NCoderMixer2::CBond>::CRecordVector<NCoderMixer2::CBond>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@UCBond@NCoderMixer2@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@UCBond@NCoderMixer2@@@@QBEIXZ PROC ; CRecordVector<NCoderMixer2::CBond>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@UCBond@NCoderMixer2@@@@QBEIXZ ENDP ; CRecordVector<NCoderMixer2::CBond>::Size
_TEXT	ENDS
PUBLIC	?ClearAndReserve@?$CRecordVector@UCBond@NCoderMixer2@@@@QAEXI@Z ; CRecordVector<NCoderMixer2::CBond>::ClearAndReserve
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ClearAndSetSize@?$CRecordVector@UCBond@NCoderMixer2@@@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newSize$ = 8						; size = 4
?ClearAndSetSize@?$CRecordVector@UCBond@NCoderMixer2@@@@QAEXI@Z PROC ; CRecordVector<NCoderMixer2::CBond>::ClearAndSetSize, COMDAT
; _this$ = ecx
; Line 87
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 88
	mov	eax, DWORD PTR _newSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearAndReserve@?$CRecordVector@UCBond@NCoderMixer2@@@@QAEXI@Z ; CRecordVector<NCoderMixer2::CBond>::ClearAndReserve
; Line 89
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _newSize$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 90
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearAndSetSize@?$CRecordVector@UCBond@NCoderMixer2@@@@QAEXI@Z ENDP ; CRecordVector<NCoderMixer2::CBond>::ClearAndSetSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ
_TEXT	SEGMENT
$T75295 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ PROC	; CRecordVector<NCoderMixer2::CBond>::~CRecordVector<NCoderMixer2::CBond>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T75295[ebp], ecx
	mov	edx, DWORD PTR $T75295[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ ENDP	; CRecordVector<NCoderMixer2::CBond>::~CRecordVector<NCoderMixer2::CBond>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Clear@?$CRecordVector@UCBond@NCoderMixer2@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$CRecordVector@UCBond@NCoderMixer2@@@@QAEXXZ PROC ; CRecordVector<NCoderMixer2::CBond>::Clear, COMDAT
; _this$ = ecx
; Line 131
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CRecordVector@UCBond@NCoderMixer2@@@@QAEXXZ ENDP ; CRecordVector<NCoderMixer2::CBond>::Clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
$T75301 = -16						; size = 4
$T75300 = -12						; size = 4
_size$ = -8						; size = 4
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??4?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAV0@ABV0@@Z PROC ; CRecordVector<NCoderMixer2::CBond>::operator=, COMDAT
; _this$ = ecx
; Line 168
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 169
	mov	eax, DWORD PTR _v$[ebp]
	cmp	eax, DWORD PTR _this$[ebp]
	jne	SHORT $LN3@operator@7
; Line 170
	mov	eax, DWORD PTR _this$[ebp]
	jmp	$LN4@operator@7
$LN3@operator@7:
; Line 171
	mov	ecx, DWORD PTR _v$[ebp]
	call	?Size@?$CRecordVector@UCBond@NCoderMixer2@@@@QBEIXZ ; CRecordVector<NCoderMixer2::CBond>::Size
	mov	DWORD PTR _size$[ebp], eax
; Line 172
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jbe	SHORT $LN2@operator@7
; Line 174
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T75300[ebp], ecx
	mov	edx, DWORD PTR $T75300[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 175
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 176
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 177
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0
; Line 178
	xor	ecx, ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, 8
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T75301[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T75301[ebp]
	mov	DWORD PTR [eax], ecx
; Line 179
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@operator@7:
; Line 181
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 182
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN1@operator@7
; Line 183
	mov	eax, DWORD PTR _size$[ebp]
	shl	eax, 3
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@operator@7:
; Line 184
	mov	eax, DWORD PTR _this$[ebp]
$LN4@operator@7:
; Line 185
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAV0@ABV0@@Z ENDP ; CRecordVector<NCoderMixer2::CBond>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@UCBond@NCoderMixer2@@@@QBEABUCBond@NCoderMixer2@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@UCBond@NCoderMixer2@@@@QBEABUCBond@NCoderMixer2@@I@Z PROC ; CRecordVector<NCoderMixer2::CBond>::operator[], COMDAT
; _this$ = ecx
; Line 227
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@UCBond@NCoderMixer2@@@@QBEABUCBond@NCoderMixer2@@I@Z ENDP ; CRecordVector<NCoderMixer2::CBond>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAUCBond@NCoderMixer2@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAUCBond@NCoderMixer2@@I@Z PROC ; CRecordVector<NCoderMixer2::CBond>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@UCBond@NCoderMixer2@@@@QAEAAUCBond@NCoderMixer2@@I@Z ENDP ; CRecordVector<NCoderMixer2::CBond>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@_K@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@_K@@QAE@XZ PROC			; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>, COMDAT
; _this$ = ecx
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@_K@@QAE@XZ ENDP			; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@_K@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@_K@@QBEIXZ PROC			; CRecordVector<unsigned __int64>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@_K@@QBEIXZ ENDP			; CRecordVector<unsigned __int64>::Size
_TEXT	ENDS
PUBLIC	?ClearAndReserve@?$CRecordVector@_K@@QAEXI@Z	; CRecordVector<unsigned __int64>::ClearAndReserve
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ClearAndSetSize@?$CRecordVector@_K@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newSize$ = 8						; size = 4
?ClearAndSetSize@?$CRecordVector@_K@@QAEXI@Z PROC	; CRecordVector<unsigned __int64>::ClearAndSetSize, COMDAT
; _this$ = ecx
; Line 87
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 88
	mov	eax, DWORD PTR _newSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearAndReserve@?$CRecordVector@_K@@QAEXI@Z ; CRecordVector<unsigned __int64>::ClearAndReserve
; Line 89
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _newSize$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 90
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearAndSetSize@?$CRecordVector@_K@@QAEXI@Z ENDP	; CRecordVector<unsigned __int64>::ClearAndSetSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@_K@@QAE@XZ
_TEXT	SEGMENT
$T75314 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@_K@@QAE@XZ PROC			; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T75314[ebp], ecx
	mov	edx, DWORD PTR $T75314[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@_K@@QAE@XZ ENDP			; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Clear@?$CRecordVector@_K@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$CRecordVector@_K@@QAEXXZ PROC			; CRecordVector<unsigned __int64>::Clear, COMDAT
; _this$ = ecx
; Line 131
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CRecordVector@_K@@QAEXXZ ENDP			; CRecordVector<unsigned __int64>::Clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CRecordVector@_K@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
$T75320 = -16						; size = 4
$T75319 = -12						; size = 4
_size$ = -8						; size = 4
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??4?$CRecordVector@_K@@QAEAAV0@ABV0@@Z PROC		; CRecordVector<unsigned __int64>::operator=, COMDAT
; _this$ = ecx
; Line 168
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 169
	mov	eax, DWORD PTR _v$[ebp]
	cmp	eax, DWORD PTR _this$[ebp]
	jne	SHORT $LN3@operator@8
; Line 170
	mov	eax, DWORD PTR _this$[ebp]
	jmp	$LN4@operator@8
$LN3@operator@8:
; Line 171
	mov	ecx, DWORD PTR _v$[ebp]
	call	?Size@?$CRecordVector@_K@@QBEIXZ	; CRecordVector<unsigned __int64>::Size
	mov	DWORD PTR _size$[ebp], eax
; Line 172
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jbe	SHORT $LN2@operator@8
; Line 174
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T75319[ebp], ecx
	mov	edx, DWORD PTR $T75319[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 175
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 176
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 177
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0
; Line 178
	xor	ecx, ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, 8
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T75320[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T75320[ebp]
	mov	DWORD PTR [eax], ecx
; Line 179
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@operator@8:
; Line 181
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 182
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN1@operator@8
; Line 183
	mov	eax, DWORD PTR _size$[ebp]
	shl	eax, 3
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@operator@8:
; Line 184
	mov	eax, DWORD PTR _this$[ebp]
$LN4@operator@8:
; Line 185
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CRecordVector@_K@@QAEAAV0@ABV0@@Z ENDP		; CRecordVector<unsigned __int64>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@_K@@QBEAB_KI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@_K@@QBEAB_KI@Z PROC			; CRecordVector<unsigned __int64>::operator[], COMDAT
; _this$ = ecx
; Line 227
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@_K@@QBEAB_KI@Z ENDP			; CRecordVector<unsigned __int64>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@_K@@QAEAA_KI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@_K@@QAEAA_KI@Z PROC			; CRecordVector<unsigned __int64>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@_K@@QAEAA_KI@Z ENDP			; CRecordVector<unsigned __int64>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@_N@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@_N@@QAE@XZ PROC			; CRecordVector<bool>::CRecordVector<bool>, COMDAT
; _this$ = ecx
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@_N@@QAE@XZ ENDP			; CRecordVector<bool>::CRecordVector<bool>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@_N@@QAE@XZ
_TEXT	SEGMENT
$T75329 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@_N@@QAE@XZ PROC			; CRecordVector<bool>::~CRecordVector<bool>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T75329[ebp], ecx
	mov	edx, DWORD PTR $T75329[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@_N@@QAE@XZ ENDP			; CRecordVector<bool>::~CRecordVector<bool>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Clear@?$CRecordVector@_N@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$CRecordVector@_N@@QAEXXZ PROC			; CRecordVector<bool>::Clear, COMDAT
; _this$ = ecx
; Line 131
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CRecordVector@_N@@QAEXXZ ENDP			; CRecordVector<bool>::Clear
_TEXT	ENDS
PUBLIC	?Size@?$CRecordVector@PAX@@QBEIXZ		; CRecordVector<void *>::Size
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Size@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QBEIXZ PROC ; CObjectVector<CMyComPtr<ISequentialInStream> >::Size, COMDAT
; _this$ = ecx
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QBEIXZ ENDP ; CObjectVector<CMyComPtr<ISequentialInStream> >::Size
_TEXT	ENDS
PUBLIC	??0?$CRecordVector@PAX@@QAE@XZ			; CRecordVector<void *>::CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ PROC ; CObjectVector<CMyComPtr<ISequentialInStream> >::CObjectVector<CMyComPtr<ISequentialInStream> >, COMDAT
; _this$ = ecx
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ ENDP ; CObjectVector<CMyComPtr<ISequentialInStream> >::CObjectVector<CMyComPtr<ISequentialInStream> >
_TEXT	ENDS
PUBLIC	??A?$CRecordVector@PAX@@QAEAAPAXI@Z		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??A?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@I@Z PROC ; CObjectVector<CMyComPtr<ISequentialInStream> >::operator[], COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@I@Z ENDP ; CObjectVector<CMyComPtr<ISequentialInStream> >::operator[]
_TEXT	ENDS
PUBLIC	?Add@?$CRecordVector@PAX@@QAEIQAX@Z		; CRecordVector<void *>::Add
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@XZ$0
__ehfuncinfo$?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@XZ
_TEXT	SEGMENT
tv71 = -32						; size = 4
$T75342 = -28						; size = 4
$T75341 = -24						; size = 4
_p$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@XZ PROC ; CObjectVector<CMyComPtr<ISequentialInStream> >::AddNew, COMDAT
; _this$ = ecx
; Line 464
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 465
	push	4
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T75342[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T75342[ebp], 0
	je	SHORT $LN3@AddNew
	mov	ecx, DWORD PTR $T75342[ebp]
	call	??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN4@AddNew
$LN3@AddNew:
	mov	DWORD PTR tv71[ebp], 0
$LN4@AddNew:
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR $T75341[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T75341[ebp]
	mov	DWORD PTR _p$[ebp], ecx
; Line 466
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
; Line 467
	mov	eax, DWORD PTR _p$[ebp]
; Line 468
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@XZ$0:
	mov	eax, DWORD PTR $T75342[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddNew@?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAEAAV?$CMyComPtr@UISequentialInStream@@@@XZ ENDP ; CObjectVector<CMyComPtr<ISequentialInStream> >::AddNew
PUBLIC	??1?$CRecordVector@PAX@@QAE@XZ			; CRecordVector<void *>::~CRecordVector<void *>
PUBLIC	??_G?$CMyComPtr@UISequentialInStream@@@@QAEPAXI@Z ; CMyComPtr<ISequentialInStream>::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T75355 = -28						; size = 4
$T75354 = -24						; size = 4
_i$73845 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ PROC ; CObjectVector<CMyComPtr<ISequentialInStream> >::~CObjectVector<CMyComPtr<ISequentialInStream> >, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$73845[ebp], eax
$LN2@CObjectVec:
	cmp	DWORD PTR _i$73845[ebp], 0
	je	SHORT $LN3@CObjectVec
; Line 489
	mov	eax, DWORD PTR _i$73845[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$73845[ebp], eax
	mov	ecx, DWORD PTR _i$73845[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T75355[ebp], edx
	mov	eax, DWORD PTR $T75355[ebp]
	mov	DWORD PTR $T75354[ebp], eax
	cmp	DWORD PTR $T75354[ebp], 0
	je	SHORT $LN5@CObjectVec
	push	1
	mov	ecx, DWORD PTR $T75354[ebp]
	call	??_G?$CMyComPtr@UISequentialInStream@@@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec
$LN5@CObjectVec:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec:
	jmp	SHORT $LN2@CObjectVec
$LN3@CObjectVec:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ ENDP ; CObjectVector<CMyComPtr<ISequentialInStream> >::~CObjectVector<CMyComPtr<ISequentialInStream> >
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CObjectVector@VCStreamBinder@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@VCStreamBinder@@@@QAE@XZ PROC	; CObjectVector<CStreamBinder>::CObjectVector<CStreamBinder>, COMDAT
; _this$ = ecx
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@VCStreamBinder@@@@QAE@XZ ENDP	; CObjectVector<CStreamBinder>::CObjectVector<CStreamBinder>
_TEXT	ENDS
PUBLIC	??_GCStreamBinder@@QAEPAXI@Z			; CStreamBinder::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@VCStreamBinder@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@VCStreamBinder@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@VCStreamBinder@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@VCStreamBinder@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@VCStreamBinder@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T75371 = -28						; size = 4
$T75370 = -24						; size = 4
_i$73872 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@VCStreamBinder@@@@QAE@XZ PROC	; CObjectVector<CStreamBinder>::~CObjectVector<CStreamBinder>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@VCStreamBinder@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$73872[ebp], eax
$LN2@CObjectVec@2:
	cmp	DWORD PTR _i$73872[ebp], 0
	je	SHORT $LN3@CObjectVec@2
; Line 489
	mov	eax, DWORD PTR _i$73872[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$73872[ebp], eax
	mov	ecx, DWORD PTR _i$73872[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T75371[ebp], edx
	mov	eax, DWORD PTR $T75371[ebp]
	mov	DWORD PTR $T75370[ebp], eax
	cmp	DWORD PTR $T75370[ebp], 0
	je	SHORT $LN5@CObjectVec@2
	push	1
	mov	ecx, DWORD PTR $T75370[ebp]
	call	??_GCStreamBinder@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@2
$LN5@CObjectVec@2:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@2:
	jmp	SHORT $LN2@CObjectVec@2
$LN3@CObjectVec@2:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@VCStreamBinder@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@VCStreamBinder@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@VCStreamBinder@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@VCStreamBinder@@@@QAE@XZ ENDP	; CObjectVector<CStreamBinder>::~CObjectVector<CStreamBinder>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ PROC ; CObjectVector<NCoderMixer2::CCoderMT>::CObjectVector<NCoderMixer2::CCoderMT>, COMDAT
; _this$ = ecx
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ ENDP ; CObjectVector<NCoderMixer2::CCoderMT>::CObjectVector<NCoderMixer2::CCoderMT>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@I@Z PROC ; CObjectVector<NCoderMixer2::CCoderMT>::operator[], COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAEAAVCCoderMT@NCoderMixer2@@I@Z ENDP ; CObjectVector<NCoderMixer2::CCoderMT>::operator[]
_TEXT	ENDS
PUBLIC	??_GCCoderMT@NCoderMixer2@@QAEPAXI@Z		; NCoderMixer2::CCoderMT::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T75389 = -28						; size = 4
$T75388 = -24						; size = 4
_i$73886 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ PROC ; CObjectVector<NCoderMixer2::CCoderMT>::~CObjectVector<NCoderMixer2::CCoderMT>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$73886[ebp], eax
$LN2@CObjectVec@3:
	cmp	DWORD PTR _i$73886[ebp], 0
	je	SHORT $LN3@CObjectVec@3
; Line 489
	mov	eax, DWORD PTR _i$73886[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$73886[ebp], eax
	mov	ecx, DWORD PTR _i$73886[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T75389[ebp], edx
	mov	eax, DWORD PTR $T75389[ebp]
	mov	DWORD PTR $T75388[ebp], eax
	cmp	DWORD PTR $T75388[ebp], 0
	je	SHORT $LN5@CObjectVec@3
	push	1
	mov	ecx, DWORD PTR $T75388[ebp]
	call	??_GCCoderMT@NCoderMixer2@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@3
$LN5@CObjectVec@3:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@3:
	jmp	SHORT $LN2@CObjectVec@3
$LN3@CObjectVec@3:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@VCCoderMT@NCoderMixer2@@@@QAE@XZ ENDP ; CObjectVector<NCoderMixer2::CCoderMT>::~CObjectVector<NCoderMixer2::CCoderMT>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ PROC	; CObjArray2<NArchive::N7z::CCoderInfo>::CObjArray2<NArchive::N7z::CCoderInfo>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mybuffer.h
; Line 176
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ ENDP	; CObjArray2<NArchive::N7z::CCoderInfo>::CObjArray2<NArchive::N7z::CCoderInfo>
_TEXT	ENDS
PUBLIC	??_ECCoderInfo@N7z@NArchive@@QAEPAXI@Z		; NArchive::N7z::CCoderInfo::`vector deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
tv68 = -16						; size = 4
$T75404 = -12						; size = 4
$T75403 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ PROC	; CObjArray2<NArchive::N7z::CCoderInfo>::~CObjArray2<NArchive::N7z::CCoderInfo>, COMDAT
; _this$ = ecx
; Line 203
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T75404[ebp], ecx
	mov	edx, DWORD PTR $T75404[ebp]
	mov	DWORD PTR $T75403[ebp], edx
	cmp	DWORD PTR $T75403[ebp], 0
	je	SHORT $LN3@CObjArray2
	push	3
	mov	ecx, DWORD PTR $T75403[ebp]
	call	??_ECCoderInfo@N7z@NArchive@@QAEPAXI@Z
	mov	DWORD PTR tv68[ebp], eax
	jmp	SHORT $LN1@CObjArray2
$LN3@CObjArray2:
	mov	DWORD PTR tv68[ebp], 0
$LN1@CObjArray2:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ ENDP	; CObjArray2<NArchive::N7z::CCoderInfo>::~CObjArray2<NArchive::N7z::CCoderInfo>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEPAUCCoderInfo@N7z@NArchive@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEPAUCCoderInfo@N7z@NArchive@@XZ PROC ; CObjArray2<NArchive::N7z::CCoderInfo>::operator NArchive::N7z::CCoderInfo *, COMDAT
; _this$ = ecx
; Line 205
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEPAUCCoderInfo@N7z@NArchive@@XZ ENDP ; CObjArray2<NArchive::N7z::CCoderInfo>::operator NArchive::N7z::CCoderInfo *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEPBUCCoderInfo@N7z@NArchive@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEPBUCCoderInfo@N7z@NArchive@@XZ PROC ; CObjArray2<NArchive::N7z::CCoderInfo>::operator NArchive::N7z::CCoderInfo const *, COMDAT
; _this$ = ecx
; Line 206
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEPBUCCoderInfo@N7z@NArchive@@XZ ENDP ; CObjArray2<NArchive::N7z::CCoderInfo>::operator NArchive::N7z::CCoderInfo const *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEIXZ PROC ; CObjArray2<NArchive::N7z::CCoderInfo>::Size, COMDAT
; _this$ = ecx
; Line 208
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEIXZ ENDP ; CObjArray2<NArchive::N7z::CCoderInfo>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ PROC	; CObjArray2<NArchive::N7z::CBond>::CObjArray2<NArchive::N7z::CBond>, COMDAT
; _this$ = ecx
; Line 176
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ ENDP	; CObjArray2<NArchive::N7z::CBond>::CObjArray2<NArchive::N7z::CBond>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
$T75417 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ PROC	; CObjArray2<NArchive::N7z::CBond>::~CObjArray2<NArchive::N7z::CBond>, COMDAT
; _this$ = ecx
; Line 203
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T75417[ebp], ecx
	mov	edx, DWORD PTR $T75417[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ ENDP	; CObjArray2<NArchive::N7z::CBond>::~CObjArray2<NArchive::N7z::CBond>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CObjArray2@UCBond@N7z@NArchive@@@@QAEPAUCBond@N7z@NArchive@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CObjArray2@UCBond@N7z@NArchive@@@@QAEPAUCBond@N7z@NArchive@@XZ PROC ; CObjArray2<NArchive::N7z::CBond>::operator NArchive::N7z::CBond *, COMDAT
; _this$ = ecx
; Line 205
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CObjArray2@UCBond@N7z@NArchive@@@@QAEPAUCBond@N7z@NArchive@@XZ ENDP ; CObjArray2<NArchive::N7z::CBond>::operator NArchive::N7z::CBond *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CObjArray2@UCBond@N7z@NArchive@@@@QBEPBUCBond@N7z@NArchive@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CObjArray2@UCBond@N7z@NArchive@@@@QBEPBUCBond@N7z@NArchive@@XZ PROC ; CObjArray2<NArchive::N7z::CBond>::operator NArchive::N7z::CBond const *, COMDAT
; _this$ = ecx
; Line 206
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CObjArray2@UCBond@N7z@NArchive@@@@QBEPBUCBond@N7z@NArchive@@XZ ENDP ; CObjArray2<NArchive::N7z::CBond>::operator NArchive::N7z::CBond const *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CObjArray2@UCBond@N7z@NArchive@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjArray2@UCBond@N7z@NArchive@@@@QBEIXZ PROC	; CObjArray2<NArchive::N7z::CBond>::Size, COMDAT
; _this$ = ecx
; Line 208
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjArray2@UCBond@N7z@NArchive@@@@QBEIXZ ENDP	; CObjArray2<NArchive::N7z::CBond>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CObjArray2@I@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjArray2@I@@QAE@XZ PROC				; CObjArray2<unsigned int>::CObjArray2<unsigned int>, COMDAT
; _this$ = ecx
; Line 176
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjArray2@I@@QAE@XZ ENDP				; CObjArray2<unsigned int>::CObjArray2<unsigned int>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CObjArray2@I@@QAE@XZ
_TEXT	SEGMENT
$T75428 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CObjArray2@I@@QAE@XZ PROC				; CObjArray2<unsigned int>::~CObjArray2<unsigned int>, COMDAT
; _this$ = ecx
; Line 203
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T75428[ebp], ecx
	mov	edx, DWORD PTR $T75428[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CObjArray2@I@@QAE@XZ ENDP				; CObjArray2<unsigned int>::~CObjArray2<unsigned int>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CObjArray2@I@@QBEPBIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CObjArray2@I@@QBEPBIXZ PROC			; CObjArray2<unsigned int>::operator unsigned int const *, COMDAT
; _this$ = ecx
; Line 206
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CObjArray2@I@@QBEPBIXZ ENDP			; CObjArray2<unsigned int>::operator unsigned int const *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CObjArray2@I@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjArray2@I@@QBEIXZ PROC			; CObjArray2<unsigned int>::Size, COMDAT
; _this$ = ecx
; Line 208
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjArray2@I@@QBEIXZ ENDP			; CObjArray2<unsigned int>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CObjArray@_K@@QAE@I@Z
_TEXT	SEGMENT
$T75435 = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
??0?$CObjArray@_K@@QAE@I@Z PROC				; CObjArray<unsigned __int64>::CObjArray<unsigned __int64>, COMDAT
; _this$ = ecx
; Line 139
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN2@CObjArray
	xor	ecx, ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, 8
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T75435[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T75435[ebp]
	mov	DWORD PTR [eax], ecx
$LN2@CObjArray:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CObjArray@_K@@QAE@I@Z ENDP				; CObjArray<unsigned __int64>::CObjArray<unsigned __int64>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CObjArray@_K@@QAE@XZ
_TEXT	SEGMENT
$T75438 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CObjArray@_K@@QAE@XZ PROC				; CObjArray<unsigned __int64>::~CObjArray<unsigned __int64>, COMDAT
; _this$ = ecx
; Line 141
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T75438[ebp], ecx
	mov	edx, DWORD PTR $T75438[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CObjArray@_K@@QAE@XZ ENDP				; CObjArray<unsigned __int64>::~CObjArray<unsigned __int64>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CObjArray@_K@@QAEPA_KXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CObjArray@_K@@QAEPA_KXZ PROC			; CObjArray<unsigned __int64>::operator unsigned __int64 *, COMDAT
; _this$ = ecx
; Line 143
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CObjArray@_K@@QAEPA_KXZ ENDP			; CObjArray<unsigned __int64>::operator unsigned __int64 *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CObjArray@_K@@QBEPB_KXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CObjArray@_K@@QBEPB_KXZ PROC			; CObjArray<unsigned __int64>::operator unsigned __int64 const *, COMDAT
; _this$ = ecx
; Line 144
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CObjArray@_K@@QBEPB_KXZ ENDP			; CObjArray<unsigned __int64>::operator unsigned __int64 const *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CObjArray@I@@QBEPBIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CObjArray@I@@QBEPBIXZ PROC				; CObjArray<unsigned int>::operator unsigned int const *, COMDAT
; _this$ = ecx
; Line 144
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CObjArray@I@@QBEPBIXZ ENDP				; CObjArray<unsigned int>::operator unsigned int const *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CObjArray@E@@QBEPBEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CObjArray@E@@QBEPBEXZ PROC				; CObjArray<unsigned char>::operator unsigned char const *, COMDAT
; _this$ = ecx
; Line 144
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CObjArray@E@@QBEPBEXZ ENDP				; CObjArray<unsigned char>::operator unsigned char const *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ PROC ; CMyComPtr<ICompressSetDecoderProperties2>::CMyComPtr<ICompressSetDecoderProperties2>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ ENDP ; CMyComPtr<ICompressSetDecoderProperties2>::CMyComPtr<ICompressSetDecoderProperties2>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ PROC ; CMyComPtr<ICompressSetDecoderProperties2>::~CMyComPtr<ICompressSetDecoderProperties2>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@9
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@9:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ ENDP ; CMyComPtr<ICompressSetDecoderProperties2>::~CMyComPtr<ICompressSetDecoderProperties2>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBEPAUICompressSetDecoderProperties2@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBEPAUICompressSetDecoderProperties2@@XZ PROC ; CMyComPtr<ICompressSetDecoderProperties2>::operator ICompressSetDecoderProperties2 *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBEPAUICompressSetDecoderProperties2@@XZ ENDP ; CMyComPtr<ICompressSetDecoderProperties2>::operator ICompressSetDecoderProperties2 *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAEPAPAUICompressSetDecoderProperties2@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAEPAPAUICompressSetDecoderProperties2@@XZ PROC ; CMyComPtr<ICompressSetDecoderProperties2>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAEPAPAUICompressSetDecoderProperties2@@XZ ENDP ; CMyComPtr<ICompressSetDecoderProperties2>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBEPAUICompressSetDecoderProperties2@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBEPAUICompressSetDecoderProperties2@@XZ PROC ; CMyComPtr<ICompressSetDecoderProperties2>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBEPAUICompressSetDecoderProperties2@@XZ ENDP ; CMyComPtr<ICompressSetDecoderProperties2>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ PROC	; CMyComPtr<ICompressSetCoderMt>::CMyComPtr<ICompressSetCoderMt>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ ENDP	; CMyComPtr<ICompressSetCoderMt>::CMyComPtr<ICompressSetCoderMt>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ PROC	; CMyComPtr<ICompressSetCoderMt>::~CMyComPtr<ICompressSetCoderMt>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@10
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@10:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ ENDP	; CMyComPtr<ICompressSetCoderMt>::~CMyComPtr<ICompressSetCoderMt>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ PROC ; CMyComPtr<ICompressSetCoderMt>::operator ICompressSetCoderMt *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ ENDP ; CMyComPtr<ICompressSetCoderMt>::operator ICompressSetCoderMt *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UICompressSetCoderMt@@@@QAEPAPAUICompressSetCoderMt@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UICompressSetCoderMt@@@@QAEPAPAUICompressSetCoderMt@@XZ PROC ; CMyComPtr<ICompressSetCoderMt>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UICompressSetCoderMt@@@@QAEPAPAUICompressSetCoderMt@@XZ ENDP ; CMyComPtr<ICompressSetCoderMt>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ PROC ; CMyComPtr<ICompressSetCoderMt>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ ENDP ; CMyComPtr<ICompressSetCoderMt>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ PROC	; CMyComPtr<ICryptoSetPassword>::CMyComPtr<ICryptoSetPassword>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ ENDP	; CMyComPtr<ICryptoSetPassword>::CMyComPtr<ICryptoSetPassword>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ PROC	; CMyComPtr<ICryptoSetPassword>::~CMyComPtr<ICryptoSetPassword>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@11
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@11:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ ENDP	; CMyComPtr<ICryptoSetPassword>::~CMyComPtr<ICryptoSetPassword>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ PROC ; CMyComPtr<ICryptoSetPassword>::operator ICryptoSetPassword *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ ENDP ; CMyComPtr<ICryptoSetPassword>::operator ICryptoSetPassword *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UICryptoSetPassword@@@@QAEPAPAUICryptoSetPassword@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UICryptoSetPassword@@@@QAEPAPAUICryptoSetPassword@@XZ PROC ; CMyComPtr<ICryptoSetPassword>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UICryptoSetPassword@@@@QAEPAPAUICryptoSetPassword@@XZ ENDP ; CMyComPtr<ICryptoSetPassword>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ PROC ; CMyComPtr<ICryptoSetPassword>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ ENDP ; CMyComPtr<ICryptoSetPassword>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICompressSetFinishMode@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UICompressSetFinishMode@@@@QAE@XZ PROC	; CMyComPtr<ICompressSetFinishMode>::CMyComPtr<ICompressSetFinishMode>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UICompressSetFinishMode@@@@QAE@XZ ENDP	; CMyComPtr<ICompressSetFinishMode>::CMyComPtr<ICompressSetFinishMode>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICompressSetFinishMode@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICompressSetFinishMode@@@@QAE@XZ PROC	; CMyComPtr<ICompressSetFinishMode>::~CMyComPtr<ICompressSetFinishMode>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@12
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@12:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICompressSetFinishMode@@@@QAE@XZ ENDP	; CMyComPtr<ICompressSetFinishMode>::~CMyComPtr<ICompressSetFinishMode>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UICompressSetFinishMode@@@@QBEPAUICompressSetFinishMode@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UICompressSetFinishMode@@@@QBEPAUICompressSetFinishMode@@XZ PROC ; CMyComPtr<ICompressSetFinishMode>::operator ICompressSetFinishMode *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UICompressSetFinishMode@@@@QBEPAUICompressSetFinishMode@@XZ ENDP ; CMyComPtr<ICompressSetFinishMode>::operator ICompressSetFinishMode *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UICompressSetFinishMode@@@@QAEPAPAUICompressSetFinishMode@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UICompressSetFinishMode@@@@QAEPAPAUICompressSetFinishMode@@XZ PROC ; CMyComPtr<ICompressSetFinishMode>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UICompressSetFinishMode@@@@QAEPAPAUICompressSetFinishMode@@XZ ENDP ; CMyComPtr<ICompressSetFinishMode>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UICompressSetFinishMode@@@@QBEPAUICompressSetFinishMode@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UICompressSetFinishMode@@@@QBEPAUICompressSetFinishMode@@XZ PROC ; CMyComPtr<ICompressSetFinishMode>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UICompressSetFinishMode@@@@QBEPAUICompressSetFinishMode@@XZ ENDP ; CMyComPtr<ICompressSetFinishMode>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CObjArray@PB_K@@QAE@I@Z
_TEXT	SEGMENT
$T75489 = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
??0?$CObjArray@PB_K@@QAE@I@Z PROC			; CObjArray<unsigned __int64 const *>::CObjArray<unsigned __int64 const *>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mybuffer.h
; Line 139
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN2@CObjArray@2
	xor	ecx, ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T75489[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T75489[ebp]
	mov	DWORD PTR [eax], ecx
$LN2@CObjArray@2:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CObjArray@PB_K@@QAE@I@Z ENDP			; CObjArray<unsigned __int64 const *>::CObjArray<unsigned __int64 const *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CObjArray@PB_K@@QAE@XZ
_TEXT	SEGMENT
$T75492 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CObjArray@PB_K@@QAE@XZ PROC			; CObjArray<unsigned __int64 const *>::~CObjArray<unsigned __int64 const *>, COMDAT
; _this$ = ecx
; Line 141
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T75492[ebp], ecx
	mov	edx, DWORD PTR $T75492[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CObjArray@PB_K@@QAE@XZ ENDP			; CObjArray<unsigned __int64 const *>::~CObjArray<unsigned __int64 const *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CObjArray@PB_K@@QAEPAPB_KXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CObjArray@PB_K@@QAEPAPB_KXZ PROC			; CObjArray<unsigned __int64 const *>::operator unsigned __int64 const * *, COMDAT
; _this$ = ecx
; Line 143
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CObjArray@PB_K@@QAEPAPB_KXZ ENDP			; CObjArray<unsigned __int64 const *>::operator unsigned __int64 const * *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CObjArray@PAUISequentialInStream@@@@QAE@I@Z
_TEXT	SEGMENT
$T75497 = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
??0?$CObjArray@PAUISequentialInStream@@@@QAE@I@Z PROC	; CObjArray<ISequentialInStream *>::CObjArray<ISequentialInStream *>, COMDAT
; _this$ = ecx
; Line 139
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN2@CObjArray@3
	xor	ecx, ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T75497[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T75497[ebp]
	mov	DWORD PTR [eax], ecx
$LN2@CObjArray@3:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CObjArray@PAUISequentialInStream@@@@QAE@I@Z ENDP	; CObjArray<ISequentialInStream *>::CObjArray<ISequentialInStream *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CObjArray@PAUISequentialInStream@@@@QAE@XZ
_TEXT	SEGMENT
$T75500 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CObjArray@PAUISequentialInStream@@@@QAE@XZ PROC	; CObjArray<ISequentialInStream *>::~CObjArray<ISequentialInStream *>, COMDAT
; _this$ = ecx
; Line 141
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T75500[ebp], ecx
	mov	edx, DWORD PTR $T75500[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CObjArray@PAUISequentialInStream@@@@QAE@XZ ENDP	; CObjArray<ISequentialInStream *>::~CObjArray<ISequentialInStream *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CObjArray@PAUISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CObjArray@PAUISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ PROC ; CObjArray<ISequentialInStream *>::operator ISequentialInStream * *, COMDAT
; _this$ = ecx
; Line 143
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CObjArray@PAUISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ ENDP ; CObjArray<ISequentialInStream *>::operator ISequentialInStream * *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??_G?$CMyComPtr@UISequentialInStream@@@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$CMyComPtr@UISequentialInStream@@@@QAEPAXI@Z PROC	; CMyComPtr<ISequentialInStream>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@7
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@7:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$CMyComPtr@UISequentialInStream@@@@QAEPAXI@Z ENDP	; CMyComPtr<ISequentialInStream>::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1CStreamBinder@@QAE@XZ			; CStreamBinder::~CStreamBinder
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCStreamBinder@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCStreamBinder@@QAEPAXI@Z PROC			; CStreamBinder::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CStreamBinder@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@8
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@8:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCStreamBinder@@QAEPAXI@Z ENDP			; CStreamBinder::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1CCoderMT@NCoderMixer2@@QAE@XZ		; NCoderMixer2::CCoderMT::~CCoderMT
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCCoderMT@NCoderMixer2@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCCoderMT@NCoderMixer2@@QAEPAXI@Z PROC		; NCoderMixer2::CCoderMT::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CCoderMT@NCoderMixer2@@QAE@XZ	; NCoderMixer2::CCoderMT::~CCoderMT
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@9
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@9:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCCoderMT@NCoderMixer2@@QAEPAXI@Z ENDP		; NCoderMixer2::CCoderMT::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1CCoder@NCoderMixer2@@QAE@XZ			; NCoderMixer2::CCoder::~CCoder
PUBLIC	??1CVirtThread@@QAE@XZ				; CVirtThread::~CVirtThread
PUBLIC	??1?$CRecordVector@PAUISequentialInStream@@@@QAE@XZ ; CRecordVector<ISequentialInStream *>::~CRecordVector<ISequentialInStream *>
PUBLIC	??1?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ ; CRecordVector<ISequentialOutStream *>::~CRecordVector<ISequentialOutStream *>
PUBLIC	??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialOutStream> >::~CObjectVector<CMyComPtr<ISequentialOutStream> >
PUBLIC	??_7CCoderMT@NCoderMixer2@@6B@			; NCoderMixer2::CCoderMT::`vftable'
PUBLIC	??_R4CCoderMT@NCoderMixer2@@6B@			; NCoderMixer2::CCoderMT::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCCoderMT@NCoderMixer2@@@8		; NCoderMixer2::CCoderMT `RTTI Type Descriptor'
PUBLIC	??_R3CCoderMT@NCoderMixer2@@8			; NCoderMixer2::CCoderMT::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCoderMT@NCoderMixer2@@8			; NCoderMixer2::CCoderMT::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCoderMT@NCoderMixer2@@8		; NCoderMixer2::CCoderMT::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1BI@?0A@EA@CCoder@NCoderMixer2@@8		; NCoderMixer2::CCoder::`RTTI Base Class Descriptor at (24,-1,0,64)'
PUBLIC	??_R0?AVCCoder@NCoderMixer2@@@8			; NCoderMixer2::CCoder `RTTI Type Descriptor'
PUBLIC	??_R3CCoder@NCoderMixer2@@8			; NCoderMixer2::CCoder::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCoder@NCoderMixer2@@8			; NCoderMixer2::CCoder::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCoder@NCoderMixer2@@8		; NCoderMixer2::CCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CVirtThread@@8			; CVirtThread::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUCVirtThread@@@8				; CVirtThread `RTTI Type Descriptor'
PUBLIC	??_R3CVirtThread@@8				; CVirtThread::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CVirtThread@@8				; CVirtThread::`RTTI Base Class Array'
EXTRN	?WaitThreadFinish@CVirtThread@@QAEXXZ:PROC	; CVirtThread::WaitThreadFinish
EXTRN	?Execute@CCoderMT@NCoderMixer2@@EAEXXZ:PROC	; NCoderMixer2::CCoderMT::Execute
;	COMDAT ??_R2CVirtThread@@8
; File c:\workspace\7z1505-src\cpp\7zip\archive\common\codermixer2.h
rdata$r	SEGMENT
??_R2CVirtThread@@8 DD FLAT:??_R1A@?0A@EA@CVirtThread@@8 ; CVirtThread::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CVirtThread@@8
rdata$r	SEGMENT
??_R3CVirtThread@@8 DD 00H				; CVirtThread::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CVirtThread@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUCVirtThread@@@8
_DATA	SEGMENT
??_R0?AUCVirtThread@@@8 DD FLAT:??_7type_info@@6B@	; CVirtThread `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUCVirtThread@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@CVirtThread@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CVirtThread@@8 DD FLAT:??_R0?AUCVirtThread@@@8 ; CVirtThread::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CVirtThread@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CCoder@NCoderMixer2@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CCoder@NCoderMixer2@@8 DD FLAT:??_R0?AVCCoder@NCoderMixer2@@@8 ; NCoderMixer2::CCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCoder@NCoderMixer2@@8
rdata$r	ENDS
;	COMDAT ??_R2CCoder@NCoderMixer2@@8
rdata$r	SEGMENT
??_R2CCoder@NCoderMixer2@@8 DD FLAT:??_R1A@?0A@EA@CCoder@NCoderMixer2@@8 ; NCoderMixer2::CCoder::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CCoder@NCoderMixer2@@8
rdata$r	SEGMENT
??_R3CCoder@NCoderMixer2@@8 DD 00H			; NCoderMixer2::CCoder::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CCoder@NCoderMixer2@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCoder@NCoderMixer2@@@8
_DATA	SEGMENT
??_R0?AVCCoder@NCoderMixer2@@@8 DD FLAT:??_7type_info@@6B@ ; NCoderMixer2::CCoder `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCoder@NCoderMixer2@@', 00H
_DATA	ENDS
;	COMDAT ??_R1BI@?0A@EA@CCoder@NCoderMixer2@@8
rdata$r	SEGMENT
??_R1BI@?0A@EA@CCoder@NCoderMixer2@@8 DD FLAT:??_R0?AVCCoder@NCoderMixer2@@@8 ; NCoderMixer2::CCoder::`RTTI Base Class Descriptor at (24,-1,0,64)'
	DD	00H
	DD	018H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCoder@NCoderMixer2@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CCoderMT@NCoderMixer2@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CCoderMT@NCoderMixer2@@8 DD FLAT:??_R0?AVCCoderMT@NCoderMixer2@@@8 ; NCoderMixer2::CCoderMT::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCoderMT@NCoderMixer2@@8
rdata$r	ENDS
;	COMDAT ??_R2CCoderMT@NCoderMixer2@@8
rdata$r	SEGMENT
??_R2CCoderMT@NCoderMixer2@@8 DD FLAT:??_R1A@?0A@EA@CCoderMT@NCoderMixer2@@8 ; NCoderMixer2::CCoderMT::`RTTI Base Class Array'
	DD	FLAT:??_R1BI@?0A@EA@CCoder@NCoderMixer2@@8
	DD	FLAT:??_R1A@?0A@EA@CVirtThread@@8
rdata$r	ENDS
;	COMDAT ??_R3CCoderMT@NCoderMixer2@@8
rdata$r	SEGMENT
??_R3CCoderMT@NCoderMixer2@@8 DD 00H			; NCoderMixer2::CCoderMT::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	03H
	DD	FLAT:??_R2CCoderMT@NCoderMixer2@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCoderMT@NCoderMixer2@@@8
_DATA	SEGMENT
??_R0?AVCCoderMT@NCoderMixer2@@@8 DD FLAT:??_7type_info@@6B@ ; NCoderMixer2::CCoderMT `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCoderMT@NCoderMixer2@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CCoderMT@NCoderMixer2@@6B@
rdata$r	SEGMENT
??_R4CCoderMT@NCoderMixer2@@6B@ DD 00H			; NCoderMixer2::CCoderMT::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCCoderMT@NCoderMixer2@@@8
	DD	FLAT:??_R3CCoderMT@NCoderMixer2@@8
rdata$r	ENDS
;	COMDAT ??_7CCoderMT@NCoderMixer2@@6B@
CONST	SEGMENT
??_7CCoderMT@NCoderMixer2@@6B@ DD FLAT:??_R4CCoderMT@NCoderMixer2@@6B@ ; NCoderMixer2::CCoderMT::`vftable'
	DD	FLAT:?Execute@CCoderMT@NCoderMixer2@@EAEXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CCoderMT@NCoderMixer2@@QAE@XZ DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??1CCoderMT@NCoderMixer2@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1CCoderMT@NCoderMixer2@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$5
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CCoderMT@NCoderMixer2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CCoderMT@NCoderMixer2@@QAE@XZ PROC			; NCoderMixer2::CCoderMT::~CCoderMT, COMDAT
; _this$ = ecx
; Line 396
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CCoderMT@NCoderMixer2@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CCoderMT@NCoderMixer2@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WaitThreadFinish@CVirtThread@@QAEXXZ	; CVirtThread::WaitThreadFinish
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 124				; 0000007cH
	call	??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialOutStream> >::~CObjectVector<CMyComPtr<ISequentialOutStream> >
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialInStream> >::~CObjectVector<CMyComPtr<ISequentialInStream> >
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 92					; 0000005cH
	call	??1?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ ; CRecordVector<ISequentialOutStream *>::~CRecordVector<ISequentialOutStream *>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	call	??1?$CRecordVector@PAUISequentialInStream@@@@QAE@XZ ; CRecordVector<ISequentialInStream *>::~CRecordVector<ISequentialInStream *>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CVirtThread@@QAE@XZ			; CVirtThread::~CVirtThread
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1CCoder@NCoderMixer2@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1CCoder@NCoderMixer2@@QAE@XZ
__unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CVirtThread@@QAE@XZ			; CVirtThread::~CVirtThread
__unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	jmp	??1?$CRecordVector@PAUISequentialInStream@@@@QAE@XZ ; CRecordVector<ISequentialInStream *>::~CRecordVector<ISequentialInStream *>
__unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 92					; 0000005cH
	jmp	??1?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ ; CRecordVector<ISequentialOutStream *>::~CRecordVector<ISequentialOutStream *>
__unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	jmp	??1?$CObjectVector@V?$CMyComPtr@UISequentialInStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialInStream> >::~CObjectVector<CMyComPtr<ISequentialInStream> >
__unwindfunclet$??1CCoderMT@NCoderMixer2@@QAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 124				; 0000007cH
	jmp	??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<ISequentialOutStream> >::~CObjectVector<CMyComPtr<ISequentialOutStream> >
__ehhandler$??1CCoderMT@NCoderMixer2@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CCoderMT@NCoderMixer2@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CCoderMT@NCoderMixer2@@QAE@XZ ENDP			; NCoderMixer2::CCoderMT::~CCoderMT
PUBLIC	??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent
PUBLIC	??1CThread@NWindows@@QAE@XZ			; NWindows::CThread::~CThread
PUBLIC	??_7CVirtThread@@6B@				; CVirtThread::`vftable'
PUBLIC	??_R4CVirtThread@@6B@				; CVirtThread::`RTTI Complete Object Locator'
;	COMDAT ??_R4CVirtThread@@6B@
; File c:\workspace\7z1505-src\cpp\7zip\common\virtthread.h
rdata$r	SEGMENT
??_R4CVirtThread@@6B@ DD 00H				; CVirtThread::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUCVirtThread@@@8
	DD	FLAT:??_R3CVirtThread@@8
rdata$r	ENDS
;	COMDAT ??_7CVirtThread@@6B@
CONST	SEGMENT
??_7CVirtThread@@6B@ DD FLAT:??_R4CVirtThread@@6B@	; CVirtThread::`vftable'
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CVirtThread@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CVirtThread@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CVirtThread@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CVirtThread@@QAE@XZ$2
__ehfuncinfo$??1CVirtThread@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1CVirtThread@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CVirtThread@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CVirtThread@@QAE@XZ PROC				; CVirtThread::~CVirtThread, COMDAT
; _this$ = ecx
; Line 16
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CVirtThread@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CVirtThread@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WaitThreadFinish@CVirtThread@@QAEXXZ	; CVirtThread::WaitThreadFinish
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1CThread@NWindows@@QAE@XZ		; NWindows::CThread::~CThread
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CVirtThread@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
__unwindfunclet$??1CVirtThread@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
__unwindfunclet$??1CVirtThread@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1CThread@NWindows@@QAE@XZ		; NWindows::CThread::~CThread
__ehhandler$??1CVirtThread@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CVirtThread@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CVirtThread@@QAE@XZ ENDP				; CVirtThread::~CVirtThread
PUBLIC	?Close@CThread@NWindows@@QAEIXZ			; NWindows::CThread::Close
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CThread@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CThread@NWindows@@QAE@XZ PROC			; NWindows::CThread::~CThread, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\thread.h
; Line 17
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Close@CThread@NWindows@@QAEIXZ		; NWindows::CThread::Close
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CThread@NWindows@@QAE@XZ ENDP			; NWindows::CThread::~CThread
_TEXT	ENDS
EXTRN	_HandlePtr_Close@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Close@CThread@NWindows@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Close@CThread@NWindows@@QAEIXZ PROC			; NWindows::CThread::Close, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	_HandlePtr_Close@4
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Close@CThread@NWindows@@QAEIXZ ENDP			; NWindows::CThread::Close
_TEXT	ENDS
PUBLIC	??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ	; NWindows::NSynchronization::CBaseEvent::~CBaseEvent
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ PROC ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CBaseEvent::~CBaseEvent
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ENDP ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent
_TEXT	ENDS
PUBLIC	?Close@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Close
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ PROC	; NWindows::NSynchronization::CBaseEvent::~CBaseEvent, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\synchronization.h
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Close@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Close
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ ENDP	; NWindows::NSynchronization::CBaseEvent::~CBaseEvent
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Close@CBaseEvent@NSynchronization@NWindows@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Close@CBaseEvent@NSynchronization@NWindows@@QAEIXZ PROC ; NWindows::NSynchronization::CBaseEvent::Close, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	_HandlePtr_Close@4
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Close@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ENDP ; NWindows::NSynchronization::CBaseEvent::Close
_TEXT	ENDS
PUBLIC	??1?$CRecordVector@PB_K@@QAE@XZ			; CRecordVector<unsigned __int64 const *>::~CRecordVector<unsigned __int64 const *>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CCoder@NCoderMixer2@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CCoder@NCoderMixer2@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CCoder@NCoderMixer2@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CCoder@NCoderMixer2@@QAE@XZ$2
__ehfuncinfo$??1CCoder@NCoderMixer2@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1CCoder@NCoderMixer2@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CCoder@NCoderMixer2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CCoder@NCoderMixer2@@QAE@XZ PROC			; NCoderMixer2::CCoder::~CCoder, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CCoder@NCoderMixer2@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??1?$CRecordVector@PB_K@@QAE@XZ		; CRecordVector<unsigned __int64 const *>::~CRecordVector<unsigned __int64 const *>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1?$CMyComPtr@UICompressCoder2@@@@QAE@XZ ; CMyComPtr<ICompressCoder2>::~CMyComPtr<ICompressCoder2>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CCoder@NCoderMixer2@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
__unwindfunclet$??1CCoder@NCoderMixer2@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$CMyComPtr@UICompressCoder2@@@@QAE@XZ ; CMyComPtr<ICompressCoder2>::~CMyComPtr<ICompressCoder2>
__unwindfunclet$??1CCoder@NCoderMixer2@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	jmp	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
__ehhandler$??1CCoder@NCoderMixer2@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CCoder@NCoderMixer2@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CCoder@NCoderMixer2@@QAE@XZ ENDP			; NCoderMixer2::CCoder::~CCoder
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$CRecordVector@PB_K@@QAE@XZ
_TEXT	SEGMENT
$T75559 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@PB_K@@QAE@XZ PROC			; CRecordVector<unsigned __int64 const *>::~CRecordVector<unsigned __int64 const *>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T75559[ebp], ecx
	mov	edx, DWORD PTR $T75559[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@PB_K@@QAE@XZ ENDP			; CRecordVector<unsigned __int64 const *>::~CRecordVector<unsigned __int64 const *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@PAUISequentialInStream@@@@QAE@XZ
_TEXT	SEGMENT
$T75562 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@PAUISequentialInStream@@@@QAE@XZ PROC ; CRecordVector<ISequentialInStream *>::~CRecordVector<ISequentialInStream *>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T75562[ebp], ecx
	mov	edx, DWORD PTR $T75562[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@PAUISequentialInStream@@@@QAE@XZ ENDP ; CRecordVector<ISequentialInStream *>::~CRecordVector<ISequentialInStream *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ
_TEXT	SEGMENT
$T75565 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ PROC ; CRecordVector<ISequentialOutStream *>::~CRecordVector<ISequentialOutStream *>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T75565[ebp], ecx
	mov	edx, DWORD PTR $T75565[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@PAUISequentialOutStream@@@@QAE@XZ ENDP ; CRecordVector<ISequentialOutStream *>::~CRecordVector<ISequentialOutStream *>
_TEXT	ENDS
PUBLIC	??_G?$CMyComPtr@UISequentialOutStream@@@@QAEPAXI@Z ; CMyComPtr<ISequentialOutStream>::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T75569 = -28						; size = 4
$T75568 = -24						; size = 4
_i$73861 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ PROC ; CObjectVector<CMyComPtr<ISequentialOutStream> >::~CObjectVector<CMyComPtr<ISequentialOutStream> >, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$73861[ebp], eax
$LN2@CObjectVec@4:
	cmp	DWORD PTR _i$73861[ebp], 0
	je	SHORT $LN3@CObjectVec@4
; Line 489
	mov	eax, DWORD PTR _i$73861[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$73861[ebp], eax
	mov	ecx, DWORD PTR _i$73861[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T75569[ebp], edx
	mov	eax, DWORD PTR $T75569[ebp]
	mov	DWORD PTR $T75568[ebp], eax
	cmp	DWORD PTR $T75568[ebp], 0
	je	SHORT $LN5@CObjectVec@4
	push	1
	mov	ecx, DWORD PTR $T75568[ebp]
	call	??_G?$CMyComPtr@UISequentialOutStream@@@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@4
$LN5@CObjectVec@4:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@4:
	jmp	SHORT $LN2@CObjectVec@4
$LN3@CObjectVec@4:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@V?$CMyComPtr@UISequentialOutStream@@@@@@QAE@XZ ENDP ; CObjectVector<CMyComPtr<ISequentialOutStream> >::~CObjectVector<CMyComPtr<ISequentialOutStream> >
PUBLIC	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ	; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_G?$CMyComPtr@UISequentialOutStream@@@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$CMyComPtr@UISequentialOutStream@@@@QAEPAXI@Z PROC	; CMyComPtr<ISequentialOutStream>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@10
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@10:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$CMyComPtr@UISequentialOutStream@@@@QAEPAXI@Z ENDP	; CMyComPtr<ISequentialOutStream>::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@13
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@13:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
_TEXT	ENDS
PUBLIC	??1CCoderInfo@N7z@NArchive@@QAE@XZ		; NArchive::N7z::CCoderInfo::~CCoderInfo
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_ECCoderInfo@N7z@NArchive@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_ECCoderInfo@N7z@NArchive@@QAEPAXI@Z PROC		; NArchive::N7z::CCoderInfo::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1CCoderInfo@N7z@NArchive@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CCoderInfo@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_ECCoderInfo@N7z@NArchive@@QAEPAXI@Z ENDP		; NArchive::N7z::CCoderInfo::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CManualResetEvent::~CManualResetEvent
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CStreamBinder@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CStreamBinder@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CStreamBinder@@QAE@XZ$1
__ehfuncinfo$??1CStreamBinder@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CStreamBinder@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CStreamBinder@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CStreamBinder@@QAE@XZ PROC				; CStreamBinder::~CStreamBinder, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CStreamBinder@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CStreamBinder@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
__unwindfunclet$??1CStreamBinder@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ
__ehhandler$??1CStreamBinder@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CStreamBinder@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CStreamBinder@@QAE@XZ ENDP				; CStreamBinder::~CStreamBinder
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CCoderInfo@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CCoderInfo@N7z@NArchive@@QAE@XZ PROC			; NArchive::N7z::CCoderInfo::~CCoderInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CCoderInfo@N7z@NArchive@@QAE@XZ ENDP			; NArchive::N7z::CCoderInfo::~CCoderInfo
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ PROC ; NWindows::NSynchronization::CManualResetEvent::~CManualResetEvent, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CBaseEvent::~CBaseEvent
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ ENDP ; NWindows::NSynchronization::CManualResetEvent::~CManualResetEvent
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@PAX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@PAX@@QAE@XZ PROC			; CRecordVector<void *>::CRecordVector<void *>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@PAX@@QAE@XZ ENDP			; CRecordVector<void *>::CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@PAX@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@PAX@@QBEIXZ PROC			; CRecordVector<void *>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@PAX@@QBEIXZ ENDP			; CRecordVector<void *>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@PAX@@QAE@XZ
_TEXT	SEGMENT
$T75608 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@PAX@@QAE@XZ PROC			; CRecordVector<void *>::~CRecordVector<void *>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T75608[ebp], ecx
	mov	edx, DWORD PTR $T75608[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@PAX@@QAE@XZ ENDP			; CRecordVector<void *>::~CRecordVector<void *>
_TEXT	ENDS
PUBLIC	?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ	; CRecordVector<void *>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@PAX@@QAEIQAX@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?Add@?$CRecordVector@PAX@@QAEIQAX@Z PROC		; CRecordVector<void *>::Add, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ; CRecordVector<void *>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 201
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv72[ebp]
; Line 202
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CRecordVector@PAX@@QAEIQAX@Z ENDP		; CRecordVector<void *>::Add
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@PAX@@QAEAAPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@PAX@@QAEAAPAXI@Z PROC		; CRecordVector<void *>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@PAX@@QAEAAPAXI@Z ENDP		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ClearAndReserve@?$CRecordVector@I@@QAEXI@Z
_TEXT	SEGMENT
$T75616 = -12						; size = 4
$T75615 = -8						; size = 4
_this$ = -4						; size = 4
_newCapacity$ = 8					; size = 4
?ClearAndReserve@?$CRecordVector@I@@QAEXI@Z PROC	; CRecordVector<unsigned int>::ClearAndReserve, COMDAT
; _this$ = ecx
; Line 74
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 75
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CRecordVector@I@@QAEXXZ	; CRecordVector<unsigned int>::Clear
; Line 76
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	SHORT $LN2@ClearAndRe
; Line 78
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T75615[ebp], eax
	mov	ecx, DWORD PTR $T75615[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 79
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0
; Line 80
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 81
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T75616[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T75616[ebp]
	mov	DWORD PTR [eax], ecx
; Line 82
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _newCapacity$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@ClearAndRe:
; Line 84
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearAndReserve@?$CRecordVector@I@@QAEXI@Z ENDP	; CRecordVector<unsigned int>::ClearAndReserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ClearAndReserve@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEXI@Z
_TEXT	SEGMENT
$T75620 = -12						; size = 4
$T75619 = -8						; size = 4
_this$ = -4						; size = 4
_newCapacity$ = 8					; size = 4
?ClearAndReserve@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEXI@Z PROC ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::ClearAndReserve, COMDAT
; _this$ = ecx
; Line 74
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 75
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEXXZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::Clear
; Line 76
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	SHORT $LN2@ClearAndRe@2
; Line 78
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T75619[ebp], eax
	mov	ecx, DWORD PTR $T75619[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 79
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0
; Line 80
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 81
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T75620[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T75620[ebp]
	mov	DWORD PTR [eax], ecx
; Line 82
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _newCapacity$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@ClearAndRe@2:
; Line 84
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearAndReserve@?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAEXI@Z ENDP ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::ClearAndReserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ClearAndReserve@?$CRecordVector@UCBond@NCoderMixer2@@@@QAEXI@Z
_TEXT	SEGMENT
$T75624 = -12						; size = 4
$T75623 = -8						; size = 4
_this$ = -4						; size = 4
_newCapacity$ = 8					; size = 4
?ClearAndReserve@?$CRecordVector@UCBond@NCoderMixer2@@@@QAEXI@Z PROC ; CRecordVector<NCoderMixer2::CBond>::ClearAndReserve, COMDAT
; _this$ = ecx
; Line 74
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 75
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CRecordVector@UCBond@NCoderMixer2@@@@QAEXXZ ; CRecordVector<NCoderMixer2::CBond>::Clear
; Line 76
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	SHORT $LN2@ClearAndRe@3
; Line 78
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T75623[ebp], eax
	mov	ecx, DWORD PTR $T75623[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 79
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0
; Line 80
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 81
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$[ebp]
	mov	edx, 8
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T75624[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T75624[ebp]
	mov	DWORD PTR [eax], ecx
; Line 82
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _newCapacity$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@ClearAndRe@3:
; Line 84
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearAndReserve@?$CRecordVector@UCBond@NCoderMixer2@@@@QAEXI@Z ENDP ; CRecordVector<NCoderMixer2::CBond>::ClearAndReserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ClearAndReserve@?$CRecordVector@_K@@QAEXI@Z
_TEXT	SEGMENT
$T75628 = -12						; size = 4
$T75627 = -8						; size = 4
_this$ = -4						; size = 4
_newCapacity$ = 8					; size = 4
?ClearAndReserve@?$CRecordVector@_K@@QAEXI@Z PROC	; CRecordVector<unsigned __int64>::ClearAndReserve, COMDAT
; _this$ = ecx
; Line 74
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 75
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CRecordVector@_K@@QAEXXZ	; CRecordVector<unsigned __int64>::Clear
; Line 76
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	SHORT $LN2@ClearAndRe@4
; Line 78
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T75627[ebp], eax
	mov	ecx, DWORD PTR $T75627[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 79
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0
; Line 80
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 81
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$[ebp]
	mov	edx, 8
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T75628[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T75628[ebp]
	mov	DWORD PTR [eax], ecx
; Line 82
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _newCapacity$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@ClearAndRe@4:
; Line 84
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearAndReserve@?$CRecordVector@_K@@QAEXI@Z ENDP	; CRecordVector<unsigned __int64>::ClearAndReserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ
_TEXT	SEGMENT
$T75632 = -20						; size = 4
$T75631 = -16						; size = 4
_p$74097 = -12						; size = 4
_newCapacity$74096 = -8					; size = 4
_this$ = -4						; size = 4
?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ PROC	; CRecordVector<void *>::ReserveOnePosition, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@ReserveOne
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$74096[ebp], ecx
; Line 23
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$74096[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T75631[ebp], eax
	mov	eax, DWORD PTR $T75631[ebp]
	mov	DWORD PTR _p$74097[ebp], eax
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@ReserveOne
; Line 25
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$74097[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne:
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T75632[ebp], edx
	mov	eax, DWORD PTR $T75632[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$74097[ebp]
	mov	DWORD PTR [ecx], edx
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$74096[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ReserveOne:
; Line 30
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ENDP	; CRecordVector<void *>::ReserveOnePosition
_TEXT	ENDS
END
