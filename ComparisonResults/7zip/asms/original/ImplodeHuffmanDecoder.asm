; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\CPP\7zip\Compress\ImplodeHuffmanDecoder.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??0CDecoder@NHuffman@NImplode@NCompress@@QAE@I@Z ; NCompress::NImplode::NHuffman::CDecoder::CDecoder
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\cpp\7zip\compress\implodehuffmandecoder.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
$T66185 = -8						; size = 4
_this$ = -4						; size = 4
_numSymbols$ = 8					; size = 4
??0CDecoder@NHuffman@NImplode@NCompress@@QAE@I@Z PROC	; NCompress::NImplode::NHuffman::CDecoder::CDecoder
; _this$ = ecx
; Line 13
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _numSymbols$[ebp]
	mov	DWORD PTR [eax+144], ecx
; Line 14
	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+144]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T66185[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T66185[ebp]
	mov	DWORD PTR [eax+148], ecx
; Line 15
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CDecoder@NHuffman@NImplode@NCompress@@QAE@I@Z ENDP	; NCompress::NImplode::NHuffman::CDecoder::CDecoder
_TEXT	ENDS
PUBLIC	??1CDecoder@NHuffman@NImplode@NCompress@@QAE@XZ	; NCompress::NImplode::NHuffman::CDecoder::~CDecoder
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T66194 = -8						; size = 4
_this$ = -4						; size = 4
??1CDecoder@NHuffman@NImplode@NCompress@@QAE@XZ PROC	; NCompress::NImplode::NHuffman::CDecoder::~CDecoder
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 19
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+148]
	mov	DWORD PTR $T66194[ebp], ecx
	mov	edx, DWORD PTR $T66194[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 20
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CDecoder@NHuffman@NImplode@NCompress@@QAE@XZ ENDP	; NCompress::NImplode::NHuffman::CDecoder::~CDecoder
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?SetCodeLengths@CDecoder@NHuffman@NImplode@NCompress@@QAE_NPBE@Z ; NCompress::NImplode::NHuffman::CDecoder::SetCodeLengths
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv165 = -180						; size = 4
_startPos$ = -176					; size = 4
_symbolIndex$ = -172					; size = 4
_i$ = -168						; size = 4
_tmpPositions$ = -160					; size = 68
_lenCounts$ = -84					; size = 72
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_codeLengths$ = 8					; size = 4
?SetCodeLengths@CDecoder@NHuffman@NImplode@NCompress@@QAE_NPBE@Z PROC ; NCompress::NImplode::NHuffman::CDecoder::SetCodeLengths
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	sub	esp, 180				; 000000b4H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-180]
	mov	ecx, 45					; 0000002dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 27
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN15@SetCodeLen
$LN14@SetCodeLen:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN15@SetCodeLen:
	cmp	DWORD PTR _i$[ebp], 16			; 00000010H
	ja	SHORT $LN13@SetCodeLen
; Line 28
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _lenCounts$[ebp+ecx*4], 0
	jmp	SHORT $LN14@SetCodeLen
$LN13@SetCodeLen:
; Line 30
	mov	DWORD PTR _symbolIndex$[ebp], 0
	jmp	SHORT $LN12@SetCodeLen
$LN11@SetCodeLen:
	mov	edx, DWORD PTR _symbolIndex$[ebp]
	add	edx, 1
	mov	DWORD PTR _symbolIndex$[ebp], edx
$LN12@SetCodeLen:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _symbolIndex$[ebp]
	cmp	ecx, DWORD PTR [eax+144]
	jae	SHORT $LN10@SetCodeLen
; Line 31
	mov	edx, DWORD PTR _codeLengths$[ebp]
	add	edx, DWORD PTR _symbolIndex$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _lenCounts$[ebp+eax*4]
	add	ecx, 1
	mov	edx, DWORD PTR _codeLengths$[ebp]
	add	edx, DWORD PTR _symbolIndex$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	DWORD PTR _lenCounts$[ebp+eax*4], ecx
	jmp	SHORT $LN11@SetCodeLen
$LN10@SetCodeLen:
; Line 35
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+68], 0
; Line 36
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+140], 0
; Line 37
	mov	DWORD PTR _lenCounts$[ebp+68], 0
; Line 40
	mov	DWORD PTR _startPos$[ebp], 0
; Line 43
	mov	DWORD PTR _i$[ebp], 16			; 00000010H
	jmp	SHORT $LN9@SetCodeLen
$LN8@SetCodeLen:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN9@SetCodeLen:
	cmp	DWORD PTR _i$[ebp], 0
	jbe	$LN7@SetCodeLen
; Line 45
	mov	ecx, 16					; 00000010H
	sub	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _lenCounts$[ebp+edx*4]
	shl	eax, cl
	add	eax, DWORD PTR _startPos$[ebp]
	mov	DWORD PTR _startPos$[ebp], eax
; Line 46
	cmp	DWORD PTR _startPos$[ebp], 65536	; 00010000H
	jbe	SHORT $LN6@SetCodeLen
; Line 47
	xor	al, al
	jmp	$LN16@SetCodeLen
$LN6@SetCodeLen:
; Line 48
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _startPos$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
; Line 49
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+76]
	mov	ecx, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _lenCounts$[ebp+ecx*4+4]
	mov	edx, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+edx*4+72], eax
; Line 50
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+72]
	mov	edx, DWORD PTR _i$[ebp]
	add	ecx, DWORD PTR _lenCounts$[ebp+edx*4]
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _tmpPositions$[ebp+eax*4], ecx
; Line 52
	jmp	$LN8@SetCodeLen
$LN7@SetCodeLen:
; Line 56
	cmp	DWORD PTR _startPos$[ebp], 65536	; 00010000H
	je	SHORT $LN5@SetCodeLen
; Line 57
	xor	al, al
	jmp	$LN16@SetCodeLen
$LN5@SetCodeLen:
; Line 60
	mov	DWORD PTR _symbolIndex$[ebp], 0
	jmp	SHORT $LN4@SetCodeLen
$LN3@SetCodeLen:
	mov	ecx, DWORD PTR _symbolIndex$[ebp]
	add	ecx, 1
	mov	DWORD PTR _symbolIndex$[ebp], ecx
$LN4@SetCodeLen:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _symbolIndex$[ebp]
	cmp	eax, DWORD PTR [edx+144]
	jae	SHORT $LN2@SetCodeLen
; Line 61
	mov	ecx, DWORD PTR _codeLengths$[ebp]
	add	ecx, DWORD PTR _symbolIndex$[ebp]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN1@SetCodeLen
; Line 62
	mov	eax, DWORD PTR _codeLengths$[ebp]
	add	eax, DWORD PTR _symbolIndex$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _tmpPositions$[ebp+ecx*4]
	sub	edx, 1
	mov	DWORD PTR tv165[ebp], edx
	mov	eax, DWORD PTR _codeLengths$[ebp]
	add	eax, DWORD PTR _symbolIndex$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR tv165[ebp]
	mov	DWORD PTR _tmpPositions$[ebp+ecx*4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+148]
	mov	edx, DWORD PTR tv165[ebp]
	mov	eax, DWORD PTR _symbolIndex$[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
$LN1@SetCodeLen:
; Line 63
	jmp	SHORT $LN3@SetCodeLen
$LN2@SetCodeLen:
	mov	al, 1
$LN16@SetCodeLen:
; Line 64
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN21@SetCodeLen
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN21@SetCodeLen:
	DD	2
	DD	$LN20@SetCodeLen
$LN20@SetCodeLen:
	DD	-84					; ffffffacH
	DD	72					; 00000048H
	DD	$LN18@SetCodeLen
	DD	-160					; ffffff60H
	DD	68					; 00000044H
	DD	$LN19@SetCodeLen
$LN19@SetCodeLen:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	0
$LN18@SetCodeLen:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
?SetCodeLengths@CDecoder@NHuffman@NImplode@NCompress@@QAE_NPBE@Z ENDP ; NCompress::NImplode::NHuffman::CDecoder::SetCodeLengths
_TEXT	ENDS
PUBLIC	?MovePos@?$CDecoder@VCInBuffer@@@NBitl@@QAEXI@Z	; NBitl::CDecoder<CInBuffer>::MovePos
PUBLIC	?GetValue@?$CDecoder@VCInBuffer@@@NBitl@@QAEII@Z ; NBitl::CDecoder<CInBuffer>::GetValue
PUBLIC	?DecodeSymbol@CDecoder@NHuffman@NImplode@NCompress@@QAEIPAV?$CDecoder@VCInBuffer@@@NBitl@@@Z ; NCompress::NImplode::NHuffman::CDecoder::DecodeSymbol
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_index$ = -20						; size = 4
_i$ = -16						; size = 4
_value$ = -12						; size = 4
_numBits$ = -8						; size = 4
_this$ = -4						; size = 4
_inStream$ = 8						; size = 4
?DecodeSymbol@CDecoder@NHuffman@NImplode@NCompress@@QAEIPAV?$CDecoder@VCInBuffer@@@NBitl@@@Z PROC ; NCompress::NImplode::NHuffman::CDecoder::DecodeSymbol
; _this$ = ecx
; Line 67
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 68
	mov	DWORD PTR _numBits$[ebp], 0
; Line 69
	push	16					; 00000010H
	mov	ecx, DWORD PTR _inStream$[ebp]
	call	?GetValue@?$CDecoder@VCInBuffer@@@NBitl@@QAEII@Z ; NBitl::CDecoder<CInBuffer>::GetValue
	mov	DWORD PTR _value$[ebp], eax
; Line 71
	mov	DWORD PTR _i$[ebp], 16			; 00000010H
	jmp	SHORT $LN6@DecodeSymb
$LN5@DecodeSymb:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@DecodeSymb:
	cmp	DWORD PTR _i$[ebp], 0
	jbe	SHORT $LN4@DecodeSymb
; Line 73
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _value$[ebp]
	cmp	eax, DWORD PTR [edx+ecx*4]
	jae	SHORT $LN3@DecodeSymb
; Line 75
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _numBits$[ebp], ecx
; Line 76
	jmp	SHORT $LN4@DecodeSymb
$LN3@DecodeSymb:
; Line 78
	jmp	SHORT $LN5@DecodeSymb
$LN4@DecodeSymb:
; Line 79
	cmp	DWORD PTR _i$[ebp], 0
	jne	SHORT $LN2@DecodeSymb
; Line 80
	or	eax, -1
	jmp	SHORT $LN7@DecodeSymb
$LN2@DecodeSymb:
; Line 81
	mov	edx, DWORD PTR _numBits$[ebp]
	push	edx
	mov	ecx, DWORD PTR _inStream$[ebp]
	call	?MovePos@?$CDecoder@VCInBuffer@@@NBitl@@QAEXI@Z ; NBitl::CDecoder<CInBuffer>::MovePos
; Line 83
	mov	eax, DWORD PTR _numBits$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _value$[ebp]
	sub	edx, DWORD PTR [ecx+eax*4+4]
	mov	ecx, 16					; 00000010H
	sub	ecx, DWORD PTR _numBits$[ebp]
	shr	edx, cl
	mov	eax, DWORD PTR _numBits$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [ecx+eax*4+72]
	mov	DWORD PTR _index$[ebp], edx
; Line 84
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _index$[ebp]
	cmp	eax, DWORD PTR [edx+144]
	jb	SHORT $LN1@DecodeSymb
; Line 85
	or	eax, -1
	jmp	SHORT $LN7@DecodeSymb
$LN1@DecodeSymb:
; Line 86
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+148]
	mov	eax, DWORD PTR _index$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
$LN7@DecodeSymb:
; Line 87
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?DecodeSymbol@CDecoder@NHuffman@NImplode@NCompress@@QAEIPAV?$CDecoder@VCInBuffer@@@NBitl@@@Z ENDP ; NCompress::NImplode::NHuffman::CDecoder::DecodeSymbol
_TEXT	ENDS
PUBLIC	?Normalize@?$CDecoder@VCInBuffer@@@NBitl@@QAEXXZ ; NBitl::CDecoder<CInBuffer>::Normalize
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetValue@?$CDecoder@VCInBuffer@@@NBitl@@QAEII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_numBits$ = 8						; size = 4
?GetValue@?$CDecoder@VCInBuffer@@@NBitl@@QAEII@Z PROC	; NBitl::CDecoder<CInBuffer>::GetValue, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\compress\bitldecoder.h
; Line 103
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 104
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Normalize@?$CDecoder@VCInBuffer@@@NBitl@@QAEXXZ ; NBitl::CDecoder<CInBuffer>::Normalize
; Line 105
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, 8
	sub	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shr	eax, cl
	and	eax, 16777215				; 00ffffffH
	mov	ecx, 24					; 00000018H
	sub	ecx, DWORD PTR _numBits$[ebp]
	shr	eax, cl
; Line 106
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetValue@?$CDecoder@VCInBuffer@@@NBitl@@QAEII@Z ENDP	; NBitl::CDecoder<CInBuffer>::GetValue
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?MovePos@?$CDecoder@VCInBuffer@@@NBitl@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_numBits$ = 8						; size = 4
?MovePos@?$CDecoder@VCInBuffer@@@NBitl@@QAEXI@Z PROC	; NBitl::CDecoder<CInBuffer>::MovePos, COMDAT
; _this$ = ecx
; Line 109
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 110
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _numBits$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 111
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+48]
	mov	ecx, DWORD PTR _numBits$[ebp]
	shr	edx, cl
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], edx
; Line 112
	mov	esp, ebp
	pop	ebp
	ret	4
?MovePos@?$CDecoder@VCInBuffer@@@NBitl@@QAEXI@Z ENDP	; NBitl::CDecoder<CInBuffer>::MovePos
_TEXT	ENDS
PUBLIC	?ReadByte@CInBufferBase@@QAEEXZ			; CInBufferBase::ReadByte
EXTRN	?kInvertTable@NBitl@@3PAEA:BYTE			; NBitl::kInvertTable
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Normalize@?$CDecoder@VCInBuffer@@@NBitl@@QAEXXZ
_TEXT	SEGMENT
_b$66171 = -5						; size = 1
_this$ = -4						; size = 4
?Normalize@?$CDecoder@VCInBuffer@@@NBitl@@QAEXXZ PROC	; NBitl::CDecoder<CInBuffer>::Normalize, COMDAT
; _this$ = ecx
; Line 93
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 94
	jmp	SHORT $LN3@Normalize
$LN2@Normalize:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 8
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx
$LN3@Normalize:
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 8
	jb	SHORT $LN4@Normalize
; Line 96
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?ReadByte@CInBufferBase@@QAEEXZ		; CInBufferBase::ReadByte
	mov	BYTE PTR _b$66171[ebp], al
; Line 97
	movzx	edx, BYTE PTR _b$66171[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, 32					; 00000020H
	sub	ecx, DWORD PTR [eax]
	shl	edx, cl
	mov	ecx, DWORD PTR _this$[ebp]
	or	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], edx
; Line 98
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	shl	edx, 8
	movzx	eax, BYTE PTR _b$66171[ebp]
	movzx	ecx, BYTE PTR ?kInvertTable@NBitl@@3PAEA[eax]
	or	edx, ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
; Line 99
	jmp	SHORT $LN2@Normalize
$LN4@Normalize:
; Line 100
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Normalize@?$CDecoder@VCInBuffer@@@NBitl@@QAEXXZ ENDP	; NBitl::CDecoder<CInBuffer>::Normalize
_TEXT	ENDS
EXTRN	?ReadByte_FromNewBlock@CInBufferBase@@IAEEXZ:PROC ; CInBufferBase::ReadByte_FromNewBlock
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ReadByte@CInBufferBase@@QAEEXZ
_TEXT	SEGMENT
tv70 = -5						; size = 1
_this$ = -4						; size = 4
?ReadByte@CInBufferBase@@QAEEXZ PROC			; CInBufferBase::ReadByte, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\inbuffer.h
; Line 72
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 73
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx+4]
	jb	SHORT $LN1@ReadByte
; Line 74
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadByte_FromNewBlock@CInBufferBase@@IAEEXZ ; CInBufferBase::ReadByte_FromNewBlock
	jmp	SHORT $LN2@ReadByte
$LN1@ReadByte:
; Line 75
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR tv70[ebp], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	al, BYTE PTR tv70[ebp]
$LN2@ReadByte:
; Line 76
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReadByte@CInBufferBase@@QAEEXZ ENDP			; CInBufferBase::ReadByte
_TEXT	ENDS
END
