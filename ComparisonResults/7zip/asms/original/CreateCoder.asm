; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\CPP\7zip\Common\CreateCoder.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?g_Codecs@@3PAPBUCCodecInfo@@A			; g_Codecs
PUBLIC	?g_Hashers@@3PAPBUCHasherInfo@@A		; g_Hashers
PUBLIC	?g_NumCodecs@@3IA				; g_NumCodecs
PUBLIC	?g_NumHashers@@3IA				; g_NumHashers
_BSS	SEGMENT
?g_Codecs@@3PAPBUCCodecInfo@@A DD 040H DUP (?)		; g_Codecs
?g_Hashers@@3PAPBUCHasherInfo@@A DD 010H DUP (?)	; g_Hashers
?g_NumCodecs@@3IA DD 01H DUP (?)			; g_NumCodecs
?g_NumHashers@@3IA DD 01H DUP (?)			; g_NumHashers
_BSS	ENDS
PUBLIC	?RegisterCodec@@YGXPBUCCodecInfo@@@Z		; RegisterCodec
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\cpp\7zip\common\createcoder.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_codecInfo$ = 8						; size = 4
?RegisterCodec@@YGXPBUCCodecInfo@@@Z PROC		; RegisterCodec
; Line 29
	push	ebp
	mov	ebp, esp
; Line 30
	cmp	DWORD PTR ?g_NumCodecs@@3IA, 64		; g_NumCodecs, 00000040H
	jae	SHORT $LN2@RegisterCo
; Line 31
	mov	eax, DWORD PTR ?g_NumCodecs@@3IA	; g_NumCodecs
	mov	ecx, DWORD PTR _codecInfo$[ebp]
	mov	DWORD PTR ?g_Codecs@@3PAPBUCCodecInfo@@A[eax*4], ecx
	mov	edx, DWORD PTR ?g_NumCodecs@@3IA	; g_NumCodecs
	add	edx, 1
	mov	DWORD PTR ?g_NumCodecs@@3IA, edx	; g_NumCodecs
$LN2@RegisterCo:
; Line 32
	pop	ebp
	ret	4
?RegisterCodec@@YGXPBUCCodecInfo@@@Z ENDP		; RegisterCodec
_TEXT	ENDS
PUBLIC	?RegisterHasher@@YGXPBUCHasherInfo@@@Z		; RegisterHasher
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_hashInfo$ = 8						; size = 4
?RegisterHasher@@YGXPBUCHasherInfo@@@Z PROC		; RegisterHasher
; Line 39
	push	ebp
	mov	ebp, esp
; Line 40
	cmp	DWORD PTR ?g_NumHashers@@3IA, 16	; g_NumHashers, 00000010H
	jae	SHORT $LN2@RegisterHa
; Line 41
	mov	eax, DWORD PTR ?g_NumHashers@@3IA	; g_NumHashers
	mov	ecx, DWORD PTR _hashInfo$[ebp]
	mov	DWORD PTR ?g_Hashers@@3PAPBUCHasherInfo@@A[eax*4], ecx
	mov	edx, DWORD PTR ?g_NumHashers@@3IA	; g_NumHashers
	add	edx, 1
	mov	DWORD PTR ?g_NumHashers@@3IA, edx	; g_NumHashers
$LN2@RegisterHa:
; Line 42
	pop	ebp
	ret	4
?RegisterHasher@@YGXPBUCHasherInfo@@@Z ENDP		; RegisterHasher
_TEXT	ENDS
PUBLIC	??BAString@@QBEPBDXZ				; AString::operator char const *
PUBLIC	?FindMethod@@YG_NABVAString@@AA_KAAI@Z		; FindMethod
EXTRN	?StringsAreEqualNoCase_Ascii@@YG_NPBD0@Z:PROC	; StringsAreEqualNoCase_Ascii
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_codec$68671 = -8					; size = 4
_i$ = -4						; size = 4
_name$ = 8						; size = 4
_methodId$ = 12						; size = 4
_numStreams$ = 16					; size = 4
?FindMethod@@YG_NABVAString@@AA_KAAI@Z PROC		; FindMethod
; Line 155
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 157
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@FindMethod
$LN3@FindMethod:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@FindMethod:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR ?g_NumCodecs@@3IA	; g_NumCodecs
	jae	SHORT $LN2@FindMethod
; Line 159
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR ?g_Codecs@@3PAPBUCCodecInfo@@A[edx*4]
	mov	DWORD PTR _codec$68671[ebp], eax
; Line 160
	mov	ecx, DWORD PTR _codec$68671[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR _name$[ebp]
	call	??BAString@@QBEPBDXZ			; AString::operator char const *
	push	eax
	call	?StringsAreEqualNoCase_Ascii@@YG_NPBD0@Z ; StringsAreEqualNoCase_Ascii
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@FindMethod
; Line 162
	mov	ecx, DWORD PTR _methodId$[ebp]
	mov	edx, DWORD PTR _codec$68671[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+4], edx
; Line 163
	mov	eax, DWORD PTR _numStreams$[ebp]
	mov	ecx, DWORD PTR _codec$68671[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax], edx
; Line 164
	mov	al, 1
	jmp	SHORT $LN5@FindMethod
$LN1@FindMethod:
; Line 166
	jmp	SHORT $LN3@FindMethod
$LN2@FindMethod:
; Line 186
	xor	al, al
$LN5@FindMethod:
; Line 187
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?FindMethod@@YG_NABVAString@@AA_KAAI@Z ENDP		; FindMethod
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??BAString@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BAString@@QBEPBDXZ PROC				; AString::operator char const *, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 238
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??BAString@@QBEPBDXZ ENDP				; AString::operator char const *
_TEXT	ENDS
PUBLIC	?Empty@AString@@QAEXXZ				; AString::Empty
PUBLIC	?FindMethod@@YG_N_KAAVAString@@@Z		; FindMethod
EXTRN	??4AString@@QAEAAV0@PBD@Z:PROC			; AString::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv79 = -12						; size = 4
_codec$68681 = -8					; size = 4
_i$ = -4						; size = 4
_methodId$ = 8						; size = 8
_name$ = 16						; size = 4
?FindMethod@@YG_N_KAAVAString@@@Z PROC			; FindMethod
; File c:\workspace\7z1505-src\cpp\7zip\common\createcoder.cpp
; Line 193
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 194
	mov	ecx, DWORD PTR _name$[ebp]
	call	?Empty@AString@@QAEXXZ			; AString::Empty
; Line 197
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@FindMethod@2
$LN3@FindMethod@2:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@FindMethod@2:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR ?g_NumCodecs@@3IA	; g_NumCodecs
	jae	SHORT $LN2@FindMethod@2
; Line 199
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR ?g_Codecs@@3PAPBUCCodecInfo@@A[edx*4]
	mov	DWORD PTR _codec$68681[ebp], eax
; Line 200
	mov	ecx, DWORD PTR _codec$68681[ebp]
	mov	DWORD PTR tv79[ebp], ecx
	mov	edx, DWORD PTR tv79[ebp]
	mov	eax, DWORD PTR _methodId$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN1@FindMethod@2
	mov	ecx, DWORD PTR tv79[ebp]
	mov	edx, DWORD PTR _methodId$[ebp+4]
	cmp	edx, DWORD PTR [ecx+12]
	jne	SHORT $LN1@FindMethod@2
; Line 202
	mov	eax, DWORD PTR _codec$68681[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	ecx, DWORD PTR _name$[ebp]
	call	??4AString@@QAEAAV0@PBD@Z		; AString::operator=
; Line 203
	mov	al, 1
	jmp	SHORT $LN5@FindMethod@2
$LN1@FindMethod@2:
; Line 205
	jmp	SHORT $LN3@FindMethod@2
$LN2@FindMethod@2:
; Line 224
	xor	al, al
$LN5@FindMethod@2:
; Line 225
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?FindMethod@@YG_N_KAAVAString@@@Z ENDP			; FindMethod
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Empty@AString@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Empty@AString@@QAEXXZ PROC				; AString::Empty, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 236
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	BYTE PTR [edx], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Empty@AString@@QAEXXZ ENDP				; AString::Empty
_TEXT	ENDS
PUBLIC	?FindHashMethod@@YG_NABVAString@@AA_K@Z		; FindHashMethod
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_codec$68691 = -8					; size = 4
_i$ = -4						; size = 4
_name$ = 8						; size = 4
_methodId$ = 12						; size = 4
?FindHashMethod@@YG_NABVAString@@AA_K@Z PROC		; FindHashMethod
; File c:\workspace\7z1505-src\cpp\7zip\common\createcoder.cpp
; Line 231
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 233
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@FindHashMe
$LN3@FindHashMe:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@FindHashMe:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR ?g_NumHashers@@3IA	; g_NumHashers
	jae	SHORT $LN2@FindHashMe
; Line 235
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR ?g_Hashers@@3PAPBUCHasherInfo@@A[edx*4]
	mov	DWORD PTR _codec$68691[ebp], eax
; Line 236
	mov	ecx, DWORD PTR _codec$68691[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR _name$[ebp]
	call	??BAString@@QBEPBDXZ			; AString::operator char const *
	push	eax
	call	?StringsAreEqualNoCase_Ascii@@YG_NPBD0@Z ; StringsAreEqualNoCase_Ascii
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@FindHashMe
; Line 238
	mov	ecx, DWORD PTR _methodId$[ebp]
	mov	edx, DWORD PTR _codec$68691[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+4], edx
; Line 239
	mov	al, 1
	jmp	SHORT $LN5@FindHashMe
$LN1@FindHashMe:
; Line 241
	jmp	SHORT $LN3@FindHashMe
$LN2@FindHashMe:
; Line 260
	xor	al, al
$LN5@FindHashMe:
; Line 261
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?FindHashMethod@@YG_NABVAString@@AA_K@Z ENDP		; FindHashMethod
_TEXT	ENDS
PUBLIC	??A?$CRecordVector@_K@@QAEAA_KI@Z		; CRecordVector<unsigned __int64>::operator[]
PUBLIC	?ClearAndSetSize@?$CRecordVector@_K@@QAEXI@Z	; CRecordVector<unsigned __int64>::ClearAndSetSize
PUBLIC	?GetHashMethods@@YGXAAV?$CRecordVector@_K@@@Z	; GetHashMethods
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$ = -4						; size = 4
_methods$ = 8						; size = 4
?GetHashMethods@@YGXAAV?$CRecordVector@_K@@@Z PROC	; GetHashMethods
; Line 266
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 267
	mov	eax, DWORD PTR ?g_NumHashers@@3IA	; g_NumHashers
	push	eax
	mov	ecx, DWORD PTR _methods$[ebp]
	call	?ClearAndSetSize@?$CRecordVector@_K@@QAEXI@Z ; CRecordVector<unsigned __int64>::ClearAndSetSize
; Line 269
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@GetHashMet
$LN2@GetHashMet:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@GetHashMet:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR ?g_NumHashers@@3IA	; g_NumHashers
	jae	SHORT $LN4@GetHashMet
; Line 270
	mov	eax, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR ?g_Hashers@@3PAPBUCHasherInfo@@A[eax*4]
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _methods$[ebp]
	call	??A?$CRecordVector@_K@@QAEAA_KI@Z	; CRecordVector<unsigned __int64>::operator[]
	mov	edx, DWORD PTR [esi+8]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [esi+12]
	mov	DWORD PTR [eax+4], ecx
	jmp	SHORT $LN2@GetHashMet
$LN4@GetHashMet:
; Line 281
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetHashMethods@@YGXAAV?$CRecordVector@_K@@@Z ENDP	; GetHashMethods
_TEXT	ENDS
PUBLIC	??4?$CMyComPtr@UICompressCoder2@@@@QAEPAUICompressCoder2@@PAU1@@Z ; CMyComPtr<ICompressCoder2>::operator=
PUBLIC	??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z ; CMyComPtr<ICompressCoder>::operator=
PUBLIC	??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@PAU1@@Z ; CMyComPtr<ICompressFilter>::operator=
PUBLIC	?CreateCoder@@YGJ_K_NAAV?$CMyComPtr@UICompressFilter@@@@AAUCCreatedCoder@@@Z ; CreateCoder
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv149 = -20						; size = 4
_p$68822 = -16						; size = 4
_p$68811 = -12						; size = 4
_codec$68807 = -8					; size = 4
_i$ = -4						; size = 4
_methodId$ = 8						; size = 8
_encode$ = 16						; size = 1
_filter$ = 20						; size = 4
_cod$ = 24						; size = 4
?CreateCoder@@YGJ_K_NAAV?$CMyComPtr@UICompressFilter@@@@AAUCCreatedCoder@@@Z PROC ; CreateCoder
; Line 288
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 289
	mov	eax, DWORD PTR _cod$[ebp]
	mov	BYTE PTR [eax+8], 0
; Line 290
	mov	ecx, DWORD PTR _cod$[ebp]
	mov	BYTE PTR [ecx+9], 0
; Line 291
	mov	edx, DWORD PTR _cod$[ebp]
	mov	DWORD PTR [edx+12], 1
; Line 294
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN16@CreateCode
$LN15@CreateCode:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN16@CreateCode:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR ?g_NumCodecs@@3IA	; g_NumCodecs
	jae	$LN14@CreateCode
; Line 296
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR ?g_Codecs@@3PAPBUCCodecInfo@@A[edx*4]
	mov	DWORD PTR _codec$68807[ebp], eax
; Line 297
	mov	ecx, DWORD PTR _codec$68807[ebp]
	mov	DWORD PTR tv149[ebp], ecx
	mov	edx, DWORD PTR tv149[ebp]
	mov	eax, DWORD PTR [edx+8]
	cmp	eax, DWORD PTR _methodId$[ebp]
	jne	$LN13@CreateCode
	mov	ecx, DWORD PTR tv149[ebp]
	mov	edx, DWORD PTR [ecx+12]
	cmp	edx, DWORD PTR _methodId$[ebp+4]
	jne	$LN13@CreateCode
; Line 299
	movzx	eax, BYTE PTR _encode$[ebp]
	test	eax, eax
	je	SHORT $LN12@CreateCode
; Line 301
	mov	ecx, DWORD PTR _codec$68807[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN11@CreateCode
; Line 303
	mov	edx, DWORD PTR _codec$68807[ebp]
	mov	esi, esp
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _p$68811[ebp], eax
; Line 304
	mov	ecx, DWORD PTR _codec$68807[ebp]
	movzx	edx, BYTE PTR [ecx+24]
	test	edx, edx
	je	SHORT $LN10@CreateCode
	mov	eax, DWORD PTR _p$68811[ebp]
	push	eax
	mov	ecx, DWORD PTR _filter$[ebp]
	call	??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@PAU1@@Z ; CMyComPtr<ICompressFilter>::operator=
	jmp	SHORT $LN9@CreateCode
$LN10@CreateCode:
; Line 305
	mov	ecx, DWORD PTR _codec$68807[ebp]
	cmp	DWORD PTR [ecx+20], 1
	jne	SHORT $LN8@CreateCode
	mov	edx, DWORD PTR _p$68811[ebp]
	push	edx
	mov	ecx, DWORD PTR _cod$[ebp]
	call	??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z ; CMyComPtr<ICompressCoder>::operator=
	jmp	SHORT $LN9@CreateCode
$LN8@CreateCode:
; Line 306
	mov	eax, DWORD PTR _p$68811[ebp]
	push	eax
	mov	ecx, DWORD PTR _cod$[ebp]
	add	ecx, 4
	call	??4?$CMyComPtr@UICompressCoder2@@@@QAEPAUICompressCoder2@@PAU1@@Z ; CMyComPtr<ICompressCoder2>::operator=
	mov	ecx, DWORD PTR _cod$[ebp]
	mov	edx, DWORD PTR _codec$68807[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+12], eax
$LN9@CreateCode:
; Line 307
	xor	eax, eax
	jmp	SHORT $LN17@CreateCode
$LN11@CreateCode:
; Line 310
	jmp	SHORT $LN13@CreateCode
$LN12@CreateCode:
; Line 311
	mov	ecx, DWORD PTR _codec$68807[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN13@CreateCode
; Line 313
	mov	edx, DWORD PTR _codec$68807[ebp]
	mov	esi, esp
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _p$68822[ebp], eax
; Line 314
	mov	ecx, DWORD PTR _codec$68807[ebp]
	movzx	edx, BYTE PTR [ecx+24]
	test	edx, edx
	je	SHORT $LN4@CreateCode
	mov	eax, DWORD PTR _p$68822[ebp]
	push	eax
	mov	ecx, DWORD PTR _filter$[ebp]
	call	??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@PAU1@@Z ; CMyComPtr<ICompressFilter>::operator=
	jmp	SHORT $LN3@CreateCode
$LN4@CreateCode:
; Line 315
	mov	ecx, DWORD PTR _codec$68807[ebp]
	cmp	DWORD PTR [ecx+20], 1
	jne	SHORT $LN2@CreateCode
	mov	edx, DWORD PTR _p$68822[ebp]
	push	edx
	mov	ecx, DWORD PTR _cod$[ebp]
	call	??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z ; CMyComPtr<ICompressCoder>::operator=
	jmp	SHORT $LN3@CreateCode
$LN2@CreateCode:
; Line 316
	mov	eax, DWORD PTR _p$68822[ebp]
	push	eax
	mov	ecx, DWORD PTR _cod$[ebp]
	add	ecx, 4
	call	??4?$CMyComPtr@UICompressCoder2@@@@QAEPAUICompressCoder2@@PAU1@@Z ; CMyComPtr<ICompressCoder2>::operator=
	mov	ecx, DWORD PTR _cod$[ebp]
	mov	edx, DWORD PTR _codec$68807[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+12], eax
$LN3@CreateCode:
; Line 317
	xor	eax, eax
	jmp	SHORT $LN17@CreateCode
$LN13@CreateCode:
; Line 320
	jmp	$LN15@CreateCode
$LN14@CreateCode:
; Line 371
	xor	eax, eax
$LN17@CreateCode:
; Line 372
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?CreateCoder@@YGJ_K_NAAV?$CMyComPtr@UICompressFilter@@@@AAUCCreatedCoder@@@Z ENDP ; CreateCoder
_TEXT	ENDS
PUBLIC	??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ	; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>
PUBLIC	??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@ABV0@@Z ; CMyComPtr<ICompressFilter>::operator=
PUBLIC	??B?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ ; CMyComPtr<ICompressFilter>::operator ICompressFilter *
PUBLIC	??0?$CMyComPtr@UICompressFilter@@@@QAE@XZ	; CMyComPtr<ICompressFilter>::CMyComPtr<ICompressFilter>
PUBLIC	?CreateCoder@@YGJ_K_NAAUCCreatedCoder@@@Z	; CreateCoder
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??0CFilterCoder@@QAE@_N@Z:PROC			; CFilterCoder::CFilterCoder
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
xdata$x	SEGMENT
__unwindtable$?CreateCoder@@YGJ_K_NAAUCCreatedCoder@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateCoder@@YGJ_K_NAAUCCreatedCoder@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?CreateCoder@@YGJ_K_NAAUCCreatedCoder@@@Z$1
__ehfuncinfo$?CreateCoder@@YGJ_K_NAAUCCreatedCoder@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?CreateCoder@@YGJ_K_NAAUCCreatedCoder@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv84 = -48						; size = 4
$T69073 = -44						; size = 4
$T69070 = -40						; size = 4
$T69069 = -36						; size = 4
_coderSpec$68841 = -32					; size = 4
_res$ = -28						; size = 4
_filter$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_methodId$ = 8						; size = 8
_encode$ = 16						; size = 1
_cod$ = 20						; size = 4
?CreateCoder@@YGJ_K_NAAUCCreatedCoder@@@Z PROC		; CreateCoder
; Line 378
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateCoder@@YGJ_K_NAAUCCreatedCoder@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-48], eax
	mov	DWORD PTR [ebp-44], eax
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 379
	lea	ecx, DWORD PTR _filter$[ebp]
	call	??0?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::CMyComPtr<ICompressFilter>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 383
	mov	eax, DWORD PTR _cod$[ebp]
	push	eax
	lea	ecx, DWORD PTR _filter$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _encode$[ebp]
	push	edx
	mov	eax, DWORD PTR _methodId$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _methodId$[ebp]
	push	ecx
	call	?CreateCoder@@YGJ_K_NAAV?$CMyComPtr@UICompressFilter@@@@AAUCCreatedCoder@@@Z ; CreateCoder
	mov	DWORD PTR _res$[ebp], eax
; Line 385
	lea	ecx, DWORD PTR _filter$[ebp]
	call	??B?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ ; CMyComPtr<ICompressFilter>::operator ICompressFilter *
	test	eax, eax
	je	SHORT $LN1@CreateCode@2
; Line 387
	mov	edx, DWORD PTR _cod$[ebp]
	mov	BYTE PTR [edx+9], 1
; Line 388
	push	152					; 00000098H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T69070[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T69070[ebp], 0
	je	SHORT $LN4@CreateCode@2
	movzx	eax, BYTE PTR _encode$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T69070[ebp]
	call	??0CFilterCoder@@QAE@_N@Z		; CFilterCoder::CFilterCoder
	mov	DWORD PTR tv84[ebp], eax
	jmp	SHORT $LN5@CreateCode@2
$LN4@CreateCode@2:
	mov	DWORD PTR tv84[ebp], 0
$LN5@CreateCode@2:
	mov	ecx, DWORD PTR tv84[ebp]
	mov	DWORD PTR $T69069[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T69069[ebp]
	mov	DWORD PTR _coderSpec$68841[ebp], edx
; Line 389
	mov	eax, DWORD PTR _coderSpec$68841[ebp]
	push	eax
	mov	ecx, DWORD PTR _cod$[ebp]
	call	??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z ; CMyComPtr<ICompressCoder>::operator=
; Line 390
	lea	ecx, DWORD PTR _filter$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _coderSpec$68841[ebp]
	add	ecx, 148				; 00000094H
	call	??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@ABV0@@Z ; CMyComPtr<ICompressFilter>::operator=
$LN1@CreateCode@2:
; Line 393
	mov	edx, DWORD PTR _res$[ebp]
	mov	DWORD PTR $T69073[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _filter$[ebp]
	call	??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>
	mov	eax, DWORD PTR $T69073[ebp]
; Line 394
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@CreateCode@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	3
$LN11@CreateCode@2:
	DD	1
	DD	$LN10@CreateCode@2
$LN10@CreateCode@2:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN8@CreateCode@2
$LN8@CreateCode@2:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateCoder@@YGJ_K_NAAUCCreatedCoder@@@Z$0:
	lea	ecx, DWORD PTR _filter$[ebp]
	jmp	??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>
__unwindfunclet$?CreateCoder@@YGJ_K_NAAUCCreatedCoder@@@Z$1:
	mov	eax, DWORD PTR $T69070[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?CreateCoder@@YGJ_K_NAAUCCreatedCoder@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateCoder@@YGJ_K_NAAUCCreatedCoder@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateCoder@@YGJ_K_NAAUCCreatedCoder@@@Z ENDP		; CreateCoder
PUBLIC	??1CCreatedCoder@@QAE@XZ			; CCreatedCoder::~CCreatedCoder
PUBLIC	??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@ABV0@@Z ; CMyComPtr<ICompressCoder>::operator=
PUBLIC	??0CCreatedCoder@@QAE@XZ			; CCreatedCoder::CCreatedCoder
PUBLIC	?CreateCoder@@YGJ_K_NAAV?$CMyComPtr@UICompressCoder@@@@@Z ; CreateCoder
xdata$x	SEGMENT
__unwindtable$?CreateCoder@@YGJ_K_NAAV?$CMyComPtr@UICompressCoder@@@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateCoder@@YGJ_K_NAAV?$CMyComPtr@UICompressCoder@@@@@Z$0
__ehfuncinfo$?CreateCoder@@YGJ_K_NAAV?$CMyComPtr@UICompressCoder@@@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreateCoder@@YGJ_K_NAAV?$CMyComPtr@UICompressCoder@@@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T69090 = -44						; size = 4
_res$ = -40						; size = 4
_cod$ = -32						; size = 16
__$EHRec$ = -12						; size = 12
_methodId$ = 8						; size = 8
_encode$ = 16						; size = 1
_coder$ = 20						; size = 4
?CreateCoder@@YGJ_K_NAAV?$CMyComPtr@UICompressCoder@@@@@Z PROC ; CreateCoder
; Line 400
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateCoder@@YGJ_K_NAAV?$CMyComPtr@UICompressCoder@@@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-44], eax
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 401
	lea	ecx, DWORD PTR _cod$[ebp]
	call	??0CCreatedCoder@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 405
	lea	eax, DWORD PTR _cod$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _encode$[ebp]
	push	ecx
	mov	edx, DWORD PTR _methodId$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _methodId$[ebp]
	push	eax
	call	?CreateCoder@@YGJ_K_NAAUCCreatedCoder@@@Z ; CreateCoder
	mov	DWORD PTR _res$[ebp], eax
; Line 406
	lea	ecx, DWORD PTR _cod$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _coder$[ebp]
	call	??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@ABV0@@Z ; CMyComPtr<ICompressCoder>::operator=
; Line 407
	mov	edx, DWORD PTR _res$[ebp]
	mov	DWORD PTR $T69090[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cod$[ebp]
	call	??1CCreatedCoder@@QAE@XZ
	mov	eax, DWORD PTR $T69090[ebp]
; Line 408
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@CreateCode@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	2
$LN7@CreateCode@3:
	DD	1
	DD	$LN6@CreateCode@3
$LN6@CreateCode@3:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN4@CreateCode@3
$LN4@CreateCode@3:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateCoder@@YGJ_K_NAAV?$CMyComPtr@UICompressCoder@@@@@Z$0:
	lea	ecx, DWORD PTR _cod$[ebp]
	jmp	??1CCreatedCoder@@QAE@XZ
__ehhandler$?CreateCoder@@YGJ_K_NAAV?$CMyComPtr@UICompressCoder@@@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateCoder@@YGJ_K_NAAV?$CMyComPtr@UICompressCoder@@@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateCoder@@YGJ_K_NAAV?$CMyComPtr@UICompressCoder@@@@@Z ENDP ; CreateCoder
PUBLIC	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ	; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
PUBLIC	??0?$CMyComPtr@UICompressCoder2@@@@QAE@XZ	; CMyComPtr<ICompressCoder2>::CMyComPtr<ICompressCoder2>
PUBLIC	??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ	; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CCreatedCoder@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CCreatedCoder@@QAE@XZ$0
__ehfuncinfo$??0CCreatedCoder@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CCreatedCoder@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CCreatedCoder@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CCreatedCoder@@QAE@XZ PROC				; CCreatedCoder::CCreatedCoder, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CCreatedCoder@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$CMyComPtr@UICompressCoder2@@@@QAE@XZ ; CMyComPtr<ICompressCoder2>::CMyComPtr<ICompressCoder2>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CCreatedCoder@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
__ehhandler$??0CCreatedCoder@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CCreatedCoder@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CCreatedCoder@@QAE@XZ ENDP				; CCreatedCoder::CCreatedCoder
PUBLIC	??1?$CMyComPtr@UICompressCoder2@@@@QAE@XZ	; CMyComPtr<ICompressCoder2>::~CMyComPtr<ICompressCoder2>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CCreatedCoder@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CCreatedCoder@@QAE@XZ$0
__ehfuncinfo$??1CCreatedCoder@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CCreatedCoder@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CCreatedCoder@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CCreatedCoder@@QAE@XZ PROC				; CCreatedCoder::~CCreatedCoder, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CCreatedCoder@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1?$CMyComPtr@UICompressCoder2@@@@QAE@XZ ; CMyComPtr<ICompressCoder2>::~CMyComPtr<ICompressCoder2>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CCreatedCoder@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
__ehhandler$??1CCreatedCoder@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CCreatedCoder@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CCreatedCoder@@QAE@XZ ENDP				; CCreatedCoder::~CCreatedCoder
PUBLIC	?CreateFilter@@YGJ_K_NAAV?$CMyComPtr@UICompressFilter@@@@@Z ; CreateFilter
xdata$x	SEGMENT
__unwindtable$?CreateFilter@@YGJ_K_NAAV?$CMyComPtr@UICompressFilter@@@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateFilter@@YGJ_K_NAAV?$CMyComPtr@UICompressFilter@@@@@Z$0
__ehfuncinfo$?CreateFilter@@YGJ_K_NAAV?$CMyComPtr@UICompressFilter@@@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreateFilter@@YGJ_K_NAAV?$CMyComPtr@UICompressFilter@@@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T69120 = -40						; size = 4
_cod$ = -32						; size = 16
__$EHRec$ = -12						; size = 12
_methodId$ = 8						; size = 8
_encode$ = 16						; size = 1
_filter$ = 20						; size = 4
?CreateFilter@@YGJ_K_NAAV?$CMyComPtr@UICompressFilter@@@@@Z PROC ; CreateFilter
; Line 414
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateFilter@@YGJ_K_NAAV?$CMyComPtr@UICompressFilter@@@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 415
	lea	ecx, DWORD PTR _cod$[ebp]
	call	??0CCreatedCoder@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 419
	lea	eax, DWORD PTR _cod$[ebp]
	push	eax
	mov	ecx, DWORD PTR _filter$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _encode$[ebp]
	push	edx
	mov	eax, DWORD PTR _methodId$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _methodId$[ebp]
	push	ecx
	call	?CreateCoder@@YGJ_K_NAAV?$CMyComPtr@UICompressFilter@@@@AAUCCreatedCoder@@@Z ; CreateCoder
	mov	DWORD PTR $T69120[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cod$[ebp]
	call	??1CCreatedCoder@@QAE@XZ
	mov	eax, DWORD PTR $T69120[ebp]
; Line 420
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@CreateFilt
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	3
$LN7@CreateFilt:
	DD	1
	DD	$LN6@CreateFilt
$LN6@CreateFilt:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN4@CreateFilt
$LN4@CreateFilt:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateFilter@@YGJ_K_NAAV?$CMyComPtr@UICompressFilter@@@@@Z$0:
	lea	ecx, DWORD PTR _cod$[ebp]
	jmp	??1CCreatedCoder@@QAE@XZ
__ehhandler$?CreateFilter@@YGJ_K_NAAV?$CMyComPtr@UICompressFilter@@@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateFilter@@YGJ_K_NAAV?$CMyComPtr@UICompressFilter@@@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateFilter@@YGJ_K_NAAV?$CMyComPtr@UICompressFilter@@@@@Z ENDP ; CreateFilter
PUBLIC	??4?$CMyComPtr@UIHasher@@@@QAEPAUIHasher@@PAU1@@Z ; CMyComPtr<IHasher>::operator=
PUBLIC	?CreateHasher@@YGJ_KAAVAString@@AAV?$CMyComPtr@UIHasher@@@@@Z ; CreateHasher
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv82 = -12						; size = 4
_codec$68878 = -8					; size = 4
_i$ = -4						; size = 4
_methodId$ = 8						; size = 8
_name$ = 16						; size = 4
_hasher$ = 20						; size = 4
?CreateHasher@@YGJ_KAAVAString@@AAV?$CMyComPtr@UIHasher@@@@@Z PROC ; CreateHasher
; Line 428
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 429
	mov	ecx, DWORD PTR _name$[ebp]
	call	?Empty@AString@@QAEXXZ			; AString::Empty
; Line 432
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@CreateHash
$LN3@CreateHash:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@CreateHash:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR ?g_NumHashers@@3IA	; g_NumHashers
	jae	SHORT $LN2@CreateHash
; Line 434
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR ?g_Hashers@@3PAPBUCHasherInfo@@A[edx*4]
	mov	DWORD PTR _codec$68878[ebp], eax
; Line 435
	mov	ecx, DWORD PTR _codec$68878[ebp]
	mov	DWORD PTR tv82[ebp], ecx
	mov	edx, DWORD PTR tv82[ebp]
	mov	eax, DWORD PTR [edx+8]
	cmp	eax, DWORD PTR _methodId$[ebp]
	jne	SHORT $LN1@CreateHash
	mov	ecx, DWORD PTR tv82[ebp]
	mov	edx, DWORD PTR [ecx+12]
	cmp	edx, DWORD PTR _methodId$[ebp+4]
	jne	SHORT $LN1@CreateHash
; Line 437
	mov	eax, DWORD PTR _codec$68878[ebp]
	mov	esi, esp
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	ecx, DWORD PTR _hasher$[ebp]
	call	??4?$CMyComPtr@UIHasher@@@@QAEPAUIHasher@@PAU1@@Z ; CMyComPtr<IHasher>::operator=
; Line 438
	mov	edx, DWORD PTR _codec$68878[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	call	??4AString@@QAEAAV0@PBD@Z		; AString::operator=
; Line 439
	jmp	SHORT $LN2@CreateHash
$LN1@CreateHash:
; Line 441
	jmp	SHORT $LN3@CreateHash
$LN2@CreateHash:
; Line 460
	xor	eax, eax
; Line 461
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?CreateHasher@@YGJ_KAAVAString@@AAV?$CMyComPtr@UIHasher@@@@@Z ENDP ; CreateHasher
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ PROC		; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ ENDP		; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ PROC		; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ENDP		; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z PROC ; CMyComPtr<ICompressCoder>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z ENDP ; CMyComPtr<ICompressCoder>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lp$ = 8						; size = 4
??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@ABV0@@Z PROC ; CMyComPtr<ICompressCoder>::operator=, COMDAT
; _this$ = ecx
; Line 36
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _lp$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z ; CMyComPtr<ICompressCoder>::operator=
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@ABV0@@Z ENDP ; CMyComPtr<ICompressCoder>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICompressCoder2@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UICompressCoder2@@@@QAE@XZ PROC		; CMyComPtr<ICompressCoder2>::CMyComPtr<ICompressCoder2>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UICompressCoder2@@@@QAE@XZ ENDP		; CMyComPtr<ICompressCoder2>::CMyComPtr<ICompressCoder2>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICompressCoder2@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICompressCoder2@@@@QAE@XZ PROC		; CMyComPtr<ICompressCoder2>::~CMyComPtr<ICompressCoder2>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@2:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICompressCoder2@@@@QAE@XZ ENDP		; CMyComPtr<ICompressCoder2>::~CMyComPtr<ICompressCoder2>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UICompressCoder2@@@@QAEPAUICompressCoder2@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UICompressCoder2@@@@QAEPAUICompressCoder2@@PAU1@@Z PROC ; CMyComPtr<ICompressCoder2>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@2
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@2:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@2
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@2:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UICompressCoder2@@@@QAEPAUICompressCoder2@@PAU1@@Z ENDP ; CMyComPtr<ICompressCoder2>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICompressFilter@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UICompressFilter@@@@QAE@XZ PROC		; CMyComPtr<ICompressFilter>::CMyComPtr<ICompressFilter>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UICompressFilter@@@@QAE@XZ ENDP		; CMyComPtr<ICompressFilter>::CMyComPtr<ICompressFilter>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ PROC		; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@3:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ENDP		; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ PROC ; CMyComPtr<ICompressFilter>::operator ICompressFilter *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ ENDP ; CMyComPtr<ICompressFilter>::operator ICompressFilter *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@PAU1@@Z PROC ; CMyComPtr<ICompressFilter>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@3
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@3:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@3
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@3:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@PAU1@@Z ENDP ; CMyComPtr<ICompressFilter>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lp$ = 8						; size = 4
??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@ABV0@@Z PROC ; CMyComPtr<ICompressFilter>::operator=, COMDAT
; _this$ = ecx
; Line 36
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _lp$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@PAU1@@Z ; CMyComPtr<ICompressFilter>::operator=
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@ABV0@@Z ENDP ; CMyComPtr<ICompressFilter>::operator=
_TEXT	ENDS
PUBLIC	?ClearAndReserve@?$CRecordVector@_K@@QAEXI@Z	; CRecordVector<unsigned __int64>::ClearAndReserve
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ClearAndSetSize@?$CRecordVector@_K@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newSize$ = 8						; size = 4
?ClearAndSetSize@?$CRecordVector@_K@@QAEXI@Z PROC	; CRecordVector<unsigned __int64>::ClearAndSetSize, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 87
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 88
	mov	eax, DWORD PTR _newSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearAndReserve@?$CRecordVector@_K@@QAEXI@Z ; CRecordVector<unsigned __int64>::ClearAndReserve
; Line 89
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _newSize$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 90
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearAndSetSize@?$CRecordVector@_K@@QAEXI@Z ENDP	; CRecordVector<unsigned __int64>::ClearAndSetSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@_K@@QAEAA_KI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@_K@@QAEAA_KI@Z PROC			; CRecordVector<unsigned __int64>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@_K@@QAEAA_KI@Z ENDP			; CRecordVector<unsigned __int64>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UIHasher@@@@QAEPAUIHasher@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UIHasher@@@@QAEPAUIHasher@@PAU1@@Z PROC	; CMyComPtr<IHasher>::operator=, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@4
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@4:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@4
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@4:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UIHasher@@@@QAEPAUIHasher@@PAU1@@Z ENDP	; CMyComPtr<IHasher>::operator=
_TEXT	ENDS
PUBLIC	?Clear@?$CRecordVector@_K@@QAEXXZ		; CRecordVector<unsigned __int64>::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ClearAndReserve@?$CRecordVector@_K@@QAEXI@Z
_TEXT	SEGMENT
$T69162 = -12						; size = 4
$T69161 = -8						; size = 4
_this$ = -4						; size = 4
_newCapacity$ = 8					; size = 4
?ClearAndReserve@?$CRecordVector@_K@@QAEXI@Z PROC	; CRecordVector<unsigned __int64>::ClearAndReserve, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 74
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 75
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CRecordVector@_K@@QAEXXZ	; CRecordVector<unsigned __int64>::Clear
; Line 76
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	SHORT $LN2@ClearAndRe
; Line 78
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T69161[ebp], eax
	mov	ecx, DWORD PTR $T69161[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 79
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0
; Line 80
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 81
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$[ebp]
	mov	edx, 8
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T69162[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T69162[ebp]
	mov	DWORD PTR [eax], ecx
; Line 82
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _newCapacity$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@ClearAndRe:
; Line 84
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearAndReserve@?$CRecordVector@_K@@QAEXI@Z ENDP	; CRecordVector<unsigned __int64>::ClearAndReserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Clear@?$CRecordVector@_K@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$CRecordVector@_K@@QAEXXZ PROC			; CRecordVector<unsigned __int64>::Clear, COMDAT
; _this$ = ecx
; Line 131
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CRecordVector@_K@@QAEXXZ ENDP			; CRecordVector<unsigned __int64>::Clear
_TEXT	ENDS
END
