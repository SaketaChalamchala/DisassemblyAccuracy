; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\CPP\7zip\Archive\Zip\ZipHandlerOut.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG71292 DB	'copy', 00H
	ORG $+3
$SG71293 DB	'deflate', 00H
$SG71294 DB	'deflate64', 00H
	ORG $+2
$SG71295 DB	'bzip2', 00H
	ORG $+2
$SG71296 DB	'lzma', 00H
	ORG $+3
$SG71297 DB	'ppmd', 00H
	ORG $+3
_k_SupportedMethods DD 00H
	DD	FLAT:$SG71292
	DD	08H
	DD	FLAT:$SG71293
	DD	09H
	DD	FLAT:$SG71294
	DD	0cH
	DD	FLAT:$SG71295
	DD	0eH
	DD	FLAT:$SG71296
	DD	062H
	DD	FLAT:$SG71297
$SG71322 DB	'm', 00H, 00H, 00H
$SG71357 DB	'e', 00H, 'm', 00H, 00H, 00H
	ORG $+2
$SG71363 DB	'a', 00H, 'e', 00H, 's', 00H, 00H, 00H
$SG71365 DB	'1', 00H, '2', 00H, '8', 00H, 00H, 00H
$SG71368 DB	'1', 00H, '9', 00H, '2', 00H, 00H, 00H
$SG71372 DB	'2', 00H, '5', 00H, '6', 00H, 00H, 00H
$SG71378 DB	'z', 00H, 'i', 00H, 'p', 00H, 'c', 00H, 'r', 00H, 'y', 00H
	DB	'p', 00H, 't', 00H, 'o', 00H, 00H, 00H
$SG71384 DB	'm', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG71391 DB	'tc', 00H
	ORG $+1
$SG71397 DB	'cl', 00H
	ORG $+1
$SG71404 DB	'cu', 00H
	ORG $+1
$SG71411 DB	'cp', 00H
	ORG $+1
$SG71415 DB	00H, 00H
	ORG $+2
$SG71420 DB	'rsfx', 00H
CONST	ENDS
PUBLIC	?GetFileTimeType@CHandler@NZip@NArchive@@UAGJPAI@Z ; NArchive::NZip::CHandler::GetFileTimeType
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\ziphandlerout.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_this$ = 8						; size = 4
_timeType$ = 12						; size = 4
?GetFileTimeType@CHandler@NZip@NArchive@@UAGJPAI@Z PROC	; NArchive::NZip::CHandler::GetFileTimeType
; Line 32
	push	ebp
	mov	ebp, esp
; Line 33
	mov	eax, DWORD PTR _timeType$[ebp]
	mov	DWORD PTR [eax], 2
; Line 34
	xor	eax, eax
; Line 35
	pop	ebp
	ret	8
?GetFileTimeType@CHandler@NZip@NArchive@@UAGJPAI@Z ENDP	; NArchive::NZip::CHandler::GetFileTimeType
_TEXT	ENDS
PUBLIC	?Add@?$CRecordVector@E@@QAEIE@Z			; CRecordVector<unsigned char>::Add
PUBLIC	??BCMyComBSTR@@QBEPB_WXZ			; CMyComBSTR::operator wchar_t const *
PUBLIC	??1?$CMyComPtr@UICryptoGetTextPassword2@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword2>::~CMyComPtr<ICryptoGetTextPassword2>
PUBLIC	??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CCompressionMethodMode::~CCompressionMethodMode
PUBLIC	??1CMyComBSTR@@QAE@XZ				; CMyComBSTR::~CMyComBSTR
PUBLIC	??ICMyComBSTR@@QAEPAPA_WXZ			; CMyComBSTR::operator&
PUBLIC	??C?$CMyComPtr@UICryptoGetTextPassword2@@@@QBEPAUICryptoGetTextPassword2@@XZ ; CMyComPtr<ICryptoGetTextPassword2>::operator->
PUBLIC	??0CMyComBSTR@@QAE@XZ				; CMyComBSTR::CMyComBSTR
PUBLIC	??B?$CMyComPtr@UICryptoGetTextPassword2@@@@QBEPAUICryptoGetTextPassword2@@XZ ; CMyComPtr<ICryptoGetTextPassword2>::operator ICryptoGetTextPassword2 *
PUBLIC	?Empty@AString@@QAEXXZ				; AString::Empty
PUBLIC	??4CBaseProps@NZip@NArchive@@QAEAAU012@ABU012@@Z ; NArchive::NZip::CBaseProps::operator=
PUBLIC	??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CCompressionMethodMode::CCompressionMethodMode
PUBLIC	??1?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallback>::~CMyComPtr<IArchiveUpdateCallback>
PUBLIC	??$QueryInterface@UICryptoGetTextPassword2@@@?$CMyComPtr@UIArchiveUpdateCallback@@@@QBEJABU_GUID@@PAPAUICryptoGetTextPassword2@@@Z ; CMyComPtr<IArchiveUpdateCallback>::QueryInterface<ICryptoGetTextPassword2>
PUBLIC	??I?$CMyComPtr@UICryptoGetTextPassword2@@@@QAEPAPAUICryptoGetTextPassword2@@XZ ; CMyComPtr<ICryptoGetTextPassword2>::operator&
PUBLIC	??0?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@PAUIArchiveUpdateCallback@@@Z ; CMyComPtr<IArchiveUpdateCallback>::CMyComPtr<IArchiveUpdateCallback>
PUBLIC	??0?$CMyComPtr@UICryptoGetTextPassword2@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword2>::CMyComPtr<ICryptoGetTextPassword2>
PUBLIC	?Add@?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAEIABUCUpdateItem@NZip@NArchive@@@Z ; CObjectVector<NArchive::NZip::CUpdateItem>::Add
PUBLIC	?Len@AString@@QBEIXZ				; AString::Len
PUBLIC	?IsAscii@UString@@QBE_NXZ			; UString::IsAscii
PUBLIC	??9@YG_NABVUString@@0@Z				; operator!=
PUBLIC	??1AString@@QAE@XZ				; AString::~AString
PUBLIC	??YUString@@QAEAAV0@_W@Z			; UString::operator+=
PUBLIC	?Back@UString@@QBE_WXZ				; UString::Back
PUBLIC	?IsEmpty@UString@@QBE_NXZ			; UString::IsEmpty
PUBLIC	?Empty@UString@@QAEXXZ				; UString::Empty
PUBLIC	??1UString@@QAE@XZ				; UString::~UString
PUBLIC	??1CPropVariant@NCOM@NWindows@@QAE@XZ		; NWindows::NCOM::CPropVariant::~CPropVariant
PUBLIC	??0CPropVariant@NCOM@NWindows@@QAE@XZ		; NWindows::NCOM::CPropVariant::CPropVariant
PUBLIC	?IsAesEncrypted@CLocalItem@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CLocalItem::IsAesEncrypted
PUBLIC	??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEAAVCItemEx@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CItemEx>::operator[]
PUBLIC	?IntToBool@@YG_NH@Z				; IntToBool
PUBLIC	??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CUpdateItem>::~CObjectVector<NArchive::NZip::CUpdateItem>
PUBLIC	??1CUpdateItem@NZip@NArchive@@QAE@XZ		; NArchive::NZip::CUpdateItem::~CUpdateItem
PUBLIC	??0CUpdateItem@NZip@NArchive@@QAE@XZ		; NArchive::NZip::CUpdateItem::CUpdateItem
PUBLIC	??0?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CUpdateItem>::CObjectVector<NArchive::NZip::CUpdateItem>
PUBLIC	?CanUpdate@CInArchive@NZip@NArchive@@QBE_NXZ	; NArchive::NZip::CInArchive::CanUpdate
PUBLIC	?IsOpen@CInArchive@NZip@NArchive@@QBE_NXZ	; NArchive::NZip::CInArchive::IsOpen
PUBLIC	?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z ; NArchive::NZip::CHandler::UpdateItems
PUBLIC	??_R0?AUCSystemException@@@8			; CSystemException `RTTI Type Descriptor'
EXTRN	?Update@NZip@NArchive@@YGJABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PAUISequentialOutStream@@PAVCInArchive@12@_NPAUCCompressionMethodMode@12@PAUIArchiveUpdateCallback@@@Z:PROC ; NArchive::NZip::Update
EXTRN	?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@I@Z:PROC ; UnicodeStringToMultiByte
EXTRN	??0UString@@QAE@PB_W@Z:PROC			; UString::UString
EXTRN	_IID_ICryptoGetTextPassword2:BYTE
EXTRN	?ConvertUnicodeToUTF8@@YGXABVUString@@AAVAString@@@Z:PROC ; ConvertUnicodeToUTF8
EXTRN	?MultiByteToUnicodeString@@YG?AVUString@@ABVAString@@I@Z:PROC ; MultiByteToUnicodeString
EXTRN	??4AString@@QAEAAV0@ABV0@@Z:PROC		; AString::operator=
EXTRN	?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@IDAA_N@Z:PROC ; UnicodeStringToMultiByte
EXTRN	??4UString@@QAEAAV0@ABV0@@Z:PROC		; UString::operator=
EXTRN	?MakeLegalName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z:PROC ; NArchive::NItemName::MakeLegalName
EXTRN	?FileTimeToDosTime@NTime@NWindows@@YG_NABU_FILETIME@@AAI@Z:PROC ; NWindows::NTime::FileTimeToDosTime
EXTRN	__imp__FileTimeToLocalFileTime@8:PROC
EXTRN	??4UString@@QAEAAV0@PB_W@Z:PROC			; UString::operator=
EXTRN	??0UString@@QAE@XZ:PROC				; UString::UString
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_R0?AUCSystemException@@@8
_DATA	SEGMENT
??_R0?AUCSystemException@@@8 DD FLAT:??_7type_info@@6B@	; CSystemException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUCSystemException@@', 00H
_DATA	ENDS
xdata$x	SEGMENT
__tryblocktable$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z DD 00H
	DD	011H
	DD	012H
	DD	02H
	DD	FLAT:__catchsym$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$20
__catchsym$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$20 DD 09H
	DD	FLAT:??_R0?AUCSystemException@@@8
	DD	0fffffddcH
	DD	FLAT:__catch$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$0
	DD	040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$1
__ehfuncinfo$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z DD 019930522H
	DD	013H
	DD	FLAT:__unwindtable$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$3
	DD	01H
	DD	FLAT:__unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$4
	DD	02H
	DD	FLAT:__unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$5
	DD	03H
	DD	FLAT:__unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$6
	DD	03H
	DD	FLAT:__unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$7
	DD	03H
	DD	FLAT:__unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$8
	DD	03H
	DD	FLAT:__unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$9
	DD	03H
	DD	FLAT:__unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$10
	DD	03H
	DD	FLAT:__unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$11
	DD	03H
	DD	FLAT:__unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$12
	DD	02H
	DD	FLAT:__unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$13
	DD	01H
	DD	FLAT:__unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$14
	DD	0cH
	DD	FLAT:__unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$15
	DD	0cH
	DD	FLAT:__unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$16
	DD	0eH
	DD	FLAT:__unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$17
	DD	0fH
	DD	FLAT:__unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$18
	DD	010H
	DD	FLAT:__unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$19
	DD	0ffffffffH
	DD	00H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv808 = -928						; size = 4
tv652 = -924						; size = 4
tv807 = -917						; size = 1
tv806 = -916						; size = 4
tv748 = -912						; size = 4
tv805 = -908						; size = 4
tv804 = -904						; size = 4
tv803 = -900						; size = 4
tv802 = -896						; size = 4
tv801 = -889						; size = 1
tv800 = -888						; size = 4
tv799 = -881						; size = 1
tv798 = -880						; size = 4
tv797 = -876						; size = 4
tv566 = -872						; size = 4
tv796 = -868						; size = 4
tv795 = -864						; size = 4
tv794 = -860						; size = 4
tv793 = -856						; size = 4
tv505 = -852						; size = 4
tv792 = -848						; size = 4
tv791 = -844						; size = 4
tv790 = -840						; size = 4
tv789 = -833						; size = 1
tv788 = -832						; size = 4
tv787 = -825						; size = 1
tv451 = -824						; size = 4
tv786 = -817						; size = 1
tv721 = -816						; size = 4
tv784 = -812						; size = 4
tv716 = -808						; size = 4
tv783 = -804						; size = 4
tv414 = -800						; size = 4
tv782 = -796						; size = 2
tv781 = -793						; size = 1
tv711 = -792						; size = 4
tv780 = -788						; size = 4
tv779 = -784						; size = 4
tv778 = -780						; size = 4
tv777 = -776						; size = 4
tv776 = -772						; size = 4
tv775 = -768						; size = 4
tv774 = -764						; size = 4
tv773 = -760						; size = 4
tv772 = -756						; size = 4
tv771 = -752						; size = 4
tv770 = -748						; size = 4
tv769 = -744						; size = 4
tv768 = -740						; size = 4
tv767 = -734						; size = 1
tv766 = -733						; size = 1
tv765 = -732						; size = 4
tv764 = -726						; size = 1
tv763 = -725						; size = 1
tv762 = -724						; size = 4
tv761 = -720						; size = 4
tv760 = -716						; size = 4
tv759 = -710						; size = 1
tv758 = -709						; size = 1
$T71929 = -708						; size = 4
$T71916 = -704						; size = 4
$T71915 = -700						; size = 4
$T71912 = -696						; size = 4
$T71911 = -692						; size = 4
$T71910 = -688						; size = 12
$T71909 = -676						; size = 12
$T71908 = -664						; size = 4
$T71907 = -660						; size = 4
$T71906 = -656						; size = 4
$T71905 = -652						; size = 4
$T71904 = -648						; size = 4
$T71900 = -644						; size = 12
$T71899 = -632						; size = 12
$T71896 = -620						; size = 4
$T71895 = -616						; size = 12
$T71894 = -604						; size = 4
$T71893 = -600						; size = 4
$T71892 = -596						; size = 4
$T71891 = -592						; size = 4
$T71890 = -588						; size = 4
$T71889 = -584						; size = 4
$T71888 = -580						; size = 4
$T71887 = -576						; size = 4
$T71886 = -572						; size = 4
$T71885 = -568						; size = 4
$T71884 = -564						; size = 4
$T71883 = -560						; size = 4
$T71882 = -556						; size = 4
_e$71263 = -548						; size = 4
_mainMethod$71256 = -537				; size = 1
___result__$71240 = -536				; size = 4
_passwordIsDefined$71239 = -528				; size = 4
_password$71238 = -516					; size = 4
_options$71235 = -504					; size = 72
_udateCallBack2$71230 = -424				; size = 4
_getTextPassword$71192 = -412				; size = 4
___result__$71148 = -404				; size = 4
_prop$71147 = -396					; size = 16
_size$71146 = -376					; size = 8
_defaultCharWasUsed$71138 = -361			; size = 1
_tryUtf8$71135 = -353					; size = 1
_codePage$71134 = -352					; size = 4
_kSlash$71127 = -348					; size = 2
_needSlash$71126 = -341					; size = 1
_localFileTime$71119 = -336				; size = 8
___result__$71116 = -324				; size = 4
___result__$71113 = -320				; size = 4
___result__$71110 = -316				; size = 4
___result__$71105 = -312				; size = 4
_prop$71104 = -304					; size = 16
___result__$71094 = -284				; size = 4
_prop$71093 = -276					; size = 16
___result__$71084 = -256				; size = 4
_prop$71083 = -248					; size = 16
___result__$71074 = -228				; size = 4
_prop$71073 = -220					; size = 16
_name$71072 = -196					; size = 12
_existInArchive$71066 = -177				; size = 1
___result__$71063 = -176				; size = 4
_indexInArchive$71059 = -168				; size = 4
_newProps$71058 = -156					; size = 4
_newData$71057 = -144					; size = 4
_ui$71056 = -132					; size = 72
_i$71052 = -56						; size = 4
_largestSizeDefined$71051 = -49				; size = 1
_largestSize$71050 = -48				; size = 8
_thereAreAesUpdates$71049 = -37				; size = 1
_updateItems$71048 = -32				; size = 12
__$EHRec$ = -16						; size = 16
_this$ = 8						; size = 4
_outStream$ = 12					; size = 4
_numItems$ = 16						; size = 4
_callback$ = 20						; size = 4
?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z PROC ; NArchive::NZip::CHandler::UpdateItems
; Line 68
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 912				; 00000390H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-928]
	mov	ecx, 228				; 000000e4H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR $T71929[ebp], 0
; Line 69
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 71
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	?IsOpen@CInArchive@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CInArchive::IsOpen
	mov	BYTE PTR tv758[ebp], al
	movzx	eax, BYTE PTR tv758[ebp]
	test	eax, eax
	je	SHORT $LN57@UpdateItem
; Line 73
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	?CanUpdate@CInArchive@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CInArchive::CanUpdate
	mov	BYTE PTR tv759[ebp], al
	movzx	ecx, BYTE PTR tv759[ebp]
	test	ecx, ecx
	jne	SHORT $LN57@UpdateItem
; Line 74
	mov	eax, -2147467263			; 80004001H
	jmp	$LN59@UpdateItem
$LN57@UpdateItem:
; Line 77
	lea	ecx, DWORD PTR _updateItems$71048[ebp]
	call	??0?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CUpdateItem>::CObjectVector<NArchive::NZip::CUpdateItem>
	mov	DWORD PTR tv760[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 1
; Line 78
	mov	BYTE PTR _thereAreAesUpdates$71049[ebp], 0
; Line 79
	mov	DWORD PTR _largestSize$71050[ebp], 0
	mov	DWORD PTR _largestSize$71050[ebp+4], 0
; Line 80
	mov	BYTE PTR _largestSizeDefined$71051[ebp], 0
; Line 82
	mov	DWORD PTR _i$71052[ebp], 0
	jmp	SHORT $LN55@UpdateItem
$LN54@UpdateItem:
	mov	edx, DWORD PTR _i$71052[ebp]
	add	edx, 1
	mov	DWORD PTR _i$71052[ebp], edx
$LN55@UpdateItem:
	mov	eax, DWORD PTR _i$71052[ebp]
	cmp	eax, DWORD PTR _numItems$[ebp]
	jae	$LN53@UpdateItem
; Line 84
	lea	ecx, DWORD PTR _ui$71056[ebp]
	call	??0CUpdateItem@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CUpdateItem::CUpdateItem
	mov	DWORD PTR tv761[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 2
; Line 88
	cmp	DWORD PTR _callback$[ebp], 0
	jne	SHORT $LN52@UpdateItem
; Line 89
	mov	DWORD PTR $T71882[ebp], -2147467259	; 80004005H
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _ui$71056[ebp]
	call	??1CUpdateItem@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _updateItems$71048[ebp]
	call	??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CUpdateItem>::~CObjectVector<NArchive::NZip::CUpdateItem>
	mov	eax, DWORD PTR $T71882[ebp]
	jmp	$LN59@UpdateItem
$LN52@UpdateItem:
; Line 90
	mov	esi, esp
	lea	ecx, DWORD PTR _indexInArchive$71059[ebp]
	push	ecx
	lea	edx, DWORD PTR _newProps$71058[ebp]
	push	edx
	lea	eax, DWORD PTR _newData$71057[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$71052[ebp]
	push	ecx
	mov	edx, DWORD PTR _callback$[ebp]
	push	edx
	mov	eax, DWORD PTR _callback$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv762[ebp], eax
	mov	eax, DWORD PTR tv762[ebp]
	mov	DWORD PTR ___result__$71063[ebp], eax
	cmp	DWORD PTR ___result__$71063[ebp], 0
	je	SHORT $LN51@UpdateItem
	mov	ecx, DWORD PTR ___result__$71063[ebp]
	mov	DWORD PTR $T71883[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _ui$71056[ebp]
	call	??1CUpdateItem@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _updateItems$71048[ebp]
	call	??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CUpdateItem>::~CObjectVector<NArchive::NZip::CUpdateItem>
	mov	eax, DWORD PTR $T71883[ebp]
	jmp	$LN59@UpdateItem
$LN51@UpdateItem:
; Line 91
	mov	edx, DWORD PTR _newProps$71058[ebp]
	push	edx
	call	?IntToBool@@YG_NH@Z			; IntToBool
	mov	BYTE PTR tv763[ebp], al
	mov	al, BYTE PTR tv763[ebp]
	mov	BYTE PTR _ui$71056[ebp+1], al
; Line 92
	mov	ecx, DWORD PTR _newData$71057[ebp]
	push	ecx
	call	?IntToBool@@YG_NH@Z			; IntToBool
	mov	BYTE PTR tv764[ebp], al
	mov	dl, BYTE PTR tv764[ebp]
	mov	BYTE PTR _ui$71056[ebp], dl
; Line 93
	mov	eax, DWORD PTR _indexInArchive$71059[ebp]
	mov	DWORD PTR _ui$71056[ebp+8], eax
; Line 94
	mov	ecx, DWORD PTR _i$71052[ebp]
	mov	DWORD PTR _ui$71056[ebp+12], ecx
; Line 95
	xor	edx, edx
	cmp	DWORD PTR _indexInArchive$71059[ebp], -1
	setne	dl
	mov	BYTE PTR _existInArchive$71066[ebp], dl
; Line 96
	movzx	eax, BYTE PTR _existInArchive$71066[ebp]
	test	eax, eax
	je	SHORT $LN50@UpdateItem
	cmp	DWORD PTR _newData$71057[ebp], 0
	je	SHORT $LN50@UpdateItem
; Line 97
	mov	ecx, DWORD PTR _indexInArchive$71059[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEAAVCItemEx@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CItemEx>::operator[]
	mov	DWORD PTR tv765[ebp], eax
	mov	ecx, DWORD PTR tv765[ebp]
	call	?IsAesEncrypted@CLocalItem@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CLocalItem::IsAesEncrypted
	mov	BYTE PTR tv766[ebp], al
	movzx	edx, BYTE PTR tv766[ebp]
	test	edx, edx
	je	SHORT $LN50@UpdateItem
; Line 98
	mov	BYTE PTR _thereAreAesUpdates$71049[ebp], 1
$LN50@UpdateItem:
; Line 100
	mov	eax, DWORD PTR _newProps$71058[ebp]
	push	eax
	call	?IntToBool@@YG_NH@Z			; IntToBool
	mov	BYTE PTR tv767[ebp], al
	movzx	ecx, BYTE PTR tv767[ebp]
	test	ecx, ecx
	je	$LN48@UpdateItem
; Line 102
	lea	ecx, DWORD PTR _name$71072[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR tv768[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 3
; Line 104
	lea	ecx, DWORD PTR _prop$71073[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
	mov	DWORD PTR tv769[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 4
; Line 105
	mov	esi, esp
	lea	edx, DWORD PTR _prop$71073[ebp]
	push	edx
	push	9
	mov	eax, DWORD PTR _i$71052[ebp]
	push	eax
	mov	ecx, DWORD PTR _callback$[ebp]
	push	ecx
	mov	edx, DWORD PTR _callback$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv770[ebp], eax
	mov	edx, DWORD PTR tv770[ebp]
	mov	DWORD PTR ___result__$71074[ebp], edx
	cmp	DWORD PTR ___result__$71074[ebp], 0
	je	SHORT $LN47@UpdateItem
	mov	eax, DWORD PTR ___result__$71074[ebp]
	mov	DWORD PTR $T71884[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _prop$71073[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _name$71072[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _ui$71056[ebp]
	call	??1CUpdateItem@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _updateItems$71048[ebp]
	call	??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CUpdateItem>::~CObjectVector<NArchive::NZip::CUpdateItem>
	mov	eax, DWORD PTR $T71884[ebp]
	jmp	$LN59@UpdateItem
$LN47@UpdateItem:
; Line 106
	movzx	ecx, WORD PTR _prop$71073[ebp]
	test	ecx, ecx
	jne	SHORT $LN46@UpdateItem
; Line 107
	mov	DWORD PTR _ui$71056[ebp+16], 0
	jmp	SHORT $LN45@UpdateItem
$LN46@UpdateItem:
; Line 108
	movzx	edx, WORD PTR _prop$71073[ebp]
	cmp	edx, 19					; 00000013H
	je	SHORT $LN44@UpdateItem
; Line 109
	mov	DWORD PTR $T71885[ebp], -2147024809	; 80070057H
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _prop$71073[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _name$71072[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _ui$71056[ebp]
	call	??1CUpdateItem@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _updateItems$71048[ebp]
	call	??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CUpdateItem>::~CObjectVector<NArchive::NZip::CUpdateItem>
	mov	eax, DWORD PTR $T71885[ebp]
	jmp	$LN59@UpdateItem
; Line 110
	jmp	SHORT $LN45@UpdateItem
$LN44@UpdateItem:
; Line 111
	mov	eax, DWORD PTR _prop$71073[ebp+8]
	mov	DWORD PTR _ui$71056[ebp+16], eax
$LN45@UpdateItem:
; Line 112
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _prop$71073[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
; Line 115
	lea	ecx, DWORD PTR _prop$71083[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
	mov	DWORD PTR tv771[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 5
; Line 116
	mov	esi, esp
	lea	ecx, DWORD PTR _prop$71083[ebp]
	push	ecx
	push	3
	mov	edx, DWORD PTR _i$71052[ebp]
	push	edx
	mov	eax, DWORD PTR _callback$[ebp]
	push	eax
	mov	ecx, DWORD PTR _callback$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv772[ebp], eax
	mov	ecx, DWORD PTR tv772[ebp]
	mov	DWORD PTR ___result__$71084[ebp], ecx
	cmp	DWORD PTR ___result__$71084[ebp], 0
	je	SHORT $LN42@UpdateItem
	mov	edx, DWORD PTR ___result__$71084[ebp]
	mov	DWORD PTR $T71886[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _prop$71083[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _name$71072[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _ui$71056[ebp]
	call	??1CUpdateItem@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _updateItems$71048[ebp]
	call	??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CUpdateItem>::~CObjectVector<NArchive::NZip::CUpdateItem>
	mov	eax, DWORD PTR $T71886[ebp]
	jmp	$LN59@UpdateItem
$LN42@UpdateItem:
; Line 117
	movzx	eax, WORD PTR _prop$71083[ebp]
	test	eax, eax
	jne	SHORT $LN41@UpdateItem
; Line 118
	lea	ecx, DWORD PTR _name$71072[ebp]
	call	?Empty@UString@@QAEXXZ			; UString::Empty
	jmp	SHORT $LN40@UpdateItem
$LN41@UpdateItem:
; Line 119
	movzx	ecx, WORD PTR _prop$71083[ebp]
	cmp	ecx, 8
	je	SHORT $LN39@UpdateItem
; Line 120
	mov	DWORD PTR $T71887[ebp], -2147024809	; 80070057H
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _prop$71083[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _name$71072[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _ui$71056[ebp]
	call	??1CUpdateItem@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _updateItems$71048[ebp]
	call	??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CUpdateItem>::~CObjectVector<NArchive::NZip::CUpdateItem>
	mov	eax, DWORD PTR $T71887[ebp]
	jmp	$LN59@UpdateItem
; Line 121
	jmp	SHORT $LN40@UpdateItem
$LN39@UpdateItem:
; Line 122
	mov	edx, DWORD PTR _prop$71083[ebp+8]
	push	edx
	lea	ecx, DWORD PTR _name$71072[ebp]
	call	??4UString@@QAEAAV0@PB_W@Z		; UString::operator=
$LN40@UpdateItem:
; Line 123
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _prop$71083[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
; Line 125
	lea	ecx, DWORD PTR _prop$71093[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
	mov	DWORD PTR tv773[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 6
; Line 126
	mov	esi, esp
	lea	eax, DWORD PTR _prop$71093[ebp]
	push	eax
	push	6
	mov	ecx, DWORD PTR _i$71052[ebp]
	push	ecx
	mov	edx, DWORD PTR _callback$[ebp]
	push	edx
	mov	eax, DWORD PTR _callback$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv774[ebp], eax
	mov	eax, DWORD PTR tv774[ebp]
	mov	DWORD PTR ___result__$71094[ebp], eax
	cmp	DWORD PTR ___result__$71094[ebp], 0
	je	SHORT $LN37@UpdateItem
	mov	ecx, DWORD PTR ___result__$71094[ebp]
	mov	DWORD PTR $T71888[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _prop$71093[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _name$71072[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _ui$71056[ebp]
	call	??1CUpdateItem@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _updateItems$71048[ebp]
	call	??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CUpdateItem>::~CObjectVector<NArchive::NZip::CUpdateItem>
	mov	eax, DWORD PTR $T71888[ebp]
	jmp	$LN59@UpdateItem
$LN37@UpdateItem:
; Line 127
	movzx	edx, WORD PTR _prop$71093[ebp]
	test	edx, edx
	jne	SHORT $LN36@UpdateItem
; Line 128
	mov	BYTE PTR _ui$71056[ebp+2], 0
	jmp	SHORT $LN35@UpdateItem
$LN36@UpdateItem:
; Line 129
	movzx	eax, WORD PTR _prop$71093[ebp]
	cmp	eax, 11					; 0000000bH
	je	SHORT $LN34@UpdateItem
; Line 130
	mov	DWORD PTR $T71889[ebp], -2147024809	; 80070057H
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _prop$71093[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _name$71072[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _ui$71056[ebp]
	call	??1CUpdateItem@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _updateItems$71048[ebp]
	call	??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CUpdateItem>::~CObjectVector<NArchive::NZip::CUpdateItem>
	mov	eax, DWORD PTR $T71889[ebp]
	jmp	$LN59@UpdateItem
; Line 131
	jmp	SHORT $LN35@UpdateItem
$LN34@UpdateItem:
; Line 132
	movsx	ecx, WORD PTR _prop$71093[ebp+8]
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	mov	BYTE PTR _ui$71056[ebp+2], cl
$LN35@UpdateItem:
; Line 133
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _prop$71093[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
; Line 136
	lea	ecx, DWORD PTR _prop$71104[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
	mov	DWORD PTR tv775[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 7
; Line 137
	mov	esi, esp
	lea	edx, DWORD PTR _prop$71104[ebp]
	push	edx
	push	40					; 00000028H
	mov	eax, DWORD PTR _i$71052[ebp]
	push	eax
	mov	ecx, DWORD PTR _callback$[ebp]
	push	ecx
	mov	edx, DWORD PTR _callback$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv776[ebp], eax
	mov	edx, DWORD PTR tv776[ebp]
	mov	DWORD PTR ___result__$71105[ebp], edx
	cmp	DWORD PTR ___result__$71105[ebp], 0
	je	SHORT $LN32@UpdateItem
	mov	eax, DWORD PTR ___result__$71105[ebp]
	mov	DWORD PTR $T71890[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _prop$71104[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _name$71072[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _ui$71056[ebp]
	call	??1CUpdateItem@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _updateItems$71048[ebp]
	call	??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CUpdateItem>::~CObjectVector<NArchive::NZip::CUpdateItem>
	mov	eax, DWORD PTR $T71890[ebp]
	jmp	$LN59@UpdateItem
$LN32@UpdateItem:
; Line 138
	movzx	ecx, WORD PTR _prop$71104[ebp]
	cmp	ecx, 19					; 00000013H
	jne	SHORT $LN31@UpdateItem
; Line 139
	xor	edx, edx
	cmp	DWORD PTR _prop$71104[ebp+8], 0
	sete	dl
	mov	BYTE PTR _ui$71056[ebp+3], dl
; Line 140
	jmp	SHORT $LN30@UpdateItem
$LN31@UpdateItem:
; Line 141
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+193]
	mov	BYTE PTR _ui$71056[ebp+3], cl
$LN30@UpdateItem:
; Line 142
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _prop$71104[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
; Line 143
	lea	edx, DWORD PTR _ui$71056[ebp+44]
	push	edx
	push	12					; 0000000cH
	mov	eax, DWORD PTR _i$71052[ebp]
	push	eax
	mov	ecx, DWORD PTR _callback$[ebp]
	push	ecx
	call	?GetTime@NZip@NArchive@@YGJPAUIArchiveUpdateCallback@@HKAAU_FILETIME@@@Z ; NArchive::NZip::GetTime
	mov	DWORD PTR tv777[ebp], eax
	mov	edx, DWORD PTR tv777[ebp]
	mov	DWORD PTR ___result__$71110[ebp], edx
	cmp	DWORD PTR ___result__$71110[ebp], 0
	je	SHORT $LN29@UpdateItem
	mov	eax, DWORD PTR ___result__$71110[ebp]
	mov	DWORD PTR $T71891[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _name$71072[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _ui$71056[ebp]
	call	??1CUpdateItem@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _updateItems$71048[ebp]
	call	??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CUpdateItem>::~CObjectVector<NArchive::NZip::CUpdateItem>
	mov	eax, DWORD PTR $T71891[ebp]
	jmp	$LN59@UpdateItem
$LN29@UpdateItem:
; Line 144
	lea	ecx, DWORD PTR _ui$71056[ebp+52]
	push	ecx
	push	11					; 0000000bH
	mov	edx, DWORD PTR _i$71052[ebp]
	push	edx
	mov	eax, DWORD PTR _callback$[ebp]
	push	eax
	call	?GetTime@NZip@NArchive@@YGJPAUIArchiveUpdateCallback@@HKAAU_FILETIME@@@Z ; NArchive::NZip::GetTime
	mov	DWORD PTR tv778[ebp], eax
	mov	ecx, DWORD PTR tv778[ebp]
	mov	DWORD PTR ___result__$71113[ebp], ecx
	cmp	DWORD PTR ___result__$71113[ebp], 0
	je	SHORT $LN28@UpdateItem
	mov	edx, DWORD PTR ___result__$71113[ebp]
	mov	DWORD PTR $T71892[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _name$71072[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _ui$71056[ebp]
	call	??1CUpdateItem@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _updateItems$71048[ebp]
	call	??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CUpdateItem>::~CObjectVector<NArchive::NZip::CUpdateItem>
	mov	eax, DWORD PTR $T71892[ebp]
	jmp	$LN59@UpdateItem
$LN28@UpdateItem:
; Line 145
	lea	eax, DWORD PTR _ui$71056[ebp+60]
	push	eax
	push	10					; 0000000aH
	mov	ecx, DWORD PTR _i$71052[ebp]
	push	ecx
	mov	edx, DWORD PTR _callback$[ebp]
	push	edx
	call	?GetTime@NZip@NArchive@@YGJPAUIArchiveUpdateCallback@@HKAAU_FILETIME@@@Z ; NArchive::NZip::GetTime
	mov	DWORD PTR tv779[ebp], eax
	mov	eax, DWORD PTR tv779[ebp]
	mov	DWORD PTR ___result__$71116[ebp], eax
	cmp	DWORD PTR ___result__$71116[ebp], 0
	je	SHORT $LN27@UpdateItem
	mov	ecx, DWORD PTR ___result__$71116[ebp]
	mov	DWORD PTR $T71893[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _name$71072[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _ui$71056[ebp]
	call	??1CUpdateItem@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _updateItems$71048[ebp]
	call	??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CUpdateItem>::~CObjectVector<NArchive::NZip::CUpdateItem>
	mov	eax, DWORD PTR $T71893[ebp]
	jmp	$LN59@UpdateItem
$LN27@UpdateItem:
; Line 148
	mov	DWORD PTR _localFileTime$71119[ebp], 0
	mov	DWORD PTR _localFileTime$71119[ebp+4], 0
; Line 150
	cmp	DWORD PTR _ui$71056[ebp+48], 0
	jne	SHORT $LN25@UpdateItem
	cmp	DWORD PTR _ui$71056[ebp+44], 0
	je	SHORT $LN26@UpdateItem
$LN25@UpdateItem:
; Line 151
	mov	esi, esp
	lea	edx, DWORD PTR _localFileTime$71119[ebp]
	push	edx
	lea	eax, DWORD PTR _ui$71056[ebp+44]
	push	eax
	call	DWORD PTR __imp__FileTimeToLocalFileTime@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN26@UpdateItem
; Line 152
	mov	DWORD PTR $T71894[ebp], -2147024809	; 80070057H
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _name$71072[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _ui$71056[ebp]
	call	??1CUpdateItem@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _updateItems$71048[ebp]
	call	??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CUpdateItem>::~CObjectVector<NArchive::NZip::CUpdateItem>
	mov	eax, DWORD PTR $T71894[ebp]
	jmp	$LN59@UpdateItem
$LN26@UpdateItem:
; Line 153
	lea	ecx, DWORD PTR _ui$71056[ebp+20]
	push	ecx
	lea	edx, DWORD PTR _localFileTime$71119[ebp]
	push	edx
	call	?FileTimeToDosTime@NTime@NWindows@@YG_NABU_FILETIME@@AAI@Z ; NWindows::NTime::FileTimeToDosTime
; Line 156
	lea	eax, DWORD PTR _name$71072[ebp]
	push	eax
	lea	ecx, DWORD PTR $T71895[ebp]
	push	ecx
	call	?MakeLegalName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z ; NArchive::NItemName::MakeLegalName
	mov	DWORD PTR tv780[ebp], eax
	mov	edx, DWORD PTR tv780[ebp]
	mov	DWORD PTR tv711[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 8
	mov	eax, DWORD PTR tv711[ebp]
	push	eax
	lea	ecx, DWORD PTR _name$71072[ebp]
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR $T71895[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
; Line 157
	mov	cl, BYTE PTR _ui$71056[ebp+2]
	mov	BYTE PTR _needSlash$71126[ebp], cl
; Line 158
	mov	edx, 47					; 0000002fH
	mov	WORD PTR _kSlash$71127[ebp], dx
; Line 159
	lea	ecx, DWORD PTR _name$71072[ebp]
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	mov	BYTE PTR tv781[ebp], al
	movzx	eax, BYTE PTR tv781[ebp]
	test	eax, eax
	jne	SHORT $LN23@UpdateItem
; Line 161
	lea	ecx, DWORD PTR _name$71072[ebp]
	call	?Back@UString@@QBE_WXZ			; UString::Back
	mov	WORD PTR tv782[ebp], ax
	movzx	ecx, WORD PTR tv782[ebp]
	cmp	ecx, 47					; 0000002fH
	jne	SHORT $LN23@UpdateItem
; Line 163
	movzx	edx, BYTE PTR _ui$71056[ebp+2]
	test	edx, edx
	jne	SHORT $LN21@UpdateItem
; Line 164
	mov	DWORD PTR $T71896[ebp], -2147024809	; 80070057H
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _name$71072[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _ui$71056[ebp]
	call	??1CUpdateItem@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _updateItems$71048[ebp]
	call	??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CUpdateItem>::~CObjectVector<NArchive::NZip::CUpdateItem>
	mov	eax, DWORD PTR $T71896[ebp]
	jmp	$LN59@UpdateItem
$LN21@UpdateItem:
; Line 165
	mov	BYTE PTR _needSlash$71126[ebp], 0
$LN23@UpdateItem:
; Line 168
	movzx	eax, BYTE PTR _needSlash$71126[ebp]
	test	eax, eax
	je	SHORT $LN20@UpdateItem
; Line 169
	push	47					; 0000002fH
	lea	ecx, DWORD PTR _name$71072[ebp]
	call	??YUString@@QAEAAV0@_W@Z		; UString::operator+=
$LN20@UpdateItem:
; Line 171
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+197]
	test	edx, edx
	je	SHORT $LN61@UpdateItem
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+200]
	mov	DWORD PTR tv414[ebp], ecx
	jmp	SHORT $LN62@UpdateItem
$LN61@UpdateItem:
	mov	DWORD PTR tv414[ebp], 1
$LN62@UpdateItem:
	mov	edx, DWORD PTR tv414[ebp]
	mov	DWORD PTR _codePage$71134[ebp], edx
; Line 173
	mov	BYTE PTR _tryUtf8$71135[ebp], 1
; Line 174
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+195]
	test	ecx, ecx
	jne	SHORT $LN18@UpdateItem
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+196]
	test	eax, eax
	jne	$LN19@UpdateItem
$LN18@UpdateItem:
	cmp	DWORD PTR _codePage$71134[ebp], 65001	; 0000fde9H
	je	$LN19@UpdateItem
; Line 177
	lea	ecx, DWORD PTR _defaultCharWasUsed$71138[ebp]
	push	ecx
	push	95					; 0000005fH
	mov	edx, DWORD PTR _codePage$71134[ebp]
	push	edx
	lea	eax, DWORD PTR _name$71072[ebp]
	push	eax
	lea	ecx, DWORD PTR $T71899[ebp]
	push	ecx
	call	?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@IDAA_N@Z ; UnicodeStringToMultiByte
	mov	DWORD PTR tv783[ebp], eax
	mov	edx, DWORD PTR tv783[ebp]
	mov	DWORD PTR tv716[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 9
	mov	eax, DWORD PTR tv716[ebp]
	push	eax
	lea	ecx, DWORD PTR _ui$71056[ebp+32]
	call	??4AString@@QAEAAV0@ABV0@@Z		; AString::operator=
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR $T71899[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
; Line 179
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+195]
	test	edx, edx
	jne	SHORT $LN64@UpdateItem
	movzx	eax, BYTE PTR _defaultCharWasUsed$71138[ebp]
	test	eax, eax
	jne	SHORT $LN63@UpdateItem
	mov	ecx, DWORD PTR _codePage$71134[ebp]
	push	ecx
	lea	edx, DWORD PTR _ui$71056[ebp+32]
	push	edx
	lea	eax, DWORD PTR $T71900[ebp]
	push	eax
	call	?MultiByteToUnicodeString@@YG?AVUString@@ABVAString@@I@Z ; MultiByteToUnicodeString
	mov	DWORD PTR tv784[ebp], eax
	mov	ecx, DWORD PTR tv784[ebp]
	mov	DWORD PTR tv721[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 10		; 0000000aH
	mov	edx, DWORD PTR $T71929[ebp]
	or	edx, 1
	mov	DWORD PTR $T71929[ebp], edx
	lea	eax, DWORD PTR _name$71072[ebp]
	push	eax
	mov	ecx, DWORD PTR tv721[ebp]
	push	ecx
	call	??9@YG_NABVUString@@0@Z			; operator!=
	mov	BYTE PTR tv786[ebp], al
	movzx	edx, BYTE PTR tv786[ebp]
	test	edx, edx
	je	SHORT $LN64@UpdateItem
$LN63@UpdateItem:
	mov	DWORD PTR tv451[ebp], 1
	jmp	SHORT $LN65@UpdateItem
$LN64@UpdateItem:
	mov	DWORD PTR tv451[ebp], 0
$LN65@UpdateItem:
	mov	al, BYTE PTR tv451[ebp]
	mov	BYTE PTR _tryUtf8$71135[ebp], al
	mov	DWORD PTR __$EHRec$[ebp+12], 3
	mov	ecx, DWORD PTR $T71929[ebp]
	and	ecx, 1
	je	SHORT $LN19@UpdateItem
	and	DWORD PTR $T71929[ebp], -2		; fffffffeH
	lea	ecx, DWORD PTR $T71900[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
$LN19@UpdateItem:
; Line 182
	movzx	edx, BYTE PTR _tryUtf8$71135[ebp]
	test	edx, edx
	je	SHORT $LN17@UpdateItem
; Line 184
	lea	ecx, DWORD PTR _name$71072[ebp]
	call	?IsAscii@UString@@QBE_NXZ		; UString::IsAscii
	mov	BYTE PTR tv787[ebp], al
	movzx	eax, BYTE PTR tv787[ebp]
	neg	eax
	sbb	eax, eax
	add	eax, 1
	mov	BYTE PTR _ui$71056[ebp+4], al
; Line 185
	lea	ecx, DWORD PTR _ui$71056[ebp+32]
	push	ecx
	lea	edx, DWORD PTR _name$71072[ebp]
	push	edx
	call	?ConvertUnicodeToUTF8@@YGXABVUString@@AAVAString@@@Z ; ConvertUnicodeToUTF8
$LN17@UpdateItem:
; Line 188
	lea	ecx, DWORD PTR _ui$71056[ebp+32]
	call	?Len@AString@@QBEIXZ			; AString::Len
	mov	DWORD PTR tv788[ebp], eax
	cmp	DWORD PTR tv788[ebp], 65536		; 00010000H
	jb	SHORT $LN16@UpdateItem
; Line 189
	mov	DWORD PTR $T71904[ebp], -2147024809	; 80070057H
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _name$71072[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _ui$71056[ebp]
	call	??1CUpdateItem@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _updateItems$71048[ebp]
	call	??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CUpdateItem>::~CObjectVector<NArchive::NZip::CUpdateItem>
	mov	eax, DWORD PTR $T71904[ebp]
	jmp	$LN59@UpdateItem
$LN16@UpdateItem:
; Line 191
	mov	eax, DWORD PTR _i$71052[ebp]
	mov	DWORD PTR _ui$71056[ebp+12], eax
; Line 207
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _name$71072[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
$LN48@UpdateItem:
; Line 208
	mov	ecx, DWORD PTR _newData$71057[ebp]
	push	ecx
	call	?IntToBool@@YG_NH@Z			; IntToBool
	mov	BYTE PTR tv789[ebp], al
	movzx	edx, BYTE PTR tv789[ebp]
	test	edx, edx
	je	$LN15@UpdateItem
; Line 212
	lea	ecx, DWORD PTR _prop$71147[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
	mov	DWORD PTR tv790[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 11		; 0000000bH
; Line 213
	mov	esi, esp
	lea	eax, DWORD PTR _prop$71147[ebp]
	push	eax
	push	7
	mov	ecx, DWORD PTR _i$71052[ebp]
	push	ecx
	mov	edx, DWORD PTR _callback$[ebp]
	push	edx
	mov	eax, DWORD PTR _callback$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv791[ebp], eax
	mov	eax, DWORD PTR tv791[ebp]
	mov	DWORD PTR ___result__$71148[ebp], eax
	cmp	DWORD PTR ___result__$71148[ebp], 0
	je	SHORT $LN14@UpdateItem
	mov	ecx, DWORD PTR ___result__$71148[ebp]
	mov	DWORD PTR $T71905[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _prop$71147[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _ui$71056[ebp]
	call	??1CUpdateItem@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _updateItems$71048[ebp]
	call	??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CUpdateItem>::~CObjectVector<NArchive::NZip::CUpdateItem>
	mov	eax, DWORD PTR $T71905[ebp]
	jmp	$LN59@UpdateItem
$LN14@UpdateItem:
; Line 214
	movzx	edx, WORD PTR _prop$71147[ebp]
	cmp	edx, 21					; 00000015H
	je	SHORT $LN13@UpdateItem
; Line 215
	mov	DWORD PTR $T71906[ebp], -2147024809	; 80070057H
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _prop$71147[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _ui$71056[ebp]
	call	??1CUpdateItem@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _updateItems$71048[ebp]
	call	??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CUpdateItem>::~CObjectVector<NArchive::NZip::CUpdateItem>
	mov	eax, DWORD PTR $T71906[ebp]
	jmp	$LN59@UpdateItem
$LN13@UpdateItem:
; Line 216
	mov	eax, DWORD PTR _prop$71147[ebp+8]
	mov	DWORD PTR _size$71146[ebp], eax
	mov	ecx, DWORD PTR _prop$71147[ebp+12]
	mov	DWORD PTR _size$71146[ebp+4], ecx
; Line 217
	mov	edx, DWORD PTR _largestSize$71050[ebp+4]
	cmp	edx, DWORD PTR _size$71146[ebp+4]
	ja	SHORT $LN12@UpdateItem
	jb	SHORT $LN96@UpdateItem
	mov	eax, DWORD PTR _largestSize$71050[ebp]
	cmp	eax, DWORD PTR _size$71146[ebp]
	jae	SHORT $LN12@UpdateItem
$LN96@UpdateItem:
; Line 218
	mov	ecx, DWORD PTR _size$71146[ebp]
	mov	DWORD PTR _largestSize$71050[ebp], ecx
	mov	edx, DWORD PTR _size$71146[ebp+4]
	mov	DWORD PTR _largestSize$71050[ebp+4], edx
$LN12@UpdateItem:
; Line 219
	mov	BYTE PTR _largestSizeDefined$71051[ebp], 1
; Line 220
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _prop$71147[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
; Line 221
	mov	eax, DWORD PTR _size$71146[ebp]
	mov	DWORD PTR _ui$71056[ebp+24], eax
	mov	ecx, DWORD PTR _size$71146[ebp+4]
	mov	DWORD PTR _ui$71056[ebp+28], ecx
$LN15@UpdateItem:
; Line 224
	lea	edx, DWORD PTR _ui$71056[ebp]
	push	edx
	lea	ecx, DWORD PTR _updateItems$71048[ebp]
	call	?Add@?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAEIABUCUpdateItem@NZip@NArchive@@@Z ; CObjectVector<NArchive::NZip::CUpdateItem>::Add
; Line 225
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _ui$71056[ebp]
	call	??1CUpdateItem@NZip@NArchive@@QAE@XZ
	jmp	$LN54@UpdateItem
$LN53@UpdateItem:
; Line 227
	lea	ecx, DWORD PTR _getTextPassword$71192[ebp]
	call	??0?$CMyComPtr@UICryptoGetTextPassword2@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword2>::CMyComPtr<ICryptoGetTextPassword2>
	mov	DWORD PTR tv792[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
; Line 229
	mov	eax, DWORD PTR _callback$[ebp]
	push	eax
	lea	ecx, DWORD PTR _udateCallBack2$71230[ebp]
	call	??0?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@PAUIArchiveUpdateCallback@@@Z ; CMyComPtr<IArchiveUpdateCallback>::CMyComPtr<IArchiveUpdateCallback>
	mov	BYTE PTR __$EHRec$[ebp+12], 13		; 0000000dH
; Line 230
	lea	ecx, DWORD PTR _getTextPassword$71192[ebp]
	call	??I?$CMyComPtr@UICryptoGetTextPassword2@@@@QAEPAPAUICryptoGetTextPassword2@@XZ ; CMyComPtr<ICryptoGetTextPassword2>::operator&
	mov	DWORD PTR tv505[ebp], eax
	mov	ecx, DWORD PTR tv505[ebp]
	push	ecx
	push	OFFSET _IID_ICryptoGetTextPassword2
	lea	ecx, DWORD PTR _udateCallBack2$71230[ebp]
	call	??$QueryInterface@UICryptoGetTextPassword2@@@?$CMyComPtr@UIArchiveUpdateCallback@@@@QBEJABU_GUID@@PAPAUICryptoGetTextPassword2@@@Z ; CMyComPtr<IArchiveUpdateCallback>::QueryInterface<ICryptoGetTextPassword2>
; Line 231
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR _udateCallBack2$71230[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallback>::~CMyComPtr<IArchiveUpdateCallback>
; Line 232
	lea	ecx, DWORD PTR _options$71235[ebp]
	call	??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ ; NArchive::NZip::CCompressionMethodMode::CCompressionMethodMode
	mov	DWORD PTR tv793[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 14		; 0000000eH
; Line 233
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 164				; 000000a4H
	push	edx
	lea	ecx, DWORD PTR _options$71235[ebp]
	call	??4CBaseProps@NZip@NArchive@@QAEAAU012@ABU012@@Z
; Line 234
	mov	eax, DWORD PTR _largestSize$71050[ebp]
	mov	DWORD PTR _options$71235[ebp+56], eax
	mov	ecx, DWORD PTR _largestSize$71050[ebp+4]
	mov	DWORD PTR _options$71235[ebp+60], ecx
; Line 235
	mov	dl, BYTE PTR _largestSizeDefined$71051[ebp]
	mov	BYTE PTR _options$71235[ebp+64], dl
; Line 237
	mov	BYTE PTR _options$71235[ebp+36], 0
; Line 238
	lea	ecx, DWORD PTR _options$71235[ebp+40]
	call	?Empty@AString@@QAEXXZ			; AString::Empty
; Line 239
	lea	ecx, DWORD PTR _getTextPassword$71192[ebp]
	call	??B?$CMyComPtr@UICryptoGetTextPassword2@@@@QBEPAUICryptoGetTextPassword2@@XZ ; CMyComPtr<ICryptoGetTextPassword2>::operator ICryptoGetTextPassword2 *
	mov	DWORD PTR tv794[ebp], eax
	cmp	DWORD PTR tv794[ebp], 0
	je	$LN11@UpdateItem
; Line 241
	lea	ecx, DWORD PTR _password$71238[ebp]
	call	??0CMyComBSTR@@QAE@XZ			; CMyComBSTR::CMyComBSTR
	mov	DWORD PTR tv795[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 15		; 0000000fH
; Line 243
	lea	ecx, DWORD PTR _getTextPassword$71192[ebp]
	call	??C?$CMyComPtr@UICryptoGetTextPassword2@@@@QBEPAUICryptoGetTextPassword2@@XZ ; CMyComPtr<ICryptoGetTextPassword2>::operator->
	mov	DWORD PTR tv796[ebp], eax
	mov	eax, DWORD PTR tv796[ebp]
	mov	DWORD PTR tv566[ebp], eax
	lea	ecx, DWORD PTR _password$71238[ebp]
	call	??ICMyComBSTR@@QAEPAPA_WXZ		; CMyComBSTR::operator&
	mov	DWORD PTR tv797[ebp], eax
	mov	esi, esp
	mov	ecx, DWORD PTR tv797[ebp]
	push	ecx
	lea	edx, DWORD PTR _passwordIsDefined$71239[ebp]
	push	edx
	mov	eax, DWORD PTR tv566[ebp]
	push	eax
	mov	ecx, DWORD PTR tv566[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv798[ebp], eax
	mov	ecx, DWORD PTR tv798[ebp]
	mov	DWORD PTR ___result__$71240[ebp], ecx
	cmp	DWORD PTR ___result__$71240[ebp], 0
	je	SHORT $LN10@UpdateItem
	mov	edx, DWORD PTR ___result__$71240[ebp]
	mov	DWORD PTR $T71907[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 14		; 0000000eH
	lea	ecx, DWORD PTR _password$71238[ebp]
	call	??1CMyComBSTR@@QAE@XZ			; CMyComBSTR::~CMyComBSTR
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR _options$71235[ebp]
	call	??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _getTextPassword$71192[ebp]
	call	??1?$CMyComPtr@UICryptoGetTextPassword2@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword2>::~CMyComPtr<ICryptoGetTextPassword2>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _updateItems$71048[ebp]
	call	??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CUpdateItem>::~CObjectVector<NArchive::NZip::CUpdateItem>
	mov	eax, DWORD PTR $T71907[ebp]
	jmp	$LN59@UpdateItem
$LN10@UpdateItem:
; Line 244
	mov	eax, DWORD PTR _passwordIsDefined$71239[ebp]
	push	eax
	call	?IntToBool@@YG_NH@Z			; IntToBool
	mov	BYTE PTR tv799[ebp], al
	mov	cl, BYTE PTR tv799[ebp]
	mov	BYTE PTR _options$71235[ebp+36], cl
; Line 245
	movzx	edx, BYTE PTR _options$71235[ebp+36]
	test	edx, edx
	je	$LN9@UpdateItem
; Line 247
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+192]
	test	ecx, ecx
	jne	SHORT $LN8@UpdateItem
; Line 248
	mov	dl, BYTE PTR _thereAreAesUpdates$71049[ebp]
	mov	BYTE PTR _options$71235[ebp+21], dl
$LN8@UpdateItem:
; Line 250
	lea	ecx, DWORD PTR _password$71238[ebp]
	call	??BCMyComBSTR@@QBEPB_WXZ		; CMyComBSTR::operator wchar_t const *
	mov	DWORD PTR tv800[ebp], eax
	mov	eax, DWORD PTR tv800[ebp]
	push	eax
	call	?IsSimpleAsciiString@NZip@NArchive@@YG_NPB_W@Z ; NArchive::NZip::IsSimpleAsciiString
	mov	BYTE PTR tv801[ebp], al
	movzx	ecx, BYTE PTR tv801[ebp]
	test	ecx, ecx
	jne	SHORT $LN7@UpdateItem
; Line 251
	mov	DWORD PTR $T71908[ebp], -2147024809	; 80070057H
	mov	BYTE PTR __$EHRec$[ebp+12], 14		; 0000000eH
	lea	ecx, DWORD PTR _password$71238[ebp]
	call	??1CMyComBSTR@@QAE@XZ			; CMyComBSTR::~CMyComBSTR
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR _options$71235[ebp]
	call	??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _getTextPassword$71192[ebp]
	call	??1?$CMyComPtr@UICryptoGetTextPassword2@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword2>::~CMyComPtr<ICryptoGetTextPassword2>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _updateItems$71048[ebp]
	call	??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CUpdateItem>::~CObjectVector<NArchive::NZip::CUpdateItem>
	mov	eax, DWORD PTR $T71908[ebp]
	jmp	$LN59@UpdateItem
$LN7@UpdateItem:
; Line 252
	lea	ecx, DWORD PTR _password$71238[ebp]
	call	??BCMyComBSTR@@QBEPB_WXZ		; CMyComBSTR::operator wchar_t const *
	mov	DWORD PTR tv802[ebp], eax
	cmp	DWORD PTR tv802[ebp], 0
	je	$LN6@UpdateItem
; Line 253
	lea	ecx, DWORD PTR _password$71238[ebp]
	call	??BCMyComBSTR@@QBEPB_WXZ		; CMyComBSTR::operator wchar_t const *
	mov	DWORD PTR tv803[ebp], eax
	mov	edx, DWORD PTR tv803[ebp]
	push	edx
	lea	ecx, DWORD PTR $T71909[ebp]
	call	??0UString@@QAE@PB_W@Z			; UString::UString
	mov	DWORD PTR tv804[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 16		; 00000010H
	push	1
	lea	eax, DWORD PTR $T71909[ebp]
	push	eax
	lea	ecx, DWORD PTR $T71910[ebp]
	push	ecx
	call	?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@I@Z ; UnicodeStringToMultiByte
	mov	DWORD PTR tv805[ebp], eax
	mov	edx, DWORD PTR tv805[ebp]
	mov	DWORD PTR tv748[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 17		; 00000011H
	mov	eax, DWORD PTR tv748[ebp]
	push	eax
	lea	ecx, DWORD PTR _options$71235[ebp+40]
	call	??4AString@@QAEAAV0@ABV0@@Z		; AString::operator=
	mov	BYTE PTR __$EHRec$[ebp+12], 16		; 00000010H
	lea	ecx, DWORD PTR $T71910[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	BYTE PTR __$EHRec$[ebp+12], 15		; 0000000fH
	lea	ecx, DWORD PTR $T71909[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
$LN6@UpdateItem:
; Line 254
	movzx	ecx, BYTE PTR _options$71235[ebp+21]
	test	ecx, ecx
	je	SHORT $LN9@UpdateItem
; Line 256
	lea	ecx, DWORD PTR _options$71235[ebp+40]
	call	?Len@AString@@QBEIXZ			; AString::Len
	mov	DWORD PTR tv806[ebp], eax
	cmp	DWORD PTR tv806[ebp], 99		; 00000063H
	jbe	SHORT $LN9@UpdateItem
; Line 257
	mov	DWORD PTR $T71911[ebp], -2147024809	; 80070057H
	mov	BYTE PTR __$EHRec$[ebp+12], 14		; 0000000eH
	lea	ecx, DWORD PTR _password$71238[ebp]
	call	??1CMyComBSTR@@QAE@XZ			; CMyComBSTR::~CMyComBSTR
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR _options$71235[ebp]
	call	??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _getTextPassword$71192[ebp]
	call	??1?$CMyComPtr@UICryptoGetTextPassword2@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword2>::~CMyComPtr<ICryptoGetTextPassword2>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _updateItems$71048[ebp]
	call	??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CUpdateItem>::~CObjectVector<NArchive::NZip::CUpdateItem>
	mov	eax, DWORD PTR $T71911[ebp]
	jmp	$LN59@UpdateItem
$LN9@UpdateItem:
; Line 260
	mov	BYTE PTR __$EHRec$[ebp+12], 14		; 0000000eH
	lea	ecx, DWORD PTR _password$71238[ebp]
	call	??1CMyComBSTR@@QAE@XZ			; CMyComBSTR::~CMyComBSTR
$LN11@UpdateItem:
; Line 263
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+188], 0
	jge	SHORT $LN3@UpdateItem
; Line 266
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+176]
	neg	ecx
	sbb	ecx, ecx
	and	ecx, 8
	mov	BYTE PTR _mainMethod$71256[ebp], cl
; Line 267
	jmp	SHORT $LN2@UpdateItem
$LN3@UpdateItem:
; Line 268
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+188]
	mov	BYTE PTR _mainMethod$71256[ebp], al
$LN2@UpdateItem:
; Line 269
	movzx	ecx, BYTE PTR _mainMethod$71256[ebp]
	push	ecx
	lea	ecx, DWORD PTR _options$71235[ebp+24]
	call	?Add@?$CRecordVector@E@@QAEIE@Z		; CRecordVector<unsigned char>::Add
; Line 270
	movzx	edx, BYTE PTR _mainMethod$71256[ebp]
	test	edx, edx
	je	SHORT $LN1@UpdateItem
; Line 271
	push	0
	lea	ecx, DWORD PTR _options$71235[ebp+24]
	call	?Add@?$CRecordVector@E@@QAEIE@Z		; CRecordVector<unsigned char>::Add
$LN1@UpdateItem:
; Line 277
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	?IsOpen@CInArchive@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CInArchive::IsOpen
	mov	BYTE PTR tv807[ebp], al
	movzx	eax, BYTE PTR tv807[ebp]
	test	eax, eax
	je	SHORT $LN66@UpdateItem
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	mov	DWORD PTR tv652[ebp], ecx
	jmp	SHORT $LN67@UpdateItem
$LN66@UpdateItem:
	mov	DWORD PTR tv652[ebp], 0
$LN67@UpdateItem:
	mov	edx, DWORD PTR _callback$[ebp]
	push	edx
	lea	eax, DWORD PTR _options$71235[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+194]
	push	edx
	mov	eax, DWORD PTR tv652[ebp]
	push	eax
	mov	ecx, DWORD PTR _outStream$[ebp]
	push	ecx
	lea	edx, DWORD PTR _updateItems$71048[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	call	?Update@NZip@NArchive@@YGJABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@PAUISequentialOutStream@@PAVCInArchive@12@_NPAUCCompressionMethodMode@12@PAUIArchiveUpdateCallback@@@Z ; NArchive::NZip::Update
	mov	DWORD PTR tv808[ebp], eax
	mov	ecx, DWORD PTR tv808[ebp]
	mov	DWORD PTR $T71912[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR _options$71235[ebp]
	call	??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _getTextPassword$71192[ebp]
	call	??1?$CMyComPtr@UICryptoGetTextPassword2@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword2>::~CMyComPtr<ICryptoGetTextPassword2>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _updateItems$71048[ebp]
	call	??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CUpdateItem>::~CObjectVector<NArchive::NZip::CUpdateItem>
	mov	eax, DWORD PTR $T71912[ebp]
	jmp	SHORT $LN59@UpdateItem
__catch$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$0:
; Line 279
	mov	edx, DWORD PTR _e$71263[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T71915[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN91@UpdateItem
	ret	0
	mov	eax, __tryend$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$2
	ret	0
__catch$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$1:
	mov	DWORD PTR $T71916[ebp], -2147024882	; 8007000eH
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN93@UpdateItem
	ret	0
	mov	eax, __tryend$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$2
	ret	0
__tryend$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$2:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN92@UpdateItem
$LN93@UpdateItem:
	mov	eax, DWORD PTR $T71916[ebp]
	jmp	SHORT $LN59@UpdateItem
$LN92@UpdateItem:
	jmp	SHORT $LN59@UpdateItem
$LN91@UpdateItem:
	mov	eax, DWORD PTR $T71915[ebp]
$LN59@UpdateItem:
; Line 280
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN118@UpdateItem
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 928				; 000003a0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	2
$LN118@UpdateItem:
	DD	19					; 00000013H
	DD	$LN117@UpdateItem
$LN117@UpdateItem:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN97@UpdateItem
	DD	-132					; ffffff7cH
	DD	72					; 00000048H
	DD	$LN98@UpdateItem
	DD	-144					; ffffff70H
	DD	4
	DD	$LN99@UpdateItem
	DD	-156					; ffffff64H
	DD	4
	DD	$LN100@UpdateItem
	DD	-168					; ffffff58H
	DD	4
	DD	$LN101@UpdateItem
	DD	-196					; ffffff3cH
	DD	12					; 0000000cH
	DD	$LN102@UpdateItem
	DD	-220					; ffffff24H
	DD	16					; 00000010H
	DD	$LN103@UpdateItem
	DD	-248					; ffffff08H
	DD	16					; 00000010H
	DD	$LN104@UpdateItem
	DD	-276					; fffffeecH
	DD	16					; 00000010H
	DD	$LN105@UpdateItem
	DD	-304					; fffffed0H
	DD	16					; 00000010H
	DD	$LN106@UpdateItem
	DD	-336					; fffffeb0H
	DD	8
	DD	$LN107@UpdateItem
	DD	-361					; fffffe97H
	DD	1
	DD	$LN108@UpdateItem
	DD	-396					; fffffe74H
	DD	16					; 00000010H
	DD	$LN109@UpdateItem
	DD	-412					; fffffe64H
	DD	4
	DD	$LN110@UpdateItem
	DD	-424					; fffffe58H
	DD	4
	DD	$LN111@UpdateItem
	DD	-504					; fffffe08H
	DD	72					; 00000048H
	DD	$LN112@UpdateItem
	DD	-516					; fffffdfcH
	DD	4
	DD	$LN113@UpdateItem
	DD	-528					; fffffdf0H
	DD	4
	DD	$LN114@UpdateItem
	DD	-548					; fffffddcH
	DD	4
	DD	$LN115@UpdateItem
$LN115@UpdateItem:
	DB	101					; 00000065H
	DB	0
$LN114@UpdateItem:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	73					; 00000049H
	DB	115					; 00000073H
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$LN113@UpdateItem:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	0
$LN112@UpdateItem:
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	0
$LN111@UpdateItem:
	DB	117					; 00000075H
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	66					; 00000042H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	50					; 00000032H
	DB	0
$LN110@UpdateItem:
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	0
$LN109@UpdateItem:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
$LN108@UpdateItem:
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	67					; 00000043H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	87					; 00000057H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	85					; 00000055H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$LN107@UpdateItem:
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	70					; 00000046H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	84					; 00000054H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN106@UpdateItem:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
$LN105@UpdateItem:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
$LN104@UpdateItem:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
$LN103@UpdateItem:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
$LN102@UpdateItem:
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN101@UpdateItem:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	65					; 00000041H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	0
$LN100@UpdateItem:
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	115					; 00000073H
	DB	0
$LN99@UpdateItem:
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
$LN98@UpdateItem:
	DB	117					; 00000075H
	DB	105					; 00000069H
	DB	0
$LN97@UpdateItem:
	DB	117					; 00000075H
	DB	112					; 00000070H
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	73					; 00000049H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	115					; 00000073H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$3:
	lea	ecx, DWORD PTR _updateItems$71048[ebp]
	jmp	??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CUpdateItem>::~CObjectVector<NArchive::NZip::CUpdateItem>
__unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$4:
	lea	ecx, DWORD PTR _ui$71056[ebp]
	jmp	??1CUpdateItem@NZip@NArchive@@QAE@XZ
__unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$5:
	lea	ecx, DWORD PTR _name$71072[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$6:
	lea	ecx, DWORD PTR _prop$71073[ebp]
	jmp	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
__unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$7:
	lea	ecx, DWORD PTR _prop$71083[ebp]
	jmp	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
__unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$8:
	lea	ecx, DWORD PTR _prop$71093[ebp]
	jmp	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
__unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$9:
	lea	ecx, DWORD PTR _prop$71104[ebp]
	jmp	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
__unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$10:
	lea	ecx, DWORD PTR $T71895[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$11:
	lea	ecx, DWORD PTR $T71899[ebp]
	jmp	??1AString@@QAE@XZ			; AString::~AString
__unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$12:
	mov	eax, DWORD PTR $T71929[ebp]
	and	eax, 1
	je	$LN81@UpdateItem
	and	DWORD PTR $T71929[ebp], -2		; fffffffeH
	lea	ecx, DWORD PTR $T71900[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
$LN81@UpdateItem:
	ret	0
__unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$13:
	lea	ecx, DWORD PTR _prop$71147[ebp]
	jmp	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
__unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$14:
	lea	ecx, DWORD PTR _getTextPassword$71192[ebp]
	jmp	??1?$CMyComPtr@UICryptoGetTextPassword2@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword2>::~CMyComPtr<ICryptoGetTextPassword2>
__unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$15:
	lea	ecx, DWORD PTR _udateCallBack2$71230[ebp]
	jmp	??1?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallback>::~CMyComPtr<IArchiveUpdateCallback>
__unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$16:
	lea	ecx, DWORD PTR _options$71235[ebp]
	jmp	??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ
__unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$17:
	lea	ecx, DWORD PTR _password$71238[ebp]
	jmp	??1CMyComBSTR@@QAE@XZ			; CMyComBSTR::~CMyComBSTR
__unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$18:
	lea	ecx, DWORD PTR $T71909[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$19:
	lea	ecx, DWORD PTR $T71910[ebp]
	jmp	??1AString@@QAE@XZ			; AString::~AString
__ehhandler$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-932]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z ENDP ; NArchive::NZip::CHandler::UpdateItems
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1AString@@QAE@XZ
_TEXT	SEGMENT
$T71982 = -8						; size = 4
_this$ = -4						; size = 4
??1AString@@QAE@XZ PROC					; AString::~AString, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 232
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T71982[ebp], ecx
	mov	edx, DWORD PTR $T71982[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1AString@@QAE@XZ ENDP					; AString::~AString
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Len@AString@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Len@AString@@QBEIXZ PROC				; AString::Len, COMDAT
; _this$ = ecx
; Line 234
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Len@AString@@QBEIXZ ENDP				; AString::Len
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Empty@AString@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Empty@AString@@QAEXXZ PROC				; AString::Empty, COMDAT
; _this$ = ecx
; Line 236
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	BYTE PTR [edx], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Empty@AString@@QAEXXZ ENDP				; AString::Empty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1UString@@QAE@XZ
_TEXT	SEGMENT
$T71989 = -8						; size = 4
_this$ = -4						; size = 4
??1UString@@QAE@XZ PROC					; UString::~UString, COMDAT
; _this$ = ecx
; Line 470
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T71989[ebp], ecx
	mov	edx, DWORD PTR $T71989[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1UString@@QAE@XZ ENDP					; UString::~UString
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsEmpty@UString@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@UString@@QBE_NXZ PROC				; UString::IsEmpty, COMDAT
; _this$ = ecx
; Line 473
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+4], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@UString@@QBE_NXZ ENDP				; UString::IsEmpty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Empty@UString@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Empty@UString@@QAEXXZ PROC				; UString::Empty, COMDAT
; _this$ = ecx
; Line 474
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	xor	eax, eax
	mov	WORD PTR [edx], ax
	mov	esp, ebp
	pop	ebp
	ret	0
?Empty@UString@@QAEXXZ ENDP				; UString::Empty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Back@UString@@QBE_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Back@UString@@QBE_WXZ PROC				; UString::Back, COMDAT
; _this$ = ecx
; Line 480
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ax, WORD PTR [eax+ecx*2-2]
	mov	esp, ebp
	pop	ebp
	ret	0
?Back@UString@@QBE_WXZ ENDP				; UString::Back
_TEXT	ENDS
EXTRN	?Grow_1@UString@@AAEXXZ:PROC			; UString::Grow_1
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??YUString@@QAEAAV0@_W@Z
_TEXT	SEGMENT
_chars$ = -12						; size = 4
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_c$ = 8							; size = 2
??YUString@@QAEAAV0@_W@Z PROC				; UString::operator+=, COMDAT
; _this$ = ecx
; Line 515
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 516
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+4]
	jne	SHORT $LN1@operator
; Line 517
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Grow_1@UString@@AAEXXZ			; UString::Grow_1
$LN1@operator:
; Line 518
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _len$[ebp], ecx
; Line 519
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _chars$[ebp], eax
; Line 520
	mov	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _chars$[ebp]
	mov	ax, WORD PTR _c$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
	mov	ecx, DWORD PTR _len$[ebp]
	add	ecx, 1
	mov	DWORD PTR _len$[ebp], ecx
; Line 521
	xor	edx, edx
	mov	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _chars$[ebp]
	mov	WORD PTR [ecx+eax*2], dx
; Line 522
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 523
	mov	eax, DWORD PTR _this$[ebp]
; Line 524
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??YUString@@QAEAAV0@_W@Z ENDP				; UString::operator+=
_TEXT	ENDS
PUBLIC	?Len@UString@@QBEIXZ				; UString::Len
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsAscii@UString@@QBE_NXZ
_TEXT	SEGMENT
_i$66781 = -16						; size = 4
_s$ = -12						; size = 4
_len$ = -8						; size = 4
_this$ = -4						; size = 4
?IsAscii@UString@@QBE_NXZ PROC				; UString::IsAscii, COMDAT
; _this$ = ecx
; Line 559
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 560
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	mov	DWORD PTR _len$[ebp], eax
; Line 561
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _s$[ebp], ecx
; Line 562
	mov	DWORD PTR _i$66781[ebp], 0
	jmp	SHORT $LN4@IsAscii
$LN3@IsAscii:
	mov	edx, DWORD PTR _i$66781[ebp]
	add	edx, 1
	mov	DWORD PTR _i$66781[ebp], edx
$LN4@IsAscii:
	mov	eax, DWORD PTR _i$66781[ebp]
	cmp	eax, DWORD PTR _len$[ebp]
	jae	SHORT $LN2@IsAscii
; Line 563
	mov	ecx, DWORD PTR _i$66781[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	movzx	eax, WORD PTR [edx+ecx*2]
	cmp	eax, 128				; 00000080H
	jl	SHORT $LN1@IsAscii
; Line 564
	xor	al, al
	jmp	SHORT $LN5@IsAscii
$LN1@IsAscii:
; Line 565
	jmp	SHORT $LN3@IsAscii
$LN2@IsAscii:
	mov	al, 1
$LN5@IsAscii:
; Line 566
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsAscii@UString@@QBE_NXZ ENDP				; UString::IsAscii
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Len@UString@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Len@UString@@QBEIXZ PROC				; UString::Len, COMDAT
; _this$ = ecx
; Line 472
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Len@UString@@QBEIXZ ENDP				; UString::Len
_TEXT	ENDS
PUBLIC	??BUString@@QBEPB_WXZ				; UString::operator wchar_t const *
EXTRN	__imp__wcscmp:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??9@YG_NABVUString@@0@Z
_TEXT	SEGMENT
tv77 = -4						; size = 4
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
??9@YG_NABVUString@@0@Z PROC				; operator!=, COMDAT
; Line 620
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, DWORD PTR _s1$[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	mov	esi, eax
	mov	ecx, DWORD PTR _s2$[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	cmp	esi, eax
	jne	SHORT $LN3@operator@2
	mov	ecx, DWORD PTR _s2$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _s1$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	DWORD PTR __imp__wcscmp
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN3@operator@2
	mov	DWORD PTR tv77[ebp], 0
	jmp	SHORT $LN4@operator@2
$LN3@operator@2:
	mov	DWORD PTR tv77[ebp], 1
$LN4@operator@2:
	mov	al, BYTE PTR tv77[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??9@YG_NABVUString@@0@Z ENDP				; operator!=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??BUString@@QBEPB_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BUString@@QBEPB_WXZ PROC				; UString::operator wchar_t const *, COMDAT
; _this$ = ecx
; Line 476
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??BUString@@QBEPB_WXZ ENDP				; UString::operator wchar_t const *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CPropVariant@NCOM@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CPropVariant@NCOM@NWindows@@QAE@XZ PROC		; NWindows::NCOM::CPropVariant::CPropVariant, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\propvariant.h
; Line 47
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 49
	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx], ax
; Line 50
	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+2], dx
; Line 54
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
; Line 55
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CPropVariant@NCOM@NWindows@@QAE@XZ ENDP		; NWindows::NCOM::CPropVariant::CPropVariant
_TEXT	ENDS
EXTRN	?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ:PROC	; NWindows::NCOM::CPropVariant::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CPropVariant@NCOM@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CPropVariant@NCOM@NWindows@@QAE@XZ PROC		; NWindows::NCOM::CPropVariant::~CPropVariant, COMDAT
; _this$ = ecx
; Line 56
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ ; NWindows::NCOM::CPropVariant::Clear
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CPropVariant@NCOM@NWindows@@QAE@XZ ENDP		; NWindows::NCOM::CPropVariant::~CPropVariant
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CMyComBSTR@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMyComBSTR@@QAE@XZ PROC				; CMyComBSTR::CMyComBSTR, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 87
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CMyComBSTR@@QAE@XZ ENDP				; CMyComBSTR::CMyComBSTR
_TEXT	ENDS
EXTRN	__imp__SysFreeString@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CMyComBSTR@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CMyComBSTR@@QAE@XZ PROC				; CMyComBSTR::~CMyComBSTR, COMDAT
; _this$ = ecx
; Line 88
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__SysFreeString@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CMyComBSTR@@QAE@XZ ENDP				; CMyComBSTR::~CMyComBSTR
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??ICMyComBSTR@@QAEPAPA_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??ICMyComBSTR@@QAEPAPA_WXZ PROC				; CMyComBSTR::operator&, COMDAT
; _this$ = ecx
; Line 89
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??ICMyComBSTR@@QAEPAPA_WXZ ENDP				; CMyComBSTR::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??BCMyComBSTR@@QBEPB_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BCMyComBSTR@@QBEPB_WXZ PROC				; CMyComBSTR::operator wchar_t const *, COMDAT
; _this$ = ecx
; Line 90
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??BCMyComBSTR@@QBEPB_WXZ ENDP				; CMyComBSTR::operator wchar_t const *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IntToBool@@YG_NH@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?IntToBool@@YG_NH@Z PROC				; IntToBool, COMDAT
; File c:\workspace\7z1505-src\cpp\common\defs.h
; Line 18
	push	ebp
	mov	ebp, esp
	xor	eax, eax
	cmp	DWORD PTR _value$[ebp], 0
	setne	al
	pop	ebp
	ret	4
?IntToBool@@YG_NH@Z ENDP				; IntToBool
_TEXT	ENDS
PUBLIC	?IsStrongEncrypted@CLocalItem@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CLocalItem::IsStrongEncrypted
PUBLIC	?IsEncrypted@CLocalItem@NZip@NArchive@@QBE_NXZ	; NArchive::NZip::CLocalItem::IsEncrypted
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsAesEncrypted@CLocalItem@NZip@NArchive@@QBE_NXZ
_TEXT	SEGMENT
tv75 = -8						; size = 4
_this$ = -4						; size = 4
?IsAesEncrypted@CLocalItem@NZip@NArchive@@QBE_NXZ PROC	; NArchive::NZip::CLocalItem::IsAesEncrypted, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\zipitem.h
; Line 211
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsEncrypted@CLocalItem@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CLocalItem::IsEncrypted
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@IsAesEncry
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsStrongEncrypted@CLocalItem@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CLocalItem::IsStrongEncrypted
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@IsAesEncry
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+2]
	cmp	eax, 99					; 00000063H
	jne	SHORT $LN4@IsAesEncry
$LN3@IsAesEncry:
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN5@IsAesEncry
$LN4@IsAesEncry:
	mov	DWORD PTR tv75[ebp], 0
$LN5@IsAesEncry:
	mov	al, BYTE PTR tv75[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsAesEncrypted@CLocalItem@NZip@NArchive@@QBE_NXZ ENDP	; NArchive::NZip::CLocalItem::IsAesEncrypted
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsEncrypted@CLocalItem@NZip@NArchive@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEncrypted@CLocalItem@NZip@NArchive@@QBE_NXZ PROC	; NArchive::NZip::CLocalItem::IsEncrypted, COMDAT
; _this$ = ecx
; Line 209
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [eax]
	and	eax, 1
	neg	eax
	sbb	eax, eax
	neg	eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEncrypted@CLocalItem@NZip@NArchive@@QBE_NXZ ENDP	; NArchive::NZip::CLocalItem::IsEncrypted
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsStrongEncrypted@CLocalItem@NZip@NArchive@@QBE_NXZ
_TEXT	SEGMENT
tv71 = -8						; size = 4
_this$ = -4						; size = 4
?IsStrongEncrypted@CLocalItem@NZip@NArchive@@QBE_NXZ PROC ; NArchive::NZip::CLocalItem::IsStrongEncrypted, COMDAT
; _this$ = ecx
; Line 210
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsEncrypted@CLocalItem@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CLocalItem::IsEncrypted
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@IsStrongEn
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx]
	and	edx, 64					; 00000040H
	je	SHORT $LN3@IsStrongEn
	mov	DWORD PTR tv71[ebp], 1
	jmp	SHORT $LN4@IsStrongEn
$LN3@IsStrongEn:
	mov	DWORD PTR tv71[ebp], 0
$LN4@IsStrongEn:
	mov	al, BYTE PTR tv71[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsStrongEncrypted@CLocalItem@NZip@NArchive@@QBE_NXZ ENDP ; NArchive::NZip::CLocalItem::IsStrongEncrypted
_TEXT	ENDS
PUBLIC	??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsOpen@CInArchive@NZip@NArchive@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsOpen@CInArchive@NZip@NArchive@@QBE_NXZ PROC		; NArchive::NZip::CInArchive::IsOpen, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\zipin.h
; Line 152
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 128				; 00000080H
	call	??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *
	neg	eax
	sbb	eax, eax
	neg	eax
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsOpen@CInArchive@NZip@NArchive@@QBE_NXZ ENDP		; NArchive::NZip::CInArchive::IsOpen
_TEXT	ENDS
PUBLIC	?ThereIsTail@CInArchiveInfo@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CInArchiveInfo::ThereIsTail
PUBLIC	?GetEmbeddedStubSize@CInArchiveInfo@NZip@NArchive@@QBE_KXZ ; NArchive::NZip::CInArchiveInfo::GetEmbeddedStubSize
PUBLIC	?AreThereErrors@CInArchive@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CInArchive::AreThereErrors
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?CanUpdate@CInArchive@NZip@NArchive@@QBE_NXZ
_TEXT	SEGMENT
tv145 = -24						; size = 8
tv129 = -16						; size = 4
tv128 = -12						; size = 4
tv88 = -8						; size = 4
_this$ = -4						; size = 4
?CanUpdate@CInArchive@NZip@NArchive@@QBE_NXZ PROC	; NArchive::NZip::CInArchive::CanUpdate, COMDAT
; _this$ = ecx
; Line 170
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 171
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AreThereErrors@CInArchive@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CInArchive::AreThereErrors
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@CanUpdate
; Line 172
	xor	al, al
	jmp	$LN6@CanUpdate
$LN5@CanUpdate:
; Line 173
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv88[ebp], ecx
	mov	edx, DWORD PTR tv88[ebp]
	cmp	DWORD PTR [edx+60], 0
	jg	SHORT $LN4@CanUpdate
	jl	SHORT $LN8@CanUpdate
	mov	eax, DWORD PTR tv88[ebp]
	cmp	DWORD PTR [eax+56], 0
	jae	SHORT $LN4@CanUpdate
$LN8@CanUpdate:
; Line 174
	xor	al, al
	jmp	SHORT $LN6@CanUpdate
$LN4@CanUpdate:
; Line 175
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv128[ebp], ecx
	mov	DWORD PTR tv129[ebp], edx
	mov	eax, DWORD PTR tv128[ebp]
	mov	ecx, DWORD PTR tv129[ebp]
	mov	edx, DWORD PTR [eax+76]
	cmp	edx, DWORD PTR [ecx+60]
	jg	SHORT $LN3@CanUpdate
	jl	SHORT $LN9@CanUpdate
	mov	eax, DWORD PTR tv128[ebp]
	mov	ecx, DWORD PTR tv129[ebp]
	mov	edx, DWORD PTR [eax+72]
	cmp	edx, DWORD PTR [ecx+56]
	jae	SHORT $LN3@CanUpdate
$LN9@CanUpdate:
; Line 176
	xor	al, al
	jmp	SHORT $LN6@CanUpdate
$LN3@CanUpdate:
; Line 180
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	?GetEmbeddedStubSize@CInArchiveInfo@NZip@NArchive@@QBE_KXZ ; NArchive::NZip::CInArchiveInfo::GetEmbeddedStubSize
	mov	DWORD PTR tv145[ebp], eax
	mov	DWORD PTR tv145[ebp+4], edx
	mov	eax, DWORD PTR tv145[ebp]
	or	eax, DWORD PTR tv145[ebp+4]
	je	SHORT $LN2@CanUpdate
; Line 181
	xor	al, al
	jmp	SHORT $LN6@CanUpdate
$LN2@CanUpdate:
; Line 183
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	?ThereIsTail@CInArchiveInfo@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CInArchiveInfo::ThereIsTail
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@CanUpdate
; Line 184
	xor	al, al
	jmp	SHORT $LN6@CanUpdate
$LN1@CanUpdate:
; Line 185
	mov	al, 1
$LN6@CanUpdate:
; Line 186
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?CanUpdate@CInArchive@NZip@NArchive@@QBE_NXZ ENDP	; NArchive::NZip::CInArchive::CanUpdate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetEmbeddedStubSize@CInArchiveInfo@NZip@NArchive@@QBE_KXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetEmbeddedStubSize@CInArchiveInfo@NZip@NArchive@@QBE_KXZ PROC ; NArchive::NZip::CInArchiveInfo::GetEmbeddedStubSize, COMDAT
; _this$ = ecx
; Line 62
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 63
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+48]
	test	ecx, ecx
	je	SHORT $LN1@GetEmbedde
; Line 64
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	edx, DWORD PTR [edx+44]
	jmp	SHORT $LN2@GetEmbedde
$LN1@GetEmbedde:
; Line 65
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+16]
	sub	edx, DWORD PTR [ecx]
	mov	esi, DWORD PTR [eax+20]
	sbb	esi, DWORD PTR [ecx+4]
	mov	eax, edx
	mov	edx, esi
$LN2@GetEmbedde:
; Line 66
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?GetEmbeddedStubSize@CInArchiveInfo@NZip@NArchive@@QBE_KXZ ENDP ; NArchive::NZip::CInArchiveInfo::GetEmbeddedStubSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ThereIsTail@CInArchiveInfo@NZip@NArchive@@QBE_NXZ
_TEXT	SEGMENT
tv67 = -16						; size = 4
tv72 = -12						; size = 4
tv71 = -8						; size = 4
_this$ = -4						; size = 4
?ThereIsTail@CInArchiveInfo@NZip@NArchive@@QBE_NXZ PROC	; NArchive::NZip::CInArchiveInfo::ThereIsTail, COMDAT
; _this$ = ecx
; Line 67
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv71[ebp], eax
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR tv71[ebp]
	mov	eax, DWORD PTR tv72[ebp]
	mov	ecx, DWORD PTR [edx+36]
	cmp	ecx, DWORD PTR [eax+28]
	jb	SHORT $LN3@ThereIsTai
	ja	SHORT $LN5@ThereIsTai
	mov	edx, DWORD PTR tv71[ebp]
	mov	eax, DWORD PTR tv72[ebp]
	mov	ecx, DWORD PTR [edx+32]
	cmp	ecx, DWORD PTR [eax+24]
	jbe	SHORT $LN3@ThereIsTai
$LN5@ThereIsTai:
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@ThereIsTai
$LN3@ThereIsTai:
	mov	DWORD PTR tv67[ebp], 0
$LN4@ThereIsTai:
	mov	al, BYTE PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?ThereIsTail@CInArchiveInfo@NZip@NArchive@@QBE_NXZ ENDP	; NArchive::NZip::CInArchiveInfo::ThereIsTail
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AreThereErrors@CInArchive@NZip@NArchive@@QBE_NXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
?AreThereErrors@CInArchive@NZip@NArchive@@QBE_NXZ PROC	; NArchive::NZip::CInArchive::AreThereErrors, COMDAT
; _this$ = ecx
; Line 153
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+122]
	test	ecx, ecx
	jne	SHORT $LN3@AreThereEr
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+125]
	test	eax, eax
	jne	SHORT $LN3@AreThereEr
	mov	DWORD PTR tv70[ebp], 0
	jmp	SHORT $LN4@AreThereEr
$LN3@AreThereEr:
	mov	DWORD PTR tv70[ebp], 1
$LN4@AreThereEr:
	mov	al, BYTE PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?AreThereErrors@CInArchive@NZip@NArchive@@QBE_NXZ ENDP	; NArchive::NZip::CInArchive::AreThereErrors
_TEXT	ENDS
PUBLIC	??1?$CRecordVector@E@@QAE@XZ			; CRecordVector<unsigned char>::~CRecordVector<unsigned char>
PUBLIC	??1CBaseProps@NZip@NArchive@@QAE@XZ		; NArchive::NZip::CBaseProps::~CBaseProps
PUBLIC	??0?$CRecordVector@E@@QAE@XZ			; CRecordVector<unsigned char>::CRecordVector<unsigned char>
PUBLIC	??0CBaseProps@NZip@NArchive@@QAE@XZ		; NArchive::NZip::CBaseProps::CBaseProps
EXTRN	??0AString@@QAE@XZ:PROC				; AString::AString
;	COMDAT xdata$x
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\zipcompressionmode.h
xdata$x	SEGMENT
__unwindtable$??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ$1
__ehfuncinfo$??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ PROC	; NArchive::NZip::CCompressionMethodMode::CCompressionMethodMode, COMDAT
; _this$ = ecx
; Line 54
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CBaseProps@NZip@NArchive@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0?$CRecordVector@E@@QAE@XZ		; CRecordVector<unsigned char>::CRecordVector<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+36], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??0AString@@QAE@XZ			; AString::AString
; Line 55
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+64], 0
; Line 56
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+56], 0
	mov	DWORD PTR [edx+60], 0
; Line 57
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CBaseProps@NZip@NArchive@@QAE@XZ
__unwindfunclet$??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1?$CRecordVector@E@@QAE@XZ		; CRecordVector<unsigned char>::~CRecordVector<unsigned char>
__ehhandler$??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CCompressionMethodMode@NZip@NArchive@@QAE@XZ ENDP	; NArchive::NZip::CCompressionMethodMode::CCompressionMethodMode
PUBLIC	??0CMethodProps@@QAE@XZ				; CMethodProps::CMethodProps
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CBaseProps@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CBaseProps@NZip@NArchive@@QAE@XZ PROC		; NArchive::NZip::CBaseProps::CBaseProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CMethodProps@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CBaseProps@NZip@NArchive@@QAE@XZ ENDP		; NArchive::NZip::CBaseProps::CBaseProps
_TEXT	ENDS
PUBLIC	??0CProps@@QAE@XZ				; CProps::CProps
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CMethodProps@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMethodProps@@QAE@XZ PROC				; CMethodProps::CMethodProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CProps@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CMethodProps@@QAE@XZ ENDP				; CMethodProps::CMethodProps
_TEXT	ENDS
PUBLIC	??0?$CObjectVector@UCProp@@@@QAE@XZ		; CObjectVector<CProp>::CObjectVector<CProp>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CProps@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CProps@@QAE@XZ PROC					; CProps::CProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CObjectVector@UCProp@@@@QAE@XZ	; CObjectVector<CProp>::CObjectVector<CProp>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CProps@@QAE@XZ ENDP					; CProps::CProps
_TEXT	ENDS
PUBLIC	??1CMethodProps@@QAE@XZ				; CMethodProps::~CMethodProps
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CBaseProps@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CBaseProps@NZip@NArchive@@QAE@XZ PROC		; NArchive::NZip::CBaseProps::~CBaseProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CMethodProps@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CBaseProps@NZip@NArchive@@QAE@XZ ENDP		; NArchive::NZip::CBaseProps::~CBaseProps
_TEXT	ENDS
PUBLIC	??1CProps@@QAE@XZ				; CProps::~CProps
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CMethodProps@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CMethodProps@@QAE@XZ PROC				; CMethodProps::~CMethodProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CProps@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CMethodProps@@QAE@XZ ENDP				; CMethodProps::~CMethodProps
_TEXT	ENDS
PUBLIC	??1?$CObjectVector@UCProp@@@@QAE@XZ		; CObjectVector<CProp>::~CObjectVector<CProp>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CProps@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CProps@@QAE@XZ PROC					; CProps::~CProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CObjectVector@UCProp@@@@QAE@XZ	; CObjectVector<CProp>::~CObjectVector<CProp>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CProps@@QAE@XZ ENDP					; CProps::~CProps
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CUpdateItem@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CUpdateItem@NZip@NArchive@@QAE@XZ PROC		; NArchive::NZip::CUpdateItem::CUpdateItem, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\zipupdate.h
; Line 45
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+3], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??0AString@@QAE@XZ			; AString::AString
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CUpdateItem@NZip@NArchive@@QAE@XZ ENDP		; NArchive::NZip::CUpdateItem::CUpdateItem
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
_TEXT	SEGMENT
_c$70952 = -4						; size = 2
_s$ = 8							; size = 4
?IsSimpleAsciiString@NZip@NArchive@@YG_NPB_W@Z PROC	; NArchive::NZip::IsSimpleAsciiString
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\ziphandlerout.cpp
; Line 38
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
$LN5@IsSimpleAs:
; Line 41
	mov	eax, DWORD PTR _s$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _c$70952[ebp], cx
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, 2
	mov	DWORD PTR _s$[ebp], edx
; Line 42
	movzx	eax, WORD PTR _c$70952[ebp]
	test	eax, eax
	jne	SHORT $LN3@IsSimpleAs
; Line 43
	mov	al, 1
	jmp	SHORT $LN6@IsSimpleAs
$LN3@IsSimpleAs:
; Line 44
	movzx	ecx, WORD PTR _c$70952[ebp]
	cmp	ecx, 32					; 00000020H
	jl	SHORT $LN1@IsSimpleAs
	movzx	edx, WORD PTR _c$70952[ebp]
	cmp	edx, 127				; 0000007fH
	jle	SHORT $LN2@IsSimpleAs
$LN1@IsSimpleAs:
; Line 45
	xor	al, al
	jmp	SHORT $LN6@IsSimpleAs
$LN2@IsSimpleAs:
; Line 46
	jmp	SHORT $LN5@IsSimpleAs
$LN6@IsSimpleAs:
; Line 47
	mov	esp, ebp
	pop	ebp
	ret	4
?IsSimpleAsciiString@NZip@NArchive@@YG_NPB_W@Z ENDP	; NArchive::NZip::IsSimpleAsciiString
_TEXT	ENDS
xdata$x	SEGMENT
__unwindtable$?GetTime@NZip@NArchive@@YGJPAUIArchiveUpdateCallback@@HKAAU_FILETIME@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetTime@NZip@NArchive@@YGJPAUIArchiveUpdateCallback@@HKAAU_FILETIME@@@Z$0
__ehfuncinfo$?GetTime@NZip@NArchive@@YGJPAUIArchiveUpdateCallback@@HKAAU_FILETIME@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetTime@NZip@NArchive@@YGJPAUIArchiveUpdateCallback@@HKAAU_FILETIME@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T72087 = -52						; size = 4
$T72086 = -48						; size = 4
$T72085 = -44						; size = 4
___result__$70963 = -40					; size = 4
_prop$ = -32						; size = 16
__$EHRec$ = -12						; size = 12
_callback$ = 8						; size = 4
_index$ = 12						; size = 4
_propID$ = 16						; size = 4
_filetime$ = 20						; size = 4
?GetTime@NZip@NArchive@@YGJPAUIArchiveUpdateCallback@@HKAAU_FILETIME@@@Z PROC ; NArchive::NZip::GetTime
; Line 55
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetTime@NZip@NArchive@@YGJPAUIArchiveUpdateCallback@@HKAAU_FILETIME@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 56
	mov	eax, DWORD PTR _filetime$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _filetime$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 57
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 58
	mov	esi, esp
	lea	edx, DWORD PTR _prop$[ebp]
	push	edx
	mov	eax, DWORD PTR _propID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _callback$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _callback$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+24]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$70963[ebp], eax
	cmp	DWORD PTR ___result__$70963[ebp], 0
	je	SHORT $LN4@GetTime
	mov	eax, DWORD PTR ___result__$70963[ebp]
	mov	DWORD PTR $T72085[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T72085[ebp]
	jmp	SHORT $LN5@GetTime
$LN4@GetTime:
; Line 59
	movzx	ecx, WORD PTR _prop$[ebp]
	cmp	ecx, 64					; 00000040H
	jne	SHORT $LN3@GetTime
; Line 60
	mov	edx, DWORD PTR _filetime$[ebp]
	mov	eax, DWORD PTR _prop$[ebp+8]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _prop$[ebp+12]
	mov	DWORD PTR [edx+4], ecx
	jmp	SHORT $LN2@GetTime
$LN3@GetTime:
; Line 61
	movzx	edx, WORD PTR _prop$[ebp]
	test	edx, edx
	je	SHORT $LN2@GetTime
; Line 62
	mov	DWORD PTR $T72086[ebp], -2147024809	; 80070057H
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T72086[ebp]
	jmp	SHORT $LN5@GetTime
$LN2@GetTime:
; Line 63
	mov	DWORD PTR $T72087[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T72087[ebp]
$LN5@GetTime:
; Line 64
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@GetTime
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	3
$LN11@GetTime:
	DD	1
	DD	$LN10@GetTime
$LN10@GetTime:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN8@GetTime
$LN8@GetTime:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?GetTime@NZip@NArchive@@YGJPAUIArchiveUpdateCallback@@HKAAU_FILETIME@@@Z$0:
	lea	ecx, DWORD PTR _prop$[ebp]
	jmp	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
__ehhandler$?GetTime@NZip@NArchive@@YGJPAUIArchiveUpdateCallback@@HKAAU_FILETIME@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetTime@NZip@NArchive@@YGJPAUIArchiveUpdateCallback@@HKAAU_FILETIME@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetTime@NZip@NArchive@@YGJPAUIArchiveUpdateCallback@@HKAAU_FILETIME@@@Z ENDP ; NArchive::NZip::GetTime
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CUpdateItem@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CUpdateItem@NZip@NArchive@@QAE@XZ PROC		; NArchive::NZip::CUpdateItem::~CUpdateItem, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??1AString@@QAE@XZ			; AString::~AString
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CUpdateItem@NZip@NArchive@@QAE@XZ ENDP		; NArchive::NZip::CUpdateItem::~CUpdateItem
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ$1
__ehfuncinfo$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ PROC	; NArchive::NZip::CCompressionMethodMode::~CCompressionMethodMode, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1?$CRecordVector@E@@QAE@XZ		; CRecordVector<unsigned char>::~CRecordVector<unsigned char>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CBaseProps@NZip@NArchive@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CBaseProps@NZip@NArchive@@QAE@XZ
__unwindfunclet$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1?$CRecordVector@E@@QAE@XZ		; CRecordVector<unsigned char>::~CRecordVector<unsigned char>
__ehhandler$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CCompressionMethodMode@NZip@NArchive@@QAE@XZ ENDP	; NArchive::NZip::CCompressionMethodMode::~CCompressionMethodMode
PUBLIC	??4CMethodProps@@QAEAAV0@ABV0@@Z		; CMethodProps::operator=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4CBaseProps@NZip@NArchive@@QAEAAU012@ABU012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4CBaseProps@NZip@NArchive@@QAEAAU012@ABU012@@Z PROC	; NArchive::NZip::CBaseProps::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4CMethodProps@@QAEAAV0@ABV0@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx+20]
	mov	BYTE PTR [ecx+20], al
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx+21]
	mov	BYTE PTR [ecx+21], al
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx+22]
	mov	BYTE PTR [ecx+22], al
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4CBaseProps@NZip@NArchive@@QAEAAU012@ABU012@@Z ENDP	; NArchive::NZip::CBaseProps::operator=
_TEXT	ENDS
PUBLIC	??4CProps@@QAEAAU0@ABU0@@Z			; CProps::operator=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4CMethodProps@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4CMethodProps@@QAEAAV0@ABV0@@Z PROC			; CMethodProps::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4CProps@@QAEAAU0@ABU0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4CMethodProps@@QAEAAV0@ABV0@@Z ENDP			; CMethodProps::operator=
_TEXT	ENDS
PUBLIC	??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z	; CObjectVector<CProp>::operator=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4CProps@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4CProps@@QAEAAU0@ABU0@@Z PROC				; CProps::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z ; CObjectVector<CProp>::operator=
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4CProps@@QAEAAU0@ABU0@@Z ENDP				; CProps::operator=
_TEXT	ENDS
PUBLIC	?IsPrefixedBy@UString@@QBE_NPB_W@Z		; UString::IsPrefixedBy
PUBLIC	?IsEqualTo@UString@@QBE_NPBD@Z			; UString::IsEqualTo
PUBLIC	?DeleteFrom@UString@@QAEXI@Z			; UString::DeleteFrom
PUBLIC	?Find@UString@@QBEH_W@Z				; UString::Find
PUBLIC	??8@YG_NABVUString@@PB_W@Z			; operator==
PUBLIC	?AddProp_Level@CMethodProps@@QAEXI@Z		; CMethodProps::AddProp_Level
PUBLIC	?Ptr@UString@@QBEPB_WI@Z			; UString::Ptr
PUBLIC	?MakeLower_Ascii@UString@@QAEXXZ		; UString::MakeLower_Ascii
PUBLIC	?InitMethodProps@CHandler@NZip@NArchive@@AAEXXZ	; NArchive::NZip::CHandler::InitMethodProps
PUBLIC	?SetProperties@CHandler@NZip@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z ; NArchive::NZip::CHandler::SetProperties
EXTRN	?ParseParamsFromPROPVARIANT@CMethodProps@@QAEJABVUString@@ABUtagPROPVARIANT@@@Z:PROC ; CMethodProps::ParseParamsFromPROPVARIANT
EXTRN	?PROPVARIANT_to_bool@@YGJABUtagPROPVARIANT@@AA_N@Z:PROC ; PROPVARIANT_to_bool
EXTRN	?ParseMtProp@@YGJABVUString@@ABUtagPROPVARIANT@@IAAI@Z:PROC ; ParseMtProp
EXTRN	?DeleteFrontal@UString@@QAEXI@Z:PROC		; UString::DeleteFrontal
EXTRN	?ParseParamsFromString@CMethodProps@@QAEJABVUString@@@Z:PROC ; CMethodProps::ParseParamsFromString
EXTRN	?ParsePropToUInt32@@YGJABVUString@@ABUtagPROPVARIANT@@AAI@Z:PROC ; ParsePropToUInt32
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T72135 = -272						; size = 4
$T72134 = -268						; size = 4
$T72133 = -264						; size = 4
$T72132 = -260						; size = 12
$T72131 = -248						; size = 4
$T72130 = -244						; size = 4
$T72129 = -240						; size = 4
$T72128 = -236						; size = 4
$T72127 = -232						; size = 12
$T72126 = -220						; size = 4
$T72125 = -216						; size = 4
$T72124 = -212						; size = 4
$T72123 = -208						; size = 4
$T72122 = -204						; size = 4
$T72121 = -200						; size = 4
$T72120 = -196						; size = 4
$T72119 = -192						; size = 4
$T72118 = -188						; size = 12
$T72117 = -176						; size = 4
___result__$71425 = -172				; size = 4
___result__$71421 = -168				; size = 4
___result__$71413 = -164				; size = 4
_cp$71412 = -156					; size = 4
___result__$71405 = -148				; size = 4
___result__$71398 = -144				; size = 4
___result__$71392 = -140				; size = 4
___result__$71385 = -136				; size = 4
_m$71361 = -128						; size = 12
_method$71347 = -112					; size = 4
_k$71343 = -108						; size = 4
___result__$71335 = -104				; size = 4
_pair$71332 = -100					; size = 4
_k$71328 = -96						; size = 4
_colonPos$71326 = -92					; size = 4
_m2$71325 = -84						; size = 12
_m$71324 = -64						; size = 12
___result__$71316 = -48					; size = 4
_level$71315 = -40					; size = 4
_prop$71313 = -32					; size = 4
_name$71309 = -24					; size = 12
_i$71305 = -8						; size = 4
_numProcessors$ = -4					; size = 4
_this$ = 8						; size = 4
_names$ = 12						; size = 4
_values$ = 16						; size = 4
_numProps$ = 20						; size = 4
?SetProperties@CHandler@NZip@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z PROC ; NArchive::NZip::CHandler::SetProperties
; Line 299
	push	ebp
	mov	ebp, esp
	sub	esp, 272				; 00000110H
	push	edi
	lea	edi, DWORD PTR [ebp-272]
	mov	ecx, 68					; 00000044H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 300
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 8
	call	?InitMethodProps@CHandler@NZip@NArchive@@AAEXXZ ; NArchive::NZip::CHandler::InitMethodProps
; Line 302
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+176]
	mov	DWORD PTR _numProcessors$[ebp], ecx
; Line 305
	mov	DWORD PTR _i$71305[ebp], 0
	jmp	SHORT $LN61@SetPropert
$LN60@SetPropert:
	mov	edx, DWORD PTR _i$71305[ebp]
	add	edx, 1
	mov	DWORD PTR _i$71305[ebp], edx
$LN61@SetPropert:
	mov	eax, DWORD PTR _i$71305[ebp]
	cmp	eax, DWORD PTR _numProps$[ebp]
	jae	$LN59@SetPropert
; Line 307
	mov	ecx, DWORD PTR _i$71305[ebp]
	mov	edx, DWORD PTR _names$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	lea	ecx, DWORD PTR _name$71309[ebp]
	call	??0UString@@QAE@PB_W@Z			; UString::UString
; Line 308
	lea	ecx, DWORD PTR _name$71309[ebp]
	call	?MakeLower_Ascii@UString@@QAEXXZ	; UString::MakeLower_Ascii
; Line 309
	lea	ecx, DWORD PTR _name$71309[ebp]
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN58@SetPropert
; Line 310
	mov	DWORD PTR $T72117[ebp], -2147024809	; 80070057H
	lea	ecx, DWORD PTR _name$71309[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T72117[ebp]
	jmp	$LN62@SetPropert
$LN58@SetPropert:
; Line 312
	mov	edx, DWORD PTR _i$71305[ebp]
	shl	edx, 4
	add	edx, DWORD PTR _values$[ebp]
	mov	DWORD PTR _prop$71313[ebp], edx
; Line 314
	lea	ecx, DWORD PTR _name$71309[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	movzx	eax, WORD PTR [eax]
	cmp	eax, 120				; 00000078H
	jne	$LN57@SetPropert
; Line 316
	mov	DWORD PTR _level$71315[ebp], 9
; Line 317
	push	1
	lea	ecx, DWORD PTR _name$71309[ebp]
	call	?Ptr@UString@@QBEPB_WI@Z		; UString::Ptr
	push	eax
	lea	ecx, DWORD PTR $T72118[ebp]
	call	??0UString@@QAE@PB_W@Z			; UString::UString
	lea	ecx, DWORD PTR _level$71315[ebp]
	push	ecx
	mov	edx, DWORD PTR _prop$71313[ebp]
	push	edx
	lea	eax, DWORD PTR $T72118[ebp]
	push	eax
	call	?ParsePropToUInt32@@YGJABVUString@@ABUtagPROPVARIANT@@AAI@Z ; ParsePropToUInt32
	mov	DWORD PTR ___result__$71316[ebp], eax
	lea	ecx, DWORD PTR $T72118[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	cmp	DWORD PTR ___result__$71316[ebp], 0
	je	SHORT $LN56@SetPropert
	mov	ecx, DWORD PTR ___result__$71316[ebp]
	mov	DWORD PTR $T72119[ebp], ecx
	lea	ecx, DWORD PTR _name$71309[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T72119[ebp]
	jmp	$LN62@SetPropert
$LN56@SetPropert:
; Line 318
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _level$71315[ebp]
	mov	DWORD PTR [edx+172], eax
; Line 319
	mov	ecx, DWORD PTR _level$71315[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 160				; 000000a0H
	call	?AddProp_Level@CMethodProps@@QAEXI@Z	; CMethodProps::AddProp_Level
	jmp	$LN55@SetPropert
$LN57@SetPropert:
; Line 321
	push	OFFSET $SG71322
	lea	edx, DWORD PTR _name$71309[ebp]
	push	edx
	call	??8@YG_NABVUString@@PB_W@Z		; operator==
	movzx	eax, al
	test	eax, eax
	je	$LN54@SetPropert
; Line 323
	mov	ecx, DWORD PTR _prop$71313[ebp]
	movzx	edx, WORD PTR [ecx]
	cmp	edx, 8
	jne	$LN53@SetPropert
; Line 325
	mov	eax, DWORD PTR _prop$71313[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	lea	ecx, DWORD PTR _m$71324[ebp]
	call	??0UString@@QAE@PB_W@Z			; UString::UString
	lea	ecx, DWORD PTR _m2$71325[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
; Line 326
	lea	ecx, DWORD PTR _m$71324[ebp]
	call	?MakeLower_Ascii@UString@@QAEXXZ	; UString::MakeLower_Ascii
; Line 327
	push	58					; 0000003aH
	lea	ecx, DWORD PTR _m$71324[ebp]
	call	?Find@UString@@QBEH_W@Z			; UString::Find
	mov	DWORD PTR _colonPos$71326[ebp], eax
; Line 328
	cmp	DWORD PTR _colonPos$71326[ebp], 0
	jl	SHORT $LN52@SetPropert
; Line 330
	mov	edx, DWORD PTR _colonPos$71326[ebp]
	add	edx, 1
	push	edx
	lea	ecx, DWORD PTR _m$71324[ebp]
	call	?Ptr@UString@@QBEPB_WI@Z		; UString::Ptr
	push	eax
	lea	ecx, DWORD PTR _m2$71325[ebp]
	call	??4UString@@QAEAAV0@PB_W@Z		; UString::operator=
; Line 331
	mov	eax, DWORD PTR _colonPos$71326[ebp]
	push	eax
	lea	ecx, DWORD PTR _m$71324[ebp]
	call	?DeleteFrom@UString@@QAEXI@Z		; UString::DeleteFrom
$LN52@SetPropert:
; Line 334
	mov	DWORD PTR _k$71328[ebp], 0
	jmp	SHORT $LN51@SetPropert
$LN50@SetPropert:
	mov	ecx, DWORD PTR _k$71328[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$71328[ebp], ecx
$LN51@SetPropert:
	cmp	DWORD PTR _k$71328[ebp], 6
	jae	$LN49@SetPropert
; Line 336
	mov	edx, DWORD PTR _k$71328[ebp]
	lea	eax, DWORD PTR _k_SupportedMethods[edx*8]
	mov	DWORD PTR _pair$71332[ebp], eax
; Line 337
	mov	ecx, DWORD PTR _pair$71332[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	lea	ecx, DWORD PTR _m$71324[ebp]
	call	?IsEqualTo@UString@@QBE_NPBD@Z		; UString::IsEqualTo
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN48@SetPropert
; Line 339
	lea	ecx, DWORD PTR _m2$71325[ebp]
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN47@SetPropert
; Line 341
	lea	edx, DWORD PTR _m2$71325[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 160				; 000000a0H
	call	?ParseParamsFromString@CMethodProps@@QAEJABVUString@@@Z ; CMethodProps::ParseParamsFromString
	mov	DWORD PTR ___result__$71335[ebp], eax
	cmp	DWORD PTR ___result__$71335[ebp], 0
	je	SHORT $LN47@SetPropert
	mov	eax, DWORD PTR ___result__$71335[ebp]
	mov	DWORD PTR $T72120[ebp], eax
	lea	ecx, DWORD PTR _m2$71325[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	lea	ecx, DWORD PTR _m$71324[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	lea	ecx, DWORD PTR _name$71309[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T72120[ebp]
	jmp	$LN62@SetPropert
$LN47@SetPropert:
; Line 343
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pair$71332[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx+184], eax
; Line 344
	jmp	SHORT $LN49@SetPropert
$LN48@SetPropert:
; Line 346
	jmp	$LN50@SetPropert
$LN49@SetPropert:
; Line 347
	cmp	DWORD PTR _k$71328[ebp], 6
	jne	SHORT $LN45@SetPropert
; Line 348
	mov	DWORD PTR $T72121[ebp], -2147024809	; 80070057H
	lea	ecx, DWORD PTR _m2$71325[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	lea	ecx, DWORD PTR _m$71324[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	lea	ecx, DWORD PTR _name$71309[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T72121[ebp]
	jmp	$LN62@SetPropert
$LN45@SetPropert:
; Line 349
	lea	ecx, DWORD PTR _m2$71325[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	lea	ecx, DWORD PTR _m$71324[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	jmp	$LN44@SetPropert
$LN53@SetPropert:
; Line 350
	mov	ecx, DWORD PTR _prop$71313[ebp]
	movzx	edx, WORD PTR [ecx]
	cmp	edx, 19					; 00000013H
	jne	SHORT $LN43@SetPropert
; Line 353
	mov	DWORD PTR _k$71343[ebp], 0
	jmp	SHORT $LN42@SetPropert
$LN41@SetPropert:
	mov	eax, DWORD PTR _k$71343[ebp]
	add	eax, 1
	mov	DWORD PTR _k$71343[ebp], eax
$LN42@SetPropert:
	cmp	DWORD PTR _k$71343[ebp], 6
	jae	SHORT $LN40@SetPropert
; Line 355
	mov	ecx, DWORD PTR _k$71343[ebp]
	mov	edx, DWORD PTR _k_SupportedMethods[ecx*8]
	mov	DWORD PTR _method$71347[ebp], edx
; Line 356
	mov	eax, DWORD PTR _prop$71313[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, DWORD PTR _method$71347[ebp]
	jne	SHORT $LN39@SetPropert
; Line 358
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _method$71347[ebp]
	mov	DWORD PTR [edx+184], eax
; Line 359
	jmp	SHORT $LN40@SetPropert
$LN39@SetPropert:
; Line 361
	jmp	SHORT $LN41@SetPropert
$LN40@SetPropert:
; Line 362
	cmp	DWORD PTR _k$71343[ebp], 6
	jne	SHORT $LN38@SetPropert
; Line 363
	mov	DWORD PTR $T72122[ebp], -2147024809	; 80070057H
	lea	ecx, DWORD PTR _name$71309[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T72122[ebp]
	jmp	$LN62@SetPropert
$LN38@SetPropert:
; Line 365
	jmp	SHORT $LN44@SetPropert
$LN43@SetPropert:
; Line 366
	mov	DWORD PTR $T72123[ebp], -2147024809	; 80070057H
	lea	ecx, DWORD PTR _name$71309[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T72123[ebp]
	jmp	$LN62@SetPropert
$LN44@SetPropert:
	jmp	$LN55@SetPropert
$LN54@SetPropert:
; Line 368
	push	OFFSET $SG71357
	lea	ecx, DWORD PTR _name$71309[ebp]
	call	?IsPrefixedBy@UString@@QBE_NPB_W@Z	; UString::IsPrefixedBy
	movzx	ecx, al
	test	ecx, ecx
	je	$LN35@SetPropert
; Line 370
	mov	edx, DWORD PTR _prop$71313[ebp]
	movzx	eax, WORD PTR [edx]
	cmp	eax, 8
	je	SHORT $LN34@SetPropert
; Line 371
	mov	DWORD PTR $T72124[ebp], -2147024809	; 80070057H
	lea	ecx, DWORD PTR _name$71309[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T72124[ebp]
	jmp	$LN62@SetPropert
$LN34@SetPropert:
; Line 373
	mov	ecx, DWORD PTR _prop$71313[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	lea	ecx, DWORD PTR _m$71361[ebp]
	call	??0UString@@QAE@PB_W@Z			; UString::UString
; Line 374
	lea	ecx, DWORD PTR _m$71361[ebp]
	call	?MakeLower_Ascii@UString@@QAEXXZ	; UString::MakeLower_Ascii
; Line 375
	push	OFFSET $SG71363
	lea	ecx, DWORD PTR _m$71361[ebp]
	call	?IsPrefixedBy@UString@@QBE_NPB_W@Z	; UString::IsPrefixedBy
	movzx	eax, al
	test	eax, eax
	je	$LN33@SetPropert
; Line 377
	push	3
	lea	ecx, DWORD PTR _m$71361[ebp]
	call	?DeleteFrontal@UString@@QAEXI@Z		; UString::DeleteFrontal
; Line 378
	push	OFFSET $SG71365
	lea	ecx, DWORD PTR _m$71361[ebp]
	push	ecx
	call	??8@YG_NABVUString@@PB_W@Z		; operator==
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN32@SetPropert
; Line 379
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+182], 1
	jmp	SHORT $LN31@SetPropert
$LN32@SetPropert:
; Line 380
	push	OFFSET $SG71368
	lea	ecx, DWORD PTR _m$71361[ebp]
	push	ecx
	call	??8@YG_NABVUString@@PB_W@Z		; operator==
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN30@SetPropert
; Line 381
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+182], 2
	jmp	SHORT $LN31@SetPropert
$LN30@SetPropert:
; Line 382
	push	OFFSET $SG71372
	lea	ecx, DWORD PTR _m$71361[ebp]
	push	ecx
	call	??8@YG_NABVUString@@PB_W@Z		; operator==
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN27@SetPropert
	lea	ecx, DWORD PTR _m$71361[ebp]
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN28@SetPropert
$LN27@SetPropert:
; Line 383
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+182], 3
; Line 384
	jmp	SHORT $LN31@SetPropert
$LN28@SetPropert:
; Line 385
	mov	DWORD PTR $T72125[ebp], -2147024809	; 80070057H
	lea	ecx, DWORD PTR _m$71361[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	lea	ecx, DWORD PTR _name$71309[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T72125[ebp]
	jmp	$LN62@SetPropert
$LN31@SetPropert:
; Line 386
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+181], 1
; Line 387
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+188], 1
	jmp	SHORT $LN25@SetPropert
$LN33@SetPropert:
; Line 389
	push	OFFSET $SG71378
	lea	ecx, DWORD PTR _m$71361[ebp]
	push	ecx
	call	??8@YG_NABVUString@@PB_W@Z		; operator==
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN24@SetPropert
; Line 391
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+181], 0
; Line 392
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+188], 1
; Line 394
	jmp	SHORT $LN25@SetPropert
$LN24@SetPropert:
; Line 395
	mov	DWORD PTR $T72126[ebp], -2147024809	; 80070057H
	lea	ecx, DWORD PTR _m$71361[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	lea	ecx, DWORD PTR _name$71309[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T72126[ebp]
	jmp	$LN62@SetPropert
$LN25@SetPropert:
; Line 396
	lea	ecx, DWORD PTR _m$71361[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	jmp	$LN55@SetPropert
$LN35@SetPropert:
; Line 398
	push	OFFSET $SG71384
	lea	ecx, DWORD PTR _name$71309[ebp]
	call	?IsPrefixedBy@UString@@QBE_NPB_W@Z	; UString::IsPrefixedBy
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN21@SetPropert
; Line 401
	push	2
	lea	ecx, DWORD PTR _name$71309[ebp]
	call	?Ptr@UString@@QBEPB_WI@Z		; UString::Ptr
	push	eax
	lea	ecx, DWORD PTR $T72127[ebp]
	call	??0UString@@QAE@PB_W@Z			; UString::UString
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 176				; 000000b0H
	push	eax
	mov	ecx, DWORD PTR _numProcessors$[ebp]
	push	ecx
	mov	edx, DWORD PTR _prop$71313[ebp]
	push	edx
	lea	eax, DWORD PTR $T72127[ebp]
	push	eax
	call	?ParseMtProp@@YGJABVUString@@ABUtagPROPVARIANT@@IAAI@Z ; ParseMtProp
	mov	DWORD PTR ___result__$71385[ebp], eax
	lea	ecx, DWORD PTR $T72127[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	cmp	DWORD PTR ___result__$71385[ebp], 0
	je	SHORT $LN20@SetPropert
	mov	ecx, DWORD PTR ___result__$71385[ebp]
	mov	DWORD PTR $T72128[ebp], ecx
	lea	ecx, DWORD PTR _name$71309[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T72128[ebp]
	jmp	$LN62@SetPropert
$LN20@SetPropert:
; Line 402
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+180], 1
	jmp	$LN55@SetPropert
$LN21@SetPropert:
; Line 405
	push	OFFSET $SG71391
	lea	ecx, DWORD PTR _name$71309[ebp]
	call	?IsEqualTo@UString@@QBE_NPBD@Z		; UString::IsEqualTo
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN18@SetPropert
; Line 407
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 189				; 000000bdH
	push	ecx
	mov	edx, DWORD PTR _prop$71313[ebp]
	push	edx
	call	?PROPVARIANT_to_bool@@YGJABUtagPROPVARIANT@@AA_N@Z ; PROPVARIANT_to_bool
	mov	DWORD PTR ___result__$71392[ebp], eax
	cmp	DWORD PTR ___result__$71392[ebp], 0
	je	SHORT $LN17@SetPropert
	mov	eax, DWORD PTR ___result__$71392[ebp]
	mov	DWORD PTR $T72129[ebp], eax
	lea	ecx, DWORD PTR _name$71309[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T72129[ebp]
	jmp	$LN62@SetPropert
$LN17@SetPropert:
	jmp	$LN55@SetPropert
$LN18@SetPropert:
; Line 409
	push	OFFSET $SG71397
	lea	ecx, DWORD PTR _name$71309[ebp]
	call	?IsEqualTo@UString@@QBE_NPBD@Z		; UString::IsEqualTo
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN15@SetPropert
; Line 411
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 191				; 000000bfH
	push	edx
	mov	eax, DWORD PTR _prop$71313[ebp]
	push	eax
	call	?PROPVARIANT_to_bool@@YGJABUtagPROPVARIANT@@AA_N@Z ; PROPVARIANT_to_bool
	mov	DWORD PTR ___result__$71398[ebp], eax
	cmp	DWORD PTR ___result__$71398[ebp], 0
	je	SHORT $LN14@SetPropert
	mov	ecx, DWORD PTR ___result__$71398[ebp]
	mov	DWORD PTR $T72130[ebp], ecx
	lea	ecx, DWORD PTR _name$71309[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T72130[ebp]
	jmp	$LN62@SetPropert
$LN14@SetPropert:
; Line 412
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+191]
	test	eax, eax
	je	SHORT $LN13@SetPropert
; Line 413
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+192], 0
$LN13@SetPropert:
; Line 414
	jmp	$LN55@SetPropert
$LN15@SetPropert:
; Line 415
	push	OFFSET $SG71404
	lea	ecx, DWORD PTR _name$71309[ebp]
	call	?IsEqualTo@UString@@QBE_NPBD@Z		; UString::IsEqualTo
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN11@SetPropert
; Line 417
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 192				; 000000c0H
	push	eax
	mov	ecx, DWORD PTR _prop$71313[ebp]
	push	ecx
	call	?PROPVARIANT_to_bool@@YGJABUtagPROPVARIANT@@AA_N@Z ; PROPVARIANT_to_bool
	mov	DWORD PTR ___result__$71405[ebp], eax
	cmp	DWORD PTR ___result__$71405[ebp], 0
	je	SHORT $LN10@SetPropert
	mov	edx, DWORD PTR ___result__$71405[ebp]
	mov	DWORD PTR $T72131[ebp], edx
	lea	ecx, DWORD PTR _name$71309[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T72131[ebp]
	jmp	$LN62@SetPropert
$LN10@SetPropert:
; Line 418
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+192]
	test	ecx, ecx
	je	SHORT $LN9@SetPropert
; Line 419
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+191], 0
$LN9@SetPropert:
; Line 420
	jmp	$LN55@SetPropert
$LN11@SetPropert:
; Line 421
	push	OFFSET $SG71411
	lea	ecx, DWORD PTR _name$71309[ebp]
	call	?IsEqualTo@UString@@QBE_NPBD@Z		; UString::IsEqualTo
	movzx	eax, al
	test	eax, eax
	je	$LN7@SetPropert
; Line 423
	mov	DWORD PTR _cp$71412[ebp], 1
; Line 424
	push	OFFSET $SG71415
	lea	ecx, DWORD PTR $T72132[ebp]
	call	??0UString@@QAE@PB_W@Z			; UString::UString
	lea	ecx, DWORD PTR _cp$71412[ebp]
	push	ecx
	mov	edx, DWORD PTR _prop$71313[ebp]
	push	edx
	lea	eax, DWORD PTR $T72132[ebp]
	push	eax
	call	?ParsePropToUInt32@@YGJABVUString@@ABUtagPROPVARIANT@@AAI@Z ; ParsePropToUInt32
	mov	DWORD PTR ___result__$71413[ebp], eax
	lea	ecx, DWORD PTR $T72132[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	cmp	DWORD PTR ___result__$71413[ebp], 0
	je	SHORT $LN6@SetPropert
	mov	ecx, DWORD PTR ___result__$71413[ebp]
	mov	DWORD PTR $T72133[ebp], ecx
	lea	ecx, DWORD PTR _name$71309[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T72133[ebp]
	jmp	$LN62@SetPropert
$LN6@SetPropert:
; Line 425
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+193], 1
; Line 426
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _cp$71412[ebp]
	mov	DWORD PTR [eax+196], ecx
	jmp	$LN55@SetPropert
$LN7@SetPropert:
; Line 428
	push	OFFSET $SG71420
	lea	ecx, DWORD PTR _name$71309[ebp]
	call	?IsEqualTo@UString@@QBE_NPBD@Z		; UString::IsEqualTo
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN4@SetPropert
; Line 430
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 190				; 000000beH
	push	eax
	mov	ecx, DWORD PTR _prop$71313[ebp]
	push	ecx
	call	?PROPVARIANT_to_bool@@YGJABUtagPROPVARIANT@@AA_N@Z ; PROPVARIANT_to_bool
	mov	DWORD PTR ___result__$71421[ebp], eax
	cmp	DWORD PTR ___result__$71421[ebp], 0
	je	SHORT $LN3@SetPropert
	mov	edx, DWORD PTR ___result__$71421[ebp]
	mov	DWORD PTR $T72134[ebp], edx
	lea	ecx, DWORD PTR _name$71309[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T72134[ebp]
	jmp	SHORT $LN62@SetPropert
$LN3@SetPropert:
; Line 432
	jmp	SHORT $LN55@SetPropert
$LN4@SetPropert:
; Line 434
	mov	eax, DWORD PTR _prop$71313[ebp]
	push	eax
	lea	ecx, DWORD PTR _name$71309[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 160				; 000000a0H
	call	?ParseParamsFromPROPVARIANT@CMethodProps@@QAEJABVUString@@ABUtagPROPVARIANT@@@Z ; CMethodProps::ParseParamsFromPROPVARIANT
	mov	DWORD PTR ___result__$71425[ebp], eax
	cmp	DWORD PTR ___result__$71425[ebp], 0
	je	SHORT $LN55@SetPropert
	mov	edx, DWORD PTR ___result__$71425[ebp]
	mov	DWORD PTR $T72135[ebp], edx
	lea	ecx, DWORD PTR _name$71309[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T72135[ebp]
	jmp	SHORT $LN62@SetPropert
$LN55@SetPropert:
; Line 436
	lea	ecx, DWORD PTR _name$71309[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	jmp	$LN60@SetPropert
$LN59@SetPropert:
; Line 437
	xor	eax, eax
$LN62@SetPropert:
; Line 438
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN71@SetPropert
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 272				; 00000110H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN71@SetPropert:
	DD	6
	DD	$LN70@SetPropert
$LN70@SetPropert:
	DD	-24					; ffffffe8H
	DD	12					; 0000000cH
	DD	$LN64@SetPropert
	DD	-40					; ffffffd8H
	DD	4
	DD	$LN65@SetPropert
	DD	-64					; ffffffc0H
	DD	12					; 0000000cH
	DD	$LN66@SetPropert
	DD	-84					; ffffffacH
	DD	12					; 0000000cH
	DD	$LN67@SetPropert
	DD	-128					; ffffff80H
	DD	12					; 0000000cH
	DD	$LN68@SetPropert
	DD	-156					; ffffff64H
	DD	4
	DD	$LN69@SetPropert
$LN69@SetPropert:
	DB	99					; 00000063H
	DB	112					; 00000070H
	DB	0
$LN68@SetPropert:
	DB	109					; 0000006dH
	DB	0
$LN67@SetPropert:
	DB	109					; 0000006dH
	DB	50					; 00000032H
	DB	0
$LN66@SetPropert:
	DB	109					; 0000006dH
	DB	0
$LN65@SetPropert:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	0
$LN64@SetPropert:
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
?SetProperties@CHandler@NZip@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z ENDP ; NArchive::NZip::CHandler::SetProperties
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Ptr@UString@@QBEPB_WI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pos$ = 8						; size = 4
?Ptr@UString@@QBEPB_WI@Z PROC				; UString::Ptr, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 478
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pos$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	mov	esp, ebp
	pop	ebp
	ret	4
?Ptr@UString@@QBEPB_WI@Z ENDP				; UString::Ptr
_TEXT	ENDS
EXTRN	?MyStringLower_Ascii@@YGXPA_W@Z:PROC		; MyStringLower_Ascii
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?MakeLower_Ascii@UString@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MakeLower_Ascii@UString@@QAEXXZ PROC			; UString::MakeLower_Ascii, COMDAT
; _this$ = ecx
; Line 545
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?MyStringLower_Ascii@@YGXPA_W@Z		; MyStringLower_Ascii
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?MakeLower_Ascii@UString@@QAEXXZ ENDP			; UString::MakeLower_Ascii
_TEXT	ENDS
EXTRN	?StringsAreEqual_Ascii@@YG_NPB_WPBD@Z:PROC	; StringsAreEqual_Ascii
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsEqualTo@UString@@QBE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
?IsEqualTo@UString@@QBE_NPBD@Z PROC			; UString::IsEqualTo, COMDAT
; _this$ = ecx
; Line 547
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	?StringsAreEqual_Ascii@@YG_NPB_WPBD@Z	; StringsAreEqual_Ascii
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?IsEqualTo@UString@@QBE_NPBD@Z ENDP			; UString::IsEqualTo
_TEXT	ENDS
EXTRN	?IsString1PrefixedByString2@@YG_NPB_W0@Z:PROC	; IsString1PrefixedByString2
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsPrefixedBy@UString@@QBE_NPB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
?IsPrefixedBy@UString@@QBE_NPB_W@Z PROC			; UString::IsPrefixedBy, COMDAT
; _this$ = ecx
; Line 554
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	?IsString1PrefixedByString2@@YG_NPB_W0@Z ; IsString1PrefixedByString2
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?IsPrefixedBy@UString@@QBE_NPB_W@Z ENDP			; UString::IsPrefixedBy
_TEXT	ENDS
EXTRN	?FindCharPosInString@@YGHPB_W_W@Z:PROC		; FindCharPosInString
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Find@UString@@QBEH_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_c$ = 8							; size = 2
?Find@UString@@QBEH_W@Z PROC				; UString::Find, COMDAT
; _this$ = ecx
; Line 567
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	movzx	eax, WORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	?FindCharPosInString@@YGHPB_W_W@Z	; FindCharPosInString
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Find@UString@@QBEH_W@Z ENDP				; UString::Find
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?DeleteFrom@UString@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?DeleteFrom@UString@@QAEXI@Z PROC			; UString::DeleteFrom, COMDAT
; _this$ = ecx
; Line 604
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 605
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN2@DeleteFrom
; Line 607
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _index$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 608
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	xor	eax, eax
	mov	ecx, DWORD PTR _index$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
$LN2@DeleteFrom:
; Line 610
	mov	esp, ebp
	pop	ebp
	ret	4
?DeleteFrom@UString@@QAEXI@Z ENDP			; UString::DeleteFrom
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??8@YG_NABVUString@@PB_W@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
??8@YG_NABVUString@@PB_W@Z PROC				; operator==, COMDAT
; Line 617
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, esp
	mov	eax, DWORD PTR _s2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s1$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	DWORD PTR __imp__wcscmp
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	neg	eax
	sbb	eax, eax
	add	eax, 1
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
??8@YG_NABVUString@@PB_W@Z ENDP				; operator==
_TEXT	ENDS
EXTRN	?AddProp32@CProps@@QAEXKI@Z:PROC		; CProps::AddProp32
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?AddProp_Level@CMethodProps@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_level$ = 8						; size = 4
?AddProp_Level@CMethodProps@@QAEXI@Z PROC		; CMethodProps::AddProp_Level, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\methodprops.h
; Line 164
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 165
	mov	eax, DWORD PTR _level$[ebp]
	push	eax
	push	15					; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddProp32@CProps@@QAEXKI@Z		; CProps::AddProp32
; Line 166
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?AddProp_Level@CMethodProps@@QAEXI@Z ENDP		; CMethodProps::AddProp_Level
_TEXT	ENDS
PUBLIC	?Init@CBaseProps@NZip@NArchive@@QAEXXZ		; NArchive::NZip::CBaseProps::Init
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?InitMethodProps@CHandler@NZip@NArchive@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?InitMethodProps@CHandler@NZip@NArchive@@AAEXXZ PROC	; NArchive::NZip::CHandler::InitMethodProps, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\ziphandler.h
; Line 59
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 60
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 168				; 000000a8H
	call	?Init@CBaseProps@NZip@NArchive@@QAEXXZ	; NArchive::NZip::CBaseProps::Init
; Line 61
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+192], -1
; Line 62
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+196], 0
; Line 63
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+197], 1
; Line 64
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+198], 0
; Line 65
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+199], 0
; Line 66
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+200], 0
; Line 67
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+201], 0
; Line 68
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+204], 1
; Line 69
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?InitMethodProps@CHandler@NZip@NArchive@@AAEXXZ ENDP	; NArchive::NZip::CHandler::InitMethodProps
_TEXT	ENDS
PUBLIC	?Clear@CProps@@QAEXXZ				; CProps::Clear
EXTRN	?GetNumberOfProcessors@NSystem@NWindows@@YGIXZ:PROC ; NWindows::NSystem::GetNumberOfProcessors
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Init@CBaseProps@NZip@NArchive@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Init@CBaseProps@NZip@NArchive@@QAEXXZ PROC		; NArchive::NZip::CBaseProps::Init, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\zipcompressionmode.h
; Line 30
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@CProps@@QAEXXZ			; CProps::Clear
; Line 32
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], -1
; Line 34
	call	?GetNumberOfProcessors@NSystem@NWindows@@YGIXZ ; NWindows::NSystem::GetNumberOfProcessors
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 35
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+20], 0
; Line 37
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+21], 0
; Line 38
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+22], 3
; Line 39
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Init@CBaseProps@NZip@NArchive@@QAEXXZ ENDP		; NArchive::NZip::CBaseProps::Init
_TEXT	ENDS
PUBLIC	?Clear@?$CObjectVector@UCProp@@@@QAEXXZ		; CObjectVector<CProp>::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Clear@CProps@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@CProps@@QAEXXZ PROC				; CProps::Clear, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\methodprops.h
; Line 31
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CObjectVector@UCProp@@@@QAEXXZ	; CObjectVector<CProp>::Clear
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@CProps@@QAEXXZ ENDP				; CProps::Clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ PROC	; CMyComPtr<IInStream>::operator IInStream *, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ENDP	; CMyComPtr<IInStream>::operator IInStream *
_TEXT	ENDS
PUBLIC	??0?$CRecordVector@PAX@@QAE@XZ			; CRecordVector<void *>::CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CObjectVector@UCProp@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@UCProp@@@@QAE@XZ PROC		; CObjectVector<CProp>::CObjectVector<CProp>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@UCProp@@@@QAE@XZ ENDP		; CObjectVector<CProp>::CObjectVector<CProp>
_TEXT	ENDS
PUBLIC	?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z	; CRecordVector<void *>::AddInReserved
PUBLIC	??0CProp@@QAE@ABU0@@Z				; CProp::CProp
PUBLIC	??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z	; CObjectVector<CProp>::operator[]
PUBLIC	?Reserve@?$CRecordVector@PAX@@QAEXI@Z		; CRecordVector<void *>::Reserve
PUBLIC	?Size@?$CObjectVector@UCProp@@@@QBEIXZ		; CObjectVector<CProp>::Size
EXTRN	??2@YAPAXI@Z:PROC				; operator new
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z$0
__ehfuncinfo$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
tv84 = -36						; size = 4
$T72173 = -32						; size = 4
$T72172 = -28						; size = 4
_i$71499 = -24						; size = 4
_size$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_v$ = 8							; size = 4
??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z PROC	; CObjectVector<CProp>::operator=, COMDAT
; _this$ = ecx
; Line 430
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 431
	mov	eax, DWORD PTR _v$[ebp]
	cmp	eax, DWORD PTR _this$[ebp]
	jne	SHORT $LN4@operator@3
; Line 432
	mov	eax, DWORD PTR _this$[ebp]
	jmp	$LN5@operator@3
$LN4@operator@3:
; Line 433
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CObjectVector@UCProp@@@@QAEXXZ	; CObjectVector<CProp>::Clear
; Line 434
	mov	ecx, DWORD PTR _v$[ebp]
	call	?Size@?$CObjectVector@UCProp@@@@QBEIXZ	; CObjectVector<CProp>::Size
	mov	DWORD PTR _size$[ebp], eax
; Line 435
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reserve@?$CRecordVector@PAX@@QAEXI@Z	; CRecordVector<void *>::Reserve
; Line 436
	mov	DWORD PTR _i$71499[ebp], 0
	jmp	SHORT $LN3@operator@3
$LN2@operator@3:
	mov	edx, DWORD PTR _i$71499[ebp]
	add	edx, 1
	mov	DWORD PTR _i$71499[ebp], edx
$LN3@operator@3:
	mov	eax, DWORD PTR _i$71499[ebp]
	cmp	eax, DWORD PTR _size$[ebp]
	jae	SHORT $LN1@operator@3
; Line 437
	push	24					; 00000018H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T72173[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T72173[ebp], 0
	je	SHORT $LN7@operator@3
	mov	ecx, DWORD PTR _i$71499[ebp]
	push	ecx
	mov	ecx, DWORD PTR _v$[ebp]
	call	??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ; CObjectVector<CProp>::operator[]
	push	eax
	mov	ecx, DWORD PTR $T72173[ebp]
	call	??0CProp@@QAE@ABU0@@Z
	mov	DWORD PTR tv84[ebp], eax
	jmp	SHORT $LN8@operator@3
$LN7@operator@3:
	mov	DWORD PTR tv84[ebp], 0
$LN8@operator@3:
	mov	edx, DWORD PTR tv84[ebp]
	mov	DWORD PTR $T72172[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T72172[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ; CRecordVector<void *>::AddInReserved
	jmp	SHORT $LN2@operator@3
$LN1@operator@3:
; Line 438
	mov	eax, DWORD PTR _this$[ebp]
$LN5@operator@3:
; Line 439
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z$0:
	mov	eax, DWORD PTR $T72173[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z ENDP	; CObjectVector<CProp>::operator=
PUBLIC	?Size@?$CRecordVector@PAX@@QBEIXZ		; CRecordVector<void *>::Size
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Size@?$CObjectVector@UCProp@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@UCProp@@@@QBEIXZ PROC		; CObjectVector<CProp>::Size, COMDAT
; _this$ = ecx
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@UCProp@@@@QBEIXZ ENDP		; CObjectVector<CProp>::Size
_TEXT	ENDS
PUBLIC	??A?$CRecordVector@PAX@@QBEABQAXI@Z		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z PROC	; CObjectVector<CProp>::operator[], COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ENDP	; CObjectVector<CProp>::operator[]
_TEXT	ENDS
PUBLIC	??1?$CRecordVector@PAX@@QAE@XZ			; CRecordVector<void *>::~CRecordVector<void *>
PUBLIC	??_GCProp@@QAEPAXI@Z				; CProp::`scalar deleting destructor'
PUBLIC	??A?$CRecordVector@PAX@@QAEAAPAXI@Z		; CRecordVector<void *>::operator[]
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@UCProp@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@UCProp@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@UCProp@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@UCProp@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T72190 = -28						; size = 4
$T72189 = -24						; size = 4
_i$71519 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@UCProp@@@@QAE@XZ PROC		; CObjectVector<CProp>::~CObjectVector<CProp>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$71519[ebp], eax
$LN2@CObjectVec:
	cmp	DWORD PTR _i$71519[ebp], 0
	je	SHORT $LN3@CObjectVec
; Line 489
	mov	eax, DWORD PTR _i$71519[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$71519[ebp], eax
	mov	ecx, DWORD PTR _i$71519[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T72190[ebp], edx
	mov	eax, DWORD PTR $T72190[ebp]
	mov	DWORD PTR $T72189[ebp], eax
	cmp	DWORD PTR $T72189[ebp], 0
	je	SHORT $LN5@CObjectVec
	push	1
	mov	ecx, DWORD PTR $T72189[ebp]
	call	??_GCProp@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec
$LN5@CObjectVec:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec:
	jmp	SHORT $LN2@CObjectVec
$LN3@CObjectVec:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@UCProp@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@UCProp@@@@QAE@XZ ENDP		; CObjectVector<CProp>::~CObjectVector<CProp>
PUBLIC	?Clear@?$CRecordVector@PAX@@QAEXXZ		; CRecordVector<void *>::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Clear@?$CObjectVector@UCProp@@@@QAEXXZ
_TEXT	SEGMENT
tv75 = -20						; size = 4
$T72203 = -16						; size = 4
$T72202 = -12						; size = 4
_i$71528 = -8						; size = 4
_this$ = -4						; size = 4
?Clear@?$CObjectVector@UCProp@@@@QAEXXZ PROC		; CObjectVector<CProp>::Clear, COMDAT
; _this$ = ecx
; Line 499
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 500
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$71528[ebp], eax
$LN2@Clear:
	cmp	DWORD PTR _i$71528[ebp], 0
	je	SHORT $LN1@Clear
; Line 501
	mov	eax, DWORD PTR _i$71528[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$71528[ebp], eax
	mov	ecx, DWORD PTR _i$71528[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T72203[ebp], edx
	mov	eax, DWORD PTR $T72203[ebp]
	mov	DWORD PTR $T72202[ebp], eax
	cmp	DWORD PTR $T72202[ebp], 0
	je	SHORT $LN5@Clear
	push	1
	mov	ecx, DWORD PTR $T72202[ebp]
	call	??_GCProp@@QAEPAXI@Z
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN6@Clear
$LN5@Clear:
	mov	DWORD PTR tv75[ebp], 0
$LN6@Clear:
	jmp	SHORT $LN2@Clear
$LN1@Clear:
; Line 502
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CRecordVector@PAX@@QAEXXZ	; CRecordVector<void *>::Clear
; Line 503
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CObjectVector@UCProp@@@@QAEXXZ ENDP		; CObjectVector<CProp>::Clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@E@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@E@@QAE@XZ PROC			; CRecordVector<unsigned char>::CRecordVector<unsigned char>, COMDAT
; _this$ = ecx
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@E@@QAE@XZ ENDP			; CRecordVector<unsigned char>::CRecordVector<unsigned char>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@E@@QAE@XZ
_TEXT	SEGMENT
$T72210 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@E@@QAE@XZ PROC			; CRecordVector<unsigned char>::~CRecordVector<unsigned char>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T72210[ebp], ecx
	mov	edx, DWORD PTR $T72210[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@E@@QAE@XZ ENDP			; CRecordVector<unsigned char>::~CRecordVector<unsigned char>
_TEXT	ENDS
PUBLIC	?ReserveOnePosition@?$CRecordVector@E@@AAEXXZ	; CRecordVector<unsigned char>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@E@@QAEIE@Z
_TEXT	SEGMENT
tv71 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 1
?Add@?$CRecordVector@E@@QAEIE@Z PROC			; CRecordVector<unsigned char>::Add, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@E@@AAEXXZ ; CRecordVector<unsigned char>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	dl, BYTE PTR _item$[ebp]
	mov	BYTE PTR [ecx+eax], dl
; Line 201
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv71[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv71[ebp]
; Line 202
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CRecordVector@E@@QAEIE@Z ENDP			; CRecordVector<unsigned char>::Add
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEAAVCItemEx@NZip@NArchive@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEAAVCItemEx@NZip@NArchive@@I@Z PROC ; CObjectVector<NArchive::NZip::CItemEx>::operator[], COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEAAVCItemEx@NZip@NArchive@@I@Z ENDP ; CObjectVector<NArchive::NZip::CItemEx>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ PROC ; CObjectVector<NArchive::NZip::CUpdateItem>::CObjectVector<NArchive::NZip::CUpdateItem>, COMDAT
; _this$ = ecx
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ ENDP ; CObjectVector<NArchive::NZip::CUpdateItem>::CObjectVector<NArchive::NZip::CUpdateItem>
_TEXT	ENDS
PUBLIC	?Add@?$CRecordVector@PAX@@QAEIQAX@Z		; CRecordVector<void *>::Add
PUBLIC	??0CUpdateItem@NZip@NArchive@@QAE@ABU012@@Z	; NArchive::NZip::CUpdateItem::CUpdateItem
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Add@?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAEIABUCUpdateItem@NZip@NArchive@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Add@?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAEIABUCUpdateItem@NZip@NArchive@@@Z$0
__ehfuncinfo$?Add@?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAEIABUCUpdateItem@NZip@NArchive@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Add@?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAEIABUCUpdateItem@NZip@NArchive@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?Add@?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAEIABUCUpdateItem@NZip@NArchive@@@Z
_TEXT	SEGMENT
tv74 = -28						; size = 4
$T72221 = -24						; size = 4
$T72220 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_item$ = 8						; size = 4
?Add@?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAEIABUCUpdateItem@NZip@NArchive@@@Z PROC ; CObjectVector<NArchive::NZip::CUpdateItem>::Add, COMDAT
; _this$ = ecx
; Line 459
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Add@?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAEIABUCUpdateItem@NZip@NArchive@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	72					; 00000048H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T72221[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T72221[ebp], 0
	je	SHORT $LN3@Add
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T72221[ebp]
	call	??0CUpdateItem@NZip@NArchive@@QAE@ABU012@@Z
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@Add
$LN3@Add:
	mov	DWORD PTR tv74[ebp], 0
$LN4@Add:
	mov	ecx, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T72220[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T72220[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Add@?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAEIABUCUpdateItem@NZip@NArchive@@@Z$0:
	mov	eax, DWORD PTR $T72221[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Add@?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAEIABUCUpdateItem@NZip@NArchive@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Add@?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAEIABUCUpdateItem@NZip@NArchive@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Add@?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAEIABUCUpdateItem@NZip@NArchive@@@Z ENDP ; CObjectVector<NArchive::NZip::CUpdateItem>::Add
PUBLIC	??_GCUpdateItem@NZip@NArchive@@QAEPAXI@Z	; NArchive::NZip::CUpdateItem::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T72234 = -28						; size = 4
$T72233 = -24						; size = 4
_i$71580 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ PROC ; CObjectVector<NArchive::NZip::CUpdateItem>::~CObjectVector<NArchive::NZip::CUpdateItem>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$71580[ebp], eax
$LN2@CObjectVec@2:
	cmp	DWORD PTR _i$71580[ebp], 0
	je	SHORT $LN3@CObjectVec@2
; Line 489
	mov	eax, DWORD PTR _i$71580[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$71580[ebp], eax
	mov	ecx, DWORD PTR _i$71580[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T72234[ebp], edx
	mov	eax, DWORD PTR $T72234[ebp]
	mov	DWORD PTR $T72233[ebp], eax
	cmp	DWORD PTR $T72233[ebp], 0
	je	SHORT $LN5@CObjectVec@2
	push	1
	mov	ecx, DWORD PTR $T72233[ebp]
	call	??_GCUpdateItem@NZip@NArchive@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@2
$LN5@CObjectVec@2:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@2:
	jmp	SHORT $LN2@CObjectVec@2
$LN3@CObjectVec@2:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@UCUpdateItem@NZip@NArchive@@@@QAE@XZ ENDP ; CObjectVector<NArchive::NZip::CUpdateItem>::~CObjectVector<NArchive::NZip::CUpdateItem>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CMyComPtr@UICryptoGetTextPassword2@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UICryptoGetTextPassword2@@@@QAE@XZ PROC	; CMyComPtr<ICryptoGetTextPassword2>::CMyComPtr<ICryptoGetTextPassword2>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UICryptoGetTextPassword2@@@@QAE@XZ ENDP	; CMyComPtr<ICryptoGetTextPassword2>::CMyComPtr<ICryptoGetTextPassword2>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICryptoGetTextPassword2@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICryptoGetTextPassword2@@@@QAE@XZ PROC	; CMyComPtr<ICryptoGetTextPassword2>::~CMyComPtr<ICryptoGetTextPassword2>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICryptoGetTextPassword2@@@@QAE@XZ ENDP	; CMyComPtr<ICryptoGetTextPassword2>::~CMyComPtr<ICryptoGetTextPassword2>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UICryptoGetTextPassword2@@@@QBEPAUICryptoGetTextPassword2@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UICryptoGetTextPassword2@@@@QBEPAUICryptoGetTextPassword2@@XZ PROC ; CMyComPtr<ICryptoGetTextPassword2>::operator ICryptoGetTextPassword2 *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UICryptoGetTextPassword2@@@@QBEPAUICryptoGetTextPassword2@@XZ ENDP ; CMyComPtr<ICryptoGetTextPassword2>::operator ICryptoGetTextPassword2 *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UICryptoGetTextPassword2@@@@QAEPAPAUICryptoGetTextPassword2@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UICryptoGetTextPassword2@@@@QAEPAPAUICryptoGetTextPassword2@@XZ PROC ; CMyComPtr<ICryptoGetTextPassword2>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UICryptoGetTextPassword2@@@@QAEPAPAUICryptoGetTextPassword2@@XZ ENDP ; CMyComPtr<ICryptoGetTextPassword2>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UICryptoGetTextPassword2@@@@QBEPAUICryptoGetTextPassword2@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UICryptoGetTextPassword2@@@@QBEPAUICryptoGetTextPassword2@@XZ PROC ; CMyComPtr<ICryptoGetTextPassword2>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UICryptoGetTextPassword2@@@@QBEPAUICryptoGetTextPassword2@@XZ ENDP ; CMyComPtr<ICryptoGetTextPassword2>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@PAUIArchiveUpdateCallback@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??0?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@PAUIArchiveUpdateCallback@@@Z PROC ; CMyComPtr<IArchiveUpdateCallback>::CMyComPtr<IArchiveUpdateCallback>, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@CMyComPtr@2
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@2:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@PAUIArchiveUpdateCallback@@@Z ENDP ; CMyComPtr<IArchiveUpdateCallback>::CMyComPtr<IArchiveUpdateCallback>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@XZ PROC	; CMyComPtr<IArchiveUpdateCallback>::~CMyComPtr<IArchiveUpdateCallback>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@3:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@XZ ENDP	; CMyComPtr<IArchiveUpdateCallback>::~CMyComPtr<IArchiveUpdateCallback>
_TEXT	ENDS
EXTRN	??0CPropVariant@NCOM@NWindows@@QAE@ABV012@@Z:PROC ; NWindows::NCOM::CPropVariant::CPropVariant
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CProp@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CProp@@QAE@ABU0@@Z PROC				; CProp::CProp, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+4]
	mov	BYTE PTR [eax+4], dl
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0CPropVariant@NCOM@NWindows@@QAE@ABV012@@Z ; NWindows::NCOM::CPropVariant::CPropVariant
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CProp@@QAE@ABU0@@Z ENDP				; CProp::CProp
_TEXT	ENDS
PUBLIC	??1CProp@@QAE@XZ				; CProp::~CProp
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCProp@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCProp@@QAEPAXI@Z PROC				; CProp::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CProp@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCProp@@QAEPAXI@Z ENDP				; CProp::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	??0AString@@QAE@ABV0@@Z:PROC			; AString::AString
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CUpdateItem@NZip@NArchive@@QAE@ABU012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CUpdateItem@NZip@NArchive@@QAE@ABU012@@Z PROC	; NArchive::NZip::CUpdateItem::CUpdateItem, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+1]
	mov	BYTE PTR [eax+1], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+2]
	mov	BYTE PTR [eax+2], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+3]
	mov	BYTE PTR [eax+3], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+4]
	mov	BYTE PTR [eax+4], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	ecx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], ecx
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 32					; 00000020H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??0AString@@QAE@ABV0@@Z			; AString::AString
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR [eax+48]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+44], ecx
	mov	DWORD PTR [eax+48], edx
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [ecx+56]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+52], edx
	mov	DWORD PTR [ecx+56], eax
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+60]
	mov	ecx, DWORD PTR [edx+64]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+60], eax
	mov	DWORD PTR [edx+64], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CUpdateItem@NZip@NArchive@@QAE@ABU012@@Z ENDP	; NArchive::NZip::CUpdateItem::CUpdateItem
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??_GCUpdateItem@NZip@NArchive@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCUpdateItem@NZip@NArchive@@QAEPAXI@Z PROC		; NArchive::NZip::CUpdateItem::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CUpdateItem@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCUpdateItem@NZip@NArchive@@QAEPAXI@Z ENDP		; NArchive::NZip::CUpdateItem::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CProp@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CProp@@QAE@XZ PROC					; CProp::~CProp, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CProp@@QAE@XZ ENDP					; CProp::~CProp
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@PAX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@PAX@@QAE@XZ PROC			; CRecordVector<void *>::CRecordVector<void *>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@PAX@@QAE@XZ ENDP			; CRecordVector<void *>::CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@PAX@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@PAX@@QBEIXZ PROC			; CRecordVector<void *>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@PAX@@QBEIXZ ENDP			; CRecordVector<void *>::Size
_TEXT	ENDS
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Reserve@?$CRecordVector@PAX@@QAEXI@Z
_TEXT	SEGMENT
$T72277 = -16						; size = 4
$T72276 = -12						; size = 4
_p$71648 = -8						; size = 4
_this$ = -4						; size = 4
_newCapacity$ = 8					; size = 4
?Reserve@?$CRecordVector@PAX@@QAEXI@Z PROC		; CRecordVector<void *>::Reserve, COMDAT
; _this$ = ecx
; Line 61
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 62
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	SHORT $LN3@Reserve
; Line 64
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T72276[ebp], eax
	mov	eax, DWORD PTR $T72276[ebp]
	mov	DWORD PTR _p$71648[ebp], eax
; Line 65
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@Reserve
; Line 66
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$71648[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@Reserve:
; Line 67
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T72277[ebp], edx
	mov	eax, DWORD PTR $T72277[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 68
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$71648[ebp]
	mov	DWORD PTR [ecx], edx
; Line 69
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@Reserve:
; Line 71
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Reserve@?$CRecordVector@PAX@@QAEXI@Z ENDP		; CRecordVector<void *>::Reserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@PAX@@QAE@XZ
_TEXT	SEGMENT
$T72280 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@PAX@@QAE@XZ PROC			; CRecordVector<void *>::~CRecordVector<void *>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T72280[ebp], ecx
	mov	edx, DWORD PTR $T72280[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@PAX@@QAE@XZ ENDP			; CRecordVector<void *>::~CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Clear@?$CRecordVector@PAX@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$CRecordVector@PAX@@QAEXXZ PROC			; CRecordVector<void *>::Clear, COMDAT
; _this$ = ecx
; Line 131
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CRecordVector@PAX@@QAEXXZ ENDP			; CRecordVector<void *>::Clear
_TEXT	ENDS
PUBLIC	?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ	; CRecordVector<void *>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@PAX@@QAEIQAX@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?Add@?$CRecordVector@PAX@@QAEIQAX@Z PROC		; CRecordVector<void *>::Add, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ; CRecordVector<void *>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 201
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv72[ebp]
; Line 202
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CRecordVector@PAX@@QAEIQAX@Z ENDP		; CRecordVector<void *>::Add
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z PROC	; CRecordVector<void *>::AddInReserved, COMDAT
; _this$ = ecx
; Line 205
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 206
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 207
	mov	esp, ebp
	pop	ebp
	ret	4
?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ENDP	; CRecordVector<void *>::AddInReserved
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@PAX@@QBEABQAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@PAX@@QBEABQAXI@Z PROC		; CRecordVector<void *>::operator[], COMDAT
; _this$ = ecx
; Line 227
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@PAX@@QBEABQAXI@Z ENDP		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@PAX@@QAEAAPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@PAX@@QAEAAPAXI@Z PROC		; CRecordVector<void *>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@PAX@@QAEAAPAXI@Z ENDP		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReserveOnePosition@?$CRecordVector@E@@AAEXXZ
_TEXT	SEGMENT
$T72294 = -20						; size = 4
$T72293 = -16						; size = 4
_p$71674 = -12						; size = 4
_newCapacity$71673 = -8					; size = 4
_this$ = -4						; size = 4
?ReserveOnePosition@?$CRecordVector@E@@AAEXXZ PROC	; CRecordVector<unsigned char>::ReserveOnePosition, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN3@ReserveOne
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$71673[ebp], ecx
; Line 23
	mov	edx, DWORD PTR _newCapacity$71673[ebp]
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T72293[ebp], eax
	mov	eax, DWORD PTR $T72293[ebp]
	mov	DWORD PTR _p$71674[ebp], eax
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@ReserveOne
; Line 25
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$71674[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne:
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T72294[ebp], edx
	mov	eax, DWORD PTR $T72294[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$71674[ebp]
	mov	DWORD PTR [ecx], edx
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$71673[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ReserveOne:
; Line 30
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveOnePosition@?$CRecordVector@E@@AAEXXZ ENDP	; CRecordVector<unsigned char>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ
_TEXT	SEGMENT
$T72298 = -20						; size = 4
$T72297 = -16						; size = 4
_p$71689 = -12						; size = 4
_newCapacity$71688 = -8					; size = 4
_this$ = -4						; size = 4
?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ PROC	; CRecordVector<void *>::ReserveOnePosition, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@ReserveOne@2
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$71688[ebp], ecx
; Line 23
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$71688[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T72297[ebp], eax
	mov	eax, DWORD PTR $T72297[ebp]
	mov	DWORD PTR _p$71689[ebp], eax
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@ReserveOne@2
; Line 25
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$71689[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne@2:
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T72298[ebp], edx
	mov	eax, DWORD PTR $T72298[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$71689[ebp]
	mov	DWORD PTR [ecx], edx
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$71688[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ReserveOne@2:
; Line 30
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ENDP	; CRecordVector<void *>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$QueryInterface@UICryptoGetTextPassword2@@@?$CMyComPtr@UIArchiveUpdateCallback@@@@QBEJABU_GUID@@PAPAUICryptoGetTextPassword2@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iid$ = 8						; size = 4
_pp$ = 12						; size = 4
??$QueryInterface@UICryptoGetTextPassword2@@@?$CMyComPtr@UIArchiveUpdateCallback@@@@QBEJABU_GUID@@PAPAUICryptoGetTextPassword2@@@Z PROC ; CMyComPtr<IArchiveUpdateCallback>::QueryInterface<ICryptoGetTextPassword2>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 70
	mov	esi, esp
	mov	eax, DWORD PTR _pp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 71
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$QueryInterface@UICryptoGetTextPassword2@@@?$CMyComPtr@UIArchiveUpdateCallback@@@@QBEJABU_GUID@@PAPAUICryptoGetTextPassword2@@@Z ENDP ; CMyComPtr<IArchiveUpdateCallback>::QueryInterface<ICryptoGetTextPassword2>
_TEXT	ENDS
END
