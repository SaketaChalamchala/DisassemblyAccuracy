; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\CPP\7zip\Archive\XzHandler.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

EXTRN	_XZ_SIG:FWORD
_DATA	SEGMENT
_k_LZMA2_Name DD FLAT:$SG69791
_DATA	ENDS
CONST	SEGMENT
$SG69791 DB	'LZMA2', 00H
	ORG $+2
_kProps	DB	07H
	DB	08H
	DB	016H
	ORG $+1
_kArcProps DB	016H
	DB	04aH
	DB	026H
	ORG $+1
$SG70045 DB	'SB', 00H
	ORG $+1
$SG70046 DB	'Delta', 00H
	ORG $+2
$SG70047 DB	'BCJ', 00H
$SG70048 DB	'PPC', 00H
$SG70049 DB	'IA64', 00H
	ORG $+3
$SG70050 DB	'ARM', 00H
$SG70051 DB	'ARMT', 00H
	ORG $+3
$SG70052 DB	'SPARC', 00H
	ORG $+2
$SG70053 DB	'LZMA2', 00H
	ORG $+2
_g_NamePairs DD	01H
	DD	FLAT:$SG70045
	DD	03H
	DD	FLAT:$SG70046
	DD	04H
	DD	FLAT:$SG70047
	DD	05H
	DD	FLAT:$SG70048
	DD	06H
	DD	FLAT:$SG70049
	DD	07H
	DD	FLAT:$SG70050
	DD	08H
	DD	FLAT:$SG70051
	DD	09H
	DD	FLAT:$SG70052
	DD	021H
	DD	FLAT:$SG70053
$SG70082 DB	'NoCheck', 00H
$SG70083 DB	'CRC32', 00H
	ORG $+2
$SG70084 DB	'CRC64', 00H
	ORG $+2
$SG70085 DB	'SHA256', 00H
	ORG $+1
_kChecks DD	FLAT:$SG70082
	DD	FLAT:$SG70083
	DD	00H
	DD	00H
	DD	FLAT:$SG70084
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$SG70085
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
$SG70104 DB	'Check-', 00H
	ORG $+1
$SG70746 DB	'xz', 00H
	ORG $+1
$SG70747 DB	'xz txz', 00H
	ORG $+1
$SG70748 DB	'* .tar', 00H
	ORG $+1
_g_ArcInfo DW	01H
	DB	0cH
	DB	06H
	DW	00H
	ORG $+2
	DD	FLAT:_XZ_SIG
	DD	FLAT:$SG70746
	DD	FLAT:$SG70747
	DD	FLAT:$SG70748
	DD	FLAT:?CreateArc@NXz@NArchive@@YGPAUIInArchive@@XZ
	DD	FLAT:?CreateArcOut@NXz@NArchive@@YGPAUIOutArchive@@XZ
	DD	00H
CONST	ENDS
PUBLIC	?Clear@CStatInfo@NXz@NArchive@@QAEXXZ		; NArchive::NXz::CStatInfo::Clear
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\cpp\7zip\archive\xzhandler.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@CStatInfo@NXz@NArchive@@QAEXXZ PROC		; NArchive::NXz::CStatInfo::Clear
; _this$ = ecx
; Line 45
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 46
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0
; Line 47
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
; Line 48
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
; Line 50
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0
	mov	DWORD PTR [eax+28], 0
; Line 51
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
; Line 53
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+40], 0
; Line 55
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+41], 0
; Line 56
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+42], 0
; Line 58
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+43], 0
; Line 59
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+44], 0
; Line 60
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+45], 0
; Line 61
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+46], 0
; Line 62
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+47], 0
; Line 63
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+48], 0
; Line 64
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+49], 0
; Line 65
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@CStatInfo@NXz@NArchive@@QAEXXZ ENDP		; NArchive::NXz::CStatInfo::Clear
_TEXT	ENDS
PUBLIC	??1AString@@QAE@XZ				; AString::~AString
PUBLIC	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ	; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
PUBLIC	??1?$CMyComPtr@UIInStream@@@@QAE@XZ		; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
PUBLIC	??1CMultiMethodProps@NArchive@@QAE@XZ		; NArchive::CMultiMethodProps::~CMultiMethodProps
PUBLIC	?Init@CHandler@NXz@NArchive@@AAEXXZ		; NArchive::NXz::CHandler::Init
PUBLIC	??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ	; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
PUBLIC	??0?$CMyComPtr@UIInStream@@@@QAE@XZ		; CMyComPtr<IInStream>::CMyComPtr<IInStream>
PUBLIC	??0CStatInfo@NXz@NArchive@@QAE@XZ		; NArchive::NXz::CStatInfo::CStatInfo
PUBLIC	??_7CHandler@NXz@NArchive@@6BISetProperties@@@	; NArchive::NXz::CHandler::`vftable'
PUBLIC	??_7CHandler@NXz@NArchive@@6BIOutArchive@@@	; NArchive::NXz::CHandler::`vftable'
PUBLIC	??_7CHandler@NXz@NArchive@@6BIArchiveOpenSeq@@@	; NArchive::NXz::CHandler::`vftable'
PUBLIC	??_7CHandler@NXz@NArchive@@6BIInArchive@@@	; NArchive::NXz::CHandler::`vftable'
PUBLIC	??0CMyUnknownImp@@QAE@XZ			; CMyUnknownImp::CMyUnknownImp
PUBLIC	??0CMultiMethodProps@NArchive@@QAE@XZ		; NArchive::CMultiMethodProps::CMultiMethodProps
PUBLIC	??0ISetProperties@@QAE@XZ			; ISetProperties::ISetProperties
PUBLIC	??0IOutArchive@@QAE@XZ				; IOutArchive::IOutArchive
PUBLIC	??0IArchiveOpenSeq@@QAE@XZ			; IArchiveOpenSeq::IArchiveOpenSeq
PUBLIC	??0IInArchive@@QAE@XZ				; IInArchive::IInArchive
PUBLIC	??0CHandler@NXz@NArchive@@QAE@XZ		; NArchive::NXz::CHandler::CHandler
PUBLIC	??_R4CHandler@NXz@NArchive@@6BIInArchive@@@	; NArchive::NXz::CHandler::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCHandler@NXz@NArchive@@@8		; NArchive::NXz::CHandler `RTTI Type Descriptor'
PUBLIC	??_R3CHandler@NXz@NArchive@@8			; NArchive::NXz::CHandler::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CHandler@NXz@NArchive@@8			; NArchive::NXz::CHandler::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CHandler@NXz@NArchive@@8		; NArchive::NXz::CHandler::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@IInArchive@@8			; IInArchive::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIInArchive@@@8				; IInArchive `RTTI Type Descriptor'
PUBLIC	??_R3IInArchive@@8				; IInArchive::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IInArchive@@8				; IInArchive::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIUnknown@@@8				; IUnknown `RTTI Type Descriptor'
PUBLIC	??_R3IUnknown@@8				; IUnknown::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IUnknown@@8				; IUnknown::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EC@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
PUBLIC	??_R13?0A@EA@IArchiveOpenSeq@@8			; IArchiveOpenSeq::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AUIArchiveOpenSeq@@@8			; IArchiveOpenSeq `RTTI Type Descriptor'
PUBLIC	??_R3IArchiveOpenSeq@@8				; IArchiveOpenSeq::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IArchiveOpenSeq@@8				; IArchiveOpenSeq::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IArchiveOpenSeq@@8		; IArchiveOpenSeq::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EC@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
PUBLIC	??_R17?0A@EA@IOutArchive@@8			; IOutArchive::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	??_R0?AUIOutArchive@@@8				; IOutArchive `RTTI Type Descriptor'
PUBLIC	??_R3IOutArchive@@8				; IOutArchive::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IOutArchive@@8				; IOutArchive::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IOutArchive@@8			; IOutArchive::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R17?0A@EC@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
PUBLIC	??_R1M@?0A@EA@ISetProperties@@8			; ISetProperties::`RTTI Base Class Descriptor at (12,-1,0,64)'
PUBLIC	??_R0?AUISetProperties@@@8			; ISetProperties `RTTI Type Descriptor'
PUBLIC	??_R3ISetProperties@@8				; ISetProperties::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ISetProperties@@8				; ISetProperties::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ISetProperties@@8			; ISetProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1M@?0A@EC@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (12,-1,0,66)'
PUBLIC	??_R1BA@?0A@EA@CMultiMethodProps@NArchive@@8	; NArchive::CMultiMethodProps::`RTTI Base Class Descriptor at (16,-1,0,64)'
PUBLIC	??_R0?AVCMultiMethodProps@NArchive@@@8		; NArchive::CMultiMethodProps `RTTI Type Descriptor'
PUBLIC	??_R3CMultiMethodProps@NArchive@@8		; NArchive::CMultiMethodProps::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMultiMethodProps@NArchive@@8		; NArchive::CMultiMethodProps::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMultiMethodProps@NArchive@@8	; NArchive::CMultiMethodProps::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1FI@?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (88,-1,0,64)'
PUBLIC	??_R0?AVCMyUnknownImp@@@8			; CMyUnknownImp `RTTI Type Descriptor'
PUBLIC	??_R3CMyUnknownImp@@8				; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMyUnknownImp@@8				; CMyUnknownImp::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?QueryInterface@CHandler@NXz@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::NXz::CHandler::QueryInterface
PUBLIC	?AddRef@CHandler@NXz@NArchive@@UAGKXZ		; NArchive::NXz::CHandler::AddRef
PUBLIC	?Release@CHandler@NXz@NArchive@@UAGKXZ		; NArchive::NXz::CHandler::Release
PUBLIC	?Open@CHandler@NXz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z ; NArchive::NXz::CHandler::Open
PUBLIC	?Close@CHandler@NXz@NArchive@@UAGJXZ		; NArchive::NXz::CHandler::Close
PUBLIC	?GetNumberOfItems@CHandler@NXz@NArchive@@UAGJPAI@Z ; NArchive::NXz::CHandler::GetNumberOfItems
PUBLIC	?GetProperty@CHandler@NXz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z ; NArchive::NXz::CHandler::GetProperty
PUBLIC	?Extract@CHandler@NXz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z ; NArchive::NXz::CHandler::Extract
PUBLIC	?GetArchiveProperty@CHandler@NXz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z ; NArchive::NXz::CHandler::GetArchiveProperty
PUBLIC	?GetNumberOfProperties@CHandler@NXz@NArchive@@UAGJPAI@Z ; NArchive::NXz::CHandler::GetNumberOfProperties
PUBLIC	?GetPropertyInfo@CHandler@NXz@NArchive@@UAGJIPAPA_WPAKPAG@Z ; NArchive::NXz::CHandler::GetPropertyInfo
PUBLIC	?GetNumberOfArchiveProperties@CHandler@NXz@NArchive@@UAGJPAI@Z ; NArchive::NXz::CHandler::GetNumberOfArchiveProperties
PUBLIC	?GetArchivePropertyInfo@CHandler@NXz@NArchive@@UAGJIPAPA_WPAKPAG@Z ; NArchive::NXz::CHandler::GetArchivePropertyInfo
PUBLIC	??_R4CHandler@NXz@NArchive@@6BIArchiveOpenSeq@@@ ; NArchive::NXz::CHandler::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@CHandler@NXz@NArchive@@W3AGJABU_GUID@@PAPAX@Z ; [thunk]:NArchive::NXz::CHandler::QueryInterface`adjustor{4}'
PUBLIC	?AddRef@CHandler@NXz@NArchive@@W3AGKXZ		; [thunk]:NArchive::NXz::CHandler::AddRef`adjustor{4}'
PUBLIC	?Release@CHandler@NXz@NArchive@@W3AGKXZ		; [thunk]:NArchive::NXz::CHandler::Release`adjustor{4}'
PUBLIC	?OpenSeq@CHandler@NXz@NArchive@@UAGJPAUISequentialInStream@@@Z ; NArchive::NXz::CHandler::OpenSeq
PUBLIC	??_R4CHandler@NXz@NArchive@@6BIOutArchive@@@	; NArchive::NXz::CHandler::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@CHandler@NXz@NArchive@@W7AGJABU_GUID@@PAPAX@Z ; [thunk]:NArchive::NXz::CHandler::QueryInterface`adjustor{8}'
PUBLIC	?AddRef@CHandler@NXz@NArchive@@W7AGKXZ		; [thunk]:NArchive::NXz::CHandler::AddRef`adjustor{8}'
PUBLIC	?Release@CHandler@NXz@NArchive@@W7AGKXZ		; [thunk]:NArchive::NXz::CHandler::Release`adjustor{8}'
PUBLIC	?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z ; NArchive::NXz::CHandler::UpdateItems
PUBLIC	?GetFileTimeType@CHandler@NXz@NArchive@@UAGJPAI@Z ; NArchive::NXz::CHandler::GetFileTimeType
PUBLIC	??_R4CHandler@NXz@NArchive@@6BISetProperties@@@	; NArchive::NXz::CHandler::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@CHandler@NXz@NArchive@@WM@AGJABU_GUID@@PAPAX@Z ; [thunk]:NArchive::NXz::CHandler::QueryInterface`adjustor{12}'
PUBLIC	?AddRef@CHandler@NXz@NArchive@@WM@AGKXZ		; [thunk]:NArchive::NXz::CHandler::AddRef`adjustor{12}'
PUBLIC	?Release@CHandler@NXz@NArchive@@WM@AGKXZ	; [thunk]:NArchive::NXz::CHandler::Release`adjustor{12}'
PUBLIC	?SetProperties@CHandler@NXz@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z ; NArchive::NXz::CHandler::SetProperties
EXTRN	??0AString@@QAE@XZ:PROC				; AString::AString
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_R4CHandler@NXz@NArchive@@6BISetProperties@@@
rdata$r	SEGMENT
??_R4CHandler@NXz@NArchive@@6BISetProperties@@@ DD 00H	; NArchive::NXz::CHandler::`RTTI Complete Object Locator'
	DD	0cH
	DD	00H
	DD	FLAT:??_R0?AVCHandler@NXz@NArchive@@@8
	DD	FLAT:??_R3CHandler@NXz@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R4CHandler@NXz@NArchive@@6BIOutArchive@@@
rdata$r	SEGMENT
??_R4CHandler@NXz@NArchive@@6BIOutArchive@@@ DD 00H	; NArchive::NXz::CHandler::`RTTI Complete Object Locator'
	DD	08H
	DD	00H
	DD	FLAT:??_R0?AVCHandler@NXz@NArchive@@@8
	DD	FLAT:??_R3CHandler@NXz@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R4CHandler@NXz@NArchive@@6BIArchiveOpenSeq@@@
rdata$r	SEGMENT
??_R4CHandler@NXz@NArchive@@6BIArchiveOpenSeq@@@ DD 00H	; NArchive::NXz::CHandler::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVCHandler@NXz@NArchive@@@8
	DD	FLAT:??_R3CHandler@NXz@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R2CMyUnknownImp@@8
rdata$r	SEGMENT
??_R2CMyUnknownImp@@8 DD FLAT:??_R1A@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMyUnknownImp@@8
rdata$r	SEGMENT
??_R3CMyUnknownImp@@8 DD 00H				; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMyUnknownImp@@@8
_DATA	SEGMENT
??_R0?AVCMyUnknownImp@@@8 DD FLAT:??_7type_info@@6B@	; CMyUnknownImp `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMyUnknownImp@@', 00H
_DATA	ENDS
;	COMDAT ??_R1FI@?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R1FI@?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (88,-1,0,64)'
	DD	00H
	DD	058H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CMultiMethodProps@NArchive@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CMultiMethodProps@NArchive@@8 DD FLAT:??_R0?AVCMultiMethodProps@NArchive@@@8 ; NArchive::CMultiMethodProps::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMultiMethodProps@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R2CMultiMethodProps@NArchive@@8
rdata$r	SEGMENT
??_R2CMultiMethodProps@NArchive@@8 DD FLAT:??_R1A@?0A@EA@CMultiMethodProps@NArchive@@8 ; NArchive::CMultiMethodProps::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMultiMethodProps@NArchive@@8
rdata$r	SEGMENT
??_R3CMultiMethodProps@NArchive@@8 DD 00H		; NArchive::CMultiMethodProps::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMultiMethodProps@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMultiMethodProps@NArchive@@@8
_DATA	SEGMENT
??_R0?AVCMultiMethodProps@NArchive@@@8 DD FLAT:??_7type_info@@6B@ ; NArchive::CMultiMethodProps `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMultiMethodProps@NArchive@@', 00H
_DATA	ENDS
;	COMDAT ??_R1BA@?0A@EA@CMultiMethodProps@NArchive@@8
rdata$r	SEGMENT
??_R1BA@?0A@EA@CMultiMethodProps@NArchive@@8 DD FLAT:??_R0?AVCMultiMethodProps@NArchive@@@8 ; NArchive::CMultiMethodProps::`RTTI Base Class Descriptor at (16,-1,0,64)'
	DD	00H
	DD	010H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMultiMethodProps@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R1M@?0A@EC@IUnknown@@8
rdata$r	SEGMENT
??_R1M@?0A@EC@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (12,-1,0,66)'
	DD	00H
	DD	0cH
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ISetProperties@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ISetProperties@@8 DD FLAT:??_R0?AUISetProperties@@@8 ; ISetProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ISetProperties@@8
rdata$r	ENDS
;	COMDAT ??_R2ISetProperties@@8
rdata$r	SEGMENT
??_R2ISetProperties@@8 DD FLAT:??_R1A@?0A@EA@ISetProperties@@8 ; ISetProperties::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ISetProperties@@8
rdata$r	SEGMENT
??_R3ISetProperties@@8 DD 00H				; ISetProperties::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ISetProperties@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUISetProperties@@@8
_DATA	SEGMENT
??_R0?AUISetProperties@@@8 DD FLAT:??_7type_info@@6B@	; ISetProperties `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUISetProperties@@', 00H
_DATA	ENDS
;	COMDAT ??_R1M@?0A@EA@ISetProperties@@8
rdata$r	SEGMENT
??_R1M@?0A@EA@ISetProperties@@8 DD FLAT:??_R0?AUISetProperties@@@8 ; ISetProperties::`RTTI Base Class Descriptor at (12,-1,0,64)'
	DD	01H
	DD	0cH
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ISetProperties@@8
rdata$r	ENDS
;	COMDAT ??_R17?0A@EC@IUnknown@@8
rdata$r	SEGMENT
??_R17?0A@EC@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@IOutArchive@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IOutArchive@@8 DD FLAT:??_R0?AUIOutArchive@@@8 ; IOutArchive::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IOutArchive@@8
rdata$r	ENDS
;	COMDAT ??_R2IOutArchive@@8
rdata$r	SEGMENT
??_R2IOutArchive@@8 DD FLAT:??_R1A@?0A@EA@IOutArchive@@8 ; IOutArchive::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3IOutArchive@@8
rdata$r	SEGMENT
??_R3IOutArchive@@8 DD 00H				; IOutArchive::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2IOutArchive@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIOutArchive@@@8
_DATA	SEGMENT
??_R0?AUIOutArchive@@@8 DD FLAT:??_7type_info@@6B@	; IOutArchive `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIOutArchive@@', 00H
_DATA	ENDS
;	COMDAT ??_R17?0A@EA@IOutArchive@@8
rdata$r	SEGMENT
??_R17?0A@EA@IOutArchive@@8 DD FLAT:??_R0?AUIOutArchive@@@8 ; IOutArchive::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	01H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IOutArchive@@8
rdata$r	ENDS
;	COMDAT ??_R13?0A@EC@IUnknown@@8
rdata$r	SEGMENT
??_R13?0A@EC@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@IArchiveOpenSeq@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IArchiveOpenSeq@@8 DD FLAT:??_R0?AUIArchiveOpenSeq@@@8 ; IArchiveOpenSeq::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IArchiveOpenSeq@@8
rdata$r	ENDS
;	COMDAT ??_R2IArchiveOpenSeq@@8
rdata$r	SEGMENT
??_R2IArchiveOpenSeq@@8 DD FLAT:??_R1A@?0A@EA@IArchiveOpenSeq@@8 ; IArchiveOpenSeq::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3IArchiveOpenSeq@@8
rdata$r	SEGMENT
??_R3IArchiveOpenSeq@@8 DD 00H				; IArchiveOpenSeq::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2IArchiveOpenSeq@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIArchiveOpenSeq@@@8
_DATA	SEGMENT
??_R0?AUIArchiveOpenSeq@@@8 DD FLAT:??_7type_info@@6B@	; IArchiveOpenSeq `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIArchiveOpenSeq@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@IArchiveOpenSeq@@8
rdata$r	SEGMENT
??_R13?0A@EA@IArchiveOpenSeq@@8 DD FLAT:??_R0?AUIArchiveOpenSeq@@@8 ; IArchiveOpenSeq::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	01H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IArchiveOpenSeq@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EC@IUnknown@@8
rdata$r	SEGMENT
??_R1A@?0A@EC@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R2IUnknown@@8
rdata$r	SEGMENT
??_R2IUnknown@@8 DD FLAT:??_R1A@?0A@EA@IUnknown@@8	; IUnknown::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3IUnknown@@8
rdata$r	SEGMENT
??_R3IUnknown@@8 DD 00H					; IUnknown::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIUnknown@@@8
_DATA	SEGMENT
??_R0?AUIUnknown@@@8 DD FLAT:??_7type_info@@6B@		; IUnknown `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIUnknown@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IUnknown@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R2IInArchive@@8
rdata$r	SEGMENT
??_R2IInArchive@@8 DD FLAT:??_R1A@?0A@EA@IInArchive@@8	; IInArchive::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3IInArchive@@8
rdata$r	SEGMENT
??_R3IInArchive@@8 DD 00H				; IInArchive::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2IInArchive@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIInArchive@@@8
_DATA	SEGMENT
??_R0?AUIInArchive@@@8 DD FLAT:??_7type_info@@6B@	; IInArchive `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIInArchive@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IInArchive@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IInArchive@@8 DD FLAT:??_R0?AUIInArchive@@@8 ; IInArchive::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IInArchive@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CHandler@NXz@NArchive@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CHandler@NXz@NArchive@@8 DD FLAT:??_R0?AVCHandler@NXz@NArchive@@@8 ; NArchive::NXz::CHandler::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	0aH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CHandler@NXz@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R2CHandler@NXz@NArchive@@8
rdata$r	SEGMENT
??_R2CHandler@NXz@NArchive@@8 DD FLAT:??_R1A@?0A@EA@CHandler@NXz@NArchive@@8 ; NArchive::NXz::CHandler::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IInArchive@@8
	DD	FLAT:??_R1A@?0A@EC@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@IArchiveOpenSeq@@8
	DD	FLAT:??_R13?0A@EC@IUnknown@@8
	DD	FLAT:??_R17?0A@EA@IOutArchive@@8
	DD	FLAT:??_R17?0A@EC@IUnknown@@8
	DD	FLAT:??_R1M@?0A@EA@ISetProperties@@8
	DD	FLAT:??_R1M@?0A@EC@IUnknown@@8
	DD	FLAT:??_R1BA@?0A@EA@CMultiMethodProps@NArchive@@8
	DD	FLAT:??_R1FI@?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CHandler@NXz@NArchive@@8
rdata$r	SEGMENT
??_R3CHandler@NXz@NArchive@@8 DD 00H			; NArchive::NXz::CHandler::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	0bH
	DD	FLAT:??_R2CHandler@NXz@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCHandler@NXz@NArchive@@@8
_DATA	SEGMENT
??_R0?AVCHandler@NXz@NArchive@@@8 DD FLAT:??_7type_info@@6B@ ; NArchive::NXz::CHandler `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCHandler@NXz@NArchive@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CHandler@NXz@NArchive@@6BIInArchive@@@
rdata$r	SEGMENT
??_R4CHandler@NXz@NArchive@@6BIInArchive@@@ DD 00H	; NArchive::NXz::CHandler::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCHandler@NXz@NArchive@@@8
	DD	FLAT:??_R3CHandler@NXz@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_7CHandler@NXz@NArchive@@6BISetProperties@@@
CONST	SEGMENT
??_7CHandler@NXz@NArchive@@6BISetProperties@@@ DD FLAT:??_R4CHandler@NXz@NArchive@@6BISetProperties@@@ ; NArchive::NXz::CHandler::`vftable'
	DD	FLAT:?QueryInterface@CHandler@NXz@NArchive@@WM@AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CHandler@NXz@NArchive@@WM@AGKXZ
	DD	FLAT:?Release@CHandler@NXz@NArchive@@WM@AGKXZ
	DD	FLAT:?SetProperties@CHandler@NXz@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z
CONST	ENDS
;	COMDAT ??_7CHandler@NXz@NArchive@@6BIOutArchive@@@
CONST	SEGMENT
??_7CHandler@NXz@NArchive@@6BIOutArchive@@@ DD FLAT:??_R4CHandler@NXz@NArchive@@6BIOutArchive@@@ ; NArchive::NXz::CHandler::`vftable'
	DD	FLAT:?QueryInterface@CHandler@NXz@NArchive@@W7AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CHandler@NXz@NArchive@@W7AGKXZ
	DD	FLAT:?Release@CHandler@NXz@NArchive@@W7AGKXZ
	DD	FLAT:?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z
	DD	FLAT:?GetFileTimeType@CHandler@NXz@NArchive@@UAGJPAI@Z
CONST	ENDS
;	COMDAT ??_7CHandler@NXz@NArchive@@6BIArchiveOpenSeq@@@
CONST	SEGMENT
??_7CHandler@NXz@NArchive@@6BIArchiveOpenSeq@@@ DD FLAT:??_R4CHandler@NXz@NArchive@@6BIArchiveOpenSeq@@@ ; NArchive::NXz::CHandler::`vftable'
	DD	FLAT:?QueryInterface@CHandler@NXz@NArchive@@W3AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CHandler@NXz@NArchive@@W3AGKXZ
	DD	FLAT:?Release@CHandler@NXz@NArchive@@W3AGKXZ
	DD	FLAT:?OpenSeq@CHandler@NXz@NArchive@@UAGJPAUISequentialInStream@@@Z
CONST	ENDS
;	COMDAT ??_7CHandler@NXz@NArchive@@6BIInArchive@@@
CONST	SEGMENT
??_7CHandler@NXz@NArchive@@6BIInArchive@@@ DD FLAT:??_R4CHandler@NXz@NArchive@@6BIInArchive@@@ ; NArchive::NXz::CHandler::`vftable'
	DD	FLAT:?QueryInterface@CHandler@NXz@NArchive@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CHandler@NXz@NArchive@@UAGKXZ
	DD	FLAT:?Release@CHandler@NXz@NArchive@@UAGKXZ
	DD	FLAT:?Open@CHandler@NXz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
	DD	FLAT:?Close@CHandler@NXz@NArchive@@UAGJXZ
	DD	FLAT:?GetNumberOfItems@CHandler@NXz@NArchive@@UAGJPAI@Z
	DD	FLAT:?GetProperty@CHandler@NXz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
	DD	FLAT:?Extract@CHandler@NXz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
	DD	FLAT:?GetArchiveProperty@CHandler@NXz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z
	DD	FLAT:?GetNumberOfProperties@CHandler@NXz@NArchive@@UAGJPAI@Z
	DD	FLAT:?GetPropertyInfo@CHandler@NXz@NArchive@@UAGJIPAPA_WPAKPAG@Z
	DD	FLAT:?GetNumberOfArchiveProperties@CHandler@NXz@NArchive@@UAGJPAI@Z
	DD	FLAT:?GetArchivePropertyInfo@CHandler@NXz@NArchive@@UAGJIPAPA_WPAKPAG@Z
CONST	ENDS
xdata$x	SEGMENT
__unwindtable$??0CHandler@NXz@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CHandler@NXz@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CHandler@NXz@NArchive@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CHandler@NXz@NArchive@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CHandler@NXz@NArchive@@QAE@XZ$3
__ehfuncinfo$??0CHandler@NXz@NArchive@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0CHandler@NXz@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CHandler@NXz@NArchive@@QAE@XZ PROC			; NArchive::NXz::CHandler::CHandler
; _this$ = ecx
; Line 128
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CHandler@NXz@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IInArchive@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0IArchiveOpenSeq@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0IOutArchive@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0ISetProperties@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0CMultiMethodProps@NArchive@@QAE@XZ	; NArchive::CMultiMethodProps::CMultiMethodProps
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 88					; 00000058H
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CHandler@NXz@NArchive@@6BIInArchive@@@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], OFFSET ??_7CHandler@NXz@NArchive@@6BIArchiveOpenSeq@@@
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], OFFSET ??_7CHandler@NXz@NArchive@@6BIOutArchive@@@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], OFFSET ??_7CHandler@NXz@NArchive@@6BISetProperties@@@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??0CStatInfo@NXz@NArchive@@QAE@XZ	; NArchive::NXz::CStatInfo::CStatInfo
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 156				; 0000009cH
	call	??0?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::CMyComPtr<IInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 160				; 000000a0H
	call	??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 168				; 000000a8H
	call	??0AString@@QAE@XZ			; AString::AString
	mov	BYTE PTR __$EHRec$[ebp+8], 3
; Line 129
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Init@CHandler@NXz@NArchive@@AAEXXZ	; NArchive::NXz::CHandler::Init
; Line 130
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0CHandler@NXz@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	jmp	??1CMultiMethodProps@NArchive@@QAE@XZ
__unwindfunclet$??0CHandler@NXz@NArchive@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 156				; 0000009cH
	jmp	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
__unwindfunclet$??0CHandler@NXz@NArchive@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 160				; 000000a0H
	jmp	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
__unwindfunclet$??0CHandler@NXz@NArchive@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 168				; 000000a8H
	jmp	??1AString@@QAE@XZ			; AString::~AString
__ehhandler$??0CHandler@NXz@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CHandler@NXz@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CHandler@NXz@NArchive@@QAE@XZ ENDP			; NArchive::NXz::CHandler::CHandler
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CMyUnknownImp@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMyUnknownImp@@QAE@XZ PROC				; CMyUnknownImp::CMyUnknownImp, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 167
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CMyUnknownImp@@QAE@XZ ENDP				; CMyUnknownImp::CMyUnknownImp
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1AString@@QAE@XZ
_TEXT	SEGMENT
$T71330 = -8						; size = 4
_this$ = -4						; size = 4
??1AString@@QAE@XZ PROC					; AString::~AString, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 232
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T71330[ebp], ecx
	mov	edx, DWORD PTR $T71330[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1AString@@QAE@XZ ENDP					; AString::~AString
_TEXT	ENDS
PUBLIC	??1COneMethodInfo@@QAE@XZ			; COneMethodInfo::~COneMethodInfo
PUBLIC	??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ	; CObjectVector<COneMethodInfo>::~CObjectVector<COneMethodInfo>
PUBLIC	??0COneMethodInfo@@QAE@XZ			; COneMethodInfo::COneMethodInfo
PUBLIC	??0?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ	; CObjectVector<COneMethodInfo>::CObjectVector<COneMethodInfo>
EXTRN	?Init@CMultiMethodProps@NArchive@@QAEXXZ:PROC	; NArchive::CMultiMethodProps::Init
;	COMDAT xdata$x
; File c:\workspace\7z1505-src\cpp\7zip\archive\common\handlerout.h
xdata$x	SEGMENT
__unwindtable$??0CMultiMethodProps@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CMultiMethodProps@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CMultiMethodProps@NArchive@@QAE@XZ$1
__ehfuncinfo$??0CMultiMethodProps@NArchive@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CMultiMethodProps@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CMultiMethodProps@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CMultiMethodProps@NArchive@@QAE@XZ PROC		; NArchive::CMultiMethodProps::CMultiMethodProps, COMDAT
; _this$ = ecx
; Line 45
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CMultiMethodProps@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??0?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ ; CObjectVector<COneMethodInfo>::CObjectVector<COneMethodInfo>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??0COneMethodInfo@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Init@CMultiMethodProps@NArchive@@QAEXXZ ; NArchive::CMultiMethodProps::Init
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CMultiMethodProps@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	jmp	??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ ; CObjectVector<COneMethodInfo>::~CObjectVector<COneMethodInfo>
__unwindfunclet$??0CMultiMethodProps@NArchive@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	jmp	??1COneMethodInfo@@QAE@XZ
__ehhandler$??0CMultiMethodProps@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CMultiMethodProps@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CMultiMethodProps@NArchive@@QAE@XZ ENDP		; NArchive::CMultiMethodProps::CMultiMethodProps
PUBLIC	??1CMethodProps@@QAE@XZ				; CMethodProps::~CMethodProps
PUBLIC	??0CMethodProps@@QAE@XZ				; CMethodProps::CMethodProps
EXTRN	??0UString@@QAE@XZ:PROC				; UString::UString
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0COneMethodInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0COneMethodInfo@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0COneMethodInfo@@QAE@XZ$1
__ehfuncinfo$??0COneMethodInfo@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0COneMethodInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0COneMethodInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0COneMethodInfo@@QAE@XZ PROC				; COneMethodInfo::COneMethodInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0COneMethodInfo@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CMethodProps@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0AString@@QAE@XZ			; AString::AString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0COneMethodInfo@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CMethodProps@@QAE@XZ
__unwindfunclet$??0COneMethodInfo@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1AString@@QAE@XZ			; AString::~AString
__ehhandler$??0COneMethodInfo@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0COneMethodInfo@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0COneMethodInfo@@QAE@XZ ENDP				; COneMethodInfo::COneMethodInfo
PUBLIC	??1UString@@QAE@XZ				; UString::~UString
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1COneMethodInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1COneMethodInfo@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1COneMethodInfo@@QAE@XZ$1
__ehfuncinfo$??1COneMethodInfo@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1COneMethodInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1COneMethodInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1COneMethodInfo@@QAE@XZ PROC				; COneMethodInfo::~COneMethodInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1COneMethodInfo@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CMethodProps@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1COneMethodInfo@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CMethodProps@@QAE@XZ
__unwindfunclet$??1COneMethodInfo@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1AString@@QAE@XZ			; AString::~AString
__ehhandler$??1COneMethodInfo@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1COneMethodInfo@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1COneMethodInfo@@QAE@XZ ENDP				; COneMethodInfo::~COneMethodInfo
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1UString@@QAE@XZ
_TEXT	SEGMENT
$T71365 = -8						; size = 4
_this$ = -4						; size = 4
??1UString@@QAE@XZ PROC					; UString::~UString, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 470
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T71365[ebp], ecx
	mov	edx, DWORD PTR $T71365[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1UString@@QAE@XZ ENDP					; UString::~UString
_TEXT	ENDS
PUBLIC	??0CProps@@QAE@XZ				; CProps::CProps
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CMethodProps@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMethodProps@@QAE@XZ PROC				; CMethodProps::CMethodProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CProps@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CMethodProps@@QAE@XZ ENDP				; CMethodProps::CMethodProps
_TEXT	ENDS
PUBLIC	??1CProps@@QAE@XZ				; CProps::~CProps
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CMethodProps@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CMethodProps@@QAE@XZ PROC				; CMethodProps::~CMethodProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CProps@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CMethodProps@@QAE@XZ ENDP				; CMethodProps::~CMethodProps
_TEXT	ENDS
PUBLIC	??0?$CObjectVector@UCProp@@@@QAE@XZ		; CObjectVector<CProp>::CObjectVector<CProp>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CProps@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CProps@@QAE@XZ PROC					; CProps::CProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CObjectVector@UCProp@@@@QAE@XZ	; CObjectVector<CProp>::CObjectVector<CProp>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CProps@@QAE@XZ ENDP					; CProps::CProps
_TEXT	ENDS
PUBLIC	??1?$CObjectVector@UCProp@@@@QAE@XZ		; CObjectVector<CProp>::~CObjectVector<CProp>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CProps@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CProps@@QAE@XZ PROC					; CProps::~CProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CObjectVector@UCProp@@@@QAE@XZ	; CObjectVector<CProp>::~CObjectVector<CProp>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CProps@@QAE@XZ ENDP					; CProps::~CProps
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CStatInfo@NXz@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CStatInfo@NXz@NArchive@@QAE@XZ PROC			; NArchive::NXz::CStatInfo::CStatInfo, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\xzhandler.h
; Line 45
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@CStatInfo@NXz@NArchive@@QAEXXZ	; NArchive::NXz::CStatInfo::Clear
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CStatInfo@NXz@NArchive@@QAE@XZ ENDP			; NArchive::NXz::CStatInfo::CStatInfo
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Init@CHandler@NXz@NArchive@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Init@CHandler@NXz@NArchive@@AAEXXZ PROC		; NArchive::NXz::CHandler::Init, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\xzhandler.cpp
; Line 90
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 91
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+164], 0
; Line 92
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?Init@CMultiMethodProps@NArchive@@QAEXXZ ; NArchive::CMultiMethodProps::Init
; Line 93
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Init@CHandler@NXz@NArchive@@AAEXXZ ENDP		; NArchive::NXz::CHandler::Init
_TEXT	ENDS
PUBLIC	_==@8
EXTRN	_IID_ISetProperties:BYTE
EXTRN	_IID_IOutArchive:BYTE
EXTRN	_IID_IArchiveOpenSeq:BYTE
EXTRN	_IID_IInArchive:BYTE
EXTRN	_IID_IUnknown:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@CHandler@NXz@NArchive@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
tv144 = -12						; size = 4
tv134 = -8						; size = 4
tv92 = -4						; size = 4
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CHandler@NXz@NArchive@@UAGJABU_GUID@@PAPAX@Z PROC ; NArchive::NXz::CHandler::QueryInterface, COMDAT
; Line 107
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN10@QueryInter
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	$LN9@QueryInter
$LN10@QueryInter:
	push	OFFSET _IID_IInArchive
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN8@QueryInter
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	$LN9@QueryInter
$LN8@QueryInter:
; Line 108
	push	OFFSET _IID_IArchiveOpenSeq
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN6@QueryInter
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN13@QueryInter
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	mov	DWORD PTR tv92[ebp], edx
	jmp	SHORT $LN14@QueryInter
$LN13@QueryInter:
	mov	DWORD PTR tv92[ebp], 0
$LN14@QueryInter:
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	ecx, DWORD PTR tv92[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN9@QueryInter
$LN6@QueryInter:
; Line 110
	push	OFFSET _IID_IOutArchive
	mov	edx, DWORD PTR _iid$[ebp]
	push	edx
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@QueryInter
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN15@QueryInter
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	mov	DWORD PTR tv134[ebp], eax
	jmp	SHORT $LN16@QueryInter
$LN15@QueryInter:
	mov	DWORD PTR tv134[ebp], 0
$LN16@QueryInter:
	mov	ecx, DWORD PTR _outObject$[ebp]
	mov	edx, DWORD PTR tv134[ebp]
	mov	DWORD PTR [ecx], edx
	jmp	SHORT $LN9@QueryInter
$LN4@QueryInter:
; Line 111
	push	OFFSET _IID_ISetProperties
	mov	eax, DWORD PTR _iid$[ebp]
	push	eax
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN17@QueryInter
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR tv144[ebp], ecx
	jmp	SHORT $LN18@QueryInter
$LN17@QueryInter:
	mov	DWORD PTR tv144[ebp], 0
$LN18@QueryInter:
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR tv144[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN9@QueryInter
$LN2@QueryInter:
; Line 113
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN11@QueryInter
$LN9@QueryInter:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+88], edx
	xor	eax, eax
$LN11@QueryInter:
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CHandler@NXz@NArchive@@UAGJABU_GUID@@PAPAX@Z ENDP ; NArchive::NXz::CHandler::QueryInterface
_TEXT	ENDS
PUBLIC	_IsEqualGUID@8
; Function compile flags: /Odtp /RTCsu
;	COMDAT _==@8
_TEXT	SEGMENT
_guidOne$ = 8						; size = 4
_guidOther$ = 12					; size = 4
_==@8	PROC						; COMDAT
; File c:\program files (x86)\microsoft sdks\windows\v7.0a\include\guiddef.h
; Line 193
	push	ebp
	mov	ebp, esp
; Line 194
	mov	eax, DWORD PTR _guidOther$[ebp]
	push	eax
	mov	ecx, DWORD PTR _guidOne$[ebp]
	push	ecx
	call	_IsEqualGUID@8
; Line 195
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_==@8	ENDP
_TEXT	ENDS
EXTRN	_memcmp:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT _IsEqualGUID@8
_TEXT	SEGMENT
_rguid1$ = 8						; size = 4
_rguid2$ = 12						; size = 4
_IsEqualGUID@8 PROC					; COMDAT
; Line 160
	push	ebp
	mov	ebp, esp
; Line 161
	push	16					; 00000010H
	mov	eax, DWORD PTR _rguid2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rguid1$[ebp]
	push	ecx
	call	_memcmp
	add	esp, 12					; 0000000cH
	neg	eax
	sbb	eax, eax
	add	eax, 1
; Line 162
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_IsEqualGUID@8 ENDP
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CHandler@NXz@NArchive@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CHandler@NXz@NArchive@@UAGKXZ PROC		; NArchive::NXz::CHandler::AddRef, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\archive\xzhandler.cpp
; Line 114
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+88], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CHandler@NXz@NArchive@@UAGKXZ ENDP		; NArchive::NXz::CHandler::AddRef
_TEXT	ENDS
PUBLIC	??_GCHandler@NXz@NArchive@@QAEPAXI@Z		; NArchive::NXz::CHandler::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CHandler@NXz@NArchive@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T71399 = -8						; size = 4
$T71398 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CHandler@NXz@NArchive@@UAGKXZ PROC		; NArchive::NXz::CHandler::Release, COMDAT
; Line 114
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+88], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+88]
	jmp	SHORT $LN2@Release
$LN1@Release:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T71399[ebp], edx
	mov	eax, DWORD PTR $T71399[ebp]
	mov	DWORD PTR $T71398[ebp], eax
	cmp	DWORD PTR $T71398[ebp], 0
	je	SHORT $LN4@Release
	push	1
	mov	ecx, DWORD PTR $T71398[ebp]
	call	??_GCHandler@NXz@NArchive@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release
$LN4@Release:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release:
	xor	eax, eax
$LN2@Release:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CHandler@NXz@NArchive@@UAGKXZ ENDP		; NArchive::NXz::CHandler::Release
_TEXT	ENDS
PUBLIC	??1CHandler@NXz@NArchive@@QAE@XZ		; NArchive::NXz::CHandler::~CHandler
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCHandler@NXz@NArchive@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCHandler@NXz@NArchive@@QAEPAXI@Z PROC		; NArchive::NXz::CHandler::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CHandler@NXz@NArchive@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCHandler@NXz@NArchive@@QAEPAXI@Z ENDP		; NArchive::NXz::CHandler::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CHandler@NXz@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CHandler@NXz@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CHandler@NXz@NArchive@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CHandler@NXz@NArchive@@QAE@XZ$2
__ehfuncinfo$??1CHandler@NXz@NArchive@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1CHandler@NXz@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CHandler@NXz@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CHandler@NXz@NArchive@@QAE@XZ PROC			; NArchive::NXz::CHandler::~CHandler, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CHandler@NXz@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 168				; 000000a8H
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 160				; 000000a0H
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 156				; 0000009cH
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??1CMultiMethodProps@NArchive@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CHandler@NXz@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	jmp	??1CMultiMethodProps@NArchive@@QAE@XZ
__unwindfunclet$??1CHandler@NXz@NArchive@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 156				; 0000009cH
	jmp	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
__unwindfunclet$??1CHandler@NXz@NArchive@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 160				; 000000a0H
	jmp	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
__ehhandler$??1CHandler@NXz@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CHandler@NXz@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CHandler@NXz@NArchive@@QAE@XZ ENDP			; NArchive::NXz::CHandler::~CHandler
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CMultiMethodProps@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CMultiMethodProps@NArchive@@QAE@XZ$0
__ehfuncinfo$??1CMultiMethodProps@NArchive@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CMultiMethodProps@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CMultiMethodProps@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CMultiMethodProps@NArchive@@QAE@XZ PROC		; NArchive::CMultiMethodProps::~CMultiMethodProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CMultiMethodProps@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??1COneMethodInfo@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ ; CObjectVector<COneMethodInfo>::~CObjectVector<COneMethodInfo>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CMultiMethodProps@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	jmp	??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ ; CObjectVector<COneMethodInfo>::~CObjectVector<COneMethodInfo>
__ehhandler$??1CMultiMethodProps@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CMultiMethodProps@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CMultiMethodProps@NArchive@@QAE@XZ ENDP		; NArchive::CMultiMethodProps::~CMultiMethodProps
PUBLIC	??_7IInArchive@@6B@				; IInArchive::`vftable'
PUBLIC	??0IUnknown@@QAE@XZ				; IUnknown::IUnknown
PUBLIC	??_R4IInArchive@@6B@				; IInArchive::`RTTI Complete Object Locator'
EXTRN	__purecall:PROC
;	COMDAT ??_R4IInArchive@@6B@
rdata$r	SEGMENT
??_R4IInArchive@@6B@ DD 00H				; IInArchive::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIInArchive@@@8
	DD	FLAT:??_R3IInArchive@@8
rdata$r	ENDS
;	COMDAT ??_7IInArchive@@6B@
CONST	SEGMENT
??_7IInArchive@@6B@ DD FLAT:??_R4IInArchive@@6B@	; IInArchive::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0IInArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IInArchive@@QAE@XZ PROC				; IInArchive::IInArchive, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7IInArchive@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0IInArchive@@QAE@XZ ENDP				; IInArchive::IInArchive
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0IUnknown@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IUnknown@@QAE@XZ PROC				; IUnknown::IUnknown, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0IUnknown@@QAE@XZ ENDP				; IUnknown::IUnknown
_TEXT	ENDS
PUBLIC	??_7IArchiveOpenSeq@@6B@			; IArchiveOpenSeq::`vftable'
PUBLIC	??_R4IArchiveOpenSeq@@6B@			; IArchiveOpenSeq::`RTTI Complete Object Locator'
;	COMDAT ??_R4IArchiveOpenSeq@@6B@
rdata$r	SEGMENT
??_R4IArchiveOpenSeq@@6B@ DD 00H			; IArchiveOpenSeq::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIArchiveOpenSeq@@@8
	DD	FLAT:??_R3IArchiveOpenSeq@@8
rdata$r	ENDS
;	COMDAT ??_7IArchiveOpenSeq@@6B@
CONST	SEGMENT
??_7IArchiveOpenSeq@@6B@ DD FLAT:??_R4IArchiveOpenSeq@@6B@ ; IArchiveOpenSeq::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0IArchiveOpenSeq@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IArchiveOpenSeq@@QAE@XZ PROC				; IArchiveOpenSeq::IArchiveOpenSeq, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7IArchiveOpenSeq@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0IArchiveOpenSeq@@QAE@XZ ENDP				; IArchiveOpenSeq::IArchiveOpenSeq
_TEXT	ENDS
PUBLIC	??_7IOutArchive@@6B@				; IOutArchive::`vftable'
PUBLIC	??_R4IOutArchive@@6B@				; IOutArchive::`RTTI Complete Object Locator'
;	COMDAT ??_R4IOutArchive@@6B@
rdata$r	SEGMENT
??_R4IOutArchive@@6B@ DD 00H				; IOutArchive::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIOutArchive@@@8
	DD	FLAT:??_R3IOutArchive@@8
rdata$r	ENDS
;	COMDAT ??_7IOutArchive@@6B@
CONST	SEGMENT
??_7IOutArchive@@6B@ DD FLAT:??_R4IOutArchive@@6B@	; IOutArchive::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0IOutArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IOutArchive@@QAE@XZ PROC				; IOutArchive::IOutArchive, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7IOutArchive@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0IOutArchive@@QAE@XZ ENDP				; IOutArchive::IOutArchive
_TEXT	ENDS
PUBLIC	??_7ISetProperties@@6B@				; ISetProperties::`vftable'
PUBLIC	??_R4ISetProperties@@6B@			; ISetProperties::`RTTI Complete Object Locator'
;	COMDAT ??_R4ISetProperties@@6B@
rdata$r	SEGMENT
??_R4ISetProperties@@6B@ DD 00H				; ISetProperties::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUISetProperties@@@8
	DD	FLAT:??_R3ISetProperties@@8
rdata$r	ENDS
;	COMDAT ??_7ISetProperties@@6B@
CONST	SEGMENT
??_7ISetProperties@@6B@ DD FLAT:??_R4ISetProperties@@6B@ ; ISetProperties::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ISetProperties@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ISetProperties@@QAE@XZ PROC				; ISetProperties::ISetProperties, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ISetProperties@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ISetProperties@@QAE@XZ ENDP				; ISetProperties::ISetProperties
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
_TEXT	SEGMENT
_this$ = 8						; size = 4
_numProps$ = 12						; size = 4
?GetNumberOfProperties@CHandler@NXz@NArchive@@UAGJPAI@Z PROC ; NArchive::NXz::CHandler::GetNumberOfProperties
; Line 146
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _numProps$[ebp]
	mov	DWORD PTR [eax], 3
	xor	eax, eax
	pop	ebp
	ret	8
?GetNumberOfProperties@CHandler@NXz@NArchive@@UAGJPAI@Z ENDP ; NArchive::NXz::CHandler::GetNumberOfProperties
_TEXT	ENDS
EXTRN	?k7z_PROPID_To_VARTYPE@@3QBEB:BYTE		; k7z_PROPID_To_VARTYPE
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = 8						; size = 4
_index$ = 12						; size = 4
_name$ = 16						; size = 4
_propID$ = 20						; size = 4
_varType$ = 24						; size = 4
?GetPropertyInfo@CHandler@NXz@NArchive@@UAGJIPAPA_WPAKPAG@Z PROC ; NArchive::NXz::CHandler::GetPropertyInfo
; Line 146
	push	ebp
	mov	ebp, esp
	cmp	DWORD PTR _index$[ebp], 3
	jb	SHORT $LN1@GetPropert
	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN2@GetPropert
$LN1@GetPropert:
	mov	eax, DWORD PTR _index$[ebp]
	movzx	ecx, BYTE PTR _kProps[eax]
	mov	edx, DWORD PTR _propID$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR _propID$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	dx, BYTE PTR ?k7z_PROPID_To_VARTYPE@@3QBEB[ecx]
	mov	eax, DWORD PTR _varType$[ebp]
	mov	WORD PTR [eax], dx
	mov	ecx, DWORD PTR _name$[ebp]
	mov	DWORD PTR [ecx], 0
	xor	eax, eax
$LN2@GetPropert:
	pop	ebp
	ret	20					; 00000014H
?GetPropertyInfo@CHandler@NXz@NArchive@@UAGJIPAPA_WPAKPAG@Z ENDP ; NArchive::NXz::CHandler::GetPropertyInfo
; Function compile flags: /Odtp /RTCsu
_this$ = 8						; size = 4
_numProps$ = 12						; size = 4
?GetNumberOfArchiveProperties@CHandler@NXz@NArchive@@UAGJPAI@Z PROC ; NArchive::NXz::CHandler::GetNumberOfArchiveProperties
; Line 147
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _numProps$[ebp]
	mov	DWORD PTR [eax], 3
	xor	eax, eax
	pop	ebp
	ret	8
?GetNumberOfArchiveProperties@CHandler@NXz@NArchive@@UAGJPAI@Z ENDP ; NArchive::NXz::CHandler::GetNumberOfArchiveProperties
; Function compile flags: /Odtp /RTCsu
_this$ = 8						; size = 4
_index$ = 12						; size = 4
_name$ = 16						; size = 4
_propID$ = 20						; size = 4
_varType$ = 24						; size = 4
?GetArchivePropertyInfo@CHandler@NXz@NArchive@@UAGJIPAPA_WPAKPAG@Z PROC ; NArchive::NXz::CHandler::GetArchivePropertyInfo
; Line 147
	push	ebp
	mov	ebp, esp
	cmp	DWORD PTR _index$[ebp], 3
	jb	SHORT $LN1@GetArchive
	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN2@GetArchive
$LN1@GetArchive:
	mov	eax, DWORD PTR _index$[ebp]
	movzx	ecx, BYTE PTR _kArcProps[eax]
	mov	edx, DWORD PTR _propID$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR _propID$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	dx, BYTE PTR ?k7z_PROPID_To_VARTYPE@@3QBEB[ecx]
	mov	eax, DWORD PTR _varType$[ebp]
	mov	WORD PTR [eax], dx
	mov	ecx, DWORD PTR _name$[ebp]
	mov	DWORD PTR [ecx], 0
	xor	eax, eax
$LN2@GetArchive:
	pop	ebp
	ret	20					; 00000014H
?GetArchivePropertyInfo@CHandler@NXz@NArchive@@UAGJIPAPA_WPAKPAG@Z ENDP ; NArchive::NXz::CHandler::GetArchivePropertyInfo
_TEXT	ENDS
PUBLIC	??1CPropVariant@NCOM@NWindows@@QAE@XZ		; NWindows::NCOM::CPropVariant::~CPropVariant
PUBLIC	??BAString@@QBEPBDXZ				; AString::operator char const *
PUBLIC	?IsEmpty@AString@@QBE_NXZ			; AString::IsEmpty
PUBLIC	??0CPropVariant@NCOM@NWindows@@QAE@XZ		; NWindows::NCOM::CPropVariant::CPropVariant
EXTRN	?Detach@CPropVariant@NCOM@NWindows@@QAEJPAUtagPROPVARIANT@@@Z:PROC ; NWindows::NCOM::CPropVariant::Detach
EXTRN	??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z:PROC ; NWindows::NCOM::CPropVariant::operator=
EXTRN	??4CPropVariant@NCOM@NWindows@@QAEAAV012@PBD@Z:PROC ; NWindows::NCOM::CPropVariant::operator=
EXTRN	??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z:PROC ; NWindows::NCOM::CPropVariant::operator=
EXTRN	@_RTC_CheckStackVars@8:PROC
xdata$x	SEGMENT
__catchsym$?GetArchiveProperty@CHandler@NXz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?GetArchiveProperty@CHandler@NXz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$0
__tryblocktable$?GetArchiveProperty@CHandler@NXz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$?GetArchiveProperty@CHandler@NXz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$3
__unwindtable$?GetArchiveProperty@CHandler@NXz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$?GetArchiveProperty@CHandler@NXz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$2
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?GetArchiveProperty@CHandler@NXz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?GetArchiveProperty@CHandler@NXz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?GetArchiveProperty@CHandler@NXz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv186 = -68						; size = 4
tv185 = -61						; size = 1
tv67 = -60						; size = 4
tv184 = -56						; size = 4
$T71443 = -52						; size = 4
$T71442 = -48						; size = 4
_v$70128 = -44						; size = 4
_prop$70112 = -36					; size = 16
__$EHRec$ = -16						; size = 16
_this$ = 8						; size = 4
_propID$ = 12						; size = 4
_value$ = 16						; size = 4
?GetArchiveProperty@CHandler@NXz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z PROC ; NArchive::NXz::CHandler::GetArchiveProperty
; Line 293
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetArchiveProperty@CHandler@NXz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 52					; 00000034H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-68]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
; Line 294
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 295
	lea	ecx, DWORD PTR _prop$70112[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
	mov	DWORD PTR tv184[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 1
; Line 296
	mov	eax, DWORD PTR _propID$[ebp]
	mov	DWORD PTR tv67[ebp], eax
	mov	ecx, DWORD PTR tv67[ebp]
	sub	ecx, 22					; 00000016H
	mov	DWORD PTR tv67[ebp], ecx
	cmp	DWORD PTR tv67[ebp], 56			; 00000038H
	ja	$LN19@GetArchive@2
	mov	edx, DWORD PTR tv67[ebp]
	movzx	eax, BYTE PTR $LN30@GetArchive@2[edx]
	jmp	DWORD PTR $LN35@GetArchive@2[eax*4]
$LN18@GetArchive@2:
; Line 298
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+154]
	test	edx, edx
	je	SHORT $LN17@GetArchive@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	push	ecx
	mov	edx, DWORD PTR [eax+112]
	push	edx
	lea	ecx, DWORD PTR _prop$70112[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=
$LN17@GetArchive@2:
	jmp	$LN19@GetArchive@2
$LN16@GetArchive@2:
; Line 299
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+137]
	test	ecx, ecx
	je	SHORT $LN15@GetArchive@2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+124]
	push	eax
	mov	ecx, DWORD PTR [edx+120]
	push	ecx
	lea	ecx, DWORD PTR _prop$70112[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=
$LN15@GetArchive@2:
	jmp	$LN19@GetArchive@2
$LN14@GetArchive@2:
; Line 300
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+138]
	test	eax, eax
	je	SHORT $LN13@GetArchive@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+132]
	push	edx
	mov	eax, DWORD PTR [ecx+128]
	push	eax
	lea	ecx, DWORD PTR _prop$70112[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=
$LN13@GetArchive@2:
	jmp	$LN19@GetArchive@2
$LN12@GetArchive@2:
; Line 301
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+136]
	test	edx, edx
	je	SHORT $LN11@GetArchive@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	push	ecx
	mov	edx, DWORD PTR [eax+104]
	push	edx
	lea	ecx, DWORD PTR _prop$70112[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=
$LN11@GetArchive@2:
	jmp	$LN19@GetArchive@2
$LN10@GetArchive@2:
; Line 302
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 168				; 000000a8H
	call	?IsEmpty@AString@@QBE_NXZ		; AString::IsEmpty
	mov	BYTE PTR tv185[ebp], al
	movzx	eax, BYTE PTR tv185[ebp]
	test	eax, eax
	jne	SHORT $LN9@GetArchive@2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 168				; 000000a8H
	call	??BAString@@QBEPBDXZ			; AString::operator char const *
	mov	DWORD PTR tv186[ebp], eax
	mov	ecx, DWORD PTR tv186[ebp]
	push	ecx
	lea	ecx, DWORD PTR _prop$70112[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@PBD@Z ; NWindows::NCOM::CPropVariant::operator=
$LN9@GetArchive@2:
	jmp	$LN19@GetArchive@2
$LN8@GetArchive@2:
; Line 305
	mov	DWORD PTR _v$70128[ebp], 0
; Line 306
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+152]
	test	eax, eax
	jne	SHORT $LN7@GetArchive@2
	mov	ecx, DWORD PTR _v$70128[ebp]
	or	ecx, 1
	mov	DWORD PTR _v$70128[ebp], ecx
$LN7@GetArchive@2:
; Line 307
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+140]
	test	eax, eax
	je	SHORT $LN6@GetArchive@2
	mov	ecx, DWORD PTR _v$70128[ebp]
	or	ecx, 32					; 00000020H
	mov	DWORD PTR _v$70128[ebp], ecx
$LN6@GetArchive@2:
; Line 308
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+141]
	test	eax, eax
	je	SHORT $LN5@GetArchive@2
	mov	ecx, DWORD PTR _v$70128[ebp]
	or	ecx, 64					; 00000040H
	mov	DWORD PTR _v$70128[ebp], ecx
$LN5@GetArchive@2:
; Line 309
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+143]
	test	eax, eax
	je	SHORT $LN4@GetArchive@2
	mov	ecx, DWORD PTR _v$70128[ebp]
	or	ecx, 2
	mov	DWORD PTR _v$70128[ebp], ecx
$LN4@GetArchive@2:
; Line 310
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+142]
	test	eax, eax
	je	SHORT $LN3@GetArchive@2
	mov	ecx, DWORD PTR _v$70128[ebp]
	or	ecx, 128				; 00000080H
	mov	DWORD PTR _v$70128[ebp], ecx
$LN3@GetArchive@2:
; Line 311
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+144]
	test	eax, eax
	je	SHORT $LN2@GetArchive@2
	mov	ecx, DWORD PTR _v$70128[ebp]
	or	ecx, 512				; 00000200H
	mov	DWORD PTR _v$70128[ebp], ecx
$LN2@GetArchive@2:
; Line 312
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+145]
	test	eax, eax
	je	SHORT $LN1@GetArchive@2
	mov	ecx, DWORD PTR _v$70128[ebp]
	or	ecx, 1024				; 00000400H
	mov	DWORD PTR _v$70128[ebp], ecx
$LN1@GetArchive@2:
; Line 313
	mov	edx, DWORD PTR _v$70128[ebp]
	push	edx
	lea	ecx, DWORD PTR _prop$70112[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z ; NWindows::NCOM::CPropVariant::operator=
$LN19@GetArchive@2:
; Line 316
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	lea	ecx, DWORD PTR _prop$70112[ebp]
	call	?Detach@CPropVariant@NCOM@NWindows@@QAEJPAUtagPROPVARIANT@@@Z ; NWindows::NCOM::CPropVariant::Detach
; Line 317
	mov	DWORD PTR $T71442[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _prop$70112[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T71442[ebp]
	jmp	SHORT $LN22@GetArchive@2
__catch$?GetArchiveProperty@CHandler@NXz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$0:
; Line 318
	mov	DWORD PTR $T71443[ebp], -2147024882	; 8007000eH
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN28@GetArchive@2
	ret	0
	mov	eax, __tryend$?GetArchiveProperty@CHandler@NXz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$1
	ret	0
__tryend$?GetArchiveProperty@CHandler@NXz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$1:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN22@GetArchive@2
$LN28@GetArchive@2:
	mov	eax, DWORD PTR $T71443[ebp]
$LN22@GetArchive@2:
; Line 319
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN34@GetArchive@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 68					; 00000044H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN34@GetArchive@2:
	DD	1
	DD	$LN33@GetArchive@2
$LN33@GetArchive@2:
	DD	-36					; ffffffdcH
	DD	16					; 00000010H
	DD	$LN31@GetArchive@2
$LN31@GetArchive@2:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
	npad	3
$LN35@GetArchive@2:
	DD	$LN10@GetArchive@2
	DD	$LN14@GetArchive@2
	DD	$LN18@GetArchive@2
	DD	$LN8@GetArchive@2
	DD	$LN16@GetArchive@2
	DD	$LN12@GetArchive@2
	DD	$LN19@GetArchive@2
$LN30@GetArchive@2:
	DB	0
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	1
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	2
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	3
	DB	6
	DB	6
	DB	4
	DB	6
	DB	6
	DB	6
	DB	5
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?GetArchiveProperty@CHandler@NXz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$2:
	lea	ecx, DWORD PTR _prop$70112[ebp]
	jmp	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
__ehhandler$?GetArchiveProperty@CHandler@NXz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetArchiveProperty@CHandler@NXz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetArchiveProperty@CHandler@NXz@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z ENDP ; NArchive::NXz::CHandler::GetArchiveProperty
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsEmpty@AString@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@AString@@QBE_NXZ PROC				; AString::IsEmpty, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 235
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+4], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@AString@@QBE_NXZ ENDP				; AString::IsEmpty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??BAString@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BAString@@QBEPBDXZ PROC				; AString::operator char const *, COMDAT
; _this$ = ecx
; Line 238
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??BAString@@QBEPBDXZ ENDP				; AString::operator char const *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CPropVariant@NCOM@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CPropVariant@NCOM@NWindows@@QAE@XZ PROC		; NWindows::NCOM::CPropVariant::CPropVariant, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\propvariant.h
; Line 47
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 49
	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx], ax
; Line 50
	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+2], dx
; Line 54
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
; Line 55
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CPropVariant@NCOM@NWindows@@QAE@XZ ENDP		; NWindows::NCOM::CPropVariant::CPropVariant
_TEXT	ENDS
EXTRN	?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ:PROC	; NWindows::NCOM::CPropVariant::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CPropVariant@NCOM@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CPropVariant@NCOM@NWindows@@QAE@XZ PROC		; NWindows::NCOM::CPropVariant::~CPropVariant, COMDAT
; _this$ = ecx
; Line 56
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ ; NWindows::NCOM::CPropVariant::Clear
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CPropVariant@NCOM@NWindows@@QAE@XZ ENDP		; NWindows::NCOM::CPropVariant::~CPropVariant
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
_TEXT	SEGMENT
_this$ = 8						; size = 4
_numItems$ = 12						; size = 4
?GetNumberOfItems@CHandler@NXz@NArchive@@UAGJPAI@Z PROC	; NArchive::NXz::CHandler::GetNumberOfItems
; File c:\workspace\7z1505-src\cpp\7zip\archive\xzhandler.cpp
; Line 322
	push	ebp
	mov	ebp, esp
; Line 323
	mov	eax, DWORD PTR _numItems$[ebp]
	mov	DWORD PTR [eax], 1
; Line 324
	xor	eax, eax
; Line 325
	pop	ebp
	ret	8
?GetNumberOfItems@CHandler@NXz@NArchive@@UAGJPAI@Z ENDP	; NArchive::NXz::CHandler::GetNumberOfItems
_TEXT	ENDS
xdata$x	SEGMENT
__catchsym$?GetProperty@CHandler@NXz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?GetProperty@CHandler@NXz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$0
__tryblocktable$?GetProperty@CHandler@NXz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$?GetProperty@CHandler@NXz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$3
__unwindtable$?GetProperty@CHandler@NXz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$?GetProperty@CHandler@NXz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$2
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?GetProperty@CHandler@NXz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?GetProperty@CHandler@NXz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?GetProperty@CHandler@NXz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv135 = -64						; size = 4
tv134 = -57						; size = 1
tv67 = -56						; size = 4
tv133 = -52						; size = 4
$T71473 = -48						; size = 4
$T71472 = -44						; size = 4
_prop$70152 = -36					; size = 16
__$EHRec$ = -16						; size = 16
_this$ = 8						; size = 4
___formal$ = 12						; size = 4
_propID$ = 16						; size = 4
_value$ = 20						; size = 4
?GetProperty@CHandler@NXz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z PROC ; NArchive::NXz::CHandler::GetProperty
; Line 328
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetProperty@CHandler@NXz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 48					; 00000030H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
; Line 329
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 330
	lea	ecx, DWORD PTR _prop$70152[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
	mov	DWORD PTR tv133[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 1
; Line 331
	mov	eax, DWORD PTR _propID$[ebp]
	mov	DWORD PTR tv67[ebp], eax
	cmp	DWORD PTR tv67[ebp], 7
	je	SHORT $LN6@GetPropert@2
	cmp	DWORD PTR tv67[ebp], 8
	je	SHORT $LN4@GetPropert@2
	cmp	DWORD PTR tv67[ebp], 22			; 00000016H
	je	SHORT $LN2@GetPropert@2
	jmp	SHORT $LN7@GetPropert@2
$LN6@GetPropert@2:
; Line 333
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+136]
	test	edx, edx
	je	SHORT $LN5@GetPropert@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	push	ecx
	mov	edx, DWORD PTR [eax+104]
	push	edx
	lea	ecx, DWORD PTR _prop$70152[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=
$LN5@GetPropert@2:
	jmp	SHORT $LN7@GetPropert@2
$LN4@GetPropert@2:
; Line 334
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+154]
	test	ecx, ecx
	je	SHORT $LN3@GetPropert@2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+116]
	push	eax
	mov	ecx, DWORD PTR [edx+112]
	push	ecx
	lea	ecx, DWORD PTR _prop$70152[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=
$LN3@GetPropert@2:
	jmp	SHORT $LN7@GetPropert@2
$LN2@GetPropert@2:
; Line 335
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 168				; 000000a8H
	call	?IsEmpty@AString@@QBE_NXZ		; AString::IsEmpty
	mov	BYTE PTR tv134[ebp], al
	movzx	edx, BYTE PTR tv134[ebp]
	test	edx, edx
	jne	SHORT $LN7@GetPropert@2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 168				; 000000a8H
	call	??BAString@@QBEPBDXZ			; AString::operator char const *
	mov	DWORD PTR tv135[ebp], eax
	mov	eax, DWORD PTR tv135[ebp]
	push	eax
	lea	ecx, DWORD PTR _prop$70152[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@PBD@Z ; NWindows::NCOM::CPropVariant::operator=
$LN7@GetPropert@2:
; Line 337
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _prop$70152[ebp]
	call	?Detach@CPropVariant@NCOM@NWindows@@QAEJPAUtagPROPVARIANT@@@Z ; NWindows::NCOM::CPropVariant::Detach
; Line 338
	mov	DWORD PTR $T71472[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _prop$70152[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T71472[ebp]
	jmp	SHORT $LN10@GetPropert@2
__catch$?GetProperty@CHandler@NXz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$0:
; Line 339
	mov	DWORD PTR $T71473[ebp], -2147024882	; 8007000eH
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN16@GetPropert@2
	ret	0
	mov	eax, __tryend$?GetProperty@CHandler@NXz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$1
	ret	0
__tryend$?GetProperty@CHandler@NXz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$1:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN10@GetPropert@2
$LN16@GetPropert@2:
	mov	eax, DWORD PTR $T71473[ebp]
$LN10@GetPropert@2:
; Line 340
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN21@GetPropert@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 64					; 00000040H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN21@GetPropert@2:
	DD	1
	DD	$LN20@GetPropert@2
$LN20@GetPropert@2:
	DD	-36					; ffffffdcH
	DD	16					; 00000010H
	DD	$LN18@GetPropert@2
$LN18@GetPropert@2:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?GetProperty@CHandler@NXz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$2:
	lea	ecx, DWORD PTR _prop$70152[ebp]
	jmp	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
__ehhandler$?GetProperty@CHandler@NXz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-68]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetProperty@CHandler@NXz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetProperty@CHandler@NXz@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z ENDP ; NArchive::NXz::CHandler::GetProperty
PUBLIC	??0COpenCallbackWrap@NXz@NArchive@@QAE@PAUIArchiveOpenCallback@@@Z ; NArchive::NXz::COpenCallbackWrap::COpenCallbackWrap
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_callback$ = 8						; size = 4
??0COpenCallbackWrap@NXz@NArchive@@QAE@PAUIArchiveOpenCallback@@@Z PROC ; NArchive::NXz::COpenCallbackWrap::COpenCallbackWrap
; _this$ = ecx
; Line 359
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 360
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ?OpenCallbackProgress@NXz@NArchive@@YGHPAX_K1@Z ; NArchive::NXz::OpenCallbackProgress
; Line 361
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _callback$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 362
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 363
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0COpenCallbackWrap@NXz@NArchive@@QAE@PAUIArchiveOpenCallback@@@Z ENDP ; NArchive::NXz::COpenCallbackWrap::COpenCallbackWrap
; Function compile flags: /Odtp /RTCsu
_p$ = -4						; size = 4
_pp$ = 8						; size = 4
_inSize$ = 12						; size = 8
___formal$ = 20						; size = 8
?OpenCallbackProgress@NXz@NArchive@@YGHPAX_K1@Z PROC	; NArchive::NXz::OpenCallbackProgress
; Line 352
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 353
	mov	eax, DWORD PTR _pp$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 354
	mov	esi, esp
	lea	ecx, DWORD PTR _inSize$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 355
	mov	eax, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [eax+8]
; Line 356
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?OpenCallbackProgress@NXz@NArchive@@YGHPAX_K1@Z ENDP	; NArchive::NXz::OpenCallbackProgress
_TEXT	ENDS
PUBLIC	??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=
PUBLIC	??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ; CMyComPtr<IInStream>::operator=
PUBLIC	??1CXzsCPP@NXz@NArchive@@QAE@XZ			; NArchive::NXz::CXzsCPP::~CXzsCPP
PUBLIC	??0CXzsCPP@NXz@NArchive@@QAE@XZ			; NArchive::NXz::CXzsCPP::CXzsCPP
PUBLIC	__$ArrayPad$
PUBLIC	?Open2@CHandler@NXz@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z ; NArchive::NXz::CHandler::Open2
EXTRN	_Xzs_GetNumBlocks@4:PROC
EXTRN	_Xzs_GetUnpackSize@4:PROC
EXTRN	_Xzs_ReadBackward@20:PROC
EXTRN	_g_Alloc:QWORD
EXTRN	_LookToRead_Init@4:PROC
EXTRN	_LookToRead_CreateVTable@8:PROC
EXTRN	??0CSeekInStreamWrap@@QAE@PAUIInStream@@@Z:PROC	; CSeekInStreamWrap::CSeekInStreamWrap
EXTRN	_XzBlock_ReadHeader@16:PROC
EXTRN	_Xz_ReadHeader@8:PROC
EXTRN	??0CSeqInStreamWrap@@QAE@PAUISequentialInStream@@@Z:PROC ; CSeqInStreamWrap::CSeqInStreamWrap
EXTRN	__chkstk:PROC
xdata$x	SEGMENT
__unwindtable$?Open2@CHandler@NXz@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Open2@CHandler@NXz@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Open2@CHandler@NXz@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?Open2@CHandler@NXz@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z$2
__ehfuncinfo$?Open2@CHandler@NXz@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?Open2@CHandler@NXz@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv248 = -16836						; size = 4
tv158 = -16832						; size = 4
tv168 = -16828						; size = 4
tv244 = -16824						; size = 4
tv251 = -16820						; size = 4
$T71499 = -16816					; size = 4
$T71498 = -16812					; size = 4
$T71497 = -16808					; size = 12
$T71494 = -16796					; size = 4
$T71493 = -16792					; size = 12
___result__$70257 = -16780				; size = 4
_res$ = -16776						; size = 4
_startPosition$ = -16768				; size = 8
_xzs$ = -16752						; size = 12
_openWrap$ = -16732					; size = 12
_lookStream$ = -16712					; size = 16412
_inStreamImp$ = -292					; size = 16
___result__$70242 = -272				; size = 4
___result__$70240 = -268				; size = 4
_i$70235 = -264						; size = 4
_numFilters$70234 = -260				; size = 4
_res2$70232 = -256					; size = 4
_headerSizeRes$70231 = -248				; size = 4
_isIndex$70230 = -236					; size = 4
_block$70229 = -224					; size = 152
_res$70227 = -68					; size = 4
_inStreamWrap$70226 = -60				; size = 24
_st$70225 = -28						; size = 2
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_inStream$ = 8						; size = 4
_callback$ = 12						; size = 4
?Open2@CHandler@NXz@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z PROC ; NArchive::NXz::CHandler::Open2
; _this$ = ecx
; Line 392
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Open2@CHandler@NXz@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	eax, 16824				; 000041b8H
	call	__chkstk
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-16836]
	mov	ecx, 4206				; 0000106eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 393
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+153], 1
; Line 397
	mov	ecx, DWORD PTR _inStream$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _inStreamWrap$70226[ebp]
	call	??0CSeqInStreamWrap@@QAE@PAUISequentialInStream@@@Z ; CSeqInStreamWrap::CSeqInStreamWrap
; Line 398
	lea	edx, DWORD PTR _inStreamWrap$70226[ebp]
	push	edx
	lea	eax, DWORD PTR _st$70225[ebp]
	push	eax
	call	_Xz_ReadHeader@8
	mov	DWORD PTR _res$70227[ebp], eax
; Line 399
	cmp	DWORD PTR _res$70227[ebp], 0
	je	SHORT $LN11@Open2
; Line 400
	mov	ecx, DWORD PTR _res$70227[ebp]
	push	ecx
	call	?SRes_to_Open_HRESULT@NXz@NArchive@@YGJH@Z ; NArchive::NXz::SRes_to_Open_HRESULT
	jmp	$LN12@Open2
$LN11@Open2:
; Line 406
	lea	edx, DWORD PTR _headerSizeRes$70231[ebp]
	push	edx
	lea	eax, DWORD PTR _isIndex$70230[ebp]
	push	eax
	lea	ecx, DWORD PTR _inStreamWrap$70226[ebp]
	push	ecx
	lea	edx, DWORD PTR _block$70229[ebp]
	push	edx
	call	_XzBlock_ReadHeader@16
	mov	DWORD PTR _res2$70232[ebp], eax
; Line 407
	cmp	DWORD PTR _res2$70232[ebp], 0
	jne	$LN10@Open2
	cmp	DWORD PTR _isIndex$70230[ebp], 0
	jne	$LN10@Open2
; Line 409
	movzx	eax, BYTE PTR _block$70229[ebp+16]
	and	eax, 3
	add	eax, 1
	mov	DWORD PTR _numFilters$70234[ebp], eax
; Line 410
	mov	DWORD PTR _i$70235[ebp], 0
	jmp	SHORT $LN9@Open2
$LN8@Open2:
	mov	ecx, DWORD PTR _i$70235[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$70235[ebp], ecx
$LN9@Open2:
	mov	edx, DWORD PTR _i$70235[ebp]
	cmp	edx, DWORD PTR _numFilters$70234[ebp]
	jae	SHORT $LN10@Open2
; Line 411
	mov	eax, DWORD PTR _i$70235[ebp]
	shl	eax, 5
	lea	ecx, DWORD PTR _block$70229[ebp+eax+24]
	push	ecx
	lea	edx, DWORD PTR $T71493[ebp]
	push	edx
	call	?GetMethodString@NXz@NArchive@@YG?AVAString@@ABUCXzFilter@@@Z ; NArchive::NXz::GetMethodString
	mov	DWORD PTR tv251[ebp], eax
	mov	eax, DWORD PTR tv251[ebp]
	mov	DWORD PTR tv244[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR tv244[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 168				; 000000a8H
	push	edx
	call	?AddString@NXz@NArchive@@YGXAAVAString@@ABV3@@Z ; NArchive::NXz::AddString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T71493[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	jmp	SHORT $LN8@Open2
$LN10@Open2:
; Line 416
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 112				; 00000070H
	mov	esi, esp
	push	eax
	push	2
	push	0
	push	0
	mov	ecx, DWORD PTR _inStream$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _inStream$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$70240[ebp], eax
	cmp	DWORD PTR ___result__$70240[ebp], 0
	je	SHORT $LN6@Open2
	mov	eax, DWORD PTR ___result__$70240[ebp]
	jmp	$LN12@Open2
$LN6@Open2:
; Line 417
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 112				; 00000070H
	mov	esi, esp
	push	edx
	push	0
	mov	eax, DWORD PTR _callback$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _callback$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$70242[ebp], eax
	cmp	DWORD PTR ___result__$70242[ebp], 0
	je	SHORT $LN5@Open2
	mov	eax, DWORD PTR ___result__$70242[ebp]
	jmp	$LN12@Open2
$LN5@Open2:
; Line 419
	mov	ecx, DWORD PTR _inStream$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _inStreamImp$[ebp]
	call	??0CSeekInStreamWrap@@QAE@PAUIInStream@@@Z ; CSeekInStreamWrap::CSeekInStreamWrap
; Line 422
	push	1
	lea	edx, DWORD PTR _lookStream$[ebp]
	push	edx
	call	_LookToRead_CreateVTable@8
; Line 423
	lea	eax, DWORD PTR _inStreamImp$[ebp]
	mov	DWORD PTR _lookStream$[ebp+16], eax
; Line 424
	lea	ecx, DWORD PTR _lookStream$[ebp]
	push	ecx
	call	_LookToRead_Init@4
; Line 426
	mov	edx, DWORD PTR _callback$[ebp]
	push	edx
	lea	ecx, DWORD PTR _openWrap$[ebp]
	call	??0COpenCallbackWrap@NXz@NArchive@@QAE@PAUIArchiveOpenCallback@@@Z ; NArchive::NXz::COpenCallbackWrap::COpenCallbackWrap
; Line 428
	lea	ecx, DWORD PTR _xzs$[ebp]
	call	??0CXzsCPP@NXz@NArchive@@QAE@XZ		; NArchive::NXz::CXzsCPP::CXzsCPP
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 430
	push	OFFSET _g_Alloc
	lea	eax, DWORD PTR _openWrap$[ebp]
	push	eax
	lea	ecx, DWORD PTR _startPosition$[ebp]
	push	ecx
	lea	edx, DWORD PTR _lookStream$[ebp]
	push	edx
	lea	eax, DWORD PTR _xzs$[ebp]
	push	eax
	call	_Xzs_ReadBackward@20
	mov	DWORD PTR _res$[ebp], eax
; Line 431
	cmp	DWORD PTR _res$[ebp], 10		; 0000000aH
	jne	SHORT $LN4@Open2
; Line 432
	cmp	DWORD PTR _openWrap$[ebp+8], 0
	jne	SHORT $LN14@Open2
	mov	DWORD PTR tv168[ebp], -2147467259	; 80004005H
	jmp	SHORT $LN15@Open2
$LN14@Open2:
	mov	ecx, DWORD PTR _openWrap$[ebp+8]
	mov	DWORD PTR tv168[ebp], ecx
$LN15@Open2:
	mov	edx, DWORD PTR tv168[ebp]
	mov	DWORD PTR $T71494[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _xzs$[ebp]
	call	??1CXzsCPP@NXz@NArchive@@QAE@XZ		; NArchive::NXz::CXzsCPP::~CXzsCPP
	mov	eax, DWORD PTR $T71494[ebp]
	jmp	$LN12@Open2
$LN4@Open2:
; Line 437
	cmp	DWORD PTR _res$[ebp], 0
	jne	$LN3@Open2
	mov	eax, DWORD PTR _startPosition$[ebp]
	or	eax, DWORD PTR _startPosition$[ebp+4]
	jne	$LN3@Open2
; Line 439
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+154], 1
; Line 441
	lea	edx, DWORD PTR _xzs$[ebp]
	push	edx
	call	_Xzs_GetUnpackSize@4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+104], eax
	mov	DWORD PTR [ecx+108], edx
; Line 442
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+136], 1
; Line 444
	mov	eax, DWORD PTR _xzs$[ebp]
	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+120], eax
	mov	DWORD PTR [edx+124], ecx
; Line 445
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+137], 1
; Line 447
	lea	ecx, DWORD PTR _xzs$[ebp]
	push	ecx
	call	_Xzs_GetNumBlocks@4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+128], eax
	mov	DWORD PTR [ecx+132], edx
; Line 448
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+138], 1
; Line 450
	lea	eax, DWORD PTR _xzs$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T71497[ebp]
	push	ecx
	call	?GetCheckString@NXz@NArchive@@YG?AVAString@@ABUCXzs@@@Z ; NArchive::NXz::GetCheckString
	mov	DWORD PTR tv158[ebp], eax
	mov	edx, DWORD PTR tv158[ebp]
	mov	DWORD PTR tv248[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	eax, DWORD PTR tv248[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 168				; 000000a8H
	push	ecx
	call	?AddString@NXz@NArchive@@YGXAAVAString@@ABV3@@Z ; NArchive::NXz::AddString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T71497[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
; Line 452
	jmp	SHORT $LN2@Open2
$LN3@Open2:
; Line 454
	mov	DWORD PTR _res$[ebp], 0
$LN2@Open2:
; Line 457
	mov	edx, DWORD PTR _res$[ebp]
	push	edx
	call	?SRes_to_Open_HRESULT@NXz@NArchive@@YGJH@Z ; NArchive::NXz::SRes_to_Open_HRESULT
	mov	DWORD PTR ___result__$70257[ebp], eax
	cmp	DWORD PTR ___result__$70257[ebp], 0
	je	SHORT $LN1@Open2
	mov	eax, DWORD PTR ___result__$70257[ebp]
	mov	DWORD PTR $T71498[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _xzs$[ebp]
	call	??1CXzsCPP@NXz@NArchive@@QAE@XZ		; NArchive::NXz::CXzsCPP::~CXzsCPP
	mov	eax, DWORD PTR $T71498[ebp]
	jmp	SHORT $LN12@Open2
$LN1@Open2:
; Line 458
	mov	ecx, DWORD PTR _inStream$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 156				; 0000009cH
	call	??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ; CMyComPtr<IInStream>::operator=
; Line 459
	mov	edx, DWORD PTR _inStream$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 160				; 000000a0H
	call	??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=
; Line 460
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+152], 1
; Line 461
	mov	DWORD PTR $T71499[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _xzs$[ebp]
	call	??1CXzsCPP@NXz@NArchive@@QAE@XZ		; NArchive::NXz::CXzsCPP::~CXzsCPP
	mov	eax, DWORD PTR $T71499[ebp]
$LN12@Open2:
; Line 462
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN31@Open2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 16836				; 000041c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN31@Open2:
	DD	10					; 0000000aH
	DD	$LN30@Open2
$LN30@Open2:
	DD	-28					; ffffffe4H
	DD	2
	DD	$LN19@Open2
	DD	-60					; ffffffc4H
	DD	24					; 00000018H
	DD	$LN20@Open2
	DD	-224					; ffffff20H
	DD	152					; 00000098H
	DD	$LN21@Open2
	DD	-236					; ffffff14H
	DD	4
	DD	$LN22@Open2
	DD	-248					; ffffff08H
	DD	4
	DD	$LN23@Open2
	DD	-292					; fffffedcH
	DD	16					; 00000010H
	DD	$LN24@Open2
	DD	-16712					; ffffbeb8H
	DD	16412					; 0000401cH
	DD	$LN25@Open2
	DD	-16732					; ffffbea4H
	DD	12					; 0000000cH
	DD	$LN26@Open2
	DD	-16752					; ffffbe90H
	DD	12					; 0000000cH
	DD	$LN27@Open2
	DD	-16768					; ffffbe80H
	DD	8
	DD	$LN28@Open2
$LN28@Open2:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	0
$LN27@Open2:
	DB	120					; 00000078H
	DB	122					; 0000007aH
	DB	115					; 00000073H
	DB	0
$LN26@Open2:
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	87					; 00000057H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	0
$LN25@Open2:
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	111					; 0000006fH
	DB	107					; 0000006bH
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN24@Open2:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	73					; 00000049H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
$LN23@Open2:
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN22@Open2:
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	0
$LN21@Open2:
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
$LN20@Open2:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	87					; 00000057H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	0
$LN19@Open2:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Open2@CHandler@NXz@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z$0:
	lea	ecx, DWORD PTR $T71493[ebp]
	jmp	??1AString@@QAE@XZ			; AString::~AString
__unwindfunclet$?Open2@CHandler@NXz@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z$1:
	lea	ecx, DWORD PTR _xzs$[ebp]
	jmp	??1CXzsCPP@NXz@NArchive@@QAE@XZ		; NArchive::NXz::CXzsCPP::~CXzsCPP
__unwindfunclet$?Open2@CHandler@NXz@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z$2:
	lea	ecx, DWORD PTR $T71497[ebp]
	jmp	??1AString@@QAE@XZ			; AString::~AString
__ehhandler$?Open2@CHandler@NXz@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16836]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Open2@CHandler@NXz@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Open2@CHandler@NXz@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z ENDP ; NArchive::NXz::CHandler::Open2
PUBLIC	??YAString@@QAEAAV0@D@Z				; AString::operator+=
PUBLIC	__$ArrayPad$
EXTRN	??0AString@@QAE@ABV0@@Z:PROC			; AString::AString
EXTRN	??0AString@@QAE@PBD@Z:PROC			; AString::AString
EXTRN	?ConvertUInt64ToString@@YGX_KPAD@Z:PROC		; ConvertUInt64ToString
xdata$x	SEGMENT
__unwindtable$?GetMethodString@NXz@NArchive@@YG?AVAString@@ABUCXzFilter@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetMethodString@NXz@NArchive@@YG?AVAString@@ABUCXzFilter@@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?GetMethodString@NXz@NArchive@@YG?AVAString@@ABUCXzFilter@@@Z$0
__ehfuncinfo$?GetMethodString@NXz@NArchive@@YG?AVAString@@ABUCXzFilter@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?GetMethodString@NXz@NArchive@@YG?AVAString@@ABUCXzFilter@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv188 = -112						; size = 4
tv180 = -108						; size = 4
tv161 = -104						; size = 4
tv158 = -100						; size = 8
$T71524 = -92						; size = 4
_bi$70073 = -88						; size = 4
_s$ = -80						; size = 12
_temp$ = -60						; size = 32
_i$70059 = -24						; size = 4
_p$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_f$ = 12						; size = 4
?GetMethodString@NXz@NArchive@@YG?AVAString@@ABUCXzFilter@@@Z PROC ; NArchive::NXz::GetMethodString
; Line 208
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetMethodString@NXz@NArchive@@YG?AVAString@@ABUCXzFilter@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 100				; 00000064H
	push	edi
	lea	edi, DWORD PTR [ebp-112]
	mov	ecx, 25					; 00000019H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T71524[ebp], 0
; Line 209
	mov	DWORD PTR _p$[ebp], 0
; Line 210
	mov	DWORD PTR _i$70059[ebp], 0
	jmp	SHORT $LN13@GetMethodS
$LN12@GetMethodS:
	mov	eax, DWORD PTR _i$70059[ebp]
	add	eax, 1
	mov	DWORD PTR _i$70059[ebp], eax
$LN13@GetMethodS:
	cmp	DWORD PTR _i$70059[ebp], 9
	jae	SHORT $LN11@GetMethodS
; Line 211
	mov	ecx, DWORD PTR _i$70059[ebp]
	mov	edx, DWORD PTR _g_NamePairs[ecx*8]
	xor	eax, eax
	mov	ecx, DWORD PTR _f$[ebp]
	mov	DWORD PTR tv158[ebp], edx
	mov	DWORD PTR tv158[ebp+4], eax
	mov	DWORD PTR tv161[ebp], ecx
	mov	edx, DWORD PTR tv161[ebp]
	mov	eax, DWORD PTR tv158[ebp]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN10@GetMethodS
	mov	ecx, DWORD PTR tv161[ebp]
	mov	edx, DWORD PTR tv158[ebp+4]
	cmp	edx, DWORD PTR [ecx+4]
	jne	SHORT $LN10@GetMethodS
; Line 213
	mov	eax, DWORD PTR _i$70059[ebp]
	mov	ecx, DWORD PTR _g_NamePairs[eax*8+4]
	mov	DWORD PTR _p$[ebp], ecx
; Line 214
	jmp	SHORT $LN11@GetMethodS
$LN10@GetMethodS:
; Line 216
	jmp	SHORT $LN12@GetMethodS
$LN11@GetMethodS:
; Line 217
	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN9@GetMethodS
; Line 219
	lea	edx, DWORD PTR _temp$[ebp]
	push	edx
	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?ConvertUInt64ToString@@YGX_KPAD@Z	; ConvertUInt64ToString
; Line 220
	lea	eax, DWORD PTR _temp$[ebp]
	mov	DWORD PTR _p$[ebp], eax
$LN9@GetMethodS:
; Line 223
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _s$[ebp]
	call	??0AString@@QAE@PBD@Z			; AString::AString
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 225
	mov	edx, DWORD PTR _f$[ebp]
	cmp	DWORD PTR [edx+8], 0
	jbe	$LN8@GetMethodS
; Line 227
	push	58					; 0000003aH
	lea	ecx, DWORD PTR _s$[ebp]
	call	??YAString@@QAEAAV0@D@Z			; AString::operator+=
; Line 228
	mov	eax, DWORD PTR _f$[ebp]
	mov	DWORD PTR tv180[ebp], eax
	mov	ecx, DWORD PTR tv180[ebp]
	cmp	DWORD PTR [ecx], 33			; 00000021H
	jne	SHORT $LN7@GetMethodS
	mov	edx, DWORD PTR tv180[ebp]
	cmp	DWORD PTR [edx+4], 0
	jne	SHORT $LN7@GetMethodS
	mov	eax, DWORD PTR _f$[ebp]
	cmp	DWORD PTR [eax+8], 1
	jne	SHORT $LN7@GetMethodS
; Line 229
	mov	ecx, DWORD PTR _f$[ebp]
	movzx	edx, BYTE PTR [ecx+12]
	push	edx
	lea	eax, DWORD PTR _s$[ebp]
	push	eax
	call	?Lzma2PropToString@NXz@NArchive@@YGXAAVAString@@I@Z ; NArchive::NXz::Lzma2PropToString
	jmp	SHORT $LN8@GetMethodS
$LN7@GetMethodS:
; Line 230
	mov	ecx, DWORD PTR _f$[ebp]
	mov	DWORD PTR tv188[ebp], ecx
	mov	edx, DWORD PTR tv188[ebp]
	cmp	DWORD PTR [edx], 3
	jne	SHORT $LN5@GetMethodS
	mov	eax, DWORD PTR tv188[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN5@GetMethodS
	mov	ecx, DWORD PTR _f$[ebp]
	cmp	DWORD PTR [ecx+8], 1
	jne	SHORT $LN5@GetMethodS
; Line 231
	mov	edx, DWORD PTR _f$[ebp]
	movzx	eax, BYTE PTR [edx+12]
	add	eax, 1
	push	eax
	lea	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	?AddUInt32ToString@NXz@NArchive@@YGXAAVAString@@I@Z ; NArchive::NXz::AddUInt32ToString
; Line 232
	jmp	SHORT $LN8@GetMethodS
$LN5@GetMethodS:
; Line 234
	push	91					; 0000005bH
	lea	ecx, DWORD PTR _s$[ebp]
	call	??YAString@@QAEAAV0@D@Z			; AString::operator+=
; Line 235
	mov	DWORD PTR _bi$70073[ebp], 0
	jmp	SHORT $LN3@GetMethodS
$LN2@GetMethodS:
	mov	edx, DWORD PTR _bi$70073[ebp]
	add	edx, 1
	mov	DWORD PTR _bi$70073[ebp], edx
$LN3@GetMethodS:
	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR _bi$70073[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	SHORT $LN1@GetMethodS
; Line 236
	mov	edx, DWORD PTR _f$[ebp]
	add	edx, DWORD PTR _bi$70073[ebp]
	movzx	eax, BYTE PTR [edx+12]
	push	eax
	lea	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	?AddHexToString@NXz@NArchive@@YGXAAVAString@@E@Z ; NArchive::NXz::AddHexToString
	jmp	SHORT $LN2@GetMethodS
$LN1@GetMethodS:
; Line 237
	push	93					; 0000005dH
	lea	ecx, DWORD PTR _s$[ebp]
	call	??YAString@@QAEAAV0@D@Z			; AString::operator+=
$LN8@GetMethodS:
; Line 240
	lea	edx, DWORD PTR _s$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0AString@@QAE@ABV0@@Z			; AString::AString
	mov	eax, DWORD PTR $T71524[ebp]
	or	eax, 1
	mov	DWORD PTR $T71524[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _s$[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 241
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN23@GetMethodS
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 112				; 00000070H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN23@GetMethodS:
	DD	2
	DD	$LN22@GetMethodS
$LN22@GetMethodS:
	DD	-60					; ffffffc4H
	DD	32					; 00000020H
	DD	$LN19@GetMethodS
	DD	-80					; ffffffb0H
	DD	12					; 0000000cH
	DD	$LN20@GetMethodS
$LN20@GetMethodS:
	DB	115					; 00000073H
	DB	0
$LN19@GetMethodS:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?GetMethodString@NXz@NArchive@@YG?AVAString@@ABUCXzFilter@@@Z$0:
	lea	ecx, DWORD PTR _s$[ebp]
	jmp	??1AString@@QAE@XZ			; AString::~AString
__unwindfunclet$?GetMethodString@NXz@NArchive@@YG?AVAString@@ABUCXzFilter@@@Z$1:
	mov	eax, DWORD PTR $T71524[ebp]
	and	eax, 1
	je	$LN18@GetMethodS
	and	DWORD PTR $T71524[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1AString@@QAE@XZ			; AString::~AString
$LN18@GetMethodS:
	ret	0
__ehhandler$?GetMethodString@NXz@NArchive@@YG?AVAString@@ABUCXzFilter@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-108]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetMethodString@NXz@NArchive@@YG?AVAString@@ABUCXzFilter@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetMethodString@NXz@NArchive@@YG?AVAString@@ABUCXzFilter@@@Z ENDP ; NArchive::NXz::GetMethodString
EXTRN	?Grow_1@AString@@AAEXXZ:PROC			; AString::Grow_1
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??YAString@@QAEAAV0@D@Z
_TEXT	SEGMENT
_chars$ = -12						; size = 4
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_c$ = 8							; size = 1
??YAString@@QAEAAV0@D@Z PROC				; AString::operator+=, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 281
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 282
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+4]
	jne	SHORT $LN1@operator
; Line 283
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Grow_1@AString@@AAEXXZ			; AString::Grow_1
$LN1@operator:
; Line 284
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _len$[ebp], ecx
; Line 285
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _chars$[ebp], eax
; Line 286
	mov	ecx, DWORD PTR _chars$[ebp]
	add	ecx, DWORD PTR _len$[ebp]
	mov	dl, BYTE PTR _c$[ebp]
	mov	BYTE PTR [ecx], dl
	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 1
	mov	DWORD PTR _len$[ebp], eax
; Line 287
	mov	ecx, DWORD PTR _chars$[ebp]
	add	ecx, DWORD PTR _len$[ebp]
	mov	BYTE PTR [ecx], 0
; Line 288
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 289
	mov	eax, DWORD PTR _this$[ebp]
; Line 290
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??YAString@@QAEAAV0@D@Z ENDP				; AString::operator+=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
_TEXT	SEGMENT
_s$ = 8							; size = 4
_value$ = 12						; size = 1
?AddHexToString@NXz@NArchive@@YGXAAVAString@@E@Z PROC	; NArchive::NXz::AddHexToString
; File c:\workspace\7z1505-src\cpp\7zip\archive\xzhandler.cpp
; Line 155
	push	ebp
	mov	ebp, esp
; Line 156
	movzx	eax, BYTE PTR _value$[ebp]
	sar	eax, 4
	push	eax
	call	?GetHex@NXz@NArchive@@YGDI@Z		; NArchive::NXz::GetHex
	movzx	ecx, al
	push	ecx
	mov	ecx, DWORD PTR _s$[ebp]
	call	??YAString@@QAEAAV0@D@Z			; AString::operator+=
; Line 157
	movzx	edx, BYTE PTR _value$[ebp]
	and	edx, 15					; 0000000fH
	push	edx
	call	?GetHex@NXz@NArchive@@YGDI@Z		; NArchive::NXz::GetHex
	movzx	eax, al
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	call	??YAString@@QAEAAV0@D@Z			; AString::operator+=
; Line 158
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?AddHexToString@NXz@NArchive@@YGXAAVAString@@E@Z ENDP	; NArchive::NXz::AddHexToString
; Function compile flags: /Odtp /RTCsu
tv68 = -4						; size = 4
_value$ = 8						; size = 4
?GetHex@NXz@NArchive@@YGDI@Z PROC			; NArchive::NXz::GetHex
; Line 150
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 151
	cmp	DWORD PTR _value$[ebp], 10		; 0000000aH
	jae	SHORT $LN3@GetHex
	mov	eax, DWORD PTR _value$[ebp]
	add	eax, 48					; 00000030H
	mov	DWORD PTR tv68[ebp], eax
	jmp	SHORT $LN4@GetHex
$LN3@GetHex:
	mov	ecx, DWORD PTR _value$[ebp]
	add	ecx, 55					; 00000037H
	mov	DWORD PTR tv68[ebp], ecx
$LN4@GetHex:
	mov	al, BYTE PTR tv68[ebp]
; Line 152
	mov	esp, ebp
	pop	ebp
	ret	4
?GetHex@NXz@NArchive@@YGDI@Z ENDP			; NArchive::NXz::GetHex
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	??YAString@@QAEAAV0@PBD@Z:PROC			; AString::operator+=
EXTRN	?ConvertUInt32ToString@@YGXIPAD@Z:PROC		; ConvertUInt32ToString
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_temp$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_s$ = 8							; size = 4
_value$ = 12						; size = 4
?AddUInt32ToString@NXz@NArchive@@YGXAAVAString@@I@Z PROC ; NArchive::NXz::AddUInt32ToString
; Line 161
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 163
	lea	eax, DWORD PTR _temp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	call	?ConvertUInt32ToString@@YGXIPAD@Z	; ConvertUInt32ToString
; Line 164
	lea	edx, DWORD PTR _temp$[ebp]
	push	edx
	mov	ecx, DWORD PTR _s$[ebp]
	call	??YAString@@QAEAAV0@PBD@Z		; AString::operator+=
; Line 165
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@AddUInt32T
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN5@AddUInt32T:
	DD	1
	DD	$LN4@AddUInt32T
$LN4@AddUInt32T:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN3@AddUInt32T
$LN3@AddUInt32T:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
?AddUInt32ToString@NXz@NArchive@@YGXAAVAString@@I@Z ENDP ; NArchive::NXz::AddUInt32ToString
; Function compile flags: /Odtp /RTCsu
_size$ = -8						; size = 4
_c$ = -1						; size = 1
_s$ = 8							; size = 4
_prop$ = 12						; size = 4
?Lzma2PropToString@NXz@NArchive@@YGXAAVAString@@I@Z PROC ; NArchive::NXz::Lzma2PropToString
; Line 168
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 169
	mov	BYTE PTR _c$[ebp], 0
; Line 171
	mov	eax, DWORD PTR _prop$[ebp]
	and	eax, 1
	jne	SHORT $LN4@Lzma2PropT
; Line 172
	mov	ecx, DWORD PTR _prop$[ebp]
	shr	ecx, 1
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR _size$[ebp], ecx
; Line 173
	jmp	SHORT $LN3@Lzma2PropT
$LN4@Lzma2PropT:
; Line 175
	mov	BYTE PTR _c$[ebp], 107			; 0000006bH
; Line 176
	mov	edx, DWORD PTR _prop$[ebp]
	and	edx, 1
	or	edx, 2
	mov	ecx, DWORD PTR _prop$[ebp]
	shr	ecx, 1
	add	ecx, 1
	shl	edx, cl
	mov	DWORD PTR _size$[ebp], edx
; Line 177
	cmp	DWORD PTR _prop$[ebp], 17		; 00000011H
	jbe	SHORT $LN3@Lzma2PropT
; Line 179
	mov	eax, DWORD PTR _size$[ebp]
	shr	eax, 10					; 0000000aH
	mov	DWORD PTR _size$[ebp], eax
; Line 180
	mov	BYTE PTR _c$[ebp], 109			; 0000006dH
$LN3@Lzma2PropT:
; Line 183
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	?AddUInt32ToString@NXz@NArchive@@YGXAAVAString@@I@Z ; NArchive::NXz::AddUInt32ToString
; Line 184
	movsx	eax, BYTE PTR _c$[ebp]
	test	eax, eax
	je	SHORT $LN5@Lzma2PropT
; Line 185
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _s$[ebp]
	call	??YAString@@QAEAAV0@D@Z			; AString::operator+=
$LN5@Lzma2PropT:
; Line 186
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Lzma2PropToString@NXz@NArchive@@YGXAAVAString@@I@Z ENDP ; NArchive::NXz::Lzma2PropToString
_TEXT	ENDS
EXTRN	??YAString@@QAEAAV0@ABV0@@Z:PROC		; AString::operator+=
EXTRN	?Add_Space_if_NotEmpty@AString@@QAEXXZ:PROC	; AString::Add_Space_if_NotEmpty
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_dest$ = 8						; size = 4
_src$ = 12						; size = 4
?AddString@NXz@NArchive@@YGXAAVAString@@ABV3@@Z PROC	; NArchive::NXz::AddString
; Line 244
	push	ebp
	mov	ebp, esp
; Line 245
	mov	ecx, DWORD PTR _dest$[ebp]
	call	?Add_Space_if_NotEmpty@AString@@QAEXXZ	; AString::Add_Space_if_NotEmpty
; Line 246
	mov	eax, DWORD PTR _src$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	call	??YAString@@QAEAAV0@ABV0@@Z		; AString::operator+=
; Line 247
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?AddString@NXz@NArchive@@YGXAAVAString@@ABV3@@Z ENDP	; NArchive::NXz::AddString
_TEXT	ENDS
EXTRN	??4AString@@QAEAAV0@PBD@Z:PROC			; AString::operator=
xdata$x	SEGMENT
__unwindtable$?GetCheckString@NXz@NArchive@@YG?AVAString@@ABUCXzs@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetCheckString@NXz@NArchive@@YG?AVAString@@ABUCXzs@@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?GetCheckString@NXz@NArchive@@YG?AVAString@@ABUCXzs@@@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$?GetCheckString@NXz@NArchive@@YG?AVAString@@ABUCXzs@@@Z$1
__ehfuncinfo$?GetCheckString@NXz@NArchive@@YG?AVAString@@ABUCXzs@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?GetCheckString@NXz@NArchive@@YG?AVAString@@ABUCXzs@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T71551 = -64						; size = 4
_s2$70101 = -56						; size = 12
_s$ = -36						; size = 12
_mask$ = -20						; size = 4
_i$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_xzs$ = 12						; size = 4
?GetCheckString@NXz@NArchive@@YG?AVAString@@ABUCXzs@@@Z PROC ; NArchive::NXz::GetCheckString
; Line 270
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetCheckString@NXz@NArchive@@YG?AVAString@@ABUCXzs@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 52					; 00000034H
	push	edi
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T71551[ebp], 0
; Line 272
	mov	DWORD PTR _mask$[ebp], 0
; Line 273
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN9@GetCheckSt
$LN8@GetCheckSt:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN9@GetCheckSt:
	mov	ecx, DWORD PTR _xzs$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx]
	jae	SHORT $LN7@GetCheckSt
; Line 274
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _xzs$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movzx	ecx, WORD PTR [edx+eax]
	and	ecx, 15					; 0000000fH
	mov	eax, 1
	shl	eax, cl
	or	eax, DWORD PTR _mask$[ebp]
	mov	DWORD PTR _mask$[ebp], eax
	jmp	SHORT $LN8@GetCheckSt
$LN7@GetCheckSt:
; Line 275
	lea	ecx, DWORD PTR _s$[ebp]
	call	??0AString@@QAE@XZ			; AString::AString
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 276
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@GetCheckSt
$LN5@GetCheckSt:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN6@GetCheckSt:
	cmp	DWORD PTR _i$[ebp], 15			; 0000000fH
	ja	SHORT $LN4@GetCheckSt
; Line 277
	mov	edx, DWORD PTR _mask$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	shr	edx, cl
	and	edx, 1
	je	SHORT $LN3@GetCheckSt
; Line 279
	lea	ecx, DWORD PTR _s2$70101[ebp]
	call	??0AString@@QAE@XZ			; AString::AString
	mov	BYTE PTR __$EHRec$[ebp+8], 2
; Line 280
	mov	eax, DWORD PTR _i$[ebp]
	cmp	DWORD PTR _kChecks[eax*4], 0
	je	SHORT $LN2@GetCheckSt
; Line 281
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _kChecks[ecx*4]
	push	edx
	lea	ecx, DWORD PTR _s2$70101[ebp]
	call	??4AString@@QAEAAV0@PBD@Z		; AString::operator=
; Line 282
	jmp	SHORT $LN1@GetCheckSt
$LN2@GetCheckSt:
; Line 284
	push	OFFSET $SG70104
	lea	ecx, DWORD PTR _s2$70101[ebp]
	call	??4AString@@QAEAAV0@PBD@Z		; AString::operator=
; Line 285
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	lea	ecx, DWORD PTR _s2$70101[ebp]
	push	ecx
	call	?AddUInt32ToString@NXz@NArchive@@YGXAAVAString@@I@Z ; NArchive::NXz::AddUInt32ToString
$LN1@GetCheckSt:
; Line 287
	lea	edx, DWORD PTR _s2$70101[ebp]
	push	edx
	lea	eax, DWORD PTR _s$[ebp]
	push	eax
	call	?AddString@NXz@NArchive@@YGXAAVAString@@ABV3@@Z ; NArchive::NXz::AddString
; Line 288
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _s2$70101[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
$LN3@GetCheckSt:
	jmp	SHORT $LN5@GetCheckSt
$LN4@GetCheckSt:
; Line 289
	lea	ecx, DWORD PTR _s$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0AString@@QAE@ABV0@@Z			; AString::AString
	mov	edx, DWORD PTR $T71551[ebp]
	or	edx, 1
	mov	DWORD PTR $T71551[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _s$[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 290
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@GetCheckSt
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 64					; 00000040H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN20@GetCheckSt:
	DD	2
	DD	$LN19@GetCheckSt
$LN19@GetCheckSt:
	DD	-36					; ffffffdcH
	DD	12					; 0000000cH
	DD	$LN16@GetCheckSt
	DD	-56					; ffffffc8H
	DD	12					; 0000000cH
	DD	$LN17@GetCheckSt
$LN17@GetCheckSt:
	DB	115					; 00000073H
	DB	50					; 00000032H
	DB	0
$LN16@GetCheckSt:
	DB	115					; 00000073H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?GetCheckString@NXz@NArchive@@YG?AVAString@@ABUCXzs@@@Z$0:
	lea	ecx, DWORD PTR _s$[ebp]
	jmp	??1AString@@QAE@XZ			; AString::~AString
__unwindfunclet$?GetCheckString@NXz@NArchive@@YG?AVAString@@ABUCXzs@@@Z$1:
	lea	ecx, DWORD PTR _s2$70101[ebp]
	jmp	??1AString@@QAE@XZ			; AString::~AString
__unwindfunclet$?GetCheckString@NXz@NArchive@@YG?AVAString@@ABUCXzs@@@Z$2:
	mov	eax, DWORD PTR $T71551[ebp]
	and	eax, 1
	je	$LN15@GetCheckSt
	and	DWORD PTR $T71551[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1AString@@QAE@XZ			; AString::~AString
$LN15@GetCheckSt:
	ret	0
__ehhandler$?GetCheckString@NXz@NArchive@@YG?AVAString@@ABUCXzs@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-60]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetCheckString@NXz@NArchive@@YG?AVAString@@ABUCXzs@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetCheckString@NXz@NArchive@@YG?AVAString@@ABUCXzs@@@Z ENDP ; NArchive::NXz::GetCheckString
EXTRN	_Xzs_Construct@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CXzsCPP@NXz@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CXzsCPP@NXz@NArchive@@QAE@XZ PROC			; NArchive::NXz::CXzsCPP::CXzsCPP, COMDAT
; _this$ = ecx
; Line 368
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	_Xzs_Construct@4
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CXzsCPP@NXz@NArchive@@QAE@XZ ENDP			; NArchive::NXz::CXzsCPP::CXzsCPP
_TEXT	ENDS
EXTRN	_Xzs_Free@8:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CXzsCPP@NXz@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CXzsCPP@NXz@NArchive@@QAE@XZ PROC			; NArchive::NXz::CXzsCPP::~CXzsCPP, COMDAT
; _this$ = ecx
; Line 369
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET _g_Alloc
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	_Xzs_Free@8
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CXzsCPP@NXz@NArchive@@QAE@XZ ENDP			; NArchive::NXz::CXzsCPP::~CXzsCPP
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
_TEXT	SEGMENT
tv64 = -4						; size = 4
_res$ = 8						; size = 4
?SRes_to_Open_HRESULT@NXz@NArchive@@YGJH@Z PROC		; NArchive::NXz::SRes_to_Open_HRESULT
; Line 373
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 374
	mov	eax, DWORD PTR _res$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 0
	je	SHORT $LN3@SRes_to_Op
	cmp	DWORD PTR tv64[ebp], 2
	je	SHORT $LN2@SRes_to_Op
	cmp	DWORD PTR tv64[ebp], 10			; 0000000aH
	je	SHORT $LN1@SRes_to_Op
	jmp	SHORT $LN4@SRes_to_Op
$LN3@SRes_to_Op:
; Line 376
	xor	eax, eax
	jmp	SHORT $LN6@SRes_to_Op
$LN2@SRes_to_Op:
; Line 377
	mov	eax, -2147024882			; 8007000eH
	jmp	SHORT $LN6@SRes_to_Op
$LN1@SRes_to_Op:
; Line 378
	mov	eax, -2147467260			; 80004004H
	jmp	SHORT $LN6@SRes_to_Op
$LN4@SRes_to_Op:
; Line 388
	mov	eax, 1
$LN6@SRes_to_Op:
; Line 389
	mov	esp, ebp
	pop	ebp
	ret	4
?SRes_to_Open_HRESULT@NXz@NArchive@@YGJH@Z ENDP		; NArchive::NXz::SRes_to_Open_HRESULT
_TEXT	ENDS
xdata$x	SEGMENT
__catchsym$?Open@CHandler@NXz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?Open@CHandler@NXz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$0
__unwindtable$?Open@CHandler@NXz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?Open@CHandler@NXz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?Open@CHandler@NXz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$2
__ehfuncinfo$?Open@CHandler@NXz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Open@CHandler@NXz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?Open@CHandler@NXz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv76 = -24						; size = 4
$T71567 = -20						; size = 4
__$EHRec$ = -16						; size = 16
_this$ = 8						; size = 4
_inStream$ = 12						; size = 4
___formal$ = 16						; size = 4
_callback$ = 20						; size = 4
?Open@CHandler@NXz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z PROC ; NArchive::NXz::CHandler::Open
; Line 465
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Open@CHandler@NXz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 8
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR [ebp-24], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
; Line 466
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 468
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 469
	mov	ecx, DWORD PTR _callback$[ebp]
	push	ecx
	mov	edx, DWORD PTR _inStream$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Open2@CHandler@NXz@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z ; NArchive::NXz::CHandler::Open2
	mov	DWORD PTR tv76[ebp], eax
	mov	eax, DWORD PTR tv76[ebp]
	jmp	SHORT $LN2@Open
__catch$?Open@CHandler@NXz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$0:
; Line 471
	mov	DWORD PTR $T71567[ebp], -2147024882	; 8007000eH
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN7@Open
	ret	0
	mov	eax, __tryend$?Open@CHandler@NXz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$1
	ret	0
__tryend$?Open@CHandler@NXz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$1:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN2@Open
$LN7@Open:
	mov	eax, DWORD PTR $T71567[ebp]
$LN2@Open:
; Line 472
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
text$x	SEGMENT
__ehhandler$?Open@CHandler@NXz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Open@CHandler@NXz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Open@CHandler@NXz@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z ENDP ; NArchive::NXz::CHandler::Open
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = 8						; size = 4
_stream$ = 12						; size = 4
?OpenSeq@CHandler@NXz@NArchive@@UAGJPAUISequentialInStream@@@Z PROC ; NArchive::NXz::CHandler::OpenSeq
; Line 475
	push	ebp
	mov	ebp, esp
	push	esi
; Line 476
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 477
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 156				; 0000009cH
	call	??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=
; Line 478
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+148], 1
; Line 479
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+149], 0
; Line 480
	xor	eax, eax
; Line 481
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?OpenSeq@CHandler@NXz@NArchive@@UAGJPAUISequentialInStream@@@Z ENDP ; NArchive::NXz::CHandler::OpenSeq
_TEXT	ENDS
PUBLIC	?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ ; CMyComPtr<ISequentialInStream>::Release
PUBLIC	?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ	; CMyComPtr<IInStream>::Release
PUBLIC	?Empty@AString@@QAEXXZ				; AString::Empty
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = 8						; size = 4
?Close@CHandler@NXz@NArchive@@UAGJXZ PROC		; NArchive::NXz::CHandler::Close
; Line 484
	push	ebp
	mov	ebp, esp
; Line 485
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	?Clear@CStatInfo@NXz@NArchive@@QAEXXZ	; NArchive::NXz::CStatInfo::Clear
; Line 487
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+152], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+153], 0
; Line 490
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+154], 0
; Line 492
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 168				; 000000a8H
	call	?Empty@AString@@QAEXXZ			; AString::Empty
; Line 493
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 156				; 0000009cH
	call	?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ ; CMyComPtr<IInStream>::Release
; Line 494
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 160				; 000000a0H
	call	?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ ; CMyComPtr<ISequentialInStream>::Release
; Line 495
	xor	eax, eax
; Line 496
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
?Close@CHandler@NXz@NArchive@@UAGJXZ ENDP		; NArchive::NXz::CHandler::Close
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Empty@AString@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Empty@AString@@QAEXXZ PROC				; AString::Empty, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 236
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	BYTE PTR [edx], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Empty@AString@@QAEXXZ ENDP				; AString::Empty
_TEXT	ENDS
PUBLIC	??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator->
PUBLIC	?Read@CSeekToSeqStream@NXz@NArchive@@UAGJPAXIPAI@Z ; NArchive::NXz::CSeekToSeqStream::Read
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv68 = -4						; size = 4
_this$ = 8						; size = 4
_data$ = 12						; size = 4
_size$ = 16						; size = 4
_processedSize$ = 20					; size = 4
?Read@CSeekToSeqStream@NXz@NArchive@@UAGJPAXIPAI@Z PROC	; NArchive::NXz::CSeekToSeqStream::Read
; File c:\workspace\7z1505-src\cpp\7zip\archive\xzhandler.cpp
; Line 511
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 512
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator->
	mov	DWORD PTR tv68[ebp], eax
	mov	esi, esp
	mov	eax, DWORD PTR _processedSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	mov	eax, DWORD PTR tv68[ebp]
	push	eax
	mov	ecx, DWORD PTR tv68[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 513
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Read@CSeekToSeqStream@NXz@NArchive@@UAGJPAXIPAI@Z ENDP	; NArchive::NXz::CSeekToSeqStream::Read
_TEXT	ENDS
PUBLIC	?Seek@CSeekToSeqStream@NXz@NArchive@@UAGJ_JIPA_K@Z ; NArchive::NXz::CSeekToSeqStream::Seek
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = 8						; size = 4
___formal$ = 12						; size = 8
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
?Seek@CSeekToSeqStream@NXz@NArchive@@UAGJ_JIPA_K@Z PROC	; NArchive::NXz::CSeekToSeqStream::Seek
; Line 515
	push	ebp
	mov	ebp, esp
	mov	eax, -2147467263			; 80004001H
	pop	ebp
	ret	20					; 00000014H
?Seek@CSeekToSeqStream@NXz@NArchive@@UAGJ_JIPA_K@Z ENDP	; NArchive::NXz::CSeekToSeqStream::Seek
_TEXT	ENDS
PUBLIC	??0CXzUnpackerCPP@NXz@NArchive@@QAE@XZ		; NArchive::NXz::CXzUnpackerCPP::CXzUnpackerCPP
EXTRN	_XzUnpacker_Construct@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CXzUnpackerCPP@NXz@NArchive@@QAE@XZ PROC		; NArchive::NXz::CXzUnpackerCPP::CXzUnpackerCPP
; _this$ = ecx
; Line 518
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 519
	push	OFFSET _g_Alloc
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 8
	push	edx
	call	_XzUnpacker_Construct@8
; Line 520
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CXzUnpackerCPP@NXz@NArchive@@QAE@XZ ENDP		; NArchive::NXz::CXzUnpackerCPP::CXzUnpackerCPP
_TEXT	ENDS
PUBLIC	??1CXzUnpackerCPP@NXz@NArchive@@QAE@XZ		; NArchive::NXz::CXzUnpackerCPP::~CXzUnpackerCPP
EXTRN	_MyFree@4:PROC
EXTRN	_XzUnpacker_Free@4:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CXzUnpackerCPP@NXz@NArchive@@QAE@XZ PROC		; NArchive::NXz::CXzUnpackerCPP::~CXzUnpackerCPP
; _this$ = ecx
; Line 523
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 524
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	call	_XzUnpacker_Free@4
; Line 525
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_MyFree@4
; Line 526
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_MyFree@4
; Line 527
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CXzUnpackerCPP@NXz@NArchive@@QAE@XZ ENDP		; NArchive::NXz::CXzUnpackerCPP::~CXzUnpackerCPP
_TEXT	ENDS
PUBLIC	?Decode@CDecoder@NXz@NArchive@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z ; NArchive::NXz::CDecoder::Decode
EXTRN	_XzUnpacker_IsStreamWasFinished@4:PROC
EXTRN	_XzUnpacker_GetExtraSize@4:PROC
EXTRN	?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z:PROC ; WriteStream
EXTRN	_XzUnpacker_Code@28:PROC
EXTRN	_MyAlloc@4:PROC
EXTRN	_XzUnpacker_Init@4:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv300 = -112						; size = 4
tv442 = -108						; size = 4
tv418 = -104						; size = 4
tv171 = -100						; size = 4
_extraSize$70391 = -96					; size = 8
___result__$70387 = -88					; size = 4
___result__$70383 = -84					; size = 4
_finished$70378 = -77					; size = 1
_res$70377 = -76					; size = 4
_status$70376 = -68					; size = 4
_outLen$70375 = -56					; size = 4
_inLen$70374 = -44					; size = 4
___result__$70372 = -36					; size = 4
_outPos$ = -32						; size = 4
_inPos$ = -28						; size = 4
_inSize$ = -20						; size = 4
_kOutBufSize$ = -12					; size = 4
_kInBufSize$ = -8					; size = 4
_this$ = -4						; size = 4
_seqInStream$ = 8					; size = 4
_outStream$ = 12					; size = 4
_progress$ = 16						; size = 4
?Decode@CDecoder@NXz@NArchive@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z PROC ; NArchive::NXz::CDecoder::Decode
; _this$ = ecx
; Line 530
	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-112]
	mov	ecx, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 531
	mov	DWORD PTR _kInBufSize$[ebp], 32768	; 00008000H
; Line 532
	mov	DWORD PTR _kOutBufSize$[ebp], 2097152	; 00200000H
; Line 534
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@CStatInfo@NXz@NArchive@@QAEXXZ	; NArchive::NXz::CStatInfo::Clear
; Line 535
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1760], 0
; Line 537
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	push	ecx
	call	_XzUnpacker_Init@4
; Line 538
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+56], 0
	jne	SHORT $LN35@Decode
; Line 539
	push	32768					; 00008000H
	call	_MyAlloc@4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+56], eax
$LN35@Decode:
; Line 540
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+60], 0
	jne	SHORT $LN34@Decode
; Line 541
	push	2097152					; 00200000H
	call	_MyAlloc@4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+60], eax
$LN34@Decode:
; Line 543
	mov	DWORD PTR _inSize$[ebp], 0
; Line 544
	mov	DWORD PTR _inPos$[ebp], 0
; Line 545
	mov	DWORD PTR _outPos$[ebp], 0
$LN33@Decode:
; Line 549
	mov	edx, DWORD PTR _inPos$[ebp]
	cmp	edx, DWORD PTR _inSize$[ebp]
	jne	SHORT $LN31@Decode
; Line 551
	mov	DWORD PTR _inSize$[ebp], 0
	mov	eax, DWORD PTR _inSize$[ebp]
	mov	DWORD PTR _inPos$[ebp], eax
; Line 552
	mov	esi, esp
	lea	ecx, DWORD PTR _inSize$[ebp]
	push	ecx
	push	32768					; 00008000H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	mov	ecx, DWORD PTR _seqInStream$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _seqInStream$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$70372[ebp], eax
	cmp	DWORD PTR ___result__$70372[ebp], 0
	je	SHORT $LN31@Decode
	mov	eax, DWORD PTR ___result__$70372[ebp]
	jmp	$LN36@Decode
$LN31@Decode:
; Line 555
	mov	edx, DWORD PTR _inSize$[ebp]
	sub	edx, DWORD PTR _inPos$[ebp]
	mov	DWORD PTR _inLen$70374[ebp], edx
; Line 556
	mov	eax, 2097152				; 00200000H
	sub	eax, DWORD PTR _outPos$[ebp]
	mov	DWORD PTR _outLen$70375[ebp], eax
; Line 562
	lea	ecx, DWORD PTR _status$70376[ebp]
	push	ecx
	xor	edx, edx
	cmp	DWORD PTR _inSize$[ebp], 0
	sete	dl
	push	edx
	lea	eax, DWORD PTR _inLen$70374[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	add	edx, DWORD PTR _inPos$[ebp]
	push	edx
	lea	eax, DWORD PTR _outLen$70375[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	add	edx, DWORD PTR _outPos$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 64					; 00000040H
	push	eax
	call	_XzUnpacker_Code@28
	mov	DWORD PTR _res$70377[ebp], eax
; Line 564
	mov	ecx, DWORD PTR _inPos$[ebp]
	add	ecx, DWORD PTR _inLen$70374[ebp]
	mov	DWORD PTR _inPos$[ebp], ecx
; Line 565
	mov	edx, DWORD PTR _outPos$[ebp]
	add	edx, DWORD PTR _outLen$70375[ebp]
	mov	DWORD PTR _outPos$[ebp], edx
; Line 567
	mov	eax, DWORD PTR _inLen$70374[ebp]
	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [edx]
	adc	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
; Line 568
	mov	eax, DWORD PTR _outLen$70375[ebp]
	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [edx+8]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx
; Line 570
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _res$70377[ebp]
	mov	DWORD PTR [eax+1760], ecx
; Line 572
	cmp	DWORD PTR _inLen$70374[ebp], 0
	jne	SHORT $LN38@Decode
	cmp	DWORD PTR _outLen$70375[ebp], 0
	je	SHORT $LN39@Decode
$LN38@Decode:
	cmp	DWORD PTR _res$70377[ebp], 0
	jne	SHORT $LN39@Decode
	mov	DWORD PTR tv171[ebp], 0
	jmp	SHORT $LN40@Decode
$LN39@Decode:
	mov	DWORD PTR tv171[ebp], 1
$LN40@Decode:
	mov	dl, BYTE PTR tv171[ebp]
	mov	BYTE PTR _finished$70378[ebp], dl
; Line 574
	cmp	DWORD PTR _outStream$[ebp], 0
	je	SHORT $LN29@Decode
; Line 576
	cmp	DWORD PTR _outPos$[ebp], 2097152	; 00200000H
	je	SHORT $LN27@Decode
	movzx	eax, BYTE PTR _finished$70378[ebp]
	test	eax, eax
	je	SHORT $LN28@Decode
$LN27@Decode:
; Line 578
	cmp	DWORD PTR _outPos$[ebp], 0
	je	SHORT $LN28@Decode
; Line 580
	mov	ecx, DWORD PTR _outPos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	push	eax
	mov	ecx, DWORD PTR _outStream$[ebp]
	push	ecx
	call	?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z ; WriteStream
	mov	DWORD PTR ___result__$70383[ebp], eax
	cmp	DWORD PTR ___result__$70383[ebp], 0
	je	SHORT $LN25@Decode
	mov	eax, DWORD PTR ___result__$70383[ebp]
	jmp	$LN36@Decode
$LN25@Decode:
; Line 581
	mov	DWORD PTR _outPos$[ebp], 0
$LN28@Decode:
; Line 585
	jmp	SHORT $LN24@Decode
$LN29@Decode:
; Line 586
	mov	DWORD PTR _outPos$[ebp], 0
$LN24@Decode:
; Line 588
	cmp	DWORD PTR _progress$[ebp], 0
	je	SHORT $LN23@Decode
; Line 590
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 8
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _progress$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _progress$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$70387[ebp], eax
	cmp	DWORD PTR ___result__$70387[ebp], 0
	je	SHORT $LN23@Decode
	mov	eax, DWORD PTR ___result__$70387[ebp]
	jmp	$LN36@Decode
$LN23@Decode:
; Line 593
	movzx	edx, BYTE PTR _finished$70378[ebp]
	test	edx, edx
	je	$LN21@Decode
; Line 595
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+16], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+20], ecx
; Line 596
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	mov	DWORD PTR [edx+24], ecx
	mov	eax, DWORD PTR [eax+140]
	mov	DWORD PTR [edx+28], eax
; Line 597
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv418[ebp], ecx
	mov	edx, DWORD PTR tv418[ebp]
	cmp	DWORD PTR [edx+28], 0
	ja	SHORT $LN41@Decode
	mov	eax, DWORD PTR tv418[ebp]
	cmp	DWORD PTR [eax+24], 0
	jbe	SHORT $LN20@Decode
$LN41@Decode:
; Line 598
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+43], 1
$LN20@Decode:
; Line 599
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+152]
	mov	DWORD PTR [edx+32], ecx
	mov	eax, DWORD PTR [eax+156]
	mov	DWORD PTR [edx+36], eax
; Line 601
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+40], 1
; Line 602
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+41], 1
; Line 603
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+42], 1
; Line 605
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	push	ecx
	call	_XzUnpacker_GetExtraSize@4
	mov	DWORD PTR _extraSize$70391[ebp], eax
	mov	DWORD PTR _extraSize$70391[ebp+4], edx
; Line 607
	cmp	DWORD PTR _res$70377[ebp], 0
	jne	SHORT $LN19@Decode
; Line 609
	cmp	DWORD PTR _status$70376[ebp], 3
	jne	SHORT $LN18@Decode
; Line 611
	mov	DWORD PTR _extraSize$70391[ebp], 0
	mov	DWORD PTR _extraSize$70391[ebp+4], 0
; Line 612
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 64					; 00000040H
	push	edx
	call	_XzUnpacker_IsStreamWasFinished@4
	test	eax, eax
	jne	SHORT $LN17@Decode
; Line 615
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+44], 1
; Line 616
	mov	DWORD PTR _res$70377[ebp], 1
$LN17@Decode:
; Line 619
	jmp	SHORT $LN16@Decode
$LN18@Decode:
; Line 620
	mov	DWORD PTR _res$70377[ebp], 1
$LN16@Decode:
	jmp	SHORT $LN15@Decode
$LN19@Decode:
; Line 622
	cmp	DWORD PTR _res$70377[ebp], 17		; 00000011H
	jne	SHORT $LN15@Decode
; Line 624
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv442[ebp], ecx
	mov	edx, DWORD PTR tv442[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR _extraSize$70391[ebp]
	jne	SHORT $LN13@Decode
	mov	ecx, DWORD PTR tv442[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR _extraSize$70391[ebp+4]
	jne	SHORT $LN13@Decode
; Line 625
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+43], 0
; Line 626
	jmp	SHORT $LN15@Decode
$LN13@Decode:
; Line 628
	mov	ecx, DWORD PTR _extraSize$70391[ebp]
	or	ecx, DWORD PTR _extraSize$70391[ebp+4]
	jne	SHORT $LN10@Decode
	mov	edx, DWORD PTR _inPos$[ebp]
	cmp	edx, DWORD PTR _inSize$[ebp]
	je	SHORT $LN15@Decode
$LN10@Decode:
; Line 630
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+45], 1
; Line 631
	mov	DWORD PTR _res$70377[ebp], 0
$LN15@Decode:
; Line 636
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _res$70377[ebp]
	mov	DWORD PTR [ecx+1760], edx
; Line 637
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	sub	ecx, DWORD PTR _extraSize$70391[ebp]
	mov	edx, DWORD PTR [eax+20]
	sbb	edx, DWORD PTR _extraSize$70391[ebp+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], ecx
	mov	DWORD PTR [eax+20], edx
; Line 639
	mov	ecx, DWORD PTR _res$70377[ebp]
	mov	DWORD PTR tv300[ebp], ecx
	cmp	DWORD PTR tv300[ebp], 17		; 00000011H
	ja	SHORT $LN1@Decode
	mov	edx, DWORD PTR tv300[ebp]
	movzx	eax, BYTE PTR $LN42@Decode[edx]
	jmp	DWORD PTR $LN49@Decode[eax*4]
$LN7@Decode:
; Line 641
	jmp	SHORT $LN8@Decode
$LN6@Decode:
; Line 642
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+43], 0
	jmp	SHORT $LN8@Decode
$LN5@Decode:
; Line 643
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+47], 1
	jmp	SHORT $LN8@Decode
$LN4@Decode:
; Line 644
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+46], 1
	jmp	SHORT $LN8@Decode
$LN3@Decode:
; Line 645
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+49], 1
	jmp	SHORT $LN8@Decode
$LN2@Decode:
; Line 646
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+48], 1
	jmp	SHORT $LN8@Decode
$LN1@Decode:
; Line 647
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+48], 1
$LN8@Decode:
; Line 650
	jmp	SHORT $LN32@Decode
$LN21@Decode:
; Line 652
	jmp	$LN33@Decode
$LN32@Decode:
; Line 654
	xor	eax, eax
$LN36@Decode:
; Line 655
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN48@Decode
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 112				; 00000070H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN48@Decode:
	DD	4
	DD	$LN47@Decode
$LN47@Decode:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN43@Decode
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN44@Decode
	DD	-56					; ffffffc8H
	DD	4
	DD	$LN45@Decode
	DD	-68					; ffffffbcH
	DD	4
	DD	$LN46@Decode
$LN46@Decode:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
$LN45@Decode:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	76					; 0000004cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN44@Decode:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	76					; 0000004cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN43@Decode:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
	npad	1
$LN49@Decode:
	DD	$LN7@Decode
	DD	$LN2@Decode
	DD	$LN3@Decode
	DD	$LN4@Decode
	DD	$LN5@Decode
	DD	$LN6@Decode
	DD	$LN1@Decode
$LN42@Decode:
	DB	0
	DB	1
	DB	6
	DB	2
	DB	3
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	4
	DB	5
?Decode@CDecoder@NXz@NArchive@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z ENDP ; NArchive::NXz::CDecoder::Decode
_TEXT	ENDS
PUBLIC	?Get_Extract_OperationResult@CDecoder@NXz@NArchive@@QBEHXZ ; NArchive::NXz::CDecoder::Get_Extract_OperationResult
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_opRes$ = -8						; size = 4
_this$ = -4						; size = 4
?Get_Extract_OperationResult@CDecoder@NXz@NArchive@@QBEHXZ PROC ; NArchive::NXz::CDecoder::Get_Extract_OperationResult
; _this$ = ecx
; Line 658
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 660
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+43]
	test	ecx, ecx
	jne	SHORT $LN16@Get_Extrac
; Line 661
	mov	DWORD PTR _opRes$[ebp], 7
	jmp	$LN15@Get_Extrac
$LN16@Get_Extrac:
; Line 662
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+44]
	test	eax, eax
	je	SHORT $LN14@Get_Extrac
; Line 663
	mov	DWORD PTR _opRes$[ebp], 5
	jmp	$LN15@Get_Extrac
$LN14@Get_Extrac:
; Line 664
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+45]
	test	edx, edx
	je	SHORT $LN12@Get_Extrac
; Line 665
	mov	DWORD PTR _opRes$[ebp], 6
	jmp	SHORT $LN15@Get_Extrac
$LN12@Get_Extrac:
; Line 666
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+49]
	test	ecx, ecx
	je	SHORT $LN10@Get_Extrac
; Line 667
	mov	DWORD PTR _opRes$[ebp], 3
	jmp	SHORT $LN15@Get_Extrac
$LN10@Get_Extrac:
; Line 668
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+46]
	test	eax, eax
	je	SHORT $LN8@Get_Extrac
; Line 669
	mov	DWORD PTR _opRes$[ebp], 1
	jmp	SHORT $LN15@Get_Extrac
$LN8@Get_Extrac:
; Line 670
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+47]
	test	edx, edx
	je	SHORT $LN6@Get_Extrac
; Line 671
	mov	DWORD PTR _opRes$[ebp], 2
	jmp	SHORT $LN15@Get_Extrac
$LN6@Get_Extrac:
; Line 672
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+48]
	test	ecx, ecx
	je	SHORT $LN4@Get_Extrac
; Line 673
	mov	DWORD PTR _opRes$[ebp], 2
	jmp	SHORT $LN15@Get_Extrac
$LN4@Get_Extrac:
; Line 674
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+1760], 0
	je	SHORT $LN2@Get_Extrac
; Line 675
	mov	DWORD PTR _opRes$[ebp], 2
; Line 676
	jmp	SHORT $LN15@Get_Extrac
$LN2@Get_Extrac:
; Line 677
	mov	DWORD PTR _opRes$[ebp], 0
$LN15@Get_Extrac:
; Line 678
	mov	eax, DWORD PTR _opRes$[ebp]
; Line 679
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Extract_OperationResult@CDecoder@NXz@NArchive@@QBEHXZ ENDP ; NArchive::NXz::CDecoder::Get_Extract_OperationResult
_TEXT	ENDS
PUBLIC	?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ; CMyComPtr<ISequentialOutStream>::Release
PUBLIC	??1CDecoder@NXz@NArchive@@QAE@XZ		; NArchive::NXz::CDecoder::~CDecoder
PUBLIC	?Decode2@CHandler@NXz@NArchive@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@AAUCDecoder@23@PAUICompressProgressInfo@@@Z ; NArchive::NXz::CHandler::Decode2
PUBLIC	??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
PUBLIC	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
PUBLIC	??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *
PUBLIC	??0CDecoder@NXz@NArchive@@QAE@XZ		; NArchive::NXz::CDecoder::CDecoder
PUBLIC	??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->
PUBLIC	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ	; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
PUBLIC	??7?$CMyComPtr@UIInStream@@@@QBE_NXZ		; CMyComPtr<IInStream>::operator!
PUBLIC	??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>
PUBLIC	??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ	; CMyComPtr<ISequentialOutStream>::operator!
PUBLIC	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ	; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
PUBLIC	??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator&
PUBLIC	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ	; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
PUBLIC	__$ArrayPad$
EXTRN	?Init@CLocalProgress@@QAEXPAUIProgress@@_N@Z:PROC ; CLocalProgress::Init
EXTRN	??0CLocalProgress@@QAE@XZ:PROC			; CLocalProgress::CLocalProgress
EXTRN	??2@YAPAXI@Z:PROC				; operator new
xdata$x	SEGMENT
__catchsym$?Extract@CHandler@NXz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$6 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?Extract@CHandler@NXz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$0
__tryblocktable$?Extract@CHandler@NXz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z DD 00H
	DD	04H
	DD	05H
	DD	01H
	DD	FLAT:__catchsym$?Extract@CHandler@NXz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$6
__ehfuncinfo$?Extract@CHandler@NXz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?Extract@CHandler@NXz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?Extract@CHandler@NXz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Extract@CHandler@NXz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$?Extract@CHandler@NXz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?Extract@CHandler@NXz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$3
	DD	01H
	DD	FLAT:__unwindfunclet$?Extract@CHandler@NXz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$4
	DD	03H
	DD	FLAT:__unwindfunclet$?Extract@CHandler@NXz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$5
	DD	0ffffffffH
	DD	00H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv248 = -1976						; size = 4
tv247 = -1972						; size = 4
tv246 = -1968						; size = 4
tv245 = -1964						; size = 4
tv244 = -1960						; size = 4
tv243 = -1956						; size = 4
tv242 = -1952						; size = 4
tv241 = -1948						; size = 4
tv181 = -1944						; size = 4
tv240 = -1940						; size = 4
tv155 = -1933						; size = 1
tv154 = -1932						; size = 4
tv239 = -1928						; size = 4
tv237 = -1924						; size = 4
tv236 = -1917						; size = 1
tv235 = -1916						; size = 4
tv234 = -1912						; size = 4
tv233 = -1908						; size = 4
tv232 = -1904						; size = 4
$T71613 = -1900						; size = 4
$T71612 = -1896						; size = 4
$T71611 = -1892						; size = 4
$T71610 = -1888						; size = 4
$T71609 = -1884						; size = 4
$T71606 = -1880						; size = 4
$T71605 = -1876						; size = 4
$T71604 = -1872						; size = 4
$T71603 = -1868						; size = 4
_opRes$70517 = -1864					; size = 4
___result__$70514 = -1860				; size = 4
_decoder$70513 = -1852					; size = 1768
___result__$70509 = -80					; size = 4
_lpsRef$70504 = -72					; size = 4
_lps$70498 = -64					; size = 4
___result__$70492 = -60					; size = 4
_askMode$70491 = -56					; size = 4
_realOutStream$70490 = -48				; size = 4
___result__$70451 = -40					; size = 4
_currentTotalPacked$70450 = -32				; size = 8
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_this$ = 8						; size = 4
_indices$ = 12						; size = 4
_numItems$ = 16						; size = 4
_testMode$ = 20						; size = 4
_extractCallback$ = 24					; size = 4
?Extract@CHandler@NXz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z PROC ; NArchive::NXz::CHandler::Extract
; Line 683
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Extract@CHandler@NXz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 1960				; 000007a8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1976]
	mov	ecx, 490				; 000001eaH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
; Line 684
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 685
	cmp	DWORD PTR _numItems$[ebp], 0
	jne	SHORT $LN12@Extract
; Line 686
	xor	eax, eax
	jmp	$LN14@Extract
$LN12@Extract:
; Line 687
	cmp	DWORD PTR _numItems$[ebp], -1
	je	SHORT $LN11@Extract
	cmp	DWORD PTR _numItems$[ebp], 1
	jne	SHORT $LN10@Extract
	mov	eax, DWORD PTR _indices$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN11@Extract
$LN10@Extract:
; Line 688
	mov	eax, -2147024809			; 80070057H
	jmp	$LN14@Extract
$LN11@Extract:
; Line 690
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+154]
	test	edx, edx
	je	SHORT $LN9@Extract
; Line 691
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	push	ecx
	mov	edx, DWORD PTR [eax+112]
	push	edx
	mov	eax, DWORD PTR _extractCallback$[ebp]
	push	eax
	mov	ecx, DWORD PTR _extractCallback$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN9@Extract:
; Line 693
	mov	DWORD PTR _currentTotalPacked$70450[ebp], 0
	mov	DWORD PTR _currentTotalPacked$70450[ebp+4], 0
; Line 694
	mov	esi, esp
	lea	ecx, DWORD PTR _currentTotalPacked$70450[ebp]
	push	ecx
	mov	edx, DWORD PTR _extractCallback$[ebp]
	push	edx
	mov	eax, DWORD PTR _extractCallback$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv232[ebp], eax
	mov	eax, DWORD PTR tv232[ebp]
	mov	DWORD PTR ___result__$70451[ebp], eax
	cmp	DWORD PTR ___result__$70451[ebp], 0
	je	SHORT $LN8@Extract
	mov	eax, DWORD PTR ___result__$70451[ebp]
	jmp	$LN14@Extract
$LN8@Extract:
; Line 695
	lea	ecx, DWORD PTR _realOutStream$70490[ebp]
	call	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
	mov	DWORD PTR tv233[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 1
; Line 698
	xor	ecx, ecx
	cmp	DWORD PTR _testMode$[ebp], 0
	setne	cl
	mov	DWORD PTR _askMode$70491[ebp], ecx
; Line 700
	lea	ecx, DWORD PTR _realOutStream$70490[ebp]
	call	??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator&
	mov	DWORD PTR tv234[ebp], eax
	mov	esi, esp
	mov	edx, DWORD PTR _askMode$70491[ebp]
	push	edx
	mov	eax, DWORD PTR tv234[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _extractCallback$[ebp]
	push	ecx
	mov	edx, DWORD PTR _extractCallback$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv235[ebp], eax
	mov	edx, DWORD PTR tv235[ebp]
	mov	DWORD PTR ___result__$70492[ebp], edx
	cmp	DWORD PTR ___result__$70492[ebp], 0
	je	SHORT $LN7@Extract
	mov	eax, DWORD PTR ___result__$70492[ebp]
	mov	DWORD PTR $T71603[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _realOutStream$70490[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	eax, DWORD PTR $T71603[ebp]
	jmp	$LN14@Extract
$LN7@Extract:
; Line 702
	cmp	DWORD PTR _testMode$[ebp], 0
	jne	SHORT $LN6@Extract
	lea	ecx, DWORD PTR _realOutStream$70490[ebp]
	call	??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ ; CMyComPtr<ISequentialOutStream>::operator!
	mov	BYTE PTR tv236[ebp], al
	movzx	ecx, BYTE PTR tv236[ebp]
	test	ecx, ecx
	je	SHORT $LN6@Extract
; Line 703
	mov	DWORD PTR $T71604[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _realOutStream$70490[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	eax, DWORD PTR $T71604[ebp]
	jmp	$LN14@Extract
$LN6@Extract:
; Line 705
	mov	esi, esp
	mov	edx, DWORD PTR _askMode$70491[ebp]
	push	edx
	mov	eax, DWORD PTR _extractCallback$[ebp]
	push	eax
	mov	ecx, DWORD PTR _extractCallback$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 707
	push	56					; 00000038H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR tv237[ebp], eax
	mov	ecx, DWORD PTR tv237[ebp]
	mov	DWORD PTR $T71606[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	cmp	DWORD PTR $T71606[ebp], 0
	je	SHORT $LN16@Extract
	mov	ecx, DWORD PTR $T71606[ebp]
	call	??0CLocalProgress@@QAE@XZ		; CLocalProgress::CLocalProgress
	mov	DWORD PTR tv239[ebp], eax
	mov	edx, DWORD PTR tv239[ebp]
	mov	DWORD PTR tv154[ebp], edx
	jmp	SHORT $LN17@Extract
$LN16@Extract:
	mov	DWORD PTR tv154[ebp], 0
$LN17@Extract:
	mov	eax, DWORD PTR tv154[ebp]
	mov	DWORD PTR $T71605[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	mov	ecx, DWORD PTR $T71605[ebp]
	mov	DWORD PTR _lps$70498[ebp], ecx
; Line 708
	mov	edx, DWORD PTR _lps$70498[ebp]
	push	edx
	lea	ecx, DWORD PTR _lpsRef$70504[ebp]
	call	??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+12], 3
; Line 709
	push	1
	mov	eax, DWORD PTR _extractCallback$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lps$70498[ebp]
	call	?Init@CLocalProgress@@QAEXPAUIProgress@@_N@Z ; CLocalProgress::Init
; Line 711
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+153]
	test	edx, edx
	je	$LN5@Extract
; Line 713
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 156				; 0000009cH
	call	??7?$CMyComPtr@UIInStream@@@@QBE_NXZ	; CMyComPtr<IInStream>::operator!
	mov	BYTE PTR tv155[ebp], al
	movzx	eax, BYTE PTR tv155[ebp]
	test	eax, eax
	je	SHORT $LN4@Extract
; Line 714
	mov	DWORD PTR $T71609[ebp], -2147467259	; 80004005H
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _lpsRef$70504[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _realOutStream$70490[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	eax, DWORD PTR $T71609[ebp]
	jmp	$LN14@Extract
$LN4@Extract:
; Line 715
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 156				; 0000009cH
	call	??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->
	mov	DWORD PTR tv240[ebp], eax
	mov	ecx, DWORD PTR tv240[ebp]
	mov	DWORD PTR tv181[ebp], ecx
	mov	esi, esp
	push	0
	push	0
	push	0
	push	0
	mov	edx, DWORD PTR tv181[ebp]
	push	edx
	mov	eax, DWORD PTR tv181[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv241[ebp], eax
	mov	eax, DWORD PTR tv241[ebp]
	mov	DWORD PTR ___result__$70509[ebp], eax
	cmp	DWORD PTR ___result__$70509[ebp], 0
	je	SHORT $LN3@Extract
	mov	ecx, DWORD PTR ___result__$70509[ebp]
	mov	DWORD PTR $T71610[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _lpsRef$70504[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _realOutStream$70490[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	eax, DWORD PTR $T71610[ebp]
	jmp	$LN14@Extract
$LN3@Extract:
; Line 717
	jmp	SHORT $LN2@Extract
$LN5@Extract:
; Line 718
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+153], 1
$LN2@Extract:
; Line 720
	lea	ecx, DWORD PTR _decoder$70513[ebp]
	call	??0CDecoder@NXz@NArchive@@QAE@XZ	; NArchive::NXz::CDecoder::CDecoder
	mov	DWORD PTR tv242[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 4
; Line 721
	lea	ecx, DWORD PTR _lpsRef$70504[ebp]
	call	??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *
	mov	DWORD PTR tv243[ebp], eax
	lea	ecx, DWORD PTR _realOutStream$70490[ebp]
	call	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
	mov	DWORD PTR tv244[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 160				; 000000a0H
	call	??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
	mov	DWORD PTR tv245[ebp], eax
	mov	eax, DWORD PTR tv243[ebp]
	push	eax
	lea	ecx, DWORD PTR _decoder$70513[ebp]
	push	ecx
	mov	edx, DWORD PTR tv244[ebp]
	push	edx
	mov	eax, DWORD PTR tv245[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Decode2@CHandler@NXz@NArchive@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@AAUCDecoder@23@PAUICompressProgressInfo@@@Z ; NArchive::NXz::CHandler::Decode2
	mov	DWORD PTR tv246[ebp], eax
	mov	ecx, DWORD PTR tv246[ebp]
	mov	DWORD PTR ___result__$70514[ebp], ecx
	cmp	DWORD PTR ___result__$70514[ebp], 0
	je	SHORT $LN1@Extract
	mov	edx, DWORD PTR ___result__$70514[ebp]
	mov	DWORD PTR $T71611[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _decoder$70513[ebp]
	call	??1CDecoder@NXz@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _lpsRef$70504[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _realOutStream$70490[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	eax, DWORD PTR $T71611[ebp]
	jmp	$LN14@Extract
$LN1@Extract:
; Line 722
	lea	ecx, DWORD PTR _decoder$70513[ebp]
	call	?Get_Extract_OperationResult@CDecoder@NXz@NArchive@@QBEHXZ ; NArchive::NXz::CDecoder::Get_Extract_OperationResult
	mov	DWORD PTR tv247[ebp], eax
	mov	eax, DWORD PTR tv247[ebp]
	mov	DWORD PTR _opRes$70517[ebp], eax
; Line 724
	lea	ecx, DWORD PTR _realOutStream$70490[ebp]
	call	?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ; CMyComPtr<ISequentialOutStream>::Release
; Line 725
	mov	esi, esp
	mov	ecx, DWORD PTR _opRes$70517[ebp]
	push	ecx
	mov	edx, DWORD PTR _extractCallback$[ebp]
	push	edx
	mov	eax, DWORD PTR _extractCallback$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv248[ebp], eax
	mov	eax, DWORD PTR tv248[ebp]
	mov	DWORD PTR $T71612[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _decoder$70513[ebp]
	call	??1CDecoder@NXz@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _lpsRef$70504[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _realOutStream$70490[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	eax, DWORD PTR $T71612[ebp]
	jmp	SHORT $LN14@Extract
__catch$?Extract@CHandler@NXz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$0:
; Line 726
	mov	DWORD PTR $T71613[ebp], -2147024882	; 8007000eH
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN25@Extract
	ret	0
	mov	eax, __tryend$?Extract@CHandler@NXz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$1
	ret	0
__tryend$?Extract@CHandler@NXz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$1:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN14@Extract
$LN25@Extract:
	mov	eax, DWORD PTR $T71613[ebp]
$LN14@Extract:
; Line 727
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN33@Extract
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1976				; 000007b8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
	npad	1
$LN33@Extract:
	DD	4
	DD	$LN32@Extract
$LN32@Extract:
	DD	-32					; ffffffe0H
	DD	8
	DD	$LN27@Extract
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN28@Extract
	DD	-72					; ffffffb8H
	DD	4
	DD	$LN29@Extract
	DD	-1852					; fffff8c4H
	DD	1768					; 000006e8H
	DD	$LN30@Extract
$LN30@Extract:
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN29@Extract:
	DB	108					; 0000006cH
	DB	112					; 00000070H
	DB	115					; 00000073H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	0
$LN28@Extract:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	79					; 0000004fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN27@Extract:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	84					; 00000054H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Extract@CHandler@NXz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$2:
	lea	ecx, DWORD PTR _realOutStream$70490[ebp]
	jmp	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
__unwindfunclet$?Extract@CHandler@NXz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$3:
	mov	eax, DWORD PTR $T71606[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Extract@CHandler@NXz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$4:
	lea	ecx, DWORD PTR _lpsRef$70504[ebp]
	jmp	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
__unwindfunclet$?Extract@CHandler@NXz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$5:
	lea	ecx, DWORD PTR _decoder$70513[ebp]
	jmp	??1CDecoder@NXz@NArchive@@QAE@XZ
__ehhandler$?Extract@CHandler@NXz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-1980]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Extract@CHandler@NXz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Extract@CHandler@NXz@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z ENDP ; NArchive::NXz::CHandler::Extract
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CDecoder@NXz@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CDecoder@NXz@NArchive@@QAE@XZ PROC			; NArchive::NXz::CDecoder::CDecoder, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\xzhandler.h
; Line 55
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CStatInfo@NXz@NArchive@@QAE@XZ	; NArchive::NXz::CStatInfo::CStatInfo
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	??0CXzUnpackerCPP@NXz@NArchive@@QAE@XZ	; NArchive::NXz::CXzUnpackerCPP::CXzUnpackerCPP
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1760], 0
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CDecoder@NXz@NArchive@@QAE@XZ ENDP			; NArchive::NXz::CDecoder::CDecoder
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Decode2@CHandler@NXz@NArchive@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@AAUCDecoder@23@PAUICompressProgressInfo@@@Z
_TEXT	SEGMENT
___result__$69923 = -8					; size = 4
_this$ = -4						; size = 4
_seqInStream$ = 8					; size = 4
_outStream$ = 12					; size = 4
_decoder$ = 16						; size = 4
_progress$ = 20						; size = 4
?Decode2@CHandler@NXz@NArchive@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@AAUCDecoder@23@PAUICompressProgressInfo@@@Z PROC ; NArchive::NXz::CHandler::Decode2, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\xzhandler.cpp
; Line 99
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	push	edi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 100
	mov	eax, DWORD PTR _progress$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outStream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _seqInStream$[ebp]
	push	edx
	mov	ecx, DWORD PTR _decoder$[ebp]
	call	?Decode@CDecoder@NXz@NArchive@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z ; NArchive::NXz::CDecoder::Decode
	mov	DWORD PTR ___result__$69923[ebp], eax
	cmp	DWORD PTR ___result__$69923[ebp], 0
	je	SHORT $LN1@Decode2
	mov	eax, DWORD PTR ___result__$69923[ebp]
	jmp	SHORT $LN2@Decode2
$LN1@Decode2:
; Line 101
	mov	esi, DWORD PTR _decoder$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	add	edi, 96					; 00000060H
	mov	ecx, 14					; 0000000eH
	rep movsd
; Line 102
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+154], 1
; Line 103
	xor	eax, eax
$LN2@Decode2:
; Line 104
	pop	edi
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Decode2@CHandler@NXz@NArchive@@AAEJPAUISequentialInStream@@PAUISequentialOutStream@@AAUCDecoder@23@PAUICompressProgressInfo@@@Z ENDP ; NArchive::NXz::CHandler::Decode2
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CDecoder@NXz@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CDecoder@NXz@NArchive@@QAE@XZ PROC			; NArchive::NXz::CDecoder::~CDecoder, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	??1CXzUnpackerCPP@NXz@NArchive@@QAE@XZ	; NArchive::NXz::CXzUnpackerCPP::~CXzUnpackerCPP
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CDecoder@NXz@NArchive@@QAE@XZ ENDP			; NArchive::NXz::CDecoder::~CDecoder
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
_TEXT	SEGMENT
_this$ = 8						; size = 4
_timeType$ = 12						; size = 4
?GetFileTimeType@CHandler@NXz@NArchive@@UAGJPAI@Z PROC	; NArchive::NXz::CHandler::GetFileTimeType
; Line 732
	push	ebp
	mov	ebp, esp
; Line 733
	mov	eax, DWORD PTR _timeType$[ebp]
	mov	DWORD PTR [eax], 1
; Line 734
	xor	eax, eax
; Line 735
	pop	ebp
	ret	8
?GetFileTimeType@CHandler@NXz@NArchive@@UAGJPAI@Z ENDP	; NArchive::NXz::CHandler::GetFileTimeType
_TEXT	ENDS
PUBLIC	??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *
PUBLIC	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
PUBLIC	??C?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator->
PUBLIC	??B?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator IArchiveUpdateCallbackFile *
PUBLIC	??I?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAEPAPAUIArchiveUpdateCallbackFile@@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator&
PUBLIC	??0?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::CMyComPtr<IArchiveUpdateCallbackFile>
PUBLIC	??A?$CObjectVector@UCProp@@@@QAEAAUCProp@@I@Z	; CObjectVector<CProp>::operator[]
PUBLIC	?Size@?$CObjectVector@UCProp@@@@QBEIXZ		; CObjectVector<CProp>::Size
PUBLIC	??A?$CObjectVector@VCOneMethodInfo@@@@QAEAAVCOneMethodInfo@@I@Z ; CObjectVector<COneMethodInfo>::operator[]
PUBLIC	?Size@?$CObjectVector@VCOneMethodInfo@@@@QBEIXZ	; CObjectVector<COneMethodInfo>::Size
PUBLIC	??0CPropVariant@NCOM@NWindows@@QAE@_K@Z		; NWindows::NCOM::CPropVariant::CPropVariant
PUBLIC	??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator&
PUBLIC	?GetLevel@CMultiMethodProps@NArchive@@QBEHXZ	; NArchive::CMultiMethodProps::GetLevel
PUBLIC	?IntToBool@@YG_NH@Z				; IntToBool
PUBLIC	__$ArrayPad$
EXTRN	?CopyStream@NCompress@@YGJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z:PROC ; NCompress::CopyStream
EXTRN	_IID_IArchiveUpdateCallbackFile:BYTE
EXTRN	_Xz_Encode@16:PROC
EXTRN	_XzFilterProps_Init@4:PROC
EXTRN	_XzProps_Init@4:PROC
EXTRN	??0CCompressProgressWrap@@QAE@PAUICompressProgressInfo@@@Z:PROC ; CCompressProgressWrap::CCompressProgressWrap
EXTRN	?SetGlobalLevelAndThreads@CMultiMethodProps@NArchive@@QAEXAAVCOneMethodInfo@@I@Z:PROC ; NArchive::CMultiMethodProps::SetGlobalLevelAndThreads
EXTRN	?SetLzma2Prop@NLzma2@NCompress@@YGJKABUtagPROPVARIANT@@AAUCLzma2EncProps@@@Z:PROC ; NCompress::NLzma2::SetLzma2Prop
EXTRN	_Lzma2EncProps_Init@4:PROC
EXTRN	?SResToHRESULT@@YGJH@Z:PROC			; SResToHRESULT
EXTRN	_Xz_EncodeEmpty@4:PROC
EXTRN	??0CSeqOutStreamWrap@@QAE@PAUISequentialOutStream@@@Z:PROC ; CSeqOutStreamWrap::CSeqOutStreamWrap
xdata$x	SEGMENT
__catchsym$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$11 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$0
__tryblocktable$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z DD 00H
	DD	09H
	DD	0aH
	DD	01H
	DD	FLAT:__catchsym$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$11
__ehfuncinfo$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z DD 019930522H
	DD	0bH
	DD	FLAT:__unwindtable$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$3
	DD	00H
	DD	FLAT:__unwindfunclet$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$4
	DD	03H
	DD	FLAT:__unwindfunclet$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$5
	DD	03H
	DD	FLAT:__unwindfunclet$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$6
	DD	03H
	DD	FLAT:__unwindfunclet$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$7
	DD	00H
	DD	FLAT:__unwindfunclet$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$8
	DD	07H
	DD	FLAT:__unwindfunclet$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$9
	DD	07H
	DD	FLAT:__unwindfunclet$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$10
	DD	0ffffffffH
	DD	00H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv642 = -748						; size = 4
tv641 = -744						; size = 4
tv541 = -740						; size = 4
tv540 = -736						; size = 4
tv640 = -732						; size = 4
tv638 = -728						; size = 4
tv637 = -724						; size = 4
tv525 = -720						; size = 4
tv636 = -716						; size = 4
tv635 = -712						; size = 4
tv634 = -708						; size = 4
tv633 = -704						; size = 4
tv490 = -700						; size = 4
tv632 = -696						; size = 4
tv631 = -692						; size = 4
tv630 = -688						; size = 4
tv629 = -684						; size = 4
tv628 = -680						; size = 4
tv627 = -676						; size = 4
tv626 = -672						; size = 4
tv369 = -668						; size = 4
tv339 = -664						; size = 4
tv338 = -660						; size = 4
tv625 = -656						; size = 4
tv623 = -652						; size = 4
tv622 = -648						; size = 4
tv621 = -644						; size = 4
tv620 = -640						; size = 4
tv619 = -636						; size = 4
tv618 = -632						; size = 4
tv617 = -628						; size = 4
tv616 = -624						; size = 4
tv615 = -620						; size = 4
tv614 = -616						; size = 4
tv613 = -612						; size = 4
tv612 = -608						; size = 4
tv611 = -604						; size = 4
tv610 = -600						; size = 4
tv609 = -596						; size = 4
tv608 = -592						; size = 4
tv607 = -585						; size = 1
tv606 = -584						; size = 4
tv605 = -580						; size = 4
tv604 = -573						; size = 1
tv603 = -572						; size = 4
$T71671 = -568						; size = 4
$T71670 = -564						; size = 4
$T71667 = -560						; size = 4
$T71666 = -556						; size = 4
$T71665 = -552						; size = 4
$T71664 = -548						; size = 4
$T71663 = -544						; size = 4
$T71662 = -540						; size = 4
$T71661 = -536						; size = 4
$T71660 = -532						; size = 4
$T71659 = -528						; size = 4
$T71658 = -524						; size = 4
$T71655 = -520						; size = 4
$T71654 = -516						; size = 4
$T71653 = -512						; size = 4
$T71652 = -508						; size = 4
$T71651 = -504						; size = 4
$T71650 = -500						; size = 4
$T71649 = -496						; size = 4
$T71648 = -492						; size = 4
$T71647 = -488						; size = 4
$T71646 = -484						; size = 4
_progress$70696 = -476					; size = 4
_lps$70690 = -468					; size = 4
___result__$70687 = -464				; size = 4
___result__$70684 = -460				; size = 4
___result__$70679 = -456				; size = 4
_opCallback$70676 = -448				; size = 4
_res$70633 = -440					; size = 4
_delta$70624 = -436					; size = 4
_prop$70622 = -432					; size = 4
_j$70618 = -428						; size = 4
_deltaDefined$70617 = -421				; size = 1
_filter$70604 = -416					; size = 16
_xzProps$70603 = -392					; size = 12
_progressWrap$70602 = -372				; size = 12
_progress$70601 = -352					; size = 4
_lps$70595 = -344					; size = 4
___result__$70592 = -340				; size = 4
_prop$70591 = -336					; size = 4
_j$70587 = -332						; size = 4
_m$70586 = -328						; size = 4
_i$70582 = -324						; size = 4
___result__$70579 = -320				; size = 4
_prop$70577 = -312					; size = 16
_seqInStream$70576 = -288				; size = 24
___result__$70573 = -260				; size = 4
_fileInStream$70572 = -252				; size = 4
_lzma2Props$70570 = -240				; size = 72
___result__$70567 = -164				; size = 4
___result__$70561 = -160				; size = 4
_prop$70560 = -152					; size = 16
_size$70559 = -132					; size = 8
___result__$70549 = -124				; size = 4
_prop$70548 = -116					; size = 16
___result__$70545 = -96					; size = 4
_indexInArchive$70542 = -88				; size = 4
_newProps$70541 = -76					; size = 4
_newData$70540 = -64					; size = 4
_res$70537 = -56					; size = 4
_seqOutStream$70535 = -48				; size = 24
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_this$ = 8						; size = 4
_outStream$ = 12					; size = 4
_numItems$ = 16						; size = 4
_updateCallback$ = 20					; size = 4
?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z PROC ; NArchive::NXz::CHandler::UpdateItems
; Line 739
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 732				; 000002dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-748]
	mov	ecx, 183				; 000000b7H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
; Line 740
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 742
	mov	eax, DWORD PTR _outStream$[ebp]
	push	eax
	lea	ecx, DWORD PTR _seqOutStream$70535[ebp]
	call	??0CSeqOutStreamWrap@@QAE@PAUISequentialOutStream@@@Z ; CSeqOutStreamWrap::CSeqOutStreamWrap
; Line 744
	cmp	DWORD PTR _numItems$[ebp], 0
	jne	SHORT $LN45@UpdateItem
; Line 746
	lea	ecx, DWORD PTR _seqOutStream$70535[ebp]
	push	ecx
	call	_Xz_EncodeEmpty@4
	mov	DWORD PTR _res$70537[ebp], eax
; Line 747
	mov	edx, DWORD PTR _res$70537[ebp]
	push	edx
	call	?SResToHRESULT@@YGJH@Z			; SResToHRESULT
	jmp	$LN47@UpdateItem
$LN45@UpdateItem:
; Line 750
	cmp	DWORD PTR _numItems$[ebp], 1
	je	SHORT $LN44@UpdateItem
; Line 751
	mov	eax, -2147024809			; 80070057H
	jmp	$LN47@UpdateItem
$LN44@UpdateItem:
; Line 755
	cmp	DWORD PTR _updateCallback$[ebp], 0
	jne	SHORT $LN43@UpdateItem
; Line 756
	mov	eax, -2147467259			; 80004005H
	jmp	$LN47@UpdateItem
$LN43@UpdateItem:
; Line 757
	mov	esi, esp
	lea	eax, DWORD PTR _indexInArchive$70542[ebp]
	push	eax
	lea	ecx, DWORD PTR _newProps$70541[ebp]
	push	ecx
	lea	edx, DWORD PTR _newData$70540[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _updateCallback$[ebp]
	push	eax
	mov	ecx, DWORD PTR _updateCallback$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv603[ebp], eax
	mov	ecx, DWORD PTR tv603[ebp]
	mov	DWORD PTR ___result__$70545[ebp], ecx
	cmp	DWORD PTR ___result__$70545[ebp], 0
	je	SHORT $LN42@UpdateItem
	mov	eax, DWORD PTR ___result__$70545[ebp]
	jmp	$LN47@UpdateItem
$LN42@UpdateItem:
; Line 759
	mov	edx, DWORD PTR _newProps$70541[ebp]
	push	edx
	call	?IntToBool@@YG_NH@Z			; IntToBool
	mov	BYTE PTR tv604[ebp], al
	movzx	eax, BYTE PTR tv604[ebp]
	test	eax, eax
	je	$LN41@UpdateItem
; Line 762
	lea	ecx, DWORD PTR _prop$70548[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
	mov	DWORD PTR tv605[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 1
; Line 763
	mov	esi, esp
	lea	ecx, DWORD PTR _prop$70548[ebp]
	push	ecx
	push	6
	push	0
	mov	edx, DWORD PTR _updateCallback$[ebp]
	push	edx
	mov	eax, DWORD PTR _updateCallback$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv606[ebp], eax
	mov	eax, DWORD PTR tv606[ebp]
	mov	DWORD PTR ___result__$70549[ebp], eax
	cmp	DWORD PTR ___result__$70549[ebp], 0
	je	SHORT $LN40@UpdateItem
	mov	ecx, DWORD PTR ___result__$70549[ebp]
	mov	DWORD PTR $T71646[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _prop$70548[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T71646[ebp]
	jmp	$LN47@UpdateItem
$LN40@UpdateItem:
; Line 764
	movzx	edx, WORD PTR _prop$70548[ebp]
	test	edx, edx
	je	SHORT $LN39@UpdateItem
; Line 765
	movzx	eax, WORD PTR _prop$70548[ebp]
	cmp	eax, 11					; 0000000bH
	jne	SHORT $LN37@UpdateItem
	movsx	ecx, WORD PTR _prop$70548[ebp+8]
	test	ecx, ecx
	je	SHORT $LN39@UpdateItem
$LN37@UpdateItem:
; Line 766
	mov	DWORD PTR $T71647[ebp], -2147024809	; 80070057H
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _prop$70548[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T71647[ebp]
	jmp	$LN47@UpdateItem
$LN39@UpdateItem:
; Line 767
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _prop$70548[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
$LN41@UpdateItem:
; Line 770
	mov	edx, DWORD PTR _newData$70540[ebp]
	push	edx
	call	?IntToBool@@YG_NH@Z			; IntToBool
	mov	BYTE PTR tv607[ebp], al
	movzx	eax, BYTE PTR tv607[ebp]
	test	eax, eax
	je	$LN36@UpdateItem
; Line 774
	lea	ecx, DWORD PTR _prop$70560[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
	mov	DWORD PTR tv608[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 2
; Line 775
	mov	esi, esp
	lea	ecx, DWORD PTR _prop$70560[ebp]
	push	ecx
	push	7
	push	0
	mov	edx, DWORD PTR _updateCallback$[ebp]
	push	edx
	mov	eax, DWORD PTR _updateCallback$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv609[ebp], eax
	mov	eax, DWORD PTR tv609[ebp]
	mov	DWORD PTR ___result__$70561[ebp], eax
	cmp	DWORD PTR ___result__$70561[ebp], 0
	je	SHORT $LN35@UpdateItem
	mov	ecx, DWORD PTR ___result__$70561[ebp]
	mov	DWORD PTR $T71648[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _prop$70560[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T71648[ebp]
	jmp	$LN47@UpdateItem
$LN35@UpdateItem:
; Line 776
	movzx	edx, WORD PTR _prop$70560[ebp]
	cmp	edx, 21					; 00000015H
	je	SHORT $LN34@UpdateItem
; Line 777
	mov	DWORD PTR $T71649[ebp], -2147024809	; 80070057H
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _prop$70560[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T71649[ebp]
	jmp	$LN47@UpdateItem
$LN34@UpdateItem:
; Line 778
	mov	eax, DWORD PTR _prop$70560[ebp+8]
	mov	DWORD PTR _size$70559[ebp], eax
	mov	ecx, DWORD PTR _prop$70560[ebp+12]
	mov	DWORD PTR _size$70559[ebp+4], ecx
; Line 779
	mov	esi, esp
	mov	edx, DWORD PTR _size$70559[ebp+4]
	push	edx
	mov	eax, DWORD PTR _size$70559[ebp]
	push	eax
	mov	ecx, DWORD PTR _updateCallback$[ebp]
	push	ecx
	mov	edx, DWORD PTR _updateCallback$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv610[ebp], eax
	mov	edx, DWORD PTR tv610[ebp]
	mov	DWORD PTR ___result__$70567[ebp], edx
	cmp	DWORD PTR ___result__$70567[ebp], 0
	je	SHORT $LN33@UpdateItem
	mov	eax, DWORD PTR ___result__$70567[ebp]
	mov	DWORD PTR $T71650[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _prop$70560[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T71650[ebp]
	jmp	$LN47@UpdateItem
$LN33@UpdateItem:
; Line 780
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _prop$70560[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
; Line 783
	lea	ecx, DWORD PTR _lzma2Props$70570[ebp]
	push	ecx
	call	_Lzma2EncProps_Init@4
; Line 785
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?GetLevel@CMultiMethodProps@NArchive@@QBEHXZ ; NArchive::CMultiMethodProps::GetLevel
	mov	DWORD PTR tv611[ebp], eax
	mov	edx, DWORD PTR tv611[ebp]
	mov	DWORD PTR _lzma2Props$70570[ebp], edx
; Line 787
	lea	ecx, DWORD PTR _fileInStream$70572[ebp]
	call	??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
	mov	DWORD PTR tv612[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 3
; Line 788
	lea	ecx, DWORD PTR _fileInStream$70572[ebp]
	call	??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator&
	mov	DWORD PTR tv613[ebp], eax
	mov	esi, esp
	mov	eax, DWORD PTR tv613[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _updateCallback$[ebp]
	push	ecx
	mov	edx, DWORD PTR _updateCallback$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv614[ebp], eax
	mov	edx, DWORD PTR tv614[ebp]
	mov	DWORD PTR ___result__$70573[ebp], edx
	cmp	DWORD PTR ___result__$70573[ebp], 0
	je	SHORT $LN32@UpdateItem
	mov	eax, DWORD PTR ___result__$70573[ebp]
	mov	DWORD PTR $T71651[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _fileInStream$70572[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T71651[ebp]
	jmp	$LN47@UpdateItem
$LN32@UpdateItem:
; Line 790
	lea	ecx, DWORD PTR _fileInStream$70572[ebp]
	call	??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
	mov	DWORD PTR tv615[ebp], eax
	mov	ecx, DWORD PTR tv615[ebp]
	push	ecx
	lea	ecx, DWORD PTR _seqInStream$70576[ebp]
	call	??0CSeqInStreamWrap@@QAE@PAUISequentialInStream@@@Z ; CSeqInStreamWrap::CSeqInStreamWrap
; Line 793
	mov	edx, DWORD PTR _size$70559[ebp+4]
	push	edx
	mov	eax, DWORD PTR _size$70559[ebp]
	push	eax
	lea	ecx, DWORD PTR _prop$70577[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@_K@Z	; NWindows::NCOM::CPropVariant::CPropVariant
	mov	DWORD PTR tv616[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 4
; Line 794
	lea	ecx, DWORD PTR _lzma2Props$70570[ebp]
	push	ecx
	lea	edx, DWORD PTR _prop$70577[ebp]
	push	edx
	push	16					; 00000010H
	call	?SetLzma2Prop@NLzma2@NCompress@@YGJKABUtagPROPVARIANT@@AAUCLzma2EncProps@@@Z ; NCompress::NLzma2::SetLzma2Prop
	mov	DWORD PTR tv617[ebp], eax
	mov	eax, DWORD PTR tv617[ebp]
	mov	DWORD PTR ___result__$70579[ebp], eax
	cmp	DWORD PTR ___result__$70579[ebp], 0
	je	SHORT $LN31@UpdateItem
	mov	ecx, DWORD PTR ___result__$70579[ebp]
	mov	DWORD PTR $T71652[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _prop$70577[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _fileInStream$70572[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T71652[ebp]
	jmp	$LN47@UpdateItem
$LN31@UpdateItem:
; Line 795
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _prop$70577[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
; Line 797
	mov	DWORD PTR _i$70582[ebp], 0
	jmp	SHORT $LN30@UpdateItem
$LN29@UpdateItem:
	mov	edx, DWORD PTR _i$70582[ebp]
	add	edx, 1
	mov	DWORD PTR _i$70582[ebp], edx
$LN30@UpdateItem:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	?Size@?$CObjectVector@VCOneMethodInfo@@@@QBEIXZ ; CObjectVector<COneMethodInfo>::Size
	mov	DWORD PTR tv618[ebp], eax
	mov	eax, DWORD PTR _i$70582[ebp]
	cmp	eax, DWORD PTR tv618[ebp]
	jae	$LN28@UpdateItem
; Line 799
	mov	ecx, DWORD PTR _i$70582[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??A?$CObjectVector@VCOneMethodInfo@@@@QAEAAVCOneMethodInfo@@I@Z ; CObjectVector<COneMethodInfo>::operator[]
	mov	DWORD PTR tv619[ebp], eax
	mov	edx, DWORD PTR tv619[ebp]
	mov	DWORD PTR _m$70586[ebp], edx
; Line 804
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _m$70586[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?SetGlobalLevelAndThreads@CMultiMethodProps@NArchive@@QAEXAAVCOneMethodInfo@@I@Z ; NArchive::CMultiMethodProps::SetGlobalLevelAndThreads
; Line 806
	mov	DWORD PTR _j$70587[ebp], 0
	jmp	SHORT $LN27@UpdateItem
$LN26@UpdateItem:
	mov	eax, DWORD PTR _j$70587[ebp]
	add	eax, 1
	mov	DWORD PTR _j$70587[ebp], eax
$LN27@UpdateItem:
	mov	ecx, DWORD PTR _m$70586[ebp]
	call	?Size@?$CObjectVector@UCProp@@@@QBEIXZ	; CObjectVector<CProp>::Size
	mov	DWORD PTR tv620[ebp], eax
	mov	ecx, DWORD PTR _j$70587[ebp]
	cmp	ecx, DWORD PTR tv620[ebp]
	jae	$LN25@UpdateItem
; Line 808
	mov	edx, DWORD PTR _j$70587[ebp]
	push	edx
	mov	ecx, DWORD PTR _m$70586[ebp]
	call	??A?$CObjectVector@UCProp@@@@QAEAAUCProp@@I@Z ; CObjectVector<CProp>::operator[]
	mov	DWORD PTR tv621[ebp], eax
	mov	eax, DWORD PTR tv621[ebp]
	mov	DWORD PTR _prop$70591[ebp], eax
; Line 809
	lea	ecx, DWORD PTR _lzma2Props$70570[ebp]
	push	ecx
	mov	edx, DWORD PTR _prop$70591[ebp]
	add	edx, 8
	push	edx
	mov	eax, DWORD PTR _prop$70591[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?SetLzma2Prop@NLzma2@NCompress@@YGJKABUtagPROPVARIANT@@AAUCLzma2EncProps@@@Z ; NCompress::NLzma2::SetLzma2Prop
	mov	DWORD PTR tv622[ebp], eax
	mov	edx, DWORD PTR tv622[ebp]
	mov	DWORD PTR ___result__$70592[ebp], edx
	cmp	DWORD PTR ___result__$70592[ebp], 0
	je	SHORT $LN24@UpdateItem
	mov	eax, DWORD PTR ___result__$70592[ebp]
	mov	DWORD PTR $T71653[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _fileInStream$70572[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T71653[ebp]
	jmp	$LN47@UpdateItem
$LN24@UpdateItem:
; Line 810
	jmp	$LN26@UpdateItem
$LN25@UpdateItem:
; Line 812
	jmp	$LN29@UpdateItem
$LN28@UpdateItem:
; Line 815
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _lzma2Props$70570[ebp+64], edx
; Line 818
	push	56					; 00000038H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR tv623[ebp], eax
	mov	eax, DWORD PTR tv623[ebp]
	mov	DWORD PTR $T71655[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 5
	cmp	DWORD PTR $T71655[ebp], 0
	je	SHORT $LN49@UpdateItem
	mov	ecx, DWORD PTR $T71655[ebp]
	call	??0CLocalProgress@@QAE@XZ		; CLocalProgress::CLocalProgress
	mov	DWORD PTR tv625[ebp], eax
	mov	ecx, DWORD PTR tv625[ebp]
	mov	DWORD PTR tv338[ebp], ecx
	jmp	SHORT $LN50@UpdateItem
$LN49@UpdateItem:
	mov	DWORD PTR tv338[ebp], 0
$LN50@UpdateItem:
	mov	edx, DWORD PTR tv338[ebp]
	mov	DWORD PTR $T71654[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	mov	eax, DWORD PTR $T71654[ebp]
	mov	DWORD PTR _lps$70595[ebp], eax
; Line 819
	mov	ecx, DWORD PTR _lps$70595[ebp]
	push	ecx
	lea	ecx, DWORD PTR _progress$70601[ebp]
	call	??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+12], 6
; Line 820
	push	1
	mov	edx, DWORD PTR _updateCallback$[ebp]
	push	edx
	mov	ecx, DWORD PTR _lps$70595[ebp]
	call	?Init@CLocalProgress@@QAEXPAUIProgress@@_N@Z ; CLocalProgress::Init
; Line 822
	lea	ecx, DWORD PTR _progress$70601[ebp]
	call	??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *
	mov	DWORD PTR tv339[ebp], eax
	mov	eax, DWORD PTR tv339[ebp]
	push	eax
	lea	ecx, DWORD PTR _progressWrap$70602[ebp]
	call	??0CCompressProgressWrap@@QAE@PAUICompressProgressInfo@@@Z ; CCompressProgressWrap::CCompressProgressWrap
; Line 825
	lea	ecx, DWORD PTR _xzProps$70603[ebp]
	push	ecx
	call	_XzProps_Init@4
; Line 826
	lea	edx, DWORD PTR _filter$70604[ebp]
	push	edx
	call	_XzFilterProps_Init@4
; Line 827
	lea	eax, DWORD PTR _lzma2Props$70570[ebp]
	mov	DWORD PTR _xzProps$70603[ebp], eax
; Line 828
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+156]
	neg	edx
	sbb	edx, edx
	lea	eax, DWORD PTR _filter$70604[ebp]
	and	edx, eax
	mov	DWORD PTR _xzProps$70603[ebp+4], edx
; Line 829
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR tv369[ebp], edx
	cmp	DWORD PTR tv369[ebp], 32		; 00000020H
	ja	SHORT $LN17@UpdateItem
	mov	eax, DWORD PTR tv369[ebp]
	movzx	ecx, BYTE PTR $LN67@UpdateItem[eax]
	jmp	DWORD PTR $LN87@UpdateItem[ecx*4]
$LN21@UpdateItem:
; Line 831
	mov	DWORD PTR _xzProps$70603[ebp+8], 0
	jmp	SHORT $LN22@UpdateItem
$LN20@UpdateItem:
; Line 832
	mov	DWORD PTR _xzProps$70603[ebp+8], 1
	jmp	SHORT $LN22@UpdateItem
$LN19@UpdateItem:
; Line 833
	mov	DWORD PTR _xzProps$70603[ebp+8], 4
	jmp	SHORT $LN22@UpdateItem
$LN18@UpdateItem:
; Line 834
	mov	DWORD PTR _xzProps$70603[ebp+8], 10	; 0000000aH
	jmp	SHORT $LN22@UpdateItem
$LN17@UpdateItem:
; Line 835
	mov	DWORD PTR $T71658[ebp], -2147024809	; 80070057H
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _progress$70601[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _fileInStream$70572[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T71658[ebp]
	jmp	$LN47@UpdateItem
$LN22@UpdateItem:
; Line 837
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+156]
	mov	DWORD PTR _filter$70604[ebp], eax
; Line 838
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+156], 3
	jne	$LN16@UpdateItem
; Line 840
	mov	BYTE PTR _deltaDefined$70617[ebp], 0
; Line 841
	mov	DWORD PTR _j$70618[ebp], 0
	jmp	SHORT $LN15@UpdateItem
$LN14@UpdateItem:
	mov	edx, DWORD PTR _j$70618[ebp]
	add	edx, 1
	mov	DWORD PTR _j$70618[ebp], edx
$LN15@UpdateItem:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?Size@?$CObjectVector@UCProp@@@@QBEIXZ	; CObjectVector<CProp>::Size
	mov	DWORD PTR tv626[ebp], eax
	mov	eax, DWORD PTR _j$70618[ebp]
	cmp	eax, DWORD PTR tv626[ebp]
	jae	$LN13@UpdateItem
; Line 843
	mov	ecx, DWORD PTR _j$70618[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??A?$CObjectVector@UCProp@@@@QAEAAUCProp@@I@Z ; CObjectVector<CProp>::operator[]
	mov	DWORD PTR tv627[ebp], eax
	mov	edx, DWORD PTR tv627[ebp]
	mov	DWORD PTR _prop$70622[ebp], edx
; Line 844
	mov	eax, DWORD PTR _prop$70622[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN12@UpdateItem
	mov	ecx, DWORD PTR _prop$70622[ebp]
	movzx	edx, WORD PTR [ecx+8]
	cmp	edx, 19					; 00000013H
	jne	SHORT $LN12@UpdateItem
; Line 846
	mov	eax, DWORD PTR _prop$70622[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _delta$70624[ebp], ecx
; Line 847
	cmp	DWORD PTR _delta$70624[ebp], 1
	jb	SHORT $LN10@UpdateItem
	cmp	DWORD PTR _delta$70624[ebp], 256	; 00000100H
	jbe	SHORT $LN11@UpdateItem
$LN10@UpdateItem:
; Line 848
	mov	DWORD PTR $T71659[ebp], -2147024809	; 80070057H
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _progress$70601[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _fileInStream$70572[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T71659[ebp]
	jmp	$LN47@UpdateItem
$LN11@UpdateItem:
; Line 849
	mov	edx, DWORD PTR _delta$70624[ebp]
	mov	DWORD PTR _filter$70604[ebp+4], edx
; Line 850
	mov	BYTE PTR _deltaDefined$70617[ebp], 1
$LN12@UpdateItem:
; Line 852
	jmp	$LN14@UpdateItem
$LN13@UpdateItem:
; Line 853
	movzx	eax, BYTE PTR _deltaDefined$70617[ebp]
	test	eax, eax
	jne	SHORT $LN16@UpdateItem
; Line 854
	mov	DWORD PTR $T71660[ebp], -2147024809	; 80070057H
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _progress$70601[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _fileInStream$70572[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T71660[ebp]
	jmp	$LN47@UpdateItem
$LN16@UpdateItem:
; Line 856
	lea	ecx, DWORD PTR _progressWrap$70602[ebp]
	push	ecx
	lea	edx, DWORD PTR _xzProps$70603[ebp]
	push	edx
	lea	eax, DWORD PTR _seqInStream$70576[ebp]
	push	eax
	lea	ecx, DWORD PTR _seqOutStream$70535[ebp]
	push	ecx
	call	_Xz_Encode@16
	mov	DWORD PTR _res$70633[ebp], eax
; Line 857
	cmp	DWORD PTR _res$70633[ebp], 0
	jne	SHORT $LN8@UpdateItem
; Line 858
	mov	esi, esp
	push	0
	mov	edx, DWORD PTR _updateCallback$[ebp]
	push	edx
	mov	eax, DWORD PTR _updateCallback$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv628[ebp], eax
	mov	eax, DWORD PTR tv628[ebp]
	mov	DWORD PTR $T71661[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _progress$70601[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _fileInStream$70572[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T71661[ebp]
	jmp	$LN47@UpdateItem
$LN8@UpdateItem:
; Line 859
	mov	ecx, DWORD PTR _res$70633[ebp]
	push	ecx
	call	?SResToHRESULT@@YGJH@Z			; SResToHRESULT
	mov	DWORD PTR $T71662[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _progress$70601[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _fileInStream$70572[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T71662[ebp]
	jmp	$LN47@UpdateItem
$LN36@UpdateItem:
; Line 862
	cmp	DWORD PTR _indexInArchive$70542[ebp], 0
	je	SHORT $LN7@UpdateItem
; Line 863
	mov	eax, -2147024809			; 80070057H
	jmp	$LN47@UpdateItem
$LN7@UpdateItem:
; Line 865
	lea	ecx, DWORD PTR _opCallback$70676[ebp]
	call	??0?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::CMyComPtr<IArchiveUpdateCallbackFile>
	mov	DWORD PTR tv629[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 7
; Line 866
	lea	ecx, DWORD PTR _opCallback$70676[ebp]
	call	??I?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAEPAPAUIArchiveUpdateCallbackFile@@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator&
	mov	DWORD PTR tv630[ebp], eax
	mov	esi, esp
	mov	edx, DWORD PTR tv630[ebp]
	push	edx
	push	OFFSET _IID_IArchiveUpdateCallbackFile
	mov	eax, DWORD PTR _updateCallback$[ebp]
	push	eax
	mov	ecx, DWORD PTR _updateCallback$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 867
	lea	ecx, DWORD PTR _opCallback$70676[ebp]
	call	??B?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator IArchiveUpdateCallbackFile *
	mov	DWORD PTR tv631[ebp], eax
	cmp	DWORD PTR tv631[ebp], 0
	je	$LN6@UpdateItem
; Line 869
	lea	ecx, DWORD PTR _opCallback$70676[ebp]
	call	??C?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator->
	mov	DWORD PTR tv632[ebp], eax
	mov	ecx, DWORD PTR tv632[ebp]
	mov	DWORD PTR tv490[ebp], ecx
	mov	esi, esp
	push	3
	push	0
	push	1
	mov	edx, DWORD PTR tv490[ebp]
	push	edx
	mov	eax, DWORD PTR tv490[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv633[ebp], eax
	mov	eax, DWORD PTR tv633[ebp]
	mov	DWORD PTR ___result__$70679[ebp], eax
	cmp	DWORD PTR ___result__$70679[ebp], 0
	je	SHORT $LN6@UpdateItem
	mov	ecx, DWORD PTR ___result__$70679[ebp]
	mov	DWORD PTR $T71663[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _opCallback$70676[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	eax, DWORD PTR $T71663[ebp]
	jmp	$LN47@UpdateItem
$LN6@UpdateItem:
; Line 872
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	call	??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *
	mov	DWORD PTR tv634[ebp], eax
	cmp	DWORD PTR tv634[ebp], 0
	je	$LN4@UpdateItem
; Line 874
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+146]
	test	eax, eax
	je	SHORT $LN3@UpdateItem
; Line 875
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	push	edx
	mov	eax, DWORD PTR [ecx+104]
	push	eax
	mov	ecx, DWORD PTR _updateCallback$[ebp]
	push	ecx
	mov	edx, DWORD PTR _updateCallback$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv635[ebp], eax
	mov	edx, DWORD PTR tv635[ebp]
	mov	DWORD PTR ___result__$70684[ebp], edx
	cmp	DWORD PTR ___result__$70684[ebp], 0
	je	SHORT $LN3@UpdateItem
	mov	eax, DWORD PTR ___result__$70684[ebp]
	mov	DWORD PTR $T71664[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _opCallback$70676[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	eax, DWORD PTR $T71664[ebp]
	jmp	$LN47@UpdateItem
$LN3@UpdateItem:
; Line 876
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	call	??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->
	mov	DWORD PTR tv636[ebp], eax
	mov	ecx, DWORD PTR tv636[ebp]
	mov	DWORD PTR tv525[ebp], ecx
	mov	esi, esp
	push	0
	push	0
	push	0
	push	0
	mov	edx, DWORD PTR tv525[ebp]
	push	edx
	mov	eax, DWORD PTR tv525[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv637[ebp], eax
	mov	eax, DWORD PTR tv637[ebp]
	mov	DWORD PTR ___result__$70687[ebp], eax
	cmp	DWORD PTR ___result__$70687[ebp], 0
	je	SHORT $LN4@UpdateItem
	mov	ecx, DWORD PTR ___result__$70687[ebp]
	mov	DWORD PTR $T71665[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _opCallback$70676[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	eax, DWORD PTR $T71665[ebp]
	jmp	$LN47@UpdateItem
$LN4@UpdateItem:
; Line 879
	push	56					; 00000038H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR tv638[ebp], eax
	mov	edx, DWORD PTR tv638[ebp]
	mov	DWORD PTR $T71667[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 8
	cmp	DWORD PTR $T71667[ebp], 0
	je	SHORT $LN51@UpdateItem
	mov	ecx, DWORD PTR $T71667[ebp]
	call	??0CLocalProgress@@QAE@XZ		; CLocalProgress::CLocalProgress
	mov	DWORD PTR tv640[ebp], eax
	mov	eax, DWORD PTR tv640[ebp]
	mov	DWORD PTR tv540[ebp], eax
	jmp	SHORT $LN52@UpdateItem
$LN51@UpdateItem:
	mov	DWORD PTR tv540[ebp], 0
$LN52@UpdateItem:
	mov	ecx, DWORD PTR tv540[ebp]
	mov	DWORD PTR $T71666[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 7
	mov	edx, DWORD PTR $T71666[ebp]
	mov	DWORD PTR _lps$70690[ebp], edx
; Line 880
	mov	eax, DWORD PTR _lps$70690[ebp]
	push	eax
	lea	ecx, DWORD PTR _progress$70696[ebp]
	call	??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+12], 9
; Line 881
	push	1
	mov	ecx, DWORD PTR _updateCallback$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _lps$70690[ebp]
	call	?Init@CLocalProgress@@QAEXPAUIProgress@@_N@Z ; CLocalProgress::Init
; Line 883
	lea	ecx, DWORD PTR _progress$70696[ebp]
	call	??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *
	mov	DWORD PTR tv541[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	call	??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *
	mov	DWORD PTR tv641[ebp], eax
	mov	edx, DWORD PTR tv541[ebp]
	push	edx
	mov	eax, DWORD PTR _outStream$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv641[ebp]
	push	ecx
	call	?CopyStream@NCompress@@YGJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z ; NCompress::CopyStream
	mov	DWORD PTR tv642[ebp], eax
	mov	edx, DWORD PTR tv642[ebp]
	mov	DWORD PTR $T71670[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 7
	lea	ecx, DWORD PTR _progress$70696[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _opCallback$70676[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	eax, DWORD PTR $T71670[ebp]
	jmp	SHORT $LN47@UpdateItem
__catch$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$0:
; Line 885
	mov	DWORD PTR $T71671[ebp], -2147024882	; 8007000eH
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN65@UpdateItem
	ret	0
	mov	eax, __tryend$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$1
	ret	0
__tryend$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$1:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN47@UpdateItem
$LN65@UpdateItem:
	mov	eax, DWORD PTR $T71671[ebp]
$LN47@UpdateItem:
; Line 886
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN86@UpdateItem
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 748				; 000002ecH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN86@UpdateItem:
	DD	16					; 00000010H
	DD	$LN85@UpdateItem
$LN85@UpdateItem:
	DD	-48					; ffffffd0H
	DD	24					; 00000018H
	DD	$LN68@UpdateItem
	DD	-64					; ffffffc0H
	DD	4
	DD	$LN69@UpdateItem
	DD	-76					; ffffffb4H
	DD	4
	DD	$LN70@UpdateItem
	DD	-88					; ffffffa8H
	DD	4
	DD	$LN71@UpdateItem
	DD	-116					; ffffff8cH
	DD	16					; 00000010H
	DD	$LN72@UpdateItem
	DD	-152					; ffffff68H
	DD	16					; 00000010H
	DD	$LN73@UpdateItem
	DD	-240					; ffffff10H
	DD	72					; 00000048H
	DD	$LN74@UpdateItem
	DD	-252					; ffffff04H
	DD	4
	DD	$LN75@UpdateItem
	DD	-288					; fffffee0H
	DD	24					; 00000018H
	DD	$LN76@UpdateItem
	DD	-312					; fffffec8H
	DD	16					; 00000010H
	DD	$LN77@UpdateItem
	DD	-352					; fffffea0H
	DD	4
	DD	$LN78@UpdateItem
	DD	-372					; fffffe8cH
	DD	12					; 0000000cH
	DD	$LN79@UpdateItem
	DD	-392					; fffffe78H
	DD	12					; 0000000cH
	DD	$LN80@UpdateItem
	DD	-416					; fffffe60H
	DD	16					; 00000010H
	DD	$LN81@UpdateItem
	DD	-448					; fffffe40H
	DD	4
	DD	$LN82@UpdateItem
	DD	-476					; fffffe24H
	DD	4
	DD	$LN83@UpdateItem
$LN83@UpdateItem:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	103					; 00000067H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	0
$LN82@UpdateItem:
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	98					; 00000062H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
$LN81@UpdateItem:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN80@UpdateItem:
	DB	120					; 00000078H
	DB	122					; 0000007aH
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	115					; 00000073H
	DB	0
$LN79@UpdateItem:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	103					; 00000067H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	87					; 00000057H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	0
$LN78@UpdateItem:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	103					; 00000067H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	0
$LN77@UpdateItem:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
$LN76@UpdateItem:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	113					; 00000071H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN75@UpdateItem:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN74@UpdateItem:
	DB	108					; 0000006cH
	DB	122					; 0000007aH
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	50					; 00000032H
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	115					; 00000073H
	DB	0
$LN73@UpdateItem:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
$LN72@UpdateItem:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
$LN71@UpdateItem:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	65					; 00000041H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	0
$LN70@UpdateItem:
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	115					; 00000073H
	DB	0
$LN69@UpdateItem:
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
$LN68@UpdateItem:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	113					; 00000071H
	DB	79					; 0000004fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
	npad	3
$LN87@UpdateItem:
	DD	$LN21@UpdateItem
	DD	$LN20@UpdateItem
	DD	$LN19@UpdateItem
	DD	$LN18@UpdateItem
	DD	$LN17@UpdateItem
$LN67@UpdateItem:
	DB	0
	DB	4
	DB	4
	DB	4
	DB	1
	DB	4
	DB	4
	DB	4
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$2:
	lea	ecx, DWORD PTR _prop$70548[ebp]
	jmp	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
__unwindfunclet$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$3:
	lea	ecx, DWORD PTR _prop$70560[ebp]
	jmp	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
__unwindfunclet$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$4:
	lea	ecx, DWORD PTR _fileInStream$70572[ebp]
	jmp	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
__unwindfunclet$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$5:
	lea	ecx, DWORD PTR _prop$70577[ebp]
	jmp	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
__unwindfunclet$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$6:
	mov	eax, DWORD PTR $T71655[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$7:
	lea	ecx, DWORD PTR _progress$70601[ebp]
	jmp	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
__unwindfunclet$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$8:
	lea	ecx, DWORD PTR _opCallback$70676[ebp]
	jmp	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
__unwindfunclet$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$9:
	mov	eax, DWORD PTR $T71667[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$10:
	lea	ecx, DWORD PTR _progress$70696[ebp]
	jmp	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
__ehhandler$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-752]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?UpdateItems@CHandler@NXz@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z ENDP ; NArchive::NXz::CHandler::UpdateItems
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IntToBool@@YG_NH@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?IntToBool@@YG_NH@Z PROC				; IntToBool, COMDAT
; File c:\workspace\7z1505-src\cpp\common\defs.h
; Line 18
	push	ebp
	mov	ebp, esp
	xor	eax, eax
	cmp	DWORD PTR _value$[ebp], 0
	setne	al
	pop	ebp
	ret	4
?IntToBool@@YG_NH@Z ENDP				; IntToBool
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CPropVariant@NCOM@NWindows@@QAE@_K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 8
??0CPropVariant@NCOM@NWindows@@QAE@_K@Z PROC		; NWindows::NCOM::CPropVariant::CPropVariant, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\propvariant.h
; Line 70
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 21					; 00000015H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx], ax
	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+2], dx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _value$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _value$[ebp+4]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0CPropVariant@NCOM@NWindows@@QAE@_K@Z ENDP		; NWindows::NCOM::CPropVariant::CPropVariant
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetLevel@CMultiMethodProps@NArchive@@QBEHXZ
_TEXT	SEGMENT
tv65 = -8						; size = 4
_this$ = -4						; size = 4
?GetLevel@CMultiMethodProps@NArchive@@QBEHXZ PROC	; NArchive::CMultiMethodProps::GetLevel, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\common\handlerout.h
; Line 40
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], -1
	jne	SHORT $LN3@GetLevel
	mov	DWORD PTR tv65[ebp], 5
	jmp	SHORT $LN4@GetLevel
$LN3@GetLevel:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv65[ebp], edx
$LN4@GetLevel:
	mov	eax, DWORD PTR tv65[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetLevel@CMultiMethodProps@NArchive@@QBEHXZ ENDP	; NArchive::CMultiMethodProps::GetLevel
_TEXT	ENDS
PUBLIC	?IsEqualTo_Ascii_NoCase@AString@@QBE_NPBD@Z	; AString::IsEqualTo_Ascii_NoCase
PUBLIC	?DeleteFrontal@?$CObjectVector@VCOneMethodInfo@@@@QAEXI@Z ; CObjectVector<COneMethodInfo>::DeleteFrontal
PUBLIC	?GetNumEmptyMethods@CMultiMethodProps@NArchive@@QBEIXZ ; NArchive::CMultiMethodProps::GetNumEmptyMethods
EXTRN	?StringsAreEqualNoCase_Ascii@@YG_NPBD0@Z:PROC	; StringsAreEqualNoCase_Ascii
EXTRN	?SetProperty@CMultiMethodProps@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z:PROC ; NArchive::CMultiMethodProps::SetProperty
xdata$x	SEGMENT
__catchsym$?SetProperties@CHandler@NXz@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?SetProperties@CHandler@NXz@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z$0
__unwindtable$?SetProperties@CHandler@NXz@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?SetProperties@CHandler@NXz@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?SetProperties@CHandler@NXz@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z$2
__ehfuncinfo$?SetProperties@CHandler@NXz@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?SetProperties@CHandler@NXz@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z
	DD	01H
	DD	FLAT:__tryblocktable$?SetProperties@CHandler@NXz@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv210 = -70						; size = 1
tv209 = -69						; size = 1
tv208 = -68						; size = 4
tv207 = -64						; size = 4
tv206 = -60						; size = 4
tv205 = -56						; size = 4
tv204 = -52						; size = 4
tv203 = -45						; size = 1
tv202 = -44						; size = 4
$T71721 = -40						; size = 4
_methodName$70725 = -36					; size = 4
_pair$70718 = -32					; size = 4
_k$70714 = -28						; size = 4
___result__$70711 = -24					; size = 4
_i$70707 = -20						; size = 4
__$EHRec$ = -16						; size = 16
_this$ = 8						; size = 4
_names$ = 12						; size = 4
_values$ = 16						; size = 4
_numProps$ = 20						; size = 4
?SetProperties@CHandler@NXz@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z PROC ; NArchive::NXz::CHandler::SetProperties
; File c:\workspace\7z1505-src\cpp\7zip\archive\xzhandler.cpp
; Line 889
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetProperties@CHandler@NXz@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 56					; 00000038H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-72]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
; Line 890
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 892
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 12					; 0000000cH
	call	?Init@CHandler@NXz@NArchive@@AAEXXZ	; NArchive::NXz::CHandler::Init
; Line 893
	mov	DWORD PTR _i$70707[ebp], 0
	jmp	SHORT $LN15@SetPropert
$LN14@SetPropert:
	mov	eax, DWORD PTR _i$70707[ebp]
	add	eax, 1
	mov	DWORD PTR _i$70707[ebp], eax
$LN15@SetPropert:
	mov	ecx, DWORD PTR _i$70707[ebp]
	cmp	ecx, DWORD PTR _numProps$[ebp]
	jae	SHORT $LN13@SetPropert
; Line 895
	mov	edx, DWORD PTR _i$70707[ebp]
	shl	edx, 4
	add	edx, DWORD PTR _values$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$70707[ebp]
	mov	ecx, DWORD PTR _names$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?SetProperty@CMultiMethodProps@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z ; NArchive::CMultiMethodProps::SetProperty
	mov	DWORD PTR tv202[ebp], eax
	mov	eax, DWORD PTR tv202[ebp]
	mov	DWORD PTR ___result__$70711[ebp], eax
	cmp	DWORD PTR ___result__$70711[ebp], 0
	je	SHORT $LN12@SetPropert
	mov	eax, DWORD PTR ___result__$70711[ebp]
	jmp	$LN17@SetPropert
$LN12@SetPropert:
; Line 896
	jmp	SHORT $LN14@SetPropert
$LN13@SetPropert:
; Line 898
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	?IsEmpty@AString@@QBE_NXZ		; AString::IsEmpty
	mov	BYTE PTR tv203[ebp], al
	movzx	ecx, BYTE PTR tv203[ebp]
	test	ecx, ecx
	jne	SHORT $LN11@SetPropert
; Line 901
	mov	DWORD PTR _k$70714[ebp], 0
	jmp	SHORT $LN10@SetPropert
$LN9@SetPropert:
	mov	edx, DWORD PTR _k$70714[ebp]
	add	edx, 1
	mov	DWORD PTR _k$70714[ebp], edx
$LN10@SetPropert:
	cmp	DWORD PTR _k$70714[ebp], 9
	jae	SHORT $LN8@SetPropert
; Line 903
	mov	eax, DWORD PTR _k$70714[ebp]
	lea	ecx, DWORD PTR _g_NamePairs[eax*8]
	mov	DWORD PTR _pair$70718[ebp], ecx
; Line 904
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??BAString@@QBEPBDXZ			; AString::operator char const *
	mov	DWORD PTR tv204[ebp], eax
	mov	edx, DWORD PTR _pair$70718[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR tv204[ebp]
	push	ecx
	call	?StringsAreEqualNoCase_Ascii@@YG_NPBD0@Z ; StringsAreEqualNoCase_Ascii
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN7@SetPropert
; Line 906
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pair$70718[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+152], edx
; Line 907
	jmp	SHORT $LN8@SetPropert
$LN7@SetPropert:
; Line 909
	jmp	SHORT $LN9@SetPropert
$LN8@SetPropert:
; Line 910
	cmp	DWORD PTR _k$70714[ebp], 9
	jne	SHORT $LN11@SetPropert
; Line 911
	mov	eax, -2147024809			; 80070057H
	jmp	$LN17@SetPropert
$LN11@SetPropert:
; Line 914
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?GetNumEmptyMethods@CMultiMethodProps@NArchive@@QBEIXZ ; NArchive::CMultiMethodProps::GetNumEmptyMethods
	mov	DWORD PTR tv205[ebp], eax
	mov	eax, DWORD PTR tv205[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?DeleteFrontal@?$CObjectVector@VCOneMethodInfo@@@@QAEXI@Z ; CObjectVector<COneMethodInfo>::DeleteFrontal
; Line 915
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?Size@?$CObjectVector@VCOneMethodInfo@@@@QBEIXZ ; CObjectVector<COneMethodInfo>::Size
	mov	DWORD PTR tv206[ebp], eax
	cmp	DWORD PTR tv206[ebp], 1
	jbe	SHORT $LN5@SetPropert
; Line 916
	mov	eax, -2147024809			; 80070057H
	jmp	$LN17@SetPropert
$LN5@SetPropert:
; Line 917
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?Size@?$CObjectVector@VCOneMethodInfo@@@@QBEIXZ ; CObjectVector<COneMethodInfo>::Size
	mov	DWORD PTR tv207[ebp], eax
	cmp	DWORD PTR tv207[ebp], 1
	jne	SHORT $LN4@SetPropert
; Line 919
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??A?$CObjectVector@VCOneMethodInfo@@@@QAEAAVCOneMethodInfo@@I@Z ; CObjectVector<COneMethodInfo>::operator[]
	mov	DWORD PTR tv208[ebp], eax
	mov	ecx, DWORD PTR tv208[ebp]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR _methodName$70725[ebp], ecx
; Line 920
	mov	ecx, DWORD PTR _methodName$70725[ebp]
	call	?IsEmpty@AString@@QBE_NXZ		; AString::IsEmpty
	mov	BYTE PTR tv209[ebp], al
	movzx	edx, BYTE PTR tv209[ebp]
	test	edx, edx
	je	SHORT $LN3@SetPropert
; Line 921
	mov	eax, DWORD PTR _k_LZMA2_Name
	push	eax
	mov	ecx, DWORD PTR _methodName$70725[ebp]
	call	??4AString@@QAEAAV0@PBD@Z		; AString::operator=
	jmp	SHORT $LN4@SetPropert
$LN3@SetPropert:
; Line 922
	mov	ecx, DWORD PTR _k_LZMA2_Name
	push	ecx
	mov	ecx, DWORD PTR _methodName$70725[ebp]
	call	?IsEqualTo_Ascii_NoCase@AString@@QBE_NPBD@Z ; AString::IsEqualTo_Ascii_NoCase
	mov	BYTE PTR tv210[ebp], al
	movzx	edx, BYTE PTR tv210[ebp]
	test	edx, edx
	jne	SHORT $LN4@SetPropert
; Line 923
	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN17@SetPropert
$LN4@SetPropert:
; Line 926
	xor	eax, eax
	jmp	SHORT $LN17@SetPropert
__catch$?SetProperties@CHandler@NXz@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z$0:
; Line 928
	mov	DWORD PTR $T71721[ebp], -2147024882	; 8007000eH
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN22@SetPropert
	ret	0
	mov	eax, __tryend$?SetProperties@CHandler@NXz@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z$1
	ret	0
__tryend$?SetProperties@CHandler@NXz@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z$1:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN17@SetPropert
$LN22@SetPropert:
	mov	eax, DWORD PTR $T71721[ebp]
$LN17@SetPropert:
; Line 929
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 72					; 00000048H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
text$x	SEGMENT
__ehhandler$?SetProperties@CHandler@NXz@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-76]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetProperties@CHandler@NXz@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetProperties@CHandler@NXz@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z ENDP ; NArchive::NXz::CHandler::SetProperties
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsEqualTo_Ascii_NoCase@AString@@QBE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
?IsEqualTo_Ascii_NoCase@AString@@QBE_NPBD@Z PROC	; AString::IsEqualTo_Ascii_NoCase, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 314
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	?StringsAreEqualNoCase_Ascii@@YG_NPBD0@Z ; StringsAreEqualNoCase_Ascii
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?IsEqualTo_Ascii_NoCase@AString@@QBE_NPBD@Z ENDP	; AString::IsEqualTo_Ascii_NoCase
_TEXT	ENDS
PUBLIC	?IsEmpty@COneMethodInfo@@QBE_NXZ		; COneMethodInfo::IsEmpty
PUBLIC	??A?$CObjectVector@VCOneMethodInfo@@@@QBEABVCOneMethodInfo@@I@Z ; CObjectVector<COneMethodInfo>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetNumEmptyMethods@CMultiMethodProps@NArchive@@QBEIXZ
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
?GetNumEmptyMethods@CMultiMethodProps@NArchive@@QBEIXZ PROC ; NArchive::CMultiMethodProps::GetNumEmptyMethods, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\common\handlerout.h
; Line 32
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 34
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@GetNumEmpt
$LN3@GetNumEmpt:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@GetNumEmpt:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?Size@?$CObjectVector@VCOneMethodInfo@@@@QBEIXZ ; CObjectVector<COneMethodInfo>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN2@GetNumEmpt
; Line 35
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??A?$CObjectVector@VCOneMethodInfo@@@@QBEABVCOneMethodInfo@@I@Z ; CObjectVector<COneMethodInfo>::operator[]
	mov	ecx, eax
	call	?IsEmpty@COneMethodInfo@@QBE_NXZ	; COneMethodInfo::IsEmpty
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN1@GetNumEmpt
; Line 36
	jmp	SHORT $LN2@GetNumEmpt
$LN1@GetNumEmpt:
; Line 37
	jmp	SHORT $LN3@GetNumEmpt
$LN2@GetNumEmpt:
	mov	eax, DWORD PTR _i$[ebp]
; Line 38
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetNumEmptyMethods@CMultiMethodProps@NArchive@@QBEIXZ ENDP ; NArchive::CMultiMethodProps::GetNumEmptyMethods
_TEXT	ENDS
PUBLIC	?IsEmpty@?$CObjectVector@UCProp@@@@QBE_NXZ	; CObjectVector<CProp>::IsEmpty
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsEmpty@COneMethodInfo@@QBE_NXZ
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
?IsEmpty@COneMethodInfo@@QBE_NXZ PROC			; COneMethodInfo::IsEmpty, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\methodprops.h
; Line 189
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?IsEmpty@AString@@QBE_NXZ		; AString::IsEmpty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@IsEmpty
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsEmpty@?$CObjectVector@UCProp@@@@QBE_NXZ ; CObjectVector<CProp>::IsEmpty
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@IsEmpty
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@IsEmpty
$LN3@IsEmpty:
	mov	DWORD PTR tv78[ebp], 0
$LN4@IsEmpty:
	mov	al, BYTE PTR tv78[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@COneMethodInfo@@QBE_NXZ ENDP			; COneMethodInfo::IsEmpty
_TEXT	ENDS
xdata$x	SEGMENT
__unwindtable$?CreateArc@NXz@NArchive@@YGPAUIInArchive@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateArc@NXz@NArchive@@YGPAUIInArchive@@XZ$0
__ehfuncinfo$?CreateArc@NXz@NArchive@@YGPAUIInArchive@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreateArc@NXz@NArchive@@YGPAUIInArchive@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv74 = -24						; size = 4
$T71743 = -20						; size = 4
$T71742 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?CreateArc@NXz@NArchive@@YGPAUIInArchive@@XZ PROC	; NArchive::NXz::CreateArc
; File c:\workspace\7z1505-src\cpp\7zip\archive\xzhandler.cpp
; Line 938
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateArc@NXz@NArchive@@YGPAUIInArchive@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-24], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	push	184					; 000000b8H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T71743[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T71743[ebp], 0
	je	SHORT $LN3@CreateArc
	mov	ecx, DWORD PTR $T71743[ebp]
	call	??0CHandler@NXz@NArchive@@QAE@XZ	; NArchive::NXz::CHandler::CHandler
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@CreateArc
$LN3@CreateArc:
	mov	DWORD PTR tv74[ebp], 0
$LN4@CreateArc:
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T71742[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T71742[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateArc@NXz@NArchive@@YGPAUIInArchive@@XZ$0:
	mov	eax, DWORD PTR $T71743[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?CreateArc@NXz@NArchive@@YGPAUIInArchive@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateArc@NXz@NArchive@@YGPAUIInArchive@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateArc@NXz@NArchive@@YGPAUIInArchive@@XZ ENDP	; NArchive::NXz::CreateArc
xdata$x	SEGMENT
__unwindtable$?CreateArcOut@NXz@NArchive@@YGPAUIOutArchive@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateArcOut@NXz@NArchive@@YGPAUIOutArchive@@XZ$0
__ehfuncinfo$?CreateArcOut@NXz@NArchive@@YGPAUIOutArchive@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreateArcOut@NXz@NArchive@@YGPAUIOutArchive@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv75 = -28						; size = 4
tv74 = -24						; size = 4
$T71753 = -20						; size = 4
$T71752 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?CreateArcOut@NXz@NArchive@@YGPAUIOutArchive@@XZ PROC	; NArchive::NXz::CreateArcOut
; Line 938
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateArcOut@NXz@NArchive@@YGPAUIOutArchive@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	push	184					; 000000b8H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T71753[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T71753[ebp], 0
	je	SHORT $LN3@CreateArcO
	mov	ecx, DWORD PTR $T71753[ebp]
	call	??0CHandler@NXz@NArchive@@QAE@XZ	; NArchive::NXz::CHandler::CHandler
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@CreateArcO
$LN3@CreateArcO:
	mov	DWORD PTR tv74[ebp], 0
$LN4@CreateArcO:
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T71752[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	cmp	DWORD PTR $T71752[ebp], 0
	je	SHORT $LN5@CreateArcO
	mov	ecx, DWORD PTR $T71752[ebp]
	add	ecx, 8
	mov	DWORD PTR tv75[ebp], ecx
	jmp	SHORT $LN6@CreateArcO
$LN5@CreateArcO:
	mov	DWORD PTR tv75[ebp], 0
$LN6@CreateArcO:
	mov	eax, DWORD PTR tv75[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateArcOut@NXz@NArchive@@YGPAUIOutArchive@@XZ$0:
	mov	eax, DWORD PTR $T71753[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?CreateArcOut@NXz@NArchive@@YGPAUIOutArchive@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateArcOut@NXz@NArchive@@YGPAUIOutArchive@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateArcOut@NXz@NArchive@@YGPAUIOutArchive@@XZ ENDP	; NArchive::NXz::CreateArcOut
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z PROC ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@CMyComPtr
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z ENDP ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ PROC	; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@2:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ENDP	; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ PROC ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ENDP ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@3:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ PROC ; CMyComPtr<ISequentialInStream>::Release, COMDAT
; _this$ = ecx
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Release@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
$LN2@Release@2:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ ENDP ; CMyComPtr<ISequentialInStream>::Release
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ PROC ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ENDP ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ PROC ; CMyComPtr<ISequentialInStream>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ ENDP ; CMyComPtr<ISequentialInStream>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ PROC ; CMyComPtr<ISequentialInStream>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ENDP ; CMyComPtr<ISequentialInStream>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z PROC ; CMyComPtr<ISequentialInStream>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@2
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@2:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@2
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@2:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ENDP ; CMyComPtr<ISequentialInStream>::operator=
_TEXT	ENDS
PUBLIC	?Size@?$CRecordVector@PAX@@QBEIXZ		; CRecordVector<void *>::Size
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Size@?$CObjectVector@UCProp@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@UCProp@@@@QBEIXZ PROC		; CObjectVector<CProp>::Size, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@UCProp@@@@QBEIXZ ENDP		; CObjectVector<CProp>::Size
_TEXT	ENDS
PUBLIC	?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ		; CRecordVector<void *>::IsEmpty
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsEmpty@?$CObjectVector@UCProp@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@?$CObjectVector@UCProp@@@@QBE_NXZ PROC		; CObjectVector<CProp>::IsEmpty, COMDAT
; _this$ = ecx
; Line 416
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ	; CRecordVector<void *>::IsEmpty
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@?$CObjectVector@UCProp@@@@QBE_NXZ ENDP		; CObjectVector<CProp>::IsEmpty
_TEXT	ENDS
PUBLIC	??0?$CRecordVector@PAX@@QAE@XZ			; CRecordVector<void *>::CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CObjectVector@UCProp@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@UCProp@@@@QAE@XZ PROC		; CObjectVector<CProp>::CObjectVector<CProp>, COMDAT
; _this$ = ecx
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@UCProp@@@@QAE@XZ ENDP		; CObjectVector<CProp>::CObjectVector<CProp>
_TEXT	ENDS
PUBLIC	??A?$CRecordVector@PAX@@QAEAAPAXI@Z		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??A?$CObjectVector@UCProp@@@@QAEAAUCProp@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCProp@@@@QAEAAUCProp@@I@Z PROC	; CObjectVector<CProp>::operator[], COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCProp@@@@QAEAAUCProp@@I@Z ENDP	; CObjectVector<CProp>::operator[]
_TEXT	ENDS
PUBLIC	??1?$CRecordVector@PAX@@QAE@XZ			; CRecordVector<void *>::~CRecordVector<void *>
PUBLIC	??_GCProp@@QAEPAXI@Z				; CProp::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@UCProp@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@UCProp@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@UCProp@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@UCProp@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T71794 = -28						; size = 4
$T71793 = -24						; size = 4
_i$70814 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@UCProp@@@@QAE@XZ PROC		; CObjectVector<CProp>::~CObjectVector<CProp>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$70814[ebp], eax
$LN2@CObjectVec:
	cmp	DWORD PTR _i$70814[ebp], 0
	je	SHORT $LN3@CObjectVec
; Line 489
	mov	eax, DWORD PTR _i$70814[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$70814[ebp], eax
	mov	ecx, DWORD PTR _i$70814[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T71794[ebp], edx
	mov	eax, DWORD PTR $T71794[ebp]
	mov	DWORD PTR $T71793[ebp], eax
	cmp	DWORD PTR $T71793[ebp], 0
	je	SHORT $LN5@CObjectVec
	push	1
	mov	ecx, DWORD PTR $T71793[ebp]
	call	??_GCProp@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec
$LN5@CObjectVec:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec:
	jmp	SHORT $LN2@CObjectVec
$LN3@CObjectVec:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@UCProp@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@UCProp@@@@QAE@XZ ENDP		; CObjectVector<CProp>::~CObjectVector<CProp>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Size@?$CObjectVector@VCOneMethodInfo@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@VCOneMethodInfo@@@@QBEIXZ PROC	; CObjectVector<COneMethodInfo>::Size, COMDAT
; _this$ = ecx
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@VCOneMethodInfo@@@@QBEIXZ ENDP	; CObjectVector<COneMethodInfo>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ PROC	; CObjectVector<COneMethodInfo>::CObjectVector<COneMethodInfo>, COMDAT
; _this$ = ecx
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ ENDP	; CObjectVector<COneMethodInfo>::CObjectVector<COneMethodInfo>
_TEXT	ENDS
PUBLIC	??A?$CRecordVector@PAX@@QBEABQAXI@Z		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??A?$CObjectVector@VCOneMethodInfo@@@@QBEABVCOneMethodInfo@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@VCOneMethodInfo@@@@QBEABVCOneMethodInfo@@I@Z PROC ; CObjectVector<COneMethodInfo>::operator[], COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@VCOneMethodInfo@@@@QBEABVCOneMethodInfo@@I@Z ENDP ; CObjectVector<COneMethodInfo>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@VCOneMethodInfo@@@@QAEAAVCOneMethodInfo@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@VCOneMethodInfo@@@@QAEAAVCOneMethodInfo@@I@Z PROC ; CObjectVector<COneMethodInfo>::operator[], COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@VCOneMethodInfo@@@@QAEAAVCOneMethodInfo@@I@Z ENDP ; CObjectVector<COneMethodInfo>::operator[]
_TEXT	ENDS
PUBLIC	??_GCOneMethodInfo@@QAEPAXI@Z			; COneMethodInfo::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T71816 = -28						; size = 4
$T71815 = -24						; size = 4
_i$70842 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ PROC	; CObjectVector<COneMethodInfo>::~CObjectVector<COneMethodInfo>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$70842[ebp], eax
$LN2@CObjectVec@2:
	cmp	DWORD PTR _i$70842[ebp], 0
	je	SHORT $LN3@CObjectVec@2
; Line 489
	mov	eax, DWORD PTR _i$70842[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$70842[ebp], eax
	mov	ecx, DWORD PTR _i$70842[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T71816[ebp], edx
	mov	eax, DWORD PTR $T71816[ebp]
	mov	DWORD PTR $T71815[ebp], eax
	cmp	DWORD PTR $T71815[ebp], 0
	je	SHORT $LN5@CObjectVec@2
	push	1
	mov	ecx, DWORD PTR $T71815[ebp]
	call	??_GCOneMethodInfo@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@2
$LN5@CObjectVec@2:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@2:
	jmp	SHORT $LN2@CObjectVec@2
$LN3@CObjectVec@2:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ ENDP	; CObjectVector<COneMethodInfo>::~CObjectVector<COneMethodInfo>
PUBLIC	?DeleteFrontal@?$CRecordVector@PAX@@QAEXI@Z	; CRecordVector<void *>::DeleteFrontal
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?DeleteFrontal@?$CObjectVector@VCOneMethodInfo@@@@QAEXI@Z
_TEXT	SEGMENT
tv73 = -20						; size = 4
$T71829 = -16						; size = 4
$T71828 = -12						; size = 4
_i$70851 = -8						; size = 4
_this$ = -4						; size = 4
_num$ = 8						; size = 4
?DeleteFrontal@?$CObjectVector@VCOneMethodInfo@@@@QAEXI@Z PROC ; CObjectVector<COneMethodInfo>::DeleteFrontal, COMDAT
; _this$ = ecx
; Line 514
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 515
	mov	DWORD PTR _i$70851[ebp], 0
	jmp	SHORT $LN3@DeleteFron
$LN2@DeleteFron:
	mov	eax, DWORD PTR _i$70851[ebp]
	add	eax, 1
	mov	DWORD PTR _i$70851[ebp], eax
$LN3@DeleteFron:
	mov	ecx, DWORD PTR _i$70851[ebp]
	cmp	ecx, DWORD PTR _num$[ebp]
	jae	SHORT $LN1@DeleteFron
; Line 516
	mov	edx, DWORD PTR _i$70851[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR $T71829[ebp], eax
	mov	ecx, DWORD PTR $T71829[ebp]
	mov	DWORD PTR $T71828[ebp], ecx
	cmp	DWORD PTR $T71828[ebp], 0
	je	SHORT $LN6@DeleteFron
	push	1
	mov	ecx, DWORD PTR $T71828[ebp]
	call	??_GCOneMethodInfo@@QAEPAXI@Z
	mov	DWORD PTR tv73[ebp], eax
	jmp	SHORT $LN7@DeleteFron
$LN6@DeleteFron:
	mov	DWORD PTR tv73[ebp], 0
$LN7@DeleteFron:
	jmp	SHORT $LN2@DeleteFron
$LN1@DeleteFron:
; Line 517
	mov	edx, DWORD PTR _num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DeleteFrontal@?$CRecordVector@PAX@@QAEXI@Z ; CRecordVector<void *>::DeleteFrontal
; Line 518
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?DeleteFrontal@?$CObjectVector@VCOneMethodInfo@@@@QAEXI@Z ENDP ; CObjectVector<COneMethodInfo>::DeleteFrontal
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIInStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UIInStream@@@@QAE@XZ PROC		; CMyComPtr<IInStream>::CMyComPtr<IInStream>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UIInStream@@@@QAE@XZ ENDP		; CMyComPtr<IInStream>::CMyComPtr<IInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIInStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIInStream@@@@QAE@XZ PROC		; CMyComPtr<IInStream>::~CMyComPtr<IInStream>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@4:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIInStream@@@@QAE@XZ ENDP		; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ PROC		; CMyComPtr<IInStream>::Release, COMDAT
; _this$ = ecx
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Release@3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
$LN2@Release@3:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ ENDP		; CMyComPtr<IInStream>::Release
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ PROC	; CMyComPtr<IInStream>::operator IInStream *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ENDP	; CMyComPtr<IInStream>::operator IInStream *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ PROC	; CMyComPtr<IInStream>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ENDP	; CMyComPtr<IInStream>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z PROC ; CMyComPtr<IInStream>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@3
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@3:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@3
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@3:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ENDP ; CMyComPtr<IInStream>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??7?$CMyComPtr@UIInStream@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??7?$CMyComPtr@UIInStream@@@@QBE_NXZ PROC		; CMyComPtr<IInStream>::operator!, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
??7?$CMyComPtr@UIInStream@@@@QBE_NXZ ENDP		; CMyComPtr<IInStream>::operator!
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@5:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ PROC ; CMyComPtr<ISequentialOutStream>::Release, COMDAT
; _this$ = ecx
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Release@4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
$LN2@Release@4:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ENDP ; CMyComPtr<ISequentialOutStream>::Release
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ PROC ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ENDP ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ PROC ; CMyComPtr<ISequentialOutStream>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ ENDP ; CMyComPtr<ISequentialOutStream>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ PROC	; CMyComPtr<ISequentialOutStream>::operator!, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ ENDP	; CMyComPtr<ISequentialOutStream>::operator!
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ PROC ; CMyComPtr<IArchiveUpdateCallbackFile>::CMyComPtr<IArchiveUpdateCallbackFile>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ENDP ; CMyComPtr<IArchiveUpdateCallbackFile>::CMyComPtr<IArchiveUpdateCallbackFile>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ PROC ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@6:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ENDP ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ PROC ; CMyComPtr<IArchiveUpdateCallbackFile>::operator IArchiveUpdateCallbackFile *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ ENDP ; CMyComPtr<IArchiveUpdateCallbackFile>::operator IArchiveUpdateCallbackFile *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAEPAPAUIArchiveUpdateCallbackFile@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAEPAPAUIArchiveUpdateCallbackFile@@XZ PROC ; CMyComPtr<IArchiveUpdateCallbackFile>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAEPAPAUIArchiveUpdateCallbackFile@@XZ ENDP ; CMyComPtr<IArchiveUpdateCallbackFile>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ PROC ; CMyComPtr<IArchiveUpdateCallbackFile>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ ENDP ; CMyComPtr<IArchiveUpdateCallbackFile>::operator->
_TEXT	ENDS
PUBLIC	??1CProp@@QAE@XZ				; CProp::~CProp
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCProp@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCProp@@QAEPAXI@Z PROC				; CProp::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CProp@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCProp@@QAEPAXI@Z ENDP				; CProp::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??_GCOneMethodInfo@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCOneMethodInfo@@QAEPAXI@Z PROC			; COneMethodInfo::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1COneMethodInfo@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@3
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCOneMethodInfo@@QAEPAXI@Z ENDP			; COneMethodInfo::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CProp@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CProp@@QAE@XZ PROC					; CProp::~CProp, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CProp@@QAE@XZ ENDP					; CProp::~CProp
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@PAX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@PAX@@QAE@XZ PROC			; CRecordVector<void *>::CRecordVector<void *>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@PAX@@QAE@XZ ENDP			; CRecordVector<void *>::CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@PAX@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@PAX@@QBEIXZ PROC			; CRecordVector<void *>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@PAX@@QBEIXZ ENDP			; CRecordVector<void *>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ PROC		; CRecordVector<void *>::IsEmpty, COMDAT
; _this$ = ecx
; Line 49
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+4], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ ENDP		; CRecordVector<void *>::IsEmpty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@PAX@@QAE@XZ
_TEXT	SEGMENT
$T71882 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@PAX@@QAE@XZ PROC			; CRecordVector<void *>::~CRecordVector<void *>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T71882[ebp], ecx
	mov	edx, DWORD PTR $T71882[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@PAX@@QAE@XZ ENDP			; CRecordVector<void *>::~CRecordVector<void *>
_TEXT	ENDS
PUBLIC	?MoveItems@?$CRecordVector@PAX@@AAEXII@Z	; CRecordVector<void *>::MoveItems
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?DeleteFrontal@?$CRecordVector@PAX@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_num$ = 8						; size = 4
?DeleteFrontal@?$CRecordVector@PAX@@QAEXI@Z PROC	; CRecordVector<void *>::DeleteFrontal, COMDAT
; _this$ = ecx
; Line 142
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 143
	cmp	DWORD PTR _num$[ebp], 0
	je	SHORT $LN2@DeleteFron@2
; Line 145
	mov	eax, DWORD PTR _num$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MoveItems@?$CRecordVector@PAX@@AAEXII@Z ; CRecordVector<void *>::MoveItems
; Line 146
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, DWORD PTR _num$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
$LN2@DeleteFron@2:
; Line 148
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?DeleteFrontal@?$CRecordVector@PAX@@QAEXI@Z ENDP	; CRecordVector<void *>::DeleteFrontal
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@PAX@@QBEABQAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@PAX@@QBEABQAXI@Z PROC		; CRecordVector<void *>::operator[], COMDAT
; _this$ = ecx
; Line 227
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@PAX@@QBEABQAXI@Z ENDP		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@PAX@@QAEAAPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@PAX@@QAEAAPAXI@Z PROC		; CRecordVector<void *>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@PAX@@QAEAAPAXI@Z ENDP		; CRecordVector<void *>::operator[]
_TEXT	ENDS
EXTRN	__imp__memmove:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?MoveItems@?$CRecordVector@PAX@@AAEXII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_destIndex$ = 8						; size = 4
_srcIndex$ = 12						; size = 4
?MoveItems@?$CRecordVector@PAX@@AAEXII@Z PROC		; CRecordVector<void *>::MoveItems, COMDAT
; _this$ = ecx
; Line 14
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 15
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR _srcIndex$[ebp]
	shl	ecx, 2
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _srcIndex$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _destIndex$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 16
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?MoveItems@?$CRecordVector@PAX@@AAEXII@Z ENDP		; CRecordVector<void *>::MoveItems
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CHandler@NXz@NArchive@@W3AGKXZ
_TEXT	SEGMENT
?Release@CHandler@NXz@NArchive@@W3AGKXZ PROC		; [thunk]:NArchive::NXz::CHandler::Release`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?Release@CHandler@NXz@NArchive@@UAGKXZ	; NArchive::NXz::CHandler::Release
?Release@CHandler@NXz@NArchive@@W3AGKXZ ENDP		; [thunk]:NArchive::NXz::CHandler::Release`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CHandler@NXz@NArchive@@W7AGKXZ
_TEXT	SEGMENT
?Release@CHandler@NXz@NArchive@@W7AGKXZ PROC		; [thunk]:NArchive::NXz::CHandler::Release`adjustor{8}', COMDAT
	sub	DWORD PTR [esp+4], 8
	jmp	?Release@CHandler@NXz@NArchive@@UAGKXZ	; NArchive::NXz::CHandler::Release
?Release@CHandler@NXz@NArchive@@W7AGKXZ ENDP		; [thunk]:NArchive::NXz::CHandler::Release`adjustor{8}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CHandler@NXz@NArchive@@WM@AGKXZ
_TEXT	SEGMENT
?Release@CHandler@NXz@NArchive@@WM@AGKXZ PROC		; [thunk]:NArchive::NXz::CHandler::Release`adjustor{12}', COMDAT
	sub	DWORD PTR [esp+4], 12			; 0000000cH
	jmp	?Release@CHandler@NXz@NArchive@@UAGKXZ	; NArchive::NXz::CHandler::Release
?Release@CHandler@NXz@NArchive@@WM@AGKXZ ENDP		; [thunk]:NArchive::NXz::CHandler::Release`adjustor{12}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CHandler@NXz@NArchive@@W3AGKXZ
_TEXT	SEGMENT
?AddRef@CHandler@NXz@NArchive@@W3AGKXZ PROC		; [thunk]:NArchive::NXz::CHandler::AddRef`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?AddRef@CHandler@NXz@NArchive@@UAGKXZ	; NArchive::NXz::CHandler::AddRef
?AddRef@CHandler@NXz@NArchive@@W3AGKXZ ENDP		; [thunk]:NArchive::NXz::CHandler::AddRef`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CHandler@NXz@NArchive@@W7AGKXZ
_TEXT	SEGMENT
?AddRef@CHandler@NXz@NArchive@@W7AGKXZ PROC		; [thunk]:NArchive::NXz::CHandler::AddRef`adjustor{8}', COMDAT
	sub	DWORD PTR [esp+4], 8
	jmp	?AddRef@CHandler@NXz@NArchive@@UAGKXZ	; NArchive::NXz::CHandler::AddRef
?AddRef@CHandler@NXz@NArchive@@W7AGKXZ ENDP		; [thunk]:NArchive::NXz::CHandler::AddRef`adjustor{8}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CHandler@NXz@NArchive@@W3AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CHandler@NXz@NArchive@@W3AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:NArchive::NXz::CHandler::QueryInterface`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?QueryInterface@CHandler@NXz@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::NXz::CHandler::QueryInterface
?QueryInterface@CHandler@NXz@NArchive@@W3AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:NArchive::NXz::CHandler::QueryInterface`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CHandler@NXz@NArchive@@WM@AGKXZ
_TEXT	SEGMENT
?AddRef@CHandler@NXz@NArchive@@WM@AGKXZ PROC		; [thunk]:NArchive::NXz::CHandler::AddRef`adjustor{12}', COMDAT
	sub	DWORD PTR [esp+4], 12			; 0000000cH
	jmp	?AddRef@CHandler@NXz@NArchive@@UAGKXZ	; NArchive::NXz::CHandler::AddRef
?AddRef@CHandler@NXz@NArchive@@WM@AGKXZ ENDP		; [thunk]:NArchive::NXz::CHandler::AddRef`adjustor{12}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CHandler@NXz@NArchive@@W7AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CHandler@NXz@NArchive@@W7AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:NArchive::NXz::CHandler::QueryInterface`adjustor{8}', COMDAT
	sub	DWORD PTR [esp+4], 8
	jmp	?QueryInterface@CHandler@NXz@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::NXz::CHandler::QueryInterface
?QueryInterface@CHandler@NXz@NArchive@@W7AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:NArchive::NXz::CHandler::QueryInterface`adjustor{8}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CHandler@NXz@NArchive@@WM@AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CHandler@NXz@NArchive@@WM@AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:NArchive::NXz::CHandler::QueryInterface`adjustor{12}', COMDAT
	sub	DWORD PTR [esp+4], 12			; 0000000cH
	jmp	?QueryInterface@CHandler@NXz@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::NXz::CHandler::QueryInterface
?QueryInterface@CHandler@NXz@NArchive@@WM@AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:NArchive::NXz::CHandler::QueryInterface`adjustor{12}'
_TEXT	ENDS
PUBLIC	??0CCrc64Gen@NXz@NArchive@@QAE@XZ		; NArchive::NXz::CCrc64Gen::CCrc64Gen
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??__Eg_Crc64TableInit@NXz@NArchive@@YAXXZ
text$yc	SEGMENT
??__Eg_Crc64TableInit@NXz@NArchive@@YAXXZ PROC		; NArchive::NXz::`dynamic initializer for 'g_Crc64TableInit'', COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\archive\xzhandler.cpp
; Line 40
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?g_Crc64TableInit@NXz@NArchive@@3UCCrc64Gen@12@A ; NArchive::NXz::g_Crc64TableInit
	call	??0CCrc64Gen@NXz@NArchive@@QAE@XZ	; NArchive::NXz::CCrc64Gen::CCrc64Gen
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__Eg_Crc64TableInit@NXz@NArchive@@YAXXZ ENDP		; NArchive::NXz::`dynamic initializer for 'g_Crc64TableInit''
text$yc	ENDS
EXTRN	@Crc64GenerateTable@0:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CCrc64Gen@NXz@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CCrc64Gen@NXz@NArchive@@QAE@XZ PROC			; NArchive::NXz::CCrc64Gen::CCrc64Gen, COMDAT
; _this$ = ecx
; Line 40
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	call	@Crc64GenerateTable@0
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CCrc64Gen@NXz@NArchive@@QAE@XZ ENDP			; NArchive::NXz::CCrc64Gen::CCrc64Gen
_TEXT	ENDS
PUBLIC	??0CRegisterArc@NXz@NArchive@@QAE@XZ		; NArchive::NXz::CRegisterArc::CRegisterArc
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??__Eg_RegisterArc@NXz@NArchive@@YAXXZ
text$yc	SEGMENT
??__Eg_RegisterArc@NXz@NArchive@@YAXXZ PROC		; NArchive::NXz::`dynamic initializer for 'g_RegisterArc'', COMDAT
; Line 938
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET _g_RegisterArc
	call	??0CRegisterArc@NXz@NArchive@@QAE@XZ	; NArchive::NXz::CRegisterArc::CRegisterArc
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__Eg_RegisterArc@NXz@NArchive@@YAXXZ ENDP		; NArchive::NXz::`dynamic initializer for 'g_RegisterArc''
text$yc	ENDS
EXTRN	?RegisterArc@@YGXPBUCArcInfo@@@Z:PROC		; RegisterArc
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CRegisterArc@NXz@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CRegisterArc@NXz@NArchive@@QAE@XZ PROC		; NArchive::NXz::CRegisterArc::CRegisterArc, COMDAT
; _this$ = ecx
; Line 938
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET _g_ArcInfo
	call	?RegisterArc@@YGXPBUCArcInfo@@@Z	; RegisterArc
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CRegisterArc@NXz@NArchive@@QAE@XZ ENDP		; NArchive::NXz::CRegisterArc::CRegisterArc
_TEXT	ENDS
PUBLIC	?g_Crc64TableInit@NXz@NArchive@@3UCCrc64Gen@12@A ; NArchive::NXz::g_Crc64TableInit
_BSS	SEGMENT
_g_RegisterArc DB 01H DUP (?)
?g_Crc64TableInit@NXz@NArchive@@3UCCrc64Gen@12@A DB 01H DUP (?) ; NArchive::NXz::g_Crc64TableInit
_BSS	ENDS
CRT$XCU	SEGMENT
_g_Crc64TableInit$initializer$ DD FLAT:??__Eg_Crc64TableInit@NXz@NArchive@@YAXXZ
_g_RegisterArc$initializer$ DD FLAT:??__Eg_RegisterArc@NXz@NArchive@@YAXXZ
CRT$XCU	ENDS
END
