; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\CPP\7zip\UI\Common\ArchiveCommandLine.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?g_CodePage@@3HA				; g_CodePage
PUBLIC	?k_IncorrectMapCommand@@3PBDB			; k_IncorrectMapCommand
CONST	SEGMENT
$SG76863 DB	'0-', 00H
	ORG $+1
$SG76865 DB	'sea', 00H
$SG76867 DB	'012', 00H
$SG76887 DB	'asut', 00H
	ORG $+3
_k_OverwriteModes DD 01H
	DD	02H
	DD	03H
	DD	04H
$SG76890 DB	'?', 00H
	ORG $+2
$SG76891 DB	'h', 00H
	ORG $+2
$SG76892 DB	'-help', 00H
	ORG $+2
$SG76893 DB	'ba', 00H
	ORG $+1
$SG76894 DB	'bd', 00H
	ORG $+1
$SG76895 DB	'bt', 00H
	ORG $+1
$SG76896 DB	'bb', 00H
	ORG $+1
$SG76897 DB	'bso', 00H
$SG76942 DB	'p', 00H
	ORG $+2
$SG76941 DB	'stl', 00H
$SG76940 DB	'sdel', 00H
	ORG $+3
$SG76939 DB	'snc', 00H
$SG76938 DB	'snr', 00H
$SG76937 DB	'sns', 00H
$SG76936 DB	'sni', 00H
$SG76935 DB	'snl', 00H
$SG76934 DB	'snh', 00H
$SG76933 DB	'spf', 00H
$SG76932 DB	'spe', 00H
$SG76931 DB	'spd', 00H
$SG76930 DB	'sa', 00H
	ORG $+1
$SG76929 DB	'ssc', 00H
$SG76928 DB	'ssw', 00H
$SG76927 DB	'slt', 00H
$SG76926 DB	'scc', 00H
$SG76925 DB	'scs', 00H
$SG76924 DB	'slp', 00H
$SG76923 DB	'so', 00H
	ORG $+1
$SG76922 DB	'si', 00H
	ORG $+1
$SG76921 DB	'scrc', 00H
	ORG $+3
$SG76920 DB	'seml', 00H
	ORG $+3
$SG76919 DB	'sfx', 00H
$SG76918 DB	'stm', 00H
$SG76917 DB	'r', 00H
	ORG $+2
$SG76916 DB	'v', 00H
	ORG $+2
$SG76915 DB	'u', 00H
	ORG $+2
$SG76914 DB	'an', 00H
	ORG $+1
$SG76913 DB	'ax', 00H
	ORG $+1
$SG76912 DB	'ai', 00H
	ORG $+1
$SG76911 DB	'x', 00H
	ORG $+2
$SG76910 DB	'i', 00H
	ORG $+2
$SG76909 DB	'w', 00H
	ORG $+2
$SG76908 DB	'o', 00H
	ORG $+2
$SG76907 DB	'm', 00H
	ORG $+2
$SG76906 DB	'stx', 00H
$SG76905 DB	't', 00H
	ORG $+2
$SG76904 DB	'ao', 00H
	ORG $+1
$SG76903 DB	'ad', 00H
	ORG $+1
$SG76902 DB	'y', 00H
	ORG $+2
$SG76901 DB	'bsp', 00H
$SG76900 DB	'bse', 00H
$SG76969 DB	'*', 00H, 00H, 00H
$SG76973 DB	'Cannot find listfile', 00H
	ORG $+3
$SG76977 DB	'I won''t write compressed data to a terminal', 00H
$SG76975 DB	'Incorrect item in listfile.', 0aH, 'Check charset encodi'
	DB	'ng and -scs switch.', 00H
$SG76979 DB	'I won''t write data and program''s messages to same term'
	DB	'inal', 00H
	ORG $+1
$SG76981 DB	'Empty file path', 00H
$SG76983 DB	'Cannot find archive', 00H
$SG77019 DB	'audtexlbih', 00H
	ORG $+1
$SG77063 DB	'-r', 00H
	ORG $+1
$SG77066 DB	'-r0', 00H
$SG77075 DB	'Unsupported rename command:', 00H
$SG77143 DB	'There is no second file name for rename pair:', 00H
	ORG $+2
$SG77170 DB	'Incorrect Map command', 00H
	ORG $+2
$SG77195 DB	'Unsupported Map data size', 00H
	ORG $+2
$SG77201 DB	'Can not open mapping', 00H
	ORG $+3
$SG77205 DB	'MapViewOfFile error', 00H
$SG77212 DB	'Unsupported Map data', 00H
	ORG $+3
$SG77224 DB	'Map data error', 00H
	ORG $+1
$SG77247 DB	'Too short switch', 00H
	ORG $+3
$SG77256 DB	'Too short switch', 00H
	ORG $+3
$SG77265 DB	'Incorrect wildcard type marker', 00H
	ORG $+1
$SG77331 DB	'p', 00H, 'q', 00H, 'r', 00H, 'x', 00H, 'y', 00H, 'z', 00H
	DB	'w', 00H, 00H, 00H
_kUpdatePairStateNotSupportedActions DD 02H
	DD	02H
	DD	01H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
$SG77335 DB	'-', 00H
	ORG $+2
$SG77364 DB	'incorrect update switch command', 00H
$SG77420 DB	'Incorrect volume size:', 00H
	ORG $+1
$SG77465 DB	'Unsupported switch postfix -bb', 00H
	ORG $+1
$SG77480 DB	'Unsupported switch postfix -stm', 00H
$SG77492 DB	'utf-8', 00H
	ORG $+2
$SG77493 DB	'win', 00H
$SG77494 DB	'dos', 00H
$SG77495 DB	'utf-16le', 00H
	ORG $+3
$SG77496 DB	'utf-16be', 00H
	ORG $+3
_g_CodePagePairs DD FLAT:$SG77492
	DD	0fde9H
	DD	FLAT:$SG77493
	DD	00H
	DD	FLAT:$SG77494
	DD	01H
	DD	FLAT:$SG77495
	DD	04b0H
	DD	FLAT:$SG77496
	DD	04b1H
$SG77519 DB	'Unsupported charset:', 00H
	ORG $+3
$SG77562 DB	'Duplicate archive path:', 00H
$SG77584 DB	'The command must be spcified', 00H
	ORG $+3
$SG77588 DB	'Unsupported command:', 00H
	ORG $+3
$SG77597 DB	'2', 00H, 00H, 00H
$SG77601 DB	'Unsupported -spf:', 00H
	ORG $+2
$SG77623 DB	'Cannot find archive name', 00H
	ORG $+3
$SG77627 DB	'Archive name cannot by empty', 00H
	ORG $+3
$SG77640 DB	'Cannot use absolute pathnames for this command', 00H
	ORG $+1
$SG77663 DB	'-ai switch is not supported for this command', 00H
	ORG $+3
$SG77672 DB	'stdout mode and email mode cannot be combined', 00H
	ORG $+2
$SG77681 DB	'Only one archive can be created with rename command', 00H
$SG77688 DB	'Incorrect Number of benmchmark iterations', 00H
CONST	ENDS
_DATA	SEGMENT
?g_CodePage@@3HA DD 0ffffffffH				; g_CodePage
_kRecursedPostCharSet DD FLAT:$SG76863
_k_ArcNameMode_PostCharSet DD FLAT:$SG76865
_k_Stream_PostCharSet DD FLAT:$SG76867
_kOverwritePostCharSet DD FLAT:$SG76887
_kUniversalWildcard DD FLAT:$SG76969
_kCannotFindListFile DD FLAT:$SG76973
_kIncorrectListFile DD FLAT:$SG76975
_kTerminalOutError DD FLAT:$SG76977
_kSameTerminalError DD FLAT:$SG76979
_kEmptyFilePath DD FLAT:$SG76981
_kCannotFindArchive DD FLAT:$SG76983
_g_Commands DD	FLAT:$SG77019
?k_IncorrectMapCommand@@3PBDB DD FLAT:$SG77170		; k_IncorrectMapCommand
_kUpdatePairStateIDSet DD FLAT:$SG77331
_kUpdateIgnoreItselfPostStringID DD FLAT:$SG77335
_DATA	ENDS
PUBLIC	??1AString@@QAE@XZ				; AString::~AString
PUBLIC	??1UString@@QAE@XZ				; UString::~UString
PUBLIC	??0CArcCmdLineException@@QAE@PBDPB_W@Z		; CArcCmdLineException::CArcCmdLineException
EXTRN	??YUString@@QAEAAV0@PB_W@Z:PROC			; UString::operator+=
EXTRN	?Add_LF@UString@@QAEXXZ:PROC			; UString::Add_LF
EXTRN	??YUString@@QAEAAV0@ABV0@@Z:PROC		; UString::operator+=
EXTRN	?MultiByteToUnicodeString@@YG?AVUString@@ABVAString@@I@Z:PROC ; MultiByteToUnicodeString
EXTRN	??0AString@@QAE@PBD@Z:PROC			; AString::AString
EXTRN	??0UString@@QAE@XZ:PROC				; UString::UString
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
xdata$x	SEGMENT
__unwindtable$??0CArcCmdLineException@@QAE@PBDPB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CArcCmdLineException@@QAE@PBDPB_W@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CArcCmdLineException@@QAE@PBDPB_W@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CArcCmdLineException@@QAE@PBDPB_W@Z$2
__ehfuncinfo$??0CArcCmdLineException@@QAE@PBDPB_W@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0CArcCmdLineException@@QAE@PBDPB_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\archivecommandline.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
tv138 = -48						; size = 4
tv84 = -44						; size = 4
$T78970 = -40						; size = 12
$T78969 = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_a$ = 8							; size = 4
_u$ = 12						; size = 4
??0CArcCmdLineException@@QAE@PBDPB_W@Z PROC		; CArcCmdLineException::CArcCmdLineException
; _this$ = ecx
; Line 63
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CArcCmdLineException@@QAE@PBDPB_W@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-48], eax
	mov	DWORD PTR [ebp-44], eax
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 64
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T78969[ebp]
	call	??0AString@@QAE@PBD@Z			; AString::AString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	push	0
	lea	ecx, DWORD PTR $T78969[ebp]
	push	ecx
	lea	edx, DWORD PTR $T78970[ebp]
	push	edx
	call	?MultiByteToUnicodeString@@YG?AVUString@@ABVAString@@I@Z ; MultiByteToUnicodeString
	mov	DWORD PTR tv84[ebp], eax
	mov	eax, DWORD PTR tv84[ebp]
	mov	DWORD PTR tv138[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR tv138[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??YUString@@QAEAAV0@ABV0@@Z		; UString::operator+=
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T78970[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T78969[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
; Line 65
	cmp	DWORD PTR _u$[ebp], 0
	je	SHORT $LN2@CArcCmdLin
; Line 67
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add_LF@UString@@QAEXXZ			; UString::Add_LF
; Line 68
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??YUString@@QAEAAV0@PB_W@Z		; UString::operator+=
$LN2@CArcCmdLin:
; Line 70
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0CArcCmdLineException@@QAE@PBDPB_W@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??0CArcCmdLineException@@QAE@PBDPB_W@Z$1:
	lea	ecx, DWORD PTR $T78969[ebp]
	jmp	??1AString@@QAE@XZ			; AString::~AString
__unwindfunclet$??0CArcCmdLineException@@QAE@PBDPB_W@Z$2:
	lea	ecx, DWORD PTR $T78970[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$??0CArcCmdLineException@@QAE@PBDPB_W@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CArcCmdLineException@@QAE@PBDPB_W@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CArcCmdLineException@@QAE@PBDPB_W@Z ENDP		; CArcCmdLineException::CArcCmdLineException
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1AString@@QAE@XZ
_TEXT	SEGMENT
$T78991 = -8						; size = 4
_this$ = -4						; size = 4
??1AString@@QAE@XZ PROC					; AString::~AString, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 232
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T78991[ebp], ecx
	mov	edx, DWORD PTR $T78991[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1AString@@QAE@XZ ENDP					; AString::~AString
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1UString@@QAE@XZ
_TEXT	SEGMENT
$T78994 = -8						; size = 4
_this$ = -4						; size = 4
??1UString@@QAE@XZ PROC					; UString::~UString, COMDAT
; _this$ = ecx
; Line 470
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T78994[ebp], ecx
	mov	edx, DWORD PTR $T78994[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1UString@@QAE@XZ ENDP					; UString::~UString
_TEXT	ENDS
PUBLIC	?IsFromExtractGroup@CArcCommand@@QBE_NXZ	; CArcCommand::IsFromExtractGroup
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv64 = -8						; size = 4
_this$ = -4						; size = 4
?IsFromExtractGroup@CArcCommand@@QBE_NXZ PROC		; CArcCommand::IsFromExtractGroup
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\archivecommandline.cpp
; Line 279
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 280
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 3
	jl	SHORT $LN2@IsFromExtr
	cmp	DWORD PTR tv64[ebp], 5
	jle	SHORT $LN1@IsFromExtr
	jmp	SHORT $LN2@IsFromExtr
$LN1@IsFromExtr:
; Line 285
	mov	al, 1
	jmp	SHORT $LN4@IsFromExtr
$LN2@IsFromExtr:
; Line 287
	xor	al, al
$LN4@IsFromExtr:
; Line 288
	mov	esp, ebp
	pop	ebp
	ret	0
?IsFromExtractGroup@CArcCommand@@QBE_NXZ ENDP		; CArcCommand::IsFromExtractGroup
_TEXT	ENDS
PUBLIC	?GetPathMode@CArcCommand@@QBE?AW4EEnum@NPathMode@NExtract@@XZ ; CArcCommand::GetPathMode
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv64 = -8						; size = 4
_this$ = -4						; size = 4
?GetPathMode@CArcCommand@@QBE?AW4EEnum@NPathMode@NExtract@@XZ PROC ; CArcCommand::GetPathMode
; _this$ = ecx
; Line 291
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 292
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 3
	je	SHORT $LN1@GetPathMod
	cmp	DWORD PTR tv64[ebp], 5
	je	SHORT $LN1@GetPathMod
	jmp	SHORT $LN2@GetPathMod
$LN1@GetPathMod:
; Line 296
	xor	eax, eax
	jmp	SHORT $LN4@GetPathMod
$LN2@GetPathMod:
; Line 298
	mov	eax, 2
$LN4@GetPathMod:
; Line 299
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPathMode@CArcCommand@@QBE?AW4EEnum@NPathMode@NExtract@@XZ ENDP ; CArcCommand::GetPathMode
_TEXT	ENDS
PUBLIC	?IsFromUpdateGroup@CArcCommand@@QBE_NXZ		; CArcCommand::IsFromUpdateGroup
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv64 = -8						; size = 4
_this$ = -4						; size = 4
?IsFromUpdateGroup@CArcCommand@@QBE_NXZ PROC		; CArcCommand::IsFromUpdateGroup
; _this$ = ecx
; Line 302
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 303
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 0
	jl	SHORT $LN2@IsFromUpda
	cmp	DWORD PTR tv64[ebp], 2
	jle	SHORT $LN1@IsFromUpda
	cmp	DWORD PTR tv64[ebp], 10			; 0000000aH
	je	SHORT $LN1@IsFromUpda
	jmp	SHORT $LN2@IsFromUpda
$LN1@IsFromUpda:
; Line 309
	mov	al, 1
	jmp	SHORT $LN4@IsFromUpda
$LN2@IsFromUpda:
; Line 311
	xor	al, al
$LN4@IsFromUpda:
; Line 312
	mov	esp, ebp
	pop	ebp
	ret	0
?IsFromUpdateGroup@CArcCommand@@QBE_NXZ ENDP		; CArcCommand::IsFromUpdateGroup
_TEXT	ENDS
PUBLIC	??A?$CObjectVector@UCPair@NWildcard@@@@QAEAAUCPair@NWildcard@@I@Z ; CObjectVector<NWildcard::CPair>::operator[]
PUBLIC	?Size@?$CObjectVector@UCPair@NWildcard@@@@QBEIXZ ; CObjectVector<NWildcard::CPair>::Size
PUBLIC	?ConvertToLongNames@@YGXAAVCCensor@NWildcard@@@Z ; ConvertToLongNames
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_pair$77329 = -8					; size = 4
_i$77325 = -4						; size = 4
_censor$ = 8						; size = 4
?ConvertToLongNames@@YGXAAVCCensor@NWildcard@@@Z PROC	; ConvertToLongNames
; Line 672
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 673
	mov	DWORD PTR _i$77325[ebp], 0
	jmp	SHORT $LN3@ConvertToL
$LN2@ConvertToL:
	mov	eax, DWORD PTR _i$77325[ebp]
	add	eax, 1
	mov	DWORD PTR _i$77325[ebp], eax
$LN3@ConvertToL:
	mov	ecx, DWORD PTR _censor$[ebp]
	call	?Size@?$CObjectVector@UCPair@NWildcard@@@@QBEIXZ ; CObjectVector<NWildcard::CPair>::Size
	cmp	DWORD PTR _i$77325[ebp], eax
	jae	SHORT $LN4@ConvertToL
; Line 675
	mov	ecx, DWORD PTR _i$77325[ebp]
	push	ecx
	mov	ecx, DWORD PTR _censor$[ebp]
	call	??A?$CObjectVector@UCPair@NWildcard@@@@QAEAAUCPair@NWildcard@@I@Z ; CObjectVector<NWildcard::CPair>::operator[]
	mov	DWORD PTR _pair$77329[ebp], eax
; Line 676
	mov	edx, DWORD PTR _pair$77329[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	eax, DWORD PTR _pair$77329[ebp]
	push	eax
	call	?ConvertToLongNames@@YGXABVUString@@AAVCCensorNode@NWildcard@@@Z ; ConvertToLongNames
; Line 677
	jmp	SHORT $LN2@ConvertToL
$LN4@ConvertToL:
; Line 678
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ConvertToLongNames@@YGXAAVCCensor@NWildcard@@@Z ENDP	; ConvertToLongNames
_TEXT	ENDS
PUBLIC	??H@YG?AVUString@@ABV0@_W@Z			; operator+
PUBLIC	?Delete@?$CObjectVector@VCCensorNode@NWildcard@@@@QAEXI@Z ; CObjectVector<NWildcard::CCensorNode>::Delete
PUBLIC	??Y?$CObjectVector@UCItem@NWildcard@@@@QAEAAV0@ABV0@@Z ; CObjectVector<NWildcard::CItem>::operator+=
PUBLIC	?IsEqualTo_NoCase@UString@@QBE_NPB_W@Z		; UString::IsEqualTo_NoCase
PUBLIC	??BUString@@QBEPB_WXZ				; UString::operator wchar_t const *
PUBLIC	?IsEmpty@UString@@QBE_NXZ			; UString::IsEmpty
PUBLIC	??A?$CObjectVector@VCCensorNode@NWildcard@@@@QAEAAVCCensorNode@NWildcard@@I@Z ; CObjectVector<NWildcard::CCensorNode>::operator[]
PUBLIC	?Size@?$CObjectVector@VCCensorNode@NWildcard@@@@QBEIXZ ; CObjectVector<NWildcard::CCensorNode>::Size
EXTRN	??H@YG?AVUString@@ABV0@0@Z:PROC			; operator+
EXTRN	?IsDriveColonName@NWildcard@@YG_NPB_W@Z:PROC	; NWildcard::IsDriveColonName
xdata$x	SEGMENT
__unwindtable$?ConvertToLongNames@@YGXABVUString@@AAVCCensorNode@NWildcard@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ConvertToLongNames@@YGXABVUString@@AAVCCensorNode@NWildcard@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?ConvertToLongNames@@YGXABVUString@@AAVCCensorNode@NWildcard@@@Z$1
__ehfuncinfo$?ConvertToLongNames@@YGXABVUString@@AAVCCensorNode@NWildcard@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?ConvertToLongNames@@YGXABVUString@@AAVCCensorNode@NWildcard@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv190 = -76						; size = 4
tv192 = -72						; size = 4
tv188 = -68						; size = 4
tv191 = -64						; size = 4
$T79002 = -60						; size = 12
$T79001 = -48						; size = 12
_nextNode$77318 = -36					; size = 4
_nextNode2$77312 = -32					; size = 4
_j$77308 = -28						; size = 4
_nextNode1$77307 = -24					; size = 4
_name$77302 = -20					; size = 4
_i$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_prefix$ = 8						; size = 4
_node$ = 12						; size = 4
?ConvertToLongNames@@YGXABVUString@@AAVCCensorNode@NWildcard@@@Z PROC ; ConvertToLongNames
; Line 636
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ConvertToLongNames@@YGXABVUString@@AAVCCensorNode@NWildcard@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 64					; 00000040H
	push	edi
	lea	edi, DWORD PTR [ebp-76]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 637
	mov	eax, DWORD PTR _node$[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	mov	ecx, DWORD PTR _prefix$[ebp]
	push	ecx
	call	?ConvertToLongNames@@YGXABVUString@@AAV?$CObjectVector@UCItem@NWildcard@@@@@Z ; ConvertToLongNames
; Line 638
	mov	edx, DWORD PTR _node$[ebp]
	add	edx, 40					; 00000028H
	push	edx
	mov	eax, DWORD PTR _prefix$[ebp]
	push	eax
	call	?ConvertToLongNames@@YGXABVUString@@AAV?$CObjectVector@UCItem@NWildcard@@@@@Z ; ConvertToLongNames
; Line 640
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN14@ConvertToL@2
$LN13@ConvertToL@2:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN14@ConvertToL@2:
	mov	ecx, DWORD PTR _node$[ebp]
	add	ecx, 16					; 00000010H
	call	?Size@?$CObjectVector@VCCensorNode@NWildcard@@@@QBEIXZ ; CObjectVector<NWildcard::CCensorNode>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN12@ConvertToL@2
; Line 642
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _node$[ebp]
	add	ecx, 16					; 00000010H
	call	??A?$CObjectVector@VCCensorNode@NWildcard@@@@QAEAAVCCensorNode@NWildcard@@I@Z ; CObjectVector<NWildcard::CCensorNode>::operator[]
	add	eax, 4
	mov	DWORD PTR _name$77302[ebp], eax
; Line 643
	mov	ecx, DWORD PTR _prefix$[ebp]
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN11@ConvertToL@2
	mov	ecx, DWORD PTR _name$77302[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	?IsDriveColonName@NWildcard@@YG_NPB_W@Z	; NWildcard::IsDriveColonName
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN11@ConvertToL@2
; Line 644
	jmp	SHORT $LN13@ConvertToL@2
$LN11@ConvertToL@2:
; Line 645
	mov	edx, DWORD PTR _name$77302[ebp]
	push	edx
	mov	eax, DWORD PTR _prefix$[ebp]
	push	eax
	call	?ConvertToLongName@@YGXABVUString@@AAV1@@Z ; ConvertToLongName
; Line 646
	jmp	SHORT $LN13@ConvertToL@2
$LN12@ConvertToL@2:
; Line 648
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN10@ConvertToL@2
$LN9@ConvertToL@2:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN10@ConvertToL@2:
	mov	ecx, DWORD PTR _node$[ebp]
	add	ecx, 16					; 00000010H
	call	?Size@?$CObjectVector@VCCensorNode@NWildcard@@@@QBEIXZ ; CObjectVector<NWildcard::CCensorNode>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	$LN8@ConvertToL@2
; Line 650
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _node$[ebp]
	add	ecx, 16					; 00000010H
	call	??A?$CObjectVector@VCCensorNode@NWildcard@@@@QAEAAVCCensorNode@NWildcard@@I@Z ; CObjectVector<NWildcard::CCensorNode>::operator[]
	mov	DWORD PTR _nextNode1$77307[ebp], eax
; Line 651
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$77308[ebp], eax
$LN7@ConvertToL@2:
	mov	ecx, DWORD PTR _node$[ebp]
	add	ecx, 16					; 00000010H
	call	?Size@?$CObjectVector@VCCensorNode@NWildcard@@@@QBEIXZ ; CObjectVector<NWildcard::CCensorNode>::Size
	cmp	DWORD PTR _j$77308[ebp], eax
	jae	SHORT $LN6@ConvertToL@2
; Line 653
	mov	ecx, DWORD PTR _j$77308[ebp]
	push	ecx
	mov	ecx, DWORD PTR _node$[ebp]
	add	ecx, 16					; 00000010H
	call	??A?$CObjectVector@VCCensorNode@NWildcard@@@@QAEAAVCCensorNode@NWildcard@@I@Z ; CObjectVector<NWildcard::CCensorNode>::operator[]
	mov	DWORD PTR _nextNode2$77312[ebp], eax
; Line 654
	mov	ecx, DWORD PTR _nextNode2$77312[ebp]
	add	ecx, 4
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	mov	ecx, DWORD PTR _nextNode1$77307[ebp]
	add	ecx, 4
	call	?IsEqualTo_NoCase@UString@@QBE_NPB_W@Z	; UString::IsEqualTo_NoCase
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN5@ConvertToL@2
; Line 656
	mov	eax, DWORD PTR _nextNode2$77312[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	mov	ecx, DWORD PTR _nextNode1$77307[ebp]
	add	ecx, 28					; 0000001cH
	call	??Y?$CObjectVector@UCItem@NWildcard@@@@QAEAAV0@ABV0@@Z ; CObjectVector<NWildcard::CItem>::operator+=
; Line 657
	mov	ecx, DWORD PTR _nextNode2$77312[ebp]
	add	ecx, 40					; 00000028H
	push	ecx
	mov	ecx, DWORD PTR _nextNode1$77307[ebp]
	add	ecx, 40					; 00000028H
	call	??Y?$CObjectVector@UCItem@NWildcard@@@@QAEAAV0@ABV0@@Z ; CObjectVector<NWildcard::CItem>::operator+=
; Line 658
	mov	edx, DWORD PTR _j$77308[ebp]
	push	edx
	mov	ecx, DWORD PTR _node$[ebp]
	add	ecx, 16					; 00000010H
	call	?Delete@?$CObjectVector@VCCensorNode@NWildcard@@@@QAEXI@Z ; CObjectVector<NWildcard::CCensorNode>::Delete
; Line 660
	jmp	SHORT $LN4@ConvertToL@2
$LN5@ConvertToL@2:
; Line 661
	mov	eax, DWORD PTR _j$77308[ebp]
	add	eax, 1
	mov	DWORD PTR _j$77308[ebp], eax
$LN4@ConvertToL@2:
; Line 662
	jmp	SHORT $LN7@ConvertToL@2
$LN6@ConvertToL@2:
; Line 663
	jmp	$LN9@ConvertToL@2
$LN8@ConvertToL@2:
; Line 664
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@ConvertToL@2
$LN2@ConvertToL@2:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@ConvertToL@2:
	mov	ecx, DWORD PTR _node$[ebp]
	add	ecx, 16					; 00000010H
	call	?Size@?$CObjectVector@VCCensorNode@NWildcard@@@@QBEIXZ ; CObjectVector<NWildcard::CCensorNode>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN15@ConvertToL@2
; Line 666
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _node$[ebp]
	add	ecx, 16					; 00000010H
	call	??A?$CObjectVector@VCCensorNode@NWildcard@@@@QAEAAVCCensorNode@NWildcard@@I@Z ; CObjectVector<NWildcard::CCensorNode>::operator[]
	mov	DWORD PTR _nextNode$77318[ebp], eax
; Line 667
	mov	eax, DWORD PTR _nextNode$77318[ebp]
	push	eax
	push	92					; 0000005cH
	mov	ecx, DWORD PTR _nextNode$77318[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _prefix$[ebp]
	push	edx
	lea	eax, DWORD PTR $T79001[ebp]
	push	eax
	call	??H@YG?AVUString@@ABV0@0@Z		; operator+
	mov	DWORD PTR tv191[ebp], eax
	mov	ecx, DWORD PTR tv191[ebp]
	mov	DWORD PTR tv188[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR tv188[ebp]
	push	edx
	lea	eax, DWORD PTR $T79002[ebp]
	push	eax
	call	??H@YG?AVUString@@ABV0@_W@Z		; operator+
	mov	DWORD PTR tv192[ebp], eax
	mov	ecx, DWORD PTR tv192[ebp]
	mov	DWORD PTR tv190[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR tv190[ebp]
	push	edx
	call	?ConvertToLongNames@@YGXABVUString@@AAVCCensorNode@NWildcard@@@Z ; ConvertToLongNames
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T79002[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T79001[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
; Line 668
	jmp	$LN2@ConvertToL@2
$LN15@ConvertToL@2:
; Line 669
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 76					; 0000004cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ConvertToLongNames@@YGXABVUString@@AAVCCensorNode@NWildcard@@@Z$0:
	lea	ecx, DWORD PTR $T79001[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?ConvertToLongNames@@YGXABVUString@@AAVCCensorNode@NWildcard@@@Z$1:
	lea	ecx, DWORD PTR $T79002[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$?ConvertToLongNames@@YGXABVUString@@AAVCCensorNode@NWildcard@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ConvertToLongNames@@YGXABVUString@@AAVCCensorNode@NWildcard@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ConvertToLongNames@@YGXABVUString@@AAVCCensorNode@NWildcard@@@Z ENDP ; ConvertToLongNames
EXTRN	??0UString@@AAE@ABV0@_W@Z:PROC			; UString::UString
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??H@YG?AVUString@@ABV0@_W@Z
_TEXT	SEGMENT
$T79011 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_s$ = 12						; size = 4
_c$ = 16						; size = 2
??H@YG?AVUString@@ABV0@_W@Z PROC			; operator+, COMDAT
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 437
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR $T79011[ebp], 0
	movzx	eax, WORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0UString@@AAE@ABV0@_W@Z		; UString::UString
	mov	edx, DWORD PTR $T79011[ebp]
	or	edx, 1
	mov	DWORD PTR $T79011[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??H@YG?AVUString@@ABV0@_W@Z ENDP			; operator+
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsEmpty@UString@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@UString@@QBE_NXZ PROC				; UString::IsEmpty, COMDAT
; _this$ = ecx
; Line 473
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+4], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@UString@@QBE_NXZ ENDP				; UString::IsEmpty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??BUString@@QBEPB_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BUString@@QBEPB_WXZ PROC				; UString::operator wchar_t const *, COMDAT
; _this$ = ecx
; Line 476
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??BUString@@QBEPB_WXZ ENDP				; UString::operator wchar_t const *
_TEXT	ENDS
EXTRN	?StringsAreEqualNoCase@@YG_NPB_W0@Z:PROC	; StringsAreEqualNoCase
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsEqualTo_NoCase@UString@@QBE_NPB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
?IsEqualTo_NoCase@UString@@QBE_NPB_W@Z PROC		; UString::IsEqualTo_NoCase, COMDAT
; _this$ = ecx
; Line 548
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	?StringsAreEqualNoCase@@YG_NPB_W0@Z	; StringsAreEqualNoCase
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?IsEqualTo_NoCase@UString@@QBE_NPB_W@Z ENDP		; UString::IsEqualTo_NoCase
_TEXT	ENDS
PUBLIC	??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ	; NWindows::NFile::NFind::CFileInfo::~CFileInfo
PUBLIC	??0CFileInfo@NFind@NFile@NWindows@@QAE@XZ	; NWindows::NFile::NFind::CFileInfo::CFileInfo
EXTRN	??4UString@@QAEAAV0@ABV0@@Z:PROC		; UString::operator=
EXTRN	?Find@CFileInfo@NFind@NFile@NWindows@@QAE_NPB_W@Z:PROC ; NWindows::NFile::NFind::CFileInfo::Find
EXTRN	?IsDevicePath@NName@NFile@NWindows@@YG_NPB_W@Z:PROC ; NWindows::NFile::NName::IsDevicePath
EXTRN	?DoesNameContainWildcard@@YG_NABVUString@@@Z:PROC ; DoesNameContainWildcard
EXTRN	@_RTC_CheckStackVars@8:PROC
xdata$x	SEGMENT
__unwindtable$?ConvertToLongName@@YGXABVUString@@AAV1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ConvertToLongName@@YGXABVUString@@AAV1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?ConvertToLongName@@YGXABVUString@@AAV1@@Z$1
__ehfuncinfo$?ConvertToLongName@@YGXABVUString@@AAV1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?ConvertToLongName@@YGXABVUString@@AAV1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
_path$ = -92						; size = 12
_fi$ = -72						; size = 56
__$EHRec$ = -12						; size = 12
_prefix$ = 8						; size = 4
_name$ = 12						; size = 4
?ConvertToLongName@@YGXABVUString@@AAV1@@Z PROC		; ConvertToLongName
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\archivecommandline.cpp
; Line 609
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ConvertToLongName@@YGXABVUString@@AAV1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	edi
	lea	edi, DWORD PTR [ebp-96]
	mov	ecx, 21					; 00000015H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 610
	mov	ecx, DWORD PTR _name$[ebp]
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@ConvertToL@3
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	?DoesNameContainWildcard@@YG_NABVUString@@@Z ; DoesNameContainWildcard
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN4@ConvertToL@3
$LN3@ConvertToL@3:
; Line 611
	jmp	$LN5@ConvertToL@3
$LN4@ConvertToL@3:
; Line 612
	lea	ecx, DWORD PTR _fi$[ebp]
	call	??0CFileInfo@NFind@NFile@NWindows@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 613
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _prefix$[ebp]
	push	ecx
	lea	edx, DWORD PTR _path$[ebp]
	push	edx
	call	??H@YG?AVUString@@ABV0@0@Z		; operator+
	mov	BYTE PTR __$EHRec$[ebp+8], 1
; Line 615
	lea	ecx, DWORD PTR _path$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	?IsDevicePath@NName@NFile@NWindows@@YG_NPB_W@Z ; NWindows::NFile::NName::IsDevicePath
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@ConvertToL@3
; Line 616
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _path$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _fi$[ebp]
	call	??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ
	jmp	SHORT $LN5@ConvertToL@3
$LN2@ConvertToL@3:
; Line 618
	lea	ecx, DWORD PTR _path$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	lea	ecx, DWORD PTR _fi$[ebp]
	call	?Find@CFileInfo@NFind@NFile@NWindows@@QAE_NPB_W@Z ; NWindows::NFile::NFind::CFileInfo::Find
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@ConvertToL@3
; Line 619
	lea	edx, DWORD PTR _fi$[ebp+40]
	push	edx
	mov	ecx, DWORD PTR _name$[ebp]
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
$LN1@ConvertToL@3:
; Line 620
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _path$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _fi$[ebp]
	call	??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ
$LN5@ConvertToL@3:
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@ConvertToL@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 96					; 00000060H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN13@ConvertToL@3:
	DD	2
	DD	$LN12@ConvertToL@3
$LN12@ConvertToL@3:
	DD	-72					; ffffffb8H
	DD	56					; 00000038H
	DD	$LN9@ConvertToL@3
	DD	-92					; ffffffa4H
	DD	12					; 0000000cH
	DD	$LN10@ConvertToL@3
$LN10@ConvertToL@3:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN9@ConvertToL@3:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ConvertToLongName@@YGXABVUString@@AAV1@@Z$0:
	lea	ecx, DWORD PTR _fi$[ebp]
	jmp	??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ
__unwindfunclet$?ConvertToLongName@@YGXABVUString@@AAV1@@Z$1:
	lea	ecx, DWORD PTR _path$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$?ConvertToLongName@@YGXABVUString@@AAV1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-92]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ConvertToLongName@@YGXABVUString@@AAV1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ConvertToLongName@@YGXABVUString@@AAV1@@Z ENDP		; ConvertToLongName
PUBLIC	??0CFileInfoBase@NFind@NFile@NWindows@@QAE@XZ	; NWindows::NFile::NFind::CFileInfoBase::CFileInfoBase
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CFileInfo@NFind@NFile@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CFileInfo@NFind@NFile@NWindows@@QAE@XZ PROC		; NWindows::NFile::NFind::CFileInfo::CFileInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CFileInfoBase@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfoBase::CFileInfoBase
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CFileInfo@NFind@NFile@NWindows@@QAE@XZ ENDP		; NWindows::NFile::NFind::CFileInfo::CFileInfo
_TEXT	ENDS
EXTRN	?ClearBase@CFileInfoBase@NFind@NFile@NWindows@@QAEXXZ:PROC ; NWindows::NFile::NFind::CFileInfoBase::ClearBase
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CFileInfoBase@NFind@NFile@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CFileInfoBase@NFind@NFile@NWindows@@QAE@XZ PROC	; NWindows::NFile::NFind::CFileInfoBase::CFileInfoBase, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\filefind.h
; Line 44
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearBase@CFileInfoBase@NFind@NFile@NWindows@@QAEXXZ ; NWindows::NFile::NFind::CFileInfoBase::ClearBase
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CFileInfoBase@NFind@NFile@NWindows@@QAE@XZ ENDP	; NWindows::NFile::NFind::CFileInfoBase::CFileInfoBase
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ PROC		; NWindows::NFile::NFind::CFileInfo::~CFileInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??1UString@@QAE@XZ			; UString::~UString
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ENDP		; NWindows::NFile::NFind::CFileInfo::~CFileInfo
_TEXT	ENDS
PUBLIC	?Front@?$CObjectVector@VUString@@@@QAEAAVUString@@XZ ; CObjectVector<UString>::Front
PUBLIC	?IsDriveItem@CItem@NWildcard@@QBE_NXZ		; NWildcard::CItem::IsDriveItem
PUBLIC	?Size@?$CObjectVector@VUString@@@@QBEIXZ	; CObjectVector<UString>::Size
PUBLIC	??A?$CObjectVector@UCItem@NWildcard@@@@QAEAAUCItem@NWildcard@@I@Z ; CObjectVector<NWildcard::CItem>::operator[]
PUBLIC	?Size@?$CObjectVector@UCItem@NWildcard@@@@QBEIXZ ; CObjectVector<NWildcard::CItem>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_item$77289 = -8					; size = 4
_i$77285 = -4						; size = 4
_prefix$ = 8						; size = 4
_items$ = 12						; size = 4
?ConvertToLongNames@@YGXABVUString@@AAV?$CObjectVector@UCItem@NWildcard@@@@@Z PROC ; ConvertToLongNames
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\archivecommandline.cpp
; Line 623
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 624
	mov	DWORD PTR _i$77285[ebp], 0
	jmp	SHORT $LN6@ConvertToL@4
$LN5@ConvertToL@4:
	mov	eax, DWORD PTR _i$77285[ebp]
	add	eax, 1
	mov	DWORD PTR _i$77285[ebp], eax
$LN6@ConvertToL@4:
	mov	ecx, DWORD PTR _items$[ebp]
	call	?Size@?$CObjectVector@UCItem@NWildcard@@@@QBEIXZ ; CObjectVector<NWildcard::CItem>::Size
	cmp	DWORD PTR _i$77285[ebp], eax
	jae	SHORT $LN7@ConvertToL@4
; Line 626
	mov	ecx, DWORD PTR _i$77285[ebp]
	push	ecx
	mov	ecx, DWORD PTR _items$[ebp]
	call	??A?$CObjectVector@UCItem@NWildcard@@@@QAEAAUCItem@NWildcard@@I@Z ; CObjectVector<NWildcard::CItem>::operator[]
	mov	DWORD PTR _item$77289[ebp], eax
; Line 627
	mov	edx, DWORD PTR _item$77289[ebp]
	movzx	eax, BYTE PTR [edx+12]
	test	eax, eax
	jne	SHORT $LN2@ConvertToL@4
	mov	ecx, DWORD PTR _item$77289[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	cmp	eax, 1
	je	SHORT $LN3@ConvertToL@4
$LN2@ConvertToL@4:
; Line 628
	jmp	SHORT $LN5@ConvertToL@4
$LN3@ConvertToL@4:
; Line 629
	mov	ecx, DWORD PTR _prefix$[ebp]
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@ConvertToL@4
	mov	ecx, DWORD PTR _item$77289[ebp]
	call	?IsDriveItem@CItem@NWildcard@@QBE_NXZ	; NWildcard::CItem::IsDriveItem
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@ConvertToL@4
; Line 630
	jmp	SHORT $LN5@ConvertToL@4
$LN1@ConvertToL@4:
; Line 631
	mov	ecx, DWORD PTR _item$77289[ebp]
	call	?Front@?$CObjectVector@VUString@@@@QAEAAVUString@@XZ ; CObjectVector<UString>::Front
	push	eax
	mov	eax, DWORD PTR _prefix$[ebp]
	push	eax
	call	?ConvertToLongName@@YGXABVUString@@AAV1@@Z ; ConvertToLongName
; Line 632
	jmp	SHORT $LN5@ConvertToL@4
$LN7@ConvertToL@4:
; Line 633
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?ConvertToLongNames@@YGXABVUString@@AAV?$CObjectVector@UCItem@NWildcard@@@@@Z ENDP ; ConvertToLongNames
_TEXT	ENDS
PUBLIC	??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsDriveItem@CItem@NWildcard@@QBE_NXZ
_TEXT	SEGMENT
tv82 = -8						; size = 4
_this$ = -4						; size = 4
?IsDriveItem@CItem@NWildcard@@QBE_NXZ PROC		; NWildcard::CItem::IsDriveItem, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\wildcard.h
; Line 43
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 44
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	cmp	eax, 1
	jne	SHORT $LN3@IsDriveIte
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	jne	SHORT $LN3@IsDriveIte
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+14]
	test	eax, eax
	je	SHORT $LN3@IsDriveIte
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[]
	mov	ecx, eax
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	?IsDriveColonName@NWildcard@@YG_NPB_W@Z	; NWildcard::IsDriveColonName
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@IsDriveIte
	mov	DWORD PTR tv82[ebp], 1
	jmp	SHORT $LN4@IsDriveIte
$LN3@IsDriveIte:
	mov	DWORD PTR tv82[ebp], 0
$LN4@IsDriveIte:
	mov	al, BYTE PTR tv82[ebp]
; Line 45
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsDriveItem@CItem@NWildcard@@QBE_NXZ ENDP		; NWildcard::CItem::IsDriveItem
_TEXT	ENDS
PUBLIC	??0CArcCmdLineParser@@QAE@XZ			; CArcCmdLineParser::CArcCmdLineParser
EXTRN	??0CParser@NCommandLineParser@@QAE@I@Z:PROC	; NCommandLineParser::CParser::CParser
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CArcCmdLineParser@@QAE@XZ PROC			; CArcCmdLineParser::CArcCmdLineParser
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\archivecommandline.cpp
; Line 852
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	push	51					; 00000033H
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CParser@NCommandLineParser@@QAE@I@Z	; NCommandLineParser::CParser::CParser
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CArcCmdLineParser@@QAE@XZ ENDP			; CArcCmdLineParser::CArcCmdLineParser
_TEXT	ENDS
PUBLIC	?Empty@AString@@QAEXXZ				; AString::Empty
PUBLIC	?IsEmpty@AString@@QBE_NXZ			; AString::IsEmpty
PUBLIC	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
PUBLIC	__TI2?AUCArcCmdLineException@@
PUBLIC	??BAString@@QBEPBDXZ				; AString::operator char const *
PUBLIC	?Parse1@CArcCmdLineParser@@QAEXABV?$CObjectVector@VUString@@@@AAUCArcCmdLineOptions@@@Z ; CArcCmdLineParser::Parse1
PUBLIC	??1CArcCmdLineException@@QAE@XZ			; CArcCmdLineException::~CArcCmdLineException
PUBLIC	__CTA2?AUCArcCmdLineException@@
PUBLIC	__CT??_R0?AUCArcCmdLineException@@@8??0CArcCmdLineException@@QAE@ABU0@@Z12
PUBLIC	??_R0?AUCArcCmdLineException@@@8		; CArcCmdLineException `RTTI Type Descriptor'
PUBLIC	??0CArcCmdLineException@@QAE@ABU0@@Z		; CArcCmdLineException::CArcCmdLineException
PUBLIC	__CT??_R0?AVUString@@@8??0UString@@QAE@ABV0@@Z12
PUBLIC	??_R0?AVUString@@@8				; UString `RTTI Type Descriptor'
EXTRN	__imp__SetProcessAffinityMask@8:PROC
EXTRN	__imp__GetCurrentProcess@0:PROC
EXTRN	?ConvertHexStringToUInt32@@YGIPBDPAPBD@Z:PROC	; ConvertHexStringToUInt32
EXTRN	?SetFromWStr_if_Ascii@AString@@QAEXPB_W@Z:PROC	; AString::SetFromWStr_if_Ascii
EXTRN	??0AString@@QAE@XZ:PROC				; AString::AString
EXTRN	?g_CaseSensitive@@3_NA:BYTE			; g_CaseSensitive
EXTRN	__imp___isatty:PROC
EXTRN	__imp___fileno:PROC
EXTRN	__imp____iob_func:PROC
EXTRN	?ParseStrings@CParser@NCommandLineParser@@QAE_NPBUCSwitchForm@2@ABV?$CObjectVector@VUString@@@@@Z:PROC ; NCommandLineParser::CParser::ParseStrings
EXTRN	__CxxThrowException@8:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??0UString@@QAE@ABV0@@Z:PROC			; UString::UString
;	COMDAT ??_R0?AVUString@@@8
_DATA	SEGMENT
??_R0?AVUString@@@8 DD FLAT:??_7type_info@@6B@		; UString `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVUString@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVUString@@@8??0UString@@QAE@ABV0@@Z12
xdata$x	SEGMENT
__CT??_R0?AVUString@@@8??0UString@@QAE@ABV0@@Z12 DD 00H
	DD	FLAT:??_R0?AVUString@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0UString@@QAE@ABV0@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AUCArcCmdLineException@@@8
_DATA	SEGMENT
??_R0?AUCArcCmdLineException@@@8 DD FLAT:??_7type_info@@6B@ ; CArcCmdLineException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUCArcCmdLineException@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AUCArcCmdLineException@@@8??0CArcCmdLineException@@QAE@ABU0@@Z12
xdata$x	SEGMENT
__CT??_R0?AUCArcCmdLineException@@@8??0CArcCmdLineException@@QAE@ABU0@@Z12 DD 00H
	DD	FLAT:??_R0?AUCArcCmdLineException@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0CArcCmdLineException@@QAE@ABU0@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AUCArcCmdLineException@@
xdata$x	SEGMENT
__CTA2?AUCArcCmdLineException@@ DD 02H
	DD	FLAT:__CT??_R0?AUCArcCmdLineException@@@8??0CArcCmdLineException@@QAE@ABU0@@Z12
	DD	FLAT:__CT??_R0?AVUString@@@8??0UString@@QAE@ABV0@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AUCArcCmdLineException@@
xdata$x	SEGMENT
__TI2?AUCArcCmdLineException@@ DD 00H
	DD	FLAT:??1CArcCmdLineException@@QAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AUCArcCmdLineException@@
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?Parse1@CArcCmdLineParser@@QAEXABV?$CObjectVector@VUString@@@@AAUCArcCmdLineOptions@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Parse1@CArcCmdLineParser@@QAEXABV?$CObjectVector@VUString@@@@AAUCArcCmdLineOptions@@@Z$0
__ehfuncinfo$?Parse1@CArcCmdLineParser@@QAEXABV?$CObjectVector@VUString@@@@AAUCArcCmdLineOptions@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Parse1@CArcCmdLineParser@@QAEXABV?$CObjectVector@VUString@@@@AAUCArcCmdLineOptions@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv157 = -112						; size = 4
$T79053 = -108						; size = 12
$T79052 = -96						; size = 12
$T79048 = -84						; size = 12
_end$77475 = -68					; size = 4
_a$77473 = -56						; size = 12
_v$77472 = -40						; size = 4
_s$77470 = -36						; size = 4
_v$77461 = -28						; size = 4
_s$77458 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_commandStrings$ = 8					; size = 4
_options$ = 12						; size = 4
?Parse1@CArcCmdLineParser@@QAEXABV?$CObjectVector@VUString@@@@AAUCArcCmdLineOptions@@@Z PROC ; CArcCmdLineParser::Parse1
; _this$ = ecx
; Line 862
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Parse1@CArcCmdLineParser@@QAEXABV?$CObjectVector@VUString@@@@AAUCArcCmdLineOptions@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 100				; 00000064H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-112]
	mov	ecx, 25					; 00000019H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 863
	mov	eax, DWORD PTR _commandStrings$[ebp]
	push	eax
	push	OFFSET _kSwitchForms
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ParseStrings@CParser@NCommandLineParser@@QAE_NPBUCSwitchForm@2@ABV?$CObjectVector@VUString@@@@@Z ; NCommandLineParser::CParser::ParseStrings
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN15@Parse1
; Line 864
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??BAString@@QBEPBDXZ			; AString::operator char const *
	push	eax
	lea	ecx, DWORD PTR $T79048[ebp]
	call	??0CArcCmdLineException@@QAE@PBDPB_W@Z	; CArcCmdLineException::CArcCmdLineException
	push	OFFSET __TI2?AUCArcCmdLineException@@
	lea	edx, DWORD PTR $T79048[ebp]
	push	edx
	call	__CxxThrowException@8
$LN15@Parse1:
; Line 866
	mov	esi, esp
	call	DWORD PTR __imp____iob_func
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp___fileno
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp___isatty
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	neg	eax
	sbb	eax, eax
	neg	eax
	mov	ecx, DWORD PTR _options$[ebp]
	mov	BYTE PTR [ecx+4], al
; Line 867
	mov	esi, esp
	call	DWORD PTR __imp____iob_func
	cmp	esi, esp
	call	__RTC_CheckEsp
	add	eax, 32					; 00000020H
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp___fileno
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp___isatty
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	neg	eax
	sbb	eax, eax
	neg	eax
	mov	edx, DWORD PTR _options$[ebp]
	mov	BYTE PTR [edx+5], al
; Line 868
	mov	esi, esp
	call	DWORD PTR __imp____iob_func
	cmp	esi, esp
	call	__RTC_CheckEsp
	add	eax, 64					; 00000040H
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp___fileno
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp___isatty
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	neg	eax
	sbb	eax, eax
	neg	eax
	mov	ecx, DWORD PTR _options$[ebp]
	mov	BYTE PTR [ecx+6], al
; Line 870
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	movzx	edx, BYTE PTR [eax]
	test	edx, edx
	jne	SHORT $LN18@Parse1
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	movzx	eax, BYTE PTR [eax]
	test	eax, eax
	jne	SHORT $LN18@Parse1
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN18@Parse1
	mov	DWORD PTR tv157[ebp], 0
	jmp	SHORT $LN19@Parse1
$LN18@Parse1:
	mov	DWORD PTR tv157[ebp], 1
$LN19@Parse1:
	mov	edx, DWORD PTR _options$[ebp]
	mov	al, BYTE PTR tv157[ebp]
	mov	BYTE PTR [edx], al
; Line 872
	push	30					; 0000001eH
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	mov	ecx, DWORD PTR _options$[ebp]
	mov	dl, BYTE PTR [eax]
	mov	BYTE PTR [ecx+7], dl
; Line 873
	push	31					; 0000001fH
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	mov	ecx, DWORD PTR _options$[ebp]
	mov	dl, BYTE PTR [eax]
	mov	BYTE PTR [ecx+8], dl
; Line 874
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	movzx	eax, BYTE PTR [eax]
	neg	eax
	sbb	eax, eax
	add	eax, 1
	mov	ecx, DWORD PTR _options$[ebp]
	mov	BYTE PTR [ecx+9], al
; Line 875
	push	35					; 00000023H
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	mov	edx, DWORD PTR _options$[ebp]
	mov	al, BYTE PTR [eax]
	mov	BYTE PTR [edx+68], al
; Line 876
	push	5
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	mov	ecx, DWORD PTR _options$[ebp]
	mov	dl, BYTE PTR [eax]
	mov	BYTE PTR [ecx+69], dl
; Line 880
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	movzx	eax, BYTE PTR [eax]
	test	eax, eax
	jne	SHORT $LN13@Parse1
	mov	ecx, DWORD PTR _options$[ebp]
	movzx	edx, BYTE PTR [ecx+8]
	test	edx, edx
	jne	SHORT $LN13@Parse1
	mov	eax, DWORD PTR _options$[ebp]
	movzx	ecx, BYTE PTR [eax+5]
	test	ecx, ecx
	jne	SHORT $LN14@Parse1
$LN13@Parse1:
; Line 881
	mov	edx, DWORD PTR _options$[ebp]
	mov	DWORD PTR [edx+516], 0
$LN14@Parse1:
; Line 883
	mov	eax, DWORD PTR _options$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	test	ecx, ecx
	je	SHORT $LN12@Parse1
; Line 884
	mov	edx, DWORD PTR _options$[ebp]
	mov	DWORD PTR [edx+508], 0
$LN12@Parse1:
; Line 886
	mov	eax, DWORD PTR _options$[ebp]
	add	eax, 508				; 000001fcH
	push	eax
	push	7
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	push	eax
	call	?SetStreamMode@@YGXABUCSwitchResult@NCommandLineParser@@AAI@Z ; SetStreamMode
; Line 887
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 512				; 00000200H
	push	ecx
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	push	eax
	call	?SetStreamMode@@YGXABUCSwitchResult@NCommandLineParser@@AAI@Z ; SetStreamMode
; Line 888
	mov	edx, DWORD PTR _options$[ebp]
	add	edx, 516				; 00000204H
	push	edx
	push	9
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	push	eax
	call	?SetStreamMode@@YGXABUCSwitchResult@NCommandLineParser@@AAI@Z ; SetStreamMode
; Line 890
	push	6
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	movzx	eax, BYTE PTR [eax]
	test	eax, eax
	je	$LN11@Parse1
; Line 892
	push	0
	push	6
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	add	eax, 8
	mov	ecx, eax
	call	??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[]
	mov	DWORD PTR _s$77458[ebp], eax
; Line 893
	mov	ecx, DWORD PTR _s$77458[ebp]
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN10@Parse1
; Line 894
	mov	edx, DWORD PTR _options$[ebp]
	mov	DWORD PTR [edx+520], 1
; Line 895
	jmp	SHORT $LN11@Parse1
$LN10@Parse1:
; Line 898
	lea	eax, DWORD PTR _v$77461[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$77458[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	?StringToUInt32@@YG_NPB_WAAI@Z		; StringToUInt32
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN8@Parse1
; Line 899
	mov	ecx, DWORD PTR _s$77458[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	push	OFFSET $SG77465
	lea	ecx, DWORD PTR $T79052[ebp]
	call	??0CArcCmdLineException@@QAE@PBDPB_W@Z	; CArcCmdLineException::CArcCmdLineException
	push	OFFSET __TI2?AUCArcCmdLineException@@
	lea	edx, DWORD PTR $T79052[ebp]
	push	edx
	call	__CxxThrowException@8
$LN8@Parse1:
; Line 900
	mov	eax, DWORD PTR _options$[ebp]
	mov	ecx, DWORD PTR _v$77461[ebp]
	mov	DWORD PTR [eax+520], ecx
$LN11@Parse1:
; Line 904
	push	37					; 00000025H
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	movzx	edx, BYTE PTR [eax]
	test	edx, edx
	je	SHORT $LN7@Parse1
; Line 906
	push	37					; 00000025H
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	movzx	eax, BYTE PTR [eax+1]
	neg	eax
	sbb	eax, eax
	add	eax, 1
	mov	BYTE PTR ?g_CaseSensitive@@3_NA, al	; g_CaseSensitive
; Line 907
	mov	ecx, DWORD PTR _options$[ebp]
	mov	BYTE PTR [ecx+2], 1
; Line 908
	mov	edx, DWORD PTR _options$[ebp]
	mov	al, BYTE PTR ?g_CaseSensitive@@3_NA	; g_CaseSensitive
	mov	BYTE PTR [edx+3], al
$LN7@Parse1:
; Line 911
	mov	ecx, DWORD PTR _options$[ebp]
	mov	BYTE PTR [ecx+1], 0
; Line 912
	push	32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	movzx	edx, BYTE PTR [eax]
	test	edx, edx
	je	SHORT $LN6@Parse1
; Line 913
	push	32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	movzx	eax, BYTE PTR [eax+1]
	neg	eax
	sbb	eax, eax
	add	eax, 1
	mov	ecx, DWORD PTR _options$[ebp]
	mov	BYTE PTR [ecx+1], al
$LN6@Parse1:
; Line 918
	push	26					; 0000001aH
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	movzx	edx, BYTE PTR [eax]
	test	edx, edx
	je	$LN17@Parse1
; Line 920
	push	0
	push	26					; 0000001aH
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	add	eax, 8
	mov	ecx, eax
	call	??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[]
	mov	DWORD PTR _s$77470[ebp], eax
; Line 921
	mov	ecx, DWORD PTR _s$77470[ebp]
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	eax, al
	test	eax, eax
	jne	$LN17@Parse1
; Line 923
	mov	DWORD PTR _v$77472[ebp], 0
; Line 924
	lea	ecx, DWORD PTR _a$77473[ebp]
	call	??0AString@@QAE@XZ			; AString::AString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 925
	mov	ecx, DWORD PTR _s$77470[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	lea	ecx, DWORD PTR _a$77473[ebp]
	call	?SetFromWStr_if_Ascii@AString@@QAEXPB_W@Z ; AString::SetFromWStr_if_Ascii
; Line 926
	lea	ecx, DWORD PTR _a$77473[ebp]
	call	?IsEmpty@AString@@QBE_NXZ		; AString::IsEmpty
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@Parse1
; Line 929
	lea	edx, DWORD PTR _end$77475[ebp]
	push	edx
	lea	ecx, DWORD PTR _a$77473[ebp]
	call	??BAString@@QBEPBDXZ			; AString::operator char const *
	push	eax
	call	?ConvertHexStringToUInt32@@YGIPBDPAPBD@Z ; ConvertHexStringToUInt32
	mov	DWORD PTR _v$77472[ebp], eax
; Line 930
	mov	eax, DWORD PTR _end$77475[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN3@Parse1
; Line 931
	lea	ecx, DWORD PTR _a$77473[ebp]
	call	?Empty@AString@@QAEXXZ			; AString::Empty
$LN3@Parse1:
; Line 933
	lea	ecx, DWORD PTR _a$77473[ebp]
	call	?IsEmpty@AString@@QBE_NXZ		; AString::IsEmpty
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@Parse1
; Line 934
	mov	ecx, DWORD PTR _s$77470[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	push	OFFSET $SG77480
	lea	ecx, DWORD PTR $T79053[ebp]
	call	??0CArcCmdLineException@@QAE@PBDPB_W@Z	; CArcCmdLineException::CArcCmdLineException
	push	OFFSET __TI2?AUCArcCmdLineException@@
	lea	eax, DWORD PTR $T79053[ebp]
	push	eax
	call	__CxxThrowException@8
$LN1@Parse1:
; Line 937
	mov	esi, esp
	mov	ecx, DWORD PTR _v$77472[ebp]
	push	ecx
	mov	edi, esp
	call	DWORD PTR __imp__GetCurrentProcess@0
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	DWORD PTR __imp__SetProcessAffinityMask@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 939
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _a$77473[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
$LN17@Parse1:
; Line 943
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN26@Parse1
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 112				; 00000070H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN26@Parse1:
	DD	3
	DD	$LN25@Parse1
$LN25@Parse1:
	DD	-28					; ffffffe4H
	DD	4
	DD	$LN21@Parse1
	DD	-56					; ffffffc8H
	DD	12					; 0000000cH
	DD	$LN22@Parse1
	DD	-68					; ffffffbcH
	DD	4
	DD	$LN23@Parse1
$LN23@Parse1:
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
$LN22@Parse1:
	DB	97					; 00000061H
	DB	0
$LN21@Parse1:
	DB	118					; 00000076H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Parse1@CArcCmdLineParser@@QAEXABV?$CObjectVector@VUString@@@@AAUCArcCmdLineOptions@@@Z$0:
	lea	ecx, DWORD PTR _a$77473[ebp]
	jmp	??1AString@@QAE@XZ			; AString::~AString
__ehhandler$?Parse1@CArcCmdLineParser@@QAEXABV?$CObjectVector@VUString@@@@AAUCArcCmdLineOptions@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-112]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Parse1@CArcCmdLineParser@@QAEXABV?$CObjectVector@VUString@@@@AAUCArcCmdLineOptions@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Parse1@CArcCmdLineParser@@QAEXABV?$CObjectVector@VUString@@@@AAUCArcCmdLineOptions@@@Z ENDP ; CArcCmdLineParser::Parse1
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsEmpty@AString@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@AString@@QBE_NXZ PROC				; AString::IsEmpty, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 235
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+4], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@AString@@QBE_NXZ ENDP				; AString::IsEmpty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Empty@AString@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Empty@AString@@QAEXXZ PROC				; AString::Empty, COMDAT
; _this$ = ecx
; Line 236
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	BYTE PTR [edx], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Empty@AString@@QAEXXZ ENDP				; AString::Empty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??BAString@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BAString@@QBEPBDXZ PROC				; AString::operator char const *, COMDAT
; _this$ = ecx
; Line 238
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??BAString@@QBEPBDXZ ENDP				; AString::operator char const *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z PROC ; NCommandLineParser::CParser::operator[], COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\commandlineparser.h
; Line 58
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	imul	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	esp, ebp
	pop	ebp
	ret	4
??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ENDP ; NCommandLineParser::CParser::operator[]
_TEXT	ENDS
EXTRN	?ConvertStringToUInt32@@YGIPB_WPAPB_W@Z:PROC	; ConvertStringToUInt32
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_end$ = -8						; size = 4
_s$ = 8							; size = 4
_v$ = 12						; size = 4
?StringToUInt32@@YG_NPB_WAAI@Z PROC			; StringToUInt32
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\archivecommandline.cpp
; Line 54
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 55
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN1@StringToUI
; Line 56
	xor	al, al
	jmp	SHORT $LN2@StringToUI
$LN1@StringToUI:
; Line 58
	lea	edx, DWORD PTR _end$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	?ConvertStringToUInt32@@YGIPB_WPAPB_W@Z	; ConvertStringToUInt32
	mov	ecx, DWORD PTR _v$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 59
	mov	edx, DWORD PTR _end$[ebp]
	movzx	eax, WORD PTR [edx]
	neg	eax
	sbb	eax, eax
	add	eax, 1
$LN2@StringToUI:
; Line 60
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@StringToUI
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN6@StringToUI:
	DD	1
	DD	$LN5@StringToUI
$LN5@StringToUI:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@StringToUI
$LN4@StringToUI:
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
?StringToUInt32@@YG_NPB_WAAI@Z ENDP			; StringToUInt32
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CArcCmdLineException@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CArcCmdLineException@@QAE@XZ PROC			; CArcCmdLineException::~CArcCmdLineException, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CArcCmdLineException@@QAE@XZ ENDP			; CArcCmdLineException::~CArcCmdLineException
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CArcCmdLineException@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CArcCmdLineException@@QAE@ABU0@@Z PROC		; CArcCmdLineException::CArcCmdLineException, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CArcCmdLineException@@QAE@ABU0@@Z ENDP		; CArcCmdLineException::CArcCmdLineException
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
_TEXT	SEGMENT
_sw$ = 8						; size = 4
_res$ = 12						; size = 4
?SetStreamMode@@YGXABUCSwitchResult@NCommandLineParser@@AAI@Z PROC ; SetStreamMode
; Line 855
	push	ebp
	mov	ebp, esp
; Line 856
	mov	eax, DWORD PTR _sw$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN2@SetStreamM
; Line 857
	mov	edx, DWORD PTR _res$[ebp]
	mov	eax, DWORD PTR _sw$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx], ecx
$LN2@SetStreamM:
; Line 858
	pop	ebp
	ret	8
?SetStreamMode@@YGXABUCSwitchResult@NCommandLineParser@@AAI@Z ENDP ; SetStreamMode
_TEXT	ENDS
PUBLIC	??1?$CRecordVector@I@@QAE@XZ			; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
PUBLIC	?AddInReserved@?$CObjectVector@VUString@@@@QAEXABVUString@@@Z ; CObjectVector<UString>::AddInReserved
PUBLIC	??A?$CRecordVector@I@@QAEAAII@Z			; CRecordVector<unsigned int>::operator[]
PUBLIC	?ClearAndReserve@?$CObjectVector@VUString@@@@QAEXI@Z ; CObjectVector<UString>::ClearAndReserve
PUBLIC	?Size@?$CRecordVector@I@@QBEIXZ			; CRecordVector<unsigned int>::Size
PUBLIC	??0?$CRecordVector@I@@QAE@XZ			; CRecordVector<unsigned int>::CRecordVector<unsigned int>
PUBLIC	??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[]
PUBLIC	?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z ; CObjectVector<UString>::Add
PUBLIC	?IsDir@CDirItem@@QBE_NXZ			; CDirItem::IsDir
PUBLIC	??A?$CObjectVector@UCDirItem@@@@QAEAAUCDirItem@@I@Z ; CObjectVector<CDirItem>::operator[]
PUBLIC	?Size@?$CObjectVector@UCDirItem@@@@QBEIXZ	; CObjectVector<CDirItem>::Size
PUBLIC	??1?$CObjectVector@VUString@@@@QAE@XZ		; CObjectVector<UString>::~CObjectVector<UString>
PUBLIC	??1CDirItems@@QAE@XZ				; CDirItems::~CDirItems
PUBLIC	??0?$CObjectVector@VUString@@@@QAE@XZ		; CObjectVector<UString>::CObjectVector<UString>
PUBLIC	?EnumerateDirItemsAndSort@@YGJAAVCCensor@NWildcard@@W4ECensorPathMode@2@ABVUString@@AAV?$CObjectVector@VUString@@@@3AAUCDirItemsStat@@PAUIDirItemsCallback@@@Z ; EnumerateDirItemsAndSort
EXTRN	?CompareFileNames@@YGHPB_W0@Z:PROC		; CompareFileNames
EXTRN	?SortFileNames@@YGXABV?$CObjectVector@VUString@@@@AAV?$CRecordVector@I@@@Z:PROC ; SortFileNames
EXTRN	?MyGetFullPathName@NDir@NFile@NWindows@@YG_NPB_WAAVUString@@@Z:PROC ; NWindows::NFile::NDir::MyGetFullPathName
EXTRN	?GetPhyPath@CDirItems@@QBE?AVUString@@I@Z:PROC	; CDirItems::GetPhyPath
EXTRN	?EnumerateItems@@YGJABVCCensor@NWildcard@@W4ECensorPathMode@2@ABVUString@@AAVCDirItems@@@Z:PROC ; EnumerateItems
EXTRN	??0CDirItems@@QAE@XZ:PROC			; CDirItems::CDirItems
xdata$x	SEGMENT
__ehfuncinfo$?EnumerateDirItemsAndSort@@YGJAAVCCensor@NWildcard@@W4ECensorPathMode@2@ABVUString@@AAV?$CObjectVector@VUString@@@@3AAUCDirItemsStat@@PAUIDirItemsCallback@@@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?EnumerateDirItemsAndSort@@YGJAAVCCensor@NWildcard@@W4ECensorPathMode@2@ABVUString@@AAV?$CObjectVector@VUString@@@@3AAUCDirItemsStat@@PAUIDirItemsCallback@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?EnumerateDirItemsAndSort@@YGJAAVCCensor@NWildcard@@W4ECensorPathMode@2@ABVUString@@AAV?$CObjectVector@VUString@@@@3AAUCDirItemsStat@@PAUIDirItemsCallback@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?EnumerateDirItemsAndSort@@YGJAAVCCensor@NWildcard@@W4ECensorPathMode@2@ABVUString@@AAV?$CObjectVector@VUString@@@@3AAUCDirItemsStat@@PAUIDirItemsCallback@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?EnumerateDirItemsAndSort@@YGJAAVCCensor@NWildcard@@W4ECensorPathMode@2@ABVUString@@AAV?$CObjectVector@VUString@@@@3AAUCDirItemsStat@@PAUIDirItemsCallback@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?EnumerateDirItemsAndSort@@YGJAAVCCensor@NWildcard@@W4ECensorPathMode@2@ABVUString@@AAV?$CObjectVector@VUString@@@@3AAUCDirItemsStat@@PAUIDirItemsCallback@@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?EnumerateDirItemsAndSort@@YGJAAVCCensor@NWildcard@@W4ECensorPathMode@2@ABVUString@@AAV?$CObjectVector@VUString@@@@3AAUCDirItemsStat@@PAUIDirItemsCallback@@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?EnumerateDirItemsAndSort@@YGJAAVCCensor@NWildcard@@W4ECensorPathMode@2@ABVUString@@AAV?$CObjectVector@VUString@@@@3AAUCDirItemsStat@@PAUIDirItemsCallback@@@Z$4
	DD	03H
	DD	FLAT:__unwindfunclet$?EnumerateDirItemsAndSort@@YGJAAVCCensor@NWildcard@@W4ECensorPathMode@2@ABVUString@@AAV?$CObjectVector@VUString@@@@3AAUCDirItemsStat@@PAUIDirItemsCallback@@@Z$5
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv215 = -336						; size = 4
tv68 = -332						; size = 4
$T79088 = -328						; size = 4
$T79087 = -324						; size = 12
$T79086 = -312						; size = 12
$T79085 = -300						; size = 12
$T79084 = -288						; size = 4
_index$77558 = -284					; size = 4
_indices$ = -276					; size = 12
_fullPath$77553 = -256					; size = 12
_i$ = -240						; size = 4
_fullPaths$ = -232					; size = 12
_dirItem$77542 = -216					; size = 4
_i$77538 = -212						; size = 4
___result__$77535 = -208				; size = 4
_res$77534 = -204					; size = 4
_dirItems$77533 = -196					; size = 160
_paths$ = -28						; size = 12
__$EHRec$ = -12						; size = 12
_censor$ = 8						; size = 4
_censorPathMode$ = 12					; size = 4
_addPathPrefix$ = 16					; size = 4
_sortedPaths$ = 20					; size = 4
_sortedFullPaths$ = 24					; size = 4
_st$ = 28						; size = 4
_callback$ = 32						; size = 4
?EnumerateDirItemsAndSort@@YGJAAVCCensor@NWildcard@@W4ECensorPathMode@2@ABVUString@@AAV?$CObjectVector@VUString@@@@3AAUCDirItemsStat@@PAUIDirItemsCallback@@@Z PROC ; EnumerateDirItemsAndSort
; Line 993
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?EnumerateDirItemsAndSort@@YGJAAVCCensor@NWildcard@@W4ECensorPathMode@2@ABVUString@@AAV?$CObjectVector@VUString@@@@3AAUCDirItemsStat@@PAUIDirItemsCallback@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 324				; 00000144H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-336]
	mov	ecx, 81					; 00000051H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 994
	lea	ecx, DWORD PTR _paths$[ebp]
	call	??0?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::CObjectVector<UString>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 997
	lea	ecx, DWORD PTR _dirItems$77533[ebp]
	call	??0CDirItems@@QAE@XZ			; CDirItems::CDirItems
	mov	BYTE PTR __$EHRec$[ebp+8], 1
; Line 998
	mov	eax, DWORD PTR _callback$[ebp]
	mov	DWORD PTR _dirItems$77533[ebp+152], eax
; Line 1000
	lea	ecx, DWORD PTR _dirItems$77533[ebp]
	push	ecx
	mov	edx, DWORD PTR _addPathPrefix$[ebp]
	push	edx
	mov	eax, DWORD PTR _censorPathMode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _censor$[ebp]
	push	ecx
	call	?EnumerateItems@@YGJABVCCensor@NWildcard@@W4ECensorPathMode@2@ABVUString@@AAVCDirItems@@@Z ; EnumerateItems
	mov	DWORD PTR _res$77534[ebp], eax
; Line 1001
	mov	ecx, 12					; 0000000cH
	lea	esi, DWORD PTR _dirItems$77533[ebp+56]
	mov	edi, DWORD PTR _st$[ebp]
	rep movsd
; Line 1002
	mov	edx, DWORD PTR _res$77534[ebp]
	mov	DWORD PTR ___result__$77535[ebp], edx
	cmp	DWORD PTR ___result__$77535[ebp], 0
	je	SHORT $LN13@EnumerateD
	mov	eax, DWORD PTR ___result__$77535[ebp]
	mov	DWORD PTR $T79084[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _dirItems$77533[ebp]
	call	??1CDirItems@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _paths$[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	eax, DWORD PTR $T79084[ebp]
	jmp	$LN15@EnumerateD
$LN13@EnumerateD:
; Line 1005
	mov	DWORD PTR _i$77538[ebp], 0
	jmp	SHORT $LN12@EnumerateD
$LN11@EnumerateD:
	mov	ecx, DWORD PTR _i$77538[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$77538[ebp], ecx
$LN12@EnumerateD:
	lea	ecx, DWORD PTR _dirItems$77533[ebp+36]
	call	?Size@?$CObjectVector@UCDirItem@@@@QBEIXZ ; CObjectVector<CDirItem>::Size
	cmp	DWORD PTR _i$77538[ebp], eax
	jae	SHORT $LN10@EnumerateD
; Line 1007
	mov	edx, DWORD PTR _i$77538[ebp]
	push	edx
	lea	ecx, DWORD PTR _dirItems$77533[ebp+36]
	call	??A?$CObjectVector@UCDirItem@@@@QAEAAUCDirItem@@I@Z ; CObjectVector<CDirItem>::operator[]
	mov	DWORD PTR _dirItem$77542[ebp], eax
; Line 1008
	mov	ecx, DWORD PTR _dirItem$77542[ebp]
	call	?IsDir@CDirItem@@QBE_NXZ		; CDirItem::IsDir
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN9@EnumerateD
; Line 1009
	mov	ecx, DWORD PTR _i$77538[ebp]
	push	ecx
	lea	edx, DWORD PTR $T79085[ebp]
	push	edx
	lea	ecx, DWORD PTR _dirItems$77533[ebp]
	call	?GetPhyPath@CDirItems@@QBE?AVUString@@I@Z ; CDirItems::GetPhyPath
	mov	DWORD PTR tv68[ebp], eax
	mov	eax, DWORD PTR tv68[ebp]
	mov	DWORD PTR tv215[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR tv215[ebp]
	push	ecx
	lea	ecx, DWORD PTR _paths$[ebp]
	call	?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z ; CObjectVector<UString>::Add
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T79085[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
$LN9@EnumerateD:
; Line 1010
	jmp	$LN11@EnumerateD
$LN10@EnumerateD:
; Line 1011
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _dirItems$77533[ebp]
	call	??1CDirItems@@QAE@XZ
; Line 1013
	lea	ecx, DWORD PTR _paths$[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	test	eax, eax
	jne	SHORT $LN8@EnumerateD
; Line 1014
	push	0
	mov	edx, DWORD PTR _kCannotFindArchive
	push	edx
	lea	ecx, DWORD PTR $T79086[ebp]
	call	??0CArcCmdLineException@@QAE@PBDPB_W@Z	; CArcCmdLineException::CArcCmdLineException
	push	OFFSET __TI2?AUCArcCmdLineException@@
	lea	eax, DWORD PTR $T79086[ebp]
	push	eax
	call	__CxxThrowException@8
$LN8@EnumerateD:
; Line 1016
	lea	ecx, DWORD PTR _fullPaths$[ebp]
	call	??0?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::CObjectVector<UString>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
; Line 1020
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@EnumerateD
$LN6@EnumerateD:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN7@EnumerateD:
	lea	ecx, DWORD PTR _paths$[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN5@EnumerateD
; Line 1022
	lea	ecx, DWORD PTR _fullPath$77553[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 4
; Line 1023
	lea	edx, DWORD PTR _fullPath$77553[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	lea	ecx, DWORD PTR _paths$[ebp]
	call	??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[]
	mov	ecx, eax
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	?MyGetFullPathName@NDir@NFile@NWindows@@YG_NPB_WAAVUString@@@Z ; NWindows::NFile::NDir::MyGetFullPathName
; Line 1024
	lea	ecx, DWORD PTR _fullPath$77553[ebp]
	push	ecx
	lea	ecx, DWORD PTR _fullPaths$[ebp]
	call	?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z ; CObjectVector<UString>::Add
; Line 1025
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _fullPath$77553[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	jmp	SHORT $LN6@EnumerateD
$LN5@EnumerateD:
; Line 1027
	lea	ecx, DWORD PTR _indices$[ebp]
	call	??0?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 5
; Line 1028
	lea	edx, DWORD PTR _indices$[ebp]
	push	edx
	lea	eax, DWORD PTR _fullPaths$[ebp]
	push	eax
	call	?SortFileNames@@YGXABV?$CObjectVector@VUString@@@@AAV?$CRecordVector@I@@@Z ; SortFileNames
; Line 1029
	lea	ecx, DWORD PTR _indices$[ebp]
	call	?Size@?$CRecordVector@I@@QBEIXZ		; CRecordVector<unsigned int>::Size
	push	eax
	mov	ecx, DWORD PTR _sortedPaths$[ebp]
	call	?ClearAndReserve@?$CObjectVector@VUString@@@@QAEXI@Z ; CObjectVector<UString>::ClearAndReserve
; Line 1030
	lea	ecx, DWORD PTR _indices$[ebp]
	call	?Size@?$CRecordVector@I@@QBEIXZ		; CRecordVector<unsigned int>::Size
	push	eax
	mov	ecx, DWORD PTR _sortedFullPaths$[ebp]
	call	?ClearAndReserve@?$CObjectVector@VUString@@@@QAEXI@Z ; CObjectVector<UString>::ClearAndReserve
; Line 1032
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@EnumerateD
$LN3@EnumerateD:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN4@EnumerateD:
	lea	ecx, DWORD PTR _indices$[ebp]
	call	?Size@?$CRecordVector@I@@QBEIXZ		; CRecordVector<unsigned int>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	$LN2@EnumerateD
; Line 1034
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	lea	ecx, DWORD PTR _indices$[ebp]
	call	??A?$CRecordVector@I@@QAEAAII@Z		; CRecordVector<unsigned int>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _index$77558[ebp], eax
; Line 1035
	mov	ecx, DWORD PTR _index$77558[ebp]
	push	ecx
	lea	ecx, DWORD PTR _paths$[ebp]
	call	??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[]
	push	eax
	mov	ecx, DWORD PTR _sortedPaths$[ebp]
	call	?AddInReserved@?$CObjectVector@VUString@@@@QAEXABVUString@@@Z ; CObjectVector<UString>::AddInReserved
; Line 1036
	mov	edx, DWORD PTR _index$77558[ebp]
	push	edx
	lea	ecx, DWORD PTR _fullPaths$[ebp]
	call	??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[]
	push	eax
	mov	ecx, DWORD PTR _sortedFullPaths$[ebp]
	call	?AddInReserved@?$CObjectVector@VUString@@@@QAEXABVUString@@@Z ; CObjectVector<UString>::AddInReserved
; Line 1037
	cmp	DWORD PTR _i$[ebp], 0
	jbe	SHORT $LN1@EnumerateD
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _sortedFullPaths$[ebp]
	call	??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[]
	mov	ecx, eax
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _sortedFullPaths$[ebp]
	call	??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[]
	mov	ecx, eax
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	?CompareFileNames@@YGHPB_W0@Z		; CompareFileNames
	test	eax, eax
	jne	SHORT $LN1@EnumerateD
; Line 1038
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _sortedFullPaths$[ebp]
	call	??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[]
	mov	ecx, eax
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	push	OFFSET $SG77562
	lea	ecx, DWORD PTR $T79087[ebp]
	call	??0CArcCmdLineException@@QAE@PBDPB_W@Z	; CArcCmdLineException::CArcCmdLineException
	push	OFFSET __TI2?AUCArcCmdLineException@@
	lea	eax, DWORD PTR $T79087[ebp]
	push	eax
	call	__CxxThrowException@8
$LN1@EnumerateD:
; Line 1039
	jmp	$LN3@EnumerateD
$LN2@EnumerateD:
; Line 1041
	mov	DWORD PTR $T79088[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _indices$[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _fullPaths$[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _paths$[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	eax, DWORD PTR $T79088[ebp]
$LN15@EnumerateD:
; Line 1042
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN29@EnumerateD
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 336				; 00000150H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
$LN29@EnumerateD:
	DD	5
	DD	$LN28@EnumerateD
$LN28@EnumerateD:
	DD	-28					; ffffffe4H
	DD	12					; 0000000cH
	DD	$LN22@EnumerateD
	DD	-196					; ffffff3cH
	DD	160					; 000000a0H
	DD	$LN23@EnumerateD
	DD	-232					; ffffff18H
	DD	12					; 0000000cH
	DD	$LN24@EnumerateD
	DD	-256					; ffffff00H
	DD	12					; 0000000cH
	DD	$LN25@EnumerateD
	DD	-276					; fffffeecH
	DD	12					; 0000000cH
	DD	$LN26@EnumerateD
$LN26@EnumerateD:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN25@EnumerateD:
	DB	102					; 00000066H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN24@EnumerateD:
	DB	102					; 00000066H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	115					; 00000073H
	DB	0
$LN23@EnumerateD:
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	73					; 00000049H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	115					; 00000073H
	DB	0
$LN22@EnumerateD:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	115					; 00000073H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?EnumerateDirItemsAndSort@@YGJAAVCCensor@NWildcard@@W4ECensorPathMode@2@ABVUString@@AAV?$CObjectVector@VUString@@@@3AAUCDirItemsStat@@PAUIDirItemsCallback@@@Z$0:
	lea	ecx, DWORD PTR _paths$[ebp]
	jmp	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
__unwindfunclet$?EnumerateDirItemsAndSort@@YGJAAVCCensor@NWildcard@@W4ECensorPathMode@2@ABVUString@@AAV?$CObjectVector@VUString@@@@3AAUCDirItemsStat@@PAUIDirItemsCallback@@@Z$1:
	lea	ecx, DWORD PTR _dirItems$77533[ebp]
	jmp	??1CDirItems@@QAE@XZ
__unwindfunclet$?EnumerateDirItemsAndSort@@YGJAAVCCensor@NWildcard@@W4ECensorPathMode@2@ABVUString@@AAV?$CObjectVector@VUString@@@@3AAUCDirItemsStat@@PAUIDirItemsCallback@@@Z$2:
	lea	ecx, DWORD PTR $T79085[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?EnumerateDirItemsAndSort@@YGJAAVCCensor@NWildcard@@W4ECensorPathMode@2@ABVUString@@AAV?$CObjectVector@VUString@@@@3AAUCDirItemsStat@@PAUIDirItemsCallback@@@Z$3:
	lea	ecx, DWORD PTR _fullPaths$[ebp]
	jmp	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
__unwindfunclet$?EnumerateDirItemsAndSort@@YGJAAVCCensor@NWildcard@@W4ECensorPathMode@2@ABVUString@@AAV?$CObjectVector@VUString@@@@3AAUCDirItemsStat@@PAUIDirItemsCallback@@@Z$4:
	lea	ecx, DWORD PTR _fullPath$77553[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?EnumerateDirItemsAndSort@@YGJAAVCCensor@NWildcard@@W4ECensorPathMode@2@ABVUString@@AAV?$CObjectVector@VUString@@@@3AAUCDirItemsStat@@PAUIDirItemsCallback@@@Z$5:
	lea	ecx, DWORD PTR _indices$[ebp]
	jmp	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
__ehhandler$?EnumerateDirItemsAndSort@@YGJAAVCCensor@NWildcard@@W4ECensorPathMode@2@ABVUString@@AAV?$CObjectVector@VUString@@@@3AAUCDirItemsStat@@PAUIDirItemsCallback@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-336]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?EnumerateDirItemsAndSort@@YGJAAVCCensor@NWildcard@@W4ECensorPathMode@2@ABVUString@@AAV?$CObjectVector@VUString@@@@3AAUCDirItemsStat@@PAUIDirItemsCallback@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?EnumerateDirItemsAndSort@@YGJAAVCCensor@NWildcard@@W4ECensorPathMode@2@ABVUString@@AAV?$CObjectVector@VUString@@@@3AAUCDirItemsStat@@PAUIDirItemsCallback@@@Z ENDP ; EnumerateDirItemsAndSort
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsDir@CDirItem@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsDir@CDirItem@@QBE_NXZ PROC				; CDirItem::IsDir, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\diritem.h
; Line 70
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+60]
	and	eax, 16					; 00000010H
	neg	eax
	sbb	eax, eax
	neg	eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsDir@CDirItem@@QBE_NXZ ENDP				; CDirItem::IsDir
_TEXT	ENDS
PUBLIC	??1?$CRecordVector@H@@QAE@XZ			; CRecordVector<int>::~CRecordVector<int>
PUBLIC	??1?$CObjectVector@UCDirItem@@@@QAE@XZ		; CObjectVector<CDirItem>::~CObjectVector<CDirItem>
PUBLIC	??1CUniqBlocks@@QAE@XZ				; CUniqBlocks::~CUniqBlocks
PUBLIC	??1?$CBuffer@E@@QAE@XZ				; CBuffer<unsigned char>::~CBuffer<unsigned char>
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CDirItems@@QAE@XZ DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??1CDirItems@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1CDirItems@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CDirItems@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CDirItems@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CDirItems@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CDirItems@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1CDirItems@@QAE@XZ$4
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CDirItems@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CDirItems@@QAE@XZ PROC				; CDirItems::~CDirItems, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CDirItems@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 140				; 0000008cH
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 104				; 00000068H
	call	??1CUniqBlocks@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??1?$CObjectVector@UCDirItem@@@@QAE@XZ	; CObjectVector<CDirItem>::~CObjectVector<CDirItem>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CDirItems@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
__unwindfunclet$??1CDirItems@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
__unwindfunclet$??1CDirItems@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
__unwindfunclet$??1CDirItems@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	jmp	??1?$CObjectVector@UCDirItem@@@@QAE@XZ	; CObjectVector<CDirItem>::~CObjectVector<CDirItem>
__unwindfunclet$??1CDirItems@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 104				; 00000068H
	jmp	??1CUniqBlocks@@QAE@XZ
__ehhandler$??1CDirItems@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CDirItems@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CDirItems@@QAE@XZ ENDP				; CDirItems::~CDirItems
PUBLIC	??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ	; CObjectVector<CBuffer<unsigned char> >::~CObjectVector<CBuffer<unsigned char> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CUniqBlocks@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CUniqBlocks@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CUniqBlocks@@QAE@XZ$1
__ehfuncinfo$??1CUniqBlocks@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CUniqBlocks@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CUniqBlocks@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CUniqBlocks@@QAE@XZ PROC				; CUniqBlocks::~CUniqBlocks, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CUniqBlocks@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ ; CObjectVector<CBuffer<unsigned char> >::~CObjectVector<CBuffer<unsigned char> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CUniqBlocks@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ ; CObjectVector<CBuffer<unsigned char> >::~CObjectVector<CBuffer<unsigned char> >
__unwindfunclet$??1CUniqBlocks@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
__ehhandler$??1CUniqBlocks@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CUniqBlocks@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CUniqBlocks@@QAE@XZ ENDP				; CUniqBlocks::~CUniqBlocks
PUBLIC	__TI1_J
PUBLIC	?Size@?$CObjectVector@UCUpdateArchiveCommand@@@@QBEIXZ ; CObjectVector<CUpdateArchiveCommand>::Size
PUBLIC	?Len@UString@@QBEIXZ				; UString::Len
PUBLIC	??4?$CObjectVector@UCProperty@@@@QAEAAV0@ABV0@@Z ; CObjectVector<CProperty>::operator=
PUBLIC	?Front@?$CObjectVector@VUString@@@@QBEABVUString@@XZ ; CObjectVector<UString>::Front
PUBLIC	?AllAreRelative@CCensor@NWildcard@@QBE_NXZ	; NWildcard::CCensor::AllAreRelative
PUBLIC	?SetTrueTrue@CBoolPair@@QAEXXZ			; CBoolPair::SetTrueTrue
PUBLIC	??8@YG_NABVUString@@PB_W@Z			; operator==
PUBLIC	??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z	; CObjectVector<UString>::operator=
PUBLIC	?Parse2@CArcCmdLineParser@@QAEXAAUCArcCmdLineOptions@@@Z ; CArcCmdLineParser::Parse2
PUBLIC	__CTA1_J
PUBLIC	__CT??_R0_J@88
PUBLIC	??_R0_J@8					; __int64 `RTTI Type Descriptor'
EXTRN	?Delete@UString@@QAEXI@Z:PROC			; UString::Delete
EXTRN	?NormalizeDirPathPrefix@NName@NFile@NWindows@@YGXAAVUString@@@Z:PROC ; NWindows::NFile::NName::NormalizeDirPathPrefix
EXTRN	?ExtendExclude@CCensor@NWildcard@@QAEXXZ:PROC	; NWildcard::CCensor::ExtendExclude
EXTRN	?AddPathsToCensor@CCensor@NWildcard@@QAEXW4ECensorPathMode@2@@Z:PROC ; NWildcard::CCensor::AddPathsToCensor
;	COMDAT ??_R0_J@8
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\archivecommandline.cpp
_DATA	SEGMENT
??_R0_J@8 DD	FLAT:??_7type_info@@6B@			; __int64 `RTTI Type Descriptor'
	DD	00H
	DB	'._J', 00H
_DATA	ENDS
;	COMDAT __CT??_R0_J@88
xdata$x	SEGMENT
__CT??_R0_J@88 DD 01H
	DD	FLAT:??_R0_J@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	08H
	DD	00H
xdata$x	ENDS
;	COMDAT __CTA1_J
xdata$x	SEGMENT
__CTA1_J DD	01H
	DD	FLAT:__CT??_R0_J@88
xdata$x	ENDS
;	COMDAT __TI1_J
xdata$x	SEGMENT
__TI1_J	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA1_J
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv330 = -236						; size = 4
tv306 = -232						; size = 4
tv265 = -228						; size = 4
tv255 = -224						; size = 4
$T79152 = -220						; size = 8
$T79151 = -212						; size = 12
$T79150 = -200						; size = 12
$T79149 = -188						; size = 12
$T79148 = -176						; size = 12
$T79147 = -164						; size = 12
$T79146 = -152						; size = 12
$T79145 = -140						; size = 12
$T79142 = -128						; size = 12
$T79141 = -116						; size = 12
$T79136 = -104						; size = 12
$T79135 = -92						; size = 12
$T79134 = -80						; size = 12
_hashOptions$77691 = -68				; size = 4
_updateOptions$77664 = -64				; size = 4
_arcCensor$77641 = -60					; size = 4
_nt$77633 = -56						; size = 4
_eo$77632 = -52						; size = 4
_isRename$ = -48					; size = 1
_isExtractOrList$ = -47					; size = 1
_isExtractGroupCommand$ = -46				; size = 1
_thereIsArchiveName$ = -45				; size = 1
_curCommandIndex$ = -44					; size = 4
_thereAreSwitchIncludes$ = -37				; size = 1
_codePage$ = -36					; size = 4
_wildcardMatching$ = -29				; size = 1
_recursedType$ = -28					; size = 4
_s$77594 = -24						; size = 4
_fullPathMode$ = -17					; size = 1
_censorPathMode$ = -16					; size = 4
_numNonSwitchStrings$ = -12				; size = 4
_nonSwitchStrings$ = -8					; size = 4
_this$ = -4						; size = 4
_options$ = 8						; size = 4
?Parse2@CArcCmdLineParser@@QAEXAAUCArcCmdLineOptions@@@Z PROC ; CArcCmdLineParser::Parse2
; _this$ = ecx
; Line 1052
	push	ebp
	mov	ebp, esp
	sub	esp, 236				; 000000ecH
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-236]
	mov	ecx, 59					; 0000003bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1053
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	mov	DWORD PTR _nonSwitchStrings$[ebp], eax
; Line 1054
	mov	ecx, DWORD PTR _nonSwitchStrings$[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	mov	DWORD PTR _numNonSwitchStrings$[ebp], eax
; Line 1055
	cmp	DWORD PTR _numNonSwitchStrings$[ebp], 1
	jae	SHORT $LN62@Parse2
; Line 1056
	push	0
	push	OFFSET $SG77584
	lea	ecx, DWORD PTR $T79134[ebp]
	call	??0CArcCmdLineException@@QAE@PBDPB_W@Z	; CArcCmdLineException::CArcCmdLineException
	push	OFFSET __TI2?AUCArcCmdLineException@@
	lea	ecx, DWORD PTR $T79134[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN62@Parse2:
; Line 1058
	mov	edx, DWORD PTR _options$[ebp]
	add	edx, 36					; 00000024H
	push	edx
	push	0
	mov	ecx, DWORD PTR _nonSwitchStrings$[ebp]
	call	??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[]
	push	eax
	call	?ParseArchiveCommand@@YG_NABVUString@@AAUCArcCommand@@@Z ; ParseArchiveCommand
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN61@Parse2
; Line 1059
	push	0
	mov	ecx, DWORD PTR _nonSwitchStrings$[ebp]
	call	??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[]
	mov	ecx, eax
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	push	OFFSET $SG77588
	lea	ecx, DWORD PTR $T79135[ebp]
	call	??0CArcCmdLineException@@QAE@PBDPB_W@Z	; CArcCmdLineException::CArcCmdLineException
	push	OFFSET __TI2?AUCArcCmdLineException@@
	lea	ecx, DWORD PTR $T79135[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN61@Parse2:
; Line 1061
	push	29					; 0000001dH
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	movzx	edx, BYTE PTR [eax]
	test	edx, edx
	je	SHORT $LN60@Parse2
; Line 1062
	push	29					; 0000001dH
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 72					; 00000048H
	call	??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z ; CObjectVector<UString>::operator=
$LN60@Parse2:
; Line 1064
	push	40					; 00000028H
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	movzx	eax, BYTE PTR [eax]
	test	eax, eax
	je	SHORT $LN59@Parse2
; Line 1066
	mov	ecx, DWORD PTR _options$[ebp]
	mov	BYTE PTR [ecx+137], 1
; Line 1067
	push	40					; 00000028H
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	movzx	edx, BYTE PTR [eax+1]
	neg	edx
	sbb	edx, edx
	add	edx, 1
	mov	eax, DWORD PTR _options$[ebp]
	mov	BYTE PTR [eax+136], dl
$LN59@Parse2:
; Line 1070
	mov	DWORD PTR _censorPathMode$[ebp], 0
; Line 1071
	push	41					; 00000029H
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _fullPathMode$[ebp], cl
; Line 1072
	movzx	edx, BYTE PTR _fullPathMode$[ebp]
	test	edx, edx
	je	SHORT $LN58@Parse2
; Line 1074
	mov	DWORD PTR _censorPathMode$[ebp], 2
; Line 1075
	push	0
	push	41					; 00000029H
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	add	eax, 8
	mov	ecx, eax
	call	??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[]
	mov	DWORD PTR _s$77594[ebp], eax
; Line 1076
	mov	ecx, DWORD PTR _s$77594[ebp]
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN58@Parse2
; Line 1078
	push	OFFSET $SG77597
	mov	ecx, DWORD PTR _s$77594[ebp]
	push	ecx
	call	??8@YG_NABVUString@@PB_W@Z		; operator==
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN56@Parse2
; Line 1079
	mov	DWORD PTR _censorPathMode$[ebp], 1
; Line 1080
	jmp	SHORT $LN58@Parse2
$LN56@Parse2:
; Line 1081
	mov	ecx, DWORD PTR _s$77594[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	push	OFFSET $SG77601
	lea	ecx, DWORD PTR $T79136[ebp]
	call	??0CArcCmdLineException@@QAE@PBDPB_W@Z	; CArcCmdLineException::CArcCmdLineException
	push	OFFSET __TI2?AUCArcCmdLineException@@
	lea	eax, DWORD PTR $T79136[ebp]
	push	eax
	call	__CxxThrowException@8
$LN58@Parse2:
; Line 1086
	push	25					; 00000019H
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN54@Parse2
; Line 1087
	push	25					; 00000019H
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	mov	edx, DWORD PTR [eax+4]
	push	edx
	call	?GetRecursedTypeFromIndex@@YG?AW4EEnum@NRecursedType@@H@Z ; GetRecursedTypeFromIndex
	mov	DWORD PTR _recursedType$[ebp], eax
; Line 1088
	jmp	SHORT $LN53@Parse2
$LN54@Parse2:
; Line 1089
	mov	DWORD PTR _recursedType$[ebp], 2
$LN53@Parse2:
; Line 1091
	mov	BYTE PTR _wildcardMatching$[ebp], 1
; Line 1092
	push	39					; 00000027H
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	movzx	eax, BYTE PTR [eax]
	test	eax, eax
	je	SHORT $LN52@Parse2
; Line 1093
	mov	BYTE PTR _wildcardMatching$[ebp], 0
$LN52@Parse2:
; Line 1095
	push	-1
	push	1
	push	34					; 00000022H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?FindCharset@@YGHABVCParser@NCommandLineParser@@I_NH@Z ; FindCharset
	mov	DWORD PTR ?g_CodePage@@3HA, eax		; g_CodePage
; Line 1096
	push	65001					; 0000fde9H
	push	0
	push	33					; 00000021H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?FindCharset@@YGHABVCParser@NCommandLineParser@@I_NH@Z ; FindCharset
	mov	DWORD PTR _codePage$[ebp], eax
; Line 1098
	mov	BYTE PTR _thereAreSwitchIncludes$[ebp], 0
; Line 1100
	push	18					; 00000012H
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	movzx	eax, BYTE PTR [eax]
	test	eax, eax
	je	SHORT $LN51@Parse2
; Line 1102
	mov	BYTE PTR _thereAreSwitchIncludes$[ebp], 1
; Line 1104
	mov	ecx, DWORD PTR _codePage$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _wildcardMatching$[ebp]
	push	edx
	mov	eax, DWORD PTR _recursedType$[ebp]
	push	eax
	push	1
	push	18					; 00000012H
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	call	?AddSwitchWildcardsToCensor@@YGXAAVCCensor@NWildcard@@ABV?$CObjectVector@VUString@@@@_NW4EEnum@NRecursedType@@2H@Z ; AddSwitchWildcardsToCensor
$LN51@Parse2:
; Line 1107
	push	19					; 00000013H
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	movzx	edx, BYTE PTR [eax]
	test	edx, edx
	je	SHORT $LN50@Parse2
; Line 1109
	mov	eax, DWORD PTR _codePage$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _wildcardMatching$[ebp]
	push	ecx
	mov	edx, DWORD PTR _recursedType$[ebp]
	push	edx
	push	0
	push	19					; 00000013H
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	add	eax, 8
	push	eax
	mov	eax, DWORD PTR _options$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	call	?AddSwitchWildcardsToCensor@@YGXAAVCCensor@NWildcard@@ABV?$CObjectVector@VUString@@@@_NW4EEnum@NRecursedType@@2H@Z ; AddSwitchWildcardsToCensor
$LN50@Parse2:
; Line 1111
	mov	DWORD PTR _curCommandIndex$[ebp], 1
; Line 1115
	push	22					; 00000016H
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN65@Parse2
	mov	edx, DWORD PTR _options$[ebp]
	cmp	DWORD PTR [edx+36], 7
	je	SHORT $LN65@Parse2
	mov	eax, DWORD PTR _options$[ebp]
	cmp	DWORD PTR [eax+36], 8
	je	SHORT $LN65@Parse2
	mov	ecx, DWORD PTR _options$[ebp]
	cmp	DWORD PTR [ecx+36], 9
	je	SHORT $LN65@Parse2
	mov	DWORD PTR tv255[ebp], 1
	jmp	SHORT $LN66@Parse2
$LN65@Parse2:
	mov	DWORD PTR tv255[ebp], 0
$LN66@Parse2:
	mov	dl, BYTE PTR tv255[ebp]
	mov	BYTE PTR _thereIsArchiveName$[ebp], dl
; Line 1117
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 36					; 00000024H
	call	?IsFromExtractGroup@CArcCommand@@QBE_NXZ ; CArcCommand::IsFromExtractGroup
	mov	BYTE PTR _isExtractGroupCommand$[ebp], al
; Line 1118
	movzx	eax, BYTE PTR _isExtractGroupCommand$[ebp]
	test	eax, eax
	jne	SHORT $LN67@Parse2
	mov	ecx, DWORD PTR _options$[ebp]
	cmp	DWORD PTR [ecx+36], 6
	je	SHORT $LN67@Parse2
	mov	DWORD PTR tv265[ebp], 0
	jmp	SHORT $LN68@Parse2
$LN67@Parse2:
	mov	DWORD PTR tv265[ebp], 1
$LN68@Parse2:
	mov	dl, BYTE PTR tv265[ebp]
	mov	BYTE PTR _isExtractOrList$[ebp], dl
; Line 1119
	mov	eax, DWORD PTR _options$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+36], 10			; 0000000aH
	sete	cl
	mov	BYTE PTR _isRename$[ebp], cl
; Line 1121
	movzx	edx, BYTE PTR _isExtractOrList$[ebp]
	test	edx, edx
	jne	SHORT $LN48@Parse2
	movzx	eax, BYTE PTR _isRename$[ebp]
	test	eax, eax
	je	SHORT $LN49@Parse2
$LN48@Parse2:
	mov	ecx, DWORD PTR _options$[ebp]
	movzx	edx, BYTE PTR [ecx+7]
	test	edx, edx
	je	SHORT $LN49@Parse2
; Line 1122
	mov	BYTE PTR _thereIsArchiveName$[ebp], 0
$LN49@Parse2:
; Line 1124
	push	38					; 00000026H
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	movzx	eax, BYTE PTR [eax]
	test	eax, eax
	je	SHORT $LN47@Parse2
; Line 1125
	push	38					; 00000026H
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?ParseArcNameMode@@YG?BW4EArcNameMode@@H@Z ; ParseArcNameMode
	mov	edx, DWORD PTR _options$[ebp]
	mov	DWORD PTR [edx+344], eax
$LN47@Parse2:
; Line 1127
	movzx	eax, BYTE PTR _thereIsArchiveName$[ebp]
	test	eax, eax
	je	$LN46@Parse2
; Line 1129
	mov	ecx, DWORD PTR _curCommandIndex$[ebp]
	cmp	ecx, DWORD PTR _numNonSwitchStrings$[ebp]
	jb	SHORT $LN45@Parse2
; Line 1130
	push	0
	push	OFFSET $SG77623
	lea	ecx, DWORD PTR $T79141[ebp]
	call	??0CArcCmdLineException@@QAE@PBDPB_W@Z	; CArcCmdLineException::CArcCmdLineException
	push	OFFSET __TI2?AUCArcCmdLineException@@
	lea	edx, DWORD PTR $T79141[ebp]
	push	edx
	call	__CxxThrowException@8
$LN45@Parse2:
; Line 1131
	mov	eax, DWORD PTR _curCommandIndex$[ebp]
	mov	DWORD PTR tv306[ebp], eax
	mov	ecx, DWORD PTR _curCommandIndex$[ebp]
	add	ecx, 1
	mov	DWORD PTR _curCommandIndex$[ebp], ecx
	mov	edx, DWORD PTR tv306[ebp]
	push	edx
	mov	ecx, DWORD PTR _nonSwitchStrings$[ebp]
	call	??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[]
	push	eax
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 40					; 00000028H
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
; Line 1132
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 40					; 00000028H
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN46@Parse2
; Line 1133
	push	0
	push	OFFSET $SG77627
	lea	ecx, DWORD PTR $T79142[ebp]
	call	??0CArcCmdLineException@@QAE@PBDPB_W@Z	; CArcCmdLineException::CArcCmdLineException
	push	OFFSET __TI2?AUCArcCmdLineException@@
	lea	ecx, DWORD PTR $T79142[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN46@Parse2:
; Line 1142
	movzx	edx, BYTE PTR _isRename$[ebp]
	test	edx, edx
	je	SHORT $LN69@Parse2
	mov	eax, DWORD PTR _options$[ebp]
	add	eax, 436				; 000001b4H
	mov	DWORD PTR tv330[ebp], eax
	jmp	SHORT $LN70@Parse2
$LN69@Parse2:
	mov	DWORD PTR tv330[ebp], 0
$LN70@Parse2:
	mov	ecx, DWORD PTR _codePage$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _thereAreSwitchIncludes$[ebp]
	push	edx
	movzx	eax, BYTE PTR _wildcardMatching$[ebp]
	push	eax
	mov	ecx, DWORD PTR _recursedType$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nonSwitchStrings$[ebp]
	push	edx
	mov	eax, DWORD PTR _options$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _curCommandIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv330[ebp]
	push	edx
	call	?AddToCensorFromNonSwitchesStrings@@YGXPAV?$CObjectVector@UCRenamePair@@@@IAAVCCensor@NWildcard@@ABV?$CObjectVector@VUString@@@@W4EEnum@NRecursedType@@_N4H@Z ; AddToCensorFromNonSwitchesStrings
; Line 1144
	push	10					; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	mov	ecx, DWORD PTR _options$[ebp]
	mov	dl, BYTE PTR [eax]
	mov	BYTE PTR [ecx+10], dl
; Line 1148
	push	50					; 00000032H
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	mov	ecx, DWORD PTR _options$[ebp]
	mov	dl, BYTE PTR [eax]
	mov	BYTE PTR [ecx+52], dl
; Line 1149
	mov	eax, DWORD PTR _options$[ebp]
	movzx	ecx, BYTE PTR [eax+52]
	test	ecx, ecx
	je	SHORT $LN43@Parse2
; Line 1150
	push	0
	push	50					; 00000032H
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	add	eax, 8
	mov	ecx, eax
	call	??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[]
	push	eax
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 56					; 00000038H
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
$LN43@Parse2:
; Line 1153
	push	11					; 0000000bH
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	mov	edx, DWORD PTR _options$[ebp]
	mov	al, BYTE PTR [eax]
	mov	BYTE PTR [edx+11], al
; Line 1155
	push	13					; 0000000dH
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN42@Parse2
; Line 1156
	push	0
	push	13					; 0000000dH
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	add	eax, 8
	mov	ecx, eax
	call	??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[]
	push	eax
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 484				; 000001e4H
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
$LN42@Parse2:
; Line 1158
	push	14					; 0000000eH
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 496				; 000001f0H
	call	??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z ; CObjectVector<UString>::operator=
; Line 1160
	mov	edx, DWORD PTR _options$[ebp]
	add	edx, 124				; 0000007cH
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?SetMethodOptions@@YGXABVCParser@NCommandLineParser@@AAV?$CObjectVector@UCProperty@@@@@Z ; SetMethodOptions
; Line 1162
	push	44					; 0000002cH
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN41@Parse2
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 172				; 000000acH
	call	?SetTrueTrue@CBoolPair@@QAEXXZ		; CBoolPair::SetTrueTrue
$LN41@Parse2:
; Line 1164
	mov	edx, DWORD PTR _options$[ebp]
	add	edx, 174				; 000000aeH
	push	edx
	push	45					; 0000002dH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?SetBoolPair@@YGXAAVCParser@NCommandLineParser@@IAAUCBoolPair@@@Z ; SetBoolPair
; Line 1165
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 176				; 000000b0H
	push	ecx
	push	42					; 0000002aH
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?SetBoolPair@@YGXAAVCParser@NCommandLineParser@@IAAUCBoolPair@@@Z ; SetBoolPair
; Line 1166
	mov	eax, DWORD PTR _options$[ebp]
	add	eax, 178				; 000000b2H
	push	eax
	push	43					; 0000002bH
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?SetBoolPair@@YGXAAVCParser@NCommandLineParser@@IAAUCBoolPair@@@Z ; SetBoolPair
; Line 1168
	movzx	edx, BYTE PTR _isExtractOrList$[ebp]
	test	edx, edx
	je	$LN40@Parse2
; Line 1170
	mov	eax, DWORD PTR _options$[ebp]
	add	eax, 136				; 00000088H
	mov	DWORD PTR _eo$77632[ebp], eax
; Line 1173
	mov	ecx, DWORD PTR _eo$77632[ebp]
	add	ecx, 24					; 00000018H
	mov	DWORD PTR _nt$77633[ebp], ecx
; Line 1174
	mov	edx, DWORD PTR _options$[ebp]
	mov	ax, WORD PTR [edx+172]
	mov	ecx, DWORD PTR _nt$77633[ebp]
	mov	WORD PTR [ecx], ax
; Line 1176
	mov	edx, DWORD PTR _options$[ebp]
	mov	ax, WORD PTR [edx+174]
	mov	ecx, DWORD PTR _nt$77633[ebp]
	mov	WORD PTR [ecx+6], ax
; Line 1177
	mov	edx, DWORD PTR _options$[ebp]
	movzx	eax, BYTE PTR [edx+175]
	test	eax, eax
	jne	SHORT $LN39@Parse2
; Line 1178
	mov	ecx, DWORD PTR _nt$77633[ebp]
	mov	BYTE PTR [ecx+6], 1
$LN39@Parse2:
; Line 1180
	mov	edx, DWORD PTR _options$[ebp]
	mov	ax, WORD PTR [edx+176]
	mov	ecx, DWORD PTR _nt$77633[ebp]
	mov	WORD PTR [ecx+4], ax
; Line 1181
	mov	edx, DWORD PTR _options$[ebp]
	movzx	eax, BYTE PTR [edx+177]
	test	eax, eax
	jne	SHORT $LN38@Parse2
; Line 1182
	mov	ecx, DWORD PTR _nt$77633[ebp]
	mov	BYTE PTR [ecx+4], 1
$LN38@Parse2:
; Line 1184
	mov	edx, DWORD PTR _options$[ebp]
	mov	ax, WORD PTR [edx+178]
	mov	ecx, DWORD PTR _nt$77633[ebp]
	mov	WORD PTR [ecx+2], ax
; Line 1185
	mov	edx, DWORD PTR _options$[ebp]
	movzx	eax, BYTE PTR [edx+179]
	test	eax, eax
	jne	SHORT $LN37@Parse2
; Line 1186
	mov	ecx, DWORD PTR _nt$77633[ebp]
	mov	BYTE PTR [ecx+2], 1
$LN37@Parse2:
; Line 1188
	push	46					; 0000002eH
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	mov	edx, DWORD PTR _nt$77633[ebp]
	mov	al, BYTE PTR [eax]
	mov	BYTE PTR [edx+8], al
; Line 1189
	push	47					; 0000002fH
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	mov	ecx, DWORD PTR _nt$77633[ebp]
	mov	dl, BYTE PTR [eax]
	mov	BYTE PTR [ecx+9], dl
; Line 1192
	push	2
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 12					; 0000000cH
	call	?AddPathsToCensor@CCensor@NWildcard@@QAEXW4ECensorPathMode@2@@Z ; NWildcard::CCensor::AddPathsToCensor
; Line 1193
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 12					; 0000000cH
	call	?ExtendExclude@CCensor@NWildcard@@QAEXXZ ; NWildcard::CCensor::ExtendExclude
; Line 1196
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 12					; 0000000cH
	call	?AllAreRelative@CCensor@NWildcard@@QBE_NXZ ; NWildcard::CCensor::AllAreRelative
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN36@Parse2
; Line 1197
	push	0
	push	OFFSET $SG77640
	lea	ecx, DWORD PTR $T79145[ebp]
	call	??0CArcCmdLineException@@QAE@PBDPB_W@Z	; CArcCmdLineException::CArcCmdLineException
	push	OFFSET __TI2?AUCArcCmdLineException@@
	lea	ecx, DWORD PTR $T79145[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN36@Parse2:
; Line 1199
	mov	edx, DWORD PTR _options$[ebp]
	add	edx, 88					; 00000058H
	mov	DWORD PTR _arcCensor$77641[ebp], edx
; Line 1201
	push	20					; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	movzx	eax, BYTE PTR [eax]
	test	eax, eax
	je	SHORT $LN35@Parse2
; Line 1202
	mov	ecx, DWORD PTR _codePage$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _wildcardMatching$[ebp]
	push	edx
	push	2
	push	1
	push	20					; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	add	eax, 8
	push	eax
	mov	eax, DWORD PTR _arcCensor$77641[ebp]
	push	eax
	call	?AddSwitchWildcardsToCensor@@YGXAAVCCensor@NWildcard@@ABV?$CObjectVector@VUString@@@@_NW4EEnum@NRecursedType@@2H@Z ; AddSwitchWildcardsToCensor
$LN35@Parse2:
; Line 1203
	push	21					; 00000015H
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN34@Parse2
; Line 1204
	mov	edx, DWORD PTR _codePage$[ebp]
	push	edx
	movzx	eax, BYTE PTR _wildcardMatching$[ebp]
	push	eax
	push	2
	push	0
	push	21					; 00000015H
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _arcCensor$77641[ebp]
	push	ecx
	call	?AddSwitchWildcardsToCensor@@YGXAAVCCensor@NWildcard@@ABV?$CObjectVector@VUString@@@@_NW4EEnum@NRecursedType@@2H@Z ; AddSwitchWildcardsToCensor
$LN34@Parse2:
; Line 1206
	movzx	edx, BYTE PTR _thereIsArchiveName$[ebp]
	test	edx, edx
	je	SHORT $LN33@Parse2
; Line 1207
	movzx	eax, BYTE PTR _wildcardMatching$[ebp]
	push	eax
	push	2
	push	1
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 40					; 00000028H
	push	ecx
	mov	edx, DWORD PTR _arcCensor$77641[ebp]
	push	edx
	call	?AddNameToCensor@@YGXAAVCCensor@NWildcard@@ABVUString@@_NW4EEnum@NRecursedType@@2@Z ; AddNameToCensor
$LN33@Parse2:
; Line 1209
	push	0
	mov	ecx, DWORD PTR _arcCensor$77641[ebp]
	call	?AddPathsToCensor@CCensor@NWildcard@@QAEXW4ECensorPathMode@2@@Z ; NWildcard::CCensor::AddPathsToCensor
; Line 1212
	mov	eax, DWORD PTR _arcCensor$77641[ebp]
	push	eax
	call	?ConvertToLongNames@@YGXAAVCCensor@NWildcard@@@Z ; ConvertToLongNames
; Line 1215
	mov	ecx, DWORD PTR _arcCensor$77641[ebp]
	call	?ExtendExclude@CCensor@NWildcard@@QAEXXZ ; NWildcard::CCensor::ExtendExclude
; Line 1217
	mov	ecx, DWORD PTR _options$[ebp]
	movzx	edx, BYTE PTR [ecx+7]
	test	edx, edx
	je	SHORT $LN32@Parse2
; Line 1218
	push	30					; 0000001eH
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	add	eax, 8
	mov	ecx, eax
	call	?Front@?$CObjectVector@VUString@@@@QBEABVUString@@XZ ; CObjectVector<UString>::Front
	push	eax
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 112				; 00000070H
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
$LN32@Parse2:
; Line 1220
	movzx	eax, BYTE PTR _isExtractGroupCommand$[ebp]
	test	eax, eax
	je	$LN31@Parse2
; Line 1222
	mov	ecx, DWORD PTR _options$[ebp]
	movzx	edx, BYTE PTR [ecx+8]
	test	edx, edx
	je	SHORT $LN30@Parse2
	mov	eax, DWORD PTR _options$[ebp]
	movzx	ecx, BYTE PTR [eax+5]
	test	ecx, ecx
	je	SHORT $LN30@Parse2
	mov	edx, DWORD PTR _options$[ebp]
	movzx	eax, BYTE PTR [edx+6]
	test	eax, eax
	je	SHORT $LN30@Parse2
; Line 1223
	push	0
	mov	ecx, DWORD PTR _kSameTerminalError
	push	ecx
	lea	ecx, DWORD PTR $T79146[ebp]
	call	??0CArcCmdLineException@@QAE@PBDPB_W@Z	; CArcCmdLineException::CArcCmdLineException
	push	OFFSET __TI2?AUCArcCmdLineException@@
	lea	edx, DWORD PTR $T79146[ebp]
	push	edx
	call	__CxxThrowException@8
$LN30@Parse2:
; Line 1224
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	movzx	eax, BYTE PTR [eax]
	test	eax, eax
	je	SHORT $LN29@Parse2
; Line 1226
	push	0
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	add	eax, 8
	mov	ecx, eax
	call	??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[]
	push	eax
	mov	ecx, DWORD PTR _eo$77632[ebp]
	add	ecx, 12					; 0000000cH
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
; Line 1227
	mov	ecx, DWORD PTR _eo$77632[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	call	?NormalizeDirPathPrefix@NName@NFile@NWindows@@YGXAAVUString@@@Z ; NWindows::NFile::NName::NormalizeDirPathPrefix
$LN29@Parse2:
; Line 1230
	mov	edx, DWORD PTR _eo$77632[ebp]
	mov	DWORD PTR [edx+8], 0
; Line 1231
	push	12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	movzx	eax, BYTE PTR [eax]
	test	eax, eax
	je	SHORT $LN28@Parse2
; Line 1233
	push	12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _eo$77632[ebp]
	mov	eax, DWORD PTR _k_OverwriteModes[ecx*4]
	mov	DWORD PTR [edx+8], eax
; Line 1234
	mov	ecx, DWORD PTR _eo$77632[ebp]
	mov	BYTE PTR [ecx+3], 1
	jmp	SHORT $LN31@Parse2
$LN28@Parse2:
; Line 1236
	mov	edx, DWORD PTR _options$[ebp]
	movzx	eax, BYTE PTR [edx+10]
	test	eax, eax
	je	SHORT $LN31@Parse2
; Line 1238
	mov	ecx, DWORD PTR _eo$77632[ebp]
	mov	DWORD PTR [ecx+8], 1
; Line 1239
	mov	edx, DWORD PTR _eo$77632[ebp]
	mov	BYTE PTR [edx+3], 1
$LN31@Parse2:
; Line 1243
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 36					; 00000024H
	call	?GetPathMode@CArcCommand@@QBE?AW4EEnum@NPathMode@NExtract@@XZ ; CArcCommand::GetPathMode
	mov	ecx, DWORD PTR _eo$77632[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 1244
	cmp	DWORD PTR _censorPathMode$[ebp], 2
	jne	SHORT $LN25@Parse2
; Line 1246
	mov	edx, DWORD PTR _eo$77632[ebp]
	mov	DWORD PTR [edx+4], 3
; Line 1247
	mov	eax, DWORD PTR _eo$77632[ebp]
	mov	BYTE PTR [eax+2], 1
	jmp	SHORT $LN24@Parse2
$LN25@Parse2:
; Line 1249
	cmp	DWORD PTR _censorPathMode$[ebp], 1
	jne	SHORT $LN24@Parse2
; Line 1251
	mov	ecx, DWORD PTR _eo$77632[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 1252
	mov	edx, DWORD PTR _eo$77632[ebp]
	mov	BYTE PTR [edx+2], 1
$LN24@Parse2:
; Line 1254
	jmp	$LN64@Parse2
$LN40@Parse2:
; Line 1255
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 36					; 00000024H
	call	?IsFromUpdateGroup@CArcCommand@@QBE_NXZ	; CArcCommand::IsFromUpdateGroup
	movzx	eax, al
	test	eax, eax
	je	$LN21@Parse2
; Line 1257
	push	20					; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN20@Parse2
; Line 1258
	push	0
	push	OFFSET $SG77663
	lea	ecx, DWORD PTR $T79147[ebp]
	call	??0CArcCmdLineException@@QAE@PBDPB_W@Z	; CArcCmdLineException::CArcCmdLineException
	push	OFFSET __TI2?AUCArcCmdLineException@@
	lea	edx, DWORD PTR $T79147[ebp]
	push	edx
	call	__CxxThrowException@8
$LN20@Parse2:
; Line 1260
	mov	eax, DWORD PTR _options$[ebp]
	add	eax, 184				; 000000b8H
	mov	DWORD PTR _updateOptions$77664[ebp], eax
; Line 1262
	mov	ecx, DWORD PTR _updateOptions$77664[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR _options$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	call	?SetAddCommandOptions@@YGXW4EEnum@NCommandType@@ABVCParser@NCommandLineParser@@AAUCUpdateOptions@@@Z ; SetAddCommandOptions
; Line 1264
	mov	edx, DWORD PTR _options$[ebp]
	add	edx, 124				; 0000007cH
	push	edx
	mov	ecx, DWORD PTR _updateOptions$77664[ebp]
	add	ecx, 40					; 00000028H
	call	??4?$CObjectVector@UCProperty@@@@QAEAAV0@ABV0@@Z ; CObjectVector<CProperty>::operator=
; Line 1266
	push	36					; 00000024H
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	movzx	eax, BYTE PTR [eax]
	test	eax, eax
	je	SHORT $LN19@Parse2
; Line 1267
	mov	ecx, DWORD PTR _updateOptions$77664[ebp]
	mov	BYTE PTR [ecx+180], 1
$LN19@Parse2:
; Line 1269
	mov	edx, DWORD PTR _updateOptions$77664[ebp]
	mov	eax, DWORD PTR _censorPathMode$[ebp]
	mov	DWORD PTR [edx+224], eax
; Line 1271
	mov	ecx, DWORD PTR _options$[ebp]
	mov	dx, WORD PTR [ecx+174]
	mov	eax, DWORD PTR _updateOptions$77664[ebp]
	mov	WORD PTR [eax+242], dx
; Line 1272
	mov	ecx, DWORD PTR _options$[ebp]
	mov	dx, WORD PTR [ecx+172]
	mov	eax, DWORD PTR _updateOptions$77664[ebp]
	mov	WORD PTR [eax+240], dx
; Line 1273
	mov	ecx, DWORD PTR _options$[ebp]
	mov	dx, WORD PTR [ecx+176]
	mov	eax, DWORD PTR _updateOptions$77664[ebp]
	mov	WORD PTR [eax+244], dx
; Line 1274
	mov	ecx, DWORD PTR _options$[ebp]
	mov	dx, WORD PTR [ecx+178]
	mov	eax, DWORD PTR _updateOptions$77664[ebp]
	mov	WORD PTR [eax+246], dx
; Line 1276
	push	28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	mov	ecx, DWORD PTR _updateOptions$77664[ebp]
	mov	dl, BYTE PTR [eax]
	mov	BYTE PTR [ecx+197], dl
; Line 1277
	mov	eax, DWORD PTR _updateOptions$77664[ebp]
	movzx	ecx, BYTE PTR [eax+197]
	test	ecx, ecx
	je	SHORT $LN18@Parse2
; Line 1279
	push	28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	add	eax, 8
	mov	ecx, eax
	call	?Front@?$CObjectVector@VUString@@@@QBEABVUString@@XZ ; CObjectVector<UString>::Front
	push	eax
	mov	ecx, DWORD PTR _updateOptions$77664[ebp]
	add	ecx, 200				; 000000c8H
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
; Line 1280
	mov	ecx, DWORD PTR _updateOptions$77664[ebp]
	add	ecx, 200				; 000000c8H
	call	?Len@UString@@QBEIXZ			; UString::Len
	test	eax, eax
	jbe	SHORT $LN18@Parse2
; Line 1281
	mov	ecx, DWORD PTR _updateOptions$77664[ebp]
	add	ecx, 200				; 000000c8H
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	movzx	edx, WORD PTR [eax]
	cmp	edx, 46					; 0000002eH
	jne	SHORT $LN18@Parse2
; Line 1283
	mov	eax, DWORD PTR _updateOptions$77664[ebp]
	mov	BYTE PTR [eax+198], 1
; Line 1284
	push	0
	mov	ecx, DWORD PTR _updateOptions$77664[ebp]
	add	ecx, 200				; 000000c8H
	call	?Delete@UString@@QAEXI@Z		; UString::Delete
$LN18@Parse2:
; Line 1288
	mov	ecx, DWORD PTR _updateOptions$77664[ebp]
	mov	edx, DWORD PTR _options$[ebp]
	mov	al, BYTE PTR [edx+8]
	mov	BYTE PTR [ecx+196], al
; Line 1289
	mov	ecx, DWORD PTR _updateOptions$77664[ebp]
	mov	edx, DWORD PTR _options$[ebp]
	mov	al, BYTE PTR [edx+7]
	mov	BYTE PTR [ecx+181], al
; Line 1291
	push	48					; 00000030H
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	mov	ecx, DWORD PTR _updateOptions$77664[ebp]
	mov	dl, BYTE PTR [eax]
	mov	BYTE PTR [ecx+248], dl
; Line 1292
	push	49					; 00000031H
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	mov	ecx, DWORD PTR _updateOptions$77664[ebp]
	mov	dl, BYTE PTR [eax]
	mov	BYTE PTR [ecx+249], dl
; Line 1294
	mov	eax, DWORD PTR _updateOptions$77664[ebp]
	movzx	ecx, BYTE PTR [eax+196]
	test	ecx, ecx
	je	SHORT $LN15@Parse2
	mov	edx, DWORD PTR _updateOptions$77664[ebp]
	movzx	eax, BYTE PTR [edx+197]
	test	eax, eax
	je	SHORT $LN15@Parse2
; Line 1295
	push	0
	push	OFFSET $SG77672
	lea	ecx, DWORD PTR $T79148[ebp]
	call	??0CArcCmdLineException@@QAE@PBDPB_W@Z	; CArcCmdLineException::CArcCmdLineException
	push	OFFSET __TI2?AUCArcCmdLineException@@
	lea	ecx, DWORD PTR $T79148[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN15@Parse2:
; Line 1296
	mov	edx, DWORD PTR _updateOptions$77664[ebp]
	movzx	eax, BYTE PTR [edx+196]
	test	eax, eax
	je	SHORT $LN14@Parse2
	mov	ecx, DWORD PTR _options$[ebp]
	movzx	edx, BYTE PTR [ecx+5]
	test	edx, edx
	je	SHORT $LN14@Parse2
; Line 1297
	push	0
	mov	eax, DWORD PTR _kTerminalOutError
	push	eax
	lea	ecx, DWORD PTR $T79149[ebp]
	call	??0CArcCmdLineException@@QAE@PBDPB_W@Z	; CArcCmdLineException::CArcCmdLineException
	push	OFFSET __TI2?AUCArcCmdLineException@@
	lea	ecx, DWORD PTR $T79149[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN14@Parse2:
; Line 1298
	mov	edx, DWORD PTR _updateOptions$77664[ebp]
	movzx	eax, BYTE PTR [edx+181]
	test	eax, eax
	je	SHORT $LN13@Parse2
; Line 1299
	push	30					; 0000001eH
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	add	eax, 8
	mov	ecx, eax
	call	?Front@?$CObjectVector@VUString@@@@QBEABVUString@@XZ ; CObjectVector<UString>::Front
	push	eax
	mov	ecx, DWORD PTR _updateOptions$77664[ebp]
	add	ecx, 184				; 000000b8H
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
$LN13@Parse2:
; Line 1301
	mov	ecx, DWORD PTR _options$[ebp]
	cmp	DWORD PTR [ecx+36], 10			; 0000000aH
	jne	SHORT $LN12@Parse2
; Line 1302
	mov	ecx, DWORD PTR _updateOptions$77664[ebp]
	add	ecx, 56					; 00000038H
	call	?Size@?$CObjectVector@UCUpdateArchiveCommand@@@@QBEIXZ ; CObjectVector<CUpdateArchiveCommand>::Size
	cmp	eax, 1
	je	SHORT $LN12@Parse2
; Line 1303
	push	0
	push	OFFSET $SG77681
	lea	ecx, DWORD PTR $T79150[ebp]
	call	??0CArcCmdLineException@@QAE@PBDPB_W@Z	; CArcCmdLineException::CArcCmdLineException
	push	OFFSET __TI2?AUCArcCmdLineException@@
	lea	edx, DWORD PTR $T79150[ebp]
	push	edx
	call	__CxxThrowException@8
$LN12@Parse2:
; Line 1304
	jmp	$LN64@Parse2
$LN21@Parse2:
; Line 1305
	mov	eax, DWORD PTR _options$[ebp]
	cmp	DWORD PTR [eax+36], 7
	jne	$LN9@Parse2
; Line 1307
	mov	ecx, DWORD PTR _options$[ebp]
	mov	DWORD PTR [ecx+524], 1
; Line 1308
	mov	edx, DWORD PTR _curCommandIndex$[ebp]
	cmp	edx, DWORD PTR _numNonSwitchStrings$[ebp]
	jae	SHORT $LN8@Parse2
; Line 1310
	mov	eax, DWORD PTR _options$[ebp]
	add	eax, 524				; 0000020cH
	push	eax
	mov	ecx, DWORD PTR _curCommandIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _nonSwitchStrings$[ebp]
	call	??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[]
	mov	ecx, eax
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	?StringToUInt32@@YG_NPB_WAAI@Z		; StringToUInt32
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN7@Parse2
; Line 1311
	mov	eax, DWORD PTR _curCommandIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nonSwitchStrings$[ebp]
	call	??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[]
	mov	ecx, eax
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	push	OFFSET $SG77688
	lea	ecx, DWORD PTR $T79151[ebp]
	call	??0CArcCmdLineException@@QAE@PBDPB_W@Z	; CArcCmdLineException::CArcCmdLineException
	push	OFFSET __TI2?AUCArcCmdLineException@@
	lea	ecx, DWORD PTR $T79151[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN7@Parse2:
; Line 1312
	mov	edx, DWORD PTR _curCommandIndex$[ebp]
	add	edx, 1
	mov	DWORD PTR _curCommandIndex$[ebp], edx
$LN8@Parse2:
; Line 1314
	jmp	$LN64@Parse2
$LN9@Parse2:
; Line 1315
	mov	eax, DWORD PTR _options$[ebp]
	cmp	DWORD PTR [eax+36], 9
	jne	SHORT $LN5@Parse2
; Line 1317
	mov	ecx, DWORD PTR _censorPathMode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 12					; 0000000cH
	call	?AddPathsToCensor@CCensor@NWildcard@@QAEXW4ECensorPathMode@2@@Z ; NWildcard::CCensor::AddPathsToCensor
; Line 1318
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 12					; 0000000cH
	call	?ExtendExclude@CCensor@NWildcard@@QAEXXZ ; NWildcard::CCensor::ExtendExclude
; Line 1320
	mov	edx, DWORD PTR _options$[ebp]
	add	edx, 464				; 000001d0H
	mov	DWORD PTR _hashOptions$77691[ebp], edx
; Line 1321
	mov	eax, DWORD PTR _hashOptions$77691[ebp]
	mov	ecx, DWORD PTR _censorPathMode$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 1322
	mov	edx, DWORD PTR _options$[ebp]
	add	edx, 72					; 00000048H
	push	edx
	mov	ecx, DWORD PTR _hashOptions$77691[ebp]
	call	??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z ; CObjectVector<UString>::operator=
; Line 1323
	push	36					; 00000024H
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	movzx	eax, BYTE PTR [eax]
	test	eax, eax
	je	SHORT $LN4@Parse2
; Line 1324
	mov	ecx, DWORD PTR _hashOptions$77691[ebp]
	mov	BYTE PTR [ecx+12], 1
$LN4@Parse2:
; Line 1325
	mov	edx, DWORD PTR _hashOptions$77691[ebp]
	mov	eax, DWORD PTR _options$[ebp]
	mov	cl, BYTE PTR [eax+7]
	mov	BYTE PTR [edx+13], cl
; Line 1326
	mov	edx, DWORD PTR _hashOptions$77691[ebp]
	mov	eax, DWORD PTR _options$[ebp]
	mov	cl, BYTE PTR [eax+174]
	mov	BYTE PTR [edx+14], cl
	jmp	SHORT $LN64@Parse2
$LN5@Parse2:
; Line 1328
	mov	edx, DWORD PTR _options$[ebp]
	cmp	DWORD PTR [edx+36], 8
	jne	SHORT $LN2@Parse2
; Line 1331
	jmp	SHORT $LN64@Parse2
$LN2@Parse2:
; Line 1332
	mov	DWORD PTR $T79152[ebp], 1225742119	; 490f5727H
	mov	DWORD PTR $T79152[ebp+4], 2
	push	OFFSET __TI1_J
	lea	eax, DWORD PTR $T79152[ebp]
	push	eax
	call	__CxxThrowException@8
$LN64@Parse2:
; Line 1333
	pop	edi
	add	esp, 236				; 000000ecH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Parse2@CArcCmdLineParser@@QAEXAAUCArcCmdLineOptions@@@Z ENDP ; CArcCmdLineParser::Parse2
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SetTrueTrue@CBoolPair@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SetTrueTrue@CBoolPair@@QAEXXZ PROC			; CBoolPair::SetTrueTrue, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mytypes.h
; Line 24
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 25
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax], 1
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1], 1
; Line 27
	mov	esp, ebp
	pop	ebp
	ret	0
?SetTrueTrue@CBoolPair@@QAEXXZ ENDP			; CBoolPair::SetTrueTrue
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Len@UString@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Len@UString@@QBEIXZ PROC				; UString::Len, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 472
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Len@UString@@QBEIXZ ENDP				; UString::Len
_TEXT	ENDS
EXTRN	__imp__wcscmp:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??8@YG_NABVUString@@PB_W@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
??8@YG_NABVUString@@PB_W@Z PROC				; operator==, COMDAT
; Line 617
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, esp
	mov	eax, DWORD PTR _s2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s1$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	DWORD PTR __imp__wcscmp
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	neg	eax
	sbb	eax, eax
	add	eax, 1
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
??8@YG_NABVUString@@PB_W@Z ENDP				; operator==
_TEXT	ENDS
PUBLIC	?Front@?$CObjectVector@UCPair@NWildcard@@@@QBEABUCPair@NWildcard@@XZ ; CObjectVector<NWildcard::CPair>::Front
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?AllAreRelative@CCensor@NWildcard@@QBE_NXZ
_TEXT	SEGMENT
tv73 = -8						; size = 4
_this$ = -4						; size = 4
?AllAreRelative@CCensor@NWildcard@@QBE_NXZ PROC		; NWildcard::CCensor::AllAreRelative, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\wildcard.h
; Line 128
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CObjectVector@UCPair@NWildcard@@@@QBEIXZ ; CObjectVector<NWildcard::CPair>::Size
	cmp	eax, 1
	jne	SHORT $LN3@AllAreRela
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Front@?$CObjectVector@UCPair@NWildcard@@@@QBEABUCPair@NWildcard@@XZ ; CObjectVector<NWildcard::CPair>::Front
	mov	ecx, eax
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@AllAreRela
	mov	DWORD PTR tv73[ebp], 1
	jmp	SHORT $LN4@AllAreRela
$LN3@AllAreRela:
	mov	DWORD PTR tv73[ebp], 0
$LN4@AllAreRela:
	mov	al, BYTE PTR tv73[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?AllAreRelative@CCensor@NWildcard@@QBE_NXZ ENDP		; NWildcard::CCensor::AllAreRelative
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
_TEXT	SEGMENT
tv64 = -4						; size = 4
_postCharIndex$ = 8					; size = 4
?ParseArcNameMode@@YG?BW4EArcNameMode@@H@Z PROC		; ParseArcNameMode
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\archivecommandline.cpp
; Line 159
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 160
	mov	eax, DWORD PTR _postCharIndex$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 1
	je	SHORT $LN3@ParseArcNa
	cmp	DWORD PTR tv64[ebp], 2
	je	SHORT $LN2@ParseArcNa
	jmp	SHORT $LN1@ParseArcNa
$LN3@ParseArcNa:
; Line 162
	mov	eax, 1
	jmp	SHORT $LN6@ParseArcNa
$LN2@ParseArcNa:
; Line 163
	mov	eax, 2
	jmp	SHORT $LN6@ParseArcNa
$LN1@ParseArcNa:
; Line 164
	xor	eax, eax
$LN6@ParseArcNa:
; Line 166
	mov	esp, ebp
	pop	ebp
	ret	4
?ParseArcNameMode@@YG?BW4EArcNameMode@@H@Z ENDP		; ParseArcNameMode
; Function compile flags: /Odtp /RTCsu
tv64 = -4						; size = 4
_index$ = 8						; size = 4
?GetRecursedTypeFromIndex@@YG?AW4EEnum@NRecursedType@@H@Z PROC ; GetRecursedTypeFromIndex
; Line 315
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 316
	mov	eax, DWORD PTR _index$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 0
	je	SHORT $LN3@GetRecurse
	cmp	DWORD PTR tv64[ebp], 1
	je	SHORT $LN2@GetRecurse
	jmp	SHORT $LN1@GetRecurse
$LN3@GetRecurse:
; Line 319
	mov	eax, 1
	jmp	SHORT $LN6@GetRecurse
$LN2@GetRecurse:
; Line 321
	mov	eax, 2
	jmp	SHORT $LN6@GetRecurse
$LN1@GetRecurse:
; Line 323
	xor	eax, eax
$LN6@GetRecurse:
; Line 325
	mov	esp, ebp
	pop	ebp
	ret	4
?GetRecursedTypeFromIndex@@YG?AW4EEnum@NRecursedType@@H@Z ENDP ; GetRecursedTypeFromIndex
_TEXT	ENDS
PUBLIC	?MakeLower_Ascii@UString@@QAEXXZ		; UString::MakeLower_Ascii
EXTRN	?FindCharPosInString@@YGHPBDD@Z:PROC		; FindCharPosInString
xdata$x	SEGMENT
__unwindtable$?ParseArchiveCommand@@YG_NABVUString@@AAUCArcCommand@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ParseArchiveCommand@@YG_NABVUString@@AAUCArcCommand@@@Z$0
__ehfuncinfo$?ParseArchiveCommand@@YG_NABVUString@@AAUCArcCommand@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ParseArchiveCommand@@YG_NABVUString@@AAUCArcCommand@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T79170 = -41						; size = 1
$T79169 = -40						; size = 1
$T79168 = -39						; size = 1
$T79167 = -38						; size = 1
$T79166 = -37						; size = 1
_index$77028 = -36					; size = 4
_s$ = -28						; size = 12
__$EHRec$ = -12						; size = 12
_commandString$ = 8					; size = 4
_command$ = 12						; size = 4
?ParseArchiveCommand@@YG_NABVUString@@AAUCArcCommand@@@Z PROC ; ParseArchiveCommand
; Line 330
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ParseArchiveCommand@@YG_NABVUString@@AAUCArcCommand@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-44], eax
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 331
	mov	eax, DWORD PTR _commandString$[ebp]
	push	eax
	lea	ecx, DWORD PTR _s$[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 332
	lea	ecx, DWORD PTR _s$[ebp]
	call	?MakeLower_Ascii@UString@@QAEXXZ	; UString::MakeLower_Ascii
; Line 333
	lea	ecx, DWORD PTR _s$[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	cmp	eax, 1
	jne	$LN4@ParseArchi
; Line 335
	lea	ecx, DWORD PTR _s$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 127				; 0000007fH
	jle	SHORT $LN3@ParseArchi
; Line 336
	mov	BYTE PTR $T79166[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _s$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	al, BYTE PTR $T79166[ebp]
	jmp	$LN5@ParseArchi
$LN3@ParseArchi:
; Line 337
	lea	ecx, DWORD PTR _s$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	movzx	edx, BYTE PTR [eax]
	push	edx
	mov	eax, DWORD PTR _g_Commands
	push	eax
	call	?FindCharPosInString@@YGHPBDD@Z		; FindCharPosInString
	mov	DWORD PTR _index$77028[ebp], eax
; Line 338
	cmp	DWORD PTR _index$77028[ebp], 0
	jge	SHORT $LN2@ParseArchi
; Line 339
	mov	BYTE PTR $T79167[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _s$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	al, BYTE PTR $T79167[ebp]
	jmp	$LN5@ParseArchi
$LN2@ParseArchi:
; Line 340
	mov	ecx, DWORD PTR _command$[ebp]
	mov	edx, DWORD PTR _index$77028[ebp]
	mov	DWORD PTR [ecx], edx
; Line 341
	mov	BYTE PTR $T79168[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _s$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	al, BYTE PTR $T79168[ebp]
	jmp	SHORT $LN5@ParseArchi
$LN4@ParseArchi:
; Line 343
	lea	ecx, DWORD PTR _s$[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	cmp	eax, 2
	jne	SHORT $LN1@ParseArchi
	lea	ecx, DWORD PTR _s$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	movzx	eax, WORD PTR [eax]
	cmp	eax, 114				; 00000072H
	jne	SHORT $LN1@ParseArchi
	lea	ecx, DWORD PTR _s$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	movzx	ecx, WORD PTR [eax+2]
	cmp	ecx, 110				; 0000006eH
	jne	SHORT $LN1@ParseArchi
; Line 345
	mov	edx, DWORD PTR _command$[ebp]
	mov	DWORD PTR [edx], 10			; 0000000aH
; Line 346
	mov	BYTE PTR $T79169[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _s$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	al, BYTE PTR $T79169[ebp]
	jmp	SHORT $LN5@ParseArchi
$LN1@ParseArchi:
; Line 348
	mov	BYTE PTR $T79170[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _s$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	al, BYTE PTR $T79170[ebp]
$LN5@ParseArchi:
; Line 349
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@ParseArchi
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN11@ParseArchi:
	DD	1
	DD	$LN10@ParseArchi
$LN10@ParseArchi:
	DD	-28					; ffffffe4H
	DD	12					; 0000000cH
	DD	$LN8@ParseArchi
$LN8@ParseArchi:
	DB	115					; 00000073H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ParseArchiveCommand@@YG_NABVUString@@AAUCArcCommand@@@Z$0:
	lea	ecx, DWORD PTR _s$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$?ParseArchiveCommand@@YG_NABVUString@@AAUCArcCommand@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ParseArchiveCommand@@YG_NABVUString@@AAUCArcCommand@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ParseArchiveCommand@@YG_NABVUString@@AAUCArcCommand@@@Z ENDP ; ParseArchiveCommand
EXTRN	?MyStringLower_Ascii@@YGXPA_W@Z:PROC		; MyStringLower_Ascii
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?MakeLower_Ascii@UString@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MakeLower_Ascii@UString@@QAEXXZ PROC			; UString::MakeLower_Ascii, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 545
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?MyStringLower_Ascii@@YGXPA_W@Z		; MyStringLower_Ascii
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?MakeLower_Ascii@UString@@QAEXXZ ENDP			; UString::MakeLower_Ascii
_TEXT	ENDS
EXTRN	?AddPreItem@CCensor@NWildcard@@QAEX_NABVUString@@00@Z:PROC ; NWildcard::CCensor::AddPreItem
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv64 = -8						; size = 4
_recursed$ = -1						; size = 1
_censor$ = 8						; size = 4
_name$ = 12						; size = 4
_include$ = 16						; size = 1
_type$ = 20						; size = 4
_wildcardMatching$ = 24					; size = 1
?AddNameToCensor@@YGXAAVCCensor@NWildcard@@ABVUString@@_NW4EEnum@NRecursedType@@2@Z PROC ; AddNameToCensor
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\archivecommandline.cpp
; Line 356
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 357
	mov	BYTE PTR _recursed$[ebp], 0
; Line 359
	mov	eax, DWORD PTR _type$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 0
	je	SHORT $LN1@AddNameToC
	cmp	DWORD PTR tv64[ebp], 1
	je	SHORT $LN2@AddNameToC
	jmp	SHORT $LN3@AddNameToC
$LN2@AddNameToC:
; Line 362
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	?DoesNameContainWildcard@@YG_NABVUString@@@Z ; DoesNameContainWildcard
	mov	BYTE PTR _recursed$[ebp], al
; Line 363
	jmp	SHORT $LN3@AddNameToC
$LN1@AddNameToC:
; Line 365
	mov	BYTE PTR _recursed$[ebp], 1
$LN3@AddNameToC:
; Line 368
	movzx	edx, BYTE PTR _wildcardMatching$[ebp]
	push	edx
	movzx	eax, BYTE PTR _recursed$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _include$[ebp]
	push	edx
	mov	ecx, DWORD PTR _censor$[ebp]
	call	?AddPreItem@CCensor@NWildcard@@QAEX_NABVUString@@00@Z ; NWildcard::CCensor::AddPreItem
; Line 369
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?AddNameToCensor@@YGXAAVCCensor@NWildcard@@ABVUString@@_NW4EEnum@NRecursedType@@2@Z ENDP ; AddNameToCensor
_TEXT	ENDS
PUBLIC	?Ptr@UString@@QBEPB_WI@Z			; UString::Ptr
EXTRN	??0UString@@QAE@PB_W@Z:PROC			; UString::UString
xdata$x	SEGMENT
__unwindtable$?AddToCensorFromNonSwitchesStrings@@YGXPAV?$CObjectVector@UCRenamePair@@@@IAAVCCensor@NWildcard@@ABV?$CObjectVector@VUString@@@@W4EEnum@NRecursedType@@_N4H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddToCensorFromNonSwitchesStrings@@YGXPAV?$CObjectVector@UCRenamePair@@@@IAAVCCensor@NWildcard@@ABV?$CObjectVector@VUString@@@@W4EEnum@NRecursedType@@_N4H@Z$0
__ehfuncinfo$?AddToCensorFromNonSwitchesStrings@@YGXPAV?$CObjectVector@UCRenamePair@@@@IAAVCCensor@NWildcard@@ABV?$CObjectVector@VUString@@@@W4EEnum@NRecursedType@@_N4H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddToCensorFromNonSwitchesStrings@@YGXPAV?$CObjectVector@UCRenamePair@@@@IAAVCCensor@NWildcard@@ABV?$CObjectVector@VUString@@@@W4EEnum@NRecursedType@@_N4H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T79185 = -60						; size = 12
$T79184 = -48						; size = 12
$T79183 = -36						; size = 12
_s$77130 = -24						; size = 4
_i$77126 = -20						; size = 4
_oldIndex$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_renamePairs$ = 8					; size = 4
_startIndex$ = 12					; size = 4
_censor$ = 16						; size = 4
_nonSwitchStrings$ = 20					; size = 4
_type$ = 24						; size = 4
_wildcardMatching$ = 28					; size = 1
_thereAreSwitchIncludes$ = 32				; size = 1
_codePage$ = 36						; size = 4
?AddToCensorFromNonSwitchesStrings@@YGXPAV?$CObjectVector@UCRenamePair@@@@IAAVCCensor@NWildcard@@ABV?$CObjectVector@VUString@@@@W4EEnum@NRecursedType@@_N4H@Z PROC ; AddToCensorFromNonSwitchesStrings
; Line 428
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddToCensorFromNonSwitchesStrings@@YGXPAV?$CObjectVector@UCRenamePair@@@@IAAVCCensor@NWildcard@@ABV?$CObjectVector@VUString@@@@W4EEnum@NRecursedType@@_N4H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 48					; 00000030H
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 429
	cmp	DWORD PTR _renamePairs$[ebp], 0
	jne	SHORT $LN12@AddToCenso
	mov	ecx, DWORD PTR _nonSwitchStrings$[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	cmp	eax, DWORD PTR _startIndex$[ebp]
	jne	SHORT $LN13@AddToCenso
$LN12@AddToCenso:
	movzx	eax, BYTE PTR _thereAreSwitchIncludes$[ebp]
	test	eax, eax
	jne	SHORT $LN13@AddToCenso
; Line 432
	mov	ecx, DWORD PTR _kUniversalWildcard
	push	ecx
	lea	ecx, DWORD PTR $T79183[ebp]
	call	??0UString@@QAE@PB_W@Z			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	push	1
	mov	edx, DWORD PTR _type$[ebp]
	push	edx
	push	1
	lea	eax, DWORD PTR $T79183[ebp]
	push	eax
	mov	ecx, DWORD PTR _censor$[ebp]
	push	ecx
	call	?AddNameToCensor@@YGXAAVCCensor@NWildcard@@ABVUString@@_NW4EEnum@NRecursedType@@2@Z ; AddNameToCensor
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T79183[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
$LN13@AddToCenso:
; Line 434
	mov	DWORD PTR _oldIndex$[ebp], -1
; Line 436
	mov	edx, DWORD PTR _startIndex$[ebp]
	mov	DWORD PTR _i$77126[ebp], edx
	jmp	SHORT $LN11@AddToCenso
$LN10@AddToCenso:
	mov	eax, DWORD PTR _i$77126[ebp]
	add	eax, 1
	mov	DWORD PTR _i$77126[ebp], eax
$LN11@AddToCenso:
	mov	ecx, DWORD PTR _nonSwitchStrings$[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	cmp	DWORD PTR _i$77126[ebp], eax
	jae	$LN9@AddToCenso
; Line 438
	mov	ecx, DWORD PTR _i$77126[ebp]
	push	ecx
	mov	ecx, DWORD PTR _nonSwitchStrings$[ebp]
	call	??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[]
	mov	DWORD PTR _s$77130[ebp], eax
; Line 439
	mov	ecx, DWORD PTR _s$77130[ebp]
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN8@AddToCenso
; Line 440
	push	0
	mov	eax, DWORD PTR _kEmptyFilePath
	push	eax
	lea	ecx, DWORD PTR $T79184[ebp]
	call	??0CArcCmdLineException@@QAE@PBDPB_W@Z	; CArcCmdLineException::CArcCmdLineException
	push	OFFSET __TI2?AUCArcCmdLineException@@
	lea	ecx, DWORD PTR $T79184[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN8@AddToCenso:
; Line 441
	mov	ecx, DWORD PTR _s$77130[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	movzx	edx, WORD PTR [eax]
	cmp	edx, 64					; 00000040H
	jne	SHORT $LN7@AddToCenso
; Line 442
	mov	eax, DWORD PTR _codePage$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _wildcardMatching$[ebp]
	push	ecx
	mov	edx, DWORD PTR _type$[ebp]
	push	edx
	push	1
	push	1
	mov	ecx, DWORD PTR _s$77130[ebp]
	call	?Ptr@UString@@QBEPB_WI@Z		; UString::Ptr
	push	eax
	mov	eax, DWORD PTR _censor$[ebp]
	push	eax
	mov	ecx, DWORD PTR _renamePairs$[ebp]
	push	ecx
	call	?AddToCensorFromListFile@@YGXPAV?$CObjectVector@UCRenamePair@@@@AAVCCensor@NWildcard@@PB_W_NW4EEnum@NRecursedType@@3H@Z ; AddToCensorFromListFile
	jmp	SHORT $LN6@AddToCenso
$LN7@AddToCenso:
; Line 443
	cmp	DWORD PTR _renamePairs$[ebp], 0
	je	SHORT $LN5@AddToCenso
; Line 445
	cmp	DWORD PTR _oldIndex$[ebp], -1
	jne	SHORT $LN4@AddToCenso
; Line 446
	mov	edx, DWORD PTR _i$77126[ebp]
	mov	DWORD PTR _oldIndex$[ebp], edx
; Line 447
	jmp	SHORT $LN3@AddToCenso
$LN4@AddToCenso:
; Line 450
	movzx	eax, BYTE PTR _wildcardMatching$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _s$77130[ebp]
	push	ecx
	mov	edx, DWORD PTR _oldIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _nonSwitchStrings$[ebp]
	call	??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[]
	push	eax
	mov	eax, DWORD PTR _renamePairs$[ebp]
	push	eax
	call	?AddRenamePair@@YGXPAV?$CObjectVector@UCRenamePair@@@@ABVUString@@1W4EEnum@NRecursedType@@_N@Z ; AddRenamePair
; Line 452
	mov	DWORD PTR _oldIndex$[ebp], -1
$LN3@AddToCenso:
; Line 455
	jmp	SHORT $LN6@AddToCenso
$LN5@AddToCenso:
; Line 456
	movzx	ecx, BYTE PTR _wildcardMatching$[ebp]
	push	ecx
	mov	edx, DWORD PTR _type$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR _s$77130[ebp]
	push	eax
	mov	ecx, DWORD PTR _censor$[ebp]
	push	ecx
	call	?AddNameToCensor@@YGXAAVCCensor@NWildcard@@ABVUString@@_NW4EEnum@NRecursedType@@2@Z ; AddNameToCensor
$LN6@AddToCenso:
; Line 457
	jmp	$LN10@AddToCenso
$LN9@AddToCenso:
; Line 459
	cmp	DWORD PTR _oldIndex$[ebp], -1
	je	SHORT $LN15@AddToCenso
; Line 461
	mov	edx, DWORD PTR _oldIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _nonSwitchStrings$[ebp]
	call	??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[]
	mov	ecx, eax
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	push	OFFSET $SG77143
	lea	ecx, DWORD PTR $T79185[ebp]
	call	??0CArcCmdLineException@@QAE@PBDPB_W@Z	; CArcCmdLineException::CArcCmdLineException
	push	OFFSET __TI2?AUCArcCmdLineException@@
	lea	eax, DWORD PTR $T79185[ebp]
	push	eax
	call	__CxxThrowException@8
$LN15@AddToCenso:
; Line 463
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	32					; 00000020H
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?AddToCensorFromNonSwitchesStrings@@YGXPAV?$CObjectVector@UCRenamePair@@@@IAAVCCensor@NWildcard@@ABV?$CObjectVector@VUString@@@@W4EEnum@NRecursedType@@_N4H@Z$0:
	lea	ecx, DWORD PTR $T79183[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$?AddToCensorFromNonSwitchesStrings@@YGXPAV?$CObjectVector@UCRenamePair@@@@IAAVCCensor@NWildcard@@ABV?$CObjectVector@VUString@@@@W4EEnum@NRecursedType@@_N4H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-56]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddToCensorFromNonSwitchesStrings@@YGXPAV?$CObjectVector@UCRenamePair@@@@IAAVCCensor@NWildcard@@ABV?$CObjectVector@VUString@@@@W4EEnum@NRecursedType@@_N4H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddToCensorFromNonSwitchesStrings@@YGXPAV?$CObjectVector@UCRenamePair@@@@IAAVCCensor@NWildcard@@ABV?$CObjectVector@VUString@@@@W4EEnum@NRecursedType@@_N4H@Z ENDP ; AddToCensorFromNonSwitchesStrings
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Ptr@UString@@QBEPB_WI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pos$ = 8						; size = 4
?Ptr@UString@@QBEPB_WI@Z PROC				; UString::Ptr, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 478
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pos$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	mov	esp, ebp
	pop	ebp
	ret	4
?Ptr@UString@@QBEPB_WI@Z ENDP				; UString::Ptr
_TEXT	ENDS
PUBLIC	?AddNew@?$CObjectVector@UCRenamePair@@@@QAEAAUCRenamePair@@XZ ; CObjectVector<CRenamePair>::AddNew
EXTRN	?AddAscii@UString@@QAEXPBD@Z:PROC		; UString::AddAscii
EXTRN	?Prepare@CRenamePair@@QAE_NXZ:PROC		; CRenamePair::Prepare
xdata$x	SEGMENT
__unwindtable$?AddRenamePair@@YGXPAV?$CObjectVector@UCRenamePair@@@@ABVUString@@1W4EEnum@NRecursedType@@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddRenamePair@@YGXPAV?$CObjectVector@UCRenamePair@@@@ABVUString@@1W4EEnum@NRecursedType@@_N@Z$0
__ehfuncinfo$?AddRenamePair@@YGXPAV?$CObjectVector@UCRenamePair@@@@ABVUString@@1W4EEnum@NRecursedType@@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddRenamePair@@YGXPAV?$CObjectVector@UCRenamePair@@@@ABVUString@@1W4EEnum@NRecursedType@@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T79194 = -48						; size = 12
_val$77061 = -32					; size = 12
_pair$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_renamePairs$ = 8					; size = 4
_oldName$ = 12						; size = 4
_newName$ = 16						; size = 4
_type$ = 20						; size = 4
_wildcardMatching$ = 24					; size = 1
?AddRenamePair@@YGXPAV?$CObjectVector@UCRenamePair@@@@ABVUString@@1W4EEnum@NRecursedType@@_N@Z PROC ; AddRenamePair
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\archivecommandline.cpp
; Line 374
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddRenamePair@@YGXPAV?$CObjectVector@UCRenamePair@@@@ABVUString@@1W4EEnum@NRecursedType@@_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-48], eax
	mov	DWORD PTR [ebp-44], eax
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 375
	mov	ecx, DWORD PTR _renamePairs$[ebp]
	call	?AddNew@?$CObjectVector@UCRenamePair@@@@QAEAAUCRenamePair@@XZ ; CObjectVector<CRenamePair>::AddNew
	mov	DWORD PTR _pair$[ebp], eax
; Line 376
	mov	eax, DWORD PTR _oldName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pair$[ebp]
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
; Line 377
	mov	ecx, DWORD PTR _newName$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pair$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
; Line 378
	mov	edx, DWORD PTR _pair$[ebp]
	mov	eax, DWORD PTR _type$[ebp]
	mov	DWORD PTR [edx+28], eax
; Line 379
	mov	ecx, DWORD PTR _pair$[ebp]
	mov	dl, BYTE PTR _wildcardMatching$[ebp]
	mov	BYTE PTR [ecx+24], dl
; Line 381
	mov	ecx, DWORD PTR _pair$[ebp]
	call	?Prepare@CRenamePair@@QAE_NXZ		; CRenamePair::Prepare
	movzx	eax, al
	test	eax, eax
	jne	$LN6@AddRenameP
; Line 383
	lea	ecx, DWORD PTR _val$77061[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 384
	mov	ecx, DWORD PTR _pair$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _val$77061[ebp]
	call	??YUString@@QAEAAV0@ABV0@@Z		; UString::operator+=
; Line 385
	lea	ecx, DWORD PTR _val$77061[ebp]
	call	?Add_LF@UString@@QAEXXZ			; UString::Add_LF
; Line 386
	mov	edx, DWORD PTR _pair$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	lea	ecx, DWORD PTR _val$77061[ebp]
	call	??YUString@@QAEAAV0@ABV0@@Z		; UString::operator+=
; Line 387
	lea	ecx, DWORD PTR _val$77061[ebp]
	call	?Add_LF@UString@@QAEXXZ			; UString::Add_LF
; Line 388
	cmp	DWORD PTR _type$[ebp], 0
	jne	SHORT $LN3@AddRenameP
; Line 389
	push	OFFSET $SG77063
	lea	ecx, DWORD PTR _val$77061[ebp]
	call	?AddAscii@UString@@QAEXPBD@Z		; UString::AddAscii
	jmp	SHORT $LN2@AddRenameP
$LN3@AddRenameP:
; Line 390
	cmp	DWORD PTR _type$[ebp], 0
	jne	SHORT $LN2@AddRenameP
; Line 391
	push	OFFSET $SG77066
	lea	ecx, DWORD PTR _val$77061[ebp]
	call	?AddAscii@UString@@QAEXPBD@Z		; UString::AddAscii
$LN2@AddRenameP:
; Line 392
	lea	ecx, DWORD PTR _val$77061[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	push	OFFSET $SG77075
	lea	ecx, DWORD PTR $T79194[ebp]
	call	??0CArcCmdLineException@@QAE@PBDPB_W@Z	; CArcCmdLineException::CArcCmdLineException
	push	OFFSET __TI2?AUCArcCmdLineException@@
	lea	eax, DWORD PTR $T79194[ebp]
	push	eax
	call	__CxxThrowException@8
; Line 393
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _val$77061[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
$LN6@AddRenameP:
; Line 394
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@AddRenameP
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
	npad	3
$LN11@AddRenameP:
	DD	1
	DD	$LN10@AddRenameP
$LN10@AddRenameP:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN8@AddRenameP
$LN8@AddRenameP:
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?AddRenamePair@@YGXPAV?$CObjectVector@UCRenamePair@@@@ABVUString@@1W4EEnum@NRecursedType@@_N@Z$0:
	lea	ecx, DWORD PTR _val$77061[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$?AddRenamePair@@YGXPAV?$CObjectVector@UCRenamePair@@@@ABVUString@@1W4EEnum@NRecursedType@@_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddRenamePair@@YGXPAV?$CObjectVector@UCRenamePair@@@@ABVUString@@1W4EEnum@NRecursedType@@_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddRenamePair@@YGXPAV?$CObjectVector@UCRenamePair@@@@ABVUString@@1W4EEnum@NRecursedType@@_N@Z ENDP ; AddRenamePair
EXTRN	?ReadNamesFromListFile@@YG_NPB_WAAV?$CObjectVector@VUString@@@@I@Z:PROC ; ReadNamesFromListFile
EXTRN	?DoesFileExist@NFind@NFile@NWindows@@YG_NPB_W@Z:PROC ; NWindows::NFile::NFind::DoesFileExist
xdata$x	SEGMENT
__unwindtable$?AddToCensorFromListFile@@YGXPAV?$CObjectVector@UCRenamePair@@@@AAVCCensor@NWildcard@@PB_W_NW4EEnum@NRecursedType@@3H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddToCensorFromListFile@@YGXPAV?$CObjectVector@UCRenamePair@@@@AAVCCensor@NWildcard@@PB_W_NW4EEnum@NRecursedType@@3H@Z$0
__ehfuncinfo$?AddToCensorFromListFile@@YGXPAV?$CObjectVector@UCRenamePair@@@@AAVCCensor@NWildcard@@PB_W_NW4EEnum@NRecursedType@@3H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddToCensorFromListFile@@YGXPAV?$CObjectVector@UCRenamePair@@@@AAVCCensor@NWildcard@@PB_W_NW4EEnum@NRecursedType@@3H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T79206 = -76						; size = 12
$T79205 = -64						; size = 12
$T79204 = -52						; size = 12
_i$77107 = -40						; size = 4
_i$77102 = -36						; size = 4
_names$ = -28						; size = 12
__$EHRec$ = -12						; size = 12
_renamePairs$ = 8					; size = 4
_censor$ = 12						; size = 4
_fileName$ = 16						; size = 4
_include$ = 20						; size = 1
_type$ = 24						; size = 4
_wildcardMatching$ = 28					; size = 1
_codePage$ = 32						; size = 4
?AddToCensorFromListFile@@YGXPAV?$CObjectVector@UCRenamePair@@@@AAVCCensor@NWildcard@@PB_W_NW4EEnum@NRecursedType@@3H@Z PROC ; AddToCensorFromListFile
; Line 400
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddToCensorFromListFile@@YGXPAV?$CObjectVector@UCRenamePair@@@@AAVCCensor@NWildcard@@PB_W_NW4EEnum@NRecursedType@@3H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 64					; 00000040H
	push	edi
	lea	edi, DWORD PTR [ebp-76]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 401
	lea	ecx, DWORD PTR _names$[ebp]
	call	??0?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::CObjectVector<UString>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 402
	mov	eax, DWORD PTR _fileName$[ebp]
	push	eax
	call	?DoesFileExist@NFind@NFile@NWindows@@YG_NPB_W@Z ; NWindows::NFile::NFind::DoesFileExist
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN11@AddToCenso@2
; Line 403
	mov	edx, DWORD PTR _fileName$[ebp]
	push	edx
	mov	eax, DWORD PTR _kCannotFindListFile
	push	eax
	lea	ecx, DWORD PTR $T79204[ebp]
	call	??0CArcCmdLineException@@QAE@PBDPB_W@Z	; CArcCmdLineException::CArcCmdLineException
	push	OFFSET __TI2?AUCArcCmdLineException@@
	lea	ecx, DWORD PTR $T79204[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN11@AddToCenso@2:
; Line 404
	mov	edx, DWORD PTR _codePage$[ebp]
	push	edx
	lea	eax, DWORD PTR _names$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fileName$[ebp]
	push	ecx
	call	?ReadNamesFromListFile@@YG_NPB_WAAV?$CObjectVector@VUString@@@@I@Z ; ReadNamesFromListFile
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN10@AddToCenso@2
; Line 405
	mov	eax, DWORD PTR _fileName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kIncorrectListFile
	push	ecx
	lea	ecx, DWORD PTR $T79205[ebp]
	call	??0CArcCmdLineException@@QAE@PBDPB_W@Z	; CArcCmdLineException::CArcCmdLineException
	push	OFFSET __TI2?AUCArcCmdLineException@@
	lea	edx, DWORD PTR $T79205[ebp]
	push	edx
	call	__CxxThrowException@8
$LN10@AddToCenso@2:
; Line 406
	cmp	DWORD PTR _renamePairs$[ebp], 0
	je	$LN9@AddToCenso@2
; Line 408
	lea	ecx, DWORD PTR _names$[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	and	eax, 1
	je	SHORT $LN8@AddToCenso@2
; Line 409
	mov	eax, DWORD PTR _fileName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kIncorrectListFile
	push	ecx
	lea	ecx, DWORD PTR $T79206[ebp]
	call	??0CArcCmdLineException@@QAE@PBDPB_W@Z	; CArcCmdLineException::CArcCmdLineException
	push	OFFSET __TI2?AUCArcCmdLineException@@
	lea	edx, DWORD PTR $T79206[ebp]
	push	edx
	call	__CxxThrowException@8
$LN8@AddToCenso@2:
; Line 410
	mov	DWORD PTR _i$77102[ebp], 0
	jmp	SHORT $LN7@AddToCenso@2
$LN6@AddToCenso@2:
	mov	eax, DWORD PTR _i$77102[ebp]
	add	eax, 2
	mov	DWORD PTR _i$77102[ebp], eax
$LN7@AddToCenso@2:
	lea	ecx, DWORD PTR _names$[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	cmp	DWORD PTR _i$77102[ebp], eax
	jae	SHORT $LN5@AddToCenso@2
; Line 413
	movzx	ecx, BYTE PTR _wildcardMatching$[ebp]
	push	ecx
	mov	edx, DWORD PTR _type$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$77102[ebp]
	add	eax, 1
	push	eax
	lea	ecx, DWORD PTR _names$[ebp]
	call	??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[]
	push	eax
	mov	ecx, DWORD PTR _i$77102[ebp]
	push	ecx
	lea	ecx, DWORD PTR _names$[ebp]
	call	??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[]
	push	eax
	mov	edx, DWORD PTR _renamePairs$[ebp]
	push	edx
	call	?AddRenamePair@@YGXPAV?$CObjectVector@UCRenamePair@@@@ABVUString@@1W4EEnum@NRecursedType@@_N@Z ; AddRenamePair
; Line 414
	jmp	SHORT $LN6@AddToCenso@2
$LN5@AddToCenso@2:
; Line 416
	jmp	SHORT $LN4@AddToCenso@2
$LN9@AddToCenso@2:
; Line 417
	mov	DWORD PTR _i$77107[ebp], 0
	jmp	SHORT $LN3@AddToCenso@2
$LN2@AddToCenso@2:
	mov	eax, DWORD PTR _i$77107[ebp]
	add	eax, 1
	mov	DWORD PTR _i$77107[ebp], eax
$LN3@AddToCenso@2:
	lea	ecx, DWORD PTR _names$[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	cmp	DWORD PTR _i$77107[ebp], eax
	jae	SHORT $LN4@AddToCenso@2
; Line 418
	movzx	ecx, BYTE PTR _wildcardMatching$[ebp]
	push	ecx
	mov	edx, DWORD PTR _type$[ebp]
	push	edx
	movzx	eax, BYTE PTR _include$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$77107[ebp]
	push	ecx
	lea	ecx, DWORD PTR _names$[ebp]
	call	??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[]
	push	eax
	mov	edx, DWORD PTR _censor$[ebp]
	push	edx
	call	?AddNameToCensor@@YGXAAVCCensor@NWildcard@@ABVUString@@_NW4EEnum@NRecursedType@@2@Z ; AddNameToCensor
	jmp	SHORT $LN2@AddToCenso@2
$LN4@AddToCenso@2:
; Line 419
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _names$[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
$LN13@AddToCenso@2:
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@AddToCenso@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 76					; 0000004cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
$LN18@AddToCenso@2:
	DD	1
	DD	$LN17@AddToCenso@2
$LN17@AddToCenso@2:
	DD	-28					; ffffffe4H
	DD	12					; 0000000cH
	DD	$LN15@AddToCenso@2
$LN15@AddToCenso@2:
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?AddToCensorFromListFile@@YGXPAV?$CObjectVector@UCRenamePair@@@@AAVCCensor@NWildcard@@PB_W_NW4EEnum@NRecursedType@@3H@Z$0:
	lea	ecx, DWORD PTR _names$[ebp]
	jmp	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
__ehhandler$?AddToCensorFromListFile@@YGXPAV?$CObjectVector@UCRenamePair@@@@AAVCCensor@NWildcard@@PB_W_NW4EEnum@NRecursedType@@3H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddToCensorFromListFile@@YGXPAV?$CObjectVector@UCRenamePair@@@@AAVCCensor@NWildcard@@PB_W_NW4EEnum@NRecursedType@@3H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddToCensorFromListFile@@YGXPAV?$CObjectVector@UCRenamePair@@@@AAVCCensor@NWildcard@@PB_W_NW4EEnum@NRecursedType@@3H@Z ENDP ; AddToCensorFromListFile
PUBLIC	?MyCharLower_Ascii@@YG_W_W@Z			; MyCharLower_Ascii
xdata$x	SEGMENT
__unwindtable$?AddSwitchWildcardsToCensor@@YGXAAVCCensor@NWildcard@@ABV?$CObjectVector@VUString@@@@_NW4EEnum@NRecursedType@@2H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddSwitchWildcardsToCensor@@YGXAAVCCensor@NWildcard@@ABV?$CObjectVector@VUString@@@@_NW4EEnum@NRecursedType@@2H@Z$0
__ehfuncinfo$?AddSwitchWildcardsToCensor@@YGXAAVCCensor@NWildcard@@ABV?$CObjectVector@VUString@@@@_NW4EEnum@NRecursedType@@2H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddSwitchWildcardsToCensor@@YGXAAVCCensor@NWildcard@@ABV?$CObjectVector@VUString@@@@_NW4EEnum@NRecursedType@@2H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T79216 = -72						; size = 12
_tail$77257 = -56					; size = 12
_index$77250 = -40					; size = 4
_c$77249 = -36						; size = 2
_pos$77245 = -32					; size = 4
_recursedType$77244 = -28				; size = 4
_name$77243 = -24					; size = 4
_i$ = -20						; size = 4
_errorMessage$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_censor$ = 8						; size = 4
_strings$ = 12						; size = 4
_include$ = 16						; size = 1
_commonRecursedType$ = 20				; size = 4
_wildcardMatching$ = 24					; size = 1
_codePage$ = 28						; size = 4
?AddSwitchWildcardsToCensor@@YGXAAVCCensor@NWildcard@@ABV?$CObjectVector@VUString@@@@_NW4EEnum@NRecursedType@@2H@Z PROC ; AddSwitchWildcardsToCensor
; Line 545
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddSwitchWildcardsToCensor@@YGXAAVCCensor@NWildcard@@ABV?$CObjectVector@VUString@@@@_NW4EEnum@NRecursedType@@2H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 60					; 0000003cH
	push	edi
	lea	edi, DWORD PTR [ebp-72]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 546
	mov	DWORD PTR _errorMessage$[ebp], 0
; Line 548
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN17@AddSwitchW
$LN16@AddSwitchW:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN17@AddSwitchW:
	mov	ecx, DWORD PTR _strings$[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	$LN15@AddSwitchW
; Line 550
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _strings$[ebp]
	call	??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[]
	mov	DWORD PTR _name$77243[ebp], eax
; Line 552
	mov	DWORD PTR _pos$77245[ebp], 0
; Line 554
	mov	ecx, DWORD PTR _name$77243[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	cmp	eax, 2
	jae	SHORT $LN14@AddSwitchW
; Line 556
	mov	DWORD PTR _errorMessage$[ebp], OFFSET $SG77247
; Line 557
	jmp	$LN15@AddSwitchW
$LN14@AddSwitchW:
; Line 560
	mov	ecx, DWORD PTR _name$77243[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	edx, DWORD PTR _pos$77245[ebp]
	movzx	eax, WORD PTR [eax+edx*2]
	push	eax
	call	?MyCharLower_Ascii@@YG_W_W@Z		; MyCharLower_Ascii
	movzx	ecx, ax
	cmp	ecx, 114				; 00000072H
	jne	SHORT $LN13@AddSwitchW
; Line 562
	mov	edx, DWORD PTR _pos$77245[ebp]
	add	edx, 1
	mov	DWORD PTR _pos$77245[ebp], edx
; Line 563
	mov	ecx, DWORD PTR _name$77243[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	ecx, DWORD PTR _pos$77245[ebp]
	mov	dx, WORD PTR [eax+ecx*2]
	mov	WORD PTR _c$77249[ebp], dx
; Line 564
	mov	DWORD PTR _index$77250[ebp], -1
; Line 565
	movzx	eax, WORD PTR _c$77249[ebp]
	cmp	eax, 127				; 0000007fH
	jg	SHORT $LN12@AddSwitchW
; Line 566
	movzx	ecx, BYTE PTR _c$77249[ebp]
	push	ecx
	mov	edx, DWORD PTR _kRecursedPostCharSet
	push	edx
	call	?FindCharPosInString@@YGHPBDD@Z		; FindCharPosInString
	mov	DWORD PTR _index$77250[ebp], eax
$LN12@AddSwitchW:
; Line 567
	mov	eax, DWORD PTR _index$77250[ebp]
	push	eax
	call	?GetRecursedTypeFromIndex@@YG?AW4EEnum@NRecursedType@@H@Z ; GetRecursedTypeFromIndex
	mov	DWORD PTR _recursedType$77244[ebp], eax
; Line 568
	cmp	DWORD PTR _index$77250[ebp], 0
	jl	SHORT $LN11@AddSwitchW
; Line 569
	mov	ecx, DWORD PTR _pos$77245[ebp]
	add	ecx, 1
	mov	DWORD PTR _pos$77245[ebp], ecx
$LN11@AddSwitchW:
; Line 571
	jmp	SHORT $LN10@AddSwitchW
$LN13@AddSwitchW:
; Line 572
	mov	edx, DWORD PTR _commonRecursedType$[ebp]
	mov	DWORD PTR _recursedType$77244[ebp], edx
$LN10@AddSwitchW:
; Line 574
	mov	ecx, DWORD PTR _name$77243[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	mov	ecx, DWORD PTR _pos$77245[ebp]
	add	ecx, 2
	cmp	eax, ecx
	jae	SHORT $LN9@AddSwitchW
; Line 576
	mov	DWORD PTR _errorMessage$[ebp], OFFSET $SG77256
; Line 577
	jmp	$LN15@AddSwitchW
$LN9@AddSwitchW:
; Line 580
	mov	edx, DWORD PTR _pos$77245[ebp]
	add	edx, 1
	push	edx
	mov	ecx, DWORD PTR _name$77243[ebp]
	call	?Ptr@UString@@QBEPB_WI@Z		; UString::Ptr
	push	eax
	lea	ecx, DWORD PTR _tail$77257[ebp]
	call	??0UString@@QAE@PB_W@Z			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 582
	mov	ecx, DWORD PTR _name$77243[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	ecx, DWORD PTR _pos$77245[ebp]
	movzx	edx, WORD PTR [eax+ecx*2]
	cmp	edx, 33					; 00000021H
	jne	SHORT $LN8@AddSwitchW
; Line 583
	movzx	eax, BYTE PTR _wildcardMatching$[ebp]
	push	eax
	mov	ecx, DWORD PTR _recursedType$77244[ebp]
	push	ecx
	movzx	edx, BYTE PTR _include$[ebp]
	push	edx
	lea	eax, DWORD PTR _tail$77257[ebp]
	push	eax
	mov	ecx, DWORD PTR _censor$[ebp]
	push	ecx
	call	?AddNameToCensor@@YGXAAVCCensor@NWildcard@@ABVUString@@_NW4EEnum@NRecursedType@@2@Z ; AddNameToCensor
	jmp	$LN7@AddSwitchW
$LN8@AddSwitchW:
; Line 584
	mov	ecx, DWORD PTR _name$77243[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	edx, DWORD PTR _pos$77245[ebp]
	movzx	eax, WORD PTR [eax+edx*2]
	cmp	eax, 64					; 00000040H
	jne	SHORT $LN6@AddSwitchW
; Line 585
	mov	ecx, DWORD PTR _codePage$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _wildcardMatching$[ebp]
	push	edx
	mov	eax, DWORD PTR _recursedType$77244[ebp]
	push	eax
	movzx	ecx, BYTE PTR _include$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _tail$77257[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	mov	edx, DWORD PTR _censor$[ebp]
	push	edx
	push	0
	call	?AddToCensorFromListFile@@YGXPAV?$CObjectVector@UCRenamePair@@@@AAVCCensor@NWildcard@@PB_W_NW4EEnum@NRecursedType@@3H@Z ; AddToCensorFromListFile
	jmp	SHORT $LN7@AddSwitchW
$LN6@AddSwitchW:
; Line 587
	mov	ecx, DWORD PTR _name$77243[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	ecx, DWORD PTR _pos$77245[ebp]
	movzx	edx, WORD PTR [eax+ecx*2]
	cmp	edx, 35					; 00000023H
	jne	SHORT $LN4@AddSwitchW
; Line 589
	movzx	eax, BYTE PTR _wildcardMatching$[ebp]
	push	eax
	mov	ecx, DWORD PTR _recursedType$77244[ebp]
	push	ecx
	movzx	edx, BYTE PTR _include$[ebp]
	push	edx
	lea	eax, DWORD PTR _tail$77257[ebp]
	push	eax
	mov	ecx, DWORD PTR _censor$[ebp]
	push	ecx
	call	?ParseMapWithPaths@@YGPBDAAVCCensor@NWildcard@@ABVUString@@_NW4EEnum@NRecursedType@@2@Z ; ParseMapWithPaths
	mov	DWORD PTR _errorMessage$[ebp], eax
; Line 590
	cmp	DWORD PTR _errorMessage$[ebp], 0
	je	SHORT $LN3@AddSwitchW
; Line 591
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _tail$77257[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	jmp	SHORT $LN15@AddSwitchW
$LN3@AddSwitchW:
; Line 594
	jmp	SHORT $LN7@AddSwitchW
$LN4@AddSwitchW:
; Line 596
	mov	DWORD PTR _errorMessage$[ebp], OFFSET $SG77265
; Line 597
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _tail$77257[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	jmp	SHORT $LN15@AddSwitchW
$LN7@AddSwitchW:
; Line 599
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _tail$77257[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	jmp	$LN16@AddSwitchW
$LN15@AddSwitchW:
; Line 600
	mov	ecx, DWORD PTR _strings$[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	cmp	DWORD PTR _i$[ebp], eax
	je	SHORT $LN19@AddSwitchW
; Line 601
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _strings$[ebp]
	call	??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[]
	mov	ecx, eax
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	mov	eax, DWORD PTR _errorMessage$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T79216[ebp]
	call	??0CArcCmdLineException@@QAE@PBDPB_W@Z	; CArcCmdLineException::CArcCmdLineException
	push	OFFSET __TI2?AUCArcCmdLineException@@
	lea	ecx, DWORD PTR $T79216[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN19@AddSwitchW:
; Line 602
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN24@AddSwitchW
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 72					; 00000048H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
	npad	2
$LN24@AddSwitchW:
	DD	1
	DD	$LN23@AddSwitchW
$LN23@AddSwitchW:
	DD	-56					; ffffffc8H
	DD	12					; 0000000cH
	DD	$LN21@AddSwitchW
$LN21@AddSwitchW:
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?AddSwitchWildcardsToCensor@@YGXAAVCCensor@NWildcard@@ABV?$CObjectVector@VUString@@@@_NW4EEnum@NRecursedType@@2H@Z$0:
	lea	ecx, DWORD PTR _tail$77257[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$?AddSwitchWildcardsToCensor@@YGXAAVCCensor@NWildcard@@ABV?$CObjectVector@VUString@@@@_NW4EEnum@NRecursedType@@2H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-68]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddSwitchWildcardsToCensor@@YGXAAVCCensor@NWildcard@@ABV?$CObjectVector@VUString@@@@_NW4EEnum@NRecursedType@@2H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddSwitchWildcardsToCensor@@YGXAAVCCensor@NWildcard@@ABV?$CObjectVector@VUString@@@@_NW4EEnum@NRecursedType@@2H@Z ENDP ; AddSwitchWildcardsToCensor
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?MyCharLower_Ascii@@YG_W_W@Z
_TEXT	SEGMENT
_c$ = 8							; size = 2
?MyCharLower_Ascii@@YG_W_W@Z PROC			; MyCharLower_Ascii, COMDAT
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 113
	push	ebp
	mov	ebp, esp
; Line 114
	movzx	eax, WORD PTR _c$[ebp]
	cmp	eax, 65					; 00000041H
	jl	SHORT $LN1@MyCharLowe
	movzx	ecx, WORD PTR _c$[ebp]
	cmp	ecx, 90					; 0000005aH
	jg	SHORT $LN1@MyCharLowe
; Line 115
	movzx	eax, WORD PTR _c$[ebp]
	add	eax, 32					; 00000020H
	jmp	SHORT $LN2@MyCharLowe
$LN1@MyCharLowe:
; Line 116
	mov	ax, WORD PTR _c$[ebp]
$LN2@MyCharLowe:
; Line 117
	pop	ebp
	ret	4
?MyCharLower_Ascii@@YG_W_W@Z ENDP			; MyCharLower_Ascii
_TEXT	ENDS
PUBLIC	??YUString@@QAEAAV0@_W@Z			; UString::operator+=
PUBLIC	?Empty@UString@@QAEXXZ				; UString::Empty
PUBLIC	??1CFileUnmapper@NWindows@@QAE@XZ		; NWindows::CFileUnmapper::~CFileUnmapper
PUBLIC	??0CFileUnmapper@NWindows@@QAE@PBX@Z		; NWindows::CFileUnmapper::CFileUnmapper
PUBLIC	?Map@CFileMapping@NWindows@@QAEPAXK_KK@Z	; NWindows::CFileMapping::Map
PUBLIC	??1CFileMapping@NWindows@@QAE@XZ		; NWindows::CFileMapping::~CFileMapping
PUBLIC	?Open@CFileMapping@NWindows@@QAEIKPBD@Z		; NWindows::CFileMapping::Open
PUBLIC	?GetSystemString@@YG?AVAString@@ABVUString@@@Z	; GetSystemString
PUBLIC	??0CFileMapping@NWindows@@QAE@XZ		; NWindows::CFileMapping::CFileMapping
PUBLIC	??1CEventSetEnd@@QAE@XZ				; CEventSetEnd::~CEventSetEnd
PUBLIC	?DeleteFrom@UString@@QAEXI@Z			; UString::DeleteFrom
PUBLIC	??0CEventSetEnd@@QAE@PB_W@Z			; CEventSetEnd::CEventSetEnd
PUBLIC	?Find@UString@@QBEH_WI@Z			; UString::Find
PUBLIC	?Find@UString@@QBEH_W@Z				; UString::Find
xdata$x	SEGMENT
__ehfuncinfo$?ParseMapWithPaths@@YGPBDAAVCCensor@NWildcard@@ABVUString@@_NW4EEnum@NRecursedType@@2@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?ParseMapWithPaths@@YGPBDAAVCCensor@NWildcard@@ABVUString@@_NW4EEnum@NRecursedType@@2@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?ParseMapWithPaths@@YGPBDAAVCCensor@NWildcard@@ABVUString@@_NW4EEnum@NRecursedType@@2@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ParseMapWithPaths@@YGPBDAAVCCensor@NWildcard@@ABVUString@@_NW4EEnum@NRecursedType@@2@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?ParseMapWithPaths@@YGPBDAAVCCensor@NWildcard@@ABVUString@@_NW4EEnum@NRecursedType@@2@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?ParseMapWithPaths@@YGPBDAAVCCensor@NWildcard@@ABVUString@@_NW4EEnum@NRecursedType@@2@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?ParseMapWithPaths@@YGPBDAAVCCensor@NWildcard@@ABVUString@@_NW4EEnum@NRecursedType@@2@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$?ParseMapWithPaths@@YGPBDAAVCCensor@NWildcard@@ABVUString@@_NW4EEnum@NRecursedType@@2@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?ParseMapWithPaths@@YGPBDAAVCCensor@NWildcard@@ABVUString@@_NW4EEnum@NRecursedType@@2@Z$5
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv197 = -192						; size = 4
tv137 = -188						; size = 4
$T79237 = -184						; size = 4
$T79236 = -180						; size = 4
$T79235 = -176						; size = 4
$T79234 = -172						; size = 4
$T79233 = -168						; size = 4
$T79232 = -164						; size = 12
$T79231 = -149						; size = 1
$T79230 = -148						; size = 4
$T79229 = -144						; size = 4
$T79228 = -140						; size = 4
_c$77219 = -136						; size = 2
_i$77215 = -132						; size = 4
_numChars$ = -128					; size = 4
_p$ = -124						; size = 4
_name$ = -116						; size = 12
_unmapper$ = -96					; size = 4
_data$ = -88						; size = 4
_map$ = -80						; size = 4
_size$ = -68						; size = 4
_eventSetEnd$ = -56					; size = 12
_pos2$ = -40						; size = 4
_pos$ = -36						; size = 4
_s$ = -28						; size = 12
__$EHRec$ = -12						; size = 12
_censor$ = 8						; size = 4
_s2$ = 12						; size = 4
_include$ = 16						; size = 1
_commonRecursedType$ = 20				; size = 4
_wildcardMatching$ = 24					; size = 1
?ParseMapWithPaths@@YGPBDAAVCCensor@NWildcard@@ABVUString@@_NW4EEnum@NRecursedType@@2@Z PROC ; ParseMapWithPaths
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\archivecommandline.cpp
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ParseMapWithPaths@@YGPBDAAVCCensor@NWildcard@@ABVUString@@_NW4EEnum@NRecursedType@@2@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 180				; 000000b4H
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 45					; 0000002dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 488
	mov	eax, DWORD PTR _s2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _s$[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 489
	push	58					; 0000003aH
	lea	ecx, DWORD PTR _s$[ebp]
	call	?Find@UString@@QBEH_W@Z			; UString::Find
	mov	DWORD PTR _pos$[ebp], eax
; Line 490
	cmp	DWORD PTR _pos$[ebp], 0
	jge	SHORT $LN13@ParseMapWi
; Line 491
	mov	ecx, DWORD PTR ?k_IncorrectMapCommand@@3PBDB ; k_IncorrectMapCommand
	mov	DWORD PTR $T79228[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _s$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T79228[ebp]
	jmp	$LN14@ParseMapWi
$LN13@ParseMapWi:
; Line 492
	mov	edx, DWORD PTR _pos$[ebp]
	add	edx, 1
	push	edx
	push	58					; 0000003aH
	lea	ecx, DWORD PTR _s$[ebp]
	call	?Find@UString@@QBEH_WI@Z		; UString::Find
	mov	DWORD PTR _pos2$[ebp], eax
; Line 493
	cmp	DWORD PTR _pos2$[ebp], 0
	jge	SHORT $LN12@ParseMapWi
; Line 494
	mov	eax, DWORD PTR ?k_IncorrectMapCommand@@3PBDB ; k_IncorrectMapCommand
	mov	DWORD PTR $T79229[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _s$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T79229[ebp]
	jmp	$LN14@ParseMapWi
$LN12@ParseMapWi:
; Line 496
	lea	ecx, DWORD PTR _s$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	ecx, DWORD PTR _pos2$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2+2]
	push	edx
	lea	ecx, DWORD PTR _eventSetEnd$[ebp]
	call	??0CEventSetEnd@@QAE@PB_W@Z		; CEventSetEnd::CEventSetEnd
	mov	BYTE PTR __$EHRec$[ebp+8], 1
; Line 497
	mov	eax, DWORD PTR _pos2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _s$[ebp]
	call	?DeleteFrom@UString@@QAEXI@Z		; UString::DeleteFrom
; Line 502
	lea	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pos$[ebp]
	add	edx, 1
	push	edx
	lea	ecx, DWORD PTR _s$[ebp]
	call	?Ptr@UString@@QBEPB_WI@Z		; UString::Ptr
	push	eax
	call	?StringToUInt32@@YG_NPB_WAAI@Z		; StringToUInt32
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN10@ParseMapWi
	cmp	DWORD PTR _size$[ebp], 2
	jb	SHORT $LN10@ParseMapWi
	cmp	DWORD PTR _size$[ebp], -2147483648	; 80000000H
	ja	SHORT $LN10@ParseMapWi
	mov	eax, DWORD PTR _size$[ebp]
	xor	edx, edx
	mov	ecx, 2
	div	ecx
	test	edx, edx
	je	SHORT $LN11@ParseMapWi
$LN10@ParseMapWi:
; Line 503
	mov	DWORD PTR $T79230[ebp], OFFSET $SG77195
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _eventSetEnd$[ebp]
	call	??1CEventSetEnd@@QAE@XZ			; CEventSetEnd::~CEventSetEnd
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _s$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T79230[ebp]
	jmp	$LN14@ParseMapWi
$LN11@ParseMapWi:
; Line 505
	mov	edx, DWORD PTR _pos$[ebp]
	push	edx
	lea	ecx, DWORD PTR _s$[ebp]
	call	?DeleteFrom@UString@@QAEXI@Z		; UString::DeleteFrom
; Line 506
	lea	ecx, DWORD PTR _map$[ebp]
	call	??0CFileMapping@NWindows@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
; Line 507
	lea	eax, DWORD PTR _s$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T79232[ebp]
	push	ecx
	call	?GetSystemString@@YG?AVAString@@ABVUString@@@Z ; GetSystemString
	mov	DWORD PTR tv137[ebp], eax
	mov	edx, DWORD PTR tv137[ebp]
	mov	DWORD PTR tv197[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR tv197[ebp]
	call	??BAString@@QBEPBDXZ			; AString::operator char const *
	push	eax
	push	4
	lea	ecx, DWORD PTR _map$[ebp]
	call	?Open@CFileMapping@NWindows@@QAEIKPBD@Z	; NWindows::CFileMapping::Open
	neg	eax
	sbb	eax, eax
	neg	eax
	mov	BYTE PTR $T79231[ebp], al
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T79232[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	movzx	eax, BYTE PTR $T79231[ebp]
	test	eax, eax
	je	SHORT $LN9@ParseMapWi
; Line 508
	mov	DWORD PTR $T79233[ebp], OFFSET $SG77201
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _map$[ebp]
	call	??1CFileMapping@NWindows@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _eventSetEnd$[ebp]
	call	??1CEventSetEnd@@QAE@XZ			; CEventSetEnd::~CEventSetEnd
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _s$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T79233[ebp]
	jmp	$LN14@ParseMapWi
$LN9@ParseMapWi:
; Line 509
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	push	0
	push	0
	push	4
	lea	ecx, DWORD PTR _map$[ebp]
	call	?Map@CFileMapping@NWindows@@QAEPAXK_KK@Z ; NWindows::CFileMapping::Map
	mov	DWORD PTR _data$[ebp], eax
; Line 510
	cmp	DWORD PTR _data$[ebp], 0
	jne	SHORT $LN8@ParseMapWi
; Line 511
	mov	DWORD PTR $T79234[ebp], OFFSET $SG77205
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _map$[ebp]
	call	??1CFileMapping@NWindows@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _eventSetEnd$[ebp]
	call	??1CEventSetEnd@@QAE@XZ			; CEventSetEnd::~CEventSetEnd
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _s$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T79234[ebp]
	jmp	$LN14@ParseMapWi
$LN8@ParseMapWi:
; Line 512
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	lea	ecx, DWORD PTR _unmapper$[ebp]
	call	??0CFileUnmapper@NWindows@@QAE@PBX@Z	; NWindows::CFileUnmapper::CFileUnmapper
	mov	BYTE PTR __$EHRec$[ebp+8], 4
; Line 514
	lea	ecx, DWORD PTR _name$[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 5
; Line 515
	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 516
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, WORD PTR [ecx]
	test	edx, edx
	je	SHORT $LN7@ParseMapWi
; Line 517
	mov	DWORD PTR $T79235[ebp], OFFSET $SG77212
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _name$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _unmapper$[ebp]
	call	??1CFileUnmapper@NWindows@@QAE@XZ	; NWindows::CFileUnmapper::~CFileUnmapper
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _map$[ebp]
	call	??1CFileMapping@NWindows@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _eventSetEnd$[ebp]
	call	??1CEventSetEnd@@QAE@XZ			; CEventSetEnd::~CEventSetEnd
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _s$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T79235[ebp]
	jmp	$LN14@ParseMapWi
$LN7@ParseMapWi:
; Line 518
	mov	eax, DWORD PTR _size$[ebp]
	shr	eax, 1
	mov	DWORD PTR _numChars$[ebp], eax
; Line 519
	mov	DWORD PTR _i$77215[ebp], 1
	jmp	SHORT $LN6@ParseMapWi
$LN5@ParseMapWi:
	mov	ecx, DWORD PTR _i$77215[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$77215[ebp], ecx
$LN6@ParseMapWi:
	mov	edx, DWORD PTR _i$77215[ebp]
	cmp	edx, DWORD PTR _numChars$[ebp]
	jae	SHORT $LN4@ParseMapWi
; Line 521
	mov	eax, DWORD PTR _i$77215[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dx, WORD PTR [ecx+eax*2]
	mov	WORD PTR _c$77219[ebp], dx
; Line 522
	movzx	eax, WORD PTR _c$77219[ebp]
	test	eax, eax
	jne	SHORT $LN3@ParseMapWi
; Line 525
	movzx	ecx, BYTE PTR _wildcardMatching$[ebp]
	push	ecx
	mov	edx, DWORD PTR _commonRecursedType$[ebp]
	push	edx
	movzx	eax, BYTE PTR _include$[ebp]
	push	eax
	lea	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	edx, DWORD PTR _censor$[ebp]
	push	edx
	call	?AddNameToCensor@@YGXAAVCCensor@NWildcard@@ABVUString@@_NW4EEnum@NRecursedType@@2@Z ; AddNameToCensor
; Line 526
	lea	ecx, DWORD PTR _name$[ebp]
	call	?Empty@UString@@QAEXXZ			; UString::Empty
; Line 528
	jmp	SHORT $LN2@ParseMapWi
$LN3@ParseMapWi:
; Line 529
	movzx	eax, WORD PTR _c$77219[ebp]
	push	eax
	lea	ecx, DWORD PTR _name$[ebp]
	call	??YUString@@QAEAAV0@_W@Z		; UString::operator+=
$LN2@ParseMapWi:
; Line 530
	jmp	SHORT $LN5@ParseMapWi
$LN4@ParseMapWi:
; Line 531
	lea	ecx, DWORD PTR _name$[ebp]
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN1@ParseMapWi
; Line 532
	mov	DWORD PTR $T79236[ebp], OFFSET $SG77224
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _name$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _unmapper$[ebp]
	call	??1CFileUnmapper@NWindows@@QAE@XZ	; NWindows::CFileUnmapper::~CFileUnmapper
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _map$[ebp]
	call	??1CFileMapping@NWindows@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _eventSetEnd$[ebp]
	call	??1CEventSetEnd@@QAE@XZ			; CEventSetEnd::~CEventSetEnd
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _s$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T79236[ebp]
	jmp	SHORT $LN14@ParseMapWi
$LN1@ParseMapWi:
; Line 534
	mov	DWORD PTR $T79237[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _name$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _unmapper$[ebp]
	call	??1CFileUnmapper@NWindows@@QAE@XZ	; NWindows::CFileUnmapper::~CFileUnmapper
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _map$[ebp]
	call	??1CFileMapping@NWindows@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _eventSetEnd$[ebp]
	call	??1CEventSetEnd@@QAE@XZ			; CEventSetEnd::~CEventSetEnd
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _s$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T79237[ebp]
$LN14@ParseMapWi:
; Line 535
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN30@ParseMapWi
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
	npad	3
$LN30@ParseMapWi:
	DD	6
	DD	$LN29@ParseMapWi
$LN29@ParseMapWi:
	DD	-28					; ffffffe4H
	DD	12					; 0000000cH
	DD	$LN22@ParseMapWi
	DD	-56					; ffffffc8H
	DD	12					; 0000000cH
	DD	$LN23@ParseMapWi
	DD	-68					; ffffffbcH
	DD	4
	DD	$LN24@ParseMapWi
	DD	-80					; ffffffb0H
	DD	4
	DD	$LN25@ParseMapWi
	DD	-96					; ffffffa0H
	DD	4
	DD	$LN26@ParseMapWi
	DD	-116					; ffffff8cH
	DD	12					; 0000000cH
	DD	$LN27@ParseMapWi
$LN27@ParseMapWi:
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN26@ParseMapWi:
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN25@ParseMapWi:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	0
$LN24@ParseMapWi:
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN23@ParseMapWi:
	DB	101					; 00000065H
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	69					; 00000045H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
$LN22@ParseMapWi:
	DB	115					; 00000073H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ParseMapWithPaths@@YGPBDAAVCCensor@NWildcard@@ABVUString@@_NW4EEnum@NRecursedType@@2@Z$0:
	lea	ecx, DWORD PTR _s$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?ParseMapWithPaths@@YGPBDAAVCCensor@NWildcard@@ABVUString@@_NW4EEnum@NRecursedType@@2@Z$1:
	lea	ecx, DWORD PTR _eventSetEnd$[ebp]
	jmp	??1CEventSetEnd@@QAE@XZ			; CEventSetEnd::~CEventSetEnd
__unwindfunclet$?ParseMapWithPaths@@YGPBDAAVCCensor@NWildcard@@ABVUString@@_NW4EEnum@NRecursedType@@2@Z$2:
	lea	ecx, DWORD PTR _map$[ebp]
	jmp	??1CFileMapping@NWindows@@QAE@XZ
__unwindfunclet$?ParseMapWithPaths@@YGPBDAAVCCensor@NWildcard@@ABVUString@@_NW4EEnum@NRecursedType@@2@Z$3:
	lea	ecx, DWORD PTR $T79232[ebp]
	jmp	??1AString@@QAE@XZ			; AString::~AString
__unwindfunclet$?ParseMapWithPaths@@YGPBDAAVCCensor@NWildcard@@ABVUString@@_NW4EEnum@NRecursedType@@2@Z$4:
	lea	ecx, DWORD PTR _unmapper$[ebp]
	jmp	??1CFileUnmapper@NWindows@@QAE@XZ	; NWindows::CFileUnmapper::~CFileUnmapper
__unwindfunclet$?ParseMapWithPaths@@YGPBDAAVCCensor@NWildcard@@ABVUString@@_NW4EEnum@NRecursedType@@2@Z$5:
	lea	ecx, DWORD PTR _name$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$?ParseMapWithPaths@@YGPBDAAVCCensor@NWildcard@@ABVUString@@_NW4EEnum@NRecursedType@@2@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-188]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ParseMapWithPaths@@YGPBDAAVCCensor@NWildcard@@ABVUString@@_NW4EEnum@NRecursedType@@2@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ParseMapWithPaths@@YGPBDAAVCCensor@NWildcard@@ABVUString@@_NW4EEnum@NRecursedType@@2@Z ENDP ; ParseMapWithPaths
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Empty@UString@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Empty@UString@@QAEXXZ PROC				; UString::Empty, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 474
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	xor	eax, eax
	mov	WORD PTR [edx], ax
	mov	esp, ebp
	pop	ebp
	ret	0
?Empty@UString@@QAEXXZ ENDP				; UString::Empty
_TEXT	ENDS
EXTRN	?Grow_1@UString@@AAEXXZ:PROC			; UString::Grow_1
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??YUString@@QAEAAV0@_W@Z
_TEXT	SEGMENT
_chars$ = -12						; size = 4
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_c$ = 8							; size = 2
??YUString@@QAEAAV0@_W@Z PROC				; UString::operator+=, COMDAT
; _this$ = ecx
; Line 515
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 516
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+4]
	jne	SHORT $LN1@operator
; Line 517
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Grow_1@UString@@AAEXXZ			; UString::Grow_1
$LN1@operator:
; Line 518
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _len$[ebp], ecx
; Line 519
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _chars$[ebp], eax
; Line 520
	mov	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _chars$[ebp]
	mov	ax, WORD PTR _c$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
	mov	ecx, DWORD PTR _len$[ebp]
	add	ecx, 1
	mov	DWORD PTR _len$[ebp], ecx
; Line 521
	xor	edx, edx
	mov	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _chars$[ebp]
	mov	WORD PTR [ecx+eax*2], dx
; Line 522
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 523
	mov	eax, DWORD PTR _this$[ebp]
; Line 524
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??YUString@@QAEAAV0@_W@Z ENDP				; UString::operator+=
_TEXT	ENDS
EXTRN	?FindCharPosInString@@YGHPB_W_W@Z:PROC		; FindCharPosInString
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Find@UString@@QBEH_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_c$ = 8							; size = 2
?Find@UString@@QBEH_W@Z PROC				; UString::Find, COMDAT
; _this$ = ecx
; Line 567
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	movzx	eax, WORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	?FindCharPosInString@@YGHPB_W_W@Z	; FindCharPosInString
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Find@UString@@QBEH_W@Z ENDP				; UString::Find
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Find@UString@@QBEH_WI@Z
_TEXT	SEGMENT
tv71 = -12						; size = 4
_pos$ = -8						; size = 4
_this$ = -4						; size = 4
_c$ = 8							; size = 2
_startIndex$ = 12					; size = 4
?Find@UString@@QBEH_WI@Z PROC				; UString::Find, COMDAT
; _this$ = ecx
; Line 569
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 570
	movzx	eax, WORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _startIndex$[ebp]
	lea	ecx, DWORD PTR [edx+eax*2]
	push	ecx
	call	?FindCharPosInString@@YGHPB_W_W@Z	; FindCharPosInString
	mov	DWORD PTR _pos$[ebp], eax
; Line 571
	cmp	DWORD PTR _pos$[ebp], 0
	jge	SHORT $LN3@Find
	mov	DWORD PTR tv71[ebp], -1
	jmp	SHORT $LN4@Find
$LN3@Find:
	mov	edx, DWORD PTR _startIndex$[ebp]
	add	edx, DWORD PTR _pos$[ebp]
	mov	DWORD PTR tv71[ebp], edx
$LN4@Find:
	mov	eax, DWORD PTR tv71[ebp]
; Line 572
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Find@UString@@QBEH_WI@Z ENDP				; UString::Find
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?DeleteFrom@UString@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?DeleteFrom@UString@@QAEXI@Z PROC			; UString::DeleteFrom, COMDAT
; _this$ = ecx
; Line 604
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 605
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN2@DeleteFrom
; Line 607
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _index$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 608
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	xor	eax, eax
	mov	ecx, DWORD PTR _index$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
$LN2@DeleteFrom:
; Line 610
	mov	esp, ebp
	pop	ebp
	ret	4
?DeleteFrom@UString@@QAEXI@Z ENDP			; UString::DeleteFrom
_TEXT	ENDS
EXTRN	?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@I@Z:PROC ; UnicodeStringToMultiByte
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetSystemString@@YG?AVAString@@ABVUString@@@Z
_TEXT	SEGMENT
$T79270 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_unicodeString$ = 12					; size = 4
?GetSystemString@@YG?AVAString@@ABVUString@@@Z PROC	; GetSystemString, COMDAT
; File c:\workspace\7z1505-src\cpp\common\stringconvert.h
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR $T79270[ebp], 0
	push	0
	mov	eax, DWORD PTR _unicodeString$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	call	?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@I@Z ; UnicodeStringToMultiByte
	mov	edx, DWORD PTR $T79270[ebp]
	or	edx, 1
	mov	DWORD PTR $T79270[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?GetSystemString@@YG?AVAString@@ABVUString@@@Z ENDP	; GetSystemString
_TEXT	ENDS
EXTRN	__imp__GetLastError@0:PROC
EXTRN	__imp__OpenFileMappingA@12:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Open@CFileMapping@NWindows@@QAEIKPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_desiredAccess$ = 8					; size = 4
_name$ = 12						; size = 4
?Open@CFileMapping@NWindows@@QAEIKPBD@Z PROC		; NWindows::CFileMapping::Open, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\filemapping.h
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 36
	mov	esi, esp
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _desiredAccess$[ebp]
	push	ecx
	call	DWORD PTR __imp__OpenFileMappingA@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
; Line 37
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@Open
; Line 38
	xor	eax, eax
	jmp	SHORT $LN2@Open
$LN1@Open:
; Line 39
	mov	esi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Open:
; Line 41
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Open@CFileMapping@NWindows@@QAEIKPBD@Z ENDP		; NWindows::CFileMapping::Open
_TEXT	ENDS
EXTRN	__imp__MapViewOfFile@20:PROC
EXTRN	__aullshr:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Map@CFileMapping@NWindows@@QAEPAXK_KK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_desiredAccess$ = 8					; size = 4
_fileOffset$ = 12					; size = 8
_numberOfBytesToMap$ = 20				; size = 4
?Map@CFileMapping@NWindows@@QAEPAXK_KK@Z PROC		; NWindows::CFileMapping::Map, COMDAT
; _this$ = ecx
; Line 44
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 45
	mov	esi, esp
	mov	eax, DWORD PTR _numberOfBytesToMap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fileOffset$[ebp]
	push	ecx
	mov	eax, DWORD PTR _fileOffset$[ebp]
	mov	edx, DWORD PTR _fileOffset$[ebp+4]
	mov	cl, 32					; 00000020H
	call	__aullshr
	push	eax
	mov	edx, DWORD PTR _desiredAccess$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__MapViewOfFile@20
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 46
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Map@CFileMapping@NWindows@@QAEPAXK_KK@Z ENDP		; NWindows::CFileMapping::Map
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CFileUnmapper@NWindows@@QAE@PBX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_data$ = 8						; size = 4
??0CFileUnmapper@NWindows@@QAE@PBX@Z PROC		; NWindows::CFileUnmapper::CFileUnmapper, COMDAT
; _this$ = ecx
; Line 60
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0CFileUnmapper@NWindows@@QAE@PBX@Z ENDP		; NWindows::CFileUnmapper::CFileUnmapper
_TEXT	ENDS
EXTRN	__imp__UnmapViewOfFile@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CFileUnmapper@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CFileUnmapper@NWindows@@QAE@XZ PROC			; NWindows::CFileUnmapper::~CFileUnmapper, COMDAT
; _this$ = ecx
; Line 61
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__UnmapViewOfFile@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CFileUnmapper@NWindows@@QAE@XZ ENDP			; NWindows::CFileUnmapper::~CFileUnmapper
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CEventSetEnd@@QAE@PB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
??0CEventSetEnd@@QAE@PB_W@Z PROC			; CEventSetEnd::CEventSetEnd, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\archivecommandline.cpp
; Line 471
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0UString@@QAE@PB_W@Z			; UString::UString
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CEventSetEnd@@QAE@PB_W@Z ENDP			; CEventSetEnd::CEventSetEnd
_TEXT	ENDS
PUBLIC	??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CManualResetEvent::~CManualResetEvent
PUBLIC	?Set@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Set
PUBLIC	?Open@CBaseEvent@NSynchronization@NWindows@@QAEIK_NPBD@Z ; NWindows::NSynchronization::CBaseEvent::Open
PUBLIC	??0CManualResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CManualResetEvent::CManualResetEvent
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CEventSetEnd@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CEventSetEnd@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CEventSetEnd@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CEventSetEnd@@QAE@XZ$2
__ehfuncinfo$??1CEventSetEnd@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1CEventSetEnd@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CEventSetEnd@@QAE@XZ
_TEXT	SEGMENT
tv129 = -52						; size = 4
tv66 = -48						; size = 4
$T79287 = -44						; size = 12
$T79286 = -29						; size = 1
_event$ = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CEventSetEnd@@QAE@XZ PROC				; CEventSetEnd::~CEventSetEnd, COMDAT
; _this$ = ecx
; Line 473
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CEventSetEnd@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 474
	lea	ecx, DWORD PTR _event$[ebp]
	call	??0CManualResetEvent@NSynchronization@NWindows@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
; Line 475
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T79287[ebp]
	push	ecx
	call	?GetSystemString@@YG?AVAString@@ABVUString@@@Z ; GetSystemString
	mov	DWORD PTR tv66[ebp], eax
	mov	edx, DWORD PTR tv66[ebp]
	mov	DWORD PTR tv129[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR tv129[ebp]
	call	??BAString@@QBEPBDXZ			; AString::operator char const *
	push	eax
	push	0
	push	2
	lea	ecx, DWORD PTR _event$[ebp]
	call	?Open@CBaseEvent@NSynchronization@NWindows@@QAEIK_NPBD@Z ; NWindows::NSynchronization::CBaseEvent::Open
	neg	eax
	sbb	eax, eax
	add	eax, 1
	mov	BYTE PTR $T79286[ebp], al
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T79287[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	movzx	eax, BYTE PTR $T79286[ebp]
	test	eax, eax
	je	SHORT $LN1@CEventSetE
; Line 476
	lea	ecx, DWORD PTR _event$[ebp]
	call	?Set@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Set
$LN1@CEventSetE:
; Line 477
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _event$[ebp]
	call	??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@CEventSetE
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN10@CEventSetE:
	DD	1
	DD	$LN9@CEventSetE
$LN9@CEventSetE:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN7@CEventSetE
$LN7@CEventSetE:
	DB	101					; 00000065H
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CEventSetEnd@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??1CEventSetEnd@@QAE@XZ$1:
	lea	ecx, DWORD PTR _event$[ebp]
	jmp	??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ
__unwindfunclet$??1CEventSetEnd@@QAE@XZ$2:
	lea	ecx, DWORD PTR $T79287[ebp]
	jmp	??1AString@@QAE@XZ			; AString::~AString
__ehhandler$??1CEventSetEnd@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-48]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CEventSetEnd@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CEventSetEnd@@QAE@XZ ENDP				; CEventSetEnd::~CEventSetEnd
PUBLIC	?BoolToBOOL@@YGH_N@Z				; BoolToBOOL
EXTRN	__imp__OpenEventA@12:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Open@CBaseEvent@NSynchronization@NWindows@@QAEIK_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_desiredAccess$ = 8					; size = 4
_inheritHandle$ = 12					; size = 1
_name$ = 16						; size = 4
?Open@CBaseEvent@NSynchronization@NWindows@@QAEIK_NPBD@Z PROC ; NWindows::NSynchronization::CBaseEvent::Open, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\synchronization.h
; Line 36
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 37
	mov	esi, esp
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _inheritHandle$[ebp]
	push	ecx
	call	?BoolToBOOL@@YGH_N@Z			; BoolToBOOL
	push	eax
	mov	edx, DWORD PTR _desiredAccess$[ebp]
	push	edx
	call	DWORD PTR __imp__OpenEventA@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 38
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN1@Open@2
; Line 39
	xor	eax, eax
	jmp	SHORT $LN2@Open@2
$LN1@Open@2:
; Line 40
	mov	esi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Open@2:
; Line 41
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Open@CBaseEvent@NSynchronization@NWindows@@QAEIK_NPBD@Z ENDP ; NWindows::NSynchronization::CBaseEvent::Open
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?BoolToBOOL@@YGH_N@Z
_TEXT	SEGMENT
_v$ = 8							; size = 1
?BoolToBOOL@@YGH_N@Z PROC				; BoolToBOOL, COMDAT
; File c:\workspace\7z1505-src\cpp\windows\defs.h
; Line 11
	push	ebp
	mov	ebp, esp
	movzx	eax, BYTE PTR _v$[ebp]
	neg	eax
	sbb	eax, eax
	neg	eax
	pop	ebp
	ret	4
?BoolToBOOL@@YGH_N@Z ENDP				; BoolToBOOL
_TEXT	ENDS
EXTRN	_Event_Set@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Set@CBaseEvent@NSynchronization@NWindows@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Set@CBaseEvent@NSynchronization@NWindows@@QAEIXZ PROC	; NWindows::NSynchronization::CBaseEvent::Set, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\synchronization.h
; Line 44
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	_Event_Set@4
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Set@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ENDP	; NWindows::NSynchronization::CBaseEvent::Set
_TEXT	ENDS
PUBLIC	??0CBaseEvent@NSynchronization@NWindows@@QAE@XZ	; NWindows::NSynchronization::CBaseEvent::CBaseEvent
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CManualResetEvent@NSynchronization@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CManualResetEvent@NSynchronization@NWindows@@QAE@XZ PROC ; NWindows::NSynchronization::CManualResetEvent::CManualResetEvent, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CBaseEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CBaseEvent::CBaseEvent
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CManualResetEvent@NSynchronization@NWindows@@QAE@XZ ENDP ; NWindows::NSynchronization::CManualResetEvent::CManualResetEvent
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CBaseEvent@NSynchronization@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CBaseEvent@NSynchronization@NWindows@@QAE@XZ PROC	; NWindows::NSynchronization::CBaseEvent::CBaseEvent, COMDAT
; _this$ = ecx
; Line 24
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CBaseEvent@NSynchronization@NWindows@@QAE@XZ ENDP	; NWindows::NSynchronization::CBaseEvent::CBaseEvent
_TEXT	ENDS
PUBLIC	??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ	; NWindows::NSynchronization::CBaseEvent::~CBaseEvent
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ PROC ; NWindows::NSynchronization::CManualResetEvent::~CManualResetEvent, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CBaseEvent::~CBaseEvent
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ ENDP ; NWindows::NSynchronization::CManualResetEvent::~CManualResetEvent
_TEXT	ENDS
PUBLIC	?Close@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Close
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ PROC	; NWindows::NSynchronization::CBaseEvent::~CBaseEvent, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Close@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Close
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ ENDP	; NWindows::NSynchronization::CBaseEvent::~CBaseEvent
_TEXT	ENDS
EXTRN	_HandlePtr_Close@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Close@CBaseEvent@NSynchronization@NWindows@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Close@CBaseEvent@NSynchronization@NWindows@@QAEIXZ PROC ; NWindows::NSynchronization::CBaseEvent::Close, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	_HandlePtr_Close@4
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Close@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ENDP ; NWindows::NSynchronization::CBaseEvent::Close
_TEXT	ENDS
PUBLIC	??0CHandle@NWindows@@QAE@XZ			; NWindows::CHandle::CHandle
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CFileMapping@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CFileMapping@NWindows@@QAE@XZ PROC			; NWindows::CFileMapping::CFileMapping, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CHandle@NWindows@@QAE@XZ		; NWindows::CHandle::CHandle
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CFileMapping@NWindows@@QAE@XZ ENDP			; NWindows::CFileMapping::CFileMapping
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CHandle@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CHandle@NWindows@@QAE@XZ PROC			; NWindows::CHandle::CHandle, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\handle.h
; Line 14
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CHandle@NWindows@@QAE@XZ ENDP			; NWindows::CHandle::CHandle
_TEXT	ENDS
PUBLIC	??1CHandle@NWindows@@QAE@XZ			; NWindows::CHandle::~CHandle
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CFileMapping@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CFileMapping@NWindows@@QAE@XZ PROC			; NWindows::CFileMapping::~CFileMapping, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CHandle@NWindows@@QAE@XZ		; NWindows::CHandle::~CHandle
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CFileMapping@NWindows@@QAE@XZ ENDP			; NWindows::CFileMapping::~CFileMapping
_TEXT	ENDS
PUBLIC	?Close@CHandle@NWindows@@QAE_NXZ		; NWindows::CHandle::Close
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CHandle@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CHandle@NWindows@@QAE@XZ PROC			; NWindows::CHandle::~CHandle, COMDAT
; _this$ = ecx
; Line 15
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Close@CHandle@NWindows@@QAE_NXZ	; NWindows::CHandle::Close
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CHandle@NWindows@@QAE@XZ ENDP			; NWindows::CHandle::~CHandle
_TEXT	ENDS
EXTRN	__imp__CloseHandle@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Close@CHandle@NWindows@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Close@CHandle@NWindows@@QAE_NXZ PROC			; NWindows::CHandle::Close, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 19
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN2@Close
; Line 20
	mov	al, 1
	jmp	SHORT $LN3@Close
$LN2@Close:
; Line 21
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__CloseHandle@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN1@Close
; Line 22
	xor	al, al
	jmp	SHORT $LN3@Close
$LN1@Close:
; Line 23
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
; Line 24
	mov	al, 1
$LN3@Close:
; Line 25
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Close@CHandle@NWindows@@QAE_NXZ ENDP			; NWindows::CHandle::Close
_TEXT	ENDS
PUBLIC	??1CUpdateArchiveCommand@@QAE@XZ		; CUpdateArchiveCommand::~CUpdateArchiveCommand
PUBLIC	?Add@?$CRecordVector@_K@@QAEI_K@Z		; CRecordVector<unsigned __int64>::Add
PUBLIC	?Add@?$CObjectVector@UCUpdateArchiveCommand@@@@QAEIABUCUpdateArchiveCommand@@@Z ; CObjectVector<CUpdateArchiveCommand>::Add
PUBLIC	??0CUpdateArchiveCommand@@QAE@XZ		; CUpdateArchiveCommand::CUpdateArchiveCommand
PUBLIC	?Clear@?$CObjectVector@UCUpdateArchiveCommand@@@@QAEXXZ ; CObjectVector<CUpdateArchiveCommand>::Clear
PUBLIC	__$ArrayPad$
EXTRN	?ParseComplexSize@@YG_NPB_WAA_K@Z:PROC		; ParseComplexSize
EXTRN	?MyGetTempPath@NDir@NFile@NWindows@@YG_NAAVUString@@@Z:PROC ; NWindows::NFile::NDir::MyGetTempPath
EXTRN	?k_ActionSet_Update@NUpdateArchive@@3UCActionSet@1@B:BYTE ; NUpdateArchive::k_ActionSet_Update
EXTRN	?k_ActionSet_Delete@NUpdateArchive@@3UCActionSet@1@B:BYTE ; NUpdateArchive::k_ActionSet_Delete
EXTRN	?k_ActionSet_Add@NUpdateArchive@@3UCActionSet@1@B:BYTE ; NUpdateArchive::k_ActionSet_Add
xdata$x	SEGMENT
__unwindtable$?SetAddCommandOptions@@YGXW4EEnum@NCommandType@@ABVCParser@NCommandLineParser@@AAUCUpdateOptions@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetAddCommandOptions@@YGXW4EEnum@NCommandType@@ABVCParser@NCommandLineParser@@AAUCUpdateOptions@@@Z$0
__ehfuncinfo$?SetAddCommandOptions@@YGXW4EEnum@NCommandType@@ABVCParser@NCommandLineParser@@AAUCUpdateOptions@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetAddCommandOptions@@YGXW4EEnum@NCommandType@@ABVCParser@NCommandLineParser@@AAUCUpdateOptions@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv64 = -232						; size = 4
$T79333 = -228						; size = 12
_size$77415 = -212					; size = 8
_i$77411 = -200						; size = 4
_sv$77410 = -196					; size = 4
_postString$77405 = -192				; size = 4
_updateMainCommand$ = -184				; size = 128
_defaultActionSet$ = -48				; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_commandType$ = 8					; size = 4
_parser$ = 12						; size = 4
_options$ = 16						; size = 4
?SetAddCommandOptions@@YGXW4EEnum@NCommandType@@ABVCParser@NCommandLineParser@@AAUCUpdateOptions@@@Z PROC ; SetAddCommandOptions
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\archivecommandline.cpp
; Line 785
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetAddCommandOptions@@YGXW4EEnum@NCommandType@@ABVCParser@NCommandLineParser@@AAUCUpdateOptions@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 220				; 000000dcH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 787
	mov	eax, DWORD PTR _commandType$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 0
	je	SHORT $LN14@SetAddComm
	cmp	DWORD PTR tv64[ebp], 2
	je	SHORT $LN13@SetAddComm
	jmp	SHORT $LN12@SetAddComm
$LN14@SetAddComm:
; Line 790
	mov	ecx, 7
	mov	esi, OFFSET ?k_ActionSet_Add@NUpdateArchive@@3UCActionSet@1@B ; NUpdateArchive::k_ActionSet_Add
	lea	edi, DWORD PTR _defaultActionSet$[ebp]
	rep movsd
; Line 791
	jmp	SHORT $LN15@SetAddComm
$LN13@SetAddComm:
; Line 793
	mov	ecx, 7
	mov	esi, OFFSET ?k_ActionSet_Delete@NUpdateArchive@@3UCActionSet@1@B ; NUpdateArchive::k_ActionSet_Delete
	lea	edi, DWORD PTR _defaultActionSet$[ebp]
	rep movsd
; Line 794
	jmp	SHORT $LN15@SetAddComm
$LN12@SetAddComm:
; Line 796
	mov	ecx, 7
	mov	esi, OFFSET ?k_ActionSet_Update@NUpdateArchive@@3UCActionSet@1@B ; NUpdateArchive::k_ActionSet_Update
	lea	edi, DWORD PTR _defaultActionSet$[ebp]
	rep movsd
$LN15@SetAddComm:
; Line 799
	mov	ecx, DWORD PTR _options$[ebp]
	mov	BYTE PTR [ecx+68], 1
; Line 801
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 56					; 00000038H
	call	?Clear@?$CObjectVector@UCUpdateArchiveCommand@@@@QAEXXZ ; CObjectVector<CUpdateArchiveCommand>::Clear
; Line 802
	lea	ecx, DWORD PTR _updateMainCommand$[ebp]
	call	??0CUpdateArchiveCommand@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 803
	mov	ecx, 7
	lea	esi, DWORD PTR _defaultActionSet$[ebp]
	lea	edi, DWORD PTR _updateMainCommand$[ebp+100]
	rep movsd
; Line 804
	lea	edx, DWORD PTR _updateMainCommand$[ebp]
	push	edx
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 56					; 00000038H
	call	?Add@?$CObjectVector@UCUpdateArchiveCommand@@@@QAEIABUCUpdateArchiveCommand@@@Z ; CObjectVector<CUpdateArchiveCommand>::Add
; Line 805
	push	23					; 00000017H
	mov	ecx, DWORD PTR _parser$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	movzx	eax, BYTE PTR [eax]
	test	eax, eax
	je	SHORT $LN11@SetAddComm
; Line 807
	lea	ecx, DWORD PTR _defaultActionSet$[ebp]
	push	ecx
	push	23					; 00000017H
	mov	ecx, DWORD PTR _parser$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	add	eax, 8
	push	eax
	mov	edx, DWORD PTR _options$[ebp]
	push	edx
	call	?ParseUpdateCommandString@@YGXAAUCUpdateOptions@@ABV?$CObjectVector@VUString@@@@ABUCActionSet@NUpdateArchive@@@Z ; ParseUpdateCommandString
$LN11@SetAddComm:
; Line 808
	push	17					; 00000011H
	mov	ecx, DWORD PTR _parser$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	movzx	eax, BYTE PTR [eax]
	test	eax, eax
	je	SHORT $LN10@SetAddComm
; Line 810
	push	0
	push	17					; 00000011H
	mov	ecx, DWORD PTR _parser$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	add	eax, 8
	mov	ecx, eax
	call	??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[]
	mov	DWORD PTR _postString$77405[ebp], eax
; Line 811
	mov	ecx, DWORD PTR _postString$77405[ebp]
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN9@SetAddComm
; Line 812
	mov	edx, DWORD PTR _options$[ebp]
	add	edx, 212				; 000000d4H
	push	edx
	call	?MyGetTempPath@NDir@NFile@NWindows@@YG_NAAVUString@@@Z ; NWindows::NFile::NDir::MyGetTempPath
; Line 813
	jmp	SHORT $LN10@SetAddComm
$LN9@SetAddComm:
; Line 814
	mov	eax, DWORD PTR _postString$77405[ebp]
	push	eax
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 212				; 000000d4H
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
$LN10@SetAddComm:
; Line 816
	push	27					; 0000001bH
	mov	ecx, DWORD PTR _parser$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	mov	ecx, DWORD PTR _options$[ebp]
	mov	dl, BYTE PTR [eax]
	mov	BYTE PTR [ecx+164], dl
; Line 817
	mov	eax, DWORD PTR _options$[ebp]
	movzx	ecx, BYTE PTR [eax+164]
	test	ecx, ecx
	je	SHORT $LN7@SetAddComm
; Line 818
	push	0
	push	27					; 0000001bH
	mov	ecx, DWORD PTR _parser$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	add	eax, 8
	mov	ecx, eax
	call	??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[]
	push	eax
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 168				; 000000a8H
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
$LN7@SetAddComm:
; Line 820
	push	24					; 00000018H
	mov	ecx, DWORD PTR _parser$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	movzx	edx, BYTE PTR [eax]
	test	edx, edx
	je	$LN6@SetAddComm
; Line 822
	push	24					; 00000018H
	mov	ecx, DWORD PTR _parser$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	add	eax, 8
	mov	DWORD PTR _sv$77410[ebp], eax
; Line 823
	mov	DWORD PTR _i$77411[ebp], 0
	jmp	SHORT $LN5@SetAddComm
$LN4@SetAddComm:
	mov	eax, DWORD PTR _i$77411[ebp]
	add	eax, 1
	mov	DWORD PTR _i$77411[ebp], eax
$LN5@SetAddComm:
	mov	ecx, DWORD PTR _sv$77410[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	cmp	DWORD PTR _i$77411[ebp], eax
	jae	$LN6@SetAddComm
; Line 826
	lea	ecx, DWORD PTR _size$77415[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$77411[ebp]
	push	edx
	mov	ecx, DWORD PTR _sv$77410[ebp]
	call	??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[]
	mov	ecx, eax
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	?ParseComplexSize@@YG_NPB_WAA_K@Z	; ParseComplexSize
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@SetAddComm
	mov	ecx, DWORD PTR _size$77415[ebp]
	or	ecx, DWORD PTR _size$77415[ebp+4]
	jne	SHORT $LN2@SetAddComm
$LN1@SetAddComm:
; Line 827
	mov	edx, DWORD PTR _i$77411[ebp]
	push	edx
	mov	ecx, DWORD PTR _sv$77410[ebp]
	call	??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[]
	mov	ecx, eax
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	push	OFFSET $SG77420
	lea	ecx, DWORD PTR $T79333[ebp]
	call	??0CArcCmdLineException@@QAE@PBDPB_W@Z	; CArcCmdLineException::CArcCmdLineException
	push	OFFSET __TI2?AUCArcCmdLineException@@
	lea	eax, DWORD PTR $T79333[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@SetAddComm:
; Line 828
	mov	ecx, DWORD PTR _size$77415[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _size$77415[ebp]
	push	edx
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 264				; 00000108H
	call	?Add@?$CRecordVector@_K@@QAEI_K@Z	; CRecordVector<unsigned __int64>::Add
; Line 829
	jmp	$LN4@SetAddComm
$LN6@SetAddComm:
; Line 831
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _updateMainCommand$[ebp]
	call	??1CUpdateArchiveCommand@@QAE@XZ
$LN18@SetAddComm:
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN25@SetAddComm
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN25@SetAddComm:
	DD	3
	DD	$LN24@SetAddComm
$LN24@SetAddComm:
	DD	-48					; ffffffd0H
	DD	28					; 0000001cH
	DD	$LN20@SetAddComm
	DD	-184					; ffffff48H
	DD	128					; 00000080H
	DD	$LN21@SetAddComm
	DD	-212					; ffffff2cH
	DD	8
	DD	$LN22@SetAddComm
$LN22@SetAddComm:
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN21@SetAddComm:
	DB	117					; 00000075H
	DB	112					; 00000070H
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	77					; 0000004dH
	DB	97					; 00000061H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
$LN20@SetAddComm:
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	65					; 00000041H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	83					; 00000053H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SetAddCommandOptions@@YGXW4EEnum@NCommandType@@ABVCParser@NCommandLineParser@@AAUCUpdateOptions@@@Z$0:
	lea	ecx, DWORD PTR _updateMainCommand$[ebp]
	jmp	??1CUpdateArchiveCommand@@QAE@XZ
__ehhandler$?SetAddCommandOptions@@YGXW4EEnum@NCommandType@@ABVCParser@NCommandLineParser@@AAUCUpdateOptions@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-232]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetAddCommandOptions@@YGXW4EEnum@NCommandType@@ABVCParser@NCommandLineParser@@AAUCUpdateOptions@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetAddCommandOptions@@YGXW4EEnum@NCommandType@@ABVCParser@NCommandLineParser@@AAUCUpdateOptions@@@Z ENDP ; SetAddCommandOptions
PUBLIC	??0CArchivePath@@QAE@XZ				; CArchivePath::CArchivePath
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CUpdateArchiveCommand@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CUpdateArchiveCommand@@QAE@XZ$0
__ehfuncinfo$??0CUpdateArchiveCommand@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CUpdateArchiveCommand@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CUpdateArchiveCommand@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CUpdateArchiveCommand@@QAE@XZ PROC			; CUpdateArchiveCommand::CUpdateArchiveCommand, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CUpdateArchiveCommand@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0CArchivePath@@QAE@XZ			; CArchivePath::CArchivePath
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CUpdateArchiveCommand@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$??0CUpdateArchiveCommand@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CUpdateArchiveCommand@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CUpdateArchiveCommand@@QAE@XZ ENDP			; CUpdateArchiveCommand::CUpdateArchiveCommand
;	COMDAT xdata$x
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\update.h
xdata$x	SEGMENT
__ehfuncinfo$??0CArchivePath@@QAE@XZ DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??0CArchivePath@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0CArchivePath@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CArchivePath@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CArchivePath@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CArchivePath@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CArchivePath@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0CArchivePath@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0CArchivePath@@QAE@XZ$5
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CArchivePath@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CArchivePath@@QAE@XZ PROC				; CArchivePath::CArchivePath, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CArchivePath@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+60], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CArchivePath@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??0CArchivePath@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??0CArchivePath@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??0CArchivePath@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??0CArchivePath@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??0CArchivePath@@QAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$??0CArchivePath@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CArchivePath@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CArchivePath@@QAE@XZ ENDP				; CArchivePath::CArchivePath
PUBLIC	??1CArchivePath@@QAE@XZ				; CArchivePath::~CArchivePath
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CUpdateArchiveCommand@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CUpdateArchiveCommand@@QAE@XZ$0
__ehfuncinfo$??1CUpdateArchiveCommand@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CUpdateArchiveCommand@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CUpdateArchiveCommand@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CUpdateArchiveCommand@@QAE@XZ PROC			; CUpdateArchiveCommand::~CUpdateArchiveCommand, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CUpdateArchiveCommand@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1CArchivePath@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CUpdateArchiveCommand@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$??1CUpdateArchiveCommand@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CUpdateArchiveCommand@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CUpdateArchiveCommand@@QAE@XZ ENDP			; CUpdateArchiveCommand::~CUpdateArchiveCommand
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CArchivePath@@QAE@XZ DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??1CArchivePath@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1CArchivePath@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CArchivePath@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CArchivePath@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CArchivePath@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CArchivePath@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1CArchivePath@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??1CArchivePath@@QAE@XZ$5
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CArchivePath@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CArchivePath@@QAE@XZ PROC				; CArchivePath::~CArchivePath, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CArchivePath@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CArchivePath@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??1CArchivePath@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??1CArchivePath@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??1CArchivePath@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??1CArchivePath@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??1CArchivePath@@QAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$??1CArchivePath@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CArchivePath@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CArchivePath@@QAE@XZ ENDP				; CArchivePath::~CArchivePath
PUBLIC	??A?$CObjectVector@UCUpdateArchiveCommand@@@@QAEAAUCUpdateArchiveCommand@@I@Z ; CObjectVector<CUpdateArchiveCommand>::operator[]
PUBLIC	?Delete@?$CObjectVector@UCUpdateArchiveCommand@@@@QAEXI@Z ; CObjectVector<CUpdateArchiveCommand>::Delete
PUBLIC	?IsEqualTo@UString@@QBE_NPBD@Z			; UString::IsEqualTo
PUBLIC	__$ArrayPad$
xdata$x	SEGMENT
__unwindtable$?ParseUpdateCommandString@@YGXAAUCUpdateOptions@@ABV?$CObjectVector@VUString@@@@ABUCActionSet@NUpdateArchive@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ParseUpdateCommandString@@YGXAAUCUpdateOptions@@ABV?$CObjectVector@VUString@@@@ABUCActionSet@NUpdateArchive@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?ParseUpdateCommandString@@YGXAAUCUpdateOptions@@ABV?$CObjectVector@VUString@@@@ABUCActionSet@NUpdateArchive@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?ParseUpdateCommandString@@YGXAAUCUpdateOptions@@ABV?$CObjectVector@VUString@@@@ABUCActionSet@NUpdateArchive@@@Z$2
__ehfuncinfo$?ParseUpdateCommandString@@YGXAAUCUpdateOptions@@ABV?$CObjectVector@VUString@@@@ABUCActionSet@NUpdateArchive@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?ParseUpdateCommandString@@YGXAAUCUpdateOptions@@ABV?$CObjectVector@VUString@@@@ABUCActionSet@NUpdateArchive@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T79396 = -252						; size = 12
_archivePath$77381 = -236				; size = 12
_uc$77380 = -216					; size = 128
_postString$77374 = -80					; size = 12
_actionSet$77373 = -60					; size = 28
_updateString$77369 = -28				; size = 4
_i$ = -24						; size = 4
_errorMessage$ = -20					; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_options$ = 8						; size = 4
_updatePostStrings$ = 12				; size = 4
_defaultActionSet$ = 16					; size = 4
?ParseUpdateCommandString@@YGXAAUCUpdateOptions@@ABV?$CObjectVector@VUString@@@@ABUCActionSet@NUpdateArchive@@@Z PROC ; ParseUpdateCommandString
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\archivecommandline.cpp
; Line 735
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ParseUpdateCommandString@@YGXAAUCUpdateOptions@@ABV?$CObjectVector@VUString@@@@ABUCActionSet@NUpdateArchive@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 240				; 000000f0H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 736
	mov	DWORD PTR _errorMessage$[ebp], OFFSET $SG77364
; Line 738
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN13@ParseUpdat
$LN12@ParseUpdat:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN13@ParseUpdat:
	mov	ecx, DWORD PTR _updatePostStrings$[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	$LN11@ParseUpdat
; Line 740
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _updatePostStrings$[ebp]
	call	??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[]
	mov	DWORD PTR _updateString$77369[ebp], eax
; Line 741
	mov	edx, DWORD PTR _kUpdateIgnoreItselfPostStringID
	push	edx
	mov	ecx, DWORD PTR _updateString$77369[ebp]
	call	?IsEqualTo@UString@@QBE_NPBD@Z		; UString::IsEqualTo
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN10@ParseUpdat
; Line 743
	mov	ecx, DWORD PTR _options$[ebp]
	movzx	edx, BYTE PTR [ecx+68]
	test	edx, edx
	je	SHORT $LN9@ParseUpdat
; Line 745
	mov	eax, DWORD PTR _options$[ebp]
	mov	BYTE PTR [eax+68], 0
; Line 746
	push	0
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 56					; 00000038H
	call	?Delete@?$CObjectVector@UCUpdateArchiveCommand@@@@QAEXI@Z ; CObjectVector<CUpdateArchiveCommand>::Delete
$LN9@ParseUpdat:
; Line 749
	jmp	$LN8@ParseUpdat
$LN10@ParseUpdat:
; Line 751
	mov	esi, DWORD PTR _defaultActionSet$[ebp]
	mov	ecx, 7
	lea	edi, DWORD PTR _actionSet$77373[ebp]
	rep movsd
; Line 753
	lea	ecx, DWORD PTR _postString$77374[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 754
	lea	ecx, DWORD PTR _postString$77374[ebp]
	push	ecx
	lea	edx, DWORD PTR _actionSet$77373[ebp]
	push	edx
	mov	eax, DWORD PTR _updateString$77369[ebp]
	push	eax
	call	?ParseUpdateCommandString2@@YG_NABVUString@@AAUCActionSet@NUpdateArchive@@AAV1@@Z ; ParseUpdateCommandString2
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN7@ParseUpdat
; Line 755
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _postString$77374[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	jmp	$LN11@ParseUpdat
$LN7@ParseUpdat:
; Line 756
	lea	ecx, DWORD PTR _postString$77374[ebp]
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN6@ParseUpdat
; Line 758
	mov	eax, DWORD PTR _options$[ebp]
	movzx	ecx, BYTE PTR [eax+68]
	test	ecx, ecx
	je	SHORT $LN5@ParseUpdat
; Line 759
	push	0
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 56					; 00000038H
	call	??A?$CObjectVector@UCUpdateArchiveCommand@@@@QAEAAUCUpdateArchiveCommand@@I@Z ; CObjectVector<CUpdateArchiveCommand>::operator[]
	add	eax, 100				; 00000064H
	mov	ecx, 7
	lea	esi, DWORD PTR _actionSet$77373[ebp]
	mov	edi, eax
	rep movsd
$LN5@ParseUpdat:
; Line 761
	jmp	$LN4@ParseUpdat
$LN6@ParseUpdat:
; Line 763
	lea	ecx, DWORD PTR _postString$77374[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	movzx	edx, WORD PTR [eax]
	cmp	edx, 33					; 00000021H
	je	SHORT $LN3@ParseUpdat
; Line 764
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _postString$77374[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	jmp	$LN11@ParseUpdat
$LN3@ParseUpdat:
; Line 765
	lea	ecx, DWORD PTR _uc$77380[ebp]
	call	??0CUpdateArchiveCommand@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
; Line 766
	push	1
	lea	ecx, DWORD PTR _postString$77374[ebp]
	call	?Ptr@UString@@QBEPB_WI@Z		; UString::Ptr
	push	eax
	lea	ecx, DWORD PTR _archivePath$77381[ebp]
	call	??0UString@@QAE@PB_W@Z			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 2
; Line 767
	lea	ecx, DWORD PTR _archivePath$77381[ebp]
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@ParseUpdat
; Line 768
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _archivePath$77381[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _uc$77380[ebp]
	call	??1CUpdateArchiveCommand@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _postString$77374[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	jmp	SHORT $LN11@ParseUpdat
$LN2@ParseUpdat:
; Line 769
	lea	ecx, DWORD PTR _archivePath$77381[ebp]
	push	ecx
	lea	ecx, DWORD PTR _uc$77380[ebp]
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
; Line 770
	mov	ecx, 7
	lea	esi, DWORD PTR _actionSet$77373[ebp]
	lea	edi, DWORD PTR _uc$77380[ebp+100]
	rep movsd
; Line 771
	lea	edx, DWORD PTR _uc$77380[ebp]
	push	edx
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 56					; 00000038H
	call	?Add@?$CObjectVector@UCUpdateArchiveCommand@@@@QAEIABUCUpdateArchiveCommand@@@Z ; CObjectVector<CUpdateArchiveCommand>::Add
; Line 772
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _archivePath$77381[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _uc$77380[ebp]
	call	??1CUpdateArchiveCommand@@QAE@XZ
$LN4@ParseUpdat:
; Line 773
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _postString$77374[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
$LN8@ParseUpdat:
; Line 774
	jmp	$LN12@ParseUpdat
$LN11@ParseUpdat:
; Line 775
	mov	ecx, DWORD PTR _updatePostStrings$[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	cmp	DWORD PTR _i$[ebp], eax
	je	SHORT $LN15@ParseUpdat
; Line 776
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _updatePostStrings$[ebp]
	call	??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[]
	mov	ecx, eax
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	mov	ecx, DWORD PTR _errorMessage$[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T79396[ebp]
	call	??0CArcCmdLineException@@QAE@PBDPB_W@Z	; CArcCmdLineException::CArcCmdLineException
	push	OFFSET __TI2?AUCArcCmdLineException@@
	lea	edx, DWORD PTR $T79396[ebp]
	push	edx
	call	__CxxThrowException@8
$LN15@ParseUpdat:
; Line 777
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN25@ParseUpdat
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN25@ParseUpdat:
	DD	4
	DD	$LN24@ParseUpdat
$LN24@ParseUpdat:
	DD	-60					; ffffffc4H
	DD	28					; 0000001cH
	DD	$LN19@ParseUpdat
	DD	-80					; ffffffb0H
	DD	12					; 0000000cH
	DD	$LN20@ParseUpdat
	DD	-216					; ffffff28H
	DD	128					; 00000080H
	DD	$LN21@ParseUpdat
	DD	-236					; ffffff14H
	DD	12					; 0000000cH
	DD	$LN22@ParseUpdat
$LN22@ParseUpdat:
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN21@ParseUpdat:
	DB	117					; 00000075H
	DB	99					; 00000063H
	DB	0
$LN20@ParseUpdat:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
$LN19@ParseUpdat:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	83					; 00000053H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ParseUpdateCommandString@@YGXAAUCUpdateOptions@@ABV?$CObjectVector@VUString@@@@ABUCActionSet@NUpdateArchive@@@Z$0:
	lea	ecx, DWORD PTR _postString$77374[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?ParseUpdateCommandString@@YGXAAUCUpdateOptions@@ABV?$CObjectVector@VUString@@@@ABUCActionSet@NUpdateArchive@@@Z$1:
	lea	ecx, DWORD PTR _uc$77380[ebp]
	jmp	??1CUpdateArchiveCommand@@QAE@XZ
__unwindfunclet$?ParseUpdateCommandString@@YGXAAUCUpdateOptions@@ABV?$CObjectVector@VUString@@@@ABUCActionSet@NUpdateArchive@@@Z$2:
	lea	ecx, DWORD PTR _archivePath$77381[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$?ParseUpdateCommandString@@YGXAAUCUpdateOptions@@ABV?$CObjectVector@VUString@@@@ABUCActionSet@NUpdateArchive@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-252]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ParseUpdateCommandString@@YGXAAUCUpdateOptions@@ABV?$CObjectVector@VUString@@@@ABUCActionSet@NUpdateArchive@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ParseUpdateCommandString@@YGXAAUCUpdateOptions@@ABV?$CObjectVector@VUString@@@@ABUCActionSet@NUpdateArchive@@@Z ENDP ; ParseUpdateCommandString
EXTRN	?StringsAreEqual_Ascii@@YG_NPB_WPBD@Z:PROC	; StringsAreEqual_Ascii
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsEqualTo@UString@@QBE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
?IsEqualTo@UString@@QBE_NPBD@Z PROC			; UString::IsEqualTo, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 547
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	?StringsAreEqual_Ascii@@YG_NPB_WPBD@Z	; StringsAreEqual_Ascii
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?IsEqualTo@UString@@QBE_NPBD@Z ENDP			; UString::IsEqualTo
_TEXT	ENDS
EXTRN	??4UString@@QAEAAV0@PB_W@Z:PROC			; UString::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_actionPos$77352 = -16					; size = 4
_statePos$77347 = -12					; size = 4
_c$77346 = -8						; size = 2
_i$77342 = -4						; size = 4
_command$ = 8						; size = 4
_actionSet$ = 12					; size = 4
_postString$ = 16					; size = 4
?ParseUpdateCommandString2@@YG_NABVUString@@AAUCActionSet@NUpdateArchive@@AAV1@@Z PROC ; ParseUpdateCommandString2
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\archivecommandline.cpp
; Line 706
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 707
	mov	DWORD PTR _i$77342[ebp], 0
$LN7@ParseUpdat@2:
	mov	ecx, DWORD PTR _command$[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	cmp	DWORD PTR _i$77342[ebp], eax
	jae	$LN6@ParseUpdat@2
; Line 709
	mov	ecx, DWORD PTR _command$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	ecx, DWORD PTR _i$77342[ebp]
	movzx	edx, WORD PTR [eax+ecx*2]
	push	edx
	call	?MyCharLower_Ascii@@YG_W_W@Z		; MyCharLower_Ascii
	mov	WORD PTR _c$77346[ebp], ax
; Line 710
	movzx	eax, WORD PTR _c$77346[ebp]
	push	eax
	mov	ecx, DWORD PTR _kUpdatePairStateIDSet
	push	ecx
	call	?FindCharPosInString@@YGHPB_W_W@Z	; FindCharPosInString
	mov	DWORD PTR _statePos$77347[ebp], eax
; Line 711
	cmp	DWORD PTR _statePos$77347[ebp], 0
	jge	SHORT $LN5@ParseUpdat@2
; Line 713
	mov	edx, DWORD PTR _i$77342[ebp]
	push	edx
	mov	ecx, DWORD PTR _command$[ebp]
	call	?Ptr@UString@@QBEPB_WI@Z		; UString::Ptr
	push	eax
	mov	ecx, DWORD PTR _postString$[ebp]
	call	??4UString@@QAEAAV0@PB_W@Z		; UString::operator=
; Line 714
	mov	al, 1
	jmp	$LN8@ParseUpdat@2
$LN5@ParseUpdat@2:
; Line 716
	mov	eax, DWORD PTR _i$77342[ebp]
	add	eax, 1
	mov	DWORD PTR _i$77342[ebp], eax
; Line 717
	mov	ecx, DWORD PTR _command$[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	cmp	DWORD PTR _i$77342[ebp], eax
	jb	SHORT $LN4@ParseUpdat@2
; Line 718
	xor	al, al
	jmp	SHORT $LN8@ParseUpdat@2
$LN4@ParseUpdat@2:
; Line 719
	mov	ecx, DWORD PTR _command$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	ecx, DWORD PTR _i$77342[ebp]
	mov	dx, WORD PTR [eax+ecx*2]
	mov	WORD PTR _c$77346[ebp], dx
; Line 720
	movzx	eax, WORD PTR _c$77346[ebp]
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN2@ParseUpdat@2
	movzx	ecx, WORD PTR _c$77346[ebp]
	cmp	ecx, 52					; 00000034H
	jb	SHORT $LN3@ParseUpdat@2
$LN2@ParseUpdat@2:
; Line 721
	xor	al, al
	jmp	SHORT $LN8@ParseUpdat@2
$LN3@ParseUpdat@2:
; Line 722
	movzx	edx, WORD PTR _c$77346[ebp]
	sub	edx, 48					; 00000030H
	mov	DWORD PTR _actionPos$77352[ebp], edx
; Line 723
	mov	eax, DWORD PTR _statePos$77347[ebp]
	mov	ecx, DWORD PTR _actionSet$[ebp]
	mov	edx, DWORD PTR _actionPos$77352[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
; Line 724
	mov	eax, DWORD PTR _statePos$77347[ebp]
	mov	ecx, DWORD PTR _kUpdatePairStateNotSupportedActions[eax*4]
	cmp	ecx, DWORD PTR _actionPos$77352[ebp]
	jne	SHORT $LN1@ParseUpdat@2
; Line 725
	xor	al, al
	jmp	SHORT $LN8@ParseUpdat@2
$LN1@ParseUpdat@2:
; Line 726
	mov	edx, DWORD PTR _i$77342[ebp]
	add	edx, 1
	mov	DWORD PTR _i$77342[ebp], edx
; Line 727
	jmp	$LN7@ParseUpdat@2
$LN6@ParseUpdat@2:
; Line 728
	mov	ecx, DWORD PTR _postString$[ebp]
	call	?Empty@UString@@QAEXXZ			; UString::Empty
; Line 729
	mov	al, 1
$LN8@ParseUpdat@2:
; Line 730
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?ParseUpdateCommandString2@@YG_NABVUString@@AAUCActionSet@NUpdateArchive@@AAV1@@Z ENDP ; ParseUpdateCommandString2
_TEXT	ENDS
PUBLIC	??1CProperty@@QAE@XZ				; CProperty::~CProperty
PUBLIC	?Add@?$CObjectVector@UCProperty@@@@QAEIABUCProperty@@@Z ; CObjectVector<CProperty>::Add
PUBLIC	??0CProperty@@QAE@XZ				; CProperty::CProperty
xdata$x	SEGMENT
__unwindtable$?SetMethodOptions@@YGXABVCParser@NCommandLineParser@@AAV?$CObjectVector@UCProperty@@@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetMethodOptions@@YGXABVCParser@NCommandLineParser@@AAV?$CObjectVector@UCProperty@@@@@Z$0
__ehfuncinfo$?SetMethodOptions@@YGXABVCParser@NCommandLineParser@@AAV?$CObjectVector@UCProperty@@@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetMethodOptions@@YGXABVCParser@NCommandLineParser@@AAV?$CObjectVector@UCProperty@@@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
_index$77432 = -52					; size = 4
_prop$77431 = -44					; size = 24
_i$77427 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_parser$ = 8						; size = 4
_properties$ = 12					; size = 4
?SetMethodOptions@@YGXABVCParser@NCommandLineParser@@AAV?$CObjectVector@UCProperty@@@@@Z PROC ; SetMethodOptions
; Line 834
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetMethodOptions@@YGXABVCParser@NCommandLineParser@@AAV?$CObjectVector@UCProperty@@@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 835
	push	15					; 0000000fH
	mov	ecx, DWORD PTR _parser$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	movzx	eax, BYTE PTR [eax]
	test	eax, eax
	je	$LN6@SetMethodO
; Line 837
	mov	DWORD PTR _i$77427[ebp], 0
	jmp	SHORT $LN4@SetMethodO
$LN3@SetMethodO:
	mov	ecx, DWORD PTR _i$77427[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$77427[ebp], ecx
$LN4@SetMethodO:
	push	15					; 0000000fH
	mov	ecx, DWORD PTR _parser$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	add	eax, 8
	mov	ecx, eax
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	cmp	DWORD PTR _i$77427[ebp], eax
	jae	$LN6@SetMethodO
; Line 839
	lea	ecx, DWORD PTR _prop$77431[ebp]
	call	??0CProperty@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 840
	mov	edx, DWORD PTR _i$77427[ebp]
	push	edx
	push	15					; 0000000fH
	mov	ecx, DWORD PTR _parser$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	add	eax, 8
	mov	ecx, eax
	call	??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[]
	push	eax
	lea	ecx, DWORD PTR _prop$77431[ebp]
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
; Line 841
	push	61					; 0000003dH
	lea	ecx, DWORD PTR _prop$77431[ebp]
	call	?Find@UString@@QBEH_W@Z			; UString::Find
	mov	DWORD PTR _index$77432[ebp], eax
; Line 842
	cmp	DWORD PTR _index$77432[ebp], 0
	jl	SHORT $LN1@SetMethodO
; Line 844
	mov	eax, DWORD PTR _index$77432[ebp]
	add	eax, 1
	push	eax
	lea	ecx, DWORD PTR _prop$77431[ebp]
	call	?Ptr@UString@@QBEPB_WI@Z		; UString::Ptr
	push	eax
	lea	ecx, DWORD PTR _prop$77431[ebp+12]
	call	??4UString@@QAEAAV0@PB_W@Z		; UString::operator=
; Line 845
	mov	ecx, DWORD PTR _index$77432[ebp]
	push	ecx
	lea	ecx, DWORD PTR _prop$77431[ebp]
	call	?DeleteFrom@UString@@QAEXI@Z		; UString::DeleteFrom
$LN1@SetMethodO:
; Line 847
	lea	edx, DWORD PTR _prop$77431[ebp]
	push	edx
	mov	ecx, DWORD PTR _properties$[ebp]
	call	?Add@?$CObjectVector@UCProperty@@@@QAEIABUCProperty@@@Z ; CObjectVector<CProperty>::Add
; Line 848
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prop$77431[ebp]
	call	??1CProperty@@QAE@XZ
	jmp	$LN3@SetMethodO
$LN6@SetMethodO:
; Line 850
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@SetMethodO
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN12@SetMethodO:
	DD	1
	DD	$LN11@SetMethodO
$LN11@SetMethodO:
	DD	-44					; ffffffd4H
	DD	24					; 00000018H
	DD	$LN9@SetMethodO
$LN9@SetMethodO:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SetMethodOptions@@YGXABVCParser@NCommandLineParser@@AAV?$CObjectVector@UCProperty@@@@@Z$0:
	lea	ecx, DWORD PTR _prop$77431[ebp]
	jmp	??1CProperty@@QAE@XZ
__ehhandler$?SetMethodOptions@@YGXABVCParser@NCommandLineParser@@AAV?$CObjectVector@UCProperty@@@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-48]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetMethodOptions@@YGXABVCParser@NCommandLineParser@@AAV?$CObjectVector@UCProperty@@@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetMethodOptions@@YGXABVCParser@NCommandLineParser@@AAV?$CObjectVector@UCProperty@@@@@Z ENDP ; SetMethodOptions
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CProperty@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CProperty@@QAE@XZ$0
__ehfuncinfo$??0CProperty@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CProperty@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CProperty@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CProperty@@QAE@XZ PROC				; CProperty::CProperty, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CProperty@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CProperty@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$??0CProperty@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CProperty@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CProperty@@QAE@XZ ENDP				; CProperty::CProperty
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CProperty@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CProperty@@QAE@XZ$0
__ehfuncinfo$??1CProperty@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CProperty@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CProperty@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CProperty@@QAE@XZ PROC				; CProperty::~CProperty, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CProperty@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CProperty@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$??1CProperty@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CProperty@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CProperty@@QAE@XZ ENDP				; CProperty::~CProperty
PUBLIC	?Back@?$CObjectVector@VUString@@@@QBEABVUString@@XZ ; CObjectVector<UString>::Back
xdata$x	SEGMENT
__unwindtable$?FindCharset@@YGHABVCParser@NCommandLineParser@@I_NH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FindCharset@@YGHABVCParser@NCommandLineParser@@I_NH@Z$0
__ehfuncinfo$?FindCharset@@YGHABVCParser@NCommandLineParser@@I_NH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?FindCharset@@YGHABVCParser@NCommandLineParser@@I_NH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T79445 = -76						; size = 4
$T79444 = -72						; size = 12
$T79443 = -60						; size = 4
_pair$77520 = -56					; size = 4
_i$77512 = -52						; size = 4
_num$ = -48						; size = 4
_v$ = -40						; size = 4
_name$ = -28						; size = 12
__$EHRec$ = -12						; size = 12
_parser$ = 8						; size = 4
_keyIndex$ = 12						; size = 4
_byteOnlyCodePages$ = 16				; size = 1
_defaultVal$ = 20					; size = 4
?FindCharset@@YGHABVCParser@NCommandLineParser@@I_NH@Z PROC ; FindCharset
; Line 964
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?FindCharset@@YGHABVCParser@NCommandLineParser@@I_NH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 64					; 00000040H
	push	edi
	lea	edi, DWORD PTR [ebp-76]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 965
	mov	eax, DWORD PTR _keyIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _parser$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN8@FindCharse
; Line 966
	mov	eax, DWORD PTR _defaultVal$[ebp]
	jmp	$LN10@FindCharse
$LN8@FindCharse:
; Line 968
	mov	edx, DWORD PTR _keyIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _parser$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	add	eax, 8
	mov	ecx, eax
	call	?Back@?$CObjectVector@VUString@@@@QBEABVUString@@XZ ; CObjectVector<UString>::Back
	push	eax
	lea	ecx, DWORD PTR _name$[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 970
	lea	eax, DWORD PTR _v$[ebp]
	push	eax
	lea	ecx, DWORD PTR _name$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	?StringToUInt32@@YG_NPB_WAAI@Z		; StringToUInt32
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN7@FindCharse
; Line 971
	cmp	DWORD PTR _v$[ebp], 65536		; 00010000H
	jae	SHORT $LN7@FindCharse
; Line 972
	mov	edx, DWORD PTR _v$[ebp]
	mov	DWORD PTR $T79443[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _name$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T79443[ebp]
	jmp	$LN10@FindCharse
$LN7@FindCharse:
; Line 973
	lea	ecx, DWORD PTR _name$[ebp]
	call	?MakeLower_Ascii@UString@@QAEXXZ	; UString::MakeLower_Ascii
; Line 974
	movzx	eax, BYTE PTR _byteOnlyCodePages$[ebp]
	neg	eax
	sbb	eax, eax
	and	eax, -2					; fffffffeH
	add	eax, 5
	mov	DWORD PTR _num$[ebp], eax
; Line 975
	mov	DWORD PTR _i$77512[ebp], 0
	jmp	SHORT $LN5@FindCharse
$LN4@FindCharse:
	mov	ecx, DWORD PTR _i$77512[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$77512[ebp], ecx
$LN5@FindCharse:
; Line 977
	mov	edx, DWORD PTR _i$77512[ebp]
	cmp	edx, DWORD PTR _num$[ebp]
	jne	SHORT $LN2@FindCharse
; Line 978
	lea	ecx, DWORD PTR _name$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	push	OFFSET $SG77519
	lea	ecx, DWORD PTR $T79444[ebp]
	call	??0CArcCmdLineException@@QAE@PBDPB_W@Z	; CArcCmdLineException::CArcCmdLineException
	push	OFFSET __TI2?AUCArcCmdLineException@@
	lea	eax, DWORD PTR $T79444[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@FindCharse:
; Line 979
	mov	ecx, DWORD PTR _i$77512[ebp]
	lea	edx, DWORD PTR _g_CodePagePairs[ecx*8]
	mov	DWORD PTR _pair$77520[ebp], edx
; Line 980
	mov	eax, DWORD PTR _pair$77520[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR _name$[ebp]
	call	?IsEqualTo@UString@@QBE_NPBD@Z		; UString::IsEqualTo
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@FindCharse
; Line 981
	mov	eax, DWORD PTR _pair$77520[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T79445[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _name$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T79445[ebp]
	jmp	SHORT $LN10@FindCharse
$LN1@FindCharse:
; Line 982
	jmp	SHORT $LN4@FindCharse
; Line 983
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _name$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
$LN10@FindCharse:
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@FindCharse
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 76					; 0000004cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	3
$LN16@FindCharse:
	DD	2
	DD	$LN15@FindCharse
$LN15@FindCharse:
	DD	-28					; ffffffe4H
	DD	12					; 0000000cH
	DD	$LN12@FindCharse
	DD	-40					; ffffffd8H
	DD	4
	DD	$LN13@FindCharse
$LN13@FindCharse:
	DB	118					; 00000076H
	DB	0
$LN12@FindCharse:
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?FindCharset@@YGHABVCParser@NCommandLineParser@@I_NH@Z$0:
	lea	ecx, DWORD PTR _name$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$?FindCharset@@YGHABVCParser@NCommandLineParser@@I_NH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?FindCharset@@YGHABVCParser@NCommandLineParser@@I_NH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?FindCharset@@YGHABVCParser@NCommandLineParser@@I_NH@Z ENDP ; FindCharset
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_parser$ = 8						; size = 4
_switchID$ = 12						; size = 4
_bp$ = 16						; size = 4
?SetBoolPair@@YGXAAVCParser@NCommandLineParser@@IAAUCBoolPair@@@Z PROC ; SetBoolPair
; Line 1045
	push	ebp
	mov	ebp, esp
; Line 1046
	mov	eax, DWORD PTR _switchID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _parser$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	mov	ecx, DWORD PTR _bp$[ebp]
	mov	dl, BYTE PTR [eax]
	mov	BYTE PTR [ecx+1], dl
; Line 1047
	mov	eax, DWORD PTR _bp$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	test	ecx, ecx
	je	SHORT $LN2@SetBoolPai
; Line 1048
	mov	edx, DWORD PTR _switchID$[ebp]
	push	edx
	mov	ecx, DWORD PTR _parser$[ebp]
	call	??ACParser@NCommandLineParser@@QBEABUCSwitchResult@1@I@Z ; NCommandLineParser::CParser::operator[]
	movzx	eax, BYTE PTR [eax+1]
	neg	eax
	sbb	eax, eax
	add	eax, 1
	mov	ecx, DWORD PTR _bp$[ebp]
	mov	BYTE PTR [ecx], al
$LN2@SetBoolPai:
; Line 1049
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?SetBoolPair@@YGXAAVCParser@NCommandLineParser@@IAAUCBoolPair@@@Z ENDP ; SetBoolPair
_TEXT	ENDS
PUBLIC	?Size@?$CRecordVector@PAX@@QBEIXZ		; CRecordVector<void *>::Size
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Size@?$CObjectVector@VUString@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@VUString@@@@QBEIXZ PROC		; CObjectVector<UString>::Size, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@VUString@@@@QBEIXZ ENDP		; CObjectVector<UString>::Size
_TEXT	ENDS
PUBLIC	?ClearAndReserve@?$CRecordVector@PAX@@QAEXI@Z	; CRecordVector<void *>::ClearAndReserve
PUBLIC	?Clear@?$CObjectVector@VUString@@@@QAEXXZ	; CObjectVector<UString>::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ClearAndReserve@?$CObjectVector@VUString@@@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newCapacity$ = 8					; size = 4
?ClearAndReserve@?$CObjectVector@VUString@@@@QAEXI@Z PROC ; CObjectVector<UString>::ClearAndReserve, COMDAT
; _this$ = ecx
; Line 419
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CObjectVector@VUString@@@@QAEXXZ ; CObjectVector<UString>::Clear
	mov	eax, DWORD PTR _newCapacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearAndReserve@?$CRecordVector@PAX@@QAEXI@Z ; CRecordVector<void *>::ClearAndReserve
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearAndReserve@?$CObjectVector@VUString@@@@QAEXI@Z ENDP ; CObjectVector<UString>::ClearAndReserve
_TEXT	ENDS
PUBLIC	??0?$CRecordVector@PAX@@QAE@XZ			; CRecordVector<void *>::CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CObjectVector@VUString@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@VUString@@@@QAE@XZ PROC		; CObjectVector<UString>::CObjectVector<UString>, COMDAT
; _this$ = ecx
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@VUString@@@@QAE@XZ ENDP		; CObjectVector<UString>::CObjectVector<UString>
_TEXT	ENDS
PUBLIC	?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z	; CRecordVector<void *>::AddInReserved
PUBLIC	?Reserve@?$CRecordVector@PAX@@QAEXI@Z		; CRecordVector<void *>::Reserve
EXTRN	??2@YAPAXI@Z:PROC				; operator new
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z$0
__ehfuncinfo$??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
tv84 = -36						; size = 4
$T79465 = -32						; size = 4
$T79464 = -28						; size = 4
_i$77713 = -24						; size = 4
_size$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_v$ = 8							; size = 4
??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z PROC	; CObjectVector<UString>::operator=, COMDAT
; _this$ = ecx
; Line 430
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 431
	mov	eax, DWORD PTR _v$[ebp]
	cmp	eax, DWORD PTR _this$[ebp]
	jne	SHORT $LN4@operator@2
; Line 432
	mov	eax, DWORD PTR _this$[ebp]
	jmp	$LN5@operator@2
$LN4@operator@2:
; Line 433
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CObjectVector@VUString@@@@QAEXXZ ; CObjectVector<UString>::Clear
; Line 434
	mov	ecx, DWORD PTR _v$[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	mov	DWORD PTR _size$[ebp], eax
; Line 435
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reserve@?$CRecordVector@PAX@@QAEXI@Z	; CRecordVector<void *>::Reserve
; Line 436
	mov	DWORD PTR _i$77713[ebp], 0
	jmp	SHORT $LN3@operator@2
$LN2@operator@2:
	mov	edx, DWORD PTR _i$77713[ebp]
	add	edx, 1
	mov	DWORD PTR _i$77713[ebp], edx
$LN3@operator@2:
	mov	eax, DWORD PTR _i$77713[ebp]
	cmp	eax, DWORD PTR _size$[ebp]
	jae	SHORT $LN1@operator@2
; Line 437
	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T79465[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T79465[ebp], 0
	je	SHORT $LN7@operator@2
	mov	ecx, DWORD PTR _i$77713[ebp]
	push	ecx
	mov	ecx, DWORD PTR _v$[ebp]
	call	??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[]
	push	eax
	mov	ecx, DWORD PTR $T79465[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	DWORD PTR tv84[ebp], eax
	jmp	SHORT $LN8@operator@2
$LN7@operator@2:
	mov	DWORD PTR tv84[ebp], 0
$LN8@operator@2:
	mov	edx, DWORD PTR tv84[ebp]
	mov	DWORD PTR $T79464[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T79464[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ; CRecordVector<void *>::AddInReserved
	jmp	SHORT $LN2@operator@2
$LN1@operator@2:
; Line 438
	mov	eax, DWORD PTR _this$[ebp]
$LN5@operator@2:
; Line 439
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z$0:
	mov	eax, DWORD PTR $T79465[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z ENDP	; CObjectVector<UString>::operator=
PUBLIC	??A?$CRecordVector@PAX@@QBEABQAXI@Z		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z PROC	; CObjectVector<UString>::operator[], COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ENDP	; CObjectVector<UString>::operator[]
_TEXT	ENDS
PUBLIC	??A?$CRecordVector@PAX@@QAEAAPAXI@Z		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z PROC	; CObjectVector<UString>::operator[], COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ENDP	; CObjectVector<UString>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Front@?$CObjectVector@VUString@@@@QBEABVUString@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Front@?$CObjectVector@VUString@@@@QBEABVUString@@XZ PROC ; CObjectVector<UString>::Front, COMDAT
; _this$ = ecx
; Line 452
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Front@?$CObjectVector@VUString@@@@QBEABVUString@@XZ ENDP ; CObjectVector<UString>::Front
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Front@?$CObjectVector@VUString@@@@QAEAAVUString@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Front@?$CObjectVector@VUString@@@@QAEAAVUString@@XZ PROC ; CObjectVector<UString>::Front, COMDAT
; _this$ = ecx
; Line 453
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Front@?$CObjectVector@VUString@@@@QAEAAVUString@@XZ ENDP ; CObjectVector<UString>::Front
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Back@?$CObjectVector@VUString@@@@QBEABVUString@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Back@?$CObjectVector@VUString@@@@QBEABVUString@@XZ PROC ; CObjectVector<UString>::Back, COMDAT
; _this$ = ecx
; Line 454
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Back@?$CObjectVector@VUString@@@@QBEABVUString@@XZ ENDP ; CObjectVector<UString>::Back
_TEXT	ENDS
PUBLIC	?Add@?$CRecordVector@PAX@@QAEIQAX@Z		; CRecordVector<void *>::Add
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z$0
__ehfuncinfo$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
_TEXT	SEGMENT
tv74 = -28						; size = 4
$T79488 = -24						; size = 4
$T79487 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_item$ = 8						; size = 4
?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z PROC ; CObjectVector<UString>::Add, COMDAT
; _this$ = ecx
; Line 459
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T79488[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T79488[ebp], 0
	je	SHORT $LN3@Add
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T79488[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@Add
$LN3@Add:
	mov	DWORD PTR tv74[ebp], 0
$LN4@Add:
	mov	ecx, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T79487[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T79487[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z$0:
	mov	eax, DWORD PTR $T79488[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z ENDP ; CObjectVector<UString>::Add
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AddInReserved@?$CObjectVector@VUString@@@@QAEXABVUString@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddInReserved@?$CObjectVector@VUString@@@@QAEXABVUString@@@Z$0
__ehfuncinfo$?AddInReserved@?$CObjectVector@VUString@@@@QAEXABVUString@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddInReserved@?$CObjectVector@VUString@@@@QAEXABVUString@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?AddInReserved@?$CObjectVector@VUString@@@@QAEXABVUString@@@Z
_TEXT	SEGMENT
tv73 = -28						; size = 4
$T79501 = -24						; size = 4
$T79500 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_item$ = 8						; size = 4
?AddInReserved@?$CObjectVector@VUString@@@@QAEXABVUString@@@Z PROC ; CObjectVector<UString>::AddInReserved, COMDAT
; _this$ = ecx
; Line 461
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddInReserved@?$CObjectVector@VUString@@@@QAEXABVUString@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T79501[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T79501[ebp], 0
	je	SHORT $LN3@AddInReser
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T79501[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	DWORD PTR tv73[ebp], eax
	jmp	SHORT $LN4@AddInReser
$LN3@AddInReser:
	mov	DWORD PTR tv73[ebp], 0
$LN4@AddInReser:
	mov	ecx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T79500[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T79500[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ; CRecordVector<void *>::AddInReserved
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddInReserved@?$CObjectVector@VUString@@@@QAEXABVUString@@@Z$0:
	mov	eax, DWORD PTR $T79501[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?AddInReserved@?$CObjectVector@VUString@@@@QAEXABVUString@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddInReserved@?$CObjectVector@VUString@@@@QAEXABVUString@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddInReserved@?$CObjectVector@VUString@@@@QAEXABVUString@@@Z ENDP ; CObjectVector<UString>::AddInReserved
PUBLIC	??1?$CRecordVector@PAX@@QAE@XZ			; CRecordVector<void *>::~CRecordVector<void *>
PUBLIC	??_GUString@@QAEPAXI@Z				; UString::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@VUString@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@VUString@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@VUString@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@VUString@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@VUString@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T79514 = -28						; size = 4
$T79513 = -24						; size = 4
_i$77754 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@VUString@@@@QAE@XZ PROC		; CObjectVector<UString>::~CObjectVector<UString>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@VUString@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$77754[ebp], eax
$LN2@CObjectVec:
	cmp	DWORD PTR _i$77754[ebp], 0
	je	SHORT $LN3@CObjectVec
; Line 489
	mov	eax, DWORD PTR _i$77754[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$77754[ebp], eax
	mov	ecx, DWORD PTR _i$77754[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T79514[ebp], edx
	mov	eax, DWORD PTR $T79514[ebp]
	mov	DWORD PTR $T79513[ebp], eax
	cmp	DWORD PTR $T79513[ebp], 0
	je	SHORT $LN5@CObjectVec
	push	1
	mov	ecx, DWORD PTR $T79513[ebp]
	call	??_GUString@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec
$LN5@CObjectVec:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec:
	jmp	SHORT $LN2@CObjectVec
$LN3@CObjectVec:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@VUString@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@VUString@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@VUString@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@VUString@@@@QAE@XZ ENDP		; CObjectVector<UString>::~CObjectVector<UString>
PUBLIC	?Clear@?$CRecordVector@PAX@@QAEXXZ		; CRecordVector<void *>::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Clear@?$CObjectVector@VUString@@@@QAEXXZ
_TEXT	SEGMENT
tv75 = -20						; size = 4
$T79527 = -16						; size = 4
$T79526 = -12						; size = 4
_i$77763 = -8						; size = 4
_this$ = -4						; size = 4
?Clear@?$CObjectVector@VUString@@@@QAEXXZ PROC		; CObjectVector<UString>::Clear, COMDAT
; _this$ = ecx
; Line 499
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 500
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$77763[ebp], eax
$LN2@Clear:
	cmp	DWORD PTR _i$77763[ebp], 0
	je	SHORT $LN1@Clear
; Line 501
	mov	eax, DWORD PTR _i$77763[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$77763[ebp], eax
	mov	ecx, DWORD PTR _i$77763[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T79527[ebp], edx
	mov	eax, DWORD PTR $T79527[ebp]
	mov	DWORD PTR $T79526[ebp], eax
	cmp	DWORD PTR $T79526[ebp], 0
	je	SHORT $LN5@Clear
	push	1
	mov	ecx, DWORD PTR $T79526[ebp]
	call	??_GUString@@QAEPAXI@Z
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN6@Clear
$LN5@Clear:
	mov	DWORD PTR tv75[ebp], 0
$LN6@Clear:
	jmp	SHORT $LN2@Clear
$LN1@Clear:
; Line 502
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CRecordVector@PAX@@QAEXXZ	; CRecordVector<void *>::Clear
; Line 503
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CObjectVector@VUString@@@@QAEXXZ ENDP		; CObjectVector<UString>::Clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CObjectVector@VCCensorNode@NWildcard@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@VCCensorNode@NWildcard@@@@QBEIXZ PROC ; CObjectVector<NWildcard::CCensorNode>::Size, COMDAT
; _this$ = ecx
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@VCCensorNode@NWildcard@@@@QBEIXZ ENDP ; CObjectVector<NWildcard::CCensorNode>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@VCCensorNode@NWildcard@@@@QAEAAVCCensorNode@NWildcard@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@VCCensorNode@NWildcard@@@@QAEAAVCCensorNode@NWildcard@@I@Z PROC ; CObjectVector<NWildcard::CCensorNode>::operator[], COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@VCCensorNode@NWildcard@@@@QAEAAVCCensorNode@NWildcard@@I@Z ENDP ; CObjectVector<NWildcard::CCensorNode>::operator[]
_TEXT	ENDS
PUBLIC	?Delete@?$CRecordVector@PAX@@QAEXI@Z		; CRecordVector<void *>::Delete
PUBLIC	??_GCCensorNode@NWildcard@@QAEPAXI@Z		; NWildcard::CCensorNode::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Delete@?$CObjectVector@VCCensorNode@NWildcard@@@@QAEXI@Z
_TEXT	SEGMENT
tv71 = -16						; size = 4
$T79537 = -12						; size = 4
$T79536 = -8						; size = 4
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?Delete@?$CObjectVector@VCCensorNode@NWildcard@@@@QAEXI@Z PROC ; CObjectVector<NWildcard::CCensorNode>::Delete, COMDAT
; _this$ = ecx
; Line 527
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 528
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T79537[ebp], ecx
	mov	edx, DWORD PTR $T79537[ebp]
	mov	DWORD PTR $T79536[ebp], edx
	cmp	DWORD PTR $T79536[ebp], 0
	je	SHORT $LN3@Delete
	push	1
	mov	ecx, DWORD PTR $T79536[ebp]
	call	??_GCCensorNode@NWildcard@@QAEPAXI@Z
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN4@Delete
$LN3@Delete:
	mov	DWORD PTR tv71[ebp], 0
$LN4@Delete:
; Line 529
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Delete@?$CRecordVector@PAX@@QAEXI@Z	; CRecordVector<void *>::Delete
; Line 530
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Delete@?$CObjectVector@VCCensorNode@NWildcard@@@@QAEXI@Z ENDP ; CObjectVector<NWildcard::CCensorNode>::Delete
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CObjectVector@UCItem@NWildcard@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@UCItem@NWildcard@@@@QBEIXZ PROC	; CObjectVector<NWildcard::CItem>::Size, COMDAT
; _this$ = ecx
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@UCItem@NWildcard@@@@QBEIXZ ENDP	; CObjectVector<NWildcard::CItem>::Size
_TEXT	ENDS
PUBLIC	??0CItem@NWildcard@@QAE@ABU01@@Z		; NWildcard::CItem::CItem
PUBLIC	??A?$CObjectVector@UCItem@NWildcard@@@@QBEABUCItem@NWildcard@@I@Z ; CObjectVector<NWildcard::CItem>::operator[]
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??Y?$CObjectVector@UCItem@NWildcard@@@@QAEAAV0@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??Y?$CObjectVector@UCItem@NWildcard@@@@QAEAAV0@ABV0@@Z$0
__ehfuncinfo$??Y?$CObjectVector@UCItem@NWildcard@@@@QAEAAV0@ABV0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??Y?$CObjectVector@UCItem@NWildcard@@@@QAEAAV0@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??Y?$CObjectVector@UCItem@NWildcard@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
tv85 = -36						; size = 4
$T79545 = -32						; size = 4
$T79544 = -28						; size = 4
_i$77798 = -24						; size = 4
_size$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_v$ = 8							; size = 4
??Y?$CObjectVector@UCItem@NWildcard@@@@QAEAAV0@ABV0@@Z PROC ; CObjectVector<NWildcard::CItem>::operator+=, COMDAT
; _this$ = ecx
; Line 442
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??Y?$CObjectVector@UCItem@NWildcard@@@@QAEAAV0@ABV0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 443
	mov	ecx, DWORD PTR _v$[ebp]
	call	?Size@?$CObjectVector@UCItem@NWildcard@@@@QBEIXZ ; CObjectVector<NWildcard::CItem>::Size
	mov	DWORD PTR _size$[ebp], eax
; Line 444
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CObjectVector@UCItem@NWildcard@@@@QBEIXZ ; CObjectVector<NWildcard::CItem>::Size
	add	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reserve@?$CRecordVector@PAX@@QAEXI@Z	; CRecordVector<void *>::Reserve
; Line 445
	mov	DWORD PTR _i$77798[ebp], 0
	jmp	SHORT $LN3@operator@3
$LN2@operator@3:
	mov	eax, DWORD PTR _i$77798[ebp]
	add	eax, 1
	mov	DWORD PTR _i$77798[ebp], eax
$LN3@operator@3:
	mov	ecx, DWORD PTR _i$77798[ebp]
	cmp	ecx, DWORD PTR _size$[ebp]
	jae	SHORT $LN1@operator@3
; Line 446
	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T79545[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T79545[ebp], 0
	je	SHORT $LN6@operator@3
	mov	edx, DWORD PTR _i$77798[ebp]
	push	edx
	mov	ecx, DWORD PTR _v$[ebp]
	call	??A?$CObjectVector@UCItem@NWildcard@@@@QBEABUCItem@NWildcard@@I@Z ; CObjectVector<NWildcard::CItem>::operator[]
	push	eax
	mov	ecx, DWORD PTR $T79545[ebp]
	call	??0CItem@NWildcard@@QAE@ABU01@@Z
	mov	DWORD PTR tv85[ebp], eax
	jmp	SHORT $LN7@operator@3
$LN6@operator@3:
	mov	DWORD PTR tv85[ebp], 0
$LN7@operator@3:
	mov	eax, DWORD PTR tv85[ebp]
	mov	DWORD PTR $T79544[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T79544[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ; CRecordVector<void *>::AddInReserved
	jmp	SHORT $LN2@operator@3
$LN1@operator@3:
; Line 447
	mov	eax, DWORD PTR _this$[ebp]
; Line 448
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??Y?$CObjectVector@UCItem@NWildcard@@@@QAEAAV0@ABV0@@Z$0:
	mov	eax, DWORD PTR $T79545[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??Y?$CObjectVector@UCItem@NWildcard@@@@QAEAAV0@ABV0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??Y?$CObjectVector@UCItem@NWildcard@@@@QAEAAV0@ABV0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??Y?$CObjectVector@UCItem@NWildcard@@@@QAEAAV0@ABV0@@Z ENDP ; CObjectVector<NWildcard::CItem>::operator+=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??A?$CObjectVector@UCItem@NWildcard@@@@QAEAAUCItem@NWildcard@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCItem@NWildcard@@@@QAEAAUCItem@NWildcard@@I@Z PROC ; CObjectVector<NWildcard::CItem>::operator[], COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCItem@NWildcard@@@@QAEAAUCItem@NWildcard@@I@Z ENDP ; CObjectVector<NWildcard::CItem>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CObjectVector@UCPair@NWildcard@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@UCPair@NWildcard@@@@QBEIXZ PROC	; CObjectVector<NWildcard::CPair>::Size, COMDAT
; _this$ = ecx
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@UCPair@NWildcard@@@@QBEIXZ ENDP	; CObjectVector<NWildcard::CPair>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@UCPair@NWildcard@@@@QAEAAUCPair@NWildcard@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCPair@NWildcard@@@@QAEAAUCPair@NWildcard@@I@Z PROC ; CObjectVector<NWildcard::CPair>::operator[], COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCPair@NWildcard@@@@QAEAAUCPair@NWildcard@@I@Z ENDP ; CObjectVector<NWildcard::CPair>::operator[]
_TEXT	ENDS
PUBLIC	??A?$CObjectVector@UCPair@NWildcard@@@@QBEABUCPair@NWildcard@@I@Z ; CObjectVector<NWildcard::CPair>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Front@?$CObjectVector@UCPair@NWildcard@@@@QBEABUCPair@NWildcard@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Front@?$CObjectVector@UCPair@NWildcard@@@@QBEABUCPair@NWildcard@@XZ PROC ; CObjectVector<NWildcard::CPair>::Front, COMDAT
; _this$ = ecx
; Line 452
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CObjectVector@UCPair@NWildcard@@@@QBEABUCPair@NWildcard@@I@Z ; CObjectVector<NWildcard::CPair>::operator[]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Front@?$CObjectVector@UCPair@NWildcard@@@@QBEABUCPair@NWildcard@@XZ ENDP ; CObjectVector<NWildcard::CPair>::Front
_TEXT	ENDS
PUBLIC	??_G?$CBuffer@E@@QAEPAXI@Z			; CBuffer<unsigned char>::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T79566 = -28						; size = 4
$T79565 = -24						; size = 4
_i$77878 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ PROC		; CObjectVector<CBuffer<unsigned char> >::~CObjectVector<CBuffer<unsigned char> >, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$77878[ebp], eax
$LN2@CObjectVec@2:
	cmp	DWORD PTR _i$77878[ebp], 0
	je	SHORT $LN3@CObjectVec@2
; Line 489
	mov	eax, DWORD PTR _i$77878[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$77878[ebp], eax
	mov	ecx, DWORD PTR _i$77878[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T79566[ebp], edx
	mov	eax, DWORD PTR $T79566[ebp]
	mov	DWORD PTR $T79565[ebp], eax
	cmp	DWORD PTR $T79565[ebp], 0
	je	SHORT $LN5@CObjectVec@2
	push	1
	mov	ecx, DWORD PTR $T79565[ebp]
	call	??_G?$CBuffer@E@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@2
$LN5@CObjectVec@2:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@2:
	jmp	SHORT $LN2@CObjectVec@2
$LN3@CObjectVec@2:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ ENDP		; CObjectVector<CBuffer<unsigned char> >::~CObjectVector<CBuffer<unsigned char> >
PUBLIC	?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ	; CRecordVector<unsigned __int64>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@_K@@QAEI_K@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 8
?Add@?$CRecordVector@_K@@QAEI_K@Z PROC			; CRecordVector<unsigned __int64>::Add, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ ; CRecordVector<unsigned __int64>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*8], edx
	mov	edx, DWORD PTR _item$[ebp+4]
	mov	DWORD PTR [eax+ecx*8+4], edx
; Line 201
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv72[ebp]
; Line 202
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Add@?$CRecordVector@_K@@QAEI_K@Z ENDP			; CRecordVector<unsigned __int64>::Add
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@I@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@I@@QAE@XZ PROC			; CRecordVector<unsigned int>::CRecordVector<unsigned int>, COMDAT
; _this$ = ecx
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@I@@QAE@XZ ENDP			; CRecordVector<unsigned int>::CRecordVector<unsigned int>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@I@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@I@@QBEIXZ PROC			; CRecordVector<unsigned int>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@I@@QBEIXZ ENDP			; CRecordVector<unsigned int>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@I@@QAE@XZ
_TEXT	SEGMENT
$T79584 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@I@@QAE@XZ PROC			; CRecordVector<unsigned int>::~CRecordVector<unsigned int>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T79584[ebp], ecx
	mov	edx, DWORD PTR $T79584[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@I@@QAE@XZ ENDP			; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@I@@QAEAAII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@I@@QAEAAII@Z PROC			; CRecordVector<unsigned int>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@I@@QAEAAII@Z ENDP			; CRecordVector<unsigned int>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CBuffer@E@@QAE@XZ
_TEXT	SEGMENT
$T79589 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CBuffer@E@@QAE@XZ PROC				; CBuffer<unsigned char>::~CBuffer<unsigned char>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mybuffer.h
; Line 37
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T79589[ebp], ecx
	mov	edx, DWORD PTR $T79589[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CBuffer@E@@QAE@XZ ENDP				; CBuffer<unsigned char>::~CBuffer<unsigned char>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@H@@QAE@XZ
_TEXT	SEGMENT
$T79592 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@H@@QAE@XZ PROC			; CRecordVector<int>::~CRecordVector<int>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T79592[ebp], ecx
	mov	edx, DWORD PTR $T79592[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@H@@QAE@XZ ENDP			; CRecordVector<int>::~CRecordVector<int>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CObjectVector@UCDirItem@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@UCDirItem@@@@QBEIXZ PROC		; CObjectVector<CDirItem>::Size, COMDAT
; _this$ = ecx
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@UCDirItem@@@@QBEIXZ ENDP		; CObjectVector<CDirItem>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@UCDirItem@@@@QAEAAUCDirItem@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCDirItem@@@@QAEAAUCDirItem@@I@Z PROC ; CObjectVector<CDirItem>::operator[], COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCDirItem@@@@QAEAAUCDirItem@@I@Z ENDP ; CObjectVector<CDirItem>::operator[]
_TEXT	ENDS
PUBLIC	??_GCDirItem@@QAEPAXI@Z				; CDirItem::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@UCDirItem@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@UCDirItem@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@UCDirItem@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@UCDirItem@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@UCDirItem@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T79600 = -28						; size = 4
$T79599 = -24						; size = 4
_i$78031 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@UCDirItem@@@@QAE@XZ PROC		; CObjectVector<CDirItem>::~CObjectVector<CDirItem>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@UCDirItem@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$78031[ebp], eax
$LN2@CObjectVec@3:
	cmp	DWORD PTR _i$78031[ebp], 0
	je	SHORT $LN3@CObjectVec@3
; Line 489
	mov	eax, DWORD PTR _i$78031[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$78031[ebp], eax
	mov	ecx, DWORD PTR _i$78031[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T79600[ebp], edx
	mov	eax, DWORD PTR $T79600[ebp]
	mov	DWORD PTR $T79599[ebp], eax
	cmp	DWORD PTR $T79599[ebp], 0
	je	SHORT $LN5@CObjectVec@3
	push	1
	mov	ecx, DWORD PTR $T79599[ebp]
	call	??_GCDirItem@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@3
$LN5@CObjectVec@3:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@3:
	jmp	SHORT $LN2@CObjectVec@3
$LN3@CObjectVec@3:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@UCDirItem@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@UCDirItem@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@UCDirItem@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@UCDirItem@@@@QAE@XZ ENDP		; CObjectVector<CDirItem>::~CObjectVector<CDirItem>
PUBLIC	??0CProperty@@QAE@ABU0@@Z			; CProperty::CProperty
PUBLIC	??A?$CObjectVector@UCProperty@@@@QBEABUCProperty@@I@Z ; CObjectVector<CProperty>::operator[]
PUBLIC	?Size@?$CObjectVector@UCProperty@@@@QBEIXZ	; CObjectVector<CProperty>::Size
PUBLIC	?Clear@?$CObjectVector@UCProperty@@@@QAEXXZ	; CObjectVector<CProperty>::Clear
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??4?$CObjectVector@UCProperty@@@@QAEAAV0@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??4?$CObjectVector@UCProperty@@@@QAEAAV0@ABV0@@Z$0
__ehfuncinfo$??4?$CObjectVector@UCProperty@@@@QAEAAV0@ABV0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??4?$CObjectVector@UCProperty@@@@QAEAAV0@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??4?$CObjectVector@UCProperty@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
tv84 = -36						; size = 4
$T79613 = -32						; size = 4
$T79612 = -28						; size = 4
_i$78090 = -24						; size = 4
_size$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_v$ = 8							; size = 4
??4?$CObjectVector@UCProperty@@@@QAEAAV0@ABV0@@Z PROC	; CObjectVector<CProperty>::operator=, COMDAT
; _this$ = ecx
; Line 430
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??4?$CObjectVector@UCProperty@@@@QAEAAV0@ABV0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 431
	mov	eax, DWORD PTR _v$[ebp]
	cmp	eax, DWORD PTR _this$[ebp]
	jne	SHORT $LN4@operator@4
; Line 432
	mov	eax, DWORD PTR _this$[ebp]
	jmp	$LN5@operator@4
$LN4@operator@4:
; Line 433
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CObjectVector@UCProperty@@@@QAEXXZ ; CObjectVector<CProperty>::Clear
; Line 434
	mov	ecx, DWORD PTR _v$[ebp]
	call	?Size@?$CObjectVector@UCProperty@@@@QBEIXZ ; CObjectVector<CProperty>::Size
	mov	DWORD PTR _size$[ebp], eax
; Line 435
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reserve@?$CRecordVector@PAX@@QAEXI@Z	; CRecordVector<void *>::Reserve
; Line 436
	mov	DWORD PTR _i$78090[ebp], 0
	jmp	SHORT $LN3@operator@4
$LN2@operator@4:
	mov	edx, DWORD PTR _i$78090[ebp]
	add	edx, 1
	mov	DWORD PTR _i$78090[ebp], edx
$LN3@operator@4:
	mov	eax, DWORD PTR _i$78090[ebp]
	cmp	eax, DWORD PTR _size$[ebp]
	jae	SHORT $LN1@operator@4
; Line 437
	push	24					; 00000018H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T79613[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T79613[ebp], 0
	je	SHORT $LN7@operator@4
	mov	ecx, DWORD PTR _i$78090[ebp]
	push	ecx
	mov	ecx, DWORD PTR _v$[ebp]
	call	??A?$CObjectVector@UCProperty@@@@QBEABUCProperty@@I@Z ; CObjectVector<CProperty>::operator[]
	push	eax
	mov	ecx, DWORD PTR $T79613[ebp]
	call	??0CProperty@@QAE@ABU0@@Z
	mov	DWORD PTR tv84[ebp], eax
	jmp	SHORT $LN8@operator@4
$LN7@operator@4:
	mov	DWORD PTR tv84[ebp], 0
$LN8@operator@4:
	mov	edx, DWORD PTR tv84[ebp]
	mov	DWORD PTR $T79612[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T79612[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ; CRecordVector<void *>::AddInReserved
	jmp	SHORT $LN2@operator@4
$LN1@operator@4:
; Line 438
	mov	eax, DWORD PTR _this$[ebp]
$LN5@operator@4:
; Line 439
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??4?$CObjectVector@UCProperty@@@@QAEAAV0@ABV0@@Z$0:
	mov	eax, DWORD PTR $T79613[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??4?$CObjectVector@UCProperty@@@@QAEAAV0@ABV0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??4?$CObjectVector@UCProperty@@@@QAEAAV0@ABV0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??4?$CObjectVector@UCProperty@@@@QAEAAV0@ABV0@@Z ENDP	; CObjectVector<CProperty>::operator=
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Add@?$CObjectVector@UCProperty@@@@QAEIABUCProperty@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Add@?$CObjectVector@UCProperty@@@@QAEIABUCProperty@@@Z$0
__ehfuncinfo$?Add@?$CObjectVector@UCProperty@@@@QAEIABUCProperty@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Add@?$CObjectVector@UCProperty@@@@QAEIABUCProperty@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?Add@?$CObjectVector@UCProperty@@@@QAEIABUCProperty@@@Z
_TEXT	SEGMENT
tv74 = -28						; size = 4
$T79626 = -24						; size = 4
$T79625 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_item$ = 8						; size = 4
?Add@?$CObjectVector@UCProperty@@@@QAEIABUCProperty@@@Z PROC ; CObjectVector<CProperty>::Add, COMDAT
; _this$ = ecx
; Line 459
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Add@?$CObjectVector@UCProperty@@@@QAEIABUCProperty@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	24					; 00000018H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T79626[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T79626[ebp], 0
	je	SHORT $LN3@Add@2
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T79626[ebp]
	call	??0CProperty@@QAE@ABU0@@Z
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@Add@2
$LN3@Add@2:
	mov	DWORD PTR tv74[ebp], 0
$LN4@Add@2:
	mov	ecx, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T79625[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T79625[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Add@?$CObjectVector@UCProperty@@@@QAEIABUCProperty@@@Z$0:
	mov	eax, DWORD PTR $T79626[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Add@?$CObjectVector@UCProperty@@@@QAEIABUCProperty@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Add@?$CObjectVector@UCProperty@@@@QAEIABUCProperty@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Add@?$CObjectVector@UCProperty@@@@QAEIABUCProperty@@@Z ENDP ; CObjectVector<CProperty>::Add
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Size@?$CObjectVector@UCUpdateArchiveCommand@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@UCUpdateArchiveCommand@@@@QBEIXZ PROC ; CObjectVector<CUpdateArchiveCommand>::Size, COMDAT
; _this$ = ecx
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@UCUpdateArchiveCommand@@@@QBEIXZ ENDP ; CObjectVector<CUpdateArchiveCommand>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@UCUpdateArchiveCommand@@@@QAEAAUCUpdateArchiveCommand@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCUpdateArchiveCommand@@@@QAEAAUCUpdateArchiveCommand@@I@Z PROC ; CObjectVector<CUpdateArchiveCommand>::operator[], COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCUpdateArchiveCommand@@@@QAEAAUCUpdateArchiveCommand@@I@Z ENDP ; CObjectVector<CUpdateArchiveCommand>::operator[]
_TEXT	ENDS
PUBLIC	??0CUpdateArchiveCommand@@QAE@ABU0@@Z		; CUpdateArchiveCommand::CUpdateArchiveCommand
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Add@?$CObjectVector@UCUpdateArchiveCommand@@@@QAEIABUCUpdateArchiveCommand@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Add@?$CObjectVector@UCUpdateArchiveCommand@@@@QAEIABUCUpdateArchiveCommand@@@Z$0
__ehfuncinfo$?Add@?$CObjectVector@UCUpdateArchiveCommand@@@@QAEIABUCUpdateArchiveCommand@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Add@?$CObjectVector@UCUpdateArchiveCommand@@@@QAEIABUCUpdateArchiveCommand@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?Add@?$CObjectVector@UCUpdateArchiveCommand@@@@QAEIABUCUpdateArchiveCommand@@@Z
_TEXT	SEGMENT
tv74 = -28						; size = 4
$T79643 = -24						; size = 4
$T79642 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_item$ = 8						; size = 4
?Add@?$CObjectVector@UCUpdateArchiveCommand@@@@QAEIABUCUpdateArchiveCommand@@@Z PROC ; CObjectVector<CUpdateArchiveCommand>::Add, COMDAT
; _this$ = ecx
; Line 459
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Add@?$CObjectVector@UCUpdateArchiveCommand@@@@QAEIABUCUpdateArchiveCommand@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	128					; 00000080H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T79643[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T79643[ebp], 0
	je	SHORT $LN3@Add@3
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T79643[ebp]
	call	??0CUpdateArchiveCommand@@QAE@ABU0@@Z
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@Add@3
$LN3@Add@3:
	mov	DWORD PTR tv74[ebp], 0
$LN4@Add@3:
	mov	ecx, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T79642[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T79642[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Add@?$CObjectVector@UCUpdateArchiveCommand@@@@QAEIABUCUpdateArchiveCommand@@@Z$0:
	mov	eax, DWORD PTR $T79643[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Add@?$CObjectVector@UCUpdateArchiveCommand@@@@QAEIABUCUpdateArchiveCommand@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Add@?$CObjectVector@UCUpdateArchiveCommand@@@@QAEIABUCUpdateArchiveCommand@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Add@?$CObjectVector@UCUpdateArchiveCommand@@@@QAEIABUCUpdateArchiveCommand@@@Z ENDP ; CObjectVector<CUpdateArchiveCommand>::Add
PUBLIC	??_GCUpdateArchiveCommand@@QAEPAXI@Z		; CUpdateArchiveCommand::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Clear@?$CObjectVector@UCUpdateArchiveCommand@@@@QAEXXZ
_TEXT	SEGMENT
tv75 = -20						; size = 4
$T79656 = -16						; size = 4
$T79655 = -12						; size = 4
_i$78143 = -8						; size = 4
_this$ = -4						; size = 4
?Clear@?$CObjectVector@UCUpdateArchiveCommand@@@@QAEXXZ PROC ; CObjectVector<CUpdateArchiveCommand>::Clear, COMDAT
; _this$ = ecx
; Line 499
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 500
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$78143[ebp], eax
$LN2@Clear@2:
	cmp	DWORD PTR _i$78143[ebp], 0
	je	SHORT $LN1@Clear@2
; Line 501
	mov	eax, DWORD PTR _i$78143[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$78143[ebp], eax
	mov	ecx, DWORD PTR _i$78143[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T79656[ebp], edx
	mov	eax, DWORD PTR $T79656[ebp]
	mov	DWORD PTR $T79655[ebp], eax
	cmp	DWORD PTR $T79655[ebp], 0
	je	SHORT $LN5@Clear@2
	push	1
	mov	ecx, DWORD PTR $T79655[ebp]
	call	??_GCUpdateArchiveCommand@@QAEPAXI@Z
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN6@Clear@2
$LN5@Clear@2:
	mov	DWORD PTR tv75[ebp], 0
$LN6@Clear@2:
	jmp	SHORT $LN2@Clear@2
$LN1@Clear@2:
; Line 502
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CRecordVector@PAX@@QAEXXZ	; CRecordVector<void *>::Clear
; Line 503
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CObjectVector@UCUpdateArchiveCommand@@@@QAEXXZ ENDP ; CObjectVector<CUpdateArchiveCommand>::Clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Delete@?$CObjectVector@UCUpdateArchiveCommand@@@@QAEXI@Z
_TEXT	SEGMENT
tv71 = -16						; size = 4
$T79662 = -12						; size = 4
$T79661 = -8						; size = 4
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?Delete@?$CObjectVector@UCUpdateArchiveCommand@@@@QAEXI@Z PROC ; CObjectVector<CUpdateArchiveCommand>::Delete, COMDAT
; _this$ = ecx
; Line 527
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 528
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T79662[ebp], ecx
	mov	edx, DWORD PTR $T79662[ebp]
	mov	DWORD PTR $T79661[ebp], edx
	cmp	DWORD PTR $T79661[ebp], 0
	je	SHORT $LN3@Delete@2
	push	1
	mov	ecx, DWORD PTR $T79661[ebp]
	call	??_GCUpdateArchiveCommand@@QAEPAXI@Z
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN4@Delete@2
$LN3@Delete@2:
	mov	DWORD PTR tv71[ebp], 0
$LN4@Delete@2:
; Line 529
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Delete@?$CRecordVector@PAX@@QAEXI@Z	; CRecordVector<void *>::Delete
; Line 530
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Delete@?$CObjectVector@UCUpdateArchiveCommand@@@@QAEXI@Z ENDP ; CObjectVector<CUpdateArchiveCommand>::Delete
_TEXT	ENDS
PUBLIC	??0CRenamePair@@QAE@XZ				; CRenamePair::CRenamePair
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AddNew@?$CObjectVector@UCRenamePair@@@@QAEAAUCRenamePair@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddNew@?$CObjectVector@UCRenamePair@@@@QAEAAUCRenamePair@@XZ$0
__ehfuncinfo$?AddNew@?$CObjectVector@UCRenamePair@@@@QAEAAUCRenamePair@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddNew@?$CObjectVector@UCRenamePair@@@@QAEAAUCRenamePair@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?AddNew@?$CObjectVector@UCRenamePair@@@@QAEAAUCRenamePair@@XZ
_TEXT	SEGMENT
tv71 = -32						; size = 4
$T79668 = -28						; size = 4
$T79667 = -24						; size = 4
_p$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?AddNew@?$CObjectVector@UCRenamePair@@@@QAEAAUCRenamePair@@XZ PROC ; CObjectVector<CRenamePair>::AddNew, COMDAT
; _this$ = ecx
; Line 464
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddNew@?$CObjectVector@UCRenamePair@@@@QAEAAUCRenamePair@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 465
	push	32					; 00000020H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T79668[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T79668[ebp], 0
	je	SHORT $LN3@AddNew
	mov	ecx, DWORD PTR $T79668[ebp]
	call	??0CRenamePair@@QAE@XZ			; CRenamePair::CRenamePair
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN4@AddNew
$LN3@AddNew:
	mov	DWORD PTR tv71[ebp], 0
$LN4@AddNew:
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR $T79667[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T79667[ebp]
	mov	DWORD PTR _p$[ebp], ecx
; Line 466
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
; Line 467
	mov	eax, DWORD PTR _p$[ebp]
; Line 468
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddNew@?$CObjectVector@UCRenamePair@@@@QAEAAUCRenamePair@@XZ$0:
	mov	eax, DWORD PTR $T79668[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?AddNew@?$CObjectVector@UCRenamePair@@@@QAEAAUCRenamePair@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddNew@?$CObjectVector@UCRenamePair@@@@QAEAAUCRenamePair@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddNew@?$CObjectVector@UCRenamePair@@@@QAEAAUCRenamePair@@XZ ENDP ; CObjectVector<CRenamePair>::AddNew
;	COMDAT xdata$x
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\update.h
xdata$x	SEGMENT
__unwindtable$??0CRenamePair@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CRenamePair@@QAE@XZ$0
__ehfuncinfo$??0CRenamePair@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CRenamePair@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CRenamePair@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CRenamePair@@QAE@XZ PROC				; CRenamePair::CRenamePair, COMDAT
; _this$ = ecx
; Line 76
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CRenamePair@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0UString@@QAE@XZ			; UString::UString
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+24], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+28], 2
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CRenamePair@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$??0CRenamePair@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CRenamePair@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CRenamePair@@QAE@XZ ENDP				; CRenamePair::CRenamePair
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GUString@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GUString@@QAEPAXI@Z PROC				; UString::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GUString@@QAEPAXI@Z ENDP				; UString::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1CCensorNode@NWildcard@@QAE@XZ		; NWildcard::CCensorNode::~CCensorNode
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCCensorNode@NWildcard@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCCensorNode@NWildcard@@QAEPAXI@Z PROC		; NWildcard::CCensorNode::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CCensorNode@NWildcard@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCCensorNode@NWildcard@@QAEPAXI@Z ENDP		; NWildcard::CCensorNode::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ ; CObjectVector<NWildcard::CCensorNode>::~CObjectVector<NWildcard::CCensorNode>
PUBLIC	??1?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ	; CObjectVector<NWildcard::CItem>::~CObjectVector<NWildcard::CItem>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CCensorNode@NWildcard@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CCensorNode@NWildcard@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CCensorNode@NWildcard@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CCensorNode@NWildcard@@QAE@XZ$2
__ehfuncinfo$??1CCensorNode@NWildcard@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1CCensorNode@NWildcard@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CCensorNode@NWildcard@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CCensorNode@NWildcard@@QAE@XZ PROC			; NWildcard::CCensorNode::~CCensorNode, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CCensorNode@NWildcard@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??1?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ ; CObjectVector<NWildcard::CItem>::~CObjectVector<NWildcard::CItem>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??1?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ ; CObjectVector<NWildcard::CItem>::~CObjectVector<NWildcard::CItem>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??1?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ ; CObjectVector<NWildcard::CCensorNode>::~CObjectVector<NWildcard::CCensorNode>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CCensorNode@NWildcard@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??1CCensorNode@NWildcard@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	jmp	??1?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ ; CObjectVector<NWildcard::CCensorNode>::~CObjectVector<NWildcard::CCensorNode>
__unwindfunclet$??1CCensorNode@NWildcard@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	jmp	??1?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ ; CObjectVector<NWildcard::CItem>::~CObjectVector<NWildcard::CItem>
__ehhandler$??1CCensorNode@NWildcard@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CCensorNode@NWildcard@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CCensorNode@NWildcard@@QAE@XZ ENDP			; NWildcard::CCensorNode::~CCensorNode
;	COMDAT xdata$x
; File c:\workspace\7z1505-src\cpp\common\myvector.h
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T79707 = -28						; size = 4
$T79706 = -24						; size = 4
_i$77779 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ PROC ; CObjectVector<NWildcard::CCensorNode>::~CObjectVector<NWildcard::CCensorNode>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$77779[ebp], eax
$LN2@CObjectVec@4:
	cmp	DWORD PTR _i$77779[ebp], 0
	je	SHORT $LN3@CObjectVec@4
; Line 489
	mov	eax, DWORD PTR _i$77779[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$77779[ebp], eax
	mov	ecx, DWORD PTR _i$77779[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T79707[ebp], edx
	mov	eax, DWORD PTR $T79707[ebp]
	mov	DWORD PTR $T79706[ebp], eax
	cmp	DWORD PTR $T79706[ebp], 0
	je	SHORT $LN5@CObjectVec@4
	push	1
	mov	ecx, DWORD PTR $T79706[ebp]
	call	??_GCCensorNode@NWildcard@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@4
$LN5@CObjectVec@4:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@4:
	jmp	SHORT $LN2@CObjectVec@4
$LN3@CObjectVec@4:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ ENDP ; CObjectVector<NWildcard::CCensorNode>::~CObjectVector<NWildcard::CCensorNode>
PUBLIC	??_GCItem@NWildcard@@QAEPAXI@Z			; NWildcard::CItem::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T79720 = -28						; size = 4
$T79719 = -24						; size = 4
_i$77811 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ PROC	; CObjectVector<NWildcard::CItem>::~CObjectVector<NWildcard::CItem>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$77811[ebp], eax
$LN2@CObjectVec@5:
	cmp	DWORD PTR _i$77811[ebp], 0
	je	SHORT $LN3@CObjectVec@5
; Line 489
	mov	eax, DWORD PTR _i$77811[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$77811[ebp], eax
	mov	ecx, DWORD PTR _i$77811[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T79720[ebp], edx
	mov	eax, DWORD PTR $T79720[ebp]
	mov	DWORD PTR $T79719[ebp], eax
	cmp	DWORD PTR $T79719[ebp], 0
	je	SHORT $LN5@CObjectVec@5
	push	1
	mov	ecx, DWORD PTR $T79719[ebp]
	call	??_GCItem@NWildcard@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@5
$LN5@CObjectVec@5:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@5:
	jmp	SHORT $LN2@CObjectVec@5
$LN3@CObjectVec@5:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ ENDP	; CObjectVector<NWildcard::CItem>::~CObjectVector<NWildcard::CItem>
PUBLIC	??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z	; CObjectVector<UString>::CObjectVector<UString>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CItem@NWildcard@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CItem@NWildcard@@QAE@ABU01@@Z PROC			; NWildcard::CItem::CItem, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z ; CObjectVector<UString>::CObjectVector<UString>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx+12]
	mov	BYTE PTR [ecx+12], al
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx+13]
	mov	BYTE PTR [ecx+13], al
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx+14]
	mov	BYTE PTR [ecx+14], al
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx+15]
	mov	BYTE PTR [ecx+15], al
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CItem@NWildcard@@QAE@ABU01@@Z ENDP			; NWildcard::CItem::CItem
_TEXT	ENDS
PUBLIC	??1CItem@NWildcard@@QAE@XZ			; NWildcard::CItem::~CItem
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCItem@NWildcard@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCItem@NWildcard@@QAEPAXI@Z PROC			; NWildcard::CItem::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CItem@NWildcard@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@3
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCItem@NWildcard@@QAEPAXI@Z ENDP			; NWildcard::CItem::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??_G?$CBuffer@E@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$CBuffer@E@@QAEPAXI@Z PROC				; CBuffer<unsigned char>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@4:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$CBuffer@E@@QAEPAXI@Z ENDP				; CBuffer<unsigned char>::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1CDirItem@@QAE@XZ				; CDirItem::~CDirItem
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCDirItem@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCDirItem@@QAEPAXI@Z PROC				; CDirItem::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CDirItem@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@5
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@5:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCDirItem@@QAEPAXI@Z ENDP				; CDirItem::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CProperty@@QAE@ABU0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CProperty@@QAE@ABU0@@Z$0
__ehfuncinfo$??0CProperty@@QAE@ABU0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CProperty@@QAE@ABU0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CProperty@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0CProperty@@QAE@ABU0@@Z PROC				; CProperty::CProperty, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CProperty@@QAE@ABU0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CProperty@@QAE@ABU0@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$??0CProperty@@QAE@ABU0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CProperty@@QAE@ABU0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CProperty@@QAE@ABU0@@Z ENDP				; CProperty::CProperty
PUBLIC	??0CArchivePath@@QAE@ABU0@@Z			; CArchivePath::CArchivePath
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CUpdateArchiveCommand@@QAE@ABU0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CUpdateArchiveCommand@@QAE@ABU0@@Z$0
__ehfuncinfo$??0CUpdateArchiveCommand@@QAE@ABU0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CUpdateArchiveCommand@@QAE@ABU0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CUpdateArchiveCommand@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0CUpdateArchiveCommand@@QAE@ABU0@@Z PROC		; CUpdateArchiveCommand::CUpdateArchiveCommand, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CUpdateArchiveCommand@@QAE@ABU0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0CArchivePath@@QAE@ABU0@@Z
	mov	esi, DWORD PTR ___that$[ebp]
	add	esi, 100				; 00000064H
	mov	edi, DWORD PTR _this$[ebp]
	add	edi, 100				; 00000064H
	mov	ecx, 7
	rep movsd
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CUpdateArchiveCommand@@QAE@ABU0@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$??0CUpdateArchiveCommand@@QAE@ABU0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CUpdateArchiveCommand@@QAE@ABU0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CUpdateArchiveCommand@@QAE@ABU0@@Z ENDP		; CUpdateArchiveCommand::CUpdateArchiveCommand
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCUpdateArchiveCommand@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCUpdateArchiveCommand@@QAEPAXI@Z PROC		; CUpdateArchiveCommand::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CUpdateArchiveCommand@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@6
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@6:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCUpdateArchiveCommand@@QAEPAXI@Z ENDP		; CUpdateArchiveCommand::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CItem@NWildcard@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CItem@NWildcard@@QAE@XZ PROC				; NWildcard::CItem::~CItem, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CItem@NWildcard@@QAE@XZ ENDP				; NWildcard::CItem::~CItem
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CDirItem@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CDirItem@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CDirItem@@QAE@XZ$1
__ehfuncinfo$??1CDirItem@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CDirItem@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CDirItem@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CDirItem@@QAE@XZ PROC				; CDirItem::~CDirItem, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CDirItem@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CDirItem@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??1CDirItem@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	jmp	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
__ehhandler$??1CDirItem@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CDirItem@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CDirItem@@QAE@XZ ENDP				; CDirItem::~CDirItem
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0CArchivePath@@QAE@ABU0@@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??0CArchivePath@@QAE@ABU0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0CArchivePath@@QAE@ABU0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CArchivePath@@QAE@ABU0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CArchivePath@@QAE@ABU0@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CArchivePath@@QAE@ABU0@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CArchivePath@@QAE@ABU0@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0CArchivePath@@QAE@ABU0@@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0CArchivePath@@QAE@ABU0@@Z$5
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CArchivePath@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0CArchivePath@@QAE@ABU0@@Z PROC			; CArchivePath::CArchivePath, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CArchivePath@@QAE@ABU0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 24					; 00000018H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 36					; 00000024H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 48					; 00000030H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cl, BYTE PTR [eax+60]
	mov	BYTE PTR [edx+60], cl
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 64					; 00000040H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 76					; 0000004cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CArchivePath@@QAE@ABU0@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??0CArchivePath@@QAE@ABU0@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??0CArchivePath@@QAE@ABU0@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??0CArchivePath@@QAE@ABU0@@Z$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??0CArchivePath@@QAE@ABU0@@Z$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??0CArchivePath@@QAE@ABU0@@Z$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$??0CArchivePath@@QAE@ABU0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CArchivePath@@QAE@ABU0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CArchivePath@@QAE@ABU0@@Z ENDP			; CArchivePath::CArchivePath
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CRecordVector@PAX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@PAX@@QAE@XZ PROC			; CRecordVector<void *>::CRecordVector<void *>, COMDAT
; _this$ = ecx
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@PAX@@QAE@XZ ENDP			; CRecordVector<void *>::CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@PAX@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@PAX@@QBEIXZ PROC			; CRecordVector<void *>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@PAX@@QBEIXZ ENDP			; CRecordVector<void *>::Size
_TEXT	ENDS
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Reserve@?$CRecordVector@PAX@@QAEXI@Z
_TEXT	SEGMENT
$T79797 = -16						; size = 4
$T79796 = -12						; size = 4
_p$78274 = -8						; size = 4
_this$ = -4						; size = 4
_newCapacity$ = 8					; size = 4
?Reserve@?$CRecordVector@PAX@@QAEXI@Z PROC		; CRecordVector<void *>::Reserve, COMDAT
; _this$ = ecx
; Line 61
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 62
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	SHORT $LN3@Reserve
; Line 64
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T79796[ebp], eax
	mov	eax, DWORD PTR $T79796[ebp]
	mov	DWORD PTR _p$78274[ebp], eax
; Line 65
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@Reserve
; Line 66
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$78274[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@Reserve:
; Line 67
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T79797[ebp], edx
	mov	eax, DWORD PTR $T79797[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 68
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$78274[ebp]
	mov	DWORD PTR [ecx], edx
; Line 69
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@Reserve:
; Line 71
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Reserve@?$CRecordVector@PAX@@QAEXI@Z ENDP		; CRecordVector<void *>::Reserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ClearAndReserve@?$CRecordVector@PAX@@QAEXI@Z
_TEXT	SEGMENT
$T79801 = -12						; size = 4
$T79800 = -8						; size = 4
_this$ = -4						; size = 4
_newCapacity$ = 8					; size = 4
?ClearAndReserve@?$CRecordVector@PAX@@QAEXI@Z PROC	; CRecordVector<void *>::ClearAndReserve, COMDAT
; _this$ = ecx
; Line 74
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 75
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CRecordVector@PAX@@QAEXXZ	; CRecordVector<void *>::Clear
; Line 76
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	SHORT $LN2@ClearAndRe
; Line 78
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T79800[ebp], eax
	mov	ecx, DWORD PTR $T79800[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 79
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0
; Line 80
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 81
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T79801[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T79801[ebp]
	mov	DWORD PTR [eax], ecx
; Line 82
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _newCapacity$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@ClearAndRe:
; Line 84
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearAndReserve@?$CRecordVector@PAX@@QAEXI@Z ENDP	; CRecordVector<void *>::ClearAndReserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@PAX@@QAE@XZ
_TEXT	SEGMENT
$T79804 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@PAX@@QAE@XZ PROC			; CRecordVector<void *>::~CRecordVector<void *>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T79804[ebp], ecx
	mov	edx, DWORD PTR $T79804[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@PAX@@QAE@XZ ENDP			; CRecordVector<void *>::~CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Clear@?$CRecordVector@PAX@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$CRecordVector@PAX@@QAEXXZ PROC			; CRecordVector<void *>::Clear, COMDAT
; _this$ = ecx
; Line 131
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CRecordVector@PAX@@QAEXXZ ENDP			; CRecordVector<void *>::Clear
_TEXT	ENDS
PUBLIC	?MoveItems@?$CRecordVector@PAX@@AAEXII@Z	; CRecordVector<void *>::MoveItems
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Delete@?$CRecordVector@PAX@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?Delete@?$CRecordVector@PAX@@QAEXI@Z PROC		; CRecordVector<void *>::Delete, COMDAT
; _this$ = ecx
; Line 151
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 152
	mov	eax, DWORD PTR _index$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MoveItems@?$CRecordVector@PAX@@AAEXII@Z ; CRecordVector<void *>::MoveItems
; Line 153
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	sub	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 154
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Delete@?$CRecordVector@PAX@@QAEXI@Z ENDP		; CRecordVector<void *>::Delete
_TEXT	ENDS
PUBLIC	?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ	; CRecordVector<void *>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@PAX@@QAEIQAX@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?Add@?$CRecordVector@PAX@@QAEIQAX@Z PROC		; CRecordVector<void *>::Add, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ; CRecordVector<void *>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 201
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv72[ebp]
; Line 202
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CRecordVector@PAX@@QAEIQAX@Z ENDP		; CRecordVector<void *>::Add
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z PROC	; CRecordVector<void *>::AddInReserved, COMDAT
; _this$ = ecx
; Line 205
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 206
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 207
	mov	esp, ebp
	pop	ebp
	ret	4
?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ENDP	; CRecordVector<void *>::AddInReserved
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@PAX@@QBEABQAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@PAX@@QBEABQAXI@Z PROC		; CRecordVector<void *>::operator[], COMDAT
; _this$ = ecx
; Line 227
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@PAX@@QBEABQAXI@Z ENDP		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@PAX@@QAEAAPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@PAX@@QAEAAPAXI@Z PROC		; CRecordVector<void *>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@PAX@@QAEAAPAXI@Z ENDP		; CRecordVector<void *>::operator[]
_TEXT	ENDS
PUBLIC	?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z	; CRecordVector<void *>::ConstructReserve
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z$1
__ehfuncinfo$??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
tv85 = -36						; size = 4
$T79820 = -32						; size = 4
$T79819 = -28						; size = 4
_i$78305 = -24						; size = 4
_size$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_v$ = 8							; size = 4
??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z PROC		; CObjectVector<UString>::CObjectVector<UString>, COMDAT
; _this$ = ecx
; Line 422
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 424
	mov	ecx, DWORD PTR _v$[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	mov	DWORD PTR _size$[ebp], eax
; Line 425
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z ; CRecordVector<void *>::ConstructReserve
; Line 426
	mov	DWORD PTR _i$78305[ebp], 0
	jmp	SHORT $LN3@CObjectVec@6
$LN2@CObjectVec@6:
	mov	ecx, DWORD PTR _i$78305[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$78305[ebp], ecx
$LN3@CObjectVec@6:
	mov	edx, DWORD PTR _i$78305[ebp]
	cmp	edx, DWORD PTR _size$[ebp]
	jae	SHORT $LN4@CObjectVec@6
; Line 427
	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T79820[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T79820[ebp], 0
	je	SHORT $LN6@CObjectVec@6
	mov	eax, DWORD PTR _i$78305[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	call	??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[]
	push	eax
	mov	ecx, DWORD PTR $T79820[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	DWORD PTR tv85[ebp], eax
	jmp	SHORT $LN7@CObjectVec@6
$LN6@CObjectVec@6:
	mov	DWORD PTR tv85[ebp], 0
$LN7@CObjectVec@6:
	mov	ecx, DWORD PTR tv85[ebp]
	mov	DWORD PTR $T79819[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T79819[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ; CRecordVector<void *>::AddInReserved
	jmp	SHORT $LN2@CObjectVec@6
$LN4@CObjectVec@6:
; Line 428
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__unwindfunclet$??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z$1:
	mov	eax, DWORD PTR $T79820[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z ENDP		; CObjectVector<UString>::CObjectVector<UString>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??A?$CObjectVector@UCItem@NWildcard@@@@QBEABUCItem@NWildcard@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCItem@NWildcard@@@@QBEABUCItem@NWildcard@@I@Z PROC ; CObjectVector<NWildcard::CItem>::operator[], COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCItem@NWildcard@@@@QBEABUCItem@NWildcard@@I@Z ENDP ; CObjectVector<NWildcard::CItem>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@UCPair@NWildcard@@@@QBEABUCPair@NWildcard@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCPair@NWildcard@@@@QBEABUCPair@NWildcard@@I@Z PROC ; CObjectVector<NWildcard::CPair>::operator[], COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCPair@NWildcard@@@@QBEABUCPair@NWildcard@@I@Z ENDP ; CObjectVector<NWildcard::CPair>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ
_TEXT	SEGMENT
$T79838 = -20						; size = 4
$T79837 = -16						; size = 4
_p$78323 = -12						; size = 4
_newCapacity$78322 = -8					; size = 4
_this$ = -4						; size = 4
?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ PROC	; CRecordVector<unsigned __int64>::ReserveOnePosition, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@ReserveOne
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$78322[ebp], ecx
; Line 23
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$78322[ebp]
	mov	edx, 8
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T79837[ebp], eax
	mov	eax, DWORD PTR $T79837[ebp]
	mov	DWORD PTR _p$78323[ebp], eax
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@ReserveOne
; Line 25
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$78323[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne:
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T79838[ebp], edx
	mov	eax, DWORD PTR $T79838[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$78323[ebp]
	mov	DWORD PTR [ecx], edx
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$78322[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ReserveOne:
; Line 30
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ ENDP	; CRecordVector<unsigned __int64>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CObjectVector@UCProperty@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@UCProperty@@@@QBEIXZ PROC		; CObjectVector<CProperty>::Size, COMDAT
; _this$ = ecx
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@UCProperty@@@@QBEIXZ ENDP		; CObjectVector<CProperty>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@UCProperty@@@@QBEABUCProperty@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCProperty@@@@QBEABUCProperty@@I@Z PROC ; CObjectVector<CProperty>::operator[], COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCProperty@@@@QBEABUCProperty@@I@Z ENDP ; CObjectVector<CProperty>::operator[]
_TEXT	ENDS
PUBLIC	??_GCProperty@@QAEPAXI@Z			; CProperty::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Clear@?$CObjectVector@UCProperty@@@@QAEXXZ
_TEXT	SEGMENT
tv75 = -20						; size = 4
$T79846 = -16						; size = 4
$T79845 = -12						; size = 4
_i$78340 = -8						; size = 4
_this$ = -4						; size = 4
?Clear@?$CObjectVector@UCProperty@@@@QAEXXZ PROC	; CObjectVector<CProperty>::Clear, COMDAT
; _this$ = ecx
; Line 499
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 500
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$78340[ebp], eax
$LN2@Clear@3:
	cmp	DWORD PTR _i$78340[ebp], 0
	je	SHORT $LN1@Clear@3
; Line 501
	mov	eax, DWORD PTR _i$78340[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$78340[ebp], eax
	mov	ecx, DWORD PTR _i$78340[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T79846[ebp], edx
	mov	eax, DWORD PTR $T79846[ebp]
	mov	DWORD PTR $T79845[ebp], eax
	cmp	DWORD PTR $T79845[ebp], 0
	je	SHORT $LN5@Clear@3
	push	1
	mov	ecx, DWORD PTR $T79845[ebp]
	call	??_GCProperty@@QAEPAXI@Z
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN6@Clear@3
$LN5@Clear@3:
	mov	DWORD PTR tv75[ebp], 0
$LN6@Clear@3:
	jmp	SHORT $LN2@Clear@3
$LN1@Clear@3:
; Line 502
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CRecordVector@PAX@@QAEXXZ	; CRecordVector<void *>::Clear
; Line 503
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CObjectVector@UCProperty@@@@QAEXXZ ENDP	; CObjectVector<CProperty>::Clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??_GCProperty@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCProperty@@QAEPAXI@Z PROC				; CProperty::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CProperty@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@7
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@7:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCProperty@@QAEPAXI@Z ENDP				; CProperty::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	__imp__memmove:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?MoveItems@?$CRecordVector@PAX@@AAEXII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_destIndex$ = 8						; size = 4
_srcIndex$ = 12						; size = 4
?MoveItems@?$CRecordVector@PAX@@AAEXII@Z PROC		; CRecordVector<void *>::MoveItems, COMDAT
; _this$ = ecx
; Line 14
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 15
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR _srcIndex$[ebp]
	shl	ecx, 2
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _srcIndex$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _destIndex$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 16
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?MoveItems@?$CRecordVector@PAX@@AAEXII@Z ENDP		; CRecordVector<void *>::MoveItems
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ
_TEXT	SEGMENT
$T79856 = -20						; size = 4
$T79855 = -16						; size = 4
_p$78355 = -12						; size = 4
_newCapacity$78354 = -8					; size = 4
_this$ = -4						; size = 4
?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ PROC	; CRecordVector<void *>::ReserveOnePosition, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@ReserveOne@2
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$78354[ebp], ecx
; Line 23
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$78354[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T79855[ebp], eax
	mov	eax, DWORD PTR $T79855[ebp]
	mov	DWORD PTR _p$78355[ebp], eax
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@ReserveOne@2
; Line 25
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$78355[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne@2:
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T79856[ebp], edx
	mov	eax, DWORD PTR $T79856[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$78355[ebp]
	mov	DWORD PTR [ecx], edx
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$78354[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ReserveOne@2:
; Line 30
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ENDP	; CRecordVector<void *>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z
_TEXT	SEGMENT
$T79859 = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z PROC	; CRecordVector<void *>::ConstructReserve, COMDAT
; _this$ = ecx
; Line 52
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 53
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN2@ConstructR
; Line 55
	xor	ecx, ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T79859[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T79859[ebp]
	mov	DWORD PTR [eax], ecx
; Line 56
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@ConstructR:
; Line 58
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z ENDP	; CRecordVector<void *>::ConstructReserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??__EkSwitchForms@@YAXXZ
text$yc	SEGMENT
??__EkSwitchForms@@YAXXZ PROC				; `dynamic initializer for 'kSwitchForms'', COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\archivecommandline.cpp
; Line 204
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _k_Stream_PostCharSet
	mov	DWORD PTR _kSwitchForms+92, eax
; Line 205
	mov	DWORD PTR _kSwitchForms+96, OFFSET $SG76900
	mov	BYTE PTR _kSwitchForms+100, 3
	mov	BYTE PTR _kSwitchForms+101, 0
	mov	BYTE PTR _kSwitchForms+102, 1
	mov	ecx, DWORD PTR _k_Stream_PostCharSet
	mov	DWORD PTR _kSwitchForms+104, ecx
; Line 206
	mov	DWORD PTR _kSwitchForms+108, OFFSET $SG76901
	mov	BYTE PTR _kSwitchForms+112, 3
	mov	BYTE PTR _kSwitchForms+113, 0
	mov	BYTE PTR _kSwitchForms+114, 1
	mov	edx, DWORD PTR _k_Stream_PostCharSet
	mov	DWORD PTR _kSwitchForms+116, edx
; Line 208
	mov	DWORD PTR _kSwitchForms+120, OFFSET $SG76902
	xor	eax, eax
	mov	DWORD PTR _kSwitchForms+124, eax
	mov	DWORD PTR _kSwitchForms+128, eax
; Line 210
	mov	DWORD PTR _kSwitchForms+132, OFFSET $SG76903
	xor	ecx, ecx
	mov	DWORD PTR _kSwitchForms+136, ecx
	mov	DWORD PTR _kSwitchForms+140, ecx
; Line 211
	mov	DWORD PTR _kSwitchForms+144, OFFSET $SG76904
	mov	BYTE PTR _kSwitchForms+148, 3
	mov	BYTE PTR _kSwitchForms+149, 0
	mov	BYTE PTR _kSwitchForms+150, 1
	mov	edx, DWORD PTR _kOverwritePostCharSet
	mov	DWORD PTR _kSwitchForms+152, edx
; Line 213
	mov	DWORD PTR _kSwitchForms+156, OFFSET $SG76905
	mov	BYTE PTR _kSwitchForms+160, 2
	mov	BYTE PTR _kSwitchForms+161, 0
	mov	BYTE PTR _kSwitchForms+162, 1
	xor	eax, eax
	mov	DWORD PTR _kSwitchForms+164, eax
; Line 214
	mov	DWORD PTR _kSwitchForms+168, OFFSET $SG76906
	mov	BYTE PTR _kSwitchForms+172, 2
	mov	BYTE PTR _kSwitchForms+173, 1
	mov	BYTE PTR _kSwitchForms+174, 1
	xor	ecx, ecx
	mov	DWORD PTR _kSwitchForms+176, ecx
; Line 216
	mov	DWORD PTR _kSwitchForms+180, OFFSET $SG76907
	mov	BYTE PTR _kSwitchForms+184, 2
	mov	BYTE PTR _kSwitchForms+185, 1
	mov	BYTE PTR _kSwitchForms+186, 1
	xor	edx, edx
	mov	DWORD PTR _kSwitchForms+188, edx
; Line 217
	mov	DWORD PTR _kSwitchForms+192, OFFSET $SG76908
	mov	BYTE PTR _kSwitchForms+196, 2
	mov	BYTE PTR _kSwitchForms+197, 0
	mov	BYTE PTR _kSwitchForms+198, 1
	xor	eax, eax
	mov	DWORD PTR _kSwitchForms+200, eax
; Line 218
	mov	DWORD PTR _kSwitchForms+204, OFFSET $SG76909
	mov	BYTE PTR _kSwitchForms+208, 2
	xor	ecx, ecx
	mov	DWORD PTR _kSwitchForms+209, ecx
	mov	WORD PTR _kSwitchForms+213, cx
	mov	BYTE PTR _kSwitchForms+215, cl
; Line 220
	mov	DWORD PTR _kSwitchForms+216, OFFSET $SG76910
	mov	BYTE PTR _kSwitchForms+220, 2
	mov	BYTE PTR _kSwitchForms+221, 1
	mov	BYTE PTR _kSwitchForms+222, 2
	xor	edx, edx
	mov	DWORD PTR _kSwitchForms+224, edx
; Line 221
	mov	DWORD PTR _kSwitchForms+228, OFFSET $SG76911
	mov	BYTE PTR _kSwitchForms+232, 2
	mov	BYTE PTR _kSwitchForms+233, 1
	mov	BYTE PTR _kSwitchForms+234, 2
	xor	eax, eax
	mov	DWORD PTR _kSwitchForms+236, eax
; Line 222
	mov	DWORD PTR _kSwitchForms+240, OFFSET $SG76912
	mov	BYTE PTR _kSwitchForms+244, 2
	mov	BYTE PTR _kSwitchForms+245, 1
	mov	BYTE PTR _kSwitchForms+246, 2
	xor	ecx, ecx
	mov	DWORD PTR _kSwitchForms+248, ecx
; Line 223
	mov	DWORD PTR _kSwitchForms+252, OFFSET $SG76913
	mov	BYTE PTR _kSwitchForms+256, 2
	mov	BYTE PTR _kSwitchForms+257, 1
	mov	BYTE PTR _kSwitchForms+258, 2
	xor	edx, edx
	mov	DWORD PTR _kSwitchForms+260, edx
; Line 224
	mov	DWORD PTR _kSwitchForms+264, OFFSET $SG76914
	xor	eax, eax
	mov	DWORD PTR _kSwitchForms+268, eax
	mov	DWORD PTR _kSwitchForms+272, eax
; Line 226
	mov	DWORD PTR _kSwitchForms+276, OFFSET $SG76915
	mov	BYTE PTR _kSwitchForms+280, 2
	mov	BYTE PTR _kSwitchForms+281, 1
	mov	BYTE PTR _kSwitchForms+282, 1
	xor	ecx, ecx
	mov	DWORD PTR _kSwitchForms+284, ecx
; Line 227
	mov	DWORD PTR _kSwitchForms+288, OFFSET $SG76916
	mov	BYTE PTR _kSwitchForms+292, 2
	mov	BYTE PTR _kSwitchForms+293, 1
	mov	BYTE PTR _kSwitchForms+294, 1
	xor	edx, edx
	mov	DWORD PTR _kSwitchForms+296, edx
; Line 228
	mov	DWORD PTR _kSwitchForms+300, OFFSET $SG76917
	mov	BYTE PTR _kSwitchForms+304, 3
	mov	BYTE PTR _kSwitchForms+305, 0
	mov	BYTE PTR _kSwitchForms+306, 0
	mov	eax, DWORD PTR _kRecursedPostCharSet
	mov	DWORD PTR _kSwitchForms+308, eax
; Line 230
	mov	DWORD PTR _kSwitchForms+312, OFFSET $SG76918
	mov	BYTE PTR _kSwitchForms+316, 2
	xor	ecx, ecx
	mov	DWORD PTR _kSwitchForms+317, ecx
	mov	WORD PTR _kSwitchForms+321, cx
	mov	BYTE PTR _kSwitchForms+323, cl
; Line 231
	mov	DWORD PTR _kSwitchForms+324, OFFSET $SG76919
	mov	BYTE PTR _kSwitchForms+328, 2
	xor	edx, edx
	mov	DWORD PTR _kSwitchForms+329, edx
	mov	WORD PTR _kSwitchForms+333, dx
	mov	BYTE PTR _kSwitchForms+335, dl
; Line 232
	mov	DWORD PTR _kSwitchForms+336, OFFSET $SG76920
	mov	BYTE PTR _kSwitchForms+340, 2
	mov	BYTE PTR _kSwitchForms+341, 0
	mov	BYTE PTR _kSwitchForms+342, 0
	xor	eax, eax
	mov	DWORD PTR _kSwitchForms+344, eax
; Line 233
	mov	DWORD PTR _kSwitchForms+348, OFFSET $SG76921
	mov	BYTE PTR _kSwitchForms+352, 2
	mov	BYTE PTR _kSwitchForms+353, 1
	mov	BYTE PTR _kSwitchForms+354, 0
	xor	ecx, ecx
	mov	DWORD PTR _kSwitchForms+356, ecx
; Line 235
	mov	DWORD PTR _kSwitchForms+360, OFFSET $SG76922
	mov	BYTE PTR _kSwitchForms+364, 2
	xor	edx, edx
	mov	DWORD PTR _kSwitchForms+365, edx
	mov	WORD PTR _kSwitchForms+369, dx
	mov	BYTE PTR _kSwitchForms+371, dl
; Line 236
	mov	DWORD PTR _kSwitchForms+372, OFFSET $SG76923
	xor	eax, eax
	mov	DWORD PTR _kSwitchForms+376, eax
	mov	DWORD PTR _kSwitchForms+380, eax
; Line 238
	mov	DWORD PTR _kSwitchForms+384, OFFSET $SG76924
	mov	BYTE PTR _kSwitchForms+388, 1
	xor	ecx, ecx
	mov	DWORD PTR _kSwitchForms+389, ecx
	mov	WORD PTR _kSwitchForms+393, cx
	mov	BYTE PTR _kSwitchForms+395, cl
; Line 239
	mov	DWORD PTR _kSwitchForms+396, OFFSET $SG76925
	mov	BYTE PTR _kSwitchForms+400, 2
	xor	edx, edx
	mov	DWORD PTR _kSwitchForms+401, edx
	mov	WORD PTR _kSwitchForms+405, dx
	mov	BYTE PTR _kSwitchForms+407, dl
; Line 240
	mov	DWORD PTR _kSwitchForms+408, OFFSET $SG76926
	mov	BYTE PTR _kSwitchForms+412, 2
	xor	eax, eax
	mov	DWORD PTR _kSwitchForms+413, eax
	mov	WORD PTR _kSwitchForms+417, ax
	mov	BYTE PTR _kSwitchForms+419, al
; Line 241
	mov	DWORD PTR _kSwitchForms+420, OFFSET $SG76927
	xor	ecx, ecx
	mov	DWORD PTR _kSwitchForms+424, ecx
	mov	DWORD PTR _kSwitchForms+428, ecx
; Line 243
	mov	DWORD PTR _kSwitchForms+432, OFFSET $SG76928
	xor	edx, edx
	mov	DWORD PTR _kSwitchForms+436, edx
	mov	DWORD PTR _kSwitchForms+440, edx
; Line 244
	mov	DWORD PTR _kSwitchForms+444, OFFSET $SG76929
	mov	BYTE PTR _kSwitchForms+448, 1
	xor	eax, eax
	mov	DWORD PTR _kSwitchForms+449, eax
	mov	WORD PTR _kSwitchForms+453, ax
	mov	BYTE PTR _kSwitchForms+455, al
; Line 245
	mov	DWORD PTR _kSwitchForms+456, OFFSET $SG76930
	mov	BYTE PTR _kSwitchForms+460, 3
	mov	BYTE PTR _kSwitchForms+461, 0
	mov	BYTE PTR _kSwitchForms+462, 1
	mov	ecx, DWORD PTR _k_ArcNameMode_PostCharSet
	mov	DWORD PTR _kSwitchForms+464, ecx
; Line 247
	mov	DWORD PTR _kSwitchForms+468, OFFSET $SG76931
	xor	edx, edx
	mov	DWORD PTR _kSwitchForms+472, edx
	mov	DWORD PTR _kSwitchForms+476, edx
; Line 248
	mov	DWORD PTR _kSwitchForms+480, OFFSET $SG76932
	mov	BYTE PTR _kSwitchForms+484, 1
	xor	eax, eax
	mov	DWORD PTR _kSwitchForms+485, eax
	mov	WORD PTR _kSwitchForms+489, ax
	mov	BYTE PTR _kSwitchForms+491, al
; Line 249
	mov	DWORD PTR _kSwitchForms+492, OFFSET $SG76933
	mov	BYTE PTR _kSwitchForms+496, 2
	mov	BYTE PTR _kSwitchForms+497, 0
	mov	BYTE PTR _kSwitchForms+498, 0
	xor	ecx, ecx
	mov	DWORD PTR _kSwitchForms+500, ecx
; Line 251
	mov	DWORD PTR _kSwitchForms+504, OFFSET $SG76934
	mov	BYTE PTR _kSwitchForms+508, 1
	xor	edx, edx
	mov	DWORD PTR _kSwitchForms+509, edx
	mov	WORD PTR _kSwitchForms+513, dx
	mov	BYTE PTR _kSwitchForms+515, dl
; Line 252
	mov	DWORD PTR _kSwitchForms+516, OFFSET $SG76935
	mov	BYTE PTR _kSwitchForms+520, 1
	xor	eax, eax
	mov	DWORD PTR _kSwitchForms+521, eax
	mov	WORD PTR _kSwitchForms+525, ax
	mov	BYTE PTR _kSwitchForms+527, al
; Line 253
	mov	DWORD PTR _kSwitchForms+528, OFFSET $SG76936
	xor	ecx, ecx
	mov	DWORD PTR _kSwitchForms+532, ecx
	mov	DWORD PTR _kSwitchForms+536, ecx
; Line 254
	mov	DWORD PTR _kSwitchForms+540, OFFSET $SG76937
	mov	BYTE PTR _kSwitchForms+544, 1
	xor	edx, edx
	mov	DWORD PTR _kSwitchForms+545, edx
	mov	WORD PTR _kSwitchForms+549, dx
	mov	BYTE PTR _kSwitchForms+551, dl
; Line 255
	mov	DWORD PTR _kSwitchForms+552, OFFSET $SG76938
	xor	eax, eax
	mov	DWORD PTR _kSwitchForms+556, eax
	mov	DWORD PTR _kSwitchForms+560, eax
; Line 256
	mov	DWORD PTR _kSwitchForms+564, OFFSET $SG76939
	xor	ecx, ecx
	mov	DWORD PTR _kSwitchForms+568, ecx
	mov	DWORD PTR _kSwitchForms+572, ecx
; Line 258
	mov	DWORD PTR _kSwitchForms+576, OFFSET $SG76940
	xor	edx, edx
	mov	DWORD PTR _kSwitchForms+580, edx
	mov	DWORD PTR _kSwitchForms+584, edx
; Line 259
	mov	DWORD PTR _kSwitchForms+588, OFFSET $SG76941
	xor	eax, eax
	mov	DWORD PTR _kSwitchForms+592, eax
	mov	DWORD PTR _kSwitchForms+596, eax
; Line 262
	mov	DWORD PTR _kSwitchForms+600, OFFSET $SG76942
	mov	BYTE PTR _kSwitchForms+604, 2
	xor	ecx, ecx
	mov	DWORD PTR _kSwitchForms+605, ecx
	mov	WORD PTR _kSwitchForms+609, cx
	mov	BYTE PTR _kSwitchForms+611, cl
; Line 264
	pop	ebp
	ret	0
??__EkSwitchForms@@YAXXZ ENDP				; `dynamic initializer for 'kSwitchForms''
text$yc	ENDS
_DATA	SEGMENT
_kSwitchForms DD FLAT:$SG76890
	ORG $+8
	DD	FLAT:$SG76891
	ORG $+8
	DD	FLAT:$SG76892
	ORG $+8
	DD	FLAT:$SG76893
	ORG $+8
	DD	FLAT:$SG76894
	ORG $+8
	DD	FLAT:$SG76895
	ORG $+8
	DD	FLAT:$SG76896
	DB	02H
	DB	00H
	DB	00H
	ORG $+1
	ORG $+4
	DD	FLAT:$SG76897
	DB	03H
	DB	00H
	DB	01H
	ORG $+1
	ORG $+520
_DATA	ENDS
CRT$XCU	SEGMENT
_kSwitchForms$initializer$ DD FLAT:??__EkSwitchForms@@YAXXZ
CRT$XCU	ENDS
END
