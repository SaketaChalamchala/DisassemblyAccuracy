; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\CPP\7zip\UI\Common\OpenArchive.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
_kProps	DB	03H
	DB	07H
	DB	0cH
	DB	014H
	DB	01cH
	DB	024H
	DB	04eH
	ORG $+1
$SG73397 DB	'[', 00H, 'D', 00H, 'E', 00H, 'L', 00H, 'E', 00H, 'T', 00H
	DB	'E', 00H, 'D', 00H, ']', 00H, '\', 00H, 00H, 00H
	ORG $+2
$SG73679 DB	'exe', 00H
$SG73681 DB	'pe', 00H
	ORG $+1
$SG73682 DB	'elf', 00H
$SG73683 DB	'macho', 00H
	ORG $+2
$SG73684 DB	'mub', 00H
$SG73685 DB	'te', 00H
	ORG $+1
_k_PreArcFormats DD FLAT:$SG73681
	DD	FLAT:$SG73682
	DD	FLAT:$SG73683
	DD	FLAT:$SG73684
	DD	FLAT:$SG73685
$SG73701 DB	'7z', 00H
	ORG $+1
$SG73702 DB	'xz', 00H
	ORG $+1
$SG73703 DB	'rar', 00H
$SG73704 DB	'bzip2', 00H
	ORG $+2
$SG73705 DB	'gzip', 00H
	ORG $+3
$SG73706 DB	'cab', 00H
$SG73707 DB	'wim', 00H
$SG73708 DB	'rpm', 00H
$SG73709 DB	'vhd', 00H
$SG73710 DB	'xar', 00H
_k_Formats_with_simple_signuature DD FLAT:$SG73701
	DD	FLAT:$SG73702
	DD	FLAT:$SG73703
	DD	FLAT:$SG73704
	DD	FLAT:$SG73705
	DD	FLAT:$SG73706
	DD	FLAT:$SG73707
	DD	FLAT:$SG73708
	DD	FLAT:$SG73709
	DD	FLAT:$SG73710
$SG73878 DB	'U', 00H, 'n', 00H, 'k', 00H, 'n', 00H, 'o', 00H, 'w', 00H
	DB	'n', 00H, ' ', 00H, 'e', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r'
	DB	00H, 00H, 00H
$SG73884 DB	'U', 00H, 'n', 00H, 'k', 00H, 'n', 00H, 'o', 00H, 'w', 00H
	DB	'n', 00H, ' ', 00H, 'w', 00H, 'a', 00H, 'r', 00H, 'n', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, 00H, 00H
$SG74318 DB	'000', 00H
$SG74319 DB	'001', 00H
$SG74322 DB	'rar', 00H
$SG74353 DB	'iso', 00H
$SG74356 DB	'udf', 00H
CONST	ENDS
PUBLIC	??A?$CObjectVector@UCParseItem@NParser@NArchive@@@@QBEABUCParseItem@NParser@NArchive@@I@Z ; CObjectVector<NArchive::NParser::CParseItem>::operator[]
PUBLIC	?Size@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NParser::CParseItem>::Size
PUBLIC	?FindInsertPos@CHandler@NParser@NArchive@@QBEHABUCParseItem@23@@Z ; NArchive::NParser::CHandler::FindInsertPos
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\openarchive.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
tv166 = -52						; size = 4
tv165 = -48						; size = 4
tv153 = -44						; size = 4
tv152 = -40						; size = 4
tv140 = -36						; size = 4
tv139 = -32						; size = 4
tv95 = -28						; size = 4
tv94 = -24						; size = 4
_midItem$72911 = -20					; size = 4
_mid$72910 = -16					; size = 4
_right$ = -12						; size = 4
_left$ = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?FindInsertPos@CHandler@NParser@NArchive@@QBEHABUCParseItem@23@@Z PROC ; NArchive::NParser::CHandler::FindInsertPos
; _this$ = ecx
; Line 205
	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 206
	mov	DWORD PTR _left$[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Size@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NParser::CParseItem>::Size
	mov	DWORD PTR _right$[ebp], eax
$LN10@FindInsert:
; Line 207
	mov	eax, DWORD PTR _left$[ebp]
	cmp	eax, DWORD PTR _right$[ebp]
	je	$LN9@FindInsert
; Line 209
	mov	ecx, DWORD PTR _left$[ebp]
	add	ecx, DWORD PTR _right$[ebp]
	shr	ecx, 1
	mov	DWORD PTR _mid$72910[ebp], ecx
; Line 210
	mov	edx, DWORD PTR _mid$72910[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$CObjectVector@UCParseItem@NParser@NArchive@@@@QBEABUCParseItem@NParser@NArchive@@I@Z ; CObjectVector<NArchive::NParser::CParseItem>::operator[]
	mov	DWORD PTR _midItem$72911[ebp], eax
; Line 211
	mov	eax, DWORD PTR _item$[ebp]
	mov	ecx, DWORD PTR _midItem$72911[ebp]
	mov	DWORD PTR tv94[ebp], eax
	mov	DWORD PTR tv95[ebp], ecx
	mov	edx, DWORD PTR tv94[ebp]
	mov	eax, DWORD PTR tv95[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+4]
	ja	SHORT $LN8@FindInsert
	jb	SHORT $LN13@FindInsert
	mov	edx, DWORD PTR tv94[ebp]
	mov	eax, DWORD PTR tv95[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax]
	jae	SHORT $LN8@FindInsert
$LN13@FindInsert:
; Line 212
	mov	edx, DWORD PTR _mid$72910[ebp]
	mov	DWORD PTR _right$[ebp], edx
	jmp	$LN7@FindInsert
$LN8@FindInsert:
; Line 213
	mov	eax, DWORD PTR _item$[ebp]
	mov	ecx, DWORD PTR _midItem$72911[ebp]
	mov	DWORD PTR tv139[ebp], eax
	mov	DWORD PTR tv140[ebp], ecx
	mov	edx, DWORD PTR tv139[ebp]
	mov	eax, DWORD PTR tv140[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+4]
	jb	SHORT $LN6@FindInsert
	ja	SHORT $LN14@FindInsert
	mov	edx, DWORD PTR tv139[ebp]
	mov	eax, DWORD PTR tv140[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax]
	jbe	SHORT $LN6@FindInsert
$LN14@FindInsert:
; Line 214
	mov	edx, DWORD PTR _mid$72910[ebp]
	add	edx, 1
	mov	DWORD PTR _left$[ebp], edx
	jmp	SHORT $LN7@FindInsert
$LN6@FindInsert:
; Line 215
	mov	eax, DWORD PTR _item$[ebp]
	mov	ecx, DWORD PTR _midItem$72911[ebp]
	mov	DWORD PTR tv152[ebp], eax
	mov	DWORD PTR tv153[ebp], ecx
	mov	edx, DWORD PTR tv152[ebp]
	mov	eax, DWORD PTR tv153[ebp]
	mov	ecx, DWORD PTR [edx+12]
	cmp	ecx, DWORD PTR [eax+12]
	ja	SHORT $LN4@FindInsert
	jb	SHORT $LN15@FindInsert
	mov	edx, DWORD PTR tv152[ebp]
	mov	eax, DWORD PTR tv153[ebp]
	mov	ecx, DWORD PTR [edx+8]
	cmp	ecx, DWORD PTR [eax+8]
	jae	SHORT $LN4@FindInsert
$LN15@FindInsert:
; Line 216
	mov	edx, DWORD PTR _mid$72910[ebp]
	mov	DWORD PTR _right$[ebp], edx
	jmp	SHORT $LN7@FindInsert
$LN4@FindInsert:
; Line 217
	mov	eax, DWORD PTR _item$[ebp]
	mov	ecx, DWORD PTR _midItem$72911[ebp]
	mov	DWORD PTR tv165[ebp], eax
	mov	DWORD PTR tv166[ebp], ecx
	mov	edx, DWORD PTR tv165[ebp]
	mov	eax, DWORD PTR tv166[ebp]
	mov	ecx, DWORD PTR [edx+12]
	cmp	ecx, DWORD PTR [eax+12]
	jb	SHORT $LN2@FindInsert
	ja	SHORT $LN16@FindInsert
	mov	edx, DWORD PTR tv165[ebp]
	mov	eax, DWORD PTR tv166[ebp]
	mov	ecx, DWORD PTR [edx+8]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	SHORT $LN2@FindInsert
$LN16@FindInsert:
; Line 218
	mov	edx, DWORD PTR _mid$72910[ebp]
	add	edx, 1
	mov	DWORD PTR _left$[ebp], edx
; Line 219
	jmp	SHORT $LN7@FindInsert
$LN2@FindInsert:
; Line 221
	mov	eax, DWORD PTR _mid$72910[ebp]
	add	eax, 1
	mov	DWORD PTR _left$[ebp], eax
$LN7@FindInsert:
; Line 224
	jmp	$LN10@FindInsert
$LN9@FindInsert:
; Line 225
	mov	eax, DWORD PTR _left$[ebp]
; Line 226
	pop	edi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?FindInsertPos@CHandler@NParser@NArchive@@QBEHABUCParseItem@23@@Z ENDP ; NArchive::NParser::CHandler::FindInsertPos
_TEXT	ENDS
PUBLIC	?Back@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEAAUCParseItem@NParser@NArchive@@XZ ; CObjectVector<NArchive::NParser::CParseItem>::Back
PUBLIC	?IsEmpty@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QBE_NXZ ; CObjectVector<NArchive::NParser::CParseItem>::IsEmpty
PUBLIC	??1CParseItem@NParser@NArchive@@QAE@XZ		; NArchive::NParser::CParseItem::~CParseItem
PUBLIC	?Add@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEIABUCParseItem@NParser@NArchive@@@Z ; CObjectVector<NArchive::NParser::CParseItem>::Add
PUBLIC	??0CParseItem@NParser@NArchive@@QAE@XZ		; NArchive::NParser::CParseItem::CParseItem
PUBLIC	?AddUnknownItem@CHandler@NParser@NArchive@@QAEX_K@Z ; NArchive::NParser::CHandler::AddUnknownItem
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
xdata$x	SEGMENT
__unwindtable$?AddUnknownItem@CHandler@NParser@NArchive@@QAEX_K@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddUnknownItem@CHandler@NParser@NArchive@@QAEX_K@Z$0
__ehfuncinfo$?AddUnknownItem@CHandler@NParser@NArchive@@QAEX_K@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddUnknownItem@CHandler@NParser@NArchive@@QAEX_K@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv150 = -148						; size = 4
tv93 = -144						; size = 4
_back$72928 = -140					; size = 4
_item2$72925 = -132					; size = 112
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_next$ = 8						; size = 8
?AddUnknownItem@CHandler@NParser@NArchive@@QAEX_K@Z PROC ; NArchive::NParser::CHandler::AddUnknownItem
; _this$ = ecx
; Line 229
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddUnknownItem@CHandler@NParser@NArchive@@QAEX_K@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 136				; 00000088H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-148]
	mov	ecx, 34					; 00000022H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 238
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv93[ebp], eax
	mov	ecx, DWORD PTR tv93[ebp]
	mov	edx, DWORD PTR [ecx+28]
	cmp	edx, DWORD PTR _next$[ebp+4]
	ja	$LN4@AddUnknown
	jb	SHORT $LN8@AddUnknown
	mov	eax, DWORD PTR tv93[ebp]
	mov	ecx, DWORD PTR [eax+24]
	cmp	ecx, DWORD PTR _next$[ebp]
	jae	SHORT $LN4@AddUnknown
$LN8@AddUnknown:
; Line 240
	lea	ecx, DWORD PTR _item2$72925[ebp]
	call	??0CParseItem@NParser@NArchive@@QAE@XZ	; NArchive::NParser::CParseItem::CParseItem
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 241
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR _item2$72925[ebp], eax
	mov	ecx, DWORD PTR [edx+28]
	mov	DWORD PTR _item2$72925[ebp+4], ecx
; Line 242
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _next$[ebp]
	sub	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR _next$[ebp+4]
	sbb	ecx, DWORD PTR [edx+28]
	mov	DWORD PTR _item2$72925[ebp+8], eax
	mov	DWORD PTR _item2$72925[ebp+12], ecx
; Line 243
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _next$[ebp]
	mov	DWORD PTR [edx+24], eax
	mov	ecx, DWORD PTR _next$[ebp+4]
	mov	DWORD PTR [edx+28], ecx
; Line 244
	lea	edx, DWORD PTR _item2$72925[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Add@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEIABUCParseItem@NParser@NArchive@@@Z ; CObjectVector<NArchive::NParser::CParseItem>::Add
; Line 245
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _item2$72925[ebp]
	call	??1CParseItem@NParser@NArchive@@QAE@XZ
	jmp	$LN5@AddUnknown
$LN4@AddUnknown:
; Line 246
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv150[ebp], eax
	mov	ecx, DWORD PTR tv150[ebp]
	mov	edx, DWORD PTR [ecx+28]
	cmp	edx, DWORD PTR _next$[ebp+4]
	jb	SHORT $LN5@AddUnknown
	ja	SHORT $LN9@AddUnknown
	mov	eax, DWORD PTR tv150[ebp]
	mov	ecx, DWORD PTR [eax+24]
	cmp	ecx, DWORD PTR _next$[ebp]
	jbe	SHORT $LN5@AddUnknown
$LN9@AddUnknown:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?IsEmpty@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QBE_NXZ ; CObjectVector<NArchive::NParser::CParseItem>::IsEmpty
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN5@AddUnknown
; Line 248
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Back@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEAAUCParseItem@NParser@NArchive@@XZ ; CObjectVector<NArchive::NParser::CParseItem>::Back
	mov	DWORD PTR _back$72928[ebp], eax
; Line 249
	mov	eax, DWORD PTR _back$72928[ebp]
	movzx	ecx, BYTE PTR [eax+108]
	test	ecx, ecx
	je	SHORT $LN5@AddUnknown
; Line 251
	mov	edx, DWORD PTR _back$72928[ebp]
	mov	eax, DWORD PTR _next$[ebp]
	sub	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _next$[ebp+4]
	sbb	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _back$72928[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx
; Line 252
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _next$[ebp]
	mov	DWORD PTR [eax+24], ecx
	mov	edx, DWORD PTR _next$[ebp+4]
	mov	DWORD PTR [eax+28], edx
$LN5@AddUnknown:
; Line 255
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@AddUnknown
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 148				; 00000094H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN13@AddUnknown:
	DD	1
	DD	$LN12@AddUnknown
$LN12@AddUnknown:
	DD	-132					; ffffff7cH
	DD	112					; 00000070H
	DD	$LN10@AddUnknown
$LN10@AddUnknown:
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	50					; 00000032H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?AddUnknownItem@CHandler@NParser@NArchive@@QAEX_K@Z$0:
	lea	ecx, DWORD PTR _item2$72925[ebp]
	jmp	??1CParseItem@NParser@NArchive@@QAE@XZ
__ehhandler$?AddUnknownItem@CHandler@NParser@NArchive@@QAEX_K@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-144]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddUnknownItem@CHandler@NParser@NArchive@@QAEX_K@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddUnknownItem@CHandler@NParser@NArchive@@QAEX_K@Z ENDP ; NArchive::NParser::CHandler::AddUnknownItem
PUBLIC	??1UString@@QAE@XZ				; UString::~UString
EXTRN	??0UString@@QAE@XZ:PROC				; UString::UString
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CParseItem@NParser@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CParseItem@NParser@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CParseItem@NParser@NArchive@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CParseItem@NParser@NArchive@@QAE@XZ$2
__ehfuncinfo$??0CParseItem@NParser@NArchive@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0CParseItem@NParser@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CParseItem@NParser@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CParseItem@NParser@NArchive@@QAE@XZ PROC		; NArchive::NParser::CParseItem::CParseItem, COMDAT
; _this$ = ecx
; Line 152
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CParseItem@NParser@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??0UString@@QAE@XZ			; UString::UString
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+72], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+73], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+74], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+75], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+76], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+77], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+108], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CParseItem@NParser@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??0CParseItem@NParser@NArchive@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??0CParseItem@NParser@NArchive@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$??0CParseItem@NParser@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CParseItem@NParser@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CParseItem@NParser@NArchive@@QAE@XZ ENDP		; NArchive::NParser::CParseItem::CParseItem
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1UString@@QAE@XZ
_TEXT	SEGMENT
$T77243 = -8						; size = 4
_this$ = -4						; size = 4
??1UString@@QAE@XZ PROC					; UString::~UString, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 470
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T77243[ebp], ecx
	mov	edx, DWORD PTR $T77243[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1UString@@QAE@XZ ENDP					; UString::~UString
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CParseItem@NParser@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CParseItem@NParser@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CParseItem@NParser@NArchive@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CParseItem@NParser@NArchive@@QAE@XZ$2
__ehfuncinfo$??1CParseItem@NParser@NArchive@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1CParseItem@NParser@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CParseItem@NParser@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CParseItem@NParser@NArchive@@QAE@XZ PROC		; NArchive::NParser::CParseItem::~CParseItem, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CParseItem@NParser@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CParseItem@NParser@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??1CParseItem@NParser@NArchive@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??1CParseItem@NParser@NArchive@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$??1CParseItem@NParser@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CParseItem@NParser@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CParseItem@NParser@NArchive@@QAE@XZ ENDP		; NArchive::NParser::CParseItem::~CParseItem
PUBLIC	?Insert@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEXIABUCParseItem@NParser@NArchive@@@Z ; CObjectVector<NArchive::NParser::CParseItem>::Insert
PUBLIC	?AddItem@CHandler@NParser@NArchive@@QAEXABUCParseItem@23@@Z ; NArchive::NParser::CHandler::AddItem
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv132 = -20						; size = 4
_next$72938 = -16					; size = 8
_pos$ = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?AddItem@CHandler@NParser@NArchive@@QAEXABUCParseItem@23@@Z PROC ; NArchive::NParser::CHandler::AddItem
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\openarchive.cpp
; Line 258
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 259
	mov	eax, DWORD PTR _item$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddUnknownItem@CHandler@NParser@NArchive@@QAEX_K@Z ; NArchive::NParser::CHandler::AddUnknownItem
; Line 260
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindInsertPos@CHandler@NParser@NArchive@@QBEHABUCParseItem@23@@Z ; NArchive::NParser::CHandler::FindInsertPos
	mov	DWORD PTR _pos$[ebp], eax
; Line 261
	cmp	DWORD PTR _pos$[ebp], 0
	jl	SHORT $LN3@AddItem
; Line 263
	mov	ecx, DWORD PTR _item$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pos$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Insert@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEXIABUCParseItem@NParser@NArchive@@@Z ; CObjectVector<NArchive::NParser::CParseItem>::Insert
; Line 264
	mov	eax, DWORD PTR _item$[ebp]
	mov	ecx, DWORD PTR _item$[ebp]
	mov	edx, DWORD PTR [eax]
	add	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [eax+4]
	adc	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _next$72938[ebp], edx
	mov	DWORD PTR _next$72938[ebp+4], eax
; Line 265
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv132[ebp], ecx
	mov	edx, DWORD PTR tv132[ebp]
	mov	eax, DWORD PTR [edx+28]
	cmp	eax, DWORD PTR _next$72938[ebp+4]
	ja	SHORT $LN3@AddItem
	jb	SHORT $LN5@AddItem
	mov	ecx, DWORD PTR tv132[ebp]
	mov	edx, DWORD PTR [ecx+24]
	cmp	edx, DWORD PTR _next$72938[ebp]
	jae	SHORT $LN3@AddItem
$LN5@AddItem:
; Line 266
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _next$72938[ebp]
	mov	DWORD PTR [eax+24], ecx
	mov	edx, DWORD PTR _next$72938[ebp+4]
	mov	DWORD PTR [eax+28], edx
$LN3@AddItem:
; Line 268
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?AddItem@CHandler@NParser@NArchive@@QAEXABUCParseItem@23@@Z ENDP ; NArchive::NParser::CHandler::AddItem
_TEXT	ENDS
PUBLIC	?GetNumberOfProperties@CHandler@NParser@NArchive@@UAGJPAI@Z ; NArchive::NParser::CHandler::GetNumberOfProperties
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = 8						; size = 4
_numProps$ = 12						; size = 4
?GetNumberOfProperties@CHandler@NParser@NArchive@@UAGJPAI@Z PROC ; NArchive::NParser::CHandler::GetNumberOfProperties
; Line 295
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _numProps$[ebp]
	mov	DWORD PTR [eax], 7
	xor	eax, eax
	pop	ebp
	ret	8
?GetNumberOfProperties@CHandler@NParser@NArchive@@UAGJPAI@Z ENDP ; NArchive::NParser::CHandler::GetNumberOfProperties
_TEXT	ENDS
PUBLIC	?GetPropertyInfo@CHandler@NParser@NArchive@@UAGJIPAPA_WPAKPAG@Z ; NArchive::NParser::CHandler::GetPropertyInfo
EXTRN	?k7z_PROPID_To_VARTYPE@@3QBEB:BYTE		; k7z_PROPID_To_VARTYPE
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = 8						; size = 4
_index$ = 12						; size = 4
_name$ = 16						; size = 4
_propID$ = 20						; size = 4
_varType$ = 24						; size = 4
?GetPropertyInfo@CHandler@NParser@NArchive@@UAGJIPAPA_WPAKPAG@Z PROC ; NArchive::NParser::CHandler::GetPropertyInfo
; Line 295
	push	ebp
	mov	ebp, esp
	cmp	DWORD PTR _index$[ebp], 7
	jb	SHORT $LN1@GetPropert
	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN2@GetPropert
$LN1@GetPropert:
	mov	eax, DWORD PTR _index$[ebp]
	movzx	ecx, BYTE PTR _kProps[eax]
	mov	edx, DWORD PTR _propID$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR _propID$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	dx, BYTE PTR ?k7z_PROPID_To_VARTYPE@@3QBEB[ecx]
	mov	eax, DWORD PTR _varType$[ebp]
	mov	WORD PTR [eax], dx
	mov	ecx, DWORD PTR _name$[ebp]
	mov	DWORD PTR [ecx], 0
	xor	eax, eax
$LN2@GetPropert:
	pop	ebp
	ret	20					; 00000014H
?GetPropertyInfo@CHandler@NParser@NArchive@@UAGJIPAPA_WPAKPAG@Z ENDP ; NArchive::NParser::CHandler::GetPropertyInfo
_TEXT	ENDS
PUBLIC	?GetNumberOfArchiveProperties@CHandler@NParser@NArchive@@UAGJPAI@Z ; NArchive::NParser::CHandler::GetNumberOfArchiveProperties
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = 8						; size = 4
_numProps$ = 12						; size = 4
?GetNumberOfArchiveProperties@CHandler@NParser@NArchive@@UAGJPAI@Z PROC ; NArchive::NParser::CHandler::GetNumberOfArchiveProperties
; Line 296
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _numProps$[ebp]
	mov	DWORD PTR [eax], 0
	xor	eax, eax
	pop	ebp
	ret	8
?GetNumberOfArchiveProperties@CHandler@NParser@NArchive@@UAGJPAI@Z ENDP ; NArchive::NParser::CHandler::GetNumberOfArchiveProperties
_TEXT	ENDS
PUBLIC	?GetArchivePropertyInfo@CHandler@NParser@NArchive@@UAGJIPAPA_WPAKPAG@Z ; NArchive::NParser::CHandler::GetArchivePropertyInfo
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
?GetArchivePropertyInfo@CHandler@NParser@NArchive@@UAGJIPAPA_WPAKPAG@Z PROC ; NArchive::NParser::CHandler::GetArchivePropertyInfo
; Line 296
	push	ebp
	mov	ebp, esp
	mov	eax, -2147467263			; 80004001H
	pop	ebp
	ret	20					; 00000014H
?GetArchivePropertyInfo@CHandler@NParser@NArchive@@UAGJIPAPA_WPAKPAG@Z ENDP ; NArchive::NParser::CHandler::GetArchivePropertyInfo
_TEXT	ENDS
PUBLIC	?GetArchiveProperty@CHandler@NParser@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z ; NArchive::NParser::CHandler::GetArchiveProperty
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = 8						; size = 4
___formal$ = 12						; size = 4
_value$ = 16						; size = 4
?GetArchiveProperty@CHandler@NParser@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z PROC ; NArchive::NParser::CHandler::GetArchiveProperty
; Line 296
	push	ebp
	mov	ebp, esp
	xor	eax, eax
	mov	ecx, DWORD PTR _value$[ebp]
	mov	WORD PTR [ecx], ax
	xor	eax, eax
	pop	ebp
	ret	12					; 0000000cH
?GetArchiveProperty@CHandler@NParser@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z ENDP ; NArchive::NParser::CHandler::GetArchiveProperty
_TEXT	ENDS
PUBLIC	??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ; CMyComPtr<IInStream>::operator=
PUBLIC	?Open@CHandler@NParser@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z ; NArchive::NParser::CHandler::Open
xdata$x	SEGMENT
__catchsym$?Open@CHandler@NParser@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?Open@CHandler@NParser@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$0
__unwindtable$?Open@CHandler@NParser@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?Open@CHandler@NParser@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?Open@CHandler@NParser@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$2
__ehfuncinfo$?Open@CHandler@NParser@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Open@CHandler@NParser@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?Open@CHandler@NParser@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T77265 = -20						; size = 4
__$EHRec$ = -16						; size = 16
_this$ = 8						; size = 4
_stream$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
?Open@CHandler@NParser@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z PROC ; NArchive::NParser::CHandler::Open
; Line 299
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Open@CHandler@NParser@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
; Line 300
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 302
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 303
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ; CMyComPtr<IInStream>::operator=
; Line 305
	xor	eax, eax
	jmp	SHORT $LN2@Open
__catch$?Open@CHandler@NParser@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$0:
; Line 306
	mov	DWORD PTR $T77265[ebp], -2147024882	; 8007000eH
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN7@Open
	ret	0
	mov	eax, __tryend$?Open@CHandler@NParser@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$1
	ret	0
__tryend$?Open@CHandler@NParser@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$1:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN2@Open
$LN7@Open:
	mov	eax, DWORD PTR $T77265[ebp]
$LN2@Open:
; Line 307
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
text$x	SEGMENT
__ehhandler$?Open@CHandler@NParser@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Open@CHandler@NParser@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Open@CHandler@NParser@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z ENDP ; NArchive::NParser::CHandler::Open
PUBLIC	?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ	; CMyComPtr<IInStream>::Release
PUBLIC	?Clear@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEXXZ ; CObjectVector<NArchive::NParser::CParseItem>::Clear
PUBLIC	?Close@CHandler@NParser@NArchive@@UAGJXZ	; NArchive::NParser::CHandler::Close
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = 8						; size = 4
?Close@CHandler@NParser@NArchive@@UAGJXZ PROC		; NArchive::NParser::CHandler::Close
; Line 310
	push	ebp
	mov	ebp, esp
; Line 311
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Clear@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEXXZ ; CObjectVector<NArchive::NParser::CParseItem>::Clear
; Line 312
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ ; CMyComPtr<IInStream>::Release
; Line 313
	xor	eax, eax
; Line 314
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
?Close@CHandler@NParser@NArchive@@UAGJXZ ENDP		; NArchive::NParser::CHandler::Close
_TEXT	ENDS
PUBLIC	?GetNumberOfItems@CHandler@NParser@NArchive@@UAGJPAI@Z ; NArchive::NParser::CHandler::GetNumberOfItems
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = 8						; size = 4
_numItems$ = 12						; size = 4
?GetNumberOfItems@CHandler@NParser@NArchive@@UAGJPAI@Z PROC ; NArchive::NParser::CHandler::GetNumberOfItems
; Line 317
	push	ebp
	mov	ebp, esp
; Line 318
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Size@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NParser::CParseItem>::Size
	mov	ecx, DWORD PTR _numItems$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 319
	xor	eax, eax
; Line 320
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?GetNumberOfItems@CHandler@NParser@NArchive@@UAGJPAI@Z ENDP ; NArchive::NParser::CHandler::GetNumberOfItems
_TEXT	ENDS
PUBLIC	??1CPropVariant@NCOM@NWindows@@QAE@XZ		; NWindows::NCOM::CPropVariant::~CPropVariant
PUBLIC	??YUString@@QAEAAV0@_W@Z			; UString::operator+=
PUBLIC	?IsEmpty@UString@@QBE_NXZ			; UString::IsEmpty
PUBLIC	??A?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEAAUCParseItem@NParser@NArchive@@I@Z ; CObjectVector<NArchive::NParser::CParseItem>::operator[]
PUBLIC	??0CPropVariant@NCOM@NWindows@@QAE@XZ		; NWindows::NCOM::CPropVariant::CPropVariant
PUBLIC	__$ArrayPad$
PUBLIC	?GetProperty@CHandler@NParser@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z ; NArchive::NParser::CHandler::GetProperty
EXTRN	?Detach@CPropVariant@NCOM@NWindows@@QAEJPAUtagPROPVARIANT@@@Z:PROC ; NWindows::NCOM::CPropVariant::Detach
EXTRN	??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABU_FILETIME@@@Z:PROC ; NWindows::NCOM::CPropVariant::operator=
EXTRN	??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z:PROC ; NWindows::NCOM::CPropVariant::operator=
EXTRN	??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABVUString@@@Z:PROC ; NWindows::NCOM::CPropVariant::operator=
EXTRN	??YUString@@QAEAAV0@ABV0@@Z:PROC		; UString::operator+=
EXTRN	??0UString@@QAE@PB_W@Z:PROC			; UString::UString
EXTRN	?ConvertUInt32ToString@@YGXIPA_W@Z:PROC		; ConvertUInt32ToString
xdata$x	SEGMENT
__catchsym$?GetProperty@CHandler@NParser@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?GetProperty@CHandler@NParser@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$0
__tryblocktable$?GetProperty@CHandler@NParser@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z DD 00H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?GetProperty@CHandler@NParser@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$4
__unwindtable$?GetProperty@CHandler@NParser@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$?GetProperty@CHandler@NParser@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?GetProperty@CHandler@NParser@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$3
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?GetProperty@CHandler@NParser@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?GetProperty@CHandler@NParser@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?GetProperty@CHandler@NParser@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv193 = -168						; size = 1
tv192 = -167						; size = 1
tv191 = -166						; size = 1
tv190 = -165						; size = 1
tv189 = -164						; size = 4
tv71 = -160						; size = 4
tv188 = -156						; size = 4
tv187 = -152						; size = 4
$T77282 = -148						; size = 4
$T77281 = -144						; size = 4
_s$73010 = -136						; size = 12
_sz$73009 = -116					; size = 64
_item$73003 = -48					; size = 4
_prop$73002 = -40					; size = 16
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_this$ = 8						; size = 4
_index$ = 12						; size = 4
_propID$ = 16						; size = 4
_value$ = 20						; size = 4
?GetProperty@CHandler@NParser@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z PROC ; NArchive::NParser::CHandler::GetProperty
; Line 323
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetProperty@CHandler@NParser@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 152				; 00000098H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-168]
	mov	ecx, 38					; 00000026H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
; Line 324
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 325
	lea	ecx, DWORD PTR _prop$73002[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
	mov	DWORD PTR tv187[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 1
; Line 327
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEAAUCParseItem@NParser@NArchive@@I@Z ; CObjectVector<NArchive::NParser::CParseItem>::operator[]
	mov	DWORD PTR tv188[ebp], eax
	mov	ecx, DWORD PTR tv188[ebp]
	mov	DWORD PTR _item$73003[ebp], ecx
; Line 329
	mov	edx, DWORD PTR _propID$[ebp]
	mov	DWORD PTR tv71[ebp], edx
	mov	eax, DWORD PTR tv71[ebp]
	sub	eax, 3
	mov	DWORD PTR tv71[ebp], eax
	cmp	DWORD PTR tv71[ebp], 75			; 0000004bH
	ja	$LN18@GetPropert@2
	mov	ecx, DWORD PTR tv71[ebp]
	movzx	edx, BYTE PTR $LN30@GetPropert@2[ecx]
	jmp	DWORD PTR $LN37@GetPropert@2[edx*4]
$LN17@GetPropert@2:
; Line 334
	lea	eax, DWORD PTR _sz$73009[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	add	ecx, 1
	push	ecx
	call	?ConvertUInt32ToString@@YGXIPA_W@Z	; ConvertUInt32ToString
; Line 335
	lea	edx, DWORD PTR _sz$73009[ebp]
	push	edx
	lea	ecx, DWORD PTR _s$73010[ebp]
	call	??0UString@@QAE@PB_W@Z			; UString::UString
	mov	DWORD PTR tv189[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 2
; Line 336
	mov	ecx, DWORD PTR _item$73003[ebp]
	add	ecx, 16					; 00000010H
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	mov	BYTE PTR tv190[ebp], al
	movzx	eax, BYTE PTR tv190[ebp]
	test	eax, eax
	jne	SHORT $LN16@GetPropert@2
; Line 338
	push	46					; 0000002eH
	lea	ecx, DWORD PTR _s$73010[ebp]
	call	??YUString@@QAEAAV0@_W@Z		; UString::operator+=
; Line 339
	mov	ecx, DWORD PTR _item$73003[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	lea	ecx, DWORD PTR _s$73010[ebp]
	call	??YUString@@QAEAAV0@ABV0@@Z		; UString::operator+=
$LN16@GetPropert@2:
; Line 341
	mov	ecx, DWORD PTR _item$73003[ebp]
	add	ecx, 28					; 0000001cH
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	mov	BYTE PTR tv191[ebp], al
	movzx	edx, BYTE PTR tv191[ebp]
	test	edx, edx
	jne	SHORT $LN15@GetPropert@2
; Line 343
	push	46					; 0000002eH
	lea	ecx, DWORD PTR _s$73010[ebp]
	call	??YUString@@QAEAAV0@_W@Z		; UString::operator+=
; Line 344
	mov	eax, DWORD PTR _item$73003[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	lea	ecx, DWORD PTR _s$73010[ebp]
	call	??YUString@@QAEAAV0@ABV0@@Z		; UString::operator+=
$LN15@GetPropert@2:
; Line 346
	lea	ecx, DWORD PTR _s$73010[ebp]
	push	ecx
	lea	ecx, DWORD PTR _prop$73002[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABVUString@@@Z ; NWindows::NCOM::CPropVariant::operator=
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _s$73010[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	jmp	$LN18@GetPropert@2
$LN14@GetPropert@2:
; Line 349
	mov	edx, DWORD PTR _item$73003[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR [edx+8]
	push	ecx
	lea	ecx, DWORD PTR _prop$73002[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=
	jmp	$LN18@GetPropert@2
$LN13@GetPropert@2:
; Line 350
	mov	edx, DWORD PTR _item$73003[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR [edx]
	push	ecx
	lea	ecx, DWORD PTR _prop$73002[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=
	jmp	$LN18@GetPropert@2
$LN12@GetPropert@2:
; Line 351
	mov	edx, DWORD PTR _item$73003[ebp]
	movzx	eax, BYTE PTR [edx+73]
	test	eax, eax
	je	SHORT $LN11@GetPropert@2
	mov	ecx, DWORD PTR _item$73003[ebp]
	mov	edx, DWORD PTR [ecx+84]
	push	edx
	mov	eax, DWORD PTR [ecx+80]
	push	eax
	lea	ecx, DWORD PTR _prop$73002[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=
$LN11@GetPropert@2:
	jmp	$LN18@GetPropert@2
$LN10@GetPropert@2:
; Line 352
	mov	ecx, DWORD PTR _item$73003[ebp]
	movzx	edx, BYTE PTR [ecx+75]
	test	edx, edx
	je	SHORT $LN9@GetPropert@2
	mov	eax, DWORD PTR _item$73003[ebp]
	mov	ecx, DWORD PTR [eax+100]
	push	ecx
	mov	edx, DWORD PTR [eax+96]
	push	edx
	lea	ecx, DWORD PTR _prop$73002[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=
$LN9@GetPropert@2:
	jmp	$LN18@GetPropert@2
$LN8@GetPropert@2:
; Line 353
	mov	eax, DWORD PTR _item$73003[ebp]
	movzx	ecx, BYTE PTR [eax+74]
	test	ecx, ecx
	je	SHORT $LN7@GetPropert@2
	mov	edx, DWORD PTR _item$73003[ebp]
	mov	eax, DWORD PTR [edx+92]
	push	eax
	mov	ecx, DWORD PTR [edx+88]
	push	ecx
	lea	ecx, DWORD PTR _prop$73002[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=
$LN7@GetPropert@2:
	jmp	SHORT $LN18@GetPropert@2
$LN6@GetPropert@2:
; Line 354
	mov	edx, DWORD PTR _item$73003[ebp]
	movzx	eax, BYTE PTR [edx+72]
	test	eax, eax
	je	SHORT $LN5@GetPropert@2
	mov	ecx, DWORD PTR _item$73003[ebp]
	add	ecx, 40					; 00000028H
	push	ecx
	lea	ecx, DWORD PTR _prop$73002[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABU_FILETIME@@@Z ; NWindows::NCOM::CPropVariant::operator=
$LN5@GetPropert@2:
	jmp	SHORT $LN18@GetPropert@2
$LN4@GetPropert@2:
; Line 355
	mov	ecx, DWORD PTR _item$73003[ebp]
	add	ecx, 48					; 00000030H
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	mov	BYTE PTR tv192[ebp], al
	movzx	edx, BYTE PTR tv192[ebp]
	test	edx, edx
	jne	SHORT $LN3@GetPropert@2
	mov	eax, DWORD PTR _item$73003[ebp]
	add	eax, 48					; 00000030H
	push	eax
	lea	ecx, DWORD PTR _prop$73002[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABVUString@@@Z ; NWindows::NCOM::CPropVariant::operator=
$LN3@GetPropert@2:
	jmp	SHORT $LN18@GetPropert@2
$LN2@GetPropert@2:
; Line 356
	mov	ecx, DWORD PTR _item$73003[ebp]
	add	ecx, 60					; 0000003cH
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	mov	BYTE PTR tv193[ebp], al
	movzx	ecx, BYTE PTR tv193[ebp]
	test	ecx, ecx
	jne	SHORT $LN18@GetPropert@2
	mov	edx, DWORD PTR _item$73003[ebp]
	add	edx, 60					; 0000003cH
	push	edx
	lea	ecx, DWORD PTR _prop$73002[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABVUString@@@Z ; NWindows::NCOM::CPropVariant::operator=
$LN18@GetPropert@2:
; Line 358
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	lea	ecx, DWORD PTR _prop$73002[ebp]
	call	?Detach@CPropVariant@NCOM@NWindows@@QAEJPAUtagPROPVARIANT@@@Z ; NWindows::NCOM::CPropVariant::Detach
; Line 359
	mov	DWORD PTR $T77281[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _prop$73002[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T77281[ebp]
	jmp	SHORT $LN21@GetPropert@2
__catch$?GetProperty@CHandler@NParser@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$0:
; Line 360
	mov	DWORD PTR $T77282[ebp], -2147024882	; 8007000eH
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN28@GetPropert@2
	ret	0
	mov	eax, __tryend$?GetProperty@CHandler@NParser@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$1
	ret	0
__tryend$?GetProperty@CHandler@NParser@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$1:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN21@GetPropert@2
$LN28@GetPropert@2:
	mov	eax, DWORD PTR $T77282[ebp]
$LN21@GetPropert@2:
; Line 361
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN36@GetPropert@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 168				; 000000a8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	3
$LN36@GetPropert@2:
	DD	3
	DD	$LN35@GetPropert@2
$LN35@GetPropert@2:
	DD	-40					; ffffffd8H
	DD	16					; 00000010H
	DD	$LN31@GetPropert@2
	DD	-116					; ffffff8cH
	DD	64					; 00000040H
	DD	$LN32@GetPropert@2
	DD	-136					; ffffff78H
	DD	12					; 0000000cH
	DD	$LN33@GetPropert@2
$LN33@GetPropert@2:
	DB	115					; 00000073H
	DB	0
$LN32@GetPropert@2:
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	0
$LN31@GetPropert@2:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
	npad	2
$LN37@GetPropert@2:
	DD	$LN17@GetPropert@2
	DD	$LN14@GetPropert@2
	DD	$LN6@GetPropert@2
	DD	$LN2@GetPropert@2
	DD	$LN4@GetPropert@2
	DD	$LN8@GetPropert@2
	DD	$LN10@GetPropert@2
	DD	$LN13@GetPropert@2
	DD	$LN12@GetPropert@2
	DD	$LN18@GetPropert@2
$LN30@GetPropert@2:
	DB	0
	DB	9
	DB	9
	DB	9
	DB	1
	DB	1
	DB	9
	DB	9
	DB	9
	DB	2
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	3
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	4
	DB	9
	DB	9
	DB	5
	DB	6
	DB	9
	DB	9
	DB	9
	DB	7
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?GetProperty@CHandler@NParser@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$2:
	lea	ecx, DWORD PTR _prop$73002[ebp]
	jmp	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
__unwindfunclet$?GetProperty@CHandler@NParser@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$3:
	lea	ecx, DWORD PTR _s$73010[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$?GetProperty@CHandler@NParser@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-172]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetProperty@CHandler@NParser@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetProperty@CHandler@NParser@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z ENDP ; NArchive::NParser::CHandler::GetProperty
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsEmpty@UString@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@UString@@QBE_NXZ PROC				; UString::IsEmpty, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 473
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+4], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@UString@@QBE_NXZ ENDP				; UString::IsEmpty
_TEXT	ENDS
EXTRN	?Grow_1@UString@@AAEXXZ:PROC			; UString::Grow_1
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??YUString@@QAEAAV0@_W@Z
_TEXT	SEGMENT
_chars$ = -12						; size = 4
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_c$ = 8							; size = 2
??YUString@@QAEAAV0@_W@Z PROC				; UString::operator+=, COMDAT
; _this$ = ecx
; Line 515
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 516
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+4]
	jne	SHORT $LN1@operator
; Line 517
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Grow_1@UString@@AAEXXZ			; UString::Grow_1
$LN1@operator:
; Line 518
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _len$[ebp], ecx
; Line 519
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _chars$[ebp], eax
; Line 520
	mov	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _chars$[ebp]
	mov	ax, WORD PTR _c$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
	mov	ecx, DWORD PTR _len$[ebp]
	add	ecx, 1
	mov	DWORD PTR _len$[ebp], ecx
; Line 521
	xor	edx, edx
	mov	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _chars$[ebp]
	mov	WORD PTR [ecx+eax*2], dx
; Line 522
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 523
	mov	eax, DWORD PTR _this$[ebp]
; Line 524
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??YUString@@QAEAAV0@_W@Z ENDP				; UString::operator+=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CPropVariant@NCOM@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CPropVariant@NCOM@NWindows@@QAE@XZ PROC		; NWindows::NCOM::CPropVariant::CPropVariant, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\propvariant.h
; Line 47
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 49
	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx], ax
; Line 50
	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+2], dx
; Line 54
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
; Line 55
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CPropVariant@NCOM@NWindows@@QAE@XZ ENDP		; NWindows::NCOM::CPropVariant::CPropVariant
_TEXT	ENDS
EXTRN	?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ:PROC	; NWindows::NCOM::CPropVariant::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CPropVariant@NCOM@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CPropVariant@NCOM@NWindows@@QAE@XZ PROC		; NWindows::NCOM::CPropVariant::~CPropVariant, COMDAT
; _this$ = ecx
; Line 56
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ ; NWindows::NCOM::CPropVariant::Clear
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CPropVariant@NCOM@NWindows@@QAE@XZ ENDP		; NWindows::NCOM::CPropVariant::~CPropVariant
_TEXT	ENDS
PUBLIC	?ReleaseStream@CLimitedSequentialOutStream@@QAEXXZ ; CLimitedSequentialOutStream::ReleaseStream
PUBLIC	?GetRem@CLimitedSequentialOutStream@@QBE_KXZ	; CLimitedSequentialOutStream::GetRem
PUBLIC	??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
PUBLIC	??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *
PUBLIC	??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator->
PUBLIC	?Init@CLimitedSequentialInStream@@QAEX_K@Z	; CLimitedSequentialInStream::Init
PUBLIC	??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->
PUBLIC	?Init@CLimitedSequentialOutStream@@QAEX_K_N@Z	; CLimitedSequentialOutStream::Init
PUBLIC	?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ; CMyComPtr<ISequentialOutStream>::Release
PUBLIC	?SetStream@CLimitedSequentialOutStream@@QAEXPAUISequentialOutStream@@@Z ; CLimitedSequentialOutStream::SetStream
PUBLIC	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
PUBLIC	??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ	; CMyComPtr<ISequentialOutStream>::operator!
PUBLIC	??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator&
PUBLIC	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ	; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
PUBLIC	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ	; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
PUBLIC	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ	; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
PUBLIC	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ	; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
PUBLIC	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ	; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
PUBLIC	??0?$CMyComPtr@UICompressCoder@@@@QAE@PAUICompressCoder@@@Z ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>
PUBLIC	??0CCopyCoder@NCompress@@QAE@XZ			; NCompress::CCopyCoder::CCopyCoder
PUBLIC	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
PUBLIC	??0CLimitedSequentialOutStream@@QAE@XZ		; CLimitedSequentialOutStream::CLimitedSequentialOutStream
PUBLIC	?SetStream@CLimitedSequentialInStream@@QAEXPAUISequentialInStream@@@Z ; CLimitedSequentialInStream::SetStream
PUBLIC	??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
PUBLIC	??0CLimitedSequentialInStream@@QAE@XZ		; CLimitedSequentialInStream::CLimitedSequentialInStream
PUBLIC	??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>
PUBLIC	??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *
PUBLIC	?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z ; NArchive::NParser::CHandler::Extract
EXTRN	?SetCur@CLocalProgress@@QAEJXZ:PROC		; CLocalProgress::SetCur
EXTRN	?Init@CLocalProgress@@QAEXPAUIProgress@@_N@Z:PROC ; CLocalProgress::Init
EXTRN	??0CLocalProgress@@QAE@XZ:PROC			; CLocalProgress::CLocalProgress
EXTRN	??2@YAPAXI@Z:PROC				; operator new
xdata$x	SEGMENT
__catchsym$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$11 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$0
__tryblocktable$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z DD 00H
	DD	09H
	DD	0aH
	DD	01H
	DD	FLAT:__catchsym$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$11
__ehfuncinfo$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z DD 019930522H
	DD	0bH
	DD	FLAT:__unwindtable$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$4
	DD	02H
	DD	FLAT:__unwindfunclet$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$5
	DD	04H
	DD	FLAT:__unwindfunclet$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$6
	DD	04H
	DD	FLAT:__unwindfunclet$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$7
	DD	06H
	DD	FLAT:__unwindfunclet$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$8
	DD	06H
	DD	FLAT:__unwindfunclet$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$9
	DD	08H
	DD	FLAT:__unwindfunclet$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$10
	DD	0ffffffffH
	DD	00H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv408 = -384						; size = 4
tv407 = -380						; size = 8
tv406 = -372						; size = 4
tv405 = -368						; size = 4
tv404 = -364						; size = 4
tv403 = -360						; size = 4
tv310 = -356						; size = 4
tv402 = -352						; size = 4
tv401 = -348						; size = 4
tv297 = -344						; size = 4
tv400 = -340						; size = 4
tv291 = -336						; size = 8
tv399 = -328						; size = 4
tv398 = -324						; size = 4
tv397 = -317						; size = 1
tv396 = -316						; size = 4
tv395 = -312						; size = 4
tv394 = -308						; size = 4
tv222 = -304						; size = 4
tv393 = -300						; size = 4
tv199 = -296						; size = 4
tv198 = -292						; size = 4
tv392 = -288						; size = 4
tv184 = -284						; size = 4
tv183 = -280						; size = 4
tv390 = -276						; size = 4
tv388 = -272						; size = 4
tv160 = -268						; size = 4
tv159 = -264						; size = 4
tv387 = -260						; size = 4
tv138 = -256						; size = 4
tv137 = -252						; size = 4
tv385 = -248						; size = 4
tv383 = -244						; size = 4
tv382 = -240						; size = 4
tv86 = -236						; size = 4
tv381 = -232						; size = 4
tv380 = -228						; size = 4
$T77341 = -224						; size = 4
$T77340 = -220						; size = 4
$T77339 = -216						; size = 4
$T77338 = -212						; size = 4
$T77337 = -208						; size = 4
$T77334 = -204						; size = 4
$T77333 = -200						; size = 4
$T77330 = -196						; size = 4
$T77327 = -192						; size = 4
$T77326 = -188						; size = 4
$T77323 = -184						; size = 4
$T77322 = -180						; size = 4
$T77319 = -176						; size = 4
$T77318 = -172						; size = 4
$T77315 = -168						; size = 4
$T77314 = -164						; size = 4
___result__$73142 = -160				; size = 4
___result__$73138 = -156				; size = 4
___result__$73135 = -152				; size = 4
_opRes$73134 = -148					; size = 4
___result__$73131 = -144				; size = 4
_skipMode$73129 = -137					; size = 1
_unpackSize$73128 = -136				; size = 8
___result__$73125 = -128				; size = 4
_item$73124 = -124					; size = 4
_index$73123 = -120					; size = 4
_askMode$73122 = -116					; size = 4
_realOutStream$73121 = -108				; size = 4
___result__$73117 = -100				; size = 4
_copyCoder$73113 = -92					; size = 4
_copyCoderSpec$73071 = -84				; size = 4
_outStream$73070 = -76					; size = 4
_outStreamSpec$73064 = -68				; size = 4
_inStream$73063 = -60					; size = 4
_streamSpec$73057 = -52					; size = 4
_progress$73056 = -44					; size = 4
_lps$73050 = -36					; size = 4
_i$73046 = -32						; size = 4
_totalSize$73045 = -28					; size = 8
_allFilesMode$73039 = -17				; size = 1
__$EHRec$ = -16						; size = 16
_this$ = 8						; size = 4
_indices$ = 12						; size = 4
_numItems$ = 16						; size = 4
_testMode$ = 20						; size = 4
_extractCallback$ = 24					; size = 4
?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z PROC ; NArchive::NParser::CHandler::Extract
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\openarchive.cpp
; Line 365
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 368				; 00000170H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-384]
	mov	ecx, 92					; 0000005cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
; Line 366
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 368
	xor	eax, eax
	cmp	DWORD PTR _numItems$[ebp], -1
	sete	al
	mov	BYTE PTR _allFilesMode$73039[ebp], al
; Line 369
	movzx	ecx, BYTE PTR _allFilesMode$73039[ebp]
	test	ecx, ecx
	je	SHORT $LN16@Extract
; Line 370
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Size@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NParser::CParseItem>::Size
	mov	DWORD PTR tv380[ebp], eax
	mov	edx, DWORD PTR tv380[ebp]
	mov	DWORD PTR _numItems$[ebp], edx
$LN16@Extract:
; Line 371
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *
	mov	DWORD PTR tv381[ebp], eax
	cmp	DWORD PTR tv381[ebp], 0
	je	SHORT $LN15@Extract
	cmp	DWORD PTR _numItems$[ebp], 0
	jne	SHORT $LN15@Extract
; Line 372
	xor	eax, eax
	jmp	$LN18@Extract
$LN15@Extract:
; Line 373
	mov	DWORD PTR _totalSize$73045[ebp], 0
	mov	DWORD PTR _totalSize$73045[ebp+4], 0
; Line 375
	mov	DWORD PTR _i$73046[ebp], 0
	jmp	SHORT $LN14@Extract
$LN13@Extract:
	mov	eax, DWORD PTR _i$73046[ebp]
	add	eax, 1
	mov	DWORD PTR _i$73046[ebp], eax
$LN14@Extract:
	mov	ecx, DWORD PTR _i$73046[ebp]
	cmp	ecx, DWORD PTR _numItems$[ebp]
	jae	SHORT $LN12@Extract
; Line 376
	movzx	edx, BYTE PTR _allFilesMode$73039[ebp]
	test	edx, edx
	je	SHORT $LN20@Extract
	mov	eax, DWORD PTR _i$73046[ebp]
	mov	DWORD PTR tv86[ebp], eax
	jmp	SHORT $LN21@Extract
$LN20@Extract:
	mov	ecx, DWORD PTR _i$73046[ebp]
	mov	edx, DWORD PTR _indices$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR tv86[ebp], eax
$LN21@Extract:
	mov	ecx, DWORD PTR tv86[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEAAUCParseItem@NParser@NArchive@@I@Z ; CObjectVector<NArchive::NParser::CParseItem>::operator[]
	mov	DWORD PTR tv382[ebp], eax
	mov	edx, DWORD PTR tv382[ebp]
	mov	eax, DWORD PTR _totalSize$73045[ebp]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _totalSize$73045[ebp+4]
	adc	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR _totalSize$73045[ebp], eax
	mov	DWORD PTR _totalSize$73045[ebp+4], ecx
	jmp	SHORT $LN13@Extract
$LN12@Extract:
; Line 377
	mov	esi, esp
	mov	edx, DWORD PTR _totalSize$73045[ebp+4]
	push	edx
	mov	eax, DWORD PTR _totalSize$73045[ebp]
	push	eax
	mov	ecx, DWORD PTR _extractCallback$[ebp]
	push	ecx
	mov	edx, DWORD PTR _extractCallback$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 379
	mov	DWORD PTR _totalSize$73045[ebp], 0
	mov	DWORD PTR _totalSize$73045[ebp+4], 0
; Line 381
	push	56					; 00000038H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR tv383[ebp], eax
	mov	edx, DWORD PTR tv383[ebp]
	mov	DWORD PTR $T77315[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	cmp	DWORD PTR $T77315[ebp], 0
	je	SHORT $LN22@Extract
	mov	ecx, DWORD PTR $T77315[ebp]
	call	??0CLocalProgress@@QAE@XZ		; CLocalProgress::CLocalProgress
	mov	DWORD PTR tv385[ebp], eax
	mov	eax, DWORD PTR tv385[ebp]
	mov	DWORD PTR tv137[ebp], eax
	jmp	SHORT $LN23@Extract
$LN22@Extract:
	mov	DWORD PTR tv137[ebp], 0
$LN23@Extract:
	mov	ecx, DWORD PTR tv137[ebp]
	mov	DWORD PTR $T77314[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	mov	edx, DWORD PTR $T77314[ebp]
	mov	DWORD PTR _lps$73050[ebp], edx
; Line 382
	mov	eax, DWORD PTR _lps$73050[ebp]
	push	eax
	lea	ecx, DWORD PTR _progress$73056[ebp]
	call	??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+12], 2
; Line 383
	push	0
	mov	ecx, DWORD PTR _extractCallback$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _lps$73050[ebp]
	call	?Init@CLocalProgress@@QAEXPAUIProgress@@_N@Z ; CLocalProgress::Init
; Line 385
	push	40					; 00000028H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR tv138[ebp], eax
	mov	edx, DWORD PTR tv138[ebp]
	mov	DWORD PTR $T77319[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	cmp	DWORD PTR $T77319[ebp], 0
	je	SHORT $LN24@Extract
	mov	ecx, DWORD PTR $T77319[ebp]
	call	??0CLimitedSequentialInStream@@QAE@XZ
	mov	DWORD PTR tv387[ebp], eax
	mov	eax, DWORD PTR tv387[ebp]
	mov	DWORD PTR tv159[ebp], eax
	jmp	SHORT $LN25@Extract
$LN24@Extract:
	mov	DWORD PTR tv159[ebp], 0
$LN25@Extract:
	mov	ecx, DWORD PTR tv159[ebp]
	mov	DWORD PTR $T77318[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	mov	edx, DWORD PTR $T77318[ebp]
	mov	DWORD PTR _streamSpec$73057[ebp], edx
; Line 386
	mov	eax, DWORD PTR _streamSpec$73057[ebp]
	push	eax
	lea	ecx, DWORD PTR _inStream$73063[ebp]
	call	??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 4
; Line 387
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *
	mov	DWORD PTR tv160[ebp], eax
	mov	ecx, DWORD PTR tv160[ebp]
	push	ecx
	mov	ecx, DWORD PTR _streamSpec$73057[ebp]
	call	?SetStream@CLimitedSequentialInStream@@QAEXPAUISequentialInStream@@@Z ; CLimitedSequentialInStream::SetStream
; Line 389
	push	32					; 00000020H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR tv388[ebp], eax
	mov	edx, DWORD PTR tv388[ebp]
	mov	DWORD PTR $T77323[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 5
	cmp	DWORD PTR $T77323[ebp], 0
	je	SHORT $LN26@Extract
	mov	ecx, DWORD PTR $T77323[ebp]
	call	??0CLimitedSequentialOutStream@@QAE@XZ
	mov	DWORD PTR tv390[ebp], eax
	mov	eax, DWORD PTR tv390[ebp]
	mov	DWORD PTR tv183[ebp], eax
	jmp	SHORT $LN27@Extract
$LN26@Extract:
	mov	DWORD PTR tv183[ebp], 0
$LN27@Extract:
	mov	ecx, DWORD PTR tv183[ebp]
	mov	DWORD PTR $T77322[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	mov	edx, DWORD PTR $T77322[ebp]
	mov	DWORD PTR _outStreamSpec$73064[ebp], edx
; Line 390
	mov	eax, DWORD PTR _outStreamSpec$73064[ebp]
	push	eax
	lea	ecx, DWORD PTR _outStream$73070[ebp]
	call	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 6
; Line 392
	push	40					; 00000028H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR tv184[ebp], eax
	mov	ecx, DWORD PTR tv184[ebp]
	mov	DWORD PTR $T77327[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 7
	cmp	DWORD PTR $T77327[ebp], 0
	je	SHORT $LN28@Extract
	mov	ecx, DWORD PTR $T77327[ebp]
	call	??0CCopyCoder@NCompress@@QAE@XZ		; NCompress::CCopyCoder::CCopyCoder
	mov	DWORD PTR tv392[ebp], eax
	mov	edx, DWORD PTR tv392[ebp]
	mov	DWORD PTR tv198[ebp], edx
	jmp	SHORT $LN29@Extract
$LN28@Extract:
	mov	DWORD PTR tv198[ebp], 0
$LN29@Extract:
	mov	eax, DWORD PTR tv198[ebp]
	mov	DWORD PTR $T77326[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 6
	mov	ecx, DWORD PTR $T77326[ebp]
	mov	DWORD PTR _copyCoderSpec$73071[ebp], ecx
; Line 393
	mov	edx, DWORD PTR _copyCoderSpec$73071[ebp]
	push	edx
	lea	ecx, DWORD PTR _copyCoder$73113[ebp]
	call	??0?$CMyComPtr@UICompressCoder@@@@QAE@PAUICompressCoder@@@Z ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>
	mov	BYTE PTR __$EHRec$[ebp+12], 8
; Line 395
	mov	DWORD PTR _i$73046[ebp], 0
	jmp	SHORT $LN11@Extract
$LN10@Extract:
	mov	eax, DWORD PTR _i$73046[ebp]
	add	eax, 1
	mov	DWORD PTR _i$73046[ebp], eax
$LN11@Extract:
	mov	ecx, DWORD PTR _i$73046[ebp]
	cmp	ecx, DWORD PTR _numItems$[ebp]
	jae	$LN9@Extract
; Line 397
	mov	edx, DWORD PTR _lps$73050[ebp]
	mov	eax, DWORD PTR _totalSize$73045[ebp]
	mov	DWORD PTR [edx+32], eax
	mov	ecx, DWORD PTR _totalSize$73045[ebp+4]
	mov	DWORD PTR [edx+36], ecx
; Line 398
	mov	edx, DWORD PTR _lps$73050[ebp]
	mov	eax, DWORD PTR _totalSize$73045[ebp]
	mov	DWORD PTR [edx+40], eax
	mov	ecx, DWORD PTR _totalSize$73045[ebp+4]
	mov	DWORD PTR [edx+44], ecx
; Line 399
	mov	ecx, DWORD PTR _lps$73050[ebp]
	call	?SetCur@CLocalProgress@@QAEJXZ		; CLocalProgress::SetCur
	mov	DWORD PTR tv199[ebp], eax
	mov	edx, DWORD PTR tv199[ebp]
	mov	DWORD PTR ___result__$73117[ebp], edx
	cmp	DWORD PTR ___result__$73117[ebp], 0
	je	SHORT $LN8@Extract
	mov	eax, DWORD PTR ___result__$73117[ebp]
	mov	DWORD PTR $T77330[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 6
	lea	ecx, DWORD PTR _copyCoder$73113[ebp]
	call	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _outStream$73070[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _inStream$73063[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _progress$73056[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	eax, DWORD PTR $T77330[ebp]
	jmp	$LN18@Extract
$LN8@Extract:
; Line 400
	lea	ecx, DWORD PTR _realOutStream$73121[ebp]
	call	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
	mov	DWORD PTR tv393[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 9
; Line 403
	xor	ecx, ecx
	cmp	DWORD PTR _testMode$[ebp], 0
	setne	cl
	mov	DWORD PTR _askMode$73122[ebp], ecx
; Line 404
	movzx	edx, BYTE PTR _allFilesMode$73039[ebp]
	test	edx, edx
	je	SHORT $LN30@Extract
	mov	eax, DWORD PTR _i$73046[ebp]
	mov	DWORD PTR tv222[ebp], eax
	jmp	SHORT $LN31@Extract
$LN30@Extract:
	mov	ecx, DWORD PTR _i$73046[ebp]
	mov	edx, DWORD PTR _indices$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR tv222[ebp], eax
$LN31@Extract:
	mov	ecx, DWORD PTR tv222[ebp]
	mov	DWORD PTR _index$73123[ebp], ecx
; Line 405
	mov	edx, DWORD PTR _index$73123[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEAAUCParseItem@NParser@NArchive@@I@Z ; CObjectVector<NArchive::NParser::CParseItem>::operator[]
	mov	DWORD PTR tv394[ebp], eax
	mov	eax, DWORD PTR tv394[ebp]
	mov	DWORD PTR _item$73124[ebp], eax
; Line 407
	lea	ecx, DWORD PTR _realOutStream$73121[ebp]
	call	??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator&
	mov	DWORD PTR tv395[ebp], eax
	mov	esi, esp
	mov	ecx, DWORD PTR _askMode$73122[ebp]
	push	ecx
	mov	edx, DWORD PTR tv395[ebp]
	push	edx
	mov	eax, DWORD PTR _index$73123[ebp]
	push	eax
	mov	ecx, DWORD PTR _extractCallback$[ebp]
	push	ecx
	mov	edx, DWORD PTR _extractCallback$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv396[ebp], eax
	mov	edx, DWORD PTR tv396[ebp]
	mov	DWORD PTR ___result__$73125[ebp], edx
	cmp	DWORD PTR ___result__$73125[ebp], 0
	je	SHORT $LN7@Extract
	mov	eax, DWORD PTR ___result__$73125[ebp]
	mov	DWORD PTR $T77333[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 8
	lea	ecx, DWORD PTR _realOutStream$73121[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 6
	lea	ecx, DWORD PTR _copyCoder$73113[ebp]
	call	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _outStream$73070[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _inStream$73063[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _progress$73056[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	eax, DWORD PTR $T77333[ebp]
	jmp	$LN18@Extract
$LN7@Extract:
; Line 408
	mov	ecx, DWORD PTR _item$73124[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _unpackSize$73128[ebp], edx
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _unpackSize$73128[ebp+4], eax
; Line 409
	mov	ecx, DWORD PTR _totalSize$73045[ebp]
	add	ecx, DWORD PTR _unpackSize$73128[ebp]
	mov	edx, DWORD PTR _totalSize$73045[ebp+4]
	adc	edx, DWORD PTR _unpackSize$73128[ebp+4]
	mov	DWORD PTR _totalSize$73045[ebp], ecx
	mov	DWORD PTR _totalSize$73045[ebp+4], edx
; Line 410
	mov	BYTE PTR _skipMode$73129[ebp], 0
; Line 411
	cmp	DWORD PTR _testMode$[ebp], 0
	jne	SHORT $LN6@Extract
	lea	ecx, DWORD PTR _realOutStream$73121[ebp]
	call	??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ ; CMyComPtr<ISequentialOutStream>::operator!
	mov	BYTE PTR tv397[ebp], al
	movzx	eax, BYTE PTR tv397[ebp]
	test	eax, eax
	je	SHORT $LN6@Extract
; Line 412
	mov	BYTE PTR __$EHRec$[ebp+12], 8
	lea	ecx, DWORD PTR _realOutStream$73121[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	jmp	$LN10@Extract
$LN6@Extract:
; Line 413
	mov	esi, esp
	mov	ecx, DWORD PTR _askMode$73122[ebp]
	push	ecx
	mov	edx, DWORD PTR _extractCallback$[ebp]
	push	edx
	mov	eax, DWORD PTR _extractCallback$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv398[ebp], eax
	mov	eax, DWORD PTR tv398[ebp]
	mov	DWORD PTR ___result__$73131[ebp], eax
	cmp	DWORD PTR ___result__$73131[ebp], 0
	je	SHORT $LN5@Extract
	mov	ecx, DWORD PTR ___result__$73131[ebp]
	mov	DWORD PTR $T77334[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 8
	lea	ecx, DWORD PTR _realOutStream$73121[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 6
	lea	ecx, DWORD PTR _copyCoder$73113[ebp]
	call	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _outStream$73070[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _inStream$73063[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _progress$73056[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	eax, DWORD PTR $T77334[ebp]
	jmp	$LN18@Extract
$LN5@Extract:
; Line 415
	lea	ecx, DWORD PTR _realOutStream$73121[ebp]
	call	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
	mov	DWORD PTR tv399[ebp], eax
	mov	edx, DWORD PTR tv399[ebp]
	push	edx
	mov	ecx, DWORD PTR _outStreamSpec$73064[ebp]
	call	?SetStream@CLimitedSequentialOutStream@@QAEXPAUISequentialOutStream@@@Z ; CLimitedSequentialOutStream::SetStream
; Line 416
	lea	ecx, DWORD PTR _realOutStream$73121[ebp]
	call	?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ; CMyComPtr<ISequentialOutStream>::Release
; Line 417
	movzx	eax, BYTE PTR _skipMode$73129[ebp]
	test	eax, eax
	je	SHORT $LN32@Extract
	mov	DWORD PTR tv291[ebp], 0
	mov	DWORD PTR tv291[ebp+4], 0
	jmp	SHORT $LN33@Extract
$LN32@Extract:
	mov	ecx, DWORD PTR _unpackSize$73128[ebp]
	mov	DWORD PTR tv291[ebp], ecx
	mov	edx, DWORD PTR _unpackSize$73128[ebp+4]
	mov	DWORD PTR tv291[ebp+4], edx
$LN33@Extract:
	push	1
	mov	eax, DWORD PTR tv291[ebp+4]
	push	eax
	mov	ecx, DWORD PTR tv291[ebp]
	push	ecx
	mov	ecx, DWORD PTR _outStreamSpec$73064[ebp]
	call	?Init@CLimitedSequentialOutStream@@QAEX_K_N@Z ; CLimitedSequentialOutStream::Init
; Line 419
	mov	DWORD PTR _opRes$73134[ebp], 0
; Line 420
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->
	mov	DWORD PTR tv400[ebp], eax
	mov	edx, DWORD PTR tv400[ebp]
	mov	DWORD PTR tv297[ebp], edx
	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR _item$73124[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR tv297[ebp]
	push	eax
	mov	ecx, DWORD PTR tv297[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv401[ebp], eax
	mov	ecx, DWORD PTR tv401[ebp]
	mov	DWORD PTR ___result__$73135[ebp], ecx
	cmp	DWORD PTR ___result__$73135[ebp], 0
	je	SHORT $LN4@Extract
	mov	edx, DWORD PTR ___result__$73135[ebp]
	mov	DWORD PTR $T77337[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 8
	lea	ecx, DWORD PTR _realOutStream$73121[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 6
	lea	ecx, DWORD PTR _copyCoder$73113[ebp]
	call	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _outStream$73070[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _inStream$73063[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _progress$73056[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	eax, DWORD PTR $T77337[ebp]
	jmp	$LN18@Extract
$LN4@Extract:
; Line 421
	mov	eax, DWORD PTR _unpackSize$73128[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _unpackSize$73128[ebp]
	push	ecx
	mov	ecx, DWORD PTR _streamSpec$73057[ebp]
	call	?Init@CLimitedSequentialInStream@@QAEX_K@Z ; CLimitedSequentialInStream::Init
; Line 422
	lea	ecx, DWORD PTR _copyCoder$73113[ebp]
	call	??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator->
	mov	DWORD PTR tv402[ebp], eax
	mov	edx, DWORD PTR tv402[ebp]
	mov	DWORD PTR tv310[ebp], edx
	lea	ecx, DWORD PTR _progress$73056[ebp]
	call	??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *
	mov	DWORD PTR tv403[ebp], eax
	lea	ecx, DWORD PTR _outStream$73070[ebp]
	call	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
	mov	DWORD PTR tv404[ebp], eax
	lea	ecx, DWORD PTR _inStream$73063[ebp]
	call	??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
	mov	DWORD PTR tv405[ebp], eax
	mov	esi, esp
	mov	eax, DWORD PTR tv403[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR tv404[ebp]
	push	ecx
	mov	edx, DWORD PTR tv405[ebp]
	push	edx
	mov	eax, DWORD PTR tv310[ebp]
	push	eax
	mov	ecx, DWORD PTR tv310[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv406[ebp], eax
	mov	ecx, DWORD PTR tv406[ebp]
	mov	DWORD PTR ___result__$73138[ebp], ecx
	cmp	DWORD PTR ___result__$73138[ebp], 0
	je	SHORT $LN3@Extract
	mov	edx, DWORD PTR ___result__$73138[ebp]
	mov	DWORD PTR $T77338[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 8
	lea	ecx, DWORD PTR _realOutStream$73121[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 6
	lea	ecx, DWORD PTR _copyCoder$73113[ebp]
	call	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _outStream$73070[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _inStream$73063[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _progress$73056[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	eax, DWORD PTR $T77338[ebp]
	jmp	$LN18@Extract
$LN3@Extract:
; Line 424
	mov	ecx, DWORD PTR _outStreamSpec$73064[ebp]
	call	?GetRem@CLimitedSequentialOutStream@@QBE_KXZ ; CLimitedSequentialOutStream::GetRem
	mov	DWORD PTR tv407[ebp], eax
	mov	DWORD PTR tv407[ebp+4], edx
	mov	eax, DWORD PTR tv407[ebp]
	or	eax, DWORD PTR tv407[ebp+4]
	je	SHORT $LN2@Extract
; Line 425
	mov	DWORD PTR _opRes$73134[ebp], 2
$LN2@Extract:
; Line 426
	mov	ecx, DWORD PTR _outStreamSpec$73064[ebp]
	call	?ReleaseStream@CLimitedSequentialOutStream@@QAEXXZ ; CLimitedSequentialOutStream::ReleaseStream
; Line 427
	mov	esi, esp
	mov	ecx, DWORD PTR _opRes$73134[ebp]
	push	ecx
	mov	edx, DWORD PTR _extractCallback$[ebp]
	push	edx
	mov	eax, DWORD PTR _extractCallback$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv408[ebp], eax
	mov	eax, DWORD PTR tv408[ebp]
	mov	DWORD PTR ___result__$73142[ebp], eax
	cmp	DWORD PTR ___result__$73142[ebp], 0
	je	SHORT $LN1@Extract
	mov	ecx, DWORD PTR ___result__$73142[ebp]
	mov	DWORD PTR $T77339[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 8
	lea	ecx, DWORD PTR _realOutStream$73121[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 6
	lea	ecx, DWORD PTR _copyCoder$73113[ebp]
	call	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _outStream$73070[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _inStream$73063[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _progress$73056[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	eax, DWORD PTR $T77339[ebp]
	jmp	SHORT $LN18@Extract
$LN1@Extract:
; Line 428
	mov	BYTE PTR __$EHRec$[ebp+12], 8
	lea	ecx, DWORD PTR _realOutStream$73121[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	jmp	$LN10@Extract
$LN9@Extract:
; Line 430
	mov	DWORD PTR $T77340[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+12], 6
	lea	ecx, DWORD PTR _copyCoder$73113[ebp]
	call	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _outStream$73070[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _inStream$73063[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _progress$73056[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	eax, DWORD PTR $T77340[ebp]
	jmp	SHORT $LN18@Extract
__catch$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$0:
; Line 432
	mov	DWORD PTR $T77341[ebp], -2147024882	; 8007000eH
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN46@Extract
	ret	0
	mov	eax, __tryend$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$1
	ret	0
__tryend$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$1:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN18@Extract
$LN46@Extract:
	mov	eax, DWORD PTR $T77341[ebp]
$LN18@Extract:
; Line 433
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN55@Extract
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 384				; 00000180H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$LN55@Extract:
	DD	5
	DD	$LN54@Extract
$LN54@Extract:
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN48@Extract
	DD	-60					; ffffffc4H
	DD	4
	DD	$LN49@Extract
	DD	-76					; ffffffb4H
	DD	4
	DD	$LN50@Extract
	DD	-92					; ffffffa4H
	DD	4
	DD	$LN51@Extract
	DD	-108					; ffffff94H
	DD	4
	DD	$LN52@Extract
$LN52@Extract:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	79					; 0000004fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN51@Extract:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	121					; 00000079H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN50@Extract:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN49@Extract:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN48@Extract:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	103					; 00000067H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$2:
	mov	eax, DWORD PTR $T77315[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$3:
	lea	ecx, DWORD PTR _progress$73056[ebp]
	jmp	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
__unwindfunclet$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$4:
	mov	eax, DWORD PTR $T77319[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$5:
	lea	ecx, DWORD PTR _inStream$73063[ebp]
	jmp	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
__unwindfunclet$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$6:
	mov	eax, DWORD PTR $T77323[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$7:
	lea	ecx, DWORD PTR _outStream$73070[ebp]
	jmp	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
__unwindfunclet$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$8:
	mov	eax, DWORD PTR $T77327[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$9:
	lea	ecx, DWORD PTR _copyCoder$73113[ebp]
	jmp	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
__unwindfunclet$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$10:
	lea	ecx, DWORD PTR _realOutStream$73121[ebp]
	jmp	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
__ehhandler$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-388]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z ENDP ; NArchive::NParser::CHandler::Extract
PUBLIC	??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetStream@CLimitedSequentialInStream@@QAEXPAUISequentialInStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_stream$ = 8						; size = 4
?SetStream@CLimitedSequentialInStream@@QAEXPAUISequentialInStream@@@Z PROC ; CLimitedSequentialInStream::SetStream, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\limitedstreams.h
; Line 20
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetStream@CLimitedSequentialInStream@@QAEXPAUISequentialInStream@@@Z ENDP ; CLimitedSequentialInStream::SetStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Init@CLimitedSequentialInStream@@QAEX_K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_streamSize$ = 8					; size = 8
?Init@CLimitedSequentialInStream@@QAEX_K@Z PROC		; CLimitedSequentialInStream::Init, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 24
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _streamSize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR _streamSize$[ebp+4]
	mov	DWORD PTR [eax+20], edx
; Line 25
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0
	mov	DWORD PTR [eax+28], 0
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+32], 0
; Line 27
	mov	esp, ebp
	pop	ebp
	ret	8
?Init@CLimitedSequentialInStream@@QAEX_K@Z ENDP		; CLimitedSequentialInStream::Init
_TEXT	ENDS
PUBLIC	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetStream@CLimitedSequentialOutStream@@QAEXPAUISequentialOutStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_stream$ = 8						; size = 4
?SetStream@CLimitedSequentialOutStream@@QAEXPAUISequentialOutStream@@@Z PROC ; CLimitedSequentialOutStream::SetStream, COMDAT
; _this$ = ecx
; Line 147
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetStream@CLimitedSequentialOutStream@@QAEXPAUISequentialOutStream@@@Z ENDP ; CLimitedSequentialOutStream::SetStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReleaseStream@CLimitedSequentialOutStream@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ReleaseStream@CLimitedSequentialOutStream@@QAEXXZ PROC	; CLimitedSequentialOutStream::ReleaseStream, COMDAT
; _this$ = ecx
; Line 148
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ; CMyComPtr<ISequentialOutStream>::Release
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReleaseStream@CLimitedSequentialOutStream@@QAEXXZ ENDP	; CLimitedSequentialOutStream::ReleaseStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Init@CLimitedSequentialOutStream@@QAEX_K_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_size$ = 8						; size = 8
_overflowIsAllowed$ = 16				; size = 1
?Init@CLimitedSequentialOutStream@@QAEX_K_N@Z PROC	; CLimitedSequentialOutStream::Init, COMDAT
; _this$ = ecx
; Line 150
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 151
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR _size$[ebp+4]
	mov	DWORD PTR [eax+20], edx
; Line 152
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+24], 0
; Line 153
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR _overflowIsAllowed$[ebp]
	mov	BYTE PTR [ecx+25], dl
; Line 154
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Init@CLimitedSequentialOutStream@@QAEX_K_N@Z ENDP	; CLimitedSequentialOutStream::Init
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetRem@CLimitedSequentialOutStream@@QBE_KXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRem@CLimitedSequentialOutStream@@QBE_KXZ PROC	; CLimitedSequentialOutStream::GetRem, COMDAT
; _this$ = ecx
; Line 156
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+16]
	mov	edx, DWORD PTR [ecx+20]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRem@CLimitedSequentialOutStream@@QBE_KXZ ENDP	; CLimitedSequentialOutStream::GetRem
_TEXT	ENDS
PUBLIC	??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ	; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
PUBLIC	??_7CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ ; NCompress::CCopyCoder::`vftable'
PUBLIC	??_7CCopyCoder@NCompress@@6BISequentialInStream@@@ ; NCompress::CCopyCoder::`vftable'
PUBLIC	??_7CCopyCoder@NCompress@@6BICompressSetInStream@@@ ; NCompress::CCopyCoder::`vftable'
PUBLIC	??_7CCopyCoder@NCompress@@6BICompressCoder@@@	; NCompress::CCopyCoder::`vftable'
PUBLIC	??0CMyUnknownImp@@QAE@XZ			; CMyUnknownImp::CMyUnknownImp
PUBLIC	??0ICompressGetInStreamProcessedSize@@QAE@XZ	; ICompressGetInStreamProcessedSize::ICompressGetInStreamProcessedSize
PUBLIC	??0ISequentialInStream@@QAE@XZ			; ISequentialInStream::ISequentialInStream
PUBLIC	??0ICompressSetInStream@@QAE@XZ			; ICompressSetInStream::ICompressSetInStream
PUBLIC	??0ICompressCoder@@QAE@XZ			; ICompressCoder::ICompressCoder
PUBLIC	??_R4CCopyCoder@NCompress@@6BICompressCoder@@@	; NCompress::CCopyCoder::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCCopyCoder@NCompress@@@8		; NCompress::CCopyCoder `RTTI Type Descriptor'
PUBLIC	??_R3CCopyCoder@NCompress@@8			; NCompress::CCopyCoder::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCopyCoder@NCompress@@8			; NCompress::CCopyCoder::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCopyCoder@NCompress@@8		; NCompress::CCopyCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ICompressCoder@@8			; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUICompressCoder@@@8			; ICompressCoder `RTTI Type Descriptor'
PUBLIC	??_R3ICompressCoder@@8				; ICompressCoder::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ICompressCoder@@8				; ICompressCoder::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIUnknown@@@8				; IUnknown `RTTI Type Descriptor'
PUBLIC	??_R3IUnknown@@8				; IUnknown::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IUnknown@@8				; IUnknown::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EC@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
PUBLIC	??_R13?0A@EA@ICompressSetInStream@@8		; ICompressSetInStream::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AUICompressSetInStream@@@8		; ICompressSetInStream `RTTI Type Descriptor'
PUBLIC	??_R3ICompressSetInStream@@8			; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ICompressSetInStream@@8			; ICompressSetInStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ICompressSetInStream@@8		; ICompressSetInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EC@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
PUBLIC	??_R17?0A@EA@ISequentialInStream@@8		; ISequentialInStream::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	??_R0?AUISequentialInStream@@@8			; ISequentialInStream `RTTI Type Descriptor'
PUBLIC	??_R3ISequentialInStream@@8			; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ISequentialInStream@@8			; ISequentialInStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ISequentialInStream@@8		; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R17?0A@EC@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
PUBLIC	??_R1M@?0A@EA@ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (12,-1,0,64)'
PUBLIC	??_R0?AUICompressGetInStreamProcessedSize@@@8	; ICompressGetInStreamProcessedSize `RTTI Type Descriptor'
PUBLIC	??_R3ICompressGetInStreamProcessedSize@@8	; ICompressGetInStreamProcessedSize::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ICompressGetInStreamProcessedSize@@8	; ICompressGetInStreamProcessedSize::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1M@?0A@EC@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (12,-1,0,66)'
PUBLIC	??_R1BA@?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (16,-1,0,64)'
PUBLIC	??_R0?AVCMyUnknownImp@@@8			; CMyUnknownImp `RTTI Type Descriptor'
PUBLIC	??_R3CMyUnknownImp@@8				; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMyUnknownImp@@8				; CMyUnknownImp::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::CCopyCoder::QueryInterface
PUBLIC	?AddRef@CCopyCoder@NCompress@@UAGKXZ		; NCompress::CCopyCoder::AddRef
PUBLIC	?Release@CCopyCoder@NCompress@@UAGKXZ		; NCompress::CCopyCoder::Release
PUBLIC	??_R4CCopyCoder@NCompress@@6BICompressSetInStream@@@ ; NCompress::CCopyCoder::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{4}'
PUBLIC	?AddRef@CCopyCoder@NCompress@@W3AGKXZ		; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{4}'
PUBLIC	?Release@CCopyCoder@NCompress@@W3AGKXZ		; [thunk]:NCompress::CCopyCoder::Release`adjustor{4}'
PUBLIC	??_R4CCopyCoder@NCompress@@6BISequentialInStream@@@ ; NCompress::CCopyCoder::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{8}'
PUBLIC	?AddRef@CCopyCoder@NCompress@@W7AGKXZ		; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{8}'
PUBLIC	?Release@CCopyCoder@NCompress@@W7AGKXZ		; [thunk]:NCompress::CCopyCoder::Release`adjustor{8}'
PUBLIC	??_R4CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ ; NCompress::CCopyCoder::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{12}'
PUBLIC	?AddRef@CCopyCoder@NCompress@@WM@AGKXZ		; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{12}'
PUBLIC	?Release@CCopyCoder@NCompress@@WM@AGKXZ		; [thunk]:NCompress::CCopyCoder::Release`adjustor{12}'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?Code@CCopyCoder@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z:PROC ; NCompress::CCopyCoder::Code
EXTRN	?SetInStream@CCopyCoder@NCompress@@UAGJPAUISequentialInStream@@@Z:PROC ; NCompress::CCopyCoder::SetInStream
EXTRN	?ReleaseInStream@CCopyCoder@NCompress@@UAGJXZ:PROC ; NCompress::CCopyCoder::ReleaseInStream
EXTRN	?Read@CCopyCoder@NCompress@@UAGJPAXIPAI@Z:PROC	; NCompress::CCopyCoder::Read
EXTRN	?GetInStreamProcessedSize@CCopyCoder@NCompress@@UAGJPA_K@Z:PROC ; NCompress::CCopyCoder::GetInStreamProcessedSize
;	COMDAT ??_R4CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@
; File c:\workspace\7z1505-src\cpp\7zip\compress\copycoder.h
rdata$r	SEGMENT
??_R4CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ DD 00H ; NCompress::CCopyCoder::`RTTI Complete Object Locator'
	DD	0cH
	DD	00H
	DD	FLAT:??_R0?AVCCopyCoder@NCompress@@@8
	DD	FLAT:??_R3CCopyCoder@NCompress@@8
rdata$r	ENDS
;	COMDAT ??_R4CCopyCoder@NCompress@@6BISequentialInStream@@@
rdata$r	SEGMENT
??_R4CCopyCoder@NCompress@@6BISequentialInStream@@@ DD 00H ; NCompress::CCopyCoder::`RTTI Complete Object Locator'
	DD	08H
	DD	00H
	DD	FLAT:??_R0?AVCCopyCoder@NCompress@@@8
	DD	FLAT:??_R3CCopyCoder@NCompress@@8
rdata$r	ENDS
;	COMDAT ??_R4CCopyCoder@NCompress@@6BICompressSetInStream@@@
rdata$r	SEGMENT
??_R4CCopyCoder@NCompress@@6BICompressSetInStream@@@ DD 00H ; NCompress::CCopyCoder::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVCCopyCoder@NCompress@@@8
	DD	FLAT:??_R3CCopyCoder@NCompress@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R2CMyUnknownImp@@8
rdata$r	SEGMENT
??_R2CMyUnknownImp@@8 DD FLAT:??_R1A@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMyUnknownImp@@8
rdata$r	SEGMENT
??_R3CMyUnknownImp@@8 DD 00H				; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMyUnknownImp@@@8
_DATA	SEGMENT
??_R0?AVCMyUnknownImp@@@8 DD FLAT:??_7type_info@@6B@	; CMyUnknownImp `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMyUnknownImp@@', 00H
_DATA	ENDS
;	COMDAT ??_R1BA@?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R1BA@?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (16,-1,0,64)'
	DD	00H
	DD	010H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R1M@?0A@EC@IUnknown@@8
rdata$r	SEGMENT
??_R1M@?0A@EC@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (12,-1,0,66)'
	DD	00H
	DD	0cH
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8 DD FLAT:??_R0?AUICompressGetInStreamProcessedSize@@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICompressGetInStreamProcessedSize@@8
rdata$r	ENDS
;	COMDAT ??_R2ICompressGetInStreamProcessedSize@@8
rdata$r	SEGMENT
??_R2ICompressGetInStreamProcessedSize@@8 DD FLAT:??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ICompressGetInStreamProcessedSize@@8
rdata$r	SEGMENT
??_R3ICompressGetInStreamProcessedSize@@8 DD 00H	; ICompressGetInStreamProcessedSize::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ICompressGetInStreamProcessedSize@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUICompressGetInStreamProcessedSize@@@8
_DATA	SEGMENT
??_R0?AUICompressGetInStreamProcessedSize@@@8 DD FLAT:??_7type_info@@6B@ ; ICompressGetInStreamProcessedSize `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUICompressGetInStreamProcessedSize@@', 00H
_DATA	ENDS
;	COMDAT ??_R1M@?0A@EA@ICompressGetInStreamProcessedSize@@8
rdata$r	SEGMENT
??_R1M@?0A@EA@ICompressGetInStreamProcessedSize@@8 DD FLAT:??_R0?AUICompressGetInStreamProcessedSize@@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (12,-1,0,64)'
	DD	01H
	DD	0cH
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICompressGetInStreamProcessedSize@@8
rdata$r	ENDS
;	COMDAT ??_R17?0A@EC@IUnknown@@8
rdata$r	SEGMENT
??_R17?0A@EC@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ISequentialInStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ISequentialInStream@@8 DD FLAT:??_R0?AUISequentialInStream@@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ISequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_R2ISequentialInStream@@8
rdata$r	SEGMENT
??_R2ISequentialInStream@@8 DD FLAT:??_R1A@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ISequentialInStream@@8
rdata$r	SEGMENT
??_R3ISequentialInStream@@8 DD 00H			; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ISequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUISequentialInStream@@@8
_DATA	SEGMENT
??_R0?AUISequentialInStream@@@8 DD FLAT:??_7type_info@@6B@ ; ISequentialInStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUISequentialInStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R17?0A@EA@ISequentialInStream@@8
rdata$r	SEGMENT
??_R17?0A@EA@ISequentialInStream@@8 DD FLAT:??_R0?AUISequentialInStream@@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	01H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ISequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_R13?0A@EC@IUnknown@@8
rdata$r	SEGMENT
??_R13?0A@EC@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ICompressSetInStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ICompressSetInStream@@8 DD FLAT:??_R0?AUICompressSetInStream@@@8 ; ICompressSetInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICompressSetInStream@@8
rdata$r	ENDS
;	COMDAT ??_R2ICompressSetInStream@@8
rdata$r	SEGMENT
??_R2ICompressSetInStream@@8 DD FLAT:??_R1A@?0A@EA@ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ICompressSetInStream@@8
rdata$r	SEGMENT
??_R3ICompressSetInStream@@8 DD 00H			; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ICompressSetInStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUICompressSetInStream@@@8
_DATA	SEGMENT
??_R0?AUICompressSetInStream@@@8 DD FLAT:??_7type_info@@6B@ ; ICompressSetInStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUICompressSetInStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@ICompressSetInStream@@8
rdata$r	SEGMENT
??_R13?0A@EA@ICompressSetInStream@@8 DD FLAT:??_R0?AUICompressSetInStream@@@8 ; ICompressSetInStream::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	01H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICompressSetInStream@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EC@IUnknown@@8
rdata$r	SEGMENT
??_R1A@?0A@EC@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R2IUnknown@@8
rdata$r	SEGMENT
??_R2IUnknown@@8 DD FLAT:??_R1A@?0A@EA@IUnknown@@8	; IUnknown::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3IUnknown@@8
rdata$r	SEGMENT
??_R3IUnknown@@8 DD 00H					; IUnknown::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIUnknown@@@8
_DATA	SEGMENT
??_R0?AUIUnknown@@@8 DD FLAT:??_7type_info@@6B@		; IUnknown `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIUnknown@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IUnknown@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R2ICompressCoder@@8
rdata$r	SEGMENT
??_R2ICompressCoder@@8 DD FLAT:??_R1A@?0A@EA@ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ICompressCoder@@8
rdata$r	SEGMENT
??_R3ICompressCoder@@8 DD 00H				; ICompressCoder::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ICompressCoder@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUICompressCoder@@@8
_DATA	SEGMENT
??_R0?AUICompressCoder@@@8 DD FLAT:??_7type_info@@6B@	; ICompressCoder `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUICompressCoder@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ICompressCoder@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ICompressCoder@@8 DD FLAT:??_R0?AUICompressCoder@@@8 ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICompressCoder@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CCopyCoder@NCompress@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CCopyCoder@NCompress@@8 DD FLAT:??_R0?AVCCopyCoder@NCompress@@@8 ; NCompress::CCopyCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	09H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCopyCoder@NCompress@@8
rdata$r	ENDS
;	COMDAT ??_R2CCopyCoder@NCompress@@8
rdata$r	SEGMENT
??_R2CCopyCoder@NCompress@@8 DD FLAT:??_R1A@?0A@EA@CCopyCoder@NCompress@@8 ; NCompress::CCopyCoder::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ICompressCoder@@8
	DD	FLAT:??_R1A@?0A@EC@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@ICompressSetInStream@@8
	DD	FLAT:??_R13?0A@EC@IUnknown@@8
	DD	FLAT:??_R17?0A@EA@ISequentialInStream@@8
	DD	FLAT:??_R17?0A@EC@IUnknown@@8
	DD	FLAT:??_R1M@?0A@EA@ICompressGetInStreamProcessedSize@@8
	DD	FLAT:??_R1M@?0A@EC@IUnknown@@8
	DD	FLAT:??_R1BA@?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CCopyCoder@NCompress@@8
rdata$r	SEGMENT
??_R3CCopyCoder@NCompress@@8 DD 00H			; NCompress::CCopyCoder::`RTTI Class Hierarchy Descriptor'
	DD	05H
	DD	0aH
	DD	FLAT:??_R2CCopyCoder@NCompress@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCopyCoder@NCompress@@@8
_DATA	SEGMENT
??_R0?AVCCopyCoder@NCompress@@@8 DD FLAT:??_7type_info@@6B@ ; NCompress::CCopyCoder `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCopyCoder@NCompress@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CCopyCoder@NCompress@@6BICompressCoder@@@
rdata$r	SEGMENT
??_R4CCopyCoder@NCompress@@6BICompressCoder@@@ DD 00H	; NCompress::CCopyCoder::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCCopyCoder@NCompress@@@8
	DD	FLAT:??_R3CCopyCoder@NCompress@@8
rdata$r	ENDS
;	COMDAT ??_7CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@
CONST	SEGMENT
??_7CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ DD FLAT:??_R4CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ ; NCompress::CCopyCoder::`vftable'
	DD	FLAT:?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CCopyCoder@NCompress@@WM@AGKXZ
	DD	FLAT:?Release@CCopyCoder@NCompress@@WM@AGKXZ
	DD	FLAT:?GetInStreamProcessedSize@CCopyCoder@NCompress@@UAGJPA_K@Z
CONST	ENDS
;	COMDAT ??_7CCopyCoder@NCompress@@6BISequentialInStream@@@
CONST	SEGMENT
??_7CCopyCoder@NCompress@@6BISequentialInStream@@@ DD FLAT:??_R4CCopyCoder@NCompress@@6BISequentialInStream@@@ ; NCompress::CCopyCoder::`vftable'
	DD	FLAT:?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CCopyCoder@NCompress@@W7AGKXZ
	DD	FLAT:?Release@CCopyCoder@NCompress@@W7AGKXZ
	DD	FLAT:?Read@CCopyCoder@NCompress@@UAGJPAXIPAI@Z
CONST	ENDS
;	COMDAT ??_7CCopyCoder@NCompress@@6BICompressSetInStream@@@
CONST	SEGMENT
??_7CCopyCoder@NCompress@@6BICompressSetInStream@@@ DD FLAT:??_R4CCopyCoder@NCompress@@6BICompressSetInStream@@@ ; NCompress::CCopyCoder::`vftable'
	DD	FLAT:?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CCopyCoder@NCompress@@W3AGKXZ
	DD	FLAT:?Release@CCopyCoder@NCompress@@W3AGKXZ
	DD	FLAT:?SetInStream@CCopyCoder@NCompress@@UAGJPAUISequentialInStream@@@Z
	DD	FLAT:?ReleaseInStream@CCopyCoder@NCompress@@UAGJXZ
CONST	ENDS
;	COMDAT ??_7CCopyCoder@NCompress@@6BICompressCoder@@@
CONST	SEGMENT
??_7CCopyCoder@NCompress@@6BICompressCoder@@@ DD FLAT:??_R4CCopyCoder@NCompress@@6BICompressCoder@@@ ; NCompress::CCopyCoder::`vftable'
	DD	FLAT:?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CCopyCoder@NCompress@@UAGKXZ
	DD	FLAT:?Release@CCopyCoder@NCompress@@UAGKXZ
	DD	FLAT:?Code@CCopyCoder@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CCopyCoder@NCompress@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CCopyCoder@NCompress@@QAE@XZ PROC			; NCompress::CCopyCoder::CCopyCoder, COMDAT
; _this$ = ecx
; Line 24
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ICompressCoder@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0ICompressSetInStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0ISequentialInStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0ICompressGetInStreamProcessedSize@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CCopyCoder@NCompress@@6BICompressCoder@@@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], OFFSET ??_7CCopyCoder@NCompress@@6BICompressSetInStream@@@
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], OFFSET ??_7CCopyCoder@NCompress@@6BISequentialInStream@@@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], OFFSET ??_7CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+32], 0
	mov	DWORD PTR [edx+36], 0
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CCopyCoder@NCompress@@QAE@XZ ENDP			; NCompress::CCopyCoder::CCopyCoder
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CMyUnknownImp@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMyUnknownImp@@QAE@XZ PROC				; CMyUnknownImp::CMyUnknownImp, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 167
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CMyUnknownImp@@QAE@XZ ENDP				; CMyUnknownImp::CMyUnknownImp
_TEXT	ENDS
PUBLIC	_==@8
EXTRN	_IID_ICompressGetInStreamProcessedSize:BYTE
EXTRN	_IID_ISequentialInStream:BYTE
EXTRN	_IID_ICompressSetInStream:BYTE
EXTRN	_IID_ICompressCoder:BYTE
EXTRN	_IID_IUnknown:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
tv144 = -12						; size = 4
tv134 = -8						; size = 4
tv92 = -4						; size = 4
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z PROC ; NCompress::CCopyCoder::QueryInterface, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\compress\copycoder.h
; Line 31
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN10@QueryInter
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	$LN9@QueryInter
$LN10@QueryInter:
	push	OFFSET _IID_ICompressCoder
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN8@QueryInter
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	$LN9@QueryInter
$LN8@QueryInter:
	push	OFFSET _IID_ICompressSetInStream
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN6@QueryInter
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN13@QueryInter
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	mov	DWORD PTR tv92[ebp], edx
	jmp	SHORT $LN14@QueryInter
$LN13@QueryInter:
	mov	DWORD PTR tv92[ebp], 0
$LN14@QueryInter:
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	ecx, DWORD PTR tv92[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN9@QueryInter
$LN6@QueryInter:
	push	OFFSET _IID_ISequentialInStream
	mov	edx, DWORD PTR _iid$[ebp]
	push	edx
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@QueryInter
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN15@QueryInter
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	mov	DWORD PTR tv134[ebp], eax
	jmp	SHORT $LN16@QueryInter
$LN15@QueryInter:
	mov	DWORD PTR tv134[ebp], 0
$LN16@QueryInter:
	mov	ecx, DWORD PTR _outObject$[ebp]
	mov	edx, DWORD PTR tv134[ebp]
	mov	DWORD PTR [ecx], edx
	jmp	SHORT $LN9@QueryInter
$LN4@QueryInter:
	push	OFFSET _IID_ICompressGetInStreamProcessedSize
	mov	eax, DWORD PTR _iid$[ebp]
	push	eax
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN17@QueryInter
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR tv144[ebp], ecx
	jmp	SHORT $LN18@QueryInter
$LN17@QueryInter:
	mov	DWORD PTR tv144[ebp], 0
$LN18@QueryInter:
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR tv144[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN9@QueryInter
$LN2@QueryInter:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN11@QueryInter
$LN9@QueryInter:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], edx
	xor	eax, eax
$LN11@QueryInter:
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z ENDP ; NCompress::CCopyCoder::QueryInterface
_TEXT	ENDS
PUBLIC	_IsEqualGUID@8
; Function compile flags: /Odtp /RTCsu
;	COMDAT _==@8
_TEXT	SEGMENT
_guidOne$ = 8						; size = 4
_guidOther$ = 12					; size = 4
_==@8	PROC						; COMDAT
; File c:\program files (x86)\microsoft sdks\windows\v7.0a\include\guiddef.h
; Line 193
	push	ebp
	mov	ebp, esp
; Line 194
	mov	eax, DWORD PTR _guidOther$[ebp]
	push	eax
	mov	ecx, DWORD PTR _guidOne$[ebp]
	push	ecx
	call	_IsEqualGUID@8
; Line 195
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_==@8	ENDP
_TEXT	ENDS
EXTRN	_memcmp:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT _IsEqualGUID@8
_TEXT	SEGMENT
_rguid1$ = 8						; size = 4
_rguid2$ = 12						; size = 4
_IsEqualGUID@8 PROC					; COMDAT
; Line 160
	push	ebp
	mov	ebp, esp
; Line 161
	push	16					; 00000010H
	mov	eax, DWORD PTR _rguid2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rguid1$[ebp]
	push	ecx
	call	_memcmp
	add	esp, 12					; 0000000cH
	neg	eax
	sbb	eax, eax
	add	eax, 1
; Line 162
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_IsEqualGUID@8 ENDP
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CCopyCoder@NCompress@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CCopyCoder@NCompress@@UAGKXZ PROC		; NCompress::CCopyCoder::AddRef, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\compress\copycoder.h
; Line 31
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+16], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CCopyCoder@NCompress@@UAGKXZ ENDP		; NCompress::CCopyCoder::AddRef
_TEXT	ENDS
PUBLIC	??_GCCopyCoder@NCompress@@QAEPAXI@Z		; NCompress::CCopyCoder::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CCopyCoder@NCompress@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T77402 = -8						; size = 4
$T77401 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CCopyCoder@NCompress@@UAGKXZ PROC		; NCompress::CCopyCoder::Release, COMDAT
; Line 31
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+16], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+16]
	jmp	SHORT $LN2@Release
$LN1@Release:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T77402[ebp], edx
	mov	eax, DWORD PTR $T77402[ebp]
	mov	DWORD PTR $T77401[ebp], eax
	cmp	DWORD PTR $T77401[ebp], 0
	je	SHORT $LN4@Release
	push	1
	mov	ecx, DWORD PTR $T77401[ebp]
	call	??_GCCopyCoder@NCompress@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release
$LN4@Release:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release:
	xor	eax, eax
$LN2@Release:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CCopyCoder@NCompress@@UAGKXZ ENDP		; NCompress::CCopyCoder::Release
_TEXT	ENDS
PUBLIC	??_7ICompressCoder@@6B@				; ICompressCoder::`vftable'
PUBLIC	??0IUnknown@@QAE@XZ				; IUnknown::IUnknown
PUBLIC	??_R4ICompressCoder@@6B@			; ICompressCoder::`RTTI Complete Object Locator'
EXTRN	__purecall:PROC
;	COMDAT ??_R4ICompressCoder@@6B@
rdata$r	SEGMENT
??_R4ICompressCoder@@6B@ DD 00H				; ICompressCoder::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUICompressCoder@@@8
	DD	FLAT:??_R3ICompressCoder@@8
rdata$r	ENDS
;	COMDAT ??_7ICompressCoder@@6B@
CONST	SEGMENT
??_7ICompressCoder@@6B@ DD FLAT:??_R4ICompressCoder@@6B@ ; ICompressCoder::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ICompressCoder@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ICompressCoder@@QAE@XZ PROC				; ICompressCoder::ICompressCoder, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ICompressCoder@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ICompressCoder@@QAE@XZ ENDP				; ICompressCoder::ICompressCoder
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0IUnknown@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IUnknown@@QAE@XZ PROC				; IUnknown::IUnknown, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0IUnknown@@QAE@XZ ENDP				; IUnknown::IUnknown
_TEXT	ENDS
PUBLIC	??_7ICompressSetInStream@@6B@			; ICompressSetInStream::`vftable'
PUBLIC	??_R4ICompressSetInStream@@6B@			; ICompressSetInStream::`RTTI Complete Object Locator'
;	COMDAT ??_R4ICompressSetInStream@@6B@
rdata$r	SEGMENT
??_R4ICompressSetInStream@@6B@ DD 00H			; ICompressSetInStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUICompressSetInStream@@@8
	DD	FLAT:??_R3ICompressSetInStream@@8
rdata$r	ENDS
;	COMDAT ??_7ICompressSetInStream@@6B@
CONST	SEGMENT
??_7ICompressSetInStream@@6B@ DD FLAT:??_R4ICompressSetInStream@@6B@ ; ICompressSetInStream::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ICompressSetInStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ICompressSetInStream@@QAE@XZ PROC			; ICompressSetInStream::ICompressSetInStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ICompressSetInStream@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ICompressSetInStream@@QAE@XZ ENDP			; ICompressSetInStream::ICompressSetInStream
_TEXT	ENDS
PUBLIC	??_7ISequentialInStream@@6B@			; ISequentialInStream::`vftable'
PUBLIC	??_R4ISequentialInStream@@6B@			; ISequentialInStream::`RTTI Complete Object Locator'
;	COMDAT ??_R4ISequentialInStream@@6B@
rdata$r	SEGMENT
??_R4ISequentialInStream@@6B@ DD 00H			; ISequentialInStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUISequentialInStream@@@8
	DD	FLAT:??_R3ISequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_7ISequentialInStream@@6B@
CONST	SEGMENT
??_7ISequentialInStream@@6B@ DD FLAT:??_R4ISequentialInStream@@6B@ ; ISequentialInStream::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ISequentialInStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ISequentialInStream@@QAE@XZ PROC			; ISequentialInStream::ISequentialInStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ISequentialInStream@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ISequentialInStream@@QAE@XZ ENDP			; ISequentialInStream::ISequentialInStream
_TEXT	ENDS
PUBLIC	??_7ICompressGetInStreamProcessedSize@@6B@	; ICompressGetInStreamProcessedSize::`vftable'
PUBLIC	??_R4ICompressGetInStreamProcessedSize@@6B@	; ICompressGetInStreamProcessedSize::`RTTI Complete Object Locator'
;	COMDAT ??_R4ICompressGetInStreamProcessedSize@@6B@
rdata$r	SEGMENT
??_R4ICompressGetInStreamProcessedSize@@6B@ DD 00H	; ICompressGetInStreamProcessedSize::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUICompressGetInStreamProcessedSize@@@8
	DD	FLAT:??_R3ICompressGetInStreamProcessedSize@@8
rdata$r	ENDS
;	COMDAT ??_7ICompressGetInStreamProcessedSize@@6B@
CONST	SEGMENT
??_7ICompressGetInStreamProcessedSize@@6B@ DD FLAT:??_R4ICompressGetInStreamProcessedSize@@6B@ ; ICompressGetInStreamProcessedSize::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ICompressGetInStreamProcessedSize@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ICompressGetInStreamProcessedSize@@QAE@XZ PROC	; ICompressGetInStreamProcessedSize::ICompressGetInStreamProcessedSize, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ICompressGetInStreamProcessedSize@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ICompressGetInStreamProcessedSize@@QAE@XZ ENDP	; ICompressGetInStreamProcessedSize::ICompressGetInStreamProcessedSize
_TEXT	ENDS
EXTRN	??1CCopyCoder@NCompress@@QAE@XZ:PROC		; NCompress::CCopyCoder::~CCopyCoder
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCCopyCoder@NCompress@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCCopyCoder@NCompress@@QAEPAXI@Z PROC		; NCompress::CCopyCoder::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CCopyCoder@NCompress@@QAE@XZ		; NCompress::CCopyCoder::~CCopyCoder
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCCopyCoder@NCompress@@QAEPAXI@Z ENDP		; NCompress::CCopyCoder::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_7CLimitedSequentialInStream@@6B@		; CLimitedSequentialInStream::`vftable'
PUBLIC	??_R4CLimitedSequentialInStream@@6B@		; CLimitedSequentialInStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCLimitedSequentialInStream@@@8		; CLimitedSequentialInStream `RTTI Type Descriptor'
PUBLIC	??_R3CLimitedSequentialInStream@@8		; CLimitedSequentialInStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CLimitedSequentialInStream@@8		; CLimitedSequentialInStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CLimitedSequentialInStream@@8	; CLimitedSequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	?QueryInterface@CLimitedSequentialInStream@@UAGJABU_GUID@@PAPAX@Z ; CLimitedSequentialInStream::QueryInterface
PUBLIC	?AddRef@CLimitedSequentialInStream@@UAGKXZ	; CLimitedSequentialInStream::AddRef
PUBLIC	?Release@CLimitedSequentialInStream@@UAGKXZ	; CLimitedSequentialInStream::Release
EXTRN	?Read@CLimitedSequentialInStream@@UAGJPAXIPAI@Z:PROC ; CLimitedSequentialInStream::Read
;	COMDAT ??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R13?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CLimitedSequentialInStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CLimitedSequentialInStream@@8 DD FLAT:??_R0?AVCLimitedSequentialInStream@@@8 ; CLimitedSequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CLimitedSequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_R2CLimitedSequentialInStream@@8
rdata$r	SEGMENT
??_R2CLimitedSequentialInStream@@8 DD FLAT:??_R1A@?0A@EA@CLimitedSequentialInStream@@8 ; CLimitedSequentialInStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ISequentialInStream@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CLimitedSequentialInStream@@8
rdata$r	SEGMENT
??_R3CLimitedSequentialInStream@@8 DD 00H		; CLimitedSequentialInStream::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2CLimitedSequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCLimitedSequentialInStream@@@8
_DATA	SEGMENT
??_R0?AVCLimitedSequentialInStream@@@8 DD FLAT:??_7type_info@@6B@ ; CLimitedSequentialInStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCLimitedSequentialInStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CLimitedSequentialInStream@@6B@
rdata$r	SEGMENT
??_R4CLimitedSequentialInStream@@6B@ DD 00H		; CLimitedSequentialInStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCLimitedSequentialInStream@@@8
	DD	FLAT:??_R3CLimitedSequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_7CLimitedSequentialInStream@@6B@
CONST	SEGMENT
??_7CLimitedSequentialInStream@@6B@ DD FLAT:??_R4CLimitedSequentialInStream@@6B@ ; CLimitedSequentialInStream::`vftable'
	DD	FLAT:?QueryInterface@CLimitedSequentialInStream@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CLimitedSequentialInStream@@UAGKXZ
	DD	FLAT:?Release@CLimitedSequentialInStream@@UAGKXZ
	DD	FLAT:?Read@CLimitedSequentialInStream@@UAGJPAXIPAI@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CLimitedSequentialInStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CLimitedSequentialInStream@@QAE@XZ PROC		; CLimitedSequentialInStream::CLimitedSequentialInStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ISequentialInStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CLimitedSequentialInStream@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CLimitedSequentialInStream@@QAE@XZ ENDP		; CLimitedSequentialInStream::CLimitedSequentialInStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CLimitedSequentialInStream@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CLimitedSequentialInStream@@UAGJABU_GUID@@PAPAX@Z PROC ; CLimitedSequentialInStream::QueryInterface, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\common\limitedstreams.h
; Line 29
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@QueryInter@2
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN3@QueryInter@2
$LN4@QueryInter@2:
	push	OFFSET _IID_ISequentialInStream
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@2
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN3@QueryInter@2
$LN2@QueryInter@2:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN5@QueryInter@2
$LN3@QueryInter@2:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	xor	eax, eax
$LN5@QueryInter@2:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CLimitedSequentialInStream@@UAGJABU_GUID@@PAPAX@Z ENDP ; CLimitedSequentialInStream::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CLimitedSequentialInStream@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CLimitedSequentialInStream@@UAGKXZ PROC		; CLimitedSequentialInStream::AddRef, COMDAT
; Line 29
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CLimitedSequentialInStream@@UAGKXZ ENDP		; CLimitedSequentialInStream::AddRef
_TEXT	ENDS
PUBLIC	??_GCLimitedSequentialInStream@@QAEPAXI@Z	; CLimitedSequentialInStream::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CLimitedSequentialInStream@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T77427 = -8						; size = 4
$T77426 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CLimitedSequentialInStream@@UAGKXZ PROC	; CLimitedSequentialInStream::Release, COMDAT
; Line 29
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	jmp	SHORT $LN2@Release@2
$LN1@Release@2:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T77427[ebp], edx
	mov	eax, DWORD PTR $T77427[ebp]
	mov	DWORD PTR $T77426[ebp], eax
	cmp	DWORD PTR $T77426[ebp], 0
	je	SHORT $LN4@Release@2
	push	1
	mov	ecx, DWORD PTR $T77426[ebp]
	call	??_GCLimitedSequentialInStream@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release@2
$LN4@Release@2:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release@2:
	xor	eax, eax
$LN2@Release@2:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CLimitedSequentialInStream@@UAGKXZ ENDP	; CLimitedSequentialInStream::Release
_TEXT	ENDS
PUBLIC	??1CLimitedSequentialInStream@@QAE@XZ		; CLimitedSequentialInStream::~CLimitedSequentialInStream
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCLimitedSequentialInStream@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCLimitedSequentialInStream@@QAEPAXI@Z PROC		; CLimitedSequentialInStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CLimitedSequentialInStream@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCLimitedSequentialInStream@@QAEPAXI@Z ENDP		; CLimitedSequentialInStream::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CLimitedSequentialInStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CLimitedSequentialInStream@@QAE@XZ PROC		; CLimitedSequentialInStream::~CLimitedSequentialInStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CLimitedSequentialInStream@@QAE@XZ ENDP		; CLimitedSequentialInStream::~CLimitedSequentialInStream
_TEXT	ENDS
PUBLIC	??_7CLimitedSequentialOutStream@@6B@		; CLimitedSequentialOutStream::`vftable'
PUBLIC	??0ISequentialOutStream@@QAE@XZ			; ISequentialOutStream::ISequentialOutStream
PUBLIC	??_R4CLimitedSequentialOutStream@@6B@		; CLimitedSequentialOutStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCLimitedSequentialOutStream@@@8		; CLimitedSequentialOutStream `RTTI Type Descriptor'
PUBLIC	??_R3CLimitedSequentialOutStream@@8		; CLimitedSequentialOutStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CLimitedSequentialOutStream@@8		; CLimitedSequentialOutStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CLimitedSequentialOutStream@@8	; CLimitedSequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ISequentialOutStream@@8		; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUISequentialOutStream@@@8		; ISequentialOutStream `RTTI Type Descriptor'
PUBLIC	??_R3ISequentialOutStream@@8			; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ISequentialOutStream@@8			; ISequentialOutStream::`RTTI Base Class Array'
PUBLIC	?QueryInterface@CLimitedSequentialOutStream@@UAGJABU_GUID@@PAPAX@Z ; CLimitedSequentialOutStream::QueryInterface
PUBLIC	?AddRef@CLimitedSequentialOutStream@@UAGKXZ	; CLimitedSequentialOutStream::AddRef
PUBLIC	?Release@CLimitedSequentialOutStream@@UAGKXZ	; CLimitedSequentialOutStream::Release
EXTRN	?Write@CLimitedSequentialOutStream@@UAGJPBXIPAI@Z:PROC ; CLimitedSequentialOutStream::Write
;	COMDAT ??_R2ISequentialOutStream@@8
rdata$r	SEGMENT
??_R2ISequentialOutStream@@8 DD FLAT:??_R1A@?0A@EA@ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ISequentialOutStream@@8
rdata$r	SEGMENT
??_R3ISequentialOutStream@@8 DD 00H			; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ISequentialOutStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUISequentialOutStream@@@8
_DATA	SEGMENT
??_R0?AUISequentialOutStream@@@8 DD FLAT:??_7type_info@@6B@ ; ISequentialOutStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUISequentialOutStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ISequentialOutStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ISequentialOutStream@@8 DD FLAT:??_R0?AUISequentialOutStream@@@8 ; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ISequentialOutStream@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CLimitedSequentialOutStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CLimitedSequentialOutStream@@8 DD FLAT:??_R0?AVCLimitedSequentialOutStream@@@8 ; CLimitedSequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CLimitedSequentialOutStream@@8
rdata$r	ENDS
;	COMDAT ??_R2CLimitedSequentialOutStream@@8
rdata$r	SEGMENT
??_R2CLimitedSequentialOutStream@@8 DD FLAT:??_R1A@?0A@EA@CLimitedSequentialOutStream@@8 ; CLimitedSequentialOutStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ISequentialOutStream@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CLimitedSequentialOutStream@@8
rdata$r	SEGMENT
??_R3CLimitedSequentialOutStream@@8 DD 00H		; CLimitedSequentialOutStream::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2CLimitedSequentialOutStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCLimitedSequentialOutStream@@@8
_DATA	SEGMENT
??_R0?AVCLimitedSequentialOutStream@@@8 DD FLAT:??_7type_info@@6B@ ; CLimitedSequentialOutStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCLimitedSequentialOutStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CLimitedSequentialOutStream@@6B@
rdata$r	SEGMENT
??_R4CLimitedSequentialOutStream@@6B@ DD 00H		; CLimitedSequentialOutStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCLimitedSequentialOutStream@@@8
	DD	FLAT:??_R3CLimitedSequentialOutStream@@8
rdata$r	ENDS
;	COMDAT ??_7CLimitedSequentialOutStream@@6B@
CONST	SEGMENT
??_7CLimitedSequentialOutStream@@6B@ DD FLAT:??_R4CLimitedSequentialOutStream@@6B@ ; CLimitedSequentialOutStream::`vftable'
	DD	FLAT:?QueryInterface@CLimitedSequentialOutStream@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CLimitedSequentialOutStream@@UAGKXZ
	DD	FLAT:?Release@CLimitedSequentialOutStream@@UAGKXZ
	DD	FLAT:?Write@CLimitedSequentialOutStream@@UAGJPBXIPAI@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CLimitedSequentialOutStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CLimitedSequentialOutStream@@QAE@XZ PROC		; CLimitedSequentialOutStream::CLimitedSequentialOutStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ISequentialOutStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CLimitedSequentialOutStream@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CLimitedSequentialOutStream@@QAE@XZ ENDP		; CLimitedSequentialOutStream::CLimitedSequentialOutStream
_TEXT	ENDS
PUBLIC	??_7ISequentialOutStream@@6B@			; ISequentialOutStream::`vftable'
PUBLIC	??_R4ISequentialOutStream@@6B@			; ISequentialOutStream::`RTTI Complete Object Locator'
;	COMDAT ??_R4ISequentialOutStream@@6B@
rdata$r	SEGMENT
??_R4ISequentialOutStream@@6B@ DD 00H			; ISequentialOutStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUISequentialOutStream@@@8
	DD	FLAT:??_R3ISequentialOutStream@@8
rdata$r	ENDS
;	COMDAT ??_7ISequentialOutStream@@6B@
CONST	SEGMENT
??_7ISequentialOutStream@@6B@ DD FLAT:??_R4ISequentialOutStream@@6B@ ; ISequentialOutStream::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ISequentialOutStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ISequentialOutStream@@QAE@XZ PROC			; ISequentialOutStream::ISequentialOutStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ISequentialOutStream@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ISequentialOutStream@@QAE@XZ ENDP			; ISequentialOutStream::ISequentialOutStream
_TEXT	ENDS
EXTRN	_IID_ISequentialOutStream:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@CLimitedSequentialOutStream@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CLimitedSequentialOutStream@@UAGJABU_GUID@@PAPAX@Z PROC ; CLimitedSequentialOutStream::QueryInterface, COMDAT
; Line 145
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@QueryInter@3
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN3@QueryInter@3
$LN4@QueryInter@3:
	push	OFFSET _IID_ISequentialOutStream
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@3
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN3@QueryInter@3
$LN2@QueryInter@3:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN5@QueryInter@3
$LN3@QueryInter@3:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	xor	eax, eax
$LN5@QueryInter@3:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CLimitedSequentialOutStream@@UAGJABU_GUID@@PAPAX@Z ENDP ; CLimitedSequentialOutStream::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CLimitedSequentialOutStream@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CLimitedSequentialOutStream@@UAGKXZ PROC	; CLimitedSequentialOutStream::AddRef, COMDAT
; Line 145
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CLimitedSequentialOutStream@@UAGKXZ ENDP	; CLimitedSequentialOutStream::AddRef
_TEXT	ENDS
PUBLIC	??_GCLimitedSequentialOutStream@@QAEPAXI@Z	; CLimitedSequentialOutStream::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CLimitedSequentialOutStream@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T77447 = -8						; size = 4
$T77446 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CLimitedSequentialOutStream@@UAGKXZ PROC	; CLimitedSequentialOutStream::Release, COMDAT
; Line 145
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	jmp	SHORT $LN2@Release@3
$LN1@Release@3:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T77447[ebp], edx
	mov	eax, DWORD PTR $T77447[ebp]
	mov	DWORD PTR $T77446[ebp], eax
	cmp	DWORD PTR $T77446[ebp], 0
	je	SHORT $LN4@Release@3
	push	1
	mov	ecx, DWORD PTR $T77446[ebp]
	call	??_GCLimitedSequentialOutStream@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release@3
$LN4@Release@3:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release@3:
	xor	eax, eax
$LN2@Release@3:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CLimitedSequentialOutStream@@UAGKXZ ENDP	; CLimitedSequentialOutStream::Release
_TEXT	ENDS
PUBLIC	??1CLimitedSequentialOutStream@@QAE@XZ		; CLimitedSequentialOutStream::~CLimitedSequentialOutStream
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCLimitedSequentialOutStream@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCLimitedSequentialOutStream@@QAEPAXI@Z PROC		; CLimitedSequentialOutStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CLimitedSequentialOutStream@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@3
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCLimitedSequentialOutStream@@QAEPAXI@Z ENDP		; CLimitedSequentialOutStream::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CLimitedSequentialOutStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CLimitedSequentialOutStream@@QAE@XZ PROC		; CLimitedSequentialOutStream::~CLimitedSequentialOutStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CLimitedSequentialOutStream@@QAE@XZ ENDP		; CLimitedSequentialOutStream::~CLimitedSequentialOutStream
_TEXT	ENDS
PUBLIC	?GetStream@CHandler@NParser@NArchive@@UAGJIPAPAUISequentialInStream@@@Z ; NArchive::NParser::CHandler::GetStream
EXTRN	?CreateLimitedInStream@@YGJPAUIInStream@@_K1PAPAUISequentialInStream@@@Z:PROC ; CreateLimitedInStream
xdata$x	SEGMENT
__catchsym$?GetStream@CHandler@NParser@NArchive@@UAGJIPAPAUISequentialInStream@@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?GetStream@CHandler@NParser@NArchive@@UAGJIPAPAUISequentialInStream@@@Z$0
__unwindtable$?GetStream@CHandler@NParser@NArchive@@UAGJIPAPAUISequentialInStream@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?GetStream@CHandler@NParser@NArchive@@UAGJIPAPAUISequentialInStream@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?GetStream@CHandler@NParser@NArchive@@UAGJIPAPAUISequentialInStream@@@Z$2
__ehfuncinfo$?GetStream@CHandler@NParser@NArchive@@UAGJIPAPAUISequentialInStream@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?GetStream@CHandler@NParser@NArchive@@UAGJIPAPAUISequentialInStream@@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?GetStream@CHandler@NParser@NArchive@@UAGJIPAPAUISequentialInStream@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv82 = -36						; size = 4
tv81 = -32						; size = 4
tv80 = -28						; size = 4
$T77457 = -24						; size = 4
_item$73159 = -20					; size = 4
__$EHRec$ = -16						; size = 16
_this$ = 8						; size = 4
_index$ = 12						; size = 4
_stream$ = 16						; size = 4
?GetStream@CHandler@NParser@NArchive@@UAGJIPAPAUISequentialInStream@@@Z PROC ; NArchive::NParser::CHandler::GetStream
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\openarchive.cpp
; Line 437
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetStream@CHandler@NParser@NArchive@@UAGJIPAPAUISequentialInStream@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 20					; 00000014H
	push	ebx
	push	esi
	push	edi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
; Line 438
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 439
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??A?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEAAUCParseItem@NParser@NArchive@@I@Z ; CObjectVector<NArchive::NParser::CParseItem>::operator[]
	mov	DWORD PTR tv80[ebp], eax
	mov	ecx, DWORD PTR tv80[ebp]
	mov	DWORD PTR _item$73159[ebp], ecx
; Line 440
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *
	mov	DWORD PTR tv81[ebp], eax
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _item$73159[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	push	edx
	mov	eax, DWORD PTR _item$73159[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR tv81[ebp]
	push	eax
	call	?CreateLimitedInStream@@YGJPAUIInStream@@_K1PAPAUISequentialInStream@@@Z ; CreateLimitedInStream
	mov	DWORD PTR tv82[ebp], eax
	mov	eax, DWORD PTR tv82[ebp]
	jmp	SHORT $LN2@GetStream
__catch$?GetStream@CHandler@NParser@NArchive@@UAGJIPAPAUISequentialInStream@@@Z$0:
; Line 441
	mov	DWORD PTR $T77457[ebp], -2147024882	; 8007000eH
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN7@GetStream
	ret	0
	mov	eax, __tryend$?GetStream@CHandler@NParser@NArchive@@UAGJIPAPAUISequentialInStream@@@Z$1
	ret	0
__tryend$?GetStream@CHandler@NParser@NArchive@@UAGJIPAPAUISequentialInStream@@@Z$1:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN2@GetStream
$LN7@GetStream:
	mov	eax, DWORD PTR $T77457[ebp]
$LN2@GetStream:
; Line 442
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
__ehhandler$?GetStream@CHandler@NParser@NArchive@@UAGJIPAPAUISequentialInStream@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetStream@CHandler@NParser@NArchive@@UAGJIPAPAUISequentialInStream@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetStream@CHandler@NParser@NArchive@@UAGJIPAPAUISequentialInStream@@@Z ENDP ; NArchive::NParser::CHandler::GetStream
PUBLIC	?VARIANT_BOOLToBool@@YG_NF@Z			; VARIANT_BOOLToBool
PUBLIC	?Archive_GetItemBoolProp@@YGJPAUIInArchive@@IKAA_N@Z ; Archive_GetItemBoolProp
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T77472 = -40						; size = 4
$T77471 = -36						; size = 4
$T77470 = -32						; size = 4
___result__$73169 = -28					; size = 4
_prop$ = -20						; size = 16
_arc$ = 8						; size = 4
_index$ = 12						; size = 4
_propID$ = 16						; size = 4
_result$ = 20						; size = 4
?Archive_GetItemBoolProp@@YGJPAUIInArchive@@IKAA_N@Z PROC ; Archive_GetItemBoolProp
; Line 449
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 450
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
; Line 451
	mov	eax, DWORD PTR _result$[ebp]
	mov	BYTE PTR [eax], 0
; Line 452
	mov	esi, esp
	lea	ecx, DWORD PTR _prop$[ebp]
	push	ecx
	mov	edx, DWORD PTR _propID$[ebp]
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _arc$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _arc$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+24]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$73169[ebp], eax
	cmp	DWORD PTR ___result__$73169[ebp], 0
	je	SHORT $LN4@Archive_Ge
	mov	edx, DWORD PTR ___result__$73169[ebp]
	mov	DWORD PTR $T77470[ebp], edx
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T77470[ebp]
	jmp	SHORT $LN5@Archive_Ge
$LN4@Archive_Ge:
; Line 453
	movzx	eax, WORD PTR _prop$[ebp]
	cmp	eax, 11					; 0000000bH
	jne	SHORT $LN3@Archive_Ge
; Line 454
	movzx	ecx, WORD PTR _prop$[ebp+8]
	push	ecx
	call	?VARIANT_BOOLToBool@@YG_NF@Z		; VARIANT_BOOLToBool
	mov	edx, DWORD PTR _result$[ebp]
	mov	BYTE PTR [edx], al
	jmp	SHORT $LN2@Archive_Ge
$LN3@Archive_Ge:
; Line 455
	movzx	eax, WORD PTR _prop$[ebp]
	test	eax, eax
	je	SHORT $LN2@Archive_Ge
; Line 456
	mov	DWORD PTR $T77471[ebp], -2147467259	; 80004005H
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T77471[ebp]
	jmp	SHORT $LN5@Archive_Ge
$LN2@Archive_Ge:
; Line 457
	mov	DWORD PTR $T77472[ebp], 0
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T77472[ebp]
$LN5@Archive_Ge:
; Line 458
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@Archive_Ge
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	1
$LN9@Archive_Ge:
	DD	1
	DD	$LN8@Archive_Ge
$LN8@Archive_Ge:
	DD	-20					; ffffffecH
	DD	16					; 00000010H
	DD	$LN7@Archive_Ge
$LN7@Archive_Ge:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
?Archive_GetItemBoolProp@@YGJPAUIInArchive@@IKAA_N@Z ENDP ; Archive_GetItemBoolProp
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?VARIANT_BOOLToBool@@YG_NF@Z
_TEXT	SEGMENT
_v$ = 8							; size = 2
?VARIANT_BOOLToBool@@YG_NF@Z PROC			; VARIANT_BOOLToBool, COMDAT
; File c:\workspace\7z1505-src\cpp\windows\defs.h
; Line 15
	push	ebp
	mov	ebp, esp
	movsx	eax, WORD PTR _v$[ebp]
	neg	eax
	sbb	eax, eax
	neg	eax
	pop	ebp
	ret	4
?VARIANT_BOOLToBool@@YG_NF@Z ENDP			; VARIANT_BOOLToBool
_TEXT	ENDS
PUBLIC	?Archive_IsItem_Dir@@YGJPAUIInArchive@@IAA_N@Z	; Archive_IsItem_Dir
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_arc$ = 8						; size = 4
_index$ = 12						; size = 4
_result$ = 16						; size = 4
?Archive_IsItem_Dir@@YGJPAUIInArchive@@IAA_N@Z PROC	; Archive_IsItem_Dir
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\openarchive.cpp
; Line 461
	push	ebp
	mov	ebp, esp
; Line 462
	mov	eax, DWORD PTR _result$[ebp]
	push	eax
	push	6
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _arc$[ebp]
	push	edx
	call	?Archive_GetItemBoolProp@@YGJPAUIInArchive@@IKAA_N@Z ; Archive_GetItemBoolProp
; Line 463
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?Archive_IsItem_Dir@@YGJPAUIInArchive@@IAA_N@Z ENDP	; Archive_IsItem_Dir
_TEXT	ENDS
PUBLIC	?Archive_IsItem_Aux@@YGJPAUIInArchive@@IAA_N@Z	; Archive_IsItem_Aux
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_arc$ = 8						; size = 4
_index$ = 12						; size = 4
_result$ = 16						; size = 4
?Archive_IsItem_Aux@@YGJPAUIInArchive@@IAA_N@Z PROC	; Archive_IsItem_Aux
; Line 466
	push	ebp
	mov	ebp, esp
; Line 467
	mov	eax, DWORD PTR _result$[ebp]
	push	eax
	push	64					; 00000040H
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _arc$[ebp]
	push	edx
	call	?Archive_GetItemBoolProp@@YGJPAUIInArchive@@IKAA_N@Z ; Archive_GetItemBoolProp
; Line 468
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?Archive_IsItem_Aux@@YGJPAUIInArchive@@IAA_N@Z ENDP	; Archive_IsItem_Aux
_TEXT	ENDS
PUBLIC	?Archive_IsItem_AltStream@@YGJPAUIInArchive@@IAA_N@Z ; Archive_IsItem_AltStream
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_arc$ = 8						; size = 4
_index$ = 12						; size = 4
_result$ = 16						; size = 4
?Archive_IsItem_AltStream@@YGJPAUIInArchive@@IAA_N@Z PROC ; Archive_IsItem_AltStream
; Line 471
	push	ebp
	mov	ebp, esp
; Line 472
	mov	eax, DWORD PTR _result$[ebp]
	push	eax
	push	63					; 0000003fH
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _arc$[ebp]
	push	edx
	call	?Archive_GetItemBoolProp@@YGJPAUIInArchive@@IKAA_N@Z ; Archive_GetItemBoolProp
; Line 473
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?Archive_IsItem_AltStream@@YGJPAUIInArchive@@IAA_N@Z ENDP ; Archive_IsItem_AltStream
_TEXT	ENDS
PUBLIC	?Archive_IsItem_Deleted@@YGJPAUIInArchive@@IAA_N@Z ; Archive_IsItem_Deleted
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_arc$ = 8						; size = 4
_index$ = 12						; size = 4
_result$ = 16						; size = 4
?Archive_IsItem_Deleted@@YGJPAUIInArchive@@IAA_N@Z PROC	; Archive_IsItem_Deleted
; Line 476
	push	ebp
	mov	ebp, esp
; Line 477
	mov	eax, DWORD PTR _result$[ebp]
	push	eax
	push	65					; 00000041H
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _arc$[ebp]
	push	edx
	call	?Archive_GetItemBoolProp@@YGJPAUIInArchive@@IKAA_N@Z ; Archive_GetItemBoolProp
; Line 478
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?Archive_IsItem_Deleted@@YGJPAUIInArchive@@IAA_N@Z ENDP	; Archive_IsItem_Deleted
_TEXT	ENDS
PUBLIC	?DeleteBack@?$CObjectVector@VUString@@@@QAEXXZ	; CObjectVector<UString>::DeleteBack
PUBLIC	?Back@?$CObjectVector@VUString@@@@QAEAAVUString@@XZ ; CObjectVector<UString>::Back
PUBLIC	??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[]
PUBLIC	?Size@?$CObjectVector@VUString@@@@QBEIXZ	; CObjectVector<UString>::Size
PUBLIC	?DeleteFrom@UString@@QAEXI@Z			; UString::DeleteFrom
PUBLIC	?Insert@?$CObjectVector@VUString@@@@QAEXIABVUString@@@Z ; CObjectVector<UString>::Insert
PUBLIC	?Ptr@UString@@QBEPB_WI@Z			; UString::Ptr
PUBLIC	?Empty@UString@@QAEXXZ				; UString::Empty
PUBLIC	??C?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator->
PUBLIC	??C?$CMyComPtr@UIArchiveGetRawProps@@@@QBEPAUIArchiveGetRawProps@@XZ ; CMyComPtr<IArchiveGetRawProps>::operator->
PUBLIC	??7?$CMyComPtr@UIArchiveGetRawProps@@@@QBE_NXZ	; CMyComPtr<IArchiveGetRawProps>::operator!
PUBLIC	?GetItemPathToParent@CArc@@ABEJIIAAV?$CObjectVector@VUString@@@@@Z ; CArc::GetItemPathToParent
EXTRN	?ReverseFind_PathSepar@UString@@QBEHXZ:PROC	; UString::ReverseFind_PathSepar
EXTRN	?SetFromBstr@UString@@QAEXPA_W@Z:PROC		; UString::SetFromBstr
EXTRN	??4UString@@QAEAAV0@PB_W@Z:PROC			; UString::operator=
xdata$x	SEGMENT
__unwindtable$?GetItemPathToParent@CArc@@ABEJIIAAV?$CObjectVector@VUString@@@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetItemPathToParent@CArc@@ABEJIIAAV?$CObjectVector@VUString@@@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetItemPathToParent@CArc@@ABEJIIAAV?$CObjectVector@VUString@@@@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?GetItemPathToParent@CArc@@ABEJIIAAV?$CObjectVector@VUString@@@@@Z$2
__ehfuncinfo$?GetItemPathToParent@CArc@@ABEJIIAAV?$CObjectVector@VUString@@@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?GetItemPathToParent@CArc@@ABEJIIAAV?$CObjectVector@VUString@@@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv173 = -196						; size = 4
tv129 = -192						; size = 4
tv77 = -188						; size = 4
$T77489 = -184						; size = 4
$T77488 = -180						; size = 4
$T77487 = -176						; size = 12
$T77486 = -164						; size = 4
$T77485 = -160						; size = 4
$T77484 = -156						; size = 4
$T77483 = -152						; size = 4
_s$73318 = -148						; size = 4
_pos$73314 = -144					; size = 4
___result__$73307 = -140				; size = 4
_parentType$73306 = -132				; size = 4
_curParent$73303 = -120					; size = 4
___result__$73294 = -112				; size = 4
_prop$73293 = -104					; size = 16
___result__$73286 = -84					; size = 4
_propType$73285 = -76					; size = 4
_size$73284 = -64					; size = 4
_p$73283 = -52						; size = 4
_prevWasAltStream$ = -41				; size = 1
_s$ = -36						; size = 12
_curIndex$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_index$ = 8						; size = 4
_parent$ = 12						; size = 4
_parts$ = 16						; size = 4
?GetItemPathToParent@CArc@@ABEJIIAAV?$CObjectVector@VUString@@@@@Z PROC ; CArc::GetItemPathToParent
; _this$ = ecx
; Line 529
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetItemPathToParent@CArc@@ABEJIIAAV?$CObjectVector@VUString@@@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 184				; 000000b8H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 46					; 0000002eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 530
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??7?$CMyComPtr@UIArchiveGetRawProps@@@@QBE_NXZ ; CMyComPtr<IArchiveGetRawProps>::operator!
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN21@GetItemPat
; Line 531
	mov	eax, -2147467259			; 80004005H
	jmp	$LN22@GetItemPat
$LN21@GetItemPat:
; Line 532
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR _parent$[ebp]
	jne	SHORT $LN20@GetItemPat
; Line 533
	xor	eax, eax
	jmp	$LN22@GetItemPat
$LN20@GetItemPat:
; Line 534
	mov	edx, DWORD PTR _index$[ebp]
	mov	DWORD PTR _curIndex$[ebp], edx
; Line 536
	lea	ecx, DWORD PTR _s$[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 538
	mov	BYTE PTR _prevWasAltStream$[ebp], 0
$LN19@GetItemPat:
; Line 546
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??C?$CMyComPtr@UIArchiveGetRawProps@@@@QBEPAUIArchiveGetRawProps@@XZ ; CMyComPtr<IArchiveGetRawProps>::operator->
	mov	DWORD PTR tv77[ebp], eax
	mov	esi, esp
	lea	eax, DWORD PTR _propType$73285[ebp]
	push	eax
	lea	ecx, DWORD PTR _size$73284[ebp]
	push	ecx
	lea	edx, DWORD PTR _p$73283[ebp]
	push	edx
	push	4
	mov	eax, DWORD PTR _curIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv77[ebp]
	push	ecx
	mov	edx, DWORD PTR tv77[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$73286[ebp], eax
	cmp	DWORD PTR ___result__$73286[ebp], 0
	je	SHORT $LN17@GetItemPat
	mov	edx, DWORD PTR ___result__$73286[ebp]
	mov	DWORD PTR $T77483[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _s$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T77483[ebp]
	jmp	$LN22@GetItemPat
$LN17@GetItemPat:
; Line 547
	cmp	DWORD PTR _p$73283[ebp], 0
	je	SHORT $LN16@GetItemPat
	cmp	DWORD PTR _propType$73285[ebp], 81	; 00000051H
	jne	SHORT $LN16@GetItemPat
; Line 548
	mov	eax, DWORD PTR _p$73283[ebp]
	push	eax
	lea	ecx, DWORD PTR _s$[ebp]
	call	??4UString@@QAEAAV0@PB_W@Z		; UString::operator=
; Line 549
	jmp	$LN15@GetItemPat
$LN16@GetItemPat:
; Line 552
	lea	ecx, DWORD PTR _prop$73293[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
	mov	BYTE PTR __$EHRec$[ebp+8], 1
; Line 553
	mov	ecx, DWORD PTR _this$[ebp]
	call	??C?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator->
	mov	DWORD PTR tv129[ebp], eax
	mov	esi, esp
	lea	ecx, DWORD PTR _prop$73293[ebp]
	push	ecx
	push	4
	mov	edx, DWORD PTR _curIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR tv129[ebp]
	push	eax
	mov	ecx, DWORD PTR tv129[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$73294[ebp], eax
	cmp	DWORD PTR ___result__$73294[ebp], 0
	je	SHORT $LN14@GetItemPat
	mov	ecx, DWORD PTR ___result__$73294[ebp]
	mov	DWORD PTR $T77484[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _prop$73293[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _s$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T77484[ebp]
	jmp	$LN22@GetItemPat
$LN14@GetItemPat:
; Line 554
	movzx	edx, WORD PTR _prop$73293[ebp]
	cmp	edx, 8
	jne	SHORT $LN13@GetItemPat
	cmp	DWORD PTR _prop$73293[ebp+8], 0
	je	SHORT $LN13@GetItemPat
; Line 555
	mov	eax, DWORD PTR _prop$73293[ebp+8]
	push	eax
	lea	ecx, DWORD PTR _s$[ebp]
	call	?SetFromBstr@UString@@QAEXPA_W@Z	; UString::SetFromBstr
	jmp	SHORT $LN12@GetItemPat
$LN13@GetItemPat:
; Line 556
	movzx	ecx, WORD PTR _prop$73293[ebp]
	test	ecx, ecx
	jne	SHORT $LN11@GetItemPat
; Line 557
	lea	ecx, DWORD PTR _s$[ebp]
	call	?Empty@UString@@QAEXXZ			; UString::Empty
; Line 558
	jmp	SHORT $LN12@GetItemPat
$LN11@GetItemPat:
; Line 559
	mov	DWORD PTR $T77485[ebp], -2147467259	; 80004005H
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _prop$73293[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _s$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T77485[ebp]
	jmp	$LN22@GetItemPat
$LN12@GetItemPat:
; Line 560
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _prop$73293[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
$LN15@GetItemPat:
; Line 562
	mov	DWORD PTR _curParent$73303[ebp], -1
; Line 563
	mov	DWORD PTR _parentType$73306[ebp], 0
; Line 564
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??C?$CMyComPtr@UIArchiveGetRawProps@@@@QBEPAUIArchiveGetRawProps@@XZ ; CMyComPtr<IArchiveGetRawProps>::operator->
	mov	DWORD PTR tv173[ebp], eax
	mov	esi, esp
	lea	edx, DWORD PTR _parentType$73306[ebp]
	push	edx
	lea	eax, DWORD PTR _curParent$73303[ebp]
	push	eax
	mov	ecx, DWORD PTR _curIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv173[ebp]
	push	edx
	mov	eax, DWORD PTR tv173[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$73307[ebp], eax
	cmp	DWORD PTR ___result__$73307[ebp], 0
	je	SHORT $LN9@GetItemPat
	mov	eax, DWORD PTR ___result__$73307[ebp]
	mov	DWORD PTR $T77486[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _s$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T77486[ebp]
	jmp	$LN22@GetItemPat
$LN9@GetItemPat:
; Line 566
	cmp	DWORD PTR _parentType$73306[ebp], 1
	je	SHORT $LN8@GetItemPat
$LN7@GetItemPat:
; Line 570
	lea	ecx, DWORD PTR _s$[ebp]
	call	?ReverseFind_PathSepar@UString@@QBEHXZ	; UString::ReverseFind_PathSepar
	mov	DWORD PTR _pos$73314[ebp], eax
; Line 571
	cmp	DWORD PTR _pos$73314[ebp], 0
	jge	SHORT $LN5@GetItemPat
; Line 573
	jmp	SHORT $LN8@GetItemPat
$LN5@GetItemPat:
; Line 575
	mov	ecx, DWORD PTR _pos$73314[ebp]
	add	ecx, 1
	push	ecx
	lea	ecx, DWORD PTR _s$[ebp]
	call	?Ptr@UString@@QBEPB_WI@Z		; UString::Ptr
	push	eax
	lea	ecx, DWORD PTR $T77487[ebp]
	call	??0UString@@QAE@PB_W@Z			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	edx, DWORD PTR $T77487[ebp]
	push	edx
	push	0
	mov	ecx, DWORD PTR _parts$[ebp]
	call	?Insert@?$CObjectVector@VUString@@@@QAEXIABVUString@@@Z ; CObjectVector<UString>::Insert
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T77487[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
; Line 576
	mov	eax, DWORD PTR _pos$73314[ebp]
	push	eax
	lea	ecx, DWORD PTR _s$[ebp]
	call	?DeleteFrom@UString@@QAEXI@Z		; UString::DeleteFrom
; Line 577
	jmp	SHORT $LN7@GetItemPat
$LN8@GetItemPat:
; Line 580
	lea	ecx, DWORD PTR _s$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _parts$[ebp]
	call	?Insert@?$CObjectVector@VUString@@@@QAEXIABVUString@@@Z ; CObjectVector<UString>::Insert
; Line 582
	movzx	edx, BYTE PTR _prevWasAltStream$[ebp]
	test	edx, edx
	je	SHORT $LN4@GetItemPat
; Line 585
	mov	ecx, DWORD PTR _parts$[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	sub	eax, 2
	push	eax
	mov	ecx, DWORD PTR _parts$[ebp]
	call	??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[]
	mov	DWORD PTR _s$73318[ebp], eax
; Line 586
	push	58					; 0000003aH
	mov	ecx, DWORD PTR _s$73318[ebp]
	call	??YUString@@QAEAAV0@_W@Z		; UString::operator+=
; Line 587
	mov	ecx, DWORD PTR _parts$[ebp]
	call	?Back@?$CObjectVector@VUString@@@@QAEAAVUString@@XZ ; CObjectVector<UString>::Back
	push	eax
	mov	ecx, DWORD PTR _s$73318[ebp]
	call	??YUString@@QAEAAV0@ABV0@@Z		; UString::operator+=
; Line 589
	mov	ecx, DWORD PTR _parts$[ebp]
	call	?DeleteBack@?$CObjectVector@VUString@@@@QAEXXZ ; CObjectVector<UString>::DeleteBack
$LN4@GetItemPat:
; Line 592
	mov	eax, DWORD PTR _parent$[ebp]
	cmp	eax, DWORD PTR _curParent$73303[ebp]
	jne	SHORT $LN3@GetItemPat
; Line 593
	mov	DWORD PTR $T77488[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _s$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T77488[ebp]
	jmp	SHORT $LN22@GetItemPat
$LN3@GetItemPat:
; Line 595
	mov	BYTE PTR _prevWasAltStream$[ebp], 0
; Line 596
	cmp	DWORD PTR _parentType$73306[ebp], 1
	jne	SHORT $LN2@GetItemPat
; Line 597
	mov	BYTE PTR _prevWasAltStream$[ebp], 1
$LN2@GetItemPat:
; Line 599
	cmp	DWORD PTR _curParent$73303[ebp], -1
	jne	SHORT $LN1@GetItemPat
; Line 600
	mov	DWORD PTR $T77489[ebp], -2147467259	; 80004005H
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _s$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T77489[ebp]
	jmp	SHORT $LN22@GetItemPat
$LN1@GetItemPat:
; Line 601
	mov	ecx, DWORD PTR _curParent$73303[ebp]
	mov	DWORD PTR _curIndex$[ebp], ecx
; Line 602
	jmp	$LN19@GetItemPat
; Line 603
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _s$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
$LN22@GetItemPat:
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN36@GetItemPat
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN36@GetItemPat:
	DD	7
	DD	$LN35@GetItemPat
$LN35@GetItemPat:
	DD	-36					; ffffffdcH
	DD	12					; 0000000cH
	DD	$LN27@GetItemPat
	DD	-52					; ffffffccH
	DD	4
	DD	$LN28@GetItemPat
	DD	-64					; ffffffc0H
	DD	4
	DD	$LN29@GetItemPat
	DD	-76					; ffffffb4H
	DD	4
	DD	$LN30@GetItemPat
	DD	-104					; ffffff98H
	DD	16					; 00000010H
	DD	$LN31@GetItemPat
	DD	-120					; ffffff88H
	DD	4
	DD	$LN32@GetItemPat
	DD	-132					; ffffff7cH
	DD	4
	DD	$LN33@GetItemPat
$LN33@GetItemPat:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	84					; 00000054H
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	0
$LN32@GetItemPat:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
$LN31@GetItemPat:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
$LN30@GetItemPat:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	84					; 00000054H
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	0
$LN29@GetItemPat:
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN28@GetItemPat:
	DB	112					; 00000070H
	DB	0
$LN27@GetItemPat:
	DB	115					; 00000073H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?GetItemPathToParent@CArc@@ABEJIIAAV?$CObjectVector@VUString@@@@@Z$0:
	lea	ecx, DWORD PTR _s$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?GetItemPathToParent@CArc@@ABEJIIAAV?$CObjectVector@VUString@@@@@Z$1:
	lea	ecx, DWORD PTR _prop$73293[ebp]
	jmp	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
__unwindfunclet$?GetItemPathToParent@CArc@@ABEJIIAAV?$CObjectVector@VUString@@@@@Z$2:
	lea	ecx, DWORD PTR $T77487[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$?GetItemPathToParent@CArc@@ABEJIIAAV?$CObjectVector@VUString@@@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-196]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetItemPathToParent@CArc@@ABEJIIAAV?$CObjectVector@VUString@@@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetItemPathToParent@CArc@@ABEJIIAAV?$CObjectVector@VUString@@@@@Z ENDP ; CArc::GetItemPathToParent
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Empty@UString@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Empty@UString@@QAEXXZ PROC				; UString::Empty, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 474
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	xor	eax, eax
	mov	WORD PTR [edx], ax
	mov	esp, ebp
	pop	ebp
	ret	0
?Empty@UString@@QAEXXZ ENDP				; UString::Empty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Ptr@UString@@QBEPB_WI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pos$ = 8						; size = 4
?Ptr@UString@@QBEPB_WI@Z PROC				; UString::Ptr, COMDAT
; _this$ = ecx
; Line 478
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pos$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	mov	esp, ebp
	pop	ebp
	ret	4
?Ptr@UString@@QBEPB_WI@Z ENDP				; UString::Ptr
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?DeleteFrom@UString@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?DeleteFrom@UString@@QAEXI@Z PROC			; UString::DeleteFrom, COMDAT
; _this$ = ecx
; Line 604
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 605
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN2@DeleteFrom
; Line 607
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _index$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 608
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	xor	eax, eax
	mov	ecx, DWORD PTR _index$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
$LN2@DeleteFrom:
; Line 610
	mov	esp, ebp
	pop	ebp
	ret	4
?DeleteFrom@UString@@QAEXI@Z ENDP			; UString::DeleteFrom
_TEXT	ENDS
PUBLIC	?GetDefaultItemPath@CArc@@QBEJIAAVUString@@@Z	; CArc::GetDefaultItemPath
PUBLIC	?ReleaseBuf_SetLen@UString@@QAEXI@Z		; UString::ReleaseBuf_SetLen
PUBLIC	?GetBuf@UString@@QAEPA_WI@Z			; UString::GetBuf
PUBLIC	??B?$CMyComPtr@UIArchiveGetRawProps@@@@QBEPAUIArchiveGetRawProps@@XZ ; CMyComPtr<IArchiveGetRawProps>::operator IArchiveGetRawProps *
PUBLIC	?GetItemPath@CArc@@QBEJIAAVUString@@@Z		; CArc::GetItemPath
xdata$x	SEGMENT
__unwindtable$?GetItemPath@CArc@@QBEJIAAVUString@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetItemPath@CArc@@QBEJIAAVUString@@@Z$0
__ehfuncinfo$?GetItemPath@CArc@@QBEJIAAVUString@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetItemPath@CArc@@QBEJIAAVUString@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv138 = -112						; size = 4
tv75 = -108						; size = 4
$T77514 = -104						; size = 4
$T77513 = -100						; size = 4
___result__$73355 = -96					; size = 4
_prop$73354 = -88					; size = 16
_c$73346 = -68						; size = 2
_i$73342 = -64						; size = 4
_s$73341 = -60						; size = 4
_len$73340 = -56					; size = 4
_propType$73336 = -48					; size = 4
_size$73335 = -36					; size = 4
_p$73334 = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_index$ = 8						; size = 4
_result$ = 12						; size = 4
?GetItemPath@CArc@@QBEJIAAVUString@@@Z PROC		; CArc::GetItemPath
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\openarchive.cpp
; Line 608
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetItemPath@CArc@@QBEJIAAVUString@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 100				; 00000064H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-112]
	mov	ecx, 25					; 00000019H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 610
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??B?$CMyComPtr@UIArchiveGetRawProps@@@@QBEPAUIArchiveGetRawProps@@XZ ; CMyComPtr<IArchiveGetRawProps>::operator IArchiveGetRawProps *
	test	eax, eax
	je	$LN14@GetItemPat@2
; Line 615
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+217]
	test	ecx, ecx
	jne	$LN14@GetItemPat@2
; Line 618
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??C?$CMyComPtr@UIArchiveGetRawProps@@@@QBEPAUIArchiveGetRawProps@@XZ ; CMyComPtr<IArchiveGetRawProps>::operator->
	mov	DWORD PTR tv75[ebp], eax
	mov	esi, esp
	lea	edx, DWORD PTR _propType$73336[ebp]
	push	edx
	lea	eax, DWORD PTR _size$73335[ebp]
	push	eax
	lea	ecx, DWORD PTR _p$73334[ebp]
	push	ecx
	push	3
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR tv75[ebp]
	push	eax
	mov	ecx, DWORD PTR tv75[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	$LN14@GetItemPat@2
	cmp	DWORD PTR _propType$73336[ebp], 81	; 00000051H
	jne	$LN14@GetItemPat@2
; Line 620
	mov	ecx, DWORD PTR _size$73335[ebp]
	shr	ecx, 1
	sub	ecx, 1
	mov	DWORD PTR _len$73340[ebp], ecx
; Line 621
	mov	edx, DWORD PTR _len$73340[ebp]
	push	edx
	mov	ecx, DWORD PTR _result$[ebp]
	call	?GetBuf@UString@@QAEPA_WI@Z		; UString::GetBuf
	mov	DWORD PTR _s$73341[ebp], eax
; Line 622
	mov	DWORD PTR _i$73342[ebp], 0
	jmp	SHORT $LN11@GetItemPat@2
$LN10@GetItemPat@2:
	mov	eax, DWORD PTR _i$73342[ebp]
	add	eax, 1
	mov	DWORD PTR _i$73342[ebp], eax
$LN11@GetItemPat@2:
	mov	ecx, DWORD PTR _i$73342[ebp]
	cmp	ecx, DWORD PTR _len$73340[ebp]
	jae	SHORT $LN9@GetItemPat@2
; Line 624
	mov	edx, DWORD PTR _p$73334[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR _c$73346[ebp], ax
; Line 625
	mov	ecx, DWORD PTR _p$73334[ebp]
	add	ecx, 2
	mov	DWORD PTR _p$73334[ebp], ecx
; Line 627
	movzx	edx, WORD PTR _c$73346[ebp]
	cmp	edx, 47					; 0000002fH
	jne	SHORT $LN8@GetItemPat@2
; Line 628
	mov	eax, 92					; 0000005cH
	mov	WORD PTR _c$73346[ebp], ax
$LN8@GetItemPat@2:
; Line 630
	mov	ecx, DWORD PTR _s$73341[ebp]
	mov	dx, WORD PTR _c$73346[ebp]
	mov	WORD PTR [ecx], dx
	mov	eax, DWORD PTR _s$73341[ebp]
	add	eax, 2
	mov	DWORD PTR _s$73341[ebp], eax
; Line 631
	jmp	SHORT $LN10@GetItemPat@2
$LN9@GetItemPat@2:
; Line 632
	xor	ecx, ecx
	mov	edx, DWORD PTR _s$73341[ebp]
	mov	WORD PTR [edx], cx
; Line 633
	mov	eax, DWORD PTR _len$73340[ebp]
	push	eax
	mov	ecx, DWORD PTR _result$[ebp]
	call	?ReleaseBuf_SetLen@UString@@QAEXI@Z	; UString::ReleaseBuf_SetLen
; Line 634
	cmp	DWORD PTR _len$73340[ebp], 0
	je	SHORT $LN14@GetItemPat@2
; Line 635
	xor	eax, eax
	jmp	$LN15@GetItemPat@2
$LN14@GetItemPat@2:
; Line 709
	lea	ecx, DWORD PTR _prop$73354[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 710
	mov	ecx, DWORD PTR _this$[ebp]
	call	??C?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator->
	mov	DWORD PTR tv138[ebp], eax
	mov	esi, esp
	lea	ecx, DWORD PTR _prop$73354[ebp]
	push	ecx
	push	3
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR tv138[ebp]
	push	eax
	mov	ecx, DWORD PTR tv138[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$73355[ebp], eax
	cmp	DWORD PTR ___result__$73355[ebp], 0
	je	SHORT $LN6@GetItemPat@2
	mov	ecx, DWORD PTR ___result__$73355[ebp]
	mov	DWORD PTR $T77513[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prop$73354[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T77513[ebp]
	jmp	SHORT $LN15@GetItemPat@2
$LN6@GetItemPat@2:
; Line 711
	movzx	edx, WORD PTR _prop$73354[ebp]
	cmp	edx, 8
	jne	SHORT $LN5@GetItemPat@2
	cmp	DWORD PTR _prop$73354[ebp+8], 0
	je	SHORT $LN5@GetItemPat@2
; Line 712
	mov	eax, DWORD PTR _prop$73354[ebp+8]
	push	eax
	mov	ecx, DWORD PTR _result$[ebp]
	call	?SetFromBstr@UString@@QAEXPA_W@Z	; UString::SetFromBstr
	jmp	SHORT $LN4@GetItemPat@2
$LN5@GetItemPat@2:
; Line 713
	movzx	ecx, WORD PTR _prop$73354[ebp]
	test	ecx, ecx
	jne	SHORT $LN3@GetItemPat@2
; Line 714
	mov	ecx, DWORD PTR _result$[ebp]
	call	?Empty@UString@@QAEXXZ			; UString::Empty
; Line 715
	jmp	SHORT $LN4@GetItemPat@2
$LN3@GetItemPat@2:
; Line 716
	mov	DWORD PTR $T77514[ebp], -2147467259	; 80004005H
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prop$73354[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T77514[ebp]
	jmp	SHORT $LN15@GetItemPat@2
$LN4@GetItemPat@2:
; Line 717
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prop$73354[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
; Line 719
	mov	ecx, DWORD PTR _result$[ebp]
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@GetItemPat@2
; Line 720
	mov	eax, DWORD PTR _result$[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetDefaultItemPath@CArc@@QBEJIAAVUString@@@Z ; CArc::GetDefaultItemPath
	jmp	SHORT $LN15@GetItemPat@2
$LN1@GetItemPat@2:
; Line 721
	xor	eax, eax
$LN15@GetItemPat@2:
; Line 722
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN24@GetItemPat@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 112				; 00000070H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN24@GetItemPat@2:
	DD	4
	DD	$LN23@GetItemPat@2
$LN23@GetItemPat@2:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN18@GetItemPat@2
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN19@GetItemPat@2
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN20@GetItemPat@2
	DD	-88					; ffffffa8H
	DD	16					; 00000010H
	DD	$LN21@GetItemPat@2
$LN21@GetItemPat@2:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
$LN20@GetItemPat@2:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	84					; 00000054H
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	0
$LN19@GetItemPat@2:
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN18@GetItemPat@2:
	DB	112					; 00000070H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?GetItemPath@CArc@@QBEJIAAVUString@@@Z$0:
	lea	ecx, DWORD PTR _prop$73354[ebp]
	jmp	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
__ehhandler$?GetItemPath@CArc@@QBEJIAAVUString@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-112]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetItemPath@CArc@@QBEJIAAVUString@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetItemPath@CArc@@QBEJIAAVUString@@@Z ENDP		; CArc::GetItemPath
EXTRN	?ReAlloc2@UString@@AAEXI@Z:PROC			; UString::ReAlloc2
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetBuf@UString@@QAEPA_WI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_minLen$ = 8						; size = 4
?GetBuf@UString@@QAEPA_WI@Z PROC			; UString::GetBuf, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 485
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 486
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _minLen$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	SHORT $LN1@GetBuf
; Line 487
	mov	edx, DWORD PTR _minLen$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReAlloc2@UString@@AAEXI@Z		; UString::ReAlloc2
$LN1@GetBuf:
; Line 488
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
; Line 489
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetBuf@UString@@QAEPA_WI@Z ENDP			; UString::GetBuf
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReleaseBuf_SetLen@UString@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newLen$ = 8						; size = 4
?ReleaseBuf_SetLen@UString@@QAEXI@Z PROC		; UString::ReleaseBuf_SetLen, COMDAT
; _this$ = ecx
; Line 500
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newLen$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?ReleaseBuf_SetLen@UString@@QAEXI@Z ENDP		; UString::ReleaseBuf_SetLen
_TEXT	ENDS
PUBLIC	??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator IInArchive *
EXTRN	??YUString@@QAEAAV0@PB_W@Z:PROC			; UString::operator+=
EXTRN	??4UString@@QAEAAV0@ABV0@@Z:PROC		; UString::operator=
xdata$x	SEGMENT
__unwindtable$?GetDefaultItemPath@CArc@@QBEJIAAVUString@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetDefaultItemPath@CArc@@QBEJIAAVUString@@@Z$0
__ehfuncinfo$?GetDefaultItemPath@CArc@@QBEJIAAVUString@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetDefaultItemPath@CArc@@QBEJIAAVUString@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv83 = -72						; size = 4
$T77532 = -68						; size = 4
$T77531 = -64						; size = 4
___result__$73376 = -60					; size = 4
_prop$73375 = -52					; size = 16
___result__$73372 = -32					; size = 4
_isDir$ = -21						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_index$ = 8						; size = 4
_result$ = 12						; size = 4
?GetDefaultItemPath@CArc@@QBEJIAAVUString@@@Z PROC	; CArc::GetDefaultItemPath
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\openarchive.cpp
; Line 725
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetDefaultItemPath@CArc@@QBEJIAAVUString@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 60					; 0000003cH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-72]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 726
	mov	ecx, DWORD PTR _result$[ebp]
	call	?Empty@UString@@QAEXXZ			; UString::Empty
; Line 728
	lea	eax, DWORD PTR _isDir$[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator IInArchive *
	push	eax
	call	?Archive_IsItem_Dir@@YGJPAUIInArchive@@IAA_N@Z ; Archive_IsItem_Dir
	mov	DWORD PTR ___result__$73372[ebp], eax
	cmp	DWORD PTR ___result__$73372[ebp], 0
	je	SHORT $LN6@GetDefault
	mov	eax, DWORD PTR ___result__$73372[ebp]
	jmp	$LN7@GetDefault
$LN6@GetDefault:
; Line 729
	movzx	edx, BYTE PTR _isDir$[ebp]
	test	edx, edx
	jne	$LN5@GetDefault
; Line 731
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 136				; 00000088H
	push	eax
	mov	ecx, DWORD PTR _result$[ebp]
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
; Line 732
	lea	ecx, DWORD PTR _prop$73375[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 733
	mov	ecx, DWORD PTR _this$[ebp]
	call	??C?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator->
	mov	DWORD PTR tv83[ebp], eax
	mov	esi, esp
	lea	ecx, DWORD PTR _prop$73375[ebp]
	push	ecx
	push	5
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR tv83[ebp]
	push	eax
	mov	ecx, DWORD PTR tv83[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$73376[ebp], eax
	cmp	DWORD PTR ___result__$73376[ebp], 0
	je	SHORT $LN4@GetDefault
	mov	ecx, DWORD PTR ___result__$73376[ebp]
	mov	DWORD PTR $T77531[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prop$73375[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T77531[ebp]
	jmp	SHORT $LN7@GetDefault
$LN4@GetDefault:
; Line 734
	movzx	edx, WORD PTR _prop$73375[ebp]
	cmp	edx, 8
	jne	SHORT $LN3@GetDefault
; Line 736
	push	46					; 0000002eH
	mov	ecx, DWORD PTR _result$[ebp]
	call	??YUString@@QAEAAV0@_W@Z		; UString::operator+=
; Line 737
	mov	eax, DWORD PTR _prop$73375[ebp+8]
	push	eax
	mov	ecx, DWORD PTR _result$[ebp]
	call	??YUString@@QAEAAV0@PB_W@Z		; UString::operator+=
	jmp	SHORT $LN2@GetDefault
$LN3@GetDefault:
; Line 739
	movzx	ecx, WORD PTR _prop$73375[ebp]
	test	ecx, ecx
	je	SHORT $LN2@GetDefault
; Line 740
	mov	DWORD PTR $T77532[ebp], -2147467259	; 80004005H
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prop$73375[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T77532[ebp]
	jmp	SHORT $LN7@GetDefault
$LN2@GetDefault:
; Line 741
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prop$73375[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
$LN5@GetDefault:
; Line 742
	xor	eax, eax
$LN7@GetDefault:
; Line 743
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@GetDefault
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 72					; 00000048H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN14@GetDefault:
	DD	2
	DD	$LN13@GetDefault
$LN13@GetDefault:
	DD	-21					; ffffffebH
	DD	1
	DD	$LN10@GetDefault
	DD	-52					; ffffffccH
	DD	16					; 00000010H
	DD	$LN11@GetDefault
$LN11@GetDefault:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
$LN10@GetDefault:
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	68					; 00000044H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?GetDefaultItemPath@CArc@@QBEJIAAVUString@@@Z$0:
	lea	ecx, DWORD PTR _prop$73375[ebp]
	jmp	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
__ehhandler$?GetDefaultItemPath@CArc@@QBEJIAAVUString@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetDefaultItemPath@CArc@@QBEJIAAVUString@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetDefaultItemPath@CArc@@QBEJIAAVUString@@@Z ENDP	; CArc::GetDefaultItemPath
PUBLIC	?GetItemPath2@CArc@@QBEJIAAVUString@@@Z		; CArc::GetItemPath2
EXTRN	?Insert@UString@@QAEXIPB_W@Z:PROC		; UString::Insert
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
___result__$73394 = -24					; size = 4
_isDeleted$73393 = -13					; size = 1
___result__$73390 = -8					; size = 4
_this$ = -4						; size = 4
_index$ = 8						; size = 4
_result$ = 12						; size = 4
?GetItemPath2@CArc@@QBEJIAAVUString@@@Z PROC		; CArc::GetItemPath2
; _this$ = ecx
; Line 746
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 747
	mov	eax, DWORD PTR _result$[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetItemPath@CArc@@QBEJIAAVUString@@@Z	; CArc::GetItemPath
	mov	DWORD PTR ___result__$73390[ebp], eax
	cmp	DWORD PTR ___result__$73390[ebp], 0
	je	SHORT $LN4@GetItemPat@3
	mov	eax, DWORD PTR ___result__$73390[ebp]
	jmp	SHORT $LN5@GetItemPat@3
$LN4@GetItemPat@3:
; Line 748
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+219]
	test	eax, eax
	je	SHORT $LN3@GetItemPat@3
; Line 750
	mov	BYTE PTR _isDeleted$73393[ebp], 0
; Line 751
	lea	ecx, DWORD PTR _isDeleted$73393[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator IInArchive *
	push	eax
	call	?Archive_IsItem_Deleted@@YGJPAUIInArchive@@IAA_N@Z ; Archive_IsItem_Deleted
	mov	DWORD PTR ___result__$73394[ebp], eax
	cmp	DWORD PTR ___result__$73394[ebp], 0
	je	SHORT $LN2@GetItemPat@3
	mov	eax, DWORD PTR ___result__$73394[ebp]
	jmp	SHORT $LN5@GetItemPat@3
$LN2@GetItemPat@3:
; Line 752
	movzx	eax, BYTE PTR _isDeleted$73393[ebp]
	test	eax, eax
	je	SHORT $LN3@GetItemPat@3
; Line 753
	push	OFFSET $SG73397
	push	0
	mov	ecx, DWORD PTR _result$[ebp]
	call	?Insert@UString@@QAEXIPB_W@Z		; UString::Insert
$LN3@GetItemPat@3:
; Line 755
	xor	eax, eax
$LN5@GetItemPat@3:
; Line 756
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@GetItemPat@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN9@GetItemPat@3:
	DD	1
	DD	$LN8@GetItemPat@3
$LN8@GetItemPat@3:
	DD	-13					; fffffff3H
	DD	1
	DD	$LN7@GetItemPat@3
$LN7@GetItemPat@3:
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
?GetItemPath2@CArc@@QBEJIAAVUString@@@Z ENDP		; CArc::GetItemPath2
_TEXT	ENDS
PUBLIC	?FindAltStreamColon_in_Path@@YGHPB_W@Z		; FindAltStreamColon_in_Path
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_c$73407 = -12						; size = 2
_colonPos$ = -8						; size = 4
_i$ = -4						; size = 4
_path$ = 8						; size = 4
?FindAltStreamColon_in_Path@@YGHPB_W@Z PROC		; FindAltStreamColon_in_Path
; Line 761
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 762
	mov	DWORD PTR _i$[ebp], 0
; Line 763
	mov	DWORD PTR _colonPos$[ebp], -1
	jmp	SHORT $LN7@FindAltStr
$LN6@FindAltStr:
; Line 764
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@FindAltStr:
; Line 766
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _path$[ebp]
	mov	ax, WORD PTR [edx+ecx*2]
	mov	WORD PTR _c$73407[ebp], ax
; Line 767
	movzx	ecx, WORD PTR _c$73407[ebp]
	test	ecx, ecx
	jne	SHORT $LN4@FindAltStr
; Line 768
	mov	eax, DWORD PTR _colonPos$[ebp]
	jmp	SHORT $LN8@FindAltStr
$LN4@FindAltStr:
; Line 769
	movzx	edx, WORD PTR _c$73407[ebp]
	cmp	edx, 58					; 0000003aH
	jne	SHORT $LN3@FindAltStr
; Line 771
	cmp	DWORD PTR _colonPos$[ebp], 0
	jge	SHORT $LN2@FindAltStr
; Line 772
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _colonPos$[ebp], eax
$LN2@FindAltStr:
; Line 773
	jmp	SHORT $LN6@FindAltStr
$LN3@FindAltStr:
; Line 775
	movzx	ecx, WORD PTR _c$73407[ebp]
	cmp	ecx, 92					; 0000005cH
	jne	SHORT $LN1@FindAltStr
; Line 776
	mov	DWORD PTR _colonPos$[ebp], -1
$LN1@FindAltStr:
; Line 777
	jmp	SHORT $LN6@FindAltStr
$LN8@FindAltStr:
; Line 778
	mov	esp, ebp
	pop	ebp
	ret	4
?FindAltStreamColon_in_Path@@YGHPB_W@Z ENDP		; FindAltStreamColon_in_Path
_TEXT	ENDS
PUBLIC	?IsEmpty@?$CObjectVector@VUString@@@@QBE_NXZ	; CObjectVector<UString>::IsEmpty
PUBLIC	?IsPathSepar@@YG_N_W@Z				; IsPathSepar
PUBLIC	??BUString@@QBEPB_WXZ				; UString::operator wchar_t const *
PUBLIC	?Clear@?$CObjectVector@VUString@@@@QAEXXZ	; CObjectVector<UString>::Clear
PUBLIC	?GetItem@CArc@@QBEJIAAUCReadArcItem@@@Z		; CArc::GetItem
EXTRN	?SplitPathToParts@@YGXABVUString@@AAV?$CObjectVector@VUString@@@@@Z:PROC ; SplitPathToParts
xdata$x	SEGMENT
__unwindtable$?GetItem@CArc@@QBEJIAAUCReadArcItem@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetItem@CArc@@QBEJIAAUCReadArcItem@@@Z$0
__ehfuncinfo$?GetItem@CArc@@QBEJIAAUCReadArcItem@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetItem@CArc@@QBEJIAAUCReadArcItem@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv301 = -148						; size = 4
tv251 = -144						; size = 4
tv161 = -140						; size = 4
tv146 = -136						; size = 4
$T77551 = -132						; size = 4
$T77550 = -128						; size = 4
$T77549 = -124						; size = 4
$T77548 = -120						; size = 4
_s$73465 = -116						; size = 4
_colon$73464 = -112					; size = 4
___result__$73460 = -108				; size = 4
_colon$73457 = -104					; size = 4
___result__$73452 = -100				; size = 4
___result__$73449 = -96					; size = 4
___result__$73436 = -92					; size = 4
_prop$73435 = -84					; size = 16
___result__$73432 = -64					; size = 4
_parentIndex$73431 = -56				; size = 4
_parentType$73430 = -44					; size = 4
_needFindAltStream$ = -33				; size = 1
___result__$73425 = -32					; size = 4
_mainIndex$ = -28					; size = 4
___result__$73421 = -24					; size = 4
___result__$73419 = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_index$ = 8						; size = 4
_item$ = 12						; size = 4
?GetItem@CArc@@QBEJIAAUCReadArcItem@@@Z PROC		; CArc::GetItem
; _this$ = ecx
; Line 783
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetItem@CArc@@QBEJIAAUCReadArcItem@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 136				; 00000088H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-148]
	mov	ecx, 34					; 00000022H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 785
	mov	eax, DWORD PTR _item$[ebp]
	mov	BYTE PTR [eax+48], 0
; Line 786
	mov	ecx, DWORD PTR _item$[ebp]
	add	ecx, 36					; 00000024H
	call	?Empty@UString@@QAEXXZ			; UString::Empty
; Line 787
	mov	ecx, DWORD PTR _item$[ebp]
	add	ecx, 24					; 00000018H
	call	?Empty@UString@@QAEXXZ			; UString::Empty
; Line 790
	mov	ecx, DWORD PTR _item$[ebp]
	mov	BYTE PTR [ecx+50], 0
; Line 791
	mov	ecx, DWORD PTR _item$[ebp]
	call	?Empty@UString@@QAEXXZ			; UString::Empty
; Line 792
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [edx+52], -1
; Line 794
	mov	ecx, DWORD PTR _item$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Clear@?$CObjectVector@VUString@@@@QAEXXZ ; CObjectVector<UString>::Clear
; Line 796
	mov	eax, DWORD PTR _item$[ebp]
	add	eax, 50					; 00000032H
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator IInArchive *
	push	eax
	call	?Archive_IsItem_Dir@@YGJPAUIInArchive@@IAA_N@Z ; Archive_IsItem_Dir
	mov	DWORD PTR ___result__$73419[ebp], eax
	cmp	DWORD PTR ___result__$73419[ebp], 0
	je	SHORT $LN27@GetItem
	mov	eax, DWORD PTR ___result__$73419[ebp]
	jmp	$LN28@GetItem
$LN27@GetItem:
; Line 797
	mov	edx, DWORD PTR _item$[ebp]
	mov	eax, DWORD PTR _item$[ebp]
	mov	cl, BYTE PTR [eax+50]
	mov	BYTE PTR [edx+51], cl
; Line 799
	mov	edx, DWORD PTR _item$[ebp]
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetItemPath2@CArc@@QBEJIAAVUString@@@Z	; CArc::GetItemPath2
	mov	DWORD PTR ___result__$73421[ebp], eax
	cmp	DWORD PTR ___result__$73421[ebp], 0
	je	SHORT $LN26@GetItem
	mov	eax, DWORD PTR ___result__$73421[ebp]
	jmp	$LN28@GetItem
$LN26@GetItem:
; Line 802
	mov	ecx, DWORD PTR _index$[ebp]
	mov	DWORD PTR _mainIndex$[ebp], ecx
; Line 807
	mov	edx, DWORD PTR _item$[ebp]
	push	edx
	mov	ecx, DWORD PTR _item$[ebp]
	add	ecx, 24					; 00000018H
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
; Line 808
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+220]
	test	ecx, ecx
	je	SHORT $LN25@GetItem
; Line 810
	mov	edx, DWORD PTR _item$[ebp]
	add	edx, 48					; 00000030H
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator IInArchive *
	push	eax
	call	?Archive_IsItem_AltStream@@YGJPAUIInArchive@@IAA_N@Z ; Archive_IsItem_AltStream
	mov	DWORD PTR ___result__$73425[ebp], eax
	cmp	DWORD PTR ___result__$73425[ebp], 0
	je	SHORT $LN25@GetItem
	mov	eax, DWORD PTR ___result__$73425[ebp]
	jmp	$LN28@GetItem
$LN25@GetItem:
; Line 813
	mov	BYTE PTR _needFindAltStream$[ebp], 0
; Line 815
	mov	ecx, DWORD PTR _item$[ebp]
	movzx	edx, BYTE PTR [ecx+48]
	test	edx, edx
	je	$LN23@GetItem
; Line 817
	mov	BYTE PTR _needFindAltStream$[ebp], 1
; Line 818
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??B?$CMyComPtr@UIArchiveGetRawProps@@@@QBEPAUIArchiveGetRawProps@@XZ ; CMyComPtr<IArchiveGetRawProps>::operator IArchiveGetRawProps *
	test	eax, eax
	je	$LN23@GetItem
; Line 820
	mov	DWORD PTR _parentType$73430[ebp], 0
; Line 822
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??C?$CMyComPtr@UIArchiveGetRawProps@@@@QBEPAUIArchiveGetRawProps@@XZ ; CMyComPtr<IArchiveGetRawProps>::operator->
	mov	DWORD PTR tv146[ebp], eax
	mov	esi, esp
	lea	eax, DWORD PTR _parentType$73430[ebp]
	push	eax
	lea	ecx, DWORD PTR _parentIndex$73431[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR tv146[ebp]
	push	eax
	mov	ecx, DWORD PTR tv146[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$73432[ebp], eax
	cmp	DWORD PTR ___result__$73432[ebp], 0
	je	SHORT $LN21@GetItem
	mov	eax, DWORD PTR ___result__$73432[ebp]
	jmp	$LN28@GetItem
$LN21@GetItem:
; Line 823
	cmp	DWORD PTR _parentType$73430[ebp], 1
	jne	$LN23@GetItem
; Line 825
	lea	ecx, DWORD PTR _prop$73435[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 826
	mov	ecx, DWORD PTR _this$[ebp]
	call	??C?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator->
	mov	DWORD PTR tv161[ebp], eax
	mov	esi, esp
	lea	ecx, DWORD PTR _prop$73435[ebp]
	push	ecx
	push	4
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR tv161[ebp]
	push	eax
	mov	ecx, DWORD PTR tv161[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$73436[ebp], eax
	cmp	DWORD PTR ___result__$73436[ebp], 0
	je	SHORT $LN19@GetItem
	mov	ecx, DWORD PTR ___result__$73436[ebp]
	mov	DWORD PTR $T77548[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prop$73435[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T77548[ebp]
	jmp	$LN28@GetItem
$LN19@GetItem:
; Line 827
	movzx	edx, WORD PTR _prop$73435[ebp]
	cmp	edx, 8
	jne	SHORT $LN18@GetItem
	cmp	DWORD PTR _prop$73435[ebp+8], 0
	je	SHORT $LN18@GetItem
; Line 828
	mov	eax, DWORD PTR _prop$73435[ebp+8]
	push	eax
	mov	ecx, DWORD PTR _item$[ebp]
	add	ecx, 36					; 00000024H
	call	?SetFromBstr@UString@@QAEXPA_W@Z	; UString::SetFromBstr
	jmp	SHORT $LN17@GetItem
$LN18@GetItem:
; Line 829
	movzx	ecx, WORD PTR _prop$73435[ebp]
	test	ecx, ecx
	je	SHORT $LN17@GetItem
; Line 830
	mov	DWORD PTR $T77549[ebp], -2147467259	; 80004005H
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prop$73435[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T77549[ebp]
	jmp	$LN28@GetItem
$LN17@GetItem:
; Line 840
	mov	BYTE PTR _needFindAltStream$[ebp], 0
; Line 841
	mov	edx, DWORD PTR _item$[ebp]
	mov	eax, DWORD PTR _parentIndex$73431[ebp]
	mov	DWORD PTR [edx+52], eax
; Line 842
	mov	ecx, DWORD PTR _parentIndex$73431[ebp]
	mov	DWORD PTR _mainIndex$[ebp], ecx
; Line 844
	cmp	DWORD PTR _parentIndex$73431[ebp], -1
	jne	SHORT $LN14@GetItem
; Line 846
	mov	ecx, DWORD PTR _item$[ebp]
	add	ecx, 24					; 00000018H
	call	?Empty@UString@@QAEXXZ			; UString::Empty
; Line 847
	mov	edx, DWORD PTR _item$[ebp]
	mov	BYTE PTR [edx+51], 1
; Line 849
	jmp	SHORT $LN13@GetItem
$LN14@GetItem:
; Line 851
	mov	eax, DWORD PTR _item$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _parentIndex$73431[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetItemPath2@CArc@@QBEJIAAVUString@@@Z	; CArc::GetItemPath2
	mov	DWORD PTR ___result__$73449[ebp], eax
	cmp	DWORD PTR ___result__$73449[ebp], 0
	je	SHORT $LN12@GetItem
	mov	edx, DWORD PTR ___result__$73449[ebp]
	mov	DWORD PTR $T77550[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prop$73435[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T77550[ebp]
	jmp	$LN28@GetItem
$LN12@GetItem:
; Line 852
	mov	eax, DWORD PTR _item$[ebp]
	add	eax, 51					; 00000033H
	push	eax
	mov	ecx, DWORD PTR _parentIndex$73431[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator IInArchive *
	push	eax
	call	?Archive_IsItem_Dir@@YGJPAUIInArchive@@IAA_N@Z ; Archive_IsItem_Dir
	mov	DWORD PTR ___result__$73452[ebp], eax
	cmp	DWORD PTR ___result__$73452[ebp], 0
	je	SHORT $LN13@GetItem
	mov	edx, DWORD PTR ___result__$73452[ebp]
	mov	DWORD PTR $T77551[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prop$73435[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T77551[ebp]
	jmp	$LN28@GetItem
$LN13@GetItem:
; Line 854
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prop$73435[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
$LN23@GetItem:
; Line 858
	mov	eax, DWORD PTR _item$[ebp]
	movzx	ecx, BYTE PTR [eax+49]
	test	ecx, ecx
	jne	SHORT $LN9@GetItem
	movzx	edx, BYTE PTR _needFindAltStream$[ebp]
	test	edx, edx
	je	$LN10@GetItem
$LN9@GetItem:
; Line 862
	mov	ecx, DWORD PTR _item$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	?FindAltStreamColon_in_Path@@YGHPB_W@Z	; FindAltStreamColon_in_Path
	mov	DWORD PTR _colon$73457[ebp], eax
; Line 863
	cmp	DWORD PTR _colon$73457[ebp], 0
	jl	SHORT $LN10@GetItem
; Line 865
	mov	eax, DWORD PTR _colon$73457[ebp]
	push	eax
	mov	ecx, DWORD PTR _item$[ebp]
	add	ecx, 24					; 00000018H
	call	?DeleteFrom@UString@@QAEXI@Z		; UString::DeleteFrom
; Line 866
	mov	ecx, DWORD PTR _colon$73457[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _item$[ebp]
	call	?Ptr@UString@@QBEPB_WI@Z		; UString::Ptr
	push	eax
	mov	ecx, DWORD PTR _item$[ebp]
	add	ecx, 36					; 00000024H
	call	??4UString@@QAEAAV0@PB_W@Z		; UString::operator=
; Line 867
	cmp	DWORD PTR _colon$73457[ebp], 0
	je	SHORT $LN30@GetItem
	mov	ecx, DWORD PTR _item$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	edx, DWORD PTR _colon$73457[ebp]
	movzx	eax, WORD PTR [eax+edx*2-2]
	push	eax
	call	?IsPathSepar@@YG_N_W@Z			; IsPathSepar
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN30@GetItem
	mov	DWORD PTR tv251[ebp], 0
	jmp	SHORT $LN31@GetItem
$LN30@GetItem:
	mov	DWORD PTR tv251[ebp], 1
$LN31@GetItem:
	mov	edx, DWORD PTR _item$[ebp]
	mov	al, BYTE PTR tv251[ebp]
	mov	BYTE PTR [edx+51], al
; Line 868
	mov	ecx, DWORD PTR _item$[ebp]
	mov	BYTE PTR [ecx+48], 1
$LN10@GetItem:
; Line 875
	mov	edx, DWORD PTR _item$[ebp]
	movzx	eax, BYTE PTR [edx+56]
	test	eax, eax
	je	$LN7@GetItem
; Line 877
	mov	ecx, DWORD PTR _item$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	edx, DWORD PTR _item$[ebp]
	mov	eax, DWORD PTR [edx+60]
	push	eax
	mov	ecx, DWORD PTR _mainIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetItemPathToParent@CArc@@ABEJIIAAV?$CObjectVector@VUString@@@@@Z ; CArc::GetItemPathToParent
	mov	DWORD PTR ___result__$73460[ebp], eax
	cmp	DWORD PTR ___result__$73460[ebp], 0
	je	SHORT $LN6@GetItem
	mov	eax, DWORD PTR ___result__$73460[ebp]
	jmp	$LN28@GetItem
$LN6@GetItem:
; Line 880
	mov	edx, DWORD PTR _item$[ebp]
	movzx	eax, BYTE PTR [edx+49]
	test	eax, eax
	jne	SHORT $LN4@GetItem
	movzx	ecx, BYTE PTR _needFindAltStream$[ebp]
	test	ecx, ecx
	je	$LN5@GetItem
$LN4@GetItem:
	mov	ecx, DWORD PTR _item$[ebp]
	add	ecx, 12					; 0000000cH
	call	?IsEmpty@?$CObjectVector@VUString@@@@QBE_NXZ ; CObjectVector<UString>::IsEmpty
	movzx	edx, al
	test	edx, edx
	jne	$LN5@GetItem
; Line 884
	mov	ecx, DWORD PTR _item$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Back@?$CObjectVector@VUString@@@@QAEAAVUString@@XZ ; CObjectVector<UString>::Back
	mov	DWORD PTR _s$73465[ebp], eax
; Line 885
	mov	ecx, DWORD PTR _s$73465[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	?FindAltStreamColon_in_Path@@YGHPB_W@Z	; FindAltStreamColon_in_Path
	mov	DWORD PTR _colon$73464[ebp], eax
; Line 886
	cmp	DWORD PTR _colon$73464[ebp], 0
	jl	SHORT $LN3@GetItem
; Line 888
	mov	eax, DWORD PTR _colon$73464[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _s$73465[ebp]
	call	?Ptr@UString@@QBEPB_WI@Z		; UString::Ptr
	push	eax
	mov	ecx, DWORD PTR _item$[ebp]
	add	ecx, 36					; 00000024H
	call	??4UString@@QAEAAV0@PB_W@Z		; UString::operator=
; Line 889
	cmp	DWORD PTR _colon$73464[ebp], 0
	je	SHORT $LN32@GetItem
	mov	ecx, DWORD PTR _s$73465[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	ecx, DWORD PTR _colon$73464[ebp]
	movzx	edx, WORD PTR [eax+ecx*2-2]
	push	edx
	call	?IsPathSepar@@YG_N_W@Z			; IsPathSepar
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN32@GetItem
	mov	DWORD PTR tv301[ebp], 0
	jmp	SHORT $LN33@GetItem
$LN32@GetItem:
	mov	DWORD PTR tv301[ebp], 1
$LN33@GetItem:
	mov	ecx, DWORD PTR _item$[ebp]
	mov	dl, BYTE PTR tv301[ebp]
	mov	BYTE PTR [ecx+51], dl
; Line 890
	mov	eax, DWORD PTR _item$[ebp]
	mov	BYTE PTR [eax+48], 1
; Line 891
	mov	ecx, DWORD PTR _colon$73464[ebp]
	push	ecx
	mov	ecx, DWORD PTR _s$73465[ebp]
	call	?DeleteFrom@UString@@QAEXI@Z		; UString::DeleteFrom
$LN3@GetItem:
; Line 894
	cmp	DWORD PTR _colon$73464[ebp], 0
	jne	SHORT $LN5@GetItem
; Line 895
	mov	ecx, DWORD PTR _item$[ebp]
	add	ecx, 12					; 0000000cH
	call	?DeleteBack@?$CObjectVector@VUString@@@@QAEXXZ ; CObjectVector<UString>::DeleteBack
$LN5@GetItem:
; Line 900
	jmp	SHORT $LN1@GetItem
$LN7@GetItem:
; Line 908
	mov	edx, DWORD PTR _item$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	eax, DWORD PTR _item$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	call	?SplitPathToParts@@YGXABVUString@@AAV?$CObjectVector@VUString@@@@@Z ; SplitPathToParts
$LN1@GetItem:
; Line 910
	xor	eax, eax
$LN28@GetItem:
; Line 911
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN40@GetItem
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 148				; 00000094H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN40@GetItem:
	DD	3
	DD	$LN39@GetItem
$LN39@GetItem:
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN35@GetItem
	DD	-56					; ffffffc8H
	DD	4
	DD	$LN36@GetItem
	DD	-84					; ffffffacH
	DD	16					; 00000010H
	DD	$LN37@GetItem
$LN37@GetItem:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
$LN36@GetItem:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	0
$LN35@GetItem:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	84					; 00000054H
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?GetItem@CArc@@QBEJIAAUCReadArcItem@@@Z$0:
	lea	ecx, DWORD PTR _prop$73435[ebp]
	jmp	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
__ehhandler$?GetItem@CArc@@QBEJIAAUCReadArcItem@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-148]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetItem@CArc@@QBEJIAAUCReadArcItem@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetItem@CArc@@QBEJIAAUCReadArcItem@@@Z ENDP		; CArc::GetItem
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsPathSepar@@YG_N_W@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
_c$ = 8							; size = 2
?IsPathSepar@@YG_N_W@Z PROC				; IsPathSepar, COMDAT
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	movzx	eax, WORD PTR _c$[ebp]
	cmp	eax, 92					; 0000005cH
	je	SHORT $LN3@IsPathSepa
	movzx	ecx, WORD PTR _c$[ebp]
	cmp	ecx, 47					; 0000002fH
	je	SHORT $LN3@IsPathSepa
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@IsPathSepa
$LN3@IsPathSepa:
	mov	DWORD PTR tv68[ebp], 1
$LN4@IsPathSepa:
	mov	al, BYTE PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsPathSepar@@YG_N_W@Z ENDP				; IsPathSepar
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??BUString@@QBEPB_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BUString@@QBEPB_WXZ PROC				; UString::operator wchar_t const *, COMDAT
; _this$ = ecx
; Line 476
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??BUString@@QBEPB_WXZ ENDP				; UString::operator wchar_t const *
_TEXT	ENDS
PUBLIC	?GetItemSize@CArc@@QBEJIAA_KAA_N@Z		; CArc::GetItemSize
xdata$x	SEGMENT
__unwindtable$?GetItemSize@CArc@@QBEJIAA_KAA_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetItemSize@CArc@@QBEJIAA_KAA_N@Z$0
__ehfuncinfo$?GetItemSize@CArc@@QBEJIAA_KAA_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetItemSize@CArc@@QBEJIAA_KAA_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv88 = -68						; size = 4
tv70 = -64						; size = 4
$T77576 = -60						; size = 4
$T77575 = -56						; size = 4
$T77574 = -52						; size = 4
$T77573 = -48						; size = 4
___result__$73505 = -44					; size = 4
_prop$ = -36						; size = 16
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_index$ = 8						; size = 4
_size$ = 12						; size = 4
_defined$ = 16						; size = 4
?GetItemSize@CArc@@QBEJIAA_KAA_N@Z PROC			; CArc::GetItemSize
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\openarchive.cpp
; Line 937
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetItemSize@CArc@@QBEJIAA_KAA_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 56					; 00000038H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-68]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 938
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 939
	mov	eax, DWORD PTR _defined$[ebp]
	mov	BYTE PTR [eax], 0
; Line 940
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
; Line 941
	mov	ecx, DWORD PTR _this$[ebp]
	call	??C?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator->
	mov	DWORD PTR tv70[ebp], eax
	mov	esi, esp
	lea	edx, DWORD PTR _prop$[ebp]
	push	edx
	push	7
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv70[ebp]
	push	ecx
	mov	edx, DWORD PTR tv70[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$73505[ebp], eax
	cmp	DWORD PTR ___result__$73505[ebp], 0
	je	SHORT $LN9@GetItemSiz
	mov	edx, DWORD PTR ___result__$73505[ebp]
	mov	DWORD PTR $T77573[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T77573[ebp]
	jmp	$LN10@GetItemSiz
$LN9@GetItemSiz:
; Line 942
	movzx	eax, WORD PTR _prop$[ebp]
	mov	DWORD PTR tv88[ebp], eax
	cmp	DWORD PTR tv88[ebp], 21			; 00000015H
	ja	SHORT $LN1@GetItemSiz
	mov	ecx, DWORD PTR tv88[ebp]
	movzx	edx, BYTE PTR $LN13@GetItemSiz[ecx]
	jmp	DWORD PTR $LN18@GetItemSiz[edx*4]
$LN6@GetItemSiz:
; Line 944
	movzx	eax, BYTE PTR _prop$[ebp+8]
	cdq
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
	jmp	SHORT $LN7@GetItemSiz
$LN5@GetItemSiz:
; Line 945
	movzx	eax, WORD PTR _prop$[ebp+8]
	cdq
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
	jmp	SHORT $LN7@GetItemSiz
$LN4@GetItemSiz:
; Line 946
	mov	edx, DWORD PTR _prop$[ebp+8]
	xor	eax, eax
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	jmp	SHORT $LN7@GetItemSiz
$LN3@GetItemSiz:
; Line 947
	mov	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR _prop$[ebp+8]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _prop$[ebp+12]
	mov	DWORD PTR [edx+4], ecx
	jmp	SHORT $LN7@GetItemSiz
$LN2@GetItemSiz:
; Line 948
	mov	DWORD PTR $T77574[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T77574[ebp]
	jmp	SHORT $LN10@GetItemSiz
$LN1@GetItemSiz:
; Line 949
	mov	DWORD PTR $T77575[ebp], -2147467259	; 80004005H
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T77575[ebp]
	jmp	SHORT $LN10@GetItemSiz
$LN7@GetItemSiz:
; Line 951
	mov	edx, DWORD PTR _defined$[ebp]
	mov	BYTE PTR [edx], 1
; Line 952
	mov	DWORD PTR $T77576[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T77576[ebp]
$LN10@GetItemSiz:
; Line 953
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@GetItemSiz
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 68					; 00000044H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN17@GetItemSiz:
	DD	1
	DD	$LN16@GetItemSiz
$LN16@GetItemSiz:
	DD	-36					; ffffffdcH
	DD	16					; 00000010H
	DD	$LN14@GetItemSiz
$LN14@GetItemSiz:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
	npad	3
$LN18@GetItemSiz:
	DD	$LN2@GetItemSiz
	DD	$LN6@GetItemSiz
	DD	$LN5@GetItemSiz
	DD	$LN4@GetItemSiz
	DD	$LN3@GetItemSiz
	DD	$LN1@GetItemSiz
$LN13@GetItemSiz:
	DB	0
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	1
	DB	2
	DB	3
	DB	5
	DB	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?GetItemSize@CArc@@QBEJIAA_KAA_N@Z$0:
	lea	ecx, DWORD PTR _prop$[ebp]
	jmp	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
__ehhandler$?GetItemSize@CArc@@QBEJIAA_KAA_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-68]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetItemSize@CArc@@QBEJIAA_KAA_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetItemSize@CArc@@QBEJIAA_KAA_N@Z ENDP			; CArc::GetItemSize
PUBLIC	?GetItemMTime@CArc@@QBEJIAAU_FILETIME@@AA_N@Z	; CArc::GetItemMTime
xdata$x	SEGMENT
__unwindtable$?GetItemMTime@CArc@@QBEJIAAU_FILETIME@@AA_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetItemMTime@CArc@@QBEJIAAU_FILETIME@@AA_N@Z$0
__ehfuncinfo$?GetItemMTime@CArc@@QBEJIAAU_FILETIME@@AA_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetItemMTime@CArc@@QBEJIAAU_FILETIME@@AA_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv71 = -60						; size = 4
$T77590 = -56						; size = 4
$T77589 = -52						; size = 4
$T77588 = -48						; size = 4
___result__$73532 = -44					; size = 4
_prop$ = -36						; size = 16
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_index$ = 8						; size = 4
_ft$ = 12						; size = 4
_defined$ = 16						; size = 4
?GetItemMTime@CArc@@QBEJIAAU_FILETIME@@AA_N@Z PROC	; CArc::GetItemMTime
; _this$ = ecx
; Line 956
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetItemMTime@CArc@@QBEJIAAU_FILETIME@@AA_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 48					; 00000030H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 957
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 958
	mov	eax, DWORD PTR _defined$[ebp]
	mov	BYTE PTR [eax], 0
; Line 959
	mov	ecx, DWORD PTR _ft$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	edx, DWORD PTR _ft$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 960
	mov	ecx, DWORD PTR _this$[ebp]
	call	??C?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator->
	mov	DWORD PTR tv71[ebp], eax
	mov	esi, esp
	lea	eax, DWORD PTR _prop$[ebp]
	push	eax
	push	12					; 0000000cH
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv71[ebp]
	push	edx
	mov	eax, DWORD PTR tv71[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$73532[ebp], eax
	cmp	DWORD PTR ___result__$73532[ebp], 0
	je	SHORT $LN6@GetItemMTi
	mov	eax, DWORD PTR ___result__$73532[ebp]
	mov	DWORD PTR $T77588[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T77588[ebp]
	jmp	$LN7@GetItemMTi
$LN6@GetItemMTi:
; Line 961
	movzx	ecx, WORD PTR _prop$[ebp]
	cmp	ecx, 64					; 00000040H
	jne	SHORT $LN5@GetItemMTi
; Line 963
	mov	edx, DWORD PTR _ft$[ebp]
	mov	eax, DWORD PTR _prop$[ebp+8]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _prop$[ebp+12]
	mov	DWORD PTR [edx+4], ecx
; Line 964
	mov	edx, DWORD PTR _defined$[ebp]
	mov	BYTE PTR [edx], 1
	jmp	SHORT $LN4@GetItemMTi
$LN5@GetItemMTi:
; Line 966
	movzx	eax, WORD PTR _prop$[ebp]
	test	eax, eax
	je	SHORT $LN3@GetItemMTi
; Line 967
	mov	DWORD PTR $T77589[ebp], -2147467259	; 80004005H
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T77589[ebp]
	jmp	SHORT $LN7@GetItemMTi
	jmp	SHORT $LN4@GetItemMTi
$LN3@GetItemMTi:
; Line 968
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+164]
	test	edx, edx
	je	SHORT $LN4@GetItemMTi
; Line 970
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	edx, DWORD PTR [eax+160]
	mov	eax, DWORD PTR _ft$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
; Line 971
	mov	ecx, DWORD PTR _defined$[ebp]
	mov	BYTE PTR [ecx], 1
$LN4@GetItemMTi:
; Line 973
	mov	DWORD PTR $T77590[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T77590[ebp]
$LN7@GetItemMTi:
; Line 974
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@GetItemMTi
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN13@GetItemMTi:
	DD	1
	DD	$LN12@GetItemMTi
$LN12@GetItemMTi:
	DD	-36					; ffffffdcH
	DD	16					; 00000010H
	DD	$LN10@GetItemMTi
$LN10@GetItemMTi:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?GetItemMTime@CArc@@QBEJIAAU_FILETIME@@AA_N@Z$0:
	lea	ecx, DWORD PTR _prop$[ebp]
	jmp	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
__ehhandler$?GetItemMTime@CArc@@QBEJIAAU_FILETIME@@AA_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-60]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetItemMTime@CArc@@QBEJIAAU_FILETIME@@AA_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetItemMTime@CArc@@QBEJIAAU_FILETIME@@AA_N@Z ENDP	; CArc::GetItemMTime
PUBLIC	??C?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ ; CMyComPtr<ICryptoGetTextPassword>::operator->
PUBLIC	??B?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ ; CMyComPtr<ICryptoGetTextPassword>::operator ICryptoGetTextPassword *
PUBLIC	?CryptoGetTextPassword@CArchiveOpenCallback_Offset@@UAGJPAPA_W@Z ; CArchiveOpenCallback_Offset::CryptoGetTextPassword
xdata$x	SEGMENT
__catchsym$?CryptoGetTextPassword@CArchiveOpenCallback_Offset@@UAGJPAPA_W@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?CryptoGetTextPassword@CArchiveOpenCallback_Offset@@UAGJPAPA_W@Z$0
__unwindtable$?CryptoGetTextPassword@CArchiveOpenCallback_Offset@@UAGJPAPA_W@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?CryptoGetTextPassword@CArchiveOpenCallback_Offset@@UAGJPAPA_W@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?CryptoGetTextPassword@CArchiveOpenCallback_Offset@@UAGJPAPA_W@Z$2
__ehfuncinfo$?CryptoGetTextPassword@CArchiveOpenCallback_Offset@@UAGJPAPA_W@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?CryptoGetTextPassword@CArchiveOpenCallback_Offset@@UAGJPAPA_W@Z
	DD	01H
	DD	FLAT:__tryblocktable$?CryptoGetTextPassword@CArchiveOpenCallback_Offset@@UAGJPAPA_W@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv82 = -36						; size = 4
tv74 = -32						; size = 4
tv81 = -28						; size = 4
tv80 = -24						; size = 4
$T77600 = -20						; size = 4
__$EHRec$ = -16						; size = 16
_this$ = 8						; size = 4
_password$ = 12						; size = 4
?CryptoGetTextPassword@CArchiveOpenCallback_Offset@@UAGJPAPA_W@Z PROC ; CArchiveOpenCallback_Offset::CryptoGetTextPassword
; Line 1113
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CryptoGetTextPassword@CArchiveOpenCallback_Offset@@UAGJPAPA_W@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 20					; 00000014H
	push	ebx
	push	esi
	push	edi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
; Line 1114
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 1115
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??B?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ ; CMyComPtr<ICryptoGetTextPassword>::operator ICryptoGetTextPassword *
	mov	DWORD PTR tv80[ebp], eax
	cmp	DWORD PTR tv80[ebp], 0
	je	SHORT $LN1@CryptoGetT
; Line 1116
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??C?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ ; CMyComPtr<ICryptoGetTextPassword>::operator->
	mov	DWORD PTR tv81[ebp], eax
	mov	eax, DWORD PTR tv81[ebp]
	mov	DWORD PTR tv74[ebp], eax
	mov	esi, esp
	mov	ecx, DWORD PTR _password$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv74[ebp]
	push	edx
	mov	eax, DWORD PTR tv74[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv82[ebp], eax
	mov	eax, DWORD PTR tv82[ebp]
	jmp	SHORT $LN3@CryptoGetT
$LN1@CryptoGetT:
; Line 1117
	mov	eax, -2147467263			; 80004001H
	jmp	SHORT $LN3@CryptoGetT
__catch$?CryptoGetTextPassword@CArchiveOpenCallback_Offset@@UAGJPAPA_W@Z$0:
; Line 1118
	mov	DWORD PTR $T77600[ebp], -2147024882	; 8007000eH
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN8@CryptoGetT
	ret	0
	mov	eax, __tryend$?CryptoGetTextPassword@CArchiveOpenCallback_Offset@@UAGJPAPA_W@Z$1
	ret	0
__tryend$?CryptoGetTextPassword@CArchiveOpenCallback_Offset@@UAGJPAPA_W@Z$1:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN3@CryptoGetT
$LN8@CryptoGetT:
	mov	eax, DWORD PTR $T77600[ebp]
$LN3@CryptoGetT:
; Line 1119
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__ehhandler$?CryptoGetTextPassword@CArchiveOpenCallback_Offset@@UAGJPAPA_W@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CryptoGetTextPassword@CArchiveOpenCallback_Offset@@UAGJPAPA_W@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CryptoGetTextPassword@CArchiveOpenCallback_Offset@@UAGJPAPA_W@Z ENDP ; CArchiveOpenCallback_Offset::CryptoGetTextPassword
PUBLIC	?SetTotal@CArchiveOpenCallback_Offset@@UAGJPB_K0@Z ; CArchiveOpenCallback_Offset::SetTotal
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
?SetTotal@CArchiveOpenCallback_Offset@@UAGJPB_K0@Z PROC	; CArchiveOpenCallback_Offset::SetTotal
; Line 1123
	push	ebp
	mov	ebp, esp
; Line 1124
	xor	eax, eax
; Line 1125
	pop	ebp
	ret	12					; 0000000cH
?SetTotal@CArchiveOpenCallback_Offset@@UAGJPB_K0@Z ENDP	; CArchiveOpenCallback_Offset::SetTotal
_TEXT	ENDS
PUBLIC	??C?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ ; CMyComPtr<IArchiveOpenCallback>::operator->
PUBLIC	??7?$CMyComPtr@UIArchiveOpenCallback@@@@QBE_NXZ	; CMyComPtr<IArchiveOpenCallback>::operator!
PUBLIC	?SetCompleted@CArchiveOpenCallback_Offset@@UAGJPB_K0@Z ; CArchiveOpenCallback_Offset::SetCompleted
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv76 = -20						; size = 4
_value$ = -12						; size = 8
_this$ = 8						; size = 4
___formal$ = 12						; size = 4
_bytes$ = 16						; size = 4
?SetCompleted@CArchiveOpenCallback_Offset@@UAGJPB_K0@Z PROC ; CArchiveOpenCallback_Offset::SetCompleted
; Line 1128
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1129
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??7?$CMyComPtr@UIArchiveOpenCallback@@@@QBE_NXZ ; CMyComPtr<IArchiveOpenCallback>::operator!
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@SetComplet
; Line 1130
	xor	eax, eax
	jmp	SHORT $LN3@SetComplet
$LN2@SetComplet:
; Line 1131
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _value$[ebp], edx
	mov	eax, DWORD PTR [ecx+28]
	mov	DWORD PTR _value$[ebp+4], eax
; Line 1132
	cmp	DWORD PTR _bytes$[ebp], 0
	je	SHORT $LN1@SetComplet
; Line 1133
	mov	ecx, DWORD PTR _bytes$[ebp]
	mov	edx, DWORD PTR _value$[ebp]
	add	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _value$[ebp+4]
	adc	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _value$[ebp], edx
	mov	DWORD PTR _value$[ebp+4], eax
$LN1@SetComplet:
; Line 1134
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??C?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ ; CMyComPtr<IArchiveOpenCallback>::operator->
	mov	DWORD PTR tv76[ebp], eax
	mov	esi, esp
	lea	ecx, DWORD PTR _value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 16					; 00000010H
	push	edx
	mov	eax, DWORD PTR tv76[ebp]
	push	eax
	mov	ecx, DWORD PTR tv76[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@SetComplet:
; Line 1135
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@SetComplet
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN7@SetComplet:
	DD	1
	DD	$LN6@SetComplet
$LN6@SetComplet:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN5@SetComplet
$LN5@SetComplet:
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	0
?SetCompleted@CArchiveOpenCallback_Offset@@UAGJPB_K0@Z ENDP ; CArchiveOpenCallback_Offset::SetCompleted
_TEXT	ENDS
PUBLIC	__TI1H
PUBLIC	?GetOpenArcErrorFlags@@YGIABVCPropVariant@NCOM@NWindows@@PA_N@Z ; GetOpenArcErrorFlags
PUBLIC	__CTA1H
PUBLIC	__CT??_R0H@84
PUBLIC	??_R0H@8					; int `RTTI Type Descriptor'
EXTRN	__CxxThrowException@8:PROC
;	COMDAT ??_R0H@8
_DATA	SEGMENT
??_R0H@8 DD	FLAT:??_7type_info@@6B@			; int `RTTI Type Descriptor'
	DD	00H
	DB	'.H', 00H
_DATA	ENDS
;	COMDAT __CT??_R0H@84
xdata$x	SEGMENT
__CT??_R0H@84 DD 01H
	DD	FLAT:??_R0H@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	00H
xdata$x	ENDS
;	COMDAT __CTA1H
xdata$x	SEGMENT
__CTA1H	DD	01H
	DD	FLAT:__CT??_R0H@84
xdata$x	ENDS
;	COMDAT __TI1H
xdata$x	SEGMENT
__TI1H	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA1H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv71 = -8						; size = 4
$T77618 = -4						; size = 4
_prop$ = 8						; size = 4
_isDefinedProp$ = 12					; size = 4
?GetOpenArcErrorFlags@@YGIABVCPropVariant@NCOM@NWindows@@PA_N@Z PROC ; GetOpenArcErrorFlags
; Line 1140
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1141
	cmp	DWORD PTR _isDefinedProp$[ebp], 0
	je	SHORT $LN9@GetOpenArc
; Line 1142
	mov	eax, DWORD PTR _isDefinedProp$[ebp]
	mov	BYTE PTR [eax], 0
$LN9@GetOpenArc:
; Line 1144
	mov	ecx, DWORD PTR _prop$[ebp]
	movzx	edx, WORD PTR [ecx]
	mov	DWORD PTR tv71[ebp], edx
	cmp	DWORD PTR tv71[ebp], 0
	je	SHORT $LN2@GetOpenArc
	cmp	DWORD PTR tv71[ebp], 19			; 00000013H
	je	SHORT $LN4@GetOpenArc
	cmp	DWORD PTR tv71[ebp], 21			; 00000015H
	je	SHORT $LN6@GetOpenArc
	jmp	SHORT $LN1@GetOpenArc
$LN6@GetOpenArc:
; Line 1146
	cmp	DWORD PTR _isDefinedProp$[ebp], 0
	je	SHORT $LN5@GetOpenArc
	mov	eax, DWORD PTR _isDefinedProp$[ebp]
	mov	BYTE PTR [eax], 1
$LN5@GetOpenArc:
	mov	ecx, DWORD PTR _prop$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	jmp	SHORT $LN11@GetOpenArc
$LN4@GetOpenArc:
; Line 1147
	cmp	DWORD PTR _isDefinedProp$[ebp], 0
	je	SHORT $LN3@GetOpenArc
	mov	edx, DWORD PTR _isDefinedProp$[ebp]
	mov	BYTE PTR [edx], 1
$LN3@GetOpenArc:
	mov	eax, DWORD PTR _prop$[ebp]
	mov	eax, DWORD PTR [eax+8]
	jmp	SHORT $LN11@GetOpenArc
$LN2@GetOpenArc:
; Line 1148
	xor	eax, eax
	jmp	SHORT $LN11@GetOpenArc
$LN1@GetOpenArc:
; Line 1149
	mov	DWORD PTR $T77618[ebp], 151199		; 00024e9fH
	push	OFFSET __TI1H
	lea	ecx, DWORD PTR $T77618[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN11@GetOpenArc:
; Line 1151
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?GetOpenArcErrorFlags@@YGIABVCPropVariant@NCOM@NWindows@@PA_N@Z ENDP ; GetOpenArcErrorFlags
_TEXT	ENDS
PUBLIC	?ClearErrors@CArcErrorInfo@@QAEXXZ		; CArcErrorInfo::ClearErrors
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ClearErrors@CArcErrorInfo@@QAEXXZ PROC			; CArcErrorInfo::ClearErrors
; _this$ = ecx
; Line 1154
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1157
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax], 0
; Line 1158
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1], 0
; Line 1159
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+2], 0
; Line 1161
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+3], 0
; Line 1162
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 1163
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
; Line 1164
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0
	mov	DWORD PTR [eax+20], 0
; Line 1166
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?Empty@UString@@QAEXXZ			; UString::Empty
; Line 1167
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	?Empty@UString@@QAEXXZ			; UString::Empty
; Line 1168
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ClearErrors@CArcErrorInfo@@QAEXXZ ENDP			; CArcErrorInfo::ClearErrors
_TEXT	ENDS
PUBLIC	?IsArc_After_NonOpen@CArcErrorInfo@@QBE_NXZ	; CArcErrorInfo::IsArc_After_NonOpen
PUBLIC	?ReadBasicProps@CArc@@QAEJPAUIInArchive@@_KJ@Z	; CArc::ReadBasicProps
xdata$x	SEGMENT
__unwindtable$?ReadBasicProps@CArc@@QAEJPAUIInArchive@@_KJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ReadBasicProps@CArc@@QAEJPAUIInArchive@@_KJ@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ReadBasicProps@CArc@@QAEJPAUIInArchive@@_KJ@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ReadBasicProps@CArc@@QAEJPAUIInArchive@@_KJ@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ReadBasicProps@CArc@@QAEJPAUIInArchive@@_KJ@Z$3
__ehfuncinfo$?ReadBasicProps@CArc@@QAEJPAUIInArchive@@_KJ@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?ReadBasicProps@CArc@@QAEJPAUIInArchive@@_KJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv430 = -196						; size = 4
tv374 = -192						; size = 4
tv219 = -188						; size = 4
tv181 = -184						; size = 4
$T77627 = -180						; size = 4
$T77624 = -176						; size = 4
$T77623 = -172						; size = 4
$T77622 = -168						; size = 4
_endPos$73895 = -164					; size = 8
_globalOffset$73893 = -156				; size = 8
___result__$73891 = -148				; size = 4
_offsetDefined$73890 = -137				; size = 1
___result__$73888 = -132				; size = 4
___result__$73880 = -128				; size = 4
_prop$73879 = -120					; size = 16
___result__$73874 = -100				; size = 4
_prop$73873 = -92					; size = 16
___result__$73870 = -72					; size = 4
_prop$73869 = -64					; size = 16
___result__$73866 = -44					; size = 4
_prop$73865 = -36					; size = 16
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_archive$ = 8						; size = 4
_startPos$ = 12						; size = 8
_openRes$ = 20						; size = 4
?ReadBasicProps@CArc@@QAEJPAUIInArchive@@_KJ@Z PROC	; CArc::ReadBasicProps
; _this$ = ecx
; Line 1171
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ReadBasicProps@CArc@@QAEJPAUIInArchive@@_KJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 184				; 000000b8H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 46					; 0000002eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1173
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+184], 0
; Line 1174
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+176], 0
	mov	DWORD PTR [ecx+180], 0
; Line 1175
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+168], 0
	mov	DWORD PTR [edx+172], 0
; Line 1176
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+192]
	sub	ecx, DWORD PTR _startPos$[ebp]
	mov	edx, DWORD PTR [eax+196]
	sbb	edx, DWORD PTR _startPos$[ebp+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+200], ecx
	mov	DWORD PTR [eax+204], edx
; Line 1178
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?ClearErrors@CArcErrorInfo@@QAEXXZ	; CArcErrorInfo::ClearErrors
; Line 1180
	lea	ecx, DWORD PTR _prop$73865[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 1181
	mov	esi, esp
	lea	ecx, DWORD PTR _prop$73865[ebp]
	push	ecx
	push	71					; 00000047H
	mov	edx, DWORD PTR _archive$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _archive$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+32]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$73866[ebp], eax
	cmp	DWORD PTR ___result__$73866[ebp], 0
	je	SHORT $LN14@ReadBasicP
	mov	eax, DWORD PTR ___result__$73866[ebp]
	mov	DWORD PTR $T77622[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prop$73865[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T77622[ebp]
	jmp	$LN15@ReadBasicP
$LN14@ReadBasicP:
; Line 1182
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 19					; 00000013H
	push	ecx
	lea	edx, DWORD PTR _prop$73865[ebp]
	push	edx
	call	?GetOpenArcErrorFlags@@YGIABVCPropVariant@NCOM@NWindows@@PA_N@Z ; GetOpenArcErrorFlags
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], eax
; Line 1183
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prop$73865[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
; Line 1185
	lea	ecx, DWORD PTR _prop$73869[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 1186
	mov	esi, esp
	lea	edx, DWORD PTR _prop$73869[ebp]
	push	edx
	push	72					; 00000048H
	mov	eax, DWORD PTR _archive$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _archive$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+32]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$73870[ebp], eax
	cmp	DWORD PTR ___result__$73870[ebp], 0
	je	SHORT $LN13@ReadBasicP
	mov	ecx, DWORD PTR ___result__$73870[ebp]
	mov	DWORD PTR $T77623[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prop$73869[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T77623[ebp]
	jmp	$LN15@ReadBasicP
$LN13@ReadBasicP:
; Line 1187
	push	0
	lea	edx, DWORD PTR _prop$73869[ebp]
	push	edx
	call	?GetOpenArcErrorFlags@@YGIABVCPropVariant@NCOM@NWindows@@PA_N@Z ; GetOpenArcErrorFlags
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], eax
; Line 1188
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prop$73869[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
; Line 1191
	lea	ecx, DWORD PTR _prop$73873[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
	mov	DWORD PTR __$EHRec$[ebp+8], 2
; Line 1192
	mov	esi, esp
	lea	edx, DWORD PTR _prop$73873[ebp]
	push	edx
	push	55					; 00000037H
	mov	eax, DWORD PTR _archive$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _archive$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+32]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$73874[ebp], eax
	cmp	DWORD PTR ___result__$73874[ebp], 0
	je	SHORT $LN12@ReadBasicP
	mov	ecx, DWORD PTR ___result__$73874[ebp]
	mov	DWORD PTR $T77624[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prop$73873[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T77624[ebp]
	jmp	$LN15@ReadBasicP
$LN12@ReadBasicP:
; Line 1193
	movzx	edx, WORD PTR _prop$73873[ebp]
	test	edx, edx
	je	SHORT $LN11@ReadBasicP
; Line 1194
	movzx	eax, WORD PTR _prop$73873[ebp]
	cmp	eax, 8
	jne	SHORT $LN17@ReadBasicP
	mov	ecx, DWORD PTR _prop$73873[ebp+8]
	mov	DWORD PTR tv181[ebp], ecx
	jmp	SHORT $LN18@ReadBasicP
$LN17@ReadBasicP:
	mov	DWORD PTR tv181[ebp], OFFSET $SG73878
$LN18@ReadBasicP:
	mov	edx, DWORD PTR tv181[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??4UString@@QAEAAV0@PB_W@Z		; UString::operator=
$LN11@ReadBasicP:
; Line 1195
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prop$73873[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
; Line 1198
	lea	ecx, DWORD PTR _prop$73879[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
	mov	DWORD PTR __$EHRec$[ebp+8], 3
; Line 1199
	mov	esi, esp
	lea	eax, DWORD PTR _prop$73879[ebp]
	push	eax
	push	73					; 00000049H
	mov	ecx, DWORD PTR _archive$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _archive$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+32]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$73880[ebp], eax
	cmp	DWORD PTR ___result__$73880[ebp], 0
	je	SHORT $LN10@ReadBasicP
	mov	edx, DWORD PTR ___result__$73880[ebp]
	mov	DWORD PTR $T77627[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prop$73879[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T77627[ebp]
	jmp	$LN15@ReadBasicP
$LN10@ReadBasicP:
; Line 1200
	movzx	eax, WORD PTR _prop$73879[ebp]
	test	eax, eax
	je	SHORT $LN9@ReadBasicP
; Line 1201
	movzx	ecx, WORD PTR _prop$73879[ebp]
	cmp	ecx, 8
	jne	SHORT $LN19@ReadBasicP
	mov	edx, DWORD PTR _prop$73879[ebp+8]
	mov	DWORD PTR tv219[ebp], edx
	jmp	SHORT $LN20@ReadBasicP
$LN19@ReadBasicP:
	mov	DWORD PTR tv219[ebp], OFFSET $SG73884
$LN20@ReadBasicP:
	mov	eax, DWORD PTR tv219[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??4UString@@QAEAAV0@PB_W@Z		; UString::operator=
$LN9@ReadBasicP:
; Line 1202
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prop$73879[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
; Line 1204
	cmp	DWORD PTR _openRes$[ebp], 0
	je	SHORT $LN7@ReadBasicP
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?IsArc_After_NonOpen@CArcErrorInfo@@QBE_NXZ ; CArcErrorInfo::IsArc_After_NonOpen
	movzx	ecx, al
	test	ecx, ecx
	je	$LN8@ReadBasicP
$LN7@ReadBasicP:
; Line 1206
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 184				; 000000b8H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 176				; 000000b0H
	push	eax
	push	44					; 0000002cH
	mov	ecx, DWORD PTR _archive$[ebp]
	push	ecx
	call	?Archive_GetArcProp_UInt@@YGJPAUIInArchive@@KAA_KAA_N@Z ; Archive_GetArcProp_UInt
	mov	DWORD PTR ___result__$73888[ebp], eax
	cmp	DWORD PTR ___result__$73888[ebp], 0
	je	SHORT $LN6@ReadBasicP
	mov	eax, DWORD PTR ___result__$73888[ebp]
	jmp	$LN15@ReadBasicP
$LN6@ReadBasicP:
; Line 1217
	lea	edx, DWORD PTR _offsetDefined$73890[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 168				; 000000a8H
	push	eax
	push	36					; 00000024H
	mov	ecx, DWORD PTR _archive$[ebp]
	push	ecx
	call	?Archive_GetArcProp_Int@@YGJPAUIInArchive@@KAA_JAA_N@Z ; Archive_GetArcProp_Int
	mov	DWORD PTR ___result__$73891[ebp], eax
	cmp	DWORD PTR ___result__$73891[ebp], 0
	je	SHORT $LN5@ReadBasicP
	mov	eax, DWORD PTR ___result__$73891[ebp]
	jmp	$LN15@ReadBasicP
$LN5@ReadBasicP:
; Line 1219
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _startPos$[ebp]
	add	eax, DWORD PTR [edx+168]
	mov	ecx, DWORD PTR _startPos$[ebp+4]
	adc	ecx, DWORD PTR [edx+172]
	mov	DWORD PTR _globalOffset$73893[ebp], eax
	mov	DWORD PTR _globalOffset$73893[ebp+4], ecx
; Line 1220
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+192]
	sub	eax, DWORD PTR _globalOffset$73893[ebp]
	mov	ecx, DWORD PTR [edx+196]
	sbb	ecx, DWORD PTR _globalOffset$73893[ebp+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+200], eax
	mov	DWORD PTR [edx+204], ecx
; Line 1221
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+184]
	test	ecx, ecx
	je	$LN8@ReadBasicP
; Line 1223
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _globalOffset$73893[ebp]
	add	eax, DWORD PTR [edx+176]
	mov	ecx, DWORD PTR _globalOffset$73893[ebp+4]
	adc	ecx, DWORD PTR [edx+180]
	mov	DWORD PTR _endPos$73895[ebp], eax
	mov	DWORD PTR _endPos$73895[ebp+4], ecx
; Line 1224
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv374[ebp], edx
	mov	eax, DWORD PTR tv374[ebp]
	mov	ecx, DWORD PTR _endPos$73895[ebp+4]
	cmp	ecx, DWORD PTR [eax+196]
	ja	SHORT $LN3@ReadBasicP
	jb	SHORT $LN25@ReadBasicP
	mov	edx, DWORD PTR tv374[ebp]
	mov	eax, DWORD PTR _endPos$73895[ebp]
	cmp	eax, DWORD PTR [edx+192]
	jae	SHORT $LN3@ReadBasicP
$LN25@ReadBasicP:
; Line 1226
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+176]
	mov	DWORD PTR [ecx+200], eax
	mov	edx, DWORD PTR [edx+180]
	mov	DWORD PTR [ecx+204], edx
; Line 1227
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+16], 1
; Line 1228
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+192]
	sub	edx, DWORD PTR _endPos$73895[ebp]
	mov	eax, DWORD PTR [ecx+196]
	sbb	eax, DWORD PTR _endPos$73895[ebp+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+32], edx
	mov	DWORD PTR [ecx+36], eax
	jmp	SHORT $LN8@ReadBasicP
$LN3@ReadBasicP:
; Line 1230
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv430[ebp], edx
	mov	eax, DWORD PTR tv430[ebp]
	mov	ecx, DWORD PTR _endPos$73895[ebp+4]
	cmp	ecx, DWORD PTR [eax+196]
	jb	SHORT $LN8@ReadBasicP
	ja	SHORT $LN26@ReadBasicP
	mov	edx, DWORD PTR tv430[ebp]
	mov	eax, DWORD PTR _endPos$73895[ebp]
	cmp	eax, DWORD PTR [edx+192]
	jbe	SHORT $LN8@ReadBasicP
$LN26@ReadBasicP:
; Line 1231
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+17], 1
$LN8@ReadBasicP:
; Line 1235
	xor	eax, eax
$LN15@ReadBasicP:
; Line 1236
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN34@ReadBasicP
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	1
$LN34@ReadBasicP:
	DD	5
	DD	$LN33@ReadBasicP
$LN33@ReadBasicP:
	DD	-36					; ffffffdcH
	DD	16					; 00000010H
	DD	$LN27@ReadBasicP
	DD	-64					; ffffffc0H
	DD	16					; 00000010H
	DD	$LN28@ReadBasicP
	DD	-92					; ffffffa4H
	DD	16					; 00000010H
	DD	$LN29@ReadBasicP
	DD	-120					; ffffff88H
	DD	16					; 00000010H
	DD	$LN30@ReadBasicP
	DD	-137					; ffffff77H
	DD	1
	DD	$LN31@ReadBasicP
$LN31@ReadBasicP:
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$LN30@ReadBasicP:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
$LN29@ReadBasicP:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
$LN28@ReadBasicP:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
$LN27@ReadBasicP:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ReadBasicProps@CArc@@QAEJPAUIInArchive@@_KJ@Z$0:
	lea	ecx, DWORD PTR _prop$73865[ebp]
	jmp	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
__unwindfunclet$?ReadBasicProps@CArc@@QAEJPAUIInArchive@@_KJ@Z$1:
	lea	ecx, DWORD PTR _prop$73869[ebp]
	jmp	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
__unwindfunclet$?ReadBasicProps@CArc@@QAEJPAUIInArchive@@_KJ@Z$2:
	lea	ecx, DWORD PTR _prop$73873[ebp]
	jmp	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
__unwindfunclet$?ReadBasicProps@CArc@@QAEJPAUIInArchive@@_KJ@Z$3:
	lea	ecx, DWORD PTR _prop$73879[ebp]
	jmp	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
__ehhandler$?ReadBasicProps@CArc@@QAEJPAUIInArchive@@_KJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-196]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ReadBasicProps@CArc@@QAEJPAUIInArchive@@_KJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ReadBasicProps@CArc@@QAEJPAUIInArchive@@_KJ@Z ENDP	; CArc::ReadBasicProps
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsArc_After_NonOpen@CArcErrorInfo@@QBE_NXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
?IsArc_After_NonOpen@CArcErrorInfo@@QBE_NXZ PROC	; CArcErrorInfo::IsArc_After_NonOpen, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\openarchive.h
; Line 168
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 169
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+3]
	test	ecx, ecx
	je	SHORT $LN3@IsArc_Afte
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	and	eax, 1
	jne	SHORT $LN3@IsArc_Afte
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN4@IsArc_Afte
$LN3@IsArc_Afte:
	mov	DWORD PTR tv70[ebp], 0
$LN4@IsArc_Afte:
	mov	al, BYTE PTR tv70[ebp]
; Line 170
	mov	esp, ebp
	pop	ebp
	ret	0
?IsArc_After_NonOpen@CArcErrorInfo@@QBE_NXZ ENDP	; CArcErrorInfo::IsArc_After_NonOpen
_TEXT	ENDS
xdata$x	SEGMENT
__unwindtable$?Archive_GetArcProp_UInt@@YGJPAUIInArchive@@KAA_KAA_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Archive_GetArcProp_UInt@@YGJPAUIInArchive@@KAA_KAA_N@Z$0
__ehfuncinfo$?Archive_GetArcProp_UInt@@YGJPAUIInArchive@@KAA_KAA_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Archive_GetArcProp_UInt@@YGJPAUIInArchive@@KAA_KAA_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv84 = -56						; size = 4
$T77654 = -52						; size = 4
$T77653 = -48						; size = 4
$T77652 = -44						; size = 4
___result__$73222 = -40					; size = 4
_prop$ = -32						; size = 16
__$EHRec$ = -12						; size = 12
_arc$ = 8						; size = 4
_propid$ = 12						; size = 4
_result$ = 16						; size = 4
_defined$ = 20						; size = 4
?Archive_GetArcProp_UInt@@YGJPAUIInArchive@@KAA_KAA_N@Z PROC ; Archive_GetArcProp_UInt
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\openarchive.cpp
; Line 493
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Archive_GetArcProp_UInt@@YGJPAUIInArchive@@KAA_KAA_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 44					; 0000002cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 494
	mov	eax, DWORD PTR _defined$[ebp]
	mov	BYTE PTR [eax], 0
; Line 495
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 496
	mov	esi, esp
	lea	ecx, DWORD PTR _prop$[ebp]
	push	ecx
	mov	edx, DWORD PTR _propid$[ebp]
	push	edx
	mov	eax, DWORD PTR _arc$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _arc$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+32]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$73222[ebp], eax
	cmp	DWORD PTR ___result__$73222[ebp], 0
	je	SHORT $LN9@Archive_Ge@2
	mov	ecx, DWORD PTR ___result__$73222[ebp]
	mov	DWORD PTR $T77652[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T77652[ebp]
	jmp	$LN10@Archive_Ge@2
$LN9@Archive_Ge@2:
; Line 497
	movzx	edx, WORD PTR _prop$[ebp]
	mov	DWORD PTR tv84[ebp], edx
	cmp	DWORD PTR tv84[ebp], 21			; 00000015H
	ja	SHORT $LN1@Archive_Ge@2
	mov	eax, DWORD PTR tv84[ebp]
	movzx	ecx, BYTE PTR $LN13@Archive_Ge@2[eax]
	jmp	DWORD PTR $LN18@Archive_Ge@2[ecx*4]
$LN6@Archive_Ge@2:
; Line 499
	mov	edx, DWORD PTR _prop$[ebp+8]
	xor	eax, eax
	mov	ecx, DWORD PTR _result$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _defined$[ebp]
	mov	BYTE PTR [edx], 1
	jmp	SHORT $LN7@Archive_Ge@2
$LN5@Archive_Ge@2:
; Line 500
	mov	eax, DWORD PTR _prop$[ebp+8]
	cdq
	mov	ecx, DWORD PTR _result$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR _defined$[ebp]
	mov	BYTE PTR [edx], 1
	jmp	SHORT $LN7@Archive_Ge@2
$LN4@Archive_Ge@2:
; Line 501
	mov	eax, DWORD PTR _result$[ebp]
	mov	ecx, DWORD PTR _prop$[ebp+8]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _prop$[ebp+12]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _defined$[ebp]
	mov	BYTE PTR [eax], 1
	jmp	SHORT $LN7@Archive_Ge@2
$LN3@Archive_Ge@2:
; Line 502
	mov	ecx, DWORD PTR _result$[ebp]
	mov	edx, DWORD PTR _prop$[ebp+8]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _prop$[ebp+12]
	mov	DWORD PTR [ecx+4], eax
	mov	ecx, DWORD PTR _defined$[ebp]
	mov	BYTE PTR [ecx], 1
	jmp	SHORT $LN7@Archive_Ge@2
$LN2@Archive_Ge@2:
; Line 503
	jmp	SHORT $LN7@Archive_Ge@2
$LN1@Archive_Ge@2:
; Line 504
	mov	DWORD PTR $T77653[ebp], -2147467259	; 80004005H
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T77653[ebp]
	jmp	SHORT $LN10@Archive_Ge@2
$LN7@Archive_Ge@2:
; Line 506
	mov	DWORD PTR $T77654[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T77654[ebp]
$LN10@Archive_Ge@2:
; Line 507
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@Archive_Ge@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	1
$LN17@Archive_Ge@2:
	DD	1
	DD	$LN16@Archive_Ge@2
$LN16@Archive_Ge@2:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN14@Archive_Ge@2
$LN14@Archive_Ge@2:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
	npad	3
$LN18@Archive_Ge@2:
	DD	$LN2@Archive_Ge@2
	DD	$LN5@Archive_Ge@2
	DD	$LN6@Archive_Ge@2
	DD	$LN3@Archive_Ge@2
	DD	$LN4@Archive_Ge@2
	DD	$LN1@Archive_Ge@2
$LN13@Archive_Ge@2:
	DB	0
	DB	5
	DB	5
	DB	1
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	2
	DB	3
	DB	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Archive_GetArcProp_UInt@@YGJPAUIInArchive@@KAA_KAA_N@Z$0:
	lea	ecx, DWORD PTR _prop$[ebp]
	jmp	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
__ehhandler$?Archive_GetArcProp_UInt@@YGJPAUIInArchive@@KAA_KAA_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-56]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Archive_GetArcProp_UInt@@YGJPAUIInArchive@@KAA_KAA_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Archive_GetArcProp_UInt@@YGJPAUIInArchive@@KAA_KAA_N@Z ENDP ; Archive_GetArcProp_UInt
xdata$x	SEGMENT
__unwindtable$?Archive_GetArcProp_Int@@YGJPAUIInArchive@@KAA_JAA_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Archive_GetArcProp_Int@@YGJPAUIInArchive@@KAA_JAA_N@Z$0
__ehfuncinfo$?Archive_GetArcProp_Int@@YGJPAUIInArchive@@KAA_JAA_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Archive_GetArcProp_Int@@YGJPAUIInArchive@@KAA_JAA_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv84 = -56						; size = 4
$T77668 = -52						; size = 4
$T77667 = -48						; size = 4
$T77666 = -44						; size = 4
___result__$73248 = -40					; size = 4
_prop$ = -32						; size = 16
__$EHRec$ = -12						; size = 12
_arc$ = 8						; size = 4
_propid$ = 12						; size = 4
_result$ = 16						; size = 4
_defined$ = 20						; size = 4
?Archive_GetArcProp_Int@@YGJPAUIInArchive@@KAA_JAA_N@Z PROC ; Archive_GetArcProp_Int
; Line 510
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Archive_GetArcProp_Int@@YGJPAUIInArchive@@KAA_JAA_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 44					; 0000002cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 511
	mov	eax, DWORD PTR _defined$[ebp]
	mov	BYTE PTR [eax], 0
; Line 512
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 513
	mov	esi, esp
	lea	ecx, DWORD PTR _prop$[ebp]
	push	ecx
	mov	edx, DWORD PTR _propid$[ebp]
	push	edx
	mov	eax, DWORD PTR _arc$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _arc$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+32]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$73248[ebp], eax
	cmp	DWORD PTR ___result__$73248[ebp], 0
	je	SHORT $LN9@Archive_Ge@3
	mov	ecx, DWORD PTR ___result__$73248[ebp]
	mov	DWORD PTR $T77666[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T77666[ebp]
	jmp	$LN10@Archive_Ge@3
$LN9@Archive_Ge@3:
; Line 514
	movzx	edx, WORD PTR _prop$[ebp]
	mov	DWORD PTR tv84[ebp], edx
	cmp	DWORD PTR tv84[ebp], 21			; 00000015H
	ja	SHORT $LN1@Archive_Ge@3
	mov	eax, DWORD PTR tv84[ebp]
	movzx	ecx, BYTE PTR $LN13@Archive_Ge@3[eax]
	jmp	DWORD PTR $LN18@Archive_Ge@3[ecx*4]
$LN6@Archive_Ge@3:
; Line 516
	mov	edx, DWORD PTR _prop$[ebp+8]
	xor	eax, eax
	mov	ecx, DWORD PTR _result$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _defined$[ebp]
	mov	BYTE PTR [edx], 1
	jmp	SHORT $LN7@Archive_Ge@3
$LN5@Archive_Ge@3:
; Line 517
	mov	eax, DWORD PTR _prop$[ebp+8]
	cdq
	mov	ecx, DWORD PTR _result$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR _defined$[ebp]
	mov	BYTE PTR [edx], 1
	jmp	SHORT $LN7@Archive_Ge@3
$LN4@Archive_Ge@3:
; Line 518
	mov	eax, DWORD PTR _result$[ebp]
	mov	ecx, DWORD PTR _prop$[ebp+8]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _prop$[ebp+12]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _defined$[ebp]
	mov	BYTE PTR [eax], 1
	jmp	SHORT $LN7@Archive_Ge@3
$LN3@Archive_Ge@3:
; Line 519
	mov	ecx, DWORD PTR _result$[ebp]
	mov	edx, DWORD PTR _prop$[ebp+8]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _prop$[ebp+12]
	mov	DWORD PTR [ecx+4], eax
	mov	ecx, DWORD PTR _defined$[ebp]
	mov	BYTE PTR [ecx], 1
	jmp	SHORT $LN7@Archive_Ge@3
$LN2@Archive_Ge@3:
; Line 520
	jmp	SHORT $LN7@Archive_Ge@3
$LN1@Archive_Ge@3:
; Line 521
	mov	DWORD PTR $T77667[ebp], -2147467259	; 80004005H
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T77667[ebp]
	jmp	SHORT $LN10@Archive_Ge@3
$LN7@Archive_Ge@3:
; Line 523
	mov	DWORD PTR $T77668[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T77668[ebp]
$LN10@Archive_Ge@3:
; Line 524
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@Archive_Ge@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	1
$LN17@Archive_Ge@3:
	DD	1
	DD	$LN16@Archive_Ge@3
$LN16@Archive_Ge@3:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN14@Archive_Ge@3
$LN14@Archive_Ge@3:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
	npad	3
$LN18@Archive_Ge@3:
	DD	$LN2@Archive_Ge@3
	DD	$LN5@Archive_Ge@3
	DD	$LN6@Archive_Ge@3
	DD	$LN3@Archive_Ge@3
	DD	$LN4@Archive_Ge@3
	DD	$LN1@Archive_Ge@3
$LN13@Archive_Ge@3:
	DB	0
	DB	5
	DB	5
	DB	1
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	2
	DB	3
	DB	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Archive_GetArcProp_Int@@YGJPAUIInArchive@@KAA_JAA_N@Z$0:
	lea	ecx, DWORD PTR _prop$[ebp]
	jmp	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
__ehhandler$?Archive_GetArcProp_Int@@YGJPAUIInArchive@@KAA_JAA_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-56]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Archive_GetArcProp_Int@@YGJPAUIInArchive@@KAA_JAA_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Archive_GetArcProp_Int@@YGJPAUIInArchive@@KAA_JAA_N@Z ENDP ; Archive_GetArcProp_Int
PUBLIC	??1?$CMyComPtr@UIArchiveAllowTail@@@@QAE@XZ	; CMyComPtr<IArchiveAllowTail>::~CMyComPtr<IArchiveAllowTail>
PUBLIC	?BoolToInt@@YGH_N@Z				; BoolToInt
PUBLIC	??C?$CMyComPtr@UIArchiveAllowTail@@@@QBEPAUIArchiveAllowTail@@XZ ; CMyComPtr<IArchiveAllowTail>::operator->
PUBLIC	??B?$CMyComPtr@UIArchiveAllowTail@@@@QBEPAUIArchiveAllowTail@@XZ ; CMyComPtr<IArchiveAllowTail>::operator IArchiveAllowTail *
PUBLIC	??$QueryInterface@X@?$CMyComPtr@UIInArchive@@@@QBEJABU_GUID@@PAPAX@Z ; CMyComPtr<IInArchive>::QueryInterface<void>
PUBLIC	??I?$CMyComPtr@UIArchiveAllowTail@@@@QAEPAPAUIArchiveAllowTail@@XZ ; CMyComPtr<IArchiveAllowTail>::operator&
PUBLIC	??0?$CMyComPtr@UIArchiveAllowTail@@@@QAE@XZ	; CMyComPtr<IArchiveAllowTail>::CMyComPtr<IArchiveAllowTail>
PUBLIC	?Flags_PreArc@CArcInfoEx@@QBE_NXZ		; CArcInfoEx::Flags_PreArc
PUBLIC	??A?$CObjectVector@UCArcInfoEx@@@@QAEAAUCArcInfoEx@@I@Z ; CObjectVector<CArcInfoEx>::operator[]
PUBLIC	??7?$CMyComPtr@UIInArchive@@@@QBE_NXZ		; CMyComPtr<IInArchive>::operator!
PUBLIC	?CreateInArchive@CCodecs@@QBEJIAAV?$CMyComPtr@UIInArchive@@@@@Z ; CCodecs::CreateInArchive
PUBLIC	?PrepareToOpen@CArc@@AAEJABUCOpenOptions@@IAAV?$CMyComPtr@UIInArchive@@@@@Z ; CArc::PrepareToOpen
EXTRN	?SetProperties@@YGJPAUIUnknown@@ABV?$CObjectVector@UCProperty@@@@@Z:PROC ; SetProperties
EXTRN	_IID_IArchiveAllowTail:BYTE
xdata$x	SEGMENT
__unwindtable$?PrepareToOpen@CArc@@AAEJABUCOpenOptions@@IAAV?$CMyComPtr@UIInArchive@@@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PrepareToOpen@CArc@@AAEJABUCOpenOptions@@IAAV?$CMyComPtr@UIInArchive@@@@@Z$0
__ehfuncinfo$?PrepareToOpen@CArc@@AAEJABUCOpenOptions@@IAAV?$CMyComPtr@UIInArchive@@@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PrepareToOpen@CArc@@AAEJABUCOpenOptions@@IAAV?$CMyComPtr@UIInArchive@@@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv95 = -44						; size = 4
___result__$73958 = -40					; size = 4
_allowTail$73950 = -32					; size = 4
_ai$ = -24						; size = 4
___result__$73907 = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_op$ = 8						; size = 4
_formatIndex$ = 12					; size = 4
_archive$ = 16						; size = 4
?PrepareToOpen@CArc@@AAEJABUCOpenOptions@@IAAV?$CMyComPtr@UIInArchive@@@@@Z PROC ; CArc::PrepareToOpen
; _this$ = ecx
; Line 1248
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?PrepareToOpen@CArc@@AAEJABUCOpenOptions@@IAAV?$CMyComPtr@UIInArchive@@@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-44], eax
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1252
	mov	eax, DWORD PTR _archive$[ebp]
	push	eax
	mov	ecx, DWORD PTR _formatIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?CreateInArchive@CCodecs@@QBEJIAAV?$CMyComPtr@UIInArchive@@@@@Z ; CCodecs::CreateInArchive
	mov	DWORD PTR ___result__$73907[ebp], eax
	cmp	DWORD PTR ___result__$73907[ebp], 0
	je	SHORT $LN6@PrepareToO
	mov	eax, DWORD PTR ___result__$73907[ebp]
	jmp	$LN7@PrepareToO
$LN6@PrepareToO:
; Line 1254
	mov	ecx, DWORD PTR _archive$[ebp]
	call	??7?$CMyComPtr@UIInArchive@@@@QBE_NXZ	; CMyComPtr<IInArchive>::operator!
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@PrepareToO
; Line 1255
	xor	eax, eax
	jmp	$LN7@PrepareToO
$LN5@PrepareToO:
; Line 1278
	mov	ecx, DWORD PTR _formatIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR [edx]
	add	ecx, 8
	call	??A?$CObjectVector@UCArcInfoEx@@@@QAEAAUCArcInfoEx@@I@Z ; CObjectVector<CArcInfoEx>::operator[]
	mov	DWORD PTR _ai$[ebp], eax
; Line 1283
	mov	ecx, DWORD PTR _ai$[ebp]
	call	?Flags_PreArc@CArcInfoEx@@QBE_NXZ	; CArcInfoEx::Flags_PreArc
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@PrepareToO
; Line 1287
	lea	ecx, DWORD PTR _allowTail$73950[ebp]
	call	??0?$CMyComPtr@UIArchiveAllowTail@@@@QAE@XZ ; CMyComPtr<IArchiveAllowTail>::CMyComPtr<IArchiveAllowTail>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 1288
	lea	ecx, DWORD PTR _allowTail$73950[ebp]
	call	??I?$CMyComPtr@UIArchiveAllowTail@@@@QAEPAPAUIArchiveAllowTail@@XZ ; CMyComPtr<IArchiveAllowTail>::operator&
	push	eax
	push	OFFSET _IID_IArchiveAllowTail
	mov	ecx, DWORD PTR _archive$[ebp]
	call	??$QueryInterface@X@?$CMyComPtr@UIInArchive@@@@QBEJABU_GUID@@PAPAX@Z ; CMyComPtr<IInArchive>::QueryInterface<void>
; Line 1289
	lea	ecx, DWORD PTR _allowTail$73950[ebp]
	call	??B?$CMyComPtr@UIArchiveAllowTail@@@@QBEPAUIArchiveAllowTail@@XZ ; CMyComPtr<IArchiveAllowTail>::operator IArchiveAllowTail *
	test	eax, eax
	je	SHORT $LN3@PrepareToO
; Line 1290
	lea	ecx, DWORD PTR _allowTail$73950[ebp]
	call	??C?$CMyComPtr@UIArchiveAllowTail@@@@QBEPAUIArchiveAllowTail@@XZ ; CMyComPtr<IArchiveAllowTail>::operator->
	mov	DWORD PTR tv95[ebp], eax
	push	1
	call	?BoolToInt@@YGH_N@Z			; BoolToInt
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR tv95[ebp]
	push	ecx
	mov	edx, DWORD PTR tv95[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@PrepareToO:
; Line 1291
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _allowTail$73950[ebp]
	call	??1?$CMyComPtr@UIArchiveAllowTail@@@@QAE@XZ ; CMyComPtr<IArchiveAllowTail>::~CMyComPtr<IArchiveAllowTail>
$LN4@PrepareToO:
; Line 1293
	mov	edx, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [edx+64], 0
	je	SHORT $LN2@PrepareToO
; Line 1306
	mov	eax, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	push	ecx
	mov	ecx, DWORD PTR _archive$[ebp]
	call	??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator IInArchive *
	push	eax
	call	?SetProperties@@YGJPAUIUnknown@@ABV?$CObjectVector@UCProperty@@@@@Z ; SetProperties
	mov	DWORD PTR ___result__$73958[ebp], eax
	cmp	DWORD PTR ___result__$73958[ebp], 0
	je	SHORT $LN2@PrepareToO
	mov	eax, DWORD PTR ___result__$73958[ebp]
	jmp	SHORT $LN7@PrepareToO
$LN2@PrepareToO:
; Line 1310
	xor	eax, eax
$LN7@PrepareToO:
; Line 1311
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@PrepareToO
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN13@PrepareToO:
	DD	1
	DD	$LN12@PrepareToO
$LN12@PrepareToO:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN10@PrepareToO
$LN10@PrepareToO:
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	84					; 00000054H
	DB	97					; 00000061H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?PrepareToOpen@CArc@@AAEJABUCOpenOptions@@IAAV?$CMyComPtr@UIInArchive@@@@@Z$0:
	lea	ecx, DWORD PTR _allowTail$73950[ebp]
	jmp	??1?$CMyComPtr@UIArchiveAllowTail@@@@QAE@XZ ; CMyComPtr<IArchiveAllowTail>::~CMyComPtr<IArchiveAllowTail>
__ehhandler$?PrepareToOpen@CArc@@AAEJABUCOpenOptions@@IAAV?$CMyComPtr@UIInArchive@@@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?PrepareToOpen@CArc@@AAEJABUCOpenOptions@@IAAV?$CMyComPtr@UIInArchive@@@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?PrepareToOpen@CArc@@AAEJABUCOpenOptions@@IAAV?$CMyComPtr@UIInArchive@@@@@Z ENDP ; CArc::PrepareToOpen
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?BoolToInt@@YGH_N@Z
_TEXT	SEGMENT
_value$ = 8						; size = 1
?BoolToInt@@YGH_N@Z PROC				; BoolToInt, COMDAT
; File c:\workspace\7z1505-src\cpp\common\defs.h
; Line 15
	push	ebp
	mov	ebp, esp
	movzx	eax, BYTE PTR _value$[ebp]
	neg	eax
	sbb	eax, eax
	neg	eax
	pop	ebp
	ret	4
?BoolToInt@@YGH_N@Z ENDP				; BoolToInt
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Flags_PreArc@CArcInfoEx@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Flags_PreArc@CArcInfoEx@@QBE_NXZ PROC			; CArcInfoEx::Flags_PreArc, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\loadcodecs.h
; Line 133
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	and	eax, 512				; 00000200H
	neg	eax
	sbb	eax, eax
	neg	eax
	mov	esp, ebp
	pop	ebp
	ret	0
?Flags_PreArc@CArcInfoEx@@QBE_NXZ ENDP			; CArcInfoEx::Flags_PreArc
_TEXT	ENDS
PUBLIC	??4?$CMyComPtr@UIInArchive@@@@QAEPAUIInArchive@@PAU1@@Z ; CMyComPtr<IInArchive>::operator=
PUBLIC	??A?$CObjectVector@UCArcInfoEx@@@@QBEABUCArcInfoEx@@I@Z ; CObjectVector<CArcInfoEx>::operator[]
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?CreateInArchive@CCodecs@@QBEJIAAV?$CMyComPtr@UIInArchive@@@@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?CreateInArchive@CCodecs@@QBEJIAAV?$CMyComPtr@UIInArchive@@@@@Z$0
__unwindtable$?CreateInArchive@CCodecs@@QBEJIAAV?$CMyComPtr@UIInArchive@@@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?CreateInArchive@CCodecs@@QBEJIAAV?$CMyComPtr@UIInArchive@@@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?CreateInArchive@CCodecs@@QBEJIAAV?$CMyComPtr@UIInArchive@@@@@Z$2
__ehfuncinfo$?CreateInArchive@CCodecs@@QBEJIAAV?$CMyComPtr@UIInArchive@@@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?CreateInArchive@CCodecs@@QBEJIAAV?$CMyComPtr@UIInArchive@@@@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?CreateInArchive@CCodecs@@QBEJIAAV?$CMyComPtr@UIInArchive@@@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?CreateInArchive@CCodecs@@QBEJIAAV?$CMyComPtr@UIInArchive@@@@@Z
_TEXT	SEGMENT
tv73 = -32						; size = 4
$T77693 = -28						; size = 4
_ai$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
_formatIndex$ = 8					; size = 4
_archive$ = 12						; size = 4
?CreateInArchive@CCodecs@@QBEJIAAV?$CMyComPtr@UIInArchive@@@@@Z PROC ; CCodecs::CreateInArchive, COMDAT
; _this$ = ecx
; Line 358
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateInArchive@CCodecs@@QBEJIAAV?$CMyComPtr@UIInArchive@@@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
; Line 359
	mov	eax, DWORD PTR _formatIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??A?$CObjectVector@UCArcInfoEx@@@@QBEABUCArcInfoEx@@I@Z ; CObjectVector<CArcInfoEx>::operator[]
	mov	DWORD PTR _ai$[ebp], eax
; Line 364
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 365
	mov	ecx, DWORD PTR _ai$[ebp]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv73[ebp], eax
	mov	eax, DWORD PTR tv73[ebp]
	push	eax
	mov	ecx, DWORD PTR _archive$[ebp]
	call	??4?$CMyComPtr@UIInArchive@@@@QAEPAUIInArchive@@PAU1@@Z ; CMyComPtr<IInArchive>::operator=
; Line 366
	xor	eax, eax
	jmp	SHORT $LN2@CreateInAr
__catch$?CreateInArchive@CCodecs@@QBEJIAAV?$CMyComPtr@UIInArchive@@@@@Z$0:
; Line 367
	mov	DWORD PTR $T77693[ebp], -2147024882	; 8007000eH
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN7@CreateInAr
	ret	0
	mov	eax, __tryend$?CreateInArchive@CCodecs@@QBEJIAAV?$CMyComPtr@UIInArchive@@@@@Z$1
	ret	0
__tryend$?CreateInArchive@CCodecs@@QBEJIAAV?$CMyComPtr@UIInArchive@@@@@Z$1:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN2@CreateInAr
$LN7@CreateInAr:
	mov	eax, DWORD PTR $T77693[ebp]
$LN2@CreateInAr:
; Line 372
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?CreateInArchive@CCodecs@@QBEJIAAV?$CMyComPtr@UIInArchive@@@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateInArchive@CCodecs@@QBEJIAAV?$CMyComPtr@UIInArchive@@@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateInArchive@CCodecs@@QBEJIAAV?$CMyComPtr@UIInArchive@@@@@Z ENDP ; CCodecs::CreateInArchive
PUBLIC	__$ArrayPad$
PUBLIC	?CheckZerosTail@CArc@@AAEJABUCOpenOptions@@_K@Z	; CArc::CheckZerosTail
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$74093 = -2092					; size = 4
___result__$74089 = -2088				; size = 4
_processed$74088 = -2080				; size = 4
_buf$ = -2068						; size = 2048
_kBufSize$ = -16					; size = 4
___result__$74081 = -12					; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_op$ = 8						; size = 4
_offset$ = 12						; size = 8
?CheckZerosTail@CArc@@AAEJABUCOpenOptions@@_K@Z PROC	; CArc::CheckZerosTail
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\openarchive.cpp
; Line 1410
	push	ebp
	mov	ebp, esp
	sub	esp, 2092				; 0000082cH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-2092]
	mov	ecx, 523				; 0000020bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1411
	mov	eax, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [eax+48], 0
	jne	SHORT $LN10@CheckZeros
; Line 1412
	xor	eax, eax
	jmp	$LN11@CheckZeros
$LN10@CheckZeros:
; Line 1413
	mov	esi, esp
	push	0
	push	0
	mov	ecx, DWORD PTR _offset$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _offset$[ebp]
	push	edx
	mov	eax, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$74081[ebp], eax
	cmp	DWORD PTR ___result__$74081[ebp], 0
	je	SHORT $LN9@CheckZeros
	mov	eax, DWORD PTR ___result__$74081[ebp]
	jmp	$LN11@CheckZeros
$LN9@CheckZeros:
; Line 1414
	mov	DWORD PTR _kBufSize$[ebp], 2048		; 00000800H
$LN8@CheckZeros:
; Line 1419
	mov	DWORD PTR _processed$74088[ebp], 0
; Line 1420
	mov	esi, esp
	lea	eax, DWORD PTR _processed$74088[ebp]
	push	eax
	push	2048					; 00000800H
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	ecx, DWORD PTR _op$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$74089[ebp], eax
	cmp	DWORD PTR ___result__$74089[ebp], 0
	je	SHORT $LN6@CheckZeros
	mov	eax, DWORD PTR ___result__$74089[ebp]
	jmp	SHORT $LN11@CheckZeros
$LN6@CheckZeros:
; Line 1421
	cmp	DWORD PTR _processed$74088[ebp], 0
	jne	SHORT $LN5@CheckZeros
; Line 1424
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+18], 1
; Line 1425
	xor	eax, eax
	jmp	SHORT $LN11@CheckZeros
$LN5@CheckZeros:
; Line 1427
	mov	DWORD PTR _i$74093[ebp], 0
	jmp	SHORT $LN4@CheckZeros
$LN3@CheckZeros:
	mov	eax, DWORD PTR _i$74093[ebp]
	add	eax, 1
	mov	DWORD PTR _i$74093[ebp], eax
$LN4@CheckZeros:
	mov	ecx, DWORD PTR _i$74093[ebp]
	cmp	ecx, DWORD PTR _processed$74088[ebp]
	jae	SHORT $LN2@CheckZeros
; Line 1429
	mov	edx, DWORD PTR _i$74093[ebp]
	movzx	eax, BYTE PTR _buf$[ebp+edx]
	test	eax, eax
	je	SHORT $LN1@CheckZeros
; Line 1433
	xor	eax, eax
	jmp	SHORT $LN11@CheckZeros
$LN1@CheckZeros:
; Line 1435
	jmp	SHORT $LN3@CheckZeros
$LN2@CheckZeros:
; Line 1436
	jmp	$LN8@CheckZeros
$LN11@CheckZeros:
; Line 1437
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@CheckZeros
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 2092				; 0000082cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN16@CheckZeros:
	DD	2
	DD	$LN15@CheckZeros
$LN15@CheckZeros:
	DD	-2068					; fffff7ecH
	DD	2048					; 00000800H
	DD	$LN13@CheckZeros
	DD	-2080					; fffff7e0H
	DD	4
	DD	$LN14@CheckZeros
$LN14@CheckZeros:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$LN13@CheckZeros:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
?CheckZerosTail@CArc@@AAEJABUCOpenOptions@@_K@Z ENDP	; CArc::CheckZerosTail
_TEXT	ENDS
PUBLIC	?SetTotal@CExtractCallback_To_OpenCallback@@UAGJ_K@Z ; CExtractCallback_To_OpenCallback::SetTotal
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = 8						; size = 4
___formal$ = 12						; size = 8
?SetTotal@CExtractCallback_To_OpenCallback@@UAGJ_K@Z PROC ; CExtractCallback_To_OpenCallback::SetTotal
; Line 1463
	push	ebp
	mov	ebp, esp
; Line 1464
	xor	eax, eax
; Line 1465
	pop	ebp
	ret	12					; 0000000cH
?SetTotal@CExtractCallback_To_OpenCallback@@UAGJ_K@Z ENDP ; CExtractCallback_To_OpenCallback::SetTotal
_TEXT	ENDS
PUBLIC	?SetCompleted@CExtractCallback_To_OpenCallback@@UAGJPB_K@Z ; CExtractCallback_To_OpenCallback::SetCompleted
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = 8						; size = 4
___formal$ = 12						; size = 4
?SetCompleted@CExtractCallback_To_OpenCallback@@UAGJPB_K@Z PROC ; CExtractCallback_To_OpenCallback::SetCompleted
; Line 1468
	push	ebp
	mov	ebp, esp
; Line 1469
	xor	eax, eax
; Line 1470
	pop	ebp
	ret	8
?SetCompleted@CExtractCallback_To_OpenCallback@@UAGJPB_K@Z ENDP ; CExtractCallback_To_OpenCallback::SetCompleted
_TEXT	ENDS
PUBLIC	??B?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ ; CMyComPtr<IArchiveOpenCallback>::operator IArchiveOpenCallback *
PUBLIC	?SetRatioInfo@CExtractCallback_To_OpenCallback@@UAGJPB_K0@Z ; CExtractCallback_To_OpenCallback::SetRatioInfo
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv78 = -20						; size = 4
_value$74188 = -12					; size = 8
_this$ = 8						; size = 4
_inSize$ = 12						; size = 4
___formal$ = 16						; size = 4
?SetRatioInfo@CExtractCallback_To_OpenCallback@@UAGJPB_K0@Z PROC ; CExtractCallback_To_OpenCallback::SetRatioInfo
; Line 1473
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1474
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??B?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ ; CMyComPtr<IArchiveOpenCallback>::operator IArchiveOpenCallback *
	test	eax, eax
	je	SHORT $LN2@SetRatioIn
; Line 1476
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _value$74188[ebp], ecx
	mov	edx, DWORD PTR [eax+24]
	mov	DWORD PTR _value$74188[ebp+4], edx
; Line 1477
	cmp	DWORD PTR _inSize$[ebp], 0
	je	SHORT $LN1@SetRatioIn
; Line 1478
	mov	eax, DWORD PTR _inSize$[ebp]
	mov	ecx, DWORD PTR _value$74188[ebp]
	add	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _value$74188[ebp+4]
	adc	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _value$74188[ebp], ecx
	mov	DWORD PTR _value$74188[ebp+4], edx
$LN1@SetRatioIn:
; Line 1479
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??C?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ ; CMyComPtr<IArchiveOpenCallback>::operator->
	mov	DWORD PTR tv78[ebp], eax
	mov	esi, esp
	lea	eax, DWORD PTR _value$74188[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	edx, DWORD PTR tv78[ebp]
	push	edx
	mov	eax, DWORD PTR tv78[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN3@SetRatioIn
$LN2@SetRatioIn:
; Line 1481
	xor	eax, eax
$LN3@SetRatioIn:
; Line 1482
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@SetRatioIn
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	3
$LN7@SetRatioIn:
	DD	1
	DD	$LN6@SetRatioIn
$LN6@SetRatioIn:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN5@SetRatioIn
$LN5@SetRatioIn:
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	0
?SetRatioInfo@CExtractCallback_To_OpenCallback@@UAGJPB_K0@Z ENDP ; CExtractCallback_To_OpenCallback::SetRatioInfo
_TEXT	ENDS
PUBLIC	?GetStream@CExtractCallback_To_OpenCallback@@UAGJIPAPAUISequentialOutStream@@H@Z ; CExtractCallback_To_OpenCallback::GetStream
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = 8						; size = 4
___formal$ = 12						; size = 4
_outStream$ = 16					; size = 4
___formal$ = 20						; size = 4
?GetStream@CExtractCallback_To_OpenCallback@@UAGJIPAPAUISequentialOutStream@@H@Z PROC ; CExtractCallback_To_OpenCallback::GetStream
; Line 1485
	push	ebp
	mov	ebp, esp
; Line 1486
	mov	eax, DWORD PTR _outStream$[ebp]
	mov	DWORD PTR [eax], 0
; Line 1487
	xor	eax, eax
; Line 1488
	pop	ebp
	ret	16					; 00000010H
?GetStream@CExtractCallback_To_OpenCallback@@UAGJIPAPAUISequentialOutStream@@H@Z ENDP ; CExtractCallback_To_OpenCallback::GetStream
_TEXT	ENDS
PUBLIC	?PrepareOperation@CExtractCallback_To_OpenCallback@@UAGJH@Z ; CExtractCallback_To_OpenCallback::PrepareOperation
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = 8						; size = 4
___formal$ = 12						; size = 4
?PrepareOperation@CExtractCallback_To_OpenCallback@@UAGJH@Z PROC ; CExtractCallback_To_OpenCallback::PrepareOperation
; Line 1491
	push	ebp
	mov	ebp, esp
; Line 1492
	xor	eax, eax
; Line 1493
	pop	ebp
	ret	8
?PrepareOperation@CExtractCallback_To_OpenCallback@@UAGJH@Z ENDP ; CExtractCallback_To_OpenCallback::PrepareOperation
_TEXT	ENDS
PUBLIC	?SetOperationResult@CExtractCallback_To_OpenCallback@@UAGJH@Z ; CExtractCallback_To_OpenCallback::SetOperationResult
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = 8						; size = 4
___formal$ = 12						; size = 4
?SetOperationResult@CExtractCallback_To_OpenCallback@@UAGJH@Z PROC ; CExtractCallback_To_OpenCallback::SetOperationResult
; Line 1496
	push	ebp
	mov	ebp, esp
; Line 1497
	xor	eax, eax
; Line 1498
	pop	ebp
	ret	8
?SetOperationResult@CExtractCallback_To_OpenCallback@@UAGJH@Z ENDP ; CExtractCallback_To_OpenCallback::SetOperationResult
_TEXT	ENDS
PUBLIC	?DeleteBack@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEXXZ ; CObjectVector<NArchive::NParser::CParseItem>::DeleteBack
PUBLIC	?InitAndSeek@CLimitedCachedInStream@@QAEJ_K0@Z	; CLimitedCachedInStream::InitAndSeek
PUBLIC	?Flags_UseGlobalOffset@CArcInfoEx@@QBE_NXZ	; CArcInfoEx::Flags_UseGlobalOffset
PUBLIC	?SetCache@CLimitedCachedInStream@@QAEXII@Z	; CLimitedCachedInStream::SetCache
PUBLIC	??1?$CMyComPtr@UIInStream@@@@QAE@XZ		; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
PUBLIC	??$QueryInterface@UICryptoGetTextPassword@@@?$CMyComPtr@UIArchiveOpenCallback@@@@QBEJABU_GUID@@PAPAUICryptoGetTextPassword@@@Z ; CMyComPtr<IArchiveOpenCallback>::QueryInterface<ICryptoGetTextPassword>
PUBLIC	??I?$CMyComPtr@UICryptoGetTextPassword@@@@QAEPAPAUICryptoGetTextPassword@@XZ ; CMyComPtr<ICryptoGetTextPassword>::operator&
PUBLIC	??4?$CMyComPtr@UIArchiveOpenCallback@@@@QAEPAUIArchiveOpenCallback@@PAU1@@Z ; CMyComPtr<IArchiveOpenCallback>::operator=
PUBLIC	?SetStream@CLimitedCachedInStream@@QAEXPAUIInStream@@@Z ; CLimitedCachedInStream::SetStream
PUBLIC	??0?$CMyComPtr@UIInStream@@@@QAE@PAUIInStream@@@Z ; CMyComPtr<IInStream>::CMyComPtr<IInStream>
PUBLIC	??0CLimitedCachedInStream@@QAE@XZ		; CLimitedCachedInStream::CLimitedCachedInStream
PUBLIC	??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ	; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>
PUBLIC	??1?$CObjArray@E@@QAE@XZ			; CObjArray<unsigned char>::~CObjArray<unsigned char>
PUBLIC	??B?$CObjArray@E@@QAEPAEXZ			; CObjArray<unsigned char>::operator unsigned char *
PUBLIC	??0?$CObjArray@E@@QAE@I@Z			; CObjArray<unsigned char>::CObjArray<unsigned char>
PUBLIC	??0?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@PAUIArchiveOpenCallback@@@Z ; CMyComPtr<IArchiveOpenCallback>::CMyComPtr<IArchiveOpenCallback>
PUBLIC	??0CArchiveOpenCallback_Offset@@QAE@XZ		; CArchiveOpenCallback_Offset::CArchiveOpenCallback_Offset
PUBLIC	?NormalizeOffset@CParseItem@NParser@NArchive@@QAEXXZ ; NArchive::NParser::CParseItem::NormalizeOffset
PUBLIC	??B?$CMyComPtr@UIArchiveExtractCallback@@@@QBEPAUIArchiveExtractCallback@@XZ ; CMyComPtr<IArchiveExtractCallback>::operator IArchiveExtractCallback *
PUBLIC	??1?$CRecordVector@I@@QAE@XZ			; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
PUBLIC	??A?$CRecordVector@I@@QAEAAII@Z			; CRecordVector<unsigned int>::operator[]
PUBLIC	?Size@?$CRecordVector@I@@QBEIXZ			; CRecordVector<unsigned int>::Size
PUBLIC	?Add@?$CRecordVector@I@@QAEII@Z			; CRecordVector<unsigned int>::Add
PUBLIC	??B?$CBuffer@E@@QBEPBEXZ			; CBuffer<unsigned char>::operator unsigned char const *
PUBLIC	?Size@?$CBuffer@E@@QBEIXZ			; CBuffer<unsigned char>::Size
PUBLIC	??A?$CObjectVector@V?$CBuffer@E@@@@QBEABV?$CBuffer@E@@I@Z ; CObjectVector<CBuffer<unsigned char> >::operator[]
PUBLIC	?Size@?$CObjectVector@V?$CBuffer@E@@@@QBEIXZ	; CObjectVector<CBuffer<unsigned char> >::Size
PUBLIC	?Flags_StartOpen@CArcInfoEx@@QBE_NXZ		; CArcInfoEx::Flags_StartOpen
PUBLIC	?Flags_PureStartOpen@CArcInfoEx@@QBE_NXZ	; CArcInfoEx::Flags_PureStartOpen
PUBLIC	?IsEmpty@?$CObjectVector@V?$CBuffer@E@@@@QBE_NXZ ; CObjectVector<CBuffer<unsigned char> >::IsEmpty
PUBLIC	?Insert@?$CRecordVector@I@@QAEXII@Z		; CRecordVector<unsigned int>::Insert
PUBLIC	??0?$CRecordVector@I@@QAE@XZ			; CRecordVector<unsigned int>::CRecordVector<unsigned int>
PUBLIC	??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>
PUBLIC	?Init@CExtractCallback_To_OpenCallback@@QAEXPAUIArchiveOpenCallback@@@Z ; CExtractCallback_To_OpenCallback::Init
PUBLIC	??0?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@PAUIArchiveExtractCallback@@@Z ; CMyComPtr<IArchiveExtractCallback>::CMyComPtr<IArchiveExtractCallback>
PUBLIC	??0CExtractCallback_To_OpenCallback@@QAE@XZ	; CExtractCallback_To_OpenCallback::CExtractCallback_To_OpenCallback
PUBLIC	??0?$CMyComPtr@UIInArchive@@@@QAE@PAUIInArchive@@@Z ; CMyComPtr<IInArchive>::CMyComPtr<IInArchive>
PUBLIC	??0CHandler@NParser@NArchive@@QAE@XZ		; NArchive::NParser::CHandler::CHandler
PUBLIC	?Flags_FindSignature@CArcInfoEx@@QBE_NXZ	; CArcInfoEx::Flags_FindSignature
PUBLIC	??4?$CMyComPtr@UIInArchive@@@@QAEPAUIInArchive@@ABV0@@Z ; CMyComPtr<IInArchive>::operator=
PUBLIC	?CanReturn_NonStart@COpenSpecFlags@@QBE_NXZ	; COpenSpecFlags::CanReturn_NonStart
PUBLIC	?GetSpec@COpenType@@QBEABUCOpenSpecFlags@@_N00@Z ; COpenType::GetSpec
PUBLIC	??4CArcErrorInfo@@QAEAAU0@ABU0@@Z		; CArcErrorInfo::operator=
PUBLIC	??C?$CMyComPtr@UIArchiveOpenSeq@@@@QBEPAUIArchiveOpenSeq@@XZ ; CMyComPtr<IArchiveOpenSeq>::operator->
PUBLIC	??1?$CMyComPtr@UIArchiveOpenSeq@@@@QAE@XZ	; CMyComPtr<IArchiveOpenSeq>::~CMyComPtr<IArchiveOpenSeq>
PUBLIC	??7?$CMyComPtr@UIArchiveOpenSeq@@@@QBE_NXZ	; CMyComPtr<IArchiveOpenSeq>::operator!
PUBLIC	??I?$CMyComPtr@UIArchiveOpenSeq@@@@QAEPAPAUIArchiveOpenSeq@@XZ ; CMyComPtr<IArchiveOpenSeq>::operator&
PUBLIC	??0?$CMyComPtr@UIArchiveOpenSeq@@@@QAE@XZ	; CMyComPtr<IArchiveOpenSeq>::CMyComPtr<IArchiveOpenSeq>
PUBLIC	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ		; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
PUBLIC	??0?$CMyComPtr@UIInArchive@@@@QAE@XZ		; CMyComPtr<IInArchive>::CMyComPtr<IInArchive>
PUBLIC	?Flags_BackwardOpen@CArcInfoEx@@QBE_NXZ		; CArcInfoEx::Flags_BackwardOpen
PUBLIC	??4?$CRecordVector@H@@QAEAAV0@ABV0@@Z		; CRecordVector<int>::operator=
PUBLIC	??A?$CRecordVector@H@@QAEAAHI@Z			; CRecordVector<int>::operator[]
PUBLIC	??1?$CBuffer@E@@QAE@XZ				; CBuffer<unsigned char>::~CBuffer<unsigned char>
PUBLIC	??B?$CBuffer@E@@QAEPAEXZ			; CBuffer<unsigned char>::operator unsigned char *
PUBLIC	?Alloc@?$CBuffer@E@@QAEXI@Z			; CBuffer<unsigned char>::Alloc
PUBLIC	??0?$CRecordVector@H@@QAE@ABV0@@Z		; CRecordVector<int>::CRecordVector<int>
PUBLIC	?IsEqualTo@UString@@QBE_NPBD@Z			; UString::IsEqualTo
PUBLIC	??0?$CBuffer@E@@QAE@XZ				; CBuffer<unsigned char>::CBuffer<unsigned char>
PUBLIC	?Size@?$CRecordVector@H@@QBEIXZ			; CRecordVector<int>::Size
PUBLIC	?DeleteFrom@?$CRecordVector@H@@QAEXI@Z		; CRecordVector<int>::DeleteFrom
PUBLIC	??1?$CRecordVector@H@@QAE@XZ			; CRecordVector<int>::~CRecordVector<int>
PUBLIC	??1?$CObjArray@_N@@QAE@XZ			; CObjArray<bool>::~CObjArray<bool>
PUBLIC	?Insert@?$CRecordVector@H@@QAEXIH@Z		; CRecordVector<int>::Insert
PUBLIC	?FindInSorted@?$CRecordVector@H@@QBEHH@Z	; CRecordVector<int>::FindInSorted
PUBLIC	?IsSplit@CArcInfoEx@@QBE_NXZ			; CArcInfoEx::IsSplit
PUBLIC	?Add@?$CRecordVector@H@@QAEIH@Z			; CRecordVector<int>::Add
PUBLIC	??B?$CObjArray@_N@@QAEPA_NXZ			; CObjArray<bool>::operator bool *
PUBLIC	??0?$CObjArray@_N@@QAE@I@Z			; CObjArray<bool>::CObjArray<bool>
PUBLIC	?Size@?$CObjectVector@UCArcInfoEx@@@@QBEIXZ	; CObjectVector<CArcInfoEx>::Size
PUBLIC	??0?$CRecordVector@H@@QAE@XZ			; CRecordVector<int>::CRecordVector<int>
PUBLIC	?ReverseFind_Dot@UString@@QBEHXZ		; UString::ReverseFind_Dot
PUBLIC	?Release@?$CMyComPtr@UIArchiveGetRootProps@@@@QAEXXZ ; CMyComPtr<IArchiveGetRootProps>::Release
PUBLIC	?Release@?$CMyComPtr@UIArchiveGetRawProps@@@@QAEXXZ ; CMyComPtr<IArchiveGetRawProps>::Release
PUBLIC	?Release@?$CMyComPtr@UIInArchive@@@@QAEXXZ	; CMyComPtr<IInArchive>::Release
PUBLIC	__$ArrayPad$
PUBLIC	?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z	; CArc::OpenStream2
EXTRN	__imp__memmove:PROC
EXTRN	_IID_ICryptoGetTextPassword:BYTE
EXTRN	_memset:PROC
EXTRN	_IID_IArchiveOpenSeq:BYTE
EXTRN	?ReadStream@@YGJPAUISequentialInStream@@PAXPAI@Z:PROC ; ReadStream
EXTRN	?FindExtension@CArcInfoEx@@QBEHABVUString@@@Z:PROC ; CArcInfoEx::FindExtension
EXTRN	?ExtractFileNameFromPath@@YG?AVUString@@ABV1@@Z:PROC ; ExtractFileNameFromPath
xdata$x	SEGMENT
__ehfuncinfo$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z DD 019930522H
	DD	01cH
	DD	FLAT:__unwindtable$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$5
	DD	03H
	DD	FLAT:__unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$9
	DD	06H
	DD	FLAT:__unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$10
	DD	07H
	DD	FLAT:__unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$11
	DD	06H
	DD	FLAT:__unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$12
	DD	06H
	DD	FLAT:__unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$13
	DD	0aH
	DD	FLAT:__unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$14
	DD	0aH
	DD	FLAT:__unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$15
	DD	0cH
	DD	FLAT:__unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$16
	DD	0dH
	DD	FLAT:__unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$17
	DD	0eH
	DD	FLAT:__unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$18
	DD	0fH
	DD	FLAT:__unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$19
	DD	0cH
	DD	FLAT:__unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$20
	DD	011H
	DD	FLAT:__unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$21
	DD	012H
	DD	FLAT:__unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$22
	DD	012H
	DD	FLAT:__unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$23
	DD	014H
	DD	FLAT:__unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$24
	DD	015H
	DD	FLAT:__unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$25
	DD	016H
	DD	FLAT:__unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$26
	DD	017H
	DD	FLAT:__unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$27
	DD	017H
	DD	FLAT:__unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$28
	DD	019H
	DD	FLAT:__unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$29
	DD	01aH
	DD	FLAT:__unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$30
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv1976 = -2120						; size = 4
tv3878 = -2116						; size = 8
tv3875 = -2108						; size = 8
tv3854 = -2100						; size = 4
tv3814 = -2096						; size = 4
tv3780 = -2092						; size = 4
tv3777 = -2088						; size = 8
tv3751 = -2080						; size = 4
tv3702 = -2076						; size = 4
tv1748 = -2072						; size = 8
tv1709 = -2064						; size = 4
tv3571 = -2060						; size = 8
tv3558 = -2052						; size = 8
tv3534 = -2044						; size = 8
tv1559 = -2036						; size = 4
tv3490 = -2032						; size = 8
tv1495 = -2024						; size = 4
tv3431 = -2020						; size = 8
tv3410 = -2012						; size = 8
tv3366 = -2004						; size = 8
tv3317 = -1996						; size = 4
tv1320 = -1992						; size = 4
tv1178 = -1988						; size = 4
tv3208 = -1984						; size = 4
tv3150 = -1980						; size = 4
tv901 = -1976						; size = 4
tv3011 = -1972						; size = 8
tv797 = -1964						; size = 4
tv782 = -1960						; size = 4
tv2980 = -1956						; size = 4
tv2966 = -1952						; size = 4
tv2958 = -1948						; size = 4
tv2948 = -1944						; size = 4
tv2947 = -1940						; size = 4
tv2938 = -1936						; size = 4
tv602 = -1932						; size = 4
tv578 = -1928						; size = 4
tv574 = -1924						; size = 8
tv428 = -1916						; size = 4
tv394 = -1912						; size = 4
tv2054 = -1908						; size = 4
tv377 = -1904						; size = 4
tv2051 = -1900						; size = 4
tv243 = -1896						; size = 4
tv2030 = -1892						; size = 4
tv193 = -1888						; size = 4
tv148 = -1884						; size = 8
$T77805 = -1876						; size = 4
$T77804 = -1872						; size = 4
$T77803 = -1868						; size = 4
$T77802 = -1864						; size = 4
$T77799 = -1860						; size = 4
$T77798 = -1856						; size = 4
$T77797 = -1852						; size = 4
$T77796 = -1848						; size = 4
$T77795 = -1844						; size = 4
$T77794 = -1840						; size = 4
$T77793 = -1836						; size = 4
$T77792 = -1832						; size = 4
$T77789 = -1828						; size = 4
$T77788 = -1824						; size = 4
$T77787 = -1820						; size = 4
$T77786 = -1816						; size = 4
$T77785 = -1812						; size = 4
$T77784 = -1808						; size = 4
$T77781 = -1804						; size = 4
$T77780 = -1800						; size = 4
$T77779 = -1796						; size = 4
$T77778 = -1792						; size = 4
$T77775 = -1788						; size = 4
$T77774 = -1784						; size = 4
$T77773 = -1780						; size = 4
$T77772 = -1776						; size = 4
$T77771 = -1772						; size = 4
$T77770 = -1768						; size = 4
$T77769 = -1764						; size = 4
$T77768 = -1760						; size = 4
$T77767 = -1756						; size = 4
$T77766 = -1752						; size = 4
$T77763 = -1748						; size = 4
$T77762 = -1744						; size = 4
$T77761 = -1740						; size = 4
$T77758 = -1736						; size = 4
$T77757 = -1732						; size = 4
$T77754 = -1728						; size = 4
$T77753 = -1724						; size = 4
$T77752 = -1720						; size = 4
$T77751 = -1716						; size = 4
$T77750 = -1712						; size = 4
$T77749 = -1708						; size = 4
$T77748 = -1704						; size = 4
$T77747 = -1700						; size = 4
$T77746 = -1696						; size = 4
$T77745 = -1692						; size = 4
$T77744 = -1688						; size = 4
$T77741 = -1684						; size = 4
$T77740 = -1680						; size = 4
$T77739 = -1676						; size = 4
$T77738 = -1672						; size = 4
$T77737 = -1668						; size = 4
$T77734 = -1664						; size = 4
$T77733 = -1660						; size = 4
$T77732 = -1656						; size = 4
$T77731 = -1652						; size = 4
$T77730 = -1648						; size = 4
$T77729 = -1644						; size = 4
$T77728 = -1640						; size = 4
$T77727 = -1636						; size = 4
_returnParser$74945 = -1629				; size = 1
___result__$74919 = -1628				; size = 4
_thereIsTail$74917 = -1622				; size = 1
_openCur$74916 = -1621					; size = 1
_back$74912 = -1620					; size = 4
___result__$74905 = -1616				; size = 4
_needScan$74897 = -1610					; size = 1
_phySizeDefined$74888 = -1609				; size = 1
_phySize$74887 = -1608					; size = 8
_arcRem$74886 = -1600					; size = 8
_pi$74880 = -1588					; size = 112
___result__$74877 = -1472				; size = 4
_isOpen$74867 = -1465					; size = 1
___result__$74864 = -1464				; size = 4
_result$74863 = -1460					; size = 4
_maxCheckStartPosition$74862 = -1452			; size = 8
_arcStreamOffset$74859 = -1440				; size = 8
_rem$74858 = -1432					; size = 8
___result__$74852 = -1424				; size = 4
_archive$74851 = -1416					; size = 4
_specFlags$74849 = -1408				; size = 4
_isMainFormat$74848 = -1401				; size = 1
_isArcRes$74845 = -1400					; size = 4
_offsetInBuf$74842 = -1396				; size = 4
_startArcPos$74838 = -1392				; size = 8
_ai$74833 = -1384					; size = 4
_sig$74830 = -1380					; size = 4
_ai$74828 = -1376					; size = 4
_sigIndex$74826 = -1372					; size = 4
_isDifficult$74822 = -1365				; size = 1
_index$74821 = -1364					; size = 4
_wasOpen$74817 = -1357					; size = 1
_indexOfDifficult$74816 = -1356				; size = 4
_i$74815 = -1352					; size = 4
_nextNeedCheckStartOpen$74814 = -1345			; size = 1
_v$74812 = -1344					; size = 4
_ppp$74805 = -1340					; size = 4
_buf$74803 = -1336					; size = 4
_remScan$74800 = -1332					; size = 8
_scanSize$74797 = -1324					; size = 4
_availSize$74794 = -1320				; size = 4
_endPos$74792 = -1316					; size = 8
___result__$74789 = -1308				; size = 4
_beg$74786 = -1304					; size = 4
_keepSize$74783 = -1300					; size = 4
_skipSize$74781 = -1296					; size = 8
___result__$74774 = -1288				; size = 4
___result__$74771 = -1284				; size = 4
_seekPos$74770 = -1280					; size = 8
_processedSize$74769 = -1268				; size = 4
_posInBuf$74766 = -1260					; size = 8
_pi$74761 = -1252					; size = 4
_pos$74759 = -1248					; size = 8
_bytesInBuf$74758 = -1240				; size = 4
_bufPhyPos$74757 = -1236				; size = 8
_endOfFile$74756 = -1226				; size = 1
_needCheckStartOpen$74755 = -1225			; size = 1
_callbackPrev$74754 = -1224				; size = 8
_byteBuffer$74753 = -1216				; size = 4
___result__$74750 = -1212				; size = 4
_limitedStream$74743 = -1204				; size = 4
_limitedStreamSpec$74737 = -1196			; size = 4
___result__$74734 = -1192				; size = 4
_sigIndex$74729 = -1188					; size = 4
_v$74727 = -1184					; size = 4
_sig$74725 = -1180					; size = 4
_k$74721 = -1176					; size = 4
_isDifficult$74717 = -1169				; size = 1
_ai$74716 = -1168					; size = 4
_index$74714 = -1164					; size = 4
_i$74710 = -1160					; size = 4
_thereAreHandlersForSearch$74709 = -1153		; size = 1
_i$74705 = -1152					; size = 4
_difficultBools$74704 = -1144				; size = 4
_difficultFormats$74703 = -1132				; size = 12
_prevs$74699 = -1112					; size = 256
_hash$74698 = -852					; size = 4
_hashBuffer$74697 = -844				; size = 4
_kNumVals$74676 = -836					; size = 4
_kBufSize$74675 = -832					; size = 4
_kAfterSize$74674 = -828				; size = 4
_kBeforeSize$74673 = -824				; size = 4
_openCallback_Offset$74672 = -816			; size = 4
_openCallback_Offset_Spec$74666 = -808			; size = 4
_k$74662 = -804						; size = 4
_sigs$74661 = -800					; size = 4
_i$74656 = -796						; size = 4
_sum$74655 = -792					; size = 4
_sig2arc$ = -784					; size = 12
_arc2sig$ = -764					; size = 12
___result__$74650 = -748				; size = 4
___result__$74638 = -744				; size = 4
_openCur$74634 = -737					; size = 1
_specFlags$74633 = -736					; size = 4
_isMainFormat$74631 = -729				; size = 1
_pi$74628 = -724					; size = 112
___result__$74624 = -608				; size = 4
___result__$74621 = -604				; size = 4
_searchLimit$74617 = -596				; size = 8
_result$74616 = -584					; size = 4
___result__$74612 = -580				; size = 4
_archive$74611 = -572					; size = 4
___result__$74607 = -564				; size = 4
___result__$74604 = -560				; size = 4
_ai$74602 = -556					; size = 4
_signatureEnd$74590 = -552				; size = 4
_sig$74589 = -548					; size = 4
_k$74585 = -544						; size = 4
_needCheck$74583 = -538					; size = 1
_isNewStyleSignature$74582 = -537			; size = 1
_isArcRes$74579 = -536					; size = 4
_ai$74576 = -532					; size = 4
_form$74574 = -528					; size = 4
_splitIndex$74570 = -524				; size = 4
_i$74569 = -520						; size = 4
_sortedFormats$74568 = -512				; size = 12
___result__$74561 = -496				; size = 4
___result__$74558 = -492				; size = 4
_bufSize$74555 = -488					; size = 4
_processedSize$74554 = -480				; size = 4
_endOfFile$74553 = -469					; size = 1
_byteBuffer$74552 = -464				; size = 8
_extractCallback_To_OpenCallback$ = -448		; size = 4
_extractCallback_To_OpenCallback_Spec$ = -440		; size = 4
_handler$ = -432					; size = 4
_handlerSpec$ = -424					; size = 4
_ai$74498 = -420					; size = 4
_ai$74496 = -416					; size = 4
___result__$74468 = -412				; size = 4
_thereIsTail$74466 = -405				; size = 1
_specFlags$74465 = -404					; size = 4
_isMainFormat$74463 = -397				; size = 1
___result__$74460 = -396				; size = 4
_isArc$74450 = -389					; size = 1
___result__$74445 = -388				; size = 4
_openSeq$74440 = -380					; size = 4
_searchLimit$74401 = -368				; size = 8
_result$74399 = -356					; size = 4
___result__$74395 = -352				; size = 4
_archive$74394 = -344					; size = 4
___result__$74390 = -336				; size = 4
___result__$74386 = -332				; size = 4
_ai$74382 = -328					; size = 4
_exactOnly$74381 = -321					; size = 1
_i$74377 = -320						; size = 4
_numCheckTypes$74375 = -316				; size = 4
_mode$ = -312						; size = 4
_i$74369 = -308						; size = 4
_skipFrontalFormat$ = -300				; size = 4
___result__$74365 = -292				; size = 4
___result__$74362 = -288				; size = 4
_fileSize$ = -280					; size = 8
_udfIndex$74359 = -268					; size = 4
_isoIndex$74358 = -264					; size = 4
_iUdf$74354 = -260					; size = 4
_iIso$74351 = -256					; size = 4
_val$74348 = -252					; size = 4
_i$74344 = -248						; size = 4
___result__$74338 = -244				; size = 4
_processedSize$74337 = -236				; size = 4
_kBufSize$74336 = -228					; size = 4
_kRarHeader$74331 = -220				; size = 7
_buf$74330 = -208					; size = 4
___result__$74326 = -204				; size = 4
_processedSize$74325 = -196				; size = 4
_kBufSize$74324 = -188					; size = 4
_i$74320 = -184						; size = 4
_orderIndices2$74312 = -176				; size = 12
_byteBuffer$74311 = -156				; size = 8
___result__$74308 = -144				; size = 4
_ai$74295 = -140					; size = 4
_i$74291 = -136						; size = 4
_isPrearcExt$74290 = -129				; size = 1
_numFinded$74289 = -128					; size = 4
_formatIndex$ = -124					; size = 4
_numMainTypes$ = -120					; size = 4
_isForced$ = -114					; size = 1
_isUnknownExt$ = -113					; size = 1
_maxStartOffset$ = -112					; size = 8
_i$74277 = -104						; size = 4
_isMainFormatArr$ = -96					; size = 4
_searchMarkerInHandler$ = -85				; size = 1
_orderIndices$ = -80					; size = 12
_dotPos$74253 = -64					; size = 4
_extension$ = -56					; size = 12
_fileName$ = -36					; size = 12
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_op$ = 8						; size = 4
?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z PROC		; CArc::OpenStream2
; _this$ = ecx
; Line 1545
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 2108				; 0000083cH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-2120]
	mov	ecx, 527				; 0000020fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1548
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Release@?$CMyComPtr@UIInArchive@@@@QAEXXZ ; CMyComPtr<IInArchive>::Release
; Line 1549
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Release@?$CMyComPtr@UIArchiveGetRawProps@@@@QAEXXZ ; CMyComPtr<IArchiveGetRawProps>::Release
; Line 1550
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Release@?$CMyComPtr@UIArchiveGetRootProps@@@@QAEXXZ ; CMyComPtr<IArchiveGetRootProps>::Release
; Line 1552
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?ClearErrors@CArcErrorInfo@@QAEXXZ	; CArcErrorInfo::ClearErrors
; Line 1553
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], -1
; Line 1555
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+216], 0
; Line 1556
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+208], 0
	mov	DWORD PTR [edx+212], 0
; Line 1561
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 112				; 00000070H
	push	eax
	lea	ecx, DWORD PTR _fileName$[ebp]
	push	ecx
	call	?ExtractFileNameFromPath@@YG?AVUString@@ABV1@@Z ; ExtractFileNameFromPath
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 1562
	lea	ecx, DWORD PTR _extension$[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
; Line 1564
	lea	ecx, DWORD PTR _fileName$[ebp]
	call	?ReverseFind_Dot@UString@@QBEHXZ	; UString::ReverseFind_Dot
	mov	DWORD PTR _dotPos$74253[ebp], eax
; Line 1565
	cmp	DWORD PTR _dotPos$74253[ebp], 0
	jl	SHORT $LN272@OpenStream
; Line 1566
	mov	edx, DWORD PTR _dotPos$74253[ebp]
	add	edx, 1
	push	edx
	lea	ecx, DWORD PTR _fileName$[ebp]
	call	?Ptr@UString@@QBEPB_WI@Z		; UString::Ptr
	push	eax
	lea	ecx, DWORD PTR _extension$[ebp]
	call	??4UString@@QAEAAV0@PB_W@Z		; UString::operator=
$LN272@OpenStream:
; Line 1569
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	??0?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
; Line 1571
	mov	BYTE PTR _searchMarkerInHandler$[ebp], 0
; Line 1576
	mov	eax, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 8
	call	?Size@?$CObjectVector@UCArcInfoEx@@@@QBEIXZ ; CObjectVector<CArcInfoEx>::Size
	push	eax
	lea	ecx, DWORD PTR _isMainFormatArr$[ebp]
	call	??0?$CObjArray@_N@@QAE@I@Z		; CObjArray<bool>::CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
; Line 1578
	mov	DWORD PTR _i$74277[ebp], 0
	jmp	SHORT $LN271@OpenStream
$LN270@OpenStream:
	mov	ecx, DWORD PTR _i$74277[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$74277[ebp], ecx
$LN271@OpenStream:
	mov	edx, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR [edx]
	add	ecx, 8
	call	?Size@?$CObjectVector@UCArcInfoEx@@@@QBEIXZ ; CObjectVector<CArcInfoEx>::Size
	cmp	DWORD PTR _i$74277[ebp], eax
	jae	SHORT $LN269@OpenStream
; Line 1579
	lea	ecx, DWORD PTR _isMainFormatArr$[ebp]
	call	??B?$CObjArray@_N@@QAEPA_NXZ		; CObjArray<bool>::operator bool *
	mov	ecx, DWORD PTR _i$74277[ebp]
	mov	BYTE PTR [eax+ecx], 0
	jmp	SHORT $LN270@OpenStream
$LN269@OpenStream:
; Line 1585
	mov	edx, DWORD PTR _op$[ebp]
	movzx	eax, BYTE PTR [edx+29]
	test	eax, eax
	je	SHORT $LN275@OpenStream
	mov	ecx, DWORD PTR _op$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR tv148[ebp], edx
	mov	eax, DWORD PTR [ecx+36]
	mov	DWORD PTR tv148[ebp+4], eax
	jmp	SHORT $LN276@OpenStream
$LN275@OpenStream:
	mov	DWORD PTR tv148[ebp], 4194304		; 00400000H
	mov	DWORD PTR tv148[ebp+4], 0
$LN276@OpenStream:
	mov	ecx, DWORD PTR tv148[ebp]
	mov	DWORD PTR _maxStartOffset$[ebp], ecx
	mov	edx, DWORD PTR tv148[ebp+4]
	mov	DWORD PTR _maxStartOffset$[ebp+4], edx
; Line 1588
	mov	BYTE PTR _isUnknownExt$[ebp], 0
; Line 1591
	mov	BYTE PTR _isForced$[ebp], 0
; Line 1592
	mov	DWORD PTR _numMainTypes$[ebp], 0
; Line 1593
	mov	eax, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _formatIndex$[ebp], ecx
; Line 1595
	cmp	DWORD PTR _formatIndex$[ebp], 0
	jl	SHORT $LN268@OpenStream
; Line 1597
	mov	BYTE PTR _isForced$[ebp], 1
; Line 1598
	mov	edx, DWORD PTR _formatIndex$[ebp]
	push	edx
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	?Add@?$CRecordVector@H@@QAEIH@Z		; CRecordVector<int>::Add
; Line 1599
	mov	DWORD PTR _numMainTypes$[ebp], 1
; Line 1600
	lea	ecx, DWORD PTR _isMainFormatArr$[ebp]
	call	??B?$CObjArray@_N@@QAEPA_NXZ		; CObjArray<bool>::operator bool *
	mov	ecx, DWORD PTR _formatIndex$[ebp]
	mov	BYTE PTR [eax+ecx], 1
; Line 1602
	mov	BYTE PTR _searchMarkerInHandler$[ebp], 1
; Line 1604
	jmp	$LN267@OpenStream
$LN268@OpenStream:
; Line 1606
	mov	DWORD PTR _numFinded$74289[ebp], 0
; Line 1608
	mov	BYTE PTR _isPrearcExt$74290[ebp], 0
; Line 1612
	mov	DWORD PTR _i$74291[ebp], 0
	jmp	SHORT $LN266@OpenStream
$LN265@OpenStream:
	mov	edx, DWORD PTR _i$74291[ebp]
	add	edx, 1
	mov	DWORD PTR _i$74291[ebp], edx
$LN266@OpenStream:
	mov	eax, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 8
	call	?Size@?$CObjectVector@UCArcInfoEx@@@@QBEIXZ ; CObjectVector<CArcInfoEx>::Size
	cmp	DWORD PTR _i$74291[ebp], eax
	jae	$LN264@OpenStream
; Line 1614
	mov	ecx, DWORD PTR _i$74291[ebp]
	push	ecx
	mov	edx, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR [edx]
	add	ecx, 8
	call	??A?$CObjectVector@UCArcInfoEx@@@@QAEAAUCArcInfoEx@@I@Z ; CObjectVector<CArcInfoEx>::operator[]
	mov	DWORD PTR _ai$74295[ebp], eax
; Line 1616
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+223]
	test	ecx, ecx
	jne	SHORT $LN262@OpenStream
	mov	edx, DWORD PTR _op$[ebp]
	movzx	eax, BYTE PTR [edx+25]
	test	eax, eax
	jne	SHORT $LN263@OpenStream
$LN262@OpenStream:
; Line 1617
	mov	ecx, DWORD PTR _ai$74295[ebp]
	call	?IsSplit@CArcInfoEx@@QBE_NXZ		; CArcInfoEx::IsSplit
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN263@OpenStream
; Line 1618
	jmp	SHORT $LN265@OpenStream
$LN263@OpenStream:
; Line 1619
	mov	edx, DWORD PTR _i$74291[ebp]
	push	edx
	mov	eax, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	call	?FindInSorted@?$CRecordVector@H@@QBEHH@Z ; CRecordVector<int>::FindInSorted
	test	eax, eax
	jl	SHORT $LN260@OpenStream
; Line 1620
	jmp	$LN265@OpenStream
$LN260@OpenStream:
; Line 1623
	mov	ecx, DWORD PTR _ai$74295[ebp]
	push	ecx
	call	?IsPreArcFormat@@YG_NABUCArcInfoEx@@@Z	; IsPreArcFormat
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN259@OpenStream
; Line 1624
	mov	BYTE PTR _isPrearcExt$74290[ebp], 1
$LN259@OpenStream:
; Line 1627
	lea	eax, DWORD PTR _extension$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ai$74295[ebp]
	call	?FindExtension@CArcInfoEx@@QBEHABVUString@@@Z ; CArcInfoEx::FindExtension
	test	eax, eax
	jl	SHORT $LN258@OpenStream
; Line 1630
	mov	ecx, DWORD PTR _numFinded$74289[ebp]
	mov	DWORD PTR tv193[ebp], ecx
	mov	edx, DWORD PTR _numFinded$74289[ebp]
	add	edx, 1
	mov	DWORD PTR _numFinded$74289[ebp], edx
	mov	eax, DWORD PTR _i$74291[ebp]
	push	eax
	mov	ecx, DWORD PTR tv193[ebp]
	push	ecx
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	?Insert@?$CRecordVector@H@@QAEXIH@Z	; CRecordVector<int>::Insert
; Line 1631
	lea	ecx, DWORD PTR _isMainFormatArr$[ebp]
	call	??B?$CObjArray@_N@@QAEPA_NXZ		; CObjArray<bool>::operator bool *
	mov	edx, DWORD PTR _i$74291[ebp]
	mov	BYTE PTR [eax+edx], 1
; Line 1633
	jmp	SHORT $LN257@OpenStream
$LN258@OpenStream:
; Line 1634
	mov	eax, DWORD PTR _i$74291[ebp]
	push	eax
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	?Add@?$CRecordVector@H@@QAEIH@Z		; CRecordVector<int>::Add
$LN257@OpenStream:
; Line 1635
	jmp	$LN265@OpenStream
$LN264@OpenStream:
; Line 1638
	mov	ecx, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [ecx+48], 0
	jne	SHORT $LN256@OpenStream
; Line 1640
	cmp	DWORD PTR _numFinded$74289[ebp], 1
	je	SHORT $LN255@OpenStream
; Line 1641
	mov	DWORD PTR $T77727[ebp], -2147467263	; 80004001H
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _isMainFormatArr$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extension$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _fileName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T77727[ebp]
	jmp	$LN273@OpenStream
$LN255@OpenStream:
; Line 1642
	push	1
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	?DeleteFrom@?$CRecordVector@H@@QAEXI@Z	; CRecordVector<int>::DeleteFrom
$LN256@OpenStream:
; Line 1656
	mov	edx, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [edx+48], 0
	je	$LN254@OpenStream
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	?Size@?$CRecordVector@H@@QBEIXZ		; CRecordVector<int>::Size
	cmp	eax, 2
	jb	$LN254@OpenStream
; Line 1658
	mov	esi, esp
	push	0
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$74308[ebp], eax
	cmp	DWORD PTR ___result__$74308[ebp], 0
	je	SHORT $LN253@OpenStream
	mov	eax, DWORD PTR ___result__$74308[ebp]
	mov	DWORD PTR $T77728[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _isMainFormatArr$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extension$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _fileName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T77728[ebp]
	jmp	$LN273@OpenStream
$LN253@OpenStream:
; Line 1659
	lea	ecx, DWORD PTR _byteBuffer$74311[ebp]
	call	??0?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::CBuffer<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
; Line 1660
	lea	ecx, DWORD PTR _orderIndices2$74312[ebp]
	call	??0?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 5
; Line 1661
	cmp	DWORD PTR _numFinded$74289[ebp], 0
	je	SHORT $LN251@OpenStream
	lea	ecx, DWORD PTR _extension$[ebp]
	push	ecx
	call	?IsExeExt@@YG_NABVUString@@@Z		; IsExeExt
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN252@OpenStream
$LN251@OpenStream:
; Line 1665
	jmp	$LN250@OpenStream
$LN252@OpenStream:
	push	OFFSET $SG74318
	lea	ecx, DWORD PTR _extension$[ebp]
	call	?IsEqualTo@UString@@QBE_NPBD@Z		; UString::IsEqualTo
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN248@OpenStream
	push	OFFSET $SG74319
	lea	ecx, DWORD PTR _extension$[ebp]
	call	?IsEqualTo@UString@@QBE_NPBD@Z		; UString::IsEqualTo
	movzx	ecx, al
	test	ecx, ecx
	je	$LN249@OpenStream
$LN248@OpenStream:
; Line 1667
	push	OFFSET $SG74322
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T77729[ebp], esp
	lea	edx, DWORD PTR _orderIndices$[ebp]
	push	edx
	call	??0?$CRecordVector@H@@QAE@ABV0@@Z	; CRecordVector<int>::CRecordVector<int>
	mov	DWORD PTR tv2030[ebp], eax
	mov	eax, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?FindFormatForArchiveType@@YGHPAVCCodecs@@V?$CRecordVector@H@@PBD@Z ; FindFormatForArchiveType
	mov	DWORD PTR tv243[ebp], eax
	mov	edx, DWORD PTR tv243[ebp]
	mov	DWORD PTR _i$74320[ebp], edx
; Line 1668
	cmp	DWORD PTR _i$74320[ebp], 0
	jl	$LN247@OpenStream
; Line 1670
	mov	DWORD PTR _kBufSize$74324[ebp], 1024	; 00000400H
; Line 1671
	push	1024					; 00000400H
	lea	ecx, DWORD PTR _byteBuffer$74311[ebp]
	call	?Alloc@?$CBuffer@E@@QAEXI@Z		; CBuffer<unsigned char>::Alloc
; Line 1672
	mov	DWORD PTR _processedSize$74325[ebp], 1024 ; 00000400H
; Line 1673
	lea	eax, DWORD PTR _processedSize$74325[ebp]
	push	eax
	lea	ecx, DWORD PTR _byteBuffer$74311[ebp]
	call	??B?$CBuffer@E@@QAEPAEXZ		; CBuffer<unsigned char>::operator unsigned char *
	push	eax
	mov	ecx, DWORD PTR _op$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	call	?ReadStream@@YGJPAUISequentialInStream@@PAXPAI@Z ; ReadStream
	mov	DWORD PTR ___result__$74326[ebp], eax
	cmp	DWORD PTR ___result__$74326[ebp], 0
	je	SHORT $LN246@OpenStream
	mov	eax, DWORD PTR ___result__$74326[ebp]
	mov	DWORD PTR $T77730[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _orderIndices2$74312[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _byteBuffer$74311[ebp]
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _isMainFormatArr$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extension$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _fileName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T77730[ebp]
	jmp	$LN273@OpenStream
$LN246@OpenStream:
; Line 1674
	cmp	DWORD PTR _processedSize$74325[ebp], 16	; 00000010H
	jb	$LN247@OpenStream
; Line 1676
	lea	ecx, DWORD PTR _byteBuffer$74311[ebp]
	call	??B?$CBuffer@E@@QAEPAEXZ		; CBuffer<unsigned char>::operator unsigned char *
	mov	DWORD PTR _buf$74330[ebp], eax
; Line 1677
	mov	BYTE PTR _kRarHeader$74331[ebp], 82	; 00000052H
	mov	BYTE PTR _kRarHeader$74331[ebp+1], 97	; 00000061H
	mov	BYTE PTR _kRarHeader$74331[ebp+2], 114	; 00000072H
	mov	BYTE PTR _kRarHeader$74331[ebp+3], 33	; 00000021H
	mov	BYTE PTR _kRarHeader$74331[ebp+4], 26	; 0000001aH
	mov	BYTE PTR _kRarHeader$74331[ebp+5], 7
	mov	BYTE PTR _kRarHeader$74331[ebp+6], 0
; Line 1678
	push	7
	lea	ecx, DWORD PTR _kRarHeader$74331[ebp]
	push	ecx
	mov	edx, DWORD PTR _buf$74330[ebp]
	push	edx
	call	?TestSignature@@YG_NPBE0I@Z		; TestSignature
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN247@OpenStream
	mov	ecx, DWORD PTR _buf$74330[ebp]
	movzx	edx, BYTE PTR [ecx+9]
	cmp	edx, 115				; 00000073H
	jne	SHORT $LN247@OpenStream
	mov	eax, DWORD PTR _buf$74330[ebp]
	movzx	ecx, BYTE PTR [eax+10]
	and	ecx, 1
	je	SHORT $LN247@OpenStream
; Line 1680
	mov	edx, DWORD PTR _i$74320[ebp]
	push	edx
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	??A?$CRecordVector@H@@QAEAAHI@Z		; CRecordVector<int>::operator[]
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR _orderIndices2$74312[ebp]
	call	?Add@?$CRecordVector@H@@QAEIH@Z		; CRecordVector<int>::Add
; Line 1681
	mov	ecx, DWORD PTR _i$74320[ebp]
	push	ecx
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	??A?$CRecordVector@H@@QAEAAHI@Z		; CRecordVector<int>::operator[]
	mov	DWORD PTR [eax], -1
; Line 1682
	mov	edx, DWORD PTR _i$74320[ebp]
	cmp	edx, DWORD PTR _numFinded$74289[ebp]
	jl	SHORT $LN247@OpenStream
; Line 1683
	mov	eax, DWORD PTR _numFinded$74289[ebp]
	add	eax, 1
	mov	DWORD PTR _numFinded$74289[ebp], eax
$LN247@OpenStream:
; Line 1688
	jmp	$LN250@OpenStream
$LN249@OpenStream:
; Line 1690
	mov	DWORD PTR _kBufSize$74336[ebp], 1024	; 00000400H
; Line 1691
	push	1024					; 00000400H
	lea	ecx, DWORD PTR _byteBuffer$74311[ebp]
	call	?Alloc@?$CBuffer@E@@QAEXI@Z		; CBuffer<unsigned char>::Alloc
; Line 1692
	mov	DWORD PTR _processedSize$74337[ebp], 1024 ; 00000400H
; Line 1693
	lea	ecx, DWORD PTR _processedSize$74337[ebp]
	push	ecx
	lea	ecx, DWORD PTR _byteBuffer$74311[ebp]
	call	??B?$CBuffer@E@@QAEPAEXZ		; CBuffer<unsigned char>::operator unsigned char *
	push	eax
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	call	?ReadStream@@YGJPAUISequentialInStream@@PAXPAI@Z ; ReadStream
	mov	DWORD PTR ___result__$74338[ebp], eax
	cmp	DWORD PTR ___result__$74338[ebp], 0
	je	SHORT $LN241@OpenStream
	mov	ecx, DWORD PTR ___result__$74338[ebp]
	mov	DWORD PTR $T77731[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _orderIndices2$74312[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _byteBuffer$74311[ebp]
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _isMainFormatArr$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extension$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _fileName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T77731[ebp]
	jmp	$LN273@OpenStream
$LN241@OpenStream:
; Line 1694
	cmp	DWORD PTR _processedSize$74337[ebp], 0
	jne	SHORT $LN240@OpenStream
; Line 1695
	mov	DWORD PTR $T77732[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _orderIndices2$74312[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _byteBuffer$74311[ebp]
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _isMainFormatArr$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extension$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _fileName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T77732[ebp]
	jmp	$LN273@OpenStream
$LN240@OpenStream:
; Line 1705
	push	0
	push	0
	lea	edx, DWORD PTR _orderIndices2$74312[ebp]
	push	edx
	mov	eax, DWORD PTR _numFinded$74289[ebp]
	push	eax
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	push	ecx
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	?MakeCheckOrder@@YGXPAVCCodecs@@AAV?$CRecordVector@H@@I1PBEI@Z ; MakeCheckOrder
; Line 1706
	mov	ecx, DWORD PTR _processedSize$74337[ebp]
	push	ecx
	lea	ecx, DWORD PTR _byteBuffer$74311[ebp]
	call	??B?$CBuffer@E@@QAEPAEXZ		; CBuffer<unsigned char>::operator unsigned char *
	push	eax
	lea	edx, DWORD PTR _orderIndices2$74312[ebp]
	push	edx
	mov	eax, DWORD PTR _numFinded$74289[ebp]
	push	eax
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	push	ecx
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	?MakeCheckOrder@@YGXPAVCCodecs@@AAV?$CRecordVector@H@@I1PBEI@Z ; MakeCheckOrder
$LN250@OpenStream:
; Line 1711
	mov	DWORD PTR _i$74344[ebp], 0
	jmp	SHORT $LN239@OpenStream
$LN238@OpenStream:
	mov	ecx, DWORD PTR _i$74344[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$74344[ebp], ecx
$LN239@OpenStream:
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	?Size@?$CRecordVector@H@@QBEIXZ		; CRecordVector<int>::Size
	cmp	DWORD PTR _i$74344[ebp], eax
	jae	SHORT $LN237@OpenStream
; Line 1713
	mov	edx, DWORD PTR _i$74344[ebp]
	push	edx
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	??A?$CRecordVector@H@@QAEAAHI@Z		; CRecordVector<int>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _val$74348[ebp], eax
; Line 1714
	cmp	DWORD PTR _val$74348[ebp], -1
	je	SHORT $LN236@OpenStream
; Line 1715
	mov	ecx, DWORD PTR _val$74348[ebp]
	push	ecx
	lea	ecx, DWORD PTR _orderIndices2$74312[ebp]
	call	?Add@?$CRecordVector@H@@QAEIH@Z		; CRecordVector<int>::Add
$LN236@OpenStream:
; Line 1716
	jmp	SHORT $LN238@OpenStream
$LN237@OpenStream:
; Line 1717
	lea	edx, DWORD PTR _orderIndices2$74312[ebp]
	push	edx
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	??4?$CRecordVector@H@@QAEAAV0@ABV0@@Z	; CRecordVector<int>::operator=
; Line 1718
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _orderIndices2$74312[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _byteBuffer$74311[ebp]
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
$LN254@OpenStream:
; Line 1720
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	?Size@?$CRecordVector@H@@QBEIXZ		; CRecordVector<int>::Size
	cmp	eax, 2
	jb	$LN235@OpenStream
; Line 1722
	push	OFFSET $SG74353
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T77733[ebp], esp
	lea	eax, DWORD PTR _orderIndices$[ebp]
	push	eax
	call	??0?$CRecordVector@H@@QAE@ABV0@@Z	; CRecordVector<int>::CRecordVector<int>
	mov	DWORD PTR tv2051[ebp], eax
	mov	ecx, DWORD PTR _op$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	?FindFormatForArchiveType@@YGHPAVCCodecs@@V?$CRecordVector@H@@PBD@Z ; FindFormatForArchiveType
	mov	DWORD PTR tv377[ebp], eax
	mov	eax, DWORD PTR tv377[ebp]
	mov	DWORD PTR _iIso$74351[ebp], eax
; Line 1723
	push	OFFSET $SG74356
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T77734[ebp], esp
	lea	edx, DWORD PTR _orderIndices$[ebp]
	push	edx
	call	??0?$CRecordVector@H@@QAE@ABV0@@Z	; CRecordVector<int>::CRecordVector<int>
	mov	DWORD PTR tv2054[ebp], eax
	mov	eax, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?FindFormatForArchiveType@@YGHPAVCCodecs@@V?$CRecordVector@H@@PBD@Z ; FindFormatForArchiveType
	mov	DWORD PTR tv394[ebp], eax
	mov	edx, DWORD PTR tv394[ebp]
	mov	DWORD PTR _iUdf$74354[ebp], edx
; Line 1724
	mov	eax, DWORD PTR _iUdf$74354[ebp]
	cmp	eax, DWORD PTR _iIso$74351[ebp]
	jle	SHORT $LN235@OpenStream
	cmp	DWORD PTR _iIso$74351[ebp], 0
	jl	SHORT $LN235@OpenStream
; Line 1726
	mov	ecx, DWORD PTR _iIso$74351[ebp]
	push	ecx
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	??A?$CRecordVector@H@@QAEAAHI@Z		; CRecordVector<int>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _isoIndex$74358[ebp], edx
; Line 1727
	mov	eax, DWORD PTR _iUdf$74354[ebp]
	push	eax
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	??A?$CRecordVector@H@@QAEAAHI@Z		; CRecordVector<int>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _udfIndex$74359[ebp], ecx
; Line 1728
	mov	edx, DWORD PTR _iUdf$74354[ebp]
	push	edx
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	??A?$CRecordVector@H@@QAEAAHI@Z		; CRecordVector<int>::operator[]
	mov	ecx, DWORD PTR _isoIndex$74358[ebp]
	mov	DWORD PTR [eax], ecx
; Line 1729
	mov	edx, DWORD PTR _iIso$74351[ebp]
	push	edx
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	??A?$CRecordVector@H@@QAEAAHI@Z		; CRecordVector<int>::operator[]
	mov	ecx, DWORD PTR _udfIndex$74359[ebp]
	mov	DWORD PTR [eax], ecx
$LN235@OpenStream:
; Line 1733
	mov	edx, DWORD PTR _numFinded$74289[ebp]
	mov	DWORD PTR _numMainTypes$[ebp], edx
; Line 1734
	cmp	DWORD PTR _numMainTypes$[ebp], 0
	je	SHORT $LN277@OpenStream
	movzx	eax, BYTE PTR _isPrearcExt$74290[ebp]
	test	eax, eax
	jne	SHORT $LN277@OpenStream
	mov	DWORD PTR tv428[ebp], 0
	jmp	SHORT $LN278@OpenStream
$LN277@OpenStream:
	mov	DWORD PTR tv428[ebp], 1
$LN278@OpenStream:
	mov	cl, BYTE PTR tv428[ebp]
	mov	BYTE PTR _isUnknownExt$[ebp], cl
$LN267@OpenStream:
; Line 1747
	mov	DWORD PTR _fileSize$[ebp], 0
	mov	DWORD PTR _fileSize$[ebp+4], 0
; Line 1748
	mov	edx, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [edx+48], 0
	je	$LN233@OpenStream
; Line 1750
	mov	esi, esp
	lea	eax, DWORD PTR _fileSize$[ebp]
	push	eax
	push	2
	push	0
	push	0
	mov	ecx, DWORD PTR _op$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$74362[ebp], eax
	cmp	DWORD PTR ___result__$74362[ebp], 0
	je	SHORT $LN232@OpenStream
	mov	ecx, DWORD PTR ___result__$74362[ebp]
	mov	DWORD PTR $T77737[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _isMainFormatArr$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extension$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _fileName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T77737[ebp]
	jmp	$LN273@OpenStream
$LN232@OpenStream:
; Line 1751
	mov	esi, esp
	push	0
	push	0
	push	0
	push	0
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	ecx, DWORD PTR _op$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$74365[ebp], eax
	cmp	DWORD PTR ___result__$74365[ebp], 0
	je	SHORT $LN233@OpenStream
	mov	edx, DWORD PTR ___result__$74365[ebp]
	mov	DWORD PTR $T77738[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _isMainFormatArr$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extension$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _fileName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T77738[ebp]
	jmp	$LN273@OpenStream
$LN233@OpenStream:
; Line 1753
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _fileSize$[ebp]
	mov	DWORD PTR [eax+192], ecx
	mov	edx, DWORD PTR _fileSize$[ebp+4]
	mov	DWORD PTR [eax+196], edx
; Line 1758
	mov	eax, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 8
	call	?Size@?$CObjectVector@UCArcInfoEx@@@@QBEIXZ ; CObjectVector<CArcInfoEx>::Size
	push	eax
	lea	ecx, DWORD PTR _skipFrontalFormat$[ebp]
	call	??0?$CObjArray@_N@@QAE@I@Z		; CObjArray<bool>::CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 6
; Line 1760
	mov	DWORD PTR _i$74369[ebp], 0
	jmp	SHORT $LN230@OpenStream
$LN229@OpenStream:
	mov	ecx, DWORD PTR _i$74369[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$74369[ebp], ecx
$LN230@OpenStream:
	mov	edx, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR [edx]
	add	ecx, 8
	call	?Size@?$CObjectVector@UCArcInfoEx@@@@QBEIXZ ; CObjectVector<CArcInfoEx>::Size
	cmp	DWORD PTR _i$74369[ebp], eax
	jae	SHORT $LN228@OpenStream
; Line 1761
	lea	ecx, DWORD PTR _skipFrontalFormat$[ebp]
	call	??B?$CObjArray@_N@@QAEPA_NXZ		; CObjArray<bool>::operator bool *
	mov	ecx, DWORD PTR _i$74369[ebp]
	mov	BYTE PTR [eax+ecx], 0
	jmp	SHORT $LN229@OpenStream
$LN228@OpenStream:
; Line 1766
	mov	edx, DWORD PTR _op$[ebp]
	add	edx, 8
	mov	DWORD PTR _mode$[ebp], edx
; Line 1772
	mov	eax, DWORD PTR _mode$[ebp]
	movzx	ecx, BYTE PTR [eax+17]
	test	ecx, ecx
	je	$LN227@OpenStream
; Line 1776
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	?Size@?$CRecordVector@H@@QBEIXZ		; CRecordVector<int>::Size
	mov	DWORD PTR _numCheckTypes$74375[ebp], eax
; Line 1777
	cmp	DWORD PTR _formatIndex$[ebp], 0
	jl	SHORT $LN226@OpenStream
; Line 1778
	mov	edx, DWORD PTR _numMainTypes$[ebp]
	mov	DWORD PTR _numCheckTypes$74375[ebp], edx
$LN226@OpenStream:
; Line 1780
	mov	DWORD PTR _i$74377[ebp], 0
	jmp	SHORT $LN225@OpenStream
$LN224@OpenStream:
	mov	eax, DWORD PTR _i$74377[ebp]
	add	eax, 1
	mov	DWORD PTR _i$74377[ebp], eax
$LN225@OpenStream:
	mov	ecx, DWORD PTR _i$74377[ebp]
	cmp	ecx, DWORD PTR _numCheckTypes$74375[ebp]
	jae	$LN227@OpenStream
; Line 1782
	mov	edx, DWORD PTR _i$74377[ebp]
	push	edx
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	??A?$CRecordVector@H@@QAEAAHI@Z		; CRecordVector<int>::operator[]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+148], edx
; Line 1784
	mov	BYTE PTR _exactOnly$74381[ebp], 0
; Line 1788
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+148]
	push	ecx
	mov	edx, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR [edx]
	add	ecx, 8
	call	??A?$CObjectVector@UCArcInfoEx@@@@QAEAAUCArcInfoEx@@I@Z ; CObjectVector<CArcInfoEx>::operator[]
	mov	DWORD PTR _ai$74382[ebp], eax
; Line 1790
	mov	eax, DWORD PTR _i$74377[ebp]
	cmp	eax, DWORD PTR _numMainTypes$[ebp]
	jb	SHORT $LN222@OpenStream
; Line 1794
	mov	ecx, DWORD PTR _ai$74382[ebp]
	call	?Flags_BackwardOpen@CArcInfoEx@@QBE_NXZ	; CArcInfoEx::Flags_BackwardOpen
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN221@OpenStream
; Line 1795
	jmp	SHORT $LN224@OpenStream
$LN221@OpenStream:
; Line 1796
	mov	BYTE PTR _exactOnly$74381[ebp], 1
$LN222@OpenStream:
; Line 1802
	mov	edx, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [edx+56], 0
	je	$LN220@OpenStream
; Line 1803
	mov	esi, esp
	lea	eax, DWORD PTR _fileSize$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _op$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$74386[ebp], eax
	cmp	DWORD PTR ___result__$74386[ebp], 0
	je	SHORT $LN220@OpenStream
	mov	ecx, DWORD PTR ___result__$74386[ebp]
	mov	DWORD PTR $T77739[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _skipFrontalFormat$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _isMainFormatArr$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extension$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _fileName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T77739[ebp]
	jmp	$LN273@OpenStream
$LN220@OpenStream:
; Line 1805
	mov	edx, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [edx+48], 0
	je	$LN218@OpenStream
; Line 1807
	mov	esi, esp
	push	0
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$74390[ebp], eax
	cmp	DWORD PTR ___result__$74390[ebp], 0
	je	SHORT $LN218@OpenStream
	mov	eax, DWORD PTR ___result__$74390[ebp]
	mov	DWORD PTR $T77740[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _skipFrontalFormat$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _isMainFormatArr$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extension$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _fileName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T77740[ebp]
	jmp	$LN273@OpenStream
$LN218@OpenStream:
; Line 1810
	lea	ecx, DWORD PTR _archive$74394[ebp]
	call	??0?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::CMyComPtr<IInArchive>
	mov	BYTE PTR __$EHRec$[ebp+8], 7
; Line 1812
	lea	ecx, DWORD PTR _archive$74394[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+148]
	push	eax
	mov	ecx, DWORD PTR _op$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PrepareToOpen@CArc@@AAEJABUCOpenOptions@@IAAV?$CMyComPtr@UIInArchive@@@@@Z ; CArc::PrepareToOpen
	mov	DWORD PTR ___result__$74395[ebp], eax
	cmp	DWORD PTR ___result__$74395[ebp], 0
	je	SHORT $LN216@OpenStream
	mov	edx, DWORD PTR ___result__$74395[ebp]
	mov	DWORD PTR $T77741[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _archive$74394[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _skipFrontalFormat$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _isMainFormatArr$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extension$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _fileName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T77741[ebp]
	jmp	$LN273@OpenStream
$LN216@OpenStream:
; Line 1813
	lea	ecx, DWORD PTR _archive$74394[ebp]
	call	??7?$CMyComPtr@UIInArchive@@@@QBE_NXZ	; CMyComPtr<IInArchive>::operator!
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN215@OpenStream
; Line 1814
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _archive$74394[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	jmp	$LN224@OpenStream
$LN215@OpenStream:
; Line 1817
	mov	ecx, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [ecx+48], 0
	je	$LN214@OpenStream
; Line 1819
	movzx	edx, BYTE PTR _exactOnly$74381[ebp]
	test	edx, edx
	jne	SHORT $LN279@OpenStream
	movzx	eax, BYTE PTR _searchMarkerInHandler$[ebp]
	test	eax, eax
	je	SHORT $LN279@OpenStream
	mov	ecx, DWORD PTR _maxStartOffset$[ebp]
	mov	DWORD PTR tv574[ebp], ecx
	mov	edx, DWORD PTR _maxStartOffset$[ebp+4]
	mov	DWORD PTR tv574[ebp+4], edx
	jmp	SHORT $LN280@OpenStream
$LN279@OpenStream:
	mov	DWORD PTR tv574[ebp], 0
	mov	DWORD PTR tv574[ebp+4], 0
$LN280@OpenStream:
	mov	eax, DWORD PTR tv574[ebp]
	mov	DWORD PTR _searchLimit$74401[ebp], eax
	mov	ecx, DWORD PTR tv574[ebp+4]
	mov	DWORD PTR _searchLimit$74401[ebp+4], ecx
; Line 1820
	lea	ecx, DWORD PTR _archive$74394[ebp]
	call	??C?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator->
	mov	DWORD PTR tv578[ebp], eax
	mov	esi, esp
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	lea	ecx, DWORD PTR _searchLimit$74401[ebp]
	push	ecx
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	mov	ecx, DWORD PTR tv578[ebp]
	push	ecx
	mov	edx, DWORD PTR tv578[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$74399[ebp], eax
; Line 1822
	jmp	$LN213@OpenStream
$LN214@OpenStream:
; Line 1824
	lea	ecx, DWORD PTR _openSeq$74440[ebp]
	call	??0?$CMyComPtr@UIArchiveOpenSeq@@@@QAE@XZ ; CMyComPtr<IArchiveOpenSeq>::CMyComPtr<IArchiveOpenSeq>
	mov	BYTE PTR __$EHRec$[ebp+8], 8
; Line 1825
	lea	ecx, DWORD PTR _openSeq$74440[ebp]
	call	??I?$CMyComPtr@UIArchiveOpenSeq@@@@QAEPAPAUIArchiveOpenSeq@@XZ ; CMyComPtr<IArchiveOpenSeq>::operator&
	push	eax
	push	OFFSET _IID_IArchiveOpenSeq
	lea	ecx, DWORD PTR _archive$74394[ebp]
	call	??$QueryInterface@X@?$CMyComPtr@UIInArchive@@@@QBEJABU_GUID@@PAPAX@Z ; CMyComPtr<IInArchive>::QueryInterface<void>
; Line 1826
	lea	ecx, DWORD PTR _openSeq$74440[ebp]
	call	??7?$CMyComPtr@UIArchiveOpenSeq@@@@QBE_NXZ ; CMyComPtr<IArchiveOpenSeq>::operator!
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN212@OpenStream
; Line 1827
	mov	DWORD PTR $T77744[ebp], -2147467263	; 80004001H
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _openSeq$74440[ebp]
	call	??1?$CMyComPtr@UIArchiveOpenSeq@@@@QAE@XZ ; CMyComPtr<IArchiveOpenSeq>::~CMyComPtr<IArchiveOpenSeq>
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _archive$74394[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _skipFrontalFormat$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _isMainFormatArr$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extension$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _fileName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T77744[ebp]
	jmp	$LN273@OpenStream
$LN212@OpenStream:
; Line 1828
	lea	ecx, DWORD PTR _openSeq$74440[ebp]
	call	??C?$CMyComPtr@UIArchiveOpenSeq@@@@QBEPAUIArchiveOpenSeq@@XZ ; CMyComPtr<IArchiveOpenSeq>::operator->
	mov	DWORD PTR tv602[ebp], eax
	mov	esi, esp
	mov	eax, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	mov	edx, DWORD PTR tv602[ebp]
	push	edx
	mov	eax, DWORD PTR tv602[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$74399[ebp], eax
; Line 1829
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _openSeq$74440[ebp]
	call	??1?$CMyComPtr@UIArchiveOpenSeq@@@@QAE@XZ ; CMyComPtr<IArchiveOpenSeq>::~CMyComPtr<IArchiveOpenSeq>
$LN213@OpenStream:
; Line 1831
	mov	eax, DWORD PTR _result$74399[ebp]
	push	eax
	push	0
	push	0
	lea	ecx, DWORD PTR _archive$74394[ebp]
	call	??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator IInArchive *
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadBasicProps@CArc@@QAEJPAUIInArchive@@_KJ@Z ; CArc::ReadBasicProps
	mov	DWORD PTR ___result__$74445[ebp], eax
	cmp	DWORD PTR ___result__$74445[ebp], 0
	je	SHORT $LN211@OpenStream
	mov	ecx, DWORD PTR ___result__$74445[ebp]
	mov	DWORD PTR $T77745[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _archive$74394[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _skipFrontalFormat$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _isMainFormatArr$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extension$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _fileName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T77745[ebp]
	jmp	$LN273@OpenStream
$LN211@OpenStream:
; Line 1833
	cmp	DWORD PTR _result$74399[ebp], 1
	jne	$LN210@OpenStream
; Line 1835
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?IsArc_After_NonOpen@CArcErrorInfo@@QBE_NXZ ; CArcErrorInfo::IsArc_After_NonOpen
	mov	BYTE PTR _isArc$74450[ebp], al
; Line 1839
	mov	edx, DWORD PTR _mode$[ebp]
	movzx	eax, BYTE PTR [edx+18]
	test	eax, eax
	je	SHORT $LN208@OpenStream
	movzx	ecx, BYTE PTR _isArc$74450[ebp]
	test	ecx, ecx
	jne	SHORT $LN209@OpenStream
$LN208@OpenStream:
; Line 1840
	lea	ecx, DWORD PTR _skipFrontalFormat$[ebp]
	call	??B?$CObjArray@_N@@QAEPA_NXZ		; CObjArray<bool>::operator bool *
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	mov	BYTE PTR [eax+ecx], 1
$LN209@OpenStream:
; Line 1843
	movzx	edx, BYTE PTR _exactOnly$74381[ebp]
	test	edx, edx
	je	SHORT $LN207@OpenStream
; Line 1844
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _archive$74394[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	jmp	$LN224@OpenStream
$LN207@OpenStream:
; Line 1846
	cmp	DWORD PTR _i$74377[ebp], 0
	jne	$LN206@OpenStream
	cmp	DWORD PTR _numMainTypes$[ebp], 1
	jne	$LN206@OpenStream
; Line 1849
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+148]
	mov	DWORD PTR [eax+28], edx
; Line 1850
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??4CArcErrorInfo@@QAEAAU0@ABU0@@Z
; Line 1852
	mov	ecx, DWORD PTR _mode$[ebp]
	movzx	edx, BYTE PTR [ecx+18]
	test	edx, edx
	jne	$LN206@OpenStream
	movzx	eax, BYTE PTR _isArc$74450[ebp]
	test	eax, eax
	je	SHORT $LN206@OpenStream
; Line 1858
	mov	ecx, DWORD PTR _ai$74382[ebp]
	push	ecx
	call	?IsPreArcFormat@@YG_NABUCArcInfoEx@@@Z	; IsPreArcFormat
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN206@OpenStream
; Line 1860
	mov	DWORD PTR $T77746[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _archive$74394[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _skipFrontalFormat$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _isMainFormatArr$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extension$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _fileName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T77746[ebp]
	jmp	$LN273@OpenStream
$LN206@OpenStream:
; Line 1876
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _archive$74394[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	jmp	$LN224@OpenStream
$LN210@OpenStream:
; Line 1879
	mov	eax, DWORD PTR _result$74399[ebp]
	mov	DWORD PTR ___result__$74460[ebp], eax
	cmp	DWORD PTR ___result__$74460[ebp], 0
	je	SHORT $LN203@OpenStream
	mov	ecx, DWORD PTR ___result__$74460[ebp]
	mov	DWORD PTR $T77747[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _archive$74394[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _skipFrontalFormat$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _isMainFormatArr$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extension$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _fileName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T77747[ebp]
	jmp	$LN273@OpenStream
$LN203@OpenStream:
; Line 1883
	lea	ecx, DWORD PTR _isMainFormatArr$[ebp]
	call	??B?$CObjArray@_N@@QAEPA_NXZ		; CObjArray<bool>::operator bool *
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	mov	dl, BYTE PTR [eax+ecx]
	mov	BYTE PTR _isMainFormat$74463[ebp], dl
; Line 1884
	movzx	eax, BYTE PTR _isUnknownExt$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _isMainFormat$74463[ebp]
	push	ecx
	movzx	edx, BYTE PTR _isForced$[ebp]
	push	edx
	mov	ecx, DWORD PTR _mode$[ebp]
	call	?GetSpec@COpenType@@QBEABUCOpenSpecFlags@@_N00@Z ; COpenType::GetSpec
	mov	DWORD PTR _specFlags$74465[ebp], eax
; Line 1886
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+16]
	mov	BYTE PTR _thereIsTail$74466[ebp], cl
; Line 1887
	movzx	edx, BYTE PTR _thereIsTail$74466[ebp]
	test	edx, edx
	je	$LN202@OpenStream
	mov	eax, DWORD PTR _mode$[ebp]
	movzx	ecx, BYTE PTR [eax+20]
	test	ecx, ecx
	je	$LN202@OpenStream
; Line 1889
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+168]
	add	ecx, DWORD PTR [eax+176]
	mov	edx, DWORD PTR [edx+172]
	adc	edx, DWORD PTR [eax+180]
	push	edx
	push	ecx
	mov	eax, DWORD PTR _op$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckZerosTail@CArc@@AAEJABUCOpenOptions@@_K@Z ; CArc::CheckZerosTail
	mov	DWORD PTR ___result__$74468[ebp], eax
	cmp	DWORD PTR ___result__$74468[ebp], 0
	je	SHORT $LN201@OpenStream
	mov	ecx, DWORD PTR ___result__$74468[ebp]
	mov	DWORD PTR $T77748[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _archive$74394[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _skipFrontalFormat$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _isMainFormatArr$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extension$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _fileName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T77748[ebp]
	jmp	$LN273@OpenStream
$LN201@OpenStream:
; Line 1890
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+18]
	test	eax, eax
	je	SHORT $LN202@OpenStream
; Line 1891
	mov	BYTE PTR _thereIsTail$74466[ebp], 0
$LN202@OpenStream:
; Line 1894
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv2938[ebp], ecx
	mov	edx, DWORD PTR tv2938[ebp]
	cmp	DWORD PTR [edx+172], 0
	jl	$LN199@OpenStream
	jg	SHORT $LN340@OpenStream
	mov	eax, DWORD PTR tv2938[ebp]
	cmp	DWORD PTR [eax+168], 0
	jbe	$LN199@OpenStream
$LN340@OpenStream:
; Line 1899
	movzx	ecx, BYTE PTR _exactOnly$74381[ebp]
	test	ecx, ecx
	jne	SHORT $LN197@OpenStream
	movzx	edx, BYTE PTR _searchMarkerInHandler$[ebp]
	test	edx, edx
	je	SHORT $LN197@OpenStream
	mov	ecx, DWORD PTR _specFlags$74465[ebp]
	call	?CanReturn_NonStart@COpenSpecFlags@@QBE_NXZ ; COpenSpecFlags::CanReturn_NonStart
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN197@OpenStream
	mov	ecx, DWORD PTR _mode$[ebp]
	movzx	edx, BYTE PTR [ecx+21]
	test	edx, edx
	je	SHORT $LN199@OpenStream
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _mode$[ebp]
	mov	DWORD PTR tv2947[ebp], eax
	mov	DWORD PTR tv2948[ebp], ecx
	mov	edx, DWORD PTR tv2947[ebp]
	mov	eax, DWORD PTR tv2948[ebp]
	mov	ecx, DWORD PTR [edx+172]
	cmp	ecx, DWORD PTR [eax+28]
	jb	SHORT $LN199@OpenStream
	ja	SHORT $LN197@OpenStream
	mov	edx, DWORD PTR tv2947[ebp]
	mov	eax, DWORD PTR tv2948[ebp]
	mov	ecx, DWORD PTR [edx+168]
	cmp	ecx, DWORD PTR [eax+24]
	jbe	SHORT $LN199@OpenStream
$LN197@OpenStream:
; Line 1900
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _archive$74394[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	jmp	$LN224@OpenStream
$LN199@OpenStream:
; Line 1902
	movzx	edx, BYTE PTR _thereIsTail$74466[ebp]
	test	edx, edx
	je	SHORT $LN196@OpenStream
; Line 1904
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv2958[ebp], eax
	mov	ecx, DWORD PTR tv2958[ebp]
	cmp	DWORD PTR [ecx+172], 0
	jl	SHORT $LN195@OpenStream
	jg	SHORT $LN342@OpenStream
	mov	edx, DWORD PTR tv2958[ebp]
	cmp	DWORD PTR [edx+168], 0
	jbe	SHORT $LN195@OpenStream
$LN342@OpenStream:
; Line 1906
	mov	eax, DWORD PTR _specFlags$74465[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	test	ecx, ecx
	jne	SHORT $LN194@OpenStream
; Line 1907
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _archive$74394[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	jmp	$LN224@OpenStream
$LN194@OpenStream:
; Line 1908
	jmp	SHORT $LN196@OpenStream
$LN195@OpenStream:
; Line 1909
	mov	edx, DWORD PTR _specFlags$74465[ebp]
	movzx	eax, BYTE PTR [edx]
	test	eax, eax
	jne	SHORT $LN196@OpenStream
; Line 1910
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _archive$74394[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	jmp	$LN224@OpenStream
$LN196@OpenStream:
; Line 1913
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv2966[ebp], ecx
	mov	edx, DWORD PTR tv2966[ebp]
	cmp	DWORD PTR [edx+172], 0
	jg	SHORT $LN190@OpenStream
	jl	SHORT $LN343@OpenStream
	mov	eax, DWORD PTR tv2966[ebp]
	cmp	DWORD PTR [eax+168], 0
	ja	SHORT $LN190@OpenStream
$LN343@OpenStream:
	movzx	ecx, BYTE PTR _thereIsTail$74466[ebp]
	test	ecx, ecx
	je	SHORT $LN191@OpenStream
$LN190@OpenStream:
; Line 1915
	cmp	DWORD PTR _formatIndex$[ebp], 0
	jge	SHORT $LN191@OpenStream
; Line 1917
	mov	edx, DWORD PTR _ai$74382[ebp]
	push	edx
	call	?IsPreArcFormat@@YG_NABUCArcInfoEx@@@Z	; IsPreArcFormat
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN191@OpenStream
; Line 1928
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _archive$74394[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	jmp	$LN224@OpenStream
$LN191@OpenStream:
; Line 1936
	lea	ecx, DWORD PTR _archive$74394[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$CMyComPtr@UIInArchive@@@@QAEPAUIInArchive@@ABV0@@Z ; CMyComPtr<IInArchive>::operator=
; Line 1937
	mov	DWORD PTR $T77749[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _archive$74394[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _skipFrontalFormat$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _isMainFormatArr$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extension$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _fileName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T77749[ebp]
	jmp	$LN273@OpenStream
; Line 1938
	jmp	$LN224@OpenStream
$LN227@OpenStream:
; Line 1945
	mov	edx, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [edx+48], 0
	jne	SHORT $LN187@OpenStream
; Line 1946
	mov	DWORD PTR $T77750[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _skipFrontalFormat$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _isMainFormatArr$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extension$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _fileName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T77750[ebp]
	jmp	$LN273@OpenStream
$LN187@OpenStream:
; Line 1948
	cmp	DWORD PTR _formatIndex$[ebp], 0
	jl	$LN186@OpenStream
	mov	eax, DWORD PTR _mode$[ebp]
	movzx	ecx, BYTE PTR [eax+18]
	test	ecx, ecx
	jne	$LN186@OpenStream
; Line 1950
	mov	edx, DWORD PTR _mode$[ebp]
	movzx	eax, BYTE PTR [edx+21]
	test	eax, eax
	je	SHORT $LN185@OpenStream
; Line 1952
	mov	ecx, DWORD PTR _mode$[ebp]
	mov	DWORD PTR tv2980[ebp], ecx
	mov	edx, DWORD PTR tv2980[ebp]
	mov	eax, DWORD PTR tv2980[ebp]
	mov	ecx, DWORD PTR [edx+24]
	or	ecx, DWORD PTR [eax+28]
	jne	SHORT $LN184@OpenStream
; Line 1953
	mov	DWORD PTR $T77751[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _skipFrontalFormat$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _isMainFormatArr$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extension$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _fileName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T77751[ebp]
	jmp	$LN273@OpenStream
$LN184@OpenStream:
; Line 1955
	jmp	$LN186@OpenStream
$LN185@OpenStream:
; Line 1957
	mov	edx, DWORD PTR _formatIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 8
	call	??A?$CObjectVector@UCArcInfoEx@@@@QAEAAUCArcInfoEx@@I@Z ; CObjectVector<CArcInfoEx>::operator[]
	mov	DWORD PTR _ai$74496[ebp], eax
; Line 1958
	lea	ecx, DWORD PTR _extension$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _ai$74496[ebp]
	call	?FindExtension@CArcInfoEx@@QBEHABVUString@@@Z ; CArcInfoEx::FindExtension
	test	eax, eax
	jl	$LN186@OpenStream
; Line 1960
	mov	edx, DWORD PTR _formatIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 8
	call	??A?$CObjectVector@UCArcInfoEx@@@@QAEAAUCArcInfoEx@@I@Z ; CObjectVector<CArcInfoEx>::operator[]
	mov	DWORD PTR _ai$74498[ebp], eax
; Line 1961
	mov	ecx, DWORD PTR _ai$74498[ebp]
	call	?Flags_FindSignature@CArcInfoEx@@QBE_NXZ ; CArcInfoEx::Flags_FindSignature
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN186@OpenStream
	movzx	edx, BYTE PTR _searchMarkerInHandler$[ebp]
	test	edx, edx
	je	SHORT $LN186@OpenStream
; Line 1962
	mov	DWORD PTR $T77752[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _skipFrontalFormat$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _isMainFormatArr$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extension$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _fileName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T77752[ebp]
	jmp	$LN273@OpenStream
$LN186@OpenStream:
; Line 1967
	push	40					; 00000028H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T77754[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	cmp	DWORD PTR $T77754[ebp], 0
	je	SHORT $LN281@OpenStream
	mov	ecx, DWORD PTR $T77754[ebp]
	call	??0CHandler@NParser@NArchive@@QAE@XZ	; NArchive::NParser::CHandler::CHandler
	mov	DWORD PTR tv782[ebp], eax
	jmp	SHORT $LN282@OpenStream
$LN281@OpenStream:
	mov	DWORD PTR tv782[ebp], 0
$LN282@OpenStream:
	mov	eax, DWORD PTR tv782[ebp]
	mov	DWORD PTR $T77753[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	ecx, DWORD PTR $T77753[ebp]
	mov	DWORD PTR _handlerSpec$[ebp], ecx
; Line 1968
	mov	edx, DWORD PTR _handlerSpec$[ebp]
	push	edx
	lea	ecx, DWORD PTR _handler$[ebp]
	call	??0?$CMyComPtr@UIInArchive@@@@QAE@PAUIInArchive@@@Z ; CMyComPtr<IInArchive>::CMyComPtr<IInArchive>
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
; Line 1970
	push	32					; 00000020H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T77758[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	cmp	DWORD PTR $T77758[ebp], 0
	je	SHORT $LN283@OpenStream
	mov	ecx, DWORD PTR $T77758[ebp]
	call	??0CExtractCallback_To_OpenCallback@@QAE@XZ
	mov	DWORD PTR tv797[ebp], eax
	jmp	SHORT $LN284@OpenStream
$LN283@OpenStream:
	mov	DWORD PTR tv797[ebp], 0
$LN284@OpenStream:
	mov	eax, DWORD PTR tv797[ebp]
	mov	DWORD PTR $T77757[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	mov	ecx, DWORD PTR $T77757[ebp]
	mov	DWORD PTR _extractCallback_To_OpenCallback_Spec$[ebp], ecx
; Line 1971
	mov	edx, DWORD PTR _extractCallback_To_OpenCallback_Spec$[ebp]
	push	edx
	lea	ecx, DWORD PTR _extractCallback_To_OpenCallback$[ebp]
	call	??0?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@PAUIArchiveExtractCallback@@@Z ; CMyComPtr<IArchiveExtractCallback>::CMyComPtr<IArchiveExtractCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
; Line 1972
	mov	eax, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	mov	ecx, DWORD PTR _extractCallback_To_OpenCallback_Spec$[ebp]
	call	?Init@CExtractCallback_To_OpenCallback@@QAEXPAUIArchiveOpenCallback@@@Z ; CExtractCallback_To_OpenCallback::Init
; Line 1978
	lea	ecx, DWORD PTR _byteBuffer$74552[ebp]
	call	??0?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::CBuffer<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH
; Line 1979
	mov	BYTE PTR _endOfFile$74553[ebp], 0
; Line 1982
	mov	DWORD PTR _bufSize$74555[ebp], 1048576	; 00100000H
; Line 1983
	mov	edx, DWORD PTR _bufSize$74555[ebp]
	xor	eax, eax
	mov	DWORD PTR tv3011[ebp], edx
	mov	DWORD PTR tv3011[ebp+4], eax
	mov	ecx, DWORD PTR tv3011[ebp+4]
	cmp	ecx, DWORD PTR _fileSize$[ebp+4]
	jb	SHORT $LN180@OpenStream
	ja	SHORT $LN344@OpenStream
	mov	edx, DWORD PTR tv3011[ebp]
	cmp	edx, DWORD PTR _fileSize$[ebp]
	jbe	SHORT $LN180@OpenStream
$LN344@OpenStream:
; Line 1985
	mov	eax, DWORD PTR _fileSize$[ebp]
	mov	DWORD PTR _bufSize$74555[ebp], eax
; Line 1986
	mov	BYTE PTR _endOfFile$74553[ebp], 1
$LN180@OpenStream:
; Line 1988
	mov	ecx, DWORD PTR _bufSize$74555[ebp]
	push	ecx
	lea	ecx, DWORD PTR _byteBuffer$74552[ebp]
	call	?Alloc@?$CBuffer@E@@QAEXI@Z		; CBuffer<unsigned char>::Alloc
; Line 1989
	mov	esi, esp
	push	0
	push	0
	push	0
	push	0
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	ecx, DWORD PTR _op$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$74558[ebp], eax
	cmp	DWORD PTR ___result__$74558[ebp], 0
	je	$LN179@OpenStream
	mov	edx, DWORD PTR ___result__$74558[ebp]
	mov	DWORD PTR $T77761[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR _byteBuffer$74552[ebp]
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _extractCallback_To_OpenCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _handler$[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _skipFrontalFormat$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _isMainFormatArr$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extension$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _fileName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T77761[ebp]
	jmp	$LN273@OpenStream
$LN179@OpenStream:
; Line 1990
	mov	eax, DWORD PTR _bufSize$74555[ebp]
	mov	DWORD PTR _processedSize$74554[ebp], eax
; Line 1991
	lea	ecx, DWORD PTR _processedSize$74554[ebp]
	push	ecx
	lea	ecx, DWORD PTR _byteBuffer$74552[ebp]
	call	??B?$CBuffer@E@@QAEPAEXZ		; CBuffer<unsigned char>::operator unsigned char *
	push	eax
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	call	?ReadStream@@YGJPAUISequentialInStream@@PAXPAI@Z ; ReadStream
	mov	DWORD PTR ___result__$74561[ebp], eax
	cmp	DWORD PTR ___result__$74561[ebp], 0
	je	$LN178@OpenStream
	mov	ecx, DWORD PTR ___result__$74561[ebp]
	mov	DWORD PTR $T77762[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR _byteBuffer$74552[ebp]
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _extractCallback_To_OpenCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _handler$[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _skipFrontalFormat$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _isMainFormatArr$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extension$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _fileName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T77762[ebp]
	jmp	$LN273@OpenStream
$LN178@OpenStream:
; Line 1992
	cmp	DWORD PTR _processedSize$74554[ebp], 0
	jne	$LN177@OpenStream
; Line 1993
	mov	DWORD PTR $T77763[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR _byteBuffer$74552[ebp]
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _extractCallback_To_OpenCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _handler$[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _skipFrontalFormat$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _isMainFormatArr$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extension$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _fileName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T77763[ebp]
	jmp	$LN273@OpenStream
$LN177@OpenStream:
; Line 1994
	mov	edx, DWORD PTR _processedSize$74554[ebp]
	cmp	edx, DWORD PTR _bufSize$74555[ebp]
	jae	SHORT $LN176@OpenStream
; Line 1995
	mov	BYTE PTR _endOfFile$74553[ebp], 1
$LN176@OpenStream:
; Line 1997
	lea	ecx, DWORD PTR _sortedFormats$74568[ebp]
	call	??0?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 14		; 0000000eH
; Line 2001
	mov	DWORD PTR _splitIndex$74570[ebp], -1
; Line 2003
	mov	DWORD PTR _i$74569[ebp], 0
	jmp	SHORT $LN175@OpenStream
$LN174@OpenStream:
	mov	eax, DWORD PTR _i$74569[ebp]
	add	eax, 1
	mov	DWORD PTR _i$74569[ebp], eax
$LN175@OpenStream:
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	?Size@?$CRecordVector@H@@QBEIXZ		; CRecordVector<int>::Size
	cmp	DWORD PTR _i$74569[ebp], eax
	jae	$LN173@OpenStream
; Line 2005
	mov	ecx, DWORD PTR _i$74569[ebp]
	push	ecx
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	??A?$CRecordVector@H@@QAEAAHI@Z		; CRecordVector<int>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _form$74574[ebp], edx
; Line 2006
	lea	ecx, DWORD PTR _skipFrontalFormat$[ebp]
	call	??B?$CObjArray@_N@@QAEPA_NXZ		; CObjArray<bool>::operator bool *
	mov	ecx, DWORD PTR _form$74574[ebp]
	movzx	edx, BYTE PTR [eax+ecx]
	test	edx, edx
	je	SHORT $LN172@OpenStream
; Line 2007
	jmp	SHORT $LN174@OpenStream
$LN172@OpenStream:
; Line 2008
	mov	eax, DWORD PTR _form$74574[ebp]
	push	eax
	mov	ecx, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR [ecx]
	add	ecx, 8
	call	??A?$CObjectVector@UCArcInfoEx@@@@QAEAAUCArcInfoEx@@I@Z ; CObjectVector<CArcInfoEx>::operator[]
	mov	DWORD PTR _ai$74576[ebp], eax
; Line 2009
	mov	ecx, DWORD PTR _ai$74576[ebp]
	call	?IsSplit@CArcInfoEx@@QBE_NXZ		; CArcInfoEx::IsSplit
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN171@OpenStream
; Line 2011
	mov	eax, DWORD PTR _form$74574[ebp]
	mov	DWORD PTR _splitIndex$74570[ebp], eax
; Line 2012
	jmp	$LN174@OpenStream
$LN171@OpenStream:
; Line 2015
	mov	ecx, DWORD PTR _ai$74576[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN170@OpenStream
; Line 2017
	mov	esi, esp
	mov	edx, DWORD PTR _processedSize$74554[ebp]
	push	edx
	lea	ecx, DWORD PTR _byteBuffer$74552[ebp]
	call	??B?$CBuffer@E@@QAEPAEXZ		; CBuffer<unsigned char>::operator unsigned char *
	push	eax
	mov	eax, DWORD PTR _ai$74576[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _isArcRes$74579[ebp], eax
; Line 2018
	cmp	DWORD PTR _isArcRes$74579[ebp], 0
	jne	SHORT $LN169@OpenStream
; Line 2019
	jmp	$LN174@OpenStream
$LN169@OpenStream:
; Line 2020
	cmp	DWORD PTR _isArcRes$74579[ebp], 2
	jne	SHORT $LN168@OpenStream
	movzx	edx, BYTE PTR _endOfFile$74553[ebp]
	test	edx, edx
	je	SHORT $LN168@OpenStream
; Line 2021
	jmp	$LN174@OpenStream
$LN168@OpenStream:
; Line 2023
	mov	eax, DWORD PTR _form$74574[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _sortedFormats$74568[ebp]
	call	?Insert@?$CRecordVector@I@@QAEXII@Z	; CRecordVector<unsigned int>::Insert
; Line 2024
	jmp	$LN174@OpenStream
$LN170@OpenStream:
; Line 2027
	mov	ecx, DWORD PTR _ai$74576[ebp]
	push	ecx
	call	?IsNewStyleSignature@@YG_NABUCArcInfoEx@@@Z ; IsNewStyleSignature
	mov	BYTE PTR _isNewStyleSignature$74582[ebp], al
; Line 2032
	movzx	edx, BYTE PTR _isNewStyleSignature$74582[ebp]
	test	edx, edx
	je	SHORT $LN285@OpenStream
	mov	ecx, DWORD PTR _ai$74576[ebp]
	add	ecx, 48					; 00000030H
	call	?IsEmpty@?$CObjectVector@V?$CBuffer@E@@@@QBE_NXZ ; CObjectVector<CBuffer<unsigned char> >::IsEmpty
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN285@OpenStream
	mov	ecx, DWORD PTR _ai$74576[ebp]
	call	?Flags_PureStartOpen@CArcInfoEx@@QBE_NXZ ; CArcInfoEx::Flags_PureStartOpen
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN285@OpenStream
	mov	ecx, DWORD PTR _ai$74576[ebp]
	call	?Flags_StartOpen@CArcInfoEx@@QBE_NXZ	; CArcInfoEx::Flags_StartOpen
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN285@OpenStream
	mov	ecx, DWORD PTR _ai$74576[ebp]
	call	?Flags_BackwardOpen@CArcInfoEx@@QBE_NXZ	; CArcInfoEx::Flags_BackwardOpen
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN285@OpenStream
	mov	DWORD PTR tv901[ebp], 0
	jmp	SHORT $LN286@OpenStream
$LN285@OpenStream:
	mov	DWORD PTR tv901[ebp], 1
$LN286@OpenStream:
	mov	cl, BYTE PTR tv901[ebp]
	mov	BYTE PTR _needCheck$74583[ebp], cl
; Line 2034
	movzx	edx, BYTE PTR _isNewStyleSignature$74582[ebp]
	test	edx, edx
	je	$LN167@OpenStream
	mov	ecx, DWORD PTR _ai$74576[ebp]
	add	ecx, 48					; 00000030H
	call	?IsEmpty@?$CObjectVector@V?$CBuffer@E@@@@QBE_NXZ ; CObjectVector<CBuffer<unsigned char> >::IsEmpty
	movzx	eax, al
	test	eax, eax
	jne	$LN167@OpenStream
; Line 2037
	mov	DWORD PTR _k$74585[ebp], 0
	jmp	SHORT $LN166@OpenStream
$LN165@OpenStream:
	mov	ecx, DWORD PTR _k$74585[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$74585[ebp], ecx
$LN166@OpenStream:
	mov	ecx, DWORD PTR _ai$74576[ebp]
	add	ecx, 48					; 00000030H
	call	?Size@?$CObjectVector@V?$CBuffer@E@@@@QBEIXZ ; CObjectVector<CBuffer<unsigned char> >::Size
	cmp	DWORD PTR _k$74585[ebp], eax
	jae	$LN164@OpenStream
; Line 2039
	mov	edx, DWORD PTR _k$74585[ebp]
	push	edx
	mov	ecx, DWORD PTR _ai$74576[ebp]
	add	ecx, 48					; 00000030H
	call	??A?$CObjectVector@V?$CBuffer@E@@@@QBEABV?$CBuffer@E@@I@Z ; CObjectVector<CBuffer<unsigned char> >::operator[]
	mov	DWORD PTR _sig$74589[ebp], eax
; Line 2040
	mov	ecx, DWORD PTR _sig$74589[ebp]
	call	?Size@?$CBuffer@E@@QBEIXZ		; CBuffer<unsigned char>::Size
	mov	ecx, DWORD PTR _ai$74576[ebp]
	add	eax, DWORD PTR [ecx+44]
	mov	DWORD PTR _signatureEnd$74590[ebp], eax
; Line 2041
	mov	edx, DWORD PTR _processedSize$74554[ebp]
	cmp	edx, DWORD PTR _signatureEnd$74590[ebp]
	jae	SHORT $LN163@OpenStream
; Line 2043
	movzx	eax, BYTE PTR _endOfFile$74553[ebp]
	test	eax, eax
	jne	SHORT $LN162@OpenStream
; Line 2044
	mov	BYTE PTR _needCheck$74583[ebp], 1
$LN162@OpenStream:
; Line 2045
	jmp	SHORT $LN161@OpenStream
$LN163@OpenStream:
; Line 2046
	mov	ecx, DWORD PTR _sig$74589[ebp]
	call	?Size@?$CBuffer@E@@QBEIXZ		; CBuffer<unsigned char>::Size
	push	eax
	lea	ecx, DWORD PTR _byteBuffer$74552[ebp]
	call	??B?$CBuffer@E@@QAEPAEXZ		; CBuffer<unsigned char>::operator unsigned char *
	mov	ecx, DWORD PTR _ai$74576[ebp]
	add	eax, DWORD PTR [ecx+44]
	push	eax
	mov	ecx, DWORD PTR _sig$74589[ebp]
	call	??B?$CBuffer@E@@QBEPBEXZ		; CBuffer<unsigned char>::operator unsigned char const *
	push	eax
	call	_memcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN161@OpenStream
; Line 2047
	jmp	SHORT $LN164@OpenStream
$LN161@OpenStream:
; Line 2048
	jmp	$LN165@OpenStream
$LN164@OpenStream:
; Line 2049
	mov	ecx, DWORD PTR _ai$74576[ebp]
	add	ecx, 48					; 00000030H
	call	?Size@?$CObjectVector@V?$CBuffer@E@@@@QBEIXZ ; CObjectVector<CBuffer<unsigned char> >::Size
	cmp	DWORD PTR _k$74585[ebp], eax
	je	SHORT $LN167@OpenStream
; Line 2051
	mov	edx, DWORD PTR _form$74574[ebp]
	push	edx
	push	0
	lea	ecx, DWORD PTR _sortedFormats$74568[ebp]
	call	?Insert@?$CRecordVector@I@@QAEXII@Z	; CRecordVector<unsigned int>::Insert
; Line 2052
	jmp	$LN174@OpenStream
$LN167@OpenStream:
; Line 2055
	movzx	eax, BYTE PTR _needCheck$74583[ebp]
	test	eax, eax
	je	SHORT $LN158@OpenStream
; Line 2056
	mov	ecx, DWORD PTR _form$74574[ebp]
	push	ecx
	lea	ecx, DWORD PTR _sortedFormats$74568[ebp]
	call	?Add@?$CRecordVector@I@@QAEII@Z		; CRecordVector<unsigned int>::Add
$LN158@OpenStream:
; Line 2057
	jmp	$LN174@OpenStream
$LN173@OpenStream:
; Line 2059
	cmp	DWORD PTR _splitIndex$74570[ebp], 0
	jl	SHORT $LN157@OpenStream
; Line 2060
	mov	edx, DWORD PTR _splitIndex$74570[ebp]
	push	edx
	push	0
	lea	ecx, DWORD PTR _sortedFormats$74568[ebp]
	call	?Insert@?$CRecordVector@I@@QAEXII@Z	; CRecordVector<unsigned int>::Insert
$LN157@OpenStream:
; Line 2062
	mov	DWORD PTR _i$74569[ebp], 0
	jmp	SHORT $LN156@OpenStream
$LN155@OpenStream:
	mov	eax, DWORD PTR _i$74569[ebp]
	add	eax, 1
	mov	DWORD PTR _i$74569[ebp], eax
$LN156@OpenStream:
	lea	ecx, DWORD PTR _sortedFormats$74568[ebp]
	call	?Size@?$CRecordVector@I@@QBEIXZ		; CRecordVector<unsigned int>::Size
	cmp	DWORD PTR _i$74569[ebp], eax
	jae	$LN154@OpenStream
; Line 2064
	mov	ecx, DWORD PTR _i$74569[ebp]
	push	ecx
	lea	ecx, DWORD PTR _sortedFormats$74568[ebp]
	call	??A?$CRecordVector@I@@QAEAAII@Z		; CRecordVector<unsigned int>::operator[]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx+148], eax
; Line 2065
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+148]
	push	edx
	mov	eax, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 8
	call	??A?$CObjectVector@UCArcInfoEx@@@@QAEAAUCArcInfoEx@@I@Z ; CObjectVector<CArcInfoEx>::operator[]
	mov	DWORD PTR _ai$74602[ebp], eax
; Line 2067
	mov	ecx, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [ecx+56], 0
	je	$LN153@OpenStream
; Line 2068
	mov	esi, esp
	lea	edx, DWORD PTR _fileSize$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$74604[ebp], eax
	cmp	DWORD PTR ___result__$74604[ebp], 0
	je	$LN153@OpenStream
	mov	eax, DWORD PTR ___result__$74604[ebp]
	mov	DWORD PTR $T77766[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH
	lea	ecx, DWORD PTR _sortedFormats$74568[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR _byteBuffer$74552[ebp]
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _extractCallback_To_OpenCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _handler$[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _skipFrontalFormat$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _isMainFormatArr$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extension$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _fileName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T77766[ebp]
	jmp	$LN273@OpenStream
$LN153@OpenStream:
; Line 2070
	mov	esi, esp
	push	0
	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR _op$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$74607[ebp], eax
	cmp	DWORD PTR ___result__$74607[ebp], 0
	je	$LN151@OpenStream
	mov	ecx, DWORD PTR ___result__$74607[ebp]
	mov	DWORD PTR $T77767[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH
	lea	ecx, DWORD PTR _sortedFormats$74568[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR _byteBuffer$74552[ebp]
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _extractCallback_To_OpenCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _handler$[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _skipFrontalFormat$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _isMainFormatArr$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extension$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _fileName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T77767[ebp]
	jmp	$LN273@OpenStream
$LN151@OpenStream:
; Line 2072
	lea	ecx, DWORD PTR _archive$74611[ebp]
	call	??0?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::CMyComPtr<IInArchive>
	mov	BYTE PTR __$EHRec$[ebp+8], 15		; 0000000fH
; Line 2073
	lea	edx, DWORD PTR _archive$74611[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+148]
	push	ecx
	mov	edx, DWORD PTR _op$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PrepareToOpen@CArc@@AAEJABUCOpenOptions@@IAAV?$CMyComPtr@UIInArchive@@@@@Z ; CArc::PrepareToOpen
	mov	DWORD PTR ___result__$74612[ebp], eax
	cmp	DWORD PTR ___result__$74612[ebp], 0
	je	$LN150@OpenStream
	mov	eax, DWORD PTR ___result__$74612[ebp]
	mov	DWORD PTR $T77768[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 14		; 0000000eH
	lea	ecx, DWORD PTR _archive$74611[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH
	lea	ecx, DWORD PTR _sortedFormats$74568[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR _byteBuffer$74552[ebp]
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _extractCallback_To_OpenCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _handler$[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _skipFrontalFormat$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _isMainFormatArr$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extension$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _fileName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T77768[ebp]
	jmp	$LN273@OpenStream
$LN150@OpenStream:
; Line 2074
	lea	ecx, DWORD PTR _archive$74611[ebp]
	call	??7?$CMyComPtr@UIInArchive@@@@QBE_NXZ	; CMyComPtr<IInArchive>::operator!
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN149@OpenStream
; Line 2075
	mov	BYTE PTR __$EHRec$[ebp+8], 14		; 0000000eH
	lea	ecx, DWORD PTR _archive$74611[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	jmp	$LN155@OpenStream
$LN149@OpenStream:
; Line 2080
	mov	DWORD PTR _searchLimit$74617[ebp], 0
	mov	DWORD PTR _searchLimit$74617[ebp+4], 0
; Line 2086
	lea	ecx, DWORD PTR _extractCallback_To_OpenCallback$[ebp]
	call	??B?$CMyComPtr@UIArchiveExtractCallback@@@@QBEPAUIArchiveExtractCallback@@XZ ; CMyComPtr<IArchiveExtractCallback>::operator IArchiveExtractCallback *
	push	eax
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	lea	ecx, DWORD PTR _searchLimit$74617[ebp]
	push	ecx
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	mov	ecx, DWORD PTR _mode$[ebp]
	movzx	edx, BYTE PTR [ecx+17]
	test	edx, edx
	sete	al
	movzx	ecx, al
	push	ecx
	lea	ecx, DWORD PTR _archive$74611[ebp]
	call	??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator IInArchive *
	push	eax
	call	?OpenArchiveSpec@@YGJPAUIInArchive@@_NPAUIInStream@@PB_KPAUIArchiveOpenCallback@@PAUIArchiveExtractCallback@@@Z ; OpenArchiveSpec
	mov	DWORD PTR _result$74616[ebp], eax
; Line 2089
	cmp	DWORD PTR _result$74616[ebp], 1
	jne	SHORT $LN148@OpenStream
; Line 2091
	lea	ecx, DWORD PTR _skipFrontalFormat$[ebp]
	call	??B?$CObjArray@_N@@QAEPA_NXZ		; CObjArray<bool>::operator bool *
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+148]
	mov	BYTE PTR [eax+ecx], 1
; Line 2094
	mov	BYTE PTR __$EHRec$[ebp+8], 14		; 0000000eH
	lea	ecx, DWORD PTR _archive$74611[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	jmp	$LN155@OpenStream
$LN148@OpenStream:
; Line 2096
	mov	edx, DWORD PTR _result$74616[ebp]
	mov	DWORD PTR ___result__$74621[ebp], edx
	cmp	DWORD PTR ___result__$74621[ebp], 0
	je	$LN147@OpenStream
	mov	eax, DWORD PTR ___result__$74621[ebp]
	mov	DWORD PTR $T77769[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 14		; 0000000eH
	lea	ecx, DWORD PTR _archive$74611[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH
	lea	ecx, DWORD PTR _sortedFormats$74568[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR _byteBuffer$74552[ebp]
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _extractCallback_To_OpenCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _handler$[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _skipFrontalFormat$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _isMainFormatArr$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extension$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _fileName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T77769[ebp]
	jmp	$LN273@OpenStream
$LN147@OpenStream:
; Line 2098
	mov	ecx, DWORD PTR _result$74616[ebp]
	push	ecx
	push	0
	push	0
	lea	ecx, DWORD PTR _archive$74611[ebp]
	call	??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator IInArchive *
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadBasicProps@CArc@@QAEJPAUIInArchive@@_KJ@Z ; CArc::ReadBasicProps
	mov	DWORD PTR ___result__$74624[ebp], eax
	cmp	DWORD PTR ___result__$74624[ebp], 0
	je	$LN146@OpenStream
	mov	edx, DWORD PTR ___result__$74624[ebp]
	mov	DWORD PTR $T77770[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 14		; 0000000eH
	lea	ecx, DWORD PTR _archive$74611[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH
	lea	ecx, DWORD PTR _sortedFormats$74568[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR _byteBuffer$74552[ebp]
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _extractCallback_To_OpenCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _handler$[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _skipFrontalFormat$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _isMainFormatArr$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extension$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _fileName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T77770[ebp]
	jmp	$LN273@OpenStream
$LN146@OpenStream:
; Line 2100
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv3150[ebp], eax
	mov	ecx, DWORD PTR tv3150[ebp]
	cmp	DWORD PTR [ecx+172], 0
	jl	SHORT $LN145@OpenStream
	jg	SHORT $LN345@OpenStream
	mov	edx, DWORD PTR tv3150[ebp]
	cmp	DWORD PTR [edx+168], 0
	jbe	SHORT $LN145@OpenStream
$LN345@OpenStream:
; Line 2102
	mov	BYTE PTR __$EHRec$[ebp+8], 14		; 0000000eH
	lea	ecx, DWORD PTR _archive$74611[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	jmp	$LN155@OpenStream
$LN145@OpenStream:
; Line 2107
	lea	ecx, DWORD PTR _pi$74628[ebp]
	call	??0CParseItem@NParser@NArchive@@QAE@XZ	; NArchive::NParser::CParseItem::CParseItem
	mov	BYTE PTR __$EHRec$[ebp+8], 16		; 00000010H
; Line 2108
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+168]
	mov	DWORD PTR _pi$74628[ebp], ecx
	mov	edx, DWORD PTR [eax+172]
	mov	DWORD PTR _pi$74628[ebp+4], edx
; Line 2109
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+200]
	mov	DWORD PTR _pi$74628[ebp+8], ecx
	mov	edx, DWORD PTR [eax+204]
	mov	DWORD PTR _pi$74628[ebp+12], edx
; Line 2113
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+184]
	test	ecx, ecx
	jne	SHORT $LN144@OpenStream
; Line 2116
	mov	BYTE PTR _pi$74628[ebp+108], 1
$LN144@OpenStream:
; Line 2129
	lea	ecx, DWORD PTR _pi$74628[ebp]
	call	?NormalizeOffset@CParseItem@NParser@NArchive@@QAEXXZ ; NArchive::NParser::CParseItem::NormalizeOffset
; Line 2133
	mov	edx, DWORD PTR _mode$[ebp]
	movzx	eax, BYTE PTR [edx+17]
	test	eax, eax
	je	$LN143@OpenStream
; Line 2135
	lea	ecx, DWORD PTR _isMainFormatArr$[ebp]
	call	??B?$CObjArray@_N@@QAEPA_NXZ		; CObjArray<bool>::operator bool *
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+148]
	mov	al, BYTE PTR [eax+edx]
	mov	BYTE PTR _isMainFormat$74631[ebp], al
; Line 2136
	movzx	ecx, BYTE PTR _isUnknownExt$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _isMainFormat$74631[ebp]
	push	edx
	movzx	eax, BYTE PTR _isForced$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mode$[ebp]
	call	?GetSpec@COpenType@@QBEABUCOpenSpecFlags@@_N00@Z ; COpenType::GetSpec
	mov	DWORD PTR _specFlags$74633[ebp], eax
; Line 2137
	mov	BYTE PTR _openCur$74634[ebp], 0
; Line 2139
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+16]
	test	edx, edx
	jne	SHORT $LN142@OpenStream
; Line 2140
	mov	BYTE PTR _openCur$74634[ebp], 1
; Line 2141
	jmp	$LN141@OpenStream
$LN142@OpenStream:
; Line 2143
	mov	eax, DWORD PTR _mode$[ebp]
	movzx	ecx, BYTE PTR [eax+20]
	test	ecx, ecx
	je	$LN140@OpenStream
; Line 2145
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+168]
	add	ecx, DWORD PTR [eax+176]
	mov	edx, DWORD PTR [edx+172]
	adc	edx, DWORD PTR [eax+180]
	push	edx
	push	ecx
	mov	eax, DWORD PTR _op$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckZerosTail@CArc@@AAEJABUCOpenOptions@@_K@Z ; CArc::CheckZerosTail
	mov	DWORD PTR ___result__$74638[ebp], eax
	cmp	DWORD PTR ___result__$74638[ebp], 0
	je	$LN139@OpenStream
	mov	ecx, DWORD PTR ___result__$74638[ebp]
	mov	DWORD PTR $T77771[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 15		; 0000000fH
	lea	ecx, DWORD PTR _pi$74628[ebp]
	call	??1CParseItem@NParser@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 14		; 0000000eH
	lea	ecx, DWORD PTR _archive$74611[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH
	lea	ecx, DWORD PTR _sortedFormats$74568[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR _byteBuffer$74552[ebp]
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _extractCallback_To_OpenCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _handler$[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _skipFrontalFormat$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _isMainFormatArr$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extension$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _fileName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T77771[ebp]
	jmp	$LN273@OpenStream
$LN139@OpenStream:
; Line 2146
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+18]
	test	eax, eax
	je	SHORT $LN140@OpenStream
; Line 2147
	mov	BYTE PTR _openCur$74634[ebp], 1
$LN140@OpenStream:
; Line 2149
	movzx	ecx, BYTE PTR _openCur$74634[ebp]
	test	ecx, ecx
	jne	SHORT $LN141@OpenStream
; Line 2151
	mov	edx, DWORD PTR _specFlags$74633[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR _openCur$74634[ebp], al
; Line 2152
	cmp	DWORD PTR _formatIndex$[ebp], 0
	jge	SHORT $LN141@OpenStream
; Line 2154
	mov	ecx, DWORD PTR _ai$74602[ebp]
	push	ecx
	call	?IsPreArcFormat@@YG_NABUCArcInfoEx@@@Z	; IsPreArcFormat
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN141@OpenStream
; Line 2158
	mov	BYTE PTR _openCur$74634[ebp], 0
$LN141@OpenStream:
; Line 2165
	movzx	eax, BYTE PTR _openCur$74634[ebp]
	test	eax, eax
	je	$LN143@OpenStream
; Line 2167
	mov	ecx, DWORD PTR _op$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ; CMyComPtr<IInStream>::operator=
; Line 2168
	lea	eax, DWORD PTR _archive$74611[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$CMyComPtr@UIInArchive@@@@QAEPAUIInArchive@@ABV0@@Z ; CMyComPtr<IInArchive>::operator=
; Line 2169
	mov	DWORD PTR $T77772[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 15		; 0000000fH
	lea	ecx, DWORD PTR _pi$74628[ebp]
	call	??1CParseItem@NParser@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 14		; 0000000eH
	lea	ecx, DWORD PTR _archive$74611[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH
	lea	ecx, DWORD PTR _sortedFormats$74568[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR _byteBuffer$74552[ebp]
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _extractCallback_To_OpenCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _handler$[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _skipFrontalFormat$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _isMainFormatArr$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extension$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _fileName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T77772[ebp]
	jmp	$LN273@OpenStream
$LN143@OpenStream:
; Line 2173
	lea	ecx, DWORD PTR _skipFrontalFormat$[ebp]
	call	??B?$CObjArray@_N@@QAEPA_NXZ		; CObjArray<bool>::operator bool *
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+148]
	mov	BYTE PTR [eax+edx], 1
; Line 2181
	mov	eax, DWORD PTR _pi$74628[ebp]
	or	eax, DWORD PTR _pi$74628[ebp+4]
	jne	SHORT $LN133@OpenStream
	movzx	ecx, BYTE PTR _pi$74628[ebp+108]
	test	ecx, ecx
	jne	SHORT $LN133@OpenStream
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv3208[ebp], edx
	mov	eax, DWORD PTR tv3208[ebp]
	mov	ecx, DWORD PTR _pi$74628[ebp+12]
	cmp	ecx, DWORD PTR [eax+196]
	jb	SHORT $LN133@OpenStream
	ja	SHORT $LN346@OpenStream
	mov	edx, DWORD PTR tv3208[ebp]
	mov	eax, DWORD PTR _pi$74628[ebp+8]
	cmp	eax, DWORD PTR [edx+192]
	jb	SHORT $LN133@OpenStream
$LN346@OpenStream:
; Line 2182
	mov	BYTE PTR __$EHRec$[ebp+8], 15		; 0000000fH
	lea	ecx, DWORD PTR _pi$74628[ebp]
	call	??1CParseItem@NParser@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 14		; 0000000eH
	lea	ecx, DWORD PTR _archive$74611[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	jmp	$LN155@OpenStream
$LN133@OpenStream:
; Line 2185
	lea	ecx, DWORD PTR _pi$74628[ebp]
	push	ecx
	mov	edx, DWORD PTR _ai$74602[ebp]
	push	edx
	lea	ecx, DWORD PTR _archive$74611[ebp]
	call	??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator IInArchive *
	push	eax
	call	?ReadParseItemProps@@YGJPAUIInArchive@@ABUCArcInfoEx@@AAUCParseItem@NParser@NArchive@@@Z ; ReadParseItemProps
	mov	DWORD PTR ___result__$74650[ebp], eax
	cmp	DWORD PTR ___result__$74650[ebp], 0
	je	$LN132@OpenStream
	mov	eax, DWORD PTR ___result__$74650[ebp]
	mov	DWORD PTR $T77773[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 15		; 0000000fH
	lea	ecx, DWORD PTR _pi$74628[ebp]
	call	??1CParseItem@NParser@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 14		; 0000000eH
	lea	ecx, DWORD PTR _archive$74611[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH
	lea	ecx, DWORD PTR _sortedFormats$74568[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR _byteBuffer$74552[ebp]
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _extractCallback_To_OpenCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _handler$[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _skipFrontalFormat$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _isMainFormatArr$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extension$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _fileName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T77773[ebp]
	jmp	$LN273@OpenStream
$LN132@OpenStream:
; Line 2186
	lea	ecx, DWORD PTR _pi$74628[ebp]
	push	ecx
	mov	ecx, DWORD PTR _handlerSpec$[ebp]
	call	?AddItem@CHandler@NParser@NArchive@@QAEXABUCParseItem@23@@Z ; NArchive::NParser::CHandler::AddItem
; Line 2187
	mov	BYTE PTR __$EHRec$[ebp+8], 15		; 0000000fH
	lea	ecx, DWORD PTR _pi$74628[ebp]
	call	??1CParseItem@NParser@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 14		; 0000000eH
	lea	ecx, DWORD PTR _archive$74611[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	jmp	$LN155@OpenStream
$LN154@OpenStream:
; Line 2188
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH
	lea	ecx, DWORD PTR _sortedFormats$74568[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR _byteBuffer$74552[ebp]
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
; Line 2196
	lea	ecx, DWORD PTR _arc2sig$[ebp]
	call	??0?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
; Line 2197
	lea	ecx, DWORD PTR _sig2arc$[ebp]
	call	??0?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
; Line 2199
	mov	DWORD PTR _sum$74655[ebp], 0
; Line 2200
	mov	DWORD PTR _i$74656[ebp], 0
	jmp	SHORT $LN131@OpenStream
$LN130@OpenStream:
	mov	edx, DWORD PTR _i$74656[ebp]
	add	edx, 1
	mov	DWORD PTR _i$74656[ebp], edx
$LN131@OpenStream:
	mov	eax, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 8
	call	?Size@?$CObjectVector@UCArcInfoEx@@@@QBEIXZ ; CObjectVector<CArcInfoEx>::Size
	cmp	DWORD PTR _i$74656[ebp], eax
	jae	$LN129@OpenStream
; Line 2202
	mov	ecx, DWORD PTR _sum$74655[ebp]
	push	ecx
	lea	ecx, DWORD PTR _arc2sig$[ebp]
	call	?Add@?$CRecordVector@I@@QAEII@Z		; CRecordVector<unsigned int>::Add
; Line 2203
	mov	edx, DWORD PTR _i$74656[ebp]
	push	edx
	mov	eax, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 8
	call	??A?$CObjectVector@UCArcInfoEx@@@@QAEAAUCArcInfoEx@@I@Z ; CObjectVector<CArcInfoEx>::operator[]
	add	eax, 48					; 00000030H
	mov	DWORD PTR _sigs$74661[ebp], eax
; Line 2204
	mov	ecx, DWORD PTR _sigs$74661[ebp]
	call	?Size@?$CObjectVector@V?$CBuffer@E@@@@QBEIXZ ; CObjectVector<CBuffer<unsigned char> >::Size
	add	eax, DWORD PTR _sum$74655[ebp]
	mov	DWORD PTR _sum$74655[ebp], eax
; Line 2205
	mov	DWORD PTR _k$74662[ebp], 0
	jmp	SHORT $LN128@OpenStream
$LN127@OpenStream:
	mov	ecx, DWORD PTR _k$74662[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$74662[ebp], ecx
$LN128@OpenStream:
	mov	ecx, DWORD PTR _sigs$74661[ebp]
	call	?Size@?$CObjectVector@V?$CBuffer@E@@@@QBEIXZ ; CObjectVector<CBuffer<unsigned char> >::Size
	cmp	DWORD PTR _k$74662[ebp], eax
	jae	SHORT $LN126@OpenStream
; Line 2206
	mov	edx, DWORD PTR _i$74656[ebp]
	push	edx
	lea	ecx, DWORD PTR _sig2arc$[ebp]
	call	?Add@?$CRecordVector@I@@QAEII@Z		; CRecordVector<unsigned int>::Add
	jmp	SHORT $LN127@OpenStream
$LN126@OpenStream:
; Line 2207
	jmp	$LN130@OpenStream
$LN129@OpenStream:
; Line 2211
	push	40					; 00000028H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T77775[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 19		; 00000013H
	cmp	DWORD PTR $T77775[ebp], 0
	je	SHORT $LN287@OpenStream
	mov	ecx, DWORD PTR $T77775[ebp]
	call	??0CArchiveOpenCallback_Offset@@QAE@XZ
	mov	DWORD PTR tv1178[ebp], eax
	jmp	SHORT $LN288@OpenStream
$LN287@OpenStream:
	mov	DWORD PTR tv1178[ebp], 0
$LN288@OpenStream:
	mov	eax, DWORD PTR tv1178[ebp]
	mov	DWORD PTR $T77774[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
	mov	ecx, DWORD PTR $T77774[ebp]
	mov	DWORD PTR _openCallback_Offset_Spec$74666[ebp], ecx
; Line 2212
	mov	edx, DWORD PTR _openCallback_Offset_Spec$74666[ebp]
	push	edx
	lea	ecx, DWORD PTR _openCallback_Offset$74672[ebp]
	call	??0?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@PAUIArchiveOpenCallback@@@Z ; CMyComPtr<IArchiveOpenCallback>::CMyComPtr<IArchiveOpenCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 20		; 00000014H
; Line 2214
	mov	DWORD PTR _kBeforeSize$74673[ebp], 65536 ; 00010000H
; Line 2215
	mov	DWORD PTR _kAfterSize$74674[ebp], 1048576 ; 00100000H
; Line 2216
	mov	DWORD PTR _kBufSize$74675[ebp], 4194304	; 00400000H
; Line 2218
	mov	DWORD PTR _kNumVals$74676[ebp], 65536	; 00010000H
; Line 2219
	push	65536					; 00010000H
	lea	ecx, DWORD PTR _hashBuffer$74697[ebp]
	call	??0?$CObjArray@E@@QAE@I@Z		; CObjArray<unsigned char>::CObjArray<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+8], 21		; 00000015H
; Line 2220
	lea	ecx, DWORD PTR _hashBuffer$74697[ebp]
	call	??B?$CObjArray@E@@QAEPAEXZ		; CObjArray<unsigned char>::operator unsigned char *
	mov	DWORD PTR _hash$74698[ebp], eax
; Line 2221
	push	65536					; 00010000H
	push	255					; 000000ffH
	mov	eax, DWORD PTR _hash$74698[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 2223
	push	256					; 00000100H
	push	255					; 000000ffH
	lea	ecx, DWORD PTR _prevs$74699[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 2224
	lea	ecx, DWORD PTR _sig2arc$[ebp]
	call	?Size@?$CRecordVector@I@@QBEIXZ		; CRecordVector<unsigned int>::Size
	cmp	eax, 255				; 000000ffH
	jb	$LN125@OpenStream
; Line 2225
	mov	DWORD PTR $T77778[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 20		; 00000014H
	lea	ecx, DWORD PTR _hashBuffer$74697[ebp]
	call	??1?$CObjArray@E@@QAE@XZ		; CObjArray<unsigned char>::~CObjArray<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
	lea	ecx, DWORD PTR _openCallback_Offset$74672[ebp]
	call	??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	lea	ecx, DWORD PTR _sig2arc$[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR _arc2sig$[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _extractCallback_To_OpenCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _handler$[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _skipFrontalFormat$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _isMainFormatArr$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extension$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _fileName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T77778[ebp]
	jmp	$LN273@OpenStream
$LN125@OpenStream:
; Line 2227
	lea	ecx, DWORD PTR _difficultFormats$74703[ebp]
	call	??0?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 22		; 00000016H
; Line 2228
	push	256					; 00000100H
	lea	ecx, DWORD PTR _difficultBools$74704[ebp]
	call	??0?$CObjArray@_N@@QAE@I@Z		; CObjArray<bool>::CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 23		; 00000017H
; Line 2230
	mov	DWORD PTR _i$74705[ebp], 0
	jmp	SHORT $LN124@OpenStream
$LN123@OpenStream:
	mov	edx, DWORD PTR _i$74705[ebp]
	add	edx, 1
	mov	DWORD PTR _i$74705[ebp], edx
$LN124@OpenStream:
	cmp	DWORD PTR _i$74705[ebp], 256		; 00000100H
	jae	SHORT $LN122@OpenStream
; Line 2231
	lea	ecx, DWORD PTR _difficultBools$74704[ebp]
	call	??B?$CObjArray@_N@@QAEPA_NXZ		; CObjArray<bool>::operator bool *
	mov	ecx, DWORD PTR _i$74705[ebp]
	mov	BYTE PTR [eax+ecx], 0
	jmp	SHORT $LN123@OpenStream
$LN122@OpenStream:
; Line 2234
	mov	BYTE PTR _thereAreHandlersForSearch$74709[ebp], 0
; Line 2238
	mov	DWORD PTR _i$74710[ebp], 0
	jmp	SHORT $LN121@OpenStream
$LN120@OpenStream:
	mov	edx, DWORD PTR _i$74710[ebp]
	add	edx, 1
	mov	DWORD PTR _i$74710[ebp], edx
$LN121@OpenStream:
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	?Size@?$CRecordVector@H@@QBEIXZ		; CRecordVector<int>::Size
	cmp	DWORD PTR _i$74710[ebp], eax
	jae	$LN109@OpenStream
; Line 2240
	mov	eax, DWORD PTR _i$74710[ebp]
	push	eax
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	??A?$CRecordVector@H@@QAEAAHI@Z		; CRecordVector<int>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _index$74714[ebp], ecx
; Line 2241
	cmp	DWORD PTR _index$74714[ebp], 0
	jge	SHORT $LN118@OpenStream
; Line 2242
	jmp	SHORT $LN120@OpenStream
$LN118@OpenStream:
; Line 2243
	mov	edx, DWORD PTR _index$74714[ebp]
	push	edx
	mov	eax, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 8
	call	??A?$CObjectVector@UCArcInfoEx@@@@QAEAAUCArcInfoEx@@I@Z ; CObjectVector<CArcInfoEx>::operator[]
	mov	DWORD PTR _ai$74716[ebp], eax
; Line 2244
	mov	BYTE PTR _isDifficult$74717[ebp], 0
; Line 2246
	mov	ecx, DWORD PTR _ai$74716[ebp]
	movzx	edx, BYTE PTR [ecx+41]
	test	edx, edx
	jne	SHORT $LN117@OpenStream
; Line 2247
	mov	BYTE PTR _isDifficult$74717[ebp], 1
; Line 2248
	jmp	$LN116@OpenStream
$LN117@OpenStream:
; Line 2250
	mov	ecx, DWORD PTR _ai$74716[ebp]
	call	?Flags_StartOpen@CArcInfoEx@@QBE_NXZ	; CArcInfoEx::Flags_StartOpen
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN115@OpenStream
; Line 2251
	mov	BYTE PTR _isDifficult$74717[ebp], 1
$LN115@OpenStream:
; Line 2252
	mov	DWORD PTR _k$74721[ebp], 0
	jmp	SHORT $LN114@OpenStream
$LN113@OpenStream:
	mov	ecx, DWORD PTR _k$74721[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$74721[ebp], ecx
$LN114@OpenStream:
	mov	ecx, DWORD PTR _ai$74716[ebp]
	add	ecx, 48					; 00000030H
	call	?Size@?$CObjectVector@V?$CBuffer@E@@@@QBEIXZ ; CObjectVector<CBuffer<unsigned char> >::Size
	cmp	DWORD PTR _k$74721[ebp], eax
	jae	$LN116@OpenStream
; Line 2254
	mov	edx, DWORD PTR _k$74721[ebp]
	push	edx
	mov	ecx, DWORD PTR _ai$74716[ebp]
	add	ecx, 48					; 00000030H
	call	??A?$CObjectVector@V?$CBuffer@E@@@@QBEABV?$CBuffer@E@@I@Z ; CObjectVector<CBuffer<unsigned char> >::operator[]
	mov	DWORD PTR _sig$74725[ebp], eax
; Line 2260
	mov	ecx, DWORD PTR _sig$74725[ebp]
	call	?Size@?$CBuffer@E@@QBEIXZ		; CBuffer<unsigned char>::Size
	cmp	eax, 2
	jae	SHORT $LN111@OpenStream
; Line 2262
	mov	BYTE PTR _isDifficult$74717[ebp], 1
; Line 2263
	jmp	SHORT $LN113@OpenStream
$LN111@OpenStream:
; Line 2265
	mov	BYTE PTR _thereAreHandlersForSearch$74709[ebp], 1
; Line 2266
	mov	ecx, DWORD PTR _sig$74725[ebp]
	call	??B?$CBuffer@E@@QBEPBEXZ		; CBuffer<unsigned char>::operator unsigned char const *
	movzx	esi, BYTE PTR [eax]
	mov	ecx, DWORD PTR _sig$74725[ebp]
	call	??B?$CBuffer@E@@QBEPBEXZ		; CBuffer<unsigned char>::operator unsigned char const *
	movzx	eax, BYTE PTR [eax+1]
	shl	eax, 8
	or	esi, eax
	mov	DWORD PTR _v$74727[ebp], esi
; Line 2267
	mov	ecx, DWORD PTR _index$74714[ebp]
	push	ecx
	lea	ecx, DWORD PTR _arc2sig$[ebp]
	call	??A?$CRecordVector@I@@QAEAAII@Z		; CRecordVector<unsigned int>::operator[]
	mov	edx, DWORD PTR [eax]
	add	edx, DWORD PTR _k$74721[ebp]
	mov	DWORD PTR _sigIndex$74729[ebp], edx
; Line 2268
	mov	eax, DWORD PTR _hash$74698[ebp]
	add	eax, DWORD PTR _v$74727[ebp]
	mov	ecx, DWORD PTR _sigIndex$74729[ebp]
	mov	dl, BYTE PTR [eax]
	mov	BYTE PTR _prevs$74699[ebp+ecx], dl
; Line 2269
	mov	eax, DWORD PTR _hash$74698[ebp]
	add	eax, DWORD PTR _v$74727[ebp]
	mov	cl, BYTE PTR _sigIndex$74729[ebp]
	mov	BYTE PTR [eax], cl
; Line 2270
	jmp	$LN113@OpenStream
$LN116@OpenStream:
; Line 2272
	movzx	edx, BYTE PTR _isDifficult$74717[ebp]
	test	edx, edx
	je	SHORT $LN110@OpenStream
; Line 2274
	mov	eax, DWORD PTR _index$74714[ebp]
	push	eax
	lea	ecx, DWORD PTR _difficultFormats$74703[ebp]
	call	?Add@?$CRecordVector@I@@QAEII@Z		; CRecordVector<unsigned int>::Add
; Line 2275
	lea	ecx, DWORD PTR _difficultBools$74704[ebp]
	call	??B?$CObjArray@_N@@QAEPA_NXZ		; CObjArray<bool>::operator bool *
	mov	ecx, DWORD PTR _index$74714[ebp]
	mov	BYTE PTR [eax+ecx], 1
$LN110@OpenStream:
; Line 2277
	jmp	$LN120@OpenStream
$LN109@OpenStream:
; Line 2285
	mov	esi, esp
	push	0
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$74734[ebp], eax
	cmp	DWORD PTR ___result__$74734[ebp], 0
	je	$LN108@OpenStream
	mov	eax, DWORD PTR ___result__$74734[ebp]
	mov	DWORD PTR $T77779[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 22		; 00000016H
	lea	ecx, DWORD PTR _difficultBools$74704[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 21		; 00000015H
	lea	ecx, DWORD PTR _difficultFormats$74703[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 20		; 00000014H
	lea	ecx, DWORD PTR _hashBuffer$74697[ebp]
	call	??1?$CObjArray@E@@QAE@XZ		; CObjArray<unsigned char>::~CObjArray<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
	lea	ecx, DWORD PTR _openCallback_Offset$74672[ebp]
	call	??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	lea	ecx, DWORD PTR _sig2arc$[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR _arc2sig$[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _extractCallback_To_OpenCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _handler$[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _skipFrontalFormat$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _isMainFormatArr$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extension$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _fileName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T77779[ebp]
	jmp	$LN273@OpenStream
$LN108@OpenStream:
; Line 2287
	push	72					; 00000048H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T77781[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 24		; 00000018H
	cmp	DWORD PTR $T77781[ebp], 0
	je	SHORT $LN289@OpenStream
	mov	ecx, DWORD PTR $T77781[ebp]
	call	??0CLimitedCachedInStream@@QAE@XZ
	mov	DWORD PTR tv1320[ebp], eax
	jmp	SHORT $LN290@OpenStream
$LN289@OpenStream:
	mov	DWORD PTR tv1320[ebp], 0
$LN290@OpenStream:
	mov	ecx, DWORD PTR tv1320[ebp]
	mov	DWORD PTR $T77780[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 23		; 00000017H
	mov	edx, DWORD PTR $T77780[ebp]
	mov	DWORD PTR _limitedStreamSpec$74737[ebp], edx
; Line 2288
	mov	eax, DWORD PTR _limitedStreamSpec$74737[ebp]
	push	eax
	lea	ecx, DWORD PTR _limitedStream$74743[ebp]
	call	??0?$CMyComPtr@UIInStream@@@@QAE@PAUIInStream@@@Z ; CMyComPtr<IInStream>::CMyComPtr<IInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 25		; 00000019H
; Line 2289
	mov	ecx, DWORD PTR _op$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	mov	ecx, DWORD PTR _limitedStreamSpec$74737[ebp]
	call	?SetStream@CLimitedCachedInStream@@QAEXPAUIInStream@@@Z ; CLimitedCachedInStream::SetStream
; Line 2291
	mov	eax, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	mov	ecx, DWORD PTR _openCallback_Offset_Spec$74666[ebp]
	add	ecx, 12					; 0000000cH
	call	??4?$CMyComPtr@UIArchiveOpenCallback@@@@QAEPAUIArchiveOpenCallback@@PAU1@@Z ; CMyComPtr<IArchiveOpenCallback>::operator=
; Line 2294
	mov	edx, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [edx+56], 0
	je	SHORT $LN107@OpenStream
; Line 2296
	mov	ecx, DWORD PTR _openCallback_Offset_Spec$74666[ebp]
	add	ecx, 32					; 00000020H
	call	??I?$CMyComPtr@UICryptoGetTextPassword@@@@QAEPAPAUICryptoGetTextPassword@@XZ ; CMyComPtr<ICryptoGetTextPassword>::operator&
	push	eax
	push	OFFSET _IID_ICryptoGetTextPassword
	mov	ecx, DWORD PTR _openCallback_Offset_Spec$74666[ebp]
	add	ecx, 12					; 0000000cH
	call	??$QueryInterface@UICryptoGetTextPassword@@@?$CMyComPtr@UIArchiveOpenCallback@@@@QBEJABU_GUID@@PAPAUICryptoGetTextPassword@@@Z ; CMyComPtr<IArchiveOpenCallback>::QueryInterface<ICryptoGetTextPassword>
$LN107@OpenStream:
; Line 2300
	mov	eax, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [eax+56], 0
	je	$LN106@OpenStream
; Line 2301
	mov	esi, esp
	lea	ecx, DWORD PTR _fileSize$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR _op$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$74750[ebp], eax
	cmp	DWORD PTR ___result__$74750[ebp], 0
	je	$LN106@OpenStream
	mov	edx, DWORD PTR ___result__$74750[ebp]
	mov	DWORD PTR $T77784[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 23		; 00000017H
	lea	ecx, DWORD PTR _limitedStream$74743[ebp]
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 22		; 00000016H
	lea	ecx, DWORD PTR _difficultBools$74704[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 21		; 00000015H
	lea	ecx, DWORD PTR _difficultFormats$74703[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 20		; 00000014H
	lea	ecx, DWORD PTR _hashBuffer$74697[ebp]
	call	??1?$CObjArray@E@@QAE@XZ		; CObjArray<unsigned char>::~CObjArray<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
	lea	ecx, DWORD PTR _openCallback_Offset$74672[ebp]
	call	??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	lea	ecx, DWORD PTR _sig2arc$[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR _arc2sig$[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _extractCallback_To_OpenCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _handler$[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _skipFrontalFormat$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _isMainFormatArr$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extension$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _fileName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T77784[ebp]
	jmp	$LN273@OpenStream
$LN106@OpenStream:
; Line 2303
	mov	eax, DWORD PTR _limitedStreamSpec$74737[ebp]
	add	eax, 60					; 0000003cH
	mov	DWORD PTR _byteBuffer$74753[ebp], eax
; Line 2304
	push	4194304					; 00400000H
	mov	ecx, DWORD PTR _byteBuffer$74753[ebp]
	call	?Alloc@?$CBuffer@E@@QAEXI@Z		; CBuffer<unsigned char>::Alloc
; Line 2306
	mov	DWORD PTR _callbackPrev$74754[ebp], 0
	mov	DWORD PTR _callbackPrev$74754[ebp+4], 0
; Line 2307
	mov	BYTE PTR _needCheckStartOpen$74755[ebp], 1
; Line 2309
	mov	BYTE PTR _endOfFile$74756[ebp], 0
; Line 2310
	mov	DWORD PTR _bufPhyPos$74757[ebp], 0
	mov	DWORD PTR _bufPhyPos$74757[ebp+4], 0
; Line 2311
	mov	DWORD PTR _bytesInBuf$74758[ebp], 0
; Line 2316
	mov	DWORD PTR _pos$74759[ebp], 0
	mov	DWORD PTR _pos$74759[ebp+4], 0
; Line 2318
	mov	ecx, DWORD PTR _mode$[ebp]
	movzx	edx, BYTE PTR [ecx+19]
	test	edx, edx
	jne	SHORT $LN102@OpenStream
	mov	ecx, DWORD PTR _handlerSpec$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Size@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NParser::CParseItem>::Size
	cmp	eax, 1
	jne	SHORT $LN102@OpenStream
; Line 2320
	push	0
	mov	ecx, DWORD PTR _handlerSpec$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEAAUCParseItem@NParser@NArchive@@I@Z ; CObjectVector<NArchive::NParser::CParseItem>::operator[]
	mov	DWORD PTR _pi$74761[ebp], eax
; Line 2321
	mov	eax, DWORD PTR _pi$74761[ebp]
	movzx	ecx, BYTE PTR [eax+108]
	test	ecx, ecx
	jne	SHORT $LN102@OpenStream
	mov	edx, DWORD PTR _pi$74761[ebp]
	mov	DWORD PTR tv3317[ebp], edx
	mov	eax, DWORD PTR tv3317[ebp]
	mov	ecx, DWORD PTR tv3317[ebp]
	mov	edx, DWORD PTR [eax]
	or	edx, DWORD PTR [ecx+4]
	jne	SHORT $LN102@OpenStream
; Line 2322
	mov	eax, DWORD PTR _pi$74761[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _pos$74759[ebp], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _pos$74759[ebp+4], edx
$LN102@OpenStream:
; Line 2328
	mov	eax, DWORD PTR _pos$74759[ebp]
	sub	eax, DWORD PTR _bufPhyPos$74757[ebp]
	mov	ecx, DWORD PTR _pos$74759[ebp+4]
	sbb	ecx, DWORD PTR _bufPhyPos$74757[ebp+4]
	mov	DWORD PTR _posInBuf$74766[ebp], eax
	mov	DWORD PTR _posInBuf$74766[ebp+4], ecx
; Line 2332
	movzx	edx, BYTE PTR _endOfFile$74756[ebp]
	test	edx, edx
	jne	$LN100@OpenStream
; Line 2334
	cmp	DWORD PTR _bytesInBuf$74758[ebp], 4194304 ; 00400000H
	jae	$LN99@OpenStream
; Line 2336
	mov	eax, 4194304				; 00400000H
	sub	eax, DWORD PTR _bytesInBuf$74758[ebp]
	mov	DWORD PTR _processedSize$74769[ebp], eax
; Line 2338
	mov	ecx, DWORD PTR _bytesInBuf$74758[ebp]
	xor	edx, edx
	add	ecx, DWORD PTR _bufPhyPos$74757[ebp]
	adc	edx, DWORD PTR _bufPhyPos$74757[ebp+4]
	mov	DWORD PTR _seekPos$74770[ebp], ecx
	mov	DWORD PTR _seekPos$74770[ebp+4], edx
; Line 2339
	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR _bytesInBuf$74758[ebp]
	xor	ecx, ecx
	add	eax, DWORD PTR _bufPhyPos$74757[ebp]
	adc	ecx, DWORD PTR _bufPhyPos$74757[ebp+4]
	push	ecx
	push	eax
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	ecx, DWORD PTR _op$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$74771[ebp], eax
	cmp	DWORD PTR ___result__$74771[ebp], 0
	je	$LN98@OpenStream
	mov	edx, DWORD PTR ___result__$74771[ebp]
	mov	DWORD PTR $T77785[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 23		; 00000017H
	lea	ecx, DWORD PTR _limitedStream$74743[ebp]
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 22		; 00000016H
	lea	ecx, DWORD PTR _difficultBools$74704[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 21		; 00000015H
	lea	ecx, DWORD PTR _difficultFormats$74703[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 20		; 00000014H
	lea	ecx, DWORD PTR _hashBuffer$74697[ebp]
	call	??1?$CObjArray@E@@QAE@XZ		; CObjArray<unsigned char>::~CObjArray<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
	lea	ecx, DWORD PTR _openCallback_Offset$74672[ebp]
	call	??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	lea	ecx, DWORD PTR _sig2arc$[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR _arc2sig$[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _extractCallback_To_OpenCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _handler$[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _skipFrontalFormat$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _isMainFormatArr$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extension$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _fileName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T77785[ebp]
	jmp	$LN273@OpenStream
$LN98@OpenStream:
; Line 2340
	lea	eax, DWORD PTR _processedSize$74769[ebp]
	push	eax
	mov	ecx, DWORD PTR _byteBuffer$74753[ebp]
	call	??B?$CBuffer@E@@QAEPAEXZ		; CBuffer<unsigned char>::operator unsigned char *
	add	eax, DWORD PTR _bytesInBuf$74758[ebp]
	push	eax
	mov	ecx, DWORD PTR _op$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	call	?ReadStream@@YGJPAUISequentialInStream@@PAXPAI@Z ; ReadStream
	mov	DWORD PTR ___result__$74774[ebp], eax
	cmp	DWORD PTR ___result__$74774[ebp], 0
	je	$LN97@OpenStream
	mov	eax, DWORD PTR ___result__$74774[ebp]
	mov	DWORD PTR $T77786[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 23		; 00000017H
	lea	ecx, DWORD PTR _limitedStream$74743[ebp]
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 22		; 00000016H
	lea	ecx, DWORD PTR _difficultBools$74704[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 21		; 00000015H
	lea	ecx, DWORD PTR _difficultFormats$74703[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 20		; 00000014H
	lea	ecx, DWORD PTR _hashBuffer$74697[ebp]
	call	??1?$CObjArray@E@@QAE@XZ		; CObjArray<unsigned char>::~CObjArray<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
	lea	ecx, DWORD PTR _openCallback_Offset$74672[ebp]
	call	??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	lea	ecx, DWORD PTR _sig2arc$[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR _arc2sig$[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _extractCallback_To_OpenCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _handler$[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _skipFrontalFormat$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _isMainFormatArr$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extension$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _fileName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T77786[ebp]
	jmp	$LN273@OpenStream
$LN97@OpenStream:
; Line 2342
	cmp	DWORD PTR _processedSize$74769[ebp], 0
	jne	SHORT $LN96@OpenStream
; Line 2344
	mov	ecx, DWORD PTR _seekPos$74770[ebp]
	mov	DWORD PTR _fileSize$[ebp], ecx
	mov	edx, DWORD PTR _seekPos$74770[ebp+4]
	mov	DWORD PTR _fileSize$[ebp+4], edx
; Line 2345
	mov	BYTE PTR _endOfFile$74756[ebp], 1
; Line 2347
	jmp	SHORT $LN95@OpenStream
$LN96@OpenStream:
; Line 2349
	mov	eax, DWORD PTR _bytesInBuf$74758[ebp]
	add	eax, DWORD PTR _processedSize$74769[ebp]
	mov	DWORD PTR _bytesInBuf$74758[ebp], eax
; Line 2350
	mov	ecx, DWORD PTR _bufPhyPos$74757[ebp]
	push	ecx
	mov	edx, DWORD PTR _processedSize$74769[ebp]
	push	edx
	mov	ecx, DWORD PTR _limitedStreamSpec$74737[ebp]
	call	?SetCache@CLimitedCachedInStream@@QAEXII@Z ; CLimitedCachedInStream::SetCache
$LN95@OpenStream:
; Line 2352
	jmp	$LN102@OpenStream
$LN99@OpenStream:
; Line 2355
	mov	eax, DWORD PTR _bytesInBuf$74758[ebp]
	xor	ecx, ecx
	mov	DWORD PTR tv3366[ebp], eax
	mov	DWORD PTR tv3366[ebp+4], ecx
	mov	edx, DWORD PTR tv3366[ebp+4]
	cmp	edx, DWORD PTR _posInBuf$74766[ebp+4]
	ja	$LN94@OpenStream
	jb	SHORT $LN347@OpenStream
	mov	eax, DWORD PTR tv3366[ebp]
	cmp	eax, DWORD PTR _posInBuf$74766[ebp]
	jae	$LN94@OpenStream
$LN347@OpenStream:
; Line 2357
	mov	ecx, DWORD PTR _bytesInBuf$74758[ebp]
	xor	edx, edx
	mov	eax, DWORD PTR _posInBuf$74766[ebp]
	sub	eax, ecx
	mov	ecx, DWORD PTR _posInBuf$74766[ebp+4]
	sbb	ecx, edx
	mov	DWORD PTR _skipSize$74781[ebp], eax
	mov	DWORD PTR _skipSize$74781[ebp+4], ecx
; Line 2358
	cmp	DWORD PTR _skipSize$74781[ebp+4], 0
	ja	$LN93@OpenStream
	jb	SHORT $LN348@OpenStream
	cmp	DWORD PTR _skipSize$74781[ebp], 65536	; 00010000H
	ja	$LN93@OpenStream
$LN348@OpenStream:
; Line 2360
	mov	edx, 65536				; 00010000H
	sub	edx, DWORD PTR _skipSize$74781[ebp]
	mov	eax, 0
	sbb	eax, DWORD PTR _skipSize$74781[ebp+4]
	mov	DWORD PTR _keepSize$74783[ebp], edx
; Line 2362
	mov	esi, esp
	mov	ecx, DWORD PTR _keepSize$74783[ebp]
	push	ecx
	mov	ecx, DWORD PTR _byteBuffer$74753[ebp]
	call	??B?$CBuffer@E@@QAEPAEXZ		; CBuffer<unsigned char>::operator unsigned char *
	add	eax, DWORD PTR _bytesInBuf$74758[ebp]
	sub	eax, DWORD PTR _keepSize$74783[ebp]
	push	eax
	mov	ecx, DWORD PTR _byteBuffer$74753[ebp]
	call	??B?$CBuffer@E@@QAEPAEXZ		; CBuffer<unsigned char>::operator unsigned char *
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2363
	mov	edx, DWORD PTR _keepSize$74783[ebp]
	mov	DWORD PTR _bytesInBuf$74758[ebp], edx
; Line 2364
	mov	eax, DWORD PTR _keepSize$74783[ebp]
	xor	ecx, ecx
	mov	edx, DWORD PTR _pos$74759[ebp]
	sub	edx, eax
	mov	eax, DWORD PTR _pos$74759[ebp+4]
	sbb	eax, ecx
	mov	DWORD PTR _bufPhyPos$74757[ebp], edx
	mov	DWORD PTR _bufPhyPos$74757[ebp+4], eax
; Line 2365
	jmp	$LN102@OpenStream
$LN93@OpenStream:
; Line 2369
	mov	DWORD PTR _bytesInBuf$74758[ebp], 0
; Line 2370
	mov	ecx, DWORD PTR _pos$74759[ebp]
	sub	ecx, 65536				; 00010000H
	mov	edx, DWORD PTR _pos$74759[ebp+4]
	sbb	edx, 0
	mov	DWORD PTR _bufPhyPos$74757[ebp], ecx
	mov	DWORD PTR _bufPhyPos$74757[ebp+4], edx
; Line 2371
	jmp	$LN102@OpenStream
$LN94@OpenStream:
; Line 2374
	mov	eax, DWORD PTR _bytesInBuf$74758[ebp]
	xor	ecx, ecx
	sub	eax, DWORD PTR _posInBuf$74766[ebp]
	sbb	ecx, DWORD PTR _posInBuf$74766[ebp+4]
	mov	DWORD PTR tv3410[ebp], eax
	mov	DWORD PTR tv3410[ebp+4], ecx
	cmp	DWORD PTR tv3410[ebp+4], 0
	ja	$LN100@OpenStream
	jb	SHORT $LN349@OpenStream
	cmp	DWORD PTR tv3410[ebp], 1048576		; 00100000H
	jae	$LN100@OpenStream
$LN349@OpenStream:
; Line 2376
	mov	edx, DWORD PTR _posInBuf$74766[ebp]
	sub	edx, 65536				; 00010000H
	mov	DWORD PTR _beg$74786[ebp], edx
; Line 2378
	mov	eax, DWORD PTR _bytesInBuf$74758[ebp]
	sub	eax, DWORD PTR _beg$74786[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _byteBuffer$74753[ebp]
	call	??B?$CBuffer@E@@QAEPAEXZ		; CBuffer<unsigned char>::operator unsigned char *
	add	eax, DWORD PTR _beg$74786[ebp]
	push	eax
	mov	ecx, DWORD PTR _byteBuffer$74753[ebp]
	call	??B?$CBuffer@E@@QAEPAEXZ		; CBuffer<unsigned char>::operator unsigned char *
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2379
	mov	ecx, DWORD PTR _beg$74786[ebp]
	xor	edx, edx
	add	ecx, DWORD PTR _bufPhyPos$74757[ebp]
	adc	edx, DWORD PTR _bufPhyPos$74757[ebp+4]
	mov	DWORD PTR _bufPhyPos$74757[ebp], ecx
	mov	DWORD PTR _bufPhyPos$74757[ebp+4], edx
; Line 2380
	mov	eax, DWORD PTR _bytesInBuf$74758[ebp]
	sub	eax, DWORD PTR _beg$74786[ebp]
	mov	DWORD PTR _bytesInBuf$74758[ebp], eax
; Line 2381
	jmp	$LN102@OpenStream
$LN100@OpenStream:
; Line 2385
	mov	ecx, DWORD PTR _callbackPrev$74754[ebp]
	add	ecx, 8388608				; 00800000H
	mov	edx, DWORD PTR _callbackPrev$74754[ebp+4]
	adc	edx, 0
	mov	DWORD PTR tv3431[ebp], ecx
	mov	DWORD PTR tv3431[ebp+4], edx
	mov	eax, DWORD PTR _pos$74759[ebp+4]
	cmp	eax, DWORD PTR tv3431[ebp+4]
	jb	$LN91@OpenStream
	ja	SHORT $LN350@OpenStream
	mov	ecx, DWORD PTR _pos$74759[ebp]
	cmp	ecx, DWORD PTR tv3431[ebp]
	jb	$LN91@OpenStream
$LN350@OpenStream:
; Line 2387
	mov	ecx, DWORD PTR _handlerSpec$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Size@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NParser::CParseItem>::Size
	xor	edx, edx
	mov	ecx, DWORD PTR _openCallback_Offset_Spec$74666[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	DWORD PTR [ecx+20], edx
; Line 2388
	mov	edx, DWORD PTR _openCallback_Offset_Spec$74666[ebp]
	mov	eax, DWORD PTR _pos$74759[ebp]
	mov	DWORD PTR [edx+24], eax
	mov	ecx, DWORD PTR _pos$74759[ebp+4]
	mov	DWORD PTR [edx+28], ecx
; Line 2389
	lea	ecx, DWORD PTR _openCallback_Offset$74672[ebp]
	call	??C?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ ; CMyComPtr<IArchiveOpenCallback>::operator->
	mov	DWORD PTR tv1495[ebp], eax
	mov	esi, esp
	push	0
	push	0
	mov	edx, DWORD PTR tv1495[ebp]
	push	edx
	mov	eax, DWORD PTR tv1495[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$74789[ebp], eax
	cmp	DWORD PTR ___result__$74789[ebp], 0
	je	$LN90@OpenStream
	mov	eax, DWORD PTR ___result__$74789[ebp]
	mov	DWORD PTR $T77787[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 23		; 00000017H
	lea	ecx, DWORD PTR _limitedStream$74743[ebp]
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 22		; 00000016H
	lea	ecx, DWORD PTR _difficultBools$74704[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 21		; 00000015H
	lea	ecx, DWORD PTR _difficultFormats$74703[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 20		; 00000014H
	lea	ecx, DWORD PTR _hashBuffer$74697[ebp]
	call	??1?$CObjArray@E@@QAE@XZ		; CObjArray<unsigned char>::~CObjArray<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
	lea	ecx, DWORD PTR _openCallback_Offset$74672[ebp]
	call	??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	lea	ecx, DWORD PTR _sig2arc$[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR _arc2sig$[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _extractCallback_To_OpenCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _handler$[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _skipFrontalFormat$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _isMainFormatArr$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extension$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _fileName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T77787[ebp]
	jmp	$LN273@OpenStream
$LN90@OpenStream:
; Line 2390
	mov	ecx, DWORD PTR _pos$74759[ebp]
	mov	DWORD PTR _callbackPrev$74754[ebp], ecx
	mov	edx, DWORD PTR _pos$74759[ebp+4]
	mov	DWORD PTR _callbackPrev$74754[ebp+4], edx
$LN91@OpenStream:
; Line 2394
	mov	eax, DWORD PTR _bytesInBuf$74758[ebp]
	xor	ecx, ecx
	add	eax, DWORD PTR _bufPhyPos$74757[ebp]
	adc	ecx, DWORD PTR _bufPhyPos$74757[ebp+4]
	mov	DWORD PTR _endPos$74792[ebp], eax
	mov	DWORD PTR _endPos$74792[ebp+4], ecx
; Line 2395
	mov	edx, DWORD PTR _fileSize$[ebp+4]
	cmp	edx, DWORD PTR _endPos$74792[ebp+4]
	ja	SHORT $LN89@OpenStream
	jb	SHORT $LN351@OpenStream
	mov	eax, DWORD PTR _fileSize$[ebp]
	cmp	eax, DWORD PTR _endPos$74792[ebp]
	jae	SHORT $LN89@OpenStream
$LN351@OpenStream:
; Line 2397
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _fileSize$[ebp]
	mov	DWORD PTR [ecx+192], edx
	mov	eax, DWORD PTR _fileSize$[ebp+4]
	mov	DWORD PTR [ecx+196], eax
; Line 2398
	mov	ecx, DWORD PTR _endPos$74792[ebp]
	mov	DWORD PTR _fileSize$[ebp], ecx
	mov	edx, DWORD PTR _endPos$74792[ebp+4]
	mov	DWORD PTR _fileSize$[ebp+4], edx
$LN89@OpenStream:
; Line 2402
	mov	eax, DWORD PTR _posInBuf$74766[ebp]
	mov	ecx, DWORD PTR _bytesInBuf$74758[ebp]
	sub	ecx, eax
	mov	DWORD PTR _availSize$74794[ebp], ecx
; Line 2403
	cmp	DWORD PTR _availSize$74794[ebp], 2
	jae	SHORT $LN88@OpenStream
; Line 2404
	jmp	$LN101@OpenStream
$LN88@OpenStream:
; Line 2406
	cmp	DWORD PTR _availSize$74794[ebp], 1048576 ; 00100000H
	sbb	edx, edx
	and	edx, -1048574				; fff00002H
	add	edx, 1048576				; 00100000H
	mov	eax, DWORD PTR _availSize$74794[ebp]
	sub	eax, edx
	mov	DWORD PTR _scanSize$74797[ebp], eax
; Line 2414
	mov	ecx, DWORD PTR _mode$[ebp]
	movzx	edx, BYTE PTR [ecx+18]
	test	edx, edx
	jne	SHORT $LN87@OpenStream
; Line 2416
	mov	eax, DWORD PTR _pos$74759[ebp+4]
	cmp	eax, DWORD PTR _maxStartOffset$[ebp+4]
	jb	SHORT $LN86@OpenStream
	ja	SHORT $LN352@OpenStream
	mov	ecx, DWORD PTR _pos$74759[ebp]
	cmp	ecx, DWORD PTR _maxStartOffset$[ebp]
	jbe	SHORT $LN86@OpenStream
$LN352@OpenStream:
; Line 2417
	jmp	$LN101@OpenStream
$LN86@OpenStream:
; Line 2418
	mov	edx, DWORD PTR _maxStartOffset$[ebp]
	sub	edx, DWORD PTR _pos$74759[ebp]
	mov	eax, DWORD PTR _maxStartOffset$[ebp+4]
	sbb	eax, DWORD PTR _pos$74759[ebp+4]
	mov	DWORD PTR _remScan$74800[ebp], edx
	mov	DWORD PTR _remScan$74800[ebp+4], eax
; Line 2419
	mov	ecx, DWORD PTR _scanSize$74797[ebp]
	xor	edx, edx
	mov	DWORD PTR tv3490[ebp], ecx
	mov	DWORD PTR tv3490[ebp+4], edx
	mov	eax, DWORD PTR tv3490[ebp+4]
	cmp	eax, DWORD PTR _remScan$74800[ebp+4]
	jb	SHORT $LN87@OpenStream
	ja	SHORT $LN353@OpenStream
	mov	ecx, DWORD PTR tv3490[ebp]
	cmp	ecx, DWORD PTR _remScan$74800[ebp]
	jbe	SHORT $LN87@OpenStream
$LN353@OpenStream:
; Line 2420
	mov	edx, DWORD PTR _remScan$74800[ebp]
	mov	DWORD PTR _scanSize$74797[ebp], edx
$LN87@OpenStream:
; Line 2424
	mov	eax, DWORD PTR _scanSize$74797[ebp]
	add	eax, 1
	mov	DWORD PTR _scanSize$74797[ebp], eax
; Line 2426
	mov	ecx, DWORD PTR _byteBuffer$74753[ebp]
	call	??B?$CBuffer@E@@QAEPAEXZ		; CBuffer<unsigned char>::operator unsigned char *
	mov	ecx, DWORD PTR _posInBuf$74766[ebp]
	add	eax, ecx
	mov	DWORD PTR _buf$74803[ebp], eax
; Line 2427
	mov	DWORD PTR _ppp$74805[ebp], 0
; Line 2429
	movzx	edx, BYTE PTR _needCheckStartOpen$74755[ebp]
	test	edx, edx
	jne	$LN84@OpenStream
	jmp	SHORT $LN83@OpenStream
$LN82@OpenStream:
; Line 2431
	mov	eax, DWORD PTR _ppp$74805[ebp]
	add	eax, 1
	mov	DWORD PTR _ppp$74805[ebp], eax
$LN83@OpenStream:
	mov	ecx, DWORD PTR _ppp$74805[ebp]
	cmp	ecx, DWORD PTR _scanSize$74797[ebp]
	jae	SHORT $LN81@OpenStream
	mov	edx, DWORD PTR _buf$74803[ebp]
	add	edx, DWORD PTR _ppp$74805[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _buf$74803[ebp]
	add	ecx, DWORD PTR _ppp$74805[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	shl	edx, 8
	or	eax, edx
	mov	ecx, DWORD PTR _hash$74698[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 255				; 000000ffH
	jne	SHORT $LN81@OpenStream
	jmp	SHORT $LN82@OpenStream
$LN81@OpenStream:
; Line 2432
	mov	eax, DWORD PTR _ppp$74805[ebp]
	xor	ecx, ecx
	add	eax, DWORD PTR _pos$74759[ebp]
	adc	ecx, DWORD PTR _pos$74759[ebp+4]
	mov	DWORD PTR _pos$74759[ebp], eax
	mov	DWORD PTR _pos$74759[ebp+4], ecx
; Line 2433
	mov	edx, DWORD PTR _ppp$74805[ebp]
	cmp	edx, DWORD PTR _scanSize$74797[ebp]
	jne	SHORT $LN84@OpenStream
; Line 2434
	jmp	$LN102@OpenStream
$LN84@OpenStream:
; Line 2437
	mov	eax, DWORD PTR _buf$74803[ebp]
	add	eax, DWORD PTR _ppp$74805[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _buf$74803[ebp]
	add	edx, DWORD PTR _ppp$74805[ebp]
	movzx	eax, BYTE PTR [edx+1]
	shl	eax, 8
	or	ecx, eax
	mov	DWORD PTR _v$74812[ebp], ecx
; Line 2438
	mov	BYTE PTR _nextNeedCheckStartOpen$74814[ebp], 1
; Line 2439
	mov	ecx, DWORD PTR _hash$74698[ebp]
	add	ecx, DWORD PTR _v$74812[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _i$74815[ebp], edx
; Line 2440
	mov	DWORD PTR _indexOfDifficult$74816[ebp], 0
; Line 2443
	mov	BYTE PTR _wasOpen$74817[ebp], 0
$LN79@OpenStream:
; Line 2449
	movzx	eax, BYTE PTR _needCheckStartOpen$74755[ebp]
	test	eax, eax
	je	SHORT $LN77@OpenStream
	lea	ecx, DWORD PTR _difficultFormats$74703[ebp]
	call	?Size@?$CRecordVector@I@@QBEIXZ		; CRecordVector<unsigned int>::Size
	cmp	DWORD PTR _indexOfDifficult$74816[ebp], eax
	jae	SHORT $LN77@OpenStream
; Line 2451
	mov	ecx, DWORD PTR _indexOfDifficult$74816[ebp]
	mov	DWORD PTR tv1559[ebp], ecx
	mov	edx, DWORD PTR _indexOfDifficult$74816[ebp]
	add	edx, 1
	mov	DWORD PTR _indexOfDifficult$74816[ebp], edx
	mov	eax, DWORD PTR tv1559[ebp]
	push	eax
	lea	ecx, DWORD PTR _difficultFormats$74703[ebp]
	call	??A?$CRecordVector@I@@QAEAAII@Z		; CRecordVector<unsigned int>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _index$74821[ebp], ecx
; Line 2452
	mov	BYTE PTR _isDifficult$74822[ebp], 1
; Line 2454
	jmp	$LN76@OpenStream
$LN77@OpenStream:
; Line 2456
	cmp	DWORD PTR _i$74815[ebp], 255		; 000000ffH
	jne	SHORT $LN75@OpenStream
; Line 2457
	jmp	$LN78@OpenStream
$LN75@OpenStream:
; Line 2458
	mov	edx, DWORD PTR _i$74815[ebp]
	push	edx
	lea	ecx, DWORD PTR _sig2arc$[ebp]
	call	??A?$CRecordVector@I@@QAEAAII@Z		; CRecordVector<unsigned int>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _index$74821[ebp], eax
; Line 2459
	mov	ecx, DWORD PTR _index$74821[ebp]
	push	ecx
	lea	ecx, DWORD PTR _arc2sig$[ebp]
	call	??A?$CRecordVector@I@@QAEAAII@Z		; CRecordVector<unsigned int>::operator[]
	mov	edx, DWORD PTR _i$74815[ebp]
	sub	edx, DWORD PTR [eax]
	mov	DWORD PTR _sigIndex$74826[ebp], edx
; Line 2460
	mov	eax, DWORD PTR _i$74815[ebp]
	movzx	ecx, BYTE PTR _prevs$74699[ebp+eax]
	mov	DWORD PTR _i$74815[ebp], ecx
; Line 2461
	movzx	edx, BYTE PTR _needCheckStartOpen$74755[ebp]
	test	edx, edx
	je	SHORT $LN74@OpenStream
	lea	ecx, DWORD PTR _difficultBools$74704[ebp]
	call	??B?$CObjArray@_N@@QAEPA_NXZ		; CObjArray<bool>::operator bool *
	mov	ecx, DWORD PTR _index$74821[ebp]
	movzx	edx, BYTE PTR [eax+ecx]
	test	edx, edx
	je	SHORT $LN74@OpenStream
; Line 2462
	jmp	$LN79@OpenStream
$LN74@OpenStream:
; Line 2463
	mov	eax, DWORD PTR _index$74821[ebp]
	push	eax
	mov	ecx, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR [ecx]
	add	ecx, 8
	call	??A?$CObjectVector@UCArcInfoEx@@@@QAEAAUCArcInfoEx@@I@Z ; CObjectVector<CArcInfoEx>::operator[]
	mov	DWORD PTR _ai$74828[ebp], eax
; Line 2465
	mov	edx, DWORD PTR _ai$74828[ebp]
	mov	eax, DWORD PTR [edx+44]
	xor	ecx, ecx
	mov	DWORD PTR tv3534[ebp], eax
	mov	DWORD PTR tv3534[ebp+4], ecx
	mov	edx, DWORD PTR _pos$74759[ebp+4]
	cmp	edx, DWORD PTR tv3534[ebp+4]
	ja	SHORT $LN73@OpenStream
	jb	SHORT $LN354@OpenStream
	mov	eax, DWORD PTR _pos$74759[ebp]
	cmp	eax, DWORD PTR tv3534[ebp]
	jae	SHORT $LN73@OpenStream
$LN354@OpenStream:
; Line 2466
	jmp	$LN79@OpenStream
$LN73@OpenStream:
; Line 2474
	mov	ecx, DWORD PTR _sigIndex$74826[ebp]
	push	ecx
	mov	ecx, DWORD PTR _ai$74828[ebp]
	add	ecx, 48					; 00000030H
	call	??A?$CObjectVector@V?$CBuffer@E@@@@QBEABV?$CBuffer@E@@I@Z ; CObjectVector<CBuffer<unsigned char> >::operator[]
	mov	DWORD PTR _sig$74830[ebp], eax
; Line 2477
	mov	ecx, DWORD PTR _sig$74830[ebp]
	call	?Size@?$CBuffer@E@@QBEIXZ		; CBuffer<unsigned char>::Size
	add	eax, DWORD PTR _ppp$74805[ebp]
	cmp	eax, DWORD PTR _availSize$74794[ebp]
	ja	SHORT $LN71@OpenStream
	mov	ecx, DWORD PTR _sig$74830[ebp]
	call	?Size@?$CBuffer@E@@QBEIXZ		; CBuffer<unsigned char>::Size
	push	eax
	mov	ecx, DWORD PTR _sig$74830[ebp]
	call	??B?$CBuffer@E@@QBEPBEXZ		; CBuffer<unsigned char>::operator unsigned char const *
	push	eax
	mov	edx, DWORD PTR _buf$74803[ebp]
	add	edx, DWORD PTR _ppp$74805[ebp]
	push	edx
	call	?TestSignature@@YG_NPBE0I@Z		; TestSignature
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN72@OpenStream
$LN71@OpenStream:
; Line 2478
	jmp	$LN79@OpenStream
$LN72@OpenStream:
; Line 2481
	mov	BYTE PTR _isDifficult$74822[ebp], 0
$LN76@OpenStream:
; Line 2484
	mov	ecx, DWORD PTR _index$74821[ebp]
	push	ecx
	mov	edx, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR [edx]
	add	ecx, 8
	call	??A?$CObjectVector@UCArcInfoEx@@@@QAEAAUCArcInfoEx@@I@Z ; CObjectVector<CArcInfoEx>::operator[]
	mov	DWORD PTR _ai$74833[ebp], eax
; Line 2487
	movzx	eax, BYTE PTR _isDifficult$74822[ebp]
	test	eax, eax
	je	SHORT $LN68@OpenStream
	mov	ecx, DWORD PTR _pos$74759[ebp]
	or	ecx, DWORD PTR _pos$74759[ebp+4]
	je	SHORT $LN69@OpenStream
$LN68@OpenStream:
	mov	edx, DWORD PTR _ai$74833[ebp]
	mov	eax, DWORD PTR [edx+44]
	xor	ecx, ecx
	mov	DWORD PTR tv3558[ebp], eax
	mov	DWORD PTR tv3558[ebp+4], ecx
	mov	edx, DWORD PTR tv3558[ebp]
	cmp	edx, DWORD PTR _pos$74759[ebp]
	jne	SHORT $LN70@OpenStream
	mov	eax, DWORD PTR tv3558[ebp+4]
	cmp	eax, DWORD PTR _pos$74759[ebp+4]
	jne	SHORT $LN70@OpenStream
$LN69@OpenStream:
; Line 2490
	lea	ecx, DWORD PTR _skipFrontalFormat$[ebp]
	call	??B?$CObjArray@_N@@QAEPA_NXZ		; CObjArray<bool>::operator bool *
	mov	ecx, DWORD PTR _index$74821[ebp]
	movzx	edx, BYTE PTR [eax+ecx]
	test	edx, edx
	je	SHORT $LN70@OpenStream
; Line 2491
	jmp	$LN79@OpenStream
$LN70@OpenStream:
; Line 2494
	mov	eax, DWORD PTR _pos$74759[ebp]
	mov	DWORD PTR _startArcPos$74838[ebp], eax
	mov	ecx, DWORD PTR _pos$74759[ebp+4]
	mov	DWORD PTR _startArcPos$74838[ebp+4], ecx
; Line 2495
	movzx	edx, BYTE PTR _isDifficult$74822[ebp]
	test	edx, edx
	jne	SHORT $LN66@OpenStream
; Line 2497
	mov	eax, DWORD PTR _ai$74833[ebp]
	mov	ecx, DWORD PTR [eax+44]
	xor	edx, edx
	mov	DWORD PTR tv3571[ebp], ecx
	mov	DWORD PTR tv3571[ebp+4], edx
	mov	eax, DWORD PTR _pos$74759[ebp+4]
	cmp	eax, DWORD PTR tv3571[ebp+4]
	ja	SHORT $LN65@OpenStream
	jb	SHORT $LN355@OpenStream
	mov	ecx, DWORD PTR _pos$74759[ebp]
	cmp	ecx, DWORD PTR tv3571[ebp]
	jae	SHORT $LN65@OpenStream
$LN355@OpenStream:
; Line 2498
	jmp	$LN79@OpenStream
$LN65@OpenStream:
; Line 2499
	mov	edx, DWORD PTR _ai$74833[ebp]
	mov	eax, DWORD PTR [edx+44]
	xor	ecx, ecx
	mov	edx, DWORD PTR _pos$74759[ebp]
	sub	edx, eax
	mov	eax, DWORD PTR _pos$74759[ebp+4]
	sbb	eax, ecx
	mov	DWORD PTR _startArcPos$74838[ebp], edx
	mov	DWORD PTR _startArcPos$74838[ebp+4], eax
$LN66@OpenStream:
; Line 2507
	mov	ecx, DWORD PTR _ai$74833[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	$LN64@OpenStream
	mov	edx, DWORD PTR _startArcPos$74838[ebp+4]
	cmp	edx, DWORD PTR _bufPhyPos$74757[ebp+4]
	jb	$LN64@OpenStream
	ja	SHORT $LN356@OpenStream
	mov	eax, DWORD PTR _startArcPos$74838[ebp]
	cmp	eax, DWORD PTR _bufPhyPos$74757[ebp]
	jb	$LN64@OpenStream
$LN356@OpenStream:
; Line 2509
	mov	ecx, DWORD PTR _startArcPos$74838[ebp]
	sub	ecx, DWORD PTR _bufPhyPos$74757[ebp]
	mov	edx, DWORD PTR _startArcPos$74838[ebp+4]
	sbb	edx, DWORD PTR _bufPhyPos$74757[ebp+4]
	mov	DWORD PTR _offsetInBuf$74842[ebp], ecx
; Line 2510
	mov	eax, DWORD PTR _offsetInBuf$74842[ebp]
	cmp	eax, DWORD PTR _bytesInBuf$74758[ebp]
	jae	SHORT $LN64@OpenStream
; Line 2512
	mov	ecx, DWORD PTR _bytesInBuf$74758[ebp]
	sub	ecx, DWORD PTR _offsetInBuf$74842[ebp]
	mov	esi, esp
	push	ecx
	mov	ecx, DWORD PTR _byteBuffer$74753[ebp]
	call	??B?$CBuffer@E@@QAEPAEXZ		; CBuffer<unsigned char>::operator unsigned char *
	add	eax, DWORD PTR _offsetInBuf$74842[ebp]
	push	eax
	mov	edx, DWORD PTR _ai$74833[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _isArcRes$74845[ebp], eax
; Line 2513
	cmp	DWORD PTR _isArcRes$74845[ebp], 0
	jne	SHORT $LN62@OpenStream
; Line 2514
	jmp	$LN79@OpenStream
$LN62@OpenStream:
; Line 2515
	cmp	DWORD PTR _isArcRes$74845[ebp], 2
	jne	SHORT $LN64@OpenStream
	movzx	ecx, BYTE PTR _endOfFile$74756[ebp]
	test	ecx, ecx
	je	SHORT $LN64@OpenStream
; Line 2516
	jmp	$LN79@OpenStream
$LN64@OpenStream:
; Line 2534
	lea	ecx, DWORD PTR _isMainFormatArr$[ebp]
	call	??B?$CObjArray@_N@@QAEPA_NXZ		; CObjArray<bool>::operator bool *
	mov	edx, DWORD PTR _index$74821[ebp]
	mov	al, BYTE PTR [eax+edx]
	mov	BYTE PTR _isMainFormat$74848[ebp], al
; Line 2535
	movzx	ecx, BYTE PTR _isUnknownExt$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _isMainFormat$74848[ebp]
	push	edx
	movzx	eax, BYTE PTR _isForced$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mode$[ebp]
	call	?GetSpec@COpenType@@QBEABUCOpenSpecFlags@@_N00@Z ; COpenType::GetSpec
	mov	DWORD PTR _specFlags$74849[ebp], eax
; Line 2537
	lea	ecx, DWORD PTR _archive$74851[ebp]
	call	??0?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::CMyComPtr<IInArchive>
	mov	BYTE PTR __$EHRec$[ebp+8], 26		; 0000001aH
; Line 2538
	lea	ecx, DWORD PTR _archive$74851[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$74821[ebp]
	push	edx
	mov	eax, DWORD PTR _op$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PrepareToOpen@CArc@@AAEJABUCOpenOptions@@IAAV?$CMyComPtr@UIInArchive@@@@@Z ; CArc::PrepareToOpen
	mov	DWORD PTR ___result__$74852[ebp], eax
	cmp	DWORD PTR ___result__$74852[ebp], 0
	je	$LN60@OpenStream
	mov	ecx, DWORD PTR ___result__$74852[ebp]
	mov	DWORD PTR $T77788[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 25		; 00000019H
	lea	ecx, DWORD PTR _archive$74851[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	mov	BYTE PTR __$EHRec$[ebp+8], 23		; 00000017H
	lea	ecx, DWORD PTR _limitedStream$74743[ebp]
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 22		; 00000016H
	lea	ecx, DWORD PTR _difficultBools$74704[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 21		; 00000015H
	lea	ecx, DWORD PTR _difficultFormats$74703[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 20		; 00000014H
	lea	ecx, DWORD PTR _hashBuffer$74697[ebp]
	call	??1?$CObjArray@E@@QAE@XZ		; CObjArray<unsigned char>::~CObjArray<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
	lea	ecx, DWORD PTR _openCallback_Offset$74672[ebp]
	call	??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	lea	ecx, DWORD PTR _sig2arc$[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR _arc2sig$[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _extractCallback_To_OpenCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _handler$[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _skipFrontalFormat$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _isMainFormatArr$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extension$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _fileName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T77788[ebp]
	jmp	$LN273@OpenStream
$LN60@OpenStream:
; Line 2539
	lea	ecx, DWORD PTR _archive$74851[ebp]
	call	??7?$CMyComPtr@UIInArchive@@@@QBE_NXZ	; CMyComPtr<IInArchive>::operator!
	movzx	edx, al
	test	edx, edx
	je	$LN59@OpenStream
; Line 2540
	mov	DWORD PTR $T77789[ebp], -2147467259	; 80004005H
	mov	BYTE PTR __$EHRec$[ebp+8], 25		; 00000019H
	lea	ecx, DWORD PTR _archive$74851[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	mov	BYTE PTR __$EHRec$[ebp+8], 23		; 00000017H
	lea	ecx, DWORD PTR _limitedStream$74743[ebp]
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 22		; 00000016H
	lea	ecx, DWORD PTR _difficultBools$74704[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 21		; 00000015H
	lea	ecx, DWORD PTR _difficultFormats$74703[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 20		; 00000014H
	lea	ecx, DWORD PTR _hashBuffer$74697[ebp]
	call	??1?$CObjArray@E@@QAE@XZ		; CObjArray<unsigned char>::~CObjArray<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
	lea	ecx, DWORD PTR _openCallback_Offset$74672[ebp]
	call	??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	lea	ecx, DWORD PTR _sig2arc$[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR _arc2sig$[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _extractCallback_To_OpenCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _handler$[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _skipFrontalFormat$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _isMainFormatArr$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extension$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _fileName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T77789[ebp]
	jmp	$LN273@OpenStream
$LN59@OpenStream:
; Line 2544
	mov	eax, DWORD PTR _fileSize$[ebp]
	sub	eax, DWORD PTR _startArcPos$74838[ebp]
	mov	ecx, DWORD PTR _fileSize$[ebp+4]
	sbb	ecx, DWORD PTR _startArcPos$74838[ebp+4]
	mov	DWORD PTR _rem$74858[ebp], eax
	mov	DWORD PTR _rem$74858[ebp+4], ecx
; Line 2546
	mov	DWORD PTR _arcStreamOffset$74859[ebp], 0
	mov	DWORD PTR _arcStreamOffset$74859[ebp+4], 0
; Line 2548
	mov	ecx, DWORD PTR _ai$74833[ebp]
	call	?Flags_UseGlobalOffset@CArcInfoEx@@QBE_NXZ ; CArcInfoEx::Flags_UseGlobalOffset
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN58@OpenStream
; Line 2550
	mov	eax, DWORD PTR _fileSize$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _fileSize$[ebp]
	push	ecx
	push	0
	push	0
	mov	ecx, DWORD PTR _limitedStreamSpec$74737[ebp]
	call	?InitAndSeek@CLimitedCachedInStream@@QAEJ_K0@Z ; CLimitedCachedInStream::InitAndSeek
; Line 2551
	lea	ecx, DWORD PTR _limitedStream$74743[ebp]
	call	??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->
	mov	DWORD PTR tv1709[ebp], eax
	mov	esi, esp
	push	0
	push	0
	mov	edx, DWORD PTR _startArcPos$74838[ebp+4]
	push	edx
	mov	eax, DWORD PTR _startArcPos$74838[ebp]
	push	eax
	mov	ecx, DWORD PTR tv1709[ebp]
	push	ecx
	mov	edx, DWORD PTR tv1709[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2553
	jmp	SHORT $LN57@OpenStream
$LN58@OpenStream:
; Line 2555
	mov	edx, DWORD PTR _rem$74858[ebp+4]
	push	edx
	mov	eax, DWORD PTR _rem$74858[ebp]
	push	eax
	mov	ecx, DWORD PTR _startArcPos$74838[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _startArcPos$74838[ebp]
	push	edx
	mov	ecx, DWORD PTR _limitedStreamSpec$74737[ebp]
	call	?InitAndSeek@CLimitedCachedInStream@@QAEJ_K0@Z ; CLimitedCachedInStream::InitAndSeek
; Line 2556
	mov	eax, DWORD PTR _startArcPos$74838[ebp]
	mov	DWORD PTR _arcStreamOffset$74859[ebp], eax
	mov	ecx, DWORD PTR _startArcPos$74838[ebp+4]
	mov	DWORD PTR _arcStreamOffset$74859[ebp+4], ecx
$LN57@OpenStream:
; Line 2559
	mov	DWORD PTR _maxCheckStartPosition$74862[ebp], 0
	mov	DWORD PTR _maxCheckStartPosition$74862[ebp+4], 0
; Line 2560
	mov	ecx, DWORD PTR _handlerSpec$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Size@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NParser::CParseItem>::Size
	xor	edx, edx
	mov	ecx, DWORD PTR _openCallback_Offset_Spec$74666[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	DWORD PTR [ecx+20], edx
; Line 2561
	mov	edx, DWORD PTR _openCallback_Offset_Spec$74666[ebp]
	mov	eax, DWORD PTR _startArcPos$74838[ebp]
	mov	DWORD PTR [edx+24], eax
	mov	ecx, DWORD PTR _startArcPos$74838[ebp+4]
	mov	DWORD PTR [edx+28], ecx
; Line 2563
	mov	edx, DWORD PTR _extractCallback_To_OpenCallback_Spec$[ebp]
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
; Line 2564
	mov	eax, DWORD PTR _extractCallback_To_OpenCallback_Spec$[ebp]
	mov	ecx, DWORD PTR _startArcPos$74838[ebp]
	mov	DWORD PTR [eax+24], ecx
	mov	edx, DWORD PTR _startArcPos$74838[ebp+4]
	mov	DWORD PTR [eax+28], edx
; Line 2566
	lea	ecx, DWORD PTR _extractCallback_To_OpenCallback$[ebp]
	call	??B?$CMyComPtr@UIArchiveExtractCallback@@@@QBEPAUIArchiveExtractCallback@@XZ ; CMyComPtr<IArchiveExtractCallback>::operator IArchiveExtractCallback *
	push	eax
	lea	ecx, DWORD PTR _openCallback_Offset$74672[ebp]
	call	??B?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ ; CMyComPtr<IArchiveOpenCallback>::operator IArchiveOpenCallback *
	push	eax
	lea	eax, DWORD PTR _maxCheckStartPosition$74862[ebp]
	push	eax
	lea	ecx, DWORD PTR _limitedStream$74743[ebp]
	call	??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *
	push	eax
	push	1
	lea	ecx, DWORD PTR _archive$74851[ebp]
	call	??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator IInArchive *
	push	eax
	call	?OpenArchiveSpec@@YGJPAUIInArchive@@_NPAUIInStream@@PB_KPAUIArchiveOpenCallback@@PAUIArchiveExtractCallback@@@Z ; OpenArchiveSpec
	mov	DWORD PTR _result$74863[ebp], eax
; Line 2568
	mov	ecx, DWORD PTR _ai$74833[ebp]
	call	?Flags_UseGlobalOffset@CArcInfoEx@@QBE_NXZ ; CArcInfoEx::Flags_UseGlobalOffset
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN291@OpenStream
	mov	DWORD PTR tv1748[ebp], 0
	mov	DWORD PTR tv1748[ebp+4], 0
	jmp	SHORT $LN292@OpenStream
$LN291@OpenStream:
	mov	edx, DWORD PTR _startArcPos$74838[ebp]
	mov	DWORD PTR tv1748[ebp], edx
	mov	eax, DWORD PTR _startArcPos$74838[ebp+4]
	mov	DWORD PTR tv1748[ebp+4], eax
$LN292@OpenStream:
	mov	ecx, DWORD PTR _result$74863[ebp]
	push	ecx
	mov	edx, DWORD PTR tv1748[ebp+4]
	push	edx
	mov	eax, DWORD PTR tv1748[ebp]
	push	eax
	lea	ecx, DWORD PTR _archive$74851[ebp]
	call	??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator IInArchive *
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadBasicProps@CArc@@QAEJPAUIInArchive@@_KJ@Z ; CArc::ReadBasicProps
	mov	DWORD PTR ___result__$74864[ebp], eax
	cmp	DWORD PTR ___result__$74864[ebp], 0
	je	$LN56@OpenStream
	mov	ecx, DWORD PTR ___result__$74864[ebp]
	mov	DWORD PTR $T77792[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 25		; 00000019H
	lea	ecx, DWORD PTR _archive$74851[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	mov	BYTE PTR __$EHRec$[ebp+8], 23		; 00000017H
	lea	ecx, DWORD PTR _limitedStream$74743[ebp]
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 22		; 00000016H
	lea	ecx, DWORD PTR _difficultBools$74704[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 21		; 00000015H
	lea	ecx, DWORD PTR _difficultFormats$74703[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 20		; 00000014H
	lea	ecx, DWORD PTR _hashBuffer$74697[ebp]
	call	??1?$CObjArray@E@@QAE@XZ		; CObjArray<unsigned char>::~CObjArray<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
	lea	ecx, DWORD PTR _openCallback_Offset$74672[ebp]
	call	??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	lea	ecx, DWORD PTR _sig2arc$[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR _arc2sig$[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _extractCallback_To_OpenCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _handler$[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _skipFrontalFormat$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _isMainFormatArr$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extension$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _fileName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T77792[ebp]
	jmp	$LN273@OpenStream
$LN56@OpenStream:
; Line 2570
	mov	BYTE PTR _isOpen$74867[ebp], 0
; Line 2571
	cmp	DWORD PTR _result$74863[ebp], 1
	jne	$LN55@OpenStream
; Line 2573
	mov	edx, DWORD PTR _mode$[ebp]
	movzx	eax, BYTE PTR [edx+18]
	test	eax, eax
	jne	$LN54@OpenStream
; Line 2575
	cmp	DWORD PTR _formatIndex$[ebp], 0
	jge	$LN53@OpenStream
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?IsArc_After_NonOpen@CArcErrorInfo@@QBE_NXZ ; CArcErrorInfo::IsArc_After_NonOpen
	movzx	ecx, al
	test	ecx, ecx
	je	$LN53@OpenStream
; Line 2577
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _index$74821[ebp]
	mov	DWORD PTR [edx+28], eax
; Line 2578
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??4CArcErrorInfo@@QAEAAU0@ABU0@@Z
; Line 2580
	mov	DWORD PTR $T77793[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 25		; 00000019H
	lea	ecx, DWORD PTR _archive$74851[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	mov	BYTE PTR __$EHRec$[ebp+8], 23		; 00000017H
	lea	ecx, DWORD PTR _limitedStream$74743[ebp]
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 22		; 00000016H
	lea	ecx, DWORD PTR _difficultBools$74704[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 21		; 00000015H
	lea	ecx, DWORD PTR _difficultFormats$74703[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 20		; 00000014H
	lea	ecx, DWORD PTR _hashBuffer$74697[ebp]
	call	??1?$CObjArray@E@@QAE@XZ		; CObjArray<unsigned char>::~CObjArray<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
	lea	ecx, DWORD PTR _openCallback_Offset$74672[ebp]
	call	??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	lea	ecx, DWORD PTR _sig2arc$[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR _arc2sig$[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _extractCallback_To_OpenCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _handler$[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _skipFrontalFormat$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _isMainFormatArr$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extension$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _fileName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T77793[ebp]
	jmp	$LN273@OpenStream
$LN53@OpenStream:
; Line 2582
	mov	BYTE PTR __$EHRec$[ebp+8], 25		; 00000019H
	lea	ecx, DWORD PTR _archive$74851[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	jmp	$LN79@OpenStream
$LN54@OpenStream:
; Line 2584
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?IsArc_After_NonOpen@CArcErrorInfo@@QBE_NXZ ; CArcErrorInfo::IsArc_After_NonOpen
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN51@OpenStream
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+184]
	test	ecx, ecx
	je	SHORT $LN51@OpenStream
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv3702[ebp], edx
	mov	eax, DWORD PTR tv3702[ebp]
	mov	ecx, DWORD PTR tv3702[ebp]
	mov	edx, DWORD PTR [eax+176]
	or	edx, DWORD PTR [ecx+180]
	jne	SHORT $LN52@OpenStream
$LN51@OpenStream:
; Line 2585
	mov	BYTE PTR __$EHRec$[ebp+8], 25		; 00000019H
	lea	ecx, DWORD PTR _archive$74851[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	jmp	$LN79@OpenStream
$LN52@OpenStream:
; Line 2587
	jmp	$LN50@OpenStream
$LN55@OpenStream:
; Line 2589
	mov	BYTE PTR _isOpen$74867[ebp], 1
; Line 2590
	mov	eax, DWORD PTR _result$74863[ebp]
	mov	DWORD PTR ___result__$74877[ebp], eax
	cmp	DWORD PTR ___result__$74877[ebp], 0
	je	$LN50@OpenStream
	mov	ecx, DWORD PTR ___result__$74877[ebp]
	mov	DWORD PTR $T77794[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 25		; 00000019H
	lea	ecx, DWORD PTR _archive$74851[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	mov	BYTE PTR __$EHRec$[ebp+8], 23		; 00000017H
	lea	ecx, DWORD PTR _limitedStream$74743[ebp]
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 22		; 00000016H
	lea	ecx, DWORD PTR _difficultBools$74704[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 21		; 00000015H
	lea	ecx, DWORD PTR _difficultFormats$74703[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 20		; 00000014H
	lea	ecx, DWORD PTR _hashBuffer$74697[ebp]
	call	??1?$CObjArray@E@@QAE@XZ		; CObjArray<unsigned char>::~CObjArray<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
	lea	ecx, DWORD PTR _openCallback_Offset$74672[ebp]
	call	??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	lea	ecx, DWORD PTR _sig2arc$[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR _arc2sig$[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _extractCallback_To_OpenCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _handler$[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _skipFrontalFormat$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _isMainFormatArr$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extension$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _fileName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T77794[ebp]
	jmp	$LN273@OpenStream
$LN50@OpenStream:
; Line 2598
	lea	ecx, DWORD PTR _pi$74880[ebp]
	call	??0CParseItem@NParser@NArchive@@QAE@XZ	; NArchive::NParser::CParseItem::CParseItem
	mov	BYTE PTR __$EHRec$[ebp+8], 27		; 0000001bH
; Line 2599
	mov	edx, DWORD PTR _startArcPos$74838[ebp]
	mov	DWORD PTR _pi$74880[ebp], edx
	mov	eax, DWORD PTR _startArcPos$74838[ebp+4]
	mov	DWORD PTR _pi$74880[ebp+4], eax
; Line 2601
	mov	ecx, DWORD PTR _ai$74833[ebp]
	call	?Flags_UseGlobalOffset@CArcInfoEx@@QBE_NXZ ; CArcInfoEx::Flags_UseGlobalOffset
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN48@OpenStream
; Line 2602
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+168]
	mov	DWORD PTR _pi$74880[ebp], eax
	mov	ecx, DWORD PTR [edx+172]
	mov	DWORD PTR _pi$74880[ebp+4], ecx
	jmp	$LN47@OpenStream
$LN48@OpenStream:
; Line 2603
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv3751[ebp], edx
	mov	eax, DWORD PTR tv3751[ebp]
	mov	ecx, DWORD PTR tv3751[ebp]
	mov	edx, DWORD PTR [eax+168]
	or	edx, DWORD PTR [ecx+172]
	je	$LN47@OpenStream
; Line 2604
	mov	DWORD PTR $T77795[ebp], -2147467259	; 80004005H
	mov	BYTE PTR __$EHRec$[ebp+8], 26		; 0000001aH
	lea	ecx, DWORD PTR _pi$74880[ebp]
	call	??1CParseItem@NParser@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 25		; 00000019H
	lea	ecx, DWORD PTR _archive$74851[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	mov	BYTE PTR __$EHRec$[ebp+8], 23		; 00000017H
	lea	ecx, DWORD PTR _limitedStream$74743[ebp]
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 22		; 00000016H
	lea	ecx, DWORD PTR _difficultBools$74704[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 21		; 00000015H
	lea	ecx, DWORD PTR _difficultFormats$74703[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 20		; 00000014H
	lea	ecx, DWORD PTR _hashBuffer$74697[ebp]
	call	??1?$CObjArray@E@@QAE@XZ		; CObjArray<unsigned char>::~CObjArray<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
	lea	ecx, DWORD PTR _openCallback_Offset$74672[ebp]
	call	??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	lea	ecx, DWORD PTR _sig2arc$[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR _arc2sig$[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _extractCallback_To_OpenCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _handler$[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _skipFrontalFormat$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _isMainFormatArr$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extension$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _fileName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T77795[ebp]
	jmp	$LN273@OpenStream
$LN47@OpenStream:
; Line 2605
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+192]
	sub	ecx, DWORD PTR _pi$74880[ebp]
	mov	edx, DWORD PTR [eax+196]
	sbb	edx, DWORD PTR _pi$74880[ebp+4]
	mov	DWORD PTR _arcRem$74886[ebp], ecx
	mov	DWORD PTR _arcRem$74886[ebp+4], edx
; Line 2606
	mov	eax, DWORD PTR _arcRem$74886[ebp]
	mov	DWORD PTR _phySize$74887[ebp], eax
	mov	ecx, DWORD PTR _arcRem$74886[ebp+4]
	mov	DWORD PTR _phySize$74887[ebp+4], ecx
; Line 2607
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+184]
	mov	BYTE PTR _phySizeDefined$74888[ebp], al
; Line 2608
	movzx	ecx, BYTE PTR _phySizeDefined$74888[ebp]
	test	ecx, ecx
	je	$LN45@OpenStream
; Line 2610
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pi$74880[ebp]
	add	eax, DWORD PTR [edx+176]
	mov	ecx, DWORD PTR _pi$74880[ebp+4]
	adc	ecx, DWORD PTR [edx+180]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv3777[ebp], eax
	mov	DWORD PTR tv3777[ebp+4], ecx
	mov	DWORD PTR tv3780[ebp], edx
	mov	eax, DWORD PTR tv3780[ebp]
	mov	ecx, DWORD PTR tv3777[ebp+4]
	cmp	ecx, DWORD PTR [eax+196]
	jb	SHORT $LN44@OpenStream
	ja	SHORT $LN357@OpenStream
	mov	edx, DWORD PTR tv3780[ebp]
	mov	eax, DWORD PTR tv3777[ebp]
	cmp	eax, DWORD PTR [edx+192]
	jbe	SHORT $LN44@OpenStream
$LN357@OpenStream:
; Line 2613
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+192]
	sub	edx, DWORD PTR _pi$74880[ebp]
	mov	eax, DWORD PTR [ecx+196]
	sbb	eax, DWORD PTR _pi$74880[ebp+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+176], edx
	mov	DWORD PTR [ecx+180], eax
$LN44@OpenStream:
; Line 2615
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+176]
	mov	DWORD PTR _phySize$74887[ebp], eax
	mov	ecx, DWORD PTR [edx+180]
	mov	DWORD PTR _phySize$74887[ebp+4], ecx
$LN45@OpenStream:
; Line 2617
	mov	edx, DWORD PTR _phySize$74887[ebp]
	or	edx, DWORD PTR _phySize$74887[ebp+4]
	je	SHORT $LN42@OpenStream
	cmp	DWORD PTR _phySize$74887[ebp+4], -2147483648 ; 80000000H
	jb	$LN43@OpenStream
	ja	SHORT $LN42@OpenStream
	cmp	DWORD PTR _phySize$74887[ebp], 0
	jbe	$LN43@OpenStream
$LN42@OpenStream:
; Line 2618
	mov	DWORD PTR $T77796[ebp], -2147467259	; 80004005H
	mov	BYTE PTR __$EHRec$[ebp+8], 26		; 0000001aH
	lea	ecx, DWORD PTR _pi$74880[ebp]
	call	??1CParseItem@NParser@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 25		; 00000019H
	lea	ecx, DWORD PTR _archive$74851[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	mov	BYTE PTR __$EHRec$[ebp+8], 23		; 00000017H
	lea	ecx, DWORD PTR _limitedStream$74743[ebp]
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 22		; 00000016H
	lea	ecx, DWORD PTR _difficultBools$74704[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 21		; 00000015H
	lea	ecx, DWORD PTR _difficultFormats$74703[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 20		; 00000014H
	lea	ecx, DWORD PTR _hashBuffer$74697[ebp]
	call	??1?$CObjArray@E@@QAE@XZ		; CObjArray<unsigned char>::~CObjArray<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
	lea	ecx, DWORD PTR _openCallback_Offset$74672[ebp]
	call	??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	lea	ecx, DWORD PTR _sig2arc$[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR _arc2sig$[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _extractCallback_To_OpenCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _handler$[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _skipFrontalFormat$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _isMainFormatArr$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extension$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _fileName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T77796[ebp]
	jmp	$LN273@OpenStream
$LN43@OpenStream:
; Line 2631
	mov	BYTE PTR _needScan$74897[ebp], 0
; Line 2634
	movzx	eax, BYTE PTR _isOpen$74867[ebp]
	test	eax, eax
	je	SHORT $LN41@OpenStream
	movzx	ecx, BYTE PTR _phySizeDefined$74888[ebp]
	test	ecx, ecx
	jne	SHORT $LN41@OpenStream
; Line 2637
	mov	BYTE PTR _pi$74880[ebp+108], 1
; Line 2638
	mov	BYTE PTR _needScan$74897[ebp], 1
; Line 2639
	mov	edx, DWORD PTR _arcRem$74886[ebp]
	mov	DWORD PTR _phySize$74887[ebp], edx
	mov	eax, DWORD PTR _arcRem$74886[ebp+4]
	mov	DWORD PTR _phySize$74887[ebp+4], eax
; Line 2640
	mov	BYTE PTR _nextNeedCheckStartOpen$74814[ebp], 0
$LN41@OpenStream:
; Line 2643
	mov	ecx, DWORD PTR _phySize$74887[ebp]
	mov	DWORD PTR _pi$74880[ebp+8], ecx
	mov	edx, DWORD PTR _phySize$74887[ebp+4]
	mov	DWORD PTR _pi$74880[ebp+12], edx
; Line 2648
	lea	ecx, DWORD PTR _pi$74880[ebp]
	call	?NormalizeOffset@CParseItem@NParser@NArchive@@QAEXXZ ; NArchive::NParser::CParseItem::NormalizeOffset
; Line 2656
	mov	eax, DWORD PTR _pi$74880[ebp]
	or	eax, DWORD PTR _pi$74880[ebp+4]
	jne	SHORT $LN40@OpenStream
	movzx	ecx, BYTE PTR _pi$74880[ebp+108]
	test	ecx, ecx
	jne	SHORT $LN40@OpenStream
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv3814[ebp], edx
	mov	eax, DWORD PTR tv3814[ebp]
	mov	ecx, DWORD PTR _pi$74880[ebp+12]
	cmp	ecx, DWORD PTR [eax+196]
	jb	SHORT $LN40@OpenStream
	ja	SHORT $LN359@OpenStream
	mov	edx, DWORD PTR tv3814[ebp]
	mov	eax, DWORD PTR _pi$74880[ebp+8]
	cmp	eax, DWORD PTR [edx+192]
	jb	SHORT $LN40@OpenStream
$LN359@OpenStream:
; Line 2659
	mov	ecx, DWORD PTR _mode$[ebp]
	movzx	edx, BYTE PTR [ecx+17]
	test	edx, edx
	jne	SHORT $LN40@OpenStream
; Line 2660
	mov	BYTE PTR __$EHRec$[ebp+8], 26		; 0000001aH
	lea	ecx, DWORD PTR _pi$74880[ebp]
	call	??1CParseItem@NParser@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 25		; 00000019H
	lea	ecx, DWORD PTR _archive$74851[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	jmp	$LN79@OpenStream
$LN40@OpenStream:
; Line 2663
	mov	eax, DWORD PTR _mode$[ebp]
	movzx	ecx, BYTE PTR [eax+19]
	test	ecx, ecx
	je	SHORT $LN38@OpenStream
; Line 2664
	mov	edx, DWORD PTR _pos$74759[ebp]
	add	edx, 1
	mov	eax, DWORD PTR _pos$74759[ebp+4]
	adc	eax, 0
	mov	DWORD PTR _pos$74759[ebp], edx
	mov	DWORD PTR _pos$74759[ebp+4], eax
	jmp	SHORT $LN37@OpenStream
$LN38@OpenStream:
; Line 2665
	movzx	ecx, BYTE PTR _needScan$74897[ebp]
	test	ecx, ecx
	je	SHORT $LN36@OpenStream
; Line 2667
	mov	edx, DWORD PTR _pos$74759[ebp]
	add	edx, 1
	mov	eax, DWORD PTR _pos$74759[ebp+4]
	adc	eax, 0
	mov	DWORD PTR _pos$74759[ebp], edx
	mov	DWORD PTR _pos$74759[ebp+4], eax
; Line 2675
	jmp	SHORT $LN37@OpenStream
$LN36@OpenStream:
; Line 2676
	mov	ecx, DWORD PTR _pi$74880[ebp]
	add	ecx, DWORD PTR _pi$74880[ebp+8]
	mov	edx, DWORD PTR _pi$74880[ebp+4]
	adc	edx, DWORD PTR _pi$74880[ebp+12]
	mov	DWORD PTR _pos$74759[ebp], ecx
	mov	DWORD PTR _pos$74759[ebp+4], edx
$LN37@OpenStream:
; Line 2679
	lea	eax, DWORD PTR _pi$74880[ebp]
	push	eax
	mov	ecx, DWORD PTR _ai$74833[ebp]
	push	ecx
	lea	ecx, DWORD PTR _archive$74851[ebp]
	call	??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator IInArchive *
	push	eax
	call	?ReadParseItemProps@@YGJPAUIInArchive@@ABUCArcInfoEx@@AAUCParseItem@NParser@NArchive@@@Z ; ReadParseItemProps
	mov	DWORD PTR ___result__$74905[ebp], eax
	cmp	DWORD PTR ___result__$74905[ebp], 0
	je	$LN34@OpenStream
	mov	edx, DWORD PTR ___result__$74905[ebp]
	mov	DWORD PTR $T77797[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 26		; 0000001aH
	lea	ecx, DWORD PTR _pi$74880[ebp]
	call	??1CParseItem@NParser@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 25		; 00000019H
	lea	ecx, DWORD PTR _archive$74851[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	mov	BYTE PTR __$EHRec$[ebp+8], 23		; 00000017H
	lea	ecx, DWORD PTR _limitedStream$74743[ebp]
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 22		; 00000016H
	lea	ecx, DWORD PTR _difficultBools$74704[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 21		; 00000015H
	lea	ecx, DWORD PTR _difficultFormats$74703[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 20		; 00000014H
	lea	ecx, DWORD PTR _hashBuffer$74697[ebp]
	call	??1?$CObjArray@E@@QAE@XZ		; CObjArray<unsigned char>::~CObjArray<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
	lea	ecx, DWORD PTR _openCallback_Offset$74672[ebp]
	call	??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	lea	ecx, DWORD PTR _sig2arc$[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR _arc2sig$[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _extractCallback_To_OpenCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _handler$[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _skipFrontalFormat$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _isMainFormatArr$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extension$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _fileName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T77797[ebp]
	jmp	$LN273@OpenStream
$LN34@OpenStream:
; Line 2681
	mov	eax, DWORD PTR _pi$74880[ebp+4]
	cmp	eax, DWORD PTR _startArcPos$74838[ebp+4]
	ja	$LN33@OpenStream
	jb	SHORT $LN360@OpenStream
	mov	ecx, DWORD PTR _pi$74880[ebp]
	cmp	ecx, DWORD PTR _startArcPos$74838[ebp]
	jae	$LN33@OpenStream
$LN360@OpenStream:
	mov	edx, DWORD PTR _mode$[ebp]
	movzx	eax, BYTE PTR [edx+19]
	test	eax, eax
	jne	$LN33@OpenStream
$LN32@OpenStream:
; Line 2686
	mov	ecx, DWORD PTR _handlerSpec$[ebp]
	add	ecx, 12					; 0000000cH
	call	?IsEmpty@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QBE_NXZ ; CObjectVector<NArchive::NParser::CParseItem>::IsEmpty
	movzx	ecx, al
	test	ecx, ecx
	jne	$LN33@OpenStream
; Line 2689
	mov	ecx, DWORD PTR _handlerSpec$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Back@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEAAUCParseItem@NParser@NArchive@@XZ ; CObjectVector<NArchive::NParser::CParseItem>::Back
	mov	DWORD PTR _back$74912[ebp], eax
; Line 2690
	mov	edx, DWORD PTR _back$74912[ebp]
	mov	DWORD PTR tv3854[ebp], edx
	mov	eax, DWORD PTR tv3854[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR _pi$74880[ebp+4]
	ja	SHORT $LN30@OpenStream
	jb	SHORT $LN361@OpenStream
	mov	edx, DWORD PTR tv3854[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR _pi$74880[ebp]
	jae	SHORT $LN30@OpenStream
$LN361@OpenStream:
; Line 2691
	jmp	SHORT $LN33@OpenStream
$LN30@OpenStream:
; Line 2692
	mov	ecx, DWORD PTR _back$74912[ebp]
	mov	edx, DWORD PTR _back$74912[ebp]
	mov	eax, DWORD PTR [ecx]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+4]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _pi$74880[ebp]
	add	edx, DWORD PTR _pi$74880[ebp+8]
	mov	esi, DWORD PTR _pi$74880[ebp+4]
	adc	esi, DWORD PTR _pi$74880[ebp+12]
	mov	DWORD PTR tv3875[ebp], eax
	mov	DWORD PTR tv3875[ebp+4], ecx
	mov	DWORD PTR tv3878[ebp], edx
	mov	DWORD PTR tv3878[ebp+4], esi
	mov	eax, DWORD PTR tv3875[ebp+4]
	cmp	eax, DWORD PTR tv3878[ebp+4]
	jb	SHORT $LN29@OpenStream
	ja	SHORT $LN362@OpenStream
	mov	ecx, DWORD PTR tv3875[ebp]
	cmp	ecx, DWORD PTR tv3878[ebp]
	jbe	SHORT $LN29@OpenStream
$LN362@OpenStream:
; Line 2693
	jmp	SHORT $LN33@OpenStream
$LN29@OpenStream:
; Line 2695
	mov	ecx, DWORD PTR _handlerSpec$[ebp]
	add	ecx, 12					; 0000000cH
	call	?DeleteBack@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEXXZ ; CObjectVector<NArchive::NParser::CParseItem>::DeleteBack
; Line 2696
	jmp	$LN32@OpenStream
$LN33@OpenStream:
; Line 2700
	movzx	edx, BYTE PTR _isOpen$74867[ebp]
	test	edx, edx
	je	$LN28@OpenStream
	mov	eax, DWORD PTR _mode$[ebp]
	movzx	ecx, BYTE PTR [eax+17]
	test	ecx, ecx
	je	$LN28@OpenStream
	movzx	edx, BYTE PTR _phySizeDefined$74888[ebp]
	test	edx, edx
	je	$LN28@OpenStream
; Line 2703
	mov	BYTE PTR _openCur$74916[ebp], 0
; Line 2705
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+16]
	mov	BYTE PTR _thereIsTail$74917[ebp], cl
; Line 2706
	movzx	edx, BYTE PTR _thereIsTail$74917[ebp]
	test	edx, edx
	je	$LN27@OpenStream
	mov	eax, DWORD PTR _mode$[ebp]
	movzx	ecx, BYTE PTR [eax+20]
	test	ecx, ecx
	je	$LN27@OpenStream
; Line 2708
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _arcStreamOffset$74859[ebp]
	add	eax, DWORD PTR [edx+168]
	mov	ecx, DWORD PTR _arcStreamOffset$74859[ebp+4]
	adc	ecx, DWORD PTR [edx+172]
	mov	edx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [edx+176]
	adc	ecx, DWORD PTR [edx+180]
	push	ecx
	push	eax
	mov	eax, DWORD PTR _op$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckZerosTail@CArc@@AAEJABUCOpenOptions@@_K@Z ; CArc::CheckZerosTail
	mov	DWORD PTR ___result__$74919[ebp], eax
	cmp	DWORD PTR ___result__$74919[ebp], 0
	je	$LN26@OpenStream
	mov	ecx, DWORD PTR ___result__$74919[ebp]
	mov	DWORD PTR $T77798[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 26		; 0000001aH
	lea	ecx, DWORD PTR _pi$74880[ebp]
	call	??1CParseItem@NParser@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 25		; 00000019H
	lea	ecx, DWORD PTR _archive$74851[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	mov	BYTE PTR __$EHRec$[ebp+8], 23		; 00000017H
	lea	ecx, DWORD PTR _limitedStream$74743[ebp]
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 22		; 00000016H
	lea	ecx, DWORD PTR _difficultBools$74704[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 21		; 00000015H
	lea	ecx, DWORD PTR _difficultFormats$74703[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 20		; 00000014H
	lea	ecx, DWORD PTR _hashBuffer$74697[ebp]
	call	??1?$CObjArray@E@@QAE@XZ		; CObjArray<unsigned char>::~CObjArray<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
	lea	ecx, DWORD PTR _openCallback_Offset$74672[ebp]
	call	??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	lea	ecx, DWORD PTR _sig2arc$[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR _arc2sig$[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _extractCallback_To_OpenCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _handler$[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _skipFrontalFormat$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _isMainFormatArr$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extension$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _fileName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T77798[ebp]
	jmp	$LN273@OpenStream
$LN26@OpenStream:
; Line 2709
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+18]
	test	eax, eax
	je	SHORT $LN27@OpenStream
; Line 2710
	mov	BYTE PTR _thereIsTail$74917[ebp], 0
$LN27@OpenStream:
; Line 2713
	mov	ecx, DWORD PTR _pi$74880[ebp]
	or	ecx, DWORD PTR _pi$74880[ebp+4]
	je	SHORT $LN24@OpenStream
; Line 2715
	movzx	edx, BYTE PTR _pi$74880[ebp+77]
	test	edx, edx
	jne	SHORT $LN23@OpenStream
; Line 2716
	movzx	eax, BYTE PTR _thereIsTail$74917[ebp]
	test	eax, eax
	je	SHORT $LN22@OpenStream
; Line 2717
	mov	ecx, DWORD PTR _specFlags$74849[ebp]
	mov	dl, BYTE PTR [ecx+2]
	mov	BYTE PTR _openCur$74916[ebp], dl
; Line 2718
	jmp	SHORT $LN23@OpenStream
$LN22@OpenStream:
; Line 2719
	mov	eax, DWORD PTR _specFlags$74849[ebp]
	mov	cl, BYTE PTR [eax+1]
	mov	BYTE PTR _openCur$74916[ebp], cl
$LN23@OpenStream:
; Line 2721
	jmp	SHORT $LN20@OpenStream
$LN24@OpenStream:
; Line 2723
	movzx	edx, BYTE PTR _thereIsTail$74917[ebp]
	test	edx, edx
	jne	SHORT $LN19@OpenStream
; Line 2724
	mov	BYTE PTR _openCur$74916[ebp], 1
; Line 2725
	jmp	SHORT $LN18@OpenStream
$LN19@OpenStream:
; Line 2726
	mov	eax, DWORD PTR _specFlags$74849[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _openCur$74916[ebp], cl
$LN18@OpenStream:
; Line 2729
	cmp	DWORD PTR _formatIndex$[ebp], -2	; fffffffeH
	jl	SHORT $LN20@OpenStream
; Line 2730
	mov	BYTE PTR _openCur$74916[ebp], 1
$LN20@OpenStream:
; Line 2732
	cmp	DWORD PTR _formatIndex$[ebp], 0
	jge	SHORT $LN16@OpenStream
	movzx	edx, BYTE PTR _pi$74880[ebp+76]
	test	edx, edx
	je	SHORT $LN16@OpenStream
; Line 2733
	mov	BYTE PTR _openCur$74916[ebp], 0
$LN16@OpenStream:
; Line 2737
	movzx	eax, BYTE PTR _openCur$74916[ebp]
	test	eax, eax
	jne	$LN15@OpenStream
	movzx	ecx, BYTE PTR _pi$74880[ebp+76]
	test	ecx, ecx
	jne	$LN15@OpenStream
	movzx	edx, BYTE PTR _thereIsTail$74917[ebp]
	test	edx, edx
	jne	$LN15@OpenStream
	movzx	eax, BYTE PTR _pi$74880[ebp+77]
	test	eax, eax
	je	SHORT $LN14@OpenStream
	mov	ecx, DWORD PTR _pi$74880[ebp]
	or	ecx, DWORD PTR _pi$74880[ebp+4]
	jne	SHORT $LN15@OpenStream
$LN14@OpenStream:
; Line 2739
	mov	ecx, DWORD PTR _handlerSpec$[ebp]
	add	ecx, 12					; 0000000cH
	call	?IsEmpty@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QBE_NXZ ; CObjectVector<NArchive::NParser::CParseItem>::IsEmpty
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN13@OpenStream
; Line 2741
	mov	eax, DWORD PTR _specFlags$74849[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	test	ecx, ecx
	je	SHORT $LN12@OpenStream
; Line 2742
	mov	BYTE PTR _openCur$74916[ebp], 1
$LN12@OpenStream:
; Line 2743
	jmp	SHORT $LN15@OpenStream
$LN13@OpenStream:
; Line 2744
	mov	ecx, DWORD PTR _handlerSpec$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Size@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NParser::CParseItem>::Size
	cmp	eax, 1
	jne	SHORT $LN15@OpenStream
; Line 2746
	push	0
	mov	ecx, DWORD PTR _handlerSpec$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEAAUCParseItem@NParser@NArchive@@I@Z ; CObjectVector<NArchive::NParser::CParseItem>::operator[]
	movzx	edx, BYTE PTR [eax+76]
	test	edx, edx
	je	SHORT $LN15@OpenStream
; Line 2748
	mov	eax, DWORD PTR _mode$[ebp]
	movzx	ecx, BYTE PTR [eax+14]
	test	ecx, ecx
	je	SHORT $LN15@OpenStream
; Line 2749
	mov	BYTE PTR _openCur$74916[ebp], 1
$LN15@OpenStream:
; Line 2754
	movzx	edx, BYTE PTR _openCur$74916[ebp]
	test	edx, edx
	je	$LN28@OpenStream
; Line 2756
	mov	eax, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ; CMyComPtr<IInStream>::operator=
; Line 2757
	lea	edx, DWORD PTR _archive$74851[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$CMyComPtr@UIInArchive@@@@QAEPAUIInArchive@@ABV0@@Z ; CMyComPtr<IInArchive>::operator=
; Line 2758
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$74821[ebp]
	mov	DWORD PTR [eax+148], ecx
; Line 2759
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _arcStreamOffset$74859[ebp]
	mov	DWORD PTR [edx+208], eax
	mov	ecx, DWORD PTR _arcStreamOffset$74859[ebp+4]
	mov	DWORD PTR [edx+212], ecx
; Line 2760
	mov	DWORD PTR $T77799[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 26		; 0000001aH
	lea	ecx, DWORD PTR _pi$74880[ebp]
	call	??1CParseItem@NParser@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 25		; 00000019H
	lea	ecx, DWORD PTR _archive$74851[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	mov	BYTE PTR __$EHRec$[ebp+8], 23		; 00000017H
	lea	ecx, DWORD PTR _limitedStream$74743[ebp]
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 22		; 00000016H
	lea	ecx, DWORD PTR _difficultBools$74704[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 21		; 00000015H
	lea	ecx, DWORD PTR _difficultFormats$74703[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 20		; 00000014H
	lea	ecx, DWORD PTR _hashBuffer$74697[ebp]
	call	??1?$CObjArray@E@@QAE@XZ		; CObjArray<unsigned char>::~CObjArray<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
	lea	ecx, DWORD PTR _openCallback_Offset$74672[ebp]
	call	??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	lea	ecx, DWORD PTR _sig2arc$[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR _arc2sig$[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _extractCallback_To_OpenCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _handler$[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _skipFrontalFormat$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _isMainFormatArr$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extension$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _fileName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T77799[ebp]
	jmp	$LN273@OpenStream
$LN28@OpenStream:
; Line 2772
	mov	edx, DWORD PTR _index$74821[ebp]
	mov	DWORD PTR _pi$74880[ebp+104], edx
; Line 2775
	lea	eax, DWORD PTR _pi$74880[ebp]
	push	eax
	mov	ecx, DWORD PTR _handlerSpec$[ebp]
	call	?AddItem@CHandler@NParser@NArchive@@QAEXABUCParseItem@23@@Z ; NArchive::NParser::CHandler::AddItem
; Line 2776
	mov	BYTE PTR _wasOpen$74817[ebp], 1
; Line 2777
	mov	BYTE PTR __$EHRec$[ebp+8], 26		; 0000001aH
	lea	ecx, DWORD PTR _pi$74880[ebp]
	call	??1CParseItem@NParser@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 25		; 00000019H
	lea	ecx, DWORD PTR _archive$74851[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	jmp	SHORT $LN78@OpenStream
; Line 2778
	jmp	$LN79@OpenStream
$LN78@OpenStream:
; Line 2781
	movzx	ecx, BYTE PTR _wasOpen$74817[ebp]
	test	ecx, ecx
	jne	SHORT $LN6@OpenStream
; Line 2782
	mov	edx, DWORD PTR _pos$74759[ebp]
	add	edx, 1
	mov	eax, DWORD PTR _pos$74759[ebp+4]
	adc	eax, 0
	mov	DWORD PTR _pos$74759[ebp], edx
	mov	DWORD PTR _pos$74759[ebp+4], eax
$LN6@OpenStream:
; Line 2783
	movzx	ecx, BYTE PTR _nextNeedCheckStartOpen$74814[ebp]
	test	ecx, ecx
	je	SHORT $LN293@OpenStream
	movzx	edx, BYTE PTR _wasOpen$74817[ebp]
	test	edx, edx
	je	SHORT $LN293@OpenStream
	mov	DWORD PTR tv1976[ebp], 1
	jmp	SHORT $LN294@OpenStream
$LN293@OpenStream:
	mov	DWORD PTR tv1976[ebp], 0
$LN294@OpenStream:
	mov	al, BYTE PTR tv1976[ebp]
	mov	BYTE PTR _needCheckStartOpen$74755[ebp], al
; Line 2784
	jmp	$LN102@OpenStream
$LN101@OpenStream:
; Line 2800
	mov	ecx, DWORD PTR _mode$[ebp]
	movzx	edx, BYTE PTR [ecx+18]
	test	edx, edx
	je	$LN5@OpenStream
; Line 2802
	mov	ecx, DWORD PTR _handlerSpec$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Size@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NParser::CParseItem>::Size
	sub	eax, 1
	neg	eax
	sbb	eax, eax
	add	eax, 1
	mov	BYTE PTR _returnParser$74945[ebp], al
; Line 2803
	mov	eax, DWORD PTR _fileSize$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _fileSize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _handlerSpec$[ebp]
	call	?AddUnknownItem@CHandler@NParser@NArchive@@QAEX_K@Z ; NArchive::NParser::CHandler::AddUnknownItem
; Line 2804
	mov	ecx, DWORD PTR _handlerSpec$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Size@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NParser::CParseItem>::Size
	test	eax, eax
	jne	$LN4@OpenStream
; Line 2805
	mov	DWORD PTR $T77802[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 23		; 00000017H
	lea	ecx, DWORD PTR _limitedStream$74743[ebp]
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 22		; 00000016H
	lea	ecx, DWORD PTR _difficultBools$74704[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 21		; 00000015H
	lea	ecx, DWORD PTR _difficultFormats$74703[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 20		; 00000014H
	lea	ecx, DWORD PTR _hashBuffer$74697[ebp]
	call	??1?$CObjArray@E@@QAE@XZ		; CObjArray<unsigned char>::~CObjArray<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
	lea	ecx, DWORD PTR _openCallback_Offset$74672[ebp]
	call	??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	lea	ecx, DWORD PTR _sig2arc$[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR _arc2sig$[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _extractCallback_To_OpenCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _handler$[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _skipFrontalFormat$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _isMainFormatArr$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extension$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _fileName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T77802[ebp]
	jmp	$LN273@OpenStream
$LN4@OpenStream:
; Line 2806
	movzx	edx, BYTE PTR _returnParser$74945[ebp]
	test	edx, edx
	jne	SHORT $LN2@OpenStream
	mov	ecx, DWORD PTR _handlerSpec$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Size@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NParser::CParseItem>::Size
	cmp	eax, 1
	je	$LN5@OpenStream
$LN2@OpenStream:
; Line 2809
	mov	eax, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	mov	ecx, DWORD PTR _handlerSpec$[ebp]
	add	ecx, 32					; 00000020H
	call	??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ; CMyComPtr<IInStream>::operator=
; Line 2810
	lea	edx, DWORD PTR _handler$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$CMyComPtr@UIInArchive@@@@QAEPAUIInArchive@@ABV0@@Z ; CMyComPtr<IInArchive>::operator=
; Line 2811
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?ClearErrors@CArcErrorInfo@@QAEXXZ	; CArcErrorInfo::ClearErrors
; Line 2812
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+216], 1
; Line 2813
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+148], -1
; Line 2814
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+168], 0
	mov	DWORD PTR [edx+172], 0
; Line 2815
	mov	DWORD PTR $T77803[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 23		; 00000017H
	lea	ecx, DWORD PTR _limitedStream$74743[ebp]
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 22		; 00000016H
	lea	ecx, DWORD PTR _difficultBools$74704[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 21		; 00000015H
	lea	ecx, DWORD PTR _difficultFormats$74703[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 20		; 00000014H
	lea	ecx, DWORD PTR _hashBuffer$74697[ebp]
	call	??1?$CObjArray@E@@QAE@XZ		; CObjArray<unsigned char>::~CObjArray<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
	lea	ecx, DWORD PTR _openCallback_Offset$74672[ebp]
	call	??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	lea	ecx, DWORD PTR _sig2arc$[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR _arc2sig$[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _extractCallback_To_OpenCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _handler$[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _skipFrontalFormat$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _isMainFormatArr$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extension$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _fileName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T77803[ebp]
	jmp	$LN273@OpenStream
$LN5@OpenStream:
; Line 2818
	mov	BYTE PTR __$EHRec$[ebp+8], 23		; 00000017H
	lea	ecx, DWORD PTR _limitedStream$74743[ebp]
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 22		; 00000016H
	lea	ecx, DWORD PTR _difficultBools$74704[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 21		; 00000015H
	lea	ecx, DWORD PTR _difficultFormats$74703[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 20		; 00000014H
	lea	ecx, DWORD PTR _hashBuffer$74697[ebp]
	call	??1?$CObjArray@E@@QAE@XZ		; CObjArray<unsigned char>::~CObjArray<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
	lea	ecx, DWORD PTR _openCallback_Offset$74672[ebp]
	call	??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>
; Line 2822
	mov	ecx, DWORD PTR _this$[ebp]
	call	??7?$CMyComPtr@UIInArchive@@@@QBE_NXZ	; CMyComPtr<IInArchive>::operator!
	movzx	eax, al
	test	eax, eax
	je	$LN1@OpenStream
; Line 2823
	mov	DWORD PTR $T77804[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	lea	ecx, DWORD PTR _sig2arc$[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR _arc2sig$[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _extractCallback_To_OpenCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _handler$[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _skipFrontalFormat$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _isMainFormatArr$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extension$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _fileName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T77804[ebp]
	jmp	$LN273@OpenStream
$LN1@OpenStream:
; Line 2824
	mov	DWORD PTR $T77805[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	lea	ecx, DWORD PTR _sig2arc$[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR _arc2sig$[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _extractCallback_To_OpenCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _handler$[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _skipFrontalFormat$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _isMainFormatArr$[ebp]
	call	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extension$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _fileName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T77805[ebp]
$LN273@OpenStream:
; Line 2825
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN399@OpenStream
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 2120				; 00000848H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN399@OpenStream:
	DD	34					; 00000022H
	DD	$LN398@OpenStream
$LN398@OpenStream:
	DD	-36					; ffffffdcH
	DD	12					; 0000000cH
	DD	$LN363@OpenStream
	DD	-56					; ffffffc8H
	DD	12					; 0000000cH
	DD	$LN364@OpenStream
	DD	-80					; ffffffb0H
	DD	12					; 0000000cH
	DD	$LN365@OpenStream
	DD	-96					; ffffffa0H
	DD	4
	DD	$LN366@OpenStream
	DD	-156					; ffffff64H
	DD	8
	DD	$LN367@OpenStream
	DD	-176					; ffffff50H
	DD	12					; 0000000cH
	DD	$LN368@OpenStream
	DD	-196					; ffffff3cH
	DD	4
	DD	$LN369@OpenStream
	DD	-220					; ffffff24H
	DD	7
	DD	$LN370@OpenStream
	DD	-236					; ffffff14H
	DD	4
	DD	$LN371@OpenStream
	DD	-280					; fffffee8H
	DD	8
	DD	$LN372@OpenStream
	DD	-300					; fffffed4H
	DD	4
	DD	$LN373@OpenStream
	DD	-344					; fffffea8H
	DD	4
	DD	$LN374@OpenStream
	DD	-368					; fffffe90H
	DD	8
	DD	$LN375@OpenStream
	DD	-380					; fffffe84H
	DD	4
	DD	$LN376@OpenStream
	DD	-432					; fffffe50H
	DD	4
	DD	$LN377@OpenStream
	DD	-448					; fffffe40H
	DD	4
	DD	$LN378@OpenStream
	DD	-464					; fffffe30H
	DD	8
	DD	$LN379@OpenStream
	DD	-480					; fffffe20H
	DD	4
	DD	$LN380@OpenStream
	DD	-512					; fffffe00H
	DD	12					; 0000000cH
	DD	$LN381@OpenStream
	DD	-572					; fffffdc4H
	DD	4
	DD	$LN382@OpenStream
	DD	-596					; fffffdacH
	DD	8
	DD	$LN383@OpenStream
	DD	-724					; fffffd2cH
	DD	112					; 00000070H
	DD	$LN384@OpenStream
	DD	-764					; fffffd04H
	DD	12					; 0000000cH
	DD	$LN385@OpenStream
	DD	-784					; fffffcf0H
	DD	12					; 0000000cH
	DD	$LN386@OpenStream
	DD	-816					; fffffcd0H
	DD	4
	DD	$LN387@OpenStream
	DD	-844					; fffffcb4H
	DD	4
	DD	$LN388@OpenStream
	DD	-1112					; fffffba8H
	DD	256					; 00000100H
	DD	$LN389@OpenStream
	DD	-1132					; fffffb94H
	DD	12					; 0000000cH
	DD	$LN390@OpenStream
	DD	-1144					; fffffb88H
	DD	4
	DD	$LN391@OpenStream
	DD	-1204					; fffffb4cH
	DD	4
	DD	$LN392@OpenStream
	DD	-1268					; fffffb0cH
	DD	4
	DD	$LN393@OpenStream
	DD	-1416					; fffffa78H
	DD	4
	DD	$LN394@OpenStream
	DD	-1452					; fffffa54H
	DD	8
	DD	$LN395@OpenStream
	DD	-1588					; fffff9ccH
	DD	112					; 00000070H
	DD	$LN396@OpenStream
$LN396@OpenStream:
	DB	112					; 00000070H
	DB	105					; 00000069H
	DB	0
$LN395@OpenStream:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	120					; 00000078H
	DB	67					; 00000043H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	0
$LN394@OpenStream:
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	0
$LN393@OpenStream:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN392@OpenStream:
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN391@OpenStream:
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	66					; 00000042H
	DB	111					; 0000006fH
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	115					; 00000073H
	DB	0
$LN390@OpenStream:
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	70					; 00000046H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
$LN389@OpenStream:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	118					; 00000076H
	DB	115					; 00000073H
	DB	0
$LN388@OpenStream:
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	104					; 00000068H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN387@OpenStream:
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	98					; 00000062H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	79					; 0000004fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
$LN386@OpenStream:
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	50					; 00000032H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	0
$LN385@OpenStream:
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	50					; 00000032H
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	0
$LN384@OpenStream:
	DB	112					; 00000070H
	DB	105					; 00000069H
	DB	0
$LN383@OpenStream:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	76					; 0000004cH
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	0
$LN382@OpenStream:
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	0
$LN381@OpenStream:
	DB	115					; 00000073H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	70					; 00000046H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
$LN380@OpenStream:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN379@OpenStream:
	DB	98					; 00000062H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN378@OpenStream:
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	98					; 00000062H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	84					; 00000054H
	DB	111					; 0000006fH
	DB	95					; 0000005fH
	DB	79					; 0000004fH
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	98					; 00000062H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
$LN377@OpenStream:
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN376@OpenStream:
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	83					; 00000053H
	DB	101					; 00000065H
	DB	113					; 00000071H
	DB	0
$LN375@OpenStream:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	76					; 0000004cH
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	0
$LN374@OpenStream:
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	0
$LN373@OpenStream:
	DB	115					; 00000073H
	DB	107					; 0000006bH
	DB	105					; 00000069H
	DB	112					; 00000070H
	DB	70					; 00000046H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	70					; 00000046H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
$LN372@OpenStream:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN371@OpenStream:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN370@OpenStream:
	DB	107					; 0000006bH
	DB	82					; 00000052H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	72					; 00000048H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN369@OpenStream:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN368@OpenStream:
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	50					; 00000032H
	DB	0
$LN367@OpenStream:
	DB	98					; 00000062H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN366@OpenStream:
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	77					; 0000004dH
	DB	97					; 00000061H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	70					; 00000046H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	65					; 00000041H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	0
$LN365@OpenStream:
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN364@OpenStream:
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	0
$LN363@OpenStream:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	78					; 0000004eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$0:
	lea	ecx, DWORD PTR _fileName$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$1:
	lea	ecx, DWORD PTR _extension$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$2:
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	jmp	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
__unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$3:
	lea	ecx, DWORD PTR _isMainFormatArr$[ebp]
	jmp	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
__unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$4:
	lea	ecx, DWORD PTR _byteBuffer$74311[ebp]
	jmp	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
__unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$5:
	lea	ecx, DWORD PTR _orderIndices2$74312[ebp]
	jmp	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
__unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$9:
	lea	ecx, DWORD PTR _skipFrontalFormat$[ebp]
	jmp	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
__unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$10:
	lea	ecx, DWORD PTR _archive$74394[ebp]
	jmp	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
__unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$11:
	lea	ecx, DWORD PTR _openSeq$74440[ebp]
	jmp	??1?$CMyComPtr@UIArchiveOpenSeq@@@@QAE@XZ ; CMyComPtr<IArchiveOpenSeq>::~CMyComPtr<IArchiveOpenSeq>
__unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$12:
	mov	eax, DWORD PTR $T77754[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$13:
	lea	ecx, DWORD PTR _handler$[ebp]
	jmp	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
__unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$14:
	mov	eax, DWORD PTR $T77758[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$15:
	lea	ecx, DWORD PTR _extractCallback_To_OpenCallback$[ebp]
	jmp	??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>
__unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$16:
	lea	ecx, DWORD PTR _byteBuffer$74552[ebp]
	jmp	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
__unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$17:
	lea	ecx, DWORD PTR _sortedFormats$74568[ebp]
	jmp	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
__unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$18:
	lea	ecx, DWORD PTR _archive$74611[ebp]
	jmp	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
__unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$19:
	lea	ecx, DWORD PTR _pi$74628[ebp]
	jmp	??1CParseItem@NParser@NArchive@@QAE@XZ
__unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$20:
	lea	ecx, DWORD PTR _arc2sig$[ebp]
	jmp	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
__unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$21:
	lea	ecx, DWORD PTR _sig2arc$[ebp]
	jmp	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
__unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$22:
	mov	eax, DWORD PTR $T77775[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$23:
	lea	ecx, DWORD PTR _openCallback_Offset$74672[ebp]
	jmp	??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>
__unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$24:
	lea	ecx, DWORD PTR _hashBuffer$74697[ebp]
	jmp	??1?$CObjArray@E@@QAE@XZ		; CObjArray<unsigned char>::~CObjArray<unsigned char>
__unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$25:
	lea	ecx, DWORD PTR _difficultFormats$74703[ebp]
	jmp	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
__unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$26:
	lea	ecx, DWORD PTR _difficultBools$74704[ebp]
	jmp	??1?$CObjArray@_N@@QAE@XZ		; CObjArray<bool>::~CObjArray<bool>
__unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$27:
	mov	eax, DWORD PTR $T77781[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$28:
	lea	ecx, DWORD PTR _limitedStream$74743[ebp]
	jmp	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
__unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$29:
	lea	ecx, DWORD PTR _archive$74851[ebp]
	jmp	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
__unwindfunclet$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z$30:
	lea	ecx, DWORD PTR _pi$74880[ebp]
	jmp	??1CParseItem@NParser@NArchive@@QAE@XZ
__ehhandler$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-2120]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z ENDP		; CArc::OpenStream2
EXTRN	?StringsAreEqual_Ascii@@YG_NPB_WPBD@Z:PROC	; StringsAreEqual_Ascii
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsEqualTo@UString@@QBE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
?IsEqualTo@UString@@QBE_NPBD@Z PROC			; UString::IsEqualTo, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 547
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	?StringsAreEqual_Ascii@@YG_NPB_WPBD@Z	; StringsAreEqual_Ascii
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?IsEqualTo@UString@@QBE_NPBD@Z ENDP			; UString::IsEqualTo
_TEXT	ENDS
EXTRN	?ReverseFind@UString@@QBEH_W@Z:PROC		; UString::ReverseFind
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ReverseFind_Dot@UString@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ReverseFind_Dot@UString@@QBEHXZ PROC			; UString::ReverseFind_Dot, COMDAT
; _this$ = ecx
; Line 575
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	push	46					; 0000002eH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReverseFind@UString@@QBEH_W@Z		; UString::ReverseFind
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReverseFind_Dot@UString@@QBEHXZ ENDP			; UString::ReverseFind_Dot
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SetStream@CLimitedCachedInStream@@QAEXPAUIInStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_stream$ = 8						; size = 4
?SetStream@CLimitedCachedInStream@@QAEXPAUIInStream@@@Z PROC ; CLimitedCachedInStream::SetStream, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\limitedstreams.h
; Line 201
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ; CMyComPtr<IInStream>::operator=
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetStream@CLimitedCachedInStream@@QAEXPAUIInStream@@@Z ENDP ; CLimitedCachedInStream::SetStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SetCache@CLimitedCachedInStream@@QAEXII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_cacheSize$ = 8						; size = 4
_cachePos$ = 12						; size = 4
?SetCache@CLimitedCachedInStream@@QAEXII@Z PROC		; CLimitedCachedInStream::SetCache, COMDAT
; _this$ = ecx
; Line 203
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 204
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??B?$CBuffer@E@@QAEPAEXZ		; CBuffer<unsigned char>::operator unsigned char *
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+48], eax
; Line 205
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _cacheSize$[ebp]
	mov	DWORD PTR [edx+52], eax
; Line 206
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _cachePos$[ebp]
	mov	DWORD PTR [ecx+56], edx
; Line 207
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?SetCache@CLimitedCachedInStream@@QAEXII@Z ENDP		; CLimitedCachedInStream::SetCache
_TEXT	ENDS
PUBLIC	?SeekToPhys@CLimitedCachedInStream@@AAEJXZ	; CLimitedCachedInStream::SeekToPhys
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?InitAndSeek@CLimitedCachedInStream@@QAEJ_K0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_startOffset$ = 8					; size = 8
_size$ = 16						; size = 8
?InitAndSeek@CLimitedCachedInStream@@QAEJ_K0@Z PROC	; CLimitedCachedInStream::InitAndSeek, COMDAT
; _this$ = ecx
; Line 210
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 211
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _startOffset$[ebp]
	mov	DWORD PTR [eax+40], ecx
	mov	edx, DWORD PTR _startOffset$[ebp+4]
	mov	DWORD PTR [eax+44], edx
; Line 212
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _startOffset$[ebp]
	mov	DWORD PTR [eax+24], ecx
	mov	edx, DWORD PTR _startOffset$[ebp+4]
	mov	DWORD PTR [eax+28], edx
; Line 213
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0
	mov	DWORD PTR [eax+20], 0
; Line 214
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx+32], edx
	mov	eax, DWORD PTR _size$[ebp+4]
	mov	DWORD PTR [ecx+36], eax
; Line 215
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SeekToPhys@CLimitedCachedInStream@@AAEJXZ ; CLimitedCachedInStream::SeekToPhys
; Line 216
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?InitAndSeek@CLimitedCachedInStream@@QAEJ_K0@Z ENDP	; CLimitedCachedInStream::InitAndSeek
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SeekToPhys@CLimitedCachedInStream@@AAEJXZ
_TEXT	SEGMENT
tv68 = -8						; size = 4
_this$ = -4						; size = 4
?SeekToPhys@CLimitedCachedInStream@@AAEJXZ PROC		; CLimitedCachedInStream::SeekToPhys, COMDAT
; _this$ = ecx
; Line 197
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->
	mov	DWORD PTR tv68[ebp], eax
	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR [eax+24]
	push	edx
	mov	eax, DWORD PTR tv68[ebp]
	push	eax
	mov	ecx, DWORD PTR tv68[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?SeekToPhys@CLimitedCachedInStream@@AAEJXZ ENDP		; CLimitedCachedInStream::SeekToPhys
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Flags_FindSignature@CArcInfoEx@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Flags_FindSignature@CArcInfoEx@@QBE_NXZ PROC		; CArcInfoEx::Flags_FindSignature, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\loadcodecs.h
; Line 123
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	and	eax, 8
	neg	eax
	sbb	eax, eax
	neg	eax
	mov	esp, ebp
	pop	ebp
	ret	0
?Flags_FindSignature@CArcInfoEx@@QBE_NXZ ENDP		; CArcInfoEx::Flags_FindSignature
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Flags_UseGlobalOffset@CArcInfoEx@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Flags_UseGlobalOffset@CArcInfoEx@@QBE_NXZ PROC		; CArcInfoEx::Flags_UseGlobalOffset, COMDAT
; _this$ = ecx
; Line 130
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	and	eax, 32					; 00000020H
	neg	eax
	sbb	eax, eax
	neg	eax
	mov	esp, ebp
	pop	ebp
	ret	0
?Flags_UseGlobalOffset@CArcInfoEx@@QBE_NXZ ENDP		; CArcInfoEx::Flags_UseGlobalOffset
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Flags_StartOpen@CArcInfoEx@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Flags_StartOpen@CArcInfoEx@@QBE_NXZ PROC		; CArcInfoEx::Flags_StartOpen, COMDAT
; _this$ = ecx
; Line 131
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	and	eax, 64					; 00000040H
	neg	eax
	sbb	eax, eax
	neg	eax
	mov	esp, ebp
	pop	ebp
	ret	0
?Flags_StartOpen@CArcInfoEx@@QBE_NXZ ENDP		; CArcInfoEx::Flags_StartOpen
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Flags_BackwardOpen@CArcInfoEx@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Flags_BackwardOpen@CArcInfoEx@@QBE_NXZ PROC		; CArcInfoEx::Flags_BackwardOpen, COMDAT
; _this$ = ecx
; Line 132
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	and	eax, 256				; 00000100H
	neg	eax
	sbb	eax, eax
	neg	eax
	mov	esp, ebp
	pop	ebp
	ret	0
?Flags_BackwardOpen@CArcInfoEx@@QBE_NXZ ENDP		; CArcInfoEx::Flags_BackwardOpen
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Flags_PureStartOpen@CArcInfoEx@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Flags_PureStartOpen@CArcInfoEx@@QBE_NXZ PROC		; CArcInfoEx::Flags_PureStartOpen, COMDAT
; _this$ = ecx
; Line 134
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	and	eax, 128				; 00000080H
	neg	eax
	sbb	eax, eax
	neg	eax
	mov	esp, ebp
	pop	ebp
	ret	0
?Flags_PureStartOpen@CArcInfoEx@@QBE_NXZ ENDP		; CArcInfoEx::Flags_PureStartOpen
_TEXT	ENDS
PUBLIC	??_C@_05EAFAMACM@Split?$AA@			; `string'
EXTRN	?StringsAreEqualNoCase_Ascii@@YG_NPB_WPBD@Z:PROC ; StringsAreEqualNoCase_Ascii
;	COMDAT ??_C@_05EAFAMACM@Split?$AA@
CONST	SEGMENT
??_C@_05EAFAMACM@Split?$AA@ DB 'Split', 00H		; `string'
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ?IsSplit@CArcInfoEx@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsSplit@CArcInfoEx@@QBE_NXZ PROC			; CArcInfoEx::IsSplit, COMDAT
; _this$ = ecx
; Line 160
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??_C@_05EAFAMACM@Split?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	?StringsAreEqualNoCase_Ascii@@YG_NPB_WPBD@Z ; StringsAreEqualNoCase_Ascii
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSplit@CArcInfoEx@@QBE_NXZ ENDP			; CArcInfoEx::IsSplit
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?CanReturn_NonStart@COpenSpecFlags@@QBE_NXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
?CanReturn_NonStart@COpenSpecFlags@@QBE_NXZ PROC	; COpenSpecFlags::CanReturn_NonStart, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\openarchive.h
; Line 50
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	test	ecx, ecx
	jne	SHORT $LN3@CanReturn_
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+2]
	test	eax, eax
	jne	SHORT $LN3@CanReturn_
	mov	DWORD PTR tv70[ebp], 0
	jmp	SHORT $LN4@CanReturn_
$LN3@CanReturn_:
	mov	DWORD PTR tv70[ebp], 1
$LN4@CanReturn_:
	mov	al, BYTE PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?CanReturn_NonStart@COpenSpecFlags@@QBE_NXZ ENDP	; COpenSpecFlags::CanReturn_NonStart
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetSpec@COpenType@@QBEABUCOpenSpecFlags@@_N00@Z
_TEXT	SEGMENT
tv70 = -28						; size = 4
tv73 = -24						; size = 4
tv76 = -20						; size = 4
$T77945 = -16						; size = 4
$T77944 = -12						; size = 4
$T77943 = -8						; size = 4
_this$ = -4						; size = 4
_isForced$ = 8						; size = 1
_isMain$ = 12						; size = 1
_isUnknown$ = 16					; size = 1
?GetSpec@COpenType@@QBEABUCOpenSpecFlags@@_N00@Z PROC	; COpenType::GetSpec, COMDAT
; _this$ = ecx
; Line 84
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 85
	movzx	eax, BYTE PTR _isForced$[ebp]
	test	eax, eax
	je	SHORT $LN7@GetSpec
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	mov	DWORD PTR tv76[ebp], ecx
	jmp	SHORT $LN8@GetSpec
$LN7@GetSpec:
	movzx	edx, BYTE PTR _isMain$[ebp]
	test	edx, edx
	je	SHORT $LN5@GetSpec
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 7
	mov	DWORD PTR tv73[ebp], eax
	jmp	SHORT $LN6@GetSpec
$LN5@GetSpec:
	movzx	ecx, BYTE PTR _isUnknown$[ebp]
	test	ecx, ecx
	je	SHORT $LN3@GetSpec
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 13					; 0000000dH
	mov	DWORD PTR tv70[ebp], edx
	jmp	SHORT $LN4@GetSpec
$LN3@GetSpec:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 10					; 0000000aH
	mov	DWORD PTR tv70[ebp], eax
$LN4@GetSpec:
	mov	ecx, DWORD PTR tv70[ebp]
	mov	DWORD PTR $T77945[ebp], ecx
	mov	edx, DWORD PTR $T77945[ebp]
	mov	DWORD PTR tv73[ebp], edx
$LN6@GetSpec:
	mov	eax, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T77944[ebp], eax
	mov	ecx, DWORD PTR $T77944[ebp]
	mov	DWORD PTR tv76[ebp], ecx
$LN8@GetSpec:
	mov	edx, DWORD PTR tv76[ebp]
	mov	DWORD PTR $T77943[ebp], edx
	mov	eax, DWORD PTR $T77943[ebp]
; Line 86
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?GetSpec@COpenType@@QBEABUCOpenSpecFlags@@_N00@Z ENDP	; COpenType::GetSpec
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?NormalizeOffset@CParseItem@NParser@NArchive@@QAEXXZ
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
?NormalizeOffset@CParseItem@NParser@NArchive@@QAEXXZ PROC ; NArchive::NParser::CParseItem::NormalizeOffset, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\openarchive.cpp
; Line 162
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 163
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	mov	ecx, DWORD PTR tv69[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jg	SHORT $LN2@NormalizeO
	jl	SHORT $LN4@NormalizeO
	mov	edx, DWORD PTR tv69[ebp]
	cmp	DWORD PTR [edx], 0
	jae	SHORT $LN2@NormalizeO
$LN4@NormalizeO:
; Line 165
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	add	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+12]
	adc	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+12], eax
; Line 167
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0
$LN2@NormalizeO:
; Line 169
	mov	esp, ebp
	pop	ebp
	ret	0
?NormalizeOffset@CParseItem@NParser@NArchive@@QAEXXZ ENDP ; NArchive::NParser::CParseItem::NormalizeOffset
_TEXT	ENDS
PUBLIC	??1?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NParser::CParseItem>::~CObjectVector<NArchive::NParser::CParseItem>
PUBLIC	??0?$CMyComPtr@UIInStream@@@@QAE@XZ		; CMyComPtr<IInStream>::CMyComPtr<IInStream>
PUBLIC	??0?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NParser::CParseItem>::CObjectVector<NArchive::NParser::CParseItem>
PUBLIC	??_7CHandler@NParser@NArchive@@6BIInArchiveGetStream@@@ ; NArchive::NParser::CHandler::`vftable'
PUBLIC	??_7CHandler@NParser@NArchive@@6BIInArchive@@@	; NArchive::NParser::CHandler::`vftable'
PUBLIC	??0IInArchiveGetStream@@QAE@XZ			; IInArchiveGetStream::IInArchiveGetStream
PUBLIC	??0IInArchive@@QAE@XZ				; IInArchive::IInArchive
PUBLIC	??_R4CHandler@NParser@NArchive@@6BIInArchive@@@	; NArchive::NParser::CHandler::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCHandler@NParser@NArchive@@@8		; NArchive::NParser::CHandler `RTTI Type Descriptor'
PUBLIC	??_R3CHandler@NParser@NArchive@@8		; NArchive::NParser::CHandler::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CHandler@NParser@NArchive@@8		; NArchive::NParser::CHandler::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CHandler@NParser@NArchive@@8	; NArchive::NParser::CHandler::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@IInArchive@@8			; IInArchive::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIInArchive@@@8				; IInArchive `RTTI Type Descriptor'
PUBLIC	??_R3IInArchive@@8				; IInArchive::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IInArchive@@8				; IInArchive::`RTTI Base Class Array'
PUBLIC	??_R13?0A@EA@IInArchiveGetStream@@8		; IInArchiveGetStream::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AUIInArchiveGetStream@@@8			; IInArchiveGetStream `RTTI Type Descriptor'
PUBLIC	??_R3IInArchiveGetStream@@8			; IInArchiveGetStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IInArchiveGetStream@@8			; IInArchiveGetStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IInArchiveGetStream@@8		; IInArchiveGetStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R17?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	?QueryInterface@CHandler@NParser@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::NParser::CHandler::QueryInterface
PUBLIC	?AddRef@CHandler@NParser@NArchive@@UAGKXZ	; NArchive::NParser::CHandler::AddRef
PUBLIC	?Release@CHandler@NParser@NArchive@@UAGKXZ	; NArchive::NParser::CHandler::Release
PUBLIC	??_R4CHandler@NParser@NArchive@@6BIInArchiveGetStream@@@ ; NArchive::NParser::CHandler::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@CHandler@NParser@NArchive@@W3AGJABU_GUID@@PAPAX@Z ; [thunk]:NArchive::NParser::CHandler::QueryInterface`adjustor{4}'
PUBLIC	?AddRef@CHandler@NParser@NArchive@@W3AGKXZ	; [thunk]:NArchive::NParser::CHandler::AddRef`adjustor{4}'
PUBLIC	?Release@CHandler@NParser@NArchive@@W3AGKXZ	; [thunk]:NArchive::NParser::CHandler::Release`adjustor{4}'
;	COMDAT ??_R4CHandler@NParser@NArchive@@6BIInArchiveGetStream@@@
rdata$r	SEGMENT
??_R4CHandler@NParser@NArchive@@6BIInArchiveGetStream@@@ DD 00H ; NArchive::NParser::CHandler::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVCHandler@NParser@NArchive@@@8
	DD	FLAT:??_R3CHandler@NParser@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R17?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R17?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@IInArchiveGetStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IInArchiveGetStream@@8 DD FLAT:??_R0?AUIInArchiveGetStream@@@8 ; IInArchiveGetStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IInArchiveGetStream@@8
rdata$r	ENDS
;	COMDAT ??_R2IInArchiveGetStream@@8
rdata$r	SEGMENT
??_R2IInArchiveGetStream@@8 DD FLAT:??_R1A@?0A@EA@IInArchiveGetStream@@8 ; IInArchiveGetStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3IInArchiveGetStream@@8
rdata$r	SEGMENT
??_R3IInArchiveGetStream@@8 DD 00H			; IInArchiveGetStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2IInArchiveGetStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIInArchiveGetStream@@@8
_DATA	SEGMENT
??_R0?AUIInArchiveGetStream@@@8 DD FLAT:??_7type_info@@6B@ ; IInArchiveGetStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIInArchiveGetStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@IInArchiveGetStream@@8
rdata$r	SEGMENT
??_R13?0A@EA@IInArchiveGetStream@@8 DD FLAT:??_R0?AUIInArchiveGetStream@@@8 ; IInArchiveGetStream::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	01H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IInArchiveGetStream@@8
rdata$r	ENDS
;	COMDAT ??_R2IInArchive@@8
rdata$r	SEGMENT
??_R2IInArchive@@8 DD FLAT:??_R1A@?0A@EA@IInArchive@@8	; IInArchive::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3IInArchive@@8
rdata$r	SEGMENT
??_R3IInArchive@@8 DD 00H				; IInArchive::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2IInArchive@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIInArchive@@@8
_DATA	SEGMENT
??_R0?AUIInArchive@@@8 DD FLAT:??_7type_info@@6B@	; IInArchive `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIInArchive@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IInArchive@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IInArchive@@8 DD FLAT:??_R0?AUIInArchive@@@8 ; IInArchive::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IInArchive@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CHandler@NParser@NArchive@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CHandler@NParser@NArchive@@8 DD FLAT:??_R0?AVCHandler@NParser@NArchive@@@8 ; NArchive::NParser::CHandler::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	05H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CHandler@NParser@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R2CHandler@NParser@NArchive@@8
rdata$r	SEGMENT
??_R2CHandler@NParser@NArchive@@8 DD FLAT:??_R1A@?0A@EA@CHandler@NParser@NArchive@@8 ; NArchive::NParser::CHandler::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IInArchive@@8
	DD	FLAT:??_R1A@?0A@EC@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@IInArchiveGetStream@@8
	DD	FLAT:??_R13?0A@EC@IUnknown@@8
	DD	FLAT:??_R17?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CHandler@NParser@NArchive@@8
rdata$r	SEGMENT
??_R3CHandler@NParser@NArchive@@8 DD 00H		; NArchive::NParser::CHandler::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	06H
	DD	FLAT:??_R2CHandler@NParser@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCHandler@NParser@NArchive@@@8
_DATA	SEGMENT
??_R0?AVCHandler@NParser@NArchive@@@8 DD FLAT:??_7type_info@@6B@ ; NArchive::NParser::CHandler `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCHandler@NParser@NArchive@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CHandler@NParser@NArchive@@6BIInArchive@@@
rdata$r	SEGMENT
??_R4CHandler@NParser@NArchive@@6BIInArchive@@@ DD 00H	; NArchive::NParser::CHandler::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCHandler@NParser@NArchive@@@8
	DD	FLAT:??_R3CHandler@NParser@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_7CHandler@NParser@NArchive@@6BIInArchiveGetStream@@@
CONST	SEGMENT
??_7CHandler@NParser@NArchive@@6BIInArchiveGetStream@@@ DD FLAT:??_R4CHandler@NParser@NArchive@@6BIInArchiveGetStream@@@ ; NArchive::NParser::CHandler::`vftable'
	DD	FLAT:?QueryInterface@CHandler@NParser@NArchive@@W3AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CHandler@NParser@NArchive@@W3AGKXZ
	DD	FLAT:?Release@CHandler@NParser@NArchive@@W3AGKXZ
	DD	FLAT:?GetStream@CHandler@NParser@NArchive@@UAGJIPAPAUISequentialInStream@@@Z
CONST	ENDS
;	COMDAT ??_7CHandler@NParser@NArchive@@6BIInArchive@@@
CONST	SEGMENT
??_7CHandler@NParser@NArchive@@6BIInArchive@@@ DD FLAT:??_R4CHandler@NParser@NArchive@@6BIInArchive@@@ ; NArchive::NParser::CHandler::`vftable'
	DD	FLAT:?QueryInterface@CHandler@NParser@NArchive@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CHandler@NParser@NArchive@@UAGKXZ
	DD	FLAT:?Release@CHandler@NParser@NArchive@@UAGKXZ
	DD	FLAT:?Open@CHandler@NParser@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
	DD	FLAT:?Close@CHandler@NParser@NArchive@@UAGJXZ
	DD	FLAT:?GetNumberOfItems@CHandler@NParser@NArchive@@UAGJPAI@Z
	DD	FLAT:?GetProperty@CHandler@NParser@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
	DD	FLAT:?Extract@CHandler@NParser@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
	DD	FLAT:?GetArchiveProperty@CHandler@NParser@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z
	DD	FLAT:?GetNumberOfProperties@CHandler@NParser@NArchive@@UAGJPAI@Z
	DD	FLAT:?GetPropertyInfo@CHandler@NParser@NArchive@@UAGJIPAPA_WPAKPAG@Z
	DD	FLAT:?GetNumberOfArchiveProperties@CHandler@NParser@NArchive@@UAGJPAI@Z
	DD	FLAT:?GetArchivePropertyInfo@CHandler@NParser@NArchive@@UAGJIPAPA_WPAKPAG@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CHandler@NParser@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CHandler@NParser@NArchive@@QAE@XZ$0
__ehfuncinfo$??0CHandler@NParser@NArchive@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CHandler@NParser@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CHandler@NParser@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CHandler@NParser@NArchive@@QAE@XZ PROC		; NArchive::NParser::CHandler::CHandler, COMDAT
; _this$ = ecx
; Line 201
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CHandler@NParser@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IInArchive@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0IInArchiveGetStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CHandler@NParser@NArchive@@6BIInArchive@@@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], OFFSET ??_7CHandler@NParser@NArchive@@6BIInArchiveGetStream@@@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NParser::CParseItem>::CObjectVector<NArchive::NParser::CParseItem>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??0?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::CMyComPtr<IInStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CHandler@NParser@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NParser::CParseItem>::~CObjectVector<NArchive::NParser::CParseItem>
__ehhandler$??0CHandler@NParser@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CHandler@NParser@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CHandler@NParser@NArchive@@QAE@XZ ENDP		; NArchive::NParser::CHandler::CHandler
EXTRN	_IID_IInArchiveGetStream:BYTE
EXTRN	_IID_IInArchive:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@CHandler@NParser@NArchive@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
tv92 = -4						; size = 4
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CHandler@NParser@NArchive@@UAGJABU_GUID@@PAPAX@Z PROC ; NArchive::NParser::CHandler::QueryInterface, COMDAT
; Line 184
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN6@QueryInter@4
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN5@QueryInter@4
$LN6@QueryInter@4:
	push	OFFSET _IID_IInArchive
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@QueryInter@4
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN5@QueryInter@4
$LN4@QueryInter@4:
	push	OFFSET _IID_IInArchiveGetStream
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@4
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN9@QueryInter@4
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	mov	DWORD PTR tv92[ebp], edx
	jmp	SHORT $LN10@QueryInter@4
$LN9@QueryInter@4:
	mov	DWORD PTR tv92[ebp], 0
$LN10@QueryInter@4:
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	ecx, DWORD PTR tv92[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN5@QueryInter@4
$LN2@QueryInter@4:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN7@QueryInter@4
$LN5@QueryInter@4:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax
	xor	eax, eax
$LN7@QueryInter@4:
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CHandler@NParser@NArchive@@UAGJABU_GUID@@PAPAX@Z ENDP ; NArchive::NParser::CHandler::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CHandler@NParser@NArchive@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CHandler@NParser@NArchive@@UAGKXZ PROC		; NArchive::NParser::CHandler::AddRef, COMDAT
; Line 184
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CHandler@NParser@NArchive@@UAGKXZ ENDP		; NArchive::NParser::CHandler::AddRef
_TEXT	ENDS
PUBLIC	??_GCHandler@NParser@NArchive@@QAEPAXI@Z	; NArchive::NParser::CHandler::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CHandler@NParser@NArchive@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T77974 = -8						; size = 4
$T77973 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CHandler@NParser@NArchive@@UAGKXZ PROC		; NArchive::NParser::CHandler::Release, COMDAT
; Line 184
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+8], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	jmp	SHORT $LN2@Release@4
$LN1@Release@4:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T77974[ebp], edx
	mov	eax, DWORD PTR $T77974[ebp]
	mov	DWORD PTR $T77973[ebp], eax
	cmp	DWORD PTR $T77973[ebp], 0
	je	SHORT $LN4@Release@4
	push	1
	mov	ecx, DWORD PTR $T77973[ebp]
	call	??_GCHandler@NParser@NArchive@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release@4
$LN4@Release@4:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release@4:
	xor	eax, eax
$LN2@Release@4:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CHandler@NParser@NArchive@@UAGKXZ ENDP		; NArchive::NParser::CHandler::Release
_TEXT	ENDS
PUBLIC	??1CHandler@NParser@NArchive@@QAE@XZ		; NArchive::NParser::CHandler::~CHandler
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCHandler@NParser@NArchive@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCHandler@NParser@NArchive@@QAEPAXI@Z PROC		; NArchive::NParser::CHandler::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CHandler@NParser@NArchive@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@4:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCHandler@NParser@NArchive@@QAEPAXI@Z ENDP		; NArchive::NParser::CHandler::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_7IInArchive@@6B@				; IInArchive::`vftable'
PUBLIC	??_R4IInArchive@@6B@				; IInArchive::`RTTI Complete Object Locator'
;	COMDAT ??_R4IInArchive@@6B@
rdata$r	SEGMENT
??_R4IInArchive@@6B@ DD 00H				; IInArchive::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIInArchive@@@8
	DD	FLAT:??_R3IInArchive@@8
rdata$r	ENDS
;	COMDAT ??_7IInArchive@@6B@
CONST	SEGMENT
??_7IInArchive@@6B@ DD FLAT:??_R4IInArchive@@6B@	; IInArchive::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0IInArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IInArchive@@QAE@XZ PROC				; IInArchive::IInArchive, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7IInArchive@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0IInArchive@@QAE@XZ ENDP				; IInArchive::IInArchive
_TEXT	ENDS
PUBLIC	??_7IInArchiveGetStream@@6B@			; IInArchiveGetStream::`vftable'
PUBLIC	??_R4IInArchiveGetStream@@6B@			; IInArchiveGetStream::`RTTI Complete Object Locator'
;	COMDAT ??_R4IInArchiveGetStream@@6B@
rdata$r	SEGMENT
??_R4IInArchiveGetStream@@6B@ DD 00H			; IInArchiveGetStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIInArchiveGetStream@@@8
	DD	FLAT:??_R3IInArchiveGetStream@@8
rdata$r	ENDS
;	COMDAT ??_7IInArchiveGetStream@@6B@
CONST	SEGMENT
??_7IInArchiveGetStream@@6B@ DD FLAT:??_R4IInArchiveGetStream@@6B@ ; IInArchiveGetStream::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0IInArchiveGetStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IInArchiveGetStream@@QAE@XZ PROC			; IInArchiveGetStream::IInArchiveGetStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7IInArchiveGetStream@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0IInArchiveGetStream@@QAE@XZ ENDP			; IInArchiveGetStream::IInArchiveGetStream
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CHandler@NParser@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CHandler@NParser@NArchive@@QAE@XZ$0
__ehfuncinfo$??1CHandler@NParser@NArchive@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CHandler@NParser@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CHandler@NParser@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CHandler@NParser@NArchive@@QAE@XZ PROC		; NArchive::NParser::CHandler::~CHandler, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CHandler@NParser@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NParser::CParseItem>::~CObjectVector<NArchive::NParser::CParseItem>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CHandler@NParser@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NParser::CParseItem>::~CObjectVector<NArchive::NParser::CParseItem>
__ehhandler$??1CHandler@NParser@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CHandler@NParser@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CHandler@NParser@NArchive@@QAE@XZ ENDP		; NArchive::NParser::CHandler::~CHandler
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$73549 = -4						; size = 4
_p1$ = 8						; size = 4
_p2$ = 12						; size = 4
_size$ = 16						; size = 4
?TestSignature@@YG_NPBE0I@Z PROC			; TestSignature
; Line 979
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 980
	mov	DWORD PTR _i$73549[ebp], 0
	jmp	SHORT $LN4@TestSignat
$LN3@TestSignat:
	mov	eax, DWORD PTR _i$73549[ebp]
	add	eax, 1
	mov	DWORD PTR _i$73549[ebp], eax
$LN4@TestSignat:
	mov	ecx, DWORD PTR _i$73549[ebp]
	cmp	ecx, DWORD PTR _size$[ebp]
	jae	SHORT $LN2@TestSignat
; Line 981
	mov	edx, DWORD PTR _p1$[ebp]
	add	edx, DWORD PTR _i$73549[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _p2$[ebp]
	add	ecx, DWORD PTR _i$73549[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	eax, edx
	je	SHORT $LN1@TestSignat
; Line 982
	xor	al, al
	jmp	SHORT $LN5@TestSignat
$LN1@TestSignat:
; Line 983
	jmp	SHORT $LN3@TestSignat
$LN2@TestSignat:
	mov	al, 1
$LN5@TestSignat:
; Line 984
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?TestSignature@@YG_NPBE0I@Z ENDP			; TestSignature
; Function compile flags: /Odtp /RTCsu
_sig$73671 = -24					; size = 4
_k$73667 = -20						; size = 4
_sigs$73666 = -16					; size = 4
_ai$73663 = -12						; size = 4
_index$73566 = -8					; size = 4
_i$73562 = -4						; size = 4
_codecs$ = 8						; size = 4
_orderIndices$ = 12					; size = 4
_numTypes$ = 16						; size = 4
_orderIndices2$ = 20					; size = 4
_data$ = 24						; size = 4
_dataSize$ = 28						; size = 4
?MakeCheckOrder@@YGXPAVCCodecs@@AAV?$CRecordVector@H@@I1PBEI@Z PROC ; MakeCheckOrder
; Line 989
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 990
	mov	DWORD PTR _i$73562[ebp], 0
	jmp	SHORT $LN11@MakeCheckO
$LN10@MakeCheckO:
	mov	eax, DWORD PTR _i$73562[ebp]
	add	eax, 1
	mov	DWORD PTR _i$73562[ebp], eax
$LN11@MakeCheckO:
	mov	ecx, DWORD PTR _i$73562[ebp]
	cmp	ecx, DWORD PTR _numTypes$[ebp]
	jae	$LN12@MakeCheckO
; Line 992
	mov	edx, DWORD PTR _i$73562[ebp]
	push	edx
	mov	ecx, DWORD PTR _orderIndices$[ebp]
	call	??A?$CRecordVector@H@@QAEAAHI@Z		; CRecordVector<int>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _index$73566[ebp], eax
; Line 993
	cmp	DWORD PTR _index$73566[ebp], 0
	jge	SHORT $LN8@MakeCheckO
; Line 994
	jmp	SHORT $LN10@MakeCheckO
$LN8@MakeCheckO:
; Line 995
	mov	ecx, DWORD PTR _index$73566[ebp]
	push	ecx
	mov	ecx, DWORD PTR _codecs$[ebp]
	add	ecx, 8
	call	??A?$CObjectVector@UCArcInfoEx@@@@QAEAAUCArcInfoEx@@I@Z ; CObjectVector<CArcInfoEx>::operator[]
	mov	DWORD PTR _ai$73663[ebp], eax
; Line 996
	mov	edx, DWORD PTR _ai$73663[ebp]
	cmp	DWORD PTR [edx+44], 0
	je	SHORT $LN7@MakeCheckO
; Line 998
	mov	eax, DWORD PTR _index$73566[ebp]
	push	eax
	mov	ecx, DWORD PTR _orderIndices2$[ebp]
	call	?Add@?$CRecordVector@H@@QAEIH@Z		; CRecordVector<int>::Add
; Line 999
	mov	ecx, DWORD PTR _i$73562[ebp]
	push	ecx
	mov	ecx, DWORD PTR _orderIndices$[ebp]
	call	??A?$CRecordVector@H@@QAEAAHI@Z		; CRecordVector<int>::operator[]
	mov	DWORD PTR [eax], -1
; Line 1000
	jmp	SHORT $LN10@MakeCheckO
$LN7@MakeCheckO:
; Line 1003
	mov	edx, DWORD PTR _ai$73663[ebp]
	add	edx, 48					; 00000030H
	mov	DWORD PTR _sigs$73666[ebp], edx
; Line 1004
	mov	DWORD PTR _k$73667[ebp], 0
	jmp	SHORT $LN6@MakeCheckO
$LN5@MakeCheckO:
	mov	eax, DWORD PTR _k$73667[ebp]
	add	eax, 1
	mov	DWORD PTR _k$73667[ebp], eax
$LN6@MakeCheckO:
	mov	ecx, DWORD PTR _sigs$73666[ebp]
	call	?Size@?$CObjectVector@V?$CBuffer@E@@@@QBEIXZ ; CObjectVector<CBuffer<unsigned char> >::Size
	cmp	DWORD PTR _k$73667[ebp], eax
	jae	$LN4@MakeCheckO
; Line 1006
	mov	ecx, DWORD PTR _k$73667[ebp]
	push	ecx
	mov	ecx, DWORD PTR _sigs$73666[ebp]
	call	??A?$CObjectVector@V?$CBuffer@E@@@@QBEABV?$CBuffer@E@@I@Z ; CObjectVector<CBuffer<unsigned char> >::operator[]
	mov	DWORD PTR _sig$73671[ebp], eax
; Line 1009
	mov	ecx, DWORD PTR _sig$73671[ebp]
	call	?Size@?$CBuffer@E@@QBEIXZ		; CBuffer<unsigned char>::Size
	test	eax, eax
	jne	SHORT $LN1@MakeCheckO
	cmp	DWORD PTR _dataSize$[ebp], 0
	je	SHORT $LN2@MakeCheckO
$LN1@MakeCheckO:
	mov	ecx, DWORD PTR _sig$73671[ebp]
	call	?Size@?$CBuffer@E@@QBEIXZ		; CBuffer<unsigned char>::Size
	test	eax, eax
	je	SHORT $LN3@MakeCheckO
	mov	ecx, DWORD PTR _sig$73671[ebp]
	call	?Size@?$CBuffer@E@@QBEIXZ		; CBuffer<unsigned char>::Size
	cmp	eax, DWORD PTR _dataSize$[ebp]
	ja	SHORT $LN3@MakeCheckO
	mov	ecx, DWORD PTR _sig$73671[ebp]
	call	?Size@?$CBuffer@E@@QBEIXZ		; CBuffer<unsigned char>::Size
	push	eax
	mov	ecx, DWORD PTR _sig$73671[ebp]
	call	??B?$CBuffer@E@@QBEPBEXZ		; CBuffer<unsigned char>::operator unsigned char const *
	push	eax
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	call	?TestSignature@@YG_NPBE0I@Z		; TestSignature
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@MakeCheckO
$LN2@MakeCheckO:
; Line 1011
	mov	ecx, DWORD PTR _index$73566[ebp]
	push	ecx
	mov	ecx, DWORD PTR _orderIndices2$[ebp]
	call	?Add@?$CRecordVector@H@@QAEIH@Z		; CRecordVector<int>::Add
; Line 1012
	mov	edx, DWORD PTR _i$73562[ebp]
	push	edx
	mov	ecx, DWORD PTR _orderIndices$[ebp]
	call	??A?$CRecordVector@H@@QAEAAHI@Z		; CRecordVector<int>::operator[]
	mov	DWORD PTR [eax], -1
; Line 1013
	jmp	SHORT $LN4@MakeCheckO
$LN3@MakeCheckO:
; Line 1015
	jmp	$LN5@MakeCheckO
$LN4@MakeCheckO:
; Line 1016
	jmp	$LN10@MakeCheckO
$LN12@MakeCheckO:
; Line 1017
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?MakeCheckOrder@@YGXPAVCCodecs@@AAV?$CRecordVector@H@@I1PBEI@Z ENDP ; MakeCheckOrder
_TEXT	ENDS
PUBLIC	?IsEqualTo_Ascii_NoCase@UString@@QBE_NPBD@Z	; UString::IsEqualTo_Ascii_NoCase
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ext$ = 8						; size = 4
?IsExeExt@@YG_NABVUString@@@Z PROC			; IsExeExt
; Line 1033
	push	ebp
	mov	ebp, esp
; Line 1034
	push	OFFSET $SG73679
	mov	ecx, DWORD PTR _ext$[ebp]
	call	?IsEqualTo_Ascii_NoCase@UString@@QBE_NPBD@Z ; UString::IsEqualTo_Ascii_NoCase
; Line 1035
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
?IsExeExt@@YG_NABVUString@@@Z ENDP			; IsExeExt
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsEqualTo_Ascii_NoCase@UString@@QBE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
?IsEqualTo_Ascii_NoCase@UString@@QBE_NPBD@Z PROC	; UString::IsEqualTo_Ascii_NoCase, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 549
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	?StringsAreEqualNoCase_Ascii@@YG_NPB_WPBD@Z ; StringsAreEqualNoCase_Ascii
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?IsEqualTo_Ascii_NoCase@UString@@QBE_NPBD@Z ENDP	; UString::IsEqualTo_Ascii_NoCase
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
_TEXT	SEGMENT
_ai$ = 8						; size = 4
?IsPreArcFormat@@YG_NABUCArcInfoEx@@@Z PROC		; IsPreArcFormat
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\openarchive.cpp
; Line 1056
	push	ebp
	mov	ebp, esp
; Line 1057
	mov	ecx, DWORD PTR _ai$[ebp]
	call	?Flags_PreArc@CArcInfoEx@@QBE_NXZ	; CArcInfoEx::Flags_PreArc
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@IsPreArcFo
; Line 1058
	mov	al, 1
	jmp	SHORT $LN2@IsPreArcFo
$LN1@IsPreArcFo:
; Line 1059
	push	5
	push	OFFSET _k_PreArcFormats
	mov	ecx, DWORD PTR _ai$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	call	?IsNameFromList@@YG_NABVUString@@QBQBDI@Z ; IsNameFromList
$LN2@IsPreArcFo:
; Line 1060
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
?IsPreArcFormat@@YG_NABUCArcInfoEx@@@Z ENDP		; IsPreArcFormat
; Function compile flags: /Odtp /RTCsu
_i$73691 = -4						; size = 4
_s$ = 8							; size = 4
_names$ = 12						; size = 4
_num$ = 16						; size = 4
?IsNameFromList@@YG_NABVUString@@QBQBDI@Z PROC		; IsNameFromList
; Line 1047
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1048
	mov	DWORD PTR _i$73691[ebp], 0
	jmp	SHORT $LN4@IsNameFrom
$LN3@IsNameFrom:
	mov	eax, DWORD PTR _i$73691[ebp]
	add	eax, 1
	mov	DWORD PTR _i$73691[ebp], eax
$LN4@IsNameFrom:
	mov	ecx, DWORD PTR _i$73691[ebp]
	cmp	ecx, DWORD PTR _num$[ebp]
	jae	SHORT $LN2@IsNameFrom
; Line 1049
	mov	edx, DWORD PTR _i$73691[ebp]
	mov	eax, DWORD PTR _names$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	ecx, DWORD PTR _s$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	?StringsAreEqualNoCase_Ascii@@YG_NPB_WPBD@Z ; StringsAreEqualNoCase_Ascii
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@IsNameFrom
; Line 1050
	mov	al, 1
	jmp	SHORT $LN5@IsNameFrom
$LN1@IsNameFrom:
; Line 1051
	jmp	SHORT $LN3@IsNameFrom
$LN2@IsNameFrom:
	xor	al, al
$LN5@IsNameFrom:
; Line 1052
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?IsNameFromList@@YG_NABVUString@@QBQBDI@Z ENDP		; IsNameFromList
; Function compile flags: /Odtp /RTCsu
_ai$ = 8						; size = 4
?IsNewStyleSignature@@YG_NABUCArcInfoEx@@@Z PROC	; IsNewStyleSignature
; Line 1077
	push	ebp
	mov	ebp, esp
; Line 1079
	mov	eax, DWORD PTR _ai$[ebp]
	movzx	ecx, BYTE PTR [eax+41]
	test	ecx, ecx
	je	SHORT $LN1@IsNewStyle
; Line 1080
	mov	al, 1
	jmp	SHORT $LN2@IsNewStyle
$LN1@IsNewStyle:
; Line 1081
	push	10					; 0000000aH
	push	OFFSET _k_Formats_with_simple_signuature
	mov	edx, DWORD PTR _ai$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	call	?IsNameFromList@@YG_NABVUString@@QBQBDI@Z ; IsNameFromList
$LN2@IsNewStyle:
; Line 1082
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
?IsNewStyleSignature@@YG_NABUCArcInfoEx@@@Z ENDP	; IsNewStyleSignature
_TEXT	ENDS
PUBLIC	?GetMainExt@CArcInfoEx@@QBE?AVUString@@XZ	; CArcInfoEx::GetMainExt
xdata$x	SEGMENT
__ehfuncinfo$?ReadParseItemProps@@YGJPAUIInArchive@@ABUCArcInfoEx@@AAUCParseItem@NParser@NArchive@@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?ReadParseItemProps@@YGJPAUIInArchive@@ABUCArcInfoEx@@AAUCParseItem@NParser@NArchive@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?ReadParseItemProps@@YGJPAUIInArchive@@ABUCArcInfoEx@@AAUCParseItem@NParser@NArchive@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ReadParseItemProps@@YGJPAUIInArchive@@ABUCArcInfoEx@@AAUCParseItem@NParser@NArchive@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ReadParseItemProps@@YGJPAUIInArchive@@ABUCArcInfoEx@@AAUCParseItem@NParser@NArchive@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ReadParseItemProps@@YGJPAUIInArchive@@ABUCArcInfoEx@@AAUCParseItem@NParser@NArchive@@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ReadParseItemProps@@YGJPAUIInArchive@@ABUCArcInfoEx@@AAUCParseItem@NParser@NArchive@@@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ReadParseItemProps@@YGJPAUIInArchive@@ABUCArcInfoEx@@AAUCParseItem@NParser@NArchive@@@Z$4
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv477 = -236						; size = 4
tv334 = -232						; size = 4
tv344 = -228						; size = 4
$T78008 = -224						; size = 4
$T78007 = -220						; size = 4
$T78006 = -216						; size = 4
$T78005 = -212						; size = 4
$T78004 = -208						; size = 4
$T78003 = -204						; size = 12
_isDir$74069 = -185					; size = 1
_defined$74067 = -173					; size = 1
_size$74066 = -164					; size = 8
_i$74062 = -152						; size = 4
___result__$74060 = -148				; size = 4
_numItems$ = -140					; size = 4
___result__$74055 = -132				; size = 4
_prop$74054 = -124					; size = 16
___result__$74050 = -104				; size = 4
___result__$74045 = -100				; size = 4
_prop$74044 = -92					; size = 16
___result__$74040 = -72					; size = 4
_prop$74039 = -64					; size = 16
___result__$74034 = -44					; size = 4
_prop$74033 = -36					; size = 16
___result__$74031 = -16					; size = 4
__$EHRec$ = -12						; size = 12
_archive$ = 8						; size = 4
_ai$ = 12						; size = 4
_pi$ = 16						; size = 4
?ReadParseItemProps@@YGJPAUIInArchive@@ABUCArcInfoEx@@AAUCParseItem@NParser@NArchive@@@Z PROC ; ReadParseItemProps
; Line 1316
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ReadParseItemProps@@YGJPAUIInArchive@@ABUCArcInfoEx@@AAUCParseItem@NParser@NArchive@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 224				; 000000e0H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-236]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 1317
	lea	eax, DWORD PTR $T78003[ebp]
	push	eax
	mov	ecx, DWORD PTR _ai$[ebp]
	call	?GetMainExt@CArcInfoEx@@QBE?AVUString@@XZ ; CArcInfoEx::GetMainExt
	mov	DWORD PTR tv344[ebp], eax
	mov	ecx, DWORD PTR tv344[ebp]
	mov	DWORD PTR tv334[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR tv334[ebp]
	push	edx
	mov	ecx, DWORD PTR _pi$[ebp]
	add	ecx, 28					; 0000001cH
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T78003[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
; Line 1318
	mov	eax, DWORD PTR _pi$[ebp]
	mov	BYTE PTR [eax+72], 0
; Line 1319
	mov	ecx, DWORD PTR _ai$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	ecx, DWORD PTR _pi$[ebp]
	add	ecx, 60					; 0000003cH
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
; Line 1321
	mov	edx, DWORD PTR _pi$[ebp]
	add	edx, 77					; 0000004dH
	push	edx
	push	84					; 00000054H
	mov	eax, DWORD PTR _archive$[ebp]
	push	eax
	call	?Archive_GetArcBoolProp@@YGJPAUIInArchive@@KAA_N@Z ; Archive_GetArcBoolProp
	mov	DWORD PTR ___result__$74031[ebp], eax
	cmp	DWORD PTR ___result__$74031[ebp], 0
	je	SHORT $LN21@ReadParseI
	mov	eax, DWORD PTR ___result__$74031[ebp]
	jmp	$LN22@ReadParseI
$LN21@ReadParseI:
; Line 1324
	mov	ecx, DWORD PTR _ai$[ebp]
	call	?Flags_PreArc@CArcInfoEx@@QBE_NXZ	; CArcInfoEx::Flags_PreArc
	mov	ecx, DWORD PTR _pi$[ebp]
	mov	BYTE PTR [ecx+76], al
; Line 1327
	lea	ecx, DWORD PTR _prop$74033[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 1328
	mov	esi, esp
	lea	edx, DWORD PTR _prop$74033[ebp]
	push	edx
	push	12					; 0000000cH
	mov	eax, DWORD PTR _archive$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _archive$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+32]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$74034[ebp], eax
	cmp	DWORD PTR ___result__$74034[ebp], 0
	je	SHORT $LN20@ReadParseI
	mov	ecx, DWORD PTR ___result__$74034[ebp]
	mov	DWORD PTR $T78004[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prop$74033[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T78004[ebp]
	jmp	$LN22@ReadParseI
$LN20@ReadParseI:
; Line 1329
	movzx	edx, WORD PTR _prop$74033[ebp]
	cmp	edx, 64					; 00000040H
	jne	SHORT $LN19@ReadParseI
; Line 1331
	mov	eax, DWORD PTR _pi$[ebp]
	mov	BYTE PTR [eax+72], 1
; Line 1332
	mov	ecx, DWORD PTR _pi$[ebp]
	mov	edx, DWORD PTR _prop$74033[ebp+8]
	mov	DWORD PTR [ecx+40], edx
	mov	eax, DWORD PTR _prop$74033[ebp+12]
	mov	DWORD PTR [ecx+44], eax
$LN19@ReadParseI:
; Line 1334
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prop$74033[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
; Line 1336
	mov	ecx, DWORD PTR _pi$[ebp]
	movzx	edx, BYTE PTR [ecx+72]
	test	edx, edx
	jne	$LN18@ReadParseI
; Line 1338
	lea	ecx, DWORD PTR _prop$74039[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
	mov	DWORD PTR __$EHRec$[ebp+8], 2
; Line 1339
	mov	esi, esp
	lea	eax, DWORD PTR _prop$74039[ebp]
	push	eax
	push	10					; 0000000aH
	mov	ecx, DWORD PTR _archive$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _archive$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+32]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$74040[ebp], eax
	cmp	DWORD PTR ___result__$74040[ebp], 0
	je	SHORT $LN17@ReadParseI
	mov	edx, DWORD PTR ___result__$74040[ebp]
	mov	DWORD PTR $T78005[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prop$74039[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T78005[ebp]
	jmp	$LN22@ReadParseI
$LN17@ReadParseI:
; Line 1340
	movzx	eax, WORD PTR _prop$74039[ebp]
	cmp	eax, 64					; 00000040H
	jne	SHORT $LN16@ReadParseI
; Line 1342
	mov	ecx, DWORD PTR _pi$[ebp]
	mov	BYTE PTR [ecx+72], 1
; Line 1343
	mov	edx, DWORD PTR _pi$[ebp]
	mov	eax, DWORD PTR _prop$74039[ebp+8]
	mov	DWORD PTR [edx+40], eax
	mov	ecx, DWORD PTR _prop$74039[ebp+12]
	mov	DWORD PTR [edx+44], ecx
$LN16@ReadParseI:
; Line 1345
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prop$74039[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
$LN18@ReadParseI:
; Line 1348
	lea	ecx, DWORD PTR _prop$74044[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
	mov	DWORD PTR __$EHRec$[ebp+8], 3
; Line 1349
	mov	esi, esp
	lea	edx, DWORD PTR _prop$74044[ebp]
	push	edx
	push	4
	mov	eax, DWORD PTR _archive$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _archive$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+32]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$74045[ebp], eax
	cmp	DWORD PTR ___result__$74045[ebp], 0
	je	SHORT $LN15@ReadParseI
	mov	ecx, DWORD PTR ___result__$74045[ebp]
	mov	DWORD PTR $T78006[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prop$74044[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T78006[ebp]
	jmp	$LN22@ReadParseI
$LN15@ReadParseI:
; Line 1350
	movzx	edx, WORD PTR _prop$74044[ebp]
	cmp	edx, 8
	jne	SHORT $LN14@ReadParseI
; Line 1352
	mov	eax, DWORD PTR _prop$74044[ebp+8]
	push	eax
	mov	ecx, DWORD PTR _pi$[ebp]
	add	ecx, 16					; 00000010H
	call	?SetFromBstr@UString@@QAEXPA_W@Z	; UString::SetFromBstr
; Line 1353
	mov	ecx, DWORD PTR _pi$[ebp]
	add	ecx, 28					; 0000001cH
	call	?Empty@UString@@QAEXXZ			; UString::Empty
; Line 1355
	jmp	SHORT $LN13@ReadParseI
$LN14@ReadParseI:
; Line 1357
	mov	esi, esp
	lea	ecx, DWORD PTR _prop$74044[ebp]
	push	ecx
	push	5
	mov	edx, DWORD PTR _archive$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _archive$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+32]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$74050[ebp], eax
	cmp	DWORD PTR ___result__$74050[ebp], 0
	je	SHORT $LN12@ReadParseI
	mov	eax, DWORD PTR ___result__$74050[ebp]
	mov	DWORD PTR $T78007[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prop$74044[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T78007[ebp]
	jmp	$LN22@ReadParseI
$LN12@ReadParseI:
; Line 1358
	movzx	ecx, WORD PTR _prop$74044[ebp]
	cmp	ecx, 8
	jne	SHORT $LN13@ReadParseI
; Line 1359
	mov	edx, DWORD PTR _prop$74044[ebp+8]
	push	edx
	mov	ecx, DWORD PTR _pi$[ebp]
	add	ecx, 28					; 0000001cH
	call	?SetFromBstr@UString@@QAEXPA_W@Z	; UString::SetFromBstr
$LN13@ReadParseI:
; Line 1361
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prop$74044[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
; Line 1364
	lea	ecx, DWORD PTR _prop$74054[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
	mov	DWORD PTR __$EHRec$[ebp+8], 4
; Line 1365
	mov	esi, esp
	lea	eax, DWORD PTR _prop$74054[ebp]
	push	eax
	push	82					; 00000052H
	mov	ecx, DWORD PTR _archive$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _archive$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+32]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$74055[ebp], eax
	cmp	DWORD PTR ___result__$74055[ebp], 0
	je	SHORT $LN10@ReadParseI
	mov	edx, DWORD PTR ___result__$74055[ebp]
	mov	DWORD PTR $T78008[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prop$74054[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T78008[ebp]
	jmp	$LN22@ReadParseI
$LN10@ReadParseI:
; Line 1366
	movzx	eax, WORD PTR _prop$74054[ebp]
	cmp	eax, 8
	jne	SHORT $LN9@ReadParseI
; Line 1367
	mov	ecx, DWORD PTR _prop$74054[ebp+8]
	push	ecx
	mov	ecx, DWORD PTR _pi$[ebp]
	add	ecx, 48					; 00000030H
	call	?SetFromBstr@UString@@QAEXPA_W@Z	; UString::SetFromBstr
$LN9@ReadParseI:
; Line 1368
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prop$74054[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
; Line 1372
	mov	esi, esp
	lea	edx, DWORD PTR _numItems$[ebp]
	push	edx
	mov	eax, DWORD PTR _archive$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _archive$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$74060[ebp], eax
	cmp	DWORD PTR ___result__$74060[ebp], 0
	je	SHORT $LN8@ReadParseI
	mov	eax, DWORD PTR ___result__$74060[ebp]
	jmp	$LN22@ReadParseI
$LN8@ReadParseI:
; Line 1378
	mov	ecx, DWORD PTR _pi$[ebp]
	mov	DWORD PTR [ecx+96], 0
	mov	DWORD PTR [ecx+100], 0
; Line 1379
	mov	edx, DWORD PTR _pi$[ebp]
	mov	DWORD PTR [edx+88], 0
	mov	DWORD PTR [edx+92], 0
; Line 1380
	mov	eax, DWORD PTR _pi$[ebp]
	mov	DWORD PTR [eax+80], 0
	mov	DWORD PTR [eax+84], 0
; Line 1381
	mov	DWORD PTR _i$74062[ebp], 0
	jmp	SHORT $LN7@ReadParseI
$LN6@ReadParseI:
	mov	ecx, DWORD PTR _i$74062[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$74062[ebp], ecx
$LN7@ReadParseI:
	mov	edx, DWORD PTR _i$74062[ebp]
	cmp	edx, DWORD PTR _numItems$[ebp]
	jae	$LN5@ReadParseI
; Line 1383
	mov	DWORD PTR _size$74066[ebp], 0
	mov	DWORD PTR _size$74066[ebp+4], 0
; Line 1384
	mov	BYTE PTR _defined$74067[ebp], 0
; Line 1385
	lea	eax, DWORD PTR _defined$74067[ebp]
	push	eax
	lea	ecx, DWORD PTR _size$74066[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$74062[ebp]
	push	edx
	mov	eax, DWORD PTR _archive$[ebp]
	push	eax
	call	?Archive_GetItem_Size@@YGJPAUIInArchive@@IAA_KAA_N@Z ; Archive_GetItem_Size
; Line 1386
	movzx	ecx, BYTE PTR _defined$74067[ebp]
	test	ecx, ecx
	je	SHORT $LN4@ReadParseI
; Line 1388
	mov	edx, DWORD PTR _pi$[ebp]
	mov	BYTE PTR [edx+73], 1
; Line 1389
	mov	eax, DWORD PTR _pi$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	add	ecx, DWORD PTR _size$74066[ebp]
	mov	edx, DWORD PTR [eax+84]
	adc	edx, DWORD PTR _size$74066[ebp+4]
	mov	eax, DWORD PTR _pi$[ebp]
	mov	DWORD PTR [eax+80], ecx
	mov	DWORD PTR [eax+84], edx
$LN4@ReadParseI:
; Line 1392
	mov	BYTE PTR _isDir$74069[ebp], 0
; Line 1393
	lea	ecx, DWORD PTR _isDir$74069[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$74062[ebp]
	push	edx
	mov	eax, DWORD PTR _archive$[ebp]
	push	eax
	call	?Archive_IsItem_Dir@@YGJPAUIInArchive@@IAA_N@Z ; Archive_IsItem_Dir
; Line 1394
	movzx	ecx, BYTE PTR _isDir$74069[ebp]
	test	ecx, ecx
	je	SHORT $LN3@ReadParseI
; Line 1395
	mov	edx, DWORD PTR _pi$[ebp]
	mov	eax, DWORD PTR [edx+88]
	add	eax, 1
	mov	ecx, DWORD PTR [edx+92]
	adc	ecx, 0
	mov	edx, DWORD PTR _pi$[ebp]
	mov	DWORD PTR [edx+88], eax
	mov	DWORD PTR [edx+92], ecx
; Line 1396
	jmp	SHORT $LN2@ReadParseI
$LN3@ReadParseI:
; Line 1397
	mov	eax, DWORD PTR _pi$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+100]
	adc	edx, 0
	mov	eax, DWORD PTR _pi$[ebp]
	mov	DWORD PTR [eax+96], ecx
	mov	DWORD PTR [eax+100], edx
$LN2@ReadParseI:
; Line 1398
	jmp	$LN6@ReadParseI
$LN5@ReadParseI:
; Line 1399
	mov	ecx, DWORD PTR _pi$[ebp]
	mov	DWORD PTR tv477[ebp], ecx
	mov	edx, DWORD PTR tv477[ebp]
	mov	eax, DWORD PTR tv477[ebp]
	mov	ecx, DWORD PTR [edx+88]
	or	ecx, DWORD PTR [eax+92]
	je	SHORT $LN1@ReadParseI
; Line 1400
	mov	edx, DWORD PTR _pi$[ebp]
	mov	BYTE PTR [edx+74], 1
$LN1@ReadParseI:
; Line 1401
	mov	eax, DWORD PTR _pi$[ebp]
	mov	BYTE PTR [eax+75], 1
; Line 1404
	xor	eax, eax
$LN22@ReadParseI:
; Line 1405
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN39@ReadParseI
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 236				; 000000ecH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	3
$LN39@ReadParseI:
	DD	8
	DD	$LN38@ReadParseI
$LN38@ReadParseI:
	DD	-36					; ffffffdcH
	DD	16					; 00000010H
	DD	$LN29@ReadParseI
	DD	-64					; ffffffc0H
	DD	16					; 00000010H
	DD	$LN30@ReadParseI
	DD	-92					; ffffffa4H
	DD	16					; 00000010H
	DD	$LN31@ReadParseI
	DD	-124					; ffffff84H
	DD	16					; 00000010H
	DD	$LN32@ReadParseI
	DD	-140					; ffffff74H
	DD	4
	DD	$LN33@ReadParseI
	DD	-164					; ffffff5cH
	DD	8
	DD	$LN34@ReadParseI
	DD	-173					; ffffff53H
	DD	1
	DD	$LN35@ReadParseI
	DD	-185					; ffffff47H
	DD	1
	DD	$LN36@ReadParseI
$LN36@ReadParseI:
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	68					; 00000044H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	0
$LN35@ReadParseI:
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$LN34@ReadParseI:
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN33@ReadParseI:
	DB	110					; 0000006eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	73					; 00000049H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	115					; 00000073H
	DB	0
$LN32@ReadParseI:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
$LN31@ReadParseI:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
$LN30@ReadParseI:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
$LN29@ReadParseI:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ReadParseItemProps@@YGJPAUIInArchive@@ABUCArcInfoEx@@AAUCParseItem@NParser@NArchive@@@Z$0:
	lea	ecx, DWORD PTR $T78003[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?ReadParseItemProps@@YGJPAUIInArchive@@ABUCArcInfoEx@@AAUCParseItem@NParser@NArchive@@@Z$1:
	lea	ecx, DWORD PTR _prop$74033[ebp]
	jmp	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
__unwindfunclet$?ReadParseItemProps@@YGJPAUIInArchive@@ABUCArcInfoEx@@AAUCParseItem@NParser@NArchive@@@Z$2:
	lea	ecx, DWORD PTR _prop$74039[ebp]
	jmp	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
__unwindfunclet$?ReadParseItemProps@@YGJPAUIInArchive@@ABUCArcInfoEx@@AAUCParseItem@NParser@NArchive@@@Z$3:
	lea	ecx, DWORD PTR _prop$74044[ebp]
	jmp	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
__unwindfunclet$?ReadParseItemProps@@YGJPAUIInArchive@@ABUCArcInfoEx@@AAUCParseItem@NParser@NArchive@@@Z$4:
	lea	ecx, DWORD PTR _prop$74054[ebp]
	jmp	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
__ehhandler$?ReadParseItemProps@@YGJPAUIInArchive@@ABUCArcInfoEx@@AAUCParseItem@NParser@NArchive@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-236]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ReadParseItemProps@@YGJPAUIInArchive@@ABUCArcInfoEx@@AAUCParseItem@NParser@NArchive@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ReadParseItemProps@@YGJPAUIInArchive@@ABUCArcInfoEx@@AAUCParseItem@NParser@NArchive@@@Z ENDP ; ReadParseItemProps
PUBLIC	??A?$CObjectVector@UCArcExtInfo@@@@QBEABUCArcExtInfo@@I@Z ; CObjectVector<CArcExtInfo>::operator[]
PUBLIC	?IsEmpty@?$CObjectVector@UCArcExtInfo@@@@QBE_NXZ ; CObjectVector<CArcExtInfo>::IsEmpty
EXTRN	??0UString@@QAE@ABV0@@Z:PROC			; UString::UString
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetMainExt@CArcInfoEx@@QBE?AVUString@@XZ
_TEXT	SEGMENT
$T78030 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetMainExt@CArcInfoEx@@QBE?AVUString@@XZ PROC		; CArcInfoEx::GetMainExt, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\loadcodecs.h
; Line 137
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T78030[ebp], 0
; Line 138
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?IsEmpty@?$CObjectVector@UCArcExtInfo@@@@QBE_NXZ ; CObjectVector<CArcExtInfo>::IsEmpty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@GetMainExt
; Line 139
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	ecx, DWORD PTR $T78030[ebp]
	or	ecx, 1
	mov	DWORD PTR $T78030[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN2@GetMainExt
$LN1@GetMainExt:
; Line 140
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??A?$CObjectVector@UCArcExtInfo@@@@QBEABUCArcExtInfo@@I@Z ; CObjectVector<CArcExtInfo>::operator[]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	edx, DWORD PTR $T78030[ebp]
	or	edx, 1
	mov	DWORD PTR $T78030[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN2@GetMainExt:
; Line 141
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetMainExt@CArcInfoEx@@QBE?AVUString@@XZ ENDP		; CArcInfoEx::GetMainExt
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
_TEXT	SEGMENT
$T78036 = -40						; size = 4
$T78035 = -36						; size = 4
$T78034 = -32						; size = 4
___result__$73205 = -28					; size = 4
_prop$ = -20						; size = 16
_arc$ = 8						; size = 4
_propid$ = 12						; size = 4
_result$ = 16						; size = 4
?Archive_GetArcBoolProp@@YGJPAUIInArchive@@KAA_N@Z PROC	; Archive_GetArcBoolProp
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\openarchive.cpp
; Line 481
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 482
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
; Line 483
	mov	eax, DWORD PTR _result$[ebp]
	mov	BYTE PTR [eax], 0
; Line 484
	mov	esi, esp
	lea	ecx, DWORD PTR _prop$[ebp]
	push	ecx
	mov	edx, DWORD PTR _propid$[ebp]
	push	edx
	mov	eax, DWORD PTR _arc$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _arc$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+32]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$73205[ebp], eax
	cmp	DWORD PTR ___result__$73205[ebp], 0
	je	SHORT $LN4@Archive_Ge@4
	mov	ecx, DWORD PTR ___result__$73205[ebp]
	mov	DWORD PTR $T78034[ebp], ecx
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T78034[ebp]
	jmp	SHORT $LN5@Archive_Ge@4
$LN4@Archive_Ge@4:
; Line 485
	movzx	edx, WORD PTR _prop$[ebp]
	cmp	edx, 11					; 0000000bH
	jne	SHORT $LN3@Archive_Ge@4
; Line 486
	movzx	eax, WORD PTR _prop$[ebp+8]
	push	eax
	call	?VARIANT_BOOLToBool@@YG_NF@Z		; VARIANT_BOOLToBool
	mov	ecx, DWORD PTR _result$[ebp]
	mov	BYTE PTR [ecx], al
	jmp	SHORT $LN2@Archive_Ge@4
$LN3@Archive_Ge@4:
; Line 487
	movzx	edx, WORD PTR _prop$[ebp]
	test	edx, edx
	je	SHORT $LN2@Archive_Ge@4
; Line 488
	mov	DWORD PTR $T78035[ebp], -2147467259	; 80004005H
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T78035[ebp]
	jmp	SHORT $LN5@Archive_Ge@4
$LN2@Archive_Ge@4:
; Line 489
	mov	DWORD PTR $T78036[ebp], 0
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T78036[ebp]
$LN5@Archive_Ge@4:
; Line 490
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@Archive_Ge@4
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN9@Archive_Ge@4:
	DD	1
	DD	$LN8@Archive_Ge@4
$LN8@Archive_Ge@4:
	DD	-20					; ffffffecH
	DD	16					; 00000010H
	DD	$LN7@Archive_Ge@4
$LN7@Archive_Ge@4:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
?Archive_GetArcBoolProp@@YGJPAUIInArchive@@KAA_N@Z ENDP	; Archive_GetArcBoolProp
_TEXT	ENDS
xdata$x	SEGMENT
__unwindtable$?Archive_GetItem_Size@@YGJPAUIInArchive@@IAA_KAA_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Archive_GetItem_Size@@YGJPAUIInArchive@@IAA_KAA_N@Z$0
__ehfuncinfo$?Archive_GetItem_Size@@YGJPAUIInArchive@@IAA_KAA_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Archive_GetItem_Size@@YGJPAUIInArchive@@IAA_KAA_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv85 = -60						; size = 4
$T78044 = -56						; size = 4
$T78043 = -52						; size = 4
$T78042 = -48						; size = 4
$T78041 = -44						; size = 4
___result__$73478 = -40					; size = 4
_prop$ = -32						; size = 16
__$EHRec$ = -12						; size = 12
_archive$ = 8						; size = 4
_index$ = 12						; size = 4
_size$ = 16						; size = 4
_defined$ = 20						; size = 4
?Archive_GetItem_Size@@YGJPAUIInArchive@@IAA_KAA_N@Z PROC ; Archive_GetItem_Size
; Line 916
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Archive_GetItem_Size@@YGJPAUIInArchive@@IAA_KAA_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 48					; 00000030H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 917
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 918
	mov	eax, DWORD PTR _defined$[ebp]
	mov	BYTE PTR [eax], 0
; Line 919
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
; Line 920
	mov	esi, esp
	lea	edx, DWORD PTR _prop$[ebp]
	push	edx
	push	7
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _archive$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _archive$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+24]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$73478[ebp], eax
	cmp	DWORD PTR ___result__$73478[ebp], 0
	je	SHORT $LN9@Archive_Ge@5
	mov	edx, DWORD PTR ___result__$73478[ebp]
	mov	DWORD PTR $T78041[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T78041[ebp]
	jmp	$LN10@Archive_Ge@5
$LN9@Archive_Ge@5:
; Line 921
	movzx	eax, WORD PTR _prop$[ebp]
	mov	DWORD PTR tv85[ebp], eax
	cmp	DWORD PTR tv85[ebp], 21			; 00000015H
	ja	SHORT $LN1@Archive_Ge@5
	mov	ecx, DWORD PTR tv85[ebp]
	movzx	edx, BYTE PTR $LN13@Archive_Ge@5[ecx]
	jmp	DWORD PTR $LN18@Archive_Ge@5[edx*4]
$LN6@Archive_Ge@5:
; Line 923
	movzx	eax, BYTE PTR _prop$[ebp+8]
	cdq
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
	jmp	SHORT $LN7@Archive_Ge@5
$LN5@Archive_Ge@5:
; Line 924
	movzx	eax, WORD PTR _prop$[ebp+8]
	cdq
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
	jmp	SHORT $LN7@Archive_Ge@5
$LN4@Archive_Ge@5:
; Line 925
	mov	edx, DWORD PTR _prop$[ebp+8]
	xor	eax, eax
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	jmp	SHORT $LN7@Archive_Ge@5
$LN3@Archive_Ge@5:
; Line 926
	mov	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR _prop$[ebp+8]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _prop$[ebp+12]
	mov	DWORD PTR [edx+4], ecx
	jmp	SHORT $LN7@Archive_Ge@5
$LN2@Archive_Ge@5:
; Line 927
	mov	DWORD PTR $T78042[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T78042[ebp]
	jmp	SHORT $LN10@Archive_Ge@5
$LN1@Archive_Ge@5:
; Line 928
	mov	DWORD PTR $T78043[ebp], -2147467259	; 80004005H
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T78043[ebp]
	jmp	SHORT $LN10@Archive_Ge@5
$LN7@Archive_Ge@5:
; Line 930
	mov	edx, DWORD PTR _defined$[ebp]
	mov	BYTE PTR [edx], 1
; Line 931
	mov	DWORD PTR $T78044[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T78044[ebp]
$LN10@Archive_Ge@5:
; Line 932
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@Archive_Ge@5
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN17@Archive_Ge@5:
	DD	1
	DD	$LN16@Archive_Ge@5
$LN16@Archive_Ge@5:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN14@Archive_Ge@5
$LN14@Archive_Ge@5:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
	npad	3
$LN18@Archive_Ge@5:
	DD	$LN2@Archive_Ge@5
	DD	$LN6@Archive_Ge@5
	DD	$LN5@Archive_Ge@5
	DD	$LN4@Archive_Ge@5
	DD	$LN3@Archive_Ge@5
	DD	$LN1@Archive_Ge@5
$LN13@Archive_Ge@5:
	DB	0
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	1
	DB	2
	DB	3
	DB	5
	DB	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Archive_GetItem_Size@@YGJPAUIInArchive@@IAA_KAA_N@Z$0:
	lea	ecx, DWORD PTR _prop$[ebp]
	jmp	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
__ehhandler$?Archive_GetItem_Size@@YGJPAUIInArchive@@IAA_KAA_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-60]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Archive_GetItem_Size@@YGJPAUIInArchive@@IAA_KAA_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Archive_GetItem_Size@@YGJPAUIInArchive@@IAA_KAA_N@Z ENDP ; Archive_GetItem_Size
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Init@CExtractCallback_To_OpenCallback@@QAEXPAUIArchiveOpenCallback@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_callback$ = 8						; size = 4
?Init@CExtractCallback_To_OpenCallback@@QAEXPAUIArchiveOpenCallback@@@Z PROC ; CExtractCallback_To_OpenCallback::Init, COMDAT
; _this$ = ecx
; Line 1455
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1456
	mov	eax, DWORD PTR _callback$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4?$CMyComPtr@UIArchiveOpenCallback@@@@QAEPAUIArchiveOpenCallback@@PAU1@@Z ; CMyComPtr<IArchiveOpenCallback>::operator=
; Line 1457
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
; Line 1458
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
; Line 1459
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Init@CExtractCallback_To_OpenCallback@@QAEXPAUIArchiveOpenCallback@@@Z ENDP ; CExtractCallback_To_OpenCallback::Init
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
_TEXT	SEGMENT
___result__$74229 = -56					; size = 4
___result__$74226 = -52					; size = 4
_phySizeCantBeDetected$74225 = -41			; size = 1
___result__$74221 = -36					; size = 4
_phySize$74220 = -28					; size = 8
_phySize_Defined$74219 = -9				; size = 1
___result__$74216 = -4					; size = 4
_archive$ = 8						; size = 4
_needPhySize$ = 12					; size = 1
_stream$ = 16						; size = 4
_maxCheckStartPosition$ = 20				; size = 4
_openCallback$ = 24					; size = 4
_extractCallback$ = 28					; size = 4
?OpenArchiveSpec@@YGJPAUIInArchive@@_NPAUIInStream@@PB_KPAUIArchiveOpenCallback@@PAUIArchiveExtractCallback@@@Z PROC ; OpenArchiveSpec
; Line 1504
	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1514
	mov	esi, esp
	mov	eax, DWORD PTR _openCallback$[ebp]
	push	eax
	mov	ecx, DWORD PTR _maxCheckStartPosition$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _archive$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _archive$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$74216[ebp], eax
	cmp	DWORD PTR ___result__$74216[ebp], 0
	je	SHORT $LN7@OpenArchiv
	mov	eax, DWORD PTR ___result__$74216[ebp]
	jmp	$LN8@OpenArchiv
$LN7@OpenArchiv:
; Line 1515
	movzx	ecx, BYTE PTR _needPhySize$[ebp]
	test	ecx, ecx
	je	$LN6@OpenArchiv
; Line 1517
	mov	BYTE PTR _phySize_Defined$74219[ebp], 0
; Line 1518
	mov	DWORD PTR _phySize$74220[ebp], 0
	mov	DWORD PTR _phySize$74220[ebp+4], 0
; Line 1519
	lea	edx, DWORD PTR _phySize_Defined$74219[ebp]
	push	edx
	lea	eax, DWORD PTR _phySize$74220[ebp]
	push	eax
	push	44					; 0000002cH
	mov	ecx, DWORD PTR _archive$[ebp]
	push	ecx
	call	?Archive_GetArcProp_UInt@@YGJPAUIInArchive@@KAA_KAA_N@Z ; Archive_GetArcProp_UInt
	mov	DWORD PTR ___result__$74221[ebp], eax
	cmp	DWORD PTR ___result__$74221[ebp], 0
	je	SHORT $LN5@OpenArchiv
	mov	eax, DWORD PTR ___result__$74221[ebp]
	jmp	SHORT $LN8@OpenArchiv
$LN5@OpenArchiv:
; Line 1520
	movzx	edx, BYTE PTR _phySize_Defined$74219[ebp]
	test	edx, edx
	je	SHORT $LN4@OpenArchiv
; Line 1521
	xor	eax, eax
	jmp	SHORT $LN8@OpenArchiv
$LN4@OpenArchiv:
; Line 1523
	mov	BYTE PTR _phySizeCantBeDetected$74225[ebp], 0
; Line 1524
	lea	eax, DWORD PTR _phySizeCantBeDetected$74225[ebp]
	push	eax
	push	85					; 00000055H
	mov	ecx, DWORD PTR _archive$[ebp]
	push	ecx
	call	?Archive_GetArcBoolProp@@YGJPAUIInArchive@@KAA_N@Z ; Archive_GetArcBoolProp
	mov	DWORD PTR ___result__$74226[ebp], eax
	cmp	DWORD PTR ___result__$74226[ebp], 0
	je	SHORT $LN3@OpenArchiv
	mov	eax, DWORD PTR ___result__$74226[ebp]
	jmp	SHORT $LN8@OpenArchiv
$LN3@OpenArchiv:
; Line 1526
	movzx	edx, BYTE PTR _phySizeCantBeDetected$74225[ebp]
	test	edx, edx
	jne	SHORT $LN6@OpenArchiv
; Line 1528
	mov	esi, esp
	mov	eax, DWORD PTR _extractCallback$[ebp]
	push	eax
	push	1
	call	?BoolToInt@@YGH_N@Z			; BoolToInt
	push	eax
	push	-1
	push	0
	mov	ecx, DWORD PTR _archive$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _archive$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+28]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$74229[ebp], eax
	cmp	DWORD PTR ___result__$74229[ebp], 0
	je	SHORT $LN6@OpenArchiv
	mov	eax, DWORD PTR ___result__$74229[ebp]
	jmp	SHORT $LN8@OpenArchiv
$LN6@OpenArchiv:
; Line 1531
	xor	eax, eax
$LN8@OpenArchiv:
; Line 1532
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@OpenArchiv
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
	npad	3
$LN14@OpenArchiv:
	DD	3
	DD	$LN13@OpenArchiv
$LN13@OpenArchiv:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN10@OpenArchiv
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN11@OpenArchiv
	DD	-41					; ffffffd7H
	DD	1
	DD	$LN12@OpenArchiv
$LN12@OpenArchiv:
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	121					; 00000079H
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	66					; 00000042H
	DB	101					; 00000065H
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$LN11@OpenArchiv:
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	121					; 00000079H
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN10@OpenArchiv:
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	121					; 00000079H
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
?OpenArchiveSpec@@YGJPAUIInArchive@@_NPAUIInStream@@PB_KPAUIArchiveOpenCallback@@PAUIArchiveExtractCallback@@@Z ENDP ; OpenArchiveSpec
_TEXT	ENDS
xdata$x	SEGMENT
__unwindtable$?FindFormatForArchiveType@@YGHPAVCCodecs@@V?$CRecordVector@H@@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FindFormatForArchiveType@@YGHPAVCCodecs@@V?$CRecordVector@H@@PBD@Z$0
__ehfuncinfo$?FindFormatForArchiveType@@YGHPAVCCodecs@@V?$CRecordVector@H@@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?FindFormatForArchiveType@@YGHPAVCCodecs@@V?$CRecordVector@H@@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T78065 = -24						; size = 4
$T78064 = -20						; size = 4
_i$74239 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_codecs$ = 8						; size = 4
_orderIndices$ = 12					; size = 12
_name$ = 24						; size = 4
?FindFormatForArchiveType@@YGHPAVCCodecs@@V?$CRecordVector@H@@PBD@Z PROC ; FindFormatForArchiveType
; Line 1535
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?FindFormatForArchiveType@@YGHPAVCCodecs@@V?$CRecordVector@H@@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-24], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 1536
	mov	DWORD PTR _i$74239[ebp], 0
	jmp	SHORT $LN4@FindFormat
$LN3@FindFormat:
	mov	eax, DWORD PTR _i$74239[ebp]
	add	eax, 1
	mov	DWORD PTR _i$74239[ebp], eax
$LN4@FindFormat:
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	?Size@?$CRecordVector@H@@QBEIXZ		; CRecordVector<int>::Size
	cmp	DWORD PTR _i$74239[ebp], eax
	jae	SHORT $LN2@FindFormat
; Line 1537
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$74239[ebp]
	push	edx
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	??A?$CRecordVector@H@@QAEAAHI@Z		; CRecordVector<int>::operator[]
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _codecs$[ebp]
	add	ecx, 8
	call	??A?$CObjectVector@UCArcInfoEx@@@@QAEAAUCArcInfoEx@@I@Z ; CObjectVector<CArcInfoEx>::operator[]
	add	eax, 12					; 0000000cH
	mov	ecx, eax
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	?StringsAreEqualNoCase_Ascii@@YG_NPB_WPBD@Z ; StringsAreEqualNoCase_Ascii
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@FindFormat
; Line 1538
	mov	edx, DWORD PTR _i$74239[ebp]
	mov	DWORD PTR $T78064[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	eax, DWORD PTR $T78064[ebp]
	jmp	SHORT $LN5@FindFormat
$LN1@FindFormat:
; Line 1539
	jmp	SHORT $LN3@FindFormat
$LN2@FindFormat:
	mov	DWORD PTR $T78065[ebp], -1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	eax, DWORD PTR $T78065[ebp]
$LN5@FindFormat:
; Line 1540
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?FindFormatForArchiveType@@YGHPAVCCodecs@@V?$CRecordVector@H@@PBD@Z$0:
	lea	ecx, DWORD PTR _orderIndices$[ebp]
	jmp	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
__ehhandler$?FindFormatForArchiveType@@YGHPAVCCodecs@@V?$CRecordVector@H@@PBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?FindFormatForArchiveType@@YGHPAVCCodecs@@V?$CRecordVector@H@@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?FindFormatForArchiveType@@YGHPAVCCodecs@@V?$CRecordVector@H@@PBD@Z ENDP ; FindFormatForArchiveType
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4CArcErrorInfo@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4CArcErrorInfo@@QAEAAU0@ABU0@@Z PROC			; CArcErrorInfo::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+1]
	mov	BYTE PTR [eax+1], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+2]
	mov	BYTE PTR [eax+2], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+3]
	mov	BYTE PTR [eax+3], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	ecx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], ecx
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 24					; 00000018H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 36					; 00000024H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4CArcErrorInfo@@QAEAAU0@ABU0@@Z ENDP			; CArcErrorInfo::operator=
_TEXT	ENDS
PUBLIC	??0?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ	; CMyComPtr<IArchiveOpenCallback>::CMyComPtr<IArchiveOpenCallback>
PUBLIC	??_7CExtractCallback_To_OpenCallback@@6BICompressProgressInfo@@@ ; CExtractCallback_To_OpenCallback::`vftable'
PUBLIC	??_7CExtractCallback_To_OpenCallback@@6BIArchiveExtractCallback@@@ ; CExtractCallback_To_OpenCallback::`vftable'
PUBLIC	??0ICompressProgressInfo@@QAE@XZ		; ICompressProgressInfo::ICompressProgressInfo
PUBLIC	??0IArchiveExtractCallback@@QAE@XZ		; IArchiveExtractCallback::IArchiveExtractCallback
PUBLIC	??_R4CExtractCallback_To_OpenCallback@@6BIArchiveExtractCallback@@@ ; CExtractCallback_To_OpenCallback::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCExtractCallback_To_OpenCallback@@@8	; CExtractCallback_To_OpenCallback `RTTI Type Descriptor'
PUBLIC	??_R3CExtractCallback_To_OpenCallback@@8	; CExtractCallback_To_OpenCallback::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CExtractCallback_To_OpenCallback@@8	; CExtractCallback_To_OpenCallback::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CExtractCallback_To_OpenCallback@@8 ; CExtractCallback_To_OpenCallback::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@IArchiveExtractCallback@@8	; IArchiveExtractCallback::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIArchiveExtractCallback@@@8		; IArchiveExtractCallback `RTTI Type Descriptor'
PUBLIC	??_R3IArchiveExtractCallback@@8			; IArchiveExtractCallback::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IArchiveExtractCallback@@8			; IArchiveExtractCallback::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IProgress@@8			; IProgress::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIProgress@@@8				; IProgress `RTTI Type Descriptor'
PUBLIC	??_R3IProgress@@8				; IProgress::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IProgress@@8				; IProgress::`RTTI Base Class Array'
PUBLIC	??_R13?0A@EA@ICompressProgressInfo@@8		; ICompressProgressInfo::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AUICompressProgressInfo@@@8		; ICompressProgressInfo `RTTI Type Descriptor'
PUBLIC	??_R3ICompressProgressInfo@@8			; ICompressProgressInfo::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ICompressProgressInfo@@8			; ICompressProgressInfo::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ICompressProgressInfo@@8		; ICompressProgressInfo::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?QueryInterface@CExtractCallback_To_OpenCallback@@UAGJABU_GUID@@PAPAX@Z ; CExtractCallback_To_OpenCallback::QueryInterface
PUBLIC	?AddRef@CExtractCallback_To_OpenCallback@@UAGKXZ ; CExtractCallback_To_OpenCallback::AddRef
PUBLIC	?Release@CExtractCallback_To_OpenCallback@@UAGKXZ ; CExtractCallback_To_OpenCallback::Release
PUBLIC	??_R4CExtractCallback_To_OpenCallback@@6BICompressProgressInfo@@@ ; CExtractCallback_To_OpenCallback::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@CExtractCallback_To_OpenCallback@@W3AGJABU_GUID@@PAPAX@Z ; [thunk]:CExtractCallback_To_OpenCallback::QueryInterface`adjustor{4}'
PUBLIC	?AddRef@CExtractCallback_To_OpenCallback@@W3AGKXZ ; [thunk]:CExtractCallback_To_OpenCallback::AddRef`adjustor{4}'
PUBLIC	?Release@CExtractCallback_To_OpenCallback@@W3AGKXZ ; [thunk]:CExtractCallback_To_OpenCallback::Release`adjustor{4}'
;	COMDAT ??_R4CExtractCallback_To_OpenCallback@@6BICompressProgressInfo@@@
rdata$r	SEGMENT
??_R4CExtractCallback_To_OpenCallback@@6BICompressProgressInfo@@@ DD 00H ; CExtractCallback_To_OpenCallback::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVCExtractCallback_To_OpenCallback@@@8
	DD	FLAT:??_R3CExtractCallback_To_OpenCallback@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ICompressProgressInfo@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ICompressProgressInfo@@8 DD FLAT:??_R0?AUICompressProgressInfo@@@8 ; ICompressProgressInfo::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICompressProgressInfo@@8
rdata$r	ENDS
;	COMDAT ??_R2ICompressProgressInfo@@8
rdata$r	SEGMENT
??_R2ICompressProgressInfo@@8 DD FLAT:??_R1A@?0A@EA@ICompressProgressInfo@@8 ; ICompressProgressInfo::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ICompressProgressInfo@@8
rdata$r	SEGMENT
??_R3ICompressProgressInfo@@8 DD 00H			; ICompressProgressInfo::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ICompressProgressInfo@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUICompressProgressInfo@@@8
_DATA	SEGMENT
??_R0?AUICompressProgressInfo@@@8 DD FLAT:??_7type_info@@6B@ ; ICompressProgressInfo `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUICompressProgressInfo@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@ICompressProgressInfo@@8
rdata$r	SEGMENT
??_R13?0A@EA@ICompressProgressInfo@@8 DD FLAT:??_R0?AUICompressProgressInfo@@@8 ; ICompressProgressInfo::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	01H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICompressProgressInfo@@8
rdata$r	ENDS
;	COMDAT ??_R2IProgress@@8
rdata$r	SEGMENT
??_R2IProgress@@8 DD FLAT:??_R1A@?0A@EA@IProgress@@8	; IProgress::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3IProgress@@8
rdata$r	SEGMENT
??_R3IProgress@@8 DD 00H				; IProgress::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2IProgress@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIProgress@@@8
_DATA	SEGMENT
??_R0?AUIProgress@@@8 DD FLAT:??_7type_info@@6B@	; IProgress `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIProgress@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IProgress@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IProgress@@8 DD FLAT:??_R0?AUIProgress@@@8 ; IProgress::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IProgress@@8
rdata$r	ENDS
;	COMDAT ??_R2IArchiveExtractCallback@@8
rdata$r	SEGMENT
??_R2IArchiveExtractCallback@@8 DD FLAT:??_R1A@?0A@EA@IArchiveExtractCallback@@8 ; IArchiveExtractCallback::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IProgress@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3IArchiveExtractCallback@@8
rdata$r	SEGMENT
??_R3IArchiveExtractCallback@@8 DD 00H			; IArchiveExtractCallback::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2IArchiveExtractCallback@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIArchiveExtractCallback@@@8
_DATA	SEGMENT
??_R0?AUIArchiveExtractCallback@@@8 DD FLAT:??_7type_info@@6B@ ; IArchiveExtractCallback `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIArchiveExtractCallback@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IArchiveExtractCallback@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IArchiveExtractCallback@@8 DD FLAT:??_R0?AUIArchiveExtractCallback@@@8 ; IArchiveExtractCallback::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IArchiveExtractCallback@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CExtractCallback_To_OpenCallback@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CExtractCallback_To_OpenCallback@@8 DD FLAT:??_R0?AVCExtractCallback_To_OpenCallback@@@8 ; CExtractCallback_To_OpenCallback::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	06H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CExtractCallback_To_OpenCallback@@8
rdata$r	ENDS
;	COMDAT ??_R2CExtractCallback_To_OpenCallback@@8
rdata$r	SEGMENT
??_R2CExtractCallback_To_OpenCallback@@8 DD FLAT:??_R1A@?0A@EA@CExtractCallback_To_OpenCallback@@8 ; CExtractCallback_To_OpenCallback::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IArchiveExtractCallback@@8
	DD	FLAT:??_R1A@?0A@EA@IProgress@@8
	DD	FLAT:??_R1A@?0A@EC@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@ICompressProgressInfo@@8
	DD	FLAT:??_R13?0A@EC@IUnknown@@8
	DD	FLAT:??_R17?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CExtractCallback_To_OpenCallback@@8
rdata$r	SEGMENT
??_R3CExtractCallback_To_OpenCallback@@8 DD 00H		; CExtractCallback_To_OpenCallback::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	07H
	DD	FLAT:??_R2CExtractCallback_To_OpenCallback@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCExtractCallback_To_OpenCallback@@@8
_DATA	SEGMENT
??_R0?AVCExtractCallback_To_OpenCallback@@@8 DD FLAT:??_7type_info@@6B@ ; CExtractCallback_To_OpenCallback `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCExtractCallback_To_OpenCallback@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CExtractCallback_To_OpenCallback@@6BIArchiveExtractCallback@@@
rdata$r	SEGMENT
??_R4CExtractCallback_To_OpenCallback@@6BIArchiveExtractCallback@@@ DD 00H ; CExtractCallback_To_OpenCallback::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCExtractCallback_To_OpenCallback@@@8
	DD	FLAT:??_R3CExtractCallback_To_OpenCallback@@8
rdata$r	ENDS
;	COMDAT ??_7CExtractCallback_To_OpenCallback@@6BICompressProgressInfo@@@
CONST	SEGMENT
??_7CExtractCallback_To_OpenCallback@@6BICompressProgressInfo@@@ DD FLAT:??_R4CExtractCallback_To_OpenCallback@@6BICompressProgressInfo@@@ ; CExtractCallback_To_OpenCallback::`vftable'
	DD	FLAT:?QueryInterface@CExtractCallback_To_OpenCallback@@W3AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CExtractCallback_To_OpenCallback@@W3AGKXZ
	DD	FLAT:?Release@CExtractCallback_To_OpenCallback@@W3AGKXZ
	DD	FLAT:?SetRatioInfo@CExtractCallback_To_OpenCallback@@UAGJPB_K0@Z
CONST	ENDS
;	COMDAT ??_7CExtractCallback_To_OpenCallback@@6BIArchiveExtractCallback@@@
CONST	SEGMENT
??_7CExtractCallback_To_OpenCallback@@6BIArchiveExtractCallback@@@ DD FLAT:??_R4CExtractCallback_To_OpenCallback@@6BIArchiveExtractCallback@@@ ; CExtractCallback_To_OpenCallback::`vftable'
	DD	FLAT:?QueryInterface@CExtractCallback_To_OpenCallback@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CExtractCallback_To_OpenCallback@@UAGKXZ
	DD	FLAT:?Release@CExtractCallback_To_OpenCallback@@UAGKXZ
	DD	FLAT:?SetTotal@CExtractCallback_To_OpenCallback@@UAGJ_K@Z
	DD	FLAT:?SetCompleted@CExtractCallback_To_OpenCallback@@UAGJPB_K@Z
	DD	FLAT:?GetStream@CExtractCallback_To_OpenCallback@@UAGJIPAPAUISequentialOutStream@@H@Z
	DD	FLAT:?PrepareOperation@CExtractCallback_To_OpenCallback@@UAGJH@Z
	DD	FLAT:?SetOperationResult@CExtractCallback_To_OpenCallback@@UAGJH@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CExtractCallback_To_OpenCallback@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CExtractCallback_To_OpenCallback@@QAE@XZ PROC	; CExtractCallback_To_OpenCallback::CExtractCallback_To_OpenCallback, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IArchiveExtractCallback@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0ICompressProgressInfo@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CExtractCallback_To_OpenCallback@@6BIArchiveExtractCallback@@@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], OFFSET ??_7CExtractCallback_To_OpenCallback@@6BICompressProgressInfo@@@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::CMyComPtr<IArchiveOpenCallback>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CExtractCallback_To_OpenCallback@@QAE@XZ ENDP	; CExtractCallback_To_OpenCallback::CExtractCallback_To_OpenCallback
_TEXT	ENDS
EXTRN	_IID_ICompressProgressInfo:BYTE
EXTRN	_IID_IArchiveExtractCallback:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@CExtractCallback_To_OpenCallback@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
tv92 = -4						; size = 4
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CExtractCallback_To_OpenCallback@@UAGJABU_GUID@@PAPAX@Z PROC ; CExtractCallback_To_OpenCallback::QueryInterface, COMDAT
; Line 1451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN6@QueryInter@5
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN5@QueryInter@5
$LN6@QueryInter@5:
	push	OFFSET _IID_IArchiveExtractCallback
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@QueryInter@5
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN5@QueryInter@5
$LN4@QueryInter@5:
	push	OFFSET _IID_ICompressProgressInfo
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@5
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN9@QueryInter@5
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	mov	DWORD PTR tv92[ebp], edx
	jmp	SHORT $LN10@QueryInter@5
$LN9@QueryInter@5:
	mov	DWORD PTR tv92[ebp], 0
$LN10@QueryInter@5:
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	ecx, DWORD PTR tv92[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN5@QueryInter@5
$LN2@QueryInter@5:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN7@QueryInter@5
$LN5@QueryInter@5:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax
	xor	eax, eax
$LN7@QueryInter@5:
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CExtractCallback_To_OpenCallback@@UAGJABU_GUID@@PAPAX@Z ENDP ; CExtractCallback_To_OpenCallback::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CExtractCallback_To_OpenCallback@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CExtractCallback_To_OpenCallback@@UAGKXZ PROC	; CExtractCallback_To_OpenCallback::AddRef, COMDAT
; Line 1451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CExtractCallback_To_OpenCallback@@UAGKXZ ENDP	; CExtractCallback_To_OpenCallback::AddRef
_TEXT	ENDS
PUBLIC	??_GCExtractCallback_To_OpenCallback@@QAEPAXI@Z	; CExtractCallback_To_OpenCallback::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CExtractCallback_To_OpenCallback@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T78084 = -8						; size = 4
$T78083 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CExtractCallback_To_OpenCallback@@UAGKXZ PROC	; CExtractCallback_To_OpenCallback::Release, COMDAT
; Line 1451
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+8], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	jmp	SHORT $LN2@Release@5
$LN1@Release@5:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T78084[ebp], edx
	mov	eax, DWORD PTR $T78084[ebp]
	mov	DWORD PTR $T78083[ebp], eax
	cmp	DWORD PTR $T78083[ebp], 0
	je	SHORT $LN4@Release@5
	push	1
	mov	ecx, DWORD PTR $T78083[ebp]
	call	??_GCExtractCallback_To_OpenCallback@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release@5
$LN4@Release@5:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release@5:
	xor	eax, eax
$LN2@Release@5:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CExtractCallback_To_OpenCallback@@UAGKXZ ENDP	; CExtractCallback_To_OpenCallback::Release
_TEXT	ENDS
PUBLIC	??1CExtractCallback_To_OpenCallback@@QAE@XZ	; CExtractCallback_To_OpenCallback::~CExtractCallback_To_OpenCallback
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCExtractCallback_To_OpenCallback@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCExtractCallback_To_OpenCallback@@QAEPAXI@Z PROC	; CExtractCallback_To_OpenCallback::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CExtractCallback_To_OpenCallback@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@5
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@5:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCExtractCallback_To_OpenCallback@@QAEPAXI@Z ENDP	; CExtractCallback_To_OpenCallback::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CExtractCallback_To_OpenCallback@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CExtractCallback_To_OpenCallback@@QAE@XZ PROC	; CExtractCallback_To_OpenCallback::~CExtractCallback_To_OpenCallback, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CExtractCallback_To_OpenCallback@@QAE@XZ ENDP	; CExtractCallback_To_OpenCallback::~CExtractCallback_To_OpenCallback
_TEXT	ENDS
PUBLIC	??0?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::CMyComPtr<ICryptoGetTextPassword>
PUBLIC	??_7CArchiveOpenCallback_Offset@@6BICryptoGetTextPassword@@@ ; CArchiveOpenCallback_Offset::`vftable'
PUBLIC	??_7CArchiveOpenCallback_Offset@@6BIArchiveOpenCallback@@@ ; CArchiveOpenCallback_Offset::`vftable'
PUBLIC	??0ICryptoGetTextPassword@@QAE@XZ		; ICryptoGetTextPassword::ICryptoGetTextPassword
PUBLIC	??0IArchiveOpenCallback@@QAE@XZ			; IArchiveOpenCallback::IArchiveOpenCallback
PUBLIC	??_R4CArchiveOpenCallback_Offset@@6BIArchiveOpenCallback@@@ ; CArchiveOpenCallback_Offset::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCArchiveOpenCallback_Offset@@@8		; CArchiveOpenCallback_Offset `RTTI Type Descriptor'
PUBLIC	??_R3CArchiveOpenCallback_Offset@@8		; CArchiveOpenCallback_Offset::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CArchiveOpenCallback_Offset@@8		; CArchiveOpenCallback_Offset::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CArchiveOpenCallback_Offset@@8	; CArchiveOpenCallback_Offset::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@IArchiveOpenCallback@@8		; IArchiveOpenCallback::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIArchiveOpenCallback@@@8		; IArchiveOpenCallback `RTTI Type Descriptor'
PUBLIC	??_R3IArchiveOpenCallback@@8			; IArchiveOpenCallback::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IArchiveOpenCallback@@8			; IArchiveOpenCallback::`RTTI Base Class Array'
PUBLIC	??_R13?0A@EA@ICryptoGetTextPassword@@8		; ICryptoGetTextPassword::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AUICryptoGetTextPassword@@@8		; ICryptoGetTextPassword `RTTI Type Descriptor'
PUBLIC	??_R3ICryptoGetTextPassword@@8			; ICryptoGetTextPassword::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ICryptoGetTextPassword@@8			; ICryptoGetTextPassword::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ICryptoGetTextPassword@@8		; ICryptoGetTextPassword::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?QueryInterface@CArchiveOpenCallback_Offset@@UAGJABU_GUID@@PAPAX@Z ; CArchiveOpenCallback_Offset::QueryInterface
PUBLIC	?AddRef@CArchiveOpenCallback_Offset@@UAGKXZ	; CArchiveOpenCallback_Offset::AddRef
PUBLIC	?Release@CArchiveOpenCallback_Offset@@UAGKXZ	; CArchiveOpenCallback_Offset::Release
PUBLIC	??_R4CArchiveOpenCallback_Offset@@6BICryptoGetTextPassword@@@ ; CArchiveOpenCallback_Offset::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@CArchiveOpenCallback_Offset@@W3AGJABU_GUID@@PAPAX@Z ; [thunk]:CArchiveOpenCallback_Offset::QueryInterface`adjustor{4}'
PUBLIC	?AddRef@CArchiveOpenCallback_Offset@@W3AGKXZ	; [thunk]:CArchiveOpenCallback_Offset::AddRef`adjustor{4}'
PUBLIC	?Release@CArchiveOpenCallback_Offset@@W3AGKXZ	; [thunk]:CArchiveOpenCallback_Offset::Release`adjustor{4}'
;	COMDAT ??_R4CArchiveOpenCallback_Offset@@6BICryptoGetTextPassword@@@
rdata$r	SEGMENT
??_R4CArchiveOpenCallback_Offset@@6BICryptoGetTextPassword@@@ DD 00H ; CArchiveOpenCallback_Offset::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVCArchiveOpenCallback_Offset@@@8
	DD	FLAT:??_R3CArchiveOpenCallback_Offset@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ICryptoGetTextPassword@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ICryptoGetTextPassword@@8 DD FLAT:??_R0?AUICryptoGetTextPassword@@@8 ; ICryptoGetTextPassword::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICryptoGetTextPassword@@8
rdata$r	ENDS
;	COMDAT ??_R2ICryptoGetTextPassword@@8
rdata$r	SEGMENT
??_R2ICryptoGetTextPassword@@8 DD FLAT:??_R1A@?0A@EA@ICryptoGetTextPassword@@8 ; ICryptoGetTextPassword::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ICryptoGetTextPassword@@8
rdata$r	SEGMENT
??_R3ICryptoGetTextPassword@@8 DD 00H			; ICryptoGetTextPassword::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ICryptoGetTextPassword@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUICryptoGetTextPassword@@@8
_DATA	SEGMENT
??_R0?AUICryptoGetTextPassword@@@8 DD FLAT:??_7type_info@@6B@ ; ICryptoGetTextPassword `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUICryptoGetTextPassword@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@ICryptoGetTextPassword@@8
rdata$r	SEGMENT
??_R13?0A@EA@ICryptoGetTextPassword@@8 DD FLAT:??_R0?AUICryptoGetTextPassword@@@8 ; ICryptoGetTextPassword::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	01H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICryptoGetTextPassword@@8
rdata$r	ENDS
;	COMDAT ??_R2IArchiveOpenCallback@@8
rdata$r	SEGMENT
??_R2IArchiveOpenCallback@@8 DD FLAT:??_R1A@?0A@EA@IArchiveOpenCallback@@8 ; IArchiveOpenCallback::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3IArchiveOpenCallback@@8
rdata$r	SEGMENT
??_R3IArchiveOpenCallback@@8 DD 00H			; IArchiveOpenCallback::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2IArchiveOpenCallback@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIArchiveOpenCallback@@@8
_DATA	SEGMENT
??_R0?AUIArchiveOpenCallback@@@8 DD FLAT:??_7type_info@@6B@ ; IArchiveOpenCallback `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIArchiveOpenCallback@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IArchiveOpenCallback@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IArchiveOpenCallback@@8 DD FLAT:??_R0?AUIArchiveOpenCallback@@@8 ; IArchiveOpenCallback::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IArchiveOpenCallback@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CArchiveOpenCallback_Offset@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CArchiveOpenCallback_Offset@@8 DD FLAT:??_R0?AVCArchiveOpenCallback_Offset@@@8 ; CArchiveOpenCallback_Offset::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	05H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CArchiveOpenCallback_Offset@@8
rdata$r	ENDS
;	COMDAT ??_R2CArchiveOpenCallback_Offset@@8
rdata$r	SEGMENT
??_R2CArchiveOpenCallback_Offset@@8 DD FLAT:??_R1A@?0A@EA@CArchiveOpenCallback_Offset@@8 ; CArchiveOpenCallback_Offset::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IArchiveOpenCallback@@8
	DD	FLAT:??_R1A@?0A@EC@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@ICryptoGetTextPassword@@8
	DD	FLAT:??_R13?0A@EC@IUnknown@@8
	DD	FLAT:??_R17?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CArchiveOpenCallback_Offset@@8
rdata$r	SEGMENT
??_R3CArchiveOpenCallback_Offset@@8 DD 00H		; CArchiveOpenCallback_Offset::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	06H
	DD	FLAT:??_R2CArchiveOpenCallback_Offset@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCArchiveOpenCallback_Offset@@@8
_DATA	SEGMENT
??_R0?AVCArchiveOpenCallback_Offset@@@8 DD FLAT:??_7type_info@@6B@ ; CArchiveOpenCallback_Offset `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCArchiveOpenCallback_Offset@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CArchiveOpenCallback_Offset@@6BIArchiveOpenCallback@@@
rdata$r	SEGMENT
??_R4CArchiveOpenCallback_Offset@@6BIArchiveOpenCallback@@@ DD 00H ; CArchiveOpenCallback_Offset::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCArchiveOpenCallback_Offset@@@8
	DD	FLAT:??_R3CArchiveOpenCallback_Offset@@8
rdata$r	ENDS
;	COMDAT ??_7CArchiveOpenCallback_Offset@@6BICryptoGetTextPassword@@@
CONST	SEGMENT
??_7CArchiveOpenCallback_Offset@@6BICryptoGetTextPassword@@@ DD FLAT:??_R4CArchiveOpenCallback_Offset@@6BICryptoGetTextPassword@@@ ; CArchiveOpenCallback_Offset::`vftable'
	DD	FLAT:?QueryInterface@CArchiveOpenCallback_Offset@@W3AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CArchiveOpenCallback_Offset@@W3AGKXZ
	DD	FLAT:?Release@CArchiveOpenCallback_Offset@@W3AGKXZ
	DD	FLAT:?CryptoGetTextPassword@CArchiveOpenCallback_Offset@@UAGJPAPA_W@Z
CONST	ENDS
;	COMDAT ??_7CArchiveOpenCallback_Offset@@6BIArchiveOpenCallback@@@
CONST	SEGMENT
??_7CArchiveOpenCallback_Offset@@6BIArchiveOpenCallback@@@ DD FLAT:??_R4CArchiveOpenCallback_Offset@@6BIArchiveOpenCallback@@@ ; CArchiveOpenCallback_Offset::`vftable'
	DD	FLAT:?QueryInterface@CArchiveOpenCallback_Offset@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CArchiveOpenCallback_Offset@@UAGKXZ
	DD	FLAT:?Release@CArchiveOpenCallback_Offset@@UAGKXZ
	DD	FLAT:?SetTotal@CArchiveOpenCallback_Offset@@UAGJPB_K0@Z
	DD	FLAT:?SetCompleted@CArchiveOpenCallback_Offset@@UAGJPB_K0@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CArchiveOpenCallback_Offset@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CArchiveOpenCallback_Offset@@QAE@XZ$0
__ehfuncinfo$??0CArchiveOpenCallback_Offset@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CArchiveOpenCallback_Offset@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CArchiveOpenCallback_Offset@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CArchiveOpenCallback_Offset@@QAE@XZ PROC		; CArchiveOpenCallback_Offset::CArchiveOpenCallback_Offset, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CArchiveOpenCallback_Offset@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IArchiveOpenCallback@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0ICryptoGetTextPassword@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CArchiveOpenCallback_Offset@@6BIArchiveOpenCallback@@@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], OFFSET ??_7CArchiveOpenCallback_Offset@@6BICryptoGetTextPassword@@@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::CMyComPtr<IArchiveOpenCallback>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??0?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::CMyComPtr<ICryptoGetTextPassword>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CArchiveOpenCallback_Offset@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>
__ehhandler$??0CArchiveOpenCallback_Offset@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CArchiveOpenCallback_Offset@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CArchiveOpenCallback_Offset@@QAE@XZ ENDP		; CArchiveOpenCallback_Offset::CArchiveOpenCallback_Offset
PUBLIC	??_7IArchiveOpenCallback@@6B@			; IArchiveOpenCallback::`vftable'
PUBLIC	??_R4IArchiveOpenCallback@@6B@			; IArchiveOpenCallback::`RTTI Complete Object Locator'
;	COMDAT ??_R4IArchiveOpenCallback@@6B@
rdata$r	SEGMENT
??_R4IArchiveOpenCallback@@6B@ DD 00H			; IArchiveOpenCallback::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIArchiveOpenCallback@@@8
	DD	FLAT:??_R3IArchiveOpenCallback@@8
rdata$r	ENDS
;	COMDAT ??_7IArchiveOpenCallback@@6B@
CONST	SEGMENT
??_7IArchiveOpenCallback@@6B@ DD FLAT:??_R4IArchiveOpenCallback@@6B@ ; IArchiveOpenCallback::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0IArchiveOpenCallback@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IArchiveOpenCallback@@QAE@XZ PROC			; IArchiveOpenCallback::IArchiveOpenCallback, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7IArchiveOpenCallback@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0IArchiveOpenCallback@@QAE@XZ ENDP			; IArchiveOpenCallback::IArchiveOpenCallback
_TEXT	ENDS
PUBLIC	??_7ICryptoGetTextPassword@@6B@			; ICryptoGetTextPassword::`vftable'
PUBLIC	??_R4ICryptoGetTextPassword@@6B@		; ICryptoGetTextPassword::`RTTI Complete Object Locator'
;	COMDAT ??_R4ICryptoGetTextPassword@@6B@
rdata$r	SEGMENT
??_R4ICryptoGetTextPassword@@6B@ DD 00H			; ICryptoGetTextPassword::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUICryptoGetTextPassword@@@8
	DD	FLAT:??_R3ICryptoGetTextPassword@@8
rdata$r	ENDS
;	COMDAT ??_7ICryptoGetTextPassword@@6B@
CONST	SEGMENT
??_7ICryptoGetTextPassword@@6B@ DD FLAT:??_R4ICryptoGetTextPassword@@6B@ ; ICryptoGetTextPassword::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ICryptoGetTextPassword@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ICryptoGetTextPassword@@QAE@XZ PROC			; ICryptoGetTextPassword::ICryptoGetTextPassword, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ICryptoGetTextPassword@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ICryptoGetTextPassword@@QAE@XZ ENDP			; ICryptoGetTextPassword::ICryptoGetTextPassword
_TEXT	ENDS
EXTRN	_IID_IArchiveOpenCallback:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@CArchiveOpenCallback_Offset@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
tv92 = -4						; size = 4
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CArchiveOpenCallback_Offset@@UAGJABU_GUID@@PAPAX@Z PROC ; CArchiveOpenCallback_Offset::QueryInterface, COMDAT
; Line 1100
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN6@QueryInter@6
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN5@QueryInter@6
$LN6@QueryInter@6:
	push	OFFSET _IID_IArchiveOpenCallback
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@QueryInter@6
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN5@QueryInter@6
$LN4@QueryInter@6:
	push	OFFSET _IID_ICryptoGetTextPassword
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@6
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN9@QueryInter@6
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	mov	DWORD PTR tv92[ebp], edx
	jmp	SHORT $LN10@QueryInter@6
$LN9@QueryInter@6:
	mov	DWORD PTR tv92[ebp], 0
$LN10@QueryInter@6:
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	ecx, DWORD PTR tv92[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN5@QueryInter@6
$LN2@QueryInter@6:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN7@QueryInter@6
$LN5@QueryInter@6:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax
	xor	eax, eax
$LN7@QueryInter@6:
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CArchiveOpenCallback_Offset@@UAGJABU_GUID@@PAPAX@Z ENDP ; CArchiveOpenCallback_Offset::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CArchiveOpenCallback_Offset@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CArchiveOpenCallback_Offset@@UAGKXZ PROC	; CArchiveOpenCallback_Offset::AddRef, COMDAT
; Line 1100
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CArchiveOpenCallback_Offset@@UAGKXZ ENDP	; CArchiveOpenCallback_Offset::AddRef
_TEXT	ENDS
PUBLIC	??_GCArchiveOpenCallback_Offset@@QAEPAXI@Z	; CArchiveOpenCallback_Offset::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CArchiveOpenCallback_Offset@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T78115 = -8						; size = 4
$T78114 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CArchiveOpenCallback_Offset@@UAGKXZ PROC	; CArchiveOpenCallback_Offset::Release, COMDAT
; Line 1100
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+8], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	jmp	SHORT $LN2@Release@6
$LN1@Release@6:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T78115[ebp], edx
	mov	eax, DWORD PTR $T78115[ebp]
	mov	DWORD PTR $T78114[ebp], eax
	cmp	DWORD PTR $T78114[ebp], 0
	je	SHORT $LN4@Release@6
	push	1
	mov	ecx, DWORD PTR $T78114[ebp]
	call	??_GCArchiveOpenCallback_Offset@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release@6
$LN4@Release@6:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release@6:
	xor	eax, eax
$LN2@Release@6:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CArchiveOpenCallback_Offset@@UAGKXZ ENDP	; CArchiveOpenCallback_Offset::Release
_TEXT	ENDS
PUBLIC	??1CArchiveOpenCallback_Offset@@QAE@XZ		; CArchiveOpenCallback_Offset::~CArchiveOpenCallback_Offset
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCArchiveOpenCallback_Offset@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCArchiveOpenCallback_Offset@@QAEPAXI@Z PROC		; CArchiveOpenCallback_Offset::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CArchiveOpenCallback_Offset@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@6
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@6:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCArchiveOpenCallback_Offset@@QAEPAXI@Z ENDP		; CArchiveOpenCallback_Offset::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CArchiveOpenCallback_Offset@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CArchiveOpenCallback_Offset@@QAE@XZ$0
__ehfuncinfo$??1CArchiveOpenCallback_Offset@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CArchiveOpenCallback_Offset@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CArchiveOpenCallback_Offset@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CArchiveOpenCallback_Offset@@QAE@XZ PROC		; CArchiveOpenCallback_Offset::~CArchiveOpenCallback_Offset, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CArchiveOpenCallback_Offset@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CArchiveOpenCallback_Offset@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>
__ehhandler$??1CArchiveOpenCallback_Offset@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CArchiveOpenCallback_Offset@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CArchiveOpenCallback_Offset@@QAE@XZ ENDP		; CArchiveOpenCallback_Offset::~CArchiveOpenCallback_Offset
PUBLIC	??_7CLimitedCachedInStream@@6B@			; CLimitedCachedInStream::`vftable'
PUBLIC	??0IInStream@@QAE@XZ				; IInStream::IInStream
PUBLIC	??_R4CLimitedCachedInStream@@6B@		; CLimitedCachedInStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCLimitedCachedInStream@@@8		; CLimitedCachedInStream `RTTI Type Descriptor'
PUBLIC	??_R3CLimitedCachedInStream@@8			; CLimitedCachedInStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CLimitedCachedInStream@@8			; CLimitedCachedInStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CLimitedCachedInStream@@8		; CLimitedCachedInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@IInStream@@8			; IInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIInStream@@@8				; IInStream `RTTI Type Descriptor'
PUBLIC	??_R3IInStream@@8				; IInStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IInStream@@8				; IInStream::`RTTI Base Class Array'
PUBLIC	?QueryInterface@CLimitedCachedInStream@@UAGJABU_GUID@@PAPAX@Z ; CLimitedCachedInStream::QueryInterface
PUBLIC	?AddRef@CLimitedCachedInStream@@UAGKXZ		; CLimitedCachedInStream::AddRef
PUBLIC	?Release@CLimitedCachedInStream@@UAGKXZ		; CLimitedCachedInStream::Release
EXTRN	?Read@CLimitedCachedInStream@@UAGJPAXIPAI@Z:PROC ; CLimitedCachedInStream::Read
EXTRN	?Seek@CLimitedCachedInStream@@UAGJ_JIPA_K@Z:PROC ; CLimitedCachedInStream::Seek
;	COMDAT ??_R2IInStream@@8
rdata$r	SEGMENT
??_R2IInStream@@8 DD FLAT:??_R1A@?0A@EA@IInStream@@8	; IInStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ISequentialInStream@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3IInStream@@8
rdata$r	SEGMENT
??_R3IInStream@@8 DD 00H				; IInStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2IInStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIInStream@@@8
_DATA	SEGMENT
??_R0?AUIInStream@@@8 DD FLAT:??_7type_info@@6B@	; IInStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIInStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IInStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IInStream@@8 DD FLAT:??_R0?AUIInStream@@@8 ; IInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IInStream@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CLimitedCachedInStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CLimitedCachedInStream@@8 DD FLAT:??_R0?AVCLimitedCachedInStream@@@8 ; CLimitedCachedInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CLimitedCachedInStream@@8
rdata$r	ENDS
;	COMDAT ??_R2CLimitedCachedInStream@@8
rdata$r	SEGMENT
??_R2CLimitedCachedInStream@@8 DD FLAT:??_R1A@?0A@EA@CLimitedCachedInStream@@8 ; CLimitedCachedInStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IInStream@@8
	DD	FLAT:??_R1A@?0A@EA@ISequentialInStream@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CLimitedCachedInStream@@8
rdata$r	SEGMENT
??_R3CLimitedCachedInStream@@8 DD 00H			; CLimitedCachedInStream::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2CLimitedCachedInStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCLimitedCachedInStream@@@8
_DATA	SEGMENT
??_R0?AVCLimitedCachedInStream@@@8 DD FLAT:??_7type_info@@6B@ ; CLimitedCachedInStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCLimitedCachedInStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CLimitedCachedInStream@@6B@
rdata$r	SEGMENT
??_R4CLimitedCachedInStream@@6B@ DD 00H			; CLimitedCachedInStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCLimitedCachedInStream@@@8
	DD	FLAT:??_R3CLimitedCachedInStream@@8
rdata$r	ENDS
;	COMDAT ??_7CLimitedCachedInStream@@6B@
CONST	SEGMENT
??_7CLimitedCachedInStream@@6B@ DD FLAT:??_R4CLimitedCachedInStream@@6B@ ; CLimitedCachedInStream::`vftable'
	DD	FLAT:?QueryInterface@CLimitedCachedInStream@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CLimitedCachedInStream@@UAGKXZ
	DD	FLAT:?Release@CLimitedCachedInStream@@UAGKXZ
	DD	FLAT:?Read@CLimitedCachedInStream@@UAGJPAXIPAI@Z
	DD	FLAT:?Seek@CLimitedCachedInStream@@UAGJ_JIPA_K@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CLimitedCachedInStream@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CLimitedCachedInStream@@QAE@XZ$0
__ehfuncinfo$??0CLimitedCachedInStream@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CLimitedCachedInStream@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CLimitedCachedInStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CLimitedCachedInStream@@QAE@XZ PROC			; CLimitedCachedInStream::CLimitedCachedInStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CLimitedCachedInStream@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IInStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CLimitedCachedInStream@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::CMyComPtr<IInStream>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??0?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::CBuffer<unsigned char>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CLimitedCachedInStream@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
__ehhandler$??0CLimitedCachedInStream@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CLimitedCachedInStream@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CLimitedCachedInStream@@QAE@XZ ENDP			; CLimitedCachedInStream::CLimitedCachedInStream
EXTRN	_IID_IInStream:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@CLimitedCachedInStream@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CLimitedCachedInStream@@UAGJABU_GUID@@PAPAX@Z PROC ; CLimitedCachedInStream::QueryInterface, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\common\limitedstreams.h
; Line 218
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN6@QueryInter@7
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN5@QueryInter@7
$LN6@QueryInter@7:
	push	OFFSET _IID_ISequentialInStream
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@QueryInter@7
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN5@QueryInter@7
$LN4@QueryInter@7:
	push	OFFSET _IID_IInStream
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@7
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN5@QueryInter@7
$LN2@QueryInter@7:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN7@QueryInter@7
$LN5@QueryInter@7:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	xor	eax, eax
$LN7@QueryInter@7:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CLimitedCachedInStream@@UAGJABU_GUID@@PAPAX@Z ENDP ; CLimitedCachedInStream::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CLimitedCachedInStream@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CLimitedCachedInStream@@UAGKXZ PROC		; CLimitedCachedInStream::AddRef, COMDAT
; Line 218
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CLimitedCachedInStream@@UAGKXZ ENDP		; CLimitedCachedInStream::AddRef
_TEXT	ENDS
PUBLIC	??_GCLimitedCachedInStream@@QAEPAXI@Z		; CLimitedCachedInStream::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CLimitedCachedInStream@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T78147 = -8						; size = 4
$T78146 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CLimitedCachedInStream@@UAGKXZ PROC		; CLimitedCachedInStream::Release, COMDAT
; Line 218
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	jmp	SHORT $LN2@Release@7
$LN1@Release@7:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T78147[ebp], edx
	mov	eax, DWORD PTR $T78147[ebp]
	mov	DWORD PTR $T78146[ebp], eax
	cmp	DWORD PTR $T78146[ebp], 0
	je	SHORT $LN4@Release@7
	push	1
	mov	ecx, DWORD PTR $T78146[ebp]
	call	??_GCLimitedCachedInStream@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release@7
$LN4@Release@7:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release@7:
	xor	eax, eax
$LN2@Release@7:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CLimitedCachedInStream@@UAGKXZ ENDP		; CLimitedCachedInStream::Release
_TEXT	ENDS
PUBLIC	??1CLimitedCachedInStream@@QAE@XZ		; CLimitedCachedInStream::~CLimitedCachedInStream
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCLimitedCachedInStream@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCLimitedCachedInStream@@QAEPAXI@Z PROC		; CLimitedCachedInStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CLimitedCachedInStream@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@7
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@7:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCLimitedCachedInStream@@QAEPAXI@Z ENDP		; CLimitedCachedInStream::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CLimitedCachedInStream@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CLimitedCachedInStream@@QAE@XZ$0
__ehfuncinfo$??1CLimitedCachedInStream@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CLimitedCachedInStream@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CLimitedCachedInStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CLimitedCachedInStream@@QAE@XZ PROC			; CLimitedCachedInStream::~CLimitedCachedInStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CLimitedCachedInStream@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CLimitedCachedInStream@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
__ehhandler$??1CLimitedCachedInStream@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CLimitedCachedInStream@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CLimitedCachedInStream@@QAE@XZ ENDP			; CLimitedCachedInStream::~CLimitedCachedInStream
PUBLIC	??_7IArchiveExtractCallback@@6B@		; IArchiveExtractCallback::`vftable'
PUBLIC	??0IProgress@@QAE@XZ				; IProgress::IProgress
PUBLIC	??_R4IArchiveExtractCallback@@6B@		; IArchiveExtractCallback::`RTTI Complete Object Locator'
;	COMDAT ??_R4IArchiveExtractCallback@@6B@
rdata$r	SEGMENT
??_R4IArchiveExtractCallback@@6B@ DD 00H		; IArchiveExtractCallback::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIArchiveExtractCallback@@@8
	DD	FLAT:??_R3IArchiveExtractCallback@@8
rdata$r	ENDS
;	COMDAT ??_7IArchiveExtractCallback@@6B@
CONST	SEGMENT
??_7IArchiveExtractCallback@@6B@ DD FLAT:??_R4IArchiveExtractCallback@@6B@ ; IArchiveExtractCallback::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0IArchiveExtractCallback@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IArchiveExtractCallback@@QAE@XZ PROC			; IArchiveExtractCallback::IArchiveExtractCallback, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IProgress@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7IArchiveExtractCallback@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0IArchiveExtractCallback@@QAE@XZ ENDP			; IArchiveExtractCallback::IArchiveExtractCallback
_TEXT	ENDS
PUBLIC	??_7ICompressProgressInfo@@6B@			; ICompressProgressInfo::`vftable'
PUBLIC	??_R4ICompressProgressInfo@@6B@			; ICompressProgressInfo::`RTTI Complete Object Locator'
;	COMDAT ??_R4ICompressProgressInfo@@6B@
rdata$r	SEGMENT
??_R4ICompressProgressInfo@@6B@ DD 00H			; ICompressProgressInfo::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUICompressProgressInfo@@@8
	DD	FLAT:??_R3ICompressProgressInfo@@8
rdata$r	ENDS
;	COMDAT ??_7ICompressProgressInfo@@6B@
CONST	SEGMENT
??_7ICompressProgressInfo@@6B@ DD FLAT:??_R4ICompressProgressInfo@@6B@ ; ICompressProgressInfo::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ICompressProgressInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ICompressProgressInfo@@QAE@XZ PROC			; ICompressProgressInfo::ICompressProgressInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ICompressProgressInfo@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ICompressProgressInfo@@QAE@XZ ENDP			; ICompressProgressInfo::ICompressProgressInfo
_TEXT	ENDS
PUBLIC	??_7IInStream@@6B@				; IInStream::`vftable'
PUBLIC	??_R4IInStream@@6B@				; IInStream::`RTTI Complete Object Locator'
;	COMDAT ??_R4IInStream@@6B@
rdata$r	SEGMENT
??_R4IInStream@@6B@ DD 00H				; IInStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIInStream@@@8
	DD	FLAT:??_R3IInStream@@8
rdata$r	ENDS
;	COMDAT ??_7IInStream@@6B@
CONST	SEGMENT
??_7IInStream@@6B@ DD FLAT:??_R4IInStream@@6B@		; IInStream::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0IInStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IInStream@@QAE@XZ PROC				; IInStream::IInStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ISequentialInStream@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7IInStream@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0IInStream@@QAE@XZ ENDP				; IInStream::IInStream
_TEXT	ENDS
PUBLIC	??_7IProgress@@6B@				; IProgress::`vftable'
PUBLIC	??_R4IProgress@@6B@				; IProgress::`RTTI Complete Object Locator'
;	COMDAT ??_R4IProgress@@6B@
rdata$r	SEGMENT
??_R4IProgress@@6B@ DD 00H				; IProgress::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIProgress@@@8
	DD	FLAT:??_R3IProgress@@8
rdata$r	ENDS
;	COMDAT ??_7IProgress@@6B@
CONST	SEGMENT
??_7IProgress@@6B@ DD FLAT:??_R4IProgress@@6B@		; IProgress::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0IProgress@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IProgress@@QAE@XZ PROC				; IProgress::IProgress, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7IProgress@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0IProgress@@QAE@XZ ENDP				; IProgress::IProgress
_TEXT	ENDS
PUBLIC	?Size@?$CObjectVector@UCArcExtInfo@@@@QBEIXZ	; CObjectVector<CArcExtInfo>::Size
PUBLIC	??I?$CMyComPtr@UIArchiveGetRootProps@@@@QAEPAPAUIArchiveGetRootProps@@XZ ; CMyComPtr<IArchiveGetRootProps>::operator&
PUBLIC	??I?$CMyComPtr@UIArchiveGetRawProps@@@@QAEPAPAUIArchiveGetRawProps@@XZ ; CMyComPtr<IArchiveGetRawProps>::operator&
PUBLIC	?OpenStream@CArc@@QAEJABUCOpenOptions@@@Z	; CArc::OpenStream
EXTRN	?GetDefaultName2@@YG?AVUString@@ABV1@00@Z:PROC	; GetDefaultName2
EXTRN	_IID_IArchiveGetRootProps:BYTE
EXTRN	_IID_IArchiveGetRawProps:BYTE
xdata$x	SEGMENT
__ehfuncinfo$?OpenStream@CArc@@QAEJABUCOpenOptions@@@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?OpenStream@CArc@@QAEJABUCOpenOptions@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?OpenStream@CArc@@QAEJABUCOpenOptions@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?OpenStream@CArc@@QAEJABUCOpenOptions@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?OpenStream@CArc@@QAEJABUCOpenOptions@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?OpenStream@CArc@@QAEJABUCOpenOptions@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?OpenStream@CArc@@QAEJABUCOpenOptions@@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?OpenStream@CArc@@QAEJABUCOpenOptions@@@Z$4
	DD	01H
	DD	FLAT:__unwindfunclet$?OpenStream@CArc@@QAEJABUCOpenOptions@@@Z$5
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv261 = -188						; size = 4
tv263 = -184						; size = 4
tv259 = -180						; size = 4
tv262 = -176						; size = 4
tv257 = -172						; size = 4
tv185 = -168						; size = 4
tv255 = -164						; size = 4
tv191 = -160						; size = 4
tv129 = -156						; size = 4
tv82 = -152						; size = 4
$T78175 = -148						; size = 12
$T78174 = -136						; size = 12
$T78173 = -124						; size = 12
$T78172 = -112						; size = 12
_extInfo$75010 = -100					; size = 4
_subExtIndex$75008 = -96				; size = 4
_ai$75002 = -92						; size = 4
_dotPos$74999 = -88					; size = 4
_extension$74998 = -80					; size = 12
_fileName$74996 = -60					; size = 12
___result__$74994 = -44					; size = 4
___result__$74992 = -40					; size = 4
___result__$74990 = -36					; size = 4
___result__$74988 = -32					; size = 4
___result__$74986 = -28					; size = 4
___result__$74984 = -24					; size = 4
___result__$74979 = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_op$ = 8						; size = 4
?OpenStream@CArc@@QAEJABUCOpenOptions@@@Z PROC		; CArc::OpenStream
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\openarchive.cpp
; Line 2828
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?OpenStream@CArc@@QAEJABUCOpenOptions@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 176				; 000000b0H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-188]
	mov	ecx, 44					; 0000002cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 2829
	mov	eax, DWORD PTR _op$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?OpenStream2@CArc@@AAEJABUCOpenOptions@@@Z ; CArc::OpenStream2
	mov	DWORD PTR ___result__$74979[ebp], eax
	cmp	DWORD PTR ___result__$74979[ebp], 0
	je	SHORT $LN13@OpenStream@2
	mov	eax, DWORD PTR ___result__$74979[ebp]
	jmp	$LN14@OpenStream@2
$LN13@OpenStream@2:
; Line 2832
	mov	ecx, DWORD PTR _this$[ebp]
	call	??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator IInArchive *
	test	eax, eax
	je	$LN12@OpenStream@2
; Line 2834
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Release@?$CMyComPtr@UIArchiveGetRawProps@@@@QAEXXZ ; CMyComPtr<IArchiveGetRawProps>::Release
; Line 2835
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Release@?$CMyComPtr@UIArchiveGetRootProps@@@@QAEXXZ ; CMyComPtr<IArchiveGetRootProps>::Release
; Line 2836
	mov	ecx, DWORD PTR _this$[ebp]
	call	??C?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator->
	mov	DWORD PTR tv82[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??I?$CMyComPtr@UIArchiveGetRawProps@@@@QAEPAPAUIArchiveGetRawProps@@XZ ; CMyComPtr<IArchiveGetRawProps>::operator&
	mov	esi, esp
	push	eax
	push	OFFSET _IID_IArchiveGetRawProps
	mov	ecx, DWORD PTR tv82[ebp]
	push	ecx
	mov	edx, DWORD PTR tv82[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2837
	mov	ecx, DWORD PTR _this$[ebp]
	call	??C?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator->
	mov	DWORD PTR tv129[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??I?$CMyComPtr@UIArchiveGetRootProps@@@@QAEPAPAUIArchiveGetRootProps@@XZ ; CMyComPtr<IArchiveGetRootProps>::operator&
	mov	esi, esp
	push	eax
	push	OFFSET _IID_IArchiveGetRootProps
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	mov	eax, DWORD PTR tv129[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2839
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 217				; 000000d9H
	push	eax
	push	66					; 00000042H
	mov	ecx, DWORD PTR _this$[ebp]
	call	??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator IInArchive *
	push	eax
	call	?Archive_GetArcBoolProp@@YGJPAUIInArchive@@KAA_N@Z ; Archive_GetArcBoolProp
	mov	DWORD PTR ___result__$74984[ebp], eax
	cmp	DWORD PTR ___result__$74984[ebp], 0
	je	SHORT $LN11@OpenStream@2
	mov	eax, DWORD PTR ___result__$74984[ebp]
	jmp	$LN14@OpenStream@2
$LN11@OpenStream@2:
; Line 2840
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 219				; 000000dbH
	push	ecx
	push	65					; 00000041H
	mov	ecx, DWORD PTR _this$[ebp]
	call	??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator IInArchive *
	push	eax
	call	?Archive_GetArcBoolProp@@YGJPAUIInArchive@@KAA_N@Z ; Archive_GetArcBoolProp
	mov	DWORD PTR ___result__$74986[ebp], eax
	cmp	DWORD PTR ___result__$74986[ebp], 0
	je	SHORT $LN10@OpenStream@2
	mov	eax, DWORD PTR ___result__$74986[ebp]
	jmp	$LN14@OpenStream@2
$LN10@OpenStream@2:
; Line 2841
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 220				; 000000dcH
	push	edx
	push	63					; 0000003fH
	mov	ecx, DWORD PTR _this$[ebp]
	call	??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator IInArchive *
	push	eax
	call	?Archive_GetArcBoolProp@@YGJPAUIInArchive@@KAA_N@Z ; Archive_GetArcBoolProp
	mov	DWORD PTR ___result__$74988[ebp], eax
	cmp	DWORD PTR ___result__$74988[ebp], 0
	je	SHORT $LN9@OpenStream@2
	mov	eax, DWORD PTR ___result__$74988[ebp]
	jmp	$LN14@OpenStream@2
$LN9@OpenStream@2:
; Line 2842
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 221				; 000000ddH
	push	eax
	push	64					; 00000040H
	mov	ecx, DWORD PTR _this$[ebp]
	call	??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator IInArchive *
	push	eax
	call	?Archive_GetArcBoolProp@@YGJPAUIInArchive@@KAA_N@Z ; Archive_GetArcBoolProp
	mov	DWORD PTR ___result__$74990[ebp], eax
	cmp	DWORD PTR ___result__$74990[ebp], 0
	je	SHORT $LN8@OpenStream@2
	mov	eax, DWORD PTR ___result__$74990[ebp]
	jmp	$LN14@OpenStream@2
$LN8@OpenStream@2:
; Line 2843
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 222				; 000000deH
	push	ecx
	push	91					; 0000005bH
	mov	ecx, DWORD PTR _this$[ebp]
	call	??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator IInArchive *
	push	eax
	call	?Archive_GetArcBoolProp@@YGJPAUIInArchive@@KAA_N@Z ; Archive_GetArcBoolProp
	mov	DWORD PTR ___result__$74992[ebp], eax
	cmp	DWORD PTR ___result__$74992[ebp], 0
	je	SHORT $LN7@OpenStream@2
	mov	eax, DWORD PTR ___result__$74992[ebp]
	jmp	$LN14@OpenStream@2
$LN7@OpenStream@2:
; Line 2844
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 218				; 000000daH
	push	edx
	push	93					; 0000005dH
	mov	ecx, DWORD PTR _this$[ebp]
	call	??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator IInArchive *
	push	eax
	call	?Archive_GetArcBoolProp@@YGJPAUIInArchive@@KAA_N@Z ; Archive_GetArcBoolProp
	mov	DWORD PTR ___result__$74994[ebp], eax
	cmp	DWORD PTR ___result__$74994[ebp], 0
	je	SHORT $LN6@OpenStream@2
	mov	eax, DWORD PTR ___result__$74994[ebp]
	jmp	$LN14@OpenStream@2
$LN6@OpenStream@2:
; Line 2846
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 112				; 00000070H
	push	eax
	lea	ecx, DWORD PTR _fileName$74996[ebp]
	push	ecx
	call	?ExtractFileNameFromPath@@YG?AVUString@@ABV1@@Z ; ExtractFileNameFromPath
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 2847
	lea	ecx, DWORD PTR _extension$74998[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
; Line 2849
	lea	ecx, DWORD PTR _fileName$74996[ebp]
	call	?ReverseFind_Dot@UString@@QBEHXZ	; UString::ReverseFind_Dot
	mov	DWORD PTR _dotPos$74999[ebp], eax
; Line 2850
	cmp	DWORD PTR _dotPos$74999[ebp], 0
	jl	SHORT $LN5@OpenStream@2
; Line 2851
	mov	edx, DWORD PTR _dotPos$74999[ebp]
	add	edx, 1
	push	edx
	lea	ecx, DWORD PTR _fileName$74996[ebp]
	call	?Ptr@UString@@QBEPB_WI@Z		; UString::Ptr
	push	eax
	lea	ecx, DWORD PTR _extension$74998[ebp]
	call	??4UString@@QAEAAV0@PB_W@Z		; UString::operator=
$LN5@OpenStream@2:
; Line 2854
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 136				; 00000088H
	call	?Empty@UString@@QAEXXZ			; UString::Empty
; Line 2855
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+148], 0
	jl	$LN4@OpenStream@2
; Line 2857
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+148]
	push	edx
	mov	eax, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 8
	call	??A?$CObjectVector@UCArcInfoEx@@@@QAEAAUCArcInfoEx@@I@Z ; CObjectVector<CArcInfoEx>::operator[]
	mov	DWORD PTR _ai$75002[ebp], eax
; Line 2858
	mov	ecx, DWORD PTR _ai$75002[ebp]
	add	ecx, 24					; 00000018H
	call	?Size@?$CObjectVector@UCArcExtInfo@@@@QBEIXZ ; CObjectVector<CArcExtInfo>::Size
	test	eax, eax
	jne	$LN3@OpenStream@2
; Line 2859
	lea	ecx, DWORD PTR $T78172[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR tv191[ebp], eax
	mov	ecx, DWORD PTR tv191[ebp]
	mov	DWORD PTR tv255[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	edx, DWORD PTR tv255[ebp]
	push	edx
	lea	ecx, DWORD PTR $T78173[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR tv185[ebp], eax
	mov	eax, DWORD PTR tv185[ebp]
	mov	DWORD PTR tv257[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR tv257[ebp]
	push	ecx
	lea	edx, DWORD PTR _fileName$74996[ebp]
	push	edx
	lea	eax, DWORD PTR $T78174[ebp]
	push	eax
	call	?GetDefaultName2@@YG?AVUString@@ABV1@00@Z ; GetDefaultName2
	mov	DWORD PTR tv262[ebp], eax
	mov	ecx, DWORD PTR tv262[ebp]
	mov	DWORD PTR tv259[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	edx, DWORD PTR tv259[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 136				; 00000088H
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR $T78174[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T78173[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T78172[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
; Line 2860
	jmp	$LN4@OpenStream@2
$LN3@OpenStream@2:
; Line 2862
	lea	eax, DWORD PTR _extension$74998[ebp]
	push	eax
	mov	ecx, DWORD PTR _ai$75002[ebp]
	call	?FindExtension@CArcInfoEx@@QBEHABVUString@@@Z ; CArcInfoEx::FindExtension
	mov	DWORD PTR _subExtIndex$75008[ebp], eax
; Line 2863
	cmp	DWORD PTR _subExtIndex$75008[ebp], 0
	jge	SHORT $LN1@OpenStream@2
; Line 2864
	mov	DWORD PTR _subExtIndex$75008[ebp], 0
$LN1@OpenStream@2:
; Line 2865
	mov	ecx, DWORD PTR _subExtIndex$75008[ebp]
	push	ecx
	mov	ecx, DWORD PTR _ai$75002[ebp]
	add	ecx, 24					; 00000018H
	call	??A?$CObjectVector@UCArcExtInfo@@@@QBEABUCArcExtInfo@@I@Z ; CObjectVector<CArcExtInfo>::operator[]
	mov	DWORD PTR _extInfo$75010[ebp], eax
; Line 2866
	mov	edx, DWORD PTR _extInfo$75010[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	eax, DWORD PTR _extInfo$75010[ebp]
	push	eax
	lea	ecx, DWORD PTR _fileName$74996[ebp]
	push	ecx
	lea	edx, DWORD PTR $T78175[ebp]
	push	edx
	call	?GetDefaultName2@@YG?AVUString@@ABV1@00@Z ; GetDefaultName2
	mov	DWORD PTR tv263[ebp], eax
	mov	eax, DWORD PTR tv263[ebp]
	mov	DWORD PTR tv261[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR tv261[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 136				; 00000088H
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T78175[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
$LN4@OpenStream@2:
; Line 2869
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extension$74998[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _fileName$74996[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
$LN12@OpenStream@2:
; Line 2871
	xor	eax, eax
$LN14@OpenStream@2:
; Line 2872
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN26@OpenStream@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 188				; 000000bcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN26@OpenStream@2:
	DD	2
	DD	$LN25@OpenStream@2
$LN25@OpenStream@2:
	DD	-60					; ffffffc4H
	DD	12					; 0000000cH
	DD	$LN22@OpenStream@2
	DD	-80					; ffffffb0H
	DD	12					; 0000000cH
	DD	$LN23@OpenStream@2
$LN23@OpenStream@2:
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	0
$LN22@OpenStream@2:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	78					; 0000004eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?OpenStream@CArc@@QAEJABUCOpenOptions@@@Z$0:
	lea	ecx, DWORD PTR _fileName$74996[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?OpenStream@CArc@@QAEJABUCOpenOptions@@@Z$1:
	lea	ecx, DWORD PTR _extension$74998[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?OpenStream@CArc@@QAEJABUCOpenOptions@@@Z$2:
	lea	ecx, DWORD PTR $T78172[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?OpenStream@CArc@@QAEJABUCOpenOptions@@@Z$3:
	lea	ecx, DWORD PTR $T78173[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?OpenStream@CArc@@QAEJABUCOpenOptions@@@Z$4:
	lea	ecx, DWORD PTR $T78174[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?OpenStream@CArc@@QAEJABUCOpenOptions@@@Z$5:
	lea	ecx, DWORD PTR $T78175[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$?OpenStream@CArc@@QAEJABUCOpenOptions@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-188]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?OpenStream@CArc@@QAEJABUCOpenOptions@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?OpenStream@CArc@@QAEJABUCOpenOptions@@@Z ENDP		; CArc::OpenStream
PUBLIC	?Open@CInFileStream@@QAE_NPB_W@Z		; CInFileStream::Open
PUBLIC	??0CStdInFileStream@@QAE@XZ			; CStdInFileStream::CStdInFileStream
PUBLIC	?OpenStreamOrFile@CArc@@QAEJAAUCOpenOptions@@@Z	; CArc::OpenStreamOrFile
EXTRN	__imp__GetLastError@0:PROC
EXTRN	??0CInFileStream@@QAE@XZ:PROC			; CInFileStream::CInFileStream
xdata$x	SEGMENT
__unwindtable$?OpenStreamOrFile@CArc@@QAEJAAUCOpenOptions@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?OpenStreamOrFile@CArc@@QAEJAAUCOpenOptions@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?OpenStreamOrFile@CArc@@QAEJAAUCOpenOptions@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?OpenStreamOrFile@CArc@@QAEJAAUCOpenOptions@@@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?OpenStreamOrFile@CArc@@QAEJAAUCOpenOptions@@@Z$3
__ehfuncinfo$?OpenStreamOrFile@CArc@@QAEJAAUCOpenOptions@@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?OpenStreamOrFile@CArc@@QAEJAAUCOpenOptions@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv130 = -80						; size = 4
tv85 = -76						; size = 4
$T78200 = -72						; size = 4
$T78199 = -68						; size = 4
$T78196 = -64						; size = 4
$T78195 = -60						; size = 4
$T78192 = -56						; size = 4
$T78191 = -52						; size = 4
_res$ = -48						; size = 4
_fileStreamSpec$ = -44					; size = 4
_seqStream$ = -36					; size = 4
_fileStream$ = -24					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_op$ = 8						; size = 4
?OpenStreamOrFile@CArc@@QAEJAAUCOpenOptions@@@Z PROC	; CArc::OpenStreamOrFile
; _this$ = ecx
; Line 2887
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?OpenStreamOrFile@CArc@@QAEJAAUCOpenOptions@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-80]
	mov	ecx, 17					; 00000011H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 2888
	lea	ecx, DWORD PTR _fileStream$[ebp]
	call	??0?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::CMyComPtr<IInStream>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 2889
	lea	ecx, DWORD PTR _seqStream$[ebp]
	call	??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
; Line 2890
	mov	DWORD PTR _fileStreamSpec$[ebp], 0
; Line 2892
	mov	eax, DWORD PTR _op$[ebp]
	movzx	ecx, BYTE PTR [eax+68]
	test	ecx, ecx
	je	SHORT $LN4@OpenStream@3
; Line 2894
	push	8
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T78192[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T78192[ebp], 0
	je	SHORT $LN7@OpenStream@3
	mov	ecx, DWORD PTR $T78192[ebp]
	call	??0CStdInFileStream@@QAE@XZ
	mov	DWORD PTR tv85[ebp], eax
	jmp	SHORT $LN8@OpenStream@3
$LN7@OpenStream@3:
	mov	DWORD PTR tv85[ebp], 0
$LN8@OpenStream@3:
	mov	edx, DWORD PTR tv85[ebp]
	mov	DWORD PTR $T78191[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR $T78191[ebp]
	push	eax
	lea	ecx, DWORD PTR _seqStream$[ebp]
	call	??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=
; Line 2895
	lea	ecx, DWORD PTR _seqStream$[ebp]
	call	??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
	mov	ecx, DWORD PTR _op$[ebp]
	mov	DWORD PTR [ecx+52], eax
	jmp	$LN3@OpenStream@3
$LN4@OpenStream@3:
; Line 2897
	mov	edx, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [edx+48], 0
	jne	$LN3@OpenStream@3
; Line 2899
	push	88					; 00000058H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T78196[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	cmp	DWORD PTR $T78196[ebp], 0
	je	SHORT $LN9@OpenStream@3
	mov	ecx, DWORD PTR $T78196[ebp]
	call	??0CInFileStream@@QAE@XZ		; CInFileStream::CInFileStream
	mov	DWORD PTR tv130[ebp], eax
	jmp	SHORT $LN10@OpenStream@3
$LN9@OpenStream@3:
	mov	DWORD PTR tv130[ebp], 0
$LN10@OpenStream@3:
	mov	eax, DWORD PTR tv130[ebp]
	mov	DWORD PTR $T78195[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR $T78195[ebp]
	mov	DWORD PTR _fileStreamSpec$[ebp], ecx
; Line 2900
	mov	edx, DWORD PTR _fileStreamSpec$[ebp]
	push	edx
	lea	ecx, DWORD PTR _fileStream$[ebp]
	call	??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ; CMyComPtr<IInStream>::operator=
; Line 2901
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 124				; 0000007cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
; Line 2902
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	mov	ecx, DWORD PTR _fileStreamSpec$[ebp]
	call	?Open@CInFileStream@@QAE_NPB_W@Z	; CInFileStream::Open
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN1@OpenStream@3
; Line 2904
	mov	esi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T78199[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _seqStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _fileStream$[ebp]
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
	mov	eax, DWORD PTR $T78199[ebp]
	jmp	SHORT $LN5@OpenStream@3
$LN1@OpenStream@3:
; Line 2906
	lea	ecx, DWORD PTR _fileStream$[ebp]
	call	??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *
	mov	edx, DWORD PTR _op$[ebp]
	mov	DWORD PTR [edx+48], eax
$LN3@OpenStream@3:
; Line 2921
	mov	eax, DWORD PTR _op$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?OpenStream@CArc@@QAEJABUCOpenOptions@@@Z ; CArc::OpenStream
	mov	DWORD PTR _res$[ebp], eax
; Line 2922
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+223], 0
; Line 2969
	mov	edx, DWORD PTR _res$[ebp]
	mov	DWORD PTR $T78200[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _seqStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _fileStream$[ebp]
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
	mov	eax, DWORD PTR $T78200[ebp]
$LN5@OpenStream@3:
; Line 2970
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@OpenStream@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 80					; 00000050H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN19@OpenStream@3:
	DD	2
	DD	$LN18@OpenStream@3
$LN18@OpenStream@3:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN15@OpenStream@3
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN16@OpenStream@3
$LN16@OpenStream@3:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	113					; 00000071H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN15@OpenStream@3:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?OpenStreamOrFile@CArc@@QAEJAAUCOpenOptions@@@Z$0:
	lea	ecx, DWORD PTR _fileStream$[ebp]
	jmp	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
__unwindfunclet$?OpenStreamOrFile@CArc@@QAEJAAUCOpenOptions@@@Z$1:
	lea	ecx, DWORD PTR _seqStream$[ebp]
	jmp	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
__unwindfunclet$?OpenStreamOrFile@CArc@@QAEJAAUCOpenOptions@@@Z$2:
	mov	eax, DWORD PTR $T78192[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?OpenStreamOrFile@CArc@@QAEJAAUCOpenOptions@@@Z$3:
	mov	eax, DWORD PTR $T78196[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?OpenStreamOrFile@CArc@@QAEJAAUCOpenOptions@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-80]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?OpenStreamOrFile@CArc@@QAEJAAUCOpenOptions@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?OpenStreamOrFile@CArc@@QAEJAAUCOpenOptions@@@Z ENDP	; CArc::OpenStreamOrFile
EXTRN	?Open@CInFile@NIO@NFile@NWindows@@QAE_NPB_W@Z:PROC ; NWindows::NFile::NIO::CInFile::Open
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Open@CInFileStream@@QAE_NPB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_fileName$ = 8						; size = 4
?Open@CInFileStream@@QAE_NPB_W@Z PROC			; CInFileStream::Open, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\filestreams.h
; Line 69
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 70
	mov	eax, DWORD PTR _fileName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?Open@CInFile@NIO@NFile@NWindows@@QAE_NPB_W@Z ; NWindows::NFile::NIO::CInFile::Open
; Line 71
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Open@CInFileStream@@QAE_NPB_W@Z ENDP			; CInFileStream::Open
_TEXT	ENDS
PUBLIC	??_7CStdInFileStream@@6B@			; CStdInFileStream::`vftable'
PUBLIC	??_R4CStdInFileStream@@6B@			; CStdInFileStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCStdInFileStream@@@8			; CStdInFileStream `RTTI Type Descriptor'
PUBLIC	??_R3CStdInFileStream@@8			; CStdInFileStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CStdInFileStream@@8			; CStdInFileStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CStdInFileStream@@8		; CStdInFileStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?QueryInterface@CStdInFileStream@@UAGJABU_GUID@@PAPAX@Z ; CStdInFileStream::QueryInterface
PUBLIC	?AddRef@CStdInFileStream@@UAGKXZ		; CStdInFileStream::AddRef
PUBLIC	?Release@CStdInFileStream@@UAGKXZ		; CStdInFileStream::Release
EXTRN	?Read@CStdInFileStream@@UAGJPAXIPAI@Z:PROC	; CStdInFileStream::Read
EXTRN	??_ECStdInFileStream@@UAEPAXI@Z:PROC		; CStdInFileStream::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CStdInFileStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CStdInFileStream@@8 DD FLAT:??_R0?AVCStdInFileStream@@@8 ; CStdInFileStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CStdInFileStream@@8
rdata$r	ENDS
;	COMDAT ??_R2CStdInFileStream@@8
rdata$r	SEGMENT
??_R2CStdInFileStream@@8 DD FLAT:??_R1A@?0A@EA@CStdInFileStream@@8 ; CStdInFileStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ISequentialInStream@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CStdInFileStream@@8
rdata$r	SEGMENT
??_R3CStdInFileStream@@8 DD 00H				; CStdInFileStream::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2CStdInFileStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCStdInFileStream@@@8
_DATA	SEGMENT
??_R0?AVCStdInFileStream@@@8 DD FLAT:??_7type_info@@6B@	; CStdInFileStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCStdInFileStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CStdInFileStream@@6B@
rdata$r	SEGMENT
??_R4CStdInFileStream@@6B@ DD 00H			; CStdInFileStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCStdInFileStream@@@8
	DD	FLAT:??_R3CStdInFileStream@@8
rdata$r	ENDS
;	COMDAT ??_7CStdInFileStream@@6B@
CONST	SEGMENT
??_7CStdInFileStream@@6B@ DD FLAT:??_R4CStdInFileStream@@6B@ ; CStdInFileStream::`vftable'
	DD	FLAT:?QueryInterface@CStdInFileStream@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CStdInFileStream@@UAGKXZ
	DD	FLAT:?Release@CStdInFileStream@@UAGKXZ
	DD	FLAT:?Read@CStdInFileStream@@UAGJPAXIPAI@Z
	DD	FLAT:??_ECStdInFileStream@@UAEPAXI@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CStdInFileStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CStdInFileStream@@QAE@XZ PROC			; CStdInFileStream::CStdInFileStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ISequentialInStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CStdInFileStream@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CStdInFileStream@@QAE@XZ ENDP			; CStdInFileStream::CStdInFileStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CStdInFileStream@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CStdInFileStream@@UAGJABU_GUID@@PAPAX@Z PROC ; CStdInFileStream::QueryInterface, COMDAT
; Line 102
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@8
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN1@QueryInter@8
$LN2@QueryInter@8:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN3@QueryInter@8
$LN1@QueryInter@8:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	xor	eax, eax
$LN3@QueryInter@8:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CStdInFileStream@@UAGJABU_GUID@@PAPAX@Z ENDP ; CStdInFileStream::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CStdInFileStream@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CStdInFileStream@@UAGKXZ PROC			; CStdInFileStream::AddRef, COMDAT
; Line 102
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CStdInFileStream@@UAGKXZ ENDP			; CStdInFileStream::AddRef
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CStdInFileStream@@UAGKXZ
_TEXT	SEGMENT
tv83 = -16						; size = 4
tv70 = -12						; size = 4
$T78223 = -8						; size = 4
$T78222 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CStdInFileStream@@UAGKXZ PROC			; CStdInFileStream::Release, COMDAT
; Line 102
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	jmp	SHORT $LN2@Release@8
$LN1@Release@8:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T78223[ebp], edx
	mov	eax, DWORD PTR $T78223[ebp]
	mov	DWORD PTR $T78222[ebp], eax
	cmp	DWORD PTR $T78222[ebp], 0
	je	SHORT $LN4@Release@8
	mov	esi, esp
	push	1
	mov	ecx, DWORD PTR $T78222[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T78222[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv83[ebp], eax
	jmp	SHORT $LN5@Release@8
$LN4@Release@8:
	mov	DWORD PTR tv83[ebp], 0
$LN5@Release@8:
	xor	eax, eax
$LN2@Release@8:
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CStdInFileStream@@UAGKXZ ENDP			; CStdInFileStream::Release
_TEXT	ENDS
PUBLIC	??1CStdInFileStream@@UAE@XZ			; CStdInFileStream::~CStdInFileStream
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCStdInFileStream@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCStdInFileStream@@UAEPAXI@Z PROC			; CStdInFileStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CStdInFileStream@@UAE@XZ		; CStdInFileStream::~CStdInFileStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@8
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@8:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCStdInFileStream@@UAEPAXI@Z ENDP			; CStdInFileStream::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CStdInFileStream@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CStdInFileStream@@UAE@XZ PROC			; CStdInFileStream::~CStdInFileStream, COMDAT
; _this$ = ecx
; Line 104
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CStdInFileStream@@6B@
	mov	esp, ebp
	pop	ebp
	ret	0
??1CStdInFileStream@@UAE@XZ ENDP			; CStdInFileStream::~CStdInFileStream
_TEXT	ENDS
PUBLIC	??1?$CMyComPtr@UIArchiveKeepModeForNextOpen@@@@QAE@XZ ; CMyComPtr<IArchiveKeepModeForNextOpen>::~CMyComPtr<IArchiveKeepModeForNextOpen>
PUBLIC	??C?$CMyComPtr@UIArchiveKeepModeForNextOpen@@@@QBEPAUIArchiveKeepModeForNextOpen@@XZ ; CMyComPtr<IArchiveKeepModeForNextOpen>::operator->
PUBLIC	??B?$CMyComPtr@UIArchiveKeepModeForNextOpen@@@@QBEPAUIArchiveKeepModeForNextOpen@@XZ ; CMyComPtr<IArchiveKeepModeForNextOpen>::operator IArchiveKeepModeForNextOpen *
PUBLIC	??I?$CMyComPtr@UIArchiveKeepModeForNextOpen@@@@QAEPAPAUIArchiveKeepModeForNextOpen@@XZ ; CMyComPtr<IArchiveKeepModeForNextOpen>::operator&
PUBLIC	??A?$CObjectVector@VCArc@@@@QAEAAVCArc@@I@Z	; CObjectVector<CArc>::operator[]
PUBLIC	??0?$CMyComPtr@UIArchiveKeepModeForNextOpen@@@@QAE@XZ ; CMyComPtr<IArchiveKeepModeForNextOpen>::CMyComPtr<IArchiveKeepModeForNextOpen>
PUBLIC	?Size@?$CObjectVector@VCArc@@@@QBEIXZ		; CObjectVector<CArc>::Size
PUBLIC	?KeepModeForNextOpen@CArchiveLink@@QAEXXZ	; CArchiveLink::KeepModeForNextOpen
EXTRN	_IID_IArchiveKeepModeForNextOpen:BYTE
xdata$x	SEGMENT
__unwindtable$?KeepModeForNextOpen@CArchiveLink@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?KeepModeForNextOpen@CArchiveLink@@QAEXXZ$0
__ehfuncinfo$?KeepModeForNextOpen@CArchiveLink@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?KeepModeForNextOpen@CArchiveLink@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv94 = -40						; size = 4
tv81 = -36						; size = 4
_keep$75083 = -28					; size = 4
_i$75042 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?KeepModeForNextOpen@CArchiveLink@@QAEXXZ PROC		; CArchiveLink::KeepModeForNextOpen
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\openarchive.cpp
; Line 2973
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?KeepModeForNextOpen@CArchiveLink@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 2974
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CObjectVector@VCArc@@@@QBEIXZ	; CObjectVector<CArc>::Size
	mov	DWORD PTR _i$75042[ebp], eax
$LN3@KeepModeFo:
	cmp	DWORD PTR _i$75042[ebp], 0
	je	$LN4@KeepModeFo
; Line 2976
	mov	eax, DWORD PTR _i$75042[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$75042[ebp], eax
; Line 2977
	lea	ecx, DWORD PTR _keep$75083[ebp]
	call	??0?$CMyComPtr@UIArchiveKeepModeForNextOpen@@@@QAE@XZ ; CMyComPtr<IArchiveKeepModeForNextOpen>::CMyComPtr<IArchiveKeepModeForNextOpen>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 2978
	mov	ecx, DWORD PTR _i$75042[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CObjectVector@VCArc@@@@QAEAAVCArc@@I@Z ; CObjectVector<CArc>::operator[]
	mov	ecx, eax
	call	??C?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator->
	mov	DWORD PTR tv81[ebp], eax
	lea	ecx, DWORD PTR _keep$75083[ebp]
	call	??I?$CMyComPtr@UIArchiveKeepModeForNextOpen@@@@QAEPAPAUIArchiveKeepModeForNextOpen@@XZ ; CMyComPtr<IArchiveKeepModeForNextOpen>::operator&
	mov	esi, esp
	push	eax
	push	OFFSET _IID_IArchiveKeepModeForNextOpen
	mov	edx, DWORD PTR tv81[ebp]
	push	edx
	mov	eax, DWORD PTR tv81[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2979
	lea	ecx, DWORD PTR _keep$75083[ebp]
	call	??B?$CMyComPtr@UIArchiveKeepModeForNextOpen@@@@QBEPAUIArchiveKeepModeForNextOpen@@XZ ; CMyComPtr<IArchiveKeepModeForNextOpen>::operator IArchiveKeepModeForNextOpen *
	test	eax, eax
	je	SHORT $LN1@KeepModeFo
; Line 2980
	lea	ecx, DWORD PTR _keep$75083[ebp]
	call	??C?$CMyComPtr@UIArchiveKeepModeForNextOpen@@@@QBEPAUIArchiveKeepModeForNextOpen@@XZ ; CMyComPtr<IArchiveKeepModeForNextOpen>::operator->
	mov	DWORD PTR tv94[ebp], eax
	mov	eax, DWORD PTR tv94[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR tv94[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@KeepModeFo:
; Line 2981
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _keep$75083[ebp]
	call	??1?$CMyComPtr@UIArchiveKeepModeForNextOpen@@@@QAE@XZ ; CMyComPtr<IArchiveKeepModeForNextOpen>::~CMyComPtr<IArchiveKeepModeForNextOpen>
	jmp	$LN3@KeepModeFo
$LN4@KeepModeFo:
; Line 2982
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@KeepModeFo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN10@KeepModeFo:
	DD	1
	DD	$LN9@KeepModeFo
$LN9@KeepModeFo:
	DD	-28					; ffffffe4H
	DD	4
	DD	$LN7@KeepModeFo
$LN7@KeepModeFo:
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	101					; 00000065H
	DB	112					; 00000070H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?KeepModeForNextOpen@CArchiveLink@@QAEXXZ$0:
	lea	ecx, DWORD PTR _keep$75083[ebp]
	jmp	??1?$CMyComPtr@UIArchiveKeepModeForNextOpen@@@@QAE@XZ ; CMyComPtr<IArchiveKeepModeForNextOpen>::~CMyComPtr<IArchiveKeepModeForNextOpen>
__ehhandler$?KeepModeForNextOpen@CArchiveLink@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?KeepModeForNextOpen@CArchiveLink@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?KeepModeForNextOpen@CArchiveLink@@QAEXXZ ENDP		; CArchiveLink::KeepModeForNextOpen
PUBLIC	?Close@CArc@@QAEJXZ				; CArc::Close
PUBLIC	?Close@CArchiveLink@@QAEJXZ			; CArchiveLink::Close
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
___result__$75093 = -12					; size = 4
_i$75089 = -8						; size = 4
_this$ = -4						; size = 4
?Close@CArchiveLink@@QAEJXZ PROC			; CArchiveLink::Close
; _this$ = ecx
; Line 2985
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 2986
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CObjectVector@VCArc@@@@QBEIXZ	; CObjectVector<CArc>::Size
	mov	DWORD PTR _i$75089[ebp], eax
$LN3@Close:
	cmp	DWORD PTR _i$75089[ebp], 0
	je	SHORT $LN2@Close
; Line 2988
	mov	eax, DWORD PTR _i$75089[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$75089[ebp], eax
; Line 2989
	mov	ecx, DWORD PTR _i$75089[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CObjectVector@VCArc@@@@QAEAAVCArc@@I@Z ; CObjectVector<CArc>::operator[]
	mov	ecx, eax
	call	?Close@CArc@@QAEJXZ			; CArc::Close
	mov	DWORD PTR ___result__$75093[ebp], eax
	cmp	DWORD PTR ___result__$75093[ebp], 0
	je	SHORT $LN1@Close
	mov	eax, DWORD PTR ___result__$75093[ebp]
	jmp	SHORT $LN4@Close
$LN1@Close:
; Line 2990
	jmp	SHORT $LN3@Close
$LN2@Close:
; Line 2991
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+32], 0
; Line 2993
	xor	eax, eax
$LN4@Close:
; Line 2994
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Close@CArchiveLink@@QAEJXZ ENDP			; CArchiveLink::Close
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Close@CArc@@QAEJXZ
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
?Close@CArc@@QAEJXZ PROC				; CArc::Close, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\openarchive.h
; Line 337
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 338
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ ; CMyComPtr<IInStream>::Release
; Line 339
	mov	ecx, DWORD PTR _this$[ebp]
	call	??C?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator->
	mov	DWORD PTR tv69[ebp], eax
	mov	eax, DWORD PTR tv69[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 340
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Close@CArc@@QAEJXZ ENDP				; CArc::Close
_TEXT	ENDS
PUBLIC	?DeleteBack@?$CObjectVector@VCArc@@@@QAEXXZ	; CObjectVector<CArc>::DeleteBack
PUBLIC	?IsEmpty@?$CObjectVector@VCArc@@@@QBE_NXZ	; CObjectVector<CArc>::IsEmpty
PUBLIC	?Release@CArchiveLink@@QAEXXZ			; CArchiveLink::Release
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Release@CArchiveLink@@QAEXXZ PROC			; CArchiveLink::Release
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\openarchive.cpp
; Line 2997
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 2999
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	?ClearErrors@CArcErrorInfo@@QAEXXZ	; CArcErrorInfo::ClearErrors
; Line 3000
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	?Empty@UString@@QAEXXZ			; UString::Empty
$LN2@Release@9:
; Line 3001
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsEmpty@?$CObjectVector@VCArc@@@@QBE_NXZ ; CObjectVector<CArc>::IsEmpty
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@Release@9
; Line 3002
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DeleteBack@?$CObjectVector@VCArc@@@@QAEXXZ ; CObjectVector<CArc>::DeleteBack
	jmp	SHORT $LN2@Release@9
$LN3@Release@9:
; Line 3003
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Release@CArchiveLink@@QAEXXZ ENDP			; CArchiveLink::Release
_TEXT	ENDS
PUBLIC	??1COpenOptions@@QAE@XZ				; COpenOptions::~COpenOptions
PUBLIC	??0COpenOptions@@QAE@XZ				; COpenOptions::COpenOptions
PUBLIC	??1?$CMyComPtr@UIArchiveOpenSetSubArchiveName@@@@QAE@XZ ; CMyComPtr<IArchiveOpenSetSubArchiveName>::~CMyComPtr<IArchiveOpenSetSubArchiveName>
PUBLIC	??C?$CMyComPtr@UIArchiveOpenSetSubArchiveName@@@@QBEPAUIArchiveOpenSetSubArchiveName@@XZ ; CMyComPtr<IArchiveOpenSetSubArchiveName>::operator->
PUBLIC	??B?$CMyComPtr@UIArchiveOpenSetSubArchiveName@@@@QBEPAUIArchiveOpenSetSubArchiveName@@XZ ; CMyComPtr<IArchiveOpenSetSubArchiveName>::operator IArchiveOpenSetSubArchiveName *
PUBLIC	??I?$CMyComPtr@UIArchiveOpenSetSubArchiveName@@@@QAEPAPAUIArchiveOpenSetSubArchiveName@@XZ ; CMyComPtr<IArchiveOpenSetSubArchiveName>::operator&
PUBLIC	??0?$CMyComPtr@UIArchiveOpenSetSubArchiveName@@@@QAE@XZ ; CMyComPtr<IArchiveOpenSetSubArchiveName>::CMyComPtr<IArchiveOpenSetSubArchiveName>
PUBLIC	??7?$CMyComPtr@UIInStream@@@@QBE_NXZ		; CMyComPtr<IInStream>::operator!
PUBLIC	??$QueryInterface@UIInStream@@@?$CMyComPtr@UISequentialInStream@@@@QBEJABU_GUID@@PAPAUIInStream@@@Z ; CMyComPtr<ISequentialInStream>::QueryInterface<IInStream>
PUBLIC	??I?$CMyComPtr@UIInStream@@@@QAEPAPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator&
PUBLIC	??7?$CMyComPtr@UISequentialInStream@@@@QBE_NXZ	; CMyComPtr<ISequentialInStream>::operator!
PUBLIC	??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator&
PUBLIC	??C?$CMyComPtr@UIInArchiveGetStream@@@@QBEPAUIInArchiveGetStream@@XZ ; CMyComPtr<IInArchiveGetStream>::operator->
PUBLIC	??1?$CMyComPtr@UIInArchiveGetStream@@@@QAE@XZ	; CMyComPtr<IInArchiveGetStream>::~CMyComPtr<IInArchiveGetStream>
PUBLIC	??7?$CMyComPtr@UIInArchiveGetStream@@@@QBE_NXZ	; CMyComPtr<IInArchiveGetStream>::operator!
PUBLIC	??I?$CMyComPtr@UIInArchiveGetStream@@@@QAEPAPAUIInArchiveGetStream@@XZ ; CMyComPtr<IInArchiveGetStream>::operator&
PUBLIC	??0?$CMyComPtr@UIInArchiveGetStream@@@@QAE@XZ	; CMyComPtr<IInArchiveGetStream>::CMyComPtr<IInArchiveGetStream>
PUBLIC	?Back@?$CObjectVector@VCArc@@@@QAEAAVCArc@@XZ	; CObjectVector<CArc>::Back
PUBLIC	?Add@?$CObjectVector@VCArc@@@@QAEIABVCArc@@@Z	; CObjectVector<CArc>::Add
PUBLIC	??1CArc@@QAE@XZ					; CArc::~CArc
PUBLIC	??0CArc@@QAE@XZ					; CArc::CArc
PUBLIC	??A?$CObjectVector@UCOpenType@@@@QBEABUCOpenType@@I@Z ; CObjectVector<COpenType>::operator[]
PUBLIC	??0COpenType@@QAE@XZ				; COpenType::COpenType
PUBLIC	?Size@?$CObjectVector@UCOpenType@@@@QBEIXZ	; CObjectVector<COpenType>::Size
PUBLIC	?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z	; CArchiveLink::Open
EXTRN	_IID_IArchiveOpenSetSubArchiveName:BYTE
xdata$x	SEGMENT
__ehfuncinfo$?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z DD 019930522H
	DD	09H
	DD	FLAT:__unwindtable$?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$6
	DD	05H
	DD	FLAT:__unwindfunclet$?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$7
	DD	07H
	DD	FLAT:__unwindfunclet$?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$8
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv342 = -856						; size = 4
tv241 = -852						; size = 4
tv222 = -848						; size = 4
tv205 = -844						; size = 4
tv179 = -840						; size = 4
$T78252 = -836						; size = 4
$T78251 = -832						; size = 4
$T78250 = -828						; size = 4
$T78249 = -824						; size = 4
$T78248 = -820						; size = 4
$T78247 = -816						; size = 4
$T78246 = -812						; size = 4
$T78245 = -808						; size = 32
___result__$75325 = -776				; size = 4
___result__$75322 = -772				; size = 4
_result$75317 = -768					; size = 4
_op2$75316 = -760					; size = 88
_excl$75315 = -664					; size = 12
_setSubArchiveName$75312 = -644				; size = 4
___result__$75271 = -636				; size = 4
_zerosTailIsAllowed$75270 = -625			; size = 1
___result__$75267 = -620				; size = 4
_arc2$75266 = -612					; size = 224
_subStream$75258 = -380					; size = 4
_subSeqStream$75253 = -368				; size = 4
_getStream$75247 = -356					; size = 4
___result__$75206 = -348				; size = 4
_numItems$75205 = -340					; size = 4
___result__$75200 = -332				; size = 4
_prop$75199 = -324					; size = 16
_mainSubfile$75198 = -304				; size = 4
_arc$75195 = -300					; size = 4
_result$75189 = -296					; size = 4
_arc$75186 = -288					; size = 224
_latest$75179 = -56					; size = 32
_resSpec$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_op$ = 8						; size = 4
?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z PROC	; CArchiveLink::Open
; _this$ = ecx
; Line 3035
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 844				; 0000034cH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-856]
	mov	ecx, 211				; 000000d3H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 3036
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Release@CArchiveLink@@QAEXXZ		; CArchiveLink::Release
; Line 3037
	mov	eax, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	call	?Size@?$CObjectVector@UCOpenType@@@@QBEIXZ ; CObjectVector<COpenType>::Size
	cmp	eax, 32					; 00000020H
	jb	SHORT $LN30@Open@2
; Line 3038
	mov	eax, -2147467263			; 80004001H
	jmp	$LN32@Open@2
$LN30@Open@2:
; Line 3044
	mov	DWORD PTR _resSpec$[ebp], 0
; Line 3046
	lea	ecx, DWORD PTR $T78245[ebp]
	call	??0COpenType@@QAE@XZ			; COpenType::COpenType
	mov	edi, DWORD PTR _op$[ebp]
	add	edi, 8
	mov	ecx, 8
	mov	esi, eax
	rep movsd
; Line 3047
	mov	ecx, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR [ecx+40]
	call	?Size@?$CObjectVector@UCOpenType@@@@QBEIXZ ; CObjectVector<COpenType>::Size
	cmp	eax, 1
	jb	$LN28@Open@2
; Line 3049
	lea	ecx, DWORD PTR _latest$75179[ebp]
	call	??0COpenType@@QAE@XZ			; COpenType::COpenType
; Line 3050
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CObjectVector@VCArc@@@@QBEIXZ	; CObjectVector<CArc>::Size
	mov	esi, eax
	mov	edx, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR [edx+40]
	call	?Size@?$CObjectVector@UCOpenType@@@@QBEIXZ ; CObjectVector<COpenType>::Size
	cmp	esi, eax
	jae	SHORT $LN27@Open@2
; Line 3051
	mov	eax, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	call	?Size@?$CObjectVector@UCOpenType@@@@QBEIXZ ; CObjectVector<COpenType>::Size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CObjectVector@VCArc@@@@QBEIXZ	; CObjectVector<CArc>::Size
	sub	esi, eax
	sub	esi, 1
	push	esi
	mov	ecx, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR [ecx+40]
	call	??A?$CObjectVector@UCOpenType@@@@QBEABUCOpenType@@I@Z ; CObjectVector<COpenType>::operator[]
	mov	ecx, 8
	mov	esi, eax
	lea	edi, DWORD PTR _latest$75179[ebp]
	rep movsd
; Line 3052
	jmp	SHORT $LN26@Open@2
$LN27@Open@2:
; Line 3054
	push	0
	mov	edx, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR [edx+40]
	call	??A?$CObjectVector@UCOpenType@@@@QBEABUCOpenType@@I@Z ; CObjectVector<COpenType>::operator[]
	mov	ecx, 8
	mov	esi, eax
	lea	edi, DWORD PTR _latest$75179[ebp]
	rep movsd
; Line 3055
	movzx	eax, BYTE PTR _latest$75179[ebp+16]
	test	eax, eax
	jne	SHORT $LN26@Open@2
; Line 3056
	jmp	$LN29@Open@2
$LN26@Open@2:
; Line 3058
	mov	edi, DWORD PTR _op$[ebp]
	add	edi, 8
	mov	ecx, 8
	lea	esi, DWORD PTR _latest$75179[ebp]
	rep movsd
	jmp	SHORT $LN24@Open@2
$LN28@Open@2:
; Line 3060
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CObjectVector@VCArc@@@@QBEIXZ	; CObjectVector<CArc>::Size
	cmp	eax, 32					; 00000020H
	jb	SHORT $LN24@Open@2
; Line 3061
	jmp	$LN29@Open@2
$LN24@Open@2:
; Line 3091
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsEmpty@?$CObjectVector@VCArc@@@@QBE_NXZ ; CObjectVector<CArc>::IsEmpty
	movzx	ecx, al
	test	ecx, ecx
	je	$LN22@Open@2
; Line 3093
	lea	ecx, DWORD PTR _arc$75186[ebp]
	call	??0CArc@@QAE@XZ				; CArc::CArc
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 3094
	mov	edx, DWORD PTR _op$[ebp]
	add	edx, 72					; 00000048H
	push	edx
	lea	ecx, DWORD PTR _arc$75186[ebp+124]
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
; Line 3095
	mov	eax, DWORD PTR _op$[ebp]
	add	eax, 72					; 00000048H
	push	eax
	lea	ecx, DWORD PTR _arc$75186[ebp+112]
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
; Line 3096
	mov	DWORD PTR _arc$75186[ebp+152], -1
; Line 3097
	mov	ecx, DWORD PTR _op$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _arc$75186[ebp]
	call	?OpenStreamOrFile@CArc@@QAEJAAUCOpenOptions@@@Z ; CArc::OpenStreamOrFile
	mov	DWORD PTR _result$75189[ebp], eax
; Line 3098
	cmp	DWORD PTR _result$75189[ebp], 0
	je	SHORT $LN21@Open@2
; Line 3100
	cmp	DWORD PTR _result$75189[ebp], 1
	jne	SHORT $LN20@Open@2
; Line 3102
	lea	edx, DWORD PTR _arc$75186[ebp+64]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??4CArcErrorInfo@@QAEAAU0@ABU0@@Z
; Line 3104
	lea	eax, DWORD PTR _arc$75186[ebp+112]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
$LN20@Open@2:
; Line 3106
	mov	ecx, DWORD PTR _result$75189[ebp]
	mov	DWORD PTR $T78246[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _arc$75186[ebp]
	call	??1CArc@@QAE@XZ
	mov	eax, DWORD PTR $T78246[ebp]
	jmp	$LN32@Open@2
$LN21@Open@2:
; Line 3108
	lea	edx, DWORD PTR _arc$75186[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CObjectVector@VCArc@@@@QAEIABVCArc@@@Z ; CObjectVector<CArc>::Add
; Line 3109
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _arc$75186[ebp]
	call	??1CArc@@QAE@XZ
	jmp	$LN30@Open@2
$LN22@Open@2:
; Line 3114
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Back@?$CObjectVector@VCArc@@@@QAEAAVCArc@@XZ ; CObjectVector<CArc>::Back
	mov	DWORD PTR _arc$75195[ebp], eax
; Line 3116
	mov	eax, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	call	?Size@?$CObjectVector@UCOpenType@@@@QBEIXZ ; CObjectVector<COpenType>::Size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CObjectVector@VCArc@@@@QBEIXZ	; CObjectVector<CArc>::Size
	cmp	esi, eax
	jbe	SHORT $LN19@Open@2
; Line 3117
	mov	DWORD PTR _resSpec$[ebp], -2147467263	; 80004001H
$LN19@Open@2:
; Line 3121
	lea	ecx, DWORD PTR _prop$75199[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 3122
	mov	ecx, DWORD PTR _arc$75195[ebp]
	call	??C?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator->
	mov	DWORD PTR tv179[ebp], eax
	mov	esi, esp
	lea	ecx, DWORD PTR _prop$75199[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR tv179[ebp]
	push	edx
	mov	eax, DWORD PTR tv179[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$75200[ebp], eax
	cmp	DWORD PTR ___result__$75200[ebp], 0
	je	SHORT $LN18@Open@2
	mov	eax, DWORD PTR ___result__$75200[ebp]
	mov	DWORD PTR $T78247[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prop$75199[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T78247[ebp]
	jmp	$LN32@Open@2
$LN18@Open@2:
; Line 3123
	movzx	ecx, WORD PTR _prop$75199[ebp]
	cmp	ecx, 19					; 00000013H
	jne	SHORT $LN17@Open@2
; Line 3124
	mov	edx, DWORD PTR _prop$75199[ebp+8]
	mov	DWORD PTR _mainSubfile$75198[ebp], edx
; Line 3125
	jmp	SHORT $LN16@Open@2
$LN17@Open@2:
; Line 3126
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prop$75199[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	jmp	$LN29@Open@2
$LN16@Open@2:
; Line 3128
	mov	ecx, DWORD PTR _arc$75195[ebp]
	call	??C?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator->
	mov	DWORD PTR tv205[ebp], eax
	mov	esi, esp
	lea	eax, DWORD PTR _numItems$75205[ebp]
	push	eax
	mov	ecx, DWORD PTR tv205[ebp]
	push	ecx
	mov	edx, DWORD PTR tv205[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$75206[ebp], eax
	cmp	DWORD PTR ___result__$75206[ebp], 0
	je	SHORT $LN15@Open@2
	mov	edx, DWORD PTR ___result__$75206[ebp]
	mov	DWORD PTR $T78248[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prop$75199[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T78248[ebp]
	jmp	$LN32@Open@2
$LN15@Open@2:
; Line 3129
	mov	eax, DWORD PTR _mainSubfile$75198[ebp]
	cmp	eax, DWORD PTR _numItems$75205[ebp]
	jb	SHORT $LN14@Open@2
; Line 3130
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prop$75199[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	jmp	$LN29@Open@2
$LN14@Open@2:
; Line 3131
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prop$75199[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
; Line 3134
	lea	ecx, DWORD PTR _getStream$75247[ebp]
	call	??0?$CMyComPtr@UIInArchiveGetStream@@@@QAE@XZ ; CMyComPtr<IInArchiveGetStream>::CMyComPtr<IInArchiveGetStream>
	mov	DWORD PTR __$EHRec$[ebp+8], 2
; Line 3135
	mov	ecx, DWORD PTR _arc$75195[ebp]
	call	??C?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator->
	mov	DWORD PTR tv222[ebp], eax
	lea	ecx, DWORD PTR _getStream$75247[ebp]
	call	??I?$CMyComPtr@UIInArchiveGetStream@@@@QAEPAPAUIInArchiveGetStream@@XZ ; CMyComPtr<IInArchiveGetStream>::operator&
	mov	esi, esp
	push	eax
	push	OFFSET _IID_IInArchiveGetStream
	mov	ecx, DWORD PTR tv222[ebp]
	push	ecx
	mov	edx, DWORD PTR tv222[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN12@Open@2
	lea	ecx, DWORD PTR _getStream$75247[ebp]
	call	??7?$CMyComPtr@UIInArchiveGetStream@@@@QBE_NXZ ; CMyComPtr<IInArchiveGetStream>::operator!
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN13@Open@2
$LN12@Open@2:
; Line 3136
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _getStream$75247[ebp]
	call	??1?$CMyComPtr@UIInArchiveGetStream@@@@QAE@XZ ; CMyComPtr<IInArchiveGetStream>::~CMyComPtr<IInArchiveGetStream>
	jmp	$LN29@Open@2
$LN13@Open@2:
; Line 3138
	lea	ecx, DWORD PTR _subSeqStream$75253[ebp]
	call	??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
; Line 3139
	lea	ecx, DWORD PTR _getStream$75247[ebp]
	call	??C?$CMyComPtr@UIInArchiveGetStream@@@@QBEPAUIInArchiveGetStream@@XZ ; CMyComPtr<IInArchiveGetStream>::operator->
	mov	DWORD PTR tv241[ebp], eax
	lea	ecx, DWORD PTR _subSeqStream$75253[ebp]
	call	??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator&
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _mainSubfile$75198[ebp]
	push	eax
	mov	ecx, DWORD PTR tv241[ebp]
	push	ecx
	mov	edx, DWORD PTR tv241[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN10@Open@2
	lea	ecx, DWORD PTR _subSeqStream$75253[ebp]
	call	??7?$CMyComPtr@UISequentialInStream@@@@QBE_NXZ ; CMyComPtr<ISequentialInStream>::operator!
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN11@Open@2
$LN10@Open@2:
; Line 3140
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _subSeqStream$75253[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _getStream$75247[ebp]
	call	??1?$CMyComPtr@UIInArchiveGetStream@@@@QAE@XZ ; CMyComPtr<IInArchiveGetStream>::~CMyComPtr<IInArchiveGetStream>
	jmp	$LN29@Open@2
$LN11@Open@2:
; Line 3142
	lea	ecx, DWORD PTR _subStream$75258[ebp]
	call	??0?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::CMyComPtr<IInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
; Line 3143
	lea	ecx, DWORD PTR _subStream$75258[ebp]
	call	??I?$CMyComPtr@UIInStream@@@@QAEPAPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator&
	push	eax
	push	OFFSET _IID_IInStream
	lea	ecx, DWORD PTR _subSeqStream$75253[ebp]
	call	??$QueryInterface@UIInStream@@@?$CMyComPtr@UISequentialInStream@@@@QBEJABU_GUID@@PAPAUIInStream@@@Z ; CMyComPtr<ISequentialInStream>::QueryInterface<IInStream>
	test	eax, eax
	jne	SHORT $LN8@Open@2
	lea	ecx, DWORD PTR _subStream$75258[ebp]
	call	??7?$CMyComPtr@UIInStream@@@@QBE_NXZ	; CMyComPtr<IInStream>::operator!
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@Open@2
$LN8@Open@2:
; Line 3144
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _subStream$75258[ebp]
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _subSeqStream$75253[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _getStream$75247[ebp]
	call	??1?$CMyComPtr@UIInArchiveGetStream@@@@QAE@XZ ; CMyComPtr<IInArchiveGetStream>::~CMyComPtr<IInArchiveGetStream>
	jmp	$LN29@Open@2
$LN9@Open@2:
; Line 3146
	lea	ecx, DWORD PTR _arc2$75266[ebp]
	call	??0CArc@@QAE@XZ				; CArc::CArc
	mov	BYTE PTR __$EHRec$[ebp+8], 5
; Line 3147
	lea	ecx, DWORD PTR _arc2$75266[ebp+112]
	push	ecx
	mov	edx, DWORD PTR _mainSubfile$75198[ebp]
	push	edx
	mov	ecx, DWORD PTR _arc$75195[ebp]
	call	?GetItemPath@CArc@@QBEJIAAVUString@@@Z	; CArc::GetItemPath
	mov	DWORD PTR ___result__$75267[ebp], eax
	cmp	DWORD PTR ___result__$75267[ebp], 0
	je	SHORT $LN7@Open@2
	mov	eax, DWORD PTR ___result__$75267[ebp]
	mov	DWORD PTR $T78249[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _arc2$75266[ebp]
	call	??1CArc@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _subStream$75258[ebp]
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _subSeqStream$75253[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _getStream$75247[ebp]
	call	??1?$CMyComPtr@UIInArchiveGetStream@@@@QAE@XZ ; CMyComPtr<IInArchiveGetStream>::~CMyComPtr<IInArchiveGetStream>
	mov	eax, DWORD PTR $T78249[ebp]
	jmp	$LN32@Open@2
$LN7@Open@2:
; Line 3150
	lea	ecx, DWORD PTR _zerosTailIsAllowed$75270[ebp]
	push	ecx
	push	86					; 00000056H
	mov	edx, DWORD PTR _mainSubfile$75198[ebp]
	push	edx
	mov	ecx, DWORD PTR _arc$75195[ebp]
	call	??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator IInArchive *
	push	eax
	call	?Archive_GetItemBoolProp@@YGJPAUIInArchive@@IKAA_N@Z ; Archive_GetItemBoolProp
	mov	DWORD PTR ___result__$75271[ebp], eax
	cmp	DWORD PTR ___result__$75271[ebp], 0
	je	SHORT $LN6@Open@2
	mov	eax, DWORD PTR ___result__$75271[ebp]
	mov	DWORD PTR $T78250[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _arc2$75266[ebp]
	call	??1CArc@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _subStream$75258[ebp]
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _subSeqStream$75253[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _getStream$75247[ebp]
	call	??1?$CMyComPtr@UIInArchiveGetStream@@@@QAE@XZ ; CMyComPtr<IInArchiveGetStream>::~CMyComPtr<IInArchiveGetStream>
	mov	eax, DWORD PTR $T78250[ebp]
	jmp	$LN32@Open@2
$LN6@Open@2:
; Line 3153
	mov	ecx, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [ecx+56], 0
	je	$LN5@Open@2
; Line 3155
	lea	ecx, DWORD PTR _setSubArchiveName$75312[ebp]
	call	??0?$CMyComPtr@UIArchiveOpenSetSubArchiveName@@@@QAE@XZ ; CMyComPtr<IArchiveOpenSetSubArchiveName>::CMyComPtr<IArchiveOpenSetSubArchiveName>
	mov	BYTE PTR __$EHRec$[ebp+8], 6
; Line 3156
	lea	ecx, DWORD PTR _setSubArchiveName$75312[ebp]
	call	??I?$CMyComPtr@UIArchiveOpenSetSubArchiveName@@@@QAEPAPAUIArchiveOpenSetSubArchiveName@@XZ ; CMyComPtr<IArchiveOpenSetSubArchiveName>::operator&
	mov	esi, esp
	push	eax
	push	OFFSET _IID_IArchiveOpenSetSubArchiveName
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR _op$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 3157
	lea	ecx, DWORD PTR _setSubArchiveName$75312[ebp]
	call	??B?$CMyComPtr@UIArchiveOpenSetSubArchiveName@@@@QBEPAUIArchiveOpenSetSubArchiveName@@XZ ; CMyComPtr<IArchiveOpenSetSubArchiveName>::operator IArchiveOpenSetSubArchiveName *
	test	eax, eax
	je	SHORT $LN4@Open@2
; Line 3158
	lea	ecx, DWORD PTR _setSubArchiveName$75312[ebp]
	call	??C?$CMyComPtr@UIArchiveOpenSetSubArchiveName@@@@QBEPAUIArchiveOpenSetSubArchiveName@@XZ ; CMyComPtr<IArchiveOpenSetSubArchiveName>::operator->
	mov	DWORD PTR tv342[ebp], eax
	lea	ecx, DWORD PTR _arc2$75266[ebp+112]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR tv342[ebp]
	push	edx
	mov	eax, DWORD PTR tv342[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@Open@2:
; Line 3159
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _setSubArchiveName$75312[ebp]
	call	??1?$CMyComPtr@UIArchiveOpenSetSubArchiveName@@@@QAE@XZ ; CMyComPtr<IArchiveOpenSetSubArchiveName>::~CMyComPtr<IArchiveOpenSetSubArchiveName>
$LN5@Open@2:
; Line 3161
	mov	eax, DWORD PTR _mainSubfile$75198[ebp]
	mov	DWORD PTR _arc2$75266[ebp+152], eax
; Line 3164
	lea	ecx, DWORD PTR _excl$75315[ebp]
	call	??0?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 7
; Line 3166
	lea	ecx, DWORD PTR _op2$75316[ebp]
	call	??0COpenOptions@@QAE@XZ			; COpenOptions::COpenOptions
	mov	BYTE PTR __$EHRec$[ebp+8], 8
; Line 3168
	mov	ecx, DWORD PTR _op$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	DWORD PTR _op2$75316[ebp+64], edx
; Line 3170
	mov	eax, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _op2$75316[ebp], ecx
; Line 3172
	mov	esi, DWORD PTR _op$[ebp]
	add	esi, 8
	mov	ecx, 8
	lea	edi, DWORD PTR _op2$75316[ebp+8]
	rep movsd
; Line 3173
	mov	dl, BYTE PTR _zerosTailIsAllowed$75270[ebp]
	mov	BYTE PTR _op2$75316[ebp+28], dl
; Line 3174
	lea	eax, DWORD PTR _excl$75315[ebp]
	mov	DWORD PTR _op2$75316[ebp+44], eax
; Line 3175
	mov	BYTE PTR _op2$75316[ebp+68], 0
; Line 3176
	lea	ecx, DWORD PTR _subStream$75258[ebp]
	call	??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *
	mov	DWORD PTR _op2$75316[ebp+48], eax
; Line 3177
	lea	ecx, DWORD PTR _arc2$75266[ebp+112]
	push	ecx
	lea	ecx, DWORD PTR _op2$75316[ebp+72]
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
; Line 3178
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	DWORD PTR _op2$75316[ebp+56], eax
; Line 3179
	mov	ecx, DWORD PTR _op$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	mov	DWORD PTR _op2$75316[ebp+60], edx
; Line 3182
	lea	eax, DWORD PTR _op2$75316[ebp]
	push	eax
	lea	ecx, DWORD PTR _arc2$75266[ebp]
	call	?OpenStream@CArc@@QAEJABUCOpenOptions@@@Z ; CArc::OpenStream
	mov	DWORD PTR _result$75317[ebp], eax
; Line 3183
	mov	ecx, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR [ecx+40]
	call	?Size@?$CObjectVector@UCOpenType@@@@QBEIXZ ; CObjectVector<COpenType>::Size
	neg	eax
	sbb	eax, eax
	neg	eax
	mov	DWORD PTR _resSpec$[ebp], eax
; Line 3184
	cmp	DWORD PTR _result$75317[ebp], 1
	jne	$LN3@Open@2
; Line 3186
	lea	edx, DWORD PTR _arc2$75266[ebp+16]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??4CArcErrorInfo@@QAEAAU0@ABU0@@Z
; Line 3187
	lea	eax, DWORD PTR _arc2$75266[ebp+112]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
; Line 3188
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _op2$75316[ebp]
	call	??1COpenOptions@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _excl$75315[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _arc2$75266[ebp]
	call	??1CArc@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _subStream$75258[ebp]
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _subSeqStream$75253[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _getStream$75247[ebp]
	call	??1?$CMyComPtr@UIInArchiveGetStream@@@@QAE@XZ ; CMyComPtr<IInArchiveGetStream>::~CMyComPtr<IInArchiveGetStream>
	jmp	$LN29@Open@2
$LN3@Open@2:
; Line 3190
	mov	ecx, DWORD PTR _result$75317[ebp]
	mov	DWORD PTR ___result__$75322[ebp], ecx
	cmp	DWORD PTR ___result__$75322[ebp], 0
	je	SHORT $LN2@Open@2
	mov	edx, DWORD PTR ___result__$75322[ebp]
	mov	DWORD PTR $T78251[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _op2$75316[ebp]
	call	??1COpenOptions@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _excl$75315[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _arc2$75266[ebp]
	call	??1CArc@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _subStream$75258[ebp]
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _subSeqStream$75253[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _getStream$75247[ebp]
	call	??1?$CMyComPtr@UIInArchiveGetStream@@@@QAE@XZ ; CMyComPtr<IInArchiveGetStream>::~CMyComPtr<IInArchiveGetStream>
	mov	eax, DWORD PTR $T78251[ebp]
	jmp	$LN32@Open@2
$LN2@Open@2:
; Line 3191
	lea	eax, DWORD PTR _arc2$75266[ebp+164]
	push	eax
	lea	ecx, DWORD PTR _arc2$75266[ebp+156]
	push	ecx
	mov	edx, DWORD PTR _mainSubfile$75198[ebp]
	push	edx
	mov	ecx, DWORD PTR _arc$75195[ebp]
	call	?GetItemMTime@CArc@@QBEJIAAU_FILETIME@@AA_N@Z ; CArc::GetItemMTime
	mov	DWORD PTR ___result__$75325[ebp], eax
	cmp	DWORD PTR ___result__$75325[ebp], 0
	je	SHORT $LN1@Open@2
	mov	eax, DWORD PTR ___result__$75325[ebp]
	mov	DWORD PTR $T78252[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _op2$75316[ebp]
	call	??1COpenOptions@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _excl$75315[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _arc2$75266[ebp]
	call	??1CArc@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _subStream$75258[ebp]
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _subSeqStream$75253[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _getStream$75247[ebp]
	call	??1?$CMyComPtr@UIInArchiveGetStream@@@@QAE@XZ ; CMyComPtr<IInArchiveGetStream>::~CMyComPtr<IInArchiveGetStream>
	mov	eax, DWORD PTR $T78252[ebp]
	jmp	$LN32@Open@2
$LN1@Open@2:
; Line 3192
	lea	ecx, DWORD PTR _arc2$75266[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CObjectVector@VCArc@@@@QAEIABVCArc@@@Z ; CObjectVector<CArc>::Add
; Line 3193
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _op2$75316[ebp]
	call	??1COpenOptions@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _excl$75315[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _arc2$75266[ebp]
	call	??1CArc@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _subStream$75258[ebp]
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _subSeqStream$75253[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _getStream$75247[ebp]
	call	??1?$CMyComPtr@UIInArchiveGetStream@@@@QAE@XZ ; CMyComPtr<IInArchiveGetStream>::~CMyComPtr<IInArchiveGetStream>
	jmp	$LN30@Open@2
$LN29@Open@2:
; Line 3194
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsEmpty@?$CObjectVector@VCArc@@@@QBE_NXZ ; CObjectVector<CArc>::IsEmpty
	movzx	edx, al
	neg	edx
	sbb	edx, edx
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+32], dl
; Line 3195
	mov	eax, DWORD PTR _resSpec$[ebp]
$LN32@Open@2:
; Line 3196
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN58@Open@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 856				; 00000358H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN58@Open@2:
	DD	12					; 0000000cH
	DD	$LN57@Open@2
$LN57@Open@2:
	DD	-56					; ffffffc8H
	DD	32					; 00000020H
	DD	$LN44@Open@2
	DD	-288					; fffffee0H
	DD	224					; 000000e0H
	DD	$LN45@Open@2
	DD	-324					; fffffebcH
	DD	16					; 00000010H
	DD	$LN46@Open@2
	DD	-340					; fffffeacH
	DD	4
	DD	$LN47@Open@2
	DD	-356					; fffffe9cH
	DD	4
	DD	$LN48@Open@2
	DD	-368					; fffffe90H
	DD	4
	DD	$LN49@Open@2
	DD	-380					; fffffe84H
	DD	4
	DD	$LN50@Open@2
	DD	-612					; fffffd9cH
	DD	224					; 000000e0H
	DD	$LN51@Open@2
	DD	-625					; fffffd8fH
	DD	1
	DD	$LN52@Open@2
	DD	-644					; fffffd7cH
	DD	4
	DD	$LN53@Open@2
	DD	-664					; fffffd68H
	DD	12					; 0000000cH
	DD	$LN54@Open@2
	DD	-760					; fffffd08H
	DD	88					; 00000058H
	DD	$LN55@Open@2
$LN55@Open@2:
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	50					; 00000032H
	DB	0
$LN54@Open@2:
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	99					; 00000063H
	DB	108					; 0000006cH
	DB	0
$LN53@Open@2:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	117					; 00000075H
	DB	98					; 00000062H
	DB	65					; 00000041H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	78					; 0000004eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN52@Open@2:
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	84					; 00000054H
	DB	97					; 00000061H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	73					; 00000049H
	DB	115					; 00000073H
	DB	65					; 00000041H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$LN51@Open@2:
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	50					; 00000032H
	DB	0
$LN50@Open@2:
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	98					; 00000062H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN49@Open@2:
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	98					; 00000062H
	DB	83					; 00000053H
	DB	101					; 00000065H
	DB	113					; 00000071H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN48@Open@2:
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN47@Open@2:
	DB	110					; 0000006eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	73					; 00000049H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	115					; 00000073H
	DB	0
$LN46@Open@2:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
$LN45@Open@2:
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	0
$LN44@Open@2:
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$0:
	lea	ecx, DWORD PTR _arc$75186[ebp]
	jmp	??1CArc@@QAE@XZ
__unwindfunclet$?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$1:
	lea	ecx, DWORD PTR _prop$75199[ebp]
	jmp	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
__unwindfunclet$?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$2:
	lea	ecx, DWORD PTR _getStream$75247[ebp]
	jmp	??1?$CMyComPtr@UIInArchiveGetStream@@@@QAE@XZ ; CMyComPtr<IInArchiveGetStream>::~CMyComPtr<IInArchiveGetStream>
__unwindfunclet$?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$3:
	lea	ecx, DWORD PTR _subSeqStream$75253[ebp]
	jmp	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
__unwindfunclet$?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$4:
	lea	ecx, DWORD PTR _subStream$75258[ebp]
	jmp	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
__unwindfunclet$?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$5:
	lea	ecx, DWORD PTR _arc2$75266[ebp]
	jmp	??1CArc@@QAE@XZ
__unwindfunclet$?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$6:
	lea	ecx, DWORD PTR _setSubArchiveName$75312[ebp]
	jmp	??1?$CMyComPtr@UIArchiveOpenSetSubArchiveName@@@@QAE@XZ ; CMyComPtr<IArchiveOpenSetSubArchiveName>::~CMyComPtr<IArchiveOpenSetSubArchiveName>
__unwindfunclet$?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$7:
	lea	ecx, DWORD PTR _excl$75315[ebp]
	jmp	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
__unwindfunclet$?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$8:
	lea	ecx, DWORD PTR _op2$75316[ebp]
	jmp	??1COpenOptions@@QAE@XZ
__ehhandler$?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-856]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z ENDP	; CArchiveLink::Open
PUBLIC	??0COpenSpecFlags@@QAE@XZ			; COpenSpecFlags::COpenSpecFlags
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0COpenType@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0COpenType@@QAE@XZ PROC				; COpenType::COpenType, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\openarchive.h
; Line 99
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0COpenSpecFlags@@QAE@XZ		; COpenSpecFlags::COpenSpecFlags
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 7
	call	??0COpenSpecFlags@@QAE@XZ		; COpenSpecFlags::COpenSpecFlags
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 10					; 0000000aH
	call	??0COpenSpecFlags@@QAE@XZ		; COpenSpecFlags::COpenSpecFlags
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 13					; 0000000dH
	call	??0COpenSpecFlags@@QAE@XZ		; COpenSpecFlags::COpenSpecFlags
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+16], 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+17], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+18], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+19], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+20], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+21], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
; Line 100
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+4], 1
; Line 101
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+5], 1
; Line 102
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+6], 1
; Line 104
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+7], 1
; Line 106
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+14], 1
; Line 107
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+15], 1
; Line 108
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+13], 1
; Line 111
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0COpenType@@QAE@XZ ENDP				; COpenType::COpenType
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0COpenSpecFlags@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0COpenSpecFlags@@QAE@XZ PROC				; COpenSpecFlags::COpenSpecFlags, COMDAT
; _this$ = ecx
; Line 57
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+2], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0COpenSpecFlags@@QAE@XZ ENDP				; COpenSpecFlags::COpenSpecFlags
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0COpenOptions@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0COpenOptions@@QAE@XZ PROC				; COpenOptions::COpenOptions, COMDAT
; _this$ = ecx
; Line 140
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0COpenType@@QAE@XZ			; COpenType::COpenType
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+40], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+44], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+52], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+56], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+60], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+68], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0COpenOptions@@QAE@XZ ENDP				; COpenOptions::COpenOptions
_TEXT	ENDS
PUBLIC	??1CArcErrorInfo@@QAE@XZ			; CArcErrorInfo::~CArcErrorInfo
PUBLIC	??1?$CMyComPtr@UIArchiveGetRootProps@@@@QAE@XZ	; CMyComPtr<IArchiveGetRootProps>::~CMyComPtr<IArchiveGetRootProps>
PUBLIC	??1?$CMyComPtr@UIArchiveGetRawProps@@@@QAE@XZ	; CMyComPtr<IArchiveGetRawProps>::~CMyComPtr<IArchiveGetRawProps>
PUBLIC	??0CArcErrorInfo@@QAE@XZ			; CArcErrorInfo::CArcErrorInfo
PUBLIC	??0?$CMyComPtr@UIArchiveGetRootProps@@@@QAE@XZ	; CMyComPtr<IArchiveGetRootProps>::CMyComPtr<IArchiveGetRootProps>
PUBLIC	??0?$CMyComPtr@UIArchiveGetRawProps@@@@QAE@XZ	; CMyComPtr<IArchiveGetRawProps>::CMyComPtr<IArchiveGetRawProps>
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0CArc@@QAE@XZ DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$??0CArc@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0CArc@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CArc@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CArc@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CArc@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CArc@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0CArc@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0CArc@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0CArc@@QAE@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??0CArc@@QAE@XZ$7
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CArc@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CArc@@QAE@XZ PROC					; CArc::CArc, COMDAT
; _this$ = ecx
; Line 330
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CArc@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::CMyComPtr<IInArchive>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::CMyComPtr<IInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$CMyComPtr@UIArchiveGetRawProps@@@@QAE@XZ ; CMyComPtr<IArchiveGetRawProps>::CMyComPtr<IArchiveGetRawProps>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0?$CMyComPtr@UIArchiveGetRootProps@@@@QAE@XZ ; CMyComPtr<IArchiveGetRootProps>::CMyComPtr<IArchiveGetRootProps>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0CArcErrorInfo@@QAE@XZ		; CArcErrorInfo::CArcErrorInfo
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??0CArcErrorInfo@@QAE@XZ		; CArcErrorInfo::CArcErrorInfo
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 124				; 0000007cH
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 136				; 00000088H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+164], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+217], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+218], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+219], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+220], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+221], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+222], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+223], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CArc@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
__unwindfunclet$??0CArc@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
__unwindfunclet$??0CArc@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1?$CMyComPtr@UIArchiveGetRawProps@@@@QAE@XZ ; CMyComPtr<IArchiveGetRawProps>::~CMyComPtr<IArchiveGetRawProps>
__unwindfunclet$??0CArc@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$CMyComPtr@UIArchiveGetRootProps@@@@QAE@XZ ; CMyComPtr<IArchiveGetRootProps>::~CMyComPtr<IArchiveGetRootProps>
__unwindfunclet$??0CArc@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	jmp	??1CArcErrorInfo@@QAE@XZ
__unwindfunclet$??0CArc@@QAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	jmp	??1CArcErrorInfo@@QAE@XZ
__unwindfunclet$??0CArc@@QAE@XZ$6:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??0CArc@@QAE@XZ$7:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 124				; 0000007cH
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$??0CArc@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CArc@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CArc@@QAE@XZ ENDP					; CArc::CArc
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CArcErrorInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CArcErrorInfo@@QAE@XZ$0
__ehfuncinfo$??0CArcErrorInfo@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CArcErrorInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CArcErrorInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CArcErrorInfo@@QAE@XZ PROC				; CArcErrorInfo::CArcErrorInfo, COMDAT
; _this$ = ecx
; Line 183
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CArcErrorInfo@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+2], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+3], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CArcErrorInfo@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$??0CArcErrorInfo@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CArcErrorInfo@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CArcErrorInfo@@QAE@XZ ENDP				; CArcErrorInfo::CArcErrorInfo
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CArcErrorInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CArcErrorInfo@@QAE@XZ$0
__ehfuncinfo$??1CArcErrorInfo@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CArcErrorInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CArcErrorInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CArcErrorInfo@@QAE@XZ PROC				; CArcErrorInfo::~CArcErrorInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CArcErrorInfo@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CArcErrorInfo@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$??1CArcErrorInfo@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CArcErrorInfo@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CArcErrorInfo@@QAE@XZ ENDP				; CArcErrorInfo::~CArcErrorInfo
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CArc@@QAE@XZ DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$??1CArc@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1CArc@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CArc@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CArc@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CArc@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CArc@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1CArc@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??1CArc@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??1CArc@@QAE@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??1CArc@@QAE@XZ$7
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CArc@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CArc@@QAE@XZ PROC					; CArc::~CArc, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CArc@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 7
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 136				; 00000088H
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 124				; 0000007cH
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??1CArcErrorInfo@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??1CArcErrorInfo@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1?$CMyComPtr@UIArchiveGetRootProps@@@@QAE@XZ ; CMyComPtr<IArchiveGetRootProps>::~CMyComPtr<IArchiveGetRootProps>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$CMyComPtr@UIArchiveGetRawProps@@@@QAE@XZ ; CMyComPtr<IArchiveGetRawProps>::~CMyComPtr<IArchiveGetRawProps>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CArc@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
__unwindfunclet$??1CArc@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
__unwindfunclet$??1CArc@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1?$CMyComPtr@UIArchiveGetRawProps@@@@QAE@XZ ; CMyComPtr<IArchiveGetRawProps>::~CMyComPtr<IArchiveGetRawProps>
__unwindfunclet$??1CArc@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$CMyComPtr@UIArchiveGetRootProps@@@@QAE@XZ ; CMyComPtr<IArchiveGetRootProps>::~CMyComPtr<IArchiveGetRootProps>
__unwindfunclet$??1CArc@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	jmp	??1CArcErrorInfo@@QAE@XZ
__unwindfunclet$??1CArc@@QAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	jmp	??1CArcErrorInfo@@QAE@XZ
__unwindfunclet$??1CArc@@QAE@XZ$6:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??1CArc@@QAE@XZ$7:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 124				; 0000007cH
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$??1CArc@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CArc@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CArc@@QAE@XZ ENDP					; CArc::~CArc
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1COpenOptions@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1COpenOptions@@QAE@XZ PROC				; COpenOptions::~COpenOptions, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	call	??1UString@@QAE@XZ			; UString::~UString
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1COpenOptions@@QAE@XZ ENDP				; COpenOptions::~COpenOptions
_TEXT	ENDS
PUBLIC	??A?$CRecordVector@_K@@QAEAA_KI@Z		; CRecordVector<unsigned __int64>::operator[]
PUBLIC	?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z ; CObjectVector<UString>::Add
PUBLIC	??A?$CRecordVector@_N@@QAEAA_NI@Z		; CRecordVector<bool>::operator[]
PUBLIC	?Size@?$CRecordVector@_N@@QBEIXZ		; CRecordVector<bool>::Size
PUBLIC	?Init@COpenCallbackImp@@QAEXABVUString@@0@Z	; COpenCallbackImp::Init
PUBLIC	??0COpenCallbackImp@@QAE@XZ			; COpenCallbackImp::COpenCallbackImp
PUBLIC	?Open2@CArchiveLink@@QAEJAAUCOpenOptions@@PAUIOpenCallbackUI@@@Z ; CArchiveLink::Open2
EXTRN	??H@YG?AVUString@@ABV0@0@Z:PROC			; operator+
EXTRN	?GetFullPathAndSplit@NDir@NFile@NWindows@@YG_NPB_WAAVUString@@1@Z:PROC ; NWindows::NFile::NDir::GetFullPathAndSplit
xdata$x	SEGMENT
__ehfuncinfo$?Open2@CArchiveLink@@QAEJAAUCOpenOptions@@PAUIOpenCallbackUI@@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?Open2@CArchiveLink@@QAEJAAUCOpenOptions@@PAUIOpenCallbackUI@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Open2@CArchiveLink@@QAEJAAUCOpenOptions@@PAUIOpenCallbackUI@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Open2@CArchiveLink@@QAEJAAUCOpenOptions@@PAUIOpenCallbackUI@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Open2@CArchiveLink@@QAEJAAUCOpenOptions@@PAUIOpenCallbackUI@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?Open2@CArchiveLink@@QAEJAAUCOpenOptions@@PAUIOpenCallbackUI@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?Open2@CArchiveLink@@QAEJAAUCOpenOptions@@PAUIOpenCallbackUI@@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?Open2@CArchiveLink@@QAEJAAUCOpenOptions@@PAUIOpenCallbackUI@@@Z$4
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv194 = -124						; size = 4
tv85 = -120						; size = 4
tv72 = -116						; size = 4
$T78352 = -112						; size = 4
$T78351 = -108						; size = 12
$T78350 = -96						; size = 4
$T78347 = -92						; size = 4
$T78346 = -88						; size = 4
_i$75352 = -84						; size = 4
___result__$75349 = -80					; size = 4
_res$ = -76						; size = 4
_name$ = -68						; size = 12
_prefix$ = -48						; size = 12
_callback$ = -28					; size = 4
_openCallbackSpec$ = -20				; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_op$ = 8						; size = 4
_callbackUI$ = 12					; size = 4
?Open2@CArchiveLink@@QAEJAAUCOpenOptions@@PAUIOpenCallbackUI@@@Z PROC ; CArchiveLink::Open2
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\openarchive.cpp
; Line 3199
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Open2@CArchiveLink@@QAEJAAUCOpenOptions@@PAUIOpenCallbackUI@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 112				; 00000070H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-124]
	mov	ecx, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 3200
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0
	mov	DWORD PTR [eax+28], 0
; Line 3201
	push	152					; 00000098H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T78347[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T78347[ebp], 0
	je	SHORT $LN10@Open2
	mov	ecx, DWORD PTR $T78347[ebp]
	call	??0COpenCallbackImp@@QAE@XZ		; COpenCallbackImp::COpenCallbackImp
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN11@Open2
$LN10@Open2:
	mov	DWORD PTR tv72[ebp], 0
$LN11@Open2:
	mov	ecx, DWORD PTR tv72[ebp]
	mov	DWORD PTR $T78346[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T78346[ebp]
	mov	DWORD PTR _openCallbackSpec$[ebp], edx
; Line 3202
	mov	eax, DWORD PTR _openCallbackSpec$[ebp]
	push	eax
	lea	ecx, DWORD PTR _callback$[ebp]
	call	??0?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@PAUIArchiveOpenCallback@@@Z ; CMyComPtr<IArchiveOpenCallback>::CMyComPtr<IArchiveOpenCallback>
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 3203
	mov	ecx, DWORD PTR _openCallbackSpec$[ebp]
	mov	edx, DWORD PTR _callbackUI$[ebp]
	mov	DWORD PTR [ecx+144], edx
; Line 3205
	lea	ecx, DWORD PTR _prefix$[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _name$[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 3
; Line 3207
	mov	eax, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [eax+48], 0
	jne	SHORT $LN7@Open2
	mov	ecx, DWORD PTR _op$[ebp]
	movzx	edx, BYTE PTR [ecx+68]
	test	edx, edx
	jne	SHORT $LN7@Open2
; Line 3209
	lea	eax, DWORD PTR _name$[ebp]
	push	eax
	lea	ecx, DWORD PTR _prefix$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _op$[ebp]
	add	ecx, 72					; 00000048H
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	?GetFullPathAndSplit@NDir@NFile@NWindows@@YG_NPB_WAAVUString@@1@Z ; NWindows::NFile::NDir::GetFullPathAndSplit
; Line 3210
	lea	edx, DWORD PTR _name$[ebp]
	push	edx
	lea	eax, DWORD PTR _prefix$[ebp]
	push	eax
	mov	ecx, DWORD PTR _openCallbackSpec$[ebp]
	call	?Init@COpenCallbackImp@@QAEXABVUString@@0@Z ; COpenCallbackImp::Init
; Line 3212
	jmp	SHORT $LN6@Open2
$LN7@Open2:
; Line 3214
	mov	ecx, DWORD PTR _op$[ebp]
	add	ecx, 72					; 00000048H
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _openCallbackSpec$[ebp]
	add	ecx, 8
	mov	edx, DWORD PTR _openCallbackSpec$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	ecx
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@Open2:
; Line 3217
	lea	ecx, DWORD PTR _callback$[ebp]
	call	??B?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ ; CMyComPtr<IArchiveOpenCallback>::operator IArchiveOpenCallback *
	mov	edx, DWORD PTR _op$[ebp]
	mov	DWORD PTR [edx+56], eax
; Line 3218
	mov	eax, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR _openCallbackSpec$[ebp]
	mov	DWORD PTR [eax+60], ecx
; Line 3220
	mov	edx, DWORD PTR _op$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Open@CArchiveLink@@QAEJAAUCOpenOptions@@@Z ; CArchiveLink::Open
	mov	DWORD PTR _res$[ebp], eax
; Line 3222
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _openCallbackSpec$[ebp]
	mov	dl, BYTE PTR [ecx+140]
	mov	BYTE PTR [eax+33], dl
; Line 3225
	mov	eax, DWORD PTR _res$[ebp]
	mov	DWORD PTR ___result__$75349[ebp], eax
	cmp	DWORD PTR ___result__$75349[ebp], 0
	je	SHORT $LN5@Open2
	mov	ecx, DWORD PTR ___result__$75349[ebp]
	mov	DWORD PTR $T78350[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _name$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _prefix$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _callback$[ebp]
	call	??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>
	mov	eax, DWORD PTR $T78350[ebp]
	jmp	$LN8@Open2
$LN5@Open2:
; Line 3228
	mov	DWORD PTR _i$75352[ebp], 0
	jmp	SHORT $LN4@Open2
$LN3@Open2:
	mov	edx, DWORD PTR _i$75352[ebp]
	add	edx, 1
	mov	DWORD PTR _i$75352[ebp], edx
$LN4@Open2:
	mov	ecx, DWORD PTR _openCallbackSpec$[ebp]
	add	ecx, 116				; 00000074H
	call	?Size@?$CRecordVector@_N@@QBEIXZ	; CRecordVector<bool>::Size
	cmp	DWORD PTR _i$75352[ebp], eax
	jae	$LN2@Open2
; Line 3230
	mov	eax, DWORD PTR _i$75352[ebp]
	push	eax
	mov	ecx, DWORD PTR _openCallbackSpec$[ebp]
	add	ecx, 116				; 00000074H
	call	??A?$CRecordVector@_N@@QAEAA_NI@Z	; CRecordVector<bool>::operator[]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN1@Open2
; Line 3232
	mov	edx, DWORD PTR _i$75352[ebp]
	push	edx
	mov	ecx, DWORD PTR _openCallbackSpec$[ebp]
	add	ecx, 104				; 00000068H
	call	??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[]
	push	eax
	lea	eax, DWORD PTR _prefix$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T78351[ebp]
	push	ecx
	call	??H@YG?AVUString@@ABV0@0@Z		; operator+
	mov	DWORD PTR tv85[ebp], eax
	mov	edx, DWORD PTR tv85[ebp]
	mov	DWORD PTR tv194[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	eax, DWORD PTR tv194[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z ; CObjectVector<UString>::Add
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR $T78351[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
; Line 3233
	mov	ecx, DWORD PTR _i$75352[ebp]
	push	ecx
	mov	ecx, DWORD PTR _openCallbackSpec$[ebp]
	add	ecx, 128				; 00000080H
	call	??A?$CRecordVector@_K@@QAEAA_KI@Z	; CRecordVector<unsigned __int64>::operator[]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	add	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx+28]
	adc	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], ecx
	mov	DWORD PTR [eax+28], edx
$LN1@Open2:
; Line 3235
	jmp	$LN3@Open2
$LN2@Open2:
; Line 3237
	mov	DWORD PTR $T78352[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _name$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _prefix$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _callback$[ebp]
	call	??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>
	mov	eax, DWORD PTR $T78352[ebp]
$LN8@Open2:
; Line 3238
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN22@Open2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 124				; 0000007cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN22@Open2:
	DD	3
	DD	$LN21@Open2
$LN21@Open2:
	DD	-28					; ffffffe4H
	DD	4
	DD	$LN17@Open2
	DD	-48					; ffffffd0H
	DD	12					; 0000000cH
	DD	$LN18@Open2
	DD	-68					; ffffffbcH
	DD	12					; 0000000cH
	DD	$LN19@Open2
$LN19@Open2:
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN18@Open2:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	120					; 00000078H
	DB	0
$LN17@Open2:
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	98					; 00000062H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Open2@CArchiveLink@@QAEJAAUCOpenOptions@@PAUIOpenCallbackUI@@@Z$0:
	mov	eax, DWORD PTR $T78347[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Open2@CArchiveLink@@QAEJAAUCOpenOptions@@PAUIOpenCallbackUI@@@Z$1:
	lea	ecx, DWORD PTR _callback$[ebp]
	jmp	??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>
__unwindfunclet$?Open2@CArchiveLink@@QAEJAAUCOpenOptions@@PAUIOpenCallbackUI@@@Z$2:
	lea	ecx, DWORD PTR _prefix$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?Open2@CArchiveLink@@QAEJAAUCOpenOptions@@PAUIOpenCallbackUI@@@Z$3:
	lea	ecx, DWORD PTR _name$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?Open2@CArchiveLink@@QAEJAAUCOpenOptions@@PAUIOpenCallbackUI@@@Z$4:
	lea	ecx, DWORD PTR $T78351[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$?Open2@CArchiveLink@@QAEJAAUCOpenOptions@@PAUIOpenCallbackUI@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-124]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Open2@CArchiveLink@@QAEJAAUCOpenOptions@@PAUIOpenCallbackUI@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Open2@CArchiveLink@@QAEJAAUCOpenOptions@@PAUIOpenCallbackUI@@@Z ENDP ; CArchiveLink::Open2
PUBLIC	??1?$CRecordVector@_K@@QAE@XZ			; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
PUBLIC	??1?$CRecordVector@_N@@QAE@XZ			; CRecordVector<bool>::~CRecordVector<bool>
PUBLIC	??1?$CObjectVector@VUString@@@@QAE@XZ		; CObjectVector<UString>::~CObjectVector<UString>
PUBLIC	??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ	; NWindows::NFile::NFind::CFileInfo::~CFileInfo
PUBLIC	??0?$CRecordVector@_K@@QAE@XZ			; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>
PUBLIC	??0?$CRecordVector@_N@@QAE@XZ			; CRecordVector<bool>::CRecordVector<bool>
PUBLIC	??0?$CObjectVector@VUString@@@@QAE@XZ		; CObjectVector<UString>::CObjectVector<UString>
PUBLIC	??0CFileInfo@NFind@NFile@NWindows@@QAE@XZ	; NWindows::NFile::NFind::CFileInfo::CFileInfo
PUBLIC	??_7COpenCallbackImp@@6BICryptoGetTextPassword@@@ ; COpenCallbackImp::`vftable'
PUBLIC	??_7COpenCallbackImp@@6BIArchiveOpenSetSubArchiveName@@@ ; COpenCallbackImp::`vftable'
PUBLIC	??_7COpenCallbackImp@@6BIArchiveOpenVolumeCallback@@@ ; COpenCallbackImp::`vftable'
PUBLIC	??_7COpenCallbackImp@@6BIArchiveOpenCallback@@@	; COpenCallbackImp::`vftable'
PUBLIC	??0IArchiveOpenSetSubArchiveName@@QAE@XZ	; IArchiveOpenSetSubArchiveName::IArchiveOpenSetSubArchiveName
PUBLIC	??0IArchiveOpenVolumeCallback@@QAE@XZ		; IArchiveOpenVolumeCallback::IArchiveOpenVolumeCallback
PUBLIC	??_R4COpenCallbackImp@@6BIArchiveOpenCallback@@@ ; COpenCallbackImp::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCOpenCallbackImp@@@8			; COpenCallbackImp `RTTI Type Descriptor'
PUBLIC	??_R3COpenCallbackImp@@8			; COpenCallbackImp::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2COpenCallbackImp@@8			; COpenCallbackImp::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@COpenCallbackImp@@8		; COpenCallbackImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@IArchiveOpenVolumeCallback@@8	; IArchiveOpenVolumeCallback::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AUIArchiveOpenVolumeCallback@@@8		; IArchiveOpenVolumeCallback `RTTI Type Descriptor'
PUBLIC	??_R3IArchiveOpenVolumeCallback@@8		; IArchiveOpenVolumeCallback::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IArchiveOpenVolumeCallback@@8		; IArchiveOpenVolumeCallback::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IArchiveOpenVolumeCallback@@8	; IArchiveOpenVolumeCallback::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R17?0A@EA@IArchiveOpenSetSubArchiveName@@8	; IArchiveOpenSetSubArchiveName::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	??_R0?AUIArchiveOpenSetSubArchiveName@@@8	; IArchiveOpenSetSubArchiveName `RTTI Type Descriptor'
PUBLIC	??_R3IArchiveOpenSetSubArchiveName@@8		; IArchiveOpenSetSubArchiveName::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IArchiveOpenSetSubArchiveName@@8		; IArchiveOpenSetSubArchiveName::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IArchiveOpenSetSubArchiveName@@8	; IArchiveOpenSetSubArchiveName::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1M@?0A@EA@ICryptoGetTextPassword@@8		; ICryptoGetTextPassword::`RTTI Base Class Descriptor at (12,-1,0,64)'
PUBLIC	?QueryInterface@COpenCallbackImp@@UAGJABU_GUID@@PAPAX@Z ; COpenCallbackImp::QueryInterface
PUBLIC	?AddRef@COpenCallbackImp@@UAGKXZ		; COpenCallbackImp::AddRef
PUBLIC	?Release@COpenCallbackImp@@UAGKXZ		; COpenCallbackImp::Release
PUBLIC	??_R4COpenCallbackImp@@6BIArchiveOpenVolumeCallback@@@ ; COpenCallbackImp::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@COpenCallbackImp@@W3AGJABU_GUID@@PAPAX@Z ; [thunk]:COpenCallbackImp::QueryInterface`adjustor{4}'
PUBLIC	?AddRef@COpenCallbackImp@@W3AGKXZ		; [thunk]:COpenCallbackImp::AddRef`adjustor{4}'
PUBLIC	?Release@COpenCallbackImp@@W3AGKXZ		; [thunk]:COpenCallbackImp::Release`adjustor{4}'
PUBLIC	??_R4COpenCallbackImp@@6BIArchiveOpenSetSubArchiveName@@@ ; COpenCallbackImp::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@COpenCallbackImp@@W7AGJABU_GUID@@PAPAX@Z ; [thunk]:COpenCallbackImp::QueryInterface`adjustor{8}'
PUBLIC	?AddRef@COpenCallbackImp@@W7AGKXZ		; [thunk]:COpenCallbackImp::AddRef`adjustor{8}'
PUBLIC	?Release@COpenCallbackImp@@W7AGKXZ		; [thunk]:COpenCallbackImp::Release`adjustor{8}'
PUBLIC	?SetSubArchiveName@COpenCallbackImp@@UAGJPB_W@Z	; COpenCallbackImp::SetSubArchiveName
PUBLIC	??_R4COpenCallbackImp@@6BICryptoGetTextPassword@@@ ; COpenCallbackImp::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@COpenCallbackImp@@WM@AGJABU_GUID@@PAPAX@Z ; [thunk]:COpenCallbackImp::QueryInterface`adjustor{12}'
PUBLIC	?AddRef@COpenCallbackImp@@WM@AGKXZ		; [thunk]:COpenCallbackImp::AddRef`adjustor{12}'
PUBLIC	?Release@COpenCallbackImp@@WM@AGKXZ		; [thunk]:COpenCallbackImp::Release`adjustor{12}'
EXTRN	?SetTotal@COpenCallbackImp@@UAGJPB_K0@Z:PROC	; COpenCallbackImp::SetTotal
EXTRN	?SetCompleted@COpenCallbackImp@@UAGJPB_K0@Z:PROC ; COpenCallbackImp::SetCompleted
EXTRN	?GetProperty@COpenCallbackImp@@UAGJKPAUtagPROPVARIANT@@@Z:PROC ; COpenCallbackImp::GetProperty
EXTRN	?GetStream@COpenCallbackImp@@UAGJPB_WPAPAUIInStream@@@Z:PROC ; COpenCallbackImp::GetStream
EXTRN	?CryptoGetTextPassword@COpenCallbackImp@@UAGJPAPA_W@Z:PROC ; COpenCallbackImp::CryptoGetTextPassword
;	COMDAT ??_R4COpenCallbackImp@@6BICryptoGetTextPassword@@@
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\archiveopencallback.h
rdata$r	SEGMENT
??_R4COpenCallbackImp@@6BICryptoGetTextPassword@@@ DD 00H ; COpenCallbackImp::`RTTI Complete Object Locator'
	DD	0cH
	DD	00H
	DD	FLAT:??_R0?AVCOpenCallbackImp@@@8
	DD	FLAT:??_R3COpenCallbackImp@@8
rdata$r	ENDS
;	COMDAT ??_R4COpenCallbackImp@@6BIArchiveOpenSetSubArchiveName@@@
rdata$r	SEGMENT
??_R4COpenCallbackImp@@6BIArchiveOpenSetSubArchiveName@@@ DD 00H ; COpenCallbackImp::`RTTI Complete Object Locator'
	DD	08H
	DD	00H
	DD	FLAT:??_R0?AVCOpenCallbackImp@@@8
	DD	FLAT:??_R3COpenCallbackImp@@8
rdata$r	ENDS
;	COMDAT ??_R4COpenCallbackImp@@6BIArchiveOpenVolumeCallback@@@
rdata$r	SEGMENT
??_R4COpenCallbackImp@@6BIArchiveOpenVolumeCallback@@@ DD 00H ; COpenCallbackImp::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVCOpenCallbackImp@@@8
	DD	FLAT:??_R3COpenCallbackImp@@8
rdata$r	ENDS
;	COMDAT ??_R1M@?0A@EA@ICryptoGetTextPassword@@8
rdata$r	SEGMENT
??_R1M@?0A@EA@ICryptoGetTextPassword@@8 DD FLAT:??_R0?AUICryptoGetTextPassword@@@8 ; ICryptoGetTextPassword::`RTTI Base Class Descriptor at (12,-1,0,64)'
	DD	01H
	DD	0cH
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICryptoGetTextPassword@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@IArchiveOpenSetSubArchiveName@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IArchiveOpenSetSubArchiveName@@8 DD FLAT:??_R0?AUIArchiveOpenSetSubArchiveName@@@8 ; IArchiveOpenSetSubArchiveName::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IArchiveOpenSetSubArchiveName@@8
rdata$r	ENDS
;	COMDAT ??_R2IArchiveOpenSetSubArchiveName@@8
rdata$r	SEGMENT
??_R2IArchiveOpenSetSubArchiveName@@8 DD FLAT:??_R1A@?0A@EA@IArchiveOpenSetSubArchiveName@@8 ; IArchiveOpenSetSubArchiveName::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3IArchiveOpenSetSubArchiveName@@8
rdata$r	SEGMENT
??_R3IArchiveOpenSetSubArchiveName@@8 DD 00H		; IArchiveOpenSetSubArchiveName::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2IArchiveOpenSetSubArchiveName@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIArchiveOpenSetSubArchiveName@@@8
_DATA	SEGMENT
??_R0?AUIArchiveOpenSetSubArchiveName@@@8 DD FLAT:??_7type_info@@6B@ ; IArchiveOpenSetSubArchiveName `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIArchiveOpenSetSubArchiveName@@', 00H
_DATA	ENDS
;	COMDAT ??_R17?0A@EA@IArchiveOpenSetSubArchiveName@@8
rdata$r	SEGMENT
??_R17?0A@EA@IArchiveOpenSetSubArchiveName@@8 DD FLAT:??_R0?AUIArchiveOpenSetSubArchiveName@@@8 ; IArchiveOpenSetSubArchiveName::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	01H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IArchiveOpenSetSubArchiveName@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@IArchiveOpenVolumeCallback@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IArchiveOpenVolumeCallback@@8 DD FLAT:??_R0?AUIArchiveOpenVolumeCallback@@@8 ; IArchiveOpenVolumeCallback::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IArchiveOpenVolumeCallback@@8
rdata$r	ENDS
;	COMDAT ??_R2IArchiveOpenVolumeCallback@@8
rdata$r	SEGMENT
??_R2IArchiveOpenVolumeCallback@@8 DD FLAT:??_R1A@?0A@EA@IArchiveOpenVolumeCallback@@8 ; IArchiveOpenVolumeCallback::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3IArchiveOpenVolumeCallback@@8
rdata$r	SEGMENT
??_R3IArchiveOpenVolumeCallback@@8 DD 00H		; IArchiveOpenVolumeCallback::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2IArchiveOpenVolumeCallback@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIArchiveOpenVolumeCallback@@@8
_DATA	SEGMENT
??_R0?AUIArchiveOpenVolumeCallback@@@8 DD FLAT:??_7type_info@@6B@ ; IArchiveOpenVolumeCallback `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIArchiveOpenVolumeCallback@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@IArchiveOpenVolumeCallback@@8
rdata$r	SEGMENT
??_R13?0A@EA@IArchiveOpenVolumeCallback@@8 DD FLAT:??_R0?AUIArchiveOpenVolumeCallback@@@8 ; IArchiveOpenVolumeCallback::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	01H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IArchiveOpenVolumeCallback@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@COpenCallbackImp@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@COpenCallbackImp@@8 DD FLAT:??_R0?AVCOpenCallbackImp@@@8 ; COpenCallbackImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	09H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3COpenCallbackImp@@8
rdata$r	ENDS
;	COMDAT ??_R2COpenCallbackImp@@8
rdata$r	SEGMENT
??_R2COpenCallbackImp@@8 DD FLAT:??_R1A@?0A@EA@COpenCallbackImp@@8 ; COpenCallbackImp::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IArchiveOpenCallback@@8
	DD	FLAT:??_R1A@?0A@EC@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@IArchiveOpenVolumeCallback@@8
	DD	FLAT:??_R13?0A@EC@IUnknown@@8
	DD	FLAT:??_R17?0A@EA@IArchiveOpenSetSubArchiveName@@8
	DD	FLAT:??_R17?0A@EC@IUnknown@@8
	DD	FLAT:??_R1M@?0A@EA@ICryptoGetTextPassword@@8
	DD	FLAT:??_R1M@?0A@EC@IUnknown@@8
	DD	FLAT:??_R1BA@?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3COpenCallbackImp@@8
rdata$r	SEGMENT
??_R3COpenCallbackImp@@8 DD 00H				; COpenCallbackImp::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	0aH
	DD	FLAT:??_R2COpenCallbackImp@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCOpenCallbackImp@@@8
_DATA	SEGMENT
??_R0?AVCOpenCallbackImp@@@8 DD FLAT:??_7type_info@@6B@	; COpenCallbackImp `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCOpenCallbackImp@@', 00H
_DATA	ENDS
;	COMDAT ??_R4COpenCallbackImp@@6BIArchiveOpenCallback@@@
rdata$r	SEGMENT
??_R4COpenCallbackImp@@6BIArchiveOpenCallback@@@ DD 00H	; COpenCallbackImp::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCOpenCallbackImp@@@8
	DD	FLAT:??_R3COpenCallbackImp@@8
rdata$r	ENDS
;	COMDAT ??_7COpenCallbackImp@@6BICryptoGetTextPassword@@@
CONST	SEGMENT
??_7COpenCallbackImp@@6BICryptoGetTextPassword@@@ DD FLAT:??_R4COpenCallbackImp@@6BICryptoGetTextPassword@@@ ; COpenCallbackImp::`vftable'
	DD	FLAT:?QueryInterface@COpenCallbackImp@@WM@AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@COpenCallbackImp@@WM@AGKXZ
	DD	FLAT:?Release@COpenCallbackImp@@WM@AGKXZ
	DD	FLAT:?CryptoGetTextPassword@COpenCallbackImp@@UAGJPAPA_W@Z
CONST	ENDS
;	COMDAT ??_7COpenCallbackImp@@6BIArchiveOpenSetSubArchiveName@@@
CONST	SEGMENT
??_7COpenCallbackImp@@6BIArchiveOpenSetSubArchiveName@@@ DD FLAT:??_R4COpenCallbackImp@@6BIArchiveOpenSetSubArchiveName@@@ ; COpenCallbackImp::`vftable'
	DD	FLAT:?QueryInterface@COpenCallbackImp@@W7AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@COpenCallbackImp@@W7AGKXZ
	DD	FLAT:?Release@COpenCallbackImp@@W7AGKXZ
	DD	FLAT:?SetSubArchiveName@COpenCallbackImp@@UAGJPB_W@Z
CONST	ENDS
;	COMDAT ??_7COpenCallbackImp@@6BIArchiveOpenVolumeCallback@@@
CONST	SEGMENT
??_7COpenCallbackImp@@6BIArchiveOpenVolumeCallback@@@ DD FLAT:??_R4COpenCallbackImp@@6BIArchiveOpenVolumeCallback@@@ ; COpenCallbackImp::`vftable'
	DD	FLAT:?QueryInterface@COpenCallbackImp@@W3AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@COpenCallbackImp@@W3AGKXZ
	DD	FLAT:?Release@COpenCallbackImp@@W3AGKXZ
	DD	FLAT:?GetProperty@COpenCallbackImp@@UAGJKPAUtagPROPVARIANT@@@Z
	DD	FLAT:?GetStream@COpenCallbackImp@@UAGJPB_WPAPAUIInStream@@@Z
CONST	ENDS
;	COMDAT ??_7COpenCallbackImp@@6BIArchiveOpenCallback@@@
CONST	SEGMENT
??_7COpenCallbackImp@@6BIArchiveOpenCallback@@@ DD FLAT:??_R4COpenCallbackImp@@6BIArchiveOpenCallback@@@ ; COpenCallbackImp::`vftable'
	DD	FLAT:?QueryInterface@COpenCallbackImp@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@COpenCallbackImp@@UAGKXZ
	DD	FLAT:?Release@COpenCallbackImp@@UAGKXZ
	DD	FLAT:?SetTotal@COpenCallbackImp@@UAGJPB_K0@Z
	DD	FLAT:?SetCompleted@COpenCallbackImp@@UAGJPB_K0@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0COpenCallbackImp@@QAE@XZ DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??0COpenCallbackImp@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0COpenCallbackImp@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0COpenCallbackImp@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0COpenCallbackImp@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0COpenCallbackImp@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0COpenCallbackImp@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0COpenCallbackImp@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0COpenCallbackImp@@QAE@XZ$5
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0COpenCallbackImp@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0COpenCallbackImp@@QAE@XZ PROC			; COpenCallbackImp::COpenCallbackImp, COMDAT
; _this$ = ecx
; Line 96
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0COpenCallbackImp@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IArchiveOpenCallback@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0IArchiveOpenVolumeCallback@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0IArchiveOpenSetSubArchiveName@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0ICryptoGetTextPassword@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7COpenCallbackImp@@6BIArchiveOpenCallback@@@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], OFFSET ??_7COpenCallbackImp@@6BIArchiveOpenVolumeCallback@@@
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], OFFSET ??_7COpenCallbackImp@@6BIArchiveOpenSetSubArchiveName@@@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], OFFSET ??_7COpenCallbackImp@@6BICryptoGetTextPassword@@@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??0CFileInfo@NFind@NFile@NWindows@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 92					; 0000005cH
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 104				; 00000068H
	call	??0?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::CObjectVector<UString>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 116				; 00000074H
	call	??0?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::CRecordVector<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 128				; 00000080H
	call	??0?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+144], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	call	??0?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::CMyComPtr<IArchiveOpenCallback>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0COpenCallbackImp@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??0COpenCallbackImp@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	jmp	??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ
__unwindfunclet$??0COpenCallbackImp@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 92					; 0000005cH
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??0COpenCallbackImp@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 104				; 00000068H
	jmp	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
__unwindfunclet$??0COpenCallbackImp@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 116				; 00000074H
	jmp	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
__unwindfunclet$??0COpenCallbackImp@@QAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 128				; 00000080H
	jmp	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
__ehhandler$??0COpenCallbackImp@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0COpenCallbackImp@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0COpenCallbackImp@@QAE@XZ ENDP			; COpenCallbackImp::COpenCallbackImp
EXTRN	_IID_IArchiveOpenVolumeCallback:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@COpenCallbackImp@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
tv138 = -16						; size = 4
tv128 = -12						; size = 4
tv86 = -8						; size = 4
tv75 = -4						; size = 4
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@COpenCallbackImp@@UAGJABU_GUID@@PAPAX@Z PROC ; COpenCallbackImp::QueryInterface, COMDAT
; Line 56
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN8@QueryInter@9
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN11@QueryInter@9
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	mov	DWORD PTR tv75[ebp], edx
	jmp	SHORT $LN12@QueryInter@9
$LN11@QueryInter@9:
	mov	DWORD PTR tv75[ebp], 0
$LN12@QueryInter@9:
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	ecx, DWORD PTR tv75[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	$LN7@QueryInter@9
$LN8@QueryInter@9:
	push	OFFSET _IID_IArchiveOpenVolumeCallback
	mov	edx, DWORD PTR _iid$[ebp]
	push	edx
	call	_==@8
	test	eax, eax
	je	SHORT $LN6@QueryInter@9
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN13@QueryInter@9
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR tv86[ebp], eax
	jmp	SHORT $LN14@QueryInter@9
$LN13@QueryInter@9:
	mov	DWORD PTR tv86[ebp], 0
$LN14@QueryInter@9:
	mov	ecx, DWORD PTR _outObject$[ebp]
	mov	edx, DWORD PTR tv86[ebp]
	mov	DWORD PTR [ecx], edx
	jmp	SHORT $LN7@QueryInter@9
$LN6@QueryInter@9:
	push	OFFSET _IID_ICryptoGetTextPassword
	mov	eax, DWORD PTR _iid$[ebp]
	push	eax
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@QueryInter@9
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN15@QueryInter@9
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR tv128[ebp], ecx
	jmp	SHORT $LN16@QueryInter@9
$LN15@QueryInter@9:
	mov	DWORD PTR tv128[ebp], 0
$LN16@QueryInter@9:
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR tv128[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN7@QueryInter@9
$LN4@QueryInter@9:
	push	OFFSET _IID_IArchiveOpenSetSubArchiveName
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@9
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN17@QueryInter@9
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 8
	mov	DWORD PTR tv138[ebp], edx
	jmp	SHORT $LN18@QueryInter@9
$LN17@QueryInter@9:
	mov	DWORD PTR tv138[ebp], 0
$LN18@QueryInter@9:
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	ecx, DWORD PTR tv138[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN7@QueryInter@9
$LN2@QueryInter@9:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN9@QueryInter@9
$LN7@QueryInter@9:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	xor	eax, eax
$LN9@QueryInter@9:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@COpenCallbackImp@@UAGJABU_GUID@@PAPAX@Z ENDP ; COpenCallbackImp::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@COpenCallbackImp@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@COpenCallbackImp@@UAGKXZ PROC			; COpenCallbackImp::AddRef, COMDAT
; Line 56
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+16], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@COpenCallbackImp@@UAGKXZ ENDP			; COpenCallbackImp::AddRef
_TEXT	ENDS
PUBLIC	??_GCOpenCallbackImp@@QAEPAXI@Z			; COpenCallbackImp::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@COpenCallbackImp@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T78396 = -8						; size = 4
$T78395 = -4						; size = 4
_this$ = 8						; size = 4
?Release@COpenCallbackImp@@UAGKXZ PROC			; COpenCallbackImp::Release, COMDAT
; Line 56
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+16], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@10
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+16]
	jmp	SHORT $LN2@Release@10
$LN1@Release@10:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T78396[ebp], edx
	mov	eax, DWORD PTR $T78396[ebp]
	mov	DWORD PTR $T78395[ebp], eax
	cmp	DWORD PTR $T78395[ebp], 0
	je	SHORT $LN4@Release@10
	push	1
	mov	ecx, DWORD PTR $T78395[ebp]
	call	??_GCOpenCallbackImp@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release@10
$LN4@Release@10:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release@10:
	xor	eax, eax
$LN2@Release@10:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@COpenCallbackImp@@UAGKXZ ENDP			; COpenCallbackImp::Release
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SetSubArchiveName@COpenCallbackImp@@UAGJPB_W@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_name$ = 12						; size = 4
?SetSubArchiveName@COpenCallbackImp@@UAGJPB_W@Z PROC	; COpenCallbackImp::SetSubArchiveName, COMDAT
; Line 72
	push	ebp
	mov	ebp, esp
; Line 73
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+80], 1
; Line 74
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	??4UString@@QAEAAV0@PB_W@Z		; UString::operator=
; Line 76
	xor	eax, eax
; Line 77
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?SetSubArchiveName@COpenCallbackImp@@UAGJPB_W@Z ENDP	; COpenCallbackImp::SetSubArchiveName
_TEXT	ENDS
PUBLIC	?Clear@?$CRecordVector@_K@@QAEXXZ		; CRecordVector<unsigned __int64>::Clear
PUBLIC	?Clear@?$CRecordVector@_N@@QAEXXZ		; CRecordVector<bool>::Clear
EXTRN	?Find@CFileInfo@NFind@NFile@NWindows@@QAE_NPB_W@Z:PROC ; NWindows::NFile::NFind::CFileInfo::Find
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Init@COpenCallbackImp@@QAEXABVUString@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Init@COpenCallbackImp@@QAEXABVUString@@0@Z$0
__ehfuncinfo$?Init@COpenCallbackImp@@QAEXABVUString@@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Init@COpenCallbackImp@@QAEXABVUString@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?Init@COpenCallbackImp@@QAEXABVUString@@0@Z
_TEXT	SEGMENT
tv129 = -44						; size = 4
tv130 = -40						; size = 4
$T78405 = -36						; size = 4
$T78404 = -32						; size = 12
$T78403 = -17						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_folderPrefix$ = 8					; size = 4
_fileName$ = 12						; size = 4
?Init@COpenCallbackImp@@QAEXABVUString@@0@Z PROC	; COpenCallbackImp::Init, COMDAT
; _this$ = ecx
; Line 98
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Init@COpenCallbackImp@@QAEXABVUString@@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-44], eax
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 99
	mov	eax, DWORD PTR _folderPrefix$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
; Line 100
	mov	ecx, DWORD PTR _fileName$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 20					; 00000014H
	push	edx
	lea	eax, DWORD PTR $T78404[ebp]
	push	eax
	call	??H@YG?AVUString@@ABV0@0@Z		; operator+
	mov	DWORD PTR tv130[ebp], eax
	mov	ecx, DWORD PTR tv130[ebp]
	mov	DWORD PTR tv129[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR tv129[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?Find@CFileInfo@NFind@NFile@NWindows@@QAE_NPB_W@Z ; NWindows::NFile::NFind::CFileInfo::Find
	movzx	edx, al
	neg	edx
	sbb	edx, edx
	add	edx, 1
	mov	BYTE PTR $T78403[ebp], dl
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T78404[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	movzx	eax, BYTE PTR $T78403[ebp]
	test	eax, eax
	je	SHORT $LN1@Init
; Line 101
	mov	DWORD PTR $T78405[ebp], 20121118	; 0133061eH
	push	OFFSET __TI1H
	lea	ecx, DWORD PTR $T78405[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN1@Init:
; Line 102
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 104				; 00000068H
	call	?Clear@?$CObjectVector@VUString@@@@QAEXXZ ; CObjectVector<UString>::Clear
; Line 103
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 116				; 00000074H
	call	?Clear@?$CRecordVector@_N@@QAEXXZ	; CRecordVector<bool>::Clear
; Line 104
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 128				; 00000080H
	call	?Clear@?$CRecordVector@_K@@QAEXXZ	; CRecordVector<unsigned __int64>::Clear
; Line 105
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+88], 0
; Line 107
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+140], 0
$LN3@Init:
; Line 108
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Init@COpenCallbackImp@@QAEXABVUString@@0@Z$0:
	lea	ecx, DWORD PTR $T78404[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$?Init@COpenCallbackImp@@QAEXABVUString@@0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Init@COpenCallbackImp@@QAEXABVUString@@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Init@COpenCallbackImp@@QAEXABVUString@@0@Z ENDP	; COpenCallbackImp::Init
PUBLIC	??1COpenCallbackImp@@QAE@XZ			; COpenCallbackImp::~COpenCallbackImp
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCOpenCallbackImp@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCOpenCallbackImp@@QAEPAXI@Z PROC			; COpenCallbackImp::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1COpenCallbackImp@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@9
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@9:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCOpenCallbackImp@@QAEPAXI@Z ENDP			; COpenCallbackImp::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_7IArchiveOpenVolumeCallback@@6B@		; IArchiveOpenVolumeCallback::`vftable'
PUBLIC	??_R4IArchiveOpenVolumeCallback@@6B@		; IArchiveOpenVolumeCallback::`RTTI Complete Object Locator'
;	COMDAT ??_R4IArchiveOpenVolumeCallback@@6B@
rdata$r	SEGMENT
??_R4IArchiveOpenVolumeCallback@@6B@ DD 00H		; IArchiveOpenVolumeCallback::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIArchiveOpenVolumeCallback@@@8
	DD	FLAT:??_R3IArchiveOpenVolumeCallback@@8
rdata$r	ENDS
;	COMDAT ??_7IArchiveOpenVolumeCallback@@6B@
CONST	SEGMENT
??_7IArchiveOpenVolumeCallback@@6B@ DD FLAT:??_R4IArchiveOpenVolumeCallback@@6B@ ; IArchiveOpenVolumeCallback::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0IArchiveOpenVolumeCallback@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IArchiveOpenVolumeCallback@@QAE@XZ PROC		; IArchiveOpenVolumeCallback::IArchiveOpenVolumeCallback, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7IArchiveOpenVolumeCallback@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0IArchiveOpenVolumeCallback@@QAE@XZ ENDP		; IArchiveOpenVolumeCallback::IArchiveOpenVolumeCallback
_TEXT	ENDS
PUBLIC	??_7IArchiveOpenSetSubArchiveName@@6B@		; IArchiveOpenSetSubArchiveName::`vftable'
PUBLIC	??_R4IArchiveOpenSetSubArchiveName@@6B@		; IArchiveOpenSetSubArchiveName::`RTTI Complete Object Locator'
;	COMDAT ??_R4IArchiveOpenSetSubArchiveName@@6B@
rdata$r	SEGMENT
??_R4IArchiveOpenSetSubArchiveName@@6B@ DD 00H		; IArchiveOpenSetSubArchiveName::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIArchiveOpenSetSubArchiveName@@@8
	DD	FLAT:??_R3IArchiveOpenSetSubArchiveName@@8
rdata$r	ENDS
;	COMDAT ??_7IArchiveOpenSetSubArchiveName@@6B@
CONST	SEGMENT
??_7IArchiveOpenSetSubArchiveName@@6B@ DD FLAT:??_R4IArchiveOpenSetSubArchiveName@@6B@ ; IArchiveOpenSetSubArchiveName::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0IArchiveOpenSetSubArchiveName@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IArchiveOpenSetSubArchiveName@@QAE@XZ PROC		; IArchiveOpenSetSubArchiveName::IArchiveOpenSetSubArchiveName, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7IArchiveOpenSetSubArchiveName@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0IArchiveOpenSetSubArchiveName@@QAE@XZ ENDP		; IArchiveOpenSetSubArchiveName::IArchiveOpenSetSubArchiveName
_TEXT	ENDS
PUBLIC	??0CFileInfoBase@NFind@NFile@NWindows@@QAE@XZ	; NWindows::NFile::NFind::CFileInfoBase::CFileInfoBase
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CFileInfo@NFind@NFile@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CFileInfo@NFind@NFile@NWindows@@QAE@XZ PROC		; NWindows::NFile::NFind::CFileInfo::CFileInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CFileInfoBase@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfoBase::CFileInfoBase
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CFileInfo@NFind@NFile@NWindows@@QAE@XZ ENDP		; NWindows::NFile::NFind::CFileInfo::CFileInfo
_TEXT	ENDS
EXTRN	?ClearBase@CFileInfoBase@NFind@NFile@NWindows@@QAEXXZ:PROC ; NWindows::NFile::NFind::CFileInfoBase::ClearBase
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CFileInfoBase@NFind@NFile@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CFileInfoBase@NFind@NFile@NWindows@@QAE@XZ PROC	; NWindows::NFile::NFind::CFileInfoBase::CFileInfoBase, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\filefind.h
; Line 44
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearBase@CFileInfoBase@NFind@NFile@NWindows@@QAEXXZ ; NWindows::NFile::NFind::CFileInfoBase::ClearBase
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CFileInfoBase@NFind@NFile@NWindows@@QAE@XZ ENDP	; NWindows::NFile::NFind::CFileInfoBase::CFileInfoBase
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ PROC		; NWindows::NFile::NFind::CFileInfo::~CFileInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??1UString@@QAE@XZ			; UString::~UString
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ENDP		; NWindows::NFile::NFind::CFileInfo::~CFileInfo
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1COpenCallbackImp@@QAE@XZ DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??1COpenCallbackImp@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1COpenCallbackImp@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1COpenCallbackImp@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1COpenCallbackImp@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1COpenCallbackImp@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1COpenCallbackImp@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1COpenCallbackImp@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??1COpenCallbackImp@@QAE@XZ$5
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1COpenCallbackImp@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1COpenCallbackImp@@QAE@XZ PROC			; COpenCallbackImp::~COpenCallbackImp, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1COpenCallbackImp@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	call	??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 128				; 00000080H
	call	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 116				; 00000074H
	call	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 104				; 00000068H
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 92					; 0000005cH
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1COpenCallbackImp@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??1COpenCallbackImp@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	jmp	??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ
__unwindfunclet$??1COpenCallbackImp@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 92					; 0000005cH
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??1COpenCallbackImp@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 104				; 00000068H
	jmp	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
__unwindfunclet$??1COpenCallbackImp@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 116				; 00000074H
	jmp	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
__unwindfunclet$??1COpenCallbackImp@@QAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 128				; 00000080H
	jmp	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
__ehhandler$??1COpenCallbackImp@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1COpenCallbackImp@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1COpenCallbackImp@@QAE@XZ ENDP			; COpenCallbackImp::~COpenCallbackImp
PUBLIC	?SeekToStart@CTailInStream@@QAEJXZ		; CTailInStream::SeekToStart
PUBLIC	?Init@CTailInStream@@QAEXXZ			; CTailInStream::Init
PUBLIC	??0CTailInStream@@QAE@XZ			; CTailInStream::CTailInStream
PUBLIC	?GetGlobalOffset@CArc@@QBE_JXZ			; CArc::GetGlobalOffset
PUBLIC	?ReOpen@CArc@@QAEJABUCOpenOptions@@@Z		; CArc::ReOpen
xdata$x	SEGMENT
__unwindtable$?ReOpen@CArc@@QAEJABUCOpenOptions@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ReOpen@CArc@@QAEJABUCOpenOptions@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?ReOpen@CArc@@QAEJABUCOpenOptions@@@Z$1
__ehfuncinfo$?ReOpen@CArc@@QAEJABUCOpenOptions@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?ReOpen@CArc@@QAEJABUCOpenOptions@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv270 = -124						; size = 4
tv161 = -120						; size = 4
tv143 = -116						; size = 4
$T78450 = -112						; size = 4
$T78449 = -108						; size = 4
$T78448 = -104						; size = 4
$T78445 = -100						; size = 4
$T78444 = -96						; size = 4
___result__$75387 = -92					; size = 4
_res$ = -88						; size = 4
_maxStartPosition$ = -80				; size = 8
___result__$75380 = -68					; size = 4
_tailStreamSpec$75375 = -64				; size = 4
_globalOffset$ = -60					; size = 8
_stream2$ = -48						; size = 4
___result__$75368 = -40					; size = 4
___result__$75366 = -36					; size = 4
_fileSize$ = -28					; size = 8
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_op$ = 8						; size = 4
?ReOpen@CArc@@QAEJABUCOpenOptions@@@Z PROC		; CArc::ReOpen
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\openarchive.cpp
; Line 3241
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ReOpen@CArc@@QAEJABUCOpenOptions@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 112				; 00000070H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-124]
	mov	ecx, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 3242
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?ClearErrors@CArcErrorInfo@@QAEXXZ	; CArcErrorInfo::ClearErrors
; Line 3243
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], -1
; Line 3245
	mov	DWORD PTR _fileSize$[ebp], 0
	mov	DWORD PTR _fileSize$[ebp+4], 0
; Line 3246
	mov	ecx, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [ecx+48], 0
	je	SHORT $LN9@ReOpen
; Line 3248
	mov	esi, esp
	lea	edx, DWORD PTR _fileSize$[ebp]
	push	edx
	push	2
	push	0
	push	0
	mov	eax, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$75366[ebp], eax
	cmp	DWORD PTR ___result__$75366[ebp], 0
	je	SHORT $LN8@ReOpen
	mov	eax, DWORD PTR ___result__$75366[ebp]
	jmp	$LN10@ReOpen
$LN8@ReOpen:
; Line 3249
	mov	esi, esp
	push	0
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$75368[ebp], eax
	cmp	DWORD PTR ___result__$75368[ebp], 0
	je	SHORT $LN9@ReOpen
	mov	eax, DWORD PTR ___result__$75368[ebp]
	jmp	$LN10@ReOpen
$LN9@ReOpen:
; Line 3251
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _fileSize$[ebp]
	mov	DWORD PTR [eax+192], ecx
	mov	edx, DWORD PTR _fileSize$[ebp+4]
	mov	DWORD PTR [eax+196], edx
; Line 3253
	lea	ecx, DWORD PTR _stream2$[ebp]
	call	??0?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::CMyComPtr<IInStream>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 3254
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetGlobalOffset@CArc@@QBE_JXZ		; CArc::GetGlobalOffset
	mov	DWORD PTR _globalOffset$[ebp], eax
	mov	DWORD PTR _globalOffset$[ebp+4], edx
; Line 3255
	cmp	DWORD PTR _globalOffset$[ebp+4], 0
	jg	SHORT $LN6@ReOpen
	jl	SHORT $LN16@ReOpen
	cmp	DWORD PTR _globalOffset$[ebp], 0
	ja	SHORT $LN6@ReOpen
$LN16@ReOpen:
; Line 3256
	mov	eax, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	lea	ecx, DWORD PTR _stream2$[ebp]
	call	??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ; CMyComPtr<IInStream>::operator=
; Line 3257
	jmp	$LN5@ReOpen
$LN6@ReOpen:
; Line 3259
	push	32					; 00000020H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T78445[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T78445[ebp], 0
	je	SHORT $LN12@ReOpen
	mov	ecx, DWORD PTR $T78445[ebp]
	call	??0CTailInStream@@QAE@XZ
	mov	DWORD PTR tv143[ebp], eax
	jmp	SHORT $LN13@ReOpen
$LN12@ReOpen:
	mov	DWORD PTR tv143[ebp], 0
$LN13@ReOpen:
	mov	edx, DWORD PTR tv143[ebp]
	mov	DWORD PTR $T78444[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR $T78444[ebp]
	mov	DWORD PTR _tailStreamSpec$75375[ebp], eax
; Line 3260
	mov	ecx, DWORD PTR _tailStreamSpec$75375[ebp]
	push	ecx
	lea	ecx, DWORD PTR _stream2$[ebp]
	call	??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ; CMyComPtr<IInStream>::operator=
; Line 3261
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	mov	ecx, DWORD PTR _tailStreamSpec$75375[ebp]
	add	ecx, 16					; 00000010H
	call	??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ; CMyComPtr<IInStream>::operator=
; Line 3262
	mov	ecx, DWORD PTR _tailStreamSpec$75375[ebp]
	mov	edx, DWORD PTR _globalOffset$[ebp]
	mov	DWORD PTR [ecx+24], edx
	mov	eax, DWORD PTR _globalOffset$[ebp+4]
	mov	DWORD PTR [ecx+28], eax
; Line 3263
	mov	ecx, DWORD PTR _tailStreamSpec$75375[ebp]
	call	?Init@CTailInStream@@QAEXXZ		; CTailInStream::Init
; Line 3264
	mov	ecx, DWORD PTR _tailStreamSpec$75375[ebp]
	call	?SeekToStart@CTailInStream@@QAEJXZ	; CTailInStream::SeekToStart
	mov	DWORD PTR ___result__$75380[ebp], eax
	cmp	DWORD PTR ___result__$75380[ebp], 0
	je	SHORT $LN5@ReOpen
	mov	ecx, DWORD PTR ___result__$75380[ebp]
	mov	DWORD PTR $T78448[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _stream2$[ebp]
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
	mov	eax, DWORD PTR $T78448[ebp]
	jmp	$LN10@ReOpen
$LN5@ReOpen:
; Line 3269
	mov	DWORD PTR _maxStartPosition$[ebp], 4194304 ; 00400000H
	mov	DWORD PTR _maxStartPosition$[ebp+4], 0
; Line 3270
	mov	ecx, DWORD PTR _this$[ebp]
	call	??C?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator->
	mov	DWORD PTR tv161[ebp], eax
	mov	esi, esp
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	lea	ecx, DWORD PTR _maxStartPosition$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _stream2$[ebp]
	call	??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *
	push	eax
	mov	edx, DWORD PTR tv161[ebp]
	push	edx
	mov	eax, DWORD PTR tv161[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _res$[ebp], eax
; Line 3272
	cmp	DWORD PTR _res$[ebp], 0
	jne	$LN3@ReOpen
; Line 3274
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	mov	ecx, DWORD PTR _globalOffset$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _globalOffset$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator IInArchive *
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadBasicProps@CArc@@QAEJPAUIInArchive@@_KJ@Z ; CArc::ReadBasicProps
	mov	DWORD PTR ___result__$75387[ebp], eax
	cmp	DWORD PTR ___result__$75387[ebp], 0
	je	SHORT $LN2@ReOpen
	mov	eax, DWORD PTR ___result__$75387[ebp]
	mov	DWORD PTR $T78449[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _stream2$[ebp]
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
	mov	eax, DWORD PTR $T78449[ebp]
	jmp	SHORT $LN10@ReOpen
$LN2@ReOpen:
; Line 3275
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _globalOffset$[ebp]
	mov	DWORD PTR [ecx+208], edx
	mov	eax, DWORD PTR _globalOffset$[ebp+4]
	mov	DWORD PTR [ecx+212], eax
; Line 3276
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv270[ebp], ecx
	mov	edx, DWORD PTR tv270[ebp]
	mov	eax, DWORD PTR tv270[ebp]
	mov	ecx, DWORD PTR [edx+208]
	or	ecx, DWORD PTR [eax+212]
	je	SHORT $LN3@ReOpen
; Line 3277
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ; CMyComPtr<IInStream>::operator=
$LN3@ReOpen:
; Line 3279
	mov	ecx, DWORD PTR _res$[ebp]
	mov	DWORD PTR $T78450[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _stream2$[ebp]
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
	mov	eax, DWORD PTR $T78450[ebp]
$LN10@ReOpen:
; Line 3280
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN22@ReOpen
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 124				; 0000007cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN22@ReOpen:
	DD	3
	DD	$LN21@ReOpen
$LN21@ReOpen:
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN17@ReOpen
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN18@ReOpen
	DD	-80					; ffffffb0H
	DD	8
	DD	$LN19@ReOpen
$LN19@ReOpen:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	120					; 00000078H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	0
$LN18@ReOpen:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	50					; 00000032H
	DB	0
$LN17@ReOpen:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ReOpen@CArc@@QAEJABUCOpenOptions@@@Z$0:
	lea	ecx, DWORD PTR _stream2$[ebp]
	jmp	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
__unwindfunclet$?ReOpen@CArc@@QAEJABUCOpenOptions@@@Z$1:
	mov	eax, DWORD PTR $T78445[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?ReOpen@CArc@@QAEJABUCOpenOptions@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-124]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ReOpen@CArc@@QAEJABUCOpenOptions@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ReOpen@CArc@@QAEJABUCOpenOptions@@@Z ENDP		; CArc::ReOpen
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Init@CTailInStream@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Init@CTailInStream@@QAEXXZ PROC			; CTailInStream::Init, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\limitedstreams.h
; Line 170
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 171
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	DWORD PTR [eax+12], 0
; Line 172
	mov	esp, ebp
	pop	ebp
	ret	0
?Init@CTailInStream@@QAEXXZ ENDP			; CTailInStream::Init
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SeekToStart@CTailInStream@@QAEJXZ
_TEXT	SEGMENT
tv68 = -8						; size = 4
_this$ = -4						; size = 4
?SeekToStart@CTailInStream@@QAEJXZ PROC			; CTailInStream::SeekToStart, COMDAT
; _this$ = ecx
; Line 179
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->
	mov	DWORD PTR tv68[ebp], eax
	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR [eax+24]
	push	edx
	mov	eax, DWORD PTR tv68[ebp]
	push	eax
	mov	ecx, DWORD PTR tv68[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?SeekToStart@CTailInStream@@QAEJXZ ENDP			; CTailInStream::SeekToStart
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetGlobalOffset@CArc@@QBE_JXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGlobalOffset@CArc@@QBE_JXZ PROC			; CArc::GetGlobalOffset, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\openarchive.h
; Line 303
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+208]
	add	edx, DWORD PTR [ecx+168]
	mov	esi, DWORD PTR [eax+212]
	adc	esi, DWORD PTR [ecx+172]
	mov	eax, edx
	mov	edx, esi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?GetGlobalOffset@CArc@@QBE_JXZ ENDP			; CArc::GetGlobalOffset
_TEXT	ENDS
PUBLIC	??_7CTailInStream@@6B@				; CTailInStream::`vftable'
PUBLIC	??_R4CTailInStream@@6B@				; CTailInStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCTailInStream@@@8			; CTailInStream `RTTI Type Descriptor'
PUBLIC	??_R3CTailInStream@@8				; CTailInStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CTailInStream@@8				; CTailInStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CTailInStream@@8			; CTailInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?QueryInterface@CTailInStream@@UAGJABU_GUID@@PAPAX@Z ; CTailInStream::QueryInterface
PUBLIC	?AddRef@CTailInStream@@UAGKXZ			; CTailInStream::AddRef
PUBLIC	?Release@CTailInStream@@UAGKXZ			; CTailInStream::Release
EXTRN	?Read@CTailInStream@@UAGJPAXIPAI@Z:PROC		; CTailInStream::Read
EXTRN	?Seek@CTailInStream@@UAGJ_JIPA_K@Z:PROC		; CTailInStream::Seek
;	COMDAT ??_R1A@?0A@EA@CTailInStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CTailInStream@@8 DD FLAT:??_R0?AVCTailInStream@@@8 ; CTailInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CTailInStream@@8
rdata$r	ENDS
;	COMDAT ??_R2CTailInStream@@8
rdata$r	SEGMENT
??_R2CTailInStream@@8 DD FLAT:??_R1A@?0A@EA@CTailInStream@@8 ; CTailInStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IInStream@@8
	DD	FLAT:??_R1A@?0A@EA@ISequentialInStream@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CTailInStream@@8
rdata$r	SEGMENT
??_R3CTailInStream@@8 DD 00H				; CTailInStream::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2CTailInStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCTailInStream@@@8
_DATA	SEGMENT
??_R0?AVCTailInStream@@@8 DD FLAT:??_7type_info@@6B@	; CTailInStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCTailInStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CTailInStream@@6B@
rdata$r	SEGMENT
??_R4CTailInStream@@6B@ DD 00H				; CTailInStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCTailInStream@@@8
	DD	FLAT:??_R3CTailInStream@@8
rdata$r	ENDS
;	COMDAT ??_7CTailInStream@@6B@
CONST	SEGMENT
??_7CTailInStream@@6B@ DD FLAT:??_R4CTailInStream@@6B@	; CTailInStream::`vftable'
	DD	FLAT:?QueryInterface@CTailInStream@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CTailInStream@@UAGKXZ
	DD	FLAT:?Release@CTailInStream@@UAGKXZ
	DD	FLAT:?Read@CTailInStream@@UAGJPAXIPAI@Z
	DD	FLAT:?Seek@CTailInStream@@UAGJ_JIPA_K@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CTailInStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CTailInStream@@QAE@XZ PROC				; CTailInStream::CTailInStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IInStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CTailInStream@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::CMyComPtr<IInStream>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CTailInStream@@QAE@XZ ENDP				; CTailInStream::CTailInStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CTailInStream@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CTailInStream@@UAGJABU_GUID@@PAPAX@Z PROC ; CTailInStream::QueryInterface, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\common\limitedstreams.h
; Line 174
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN6@QueryInter@10
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN5@QueryInter@10
$LN6@QueryInter@10:
	push	OFFSET _IID_ISequentialInStream
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@QueryInter@10
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN5@QueryInter@10
$LN4@QueryInter@10:
	push	OFFSET _IID_IInStream
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@10
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN5@QueryInter@10
$LN2@QueryInter@10:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN7@QueryInter@10
$LN5@QueryInter@10:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	xor	eax, eax
$LN7@QueryInter@10:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CTailInStream@@UAGJABU_GUID@@PAPAX@Z ENDP ; CTailInStream::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CTailInStream@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CTailInStream@@UAGKXZ PROC			; CTailInStream::AddRef, COMDAT
; Line 174
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CTailInStream@@UAGKXZ ENDP			; CTailInStream::AddRef
_TEXT	ENDS
PUBLIC	??_GCTailInStream@@QAEPAXI@Z			; CTailInStream::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CTailInStream@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T78478 = -8						; size = 4
$T78477 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CTailInStream@@UAGKXZ PROC			; CTailInStream::Release, COMDAT
; Line 174
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@11
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	jmp	SHORT $LN2@Release@11
$LN1@Release@11:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T78478[ebp], edx
	mov	eax, DWORD PTR $T78478[ebp]
	mov	DWORD PTR $T78477[ebp], eax
	cmp	DWORD PTR $T78477[ebp], 0
	je	SHORT $LN4@Release@11
	push	1
	mov	ecx, DWORD PTR $T78477[ebp]
	call	??_GCTailInStream@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release@11
$LN4@Release@11:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release@11:
	xor	eax, eax
$LN2@Release@11:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CTailInStream@@UAGKXZ ENDP			; CTailInStream::Release
_TEXT	ENDS
PUBLIC	??1CTailInStream@@QAE@XZ			; CTailInStream::~CTailInStream
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCTailInStream@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCTailInStream@@QAEPAXI@Z PROC			; CTailInStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CTailInStream@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@10
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@10:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCTailInStream@@QAEPAXI@Z ENDP			; CTailInStream::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CTailInStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CTailInStream@@QAE@XZ PROC				; CTailInStream::~CTailInStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CTailInStream@@QAE@XZ ENDP				; CTailInStream::~CTailInStream
_TEXT	ENDS
PUBLIC	?Open3@CArchiveLink@@QAEJAAUCOpenOptions@@PAUIOpenCallbackUI@@@Z ; CArchiveLink::Open3
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
___result__$75401 = -12					; size = 4
_res$ = -8						; size = 4
_this$ = -4						; size = 4
_op$ = 8						; size = 4
_callbackUI$ = 12					; size = 4
?Open3@CArchiveLink@@QAEJAAUCOpenOptions@@PAUIOpenCallbackUI@@@Z PROC ; CArchiveLink::Open3
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\openarchive.cpp
; Line 3283
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 3284
	mov	eax, DWORD PTR _callbackUI$[ebp]
	push	eax
	mov	ecx, DWORD PTR _op$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Open2@CArchiveLink@@QAEJAAUCOpenOptions@@PAUIOpenCallbackUI@@@Z ; CArchiveLink::Open2
	mov	DWORD PTR _res$[ebp], eax
; Line 3285
	cmp	DWORD PTR _callbackUI$[ebp], 0
	je	SHORT $LN2@Open3
; Line 3287
	mov	edx, DWORD PTR _callbackUI$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _callbackUI$[ebp]
	mov	edx, DWORD PTR [eax+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$75401[ebp], eax
	cmp	DWORD PTR ___result__$75401[ebp], 0
	je	SHORT $LN2@Open3
	mov	eax, DWORD PTR ___result__$75401[ebp]
	jmp	SHORT $LN3@Open3
$LN2@Open3:
; Line 3289
	mov	eax, DWORD PTR _res$[ebp]
$LN3@Open3:
; Line 3290
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Open3@CArchiveLink@@QAEJAAUCOpenOptions@@PAUIOpenCallbackUI@@@Z ENDP ; CArchiveLink::Open3
_TEXT	ENDS
PUBLIC	??1?$CObjectVector@UCOpenType@@@@QAE@XZ		; CObjectVector<COpenType>::~CObjectVector<COpenType>
PUBLIC	??0?$CObjectVector@UCOpenType@@@@QAE@XZ		; CObjectVector<COpenType>::CObjectVector<COpenType>
PUBLIC	?ReOpen@CArchiveLink@@QAEJAAUCOpenOptions@@@Z	; CArchiveLink::ReOpen
xdata$x	SEGMENT
__ehfuncinfo$?ReOpen@CArchiveLink@@QAEJAAUCOpenOptions@@@Z DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$?ReOpen@CArchiveLink@@QAEJAAUCOpenOptions@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?ReOpen@CArchiveLink@@QAEJAAUCOpenOptions@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ReOpen@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?ReOpen@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?ReOpen@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?ReOpen@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?ReOpen@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?ReOpen@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$5
	DD	03H
	DD	FLAT:__unwindfunclet$?ReOpen@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$6
	DD	03H
	DD	FLAT:__unwindfunclet$?ReOpen@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$7
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv158 = -172						; size = 4
tv91 = -168						; size = 4
$T78499 = -164						; size = 4
$T78498 = -160						; size = 4
$T78495 = -156						; size = 4
$T78494 = -152						; size = 4
$T78491 = -148						; size = 4
$T78490 = -144						; size = 4
$T78489 = -140						; size = 4
_res$ = -136						; size = 4
_arc$ = -132						; size = 4
_stream$ = -124						; size = 4
_fileStreamSpec$ = -116					; size = 4
_fileName$75422 = -108					; size = 12
_dirPrefix$75421 = -88					; size = 12
_openCallbackNew$ = -68					; size = 4
_openCallbackSpec$ = -60				; size = 4
_excl$ = -52						; size = 12
_inc$ = -32						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_op$ = 8						; size = 4
?ReOpen@CArchiveLink@@QAEJAAUCOpenOptions@@@Z PROC	; CArchiveLink::ReOpen
; _this$ = ecx
; Line 3293
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ReOpen@CArchiveLink@@QAEJAAUCOpenOptions@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 160				; 000000a0H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-172]
	mov	ecx, 40					; 00000028H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 3294
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CObjectVector@VCArc@@@@QBEIXZ	; CObjectVector<CArc>::Size
	cmp	eax, 1
	jbe	SHORT $LN3@ReOpen@2
; Line 3295
	mov	eax, -2147467263			; 80004001H
	jmp	$LN4@ReOpen@2
$LN3@ReOpen@2:
; Line 3297
	lea	ecx, DWORD PTR _inc$[ebp]
	call	??0?$CObjectVector@UCOpenType@@@@QAE@XZ	; CObjectVector<COpenType>::CObjectVector<COpenType>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 3298
	lea	ecx, DWORD PTR _excl$[ebp]
	call	??0?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
; Line 3300
	mov	eax, DWORD PTR _op$[ebp]
	lea	ecx, DWORD PTR _inc$[ebp]
	mov	DWORD PTR [eax+40], ecx
; Line 3301
	mov	edx, DWORD PTR _op$[ebp]
	lea	eax, DWORD PTR _excl$[ebp]
	mov	DWORD PTR [edx+44], eax
; Line 3302
	mov	ecx, DWORD PTR _op$[ebp]
	mov	BYTE PTR [ecx+68], 0
; Line 3303
	mov	edx, DWORD PTR _op$[ebp]
	mov	DWORD PTR [edx+48], 0
; Line 3304
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CObjectVector@VCArc@@@@QBEIXZ	; CObjectVector<CArc>::Size
	test	eax, eax
	jne	SHORT $LN2@ReOpen@2
; Line 3305
	push	0
	mov	eax, DWORD PTR _op$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Open2@CArchiveLink@@QAEJAAUCOpenOptions@@PAUIOpenCallbackUI@@@Z ; CArchiveLink::Open2
	mov	DWORD PTR $T78489[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _excl$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inc$[ebp]
	call	??1?$CObjectVector@UCOpenType@@@@QAE@XZ	; CObjectVector<COpenType>::~CObjectVector<COpenType>
	mov	eax, DWORD PTR $T78489[ebp]
	jmp	$LN4@ReOpen@2
$LN2@ReOpen@2:
; Line 3307
	push	152					; 00000098H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T78491[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T78491[ebp], 0
	je	SHORT $LN6@ReOpen@2
	mov	ecx, DWORD PTR $T78491[ebp]
	call	??0COpenCallbackImp@@QAE@XZ		; COpenCallbackImp::COpenCallbackImp
	mov	DWORD PTR tv91[ebp], eax
	jmp	SHORT $LN7@ReOpen@2
$LN6@ReOpen@2:
	mov	DWORD PTR tv91[ebp], 0
$LN7@ReOpen@2:
	mov	ecx, DWORD PTR tv91[ebp]
	mov	DWORD PTR $T78490[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR $T78490[ebp]
	mov	DWORD PTR _openCallbackSpec$[ebp], edx
; Line 3308
	mov	eax, DWORD PTR _openCallbackSpec$[ebp]
	push	eax
	lea	ecx, DWORD PTR _openCallbackNew$[ebp]
	call	??0?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@PAUIArchiveOpenCallback@@@Z ; CMyComPtr<IArchiveOpenCallback>::CMyComPtr<IArchiveOpenCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
; Line 3310
	mov	ecx, DWORD PTR _openCallbackSpec$[ebp]
	mov	DWORD PTR [ecx+144], 0
; Line 3311
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	mov	ecx, DWORD PTR _openCallbackSpec$[ebp]
	add	ecx, 148				; 00000094H
	call	??4?$CMyComPtr@UIArchiveOpenCallback@@@@QAEPAUIArchiveOpenCallback@@PAU1@@Z ; CMyComPtr<IArchiveOpenCallback>::operator=
; Line 3313
	lea	ecx, DWORD PTR _dirPrefix$75421[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _fileName$75422[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 5
; Line 3314
	lea	ecx, DWORD PTR _fileName$75422[ebp]
	push	ecx
	lea	edx, DWORD PTR _dirPrefix$75421[ebp]
	push	edx
	mov	ecx, DWORD PTR _op$[ebp]
	add	ecx, 72					; 00000048H
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	?GetFullPathAndSplit@NDir@NFile@NWindows@@YG_NPB_WAAVUString@@1@Z ; NWindows::NFile::NDir::GetFullPathAndSplit
; Line 3315
	lea	eax, DWORD PTR _fileName$75422[ebp]
	push	eax
	lea	ecx, DWORD PTR _dirPrefix$75421[ebp]
	push	ecx
	mov	ecx, DWORD PTR _openCallbackSpec$[ebp]
	call	?Init@COpenCallbackImp@@QAEXABVUString@@0@Z ; COpenCallbackImp::Init
; Line 3316
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _fileName$75422[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _dirPrefix$75421[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
; Line 3319
	push	88					; 00000058H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T78495[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	cmp	DWORD PTR $T78495[ebp], 0
	je	SHORT $LN8@ReOpen@2
	mov	ecx, DWORD PTR $T78495[ebp]
	call	??0CInFileStream@@QAE@XZ		; CInFileStream::CInFileStream
	mov	DWORD PTR tv158[ebp], eax
	jmp	SHORT $LN9@ReOpen@2
$LN8@ReOpen@2:
	mov	DWORD PTR tv158[ebp], 0
$LN9@ReOpen@2:
	mov	edx, DWORD PTR tv158[ebp]
	mov	DWORD PTR $T78494[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	eax, DWORD PTR $T78494[ebp]
	mov	DWORD PTR _fileStreamSpec$[ebp], eax
; Line 3320
	mov	ecx, DWORD PTR _fileStreamSpec$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _stream$[ebp]
	call	??0?$CMyComPtr@UIInStream@@@@QAE@PAUIInStream@@@Z ; CMyComPtr<IInStream>::CMyComPtr<IInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 7
; Line 3321
	mov	ecx, DWORD PTR _op$[ebp]
	add	ecx, 72					; 00000048H
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	mov	ecx, DWORD PTR _fileStreamSpec$[ebp]
	call	?Open@CInFileStream@@QAE_NPB_W@Z	; CInFileStream::Open
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN1@ReOpen@2
; Line 3322
	mov	esi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T78498[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _stream$[ebp]
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _openCallbackNew$[ebp]
	call	??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _excl$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inc$[ebp]
	call	??1?$CObjectVector@UCOpenType@@@@QAE@XZ	; CObjectVector<COpenType>::~CObjectVector<COpenType>
	mov	eax, DWORD PTR $T78498[ebp]
	jmp	$LN4@ReOpen@2
$LN1@ReOpen@2:
; Line 3323
	lea	ecx, DWORD PTR _stream$[ebp]
	call	??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *
	mov	ecx, DWORD PTR _op$[ebp]
	mov	DWORD PTR [ecx+48], eax
; Line 3325
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CObjectVector@VCArc@@@@QAEAAVCArc@@I@Z ; CObjectVector<CArc>::operator[]
	mov	DWORD PTR _arc$[ebp], eax
; Line 3326
	mov	edx, DWORD PTR _op$[ebp]
	push	edx
	mov	ecx, DWORD PTR _arc$[ebp]
	call	?ReOpen@CArc@@QAEJABUCOpenOptions@@@Z	; CArc::ReOpen
	mov	DWORD PTR _res$[ebp], eax
; Line 3328
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _openCallbackSpec$[ebp]
	mov	dl, BYTE PTR [ecx+140]
	mov	BYTE PTR [eax+33], dl
; Line 3331
	xor	eax, eax
	cmp	DWORD PTR _res$[ebp], 0
	sete	al
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+32], al
; Line 3332
	mov	edx, DWORD PTR _res$[ebp]
	mov	DWORD PTR $T78499[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _stream$[ebp]
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _openCallbackNew$[ebp]
	call	??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _excl$[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inc$[ebp]
	call	??1?$CObjectVector@UCOpenType@@@@QAE@XZ	; CObjectVector<COpenType>::~CObjectVector<COpenType>
	mov	eax, DWORD PTR $T78499[ebp]
$LN4@ReOpen@2:
; Line 3333
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN26@ReOpen@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 172				; 000000acH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN26@ReOpen@2:
	DD	6
	DD	$LN25@ReOpen@2
$LN25@ReOpen@2:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN18@ReOpen@2
	DD	-52					; ffffffccH
	DD	12					; 0000000cH
	DD	$LN19@ReOpen@2
	DD	-68					; ffffffbcH
	DD	4
	DD	$LN20@ReOpen@2
	DD	-88					; ffffffa8H
	DD	12					; 0000000cH
	DD	$LN21@ReOpen@2
	DD	-108					; ffffff94H
	DD	12					; 0000000cH
	DD	$LN22@ReOpen@2
	DD	-124					; ffffff84H
	DD	4
	DD	$LN23@ReOpen@2
$LN23@ReOpen@2:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN22@ReOpen@2:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	78					; 0000004eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN21@ReOpen@2:
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	120					; 00000078H
	DB	0
$LN20@ReOpen@2:
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	98					; 00000062H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	78					; 0000004eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	0
$LN19@ReOpen@2:
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	99					; 00000063H
	DB	108					; 0000006cH
	DB	0
$LN18@ReOpen@2:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ReOpen@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$0:
	lea	ecx, DWORD PTR _inc$[ebp]
	jmp	??1?$CObjectVector@UCOpenType@@@@QAE@XZ	; CObjectVector<COpenType>::~CObjectVector<COpenType>
__unwindfunclet$?ReOpen@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$1:
	lea	ecx, DWORD PTR _excl$[ebp]
	jmp	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
__unwindfunclet$?ReOpen@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$2:
	mov	eax, DWORD PTR $T78491[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?ReOpen@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$3:
	lea	ecx, DWORD PTR _openCallbackNew$[ebp]
	jmp	??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>
__unwindfunclet$?ReOpen@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$4:
	lea	ecx, DWORD PTR _dirPrefix$75421[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?ReOpen@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$5:
	lea	ecx, DWORD PTR _fileName$75422[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?ReOpen@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$6:
	mov	eax, DWORD PTR $T78495[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?ReOpen@CArchiveLink@@QAEJAAUCOpenOptions@@@Z$7:
	lea	ecx, DWORD PTR _stream$[ebp]
	jmp	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
__ehhandler$?ReOpen@CArchiveLink@@QAEJAAUCOpenOptions@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-172]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ReOpen@CArchiveLink@@QAEJAAUCOpenOptions@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ReOpen@CArchiveLink@@QAEJAAUCOpenOptions@@@Z ENDP	; CArchiveLink::ReOpen
PUBLIC	?MyCharLower_Ascii@@YG_W_W@Z			; MyCharLower_Ascii
PUBLIC	?ParseComplexSize@@YG_NPB_WAA_K@Z		; ParseComplexSize
EXTRN	?ConvertStringToUInt64@@YG_KPB_WPAPB_W@Z:PROC	; ConvertStringToUInt64
EXTRN	__allshl:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv157 = -36						; size = 8
tv76 = -28						; size = 4
_numBits$ = -24						; size = 4
_number$ = -20						; size = 8
_end$ = -8						; size = 4
_s$ = 8							; size = 4
_result$ = 12						; size = 4
?ParseComplexSize@@YG_NPB_WAA_K@Z PROC			; ParseComplexSize
; Line 3338
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 3339
	mov	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0
; Line 3341
	lea	ecx, DWORD PTR _end$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	?ConvertStringToUInt64@@YG_KPB_WPAPB_W@Z ; ConvertStringToUInt64
	mov	DWORD PTR _number$[ebp], eax
	mov	DWORD PTR _number$[ebp+4], edx
; Line 3342
	mov	eax, DWORD PTR _end$[ebp]
	cmp	eax, DWORD PTR _s$[ebp]
	jne	SHORT $LN12@ParseCompl
; Line 3343
	xor	al, al
	jmp	$LN13@ParseCompl
$LN12@ParseCompl:
; Line 3344
	mov	ecx, DWORD PTR _end$[ebp]
	movzx	edx, WORD PTR [ecx]
	test	edx, edx
	jne	SHORT $LN11@ParseCompl
; Line 3346
	mov	eax, DWORD PTR _result$[ebp]
	mov	ecx, DWORD PTR _number$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _number$[ebp+4]
	mov	DWORD PTR [eax+4], edx
; Line 3347
	mov	al, 1
	jmp	$LN13@ParseCompl
$LN11@ParseCompl:
; Line 3349
	mov	eax, DWORD PTR _end$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	test	ecx, ecx
	je	SHORT $LN10@ParseCompl
; Line 3350
	xor	al, al
	jmp	$LN13@ParseCompl
$LN10@ParseCompl:
; Line 3352
	mov	edx, DWORD PTR _end$[ebp]
	movzx	eax, WORD PTR [edx]
	push	eax
	call	?MyCharLower_Ascii@@YG_W_W@Z		; MyCharLower_Ascii
	movzx	ecx, ax
	mov	DWORD PTR tv76[ebp], ecx
	mov	edx, DWORD PTR tv76[ebp]
	sub	edx, 98					; 00000062H
	mov	DWORD PTR tv76[ebp], edx
	cmp	DWORD PTR tv76[ebp], 18			; 00000012H
	ja	SHORT $LN2@ParseCompl
	mov	eax, DWORD PTR tv76[ebp]
	movzx	ecx, BYTE PTR $LN15@ParseCompl[eax]
	jmp	DWORD PTR $LN20@ParseCompl[ecx*4]
$LN7@ParseCompl:
; Line 3354
	mov	edx, DWORD PTR _result$[ebp]
	mov	eax, DWORD PTR _number$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _number$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	al, 1
	jmp	SHORT $LN13@ParseCompl
$LN6@ParseCompl:
; Line 3355
	mov	DWORD PTR _numBits$[ebp], 10		; 0000000aH
	jmp	SHORT $LN8@ParseCompl
$LN5@ParseCompl:
; Line 3356
	mov	DWORD PTR _numBits$[ebp], 20		; 00000014H
	jmp	SHORT $LN8@ParseCompl
$LN4@ParseCompl:
; Line 3357
	mov	DWORD PTR _numBits$[ebp], 30		; 0000001eH
	jmp	SHORT $LN8@ParseCompl
$LN3@ParseCompl:
; Line 3358
	mov	DWORD PTR _numBits$[ebp], 40		; 00000028H
	jmp	SHORT $LN8@ParseCompl
$LN2@ParseCompl:
; Line 3359
	xor	al, al
	jmp	SHORT $LN13@ParseCompl
$LN8@ParseCompl:
; Line 3361
	mov	ecx, 64					; 00000040H
	sub	ecx, DWORD PTR _numBits$[ebp]
	mov	eax, 1
	xor	edx, edx
	call	__allshl
	mov	DWORD PTR tv157[ebp], eax
	mov	DWORD PTR tv157[ebp+4], edx
	mov	edx, DWORD PTR _number$[ebp+4]
	cmp	edx, DWORD PTR tv157[ebp+4]
	jb	SHORT $LN1@ParseCompl
	ja	SHORT $LN16@ParseCompl
	mov	eax, DWORD PTR _number$[ebp]
	cmp	eax, DWORD PTR tv157[ebp]
	jb	SHORT $LN1@ParseCompl
$LN16@ParseCompl:
; Line 3362
	xor	al, al
	jmp	SHORT $LN13@ParseCompl
$LN1@ParseCompl:
; Line 3363
	mov	eax, DWORD PTR _number$[ebp]
	mov	edx, DWORD PTR _number$[ebp+4]
	mov	ecx, DWORD PTR _numBits$[ebp]
	call	__allshl
	mov	ecx, DWORD PTR _result$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
; Line 3364
	mov	al, 1
$LN13@ParseCompl:
; Line 3365
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@ParseCompl
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN19@ParseCompl:
	DD	1
	DD	$LN18@ParseCompl
$LN18@ParseCompl:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN17@ParseCompl
$LN17@ParseCompl:
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
$LN20@ParseCompl:
	DD	$LN7@ParseCompl
	DD	$LN4@ParseCompl
	DD	$LN6@ParseCompl
	DD	$LN5@ParseCompl
	DD	$LN3@ParseCompl
	DD	$LN2@ParseCompl
$LN15@ParseCompl:
	DB	0
	DB	5
	DB	5
	DB	5
	DB	5
	DB	1
	DB	5
	DB	5
	DB	5
	DB	2
	DB	5
	DB	3
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	4
?ParseComplexSize@@YG_NPB_WAA_K@Z ENDP			; ParseComplexSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?MyCharLower_Ascii@@YG_W_W@Z
_TEXT	SEGMENT
_c$ = 8							; size = 2
?MyCharLower_Ascii@@YG_W_W@Z PROC			; MyCharLower_Ascii, COMDAT
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 113
	push	ebp
	mov	ebp, esp
; Line 114
	movzx	eax, WORD PTR _c$[ebp]
	cmp	eax, 65					; 00000041H
	jl	SHORT $LN1@MyCharLowe
	movzx	ecx, WORD PTR _c$[ebp]
	cmp	ecx, 90					; 0000005aH
	jg	SHORT $LN1@MyCharLowe
; Line 115
	movzx	eax, WORD PTR _c$[ebp]
	add	eax, 32					; 00000020H
	jmp	SHORT $LN2@MyCharLowe
$LN1@MyCharLowe:
; Line 116
	mov	ax, WORD PTR _c$[ebp]
$LN2@MyCharLowe:
; Line 117
	pop	ebp
	ret	4
?MyCharLower_Ascii@@YG_W_W@Z ENDP			; MyCharLower_Ascii
_TEXT	ENDS
PUBLIC	?Mid@UString@@QBE?AV1@II@Z			; UString::Mid
PUBLIC	?Find@UString@@QBEH_WI@Z			; UString::Find
PUBLIC	?Left@UString@@QBE?AV1@I@Z			; UString::Left
PUBLIC	?Len@UString@@QBEIXZ				; UString::Len
PUBLIC	?Find@UString@@QBEH_W@Z				; UString::Find
PUBLIC	?ParseType@@YG_NAAVCCodecs@@ABVUString@@AAUCOpenType@@@Z ; ParseType
EXTRN	?FindFormatForArchiveType@CCodecs@@QBEHABVUString@@@Z:PROC ; CCodecs::FindFormatForArchiveType
xdata$x	SEGMENT
__unwindtable$?ParseType@@YG_NAAVCCodecs@@ABVUString@@AAUCOpenType@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ParseType@@YG_NAAVCCodecs@@ABVUString@@AAUCOpenType@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?ParseType@@YG_NAAVCCodecs@@ABVUString@@AAUCOpenType@@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?ParseType@@YG_NAAVCCodecs@@ABVUString@@AAUCOpenType@@@Z$2
__ehfuncinfo$?ParseType@@YG_NAAVCCodecs@@ABVUString@@AAUCOpenType@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?ParseType@@YG_NAAVCCodecs@@ABVUString@@AAUCOpenType@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv170 = -96						; size = 4
tv68 = -92						; size = 4
$T78537 = -86						; size = 1
$T78536 = -85						; size = 1
$T78535 = -84						; size = 1
$T78534 = -83						; size = 1
$T78533 = -82						; size = 1
$T78532 = -81						; size = 1
$T78531 = -80						; size = 12
_name$75503 = -64					; size = 12
_next$75501 = -48					; size = 4
_i$75497 = -44						; size = 4
_index$ = -40						; size = 4
_name$ = -32						; size = 12
_pos2$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_codecs$ = 8						; size = 4
_s$ = 12						; size = 4
_type$ = 16						; size = 4
?ParseType@@YG_NAAVCCodecs@@ABVUString@@AAUCOpenType@@@Z PROC ; ParseType
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\openarchive.cpp
; Line 3395
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ParseType@@YG_NAAVCCodecs@@ABVUString@@AAUCOpenType@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	edi
	lea	edi, DWORD PTR [ebp-96]
	mov	ecx, 21					; 00000015H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 3396
	push	58					; 0000003aH
	mov	ecx, DWORD PTR _s$[ebp]
	call	?Find@UString@@QBEH_W@Z			; UString::Find
	mov	DWORD PTR _pos2$[ebp], eax
; Line 3397
	lea	ecx, DWORD PTR _name$[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 3398
	cmp	DWORD PTR _pos2$[ebp], 0
	jge	SHORT $LN14@ParseType
; Line 3400
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	lea	ecx, DWORD PTR _name$[ebp]
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
; Line 3401
	mov	ecx, DWORD PTR _s$[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	mov	DWORD PTR _pos2$[ebp], eax
; Line 3403
	jmp	SHORT $LN13@ParseType
$LN14@ParseType:
; Line 3405
	mov	ecx, DWORD PTR _pos2$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T78531[ebp]
	push	edx
	mov	ecx, DWORD PTR _s$[ebp]
	call	?Left@UString@@QBE?AV1@I@Z		; UString::Left
	mov	DWORD PTR tv68[ebp], eax
	mov	eax, DWORD PTR tv68[ebp]
	mov	DWORD PTR tv170[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR tv170[ebp]
	push	ecx
	lea	ecx, DWORD PTR _name$[ebp]
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T78531[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
; Line 3406
	mov	edx, DWORD PTR _pos2$[ebp]
	add	edx, 1
	mov	DWORD PTR _pos2$[ebp], edx
$LN13@ParseType:
; Line 3409
	lea	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _codecs$[ebp]
	call	?FindFormatForArchiveType@CCodecs@@QBEHABVUString@@@Z ; CCodecs::FindFormatForArchiveType
	mov	DWORD PTR _index$[ebp], eax
; Line 3410
	mov	ecx, DWORD PTR _type$[ebp]
	mov	BYTE PTR [ecx+16], 0
; Line 3412
	cmp	DWORD PTR _index$[ebp], 0
	jge	$LN12@ParseType
; Line 3414
	lea	ecx, DWORD PTR _name$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	movzx	edx, WORD PTR [eax]
	cmp	edx, 42					; 0000002aH
	jne	SHORT $LN11@ParseType
; Line 3416
	lea	ecx, DWORD PTR _name$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	movzx	eax, WORD PTR [eax+2]
	test	eax, eax
	je	SHORT $LN10@ParseType
; Line 3417
	mov	BYTE PTR $T78532[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _name$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	al, BYTE PTR $T78532[ebp]
	jmp	$LN15@ParseType
$LN10@ParseType:
; Line 3418
	jmp	SHORT $LN12@ParseType
$LN11@ParseType:
; Line 3419
	lea	ecx, DWORD PTR _name$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 35					; 00000023H
	jne	SHORT $LN8@ParseType
; Line 3421
	lea	ecx, DWORD PTR _name$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	movzx	edx, WORD PTR [eax+2]
	test	edx, edx
	je	SHORT $LN7@ParseType
; Line 3422
	mov	BYTE PTR $T78533[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _name$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	al, BYTE PTR $T78533[ebp]
	jmp	$LN15@ParseType
$LN7@ParseType:
; Line 3423
	mov	eax, DWORD PTR _type$[ebp]
	mov	BYTE PTR [eax+17], 0
; Line 3424
	mov	ecx, DWORD PTR _type$[ebp]
	mov	BYTE PTR [ecx+18], 1
; Line 3426
	jmp	SHORT $LN12@ParseType
$LN8@ParseType:
; Line 3427
	mov	BYTE PTR $T78534[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _name$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	al, BYTE PTR $T78534[ebp]
	jmp	$LN15@ParseType
$LN12@ParseType:
; Line 3430
	mov	edx, DWORD PTR _type$[ebp]
	mov	eax, DWORD PTR _index$[ebp]
	mov	DWORD PTR [edx], eax
; Line 3432
	mov	ecx, DWORD PTR _pos2$[ebp]
	mov	DWORD PTR _i$75497[ebp], ecx
$LN5@ParseType:
	mov	ecx, DWORD PTR _s$[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	cmp	DWORD PTR _i$75497[ebp], eax
	jae	$LN4@ParseType
; Line 3434
	mov	edx, DWORD PTR _i$75497[ebp]
	push	edx
	push	58					; 0000003aH
	mov	ecx, DWORD PTR _s$[ebp]
	call	?Find@UString@@QBEH_WI@Z		; UString::Find
	mov	DWORD PTR _next$75501[ebp], eax
; Line 3435
	cmp	DWORD PTR _next$75501[ebp], 0
	jge	SHORT $LN3@ParseType
; Line 3436
	mov	ecx, DWORD PTR _s$[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	mov	DWORD PTR _next$75501[ebp], eax
$LN3@ParseType:
; Line 3437
	mov	eax, DWORD PTR _next$75501[ebp]
	sub	eax, DWORD PTR _i$75497[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$75497[ebp]
	push	ecx
	lea	edx, DWORD PTR _name$75503[ebp]
	push	edx
	mov	ecx, DWORD PTR _s$[ebp]
	call	?Mid@UString@@QBE?AV1@II@Z		; UString::Mid
	mov	BYTE PTR __$EHRec$[ebp+8], 2
; Line 3438
	lea	ecx, DWORD PTR _name$75503[ebp]
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@ParseType
; Line 3439
	mov	BYTE PTR $T78535[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _name$75503[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _name$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	al, BYTE PTR $T78535[ebp]
	jmp	SHORT $LN15@ParseType
$LN2@ParseType:
; Line 3440
	mov	ecx, DWORD PTR _type$[ebp]
	push	ecx
	lea	edx, DWORD PTR _name$75503[ebp]
	push	edx
	call	?ParseTypeParams@@YG_NABVUString@@AAUCOpenType@@@Z ; ParseTypeParams
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@ParseType
; Line 3441
	mov	BYTE PTR $T78536[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _name$75503[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _name$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	al, BYTE PTR $T78536[ebp]
	jmp	SHORT $LN15@ParseType
$LN1@ParseType:
; Line 3442
	mov	ecx, DWORD PTR _next$75501[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$75497[ebp], ecx
; Line 3443
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _name$75503[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	jmp	$LN5@ParseType
$LN4@ParseType:
; Line 3445
	mov	BYTE PTR $T78537[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _name$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	al, BYTE PTR $T78537[ebp]
$LN15@ParseType:
; Line 3446
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN24@ParseType
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 96					; 00000060H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	3
$LN24@ParseType:
	DD	2
	DD	$LN23@ParseType
$LN23@ParseType:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN20@ParseType
	DD	-64					; ffffffc0H
	DD	12					; 0000000cH
	DD	$LN21@ParseType
$LN21@ParseType:
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN20@ParseType:
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ParseType@@YG_NAAVCCodecs@@ABVUString@@AAUCOpenType@@@Z$0:
	lea	ecx, DWORD PTR _name$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?ParseType@@YG_NAAVCCodecs@@ABVUString@@AAUCOpenType@@@Z$1:
	lea	ecx, DWORD PTR $T78531[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?ParseType@@YG_NAAVCCodecs@@ABVUString@@AAUCOpenType@@@Z$2:
	lea	ecx, DWORD PTR _name$75503[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$?ParseType@@YG_NAAVCCodecs@@ABVUString@@AAUCOpenType@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-92]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ParseType@@YG_NAAVCCodecs@@ABVUString@@AAUCOpenType@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ParseType@@YG_NAAVCCodecs@@ABVUString@@AAUCOpenType@@@Z ENDP ; ParseType
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Len@UString@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Len@UString@@QBEIXZ PROC				; UString::Len, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 472
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Len@UString@@QBEIXZ ENDP				; UString::Len
_TEXT	ENDS
EXTRN	??0UString@@AAE@IPB_W@Z:PROC			; UString::UString
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Mid@UString@@QBE?AV1@II@Z
_TEXT	SEGMENT
$T78553 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_startIndex$ = 12					; size = 4
_count$ = 16						; size = 4
?Mid@UString@@QBE?AV1@II@Z PROC				; UString::Mid, COMDAT
; _this$ = ecx
; Line 539
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T78553[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _startIndex$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	push	eax
	mov	ecx, DWORD PTR _count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0UString@@AAE@IPB_W@Z			; UString::UString
	mov	edx, DWORD PTR $T78553[ebp]
	or	edx, 1
	mov	DWORD PTR $T78553[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Mid@UString@@QBE?AV1@II@Z ENDP				; UString::Mid
_TEXT	ENDS
EXTRN	??0UString@@AAE@IABV0@@Z:PROC			; UString::UString
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Left@UString@@QBE?AV1@I@Z
_TEXT	SEGMENT
$T78558 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_count$ = 12						; size = 4
?Left@UString@@QBE?AV1@I@Z PROC				; UString::Left, COMDAT
; _this$ = ecx
; Line 540
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T78558[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0UString@@AAE@IABV0@@Z		; UString::UString
	mov	edx, DWORD PTR $T78558[ebp]
	or	edx, 1
	mov	DWORD PTR $T78558[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Left@UString@@QBE?AV1@I@Z ENDP				; UString::Left
_TEXT	ENDS
EXTRN	?FindCharPosInString@@YGHPB_W_W@Z:PROC		; FindCharPosInString
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Find@UString@@QBEH_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_c$ = 8							; size = 2
?Find@UString@@QBEH_W@Z PROC				; UString::Find, COMDAT
; _this$ = ecx
; Line 567
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	movzx	eax, WORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	?FindCharPosInString@@YGHPB_W_W@Z	; FindCharPosInString
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Find@UString@@QBEH_W@Z ENDP				; UString::Find
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Find@UString@@QBEH_WI@Z
_TEXT	SEGMENT
tv71 = -12						; size = 4
_pos$ = -8						; size = 4
_this$ = -4						; size = 4
_c$ = 8							; size = 2
_startIndex$ = 12					; size = 4
?Find@UString@@QBEH_WI@Z PROC				; UString::Find, COMDAT
; _this$ = ecx
; Line 569
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 570
	movzx	eax, WORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _startIndex$[ebp]
	lea	ecx, DWORD PTR [edx+eax*2]
	push	ecx
	call	?FindCharPosInString@@YGHPB_W_W@Z	; FindCharPosInString
	mov	DWORD PTR _pos$[ebp], eax
; Line 571
	cmp	DWORD PTR _pos$[ebp], 0
	jge	SHORT $LN3@Find
	mov	DWORD PTR tv71[ebp], -1
	jmp	SHORT $LN4@Find
$LN3@Find:
	mov	edx, DWORD PTR _startIndex$[ebp]
	add	edx, DWORD PTR _pos$[ebp]
	mov	DWORD PTR tv71[ebp], edx
$LN4@Find:
	mov	eax, DWORD PTR tv71[ebp]
; Line 572
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Find@UString@@QBEH_WI@Z ENDP				; UString::Find
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
_TEXT	SEGMENT
tv76 = -20						; size = 4
_result$75474 = -12					; size = 8
_s$ = 8							; size = 4
_type$ = 12						; size = 4
?ParseTypeParams@@YG_NABVUString@@AAUCOpenType@@@Z PROC	; ParseTypeParams
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\openarchive.cpp
; Line 3368
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 3369
	mov	ecx, DWORD PTR _s$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	movzx	eax, WORD PTR [eax]
	test	eax, eax
	jne	SHORT $LN9@ParseTypeP
; Line 3370
	mov	al, 1
	jmp	$LN10@ParseTypeP
$LN9@ParseTypeP:
; Line 3371
	mov	ecx, DWORD PTR _s$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	movzx	ecx, WORD PTR [eax+2]
	test	ecx, ecx
	jne	SHORT $LN8@ParseTypeP
; Line 3373
	mov	ecx, DWORD PTR _s$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	dl, BYTE PTR [eax]
	mov	BYTE PTR tv76[ebp], dl
	cmp	BYTE PTR tv76[ebp], 97			; 00000061H
	je	SHORT $LN4@ParseTypeP
	cmp	BYTE PTR tv76[ebp], 101			; 00000065H
	je	SHORT $LN5@ParseTypeP
	cmp	BYTE PTR tv76[ebp], 114			; 00000072H
	je	SHORT $LN3@ParseTypeP
	jmp	SHORT $LN6@ParseTypeP
$LN5@ParseTypeP:
; Line 3375
	mov	eax, DWORD PTR _type$[ebp]
	mov	BYTE PTR [eax+19], 1
	mov	al, 1
	jmp	SHORT $LN10@ParseTypeP
$LN4@ParseTypeP:
; Line 3376
	mov	ecx, DWORD PTR _type$[ebp]
	mov	BYTE PTR [ecx+17], 1
	mov	al, 1
	jmp	SHORT $LN10@ParseTypeP
$LN3@ParseTypeP:
; Line 3377
	mov	edx, DWORD PTR _type$[ebp]
	mov	BYTE PTR [edx+16], 1
	mov	al, 1
	jmp	SHORT $LN10@ParseTypeP
$LN6@ParseTypeP:
; Line 3379
	xor	al, al
	jmp	SHORT $LN10@ParseTypeP
$LN8@ParseTypeP:
; Line 3381
	mov	ecx, DWORD PTR _s$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	movzx	eax, WORD PTR [eax]
	cmp	eax, 115				; 00000073H
	jne	SHORT $LN2@ParseTypeP
; Line 3384
	lea	ecx, DWORD PTR _result$75474[ebp]
	push	ecx
	push	1
	mov	ecx, DWORD PTR _s$[ebp]
	call	?Ptr@UString@@QBEPB_WI@Z		; UString::Ptr
	push	eax
	call	?ParseComplexSize@@YG_NPB_WAA_K@Z	; ParseComplexSize
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN1@ParseTypeP
; Line 3385
	xor	al, al
	jmp	SHORT $LN10@ParseTypeP
$LN1@ParseTypeP:
; Line 3386
	mov	eax, DWORD PTR _type$[ebp]
	mov	ecx, DWORD PTR _result$75474[ebp]
	mov	DWORD PTR [eax+24], ecx
	mov	edx, DWORD PTR _result$75474[ebp+4]
	mov	DWORD PTR [eax+28], edx
; Line 3387
	mov	eax, DWORD PTR _type$[ebp]
	mov	BYTE PTR [eax+21], 1
; Line 3388
	mov	al, 1
	jmp	SHORT $LN10@ParseTypeP
$LN2@ParseTypeP:
; Line 3391
	xor	al, al
$LN10@ParseTypeP:
; Line 3392
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@ParseTypeP
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN14@ParseTypeP:
	DD	1
	DD	$LN13@ParseTypeP
$LN13@ParseTypeP:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN12@ParseTypeP
$LN12@ParseTypeP:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	0
?ParseTypeParams@@YG_NABVUString@@AAUCOpenType@@@Z ENDP	; ParseTypeParams
_TEXT	ENDS
PUBLIC	?Add@?$CObjectVector@UCOpenType@@@@QAEIABUCOpenType@@@Z ; CObjectVector<COpenType>::Add
PUBLIC	?Clear@?$CObjectVector@UCOpenType@@@@QAEXXZ	; CObjectVector<COpenType>::Clear
PUBLIC	?ParseOpenTypes@@YG_NAAVCCodecs@@ABVUString@@AAV?$CObjectVector@UCOpenType@@@@@Z ; ParseOpenTypes
xdata$x	SEGMENT
__unwindtable$?ParseOpenTypes@@YG_NAAVCCodecs@@ABVUString@@AAV?$CObjectVector@UCOpenType@@@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ParseOpenTypes@@YG_NAAVCCodecs@@ABVUString@@AAV?$CObjectVector@UCOpenType@@@@@Z$0
__ehfuncinfo$?ParseOpenTypes@@YG_NAAVCCodecs@@ABVUString@@AAV?$CObjectVector@UCOpenType@@@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ParseOpenTypes@@YG_NAAVCCodecs@@ABVUString@@AAV?$CObjectVector@UCOpenType@@@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T78573 = -82						; size = 1
$T78572 = -81						; size = 1
_type$75526 = -76					; size = 32
_name$75522 = -36					; size = 12
_pos2$75520 = -20					; size = 4
_pos$75516 = -16					; size = 4
__$EHRec$ = -12						; size = 12
_codecs$ = 8						; size = 4
_s$ = 12						; size = 4
_types$ = 16						; size = 4
?ParseOpenTypes@@YG_NAAVCCodecs@@ABVUString@@AAV?$CObjectVector@UCOpenType@@@@@Z PROC ; ParseOpenTypes
; Line 3449
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ParseOpenTypes@@YG_NAAVCCodecs@@ABVUString@@AAV?$CObjectVector@UCOpenType@@@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 72					; 00000048H
	push	edi
	lea	edi, DWORD PTR [ebp-84]
	mov	ecx, 18					; 00000012H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 3450
	mov	ecx, DWORD PTR _types$[ebp]
	call	?Clear@?$CObjectVector@UCOpenType@@@@QAEXXZ ; CObjectVector<COpenType>::Clear
; Line 3451
	mov	DWORD PTR _pos$75516[ebp], 0
$LN5@ParseOpenT:
	mov	ecx, DWORD PTR _s$[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	cmp	DWORD PTR _pos$75516[ebp], eax
	jae	$LN4@ParseOpenT
; Line 3453
	mov	eax, DWORD PTR _pos$75516[ebp]
	push	eax
	push	46					; 0000002eH
	mov	ecx, DWORD PTR _s$[ebp]
	call	?Find@UString@@QBEH_WI@Z		; UString::Find
	mov	DWORD PTR _pos2$75520[ebp], eax
; Line 3454
	cmp	DWORD PTR _pos2$75520[ebp], 0
	jge	SHORT $LN3@ParseOpenT
; Line 3455
	mov	ecx, DWORD PTR _s$[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	mov	DWORD PTR _pos2$75520[ebp], eax
$LN3@ParseOpenT:
; Line 3456
	mov	ecx, DWORD PTR _pos2$75520[ebp]
	sub	ecx, DWORD PTR _pos$75516[ebp]
	push	ecx
	mov	edx, DWORD PTR _pos$75516[ebp]
	push	edx
	lea	eax, DWORD PTR _name$75522[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	call	?Mid@UString@@QBE?AV1@II@Z		; UString::Mid
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 3457
	lea	ecx, DWORD PTR _name$75522[ebp]
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@ParseOpenT
; Line 3458
	mov	BYTE PTR $T78572[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _name$75522[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	al, BYTE PTR $T78572[ebp]
	jmp	SHORT $LN6@ParseOpenT
$LN2@ParseOpenT:
; Line 3459
	lea	ecx, DWORD PTR _type$75526[ebp]
	call	??0COpenType@@QAE@XZ			; COpenType::COpenType
; Line 3460
	lea	edx, DWORD PTR _type$75526[ebp]
	push	edx
	lea	eax, DWORD PTR _name$75522[ebp]
	push	eax
	mov	ecx, DWORD PTR _codecs$[ebp]
	push	ecx
	call	?ParseType@@YG_NAAVCCodecs@@ABVUString@@AAUCOpenType@@@Z ; ParseType
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN1@ParseOpenT
; Line 3461
	mov	BYTE PTR $T78573[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _name$75522[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	al, BYTE PTR $T78573[ebp]
	jmp	SHORT $LN6@ParseOpenT
$LN1@ParseOpenT:
; Line 3462
	lea	eax, DWORD PTR _type$75526[ebp]
	push	eax
	mov	ecx, DWORD PTR _types$[ebp]
	call	?Add@?$CObjectVector@UCOpenType@@@@QAEIABUCOpenType@@@Z ; CObjectVector<COpenType>::Add
; Line 3463
	mov	ecx, DWORD PTR _pos2$75520[ebp]
	add	ecx, 1
	mov	DWORD PTR _pos$75516[ebp], ecx
; Line 3464
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _name$75522[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	jmp	$LN5@ParseOpenT
$LN4@ParseOpenT:
; Line 3465
	mov	al, 1
$LN6@ParseOpenT:
; Line 3466
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@ParseOpenT
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 84					; 00000054H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN13@ParseOpenT:
	DD	2
	DD	$LN12@ParseOpenT
$LN12@ParseOpenT:
	DD	-36					; ffffffdcH
	DD	12					; 0000000cH
	DD	$LN9@ParseOpenT
	DD	-76					; ffffffb4H
	DD	32					; 00000020H
	DD	$LN10@ParseOpenT
$LN10@ParseOpenT:
	DB	116					; 00000074H
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	0
$LN9@ParseOpenT:
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ParseOpenTypes@@YG_NAAVCCodecs@@ABVUString@@AAV?$CObjectVector@UCOpenType@@@@@Z$0:
	lea	ecx, DWORD PTR _name$75522[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$?ParseOpenTypes@@YG_NAAVCCodecs@@ABVUString@@AAV?$CObjectVector@UCOpenType@@@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-80]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ParseOpenTypes@@YG_NAAVCCodecs@@ABVUString@@AAV?$CObjectVector@UCOpenType@@@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ParseOpenTypes@@YG_NAAVCCodecs@@ABVUString@@AAV?$CObjectVector@UCOpenType@@@@@Z ENDP ; ParseOpenTypes
PUBLIC	?Size@?$CRecordVector@PAX@@QBEIXZ		; CRecordVector<void *>::Size
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Size@?$CObjectVector@VUString@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@VUString@@@@QBEIXZ PROC		; CObjectVector<UString>::Size, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@VUString@@@@QBEIXZ ENDP		; CObjectVector<UString>::Size
_TEXT	ENDS
PUBLIC	?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ		; CRecordVector<void *>::IsEmpty
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsEmpty@?$CObjectVector@VUString@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@?$CObjectVector@VUString@@@@QBE_NXZ PROC	; CObjectVector<UString>::IsEmpty, COMDAT
; _this$ = ecx
; Line 416
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ	; CRecordVector<void *>::IsEmpty
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@?$CObjectVector@VUString@@@@QBE_NXZ ENDP	; CObjectVector<UString>::IsEmpty
_TEXT	ENDS
PUBLIC	??0?$CRecordVector@PAX@@QAE@XZ			; CRecordVector<void *>::CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CObjectVector@VUString@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@VUString@@@@QAE@XZ PROC		; CObjectVector<UString>::CObjectVector<UString>, COMDAT
; _this$ = ecx
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@VUString@@@@QAE@XZ ENDP		; CObjectVector<UString>::CObjectVector<UString>
_TEXT	ENDS
PUBLIC	??A?$CRecordVector@PAX@@QAEAAPAXI@Z		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z PROC	; CObjectVector<UString>::operator[], COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ENDP	; CObjectVector<UString>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Back@?$CObjectVector@VUString@@@@QAEAAVUString@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Back@?$CObjectVector@VUString@@@@QAEAAVUString@@XZ PROC ; CObjectVector<UString>::Back, COMDAT
; _this$ = ecx
; Line 455
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Back@?$CObjectVector@VUString@@@@QAEAAVUString@@XZ ENDP ; CObjectVector<UString>::Back
_TEXT	ENDS
PUBLIC	?Add@?$CRecordVector@PAX@@QAEIQAX@Z		; CRecordVector<void *>::Add
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z$0
__ehfuncinfo$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
_TEXT	SEGMENT
tv74 = -28						; size = 4
$T78596 = -24						; size = 4
$T78595 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_item$ = 8						; size = 4
?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z PROC ; CObjectVector<UString>::Add, COMDAT
; _this$ = ecx
; Line 459
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T78596[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T78596[ebp], 0
	je	SHORT $LN3@Add
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T78596[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@Add
$LN3@Add:
	mov	DWORD PTR tv74[ebp], 0
$LN4@Add:
	mov	ecx, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T78595[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T78595[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z$0:
	mov	eax, DWORD PTR $T78596[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z ENDP ; CObjectVector<UString>::Add
PUBLIC	?Insert@?$CRecordVector@PAX@@QAEXIQAX@Z		; CRecordVector<void *>::Insert
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Insert@?$CObjectVector@VUString@@@@QAEXIABVUString@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Insert@?$CObjectVector@VUString@@@@QAEXIABVUString@@@Z$0
__ehfuncinfo$?Insert@?$CObjectVector@VUString@@@@QAEXIABVUString@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Insert@?$CObjectVector@VUString@@@@QAEXIABVUString@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?Insert@?$CObjectVector@VUString@@@@QAEXIABVUString@@@Z
_TEXT	SEGMENT
tv73 = -28						; size = 4
$T78609 = -24						; size = 4
$T78608 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_index$ = 8						; size = 4
_item$ = 12						; size = 4
?Insert@?$CObjectVector@VUString@@@@QAEXIABVUString@@@Z PROC ; CObjectVector<UString>::Insert, COMDAT
; _this$ = ecx
; Line 477
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Insert@?$CObjectVector@VUString@@@@QAEXIABVUString@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T78609[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T78609[ebp], 0
	je	SHORT $LN3@Insert
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T78609[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	DWORD PTR tv73[ebp], eax
	jmp	SHORT $LN4@Insert
$LN3@Insert:
	mov	DWORD PTR tv73[ebp], 0
$LN4@Insert:
	mov	ecx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T78608[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T78608[ebp]
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Insert@?$CRecordVector@PAX@@QAEXIQAX@Z	; CRecordVector<void *>::Insert
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Insert@?$CObjectVector@VUString@@@@QAEXIABVUString@@@Z$0:
	mov	eax, DWORD PTR $T78609[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Insert@?$CObjectVector@VUString@@@@QAEXIABVUString@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Insert@?$CObjectVector@VUString@@@@QAEXIABVUString@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Insert@?$CObjectVector@VUString@@@@QAEXIABVUString@@@Z ENDP ; CObjectVector<UString>::Insert
PUBLIC	??1?$CRecordVector@PAX@@QAE@XZ			; CRecordVector<void *>::~CRecordVector<void *>
PUBLIC	??_GUString@@QAEPAXI@Z				; UString::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@VUString@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@VUString@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@VUString@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@VUString@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@VUString@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T78622 = -28						; size = 4
$T78621 = -24						; size = 4
_i$75557 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@VUString@@@@QAE@XZ PROC		; CObjectVector<UString>::~CObjectVector<UString>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@VUString@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$75557[ebp], eax
$LN2@CObjectVec:
	cmp	DWORD PTR _i$75557[ebp], 0
	je	SHORT $LN3@CObjectVec
; Line 489
	mov	eax, DWORD PTR _i$75557[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$75557[ebp], eax
	mov	ecx, DWORD PTR _i$75557[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T78622[ebp], edx
	mov	eax, DWORD PTR $T78622[ebp]
	mov	DWORD PTR $T78621[ebp], eax
	cmp	DWORD PTR $T78621[ebp], 0
	je	SHORT $LN5@CObjectVec
	push	1
	mov	ecx, DWORD PTR $T78621[ebp]
	call	??_GUString@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec
$LN5@CObjectVec:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec:
	jmp	SHORT $LN2@CObjectVec
$LN3@CObjectVec:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@VUString@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@VUString@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@VUString@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@VUString@@@@QAE@XZ ENDP		; CObjectVector<UString>::~CObjectVector<UString>
PUBLIC	?Clear@?$CRecordVector@PAX@@QAEXXZ		; CRecordVector<void *>::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Clear@?$CObjectVector@VUString@@@@QAEXXZ
_TEXT	SEGMENT
tv75 = -20						; size = 4
$T78635 = -16						; size = 4
$T78634 = -12						; size = 4
_i$75566 = -8						; size = 4
_this$ = -4						; size = 4
?Clear@?$CObjectVector@VUString@@@@QAEXXZ PROC		; CObjectVector<UString>::Clear, COMDAT
; _this$ = ecx
; Line 499
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 500
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$75566[ebp], eax
$LN2@Clear:
	cmp	DWORD PTR _i$75566[ebp], 0
	je	SHORT $LN1@Clear
; Line 501
	mov	eax, DWORD PTR _i$75566[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$75566[ebp], eax
	mov	ecx, DWORD PTR _i$75566[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T78635[ebp], edx
	mov	eax, DWORD PTR $T78635[ebp]
	mov	DWORD PTR $T78634[ebp], eax
	cmp	DWORD PTR $T78634[ebp], 0
	je	SHORT $LN5@Clear
	push	1
	mov	ecx, DWORD PTR $T78634[ebp]
	call	??_GUString@@QAEPAXI@Z
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN6@Clear
$LN5@Clear:
	mov	DWORD PTR tv75[ebp], 0
$LN6@Clear:
	jmp	SHORT $LN2@Clear
$LN1@Clear:
; Line 502
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CRecordVector@PAX@@QAEXXZ	; CRecordVector<void *>::Clear
; Line 503
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CObjectVector@VUString@@@@QAEXXZ ENDP		; CObjectVector<UString>::Clear
_TEXT	ENDS
PUBLIC	?DeleteBack@?$CRecordVector@PAX@@QAEXXZ		; CRecordVector<void *>::DeleteBack
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?DeleteBack@?$CObjectVector@VUString@@@@QAEXXZ
_TEXT	SEGMENT
tv74 = -16						; size = 4
$T78641 = -12						; size = 4
$T78640 = -8						; size = 4
_this$ = -4						; size = 4
?DeleteBack@?$CObjectVector@VUString@@@@QAEXXZ PROC	; CObjectVector<UString>::DeleteBack, COMDAT
; _this$ = ecx
; Line 521
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 522
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR $T78641[ebp], eax
	mov	ecx, DWORD PTR $T78641[ebp]
	mov	DWORD PTR $T78640[ebp], ecx
	cmp	DWORD PTR $T78640[ebp], 0
	je	SHORT $LN3@DeleteBack
	push	1
	mov	ecx, DWORD PTR $T78640[ebp]
	call	??_GUString@@QAEPAXI@Z
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@DeleteBack
$LN3@DeleteBack:
	mov	DWORD PTR tv74[ebp], 0
$LN4@DeleteBack:
; Line 523
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DeleteBack@?$CRecordVector@PAX@@QAEXXZ	; CRecordVector<void *>::DeleteBack
; Line 524
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?DeleteBack@?$CObjectVector@VUString@@@@QAEXXZ ENDP	; CObjectVector<UString>::DeleteBack
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z PROC ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@CMyComPtr
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z ENDP ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@2:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ PROC ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ENDP ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ PROC ; CMyComPtr<ISequentialInStream>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ ENDP ; CMyComPtr<ISequentialInStream>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z PROC ; CMyComPtr<ISequentialInStream>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@2
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@2:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@2
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@2:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ENDP ; CMyComPtr<ISequentialInStream>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??7?$CMyComPtr@UISequentialInStream@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??7?$CMyComPtr@UISequentialInStream@@@@QBE_NXZ PROC	; CMyComPtr<ISequentialInStream>::operator!, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
??7?$CMyComPtr@UISequentialInStream@@@@QBE_NXZ ENDP	; CMyComPtr<ISequentialInStream>::operator!
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIInStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UIInStream@@@@QAE@XZ PROC		; CMyComPtr<IInStream>::CMyComPtr<IInStream>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UIInStream@@@@QAE@XZ ENDP		; CMyComPtr<IInStream>::CMyComPtr<IInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIInStream@@@@QAE@PAUIInStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??0?$CMyComPtr@UIInStream@@@@QAE@PAUIInStream@@@Z PROC	; CMyComPtr<IInStream>::CMyComPtr<IInStream>, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@CMyComPtr@3
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@3:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UIInStream@@@@QAE@PAUIInStream@@@Z ENDP	; CMyComPtr<IInStream>::CMyComPtr<IInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIInStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIInStream@@@@QAE@XZ PROC		; CMyComPtr<IInStream>::~CMyComPtr<IInStream>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@4:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIInStream@@@@QAE@XZ ENDP		; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ PROC		; CMyComPtr<IInStream>::Release, COMDAT
; _this$ = ecx
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Release@12
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
$LN2@Release@12:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ ENDP		; CMyComPtr<IInStream>::Release
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ PROC	; CMyComPtr<IInStream>::operator IInStream *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ENDP	; CMyComPtr<IInStream>::operator IInStream *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UIInStream@@@@QAEPAPAUIInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UIInStream@@@@QAEPAPAUIInStream@@XZ PROC	; CMyComPtr<IInStream>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UIInStream@@@@QAEPAPAUIInStream@@XZ ENDP	; CMyComPtr<IInStream>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ PROC	; CMyComPtr<IInStream>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ENDP	; CMyComPtr<IInStream>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z PROC ; CMyComPtr<IInStream>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@3
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@3:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@3
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@3:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ENDP ; CMyComPtr<IInStream>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??7?$CMyComPtr@UIInStream@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??7?$CMyComPtr@UIInStream@@@@QBE_NXZ PROC		; CMyComPtr<IInStream>::operator!, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
??7?$CMyComPtr@UIInStream@@@@QBE_NXZ ENDP		; CMyComPtr<IInStream>::operator!
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@I@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@I@@QAE@XZ PROC			; CRecordVector<unsigned int>::CRecordVector<unsigned int>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@I@@QAE@XZ ENDP			; CRecordVector<unsigned int>::CRecordVector<unsigned int>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@I@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@I@@QBEIXZ PROC			; CRecordVector<unsigned int>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@I@@QBEIXZ ENDP			; CRecordVector<unsigned int>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@I@@QAE@XZ
_TEXT	SEGMENT
$T78682 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@I@@QAE@XZ PROC			; CRecordVector<unsigned int>::~CRecordVector<unsigned int>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T78682[ebp], ecx
	mov	edx, DWORD PTR $T78682[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@I@@QAE@XZ ENDP			; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
_TEXT	ENDS
PUBLIC	?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ	; CRecordVector<unsigned int>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@I@@QAEII@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?Add@?$CRecordVector@I@@QAEII@Z PROC			; CRecordVector<unsigned int>::Add, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ ; CRecordVector<unsigned int>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 201
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv72[ebp]
; Line 202
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CRecordVector@I@@QAEII@Z ENDP			; CRecordVector<unsigned int>::Add
_TEXT	ENDS
PUBLIC	?MoveItems@?$CRecordVector@I@@AAEXII@Z		; CRecordVector<unsigned int>::MoveItems
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Insert@?$CRecordVector@I@@QAEXII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
_item$ = 12						; size = 4
?Insert@?$CRecordVector@I@@QAEXII@Z PROC		; CRecordVector<unsigned int>::Insert, COMDAT
; _this$ = ecx
; Line 210
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 211
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ ; CRecordVector<unsigned int>::ReserveOnePosition
; Line 212
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MoveItems@?$CRecordVector@I@@AAEXII@Z	; CRecordVector<unsigned int>::MoveItems
; Line 213
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 214
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 215
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Insert@?$CRecordVector@I@@QAEXII@Z ENDP		; CRecordVector<unsigned int>::Insert
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@I@@QAEAAII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@I@@QAEAAII@Z PROC			; CRecordVector<unsigned int>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@I@@QAEAAII@Z ENDP			; CRecordVector<unsigned int>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z PROC ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@CMyComPtr@5
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@5:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z ENDP ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@6:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ PROC ; CMyComPtr<ISequentialOutStream>::Release, COMDAT
; _this$ = ecx
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Release@13
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
$LN2@Release@13:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ENDP ; CMyComPtr<ISequentialOutStream>::Release
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ PROC ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ENDP ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ PROC ; CMyComPtr<ISequentialOutStream>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ ENDP ; CMyComPtr<ISequentialOutStream>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z PROC ; CMyComPtr<ISequentialOutStream>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@4
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@4:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@4
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@4:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ENDP ; CMyComPtr<ISequentialOutStream>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ PROC	; CMyComPtr<ISequentialOutStream>::operator!, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ ENDP	; CMyComPtr<ISequentialOutStream>::operator!
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CBuffer@E@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CBuffer@E@@QAE@XZ PROC				; CBuffer<unsigned char>::CBuffer<unsigned char>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mybuffer.h
; Line 24
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CBuffer@E@@QAE@XZ ENDP				; CBuffer<unsigned char>::CBuffer<unsigned char>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CBuffer@E@@QAE@XZ
_TEXT	SEGMENT
$T78709 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CBuffer@E@@QAE@XZ PROC				; CBuffer<unsigned char>::~CBuffer<unsigned char>, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T78709[ebp], ecx
	mov	edx, DWORD PTR $T78709[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CBuffer@E@@QAE@XZ ENDP				; CBuffer<unsigned char>::~CBuffer<unsigned char>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CBuffer@E@@QAEPAEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CBuffer@E@@QAEPAEXZ PROC				; CBuffer<unsigned char>::operator unsigned char *, COMDAT
; _this$ = ecx
; Line 39
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CBuffer@E@@QAEPAEXZ ENDP				; CBuffer<unsigned char>::operator unsigned char *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CBuffer@E@@QBEPBEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CBuffer@E@@QBEPBEXZ PROC				; CBuffer<unsigned char>::operator unsigned char const *, COMDAT
; _this$ = ecx
; Line 40
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CBuffer@E@@QBEPBEXZ ENDP				; CBuffer<unsigned char>::operator unsigned char const *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CBuffer@E@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CBuffer@E@@QBEIXZ PROC				; CBuffer<unsigned char>::Size, COMDAT
; _this$ = ecx
; Line 41
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CBuffer@E@@QBEIXZ ENDP				; CBuffer<unsigned char>::Size
_TEXT	ENDS
PUBLIC	?Free@?$CBuffer@E@@QAEXXZ			; CBuffer<unsigned char>::Free
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Alloc@?$CBuffer@E@@QAEXI@Z
_TEXT	SEGMENT
$T78718 = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?Alloc@?$CBuffer@E@@QAEXI@Z PROC			; CBuffer<unsigned char>::Alloc, COMDAT
; _this$ = ecx
; Line 44
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 45
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	je	SHORT $LN3@Alloc
; Line 47
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Free@?$CBuffer@E@@QAEXXZ		; CBuffer<unsigned char>::Free
; Line 48
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN3@Alloc
; Line 50
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T78718[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T78718[ebp]
	mov	DWORD PTR [eax], ecx
; Line 51
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+4], eax
$LN3@Alloc:
; Line 54
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Alloc@?$CBuffer@E@@QAEXI@Z ENDP			; CBuffer<unsigned char>::Alloc
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z PROC ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@CMyComPtr@7
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@7:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z ENDP ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ PROC	; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@8:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ENDP	; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ PROC ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ENDP ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@_N@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@_N@@QAE@XZ PROC			; CRecordVector<bool>::CRecordVector<bool>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@_N@@QAE@XZ ENDP			; CRecordVector<bool>::CRecordVector<bool>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@_N@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@_N@@QBEIXZ PROC			; CRecordVector<bool>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@_N@@QBEIXZ ENDP			; CRecordVector<bool>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@_N@@QAE@XZ
_TEXT	SEGMENT
$T78731 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@_N@@QAE@XZ PROC			; CRecordVector<bool>::~CRecordVector<bool>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T78731[ebp], ecx
	mov	edx, DWORD PTR $T78731[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@_N@@QAE@XZ ENDP			; CRecordVector<bool>::~CRecordVector<bool>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Clear@?$CRecordVector@_N@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$CRecordVector@_N@@QAEXXZ PROC			; CRecordVector<bool>::Clear, COMDAT
; _this$ = ecx
; Line 131
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CRecordVector@_N@@QAEXXZ ENDP			; CRecordVector<bool>::Clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@_N@@QAEAA_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@_N@@QAEAA_NI@Z PROC			; CRecordVector<bool>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	add	eax, DWORD PTR _index$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@_N@@QAEAA_NI@Z ENDP			; CRecordVector<bool>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@_K@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@_K@@QAE@XZ PROC			; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>, COMDAT
; _this$ = ecx
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@_K@@QAE@XZ ENDP			; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@_K@@QAE@XZ
_TEXT	SEGMENT
$T78740 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@_K@@QAE@XZ PROC			; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T78740[ebp], ecx
	mov	edx, DWORD PTR $T78740[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@_K@@QAE@XZ ENDP			; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Clear@?$CRecordVector@_K@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$CRecordVector@_K@@QAEXXZ PROC			; CRecordVector<unsigned __int64>::Clear, COMDAT
; _this$ = ecx
; Line 131
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CRecordVector@_K@@QAEXXZ ENDP			; CRecordVector<unsigned __int64>::Clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@_K@@QAEAA_KI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@_K@@QAEAA_KI@Z PROC			; CRecordVector<unsigned __int64>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@_K@@QAEAA_KI@Z ENDP			; CRecordVector<unsigned __int64>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ PROC	; CMyComPtr<IArchiveOpenCallback>::CMyComPtr<IArchiveOpenCallback>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ENDP	; CMyComPtr<IArchiveOpenCallback>::CMyComPtr<IArchiveOpenCallback>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@PAUIArchiveOpenCallback@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??0?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@PAUIArchiveOpenCallback@@@Z PROC ; CMyComPtr<IArchiveOpenCallback>::CMyComPtr<IArchiveOpenCallback>, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@CMyComPtr@9
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@9:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@PAUIArchiveOpenCallback@@@Z ENDP ; CMyComPtr<IArchiveOpenCallback>::CMyComPtr<IArchiveOpenCallback>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ PROC	; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@10
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@10:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ENDP	; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ PROC ; CMyComPtr<IArchiveOpenCallback>::operator IArchiveOpenCallback *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ ENDP ; CMyComPtr<IArchiveOpenCallback>::operator IArchiveOpenCallback *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ PROC ; CMyComPtr<IArchiveOpenCallback>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ ENDP ; CMyComPtr<IArchiveOpenCallback>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UIArchiveOpenCallback@@@@QAEPAUIArchiveOpenCallback@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UIArchiveOpenCallback@@@@QAEPAUIArchiveOpenCallback@@PAU1@@Z PROC ; CMyComPtr<IArchiveOpenCallback>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@5
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@5:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@5
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@5:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UIArchiveOpenCallback@@@@QAEPAUIArchiveOpenCallback@@PAU1@@Z ENDP ; CMyComPtr<IArchiveOpenCallback>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??7?$CMyComPtr@UIArchiveOpenCallback@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??7?$CMyComPtr@UIArchiveOpenCallback@@@@QBE_NXZ PROC	; CMyComPtr<IArchiveOpenCallback>::operator!, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
??7?$CMyComPtr@UIArchiveOpenCallback@@@@QBE_NXZ ENDP	; CMyComPtr<IArchiveOpenCallback>::operator!
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CObjectVector@UCArcExtInfo@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@UCArcExtInfo@@@@QBEIXZ PROC	; CObjectVector<CArcExtInfo>::Size, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@UCArcExtInfo@@@@QBEIXZ ENDP	; CObjectVector<CArcExtInfo>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsEmpty@?$CObjectVector@UCArcExtInfo@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@?$CObjectVector@UCArcExtInfo@@@@QBE_NXZ PROC	; CObjectVector<CArcExtInfo>::IsEmpty, COMDAT
; _this$ = ecx
; Line 416
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ	; CRecordVector<void *>::IsEmpty
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@?$CObjectVector@UCArcExtInfo@@@@QBE_NXZ ENDP	; CObjectVector<CArcExtInfo>::IsEmpty
_TEXT	ENDS
PUBLIC	??A?$CRecordVector@PAX@@QBEABQAXI@Z		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??A?$CObjectVector@UCArcExtInfo@@@@QBEABUCArcExtInfo@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCArcExtInfo@@@@QBEABUCArcExtInfo@@I@Z PROC ; CObjectVector<CArcExtInfo>::operator[], COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCArcExtInfo@@@@QBEABUCArcExtInfo@@I@Z ENDP ; CObjectVector<CArcExtInfo>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CObjectVector@V?$CBuffer@E@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@V?$CBuffer@E@@@@QBEIXZ PROC	; CObjectVector<CBuffer<unsigned char> >::Size, COMDAT
; _this$ = ecx
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@V?$CBuffer@E@@@@QBEIXZ ENDP	; CObjectVector<CBuffer<unsigned char> >::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsEmpty@?$CObjectVector@V?$CBuffer@E@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@?$CObjectVector@V?$CBuffer@E@@@@QBE_NXZ PROC	; CObjectVector<CBuffer<unsigned char> >::IsEmpty, COMDAT
; _this$ = ecx
; Line 416
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ	; CRecordVector<void *>::IsEmpty
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@?$CObjectVector@V?$CBuffer@E@@@@QBE_NXZ ENDP	; CObjectVector<CBuffer<unsigned char> >::IsEmpty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@V?$CBuffer@E@@@@QBEABV?$CBuffer@E@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@V?$CBuffer@E@@@@QBEABV?$CBuffer@E@@I@Z PROC ; CObjectVector<CBuffer<unsigned char> >::operator[], COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@V?$CBuffer@E@@@@QBEABV?$CBuffer@E@@I@Z ENDP ; CObjectVector<CBuffer<unsigned char> >::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CObjectVector@UCArcInfoEx@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@UCArcInfoEx@@@@QBEIXZ PROC	; CObjectVector<CArcInfoEx>::Size, COMDAT
; _this$ = ecx
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@UCArcInfoEx@@@@QBEIXZ ENDP	; CObjectVector<CArcInfoEx>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@UCArcInfoEx@@@@QBEABUCArcInfoEx@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCArcInfoEx@@@@QBEABUCArcInfoEx@@I@Z PROC ; CObjectVector<CArcInfoEx>::operator[], COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCArcInfoEx@@@@QBEABUCArcInfoEx@@I@Z ENDP ; CObjectVector<CArcInfoEx>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@UCArcInfoEx@@@@QAEAAUCArcInfoEx@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCArcInfoEx@@@@QAEAAUCArcInfoEx@@I@Z PROC ; CObjectVector<CArcInfoEx>::operator[], COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCArcInfoEx@@@@QAEAAUCArcInfoEx@@I@Z ENDP ; CObjectVector<CArcInfoEx>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIInArchive@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UIInArchive@@@@QAE@XZ PROC		; CMyComPtr<IInArchive>::CMyComPtr<IInArchive>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UIInArchive@@@@QAE@XZ ENDP		; CMyComPtr<IInArchive>::CMyComPtr<IInArchive>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIInArchive@@@@QAE@PAUIInArchive@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??0?$CMyComPtr@UIInArchive@@@@QAE@PAUIInArchive@@@Z PROC ; CMyComPtr<IInArchive>::CMyComPtr<IInArchive>, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@CMyComPtr@11
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@11:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UIInArchive@@@@QAE@PAUIInArchive@@@Z ENDP ; CMyComPtr<IInArchive>::CMyComPtr<IInArchive>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIInArchive@@@@QAE@XZ PROC		; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@12
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@12:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ENDP		; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@?$CMyComPtr@UIInArchive@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Release@?$CMyComPtr@UIInArchive@@@@QAEXXZ PROC		; CMyComPtr<IInArchive>::Release, COMDAT
; _this$ = ecx
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Release@14
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
$LN2@Release@14:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Release@?$CMyComPtr@UIInArchive@@@@QAEXXZ ENDP		; CMyComPtr<IInArchive>::Release
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ PROC	; CMyComPtr<IInArchive>::operator IInArchive *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ENDP	; CMyComPtr<IInArchive>::operator IInArchive *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ PROC	; CMyComPtr<IInArchive>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ENDP	; CMyComPtr<IInArchive>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UIInArchive@@@@QAEPAUIInArchive@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UIInArchive@@@@QAEPAUIInArchive@@PAU1@@Z PROC ; CMyComPtr<IInArchive>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@6
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@6:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@6
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@6:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UIInArchive@@@@QAEPAUIInArchive@@PAU1@@Z ENDP ; CMyComPtr<IInArchive>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UIInArchive@@@@QAEPAUIInArchive@@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lp$ = 8						; size = 4
??4?$CMyComPtr@UIInArchive@@@@QAEPAUIInArchive@@ABV0@@Z PROC ; CMyComPtr<IInArchive>::operator=, COMDAT
; _this$ = ecx
; Line 36
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _lp$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$CMyComPtr@UIInArchive@@@@QAEPAUIInArchive@@PAU1@@Z ; CMyComPtr<IInArchive>::operator=
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UIInArchive@@@@QAEPAUIInArchive@@ABV0@@Z ENDP ; CMyComPtr<IInArchive>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??7?$CMyComPtr@UIInArchive@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??7?$CMyComPtr@UIInArchive@@@@QBE_NXZ PROC		; CMyComPtr<IInArchive>::operator!, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
??7?$CMyComPtr@UIInArchive@@@@QBE_NXZ ENDP		; CMyComPtr<IInArchive>::operator!
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIArchiveGetRawProps@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UIArchiveGetRawProps@@@@QAE@XZ PROC	; CMyComPtr<IArchiveGetRawProps>::CMyComPtr<IArchiveGetRawProps>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UIArchiveGetRawProps@@@@QAE@XZ ENDP	; CMyComPtr<IArchiveGetRawProps>::CMyComPtr<IArchiveGetRawProps>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIArchiveGetRawProps@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIArchiveGetRawProps@@@@QAE@XZ PROC	; CMyComPtr<IArchiveGetRawProps>::~CMyComPtr<IArchiveGetRawProps>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@13
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@13:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIArchiveGetRawProps@@@@QAE@XZ ENDP	; CMyComPtr<IArchiveGetRawProps>::~CMyComPtr<IArchiveGetRawProps>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@?$CMyComPtr@UIArchiveGetRawProps@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Release@?$CMyComPtr@UIArchiveGetRawProps@@@@QAEXXZ PROC ; CMyComPtr<IArchiveGetRawProps>::Release, COMDAT
; _this$ = ecx
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Release@15
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
$LN2@Release@15:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Release@?$CMyComPtr@UIArchiveGetRawProps@@@@QAEXXZ ENDP ; CMyComPtr<IArchiveGetRawProps>::Release
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UIArchiveGetRawProps@@@@QBEPAUIArchiveGetRawProps@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UIArchiveGetRawProps@@@@QBEPAUIArchiveGetRawProps@@XZ PROC ; CMyComPtr<IArchiveGetRawProps>::operator IArchiveGetRawProps *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UIArchiveGetRawProps@@@@QBEPAUIArchiveGetRawProps@@XZ ENDP ; CMyComPtr<IArchiveGetRawProps>::operator IArchiveGetRawProps *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UIArchiveGetRawProps@@@@QAEPAPAUIArchiveGetRawProps@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UIArchiveGetRawProps@@@@QAEPAPAUIArchiveGetRawProps@@XZ PROC ; CMyComPtr<IArchiveGetRawProps>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UIArchiveGetRawProps@@@@QAEPAPAUIArchiveGetRawProps@@XZ ENDP ; CMyComPtr<IArchiveGetRawProps>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UIArchiveGetRawProps@@@@QBEPAUIArchiveGetRawProps@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UIArchiveGetRawProps@@@@QBEPAUIArchiveGetRawProps@@XZ PROC ; CMyComPtr<IArchiveGetRawProps>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UIArchiveGetRawProps@@@@QBEPAUIArchiveGetRawProps@@XZ ENDP ; CMyComPtr<IArchiveGetRawProps>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??7?$CMyComPtr@UIArchiveGetRawProps@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??7?$CMyComPtr@UIArchiveGetRawProps@@@@QBE_NXZ PROC	; CMyComPtr<IArchiveGetRawProps>::operator!, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
??7?$CMyComPtr@UIArchiveGetRawProps@@@@QBE_NXZ ENDP	; CMyComPtr<IArchiveGetRawProps>::operator!
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIArchiveGetRootProps@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UIArchiveGetRootProps@@@@QAE@XZ PROC	; CMyComPtr<IArchiveGetRootProps>::CMyComPtr<IArchiveGetRootProps>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UIArchiveGetRootProps@@@@QAE@XZ ENDP	; CMyComPtr<IArchiveGetRootProps>::CMyComPtr<IArchiveGetRootProps>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIArchiveGetRootProps@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIArchiveGetRootProps@@@@QAE@XZ PROC	; CMyComPtr<IArchiveGetRootProps>::~CMyComPtr<IArchiveGetRootProps>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@14
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@14:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIArchiveGetRootProps@@@@QAE@XZ ENDP	; CMyComPtr<IArchiveGetRootProps>::~CMyComPtr<IArchiveGetRootProps>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@?$CMyComPtr@UIArchiveGetRootProps@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Release@?$CMyComPtr@UIArchiveGetRootProps@@@@QAEXXZ PROC ; CMyComPtr<IArchiveGetRootProps>::Release, COMDAT
; _this$ = ecx
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Release@16
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
$LN2@Release@16:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Release@?$CMyComPtr@UIArchiveGetRootProps@@@@QAEXXZ ENDP ; CMyComPtr<IArchiveGetRootProps>::Release
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UIArchiveGetRootProps@@@@QAEPAPAUIArchiveGetRootProps@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UIArchiveGetRootProps@@@@QAEPAPAUIArchiveGetRootProps@@XZ PROC ; CMyComPtr<IArchiveGetRootProps>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UIArchiveGetRootProps@@@@QAEPAPAUIArchiveGetRootProps@@XZ ENDP ; CMyComPtr<IArchiveGetRootProps>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CObjectVector@VCArc@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@VCArc@@@@QBEIXZ PROC		; CObjectVector<CArc>::Size, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@VCArc@@@@QBEIXZ ENDP		; CObjectVector<CArc>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsEmpty@?$CObjectVector@VCArc@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@?$CObjectVector@VCArc@@@@QBE_NXZ PROC		; CObjectVector<CArc>::IsEmpty, COMDAT
; _this$ = ecx
; Line 416
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ	; CRecordVector<void *>::IsEmpty
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@?$CObjectVector@VCArc@@@@QBE_NXZ ENDP		; CObjectVector<CArc>::IsEmpty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@VCArc@@@@QAEAAVCArc@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@VCArc@@@@QAEAAVCArc@@I@Z PROC	; CObjectVector<CArc>::operator[], COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@VCArc@@@@QAEAAVCArc@@I@Z ENDP	; CObjectVector<CArc>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Back@?$CObjectVector@VCArc@@@@QAEAAVCArc@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Back@?$CObjectVector@VCArc@@@@QAEAAVCArc@@XZ PROC	; CObjectVector<CArc>::Back, COMDAT
; _this$ = ecx
; Line 455
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CObjectVector@VCArc@@@@QAEAAVCArc@@I@Z ; CObjectVector<CArc>::operator[]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Back@?$CObjectVector@VCArc@@@@QAEAAVCArc@@XZ ENDP	; CObjectVector<CArc>::Back
_TEXT	ENDS
PUBLIC	??0CArc@@QAE@ABV0@@Z				; CArc::CArc
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Add@?$CObjectVector@VCArc@@@@QAEIABVCArc@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Add@?$CObjectVector@VCArc@@@@QAEIABVCArc@@@Z$0
__ehfuncinfo$?Add@?$CObjectVector@VCArc@@@@QAEIABVCArc@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Add@?$CObjectVector@VCArc@@@@QAEIABVCArc@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?Add@?$CObjectVector@VCArc@@@@QAEIABVCArc@@@Z
_TEXT	SEGMENT
tv74 = -28						; size = 4
$T78828 = -24						; size = 4
$T78827 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_item$ = 8						; size = 4
?Add@?$CObjectVector@VCArc@@@@QAEIABVCArc@@@Z PROC	; CObjectVector<CArc>::Add, COMDAT
; _this$ = ecx
; Line 459
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Add@?$CObjectVector@VCArc@@@@QAEIABVCArc@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	224					; 000000e0H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T78828[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T78828[ebp], 0
	je	SHORT $LN3@Add@2
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T78828[ebp]
	call	??0CArc@@QAE@ABV0@@Z
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@Add@2
$LN3@Add@2:
	mov	DWORD PTR tv74[ebp], 0
$LN4@Add@2:
	mov	ecx, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T78827[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T78827[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Add@?$CObjectVector@VCArc@@@@QAEIABVCArc@@@Z$0:
	mov	eax, DWORD PTR $T78828[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Add@?$CObjectVector@VCArc@@@@QAEIABVCArc@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Add@?$CObjectVector@VCArc@@@@QAEIABVCArc@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Add@?$CObjectVector@VCArc@@@@QAEIABVCArc@@@Z ENDP	; CObjectVector<CArc>::Add
PUBLIC	??_GCArc@@QAEPAXI@Z				; CArc::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?DeleteBack@?$CObjectVector@VCArc@@@@QAEXXZ
_TEXT	SEGMENT
tv74 = -16						; size = 4
$T78841 = -12						; size = 4
$T78840 = -8						; size = 4
_this$ = -4						; size = 4
?DeleteBack@?$CObjectVector@VCArc@@@@QAEXXZ PROC	; CObjectVector<CArc>::DeleteBack, COMDAT
; _this$ = ecx
; Line 521
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 522
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR $T78841[ebp], eax
	mov	ecx, DWORD PTR $T78841[ebp]
	mov	DWORD PTR $T78840[ebp], ecx
	cmp	DWORD PTR $T78840[ebp], 0
	je	SHORT $LN3@DeleteBack@2
	push	1
	mov	ecx, DWORD PTR $T78840[ebp]
	call	??_GCArc@@QAEPAXI@Z
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@DeleteBack@2
$LN3@DeleteBack@2:
	mov	DWORD PTR tv74[ebp], 0
$LN4@DeleteBack@2:
; Line 523
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DeleteBack@?$CRecordVector@PAX@@QAEXXZ	; CRecordVector<void *>::DeleteBack
; Line 524
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?DeleteBack@?$CObjectVector@VCArc@@@@QAEXXZ ENDP	; CObjectVector<CArc>::DeleteBack
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QBEIXZ PROC ; CObjectVector<NArchive::NParser::CParseItem>::Size, COMDAT
; _this$ = ecx
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QBEIXZ ENDP ; CObjectVector<NArchive::NParser::CParseItem>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsEmpty@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QBE_NXZ PROC ; CObjectVector<NArchive::NParser::CParseItem>::IsEmpty, COMDAT
; _this$ = ecx
; Line 416
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ	; CRecordVector<void *>::IsEmpty
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QBE_NXZ ENDP ; CObjectVector<NArchive::NParser::CParseItem>::IsEmpty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAE@XZ PROC ; CObjectVector<NArchive::NParser::CParseItem>::CObjectVector<NArchive::NParser::CParseItem>, COMDAT
; _this$ = ecx
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAE@XZ ENDP ; CObjectVector<NArchive::NParser::CParseItem>::CObjectVector<NArchive::NParser::CParseItem>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@UCParseItem@NParser@NArchive@@@@QBEABUCParseItem@NParser@NArchive@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCParseItem@NParser@NArchive@@@@QBEABUCParseItem@NParser@NArchive@@I@Z PROC ; CObjectVector<NArchive::NParser::CParseItem>::operator[], COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCParseItem@NParser@NArchive@@@@QBEABUCParseItem@NParser@NArchive@@I@Z ENDP ; CObjectVector<NArchive::NParser::CParseItem>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEAAUCParseItem@NParser@NArchive@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEAAUCParseItem@NParser@NArchive@@I@Z PROC ; CObjectVector<NArchive::NParser::CParseItem>::operator[], COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEAAUCParseItem@NParser@NArchive@@I@Z ENDP ; CObjectVector<NArchive::NParser::CParseItem>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Back@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEAAUCParseItem@NParser@NArchive@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Back@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEAAUCParseItem@NParser@NArchive@@XZ PROC ; CObjectVector<NArchive::NParser::CParseItem>::Back, COMDAT
; _this$ = ecx
; Line 455
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEAAUCParseItem@NParser@NArchive@@I@Z ; CObjectVector<NArchive::NParser::CParseItem>::operator[]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Back@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEAAUCParseItem@NParser@NArchive@@XZ ENDP ; CObjectVector<NArchive::NParser::CParseItem>::Back
_TEXT	ENDS
PUBLIC	??0CParseItem@NParser@NArchive@@QAE@ABU012@@Z	; NArchive::NParser::CParseItem::CParseItem
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Add@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEIABUCParseItem@NParser@NArchive@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Add@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEIABUCParseItem@NParser@NArchive@@@Z$0
__ehfuncinfo$?Add@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEIABUCParseItem@NParser@NArchive@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Add@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEIABUCParseItem@NParser@NArchive@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?Add@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEIABUCParseItem@NParser@NArchive@@@Z
_TEXT	SEGMENT
tv74 = -28						; size = 4
$T78860 = -24						; size = 4
$T78859 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_item$ = 8						; size = 4
?Add@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEIABUCParseItem@NParser@NArchive@@@Z PROC ; CObjectVector<NArchive::NParser::CParseItem>::Add, COMDAT
; _this$ = ecx
; Line 459
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Add@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEIABUCParseItem@NParser@NArchive@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	112					; 00000070H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T78860[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T78860[ebp], 0
	je	SHORT $LN3@Add@3
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T78860[ebp]
	call	??0CParseItem@NParser@NArchive@@QAE@ABU012@@Z
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@Add@3
$LN3@Add@3:
	mov	DWORD PTR tv74[ebp], 0
$LN4@Add@3:
	mov	ecx, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T78859[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T78859[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Add@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEIABUCParseItem@NParser@NArchive@@@Z$0:
	mov	eax, DWORD PTR $T78860[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Add@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEIABUCParseItem@NParser@NArchive@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Add@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEIABUCParseItem@NParser@NArchive@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Add@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEIABUCParseItem@NParser@NArchive@@@Z ENDP ; CObjectVector<NArchive::NParser::CParseItem>::Add
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Insert@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEXIABUCParseItem@NParser@NArchive@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Insert@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEXIABUCParseItem@NParser@NArchive@@@Z$0
__ehfuncinfo$?Insert@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEXIABUCParseItem@NParser@NArchive@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Insert@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEXIABUCParseItem@NParser@NArchive@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?Insert@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEXIABUCParseItem@NParser@NArchive@@@Z
_TEXT	SEGMENT
tv73 = -28						; size = 4
$T78873 = -24						; size = 4
$T78872 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_index$ = 8						; size = 4
_item$ = 12						; size = 4
?Insert@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEXIABUCParseItem@NParser@NArchive@@@Z PROC ; CObjectVector<NArchive::NParser::CParseItem>::Insert, COMDAT
; _this$ = ecx
; Line 477
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Insert@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEXIABUCParseItem@NParser@NArchive@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	112					; 00000070H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T78873[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T78873[ebp], 0
	je	SHORT $LN3@Insert@2
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T78873[ebp]
	call	??0CParseItem@NParser@NArchive@@QAE@ABU012@@Z
	mov	DWORD PTR tv73[ebp], eax
	jmp	SHORT $LN4@Insert@2
$LN3@Insert@2:
	mov	DWORD PTR tv73[ebp], 0
$LN4@Insert@2:
	mov	ecx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T78872[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T78872[ebp]
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Insert@?$CRecordVector@PAX@@QAEXIQAX@Z	; CRecordVector<void *>::Insert
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Insert@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEXIABUCParseItem@NParser@NArchive@@@Z$0:
	mov	eax, DWORD PTR $T78873[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Insert@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEXIABUCParseItem@NParser@NArchive@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Insert@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEXIABUCParseItem@NParser@NArchive@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Insert@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEXIABUCParseItem@NParser@NArchive@@@Z ENDP ; CObjectVector<NArchive::NParser::CParseItem>::Insert
PUBLIC	??_GCParseItem@NParser@NArchive@@QAEPAXI@Z	; NArchive::NParser::CParseItem::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T78886 = -28						; size = 4
$T78885 = -24						; size = 4
_i$75935 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAE@XZ PROC ; CObjectVector<NArchive::NParser::CParseItem>::~CObjectVector<NArchive::NParser::CParseItem>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$75935[ebp], eax
$LN2@CObjectVec@2:
	cmp	DWORD PTR _i$75935[ebp], 0
	je	SHORT $LN3@CObjectVec@2
; Line 489
	mov	eax, DWORD PTR _i$75935[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$75935[ebp], eax
	mov	ecx, DWORD PTR _i$75935[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T78886[ebp], edx
	mov	eax, DWORD PTR $T78886[ebp]
	mov	DWORD PTR $T78885[ebp], eax
	cmp	DWORD PTR $T78885[ebp], 0
	je	SHORT $LN5@CObjectVec@2
	push	1
	mov	ecx, DWORD PTR $T78885[ebp]
	call	??_GCParseItem@NParser@NArchive@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@2
$LN5@CObjectVec@2:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@2:
	jmp	SHORT $LN2@CObjectVec@2
$LN3@CObjectVec@2:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAE@XZ ENDP ; CObjectVector<NArchive::NParser::CParseItem>::~CObjectVector<NArchive::NParser::CParseItem>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Clear@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEXXZ
_TEXT	SEGMENT
tv75 = -20						; size = 4
$T78899 = -16						; size = 4
$T78898 = -12						; size = 4
_i$75944 = -8						; size = 4
_this$ = -4						; size = 4
?Clear@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEXXZ PROC ; CObjectVector<NArchive::NParser::CParseItem>::Clear, COMDAT
; _this$ = ecx
; Line 499
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 500
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$75944[ebp], eax
$LN2@Clear@2:
	cmp	DWORD PTR _i$75944[ebp], 0
	je	SHORT $LN1@Clear@2
; Line 501
	mov	eax, DWORD PTR _i$75944[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$75944[ebp], eax
	mov	ecx, DWORD PTR _i$75944[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T78899[ebp], edx
	mov	eax, DWORD PTR $T78899[ebp]
	mov	DWORD PTR $T78898[ebp], eax
	cmp	DWORD PTR $T78898[ebp], 0
	je	SHORT $LN5@Clear@2
	push	1
	mov	ecx, DWORD PTR $T78898[ebp]
	call	??_GCParseItem@NParser@NArchive@@QAEPAXI@Z
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN6@Clear@2
$LN5@Clear@2:
	mov	DWORD PTR tv75[ebp], 0
$LN6@Clear@2:
	jmp	SHORT $LN2@Clear@2
$LN1@Clear@2:
; Line 502
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CRecordVector@PAX@@QAEXXZ	; CRecordVector<void *>::Clear
; Line 503
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEXXZ ENDP ; CObjectVector<NArchive::NParser::CParseItem>::Clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?DeleteBack@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEXXZ
_TEXT	SEGMENT
tv74 = -16						; size = 4
$T78905 = -12						; size = 4
$T78904 = -8						; size = 4
_this$ = -4						; size = 4
?DeleteBack@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEXXZ PROC ; CObjectVector<NArchive::NParser::CParseItem>::DeleteBack, COMDAT
; _this$ = ecx
; Line 521
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 522
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR $T78905[ebp], eax
	mov	ecx, DWORD PTR $T78905[ebp]
	mov	DWORD PTR $T78904[ebp], ecx
	cmp	DWORD PTR $T78904[ebp], 0
	je	SHORT $LN3@DeleteBack@3
	push	1
	mov	ecx, DWORD PTR $T78904[ebp]
	call	??_GCParseItem@NParser@NArchive@@QAEPAXI@Z
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@DeleteBack@3
$LN3@DeleteBack@3:
	mov	DWORD PTR tv74[ebp], 0
$LN4@DeleteBack@3:
; Line 523
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DeleteBack@?$CRecordVector@PAX@@QAEXXZ	; CRecordVector<void *>::DeleteBack
; Line 524
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?DeleteBack@?$CObjectVector@UCParseItem@NParser@NArchive@@@@QAEXXZ ENDP ; CObjectVector<NArchive::NParser::CParseItem>::DeleteBack
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICompressCoder@@@@QAE@PAUICompressCoder@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??0?$CMyComPtr@UICompressCoder@@@@QAE@PAUICompressCoder@@@Z PROC ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@CMyComPtr@15
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@15:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UICompressCoder@@@@QAE@PAUICompressCoder@@@Z ENDP ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ PROC		; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@16
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@16:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ENDP		; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ PROC ; CMyComPtr<ICompressCoder>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ENDP ; CMyComPtr<ICompressCoder>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@H@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@H@@QAE@XZ PROC			; CRecordVector<int>::CRecordVector<int>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@H@@QAE@XZ ENDP			; CRecordVector<int>::CRecordVector<int>
_TEXT	ENDS
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CRecordVector@H@@QAE@ABV0@@Z
_TEXT	SEGMENT
$T78918 = -12						; size = 4
_size$ = -8						; size = 4
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??0?$CRecordVector@H@@QAE@ABV0@@Z PROC			; CRecordVector<int>::CRecordVector<int>, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
; Line 38
	mov	ecx, DWORD PTR _v$[ebp]
	call	?Size@?$CRecordVector@H@@QBEIXZ		; CRecordVector<int>::Size
	mov	DWORD PTR _size$[ebp], eax
; Line 39
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN2@CRecordVec
; Line 41
	xor	ecx, ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T78918[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T78918[ebp]
	mov	DWORD PTR [eax], ecx
; Line 42
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 43
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx+8], edx
; Line 44
	mov	eax, DWORD PTR _size$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN2@CRecordVec:
; Line 46
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CRecordVector@H@@QAE@ABV0@@Z ENDP			; CRecordVector<int>::CRecordVector<int>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@H@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@H@@QBEIXZ PROC			; CRecordVector<int>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@H@@QBEIXZ ENDP			; CRecordVector<int>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@H@@QAE@XZ
_TEXT	SEGMENT
$T78923 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@H@@QAE@XZ PROC			; CRecordVector<int>::~CRecordVector<int>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T78923[ebp], ecx
	mov	edx, DWORD PTR $T78923[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@H@@QAE@XZ ENDP			; CRecordVector<int>::~CRecordVector<int>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?DeleteFrom@?$CRecordVector@H@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?DeleteFrom@?$CRecordVector@H@@QAEXI@Z PROC		; CRecordVector<int>::DeleteFrom, COMDAT
; _this$ = ecx
; Line 136
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 138
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 139
	mov	esp, ebp
	pop	ebp
	ret	4
?DeleteFrom@?$CRecordVector@H@@QAEXI@Z ENDP		; CRecordVector<int>::DeleteFrom
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CRecordVector@H@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
$T78929 = -16						; size = 4
$T78928 = -12						; size = 4
_size$ = -8						; size = 4
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??4?$CRecordVector@H@@QAEAAV0@ABV0@@Z PROC		; CRecordVector<int>::operator=, COMDAT
; _this$ = ecx
; Line 168
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 169
	mov	eax, DWORD PTR _v$[ebp]
	cmp	eax, DWORD PTR _this$[ebp]
	jne	SHORT $LN3@operator@7
; Line 170
	mov	eax, DWORD PTR _this$[ebp]
	jmp	$LN4@operator@7
$LN3@operator@7:
; Line 171
	mov	ecx, DWORD PTR _v$[ebp]
	call	?Size@?$CRecordVector@H@@QBEIXZ		; CRecordVector<int>::Size
	mov	DWORD PTR _size$[ebp], eax
; Line 172
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jbe	SHORT $LN2@operator@7
; Line 174
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T78928[ebp], ecx
	mov	edx, DWORD PTR $T78928[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 175
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 176
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 177
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0
; Line 178
	xor	ecx, ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T78929[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T78929[ebp]
	mov	DWORD PTR [eax], ecx
; Line 179
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@operator@7:
; Line 181
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 182
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN1@operator@7
; Line 183
	mov	eax, DWORD PTR _size$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@operator@7:
; Line 184
	mov	eax, DWORD PTR _this$[ebp]
$LN4@operator@7:
; Line 185
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CRecordVector@H@@QAEAAV0@ABV0@@Z ENDP		; CRecordVector<int>::operator=
_TEXT	ENDS
PUBLIC	?ReserveOnePosition@?$CRecordVector@H@@AAEXXZ	; CRecordVector<int>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@H@@QAEIH@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?Add@?$CRecordVector@H@@QAEIH@Z PROC			; CRecordVector<int>::Add, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@H@@AAEXXZ ; CRecordVector<int>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 201
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv72[ebp]
; Line 202
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CRecordVector@H@@QAEIH@Z ENDP			; CRecordVector<int>::Add
_TEXT	ENDS
PUBLIC	?MoveItems@?$CRecordVector@H@@AAEXII@Z		; CRecordVector<int>::MoveItems
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Insert@?$CRecordVector@H@@QAEXIH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
_item$ = 12						; size = 4
?Insert@?$CRecordVector@H@@QAEXIH@Z PROC		; CRecordVector<int>::Insert, COMDAT
; _this$ = ecx
; Line 210
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 211
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@H@@AAEXXZ ; CRecordVector<int>::ReserveOnePosition
; Line 212
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MoveItems@?$CRecordVector@H@@AAEXII@Z	; CRecordVector<int>::MoveItems
; Line 213
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 214
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 215
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Insert@?$CRecordVector@H@@QAEXIH@Z ENDP		; CRecordVector<int>::Insert
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@H@@QAEAAHI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@H@@QAEAAHI@Z PROC			; CRecordVector<int>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@H@@QAEAAHI@Z ENDP			; CRecordVector<int>::operator[]
_TEXT	ENDS
PUBLIC	?FindInSorted@?$CRecordVector@H@@QBEHHII@Z	; CRecordVector<int>::FindInSorted
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?FindInSorted@?$CRecordVector@H@@QBEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?FindInSorted@?$CRecordVector@H@@QBEHH@Z PROC		; CRecordVector<int>::FindInSorted, COMDAT
; _this$ = ecx
; Line 277
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 278
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	0
	mov	edx, DWORD PTR _item$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindInSorted@?$CRecordVector@H@@QBEHHII@Z ; CRecordVector<int>::FindInSorted
; Line 279
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?FindInSorted@?$CRecordVector@H@@QBEHH@Z ENDP		; CRecordVector<int>::FindInSorted
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ PROC	; CMyComPtr<ICryptoGetTextPassword>::CMyComPtr<ICryptoGetTextPassword>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ENDP	; CMyComPtr<ICryptoGetTextPassword>::CMyComPtr<ICryptoGetTextPassword>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ PROC	; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@17
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@17:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ENDP	; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ PROC ; CMyComPtr<ICryptoGetTextPassword>::operator ICryptoGetTextPassword *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ ENDP ; CMyComPtr<ICryptoGetTextPassword>::operator ICryptoGetTextPassword *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UICryptoGetTextPassword@@@@QAEPAPAUICryptoGetTextPassword@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UICryptoGetTextPassword@@@@QAEPAPAUICryptoGetTextPassword@@XZ PROC ; CMyComPtr<ICryptoGetTextPassword>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UICryptoGetTextPassword@@@@QAEPAPAUICryptoGetTextPassword@@XZ ENDP ; CMyComPtr<ICryptoGetTextPassword>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ PROC ; CMyComPtr<ICryptoGetTextPassword>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ ENDP ; CMyComPtr<ICryptoGetTextPassword>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIArchiveAllowTail@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UIArchiveAllowTail@@@@QAE@XZ PROC	; CMyComPtr<IArchiveAllowTail>::CMyComPtr<IArchiveAllowTail>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UIArchiveAllowTail@@@@QAE@XZ ENDP	; CMyComPtr<IArchiveAllowTail>::CMyComPtr<IArchiveAllowTail>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIArchiveAllowTail@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIArchiveAllowTail@@@@QAE@XZ PROC	; CMyComPtr<IArchiveAllowTail>::~CMyComPtr<IArchiveAllowTail>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@18
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@18:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIArchiveAllowTail@@@@QAE@XZ ENDP	; CMyComPtr<IArchiveAllowTail>::~CMyComPtr<IArchiveAllowTail>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UIArchiveAllowTail@@@@QBEPAUIArchiveAllowTail@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UIArchiveAllowTail@@@@QBEPAUIArchiveAllowTail@@XZ PROC ; CMyComPtr<IArchiveAllowTail>::operator IArchiveAllowTail *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UIArchiveAllowTail@@@@QBEPAUIArchiveAllowTail@@XZ ENDP ; CMyComPtr<IArchiveAllowTail>::operator IArchiveAllowTail *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UIArchiveAllowTail@@@@QAEPAPAUIArchiveAllowTail@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UIArchiveAllowTail@@@@QAEPAPAUIArchiveAllowTail@@XZ PROC ; CMyComPtr<IArchiveAllowTail>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UIArchiveAllowTail@@@@QAEPAPAUIArchiveAllowTail@@XZ ENDP ; CMyComPtr<IArchiveAllowTail>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UIArchiveAllowTail@@@@QBEPAUIArchiveAllowTail@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UIArchiveAllowTail@@@@QBEPAUIArchiveAllowTail@@XZ PROC ; CMyComPtr<IArchiveAllowTail>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UIArchiveAllowTail@@@@QBEPAUIArchiveAllowTail@@XZ ENDP ; CMyComPtr<IArchiveAllowTail>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CObjArray@_N@@QAE@I@Z
_TEXT	SEGMENT
$T78960 = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
??0?$CObjArray@_N@@QAE@I@Z PROC				; CObjArray<bool>::CObjArray<bool>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mybuffer.h
; Line 139
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN2@CObjArray
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T78960[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T78960[ebp]
	mov	DWORD PTR [edx], eax
$LN2@CObjArray:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CObjArray@_N@@QAE@I@Z ENDP				; CObjArray<bool>::CObjArray<bool>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CObjArray@_N@@QAE@XZ
_TEXT	SEGMENT
$T78963 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CObjArray@_N@@QAE@XZ PROC				; CObjArray<bool>::~CObjArray<bool>, COMDAT
; _this$ = ecx
; Line 141
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T78963[ebp], ecx
	mov	edx, DWORD PTR $T78963[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CObjArray@_N@@QAE@XZ ENDP				; CObjArray<bool>::~CObjArray<bool>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CObjArray@_N@@QAEPA_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CObjArray@_N@@QAEPA_NXZ PROC			; CObjArray<bool>::operator bool *, COMDAT
; _this$ = ecx
; Line 143
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CObjArray@_N@@QAEPA_NXZ ENDP			; CObjArray<bool>::operator bool *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIArchiveOpenSeq@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UIArchiveOpenSeq@@@@QAE@XZ PROC		; CMyComPtr<IArchiveOpenSeq>::CMyComPtr<IArchiveOpenSeq>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UIArchiveOpenSeq@@@@QAE@XZ ENDP		; CMyComPtr<IArchiveOpenSeq>::CMyComPtr<IArchiveOpenSeq>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIArchiveOpenSeq@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIArchiveOpenSeq@@@@QAE@XZ PROC		; CMyComPtr<IArchiveOpenSeq>::~CMyComPtr<IArchiveOpenSeq>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@19
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@19:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIArchiveOpenSeq@@@@QAE@XZ ENDP		; CMyComPtr<IArchiveOpenSeq>::~CMyComPtr<IArchiveOpenSeq>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UIArchiveOpenSeq@@@@QAEPAPAUIArchiveOpenSeq@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UIArchiveOpenSeq@@@@QAEPAPAUIArchiveOpenSeq@@XZ PROC ; CMyComPtr<IArchiveOpenSeq>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UIArchiveOpenSeq@@@@QAEPAPAUIArchiveOpenSeq@@XZ ENDP ; CMyComPtr<IArchiveOpenSeq>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UIArchiveOpenSeq@@@@QBEPAUIArchiveOpenSeq@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UIArchiveOpenSeq@@@@QBEPAUIArchiveOpenSeq@@XZ PROC ; CMyComPtr<IArchiveOpenSeq>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UIArchiveOpenSeq@@@@QBEPAUIArchiveOpenSeq@@XZ ENDP ; CMyComPtr<IArchiveOpenSeq>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??7?$CMyComPtr@UIArchiveOpenSeq@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??7?$CMyComPtr@UIArchiveOpenSeq@@@@QBE_NXZ PROC		; CMyComPtr<IArchiveOpenSeq>::operator!, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
??7?$CMyComPtr@UIArchiveOpenSeq@@@@QBE_NXZ ENDP		; CMyComPtr<IArchiveOpenSeq>::operator!
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@PAUIArchiveExtractCallback@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??0?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@PAUIArchiveExtractCallback@@@Z PROC ; CMyComPtr<IArchiveExtractCallback>::CMyComPtr<IArchiveExtractCallback>, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@CMyComPtr@20
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@20:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@PAUIArchiveExtractCallback@@@Z ENDP ; CMyComPtr<IArchiveExtractCallback>::CMyComPtr<IArchiveExtractCallback>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ PROC	; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@21
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@21:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIArchiveExtractCallback@@@@QAE@XZ ENDP	; CMyComPtr<IArchiveExtractCallback>::~CMyComPtr<IArchiveExtractCallback>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UIArchiveExtractCallback@@@@QBEPAUIArchiveExtractCallback@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UIArchiveExtractCallback@@@@QBEPAUIArchiveExtractCallback@@XZ PROC ; CMyComPtr<IArchiveExtractCallback>::operator IArchiveExtractCallback *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UIArchiveExtractCallback@@@@QBEPAUIArchiveExtractCallback@@XZ ENDP ; CMyComPtr<IArchiveExtractCallback>::operator IArchiveExtractCallback *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CObjArray@E@@QAE@I@Z
_TEXT	SEGMENT
$T78984 = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
??0?$CObjArray@E@@QAE@I@Z PROC				; CObjArray<unsigned char>::CObjArray<unsigned char>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mybuffer.h
; Line 139
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN2@CObjArray@2
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T78984[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T78984[ebp]
	mov	DWORD PTR [edx], eax
$LN2@CObjArray@2:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CObjArray@E@@QAE@I@Z ENDP				; CObjArray<unsigned char>::CObjArray<unsigned char>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CObjArray@E@@QAE@XZ
_TEXT	SEGMENT
$T78987 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CObjArray@E@@QAE@XZ PROC				; CObjArray<unsigned char>::~CObjArray<unsigned char>, COMDAT
; _this$ = ecx
; Line 141
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T78987[ebp], ecx
	mov	edx, DWORD PTR $T78987[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CObjArray@E@@QAE@XZ ENDP				; CObjArray<unsigned char>::~CObjArray<unsigned char>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CObjArray@E@@QAEPAEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CObjArray@E@@QAEPAEXZ PROC				; CObjArray<unsigned char>::operator unsigned char *, COMDAT
; _this$ = ecx
; Line 143
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CObjArray@E@@QAEPAEXZ ENDP				; CObjArray<unsigned char>::operator unsigned char *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIArchiveKeepModeForNextOpen@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UIArchiveKeepModeForNextOpen@@@@QAE@XZ PROC ; CMyComPtr<IArchiveKeepModeForNextOpen>::CMyComPtr<IArchiveKeepModeForNextOpen>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UIArchiveKeepModeForNextOpen@@@@QAE@XZ ENDP ; CMyComPtr<IArchiveKeepModeForNextOpen>::CMyComPtr<IArchiveKeepModeForNextOpen>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIArchiveKeepModeForNextOpen@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIArchiveKeepModeForNextOpen@@@@QAE@XZ PROC ; CMyComPtr<IArchiveKeepModeForNextOpen>::~CMyComPtr<IArchiveKeepModeForNextOpen>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@22
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@22:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIArchiveKeepModeForNextOpen@@@@QAE@XZ ENDP ; CMyComPtr<IArchiveKeepModeForNextOpen>::~CMyComPtr<IArchiveKeepModeForNextOpen>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UIArchiveKeepModeForNextOpen@@@@QBEPAUIArchiveKeepModeForNextOpen@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UIArchiveKeepModeForNextOpen@@@@QBEPAUIArchiveKeepModeForNextOpen@@XZ PROC ; CMyComPtr<IArchiveKeepModeForNextOpen>::operator IArchiveKeepModeForNextOpen *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UIArchiveKeepModeForNextOpen@@@@QBEPAUIArchiveKeepModeForNextOpen@@XZ ENDP ; CMyComPtr<IArchiveKeepModeForNextOpen>::operator IArchiveKeepModeForNextOpen *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UIArchiveKeepModeForNextOpen@@@@QAEPAPAUIArchiveKeepModeForNextOpen@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UIArchiveKeepModeForNextOpen@@@@QAEPAPAUIArchiveKeepModeForNextOpen@@XZ PROC ; CMyComPtr<IArchiveKeepModeForNextOpen>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UIArchiveKeepModeForNextOpen@@@@QAEPAPAUIArchiveKeepModeForNextOpen@@XZ ENDP ; CMyComPtr<IArchiveKeepModeForNextOpen>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UIArchiveKeepModeForNextOpen@@@@QBEPAUIArchiveKeepModeForNextOpen@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UIArchiveKeepModeForNextOpen@@@@QBEPAUIArchiveKeepModeForNextOpen@@XZ PROC ; CMyComPtr<IArchiveKeepModeForNextOpen>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UIArchiveKeepModeForNextOpen@@@@QBEPAUIArchiveKeepModeForNextOpen@@XZ ENDP ; CMyComPtr<IArchiveKeepModeForNextOpen>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CObjectVector@UCOpenType@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@UCOpenType@@@@QBEIXZ PROC		; CObjectVector<COpenType>::Size, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@UCOpenType@@@@QBEIXZ ENDP		; CObjectVector<COpenType>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CObjectVector@UCOpenType@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@UCOpenType@@@@QAE@XZ PROC		; CObjectVector<COpenType>::CObjectVector<COpenType>, COMDAT
; _this$ = ecx
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@UCOpenType@@@@QAE@XZ ENDP		; CObjectVector<COpenType>::CObjectVector<COpenType>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@UCOpenType@@@@QBEABUCOpenType@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCOpenType@@@@QBEABUCOpenType@@I@Z PROC ; CObjectVector<COpenType>::operator[], COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCOpenType@@@@QBEABUCOpenType@@I@Z ENDP ; CObjectVector<COpenType>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Add@?$CObjectVector@UCOpenType@@@@QAEIABUCOpenType@@@Z
_TEXT	SEGMENT
tv70 = -12						; size = 4
$T79009 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?Add@?$CObjectVector@UCOpenType@@@@QAEIABUCOpenType@@@Z PROC ; CObjectVector<COpenType>::Add, COMDAT
; _this$ = ecx
; Line 459
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	push	edi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	push	32					; 00000020H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T79009[ebp], eax
	cmp	DWORD PTR $T79009[ebp], 0
	je	SHORT $LN3@Add@4
	mov	esi, DWORD PTR _item$[ebp]
	mov	ecx, 8
	mov	edi, DWORD PTR $T79009[ebp]
	rep movsd
	mov	eax, DWORD PTR $T79009[ebp]
	mov	DWORD PTR tv70[ebp], eax
	jmp	SHORT $LN4@Add@4
$LN3@Add@4:
	mov	DWORD PTR tv70[ebp], 0
$LN4@Add@4:
	mov	ecx, DWORD PTR tv70[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
	pop	edi
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CObjectVector@UCOpenType@@@@QAEIABUCOpenType@@@Z ENDP ; CObjectVector<COpenType>::Add
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@UCOpenType@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@UCOpenType@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@UCOpenType@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@UCOpenType@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@UCOpenType@@@@QAE@XZ
_TEXT	SEGMENT
$T79014 = -24						; size = 4
_i$76089 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@UCOpenType@@@@QAE@XZ PROC		; CObjectVector<COpenType>::~CObjectVector<COpenType>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@UCOpenType@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-24], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$76089[ebp], eax
$LN2@CObjectVec@3:
	cmp	DWORD PTR _i$76089[ebp], 0
	je	SHORT $LN3@CObjectVec@3
; Line 489
	mov	eax, DWORD PTR _i$76089[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$76089[ebp], eax
	mov	ecx, DWORD PTR _i$76089[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T79014[ebp], edx
	mov	eax, DWORD PTR $T79014[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	jmp	SHORT $LN2@CObjectVec@3
$LN3@CObjectVec@3:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@UCOpenType@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@UCOpenType@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@UCOpenType@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@UCOpenType@@@@QAE@XZ ENDP		; CObjectVector<COpenType>::~CObjectVector<COpenType>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Clear@?$CObjectVector@UCOpenType@@@@QAEXXZ
_TEXT	SEGMENT
$T79024 = -12						; size = 4
_i$76097 = -8						; size = 4
_this$ = -4						; size = 4
?Clear@?$CObjectVector@UCOpenType@@@@QAEXXZ PROC	; CObjectVector<COpenType>::Clear, COMDAT
; _this$ = ecx
; Line 499
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 500
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$76097[ebp], eax
$LN2@Clear@3:
	cmp	DWORD PTR _i$76097[ebp], 0
	je	SHORT $LN1@Clear@3
; Line 501
	mov	eax, DWORD PTR _i$76097[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$76097[ebp], eax
	mov	ecx, DWORD PTR _i$76097[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T79024[ebp], edx
	mov	eax, DWORD PTR $T79024[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	jmp	SHORT $LN2@Clear@3
$LN1@Clear@3:
; Line 502
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CRecordVector@PAX@@QAEXXZ	; CRecordVector<void *>::Clear
; Line 503
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CObjectVector@UCOpenType@@@@QAEXXZ ENDP	; CObjectVector<COpenType>::Clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIInArchiveGetStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UIInArchiveGetStream@@@@QAE@XZ PROC	; CMyComPtr<IInArchiveGetStream>::CMyComPtr<IInArchiveGetStream>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UIInArchiveGetStream@@@@QAE@XZ ENDP	; CMyComPtr<IInArchiveGetStream>::CMyComPtr<IInArchiveGetStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIInArchiveGetStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIInArchiveGetStream@@@@QAE@XZ PROC	; CMyComPtr<IInArchiveGetStream>::~CMyComPtr<IInArchiveGetStream>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@23
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@23:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIInArchiveGetStream@@@@QAE@XZ ENDP	; CMyComPtr<IInArchiveGetStream>::~CMyComPtr<IInArchiveGetStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UIInArchiveGetStream@@@@QAEPAPAUIInArchiveGetStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UIInArchiveGetStream@@@@QAEPAPAUIInArchiveGetStream@@XZ PROC ; CMyComPtr<IInArchiveGetStream>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UIInArchiveGetStream@@@@QAEPAPAUIInArchiveGetStream@@XZ ENDP ; CMyComPtr<IInArchiveGetStream>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UIInArchiveGetStream@@@@QBEPAUIInArchiveGetStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UIInArchiveGetStream@@@@QBEPAUIInArchiveGetStream@@XZ PROC ; CMyComPtr<IInArchiveGetStream>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UIInArchiveGetStream@@@@QBEPAUIInArchiveGetStream@@XZ ENDP ; CMyComPtr<IInArchiveGetStream>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??7?$CMyComPtr@UIInArchiveGetStream@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??7?$CMyComPtr@UIInArchiveGetStream@@@@QBE_NXZ PROC	; CMyComPtr<IInArchiveGetStream>::operator!, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
??7?$CMyComPtr@UIInArchiveGetStream@@@@QBE_NXZ ENDP	; CMyComPtr<IInArchiveGetStream>::operator!
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIArchiveOpenSetSubArchiveName@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UIArchiveOpenSetSubArchiveName@@@@QAE@XZ PROC ; CMyComPtr<IArchiveOpenSetSubArchiveName>::CMyComPtr<IArchiveOpenSetSubArchiveName>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UIArchiveOpenSetSubArchiveName@@@@QAE@XZ ENDP ; CMyComPtr<IArchiveOpenSetSubArchiveName>::CMyComPtr<IArchiveOpenSetSubArchiveName>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIArchiveOpenSetSubArchiveName@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIArchiveOpenSetSubArchiveName@@@@QAE@XZ PROC ; CMyComPtr<IArchiveOpenSetSubArchiveName>::~CMyComPtr<IArchiveOpenSetSubArchiveName>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@24
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@24:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIArchiveOpenSetSubArchiveName@@@@QAE@XZ ENDP ; CMyComPtr<IArchiveOpenSetSubArchiveName>::~CMyComPtr<IArchiveOpenSetSubArchiveName>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UIArchiveOpenSetSubArchiveName@@@@QBEPAUIArchiveOpenSetSubArchiveName@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UIArchiveOpenSetSubArchiveName@@@@QBEPAUIArchiveOpenSetSubArchiveName@@XZ PROC ; CMyComPtr<IArchiveOpenSetSubArchiveName>::operator IArchiveOpenSetSubArchiveName *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UIArchiveOpenSetSubArchiveName@@@@QBEPAUIArchiveOpenSetSubArchiveName@@XZ ENDP ; CMyComPtr<IArchiveOpenSetSubArchiveName>::operator IArchiveOpenSetSubArchiveName *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UIArchiveOpenSetSubArchiveName@@@@QAEPAPAUIArchiveOpenSetSubArchiveName@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UIArchiveOpenSetSubArchiveName@@@@QAEPAPAUIArchiveOpenSetSubArchiveName@@XZ PROC ; CMyComPtr<IArchiveOpenSetSubArchiveName>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UIArchiveOpenSetSubArchiveName@@@@QAEPAPAUIArchiveOpenSetSubArchiveName@@XZ ENDP ; CMyComPtr<IArchiveOpenSetSubArchiveName>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UIArchiveOpenSetSubArchiveName@@@@QBEPAUIArchiveOpenSetSubArchiveName@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UIArchiveOpenSetSubArchiveName@@@@QBEPAUIArchiveOpenSetSubArchiveName@@XZ PROC ; CMyComPtr<IArchiveOpenSetSubArchiveName>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UIArchiveOpenSetSubArchiveName@@@@QBEPAUIArchiveOpenSetSubArchiveName@@XZ ENDP ; CMyComPtr<IArchiveOpenSetSubArchiveName>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??_GUString@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GUString@@QAEPAXI@Z PROC				; UString::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@11
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@11:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GUString@@QAEPAXI@Z ENDP				; UString::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0CArcErrorInfo@@QAE@ABU0@@Z			; CArcErrorInfo::CArcErrorInfo
PUBLIC	??0?$CMyComPtr@UIArchiveGetRootProps@@@@QAE@ABV0@@Z ; CMyComPtr<IArchiveGetRootProps>::CMyComPtr<IArchiveGetRootProps>
PUBLIC	??0?$CMyComPtr@UIArchiveGetRawProps@@@@QAE@ABV0@@Z ; CMyComPtr<IArchiveGetRawProps>::CMyComPtr<IArchiveGetRawProps>
PUBLIC	??0?$CMyComPtr@UIInStream@@@@QAE@ABV0@@Z	; CMyComPtr<IInStream>::CMyComPtr<IInStream>
PUBLIC	??0?$CMyComPtr@UIInArchive@@@@QAE@ABV0@@Z	; CMyComPtr<IInArchive>::CMyComPtr<IInArchive>
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0CArc@@QAE@ABV0@@Z DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$??0CArc@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0CArc@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CArc@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CArc@@QAE@ABV0@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CArc@@QAE@ABV0@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CArc@@QAE@ABV0@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0CArc@@QAE@ABV0@@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0CArc@@QAE@ABV0@@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0CArc@@QAE@ABV0@@Z$6
	DD	06H
	DD	FLAT:__unwindfunclet$??0CArc@@QAE@ABV0@@Z$7
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CArc@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0CArc@@QAE@ABV0@@Z PROC				; CArc::CArc, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CArc@@QAE@ABV0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CMyComPtr@UIInArchive@@@@QAE@ABV0@@Z ; CMyComPtr<IInArchive>::CMyComPtr<IInArchive>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 4
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$CMyComPtr@UIInStream@@@@QAE@ABV0@@Z ; CMyComPtr<IInStream>::CMyComPtr<IInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 8
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$CMyComPtr@UIArchiveGetRawProps@@@@QAE@ABV0@@Z ; CMyComPtr<IArchiveGetRawProps>::CMyComPtr<IArchiveGetRawProps>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0?$CMyComPtr@UIArchiveGetRootProps@@@@QAE@ABV0@@Z ; CMyComPtr<IArchiveGetRootProps>::CMyComPtr<IArchiveGetRootProps>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0CArcErrorInfo@@QAE@ABU0@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 64					; 00000040H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??0CArcErrorInfo@@QAE@ABU0@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 112				; 00000070H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 124				; 0000007cH
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 124				; 0000007cH
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 136				; 00000088H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 136				; 00000088H
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+148]
	mov	DWORD PTR [eax+148], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+152]
	mov	DWORD PTR [eax+152], edx
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	edx, DWORD PTR [eax+160]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+156], ecx
	mov	DWORD PTR [eax+160], edx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx+164]
	mov	BYTE PTR [ecx+164], al
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+168]
	mov	DWORD PTR [ecx+168], eax
	mov	edx, DWORD PTR [edx+172]
	mov	DWORD PTR [ecx+172], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+176]
	mov	DWORD PTR [eax+176], edx
	mov	ecx, DWORD PTR [ecx+180]
	mov	DWORD PTR [eax+180], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cl, BYTE PTR [eax+184]
	mov	BYTE PTR [edx+184], cl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+192]
	mov	DWORD PTR [edx+192], ecx
	mov	eax, DWORD PTR [eax+196]
	mov	DWORD PTR [edx+196], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+200]
	mov	DWORD PTR [ecx+200], eax
	mov	edx, DWORD PTR [edx+204]
	mov	DWORD PTR [ecx+204], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+208]
	mov	DWORD PTR [eax+208], edx
	mov	ecx, DWORD PTR [ecx+212]
	mov	DWORD PTR [eax+212], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cl, BYTE PTR [eax+216]
	mov	BYTE PTR [edx+216], cl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cl, BYTE PTR [eax+217]
	mov	BYTE PTR [edx+217], cl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cl, BYTE PTR [eax+218]
	mov	BYTE PTR [edx+218], cl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cl, BYTE PTR [eax+219]
	mov	BYTE PTR [edx+219], cl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cl, BYTE PTR [eax+220]
	mov	BYTE PTR [edx+220], cl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cl, BYTE PTR [eax+221]
	mov	BYTE PTR [edx+221], cl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cl, BYTE PTR [eax+222]
	mov	BYTE PTR [edx+222], cl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cl, BYTE PTR [eax+223]
	mov	BYTE PTR [edx+223], cl
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CArc@@QAE@ABV0@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
__unwindfunclet$??0CArc@@QAE@ABV0@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
__unwindfunclet$??0CArc@@QAE@ABV0@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1?$CMyComPtr@UIArchiveGetRawProps@@@@QAE@XZ ; CMyComPtr<IArchiveGetRawProps>::~CMyComPtr<IArchiveGetRawProps>
__unwindfunclet$??0CArc@@QAE@ABV0@@Z$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$CMyComPtr@UIArchiveGetRootProps@@@@QAE@XZ ; CMyComPtr<IArchiveGetRootProps>::~CMyComPtr<IArchiveGetRootProps>
__unwindfunclet$??0CArc@@QAE@ABV0@@Z$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	jmp	??1CArcErrorInfo@@QAE@XZ
__unwindfunclet$??0CArc@@QAE@ABV0@@Z$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	jmp	??1CArcErrorInfo@@QAE@XZ
__unwindfunclet$??0CArc@@QAE@ABV0@@Z$6:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??0CArc@@QAE@ABV0@@Z$7:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 124				; 0000007cH
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$??0CArc@@QAE@ABV0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CArc@@QAE@ABV0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CArc@@QAE@ABV0@@Z ENDP				; CArc::CArc
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCArc@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCArc@@QAEPAXI@Z PROC				; CArc::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CArc@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@12
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@12:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCArc@@QAEPAXI@Z ENDP				; CArc::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CParseItem@NParser@NArchive@@QAE@ABU012@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CParseItem@NParser@NArchive@@QAE@ABU012@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CParseItem@NParser@NArchive@@QAE@ABU012@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CParseItem@NParser@NArchive@@QAE@ABU012@@Z$2
__ehfuncinfo$??0CParseItem@NParser@NArchive@@QAE@ABU012@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0CParseItem@NParser@NArchive@@QAE@ABU012@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CParseItem@NParser@NArchive@@QAE@ABU012@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0CParseItem@NParser@NArchive@@QAE@ABU012@@Z PROC	; NArchive::NParser::CParseItem::CParseItem, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CParseItem@NParser@NArchive@@QAE@ABU012@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], eax
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 28					; 0000001cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR [eax+44]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+40], ecx
	mov	DWORD PTR [eax+44], edx
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 48					; 00000030H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 60					; 0000003cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+72]
	mov	BYTE PTR [eax+72], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+73]
	mov	BYTE PTR [eax+73], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+74]
	mov	BYTE PTR [eax+74], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+75]
	mov	BYTE PTR [eax+75], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+76]
	mov	BYTE PTR [eax+76], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+77]
	mov	BYTE PTR [eax+77], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	mov	DWORD PTR [eax+80], edx
	mov	ecx, DWORD PTR [ecx+84]
	mov	DWORD PTR [eax+84], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	mov	DWORD PTR [edx+88], ecx
	mov	eax, DWORD PTR [eax+92]
	mov	DWORD PTR [edx+92], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	DWORD PTR [ecx+96], eax
	mov	edx, DWORD PTR [edx+100]
	mov	DWORD PTR [ecx+100], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	mov	DWORD PTR [eax+104], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+108]
	mov	BYTE PTR [eax+108], dl
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CParseItem@NParser@NArchive@@QAE@ABU012@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??0CParseItem@NParser@NArchive@@QAE@ABU012@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??0CParseItem@NParser@NArchive@@QAE@ABU012@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$??0CParseItem@NParser@NArchive@@QAE@ABU012@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CParseItem@NParser@NArchive@@QAE@ABU012@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CParseItem@NParser@NArchive@@QAE@ABU012@@Z ENDP	; NArchive::NParser::CParseItem::CParseItem
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCParseItem@NParser@NArchive@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCParseItem@NParser@NArchive@@QAEPAXI@Z PROC		; NArchive::NParser::CParseItem::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CParseItem@NParser@NArchive@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@13
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@13:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCParseItem@NParser@NArchive@@QAEPAXI@Z ENDP		; NArchive::NParser::CParseItem::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CArcErrorInfo@@QAE@ABU0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CArcErrorInfo@@QAE@ABU0@@Z$0
__ehfuncinfo$??0CArcErrorInfo@@QAE@ABU0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CArcErrorInfo@@QAE@ABU0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CArcErrorInfo@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0CArcErrorInfo@@QAE@ABU0@@Z PROC			; CArcErrorInfo::CArcErrorInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CArcErrorInfo@@QAE@ABU0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+1]
	mov	BYTE PTR [eax+1], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+2]
	mov	BYTE PTR [eax+2], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+3]
	mov	BYTE PTR [eax+3], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	ecx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], ecx
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 24					; 00000018H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 36					; 00000024H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CArcErrorInfo@@QAE@ABU0@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$??0CArcErrorInfo@@QAE@ABU0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CArcErrorInfo@@QAE@ABU0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CArcErrorInfo@@QAE@ABU0@@Z ENDP			; CArcErrorInfo::CArcErrorInfo
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CRecordVector@PAX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@PAX@@QAE@XZ PROC			; CRecordVector<void *>::CRecordVector<void *>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@PAX@@QAE@XZ ENDP			; CRecordVector<void *>::CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@PAX@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@PAX@@QBEIXZ PROC			; CRecordVector<void *>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@PAX@@QBEIXZ ENDP			; CRecordVector<void *>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ PROC		; CRecordVector<void *>::IsEmpty, COMDAT
; _this$ = ecx
; Line 49
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+4], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ ENDP		; CRecordVector<void *>::IsEmpty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@PAX@@QAE@XZ
_TEXT	SEGMENT
$T79098 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@PAX@@QAE@XZ PROC			; CRecordVector<void *>::~CRecordVector<void *>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T79098[ebp], ecx
	mov	edx, DWORD PTR $T79098[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@PAX@@QAE@XZ ENDP			; CRecordVector<void *>::~CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Clear@?$CRecordVector@PAX@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$CRecordVector@PAX@@QAEXXZ PROC			; CRecordVector<void *>::Clear, COMDAT
; _this$ = ecx
; Line 131
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CRecordVector@PAX@@QAEXXZ ENDP			; CRecordVector<void *>::Clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?DeleteBack@?$CRecordVector@PAX@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DeleteBack@?$CRecordVector@PAX@@QAEXXZ PROC		; CRecordVector<void *>::DeleteBack, COMDAT
; _this$ = ecx
; Line 133
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?DeleteBack@?$CRecordVector@PAX@@QAEXXZ ENDP		; CRecordVector<void *>::DeleteBack
_TEXT	ENDS
PUBLIC	?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ	; CRecordVector<void *>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@PAX@@QAEIQAX@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?Add@?$CRecordVector@PAX@@QAEIQAX@Z PROC		; CRecordVector<void *>::Add, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ; CRecordVector<void *>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 201
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv72[ebp]
; Line 202
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CRecordVector@PAX@@QAEIQAX@Z ENDP		; CRecordVector<void *>::Add
_TEXT	ENDS
PUBLIC	?MoveItems@?$CRecordVector@PAX@@AAEXII@Z	; CRecordVector<void *>::MoveItems
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Insert@?$CRecordVector@PAX@@QAEXIQAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
_item$ = 12						; size = 4
?Insert@?$CRecordVector@PAX@@QAEXIQAX@Z PROC		; CRecordVector<void *>::Insert, COMDAT
; _this$ = ecx
; Line 210
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 211
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ; CRecordVector<void *>::ReserveOnePosition
; Line 212
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MoveItems@?$CRecordVector@PAX@@AAEXII@Z ; CRecordVector<void *>::MoveItems
; Line 213
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 214
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 215
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Insert@?$CRecordVector@PAX@@QAEXIQAX@Z ENDP		; CRecordVector<void *>::Insert
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@PAX@@QBEABQAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@PAX@@QBEABQAXI@Z PROC		; CRecordVector<void *>::operator[], COMDAT
; _this$ = ecx
; Line 227
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@PAX@@QBEABQAXI@Z ENDP		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@PAX@@QAEAAPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@PAX@@QAEAAPAXI@Z PROC		; CRecordVector<void *>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@PAX@@QAEAAPAXI@Z ENDP		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIInStream@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lp$ = 8						; size = 4
??0?$CMyComPtr@UIInStream@@@@QAE@ABV0@@Z PROC		; CMyComPtr<IInStream>::CMyComPtr<IInStream>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 20
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _lp$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@25
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@25:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UIInStream@@@@QAE@ABV0@@Z ENDP		; CMyComPtr<IInStream>::CMyComPtr<IInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?MoveItems@?$CRecordVector@I@@AAEXII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_destIndex$ = 8						; size = 4
_srcIndex$ = 12						; size = 4
?MoveItems@?$CRecordVector@I@@AAEXII@Z PROC		; CRecordVector<unsigned int>::MoveItems, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 14
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 15
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR _srcIndex$[ebp]
	shl	ecx, 2
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _srcIndex$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _destIndex$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 16
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?MoveItems@?$CRecordVector@I@@AAEXII@Z ENDP		; CRecordVector<unsigned int>::MoveItems
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ
_TEXT	SEGMENT
$T79118 = -20						; size = 4
$T79117 = -16						; size = 4
_p$76208 = -12						; size = 4
_newCapacity$76207 = -8					; size = 4
_this$ = -4						; size = 4
?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ PROC	; CRecordVector<unsigned int>::ReserveOnePosition, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@ReserveOne
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$76207[ebp], ecx
; Line 23
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$76207[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T79117[ebp], eax
	mov	eax, DWORD PTR $T79117[ebp]
	mov	DWORD PTR _p$76208[ebp], eax
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@ReserveOne
; Line 25
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$76208[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne:
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T79118[ebp], edx
	mov	eax, DWORD PTR $T79118[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$76208[ebp]
	mov	DWORD PTR [ecx], edx
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$76207[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ReserveOne:
; Line 30
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ ENDP	; CRecordVector<unsigned int>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Free@?$CBuffer@E@@QAEXXZ
_TEXT	SEGMENT
$T79121 = -8						; size = 4
_this$ = -4						; size = 4
?Free@?$CBuffer@E@@QAEXXZ PROC				; CBuffer<unsigned char>::Free, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mybuffer.h
; Line 15
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 16
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@Free
; Line 18
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T79121[ebp], edx
	mov	eax, DWORD PTR $T79121[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 19
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
$LN1@Free:
; Line 21
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 22
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Free@?$CBuffer@E@@QAEXXZ ENDP				; CBuffer<unsigned char>::Free
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIInArchive@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lp$ = 8						; size = 4
??0?$CMyComPtr@UIInArchive@@@@QAE@ABV0@@Z PROC		; CMyComPtr<IInArchive>::CMyComPtr<IInArchive>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 20
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _lp$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@26:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UIInArchive@@@@QAE@ABV0@@Z ENDP		; CMyComPtr<IInArchive>::CMyComPtr<IInArchive>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIArchiveGetRawProps@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lp$ = 8						; size = 4
??0?$CMyComPtr@UIArchiveGetRawProps@@@@QAE@ABV0@@Z PROC	; CMyComPtr<IArchiveGetRawProps>::CMyComPtr<IArchiveGetRawProps>, COMDAT
; _this$ = ecx
; Line 20
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _lp$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@27
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@27:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UIArchiveGetRawProps@@@@QAE@ABV0@@Z ENDP	; CMyComPtr<IArchiveGetRawProps>::CMyComPtr<IArchiveGetRawProps>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIArchiveGetRootProps@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lp$ = 8						; size = 4
??0?$CMyComPtr@UIArchiveGetRootProps@@@@QAE@ABV0@@Z PROC ; CMyComPtr<IArchiveGetRootProps>::CMyComPtr<IArchiveGetRootProps>, COMDAT
; _this$ = ecx
; Line 20
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _lp$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@28
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@28:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UIArchiveGetRootProps@@@@QAE@ABV0@@Z ENDP ; CMyComPtr<IArchiveGetRootProps>::CMyComPtr<IArchiveGetRootProps>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?MoveItems@?$CRecordVector@H@@AAEXII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_destIndex$ = 8						; size = 4
_srcIndex$ = 12						; size = 4
?MoveItems@?$CRecordVector@H@@AAEXII@Z PROC		; CRecordVector<int>::MoveItems, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 14
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 15
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR _srcIndex$[ebp]
	shl	ecx, 2
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _srcIndex$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _destIndex$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 16
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?MoveItems@?$CRecordVector@H@@AAEXII@Z ENDP		; CRecordVector<int>::MoveItems
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReserveOnePosition@?$CRecordVector@H@@AAEXXZ
_TEXT	SEGMENT
$T79133 = -20						; size = 4
$T79132 = -16						; size = 4
_p$76239 = -12						; size = 4
_newCapacity$76238 = -8					; size = 4
_this$ = -4						; size = 4
?ReserveOnePosition@?$CRecordVector@H@@AAEXXZ PROC	; CRecordVector<int>::ReserveOnePosition, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@ReserveOne@2
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$76238[ebp], ecx
; Line 23
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$76238[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T79132[ebp], eax
	mov	eax, DWORD PTR $T79132[ebp]
	mov	DWORD PTR _p$76239[ebp], eax
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@ReserveOne@2
; Line 25
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$76239[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne@2:
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T79133[ebp], edx
	mov	eax, DWORD PTR $T79133[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$76239[ebp]
	mov	DWORD PTR [ecx], edx
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$76238[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ReserveOne@2:
; Line 30
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveOnePosition@?$CRecordVector@H@@AAEXXZ ENDP	; CRecordVector<int>::ReserveOnePosition
_TEXT	ENDS
PUBLIC	??A?$CRecordVector@H@@QBEABHI@Z			; CRecordVector<int>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?FindInSorted@?$CRecordVector@H@@QBEHHII@Z
_TEXT	SEGMENT
_midVal$76252 = -12					; size = 4
_mid$76251 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 4
_left$ = 12						; size = 4
_right$ = 16						; size = 4
?FindInSorted@?$CRecordVector@H@@QBEHHII@Z PROC		; CRecordVector<int>::FindInSorted, COMDAT
; _this$ = ecx
; Line 244
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
$LN5@FindInSort:
; Line 245
	mov	eax, DWORD PTR _left$[ebp]
	cmp	eax, DWORD PTR _right$[ebp]
	je	SHORT $LN4@FindInSort
; Line 247
	mov	ecx, DWORD PTR _left$[ebp]
	add	ecx, DWORD PTR _right$[ebp]
	shr	ecx, 1
	mov	DWORD PTR _mid$76251[ebp], ecx
; Line 248
	mov	edx, DWORD PTR _mid$76251[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@H@@QBEABHI@Z		; CRecordVector<int>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _midVal$76252[ebp], eax
; Line 249
	mov	ecx, DWORD PTR _item$[ebp]
	cmp	ecx, DWORD PTR _midVal$76252[ebp]
	jne	SHORT $LN3@FindInSort
; Line 250
	mov	eax, DWORD PTR _mid$76251[ebp]
	jmp	SHORT $LN6@FindInSort
$LN3@FindInSort:
; Line 251
	mov	edx, DWORD PTR _item$[ebp]
	cmp	edx, DWORD PTR _midVal$76252[ebp]
	jge	SHORT $LN2@FindInSort
; Line 252
	mov	eax, DWORD PTR _mid$76251[ebp]
	mov	DWORD PTR _right$[ebp], eax
; Line 253
	jmp	SHORT $LN1@FindInSort
$LN2@FindInSort:
; Line 254
	mov	ecx, DWORD PTR _mid$76251[ebp]
	add	ecx, 1
	mov	DWORD PTR _left$[ebp], ecx
$LN1@FindInSort:
; Line 255
	jmp	SHORT $LN5@FindInSort
$LN4@FindInSort:
; Line 256
	or	eax, -1
$LN6@FindInSort:
; Line 257
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?FindInSorted@?$CRecordVector@H@@QBEHHII@Z ENDP		; CRecordVector<int>::FindInSorted
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?MoveItems@?$CRecordVector@PAX@@AAEXII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_destIndex$ = 8						; size = 4
_srcIndex$ = 12						; size = 4
?MoveItems@?$CRecordVector@PAX@@AAEXII@Z PROC		; CRecordVector<void *>::MoveItems, COMDAT
; _this$ = ecx
; Line 14
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 15
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR _srcIndex$[ebp]
	shl	ecx, 2
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _srcIndex$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _destIndex$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 16
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?MoveItems@?$CRecordVector@PAX@@AAEXII@Z ENDP		; CRecordVector<void *>::MoveItems
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ
_TEXT	SEGMENT
$T79141 = -20						; size = 4
$T79140 = -16						; size = 4
_p$76264 = -12						; size = 4
_newCapacity$76263 = -8					; size = 4
_this$ = -4						; size = 4
?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ PROC	; CRecordVector<void *>::ReserveOnePosition, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@ReserveOne@3
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$76263[ebp], ecx
; Line 23
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$76263[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T79140[ebp], eax
	mov	eax, DWORD PTR $T79140[ebp]
	mov	DWORD PTR _p$76264[ebp], eax
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@ReserveOne@3
; Line 25
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$76264[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne@3:
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T79141[ebp], edx
	mov	eax, DWORD PTR $T79141[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$76264[ebp]
	mov	DWORD PTR [ecx], edx
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$76263[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ReserveOne@3:
; Line 30
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ENDP	; CRecordVector<void *>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@H@@QBEABHI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@H@@QBEABHI@Z PROC			; CRecordVector<int>::operator[], COMDAT
; _this$ = ecx
; Line 227
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@H@@QBEABHI@Z ENDP			; CRecordVector<int>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$QueryInterface@X@?$CMyComPtr@UIInArchive@@@@QBEJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iid$ = 8						; size = 4
_pp$ = 12						; size = 4
??$QueryInterface@X@?$CMyComPtr@UIInArchive@@@@QBEJABU_GUID@@PAPAX@Z PROC ; CMyComPtr<IInArchive>::QueryInterface<void>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 70
	mov	esi, esp
	mov	eax, DWORD PTR _pp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 71
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$QueryInterface@X@?$CMyComPtr@UIInArchive@@@@QBEJABU_GUID@@PAPAX@Z ENDP ; CMyComPtr<IInArchive>::QueryInterface<void>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$QueryInterface@UICryptoGetTextPassword@@@?$CMyComPtr@UIArchiveOpenCallback@@@@QBEJABU_GUID@@PAPAUICryptoGetTextPassword@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iid$ = 8						; size = 4
_pp$ = 12						; size = 4
??$QueryInterface@UICryptoGetTextPassword@@@?$CMyComPtr@UIArchiveOpenCallback@@@@QBEJABU_GUID@@PAPAUICryptoGetTextPassword@@@Z PROC ; CMyComPtr<IArchiveOpenCallback>::QueryInterface<ICryptoGetTextPassword>, COMDAT
; _this$ = ecx
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 70
	mov	esi, esp
	mov	eax, DWORD PTR _pp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 71
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$QueryInterface@UICryptoGetTextPassword@@@?$CMyComPtr@UIArchiveOpenCallback@@@@QBEJABU_GUID@@PAPAUICryptoGetTextPassword@@@Z ENDP ; CMyComPtr<IArchiveOpenCallback>::QueryInterface<ICryptoGetTextPassword>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$QueryInterface@UIInStream@@@?$CMyComPtr@UISequentialInStream@@@@QBEJABU_GUID@@PAPAUIInStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iid$ = 8						; size = 4
_pp$ = 12						; size = 4
??$QueryInterface@UIInStream@@@?$CMyComPtr@UISequentialInStream@@@@QBEJABU_GUID@@PAPAUIInStream@@@Z PROC ; CMyComPtr<ISequentialInStream>::QueryInterface<IInStream>, COMDAT
; _this$ = ecx
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 70
	mov	esi, esp
	mov	eax, DWORD PTR _pp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 71
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$QueryInterface@UIInStream@@@?$CMyComPtr@UISequentialInStream@@@@QBEJABU_GUID@@PAPAUIInStream@@@Z ENDP ; CMyComPtr<ISequentialInStream>::QueryInterface<IInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CCopyCoder@NCompress@@W3AGKXZ
_TEXT	SEGMENT
?Release@CCopyCoder@NCompress@@W3AGKXZ PROC		; [thunk]:NCompress::CCopyCoder::Release`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?Release@CCopyCoder@NCompress@@UAGKXZ	; NCompress::CCopyCoder::Release
?Release@CCopyCoder@NCompress@@W3AGKXZ ENDP		; [thunk]:NCompress::CCopyCoder::Release`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CHandler@NParser@NArchive@@W3AGKXZ
_TEXT	SEGMENT
?Release@CHandler@NParser@NArchive@@W3AGKXZ PROC	; [thunk]:NArchive::NParser::CHandler::Release`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?Release@CHandler@NParser@NArchive@@UAGKXZ ; NArchive::NParser::CHandler::Release
?Release@CHandler@NParser@NArchive@@W3AGKXZ ENDP	; [thunk]:NArchive::NParser::CHandler::Release`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CExtractCallback_To_OpenCallback@@W3AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CExtractCallback_To_OpenCallback@@W3AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:CExtractCallback_To_OpenCallback::QueryInterface`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?QueryInterface@CExtractCallback_To_OpenCallback@@UAGJABU_GUID@@PAPAX@Z ; CExtractCallback_To_OpenCallback::QueryInterface
?QueryInterface@CExtractCallback_To_OpenCallback@@W3AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:CExtractCallback_To_OpenCallback::QueryInterface`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CArchiveOpenCallback_Offset@@W3AGKXZ
_TEXT	SEGMENT
?AddRef@CArchiveOpenCallback_Offset@@W3AGKXZ PROC	; [thunk]:CArchiveOpenCallback_Offset::AddRef`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?AddRef@CArchiveOpenCallback_Offset@@UAGKXZ ; CArchiveOpenCallback_Offset::AddRef
?AddRef@CArchiveOpenCallback_Offset@@W3AGKXZ ENDP	; [thunk]:CArchiveOpenCallback_Offset::AddRef`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CCopyCoder@NCompress@@W7AGKXZ
_TEXT	SEGMENT
?Release@CCopyCoder@NCompress@@W7AGKXZ PROC		; [thunk]:NCompress::CCopyCoder::Release`adjustor{8}', COMDAT
	sub	DWORD PTR [esp+4], 8
	jmp	?Release@CCopyCoder@NCompress@@UAGKXZ	; NCompress::CCopyCoder::Release
?Release@CCopyCoder@NCompress@@W7AGKXZ ENDP		; [thunk]:NCompress::CCopyCoder::Release`adjustor{8}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@COpenCallbackImp@@W3AGKXZ
_TEXT	SEGMENT
?Release@COpenCallbackImp@@W3AGKXZ PROC			; [thunk]:COpenCallbackImp::Release`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?Release@COpenCallbackImp@@UAGKXZ	; COpenCallbackImp::Release
?Release@COpenCallbackImp@@W3AGKXZ ENDP			; [thunk]:COpenCallbackImp::Release`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CCopyCoder@NCompress@@WM@AGKXZ
_TEXT	SEGMENT
?Release@CCopyCoder@NCompress@@WM@AGKXZ PROC		; [thunk]:NCompress::CCopyCoder::Release`adjustor{12}', COMDAT
	sub	DWORD PTR [esp+4], 12			; 0000000cH
	jmp	?Release@CCopyCoder@NCompress@@UAGKXZ	; NCompress::CCopyCoder::Release
?Release@CCopyCoder@NCompress@@WM@AGKXZ ENDP		; [thunk]:NCompress::CCopyCoder::Release`adjustor{12}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CCopyCoder@NCompress@@W3AGKXZ
_TEXT	SEGMENT
?AddRef@CCopyCoder@NCompress@@W3AGKXZ PROC		; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?AddRef@CCopyCoder@NCompress@@UAGKXZ	; NCompress::CCopyCoder::AddRef
?AddRef@CCopyCoder@NCompress@@W3AGKXZ ENDP		; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CHandler@NParser@NArchive@@W3AGKXZ
_TEXT	SEGMENT
?AddRef@CHandler@NParser@NArchive@@W3AGKXZ PROC		; [thunk]:NArchive::NParser::CHandler::AddRef`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?AddRef@CHandler@NParser@NArchive@@UAGKXZ ; NArchive::NParser::CHandler::AddRef
?AddRef@CHandler@NParser@NArchive@@W3AGKXZ ENDP		; [thunk]:NArchive::NParser::CHandler::AddRef`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@COpenCallbackImp@@W7AGKXZ
_TEXT	SEGMENT
?Release@COpenCallbackImp@@W7AGKXZ PROC			; [thunk]:COpenCallbackImp::Release`adjustor{8}', COMDAT
	sub	DWORD PTR [esp+4], 8
	jmp	?Release@COpenCallbackImp@@UAGKXZ	; COpenCallbackImp::Release
?Release@COpenCallbackImp@@W7AGKXZ ENDP			; [thunk]:COpenCallbackImp::Release`adjustor{8}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CCopyCoder@NCompress@@W7AGKXZ
_TEXT	SEGMENT
?AddRef@CCopyCoder@NCompress@@W7AGKXZ PROC		; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{8}', COMDAT
	sub	DWORD PTR [esp+4], 8
	jmp	?AddRef@CCopyCoder@NCompress@@UAGKXZ	; NCompress::CCopyCoder::AddRef
?AddRef@CCopyCoder@NCompress@@W7AGKXZ ENDP		; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{8}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CArchiveOpenCallback_Offset@@W3AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CArchiveOpenCallback_Offset@@W3AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:CArchiveOpenCallback_Offset::QueryInterface`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?QueryInterface@CArchiveOpenCallback_Offset@@UAGJABU_GUID@@PAPAX@Z ; CArchiveOpenCallback_Offset::QueryInterface
?QueryInterface@CArchiveOpenCallback_Offset@@W3AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:CArchiveOpenCallback_Offset::QueryInterface`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@COpenCallbackImp@@WM@AGKXZ
_TEXT	SEGMENT
?Release@COpenCallbackImp@@WM@AGKXZ PROC		; [thunk]:COpenCallbackImp::Release`adjustor{12}', COMDAT
	sub	DWORD PTR [esp+4], 12			; 0000000cH
	jmp	?Release@COpenCallbackImp@@UAGKXZ	; COpenCallbackImp::Release
?Release@COpenCallbackImp@@WM@AGKXZ ENDP		; [thunk]:COpenCallbackImp::Release`adjustor{12}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@COpenCallbackImp@@W3AGKXZ
_TEXT	SEGMENT
?AddRef@COpenCallbackImp@@W3AGKXZ PROC			; [thunk]:COpenCallbackImp::AddRef`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?AddRef@COpenCallbackImp@@UAGKXZ	; COpenCallbackImp::AddRef
?AddRef@COpenCallbackImp@@W3AGKXZ ENDP			; [thunk]:COpenCallbackImp::AddRef`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::CCopyCoder::QueryInterface
?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CHandler@NParser@NArchive@@W3AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CHandler@NParser@NArchive@@W3AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:NArchive::NParser::CHandler::QueryInterface`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?QueryInterface@CHandler@NParser@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::NParser::CHandler::QueryInterface
?QueryInterface@CHandler@NParser@NArchive@@W3AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:NArchive::NParser::CHandler::QueryInterface`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CCopyCoder@NCompress@@WM@AGKXZ
_TEXT	SEGMENT
?AddRef@CCopyCoder@NCompress@@WM@AGKXZ PROC		; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{12}', COMDAT
	sub	DWORD PTR [esp+4], 12			; 0000000cH
	jmp	?AddRef@CCopyCoder@NCompress@@UAGKXZ	; NCompress::CCopyCoder::AddRef
?AddRef@CCopyCoder@NCompress@@WM@AGKXZ ENDP		; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{12}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@COpenCallbackImp@@W7AGKXZ
_TEXT	SEGMENT
?AddRef@COpenCallbackImp@@W7AGKXZ PROC			; [thunk]:COpenCallbackImp::AddRef`adjustor{8}', COMDAT
	sub	DWORD PTR [esp+4], 8
	jmp	?AddRef@COpenCallbackImp@@UAGKXZ	; COpenCallbackImp::AddRef
?AddRef@COpenCallbackImp@@W7AGKXZ ENDP			; [thunk]:COpenCallbackImp::AddRef`adjustor{8}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CExtractCallback_To_OpenCallback@@W3AGKXZ
_TEXT	SEGMENT
?Release@CExtractCallback_To_OpenCallback@@W3AGKXZ PROC	; [thunk]:CExtractCallback_To_OpenCallback::Release`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?Release@CExtractCallback_To_OpenCallback@@UAGKXZ ; CExtractCallback_To_OpenCallback::Release
?Release@CExtractCallback_To_OpenCallback@@W3AGKXZ ENDP	; [thunk]:CExtractCallback_To_OpenCallback::Release`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{8}', COMDAT
	sub	DWORD PTR [esp+4], 8
	jmp	?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::CCopyCoder::QueryInterface
?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{8}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@COpenCallbackImp@@W3AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@COpenCallbackImp@@W3AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:COpenCallbackImp::QueryInterface`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?QueryInterface@COpenCallbackImp@@UAGJABU_GUID@@PAPAX@Z ; COpenCallbackImp::QueryInterface
?QueryInterface@COpenCallbackImp@@W3AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:COpenCallbackImp::QueryInterface`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@COpenCallbackImp@@WM@AGKXZ
_TEXT	SEGMENT
?AddRef@COpenCallbackImp@@WM@AGKXZ PROC			; [thunk]:COpenCallbackImp::AddRef`adjustor{12}', COMDAT
	sub	DWORD PTR [esp+4], 12			; 0000000cH
	jmp	?AddRef@COpenCallbackImp@@UAGKXZ	; COpenCallbackImp::AddRef
?AddRef@COpenCallbackImp@@WM@AGKXZ ENDP			; [thunk]:COpenCallbackImp::AddRef`adjustor{12}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{12}', COMDAT
	sub	DWORD PTR [esp+4], 12			; 0000000cH
	jmp	?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::CCopyCoder::QueryInterface
?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{12}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@COpenCallbackImp@@W7AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@COpenCallbackImp@@W7AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:COpenCallbackImp::QueryInterface`adjustor{8}', COMDAT
	sub	DWORD PTR [esp+4], 8
	jmp	?QueryInterface@COpenCallbackImp@@UAGJABU_GUID@@PAPAX@Z ; COpenCallbackImp::QueryInterface
?QueryInterface@COpenCallbackImp@@W7AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:COpenCallbackImp::QueryInterface`adjustor{8}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CArchiveOpenCallback_Offset@@W3AGKXZ
_TEXT	SEGMENT
?Release@CArchiveOpenCallback_Offset@@W3AGKXZ PROC	; [thunk]:CArchiveOpenCallback_Offset::Release`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?Release@CArchiveOpenCallback_Offset@@UAGKXZ ; CArchiveOpenCallback_Offset::Release
?Release@CArchiveOpenCallback_Offset@@W3AGKXZ ENDP	; [thunk]:CArchiveOpenCallback_Offset::Release`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CExtractCallback_To_OpenCallback@@W3AGKXZ
_TEXT	SEGMENT
?AddRef@CExtractCallback_To_OpenCallback@@W3AGKXZ PROC	; [thunk]:CExtractCallback_To_OpenCallback::AddRef`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?AddRef@CExtractCallback_To_OpenCallback@@UAGKXZ ; CExtractCallback_To_OpenCallback::AddRef
?AddRef@CExtractCallback_To_OpenCallback@@W3AGKXZ ENDP	; [thunk]:CExtractCallback_To_OpenCallback::AddRef`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@COpenCallbackImp@@WM@AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@COpenCallbackImp@@WM@AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:COpenCallbackImp::QueryInterface`adjustor{12}', COMDAT
	sub	DWORD PTR [esp+4], 12			; 0000000cH
	jmp	?QueryInterface@COpenCallbackImp@@UAGJABU_GUID@@PAPAX@Z ; COpenCallbackImp::QueryInterface
?QueryInterface@COpenCallbackImp@@WM@AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:COpenCallbackImp::QueryInterface`adjustor{12}'
_TEXT	ENDS
END
