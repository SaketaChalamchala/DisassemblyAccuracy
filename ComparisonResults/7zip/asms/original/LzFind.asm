; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\C\LzFind.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_MatchFinder_GetPointerToCurrentPos@4
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\c\lzfind.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_p$ = 8							; size = 4
_MatchFinder_GetPointerToCurrentPos@4 PROC
; Line 47
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [eax]
	pop	ebp
	ret	4
_MatchFinder_GetPointerToCurrentPos@4 ENDP
_TEXT	ENDS
PUBLIC	_MatchFinder_GetNumAvailableBytes@4
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = 8							; size = 4
_MatchFinder_GetNumAvailableBytes@4 PROC
; Line 49
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [eax+12]
	sub	eax, DWORD PTR [ecx+4]
	pop	ebp
	ret	4
_MatchFinder_GetNumAvailableBytes@4 ENDP
_TEXT	ENDS
PUBLIC	_MatchFinder_ReduceOffsets@8
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = 8							; size = 4
_subValue$ = 12						; size = 4
_MatchFinder_ReduceOffsets@8 PROC
; Line 52
	push	ebp
	mov	ebp, esp
; Line 53
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, DWORD PTR _subValue$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 54
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR _subValue$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 55
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, DWORD PTR _subValue$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+12], ecx
; Line 56
	pop	ebp
	ret	8
_MatchFinder_ReduceOffsets@8 ENDP
_TEXT	ENDS
PUBLIC	_MatchFinder_MoveBlock@4
EXTRN	__imp__memmove:PROC
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = 8							; size = 4
_MatchFinder_MoveBlock@4 PROC
; Line 97
	push	ebp
	mov	ebp, esp
	push	esi
; Line 100
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _p$[ebp]
	add	edx, DWORD PTR [eax+64]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [ecx]
	sub	eax, DWORD PTR [edx+64]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	push	edx
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 101
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	edx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR [edx+64]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 102
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
_MatchFinder_MoveBlock@4 ENDP
_TEXT	ENDS
PUBLIC	_MatchFinder_NeedMove@4
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = 8							; size = 4
_MatchFinder_NeedMove@4 PROC
; Line 105
	push	ebp
	mov	ebp, esp
; Line 106
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+31]
	test	ecx, ecx
	je	SHORT $LN1@MatchFinde
; Line 107
	xor	eax, eax
	jmp	SHORT $LN2@MatchFinde
$LN1@MatchFinde:
; Line 109
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+52]
	mov	ecx, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR [ecx+60]
	mov	edx, DWORD PTR _p$[ebp]
	sub	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [ecx+68], eax
	sbb	eax, eax
	add	eax, 1
$LN2@MatchFinde:
; Line 110
	pop	ebp
	ret	4
_MatchFinder_NeedMove@4 ENDP
_TEXT	ENDS
PUBLIC	_MatchFinder_ReadIfRequired@4
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = 8							; size = 4
_MatchFinder_ReadIfRequired@4 PROC
; Line 113
	push	ebp
	mov	ebp, esp
; Line 114
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+28]
	test	ecx, ecx
	je	SHORT $LN2@MatchFinde@2
; Line 115
	jmp	SHORT $LN3@MatchFinde@2
$LN2@MatchFinde@2:
; Line 116
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [edx+68], ecx
	jb	SHORT $LN3@MatchFinde@2
; Line 117
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_MatchFinder_ReadBlock@4
$LN3@MatchFinde@2:
; Line 118
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
_MatchFinder_ReadIfRequired@4 ENDP
_TEXT	ENDS
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_size$2391 = -16					; size = 4
_dest$2390 = -8						; size = 4
_curSize$2383 = -4					; size = 4
_p$ = 8							; size = 4
_MatchFinder_ReadBlock@4 PROC
; Line 59
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 60
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+28]
	test	ecx, ecx
	jne	SHORT $LN10@MatchFinde@3
	mov	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [edx+92], 0
	je	SHORT $LN11@MatchFinde@3
$LN10@MatchFinde@3:
; Line 61
	jmp	$LN12@MatchFinde@3
$LN11@MatchFinde@3:
; Line 63
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+31]
	test	ecx, ecx
	je	SHORT $LN6@MatchFinde@3
; Line 65
	mov	edx, DWORD PTR _p$[ebp]
	or	eax, -1
	sub	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _curSize$2383[ebp], eax
; Line 66
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _curSize$2383[ebp]
	cmp	edx, DWORD PTR [ecx+76]
	jbe	SHORT $LN8@MatchFinde@3
; Line 67
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	DWORD PTR _curSize$2383[ebp], ecx
$LN8@MatchFinde@3:
; Line 68
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+76]
	sub	eax, DWORD PTR _curSize$2383[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+76], eax
; Line 69
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+12]
	add	eax, DWORD PTR _curSize$2383[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 70
	mov	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [edx+76], 0
	jne	SHORT $LN7@MatchFinde@3
; Line 71
	mov	eax, DWORD PTR _p$[ebp]
	mov	BYTE PTR [eax+28], 1
$LN7@MatchFinde@3:
; Line 72
	jmp	$LN12@MatchFinde@3
$LN6@MatchFinde@3:
; Line 77
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	DWORD PTR _dest$2390[ebp], eax
; Line 78
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+52]
	mov	ecx, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR [ecx+60]
	sub	eax, DWORD PTR _dest$2390[ebp]
	mov	DWORD PTR _size$2391[ebp], eax
; Line 79
	jne	SHORT $LN4@MatchFinde@3
; Line 80
	jmp	SHORT $LN12@MatchFinde@3
$LN4@MatchFinde@3:
; Line 82
	mov	esi, esp
	lea	edx, DWORD PTR _size$2391[ebp]
	push	edx
	mov	eax, DWORD PTR _dest$2390[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR [ecx]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+92], eax
; Line 83
	mov	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [edx+92], 0
	je	SHORT $LN3@MatchFinde@3
; Line 84
	jmp	SHORT $LN12@MatchFinde@3
$LN3@MatchFinde@3:
; Line 85
	cmp	DWORD PTR _size$2391[ebp], 0
	jne	SHORT $LN2@MatchFinde@3
; Line 87
	mov	eax, DWORD PTR _p$[ebp]
	mov	BYTE PTR [eax+28], 1
; Line 88
	jmp	SHORT $LN12@MatchFinde@3
$LN2@MatchFinde@3:
; Line 90
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, DWORD PTR _size$2391[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+12], edx
; Line 91
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	eax, DWORD PTR [ecx+68]
	jbe	SHORT $LN1@MatchFinde@3
; Line 92
	jmp	SHORT $LN12@MatchFinde@3
$LN1@MatchFinde@3:
; Line 93
	jmp	$LN6@MatchFinde@3
$LN12@MatchFinde@3:
; Line 94
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@MatchFinde@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN16@MatchFinde@3:
	DD	1
	DD	$LN15@MatchFinde@3
$LN15@MatchFinde@3:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN14@MatchFinde@3
$LN14@MatchFinde@3:
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
_MatchFinder_ReadBlock@4 ENDP
_TEXT	ENDS
PUBLIC	_MatchFinder_Construct@4
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_j$2430 = -12						; size = 4
_r$2429 = -8						; size = 4
_i$ = -4						; size = 4
_p$ = 8							; size = 4
_MatchFinder_Construct@4 PROC
; Line 138
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 140
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+52], 0
; Line 141
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx+31], 0
; Line 142
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+36], 0
; Line 143
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_MatchFinder_SetDefaultSettings@4
; Line 145
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@MatchFinde@4
$LN5@MatchFinde@4:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN6@MatchFinde@4:
	cmp	DWORD PTR _i$[ebp], 256			; 00000100H
	jae	SHORT $LN7@MatchFinde@4
; Line 147
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _r$2429[ebp], edx
; Line 149
	mov	DWORD PTR _j$2430[ebp], 0
	jmp	SHORT $LN3@MatchFinde@4
$LN2@MatchFinde@4:
	mov	eax, DWORD PTR _j$2430[ebp]
	add	eax, 1
	mov	DWORD PTR _j$2430[ebp], eax
$LN3@MatchFinde@4:
	cmp	DWORD PTR _j$2430[ebp], 8
	jae	SHORT $LN1@MatchFinde@4
; Line 150
	mov	ecx, DWORD PTR _r$2429[ebp]
	shr	ecx, 1
	mov	edx, DWORD PTR _r$2429[ebp]
	and	edx, 1
	sub	edx, 1
	not	edx
	and	edx, -306674912				; edb88320H
	xor	ecx, edx
	mov	DWORD PTR _r$2429[ebp], ecx
	jmp	SHORT $LN2@MatchFinde@4
$LN1@MatchFinde@4:
; Line 151
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _r$2429[ebp]
	mov	DWORD PTR [ecx+eax*4+96], edx
; Line 152
	jmp	SHORT $LN5@MatchFinde@4
$LN7@MatchFinde@4:
; Line 153
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_MatchFinder_Construct@4 ENDP
; Function compile flags: /Odtp /RTCsu
_p$ = 8						; size = 4
_MatchFinder_SetDefaultSettings@4 PROC
; Line 128
	push	ebp
	mov	ebp, esp
; Line 129
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+48], 32			; 00000020H
; Line 130
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx+29], 1
; Line 131
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+72], 4
; Line 132
	mov	eax, DWORD PTR _p$[ebp]
	mov	BYTE PTR [eax+30], 0
; Line 133
	pop	ebp
	ret	4
_MatchFinder_SetDefaultSettings@4 ENDP
_TEXT	ENDS
PUBLIC	_MatchFinder_Free@8
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = 8							; size = 4
_alloc$ = 12						; size = 4
_MatchFinder_Free@8 PROC
; Line 162
	push	ebp
	mov	ebp, esp
; Line 163
	mov	eax, DWORD PTR _alloc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_MatchFinder_FreeThisClassMemory@8
; Line 164
	mov	edx, DWORD PTR _alloc$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_LzInWindow_Free@8
; Line 165
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_MatchFinder_Free@8 ENDP
; Function compile flags: /Odtp /RTCsu
_p$ = 8						; size = 4
_alloc$ = 12						; size = 4
_LzInWindow_Free@8 PROC
; Line 20
	push	ebp
	mov	ebp, esp
	push	esi
; Line 21
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+31]
	test	ecx, ecx
	jne	SHORT $LN2@LzInWindow
; Line 23
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+52]
	push	eax
	mov	ecx, DWORD PTR _alloc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _alloc$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 24
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+52], 0
$LN2@LzInWindow:
; Line 26
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_LzInWindow_Free@8 ENDP
; Function compile flags: /Odtp /RTCsu
_p$ = 8						; size = 4
_alloc$ = 12						; size = 4
_MatchFinder_FreeThisClassMemory@8 PROC
; Line 156
	push	ebp
	mov	ebp, esp
	push	esi
; Line 157
	mov	esi, esp
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	mov	edx, DWORD PTR _alloc$[ebp]
	push	edx
	mov	eax, DWORD PTR _alloc$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 158
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+36], 0
; Line 159
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_MatchFinder_FreeThisClassMemory@8 ENDP
_TEXT	ENDS
PUBLIC	_MatchFinder_Create@24
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_numSons$2492 = -20					; size = 4
_newSize$2491 = -16					; size = 4
_hs$2482 = -12						; size = 4
_newCyclicBufferSize$2481 = -8				; size = 4
_sizeReserv$ = -4					; size = 4
_p$ = 8							; size = 4
_historySize$ = 12					; size = 4
_keepAddBufferBefore$ = 16				; size = 4
_matchMaxLen$ = 20					; size = 4
_keepAddBufferAfter$ = 24				; size = 4
_alloc$ = 28						; size = 4
_MatchFinder_Create@24 PROC
; Line 178
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 181
	cmp	DWORD PTR _historySize$[ebp], -536870912 ; e0000000H
	jbe	SHORT $LN16@MatchFinde@5
; Line 183
	mov	eax, DWORD PTR _alloc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_MatchFinder_Free@8
; Line 184
	xor	eax, eax
	jmp	$LN17@MatchFinde@5
$LN16@MatchFinde@5:
; Line 187
	mov	edx, DWORD PTR _historySize$[ebp]
	shr	edx, 1
	mov	DWORD PTR _sizeReserv$[ebp], edx
; Line 188
	cmp	DWORD PTR _historySize$[ebp], -1073741824 ; c0000000H
	jb	SHORT $LN15@MatchFinde@5
	mov	eax, DWORD PTR _historySize$[ebp]
	shr	eax, 3
	mov	DWORD PTR _sizeReserv$[ebp], eax
	jmp	SHORT $LN14@MatchFinde@5
$LN15@MatchFinde@5:
; Line 189
	cmp	DWORD PTR _historySize$[ebp], -2147483648 ; 80000000H
	jb	SHORT $LN14@MatchFinde@5
	mov	ecx, DWORD PTR _historySize$[ebp]
	shr	ecx, 2
	mov	DWORD PTR _sizeReserv$[ebp], ecx
$LN14@MatchFinde@5:
; Line 191
	mov	edx, DWORD PTR _keepAddBufferBefore$[ebp]
	add	edx, DWORD PTR _matchMaxLen$[ebp]
	add	edx, DWORD PTR _keepAddBufferAfter$[ebp]
	shr	edx, 1
	mov	eax, DWORD PTR _sizeReserv$[ebp]
	lea	ecx, DWORD PTR [eax+edx+524288]
	mov	DWORD PTR _sizeReserv$[ebp], ecx
; Line 193
	mov	edx, DWORD PTR _keepAddBufferBefore$[ebp]
	mov	eax, DWORD PTR _historySize$[ebp]
	lea	ecx, DWORD PTR [eax+edx+1]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+64], ecx
; Line 194
	mov	eax, DWORD PTR _matchMaxLen$[ebp]
	add	eax, DWORD PTR _keepAddBufferAfter$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+68], eax
; Line 198
	mov	edx, DWORD PTR _alloc$[ebp]
	push	edx
	mov	eax, DWORD PTR _sizeReserv$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_LzInWindow_Create@12
	test	eax, eax
	je	$LN12@MatchFinde@5
; Line 200
	mov	edx, DWORD PTR _historySize$[ebp]
	add	edx, 1
	mov	DWORD PTR _newCyclicBufferSize$2481[ebp], edx
; Line 202
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _matchMaxLen$[ebp]
	mov	DWORD PTR [eax+32], ecx
; Line 204
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+84], 0
; Line 205
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+72], 2
	jne	SHORT $LN11@MatchFinde@5
; Line 206
	mov	DWORD PTR _hs$2482[ebp], 65535		; 0000ffffH
; Line 207
	jmp	SHORT $LN10@MatchFinde@5
$LN11@MatchFinde@5:
; Line 209
	mov	ecx, DWORD PTR _historySize$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _hs$2482[ebp], ecx
; Line 210
	mov	edx, DWORD PTR _hs$2482[ebp]
	shr	edx, 1
	or	edx, DWORD PTR _hs$2482[ebp]
	mov	DWORD PTR _hs$2482[ebp], edx
; Line 211
	mov	eax, DWORD PTR _hs$2482[ebp]
	shr	eax, 2
	or	eax, DWORD PTR _hs$2482[ebp]
	mov	DWORD PTR _hs$2482[ebp], eax
; Line 212
	mov	ecx, DWORD PTR _hs$2482[ebp]
	shr	ecx, 4
	or	ecx, DWORD PTR _hs$2482[ebp]
	mov	DWORD PTR _hs$2482[ebp], ecx
; Line 213
	mov	edx, DWORD PTR _hs$2482[ebp]
	shr	edx, 8
	or	edx, DWORD PTR _hs$2482[ebp]
	mov	DWORD PTR _hs$2482[ebp], edx
; Line 214
	mov	eax, DWORD PTR _hs$2482[ebp]
	shr	eax, 1
	mov	DWORD PTR _hs$2482[ebp], eax
; Line 215
	mov	ecx, DWORD PTR _hs$2482[ebp]
	or	ecx, 65535				; 0000ffffH
	mov	DWORD PTR _hs$2482[ebp], ecx
; Line 216
	cmp	DWORD PTR _hs$2482[ebp], 16777216	; 01000000H
	jbe	SHORT $LN10@MatchFinde@5
; Line 218
	mov	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [edx+72], 3
	jne	SHORT $LN8@MatchFinde@5
; Line 219
	mov	DWORD PTR _hs$2482[ebp], 16777215	; 00ffffffH
; Line 220
	jmp	SHORT $LN10@MatchFinde@5
$LN8@MatchFinde@5:
; Line 221
	mov	eax, DWORD PTR _hs$2482[ebp]
	shr	eax, 1
	mov	DWORD PTR _hs$2482[ebp], eax
$LN10@MatchFinde@5:
; Line 225
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _hs$2482[ebp]
	mov	DWORD PTR [ecx+44], edx
; Line 226
	mov	eax, DWORD PTR _hs$2482[ebp]
	add	eax, 1
	mov	DWORD PTR _hs$2482[ebp], eax
; Line 227
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [ecx+72], 2
	jbe	SHORT $LN6@MatchFinde@5
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+84]
	add	eax, 1024				; 00000400H
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+84], eax
$LN6@MatchFinde@5:
; Line 228
	mov	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [edx+72], 3
	jbe	SHORT $LN5@MatchFinde@5
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	add	ecx, 65536				; 00010000H
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+84], ecx
$LN5@MatchFinde@5:
; Line 229
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+72], 4
	jbe	SHORT $LN4@MatchFinde@5
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	add	edx, 1048576				; 00100000H
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+84], edx
$LN4@MatchFinde@5:
; Line 230
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _hs$2482[ebp]
	add	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR _hs$2482[ebp], edx
; Line 236
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _historySize$[ebp]
	mov	DWORD PTR [eax+80], ecx
; Line 237
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _hs$2482[ebp]
	mov	DWORD PTR [edx+88], eax
; Line 238
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _newCyclicBufferSize$2481[ebp]
	mov	DWORD PTR [ecx+24], edx
; Line 240
	mov	eax, DWORD PTR _newCyclicBufferSize$2481[ebp]
	mov	DWORD PTR _numSons$2492[ebp], eax
; Line 241
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+29]
	test	edx, edx
	je	SHORT $LN3@MatchFinde@5
; Line 242
	mov	eax, DWORD PTR _numSons$2492[ebp]
	shl	eax, 1
	mov	DWORD PTR _numSons$2492[ebp], eax
$LN3@MatchFinde@5:
; Line 243
	mov	ecx, DWORD PTR _hs$2482[ebp]
	add	ecx, DWORD PTR _numSons$2492[ebp]
	mov	DWORD PTR _newSize$2491[ebp], ecx
; Line 245
	mov	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	SHORT $LN2@MatchFinde@5
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+1120]
	cmp	ecx, DWORD PTR _newSize$2491[ebp]
	jne	SHORT $LN2@MatchFinde@5
; Line 246
	mov	eax, 1
	jmp	SHORT $LN17@MatchFinde@5
$LN2@MatchFinde@5:
; Line 248
	mov	edx, DWORD PTR _alloc$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_MatchFinder_FreeThisClassMemory@8
; Line 249
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _newSize$2491[ebp]
	mov	DWORD PTR [ecx+1120], edx
; Line 250
	mov	eax, DWORD PTR _alloc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _newSize$2491[ebp]
	push	ecx
	call	_AllocRefs@8
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+36], eax
; Line 252
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN12@MatchFinde@5
; Line 254
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	lea	edx, DWORD PTR [ecx+edx*4]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+40], edx
; Line 255
	mov	eax, 1
	jmp	SHORT $LN17@MatchFinde@5
$LN12@MatchFinde@5:
; Line 260
	mov	ecx, DWORD PTR _alloc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_MatchFinder_Free@8
; Line 261
	xor	eax, eax
$LN17@MatchFinde@5:
; Line 262
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
_MatchFinder_Create@24 ENDP
; Function compile flags: /Odtp /RTCsu
_blockSize$ = -4					; size = 4
_p$ = 8							; size = 4
_keepSizeReserv$ = 12					; size = 4
_alloc$ = 16						; size = 4
_LzInWindow_Create@12 PROC
; Line 31
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 32
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR [edx+68]
	add	ecx, DWORD PTR _keepSizeReserv$[ebp]
	mov	DWORD PTR _blockSize$[ebp], ecx
; Line 33
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+31]
	test	ecx, ecx
	je	SHORT $LN3@LzInWindow@2
; Line 35
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _blockSize$[ebp]
	mov	DWORD PTR [edx+60], eax
; Line 36
	mov	eax, 1
	jmp	SHORT $LN4@LzInWindow@2
$LN3@LzInWindow@2:
; Line 38
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [ecx+52], 0
	je	SHORT $LN1@LzInWindow@2
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+60]
	cmp	eax, DWORD PTR _blockSize$[ebp]
	je	SHORT $LN2@LzInWindow@2
$LN1@LzInWindow@2:
; Line 40
	mov	ecx, DWORD PTR _alloc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_LzInWindow_Free@8
; Line 41
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _blockSize$[ebp]
	mov	DWORD PTR [eax+60], ecx
; Line 42
	mov	esi, esp
	mov	edx, DWORD PTR _blockSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _alloc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _alloc$[ebp]
	mov	edx, DWORD PTR [ecx]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+52], eax
$LN2@LzInWindow@2:
; Line 44
	mov	edx, DWORD PTR _p$[ebp]
	xor	eax, eax
	cmp	DWORD PTR [edx+52], 0
	setne	al
$LN4@LzInWindow@2:
; Line 45
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_LzInWindow_Create@12 ENDP
; Function compile flags: /Odtp /RTCsu
_sizeInBytes$ = -4					; size = 4
_num$ = 8						; size = 4
_alloc$ = 12						; size = 4
_AllocRefs@8 PROC
; Line 168
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 169
	mov	eax, DWORD PTR _num$[ebp]
	shl	eax, 2
	mov	DWORD PTR _sizeInBytes$[ebp], eax
; Line 170
	mov	ecx, DWORD PTR _sizeInBytes$[ebp]
	shr	ecx, 2
	cmp	ecx, DWORD PTR _num$[ebp]
	je	SHORT $LN1@AllocRefs
; Line 171
	xor	eax, eax
	jmp	SHORT $LN2@AllocRefs
$LN1@AllocRefs:
; Line 172
	mov	esi, esp
	mov	edx, DWORD PTR _sizeInBytes$[ebp]
	push	edx
	mov	eax, DWORD PTR _alloc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _alloc$[ebp]
	mov	edx, DWORD PTR [ecx]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@AllocRefs:
; Line 173
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_AllocRefs@8 ENDP
_TEXT	ENDS
PUBLIC	_MatchFinder_Init@4
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_num$ = -12						; size = 4
_hash$ = -8						; size = 4
_i$ = -4						; size = 4
_p$ = 8							; size = 4
_MatchFinder_Init@4 PROC
; Line 294
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 296
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _hash$[ebp], ecx
; Line 297
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+88]
	mov	DWORD PTR _num$[ebp], eax
; Line 298
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@MatchFinde@6
$LN2@MatchFinde@6:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@MatchFinde@6:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _num$[ebp]
	jae	SHORT $LN1@MatchFinde@6
; Line 299
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _hash$[ebp]
	mov	DWORD PTR [ecx+eax*4], 0
	jmp	SHORT $LN2@MatchFinde@6
$LN1@MatchFinde@6:
; Line 301
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+20], 0
; Line 302
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR [eax], edx
; Line 303
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+4], edx
; Line 304
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+92], 0
; Line 305
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx+28], 0
; Line 306
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_MatchFinder_ReadBlock@4
; Line 307
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_MatchFinder_SetLimits@4
; Line 308
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_MatchFinder_Init@4 ENDP
; Function compile flags: /Odtp /RTCsu
_lenLimit$2508 = -12					; size = 4
_limit2$ = -8						; size = 4
_limit$ = -4						; size = 4
_p$ = 8							; size = 4
_MatchFinder_SetLimits@4 PROC
; Line 265
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 266
	mov	eax, DWORD PTR _p$[ebp]
	or	ecx, -1
	sub	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _limit$[ebp], ecx
; Line 267
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	sub	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _limit2$[ebp], ecx
; Line 269
	mov	edx, DWORD PTR _limit2$[ebp]
	cmp	edx, DWORD PTR _limit$[ebp]
	jae	SHORT $LN6@MatchFinde@7
; Line 270
	mov	eax, DWORD PTR _limit2$[ebp]
	mov	DWORD PTR _limit$[ebp], eax
$LN6@MatchFinde@7:
; Line 271
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _limit2$[ebp], eax
; Line 273
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _limit2$[ebp]
	cmp	edx, DWORD PTR [ecx+68]
	ja	SHORT $LN5@MatchFinde@7
; Line 275
	cmp	DWORD PTR _limit2$[ebp], 0
	jbe	SHORT $LN4@MatchFinde@7
; Line 276
	mov	DWORD PTR _limit2$[ebp], 1
$LN4@MatchFinde@7:
; Line 278
	jmp	SHORT $LN3@MatchFinde@7
$LN5@MatchFinde@7:
; Line 279
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _limit2$[ebp]
	sub	ecx, DWORD PTR [eax+68]
	mov	DWORD PTR _limit2$[ebp], ecx
$LN3@MatchFinde@7:
; Line 281
	mov	edx, DWORD PTR _limit2$[ebp]
	cmp	edx, DWORD PTR _limit$[ebp]
	jae	SHORT $LN2@MatchFinde@7
; Line 282
	mov	eax, DWORD PTR _limit2$[ebp]
	mov	DWORD PTR _limit$[ebp], eax
$LN2@MatchFinde@7:
; Line 285
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _lenLimit$2508[ebp], eax
; Line 286
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _lenLimit$2508[ebp]
	cmp	edx, DWORD PTR [ecx+32]
	jbe	SHORT $LN1@MatchFinde@7
; Line 287
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _lenLimit$2508[ebp], ecx
$LN1@MatchFinde@7:
; Line 288
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _lenLimit$2508[ebp]
	mov	DWORD PTR [edx+16], eax
; Line 290
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, DWORD PTR _limit$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+8], edx
; Line 291
	mov	esp, ebp
	pop	ebp
	ret	4
_MatchFinder_SetLimits@4 ENDP
_TEXT	ENDS
PUBLIC	_MatchFinder_Normalize3@12
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_value$2534 = -8					; size = 4
_i$ = -4						; size = 4
_subValue$ = 8						; size = 4
_items$ = 12						; size = 4
_numItems$ = 16						; size = 4
_MatchFinder_Normalize3@12 PROC
; Line 316
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 318
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@MatchFinde@8
$LN4@MatchFinde@8:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN5@MatchFinde@8:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _numItems$[ebp]
	jae	SHORT $LN6@MatchFinde@8
; Line 320
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _items$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _value$2534[ebp], ecx
; Line 321
	mov	edx, DWORD PTR _value$2534[ebp]
	cmp	edx, DWORD PTR _subValue$[ebp]
	ja	SHORT $LN2@MatchFinde@8
; Line 322
	mov	DWORD PTR _value$2534[ebp], 0
; Line 323
	jmp	SHORT $LN1@MatchFinde@8
$LN2@MatchFinde@8:
; Line 324
	mov	eax, DWORD PTR _value$2534[ebp]
	sub	eax, DWORD PTR _subValue$[ebp]
	mov	DWORD PTR _value$2534[ebp], eax
$LN1@MatchFinde@8:
; Line 325
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _items$[ebp]
	mov	eax, DWORD PTR _value$2534[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
; Line 326
	jmp	SHORT $LN4@MatchFinde@8
$LN6@MatchFinde@8:
; Line 327
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_MatchFinder_Normalize3@12 ENDP
_TEXT	ENDS
PUBLIC	_GetMatchesSpec1@40
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv86 = -40						; size = 4
tv74 = -36						; size = 4
_len$2620 = -32						; size = 4
_pb$2619 = -28						; size = 4
_pair$2618 = -24					; size = 4
_delta$2615 = -20					; size = 4
_len1$ = -16						; size = 4
_len0$ = -12						; size = 4
_ptr1$ = -8						; size = 4
_ptr0$ = -4						; size = 4
_lenLimit$ = 8						; size = 4
_curMatch$ = 12						; size = 4
_pos$ = 16						; size = 4
_cur$ = 20						; size = 4
_son$ = 24						; size = 4
__cyclicBufferPos$ = 28					; size = 4
__cyclicBufferSize$ = 32				; size = 4
_cutValue$ = 36						; size = 4
_distances$ = 40					; size = 4
_maxLen$ = 44						; size = 4
_GetMatchesSpec1@40 PROC
; Line 381
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 382
	mov	eax, DWORD PTR __cyclicBufferPos$[ebp]
	shl	eax, 1
	mov	ecx, DWORD PTR _son$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4+4]
	mov	DWORD PTR _ptr0$[ebp], edx
; Line 383
	mov	eax, DWORD PTR __cyclicBufferPos$[ebp]
	shl	eax, 1
	mov	ecx, DWORD PTR _son$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _ptr1$[ebp], edx
; Line 384
	mov	DWORD PTR _len0$[ebp], 0
	mov	DWORD PTR _len1$[ebp], 0
$LN13@GetMatches:
; Line 387
	mov	eax, DWORD PTR _pos$[ebp]
	sub	eax, DWORD PTR _curMatch$[ebp]
	mov	DWORD PTR _delta$2615[ebp], eax
; Line 388
	mov	ecx, DWORD PTR _cutValue$[ebp]
	mov	edx, DWORD PTR _cutValue$[ebp]
	sub	edx, 1
	mov	DWORD PTR _cutValue$[ebp], edx
	test	ecx, ecx
	jne	SHORT $LN16@GetMatches
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN17@GetMatches
$LN16@GetMatches:
	mov	DWORD PTR tv74[ebp], 0
$LN17@GetMatches:
	cmp	DWORD PTR tv74[ebp], 0
	jne	SHORT $LN10@GetMatches
	mov	eax, DWORD PTR _delta$2615[ebp]
	cmp	eax, DWORD PTR __cyclicBufferSize$[ebp]
	jb	SHORT $LN11@GetMatches
$LN10@GetMatches:
; Line 390
	mov	ecx, DWORD PTR _ptr1$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	edx, DWORD PTR _ptr0$[ebp]
	mov	DWORD PTR [edx], 0
; Line 391
	mov	eax, DWORD PTR _distances$[ebp]
	jmp	$LN14@GetMatches
$LN11@GetMatches:
; Line 394
	mov	eax, DWORD PTR __cyclicBufferPos$[ebp]
	sub	eax, DWORD PTR _delta$2615[ebp]
	mov	ecx, DWORD PTR _delta$2615[ebp]
	cmp	DWORD PTR __cyclicBufferPos$[ebp], ecx
	sbb	edx, edx
	and	edx, DWORD PTR __cyclicBufferSize$[ebp]
	add	eax, edx
	shl	eax, 1
	mov	ecx, DWORD PTR _son$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _pair$2618[ebp], edx
; Line 395
	mov	eax, DWORD PTR _cur$[ebp]
	sub	eax, DWORD PTR _delta$2615[ebp]
	mov	DWORD PTR _pb$2619[ebp], eax
; Line 396
	mov	ecx, DWORD PTR _len0$[ebp]
	cmp	ecx, DWORD PTR _len1$[ebp]
	jae	SHORT $LN18@GetMatches
	mov	edx, DWORD PTR _len0$[ebp]
	mov	DWORD PTR tv86[ebp], edx
	jmp	SHORT $LN19@GetMatches
$LN18@GetMatches:
	mov	eax, DWORD PTR _len1$[ebp]
	mov	DWORD PTR tv86[ebp], eax
$LN19@GetMatches:
	mov	ecx, DWORD PTR tv86[ebp]
	mov	DWORD PTR _len$2620[ebp], ecx
; Line 397
	mov	edx, DWORD PTR _pb$2619[ebp]
	add	edx, DWORD PTR _len$2620[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _cur$[ebp]
	add	ecx, DWORD PTR _len$2620[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	eax, edx
	jne	$LN9@GetMatches
; Line 399
	mov	eax, DWORD PTR _len$2620[ebp]
	add	eax, 1
	mov	DWORD PTR _len$2620[ebp], eax
	mov	ecx, DWORD PTR _len$2620[ebp]
	cmp	ecx, DWORD PTR _lenLimit$[ebp]
	je	SHORT $LN8@GetMatches
	mov	edx, DWORD PTR _pb$2619[ebp]
	add	edx, DWORD PTR _len$2620[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _cur$[ebp]
	add	ecx, DWORD PTR _len$2620[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	eax, edx
	jne	SHORT $LN8@GetMatches
$LN7@GetMatches:
; Line 400
	mov	eax, DWORD PTR _len$2620[ebp]
	add	eax, 1
	mov	DWORD PTR _len$2620[ebp], eax
	mov	ecx, DWORD PTR _len$2620[ebp]
	cmp	ecx, DWORD PTR _lenLimit$[ebp]
	je	SHORT $LN8@GetMatches
; Line 401
	mov	edx, DWORD PTR _pb$2619[ebp]
	add	edx, DWORD PTR _len$2620[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _cur$[ebp]
	add	ecx, DWORD PTR _len$2620[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	eax, edx
	je	SHORT $LN5@GetMatches
; Line 402
	jmp	SHORT $LN8@GetMatches
$LN5@GetMatches:
; Line 403
	jmp	SHORT $LN7@GetMatches
$LN8@GetMatches:
	mov	eax, DWORD PTR _maxLen$[ebp]
	cmp	eax, DWORD PTR _len$2620[ebp]
	jae	SHORT $LN9@GetMatches
; Line 405
	mov	ecx, DWORD PTR _len$2620[ebp]
	mov	DWORD PTR _maxLen$[ebp], ecx
	mov	edx, DWORD PTR _distances$[ebp]
	mov	eax, DWORD PTR _maxLen$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _distances$[ebp]
	add	ecx, 4
	mov	DWORD PTR _distances$[ebp], ecx
; Line 406
	mov	edx, DWORD PTR _delta$2615[ebp]
	sub	edx, 1
	mov	eax, DWORD PTR _distances$[ebp]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR _distances$[ebp]
	add	ecx, 4
	mov	DWORD PTR _distances$[ebp], ecx
; Line 407
	mov	edx, DWORD PTR _len$2620[ebp]
	cmp	edx, DWORD PTR _lenLimit$[ebp]
	jne	SHORT $LN9@GetMatches
; Line 409
	mov	eax, DWORD PTR _ptr1$[ebp]
	mov	ecx, DWORD PTR _pair$2618[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
; Line 410
	mov	eax, DWORD PTR _ptr0$[ebp]
	mov	ecx, DWORD PTR _pair$2618[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx
; Line 411
	mov	eax, DWORD PTR _distances$[ebp]
	jmp	SHORT $LN14@GetMatches
$LN9@GetMatches:
; Line 415
	mov	eax, DWORD PTR _pb$2619[ebp]
	add	eax, DWORD PTR _len$2620[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _cur$[ebp]
	add	edx, DWORD PTR _len$2620[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	ecx, eax
	jge	SHORT $LN2@GetMatches
; Line 417
	mov	ecx, DWORD PTR _ptr1$[ebp]
	mov	edx, DWORD PTR _curMatch$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 418
	mov	eax, DWORD PTR _pair$2618[ebp]
	add	eax, 4
	mov	DWORD PTR _ptr1$[ebp], eax
; Line 419
	mov	ecx, DWORD PTR _ptr1$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _curMatch$[ebp], edx
; Line 420
	mov	eax, DWORD PTR _len$2620[ebp]
	mov	DWORD PTR _len1$[ebp], eax
; Line 422
	jmp	SHORT $LN1@GetMatches
$LN2@GetMatches:
; Line 424
	mov	ecx, DWORD PTR _ptr0$[ebp]
	mov	edx, DWORD PTR _curMatch$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 425
	mov	eax, DWORD PTR _pair$2618[ebp]
	mov	DWORD PTR _ptr0$[ebp], eax
; Line 426
	mov	ecx, DWORD PTR _ptr0$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _curMatch$[ebp], edx
; Line 427
	mov	eax, DWORD PTR _len$2620[ebp]
	mov	DWORD PTR _len0$[ebp], eax
$LN1@GetMatches:
; Line 430
	jmp	$LN13@GetMatches
$LN14@GetMatches:
; Line 431
	pop	edi
	mov	esp, ebp
	pop	ebp
	ret	40					; 00000028H
_GetMatchesSpec1@40 ENDP
_TEXT	ENDS
PUBLIC	_Bt3Zip_MatchFinder_GetMatches@8
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv144 = -24						; size = 4
_curMatch$ = -20					; size = 4
_cur$ = -16						; size = 4
_hv$ = -12						; size = 4
_lenLimit$ = -8						; size = 4
_offset$ = -4						; size = 4
_p$ = 8							; size = 4
_distances$ = 12					; size = 4
_Bt3Zip_MatchFinder_GetMatches@8 PROC
; Line 528
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 530
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _lenLimit$[ebp], ecx
	cmp	DWORD PTR _lenLimit$[ebp], 3
	jae	SHORT $LN2@Bt3Zip_Mat
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_MatchFinder_MovePos@4
	xor	eax, eax
	jmp	$LN3@Bt3Zip_Mat
$LN2@Bt3Zip_Mat:
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cur$[ebp], ecx
; Line 531
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx+2]
	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx]
	shl	edx, 8
	or	eax, edx
	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx*4+96]
	and	eax, 65535				; 0000ffffH
	mov	DWORD PTR _hv$[ebp], eax
; Line 532
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR _hv$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _curMatch$[ebp], edx
; Line 533
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _hv$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+edx*4], eax
; Line 534
	mov	DWORD PTR _offset$[ebp], 0
; Line 535
	push	2
	mov	ecx, DWORD PTR _offset$[ebp]
	mov	edx, DWORD PTR _distances$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _curMatch$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lenLimit$[ebp]
	push	edx
	call	_GetMatchesSpec1@40
	sub	eax, DWORD PTR _distances$[ebp]
	sar	eax, 2
	mov	DWORD PTR _offset$[ebp], eax
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+20], ecx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv144[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR tv144[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR tv144[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN1@Bt3Zip_Mat
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_MatchFinder_CheckLimits@4
$LN1@Bt3Zip_Mat:
	mov	eax, DWORD PTR _offset$[ebp]
$LN3@Bt3Zip_Mat:
; Line 536
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_Bt3Zip_MatchFinder_GetMatches@8 ENDP
; Function compile flags: /Odtp /RTCsu
_p$ = 8						; size = 4
_MatchFinder_CheckLimits@4 PROC
; Line 337
	push	ebp
	mov	ebp, esp
; Line 338
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+4], -1
	jne	SHORT $LN3@MatchFinde@9
; Line 339
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_MatchFinder_Normalize@4
$LN3@MatchFinde@9:
; Line 340
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+28]
	test	eax, eax
	jne	SHORT $LN2@MatchFinde@9
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [ecx+68], eax
	jne	SHORT $LN2@MatchFinde@9
; Line 341
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_MatchFinder_CheckAndMoveAndRead@4
$LN2@MatchFinde@9:
; Line 342
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [eax+20]
	cmp	edx, DWORD PTR [ecx+24]
	jne	SHORT $LN1@MatchFinde@9
; Line 343
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+20], 0
$LN1@MatchFinde@9:
; Line 344
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_MatchFinder_SetLimits@4
; Line 345
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
_MatchFinder_CheckLimits@4 ENDP
; Function compile flags: /Odtp /RTCsu
_p$ = 8						; size = 4
_MatchFinder_CheckAndMoveAndRead@4 PROC
; Line 121
	push	ebp
	mov	ebp, esp
; Line 122
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_MatchFinder_NeedMove@4
	test	eax, eax
	je	SHORT $LN1@MatchFinde@10
; Line 123
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_MatchFinder_MoveBlock@4
$LN1@MatchFinde@10:
; Line 124
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_MatchFinder_ReadBlock@4
; Line 125
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
_MatchFinder_CheckAndMoveAndRead@4 ENDP
; Function compile flags: /Odtp /RTCsu
_subValue$ = -4					; size = 4
_p$ = 8							; size = 4
_MatchFinder_Normalize@4 PROC
; Line 330
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 331
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_MatchFinder_GetSubValue@4
	mov	DWORD PTR _subValue$[ebp], eax
; Line 332
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+1120]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	mov	edx, DWORD PTR _subValue$[ebp]
	push	edx
	call	_MatchFinder_Normalize3@12
; Line 333
	mov	eax, DWORD PTR _subValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_MatchFinder_ReduceOffsets@8
; Line 334
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_MatchFinder_Normalize@4 ENDP
; Function compile flags: /Odtp /RTCsu
_p$ = 8						; size = 4
_MatchFinder_GetSubValue@4 PROC
; Line 311
	push	ebp
	mov	ebp, esp
; Line 312
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [eax+4]
	sub	eax, DWORD PTR [ecx+80]
	sub	eax, 1
	and	eax, -1024				; fffffc00H
; Line 313
	pop	ebp
	ret	4
_MatchFinder_GetSubValue@4 ENDP
; Function compile flags: /Odtp /RTCsu
tv70 = -4						; size = 4
_p$ = 8							; size = 4
_MatchFinder_MovePos@4 PROC
; Line 490
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+20], ecx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR tv70[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN2@MatchFinde@11
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_MatchFinder_CheckLimits@4
$LN2@MatchFinde@11:
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_MatchFinder_MovePos@4 ENDP
_TEXT	ENDS
PUBLIC	_Hc3Zip_MatchFinder_GetMatches@8
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv142 = -24						; size = 4
_curMatch$ = -20					; size = 4
_cur$ = -16						; size = 4
_hv$ = -12						; size = 4
_lenLimit$ = -8						; size = 4
_offset$ = -4						; size = 4
_p$ = 8							; size = 4
_distances$ = 12					; size = 4
_Hc3Zip_MatchFinder_GetMatches@8 PROC
; Line 844
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 846
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _lenLimit$[ebp], ecx
	cmp	DWORD PTR _lenLimit$[ebp], 3
	jae	SHORT $LN2@Hc3Zip_Mat
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_MatchFinder_MovePos@4
	xor	eax, eax
	jmp	$LN3@Hc3Zip_Mat
$LN2@Hc3Zip_Mat:
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cur$[ebp], ecx
; Line 847
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx+2]
	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx]
	shl	edx, 8
	or	eax, edx
	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx*4+96]
	and	eax, 65535				; 0000ffffH
	mov	DWORD PTR _hv$[ebp], eax
; Line 848
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR _hv$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _curMatch$[ebp], edx
; Line 849
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _hv$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+edx*4], eax
; Line 851
	push	2
	mov	ecx, DWORD PTR _distances$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _curMatch$[ebp]
	push	edx
	mov	eax, DWORD PTR _lenLimit$[ebp]
	push	eax
	call	_Hc_GetMatchesSpec@40
	sub	eax, DWORD PTR _distances$[ebp]
	sar	eax, 2
	mov	DWORD PTR _offset$[ebp], eax
; Line 852
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+20], edx
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	DWORD PTR tv142[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR tv142[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR tv142[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN1@Hc3Zip_Mat
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_MatchFinder_CheckLimits@4
$LN1@Hc3Zip_Mat:
	mov	eax, DWORD PTR _offset$[ebp]
$LN3@Hc3Zip_Mat:
; Line 853
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_Hc3Zip_MatchFinder_GetMatches@8 ENDP
; Function compile flags: /Odtp /RTCsu
tv69 = -16						; size = 4
_len$2580 = -12						; size = 4
_pb$2578 = -8						; size = 4
_delta$2575 = -4					; size = 4
_lenLimit$ = 8						; size = 4
_curMatch$ = 12						; size = 4
_pos$ = 16						; size = 4
_cur$ = 20						; size = 4
_son$ = 24						; size = 4
__cyclicBufferPos$ = 28					; size = 4
__cyclicBufferSize$ = 32				; size = 4
_cutValue$ = 36						; size = 4
_distances$ = 40					; size = 4
_maxLen$ = 44						; size = 4
_Hc_GetMatchesSpec@40 PROC
; Line 350
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 351
	mov	eax, DWORD PTR __cyclicBufferPos$[ebp]
	mov	ecx, DWORD PTR _son$[ebp]
	mov	edx, DWORD PTR _curMatch$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
$LN10@Hc_GetMatc:
; Line 354
	mov	eax, DWORD PTR _pos$[ebp]
	sub	eax, DWORD PTR _curMatch$[ebp]
	mov	DWORD PTR _delta$2575[ebp], eax
; Line 355
	mov	ecx, DWORD PTR _cutValue$[ebp]
	mov	edx, DWORD PTR _cutValue$[ebp]
	sub	edx, 1
	mov	DWORD PTR _cutValue$[ebp], edx
	test	ecx, ecx
	jne	SHORT $LN13@Hc_GetMatc
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN14@Hc_GetMatc
$LN13@Hc_GetMatc:
	mov	DWORD PTR tv69[ebp], 0
$LN14@Hc_GetMatc:
	cmp	DWORD PTR tv69[ebp], 0
	jne	SHORT $LN7@Hc_GetMatc
	mov	eax, DWORD PTR _delta$2575[ebp]
	cmp	eax, DWORD PTR __cyclicBufferSize$[ebp]
	jb	SHORT $LN8@Hc_GetMatc
$LN7@Hc_GetMatc:
; Line 356
	mov	eax, DWORD PTR _distances$[ebp]
	jmp	$LN11@Hc_GetMatc
$LN8@Hc_GetMatc:
; Line 358
	mov	ecx, DWORD PTR _cur$[ebp]
	sub	ecx, DWORD PTR _delta$2575[ebp]
	mov	DWORD PTR _pb$2578[ebp], ecx
; Line 359
	mov	edx, DWORD PTR __cyclicBufferPos$[ebp]
	sub	edx, DWORD PTR _delta$2575[ebp]
	mov	eax, DWORD PTR _delta$2575[ebp]
	cmp	DWORD PTR __cyclicBufferPos$[ebp], eax
	sbb	ecx, ecx
	and	ecx, DWORD PTR __cyclicBufferSize$[ebp]
	add	edx, ecx
	mov	eax, DWORD PTR _son$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _curMatch$[ebp], ecx
; Line 360
	mov	edx, DWORD PTR _pb$2578[ebp]
	add	edx, DWORD PTR _maxLen$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _cur$[ebp]
	add	ecx, DWORD PTR _maxLen$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	eax, edx
	jne	$LN6@Hc_GetMatc
	mov	eax, DWORD PTR _pb$2578[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	ecx, eax
	jne	SHORT $LN6@Hc_GetMatc
; Line 362
	mov	DWORD PTR _len$2580[ebp], 0
$LN5@Hc_GetMatc:
; Line 363
	mov	ecx, DWORD PTR _len$2580[ebp]
	add	ecx, 1
	mov	DWORD PTR _len$2580[ebp], ecx
	mov	edx, DWORD PTR _len$2580[ebp]
	cmp	edx, DWORD PTR _lenLimit$[ebp]
	je	SHORT $LN4@Hc_GetMatc
; Line 364
	mov	eax, DWORD PTR _pb$2578[ebp]
	add	eax, DWORD PTR _len$2580[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _cur$[ebp]
	add	edx, DWORD PTR _len$2580[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	ecx, eax
	je	SHORT $LN3@Hc_GetMatc
; Line 365
	jmp	SHORT $LN4@Hc_GetMatc
$LN3@Hc_GetMatc:
; Line 366
	jmp	SHORT $LN5@Hc_GetMatc
$LN4@Hc_GetMatc:
	mov	ecx, DWORD PTR _maxLen$[ebp]
	cmp	ecx, DWORD PTR _len$2580[ebp]
	jae	SHORT $LN6@Hc_GetMatc
; Line 368
	mov	edx, DWORD PTR _len$2580[ebp]
	mov	DWORD PTR _maxLen$[ebp], edx
	mov	eax, DWORD PTR _distances$[ebp]
	mov	ecx, DWORD PTR _maxLen$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _distances$[ebp]
	add	edx, 4
	mov	DWORD PTR _distances$[ebp], edx
; Line 369
	mov	eax, DWORD PTR _delta$2575[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR _distances$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _distances$[ebp]
	add	edx, 4
	mov	DWORD PTR _distances$[ebp], edx
; Line 370
	mov	eax, DWORD PTR _len$2580[ebp]
	cmp	eax, DWORD PTR _lenLimit$[ebp]
	jne	SHORT $LN6@Hc_GetMatc
; Line 371
	mov	eax, DWORD PTR _distances$[ebp]
	jmp	SHORT $LN11@Hc_GetMatc
$LN6@Hc_GetMatc:
; Line 375
	jmp	$LN10@Hc_GetMatc
$LN11@Hc_GetMatc:
; Line 376
	mov	esp, ebp
	pop	ebp
	ret	40					; 00000028H
_Hc_GetMatchesSpec@40 ENDP
_TEXT	ENDS
PUBLIC	_Bt3Zip_MatchFinder_Skip@8
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv137 = -20						; size = 4
_curMatch$2854 = -16					; size = 4
_cur$2853 = -12						; size = 4
_hv$2852 = -8						; size = 4
_lenLimit$2851 = -4					; size = 4
_p$ = 8							; size = 4
_num$ = 12						; size = 4
_Bt3Zip_MatchFinder_Skip@8 PROC
; Line 869
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
$LN5@Bt3Zip_Mat@2:
; Line 872
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _lenLimit$2851[ebp], ecx
	cmp	DWORD PTR _lenLimit$2851[ebp], 3
	jae	SHORT $LN2@Bt3Zip_Mat@2
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_MatchFinder_MovePos@4
	jmp	$LN4@Bt3Zip_Mat@2
$LN2@Bt3Zip_Mat@2:
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cur$2853[ebp], ecx
; Line 873
	mov	edx, DWORD PTR _cur$2853[ebp]
	movzx	eax, BYTE PTR [edx+2]
	mov	ecx, DWORD PTR _cur$2853[ebp]
	movzx	edx, BYTE PTR [ecx]
	shl	edx, 8
	or	eax, edx
	mov	ecx, DWORD PTR _cur$2853[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx*4+96]
	and	eax, 65535				; 0000ffffH
	mov	DWORD PTR _hv$2852[ebp], eax
; Line 874
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR _hv$2852[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _curMatch$2854[ebp], edx
; Line 875
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _hv$2852[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+edx*4], eax
; Line 876
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _curMatch$2854[ebp]
	push	ecx
	mov	edx, DWORD PTR _lenLimit$2851[ebp]
	push	edx
	call	_SkipMatchesSpec@32
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+20], ecx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv137[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR tv137[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR tv137[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN4@Bt3Zip_Mat@2
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_MatchFinder_CheckLimits@4
$LN4@Bt3Zip_Mat@2:
; Line 878
	mov	ecx, DWORD PTR _num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _num$[ebp], ecx
	jne	$LN5@Bt3Zip_Mat@2
; Line 879
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_Bt3Zip_MatchFinder_Skip@8 ENDP
; Function compile flags: /Odtp /RTCsu
tv86 = -40						; size = 4
tv74 = -36						; size = 4
_len$2661 = -32						; size = 4
_pb$2660 = -28						; size = 4
_pair$2659 = -24					; size = 4
_delta$2656 = -20					; size = 4
_len1$ = -16						; size = 4
_len0$ = -12						; size = 4
_ptr1$ = -8						; size = 4
_ptr0$ = -4						; size = 4
_lenLimit$ = 8						; size = 4
_curMatch$ = 12						; size = 4
_pos$ = 16						; size = 4
_cur$ = 20						; size = 4
_son$ = 24						; size = 4
__cyclicBufferPos$ = 28					; size = 4
__cyclicBufferSize$ = 32				; size = 4
_cutValue$ = 36						; size = 4
_SkipMatchesSpec@32 PROC
; Line 435
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 436
	mov	eax, DWORD PTR __cyclicBufferPos$[ebp]
	shl	eax, 1
	mov	ecx, DWORD PTR _son$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4+4]
	mov	DWORD PTR _ptr0$[ebp], edx
; Line 437
	mov	eax, DWORD PTR __cyclicBufferPos$[ebp]
	shl	eax, 1
	mov	ecx, DWORD PTR _son$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _ptr1$[ebp], edx
; Line 438
	mov	DWORD PTR _len0$[ebp], 0
	mov	DWORD PTR _len1$[ebp], 0
$LN11@SkipMatche:
; Line 441
	mov	eax, DWORD PTR _pos$[ebp]
	sub	eax, DWORD PTR _curMatch$[ebp]
	mov	DWORD PTR _delta$2656[ebp], eax
; Line 442
	mov	ecx, DWORD PTR _cutValue$[ebp]
	mov	edx, DWORD PTR _cutValue$[ebp]
	sub	edx, 1
	mov	DWORD PTR _cutValue$[ebp], edx
	test	ecx, ecx
	jne	SHORT $LN14@SkipMatche
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN15@SkipMatche
$LN14@SkipMatche:
	mov	DWORD PTR tv74[ebp], 0
$LN15@SkipMatche:
	cmp	DWORD PTR tv74[ebp], 0
	jne	SHORT $LN8@SkipMatche
	mov	eax, DWORD PTR _delta$2656[ebp]
	cmp	eax, DWORD PTR __cyclicBufferSize$[ebp]
	jb	SHORT $LN9@SkipMatche
$LN8@SkipMatche:
; Line 444
	mov	ecx, DWORD PTR _ptr1$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	edx, DWORD PTR _ptr0$[ebp]
	mov	DWORD PTR [edx], 0
; Line 445
	jmp	$LN12@SkipMatche
$LN9@SkipMatche:
; Line 448
	mov	eax, DWORD PTR __cyclicBufferPos$[ebp]
	sub	eax, DWORD PTR _delta$2656[ebp]
	mov	ecx, DWORD PTR _delta$2656[ebp]
	cmp	DWORD PTR __cyclicBufferPos$[ebp], ecx
	sbb	edx, edx
	and	edx, DWORD PTR __cyclicBufferSize$[ebp]
	add	eax, edx
	shl	eax, 1
	mov	ecx, DWORD PTR _son$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _pair$2659[ebp], edx
; Line 449
	mov	eax, DWORD PTR _cur$[ebp]
	sub	eax, DWORD PTR _delta$2656[ebp]
	mov	DWORD PTR _pb$2660[ebp], eax
; Line 450
	mov	ecx, DWORD PTR _len0$[ebp]
	cmp	ecx, DWORD PTR _len1$[ebp]
	jae	SHORT $LN16@SkipMatche
	mov	edx, DWORD PTR _len0$[ebp]
	mov	DWORD PTR tv86[ebp], edx
	jmp	SHORT $LN17@SkipMatche
$LN16@SkipMatche:
	mov	eax, DWORD PTR _len1$[ebp]
	mov	DWORD PTR tv86[ebp], eax
$LN17@SkipMatche:
	mov	ecx, DWORD PTR tv86[ebp]
	mov	DWORD PTR _len$2661[ebp], ecx
; Line 451
	mov	edx, DWORD PTR _pb$2660[ebp]
	add	edx, DWORD PTR _len$2661[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _cur$[ebp]
	add	ecx, DWORD PTR _len$2661[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	eax, edx
	jne	SHORT $LN7@SkipMatche
$LN6@SkipMatche:
; Line 453
	mov	eax, DWORD PTR _len$2661[ebp]
	add	eax, 1
	mov	DWORD PTR _len$2661[ebp], eax
	mov	ecx, DWORD PTR _len$2661[ebp]
	cmp	ecx, DWORD PTR _lenLimit$[ebp]
	je	SHORT $LN5@SkipMatche
; Line 454
	mov	edx, DWORD PTR _pb$2660[ebp]
	add	edx, DWORD PTR _len$2661[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _cur$[ebp]
	add	ecx, DWORD PTR _len$2661[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	eax, edx
	je	SHORT $LN4@SkipMatche
; Line 455
	jmp	SHORT $LN5@SkipMatche
$LN4@SkipMatche:
; Line 456
	jmp	SHORT $LN6@SkipMatche
$LN5@SkipMatche:
; Line 457
	mov	eax, DWORD PTR _len$2661[ebp]
	cmp	eax, DWORD PTR _lenLimit$[ebp]
	jne	SHORT $LN7@SkipMatche
; Line 459
	mov	ecx, DWORD PTR _ptr1$[ebp]
	mov	edx, DWORD PTR _pair$2659[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
; Line 460
	mov	ecx, DWORD PTR _ptr0$[ebp]
	mov	edx, DWORD PTR _pair$2659[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx], eax
; Line 461
	jmp	SHORT $LN12@SkipMatche
$LN7@SkipMatche:
; Line 465
	mov	ecx, DWORD PTR _pb$2660[ebp]
	add	ecx, DWORD PTR _len$2661[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _cur$[ebp]
	add	eax, DWORD PTR _len$2661[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	edx, ecx
	jge	SHORT $LN2@SkipMatche
; Line 467
	mov	edx, DWORD PTR _ptr1$[ebp]
	mov	eax, DWORD PTR _curMatch$[ebp]
	mov	DWORD PTR [edx], eax
; Line 468
	mov	ecx, DWORD PTR _pair$2659[ebp]
	add	ecx, 4
	mov	DWORD PTR _ptr1$[ebp], ecx
; Line 469
	mov	edx, DWORD PTR _ptr1$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _curMatch$[ebp], eax
; Line 470
	mov	ecx, DWORD PTR _len$2661[ebp]
	mov	DWORD PTR _len1$[ebp], ecx
; Line 472
	jmp	SHORT $LN1@SkipMatche
$LN2@SkipMatche:
; Line 474
	mov	edx, DWORD PTR _ptr0$[ebp]
	mov	eax, DWORD PTR _curMatch$[ebp]
	mov	DWORD PTR [edx], eax
; Line 475
	mov	ecx, DWORD PTR _pair$2659[ebp]
	mov	DWORD PTR _ptr0$[ebp], ecx
; Line 476
	mov	edx, DWORD PTR _ptr0$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _curMatch$[ebp], eax
; Line 477
	mov	ecx, DWORD PTR _len$2661[ebp]
	mov	DWORD PTR _len0$[ebp], ecx
$LN1@SkipMatche:
; Line 480
	jmp	$LN11@SkipMatche
$LN12@SkipMatche:
; Line 481
	pop	edi
	mov	esp, ebp
	pop	ebp
	ret	32					; 00000020H
_SkipMatchesSpec@32 ENDP
_TEXT	ENDS
PUBLIC	_Hc3Zip_MatchFinder_Skip@8
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv128 = -20						; size = 4
_curMatch$2928 = -16					; size = 4
_cur$2927 = -12						; size = 4
_hv$2926 = -8						; size = 4
_lenLimit$2925 = -4					; size = 4
_p$ = 8							; size = 4
_num$ = 12						; size = 4
_Hc3Zip_MatchFinder_Skip@8 PROC
; Line 979
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
$LN5@Hc3Zip_Mat@2:
; Line 982
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _lenLimit$2925[ebp], ecx
	cmp	DWORD PTR _lenLimit$2925[ebp], 3
	jae	SHORT $LN2@Hc3Zip_Mat@2
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_MatchFinder_MovePos@4
	jmp	$LN4@Hc3Zip_Mat@2
$LN2@Hc3Zip_Mat@2:
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cur$2927[ebp], ecx
; Line 983
	mov	edx, DWORD PTR _cur$2927[ebp]
	movzx	eax, BYTE PTR [edx+2]
	mov	ecx, DWORD PTR _cur$2927[ebp]
	movzx	edx, BYTE PTR [ecx]
	shl	edx, 8
	or	eax, edx
	mov	ecx, DWORD PTR _cur$2927[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx*4+96]
	and	eax, 65535				; 0000ffffH
	mov	DWORD PTR _hv$2926[ebp], eax
; Line 984
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR _hv$2926[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _curMatch$2928[ebp], edx
; Line 985
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _hv$2926[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+edx*4], eax
; Line 986
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	eax, DWORD PTR _curMatch$2928[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
; Line 987
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+20], edx
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	DWORD PTR tv128[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR tv128[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR tv128[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN4@Hc3Zip_Mat@2
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_MatchFinder_CheckLimits@4
$LN4@Hc3Zip_Mat@2:
; Line 989
	mov	edx, DWORD PTR _num$[ebp]
	sub	edx, 1
	mov	DWORD PTR _num$[ebp], edx
	jne	$LN5@Hc3Zip_Mat@2
; Line 990
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_Hc3Zip_MatchFinder_Skip@8 ENDP
_TEXT	ENDS
PUBLIC	_MatchFinder_CreateVTable@8
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = 8							; size = 4
_vTable$ = 12						; size = 4
_MatchFinder_CreateVTable@8 PROC
; Line 993
	push	ebp
	mov	ebp, esp
; Line 994
	mov	eax, DWORD PTR _vTable$[ebp]
	mov	DWORD PTR [eax], OFFSET _MatchFinder_Init@4
; Line 995
	mov	ecx, DWORD PTR _vTable$[ebp]
	mov	DWORD PTR [ecx+4], OFFSET _MatchFinder_GetNumAvailableBytes@4
; Line 996
	mov	edx, DWORD PTR _vTable$[ebp]
	mov	DWORD PTR [edx+8], OFFSET _MatchFinder_GetPointerToCurrentPos@4
; Line 997
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+29]
	test	ecx, ecx
	jne	SHORT $LN6@MatchFinde@12
; Line 1001
	mov	edx, DWORD PTR _vTable$[ebp]
	mov	DWORD PTR [edx+12], OFFSET _Hc4_MatchFinder_GetMatches@8
; Line 1002
	mov	eax, DWORD PTR _vTable$[ebp]
	mov	DWORD PTR [eax+16], OFFSET _Hc4_MatchFinder_Skip@8
	jmp	SHORT $LN7@MatchFinde@12
$LN6@MatchFinde@12:
; Line 1012
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [ecx+72], 2
	jne	SHORT $LN4@MatchFinde@12
; Line 1014
	mov	edx, DWORD PTR _vTable$[ebp]
	mov	DWORD PTR [edx+12], OFFSET _Bt2_MatchFinder_GetMatches@8
; Line 1015
	mov	eax, DWORD PTR _vTable$[ebp]
	mov	DWORD PTR [eax+16], OFFSET _Bt2_MatchFinder_Skip@8
	jmp	SHORT $LN7@MatchFinde@12
$LN4@MatchFinde@12:
; Line 1017
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [ecx+72], 3
	jne	SHORT $LN2@MatchFinde@12
; Line 1019
	mov	edx, DWORD PTR _vTable$[ebp]
	mov	DWORD PTR [edx+12], OFFSET _Bt3_MatchFinder_GetMatches@8
; Line 1020
	mov	eax, DWORD PTR _vTable$[ebp]
	mov	DWORD PTR [eax+16], OFFSET _Bt3_MatchFinder_Skip@8
; Line 1022
	jmp	SHORT $LN7@MatchFinde@12
$LN2@MatchFinde@12:
; Line 1024
	mov	ecx, DWORD PTR _vTable$[ebp]
	mov	DWORD PTR [ecx+12], OFFSET _Bt4_MatchFinder_GetMatches@8
; Line 1025
	mov	edx, DWORD PTR _vTable$[ebp]
	mov	DWORD PTR [edx+16], OFFSET _Bt4_MatchFinder_Skip@8
$LN7@MatchFinde@12:
; Line 1034
	pop	ebp
	ret	8
_MatchFinder_CreateVTable@8 ENDP
; Function compile flags: /Odtp /RTCsu
tv137 = -24						; size = 4
_curMatch$ = -20					; size = 4
_cur$ = -16						; size = 4
_hv$ = -12						; size = 4
_lenLimit$ = -8						; size = 4
_offset$ = -4						; size = 4
_p$ = 8							; size = 4
_distances$ = 12					; size = 4
_Bt2_MatchFinder_GetMatches@8 PROC
; Line 517
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 519
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _lenLimit$[ebp], ecx
	cmp	DWORD PTR _lenLimit$[ebp], 2
	jae	SHORT $LN2@Bt2_MatchF
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_MatchFinder_MovePos@4
	xor	eax, eax
	jmp	$LN3@Bt2_MatchF
$LN2@Bt2_MatchF:
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cur$[ebp], ecx
; Line 520
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	shl	edx, 8
	or	eax, edx
	mov	DWORD PTR _hv$[ebp], eax
; Line 521
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _hv$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _curMatch$[ebp], eax
; Line 522
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR _hv$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+eax*4], ecx
; Line 523
	mov	DWORD PTR _offset$[ebp], 0
; Line 524
	push	1
	mov	edx, DWORD PTR _offset$[ebp]
	mov	eax, DWORD PTR _distances$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _curMatch$[ebp]
	push	edx
	mov	eax, DWORD PTR _lenLimit$[ebp]
	push	eax
	call	_GetMatchesSpec1@40
	sub	eax, DWORD PTR _distances$[ebp]
	sar	eax, 2
	mov	DWORD PTR _offset$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+20], edx
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	DWORD PTR tv137[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR tv137[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR tv137[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN1@Bt2_MatchF
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_MatchFinder_CheckLimits@4
$LN1@Bt2_MatchF:
	mov	eax, DWORD PTR _offset$[ebp]
$LN3@Bt2_MatchF:
; Line 525
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_Bt2_MatchFinder_GetMatches@8 ENDP
; Function compile flags: /Odtp /RTCsu
tv194 = -64						; size = 4
tv164 = -60						; size = 4
_lim$2727 = -56						; size = 4
_c$2726 = -52						; size = 4
_diff$2724 = -48					; size = 4
_temp$2721 = -44					; size = 4
_curMatch$ = -40					; size = 4
_cur$ = -36						; size = 4
_hv$ = -32						; size = 4
_lenLimit$ = -28					; size = 4
_hash$ = -24						; size = 4
_pos$ = -20						; size = 4
_offset$ = -16						; size = 4
_maxLen$ = -12						; size = 4
_d2$ = -8						; size = 4
_h2$ = -4						; size = 4
_p$ = 8							; size = 4
_distances$ = 12					; size = 4
_Bt3_MatchFinder_GetMatches@8 PROC
; Line 539
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	edi
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 542
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _lenLimit$[ebp], ecx
	cmp	DWORD PTR _lenLimit$[ebp], 3
	jae	SHORT $LN9@Bt3_MatchF
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_MatchFinder_MovePos@4
	xor	eax, eax
	jmp	$LN10@Bt3_MatchF
$LN9@Bt3_MatchF:
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cur$[ebp], ecx
; Line 544
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	mov	ecx, DWORD PTR _p$[ebp]
	xor	edx, DWORD PTR [ecx+eax*4+96]
	mov	DWORD PTR _temp$2721[ebp], edx
	mov	edx, DWORD PTR _temp$2721[ebp]
	and	edx, 1023				; 000003ffH
	mov	DWORD PTR _h2$[ebp], edx
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	shl	ecx, 8
	xor	ecx, DWORD PTR _temp$2721[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	and	ecx, DWORD PTR [edx+44]
	mov	DWORD PTR _hv$[ebp], ecx
; Line 546
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _hash$[ebp], ecx
; Line 547
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _pos$[ebp], eax
; Line 549
	mov	ecx, DWORD PTR _h2$[ebp]
	mov	edx, DWORD PTR _hash$[ebp]
	mov	eax, DWORD PTR _pos$[ebp]
	sub	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _d2$[ebp], eax
; Line 551
	mov	ecx, DWORD PTR _hv$[ebp]
	mov	edx, DWORD PTR _hash$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+4096]
	mov	DWORD PTR _curMatch$[ebp], eax
; Line 553
	mov	ecx, DWORD PTR _h2$[ebp]
	mov	edx, DWORD PTR _hash$[ebp]
	mov	eax, DWORD PTR _pos$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
; Line 554
	mov	ecx, DWORD PTR _hv$[ebp]
	mov	edx, DWORD PTR _hash$[ebp]
	mov	eax, DWORD PTR _pos$[ebp]
	mov	DWORD PTR [edx+ecx*4+4096], eax
; Line 556
	mov	DWORD PTR _maxLen$[ebp], 2
; Line 557
	mov	DWORD PTR _offset$[ebp], 0
; Line 559
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _d2$[ebp]
	cmp	edx, DWORD PTR [ecx+24]
	jae	$LN8@Bt3_MatchF
	mov	eax, DWORD PTR _cur$[ebp]
	sub	eax, DWORD PTR _d2$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	ecx, eax
	jne	$LN8@Bt3_MatchF
; Line 561
	xor	ecx, ecx
	sub	ecx, DWORD PTR _d2$[ebp]
	mov	DWORD PTR _diff$2724[ebp], ecx
	mov	edx, DWORD PTR _cur$[ebp]
	add	edx, DWORD PTR _maxLen$[ebp]
	mov	DWORD PTR _c$2726[ebp], edx
	mov	eax, DWORD PTR _cur$[ebp]
	add	eax, DWORD PTR _lenLimit$[ebp]
	mov	DWORD PTR _lim$2727[ebp], eax
	jmp	SHORT $LN7@Bt3_MatchF
$LN6@Bt3_MatchF:
	mov	ecx, DWORD PTR _c$2726[ebp]
	add	ecx, 1
	mov	DWORD PTR _c$2726[ebp], ecx
$LN7@Bt3_MatchF:
	mov	edx, DWORD PTR _c$2726[ebp]
	cmp	edx, DWORD PTR _lim$2727[ebp]
	je	SHORT $LN5@Bt3_MatchF
	mov	eax, DWORD PTR _c$2726[ebp]
	add	eax, DWORD PTR _diff$2724[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _c$2726[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	ecx, eax
	je	SHORT $LN4@Bt3_MatchF
	jmp	SHORT $LN5@Bt3_MatchF
$LN4@Bt3_MatchF:
	jmp	SHORT $LN6@Bt3_MatchF
$LN5@Bt3_MatchF:
	mov	ecx, DWORD PTR _c$2726[ebp]
	sub	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR _maxLen$[ebp], ecx
; Line 562
	mov	edx, DWORD PTR _distances$[ebp]
	mov	eax, DWORD PTR _maxLen$[ebp]
	mov	DWORD PTR [edx], eax
; Line 563
	mov	ecx, DWORD PTR _d2$[ebp]
	sub	ecx, 1
	mov	edx, DWORD PTR _distances$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 564
	mov	DWORD PTR _offset$[ebp], 2
; Line 565
	mov	eax, DWORD PTR _maxLen$[ebp]
	cmp	eax, DWORD PTR _lenLimit$[ebp]
	jne	$LN8@Bt3_MatchF
; Line 567
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _curMatch$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lenLimit$[ebp]
	push	edx
	call	_SkipMatchesSpec@32
; Line 568
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+20], ecx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv164[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR tv164[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR tv164[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN2@Bt3_MatchF
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_MatchFinder_CheckLimits@4
$LN2@Bt3_MatchF:
	mov	eax, DWORD PTR _offset$[ebp]
	jmp	$LN10@Bt3_MatchF
$LN8@Bt3_MatchF:
; Line 572
	mov	ecx, DWORD PTR _maxLen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _offset$[ebp]
	mov	eax, DWORD PTR _distances$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _curMatch$[ebp]
	push	edx
	mov	eax, DWORD PTR _lenLimit$[ebp]
	push	eax
	call	_GetMatchesSpec1@40
	sub	eax, DWORD PTR _distances$[ebp]
	sar	eax, 2
	mov	DWORD PTR _offset$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+20], edx
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	DWORD PTR tv194[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR tv194[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR tv194[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN1@Bt3_MatchF
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_MatchFinder_CheckLimits@4
$LN1@Bt3_MatchF:
	mov	eax, DWORD PTR _offset$[ebp]
$LN10@Bt3_MatchF:
; Line 573
	pop	edi
	add	esp, 64					; 00000040H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_Bt3_MatchFinder_GetMatches@8 ENDP
; Function compile flags: /Odtp /RTCsu
tv226 = -72						; size = 4
tv195 = -68						; size = 4
_lim$2764 = -64						; size = 4
_c$2763 = -60						; size = 4
_diff$2761 = -56					; size = 4
_temp$2756 = -52					; size = 4
_curMatch$ = -48					; size = 4
_cur$ = -44						; size = 4
_hv$ = -40						; size = 4
_lenLimit$ = -36					; size = 4
_hash$ = -32						; size = 4
_pos$ = -28						; size = 4
_offset$ = -24						; size = 4
_maxLen$ = -20						; size = 4
_d3$ = -16						; size = 4
_d2$ = -12						; size = 4
_h3$ = -8						; size = 4
_h2$ = -4						; size = 4
_p$ = 8							; size = 4
_distances$ = 12					; size = 4
_Bt4_MatchFinder_GetMatches@8 PROC
; Line 576
	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	edi
	lea	edi, DWORD PTR [ebp-72]
	mov	ecx, 18					; 00000012H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 579
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _lenLimit$[ebp], ecx
	cmp	DWORD PTR _lenLimit$[ebp], 4
	jae	SHORT $LN12@Bt4_MatchF
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_MatchFinder_MovePos@4
	xor	eax, eax
	jmp	$LN13@Bt4_MatchF
$LN12@Bt4_MatchF:
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cur$[ebp], ecx
; Line 581
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	mov	ecx, DWORD PTR _p$[ebp]
	xor	edx, DWORD PTR [ecx+eax*4+96]
	mov	DWORD PTR _temp$2756[ebp], edx
	mov	edx, DWORD PTR _temp$2756[ebp]
	and	edx, 1023				; 000003ffH
	mov	DWORD PTR _h2$[ebp], edx
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	shl	ecx, 8
	xor	ecx, DWORD PTR _temp$2756[ebp]
	mov	DWORD PTR _temp$2756[ebp], ecx
	mov	edx, DWORD PTR _temp$2756[ebp]
	and	edx, 65535				; 0000ffffH
	mov	DWORD PTR _h3$[ebp], edx
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax+3]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+96]
	shl	eax, 5
	xor	eax, DWORD PTR _temp$2756[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	and	eax, DWORD PTR [ecx+44]
	mov	DWORD PTR _hv$[ebp], eax
; Line 583
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR _hash$[ebp], eax
; Line 584
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _pos$[ebp], edx
; Line 586
	mov	eax, DWORD PTR _h2$[ebp]
	mov	ecx, DWORD PTR _hash$[ebp]
	mov	edx, DWORD PTR _pos$[ebp]
	sub	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _d2$[ebp], edx
; Line 587
	mov	eax, DWORD PTR _h3$[ebp]
	mov	ecx, DWORD PTR _hash$[ebp]
	mov	edx, DWORD PTR _pos$[ebp]
	sub	edx, DWORD PTR [ecx+eax*4+4096]
	mov	DWORD PTR _d3$[ebp], edx
; Line 589
	mov	eax, DWORD PTR _hv$[ebp]
	mov	ecx, DWORD PTR _hash$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+266240]
	mov	DWORD PTR _curMatch$[ebp], edx
; Line 591
	mov	eax, DWORD PTR _h2$[ebp]
	mov	ecx, DWORD PTR _hash$[ebp]
	mov	edx, DWORD PTR _pos$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
; Line 592
	mov	eax, DWORD PTR _h3$[ebp]
	mov	ecx, DWORD PTR _hash$[ebp]
	mov	edx, DWORD PTR _pos$[ebp]
	mov	DWORD PTR [ecx+eax*4+4096], edx
; Line 593
	mov	eax, DWORD PTR _hv$[ebp]
	mov	ecx, DWORD PTR _hash$[ebp]
	mov	edx, DWORD PTR _pos$[ebp]
	mov	DWORD PTR [ecx+eax*4+266240], edx
; Line 595
	mov	DWORD PTR _maxLen$[ebp], 0
; Line 596
	mov	DWORD PTR _offset$[ebp], 0
; Line 598
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _d2$[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	jae	SHORT $LN11@Bt4_MatchF
	mov	edx, DWORD PTR _cur$[ebp]
	sub	edx, DWORD PTR _d2$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	eax, edx
	jne	SHORT $LN11@Bt4_MatchF
; Line 600
	mov	DWORD PTR _maxLen$[ebp], 2
	mov	eax, DWORD PTR _distances$[ebp]
	mov	ecx, DWORD PTR _maxLen$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 601
	mov	edx, DWORD PTR _d2$[ebp]
	sub	edx, 1
	mov	eax, DWORD PTR _distances$[ebp]
	mov	DWORD PTR [eax+4], edx
; Line 602
	mov	DWORD PTR _offset$[ebp], 2
$LN11@Bt4_MatchF:
; Line 605
	mov	ecx, DWORD PTR _d2$[ebp]
	cmp	ecx, DWORD PTR _d3$[ebp]
	je	SHORT $LN10@Bt4_MatchF
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _d3$[ebp]
	cmp	eax, DWORD PTR [edx+24]
	jae	SHORT $LN10@Bt4_MatchF
	mov	ecx, DWORD PTR _cur$[ebp]
	sub	ecx, DWORD PTR _d3$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	edx, ecx
	jne	SHORT $LN10@Bt4_MatchF
; Line 607
	mov	DWORD PTR _maxLen$[ebp], 3
; Line 608
	mov	edx, DWORD PTR _d3$[ebp]
	sub	edx, 1
	mov	eax, DWORD PTR _offset$[ebp]
	mov	ecx, DWORD PTR _distances$[ebp]
	mov	DWORD PTR [ecx+eax*4+4], edx
; Line 609
	mov	edx, DWORD PTR _offset$[ebp]
	add	edx, 2
	mov	DWORD PTR _offset$[ebp], edx
; Line 610
	mov	eax, DWORD PTR _d3$[ebp]
	mov	DWORD PTR _d2$[ebp], eax
$LN10@Bt4_MatchF:
; Line 613
	cmp	DWORD PTR _offset$[ebp], 0
	je	$LN9@Bt4_MatchF
; Line 615
	xor	ecx, ecx
	sub	ecx, DWORD PTR _d2$[ebp]
	mov	DWORD PTR _diff$2761[ebp], ecx
	mov	edx, DWORD PTR _cur$[ebp]
	add	edx, DWORD PTR _maxLen$[ebp]
	mov	DWORD PTR _c$2763[ebp], edx
	mov	eax, DWORD PTR _cur$[ebp]
	add	eax, DWORD PTR _lenLimit$[ebp]
	mov	DWORD PTR _lim$2764[ebp], eax
	jmp	SHORT $LN8@Bt4_MatchF
$LN7@Bt4_MatchF:
	mov	ecx, DWORD PTR _c$2763[ebp]
	add	ecx, 1
	mov	DWORD PTR _c$2763[ebp], ecx
$LN8@Bt4_MatchF:
	mov	edx, DWORD PTR _c$2763[ebp]
	cmp	edx, DWORD PTR _lim$2764[ebp]
	je	SHORT $LN6@Bt4_MatchF
	mov	eax, DWORD PTR _c$2763[ebp]
	add	eax, DWORD PTR _diff$2761[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _c$2763[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	ecx, eax
	je	SHORT $LN5@Bt4_MatchF
	jmp	SHORT $LN6@Bt4_MatchF
$LN5@Bt4_MatchF:
	jmp	SHORT $LN7@Bt4_MatchF
$LN6@Bt4_MatchF:
	mov	ecx, DWORD PTR _c$2763[ebp]
	sub	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR _maxLen$[ebp], ecx
; Line 616
	mov	edx, DWORD PTR _offset$[ebp]
	mov	eax, DWORD PTR _distances$[ebp]
	mov	ecx, DWORD PTR _maxLen$[ebp]
	mov	DWORD PTR [eax+edx*4-8], ecx
; Line 617
	mov	edx, DWORD PTR _maxLen$[ebp]
	cmp	edx, DWORD PTR _lenLimit$[ebp]
	jne	$LN9@Bt4_MatchF
; Line 619
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _curMatch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lenLimit$[ebp]
	push	ecx
	call	_SkipMatchesSpec@32
; Line 620
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+20], eax
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	DWORD PTR tv195[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR tv195[ebp]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR tv195[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN3@Bt4_MatchF
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_MatchFinder_CheckLimits@4
$LN3@Bt4_MatchF:
	mov	eax, DWORD PTR _offset$[ebp]
	jmp	$LN13@Bt4_MatchF
$LN9@Bt4_MatchF:
; Line 624
	cmp	DWORD PTR _maxLen$[ebp], 3
	jae	SHORT $LN2@Bt4_MatchF
; Line 625
	mov	DWORD PTR _maxLen$[ebp], 3
$LN2@Bt4_MatchF:
; Line 627
	mov	eax, DWORD PTR _maxLen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _offset$[ebp]
	mov	edx, DWORD PTR _distances$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _curMatch$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lenLimit$[ebp]
	push	edx
	call	_GetMatchesSpec1@40
	sub	eax, DWORD PTR _distances$[ebp]
	sar	eax, 2
	mov	DWORD PTR _offset$[ebp], eax
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+20], ecx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv226[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR tv226[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR tv226[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN1@Bt4_MatchF
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_MatchFinder_CheckLimits@4
$LN1@Bt4_MatchF:
	mov	eax, DWORD PTR _offset$[ebp]
$LN13@Bt4_MatchF:
; Line 628
	pop	edi
	add	esp, 72					; 00000048H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_Bt4_MatchFinder_GetMatches@8 ENDP
; Function compile flags: /Odtp /RTCsu
tv217 = -72						; size = 4
tv186 = -68						; size = 4
_lim$2802 = -64						; size = 4
_c$2801 = -60						; size = 4
_diff$2799 = -56					; size = 4
_temp$2794 = -52					; size = 4
_curMatch$ = -48					; size = 4
_cur$ = -44						; size = 4
_hv$ = -40						; size = 4
_lenLimit$ = -36					; size = 4
_hash$ = -32						; size = 4
_pos$ = -28						; size = 4
_offset$ = -24						; size = 4
_maxLen$ = -20						; size = 4
_d3$ = -16						; size = 4
_d2$ = -12						; size = 4
_h3$ = -8						; size = 4
_h2$ = -4						; size = 4
_p$ = 8							; size = 4
_distances$ = 12					; size = 4
_Hc4_MatchFinder_GetMatches@8 PROC
; Line 708
	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	edi
	lea	edi, DWORD PTR [ebp-72]
	mov	ecx, 18					; 00000012H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 711
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _lenLimit$[ebp], ecx
	cmp	DWORD PTR _lenLimit$[ebp], 4
	jae	SHORT $LN12@Hc4_MatchF
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_MatchFinder_MovePos@4
	xor	eax, eax
	jmp	$LN13@Hc4_MatchF
$LN12@Hc4_MatchF:
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cur$[ebp], ecx
; Line 713
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	mov	ecx, DWORD PTR _p$[ebp]
	xor	edx, DWORD PTR [ecx+eax*4+96]
	mov	DWORD PTR _temp$2794[ebp], edx
	mov	edx, DWORD PTR _temp$2794[ebp]
	and	edx, 1023				; 000003ffH
	mov	DWORD PTR _h2$[ebp], edx
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	shl	ecx, 8
	xor	ecx, DWORD PTR _temp$2794[ebp]
	mov	DWORD PTR _temp$2794[ebp], ecx
	mov	edx, DWORD PTR _temp$2794[ebp]
	and	edx, 65535				; 0000ffffH
	mov	DWORD PTR _h3$[ebp], edx
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax+3]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+96]
	shl	eax, 5
	xor	eax, DWORD PTR _temp$2794[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	and	eax, DWORD PTR [ecx+44]
	mov	DWORD PTR _hv$[ebp], eax
; Line 715
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR _hash$[ebp], eax
; Line 716
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _pos$[ebp], edx
; Line 718
	mov	eax, DWORD PTR _h2$[ebp]
	mov	ecx, DWORD PTR _hash$[ebp]
	mov	edx, DWORD PTR _pos$[ebp]
	sub	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _d2$[ebp], edx
; Line 719
	mov	eax, DWORD PTR _h3$[ebp]
	mov	ecx, DWORD PTR _hash$[ebp]
	mov	edx, DWORD PTR _pos$[ebp]
	sub	edx, DWORD PTR [ecx+eax*4+4096]
	mov	DWORD PTR _d3$[ebp], edx
; Line 721
	mov	eax, DWORD PTR _hv$[ebp]
	mov	ecx, DWORD PTR _hash$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+266240]
	mov	DWORD PTR _curMatch$[ebp], edx
; Line 723
	mov	eax, DWORD PTR _h2$[ebp]
	mov	ecx, DWORD PTR _hash$[ebp]
	mov	edx, DWORD PTR _pos$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
; Line 724
	mov	eax, DWORD PTR _h3$[ebp]
	mov	ecx, DWORD PTR _hash$[ebp]
	mov	edx, DWORD PTR _pos$[ebp]
	mov	DWORD PTR [ecx+eax*4+4096], edx
; Line 725
	mov	eax, DWORD PTR _hv$[ebp]
	mov	ecx, DWORD PTR _hash$[ebp]
	mov	edx, DWORD PTR _pos$[ebp]
	mov	DWORD PTR [ecx+eax*4+266240], edx
; Line 727
	mov	DWORD PTR _maxLen$[ebp], 0
; Line 728
	mov	DWORD PTR _offset$[ebp], 0
; Line 730
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _d2$[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	jae	SHORT $LN11@Hc4_MatchF
	mov	edx, DWORD PTR _cur$[ebp]
	sub	edx, DWORD PTR _d2$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	eax, edx
	jne	SHORT $LN11@Hc4_MatchF
; Line 732
	mov	DWORD PTR _maxLen$[ebp], 2
	mov	eax, DWORD PTR _distances$[ebp]
	mov	ecx, DWORD PTR _maxLen$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 733
	mov	edx, DWORD PTR _d2$[ebp]
	sub	edx, 1
	mov	eax, DWORD PTR _distances$[ebp]
	mov	DWORD PTR [eax+4], edx
; Line 734
	mov	DWORD PTR _offset$[ebp], 2
$LN11@Hc4_MatchF:
; Line 737
	mov	ecx, DWORD PTR _d2$[ebp]
	cmp	ecx, DWORD PTR _d3$[ebp]
	je	SHORT $LN10@Hc4_MatchF
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _d3$[ebp]
	cmp	eax, DWORD PTR [edx+24]
	jae	SHORT $LN10@Hc4_MatchF
	mov	ecx, DWORD PTR _cur$[ebp]
	sub	ecx, DWORD PTR _d3$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	edx, ecx
	jne	SHORT $LN10@Hc4_MatchF
; Line 739
	mov	DWORD PTR _maxLen$[ebp], 3
; Line 740
	mov	edx, DWORD PTR _d3$[ebp]
	sub	edx, 1
	mov	eax, DWORD PTR _offset$[ebp]
	mov	ecx, DWORD PTR _distances$[ebp]
	mov	DWORD PTR [ecx+eax*4+4], edx
; Line 741
	mov	edx, DWORD PTR _offset$[ebp]
	add	edx, 2
	mov	DWORD PTR _offset$[ebp], edx
; Line 742
	mov	eax, DWORD PTR _d3$[ebp]
	mov	DWORD PTR _d2$[ebp], eax
$LN10@Hc4_MatchF:
; Line 745
	cmp	DWORD PTR _offset$[ebp], 0
	je	$LN9@Hc4_MatchF
; Line 747
	xor	ecx, ecx
	sub	ecx, DWORD PTR _d2$[ebp]
	mov	DWORD PTR _diff$2799[ebp], ecx
	mov	edx, DWORD PTR _cur$[ebp]
	add	edx, DWORD PTR _maxLen$[ebp]
	mov	DWORD PTR _c$2801[ebp], edx
	mov	eax, DWORD PTR _cur$[ebp]
	add	eax, DWORD PTR _lenLimit$[ebp]
	mov	DWORD PTR _lim$2802[ebp], eax
	jmp	SHORT $LN8@Hc4_MatchF
$LN7@Hc4_MatchF:
	mov	ecx, DWORD PTR _c$2801[ebp]
	add	ecx, 1
	mov	DWORD PTR _c$2801[ebp], ecx
$LN8@Hc4_MatchF:
	mov	edx, DWORD PTR _c$2801[ebp]
	cmp	edx, DWORD PTR _lim$2802[ebp]
	je	SHORT $LN6@Hc4_MatchF
	mov	eax, DWORD PTR _c$2801[ebp]
	add	eax, DWORD PTR _diff$2799[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _c$2801[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	ecx, eax
	je	SHORT $LN5@Hc4_MatchF
	jmp	SHORT $LN6@Hc4_MatchF
$LN5@Hc4_MatchF:
	jmp	SHORT $LN7@Hc4_MatchF
$LN6@Hc4_MatchF:
	mov	ecx, DWORD PTR _c$2801[ebp]
	sub	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR _maxLen$[ebp], ecx
; Line 748
	mov	edx, DWORD PTR _offset$[ebp]
	mov	eax, DWORD PTR _distances$[ebp]
	mov	ecx, DWORD PTR _maxLen$[ebp]
	mov	DWORD PTR [eax+edx*4-8], ecx
; Line 749
	mov	edx, DWORD PTR _maxLen$[ebp]
	cmp	edx, DWORD PTR _lenLimit$[ebp]
	jne	SHORT $LN9@Hc4_MatchF
; Line 751
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	edx, DWORD PTR _curMatch$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 752
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+20], ecx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv186[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR tv186[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR tv186[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN3@Hc4_MatchF
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_MatchFinder_CheckLimits@4
$LN3@Hc4_MatchF:
	mov	eax, DWORD PTR _offset$[ebp]
	jmp	$LN13@Hc4_MatchF
$LN9@Hc4_MatchF:
; Line 756
	cmp	DWORD PTR _maxLen$[ebp], 3
	jae	SHORT $LN2@Hc4_MatchF
; Line 757
	mov	DWORD PTR _maxLen$[ebp], 3
$LN2@Hc4_MatchF:
; Line 760
	mov	ecx, DWORD PTR _maxLen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _offset$[ebp]
	mov	eax, DWORD PTR _distances$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _curMatch$[ebp]
	push	edx
	mov	eax, DWORD PTR _lenLimit$[ebp]
	push	eax
	call	_Hc_GetMatchesSpec@40
	sub	eax, DWORD PTR _distances$[ebp]
	sar	eax, 2
	mov	DWORD PTR _offset$[ebp], eax
; Line 761
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+20], edx
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	DWORD PTR tv217[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR tv217[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR tv217[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN1@Hc4_MatchF
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_MatchFinder_CheckLimits@4
$LN1@Hc4_MatchF:
	mov	eax, DWORD PTR _offset$[ebp]
$LN13@Hc4_MatchF:
; Line 762
	pop	edi
	add	esp, 72					; 00000048H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_Hc4_MatchFinder_GetMatches@8 ENDP
; Function compile flags: /Odtp /RTCsu
tv130 = -20						; size = 4
_curMatch$2839 = -16					; size = 4
_cur$2838 = -12						; size = 4
_hv$2837 = -8						; size = 4
_lenLimit$2836 = -4					; size = 4
_p$ = 8							; size = 4
_num$ = 12						; size = 4
_Bt2_MatchFinder_Skip@8 PROC
; Line 856
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
$LN5@Bt2_MatchF@2:
; Line 859
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _lenLimit$2836[ebp], ecx
	cmp	DWORD PTR _lenLimit$2836[ebp], 2
	jae	SHORT $LN2@Bt2_MatchF@2
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_MatchFinder_MovePos@4
	jmp	$LN4@Bt2_MatchF@2
$LN2@Bt2_MatchF@2:
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cur$2838[ebp], ecx
; Line 860
	mov	edx, DWORD PTR _cur$2838[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _cur$2838[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	shl	edx, 8
	or	eax, edx
	mov	DWORD PTR _hv$2837[ebp], eax
; Line 861
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _hv$2837[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _curMatch$2839[ebp], eax
; Line 862
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR _hv$2837[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+eax*4], ecx
; Line 863
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _curMatch$2839[ebp]
	push	edx
	mov	eax, DWORD PTR _lenLimit$2836[ebp]
	push	eax
	call	_SkipMatchesSpec@32
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+20], edx
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	DWORD PTR tv130[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR tv130[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR tv130[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN4@Bt2_MatchF@2
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_MatchFinder_CheckLimits@4
$LN4@Bt2_MatchF@2:
; Line 865
	mov	edx, DWORD PTR _num$[ebp]
	sub	edx, 1
	mov	DWORD PTR _num$[ebp], edx
	jne	$LN5@Bt2_MatchF@2
; Line 866
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_Bt2_MatchFinder_Skip@8 ENDP
; Function compile flags: /Odtp /RTCsu
tv145 = -32						; size = 4
_temp$2874 = -28					; size = 4
_curMatch$2872 = -24					; size = 4
_cur$2871 = -20						; size = 4
_hv$2870 = -16						; size = 4
_lenLimit$2869 = -12					; size = 4
_hash$2868 = -8						; size = 4
_h2$2867 = -4						; size = 4
_p$ = 8							; size = 4
_num$ = 12						; size = 4
_Bt3_MatchFinder_Skip@8 PROC
; Line 882
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
$LN5@Bt3_MatchF@2:
; Line 887
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _lenLimit$2869[ebp], ecx
	cmp	DWORD PTR _lenLimit$2869[ebp], 3
	jae	SHORT $LN2@Bt3_MatchF@2
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_MatchFinder_MovePos@4
	jmp	$LN4@Bt3_MatchF@2
$LN2@Bt3_MatchF@2:
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cur$2871[ebp], ecx
; Line 888
	mov	edx, DWORD PTR _cur$2871[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _cur$2871[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	mov	ecx, DWORD PTR _p$[ebp]
	xor	edx, DWORD PTR [ecx+eax*4+96]
	mov	DWORD PTR _temp$2874[ebp], edx
	mov	edx, DWORD PTR _temp$2874[ebp]
	and	edx, 1023				; 000003ffH
	mov	DWORD PTR _h2$2867[ebp], edx
	mov	eax, DWORD PTR _cur$2871[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	shl	ecx, 8
	xor	ecx, DWORD PTR _temp$2874[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	and	ecx, DWORD PTR [edx+44]
	mov	DWORD PTR _hv$2870[ebp], ecx
; Line 889
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _hash$2868[ebp], ecx
; Line 890
	mov	edx, DWORD PTR _hv$2870[ebp]
	mov	eax, DWORD PTR _hash$2868[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+4096]
	mov	DWORD PTR _curMatch$2872[ebp], ecx
; Line 892
	mov	edx, DWORD PTR _hv$2870[ebp]
	mov	eax, DWORD PTR _hash$2868[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+edx*4+4096], ecx
	mov	edx, DWORD PTR _h2$2867[ebp]
	mov	eax, DWORD PTR _hash$2868[ebp]
	mov	ecx, DWORD PTR _hv$2870[ebp]
	mov	esi, DWORD PTR _hash$2868[ebp]
	mov	ecx, DWORD PTR [esi+ecx*4+4096]
	mov	DWORD PTR [eax+edx*4], ecx
; Line 893
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _curMatch$2872[ebp]
	push	edx
	mov	eax, DWORD PTR _lenLimit$2869[ebp]
	push	eax
	call	_SkipMatchesSpec@32
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+20], edx
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	DWORD PTR tv145[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR tv145[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR tv145[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN4@Bt3_MatchF@2
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_MatchFinder_CheckLimits@4
$LN4@Bt3_MatchF@2:
; Line 895
	mov	edx, DWORD PTR _num$[ebp]
	sub	edx, 1
	mov	DWORD PTR _num$[ebp], edx
	jne	$LN5@Bt3_MatchF@2
; Line 896
	pop	esi
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_Bt3_MatchFinder_Skip@8 ENDP
; Function compile flags: /Odtp /RTCsu
tv159 = -36						; size = 4
_temp$2894 = -32					; size = 4
_curMatch$2892 = -28					; size = 4
_cur$2891 = -24						; size = 4
_hv$2890 = -20						; size = 4
_lenLimit$2889 = -16					; size = 4
_hash$2888 = -12					; size = 4
_h3$2887 = -8						; size = 4
_h2$2886 = -4						; size = 4
_p$ = 8							; size = 4
_num$ = 12						; size = 4
_Bt4_MatchFinder_Skip@8 PROC
; Line 899
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
$LN5@Bt4_MatchF@2:
; Line 904
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _lenLimit$2889[ebp], ecx
	cmp	DWORD PTR _lenLimit$2889[ebp], 4
	jae	SHORT $LN2@Bt4_MatchF@2
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_MatchFinder_MovePos@4
	jmp	$LN4@Bt4_MatchF@2
$LN2@Bt4_MatchF@2:
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cur$2891[ebp], ecx
; Line 905
	mov	edx, DWORD PTR _cur$2891[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _cur$2891[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	mov	ecx, DWORD PTR _p$[ebp]
	xor	edx, DWORD PTR [ecx+eax*4+96]
	mov	DWORD PTR _temp$2894[ebp], edx
	mov	edx, DWORD PTR _temp$2894[ebp]
	and	edx, 1023				; 000003ffH
	mov	DWORD PTR _h2$2886[ebp], edx
	mov	eax, DWORD PTR _cur$2891[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	shl	ecx, 8
	xor	ecx, DWORD PTR _temp$2894[ebp]
	mov	DWORD PTR _temp$2894[ebp], ecx
	mov	edx, DWORD PTR _temp$2894[ebp]
	and	edx, 65535				; 0000ffffH
	mov	DWORD PTR _h3$2887[ebp], edx
	mov	eax, DWORD PTR _cur$2891[ebp]
	movzx	ecx, BYTE PTR [eax+3]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+96]
	shl	eax, 5
	xor	eax, DWORD PTR _temp$2894[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	and	eax, DWORD PTR [ecx+44]
	mov	DWORD PTR _hv$2890[ebp], eax
; Line 906
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR _hash$2888[ebp], eax
; Line 907
	mov	ecx, DWORD PTR _hv$2890[ebp]
	mov	edx, DWORD PTR _hash$2888[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+266240]
	mov	DWORD PTR _curMatch$2892[ebp], eax
; Line 910
	mov	ecx, DWORD PTR _hv$2890[ebp]
	mov	edx, DWORD PTR _hash$2888[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+ecx*4+266240], eax
	mov	ecx, DWORD PTR _h3$2887[ebp]
	mov	edx, DWORD PTR _hash$2888[ebp]
	mov	eax, DWORD PTR _hv$2890[ebp]
	mov	esi, DWORD PTR _hash$2888[ebp]
	mov	eax, DWORD PTR [esi+eax*4+266240]
	mov	DWORD PTR [edx+ecx*4+4096], eax
	mov	ecx, DWORD PTR _h2$2886[ebp]
	mov	edx, DWORD PTR _hash$2888[ebp]
	mov	eax, DWORD PTR _h3$2887[ebp]
	mov	esi, DWORD PTR _hash$2888[ebp]
	mov	eax, DWORD PTR [esi+eax*4+4096]
	mov	DWORD PTR [edx+ecx*4], eax
; Line 911
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _curMatch$2892[ebp]
	push	ecx
	mov	edx, DWORD PTR _lenLimit$2889[ebp]
	push	edx
	call	_SkipMatchesSpec@32
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+20], ecx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv159[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR tv159[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR tv159[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN4@Bt4_MatchF@2
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_MatchFinder_CheckLimits@4
$LN4@Bt4_MatchF@2:
; Line 913
	mov	ecx, DWORD PTR _num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _num$[ebp], ecx
	jne	$LN5@Bt4_MatchF@2
; Line 914
	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_Bt4_MatchFinder_Skip@8 ENDP
; Function compile flags: /Odtp /RTCsu
tv150 = -36						; size = 4
_temp$2914 = -32					; size = 4
_curMatch$2912 = -28					; size = 4
_cur$2911 = -24						; size = 4
_hv$2910 = -20						; size = 4
_lenLimit$2909 = -16					; size = 4
_hash$2908 = -12					; size = 4
_h3$2907 = -8						; size = 4
_h2$2906 = -4						; size = 4
_p$ = 8							; size = 4
_num$ = 12						; size = 4
_Hc4_MatchFinder_Skip@8 PROC
; Line 938
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
$LN5@Hc4_MatchF@2:
; Line 943
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _lenLimit$2909[ebp], ecx
	cmp	DWORD PTR _lenLimit$2909[ebp], 4
	jae	SHORT $LN2@Hc4_MatchF@2
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_MatchFinder_MovePos@4
	jmp	$LN4@Hc4_MatchF@2
$LN2@Hc4_MatchF@2:
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cur$2911[ebp], ecx
; Line 944
	mov	edx, DWORD PTR _cur$2911[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _cur$2911[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	mov	ecx, DWORD PTR _p$[ebp]
	xor	edx, DWORD PTR [ecx+eax*4+96]
	mov	DWORD PTR _temp$2914[ebp], edx
	mov	edx, DWORD PTR _temp$2914[ebp]
	and	edx, 1023				; 000003ffH
	mov	DWORD PTR _h2$2906[ebp], edx
	mov	eax, DWORD PTR _cur$2911[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	shl	ecx, 8
	xor	ecx, DWORD PTR _temp$2914[ebp]
	mov	DWORD PTR _temp$2914[ebp], ecx
	mov	edx, DWORD PTR _temp$2914[ebp]
	and	edx, 65535				; 0000ffffH
	mov	DWORD PTR _h3$2907[ebp], edx
	mov	eax, DWORD PTR _cur$2911[ebp]
	movzx	ecx, BYTE PTR [eax+3]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+96]
	shl	eax, 5
	xor	eax, DWORD PTR _temp$2914[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	and	eax, DWORD PTR [ecx+44]
	mov	DWORD PTR _hv$2910[ebp], eax
; Line 945
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR _hash$2908[ebp], eax
; Line 946
	mov	ecx, DWORD PTR _hv$2910[ebp]
	mov	edx, DWORD PTR _hash$2908[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+266240]
	mov	DWORD PTR _curMatch$2912[ebp], eax
; Line 949
	mov	ecx, DWORD PTR _hv$2910[ebp]
	mov	edx, DWORD PTR _hash$2908[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+ecx*4+266240], eax
	mov	ecx, DWORD PTR _h3$2907[ebp]
	mov	edx, DWORD PTR _hash$2908[ebp]
	mov	eax, DWORD PTR _hv$2910[ebp]
	mov	esi, DWORD PTR _hash$2908[ebp]
	mov	eax, DWORD PTR [esi+eax*4+266240]
	mov	DWORD PTR [edx+ecx*4+4096], eax
	mov	ecx, DWORD PTR _h2$2906[ebp]
	mov	edx, DWORD PTR _hash$2908[ebp]
	mov	eax, DWORD PTR _h3$2907[ebp]
	mov	esi, DWORD PTR _hash$2908[ebp]
	mov	eax, DWORD PTR [esi+eax*4+4096]
	mov	DWORD PTR [edx+ecx*4], eax
; Line 950
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	eax, DWORD PTR _curMatch$2912[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
; Line 951
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+20], edx
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	DWORD PTR tv150[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR tv150[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR tv150[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN4@Hc4_MatchF@2
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_MatchFinder_CheckLimits@4
$LN4@Hc4_MatchF@2:
; Line 953
	mov	edx, DWORD PTR _num$[ebp]
	sub	edx, 1
	mov	DWORD PTR _num$[ebp], edx
	jne	$LN5@Hc4_MatchF@2
; Line 954
	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_Hc4_MatchFinder_Skip@8 ENDP
_TEXT	ENDS
END
