; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\C\Bra.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_ARM_Convert@16
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\c\bra.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_src$1443 = -12						; size = 4
_dest$1442 = -8						; size = 4
_i$ = -4						; size = 4
_data$ = 8						; size = 4
_size$ = 12						; size = 4
_ip$ = 16						; size = 4
_encoding$ = 20						; size = 4
_ARM_Convert@16 PROC
; Line 9
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 11
	cmp	DWORD PTR _size$[ebp], 4
	jae	SHORT $LN7@ARM_Conver
; Line 12
	xor	eax, eax
	jmp	$LN8@ARM_Conver
$LN7@ARM_Conver:
; Line 13
	mov	eax, DWORD PTR _size$[ebp]
	sub	eax, 4
	mov	DWORD PTR _size$[ebp], eax
; Line 14
	mov	ecx, DWORD PTR _ip$[ebp]
	add	ecx, 8
	mov	DWORD PTR _ip$[ebp], ecx
; Line 15
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@ARM_Conver
$LN5@ARM_Conver:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 4
	mov	DWORD PTR _i$[ebp], edx
$LN6@ARM_Conver:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _size$[ebp]
	ja	$LN4@ARM_Conver
; Line 17
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx+3]
	cmp	edx, 235				; 000000ebH
	jne	$LN3@ARM_Conver
; Line 20
	mov	eax, DWORD PTR _data$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	shl	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _data$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	shl	eax, 8
	or	ecx, eax
	mov	edx, DWORD PTR _data$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [edx]
	or	ecx, eax
	mov	DWORD PTR _src$1443[ebp], ecx
; Line 21
	mov	ecx, DWORD PTR _src$1443[ebp]
	shl	ecx, 2
	mov	DWORD PTR _src$1443[ebp], ecx
; Line 22
	cmp	DWORD PTR _encoding$[ebp], 0
	je	SHORT $LN2@ARM_Conver
; Line 23
	mov	edx, DWORD PTR _ip$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	add	edx, DWORD PTR _src$1443[ebp]
	mov	DWORD PTR _dest$1442[ebp], edx
; Line 24
	jmp	SHORT $LN1@ARM_Conver
$LN2@ARM_Conver:
; Line 25
	mov	eax, DWORD PTR _ip$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _src$1443[ebp]
	sub	ecx, eax
	mov	DWORD PTR _dest$1442[ebp], ecx
$LN1@ARM_Conver:
; Line 26
	mov	edx, DWORD PTR _dest$1442[ebp]
	shr	edx, 2
	mov	DWORD PTR _dest$1442[ebp], edx
; Line 27
	mov	eax, DWORD PTR _dest$1442[ebp]
	shr	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [ecx+2], al
; Line 28
	mov	edx, DWORD PTR _dest$1442[ebp]
	shr	edx, 8
	mov	eax, DWORD PTR _data$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR [eax+1], dl
; Line 29
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	dl, BYTE PTR _dest$1442[ebp]
	mov	BYTE PTR [ecx], dl
$LN3@ARM_Conver:
; Line 31
	jmp	$LN5@ARM_Conver
$LN4@ARM_Conver:
; Line 32
	mov	eax, DWORD PTR _i$[ebp]
$LN8@ARM_Conver:
; Line 33
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_ARM_Convert@16 ENDP
_TEXT	ENDS
PUBLIC	_ARMT_Convert@16
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_src$1469 = -12						; size = 4
_dest$1468 = -8						; size = 4
_i$ = -4						; size = 4
_data$ = 8						; size = 4
_size$ = 12						; size = 4
_ip$ = 16						; size = 4
_encoding$ = 20						; size = 4
_ARMT_Convert@16 PROC
; Line 36
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 38
	cmp	DWORD PTR _size$[ebp], 4
	jae	SHORT $LN7@ARMT_Conve
; Line 39
	xor	eax, eax
	jmp	$LN8@ARMT_Conve
$LN7@ARMT_Conve:
; Line 40
	mov	eax, DWORD PTR _size$[ebp]
	sub	eax, 4
	mov	DWORD PTR _size$[ebp], eax
; Line 41
	mov	ecx, DWORD PTR _ip$[ebp]
	add	ecx, 4
	mov	DWORD PTR _ip$[ebp], ecx
; Line 42
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@ARMT_Conve
$LN5@ARMT_Conve:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 2
	mov	DWORD PTR _i$[ebp], edx
$LN6@ARMT_Conve:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _size$[ebp]
	ja	$LN4@ARMT_Conve
; Line 45
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	and	edx, 248				; 000000f8H
	cmp	edx, 240				; 000000f0H
	jne	$LN3@ARMT_Conve
	mov	eax, DWORD PTR _data$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax+3]
	and	ecx, 248				; 000000f8H
	cmp	ecx, 248				; 000000f8H
	jne	$LN3@ARMT_Conve
; Line 52
	mov	edx, DWORD PTR _data$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	and	eax, 7
	shl	eax, 19					; 00000013H
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx]
	shl	edx, 11					; 0000000bH
	or	eax, edx
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx+3]
	and	edx, 7
	shl	edx, 8
	or	eax, edx
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx+2]
	or	eax, edx
	mov	DWORD PTR _src$1469[ebp], eax
; Line 54
	mov	eax, DWORD PTR _src$1469[ebp]
	shl	eax, 1
	mov	DWORD PTR _src$1469[ebp], eax
; Line 55
	cmp	DWORD PTR _encoding$[ebp], 0
	je	SHORT $LN2@ARMT_Conve
; Line 56
	mov	ecx, DWORD PTR _ip$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	add	ecx, DWORD PTR _src$1469[ebp]
	mov	DWORD PTR _dest$1468[ebp], ecx
; Line 57
	jmp	SHORT $LN1@ARMT_Conve
$LN2@ARMT_Conve:
; Line 58
	mov	edx, DWORD PTR _ip$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _src$1469[ebp]
	sub	eax, edx
	mov	DWORD PTR _dest$1468[ebp], eax
$LN1@ARMT_Conve:
; Line 59
	mov	ecx, DWORD PTR _dest$1468[ebp]
	shr	ecx, 1
	mov	DWORD PTR _dest$1468[ebp], ecx
; Line 61
	mov	edx, DWORD PTR _dest$1468[ebp]
	shr	edx, 19					; 00000013H
	and	edx, 7
	or	edx, 240				; 000000f0H
	mov	eax, DWORD PTR _data$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR [eax+1], dl
; Line 62
	mov	ecx, DWORD PTR _dest$1468[ebp]
	shr	ecx, 11					; 0000000bH
	mov	edx, DWORD PTR _data$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [edx], cl
; Line 63
	mov	eax, DWORD PTR _dest$1468[ebp]
	shr	eax, 8
	and	eax, 7
	or	eax, 248				; 000000f8H
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [ecx+3], al
; Line 64
	mov	edx, DWORD PTR _data$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	mov	al, BYTE PTR _dest$1468[ebp]
	mov	BYTE PTR [edx+2], al
; Line 65
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 2
	mov	DWORD PTR _i$[ebp], ecx
$LN3@ARMT_Conve:
; Line 67
	jmp	$LN5@ARMT_Conve
$LN4@ARMT_Conve:
; Line 68
	mov	eax, DWORD PTR _i$[ebp]
$LN8@ARMT_Conve:
; Line 69
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_ARMT_Convert@16 ENDP
_TEXT	ENDS
PUBLIC	_PPC_Convert@16
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_dest$1501 = -12					; size = 4
_src$1496 = -8						; size = 4
_i$ = -4						; size = 4
_data$ = 8						; size = 4
_size$ = 12						; size = 4
_ip$ = 16						; size = 4
_encoding$ = 20						; size = 4
_PPC_Convert@16 PROC
; Line 72
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 74
	cmp	DWORD PTR _size$[ebp], 4
	jae	SHORT $LN7@PPC_Conver
; Line 75
	xor	eax, eax
	jmp	$LN8@PPC_Conver
$LN7@PPC_Conver:
; Line 76
	mov	eax, DWORD PTR _size$[ebp]
	sub	eax, 4
	mov	DWORD PTR _size$[ebp], eax
; Line 77
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@PPC_Conver
$LN5@PPC_Conver:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 4
	mov	DWORD PTR _i$[ebp], ecx
$LN6@PPC_Conver:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _size$[ebp]
	ja	$LN4@PPC_Conver
; Line 79
	mov	eax, DWORD PTR _data$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax]
	sar	ecx, 2
	cmp	ecx, 18					; 00000012H
	jne	$LN3@PPC_Conver
	mov	edx, DWORD PTR _data$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [edx+3]
	and	eax, 3
	cmp	eax, 1
	jne	$LN3@PPC_Conver
; Line 84
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx]
	and	edx, 3
	shl	edx, 24					; 00000018H
	mov	eax, DWORD PTR _data$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	shl	ecx, 16					; 00000010H
	or	edx, ecx
	mov	eax, DWORD PTR _data$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, DWORD PTR _data$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax+3]
	and	ecx, -4					; fffffffcH
	or	edx, ecx
	mov	DWORD PTR _src$1496[ebp], edx
; Line 87
	cmp	DWORD PTR _encoding$[ebp], 0
	je	SHORT $LN2@PPC_Conver
; Line 88
	mov	edx, DWORD PTR _ip$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	add	edx, DWORD PTR _src$1496[ebp]
	mov	DWORD PTR _dest$1501[ebp], edx
; Line 89
	jmp	SHORT $LN1@PPC_Conver
$LN2@PPC_Conver:
; Line 90
	mov	eax, DWORD PTR _ip$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _src$1496[ebp]
	sub	ecx, eax
	mov	DWORD PTR _dest$1501[ebp], ecx
$LN1@PPC_Conver:
; Line 91
	mov	edx, DWORD PTR _dest$1501[ebp]
	shr	edx, 24					; 00000018H
	and	edx, 3
	or	edx, 72					; 00000048H
	mov	eax, DWORD PTR _data$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR [eax], dl
; Line 92
	mov	ecx, DWORD PTR _dest$1501[ebp]
	shr	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _data$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [edx+1], cl
; Line 93
	mov	eax, DWORD PTR _dest$1501[ebp]
	shr	eax, 8
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [ecx+2], al
; Line 94
	mov	edx, DWORD PTR _data$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [edx+3]
	and	eax, 3
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [ecx+3], al
; Line 95
	mov	edx, DWORD PTR _data$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [edx+3]
	or	eax, DWORD PTR _dest$1501[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [ecx+3], al
$LN3@PPC_Conver:
; Line 97
	jmp	$LN5@PPC_Conver
$LN4@PPC_Conver:
; Line 98
	mov	eax, DWORD PTR _i$[ebp]
$LN8@PPC_Conver:
; Line 99
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_PPC_Convert@16 ENDP
_TEXT	ENDS
PUBLIC	_SPARC_Convert@16
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_dest$1531 = -12					; size = 4
_src$1526 = -8						; size = 4
_i$ = -4						; size = 4
_data$ = 8						; size = 4
_size$ = 12						; size = 4
_ip$ = 16						; size = 4
_encoding$ = 20						; size = 4
_SPARC_Convert@16 PROC
; Line 102
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 104
	cmp	DWORD PTR _size$[ebp], 4
	jae	SHORT $LN9@SPARC_Conv
; Line 105
	xor	eax, eax
	jmp	$LN10@SPARC_Conv
$LN9@SPARC_Conv:
; Line 106
	mov	eax, DWORD PTR _size$[ebp]
	sub	eax, 4
	mov	DWORD PTR _size$[ebp], eax
; Line 107
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN8@SPARC_Conv
$LN7@SPARC_Conv:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 4
	mov	DWORD PTR _i$[ebp], ecx
$LN8@SPARC_Conv:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _size$[ebp]
	ja	$LN6@SPARC_Conv
; Line 110
	mov	eax, DWORD PTR _data$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 64					; 00000040H
	jne	SHORT $LN3@SPARC_Conv
	mov	edx, DWORD PTR _data$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	and	eax, 192				; 000000c0H
	je	SHORT $LN4@SPARC_Conv
$LN3@SPARC_Conv:
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 127				; 0000007fH
	jne	$LN5@SPARC_Conv
	mov	eax, DWORD PTR _data$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	and	ecx, 192				; 000000c0H
	cmp	ecx, 192				; 000000c0H
	jne	$LN5@SPARC_Conv
$LN4@SPARC_Conv:
; Line 116
	mov	edx, DWORD PTR _data$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [edx]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	shl	edx, 16					; 00000010H
	or	eax, edx
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx+2]
	shl	edx, 8
	or	eax, edx
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx+3]
	or	eax, edx
	mov	DWORD PTR _src$1526[ebp], eax
; Line 119
	mov	eax, DWORD PTR _src$1526[ebp]
	shl	eax, 2
	mov	DWORD PTR _src$1526[ebp], eax
; Line 120
	cmp	DWORD PTR _encoding$[ebp], 0
	je	SHORT $LN2@SPARC_Conv
; Line 121
	mov	ecx, DWORD PTR _ip$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	add	ecx, DWORD PTR _src$1526[ebp]
	mov	DWORD PTR _dest$1531[ebp], ecx
; Line 122
	jmp	SHORT $LN1@SPARC_Conv
$LN2@SPARC_Conv:
; Line 123
	mov	edx, DWORD PTR _ip$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _src$1526[ebp]
	sub	eax, edx
	mov	DWORD PTR _dest$1531[ebp], eax
$LN1@SPARC_Conv:
; Line 124
	mov	ecx, DWORD PTR _dest$1531[ebp]
	shr	ecx, 2
	mov	DWORD PTR _dest$1531[ebp], ecx
; Line 126
	mov	edx, DWORD PTR _dest$1531[ebp]
	shr	edx, 22					; 00000016H
	and	edx, 1
	xor	eax, eax
	sub	eax, edx
	shl	eax, 22					; 00000016H
	and	eax, 1073741823				; 3fffffffH
	mov	ecx, DWORD PTR _dest$1531[ebp]
	and	ecx, 4194303				; 003fffffH
	or	eax, ecx
	or	eax, 1073741824				; 40000000H
	mov	DWORD PTR _dest$1531[ebp], eax
; Line 128
	mov	edx, DWORD PTR _dest$1531[ebp]
	shr	edx, 24					; 00000018H
	mov	eax, DWORD PTR _data$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR [eax], dl
; Line 129
	mov	ecx, DWORD PTR _dest$1531[ebp]
	shr	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _data$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [edx+1], cl
; Line 130
	mov	eax, DWORD PTR _dest$1531[ebp]
	shr	eax, 8
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [ecx+2], al
; Line 131
	mov	edx, DWORD PTR _data$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	mov	al, BYTE PTR _dest$1531[ebp]
	mov	BYTE PTR [edx+3], al
$LN5@SPARC_Conv:
; Line 133
	jmp	$LN7@SPARC_Conv
$LN6@SPARC_Conv:
; Line 134
	mov	eax, DWORD PTR _i$[ebp]
$LN10@SPARC_Conv:
; Line 135
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_SPARC_Convert@16 ENDP
_TEXT	ENDS
END
