; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\C\Xz.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_XZ_SIG
PUBLIC	_XZ_FOOTER_SIG
CONST	SEGMENT
_XZ_SIG	DB	0fdH
	DB	037H
	DB	07aH
	DB	058H
	DB	05aH
	DB	00H
	ORG $+2
_XZ_FOOTER_SIG DB 059H
	DB	05aH
CONST	ENDS
PUBLIC	_Xz_WriteVarInt@12
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__aullshr:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\c\xz.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_i$ = -4						; size = 4
_buf$ = 8						; size = 4
_v$ = 12						; size = 8
_Xz_WriteVarInt@12 PROC
; Line 15
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 16
	mov	DWORD PTR _i$[ebp], 0
$LN3@Xz_WriteVa:
; Line 19
	mov	eax, DWORD PTR _v$[ebp]
	and	eax, 127				; 0000007fH
	mov	ecx, DWORD PTR _v$[ebp+4]
	and	ecx, 0
	or	eax, 128				; 00000080H
	mov	edx, DWORD PTR _buf$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [edx], al
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
; Line 20
	mov	eax, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR _v$[ebp+4]
	mov	cl, 7
	call	__aullshr
	mov	DWORD PTR _v$[ebp], eax
	mov	DWORD PTR _v$[ebp+4], edx
; Line 22
	mov	ecx, DWORD PTR _v$[ebp]
	or	ecx, DWORD PTR _v$[ebp+4]
	jne	SHORT $LN3@Xz_WriteVa
; Line 23
	mov	edx, DWORD PTR _buf$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [edx-1]
	and	eax, 127				; 0000007fH
	mov	ecx, DWORD PTR _buf$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [ecx-1], al
; Line 24
	mov	eax, DWORD PTR _i$[ebp]
; Line 25
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_Xz_WriteVarInt@12 ENDP
_TEXT	ENDS
PUBLIC	_Xz_Construct@4
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = 8							; size = 4
_Xz_Construct@4 PROC
; Line 28
	push	ebp
	mov	ebp, esp
; Line 29
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 30
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+12], 0
; Line 31
	xor	eax, eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	WORD PTR [ecx], ax
; Line 32
	pop	ebp
	ret	4
_Xz_Construct@4 ENDP
_TEXT	ENDS
PUBLIC	_Xz_Free@8
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = 8							; size = 4
_alloc$ = 12						; size = 4
_Xz_Free@8 PROC
; Line 35
	push	ebp
	mov	ebp, esp
	push	esi
; Line 36
	mov	esi, esp
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _alloc$[ebp]
	push	edx
	mov	eax, DWORD PTR _alloc$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 37
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 38
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+12], 0
; Line 39
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_Xz_Free@8 ENDP
_TEXT	ENDS
PUBLIC	_XzFlags_GetCheckSize@4
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv70 = -8						; size = 4
_t$ = -4						; size = 4
_f$ = 8							; size = 2
_XzFlags_GetCheckSize@4 PROC
; Line 42
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 43
	movzx	eax, WORD PTR _f$[ebp]
	and	eax, 15					; 0000000fH
	mov	DWORD PTR _t$[ebp], eax
; Line 44
	jne	SHORT $LN3@XzFlags_Ge
	mov	DWORD PTR tv70[ebp], 0
	jmp	SHORT $LN4@XzFlags_Ge
$LN3@XzFlags_Ge:
	mov	eax, DWORD PTR _t$[ebp]
	sub	eax, 1
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, 4
	mov	ecx, eax
	shl	edx, cl
	mov	DWORD PTR tv70[ebp], edx
$LN4@XzFlags_Ge:
	mov	eax, DWORD PTR tv70[ebp]
; Line 45
	mov	esp, ebp
	pop	ebp
	ret	4
_XzFlags_GetCheckSize@4 ENDP
_TEXT	ENDS
PUBLIC	_XzCheck_Init@8
EXTRN	_Sha256_Init@4:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv64 = -4						; size = 4
_p$ = 8							; size = 4
_mode$ = 12						; size = 4
_XzCheck_Init@8 PROC
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 49
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _mode$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 50
	mov	edx, DWORD PTR _mode$[ebp]
	mov	DWORD PTR tv64[ebp], edx
	cmp	DWORD PTR tv64[ebp], 1
	je	SHORT $LN3@XzCheck_In
	cmp	DWORD PTR tv64[ebp], 4
	je	SHORT $LN2@XzCheck_In
	cmp	DWORD PTR tv64[ebp], 10			; 0000000aH
	je	SHORT $LN1@XzCheck_In
	jmp	SHORT $LN6@XzCheck_In
$LN3@XzCheck_In:
; Line 52
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+4], -1
	jmp	SHORT $LN6@XzCheck_In
$LN2@XzCheck_In:
; Line 53
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+8], -1
	mov	DWORD PTR [ecx+12], -1
	jmp	SHORT $LN6@XzCheck_In
$LN1@XzCheck_In:
; Line 54
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 16					; 00000010H
	push	edx
	call	_Sha256_Init@4
$LN6@XzCheck_In:
; Line 56
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_XzCheck_Init@8 ENDP
_TEXT	ENDS
PUBLIC	_XzCheck_Update@12
EXTRN	_Sha256_Update@12:PROC
EXTRN	@Crc64Update@16:PROC
EXTRN	@CrcUpdate@12:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv64 = -4						; size = 4
_p$ = 8							; size = 4
_data$ = 12						; size = 4
_size$ = 16						; size = 4
_XzCheck_Update@12 PROC
; Line 59
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 60
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 1
	je	SHORT $LN3@XzCheck_Up
	cmp	DWORD PTR tv64[ebp], 4
	je	SHORT $LN2@XzCheck_Up
	cmp	DWORD PTR tv64[ebp], 10			; 0000000aH
	je	SHORT $LN1@XzCheck_Up
	jmp	SHORT $LN6@XzCheck_Up
$LN3@XzCheck_Up:
; Line 62
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	edx, DWORD PTR _data$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	@CrcUpdate@12
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+4], eax
	jmp	SHORT $LN6@XzCheck_Up
$LN2@XzCheck_Up:
; Line 63
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR [edx+8]
	push	ecx
	mov	edx, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	call	@Crc64Update@16
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], edx
	jmp	SHORT $LN6@XzCheck_Up
$LN1@XzCheck_Up:
; Line 64
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	call	_Sha256_Update@12
$LN6@XzCheck_Up:
; Line 66
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_XzCheck_Update@12 ENDP
_TEXT	ENDS
PUBLIC	_XzCheck_Final@8
EXTRN	_Sha256_Final@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv64 = -16						; size = 4
_v$3063 = -12						; size = 8
_i$3062 = -4						; size = 4
_p$ = 8							; size = 4
_digest$ = 12						; size = 4
_XzCheck_Final@8 PROC
; Line 69
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 70
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 1
	je	SHORT $LN7@XzCheck_Fi
	cmp	DWORD PTR tv64[ebp], 4
	je	SHORT $LN6@XzCheck_Fi
	cmp	DWORD PTR tv64[ebp], 10			; 0000000aH
	je	SHORT $LN2@XzCheck_Fi
	jmp	SHORT $LN1@XzCheck_Fi
$LN7@XzCheck_Fi:
; Line 73
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+4]
	xor	eax, -1
	mov	ecx, DWORD PTR _digest$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 74
	jmp	SHORT $LN8@XzCheck_Fi
$LN6@XzCheck_Fi:
; Line 78
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+8]
	xor	eax, -1
	mov	ecx, DWORD PTR [edx+12]
	xor	ecx, -1
	mov	DWORD PTR _v$3063[ebp], eax
	mov	DWORD PTR _v$3063[ebp+4], ecx
; Line 79
	mov	DWORD PTR _i$3062[ebp], 0
	jmp	SHORT $LN5@XzCheck_Fi
$LN4@XzCheck_Fi:
	mov	edx, DWORD PTR _i$3062[ebp]
	add	edx, 1
	mov	DWORD PTR _i$3062[ebp], edx
	mov	eax, DWORD PTR _v$3063[ebp]
	mov	edx, DWORD PTR _v$3063[ebp+4]
	mov	cl, 8
	call	__aullshr
	mov	DWORD PTR _v$3063[ebp], eax
	mov	DWORD PTR _v$3063[ebp+4], edx
$LN5@XzCheck_Fi:
	cmp	DWORD PTR _i$3062[ebp], 8
	jge	SHORT $LN3@XzCheck_Fi
; Line 80
	mov	eax, DWORD PTR _v$3063[ebp]
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _v$3063[ebp+4]
	and	ecx, 0
	mov	edx, DWORD PTR _digest$[ebp]
	add	edx, DWORD PTR _i$3062[ebp]
	mov	BYTE PTR [edx], al
	jmp	SHORT $LN4@XzCheck_Fi
$LN3@XzCheck_Fi:
; Line 81
	jmp	SHORT $LN8@XzCheck_Fi
$LN2@XzCheck_Fi:
; Line 84
	mov	eax, DWORD PTR _digest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	call	_Sha256_Final@8
; Line 85
	jmp	SHORT $LN8@XzCheck_Fi
$LN1@XzCheck_Fi:
; Line 87
	xor	eax, eax
	jmp	SHORT $LN10@XzCheck_Fi
$LN8@XzCheck_Fi:
; Line 89
	mov	eax, 1
$LN10@XzCheck_Fi:
; Line 90
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_XzCheck_Final@8 ENDP
_TEXT	ENDS
END
