; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\CPP\7zip\UI\Common\Bench.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?g_BenchCpuFreqTemp@@3IA			; g_BenchCpuFreqTemp
CONST	SEGMENT
$SG70848 DB	'LZMA:x1', 00H
$SG70849 DB	'LZMA:x5:mt1', 00H
$SG70850 DB	'LZMA:x5:mt2', 00H
$SG70851 DB	'Deflate:x1', 00H
	ORG $+1
$SG70852 DB	'Deflate:x5', 00H
	ORG $+1
$SG70853 DB	'Deflate:x7', 00H
	ORG $+1
$SG70854 DB	'Deflate64:x5', 00H
	ORG $+3
$SG70855 DB	'BZip2:x1', 00H
	ORG $+3
$SG70856 DB	'BZip2:x5', 00H
	ORG $+3
$SG70857 DB	'BZip2:x5:mt2', 00H
	ORG $+3
$SG70858 DB	'BZip2:x7', 00H
	ORG $+3
$SG70859 DB	'PPMD:x1', 00H
$SG70860 DB	'PPMD:x5', 00H
$SG70861 DB	'Delta:4', 00H
$SG70862 DB	'BCJ', 00H
$SG70863 DB	'AES256CBC:1', 00H
$SG70864 DB	'AES256CBC:2', 00H
$SG70993 DB	' MB,  # ', 00H
	ORG $+3
_g_Bench DD	028H
	DD	011H
	DD	0165H
	DD	091H
	DD	014H
	DD	FLAT:$SG70848
	DD	050H
	DD	018H
	DD	04c4H
	DD	091H
	DD	014H
	DD	FLAT:$SG70849
	DD	050H
	DD	018H
	DD	04c4H
	DD	091H
	DD	014H
	DD	FLAT:$SG70850
	DD	0aH
	DD	010H
	DD	07cH
	DD	028H
	DD	0eH
	DD	FLAT:$SG70851
	DD	014H
	DD	010H
	DD	0178H
	DD	028H
	DD	0eH
	DD	FLAT:$SG70852
	DD	0aH
	DD	010H
	DD	043aH
	DD	028H
	DD	0eH
	DD	FLAT:$SG70853
	DD	0aH
	DD	011H
	DD	01a6H
	DD	028H
	DD	0eH
	DD	FLAT:$SG70854
	DD	0aH
	DD	0fH
	DD	024eH
	DD	045H
	DD	045H
	DD	FLAT:$SG70855
	DD	014H
	DD	013H
	DD	032fH
	DD	07aH
	DD	07aH
	DD	FLAT:$SG70856
	DD	0aH
	DD	013H
	DD	032fH
	DD	07aH
	DD	07aH
	DD	FLAT:$SG70857
	DD	0aH
	DD	013H
	DD	09e2H
	DD	07aH
	DD	07aH
	DD	FLAT:$SG70858
	DD	0aH
	DD	012H
	DD	03f2H
	DD	00H
	DD	047eH
	DD	FLAT:$SG70859
	DD	0aH
	DD	016H
	DD	0677H
	DD	00H
	DD	0726H
	DD	FLAT:$SG70860
	DD	02H
	DD	00H
	DD	06H
	DD	00H
	DD	06H
	DD	FLAT:$SG70861
	DD	02H
	DD	00H
	DD	04H
	DD	00H
	DD	04H
	DD	FLAT:$SG70862
	DD	0aH
	DD	00H
	DD	018H
	DD	00H
	DD	018H
	DD	FLAT:$SG70863
	DD	02H
	DD	00H
	DD	08H
	DD	00H
	DD	02H
	DD	FLAT:$SG70864
$SG70877 DB	'CRC32:1', 00H
$SG70878 DB	'CRC32:4', 00H
$SG70879 DB	'CRC32:8', 00H
$SG70880 DB	'CRC64', 00H
	ORG $+2
$SG70881 DB	'SHA256', 00H
	ORG $+1
$SG70882 DB	'SHA1', 00H
	ORG $+3
_g_Hash	DD	01H
	DD	071cH
	DD	08f8fedabH
	DD	FLAT:$SG70877
	DD	0aH
	DD	022eH
	DD	08f8fedabH
	DD	FLAT:$SG70878
	DD	0aH
	DD	0153H
	DD	08f8fedabH
	DD	FLAT:$SG70879
	DD	0aH
	DD	0200H
	DD	0df1c17ccH
	DD	FLAT:$SG70880
	DD	0aH
	DD	013ecH
	DD	02d79ff2eH
	DD	FLAT:$SG70881
	DD	0aH
	DD	0924H
	DD	04c25132bH
	DD	FLAT:$SG70882
$SG70992 DB	'RAM ', 00H
	ORG $+3
$SG71051 DB	'  | ', 00H
	ORG $+3
$SG71417 DB	'x86', 00H
$SG71508 DB	'testtime', 00H
	ORG $+3
$SG71511 DB	00H, 00H
	ORG $+2
$SG71515 DB	'mt', 00H
	ORG $+1
$SG71518 DB	'*', 00H, 00H, 00H
$SG71521 DB	'*', 00H, 00H, 00H
$SG71531 DB	'CPU Freq:', 00H
	ORG $+2
$SG71555 DB	'CPU hardware threads:', 00H
	ORG $+2
$SG71556 DB	'size: ', 00H
	ORG $+1
$SG71564 DB	'LZMA', 00H
	ORG $+3
$SG71572 DB	'CRC', 00H
$SG71573 DB	'crc32', 00H
	ORG $+2
$SG71594 DB	'Size', 00H
	ORG $+3
$SG71634 DB	'Avg:', 00H
	ORG $+3
$SG71643 DB	'*', 00H
	ORG $+2
$SG71669 DB	'Benchmark threads:   ', 00H
	ORG $+2
$SG71670 DB	'usage:', 00H
	ORG $+1
$SG71679 DB	'Compressing', 00H
$SG71680 DB	'Decompressing', 00H
	ORG $+2
$SG71681 DB	'Method', 00H
	ORG $+1
$SG71682 DB	'Dict', 00H
	ORG $+3
$SG71687 DB	'Speed', 00H
	ORG $+2
$SG71688 DB	'Usage', 00H
	ORG $+2
$SG71689 DB	'R/U', 00H
$SG71690 DB	'Rating', 00H
	ORG $+1
$SG71692 DB	'E/U', 00H
$SG71693 DB	'Effec', 00H
	ORG $+2
$SG71699 DB	'KiB/s', 00H
	ORG $+2
$SG71700 DB	'%', 00H
	ORG $+2
$SG71701 DB	'MIPS', 00H
	ORG $+3
$SG71702 DB	'MIPS', 00H
	ORG $+3
$SG71704 DB	'%', 00H
	ORG $+2
$SG71705 DB	'%', 00H
	ORG $+2
$SG71722 DB	'CPU', 00H
$SG71734 DB	'CPU', 00H
$SG71743 DB	'LZMA', 00H
	ORG $+3
$SG71772 DB	'LZMA', 00H
	ORG $+3
$SG71777 DB	'd', 00H, 00H, 00H
$SG71789 DB	'Avr:', 00H
	ORG $+3
$SG71790 DB	'Tot:', 00H
CONST	ENDS
_DATA	SEGMENT
?g_BenchCpuFreqTemp@@3IA DD 01H				; g_BenchCpuFreqTemp
_kSep	DD	FLAT:$SG71051
_DATA	ENDS
PUBLIC	?Read@CBenchmarkInStream@@UAGJPAXIPAI@Z		; CBenchmarkInStream::Read
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\bench.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_i$69168 = -12						; size = 4
_kMaxBlockSize$ = -8					; size = 4
_remain$ = -4						; size = 4
_this$ = 8						; size = 4
_data$ = 12						; size = 4
_size$ = 16						; size = 4
_processedSize$ = 20					; size = 4
?Read@CBenchmarkInStream@@UAGJPAXIPAI@Z PROC		; CBenchmarkInStream::Read
; Line 205
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 206
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+16]
	sub	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _remain$[ebp], edx
; Line 207
	mov	DWORD PTR _kMaxBlockSize$[ebp], 1048576	; 00100000H
; Line 208
	mov	eax, DWORD PTR _size$[ebp]
	cmp	eax, DWORD PTR _kMaxBlockSize$[ebp]
	jbe	SHORT $LN6@Read
; Line 209
	mov	ecx, DWORD PTR _kMaxBlockSize$[ebp]
	mov	DWORD PTR _size$[ebp], ecx
$LN6@Read:
; Line 210
	mov	edx, DWORD PTR _size$[ebp]
	cmp	edx, DWORD PTR _remain$[ebp]
	jbe	SHORT $LN5@Read
; Line 211
	mov	eax, DWORD PTR _remain$[ebp]
	mov	DWORD PTR _size$[ebp], eax
$LN5@Read:
; Line 212
	mov	DWORD PTR _i$69168[ebp], 0
	jmp	SHORT $LN4@Read
$LN3@Read:
	mov	ecx, DWORD PTR _i$69168[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$69168[ebp], ecx
$LN4@Read:
	mov	edx, DWORD PTR _i$69168[ebp]
	cmp	edx, DWORD PTR _size$[ebp]
	jae	SHORT $LN2@Read
; Line 213
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, DWORD PTR _i$69168[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR _data$[ebp]
	add	edx, DWORD PTR _i$69168[ebp]
	mov	al, BYTE PTR [ecx+eax]
	mov	BYTE PTR [edx], al
	jmp	SHORT $LN3@Read
$LN2@Read:
; Line 214
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
; Line 215
	cmp	DWORD PTR _processedSize$[ebp], 0
	je	SHORT $LN1@Read
; Line 216
	mov	ecx, DWORD PTR _processedSize$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx], edx
$LN1@Read:
; Line 217
	xor	eax, eax
; Line 218
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Read@CBenchmarkInStream@@UAGJPAXIPAI@Z ENDP		; CBenchmarkInStream::Read
_TEXT	ENDS
PUBLIC	?Write@CBenchmarkOutStream@@UAGJPBXIPAI@Z	; CBenchmarkOutStream::Write
EXTRN	@CrcUpdate@12:PROC
EXTRN	_memcpy:PROC
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_curSize$ = -4						; size = 4
_this$ = 8						; size = 4
_data$ = 12						; size = 4
_size$ = 16						; size = 4
_processedSize$ = 20					; size = 4
?Write@CBenchmarkOutStream@@UAGJPBXIPAI@Z PROC		; CBenchmarkOutStream::Write
; Line 246
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 247
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _curSize$[ebp], edx
; Line 248
	mov	eax, DWORD PTR _curSize$[ebp]
	cmp	eax, DWORD PTR _size$[ebp]
	jbe	SHORT $LN6@Write
; Line 249
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR _curSize$[ebp], ecx
$LN6@Write:
; Line 250
	cmp	DWORD PTR _curSize$[ebp], 0
	je	SHORT $LN5@Write
; Line 252
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+24]
	test	eax, eax
	je	SHORT $LN4@Write
; Line 253
	mov	ecx, DWORD PTR _curSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+20]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN4@Write:
; Line 254
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+25]
	test	ecx, ecx
	je	SHORT $LN3@Write
; Line 255
	mov	edx, DWORD PTR _curSize$[ebp]
	push	edx
	mov	edx, DWORD PTR _data$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	@CrcUpdate@12
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+28], eax
$LN3@Write:
; Line 256
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, DWORD PTR _curSize$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], eax
$LN5@Write:
; Line 258
	cmp	DWORD PTR _processedSize$[ebp], 0
	je	SHORT $LN2@Write
; Line 259
	mov	edx, DWORD PTR _processedSize$[ebp]
	mov	eax, DWORD PTR _curSize$[ebp]
	mov	DWORD PTR [edx], eax
$LN2@Write:
; Line 260
	mov	ecx, DWORD PTR _curSize$[ebp]
	cmp	ecx, DWORD PTR _size$[ebp]
	je	SHORT $LN1@Write
; Line 263
	mov	eax, -2147467259			; 80004005H
	jmp	SHORT $LN7@Write
$LN1@Write:
; Line 265
	xor	eax, eax
$LN7@Write:
; Line 266
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Write@CBenchmarkOutStream@@UAGJPBXIPAI@Z ENDP		; CBenchmarkOutStream::Write
_TEXT	ENDS
PUBLIC	?Write@CCrcOutStream@@UAGJPBXIPAI@Z		; CCrcOutStream::Write
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = 8						; size = 4
_data$ = 12						; size = 4
_size$ = 16						; size = 4
_processedSize$ = 20					; size = 4
?Write@CCrcOutStream@@UAGJPBXIPAI@Z PROC		; CCrcOutStream::Write
; Line 283
	push	ebp
	mov	ebp, esp
; Line 284
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	test	ecx, ecx
	je	SHORT $LN2@Write@2
; Line 285
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	edx, DWORD PTR _data$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	@CrcUpdate@12
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN2@Write@2:
; Line 286
	cmp	DWORD PTR _processedSize$[ebp], 0
	je	SHORT $LN1@Write@2
; Line 287
	mov	edx, DWORD PTR _processedSize$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx], eax
$LN1@Write@2:
; Line 288
	xor	eax, eax
; Line 289
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	16					; 00000010H
?Write@CCrcOutStream@@UAGJPBXIPAI@Z ENDP		; CCrcOutStream::Write
_TEXT	ENDS
PUBLIC	?GetWinUserTime@@YG_KXZ				; GetWinUserTime
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	__imp__GetProcessTimes@20:PROC
EXTRN	__imp__GetCurrentProcess@0:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_userTime$ = -60					; size = 8
_kernelTime$ = -44					; size = 8
_exitTime$ = -28					; size = 8
_creationTime$ = -12					; size = 8
?GetWinUserTime@@YG_KXZ PROC				; GetWinUserTime
; Line 356
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 364
	mov	esi, esp
	lea	eax, DWORD PTR _userTime$[ebp]
	push	eax
	lea	ecx, DWORD PTR _kernelTime$[ebp]
	push	ecx
	lea	edx, DWORD PTR _exitTime$[ebp]
	push	edx
	lea	eax, DWORD PTR _creationTime$[ebp]
	push	eax
	mov	edi, esp
	call	DWORD PTR __imp__GetCurrentProcess@0
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	DWORD PTR __imp__GetProcessTimes@20
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN1@GetWinUser
; Line 365
	lea	ecx, DWORD PTR _userTime$[ebp]
	push	ecx
	call	?GetTime64@@YG_KABU_FILETIME@@@Z	; GetTime64
	mov	esi, eax
	mov	edi, edx
	lea	edx, DWORD PTR _kernelTime$[ebp]
	push	edx
	call	?GetTime64@@YG_KABU_FILETIME@@@Z	; GetTime64
	add	esi, eax
	adc	edi, edx
	mov	eax, esi
	mov	edx, edi
	jmp	SHORT $LN2@GetWinUser
$LN1@GetWinUser:
; Line 366
	mov	esi, esp
	call	DWORD PTR __imp__GetTickCount@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, 10000				; 00002710H
	mul	ecx
$LN2@GetWinUser:
; Line 367
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@GetWinUser
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 64					; 00000040H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN9@GetWinUser:
	DD	4
	DD	$LN8@GetWinUser
$LN8@GetWinUser:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN4@GetWinUser
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN5@GetWinUser
	DD	-44					; ffffffd4H
	DD	8
	DD	$LN6@GetWinUser
	DD	-60					; ffffffc4H
	DD	8
	DD	$LN7@GetWinUser
$LN7@GetWinUser:
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	84					; 00000054H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN6@GetWinUser:
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	84					; 00000054H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN5@GetWinUser:
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	84					; 00000054H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN4@GetWinUser:
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	84					; 00000054H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
?GetWinUserTime@@YG_KXZ ENDP				; GetWinUserTime
_TEXT	ENDS
EXTRN	__allshl:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_t$ = 8							; size = 4
?GetTime64@@YG_KABU_FILETIME@@@Z PROC			; GetTime64
; Line 354
	push	ebp
	mov	ebp, esp
	push	esi
	mov	eax, DWORD PTR _t$[ebp]
	mov	eax, DWORD PTR [eax+4]
	xor	edx, edx
	mov	cl, 32					; 00000020H
	call	__allshl
	mov	ecx, DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR [ecx]
	xor	esi, esi
	or	eax, ecx
	or	edx, esi
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
?GetTime64@@YG_KABU_FILETIME@@@Z ENDP			; GetTime64
_TEXT	ENDS
PUBLIC	?Init@CUserTime@@QAEXXZ				; CUserTime::Init
PUBLIC	?SetStartTime@CBenchInfoCalc@@QAEXXZ		; CBenchInfoCalc::SetStartTime
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SetStartTime@CBenchInfoCalc@@QAEXXZ PROC		; CBenchInfoCalc::SetStartTime
; _this$ = ecx
; Line 422
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 423
	call	?GetFreq@@YG_KXZ			; GetFreq
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], edx
; Line 424
	call	?GetUserFreq@@YG_KXZ			; GetUserFreq
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], eax
	mov	DWORD PTR [ecx+28], edx
; Line 425
	call	?GetTimeCount@@YG_KXZ			; GetTimeCount
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
; Line 426
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
; Line 427
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	?Init@CUserTime@@QAEXXZ			; CUserTime::Init
; Line 428
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?SetStartTime@CBenchInfoCalc@@QAEXXZ ENDP		; CBenchInfoCalc::SetStartTime
; Function compile flags: /Odtp /RTCsu
?GetTimeCount@@YG_KXZ PROC				; GetTimeCount
; Line 292
	push	ebp
	mov	ebp, esp
	push	esi
; Line 308
	mov	esi, esp
	call	DWORD PTR __imp__GetTickCount@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	xor	edx, edx
; Line 310
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?GetTimeCount@@YG_KXZ ENDP				; GetTimeCount
; Function compile flags: /Odtp /RTCsu
?GetFreq@@YG_KXZ PROC					; GetFreq
; Line 313
	push	ebp
	mov	ebp, esp
; Line 326
	mov	eax, 1000				; 000003e8H
	xor	edx, edx
; Line 328
	pop	ebp
	ret	0
?GetFreq@@YG_KXZ ENDP					; GetFreq
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Init@CUserTime@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Init@CUserTime@@QAEXXZ PROC				; CUserTime::Init, COMDAT
; _this$ = ecx
; Line 373
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	call	?GetWinUserTime@@YG_KXZ			; GetWinUserTime
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Init@CUserTime@@QAEXXZ ENDP				; CUserTime::Init
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
_TEXT	SEGMENT
?GetUserFreq@@YG_KXZ PROC				; GetUserFreq
; Line 380
	push	ebp
	mov	ebp, esp
; Line 384
	mov	eax, 10000000				; 00989680H
	xor	edx, edx
; Line 386
	pop	ebp
	ret	0
?GetUserFreq@@YG_KXZ ENDP				; GetUserFreq
_TEXT	ENDS
PUBLIC	?GetUserTime@CUserTime@@QAE_KXZ			; CUserTime::GetUserTime
PUBLIC	?SetFinishTime@CBenchInfoCalc@@QAEXAAUCBenchInfo@@@Z ; CBenchInfoCalc::SetFinishTime
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dest$ = 8						; size = 4
?SetFinishTime@CBenchInfoCalc@@QAEXAAUCBenchInfo@@@Z PROC ; CBenchInfoCalc::SetFinishTime
; _this$ = ecx
; Line 431
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 432
	mov	esi, DWORD PTR _this$[ebp]
	mov	ecx, 14					; 0000000eH
	mov	edi, DWORD PTR _dest$[ebp]
	rep movsd
; Line 433
	call	?GetTimeCount@@YG_KXZ			; GetTimeCount
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx]
	sbb	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
; Line 434
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	?GetUserTime@CUserTime@@QAE_KXZ		; CUserTime::GetUserTime
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	DWORD PTR [ecx+20], edx
; Line 435
	pop	edi
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetFinishTime@CBenchInfoCalc@@QAEXAAUCBenchInfo@@@Z ENDP ; CBenchInfoCalc::SetFinishTime
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetUserTime@CUserTime@@QAE_KXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUserTime@CUserTime@@QAE_KXZ PROC			; CUserTime::GetUserTime, COMDAT
; _this$ = ecx
; Line 374
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	call	?GetWinUserTime@@YG_KXZ			; GetWinUserTime
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx]
	sbb	edx, DWORD PTR [ecx+4]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUserTime@CUserTime@@QAE_KXZ ENDP			; CUserTime::GetUserTime
_TEXT	ENDS
PUBLIC	?SetResult@CBenchProgressStatus@@QAEXJ@Z	; CBenchProgressStatus::SetResult
PUBLIC	??0CBenchInfo@@QAE@XZ				; CBenchInfo::CBenchInfo
PUBLIC	?GetResult@CBenchProgressStatus@@QAEJXZ		; CBenchProgressStatus::GetResult
PUBLIC	?SetRatioInfo@CBenchProgressInfo@@UAGJPB_K0@Z	; CBenchProgressInfo::SetRatioInfo
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_info$ = -64						; size = 56
_res$ = -4						; size = 4
_this$ = 8						; size = 4
_inSize$ = 12						; size = 4
_outSize$ = 16						; size = 4
?SetRatioInfo@CBenchProgressInfo@@UAGJPB_K0@Z PROC	; CBenchProgressInfo::SetRatioInfo
; Line 453
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-68]
	mov	ecx, 17					; 00000011H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 454
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	call	?GetResult@CBenchProgressStatus@@QAEJXZ	; CBenchProgressStatus::GetResult
	mov	DWORD PTR _res$[ebp], eax
; Line 455
	cmp	DWORD PTR _res$[ebp], 0
	je	SHORT $LN5@SetRatioIn
; Line 456
	mov	eax, DWORD PTR _res$[ebp]
	jmp	$LN6@SetRatioIn
$LN5@SetRatioIn:
; Line 457
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+80], 0
	jne	SHORT $LN4@SetRatioIn
; Line 458
	mov	eax, DWORD PTR _res$[ebp]
	jmp	$LN6@SetRatioIn
$LN4@SetRatioIn:
; Line 459
	lea	ecx, DWORD PTR _info$[ebp]
	call	??0CBenchInfo@@QAE@XZ			; CBenchInfo::CBenchInfo
; Line 460
	lea	edx, DWORD PTR _info$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?SetFinishTime@CBenchInfoCalc@@QAEXAAUCBenchInfo@@@Z ; CBenchInfoCalc::SetFinishTime
; Line 461
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	movzx	edx, BYTE PTR [ecx+28]
	test	edx, edx
	je	SHORT $LN3@SetRatioIn
; Line 463
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _inSize$[ebp]
	mov	edx, DWORD PTR [eax+40]
	add	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+44]
	adc	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _info$[ebp+32], edx
	mov	DWORD PTR _info$[ebp+36], eax
; Line 464
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _outSize$[ebp]
	mov	eax, DWORD PTR [ecx+48]
	add	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx+52]
	adc	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _info$[ebp+40], eax
	mov	DWORD PTR _info$[ebp+44], ecx
; Line 465
	mov	esi, esp
	push	0
	lea	edx, DWORD PTR _info$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+80]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _res$[ebp], eax
; Line 467
	jmp	SHORT $LN2@SetRatioIn
$LN3@SetRatioIn:
; Line 469
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _inSize$[ebp]
	mov	eax, DWORD PTR [ecx+48]
	add	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx+52]
	adc	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _info$[ebp+40], eax
	mov	DWORD PTR _info$[ebp+44], ecx
; Line 470
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _outSize$[ebp]
	mov	ecx, DWORD PTR [edx+40]
	add	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx+44]
	adc	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _info$[ebp+32], ecx
	mov	DWORD PTR _info$[ebp+36], edx
; Line 471
	mov	esi, esp
	push	0
	lea	eax, DWORD PTR _info$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _res$[ebp], eax
$LN2@SetRatioIn:
; Line 473
	cmp	DWORD PTR _res$[ebp], 0
	je	SHORT $LN1@SetRatioIn
; Line 474
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+72]
	call	?SetResult@CBenchProgressStatus@@QAEXJ@Z ; CBenchProgressStatus::SetResult
$LN1@SetRatioIn:
; Line 475
	mov	eax, DWORD PTR _res$[ebp]
$LN6@SetRatioIn:
; Line 476
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@SetRatioIn
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 68					; 00000044H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN10@SetRatioIn:
	DD	1
	DD	$LN9@SetRatioIn
$LN9@SetRatioIn:
	DD	-64					; ffffffc0H
	DD	56					; 00000038H
	DD	$LN8@SetRatioIn
$LN8@SetRatioIn:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	0
?SetRatioInfo@CBenchProgressInfo@@UAGJPB_K0@Z ENDP	; CBenchProgressInfo::SetRatioInfo
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CBenchInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CBenchInfo@@QAE@XZ PROC				; CBenchInfo::CBenchInfo, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\bench.h
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], 0
	mov	DWORD PTR [eax+52], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CBenchInfo@@QAE@XZ ENDP				; CBenchInfo::CBenchInfo
_TEXT	ENDS
PUBLIC	??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock
PUBLIC	??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z ; NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetResult@CBenchProgressStatus@@QAEXJ@Z
_TEXT	SEGMENT
_lock$ = -12						; size = 4
_this$ = -4						; size = 4
_res$ = 8						; size = 4
?SetResult@CBenchProgressStatus@@QAEXJ@Z PROC		; CBenchProgressStatus::SetResult, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\bench.cpp
; Line 397
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 399
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _lock$[ebp]
	call	??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z ; NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock
; Line 401
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _res$[ebp]
	mov	DWORD PTR [ecx+24], edx
; Line 402
	lea	ecx, DWORD PTR _lock$[ebp]
	call	??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@SetResult
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN6@SetResult:
	DD	1
	DD	$LN5@SetResult
$LN5@SetResult:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN4@SetResult
$LN4@SetResult:
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
?SetResult@CBenchProgressStatus@@QAEXJ@Z ENDP		; CBenchProgressStatus::SetResult
_TEXT	ENDS
PUBLIC	?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ; NWindows::NSynchronization::CCriticalSection::Enter
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_object$ = 8						; size = 4
??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z PROC ; NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\synchronization.h
; Line 158
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _object$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ; NWindows::NSynchronization::CCriticalSection::Enter
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z ENDP ; NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock
_TEXT	ENDS
EXTRN	__imp__EnterCriticalSection@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ PROC ; NWindows::NSynchronization::CCriticalSection::Enter, COMDAT
; _this$ = ecx
; Line 149
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	DWORD PTR __imp__EnterCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ENDP ; NWindows::NSynchronization::CCriticalSection::Enter
_TEXT	ENDS
PUBLIC	?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ ; NWindows::NSynchronization::CCriticalSectionLock::Unlock
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ PROC ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock, COMDAT
; _this$ = ecx
; Line 159
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ ; NWindows::NSynchronization::CCriticalSectionLock::Unlock
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ENDP ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock
_TEXT	ENDS
PUBLIC	?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ; NWindows::NSynchronization::CCriticalSection::Leave
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ PROC ; NWindows::NSynchronization::CCriticalSectionLock::Unlock, COMDAT
; _this$ = ecx
; Line 156
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ; NWindows::NSynchronization::CCriticalSection::Leave
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ ENDP ; NWindows::NSynchronization::CCriticalSectionLock::Unlock
_TEXT	ENDS
EXTRN	__imp__LeaveCriticalSection@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ PROC ; NWindows::NSynchronization::CCriticalSection::Leave, COMDAT
; _this$ = ecx
; Line 150
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	DWORD PTR __imp__LeaveCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ENDP ; NWindows::NSynchronization::CCriticalSection::Leave
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetResult@CBenchProgressStatus@@QAEJXZ
_TEXT	SEGMENT
$T72603 = -20						; size = 4
_lock$ = -12						; size = 4
_this$ = -4						; size = 4
?GetResult@CBenchProgressStatus@@QAEJXZ PROC		; CBenchProgressStatus::GetResult, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\bench.cpp
; Line 404
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 406
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _lock$[ebp]
	call	??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z ; NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock
; Line 408
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR $T72603[ebp], edx
	lea	ecx, DWORD PTR _lock$[ebp]
	call	??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock
	mov	eax, DWORD PTR $T72603[ebp]
; Line 409
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@GetResult
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@GetResult:
	DD	1
	DD	$LN5@GetResult
$LN5@GetResult:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN4@GetResult
$LN4@GetResult:
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
?GetResult@CBenchProgressStatus@@QAEJXZ ENDP		; CBenchProgressStatus::GetResult
_TEXT	ENDS
PUBLIC	?GetUsage@CBenchInfo@@QBE_KXZ			; CBenchInfo::GetUsage
EXTRN	__aulldiv:PROC
EXTRN	__allmul:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_globalFreq$ = -64					; size = 8
_globalTime$ = -48					; size = 8
_userFreq$ = -32					; size = 8
_userTime$ = -16					; size = 8
_this$ = -4						; size = 4
?GetUsage@CBenchInfo@@QBE_KXZ PROC			; CBenchInfo::GetUsage
; _this$ = ecx
; Line 499
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-68]
	mov	ecx, 17					; 00000011H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 500
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _userTime$[ebp], ecx
	mov	edx, DWORD PTR [eax+20]
	mov	DWORD PTR _userTime$[ebp+4], edx
; Line 501
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _userFreq$[ebp], ecx
	mov	edx, DWORD PTR [eax+28]
	mov	DWORD PTR _userFreq$[ebp+4], edx
; Line 502
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _globalTime$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _globalTime$[ebp+4], edx
; Line 503
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _globalFreq$[ebp], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _globalFreq$[ebp+4], edx
; Line 504
	lea	eax, DWORD PTR _userFreq$[ebp]
	push	eax
	lea	ecx, DWORD PTR _userTime$[ebp]
	push	ecx
	call	?NormalizeVals@@YGXAA_K0@Z		; NormalizeVals
; Line 505
	lea	edx, DWORD PTR _globalTime$[ebp]
	push	edx
	lea	eax, DWORD PTR _globalFreq$[ebp]
	push	eax
	call	?NormalizeVals@@YGXAA_K0@Z		; NormalizeVals
; Line 506
	mov	ecx, DWORD PTR _userFreq$[ebp]
	or	ecx, DWORD PTR _userFreq$[ebp+4]
	jne	SHORT $LN2@GetUsage
; Line 507
	mov	DWORD PTR _userFreq$[ebp], 1
	mov	DWORD PTR _userFreq$[ebp+4], 0
$LN2@GetUsage:
; Line 508
	mov	edx, DWORD PTR _globalTime$[ebp]
	or	edx, DWORD PTR _globalTime$[ebp+4]
	jne	SHORT $LN1@GetUsage
; Line 509
	mov	DWORD PTR _globalTime$[ebp], 1
	mov	DWORD PTR _globalTime$[ebp+4], 0
$LN1@GetUsage:
; Line 510
	mov	eax, DWORD PTR _globalFreq$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _globalFreq$[ebp]
	push	ecx
	mov	edx, DWORD PTR _userTime$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _userTime$[ebp]
	push	eax
	call	__allmul
	push	0
	push	1000000					; 000f4240H
	push	edx
	push	eax
	call	__allmul
	mov	ecx, DWORD PTR _userFreq$[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR _userFreq$[ebp]
	push	ecx
	push	edx
	push	eax
	call	__aulldiv
	mov	ecx, DWORD PTR _globalTime$[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR _globalTime$[ebp]
	push	ecx
	push	edx
	push	eax
	call	__aulldiv
; Line 511
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@GetUsage
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 68					; 00000044H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN10@GetUsage:
	DD	4
	DD	$LN9@GetUsage
$LN9@GetUsage:
	DD	-16					; fffffff0H
	DD	8
	DD	$LN5@GetUsage
	DD	-32					; ffffffe0H
	DD	8
	DD	$LN6@GetUsage
	DD	-48					; ffffffd0H
	DD	8
	DD	$LN7@GetUsage
	DD	-64					; ffffffc0H
	DD	8
	DD	$LN8@GetUsage
$LN8@GetUsage:
	DB	103					; 00000067H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	98					; 00000062H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	70					; 00000046H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	113					; 00000071H
	DB	0
$LN7@GetUsage:
	DB	103					; 00000067H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	98					; 00000062H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	84					; 00000054H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN6@GetUsage:
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	70					; 00000046H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	113					; 00000071H
	DB	0
$LN5@GetUsage:
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	84					; 00000054H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
?GetUsage@CBenchInfo@@QBE_KXZ ENDP			; CBenchInfo::GetUsage
_TEXT	ENDS
EXTRN	__aullshr:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv68 = -4						; size = 4
_v1$ = 8						; size = 4
_v2$ = 12						; size = 4
?NormalizeVals@@YGXAA_K0@Z PROC				; NormalizeVals
; Line 490
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
$LN2@NormalizeV:
; Line 491
	mov	eax, DWORD PTR _v1$[ebp]
	mov	DWORD PTR tv68[ebp], eax
	mov	ecx, DWORD PTR tv68[ebp]
	cmp	DWORD PTR [ecx+4], 0
	ja	SHORT $LN5@NormalizeV
	mov	edx, DWORD PTR tv68[ebp]
	cmp	DWORD PTR [edx], 1000000		; 000f4240H
	jbe	SHORT $LN3@NormalizeV
$LN5@NormalizeV:
; Line 493
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	mov	cl, 1
	call	__aullshr
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
; Line 494
	mov	edx, DWORD PTR _v2$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+4]
	mov	cl, 1
	call	__aullshr
	mov	ecx, DWORD PTR _v2$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
; Line 495
	jmp	SHORT $LN2@NormalizeV
$LN3@NormalizeV:
; Line 496
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?NormalizeVals@@YGXAA_K0@Z ENDP				; NormalizeVals
_TEXT	ENDS
PUBLIC	?GetRatingPerUsage@CBenchInfo@@QBE_K_K@Z	; CBenchInfo::GetRatingPerUsage
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_globalFreq$ = -64					; size = 8
_globalTime$ = -48					; size = 8
_userFreq$ = -32					; size = 8
_userTime$ = -16					; size = 8
_this$ = -4						; size = 4
_rating$ = 8						; size = 8
?GetRatingPerUsage@CBenchInfo@@QBE_K_K@Z PROC		; CBenchInfo::GetRatingPerUsage
; _this$ = ecx
; Line 514
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-68]
	mov	ecx, 17					; 00000011H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 515
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _userTime$[ebp], ecx
	mov	edx, DWORD PTR [eax+20]
	mov	DWORD PTR _userTime$[ebp+4], edx
; Line 516
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _userFreq$[ebp], ecx
	mov	edx, DWORD PTR [eax+28]
	mov	DWORD PTR _userFreq$[ebp+4], edx
; Line 517
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _globalTime$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _globalTime$[ebp+4], edx
; Line 518
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _globalFreq$[ebp], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _globalFreq$[ebp+4], edx
; Line 519
	lea	eax, DWORD PTR _userTime$[ebp]
	push	eax
	lea	ecx, DWORD PTR _userFreq$[ebp]
	push	ecx
	call	?NormalizeVals@@YGXAA_K0@Z		; NormalizeVals
; Line 520
	lea	edx, DWORD PTR _globalFreq$[ebp]
	push	edx
	lea	eax, DWORD PTR _globalTime$[ebp]
	push	eax
	call	?NormalizeVals@@YGXAA_K0@Z		; NormalizeVals
; Line 521
	mov	ecx, DWORD PTR _globalFreq$[ebp]
	or	ecx, DWORD PTR _globalFreq$[ebp+4]
	jne	SHORT $LN2@GetRatingP
; Line 522
	mov	DWORD PTR _globalFreq$[ebp], 1
	mov	DWORD PTR _globalFreq$[ebp+4], 0
$LN2@GetRatingP:
; Line 523
	mov	edx, DWORD PTR _userTime$[ebp]
	or	edx, DWORD PTR _userTime$[ebp+4]
	jne	SHORT $LN1@GetRatingP
; Line 524
	mov	DWORD PTR _userTime$[ebp], 1
	mov	DWORD PTR _userTime$[ebp+4], 0
$LN1@GetRatingP:
; Line 525
	mov	eax, DWORD PTR _globalTime$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _globalTime$[ebp]
	push	ecx
	mov	edx, DWORD PTR _userFreq$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _userFreq$[ebp]
	push	eax
	call	__allmul
	mov	ecx, DWORD PTR _globalFreq$[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR _globalFreq$[ebp]
	push	ecx
	push	edx
	push	eax
	call	__aulldiv
	mov	ecx, DWORD PTR _rating$[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR _rating$[ebp]
	push	ecx
	push	edx
	push	eax
	call	__allmul
	mov	ecx, DWORD PTR _userTime$[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR _userTime$[ebp]
	push	ecx
	push	edx
	push	eax
	call	__aulldiv
; Line 526
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@GetRatingP
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 68					; 00000044H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN10@GetRatingP:
	DD	4
	DD	$LN9@GetRatingP
$LN9@GetRatingP:
	DD	-16					; fffffff0H
	DD	8
	DD	$LN5@GetRatingP
	DD	-32					; ffffffe0H
	DD	8
	DD	$LN6@GetRatingP
	DD	-48					; ffffffd0H
	DD	8
	DD	$LN7@GetRatingP
	DD	-64					; ffffffc0H
	DD	8
	DD	$LN8@GetRatingP
$LN8@GetRatingP:
	DB	103					; 00000067H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	98					; 00000062H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	70					; 00000046H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	113					; 00000071H
	DB	0
$LN7@GetRatingP:
	DB	103					; 00000067H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	98					; 00000062H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	84					; 00000054H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN6@GetRatingP:
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	70					; 00000046H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	113					; 00000071H
	DB	0
$LN5@GetRatingP:
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	84					; 00000054H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
?GetRatingPerUsage@CBenchInfo@@QBE_K_K@Z ENDP		; CBenchInfo::GetRatingPerUsage
_TEXT	ENDS
PUBLIC	?GetSpeed@CBenchInfo@@QBE_K_K@Z			; CBenchInfo::GetSpeed
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_numCommands$ = 8					; size = 8
?GetSpeed@CBenchInfo@@QBE_K_K@Z PROC			; CBenchInfo::GetSpeed
; _this$ = ecx
; Line 538
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 539
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR _numCommands$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _numCommands$[ebp]
	push	ecx
	call	?MyMultDiv64@@YG_K_K00@Z		; MyMultDiv64
; Line 540
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?GetSpeed@CBenchInfo@@QBE_K_K@Z ENDP			; CBenchInfo::GetSpeed
; Function compile flags: /Odtp /RTCsu
_elTime$ = -12						; size = 8
_value$ = 8						; size = 8
_elapsedTime$ = 16					; size = 8
_freq$ = 24						; size = 8
?MyMultDiv64@@YG_K_K00@Z PROC				; MyMultDiv64
; Line 529
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 530
	mov	eax, DWORD PTR _elapsedTime$[ebp]
	mov	DWORD PTR _elTime$[ebp], eax
	mov	ecx, DWORD PTR _elapsedTime$[ebp+4]
	mov	DWORD PTR _elTime$[ebp+4], ecx
; Line 531
	lea	edx, DWORD PTR _elTime$[ebp]
	push	edx
	lea	eax, DWORD PTR _freq$[ebp]
	push	eax
	call	?NormalizeVals@@YGXAA_K0@Z		; NormalizeVals
; Line 532
	mov	ecx, DWORD PTR _elTime$[ebp]
	or	ecx, DWORD PTR _elTime$[ebp+4]
	jne	SHORT $LN1@MyMultDiv6
; Line 533
	mov	DWORD PTR _elTime$[ebp], 1
	mov	DWORD PTR _elTime$[ebp+4], 0
$LN1@MyMultDiv6:
; Line 534
	mov	edx, DWORD PTR _freq$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _freq$[ebp]
	push	eax
	mov	ecx, DWORD PTR _value$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _elTime$[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR _elTime$[ebp]
	push	ecx
	push	edx
	push	eax
	call	__aulldiv
; Line 535
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@MyMultDiv6
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
	npad	1
$LN6@MyMultDiv6:
	DD	1
	DD	$LN5@MyMultDiv6
$LN5@MyMultDiv6:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN4@MyMultDiv6
$LN4@MyMultDiv6:
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	84					; 00000054H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
?MyMultDiv64@@YG_K_K00@Z ENDP				; MyMultDiv64
_TEXT	ENDS
PUBLIC	?SetLzmaCompexity@CBenchProps@@QAEXXZ		; CBenchProps::SetLzmaCompexity
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SetLzmaCompexity@CBenchProps@@QAEXXZ PROC		; CBenchProps::SetLzmaCompexity
; _this$ = ecx
; Line 568
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 569
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 1200			; 000004b0H
; Line 570
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 4
; Line 571
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 190			; 000000beH
; Line 572
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax], 1
; Line 573
	mov	esp, ebp
	pop	ebp
	ret	0
?SetLzmaCompexity@CBenchProps@@QAEXXZ ENDP		; CBenchProps::SetLzmaCompexity
_TEXT	ENDS
PUBLIC	?GetCompressRating@CBenchProps@@QAE_KI_K00@Z	; CBenchProps::GetCompressRating
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_numCommands$ = -28					; size = 8
_t$69522 = -20						; size = 8
_encComplex$ = -12					; size = 8
_this$ = -4						; size = 4
_dictSize$ = 8						; size = 4
_elapsedTime$ = 12					; size = 8
_freq$ = 20						; size = 8
_size$ = 28						; size = 8
?GetCompressRating@CBenchProps@@QAE_KI_K00@Z PROC	; CBenchProps::GetCompressRating
; _this$ = ecx
; Line 576
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 577
	cmp	DWORD PTR _dictSize$[ebp], 262144	; 00040000H
	jae	SHORT $LN2@GetCompres
; Line 578
	mov	DWORD PTR _dictSize$[ebp], 262144	; 00040000H
$LN2@GetCompres:
; Line 579
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	xor	edx, edx
	mov	DWORD PTR _encComplex$[ebp], ecx
	mov	DWORD PTR _encComplex$[ebp+4], edx
; Line 580
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN1@GetCompres
; Line 582
	mov	edx, DWORD PTR _dictSize$[ebp]
	push	edx
	call	?GetLogSize@@YGII@Z			; GetLogSize
	sub	eax, 4608				; 00001200H
	xor	ecx, ecx
	mov	DWORD PTR _t$69522[ebp], eax
	mov	DWORD PTR _t$69522[ebp+4], ecx
; Line 583
	mov	edx, DWORD PTR _t$69522[ebp+4]
	push	edx
	mov	eax, DWORD PTR _t$69522[ebp]
	push	eax
	mov	ecx, DWORD PTR _t$69522[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _t$69522[ebp]
	push	edx
	call	__allmul
	push	0
	push	5
	push	edx
	push	eax
	call	__allmul
	mov	cl, 16					; 00000010H
	call	__aullshr
	add	eax, 870				; 00000366H
	adc	edx, 0
	mov	DWORD PTR _encComplex$[ebp], eax
	mov	DWORD PTR _encComplex$[ebp+4], edx
$LN1@GetCompres:
; Line 585
	mov	eax, DWORD PTR _encComplex$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _encComplex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _size$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	call	__allmul
	mov	DWORD PTR _numCommands$[ebp], eax
	mov	DWORD PTR _numCommands$[ebp+4], edx
; Line 586
	mov	ecx, DWORD PTR _freq$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _freq$[ebp]
	push	edx
	mov	eax, DWORD PTR _elapsedTime$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _elapsedTime$[ebp]
	push	ecx
	mov	edx, DWORD PTR _numCommands$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _numCommands$[ebp]
	push	eax
	call	?MyMultDiv64@@YG_K_K00@Z		; MyMultDiv64
; Line 587
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
?GetCompressRating@CBenchProps@@QAE_KI_K00@Z ENDP	; CBenchProps::GetCompressRating
; Function compile flags: /Odtp /RTCsu
_j$69432 = -8						; size = 4
_i$69428 = -4						; size = 4
_size$ = 8						; size = 4
?GetLogSize@@YGII@Z PROC				; GetLogSize
; Line 481
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 482
	mov	DWORD PTR _i$69428[ebp], 8
	jmp	SHORT $LN7@GetLogSize
$LN6@GetLogSize:
	mov	eax, DWORD PTR _i$69428[ebp]
	add	eax, 1
	mov	DWORD PTR _i$69428[ebp], eax
$LN7@GetLogSize:
	cmp	DWORD PTR _i$69428[ebp], 32		; 00000020H
	jge	SHORT $LN5@GetLogSize
; Line 483
	mov	DWORD PTR _j$69432[ebp], 0
	jmp	SHORT $LN4@GetLogSize
$LN3@GetLogSize:
	mov	ecx, DWORD PTR _j$69432[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$69432[ebp], ecx
$LN4@GetLogSize:
	cmp	DWORD PTR _j$69432[ebp], 256		; 00000100H
	jae	SHORT $LN2@GetLogSize
; Line 484
	mov	edx, 1
	mov	ecx, DWORD PTR _i$69428[ebp]
	shl	edx, cl
	mov	ecx, DWORD PTR _i$69428[ebp]
	sub	ecx, 8
	mov	eax, DWORD PTR _j$69432[ebp]
	shl	eax, cl
	add	edx, eax
	cmp	DWORD PTR _size$[ebp], edx
	ja	SHORT $LN1@GetLogSize
; Line 485
	mov	eax, DWORD PTR _i$69428[ebp]
	shl	eax, 8
	add	eax, DWORD PTR _j$69432[ebp]
	jmp	SHORT $LN8@GetLogSize
$LN1@GetLogSize:
; Line 486
	jmp	SHORT $LN3@GetLogSize
$LN2@GetLogSize:
	jmp	SHORT $LN6@GetLogSize
$LN5@GetLogSize:
	mov	eax, 8192				; 00002000H
$LN8@GetLogSize:
; Line 487
	mov	esp, ebp
	pop	ebp
	ret	4
?GetLogSize@@YGII@Z ENDP				; GetLogSize
_TEXT	ENDS
PUBLIC	?GetDecompressRating@CBenchProps@@QAE_K_K0000@Z	; CBenchProps::GetDecompressRating
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_numCommands$ = -12					; size = 8
_this$ = -4						; size = 4
_elapsedTime$ = 8					; size = 8
_freq$ = 16						; size = 8
_outSize$ = 24						; size = 8
_inSize$ = 32						; size = 8
_numIterations$ = 40					; size = 8
?GetDecompressRating@CBenchProps@@QAE_K_K0000@Z PROC	; CBenchProps::GetDecompressRating
; _this$ = ecx
; Line 590
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	push	edi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 591
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	xor	edx, edx
	push	edx
	push	ecx
	mov	eax, DWORD PTR _inSize$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _inSize$[ebp]
	push	ecx
	call	__allmul
	mov	esi, eax
	mov	edi, edx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	xor	ecx, ecx
	push	ecx
	push	eax
	mov	edx, DWORD PTR _outSize$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _outSize$[ebp]
	push	eax
	call	__allmul
	add	esi, eax
	adc	edi, edx
	mov	ecx, DWORD PTR _numIterations$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _numIterations$[ebp]
	push	edx
	push	edi
	push	esi
	call	__allmul
	mov	DWORD PTR _numCommands$[ebp], eax
	mov	DWORD PTR _numCommands$[ebp+4], edx
; Line 592
	mov	eax, DWORD PTR _freq$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _freq$[ebp]
	push	ecx
	mov	edx, DWORD PTR _elapsedTime$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _elapsedTime$[ebp]
	push	eax
	mov	ecx, DWORD PTR _numCommands$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _numCommands$[ebp]
	push	edx
	call	?MyMultDiv64@@YG_K_K00@Z		; MyMultDiv64
; Line 593
	pop	edi
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	40					; 00000028H
?GetDecompressRating@CBenchProps@@QAE_K_K0000@Z ENDP	; CBenchProps::GetDecompressRating
_TEXT	ENDS
PUBLIC	??0CBenchProps@@QAE@XZ				; CBenchProps::CBenchProps
PUBLIC	?GetCompressRating@@YG_KI_K00@Z			; GetCompressRating
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_props$ = -20						; size = 16
_dictSize$ = 8						; size = 4
_elapsedTime$ = 12					; size = 8
_freq$ = 20						; size = 8
_size$ = 28						; size = 8
?GetCompressRating@@YG_KI_K00@Z PROC			; GetCompressRating
; Line 596
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 597
	lea	ecx, DWORD PTR _props$[ebp]
	call	??0CBenchProps@@QAE@XZ			; CBenchProps::CBenchProps
; Line 598
	lea	ecx, DWORD PTR _props$[ebp]
	call	?SetLzmaCompexity@CBenchProps@@QAEXXZ	; CBenchProps::SetLzmaCompexity
; Line 599
	mov	eax, DWORD PTR _size$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _freq$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _freq$[ebp]
	push	eax
	mov	ecx, DWORD PTR _elapsedTime$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _elapsedTime$[ebp]
	push	edx
	mov	eax, DWORD PTR _dictSize$[ebp]
	push	eax
	lea	ecx, DWORD PTR _props$[ebp]
	call	?GetCompressRating@CBenchProps@@QAE_KI_K00@Z ; CBenchProps::GetCompressRating
; Line 600
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@GetCompres@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
	npad	2
$LN5@GetCompres@2:
	DD	1
	DD	$LN4@GetCompres@2
$LN4@GetCompres@2:
	DD	-20					; ffffffecH
	DD	16					; 00000010H
	DD	$LN3@GetCompres@2
$LN3@GetCompres@2:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	115					; 00000073H
	DB	0
?GetCompressRating@@YG_KI_K00@Z ENDP			; GetCompressRating
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CBenchProps@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CBenchProps@@QAE@XZ PROC				; CBenchProps::CBenchProps, COMDAT
; _this$ = ecx
; Line 550
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CBenchProps@@QAE@XZ ENDP				; CBenchProps::CBenchProps
_TEXT	ENDS
PUBLIC	?GetDecompressRating@@YG_K_K0000@Z		; GetDecompressRating
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_props$ = -20						; size = 16
_elapsedTime$ = 8					; size = 8
_freq$ = 16						; size = 8
_outSize$ = 24						; size = 8
_inSize$ = 32						; size = 8
_numIterations$ = 40					; size = 8
?GetDecompressRating@@YG_K_K0000@Z PROC			; GetDecompressRating
; Line 603
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 604
	lea	ecx, DWORD PTR _props$[ebp]
	call	??0CBenchProps@@QAE@XZ			; CBenchProps::CBenchProps
; Line 605
	lea	ecx, DWORD PTR _props$[ebp]
	call	?SetLzmaCompexity@CBenchProps@@QAEXXZ	; CBenchProps::SetLzmaCompexity
; Line 606
	mov	eax, DWORD PTR _numIterations$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _numIterations$[ebp]
	push	ecx
	mov	edx, DWORD PTR _inSize$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _inSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outSize$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _outSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _freq$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _freq$[ebp]
	push	ecx
	mov	edx, DWORD PTR _elapsedTime$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _elapsedTime$[ebp]
	push	eax
	lea	ecx, DWORD PTR _props$[ebp]
	call	?GetDecompressRating@CBenchProps@@QAE_K_K0000@Z ; CBenchProps::GetDecompressRating
; Line 607
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@GetDecompr
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	40					; 00000028H
	npad	2
$LN5@GetDecompr:
	DD	1
	DD	$LN4@GetDecompr
$LN4@GetDecompr:
	DD	-20					; ffffffecH
	DD	16					; 00000010H
	DD	$LN3@GetDecompr
$LN3@GetDecompr:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	115					; 00000073H
	DB	0
?GetDecompressRating@@YG_K_K0000@Z ENDP			; GetDecompressRating
_TEXT	ENDS
PUBLIC	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ	; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
PUBLIC	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ	; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
PUBLIC	??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
PUBLIC	??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator->
PUBLIC	??C?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ ; CMyComPtr<ICompressFilter>::operator->
PUBLIC	?Init@CCrcOutStream@@QAEXXZ			; CCrcOutStream::Init
PUBLIC	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
PUBLIC	??0CCrcOutStream@@QAE@XZ			; CCrcOutStream::CCrcOutStream
PUBLIC	?Init@CBenchmarkInStream@@QAEXPBEI@Z		; CBenchmarkInStream::Init
PUBLIC	??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
PUBLIC	??0CBenchmarkInStream@@QAE@XZ			; CBenchmarkInStream::CBenchmarkInStream
PUBLIC	??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ	; CMyComPtr<ICryptoSetPassword>::~CMyComPtr<ICryptoSetPassword>
PUBLIC	??C?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ ; CMyComPtr<ICryptoSetPassword>::operator->
PUBLIC	??B?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ ; CMyComPtr<ICryptoSetPassword>::operator ICryptoSetPassword *
PUBLIC	??$QueryInterface@UICryptoSetPassword@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICryptoSetPassword@@@Z ; CMyComPtr<IUnknown>::QueryInterface<ICryptoSetPassword>
PUBLIC	??I?$CMyComPtr@UICryptoSetPassword@@@@QAEPAPAUICryptoSetPassword@@XZ ; CMyComPtr<ICryptoSetPassword>::operator&
PUBLIC	??0?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ	; CMyComPtr<ICryptoSetPassword>::CMyComPtr<ICryptoSetPassword>
PUBLIC	??1?$CMyComPtr@UICompressWriteCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressWriteCoderProperties>::~CMyComPtr<ICompressWriteCoderProperties>
PUBLIC	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
PUBLIC	??C?$CMyComPtr@UICompressWriteCoderProperties@@@@QBEPAUICompressWriteCoderProperties@@XZ ; CMyComPtr<ICompressWriteCoderProperties>::operator->
PUBLIC	??B?$CMyComPtr@UICompressWriteCoderProperties@@@@QBEPAUICompressWriteCoderProperties@@XZ ; CMyComPtr<ICompressWriteCoderProperties>::operator ICompressWriteCoderProperties *
PUBLIC	??$QueryInterface@UICompressWriteCoderProperties@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICompressWriteCoderProperties@@@Z ; CMyComPtr<IUnknown>::QueryInterface<ICompressWriteCoderProperties>
PUBLIC	??I?$CMyComPtr@UICompressWriteCoderProperties@@@@QAEPAPAUICompressWriteCoderProperties@@XZ ; CMyComPtr<ICompressWriteCoderProperties>::operator&
PUBLIC	??0?$CMyComPtr@UICompressWriteCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressWriteCoderProperties>::CMyComPtr<ICompressWriteCoderProperties>
PUBLIC	?AreThereNonOptionalProps@CProps@@QBE_NXZ	; CProps::AreThereNonOptionalProps
PUBLIC	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ		; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
PUBLIC	??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderProperties>::~CMyComPtr<ICompressSetCoderProperties>
PUBLIC	??B?$CMyComPtr@UICompressSetCoderProperties@@@@QBEPAUICompressSetCoderProperties@@XZ ; CMyComPtr<ICompressSetCoderProperties>::operator ICompressSetCoderProperties *
PUBLIC	??$QueryInterface@UICompressSetCoderProperties@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICompressSetCoderProperties@@@Z ; CMyComPtr<IUnknown>::QueryInterface<ICompressSetCoderProperties>
PUBLIC	??I?$CMyComPtr@UICompressSetCoderProperties@@@@QAEPAPAUICompressSetCoderProperties@@XZ ; CMyComPtr<ICompressSetCoderProperties>::operator&
PUBLIC	??0?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderProperties>::CMyComPtr<ICompressSetCoderProperties>
PUBLIC	??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator ICompressCoder *
PUBLIC	??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z ; CMyComPtr<IUnknown>::operator=
PUBLIC	??0?$CMyComPtr@UIUnknown@@@@QAE@XZ		; CMyComPtr<IUnknown>::CMyComPtr<IUnknown>
PUBLIC	?Init@CBenchmarkOutStream@@QAEX_N0@Z		; CBenchmarkOutStream::Init
PUBLIC	??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ	; CMyComPtr<ISequentialOutStream>::operator!
PUBLIC	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=
PUBLIC	??0CBenchmarkOutStream@@QAE@XZ			; CBenchmarkOutStream::CBenchmarkOutStream
PUBLIC	??B?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ ; CMyComPtr<ICompressFilter>::operator ICompressFilter *
PUBLIC	?Generate@CBenchRandomGenerator@@QAEXI@Z	; CBenchRandomGenerator::Generate
PUBLIC	?GenerateSimpleRandom@CBenchRandomGenerator@@QAEXXZ ; CBenchRandomGenerator::GenerateSimpleRandom
PUBLIC	?Alloc@CBenchBuffer@@QAE_NI@Z			; CBenchBuffer::Alloc
PUBLIC	?Set@CBenchRandomGenerator@@QAEXPAVCBaseRandomGenerator@@@Z ; CBenchRandomGenerator::Set
PUBLIC	__$ArrayPad$
PUBLIC	?Init@CEncoderInfo@@QAEJABVCOneMethodInfo@@IIPAVCBaseRandomGenerator@@@Z ; CEncoderInfo::Init
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_memset:PROC
EXTRN	_IID_ICryptoSetPassword:BYTE
EXTRN	_IID_ICompressWriteCoderProperties:BYTE
EXTRN	?SetCoderProps@CProps@@QBEJPAUICompressSetCoderProperties@@PB_K@Z:PROC ; CProps::SetCoderProps
EXTRN	_IID_ICompressSetCoderProperties:BYTE
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	@CrcCalc@8:PROC
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
xdata$x	SEGMENT
__ehfuncinfo$?Init@CEncoderInfo@@QAEJABVCOneMethodInfo@@IIPAVCBaseRandomGenerator@@@Z DD 019930522H
	DD	0aH
	DD	FLAT:__unwindtable$?Init@CEncoderInfo@@QAEJABVCOneMethodInfo@@IIPAVCBaseRandomGenerator@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Init@CEncoderInfo@@QAEJABVCOneMethodInfo@@IIPAVCBaseRandomGenerator@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Init@CEncoderInfo@@QAEJABVCOneMethodInfo@@IIPAVCBaseRandomGenerator@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Init@CEncoderInfo@@QAEJABVCOneMethodInfo@@IIPAVCBaseRandomGenerator@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Init@CEncoderInfo@@QAEJABVCOneMethodInfo@@IIPAVCBaseRandomGenerator@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?Init@CEncoderInfo@@QAEJABVCOneMethodInfo@@IIPAVCBaseRandomGenerator@@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?Init@CEncoderInfo@@QAEJABVCOneMethodInfo@@IIPAVCBaseRandomGenerator@@@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?Init@CEncoderInfo@@QAEJABVCOneMethodInfo@@IIPAVCBaseRandomGenerator@@@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$?Init@CEncoderInfo@@QAEJABVCOneMethodInfo@@IIPAVCBaseRandomGenerator@@@Z$6
	DD	05H
	DD	FLAT:__unwindfunclet$?Init@CEncoderInfo@@QAEJABVCOneMethodInfo@@IIPAVCBaseRandomGenerator@@@Z$7
	DD	07H
	DD	FLAT:__unwindfunclet$?Init@CEncoderInfo@@QAEJABVCOneMethodInfo@@IIPAVCBaseRandomGenerator@@@Z$8
	DD	07H
	DD	FLAT:__unwindfunclet$?Init@CEncoderInfo@@QAEJABVCOneMethodInfo@@IIPAVCBaseRandomGenerator@@@Z$9
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv407 = -252						; size = 4
tv398 = -248						; size = 4
tv391 = -244						; size = 4
tv342 = -240						; size = 4
tv321 = -236						; size = 4
tv306 = -232						; size = 4
tv283 = -228						; size = 4
tv191 = -224						; size = 4
tv159 = -220						; size = 4
$T72670 = -216						; size = 4
$T72669 = -212						; size = 4
$T72666 = -208						; size = 4
$T72665 = -204						; size = 4
$T72662 = -200						; size = 4
$T72661 = -196						; size = 4
$T72660 = -192						; size = 4
$T72659 = -188						; size = 4
$T72658 = -184						; size = 4
$T72657 = -180						; size = 4
$T72654 = -176						; size = 4
$T72653 = -172						; size = 4
$T72650 = -168						; size = 4
$T72649 = -164						; size = 4
___result__$70045 = -160				; size = 4
_outStream$70042 = -152					; size = 4
_outStreamSpec$70036 = -144				; size = 4
_temp$70035 = -136					; size = 16
_inStream$70034 = -112					; size = 4
_inStreamSpec$69992 = -104				; size = 4
___result__$69989 = -100				; size = 4
_sp$69983 = -92						; size = 4
___result__$69943 = -84					; size = 4
_writeCoderProps$69937 = -76				; size = 4
___result__$69893 = -68					; size = 4
_reduceSize$69892 = -60					; size = 8
_scp$69886 = -44					; size = 4
_coder$ = -32						; size = 4
_kCompressedBufferSize$ = -24				; size = 4
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_method$ = 8						; size = 4
_uncompressedDataSize$ = 12				; size = 4
_generateDictBits$ = 16					; size = 4
_rgLoc$ = 20						; size = 4
?Init@CEncoderInfo@@QAEJABVCOneMethodInfo@@IIPAVCBaseRandomGenerator@@@Z PROC ; CEncoderInfo::Init
; _this$ = ecx
; Line 748
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Init@CEncoderInfo@@QAEJABVCOneMethodInfo@@IIPAVCBaseRandomGenerator@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 240				; 000000f0H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 749
	mov	eax, DWORD PTR _rgLoc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 200				; 000000c8H
	call	?Set@CBenchRandomGenerator@@QAEXPAVCBaseRandomGenerator@@@Z ; CBenchRandomGenerator::Set
; Line 750
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _uncompressedDataSize$[ebp]
	mov	DWORD PTR [ecx+192], edx
; Line 752
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+192]
	add	ecx, 1024				; 00000400H
	mov	DWORD PTR _kCompressedBufferSize$[ebp], ecx
; Line 754
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+192]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 200				; 000000c8H
	call	?Alloc@CBenchBuffer@@QAE_NI@Z		; CBenchBuffer::Alloc
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN21@Init
; Line 755
	mov	eax, -2147024882			; 8007000eH
	jmp	$LN22@Init
$LN21@Init:
; Line 756
	cmp	DWORD PTR _generateDictBits$[ebp], 0
	jne	SHORT $LN20@Init
; Line 757
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 200				; 000000c8H
	call	?GenerateSimpleRandom@CBenchRandomGenerator@@QAEXXZ ; CBenchRandomGenerator::GenerateSimpleRandom
; Line 758
	jmp	SHORT $LN19@Init
$LN20@Init:
; Line 759
	mov	edx, DWORD PTR _generateDictBits$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 200				; 000000c8H
	call	?Generate@CBenchRandomGenerator@@QAEXI@Z ; CBenchRandomGenerator::Generate
$LN19@Init:
; Line 760
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+204]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+208]
	call	@CrcCalc@8
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+188], eax
; Line 762
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??B?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ ; CMyComPtr<ICompressFilter>::operator ICompressFilter *
	test	eax, eax
	je	SHORT $LN18@Init
; Line 764
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+204]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 216				; 000000d8H
	call	?Alloc@CBenchBuffer@@QAE_NI@Z		; CBenchBuffer::Alloc
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN18@Init
; Line 765
	mov	eax, -2147024882			; 8007000eH
	jmp	$LN22@Init
$LN18@Init:
; Line 769
	push	32					; 00000020H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T72650[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T72650[ebp], 0
	je	SHORT $LN24@Init
	mov	ecx, DWORD PTR $T72650[ebp]
	call	??0CBenchmarkOutStream@@QAE@XZ
	mov	DWORD PTR tv159[ebp], eax
	jmp	SHORT $LN25@Init
$LN24@Init:
	mov	DWORD PTR tv159[ebp], 0
$LN25@Init:
	mov	eax, DWORD PTR tv159[ebp]
	mov	DWORD PTR $T72649[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T72649[ebp]
	mov	DWORD PTR [ecx+172], edx
; Line 770
	mov	eax, DWORD PTR _kCompressedBufferSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+172]
	add	ecx, 4
	call	?Alloc@CBenchBuffer@@QAE_NI@Z		; CBenchBuffer::Alloc
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN16@Init
; Line 771
	mov	eax, -2147024882			; 8007000eH
	jmp	$LN22@Init
$LN16@Init:
; Line 773
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+172]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 176				; 000000b0H
	call	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=
; Line 775
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+228], 0
; Line 776
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 232				; 000000e8H
	call	??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ ; CMyComPtr<ISequentialOutStream>::operator!
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN15@Init
; Line 778
	push	32					; 00000020H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T72654[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T72654[ebp], 0
	je	SHORT $LN26@Init
	mov	ecx, DWORD PTR $T72654[ebp]
	call	??0CBenchmarkOutStream@@QAE@XZ
	mov	DWORD PTR tv191[ebp], eax
	jmp	SHORT $LN27@Init
$LN26@Init:
	mov	DWORD PTR tv191[ebp], 0
$LN27@Init:
	mov	ecx, DWORD PTR tv191[ebp]
	mov	DWORD PTR $T72653[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T72653[ebp]
	mov	DWORD PTR [edx+228], eax
; Line 779
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+228]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 232				; 000000e8H
	call	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=
$LN15@Init:
; Line 781
	push	5
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+228]
	add	ecx, 4
	call	?Alloc@CBenchBuffer@@QAE_NI@Z		; CBenchBuffer::Alloc
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN14@Init
; Line 782
	mov	eax, -2147024882			; 8007000eH
	jmp	$LN22@Init
$LN14@Init:
; Line 783
	push	0
	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+228]
	call	?Init@CBenchmarkOutStream@@QAEX_N0@Z	; CBenchmarkOutStream::Init
; Line 786
	lea	ecx, DWORD PTR _coder$[ebp]
	call	??0?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::CMyComPtr<IUnknown>
	mov	DWORD PTR __$EHRec$[ebp+8], 2
; Line 787
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??B?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ ; CMyComPtr<ICompressFilter>::operator ICompressFilter *
	test	eax, eax
	je	SHORT $LN13@Init
; Line 788
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??B?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ ; CMyComPtr<ICompressFilter>::operator ICompressFilter *
	push	eax
	lea	ecx, DWORD PTR _coder$[ebp]
	call	??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z ; CMyComPtr<IUnknown>::operator=
; Line 789
	jmp	SHORT $LN12@Init
$LN13@Init:
; Line 790
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator ICompressCoder *
	push	eax
	lea	ecx, DWORD PTR _coder$[ebp]
	call	??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z ; CMyComPtr<IUnknown>::operator=
$LN12@Init:
; Line 792
	lea	ecx, DWORD PTR _scp$69886[ebp]
	call	??0?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderProperties>::CMyComPtr<ICompressSetCoderProperties>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
; Line 793
	lea	ecx, DWORD PTR _scp$69886[ebp]
	call	??I?$CMyComPtr@UICompressSetCoderProperties@@@@QAEPAPAUICompressSetCoderProperties@@XZ ; CMyComPtr<ICompressSetCoderProperties>::operator&
	push	eax
	push	OFFSET _IID_ICompressSetCoderProperties
	lea	ecx, DWORD PTR _coder$[ebp]
	call	??$QueryInterface@UICompressSetCoderProperties@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICompressSetCoderProperties@@@Z ; CMyComPtr<IUnknown>::QueryInterface<ICompressSetCoderProperties>
; Line 794
	lea	ecx, DWORD PTR _scp$69886[ebp]
	call	??B?$CMyComPtr@UICompressSetCoderProperties@@@@QBEPAUICompressSetCoderProperties@@XZ ; CMyComPtr<ICompressSetCoderProperties>::operator ICompressSetCoderProperties *
	test	eax, eax
	je	SHORT $LN11@Init
; Line 796
	mov	eax, DWORD PTR _uncompressedDataSize$[ebp]
	xor	ecx, ecx
	mov	DWORD PTR _reduceSize$69892[ebp], eax
	mov	DWORD PTR _reduceSize$69892[ebp+4], ecx
; Line 797
	lea	edx, DWORD PTR _reduceSize$69892[ebp]
	push	edx
	lea	ecx, DWORD PTR _scp$69886[ebp]
	call	??B?$CMyComPtr@UICompressSetCoderProperties@@@@QBEPAUICompressSetCoderProperties@@XZ ; CMyComPtr<ICompressSetCoderProperties>::operator ICompressSetCoderProperties *
	push	eax
	mov	ecx, DWORD PTR _method$[ebp]
	call	?SetCoderProps@CProps@@QBEJPAUICompressSetCoderProperties@@PB_K@Z ; CProps::SetCoderProps
	mov	DWORD PTR ___result__$69893[ebp], eax
	cmp	DWORD PTR ___result__$69893[ebp], 0
	je	SHORT $LN10@Init
	mov	eax, DWORD PTR ___result__$69893[ebp]
	mov	DWORD PTR $T72657[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _scp$69886[ebp]
	call	??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderProperties>::~CMyComPtr<ICompressSetCoderProperties>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _coder$[ebp]
	call	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
	mov	eax, DWORD PTR $T72657[ebp]
	jmp	$LN22@Init
$LN10@Init:
; Line 799
	jmp	SHORT $LN9@Init
$LN11@Init:
; Line 801
	mov	ecx, DWORD PTR _method$[ebp]
	call	?AreThereNonOptionalProps@CProps@@QBE_NXZ ; CProps::AreThereNonOptionalProps
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN9@Init
; Line 802
	mov	DWORD PTR $T72658[ebp], -2147024809	; 80070057H
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _scp$69886[ebp]
	call	??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderProperties>::~CMyComPtr<ICompressSetCoderProperties>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _coder$[ebp]
	call	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
	mov	eax, DWORD PTR $T72658[ebp]
	jmp	$LN22@Init
$LN9@Init:
; Line 805
	lea	ecx, DWORD PTR _writeCoderProps$69937[ebp]
	call	??0?$CMyComPtr@UICompressWriteCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressWriteCoderProperties>::CMyComPtr<ICompressWriteCoderProperties>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
; Line 806
	lea	ecx, DWORD PTR _writeCoderProps$69937[ebp]
	call	??I?$CMyComPtr@UICompressWriteCoderProperties@@@@QAEPAPAUICompressWriteCoderProperties@@XZ ; CMyComPtr<ICompressWriteCoderProperties>::operator&
	push	eax
	push	OFFSET _IID_ICompressWriteCoderProperties
	lea	ecx, DWORD PTR _coder$[ebp]
	call	??$QueryInterface@UICompressWriteCoderProperties@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICompressWriteCoderProperties@@@Z ; CMyComPtr<IUnknown>::QueryInterface<ICompressWriteCoderProperties>
; Line 807
	lea	ecx, DWORD PTR _writeCoderProps$69937[ebp]
	call	??B?$CMyComPtr@UICompressWriteCoderProperties@@@@QBEPAUICompressWriteCoderProperties@@XZ ; CMyComPtr<ICompressWriteCoderProperties>::operator ICompressWriteCoderProperties *
	test	eax, eax
	je	SHORT $LN7@Init
; Line 809
	lea	ecx, DWORD PTR _writeCoderProps$69937[ebp]
	call	??C?$CMyComPtr@UICompressWriteCoderProperties@@@@QBEPAUICompressWriteCoderProperties@@XZ ; CMyComPtr<ICompressWriteCoderProperties>::operator->
	mov	DWORD PTR tv283[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 232				; 000000e8H
	call	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR tv283[ebp]
	push	edx
	mov	eax, DWORD PTR tv283[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$69943[ebp], eax
	cmp	DWORD PTR ___result__$69943[ebp], 0
	je	SHORT $LN7@Init
	mov	eax, DWORD PTR ___result__$69943[ebp]
	mov	DWORD PTR $T72659[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _writeCoderProps$69937[ebp]
	call	??1?$CMyComPtr@UICompressWriteCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressWriteCoderProperties>::~CMyComPtr<ICompressWriteCoderProperties>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _scp$69886[ebp]
	call	??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderProperties>::~CMyComPtr<ICompressSetCoderProperties>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _coder$[ebp]
	call	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
	mov	eax, DWORD PTR $T72659[ebp]
	jmp	$LN22@Init
$LN7@Init:
; Line 813
	lea	ecx, DWORD PTR _sp$69983[ebp]
	call	??0?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ ; CMyComPtr<ICryptoSetPassword>::CMyComPtr<ICryptoSetPassword>
	mov	BYTE PTR __$EHRec$[ebp+8], 5
; Line 814
	lea	ecx, DWORD PTR _sp$69983[ebp]
	call	??I?$CMyComPtr@UICryptoSetPassword@@@@QAEPAPAUICryptoSetPassword@@XZ ; CMyComPtr<ICryptoSetPassword>::operator&
	push	eax
	push	OFFSET _IID_ICryptoSetPassword
	lea	ecx, DWORD PTR _coder$[ebp]
	call	??$QueryInterface@UICryptoSetPassword@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICryptoSetPassword@@@Z ; CMyComPtr<IUnknown>::QueryInterface<ICryptoSetPassword>
; Line 815
	lea	ecx, DWORD PTR _sp$69983[ebp]
	call	??B?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ ; CMyComPtr<ICryptoSetPassword>::operator ICryptoSetPassword *
	test	eax, eax
	je	$LN5@Init
; Line 817
	lea	ecx, DWORD PTR _sp$69983[ebp]
	call	??C?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ ; CMyComPtr<ICryptoSetPassword>::operator->
	mov	DWORD PTR tv306[ebp], eax
	mov	esi, esp
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	push	ecx
	mov	edx, DWORD PTR tv306[ebp]
	push	edx
	mov	eax, DWORD PTR tv306[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$69989[ebp], eax
	cmp	DWORD PTR ___result__$69989[ebp], 0
	je	SHORT $LN4@Init
	mov	eax, DWORD PTR ___result__$69989[ebp]
	mov	DWORD PTR $T72660[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _sp$69983[ebp]
	call	??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ ; CMyComPtr<ICryptoSetPassword>::~CMyComPtr<ICryptoSetPassword>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _writeCoderProps$69937[ebp]
	call	??1?$CMyComPtr@UICompressWriteCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressWriteCoderProperties>::~CMyComPtr<ICompressWriteCoderProperties>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _scp$69886[ebp]
	call	??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderProperties>::~CMyComPtr<ICompressSetCoderProperties>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _coder$[ebp]
	call	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
	mov	eax, DWORD PTR $T72660[ebp]
	jmp	$LN22@Init
$LN4@Init:
; Line 821
	push	20					; 00000014H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T72662[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	cmp	DWORD PTR $T72662[ebp], 0
	je	SHORT $LN28@Init
	mov	ecx, DWORD PTR $T72662[ebp]
	call	??0CBenchmarkInStream@@QAE@XZ
	mov	DWORD PTR tv321[ebp], eax
	jmp	SHORT $LN29@Init
$LN28@Init:
	mov	DWORD PTR tv321[ebp], 0
$LN29@Init:
	mov	ecx, DWORD PTR tv321[ebp]
	mov	DWORD PTR $T72661[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	edx, DWORD PTR $T72661[ebp]
	mov	DWORD PTR _inStreamSpec$69992[ebp], edx
; Line 822
	mov	eax, DWORD PTR _inStreamSpec$69992[ebp]
	push	eax
	lea	ecx, DWORD PTR _inStream$70034[ebp]
	call	??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 7
; Line 824
	push	16					; 00000010H
	push	0
	lea	ecx, DWORD PTR _temp$70035[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 825
	push	16					; 00000010H
	lea	edx, DWORD PTR _temp$70035[ebp]
	push	edx
	mov	ecx, DWORD PTR _inStreamSpec$69992[ebp]
	call	?Init@CBenchmarkInStream@@QAEXPBEI@Z	; CBenchmarkInStream::Init
; Line 827
	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T72666[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	cmp	DWORD PTR $T72666[ebp], 0
	je	SHORT $LN30@Init
	mov	ecx, DWORD PTR $T72666[ebp]
	call	??0CCrcOutStream@@QAE@XZ		; CCrcOutStream::CCrcOutStream
	mov	DWORD PTR tv342[ebp], eax
	jmp	SHORT $LN31@Init
$LN30@Init:
	mov	DWORD PTR tv342[ebp], 0
$LN31@Init:
	mov	eax, DWORD PTR tv342[ebp]
	mov	DWORD PTR $T72665[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	ecx, DWORD PTR $T72665[ebp]
	mov	DWORD PTR _outStreamSpec$70036[ebp], ecx
; Line 828
	mov	edx, DWORD PTR _outStreamSpec$70036[ebp]
	push	edx
	lea	ecx, DWORD PTR _outStream$70042[ebp]
	call	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 9
; Line 829
	mov	ecx, DWORD PTR _outStreamSpec$70036[ebp]
	call	?Init@CCrcOutStream@@QAEXXZ		; CCrcOutStream::Init
; Line 831
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??B?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ ; CMyComPtr<ICompressFilter>::operator ICompressFilter *
	test	eax, eax
	je	SHORT $LN3@Init
; Line 833
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??C?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ ; CMyComPtr<ICompressFilter>::operator->
	mov	DWORD PTR tv391[ebp], eax
	mov	eax, DWORD PTR tv391[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR tv391[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 834
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??C?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ ; CMyComPtr<ICompressFilter>::operator->
	mov	DWORD PTR tv398[ebp], eax
	mov	esi, esp
	push	16					; 00000010H
	lea	ecx, DWORD PTR _temp$70035[ebp]
	push	ecx
	mov	edx, DWORD PTR tv398[ebp]
	push	edx
	mov	eax, DWORD PTR tv398[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 836
	jmp	$LN2@Init
$LN3@Init:
; Line 838
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator->
	mov	DWORD PTR tv407[ebp], eax
	mov	esi, esp
	push	0
	push	0
	push	0
	lea	ecx, DWORD PTR _outStream$70042[ebp]
	call	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
	push	eax
	lea	ecx, DWORD PTR _inStream$70034[ebp]
	call	??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
	push	eax
	mov	eax, DWORD PTR tv407[ebp]
	push	eax
	mov	ecx, DWORD PTR tv407[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$70045[ebp], eax
	cmp	DWORD PTR ___result__$70045[ebp], 0
	je	SHORT $LN2@Init
	mov	ecx, DWORD PTR ___result__$70045[ebp]
	mov	DWORD PTR $T72669[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _outStream$70042[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _inStream$70034[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _sp$69983[ebp]
	call	??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ ; CMyComPtr<ICryptoSetPassword>::~CMyComPtr<ICryptoSetPassword>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _writeCoderProps$69937[ebp]
	call	??1?$CMyComPtr@UICompressWriteCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressWriteCoderProperties>::~CMyComPtr<ICompressWriteCoderProperties>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _scp$69886[ebp]
	call	??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderProperties>::~CMyComPtr<ICompressSetCoderProperties>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _coder$[ebp]
	call	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
	mov	eax, DWORD PTR $T72669[ebp]
	jmp	SHORT $LN22@Init
$LN2@Init:
; Line 840
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _outStream$70042[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _inStream$70034[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
$LN5@Init:
; Line 841
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _sp$69983[ebp]
	call	??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ ; CMyComPtr<ICryptoSetPassword>::~CMyComPtr<ICryptoSetPassword>
; Line 843
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _writeCoderProps$69937[ebp]
	call	??1?$CMyComPtr@UICompressWriteCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressWriteCoderProperties>::~CMyComPtr<ICompressWriteCoderProperties>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _scp$69886[ebp]
	call	??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderProperties>::~CMyComPtr<ICompressSetCoderProperties>
; Line 844
	mov	DWORD PTR $T72670[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _coder$[ebp]
	call	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
	mov	eax, DWORD PTR $T72670[ebp]
$LN22@Init:
; Line 845
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN52@Init
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN52@Init:
	DD	8
	DD	$LN51@Init
$LN51@Init:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN42@Init
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN43@Init
	DD	-60					; ffffffc4H
	DD	8
	DD	$LN44@Init
	DD	-76					; ffffffb4H
	DD	4
	DD	$LN45@Init
	DD	-92					; ffffffa4H
	DD	4
	DD	$LN46@Init
	DD	-112					; ffffff90H
	DD	4
	DD	$LN47@Init
	DD	-136					; ffffff78H
	DD	16					; 00000010H
	DD	$LN48@Init
	DD	-152					; ffffff68H
	DD	4
	DD	$LN49@Init
$LN49@Init:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN48@Init:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
$LN47@Init:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN46@Init:
	DB	115					; 00000073H
	DB	112					; 00000070H
	DB	0
$LN45@Init:
	DB	119					; 00000077H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	115					; 00000073H
	DB	0
$LN44@Init:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	117					; 00000075H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN43@Init:
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	112					; 00000070H
	DB	0
$LN42@Init:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Init@CEncoderInfo@@QAEJABVCOneMethodInfo@@IIPAVCBaseRandomGenerator@@@Z$0:
	mov	eax, DWORD PTR $T72650[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Init@CEncoderInfo@@QAEJABVCOneMethodInfo@@IIPAVCBaseRandomGenerator@@@Z$1:
	mov	eax, DWORD PTR $T72654[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Init@CEncoderInfo@@QAEJABVCOneMethodInfo@@IIPAVCBaseRandomGenerator@@@Z$2:
	lea	ecx, DWORD PTR _coder$[ebp]
	jmp	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
__unwindfunclet$?Init@CEncoderInfo@@QAEJABVCOneMethodInfo@@IIPAVCBaseRandomGenerator@@@Z$3:
	lea	ecx, DWORD PTR _scp$69886[ebp]
	jmp	??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderProperties>::~CMyComPtr<ICompressSetCoderProperties>
__unwindfunclet$?Init@CEncoderInfo@@QAEJABVCOneMethodInfo@@IIPAVCBaseRandomGenerator@@@Z$4:
	lea	ecx, DWORD PTR _writeCoderProps$69937[ebp]
	jmp	??1?$CMyComPtr@UICompressWriteCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressWriteCoderProperties>::~CMyComPtr<ICompressWriteCoderProperties>
__unwindfunclet$?Init@CEncoderInfo@@QAEJABVCOneMethodInfo@@IIPAVCBaseRandomGenerator@@@Z$5:
	lea	ecx, DWORD PTR _sp$69983[ebp]
	jmp	??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ ; CMyComPtr<ICryptoSetPassword>::~CMyComPtr<ICryptoSetPassword>
__unwindfunclet$?Init@CEncoderInfo@@QAEJABVCOneMethodInfo@@IIPAVCBaseRandomGenerator@@@Z$6:
	mov	eax, DWORD PTR $T72662[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Init@CEncoderInfo@@QAEJABVCOneMethodInfo@@IIPAVCBaseRandomGenerator@@@Z$7:
	lea	ecx, DWORD PTR _inStream$70034[ebp]
	jmp	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
__unwindfunclet$?Init@CEncoderInfo@@QAEJABVCOneMethodInfo@@IIPAVCBaseRandomGenerator@@@Z$8:
	mov	eax, DWORD PTR $T72666[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Init@CEncoderInfo@@QAEJABVCOneMethodInfo@@IIPAVCBaseRandomGenerator@@@Z$9:
	lea	ecx, DWORD PTR _outStream$70042[ebp]
	jmp	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
__ehhandler$?Init@CEncoderInfo@@QAEJABVCOneMethodInfo@@IIPAVCBaseRandomGenerator@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-252]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Init@CEncoderInfo@@QAEJABVCOneMethodInfo@@IIPAVCBaseRandomGenerator@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Init@CEncoderInfo@@QAEJABVCOneMethodInfo@@IIPAVCBaseRandomGenerator@@@Z ENDP ; CEncoderInfo::Init
PUBLIC	??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z	; CObjectVector<CProp>::operator[]
PUBLIC	?Size@?$CObjectVector@UCProp@@@@QBEIXZ		; CObjectVector<CProp>::Size
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?AreThereNonOptionalProps@CProps@@QBE_NXZ
_TEXT	SEGMENT
_i$68509 = -8						; size = 4
_this$ = -4						; size = 4
?AreThereNonOptionalProps@CProps@@QBE_NXZ PROC		; CProps::AreThereNonOptionalProps, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\methodprops.h
; Line 34
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 35
	mov	DWORD PTR _i$68509[ebp], 0
	jmp	SHORT $LN4@AreThereNo
$LN3@AreThereNo:
	mov	eax, DWORD PTR _i$68509[ebp]
	add	eax, 1
	mov	DWORD PTR _i$68509[ebp], eax
$LN4@AreThereNo:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CObjectVector@UCProp@@@@QBEIXZ	; CObjectVector<CProp>::Size
	cmp	DWORD PTR _i$68509[ebp], eax
	jae	SHORT $LN2@AreThereNo
; Line 36
	mov	ecx, DWORD PTR _i$68509[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ; CObjectVector<CProp>::operator[]
	movzx	edx, BYTE PTR [eax+4]
	test	edx, edx
	jne	SHORT $LN1@AreThereNo
; Line 37
	mov	al, 1
	jmp	SHORT $LN5@AreThereNo
$LN1@AreThereNo:
; Line 38
	jmp	SHORT $LN3@AreThereNo
$LN2@AreThereNo:
	xor	al, al
$LN5@AreThereNo:
; Line 39
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?AreThereNonOptionalProps@CProps@@QBE_NXZ ENDP		; CProps::AreThereNonOptionalProps
_TEXT	ENDS
PUBLIC	?Free@CBenchBuffer@@QAEXXZ			; CBenchBuffer::Free
EXTRN	_MidAlloc@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Alloc@CBenchBuffer@@QAE_NI@Z
_TEXT	SEGMENT
tv76 = -8						; size = 4
_this$ = -4						; size = 4
_bufferSize$ = 8					; size = 4
?Alloc@CBenchBuffer@@QAE_NI@Z PROC			; CBenchBuffer::Alloc, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\bench.cpp
; Line 115
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 116
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN1@Alloc
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR _bufferSize$[ebp]
	jne	SHORT $LN1@Alloc
; Line 117
	mov	al, 1
	jmp	SHORT $LN2@Alloc
$LN1@Alloc:
; Line 118
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Free@CBenchBuffer@@QAEXXZ		; CBenchBuffer::Free
; Line 119
	mov	eax, DWORD PTR _bufferSize$[ebp]
	push	eax
	call	_MidAlloc@4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 120
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _bufferSize$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 121
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	jne	SHORT $LN4@Alloc
	cmp	DWORD PTR _bufferSize$[ebp], 0
	je	SHORT $LN4@Alloc
	mov	DWORD PTR tv76[ebp], 0
	jmp	SHORT $LN5@Alloc
$LN4@Alloc:
	mov	DWORD PTR tv76[ebp], 1
$LN5@Alloc:
	mov	al, BYTE PTR tv76[ebp]
$LN2@Alloc:
; Line 122
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Alloc@CBenchBuffer@@QAE_NI@Z ENDP			; CBenchBuffer::Alloc
_TEXT	ENDS
EXTRN	_MidFree@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Free@CBenchBuffer@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Free@CBenchBuffer@@QAEXXZ PROC				; CBenchBuffer::Free, COMDAT
; _this$ = ecx
; Line 110
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 111
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_MidFree@4
; Line 112
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
; Line 113
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Free@CBenchBuffer@@QAEXXZ ENDP				; CBenchBuffer::Free
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Set@CBenchRandomGenerator@@QAEXPAVCBaseRandomGenerator@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rg$ = 8						; size = 4
?Set@CBenchRandomGenerator@@QAEXPAVCBaseRandomGenerator@@@Z PROC ; CBenchRandomGenerator::Set, COMDAT
; _this$ = ecx
; Line 129
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rg$[ebp]
	mov	DWORD PTR [eax+12], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?Set@CBenchRandomGenerator@@QAEXPAVCBaseRandomGenerator@@@Z ENDP ; CBenchRandomGenerator::Set
_TEXT	ENDS
PUBLIC	?GetRnd@CBaseRandomGenerator@@QAEIXZ		; CBaseRandomGenerator::GetRnd
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GenerateSimpleRandom@CBenchRandomGenerator@@QAEXXZ
_TEXT	SEGMENT
_i$69088 = -8						; size = 4
_this$ = -4						; size = 4
?GenerateSimpleRandom@CBenchRandomGenerator@@QAEXXZ PROC ; CBenchRandomGenerator::GenerateSimpleRandom, COMDAT
; _this$ = ecx
; Line 143
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 144
	mov	DWORD PTR _i$69088[ebp], 0
	jmp	SHORT $LN3@GenerateSi
$LN2@GenerateSi:
	mov	eax, DWORD PTR _i$69088[ebp]
	add	eax, 1
	mov	DWORD PTR _i$69088[ebp], eax
$LN3@GenerateSi:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$69088[ebp]
	cmp	edx, DWORD PTR [ecx+4]
	jae	SHORT $LN4@GenerateSi
; Line 145
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	?GetRnd@CBaseRandomGenerator@@QAEIXZ	; CBaseRandomGenerator::GetRnd
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _i$69088[ebp]
	mov	BYTE PTR [edx+ecx], al
	jmp	SHORT $LN2@GenerateSi
$LN4@GenerateSi:
; Line 146
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GenerateSimpleRandom@CBenchRandomGenerator@@QAEXXZ ENDP ; CBenchRandomGenerator::GenerateSimpleRandom
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetRnd@CBaseRandomGenerator@@QAEIXZ
_TEXT	SEGMENT
tv75 = -8						; size = 4
_this$ = -4						; size = 4
?GetRnd@CBaseRandomGenerator@@QAEIXZ PROC		; CBaseRandomGenerator::GetRnd, COMDAT
; _this$ = ecx
; Line 94
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 97
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 65535				; 0000ffffH
	imul	ecx, 36969				; 00009069H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	shr	eax, 16					; 00000010H
	add	ecx, eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 65535				; 0000ffffH
	imul	ecx, 18000				; 00004650H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shr	eax, 16					; 00000010H
	add	ecx, eax
	mov	DWORD PTR tv75[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv75[ebp]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	shl	eax, 16					; 00000010H
	add	eax, DWORD PTR tv75[ebp]
; Line 98
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRnd@CBaseRandomGenerator@@QAEIXZ ENDP		; CBaseRandomGenerator::GetRnd
_TEXT	ENDS
PUBLIC	?GetLen@CBenchRandomGenerator@@QAEIAAI@Z	; CBenchRandomGenerator::GetLen
PUBLIC	?GetVal@CBenchRandomGenerator@@QAEIAAII@Z	; CBenchRandomGenerator::GetVal
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Generate@CBenchRandomGenerator@@QAEXI@Z
_TEXT	SEGMENT
_i$69112 = -36						; size = 4
_ppp$69110 = -32					; size = 4
_len$69105 = -28					; size = 4
_res$69100 = -20					; size = 4
_rep0$ = -12						; size = 4
_pos$ = -8						; size = 4
_this$ = -4						; size = 4
_dictBits$ = 8						; size = 4
?Generate@CBenchRandomGenerator@@QAEXI@Z PROC		; CBenchRandomGenerator::Generate, COMDAT
; _this$ = ecx
; Line 149
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 150
	mov	DWORD PTR _pos$[ebp], 0
; Line 151
	mov	DWORD PTR _rep0$[ebp], 1
$LN13@Generate:
; Line 152
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	$LN14@Generate
; Line 154
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	call	?GetRnd@CBaseRandomGenerator@@QAEIXZ	; CBaseRandomGenerator::GetRnd
	mov	DWORD PTR _res$69100[ebp], eax
; Line 155
	mov	eax, DWORD PTR _res$69100[ebp]
	shr	eax, 1
	mov	DWORD PTR _res$69100[ebp], eax
; Line 156
	push	1
	lea	ecx, DWORD PTR _res$69100[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetVal@CBenchRandomGenerator@@QAEIAAII@Z ; CBenchRandomGenerator::GetVal
	test	eax, eax
	je	SHORT $LN10@Generate
	cmp	DWORD PTR _pos$[ebp], 1024		; 00000400H
	jae	SHORT $LN11@Generate
$LN10@Generate:
; Line 157
	mov	edx, DWORD PTR _res$69100[ebp]
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR _pos$[ebp]
	mov	BYTE PTR [ecx+eax], dl
	mov	ecx, DWORD PTR _pos$[ebp]
	add	ecx, 1
	mov	DWORD PTR _pos$[ebp], ecx
; Line 158
	jmp	$LN9@Generate
$LN11@Generate:
; Line 161
	lea	edx, DWORD PTR _res$69100[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetLen@CBenchRandomGenerator@@QAEIAAI@Z ; CBenchRandomGenerator::GetLen
	add	eax, 1
	mov	DWORD PTR _len$69105[ebp], eax
; Line 162
	push	3
	lea	eax, DWORD PTR _res$69100[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetVal@CBenchRandomGenerator@@QAEIAAII@Z ; CBenchRandomGenerator::GetVal
	test	eax, eax
	je	SHORT $LN8@Generate
; Line 164
	lea	ecx, DWORD PTR _res$69100[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetLen@CBenchRandomGenerator@@QAEIAAI@Z ; CBenchRandomGenerator::GetLen
	add	eax, DWORD PTR _len$69105[ebp]
	mov	DWORD PTR _len$69105[ebp], eax
$LN7@Generate:
; Line 167
	push	5
	lea	edx, DWORD PTR _res$69100[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetVal@CBenchRandomGenerator@@QAEIAAII@Z ; CBenchRandomGenerator::GetVal
	add	eax, 6
	mov	DWORD PTR _ppp$69110[ebp], eax
; Line 168
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	?GetRnd@CBaseRandomGenerator@@QAEIXZ	; CBaseRandomGenerator::GetRnd
	mov	DWORD PTR _res$69100[ebp], eax
; Line 169
	mov	ecx, DWORD PTR _ppp$69110[ebp]
	cmp	ecx, DWORD PTR _dictBits$[ebp]
	jbe	SHORT $LN4@Generate
; Line 170
	jmp	SHORT $LN6@Generate
$LN4@Generate:
; Line 171
	mov	edx, DWORD PTR _ppp$69110[ebp]
	push	edx
	lea	eax, DWORD PTR _res$69100[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetVal@CBenchRandomGenerator@@QAEIAAII@Z ; CBenchRandomGenerator::GetVal
	mov	DWORD PTR _rep0$[ebp], eax
; Line 172
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	call	?GetRnd@CBaseRandomGenerator@@QAEIXZ	; CBaseRandomGenerator::GetRnd
	mov	DWORD PTR _res$69100[ebp], eax
$LN6@Generate:
; Line 174
	mov	edx, DWORD PTR _rep0$[ebp]
	cmp	edx, DWORD PTR _pos$[ebp]
	jae	SHORT $LN7@Generate
; Line 175
	mov	eax, DWORD PTR _rep0$[ebp]
	add	eax, 1
	mov	DWORD PTR _rep0$[ebp], eax
$LN8@Generate:
; Line 178
	mov	DWORD PTR _i$69112[ebp], 0
	jmp	SHORT $LN3@Generate
$LN2@Generate:
	mov	ecx, DWORD PTR _i$69112[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$69112[ebp], ecx
	mov	edx, DWORD PTR _pos$[ebp]
	add	edx, 1
	mov	DWORD PTR _pos$[ebp], edx
$LN3@Generate:
	mov	eax, DWORD PTR _i$69112[ebp]
	cmp	eax, DWORD PTR _len$69105[ebp]
	jae	SHORT $LN9@Generate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pos$[ebp]
	cmp	edx, DWORD PTR [ecx+4]
	jae	SHORT $LN9@Generate
; Line 179
	mov	eax, DWORD PTR _pos$[ebp]
	sub	eax, DWORD PTR _rep0$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	mov	esi, DWORD PTR _pos$[ebp]
	mov	dl, BYTE PTR [eax+edx]
	mov	BYTE PTR [ecx+esi], dl
	jmp	SHORT $LN2@Generate
$LN9@Generate:
; Line 181
	jmp	$LN13@Generate
$LN14@Generate:
; Line 182
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@Generate
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN18@Generate:
	DD	1
	DD	$LN17@Generate
$LN17@Generate:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN16@Generate
$LN16@Generate:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
?Generate@CBenchRandomGenerator@@QAEXI@Z ENDP		; CBenchRandomGenerator::Generate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetVal@CBenchRandomGenerator@@QAEIAAII@Z
_TEXT	SEGMENT
_val$ = -8						; size = 4
_this$ = -4						; size = 4
_res$ = 8						; size = 4
_numBits$ = 12						; size = 4
?GetVal@CBenchRandomGenerator@@QAEIAAII@Z PROC		; CBenchRandomGenerator::GetVal, COMDAT
; _this$ = ecx
; Line 131
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 132
	mov	eax, 1
	mov	ecx, DWORD PTR _numBits$[ebp]
	shl	eax, cl
	sub	eax, 1
	mov	ecx, DWORD PTR _res$[ebp]
	and	eax, DWORD PTR [ecx]
	mov	DWORD PTR _val$[ebp], eax
; Line 133
	mov	edx, DWORD PTR _res$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _numBits$[ebp]
	shr	eax, cl
	mov	ecx, DWORD PTR _res$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 134
	mov	eax, DWORD PTR _val$[ebp]
; Line 135
	mov	esp, ebp
	pop	ebp
	ret	8
?GetVal@CBenchRandomGenerator@@QAEIAAII@Z ENDP		; CBenchRandomGenerator::GetVal
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetLen@CBenchRandomGenerator@@QAEIAAI@Z
_TEXT	SEGMENT
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_res$ = 8						; size = 4
?GetLen@CBenchRandomGenerator@@QAEIAAI@Z PROC		; CBenchRandomGenerator::GetLen, COMDAT
; _this$ = ecx
; Line 137
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 138
	push	2
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetVal@CBenchRandomGenerator@@QAEIAAII@Z ; CBenchRandomGenerator::GetVal
	mov	DWORD PTR _len$[ebp], eax
; Line 139
	mov	ecx, DWORD PTR _len$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _res$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetVal@CBenchRandomGenerator@@QAEIAAII@Z ; CBenchRandomGenerator::GetVal
; Line 140
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetLen@CBenchRandomGenerator@@QAEIAAI@Z ENDP		; CBenchRandomGenerator::GetLen
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Init@CBenchmarkInStream@@QAEXPBEI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_data$ = 8						; size = 4
_size$ = 12						; size = 4
?Init@CBenchmarkInStream@@QAEXPBEI@Z PROC		; CBenchmarkInStream::Init, COMDAT
; _this$ = ecx
; Line 196
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 197
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 198
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+16], eax
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
; Line 200
	mov	esp, ebp
	pop	ebp
	ret	8
?Init@CBenchmarkInStream@@QAEXPBEI@Z ENDP		; CBenchmarkInStream::Init
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Init@CBenchmarkOutStream@@QAEX_N0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_realCopy$ = 8						; size = 1
_calcCrc$ = 12						; size = 1
?Init@CBenchmarkOutStream@@QAEX_N0@Z PROC		; CBenchmarkOutStream::Init, COMDAT
; _this$ = ecx
; Line 234
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 235
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], -1
; Line 236
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR _realCopy$[ebp]
	mov	BYTE PTR [ecx+24], dl
; Line 237
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _calcCrc$[ebp]
	mov	BYTE PTR [eax+25], cl
; Line 239
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], 0
; Line 240
	mov	esp, ebp
	pop	ebp
	ret	8
?Init@CBenchmarkOutStream@@QAEX_N0@Z ENDP		; CBenchmarkOutStream::Init
_TEXT	ENDS
PUBLIC	??_7CCrcOutStream@@6B@				; CCrcOutStream::`vftable'
PUBLIC	??0CMyUnknownImp@@QAE@XZ			; CMyUnknownImp::CMyUnknownImp
PUBLIC	??0ISequentialOutStream@@QAE@XZ			; ISequentialOutStream::ISequentialOutStream
PUBLIC	??_R4CCrcOutStream@@6B@				; CCrcOutStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCCrcOutStream@@@8			; CCrcOutStream `RTTI Type Descriptor'
PUBLIC	??_R3CCrcOutStream@@8				; CCrcOutStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCrcOutStream@@8				; CCrcOutStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCrcOutStream@@8			; CCrcOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ISequentialOutStream@@8		; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUISequentialOutStream@@@8		; ISequentialOutStream `RTTI Type Descriptor'
PUBLIC	??_R3ISequentialOutStream@@8			; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ISequentialOutStream@@8			; ISequentialOutStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIUnknown@@@8				; IUnknown `RTTI Type Descriptor'
PUBLIC	??_R3IUnknown@@8				; IUnknown::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IUnknown@@8				; IUnknown::`RTTI Base Class Array'
PUBLIC	??_R13?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AVCMyUnknownImp@@@8			; CMyUnknownImp `RTTI Type Descriptor'
PUBLIC	??_R3CMyUnknownImp@@8				; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMyUnknownImp@@8				; CMyUnknownImp::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?QueryInterface@CCrcOutStream@@UAGJABU_GUID@@PAPAX@Z ; CCrcOutStream::QueryInterface
PUBLIC	?AddRef@CCrcOutStream@@UAGKXZ			; CCrcOutStream::AddRef
PUBLIC	?Release@CCrcOutStream@@UAGKXZ			; CCrcOutStream::Release
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_R1A@?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R2CMyUnknownImp@@8
rdata$r	SEGMENT
??_R2CMyUnknownImp@@8 DD FLAT:??_R1A@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMyUnknownImp@@8
rdata$r	SEGMENT
??_R3CMyUnknownImp@@8 DD 00H				; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMyUnknownImp@@@8
_DATA	SEGMENT
??_R0?AVCMyUnknownImp@@@8 DD FLAT:??_7type_info@@6B@	; CMyUnknownImp `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMyUnknownImp@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R13?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R2IUnknown@@8
rdata$r	SEGMENT
??_R2IUnknown@@8 DD FLAT:??_R1A@?0A@EA@IUnknown@@8	; IUnknown::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3IUnknown@@8
rdata$r	SEGMENT
??_R3IUnknown@@8 DD 00H					; IUnknown::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIUnknown@@@8
_DATA	SEGMENT
??_R0?AUIUnknown@@@8 DD FLAT:??_7type_info@@6B@		; IUnknown `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIUnknown@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IUnknown@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R2ISequentialOutStream@@8
rdata$r	SEGMENT
??_R2ISequentialOutStream@@8 DD FLAT:??_R1A@?0A@EA@ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ISequentialOutStream@@8
rdata$r	SEGMENT
??_R3ISequentialOutStream@@8 DD 00H			; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ISequentialOutStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUISequentialOutStream@@@8
_DATA	SEGMENT
??_R0?AUISequentialOutStream@@@8 DD FLAT:??_7type_info@@6B@ ; ISequentialOutStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUISequentialOutStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ISequentialOutStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ISequentialOutStream@@8 DD FLAT:??_R0?AUISequentialOutStream@@@8 ; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ISequentialOutStream@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CCrcOutStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CCrcOutStream@@8 DD FLAT:??_R0?AVCCrcOutStream@@@8 ; CCrcOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCrcOutStream@@8
rdata$r	ENDS
;	COMDAT ??_R2CCrcOutStream@@8
rdata$r	SEGMENT
??_R2CCrcOutStream@@8 DD FLAT:??_R1A@?0A@EA@CCrcOutStream@@8 ; CCrcOutStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ISequentialOutStream@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CCrcOutStream@@8
rdata$r	SEGMENT
??_R3CCrcOutStream@@8 DD 00H				; CCrcOutStream::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2CCrcOutStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCrcOutStream@@@8
_DATA	SEGMENT
??_R0?AVCCrcOutStream@@@8 DD FLAT:??_7type_info@@6B@	; CCrcOutStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCrcOutStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CCrcOutStream@@6B@
rdata$r	SEGMENT
??_R4CCrcOutStream@@6B@ DD 00H				; CCrcOutStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCCrcOutStream@@@8
	DD	FLAT:??_R3CCrcOutStream@@8
rdata$r	ENDS
;	COMDAT ??_7CCrcOutStream@@6B@
CONST	SEGMENT
??_7CCrcOutStream@@6B@ DD FLAT:??_R4CCrcOutStream@@6B@	; CCrcOutStream::`vftable'
	DD	FLAT:?QueryInterface@CCrcOutStream@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CCrcOutStream@@UAGKXZ
	DD	FLAT:?Release@CCrcOutStream@@UAGKXZ
	DD	FLAT:?Write@CCrcOutStream@@UAGJPBXIPAI@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CCrcOutStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CCrcOutStream@@QAE@XZ PROC				; CCrcOutStream::CCrcOutStream, COMDAT
; _this$ = ecx
; Line 277
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ISequentialOutStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CCrcOutStream@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+8], 1
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CCrcOutStream@@QAE@XZ ENDP				; CCrcOutStream::CCrcOutStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CMyUnknownImp@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMyUnknownImp@@QAE@XZ PROC				; CMyUnknownImp::CMyUnknownImp, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 167
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CMyUnknownImp@@QAE@XZ ENDP				; CMyUnknownImp::CMyUnknownImp
_TEXT	ENDS
PUBLIC	_==@8
EXTRN	_IID_IUnknown:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@CCrcOutStream@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CCrcOutStream@@UAGJABU_GUID@@PAPAX@Z PROC ; CCrcOutStream::QueryInterface, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\bench.cpp
; Line 275
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN1@QueryInter
$LN2@QueryInter:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN3@QueryInter
$LN1@QueryInter:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	xor	eax, eax
$LN3@QueryInter:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CCrcOutStream@@UAGJABU_GUID@@PAPAX@Z ENDP ; CCrcOutStream::QueryInterface
_TEXT	ENDS
PUBLIC	_IsEqualGUID@8
; Function compile flags: /Odtp /RTCsu
;	COMDAT _==@8
_TEXT	SEGMENT
_guidOne$ = 8						; size = 4
_guidOther$ = 12					; size = 4
_==@8	PROC						; COMDAT
; File c:\program files (x86)\microsoft sdks\windows\v7.0a\include\guiddef.h
; Line 193
	push	ebp
	mov	ebp, esp
; Line 194
	mov	eax, DWORD PTR _guidOther$[ebp]
	push	eax
	mov	ecx, DWORD PTR _guidOne$[ebp]
	push	ecx
	call	_IsEqualGUID@8
; Line 195
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_==@8	ENDP
_TEXT	ENDS
EXTRN	_memcmp:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT _IsEqualGUID@8
_TEXT	SEGMENT
_rguid1$ = 8						; size = 4
_rguid2$ = 12						; size = 4
_IsEqualGUID@8 PROC					; COMDAT
; Line 160
	push	ebp
	mov	ebp, esp
; Line 161
	push	16					; 00000010H
	mov	eax, DWORD PTR _rguid2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rguid1$[ebp]
	push	ecx
	call	_memcmp
	add	esp, 12					; 0000000cH
	neg	eax
	sbb	eax, eax
	add	eax, 1
; Line 162
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_IsEqualGUID@8 ENDP
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CCrcOutStream@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CCrcOutStream@@UAGKXZ PROC			; CCrcOutStream::AddRef, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\bench.cpp
; Line 275
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CCrcOutStream@@UAGKXZ ENDP			; CCrcOutStream::AddRef
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CCrcOutStream@@UAGKXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
$T72740 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CCrcOutStream@@UAGKXZ PROC			; CCrcOutStream::Release, COMDAT
; Line 275
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	jmp	SHORT $LN2@Release
$LN1@Release:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T72740[ebp], edx
	mov	eax, DWORD PTR $T72740[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	xor	eax, eax
$LN2@Release:
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CCrcOutStream@@UAGKXZ ENDP			; CCrcOutStream::Release
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Init@CCrcOutStream@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Init@CCrcOutStream@@QAEXXZ PROC			; CCrcOutStream::Init, COMDAT
; _this$ = ecx
; Line 278
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], -1
	mov	esp, ebp
	pop	ebp
	ret	0
?Init@CCrcOutStream@@QAEXXZ ENDP			; CCrcOutStream::Init
_TEXT	ENDS
PUBLIC	??_7ISequentialOutStream@@6B@			; ISequentialOutStream::`vftable'
PUBLIC	??0IUnknown@@QAE@XZ				; IUnknown::IUnknown
PUBLIC	??_R4ISequentialOutStream@@6B@			; ISequentialOutStream::`RTTI Complete Object Locator'
EXTRN	__purecall:PROC
;	COMDAT ??_R4ISequentialOutStream@@6B@
rdata$r	SEGMENT
??_R4ISequentialOutStream@@6B@ DD 00H			; ISequentialOutStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUISequentialOutStream@@@8
	DD	FLAT:??_R3ISequentialOutStream@@8
rdata$r	ENDS
;	COMDAT ??_7ISequentialOutStream@@6B@
CONST	SEGMENT
??_7ISequentialOutStream@@6B@ DD FLAT:??_R4ISequentialOutStream@@6B@ ; ISequentialOutStream::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ISequentialOutStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ISequentialOutStream@@QAE@XZ PROC			; ISequentialOutStream::ISequentialOutStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ISequentialOutStream@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ISequentialOutStream@@QAE@XZ ENDP			; ISequentialOutStream::ISequentialOutStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0IUnknown@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IUnknown@@QAE@XZ PROC				; IUnknown::IUnknown, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0IUnknown@@QAE@XZ ENDP				; IUnknown::IUnknown
_TEXT	ENDS
PUBLIC	??1CBenchBuffer@@UAE@XZ				; CBenchBuffer::~CBenchBuffer
PUBLIC	??_7CBenchmarkOutStream@@6BCBenchBuffer@@@	; CBenchmarkOutStream::`vftable'
PUBLIC	??_7CBenchmarkOutStream@@6BISequentialOutStream@@@ ; CBenchmarkOutStream::`vftable'
PUBLIC	??0CBenchBuffer@@QAE@XZ				; CBenchBuffer::CBenchBuffer
PUBLIC	??_R4CBenchmarkOutStream@@6BISequentialOutStream@@@ ; CBenchmarkOutStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCBenchmarkOutStream@@@8			; CBenchmarkOutStream `RTTI Type Descriptor'
PUBLIC	??_R3CBenchmarkOutStream@@8			; CBenchmarkOutStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CBenchmarkOutStream@@8			; CBenchmarkOutStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CBenchmarkOutStream@@8		; CBenchmarkOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@CBenchBuffer@@8			; CBenchBuffer::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AVCBenchBuffer@@@8			; CBenchBuffer `RTTI Type Descriptor'
PUBLIC	??_R3CBenchBuffer@@8				; CBenchBuffer::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CBenchBuffer@@8				; CBenchBuffer::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CBenchBuffer@@8			; CBenchBuffer::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1BA@?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (16,-1,0,64)'
PUBLIC	?QueryInterface@CBenchmarkOutStream@@UAGJABU_GUID@@PAPAX@Z ; CBenchmarkOutStream::QueryInterface
PUBLIC	?AddRef@CBenchmarkOutStream@@UAGKXZ		; CBenchmarkOutStream::AddRef
PUBLIC	?Release@CBenchmarkOutStream@@UAGKXZ		; CBenchmarkOutStream::Release
PUBLIC	??_R4CBenchmarkOutStream@@6BCBenchBuffer@@@	; CBenchmarkOutStream::`RTTI Complete Object Locator'
PUBLIC	??_ECBenchmarkOutStream@@W3AEPAXI@Z		; [thunk]:CBenchmarkOutStream::`vector deleting destructor'
;	COMDAT ??_R4CBenchmarkOutStream@@6BCBenchBuffer@@@
rdata$r	SEGMENT
??_R4CBenchmarkOutStream@@6BCBenchBuffer@@@ DD 00H	; CBenchmarkOutStream::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVCBenchmarkOutStream@@@8
	DD	FLAT:??_R3CBenchmarkOutStream@@8
rdata$r	ENDS
;	COMDAT ??_R1BA@?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R1BA@?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (16,-1,0,64)'
	DD	00H
	DD	010H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CBenchBuffer@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CBenchBuffer@@8 DD FLAT:??_R0?AVCBenchBuffer@@@8 ; CBenchBuffer::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CBenchBuffer@@8
rdata$r	ENDS
;	COMDAT ??_R2CBenchBuffer@@8
rdata$r	SEGMENT
??_R2CBenchBuffer@@8 DD FLAT:??_R1A@?0A@EA@CBenchBuffer@@8 ; CBenchBuffer::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CBenchBuffer@@8
rdata$r	SEGMENT
??_R3CBenchBuffer@@8 DD 00H				; CBenchBuffer::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CBenchBuffer@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCBenchBuffer@@@8
_DATA	SEGMENT
??_R0?AVCBenchBuffer@@@8 DD FLAT:??_7type_info@@6B@	; CBenchBuffer `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCBenchBuffer@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@CBenchBuffer@@8
rdata$r	SEGMENT
??_R13?0A@EA@CBenchBuffer@@8 DD FLAT:??_R0?AVCBenchBuffer@@@8 ; CBenchBuffer::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CBenchBuffer@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CBenchmarkOutStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CBenchmarkOutStream@@8 DD FLAT:??_R0?AVCBenchmarkOutStream@@@8 ; CBenchmarkOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CBenchmarkOutStream@@8
rdata$r	ENDS
;	COMDAT ??_R2CBenchmarkOutStream@@8
rdata$r	SEGMENT
??_R2CBenchmarkOutStream@@8 DD FLAT:??_R1A@?0A@EA@CBenchmarkOutStream@@8 ; CBenchmarkOutStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ISequentialOutStream@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CBenchBuffer@@8
	DD	FLAT:??_R1BA@?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CBenchmarkOutStream@@8
rdata$r	SEGMENT
??_R3CBenchmarkOutStream@@8 DD 00H			; CBenchmarkOutStream::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2CBenchmarkOutStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCBenchmarkOutStream@@@8
_DATA	SEGMENT
??_R0?AVCBenchmarkOutStream@@@8 DD FLAT:??_7type_info@@6B@ ; CBenchmarkOutStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCBenchmarkOutStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CBenchmarkOutStream@@6BISequentialOutStream@@@
rdata$r	SEGMENT
??_R4CBenchmarkOutStream@@6BISequentialOutStream@@@ DD 00H ; CBenchmarkOutStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCBenchmarkOutStream@@@8
	DD	FLAT:??_R3CBenchmarkOutStream@@8
rdata$r	ENDS
;	COMDAT ??_7CBenchmarkOutStream@@6BCBenchBuffer@@@
CONST	SEGMENT
??_7CBenchmarkOutStream@@6BCBenchBuffer@@@ DD FLAT:??_R4CBenchmarkOutStream@@6BCBenchBuffer@@@ ; CBenchmarkOutStream::`vftable'
	DD	FLAT:??_ECBenchmarkOutStream@@W3AEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CBenchmarkOutStream@@6BISequentialOutStream@@@
CONST	SEGMENT
??_7CBenchmarkOutStream@@6BISequentialOutStream@@@ DD FLAT:??_R4CBenchmarkOutStream@@6BISequentialOutStream@@@ ; CBenchmarkOutStream::`vftable'
	DD	FLAT:?QueryInterface@CBenchmarkOutStream@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CBenchmarkOutStream@@UAGKXZ
	DD	FLAT:?Release@CBenchmarkOutStream@@UAGKXZ
	DD	FLAT:?Write@CBenchmarkOutStream@@UAGJPBXIPAI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CBenchmarkOutStream@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CBenchmarkOutStream@@QAE@XZ$0
__ehfuncinfo$??0CBenchmarkOutStream@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CBenchmarkOutStream@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CBenchmarkOutStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CBenchmarkOutStream@@QAE@XZ PROC			; CBenchmarkOutStream::CBenchmarkOutStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CBenchmarkOutStream@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ISequentialOutStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CBenchBuffer@@QAE@XZ			; CBenchBuffer::CBenchBuffer
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CBenchmarkOutStream@@6BISequentialOutStream@@@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], OFFSET ??_7CBenchmarkOutStream@@6BCBenchBuffer@@@
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CBenchmarkOutStream@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1CBenchBuffer@@UAE@XZ			; CBenchBuffer::~CBenchBuffer
__ehhandler$??0CBenchmarkOutStream@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CBenchmarkOutStream@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CBenchmarkOutStream@@QAE@XZ ENDP			; CBenchmarkOutStream::CBenchmarkOutStream
PUBLIC	??_7CBenchBuffer@@6B@				; CBenchBuffer::`vftable'
PUBLIC	??_R4CBenchBuffer@@6B@				; CBenchBuffer::`RTTI Complete Object Locator'
EXTRN	??_ECBenchBuffer@@UAEPAXI@Z:PROC		; CBenchBuffer::`vector deleting destructor'
;	COMDAT ??_R4CBenchBuffer@@6B@
rdata$r	SEGMENT
??_R4CBenchBuffer@@6B@ DD 00H				; CBenchBuffer::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCBenchBuffer@@@8
	DD	FLAT:??_R3CBenchBuffer@@8
rdata$r	ENDS
;	COMDAT ??_7CBenchBuffer@@6B@
CONST	SEGMENT
??_7CBenchBuffer@@6B@ DD FLAT:??_R4CBenchBuffer@@6B@	; CBenchBuffer::`vftable'
	DD	FLAT:??_ECBenchBuffer@@UAEPAXI@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CBenchBuffer@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CBenchBuffer@@QAE@XZ PROC				; CBenchBuffer::CBenchBuffer, COMDAT
; _this$ = ecx
; Line 107
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CBenchBuffer@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CBenchBuffer@@QAE@XZ ENDP				; CBenchBuffer::CBenchBuffer
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CBenchBuffer@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CBenchBuffer@@UAE@XZ PROC				; CBenchBuffer::~CBenchBuffer, COMDAT
; _this$ = ecx
; Line 108
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CBenchBuffer@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Free@CBenchBuffer@@QAEXXZ		; CBenchBuffer::Free
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CBenchBuffer@@UAE@XZ ENDP				; CBenchBuffer::~CBenchBuffer
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??_GCBenchBuffer@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCBenchBuffer@@UAEPAXI@Z PROC			; CBenchBuffer::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CBenchBuffer@@UAE@XZ			; CBenchBuffer::~CBenchBuffer
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCBenchBuffer@@UAEPAXI@Z ENDP			; CBenchBuffer::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CBenchmarkOutStream@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CBenchmarkOutStream@@UAGJABU_GUID@@PAPAX@Z PROC ; CBenchmarkOutStream::QueryInterface, COMDAT
; Line 241
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@2
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN1@QueryInter@2
$LN2@QueryInter@2:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN3@QueryInter@2
$LN1@QueryInter@2:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], edx
	xor	eax, eax
$LN3@QueryInter@2:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CBenchmarkOutStream@@UAGJABU_GUID@@PAPAX@Z ENDP ; CBenchmarkOutStream::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CBenchmarkOutStream@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CBenchmarkOutStream@@UAGKXZ PROC		; CBenchmarkOutStream::AddRef, COMDAT
; Line 241
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+16], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CBenchmarkOutStream@@UAGKXZ ENDP		; CBenchmarkOutStream::AddRef
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CBenchmarkOutStream@@UAGKXZ
_TEXT	SEGMENT
tv88 = -16						; size = 4
tv70 = -12						; size = 4
$T72769 = -8						; size = 4
$T72768 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CBenchmarkOutStream@@UAGKXZ PROC		; CBenchmarkOutStream::Release, COMDAT
; Line 241
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+16], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+16]
	jmp	SHORT $LN2@Release@2
$LN1@Release@2:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T72769[ebp], edx
	mov	eax, DWORD PTR $T72769[ebp]
	mov	DWORD PTR $T72768[ebp], eax
	cmp	DWORD PTR $T72768[ebp], 0
	je	SHORT $LN4@Release@2
	mov	esi, esp
	push	1
	mov	ecx, DWORD PTR $T72768[ebp]
	add	ecx, 4
	mov	edx, DWORD PTR $T72768[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [eax]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv88[ebp], eax
	jmp	SHORT $LN5@Release@2
$LN4@Release@2:
	mov	DWORD PTR tv88[ebp], 0
$LN5@Release@2:
	xor	eax, eax
$LN2@Release@2:
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CBenchmarkOutStream@@UAGKXZ ENDP		; CBenchmarkOutStream::Release
_TEXT	ENDS
PUBLIC	??_7CBenchmarkInStream@@6B@			; CBenchmarkInStream::`vftable'
PUBLIC	??0ISequentialInStream@@QAE@XZ			; ISequentialInStream::ISequentialInStream
PUBLIC	??_R4CBenchmarkInStream@@6B@			; CBenchmarkInStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCBenchmarkInStream@@@8			; CBenchmarkInStream `RTTI Type Descriptor'
PUBLIC	??_R3CBenchmarkInStream@@8			; CBenchmarkInStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CBenchmarkInStream@@8			; CBenchmarkInStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CBenchmarkInStream@@8		; CBenchmarkInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ISequentialInStream@@8		; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUISequentialInStream@@@8			; ISequentialInStream `RTTI Type Descriptor'
PUBLIC	??_R3ISequentialInStream@@8			; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ISequentialInStream@@8			; ISequentialInStream::`RTTI Base Class Array'
PUBLIC	?QueryInterface@CBenchmarkInStream@@UAGJABU_GUID@@PAPAX@Z ; CBenchmarkInStream::QueryInterface
PUBLIC	?AddRef@CBenchmarkInStream@@UAGKXZ		; CBenchmarkInStream::AddRef
PUBLIC	?Release@CBenchmarkInStream@@UAGKXZ		; CBenchmarkInStream::Release
;	COMDAT ??_R2ISequentialInStream@@8
rdata$r	SEGMENT
??_R2ISequentialInStream@@8 DD FLAT:??_R1A@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ISequentialInStream@@8
rdata$r	SEGMENT
??_R3ISequentialInStream@@8 DD 00H			; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ISequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUISequentialInStream@@@8
_DATA	SEGMENT
??_R0?AUISequentialInStream@@@8 DD FLAT:??_7type_info@@6B@ ; ISequentialInStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUISequentialInStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ISequentialInStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ISequentialInStream@@8 DD FLAT:??_R0?AUISequentialInStream@@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ISequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CBenchmarkInStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CBenchmarkInStream@@8 DD FLAT:??_R0?AVCBenchmarkInStream@@@8 ; CBenchmarkInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CBenchmarkInStream@@8
rdata$r	ENDS
;	COMDAT ??_R2CBenchmarkInStream@@8
rdata$r	SEGMENT
??_R2CBenchmarkInStream@@8 DD FLAT:??_R1A@?0A@EA@CBenchmarkInStream@@8 ; CBenchmarkInStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ISequentialInStream@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CBenchmarkInStream@@8
rdata$r	SEGMENT
??_R3CBenchmarkInStream@@8 DD 00H			; CBenchmarkInStream::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2CBenchmarkInStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCBenchmarkInStream@@@8
_DATA	SEGMENT
??_R0?AVCBenchmarkInStream@@@8 DD FLAT:??_7type_info@@6B@ ; CBenchmarkInStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCBenchmarkInStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CBenchmarkInStream@@6B@
rdata$r	SEGMENT
??_R4CBenchmarkInStream@@6B@ DD 00H			; CBenchmarkInStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCBenchmarkInStream@@@8
	DD	FLAT:??_R3CBenchmarkInStream@@8
rdata$r	ENDS
;	COMDAT ??_7CBenchmarkInStream@@6B@
CONST	SEGMENT
??_7CBenchmarkInStream@@6B@ DD FLAT:??_R4CBenchmarkInStream@@6B@ ; CBenchmarkInStream::`vftable'
	DD	FLAT:?QueryInterface@CBenchmarkInStream@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CBenchmarkInStream@@UAGKXZ
	DD	FLAT:?Release@CBenchmarkInStream@@UAGKXZ
	DD	FLAT:?Read@CBenchmarkInStream@@UAGJPAXIPAI@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CBenchmarkInStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CBenchmarkInStream@@QAE@XZ PROC			; CBenchmarkInStream::CBenchmarkInStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ISequentialInStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CBenchmarkInStream@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CBenchmarkInStream@@QAE@XZ ENDP			; CBenchmarkInStream::CBenchmarkInStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CBenchmarkInStream@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CBenchmarkInStream@@UAGJABU_GUID@@PAPAX@Z PROC ; CBenchmarkInStream::QueryInterface, COMDAT
; Line 194
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@3
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN1@QueryInter@3
$LN2@QueryInter@3:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN3@QueryInter@3
$LN1@QueryInter@3:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	xor	eax, eax
$LN3@QueryInter@3:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CBenchmarkInStream@@UAGJABU_GUID@@PAPAX@Z ENDP ; CBenchmarkInStream::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CBenchmarkInStream@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CBenchmarkInStream@@UAGKXZ PROC			; CBenchmarkInStream::AddRef, COMDAT
; Line 194
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CBenchmarkInStream@@UAGKXZ ENDP			; CBenchmarkInStream::AddRef
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CBenchmarkInStream@@UAGKXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
$T72780 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CBenchmarkInStream@@UAGKXZ PROC		; CBenchmarkInStream::Release, COMDAT
; Line 194
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	jmp	SHORT $LN2@Release@3
$LN1@Release@3:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T72780[ebp], edx
	mov	eax, DWORD PTR $T72780[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	xor	eax, eax
$LN2@Release@3:
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CBenchmarkInStream@@UAGKXZ ENDP		; CBenchmarkInStream::Release
_TEXT	ENDS
PUBLIC	??_7ISequentialInStream@@6B@			; ISequentialInStream::`vftable'
PUBLIC	??_R4ISequentialInStream@@6B@			; ISequentialInStream::`RTTI Complete Object Locator'
;	COMDAT ??_R4ISequentialInStream@@6B@
rdata$r	SEGMENT
??_R4ISequentialInStream@@6B@ DD 00H			; ISequentialInStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUISequentialInStream@@@8
	DD	FLAT:??_R3ISequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_7ISequentialInStream@@6B@
CONST	SEGMENT
??_7ISequentialInStream@@6B@ DD FLAT:??_R4ISequentialInStream@@6B@ ; ISequentialInStream::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ISequentialInStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ISequentialInStream@@QAE@XZ PROC			; ISequentialInStream::ISequentialInStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ISequentialInStream@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ISequentialInStream@@QAE@XZ ENDP			; ISequentialInStream::ISequentialInStream
_TEXT	ENDS
PUBLIC	?Release@?$CMyComPtr@UICompressFilter@@@@QAEXXZ	; CMyComPtr<ICompressFilter>::Release
PUBLIC	?Release@?$CMyComPtr@UICompressCoder@@@@QAEXXZ	; CMyComPtr<ICompressCoder>::Release
PUBLIC	??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *
PUBLIC	??1?$CMyComPtr@UICryptoProperties@@@@QAE@XZ	; CMyComPtr<ICryptoProperties>::~CMyComPtr<ICryptoProperties>
PUBLIC	??C?$CMyComPtr@UICryptoProperties@@@@QBEPAUICryptoProperties@@XZ ; CMyComPtr<ICryptoProperties>::operator->
PUBLIC	??B?$CMyComPtr@UICryptoProperties@@@@QBEPAUICryptoProperties@@XZ ; CMyComPtr<ICryptoProperties>::operator ICryptoProperties *
PUBLIC	??$QueryInterface@UICryptoProperties@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICryptoProperties@@@Z ; CMyComPtr<IUnknown>::QueryInterface<ICryptoProperties>
PUBLIC	??I?$CMyComPtr@UICryptoProperties@@@@QAEPAPAUICryptoProperties@@XZ ; CMyComPtr<ICryptoProperties>::operator&
PUBLIC	??0?$CMyComPtr@UICryptoProperties@@@@QAE@XZ	; CMyComPtr<ICryptoProperties>::CMyComPtr<ICryptoProperties>
PUBLIC	?Encode@CEncoderInfo@@QAEJXZ			; CEncoderInfo::Encode
EXTRN	?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z:PROC ; WriteStream
EXTRN	_IID_ICryptoProperties:BYTE
xdata$x	SEGMENT
__unwindtable$?Encode@CEncoderInfo@@QAEJXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Encode@CEncoderInfo@@QAEJXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Encode@CEncoderInfo@@QAEJXZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?Encode@CEncoderInfo@@QAEJXZ$2
	DD	01H
	DD	FLAT:__unwindfunclet$?Encode@CEncoderInfo@@QAEJXZ$3
__ehfuncinfo$?Encode@CEncoderInfo@@QAEJXZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?Encode@CEncoderInfo@@QAEJXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv296 = -208						; size = 4
tv248 = -204						; size = 4
tv241 = -200						; size = 4
tv210 = -196						; size = 4
tv509 = -192						; size = 4
tv501 = -188						; size = 8
tv199 = -180						; size = 4
tv490 = -176						; size = 8
tv467 = -168						; size = 8
tv452 = -160						; size = 4
tv170 = -156						; size = 4
tv159 = -152						; size = 4
tv145 = -148						; size = 4
$T72800 = -144						; size = 4
$T72799 = -140						; size = 4
$T72798 = -136						; size = 4
$T72797 = -132						; size = 4
$T72791 = -128						; size = 4
$T72790 = -124						; size = 4
$T72789 = -120						; size = 4
$T72786 = -116						; size = 4
$T72785 = -112						; size = 4
_crcNew$70147 = -108					; size = 4
___result__$70144 = -104				; size = 4
___result__$70140 = -100				; size = 4
_calcCrc$70137 = -94					; size = 1
_isLast$70136 = -93					; size = 1
___result__$70133 = -92					; size = 4
_i$70128 = -88						; size = 8
___result__$70125 = -80					; size = 4
___result__$70122 = -76					; size = 4
_crcPrev$ = -72						; size = 4
_prev$ = -68						; size = 8
_inStream$ = -56					; size = 4
_inStreamSpec$ = -48					; size = 4
_coder$ = -40						; size = 4
_cp$ = -28						; size = 4
_bi$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Encode@CEncoderInfo@@QAEJXZ PROC			; CEncoderInfo::Encode
; _this$ = ecx
; Line 848
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Encode@CEncoderInfo@@QAEJXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 196				; 000000c4H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 849
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 8
	mov	DWORD PTR _bi$[ebp], ecx
; Line 850
	mov	edx, DWORD PTR _bi$[ebp]
	mov	DWORD PTR [edx+32], 0
	mov	DWORD PTR [edx+36], 0
; Line 851
	mov	eax, DWORD PTR _bi$[ebp]
	mov	DWORD PTR [eax+40], 0
	mov	DWORD PTR [eax+44], 0
; Line 852
	lea	ecx, DWORD PTR _cp$[ebp]
	call	??0?$CMyComPtr@UICryptoProperties@@@@QAE@XZ ; CMyComPtr<ICryptoProperties>::CMyComPtr<ICryptoProperties>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 853
	lea	ecx, DWORD PTR _coder$[ebp]
	call	??0?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::CMyComPtr<IUnknown>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
; Line 854
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??B?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ ; CMyComPtr<ICompressFilter>::operator ICompressFilter *
	test	eax, eax
	je	SHORT $LN17@Encode
; Line 855
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??B?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ ; CMyComPtr<ICompressFilter>::operator ICompressFilter *
	push	eax
	lea	ecx, DWORD PTR _coder$[ebp]
	call	??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z ; CMyComPtr<IUnknown>::operator=
; Line 856
	jmp	SHORT $LN16@Encode
$LN17@Encode:
; Line 857
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator ICompressCoder *
	push	eax
	lea	ecx, DWORD PTR _coder$[ebp]
	call	??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z ; CMyComPtr<IUnknown>::operator=
$LN16@Encode:
; Line 858
	lea	ecx, DWORD PTR _cp$[ebp]
	call	??I?$CMyComPtr@UICryptoProperties@@@@QAEPAPAUICryptoProperties@@XZ ; CMyComPtr<ICryptoProperties>::operator&
	push	eax
	push	OFFSET _IID_ICryptoProperties
	lea	ecx, DWORD PTR _coder$[ebp]
	call	??$QueryInterface@UICryptoProperties@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICryptoProperties@@@Z ; CMyComPtr<IUnknown>::QueryInterface<ICryptoProperties>
; Line 859
	push	20					; 00000014H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T72786[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T72786[ebp], 0
	je	SHORT $LN20@Encode
	mov	ecx, DWORD PTR $T72786[ebp]
	call	??0CBenchmarkInStream@@QAE@XZ
	mov	DWORD PTR tv145[ebp], eax
	jmp	SHORT $LN21@Encode
$LN20@Encode:
	mov	DWORD PTR tv145[ebp], 0
$LN21@Encode:
	mov	ecx, DWORD PTR tv145[ebp]
	mov	DWORD PTR $T72785[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR $T72785[ebp]
	mov	DWORD PTR _inStreamSpec$[ebp], edx
; Line 860
	mov	eax, DWORD PTR _inStreamSpec$[ebp]
	push	eax
	lea	ecx, DWORD PTR _inStream$[ebp]
	call	??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
; Line 861
	mov	DWORD PTR _prev$[ebp], 0
	mov	DWORD PTR _prev$[ebp+4], 0
; Line 863
	mov	DWORD PTR _crcPrev$[ebp], 0
; Line 865
	lea	ecx, DWORD PTR _cp$[ebp]
	call	??B?$CMyComPtr@UICryptoProperties@@@@QBEPAUICryptoProperties@@XZ ; CMyComPtr<ICryptoProperties>::operator ICryptoProperties *
	test	eax, eax
	je	$LN15@Encode
; Line 867
	lea	ecx, DWORD PTR _cp$[ebp]
	call	??C?$CMyComPtr@UICryptoProperties@@@@QBEPAUICryptoProperties@@XZ ; CMyComPtr<ICryptoProperties>::operator->
	mov	DWORD PTR tv159[ebp], eax
	mov	esi, esp
	push	32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	push	ecx
	mov	edx, DWORD PTR tv159[ebp]
	push	edx
	mov	eax, DWORD PTR tv159[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$70122[ebp], eax
	cmp	DWORD PTR ___result__$70122[ebp], 0
	je	SHORT $LN14@Encode
	mov	eax, DWORD PTR ___result__$70122[ebp]
	mov	DWORD PTR $T72789[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _inStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _coder$[ebp]
	call	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cp$[ebp]
	call	??1?$CMyComPtr@UICryptoProperties@@@@QAE@XZ ; CMyComPtr<ICryptoProperties>::~CMyComPtr<ICryptoProperties>
	mov	eax, DWORD PTR $T72789[ebp]
	jmp	$LN18@Encode
$LN14@Encode:
; Line 868
	lea	ecx, DWORD PTR _cp$[ebp]
	call	??C?$CMyComPtr@UICryptoProperties@@@@QBEPAUICryptoProperties@@XZ ; CMyComPtr<ICryptoProperties>::operator->
	mov	DWORD PTR tv170[ebp], eax
	mov	esi, esp
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	push	ecx
	mov	edx, DWORD PTR tv170[ebp]
	push	edx
	mov	eax, DWORD PTR tv170[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$70125[ebp], eax
	cmp	DWORD PTR ___result__$70125[ebp], 0
	je	SHORT $LN15@Encode
	mov	eax, DWORD PTR ___result__$70125[ebp]
	mov	DWORD PTR $T72790[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _inStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _coder$[ebp]
	call	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cp$[ebp]
	call	??1?$CMyComPtr@UICryptoProperties@@@@QAE@XZ ; CMyComPtr<ICryptoProperties>::~CMyComPtr<ICryptoProperties>
	mov	eax, DWORD PTR $T72790[ebp]
	jmp	$LN18@Encode
$LN15@Encode:
; Line 871
	mov	DWORD PTR _i$70128[ebp], 0
	mov	DWORD PTR _i$70128[ebp+4], 0
	jmp	SHORT $LN12@Encode
$LN11@Encode:
	mov	ecx, DWORD PTR _i$70128[ebp]
	add	ecx, 1
	mov	edx, DWORD PTR _i$70128[ebp+4]
	adc	edx, 0
	mov	DWORD PTR _i$70128[ebp], ecx
	mov	DWORD PTR _i$70128[ebp+4], edx
$LN12@Encode:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv452[ebp], eax
	mov	ecx, DWORD PTR tv452[ebp]
	mov	edx, DWORD PTR _i$70128[ebp+4]
	cmp	edx, DWORD PTR [ecx+44]
	ja	$LN10@Encode
	jb	SHORT $LN31@Encode
	mov	eax, DWORD PTR tv452[ebp]
	mov	ecx, DWORD PTR _i$70128[ebp]
	cmp	ecx, DWORD PTR [eax+40]
	jae	$LN10@Encode
$LN31@Encode:
; Line 873
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+184], 0
	je	$LN9@Encode
	mov	eax, DWORD PTR _bi$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	sub	ecx, DWORD PTR _prev$[ebp]
	mov	edx, DWORD PTR [eax+36]
	sbb	edx, DWORD PTR _prev$[ebp+4]
	mov	DWORD PTR tv467[ebp], ecx
	mov	DWORD PTR tv467[ebp+4], edx
	cmp	DWORD PTR tv467[ebp+4], 0
	ja	SHORT $LN32@Encode
	cmp	DWORD PTR tv467[ebp], 1048576		; 00100000H
	jbe	SHORT $LN9@Encode
$LN32@Encode:
; Line 875
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+184]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+184]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$70133[ebp], eax
	cmp	DWORD PTR ___result__$70133[ebp], 0
	je	SHORT $LN8@Encode
	mov	ecx, DWORD PTR ___result__$70133[ebp]
	mov	DWORD PTR $T72791[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _inStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _coder$[ebp]
	call	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cp$[ebp]
	call	??1?$CMyComPtr@UICryptoProperties@@@@QAE@XZ ; CMyComPtr<ICryptoProperties>::~CMyComPtr<ICryptoProperties>
	mov	eax, DWORD PTR $T72791[ebp]
	jmp	$LN18@Encode
$LN8@Encode:
; Line 876
	mov	edx, DWORD PTR _bi$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR _prev$[ebp], eax
	mov	ecx, DWORD PTR [edx+36]
	mov	DWORD PTR _prev$[ebp+4], ecx
$LN9@Encode:
; Line 879
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	sub	eax, 1
	mov	ecx, DWORD PTR [edx+44]
	sbb	ecx, 0
	mov	DWORD PTR tv490[ebp], eax
	mov	DWORD PTR tv490[ebp+4], ecx
	mov	edx, DWORD PTR _i$70128[ebp]
	cmp	edx, DWORD PTR tv490[ebp]
	jne	SHORT $LN22@Encode
	mov	eax, DWORD PTR _i$70128[ebp+4]
	cmp	eax, DWORD PTR tv490[ebp+4]
	jne	SHORT $LN22@Encode
	mov	DWORD PTR tv199[ebp], 1
	jmp	SHORT $LN23@Encode
$LN22@Encode:
	mov	DWORD PTR tv199[ebp], 0
$LN23@Encode:
	mov	cl, BYTE PTR tv199[ebp]
	mov	BYTE PTR _isLast$70136[ebp], cl
; Line 880
	movzx	edx, BYTE PTR _isLast$70136[ebp]
	test	edx, edx
	jne	SHORT $LN24@Encode
	mov	eax, DWORD PTR _i$70128[ebp]
	and	eax, 127				; 0000007fH
	mov	ecx, DWORD PTR _i$70128[ebp+4]
	and	ecx, 0
	mov	DWORD PTR tv501[ebp], eax
	mov	DWORD PTR tv501[ebp+4], ecx
	mov	edx, DWORD PTR tv501[ebp]
	or	edx, DWORD PTR tv501[ebp+4]
	je	SHORT $LN24@Encode
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+116]
	test	ecx, ecx
	je	SHORT $LN25@Encode
$LN24@Encode:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv509[ebp], edx
	mov	eax, DWORD PTR tv509[ebp]
	cmp	DWORD PTR [eax+40], 1
	jne	SHORT $LN33@Encode
	mov	ecx, DWORD PTR tv509[ebp]
	cmp	DWORD PTR [ecx+44], 0
	je	SHORT $LN25@Encode
$LN33@Encode:
	mov	DWORD PTR tv210[ebp], 1
	jmp	SHORT $LN26@Encode
$LN25@Encode:
	mov	DWORD PTR tv210[ebp], 0
$LN26@Encode:
	mov	dl, BYTE PTR tv210[ebp]
	mov	BYTE PTR _calcCrc$70137[ebp], dl
; Line 881
	movzx	eax, BYTE PTR _calcCrc$70137[ebp]
	push	eax
	movzx	ecx, BYTE PTR _isLast$70136[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+172]
	call	?Init@CBenchmarkOutStream@@QAEX_N0@Z	; CBenchmarkOutStream::Init
; Line 883
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??B?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ ; CMyComPtr<ICompressFilter>::operator ICompressFilter *
	test	eax, eax
	je	$LN7@Encode
; Line 885
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+204]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+208]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+224]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 886
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??C?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ ; CMyComPtr<ICompressFilter>::operator->
	mov	DWORD PTR tv241[ebp], eax
	mov	eax, DWORD PTR tv241[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR tv241[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 887
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??C?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ ; CMyComPtr<ICompressFilter>::operator->
	mov	DWORD PTR tv248[ebp], eax
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+204]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+224]
	push	ecx
	mov	edx, DWORD PTR tv248[ebp]
	push	edx
	mov	eax, DWORD PTR tv248[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 888
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+204]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+224]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 176				; 000000b0H
	call	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
	push	eax
	call	?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z ; WriteStream
	mov	DWORD PTR ___result__$70140[ebp], eax
	cmp	DWORD PTR ___result__$70140[ebp], 0
	je	SHORT $LN6@Encode
	mov	ecx, DWORD PTR ___result__$70140[ebp]
	mov	DWORD PTR $T72797[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _inStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _coder$[ebp]
	call	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cp$[ebp]
	call	??1?$CMyComPtr@UICryptoProperties@@@@QAE@XZ ; CMyComPtr<ICryptoProperties>::~CMyComPtr<ICryptoProperties>
	mov	eax, DWORD PTR $T72797[ebp]
	jmp	$LN18@Encode
$LN6@Encode:
; Line 890
	jmp	$LN5@Encode
$LN7@Encode:
; Line 892
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+204]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+208]
	push	edx
	mov	ecx, DWORD PTR _inStreamSpec$[ebp]
	call	?Init@CBenchmarkInStream@@QAEXPBEI@Z	; CBenchmarkInStream::Init
; Line 893
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator->
	mov	DWORD PTR tv296[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *
	mov	esi, esp
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 176				; 000000b0H
	call	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
	push	eax
	lea	ecx, DWORD PTR _inStream$[ebp]
	call	??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
	push	eax
	mov	eax, DWORD PTR tv296[ebp]
	push	eax
	mov	ecx, DWORD PTR tv296[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$70144[ebp], eax
	cmp	DWORD PTR ___result__$70144[ebp], 0
	je	SHORT $LN5@Encode
	mov	ecx, DWORD PTR ___result__$70144[ebp]
	mov	DWORD PTR $T72798[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _inStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _coder$[ebp]
	call	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cp$[ebp]
	call	??1?$CMyComPtr@UICryptoProperties@@@@QAE@XZ ; CMyComPtr<ICryptoProperties>::~CMyComPtr<ICryptoProperties>
	mov	eax, DWORD PTR $T72798[ebp]
	jmp	$LN18@Encode
$LN5@Encode:
; Line 896
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+172]
	mov	ecx, DWORD PTR [eax+28]
	xor	ecx, -1
	mov	DWORD PTR _crcNew$70147[ebp], ecx
; Line 897
	mov	edx, DWORD PTR _i$70128[ebp]
	or	edx, DWORD PTR _i$70128[ebp+4]
	jne	SHORT $LN3@Encode
; Line 898
	mov	eax, DWORD PTR _crcNew$70147[ebp]
	mov	DWORD PTR _crcPrev$[ebp], eax
	jmp	SHORT $LN2@Encode
$LN3@Encode:
; Line 899
	movzx	ecx, BYTE PTR _calcCrc$70137[ebp]
	test	ecx, ecx
	je	SHORT $LN2@Encode
	mov	edx, DWORD PTR _crcPrev$[ebp]
	cmp	edx, DWORD PTR _crcNew$70147[ebp]
	je	SHORT $LN2@Encode
; Line 900
	mov	DWORD PTR $T72799[ebp], -2147467259	; 80004005H
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _inStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _coder$[ebp]
	call	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cp$[ebp]
	call	??1?$CMyComPtr@UICryptoProperties@@@@QAE@XZ ; CMyComPtr<ICryptoProperties>::~CMyComPtr<ICryptoProperties>
	mov	eax, DWORD PTR $T72799[ebp]
	jmp	$LN18@Encode
$LN2@Encode:
; Line 901
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+172]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR [edx+196], eax
; Line 902
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+204]
	xor	eax, eax
	mov	ecx, DWORD PTR _bi$[ebp]
	add	edx, DWORD PTR [ecx+32]
	adc	eax, DWORD PTR [ecx+36]
	mov	ecx, DWORD PTR _bi$[ebp]
	mov	DWORD PTR [ecx+32], edx
	mov	DWORD PTR [ecx+36], eax
; Line 903
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+196]
	xor	ecx, ecx
	mov	edx, DWORD PTR _bi$[ebp]
	add	eax, DWORD PTR [edx+40]
	adc	ecx, DWORD PTR [edx+44]
	mov	edx, DWORD PTR _bi$[ebp]
	mov	DWORD PTR [edx+40], eax
	mov	DWORD PTR [edx+44], ecx
; Line 904
	jmp	$LN11@Encode
$LN10@Encode:
; Line 905
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Release@?$CMyComPtr@UICompressCoder@@@@QAEXXZ ; CMyComPtr<ICompressCoder>::Release
; Line 906
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?Release@?$CMyComPtr@UICompressFilter@@@@QAEXXZ ; CMyComPtr<ICompressFilter>::Release
; Line 907
	mov	DWORD PTR $T72800[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _inStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _coder$[ebp]
	call	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cp$[ebp]
	call	??1?$CMyComPtr@UICryptoProperties@@@@QAE@XZ ; CMyComPtr<ICryptoProperties>::~CMyComPtr<ICryptoProperties>
	mov	eax, DWORD PTR $T72800[ebp]
$LN18@Encode:
; Line 908
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN39@Encode
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN39@Encode:
	DD	3
	DD	$LN38@Encode
$LN38@Encode:
	DD	-28					; ffffffe4H
	DD	4
	DD	$LN34@Encode
	DD	-40					; ffffffd8H
	DD	4
	DD	$LN35@Encode
	DD	-56					; ffffffc8H
	DD	4
	DD	$LN36@Encode
$LN36@Encode:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN35@Encode:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN34@Encode:
	DB	99					; 00000063H
	DB	112					; 00000070H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Encode@CEncoderInfo@@QAEJXZ$0:
	lea	ecx, DWORD PTR _cp$[ebp]
	jmp	??1?$CMyComPtr@UICryptoProperties@@@@QAE@XZ ; CMyComPtr<ICryptoProperties>::~CMyComPtr<ICryptoProperties>
__unwindfunclet$?Encode@CEncoderInfo@@QAEJXZ$1:
	lea	ecx, DWORD PTR _coder$[ebp]
	jmp	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
__unwindfunclet$?Encode@CEncoderInfo@@QAEJXZ$2:
	mov	eax, DWORD PTR $T72786[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Encode@CEncoderInfo@@QAEJXZ$3:
	lea	ecx, DWORD PTR _inStream$[ebp]
	jmp	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
__ehhandler$?Encode@CEncoderInfo@@QAEJXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-208]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Encode@CEncoderInfo@@QAEJXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Encode@CEncoderInfo@@QAEJXZ ENDP			; CEncoderInfo::Encode
PUBLIC	??C?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBEPAUICompressSetDecoderProperties2@@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::operator->
PUBLIC	??B?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBEPAUICompressSetDecoderProperties2@@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::operator ICompressSetDecoderProperties2 *
PUBLIC	??1?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ	; CMyComPtr<ICompressSetCoderMt>::~CMyComPtr<ICompressSetCoderMt>
PUBLIC	??C?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ ; CMyComPtr<ICompressSetCoderMt>::operator->
PUBLIC	??B?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ ; CMyComPtr<ICompressSetCoderMt>::operator ICompressSetCoderMt *
PUBLIC	??$QueryInterface@UICompressSetCoderMt@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICompressSetCoderMt@@@Z ; CMyComPtr<IUnknown>::QueryInterface<ICompressSetCoderMt>
PUBLIC	??I?$CMyComPtr@UICompressSetCoderMt@@@@QAEPAPAUICompressSetCoderMt@@XZ ; CMyComPtr<ICompressSetCoderMt>::operator&
PUBLIC	??0?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ	; CMyComPtr<ICompressSetCoderMt>::CMyComPtr<ICompressSetCoderMt>
PUBLIC	??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::~CMyComPtr<ICompressSetDecoderProperties2>
PUBLIC	??7?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBE_NXZ ; CMyComPtr<ICompressSetDecoderProperties2>::operator!
PUBLIC	??$QueryInterface@UICompressSetDecoderProperties2@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICompressSetDecoderProperties2@@@Z ; CMyComPtr<IUnknown>::QueryInterface<ICompressSetDecoderProperties2>
PUBLIC	??I?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAEPAPAUICompressSetDecoderProperties2@@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::operator&
PUBLIC	??0?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::CMyComPtr<ICompressSetDecoderProperties2>
PUBLIC	?Decode@CEncoderInfo@@QAEJI@Z			; CEncoderInfo::Decode
EXTRN	_IID_ICompressSetCoderMt:BYTE
EXTRN	_IID_ICompressSetDecoderProperties2:BYTE
xdata$x	SEGMENT
__ehfuncinfo$?Decode@CEncoderInfo@@QAEJI@Z DD 019930522H
	DD	0aH
	DD	FLAT:__unwindtable$?Decode@CEncoderInfo@@QAEJI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Decode@CEncoderInfo@@QAEJI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Decode@CEncoderInfo@@QAEJI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Decode@CEncoderInfo@@QAEJI@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?Decode@CEncoderInfo@@QAEJI@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?Decode@CEncoderInfo@@QAEJI@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?Decode@CEncoderInfo@@QAEJI@Z$4
	DD	03H
	DD	FLAT:__unwindfunclet$?Decode@CEncoderInfo@@QAEJI@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$?Decode@CEncoderInfo@@QAEJI@Z$6
	DD	05H
	DD	FLAT:__unwindfunclet$?Decode@CEncoderInfo@@QAEJI@Z$7
	DD	07H
	DD	FLAT:__unwindfunclet$?Decode@CEncoderInfo@@QAEJI@Z$8
	DD	08H
	DD	FLAT:__unwindfunclet$?Decode@CEncoderInfo@@QAEJI@Z$9
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv444 = -348						; size = 4
tv418 = -344						; size = 4
tv411 = -340						; size = 4
tv385 = -336						; size = 4
tv736 = -332						; size = 8
tv709 = -324						; size = 8
tv694 = -316						; size = 4
tv298 = -312						; size = 4
tv287 = -308						; size = 4
tv273 = -304						; size = 4
tv244 = -300						; size = 4
tv198 = -296						; size = 4
tv161 = -292						; size = 4
tv71 = -288						; size = 4
$T72841 = -284						; size = 4
$T72840 = -280						; size = 4
$T72839 = -276						; size = 4
$T72838 = -272						; size = 4
$T72837 = -268						; size = 4
$T72834 = -264						; size = 4
$T72833 = -260						; size = 4
$T72832 = -256						; size = 4
$T72831 = -252						; size = 4
$T72830 = -248						; size = 4
$T72829 = -244						; size = 4
$T72828 = -240						; size = 4
$T72825 = -236						; size = 4
$T72824 = -232						; size = 4
$T72823 = -228						; size = 4
$T72822 = -224						; size = 4
$T72819 = -220						; size = 4
$T72818 = -216						; size = 4
___result__$70320 = -212				; size = 4
___result__$70316 = -208				; size = 4
_outSize$70310 = -200					; size = 8
___result__$70307 = -188				; size = 4
_i$70302 = -184						; size = 8
___result__$70299 = -176				; size = 4
___result__$70296 = -172				; size = 4
_prev$ = -168						; size = 8
___result__$70291 = -160				; size = 4
_sp$70289 = -152					; size = 4
___result__$70284 = -144				; size = 4
_cp$ = -136						; size = 4
___result__$70278 = -128				; size = 4
_reduceSize$70277 = -120				; size = 8
_scp$ = -104						; size = 4
___result__$70271 = -96					; size = 4
_setCoderMt$70265 = -88					; size = 4
_pi$ = -80						; size = 4
_crcOutStream$ = -72					; size = 4
_crcOutStreamSpec$ = -64				; size = 4
_setDecProps$ = -56					; size = 4
_coder$ = -44						; size = 4
_decoder$ = -36						; size = 4
_inStream$ = -28					; size = 4
_inStreamSpec$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_decoderIndex$ = 8					; size = 4
?Decode@CEncoderInfo@@QAEJI@Z PROC			; CEncoderInfo::Decode
; _this$ = ecx
; Line 911
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Decode@CEncoderInfo@@QAEJI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 336				; 00000150H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-348]
	mov	ecx, 84					; 00000054H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 912
	push	20					; 00000014H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T72819[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T72819[ebp], 0
	je	SHORT $LN29@Decode
	mov	ecx, DWORD PTR $T72819[ebp]
	call	??0CBenchmarkInStream@@QAE@XZ
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN30@Decode
$LN29@Decode:
	mov	DWORD PTR tv71[ebp], 0
$LN30@Decode:
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR $T72818[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T72818[ebp]
	mov	DWORD PTR _inStreamSpec$[ebp], ecx
; Line 913
	mov	edx, DWORD PTR _inStreamSpec$[ebp]
	push	edx
	lea	ecx, DWORD PTR _inStream$[ebp]
	call	??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 914
	mov	eax, DWORD PTR _decoderIndex$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4+152]
	mov	DWORD PTR _decoder$[ebp], edx
; Line 915
	lea	ecx, DWORD PTR _coder$[ebp]
	call	??0?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::CMyComPtr<IUnknown>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
; Line 916
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 160				; 000000a0H
	call	??B?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ ; CMyComPtr<ICompressFilter>::operator ICompressFilter *
	test	eax, eax
	je	SHORT $LN26@Decode
; Line 918
	cmp	DWORD PTR _decoderIndex$[ebp], 0
	je	SHORT $LN25@Decode
; Line 919
	mov	DWORD PTR $T72822[ebp], -2147467259	; 80004005H
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _coder$[ebp]
	call	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T72822[ebp]
	jmp	$LN27@Decode
$LN25@Decode:
; Line 920
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 160				; 000000a0H
	call	??B?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ ; CMyComPtr<ICompressFilter>::operator ICompressFilter *
	push	eax
	lea	ecx, DWORD PTR _coder$[ebp]
	call	??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z ; CMyComPtr<IUnknown>::operator=
; Line 922
	jmp	SHORT $LN24@Decode
$LN26@Decode:
; Line 923
	mov	ecx, DWORD PTR _decoder$[ebp]
	call	??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator ICompressCoder *
	push	eax
	lea	ecx, DWORD PTR _coder$[ebp]
	call	??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z ; CMyComPtr<IUnknown>::operator=
$LN24@Decode:
; Line 925
	lea	ecx, DWORD PTR _setDecProps$[ebp]
	call	??0?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::CMyComPtr<ICompressSetDecoderProperties2>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
; Line 926
	lea	ecx, DWORD PTR _setDecProps$[ebp]
	call	??I?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAEPAPAUICompressSetDecoderProperties2@@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::operator&
	push	eax
	push	OFFSET _IID_ICompressSetDecoderProperties2
	lea	ecx, DWORD PTR _coder$[ebp]
	call	??$QueryInterface@UICompressSetDecoderProperties2@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICompressSetDecoderProperties2@@@Z ; CMyComPtr<IUnknown>::QueryInterface<ICompressSetDecoderProperties2>
; Line 927
	lea	ecx, DWORD PTR _setDecProps$[ebp]
	call	??7?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBE_NXZ ; CMyComPtr<ICompressSetDecoderProperties2>::operator!
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN23@Decode
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+228]
	cmp	DWORD PTR [edx+20], 0
	je	SHORT $LN23@Decode
; Line 928
	mov	DWORD PTR $T72823[ebp], -2147467259	; 80004005H
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _setDecProps$[ebp]
	call	??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::~CMyComPtr<ICompressSetDecoderProperties2>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _coder$[ebp]
	call	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T72823[ebp]
	jmp	$LN27@Decode
$LN23@Decode:
; Line 930
	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T72825[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	cmp	DWORD PTR $T72825[ebp], 0
	je	SHORT $LN31@Decode
	mov	ecx, DWORD PTR $T72825[ebp]
	call	??0CCrcOutStream@@QAE@XZ		; CCrcOutStream::CCrcOutStream
	mov	DWORD PTR tv161[ebp], eax
	jmp	SHORT $LN32@Decode
$LN31@Decode:
	mov	DWORD PTR tv161[ebp], 0
$LN32@Decode:
	mov	eax, DWORD PTR tv161[ebp]
	mov	DWORD PTR $T72824[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR $T72824[ebp]
	mov	DWORD PTR _crcOutStreamSpec$[ebp], ecx
; Line 931
	mov	edx, DWORD PTR _crcOutStreamSpec$[ebp]
	push	edx
	lea	ecx, DWORD PTR _crcOutStream$[ebp]
	call	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 5
; Line 933
	mov	eax, DWORD PTR _decoderIndex$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+20]
	mov	DWORD PTR _pi$[ebp], edx
; Line 934
	mov	eax, DWORD PTR _pi$[ebp]
	mov	DWORD PTR [eax+40], 0
	mov	DWORD PTR [eax+44], 0
; Line 935
	mov	ecx, DWORD PTR _pi$[ebp]
	mov	DWORD PTR [ecx+48], 0
	mov	DWORD PTR [ecx+52], 0
; Line 939
	lea	ecx, DWORD PTR _setCoderMt$70265[ebp]
	call	??0?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderMt>::CMyComPtr<ICompressSetCoderMt>
	mov	BYTE PTR __$EHRec$[ebp+8], 6
; Line 940
	lea	ecx, DWORD PTR _setCoderMt$70265[ebp]
	call	??I?$CMyComPtr@UICompressSetCoderMt@@@@QAEPAPAUICompressSetCoderMt@@XZ ; CMyComPtr<ICompressSetCoderMt>::operator&
	push	eax
	push	OFFSET _IID_ICompressSetCoderMt
	lea	ecx, DWORD PTR _coder$[ebp]
	call	??$QueryInterface@UICompressSetCoderMt@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICompressSetCoderMt@@@Z ; CMyComPtr<IUnknown>::QueryInterface<ICompressSetCoderMt>
; Line 941
	lea	ecx, DWORD PTR _setCoderMt$70265[ebp]
	call	??B?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ ; CMyComPtr<ICompressSetCoderMt>::operator ICompressSetCoderMt *
	test	eax, eax
	je	$LN22@Decode
; Line 943
	lea	ecx, DWORD PTR _setCoderMt$70265[ebp]
	call	??C?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ ; CMyComPtr<ICompressSetCoderMt>::operator->
	mov	DWORD PTR tv198[ebp], eax
	mov	esi, esp
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR tv198[ebp]
	push	ecx
	mov	edx, DWORD PTR tv198[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$70271[ebp], eax
	cmp	DWORD PTR ___result__$70271[ebp], 0
	je	SHORT $LN22@Decode
	mov	edx, DWORD PTR ___result__$70271[ebp]
	mov	DWORD PTR $T72828[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _setCoderMt$70265[ebp]
	call	??1?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderMt>::~CMyComPtr<ICompressSetCoderMt>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _crcOutStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _setDecProps$[ebp]
	call	??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::~CMyComPtr<ICompressSetDecoderProperties2>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _coder$[ebp]
	call	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T72828[ebp]
	jmp	$LN27@Decode
$LN22@Decode:
; Line 945
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _setCoderMt$70265[ebp]
	call	??1?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderMt>::~CMyComPtr<ICompressSetCoderMt>
; Line 948
	lea	ecx, DWORD PTR _scp$[ebp]
	call	??0?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderProperties>::CMyComPtr<ICompressSetCoderProperties>
	mov	BYTE PTR __$EHRec$[ebp+8], 7
; Line 949
	lea	ecx, DWORD PTR _scp$[ebp]
	call	??I?$CMyComPtr@UICompressSetCoderProperties@@@@QAEPAPAUICompressSetCoderProperties@@XZ ; CMyComPtr<ICompressSetCoderProperties>::operator&
	push	eax
	push	OFFSET _IID_ICompressSetCoderProperties
	lea	ecx, DWORD PTR _coder$[ebp]
	call	??$QueryInterface@UICompressSetCoderProperties@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICompressSetCoderProperties@@@Z ; CMyComPtr<IUnknown>::QueryInterface<ICompressSetCoderProperties>
; Line 950
	lea	ecx, DWORD PTR _scp$[ebp]
	call	??B?$CMyComPtr@UICompressSetCoderProperties@@@@QBEPAUICompressSetCoderProperties@@XZ ; CMyComPtr<ICompressSetCoderProperties>::operator ICompressSetCoderProperties *
	test	eax, eax
	je	$LN20@Decode
; Line 952
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+272]
	xor	edx, edx
	mov	DWORD PTR _reduceSize$70277[ebp], ecx
	mov	DWORD PTR _reduceSize$70277[ebp+4], edx
; Line 953
	lea	eax, DWORD PTR _reduceSize$70277[ebp]
	push	eax
	lea	ecx, DWORD PTR _scp$[ebp]
	call	??B?$CMyComPtr@UICompressSetCoderProperties@@@@QBEPAUICompressSetCoderProperties@@XZ ; CMyComPtr<ICompressSetCoderProperties>::operator ICompressSetCoderProperties *
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 236				; 000000ecH
	call	?SetCoderProps@CProps@@QBEJPAUICompressSetCoderProperties@@PB_K@Z ; CProps::SetCoderProps
	mov	DWORD PTR ___result__$70278[ebp], eax
	cmp	DWORD PTR ___result__$70278[ebp], 0
	je	SHORT $LN20@Decode
	mov	ecx, DWORD PTR ___result__$70278[ebp]
	mov	DWORD PTR $T72829[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _scp$[ebp]
	call	??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderProperties>::~CMyComPtr<ICompressSetCoderProperties>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _crcOutStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _setDecProps$[ebp]
	call	??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::~CMyComPtr<ICompressSetDecoderProperties2>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _coder$[ebp]
	call	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T72829[ebp]
	jmp	$LN27@Decode
$LN20@Decode:
; Line 956
	lea	ecx, DWORD PTR _cp$[ebp]
	call	??0?$CMyComPtr@UICryptoProperties@@@@QAE@XZ ; CMyComPtr<ICryptoProperties>::CMyComPtr<ICryptoProperties>
	mov	BYTE PTR __$EHRec$[ebp+8], 8
; Line 957
	lea	ecx, DWORD PTR _cp$[ebp]
	call	??I?$CMyComPtr@UICryptoProperties@@@@QAEPAPAUICryptoProperties@@XZ ; CMyComPtr<ICryptoProperties>::operator&
	push	eax
	push	OFFSET _IID_ICryptoProperties
	lea	ecx, DWORD PTR _coder$[ebp]
	call	??$QueryInterface@UICryptoProperties@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICryptoProperties@@@Z ; CMyComPtr<IUnknown>::QueryInterface<ICryptoProperties>
; Line 959
	lea	ecx, DWORD PTR _setDecProps$[ebp]
	call	??B?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBEPAUICompressSetDecoderProperties2@@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::operator ICompressSetDecoderProperties2 *
	test	eax, eax
	je	$LN18@Decode
; Line 961
	lea	ecx, DWORD PTR _setDecProps$[ebp]
	call	??C?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBEPAUICompressSetDecoderProperties2@@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::operator->
	mov	DWORD PTR tv244[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+228]
	mov	esi, esp
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+228]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR tv244[ebp]
	push	edx
	mov	eax, DWORD PTR tv244[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$70284[ebp], eax
	cmp	DWORD PTR ___result__$70284[ebp], 0
	je	SHORT $LN18@Decode
	mov	eax, DWORD PTR ___result__$70284[ebp]
	mov	DWORD PTR $T72830[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _cp$[ebp]
	call	??1?$CMyComPtr@UICryptoProperties@@@@QAE@XZ ; CMyComPtr<ICryptoProperties>::~CMyComPtr<ICryptoProperties>
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _scp$[ebp]
	call	??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderProperties>::~CMyComPtr<ICompressSetCoderProperties>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _crcOutStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _setDecProps$[ebp]
	call	??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::~CMyComPtr<ICompressSetDecoderProperties2>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _coder$[ebp]
	call	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T72830[ebp]
	jmp	$LN27@Decode
$LN18@Decode:
; Line 965
	lea	ecx, DWORD PTR _sp$70289[ebp]
	call	??0?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ ; CMyComPtr<ICryptoSetPassword>::CMyComPtr<ICryptoSetPassword>
	mov	BYTE PTR __$EHRec$[ebp+8], 9
; Line 966
	lea	ecx, DWORD PTR _sp$70289[ebp]
	call	??I?$CMyComPtr@UICryptoSetPassword@@@@QAEPAPAUICryptoSetPassword@@XZ ; CMyComPtr<ICryptoSetPassword>::operator&
	push	eax
	push	OFFSET _IID_ICryptoSetPassword
	lea	ecx, DWORD PTR _coder$[ebp]
	call	??$QueryInterface@UICryptoSetPassword@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICryptoSetPassword@@@Z ; CMyComPtr<IUnknown>::QueryInterface<ICryptoSetPassword>
; Line 967
	lea	ecx, DWORD PTR _sp$70289[ebp]
	call	??B?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ ; CMyComPtr<ICryptoSetPassword>::operator ICryptoSetPassword *
	test	eax, eax
	je	$LN16@Decode
; Line 969
	lea	ecx, DWORD PTR _sp$70289[ebp]
	call	??C?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ ; CMyComPtr<ICryptoSetPassword>::operator->
	mov	DWORD PTR tv273[ebp], eax
	mov	esi, esp
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	push	ecx
	mov	edx, DWORD PTR tv273[ebp]
	push	edx
	mov	eax, DWORD PTR tv273[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$70291[ebp], eax
	cmp	DWORD PTR ___result__$70291[ebp], 0
	je	SHORT $LN16@Decode
	mov	eax, DWORD PTR ___result__$70291[ebp]
	mov	DWORD PTR $T72831[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _sp$70289[ebp]
	call	??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ ; CMyComPtr<ICryptoSetPassword>::~CMyComPtr<ICryptoSetPassword>
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _cp$[ebp]
	call	??1?$CMyComPtr@UICryptoProperties@@@@QAE@XZ ; CMyComPtr<ICryptoProperties>::~CMyComPtr<ICryptoProperties>
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _scp$[ebp]
	call	??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderProperties>::~CMyComPtr<ICompressSetCoderProperties>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _crcOutStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _setDecProps$[ebp]
	call	??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::~CMyComPtr<ICompressSetDecoderProperties2>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _coder$[ebp]
	call	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T72831[ebp]
	jmp	$LN27@Decode
$LN16@Decode:
; Line 971
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _sp$70289[ebp]
	call	??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ ; CMyComPtr<ICryptoSetPassword>::~CMyComPtr<ICryptoSetPassword>
; Line 973
	mov	DWORD PTR _prev$[ebp], 0
	mov	DWORD PTR _prev$[ebp+4], 0
; Line 975
	lea	ecx, DWORD PTR _cp$[ebp]
	call	??B?$CMyComPtr@UICryptoProperties@@@@QBEPAUICryptoProperties@@XZ ; CMyComPtr<ICryptoProperties>::operator ICryptoProperties *
	test	eax, eax
	je	$LN14@Decode
; Line 977
	lea	ecx, DWORD PTR _cp$[ebp]
	call	??C?$CMyComPtr@UICryptoProperties@@@@QBEPAUICryptoProperties@@XZ ; CMyComPtr<ICryptoProperties>::operator->
	mov	DWORD PTR tv287[ebp], eax
	mov	esi, esp
	push	32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	push	ecx
	mov	edx, DWORD PTR tv287[ebp]
	push	edx
	mov	eax, DWORD PTR tv287[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$70296[ebp], eax
	cmp	DWORD PTR ___result__$70296[ebp], 0
	je	SHORT $LN13@Decode
	mov	eax, DWORD PTR ___result__$70296[ebp]
	mov	DWORD PTR $T72832[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _cp$[ebp]
	call	??1?$CMyComPtr@UICryptoProperties@@@@QAE@XZ ; CMyComPtr<ICryptoProperties>::~CMyComPtr<ICryptoProperties>
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _scp$[ebp]
	call	??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderProperties>::~CMyComPtr<ICompressSetCoderProperties>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _crcOutStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _setDecProps$[ebp]
	call	??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::~CMyComPtr<ICompressSetDecoderProperties2>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _coder$[ebp]
	call	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T72832[ebp]
	jmp	$LN27@Decode
$LN13@Decode:
; Line 978
	lea	ecx, DWORD PTR _cp$[ebp]
	call	??C?$CMyComPtr@UICryptoProperties@@@@QBEPAUICryptoProperties@@XZ ; CMyComPtr<ICryptoProperties>::operator->
	mov	DWORD PTR tv298[ebp], eax
	mov	esi, esp
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	push	ecx
	mov	edx, DWORD PTR tv298[ebp]
	push	edx
	mov	eax, DWORD PTR tv298[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$70299[ebp], eax
	cmp	DWORD PTR ___result__$70299[ebp], 0
	je	SHORT $LN14@Decode
	mov	eax, DWORD PTR ___result__$70299[ebp]
	mov	DWORD PTR $T72833[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _cp$[ebp]
	call	??1?$CMyComPtr@UICryptoProperties@@@@QAE@XZ ; CMyComPtr<ICryptoProperties>::~CMyComPtr<ICryptoProperties>
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _scp$[ebp]
	call	??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderProperties>::~CMyComPtr<ICompressSetCoderProperties>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _crcOutStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _setDecProps$[ebp]
	call	??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::~CMyComPtr<ICompressSetDecoderProperties2>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _coder$[ebp]
	call	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T72833[ebp]
	jmp	$LN27@Decode
$LN14@Decode:
; Line 981
	mov	DWORD PTR _i$70302[ebp], 0
	mov	DWORD PTR _i$70302[ebp+4], 0
	jmp	SHORT $LN11@Decode
$LN10@Decode:
	mov	ecx, DWORD PTR _i$70302[ebp]
	add	ecx, 1
	mov	edx, DWORD PTR _i$70302[ebp+4]
	adc	edx, 0
	mov	DWORD PTR _i$70302[ebp], ecx
	mov	DWORD PTR _i$70302[ebp+4], edx
$LN11@Decode:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv694[ebp], eax
	mov	ecx, DWORD PTR tv694[ebp]
	mov	edx, DWORD PTR _i$70302[ebp+4]
	cmp	edx, DWORD PTR [ecx+44]
	ja	$LN9@Decode
	jb	SHORT $LN45@Decode
	mov	eax, DWORD PTR tv694[ebp]
	mov	ecx, DWORD PTR _i$70302[ebp]
	cmp	ecx, DWORD PTR [eax+40]
	jae	$LN9@Decode
$LN45@Decode:
; Line 983
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+184], 0
	je	$LN8@Decode
	mov	eax, DWORD PTR _pi$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	sub	ecx, DWORD PTR _prev$[ebp]
	mov	edx, DWORD PTR [eax+44]
	sbb	edx, DWORD PTR _prev$[ebp+4]
	mov	DWORD PTR tv709[ebp], ecx
	mov	DWORD PTR tv709[ebp+4], edx
	cmp	DWORD PTR tv709[ebp+4], 0
	ja	SHORT $LN46@Decode
	cmp	DWORD PTR tv709[ebp], 1048576		; 00100000H
	jbe	$LN8@Decode
$LN46@Decode:
; Line 985
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+184]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+184]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$70307[ebp], eax
	cmp	DWORD PTR ___result__$70307[ebp], 0
	je	SHORT $LN7@Decode
	mov	ecx, DWORD PTR ___result__$70307[ebp]
	mov	DWORD PTR $T72834[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _cp$[ebp]
	call	??1?$CMyComPtr@UICryptoProperties@@@@QAE@XZ ; CMyComPtr<ICryptoProperties>::~CMyComPtr<ICryptoProperties>
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _scp$[ebp]
	call	??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderProperties>::~CMyComPtr<ICompressSetCoderProperties>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _crcOutStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _setDecProps$[ebp]
	call	??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::~CMyComPtr<ICompressSetDecoderProperties2>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _coder$[ebp]
	call	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T72834[ebp]
	jmp	$LN27@Decode
$LN7@Decode:
; Line 986
	mov	edx, DWORD PTR _pi$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR _prev$[ebp], eax
	mov	ecx, DWORD PTR [edx+44]
	mov	DWORD PTR _prev$[ebp+4], ecx
$LN8@Decode:
; Line 989
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+196]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+172]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _inStreamSpec$[ebp]
	call	?Init@CBenchmarkInStream@@QAEXPBEI@Z	; CBenchmarkInStream::Init
; Line 990
	mov	ecx, DWORD PTR _crcOutStreamSpec$[ebp]
	call	?Init@CCrcOutStream@@QAEXXZ		; CCrcOutStream::Init
; Line 992
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+192]
	xor	eax, eax
	mov	DWORD PTR _outSize$70310[ebp], edx
	mov	DWORD PTR _outSize$70310[ebp+4], eax
; Line 993
	mov	ecx, DWORD PTR _i$70302[ebp]
	and	ecx, 127				; 0000007fH
	mov	edx, DWORD PTR _i$70302[ebp+4]
	and	edx, 0
	mov	DWORD PTR tv736[ebp], ecx
	mov	DWORD PTR tv736[ebp+4], edx
	mov	eax, DWORD PTR tv736[ebp]
	or	eax, DWORD PTR tv736[ebp+4]
	je	SHORT $LN33@Decode
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+117]
	test	edx, edx
	jne	SHORT $LN33@Decode
	mov	DWORD PTR tv385[ebp], 0
	jmp	SHORT $LN34@Decode
$LN33@Decode:
	mov	DWORD PTR tv385[ebp], 1
$LN34@Decode:
	mov	eax, DWORD PTR _crcOutStreamSpec$[ebp]
	mov	cl, BYTE PTR tv385[ebp]
	mov	BYTE PTR [eax+8], cl
; Line 994
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 160				; 000000a0H
	call	??B?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ ; CMyComPtr<ICompressFilter>::operator ICompressFilter *
	test	eax, eax
	je	$LN6@Decode
; Line 996
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+196]
	cmp	ecx, DWORD PTR [eax+220]
	jbe	SHORT $LN5@Decode
; Line 997
	mov	DWORD PTR $T72837[ebp], -2147467259	; 80004005H
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _cp$[ebp]
	call	??1?$CMyComPtr@UICryptoProperties@@@@QAE@XZ ; CMyComPtr<ICryptoProperties>::~CMyComPtr<ICryptoProperties>
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _scp$[ebp]
	call	??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderProperties>::~CMyComPtr<ICompressSetCoderProperties>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _crcOutStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _setDecProps$[ebp]
	call	??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::~CMyComPtr<ICompressSetDecoderProperties2>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _coder$[ebp]
	call	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T72837[ebp]
	jmp	$LN27@Decode
$LN5@Decode:
; Line 998
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+196]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+172]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+224]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 999
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 160				; 000000a0H
	call	??C?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ ; CMyComPtr<ICompressFilter>::operator->
	mov	DWORD PTR tv411[ebp], eax
	mov	eax, DWORD PTR tv411[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR tv411[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1000
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 160				; 000000a0H
	call	??C?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ ; CMyComPtr<ICompressFilter>::operator->
	mov	DWORD PTR tv418[ebp], eax
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+196]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+224]
	push	ecx
	mov	edx, DWORD PTR tv418[ebp]
	push	edx
	mov	eax, DWORD PTR tv418[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1001
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+204]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+224]
	push	eax
	lea	ecx, DWORD PTR _crcOutStream$[ebp]
	call	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
	push	eax
	call	?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z ; WriteStream
	mov	DWORD PTR ___result__$70316[ebp], eax
	cmp	DWORD PTR ___result__$70316[ebp], 0
	je	SHORT $LN4@Decode
	mov	ecx, DWORD PTR ___result__$70316[ebp]
	mov	DWORD PTR $T72838[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _cp$[ebp]
	call	??1?$CMyComPtr@UICryptoProperties@@@@QAE@XZ ; CMyComPtr<ICryptoProperties>::~CMyComPtr<ICryptoProperties>
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _scp$[ebp]
	call	??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderProperties>::~CMyComPtr<ICompressSetCoderProperties>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _crcOutStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _setDecProps$[ebp]
	call	??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::~CMyComPtr<ICompressSetDecoderProperties2>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _coder$[ebp]
	call	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T72838[ebp]
	jmp	$LN27@Decode
$LN4@Decode:
; Line 1003
	jmp	$LN3@Decode
$LN6@Decode:
; Line 1005
	mov	ecx, DWORD PTR _decoder$[ebp]
	call	??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator->
	mov	DWORD PTR tv444[ebp], eax
	mov	edx, DWORD PTR _decoderIndex$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4+28]
	call	??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *
	mov	esi, esp
	push	eax
	lea	ecx, DWORD PTR _outSize$70310[ebp]
	push	ecx
	push	0
	lea	ecx, DWORD PTR _crcOutStream$[ebp]
	call	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
	push	eax
	lea	ecx, DWORD PTR _inStream$[ebp]
	call	??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
	push	eax
	mov	edx, DWORD PTR tv444[ebp]
	push	edx
	mov	eax, DWORD PTR tv444[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$70320[ebp], eax
	cmp	DWORD PTR ___result__$70320[ebp], 0
	je	SHORT $LN3@Decode
	mov	eax, DWORD PTR ___result__$70320[ebp]
	mov	DWORD PTR $T72839[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _cp$[ebp]
	call	??1?$CMyComPtr@UICryptoProperties@@@@QAE@XZ ; CMyComPtr<ICryptoProperties>::~CMyComPtr<ICryptoProperties>
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _scp$[ebp]
	call	??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderProperties>::~CMyComPtr<ICompressSetCoderProperties>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _crcOutStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _setDecProps$[ebp]
	call	??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::~CMyComPtr<ICompressSetDecoderProperties2>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _coder$[ebp]
	call	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T72839[ebp]
	jmp	$LN27@Decode
$LN3@Decode:
; Line 1007
	mov	ecx, DWORD PTR _crcOutStreamSpec$[ebp]
	movzx	edx, BYTE PTR [ecx+8]
	test	edx, edx
	je	SHORT $LN1@Decode
	mov	eax, DWORD PTR _crcOutStreamSpec$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	xor	ecx, -1
	mov	edx, DWORD PTR _this$[ebp]
	cmp	ecx, DWORD PTR [edx+188]
	je	SHORT $LN1@Decode
; Line 1008
	mov	DWORD PTR $T72840[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _cp$[ebp]
	call	??1?$CMyComPtr@UICryptoProperties@@@@QAE@XZ ; CMyComPtr<ICryptoProperties>::~CMyComPtr<ICryptoProperties>
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _scp$[ebp]
	call	??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderProperties>::~CMyComPtr<ICompressSetCoderProperties>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _crcOutStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _setDecProps$[ebp]
	call	??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::~CMyComPtr<ICompressSetDecoderProperties2>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _coder$[ebp]
	call	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T72840[ebp]
	jmp	$LN27@Decode
$LN1@Decode:
; Line 1009
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+192]
	xor	edx, edx
	mov	eax, DWORD PTR _pi$[ebp]
	add	ecx, DWORD PTR [eax+40]
	adc	edx, DWORD PTR [eax+44]
	mov	eax, DWORD PTR _pi$[ebp]
	mov	DWORD PTR [eax+40], ecx
	mov	DWORD PTR [eax+44], edx
; Line 1010
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+196]
	xor	eax, eax
	mov	ecx, DWORD PTR _pi$[ebp]
	add	edx, DWORD PTR [ecx+48]
	adc	eax, DWORD PTR [ecx+52]
	mov	ecx, DWORD PTR _pi$[ebp]
	mov	DWORD PTR [ecx+48], edx
	mov	DWORD PTR [ecx+52], eax
; Line 1011
	jmp	$LN10@Decode
$LN9@Decode:
; Line 1012
	mov	ecx, DWORD PTR _decoder$[ebp]
	call	?Release@?$CMyComPtr@UICompressCoder@@@@QAEXXZ ; CMyComPtr<ICompressCoder>::Release
; Line 1013
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 160				; 000000a0H
	call	?Release@?$CMyComPtr@UICompressFilter@@@@QAEXXZ ; CMyComPtr<ICompressFilter>::Release
; Line 1014
	mov	DWORD PTR $T72841[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _cp$[ebp]
	call	??1?$CMyComPtr@UICryptoProperties@@@@QAE@XZ ; CMyComPtr<ICryptoProperties>::~CMyComPtr<ICryptoProperties>
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _scp$[ebp]
	call	??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderProperties>::~CMyComPtr<ICompressSetCoderProperties>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _crcOutStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _setDecProps$[ebp]
	call	??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::~CMyComPtr<ICompressSetDecoderProperties2>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _coder$[ebp]
	call	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T72841[ebp]
$LN27@Decode:
; Line 1015
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN59@Decode
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 348				; 0000015cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN59@Decode:
	DD	10					; 0000000aH
	DD	$LN58@Decode
$LN58@Decode:
	DD	-28					; ffffffe4H
	DD	4
	DD	$LN47@Decode
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN48@Decode
	DD	-56					; ffffffc8H
	DD	4
	DD	$LN49@Decode
	DD	-72					; ffffffb8H
	DD	4
	DD	$LN50@Decode
	DD	-88					; ffffffa8H
	DD	4
	DD	$LN51@Decode
	DD	-104					; ffffff98H
	DD	4
	DD	$LN52@Decode
	DD	-120					; ffffff88H
	DD	8
	DD	$LN53@Decode
	DD	-136					; ffffff78H
	DD	4
	DD	$LN54@Decode
	DD	-152					; ffffff68H
	DD	4
	DD	$LN55@Decode
	DD	-200					; ffffff38H
	DD	8
	DD	$LN56@Decode
$LN56@Decode:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN55@Decode:
	DB	115					; 00000073H
	DB	112					; 00000070H
	DB	0
$LN54@Decode:
	DB	99					; 00000063H
	DB	112					; 00000070H
	DB	0
$LN53@Decode:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	117					; 00000075H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN52@Decode:
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	112					; 00000070H
	DB	0
$LN51@Decode:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	77					; 0000004dH
	DB	116					; 00000074H
	DB	0
$LN50@Decode:
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	79					; 0000004fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN49@Decode:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	115					; 00000073H
	DB	0
$LN48@Decode:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN47@Decode:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Decode@CEncoderInfo@@QAEJI@Z$0:
	mov	eax, DWORD PTR $T72819[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Decode@CEncoderInfo@@QAEJI@Z$1:
	lea	ecx, DWORD PTR _inStream$[ebp]
	jmp	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
__unwindfunclet$?Decode@CEncoderInfo@@QAEJI@Z$2:
	lea	ecx, DWORD PTR _coder$[ebp]
	jmp	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
__unwindfunclet$?Decode@CEncoderInfo@@QAEJI@Z$3:
	lea	ecx, DWORD PTR _setDecProps$[ebp]
	jmp	??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::~CMyComPtr<ICompressSetDecoderProperties2>
__unwindfunclet$?Decode@CEncoderInfo@@QAEJI@Z$4:
	mov	eax, DWORD PTR $T72825[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Decode@CEncoderInfo@@QAEJI@Z$5:
	lea	ecx, DWORD PTR _crcOutStream$[ebp]
	jmp	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
__unwindfunclet$?Decode@CEncoderInfo@@QAEJI@Z$6:
	lea	ecx, DWORD PTR _setCoderMt$70265[ebp]
	jmp	??1?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderMt>::~CMyComPtr<ICompressSetCoderMt>
__unwindfunclet$?Decode@CEncoderInfo@@QAEJI@Z$7:
	lea	ecx, DWORD PTR _scp$[ebp]
	jmp	??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderProperties>::~CMyComPtr<ICompressSetCoderProperties>
__unwindfunclet$?Decode@CEncoderInfo@@QAEJI@Z$8:
	lea	ecx, DWORD PTR _cp$[ebp]
	jmp	??1?$CMyComPtr@UICryptoProperties@@@@QAE@XZ ; CMyComPtr<ICryptoProperties>::~CMyComPtr<ICryptoProperties>
__unwindfunclet$?Decode@CEncoderInfo@@QAEJI@Z$9:
	lea	ecx, DWORD PTR _sp$70289[ebp]
	jmp	??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ ; CMyComPtr<ICryptoSetPassword>::~CMyComPtr<ICryptoSetPassword>
__ehhandler$?Decode@CEncoderInfo@@QAEJI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-348]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Decode@CEncoderInfo@@QAEJI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Decode@CEncoderInfo@@QAEJI@Z ENDP			; CEncoderInfo::Decode
PUBLIC	??1CEncoderInfo@@QAE@XZ				; CEncoderInfo::~CEncoderInfo
PUBLIC	??_ECEncoderInfo@@QAEPAXI@Z			; CEncoderInfo::`vector deleting destructor'
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_ECEncoderInfo@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_ECEncoderInfo@@QAEPAXI@Z PROC			; CEncoderInfo::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1CEncoderInfo@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	280					; 00000118H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CEncoderInfo@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_ECEncoderInfo@@QAEPAXI@Z ENDP			; CEncoderInfo::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??1CThread@NWindows@@QAE@XZ			; NWindows::CThread::~CThread
PUBLIC	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ	; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
PUBLIC	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ	; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
PUBLIC	??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ	; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>
PUBLIC	??1CBenchRandomGenerator@@UAE@XZ		; CBenchRandomGenerator::~CBenchRandomGenerator
PUBLIC	??1COneMethodInfo@@QAE@XZ			; COneMethodInfo::~COneMethodInfo
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CEncoderInfo@@QAE@XZ DD 019930522H
	DD	0aH
	DD	FLAT:__unwindtable$??1CEncoderInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1CEncoderInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CEncoderInfo@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CEncoderInfo@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CEncoderInfo@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CEncoderInfo@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1CEncoderInfo@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??1CEncoderInfo@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??1CEncoderInfo@@QAE@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??1CEncoderInfo@@QAE@XZ$7
	DD	07H
	DD	FLAT:__unwindfunclet$??1CEncoderInfo@@QAE@XZ$8
	DD	08H
	DD	FLAT:__unwindfunclet$??1CEncoderInfo@@QAE@XZ$9
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CEncoderInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CEncoderInfo@@QAE@XZ PROC				; CEncoderInfo::~CEncoderInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CEncoderInfo@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 9
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 236				; 000000ecH
	call	??1COneMethodInfo@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 232				; 000000e8H
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 216				; 000000d8H
	call	??1CBenchBuffer@@UAE@XZ			; CBenchBuffer::~CBenchBuffer
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 200				; 000000c8H
	call	??1CBenchRandomGenerator@@UAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 176				; 000000b0H
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 160				; 000000a0H
	call	??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	push	OFFSET ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
	push	2
	push	4
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 152				; 00000098H
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	push	OFFSET ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	push	2
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	push	ecx
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	push	OFFSET ??1CThread@NWindows@@QAE@XZ	; NWindows::CThread::~CThread
	push	2
	push	4
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CEncoderInfo@@QAE@XZ$0:
	push	OFFSET ??1CThread@NWindows@@QAE@XZ	; NWindows::CThread::~CThread
	push	2
	push	4
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	ret	0
__unwindfunclet$??1CEncoderInfo@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
__unwindfunclet$??1CEncoderInfo@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	jmp	??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>
__unwindfunclet$??1CEncoderInfo@@QAE@XZ$3:
	push	OFFSET ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	push	2
	push	4
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	ret	0
__unwindfunclet$??1CEncoderInfo@@QAE@XZ$4:
	push	OFFSET ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
	push	2
	push	4
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 152				; 00000098H
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	ret	0
__unwindfunclet$??1CEncoderInfo@@QAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 160				; 000000a0H
	jmp	??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>
__unwindfunclet$??1CEncoderInfo@@QAE@XZ$6:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 176				; 000000b0H
	jmp	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
__unwindfunclet$??1CEncoderInfo@@QAE@XZ$7:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 200				; 000000c8H
	jmp	??1CBenchRandomGenerator@@UAE@XZ
__unwindfunclet$??1CEncoderInfo@@QAE@XZ$8:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 216				; 000000d8H
	jmp	??1CBenchBuffer@@UAE@XZ			; CBenchBuffer::~CBenchBuffer
__unwindfunclet$??1CEncoderInfo@@QAE@XZ$9:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 232				; 000000e8H
	jmp	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
__ehhandler$??1CEncoderInfo@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CEncoderInfo@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CEncoderInfo@@QAE@XZ ENDP				; CEncoderInfo::~CEncoderInfo
PUBLIC	?Close@CThread@NWindows@@QAEIXZ			; NWindows::CThread::Close
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CThread@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CThread@NWindows@@QAE@XZ PROC			; NWindows::CThread::~CThread, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\thread.h
; Line 17
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Close@CThread@NWindows@@QAEIXZ		; NWindows::CThread::Close
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CThread@NWindows@@QAE@XZ ENDP			; NWindows::CThread::~CThread
_TEXT	ENDS
EXTRN	_HandlePtr_Close@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Close@CThread@NWindows@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Close@CThread@NWindows@@QAEIXZ PROC			; NWindows::CThread::Close, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	_HandlePtr_Close@4
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Close@CThread@NWindows@@QAEIXZ ENDP			; NWindows::CThread::Close
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CBenchRandomGenerator@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CBenchRandomGenerator@@UAE@XZ PROC			; CBenchRandomGenerator::~CBenchRandomGenerator, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CBenchBuffer@@UAE@XZ			; CBenchBuffer::~CBenchBuffer
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CBenchRandomGenerator@@UAE@XZ ENDP			; CBenchRandomGenerator::~CBenchRandomGenerator
_TEXT	ENDS
PUBLIC	??1CMethodProps@@QAE@XZ				; CMethodProps::~CMethodProps
PUBLIC	??1AString@@QAE@XZ				; AString::~AString
PUBLIC	??1UString@@QAE@XZ				; UString::~UString
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1COneMethodInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1COneMethodInfo@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1COneMethodInfo@@QAE@XZ$1
__ehfuncinfo$??1COneMethodInfo@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1COneMethodInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1COneMethodInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1COneMethodInfo@@QAE@XZ PROC				; COneMethodInfo::~COneMethodInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1COneMethodInfo@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CMethodProps@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1COneMethodInfo@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CMethodProps@@QAE@XZ
__unwindfunclet$??1COneMethodInfo@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1AString@@QAE@XZ			; AString::~AString
__ehhandler$??1COneMethodInfo@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1COneMethodInfo@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1COneMethodInfo@@QAE@XZ ENDP				; COneMethodInfo::~COneMethodInfo
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1AString@@QAE@XZ
_TEXT	SEGMENT
$T72910 = -8						; size = 4
_this$ = -4						; size = 4
??1AString@@QAE@XZ PROC					; AString::~AString, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 232
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T72910[ebp], ecx
	mov	edx, DWORD PTR $T72910[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1AString@@QAE@XZ ENDP					; AString::~AString
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1UString@@QAE@XZ
_TEXT	SEGMENT
$T72913 = -8						; size = 4
_this$ = -4						; size = 4
??1UString@@QAE@XZ PROC					; UString::~UString, COMDAT
; _this$ = ecx
; Line 470
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T72913[ebp], ecx
	mov	edx, DWORD PTR $T72913[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1UString@@QAE@XZ ENDP					; UString::~UString
_TEXT	ENDS
PUBLIC	??1CProps@@QAE@XZ				; CProps::~CProps
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CMethodProps@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CMethodProps@@QAE@XZ PROC				; CMethodProps::~CMethodProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CProps@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CMethodProps@@QAE@XZ ENDP				; CMethodProps::~CMethodProps
_TEXT	ENDS
PUBLIC	??1?$CObjectVector@UCProp@@@@QAE@XZ		; CObjectVector<CProp>::~CObjectVector<CProp>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CProps@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CProps@@QAE@XZ PROC					; CProps::~CProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CObjectVector@UCProp@@@@QAE@XZ	; CObjectVector<CProp>::~CObjectVector<CProp>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CProps@@QAE@XZ ENDP					; CProps::~CProps
_TEXT	ENDS
PUBLIC	?GetLZMAUsage@@YG_K_NI@Z			; GetLZMAUsage
PUBLIC	?GetBenchMemoryUsage@@YG_KII@Z			; GetBenchMemoryUsage
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_numBigThreads$ = -16					; size = 4
_numSubThreads$ = -12					; size = 4
_kCompressedBufferSize$ = -8				; size = 4
_kBufferSize$ = -4					; size = 4
_numThreads$ = 8					; size = 4
_dictionary$ = 12					; size = 4
?GetBenchMemoryUsage@@YG_KII@Z PROC			; GetBenchMemoryUsage
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\bench.cpp
; Line 1299
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	push	edi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1300
	mov	eax, DWORD PTR _dictionary$[ebp]
	mov	DWORD PTR _kBufferSize$[ebp], eax
; Line 1301
	mov	ecx, DWORD PTR _kBufferSize$[ebp]
	shr	ecx, 1
	mov	DWORD PTR _kCompressedBufferSize$[ebp], ecx
; Line 1302
	mov	edx, 1
	cmp	edx, DWORD PTR _numThreads$[ebp]
	sbb	eax, eax
	neg	eax
	add	eax, 1
	mov	DWORD PTR _numSubThreads$[ebp], eax
; Line 1303
	mov	eax, DWORD PTR _numThreads$[ebp]
	xor	edx, edx
	div	DWORD PTR _numSubThreads$[ebp]
	mov	DWORD PTR _numBigThreads$[ebp], eax
; Line 1305
	mov	ecx, DWORD PTR _kBufferSize$[ebp]
	add	ecx, DWORD PTR _kCompressedBufferSize$[ebp]
	mov	esi, ecx
	xor	edi, edi
	mov	edx, DWORD PTR _dictionary$[ebp]
	push	edx
	cmp	DWORD PTR _numThreads$[ebp], 1
	seta	al
	movzx	ecx, al
	push	ecx
	call	?GetLZMAUsage@@YG_K_NI@Z		; GetLZMAUsage
	add	esi, eax
	adc	edi, edx
	add	esi, 2097152				; 00200000H
	adc	edi, 0
	mov	edx, DWORD PTR _numBigThreads$[ebp]
	xor	eax, eax
	push	eax
	push	edx
	push	edi
	push	esi
	call	__allmul
; Line 1306
	pop	edi
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?GetBenchMemoryUsage@@YG_KII@Z ENDP			; GetBenchMemoryUsage
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetLZMAUsage@@YG_K_NI@Z
_TEXT	SEGMENT
_hs$ = -4						; size = 4
_multiThread$ = 8					; size = 1
_dictionary$ = 12					; size = 4
?GetLZMAUsage@@YG_K_NI@Z PROC				; GetLZMAUsage, COMDAT
; Line 1283
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1284
	mov	eax, DWORD PTR _dictionary$[ebp]
	sub	eax, 1
	mov	DWORD PTR _hs$[ebp], eax
; Line 1285
	mov	ecx, DWORD PTR _hs$[ebp]
	shr	ecx, 1
	or	ecx, DWORD PTR _hs$[ebp]
	mov	DWORD PTR _hs$[ebp], ecx
; Line 1286
	mov	edx, DWORD PTR _hs$[ebp]
	shr	edx, 2
	or	edx, DWORD PTR _hs$[ebp]
	mov	DWORD PTR _hs$[ebp], edx
; Line 1287
	mov	eax, DWORD PTR _hs$[ebp]
	shr	eax, 4
	or	eax, DWORD PTR _hs$[ebp]
	mov	DWORD PTR _hs$[ebp], eax
; Line 1288
	mov	ecx, DWORD PTR _hs$[ebp]
	shr	ecx, 8
	or	ecx, DWORD PTR _hs$[ebp]
	mov	DWORD PTR _hs$[ebp], ecx
; Line 1289
	mov	edx, DWORD PTR _hs$[ebp]
	shr	edx, 1
	mov	DWORD PTR _hs$[ebp], edx
; Line 1290
	mov	eax, DWORD PTR _hs$[ebp]
	or	eax, 65535				; 0000ffffH
	mov	DWORD PTR _hs$[ebp], eax
; Line 1291
	cmp	DWORD PTR _hs$[ebp], 16777216		; 01000000H
	jbe	SHORT $LN1@GetLZMAUsa
; Line 1292
	mov	ecx, DWORD PTR _hs$[ebp]
	shr	ecx, 1
	mov	DWORD PTR _hs$[ebp], ecx
$LN1@GetLZMAUsa:
; Line 1293
	mov	edx, DWORD PTR _hs$[ebp]
	add	edx, 1
	mov	DWORD PTR _hs$[ebp], edx
; Line 1295
	mov	eax, DWORD PTR _hs$[ebp]
	add	eax, 65536				; 00010000H
	mov	ecx, eax
	xor	esi, esi
	mov	eax, DWORD PTR _dictionary$[ebp]
	mov	edx, 2
	mul	edx
	add	ecx, eax
	adc	esi, edx
	push	0
	push	4
	push	esi
	push	ecx
	call	__allmul
	mov	esi, eax
	mov	edi, edx
	mov	eax, DWORD PTR _dictionary$[ebp]
	mov	ecx, 3
	mul	ecx
	push	0
	push	2
	push	edx
	push	eax
	call	__aulldiv
	add	esi, eax
	adc	edi, edx
	add	esi, 1048576				; 00100000H
	adc	edi, 0
	movzx	eax, BYTE PTR _multiThread$[ebp]
	neg	eax
	sbb	eax, eax
	and	eax, 6291456				; 00600000H
	cdq
	add	esi, eax
	adc	edi, edx
	mov	eax, esi
	mov	edx, edi
; Line 1296
	pop	edi
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?GetLZMAUsage@@YG_K_NI@Z ENDP				; GetLZMAUsage
_TEXT	ENDS
PUBLIC	??1CFreqInfo@@QAE@XZ				; CFreqInfo::~CFreqInfo
PUBLIC	??_ECFreqInfo@@QAEPAXI@Z			; CFreqInfo::`vector deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_ECFreqInfo@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_ECFreqInfo@@QAEPAXI@Z PROC				; CFreqInfo::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@2
	push	OFFSET ??1CFreqInfo@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	32					; 00000020H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@2
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN2@vector@2:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@2
$LN3@vector@2:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CFreqInfo@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@2
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@2:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@2:
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_ECFreqInfo@@QAEPAXI@Z ENDP				; CFreqInfo::`vector deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CFreqInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CFreqInfo@@QAE@XZ PROC				; CFreqInfo::~CFreqInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CThread@NWindows@@QAE@XZ		; NWindows::CThread::~CThread
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CFreqInfo@@QAE@XZ ENDP				; CFreqInfo::~CFreqInfo
_TEXT	ENDS
PUBLIC	??1CCrcInfo@@QAE@XZ				; CCrcInfo::~CCrcInfo
PUBLIC	??_ECCrcInfo@@QAEPAXI@Z				; CCrcInfo::`vector deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_ECCrcInfo@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_ECCrcInfo@@QAEPAXI@Z PROC				; CCrcInfo::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@3
	push	OFFSET ??1CCrcInfo@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	56					; 00000038H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@3
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN2@vector@3:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@3
$LN3@vector@3:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CCrcInfo@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@3
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@3:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@3:
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_ECCrcInfo@@QAEPAXI@Z ENDP				; CCrcInfo::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??1?$CMyComPtr@UIHasher@@@@QAE@XZ		; CMyComPtr<IHasher>::~CMyComPtr<IHasher>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CCrcInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CCrcInfo@@QAE@XZ$0
__ehfuncinfo$??1CCrcInfo@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CCrcInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CCrcInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CCrcInfo@@QAE@XZ PROC				; CCrcInfo::~CCrcInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CCrcInfo@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??1?$CMyComPtr@UIHasher@@@@QAE@XZ	; CMyComPtr<IHasher>::~CMyComPtr<IHasher>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CThread@NWindows@@QAE@XZ		; NWindows::CThread::~CThread
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CCrcInfo@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CThread@NWindows@@QAE@XZ		; NWindows::CThread::~CThread
__ehhandler$??1CCrcInfo@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CCrcInfo@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CCrcInfo@@QAE@XZ ENDP				; CCrcInfo::~CCrcInfo
PUBLIC	??0CBaseRandomGenerator@@QAE@XZ			; CBaseRandomGenerator::CBaseRandomGenerator
PUBLIC	?CrcInternalTest@@YG_NXZ			; CrcInternalTest
xdata$x	SEGMENT
__unwindtable$?CrcInternalTest@@YG_NXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CrcInternalTest@@YG_NXZ$0
__ehfuncinfo$?CrcInternalTest@@YG_NXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CrcInternalTest@@YG_NXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T72945 = -80						; size = 1
$T72944 = -79						; size = 1
$T72943 = -78						; size = 1
$T72942 = -77						; size = 1
_j$70827 = -76						; size = 4
_RG$ = -68						; size = 8
_crc1$ = -56						; size = 4
_i$ = -52						; size = 4
_buf$ = -48						; size = 4
_kCheckSize$ = -44					; size = 4
_kBufferSize1$ = -40					; size = 4
_kBufferSize0$ = -36					; size = 4
_buffer$ = -28						; size = 12
__$EHRec$ = -12						; size = 12
?CrcInternalTest@@YG_NXZ PROC				; CrcInternalTest
; Line 1495
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CrcInternalTest@@YG_NXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-80]
	mov	ecx, 17					; 00000011H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 1496
	lea	ecx, DWORD PTR _buffer$[ebp]
	call	??0CBenchBuffer@@QAE@XZ			; CBenchBuffer::CBenchBuffer
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 1497
	mov	DWORD PTR _kBufferSize0$[ebp], 256	; 00000100H
; Line 1498
	mov	DWORD PTR _kBufferSize1$[ebp], 1024	; 00000400H
; Line 1499
	mov	DWORD PTR _kCheckSize$[ebp], 32		; 00000020H
; Line 1500
	push	1280					; 00000500H
	lea	ecx, DWORD PTR _buffer$[ebp]
	call	?Alloc@CBenchBuffer@@QAE_NI@Z		; CBenchBuffer::Alloc
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN12@CrcInterna
; Line 1501
	mov	BYTE PTR $T72942[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _buffer$[ebp]
	call	??1CBenchBuffer@@UAE@XZ			; CBenchBuffer::~CBenchBuffer
	mov	al, BYTE PTR $T72942[ebp]
	jmp	$LN13@CrcInterna
$LN12@CrcInterna:
; Line 1502
	mov	ecx, DWORD PTR _buffer$[ebp+8]
	mov	DWORD PTR _buf$[ebp], ecx
; Line 1504
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN11@CrcInterna
$LN10@CrcInterna:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN11@CrcInterna:
	cmp	DWORD PTR _i$[ebp], 256			; 00000100H
	jae	SHORT $LN9@CrcInterna
; Line 1505
	mov	eax, DWORD PTR _buf$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR _i$[ebp]
	mov	BYTE PTR [eax], cl
	jmp	SHORT $LN10@CrcInterna
$LN9@CrcInterna:
; Line 1506
	push	256					; 00000100H
	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	?CrcCalc1@@YGIPBEI@Z			; CrcCalc1
	mov	DWORD PTR _crc1$[ebp], eax
; Line 1507
	cmp	DWORD PTR _crc1$[ebp], 688229491	; 29058c73H
	je	SHORT $LN8@CrcInterna
; Line 1508
	mov	BYTE PTR $T72943[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _buffer$[ebp]
	call	??1CBenchBuffer@@UAE@XZ			; CBenchBuffer::~CBenchBuffer
	mov	al, BYTE PTR $T72943[ebp]
	jmp	$LN13@CrcInterna
$LN8@CrcInterna:
; Line 1509
	lea	ecx, DWORD PTR _RG$[ebp]
	call	??0CBaseRandomGenerator@@QAE@XZ		; CBaseRandomGenerator::CBaseRandomGenerator
; Line 1510
	lea	eax, DWORD PTR _RG$[ebp]
	push	eax
	push	1024					; 00000400H
	mov	ecx, DWORD PTR _buf$[ebp]
	add	ecx, 256				; 00000100H
	push	ecx
	call	?RandGen@@YGXPAEIAAVCBaseRandomGenerator@@@Z ; RandGen
; Line 1511
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@CrcInterna
$LN6@CrcInterna:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN7@CrcInterna:
	cmp	DWORD PTR _i$[ebp], 1248		; 000004e0H
	jae	SHORT $LN5@CrcInterna
; Line 1512
	mov	DWORD PTR _j$70827[ebp], 0
	jmp	SHORT $LN4@CrcInterna
$LN3@CrcInterna:
	mov	eax, DWORD PTR _j$70827[ebp]
	add	eax, 1
	mov	DWORD PTR _j$70827[ebp], eax
$LN4@CrcInterna:
	cmp	DWORD PTR _j$70827[ebp], 32		; 00000020H
	jae	SHORT $LN2@CrcInterna
; Line 1513
	mov	ecx, DWORD PTR _j$70827[ebp]
	push	ecx
	mov	edx, DWORD PTR _buf$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	push	edx
	call	?CrcCalc1@@YGIPBEI@Z			; CrcCalc1
	mov	esi, eax
	mov	ecx, DWORD PTR _buf$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _j$70827[ebp]
	call	@CrcCalc@8
	cmp	esi, eax
	je	SHORT $LN1@CrcInterna
; Line 1514
	mov	BYTE PTR $T72944[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _buffer$[ebp]
	call	??1CBenchBuffer@@UAE@XZ			; CBenchBuffer::~CBenchBuffer
	mov	al, BYTE PTR $T72944[ebp]
	jmp	SHORT $LN13@CrcInterna
$LN1@CrcInterna:
; Line 1515
	jmp	SHORT $LN3@CrcInterna
$LN2@CrcInterna:
	jmp	SHORT $LN6@CrcInterna
$LN5@CrcInterna:
	mov	BYTE PTR $T72945[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _buffer$[ebp]
	call	??1CBenchBuffer@@UAE@XZ			; CBenchBuffer::~CBenchBuffer
	mov	al, BYTE PTR $T72945[ebp]
$LN13@CrcInterna:
; Line 1516
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@CrcInterna
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 80					; 00000050H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN20@CrcInterna:
	DD	2
	DD	$LN19@CrcInterna
$LN19@CrcInterna:
	DD	-28					; ffffffe4H
	DD	12					; 0000000cH
	DD	$LN16@CrcInterna
	DD	-68					; ffffffbcH
	DD	8
	DD	$LN17@CrcInterna
$LN17@CrcInterna:
	DB	82					; 00000052H
	DB	71					; 00000047H
	DB	0
$LN16@CrcInterna:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CrcInternalTest@@YG_NXZ$0:
	lea	ecx, DWORD PTR _buffer$[ebp]
	jmp	??1CBenchBuffer@@UAE@XZ			; CBenchBuffer::~CBenchBuffer
__ehhandler$?CrcInternalTest@@YG_NXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-80]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CrcInternalTest@@YG_NXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?CrcInternalTest@@YG_NXZ ENDP				; CrcInternalTest
PUBLIC	?Init@CBaseRandomGenerator@@QAEXXZ		; CBaseRandomGenerator::Init
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CBaseRandomGenerator@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CBaseRandomGenerator@@QAE@XZ PROC			; CBaseRandomGenerator::CBaseRandomGenerator, COMDAT
; _this$ = ecx
; Line 91
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Init@CBaseRandomGenerator@@QAEXXZ	; CBaseRandomGenerator::Init
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CBaseRandomGenerator@@QAE@XZ ENDP			; CBaseRandomGenerator::CBaseRandomGenerator
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Init@CBaseRandomGenerator@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Init@CBaseRandomGenerator@@QAEXXZ PROC			; CBaseRandomGenerator::Init, COMDAT
; _this$ = ecx
; Line 92
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 362436069		; 159a55e5H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 521288629		; 1f123bb5H
	mov	esp, ebp
	pop	ebp
	ret	0
?Init@CBaseRandomGenerator@@QAEXXZ ENDP			; CBaseRandomGenerator::Init
_TEXT	ENDS
EXTRN	_g_CrcTable:BYTE
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$70787 = -8						; size = 4
_crc$ = -4						; size = 4
_buf$ = 8						; size = 4
_size$ = 12						; size = 4
?CrcCalc1@@YGIPBEI@Z PROC				; CrcCalc1
; Line 1475
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1476
	mov	DWORD PTR _crc$[ebp], -1
; Line 1477
	mov	DWORD PTR _i$70787[ebp], 0
	jmp	SHORT $LN3@CrcCalc1
$LN2@CrcCalc1:
	mov	eax, DWORD PTR _i$70787[ebp]
	add	eax, 1
	mov	DWORD PTR _i$70787[ebp], eax
$LN3@CrcCalc1:
	mov	ecx, DWORD PTR _i$70787[ebp]
	cmp	ecx, DWORD PTR _size$[ebp]
	jae	SHORT $LN1@CrcCalc1
; Line 1478
	mov	edx, DWORD PTR _buf$[ebp]
	add	edx, DWORD PTR _i$70787[ebp]
	movzx	eax, BYTE PTR [edx]
	xor	eax, DWORD PTR _crc$[ebp]
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _crc$[ebp]
	shr	ecx, 8
	xor	ecx, DWORD PTR _g_CrcTable[eax*4]
	mov	DWORD PTR _crc$[ebp], ecx
	jmp	SHORT $LN2@CrcCalc1
$LN1@CrcCalc1:
; Line 1479
	mov	eax, DWORD PTR _crc$[ebp]
	xor	eax, -1
; Line 1480
	mov	esp, ebp
	pop	ebp
	ret	8
?CrcCalc1@@YGIPBEI@Z ENDP				; CrcCalc1
; Function compile flags: /Odtp /RTCsu
_i$70796 = -4						; size = 4
_buf$ = 8						; size = 4
_size$ = 12						; size = 4
_RG$ = 16						; size = 4
?RandGen@@YGXPAEIAAVCBaseRandomGenerator@@@Z PROC	; RandGen
; Line 1483
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1484
	mov	DWORD PTR _i$70796[ebp], 0
	jmp	SHORT $LN3@RandGen
$LN2@RandGen:
	mov	eax, DWORD PTR _i$70796[ebp]
	add	eax, 1
	mov	DWORD PTR _i$70796[ebp], eax
$LN3@RandGen:
	mov	ecx, DWORD PTR _i$70796[ebp]
	cmp	ecx, DWORD PTR _size$[ebp]
	jae	SHORT $LN4@RandGen
; Line 1485
	mov	ecx, DWORD PTR _RG$[ebp]
	call	?GetRnd@CBaseRandomGenerator@@QAEIXZ	; CBaseRandomGenerator::GetRnd
	mov	edx, DWORD PTR _buf$[ebp]
	add	edx, DWORD PTR _i$70796[ebp]
	mov	BYTE PTR [edx], al
	jmp	SHORT $LN2@RandGen
$LN4@RandGen:
; Line 1486
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?RandGen@@YGXPAEIAAVCBaseRandomGenerator@@@Z ENDP	; RandGen
_TEXT	ENDS
PUBLIC	?SetFreq@CBenchCallbackToPrint@@UAEJ_N_K@Z	; CBenchCallbackToPrint::SetFreq
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_showFreq$ = 8						; size = 1
_cpuFreq$ = 12						; size = 8
?SetFreq@CBenchCallbackToPrint@@UAEJ_N_K@Z PROC		; CBenchCallbackToPrint::SetFreq
; _this$ = ecx
; Line 1758
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1759
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _showFreq$[ebp]
	mov	BYTE PTR [eax+104], cl
; Line 1760
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _cpuFreq$[ebp]
	mov	DWORD PTR [edx+112], eax
	mov	ecx, DWORD PTR _cpuFreq$[ebp+4]
	mov	DWORD PTR [edx+116], ecx
; Line 1761
	xor	eax, eax
; Line 1762
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetFreq@CBenchCallbackToPrint@@UAEJ_N_K@Z ENDP		; CBenchCallbackToPrint::SetFreq
_TEXT	ENDS
PUBLIC	?SetEncodeResult@CBenchCallbackToPrint@@UAEJABUCBenchInfo@@_N@Z ; CBenchCallbackToPrint::SetEncodeResult
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_rating$71047 = -16					; size = 8
___result__$71044 = -8					; size = 4
_this$ = -4						; size = 4
_info$ = 8						; size = 4
_final$ = 12						; size = 1
?SetEncodeResult@CBenchCallbackToPrint@@UAEJABUCBenchInfo@@_N@Z PROC ; CBenchCallbackToPrint::SetEncodeResult
; _this$ = ecx
; Line 1765
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1766
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+88]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$71044[ebp], eax
	cmp	DWORD PTR ___result__$71044[ebp], 0
	je	SHORT $LN3@SetEncodeR
	mov	eax, DWORD PTR ___result__$71044[ebp]
	jmp	$LN4@SetEncodeR
$LN3@SetEncodeR:
; Line 1767
	movzx	ecx, BYTE PTR _final$[ebp]
	test	ecx, ecx
	je	$LN2@SetEncodeR
; Line 1769
	mov	edx, DWORD PTR _info$[ebp]
	mov	eax, DWORD PTR _info$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	mov	eax, DWORD PTR [eax+48]
	push	eax
	mov	ecx, DWORD PTR [edx+36]
	push	ecx
	mov	edx, DWORD PTR [edx+32]
	push	edx
	call	__allmul
	push	edx
	push	eax
	mov	eax, DWORD PTR _info$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	push	edx
	mov	eax, DWORD PTR _info$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?GetCompressRating@CBenchProps@@QAE_KI_K00@Z ; CBenchProps::GetCompressRating
	mov	DWORD PTR _rating$71047[ebp], eax
	mov	DWORD PTR _rating$71047[ebp+4], edx
; Line 1772
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 24					; 00000018H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	push	ecx
	mov	edx, DWORD PTR [eax+112]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+104]
	push	ecx
	mov	edx, DWORD PTR _rating$71047[ebp+4]
	push	edx
	mov	eax, DWORD PTR _rating$71047[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+120]
	push	edx
	mov	eax, DWORD PTR _info$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	push	edx
	call	?PrintResults@@YGXPAUIBenchPrintCallback@@ABUCBenchInfo@@I_K_N2PAUCTotalBenchRes@@@Z ; PrintResults
; Line 1773
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+96]
	test	ecx, ecx
	jne	SHORT $LN2@SetEncodeR
; Line 1774
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+88]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+88]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@SetEncodeR:
; Line 1776
	xor	eax, eax
$LN4@SetEncodeR:
; Line 1777
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?SetEncodeResult@CBenchCallbackToPrint@@UAEJABUCBenchInfo@@_N@Z ENDP ; CBenchCallbackToPrint::SetEncodeResult
; Function compile flags: /Odtp /RTCsu
_rpu$ = -24						; size = 8
_usage$ = -16						; size = 8
_speed$ = -8						; size = 8
_f$ = 8							; size = 4
_info$ = 12						; size = 4
_weight$ = 16						; size = 4
_rating$ = 20						; size = 8
_showFreq$ = 28						; size = 1
_cpuFreq$ = 32						; size = 8
_res$ = 40						; size = 4
?PrintResults@@YGXPAUIBenchPrintCallback@@ABUCBenchInfo@@I_K_N2PAUCTotalBenchRes@@@Z PROC ; PrintResults
; Line 1677
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1678
	mov	eax, DWORD PTR _info$[ebp]
	mov	ecx, DWORD PTR _info$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	push	edx
	mov	ecx, DWORD PTR [ecx+48]
	push	ecx
	mov	edx, DWORD PTR [eax+36]
	push	edx
	mov	eax, DWORD PTR [eax+32]
	push	eax
	call	__allmul
	push	edx
	push	eax
	mov	ecx, DWORD PTR _info$[ebp]
	call	?GetSpeed@CBenchInfo@@QBE_K_K@Z		; CBenchInfo::GetSpeed
	mov	DWORD PTR _speed$[ebp], eax
	mov	DWORD PTR _speed$[ebp+4], edx
; Line 1679
	cmp	DWORD PTR _f$[ebp], 0
	je	SHORT $LN5@PrintResul
; Line 1681
	mov	ecx, DWORD PTR _speed$[ebp]
	or	ecx, DWORD PTR _speed$[ebp+4]
	je	SHORT $LN4@PrintResul
; Line 1682
	push	9
	push	0
	push	1024					; 00000400H
	mov	edx, DWORD PTR _speed$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _speed$[ebp]
	push	eax
	call	__aulldiv
	push	edx
	push	eax
	mov	ecx, DWORD PTR _f$[ebp]
	push	ecx
	call	?PrintNumber@@YGXAAUIBenchPrintCallback@@_KH@Z ; PrintNumber
; Line 1683
	jmp	SHORT $LN5@PrintResul
$LN4@PrintResul:
; Line 1684
	push	10					; 0000000aH
	mov	edx, DWORD PTR _f$[ebp]
	push	edx
	call	?PrintSpaces@@YGXAAUIBenchPrintCallback@@I@Z ; PrintSpaces
$LN5@PrintResul:
; Line 1686
	mov	ecx, DWORD PTR _info$[ebp]
	call	?GetUsage@CBenchInfo@@QBE_KXZ		; CBenchInfo::GetUsage
	mov	DWORD PTR _usage$[ebp], eax
	mov	DWORD PTR _usage$[ebp+4], edx
; Line 1687
	mov	eax, DWORD PTR _rating$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _rating$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _info$[ebp]
	call	?GetRatingPerUsage@CBenchInfo@@QBE_K_K@Z ; CBenchInfo::GetRatingPerUsage
	mov	DWORD PTR _rpu$[ebp], eax
	mov	DWORD PTR _rpu$[ebp+4], edx
; Line 1688
	cmp	DWORD PTR _f$[ebp], 0
	je	SHORT $LN2@PrintResul
; Line 1690
	mov	edx, DWORD PTR _cpuFreq$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _cpuFreq$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _showFreq$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rating$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _rating$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rpu$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _rpu$[ebp]
	push	edx
	mov	eax, DWORD PTR _usage$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _usage$[ebp]
	push	ecx
	mov	edx, DWORD PTR _f$[ebp]
	push	edx
	call	?PrintResults@@YGXAAUIBenchPrintCallback@@_K11_N1@Z ; PrintResults
$LN2@PrintResul:
; Line 1693
	cmp	DWORD PTR _res$[ebp], 0
	je	$LN6@PrintResul
; Line 1696
	mov	eax, DWORD PTR _weight$[ebp]
	xor	ecx, ecx
	mov	edx, DWORD PTR _res$[ebp]
	add	eax, DWORD PTR [edx]
	adc	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _res$[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
; Line 1697
	mov	eax, DWORD PTR _weight$[ebp]
	xor	ecx, ecx
	push	ecx
	push	eax
	mov	edx, DWORD PTR _rpu$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _rpu$[ebp]
	push	eax
	call	__allmul
	mov	ecx, DWORD PTR _res$[ebp]
	add	eax, DWORD PTR [ecx+24]
	adc	edx, DWORD PTR [ecx+28]
	mov	ecx, DWORD PTR _res$[ebp]
	mov	DWORD PTR [ecx+24], eax
	mov	DWORD PTR [ecx+28], edx
; Line 1698
	mov	edx, DWORD PTR _weight$[ebp]
	xor	eax, eax
	push	eax
	push	edx
	mov	ecx, DWORD PTR _rating$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _rating$[ebp]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _res$[ebp]
	add	eax, DWORD PTR [ecx+8]
	adc	edx, DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR _res$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], edx
; Line 1699
	mov	edx, DWORD PTR _weight$[ebp]
	xor	eax, eax
	push	eax
	push	edx
	mov	ecx, DWORD PTR _usage$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _usage$[ebp]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _res$[ebp]
	add	eax, DWORD PTR [ecx+16]
	adc	edx, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR _res$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	DWORD PTR [ecx+20], edx
$LN6@PrintResul:
; Line 1701
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
?PrintResults@@YGXPAUIBenchPrintCallback@@ABUCBenchInfo@@I_K_N2PAUCTotalBenchRes@@@Z ENDP ; PrintResults
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_strlen:PROC
EXTRN	?ConvertUInt64ToString@@YGX_KPAD@Z:PROC		; ConvertUInt64ToString
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_len$ = -148						; size = 4
_startPos$ = -144					; size = 4
_s$ = -136						; size = 128
__$ArrayPad$ = -4					; size = 4
_f$ = 8							; size = 4
_value$ = 12						; size = 8
_size$ = 20						; size = 4
?PrintNumber@@YGXAAUIBenchPrintCallback@@_KH@Z PROC	; PrintNumber
; Line 1594
	push	ebp
	mov	ebp, esp
	sub	esp, 148				; 00000094H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-148]
	mov	ecx, 37					; 00000025H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1596
	mov	DWORD PTR _startPos$[ebp], 96		; 00000060H
; Line 1597
	mov	eax, DWORD PTR _startPos$[ebp]
	push	eax
	push	32					; 00000020H
	lea	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 1598
	mov	edx, DWORD PTR _startPos$[ebp]
	lea	eax, DWORD PTR _s$[ebp+edx]
	push	eax
	mov	ecx, DWORD PTR _value$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	call	?ConvertUInt64ToString@@YGX_KPAD@Z	; ConvertUInt64ToString
; Line 1601
	mov	eax, DWORD PTR _startPos$[ebp]
	sub	eax, 1
	mov	DWORD PTR _startPos$[ebp], eax
; Line 1602
	mov	ecx, DWORD PTR _size$[ebp]
	add	ecx, 1
	mov	DWORD PTR _size$[ebp], ecx
; Line 1604
	mov	edx, DWORD PTR _startPos$[ebp]
	lea	eax, DWORD PTR _s$[ebp+edx]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _len$[ebp], eax
; Line 1605
	mov	ecx, DWORD PTR _size$[ebp]
	cmp	ecx, DWORD PTR _len$[ebp]
	jle	SHORT $LN2@PrintNumbe
; Line 1607
	mov	edx, DWORD PTR _size$[ebp]
	sub	edx, DWORD PTR _len$[ebp]
	mov	eax, DWORD PTR _startPos$[ebp]
	sub	eax, edx
	mov	DWORD PTR _startPos$[ebp], eax
; Line 1608
	jns	SHORT $LN2@PrintNumbe
; Line 1609
	mov	DWORD PTR _startPos$[ebp], 0
$LN2@PrintNumbe:
; Line 1611
	mov	ecx, DWORD PTR _startPos$[ebp]
	lea	edx, DWORD PTR _s$[ebp+ecx]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _f$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _f$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1612
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@PrintNumbe
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 148				; 00000094H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	3
$LN7@PrintNumbe:
	DD	1
	DD	$LN6@PrintNumbe
$LN6@PrintNumbe:
	DD	-136					; ffffff78H
	DD	128					; 00000080H
	DD	$LN5@PrintNumbe
$LN5@PrintNumbe:
	DB	115					; 00000073H
	DB	0
?PrintNumber@@YGXAAUIBenchPrintCallback@@_KH@Z ENDP	; PrintNumber
; Function compile flags: /Odtp /RTCsu
_f$ = 8						; size = 4
_size$ = 12						; size = 4
?PrintSpaces@@YGXAAUIBenchPrintCallback@@I@Z PROC	; PrintSpaces
; Line 1647
	push	ebp
	mov	ebp, esp
; Line 1648
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	push	32					; 00000020H
	mov	ecx, DWORD PTR _f$[ebp]
	push	ecx
	call	?PrintChars@@YGXAAUIBenchPrintCallback@@DI@Z ; PrintChars
; Line 1649
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?PrintSpaces@@YGXAAUIBenchPrintCallback@@I@Z ENDP	; PrintSpaces
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_s$ = -264						; size = 256
__$ArrayPad$ = -4					; size = 4
_f$ = 8							; size = 4
_c$ = 12						; size = 1
_size$ = 16						; size = 4
?PrintChars@@YGXAAUIBenchPrintCallback@@DI@Z PROC	; PrintChars
; Line 1639
	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1641
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	lea	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 1642
	mov	eax, DWORD PTR _size$[ebp]
	mov	BYTE PTR _s$[ebp+eax], 0
; Line 1643
	mov	esi, esp
	lea	ecx, DWORD PTR _s$[ebp]
	push	ecx
	mov	edx, DWORD PTR _f$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _f$[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1644
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@PrintChars
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN5@PrintChars:
	DD	1
	DD	$LN4@PrintChars
$LN4@PrintChars:
	DD	-264					; fffffef8H
	DD	256					; 00000100H
	DD	$LN3@PrintChars
$LN3@PrintChars:
	DB	115					; 00000073H
	DB	0
?PrintChars@@YGXAAUIBenchPrintCallback@@DI@Z ENDP	; PrintChars
; Function compile flags: /Odtp /RTCsu
_ddd$70957 = -8					; size = 8
_f$ = 8							; size = 4
_usage$ = 12						; size = 8
_rpu$ = 20						; size = 8
_rating$ = 28						; size = 8
_showFreq$ = 36						; size = 1
_cpuFreq$ = 40						; size = 8
?PrintResults@@YGXAAUIBenchPrintCallback@@_K11_N1@Z PROC ; PrintResults
; Line 1652
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1653
	push	5
	mov	eax, DWORD PTR _usage$[ebp]
	add	eax, 5000				; 00001388H
	mov	ecx, DWORD PTR _usage$[ebp+4]
	adc	ecx, 0
	push	0
	push	10000					; 00002710H
	push	ecx
	push	eax
	call	__aulldiv
	push	edx
	push	eax
	mov	edx, DWORD PTR _f$[ebp]
	push	edx
	call	?PrintNumber@@YGXAAUIBenchPrintCallback@@_KH@Z ; PrintNumber
; Line 1654
	push	6
	mov	eax, DWORD PTR _rpu$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _rpu$[ebp]
	push	ecx
	mov	edx, DWORD PTR _f$[ebp]
	push	edx
	call	?PrintRating@@YGXAAUIBenchPrintCallback@@_KH@Z ; PrintRating
; Line 1655
	push	6
	mov	eax, DWORD PTR _rating$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _rating$[ebp]
	push	ecx
	mov	edx, DWORD PTR _f$[ebp]
	push	edx
	call	?PrintRating@@YGXAAUIBenchPrintCallback@@_KH@Z ; PrintRating
; Line 1656
	movzx	eax, BYTE PTR _showFreq$[ebp]
	test	eax, eax
	je	$LN5@PrintResul@2
; Line 1658
	mov	ecx, DWORD PTR _cpuFreq$[ebp]
	or	ecx, DWORD PTR _cpuFreq$[ebp+4]
	jne	SHORT $LN3@PrintResul@2
; Line 1659
	push	12					; 0000000cH
	mov	edx, DWORD PTR _f$[ebp]
	push	edx
	call	?PrintSpaces@@YGXAAUIBenchPrintCallback@@I@Z ; PrintSpaces
; Line 1660
	jmp	$LN5@PrintResul@2
$LN3@PrintResul@2:
; Line 1662
	mov	eax, DWORD PTR _usage$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _usage$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cpuFreq$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _cpuFreq$[ebp]
	push	eax
	call	__allmul
	push	0
	push	100					; 00000064H
	push	edx
	push	eax
	call	__aulldiv
	mov	DWORD PTR _ddd$70957[ebp], eax
	mov	DWORD PTR _ddd$70957[ebp+4], edx
; Line 1663
	mov	ecx, DWORD PTR _ddd$70957[ebp]
	or	ecx, DWORD PTR _ddd$70957[ebp+4]
	jne	SHORT $LN1@PrintResul@2
; Line 1664
	mov	DWORD PTR _ddd$70957[ebp], 1
	mov	DWORD PTR _ddd$70957[ebp+4], 0
$LN1@PrintResul@2:
; Line 1665
	push	5
	mov	edx, DWORD PTR _ddd$70957[ebp+4]
	push	edx
	mov	eax, DWORD PTR _ddd$70957[ebp]
	push	eax
	push	0
	push	10000					; 00002710H
	mov	ecx, DWORD PTR _rating$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _rating$[ebp]
	push	edx
	call	__allmul
	push	edx
	push	eax
	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	call	?PrintPercents@@YGXAAUIBenchPrintCallback@@_K1H@Z ; PrintPercents
; Line 1666
	push	5
	mov	ecx, DWORD PTR _cpuFreq$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _cpuFreq$[ebp]
	push	edx
	mov	eax, DWORD PTR _rating$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _rating$[ebp]
	push	ecx
	mov	edx, DWORD PTR _f$[ebp]
	push	edx
	call	?PrintPercents@@YGXAAUIBenchPrintCallback@@_K1H@Z ; PrintPercents
$LN5@PrintResul@2:
; Line 1669
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	40					; 00000028H
?PrintResults@@YGXAAUIBenchPrintCallback@@_K11_N1@Z ENDP ; PrintResults
; Function compile flags: /Odtp /RTCsu
_f$ = 8						; size = 4
_rating$ = 12						; size = 8
_size$ = 20						; size = 4
?PrintRating@@YGXAAUIBenchPrintCallback@@_KH@Z PROC	; PrintRating
; Line 1628
	push	ebp
	mov	ebp, esp
; Line 1629
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rating$[ebp]
	add	ecx, 500000				; 0007a120H
	mov	edx, DWORD PTR _rating$[ebp+4]
	adc	edx, 0
	push	0
	push	1000000					; 000f4240H
	push	edx
	push	ecx
	call	__aulldiv
	push	edx
	push	eax
	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	call	?PrintNumber@@YGXAAUIBenchPrintCallback@@_KH@Z ; PrintNumber
; Line 1630
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	16					; 00000010H
?PrintRating@@YGXAAUIBenchPrintCallback@@_KH@Z ENDP	; PrintRating
; Function compile flags: /Odtp /RTCsu
_f$ = 8						; size = 4
_val$ = 12						; size = 8
_divider$ = 20						; size = 8
_size$ = 28						; size = 4
?PrintPercents@@YGXAAUIBenchPrintCallback@@_K1H@Z PROC	; PrintPercents
; Line 1634
	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
; Line 1635
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	push	0
	push	100					; 00000064H
	mov	ecx, DWORD PTR _val$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _val$[ebp]
	push	edx
	call	__allmul
	mov	esi, eax
	mov	edi, edx
	push	0
	push	2
	mov	eax, DWORD PTR _divider$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _divider$[ebp]
	push	ecx
	call	__aulldiv
	add	esi, eax
	adc	edi, edx
	mov	edx, DWORD PTR _divider$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _divider$[ebp]
	push	eax
	push	edi
	push	esi
	call	__aulldiv
	push	edx
	push	eax
	mov	ecx, DWORD PTR _f$[ebp]
	push	ecx
	call	?PrintNumber@@YGXAAUIBenchPrintCallback@@_KH@Z ; PrintNumber
; Line 1636
	pop	edi
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	24					; 00000018H
?PrintPercents@@YGXAAUIBenchPrintCallback@@_K1H@Z ENDP	; PrintPercents
_TEXT	ENDS
PUBLIC	?SetDecodeResult@CBenchCallbackToPrint@@UAEJABUCBenchInfo@@_N@Z ; CBenchCallbackToPrint::SetDecodeResult
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_info2$71063 = -76					; size = 56
_rating$71060 = -16					; size = 8
___result__$71057 = -8					; size = 4
_this$ = -4						; size = 4
_info$ = 8						; size = 4
_final$ = 12						; size = 1
?SetDecodeResult@CBenchCallbackToPrint@@UAEJABUCBenchInfo@@_N@Z PROC ; CBenchCallbackToPrint::SetDecodeResult
; _this$ = ecx
; Line 1782
	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-80]
	mov	ecx, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1783
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+88]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$71057[ebp], eax
	cmp	DWORD PTR ___result__$71057[ebp], 0
	je	SHORT $LN4@SetDecodeR
	mov	eax, DWORD PTR ___result__$71057[ebp]
	jmp	$LN5@SetDecodeR
$LN4@SetDecodeR:
; Line 1784
	movzx	ecx, BYTE PTR _final$[ebp]
	test	ecx, ecx
	je	$LN3@SetDecodeR
; Line 1786
	mov	edx, DWORD PTR _info$[ebp]
	mov	eax, DWORD PTR [edx+52]
	push	eax
	mov	ecx, DWORD PTR [edx+48]
	push	ecx
	mov	edx, DWORD PTR _info$[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	mov	ecx, DWORD PTR [edx+40]
	push	ecx
	mov	edx, DWORD PTR _info$[ebp]
	mov	eax, DWORD PTR [edx+36]
	push	eax
	mov	ecx, DWORD PTR [edx+32]
	push	ecx
	mov	edx, DWORD PTR _info$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR [edx+8]
	push	ecx
	mov	edx, DWORD PTR _info$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR [edx]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?GetDecompressRating@CBenchProps@@QAE_K_K0000@Z ; CBenchProps::GetDecompressRating
	mov	DWORD PTR _rating$71060[ebp], eax
	mov	DWORD PTR _rating$71060[ebp+4], edx
; Line 1787
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+96]
	test	eax, eax
	je	SHORT $LN2@SetDecodeR
; Line 1788
	mov	esi, esp
	mov	ecx, DWORD PTR _kSep
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+88]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+88]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1789
	jmp	SHORT $LN1@SetDecodeR
$LN2@SetDecodeR:
; Line 1790
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	push	ecx
	call	?PrintSpaces@@YGXAAUIBenchPrintCallback@@I@Z ; PrintSpaces
$LN1@SetDecodeR:
; Line 1791
	mov	esi, DWORD PTR _info$[ebp]
	mov	ecx, 14					; 0000000eH
	lea	edi, DWORD PTR _info2$71063[ebp]
	rep movsd
; Line 1792
	mov	edx, DWORD PTR _info2$71063[ebp+52]
	push	edx
	mov	eax, DWORD PTR _info2$71063[ebp+48]
	push	eax
	mov	ecx, DWORD PTR _info2$71063[ebp+36]
	push	ecx
	mov	edx, DWORD PTR _info2$71063[ebp+32]
	push	edx
	call	__allmul
	mov	DWORD PTR _info2$71063[ebp+32], eax
	mov	DWORD PTR _info2$71063[ebp+36], edx
; Line 1793
	mov	eax, DWORD PTR _info2$71063[ebp+52]
	push	eax
	mov	ecx, DWORD PTR _info2$71063[ebp+48]
	push	ecx
	mov	edx, DWORD PTR _info2$71063[ebp+44]
	push	edx
	mov	eax, DWORD PTR _info2$71063[ebp+40]
	push	eax
	call	__allmul
	mov	DWORD PTR _info2$71063[ebp+40], eax
	mov	DWORD PTR _info2$71063[ebp+44], edx
; Line 1794
	mov	DWORD PTR _info2$71063[ebp+48], 1
	mov	DWORD PTR _info2$71063[ebp+52], 0
; Line 1797
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+116]
	push	eax
	mov	ecx, DWORD PTR [edx+112]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+104]
	push	eax
	mov	ecx, DWORD PTR _rating$71060[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _rating$71060[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	push	ecx
	lea	edx, DWORD PTR _info2$71063[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	push	ecx
	call	?PrintResults@@YGXPAUIBenchPrintCallback@@ABUCBenchInfo@@I_K_N2PAUCTotalBenchRes@@@Z ; PrintResults
$LN3@SetDecodeR:
; Line 1799
	xor	eax, eax
$LN5@SetDecodeR:
; Line 1800
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@SetDecodeR
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 80					; 00000050H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN9@SetDecodeR:
	DD	1
	DD	$LN8@SetDecodeR
$LN8@SetDecodeR:
	DD	-76					; ffffffb4H
	DD	56					; 00000038H
	DD	$LN7@SetDecodeR
$LN7@SetDecodeR:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	50					; 00000032H
	DB	0
?SetDecodeResult@CBenchCallbackToPrint@@UAEJABUCBenchInfo@@_N@Z ENDP ; CBenchCallbackToPrint::SetDecodeResult
_TEXT	ENDS
PUBLIC	?Print@CBenchCallbackToPrint@@QAEXPBD@Z		; CBenchCallbackToPrint::Print
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
?Print@CBenchCallbackToPrint@@QAEXPBD@Z PROC		; CBenchCallbackToPrint::Print
; _this$ = ecx
; Line 1803
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1804
	mov	esi, esp
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1805
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Print@CBenchCallbackToPrint@@QAEXPBD@Z ENDP		; CBenchCallbackToPrint::Print
_TEXT	ENDS
PUBLIC	?NewLine@CBenchCallbackToPrint@@QAEXXZ		; CBenchCallbackToPrint::NewLine
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?NewLine@CBenchCallbackToPrint@@QAEXXZ PROC		; CBenchCallbackToPrint::NewLine
; _this$ = ecx
; Line 1808
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1809
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+88]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1810
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?NewLine@CBenchCallbackToPrint@@QAEXXZ ENDP		; CBenchCallbackToPrint::NewLine
_TEXT	ENDS
PUBLIC	?MyStringLen@@YGIPBD@Z				; MyStringLen
PUBLIC	?PrintLeft@@YGXAAUIBenchPrintCallback@@PBDI@Z	; PrintLeft
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_numSpaces$ = -4					; size = 4
_f$ = 8							; size = 4
_s$ = 12						; size = 4
_size$ = 16						; size = 4
?PrintLeft@@YGXAAUIBenchPrintCallback@@PBDI@Z PROC	; PrintLeft
; Line 1813
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1814
	mov	esi, esp
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _f$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _f$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1815
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	?MyStringLen@@YGIPBD@Z			; MyStringLen
	mov	edx, DWORD PTR _size$[ebp]
	sub	edx, eax
	mov	DWORD PTR _numSpaces$[ebp], edx
; Line 1816
	cmp	DWORD PTR _numSpaces$[ebp], 0
	jle	SHORT $LN2@PrintLeft
; Line 1817
	mov	eax, DWORD PTR _numSpaces$[ebp]
	push	eax
	mov	ecx, DWORD PTR _f$[ebp]
	push	ecx
	call	?PrintSpaces@@YGXAAUIBenchPrintCallback@@I@Z ; PrintSpaces
$LN2@PrintLeft:
; Line 1818
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?PrintLeft@@YGXAAUIBenchPrintCallback@@PBDI@Z ENDP	; PrintLeft
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?MyStringLen@@YGIPBD@Z
_TEXT	SEGMENT
_i$ = -4						; size = 4
_s$ = 8							; size = 4
?MyStringLen@@YGIPBD@Z PROC				; MyStringLen, COMDAT
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 28
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@MyStringLe
$LN2@MyStringLe:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@MyStringLe:
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN1@MyStringLe
	jmp	SHORT $LN2@MyStringLe
$LN1@MyStringLe:
; Line 29
	mov	eax, DWORD PTR _i$[ebp]
; Line 30
	mov	esp, ebp
	pop	ebp
	ret	4
?MyStringLen@@YGIPBD@Z ENDP				; MyStringLen
_TEXT	ENDS
PUBLIC	?PrintRight@@YGXAAUIBenchPrintCallback@@PBDI@Z	; PrintRight
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_numSpaces$ = -4					; size = 4
_f$ = 8							; size = 4
_s$ = 12						; size = 4
_size$ = 16						; size = 4
?PrintRight@@YGXAAUIBenchPrintCallback@@PBDI@Z PROC	; PrintRight
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\bench.cpp
; Line 1821
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1822
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	?MyStringLen@@YGIPBD@Z			; MyStringLen
	mov	ecx, DWORD PTR _size$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _numSpaces$[ebp], ecx
; Line 1823
	cmp	DWORD PTR _numSpaces$[ebp], 0
	jle	SHORT $LN1@PrintRight
; Line 1824
	mov	edx, DWORD PTR _numSpaces$[ebp]
	push	edx
	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	call	?PrintSpaces@@YGXAAUIBenchPrintCallback@@I@Z ; PrintSpaces
$LN1@PrintRight:
; Line 1825
	mov	esi, esp
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	mov	edx, DWORD PTR _f$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _f$[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1826
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?PrintRight@@YGXAAUIBenchPrintCallback@@PBDI@Z ENDP	; PrintRight
_TEXT	ENDS
PUBLIC	?Empty@AString@@QAEXXZ				; AString::Empty
PUBLIC	__$ArrayPad$
PUBLIC	?GetCpuName@@YGXAAVAString@@@Z			; GetCpuName
EXTRN	??4AString@@QAEAAV0@PBD@Z:PROC			; AString::operator=
EXTRN	_x86cpuid_CheckAndRead@4:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_cpuid$71415 = -40					; size = 32
__$ArrayPad$ = -4					; size = 4
_s$ = 8							; size = 4
?GetCpuName@@YGXAAVAString@@@Z PROC			; GetCpuName
; Line 2249
	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 2250
	mov	ecx, DWORD PTR _s$[ebp]
	call	?Empty@AString@@QAEXXZ			; AString::Empty
; Line 2255
	lea	eax, DWORD PTR _cpuid$71415[ebp]
	push	eax
	call	_x86cpuid_CheckAndRead@4
	test	eax, eax
	je	SHORT $LN1@GetCpuName
; Line 2257
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	lea	edx, DWORD PTR _cpuid$71415[ebp]
	push	edx
	call	?x86cpuid_to_String@@YGXABUCx86cpuid@@AAVAString@@@Z ; x86cpuid_to_String
; Line 2258
	jmp	SHORT $LN2@GetCpuName
$LN1@GetCpuName:
; Line 2263
	push	OFFSET $SG71417
	mov	ecx, DWORD PTR _s$[ebp]
	call	??4AString@@QAEAAV0@PBD@Z		; AString::operator=
$LN2@GetCpuName:
; Line 2275
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@GetCpuName
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN6@GetCpuName:
	DD	1
	DD	$LN5@GetCpuName
$LN5@GetCpuName:
	DD	-40					; ffffffd8H
	DD	32					; 00000020H
	DD	$LN4@GetCpuName
$LN4@GetCpuName:
	DB	99					; 00000063H
	DB	112					; 00000070H
	DB	117					; 00000075H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	0
?GetCpuName@@YGXAAVAString@@@Z ENDP			; GetCpuName
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Empty@AString@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Empty@AString@@QAEXXZ PROC				; AString::Empty, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 236
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	BYTE PTR [edx], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Empty@AString@@QAEXXZ ENDP				; AString::Empty
_TEXT	ENDS
PUBLIC	??YAString@@QAEAAV0@D@Z				; AString::operator+=
PUBLIC	__$ArrayPad$
EXTRN	??YAString@@QAEAAV0@PBD@Z:PROC			; AString::operator+=
EXTRN	?ConvertUInt32ToHex@@YGXIPAD@Z:PROC		; ConvertUInt32ToHex
EXTRN	?Add_Space_if_NotEmpty@AString@@QAEXXZ:PROC	; AString::Add_Space_if_NotEmpty
EXTRN	_MyCPUID@20:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_temp$71411 = -112					; size = 32
_j$71407 = -76						; size = 4
_c$71406 = -68						; size = 16
_i$71402 = -48						; size = 4
_i$71397 = -44						; size = 4
_fullNameIsAvail$ = -37					; size = 1
_t$ = -32						; size = 12
_maxFunc2$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_c$ = 8							; size = 4
_s$ = 12						; size = 4
?x86cpuid_to_String@@YGXABUCx86cpuid@@AAVAString@@@Z PROC ; x86cpuid_to_String
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\bench.cpp
; Line 2209
	push	ebp
	mov	ebp, esp
	sub	esp, 116				; 00000074H
	push	edi
	lea	edi, DWORD PTR [ebp-116]
	mov	ecx, 29					; 0000001dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 2210
	mov	ecx, DWORD PTR _s$[ebp]
	call	?Empty@AString@@QAEXXZ			; AString::Empty
; Line 2212
	mov	DWORD PTR _maxFunc2$[ebp], 0
; Line 2215
	lea	eax, DWORD PTR _t$[ebp+8]
	push	eax
	lea	ecx, DWORD PTR _t$[ebp+4]
	push	ecx
	lea	edx, DWORD PTR _t$[ebp]
	push	edx
	lea	eax, DWORD PTR _maxFunc2$[ebp]
	push	eax
	push	-2147483648				; 80000000H
	call	_MyCPUID@20
; Line 2217
	cmp	DWORD PTR _maxFunc2$[ebp], -2147483644	; 80000004H
	sbb	ecx, ecx
	add	ecx, 1
	mov	BYTE PTR _fullNameIsAvail$[ebp], cl
; Line 2219
	movzx	edx, BYTE PTR _fullNameIsAvail$[ebp]
	test	edx, edx
	jne	SHORT $LN11@x86cpuid_t
; Line 2221
	mov	DWORD PTR _i$71397[ebp], 0
	jmp	SHORT $LN10@x86cpuid_t
$LN9@x86cpuid_t:
	mov	eax, DWORD PTR _i$71397[ebp]
	add	eax, 1
	mov	DWORD PTR _i$71397[ebp], eax
$LN10@x86cpuid_t:
	cmp	DWORD PTR _i$71397[ebp], 3
	jge	SHORT $LN8@x86cpuid_t
; Line 2222
	mov	ecx, DWORD PTR _i$71397[ebp]
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+4]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	?PrintCpuChars@@YGXAAVAString@@I@Z	; PrintCpuChars
	jmp	SHORT $LN9@x86cpuid_t
$LN8@x86cpuid_t:
; Line 2224
	jmp	SHORT $LN7@x86cpuid_t
$LN11@x86cpuid_t:
; Line 2226
	mov	DWORD PTR _i$71402[ebp], 0
	jmp	SHORT $LN6@x86cpuid_t
$LN5@x86cpuid_t:
	mov	edx, DWORD PTR _i$71402[ebp]
	add	edx, 1
	mov	DWORD PTR _i$71402[ebp], edx
$LN6@x86cpuid_t:
	cmp	DWORD PTR _i$71402[ebp], 3
	jge	SHORT $LN7@x86cpuid_t
; Line 2228
	mov	DWORD PTR _c$71406[ebp], 0
	xor	eax, eax
	mov	DWORD PTR _c$71406[ebp+4], eax
	mov	DWORD PTR _c$71406[ebp+8], eax
	mov	DWORD PTR _c$71406[ebp+12], eax
; Line 2229
	lea	ecx, DWORD PTR _c$71406[ebp+12]
	push	ecx
	lea	edx, DWORD PTR _c$71406[ebp+8]
	push	edx
	lea	eax, DWORD PTR _c$71406[ebp+4]
	push	eax
	lea	ecx, DWORD PTR _c$71406[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$71402[ebp]
	sub	edx, 2147483646				; 7ffffffeH
	push	edx
	call	_MyCPUID@20
; Line 2230
	mov	DWORD PTR _j$71407[ebp], 0
	jmp	SHORT $LN3@x86cpuid_t
$LN2@x86cpuid_t:
	mov	eax, DWORD PTR _j$71407[ebp]
	add	eax, 1
	mov	DWORD PTR _j$71407[ebp], eax
$LN3@x86cpuid_t:
	cmp	DWORD PTR _j$71407[ebp], 4
	jge	SHORT $LN1@x86cpuid_t
; Line 2231
	mov	ecx, DWORD PTR _j$71407[ebp]
	mov	edx, DWORD PTR _c$71406[ebp+ecx*4]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	?PrintCpuChars@@YGXAAVAString@@I@Z	; PrintCpuChars
	jmp	SHORT $LN2@x86cpuid_t
$LN1@x86cpuid_t:
; Line 2232
	jmp	SHORT $LN5@x86cpuid_t
$LN7@x86cpuid_t:
; Line 2235
	mov	ecx, DWORD PTR _s$[ebp]
	call	?Add_Space_if_NotEmpty@AString@@QAEXXZ	; AString::Add_Space_if_NotEmpty
; Line 2238
	lea	ecx, DWORD PTR _temp$71411[ebp]
	push	ecx
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	?ConvertUInt32ToHex@@YGXIPAD@Z		; ConvertUInt32ToHex
; Line 2239
	push	40					; 00000028H
	mov	ecx, DWORD PTR _s$[ebp]
	call	??YAString@@QAEAAV0@D@Z			; AString::operator+=
; Line 2240
	lea	ecx, DWORD PTR _temp$71411[ebp]
	push	ecx
	mov	ecx, DWORD PTR _s$[ebp]
	call	??YAString@@QAEAAV0@PBD@Z		; AString::operator+=
; Line 2241
	push	41					; 00000029H
	mov	ecx, DWORD PTR _s$[ebp]
	call	??YAString@@QAEAAV0@D@Z			; AString::operator+=
; Line 2243
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@x86cpuid_t
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 116				; 00000074H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN19@x86cpuid_t:
	DD	4
	DD	$LN18@x86cpuid_t
$LN18@x86cpuid_t:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN14@x86cpuid_t
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN15@x86cpuid_t
	DD	-68					; ffffffbcH
	DD	16					; 00000010H
	DD	$LN16@x86cpuid_t
	DD	-112					; ffffff90H
	DD	32					; 00000020H
	DD	$LN17@x86cpuid_t
$LN17@x86cpuid_t:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
$LN16@x86cpuid_t:
	DB	99					; 00000063H
	DB	0
$LN15@x86cpuid_t:
	DB	116					; 00000074H
	DB	0
$LN14@x86cpuid_t:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	120					; 00000078H
	DB	70					; 00000046H
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	50					; 00000032H
	DB	0
?x86cpuid_to_String@@YGXABUCx86cpuid@@AAVAString@@@Z ENDP ; x86cpuid_to_String
_TEXT	ENDS
EXTRN	?Grow_1@AString@@AAEXXZ:PROC			; AString::Grow_1
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??YAString@@QAEAAV0@D@Z
_TEXT	SEGMENT
_chars$ = -12						; size = 4
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_c$ = 8							; size = 1
??YAString@@QAEAAV0@D@Z PROC				; AString::operator+=, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 281
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 282
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+4]
	jne	SHORT $LN1@operator
; Line 283
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Grow_1@AString@@AAEXXZ			; AString::Grow_1
$LN1@operator:
; Line 284
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _len$[ebp], ecx
; Line 285
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _chars$[ebp], eax
; Line 286
	mov	ecx, DWORD PTR _chars$[ebp]
	add	ecx, DWORD PTR _len$[ebp]
	mov	dl, BYTE PTR _c$[ebp]
	mov	BYTE PTR [ecx], dl
	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 1
	mov	DWORD PTR _len$[ebp], eax
; Line 287
	mov	ecx, DWORD PTR _chars$[ebp]
	add	ecx, DWORD PTR _len$[ebp]
	mov	BYTE PTR [ecx], 0
; Line 288
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 289
	mov	eax, DWORD PTR _this$[ebp]
; Line 290
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??YAString@@QAEAAV0@D@Z ENDP				; AString::operator+=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
_TEXT	SEGMENT
_b$71385 = -5						; size = 1
_j$71381 = -4						; size = 4
_s$ = 8							; size = 4
_v$ = 12						; size = 4
?PrintCpuChars@@YGXAAVAString@@I@Z PROC			; PrintCpuChars
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\bench.cpp
; Line 2197
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2198
	mov	DWORD PTR _j$71381[ebp], 0
	jmp	SHORT $LN4@PrintCpuCh
$LN3@PrintCpuCh:
	mov	eax, DWORD PTR _j$71381[ebp]
	add	eax, 1
	mov	DWORD PTR _j$71381[ebp], eax
$LN4@PrintCpuCh:
	cmp	DWORD PTR _j$71381[ebp], 4
	jge	SHORT $LN5@PrintCpuCh
; Line 2200
	mov	ecx, DWORD PTR _v$[ebp]
	and	ecx, 255				; 000000ffH
	mov	BYTE PTR _b$71385[ebp], cl
; Line 2201
	mov	edx, DWORD PTR _v$[ebp]
	shr	edx, 8
	mov	DWORD PTR _v$[ebp], edx
; Line 2202
	movzx	eax, BYTE PTR _b$71385[ebp]
	test	eax, eax
	jne	SHORT $LN1@PrintCpuCh
; Line 2203
	jmp	SHORT $LN5@PrintCpuCh
$LN1@PrintCpuCh:
; Line 2204
	movzx	ecx, BYTE PTR _b$71385[ebp]
	push	ecx
	mov	ecx, DWORD PTR _s$[ebp]
	call	??YAString@@QAEAAV0@D@Z			; AString::operator+=
; Line 2205
	jmp	SHORT $LN3@PrintCpuCh
$LN5@PrintCpuCh:
; Line 2206
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?PrintCpuChars@@YGXAAVAString@@I@Z ENDP			; PrintCpuChars
_TEXT	ENDS
PUBLIC	?SetSum@CTotalBenchRes@@QAEXABU1@0@Z		; CTotalBenchRes::SetSum
PUBLIC	??0CPropVariant@NCOM@NWindows@@QAE@I@Z		; NWindows::NCOM::CPropVariant::CPropVariant
PUBLIC	??0COneMethodInfo@@QAE@ABV0@@Z			; COneMethodInfo::COneMethodInfo
PUBLIC	?Init@CBenchCallbackToPrint@@QAEXXZ		; CBenchCallbackToPrint::Init
PUBLIC	??0CBenchCallbackToPrint@@QAE@XZ		; CBenchCallbackToPrint::CBenchCallbackToPrint
PUBLIC	??1CTempValues@@QAE@XZ				; CTempValues::~CTempValues
PUBLIC	??0CTempValues@@QAE@I@Z				; CTempValues::CTempValues
PUBLIC	?IsEqualTo_Ascii_NoCase@UString@@QBE_NPBD@Z	; UString::IsEqualTo_Ascii_NoCase
PUBLIC	?DeleteFrom@AString@@QAEXI@Z			; AString::DeleteFrom
PUBLIC	?Ptr@AString@@QBEPBDI@Z				; AString::Ptr
PUBLIC	?Find@AString@@QBEHD@Z				; AString::Find
PUBLIC	?IsEqualTo_Ascii_NoCase@AString@@QBE_NPBD@Z	; AString::IsEqualTo_Ascii_NoCase
PUBLIC	?Get_Lzma_DicSize@CMethodProps@@QBEIXZ		; CMethodProps::Get_Lzma_DicSize
PUBLIC	?IsEmpty@AString@@QBE_NXZ			; AString::IsEmpty
PUBLIC	?Get_DicSize@CMethodProps@@QBE_NAAI@Z		; CMethodProps::Get_DicSize
PUBLIC	??BAString@@QBEPBDXZ				; AString::operator char const *
PUBLIC	??8@YG_NABVUString@@PB_W@Z			; operator==
PUBLIC	?Ptr@UString@@QBEPB_WI@Z			; UString::Ptr
PUBLIC	??1CPropVariant@NCOM@NWindows@@QAE@XZ		; NWindows::NCOM::CPropVariant::~CPropVariant
PUBLIC	?IsEqualTo@UString@@QBE_NPBD@Z			; UString::IsEqualTo
PUBLIC	?IsEmpty@UString@@QBE_NXZ			; UString::IsEmpty
PUBLIC	?MakeLower_Ascii@UString@@QAEXXZ		; UString::MakeLower_Ascii
PUBLIC	??0CPropVariant@NCOM@NWindows@@QAE@XZ		; NWindows::NCOM::CPropVariant::CPropVariant
PUBLIC	??A?$CObjectVector@UCProperty@@@@QBEABUCProperty@@I@Z ; CObjectVector<CProperty>::operator[]
PUBLIC	?Size@?$CObjectVector@UCProperty@@@@QBEIXZ	; CObjectVector<CProperty>::Size
PUBLIC	??0COneMethodInfo@@QAE@XZ			; COneMethodInfo::COneMethodInfo
PUBLIC	__$ArrayPad$
PUBLIC	?Bench@@YGJPAUIBenchPrintCallback@@PAUIBenchCallback@@ABV?$CObjectVector@UCProperty@@@@I_N@Z ; Bench
EXTRN	?StringsAreEqualNoCase_Ascii@@YG_NPBD0@Z:PROC	; StringsAreEqualNoCase_Ascii
EXTRN	?ConvertUInt32ToString@@YGXIPAD@Z:PROC		; ConvertUInt32ToString
EXTRN	??0AString@@QAE@PBD@Z:PROC			; AString::AString
EXTRN	?FindHashMethod@@YG_NABVAString@@AA_K@Z:PROC	; FindHashMethod
EXTRN	??4AString@@QAEAAV0@ABV0@@Z:PROC		; AString::operator=
EXTRN	??0AString@@QAE@ABV0@@Z:PROC			; AString::AString
EXTRN	??0AString@@QAE@XZ:PROC				; AString::AString
EXTRN	?ParseMethodFromPROPVARIANT@COneMethodInfo@@QAEJABVUString@@ABUtagPROPVARIANT@@@Z:PROC ; COneMethodInfo::ParseMethodFromPROPVARIANT
EXTRN	?ParseMtProp@@YGJABVUString@@ABUtagPROPVARIANT@@IAAI@Z:PROC ; ParseMtProp
EXTRN	__imp__wcscmp:PROC
EXTRN	?IsPrefixedBy_Ascii_NoCase@UString@@QBE_NPBD@Z:PROC ; UString::IsPrefixedBy_Ascii_NoCase
EXTRN	?ParsePropToUInt32@@YGJABVUString@@ABUtagPROPVARIANT@@AAI@Z:PROC ; ParsePropToUInt32
EXTRN	??0UString@@QAE@PB_W@Z:PROC			; UString::UString
EXTRN	??0UString@@QAE@ABV0@@Z:PROC			; UString::UString
EXTRN	?GetRamSize@NSystem@NWindows@@YG_KXZ:PROC	; NWindows::NSystem::GetRamSize
EXTRN	?GetNumberOfProcessors@NSystem@NWindows@@YGIXZ:PROC ; NWindows::NSystem::GetNumberOfProcessors
xdata$x	SEGMENT
__ehfuncinfo$?Bench@@YGJPAUIBenchPrintCallback@@PAUIBenchCallback@@ABV?$CObjectVector@UCProperty@@@@I_N@Z DD 019930522H
	DD	0eH
	DD	FLAT:__unwindtable$?Bench@@YGJPAUIBenchPrintCallback@@PAUIBenchCallback@@ABV?$CObjectVector@UCProperty@@@@I_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Bench@@YGJPAUIBenchPrintCallback@@PAUIBenchCallback@@ABV?$CObjectVector@UCProperty@@@@I_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Bench@@YGJPAUIBenchPrintCallback@@PAUIBenchCallback@@ABV?$CObjectVector@UCProperty@@@@I_N@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Bench@@YGJPAUIBenchPrintCallback@@PAUIBenchCallback@@ABV?$CObjectVector@UCProperty@@@@I_N@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?Bench@@YGJPAUIBenchPrintCallback@@PAUIBenchCallback@@ABV?$CObjectVector@UCProperty@@@@I_N@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?Bench@@YGJPAUIBenchPrintCallback@@PAUIBenchCallback@@ABV?$CObjectVector@UCProperty@@@@I_N@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$?Bench@@YGJPAUIBenchPrintCallback@@PAUIBenchCallback@@ABV?$CObjectVector@UCProperty@@@@I_N@Z$4
	DD	00H
	DD	FLAT:__unwindfunclet$?Bench@@YGJPAUIBenchPrintCallback@@PAUIBenchCallback@@ABV?$CObjectVector@UCProperty@@@@I_N@Z$5
	DD	00H
	DD	FLAT:__unwindfunclet$?Bench@@YGJPAUIBenchPrintCallback@@PAUIBenchCallback@@ABV?$CObjectVector@UCProperty@@@@I_N@Z$6
	DD	06H
	DD	FLAT:__unwindfunclet$?Bench@@YGJPAUIBenchPrintCallback@@PAUIBenchCallback@@ABV?$CObjectVector@UCProperty@@@@I_N@Z$7
	DD	07H
	DD	FLAT:__unwindfunclet$?Bench@@YGJPAUIBenchPrintCallback@@PAUIBenchCallback@@ABV?$CObjectVector@UCProperty@@@@I_N@Z$8
	DD	06H
	DD	FLAT:__unwindfunclet$?Bench@@YGJPAUIBenchPrintCallback@@PAUIBenchCallback@@ABV?$CObjectVector@UCProperty@@@@I_N@Z$9
	DD	06H
	DD	FLAT:__unwindfunclet$?Bench@@YGJPAUIBenchPrintCallback@@PAUIBenchCallback@@ABV?$CObjectVector@UCProperty@@@@I_N@Z$10
	DD	06H
	DD	FLAT:__unwindfunclet$?Bench@@YGJPAUIBenchPrintCallback@@PAUIBenchCallback@@ABV?$CObjectVector@UCProperty@@@@I_N@Z$11
	DD	0bH
	DD	FLAT:__unwindfunclet$?Bench@@YGJPAUIBenchPrintCallback@@PAUIBenchCallback@@ABV?$CObjectVector@UCProperty@@@@I_N@Z$12
	DD	0cH
	DD	FLAT:__unwindfunclet$?Bench@@YGJPAUIBenchPrintCallback@@PAUIBenchCallback@@ABV?$CObjectVector@UCProperty@@@@I_N@Z$13
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv615 = -1080						; size = 4
tv1510 = -1076						; size = 8
tv498 = -1068						; size = 4
$T73030 = -1064						; size = 4
$T73029 = -1060						; size = 4
$T73028 = -1056						; size = 4
$T73027 = -1052						; size = 12
$T73026 = -1040						; size = 4
$T73025 = -1036						; size = 4
$T73024 = -1032						; size = 4
$T73023 = -1028						; size = 4
$T73020 = -1024						; size = 4
$T73019 = -1020						; size = 4
$T73016 = -1016						; size = 4
$T73015 = -1012						; size = 4
$T73014 = -1008						; size = 4
$T73013 = -1004						; size = 4
$T73012 = -1000						; size = 4
$T73011 = -996						; size = 4
$T73010 = -992						; size = 4
$T73009 = -988						; size = 4
$T73008 = -984						; size = 12
_midRes$71791 = -968					; size = 32
___result__$71783 = -932				; size = 4
_res$71782 = -928					; size = 4
_uncompressedDataSize$71780 = -924			; size = 4
___result__$71775 = -920				; size = 4
_propVariant$71773 = -912				; size = 16
_method2$71770 = -888					; size = 36
_pos$71768 = -848					; size = 4
_s$71767 = -840						; size = 16
_pow$71756 = -820					; size = 4
_kStartDicLog$71755 = -816				; size = 4
_s$71749 = -808						; size = 12
_h$71748 = -792						; size = 4
_i$71744 = -788						; size = 4
_needSetComplexity$71741 = -781				; size = 1
___result__$71737 = -780				; size = 4
_cpuFreqLastTemp$71736 = -772				; size = 8
_resVal$71735 = -756					; size = 4
___result__$71731 = -748				; size = 4
___result__$71728 = -744				; size = 4
___result__$71724 = -740				; size = 4
_resVal$71723 = -732					; size = 4
_kNumCpuTests$71718 = -724				; size = 4
_freqTest$71717 = -720					; size = 4
_res$71716 = -716					; size = 4
_i$71711 = -712						; size = 4
_j$71683 = -708						; size = 4
_fileldSize$71676 = -704				; size = 4
_cpuFreq$71674 = -696					; size = 8
_showFreq$71673 = -681					; size = 1
_dicSizeLog$71662 = -680				; size = 4
_f$71659 = -676						; size = 4
_callback$71658 = -668					; size = 128
_numThreads$71648 = -536				; size = 4
_threadsPassIndex$71644 = -532				; size = 4
_totalBenchMode$ = -526					; size = 1
_use2Columns$ = -525					; size = 1
_ti$71635 = -524					; size = 4
___result__$71630 = -520				; size = 4
_speed$71629 = -512					; size = 8
_t$71628 = -500						; size = 4
___result__$71625 = -496				; size = 4
_ti$71621 = -492					; size = 4
_pos$71620 = -488					; size = 4
_s$71619 = -480						; size = 16
_bufSize$71616 = -460					; size = 4
_pow$71612 = -456					; size = 4
_i$71608 = -452						; size = 4
_numSteps$71607 = -448					; size = 8
_ti$71603 = -440					; size = 4
_speedTotals$71602 = -432				; size = 4
_t$71600 = -424						; size = 4
_numThreadsTests$71596 = -420				; size = 4
_kFieldSize_CrcSpeed$71595 = -416			; size = 4
_propPos$71590 = -412					; size = 4
_hProp$71589 = -404					; size = 12
_s$71588 = -384						; size = 12
_h$71587 = -368						; size = 4
_i$71583 = -364						; size = 4
_checkSum$71582 = -360					; size = 4
_complexity$71581 = -356				; size = 4
_f$71579 = -352						; size = 4
_hashID$ = -344						; size = 8
_methodName$ = -328					; size = 12
_uncompressedDataSize$71568 = -312			; size = 4
_dictSize$71567 = -308					; size = 4
_benchProps$71566 = -300				; size = 16
_dictIsDefined$ = -277					; size = 1
_dict$ = -272						; size = 4
_mips$71549 = -264					; size = 8
_freq$71548 = -256					; size = 8
_sum$71544 = -248					; size = 4
_start$71543 = -244					; size = 8
___result__$71540 = -236				; size = 4
_jj$71535 = -232					; size = 4
_numMilCommands$71534 = -228				; size = 8
_complexInCommands$ = -216				; size = 8
_s$71529 = -200						; size = 12
___result__$71525 = -184				; size = 4
___result__$71522 = -180				; size = 4
_s$71516 = -172						; size = 12
___result__$71509 = -156				; size = 4
_name$71505 = -148					; size = 12
_propVariant$71504 = -128				; size = 16
_property$71503 = -108					; size = 4
_i$ = -104						; size = 4
_method$ = -96						; size = 36
_multiThreadTests$ = -53				; size = 1
_testTime$ = -48					; size = 4
_numThreadsSpecified$ = -36				; size = 4
_ramSize$ = -28						; size = 8
_numCPUs$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_printCallback$ = 8					; size = 4
_benchCallback$ = 12					; size = 4
_props$ = 16						; size = 4
_numIterations$ = 20					; size = 4
_multiDict$ = 24					; size = 1
?Bench@@YGJPAUIBenchPrintCallback@@PAUIBenchCallback@@ABV?$CObjectVector@UCProperty@@@@I_N@Z PROC ; Bench
; Line 2284
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Bench@@YGJPAUIBenchPrintCallback@@PAUIBenchCallback@@ABV?$CObjectVector@UCProperty@@@@I_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 1068				; 0000042cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1080]
	mov	ecx, 267				; 0000010bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 2285
	call	?CrcInternalTest@@YG_NXZ		; CrcInternalTest
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN135@Bench
; Line 2286
	mov	eax, 1
	jmp	$LN136@Bench
$LN135@Bench:
; Line 2288
	mov	DWORD PTR _numCPUs$[ebp], 1
; Line 2289
	mov	DWORD PTR _ramSize$[ebp], 536870912	; 20000000H
	mov	DWORD PTR _ramSize$[ebp+4], 0
; Line 2292
	call	?GetNumberOfProcessors@NSystem@NWindows@@YGIXZ ; NWindows::NSystem::GetNumberOfProcessors
	mov	DWORD PTR _numCPUs$[ebp], eax
; Line 2296
	call	?GetRamSize@NSystem@NWindows@@YG_KXZ	; NWindows::NSystem::GetRamSize
	mov	DWORD PTR _ramSize$[ebp], eax
	mov	DWORD PTR _ramSize$[ebp+4], edx
; Line 2299
	mov	ecx, DWORD PTR _numCPUs$[ebp]
	mov	DWORD PTR _numThreadsSpecified$[ebp], ecx
; Line 2301
	mov	DWORD PTR _testTime$[ebp], 4
; Line 2303
	mov	BYTE PTR _multiThreadTests$[ebp], 0
; Line 2305
	lea	ecx, DWORD PTR _method$[ebp]
	call	??0COneMethodInfo@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 2307
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN134@Bench
$LN133@Bench:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN134@Bench:
	mov	ecx, DWORD PTR _props$[ebp]
	call	?Size@?$CObjectVector@UCProperty@@@@QBEIXZ ; CObjectVector<CProperty>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	$LN132@Bench
; Line 2309
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _props$[ebp]
	call	??A?$CObjectVector@UCProperty@@@@QBEABUCProperty@@I@Z ; CObjectVector<CProperty>::operator[]
	mov	DWORD PTR _property$71503[ebp], eax
; Line 2310
	lea	ecx, DWORD PTR _propVariant$71504[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
	mov	BYTE PTR __$EHRec$[ebp+8], 1
; Line 2311
	mov	ecx, DWORD PTR _property$71503[ebp]
	push	ecx
	lea	ecx, DWORD PTR _name$71505[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 2
; Line 2312
	lea	ecx, DWORD PTR _name$71505[ebp]
	call	?MakeLower_Ascii@UString@@QAEXXZ	; UString::MakeLower_Ascii
; Line 2313
	mov	ecx, DWORD PTR _property$71503[ebp]
	add	ecx, 12					; 0000000cH
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN131@Bench
; Line 2314
	lea	eax, DWORD PTR _propVariant$71504[ebp]
	push	eax
	mov	ecx, DWORD PTR _property$71503[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	call	?ParseNumberString@@YGXABVUString@@AAVCPropVariant@NCOM@NWindows@@@Z ; ParseNumberString
$LN131@Bench:
; Line 2315
	push	OFFSET $SG71508
	lea	ecx, DWORD PTR _name$71505[ebp]
	call	?IsEqualTo@UString@@QBE_NPBD@Z		; UString::IsEqualTo
	movzx	edx, al
	test	edx, edx
	je	$LN130@Bench
; Line 2317
	push	OFFSET $SG71511
	lea	ecx, DWORD PTR $T73008[ebp]
	call	??0UString@@QAE@PB_W@Z			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	eax, DWORD PTR _testTime$[ebp]
	push	eax
	lea	ecx, DWORD PTR _propVariant$71504[ebp]
	push	ecx
	lea	edx, DWORD PTR $T73008[ebp]
	push	edx
	call	?ParsePropToUInt32@@YGJABVUString@@ABUtagPROPVARIANT@@AAI@Z ; ParsePropToUInt32
	mov	DWORD PTR ___result__$71509[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T73008[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	cmp	DWORD PTR ___result__$71509[ebp], 0
	je	SHORT $LN129@Bench
	mov	eax, DWORD PTR ___result__$71509[ebp]
	mov	DWORD PTR $T73009[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _name$71505[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _propVariant$71504[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _method$[ebp]
	call	??1COneMethodInfo@@QAE@XZ
	mov	eax, DWORD PTR $T73009[ebp]
	jmp	$LN136@Bench
$LN129@Bench:
; Line 2318
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _name$71505[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _propVariant$71504[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	jmp	$LN133@Bench
$LN130@Bench:
; Line 2320
	push	OFFSET $SG71515
	lea	ecx, DWORD PTR _name$71505[ebp]
	call	?IsPrefixedBy_Ascii_NoCase@UString@@QBE_NPBD@Z ; UString::IsPrefixedBy_Ascii_NoCase
	movzx	ecx, al
	test	ecx, ecx
	je	$LN128@Bench
; Line 2322
	push	2
	lea	ecx, DWORD PTR _name$71505[ebp]
	call	?Ptr@UString@@QBEPB_WI@Z		; UString::Ptr
	push	eax
	lea	ecx, DWORD PTR _s$71516[ebp]
	call	??0UString@@QAE@PB_W@Z			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 4
; Line 2323
	push	OFFSET $SG71518
	lea	edx, DWORD PTR _s$71516[ebp]
	push	edx
	call	??8@YG_NABVUString@@PB_W@Z		; operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN127@Bench
; Line 2325
	mov	BYTE PTR _multiThreadTests$[ebp], 1
; Line 2326
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _s$71516[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _name$71505[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _propVariant$71504[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	jmp	$LN133@Bench
$LN127@Bench:
; Line 2328
	lea	ecx, DWORD PTR _s$71516[ebp]
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN126@Bench
	movzx	edx, WORD PTR _propVariant$71504[ebp]
	cmp	edx, 8
	jne	SHORT $LN126@Bench
; Line 2330
	mov	esi, esp
	push	OFFSET $SG71521
	mov	eax, DWORD PTR _propVariant$71504[ebp+8]
	push	eax
	call	DWORD PTR __imp__wcscmp
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN126@Bench
; Line 2332
	mov	BYTE PTR _multiThreadTests$[ebp], 1
; Line 2333
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _s$71516[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _name$71505[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _propVariant$71504[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	jmp	$LN133@Bench
$LN126@Bench:
; Line 2337
	lea	ecx, DWORD PTR _numThreadsSpecified$[ebp]
	push	ecx
	mov	edx, DWORD PTR _numCPUs$[ebp]
	push	edx
	lea	eax, DWORD PTR _propVariant$71504[ebp]
	push	eax
	lea	ecx, DWORD PTR _s$71516[ebp]
	push	ecx
	call	?ParseMtProp@@YGJABVUString@@ABUtagPROPVARIANT@@IAAI@Z ; ParseMtProp
	mov	DWORD PTR ___result__$71522[ebp], eax
	cmp	DWORD PTR ___result__$71522[ebp], 0
	je	SHORT $LN124@Bench
	mov	edx, DWORD PTR ___result__$71522[ebp]
	mov	DWORD PTR $T73010[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _s$71516[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _name$71505[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _propVariant$71504[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _method$[ebp]
	call	??1COneMethodInfo@@QAE@XZ
	mov	eax, DWORD PTR $T73010[ebp]
	jmp	$LN136@Bench
$LN124@Bench:
; Line 2339
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _s$71516[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _name$71505[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _propVariant$71504[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	jmp	$LN133@Bench
$LN128@Bench:
; Line 2341
	lea	eax, DWORD PTR _propVariant$71504[ebp]
	push	eax
	lea	ecx, DWORD PTR _name$71505[ebp]
	push	ecx
	lea	ecx, DWORD PTR _method$[ebp]
	call	?ParseMethodFromPROPVARIANT@COneMethodInfo@@QAEJABVUString@@ABUtagPROPVARIANT@@@Z ; COneMethodInfo::ParseMethodFromPROPVARIANT
	mov	DWORD PTR ___result__$71525[ebp], eax
	cmp	DWORD PTR ___result__$71525[ebp], 0
	je	SHORT $LN123@Bench
	mov	edx, DWORD PTR ___result__$71525[ebp]
	mov	DWORD PTR $T73011[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _name$71505[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _propVariant$71504[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _method$[ebp]
	call	??1COneMethodInfo@@QAE@XZ
	mov	eax, DWORD PTR $T73011[ebp]
	jmp	$LN136@Bench
$LN123@Bench:
; Line 2342
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _name$71505[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _propVariant$71504[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	jmp	$LN133@Bench
$LN132@Bench:
; Line 2344
	cmp	DWORD PTR _printCallback$[ebp], 0
	je	SHORT $LN122@Bench
; Line 2346
	lea	ecx, DWORD PTR _s$71529[ebp]
	call	??0AString@@QAE@XZ			; AString::AString
	mov	BYTE PTR __$EHRec$[ebp+8], 5
; Line 2347
	lea	eax, DWORD PTR _s$71529[ebp]
	push	eax
	call	?GetCpuName@@YGXAAVAString@@@Z		; GetCpuName
; Line 2348
	lea	ecx, DWORD PTR _s$71529[ebp]
	call	??BAString@@QBEPBDXZ			; AString::operator char const *
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _printCallback$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _printCallback$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2349
	mov	ecx, DWORD PTR _printCallback$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR _printCallback$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2350
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _s$71529[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
$LN122@Bench:
; Line 2352
	cmp	DWORD PTR _printCallback$[ebp], 0
	je	SHORT $LN121@Bench
; Line 2354
	mov	esi, esp
	push	OFFSET $SG71531
	mov	ecx, DWORD PTR _printCallback$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _printCallback$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN121@Bench:
; Line 2357
	mov	DWORD PTR _complexInCommands$[ebp], 0
	mov	DWORD PTR _complexInCommands$[ebp+4], 4
; Line 2359
	cmp	DWORD PTR _printCallback$[ebp], 0
	je	$LN120@Bench
; Line 2361
	mov	DWORD PTR _numMilCommands$71534[ebp], 64 ; 00000040H
	mov	DWORD PTR _numMilCommands$71534[ebp+4], 0
; Line 2363
	mov	DWORD PTR _jj$71535[ebp], 0
	jmp	SHORT $LN119@Bench
$LN118@Bench:
	mov	ecx, DWORD PTR _jj$71535[ebp]
	add	ecx, 1
	mov	DWORD PTR _jj$71535[ebp], ecx
$LN119@Bench:
; Line 2365
	cmp	DWORD PTR _printCallback$[ebp], 0
	je	SHORT $LN116@Bench
; Line 2366
	mov	edx, DWORD PTR _printCallback$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _printCallback$[ebp]
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$71540[ebp], eax
	cmp	DWORD PTR ___result__$71540[ebp], 0
	je	SHORT $LN116@Bench
	mov	eax, DWORD PTR ___result__$71540[ebp]
	mov	DWORD PTR $T73012[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _method$[ebp]
	call	??1COneMethodInfo@@QAE@XZ
	mov	eax, DWORD PTR $T73012[ebp]
	jmp	$LN136@Bench
$LN116@Bench:
; Line 2368
	call	?GetTimeCount@@YG_KXZ			; GetTimeCount
	mov	DWORD PTR _start$71543[ebp], eax
	mov	DWORD PTR _start$71543[ebp+4], edx
; Line 2369
	mov	ecx, DWORD PTR _start$71543[ebp]
	mov	DWORD PTR _sum$71544[ebp], ecx
; Line 2370
	mov	edx, DWORD PTR ?g_BenchCpuFreqTemp@@3IA	; g_BenchCpuFreqTemp
	push	edx
	push	0
	push	1000000					; 000f4240H
	mov	eax, DWORD PTR _numMilCommands$71534[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _numMilCommands$71534[ebp]
	push	ecx
	call	__allmul
	push	0
	push	128					; 00000080H
	push	edx
	push	eax
	call	__aulldiv
	push	eax
	mov	edx, DWORD PTR _sum$71544[ebp]
	push	edx
	call	_CountCpuFreq@12
	mov	DWORD PTR _sum$71544[ebp], eax
; Line 2371
	call	?GetTimeCount@@YG_KXZ			; GetTimeCount
	sub	eax, DWORD PTR _start$71543[ebp]
	sbb	edx, DWORD PTR _start$71543[ebp+4]
	mov	DWORD PTR _start$71543[ebp], eax
	mov	DWORD PTR _start$71543[ebp+4], edx
; Line 2372
	mov	eax, DWORD PTR _start$71543[ebp]
	or	eax, DWORD PTR _start$71543[ebp+4]
	jne	SHORT $LN114@Bench
; Line 2373
	mov	DWORD PTR _start$71543[ebp], 1
	mov	DWORD PTR _start$71543[ebp+4], 0
$LN114@Bench:
; Line 2374
	call	?GetFreq@@YG_KXZ			; GetFreq
	mov	DWORD PTR _freq$71548[ebp], eax
	mov	DWORD PTR _freq$71548[ebp+4], edx
; Line 2375
	mov	ecx, DWORD PTR _freq$71548[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _freq$71548[ebp]
	push	edx
	mov	eax, DWORD PTR _numMilCommands$71534[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _numMilCommands$71534[ebp]
	push	ecx
	call	__allmul
	mov	ecx, DWORD PTR _start$71543[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR _start$71543[ebp]
	push	ecx
	push	edx
	push	eax
	call	__aulldiv
	mov	DWORD PTR _mips$71549[ebp], eax
	mov	DWORD PTR _mips$71549[ebp+4], edx
; Line 2376
	cmp	DWORD PTR _printCallback$[ebp], 0
	je	SHORT $LN113@Bench
; Line 2377
	xor	edx, edx
	cmp	DWORD PTR _sum$71544[ebp], -246148589	; f1541213H
	sete	dl
	add	edx, 5
	push	edx
	mov	eax, DWORD PTR _mips$71549[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _mips$71549[ebp]
	push	ecx
	mov	edx, DWORD PTR _printCallback$[ebp]
	push	edx
	call	?PrintNumber@@YGXAAUIBenchPrintCallback@@_KH@Z ; PrintNumber
$LN113@Bench:
; Line 2384
	cmp	DWORD PTR _jj$71535[ebp], 3
	jl	SHORT $LN112@Bench
; Line 2386
	lea	eax, DWORD PTR _complexInCommands$[ebp]
	push	eax
	push	0
	push	1000000					; 000f4240H
	mov	ecx, DWORD PTR _mips$71549[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _mips$71549[ebp]
	push	edx
	call	__allmul
	push	edx
	push	eax
	mov	eax, DWORD PTR _testTime$[ebp]
	push	eax
	call	?SetComplexCommands@@YGXI_KAA_K@Z	; SetComplexCommands
; Line 2387
	cmp	DWORD PTR _jj$71535[ebp], 8
	jge	SHORT $LN110@Bench
	mov	ecx, DWORD PTR _start$71543[ebp+4]
	cmp	ecx, DWORD PTR _freq$71548[ebp+4]
	jb	SHORT $LN111@Bench
	ja	SHORT $LN110@Bench
	mov	edx, DWORD PTR _start$71543[ebp]
	cmp	edx, DWORD PTR _freq$71548[ebp]
	jb	SHORT $LN111@Bench
$LN110@Bench:
; Line 2388
	jmp	SHORT $LN120@Bench
$LN111@Bench:
; Line 2390
	mov	eax, DWORD PTR _numMilCommands$71534[ebp]
	mov	edx, DWORD PTR _numMilCommands$71534[ebp+4]
	mov	cl, 1
	call	__allshl
	mov	DWORD PTR _numMilCommands$71534[ebp], eax
	mov	DWORD PTR _numMilCommands$71534[ebp+4], edx
$LN112@Bench:
; Line 2392
	jmp	$LN118@Bench
$LN120@Bench:
; Line 2395
	cmp	DWORD PTR _printCallback$[ebp], 0
	je	SHORT $LN109@Bench
; Line 2397
	mov	eax, DWORD PTR _printCallback$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _printCallback$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2398
	mov	ecx, DWORD PTR _printCallback$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR _printCallback$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2399
	mov	ecx, DWORD PTR _numCPUs$[ebp]
	push	ecx
	push	OFFSET $SG71555
	mov	edx, DWORD PTR _ramSize$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _ramSize$[ebp]
	push	eax
	push	OFFSET $SG71556
	mov	ecx, DWORD PTR _printCallback$[ebp]
	push	ecx
	call	?PrintRequirements@@YGXAAUIBenchPrintCallback@@PBD_K1I@Z ; PrintRequirements
$LN109@Bench:
; Line 2402
	cmp	DWORD PTR _numThreadsSpecified$[ebp], 1
	jb	SHORT $LN107@Bench
	cmp	DWORD PTR _numThreadsSpecified$[ebp], 4096 ; 00001000H
	jbe	SHORT $LN108@Bench
$LN107@Bench:
; Line 2403
	mov	DWORD PTR $T73013[ebp], -2147024809	; 80070057H
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _method$[ebp]
	call	??1COneMethodInfo@@QAE@XZ
	mov	eax, DWORD PTR $T73013[ebp]
	jmp	$LN136@Bench
$LN108@Bench:
; Line 2406
	lea	edx, DWORD PTR _dict$[ebp]
	push	edx
	lea	ecx, DWORD PTR _method$[ebp]
	call	?Get_DicSize@CMethodProps@@QBE_NAAI@Z	; CMethodProps::Get_DicSize
	mov	BYTE PTR _dictIsDefined$[ebp], al
; Line 2408
	lea	ecx, DWORD PTR _method$[ebp+12]
	call	?IsEmpty@AString@@QBE_NXZ		; AString::IsEmpty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN106@Bench
; Line 2409
	push	OFFSET $SG71564
	lea	ecx, DWORD PTR _method$[ebp+12]
	call	??4AString@@QAEAAV0@PBD@Z		; AString::operator=
$LN106@Bench:
; Line 2411
	cmp	DWORD PTR _benchCallback$[ebp], 0
	je	$LN105@Bench
; Line 2413
	lea	ecx, DWORD PTR _benchProps$71566[ebp]
	call	??0CBenchProps@@QAE@XZ			; CBenchProps::CBenchProps
; Line 2414
	lea	ecx, DWORD PTR _benchProps$71566[ebp]
	call	?SetLzmaCompexity@CBenchProps@@QAEXXZ	; CBenchProps::SetLzmaCompexity
; Line 2415
	lea	ecx, DWORD PTR _method$[ebp]
	call	?Get_Lzma_DicSize@CMethodProps@@QBEIXZ	; CMethodProps::Get_Lzma_DicSize
	mov	DWORD PTR _dictSize$71567[ebp], eax
; Line 2416
	mov	ecx, DWORD PTR _dictSize$71567[ebp]
	add	ecx, 65536				; 00010000H
	mov	DWORD PTR _uncompressedDataSize$71568[ebp], ecx
; Line 2422
	lea	edx, DWORD PTR _benchProps$71566[ebp]
	push	edx
	mov	eax, DWORD PTR _benchCallback$[ebp]
	push	eax
	mov	ecx, DWORD PTR _printCallback$[ebp]
	push	ecx
	push	30					; 0000001eH
	mov	edx, DWORD PTR _uncompressedDataSize$71568[ebp]
	push	edx
	lea	eax, DWORD PTR _method$[ebp]
	push	eax
	mov	ecx, DWORD PTR _numThreadsSpecified$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _complexInCommands$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _complexInCommands$[ebp]
	push	eax
	call	?MethodBench@@YGJ_K_NIABVCOneMethodInfo@@IIPAUIBenchPrintCallback@@PAUIBenchCallback@@PAUCBenchProps@@@Z ; MethodBench
	mov	DWORD PTR $T73014[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _method$[ebp]
	call	??1COneMethodInfo@@QAE@XZ
	mov	eax, DWORD PTR $T73014[ebp]
	jmp	$LN136@Bench
$LN105@Bench:
; Line 2425
	lea	ecx, DWORD PTR _method$[ebp+12]
	push	ecx
	lea	ecx, DWORD PTR _methodName$[ebp]
	call	??0AString@@QAE@ABV0@@Z			; AString::AString
	mov	BYTE PTR __$EHRec$[ebp+8], 6
; Line 2426
	push	OFFSET $SG71572
	lea	ecx, DWORD PTR _methodName$[ebp]
	call	?IsEqualTo_Ascii_NoCase@AString@@QBE_NPBD@Z ; AString::IsEqualTo_Ascii_NoCase
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN104@Bench
; Line 2427
	push	OFFSET $SG71573
	lea	ecx, DWORD PTR _methodName$[ebp]
	call	??4AString@@QAEAAV0@PBD@Z		; AString::operator=
$LN104@Bench:
; Line 2428
	lea	eax, DWORD PTR _methodName$[ebp]
	push	eax
	lea	ecx, DWORD PTR _method$[ebp+12]
	call	??4AString@@QAEAAV0@ABV0@@Z		; AString::operator=
; Line 2431
	lea	ecx, DWORD PTR _hashID$[ebp]
	push	ecx
	lea	edx, DWORD PTR _methodName$[ebp]
	push	edx
	call	?FindHashMethod@@YG_NABVAString@@AA_K@Z	; FindHashMethod
	movzx	eax, al
	test	eax, eax
	je	$LN103@Bench
; Line 2433
	cmp	DWORD PTR _printCallback$[ebp], 0
	jne	SHORT $LN102@Bench
; Line 2434
	mov	DWORD PTR $T73015[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _methodName$[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _method$[ebp]
	call	??1COneMethodInfo@@QAE@XZ
	mov	eax, DWORD PTR $T73015[ebp]
	jmp	$LN136@Bench
$LN102@Bench:
; Line 2435
	mov	ecx, DWORD PTR _printCallback$[ebp]
	mov	DWORD PTR _f$71579[ebp], ecx
; Line 2436
	movzx	edx, BYTE PTR _dictIsDefined$[ebp]
	test	edx, edx
	jne	SHORT $LN101@Bench
; Line 2437
	mov	DWORD PTR _dict$[ebp], 16777216		; 01000000H
$LN101@Bench:
; Line 2441
	mov	DWORD PTR _complexity$71581[ebp], 10000	; 00002710H
; Line 2442
	mov	DWORD PTR _checkSum$71582[ebp], 0
; Line 2444
	mov	DWORD PTR _i$71583[ebp], 0
	jmp	SHORT $LN100@Bench
$LN99@Bench:
	mov	eax, DWORD PTR _i$71583[ebp]
	add	eax, 1
	mov	DWORD PTR _i$71583[ebp], eax
$LN100@Bench:
	cmp	DWORD PTR _i$71583[ebp], 6
	jae	$LN98@Bench
; Line 2446
	mov	ecx, DWORD PTR _i$71583[ebp]
	shl	ecx, 4
	add	ecx, OFFSET _g_Hash
	mov	DWORD PTR _h$71587[ebp], ecx
; Line 2447
	mov	edx, DWORD PTR _h$71587[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	lea	ecx, DWORD PTR _s$71588[ebp]
	call	??0AString@@QAE@PBD@Z			; AString::AString
	mov	BYTE PTR __$EHRec$[ebp+8], 7
; Line 2448
	lea	ecx, DWORD PTR _hProp$71589[ebp]
	call	??0AString@@QAE@XZ			; AString::AString
	mov	BYTE PTR __$EHRec$[ebp+8], 8
; Line 2449
	push	58					; 0000003aH
	lea	ecx, DWORD PTR _s$71588[ebp]
	call	?Find@AString@@QBEHD@Z			; AString::Find
	mov	DWORD PTR _propPos$71590[ebp], eax
; Line 2450
	cmp	DWORD PTR _propPos$71590[ebp], 0
	jl	SHORT $LN97@Bench
; Line 2452
	mov	ecx, DWORD PTR _propPos$71590[ebp]
	add	ecx, 1
	push	ecx
	lea	ecx, DWORD PTR _s$71588[ebp]
	call	?Ptr@AString@@QBEPBDI@Z			; AString::Ptr
	push	eax
	lea	ecx, DWORD PTR _hProp$71589[ebp]
	call	??4AString@@QAEAAV0@PBD@Z		; AString::operator=
; Line 2453
	mov	edx, DWORD PTR _propPos$71590[ebp]
	push	edx
	lea	ecx, DWORD PTR _s$71588[ebp]
	call	?DeleteFrom@AString@@QAEXI@Z		; AString::DeleteFrom
$LN97@Bench:
; Line 2456
	lea	ecx, DWORD PTR _methodName$[ebp]
	call	??BAString@@QBEPBDXZ			; AString::operator char const *
	push	eax
	lea	ecx, DWORD PTR _s$71588[ebp]
	call	??BAString@@QBEPBDXZ			; AString::operator char const *
	push	eax
	call	?AreSameMethodNames@@YG_NPBD0@Z		; AreSameMethodNames
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN96@Bench
; Line 2458
	mov	ecx, DWORD PTR _h$71587[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _complexity$71581[ebp], edx
; Line 2459
	mov	eax, DWORD PTR _h$71587[ebp]
	add	eax, 8
	mov	DWORD PTR _checkSum$71582[ebp], eax
; Line 2460
	lea	ecx, DWORD PTR _hProp$71589[ebp]
	call	??BAString@@QBEPBDXZ			; AString::operator char const *
	push	eax
	lea	ecx, DWORD PTR _method$[ebp+24]
	call	?IsEqualTo_Ascii_NoCase@UString@@QBE_NPBD@Z ; UString::IsEqualTo_Ascii_NoCase
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN96@Bench
; Line 2461
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _hProp$71589[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _s$71588[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	jmp	SHORT $LN98@Bench
$LN96@Bench:
; Line 2463
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _hProp$71589[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _s$71588[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	jmp	$LN99@Bench
$LN98@Bench:
; Line 2466
	mov	edx, DWORD PTR _f$71579[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _f$71579[ebp]
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2467
	mov	esi, esp
	push	OFFSET $SG71594
	mov	eax, DWORD PTR _f$71579[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _f$71579[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2468
	mov	DWORD PTR _kFieldSize_CrcSpeed$71595[ebp], 6
; Line 2469
	mov	DWORD PTR _numThreadsTests$71596[ebp], 0
$LN94@Bench:
; Line 2472
	mov	ecx, DWORD PTR _numThreadsSpecified$[ebp]
	push	ecx
	mov	edx, DWORD PTR _numThreadsTests$71596[ebp]
	push	edx
	call	?GetNumThreadsNext@@YGIII@Z		; GetNumThreadsNext
	mov	DWORD PTR _t$71600[ebp], eax
; Line 2473
	push	6
	mov	eax, DWORD PTR _t$71600[ebp]
	xor	ecx, ecx
	push	ecx
	push	eax
	mov	edx, DWORD PTR _f$71579[ebp]
	push	edx
	call	?PrintNumber@@YGXAAUIBenchPrintCallback@@_KH@Z ; PrintNumber
; Line 2474
	mov	eax, DWORD PTR _numThreadsTests$71596[ebp]
	add	eax, 1
	mov	DWORD PTR _numThreadsTests$71596[ebp], eax
; Line 2475
	mov	ecx, DWORD PTR _t$71600[ebp]
	cmp	ecx, DWORD PTR _numThreadsSpecified$[ebp]
	jb	SHORT $LN92@Bench
; Line 2476
	jmp	SHORT $LN93@Bench
$LN92@Bench:
; Line 2477
	jmp	SHORT $LN94@Bench
$LN93@Bench:
; Line 2478
	mov	edx, DWORD PTR _f$71579[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _f$71579[ebp]
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2479
	mov	eax, DWORD PTR _f$71579[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _f$71579[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2480
	mov	ecx, DWORD PTR _numThreadsTests$71596[ebp]
	push	ecx
	lea	ecx, DWORD PTR _speedTotals$71602[ebp]
	call	??0CTempValues@@QAE@I@Z			; CTempValues::CTempValues
	mov	BYTE PTR __$EHRec$[ebp+8], 9
; Line 2482
	mov	DWORD PTR _ti$71603[ebp], 0
	jmp	SHORT $LN91@Bench
$LN90@Bench:
	mov	edx, DWORD PTR _ti$71603[ebp]
	add	edx, 1
	mov	DWORD PTR _ti$71603[ebp], edx
$LN91@Bench:
	mov	eax, DWORD PTR _ti$71603[ebp]
	cmp	eax, DWORD PTR _numThreadsTests$71596[ebp]
	jae	SHORT $LN89@Bench
; Line 2483
	mov	ecx, DWORD PTR _ti$71603[ebp]
	mov	edx, DWORD PTR _speedTotals$71602[ebp]
	mov	DWORD PTR [edx+ecx*8], 0
	mov	DWORD PTR [edx+ecx*8+4], 0
	jmp	SHORT $LN90@Bench
$LN89@Bench:
; Line 2486
	mov	DWORD PTR _numSteps$71607[ebp], 0
	mov	DWORD PTR _numSteps$71607[ebp+4], 0
; Line 2487
	mov	DWORD PTR _i$71608[ebp], 0
	jmp	SHORT $LN88@Bench
$LN87@Bench:
	mov	eax, DWORD PTR _i$71608[ebp]
	add	eax, 1
	mov	DWORD PTR _i$71608[ebp], eax
$LN88@Bench:
	mov	ecx, DWORD PTR _i$71608[ebp]
	cmp	ecx, DWORD PTR _numIterations$[ebp]
	jae	$LN86@Bench
; Line 2489
	mov	DWORD PTR _pow$71612[ebp], 10		; 0000000aH
	jmp	SHORT $LN85@Bench
$LN84@Bench:
	mov	edx, DWORD PTR _pow$71612[ebp]
	add	edx, 1
	mov	DWORD PTR _pow$71612[ebp], edx
$LN85@Bench:
	cmp	DWORD PTR _pow$71612[ebp], 32		; 00000020H
	jae	$LN83@Bench
; Line 2491
	mov	eax, 1
	mov	ecx, DWORD PTR _pow$71612[ebp]
	shl	eax, cl
	mov	DWORD PTR _bufSize$71616[ebp], eax
; Line 2492
	mov	ecx, DWORD PTR _bufSize$71616[ebp]
	cmp	ecx, DWORD PTR _dict$[ebp]
	jbe	SHORT $LN82@Bench
; Line 2493
	jmp	$LN83@Bench
$LN82@Bench:
; Line 2495
	lea	edx, DWORD PTR _s$71619[ebp]
	push	edx
	mov	eax, DWORD PTR _pow$71612[ebp]
	push	eax
	call	?ConvertUInt32ToString@@YGXIPAD@Z	; ConvertUInt32ToString
; Line 2496
	lea	ecx, DWORD PTR _s$71619[ebp]
	push	ecx
	call	?MyStringLen@@YGIPBD@Z			; MyStringLen
	mov	DWORD PTR _pos$71620[ebp], eax
; Line 2497
	mov	edx, DWORD PTR _pos$71620[ebp]
	mov	BYTE PTR _s$71619[ebp+edx], 58		; 0000003aH
	mov	eax, DWORD PTR _pos$71620[ebp]
	add	eax, 1
	mov	DWORD PTR _pos$71620[ebp], eax
; Line 2498
	mov	ecx, DWORD PTR _pos$71620[ebp]
	mov	BYTE PTR _s$71619[ebp+ecx], 32		; 00000020H
	mov	edx, DWORD PTR _pos$71620[ebp]
	add	edx, 1
	mov	DWORD PTR _pos$71620[ebp], edx
; Line 2499
	mov	eax, DWORD PTR _pos$71620[ebp]
	mov	BYTE PTR _s$71619[ebp+eax], 0
; Line 2500
	mov	esi, esp
	lea	ecx, DWORD PTR _s$71619[ebp]
	push	ecx
	mov	edx, DWORD PTR _f$71579[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _f$71579[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2502
	mov	DWORD PTR _ti$71621[ebp], 0
	jmp	SHORT $LN81@Bench
$LN80@Bench:
	mov	eax, DWORD PTR _ti$71621[ebp]
	add	eax, 1
	mov	DWORD PTR _ti$71621[ebp], eax
$LN81@Bench:
	mov	ecx, DWORD PTR _ti$71621[ebp]
	cmp	ecx, DWORD PTR _numThreadsTests$71596[ebp]
	jae	$LN79@Bench
; Line 2504
	mov	edx, DWORD PTR _f$71579[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _f$71579[ebp]
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$71625[ebp], eax
	cmp	DWORD PTR ___result__$71625[ebp], 0
	je	SHORT $LN78@Bench
	mov	eax, DWORD PTR ___result__$71625[ebp]
	mov	DWORD PTR $T73016[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _speedTotals$71602[ebp]
	call	??1CTempValues@@QAE@XZ			; CTempValues::~CTempValues
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _methodName$[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _method$[ebp]
	call	??1COneMethodInfo@@QAE@XZ
	mov	eax, DWORD PTR $T73016[ebp]
	jmp	$LN136@Bench
$LN78@Bench:
; Line 2505
	mov	ecx, DWORD PTR _numThreadsSpecified$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ti$71621[ebp]
	push	edx
	call	?GetNumThreadsNext@@YGIII@Z		; GetNumThreadsNext
	mov	DWORD PTR _t$71628[ebp], eax
; Line 2506
	mov	DWORD PTR _speed$71629[ebp], 0
	mov	DWORD PTR _speed$71629[ebp+4], 0
; Line 2511
	cmp	DWORD PTR _pow$71612[ebp], 17		; 00000011H
	jne	SHORT $LN138@Bench
	mov	eax, DWORD PTR _checkSum$71582[ebp]
	mov	DWORD PTR tv498[ebp], eax
	jmp	SHORT $LN139@Bench
$LN138@Bench:
	mov	DWORD PTR tv498[ebp], 0
$LN139@Bench:
	push	0
	push	0
	push	0
	push	0
	push	0
	lea	ecx, DWORD PTR _method$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv498[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR _complexity$71581[ebp]
	push	eax
	lea	ecx, DWORD PTR _speed$71629[ebp]
	push	ecx
	mov	edx, DWORD PTR _bufSize$71616[ebp]
	push	edx
	mov	eax, DWORD PTR _t$71628[ebp]
	push	eax
	mov	ecx, DWORD PTR _complexInCommands$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _complexInCommands$[ebp]
	push	edx
	call	?CrcBench@@YGJ_KIIAA_KIIPBIABVCOneMethodInfo@@PAUIBenchPrintCallback@@PAUCTotalBenchRes@@_N0@Z ; CrcBench
	mov	DWORD PTR ___result__$71630[ebp], eax
	cmp	DWORD PTR ___result__$71630[ebp], 0
	je	SHORT $LN77@Bench
	mov	eax, DWORD PTR ___result__$71630[ebp]
	mov	DWORD PTR $T73019[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _speedTotals$71602[ebp]
	call	??1CTempValues@@QAE@XZ			; CTempValues::~CTempValues
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _methodName$[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _method$[ebp]
	call	??1COneMethodInfo@@QAE@XZ
	mov	eax, DWORD PTR $T73019[ebp]
	jmp	$LN136@Bench
$LN77@Bench:
; Line 2512
	push	6
	mov	eax, DWORD PTR _speed$71629[ebp]
	mov	edx, DWORD PTR _speed$71629[ebp+4]
	mov	cl, 20					; 00000014H
	call	__aullshr
	push	edx
	push	eax
	mov	ecx, DWORD PTR _f$71579[ebp]
	push	ecx
	call	?PrintNumber@@YGXAAUIBenchPrintCallback@@_KH@Z ; PrintNumber
; Line 2513
	mov	edx, DWORD PTR _ti$71621[ebp]
	mov	eax, DWORD PTR _speedTotals$71602[ebp]
	mov	ecx, DWORD PTR [eax+edx*8]
	add	ecx, DWORD PTR _speed$71629[ebp]
	mov	edx, DWORD PTR [eax+edx*8+4]
	adc	edx, DWORD PTR _speed$71629[ebp+4]
	mov	eax, DWORD PTR _ti$71621[ebp]
	mov	esi, DWORD PTR _speedTotals$71602[ebp]
	mov	DWORD PTR [esi+eax*8], ecx
	mov	DWORD PTR [esi+eax*8+4], edx
; Line 2514
	jmp	$LN80@Bench
$LN79@Bench:
; Line 2515
	mov	ecx, DWORD PTR _f$71579[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR _f$71579[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2516
	mov	ecx, DWORD PTR _numSteps$71607[ebp]
	add	ecx, 1
	mov	edx, DWORD PTR _numSteps$71607[ebp+4]
	adc	edx, 0
	mov	DWORD PTR _numSteps$71607[ebp], ecx
	mov	DWORD PTR _numSteps$71607[ebp+4], edx
; Line 2517
	jmp	$LN84@Bench
$LN83@Bench:
; Line 2518
	jmp	$LN87@Bench
$LN86@Bench:
; Line 2519
	mov	eax, DWORD PTR _numSteps$71607[ebp]
	or	eax, DWORD PTR _numSteps$71607[ebp+4]
	je	$LN76@Bench
; Line 2521
	mov	ecx, DWORD PTR _f$71579[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR _f$71579[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2522
	mov	esi, esp
	push	OFFSET $SG71634
	mov	ecx, DWORD PTR _f$71579[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _f$71579[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2523
	mov	DWORD PTR _ti$71635[ebp], 0
	jmp	SHORT $LN75@Bench
$LN74@Bench:
	mov	ecx, DWORD PTR _ti$71635[ebp]
	add	ecx, 1
	mov	DWORD PTR _ti$71635[ebp], ecx
$LN75@Bench:
	mov	edx, DWORD PTR _ti$71635[ebp]
	cmp	edx, DWORD PTR _numThreadsTests$71596[ebp]
	jae	SHORT $LN73@Bench
; Line 2525
	push	6
	mov	eax, DWORD PTR _ti$71635[ebp]
	mov	ecx, DWORD PTR _speedTotals$71602[ebp]
	mov	edx, DWORD PTR _numSteps$71607[ebp+4]
	push	edx
	mov	edx, DWORD PTR _numSteps$71607[ebp]
	push	edx
	mov	edx, DWORD PTR [ecx+eax*8+4]
	push	edx
	mov	eax, DWORD PTR [ecx+eax*8]
	push	eax
	call	__aulldiv
	mov	cl, 20					; 00000014H
	call	__aullshr
	push	edx
	push	eax
	mov	ecx, DWORD PTR _f$71579[ebp]
	push	ecx
	call	?PrintNumber@@YGXAAUIBenchPrintCallback@@_KH@Z ; PrintNumber
; Line 2526
	jmp	SHORT $LN74@Bench
$LN73@Bench:
; Line 2527
	mov	edx, DWORD PTR _f$71579[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _f$71579[ebp]
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN76@Bench:
; Line 2529
	mov	DWORD PTR $T73020[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _speedTotals$71602[ebp]
	call	??1CTempValues@@QAE@XZ			; CTempValues::~CTempValues
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _methodName$[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _method$[ebp]
	call	??1COneMethodInfo@@QAE@XZ
	mov	eax, DWORD PTR $T73020[ebp]
	jmp	$LN136@Bench
$LN103@Bench:
; Line 2532
	mov	BYTE PTR _use2Columns$[ebp], 0
; Line 2534
	push	OFFSET $SG71643
	lea	ecx, DWORD PTR _method$[ebp+12]
	call	?IsEqualTo_Ascii_NoCase@AString@@QBE_NPBD@Z ; AString::IsEqualTo_Ascii_NoCase
	mov	BYTE PTR _totalBenchMode$[ebp], al
; Line 2537
	mov	DWORD PTR _threadsPassIndex$71644[ebp], 0
	jmp	SHORT $LN72@Bench
$LN71@Bench:
	mov	eax, DWORD PTR _threadsPassIndex$71644[ebp]
	add	eax, 1
	mov	DWORD PTR _threadsPassIndex$71644[ebp], eax
$LN72@Bench:
	cmp	DWORD PTR _threadsPassIndex$71644[ebp], 3
	jae	$LN70@Bench
; Line 2540
	mov	ecx, DWORD PTR _numThreadsSpecified$[ebp]
	mov	DWORD PTR _numThreads$71648[ebp], ecx
; Line 2542
	movzx	edx, BYTE PTR _multiThreadTests$[ebp]
	test	edx, edx
	jne	SHORT $LN69@Bench
; Line 2544
	cmp	DWORD PTR _threadsPassIndex$71644[ebp], 0
	je	SHORT $LN68@Bench
; Line 2545
	jmp	$LN70@Bench
$LN68@Bench:
; Line 2547
	jmp	SHORT $LN67@Bench
$LN69@Bench:
; Line 2549
	mov	DWORD PTR _numThreads$71648[ebp], 1
; Line 2550
	cmp	DWORD PTR _threadsPassIndex$71644[ebp], 0
	je	SHORT $LN67@Bench
; Line 2552
	cmp	DWORD PTR _numCPUs$[ebp], 2
	jae	SHORT $LN65@Bench
; Line 2553
	jmp	$LN70@Bench
$LN65@Bench:
; Line 2554
	mov	eax, DWORD PTR _numCPUs$[ebp]
	mov	DWORD PTR _numThreads$71648[ebp], eax
; Line 2555
	cmp	DWORD PTR _threadsPassIndex$71644[ebp], 1
	jne	SHORT $LN64@Bench
; Line 2557
	cmp	DWORD PTR _numCPUs$[ebp], 4
	jb	SHORT $LN63@Bench
; Line 2558
	mov	ecx, DWORD PTR _numCPUs$[ebp]
	shr	ecx, 1
	mov	DWORD PTR _numThreads$71648[ebp], ecx
$LN63@Bench:
; Line 2559
	jmp	SHORT $LN67@Bench
$LN64@Bench:
; Line 2560
	cmp	DWORD PTR _numCPUs$[ebp], 4
	jae	SHORT $LN67@Bench
; Line 2561
	jmp	$LN70@Bench
$LN67@Bench:
; Line 2565
	lea	ecx, DWORD PTR _callback$71658[ebp]
	call	??0CBenchCallbackToPrint@@QAE@XZ	; CBenchCallbackToPrint::CBenchCallbackToPrint
; Line 2566
	lea	ecx, DWORD PTR _callback$71658[ebp]
	call	?Init@CBenchCallbackToPrint@@QAEXXZ	; CBenchCallbackToPrint::Init
; Line 2567
	mov	edx, DWORD PTR _printCallback$[ebp]
	mov	DWORD PTR _callback$71658[ebp+88], edx
; Line 2569
	mov	eax, DWORD PTR _printCallback$[ebp]
	mov	DWORD PTR _f$71659[ebp], eax
; Line 2571
	cmp	DWORD PTR _threadsPassIndex$71644[ebp], 0
	jbe	SHORT $LN60@Bench
; Line 2573
	mov	ecx, DWORD PTR _f$71659[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR _f$71659[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2574
	mov	ecx, DWORD PTR _f$71659[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR _f$71659[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN60@Bench:
; Line 2577
	movzx	ecx, BYTE PTR _dictIsDefined$[ebp]
	test	ecx, ecx
	jne	$LN59@Bench
; Line 2579
	movzx	edx, BYTE PTR _totalBenchMode$[ebp]
	neg	edx
	sbb	edx, edx
	add	edx, 25					; 00000019H
	mov	DWORD PTR _dicSizeLog$71662[ebp], edx
; Line 2580
	jmp	SHORT $LN58@Bench
$LN57@Bench:
	mov	eax, DWORD PTR _dicSizeLog$71662[ebp]
	sub	eax, 1
	mov	DWORD PTR _dicSizeLog$71662[ebp], eax
$LN58@Bench:
	cmp	DWORD PTR _dicSizeLog$71662[ebp], 18	; 00000012H
	jbe	SHORT $LN56@Bench
; Line 2581
	mov	edx, 1
	mov	ecx, DWORD PTR _dicSizeLog$71662[ebp]
	shl	edx, cl
	push	edx
	mov	eax, DWORD PTR _numThreads$71648[ebp]
	push	eax
	call	?GetBenchMemoryUsage@@YG_KII@Z		; GetBenchMemoryUsage
	add	eax, 8388608				; 00800000H
	adc	edx, 0
	mov	DWORD PTR tv1510[ebp], eax
	mov	DWORD PTR tv1510[ebp+4], edx
	mov	ecx, DWORD PTR tv1510[ebp+4]
	cmp	ecx, DWORD PTR _ramSize$[ebp+4]
	ja	SHORT $LN55@Bench
	jb	SHORT $LN157@Bench
	mov	edx, DWORD PTR tv1510[ebp]
	cmp	edx, DWORD PTR _ramSize$[ebp]
	ja	SHORT $LN55@Bench
$LN157@Bench:
; Line 2582
	jmp	SHORT $LN56@Bench
$LN55@Bench:
; Line 2583
	jmp	SHORT $LN57@Bench
$LN56@Bench:
	mov	eax, 1
	mov	ecx, DWORD PTR _dicSizeLog$71662[ebp]
	shl	eax, cl
	mov	DWORD PTR _dict$[ebp], eax
$LN59@Bench:
; Line 2586
	mov	ecx, DWORD PTR _numThreads$71648[ebp]
	push	ecx
	push	OFFSET $SG71669
	mov	edx, DWORD PTR _dict$[ebp]
	push	edx
	mov	eax, DWORD PTR _numThreads$71648[ebp]
	push	eax
	call	?GetBenchMemoryUsage@@YG_KII@Z		; GetBenchMemoryUsage
	push	edx
	push	eax
	push	OFFSET $SG71670
	mov	ecx, DWORD PTR _f$71659[ebp]
	push	ecx
	call	?PrintRequirements@@YGXAAUIBenchPrintCallback@@PBD_K1I@Z ; PrintRequirements
; Line 2588
	mov	edx, DWORD PTR _f$71659[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _f$71659[ebp]
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2590
	movzx	eax, BYTE PTR _totalBenchMode$[ebp]
	test	eax, eax
	je	SHORT $LN54@Bench
; Line 2592
	mov	DWORD PTR _callback$71658[ebp+100], 12	; 0000000cH
; Line 2593
	mov	BYTE PTR _use2Columns$[ebp], 0
; Line 2595
	jmp	SHORT $LN53@Bench
$LN54@Bench:
; Line 2597
	mov	DWORD PTR _callback$71658[ebp+100], 4
; Line 2598
	mov	BYTE PTR _use2Columns$[ebp], 1
$LN53@Bench:
; Line 2600
	mov	cl, BYTE PTR _use2Columns$[ebp]
	mov	BYTE PTR _callback$71658[ebp+96], cl
; Line 2602
	mov	BYTE PTR _showFreq$71673[ebp], 0
; Line 2603
	mov	DWORD PTR _cpuFreq$71674[ebp], 0
	mov	DWORD PTR _cpuFreq$71674[ebp+4], 0
; Line 2605
	movzx	edx, BYTE PTR _totalBenchMode$[ebp]
	test	edx, edx
	je	SHORT $LN52@Bench
; Line 2607
	mov	BYTE PTR _showFreq$71673[ebp], 1
$LN52@Bench:
; Line 2610
	mov	DWORD PTR _fileldSize$71676[ebp], 30	; 0000001eH
; Line 2611
	movzx	eax, BYTE PTR _showFreq$71673[ebp]
	test	eax, eax
	je	SHORT $LN51@Bench
; Line 2612
	mov	ecx, DWORD PTR _fileldSize$71676[ebp]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR _fileldSize$71676[ebp], ecx
$LN51@Bench:
; Line 2614
	movzx	edx, BYTE PTR _use2Columns$[ebp]
	test	edx, edx
	je	SHORT $LN50@Bench
; Line 2616
	mov	eax, DWORD PTR _callback$71658[ebp+100]
	push	eax
	mov	ecx, DWORD PTR _f$71659[ebp]
	push	ecx
	call	?PrintSpaces@@YGXAAUIBenchPrintCallback@@I@Z ; PrintSpaces
; Line 2617
	mov	edx, DWORD PTR _fileldSize$71676[ebp]
	push	edx
	push	OFFSET $SG71679
	mov	eax, DWORD PTR _f$71659[ebp]
	push	eax
	call	?PrintRight@@YGXAAUIBenchPrintCallback@@PBDI@Z ; PrintRight
; Line 2618
	mov	esi, esp
	mov	ecx, DWORD PTR _kSep
	push	ecx
	mov	edx, DWORD PTR _f$71659[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _f$71659[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2619
	mov	eax, DWORD PTR _fileldSize$71676[ebp]
	push	eax
	push	OFFSET $SG71680
	mov	ecx, DWORD PTR _f$71659[ebp]
	push	ecx
	call	?PrintRight@@YGXAAUIBenchPrintCallback@@PBDI@Z ; PrintRight
$LN50@Bench:
; Line 2621
	mov	edx, DWORD PTR _f$71659[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _f$71659[ebp]
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2622
	movzx	eax, BYTE PTR _totalBenchMode$[ebp]
	test	eax, eax
	je	SHORT $LN140@Bench
	mov	DWORD PTR tv615[ebp], OFFSET $SG71681
	jmp	SHORT $LN141@Bench
$LN140@Bench:
	mov	DWORD PTR tv615[ebp], OFFSET $SG71682
$LN141@Bench:
	mov	ecx, DWORD PTR _callback$71658[ebp+100]
	push	ecx
	mov	edx, DWORD PTR tv615[ebp]
	push	edx
	mov	eax, DWORD PTR _f$71659[ebp]
	push	eax
	call	?PrintLeft@@YGXAAUIBenchPrintCallback@@PBDI@Z ; PrintLeft
; Line 2626
	mov	DWORD PTR _j$71683[ebp], 0
	jmp	SHORT $LN49@Bench
$LN48@Bench:
	mov	ecx, DWORD PTR _j$71683[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$71683[ebp], ecx
$LN49@Bench:
	cmp	DWORD PTR _j$71683[ebp], 2
	jge	$LN47@Bench
; Line 2628
	push	10					; 0000000aH
	push	OFFSET $SG71687
	mov	edx, DWORD PTR _f$71659[ebp]
	push	edx
	call	?PrintRight@@YGXAAUIBenchPrintCallback@@PBDI@Z ; PrintRight
; Line 2629
	push	6
	push	OFFSET $SG71688
	mov	eax, DWORD PTR _f$71659[ebp]
	push	eax
	call	?PrintRight@@YGXAAUIBenchPrintCallback@@PBDI@Z ; PrintRight
; Line 2630
	push	7
	push	OFFSET $SG71689
	mov	ecx, DWORD PTR _f$71659[ebp]
	push	ecx
	call	?PrintRight@@YGXAAUIBenchPrintCallback@@PBDI@Z ; PrintRight
; Line 2631
	push	7
	push	OFFSET $SG71690
	mov	edx, DWORD PTR _f$71659[ebp]
	push	edx
	call	?PrintRight@@YGXAAUIBenchPrintCallback@@PBDI@Z ; PrintRight
; Line 2632
	movzx	eax, BYTE PTR _showFreq$71673[ebp]
	test	eax, eax
	je	SHORT $LN46@Bench
; Line 2634
	push	6
	push	OFFSET $SG71692
	mov	ecx, DWORD PTR _f$71659[ebp]
	push	ecx
	call	?PrintRight@@YGXAAUIBenchPrintCallback@@PBDI@Z ; PrintRight
; Line 2635
	push	6
	push	OFFSET $SG71693
	mov	edx, DWORD PTR _f$71659[ebp]
	push	edx
	call	?PrintRight@@YGXAAUIBenchPrintCallback@@PBDI@Z ; PrintRight
$LN46@Bench:
; Line 2637
	movzx	eax, BYTE PTR _use2Columns$[ebp]
	test	eax, eax
	jne	SHORT $LN45@Bench
; Line 2638
	jmp	SHORT $LN47@Bench
$LN45@Bench:
; Line 2639
	cmp	DWORD PTR _j$71683[ebp], 0
	jne	SHORT $LN44@Bench
; Line 2640
	mov	esi, esp
	mov	ecx, DWORD PTR _kSep
	push	ecx
	mov	edx, DWORD PTR _f$71659[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _f$71659[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN44@Bench:
; Line 2641
	jmp	$LN48@Bench
$LN47@Bench:
; Line 2643
	mov	eax, DWORD PTR _f$71659[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _f$71659[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2644
	mov	ecx, DWORD PTR _callback$71658[ebp+100]
	push	ecx
	mov	edx, DWORD PTR _f$71659[ebp]
	push	edx
	call	?PrintSpaces@@YGXAAUIBenchPrintCallback@@I@Z ; PrintSpaces
; Line 2646
	mov	DWORD PTR _j$71683[ebp], 0
	jmp	SHORT $LN43@Bench
$LN42@Bench:
	mov	eax, DWORD PTR _j$71683[ebp]
	add	eax, 1
	mov	DWORD PTR _j$71683[ebp], eax
$LN43@Bench:
	cmp	DWORD PTR _j$71683[ebp], 2
	jge	$LN41@Bench
; Line 2648
	push	10					; 0000000aH
	push	OFFSET $SG71699
	mov	ecx, DWORD PTR _f$71659[ebp]
	push	ecx
	call	?PrintRight@@YGXAAUIBenchPrintCallback@@PBDI@Z ; PrintRight
; Line 2649
	push	6
	push	OFFSET $SG71700
	mov	edx, DWORD PTR _f$71659[ebp]
	push	edx
	call	?PrintRight@@YGXAAUIBenchPrintCallback@@PBDI@Z ; PrintRight
; Line 2650
	push	7
	push	OFFSET $SG71701
	mov	eax, DWORD PTR _f$71659[ebp]
	push	eax
	call	?PrintRight@@YGXAAUIBenchPrintCallback@@PBDI@Z ; PrintRight
; Line 2651
	push	7
	push	OFFSET $SG71702
	mov	ecx, DWORD PTR _f$71659[ebp]
	push	ecx
	call	?PrintRight@@YGXAAUIBenchPrintCallback@@PBDI@Z ; PrintRight
; Line 2652
	movzx	edx, BYTE PTR _showFreq$71673[ebp]
	test	edx, edx
	je	SHORT $LN40@Bench
; Line 2654
	push	6
	push	OFFSET $SG71704
	mov	eax, DWORD PTR _f$71659[ebp]
	push	eax
	call	?PrintRight@@YGXAAUIBenchPrintCallback@@PBDI@Z ; PrintRight
; Line 2655
	push	6
	push	OFFSET $SG71705
	mov	ecx, DWORD PTR _f$71659[ebp]
	push	ecx
	call	?PrintRight@@YGXAAUIBenchPrintCallback@@PBDI@Z ; PrintRight
$LN40@Bench:
; Line 2657
	movzx	edx, BYTE PTR _use2Columns$[ebp]
	test	edx, edx
	jne	SHORT $LN39@Bench
; Line 2658
	jmp	SHORT $LN41@Bench
$LN39@Bench:
; Line 2659
	cmp	DWORD PTR _j$71683[ebp], 0
	jne	SHORT $LN38@Bench
; Line 2660
	mov	esi, esp
	mov	eax, DWORD PTR _kSep
	push	eax
	mov	ecx, DWORD PTR _f$71659[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _f$71659[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN38@Bench:
; Line 2661
	jmp	$LN42@Bench
$LN41@Bench:
; Line 2663
	mov	ecx, DWORD PTR _f$71659[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR _f$71659[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2664
	mov	ecx, DWORD PTR _f$71659[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR _f$71659[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2666
	movzx	ecx, BYTE PTR _totalBenchMode$[ebp]
	test	ecx, ecx
	je	$LN37@Bench
; Line 2668
	movzx	edx, BYTE PTR _dictIsDefined$[ebp]
	test	edx, edx
	jne	SHORT $LN36@Bench
; Line 2673
	mov	DWORD PTR _dict$[ebp], 16777216		; 01000000H
$LN36@Bench:
; Line 2675
	mov	DWORD PTR _i$71711[ebp], 0
	jmp	SHORT $LN35@Bench
$LN34@Bench:
	mov	eax, DWORD PTR _i$71711[ebp]
	add	eax, 1
	mov	DWORD PTR _i$71711[ebp], eax
$LN35@Bench:
	mov	ecx, DWORD PTR _i$71711[ebp]
	cmp	ecx, DWORD PTR _numIterations$[ebp]
	jae	$LN33@Bench
; Line 2677
	cmp	DWORD PTR _i$71711[ebp], 0
	je	SHORT $LN32@Bench
; Line 2678
	mov	edx, DWORD PTR _printCallback$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _printCallback$[ebp]
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN32@Bench:
; Line 2682
	mov	DWORD PTR _kNumCpuTests$71718[ebp], 3
; Line 2683
	mov	DWORD PTR _freqTest$71717[ebp], 0
	jmp	SHORT $LN31@Bench
$LN30@Bench:
	mov	eax, DWORD PTR _freqTest$71717[ebp]
	add	eax, 1
	mov	DWORD PTR _freqTest$71717[ebp], eax
$LN31@Bench:
	cmp	DWORD PTR _freqTest$71717[ebp], 3
	jge	$LN29@Bench
; Line 2685
	push	12					; 0000000cH
	push	OFFSET $SG71722
	mov	ecx, DWORD PTR _f$71659[ebp]
	push	ecx
	call	?PrintLeft@@YGXAAUIBenchPrintCallback@@PBDI@Z ; PrintLeft
; Line 2687
	lea	edx, DWORD PTR _resVal$71723[ebp]
	push	edx
	lea	eax, DWORD PTR _cpuFreq$71674[ebp]
	push	eax
	cmp	DWORD PTR _freqTest$71717[ebp], 2
	sete	cl
	movzx	edx, cl
	push	edx
	mov	eax, DWORD PTR _printCallback$[ebp]
	push	eax
	mov	ecx, DWORD PTR _numThreads$71648[ebp]
	push	ecx
	mov	edx, DWORD PTR _complexInCommands$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _complexInCommands$[ebp]
	push	eax
	call	?FreqBench@@YGJ_KIPAUIBenchPrintCallback@@_NAA_KAAI@Z ; FreqBench
	mov	DWORD PTR ___result__$71724[ebp], eax
	cmp	DWORD PTR ___result__$71724[ebp], 0
	je	SHORT $LN28@Bench
	mov	ecx, DWORD PTR ___result__$71724[ebp]
	mov	DWORD PTR $T73023[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _methodName$[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _method$[ebp]
	call	??1COneMethodInfo@@QAE@XZ
	mov	eax, DWORD PTR $T73023[ebp]
	jmp	$LN136@Bench
$LN28@Bench:
; Line 2688
	lea	ecx, DWORD PTR _callback$71658[ebp]
	call	?NewLine@CBenchCallbackToPrint@@QAEXXZ	; CBenchCallbackToPrint::NewLine
; Line 2690
	cmp	DWORD PTR _freqTest$71717[ebp], 2
	jne	SHORT $LN27@Bench
; Line 2691
	lea	edx, DWORD PTR _complexInCommands$[ebp]
	push	edx
	mov	eax, DWORD PTR _cpuFreq$71674[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _cpuFreq$71674[ebp]
	push	ecx
	mov	edx, DWORD PTR _testTime$[ebp]
	push	edx
	call	?SetComplexCommands@@YGXI_KAA_K@Z	; SetComplexCommands
$LN27@Bench:
; Line 2692
	jmp	$LN30@Bench
$LN29@Bench:
; Line 2693
	lea	ecx, DWORD PTR _callback$71658[ebp]
	call	?NewLine@CBenchCallbackToPrint@@QAEXXZ	; CBenchCallbackToPrint::NewLine
; Line 2695
	mov	eax, DWORD PTR _cpuFreq$71674[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _cpuFreq$71674[ebp]
	push	ecx
	push	1
	lea	ecx, DWORD PTR _callback$71658[ebp]
	call	?SetFreq@CBenchCallbackToPrint@@UAEJ_N_K@Z ; CBenchCallbackToPrint::SetFreq
; Line 2696
	lea	edx, DWORD PTR _callback$71658[ebp]
	push	edx
	mov	eax, DWORD PTR _printCallback$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dict$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _dictIsDefined$[ebp]
	push	edx
	mov	eax, DWORD PTR _numThreads$71648[ebp]
	push	eax
	mov	ecx, DWORD PTR _complexInCommands$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _complexInCommands$[ebp]
	push	edx
	call	?TotalBench@@YGJ_KI_NIPAUIBenchPrintCallback@@PAUCBenchCallbackToPrint@@@Z ; TotalBench
	mov	DWORD PTR _res$71716[ebp], eax
; Line 2697
	mov	eax, DWORD PTR _res$71716[ebp]
	mov	DWORD PTR ___result__$71728[ebp], eax
	cmp	DWORD PTR ___result__$71728[ebp], 0
	je	SHORT $LN26@Bench
	mov	ecx, DWORD PTR ___result__$71728[ebp]
	mov	DWORD PTR $T73024[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _methodName$[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _method$[ebp]
	call	??1COneMethodInfo@@QAE@XZ
	mov	eax, DWORD PTR $T73024[ebp]
	jmp	$LN136@Bench
$LN26@Bench:
; Line 2700
	mov	edx, DWORD PTR _cpuFreq$71674[ebp+4]
	push	edx
	mov	eax, DWORD PTR _cpuFreq$71674[ebp]
	push	eax
	push	1
	lea	ecx, DWORD PTR _callback$71658[ebp+24]
	push	ecx
	lea	edx, DWORD PTR _callback$71658[ebp]
	push	edx
	mov	eax, DWORD PTR _printCallback$[ebp]
	push	eax
	push	131072					; 00020000H
	mov	ecx, DWORD PTR _numThreads$71648[ebp]
	push	ecx
	mov	edx, DWORD PTR _complexInCommands$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _complexInCommands$[ebp]
	push	eax
	call	?TotalBench_Hash@@YGJ_KIIPAUIBenchPrintCallback@@PAUCBenchCallbackToPrint@@PAUCTotalBenchRes@@_N0@Z ; TotalBench_Hash
	mov	DWORD PTR _res$71716[ebp], eax
; Line 2701
	mov	ecx, DWORD PTR _res$71716[ebp]
	mov	DWORD PTR ___result__$71731[ebp], ecx
	cmp	DWORD PTR ___result__$71731[ebp], 0
	je	SHORT $LN25@Bench
	mov	edx, DWORD PTR ___result__$71731[ebp]
	mov	DWORD PTR $T73025[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _methodName$[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _method$[ebp]
	call	??1COneMethodInfo@@QAE@XZ
	mov	eax, DWORD PTR $T73025[ebp]
	jmp	$LN136@Bench
$LN25@Bench:
; Line 2703
	lea	ecx, DWORD PTR _callback$71658[ebp]
	call	?NewLine@CBenchCallbackToPrint@@QAEXXZ	; CBenchCallbackToPrint::NewLine
; Line 2705
	push	12					; 0000000cH
	push	OFFSET $SG71734
	mov	eax, DWORD PTR _f$71659[ebp]
	push	eax
	call	?PrintLeft@@YGXAAUIBenchPrintCallback@@PBDI@Z ; PrintLeft
; Line 2707
	mov	ecx, DWORD PTR _cpuFreq$71674[ebp]
	mov	DWORD PTR _cpuFreqLastTemp$71736[ebp], ecx
	mov	edx, DWORD PTR _cpuFreq$71674[ebp+4]
	mov	DWORD PTR _cpuFreqLastTemp$71736[ebp+4], edx
; Line 2708
	lea	eax, DWORD PTR _resVal$71735[ebp]
	push	eax
	lea	ecx, DWORD PTR _cpuFreqLastTemp$71736[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _printCallback$[ebp]
	push	edx
	mov	eax, DWORD PTR _numThreads$71648[ebp]
	push	eax
	mov	ecx, DWORD PTR _complexInCommands$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _complexInCommands$[ebp]
	push	edx
	call	?FreqBench@@YGJ_KIPAUIBenchPrintCallback@@_NAA_KAAI@Z ; FreqBench
	mov	DWORD PTR ___result__$71737[ebp], eax
	cmp	DWORD PTR ___result__$71737[ebp], 0
	je	SHORT $LN24@Bench
	mov	eax, DWORD PTR ___result__$71737[ebp]
	mov	DWORD PTR $T73026[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _methodName$[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _method$[ebp]
	call	??1COneMethodInfo@@QAE@XZ
	mov	eax, DWORD PTR $T73026[ebp]
	jmp	$LN136@Bench
$LN24@Bench:
; Line 2709
	lea	ecx, DWORD PTR _callback$71658[ebp]
	call	?NewLine@CBenchCallbackToPrint@@QAEXXZ	; CBenchCallbackToPrint::NewLine
; Line 2711
	jmp	$LN34@Bench
$LN33@Bench:
; Line 2713
	jmp	$LN23@Bench
$LN37@Bench:
; Line 2715
	mov	BYTE PTR _needSetComplexity$71741[ebp], 1
; Line 2716
	push	OFFSET $SG71743
	lea	ecx, DWORD PTR _methodName$[ebp]
	call	?IsEqualTo_Ascii_NoCase@AString@@QBE_NPBD@Z ; AString::IsEqualTo_Ascii_NoCase
	movzx	ecx, al
	test	ecx, ecx
	jne	$LN22@Bench
; Line 2718
	mov	DWORD PTR _i$71744[ebp], 0
	jmp	SHORT $LN21@Bench
$LN20@Bench:
	mov	edx, DWORD PTR _i$71744[ebp]
	add	edx, 1
	mov	DWORD PTR _i$71744[ebp], edx
$LN21@Bench:
	cmp	DWORD PTR _i$71744[ebp], 17		; 00000011H
	jae	$LN22@Bench
; Line 2720
	mov	eax, DWORD PTR _i$71744[ebp]
	imul	eax, 24					; 00000018H
	add	eax, OFFSET _g_Bench
	mov	DWORD PTR _h$71748[ebp], eax
; Line 2721
	mov	ecx, DWORD PTR _h$71748[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	lea	ecx, DWORD PTR _s$71749[ebp]
	call	??0AString@@QAE@PBD@Z			; AString::AString
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
; Line 2722
	lea	ecx, DWORD PTR _methodName$[ebp]
	call	??BAString@@QBEPBDXZ			; AString::operator char const *
	push	eax
	mov	eax, DWORD PTR _h$71748[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	?AreSameMethodNames@@YG_NPBD0@Z		; AreSameMethodNames
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN18@Bench
; Line 2724
	mov	eax, DWORD PTR _h$71748[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _callback$71658[ebp+8], ecx
; Line 2725
	mov	edx, DWORD PTR _h$71748[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _callback$71658[ebp+12], eax
; Line 2726
	mov	ecx, DWORD PTR _h$71748[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _callback$71658[ebp+16], edx
; Line 2727
	mov	BYTE PTR _needSetComplexity$71741[ebp], 0
; Line 2728
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _s$71749[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	jmp	SHORT $LN22@Bench
$LN18@Bench:
; Line 2730
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _s$71749[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	jmp	$LN20@Bench
$LN22@Bench:
; Line 2732
	movzx	eax, BYTE PTR _needSetComplexity$71741[ebp]
	test	eax, eax
	je	SHORT $LN17@Bench
; Line 2733
	lea	ecx, DWORD PTR _callback$71658[ebp+4]
	call	?SetLzmaCompexity@CBenchProps@@QAEXXZ	; CBenchProps::SetLzmaCompexity
$LN17@Bench:
; Line 2735
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN16@Bench
$LN15@Bench:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN16@Bench:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _numIterations$[ebp]
	jae	$LN23@Bench
; Line 2737
	mov	DWORD PTR _kStartDicLog$71755[ebp], 22	; 00000016H
; Line 2738
	cmp	DWORD PTR _dict$[ebp], 4194304		; 00400000H
	sbb	eax, eax
	and	eax, -4					; fffffffcH
	add	eax, 22					; 00000016H
	mov	DWORD PTR _pow$71756[ebp], eax
; Line 2739
	movzx	ecx, BYTE PTR _multiDict$[ebp]
	test	ecx, ecx
	jne	SHORT $LN12@Bench
; Line 2740
	mov	DWORD PTR _pow$71756[ebp], 31		; 0000001fH
$LN12@Bench:
; Line 2741
	mov	edx, 1
	mov	ecx, DWORD PTR _pow$71756[ebp]
	shl	edx, cl
	cmp	edx, DWORD PTR _dict$[ebp]
	jbe	SHORT $LN11@Bench
	cmp	DWORD PTR _pow$71756[ebp], 0
	jbe	SHORT $LN11@Bench
; Line 2742
	mov	eax, DWORD PTR _pow$71756[ebp]
	sub	eax, 1
	mov	DWORD PTR _pow$71756[ebp], eax
	jmp	SHORT $LN12@Bench
$LN11@Bench:
; Line 2743
	jmp	SHORT $LN10@Bench
$LN9@Bench:
	mov	ecx, DWORD PTR _pow$71756[ebp]
	add	ecx, 1
	mov	DWORD PTR _pow$71756[ebp], ecx
$LN10@Bench:
	mov	edx, 1
	mov	ecx, DWORD PTR _pow$71756[ebp]
	shl	edx, cl
	cmp	edx, DWORD PTR _dict$[ebp]
	ja	$LN8@Bench
; Line 2746
	lea	eax, DWORD PTR _s$71767[ebp]
	push	eax
	mov	ecx, DWORD PTR _pow$71756[ebp]
	push	ecx
	call	?ConvertUInt32ToString@@YGXIPAD@Z	; ConvertUInt32ToString
; Line 2747
	lea	edx, DWORD PTR _s$71767[ebp]
	push	edx
	call	?MyStringLen@@YGIPBD@Z			; MyStringLen
	mov	DWORD PTR _pos$71768[ebp], eax
; Line 2748
	mov	eax, DWORD PTR _pos$71768[ebp]
	mov	BYTE PTR _s$71767[ebp+eax], 58		; 0000003aH
	mov	ecx, DWORD PTR _pos$71768[ebp]
	add	ecx, 1
	mov	DWORD PTR _pos$71768[ebp], ecx
; Line 2749
	mov	edx, DWORD PTR _pos$71768[ebp]
	mov	BYTE PTR _s$71767[ebp+edx], 0
; Line 2750
	push	4
	lea	eax, DWORD PTR _s$71767[ebp]
	push	eax
	mov	ecx, DWORD PTR _f$71659[ebp]
	push	ecx
	call	?PrintLeft@@YGXAAUIBenchPrintCallback@@PBDI@Z ; PrintLeft
; Line 2751
	mov	edx, 1
	mov	ecx, DWORD PTR _pow$71756[ebp]
	shl	edx, cl
	mov	DWORD PTR _callback$71658[ebp+92], edx
; Line 2753
	lea	eax, DWORD PTR _method$[ebp]
	push	eax
	lea	ecx, DWORD PTR _method2$71770[ebp]
	call	??0COneMethodInfo@@QAE@ABV0@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
; Line 2755
	push	OFFSET $SG71772
	lea	ecx, DWORD PTR _method2$71770[ebp+12]
	call	??BAString@@QBEPBDXZ			; AString::operator char const *
	push	eax
	call	?StringsAreEqualNoCase_Ascii@@YG_NPBD0@Z ; StringsAreEqualNoCase_Ascii
	movzx	ecx, al
	test	ecx, ecx
	je	$LN7@Bench
; Line 2760
	mov	edx, DWORD PTR _pow$71756[ebp]
	push	edx
	lea	ecx, DWORD PTR _propVariant$71773[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@I@Z	; NWindows::NCOM::CPropVariant::CPropVariant
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
; Line 2761
	push	OFFSET $SG71777
	lea	ecx, DWORD PTR $T73027[ebp]
	call	??0UString@@QAE@PB_W@Z			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH
	lea	eax, DWORD PTR _propVariant$71773[ebp]
	push	eax
	lea	ecx, DWORD PTR $T73027[ebp]
	push	ecx
	lea	ecx, DWORD PTR _method2$71770[ebp]
	call	?ParseMethodFromPROPVARIANT@COneMethodInfo@@QAEJABVUString@@ABUtagPROPVARIANT@@@Z ; COneMethodInfo::ParseMethodFromPROPVARIANT
	mov	DWORD PTR ___result__$71775[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR $T73027[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	cmp	DWORD PTR ___result__$71775[ebp], 0
	je	SHORT $LN6@Bench
	mov	edx, DWORD PTR ___result__$71775[ebp]
	mov	DWORD PTR $T73028[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _propVariant$71773[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _method2$71770[ebp]
	call	??1COneMethodInfo@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _methodName$[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _method$[ebp]
	call	??1COneMethodInfo@@QAE@XZ
	mov	eax, DWORD PTR $T73028[ebp]
	jmp	$LN136@Bench
$LN6@Bench:
; Line 2762
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _propVariant$71773[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
$LN7@Bench:
; Line 2764
	mov	eax, DWORD PTR _callback$71658[ebp+92]
	mov	DWORD PTR _uncompressedDataSize$71780[ebp], eax
; Line 2765
	cmp	DWORD PTR _uncompressedDataSize$71780[ebp], 262144 ; 00040000H
	jb	SHORT $LN5@Bench
; Line 2766
	mov	ecx, DWORD PTR _uncompressedDataSize$71780[ebp]
	add	ecx, 65536				; 00010000H
	mov	DWORD PTR _uncompressedDataSize$71780[ebp], ecx
$LN5@Bench:
; Line 2773
	lea	edx, DWORD PTR _callback$71658[ebp+4]
	push	edx
	lea	eax, DWORD PTR _callback$71658[ebp]
	push	eax
	mov	ecx, DWORD PTR _printCallback$[ebp]
	push	ecx
	push	30					; 0000001eH
	mov	edx, DWORD PTR _uncompressedDataSize$71780[ebp]
	push	edx
	lea	eax, DWORD PTR _method2$71770[ebp]
	push	eax
	mov	ecx, DWORD PTR _numThreads$71648[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _complexInCommands$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _complexInCommands$[ebp]
	push	eax
	call	?MethodBench@@YGJ_K_NIABVCOneMethodInfo@@IIPAUIBenchPrintCallback@@PAUIBenchCallback@@PAUCBenchProps@@@Z ; MethodBench
	mov	DWORD PTR _res$71782[ebp], eax
; Line 2774
	mov	ecx, DWORD PTR _f$71659[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR _f$71659[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2775
	mov	ecx, DWORD PTR _res$71782[ebp]
	mov	DWORD PTR ___result__$71783[ebp], ecx
	cmp	DWORD PTR ___result__$71783[ebp], 0
	je	SHORT $LN4@Bench
	mov	edx, DWORD PTR ___result__$71783[ebp]
	mov	DWORD PTR $T73029[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _method2$71770[ebp]
	call	??1COneMethodInfo@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _methodName$[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _method$[ebp]
	call	??1COneMethodInfo@@QAE@XZ
	mov	eax, DWORD PTR $T73029[ebp]
	jmp	$LN136@Bench
$LN4@Bench:
; Line 2776
	movzx	eax, BYTE PTR _multiDict$[ebp]
	test	eax, eax
	jne	SHORT $LN3@Bench
; Line 2777
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _method2$71770[ebp]
	call	??1COneMethodInfo@@QAE@XZ
	jmp	SHORT $LN8@Bench
$LN3@Bench:
; Line 2778
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _method2$71770[ebp]
	call	??1COneMethodInfo@@QAE@XZ
	jmp	$LN9@Bench
$LN8@Bench:
; Line 2779
	jmp	$LN15@Bench
$LN23@Bench:
; Line 2782
	mov	ecx, DWORD PTR _callback$71658[ebp+100]
	add	ecx, DWORD PTR _fileldSize$71676[ebp]
	push	ecx
	push	45					; 0000002dH
	mov	edx, DWORD PTR _f$71659[ebp]
	push	edx
	call	?PrintChars@@YGXAAUIBenchPrintCallback@@DI@Z ; PrintChars
; Line 2784
	movzx	eax, BYTE PTR _use2Columns$[ebp]
	test	eax, eax
	je	SHORT $LN2@Bench
; Line 2786
	mov	esi, esp
	mov	ecx, DWORD PTR _kSep
	push	ecx
	mov	edx, DWORD PTR _f$71659[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _f$71659[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2787
	mov	eax, DWORD PTR _fileldSize$71676[ebp]
	push	eax
	push	45					; 0000002dH
	mov	ecx, DWORD PTR _f$71659[ebp]
	push	ecx
	call	?PrintChars@@YGXAAUIBenchPrintCallback@@DI@Z ; PrintChars
$LN2@Bench:
; Line 2790
	mov	edx, DWORD PTR _f$71659[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _f$71659[ebp]
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2792
	movzx	eax, BYTE PTR _use2Columns$[ebp]
	test	eax, eax
	je	$LN1@Bench
; Line 2794
	mov	ecx, DWORD PTR _callback$71658[ebp+100]
	push	ecx
	push	OFFSET $SG71789
	mov	edx, DWORD PTR _f$71659[ebp]
	push	edx
	call	?PrintLeft@@YGXAAUIBenchPrintCallback@@PBDI@Z ; PrintLeft
; Line 2795
	lea	eax, DWORD PTR _callback$71658[ebp+24]
	push	eax
	mov	ecx, DWORD PTR _cpuFreq$71674[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _cpuFreq$71674[ebp]
	push	edx
	movzx	eax, BYTE PTR _showFreq$71673[ebp]
	push	eax
	mov	ecx, DWORD PTR _f$71659[ebp]
	push	ecx
	call	?PrintTotals@@YGXAAUIBenchPrintCallback@@_N_KABUCTotalBenchRes@@@Z ; PrintTotals
; Line 2796
	mov	esi, esp
	mov	edx, DWORD PTR _kSep
	push	edx
	mov	eax, DWORD PTR _f$71659[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _f$71659[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2797
	lea	ecx, DWORD PTR _callback$71658[ebp+56]
	push	ecx
	mov	edx, DWORD PTR _cpuFreq$71674[ebp+4]
	push	edx
	mov	eax, DWORD PTR _cpuFreq$71674[ebp]
	push	eax
	movzx	ecx, BYTE PTR _showFreq$71673[ebp]
	push	ecx
	mov	edx, DWORD PTR _f$71659[ebp]
	push	edx
	call	?PrintTotals@@YGXAAUIBenchPrintCallback@@_N_KABUCTotalBenchRes@@@Z ; PrintTotals
; Line 2798
	mov	eax, DWORD PTR _f$71659[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _f$71659[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@Bench:
; Line 2801
	mov	ecx, DWORD PTR _callback$71658[ebp+100]
	push	ecx
	push	OFFSET $SG71790
	mov	edx, DWORD PTR _f$71659[ebp]
	push	edx
	call	?PrintLeft@@YGXAAUIBenchPrintCallback@@PBDI@Z ; PrintLeft
; Line 2803
	lea	eax, DWORD PTR _callback$71658[ebp+56]
	push	eax
	lea	ecx, DWORD PTR _callback$71658[ebp+24]
	push	ecx
	lea	ecx, DWORD PTR _midRes$71791[ebp]
	call	?SetSum@CTotalBenchRes@@QAEXABU1@0@Z	; CTotalBenchRes::SetSum
; Line 2804
	lea	edx, DWORD PTR _midRes$71791[ebp]
	push	edx
	mov	eax, DWORD PTR _cpuFreq$71674[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _cpuFreq$71674[ebp]
	push	ecx
	movzx	edx, BYTE PTR _showFreq$71673[ebp]
	push	edx
	mov	eax, DWORD PTR _f$71659[ebp]
	push	eax
	call	?PrintTotals@@YGXAAUIBenchPrintCallback@@_N_KABUCTotalBenchRes@@@Z ; PrintTotals
; Line 2805
	mov	ecx, DWORD PTR _f$71659[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR _f$71659[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2807
	jmp	$LN71@Bench
$LN70@Bench:
; Line 2808
	mov	DWORD PTR $T73030[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _methodName$[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _method$[ebp]
	call	??1COneMethodInfo@@QAE@XZ
	mov	eax, DWORD PTR $T73030[ebp]
$LN136@Bench:
; Line 2809
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN187@Bench
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1080				; 00000438H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
	npad	2
$LN187@Bench:
	DD	27					; 0000001bH
	DD	$LN186@Bench
$LN186@Bench:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN158@Bench
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN159@Bench
	DD	-96					; ffffffa0H
	DD	36					; 00000024H
	DD	$LN160@Bench
	DD	-128					; ffffff80H
	DD	16					; 00000010H
	DD	$LN161@Bench
	DD	-148					; ffffff6cH
	DD	12					; 0000000cH
	DD	$LN162@Bench
	DD	-172					; ffffff54H
	DD	12					; 0000000cH
	DD	$LN163@Bench
	DD	-200					; ffffff38H
	DD	12					; 0000000cH
	DD	$LN164@Bench
	DD	-216					; ffffff28H
	DD	8
	DD	$LN165@Bench
	DD	-272					; fffffef0H
	DD	4
	DD	$LN166@Bench
	DD	-300					; fffffed4H
	DD	16					; 00000010H
	DD	$LN167@Bench
	DD	-328					; fffffeb8H
	DD	12					; 0000000cH
	DD	$LN168@Bench
	DD	-344					; fffffea8H
	DD	8
	DD	$LN169@Bench
	DD	-384					; fffffe80H
	DD	12					; 0000000cH
	DD	$LN170@Bench
	DD	-404					; fffffe6cH
	DD	12					; 0000000cH
	DD	$LN171@Bench
	DD	-432					; fffffe50H
	DD	4
	DD	$LN172@Bench
	DD	-480					; fffffe20H
	DD	16					; 00000010H
	DD	$LN173@Bench
	DD	-512					; fffffe00H
	DD	8
	DD	$LN174@Bench
	DD	-668					; fffffd64H
	DD	128					; 00000080H
	DD	$LN175@Bench
	DD	-696					; fffffd48H
	DD	8
	DD	$LN176@Bench
	DD	-732					; fffffd24H
	DD	4
	DD	$LN177@Bench
	DD	-756					; fffffd0cH
	DD	4
	DD	$LN178@Bench
	DD	-772					; fffffcfcH
	DD	8
	DD	$LN179@Bench
	DD	-808					; fffffcd8H
	DD	12					; 0000000cH
	DD	$LN180@Bench
	DD	-840					; fffffcb8H
	DD	16					; 00000010H
	DD	$LN181@Bench
	DD	-888					; fffffc88H
	DD	36					; 00000024H
	DD	$LN182@Bench
	DD	-912					; fffffc70H
	DD	16					; 00000010H
	DD	$LN183@Bench
	DD	-968					; fffffc38H
	DD	32					; 00000020H
	DD	$LN184@Bench
$LN184@Bench:
	DB	109					; 0000006dH
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN183@Bench:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	86					; 00000056H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
$LN182@Bench:
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	50					; 00000032H
	DB	0
$LN181@Bench:
	DB	115					; 00000073H
	DB	0
$LN180@Bench:
	DB	115					; 00000073H
	DB	0
$LN179@Bench:
	DB	99					; 00000063H
	DB	112					; 00000070H
	DB	117					; 00000075H
	DB	70					; 00000046H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	113					; 00000071H
	DB	76					; 0000004cH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
$LN178@Bench:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	86					; 00000056H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	0
$LN177@Bench:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	86					; 00000056H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	0
$LN176@Bench:
	DB	99					; 00000063H
	DB	112					; 00000070H
	DB	117					; 00000075H
	DB	70					; 00000046H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	113					; 00000071H
	DB	0
$LN175@Bench:
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	98					; 00000062H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
$LN174@Bench:
	DB	115					; 00000073H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$LN173@Bench:
	DB	115					; 00000073H
	DB	0
$LN172@Bench:
	DB	115					; 00000073H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	84					; 00000054H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	115					; 00000073H
	DB	0
$LN171@Bench:
	DB	104					; 00000068H
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
$LN170@Bench:
	DB	115					; 00000073H
	DB	0
$LN169@Bench:
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	104					; 00000068H
	DB	73					; 00000049H
	DB	68					; 00000044H
	DB	0
$LN168@Bench:
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	78					; 0000004eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN167@Bench:
	DB	98					; 00000062H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	115					; 00000073H
	DB	0
$LN166@Bench:
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
$LN165@Bench:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN164@Bench:
	DB	115					; 00000073H
	DB	0
$LN163@Bench:
	DB	115					; 00000073H
	DB	0
$LN162@Bench:
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN161@Bench:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	86					; 00000056H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
$LN160@Bench:
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	0
$LN159@Bench:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	84					; 00000054H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN158@Bench:
	DB	110					; 0000006eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	84					; 00000054H
	DB	104					; 00000068H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	83					; 00000053H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	105					; 00000069H
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Bench@@YGJPAUIBenchPrintCallback@@PAUIBenchCallback@@ABV?$CObjectVector@UCProperty@@@@I_N@Z$0:
	lea	ecx, DWORD PTR _method$[ebp]
	jmp	??1COneMethodInfo@@QAE@XZ
__unwindfunclet$?Bench@@YGJPAUIBenchPrintCallback@@PAUIBenchCallback@@ABV?$CObjectVector@UCProperty@@@@I_N@Z$1:
	lea	ecx, DWORD PTR _propVariant$71504[ebp]
	jmp	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
__unwindfunclet$?Bench@@YGJPAUIBenchPrintCallback@@PAUIBenchCallback@@ABV?$CObjectVector@UCProperty@@@@I_N@Z$2:
	lea	ecx, DWORD PTR _name$71505[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?Bench@@YGJPAUIBenchPrintCallback@@PAUIBenchCallback@@ABV?$CObjectVector@UCProperty@@@@I_N@Z$3:
	lea	ecx, DWORD PTR $T73008[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?Bench@@YGJPAUIBenchPrintCallback@@PAUIBenchCallback@@ABV?$CObjectVector@UCProperty@@@@I_N@Z$4:
	lea	ecx, DWORD PTR _s$71516[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?Bench@@YGJPAUIBenchPrintCallback@@PAUIBenchCallback@@ABV?$CObjectVector@UCProperty@@@@I_N@Z$5:
	lea	ecx, DWORD PTR _s$71529[ebp]
	jmp	??1AString@@QAE@XZ			; AString::~AString
__unwindfunclet$?Bench@@YGJPAUIBenchPrintCallback@@PAUIBenchCallback@@ABV?$CObjectVector@UCProperty@@@@I_N@Z$6:
	lea	ecx, DWORD PTR _methodName$[ebp]
	jmp	??1AString@@QAE@XZ			; AString::~AString
__unwindfunclet$?Bench@@YGJPAUIBenchPrintCallback@@PAUIBenchCallback@@ABV?$CObjectVector@UCProperty@@@@I_N@Z$7:
	lea	ecx, DWORD PTR _s$71588[ebp]
	jmp	??1AString@@QAE@XZ			; AString::~AString
__unwindfunclet$?Bench@@YGJPAUIBenchPrintCallback@@PAUIBenchCallback@@ABV?$CObjectVector@UCProperty@@@@I_N@Z$8:
	lea	ecx, DWORD PTR _hProp$71589[ebp]
	jmp	??1AString@@QAE@XZ			; AString::~AString
__unwindfunclet$?Bench@@YGJPAUIBenchPrintCallback@@PAUIBenchCallback@@ABV?$CObjectVector@UCProperty@@@@I_N@Z$9:
	lea	ecx, DWORD PTR _speedTotals$71602[ebp]
	jmp	??1CTempValues@@QAE@XZ			; CTempValues::~CTempValues
__unwindfunclet$?Bench@@YGJPAUIBenchPrintCallback@@PAUIBenchCallback@@ABV?$CObjectVector@UCProperty@@@@I_N@Z$10:
	lea	ecx, DWORD PTR _s$71749[ebp]
	jmp	??1AString@@QAE@XZ			; AString::~AString
__unwindfunclet$?Bench@@YGJPAUIBenchPrintCallback@@PAUIBenchCallback@@ABV?$CObjectVector@UCProperty@@@@I_N@Z$11:
	lea	ecx, DWORD PTR _method2$71770[ebp]
	jmp	??1COneMethodInfo@@QAE@XZ
__unwindfunclet$?Bench@@YGJPAUIBenchPrintCallback@@PAUIBenchCallback@@ABV?$CObjectVector@UCProperty@@@@I_N@Z$12:
	lea	ecx, DWORD PTR _propVariant$71773[ebp]
	jmp	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
__unwindfunclet$?Bench@@YGJPAUIBenchPrintCallback@@PAUIBenchCallback@@ABV?$CObjectVector@UCProperty@@@@I_N@Z$13:
	lea	ecx, DWORD PTR $T73027[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$?Bench@@YGJPAUIBenchPrintCallback@@PAUIBenchCallback@@ABV?$CObjectVector@UCProperty@@@@I_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-1080]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Bench@@YGJPAUIBenchPrintCallback@@PAUIBenchCallback@@ABV?$CObjectVector@UCProperty@@@@I_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Bench@@YGJPAUIBenchPrintCallback@@PAUIBenchCallback@@ABV?$CObjectVector@UCProperty@@@@I_N@Z ENDP ; Bench
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsEmpty@AString@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@AString@@QBE_NXZ PROC				; AString::IsEmpty, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 235
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+4], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@AString@@QBE_NXZ ENDP				; AString::IsEmpty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??BAString@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BAString@@QBEPBDXZ PROC				; AString::operator char const *, COMDAT
; _this$ = ecx
; Line 238
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??BAString@@QBEPBDXZ ENDP				; AString::operator char const *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Ptr@AString@@QBEPBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pos$ = 8						; size = 4
?Ptr@AString@@QBEPBDI@Z PROC				; AString::Ptr, COMDAT
; _this$ = ecx
; Line 240
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	add	eax, DWORD PTR _pos$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?Ptr@AString@@QBEPBDI@Z ENDP				; AString::Ptr
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsEqualTo_Ascii_NoCase@AString@@QBE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
?IsEqualTo_Ascii_NoCase@AString@@QBE_NPBD@Z PROC	; AString::IsEqualTo_Ascii_NoCase, COMDAT
; _this$ = ecx
; Line 314
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	?StringsAreEqualNoCase_Ascii@@YG_NPBD0@Z ; StringsAreEqualNoCase_Ascii
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?IsEqualTo_Ascii_NoCase@AString@@QBE_NPBD@Z ENDP	; AString::IsEqualTo_Ascii_NoCase
_TEXT	ENDS
EXTRN	?FindCharPosInString@@YGHPBDD@Z:PROC		; FindCharPosInString
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Find@AString@@QBEHD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_c$ = 8							; size = 1
?Find@AString@@QBEHD@Z PROC				; AString::Find, COMDAT
; _this$ = ecx
; Line 331
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	?FindCharPosInString@@YGHPBDD@Z		; FindCharPosInString
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Find@AString@@QBEHD@Z ENDP				; AString::Find
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?DeleteFrom@AString@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?DeleteFrom@AString@@QAEXI@Z PROC			; AString::DeleteFrom, COMDAT
; _this$ = ecx
; Line 368
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 369
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN2@DeleteFrom
; Line 371
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _index$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 372
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _index$[ebp]
	mov	BYTE PTR [edx+eax], 0
$LN2@DeleteFrom:
; Line 374
	mov	esp, ebp
	pop	ebp
	ret	4
?DeleteFrom@AString@@QAEXI@Z ENDP			; AString::DeleteFrom
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsEmpty@UString@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@UString@@QBE_NXZ PROC				; UString::IsEmpty, COMDAT
; _this$ = ecx
; Line 473
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+4], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@UString@@QBE_NXZ ENDP				; UString::IsEmpty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Ptr@UString@@QBEPB_WI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pos$ = 8						; size = 4
?Ptr@UString@@QBEPB_WI@Z PROC				; UString::Ptr, COMDAT
; _this$ = ecx
; Line 478
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pos$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	mov	esp, ebp
	pop	ebp
	ret	4
?Ptr@UString@@QBEPB_WI@Z ENDP				; UString::Ptr
_TEXT	ENDS
EXTRN	?MyStringLower_Ascii@@YGXPA_W@Z:PROC		; MyStringLower_Ascii
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?MakeLower_Ascii@UString@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MakeLower_Ascii@UString@@QAEXXZ PROC			; UString::MakeLower_Ascii, COMDAT
; _this$ = ecx
; Line 545
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?MyStringLower_Ascii@@YGXPA_W@Z		; MyStringLower_Ascii
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?MakeLower_Ascii@UString@@QAEXXZ ENDP			; UString::MakeLower_Ascii
_TEXT	ENDS
EXTRN	?StringsAreEqual_Ascii@@YG_NPB_WPBD@Z:PROC	; StringsAreEqual_Ascii
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsEqualTo@UString@@QBE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
?IsEqualTo@UString@@QBE_NPBD@Z PROC			; UString::IsEqualTo, COMDAT
; _this$ = ecx
; Line 547
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	?StringsAreEqual_Ascii@@YG_NPB_WPBD@Z	; StringsAreEqual_Ascii
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?IsEqualTo@UString@@QBE_NPBD@Z ENDP			; UString::IsEqualTo
_TEXT	ENDS
EXTRN	?StringsAreEqualNoCase_Ascii@@YG_NPB_WPBD@Z:PROC ; StringsAreEqualNoCase_Ascii
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsEqualTo_Ascii_NoCase@UString@@QBE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
?IsEqualTo_Ascii_NoCase@UString@@QBE_NPBD@Z PROC	; UString::IsEqualTo_Ascii_NoCase, COMDAT
; _this$ = ecx
; Line 549
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	?StringsAreEqualNoCase_Ascii@@YG_NPB_WPBD@Z ; StringsAreEqualNoCase_Ascii
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?IsEqualTo_Ascii_NoCase@UString@@QBE_NPBD@Z ENDP	; UString::IsEqualTo_Ascii_NoCase
_TEXT	ENDS
PUBLIC	??BUString@@QBEPB_WXZ				; UString::operator wchar_t const *
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??8@YG_NABVUString@@PB_W@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
??8@YG_NABVUString@@PB_W@Z PROC				; operator==, COMDAT
; Line 617
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, esp
	mov	eax, DWORD PTR _s2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s1$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	DWORD PTR __imp__wcscmp
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	neg	eax
	sbb	eax, eax
	add	eax, 1
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
??8@YG_NABVUString@@PB_W@Z ENDP				; operator==
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??BUString@@QBEPB_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BUString@@QBEPB_WXZ PROC				; UString::operator wchar_t const *, COMDAT
; _this$ = ecx
; Line 476
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??BUString@@QBEPB_WXZ ENDP				; UString::operator wchar_t const *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CPropVariant@NCOM@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CPropVariant@NCOM@NWindows@@QAE@XZ PROC		; NWindows::NCOM::CPropVariant::CPropVariant, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\propvariant.h
; Line 47
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 49
	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx], ax
; Line 50
	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+2], dx
; Line 54
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
; Line 55
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CPropVariant@NCOM@NWindows@@QAE@XZ ENDP		; NWindows::NCOM::CPropVariant::CPropVariant
_TEXT	ENDS
EXTRN	?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ:PROC	; NWindows::NCOM::CPropVariant::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CPropVariant@NCOM@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CPropVariant@NCOM@NWindows@@QAE@XZ PROC		; NWindows::NCOM::CPropVariant::~CPropVariant, COMDAT
; _this$ = ecx
; Line 56
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ ; NWindows::NCOM::CPropVariant::Clear
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CPropVariant@NCOM@NWindows@@QAE@XZ ENDP		; NWindows::NCOM::CPropVariant::~CPropVariant
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CPropVariant@NCOM@NWindows@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 4
??0CPropVariant@NCOM@NWindows@@QAE@I@Z PROC		; NWindows::NCOM::CPropVariant::CPropVariant, COMDAT
; _this$ = ecx
; Line 69
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 19					; 00000013H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx], ax
	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+2], dx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _value$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0CPropVariant@NCOM@NWindows@@QAE@I@Z ENDP		; NWindows::NCOM::CPropVariant::CPropVariant
_TEXT	ENDS
EXTRN	?FindProp@CMethodProps@@QBEHK@Z:PROC		; CMethodProps::FindProp
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Get_DicSize@CMethodProps@@QBE_NAAI@Z
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_res$ = 8						; size = 4
?Get_DicSize@CMethodProps@@QBE_NAAI@Z PROC		; CMethodProps::Get_DicSize, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\methodprops.h
; Line 69
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 70
	mov	eax, DWORD PTR _res$[ebp]
	mov	DWORD PTR [eax], 0
; Line 71
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindProp@CMethodProps@@QBEHK@Z		; CMethodProps::FindProp
	mov	DWORD PTR _i$[ebp], eax
; Line 72
	cmp	DWORD PTR _i$[ebp], 0
	jl	SHORT $LN2@Get_DicSiz
; Line 73
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ; CObjectVector<CProp>::operator[]
	movzx	edx, WORD PTR [eax+8]
	cmp	edx, 19					; 00000013H
	jne	SHORT $LN2@Get_DicSiz
; Line 75
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ; CObjectVector<CProp>::operator[]
	mov	ecx, DWORD PTR _res$[ebp]
	mov	edx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx], edx
; Line 76
	mov	al, 1
	jmp	SHORT $LN3@Get_DicSiz
$LN2@Get_DicSiz:
; Line 78
	xor	al, al
$LN3@Get_DicSiz:
; Line 79
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_DicSize@CMethodProps@@QBE_NAAI@Z ENDP		; CMethodProps::Get_DicSize
_TEXT	ENDS
EXTRN	?GetLevel@CMethodProps@@QBEHXZ:PROC		; CMethodProps::GetLevel
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Get_Lzma_DicSize@CMethodProps@@QBEIXZ
_TEXT	SEGMENT
tv138 = -16						; size = 4
_level$ = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
?Get_Lzma_DicSize@CMethodProps@@QBEIXZ PROC		; CMethodProps::Get_Lzma_DicSize, COMDAT
; _this$ = ecx
; Line 93
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 94
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindProp@CMethodProps@@QBEHK@Z		; CMethodProps::FindProp
	mov	DWORD PTR _i$[ebp], eax
; Line 95
	cmp	DWORD PTR _i$[ebp], 0
	jl	SHORT $LN2@Get_Lzma_D
; Line 96
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ; CObjectVector<CProp>::operator[]
	movzx	ecx, WORD PTR [eax+8]
	cmp	ecx, 19					; 00000013H
	jne	SHORT $LN2@Get_Lzma_D
; Line 97
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ; CObjectVector<CProp>::operator[]
	mov	eax, DWORD PTR [eax+16]
	jmp	SHORT $LN3@Get_Lzma_D
$LN2@Get_Lzma_D:
; Line 98
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetLevel@CMethodProps@@QBEHXZ		; CMethodProps::GetLevel
	mov	DWORD PTR _level$[ebp], eax
; Line 99
	cmp	DWORD PTR _level$[ebp], 5
	jg	SHORT $LN5@Get_Lzma_D
	mov	eax, DWORD PTR _level$[ebp]
	lea	ecx, DWORD PTR [eax+eax+14]
	mov	edx, 1
	shl	edx, cl
	mov	DWORD PTR tv138[ebp], edx
	jmp	SHORT $LN6@Get_Lzma_D
$LN5@Get_Lzma_D:
	mov	eax, DWORD PTR _level$[ebp]
	sub	eax, 6
	neg	eax
	sbb	eax, eax
	and	eax, 33554432				; 02000000H
	add	eax, 33554432				; 02000000H
	mov	DWORD PTR tv138[ebp], eax
$LN6@Get_Lzma_D:
	mov	eax, DWORD PTR tv138[ebp]
$LN3@Get_Lzma_D:
; Line 100
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Lzma_DicSize@CMethodProps@@QBEIXZ ENDP		; CMethodProps::Get_Lzma_DicSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
_TEXT	SEGMENT
_kMaxFreq$ = -16					; size = 8
_kMinFreq$ = -8						; size = 8
_complexInSeconds$ = 8					; size = 4
_cpuFreq$ = 12						; size = 8
_complexInCommands$ = 20				; size = 4
?SetComplexCommands@@YGXI_KAA_K@Z PROC			; SetComplexCommands
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\bench.cpp
; Line 63
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 64
	mov	eax, DWORD PTR _complexInCommands$[ebp]
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 4
; Line 65
	mov	DWORD PTR _kMinFreq$[ebp], 30000000	; 01c9c380H
	mov	DWORD PTR _kMinFreq$[ebp+4], 0
; Line 66
	mov	DWORD PTR _kMaxFreq$[ebp], -1474836480	; a817c800H
	mov	DWORD PTR _kMaxFreq$[ebp+4], 4
; Line 67
	cmp	DWORD PTR _cpuFreq$[ebp+4], 0
	ja	SHORT $LN4@SetComplex
	jb	SHORT $LN7@SetComplex
	cmp	DWORD PTR _cpuFreq$[ebp], 30000000	; 01c9c380H
	jae	SHORT $LN4@SetComplex
$LN7@SetComplex:
	mov	DWORD PTR _cpuFreq$[ebp], 30000000	; 01c9c380H
	mov	DWORD PTR _cpuFreq$[ebp+4], 0
$LN4@SetComplex:
; Line 68
	cmp	DWORD PTR _cpuFreq$[ebp+4], 4
	ja	SHORT $LN5@SetComplex
	jb	SHORT $LN8@SetComplex
	cmp	DWORD PTR _cpuFreq$[ebp], -1474836480	; a817c800H
	jae	SHORT $LN5@SetComplex
$LN8@SetComplex:
; Line 70
	cmp	DWORD PTR _complexInSeconds$[ebp], 0
	je	SHORT $LN2@SetComplex
; Line 71
	mov	ecx, DWORD PTR _complexInSeconds$[ebp]
	xor	edx, edx
	mov	eax, DWORD PTR _cpuFreq$[ebp+4]
	push	eax
	mov	eax, DWORD PTR _cpuFreq$[ebp]
	push	eax
	push	edx
	push	ecx
	call	__allmul
	mov	ecx, DWORD PTR _complexInCommands$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
; Line 72
	jmp	SHORT $LN5@SetComplex
$LN2@SetComplex:
; Line 73
	mov	eax, DWORD PTR _cpuFreq$[ebp]
	mov	edx, DWORD PTR _cpuFreq$[ebp+4]
	mov	cl, 2
	call	__aullshr
	mov	ecx, DWORD PTR _complexInCommands$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
$LN5@SetComplex:
; Line 75
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?SetComplexCommands@@YGXI_KAA_K@Z ENDP			; SetComplexCommands
_TEXT	ENDS
PUBLIC	??0CMethodProps@@QAE@XZ				; CMethodProps::CMethodProps
EXTRN	??0UString@@QAE@XZ:PROC				; UString::UString
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0COneMethodInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0COneMethodInfo@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0COneMethodInfo@@QAE@XZ$1
__ehfuncinfo$??0COneMethodInfo@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0COneMethodInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0COneMethodInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0COneMethodInfo@@QAE@XZ PROC				; COneMethodInfo::COneMethodInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0COneMethodInfo@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CMethodProps@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0AString@@QAE@XZ			; AString::AString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0COneMethodInfo@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CMethodProps@@QAE@XZ
__unwindfunclet$??0COneMethodInfo@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1AString@@QAE@XZ			; AString::~AString
__ehhandler$??0COneMethodInfo@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0COneMethodInfo@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0COneMethodInfo@@QAE@XZ ENDP				; COneMethodInfo::COneMethodInfo
PUBLIC	??0CProps@@QAE@XZ				; CProps::CProps
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CMethodProps@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMethodProps@@QAE@XZ PROC				; CMethodProps::CMethodProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CProps@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CMethodProps@@QAE@XZ ENDP				; CMethodProps::CMethodProps
_TEXT	ENDS
PUBLIC	??0?$CObjectVector@UCProp@@@@QAE@XZ		; CObjectVector<CProp>::CObjectVector<CProp>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CProps@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CProps@@QAE@XZ PROC					; CProps::CProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CObjectVector@UCProp@@@@QAE@XZ	; CObjectVector<CProp>::CObjectVector<CProp>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CProps@@QAE@XZ ENDP					; CProps::CProps
_TEXT	ENDS
PUBLIC	?CreateDecoderThread@CEncoderInfo@@QAEJI_NI@Z	; CEncoderInfo::CreateDecoderThread
PUBLIC	?Get_NumThreads@CMethodProps@@QBEHXZ		; CMethodProps::Get_NumThreads
PUBLIC	?GeDecomprCommands@CBenchProps@@QAE_K_K0@Z	; CBenchProps::GeDecomprCommands
PUBLIC	?Wait@CThread@NWindows@@QAEIXZ			; NWindows::CThread::Wait
PUBLIC	??1CBenchProgressStatus@@QAE@XZ			; CBenchProgressStatus::~CBenchProgressStatus
PUBLIC	?CreateEncoderThread@CEncoderInfo@@QAEJXZ	; CEncoderInfo::CreateEncoderThread
PUBLIC	??4?$CMyComPtr@UICompressProgressInfo@@@@QAEPAUICompressProgressInfo@@PAU1@@Z ; CMyComPtr<ICompressProgressInfo>::operator=
PUBLIC	??0CBenchProgressInfo@@QAE@XZ			; CBenchProgressInfo::CBenchProgressInfo
PUBLIC	?GeComprCommands@CBenchProps@@QAE_K_K@Z		; CBenchProps::GeComprCommands
PUBLIC	??0CBenchProgressStatus@@QAE@XZ			; CBenchProgressStatus::CBenchProgressStatus
PUBLIC	??4COneMethodInfo@@QAEAAV0@ABV0@@Z		; COneMethodInfo::operator=
PUBLIC	??7?$CMyComPtr@UICompressFilter@@@@QBE_NXZ	; CMyComPtr<ICompressFilter>::operator!
PUBLIC	??7?$CMyComPtr@UICompressCoder@@@@QBE_NXZ	; CMyComPtr<ICompressCoder>::operator!
PUBLIC	??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@ABV0@@Z ; CMyComPtr<ICompressCoder>::operator=
PUBLIC	??1CBenchEncoders@@QAE@XZ			; CBenchEncoders::~CBenchEncoders
PUBLIC	??1CCreatedCoder@@QAE@XZ			; CCreatedCoder::~CCreatedCoder
PUBLIC	??0CCreatedCoder@@QAE@XZ			; CCreatedCoder::CCreatedCoder
PUBLIC	??0CBenchEncoders@@QAE@I@Z			; CBenchEncoders::CBenchEncoders
PUBLIC	?AddProp_NumThreads@CMethodProps@@QAEXI@Z	; CMethodProps::AddProp_NumThreads
PUBLIC	?Get_Lzma_NumThreads@CMethodProps@@QBEIAA_N@Z	; CMethodProps::Get_Lzma_NumThreads
EXTRN	?CreateCoder@@YGJ_K_NAAV?$CMyComPtr@UICompressFilter@@@@AAUCCreatedCoder@@@Z:PROC ; CreateCoder
EXTRN	?FindMethod@@YG_NABVAString@@AA_KAAI@Z:PROC	; FindMethod
xdata$x	SEGMENT
__ehfuncinfo$?MethodBench@@YGJ_K_NIABVCOneMethodInfo@@IIPAUIBenchPrintCallback@@PAUIBenchCallback@@PAUCBenchProps@@@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?MethodBench@@YGJ_K_NIABVCOneMethodInfo@@IIPAUIBenchPrintCallback@@PAUIBenchCallback@@PAUCBenchProps@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?MethodBench@@YGJ_K_NIABVCOneMethodInfo@@IIPAUIBenchPrintCallback@@PAUIBenchCallback@@PAUCBenchProps@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?MethodBench@@YGJ_K_NIABVCOneMethodInfo@@IIPAUIBenchPrintCallback@@PAUIBenchCallback@@PAUCBenchProps@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?MethodBench@@YGJ_K_NIABVCOneMethodInfo@@IIPAUIBenchPrintCallback@@PAUIBenchCallback@@PAUCBenchProps@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?MethodBench@@YGJ_K_NIABVCOneMethodInfo@@IIPAUIBenchPrintCallback@@PAUIBenchCallback@@PAUCBenchProps@@@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?MethodBench@@YGJ_K_NIABVCOneMethodInfo@@IIPAUIBenchPrintCallback@@PAUIBenchCallback@@PAUCBenchProps@@@Z$3
	DD	01H
	DD	FLAT:__unwindfunclet$?MethodBench@@YGJ_K_NIABVCOneMethodInfo@@IIPAUIBenchPrintCallback@@PAUIBenchCallback@@PAUCBenchProps@@@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?MethodBench@@YGJ_K_NIABVCOneMethodInfo@@IIPAUIBenchPrintCallback@@PAUIBenchCallback@@PAUCBenchProps@@@Z$5
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv452 = -513						; size = 1
tv438 = -512						; size = 4
tv289 = -508						; size = 4
$T73164 = -504						; size = 4
$T73163 = -500						; size = 4
$T73162 = -496						; size = 4
$T73161 = -492						; size = 4
$T73160 = -488						; size = 4
$T73159 = -484						; size = 4
$T73158 = -480						; size = 4
$T73153 = -476						; size = 4
$T73152 = -472						; size = 4
$T73151 = -468						; size = 4
$T73150 = -464						; size = 4
$T73147 = -460						; size = 4
$T73146 = -456						; size = 4
$T73145 = -452						; size = 4
$T73144 = -448						; size = 4
$T73143 = -444						; size = 4
$T73142 = -440						; size = 4
$T73141 = -436						; size = 4
$T73140 = -432						; size = 4
$T73139 = -428						; size = 4
___result__$70524 = -424				; size = 4
___result__$70521 = -420				; size = 4
_encoder$70520 = -416					; size = 4
___result__$70514 = -412				; size = 4
___result__$70511 = -408				; size = 4
_encoder$70508 = -404					; size = 4
_j$70504 = -400						; size = 4
_res$ = -396						; size = 4
___result__$70495 = -392				; size = 4
___result__$70491 = -388				; size = 4
_res$70490 = -384					; size = 4
_j$70486 = -380						; size = 4
_numSubThreads$70484 = -376				; size = 4
_bpi$70482 = -372					; size = 4
_encoder$70480 = -368					; size = 4
_numDecoderThreads$ = -364				; size = 4
___result__$70472 = -360				; size = 4
_encoder$70471 = -356					; size = 4
_info$ = -348						; size = 56
___result__$70464 = -288				; size = 4
___result__$70457 = -284				; size = 4
___result__$70453 = -280				; size = 4
_bpi$70451 = -276					; size = 4
_spec$70445 = -272					; size = 4
_j$70441 = -268						; size = 4
_encoder$70440 = -264					; size = 4
_status$ = -256						; size = 32
___result__$70432 = -220				; size = 4
_encoder$70431 = -216					; size = 4
_rg$ = -208						; size = 8
___result__$70421 = -196				; size = 4
_decoder$70420 = -192					; size = 4
_cod$70418 = -184					; size = 16
_j$70414 = -164						; size = 4
___result__$70408 = -160				; size = 4
_cod$70407 = -152					; size = 16
_encoder$70406 = -132					; size = 4
_i$ = -128						; size = 4
_encoders$ = -124					; size = 4
_encodersSpec$ = -116					; size = 4
_numLzmaThreads$70397 = -108				; size = 4
_fixedNumber$70396 = -97				; size = 1
_numSubDecoderThreads$ = -92				; size = 4
_numEncoderThreads$ = -88				; size = 4
_numStreams$ = -80					; size = 4
_methodId$ = -68					; size = 8
_method$ = -52						; size = 36
__$EHRec$ = -12						; size = 12
_complexInCommands$ = 8					; size = 8
_oldLzmaBenchMode$ = 16					; size = 1
_numThreads$ = 20					; size = 4
_method2$ = 24						; size = 4
_uncompressedDataSize$ = 28				; size = 4
_generateDictBits$ = 32					; size = 4
_printCallback$ = 36					; size = 4
_callback$ = 40						; size = 4
_benchProps$ = 44					; size = 4
?MethodBench@@YGJ_K_NIABVCOneMethodInfo@@IIPAUIBenchPrintCallback@@PAUIBenchCallback@@PAUCBenchProps@@@Z PROC ; MethodBench
; Line 1054
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?MethodBench@@YGJ_K_NIABVCOneMethodInfo@@IIPAUIBenchPrintCallback@@PAUIBenchCallback@@PAUCBenchProps@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 504				; 000001f8H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-516]
	mov	ecx, 126				; 0000007eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 1055
	mov	eax, DWORD PTR _method2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _method$[ebp]
	call	??0COneMethodInfo@@QAE@ABV0@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 1060
	lea	ecx, DWORD PTR _numStreams$[ebp]
	push	ecx
	lea	edx, DWORD PTR _methodId$[ebp]
	push	edx
	lea	eax, DWORD PTR _method$[ebp+12]
	push	eax
	call	?FindMethod@@YG_NABVAString@@AA_KAAI@Z	; FindMethod
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN66@MethodBenc
; Line 1061
	mov	DWORD PTR $T73139[ebp], -2147467263	; 80004001H
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _method$[ebp]
	call	??1COneMethodInfo@@QAE@XZ
	mov	eax, DWORD PTR $T73139[ebp]
	jmp	$LN67@MethodBenc
$LN66@MethodBenc:
; Line 1062
	cmp	DWORD PTR _numStreams$[ebp], 1
	je	SHORT $LN65@MethodBenc
; Line 1063
	mov	DWORD PTR $T73140[ebp], -2147024809	; 80070057H
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _method$[ebp]
	call	??1COneMethodInfo@@QAE@XZ
	mov	eax, DWORD PTR $T73140[ebp]
	jmp	$LN67@MethodBenc
$LN65@MethodBenc:
; Line 1065
	mov	DWORD PTR _numEncoderThreads$[ebp], 1
; Line 1066
	mov	DWORD PTR _numSubDecoderThreads$[ebp], 1
; Line 1069
	mov	edx, DWORD PTR _numThreads$[ebp]
	mov	DWORD PTR _numEncoderThreads$[ebp], edx
; Line 1071
	movzx	eax, BYTE PTR _oldLzmaBenchMode$[ebp]
	test	eax, eax
	je	SHORT $LN64@MethodBenc
	cmp	DWORD PTR _methodId$[ebp], 196865	; 00030101H
	jne	SHORT $LN64@MethodBenc
	cmp	DWORD PTR _methodId$[ebp+4], 0
	jne	SHORT $LN64@MethodBenc
; Line 1074
	lea	ecx, DWORD PTR _fixedNumber$70396[ebp]
	push	ecx
	lea	ecx, DWORD PTR _method$[ebp]
	call	?Get_Lzma_NumThreads@CMethodProps@@QBEIAA_N@Z ; CMethodProps::Get_Lzma_NumThreads
	mov	DWORD PTR _numLzmaThreads$70397[ebp], eax
; Line 1075
	movzx	edx, BYTE PTR _fixedNumber$70396[ebp]
	test	edx, edx
	jne	SHORT $LN63@MethodBenc
	cmp	DWORD PTR _numThreads$[ebp], 1
	jne	SHORT $LN63@MethodBenc
; Line 1076
	push	1
	lea	ecx, DWORD PTR _method$[ebp]
	call	?AddProp_NumThreads@CMethodProps@@QAEXI@Z ; CMethodProps::AddProp_NumThreads
$LN63@MethodBenc:
; Line 1077
	cmp	DWORD PTR _numThreads$[ebp], 1
	jbe	SHORT $LN64@MethodBenc
	cmp	DWORD PTR _numLzmaThreads$70397[ebp], 1
	jbe	SHORT $LN64@MethodBenc
; Line 1079
	mov	eax, DWORD PTR _numThreads$[ebp]
	shr	eax, 1
	mov	DWORD PTR _numEncoderThreads$[ebp], eax
; Line 1080
	mov	DWORD PTR _numSubDecoderThreads$[ebp], 2
$LN64@MethodBenc:
; Line 1085
	mov	ecx, DWORD PTR _numEncoderThreads$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _encodersSpec$[ebp]
	call	??0CBenchEncoders@@QAE@I@Z		; CBenchEncoders::CBenchEncoders
	mov	BYTE PTR __$EHRec$[ebp+8], 1
; Line 1086
	mov	edx, DWORD PTR _encodersSpec$[ebp]
	mov	DWORD PTR _encoders$[ebp], edx
; Line 1089
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN61@MethodBenc
$LN60@MethodBenc:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN61@MethodBenc:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _numEncoderThreads$[ebp]
	jae	$LN59@MethodBenc
; Line 1091
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 280				; 00000118H
	add	edx, DWORD PTR _encoders$[ebp]
	mov	DWORD PTR _encoder$70406[ebp], edx
; Line 1092
	mov	eax, DWORD PTR _i$[ebp]
	neg	eax
	sbb	eax, eax
	not	eax
	and	eax, DWORD PTR _callback$[ebp]
	mov	ecx, DWORD PTR _encoder$70406[ebp]
	mov	DWORD PTR [ecx+180], eax
; Line 1093
	mov	edx, DWORD PTR _encoder$70406[ebp]
	mov	eax, DWORD PTR _printCallback$[ebp]
	mov	DWORD PTR [edx+184], eax
; Line 1096
	lea	ecx, DWORD PTR _cod$70407[ebp]
	call	??0CCreatedCoder@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
; Line 1097
	lea	ecx, DWORD PTR _cod$70407[ebp]
	push	ecx
	mov	edx, DWORD PTR _encoder$70406[ebp]
	add	edx, 16					; 00000010H
	push	edx
	push	1
	mov	eax, DWORD PTR _methodId$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _methodId$[ebp]
	push	ecx
	call	?CreateCoder@@YGJ_K_NAAV?$CMyComPtr@UICompressFilter@@@@AAUCCreatedCoder@@@Z ; CreateCoder
	mov	DWORD PTR ___result__$70408[ebp], eax
	cmp	DWORD PTR ___result__$70408[ebp], 0
	je	SHORT $LN58@MethodBenc
	mov	edx, DWORD PTR ___result__$70408[ebp]
	mov	DWORD PTR $T73141[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _cod$70407[ebp]
	call	??1CCreatedCoder@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _encodersSpec$[ebp]
	call	??1CBenchEncoders@@QAE@XZ		; CBenchEncoders::~CBenchEncoders
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _method$[ebp]
	call	??1COneMethodInfo@@QAE@XZ
	mov	eax, DWORD PTR $T73141[ebp]
	jmp	$LN67@MethodBenc
$LN58@MethodBenc:
; Line 1098
	lea	eax, DWORD PTR _cod$70407[ebp]
	push	eax
	mov	ecx, DWORD PTR _encoder$70406[ebp]
	add	ecx, 12					; 0000000cH
	call	??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@ABV0@@Z ; CMyComPtr<ICompressCoder>::operator=
; Line 1099
	mov	ecx, DWORD PTR _encoder$70406[ebp]
	add	ecx, 12					; 0000000cH
	call	??7?$CMyComPtr@UICompressCoder@@@@QBE_NXZ ; CMyComPtr<ICompressCoder>::operator!
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN57@MethodBenc
	mov	ecx, DWORD PTR _encoder$70406[ebp]
	add	ecx, 16					; 00000010H
	call	??7?$CMyComPtr@UICompressFilter@@@@QBE_NXZ ; CMyComPtr<ICompressFilter>::operator!
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN57@MethodBenc
; Line 1100
	mov	DWORD PTR $T73142[ebp], -2147467263	; 80004001H
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _cod$70407[ebp]
	call	??1CCreatedCoder@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _encodersSpec$[ebp]
	call	??1CBenchEncoders@@QAE@XZ		; CBenchEncoders::~CBenchEncoders
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _method$[ebp]
	call	??1COneMethodInfo@@QAE@XZ
	mov	eax, DWORD PTR $T73142[ebp]
	jmp	$LN67@MethodBenc
$LN57@MethodBenc:
; Line 1101
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _cod$70407[ebp]
	call	??1CCreatedCoder@@QAE@XZ
; Line 1103
	mov	eax, DWORD PTR _benchProps$[ebp]
	mov	ecx, 30					; 0000001eH
	cmp	ecx, DWORD PTR [eax+4]
	sbb	edx, edx
	neg	edx
	mov	eax, DWORD PTR _encoder$70406[ebp]
	mov	BYTE PTR [eax+116], dl
; Line 1104
	mov	ecx, DWORD PTR _benchProps$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _benchProps$[ebp]
	add	edx, DWORD PTR [eax+12]
	mov	ecx, 30					; 0000001eH
	cmp	ecx, edx
	sbb	edx, edx
	neg	edx
	mov	eax, DWORD PTR _encoder$70406[ebp]
	mov	BYTE PTR [eax+117], dl
; Line 1106
	push	16					; 00000010H
	push	0
	mov	ecx, DWORD PTR _encoder$70406[ebp]
	add	ecx, 84					; 00000054H
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 1107
	push	32					; 00000020H
	push	0
	mov	edx, DWORD PTR _encoder$70406[ebp]
	add	edx, 52					; 00000034H
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 1108
	push	16					; 00000010H
	push	0
	mov	eax, DWORD PTR _encoder$70406[ebp]
	add	eax, 100				; 00000064H
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 1110
	mov	DWORD PTR _j$70414[ebp], 0
	jmp	SHORT $LN56@MethodBenc
$LN55@MethodBenc:
	mov	ecx, DWORD PTR _j$70414[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$70414[ebp], ecx
$LN56@MethodBenc:
	mov	edx, DWORD PTR _j$70414[ebp]
	cmp	edx, DWORD PTR _numSubDecoderThreads$[ebp]
	jae	$LN54@MethodBenc
; Line 1112
	lea	ecx, DWORD PTR _cod$70418[ebp]
	call	??0CCreatedCoder@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
; Line 1113
	mov	eax, DWORD PTR _j$70414[ebp]
	mov	ecx, DWORD PTR _encoder$70406[ebp]
	lea	edx, DWORD PTR [ecx+eax*4+152]
	mov	DWORD PTR _decoder$70420[ebp], edx
; Line 1114
	lea	eax, DWORD PTR _cod$70418[ebp]
	push	eax
	mov	ecx, DWORD PTR _encoder$70406[ebp]
	add	ecx, 160				; 000000a0H
	push	ecx
	push	0
	mov	edx, DWORD PTR _methodId$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _methodId$[ebp]
	push	eax
	call	?CreateCoder@@YGJ_K_NAAV?$CMyComPtr@UICompressFilter@@@@AAUCCreatedCoder@@@Z ; CreateCoder
	mov	DWORD PTR ___result__$70421[ebp], eax
	cmp	DWORD PTR ___result__$70421[ebp], 0
	je	SHORT $LN53@MethodBenc
	mov	ecx, DWORD PTR ___result__$70421[ebp]
	mov	DWORD PTR $T73143[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _cod$70418[ebp]
	call	??1CCreatedCoder@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _encodersSpec$[ebp]
	call	??1CBenchEncoders@@QAE@XZ		; CBenchEncoders::~CBenchEncoders
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _method$[ebp]
	call	??1COneMethodInfo@@QAE@XZ
	mov	eax, DWORD PTR $T73143[ebp]
	jmp	$LN67@MethodBenc
$LN53@MethodBenc:
; Line 1115
	lea	edx, DWORD PTR _cod$70418[ebp]
	push	edx
	mov	ecx, DWORD PTR _decoder$70420[ebp]
	call	??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@ABV0@@Z ; CMyComPtr<ICompressCoder>::operator=
; Line 1116
	mov	ecx, DWORD PTR _encoder$70406[ebp]
	add	ecx, 160				; 000000a0H
	call	??7?$CMyComPtr@UICompressFilter@@@@QBE_NXZ ; CMyComPtr<ICompressFilter>::operator!
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN52@MethodBenc
	mov	ecx, DWORD PTR _decoder$70420[ebp]
	call	??7?$CMyComPtr@UICompressCoder@@@@QBE_NXZ ; CMyComPtr<ICompressCoder>::operator!
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN52@MethodBenc
; Line 1117
	mov	DWORD PTR $T73144[ebp], -2147467263	; 80004001H
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _cod$70418[ebp]
	call	??1CCreatedCoder@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _encodersSpec$[ebp]
	call	??1CBenchEncoders@@QAE@XZ		; CBenchEncoders::~CBenchEncoders
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _method$[ebp]
	call	??1COneMethodInfo@@QAE@XZ
	mov	eax, DWORD PTR $T73144[ebp]
	jmp	$LN67@MethodBenc
$LN52@MethodBenc:
; Line 1118
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _cod$70418[ebp]
	call	??1CCreatedCoder@@QAE@XZ
	jmp	$LN55@MethodBenc
$LN54@MethodBenc:
; Line 1119
	jmp	$LN60@MethodBenc
$LN59@MethodBenc:
; Line 1121
	lea	ecx, DWORD PTR _rg$[ebp]
	call	??0CBaseRandomGenerator@@QAE@XZ		; CBaseRandomGenerator::CBaseRandomGenerator
; Line 1122
	lea	ecx, DWORD PTR _rg$[ebp]
	call	?Init@CBaseRandomGenerator@@QAEXXZ	; CBaseRandomGenerator::Init
; Line 1123
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN51@MethodBenc
$LN50@MethodBenc:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN51@MethodBenc:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _numEncoderThreads$[ebp]
	jae	$LN49@MethodBenc
; Line 1125
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 280				; 00000118H
	add	ecx, DWORD PTR _encoders$[ebp]
	mov	DWORD PTR _encoder$70431[ebp], ecx
; Line 1126
	lea	edx, DWORD PTR _method$[ebp]
	push	edx
	mov	ecx, DWORD PTR _encoder$70431[ebp]
	add	ecx, 236				; 000000ecH
	call	??4COneMethodInfo@@QAEAAV0@ABV0@@Z
; Line 1127
	mov	eax, DWORD PTR _encoder$70431[ebp]
	mov	ecx, DWORD PTR _uncompressedDataSize$[ebp]
	mov	DWORD PTR [eax+272], ecx
; Line 1128
	lea	edx, DWORD PTR _rg$[ebp]
	push	edx
	mov	eax, DWORD PTR _generateDictBits$[ebp]
	push	eax
	mov	ecx, DWORD PTR _uncompressedDataSize$[ebp]
	push	ecx
	lea	edx, DWORD PTR _method$[ebp]
	push	edx
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 280				; 00000118H
	add	ecx, DWORD PTR _encoders$[ebp]
	call	?Init@CEncoderInfo@@QAEJABVCOneMethodInfo@@IIPAVCBaseRandomGenerator@@@Z ; CEncoderInfo::Init
	mov	DWORD PTR ___result__$70432[ebp], eax
	cmp	DWORD PTR ___result__$70432[ebp], 0
	je	SHORT $LN48@MethodBenc
	mov	eax, DWORD PTR ___result__$70432[ebp]
	mov	DWORD PTR $T73145[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _encodersSpec$[ebp]
	call	??1CBenchEncoders@@QAE@XZ		; CBenchEncoders::~CBenchEncoders
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _method$[ebp]
	call	??1COneMethodInfo@@QAE@XZ
	mov	eax, DWORD PTR $T73145[ebp]
	jmp	$LN67@MethodBenc
$LN48@MethodBenc:
; Line 1129
	jmp	$LN50@MethodBenc
$LN49@MethodBenc:
; Line 1131
	lea	ecx, DWORD PTR _status$[ebp]
	call	??0CBenchProgressStatus@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
; Line 1132
	mov	DWORD PTR _status$[ebp+24], 0
; Line 1133
	mov	BYTE PTR _status$[ebp+28], 1
; Line 1135
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN47@MethodBenc
$LN46@MethodBenc:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN47@MethodBenc:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _numEncoderThreads$[ebp]
	jae	$LN45@MethodBenc
; Line 1137
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 280				; 00000118H
	add	eax, DWORD PTR _encoders$[ebp]
	mov	DWORD PTR _encoder$70440[ebp], eax
; Line 1138
	mov	ecx, DWORD PTR _complexInCommands$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _complexInCommands$[ebp]
	push	edx
	mov	eax, DWORD PTR _uncompressedDataSize$[ebp]
	xor	ecx, ecx
	push	ecx
	push	eax
	mov	ecx, DWORD PTR _benchProps$[ebp]
	call	?GeComprCommands@CBenchProps@@QAE_K_K@Z	; CBenchProps::GeComprCommands
	push	edx
	push	eax
	call	?GetNumIterations@@YG_K_K0@Z		; GetNumIterations
	mov	ecx, DWORD PTR _encoder$70440[ebp]
	mov	DWORD PTR [ecx+40], eax
	mov	DWORD PTR [ecx+44], edx
; Line 1140
	mov	DWORD PTR _j$70441[ebp], 0
	jmp	SHORT $LN44@MethodBenc
$LN43@MethodBenc:
	mov	edx, DWORD PTR _j$70441[ebp]
	add	edx, 1
	mov	DWORD PTR _j$70441[ebp], edx
$LN44@MethodBenc:
	cmp	DWORD PTR _j$70441[ebp], 2
	jge	$LN42@MethodBenc
; Line 1142
	push	88					; 00000058H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T73147[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	cmp	DWORD PTR $T73147[ebp], 0
	je	SHORT $LN69@MethodBenc
	mov	ecx, DWORD PTR $T73147[ebp]
	call	??0CBenchProgressInfo@@QAE@XZ		; CBenchProgressInfo::CBenchProgressInfo
	mov	DWORD PTR tv289[ebp], eax
	jmp	SHORT $LN70@MethodBenc
$LN69@MethodBenc:
	mov	DWORD PTR tv289[ebp], 0
$LN70@MethodBenc:
	mov	eax, DWORD PTR tv289[ebp]
	mov	DWORD PTR $T73146[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR $T73146[ebp]
	mov	DWORD PTR _spec$70445[ebp], ecx
; Line 1143
	mov	edx, DWORD PTR _j$70441[ebp]
	mov	eax, DWORD PTR _encoder$70440[ebp]
	mov	ecx, DWORD PTR _spec$70445[ebp]
	mov	DWORD PTR [eax+edx*4+20], ecx
; Line 1144
	mov	edx, DWORD PTR _spec$70445[ebp]
	push	edx
	mov	eax, DWORD PTR _j$70441[ebp]
	mov	ecx, DWORD PTR _encoder$70440[ebp]
	lea	ecx, DWORD PTR [ecx+eax*4+28]
	call	??4?$CMyComPtr@UICompressProgressInfo@@@@QAEPAUICompressProgressInfo@@PAU1@@Z ; CMyComPtr<ICompressProgressInfo>::operator=
; Line 1145
	mov	edx, DWORD PTR _spec$70445[ebp]
	lea	eax, DWORD PTR _status$[ebp]
	mov	DWORD PTR [edx+72], eax
; Line 1146
	jmp	$LN43@MethodBenc
$LN42@MethodBenc:
; Line 1147
	cmp	DWORD PTR _i$[ebp], 0
	jne	SHORT $LN41@MethodBenc
; Line 1149
	mov	ecx, DWORD PTR _encoder$70440[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _bpi$70451[ebp], edx
; Line 1150
	mov	eax, DWORD PTR _bpi$70451[ebp]
	mov	ecx, DWORD PTR _callback$[ebp]
	mov	DWORD PTR [eax+80], ecx
; Line 1151
	mov	edx, DWORD PTR _numEncoderThreads$[ebp]
	xor	eax, eax
	mov	ecx, DWORD PTR _bpi$70451[ebp]
	mov	DWORD PTR [ecx+56], edx
	mov	DWORD PTR [ecx+60], eax
; Line 1152
	mov	ecx, DWORD PTR _bpi$70451[ebp]
	add	ecx, 8
	call	?SetStartTime@CBenchInfoCalc@@QAEXXZ	; CBenchInfoCalc::SetStartTime
$LN41@MethodBenc:
; Line 1156
	cmp	DWORD PTR _numEncoderThreads$[ebp], 1
	jbe	SHORT $LN40@MethodBenc
; Line 1159
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 4
	imul	edx, 21					; 00000015H
	and	edx, 2047				; 000007ffH
	mov	eax, DWORD PTR _encoder$70440[ebp]
	mov	DWORD PTR [eax+48], edx
; Line 1162
	mov	ecx, DWORD PTR _encoder$70440[ebp]
	call	?CreateEncoderThread@CEncoderInfo@@QAEJXZ ; CEncoderInfo::CreateEncoderThread
	mov	DWORD PTR ___result__$70453[ebp], eax
	cmp	DWORD PTR ___result__$70453[ebp], 0
	je	SHORT $LN39@MethodBenc
	mov	ecx, DWORD PTR ___result__$70453[ebp]
	mov	DWORD PTR $T73150[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _status$[ebp]
	call	??1CBenchProgressStatus@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _encodersSpec$[ebp]
	call	??1CBenchEncoders@@QAE@XZ		; CBenchEncoders::~CBenchEncoders
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _method$[ebp]
	call	??1COneMethodInfo@@QAE@XZ
	mov	eax, DWORD PTR $T73150[ebp]
	jmp	$LN67@MethodBenc
$LN39@MethodBenc:
; Line 1164
	jmp	SHORT $LN38@MethodBenc
$LN40@MethodBenc:
; Line 1167
	mov	ecx, DWORD PTR _encoder$70440[ebp]
	call	?Encode@CEncoderInfo@@QAEJXZ		; CEncoderInfo::Encode
	mov	DWORD PTR ___result__$70457[ebp], eax
	cmp	DWORD PTR ___result__$70457[ebp], 0
	je	SHORT $LN38@MethodBenc
	mov	edx, DWORD PTR ___result__$70457[ebp]
	mov	DWORD PTR $T73151[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _status$[ebp]
	call	??1CBenchProgressStatus@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _encodersSpec$[ebp]
	call	??1CBenchEncoders@@QAE@XZ		; CBenchEncoders::~CBenchEncoders
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _method$[ebp]
	call	??1COneMethodInfo@@QAE@XZ
	mov	eax, DWORD PTR $T73151[ebp]
	jmp	$LN67@MethodBenc
$LN38@MethodBenc:
; Line 1169
	jmp	$LN46@MethodBenc
$LN45@MethodBenc:
; Line 1171
	cmp	DWORD PTR _numEncoderThreads$[ebp], 1
	jbe	SHORT $LN36@MethodBenc
; Line 1172
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN35@MethodBenc
$LN34@MethodBenc:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN35@MethodBenc:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _numEncoderThreads$[ebp]
	jae	SHORT $LN36@MethodBenc
; Line 1173
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 280				; 00000118H
	add	ecx, DWORD PTR _encoders$[ebp]
	call	?Wait@CThread@NWindows@@QAEIXZ		; NWindows::CThread::Wait
	jmp	SHORT $LN34@MethodBenc
$LN36@MethodBenc:
; Line 1176
	mov	edx, DWORD PTR _status$[ebp+24]
	mov	DWORD PTR ___result__$70464[ebp], edx
	cmp	DWORD PTR ___result__$70464[ebp], 0
	je	SHORT $LN32@MethodBenc
	mov	eax, DWORD PTR ___result__$70464[ebp]
	mov	DWORD PTR $T73152[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _status$[ebp]
	call	??1CBenchProgressStatus@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _encodersSpec$[ebp]
	call	??1CBenchEncoders@@QAE@XZ		; CBenchEncoders::~CBenchEncoders
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _method$[ebp]
	call	??1COneMethodInfo@@QAE@XZ
	mov	eax, DWORD PTR $T73152[ebp]
	jmp	$LN67@MethodBenc
$LN32@MethodBenc:
; Line 1178
	lea	ecx, DWORD PTR _info$[ebp]
	call	??0CBenchInfo@@QAE@XZ			; CBenchInfo::CBenchInfo
; Line 1180
	lea	ecx, DWORD PTR _info$[ebp]
	push	ecx
	mov	edx, DWORD PTR _encoders$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	add	ecx, 8
	call	?SetFinishTime@CBenchInfoCalc@@QAEXAAUCBenchInfo@@@Z ; CBenchInfoCalc::SetFinishTime
; Line 1181
	mov	DWORD PTR _info$[ebp+32], 0
	mov	DWORD PTR _info$[ebp+36], 0
; Line 1182
	mov	DWORD PTR _info$[ebp+40], 0
	mov	DWORD PTR _info$[ebp+44], 0
; Line 1183
	mov	eax, DWORD PTR _encoders$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _info$[ebp+48], ecx
	mov	edx, DWORD PTR [eax+44]
	mov	DWORD PTR _info$[ebp+52], edx
; Line 1184
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN31@MethodBenc
$LN30@MethodBenc:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN31@MethodBenc:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _numEncoderThreads$[ebp]
	jae	SHORT $LN29@MethodBenc
; Line 1186
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 280				; 00000118H
	add	edx, DWORD PTR _encoders$[ebp]
	mov	DWORD PTR _encoder$70471[ebp], edx
; Line 1187
	mov	eax, DWORD PTR _encoder$70471[ebp]
	mov	ecx, DWORD PTR [eax+192]
	xor	edx, edx
	add	ecx, DWORD PTR _info$[ebp+32]
	adc	edx, DWORD PTR _info$[ebp+36]
	mov	DWORD PTR _info$[ebp+32], ecx
	mov	DWORD PTR _info$[ebp+36], edx
; Line 1188
	mov	eax, DWORD PTR _encoder$70471[ebp]
	mov	ecx, DWORD PTR [eax+196]
	xor	edx, edx
	add	ecx, DWORD PTR _info$[ebp+40]
	adc	edx, DWORD PTR _info$[ebp+44]
	mov	DWORD PTR _info$[ebp+40], ecx
	mov	DWORD PTR _info$[ebp+44], edx
; Line 1189
	jmp	SHORT $LN30@MethodBenc
$LN29@MethodBenc:
; Line 1190
	mov	esi, esp
	push	1
	lea	eax, DWORD PTR _info$[ebp]
	push	eax
	mov	ecx, DWORD PTR _callback$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _callback$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$70472[ebp], eax
	cmp	DWORD PTR ___result__$70472[ebp], 0
	je	SHORT $LN28@MethodBenc
	mov	ecx, DWORD PTR ___result__$70472[ebp]
	mov	DWORD PTR $T73153[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _status$[ebp]
	call	??1CBenchProgressStatus@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _encodersSpec$[ebp]
	call	??1CBenchEncoders@@QAE@XZ		; CBenchEncoders::~CBenchEncoders
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _method$[ebp]
	call	??1COneMethodInfo@@QAE@XZ
	mov	eax, DWORD PTR $T73153[ebp]
	jmp	$LN67@MethodBenc
$LN28@MethodBenc:
; Line 1193
	mov	DWORD PTR _status$[ebp+24], 0
; Line 1194
	mov	BYTE PTR _status$[ebp+28], 0
; Line 1196
	mov	edx, DWORD PTR _numEncoderThreads$[ebp]
	imul	edx, DWORD PTR _numSubDecoderThreads$[ebp]
	mov	DWORD PTR _numDecoderThreads$[ebp], edx
; Line 1197
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN27@MethodBenc
$LN26@MethodBenc:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN27@MethodBenc:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _numEncoderThreads$[ebp]
	jae	$LN25@MethodBenc
; Line 1199
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 280				; 00000118H
	add	edx, DWORD PTR _encoders$[ebp]
	mov	DWORD PTR _encoder$70480[ebp], edx
; Line 1201
	cmp	DWORD PTR _i$[ebp], 0
	jne	$LN24@MethodBenc
; Line 1203
	mov	eax, DWORD PTR _complexInCommands$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _complexInCommands$[ebp]
	push	ecx
	mov	edx, DWORD PTR _encoder$70480[ebp]
	mov	eax, DWORD PTR [edx+192]
	xor	ecx, ecx
	push	ecx
	push	eax
	mov	edx, DWORD PTR _encoder$70480[ebp]
	mov	eax, DWORD PTR [edx+196]
	xor	ecx, ecx
	push	ecx
	push	eax
	mov	ecx, DWORD PTR _benchProps$[ebp]
	call	?GeDecomprCommands@CBenchProps@@QAE_K_K0@Z ; CBenchProps::GeDecomprCommands
	push	edx
	push	eax
	call	?GetNumIterations@@YG_K_K0@Z		; GetNumIterations
	mov	ecx, DWORD PTR _encoder$70480[ebp]
	mov	DWORD PTR [ecx+40], eax
	mov	DWORD PTR [ecx+44], edx
; Line 1204
	mov	edx, DWORD PTR _encoder$70480[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _bpi$70482[ebp], eax
; Line 1205
	mov	ecx, DWORD PTR _bpi$70482[ebp]
	mov	edx, DWORD PTR _callback$[ebp]
	mov	DWORD PTR [ecx+80], edx
; Line 1206
	mov	eax, DWORD PTR _numDecoderThreads$[ebp]
	xor	ecx, ecx
	mov	edx, DWORD PTR _bpi$70482[ebp]
	mov	DWORD PTR [edx+56], eax
	mov	DWORD PTR [edx+60], ecx
; Line 1207
	mov	ecx, DWORD PTR _bpi$70482[ebp]
	add	ecx, 8
	call	?SetStartTime@CBenchInfoCalc@@QAEXXZ	; CBenchInfoCalc::SetStartTime
; Line 1209
	jmp	SHORT $LN23@MethodBenc
$LN24@MethodBenc:
; Line 1210
	mov	eax, DWORD PTR _encoder$70480[ebp]
	mov	ecx, DWORD PTR _encoders$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR [eax+40], edx
	mov	ecx, DWORD PTR [ecx+44]
	mov	DWORD PTR [eax+44], ecx
$LN23@MethodBenc:
; Line 1214
	lea	ecx, DWORD PTR _method$[ebp]
	call	?Get_NumThreads@CMethodProps@@QBEHXZ	; CMethodProps::Get_NumThreads
	mov	DWORD PTR _numSubThreads$70484[ebp], eax
; Line 1215
	cmp	DWORD PTR _numSubThreads$70484[ebp], 0
	jg	SHORT $LN71@MethodBenc
	mov	DWORD PTR tv438[ebp], 1
	jmp	SHORT $LN72@MethodBenc
$LN71@MethodBenc:
	mov	edx, DWORD PTR _numSubThreads$70484[ebp]
	mov	DWORD PTR tv438[ebp], edx
$LN72@MethodBenc:
	mov	eax, DWORD PTR _encoder$70480[ebp]
	mov	ecx, DWORD PTR tv438[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 1217
	cmp	DWORD PTR _numDecoderThreads$[ebp], 1
	jbe	$LN22@MethodBenc
; Line 1219
	mov	DWORD PTR _j$70486[ebp], 0
	jmp	SHORT $LN21@MethodBenc
$LN20@MethodBenc:
	mov	edx, DWORD PTR _j$70486[ebp]
	add	edx, 1
	mov	DWORD PTR _j$70486[ebp], edx
$LN21@MethodBenc:
	mov	eax, DWORD PTR _j$70486[ebp]
	cmp	eax, DWORD PTR _numSubDecoderThreads$[ebp]
	jae	$LN19@MethodBenc
; Line 1225
	cmp	DWORD PTR _i$[ebp], 0
	jne	SHORT $LN73@MethodBenc
	cmp	DWORD PTR _j$70486[ebp], 0
	jne	SHORT $LN73@MethodBenc
	mov	BYTE PTR tv452[ebp], 1
	jmp	SHORT $LN74@MethodBenc
$LN73@MethodBenc:
	mov	BYTE PTR tv452[ebp], 0
$LN74@MethodBenc:
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, DWORD PTR _numSubDecoderThreads$[ebp]
	add	ecx, DWORD PTR _j$70486[ebp]
	shl	ecx, 4
	imul	ecx, 21					; 00000015H
	and	ecx, 2047				; 000007ffH
	push	ecx
	movzx	edx, BYTE PTR tv452[ebp]
	push	edx
	mov	eax, DWORD PTR _j$70486[ebp]
	push	eax
	mov	ecx, DWORD PTR _encoder$70480[ebp]
	call	?CreateDecoderThread@CEncoderInfo@@QAEJI_NI@Z ; CEncoderInfo::CreateDecoderThread
	mov	DWORD PTR _res$70490[ebp], eax
; Line 1226
	mov	ecx, DWORD PTR _res$70490[ebp]
	mov	DWORD PTR ___result__$70491[ebp], ecx
	cmp	DWORD PTR ___result__$70491[ebp], 0
	je	SHORT $LN18@MethodBenc
	mov	edx, DWORD PTR ___result__$70491[ebp]
	mov	DWORD PTR $T73158[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _status$[ebp]
	call	??1CBenchProgressStatus@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _encodersSpec$[ebp]
	call	??1CBenchEncoders@@QAE@XZ		; CBenchEncoders::~CBenchEncoders
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _method$[ebp]
	call	??1COneMethodInfo@@QAE@XZ
	mov	eax, DWORD PTR $T73158[ebp]
	jmp	$LN67@MethodBenc
$LN18@MethodBenc:
; Line 1227
	jmp	$LN20@MethodBenc
$LN19@MethodBenc:
; Line 1229
	jmp	SHORT $LN17@MethodBenc
$LN22@MethodBenc:
; Line 1232
	push	0
	mov	ecx, DWORD PTR _encoder$70480[ebp]
	call	?Decode@CEncoderInfo@@QAEJI@Z		; CEncoderInfo::Decode
	mov	DWORD PTR ___result__$70495[ebp], eax
	cmp	DWORD PTR ___result__$70495[ebp], 0
	je	SHORT $LN17@MethodBenc
	mov	eax, DWORD PTR ___result__$70495[ebp]
	mov	DWORD PTR $T73159[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _status$[ebp]
	call	??1CBenchProgressStatus@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _encodersSpec$[ebp]
	call	??1CBenchEncoders@@QAE@XZ		; CBenchEncoders::~CBenchEncoders
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _method$[ebp]
	call	??1COneMethodInfo@@QAE@XZ
	mov	eax, DWORD PTR $T73159[ebp]
	jmp	$LN67@MethodBenc
$LN17@MethodBenc:
; Line 1234
	jmp	$LN26@MethodBenc
$LN25@MethodBenc:
; Line 1237
	mov	DWORD PTR _res$[ebp], 0
; Line 1238
	cmp	DWORD PTR _numDecoderThreads$[ebp], 1
	jbe	$LN15@MethodBenc
; Line 1239
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN14@MethodBenc
$LN13@MethodBenc:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN14@MethodBenc:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _numEncoderThreads$[ebp]
	jae	$LN15@MethodBenc
; Line 1240
	mov	DWORD PTR _j$70504[ebp], 0
	jmp	SHORT $LN11@MethodBenc
$LN10@MethodBenc:
	mov	eax, DWORD PTR _j$70504[ebp]
	add	eax, 1
	mov	DWORD PTR _j$70504[ebp], eax
$LN11@MethodBenc:
	mov	ecx, DWORD PTR _j$70504[ebp]
	cmp	ecx, DWORD PTR _numSubDecoderThreads$[ebp]
	jae	SHORT $LN9@MethodBenc
; Line 1242
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 280				; 00000118H
	add	edx, DWORD PTR _encoders$[ebp]
	mov	DWORD PTR _encoder$70508[ebp], edx
; Line 1243
	mov	eax, DWORD PTR _j$70504[ebp]
	mov	ecx, DWORD PTR _encoder$70508[ebp]
	lea	ecx, DWORD PTR [ecx+eax*4]
	call	?Wait@CThread@NWindows@@QAEIXZ		; NWindows::CThread::Wait
; Line 1244
	mov	edx, DWORD PTR _j$70504[ebp]
	mov	eax, DWORD PTR _encoder$70508[ebp]
	cmp	DWORD PTR [eax+edx*4+164], 0
	je	SHORT $LN8@MethodBenc
; Line 1245
	mov	ecx, DWORD PTR _j$70504[ebp]
	mov	edx, DWORD PTR _encoder$70508[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+164]
	mov	DWORD PTR _res$[ebp], eax
$LN8@MethodBenc:
; Line 1246
	jmp	SHORT $LN10@MethodBenc
$LN9@MethodBenc:
	jmp	$LN13@MethodBenc
$LN15@MethodBenc:
; Line 1247
	mov	ecx, DWORD PTR _res$[ebp]
	mov	DWORD PTR ___result__$70511[ebp], ecx
	cmp	DWORD PTR ___result__$70511[ebp], 0
	je	SHORT $LN7@MethodBenc
	mov	edx, DWORD PTR ___result__$70511[ebp]
	mov	DWORD PTR $T73160[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _status$[ebp]
	call	??1CBenchProgressStatus@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _encodersSpec$[ebp]
	call	??1CBenchEncoders@@QAE@XZ		; CBenchEncoders::~CBenchEncoders
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _method$[ebp]
	call	??1COneMethodInfo@@QAE@XZ
	mov	eax, DWORD PTR $T73160[ebp]
	jmp	$LN67@MethodBenc
$LN7@MethodBenc:
; Line 1250
	mov	eax, DWORD PTR _status$[ebp+24]
	mov	DWORD PTR ___result__$70514[ebp], eax
	cmp	DWORD PTR ___result__$70514[ebp], 0
	je	SHORT $LN6@MethodBenc
	mov	ecx, DWORD PTR ___result__$70514[ebp]
	mov	DWORD PTR $T73161[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _status$[ebp]
	call	??1CBenchProgressStatus@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _encodersSpec$[ebp]
	call	??1CBenchEncoders@@QAE@XZ		; CBenchEncoders::~CBenchEncoders
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _method$[ebp]
	call	??1COneMethodInfo@@QAE@XZ
	mov	eax, DWORD PTR $T73161[ebp]
	jmp	$LN67@MethodBenc
$LN6@MethodBenc:
; Line 1251
	lea	edx, DWORD PTR _info$[ebp]
	push	edx
	mov	eax, DWORD PTR _encoders$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 8
	call	?SetFinishTime@CBenchInfoCalc@@QAEXAAUCBenchInfo@@@Z ; CBenchInfoCalc::SetFinishTime
; Line 1266
	mov	DWORD PTR _info$[ebp+32], 0
	mov	DWORD PTR _info$[ebp+36], 0
; Line 1267
	mov	DWORD PTR _info$[ebp+40], 0
	mov	DWORD PTR _info$[ebp+44], 0
; Line 1268
	mov	ecx, DWORD PTR _numSubDecoderThreads$[ebp]
	xor	edx, edx
	mov	eax, DWORD PTR _encoders$[ebp]
	mov	esi, DWORD PTR [eax+44]
	push	esi
	mov	eax, DWORD PTR [eax+40]
	push	eax
	push	edx
	push	ecx
	call	__allmul
	mov	DWORD PTR _info$[ebp+48], eax
	mov	DWORD PTR _info$[ebp+52], edx
; Line 1269
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@MethodBenc
$LN4@MethodBenc:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN5@MethodBenc:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _numEncoderThreads$[ebp]
	jae	SHORT $LN3@MethodBenc
; Line 1271
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 280				; 00000118H
	add	eax, DWORD PTR _encoders$[ebp]
	mov	DWORD PTR _encoder$70520[ebp], eax
; Line 1272
	mov	ecx, DWORD PTR _encoder$70520[ebp]
	mov	edx, DWORD PTR [ecx+192]
	xor	eax, eax
	add	edx, DWORD PTR _info$[ebp+32]
	adc	eax, DWORD PTR _info$[ebp+36]
	mov	DWORD PTR _info$[ebp+32], edx
	mov	DWORD PTR _info$[ebp+36], eax
; Line 1273
	mov	ecx, DWORD PTR _encoder$70520[ebp]
	mov	edx, DWORD PTR [ecx+196]
	xor	eax, eax
	add	edx, DWORD PTR _info$[ebp+40]
	adc	eax, DWORD PTR _info$[ebp+44]
	mov	DWORD PTR _info$[ebp+40], edx
	mov	DWORD PTR _info$[ebp+44], eax
; Line 1274
	jmp	SHORT $LN4@MethodBenc
$LN3@MethodBenc:
; Line 1275
	mov	esi, esp
	push	0
	lea	ecx, DWORD PTR _info$[ebp]
	push	ecx
	mov	edx, DWORD PTR _callback$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _callback$[ebp]
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$70521[ebp], eax
	cmp	DWORD PTR ___result__$70521[ebp], 0
	je	SHORT $LN2@MethodBenc
	mov	eax, DWORD PTR ___result__$70521[ebp]
	mov	DWORD PTR $T73162[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _status$[ebp]
	call	??1CBenchProgressStatus@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _encodersSpec$[ebp]
	call	??1CBenchEncoders@@QAE@XZ		; CBenchEncoders::~CBenchEncoders
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _method$[ebp]
	call	??1COneMethodInfo@@QAE@XZ
	mov	eax, DWORD PTR $T73162[ebp]
	jmp	$LN67@MethodBenc
$LN2@MethodBenc:
; Line 1276
	mov	esi, esp
	push	1
	lea	ecx, DWORD PTR _info$[ebp]
	push	ecx
	mov	edx, DWORD PTR _callback$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _callback$[ebp]
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$70524[ebp], eax
	cmp	DWORD PTR ___result__$70524[ebp], 0
	je	SHORT $LN1@MethodBenc
	mov	eax, DWORD PTR ___result__$70524[ebp]
	mov	DWORD PTR $T73163[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _status$[ebp]
	call	??1CBenchProgressStatus@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _encodersSpec$[ebp]
	call	??1CBenchEncoders@@QAE@XZ		; CBenchEncoders::~CBenchEncoders
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _method$[ebp]
	call	??1COneMethodInfo@@QAE@XZ
	mov	eax, DWORD PTR $T73163[ebp]
	jmp	SHORT $LN67@MethodBenc
$LN1@MethodBenc:
; Line 1278
	mov	DWORD PTR $T73164[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _status$[ebp]
	call	??1CBenchProgressStatus@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _encodersSpec$[ebp]
	call	??1CBenchEncoders@@QAE@XZ		; CBenchEncoders::~CBenchEncoders
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _method$[ebp]
	call	??1COneMethodInfo@@QAE@XZ
	mov	eax, DWORD PTR $T73164[ebp]
$LN67@MethodBenc:
; Line 1279
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN93@MethodBenc
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 516				; 00000204H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	40					; 00000028H
	npad	3
$LN93@MethodBenc:
	DD	10					; 0000000aH
	DD	$LN92@MethodBenc
$LN92@MethodBenc:
	DD	-52					; ffffffccH
	DD	36					; 00000024H
	DD	$LN81@MethodBenc
	DD	-68					; ffffffbcH
	DD	8
	DD	$LN82@MethodBenc
	DD	-80					; ffffffb0H
	DD	4
	DD	$LN83@MethodBenc
	DD	-97					; ffffff9fH
	DD	1
	DD	$LN84@MethodBenc
	DD	-116					; ffffff8cH
	DD	4
	DD	$LN85@MethodBenc
	DD	-152					; ffffff68H
	DD	16					; 00000010H
	DD	$LN86@MethodBenc
	DD	-184					; ffffff48H
	DD	16					; 00000010H
	DD	$LN87@MethodBenc
	DD	-208					; ffffff30H
	DD	8
	DD	$LN88@MethodBenc
	DD	-256					; ffffff00H
	DD	32					; 00000020H
	DD	$LN89@MethodBenc
	DD	-348					; fffffea4H
	DD	56					; 00000038H
	DD	$LN90@MethodBenc
$LN90@MethodBenc:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	0
$LN89@MethodBenc:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
$LN88@MethodBenc:
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	0
$LN87@MethodBenc:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	0
$LN86@MethodBenc:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	0
$LN85@MethodBenc:
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	83					; 00000053H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	0
$LN84@MethodBenc:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	120					; 00000078H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	78					; 0000004eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	98					; 00000062H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN83@MethodBenc:
	DB	110					; 0000006eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	115					; 00000073H
	DB	0
$LN82@MethodBenc:
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	73					; 00000049H
	DB	100					; 00000064H
	DB	0
$LN81@MethodBenc:
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?MethodBench@@YGJ_K_NIABVCOneMethodInfo@@IIPAUIBenchPrintCallback@@PAUIBenchCallback@@PAUCBenchProps@@@Z$0:
	lea	ecx, DWORD PTR _method$[ebp]
	jmp	??1COneMethodInfo@@QAE@XZ
__unwindfunclet$?MethodBench@@YGJ_K_NIABVCOneMethodInfo@@IIPAUIBenchPrintCallback@@PAUIBenchCallback@@PAUCBenchProps@@@Z$1:
	lea	ecx, DWORD PTR _encodersSpec$[ebp]
	jmp	??1CBenchEncoders@@QAE@XZ		; CBenchEncoders::~CBenchEncoders
__unwindfunclet$?MethodBench@@YGJ_K_NIABVCOneMethodInfo@@IIPAUIBenchPrintCallback@@PAUIBenchCallback@@PAUCBenchProps@@@Z$2:
	lea	ecx, DWORD PTR _cod$70407[ebp]
	jmp	??1CCreatedCoder@@QAE@XZ
__unwindfunclet$?MethodBench@@YGJ_K_NIABVCOneMethodInfo@@IIPAUIBenchPrintCallback@@PAUIBenchCallback@@PAUCBenchProps@@@Z$3:
	lea	ecx, DWORD PTR _cod$70418[ebp]
	jmp	??1CCreatedCoder@@QAE@XZ
__unwindfunclet$?MethodBench@@YGJ_K_NIABVCOneMethodInfo@@IIPAUIBenchPrintCallback@@PAUIBenchCallback@@PAUCBenchProps@@@Z$4:
	lea	ecx, DWORD PTR _status$[ebp]
	jmp	??1CBenchProgressStatus@@QAE@XZ
__unwindfunclet$?MethodBench@@YGJ_K_NIABVCOneMethodInfo@@IIPAUIBenchPrintCallback@@PAUIBenchCallback@@PAUCBenchProps@@@Z$5:
	mov	eax, DWORD PTR $T73147[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?MethodBench@@YGJ_K_NIABVCOneMethodInfo@@IIPAUIBenchPrintCallback@@PAUIBenchCallback@@PAUCBenchProps@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-516]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?MethodBench@@YGJ_K_NIABVCOneMethodInfo@@IIPAUIBenchPrintCallback@@PAUIBenchCallback@@PAUCBenchProps@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?MethodBench@@YGJ_K_NIABVCOneMethodInfo@@IIPAUIBenchPrintCallback@@PAUIBenchCallback@@PAUCBenchProps@@@Z ENDP ; MethodBench
EXTRN	_Handle_WaitObject@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Wait@CThread@NWindows@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Wait@CThread@NWindows@@QAEIXZ PROC			; NWindows::CThread::Wait, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\thread.h
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_Handle_WaitObject@4
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Wait@CThread@NWindows@@QAEIXZ ENDP			; NWindows::CThread::Wait
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Get_NumThreads@CMethodProps@@QBEHXZ
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
?Get_NumThreads@CMethodProps@@QBEHXZ PROC		; CMethodProps::Get_NumThreads, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\methodprops.h
; Line 60
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 61
	push	13					; 0000000dH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindProp@CMethodProps@@QBEHK@Z		; CMethodProps::FindProp
	mov	DWORD PTR _i$[ebp], eax
; Line 62
	cmp	DWORD PTR _i$[ebp], 0
	jl	SHORT $LN2@Get_NumThr
; Line 63
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ; CObjectVector<CProp>::operator[]
	movzx	ecx, WORD PTR [eax+8]
	cmp	ecx, 19					; 00000013H
	jne	SHORT $LN2@Get_NumThr
; Line 64
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ; CObjectVector<CProp>::operator[]
	mov	eax, DWORD PTR [eax+16]
	jmp	SHORT $LN3@Get_NumThr
$LN2@Get_NumThr:
; Line 65
	or	eax, -1
$LN3@Get_NumThr:
; Line 66
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_NumThreads@CMethodProps@@QBEHXZ ENDP		; CMethodProps::Get_NumThreads
_TEXT	ENDS
PUBLIC	?Get_Lzma_Algo@CMethodProps@@QBEIXZ		; CMethodProps::Get_Lzma_Algo
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Get_Lzma_NumThreads@CMethodProps@@QBEIAA_N@Z
_TEXT	SEGMENT
_numThreads$ = -8					; size = 4
_this$ = -4						; size = 4
_fixedNumber$ = 8					; size = 4
?Get_Lzma_NumThreads@CMethodProps@@QBEIAA_N@Z PROC	; CMethodProps::Get_Lzma_NumThreads, COMDAT
; _this$ = ecx
; Line 111
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 112
	mov	eax, DWORD PTR _fixedNumber$[ebp]
	mov	BYTE PTR [eax], 0
; Line 113
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_NumThreads@CMethodProps@@QBEHXZ	; CMethodProps::Get_NumThreads
	mov	DWORD PTR _numThreads$[ebp], eax
; Line 114
	cmp	DWORD PTR _numThreads$[ebp], 0
	jl	SHORT $LN1@Get_Lzma_N
; Line 116
	mov	ecx, DWORD PTR _fixedNumber$[ebp]
	mov	BYTE PTR [ecx], 1
; Line 117
	xor	eax, eax
	cmp	DWORD PTR _numThreads$[ebp], 2
	setge	al
	add	eax, 1
	jmp	SHORT $LN2@Get_Lzma_N
$LN1@Get_Lzma_N:
; Line 119
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_Lzma_Algo@CMethodProps@@QBEIXZ	; CMethodProps::Get_Lzma_Algo
	neg	eax
	sbb	eax, eax
	neg	eax
	add	eax, 1
$LN2@Get_Lzma_N:
; Line 120
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Get_Lzma_NumThreads@CMethodProps@@QBEIAA_N@Z ENDP	; CMethodProps::Get_Lzma_NumThreads
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Get_Lzma_Algo@CMethodProps@@QBEIXZ
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
?Get_Lzma_Algo@CMethodProps@@QBEIXZ PROC		; CMethodProps::Get_Lzma_Algo, COMDAT
; _this$ = ecx
; Line 84
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 85
	push	12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindProp@CMethodProps@@QBEHK@Z		; CMethodProps::FindProp
	mov	DWORD PTR _i$[ebp], eax
; Line 86
	cmp	DWORD PTR _i$[ebp], 0
	jl	SHORT $LN2@Get_Lzma_A
; Line 87
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ; CObjectVector<CProp>::operator[]
	movzx	ecx, WORD PTR [eax+8]
	cmp	ecx, 19					; 00000013H
	jne	SHORT $LN2@Get_Lzma_A
; Line 88
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ; CObjectVector<CProp>::operator[]
	mov	eax, DWORD PTR [eax+16]
	jmp	SHORT $LN3@Get_Lzma_A
$LN2@Get_Lzma_A:
; Line 89
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetLevel@CMethodProps@@QBEHXZ		; CMethodProps::GetLevel
	xor	ecx, ecx
	cmp	eax, 5
	setge	cl
	mov	eax, ecx
$LN3@Get_Lzma_A:
; Line 90
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Lzma_Algo@CMethodProps@@QBEIXZ ENDP		; CMethodProps::Get_Lzma_Algo
_TEXT	ENDS
EXTRN	?AddProp32@CProps@@QAEXKI@Z:PROC		; CProps::AddProp32
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?AddProp_NumThreads@CMethodProps@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_numThreads$ = 8					; size = 4
?AddProp_NumThreads@CMethodProps@@QAEXI@Z PROC		; CMethodProps::AddProp_NumThreads, COMDAT
; _this$ = ecx
; Line 169
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 170
	mov	eax, DWORD PTR _numThreads$[ebp]
	push	eax
	push	13					; 0000000dH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddProp32@CProps@@QAEXKI@Z		; CProps::AddProp32
; Line 171
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?AddProp_NumThreads@CMethodProps@@QAEXI@Z ENDP		; CMethodProps::AddProp_NumThreads
_TEXT	ENDS
PUBLIC	??_7CBenchProgressInfo@@6B@			; CBenchProgressInfo::`vftable'
PUBLIC	??0CBenchInfoCalc@@QAE@XZ			; CBenchInfoCalc::CBenchInfoCalc
PUBLIC	??0ICompressProgressInfo@@QAE@XZ		; ICompressProgressInfo::ICompressProgressInfo
PUBLIC	??_R4CBenchProgressInfo@@6B@			; CBenchProgressInfo::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCBenchProgressInfo@@@8			; CBenchProgressInfo `RTTI Type Descriptor'
PUBLIC	??_R3CBenchProgressInfo@@8			; CBenchProgressInfo::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CBenchProgressInfo@@8			; CBenchProgressInfo::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CBenchProgressInfo@@8		; CBenchProgressInfo::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ICompressProgressInfo@@8		; ICompressProgressInfo::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUICompressProgressInfo@@@8		; ICompressProgressInfo `RTTI Type Descriptor'
PUBLIC	??_R3ICompressProgressInfo@@8			; ICompressProgressInfo::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ICompressProgressInfo@@8			; ICompressProgressInfo::`RTTI Base Class Array'
PUBLIC	??_R17?0A@EA@CBenchInfoCalc@@8			; CBenchInfoCalc::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	??_R0?AUCBenchInfoCalc@@@8			; CBenchInfoCalc `RTTI Type Descriptor'
PUBLIC	??_R3CBenchInfoCalc@@8				; CBenchInfoCalc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CBenchInfoCalc@@8				; CBenchInfoCalc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CBenchInfoCalc@@8			; CBenchInfoCalc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?QueryInterface@CBenchProgressInfo@@UAGJABU_GUID@@PAPAX@Z ; CBenchProgressInfo::QueryInterface
PUBLIC	?AddRef@CBenchProgressInfo@@UAGKXZ		; CBenchProgressInfo::AddRef
PUBLIC	?Release@CBenchProgressInfo@@UAGKXZ		; CBenchProgressInfo::Release
;	COMDAT ??_R1A@?0A@EA@CBenchInfoCalc@@8
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\bench.cpp
rdata$r	SEGMENT
??_R1A@?0A@EA@CBenchInfoCalc@@8 DD FLAT:??_R0?AUCBenchInfoCalc@@@8 ; CBenchInfoCalc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CBenchInfoCalc@@8
rdata$r	ENDS
;	COMDAT ??_R2CBenchInfoCalc@@8
rdata$r	SEGMENT
??_R2CBenchInfoCalc@@8 DD FLAT:??_R1A@?0A@EA@CBenchInfoCalc@@8 ; CBenchInfoCalc::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CBenchInfoCalc@@8
rdata$r	SEGMENT
??_R3CBenchInfoCalc@@8 DD 00H				; CBenchInfoCalc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CBenchInfoCalc@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUCBenchInfoCalc@@@8
_DATA	SEGMENT
??_R0?AUCBenchInfoCalc@@@8 DD FLAT:??_7type_info@@6B@	; CBenchInfoCalc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUCBenchInfoCalc@@', 00H
_DATA	ENDS
;	COMDAT ??_R17?0A@EA@CBenchInfoCalc@@8
rdata$r	SEGMENT
??_R17?0A@EA@CBenchInfoCalc@@8 DD FLAT:??_R0?AUCBenchInfoCalc@@@8 ; CBenchInfoCalc::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CBenchInfoCalc@@8
rdata$r	ENDS
;	COMDAT ??_R2ICompressProgressInfo@@8
rdata$r	SEGMENT
??_R2ICompressProgressInfo@@8 DD FLAT:??_R1A@?0A@EA@ICompressProgressInfo@@8 ; ICompressProgressInfo::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ICompressProgressInfo@@8
rdata$r	SEGMENT
??_R3ICompressProgressInfo@@8 DD 00H			; ICompressProgressInfo::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ICompressProgressInfo@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUICompressProgressInfo@@@8
_DATA	SEGMENT
??_R0?AUICompressProgressInfo@@@8 DD FLAT:??_7type_info@@6B@ ; ICompressProgressInfo `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUICompressProgressInfo@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ICompressProgressInfo@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ICompressProgressInfo@@8 DD FLAT:??_R0?AUICompressProgressInfo@@@8 ; ICompressProgressInfo::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICompressProgressInfo@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CBenchProgressInfo@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CBenchProgressInfo@@8 DD FLAT:??_R0?AVCBenchProgressInfo@@@8 ; CBenchProgressInfo::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CBenchProgressInfo@@8
rdata$r	ENDS
;	COMDAT ??_R2CBenchProgressInfo@@8
rdata$r	SEGMENT
??_R2CBenchProgressInfo@@8 DD FLAT:??_R1A@?0A@EA@CBenchProgressInfo@@8 ; CBenchProgressInfo::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ICompressProgressInfo@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CMyUnknownImp@@8
	DD	FLAT:??_R17?0A@EA@CBenchInfoCalc@@8
rdata$r	ENDS
;	COMDAT ??_R3CBenchProgressInfo@@8
rdata$r	SEGMENT
??_R3CBenchProgressInfo@@8 DD 00H			; CBenchProgressInfo::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2CBenchProgressInfo@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCBenchProgressInfo@@@8
_DATA	SEGMENT
??_R0?AVCBenchProgressInfo@@@8 DD FLAT:??_7type_info@@6B@ ; CBenchProgressInfo `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCBenchProgressInfo@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CBenchProgressInfo@@6B@
rdata$r	SEGMENT
??_R4CBenchProgressInfo@@6B@ DD 00H			; CBenchProgressInfo::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCBenchProgressInfo@@@8
	DD	FLAT:??_R3CBenchProgressInfo@@8
rdata$r	ENDS
;	COMDAT ??_7CBenchProgressInfo@@6B@
CONST	SEGMENT
??_7CBenchProgressInfo@@6B@ DD FLAT:??_R4CBenchProgressInfo@@6B@ ; CBenchProgressInfo::`vftable'
	DD	FLAT:?QueryInterface@CBenchProgressInfo@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CBenchProgressInfo@@UAGKXZ
	DD	FLAT:?Release@CBenchProgressInfo@@UAGKXZ
	DD	FLAT:?SetRatioInfo@CBenchProgressInfo@@UAGJPB_K0@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CBenchProgressInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CBenchProgressInfo@@QAE@XZ PROC			; CBenchProgressInfo::CBenchProgressInfo, COMDAT
; _this$ = ecx
; Line 447
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ICompressProgressInfo@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0CBenchInfoCalc@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CBenchProgressInfo@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+80], 0
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CBenchProgressInfo@@QAE@XZ ENDP			; CBenchProgressInfo::CBenchProgressInfo
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CBenchProgressInfo@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CBenchProgressInfo@@UAGJABU_GUID@@PAPAX@Z PROC ; CBenchProgressInfo::QueryInterface, COMDAT
; Line 448
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@4
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN1@QueryInter@4
$LN2@QueryInter@4:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN3@QueryInter@4
$LN1@QueryInter@4:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	xor	eax, eax
$LN3@QueryInter@4:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CBenchProgressInfo@@UAGJABU_GUID@@PAPAX@Z ENDP ; CBenchProgressInfo::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CBenchProgressInfo@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CBenchProgressInfo@@UAGKXZ PROC			; CBenchProgressInfo::AddRef, COMDAT
; Line 448
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CBenchProgressInfo@@UAGKXZ ENDP			; CBenchProgressInfo::AddRef
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CBenchProgressInfo@@UAGKXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
$T73204 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CBenchProgressInfo@@UAGKXZ PROC		; CBenchProgressInfo::Release, COMDAT
; Line 448
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	jmp	SHORT $LN2@Release@4
$LN1@Release@4:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T73204[ebp], edx
	mov	eax, DWORD PTR $T73204[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	xor	eax, eax
$LN2@Release@4:
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CBenchProgressInfo@@UAGKXZ ENDP		; CBenchProgressInfo::Release
_TEXT	ENDS
PUBLIC	??_7ICompressProgressInfo@@6B@			; ICompressProgressInfo::`vftable'
PUBLIC	??_R4ICompressProgressInfo@@6B@			; ICompressProgressInfo::`RTTI Complete Object Locator'
;	COMDAT ??_R4ICompressProgressInfo@@6B@
rdata$r	SEGMENT
??_R4ICompressProgressInfo@@6B@ DD 00H			; ICompressProgressInfo::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUICompressProgressInfo@@@8
	DD	FLAT:??_R3ICompressProgressInfo@@8
rdata$r	ENDS
;	COMDAT ??_7ICompressProgressInfo@@6B@
CONST	SEGMENT
??_7ICompressProgressInfo@@6B@ DD FLAT:??_R4ICompressProgressInfo@@6B@ ; ICompressProgressInfo::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ICompressProgressInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ICompressProgressInfo@@QAE@XZ PROC			; ICompressProgressInfo::ICompressProgressInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ICompressProgressInfo@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ICompressProgressInfo@@QAE@XZ ENDP			; ICompressProgressInfo::ICompressProgressInfo
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CBenchInfoCalc@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CBenchInfoCalc@@QAE@XZ PROC				; CBenchInfoCalc::CBenchInfoCalc, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CBenchInfo@@QAE@XZ			; CBenchInfo::CBenchInfo
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CBenchInfoCalc@@QAE@XZ ENDP				; CBenchInfoCalc::CBenchInfoCalc
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GeComprCommands@CBenchProps@@QAE_K_K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_unpackSize$ = 8					; size = 8
?GeComprCommands@CBenchProps@@QAE_K_K@Z PROC		; CBenchProps::GeComprCommands, COMDAT
; _this$ = ecx
; Line 554
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 555
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	xor	edx, edx
	push	edx
	push	ecx
	mov	eax, DWORD PTR _unpackSize$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _unpackSize$[ebp]
	push	ecx
	call	__allmul
; Line 556
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?GeComprCommands@CBenchProps@@QAE_K_K@Z ENDP		; CBenchProps::GeComprCommands
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GeDecomprCommands@CBenchProps@@QAE_K_K0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_packSize$ = 8						; size = 8
_unpackSize$ = 16					; size = 8
?GeDecomprCommands@CBenchProps@@QAE_K_K0@Z PROC		; CBenchProps::GeDecomprCommands, COMDAT
; _this$ = ecx
; Line 559
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 560
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	xor	edx, edx
	push	edx
	push	ecx
	mov	eax, DWORD PTR _packSize$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _packSize$[ebp]
	push	ecx
	call	__allmul
	mov	esi, eax
	mov	edi, edx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	xor	ecx, ecx
	push	ecx
	push	eax
	mov	edx, DWORD PTR _unpackSize$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _unpackSize$[ebp]
	push	eax
	call	__allmul
	add	esi, eax
	adc	edi, edx
	mov	eax, esi
	mov	edx, edi
; Line 561
	pop	edi
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?GeDecomprCommands@CBenchProps@@QAE_K_K0@Z ENDP		; CBenchProps::GeDecomprCommands
_TEXT	ENDS
PUBLIC	?Create@CThread@NWindows@@QAEIP6GIPAX@Z0@Z	; NWindows::CThread::Create
PUBLIC	?EncodeThreadFunction@CEncoderInfo@@SGIPAX@Z	; CEncoderInfo::EncodeThreadFunction
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?CreateEncoderThread@CEncoderInfo@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CreateEncoderThread@CEncoderInfo@@QAEJXZ PROC		; CEncoderInfo::CreateEncoderThread, COMDAT
; _this$ = ecx
; Line 716
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 717
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	push	OFFSET ?EncodeThreadFunction@CEncoderInfo@@SGIPAX@Z ; CEncoderInfo::EncodeThreadFunction
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Create@CThread@NWindows@@QAEIP6GIPAX@Z0@Z ; NWindows::CThread::Create
; Line 718
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?CreateEncoderThread@CEncoderInfo@@QAEJXZ ENDP		; CEncoderInfo::CreateEncoderThread
_TEXT	ENDS
EXTRN	_Thread_Create@12:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Create@CThread@NWindows@@QAEIP6GIPAX@Z0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_startAddress$ = 8					; size = 4
_parameter$ = 12					; size = 4
?Create@CThread@NWindows@@QAEIP6GIPAX@Z0@Z PROC		; NWindows::CThread::Create, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\thread.h
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _parameter$[ebp]
	push	eax
	mov	ecx, DWORD PTR _startAddress$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	_Thread_Create@12
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Create@CThread@NWindows@@QAEIP6GIPAX@Z0@Z ENDP		; NWindows::CThread::Create
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	__alloca_probe_16:PROC
;	COMDAT xdata$x
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\bench.cpp
xdata$x	SEGMENT
__catchsym$?EncodeThreadFunction@CEncoderInfo@@SGIPAX@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?EncodeThreadFunction@CEncoderInfo@@SGIPAX@Z$0
__unwindtable$?EncodeThreadFunction@CEncoderInfo@@SGIPAX@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?EncodeThreadFunction@CEncoderInfo@@SGIPAX@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?EncodeThreadFunction@CEncoderInfo@@SGIPAX@Z$2
__ehfuncinfo$?EncodeThreadFunction@CEncoderInfo@@SGIPAX@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?EncodeThreadFunction@CEncoderInfo@@SGIPAX@Z
	DD	01H
	DD	FLAT:__tryblocktable$?EncodeThreadFunction@CEncoderInfo@@SGIPAX@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?EncodeThreadFunction@CEncoderInfo@@SGIPAX@Z
_TEXT	SEGMENT
tv79 = -32						; size = 4
_encoder$ = -28						; size = 4
_res$ = -24						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_param$ = 8						; size = 4
?EncodeThreadFunction@CEncoderInfo@@SGIPAX@Z PROC	; CEncoderInfo::EncodeThreadFunction, COMDAT
; Line 681
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?EncodeThreadFunction@CEncoderInfo@@SGIPAX@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
; Line 683
	mov	eax, DWORD PTR _param$[ebp]
	mov	DWORD PTR _encoder$[ebp], eax
; Line 685
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 687
	mov	ecx, DWORD PTR _encoder$[ebp]
	mov	eax, DWORD PTR [ecx+48]
	call	__alloca_probe_16
	mov	DWORD PTR __$EHRec$[ebp], esp
; Line 690
	mov	ecx, DWORD PTR _encoder$[ebp]
	call	?Encode@CEncoderInfo@@QAEJXZ		; CEncoderInfo::Encode
	mov	DWORD PTR tv79[ebp], eax
	mov	edx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _res$[ebp], edx
; Line 691
	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR _res$[ebp]
	mov	DWORD PTR [eax+164], ecx
; Line 692
	jmp	SHORT $LN5@EncodeThre
__catch$?EncodeThreadFunction@CEncoderInfo@@SGIPAX@Z$0:
; Line 695
	mov	DWORD PTR _res$[ebp], -2147467259	; 80004005H
; Line 696
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?EncodeThreadFunction@CEncoderInfo@@SGIPAX@Z$1
	ret	0
$LN5@EncodeThre:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?EncodeThreadFunction@CEncoderInfo@@SGIPAX@Z$1:
; Line 697
	cmp	DWORD PTR _res$[ebp], 0
	je	SHORT $LN1@EncodeThre
; Line 698
	mov	edx, DWORD PTR _res$[ebp]
	push	edx
	mov	eax, DWORD PTR _encoder$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR [ecx+72]
	call	?SetResult@CBenchProgressStatus@@QAEXJ@Z ; CBenchProgressStatus::SetResult
$LN1@EncodeThre:
; Line 699
	xor	eax, eax
; Line 700
	lea	esp, DWORD PTR [ebp-48]
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?EncodeThreadFunction@CEncoderInfo@@SGIPAX@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?EncodeThreadFunction@CEncoderInfo@@SGIPAX@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?EncodeThreadFunction@CEncoderInfo@@SGIPAX@Z ENDP	; CEncoderInfo::EncodeThreadFunction
PUBLIC	?DecodeThreadFunction@CEncoderInfo@@SGIPAX@Z	; CEncoderInfo::DecodeThreadFunction
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?CreateDecoderThread@CEncoderInfo@@QAEJI_NI@Z
_TEXT	SEGMENT
_decoder$ = -8						; size = 4
_this$ = -4						; size = 4
_index$ = 8						; size = 4
_callbackMode$ = 12					; size = 1
_allocaSize$ = 16					; size = 4
?CreateDecoderThread@CEncoderInfo@@QAEJI_NI@Z PROC	; CEncoderInfo::CreateDecoderThread, COMDAT
; _this$ = ecx
; Line 725
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 726
	mov	eax, DWORD PTR _index$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+120]
	mov	DWORD PTR _decoder$[ebp], edx
; Line 727
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 728
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
; Line 731
	mov	ecx, DWORD PTR _decoder$[ebp]
	mov	edx, DWORD PTR _allocaSize$[ebp]
	mov	DWORD PTR [ecx+12], edx
; Line 734
	mov	eax, DWORD PTR _decoder$[ebp]
	mov	cl, BYTE PTR _callbackMode$[ebp]
	mov	BYTE PTR [eax+8], cl
; Line 735
	mov	edx, DWORD PTR _decoder$[ebp]
	push	edx
	push	OFFSET ?DecodeThreadFunction@CEncoderInfo@@SGIPAX@Z ; CEncoderInfo::DecodeThreadFunction
	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [ecx+eax*4]
	call	?Create@CThread@NWindows@@QAEIP6GIPAX@Z0@Z ; NWindows::CThread::Create
; Line 736
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?CreateDecoderThread@CEncoderInfo@@QAEJI_NI@Z ENDP	; CEncoderInfo::CreateDecoderThread
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?DecodeThreadFunction@CEncoderInfo@@SGIPAX@Z
_TEXT	SEGMENT
_encoder$ = -12						; size = 4
_decoder$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_param$ = 8						; size = 4
?DecodeThreadFunction@CEncoderInfo@@SGIPAX@Z PROC	; CEncoderInfo::DecodeThreadFunction, COMDAT
; Line 703
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 704
	mov	eax, DWORD PTR _param$[ebp]
	mov	DWORD PTR _decoder$[ebp], eax
; Line 707
	mov	ecx, DWORD PTR _decoder$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	call	__alloca_probe_16
; Line 710
	mov	edx, DWORD PTR _decoder$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _encoder$[ebp], eax
; Line 711
	mov	ecx, DWORD PTR _decoder$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR _encoder$[ebp]
	call	?Decode@CEncoderInfo@@QAEJI@Z		; CEncoderInfo::Decode
	mov	ecx, DWORD PTR _decoder$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _encoder$[ebp]
	mov	DWORD PTR [ecx+edx*4+164], eax
; Line 712
	xor	eax, eax
; Line 713
	lea	esp, DWORD PTR [ebp-12]
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
?DecodeThreadFunction@CEncoderInfo@@SGIPAX@Z ENDP	; CEncoderInfo::DecodeThreadFunction
_TEXT	ENDS
PUBLIC	??0CEncoderInfo@@QAE@XZ				; CEncoderInfo::CEncoderInfo
EXTRN	??_L@YGXPAXIHP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CBenchEncoders@@QAE@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CBenchEncoders@@QAE@I@Z$0
__ehfuncinfo$??0CBenchEncoders@@QAE@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CBenchEncoders@@QAE@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CBenchEncoders@@QAE@I@Z
_TEXT	SEGMENT
tv86 = -32						; size = 4
$T73243 = -28						; size = 4
$T73242 = -24						; size = 4
$T73241 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_num$ = 8						; size = 4
??0CBenchEncoders@@QAE@I@Z PROC				; CBenchEncoders::CBenchEncoders, COMDAT
; _this$ = ecx
; Line 1022
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CBenchEncoders@@QAE@I@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _num$[ebp]
	mov	DWORD PTR $T73241[ebp], ecx
	xor	ecx, ecx
	mov	eax, DWORD PTR $T73241[ebp]
	mov	edx, 280				; 00000118H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	xor	eax, eax
	add	ecx, 4
	setb	al
	neg	eax
	or	eax, ecx
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T73243[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T73243[ebp], 0
	je	SHORT $LN3@CBenchEnco
	mov	ecx, DWORD PTR $T73243[ebp]
	mov	edx, DWORD PTR $T73241[ebp]
	mov	DWORD PTR [ecx], edx
	push	OFFSET ??1CEncoderInfo@@QAE@XZ
	push	OFFSET ??0CEncoderInfo@@QAE@XZ		; CEncoderInfo::CEncoderInfo
	mov	eax, DWORD PTR $T73241[ebp]
	push	eax
	push	280					; 00000118H
	mov	ecx, DWORD PTR $T73243[ebp]
	add	ecx, 4
	push	ecx
	call	??_L@YGXPAXIHP6EX0@Z1@Z
	mov	edx, DWORD PTR $T73243[ebp]
	add	edx, 4
	mov	DWORD PTR tv86[ebp], edx
	jmp	SHORT $LN4@CBenchEnco
$LN3@CBenchEnco:
	mov	DWORD PTR tv86[ebp], 0
$LN4@CBenchEnco:
	mov	eax, DWORD PTR tv86[ebp]
	mov	DWORD PTR $T73242[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T73242[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CBenchEncoders@@QAE@I@Z$0:
	mov	eax, DWORD PTR $T73243[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??0CBenchEncoders@@QAE@I@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CBenchEncoders@@QAE@I@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CBenchEncoders@@QAE@I@Z ENDP				; CBenchEncoders::CBenchEncoders
PUBLIC	??0CBenchRandomGenerator@@QAE@XZ		; CBenchRandomGenerator::CBenchRandomGenerator
PUBLIC	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ	; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
PUBLIC	??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ	; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>
PUBLIC	??0?$CMyComPtr@UICompressFilter@@@@QAE@XZ	; CMyComPtr<ICompressFilter>::CMyComPtr<ICompressFilter>
PUBLIC	??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ	; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>
PUBLIC	??0CThread@NWindows@@QAE@XZ			; NWindows::CThread::CThread
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0CEncoderInfo@@QAE@XZ DD 019930522H
	DD	0aH
	DD	FLAT:__unwindtable$??0CEncoderInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0CEncoderInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CEncoderInfo@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CEncoderInfo@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CEncoderInfo@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CEncoderInfo@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0CEncoderInfo@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0CEncoderInfo@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0CEncoderInfo@@QAE@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??0CEncoderInfo@@QAE@XZ$7
	DD	07H
	DD	FLAT:__unwindfunclet$??0CEncoderInfo@@QAE@XZ$8
	DD	08H
	DD	FLAT:__unwindfunclet$??0CEncoderInfo@@QAE@XZ$9
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CEncoderInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CEncoderInfo@@QAE@XZ PROC				; CEncoderInfo::CEncoderInfo, COMDAT
; _this$ = ecx
; Line 676
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CEncoderInfo@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??1CThread@NWindows@@QAE@XZ	; NWindows::CThread::~CThread
	push	OFFSET ??0CThread@NWindows@@QAE@XZ	; NWindows::CThread::CThread
	push	2
	push	4
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_L@YGXPAXIHP6EX0@Z1@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::CMyComPtr<ICompressFilter>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	push	OFFSET ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	push	OFFSET ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>
	push	2
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	push	ecx
	call	??_L@YGXPAXIHP6EX0@Z1@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+116], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+117], 1
	push	OFFSET ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
	push	OFFSET ??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>
	push	2
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 152				; 00000098H
	push	ecx
	call	??_L@YGXPAXIHP6EX0@Z1@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 160				; 000000a0H
	call	??0?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::CMyComPtr<ICompressFilter>
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+172], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 176				; 000000b0H
	call	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+180], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+184], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 200				; 000000c8H
	call	??0CBenchRandomGenerator@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 216				; 000000d8H
	call	??0CBenchBuffer@@QAE@XZ			; CBenchBuffer::CBenchBuffer
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+228], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 232				; 000000e8H
	call	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 236				; 000000ecH
	call	??0COneMethodInfo@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CEncoderInfo@@QAE@XZ$0:
	push	OFFSET ??1CThread@NWindows@@QAE@XZ	; NWindows::CThread::~CThread
	push	2
	push	4
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	ret	0
__unwindfunclet$??0CEncoderInfo@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
__unwindfunclet$??0CEncoderInfo@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	jmp	??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>
__unwindfunclet$??0CEncoderInfo@@QAE@XZ$3:
	push	OFFSET ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	push	2
	push	4
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	ret	0
__unwindfunclet$??0CEncoderInfo@@QAE@XZ$4:
	push	OFFSET ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
	push	2
	push	4
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 152				; 00000098H
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	ret	0
__unwindfunclet$??0CEncoderInfo@@QAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 160				; 000000a0H
	jmp	??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>
__unwindfunclet$??0CEncoderInfo@@QAE@XZ$6:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 176				; 000000b0H
	jmp	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
__unwindfunclet$??0CEncoderInfo@@QAE@XZ$7:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 200				; 000000c8H
	jmp	??1CBenchRandomGenerator@@UAE@XZ
__unwindfunclet$??0CEncoderInfo@@QAE@XZ$8:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 216				; 000000d8H
	jmp	??1CBenchBuffer@@UAE@XZ			; CBenchBuffer::~CBenchBuffer
__unwindfunclet$??0CEncoderInfo@@QAE@XZ$9:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 232				; 000000e8H
	jmp	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
__ehhandler$??0CEncoderInfo@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CEncoderInfo@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CEncoderInfo@@QAE@XZ ENDP				; CEncoderInfo::CEncoderInfo
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CThread@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CThread@NWindows@@QAE@XZ PROC			; NWindows::CThread::CThread, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\thread.h
; Line 16
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CThread@NWindows@@QAE@XZ ENDP			; NWindows::CThread::CThread
_TEXT	ENDS
PUBLIC	??_7CBenchRandomGenerator@@6B@			; CBenchRandomGenerator::`vftable'
PUBLIC	??_R4CBenchRandomGenerator@@6B@			; CBenchRandomGenerator::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCBenchRandomGenerator@@@8		; CBenchRandomGenerator `RTTI Type Descriptor'
PUBLIC	??_R3CBenchRandomGenerator@@8			; CBenchRandomGenerator::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CBenchRandomGenerator@@8			; CBenchRandomGenerator::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CBenchRandomGenerator@@8		; CBenchRandomGenerator::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_ECBenchRandomGenerator@@UAEPAXI@Z:PROC	; CBenchRandomGenerator::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CBenchRandomGenerator@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CBenchRandomGenerator@@8 DD FLAT:??_R0?AVCBenchRandomGenerator@@@8 ; CBenchRandomGenerator::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CBenchRandomGenerator@@8
rdata$r	ENDS
;	COMDAT ??_R2CBenchRandomGenerator@@8
rdata$r	SEGMENT
??_R2CBenchRandomGenerator@@8 DD FLAT:??_R1A@?0A@EA@CBenchRandomGenerator@@8 ; CBenchRandomGenerator::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CBenchBuffer@@8
rdata$r	ENDS
;	COMDAT ??_R3CBenchRandomGenerator@@8
rdata$r	SEGMENT
??_R3CBenchRandomGenerator@@8 DD 00H			; CBenchRandomGenerator::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CBenchRandomGenerator@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCBenchRandomGenerator@@@8
_DATA	SEGMENT
??_R0?AVCBenchRandomGenerator@@@8 DD FLAT:??_7type_info@@6B@ ; CBenchRandomGenerator `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCBenchRandomGenerator@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CBenchRandomGenerator@@6B@
rdata$r	SEGMENT
??_R4CBenchRandomGenerator@@6B@ DD 00H			; CBenchRandomGenerator::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCBenchRandomGenerator@@@8
	DD	FLAT:??_R3CBenchRandomGenerator@@8
rdata$r	ENDS
;	COMDAT ??_7CBenchRandomGenerator@@6B@
CONST	SEGMENT
??_7CBenchRandomGenerator@@6B@ DD FLAT:??_R4CBenchRandomGenerator@@6B@ ; CBenchRandomGenerator::`vftable'
	DD	FLAT:??_ECBenchRandomGenerator@@UAEPAXI@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CBenchRandomGenerator@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CBenchRandomGenerator@@QAE@XZ PROC			; CBenchRandomGenerator::CBenchRandomGenerator, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CBenchBuffer@@QAE@XZ			; CBenchBuffer::CBenchBuffer
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CBenchRandomGenerator@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CBenchRandomGenerator@@QAE@XZ ENDP			; CBenchRandomGenerator::CBenchRandomGenerator
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??_GCBenchRandomGenerator@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCBenchRandomGenerator@@UAEPAXI@Z PROC		; CBenchRandomGenerator::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CBenchRandomGenerator@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCBenchRandomGenerator@@UAEPAXI@Z ENDP		; CBenchRandomGenerator::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CBenchEncoders@@QAE@XZ
_TEXT	SEGMENT
tv68 = -16						; size = 4
$T73282 = -12						; size = 4
$T73281 = -8						; size = 4
_this$ = -4						; size = 4
??1CBenchEncoders@@QAE@XZ PROC				; CBenchEncoders::~CBenchEncoders, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\bench.cpp
; Line 1023
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T73282[ebp], ecx
	mov	edx, DWORD PTR $T73282[ebp]
	mov	DWORD PTR $T73281[ebp], edx
	cmp	DWORD PTR $T73281[ebp], 0
	je	SHORT $LN3@CBenchEnco@2
	push	3
	mov	ecx, DWORD PTR $T73281[ebp]
	call	??_ECEncoderInfo@@QAEPAXI@Z
	mov	DWORD PTR tv68[ebp], eax
	jmp	SHORT $LN1@CBenchEnco@2
$LN3@CBenchEnco@2:
	mov	DWORD PTR tv68[ebp], 0
$LN1@CBenchEnco@2:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CBenchEncoders@@QAE@XZ ENDP				; CBenchEncoders::~CBenchEncoders
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
_TEXT	SEGMENT
tv67 = -16						; size = 8
_res$ = -8						; size = 8
_numCommands$ = 8					; size = 8
_complexInCommands$ = 16				; size = 8
?GetNumIterations@@YG_K_K0@Z PROC			; GetNumIterations
; Line 1027
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1028
	cmp	DWORD PTR _numCommands$[ebp+4], 0
	ja	SHORT $LN1@GetNumIter
	jb	SHORT $LN6@GetNumIter
	cmp	DWORD PTR _numCommands$[ebp], 16	; 00000010H
	jae	SHORT $LN1@GetNumIter
$LN6@GetNumIter:
; Line 1029
	mov	DWORD PTR _numCommands$[ebp], 16	; 00000010H
	mov	DWORD PTR _numCommands$[ebp+4], 0
$LN1@GetNumIter:
; Line 1030
	mov	eax, DWORD PTR _numCommands$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _numCommands$[ebp]
	push	ecx
	mov	edx, DWORD PTR _complexInCommands$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _complexInCommands$[ebp]
	push	eax
	call	__aulldiv
	mov	DWORD PTR _res$[ebp], eax
	mov	DWORD PTR _res$[ebp+4], edx
; Line 1031
	mov	ecx, DWORD PTR _res$[ebp]
	or	ecx, DWORD PTR _res$[ebp+4]
	jne	SHORT $LN4@GetNumIter
	mov	DWORD PTR tv67[ebp], 1
	mov	DWORD PTR tv67[ebp+4], 0
	jmp	SHORT $LN5@GetNumIter
$LN4@GetNumIter:
	mov	edx, DWORD PTR _res$[ebp]
	mov	DWORD PTR tv67[ebp], edx
	mov	eax, DWORD PTR _res$[ebp+4]
	mov	DWORD PTR tv67[ebp+4], eax
$LN5@GetNumIter:
	mov	eax, DWORD PTR tv67[ebp]
	mov	edx, DWORD PTR tv67[ebp+4]
; Line 1032
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?GetNumIterations@@YG_K_K0@Z ENDP			; GetNumIterations
_TEXT	ENDS
PUBLIC	??0CMethodProps@@QAE@ABV0@@Z			; CMethodProps::CMethodProps
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0COneMethodInfo@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0COneMethodInfo@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0COneMethodInfo@@QAE@ABV0@@Z$1
__ehfuncinfo$??0COneMethodInfo@@QAE@ABV0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0COneMethodInfo@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0COneMethodInfo@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0COneMethodInfo@@QAE@ABV0@@Z PROC			; COneMethodInfo::COneMethodInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0COneMethodInfo@@QAE@ABV0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CMethodProps@@QAE@ABV0@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0AString@@QAE@ABV0@@Z			; AString::AString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 24					; 00000018H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0COneMethodInfo@@QAE@ABV0@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CMethodProps@@QAE@XZ
__unwindfunclet$??0COneMethodInfo@@QAE@ABV0@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1AString@@QAE@XZ			; AString::~AString
__ehhandler$??0COneMethodInfo@@QAE@ABV0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0COneMethodInfo@@QAE@ABV0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0COneMethodInfo@@QAE@ABV0@@Z ENDP			; COneMethodInfo::COneMethodInfo
PUBLIC	??0?$CMyComPtr@UICompressCoder2@@@@QAE@XZ	; CMyComPtr<ICompressCoder2>::CMyComPtr<ICompressCoder2>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CCreatedCoder@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CCreatedCoder@@QAE@XZ$0
__ehfuncinfo$??0CCreatedCoder@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CCreatedCoder@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CCreatedCoder@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CCreatedCoder@@QAE@XZ PROC				; CCreatedCoder::CCreatedCoder, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CCreatedCoder@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$CMyComPtr@UICompressCoder2@@@@QAE@XZ ; CMyComPtr<ICompressCoder2>::CMyComPtr<ICompressCoder2>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CCreatedCoder@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
__ehhandler$??0CCreatedCoder@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CCreatedCoder@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CCreatedCoder@@QAE@XZ ENDP				; CCreatedCoder::CCreatedCoder
PUBLIC	??1?$CMyComPtr@UICompressCoder2@@@@QAE@XZ	; CMyComPtr<ICompressCoder2>::~CMyComPtr<ICompressCoder2>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CCreatedCoder@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CCreatedCoder@@QAE@XZ$0
__ehfuncinfo$??1CCreatedCoder@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CCreatedCoder@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CCreatedCoder@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CCreatedCoder@@QAE@XZ PROC				; CCreatedCoder::~CCreatedCoder, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CCreatedCoder@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1?$CMyComPtr@UICompressCoder2@@@@QAE@XZ ; CMyComPtr<ICompressCoder2>::~CMyComPtr<ICompressCoder2>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CCreatedCoder@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
__ehhandler$??1CCreatedCoder@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CCreatedCoder@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CCreatedCoder@@QAE@XZ ENDP				; CCreatedCoder::~CCreatedCoder
PUBLIC	??4CMethodProps@@QAEAAV0@ABV0@@Z		; CMethodProps::operator=
EXTRN	??4UString@@QAEAAV0@ABV0@@Z:PROC		; UString::operator=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4COneMethodInfo@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4COneMethodInfo@@QAEAAV0@ABV0@@Z PROC			; COneMethodInfo::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4CMethodProps@@QAEAAV0@ABV0@@Z
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4AString@@QAEAAV0@ABV0@@Z		; AString::operator=
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 24					; 00000018H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4COneMethodInfo@@QAEAAV0@ABV0@@Z ENDP			; COneMethodInfo::operator=
_TEXT	ENDS
PUBLIC	??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSection::CCriticalSection
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CBenchProgressStatus@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CBenchProgressStatus@@QAE@XZ PROC			; CBenchProgressStatus::CBenchProgressStatus, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSection::CCriticalSection
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CBenchProgressStatus@@QAE@XZ ENDP			; CBenchProgressStatus::CBenchProgressStatus
_TEXT	ENDS
EXTRN	_CriticalSection_Init@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ PROC ; NWindows::NSynchronization::CCriticalSection::CCriticalSection, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\synchronization.h
; Line 147
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	_CriticalSection_Init@4
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ ENDP ; NWindows::NSynchronization::CCriticalSection::CCriticalSection
_TEXT	ENDS
PUBLIC	??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSection::~CCriticalSection
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CBenchProgressStatus@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CBenchProgressStatus@@QAE@XZ PROC			; CBenchProgressStatus::~CBenchProgressStatus, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSection::~CCriticalSection
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CBenchProgressStatus@@QAE@XZ ENDP			; CBenchProgressStatus::~CBenchProgressStatus
_TEXT	ENDS
EXTRN	__imp__DeleteCriticalSection@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ PROC ; NWindows::NSynchronization::CCriticalSection::~CCriticalSection, COMDAT
; _this$ = ecx
; Line 148
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	DWORD PTR __imp__DeleteCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ ENDP ; NWindows::NSynchronization::CCriticalSection::~CCriticalSection
_TEXT	ENDS
PUBLIC	??0CProps@@QAE@ABU0@@Z				; CProps::CProps
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CMethodProps@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CMethodProps@@QAE@ABV0@@Z PROC			; CMethodProps::CMethodProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CProps@@QAE@ABU0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CMethodProps@@QAE@ABV0@@Z ENDP			; CMethodProps::CMethodProps
_TEXT	ENDS
PUBLIC	??4CProps@@QAEAAU0@ABU0@@Z			; CProps::operator=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4CMethodProps@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4CMethodProps@@QAEAAV0@ABV0@@Z PROC			; CMethodProps::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4CProps@@QAEAAU0@ABU0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4CMethodProps@@QAEAAV0@ABV0@@Z ENDP			; CMethodProps::operator=
_TEXT	ENDS
PUBLIC	??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z	; CObjectVector<CProp>::CObjectVector<CProp>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CProps@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CProps@@QAE@ABU0@@Z PROC				; CProps::CProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z ; CObjectVector<CProp>::CObjectVector<CProp>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CProps@@QAE@ABU0@@Z ENDP				; CProps::CProps
_TEXT	ENDS
PUBLIC	??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z	; CObjectVector<CProp>::operator=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4CProps@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4CProps@@QAEAAU0@ABU0@@Z PROC				; CProps::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z ; CObjectVector<CProp>::operator=
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4CProps@@QAEAAU0@ABU0@@Z ENDP				; CProps::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
_TEXT	SEGMENT
_i$70610 = -4						; size = 4
_sum$ = 8						; size = 4
_num$ = 12						; size = 4
_val$ = 16						; size = 4
_CountCpuFreq@12 PROC
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\bench.cpp
; Line 1350
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1351
	mov	DWORD PTR _i$70610[ebp], 0
	jmp	SHORT $LN3@CountCpuFr
$LN2@CountCpuFr:
	mov	eax, DWORD PTR _i$70610[ebp]
	add	eax, 1
	mov	DWORD PTR _i$70610[ebp], eax
$LN3@CountCpuFr:
	mov	ecx, DWORD PTR _i$70610[ebp]
	cmp	ecx, DWORD PTR _num$[ebp]
	jae	$LN1@CountCpuFr
; Line 1353
	mov	edx, DWORD PTR _sum$[ebp]
	add	edx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], edx
	mov	eax, DWORD PTR _sum$[ebp]
	xor	eax, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	mov	ecx, DWORD PTR _sum$[ebp]
	add	ecx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], ecx
	mov	edx, DWORD PTR _sum$[ebp]
	xor	edx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], edx
	mov	eax, DWORD PTR _sum$[ebp]
	add	eax, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	mov	ecx, DWORD PTR _sum$[ebp]
	xor	ecx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], ecx
	mov	edx, DWORD PTR _sum$[ebp]
	add	edx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], edx
	mov	eax, DWORD PTR _sum$[ebp]
	xor	eax, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	mov	ecx, DWORD PTR _sum$[ebp]
	add	ecx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], ecx
	mov	edx, DWORD PTR _sum$[ebp]
	xor	edx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], edx
	mov	eax, DWORD PTR _sum$[ebp]
	add	eax, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	mov	ecx, DWORD PTR _sum$[ebp]
	xor	ecx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], ecx
	mov	edx, DWORD PTR _sum$[ebp]
	add	edx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], edx
	mov	eax, DWORD PTR _sum$[ebp]
	xor	eax, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	mov	ecx, DWORD PTR _sum$[ebp]
	add	ecx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], ecx
	mov	edx, DWORD PTR _sum$[ebp]
	xor	edx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], edx
	mov	eax, DWORD PTR _sum$[ebp]
	add	eax, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	mov	ecx, DWORD PTR _sum$[ebp]
	xor	ecx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], ecx
	mov	edx, DWORD PTR _sum$[ebp]
	add	edx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], edx
	mov	eax, DWORD PTR _sum$[ebp]
	xor	eax, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	mov	ecx, DWORD PTR _sum$[ebp]
	add	ecx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], ecx
	mov	edx, DWORD PTR _sum$[ebp]
	xor	edx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], edx
	mov	eax, DWORD PTR _sum$[ebp]
	add	eax, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	mov	ecx, DWORD PTR _sum$[ebp]
	xor	ecx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], ecx
	mov	edx, DWORD PTR _sum$[ebp]
	add	edx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], edx
	mov	eax, DWORD PTR _sum$[ebp]
	xor	eax, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	mov	ecx, DWORD PTR _sum$[ebp]
	add	ecx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], ecx
	mov	edx, DWORD PTR _sum$[ebp]
	xor	edx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], edx
	mov	eax, DWORD PTR _sum$[ebp]
	add	eax, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	mov	ecx, DWORD PTR _sum$[ebp]
	xor	ecx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], ecx
	mov	edx, DWORD PTR _sum$[ebp]
	add	edx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], edx
	mov	eax, DWORD PTR _sum$[ebp]
	xor	eax, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	mov	ecx, DWORD PTR _sum$[ebp]
	add	ecx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], ecx
	mov	edx, DWORD PTR _sum$[ebp]
	xor	edx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], edx
	mov	eax, DWORD PTR _sum$[ebp]
	add	eax, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	mov	ecx, DWORD PTR _sum$[ebp]
	xor	ecx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], ecx
	mov	edx, DWORD PTR _sum$[ebp]
	add	edx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], edx
	mov	eax, DWORD PTR _sum$[ebp]
	xor	eax, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	mov	ecx, DWORD PTR _sum$[ebp]
	add	ecx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], ecx
	mov	edx, DWORD PTR _sum$[ebp]
	xor	edx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], edx
	mov	eax, DWORD PTR _sum$[ebp]
	add	eax, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	mov	ecx, DWORD PTR _sum$[ebp]
	xor	ecx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], ecx
	mov	edx, DWORD PTR _sum$[ebp]
	add	edx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], edx
	mov	eax, DWORD PTR _sum$[ebp]
	xor	eax, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	mov	ecx, DWORD PTR _sum$[ebp]
	add	ecx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], ecx
	mov	edx, DWORD PTR _sum$[ebp]
	xor	edx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], edx
	mov	eax, DWORD PTR _sum$[ebp]
	add	eax, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	mov	ecx, DWORD PTR _sum$[ebp]
	xor	ecx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], ecx
	mov	edx, DWORD PTR _sum$[ebp]
	add	edx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], edx
	mov	eax, DWORD PTR _sum$[ebp]
	xor	eax, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	mov	ecx, DWORD PTR _sum$[ebp]
	add	ecx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], ecx
	mov	edx, DWORD PTR _sum$[ebp]
	xor	edx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], edx
	mov	eax, DWORD PTR _sum$[ebp]
	add	eax, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	mov	ecx, DWORD PTR _sum$[ebp]
	xor	ecx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], ecx
	mov	edx, DWORD PTR _sum$[ebp]
	add	edx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], edx
	mov	eax, DWORD PTR _sum$[ebp]
	xor	eax, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	mov	ecx, DWORD PTR _sum$[ebp]
	add	ecx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], ecx
	mov	edx, DWORD PTR _sum$[ebp]
	xor	edx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], edx
	mov	eax, DWORD PTR _sum$[ebp]
	add	eax, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	mov	ecx, DWORD PTR _sum$[ebp]
	xor	ecx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], ecx
	mov	edx, DWORD PTR _sum$[ebp]
	add	edx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], edx
	mov	eax, DWORD PTR _sum$[ebp]
	xor	eax, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	mov	ecx, DWORD PTR _sum$[ebp]
	add	ecx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], ecx
	mov	edx, DWORD PTR _sum$[ebp]
	xor	edx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], edx
	mov	eax, DWORD PTR _sum$[ebp]
	add	eax, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	mov	ecx, DWORD PTR _sum$[ebp]
	xor	ecx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], ecx
	mov	edx, DWORD PTR _sum$[ebp]
	add	edx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], edx
	mov	eax, DWORD PTR _sum$[ebp]
	xor	eax, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	mov	ecx, DWORD PTR _sum$[ebp]
	add	ecx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], ecx
	mov	edx, DWORD PTR _sum$[ebp]
	xor	edx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], edx
	mov	eax, DWORD PTR _sum$[ebp]
	add	eax, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	mov	ecx, DWORD PTR _sum$[ebp]
	xor	ecx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], ecx
	mov	edx, DWORD PTR _sum$[ebp]
	add	edx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], edx
	mov	eax, DWORD PTR _sum$[ebp]
	xor	eax, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	mov	ecx, DWORD PTR _sum$[ebp]
	add	ecx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], ecx
	mov	edx, DWORD PTR _sum$[ebp]
	xor	edx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], edx
	mov	eax, DWORD PTR _sum$[ebp]
	add	eax, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	mov	ecx, DWORD PTR _sum$[ebp]
	xor	ecx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], ecx
	mov	edx, DWORD PTR _sum$[ebp]
	add	edx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], edx
	mov	eax, DWORD PTR _sum$[ebp]
	xor	eax, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	mov	ecx, DWORD PTR _sum$[ebp]
	add	ecx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], ecx
	mov	edx, DWORD PTR _sum$[ebp]
	xor	edx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], edx
	mov	eax, DWORD PTR _sum$[ebp]
	add	eax, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	mov	ecx, DWORD PTR _sum$[ebp]
	xor	ecx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], ecx
	mov	edx, DWORD PTR _sum$[ebp]
	add	edx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], edx
	mov	eax, DWORD PTR _sum$[ebp]
	xor	eax, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	mov	ecx, DWORD PTR _sum$[ebp]
	add	ecx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], ecx
	mov	edx, DWORD PTR _sum$[ebp]
	xor	edx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], edx
	mov	eax, DWORD PTR _sum$[ebp]
	add	eax, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	mov	ecx, DWORD PTR _sum$[ebp]
	xor	ecx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], ecx
	mov	edx, DWORD PTR _sum$[ebp]
	add	edx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], edx
	mov	eax, DWORD PTR _sum$[ebp]
	xor	eax, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	mov	ecx, DWORD PTR _sum$[ebp]
	add	ecx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], ecx
	mov	edx, DWORD PTR _sum$[ebp]
	xor	edx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], edx
	mov	eax, DWORD PTR _sum$[ebp]
	add	eax, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	mov	ecx, DWORD PTR _sum$[ebp]
	xor	ecx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], ecx
	mov	edx, DWORD PTR _sum$[ebp]
	add	edx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], edx
	mov	eax, DWORD PTR _sum$[ebp]
	xor	eax, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	mov	ecx, DWORD PTR _sum$[ebp]
	add	ecx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], ecx
	mov	edx, DWORD PTR _sum$[ebp]
	xor	edx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], edx
	mov	eax, DWORD PTR _sum$[ebp]
	add	eax, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	mov	ecx, DWORD PTR _sum$[ebp]
	xor	ecx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], ecx
	mov	edx, DWORD PTR _sum$[ebp]
	add	edx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], edx
	mov	eax, DWORD PTR _sum$[ebp]
	xor	eax, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	mov	ecx, DWORD PTR _sum$[ebp]
	add	ecx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], ecx
	mov	edx, DWORD PTR _sum$[ebp]
	xor	edx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], edx
	mov	eax, DWORD PTR _sum$[ebp]
	add	eax, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	mov	ecx, DWORD PTR _sum$[ebp]
	xor	ecx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], ecx
	mov	edx, DWORD PTR _sum$[ebp]
	add	edx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], edx
	mov	eax, DWORD PTR _sum$[ebp]
	xor	eax, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	mov	ecx, DWORD PTR _sum$[ebp]
	add	ecx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], ecx
	mov	edx, DWORD PTR _sum$[ebp]
	xor	edx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], edx
	mov	eax, DWORD PTR _sum$[ebp]
	add	eax, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	mov	ecx, DWORD PTR _sum$[ebp]
	xor	ecx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], ecx
	mov	edx, DWORD PTR _sum$[ebp]
	add	edx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], edx
	mov	eax, DWORD PTR _sum$[ebp]
	xor	eax, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	mov	ecx, DWORD PTR _sum$[ebp]
	add	ecx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], ecx
	mov	edx, DWORD PTR _sum$[ebp]
	xor	edx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], edx
	mov	eax, DWORD PTR _sum$[ebp]
	add	eax, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	mov	ecx, DWORD PTR _sum$[ebp]
	xor	ecx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], ecx
	mov	edx, DWORD PTR _sum$[ebp]
	add	edx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], edx
	mov	eax, DWORD PTR _sum$[ebp]
	xor	eax, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	mov	ecx, DWORD PTR _sum$[ebp]
	add	ecx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], ecx
	mov	edx, DWORD PTR _sum$[ebp]
	xor	edx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], edx
	mov	eax, DWORD PTR _sum$[ebp]
	add	eax, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
	mov	ecx, DWORD PTR _sum$[ebp]
	xor	ecx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], ecx
	mov	edx, DWORD PTR _sum$[ebp]
	add	edx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], edx
	mov	eax, DWORD PTR _sum$[ebp]
	xor	eax, DWORD PTR _val$[ebp]
	mov	DWORD PTR _sum$[ebp], eax
; Line 1354
	jmp	$LN2@CountCpuFr
$LN1@CountCpuFr:
; Line 1355
	mov	eax, DWORD PTR _sum$[ebp]
; Line 1356
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_CountCpuFreq@12 ENDP
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SetSum@CTotalBenchRes@@QAEXABU1@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_r1$ = 8						; size = 4
_r2$ = 12						; size = 4
?SetSum@CTotalBenchRes@@QAEXABU1@0@Z PROC		; CTotalBenchRes::SetSum, COMDAT
; _this$ = ecx
; Line 1584
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1585
	mov	eax, DWORD PTR _r1$[ebp]
	mov	ecx, DWORD PTR _r2$[ebp]
	mov	edx, DWORD PTR [eax+8]
	add	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [eax+12]
	adc	eax, DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+12], eax
; Line 1586
	mov	edx, DWORD PTR _r1$[ebp]
	mov	eax, DWORD PTR _r2$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	add	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [edx+20]
	adc	edx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], ecx
	mov	DWORD PTR [eax+20], edx
; Line 1587
	mov	ecx, DWORD PTR _r1$[ebp]
	mov	edx, DWORD PTR _r2$[ebp]
	mov	eax, DWORD PTR [ecx+24]
	add	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR [ecx+28]
	adc	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+24], eax
	mov	DWORD PTR [edx+28], ecx
; Line 1589
	mov	eax, DWORD PTR _r1$[ebp]
	mov	ecx, DWORD PTR _r2$[ebp]
	mov	edx, DWORD PTR [eax]
	add	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	adc	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
; Line 1590
	mov	esp, ebp
	pop	ebp
	ret	8
?SetSum@CTotalBenchRes@@QAEXABU1@0@Z ENDP		; CTotalBenchRes::SetSum
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
_TEXT	SEGMENT
_numIterations2$ = -8					; size = 8
_f$ = 8							; size = 4
_showFreq$ = 12						; size = 1
_cpuFreq$ = 16						; size = 8
_res$ = 24						; size = 4
?PrintTotals@@YGXAAUIBenchPrintCallback@@_N_KABUCTotalBenchRes@@@Z PROC ; PrintTotals
; Line 1704
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1705
	push	10					; 0000000aH
	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	call	?PrintSpaces@@YGXAAUIBenchPrintCallback@@I@Z ; PrintSpaces
; Line 1707
	mov	ecx, DWORD PTR _res$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _numIterations2$[ebp], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _numIterations2$[ebp+4], eax
	mov	ecx, DWORD PTR _numIterations2$[ebp]
	or	ecx, DWORD PTR _numIterations2$[ebp+4]
	jne	SHORT $LN1@PrintTotal
	mov	DWORD PTR _numIterations2$[ebp], 1
	mov	DWORD PTR _numIterations2$[ebp+4], 0
$LN1@PrintTotal:
; Line 1708
	mov	edx, DWORD PTR _cpuFreq$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _cpuFreq$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _showFreq$[ebp]
	push	ecx
	mov	edx, DWORD PTR _res$[ebp]
	mov	eax, DWORD PTR _numIterations2$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _numIterations2$[ebp]
	push	ecx
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR [edx+8]
	push	ecx
	call	__aulldiv
	push	edx
	push	eax
	mov	edx, DWORD PTR _res$[ebp]
	mov	eax, DWORD PTR _numIterations2$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _numIterations2$[ebp]
	push	ecx
	mov	eax, DWORD PTR [edx+28]
	push	eax
	mov	ecx, DWORD PTR [edx+24]
	push	ecx
	call	__aulldiv
	push	edx
	push	eax
	mov	edx, DWORD PTR _res$[ebp]
	mov	eax, DWORD PTR _numIterations2$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _numIterations2$[ebp]
	push	ecx
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR [edx+16]
	push	ecx
	call	__aulldiv
	push	edx
	push	eax
	mov	edx, DWORD PTR _f$[ebp]
	push	edx
	call	?PrintResults@@YGXAAUIBenchPrintCallback@@_K11_N1@Z ; PrintResults
; Line 1709
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?PrintTotals@@YGXAAUIBenchPrintCallback@@_N_KABUCTotalBenchRes@@@Z ENDP ; PrintTotals
; Function compile flags: /Odtp /RTCsu
_f$ = 8						; size = 4
_sizeString$ = 12					; size = 4
_size$ = 16						; size = 8
_threadsString$ = 24					; size = 4
_numThreads$ = 28					; size = 4
?PrintRequirements@@YGXAAUIBenchPrintCallback@@PBD_K1I@Z PROC ; PrintRequirements
; Line 1712
	push	ebp
	mov	ebp, esp
	push	esi
; Line 1713
	mov	esi, esp
	push	OFFSET $SG70992
	mov	eax, DWORD PTR _f$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _f$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1714
	mov	esi, esp
	mov	ecx, DWORD PTR _sizeString$[ebp]
	push	ecx
	mov	edx, DWORD PTR _f$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _f$[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1715
	push	6
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR _size$[ebp+4]
	mov	cl, 20					; 00000014H
	call	__aullshr
	push	edx
	push	eax
	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	call	?PrintNumber@@YGXAAUIBenchPrintCallback@@_KH@Z ; PrintNumber
; Line 1716
	mov	esi, esp
	push	OFFSET $SG70993
	mov	ecx, DWORD PTR _f$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _f$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1717
	mov	esi, esp
	mov	ecx, DWORD PTR _threadsString$[ebp]
	push	ecx
	mov	edx, DWORD PTR _f$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _f$[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1718
	push	3
	mov	eax, DWORD PTR _numThreads$[ebp]
	xor	ecx, ecx
	push	ecx
	push	eax
	mov	edx, DWORD PTR _f$[ebp]
	push	edx
	call	?PrintNumber@@YGXAAUIBenchPrintCallback@@_KH@Z ; PrintNumber
; Line 1719
	mov	eax, DWORD PTR _f$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _f$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1720
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	24					; 00000018H
?PrintRequirements@@YGXAAUIBenchPrintCallback@@PBD_K1I@Z ENDP ; PrintRequirements
_TEXT	ENDS
PUBLIC	??_7CBenchCallbackToPrint@@6B@			; CBenchCallbackToPrint::`vftable'
PUBLIC	??0IBenchCallback@@QAE@XZ			; IBenchCallback::IBenchCallback
PUBLIC	??_R4CBenchCallbackToPrint@@6B@			; CBenchCallbackToPrint::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUCBenchCallbackToPrint@@@8		; CBenchCallbackToPrint `RTTI Type Descriptor'
PUBLIC	??_R3CBenchCallbackToPrint@@8			; CBenchCallbackToPrint::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CBenchCallbackToPrint@@8			; CBenchCallbackToPrint::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CBenchCallbackToPrint@@8		; CBenchCallbackToPrint::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@IBenchCallback@@8			; IBenchCallback::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIBenchCallback@@@8			; IBenchCallback `RTTI Type Descriptor'
PUBLIC	??_R3IBenchCallback@@8				; IBenchCallback::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IBenchCallback@@8				; IBenchCallback::`RTTI Base Class Array'
;	COMDAT ??_R2IBenchCallback@@8
rdata$r	SEGMENT
??_R2IBenchCallback@@8 DD FLAT:??_R1A@?0A@EA@IBenchCallback@@8 ; IBenchCallback::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3IBenchCallback@@8
rdata$r	SEGMENT
??_R3IBenchCallback@@8 DD 00H				; IBenchCallback::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2IBenchCallback@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIBenchCallback@@@8
_DATA	SEGMENT
??_R0?AUIBenchCallback@@@8 DD FLAT:??_7type_info@@6B@	; IBenchCallback `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIBenchCallback@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IBenchCallback@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IBenchCallback@@8 DD FLAT:??_R0?AUIBenchCallback@@@8 ; IBenchCallback::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IBenchCallback@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CBenchCallbackToPrint@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CBenchCallbackToPrint@@8 DD FLAT:??_R0?AUCBenchCallbackToPrint@@@8 ; CBenchCallbackToPrint::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CBenchCallbackToPrint@@8
rdata$r	ENDS
;	COMDAT ??_R2CBenchCallbackToPrint@@8
rdata$r	SEGMENT
??_R2CBenchCallbackToPrint@@8 DD FLAT:??_R1A@?0A@EA@CBenchCallbackToPrint@@8 ; CBenchCallbackToPrint::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IBenchCallback@@8
rdata$r	ENDS
;	COMDAT ??_R3CBenchCallbackToPrint@@8
rdata$r	SEGMENT
??_R3CBenchCallbackToPrint@@8 DD 00H			; CBenchCallbackToPrint::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CBenchCallbackToPrint@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUCBenchCallbackToPrint@@@8
_DATA	SEGMENT
??_R0?AUCBenchCallbackToPrint@@@8 DD FLAT:??_7type_info@@6B@ ; CBenchCallbackToPrint `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUCBenchCallbackToPrint@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CBenchCallbackToPrint@@6B@
rdata$r	SEGMENT
??_R4CBenchCallbackToPrint@@6B@ DD 00H			; CBenchCallbackToPrint::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUCBenchCallbackToPrint@@@8
	DD	FLAT:??_R3CBenchCallbackToPrint@@8
rdata$r	ENDS
;	COMDAT ??_7CBenchCallbackToPrint@@6B@
CONST	SEGMENT
??_7CBenchCallbackToPrint@@6B@ DD FLAT:??_R4CBenchCallbackToPrint@@6B@ ; CBenchCallbackToPrint::`vftable'
	DD	FLAT:?SetFreq@CBenchCallbackToPrint@@UAEJ_N_K@Z
	DD	FLAT:?SetEncodeResult@CBenchCallbackToPrint@@UAEJABUCBenchInfo@@_N@Z
	DD	FLAT:?SetDecodeResult@CBenchCallbackToPrint@@UAEJABUCBenchInfo@@_N@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CBenchCallbackToPrint@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CBenchCallbackToPrint@@QAE@XZ PROC			; CBenchCallbackToPrint::CBenchCallbackToPrint, COMDAT
; _this$ = ecx
; Line 1746
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IBenchCallback@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CBenchCallbackToPrint@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CBenchProps@@QAE@XZ			; CBenchProps::CBenchProps
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+96], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+100], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+104], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+112], 0
	mov	DWORD PTR [ecx+116], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+120], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+124], 1
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CBenchCallbackToPrint@@QAE@XZ ENDP			; CBenchCallbackToPrint::CBenchCallbackToPrint
_TEXT	ENDS
PUBLIC	?Init@CTotalBenchRes@@QAEXXZ			; CTotalBenchRes::Init
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Init@CBenchCallbackToPrint@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Init@CBenchCallbackToPrint@@QAEXXZ PROC		; CBenchCallbackToPrint::Init, COMDAT
; _this$ = ecx
; Line 1748
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?Init@CTotalBenchRes@@QAEXXZ		; CTotalBenchRes::Init
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	?Init@CTotalBenchRes@@QAEXXZ		; CTotalBenchRes::Init
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Init@CBenchCallbackToPrint@@QAEXXZ ENDP		; CBenchCallbackToPrint::Init
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Init@CTotalBenchRes@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Init@CTotalBenchRes@@QAEXXZ PROC			; CTotalBenchRes::Init, COMDAT
; _this$ = ecx
; Line 1581
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0
	mov	DWORD PTR [eax+28], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Init@CTotalBenchRes@@QAEXXZ ENDP			; CTotalBenchRes::Init
_TEXT	ENDS
PUBLIC	??_7IBenchCallback@@6B@				; IBenchCallback::`vftable'
PUBLIC	??_R4IBenchCallback@@6B@			; IBenchCallback::`RTTI Complete Object Locator'
;	COMDAT ??_R4IBenchCallback@@6B@
rdata$r	SEGMENT
??_R4IBenchCallback@@6B@ DD 00H				; IBenchCallback::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIBenchCallback@@@8
	DD	FLAT:??_R3IBenchCallback@@8
rdata$r	ENDS
;	COMDAT ??_7IBenchCallback@@6B@
CONST	SEGMENT
??_7IBenchCallback@@6B@ DD FLAT:??_R4IBenchCallback@@6B@ ; IBenchCallback::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0IBenchCallback@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IBenchCallback@@QAE@XZ PROC				; IBenchCallback::IBenchCallback, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7IBenchCallback@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0IBenchCallback@@QAE@XZ ENDP				; IBenchCallback::IBenchCallback
_TEXT	ENDS
EXTRN	??4CPropVariant@NCOM@NWindows@@QAEAAV012@PBD@Z:PROC ; NWindows::NCOM::CPropVariant::operator=
xdata$x	SEGMENT
__unwindtable$?TotalBench@@YGJ_KI_NIPAUIBenchPrintCallback@@PAUCBenchCallbackToPrint@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?TotalBench@@YGJ_KI_NIPAUIBenchPrintCallback@@PAUCBenchCallbackToPrint@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?TotalBench@@YGJ_KI_NIPAUIBenchPrintCallback@@PAUCBenchCallbackToPrint@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?TotalBench@@YGJ_KI_NIPAUIBenchPrintCallback@@PAUCBenchCallbackToPrint@@@Z$2
__ehfuncinfo$?TotalBench@@YGJ_KI_NIPAUIBenchPrintCallback@@PAUCBenchCallbackToPrint@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?TotalBench@@YGJ_KI_NIPAUIBenchPrintCallback@@PAUCBenchCallbackToPrint@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv168 = -132						; size = 4
tv86 = -128						; size = 4
$T73359 = -124						; size = 4
$T73358 = -120						; size = 4
$T73357 = -116						; size = 12
___result__$71112 = -104				; size = 4
_res$71107 = -100					; size = 4
_unpackSize2$71105 = -96				; size = 4
___result__$71101 = -92					; size = 4
_propVariant$71100 = -84				; size = 16
_method$71099 = -60					; size = 36
_bench$71098 = -20					; size = 4
_i$71094 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_complexInCommands$ = 8					; size = 8
_numThreads$ = 16					; size = 4
_forceUnpackSize$ = 20					; size = 1
_unpackSize$ = 24					; size = 4
_printCallback$ = 28					; size = 4
_callback$ = 32						; size = 4
?TotalBench@@YGJ_KI_NIPAUIBenchPrintCallback@@PAUCBenchCallbackToPrint@@@Z PROC ; TotalBench
; Line 1832
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?TotalBench@@YGJ_KI_NIPAUIBenchPrintCallback@@PAUCBenchCallbackToPrint@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 120				; 00000078H
	push	edi
	lea	edi, DWORD PTR [ebp-132]
	mov	ecx, 30					; 0000001eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 1833
	mov	DWORD PTR _i$71094[ebp], 0
	jmp	SHORT $LN9@TotalBench
$LN8@TotalBench:
	mov	eax, DWORD PTR _i$71094[ebp]
	add	eax, 1
	mov	DWORD PTR _i$71094[ebp], eax
$LN9@TotalBench:
	cmp	DWORD PTR _i$71094[ebp], 17		; 00000011H
	jae	$LN7@TotalBench
; Line 1835
	mov	ecx, DWORD PTR _i$71094[ebp]
	imul	ecx, 24					; 00000018H
	add	ecx, OFFSET _g_Bench
	mov	DWORD PTR _bench$71098[ebp], ecx
; Line 1836
	push	12					; 0000000cH
	mov	edx, DWORD PTR _bench$71098[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR _callback$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	push	edx
	call	?PrintLeft@@YGXAAUIBenchPrintCallback@@PBDI@Z ; PrintLeft
; Line 1837
	mov	eax, DWORD PTR _callback$[ebp]
	mov	ecx, DWORD PTR _bench$71098[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
; Line 1838
	mov	eax, DWORD PTR _callback$[ebp]
	mov	ecx, DWORD PTR _bench$71098[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
; Line 1839
	mov	eax, DWORD PTR _callback$[ebp]
	mov	ecx, DWORD PTR _bench$71098[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
; Line 1840
	lea	ecx, DWORD PTR _method$71099[ebp]
	call	??0COneMethodInfo@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 1841
	lea	ecx, DWORD PTR _propVariant$71100[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
	mov	BYTE PTR __$EHRec$[ebp+8], 1
; Line 1842
	mov	eax, DWORD PTR _bench$71098[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	lea	ecx, DWORD PTR _propVariant$71100[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@PBD@Z ; NWindows::NCOM::CPropVariant::operator=
; Line 1843
	lea	edx, DWORD PTR _propVariant$71100[ebp]
	push	edx
	lea	ecx, DWORD PTR $T73357[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR tv86[ebp], eax
	mov	eax, DWORD PTR tv86[ebp]
	mov	DWORD PTR tv168[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR tv168[ebp]
	push	ecx
	lea	ecx, DWORD PTR _method$71099[ebp]
	call	?ParseMethodFromPROPVARIANT@COneMethodInfo@@QAEJABVUString@@ABUtagPROPVARIANT@@@Z ; COneMethodInfo::ParseMethodFromPROPVARIANT
	mov	DWORD PTR ___result__$71101[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T73357[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	cmp	DWORD PTR ___result__$71101[ebp], 0
	je	SHORT $LN6@TotalBench
	mov	edx, DWORD PTR ___result__$71101[ebp]
	mov	DWORD PTR $T73358[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _propVariant$71100[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _method$71099[ebp]
	call	??1COneMethodInfo@@QAE@XZ
	mov	eax, DWORD PTR $T73358[ebp]
	jmp	$LN10@TotalBench
$LN6@TotalBench:
; Line 1845
	mov	eax, DWORD PTR _unpackSize$[ebp]
	mov	DWORD PTR _unpackSize2$71105[ebp], eax
; Line 1846
	movzx	ecx, BYTE PTR _forceUnpackSize$[ebp]
	test	ecx, ecx
	jne	SHORT $LN5@TotalBench
	mov	edx, DWORD PTR _bench$71098[ebp]
	cmp	DWORD PTR [edx+4], 0
	jne	SHORT $LN5@TotalBench
; Line 1847
	mov	DWORD PTR _unpackSize2$71105[ebp], 49152 ; 0000c000H
$LN5@TotalBench:
; Line 1849
	mov	eax, DWORD PTR _callback$[ebp]
	mov	ecx, DWORD PTR _bench$71098[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+120], edx
; Line 1850
	mov	eax, DWORD PTR _callback$[ebp]
	mov	ecx, DWORD PTR _bench$71098[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+124], edx
; Line 1856
	mov	eax, DWORD PTR _callback$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _callback$[ebp]
	push	ecx
	mov	edx, DWORD PTR _printCallback$[ebp]
	push	edx
	mov	eax, DWORD PTR _bench$71098[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _unpackSize2$71105[ebp]
	push	edx
	lea	eax, DWORD PTR _method$71099[ebp]
	push	eax
	mov	ecx, DWORD PTR _numThreads$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _complexInCommands$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _complexInCommands$[ebp]
	push	eax
	call	?MethodBench@@YGJ_K_NIABVCOneMethodInfo@@IIPAUIBenchPrintCallback@@PAUIBenchCallback@@PAUCBenchProps@@@Z ; MethodBench
	mov	DWORD PTR _res$71107[ebp], eax
; Line 1857
	cmp	DWORD PTR _res$71107[ebp], -2147467263	; 80004001H
	jne	SHORT $LN4@TotalBench
; Line 1861
	mov	ecx, DWORD PTR _callback$[ebp]
	movzx	edx, BYTE PTR [ecx+96]
	test	edx, edx
	jne	SHORT $LN3@TotalBench
; Line 1862
	mov	ecx, DWORD PTR _callback$[ebp]
	call	?NewLine@CBenchCallbackToPrint@@QAEXXZ	; CBenchCallbackToPrint::NewLine
$LN3@TotalBench:
; Line 1864
	jmp	SHORT $LN2@TotalBench
$LN4@TotalBench:
; Line 1866
	mov	eax, DWORD PTR _res$71107[ebp]
	mov	DWORD PTR ___result__$71112[ebp], eax
	cmp	DWORD PTR ___result__$71112[ebp], 0
	je	SHORT $LN2@TotalBench
	mov	ecx, DWORD PTR ___result__$71112[ebp]
	mov	DWORD PTR $T73359[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _propVariant$71100[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _method$71099[ebp]
	call	??1COneMethodInfo@@QAE@XZ
	mov	eax, DWORD PTR $T73359[ebp]
	jmp	SHORT $LN10@TotalBench
$LN2@TotalBench:
; Line 1868
	mov	ecx, DWORD PTR _callback$[ebp]
	call	?NewLine@CBenchCallbackToPrint@@QAEXXZ	; CBenchCallbackToPrint::NewLine
; Line 1869
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _propVariant$71100[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _method$71099[ebp]
	call	??1COneMethodInfo@@QAE@XZ
	jmp	$LN8@TotalBench
$LN7@TotalBench:
; Line 1870
	xor	eax, eax
$LN10@TotalBench:
; Line 1871
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@TotalBench
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 132				; 00000084H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
	npad	3
$LN19@TotalBench:
	DD	2
	DD	$LN18@TotalBench
$LN18@TotalBench:
	DD	-60					; ffffffc4H
	DD	36					; 00000024H
	DD	$LN15@TotalBench
	DD	-84					; ffffffacH
	DD	16					; 00000010H
	DD	$LN16@TotalBench
$LN16@TotalBench:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	86					; 00000056H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
$LN15@TotalBench:
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?TotalBench@@YGJ_KI_NIPAUIBenchPrintCallback@@PAUCBenchCallbackToPrint@@@Z$0:
	lea	ecx, DWORD PTR _method$71099[ebp]
	jmp	??1COneMethodInfo@@QAE@XZ
__unwindfunclet$?TotalBench@@YGJ_KI_NIPAUIBenchPrintCallback@@PAUCBenchCallbackToPrint@@@Z$1:
	lea	ecx, DWORD PTR _propVariant$71100[ebp]
	jmp	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
__unwindfunclet$?TotalBench@@YGJ_KI_NIPAUIBenchPrintCallback@@PAUCBenchCallbackToPrint@@@Z$2:
	lea	ecx, DWORD PTR $T73357[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$?TotalBench@@YGJ_KI_NIPAUIBenchPrintCallback@@PAUCBenchCallbackToPrint@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-128]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?TotalBench@@YGJ_KI_NIPAUIBenchPrintCallback@@PAUCBenchCallbackToPrint@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?TotalBench@@YGJ_KI_NIPAUIBenchPrintCallback@@PAUCBenchCallbackToPrint@@@Z ENDP ; TotalBench
PUBLIC	?WaitAll@CFreqThreads@@QAEXXZ			; CFreqThreads::WaitAll
PUBLIC	??1CFreqThreads@@QAE@XZ				; CFreqThreads::~CFreqThreads
PUBLIC	??0CFreqInfo@@QAE@XZ				; CFreqInfo::CFreqInfo
PUBLIC	??0CFreqThreads@@QAE@XZ				; CFreqThreads::CFreqThreads
xdata$x	SEGMENT
__unwindtable$?FreqBench@@YGJ_KIPAUIBenchPrintCallback@@_NAA_KAAI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FreqBench@@YGJ_KIPAUIBenchPrintCallback@@_NAA_KAAI@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?FreqBench@@YGJ_KIPAUIBenchPrintCallback@@_NAA_KAAI@Z$1
__ehfuncinfo$?FreqBench@@YGJ_KIPAUIBenchPrintCallback@@_NAA_KAAI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?FreqBench@@YGJ_KIPAUIBenchPrintCallback@@_NAA_KAAI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv188 = -288						; size = 8
tv131 = -280						; size = 4
tv66 = -276						; size = 4
$T73385 = -272						; size = 4
$T73384 = -268						; size = 4
$T73381 = -264						; size = 4
$T73380 = -260						; size = 4
$T73379 = -256						; size = 4
$T73376 = -252						; size = 4
$T73375 = -248						; size = 4
$T73374 = -244						; size = 4
___result__$71173 = -240				; size = 4
_rating$71172 = -236					; size = 8
_numCommands$71170 = -228				; size = 8
_info$ = -216						; size = 56
___result__$71165 = -156				; size = 4
_k$71161 = -152						; size = 8
_sum$71160 = -144					; size = 4
___result__$71156 = -140				; size = 4
___result__$71150 = -136				; size = 4
_info$71149 = -132					; size = 4
_info$71144 = -128					; size = 4
_i$71140 = -124						; size = 4
_threads$ = -116					; size = 8
_progressInfoSpec$ = -100				; size = 64
_numIterations$ = -32					; size = 8
_bsize$ = -24						; size = 4
_complexity$ = -20					; size = 4
_bufferSize$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_complexInCommands$ = 8					; size = 8
_numThreads$ = 16					; size = 4
__file$ = 20						; size = 4
_showFreq$ = 24						; size = 1
_cpuFreq$ = 28						; size = 4
_res$ = 32						; size = 4
?FreqBench@@YGJ_KIPAUIBenchPrintCallback@@_NAA_KAAI@Z PROC ; FreqBench
; Line 1881
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?FreqBench@@YGJ_KIPAUIBenchPrintCallback@@_NAA_KAAI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 276				; 00000114H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-288]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 1882
	mov	eax, DWORD PTR _res$[ebp]
	mov	DWORD PTR [eax], 0
; Line 1883
	mov	ecx, DWORD PTR _cpuFreq$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
; Line 1885
	mov	DWORD PTR _bufferSize$[ebp], 1048576	; 00100000H
; Line 1886
	mov	DWORD PTR _complexity$[ebp], 128	; 00000080H
; Line 1887
	cmp	DWORD PTR _numThreads$[ebp], 0
	jne	SHORT $LN21@FreqBench
; Line 1888
	mov	DWORD PTR _numThreads$[ebp], 1
$LN21@FreqBench:
; Line 1894
	cmp	DWORD PTR _bufferSize$[ebp], 0
	jne	SHORT $LN24@FreqBench
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN25@FreqBench
$LN24@FreqBench:
	mov	edx, DWORD PTR _bufferSize$[ebp]
	mov	DWORD PTR tv66[ebp], edx
$LN25@FreqBench:
	mov	eax, DWORD PTR tv66[ebp]
	mov	DWORD PTR _bsize$[ebp], eax
; Line 1895
	mov	ecx, DWORD PTR _complexity$[ebp]
	xor	edx, edx
	push	edx
	push	ecx
	mov	eax, DWORD PTR _complexInCommands$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _complexInCommands$[ebp]
	push	ecx
	call	__aulldiv
	mov	ecx, DWORD PTR _bsize$[ebp]
	xor	esi, esi
	push	esi
	push	ecx
	push	edx
	push	eax
	call	__aulldiv
	mov	DWORD PTR _numIterations$[ebp], eax
	mov	DWORD PTR _numIterations$[ebp+4], edx
; Line 1896
	mov	edx, DWORD PTR _numIterations$[ebp]
	or	edx, DWORD PTR _numIterations$[ebp+4]
	jne	SHORT $LN20@FreqBench
; Line 1897
	mov	DWORD PTR _numIterations$[ebp], 1
	mov	DWORD PTR _numIterations$[ebp+4], 0
$LN20@FreqBench:
; Line 1899
	lea	ecx, DWORD PTR _progressInfoSpec$[ebp]
	call	??0CBenchInfoCalc@@QAE@XZ
; Line 1902
	lea	ecx, DWORD PTR _threads$[ebp]
	call	??0CFreqThreads@@QAE@XZ			; CFreqThreads::CFreqThreads
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 1903
	cmp	DWORD PTR _numThreads$[ebp], 1
	jbe	$LN19@FreqBench
; Line 1905
	mov	eax, DWORD PTR _numThreads$[ebp]
	mov	DWORD PTR $T73374[ebp], eax
	xor	ecx, ecx
	mov	eax, DWORD PTR $T73374[ebp]
	mov	edx, 32					; 00000020H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	xor	eax, eax
	add	ecx, 4
	setb	al
	neg	eax
	or	eax, ecx
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T73376[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T73376[ebp], 0
	je	SHORT $LN26@FreqBench
	mov	ecx, DWORD PTR $T73376[ebp]
	mov	edx, DWORD PTR $T73374[ebp]
	mov	DWORD PTR [ecx], edx
	push	OFFSET ??1CFreqInfo@@QAE@XZ
	push	OFFSET ??0CFreqInfo@@QAE@XZ
	mov	eax, DWORD PTR $T73374[ebp]
	push	eax
	push	32					; 00000020H
	mov	ecx, DWORD PTR $T73376[ebp]
	add	ecx, 4
	push	ecx
	call	??_L@YGXPAXIHP6EX0@Z1@Z
	mov	edx, DWORD PTR $T73376[ebp]
	add	edx, 4
	mov	DWORD PTR tv131[ebp], edx
	jmp	SHORT $LN27@FreqBench
$LN26@FreqBench:
	mov	DWORD PTR tv131[ebp], 0
$LN27@FreqBench:
	mov	eax, DWORD PTR tv131[ebp]
	mov	DWORD PTR $T73375[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR $T73375[ebp]
	mov	DWORD PTR _threads$[ebp], ecx
; Line 1907
	mov	DWORD PTR _i$71140[ebp], 0
	jmp	SHORT $LN18@FreqBench
$LN17@FreqBench:
	mov	edx, DWORD PTR _i$71140[ebp]
	add	edx, 1
	mov	DWORD PTR _i$71140[ebp], edx
$LN18@FreqBench:
	mov	eax, DWORD PTR _i$71140[ebp]
	cmp	eax, DWORD PTR _numThreads$[ebp]
	jae	SHORT $LN16@FreqBench
; Line 1909
	mov	ecx, DWORD PTR _i$71140[ebp]
	shl	ecx, 5
	add	ecx, DWORD PTR _threads$[ebp]
	mov	DWORD PTR _info$71144[ebp], ecx
; Line 1910
	mov	edx, DWORD PTR _info$71144[ebp]
	mov	eax, DWORD PTR __file$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 1911
	mov	ecx, DWORD PTR _info$71144[ebp]
	mov	DWORD PTR [ecx+8], 0
; Line 1912
	mov	edx, DWORD PTR _info$71144[ebp]
	mov	eax, DWORD PTR _numIterations$[ebp]
	mov	DWORD PTR [edx+24], eax
	mov	ecx, DWORD PTR _numIterations$[ebp+4]
	mov	DWORD PTR [edx+28], ecx
; Line 1913
	mov	edx, DWORD PTR _info$71144[ebp]
	mov	eax, DWORD PTR _bufferSize$[ebp]
	mov	DWORD PTR [edx+16], eax
; Line 1914
	jmp	SHORT $LN17@FreqBench
$LN16@FreqBench:
; Line 1915
	lea	ecx, DWORD PTR _progressInfoSpec$[ebp]
	call	?SetStartTime@CBenchInfoCalc@@QAEXXZ	; CBenchInfoCalc::SetStartTime
; Line 1916
	mov	DWORD PTR _i$71140[ebp], 0
	jmp	SHORT $LN15@FreqBench
$LN14@FreqBench:
	mov	ecx, DWORD PTR _i$71140[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$71140[ebp], ecx
$LN15@FreqBench:
	mov	edx, DWORD PTR _i$71140[ebp]
	cmp	edx, DWORD PTR _numThreads$[ebp]
	jae	SHORT $LN13@FreqBench
; Line 1918
	mov	eax, DWORD PTR _i$71140[ebp]
	shl	eax, 5
	add	eax, DWORD PTR _threads$[ebp]
	mov	DWORD PTR _info$71149[ebp], eax
; Line 1919
	mov	ecx, DWORD PTR _info$71149[ebp]
	push	ecx
	push	OFFSET ?FreqThreadFunction@@YGIPAX@Z	; FreqThreadFunction
	mov	ecx, DWORD PTR _info$71149[ebp]
	call	?Create@CThread@NWindows@@QAEIP6GIPAX@Z0@Z ; NWindows::CThread::Create
	mov	DWORD PTR ___result__$71150[ebp], eax
	cmp	DWORD PTR ___result__$71150[ebp], 0
	je	SHORT $LN12@FreqBench
	mov	edx, DWORD PTR ___result__$71150[ebp]
	mov	DWORD PTR $T73379[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _threads$[ebp]
	call	??1CFreqThreads@@QAE@XZ			; CFreqThreads::~CFreqThreads
	mov	eax, DWORD PTR $T73379[ebp]
	jmp	$LN22@FreqBench
$LN12@FreqBench:
; Line 1920
	mov	eax, DWORD PTR _threads$[ebp+4]
	add	eax, 1
	mov	DWORD PTR _threads$[ebp+4], eax
; Line 1921
	jmp	SHORT $LN14@FreqBench
$LN13@FreqBench:
; Line 1922
	lea	ecx, DWORD PTR _threads$[ebp]
	call	?WaitAll@CFreqThreads@@QAEXXZ		; CFreqThreads::WaitAll
; Line 1923
	mov	DWORD PTR _i$71140[ebp], 0
	jmp	SHORT $LN11@FreqBench
$LN10@FreqBench:
	mov	ecx, DWORD PTR _i$71140[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$71140[ebp], ecx
$LN11@FreqBench:
	mov	edx, DWORD PTR _i$71140[ebp]
	cmp	edx, DWORD PTR _numThreads$[ebp]
	jae	SHORT $LN9@FreqBench
; Line 1925
	mov	eax, DWORD PTR _i$71140[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _threads$[ebp]
	mov	edx, DWORD PTR [ecx+eax+8]
	mov	DWORD PTR ___result__$71156[ebp], edx
	cmp	DWORD PTR ___result__$71156[ebp], 0
	je	SHORT $LN8@FreqBench
	mov	eax, DWORD PTR ___result__$71156[ebp]
	mov	DWORD PTR $T73380[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _threads$[ebp]
	call	??1CFreqThreads@@QAE@XZ			; CFreqThreads::~CFreqThreads
	mov	eax, DWORD PTR $T73380[ebp]
	jmp	$LN22@FreqBench
$LN8@FreqBench:
; Line 1926
	jmp	SHORT $LN10@FreqBench
$LN9@FreqBench:
; Line 1928
	jmp	$LN7@FreqBench
$LN19@FreqBench:
; Line 1931
	lea	ecx, DWORD PTR _progressInfoSpec$[ebp]
	call	?SetStartTime@CBenchInfoCalc@@QAEXXZ	; CBenchInfoCalc::SetStartTime
; Line 1932
	mov	ecx, DWORD PTR ?g_BenchCpuFreqTemp@@3IA	; g_BenchCpuFreqTemp
	mov	DWORD PTR _sum$71160[ebp], ecx
; Line 1933
	mov	edx, DWORD PTR _numIterations$[ebp]
	mov	DWORD PTR _k$71161[ebp], edx
	mov	eax, DWORD PTR _numIterations$[ebp+4]
	mov	DWORD PTR _k$71161[ebp+4], eax
	jmp	SHORT $LN6@FreqBench
$LN5@FreqBench:
	mov	ecx, DWORD PTR _k$71161[ebp]
	sub	ecx, 1
	mov	edx, DWORD PTR _k$71161[ebp+4]
	sbb	edx, 0
	mov	DWORD PTR _k$71161[ebp], ecx
	mov	DWORD PTR _k$71161[ebp+4], edx
$LN6@FreqBench:
	cmp	DWORD PTR _k$71161[ebp+4], 0
	ja	SHORT $LN32@FreqBench
	cmp	DWORD PTR _k$71161[ebp], 0
	jbe	SHORT $LN4@FreqBench
$LN32@FreqBench:
; Line 1935
	mov	eax, DWORD PTR __file$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR __file$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$71165[ebp], eax
	cmp	DWORD PTR ___result__$71165[ebp], 0
	je	SHORT $LN3@FreqBench
	mov	ecx, DWORD PTR ___result__$71165[ebp]
	mov	DWORD PTR $T73381[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _threads$[ebp]
	call	??1CFreqThreads@@QAE@XZ			; CFreqThreads::~CFreqThreads
	mov	eax, DWORD PTR $T73381[ebp]
	jmp	$LN22@FreqBench
$LN3@FreqBench:
; Line 1936
	mov	edx, DWORD PTR ?g_BenchCpuFreqTemp@@3IA	; g_BenchCpuFreqTemp
	push	edx
	mov	eax, DWORD PTR _bufferSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sum$71160[ebp]
	push	ecx
	call	_CountCpuFreq@12
	mov	DWORD PTR _sum$71160[ebp], eax
; Line 1937
	jmp	$LN5@FreqBench
$LN4@FreqBench:
; Line 1938
	mov	edx, DWORD PTR _res$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, DWORD PTR _sum$71160[ebp]
	mov	ecx, DWORD PTR _res$[ebp]
	mov	DWORD PTR [ecx], eax
$LN7@FreqBench:
; Line 1940
	lea	ecx, DWORD PTR _info$[ebp]
	call	??0CBenchInfo@@QAE@XZ			; CBenchInfo::CBenchInfo
; Line 1941
	lea	edx, DWORD PTR _info$[ebp]
	push	edx
	lea	ecx, DWORD PTR _progressInfoSpec$[ebp]
	call	?SetFinishTime@CBenchInfoCalc@@QAEXAAUCBenchInfo@@@Z ; CBenchInfoCalc::SetFinishTime
; Line 1943
	mov	DWORD PTR _info$[ebp+32], 0
	mov	DWORD PTR _info$[ebp+36], 0
; Line 1944
	mov	DWORD PTR _info$[ebp+40], 0
	mov	DWORD PTR _info$[ebp+44], 0
; Line 1945
	mov	DWORD PTR _info$[ebp+48], 1
	mov	DWORD PTR _info$[ebp+52], 0
; Line 1947
	cmp	DWORD PTR __file$[ebp], 0
	je	$LN2@FreqBench
; Line 1950
	mov	eax, DWORD PTR _bufferSize$[ebp]
	xor	ecx, ecx
	push	ecx
	push	eax
	mov	edx, DWORD PTR _numIterations$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _numIterations$[ebp]
	push	eax
	call	__allmul
	mov	ecx, DWORD PTR _numThreads$[ebp]
	xor	esi, esi
	push	esi
	push	ecx
	push	edx
	push	eax
	call	__allmul
	mov	ecx, DWORD PTR _complexity$[ebp]
	xor	esi, esi
	push	esi
	push	ecx
	push	edx
	push	eax
	call	__allmul
	mov	DWORD PTR _numCommands$71170[ebp], eax
	mov	DWORD PTR _numCommands$71170[ebp+4], edx
; Line 1951
	mov	edx, DWORD PTR _numCommands$71170[ebp+4]
	push	edx
	mov	eax, DWORD PTR _numCommands$71170[ebp]
	push	eax
	lea	ecx, DWORD PTR _info$[ebp]
	call	?GetSpeed@CBenchInfo@@QBE_K_K@Z		; CBenchInfo::GetSpeed
	mov	DWORD PTR _rating$71172[ebp], eax
	mov	DWORD PTR _rating$71172[ebp+4], edx
; Line 1952
	mov	ecx, DWORD PTR _numThreads$[ebp]
	xor	edx, edx
	push	edx
	push	ecx
	mov	eax, DWORD PTR _rating$71172[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _rating$71172[ebp]
	push	ecx
	call	__aulldiv
	mov	ecx, DWORD PTR _cpuFreq$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
; Line 1956
	movzx	edx, BYTE PTR _showFreq$[ebp]
	test	edx, edx
	je	SHORT $LN28@FreqBench
	mov	eax, DWORD PTR _cpuFreq$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv188[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR tv188[ebp+4], edx
	jmp	SHORT $LN29@FreqBench
$LN28@FreqBench:
	mov	DWORD PTR tv188[ebp], 0
	mov	DWORD PTR tv188[ebp+4], 0
$LN29@FreqBench:
	push	0
	mov	eax, DWORD PTR tv188[ebp+4]
	push	eax
	mov	ecx, DWORD PTR tv188[ebp]
	push	ecx
	movzx	edx, BYTE PTR _showFreq$[ebp]
	push	edx
	mov	eax, DWORD PTR _rating$71172[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _rating$71172[ebp]
	push	ecx
	push	0
	lea	edx, DWORD PTR _info$[ebp]
	push	edx
	mov	eax, DWORD PTR __file$[ebp]
	push	eax
	call	?PrintResults@@YGXPAUIBenchPrintCallback@@ABUCBenchInfo@@I_K_N2PAUCTotalBenchRes@@@Z ; PrintResults
; Line 1958
	mov	ecx, DWORD PTR __file$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR __file$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$71173[ebp], eax
	cmp	DWORD PTR ___result__$71173[ebp], 0
	je	SHORT $LN2@FreqBench
	mov	ecx, DWORD PTR ___result__$71173[ebp]
	mov	DWORD PTR $T73384[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _threads$[ebp]
	call	??1CFreqThreads@@QAE@XZ			; CFreqThreads::~CFreqThreads
	mov	eax, DWORD PTR $T73384[ebp]
	jmp	SHORT $LN22@FreqBench
$LN2@FreqBench:
; Line 1961
	mov	DWORD PTR $T73385[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _threads$[ebp]
	call	??1CFreqThreads@@QAE@XZ			; CFreqThreads::~CFreqThreads
	mov	eax, DWORD PTR $T73385[ebp]
$LN22@FreqBench:
; Line 1962
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN38@FreqBench
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 288				; 00000120H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
	npad	1
$LN38@FreqBench:
	DD	3
	DD	$LN37@FreqBench
$LN37@FreqBench:
	DD	-100					; ffffff9cH
	DD	64					; 00000040H
	DD	$LN33@FreqBench
	DD	-116					; ffffff8cH
	DD	8
	DD	$LN34@FreqBench
	DD	-216					; ffffff28H
	DD	56					; 00000038H
	DD	$LN35@FreqBench
$LN35@FreqBench:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	0
$LN34@FreqBench:
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN33@FreqBench:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	103					; 00000067H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	83					; 00000053H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?FreqBench@@YGJ_KIPAUIBenchPrintCallback@@_NAA_KAAI@Z$0:
	lea	ecx, DWORD PTR _threads$[ebp]
	jmp	??1CFreqThreads@@QAE@XZ			; CFreqThreads::~CFreqThreads
__unwindfunclet$?FreqBench@@YGJ_KIPAUIBenchPrintCallback@@_NAA_KAAI@Z$1:
	mov	eax, DWORD PTR $T73376[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?FreqBench@@YGJ_KIPAUIBenchPrintCallback@@_NAA_KAAI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-288]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?FreqBench@@YGJ_KIPAUIBenchPrintCallback@@_NAA_KAAI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?FreqBench@@YGJ_KIPAUIBenchPrintCallback@@_NAA_KAAI@Z ENDP ; FreqBench
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_k$70640 = -16						; size = 8
_sum$ = -8						; size = 4
_p$ = -4						; size = 4
_param$ = 8						; size = 4
?FreqThreadFunction@@YGIPAX@Z PROC			; FreqThreadFunction
; Line 1380
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1381
	mov	eax, DWORD PTR _param$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 1383
	mov	ecx, DWORD PTR ?g_BenchCpuFreqTemp@@3IA	; g_BenchCpuFreqTemp
	mov	DWORD PTR _sum$[ebp], ecx
; Line 1384
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR _k$70640[ebp], eax
	mov	ecx, DWORD PTR [edx+28]
	mov	DWORD PTR _k$70640[ebp+4], ecx
	jmp	SHORT $LN4@FreqThread
$LN3@FreqThread:
	mov	edx, DWORD PTR _k$70640[ebp]
	sub	edx, 1
	mov	eax, DWORD PTR _k$70640[ebp+4]
	sbb	eax, 0
	mov	DWORD PTR _k$70640[ebp], edx
	mov	DWORD PTR _k$70640[ebp+4], eax
$LN4@FreqThread:
	cmp	DWORD PTR _k$70640[ebp+4], 0
	ja	SHORT $LN7@FreqThread
	cmp	DWORD PTR _k$70640[ebp], 0
	jbe	SHORT $LN2@FreqThread
$LN7@FreqThread:
; Line 1386
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 1387
	mov	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN1@FreqThread
; Line 1388
	xor	eax, eax
	jmp	SHORT $LN5@FreqThread
$LN1@FreqThread:
; Line 1389
	mov	eax, DWORD PTR ?g_BenchCpuFreqTemp@@3IA	; g_BenchCpuFreqTemp
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _sum$[ebp]
	push	eax
	call	_CountCpuFreq@12
	mov	DWORD PTR _sum$[ebp], eax
; Line 1390
	jmp	SHORT $LN3@FreqThread
$LN2@FreqThread:
; Line 1391
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [ecx+12], edx
; Line 1392
	xor	eax, eax
$LN5@FreqThread:
; Line 1393
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?FreqThreadFunction@@YGIPAX@Z ENDP			; FreqThreadFunction
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CFreqThreads@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CFreqThreads@@QAE@XZ PROC				; CFreqThreads::CFreqThreads, COMDAT
; _this$ = ecx
; Line 1400
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CFreqThreads@@QAE@XZ ENDP				; CFreqThreads::CFreqThreads
_TEXT	ENDS
PUBLIC	?Wait@CFreqInfo@@QAEXXZ				; CFreqInfo::Wait
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?WaitAll@CFreqThreads@@QAEXXZ
_TEXT	SEGMENT
_i$70664 = -8						; size = 4
_this$ = -4						; size = 4
?WaitAll@CFreqThreads@@QAEXXZ PROC			; CFreqThreads::WaitAll, COMDAT
; _this$ = ecx
; Line 1402
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1403
	mov	DWORD PTR _i$70664[ebp], 0
	jmp	SHORT $LN3@WaitAll
$LN2@WaitAll:
	mov	eax, DWORD PTR _i$70664[ebp]
	add	eax, 1
	mov	DWORD PTR _i$70664[ebp], eax
$LN3@WaitAll:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$70664[ebp]
	cmp	edx, DWORD PTR [ecx+4]
	jae	SHORT $LN1@WaitAll
; Line 1404
	mov	ecx, DWORD PTR _i$70664[ebp]
	shl	ecx, 5
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax]
	call	?Wait@CFreqInfo@@QAEXXZ			; CFreqInfo::Wait
	jmp	SHORT $LN2@WaitAll
$LN1@WaitAll:
; Line 1405
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 1406
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?WaitAll@CFreqThreads@@QAEXXZ ENDP			; CFreqThreads::WaitAll
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Wait@CFreqInfo@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Wait@CFreqInfo@@QAEXXZ PROC				; CFreqInfo::Wait, COMDAT
; _this$ = ecx
; Line 1373
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1374
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Wait@CThread@NWindows@@QAEIXZ		; NWindows::CThread::Wait
; Line 1375
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Close@CThread@NWindows@@QAEIXZ		; NWindows::CThread::Close
; Line 1376
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Wait@CFreqInfo@@QAEXXZ ENDP				; CFreqInfo::Wait
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CFreqThreads@@QAE@XZ
_TEXT	SEGMENT
tv69 = -16						; size = 4
$T73408 = -12						; size = 4
$T73407 = -8						; size = 4
_this$ = -4						; size = 4
??1CFreqThreads@@QAE@XZ PROC				; CFreqThreads::~CFreqThreads, COMDAT
; _this$ = ecx
; Line 1408
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1409
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WaitAll@CFreqThreads@@QAEXXZ		; CFreqThreads::WaitAll
; Line 1410
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T73408[ebp], ecx
	mov	edx, DWORD PTR $T73408[ebp]
	mov	DWORD PTR $T73407[ebp], edx
	cmp	DWORD PTR $T73407[ebp], 0
	je	SHORT $LN3@CFreqThrea
	push	3
	mov	ecx, DWORD PTR $T73407[ebp]
	call	??_ECFreqInfo@@QAEPAXI@Z
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN1@CFreqThrea
$LN3@CFreqThrea:
	mov	DWORD PTR tv69[ebp], 0
$LN1@CFreqThrea:
; Line 1411
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CFreqThreads@@QAE@XZ ENDP				; CFreqThreads::~CFreqThreads
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CFreqInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CFreqInfo@@QAE@XZ PROC				; CFreqInfo::CFreqInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CThread@NWindows@@QAE@XZ		; NWindows::CThread::CThread
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CFreqInfo@@QAE@XZ ENDP				; CFreqInfo::CFreqInfo
_TEXT	ENDS
PUBLIC	??B?$CMyComPtr@UIHasher@@@@QBEPAUIHasher@@XZ	; CMyComPtr<IHasher>::operator IHasher *
PUBLIC	??0?$CMyComPtr@UIHasher@@@@QAE@XZ		; CMyComPtr<IHasher>::CMyComPtr<IHasher>
PUBLIC	?WaitAll@CCrcThreads@@QAEXXZ			; CCrcThreads::WaitAll
PUBLIC	??$QueryInterface@UICompressSetCoderProperties@@@?$CMyComPtr@UIHasher@@@@QBEJABU_GUID@@PAPAUICompressSetCoderProperties@@@Z ; CMyComPtr<IHasher>::QueryInterface<ICompressSetCoderProperties>
PUBLIC	??7?$CMyComPtr@UIHasher@@@@QBE_NXZ		; CMyComPtr<IHasher>::operator!
PUBLIC	??1CCrcThreads@@QAE@XZ				; CCrcThreads::~CCrcThreads
PUBLIC	??0CCrcInfo@@QAE@XZ				; CCrcInfo::CCrcInfo
PUBLIC	??0CCrcThreads@@QAE@XZ				; CCrcThreads::CCrcThreads
EXTRN	?CreateHasher@@YGJ_KAAVAString@@AAV?$CMyComPtr@UIHasher@@@@@Z:PROC ; CreateHasher
xdata$x	SEGMENT
__ehfuncinfo$?CrcBench@@YGJ_KIIAA_KIIPBIABVCOneMethodInfo@@PAUIBenchPrintCallback@@PAUCTotalBenchRes@@_N0@Z DD 019930522H
	DD	09H
	DD	FLAT:__unwindtable$?CrcBench@@YGJ_KIIAA_KIIPBIABVCOneMethodInfo@@PAUIBenchPrintCallback@@PAUCTotalBenchRes@@_N0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?CrcBench@@YGJ_KIIAA_KIIPBIABVCOneMethodInfo@@PAUIBenchPrintCallback@@PAUCTotalBenchRes@@_N0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CrcBench@@YGJ_KIIAA_KIIPBIABVCOneMethodInfo@@PAUIBenchPrintCallback@@PAUCTotalBenchRes@@_N0@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?CrcBench@@YGJ_KIIAA_KIIPBIABVCOneMethodInfo@@PAUIBenchPrintCallback@@PAUCTotalBenchRes@@_N0@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?CrcBench@@YGJ_KIIAA_KIIPBIABVCOneMethodInfo@@PAUIBenchPrintCallback@@PAUCTotalBenchRes@@_N0@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?CrcBench@@YGJ_KIIAA_KIIPBIABVCOneMethodInfo@@PAUIBenchPrintCallback@@PAUCTotalBenchRes@@_N0@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$?CrcBench@@YGJ_KIIAA_KIIPBIABVCOneMethodInfo@@PAUIBenchPrintCallback@@PAUCTotalBenchRes@@_N0@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?CrcBench@@YGJ_KIIAA_KIIPBIABVCOneMethodInfo@@PAUIBenchPrintCallback@@PAUCTotalBenchRes@@_N0@Z$5
	DD	02H
	DD	FLAT:__unwindfunclet$?CrcBench@@YGJ_KIIAA_KIIPBIABVCOneMethodInfo@@PAUIBenchPrintCallback@@PAUCTotalBenchRes@@_N0@Z$6
	DD	06H
	DD	FLAT:__unwindfunclet$?CrcBench@@YGJ_KIIAA_KIIPBIABVCOneMethodInfo@@PAUIBenchPrintCallback@@PAUCTotalBenchRes@@_N0@Z$7
	DD	07H
	DD	FLAT:__unwindfunclet$?CrcBench@@YGJ_KIIAA_KIIPBIABVCOneMethodInfo@@PAUIBenchPrintCallback@@PAUCTotalBenchRes@@_N0@Z$8
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv242 = -524						; size = 4
tv154 = -520						; size = 4
tv88 = -516						; size = 4
$T73438 = -512						; size = 4
$T73437 = -508						; size = 4
$T73436 = -504						; size = 4
$T73435 = -500						; size = 4
$T73434 = -496						; size = 4
$T73433 = -492						; size = 4
$T73432 = -488						; size = 4
$T73431 = -484						; size = 4
$T73428 = -480						; size = 4
$T73427 = -476						; size = 4
$T73426 = -472						; size = 4
$T73423 = -468						; size = 4
$T73422 = -464						; size = 4
$T73421 = -460						; size = 4
$T73418 = -456						; size = 4
$T73417 = -452						; size = 4
$T73416 = -448						; size = 4
___result__$71289 = -444				; size = 4
_rating$71288 = -440					; size = 8
_numCommands$71287 = -432				; size = 8
_unpSizeThreads$ = -424					; size = 8
_unpSize$ = -416					; size = 8
_info$ = -404						; size = 56
___result__$71280 = -344				; size = 4
___result__$71277 = -340				; size = 4
_reduceSize$71276 = -332				; size = 8
_scp$71274 = -316					; size = 4
___result__$71267 = -308				; size = 4
_name$71266 = -300					; size = 12
_hasher$71265 = -280					; size = 4
___result__$71260 = -272				; size = 4
___result__$71254 = -268				; size = 4
_info$71253 = -264					; size = 4
_data$71247 = -260					; size = 4
___result__$71244 = -256				; size = 4
_reduceSize$71243 = -248				; size = 8
_scp$71237 = -232					; size = 4
___result__$71230 = -224				; size = 4
_name$71229 = -216					; size = 12
_info$71228 = -200					; size = 4
_i$71224 = -196						; size = 4
_threads$ = -188					; size = 8
_progressInfoSpec$ = -172				; size = 64
_numIterations$ = -104					; size = 8
_bsize$ = -96						; size = 4
_RG$ = -88						; size = 8
_buf$ = -76						; size = 4
_totalSize$ = -72					; size = 4
_buffer$ = -64						; size = 12
_hashID$ = -44						; size = 8
_methodName$ = -28					; size = 12
__$EHRec$ = -12						; size = 12
_complexInCommands$ = 8					; size = 8
_numThreads$ = 16					; size = 4
_bufferSize$ = 20					; size = 4
_speed$ = 24						; size = 4
_complexity$ = 28					; size = 4
_benchWeight$ = 32					; size = 4
_checkSum$ = 36						; size = 4
_method$ = 40						; size = 4
__file$ = 44						; size = 4
_encodeRes$ = 48					; size = 4
_showFreq$ = 52						; size = 1
_cpuFreq$ = 56						; size = 8
?CrcBench@@YGJ_KIIAA_KIIPBIABVCOneMethodInfo@@PAUIBenchPrintCallback@@PAUCTotalBenchRes@@_N0@Z PROC ; CrcBench
; Line 1977
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CrcBench@@YGJ_KIIAA_KIIPBIABVCOneMethodInfo@@PAUIBenchPrintCallback@@PAUCTotalBenchRes@@_N0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 512				; 00000200H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 128				; 00000080H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 1978
	cmp	DWORD PTR _numThreads$[ebp], 0
	jne	SHORT $LN30@CrcBench
; Line 1979
	mov	DWORD PTR _numThreads$[ebp], 1
$LN30@CrcBench:
; Line 1985
	mov	eax, DWORD PTR _method$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _methodName$[ebp]
	call	??0AString@@QAE@ABV0@@Z			; AString::AString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 1990
	lea	ecx, DWORD PTR _hashID$[ebp]
	push	ecx
	lea	edx, DWORD PTR _methodName$[ebp]
	push	edx
	call	?FindHashMethod@@YG_NABVAString@@AA_K@Z	; FindHashMethod
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN29@CrcBench
; Line 1991
	mov	DWORD PTR $T73416[ebp], -2147467263	; 80004001H
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _methodName$[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	eax, DWORD PTR $T73416[ebp]
	jmp	$LN31@CrcBench
$LN29@CrcBench:
; Line 1993
	lea	ecx, DWORD PTR _buffer$[ebp]
	call	??0CBenchBuffer@@QAE@XZ			; CBenchBuffer::CBenchBuffer
	mov	BYTE PTR __$EHRec$[ebp+8], 1
; Line 1994
	mov	ecx, DWORD PTR _bufferSize$[ebp]
	imul	ecx, DWORD PTR _numThreads$[ebp]
	mov	DWORD PTR _totalSize$[ebp], ecx
; Line 1995
	mov	eax, DWORD PTR _totalSize$[ebp]
	xor	edx, edx
	div	DWORD PTR _numThreads$[ebp]
	cmp	eax, DWORD PTR _bufferSize$[ebp]
	je	SHORT $LN28@CrcBench
; Line 1996
	mov	DWORD PTR $T73417[ebp], -2147024882	; 8007000eH
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _buffer$[ebp]
	call	??1CBenchBuffer@@UAE@XZ			; CBenchBuffer::~CBenchBuffer
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _methodName$[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	eax, DWORD PTR $T73417[ebp]
	jmp	$LN31@CrcBench
$LN28@CrcBench:
; Line 1997
	mov	edx, DWORD PTR _totalSize$[ebp]
	push	edx
	lea	ecx, DWORD PTR _buffer$[ebp]
	call	?Alloc@CBenchBuffer@@QAE_NI@Z		; CBenchBuffer::Alloc
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN27@CrcBench
; Line 1998
	mov	DWORD PTR $T73418[ebp], -2147024882	; 8007000eH
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _buffer$[ebp]
	call	??1CBenchBuffer@@UAE@XZ			; CBenchBuffer::~CBenchBuffer
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _methodName$[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	eax, DWORD PTR $T73418[ebp]
	jmp	$LN31@CrcBench
$LN27@CrcBench:
; Line 2000
	mov	ecx, DWORD PTR _buffer$[ebp+8]
	mov	DWORD PTR _buf$[ebp], ecx
; Line 2001
	lea	ecx, DWORD PTR _RG$[ebp]
	call	??0CBaseRandomGenerator@@QAE@XZ		; CBaseRandomGenerator::CBaseRandomGenerator
; Line 2002
	cmp	DWORD PTR _bufferSize$[ebp], 0
	jne	SHORT $LN33@CrcBench
	mov	DWORD PTR tv88[ebp], 1
	jmp	SHORT $LN34@CrcBench
$LN33@CrcBench:
	mov	edx, DWORD PTR _bufferSize$[ebp]
	mov	DWORD PTR tv88[ebp], edx
$LN34@CrcBench:
	mov	eax, DWORD PTR tv88[ebp]
	mov	DWORD PTR _bsize$[ebp], eax
; Line 2003
	push	0
	push	256					; 00000100H
	mov	ecx, DWORD PTR _complexInCommands$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _complexInCommands$[ebp]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _complexity$[ebp]
	xor	esi, esi
	push	esi
	push	ecx
	push	edx
	push	eax
	call	__aulldiv
	mov	ecx, DWORD PTR _bsize$[ebp]
	xor	esi, esi
	push	esi
	push	ecx
	push	edx
	push	eax
	call	__aulldiv
	mov	DWORD PTR _numIterations$[ebp], eax
	mov	DWORD PTR _numIterations$[ebp+4], edx
; Line 2004
	mov	edx, DWORD PTR _numIterations$[ebp]
	or	edx, DWORD PTR _numIterations$[ebp+4]
	jne	SHORT $LN26@CrcBench
; Line 2005
	mov	DWORD PTR _numIterations$[ebp], 1
	mov	DWORD PTR _numIterations$[ebp+4], 0
$LN26@CrcBench:
; Line 2007
	lea	ecx, DWORD PTR _progressInfoSpec$[ebp]
	call	??0CBenchInfoCalc@@QAE@XZ
; Line 2010
	lea	ecx, DWORD PTR _threads$[ebp]
	call	??0CCrcThreads@@QAE@XZ			; CCrcThreads::CCrcThreads
	mov	BYTE PTR __$EHRec$[ebp+8], 2
; Line 2011
	cmp	DWORD PTR _numThreads$[ebp], 1
	jbe	$LN25@CrcBench
; Line 2013
	mov	eax, DWORD PTR _numThreads$[ebp]
	mov	DWORD PTR $T73421[ebp], eax
	xor	ecx, ecx
	mov	eax, DWORD PTR $T73421[ebp]
	mov	edx, 56					; 00000038H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	xor	eax, eax
	add	ecx, 4
	setb	al
	neg	eax
	or	eax, ecx
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T73423[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	cmp	DWORD PTR $T73423[ebp], 0
	je	SHORT $LN35@CrcBench
	mov	ecx, DWORD PTR $T73423[ebp]
	mov	edx, DWORD PTR $T73421[ebp]
	mov	DWORD PTR [ecx], edx
	push	OFFSET ??1CCrcInfo@@QAE@XZ
	push	OFFSET ??0CCrcInfo@@QAE@XZ
	mov	eax, DWORD PTR $T73421[ebp]
	push	eax
	push	56					; 00000038H
	mov	ecx, DWORD PTR $T73423[ebp]
	add	ecx, 4
	push	ecx
	call	??_L@YGXPAXIHP6EX0@Z1@Z
	mov	edx, DWORD PTR $T73423[ebp]
	add	edx, 4
	mov	DWORD PTR tv154[ebp], edx
	jmp	SHORT $LN36@CrcBench
$LN35@CrcBench:
	mov	DWORD PTR tv154[ebp], 0
$LN36@CrcBench:
	mov	eax, DWORD PTR tv154[ebp]
	mov	DWORD PTR $T73422[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR $T73422[ebp]
	mov	DWORD PTR _threads$[ebp], ecx
; Line 2016
	mov	DWORD PTR _i$71224[ebp], 0
	jmp	SHORT $LN24@CrcBench
$LN23@CrcBench:
	mov	edx, DWORD PTR _i$71224[ebp]
	add	edx, 1
	mov	DWORD PTR _i$71224[ebp], edx
$LN24@CrcBench:
	mov	eax, DWORD PTR _i$71224[ebp]
	cmp	eax, DWORD PTR _numThreads$[ebp]
	jae	$LN22@CrcBench
; Line 2018
	mov	ecx, DWORD PTR _i$71224[ebp]
	imul	ecx, 56					; 00000038H
	add	ecx, DWORD PTR _threads$[ebp]
	mov	DWORD PTR _info$71228[ebp], ecx
; Line 2019
	lea	ecx, DWORD PTR _name$71229[ebp]
	call	??0AString@@QAE@XZ			; AString::AString
	mov	BYTE PTR __$EHRec$[ebp+8], 4
; Line 2020
	mov	edx, DWORD PTR _info$71228[ebp]
	add	edx, 40					; 00000028H
	push	edx
	lea	eax, DWORD PTR _name$71229[ebp]
	push	eax
	mov	ecx, DWORD PTR _hashID$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _hashID$[ebp]
	push	edx
	call	?CreateHasher@@YGJ_KAAVAString@@AAV?$CMyComPtr@UIHasher@@@@@Z ; CreateHasher
	mov	DWORD PTR ___result__$71230[ebp], eax
	cmp	DWORD PTR ___result__$71230[ebp], 0
	je	SHORT $LN21@CrcBench
	mov	eax, DWORD PTR ___result__$71230[ebp]
	mov	DWORD PTR $T73426[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _name$71229[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _threads$[ebp]
	call	??1CCrcThreads@@QAE@XZ			; CCrcThreads::~CCrcThreads
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _buffer$[ebp]
	call	??1CBenchBuffer@@UAE@XZ			; CBenchBuffer::~CBenchBuffer
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _methodName$[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	eax, DWORD PTR $T73426[ebp]
	jmp	$LN31@CrcBench
$LN21@CrcBench:
; Line 2021
	mov	ecx, DWORD PTR _info$71228[ebp]
	add	ecx, 40					; 00000028H
	call	??7?$CMyComPtr@UIHasher@@@@QBE_NXZ	; CMyComPtr<IHasher>::operator!
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN20@CrcBench
; Line 2022
	mov	DWORD PTR $T73427[ebp], -2147467263	; 80004001H
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _name$71229[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _threads$[ebp]
	call	??1CCrcThreads@@QAE@XZ			; CCrcThreads::~CCrcThreads
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _buffer$[ebp]
	call	??1CBenchBuffer@@UAE@XZ			; CBenchBuffer::~CBenchBuffer
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _methodName$[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	eax, DWORD PTR $T73427[ebp]
	jmp	$LN31@CrcBench
$LN20@CrcBench:
; Line 2023
	lea	ecx, DWORD PTR _scp$71237[ebp]
	call	??0?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderProperties>::CMyComPtr<ICompressSetCoderProperties>
	mov	BYTE PTR __$EHRec$[ebp+8], 5
; Line 2024
	lea	ecx, DWORD PTR _scp$71237[ebp]
	call	??I?$CMyComPtr@UICompressSetCoderProperties@@@@QAEPAPAUICompressSetCoderProperties@@XZ ; CMyComPtr<ICompressSetCoderProperties>::operator&
	push	eax
	push	OFFSET _IID_ICompressSetCoderProperties
	mov	ecx, DWORD PTR _info$71228[ebp]
	add	ecx, 40					; 00000028H
	call	??$QueryInterface@UICompressSetCoderProperties@@@?$CMyComPtr@UIHasher@@@@QBEJABU_GUID@@PAPAUICompressSetCoderProperties@@@Z ; CMyComPtr<IHasher>::QueryInterface<ICompressSetCoderProperties>
; Line 2025
	lea	ecx, DWORD PTR _scp$71237[ebp]
	call	??B?$CMyComPtr@UICompressSetCoderProperties@@@@QBEPAUICompressSetCoderProperties@@XZ ; CMyComPtr<ICompressSetCoderProperties>::operator ICompressSetCoderProperties *
	test	eax, eax
	je	$LN19@CrcBench
; Line 2027
	mov	DWORD PTR _reduceSize$71243[ebp], 1
	mov	DWORD PTR _reduceSize$71243[ebp+4], 0
; Line 2028
	lea	edx, DWORD PTR _reduceSize$71243[ebp]
	push	edx
	lea	ecx, DWORD PTR _scp$71237[ebp]
	call	??B?$CMyComPtr@UICompressSetCoderProperties@@@@QBEPAUICompressSetCoderProperties@@XZ ; CMyComPtr<ICompressSetCoderProperties>::operator ICompressSetCoderProperties *
	push	eax
	mov	ecx, DWORD PTR _method$[ebp]
	call	?SetCoderProps@CProps@@QBEJPAUICompressSetCoderProperties@@PB_K@Z ; CProps::SetCoderProps
	mov	DWORD PTR ___result__$71244[ebp], eax
	cmp	DWORD PTR ___result__$71244[ebp], 0
	je	SHORT $LN19@CrcBench
	mov	eax, DWORD PTR ___result__$71244[ebp]
	mov	DWORD PTR $T73428[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _scp$71237[ebp]
	call	??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderProperties>::~CMyComPtr<ICompressSetCoderProperties>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _name$71229[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _threads$[ebp]
	call	??1CCrcThreads@@QAE@XZ			; CCrcThreads::~CCrcThreads
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _buffer$[ebp]
	call	??1CBenchBuffer@@UAE@XZ			; CBenchBuffer::~CBenchBuffer
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _methodName$[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	eax, DWORD PTR $T73428[ebp]
	jmp	$LN31@CrcBench
$LN19@CrcBench:
; Line 2031
	mov	ecx, DWORD PTR _bufferSize$[ebp]
	imul	ecx, DWORD PTR _i$71224[ebp]
	add	ecx, DWORD PTR _buf$[ebp]
	mov	DWORD PTR _data$71247[ebp], ecx
; Line 2032
	mov	edx, DWORD PTR _info$71228[ebp]
	mov	eax, DWORD PTR __file$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 2033
	mov	ecx, DWORD PTR _info$71228[ebp]
	mov	edx, DWORD PTR _data$71247[ebp]
	mov	DWORD PTR [ecx+12], edx
; Line 2034
	mov	eax, DWORD PTR _info$71228[ebp]
	mov	ecx, DWORD PTR _numIterations$[ebp]
	mov	DWORD PTR [eax+24], ecx
	mov	edx, DWORD PTR _numIterations$[ebp+4]
	mov	DWORD PTR [eax+28], edx
; Line 2035
	mov	eax, DWORD PTR _info$71228[ebp]
	mov	ecx, DWORD PTR _bufferSize$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 2036
	lea	edx, DWORD PTR _RG$[ebp]
	push	edx
	mov	eax, DWORD PTR _bufferSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$71247[ebp]
	push	ecx
	call	?RandGenCrc@@YGIPAEIAAVCBaseRandomGenerator@@@Z ; RandGenCrc
; Line 2037
	mov	edx, DWORD PTR _info$71228[ebp]
	mov	BYTE PTR [edx+32], 0
; Line 2038
	cmp	DWORD PTR _checkSum$[ebp], 0
	je	SHORT $LN17@CrcBench
; Line 2040
	mov	eax, DWORD PTR _info$71228[ebp]
	mov	ecx, DWORD PTR _checkSum$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+36], edx
; Line 2041
	cmp	DWORD PTR _checkSum$[ebp], 0
	je	SHORT $LN37@CrcBench
	cmp	DWORD PTR _i$71224[ebp], 0
	jne	SHORT $LN37@CrcBench
	mov	DWORD PTR tv242[ebp], 1
	jmp	SHORT $LN38@CrcBench
$LN37@CrcBench:
	mov	DWORD PTR tv242[ebp], 0
$LN38@CrcBench:
	mov	eax, DWORD PTR _info$71228[ebp]
	mov	cl, BYTE PTR tv242[ebp]
	mov	BYTE PTR [eax+32], cl
$LN17@CrcBench:
; Line 2045
	mov	edx, DWORD PTR _i$71224[ebp]
	shl	edx, 4
	imul	edx, 21					; 00000015H
	and	edx, 2047				; 000007ffH
	mov	eax, DWORD PTR _info$71228[ebp]
	mov	DWORD PTR [eax+48], edx
; Line 2047
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _scp$71237[ebp]
	call	??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderProperties>::~CMyComPtr<ICompressSetCoderProperties>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _name$71229[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	jmp	$LN23@CrcBench
$LN22@CrcBench:
; Line 2049
	lea	ecx, DWORD PTR _progressInfoSpec$[ebp]
	call	?SetStartTime@CBenchInfoCalc@@QAEXXZ	; CBenchInfoCalc::SetStartTime
; Line 2051
	mov	DWORD PTR _i$71224[ebp], 0
	jmp	SHORT $LN16@CrcBench
$LN15@CrcBench:
	mov	ecx, DWORD PTR _i$71224[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$71224[ebp], ecx
$LN16@CrcBench:
	mov	edx, DWORD PTR _i$71224[ebp]
	cmp	edx, DWORD PTR _numThreads$[ebp]
	jae	$LN14@CrcBench
; Line 2053
	mov	eax, DWORD PTR _i$71224[ebp]
	imul	eax, 56					; 00000038H
	add	eax, DWORD PTR _threads$[ebp]
	mov	DWORD PTR _info$71253[ebp], eax
; Line 2054
	mov	ecx, DWORD PTR _info$71253[ebp]
	push	ecx
	push	OFFSET ?CrcThreadFunction@@YGIPAX@Z	; CrcThreadFunction
	mov	ecx, DWORD PTR _info$71253[ebp]
	call	?Create@CThread@NWindows@@QAEIP6GIPAX@Z0@Z ; NWindows::CThread::Create
	mov	DWORD PTR ___result__$71254[ebp], eax
	cmp	DWORD PTR ___result__$71254[ebp], 0
	je	SHORT $LN13@CrcBench
	mov	edx, DWORD PTR ___result__$71254[ebp]
	mov	DWORD PTR $T73431[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _threads$[ebp]
	call	??1CCrcThreads@@QAE@XZ			; CCrcThreads::~CCrcThreads
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _buffer$[ebp]
	call	??1CBenchBuffer@@UAE@XZ			; CBenchBuffer::~CBenchBuffer
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _methodName$[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	eax, DWORD PTR $T73431[ebp]
	jmp	$LN31@CrcBench
$LN13@CrcBench:
; Line 2055
	mov	eax, DWORD PTR _threads$[ebp+4]
	add	eax, 1
	mov	DWORD PTR _threads$[ebp+4], eax
; Line 2056
	jmp	$LN15@CrcBench
$LN14@CrcBench:
; Line 2057
	lea	ecx, DWORD PTR _threads$[ebp]
	call	?WaitAll@CCrcThreads@@QAEXXZ		; CCrcThreads::WaitAll
; Line 2058
	mov	DWORD PTR _i$71224[ebp], 0
	jmp	SHORT $LN12@CrcBench
$LN11@CrcBench:
	mov	ecx, DWORD PTR _i$71224[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$71224[ebp], ecx
$LN12@CrcBench:
	mov	edx, DWORD PTR _i$71224[ebp]
	cmp	edx, DWORD PTR _numThreads$[ebp]
	jae	SHORT $LN10@CrcBench
; Line 2060
	mov	eax, DWORD PTR _i$71224[ebp]
	imul	eax, 56					; 00000038H
	mov	ecx, DWORD PTR _threads$[ebp]
	mov	edx, DWORD PTR [ecx+eax+44]
	mov	DWORD PTR ___result__$71260[ebp], edx
	cmp	DWORD PTR ___result__$71260[ebp], 0
	je	SHORT $LN9@CrcBench
	mov	eax, DWORD PTR ___result__$71260[ebp]
	mov	DWORD PTR $T73432[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _threads$[ebp]
	call	??1CCrcThreads@@QAE@XZ			; CCrcThreads::~CCrcThreads
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _buffer$[ebp]
	call	??1CBenchBuffer@@UAE@XZ			; CBenchBuffer::~CBenchBuffer
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _methodName$[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	eax, DWORD PTR $T73432[ebp]
	jmp	$LN31@CrcBench
$LN9@CrcBench:
; Line 2061
	jmp	SHORT $LN11@CrcBench
$LN10@CrcBench:
; Line 2063
	jmp	$LN8@CrcBench
$LN25@CrcBench:
; Line 2066
	lea	ecx, DWORD PTR _RG$[ebp]
	push	ecx
	mov	edx, DWORD PTR _bufferSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	?RandGenCrc@@YGIPAEIAAVCBaseRandomGenerator@@@Z ; RandGenCrc
; Line 2067
	lea	ecx, DWORD PTR _progressInfoSpec$[ebp]
	call	?SetStartTime@CBenchInfoCalc@@QAEXXZ	; CBenchInfoCalc::SetStartTime
; Line 2068
	lea	ecx, DWORD PTR _hasher$71265[ebp]
	call	??0?$CMyComPtr@UIHasher@@@@QAE@XZ	; CMyComPtr<IHasher>::CMyComPtr<IHasher>
	mov	BYTE PTR __$EHRec$[ebp+8], 6
; Line 2069
	lea	ecx, DWORD PTR _name$71266[ebp]
	call	??0AString@@QAE@XZ			; AString::AString
	mov	BYTE PTR __$EHRec$[ebp+8], 7
; Line 2070
	lea	ecx, DWORD PTR _hasher$71265[ebp]
	push	ecx
	lea	edx, DWORD PTR _name$71266[ebp]
	push	edx
	mov	eax, DWORD PTR _hashID$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _hashID$[ebp]
	push	ecx
	call	?CreateHasher@@YGJ_KAAVAString@@AAV?$CMyComPtr@UIHasher@@@@@Z ; CreateHasher
	mov	DWORD PTR ___result__$71267[ebp], eax
	cmp	DWORD PTR ___result__$71267[ebp], 0
	je	SHORT $LN7@CrcBench
	mov	edx, DWORD PTR ___result__$71267[ebp]
	mov	DWORD PTR $T73433[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _name$71266[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _hasher$71265[ebp]
	call	??1?$CMyComPtr@UIHasher@@@@QAE@XZ	; CMyComPtr<IHasher>::~CMyComPtr<IHasher>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _threads$[ebp]
	call	??1CCrcThreads@@QAE@XZ			; CCrcThreads::~CCrcThreads
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _buffer$[ebp]
	call	??1CBenchBuffer@@UAE@XZ			; CBenchBuffer::~CBenchBuffer
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _methodName$[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	eax, DWORD PTR $T73433[ebp]
	jmp	$LN31@CrcBench
$LN7@CrcBench:
; Line 2071
	lea	ecx, DWORD PTR _hasher$71265[ebp]
	call	??7?$CMyComPtr@UIHasher@@@@QBE_NXZ	; CMyComPtr<IHasher>::operator!
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@CrcBench
; Line 2072
	mov	DWORD PTR $T73434[ebp], -2147467263	; 80004001H
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _name$71266[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _hasher$71265[ebp]
	call	??1?$CMyComPtr@UIHasher@@@@QAE@XZ	; CMyComPtr<IHasher>::~CMyComPtr<IHasher>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _threads$[ebp]
	call	??1CCrcThreads@@QAE@XZ			; CCrcThreads::~CCrcThreads
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _buffer$[ebp]
	call	??1CBenchBuffer@@UAE@XZ			; CBenchBuffer::~CBenchBuffer
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _methodName$[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	eax, DWORD PTR $T73434[ebp]
	jmp	$LN31@CrcBench
$LN6@CrcBench:
; Line 2073
	lea	ecx, DWORD PTR _scp$71274[ebp]
	call	??0?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderProperties>::CMyComPtr<ICompressSetCoderProperties>
	mov	BYTE PTR __$EHRec$[ebp+8], 8
; Line 2074
	lea	ecx, DWORD PTR _scp$71274[ebp]
	call	??I?$CMyComPtr@UICompressSetCoderProperties@@@@QAEPAPAUICompressSetCoderProperties@@XZ ; CMyComPtr<ICompressSetCoderProperties>::operator&
	push	eax
	push	OFFSET _IID_ICompressSetCoderProperties
	lea	ecx, DWORD PTR _hasher$71265[ebp]
	call	??$QueryInterface@UICompressSetCoderProperties@@@?$CMyComPtr@UIHasher@@@@QBEJABU_GUID@@PAPAUICompressSetCoderProperties@@@Z ; CMyComPtr<IHasher>::QueryInterface<ICompressSetCoderProperties>
; Line 2075
	lea	ecx, DWORD PTR _scp$71274[ebp]
	call	??B?$CMyComPtr@UICompressSetCoderProperties@@@@QBEPAUICompressSetCoderProperties@@XZ ; CMyComPtr<ICompressSetCoderProperties>::operator ICompressSetCoderProperties *
	test	eax, eax
	je	$LN5@CrcBench
; Line 2077
	mov	DWORD PTR _reduceSize$71276[ebp], 1
	mov	DWORD PTR _reduceSize$71276[ebp+4], 0
; Line 2078
	lea	ecx, DWORD PTR _reduceSize$71276[ebp]
	push	ecx
	lea	ecx, DWORD PTR _scp$71274[ebp]
	call	??B?$CMyComPtr@UICompressSetCoderProperties@@@@QBEPAUICompressSetCoderProperties@@XZ ; CMyComPtr<ICompressSetCoderProperties>::operator ICompressSetCoderProperties *
	push	eax
	mov	ecx, DWORD PTR _method$[ebp]
	call	?SetCoderProps@CProps@@QBEJPAUICompressSetCoderProperties@@PB_K@Z ; CProps::SetCoderProps
	mov	DWORD PTR ___result__$71277[ebp], eax
	cmp	DWORD PTR ___result__$71277[ebp], 0
	je	SHORT $LN5@CrcBench
	mov	edx, DWORD PTR ___result__$71277[ebp]
	mov	DWORD PTR $T73435[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _scp$71274[ebp]
	call	??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderProperties>::~CMyComPtr<ICompressSetCoderProperties>
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _name$71266[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _hasher$71265[ebp]
	call	??1?$CMyComPtr@UIHasher@@@@QAE@XZ	; CMyComPtr<IHasher>::~CMyComPtr<IHasher>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _threads$[ebp]
	call	??1CCrcThreads@@QAE@XZ			; CCrcThreads::~CCrcThreads
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _buffer$[ebp]
	call	??1CBenchBuffer@@UAE@XZ			; CBenchBuffer::~CBenchBuffer
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _methodName$[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	eax, DWORD PTR $T73435[ebp]
	jmp	$LN31@CrcBench
$LN5@CrcBench:
; Line 2080
	mov	eax, DWORD PTR __file$[ebp]
	push	eax
	lea	ecx, DWORD PTR _hasher$71265[ebp]
	call	??B?$CMyComPtr@UIHasher@@@@QBEPAUIHasher@@XZ ; CMyComPtr<IHasher>::operator IHasher *
	push	eax
	mov	ecx, DWORD PTR _checkSum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _numIterations$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _numIterations$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bufferSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	?CrcBig@@YGJPBXI_KPBIPAUIHasher@@PAUIBenchPrintCallback@@@Z ; CrcBig
	mov	DWORD PTR ___result__$71280[ebp], eax
	cmp	DWORD PTR ___result__$71280[ebp], 0
	je	SHORT $LN3@CrcBench
	mov	eax, DWORD PTR ___result__$71280[ebp]
	mov	DWORD PTR $T73436[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _scp$71274[ebp]
	call	??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderProperties>::~CMyComPtr<ICompressSetCoderProperties>
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _name$71266[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _hasher$71265[ebp]
	call	??1?$CMyComPtr@UIHasher@@@@QAE@XZ	; CMyComPtr<IHasher>::~CMyComPtr<IHasher>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _threads$[ebp]
	call	??1CCrcThreads@@QAE@XZ			; CCrcThreads::~CCrcThreads
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _buffer$[ebp]
	call	??1CBenchBuffer@@UAE@XZ			; CBenchBuffer::~CBenchBuffer
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _methodName$[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	eax, DWORD PTR $T73436[ebp]
	jmp	$LN31@CrcBench
$LN3@CrcBench:
; Line 2081
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _scp$71274[ebp]
	call	??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderProperties>::~CMyComPtr<ICompressSetCoderProperties>
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _name$71266[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _hasher$71265[ebp]
	call	??1?$CMyComPtr@UIHasher@@@@QAE@XZ	; CMyComPtr<IHasher>::~CMyComPtr<IHasher>
$LN8@CrcBench:
; Line 2083
	lea	ecx, DWORD PTR _info$[ebp]
	call	??0CBenchInfo@@QAE@XZ			; CBenchInfo::CBenchInfo
; Line 2084
	lea	ecx, DWORD PTR _info$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _progressInfoSpec$[ebp]
	call	?SetFinishTime@CBenchInfoCalc@@QAEXAAUCBenchInfo@@@Z ; CBenchInfoCalc::SetFinishTime
; Line 2086
	mov	edx, DWORD PTR _bufferSize$[ebp]
	xor	eax, eax
	push	eax
	push	edx
	mov	ecx, DWORD PTR _numIterations$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _numIterations$[ebp]
	push	edx
	call	__allmul
	mov	DWORD PTR _unpSize$[ebp], eax
	mov	DWORD PTR _unpSize$[ebp+4], edx
; Line 2087
	mov	eax, DWORD PTR _numThreads$[ebp]
	xor	ecx, ecx
	push	ecx
	push	eax
	mov	edx, DWORD PTR _unpSize$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _unpSize$[ebp]
	push	eax
	call	__allmul
	mov	DWORD PTR _unpSizeThreads$[ebp], eax
	mov	DWORD PTR _unpSizeThreads$[ebp+4], edx
; Line 2088
	mov	ecx, DWORD PTR _unpSizeThreads$[ebp]
	mov	DWORD PTR _info$[ebp+32], ecx
	mov	edx, DWORD PTR _unpSizeThreads$[ebp+4]
	mov	DWORD PTR _info$[ebp+36], edx
; Line 2089
	mov	eax, DWORD PTR _unpSizeThreads$[ebp]
	mov	DWORD PTR _info$[ebp+40], eax
	mov	ecx, DWORD PTR _unpSizeThreads$[ebp+4]
	mov	DWORD PTR _info$[ebp+44], ecx
; Line 2090
	mov	DWORD PTR _info$[ebp+48], 1
	mov	DWORD PTR _info$[ebp+52], 0
; Line 2092
	cmp	DWORD PTR __file$[ebp], 0
	je	$LN2@CrcBench
; Line 2095
	mov	edx, DWORD PTR _complexity$[ebp]
	xor	eax, eax
	push	eax
	push	edx
	mov	ecx, DWORD PTR _unpSizeThreads$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _unpSizeThreads$[ebp]
	push	edx
	call	__allmul
	push	0
	push	256					; 00000100H
	push	edx
	push	eax
	call	__aulldiv
	mov	DWORD PTR _numCommands$71287[ebp], eax
	mov	DWORD PTR _numCommands$71287[ebp+4], edx
; Line 2096
	mov	eax, DWORD PTR _numCommands$71287[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _numCommands$71287[ebp]
	push	ecx
	lea	ecx, DWORD PTR _info$[ebp]
	call	?GetSpeed@CBenchInfo@@QBE_K_K@Z		; CBenchInfo::GetSpeed
	mov	DWORD PTR _rating$71288[ebp], eax
	mov	DWORD PTR _rating$71288[ebp+4], edx
; Line 2099
	mov	edx, DWORD PTR _encodeRes$[ebp]
	push	edx
	mov	eax, DWORD PTR _cpuFreq$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _cpuFreq$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _showFreq$[ebp]
	push	edx
	mov	eax, DWORD PTR _rating$71288[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _rating$71288[ebp]
	push	ecx
	mov	edx, DWORD PTR _benchWeight$[ebp]
	push	edx
	lea	eax, DWORD PTR _info$[ebp]
	push	eax
	mov	ecx, DWORD PTR __file$[ebp]
	push	ecx
	call	?PrintResults@@YGXPAUIBenchPrintCallback@@ABUCBenchInfo@@I_K_N2PAUCTotalBenchRes@@@Z ; PrintResults
; Line 2101
	mov	edx, DWORD PTR __file$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR __file$[ebp]
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$71289[ebp], eax
	cmp	DWORD PTR ___result__$71289[ebp], 0
	je	SHORT $LN2@CrcBench
	mov	eax, DWORD PTR ___result__$71289[ebp]
	mov	DWORD PTR $T73437[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _threads$[ebp]
	call	??1CCrcThreads@@QAE@XZ			; CCrcThreads::~CCrcThreads
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _buffer$[ebp]
	call	??1CBenchBuffer@@UAE@XZ			; CBenchBuffer::~CBenchBuffer
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _methodName$[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	eax, DWORD PTR $T73437[ebp]
	jmp	SHORT $LN31@CrcBench
$LN2@CrcBench:
; Line 2104
	mov	ecx, DWORD PTR _unpSizeThreads$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _unpSizeThreads$[ebp]
	push	edx
	lea	ecx, DWORD PTR _info$[ebp]
	call	?GetSpeed@CBenchInfo@@QBE_K_K@Z		; CBenchInfo::GetSpeed
	mov	ecx, DWORD PTR _speed$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
; Line 2106
	mov	DWORD PTR $T73438[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _threads$[ebp]
	call	??1CCrcThreads@@QAE@XZ			; CCrcThreads::~CCrcThreads
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _buffer$[ebp]
	call	??1CBenchBuffer@@UAE@XZ			; CBenchBuffer::~CBenchBuffer
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _methodName$[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	eax, DWORD PTR $T73438[ebp]
$LN31@CrcBench:
; Line 2107
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN64@CrcBench
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	56					; 00000038H
$LN64@CrcBench:
	DD	14					; 0000000eH
	DD	$LN63@CrcBench
$LN63@CrcBench:
	DD	-28					; ffffffe4H
	DD	12					; 0000000cH
	DD	$LN48@CrcBench
	DD	-44					; ffffffd4H
	DD	8
	DD	$LN49@CrcBench
	DD	-64					; ffffffc0H
	DD	12					; 0000000cH
	DD	$LN50@CrcBench
	DD	-88					; ffffffa8H
	DD	8
	DD	$LN51@CrcBench
	DD	-172					; ffffff54H
	DD	64					; 00000040H
	DD	$LN52@CrcBench
	DD	-188					; ffffff44H
	DD	8
	DD	$LN53@CrcBench
	DD	-216					; ffffff28H
	DD	12					; 0000000cH
	DD	$LN54@CrcBench
	DD	-232					; ffffff18H
	DD	4
	DD	$LN55@CrcBench
	DD	-248					; ffffff08H
	DD	8
	DD	$LN56@CrcBench
	DD	-280					; fffffee8H
	DD	4
	DD	$LN57@CrcBench
	DD	-300					; fffffed4H
	DD	12					; 0000000cH
	DD	$LN58@CrcBench
	DD	-316					; fffffec4H
	DD	4
	DD	$LN59@CrcBench
	DD	-332					; fffffeb4H
	DD	8
	DD	$LN60@CrcBench
	DD	-404					; fffffe6cH
	DD	56					; 00000038H
	DD	$LN61@CrcBench
$LN61@CrcBench:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	0
$LN60@CrcBench:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	117					; 00000075H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN59@CrcBench:
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	112					; 00000070H
	DB	0
$LN58@CrcBench:
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN57@CrcBench:
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN56@CrcBench:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	117					; 00000075H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN55@CrcBench:
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	112					; 00000070H
	DB	0
$LN54@CrcBench:
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN53@CrcBench:
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN52@CrcBench:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	103					; 00000067H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	83					; 00000053H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	0
$LN51@CrcBench:
	DB	82					; 00000052H
	DB	71					; 00000047H
	DB	0
$LN50@CrcBench:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN49@CrcBench:
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	104					; 00000068H
	DB	73					; 00000049H
	DB	68					; 00000044H
	DB	0
$LN48@CrcBench:
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	78					; 0000004eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CrcBench@@YGJ_KIIAA_KIIPBIABVCOneMethodInfo@@PAUIBenchPrintCallback@@PAUCTotalBenchRes@@_N0@Z$0:
	lea	ecx, DWORD PTR _methodName$[ebp]
	jmp	??1AString@@QAE@XZ			; AString::~AString
__unwindfunclet$?CrcBench@@YGJ_KIIAA_KIIPBIABVCOneMethodInfo@@PAUIBenchPrintCallback@@PAUCTotalBenchRes@@_N0@Z$1:
	lea	ecx, DWORD PTR _buffer$[ebp]
	jmp	??1CBenchBuffer@@UAE@XZ			; CBenchBuffer::~CBenchBuffer
__unwindfunclet$?CrcBench@@YGJ_KIIAA_KIIPBIABVCOneMethodInfo@@PAUIBenchPrintCallback@@PAUCTotalBenchRes@@_N0@Z$2:
	lea	ecx, DWORD PTR _threads$[ebp]
	jmp	??1CCrcThreads@@QAE@XZ			; CCrcThreads::~CCrcThreads
__unwindfunclet$?CrcBench@@YGJ_KIIAA_KIIPBIABVCOneMethodInfo@@PAUIBenchPrintCallback@@PAUCTotalBenchRes@@_N0@Z$3:
	mov	eax, DWORD PTR $T73423[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?CrcBench@@YGJ_KIIAA_KIIPBIABVCOneMethodInfo@@PAUIBenchPrintCallback@@PAUCTotalBenchRes@@_N0@Z$4:
	lea	ecx, DWORD PTR _name$71229[ebp]
	jmp	??1AString@@QAE@XZ			; AString::~AString
__unwindfunclet$?CrcBench@@YGJ_KIIAA_KIIPBIABVCOneMethodInfo@@PAUIBenchPrintCallback@@PAUCTotalBenchRes@@_N0@Z$5:
	lea	ecx, DWORD PTR _scp$71237[ebp]
	jmp	??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderProperties>::~CMyComPtr<ICompressSetCoderProperties>
__unwindfunclet$?CrcBench@@YGJ_KIIAA_KIIPBIABVCOneMethodInfo@@PAUIBenchPrintCallback@@PAUCTotalBenchRes@@_N0@Z$6:
	lea	ecx, DWORD PTR _hasher$71265[ebp]
	jmp	??1?$CMyComPtr@UIHasher@@@@QAE@XZ	; CMyComPtr<IHasher>::~CMyComPtr<IHasher>
__unwindfunclet$?CrcBench@@YGJ_KIIAA_KIIPBIABVCOneMethodInfo@@PAUIBenchPrintCallback@@PAUCTotalBenchRes@@_N0@Z$7:
	lea	ecx, DWORD PTR _name$71266[ebp]
	jmp	??1AString@@QAE@XZ			; AString::~AString
__unwindfunclet$?CrcBench@@YGJ_KIIAA_KIIPBIABVCOneMethodInfo@@PAUIBenchPrintCallback@@PAUCTotalBenchRes@@_N0@Z$8:
	lea	ecx, DWORD PTR _scp$71274[ebp]
	jmp	??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderProperties>::~CMyComPtr<ICompressSetCoderProperties>
__ehhandler$?CrcBench@@YGJ_KIIAA_KIIPBIABVCOneMethodInfo@@PAUIBenchPrintCallback@@PAUCTotalBenchRes@@_N0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-524]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CrcBench@@YGJ_KIIAA_KIIPBIABVCOneMethodInfo@@PAUIBenchPrintCallback@@PAUCTotalBenchRes@@_N0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CrcBench@@YGJ_KIIAA_KIIPBIABVCOneMethodInfo@@PAUIBenchPrintCallback@@PAUCTotalBenchRes@@_N0@Z ENDP ; CrcBench
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv158 = -108						; size = 8
_j$70594 = -100						; size = 4
_sum$70593 = -96					; size = 4
_hashSize$70590 = -92					; size = 4
___result__$70588 = -88					; size = 4
_i$ = -84						; size = 8
_hash$ = -72						; size = 64
__$ArrayPad$ = -4					; size = 4
_data$ = 8						; size = 4
_size$ = 12						; size = 4
_numIterations$ = 16					; size = 8
_checkSum$ = 24						; size = 4
_hf$ = 28						; size = 4
_callback$ = 32						; size = 4
?CrcBig@@YGJPBXI_KPBIPAUIHasher@@PAUIBenchPrintCallback@@@Z PROC ; CrcBig
; Line 1311
	push	ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-108]
	mov	ecx, 27					; 0000001bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1314
	mov	DWORD PTR _i$[ebp], 0
	mov	DWORD PTR _i$[ebp+4], 0
	jmp	SHORT $LN13@CrcBig
$LN12@CrcBig:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _i$[ebp+4]
	adc	ecx, 0
	mov	DWORD PTR _i$[ebp], eax
	mov	DWORD PTR _i$[ebp+4], ecx
$LN13@CrcBig:
	cmp	DWORD PTR _i$[ebp+4], 0
	ja	SHORT $LN11@CrcBig
	jb	SHORT $LN16@CrcBig
	cmp	DWORD PTR _i$[ebp], 64			; 00000040H
	jae	SHORT $LN11@CrcBig
$LN16@CrcBig:
; Line 1315
	mov	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR _hash$[ebp+edx], 0
	jmp	SHORT $LN12@CrcBig
$LN11@CrcBig:
; Line 1316
	mov	DWORD PTR _i$[ebp], 0
	mov	DWORD PTR _i$[ebp+4], 0
	jmp	SHORT $LN10@CrcBig
$LN9@CrcBig:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _i$[ebp+4]
	adc	ecx, 0
	mov	DWORD PTR _i$[ebp], eax
	mov	DWORD PTR _i$[ebp+4], ecx
$LN10@CrcBig:
	mov	edx, DWORD PTR _i$[ebp+4]
	cmp	edx, DWORD PTR _numIterations$[ebp+4]
	ja	$LN8@CrcBig
	jb	SHORT $LN17@CrcBig
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _numIterations$[ebp]
	jae	$LN8@CrcBig
$LN17@CrcBig:
; Line 1318
	cmp	DWORD PTR _callback$[ebp], 0
	je	SHORT $LN7@CrcBig
	mov	ecx, DWORD PTR _i$[ebp]
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _i$[ebp+4]
	and	edx, 0
	mov	DWORD PTR tv158[ebp], ecx
	mov	DWORD PTR tv158[ebp+4], edx
	mov	eax, DWORD PTR tv158[ebp]
	or	eax, DWORD PTR tv158[ebp+4]
	jne	SHORT $LN7@CrcBig
; Line 1320
	mov	ecx, DWORD PTR _callback$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR _callback$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$70588[ebp], eax
	cmp	DWORD PTR ___result__$70588[ebp], 0
	je	SHORT $LN7@CrcBig
	mov	eax, DWORD PTR ___result__$70588[ebp]
	jmp	$LN14@CrcBig
$LN7@CrcBig:
; Line 1322
	mov	ecx, DWORD PTR _hf$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	eax, DWORD PTR _hf$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1323
	mov	esi, esp
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hf$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _hf$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1324
	mov	esi, esp
	lea	edx, DWORD PTR _hash$[ebp]
	push	edx
	mov	eax, DWORD PTR _hf$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _hf$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1325
	mov	ecx, DWORD PTR _hf$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	eax, DWORD PTR _hf$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+24]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hashSize$70590[ebp], eax
; Line 1326
	cmp	DWORD PTR _hashSize$70590[ebp], 64	; 00000040H
	jbe	SHORT $LN5@CrcBig
; Line 1327
	mov	eax, 1
	jmp	SHORT $LN14@CrcBig
$LN5@CrcBig:
; Line 1328
	mov	DWORD PTR _sum$70593[ebp], 0
; Line 1329
	mov	DWORD PTR _j$70594[ebp], 0
	jmp	SHORT $LN4@CrcBig
$LN3@CrcBig:
	mov	edx, DWORD PTR _j$70594[ebp]
	add	edx, 4
	mov	DWORD PTR _j$70594[ebp], edx
$LN4@CrcBig:
	mov	eax, DWORD PTR _j$70594[ebp]
	cmp	eax, DWORD PTR _hashSize$70590[ebp]
	jae	SHORT $LN2@CrcBig
; Line 1330
	mov	ecx, DWORD PTR _j$70594[ebp]
	mov	edx, DWORD PTR _sum$70593[ebp]
	xor	edx, DWORD PTR _hash$[ebp+ecx]
	mov	DWORD PTR _sum$70593[ebp], edx
	jmp	SHORT $LN3@CrcBig
$LN2@CrcBig:
; Line 1331
	cmp	DWORD PTR _checkSum$[ebp], 0
	je	SHORT $LN1@CrcBig
	mov	eax, DWORD PTR _checkSum$[ebp]
	mov	ecx, DWORD PTR _sum$70593[ebp]
	cmp	ecx, DWORD PTR [eax]
	je	SHORT $LN1@CrcBig
; Line 1333
	mov	eax, 1
	jmp	SHORT $LN14@CrcBig
$LN1@CrcBig:
; Line 1335
	jmp	$LN9@CrcBig
$LN8@CrcBig:
; Line 1336
	xor	eax, eax
$LN14@CrcBig:
; Line 1337
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@CrcBig
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 108				; 0000006cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
$LN20@CrcBig:
	DD	1
	DD	$LN19@CrcBig
$LN19@CrcBig:
	DD	-72					; ffffffb8H
	DD	64					; 00000040H
	DD	$LN18@CrcBig
$LN18@CrcBig:
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	104					; 00000068H
	DB	0
?CrcBig@@YGJPBXI_KPBIPAUIHasher@@PAUIBenchPrintCallback@@@Z ENDP ; CrcBig
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv80 = -12						; size = 4
_p$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_param$ = 8						; size = 4
?CrcThreadFunction@@YGIPAX@Z PROC			; CrcThreadFunction
; Line 1440
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1441
	mov	eax, DWORD PTR _param$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 1444
	mov	ecx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [ecx+48]
	call	__alloca_probe_16
; Line 1449
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+32]
	test	eax, eax
	je	SHORT $LN3@CrcThreadF
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 36					; 00000024H
	mov	DWORD PTR tv80[ebp], ecx
	jmp	SHORT $LN4@CrcThreadF
$LN3@CrcThreadF:
	mov	DWORD PTR tv80[ebp], 0
$LN4@CrcThreadF:
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 40					; 00000028H
	call	??B?$CMyComPtr@UIHasher@@@@QBEPAUIHasher@@XZ ; CMyComPtr<IHasher>::operator IHasher *
	push	eax
	mov	ecx, DWORD PTR tv80[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+28]
	push	eax
	mov	ecx, DWORD PTR [edx+24]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	?CrcBig@@YGJPBXI_KPBIPAUIHasher@@PAUIBenchPrintCallback@@@Z ; CrcBig
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+44], eax
; Line 1450
	xor	eax, eax
; Line 1451
	lea	esp, DWORD PTR [ebp-12]
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
?CrcThreadFunction@@YGIPAX@Z ENDP			; CrcThreadFunction
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CCrcThreads@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CCrcThreads@@QAE@XZ PROC				; CCrcThreads::CCrcThreads, COMDAT
; _this$ = ecx
; Line 1458
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CCrcThreads@@QAE@XZ ENDP				; CCrcThreads::CCrcThreads
_TEXT	ENDS
PUBLIC	?Wait@CCrcInfo@@QAEXXZ				; CCrcInfo::Wait
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?WaitAll@CCrcThreads@@QAEXXZ
_TEXT	SEGMENT
_i$70765 = -8						; size = 4
_this$ = -4						; size = 4
?WaitAll@CCrcThreads@@QAEXXZ PROC			; CCrcThreads::WaitAll, COMDAT
; _this$ = ecx
; Line 1460
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1461
	mov	DWORD PTR _i$70765[ebp], 0
	jmp	SHORT $LN3@WaitAll@2
$LN2@WaitAll@2:
	mov	eax, DWORD PTR _i$70765[ebp]
	add	eax, 1
	mov	DWORD PTR _i$70765[ebp], eax
$LN3@WaitAll@2:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$70765[ebp]
	cmp	edx, DWORD PTR [ecx+4]
	jae	SHORT $LN1@WaitAll@2
; Line 1462
	mov	ecx, DWORD PTR _i$70765[ebp]
	imul	ecx, 56					; 00000038H
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax]
	call	?Wait@CCrcInfo@@QAEXXZ			; CCrcInfo::Wait
	jmp	SHORT $LN2@WaitAll@2
$LN1@WaitAll@2:
; Line 1463
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 1464
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?WaitAll@CCrcThreads@@QAEXXZ ENDP			; CCrcThreads::WaitAll
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Wait@CCrcInfo@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Wait@CCrcInfo@@QAEXXZ PROC				; CCrcInfo::Wait, COMDAT
; _this$ = ecx
; Line 1433
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1434
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Wait@CThread@NWindows@@QAEIXZ		; NWindows::CThread::Wait
; Line 1435
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Close@CThread@NWindows@@QAEIXZ		; NWindows::CThread::Close
; Line 1436
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Wait@CCrcInfo@@QAEXXZ ENDP				; CCrcInfo::Wait
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CCrcThreads@@QAE@XZ
_TEXT	SEGMENT
tv69 = -16						; size = 4
$T73487 = -12						; size = 4
$T73486 = -8						; size = 4
_this$ = -4						; size = 4
??1CCrcThreads@@QAE@XZ PROC				; CCrcThreads::~CCrcThreads, COMDAT
; _this$ = ecx
; Line 1466
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1467
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WaitAll@CCrcThreads@@QAEXXZ		; CCrcThreads::WaitAll
; Line 1468
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T73487[ebp], ecx
	mov	edx, DWORD PTR $T73487[ebp]
	mov	DWORD PTR $T73486[ebp], edx
	cmp	DWORD PTR $T73486[ebp], 0
	je	SHORT $LN3@CCrcThread
	push	3
	mov	ecx, DWORD PTR $T73486[ebp]
	call	??_ECCrcInfo@@QAEPAXI@Z
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN1@CCrcThread
$LN3@CCrcThread:
	mov	DWORD PTR tv69[ebp], 0
$LN1@CCrcThread:
; Line 1469
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CCrcThreads@@QAE@XZ ENDP				; CCrcThreads::~CCrcThreads
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
_TEXT	SEGMENT
_buf$ = 8						; size = 4
_size$ = 12						; size = 4
_RG$ = 16						; size = 4
?RandGenCrc@@YGIPAEIAAVCBaseRandomGenerator@@@Z PROC	; RandGenCrc
; Line 1489
	push	ebp
	mov	ebp, esp
; Line 1490
	mov	eax, DWORD PTR _RG$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	?RandGen@@YGXPAEIAAVCBaseRandomGenerator@@@Z ; RandGen
; Line 1491
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	?CrcCalc1@@YGIPBEI@Z			; CrcCalc1
; Line 1492
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?RandGenCrc@@YGIPAEIAAVCBaseRandomGenerator@@@Z ENDP	; RandGenCrc
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CCrcInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CCrcInfo@@QAE@XZ$0
__ehfuncinfo$??0CCrcInfo@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CCrcInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CCrcInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CCrcInfo@@QAE@XZ PROC				; CCrcInfo::CCrcInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CCrcInfo@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CThread@NWindows@@QAE@XZ		; NWindows::CThread::CThread
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??0?$CMyComPtr@UIHasher@@@@QAE@XZ	; CMyComPtr<IHasher>::CMyComPtr<IHasher>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CCrcInfo@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CThread@NWindows@@QAE@XZ		; NWindows::CThread::~CThread
__ehhandler$??0CCrcInfo@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CCrcInfo@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CCrcInfo@@QAE@XZ ENDP				; CCrcInfo::CCrcInfo
xdata$x	SEGMENT
__unwindtable$?TotalBench_Hash@@YGJ_KIIPAUIBenchPrintCallback@@PAUCBenchCallbackToPrint@@PAUCTotalBenchRes@@_N0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?TotalBench_Hash@@YGJ_KIIPAUIBenchPrintCallback@@PAUCBenchCallbackToPrint@@PAUCTotalBenchRes@@_N0@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?TotalBench_Hash@@YGJ_KIIPAUIBenchPrintCallback@@PAUCBenchCallbackToPrint@@PAUCTotalBenchRes@@_N0@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?TotalBench_Hash@@YGJ_KIIPAUIBenchPrintCallback@@PAUCBenchCallbackToPrint@@PAUCTotalBenchRes@@_N0@Z$2
__ehfuncinfo$?TotalBench_Hash@@YGJ_KIIPAUIBenchPrintCallback@@PAUCBenchCallbackToPrint@@PAUCTotalBenchRes@@_N0@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?TotalBench_Hash@@YGJ_KIIPAUIBenchPrintCallback@@PAUCBenchCallbackToPrint@@PAUCTotalBenchRes@@_N0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv148 = -144						; size = 4
tv77 = -140						; size = 4
$T73505 = -136						; size = 4
$T73504 = -132						; size = 4
$T73503 = -128						; size = 12
___result__$71322 = -116				; size = 4
_res$71318 = -112					; size = 4
_speed$71317 = -104					; size = 8
___result__$71313 = -92					; size = 4
_propVariant$71312 = -84				; size = 16
_method$71311 = -60					; size = 36
_bench$71310 = -20					; size = 4
_i$71306 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_complexInCommands$ = 8					; size = 8
_numThreads$ = 16					; size = 4
_bufSize$ = 20						; size = 4
_printCallback$ = 24					; size = 4
_callback$ = 28						; size = 4
_encodeRes$ = 32					; size = 4
_showFreq$ = 36						; size = 1
_cpuFreq$ = 40						; size = 8
?TotalBench_Hash@@YGJ_KIIPAUIBenchPrintCallback@@PAUCBenchCallbackToPrint@@PAUCTotalBenchRes@@_N0@Z PROC ; TotalBench_Hash
; Line 2116
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?TotalBench_Hash@@YGJ_KIIPAUIBenchPrintCallback@@PAUCBenchCallbackToPrint@@PAUCTotalBenchRes@@_N0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 132				; 00000084H
	push	edi
	lea	edi, DWORD PTR [ebp-144]
	mov	ecx, 33					; 00000021H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 2117
	mov	DWORD PTR _i$71306[ebp], 0
	jmp	SHORT $LN7@TotalBench@2
$LN6@TotalBench@2:
	mov	eax, DWORD PTR _i$71306[ebp]
	add	eax, 1
	mov	DWORD PTR _i$71306[ebp], eax
$LN7@TotalBench@2:
	cmp	DWORD PTR _i$71306[ebp], 6
	jae	$LN5@TotalBench@2
; Line 2119
	mov	ecx, DWORD PTR _i$71306[ebp]
	shl	ecx, 4
	add	ecx, OFFSET _g_Hash
	mov	DWORD PTR _bench$71310[ebp], ecx
; Line 2120
	push	12					; 0000000cH
	mov	edx, DWORD PTR _bench$71310[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _callback$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	push	edx
	call	?PrintLeft@@YGXAAUIBenchPrintCallback@@PBDI@Z ; PrintLeft
; Line 2125
	lea	ecx, DWORD PTR _method$71311[ebp]
	call	??0COneMethodInfo@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 2126
	lea	ecx, DWORD PTR _propVariant$71312[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
	mov	BYTE PTR __$EHRec$[ebp+8], 1
; Line 2127
	mov	eax, DWORD PTR _bench$71310[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	lea	ecx, DWORD PTR _propVariant$71312[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@PBD@Z ; NWindows::NCOM::CPropVariant::operator=
; Line 2128
	lea	edx, DWORD PTR _propVariant$71312[ebp]
	push	edx
	lea	ecx, DWORD PTR $T73503[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR tv77[ebp], eax
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR tv148[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR tv148[ebp]
	push	ecx
	lea	ecx, DWORD PTR _method$71311[ebp]
	call	?ParseMethodFromPROPVARIANT@COneMethodInfo@@QAEJABVUString@@ABUtagPROPVARIANT@@@Z ; COneMethodInfo::ParseMethodFromPROPVARIANT
	mov	DWORD PTR ___result__$71313[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T73503[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	cmp	DWORD PTR ___result__$71313[ebp], 0
	je	SHORT $LN4@TotalBench@2
	mov	edx, DWORD PTR ___result__$71313[ebp]
	mov	DWORD PTR $T73504[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _propVariant$71312[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _method$71311[ebp]
	call	??1COneMethodInfo@@QAE@XZ
	mov	eax, DWORD PTR $T73504[ebp]
	jmp	$LN8@TotalBench@2
$LN4@TotalBench@2:
; Line 2138
	mov	eax, DWORD PTR _cpuFreq$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _cpuFreq$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _showFreq$[ebp]
	push	edx
	mov	eax, DWORD PTR _encodeRes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _printCallback$[ebp]
	push	ecx
	lea	edx, DWORD PTR _method$71311[ebp]
	push	edx
	mov	eax, DWORD PTR _bench$71310[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _bench$71310[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _bench$71310[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	lea	edx, DWORD PTR _speed$71317[ebp]
	push	edx
	mov	eax, DWORD PTR _bufSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _numThreads$[ebp]
	push	ecx
	mov	edx, DWORD PTR _complexInCommands$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _complexInCommands$[ebp]
	push	eax
	call	?CrcBench@@YGJ_KIIAA_KIIPBIABVCOneMethodInfo@@PAUIBenchPrintCallback@@PAUCTotalBenchRes@@_N0@Z ; CrcBench
	mov	DWORD PTR _res$71318[ebp], eax
; Line 2139
	cmp	DWORD PTR _res$71318[ebp], -2147467263	; 80004001H
	jne	SHORT $LN3@TotalBench@2
; Line 2143
	jmp	SHORT $LN2@TotalBench@2
$LN3@TotalBench@2:
; Line 2145
	mov	ecx, DWORD PTR _res$71318[ebp]
	mov	DWORD PTR ___result__$71322[ebp], ecx
	cmp	DWORD PTR ___result__$71322[ebp], 0
	je	SHORT $LN2@TotalBench@2
	mov	edx, DWORD PTR ___result__$71322[ebp]
	mov	DWORD PTR $T73505[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _propVariant$71312[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _method$71311[ebp]
	call	??1COneMethodInfo@@QAE@XZ
	mov	eax, DWORD PTR $T73505[ebp]
	jmp	SHORT $LN8@TotalBench@2
$LN2@TotalBench@2:
; Line 2147
	mov	ecx, DWORD PTR _callback$[ebp]
	call	?NewLine@CBenchCallbackToPrint@@QAEXXZ	; CBenchCallbackToPrint::NewLine
; Line 2148
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _propVariant$71312[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _method$71311[ebp]
	call	??1COneMethodInfo@@QAE@XZ
	jmp	$LN6@TotalBench@2
$LN5@TotalBench@2:
; Line 2149
	xor	eax, eax
$LN8@TotalBench@2:
; Line 2150
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@TotalBench@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 144				; 00000090H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	40					; 00000028H
$LN18@TotalBench@2:
	DD	3
	DD	$LN17@TotalBench@2
$LN17@TotalBench@2:
	DD	-60					; ffffffc4H
	DD	36					; 00000024H
	DD	$LN13@TotalBench@2
	DD	-84					; ffffffacH
	DD	16					; 00000010H
	DD	$LN14@TotalBench@2
	DD	-104					; ffffff98H
	DD	8
	DD	$LN15@TotalBench@2
$LN15@TotalBench@2:
	DB	115					; 00000073H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$LN14@TotalBench@2:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	86					; 00000056H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
$LN13@TotalBench@2:
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?TotalBench_Hash@@YGJ_KIIPAUIBenchPrintCallback@@PAUCBenchCallbackToPrint@@PAUCTotalBenchRes@@_N0@Z$0:
	lea	ecx, DWORD PTR _method$71311[ebp]
	jmp	??1COneMethodInfo@@QAE@XZ
__unwindfunclet$?TotalBench_Hash@@YGJ_KIIPAUIBenchPrintCallback@@PAUCBenchCallbackToPrint@@PAUCTotalBenchRes@@_N0@Z$1:
	lea	ecx, DWORD PTR _propVariant$71312[ebp]
	jmp	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
__unwindfunclet$?TotalBench_Hash@@YGJ_KIIPAUIBenchPrintCallback@@PAUCBenchCallbackToPrint@@PAUCTotalBenchRes@@_N0@Z$2:
	lea	ecx, DWORD PTR $T73503[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$?TotalBench_Hash@@YGJ_KIIPAUIBenchPrintCallback@@PAUCBenchCallbackToPrint@@PAUCTotalBenchRes@@_N0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-140]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?TotalBench_Hash@@YGJ_KIIPAUIBenchPrintCallback@@PAUCBenchCallbackToPrint@@PAUCTotalBenchRes@@_N0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?TotalBench_Hash@@YGJ_KIIPAUIBenchPrintCallback@@PAUCBenchCallbackToPrint@@PAUCTotalBenchRes@@_N0@Z ENDP ; TotalBench_Hash
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CTempValues@@QAE@I@Z
_TEXT	SEGMENT
$T73519 = -8						; size = 4
_this$ = -4						; size = 4
_num$ = 8						; size = 4
??0CTempValues@@QAE@I@Z PROC				; CTempValues::CTempValues, COMDAT
; _this$ = ecx
; Line 2155
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	xor	ecx, ecx
	mov	eax, DWORD PTR _num$[ebp]
	mov	edx, 8
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T73519[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T73519[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CTempValues@@QAE@I@Z ENDP				; CTempValues::CTempValues
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CTempValues@@QAE@XZ
_TEXT	SEGMENT
$T73522 = -8						; size = 4
_this$ = -4						; size = 4
??1CTempValues@@QAE@XZ PROC				; CTempValues::~CTempValues, COMDAT
; _this$ = ecx
; Line 2156
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T73522[ebp], ecx
	mov	edx, DWORD PTR $T73522[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CTempValues@@QAE@XZ ENDP				; CTempValues::~CTempValues
_TEXT	ENDS
EXTRN	??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z:PROC ; NWindows::NCOM::CPropVariant::operator=
EXTRN	??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z:PROC ; NWindows::NCOM::CPropVariant::operator=
EXTRN	??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABVUString@@@Z:PROC ; NWindows::NCOM::CPropVariant::operator=
EXTRN	?ConvertStringToUInt64@@YG_KPB_WPAPB_W@Z:PROC	; ConvertStringToUInt64
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_result$ = -20						; size = 8
_end$ = -8						; size = 4
_s$ = 8							; size = 4
_prop$ = 12						; size = 4
?ParseNumberString@@YGXABVUString@@AAVCPropVariant@NCOM@NWindows@@@Z PROC ; ParseNumberString
; Line 2160
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 2162
	lea	eax, DWORD PTR _end$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	?ConvertStringToUInt64@@YG_KPB_WPAPB_W@Z ; ConvertStringToUInt64
	mov	DWORD PTR _result$[ebp], eax
	mov	DWORD PTR _result$[ebp+4], edx
; Line 2163
	mov	ecx, DWORD PTR _end$[ebp]
	movzx	edx, WORD PTR [ecx]
	test	edx, edx
	jne	SHORT $LN4@ParseNumbe
	mov	ecx, DWORD PTR _s$[ebp]
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@ParseNumbe
$LN4@ParseNumbe:
; Line 2164
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _prop$[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABVUString@@@Z ; NWindows::NCOM::CPropVariant::operator=
	jmp	SHORT $LN6@ParseNumbe
$LN5@ParseNumbe:
; Line 2165
	cmp	DWORD PTR _result$[ebp+4], 0
	ja	SHORT $LN2@ParseNumbe
	jb	SHORT $LN8@ParseNumbe
	cmp	DWORD PTR _result$[ebp], -1
	ja	SHORT $LN2@ParseNumbe
$LN8@ParseNumbe:
; Line 2166
	mov	edx, DWORD PTR _result$[ebp]
	push	edx
	mov	ecx, DWORD PTR _prop$[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z ; NWindows::NCOM::CPropVariant::operator=
; Line 2167
	jmp	SHORT $LN6@ParseNumbe
$LN2@ParseNumbe:
; Line 2168
	mov	eax, DWORD PTR _result$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _result$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _prop$[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=
$LN6@ParseNumbe:
; Line 2169
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@ParseNumbe
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN11@ParseNumbe:
	DD	1
	DD	$LN10@ParseNumbe
$LN10@ParseNumbe:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN9@ParseNumbe
$LN9@ParseNumbe:
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
?ParseNumberString@@YGXABVUString@@AAVCPropVariant@NCOM@NWindows@@@Z ENDP ; ParseNumberString
; Function compile flags: /Odtp /RTCsu
tv72 = -8						; size = 4
_num$ = -4						; size = 4
_i$ = 8							; size = 4
_numThreads$ = 12					; size = 4
?GetNumThreadsNext@@YGIII@Z PROC			; GetNumThreadsNext
; Line 2172
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2173
	cmp	DWORD PTR _i$[ebp], 2
	jae	SHORT $LN1@GetNumThre
; Line 2174
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	jmp	SHORT $LN2@GetNumThre
$LN1@GetNumThre:
; Line 2175
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
; Line 2176
	mov	edx, DWORD PTR _i$[ebp]
	and	edx, 1
	add	edx, 2
	mov	ecx, DWORD PTR _i$[ebp]
	shr	ecx, 1
	shl	edx, cl
	mov	DWORD PTR _num$[ebp], edx
; Line 2177
	mov	eax, DWORD PTR _num$[ebp]
	cmp	eax, DWORD PTR _numThreads$[ebp]
	ja	SHORT $LN4@GetNumThre
	mov	ecx, DWORD PTR _num$[ebp]
	mov	DWORD PTR tv72[ebp], ecx
	jmp	SHORT $LN5@GetNumThre
$LN4@GetNumThre:
	mov	edx, DWORD PTR _numThreads$[ebp]
	mov	DWORD PTR tv72[ebp], edx
$LN5@GetNumThre:
	mov	eax, DWORD PTR tv72[ebp]
$LN2@GetNumThre:
; Line 2178
	mov	esp, ebp
	pop	ebp
	ret	8
?GetNumThreadsNext@@YGIII@Z ENDP			; GetNumThreadsNext
_TEXT	ENDS
PUBLIC	?MyCharLower_Ascii@@YGDD@Z			; MyCharLower_Ascii
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_c1$71375 = -2						; size = 1
_c2$71373 = -1						; size = 1
_fullName$ = 8						; size = 4
_shortName$ = 12					; size = 4
?AreSameMethodNames@@YG_NPBD0@Z PROC			; AreSameMethodNames
; Line 2181
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
$LN4@AreSameMet:
; Line 2184
	mov	eax, DWORD PTR _shortName$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c2$71373[ebp], cl
	mov	edx, DWORD PTR _shortName$[ebp]
	add	edx, 1
	mov	DWORD PTR _shortName$[ebp], edx
; Line 2185
	movsx	eax, BYTE PTR _c2$71373[ebp]
	test	eax, eax
	jne	SHORT $LN2@AreSameMet
; Line 2186
	mov	al, 1
	jmp	SHORT $LN5@AreSameMet
$LN2@AreSameMet:
; Line 2187
	mov	ecx, DWORD PTR _fullName$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _c1$71375[ebp], dl
	mov	eax, DWORD PTR _fullName$[ebp]
	add	eax, 1
	mov	DWORD PTR _fullName$[ebp], eax
; Line 2188
	movzx	ecx, BYTE PTR _c1$71375[ebp]
	push	ecx
	call	?MyCharLower_Ascii@@YGDD@Z		; MyCharLower_Ascii
	movsx	esi, al
	movzx	edx, BYTE PTR _c2$71373[ebp]
	push	edx
	call	?MyCharLower_Ascii@@YGDD@Z		; MyCharLower_Ascii
	movsx	eax, al
	cmp	esi, eax
	je	SHORT $LN1@AreSameMet
; Line 2189
	xor	al, al
	jmp	SHORT $LN5@AreSameMet
$LN1@AreSameMet:
; Line 2190
	jmp	SHORT $LN4@AreSameMet
$LN5@AreSameMet:
; Line 2191
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?AreSameMethodNames@@YG_NPBD0@Z ENDP			; AreSameMethodNames
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?MyCharLower_Ascii@@YGDD@Z
_TEXT	SEGMENT
_c$ = 8							; size = 1
?MyCharLower_Ascii@@YGDD@Z PROC				; MyCharLower_Ascii, COMDAT
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 106
	push	ebp
	mov	ebp, esp
; Line 107
	movsx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 65					; 00000041H
	jl	SHORT $LN1@MyCharLowe
	movsx	ecx, BYTE PTR _c$[ebp]
	cmp	ecx, 90					; 0000005aH
	jg	SHORT $LN1@MyCharLowe
; Line 108
	movzx	eax, BYTE PTR _c$[ebp]
	add	eax, 32					; 00000020H
	jmp	SHORT $LN2@MyCharLowe
$LN1@MyCharLowe:
; Line 109
	mov	al, BYTE PTR _c$[ebp]
$LN2@MyCharLowe:
; Line 110
	pop	ebp
	ret	4
?MyCharLower_Ascii@@YGDD@Z ENDP				; MyCharLower_Ascii
_TEXT	ENDS
PUBLIC	?Size@?$CRecordVector@PAX@@QBEIXZ		; CRecordVector<void *>::Size
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Size@?$CObjectVector@UCProp@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@UCProp@@@@QBEIXZ PROC		; CObjectVector<CProp>::Size, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@UCProp@@@@QBEIXZ ENDP		; CObjectVector<CProp>::Size
_TEXT	ENDS
PUBLIC	??0?$CRecordVector@PAX@@QAE@XZ			; CRecordVector<void *>::CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CObjectVector@UCProp@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@UCProp@@@@QAE@XZ PROC		; CObjectVector<CProp>::CObjectVector<CProp>, COMDAT
; _this$ = ecx
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@UCProp@@@@QAE@XZ ENDP		; CObjectVector<CProp>::CObjectVector<CProp>
_TEXT	ENDS
PUBLIC	??1?$CRecordVector@PAX@@QAE@XZ			; CRecordVector<void *>::~CRecordVector<void *>
PUBLIC	?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z	; CRecordVector<void *>::AddInReserved
PUBLIC	??0CProp@@QAE@ABU0@@Z				; CProp::CProp
PUBLIC	?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z	; CRecordVector<void *>::ConstructReserve
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$1
__ehfuncinfo$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
tv85 = -36						; size = 4
$T73542 = -32						; size = 4
$T73541 = -28						; size = 4
_i$71803 = -24						; size = 4
_size$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_v$ = 8							; size = 4
??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z PROC		; CObjectVector<CProp>::CObjectVector<CProp>, COMDAT
; _this$ = ecx
; Line 422
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 424
	mov	ecx, DWORD PTR _v$[ebp]
	call	?Size@?$CObjectVector@UCProp@@@@QBEIXZ	; CObjectVector<CProp>::Size
	mov	DWORD PTR _size$[ebp], eax
; Line 425
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z ; CRecordVector<void *>::ConstructReserve
; Line 426
	mov	DWORD PTR _i$71803[ebp], 0
	jmp	SHORT $LN3@CObjectVec
$LN2@CObjectVec:
	mov	ecx, DWORD PTR _i$71803[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$71803[ebp], ecx
$LN3@CObjectVec:
	mov	edx, DWORD PTR _i$71803[ebp]
	cmp	edx, DWORD PTR _size$[ebp]
	jae	SHORT $LN4@CObjectVec
; Line 427
	push	24					; 00000018H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T73542[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T73542[ebp], 0
	je	SHORT $LN6@CObjectVec
	mov	eax, DWORD PTR _i$71803[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	call	??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ; CObjectVector<CProp>::operator[]
	push	eax
	mov	ecx, DWORD PTR $T73542[ebp]
	call	??0CProp@@QAE@ABU0@@Z
	mov	DWORD PTR tv85[ebp], eax
	jmp	SHORT $LN7@CObjectVec
$LN6@CObjectVec:
	mov	DWORD PTR tv85[ebp], 0
$LN7@CObjectVec:
	mov	ecx, DWORD PTR tv85[ebp]
	mov	DWORD PTR $T73541[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T73541[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ; CRecordVector<void *>::AddInReserved
	jmp	SHORT $LN2@CObjectVec
$LN4@CObjectVec:
; Line 428
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$1:
	mov	eax, DWORD PTR $T73542[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z ENDP		; CObjectVector<CProp>::CObjectVector<CProp>
PUBLIC	?Reserve@?$CRecordVector@PAX@@QAEXI@Z		; CRecordVector<void *>::Reserve
PUBLIC	?Clear@?$CObjectVector@UCProp@@@@QAEXXZ		; CObjectVector<CProp>::Clear
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z$0
__ehfuncinfo$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
tv84 = -36						; size = 4
$T73556 = -32						; size = 4
$T73555 = -28						; size = 4
_i$71815 = -24						; size = 4
_size$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_v$ = 8							; size = 4
??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z PROC	; CObjectVector<CProp>::operator=, COMDAT
; _this$ = ecx
; Line 430
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 431
	mov	eax, DWORD PTR _v$[ebp]
	cmp	eax, DWORD PTR _this$[ebp]
	jne	SHORT $LN4@operator@2
; Line 432
	mov	eax, DWORD PTR _this$[ebp]
	jmp	$LN5@operator@2
$LN4@operator@2:
; Line 433
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CObjectVector@UCProp@@@@QAEXXZ	; CObjectVector<CProp>::Clear
; Line 434
	mov	ecx, DWORD PTR _v$[ebp]
	call	?Size@?$CObjectVector@UCProp@@@@QBEIXZ	; CObjectVector<CProp>::Size
	mov	DWORD PTR _size$[ebp], eax
; Line 435
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reserve@?$CRecordVector@PAX@@QAEXI@Z	; CRecordVector<void *>::Reserve
; Line 436
	mov	DWORD PTR _i$71815[ebp], 0
	jmp	SHORT $LN3@operator@2
$LN2@operator@2:
	mov	edx, DWORD PTR _i$71815[ebp]
	add	edx, 1
	mov	DWORD PTR _i$71815[ebp], edx
$LN3@operator@2:
	mov	eax, DWORD PTR _i$71815[ebp]
	cmp	eax, DWORD PTR _size$[ebp]
	jae	SHORT $LN1@operator@2
; Line 437
	push	24					; 00000018H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T73556[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T73556[ebp], 0
	je	SHORT $LN7@operator@2
	mov	ecx, DWORD PTR _i$71815[ebp]
	push	ecx
	mov	ecx, DWORD PTR _v$[ebp]
	call	??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ; CObjectVector<CProp>::operator[]
	push	eax
	mov	ecx, DWORD PTR $T73556[ebp]
	call	??0CProp@@QAE@ABU0@@Z
	mov	DWORD PTR tv84[ebp], eax
	jmp	SHORT $LN8@operator@2
$LN7@operator@2:
	mov	DWORD PTR tv84[ebp], 0
$LN8@operator@2:
	mov	edx, DWORD PTR tv84[ebp]
	mov	DWORD PTR $T73555[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T73555[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ; CRecordVector<void *>::AddInReserved
	jmp	SHORT $LN2@operator@2
$LN1@operator@2:
; Line 438
	mov	eax, DWORD PTR _this$[ebp]
$LN5@operator@2:
; Line 439
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z$0:
	mov	eax, DWORD PTR $T73556[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z ENDP	; CObjectVector<CProp>::operator=
PUBLIC	??A?$CRecordVector@PAX@@QBEABQAXI@Z		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z PROC	; CObjectVector<CProp>::operator[], COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ENDP	; CObjectVector<CProp>::operator[]
_TEXT	ENDS
PUBLIC	??_GCProp@@QAEPAXI@Z				; CProp::`scalar deleting destructor'
PUBLIC	??A?$CRecordVector@PAX@@QAEAAPAXI@Z		; CRecordVector<void *>::operator[]
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@UCProp@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@UCProp@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@UCProp@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@UCProp@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T73571 = -28						; size = 4
$T73570 = -24						; size = 4
_i$71835 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@UCProp@@@@QAE@XZ PROC		; CObjectVector<CProp>::~CObjectVector<CProp>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$71835[ebp], eax
$LN2@CObjectVec@2:
	cmp	DWORD PTR _i$71835[ebp], 0
	je	SHORT $LN3@CObjectVec@2
; Line 489
	mov	eax, DWORD PTR _i$71835[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$71835[ebp], eax
	mov	ecx, DWORD PTR _i$71835[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T73571[ebp], edx
	mov	eax, DWORD PTR $T73571[ebp]
	mov	DWORD PTR $T73570[ebp], eax
	cmp	DWORD PTR $T73570[ebp], 0
	je	SHORT $LN5@CObjectVec@2
	push	1
	mov	ecx, DWORD PTR $T73570[ebp]
	call	??_GCProp@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@2
$LN5@CObjectVec@2:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@2:
	jmp	SHORT $LN2@CObjectVec@2
$LN3@CObjectVec@2:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@UCProp@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@UCProp@@@@QAE@XZ ENDP		; CObjectVector<CProp>::~CObjectVector<CProp>
PUBLIC	?Clear@?$CRecordVector@PAX@@QAEXXZ		; CRecordVector<void *>::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Clear@?$CObjectVector@UCProp@@@@QAEXXZ
_TEXT	SEGMENT
tv75 = -20						; size = 4
$T73584 = -16						; size = 4
$T73583 = -12						; size = 4
_i$71844 = -8						; size = 4
_this$ = -4						; size = 4
?Clear@?$CObjectVector@UCProp@@@@QAEXXZ PROC		; CObjectVector<CProp>::Clear, COMDAT
; _this$ = ecx
; Line 499
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 500
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$71844[ebp], eax
$LN2@Clear:
	cmp	DWORD PTR _i$71844[ebp], 0
	je	SHORT $LN1@Clear
; Line 501
	mov	eax, DWORD PTR _i$71844[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$71844[ebp], eax
	mov	ecx, DWORD PTR _i$71844[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T73584[ebp], edx
	mov	eax, DWORD PTR $T73584[ebp]
	mov	DWORD PTR $T73583[ebp], eax
	cmp	DWORD PTR $T73583[ebp], 0
	je	SHORT $LN5@Clear
	push	1
	mov	ecx, DWORD PTR $T73583[ebp]
	call	??_GCProp@@QAEPAXI@Z
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN6@Clear
$LN5@Clear:
	mov	DWORD PTR tv75[ebp], 0
$LN6@Clear:
	jmp	SHORT $LN2@Clear
$LN1@Clear:
; Line 502
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CRecordVector@PAX@@QAEXXZ	; CRecordVector<void *>::Clear
; Line 503
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CObjectVector@UCProp@@@@QAEXXZ ENDP		; CObjectVector<CProp>::Clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ PROC		; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ ENDP		; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ PROC		; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ENDP		; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@?$CMyComPtr@UICompressCoder@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Release@?$CMyComPtr@UICompressCoder@@@@QAEXXZ PROC	; CMyComPtr<ICompressCoder>::Release, COMDAT
; _this$ = ecx
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Release@5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
$LN2@Release@5:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Release@?$CMyComPtr@UICompressCoder@@@@QAEXXZ ENDP	; CMyComPtr<ICompressCoder>::Release
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ PROC ; CMyComPtr<ICompressCoder>::operator ICompressCoder *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ENDP ; CMyComPtr<ICompressCoder>::operator ICompressCoder *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ PROC ; CMyComPtr<ICompressCoder>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ENDP ; CMyComPtr<ICompressCoder>::operator->
_TEXT	ENDS
PUBLIC	??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z ; CMyComPtr<ICompressCoder>::operator=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lp$ = 8						; size = 4
??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@ABV0@@Z PROC ; CMyComPtr<ICompressCoder>::operator=, COMDAT
; _this$ = ecx
; Line 36
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _lp$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z ; CMyComPtr<ICompressCoder>::operator=
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@ABV0@@Z ENDP ; CMyComPtr<ICompressCoder>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??7?$CMyComPtr@UICompressCoder@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??7?$CMyComPtr@UICompressCoder@@@@QBE_NXZ PROC		; CMyComPtr<ICompressCoder>::operator!, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
??7?$CMyComPtr@UICompressCoder@@@@QBE_NXZ ENDP		; CMyComPtr<ICompressCoder>::operator!
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICompressCoder2@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UICompressCoder2@@@@QAE@XZ PROC		; CMyComPtr<ICompressCoder2>::CMyComPtr<ICompressCoder2>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UICompressCoder2@@@@QAE@XZ ENDP		; CMyComPtr<ICompressCoder2>::CMyComPtr<ICompressCoder2>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICompressCoder2@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICompressCoder2@@@@QAE@XZ PROC		; CMyComPtr<ICompressCoder2>::~CMyComPtr<ICompressCoder2>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@2:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICompressCoder2@@@@QAE@XZ ENDP		; CMyComPtr<ICompressCoder2>::~CMyComPtr<ICompressCoder2>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICompressFilter@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UICompressFilter@@@@QAE@XZ PROC		; CMyComPtr<ICompressFilter>::CMyComPtr<ICompressFilter>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UICompressFilter@@@@QAE@XZ ENDP		; CMyComPtr<ICompressFilter>::CMyComPtr<ICompressFilter>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ PROC		; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@3:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ENDP		; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@?$CMyComPtr@UICompressFilter@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Release@?$CMyComPtr@UICompressFilter@@@@QAEXXZ PROC	; CMyComPtr<ICompressFilter>::Release, COMDAT
; _this$ = ecx
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Release@6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
$LN2@Release@6:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Release@?$CMyComPtr@UICompressFilter@@@@QAEXXZ ENDP	; CMyComPtr<ICompressFilter>::Release
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ PROC ; CMyComPtr<ICompressFilter>::operator ICompressFilter *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ ENDP ; CMyComPtr<ICompressFilter>::operator ICompressFilter *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ PROC ; CMyComPtr<ICompressFilter>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ ENDP ; CMyComPtr<ICompressFilter>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??7?$CMyComPtr@UICompressFilter@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??7?$CMyComPtr@UICompressFilter@@@@QBE_NXZ PROC		; CMyComPtr<ICompressFilter>::operator!, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
??7?$CMyComPtr@UICompressFilter@@@@QBE_NXZ ENDP		; CMyComPtr<ICompressFilter>::operator!
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ PROC	; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ENDP	; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ PROC	; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@4:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ENDP	; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ PROC ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ENDP ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UICompressProgressInfo@@@@QAEPAUICompressProgressInfo@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UICompressProgressInfo@@@@QAEPAUICompressProgressInfo@@PAU1@@Z PROC ; CMyComPtr<ICompressProgressInfo>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@3
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@3:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@3
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@3:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UICompressProgressInfo@@@@QAEPAUICompressProgressInfo@@PAU1@@Z ENDP ; CMyComPtr<ICompressProgressInfo>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z PROC ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@CMyComPtr@5
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@5:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z ENDP ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@6:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ PROC ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ENDP ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z PROC ; CMyComPtr<ISequentialOutStream>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@4
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@4:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@4
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@4:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ENDP ; CMyComPtr<ISequentialOutStream>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ PROC	; CMyComPtr<ISequentialOutStream>::operator!, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ ENDP	; CMyComPtr<ISequentialOutStream>::operator!
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIUnknown@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UIUnknown@@@@QAE@XZ PROC			; CMyComPtr<IUnknown>::CMyComPtr<IUnknown>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UIUnknown@@@@QAE@XZ ENDP			; CMyComPtr<IUnknown>::CMyComPtr<IUnknown>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIUnknown@@@@QAE@XZ PROC			; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@7:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIUnknown@@@@QAE@XZ ENDP			; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z PROC ; CMyComPtr<IUnknown>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@5
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@5:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@5
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@5:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z ENDP ; CMyComPtr<IUnknown>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ PROC ; CMyComPtr<ICompressSetCoderProperties>::CMyComPtr<ICompressSetCoderProperties>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ENDP ; CMyComPtr<ICompressSetCoderProperties>::CMyComPtr<ICompressSetCoderProperties>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ PROC ; CMyComPtr<ICompressSetCoderProperties>::~CMyComPtr<ICompressSetCoderProperties>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@8:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ENDP ; CMyComPtr<ICompressSetCoderProperties>::~CMyComPtr<ICompressSetCoderProperties>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UICompressSetCoderProperties@@@@QBEPAUICompressSetCoderProperties@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UICompressSetCoderProperties@@@@QBEPAUICompressSetCoderProperties@@XZ PROC ; CMyComPtr<ICompressSetCoderProperties>::operator ICompressSetCoderProperties *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UICompressSetCoderProperties@@@@QBEPAUICompressSetCoderProperties@@XZ ENDP ; CMyComPtr<ICompressSetCoderProperties>::operator ICompressSetCoderProperties *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UICompressSetCoderProperties@@@@QAEPAPAUICompressSetCoderProperties@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UICompressSetCoderProperties@@@@QAEPAPAUICompressSetCoderProperties@@XZ PROC ; CMyComPtr<ICompressSetCoderProperties>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UICompressSetCoderProperties@@@@QAEPAPAUICompressSetCoderProperties@@XZ ENDP ; CMyComPtr<ICompressSetCoderProperties>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICompressWriteCoderProperties@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UICompressWriteCoderProperties@@@@QAE@XZ PROC ; CMyComPtr<ICompressWriteCoderProperties>::CMyComPtr<ICompressWriteCoderProperties>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UICompressWriteCoderProperties@@@@QAE@XZ ENDP ; CMyComPtr<ICompressWriteCoderProperties>::CMyComPtr<ICompressWriteCoderProperties>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICompressWriteCoderProperties@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICompressWriteCoderProperties@@@@QAE@XZ PROC ; CMyComPtr<ICompressWriteCoderProperties>::~CMyComPtr<ICompressWriteCoderProperties>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@9
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@9:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICompressWriteCoderProperties@@@@QAE@XZ ENDP ; CMyComPtr<ICompressWriteCoderProperties>::~CMyComPtr<ICompressWriteCoderProperties>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UICompressWriteCoderProperties@@@@QBEPAUICompressWriteCoderProperties@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UICompressWriteCoderProperties@@@@QBEPAUICompressWriteCoderProperties@@XZ PROC ; CMyComPtr<ICompressWriteCoderProperties>::operator ICompressWriteCoderProperties *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UICompressWriteCoderProperties@@@@QBEPAUICompressWriteCoderProperties@@XZ ENDP ; CMyComPtr<ICompressWriteCoderProperties>::operator ICompressWriteCoderProperties *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UICompressWriteCoderProperties@@@@QAEPAPAUICompressWriteCoderProperties@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UICompressWriteCoderProperties@@@@QAEPAPAUICompressWriteCoderProperties@@XZ PROC ; CMyComPtr<ICompressWriteCoderProperties>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UICompressWriteCoderProperties@@@@QAEPAPAUICompressWriteCoderProperties@@XZ ENDP ; CMyComPtr<ICompressWriteCoderProperties>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UICompressWriteCoderProperties@@@@QBEPAUICompressWriteCoderProperties@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UICompressWriteCoderProperties@@@@QBEPAUICompressWriteCoderProperties@@XZ PROC ; CMyComPtr<ICompressWriteCoderProperties>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UICompressWriteCoderProperties@@@@QBEPAUICompressWriteCoderProperties@@XZ ENDP ; CMyComPtr<ICompressWriteCoderProperties>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ PROC	; CMyComPtr<ICryptoSetPassword>::CMyComPtr<ICryptoSetPassword>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ ENDP	; CMyComPtr<ICryptoSetPassword>::CMyComPtr<ICryptoSetPassword>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ PROC	; CMyComPtr<ICryptoSetPassword>::~CMyComPtr<ICryptoSetPassword>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@10
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@10:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ ENDP	; CMyComPtr<ICryptoSetPassword>::~CMyComPtr<ICryptoSetPassword>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ PROC ; CMyComPtr<ICryptoSetPassword>::operator ICryptoSetPassword *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ ENDP ; CMyComPtr<ICryptoSetPassword>::operator ICryptoSetPassword *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UICryptoSetPassword@@@@QAEPAPAUICryptoSetPassword@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UICryptoSetPassword@@@@QAEPAPAUICryptoSetPassword@@XZ PROC ; CMyComPtr<ICryptoSetPassword>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UICryptoSetPassword@@@@QAEPAPAUICryptoSetPassword@@XZ ENDP ; CMyComPtr<ICryptoSetPassword>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ PROC ; CMyComPtr<ICryptoSetPassword>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ ENDP ; CMyComPtr<ICryptoSetPassword>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z PROC ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@CMyComPtr@11
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@11:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z ENDP ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@12
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@12:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ PROC ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ENDP ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICryptoProperties@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UICryptoProperties@@@@QAE@XZ PROC	; CMyComPtr<ICryptoProperties>::CMyComPtr<ICryptoProperties>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UICryptoProperties@@@@QAE@XZ ENDP	; CMyComPtr<ICryptoProperties>::CMyComPtr<ICryptoProperties>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICryptoProperties@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICryptoProperties@@@@QAE@XZ PROC	; CMyComPtr<ICryptoProperties>::~CMyComPtr<ICryptoProperties>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@13
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@13:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICryptoProperties@@@@QAE@XZ ENDP	; CMyComPtr<ICryptoProperties>::~CMyComPtr<ICryptoProperties>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UICryptoProperties@@@@QBEPAUICryptoProperties@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UICryptoProperties@@@@QBEPAUICryptoProperties@@XZ PROC ; CMyComPtr<ICryptoProperties>::operator ICryptoProperties *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UICryptoProperties@@@@QBEPAUICryptoProperties@@XZ ENDP ; CMyComPtr<ICryptoProperties>::operator ICryptoProperties *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UICryptoProperties@@@@QAEPAPAUICryptoProperties@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UICryptoProperties@@@@QAEPAPAUICryptoProperties@@XZ PROC ; CMyComPtr<ICryptoProperties>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UICryptoProperties@@@@QAEPAPAUICryptoProperties@@XZ ENDP ; CMyComPtr<ICryptoProperties>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UICryptoProperties@@@@QBEPAUICryptoProperties@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UICryptoProperties@@@@QBEPAUICryptoProperties@@XZ PROC ; CMyComPtr<ICryptoProperties>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UICryptoProperties@@@@QBEPAUICryptoProperties@@XZ ENDP ; CMyComPtr<ICryptoProperties>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ PROC ; CMyComPtr<ICompressSetDecoderProperties2>::CMyComPtr<ICompressSetDecoderProperties2>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ ENDP ; CMyComPtr<ICompressSetDecoderProperties2>::CMyComPtr<ICompressSetDecoderProperties2>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ PROC ; CMyComPtr<ICompressSetDecoderProperties2>::~CMyComPtr<ICompressSetDecoderProperties2>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@14
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@14:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ ENDP ; CMyComPtr<ICompressSetDecoderProperties2>::~CMyComPtr<ICompressSetDecoderProperties2>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBEPAUICompressSetDecoderProperties2@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBEPAUICompressSetDecoderProperties2@@XZ PROC ; CMyComPtr<ICompressSetDecoderProperties2>::operator ICompressSetDecoderProperties2 *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBEPAUICompressSetDecoderProperties2@@XZ ENDP ; CMyComPtr<ICompressSetDecoderProperties2>::operator ICompressSetDecoderProperties2 *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAEPAPAUICompressSetDecoderProperties2@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAEPAPAUICompressSetDecoderProperties2@@XZ PROC ; CMyComPtr<ICompressSetDecoderProperties2>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAEPAPAUICompressSetDecoderProperties2@@XZ ENDP ; CMyComPtr<ICompressSetDecoderProperties2>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBEPAUICompressSetDecoderProperties2@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBEPAUICompressSetDecoderProperties2@@XZ PROC ; CMyComPtr<ICompressSetDecoderProperties2>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBEPAUICompressSetDecoderProperties2@@XZ ENDP ; CMyComPtr<ICompressSetDecoderProperties2>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??7?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??7?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBE_NXZ PROC ; CMyComPtr<ICompressSetDecoderProperties2>::operator!, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
??7?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBE_NXZ ENDP ; CMyComPtr<ICompressSetDecoderProperties2>::operator!
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ PROC	; CMyComPtr<ICompressSetCoderMt>::CMyComPtr<ICompressSetCoderMt>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ ENDP	; CMyComPtr<ICompressSetCoderMt>::CMyComPtr<ICompressSetCoderMt>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ PROC	; CMyComPtr<ICompressSetCoderMt>::~CMyComPtr<ICompressSetCoderMt>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@15
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@15:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ ENDP	; CMyComPtr<ICompressSetCoderMt>::~CMyComPtr<ICompressSetCoderMt>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ PROC ; CMyComPtr<ICompressSetCoderMt>::operator ICompressSetCoderMt *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ ENDP ; CMyComPtr<ICompressSetCoderMt>::operator ICompressSetCoderMt *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UICompressSetCoderMt@@@@QAEPAPAUICompressSetCoderMt@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UICompressSetCoderMt@@@@QAEPAPAUICompressSetCoderMt@@XZ PROC ; CMyComPtr<ICompressSetCoderMt>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UICompressSetCoderMt@@@@QAEPAPAUICompressSetCoderMt@@XZ ENDP ; CMyComPtr<ICompressSetCoderMt>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ PROC ; CMyComPtr<ICompressSetCoderMt>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ ENDP ; CMyComPtr<ICompressSetCoderMt>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIHasher@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UIHasher@@@@QAE@XZ PROC			; CMyComPtr<IHasher>::CMyComPtr<IHasher>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UIHasher@@@@QAE@XZ ENDP			; CMyComPtr<IHasher>::CMyComPtr<IHasher>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIHasher@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIHasher@@@@QAE@XZ PROC			; CMyComPtr<IHasher>::~CMyComPtr<IHasher>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@16
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@16:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIHasher@@@@QAE@XZ ENDP			; CMyComPtr<IHasher>::~CMyComPtr<IHasher>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UIHasher@@@@QBEPAUIHasher@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UIHasher@@@@QBEPAUIHasher@@XZ PROC	; CMyComPtr<IHasher>::operator IHasher *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UIHasher@@@@QBEPAUIHasher@@XZ ENDP	; CMyComPtr<IHasher>::operator IHasher *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??7?$CMyComPtr@UIHasher@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??7?$CMyComPtr@UIHasher@@@@QBE_NXZ PROC			; CMyComPtr<IHasher>::operator!, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
??7?$CMyComPtr@UIHasher@@@@QBE_NXZ ENDP			; CMyComPtr<IHasher>::operator!
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CObjectVector@UCProperty@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@UCProperty@@@@QBEIXZ PROC		; CObjectVector<CProperty>::Size, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@UCProperty@@@@QBEIXZ ENDP		; CObjectVector<CProperty>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@UCProperty@@@@QBEABUCProperty@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCProperty@@@@QBEABUCProperty@@I@Z PROC ; CObjectVector<CProperty>::operator[], COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCProperty@@@@QBEABUCProperty@@I@Z ENDP ; CObjectVector<CProperty>::operator[]
_TEXT	ENDS
EXTRN	??0CPropVariant@NCOM@NWindows@@QAE@ABV012@@Z:PROC ; NWindows::NCOM::CPropVariant::CPropVariant
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CProp@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CProp@@QAE@ABU0@@Z PROC				; CProp::CProp, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+4]
	mov	BYTE PTR [eax+4], dl
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0CPropVariant@NCOM@NWindows@@QAE@ABV012@@Z ; NWindows::NCOM::CPropVariant::CPropVariant
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CProp@@QAE@ABU0@@Z ENDP				; CProp::CProp
_TEXT	ENDS
PUBLIC	??1CProp@@QAE@XZ				; CProp::~CProp
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCProp@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCProp@@QAEPAXI@Z PROC				; CProp::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CProp@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@3
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCProp@@QAEPAXI@Z ENDP				; CProp::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CProp@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CProp@@QAE@XZ PROC					; CProp::~CProp, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CProp@@QAE@XZ ENDP					; CProp::~CProp
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@PAX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@PAX@@QAE@XZ PROC			; CRecordVector<void *>::CRecordVector<void *>, COMDAT
; _this$ = ecx
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@PAX@@QAE@XZ ENDP			; CRecordVector<void *>::CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@PAX@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@PAX@@QBEIXZ PROC			; CRecordVector<void *>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@PAX@@QBEIXZ ENDP			; CRecordVector<void *>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z
_TEXT	SEGMENT
$T73734 = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z PROC	; CRecordVector<void *>::ConstructReserve, COMDAT
; _this$ = ecx
; Line 52
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 53
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN2@ConstructR
; Line 55
	xor	ecx, ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T73734[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T73734[ebp]
	mov	DWORD PTR [eax], ecx
; Line 56
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@ConstructR:
; Line 58
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z ENDP	; CRecordVector<void *>::ConstructReserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Reserve@?$CRecordVector@PAX@@QAEXI@Z
_TEXT	SEGMENT
$T73738 = -16						; size = 4
$T73737 = -12						; size = 4
_p$72045 = -8						; size = 4
_this$ = -4						; size = 4
_newCapacity$ = 8					; size = 4
?Reserve@?$CRecordVector@PAX@@QAEXI@Z PROC		; CRecordVector<void *>::Reserve, COMDAT
; _this$ = ecx
; Line 61
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 62
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	SHORT $LN3@Reserve
; Line 64
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T73737[ebp], eax
	mov	eax, DWORD PTR $T73737[ebp]
	mov	DWORD PTR _p$72045[ebp], eax
; Line 65
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@Reserve
; Line 66
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$72045[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@Reserve:
; Line 67
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T73738[ebp], edx
	mov	eax, DWORD PTR $T73738[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 68
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$72045[ebp]
	mov	DWORD PTR [ecx], edx
; Line 69
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@Reserve:
; Line 71
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Reserve@?$CRecordVector@PAX@@QAEXI@Z ENDP		; CRecordVector<void *>::Reserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@PAX@@QAE@XZ
_TEXT	SEGMENT
$T73741 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@PAX@@QAE@XZ PROC			; CRecordVector<void *>::~CRecordVector<void *>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T73741[ebp], ecx
	mov	edx, DWORD PTR $T73741[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@PAX@@QAE@XZ ENDP			; CRecordVector<void *>::~CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Clear@?$CRecordVector@PAX@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$CRecordVector@PAX@@QAEXXZ PROC			; CRecordVector<void *>::Clear, COMDAT
; _this$ = ecx
; Line 131
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CRecordVector@PAX@@QAEXXZ ENDP			; CRecordVector<void *>::Clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z PROC	; CRecordVector<void *>::AddInReserved, COMDAT
; _this$ = ecx
; Line 205
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 206
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 207
	mov	esp, ebp
	pop	ebp
	ret	4
?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ENDP	; CRecordVector<void *>::AddInReserved
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@PAX@@QBEABQAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@PAX@@QBEABQAXI@Z PROC		; CRecordVector<void *>::operator[], COMDAT
; _this$ = ecx
; Line 227
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@PAX@@QBEABQAXI@Z ENDP		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@PAX@@QAEAAPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@PAX@@QAEAAPAXI@Z PROC		; CRecordVector<void *>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@PAX@@QAEAAPAXI@Z ENDP		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z PROC ; CMyComPtr<ICompressCoder>::operator=, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@6
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@6:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@6
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@6:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z ENDP ; CMyComPtr<ICompressCoder>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$QueryInterface@UICompressSetCoderProperties@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICompressSetCoderProperties@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iid$ = 8						; size = 4
_pp$ = 12						; size = 4
??$QueryInterface@UICompressSetCoderProperties@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICompressSetCoderProperties@@@Z PROC ; CMyComPtr<IUnknown>::QueryInterface<ICompressSetCoderProperties>, COMDAT
; _this$ = ecx
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 70
	mov	esi, esp
	mov	eax, DWORD PTR _pp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 71
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$QueryInterface@UICompressSetCoderProperties@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICompressSetCoderProperties@@@Z ENDP ; CMyComPtr<IUnknown>::QueryInterface<ICompressSetCoderProperties>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$QueryInterface@UICompressWriteCoderProperties@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICompressWriteCoderProperties@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iid$ = 8						; size = 4
_pp$ = 12						; size = 4
??$QueryInterface@UICompressWriteCoderProperties@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICompressWriteCoderProperties@@@Z PROC ; CMyComPtr<IUnknown>::QueryInterface<ICompressWriteCoderProperties>, COMDAT
; _this$ = ecx
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 70
	mov	esi, esp
	mov	eax, DWORD PTR _pp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 71
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$QueryInterface@UICompressWriteCoderProperties@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICompressWriteCoderProperties@@@Z ENDP ; CMyComPtr<IUnknown>::QueryInterface<ICompressWriteCoderProperties>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$QueryInterface@UICryptoSetPassword@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICryptoSetPassword@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iid$ = 8						; size = 4
_pp$ = 12						; size = 4
??$QueryInterface@UICryptoSetPassword@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICryptoSetPassword@@@Z PROC ; CMyComPtr<IUnknown>::QueryInterface<ICryptoSetPassword>, COMDAT
; _this$ = ecx
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 70
	mov	esi, esp
	mov	eax, DWORD PTR _pp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 71
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$QueryInterface@UICryptoSetPassword@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICryptoSetPassword@@@Z ENDP ; CMyComPtr<IUnknown>::QueryInterface<ICryptoSetPassword>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$QueryInterface@UICryptoProperties@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICryptoProperties@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iid$ = 8						; size = 4
_pp$ = 12						; size = 4
??$QueryInterface@UICryptoProperties@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICryptoProperties@@@Z PROC ; CMyComPtr<IUnknown>::QueryInterface<ICryptoProperties>, COMDAT
; _this$ = ecx
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 70
	mov	esi, esp
	mov	eax, DWORD PTR _pp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 71
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$QueryInterface@UICryptoProperties@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICryptoProperties@@@Z ENDP ; CMyComPtr<IUnknown>::QueryInterface<ICryptoProperties>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$QueryInterface@UICompressSetDecoderProperties2@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICompressSetDecoderProperties2@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iid$ = 8						; size = 4
_pp$ = 12						; size = 4
??$QueryInterface@UICompressSetDecoderProperties2@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICompressSetDecoderProperties2@@@Z PROC ; CMyComPtr<IUnknown>::QueryInterface<ICompressSetDecoderProperties2>, COMDAT
; _this$ = ecx
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 70
	mov	esi, esp
	mov	eax, DWORD PTR _pp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 71
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$QueryInterface@UICompressSetDecoderProperties2@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICompressSetDecoderProperties2@@@Z ENDP ; CMyComPtr<IUnknown>::QueryInterface<ICompressSetDecoderProperties2>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$QueryInterface@UICompressSetCoderMt@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICompressSetCoderMt@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iid$ = 8						; size = 4
_pp$ = 12						; size = 4
??$QueryInterface@UICompressSetCoderMt@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICompressSetCoderMt@@@Z PROC ; CMyComPtr<IUnknown>::QueryInterface<ICompressSetCoderMt>, COMDAT
; _this$ = ecx
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 70
	mov	esi, esp
	mov	eax, DWORD PTR _pp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 71
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$QueryInterface@UICompressSetCoderMt@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICompressSetCoderMt@@@Z ENDP ; CMyComPtr<IUnknown>::QueryInterface<ICompressSetCoderMt>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$QueryInterface@UICompressSetCoderProperties@@@?$CMyComPtr@UIHasher@@@@QBEJABU_GUID@@PAPAUICompressSetCoderProperties@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iid$ = 8						; size = 4
_pp$ = 12						; size = 4
??$QueryInterface@UICompressSetCoderProperties@@@?$CMyComPtr@UIHasher@@@@QBEJABU_GUID@@PAPAUICompressSetCoderProperties@@@Z PROC ; CMyComPtr<IHasher>::QueryInterface<ICompressSetCoderProperties>, COMDAT
; _this$ = ecx
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 70
	mov	esi, esp
	mov	eax, DWORD PTR _pp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 71
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$QueryInterface@UICompressSetCoderProperties@@@?$CMyComPtr@UIHasher@@@@QBEJABU_GUID@@PAPAUICompressSetCoderProperties@@@Z ENDP ; CMyComPtr<IHasher>::QueryInterface<ICompressSetCoderProperties>
_TEXT	ENDS
EXTRN	??_ECBenchmarkOutStream@@UAEPAXI@Z:PROC		; CBenchmarkOutStream::`vector deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_ECBenchmarkOutStream@@W3AEPAXI@Z
_TEXT	SEGMENT
??_ECBenchmarkOutStream@@W3AEPAXI@Z PROC		; [thunk]:CBenchmarkOutStream::`vector deleting destructor', COMDAT
	sub	ecx, 4
	jmp	??_ECBenchmarkOutStream@@UAEPAXI@Z
??_ECBenchmarkOutStream@@W3AEPAXI@Z ENDP		; [thunk]:CBenchmarkOutStream::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??1CBenchmarkOutStream@@UAE@XZ			; CBenchmarkOutStream::~CBenchmarkOutStream
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCBenchmarkOutStream@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCBenchmarkOutStream@@UAEPAXI@Z PROC			; CBenchmarkOutStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CBenchmarkOutStream@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@4:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCBenchmarkOutStream@@UAEPAXI@Z ENDP			; CBenchmarkOutStream::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CBenchmarkOutStream@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CBenchmarkOutStream@@UAE@XZ PROC			; CBenchmarkOutStream::~CBenchmarkOutStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1CBenchBuffer@@UAE@XZ			; CBenchBuffer::~CBenchBuffer
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CBenchmarkOutStream@@UAE@XZ ENDP			; CBenchmarkOutStream::~CBenchmarkOutStream
_TEXT	ENDS
END
