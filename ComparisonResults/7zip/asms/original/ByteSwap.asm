; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\CPP\7zip\Compress\ByteSwap.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG66556 DB	'Swap2', 00H
	ORG $+2
$SG66557 DB	'Swap4', 00H
	ORG $+2
_g_CodecsInfo DD FLAT:?CreateFilter2@@YGPAXXZ
	DD	FLAT:?CreateFilter2@@YGPAXXZ
	DQ	0000000000020302H
	DD	FLAT:$SG66556
	DD	01H
	DB	01H
	ORG $+7
	DD	FLAT:?CreateFilter4@@YGPAXXZ
	DD	FLAT:?CreateFilter4@@YGPAXXZ
	DQ	0000000000020304H
	DD	FLAT:$SG66557
	DD	01H
	DB	01H
	ORG $+7
CONST	ENDS
PUBLIC	?Init@CByteSwap2@@UAGJXZ			; CByteSwap2::Init
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\cpp\7zip\compress\byteswap.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_this$ = 8						; size = 4
?Init@CByteSwap2@@UAGJXZ PROC				; CByteSwap2::Init
; Line 29
	push	ebp
	mov	ebp, esp
	xor	eax, eax
	pop	ebp
	ret	4
?Init@CByteSwap2@@UAGJXZ ENDP				; CByteSwap2::Init
_TEXT	ENDS
PUBLIC	?Filter@CByteSwap2@@UAGIPAEI@Z			; CByteSwap2::Filter
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_b0$66512 = -9						; size = 1
_end$ = -8						; size = 4
_kStep$ = -4						; size = 4
_this$ = 8						; size = 4
_data$ = 12						; size = 4
_size$ = 16						; size = 4
?Filter@CByteSwap2@@UAGIPAEI@Z PROC			; CByteSwap2::Filter
; Line 32
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 33
	mov	DWORD PTR _kStep$[ebp], 2
; Line 34
	cmp	DWORD PTR _size$[ebp], 2
	jae	SHORT $LN4@Filter
; Line 35
	xor	eax, eax
	jmp	SHORT $LN5@Filter
$LN4@Filter:
; Line 36
	mov	eax, DWORD PTR _size$[ebp]
	and	eax, -2					; fffffffeH
	mov	DWORD PTR _size$[ebp], eax
; Line 38
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR _end$[ebp], ecx
$LN3@Filter:
; Line 42
	mov	edx, DWORD PTR _data$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR _b0$66512[ebp], al
; Line 43
	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR _data$[ebp]
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR [ecx], al
; Line 44
	mov	ecx, DWORD PTR _data$[ebp]
	mov	dl, BYTE PTR _b0$66512[ebp]
	mov	BYTE PTR [ecx+1], dl
; Line 45
	mov	eax, DWORD PTR _data$[ebp]
	add	eax, 2
	mov	DWORD PTR _data$[ebp], eax
; Line 47
	mov	ecx, DWORD PTR _data$[ebp]
	cmp	ecx, DWORD PTR _end$[ebp]
	jne	SHORT $LN3@Filter
; Line 49
	mov	eax, DWORD PTR _size$[ebp]
$LN5@Filter:
; Line 50
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Filter@CByteSwap2@@UAGIPAEI@Z ENDP			; CByteSwap2::Filter
_TEXT	ENDS
PUBLIC	?Init@CByteSwap4@@UAGJXZ			; CByteSwap4::Init
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = 8						; size = 4
?Init@CByteSwap4@@UAGJXZ PROC				; CByteSwap4::Init
; Line 52
	push	ebp
	mov	ebp, esp
	xor	eax, eax
	pop	ebp
	ret	4
?Init@CByteSwap4@@UAGJXZ ENDP				; CByteSwap4::Init
_TEXT	ENDS
PUBLIC	?Filter@CByteSwap4@@UAGIPAEI@Z			; CByteSwap4::Filter
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_b1$66530 = -10						; size = 1
_b0$66529 = -9						; size = 1
_end$ = -8						; size = 4
_kStep$ = -4						; size = 4
_this$ = 8						; size = 4
_data$ = 12						; size = 4
_size$ = 16						; size = 4
?Filter@CByteSwap4@@UAGIPAEI@Z PROC			; CByteSwap4::Filter
; Line 55
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 56
	mov	DWORD PTR _kStep$[ebp], 4
; Line 57
	cmp	DWORD PTR _size$[ebp], 4
	jae	SHORT $LN4@Filter@2
; Line 58
	xor	eax, eax
	jmp	SHORT $LN5@Filter@2
$LN4@Filter@2:
; Line 59
	mov	eax, DWORD PTR _size$[ebp]
	and	eax, -4					; fffffffcH
	mov	DWORD PTR _size$[ebp], eax
; Line 61
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR _end$[ebp], ecx
$LN3@Filter@2:
; Line 65
	mov	edx, DWORD PTR _data$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR _b0$66529[ebp], al
; Line 66
	mov	ecx, DWORD PTR _data$[ebp]
	mov	dl, BYTE PTR [ecx+1]
	mov	BYTE PTR _b1$66530[ebp], dl
; Line 67
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	dl, BYTE PTR [ecx+3]
	mov	BYTE PTR [eax], dl
; Line 68
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	dl, BYTE PTR [ecx+2]
	mov	BYTE PTR [eax+1], dl
; Line 69
	mov	eax, DWORD PTR _data$[ebp]
	mov	cl, BYTE PTR _b1$66530[ebp]
	mov	BYTE PTR [eax+2], cl
; Line 70
	mov	edx, DWORD PTR _data$[ebp]
	mov	al, BYTE PTR _b0$66529[ebp]
	mov	BYTE PTR [edx+3], al
; Line 71
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, 4
	mov	DWORD PTR _data$[ebp], ecx
; Line 73
	mov	edx, DWORD PTR _data$[ebp]
	cmp	edx, DWORD PTR _end$[ebp]
	jne	SHORT $LN3@Filter@2
; Line 75
	mov	eax, DWORD PTR _size$[ebp]
$LN5@Filter@2:
; Line 76
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Filter@CByteSwap4@@UAGIPAEI@Z ENDP			; CByteSwap4::Filter
_TEXT	ENDS
PUBLIC	??0CByteSwap2@@QAE@XZ				; CByteSwap2::CByteSwap2
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
xdata$x	SEGMENT
__unwindtable$?CreateFilter2@@YGPAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateFilter2@@YGPAXXZ$0
__ehfuncinfo$?CreateFilter2@@YGPAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreateFilter2@@YGPAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv74 = -24						; size = 4
$T66691 = -20						; size = 4
$T66690 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?CreateFilter2@@YGPAXXZ PROC				; CreateFilter2
; Line 78
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateFilter2@@YGPAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-24], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	push	8
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T66691[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T66691[ebp], 0
	je	SHORT $LN3@CreateFilt
	mov	ecx, DWORD PTR $T66691[ebp]
	call	??0CByteSwap2@@QAE@XZ
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@CreateFilt
$LN3@CreateFilt:
	mov	DWORD PTR tv74[ebp], 0
$LN4@CreateFilt:
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T66690[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T66690[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateFilter2@@YGPAXXZ$0:
	mov	eax, DWORD PTR $T66691[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?CreateFilter2@@YGPAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateFilter2@@YGPAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateFilter2@@YGPAXXZ ENDP				; CreateFilter2
PUBLIC	??_7CByteSwap2@@6B@				; CByteSwap2::`vftable'
PUBLIC	??0CMyUnknownImp@@QAE@XZ			; CMyUnknownImp::CMyUnknownImp
PUBLIC	??0ICompressFilter@@QAE@XZ			; ICompressFilter::ICompressFilter
PUBLIC	??_R4CByteSwap2@@6B@				; CByteSwap2::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCByteSwap2@@@8				; CByteSwap2 `RTTI Type Descriptor'
PUBLIC	??_R3CByteSwap2@@8				; CByteSwap2::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CByteSwap2@@8				; CByteSwap2::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CByteSwap2@@8			; CByteSwap2::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ICompressFilter@@8		; ICompressFilter::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUICompressFilter@@@8			; ICompressFilter `RTTI Type Descriptor'
PUBLIC	??_R3ICompressFilter@@8				; ICompressFilter::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ICompressFilter@@8				; ICompressFilter::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIUnknown@@@8				; IUnknown `RTTI Type Descriptor'
PUBLIC	??_R3IUnknown@@8				; IUnknown::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IUnknown@@8				; IUnknown::`RTTI Base Class Array'
PUBLIC	??_R13?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AVCMyUnknownImp@@@8			; CMyUnknownImp `RTTI Type Descriptor'
PUBLIC	??_R3CMyUnknownImp@@8				; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMyUnknownImp@@8				; CMyUnknownImp::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?QueryInterface@CByteSwap2@@UAGJABU_GUID@@PAPAX@Z ; CByteSwap2::QueryInterface
PUBLIC	?AddRef@CByteSwap2@@UAGKXZ			; CByteSwap2::AddRef
PUBLIC	?Release@CByteSwap2@@UAGKXZ			; CByteSwap2::Release
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_R1A@?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R2CMyUnknownImp@@8
rdata$r	SEGMENT
??_R2CMyUnknownImp@@8 DD FLAT:??_R1A@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMyUnknownImp@@8
rdata$r	SEGMENT
??_R3CMyUnknownImp@@8 DD 00H				; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMyUnknownImp@@@8
_DATA	SEGMENT
??_R0?AVCMyUnknownImp@@@8 DD FLAT:??_7type_info@@6B@	; CMyUnknownImp `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMyUnknownImp@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R13?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R2IUnknown@@8
rdata$r	SEGMENT
??_R2IUnknown@@8 DD FLAT:??_R1A@?0A@EA@IUnknown@@8	; IUnknown::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3IUnknown@@8
rdata$r	SEGMENT
??_R3IUnknown@@8 DD 00H					; IUnknown::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIUnknown@@@8
_DATA	SEGMENT
??_R0?AUIUnknown@@@8 DD FLAT:??_7type_info@@6B@		; IUnknown `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIUnknown@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IUnknown@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R2ICompressFilter@@8
rdata$r	SEGMENT
??_R2ICompressFilter@@8 DD FLAT:??_R1A@?0A@EA@ICompressFilter@@8 ; ICompressFilter::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ICompressFilter@@8
rdata$r	SEGMENT
??_R3ICompressFilter@@8 DD 00H				; ICompressFilter::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ICompressFilter@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUICompressFilter@@@8
_DATA	SEGMENT
??_R0?AUICompressFilter@@@8 DD FLAT:??_7type_info@@6B@	; ICompressFilter `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUICompressFilter@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ICompressFilter@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ICompressFilter@@8 DD FLAT:??_R0?AUICompressFilter@@@8 ; ICompressFilter::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICompressFilter@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CByteSwap2@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CByteSwap2@@8 DD FLAT:??_R0?AVCByteSwap2@@@8 ; CByteSwap2::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CByteSwap2@@8
rdata$r	ENDS
;	COMDAT ??_R2CByteSwap2@@8
rdata$r	SEGMENT
??_R2CByteSwap2@@8 DD FLAT:??_R1A@?0A@EA@CByteSwap2@@8	; CByteSwap2::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ICompressFilter@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CByteSwap2@@8
rdata$r	SEGMENT
??_R3CByteSwap2@@8 DD 00H				; CByteSwap2::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2CByteSwap2@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCByteSwap2@@@8
_DATA	SEGMENT
??_R0?AVCByteSwap2@@@8 DD FLAT:??_7type_info@@6B@	; CByteSwap2 `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCByteSwap2@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CByteSwap2@@6B@
rdata$r	SEGMENT
??_R4CByteSwap2@@6B@ DD 00H				; CByteSwap2::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCByteSwap2@@@8
	DD	FLAT:??_R3CByteSwap2@@8
rdata$r	ENDS
;	COMDAT ??_7CByteSwap2@@6B@
CONST	SEGMENT
??_7CByteSwap2@@6B@ DD FLAT:??_R4CByteSwap2@@6B@	; CByteSwap2::`vftable'
	DD	FLAT:?QueryInterface@CByteSwap2@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CByteSwap2@@UAGKXZ
	DD	FLAT:?Release@CByteSwap2@@UAGKXZ
	DD	FLAT:?Init@CByteSwap2@@UAGJXZ
	DD	FLAT:?Filter@CByteSwap2@@UAGIPAEI@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CByteSwap2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CByteSwap2@@QAE@XZ PROC				; CByteSwap2::CByteSwap2, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ICompressFilter@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CByteSwap2@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CByteSwap2@@QAE@XZ ENDP				; CByteSwap2::CByteSwap2
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CMyUnknownImp@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMyUnknownImp@@QAE@XZ PROC				; CMyUnknownImp::CMyUnknownImp, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 167
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CMyUnknownImp@@QAE@XZ ENDP				; CMyUnknownImp::CMyUnknownImp
_TEXT	ENDS
PUBLIC	_==@8
EXTRN	_IID_IUnknown:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@CByteSwap2@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CByteSwap2@@UAGJABU_GUID@@PAPAX@Z PROC	; CByteSwap2::QueryInterface, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\compress\byteswap.cpp
; Line 16
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN1@QueryInter
$LN2@QueryInter:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN3@QueryInter
$LN1@QueryInter:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	xor	eax, eax
$LN3@QueryInter:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CByteSwap2@@UAGJABU_GUID@@PAPAX@Z ENDP	; CByteSwap2::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CByteSwap2@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CByteSwap2@@UAGKXZ PROC				; CByteSwap2::AddRef, COMDAT
; Line 16
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CByteSwap2@@UAGKXZ ENDP				; CByteSwap2::AddRef
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CByteSwap2@@UAGKXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
$T66714 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CByteSwap2@@UAGKXZ PROC			; CByteSwap2::Release, COMDAT
; Line 16
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	jmp	SHORT $LN2@Release
$LN1@Release:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T66714[ebp], edx
	mov	eax, DWORD PTR $T66714[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	xor	eax, eax
$LN2@Release:
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CByteSwap2@@UAGKXZ ENDP			; CByteSwap2::Release
_TEXT	ENDS
PUBLIC	_IsEqualGUID@8
; Function compile flags: /Odtp /RTCsu
;	COMDAT _==@8
_TEXT	SEGMENT
_guidOne$ = 8						; size = 4
_guidOther$ = 12					; size = 4
_==@8	PROC						; COMDAT
; File c:\program files (x86)\microsoft sdks\windows\v7.0a\include\guiddef.h
; Line 193
	push	ebp
	mov	ebp, esp
; Line 194
	mov	eax, DWORD PTR _guidOther$[ebp]
	push	eax
	mov	ecx, DWORD PTR _guidOne$[ebp]
	push	ecx
	call	_IsEqualGUID@8
; Line 195
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_==@8	ENDP
_TEXT	ENDS
EXTRN	_memcmp:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT _IsEqualGUID@8
_TEXT	SEGMENT
_rguid1$ = 8						; size = 4
_rguid2$ = 12						; size = 4
_IsEqualGUID@8 PROC					; COMDAT
; Line 160
	push	ebp
	mov	ebp, esp
; Line 161
	push	16					; 00000010H
	mov	eax, DWORD PTR _rguid2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rguid1$[ebp]
	push	ecx
	call	_memcmp
	add	esp, 12					; 0000000cH
	neg	eax
	sbb	eax, eax
	add	eax, 1
; Line 162
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_IsEqualGUID@8 ENDP
_TEXT	ENDS
PUBLIC	??_7ICompressFilter@@6B@			; ICompressFilter::`vftable'
PUBLIC	??0IUnknown@@QAE@XZ				; IUnknown::IUnknown
PUBLIC	??_R4ICompressFilter@@6B@			; ICompressFilter::`RTTI Complete Object Locator'
EXTRN	__purecall:PROC
;	COMDAT ??_R4ICompressFilter@@6B@
rdata$r	SEGMENT
??_R4ICompressFilter@@6B@ DD 00H			; ICompressFilter::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUICompressFilter@@@8
	DD	FLAT:??_R3ICompressFilter@@8
rdata$r	ENDS
;	COMDAT ??_7ICompressFilter@@6B@
CONST	SEGMENT
??_7ICompressFilter@@6B@ DD FLAT:??_R4ICompressFilter@@6B@ ; ICompressFilter::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ICompressFilter@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ICompressFilter@@QAE@XZ PROC				; ICompressFilter::ICompressFilter, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ICompressFilter@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ICompressFilter@@QAE@XZ ENDP				; ICompressFilter::ICompressFilter
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0IUnknown@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IUnknown@@QAE@XZ PROC				; IUnknown::IUnknown, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0IUnknown@@QAE@XZ ENDP				; IUnknown::IUnknown
_TEXT	ENDS
PUBLIC	??0CByteSwap4@@QAE@XZ				; CByteSwap4::CByteSwap4
xdata$x	SEGMENT
__unwindtable$?CreateFilter4@@YGPAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateFilter4@@YGPAXXZ$0
__ehfuncinfo$?CreateFilter4@@YGPAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreateFilter4@@YGPAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv74 = -24						; size = 4
$T66726 = -20						; size = 4
$T66725 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?CreateFilter4@@YGPAXXZ PROC				; CreateFilter4
; File c:\workspace\7z1505-src\cpp\7zip\compress\byteswap.cpp
; Line 79
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateFilter4@@YGPAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-24], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	push	8
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T66726[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T66726[ebp], 0
	je	SHORT $LN3@CreateFilt@2
	mov	ecx, DWORD PTR $T66726[ebp]
	call	??0CByteSwap4@@QAE@XZ
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@CreateFilt@2
$LN3@CreateFilt@2:
	mov	DWORD PTR tv74[ebp], 0
$LN4@CreateFilt@2:
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T66725[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T66725[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateFilter4@@YGPAXXZ$0:
	mov	eax, DWORD PTR $T66726[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?CreateFilter4@@YGPAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateFilter4@@YGPAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateFilter4@@YGPAXXZ ENDP				; CreateFilter4
PUBLIC	??_7CByteSwap4@@6B@				; CByteSwap4::`vftable'
PUBLIC	??_R4CByteSwap4@@6B@				; CByteSwap4::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCByteSwap4@@@8				; CByteSwap4 `RTTI Type Descriptor'
PUBLIC	??_R3CByteSwap4@@8				; CByteSwap4::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CByteSwap4@@8				; CByteSwap4::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CByteSwap4@@8			; CByteSwap4::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?QueryInterface@CByteSwap4@@UAGJABU_GUID@@PAPAX@Z ; CByteSwap4::QueryInterface
PUBLIC	?AddRef@CByteSwap4@@UAGKXZ			; CByteSwap4::AddRef
PUBLIC	?Release@CByteSwap4@@UAGKXZ			; CByteSwap4::Release
;	COMDAT ??_R1A@?0A@EA@CByteSwap4@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CByteSwap4@@8 DD FLAT:??_R0?AVCByteSwap4@@@8 ; CByteSwap4::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CByteSwap4@@8
rdata$r	ENDS
;	COMDAT ??_R2CByteSwap4@@8
rdata$r	SEGMENT
??_R2CByteSwap4@@8 DD FLAT:??_R1A@?0A@EA@CByteSwap4@@8	; CByteSwap4::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ICompressFilter@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CByteSwap4@@8
rdata$r	SEGMENT
??_R3CByteSwap4@@8 DD 00H				; CByteSwap4::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2CByteSwap4@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCByteSwap4@@@8
_DATA	SEGMENT
??_R0?AVCByteSwap4@@@8 DD FLAT:??_7type_info@@6B@	; CByteSwap4 `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCByteSwap4@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CByteSwap4@@6B@
rdata$r	SEGMENT
??_R4CByteSwap4@@6B@ DD 00H				; CByteSwap4::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCByteSwap4@@@8
	DD	FLAT:??_R3CByteSwap4@@8
rdata$r	ENDS
;	COMDAT ??_7CByteSwap4@@6B@
CONST	SEGMENT
??_7CByteSwap4@@6B@ DD FLAT:??_R4CByteSwap4@@6B@	; CByteSwap4::`vftable'
	DD	FLAT:?QueryInterface@CByteSwap4@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CByteSwap4@@UAGKXZ
	DD	FLAT:?Release@CByteSwap4@@UAGKXZ
	DD	FLAT:?Init@CByteSwap4@@UAGJXZ
	DD	FLAT:?Filter@CByteSwap4@@UAGIPAEI@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CByteSwap4@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CByteSwap4@@QAE@XZ PROC				; CByteSwap4::CByteSwap4, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ICompressFilter@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CByteSwap4@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CByteSwap4@@QAE@XZ ENDP				; CByteSwap4::CByteSwap4
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CByteSwap4@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CByteSwap4@@UAGJABU_GUID@@PAPAX@Z PROC	; CByteSwap4::QueryInterface, COMDAT
; Line 25
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@2
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN1@QueryInter@2
$LN2@QueryInter@2:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN3@QueryInter@2
$LN1@QueryInter@2:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	xor	eax, eax
$LN3@QueryInter@2:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CByteSwap4@@UAGJABU_GUID@@PAPAX@Z ENDP	; CByteSwap4::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CByteSwap4@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CByteSwap4@@UAGKXZ PROC				; CByteSwap4::AddRef, COMDAT
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CByteSwap4@@UAGKXZ ENDP				; CByteSwap4::AddRef
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CByteSwap4@@UAGKXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
$T66741 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CByteSwap4@@UAGKXZ PROC			; CByteSwap4::Release, COMDAT
; Line 25
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	jmp	SHORT $LN2@Release@2
$LN1@Release@2:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T66741[ebp], edx
	mov	eax, DWORD PTR $T66741[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	xor	eax, eax
$LN2@Release@2:
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CByteSwap4@@UAGKXZ ENDP			; CByteSwap4::Release
_TEXT	ENDS
PUBLIC	??0CRegisterCodecsByteSwap@@QAE@XZ		; CRegisterCodecsByteSwap::CRegisterCodecsByteSwap
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??__Eg_RegisterCodecs@@YAXXZ
text$yc	SEGMENT
??__Eg_RegisterCodecs@@YAXXZ PROC			; `dynamic initializer for 'g_RegisterCodecs'', COMDAT
; Line 87
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET _g_RegisterCodecs
	call	??0CRegisterCodecsByteSwap@@QAE@XZ	; CRegisterCodecsByteSwap::CRegisterCodecsByteSwap
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__Eg_RegisterCodecs@@YAXXZ ENDP			; `dynamic initializer for 'g_RegisterCodecs''
text$yc	ENDS
EXTRN	?RegisterCodec@@YGXPBUCCodecInfo@@@Z:PROC	; RegisterCodec
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CRegisterCodecsByteSwap@@QAE@XZ
_TEXT	SEGMENT
_i$66567 = -8						; size = 4
_this$ = -4						; size = 4
??0CRegisterCodecsByteSwap@@QAE@XZ PROC			; CRegisterCodecsByteSwap::CRegisterCodecsByteSwap, COMDAT
; _this$ = ecx
; Line 87
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR _i$66567[ebp], 0
	jmp	SHORT $LN3@CRegisterC
$LN2@CRegisterC:
	mov	eax, DWORD PTR _i$66567[ebp]
	add	eax, 1
	mov	DWORD PTR _i$66567[ebp], eax
$LN3@CRegisterC:
	cmp	DWORD PTR _i$66567[ebp], 2
	jae	SHORT $LN4@CRegisterC
	mov	ecx, DWORD PTR _i$66567[ebp]
	shl	ecx, 5
	add	ecx, OFFSET _g_CodecsInfo
	push	ecx
	call	?RegisterCodec@@YGXPBUCCodecInfo@@@Z	; RegisterCodec
	jmp	SHORT $LN2@CRegisterC
$LN4@CRegisterC:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CRegisterCodecsByteSwap@@QAE@XZ ENDP			; CRegisterCodecsByteSwap::CRegisterCodecsByteSwap
_TEXT	ENDS
_BSS	SEGMENT
_g_RegisterCodecs DB 01H DUP (?)
_BSS	ENDS
CRT$XCU	SEGMENT
_g_RegisterCodecs$initializer$ DD FLAT:??__Eg_RegisterCodecs@@YAXXZ
CRT$XCU	ENDS
END
