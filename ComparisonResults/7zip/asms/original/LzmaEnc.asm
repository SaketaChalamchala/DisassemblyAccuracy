; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\C\LzmaEnc.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
_kLiteralNextStates DD 00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	05H
	DD	06H
	DD	04H
	DD	05H
_kMatchNextStates DD 07H
	DD	07H
	DD	07H
	DD	07H
	DD	07H
	DD	07H
	DD	07H
	DD	0aH
	DD	0aH
	DD	0aH
	DD	0aH
	DD	0aH
_kRepNextStates DD 08H
	DD	08H
	DD	08H
	DD	08H
	DD	08H
	DD	08H
	DD	08H
	DD	0bH
	DD	0bH
	DD	0bH
	DD	0bH
	DD	0bH
_kShortRepNextStates DD 09H
	DD	09H
	DD	09H
	DD	09H
	DD	09H
	DD	09H
	DD	09H
	DD	0bH
	DD	0bH
	DD	0bH
	DD	0bH
	DD	0bH
CONST	ENDS
PUBLIC	_LzmaEncProps_Init@4
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\c\lzmaenc.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_p$ = 8							; size = 4
_LzmaEncProps_Init@4 PROC
; Line 51
	push	ebp
	mov	ebp, esp
; Line 52
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], 5
; Line 53
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+44], 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 54
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+8], -1
	mov	DWORD PTR [eax+12], -1
; Line 55
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+52], -1
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+40], -1
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+36], -1
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+32], -1
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+28], -1
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+24], -1
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+20], -1
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+16], -1
; Line 56
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+48], 0
; Line 57
	pop	ebp
	ret	4
_LzmaEncProps_Init@4 ENDP
_TEXT	ENDS
PUBLIC	_LzmaEncProps_Normalize@4
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv170 = -28						; size = 4
tv194 = -24						; size = 4
tv191 = -20						; size = 8
tv74 = -12						; size = 4
_i$80421 = -8						; size = 4
_level$ = -4						; size = 4
_p$ = 8							; size = 4
_LzmaEncProps_Normalize@4 PROC
; Line 60
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 61
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _level$[ebp], ecx
; Line 62
	cmp	DWORD PTR _level$[ebp], 0
	jge	SHORT $LN17@LzmaEncPro
	mov	DWORD PTR _level$[ebp], 5
$LN17@LzmaEncPro:
; Line 63
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _level$[ebp]
	mov	DWORD PTR [edx], eax
; Line 65
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jne	SHORT $LN16@LzmaEncPro
	cmp	DWORD PTR _level$[ebp], 5
	jg	SHORT $LN20@LzmaEncPro
	mov	edx, DWORD PTR _level$[ebp]
	lea	ecx, DWORD PTR [edx+edx+14]
	mov	eax, 1
	shl	eax, cl
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN21@LzmaEncPro
$LN20@LzmaEncPro:
	mov	ecx, DWORD PTR _level$[ebp]
	sub	ecx, 6
	neg	ecx
	sbb	ecx, ecx
	and	ecx, 33554432				; 02000000H
	add	ecx, 33554432				; 02000000H
	mov	DWORD PTR tv74[ebp], ecx
$LN21@LzmaEncPro:
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR [edx+4], eax
$LN16@LzmaEncPro:
; Line 66
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	xor	eax, eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR tv191[ebp], edx
	mov	DWORD PTR tv191[ebp+4], eax
	mov	DWORD PTR tv194[ebp], ecx
	mov	edx, DWORD PTR tv194[ebp]
	mov	eax, DWORD PTR tv191[ebp+4]
	cmp	eax, DWORD PTR [edx+12]
	jb	SHORT $LN15@LzmaEncPro
	ja	SHORT $LN24@LzmaEncPro
	mov	ecx, DWORD PTR tv194[ebp]
	mov	edx, DWORD PTR tv191[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jbe	SHORT $LN15@LzmaEncPro
$LN24@LzmaEncPro:
; Line 69
	mov	DWORD PTR _i$80421[ebp], 11		; 0000000bH
	jmp	SHORT $LN14@LzmaEncPro
$LN13@LzmaEncPro:
	mov	eax, DWORD PTR _i$80421[ebp]
	add	eax, 1
	mov	DWORD PTR _i$80421[ebp], eax
$LN14@LzmaEncPro:
	cmp	DWORD PTR _i$80421[ebp], 30		; 0000001eH
	ja	SHORT $LN15@LzmaEncPro
; Line 71
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, 2
	mov	ecx, DWORD PTR _i$80421[ebp]
	shl	eax, cl
	cmp	edx, eax
	ja	SHORT $LN11@LzmaEncPro
	mov	edx, 2
	mov	ecx, DWORD PTR _i$80421[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+4], edx
	jmp	SHORT $LN15@LzmaEncPro
$LN11@LzmaEncPro:
; Line 72
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, 3
	mov	ecx, DWORD PTR _i$80421[ebp]
	shl	eax, cl
	cmp	edx, eax
	ja	SHORT $LN10@LzmaEncPro
	mov	edx, 3
	mov	ecx, DWORD PTR _i$80421[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+4], edx
	jmp	SHORT $LN15@LzmaEncPro
$LN10@LzmaEncPro:
; Line 73
	jmp	SHORT $LN13@LzmaEncPro
$LN15@LzmaEncPro:
; Line 76
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	jge	SHORT $LN9@LzmaEncPro
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+16], 3
$LN9@LzmaEncPro:
; Line 77
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jge	SHORT $LN8@LzmaEncPro
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+20], 0
$LN8@LzmaEncPro:
; Line 78
	mov	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [edx+24], 0
	jge	SHORT $LN7@LzmaEncPro
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+24], 2
$LN7@LzmaEncPro:
; Line 80
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [ecx+28], 0
	jge	SHORT $LN6@LzmaEncPro
	xor	edx, edx
	cmp	DWORD PTR _level$[ebp], 5
	setge	dl
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+28], edx
$LN6@LzmaEncPro:
; Line 81
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [ecx+32], 0
	jge	SHORT $LN5@LzmaEncPro
	xor	edx, edx
	cmp	DWORD PTR _level$[ebp], 7
	setge	dl
	sub	edx, 1
	and	edx, -32				; ffffffe0H
	add	edx, 64					; 00000040H
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+32], edx
$LN5@LzmaEncPro:
; Line 82
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	jge	SHORT $LN4@LzmaEncPro
	mov	edx, DWORD PTR _p$[ebp]
	xor	eax, eax
	cmp	DWORD PTR [edx+28], 0
	setne	al
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+36], eax
$LN4@LzmaEncPro:
; Line 83
	mov	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [edx+40], 0
	jge	SHORT $LN3@LzmaEncPro
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+40], 4
$LN3@LzmaEncPro:
; Line 84
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [ecx+44], 0
	jne	SHORT $LN2@LzmaEncPro
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+32]
	sar	eax, 1
	add	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _p$[ebp]
	xor	edx, edx
	cmp	DWORD PTR [ecx+36], 0
	sete	dl
	mov	ecx, edx
	sar	eax, cl
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+44], eax
$LN2@LzmaEncPro:
; Line 86
	mov	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [edx+52], 0
	jge	SHORT $LN18@LzmaEncPro
; Line 89
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN22@LzmaEncPro
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [ecx+28], 0
	je	SHORT $LN22@LzmaEncPro
	mov	DWORD PTR tv170[ebp], 2
	jmp	SHORT $LN23@LzmaEncPro
$LN22@LzmaEncPro:
	mov	DWORD PTR tv170[ebp], 1
$LN23@LzmaEncPro:
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR tv170[ebp]
	mov	DWORD PTR [edx+52], eax
$LN18@LzmaEncPro:
; Line 93
	mov	esp, ebp
	pop	ebp
	ret	4
_LzmaEncProps_Normalize@4 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_LzmaEncProps_GetDictSize@4
EXTRN	___security_cookie:DWORD
EXTRN	__RTC_CheckEsp:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_props$ = -64						; size = 56
__$ArrayPad$ = -4					; size = 4
_props2$ = 8						; size = 4
_LzmaEncProps_GetDictSize@4 PROC
; Line 96
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-68]
	mov	ecx, 17					; 00000011H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 97
	mov	esi, DWORD PTR _props2$[ebp]
	mov	ecx, 14					; 0000000eH
	lea	edi, DWORD PTR _props$[ebp]
	rep movsd
; Line 98
	lea	eax, DWORD PTR _props$[ebp]
	push	eax
	call	_LzmaEncProps_Normalize@4
; Line 99
	mov	eax, DWORD PTR _props$[ebp+4]
; Line 100
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@LzmaEncPro@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 68					; 00000044H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN5@LzmaEncPro@2:
	DD	1
	DD	$LN4@LzmaEncPro@2
$LN4@LzmaEncPro@2:
	DD	-64					; ffffffc0H
	DD	56					; 00000038H
	DD	$LN3@LzmaEncPro@2
$LN3@LzmaEncPro@2:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	115					; 00000073H
	DB	0
_LzmaEncProps_GetDictSize@4 ENDP
_TEXT	ENDS
PUBLIC	_LzmaEnc_SaveState@4
EXTRN	_memcpy:PROC
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$ = -12						; size = 4
_dest$ = -8						; size = 4
_p$ = -4						; size = 4
_pp$ = 8						; size = 4
_LzmaEnc_SaveState@4 PROC
; Line 387
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 388
	mov	eax, DWORD PTR _pp$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 389
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 244988				; 0003bcfcH
	mov	DWORD PTR _dest$[ebp], ecx
; Line 391
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 207980				; 00032c6cH
	mov	eax, DWORD PTR _dest$[ebp]
	add	eax, 1660				; 0000067cH
	push	18504					; 00004848H
	push	edx
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 392
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 226484				; 000374b4H
	mov	edx, DWORD PTR _dest$[ebp]
	add	edx, 20164				; 00004ec4H
	push	18504					; 00004848H
	push	ecx
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 393
	mov	eax, DWORD PTR _dest$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	DWORD PTR [eax+4], edx
; Line 395
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@LzmaEnc_Sa
$LN5@LzmaEnc_Sa:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@LzmaEnc_Sa:
	cmp	DWORD PTR _i$[ebp], 12			; 0000000cH
	jge	SHORT $LN4@LzmaEnc_Sa
; Line 397
	push	32					; 00000020H
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx+206344]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx+24]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 398
	push	32					; 00000020H
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx+206824]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx+504]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 399
	jmp	SHORT $LN5@LzmaEnc_Sa
$LN4@LzmaEnc_Sa:
; Line 400
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@LzmaEnc_Sa
$LN2@LzmaEnc_Sa:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@LzmaEnc_Sa:
	cmp	DWORD PTR _i$[ebp], 4
	jge	SHORT $LN1@LzmaEnc_Sa
; Line 401
	push	128					; 00000080H
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 7
	mov	eax, DWORD PTR _p$[ebp]
	lea	ecx, DWORD PTR [eax+edx+207208]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 7
	mov	eax, DWORD PTR _dest$[ebp]
	lea	ecx, DWORD PTR [eax+edx+888]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN2@LzmaEnc_Sa
$LN1@LzmaEnc_Sa:
; Line 402
	push	24					; 00000018H
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 206728				; 00032788H
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	add	eax, 408				; 00000198H
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 403
	push	24					; 00000018H
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 206752				; 000327a0H
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	add	edx, 432				; 000001b0H
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 404
	push	24					; 00000018H
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 206776				; 000327b8H
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	add	ecx, 456				; 000001c8H
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 405
	push	24					; 00000018H
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 206800				; 000327d0H
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	add	eax, 480				; 000001e0H
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 406
	push	228					; 000000e4H
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 207720				; 00032b68H
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	add	edx, 1400				; 00000578H
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 407
	push	32					; 00000020H
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 207948				; 00032c4cH
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	add	ecx, 1628				; 0000065cH
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 408
	push	16					; 00000010H
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 52					; 00000034H
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	add	eax, 8
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 409
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, 768				; 00000300H
	mov	ecx, DWORD PTR [ecx+92]
	shl	edx, cl
	shl	edx, 1
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 410
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_LzmaEnc_SaveState@4 ENDP
_TEXT	ENDS
PUBLIC	_LzmaEnc_RestoreState@4
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$ = -12						; size = 4
_p$ = -8						; size = 4
_dest$ = -4						; size = 4
_pp$ = 8						; size = 4
_LzmaEnc_RestoreState@4 PROC
; Line 413
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 414
	mov	eax, DWORD PTR _pp$[ebp]
	mov	DWORD PTR _dest$[ebp], eax
; Line 415
	mov	ecx, DWORD PTR _dest$[ebp]
	add	ecx, 244988				; 0003bcfcH
	mov	DWORD PTR _p$[ebp], ecx
; Line 417
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1660				; 0000067cH
	mov	eax, DWORD PTR _dest$[ebp]
	add	eax, 207980				; 00032c6cH
	push	18504					; 00004848H
	push	edx
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 418
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 20164				; 00004ec4H
	mov	edx, DWORD PTR _dest$[ebp]
	add	edx, 226484				; 000374b4H
	push	18504					; 00004848H
	push	ecx
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 419
	mov	eax, DWORD PTR _dest$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+68], edx
; Line 421
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@LzmaEnc_Re
$LN5@LzmaEnc_Re:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@LzmaEnc_Re:
	cmp	DWORD PTR _i$[ebp], 12			; 0000000cH
	jge	SHORT $LN4@LzmaEnc_Re
; Line 423
	push	32					; 00000020H
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx+24]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx+206344]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 424
	push	32					; 00000020H
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx+504]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx+206824]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 425
	jmp	SHORT $LN5@LzmaEnc_Re
$LN4@LzmaEnc_Re:
; Line 426
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@LzmaEnc_Re
$LN2@LzmaEnc_Re:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@LzmaEnc_Re:
	cmp	DWORD PTR _i$[ebp], 4
	jge	SHORT $LN1@LzmaEnc_Re
; Line 427
	push	128					; 00000080H
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 7
	mov	eax, DWORD PTR _p$[ebp]
	lea	ecx, DWORD PTR [eax+edx+888]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 7
	mov	eax, DWORD PTR _dest$[ebp]
	lea	ecx, DWORD PTR [eax+edx+207208]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN2@LzmaEnc_Re
$LN1@LzmaEnc_Re:
; Line 428
	push	24					; 00000018H
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 408				; 00000198H
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	add	eax, 206728				; 00032788H
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 429
	push	24					; 00000018H
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 432				; 000001b0H
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	add	edx, 206752				; 000327a0H
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 430
	push	24					; 00000018H
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 456				; 000001c8H
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	add	ecx, 206776				; 000327b8H
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 431
	push	24					; 00000018H
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 480				; 000001e0H
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	add	eax, 206800				; 000327d0H
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 432
	push	228					; 000000e4H
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1400				; 00000578H
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	add	edx, 207720				; 00032b68H
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 433
	push	32					; 00000020H
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1628				; 0000065cH
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	add	ecx, 207948				; 00032c4cH
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 434
	push	16					; 00000010H
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 8
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	add	eax, 52					; 00000034H
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 435
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	edx, 768				; 00000300H
	mov	ecx, DWORD PTR [ecx+92]
	shl	edx, cl
	shl	edx, 1
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	mov	eax, DWORD PTR [edx+96]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 436
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_LzmaEnc_RestoreState@4 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_LzmaEnc_SetProps@8
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv135 = -88						; size = 8
_numHashBytes$80621 = -80				; size = 4
_fb$80617 = -76						; size = 4
_props$ = -68						; size = 56
_p$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pp$ = 8						; size = 4
_props2$ = 12						; size = 4
_LzmaEnc_SetProps@8 PROC
; Line 439
	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-88]
	mov	ecx, 22					; 00000016H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 440
	mov	eax, DWORD PTR _pp$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 441
	mov	esi, DWORD PTR _props2$[ebp]
	mov	ecx, 14					; 0000000eH
	lea	edi, DWORD PTR _props$[ebp]
	rep movsd
; Line 442
	lea	ecx, DWORD PTR _props$[ebp]
	push	ecx
	call	_LzmaEncProps_Normalize@4
; Line 448
	cmp	DWORD PTR _props$[ebp+16], 8
	jg	SHORT $LN7@LzmaEnc_Se
	cmp	DWORD PTR _props$[ebp+20], 4
	jg	SHORT $LN7@LzmaEnc_Se
	cmp	DWORD PTR _props$[ebp+24], 4
	jg	SHORT $LN7@LzmaEnc_Se
	mov	edx, DWORD PTR _props$[ebp+4]
	xor	eax, eax
	mov	DWORD PTR tv135[ebp], edx
	mov	DWORD PTR tv135[ebp+4], eax
	cmp	DWORD PTR tv135[ebp+4], 0
	ja	SHORT $LN7@LzmaEnc_Se
	jb	SHORT $LN11@LzmaEnc_Se
	cmp	DWORD PTR tv135[ebp], 134217728		; 08000000H
	ja	SHORT $LN7@LzmaEnc_Se
$LN11@LzmaEnc_Se:
	cmp	DWORD PTR _props$[ebp+4], 1610612736	; 60000000H
	jbe	SHORT $LN8@LzmaEnc_Se
$LN7@LzmaEnc_Se:
; Line 449
	mov	eax, 5
	jmp	$LN9@LzmaEnc_Se
$LN8@LzmaEnc_Se:
; Line 451
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _props$[ebp+4]
	mov	DWORD PTR [ecx+140], edx
; Line 453
	mov	eax, DWORD PTR _props$[ebp+32]
	mov	DWORD PTR _fb$80617[ebp], eax
; Line 454
	cmp	DWORD PTR _fb$80617[ebp], 5
	jae	SHORT $LN6@LzmaEnc_Se
; Line 455
	mov	DWORD PTR _fb$80617[ebp], 5
$LN6@LzmaEnc_Se:
; Line 456
	cmp	DWORD PTR _fb$80617[ebp], 273		; 00000111H
	jbe	SHORT $LN5@LzmaEnc_Se
; Line 457
	mov	DWORD PTR _fb$80617[ebp], 273		; 00000111H
$LN5@LzmaEnc_Se:
; Line 458
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _fb$80617[ebp]
	mov	DWORD PTR [ecx+44], edx
; Line 460
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _props$[ebp+16]
	mov	DWORD PTR [eax+72], ecx
; Line 461
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _props$[ebp+20]
	mov	DWORD PTR [edx+76], eax
; Line 462
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _props$[ebp+24]
	mov	DWORD PTR [ecx+80], edx
; Line 463
	xor	eax, eax
	cmp	DWORD PTR _props$[ebp+28], 0
	sete	al
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+100], eax
; Line 464
	xor	edx, edx
	cmp	DWORD PTR _props$[ebp+36], 0
	setne	dl
	mov	eax, DWORD PTR _p$[ebp]
	mov	BYTE PTR [eax+621], dl
; Line 466
	mov	DWORD PTR _numHashBytes$80621[ebp], 4
; Line 467
	cmp	DWORD PTR _props$[ebp+36], 0
	je	SHORT $LN4@LzmaEnc_Se
; Line 469
	cmp	DWORD PTR _props$[ebp+40], 2
	jge	SHORT $LN3@LzmaEnc_Se
; Line 470
	mov	DWORD PTR _numHashBytes$80621[ebp], 2
	jmp	SHORT $LN4@LzmaEnc_Se
$LN3@LzmaEnc_Se:
; Line 471
	cmp	DWORD PTR _props$[ebp+40], 4
	jge	SHORT $LN4@LzmaEnc_Se
; Line 472
	mov	ecx, DWORD PTR _props$[ebp+40]
	mov	DWORD PTR _numHashBytes$80621[ebp], ecx
$LN4@LzmaEnc_Se:
; Line 474
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _numHashBytes$80621[ebp]
	mov	DWORD PTR [edx+664], eax
; Line 477
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _props$[ebp+44]
	mov	DWORD PTR [ecx+640], edx
; Line 479
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _props$[ebp+48]
	mov	DWORD PTR [eax+104], ecx
; Line 489
	xor	edx, edx
	cmp	DWORD PTR _props$[ebp+52], 1
	setg	dl
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+112], edx
; Line 492
	xor	eax, eax
$LN9@LzmaEnc_Se:
; Line 493
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@LzmaEnc_Se
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 88					; 00000058H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN14@LzmaEnc_Se:
	DD	1
	DD	$LN13@LzmaEnc_Se
$LN13@LzmaEnc_Se:
	DD	-68					; ffffffbcH
	DD	56					; 00000038H
	DD	$LN12@LzmaEnc_Se
$LN12@LzmaEnc_Se:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	115					; 00000073H
	DB	0
_LzmaEnc_SetProps@8 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_LzmaEnc_Construct@4
EXTRN	_MatchFinderMt_Construct@4:PROC
EXTRN	_MatchFinder_Construct@4:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_props$81434 = -64					; size = 56
__$ArrayPad$ = -4					; size = 4
_p$ = 8							; size = 4
_LzmaEnc_Construct@4 PROC
; Line 1732
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	edi
	lea	edi, DWORD PTR [ebp-68]
	mov	ecx, 17					; 00000011H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1733
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 152				; 00000098H
	push	eax
	call	_RangeEnc_Construct@4
; Line 1734
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 592				; 00000250H
	push	ecx
	call	_MatchFinder_Construct@4
; Line 1737
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 212				; 000000d4H
	push	edx
	call	_MatchFinderMt_Construct@4
; Line 1738
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 592				; 00000250H
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+588], eax
; Line 1743
	lea	edx, DWORD PTR _props$81434[ebp]
	push	edx
	call	_LzmaEncProps_Init@4
; Line 1744
	lea	eax, DWORD PTR _props$81434[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_LzmaEnc_SetProps@8
; Line 1748
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 198452				; 00030734H
	push	edx
	call	_LzmaEnc_FastPosInit@4
; Line 1751
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 200500				; 00030f34H
	push	eax
	call	_LzmaEnc_InitPriceTables@4
; Line 1752
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+96], 0
; Line 1753
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+244988], 0
; Line 1754
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@LzmaEnc_Co
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 68					; 00000044H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN5@LzmaEnc_Co:
	DD	1
	DD	$LN4@LzmaEnc_Co
$LN4@LzmaEnc_Co:
	DD	-64					; ffffffc0H
	DD	56					; 00000038H
	DD	$LN3@LzmaEnc_Co
$LN3@LzmaEnc_Co:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	115					; 00000073H
	DB	0
_LzmaEnc_Construct@4 ENDP
; Function compile flags: /Odtp /RTCsu
_j$80457 = -12						; size = 4
_k$80455 = -8						; size = 4
_slot$ = -4						; size = 4
_g_FastPos$ = 8						; size = 4
_LzmaEnc_FastPosInit@4 PROC
; Line 130
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 132
	mov	eax, DWORD PTR _g_FastPos$[ebp]
	mov	BYTE PTR [eax], 0
; Line 133
	mov	ecx, DWORD PTR _g_FastPos$[ebp]
	mov	BYTE PTR [ecx+1], 1
; Line 134
	mov	edx, DWORD PTR _g_FastPos$[ebp]
	add	edx, 2
	mov	DWORD PTR _g_FastPos$[ebp], edx
; Line 136
	mov	DWORD PTR _slot$[ebp], 2
	jmp	SHORT $LN6@LzmaEnc_Fa
$LN5@LzmaEnc_Fa:
	mov	eax, DWORD PTR _slot$[ebp]
	add	eax, 1
	mov	DWORD PTR _slot$[ebp], eax
$LN6@LzmaEnc_Fa:
	cmp	DWORD PTR _slot$[ebp], 22		; 00000016H
	jae	SHORT $LN7@LzmaEnc_Fa
; Line 138
	mov	ecx, DWORD PTR _slot$[ebp]
	shr	ecx, 1
	sub	ecx, 1
	mov	edx, 1
	shl	edx, cl
	mov	DWORD PTR _k$80455[ebp], edx
; Line 140
	mov	DWORD PTR _j$80457[ebp], 0
	jmp	SHORT $LN3@LzmaEnc_Fa
$LN2@LzmaEnc_Fa:
	mov	eax, DWORD PTR _j$80457[ebp]
	add	eax, 1
	mov	DWORD PTR _j$80457[ebp], eax
$LN3@LzmaEnc_Fa:
	mov	ecx, DWORD PTR _j$80457[ebp]
	cmp	ecx, DWORD PTR _k$80455[ebp]
	jae	SHORT $LN1@LzmaEnc_Fa
; Line 141
	mov	edx, DWORD PTR _g_FastPos$[ebp]
	add	edx, DWORD PTR _j$80457[ebp]
	mov	al, BYTE PTR _slot$[ebp]
	mov	BYTE PTR [edx], al
	jmp	SHORT $LN2@LzmaEnc_Fa
$LN1@LzmaEnc_Fa:
; Line 142
	mov	ecx, DWORD PTR _g_FastPos$[ebp]
	add	ecx, DWORD PTR _k$80455[ebp]
	mov	DWORD PTR _g_FastPos$[ebp], ecx
; Line 143
	jmp	SHORT $LN5@LzmaEnc_Fa
$LN7@LzmaEnc_Fa:
; Line 144
	mov	esp, ebp
	pop	ebp
	ret	4
_LzmaEnc_FastPosInit@4 ENDP
; Function compile flags: /Odtp /RTCsu
_p$ = 8						; size = 4
_RangeEnc_Construct@4 PROC
; Line 507
	push	ebp
	mov	ebp, esp
; Line 508
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+36], 0
; Line 509
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+32], 0
; Line 510
	pop	ebp
	ret	4
_RangeEnc_Construct@4 ENDP
; Function compile flags: /Odtp /RTCsu
_j$80752 = -20						; size = 4
_bitCount$80751 = -16					; size = 4
_w$80750 = -12						; size = 4
_kCyclesBits$80749 = -8					; size = 4
_i$ = -4						; size = 4
_ProbPrices$ = 8					; size = 4
_LzmaEnc_InitPriceTables@4 PROC
; Line 651
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 653
	mov	DWORD PTR _i$[ebp], 8
	jmp	SHORT $LN8@LzmaEnc_In
$LN7@LzmaEnc_In:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _i$[ebp], eax
$LN8@LzmaEnc_In:
	cmp	DWORD PTR _i$[ebp], 2048		; 00000800H
	jae	SHORT $LN9@LzmaEnc_In
; Line 655
	mov	DWORD PTR _kCyclesBits$80749[ebp], 4
; Line 656
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _w$80750[ebp], ecx
; Line 657
	mov	DWORD PTR _bitCount$80751[ebp], 0
; Line 659
	mov	DWORD PTR _j$80752[ebp], 0
	jmp	SHORT $LN5@LzmaEnc_In
$LN4@LzmaEnc_In:
	mov	edx, DWORD PTR _j$80752[ebp]
	add	edx, 1
	mov	DWORD PTR _j$80752[ebp], edx
$LN5@LzmaEnc_In:
	mov	eax, DWORD PTR _j$80752[ebp]
	cmp	eax, DWORD PTR _kCyclesBits$80749[ebp]
	jge	SHORT $LN3@LzmaEnc_In
; Line 661
	mov	ecx, DWORD PTR _w$80750[ebp]
	imul	ecx, DWORD PTR _w$80750[ebp]
	mov	DWORD PTR _w$80750[ebp], ecx
; Line 662
	mov	edx, DWORD PTR _bitCount$80751[ebp]
	shl	edx, 1
	mov	DWORD PTR _bitCount$80751[ebp], edx
$LN2@LzmaEnc_In:
; Line 663
	cmp	DWORD PTR _w$80750[ebp], 65536		; 00010000H
	jb	SHORT $LN1@LzmaEnc_In
; Line 665
	mov	eax, DWORD PTR _w$80750[ebp]
	shr	eax, 1
	mov	DWORD PTR _w$80750[ebp], eax
; Line 666
	mov	ecx, DWORD PTR _bitCount$80751[ebp]
	add	ecx, 1
	mov	DWORD PTR _bitCount$80751[ebp], ecx
; Line 667
	jmp	SHORT $LN2@LzmaEnc_In
$LN1@LzmaEnc_In:
; Line 668
	jmp	SHORT $LN4@LzmaEnc_In
$LN3@LzmaEnc_In:
; Line 669
	mov	edx, 11					; 0000000bH
	mov	ecx, DWORD PTR _kCyclesBits$80749[ebp]
	shl	edx, cl
	sub	edx, 15					; 0000000fH
	sub	edx, DWORD PTR _bitCount$80751[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	shr	eax, 4
	mov	ecx, DWORD PTR _ProbPrices$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
; Line 670
	jmp	$LN7@LzmaEnc_In
$LN9@LzmaEnc_In:
; Line 671
	mov	esp, ebp
	pop	ebp
	ret	4
_LzmaEnc_InitPriceTables@4 ENDP
_TEXT	ENDS
PUBLIC	_LzmaEnc_Create@4
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = -4						; size = 4
_alloc$ = 8						; size = 4
_LzmaEnc_Create@4 PROC
; Line 1757
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1759
	mov	esi, esp
	push	283784					; 00045488H
	mov	eax, DWORD PTR _alloc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _alloc$[ebp]
	mov	edx, DWORD PTR [ecx]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _p$[ebp], eax
; Line 1760
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN1@LzmaEnc_Cr
; Line 1761
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_LzmaEnc_Construct@4
$LN1@LzmaEnc_Cr:
; Line 1762
	mov	eax, DWORD PTR _p$[ebp]
; Line 1763
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_LzmaEnc_Create@4 ENDP
_TEXT	ENDS
PUBLIC	_LzmaEnc_FreeLits@8
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = 8							; size = 4
_alloc$ = 12						; size = 4
_LzmaEnc_FreeLits@8 PROC
; Line 1766
	push	ebp
	mov	ebp, esp
	push	esi
; Line 1767
	mov	esi, esp
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	push	ecx
	mov	edx, DWORD PTR _alloc$[ebp]
	push	edx
	mov	eax, DWORD PTR _alloc$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1768
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+244988]
	push	eax
	mov	ecx, DWORD PTR _alloc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _alloc$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1769
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+96], 0
; Line 1770
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+244988], 0
; Line 1771
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_LzmaEnc_FreeLits@8 ENDP
_TEXT	ENDS
PUBLIC	_LzmaEnc_Destruct@12
EXTRN	_MatchFinder_Free@8:PROC
EXTRN	_MatchFinderMt_Destruct@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = 8							; size = 4
_alloc$ = 12						; size = 4
_allocBig$ = 16						; size = 4
_LzmaEnc_Destruct@12 PROC
; Line 1774
	push	ebp
	mov	ebp, esp
; Line 1776
	mov	eax, DWORD PTR _allocBig$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 212				; 000000d4H
	push	ecx
	call	_MatchFinderMt_Destruct@8
; Line 1779
	mov	edx, DWORD PTR _allocBig$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 592				; 00000250H
	push	eax
	call	_MatchFinder_Free@8
; Line 1780
	mov	ecx, DWORD PTR _alloc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_LzmaEnc_FreeLits@8
; Line 1781
	mov	eax, DWORD PTR _alloc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 152				; 00000098H
	push	ecx
	call	_RangeEnc_Free@8
; Line 1782
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
_LzmaEnc_Destruct@12 ENDP
; Function compile flags: /Odtp /RTCsu
_p$ = 8						; size = 4
_alloc$ = 12						; size = 4
_RangeEnc_Free@8 PROC
; Line 528
	push	ebp
	mov	ebp, esp
	push	esi
; Line 529
	mov	esi, esp
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _alloc$[ebp]
	push	edx
	mov	eax, DWORD PTR _alloc$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 530
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+32], 0
; Line 531
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_RangeEnc_Free@8 ENDP
_TEXT	ENDS
PUBLIC	_LzmaEnc_Destroy@12
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = 8							; size = 4
_alloc$ = 12						; size = 4
_allocBig$ = 16						; size = 4
_LzmaEnc_Destroy@12 PROC
; Line 1785
	push	ebp
	mov	ebp, esp
	push	esi
; Line 1786
	mov	eax, DWORD PTR _allocBig$[ebp]
	push	eax
	mov	ecx, DWORD PTR _alloc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_LzmaEnc_Destruct@12
; Line 1787
	mov	esi, esp
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _alloc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _alloc$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1788
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
_LzmaEnc_Destroy@12 ENDP
_TEXT	ENDS
PUBLIC	_LzmaEnc_Init@4
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_j$81592 = -24						; size = 4
_probs$81591 = -20					; size = 4
_probs$81584 = -16					; size = 4
_num$81582 = -12					; size = 4
_j$81578 = -8						; size = 4
_i$ = -4						; size = 4
_p$ = 8							; size = 4
_LzmaEnc_Init@4 PROC
; Line 2005
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 2007
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+68], 0
; Line 2008
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN24@LzmaEnc_In@2
$LN23@LzmaEnc_In@2:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN24@LzmaEnc_In@2:
	cmp	DWORD PTR _i$[ebp], 4
	jae	SHORT $LN22@LzmaEnc_In@2
; Line 2009
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+edx*4+52], 0
	jmp	SHORT $LN23@LzmaEnc_In@2
$LN22@LzmaEnc_In@2:
; Line 2011
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 152				; 00000098H
	push	ecx
	call	_RangeEnc_Init@4
; Line 2014
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN21@LzmaEnc_In@2
$LN20@LzmaEnc_In@2:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN21@LzmaEnc_In@2:
	cmp	DWORD PTR _i$[ebp], 12			; 0000000cH
	jae	$LN19@LzmaEnc_In@2
; Line 2017
	mov	DWORD PTR _j$81578[ebp], 0
	jmp	SHORT $LN18@LzmaEnc_In@2
$LN17@LzmaEnc_In@2:
	mov	eax, DWORD PTR _j$81578[ebp]
	add	eax, 1
	mov	DWORD PTR _j$81578[ebp], eax
$LN18@LzmaEnc_In@2:
	cmp	DWORD PTR _j$81578[ebp], 16		; 00000010H
	jae	SHORT $LN16@LzmaEnc_In@2
; Line 2019
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx+206344]
	mov	ecx, 1024				; 00000400H
	mov	edx, DWORD PTR _j$81578[ebp]
	mov	WORD PTR [eax+edx*2], cx
; Line 2020
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _p$[ebp]
	lea	edx, DWORD PTR [ecx+eax+206824]
	mov	eax, 1024				; 00000400H
	mov	ecx, DWORD PTR _j$81578[ebp]
	mov	WORD PTR [edx+ecx*2], ax
; Line 2021
	jmp	SHORT $LN17@LzmaEnc_In@2
$LN16@LzmaEnc_In@2:
; Line 2022
	mov	edx, 1024				; 00000400H
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	WORD PTR [ecx+eax*2+206728], dx
; Line 2023
	mov	edx, 1024				; 00000400H
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	WORD PTR [ecx+eax*2+206752], dx
; Line 2024
	mov	edx, 1024				; 00000400H
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	WORD PTR [ecx+eax*2+206776], dx
; Line 2025
	mov	edx, 1024				; 00000400H
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	WORD PTR [ecx+eax*2+206800], dx
; Line 2026
	jmp	$LN20@LzmaEnc_In@2
$LN19@LzmaEnc_In@2:
; Line 2029
	mov	edx, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [edx+76]
	mov	eax, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR [eax+72]
	mov	edx, 768				; 00000300H
	shl	edx, cl
	mov	DWORD PTR _num$81582[ebp], edx
; Line 2030
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	DWORD PTR _probs$81584[ebp], ecx
; Line 2031
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN15@LzmaEnc_In@2
$LN14@LzmaEnc_In@2:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN15@LzmaEnc_In@2:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _num$81582[ebp]
	jae	SHORT $LN13@LzmaEnc_In@2
; Line 2032
	mov	ecx, 1024				; 00000400H
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _probs$81584[ebp]
	mov	WORD PTR [eax+edx*2], cx
	jmp	SHORT $LN14@LzmaEnc_In@2
$LN13@LzmaEnc_In@2:
; Line 2036
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN12@LzmaEnc_In@2
$LN11@LzmaEnc_In@2:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN12@LzmaEnc_In@2:
	cmp	DWORD PTR _i$[ebp], 4
	jae	SHORT $LN10@LzmaEnc_In@2
; Line 2038
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 7
	mov	eax, DWORD PTR _p$[ebp]
	lea	ecx, DWORD PTR [eax+edx+207208]
	mov	DWORD PTR _probs$81591[ebp], ecx
; Line 2040
	mov	DWORD PTR _j$81592[ebp], 0
	jmp	SHORT $LN9@LzmaEnc_In@2
$LN8@LzmaEnc_In@2:
	mov	edx, DWORD PTR _j$81592[ebp]
	add	edx, 1
	mov	DWORD PTR _j$81592[ebp], edx
$LN9@LzmaEnc_In@2:
	cmp	DWORD PTR _j$81592[ebp], 64		; 00000040H
	jae	SHORT $LN7@LzmaEnc_In@2
; Line 2041
	mov	eax, 1024				; 00000400H
	mov	ecx, DWORD PTR _j$81592[ebp]
	mov	edx, DWORD PTR _probs$81591[ebp]
	mov	WORD PTR [edx+ecx*2], ax
	jmp	SHORT $LN8@LzmaEnc_In@2
$LN7@LzmaEnc_In@2:
; Line 2042
	jmp	SHORT $LN11@LzmaEnc_In@2
$LN10@LzmaEnc_In@2:
; Line 2045
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@LzmaEnc_In@2
$LN5@LzmaEnc_In@2:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@LzmaEnc_In@2:
	cmp	DWORD PTR _i$[ebp], 114			; 00000072H
	jae	SHORT $LN4@LzmaEnc_In@2
; Line 2046
	mov	ecx, 1024				; 00000400H
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	WORD PTR [eax+edx*2+207720], cx
	jmp	SHORT $LN5@LzmaEnc_In@2
$LN4@LzmaEnc_In@2:
; Line 2049
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 207980				; 00032c6cH
	push	ecx
	call	_LenEnc_Init@4
; Line 2050
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 226484				; 000374b4H
	push	edx
	call	_LenEnc_Init@4
; Line 2052
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@LzmaEnc_In@2
$LN2@LzmaEnc_In@2:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@LzmaEnc_In@2:
	cmp	DWORD PTR _i$[ebp], 16			; 00000010H
	jae	SHORT $LN1@LzmaEnc_In@2
; Line 2053
	mov	ecx, 1024				; 00000400H
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	WORD PTR [eax+edx*2+207948], cx
	jmp	SHORT $LN2@LzmaEnc_In@2
$LN1@LzmaEnc_In@2:
; Line 2055
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+24], 0
; Line 2056
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+28], 0
; Line 2057
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+48], 0
; Line 2059
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, 1
	mov	ecx, DWORD PTR [ecx+80]
	shl	edx, cl
	sub	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+88], edx
; Line 2060
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, 1
	mov	ecx, DWORD PTR [ecx+76]
	shl	edx, cl
	sub	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+84], edx
; Line 2061
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_LzmaEnc_Init@4 ENDP
; Function compile flags: /Odtp /RTCsu
_p$ = 8						; size = 4
_RangeEnc_Init@4 PROC
; Line 534
	push	ebp
	mov	ebp, esp
; Line 536
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	DWORD PTR [eax+12], 0
; Line 537
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx], -1
; Line 538
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+16], 1
	mov	DWORD PTR [edx+20], 0
; Line 539
	mov	eax, DWORD PTR _p$[ebp]
	mov	BYTE PTR [eax+4], 0
; Line 541
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR [ecx+24], eax
; Line 543
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
; Line 544
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+48], 0
; Line 545
	pop	ebp
	ret	4
_RangeEnc_Init@4 ENDP
; Function compile flags: /Odtp /RTCsu
_i$ = -4						; size = 4
_p$ = 8							; size = 4
_LenEnc_Init@4 PROC
; Line 772
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 774
	mov	eax, 1024				; 00000400H
	mov	ecx, DWORD PTR _p$[ebp]
	mov	WORD PTR [ecx+2], ax
	mov	edx, 1024				; 00000400H
	mov	eax, DWORD PTR _p$[ebp]
	mov	WORD PTR [eax], dx
; Line 775
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN9@LenEnc_Ini
$LN8@LenEnc_Ini:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN9@LenEnc_Ini:
	cmp	DWORD PTR _i$[ebp], 128			; 00000080H
	jae	SHORT $LN7@LenEnc_Ini
; Line 776
	mov	edx, 1024				; 00000400H
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	WORD PTR [ecx+eax*2+4], dx
	jmp	SHORT $LN8@LenEnc_Ini
$LN7@LenEnc_Ini:
; Line 777
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@LenEnc_Ini
$LN5@LenEnc_Ini:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN6@LenEnc_Ini:
	cmp	DWORD PTR _i$[ebp], 128			; 00000080H
	jae	SHORT $LN4@LenEnc_Ini
; Line 778
	mov	eax, 1024				; 00000400H
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	WORD PTR [edx+ecx*2+260], ax
	jmp	SHORT $LN5@LenEnc_Ini
$LN4@LenEnc_Ini:
; Line 779
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@LenEnc_Ini
$LN2@LenEnc_Ini:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@LenEnc_Ini:
	cmp	DWORD PTR _i$[ebp], 256			; 00000100H
	jae	SHORT $LN10@LenEnc_Ini
; Line 780
	mov	ecx, 1024				; 00000400H
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	WORD PTR [eax+edx*2+516], cx
	jmp	SHORT $LN2@LenEnc_Ini
$LN10@LenEnc_Ini:
; Line 781
	mov	esp, ebp
	pop	ebp
	ret	4
_LenEnc_Init@4 ENDP
_TEXT	ENDS
PUBLIC	_LzmaEnc_InitPrices@4
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv72 = -4						; size = 4
_p$ = 8							; size = 4
_LzmaEnc_InitPrices@4 PROC
; Line 2064
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2065
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+100], 0
	jne	SHORT $LN1@LzmaEnc_In@3
; Line 2067
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_FillDistancesPrices@4
; Line 2068
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_FillAlignPrices@4
$LN1@LzmaEnc_In@3:
; Line 2073
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	add	ecx, -1
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR tv72[ebp]
	mov	DWORD PTR [edx+227512], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR tv72[ebp]
	mov	DWORD PTR [ecx+209008], edx
; Line 2074
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 200500				; 00030f34H
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, 1
	mov	ecx, DWORD PTR [ecx+80]
	shl	edx, cl
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 207980				; 00032c6cH
	push	eax
	call	_LenPriceEnc_UpdateTables@12
; Line 2075
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 200500				; 00030f34H
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, 1
	mov	ecx, DWORD PTR [edx+80]
	shl	eax, cl
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 226484				; 000374b4H
	push	ecx
	call	_LenPriceEnc_UpdateTables@12
; Line 2076
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_LzmaEnc_InitPrices@4 ENDP
; Function compile flags: /Odtp /RTCsu
_posState$ = -4					; size = 4
_p$ = 8							; size = 4
_numPosStates$ = 12					; size = 4
_ProbPrices$ = 16					; size = 4
_LenPriceEnc_UpdateTables@12 PROC
; Line 836
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 838
	mov	DWORD PTR _posState$[ebp], 0
	jmp	SHORT $LN3@LenPriceEn
$LN2@LenPriceEn:
	mov	eax, DWORD PTR _posState$[ebp]
	add	eax, 1
	mov	DWORD PTR _posState$[ebp], eax
$LN3@LenPriceEn:
	mov	ecx, DWORD PTR _posState$[ebp]
	cmp	ecx, DWORD PTR _numPosStates$[ebp]
	jae	SHORT $LN4@LenPriceEn
; Line 839
	mov	edx, DWORD PTR _ProbPrices$[ebp]
	push	edx
	mov	edx, DWORD PTR _posState$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	call	@LenPriceEnc_UpdateTable@12
	jmp	SHORT $LN2@LenPriceEn
$LN4@LenPriceEn:
; Line 840
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_LenPriceEnc_UpdateTables@12 ENDP
; Function compile flags: /Odtp /RTCsu
_posState$ = -8					; size = 4
_p$ = -4						; size = 4
_ProbPrices$ = 8					; size = 4
@LenPriceEnc_UpdateTable@12 PROC
; _p$ = ecx
; _posState$ = edx
; Line 830
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _posState$[ebp], edx
	mov	DWORD PTR _p$[ebp], ecx
; Line 831
	mov	eax, DWORD PTR _ProbPrices$[ebp]
	push	eax
	mov	ecx, DWORD PTR _posState$[ebp]
	imul	ecx, 1088				; 00000440H
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx+1032]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+1028]
	push	edx
	mov	eax, DWORD PTR _posState$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_LenEnc_SetPrices@20
; Line 832
	mov	edx, DWORD PTR _posState$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [ecx+1028]
	mov	DWORD PTR [eax+edx*4+18440], ecx
; Line 833
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
@LenPriceEnc_UpdateTable@12 ENDP
; Function compile flags: /Odtp /RTCsu
_i$ = -20						; size = 4
_b1$ = -16						; size = 4
_b0$ = -12						; size = 4
_a1$ = -8						; size = 4
_a0$ = -4						; size = 4
_p$ = 8							; size = 4
_posState$ = 12						; size = 4
_numSymbols$ = 16					; size = 4
_prices$ = 20						; size = 4
_ProbPrices$ = 24					; size = 4
_LenEnc_SetPrices@20 PROC
; Line 807
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 808
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, WORD PTR [eax]
	sar	ecx, 4
	mov	edx, DWORD PTR _ProbPrices$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _a0$[ebp], eax
; Line 809
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, WORD PTR [ecx]
	xor	edx, 2047				; 000007ffH
	sar	edx, 4
	mov	eax, DWORD PTR _ProbPrices$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _a1$[ebp], ecx
; Line 810
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, WORD PTR [edx+2]
	sar	eax, 4
	mov	ecx, DWORD PTR _ProbPrices$[ebp]
	mov	edx, DWORD PTR _a1$[ebp]
	add	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _b0$[ebp], edx
; Line 811
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	xor	ecx, 2047				; 000007ffH
	sar	ecx, 4
	mov	edx, DWORD PTR _ProbPrices$[ebp]
	mov	eax, DWORD PTR _a1$[ebp]
	add	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _b1$[ebp], eax
; Line 812
	mov	DWORD PTR _i$[ebp], 0
; Line 813
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN11@LenEnc_Set
$LN10@LenEnc_Set:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN11@LenEnc_Set:
	cmp	DWORD PTR _i$[ebp], 8
	jae	SHORT $LN9@LenEnc_Set
; Line 815
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _numSymbols$[ebp]
	jb	SHORT $LN8@LenEnc_Set
; Line 816
	jmp	$LN12@LenEnc_Set
$LN8@LenEnc_Set:
; Line 817
	mov	eax, DWORD PTR _ProbPrices$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	push	3
	mov	edx, DWORD PTR _posState$[ebp]
	shl	edx, 3
	mov	eax, DWORD PTR _p$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2+4]
	push	ecx
	call	_RcTree_GetPrice@16
	add	eax, DWORD PTR _a0$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _prices$[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
; Line 818
	jmp	SHORT $LN10@LenEnc_Set
$LN9@LenEnc_Set:
; Line 819
	jmp	SHORT $LN7@LenEnc_Set
$LN6@LenEnc_Set:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN7@LenEnc_Set:
	cmp	DWORD PTR _i$[ebp], 16			; 00000010H
	jae	SHORT $LN5@LenEnc_Set
; Line 821
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _numSymbols$[ebp]
	jb	SHORT $LN4@LenEnc_Set
; Line 822
	jmp	SHORT $LN12@LenEnc_Set
$LN4@LenEnc_Set:
; Line 823
	mov	ecx, DWORD PTR _ProbPrices$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 8
	push	edx
	push	3
	mov	eax, DWORD PTR _posState$[ebp]
	shl	eax, 3
	mov	ecx, DWORD PTR _p$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2+260]
	push	edx
	call	_RcTree_GetPrice@16
	add	eax, DWORD PTR _b0$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _prices$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
; Line 824
	jmp	SHORT $LN6@LenEnc_Set
$LN5@LenEnc_Set:
; Line 825
	jmp	SHORT $LN3@LenEnc_Set
$LN2@LenEnc_Set:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@LenEnc_Set:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _numSymbols$[ebp]
	jae	SHORT $LN12@LenEnc_Set
; Line 826
	mov	edx, DWORD PTR _ProbPrices$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 16					; 00000010H
	push	eax
	push	8
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 516				; 00000204H
	push	ecx
	call	_RcTree_GetPrice@16
	add	eax, DWORD PTR _b1$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _prices$[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
	jmp	SHORT $LN2@LenEnc_Set
$LN12@LenEnc_Set:
; Line 827
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_LenEnc_SetPrices@20 ENDP
; Function compile flags: /Odtp /RTCsu
_price$ = -4						; size = 4
_probs$ = 8						; size = 4
_numBitLevels$ = 12					; size = 4
_symbol$ = 16						; size = 4
_ProbPrices$ = 20					; size = 4
_RcTree_GetPrice@16 PROC
; Line 744
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 745
	mov	DWORD PTR _price$[ebp], 0
; Line 746
	mov	eax, 1
	mov	ecx, DWORD PTR _numBitLevels$[ebp]
	shl	eax, cl
	or	eax, DWORD PTR _symbol$[ebp]
	mov	DWORD PTR _symbol$[ebp], eax
$LN2@RcTree_Get:
; Line 747
	cmp	DWORD PTR _symbol$[ebp], 1
	je	SHORT $LN1@RcTree_Get
; Line 749
	mov	ecx, DWORD PTR _symbol$[ebp]
	shr	ecx, 1
	mov	edx, DWORD PTR _probs$[ebp]
	movzx	eax, WORD PTR [edx+ecx*2]
	mov	ecx, DWORD PTR _symbol$[ebp]
	and	ecx, 1
	neg	ecx
	and	ecx, 2047				; 000007ffH
	xor	eax, ecx
	sar	eax, 4
	mov	edx, DWORD PTR _ProbPrices$[ebp]
	mov	ecx, DWORD PTR _price$[ebp]
	add	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _price$[ebp], ecx
; Line 750
	mov	edx, DWORD PTR _symbol$[ebp]
	shr	edx, 1
	mov	DWORD PTR _symbol$[ebp], edx
; Line 751
	jmp	SHORT $LN2@RcTree_Get
$LN1@RcTree_Get:
; Line 752
	mov	eax, DWORD PTR _price$[ebp]
; Line 753
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_RcTree_GetPrice@16 ENDP
; Function compile flags: /Odtp /RTCsu
_i$ = -4						; size = 4
_p$ = 8							; size = 4
_FillAlignPrices@4 PROC
; Line 1690
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1692
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@FillAlignP
$LN2@FillAlignP:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@FillAlignP:
	cmp	DWORD PTR _i$[ebp], 16			; 00000010H
	jae	SHORT $LN1@FillAlignP
; Line 1693
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 200500				; 00030f34H
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	4
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 207948				; 00032c4cH
	push	eax
	call	_RcTree_ReverseGetPrice@16
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+ecx*4+206280], eax
	jmp	SHORT $LN2@FillAlignP
$LN1@FillAlignP:
; Line 1694
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+132], 0
; Line 1695
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_FillAlignPrices@4 ENDP
; Function compile flags: /Odtp /RTCsu
_bit$80852 = -16					; size = 4
_i$ = -12						; size = 4
_m$ = -8						; size = 4
_price$ = -4						; size = 4
_probs$ = 8						; size = 4
_numBitLevels$ = 12					; size = 4
_symbol$ = 16						; size = 4
_ProbPrices$ = 20					; size = 4
_RcTree_ReverseGetPrice@16 PROC
; Line 756
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 757
	mov	DWORD PTR _price$[ebp], 0
; Line 758
	mov	DWORD PTR _m$[ebp], 1
; Line 760
	mov	eax, DWORD PTR _numBitLevels$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@RcTree_Rev
$LN2@RcTree_Rev:
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@RcTree_Rev:
	cmp	DWORD PTR _i$[ebp], 0
	je	SHORT $LN1@RcTree_Rev
; Line 762
	mov	edx, DWORD PTR _symbol$[ebp]
	and	edx, 1
	mov	DWORD PTR _bit$80852[ebp], edx
; Line 763
	mov	eax, DWORD PTR _symbol$[ebp]
	shr	eax, 1
	mov	DWORD PTR _symbol$[ebp], eax
; Line 764
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR _probs$[ebp]
	movzx	eax, WORD PTR [edx+ecx*2]
	mov	ecx, DWORD PTR _bit$80852[ebp]
	neg	ecx
	and	ecx, 2047				; 000007ffH
	xor	eax, ecx
	sar	eax, 4
	mov	edx, DWORD PTR _ProbPrices$[ebp]
	mov	ecx, DWORD PTR _price$[ebp]
	add	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _price$[ebp], ecx
; Line 765
	mov	edx, DWORD PTR _m$[ebp]
	shl	edx, 1
	or	edx, DWORD PTR _bit$80852[ebp]
	mov	DWORD PTR _m$[ebp], edx
; Line 766
	jmp	SHORT $LN2@RcTree_Rev
$LN1@RcTree_Rev:
; Line 767
	mov	eax, DWORD PTR _price$[ebp]
; Line 768
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_RcTree_ReverseGetPrice@16 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$81423 = -564						; size = 4
_distancesPrices$81422 = -560				; size = 4
_posSlotPrices$81415 = -556				; size = 4
_encoder$81414 = -552					; size = 4
_posSlot$81413 = -548					; size = 4
_base$81409 = -544					; size = 4
_footerBits$81408 = -540				; size = 4
_posSlot$81407 = -536					; size = 4
_lenToPosState$ = -532					; size = 4
_i$ = -528						; size = 4
_tempPrices$ = -520					; size = 512
__$ArrayPad$ = -4					; size = 4
_p$ = 8							; size = 4
_FillDistancesPrices@4 PROC
; Line 1698
	push	ebp
	mov	ebp, esp
	sub	esp, 564				; 00000234H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-564]
	mov	ecx, 141				; 0000008dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1701
	mov	DWORD PTR _i$[ebp], 4
	jmp	SHORT $LN18@FillDistan
$LN17@FillDistan:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN18@FillDistan:
	cmp	DWORD PTR _i$[ebp], 128			; 00000080H
	jae	$LN16@FillDistan
; Line 1703
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx+198452]
	mov	DWORD PTR _posSlot$81407[ebp], edx
; Line 1704
	mov	eax, DWORD PTR _posSlot$81407[ebp]
	shr	eax, 1
	sub	eax, 1
	mov	DWORD PTR _footerBits$81408[ebp], eax
; Line 1705
	mov	edx, DWORD PTR _posSlot$81407[ebp]
	and	edx, 1
	or	edx, 2
	mov	ecx, DWORD PTR _footerBits$81408[ebp]
	shl	edx, cl
	mov	DWORD PTR _base$81409[ebp], edx
; Line 1706
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 200500				; 00030f34H
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, DWORD PTR _base$81409[ebp]
	push	ecx
	mov	edx, DWORD PTR _footerBits$81408[ebp]
	push	edx
	mov	eax, DWORD PTR _base$81409[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2+207720]
	mov	eax, DWORD PTR _posSlot$81407[ebp]
	shl	eax, 1
	sub	edx, eax
	sub	edx, 2
	push	edx
	call	_RcTree_ReverseGetPrice@16
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _tempPrices$[ebp+ecx*4], eax
; Line 1707
	jmp	$LN17@FillDistan
$LN16@FillDistan:
; Line 1709
	mov	DWORD PTR _lenToPosState$[ebp], 0
	jmp	SHORT $LN15@FillDistan
$LN14@FillDistan:
	mov	edx, DWORD PTR _lenToPosState$[ebp]
	add	edx, 1
	mov	DWORD PTR _lenToPosState$[ebp], edx
$LN15@FillDistan:
	cmp	DWORD PTR _lenToPosState$[ebp], 4
	jae	$LN13@FillDistan
; Line 1712
	mov	eax, DWORD PTR _lenToPosState$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR _p$[ebp]
	lea	edx, DWORD PTR [ecx+eax+207208]
	mov	DWORD PTR _encoder$81414[ebp], edx
; Line 1713
	mov	eax, DWORD PTR _lenToPosState$[ebp]
	shl	eax, 8
	mov	ecx, DWORD PTR _p$[ebp]
	lea	edx, DWORD PTR [ecx+eax+203208]
	mov	DWORD PTR _posSlotPrices$81415[ebp], edx
; Line 1714
	mov	DWORD PTR _posSlot$81413[ebp], 0
	jmp	SHORT $LN12@FillDistan
$LN11@FillDistan:
	mov	eax, DWORD PTR _posSlot$81413[ebp]
	add	eax, 1
	mov	DWORD PTR _posSlot$81413[ebp], eax
$LN12@FillDistan:
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _posSlot$81413[ebp]
	cmp	edx, DWORD PTR [ecx+136]
	jae	SHORT $LN10@FillDistan
; Line 1715
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 200500				; 00030f34H
	push	eax
	mov	ecx, DWORD PTR _posSlot$81413[ebp]
	push	ecx
	push	6
	mov	edx, DWORD PTR _encoder$81414[ebp]
	push	edx
	call	_RcTree_GetPrice@16
	mov	ecx, DWORD PTR _posSlot$81413[ebp]
	mov	edx, DWORD PTR _posSlotPrices$81415[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
	jmp	SHORT $LN11@FillDistan
$LN10@FillDistan:
; Line 1716
	mov	DWORD PTR _posSlot$81413[ebp], 14	; 0000000eH
	jmp	SHORT $LN9@FillDistan
$LN8@FillDistan:
	mov	eax, DWORD PTR _posSlot$81413[ebp]
	add	eax, 1
	mov	DWORD PTR _posSlot$81413[ebp], eax
$LN9@FillDistan:
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _posSlot$81413[ebp]
	cmp	edx, DWORD PTR [ecx+136]
	jae	SHORT $LN7@FillDistan
; Line 1717
	mov	eax, DWORD PTR _posSlot$81413[ebp]
	shr	eax, 1
	sub	eax, 5
	shl	eax, 4
	mov	ecx, DWORD PTR _posSlot$81413[ebp]
	mov	edx, DWORD PTR _posSlotPrices$81415[ebp]
	add	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _posSlot$81413[ebp]
	mov	edx, DWORD PTR _posSlotPrices$81415[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
	jmp	SHORT $LN8@FillDistan
$LN7@FillDistan:
; Line 1720
	mov	eax, DWORD PTR _lenToPosState$[ebp]
	shl	eax, 9
	mov	ecx, DWORD PTR _p$[ebp]
	lea	edx, DWORD PTR [ecx+eax+204232]
	mov	DWORD PTR _distancesPrices$81422[ebp], edx
; Line 1722
	mov	DWORD PTR _i$81423[ebp], 0
	jmp	SHORT $LN6@FillDistan
$LN5@FillDistan:
	mov	eax, DWORD PTR _i$81423[ebp]
	add	eax, 1
	mov	DWORD PTR _i$81423[ebp], eax
$LN6@FillDistan:
	cmp	DWORD PTR _i$81423[ebp], 4
	jae	SHORT $LN4@FillDistan
; Line 1723
	mov	ecx, DWORD PTR _i$81423[ebp]
	mov	edx, DWORD PTR _distancesPrices$81422[ebp]
	mov	eax, DWORD PTR _i$81423[ebp]
	mov	esi, DWORD PTR _posSlotPrices$81415[ebp]
	mov	eax, DWORD PTR [esi+eax*4]
	mov	DWORD PTR [edx+ecx*4], eax
	jmp	SHORT $LN5@FillDistan
$LN4@FillDistan:
; Line 1724
	jmp	SHORT $LN3@FillDistan
$LN2@FillDistan:
	mov	ecx, DWORD PTR _i$81423[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$81423[ebp], ecx
$LN3@FillDistan:
	cmp	DWORD PTR _i$81423[ebp], 128		; 00000080H
	jae	SHORT $LN1@FillDistan
; Line 1725
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, DWORD PTR _i$81423[ebp]
	movzx	eax, BYTE PTR [edx+198452]
	mov	ecx, DWORD PTR _posSlotPrices$81415[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _i$81423[ebp]
	add	edx, DWORD PTR _tempPrices$[ebp+eax*4]
	mov	ecx, DWORD PTR _i$81423[ebp]
	mov	eax, DWORD PTR _distancesPrices$81422[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
	jmp	SHORT $LN2@FillDistan
$LN1@FillDistan:
; Line 1727
	jmp	$LN14@FillDistan
$LN13@FillDistan:
; Line 1728
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+128], 0
; Line 1729
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN23@FillDistan
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 564				; 00000234H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN23@FillDistan:
	DD	1
	DD	$LN22@FillDistan
$LN22@FillDistan:
	DD	-520					; fffffdf8H
	DD	512					; 00000200H
	DD	$LN21@FillDistan
$LN21@FillDistan:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
_FillDistancesPrices@4 ENDP
_TEXT	ENDS
PUBLIC	_LzmaEnc_PrepareForLzma2@20
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = -4						; size = 4
_pp$ = 8						; size = 4
_inStream$ = 12						; size = 4
_keepWindowSize$ = 16					; size = 4
_alloc$ = 20						; size = 4
_allocBig$ = 24						; size = 4
_LzmaEnc_PrepareForLzma2@20 PROC
; Line 2108
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2109
	mov	eax, DWORD PTR _pp$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 2110
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _inStream$[ebp]
	mov	DWORD PTR [ecx+648], edx
; Line 2111
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+116], 1
; Line 2112
	mov	ecx, DWORD PTR _allocBig$[ebp]
	push	ecx
	mov	edx, DWORD PTR _alloc$[ebp]
	push	edx
	mov	eax, DWORD PTR _keepWindowSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_LzmaEnc_AllocAndInit@16
; Line 2113
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_LzmaEnc_PrepareForLzma2@20 ENDP
; Function compile flags: /Odtp /RTCsu
___result__$81625 = -8					; size = 4
_i$ = -4						; size = 4
_p$ = 8							; size = 4
_keepWindowSize$ = 12					; size = 4
_alloc$ = 16						; size = 4
_allocBig$ = 20						; size = 4
_LzmaEnc_AllocAndInit@16 PROC
; Line 2079
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2081
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@LzmaEnc_Al
$LN4@LzmaEnc_Al:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN5@LzmaEnc_Al:
	cmp	DWORD PTR _i$[ebp], 27			; 0000001bH
	jae	SHORT $LN3@LzmaEnc_Al
; Line 2082
	mov	edx, 1
	mov	ecx, DWORD PTR _i$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+140], edx
	ja	SHORT $LN2@LzmaEnc_Al
; Line 2083
	jmp	SHORT $LN3@LzmaEnc_Al
$LN2@LzmaEnc_Al:
; Line 2084
	jmp	SHORT $LN4@LzmaEnc_Al
$LN3@LzmaEnc_Al:
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+136], ecx
; Line 2086
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+108], 0
; Line 2087
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+144], 0
; Line 2088
	mov	edx, DWORD PTR _allocBig$[ebp]
	push	edx
	mov	eax, DWORD PTR _alloc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _keepWindowSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_LzmaEnc_Alloc@16
	mov	DWORD PTR ___result__$81625[ebp], eax
	cmp	DWORD PTR ___result__$81625[ebp], 0
	je	SHORT $LN1@LzmaEnc_Al
	mov	eax, DWORD PTR ___result__$81625[ebp]
	jmp	SHORT $LN6@LzmaEnc_Al
$LN1@LzmaEnc_Al:
; Line 2089
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_LzmaEnc_Init@4
; Line 2090
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_LzmaEnc_InitPrices@4
; Line 2091
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+120], 0
	mov	DWORD PTR [edx+124], 0
; Line 2092
	xor	eax, eax
$LN6@LzmaEnc_Al:
; Line 2093
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_LzmaEnc_AllocAndInit@16 ENDP
_TEXT	ENDS
EXTRN	_MatchFinder_CreateVTable@8:PROC
EXTRN	_MatchFinder_Create@24:PROC
EXTRN	_MatchFinderMt_CreateVTable@8:PROC
EXTRN	_MatchFinderMt_Create@24:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv77 = -16						; size = 4
___result__$81563 = -12					; size = 4
_lclp$81548 = -8					; size = 4
_beforeSize$ = -4					; size = 4
_p$ = 8							; size = 4
_keepWindowSize$ = 12					; size = 4
_alloc$ = 16						; size = 4
_allocBig$ = 20						; size = 4
_LzmaEnc_Alloc@16 PROC
; Line 1955
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1956
	mov	DWORD PTR _beforeSize$[ebp], 4096	; 00001000H
; Line 1957
	mov	eax, DWORD PTR _alloc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 152				; 00000098H
	push	ecx
	call	_RangeEnc_Alloc@8
	test	eax, eax
	jne	SHORT $LN10@LzmaEnc_Al@2
; Line 1958
	mov	eax, 2
	jmp	$LN11@LzmaEnc_Al@2
$LN10@LzmaEnc_Al@2:
; Line 1961
	mov	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [edx+112], 0
	je	SHORT $LN13@LzmaEnc_Al@2
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+100], 0
	jne	SHORT $LN13@LzmaEnc_Al@2
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+621]
	test	edx, edx
	je	SHORT $LN13@LzmaEnc_Al@2
	mov	DWORD PTR tv77[ebp], 1
	jmp	SHORT $LN14@LzmaEnc_Al@2
$LN13@LzmaEnc_Al@2:
	mov	DWORD PTR tv77[ebp], 0
$LN14@LzmaEnc_Al@2:
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR tv77[ebp]
	mov	DWORD PTR [eax+208], ecx
; Line 1965
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+72]
	mov	ecx, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR _lclp$81548[ebp], eax
; Line 1966
	mov	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [edx+96], 0
	je	SHORT $LN8@LzmaEnc_Al@2
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+244988], 0
	je	SHORT $LN8@LzmaEnc_Al@2
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+92]
	cmp	edx, DWORD PTR _lclp$81548[ebp]
	je	$LN9@LzmaEnc_Al@2
$LN8@LzmaEnc_Al@2:
; Line 1968
	mov	eax, DWORD PTR _alloc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_LzmaEnc_FreeLits@8
; Line 1969
	mov	edx, 768				; 00000300H
	mov	ecx, DWORD PTR _lclp$81548[ebp]
	shl	edx, cl
	shl	edx, 1
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _alloc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _alloc$[ebp]
	mov	edx, DWORD PTR [ecx]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+96], eax
; Line 1970
	mov	edx, 768				; 00000300H
	mov	ecx, DWORD PTR _lclp$81548[ebp]
	shl	edx, cl
	shl	edx, 1
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _alloc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _alloc$[ebp]
	mov	edx, DWORD PTR [ecx]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+244988], eax
; Line 1971
	mov	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [edx+96], 0
	je	SHORT $LN6@LzmaEnc_Al@2
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+244988], 0
	jne	SHORT $LN7@LzmaEnc_Al@2
$LN6@LzmaEnc_Al@2:
; Line 1973
	mov	ecx, DWORD PTR _alloc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_LzmaEnc_FreeLits@8
; Line 1974
	mov	eax, 2
	jmp	$LN11@LzmaEnc_Al@2
$LN7@LzmaEnc_Al@2:
; Line 1976
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _lclp$81548[ebp]
	mov	DWORD PTR [eax+92], ecx
$LN9@LzmaEnc_Al@2:
; Line 1980
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, 16777216				; 01000000H
	cmp	eax, DWORD PTR [edx+140]
	sbb	ecx, ecx
	neg	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [edx+622], cl
; Line 1982
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _beforeSize$[ebp]
	add	ecx, DWORD PTR [eax+140]
	cmp	ecx, DWORD PTR _keepWindowSize$[ebp]
	jae	SHORT $LN5@LzmaEnc_Al@2
; Line 1983
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _keepWindowSize$[ebp]
	sub	eax, DWORD PTR [edx+140]
	mov	DWORD PTR _beforeSize$[ebp], eax
$LN5@LzmaEnc_Al@2:
; Line 1986
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [ecx+208], 0
	je	SHORT $LN4@LzmaEnc_Al@2
; Line 1988
	mov	edx, DWORD PTR _allocBig$[ebp]
	push	edx
	push	273					; 00000111H
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	mov	edx, DWORD PTR _beforeSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 212				; 000000d4H
	push	edx
	call	_MatchFinderMt_Create@24
	mov	DWORD PTR ___result__$81563[ebp], eax
	cmp	DWORD PTR ___result__$81563[ebp], 0
	je	SHORT $LN3@LzmaEnc_Al@2
	mov	eax, DWORD PTR ___result__$81563[ebp]
	jmp	$LN11@LzmaEnc_Al@2
$LN3@LzmaEnc_Al@2:
; Line 1989
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 212				; 000000d4H
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 1990
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 4
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 212				; 000000d4H
	push	eax
	call	_MatchFinderMt_CreateVTable@8
; Line 1992
	jmp	SHORT $LN2@LzmaEnc_Al@2
$LN4@LzmaEnc_Al@2:
; Line 1995
	mov	ecx, DWORD PTR _allocBig$[ebp]
	push	ecx
	push	273					; 00000111H
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	mov	ecx, DWORD PTR _beforeSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+140]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 592				; 00000250H
	push	ecx
	call	_MatchFinder_Create@24
	test	eax, eax
	jne	SHORT $LN1@LzmaEnc_Al@2
; Line 1996
	mov	eax, 2
	jmp	SHORT $LN11@LzmaEnc_Al@2
$LN1@LzmaEnc_Al@2:
; Line 1997
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 592				; 00000250H
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], edx
; Line 1998
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 592				; 00000250H
	push	edx
	call	_MatchFinder_CreateVTable@8
$LN2@LzmaEnc_Al@2:
; Line 2001
	xor	eax, eax
$LN11@LzmaEnc_Al@2:
; Line 2002
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_LzmaEnc_Alloc@16 ENDP
; Function compile flags: /Odtp /RTCsu
_p$ = 8						; size = 4
_alloc$ = 12						; size = 4
_RangeEnc_Alloc@8 PROC
; Line 516
	push	ebp
	mov	ebp, esp
	push	esi
; Line 517
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+32], 0
	jne	SHORT $LN2@RangeEnc_A
; Line 519
	mov	esi, esp
	push	65536					; 00010000H
	mov	ecx, DWORD PTR _alloc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _alloc$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+32], eax
; Line 520
	mov	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [edx+32], 0
	jne	SHORT $LN1@RangeEnc_A
; Line 521
	xor	eax, eax
	jmp	SHORT $LN3@RangeEnc_A
$LN1@RangeEnc_A:
; Line 522
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	add	ecx, 65536				; 00010000H
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+28], ecx
$LN2@RangeEnc_A:
; Line 524
	mov	eax, 1
$LN3@RangeEnc_A:
; Line 525
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_RangeEnc_Alloc@8 ENDP
_TEXT	ENDS
PUBLIC	_LzmaEnc_MemPrepare@24
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = -4						; size = 4
_pp$ = 8						; size = 4
_src$ = 12						; size = 4
_srcLen$ = 16						; size = 4
_keepWindowSize$ = 20					; size = 4
_alloc$ = 24						; size = 4
_allocBig$ = 28						; size = 4
_LzmaEnc_MemPrepare@24 PROC
; Line 2124
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2125
	mov	eax, DWORD PTR _pp$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 2126
	mov	ecx, DWORD PTR _srcLen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _src$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_LzmaEnc_SetInputBuf@12
; Line 2127
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+116], 1
; Line 2129
	mov	edx, DWORD PTR _allocBig$[ebp]
	push	edx
	mov	eax, DWORD PTR _alloc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _keepWindowSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_LzmaEnc_AllocAndInit@16
; Line 2130
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
_LzmaEnc_MemPrepare@24 ENDP
; Function compile flags: /Odtp /RTCsu
_p$ = 8						; size = 4
_src$ = 12						; size = 4
_srcLen$ = 16						; size = 4
_LzmaEnc_SetInputBuf@12 PROC
; Line 2116
	push	ebp
	mov	ebp, esp
; Line 2117
	mov	eax, DWORD PTR _p$[ebp]
	mov	BYTE PTR [eax+623], 1
; Line 2118
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _src$[ebp]
	mov	DWORD PTR [ecx+644], edx
; Line 2119
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _srcLen$[ebp]
	mov	DWORD PTR [eax+668], ecx
; Line 2120
	pop	ebp
	ret	12					; 0000000cH
_LzmaEnc_SetInputBuf@12 ENDP
_TEXT	ENDS
PUBLIC	_LzmaEnc_Finish@4
EXTRN	_MatchFinderMt_ReleaseStream@4:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = -4						; size = 4
_pp$ = 8						; size = 4
_LzmaEnc_Finish@4 PROC
; Line 2133
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2135
	mov	eax, DWORD PTR _pp$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 2136
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [ecx+208], 0
	je	SHORT $LN2@LzmaEnc_Fi
; Line 2137
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 212				; 000000d4H
	push	edx
	call	_MatchFinderMt_ReleaseStream@4
$LN2@LzmaEnc_Fi:
; Line 2141
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_LzmaEnc_Finish@4 ENDP
_TEXT	ENDS
PUBLIC	_LzmaEnc_GetNumAvailableBytes@4
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = -4						; size = 4
_pp$ = 8						; size = 4
_LzmaEnc_GetNumAvailableBytes@4 PROC
; Line 2167
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2168
	mov	eax, DWORD PTR _pp$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 2169
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2170
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_LzmaEnc_GetNumAvailableBytes@4 ENDP
_TEXT	ENDS
PUBLIC	_LzmaEnc_GetCurBuf@4
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = -4						; size = 4
_pp$ = 8						; size = 4
_LzmaEnc_GetCurBuf@4 PROC
; Line 2173
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2174
	mov	eax, DWORD PTR _pp$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 2175
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _p$[ebp]
	sub	eax, DWORD PTR [edx+48]
; Line 2176
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_LzmaEnc_GetCurBuf@4 ENDP
_TEXT	ENDS
PUBLIC	_LzmaEnc_CodeOneMemBlock@24
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_outStream$ = -36					; size = 16
_res$ = -16						; size = 4
_nowPos64$ = -12					; size = 8
_p$ = -4						; size = 4
_pp$ = 8						; size = 4
_reInit$ = 12						; size = 4
_dest$ = 16						; size = 4
_destLen$ = 20						; size = 4
_desiredPackSize$ = 24					; size = 4
_unpackSize$ = 28					; size = 4
_LzmaEnc_CodeOneMemBlock@24 PROC
; Line 2180
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2181
	mov	eax, DWORD PTR _pp$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 2186
	mov	DWORD PTR _outStream$[ebp], OFFSET _MyWrite@12
; Line 2187
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	DWORD PTR _outStream$[ebp+4], ecx
; Line 2188
	mov	edx, DWORD PTR _destLen$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _outStream$[ebp+8], eax
; Line 2189
	mov	DWORD PTR _outStream$[ebp+12], 0
; Line 2191
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+104], 0
; Line 2192
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+108], 0
; Line 2193
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+144], 0
; Line 2195
	cmp	DWORD PTR _reInit$[ebp], 0
	je	SHORT $LN2@LzmaEnc_Co@2
; Line 2196
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_LzmaEnc_Init@4
$LN2@LzmaEnc_Co@2:
; Line 2197
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_LzmaEnc_InitPrices@4
; Line 2198
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	mov	DWORD PTR _nowPos64$[ebp], ecx
	mov	edx, DWORD PTR [eax+124]
	mov	DWORD PTR _nowPos64$[ebp+4], edx
; Line 2199
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 152				; 00000098H
	push	eax
	call	_RangeEnc_Init@4
; Line 2200
	mov	ecx, DWORD PTR _p$[ebp]
	lea	edx, DWORD PTR _outStream$[ebp]
	mov	DWORD PTR [ecx+188], edx
; Line 2202
	mov	eax, DWORD PTR _unpackSize$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _desiredPackSize$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_LzmaEnc_CodeOneBlock@16
	mov	DWORD PTR _res$[ebp], eax
; Line 2204
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+120]
	sub	edx, DWORD PTR _nowPos64$[ebp]
	mov	eax, DWORD PTR [ecx+124]
	sbb	eax, DWORD PTR _nowPos64$[ebp+4]
	mov	ecx, DWORD PTR _unpackSize$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 2205
	mov	edx, DWORD PTR _destLen$[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, DWORD PTR _outStream$[ebp+8]
	mov	ecx, DWORD PTR _destLen$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 2206
	cmp	DWORD PTR _outStream$[ebp+12], 0
	je	SHORT $LN1@LzmaEnc_Co@2
; Line 2207
	mov	eax, 7
	jmp	SHORT $LN3@LzmaEnc_Co@2
$LN1@LzmaEnc_Co@2:
; Line 2209
	mov	eax, DWORD PTR _res$[ebp]
$LN3@LzmaEnc_Co@2:
; Line 2210
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@LzmaEnc_Co@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
	npad	3
$LN7@LzmaEnc_Co@2:
	DD	1
	DD	$LN6@LzmaEnc_Co@2
$LN6@LzmaEnc_Co@2:
	DD	-36					; ffffffdcH
	DD	16					; 00000010H
	DD	$LN5@LzmaEnc_Co@2
$LN5@LzmaEnc_Co@2:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
_LzmaEnc_CodeOneMemBlock@24 ENDP
; Function compile flags: /Odtp /RTCsu
tv775 = -112						; size = 8
tv772 = -104						; size = 8
tv373 = -96						; size = 4
tv516 = -92						; size = 4
_processed$81526 = -88					; size = 4
_posReduced$81522 = -84					; size = 4
_base$81521 = -80					; size = 4
_footerBits$81520 = -76					; size = 4
_i$81516 = -72						; size = 4
_posSlot$81513 = -68					; size = 4
_distance$81506 = -64					; size = 4
_data$81498 = -60					; size = 4
_probs$81497 = -56					; size = 4
_curByte$81496 = -49					; size = 1
_posState$81491 = -48					; size = 4
_len$81490 = -44					; size = 4
_pos$81489 = -36					; size = 4
_curByte$81483 = -25					; size = 1
_numPairs$81482 = -20					; size = 4
___result__$81478 = -12					; size = 4
_startPos32$ = -8					; size = 4
_nowPos32$ = -4						; size = 4
_p$ = 8							; size = 4
_useLimits$ = 12					; size = 4
_maxPackSize$ = 16					; size = 4
_maxUnpackSize$ = 20					; size = 4
_LzmaEnc_CodeOneBlock@16 PROC
; Line 1791
	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-112]
	mov	ecx, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1793
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+116], 0
	je	SHORT $LN38@LzmaEnc_Co@3
; Line 1795
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1796
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+116], 0
$LN38@LzmaEnc_Co@3:
; Line 1799
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+108], 0
	je	SHORT $LN37@LzmaEnc_Co@3
; Line 1800
	mov	ecx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [ecx+144]
	jmp	$LN39@LzmaEnc_Co@3
$LN37@LzmaEnc_Co@3:
; Line 1801
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_CheckErrors@4
	mov	DWORD PTR ___result__$81478[ebp], eax
	cmp	DWORD PTR ___result__$81478[ebp], 0
	je	SHORT $LN36@LzmaEnc_Co@3
	mov	eax, DWORD PTR ___result__$81478[ebp]
	jmp	$LN39@LzmaEnc_Co@3
$LN36@LzmaEnc_Co@3:
; Line 1803
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	mov	DWORD PTR _nowPos32$[ebp], ecx
; Line 1804
	mov	edx, DWORD PTR _nowPos32$[ebp]
	mov	DWORD PTR _startPos32$[ebp], edx
; Line 1806
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR tv516[ebp], eax
	mov	ecx, DWORD PTR tv516[ebp]
	mov	edx, DWORD PTR tv516[ebp]
	mov	eax, DWORD PTR [ecx+120]
	or	eax, DWORD PTR [edx+124]
	jne	$LN35@LzmaEnc_Co@3
; Line 1810
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN34@LzmaEnc_Co@3
; Line 1811
	mov	edx, DWORD PTR _nowPos32$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_Flush@8
	jmp	$LN39@LzmaEnc_Co@3
$LN34@LzmaEnc_Co@3:
; Line 1812
	lea	ecx, DWORD PTR _numPairs$81482[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_ReadMatchDistances@8
; Line 1813
	push	0
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	shl	ecx, 5
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx+206344]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 152				; 00000098H
	push	ecx
	call	_RangeEnc_EncodeBit@12
; Line 1814
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _kLiteralNextStates[eax*4]
	mov	DWORD PTR [ecx+68], edx
; Line 1815
	mov	esi, esp
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _p$[ebp]
	sub	eax, DWORD PTR [ecx+48]
	mov	dl, BYTE PTR [eax]
	mov	BYTE PTR _curByte$81483[ebp], dl
; Line 1816
	movzx	eax, BYTE PTR _curByte$81483[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 152				; 00000098H
	push	eax
	call	_LitEnc_Encode@12
; Line 1817
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	sub	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+48], edx
; Line 1818
	mov	ecx, DWORD PTR _nowPos32$[ebp]
	add	ecx, 1
	mov	DWORD PTR _nowPos32$[ebp], ecx
$LN35@LzmaEnc_Co@3:
; Line 1821
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	$LN33@LzmaEnc_Co@3
$LN32@LzmaEnc_Co@3:
; Line 1826
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+100], 0
	je	SHORT $LN30@LzmaEnc_Co@3
; Line 1827
	lea	ecx, DWORD PTR _pos$81489[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_GetOptimumFast@8
	mov	DWORD PTR _len$81490[ebp], eax
; Line 1828
	jmp	SHORT $LN29@LzmaEnc_Co@3
$LN30@LzmaEnc_Co@3:
; Line 1829
	lea	eax, DWORD PTR _pos$81489[ebp]
	push	eax
	mov	ecx, DWORD PTR _nowPos32$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_GetOptimum@12
	mov	DWORD PTR _len$81490[ebp], eax
$LN29@LzmaEnc_Co@3:
; Line 1835
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _nowPos32$[ebp]
	and	ecx, DWORD PTR [eax+88]
	mov	DWORD PTR _posState$81491[ebp], ecx
; Line 1836
	cmp	DWORD PTR _len$81490[ebp], 1
	jne	$LN28@LzmaEnc_Co@3
	cmp	DWORD PTR _pos$81489[ebp], -1
	jne	$LN28@LzmaEnc_Co@3
; Line 1842
	push	0
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+68]
	shl	eax, 5
	mov	ecx, DWORD PTR _p$[ebp]
	lea	edx, DWORD PTR [ecx+eax+206344]
	mov	eax, DWORD PTR _posState$81491[ebp]
	lea	ecx, DWORD PTR [edx+eax*2]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 152				; 00000098H
	push	edx
	call	_RangeEnc_EncodeBit@12
; Line 1843
	mov	esi, esp
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _p$[ebp]
	sub	eax, DWORD PTR [ecx+48]
	mov	DWORD PTR _data$81498[ebp], eax
; Line 1844
	mov	edx, DWORD PTR _data$81498[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR _curByte$81496[ebp], al
; Line 1845
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _nowPos32$[ebp]
	and	edx, DWORD PTR [ecx+84]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	shl	edx, cl
	mov	ecx, DWORD PTR _data$81498[ebp]
	movzx	eax, BYTE PTR [ecx-1]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	esi, 8
	sub	esi, DWORD PTR [ecx+72]
	mov	ecx, esi
	sar	eax, cl
	add	edx, eax
	imul	edx, 768				; 00000300H
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	lea	edx, DWORD PTR [ecx+edx*2]
	mov	DWORD PTR _probs$81497[ebp], edx
; Line 1846
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+68], 7
	jae	SHORT $LN27@LzmaEnc_Co@3
; Line 1847
	movzx	ecx, BYTE PTR _curByte$81496[ebp]
	push	ecx
	mov	edx, DWORD PTR _probs$81497[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 152				; 00000098H
	push	eax
	call	_LitEnc_Encode@12
; Line 1848
	jmp	SHORT $LN26@LzmaEnc_Co@3
$LN27@LzmaEnc_Co@3:
; Line 1849
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _data$81498[ebp]
	sub	edx, DWORD PTR [ecx+52]
	movzx	eax, BYTE PTR [edx-1]
	push	eax
	movzx	ecx, BYTE PTR _curByte$81496[ebp]
	push	ecx
	mov	edx, DWORD PTR _probs$81497[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 152				; 00000098H
	push	eax
	call	_LitEnc_EncodeMatched@16
$LN26@LzmaEnc_Co@3:
; Line 1850
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _kLiteralNextStates[edx*4]
	mov	DWORD PTR [eax+68], ecx
; Line 1852
	jmp	$LN25@LzmaEnc_Co@3
$LN28@LzmaEnc_Co@3:
; Line 1854
	push	1
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+68]
	shl	eax, 5
	mov	ecx, DWORD PTR _p$[ebp]
	lea	edx, DWORD PTR [ecx+eax+206344]
	mov	eax, DWORD PTR _posState$81491[ebp]
	lea	ecx, DWORD PTR [edx+eax*2]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 152				; 00000098H
	push	edx
	call	_RangeEnc_EncodeBit@12
; Line 1855
	cmp	DWORD PTR _pos$81489[ebp], 4
	jae	$LN24@LzmaEnc_Co@3
; Line 1857
	push	1
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2+206728]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 152				; 00000098H
	push	ecx
	call	_RangeEnc_EncodeBit@12
; Line 1858
	cmp	DWORD PTR _pos$81489[ebp], 0
	jne	SHORT $LN23@LzmaEnc_Co@3
; Line 1860
	push	0
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	ecx, DWORD PTR _p$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2+206752]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 152				; 00000098H
	push	eax
	call	_RangeEnc_EncodeBit@12
; Line 1861
	xor	ecx, ecx
	cmp	DWORD PTR _len$81490[ebp], 1
	setne	cl
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+68]
	shl	eax, 5
	mov	ecx, DWORD PTR _p$[ebp]
	lea	edx, DWORD PTR [ecx+eax+206824]
	mov	eax, DWORD PTR _posState$81491[ebp]
	lea	ecx, DWORD PTR [edx+eax*2]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 152				; 00000098H
	push	edx
	call	_RangeEnc_EncodeBit@12
; Line 1863
	jmp	$LN22@LzmaEnc_Co@3
$LN23@LzmaEnc_Co@3:
; Line 1865
	mov	eax, DWORD PTR _pos$81489[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+52]
	mov	DWORD PTR _distance$81506[ebp], edx
; Line 1866
	push	1
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2+206752]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 152				; 00000098H
	push	ecx
	call	_RangeEnc_EncodeBit@12
; Line 1867
	cmp	DWORD PTR _pos$81489[ebp], 1
	jne	SHORT $LN21@LzmaEnc_Co@3
; Line 1868
	push	0
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	ecx, DWORD PTR _p$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2+206776]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 152				; 00000098H
	push	eax
	call	_RangeEnc_EncodeBit@12
; Line 1869
	jmp	SHORT $LN20@LzmaEnc_Co@3
$LN21@LzmaEnc_Co@3:
; Line 1871
	push	1
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	eax, DWORD PTR _p$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2+206776]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 152				; 00000098H
	push	edx
	call	_RangeEnc_EncodeBit@12
; Line 1872
	mov	eax, DWORD PTR _pos$81489[ebp]
	sub	eax, 2
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	eax, DWORD PTR _p$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2+206800]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 152				; 00000098H
	push	edx
	call	_RangeEnc_EncodeBit@12
; Line 1873
	cmp	DWORD PTR _pos$81489[ebp], 3
	jne	SHORT $LN19@LzmaEnc_Co@3
; Line 1874
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	mov	DWORD PTR [eax+64], edx
$LN19@LzmaEnc_Co@3:
; Line 1875
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR [eax+60], edx
$LN20@LzmaEnc_Co@3:
; Line 1877
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR [eax+56], edx
; Line 1878
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _distance$81506[ebp]
	mov	DWORD PTR [eax+52], ecx
$LN22@LzmaEnc_Co@3:
; Line 1880
	cmp	DWORD PTR _len$81490[ebp], 1
	jne	SHORT $LN18@LzmaEnc_Co@3
; Line 1881
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _kShortRepNextStates[eax*4]
	mov	DWORD PTR [ecx+68], edx
; Line 1882
	jmp	SHORT $LN17@LzmaEnc_Co@3
$LN18@LzmaEnc_Co@3:
; Line 1884
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 200500				; 00030f34H
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	xor	edx, edx
	cmp	DWORD PTR [ecx+100], 0
	sete	dl
	push	edx
	mov	eax, DWORD PTR _posState$81491[ebp]
	push	eax
	mov	ecx, DWORD PTR _len$81490[ebp]
	sub	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 152				; 00000098H
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 226484				; 000374b4H
	push	eax
	call	_LenEnc_Encode2@24
; Line 1885
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _kRepNextStates[edx*4]
	mov	DWORD PTR [eax+68], ecx
$LN17@LzmaEnc_Co@3:
; Line 1888
	jmp	$LN25@LzmaEnc_Co@3
$LN24@LzmaEnc_Co@3:
; Line 1891
	push	0
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	ecx, DWORD PTR _p$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2+206728]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 152				; 00000098H
	push	eax
	call	_RangeEnc_EncodeBit@12
; Line 1892
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _kMatchNextStates[edx*4]
	mov	DWORD PTR [eax+68], ecx
; Line 1893
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 200500				; 00030f34H
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+100], 0
	sete	cl
	push	ecx
	mov	edx, DWORD PTR _posState$81491[ebp]
	push	edx
	mov	eax, DWORD PTR _len$81490[ebp]
	sub	eax, 2
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 152				; 00000098H
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 207980				; 00032c6cH
	push	edx
	call	_LenEnc_Encode2@24
; Line 1894
	mov	eax, DWORD PTR _pos$81489[ebp]
	sub	eax, 4
	mov	DWORD PTR _pos$81489[ebp], eax
; Line 1895
	cmp	DWORD PTR _pos$81489[ebp], 128		; 00000080H
	jae	SHORT $LN15@LzmaEnc_Co@3
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR _pos$81489[ebp]
	movzx	edx, BYTE PTR [ecx+198452]
	mov	DWORD PTR _posSlot$81513[ebp], edx
	jmp	SHORT $LN14@LzmaEnc_Co@3
$LN15@LzmaEnc_Co@3:
	cmp	DWORD PTR _pos$81489[ebp], 131072	; 00020000H
	sbb	eax, eax
	and	eax, -10				; fffffff6H
	add	eax, 16					; 00000010H
	mov	DWORD PTR _i$81516[ebp], eax
	mov	edx, DWORD PTR _pos$81489[ebp]
	mov	ecx, DWORD PTR _i$81516[ebp]
	shr	edx, cl
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+198452]
	mov	edx, DWORD PTR _i$81516[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	mov	DWORD PTR _posSlot$81513[ebp], eax
$LN14@LzmaEnc_Co@3:
; Line 1896
	cmp	DWORD PTR _len$81490[ebp], 5
	jae	SHORT $LN41@LzmaEnc_Co@3
	mov	ecx, DWORD PTR _len$81490[ebp]
	sub	ecx, 2
	mov	DWORD PTR tv373[ebp], ecx
	jmp	SHORT $LN42@LzmaEnc_Co@3
$LN41@LzmaEnc_Co@3:
	mov	DWORD PTR tv373[ebp], 3
$LN42@LzmaEnc_Co@3:
	mov	edx, DWORD PTR _posSlot$81513[ebp]
	push	edx
	push	6
	mov	eax, DWORD PTR tv373[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR _p$[ebp]
	lea	edx, DWORD PTR [ecx+eax+207208]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 152				; 00000098H
	push	eax
	call	_RcTree_Encode@16
; Line 1898
	cmp	DWORD PTR _posSlot$81513[ebp], 4
	jb	$LN13@LzmaEnc_Co@3
; Line 1900
	mov	ecx, DWORD PTR _posSlot$81513[ebp]
	shr	ecx, 1
	sub	ecx, 1
	mov	DWORD PTR _footerBits$81520[ebp], ecx
; Line 1901
	mov	edx, DWORD PTR _posSlot$81513[ebp]
	and	edx, 1
	or	edx, 2
	mov	ecx, DWORD PTR _footerBits$81520[ebp]
	shl	edx, cl
	mov	DWORD PTR _base$81521[ebp], edx
; Line 1902
	mov	eax, DWORD PTR _pos$81489[ebp]
	sub	eax, DWORD PTR _base$81521[ebp]
	mov	DWORD PTR _posReduced$81522[ebp], eax
; Line 1904
	cmp	DWORD PTR _posSlot$81513[ebp], 14	; 0000000eH
	jae	SHORT $LN12@LzmaEnc_Co@3
; Line 1905
	mov	ecx, DWORD PTR _posReduced$81522[ebp]
	push	ecx
	mov	edx, DWORD PTR _footerBits$81520[ebp]
	push	edx
	mov	eax, DWORD PTR _base$81521[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2+207720]
	mov	eax, DWORD PTR _posSlot$81513[ebp]
	shl	eax, 1
	sub	edx, eax
	sub	edx, 2
	push	edx
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 152				; 00000098H
	push	ecx
	call	_RcTree_ReverseEncode@16
; Line 1906
	jmp	SHORT $LN13@LzmaEnc_Co@3
$LN12@LzmaEnc_Co@3:
; Line 1908
	mov	edx, DWORD PTR _footerBits$81520[ebp]
	sub	edx, 4
	push	edx
	mov	eax, DWORD PTR _posReduced$81522[ebp]
	shr	eax, 4
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 152				; 00000098H
	push	ecx
	call	_RangeEnc_EncodeDirectBits@12
; Line 1909
	mov	edx, DWORD PTR _posReduced$81522[ebp]
	and	edx, 15					; 0000000fH
	push	edx
	push	4
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 207948				; 00032c4cH
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 152				; 00000098H
	push	ecx
	call	_RcTree_ReverseEncode@16
; Line 1910
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+132]
	add	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+132], eax
$LN13@LzmaEnc_Co@3:
; Line 1913
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR [edx+64], ecx
; Line 1914
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR [edx+60], ecx
; Line 1915
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR [edx+56], ecx
; Line 1916
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _pos$81489[ebp]
	mov	DWORD PTR [edx+52], eax
; Line 1917
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	add	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+128], edx
$LN25@LzmaEnc_Co@3:
; Line 1920
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	sub	edx, DWORD PTR _len$81490[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+48], edx
; Line 1921
	mov	ecx, DWORD PTR _nowPos32$[ebp]
	add	ecx, DWORD PTR _len$81490[ebp]
	mov	DWORD PTR _nowPos32$[ebp], ecx
; Line 1922
	mov	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [edx+48], 0
	jne	$LN10@LzmaEnc_Co@3
; Line 1925
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+100], 0
	jne	SHORT $LN9@LzmaEnc_Co@3
; Line 1927
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [ecx+128], 128		; 00000080H
	jb	SHORT $LN8@LzmaEnc_Co@3
; Line 1928
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_FillDistancesPrices@4
$LN8@LzmaEnc_Co@3:
; Line 1929
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+132], 16			; 00000010H
	jb	SHORT $LN9@LzmaEnc_Co@3
; Line 1930
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_FillAlignPrices@4
$LN9@LzmaEnc_Co@3:
; Line 1932
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN6@LzmaEnc_Co@3
; Line 1933
	jmp	$LN33@LzmaEnc_Co@3
$LN6@LzmaEnc_Co@3:
; Line 1934
	mov	eax, DWORD PTR _nowPos32$[ebp]
	sub	eax, DWORD PTR _startPos32$[ebp]
	mov	DWORD PTR _processed$81526[ebp], eax
; Line 1935
	cmp	DWORD PTR _useLimits$[ebp], 0
	je	SHORT $LN5@LzmaEnc_Co@3
; Line 1938
	mov	ecx, DWORD PTR _processed$81526[ebp]
	add	ecx, 4396				; 0000112cH
	cmp	ecx, DWORD PTR _maxUnpackSize$[ebp]
	jae	SHORT $LN3@LzmaEnc_Co@3
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [edx+176]
	sub	ecx, DWORD PTR [eax+184]
	mov	eax, ecx
	cdq
	mov	ecx, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR [ecx+192]
	adc	edx, DWORD PTR [ecx+196]
	mov	ecx, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR [ecx+168]
	adc	edx, DWORD PTR [ecx+172]
	add	eax, 8192				; 00002000H
	adc	edx, 0
	mov	ecx, DWORD PTR _maxPackSize$[ebp]
	xor	esi, esi
	mov	DWORD PTR tv772[ebp], eax
	mov	DWORD PTR tv772[ebp+4], edx
	mov	DWORD PTR tv775[ebp], ecx
	mov	DWORD PTR tv775[ebp+4], esi
	mov	edx, DWORD PTR tv772[ebp+4]
	cmp	edx, DWORD PTR tv775[ebp+4]
	jb	SHORT $LN4@LzmaEnc_Co@3
	ja	SHORT $LN3@LzmaEnc_Co@3
	mov	eax, DWORD PTR tv772[ebp]
	cmp	eax, DWORD PTR tv775[ebp]
	jb	SHORT $LN4@LzmaEnc_Co@3
$LN3@LzmaEnc_Co@3:
; Line 1939
	jmp	SHORT $LN33@LzmaEnc_Co@3
$LN4@LzmaEnc_Co@3:
; Line 1941
	jmp	SHORT $LN10@LzmaEnc_Co@3
$LN5@LzmaEnc_Co@3:
	cmp	DWORD PTR _processed$81526[ebp], 131072	; 00020000H
	jb	SHORT $LN10@LzmaEnc_Co@3
; Line 1943
	mov	ecx, DWORD PTR _nowPos32$[ebp]
	sub	ecx, DWORD PTR _startPos32$[ebp]
	xor	edx, edx
	mov	eax, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR [eax+120]
	adc	edx, DWORD PTR [eax+124]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+120], ecx
	mov	DWORD PTR [eax+124], edx
; Line 1944
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_CheckErrors@4
	jmp	SHORT $LN39@LzmaEnc_Co@3
$LN10@LzmaEnc_Co@3:
; Line 1947
	jmp	$LN32@LzmaEnc_Co@3
$LN33@LzmaEnc_Co@3:
; Line 1948
	mov	edx, DWORD PTR _nowPos32$[ebp]
	sub	edx, DWORD PTR _startPos32$[ebp]
	xor	eax, eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	edx, DWORD PTR [ecx+120]
	adc	eax, DWORD PTR [ecx+124]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+120], edx
	mov	DWORD PTR [ecx+124], eax
; Line 1949
	mov	edx, DWORD PTR _nowPos32$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_Flush@8
$LN39@LzmaEnc_Co@3:
; Line 1950
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN47@LzmaEnc_Co@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 112				; 00000070H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN47@LzmaEnc_Co@3:
	DD	2
	DD	$LN46@LzmaEnc_Co@3
$LN46@LzmaEnc_Co@3:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN44@LzmaEnc_Co@3
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN45@LzmaEnc_Co@3
$LN45@LzmaEnc_Co@3:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
$LN44@LzmaEnc_Co@3:
	DB	110					; 0000006eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	0
_LzmaEnc_CodeOneBlock@16 ENDP
; Function compile flags: /Odtp /RTCsu
_p$ = 8						; size = 4
_value$ = 12						; size = 4
_numBits$ = 16						; size = 4
_RangeEnc_EncodeDirectBits@12 PROC
; Line 588
	push	ebp
	mov	ebp, esp
$LN4@RangeEnc_E:
; Line 591
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	shr	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 592
	mov	eax, DWORD PTR _numBits$[ebp]
	sub	eax, 1
	mov	DWORD PTR _numBits$[ebp], eax
	mov	edx, DWORD PTR _value$[ebp]
	mov	ecx, DWORD PTR _numBits$[ebp]
	shr	edx, cl
	and	edx, 1
	xor	eax, eax
	sub	eax, edx
	mov	ecx, DWORD PTR _p$[ebp]
	and	eax, DWORD PTR [ecx]
	xor	edx, edx
	mov	ecx, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR [ecx+8]
	adc	edx, DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], edx
; Line 593
	mov	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [edx], 16777216		; 01000000H
	jae	SHORT $LN3@RangeEnc_E
; Line 595
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 8
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 596
	mov	ecx, DWORD PTR _p$[ebp]
	call	@RangeEnc_ShiftLow@4
$LN3@RangeEnc_E:
; Line 599
	cmp	DWORD PTR _numBits$[ebp], 0
	jne	SHORT $LN4@RangeEnc_E
; Line 600
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
_RangeEnc_EncodeDirectBits@12 ENDP
_TEXT	ENDS
EXTRN	__aullshr:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv87 = -20						; size = 8
_buf$80673 = -12					; size = 4
_temp$80669 = -5					; size = 1
_p$ = -4						; size = 4
@RangeEnc_ShiftLow@4 PROC
; _p$ = ecx
; Line 560
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	ebx
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _p$[ebp], ecx
; Line 561
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+8], -16777216		; ff000000H
	jb	SHORT $LN5@
	mov	ecx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR [ecx+12]
	mov	cl, 32					; 00000020H
	call	__aullshr
	test	eax, eax
	je	$LN6@
$LN5@:
; Line 563
	mov	edx, DWORD PTR _p$[ebp]
	mov	al, BYTE PTR [edx+4]
	mov	BYTE PTR _temp$80669[ebp], al
$LN4@:
; Line 566
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _buf$80673[ebp], edx
; Line 567
	movzx	ebx, BYTE PTR _temp$80669[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR [ecx+12]
	mov	cl, 32					; 00000020H
	call	__aullshr
	movzx	edx, al
	add	ebx, edx
	mov	eax, DWORD PTR _buf$80673[ebp]
	mov	BYTE PTR [eax], bl
	mov	ecx, DWORD PTR _buf$80673[ebp]
	add	ecx, 1
	mov	DWORD PTR _buf$80673[ebp], ecx
; Line 568
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _buf$80673[ebp]
	mov	DWORD PTR [edx+24], eax
; Line 569
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _buf$80673[ebp]
	cmp	edx, DWORD PTR [ecx+28]
	jne	SHORT $LN1@
; Line 570
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_RangeEnc_FlushStream@4
$LN1@:
; Line 571
	mov	BYTE PTR _temp$80669[ebp], 255		; 000000ffH
; Line 573
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	sub	edx, 1
	mov	DWORD PTR tv87[ebp], edx
	mov	eax, DWORD PTR [ecx+20]
	sbb	eax, 0
	mov	DWORD PTR tv87[ebp+4], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR tv87[ebp]
	mov	DWORD PTR [ecx+16], edx
	mov	eax, DWORD PTR tv87[ebp+4]
	mov	DWORD PTR [ecx+20], eax
	mov	ecx, DWORD PTR tv87[ebp]
	or	ecx, DWORD PTR tv87[ebp+4]
	jne	SHORT $LN4@
; Line 574
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+8]
	shr	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx+4], al
$LN6@:
; Line 576
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+16]
	add	eax, 1
	mov	ecx, DWORD PTR [edx+20]
	adc	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+16], eax
	mov	DWORD PTR [edx+20], ecx
; Line 577
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shl	ecx, 8
	xor	edx, edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
; Line 578
	pop	ebx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
@RangeEnc_ShiftLow@4 ENDP
; Function compile flags: /Odtp /RTCsu
_num$ = -4						; size = 4
_p$ = 8							; size = 4
_RangeEnc_FlushStream@4 PROC
; Line 548
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 550
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+48], 0
	je	SHORT $LN2@RangeEnc_F
; Line 551
	jmp	SHORT $LN3@RangeEnc_F
$LN2@RangeEnc_F:
; Line 552
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [ecx+24]
	sub	eax, DWORD PTR [edx+32]
	mov	DWORD PTR _num$[ebp], eax
; Line 553
	mov	esi, esp
	mov	ecx, DWORD PTR _num$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	DWORD PTR _num$[ebp], eax
	je	SHORT $LN1@RangeEnc_F
; Line 554
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+48], 9
$LN1@RangeEnc_F:
; Line 555
	mov	ecx, DWORD PTR _num$[ebp]
	xor	edx, edx
	mov	eax, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR [eax+40]
	adc	edx, DWORD PTR [eax+44]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+40], ecx
	mov	DWORD PTR [eax+44], edx
; Line 556
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR [ecx+24], eax
$LN3@RangeEnc_F:
; Line 557
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_RangeEnc_FlushStream@4 ENDP
; Function compile flags: /Odtp /RTCsu
_newBound$ = -8					; size = 4
_ttt$ = -4						; size = 4
_p$ = 8							; size = 4
_prob$ = 12						; size = 4
_symbol$ = 16						; size = 4
_RangeEnc_EncodeBit@12 PROC
; Line 603
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 604
	mov	eax, DWORD PTR _prob$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR _ttt$[ebp], ecx
; Line 605
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	shr	eax, 11					; 0000000bH
	imul	eax, DWORD PTR _ttt$[ebp]
	mov	DWORD PTR _newBound$[ebp], eax
; Line 606
	cmp	DWORD PTR _symbol$[ebp], 0
	jne	SHORT $LN3@RangeEnc_E@2
; Line 608
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _newBound$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 609
	mov	eax, 2048				; 00000800H
	sub	eax, DWORD PTR _ttt$[ebp]
	shr	eax, 5
	add	eax, DWORD PTR _ttt$[ebp]
	mov	DWORD PTR _ttt$[ebp], eax
; Line 611
	jmp	SHORT $LN2@RangeEnc_E@2
$LN3@RangeEnc_E@2:
; Line 613
	mov	ecx, DWORD PTR _newBound$[ebp]
	xor	edx, edx
	mov	eax, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR [eax+8]
	adc	edx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
; Line 614
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	edx, DWORD PTR _newBound$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], edx
; Line 615
	mov	ecx, DWORD PTR _ttt$[ebp]
	shr	ecx, 5
	mov	edx, DWORD PTR _ttt$[ebp]
	sub	edx, ecx
	mov	DWORD PTR _ttt$[ebp], edx
$LN2@RangeEnc_E@2:
; Line 617
	mov	eax, DWORD PTR _prob$[ebp]
	mov	cx, WORD PTR _ttt$[ebp]
	mov	WORD PTR [eax], cx
; Line 618
	mov	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [edx], 16777216		; 01000000H
	jae	SHORT $LN4@RangeEnc_E@2
; Line 620
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 8
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 621
	mov	ecx, DWORD PTR _p$[ebp]
	call	@RangeEnc_ShiftLow@4
$LN4@RangeEnc_E@2:
; Line 623
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_RangeEnc_EncodeBit@12 ENDP
; Function compile flags: /Odtp /RTCsu
_p$ = 8						; size = 4
_probs$ = 12						; size = 4
_symbol$ = 16						; size = 4
_LitEnc_Encode@12 PROC
; Line 626
	push	ebp
	mov	ebp, esp
; Line 627
	mov	eax, DWORD PTR _symbol$[ebp]
	or	eax, 256				; 00000100H
	mov	DWORD PTR _symbol$[ebp], eax
$LN3@LitEnc_Enc:
; Line 630
	mov	ecx, DWORD PTR _symbol$[ebp]
	shr	ecx, 7
	and	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _symbol$[ebp]
	shr	edx, 8
	mov	eax, DWORD PTR _probs$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_RangeEnc_EncodeBit@12
; Line 631
	mov	eax, DWORD PTR _symbol$[ebp]
	shl	eax, 1
	mov	DWORD PTR _symbol$[ebp], eax
; Line 633
	cmp	DWORD PTR _symbol$[ebp], 65536		; 00010000H
	jb	SHORT $LN3@LitEnc_Enc
; Line 634
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
_LitEnc_Encode@12 ENDP
; Function compile flags: /Odtp /RTCsu
_offs$ = -4						; size = 4
_p$ = 8							; size = 4
_probs$ = 12						; size = 4
_symbol$ = 16						; size = 4
_matchByte$ = 20					; size = 4
_LitEnc_EncodeMatched@16 PROC
; Line 637
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 638
	mov	DWORD PTR _offs$[ebp], 256		; 00000100H
; Line 639
	mov	eax, DWORD PTR _symbol$[ebp]
	or	eax, 256				; 00000100H
	mov	DWORD PTR _symbol$[ebp], eax
$LN3@LitEnc_Enc@2:
; Line 642
	mov	ecx, DWORD PTR _matchByte$[ebp]
	shl	ecx, 1
	mov	DWORD PTR _matchByte$[ebp], ecx
; Line 643
	mov	edx, DWORD PTR _symbol$[ebp]
	shr	edx, 7
	and	edx, 1
	push	edx
	mov	eax, DWORD PTR _matchByte$[ebp]
	and	eax, DWORD PTR _offs$[ebp]
	add	eax, DWORD PTR _offs$[ebp]
	mov	ecx, DWORD PTR _symbol$[ebp]
	shr	ecx, 8
	add	eax, ecx
	mov	edx, DWORD PTR _probs$[ebp]
	lea	eax, DWORD PTR [edx+eax*2]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_RangeEnc_EncodeBit@12
; Line 644
	mov	edx, DWORD PTR _symbol$[ebp]
	shl	edx, 1
	mov	DWORD PTR _symbol$[ebp], edx
; Line 645
	mov	eax, DWORD PTR _matchByte$[ebp]
	xor	eax, DWORD PTR _symbol$[ebp]
	not	eax
	and	eax, DWORD PTR _offs$[ebp]
	mov	DWORD PTR _offs$[ebp], eax
; Line 647
	cmp	DWORD PTR _symbol$[ebp], 65536		; 00010000H
	jb	SHORT $LN3@LitEnc_Enc@2
; Line 648
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_LitEnc_EncodeMatched@16 ENDP
; Function compile flags: /Odtp /RTCsu
_bit$80804 = -12					; size = 4
_i$ = -8						; size = 4
_m$ = -4						; size = 4
_rc$ = 8						; size = 4
_probs$ = 12						; size = 4
_numBitLevels$ = 16					; size = 4
_symbol$ = 20						; size = 4
_RcTree_Encode@16 PROC
; Line 717
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 718
	mov	DWORD PTR _m$[ebp], 1
; Line 720
	mov	eax, DWORD PTR _numBitLevels$[ebp]
	mov	DWORD PTR _i$[ebp], eax
$LN2@RcTree_Enc:
	cmp	DWORD PTR _i$[ebp], 0
	je	SHORT $LN3@RcTree_Enc
; Line 723
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
; Line 724
	mov	edx, DWORD PTR _symbol$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	shr	edx, cl
	and	edx, 1
	mov	DWORD PTR _bit$80804[ebp], edx
; Line 725
	mov	eax, DWORD PTR _bit$80804[ebp]
	push	eax
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR _probs$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	push	eax
	mov	ecx, DWORD PTR _rc$[ebp]
	push	ecx
	call	_RangeEnc_EncodeBit@12
; Line 726
	mov	edx, DWORD PTR _m$[ebp]
	shl	edx, 1
	or	edx, DWORD PTR _bit$80804[ebp]
	mov	DWORD PTR _m$[ebp], edx
; Line 727
	jmp	SHORT $LN2@RcTree_Enc
$LN3@RcTree_Enc:
; Line 728
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_RcTree_Encode@16 ENDP
; Function compile flags: /Odtp /RTCsu
_bit$80820 = -12					; size = 4
_i$ = -8						; size = 4
_m$ = -4						; size = 4
_rc$ = 8						; size = 4
_probs$ = 12						; size = 4
_numBitLevels$ = 16					; size = 4
_symbol$ = 20						; size = 4
_RcTree_ReverseEncode@16 PROC
; Line 731
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 732
	mov	DWORD PTR _m$[ebp], 1
; Line 734
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@RcTree_Rev@2
$LN2@RcTree_Rev@2:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@RcTree_Rev@2:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _numBitLevels$[ebp]
	jge	SHORT $LN4@RcTree_Rev@2
; Line 736
	mov	edx, DWORD PTR _symbol$[ebp]
	and	edx, 1
	mov	DWORD PTR _bit$80820[ebp], edx
; Line 737
	mov	eax, DWORD PTR _bit$80820[ebp]
	push	eax
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR _probs$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	push	eax
	mov	ecx, DWORD PTR _rc$[ebp]
	push	ecx
	call	_RangeEnc_EncodeBit@12
; Line 738
	mov	edx, DWORD PTR _m$[ebp]
	shl	edx, 1
	or	edx, DWORD PTR _bit$80820[ebp]
	mov	DWORD PTR _m$[ebp], edx
; Line 739
	mov	eax, DWORD PTR _symbol$[ebp]
	shr	eax, 1
	mov	DWORD PTR _symbol$[ebp], eax
; Line 740
	jmp	SHORT $LN2@RcTree_Rev@2
$LN4@RcTree_Rev@2:
; Line 741
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_RcTree_ReverseEncode@16 ENDP
; Function compile flags: /Odtp /RTCsu
tv75 = -4						; size = 4
_p$ = 8							; size = 4
_rc$ = 12						; size = 4
_symbol$ = 16						; size = 4
_posState$ = 20						; size = 4
_updatePrice$ = 24					; size = 4
_ProbPrices$ = 28					; size = 4
_LenEnc_Encode2@24 PROC
; Line 843
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 844
	mov	eax, DWORD PTR _posState$[ebp]
	push	eax
	mov	ecx, DWORD PTR _symbol$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rc$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_LenEnc_Encode@16
; Line 845
	cmp	DWORD PTR _updatePrice$[ebp], 0
	je	SHORT $LN3@LenEnc_Enc
; Line 846
	mov	ecx, DWORD PTR _posState$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+18440]
	sub	eax, 1
	mov	DWORD PTR tv75[ebp], eax
	mov	ecx, DWORD PTR _posState$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR tv75[ebp]
	mov	DWORD PTR [edx+ecx*4+18440], eax
	cmp	DWORD PTR tv75[ebp], 0
	jne	SHORT $LN3@LenEnc_Enc
; Line 847
	mov	ecx, DWORD PTR _ProbPrices$[ebp]
	push	ecx
	mov	edx, DWORD PTR _posState$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	call	@LenPriceEnc_UpdateTable@12
$LN3@LenEnc_Enc:
; Line 848
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
_LenEnc_Encode2@24 ENDP
; Function compile flags: /Odtp /RTCsu
_p$ = 8						; size = 4
_rc$ = 12						; size = 4
_symbol$ = 16						; size = 4
_posState$ = 20						; size = 4
_LenEnc_Encode@16 PROC
; Line 784
	push	ebp
	mov	ebp, esp
; Line 785
	cmp	DWORD PTR _symbol$[ebp], 8
	jae	SHORT $LN4@LenEnc_Enc@2
; Line 787
	push	0
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rc$[ebp]
	push	ecx
	call	_RangeEnc_EncodeBit@12
; Line 788
	mov	edx, DWORD PTR _symbol$[ebp]
	push	edx
	push	3
	mov	eax, DWORD PTR _posState$[ebp]
	shl	eax, 3
	mov	ecx, DWORD PTR _p$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2+4]
	push	edx
	mov	eax, DWORD PTR _rc$[ebp]
	push	eax
	call	_RcTree_Encode@16
; Line 790
	jmp	SHORT $LN5@LenEnc_Enc@2
$LN4@LenEnc_Enc@2:
; Line 792
	push	1
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rc$[ebp]
	push	edx
	call	_RangeEnc_EncodeBit@12
; Line 793
	cmp	DWORD PTR _symbol$[ebp], 16		; 00000010H
	jae	SHORT $LN2@LenEnc_Enc@2
; Line 795
	push	0
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	push	eax
	mov	ecx, DWORD PTR _rc$[ebp]
	push	ecx
	call	_RangeEnc_EncodeBit@12
; Line 796
	mov	edx, DWORD PTR _symbol$[ebp]
	sub	edx, 8
	push	edx
	push	3
	mov	eax, DWORD PTR _posState$[ebp]
	shl	eax, 3
	mov	ecx, DWORD PTR _p$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2+260]
	push	edx
	mov	eax, DWORD PTR _rc$[ebp]
	push	eax
	call	_RcTree_Encode@16
; Line 798
	jmp	SHORT $LN5@LenEnc_Enc@2
$LN2@LenEnc_Enc@2:
; Line 800
	push	1
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _rc$[ebp]
	push	edx
	call	_RangeEnc_EncodeBit@12
; Line 801
	mov	eax, DWORD PTR _symbol$[ebp]
	sub	eax, 16					; 00000010H
	push	eax
	push	8
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 516				; 00000204H
	push	ecx
	mov	edx, DWORD PTR _rc$[ebp]
	push	edx
	call	_RcTree_Encode@16
$LN5@LenEnc_Enc@2:
; Line 804
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	16					; 00000010H
_LenEnc_Encode@16 ENDP
; Function compile flags: /Odtp /RTCsu
_pbyLim$80969 = -28					; size = 4
_dif$80967 = -24					; size = 4
_pby$80966 = -20					; size = 4
_pbyCur$80965 = -16					; size = 4
_numAvail$80963 = -12					; size = 4
_numPairs$ = -8						; size = 4
_lenRes$ = -4						; size = 4
_p$ = 8							; size = 4
_numDistancePairsRes$ = 12				; size = 4
_ReadMatchDistances@8 PROC
; Line 868
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 869
	mov	DWORD PTR _lenRes$[ebp], 0
; Line 870
	mov	esi, esp
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+40], eax
; Line 871
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 201012				; 00031134H
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _numPairs$[ebp], eax
; Line 883
	cmp	DWORD PTR _numPairs$[ebp], 0
	jbe	$LN6@ReadMatchD
; Line 885
	mov	ecx, DWORD PTR _numPairs$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+201004]
	mov	DWORD PTR _lenRes$[ebp], eax
; Line 886
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _lenRes$[ebp]
	cmp	edx, DWORD PTR [ecx+44]
	jne	$LN6@ReadMatchD
; Line 888
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _numAvail$80963[ebp], ecx
; Line 889
	cmp	DWORD PTR _numAvail$80963[ebp], 273	; 00000111H
	jbe	SHORT $LN4@ReadMatchD
; Line 890
	mov	DWORD PTR _numAvail$80963[ebp], 273	; 00000111H
$LN4@ReadMatchD:
; Line 892
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	sub	eax, 1
	mov	DWORD PTR _pbyCur$80965[ebp], eax
; Line 893
	mov	eax, DWORD PTR _pbyCur$80965[ebp]
	add	eax, DWORD PTR _lenRes$[ebp]
	mov	DWORD PTR _pby$80966[ebp], eax
; Line 894
	mov	ecx, DWORD PTR _numPairs$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	or	eax, -1
	sub	eax, DWORD PTR [edx+ecx*4+201008]
	mov	DWORD PTR _dif$80967[ebp], eax
; Line 895
	mov	ecx, DWORD PTR _pbyCur$80965[ebp]
	add	ecx, DWORD PTR _numAvail$80963[ebp]
	mov	DWORD PTR _pbyLim$80969[ebp], ecx
	jmp	SHORT $LN3@ReadMatchD
$LN2@ReadMatchD:
; Line 896
	mov	edx, DWORD PTR _pby$80966[ebp]
	add	edx, 1
	mov	DWORD PTR _pby$80966[ebp], edx
$LN3@ReadMatchD:
	mov	eax, DWORD PTR _pby$80966[ebp]
	cmp	eax, DWORD PTR _pbyLim$80969[ebp]
	je	SHORT $LN1@ReadMatchD
	mov	ecx, DWORD PTR _pby$80966[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _pby$80966[ebp]
	add	eax, DWORD PTR _dif$80967[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	edx, ecx
	jne	SHORT $LN1@ReadMatchD
	jmp	SHORT $LN2@ReadMatchD
$LN1@ReadMatchD:
; Line 897
	mov	edx, DWORD PTR _pby$80966[ebp]
	sub	edx, DWORD PTR _pbyCur$80965[ebp]
	mov	DWORD PTR _lenRes$[ebp], edx
$LN6@ReadMatchD:
; Line 901
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	add	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+48], ecx
; Line 902
	mov	eax, DWORD PTR _numDistancePairsRes$[ebp]
	mov	ecx, DWORD PTR _numPairs$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 903
	mov	eax, DWORD PTR _lenRes$[ebp]
; Line 904
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_ReadMatchDistances@8 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv1016 = -504						; size = 4
tv695 = -500						; size = 4
tv608 = -496						; size = 4
tv407 = -492						; size = 4
tv388 = -488						; size = 4
tv294 = -484						; size = 4
tv236 = -480						; size = 4
_i$81301 = -476						; size = 4
_opt$81294 = -472					; size = 4
_curAndLenPrice$81293 = -468				; size = 4
_offset$81292 = -464					; size = 4
_curAndLenCharPrice$81290 = -460			; size = 4
_posStateNext$81289 = -456				; size = 4
_state2$81288 = -452					; size = 4
_nextRepMatchPrice$81282 = -448				; size = 4
_limit$81281 = -444					; size = 4
_lenTest2$81280 = -440					; size = 4
_data2$81279 = -436					; size = 4
_opt$81274 = -432					; size = 4
_lenToPosState$81273 = -428				; size = 4
_curAndLenPrice$81272 = -424				; size = 4
_i$81266 = -420						; size = 4
_lenTest$81259 = -416					; size = 4
_posSlot$81258 = -412					; size = 4
_curBack$81257 = -408					; size = 4
_offs$81256 = -404					; size = 4
_normalMatchPrice$81255 = -400				; size = 4
_offset$81245 = -396					; size = 4
_opt$81244 = -392					; size = 4
_curAndLenPrice$81243 = -388				; size = 4
_curAndLenCharPrice$81241 = -384			; size = 4
_posStateNext$81240 = -380				; size = 4
_state2$81239 = -376					; size = 4
_nextRepMatchPrice$81233 = -372				; size = 4
_limit$81232 = -368					; size = 4
_lenTest2$81231 = -364					; size = 4
_opt$81228 = -360					; size = 4
_curAndLenPrice$81227 = -356				; size = 4
_data2$81215 = -352					; size = 4
_price$81214 = -348					; size = 4
_lenTestTemp$81213 = -344				; size = 4
_lenTest$81212 = -340					; size = 4
_repIndex$81208 = -336					; size = 4
_offset$81203 = -332					; size = 4
_opt$81202 = -328					; size = 4
_curAndLenPrice$81201 = -324				; size = 4
_nextRepMatchPrice$81200 = -320				; size = 4
_posStateNext$81199 = -316				; size = 4
_state2$81198 = -312					; size = 4
_limit$81192 = -308					; size = 4
_data2$81191 = -304					; size = 4
_lenTest2$81190 = -300					; size = 4
_temp$81189 = -296					; size = 4
_temp$81185 = -292					; size = 4
_shortRepPrice$81183 = -288				; size = 4
_probs$81177 = -284					; size = 4
_i$81172 = -280						; size = 4
_i$81164 = -276						; size = 4
_prevOpt$81158 = -272					; size = 4
_pos$81157 = -268					; size = 4
_nextOpt$81144 = -264					; size = 4
_curOpt$81143 = -260					; size = 4
_data$81142 = -256					; size = 4
_matchByte$81141 = -250					; size = 1
_curByte$81140 = -249					; size = 1
_nextIsChar$81139 = -248				; size = 4
_repMatchPrice$81138 = -244				; size = 4
_matchPrice$81137 = -240				; size = 4
_curAnd1Price$81136 = -236				; size = 4
_curPrice$81135 = -232					; size = 4
_startLen$81134 = -228					; size = 4
_posState$81133 = -224					; size = 4
_state$81132 = -220					; size = 4
_posPrev$81131 = -216					; size = 4
_numPairs$81130 = -208					; size = 4
_newLen$81129 = -200					; size = 4
_numAvailFull$81128 = -196				; size = 4
_i$81119 = -192						; size = 4
_slot$81118 = -188					; size = 4
_lenToPosState$81115 = -184				; size = 4
_curAndLenPrice$81114 = -180				; size = 4
_distance$81113 = -176					; size = 4
_opt$81112 = -172					; size = 4
_offs$81105 = -168					; size = 4
_opt$81102 = -164					; size = 4
_curAndLenPrice$81101 = -160				; size = 4
_price$81096 = -156					; size = 4
_repLen$81095 = -152					; size = 4
_shortRepPrice$81083 = -148				; size = 4
_probs$81079 = -144					; size = 4
_lenRes$81074 = -140					; size = 4
_data2$81066 = -136					; size = 4
_lenTest$81065 = -132					; size = 4
_lenRes$81056 = -128					; size = 4
_opt$81055 = -124					; size = 4
_matchByte$ = -118					; size = 1
_curByte$ = -117					; size = 1
_data$ = -116						; size = 4
_matches$ = -112					; size = 4
_repLens$ = -104					; size = 16
_reps$ = -80						; size = 16
_normalMatchPrice$ = -60				; size = 4
_repMatchPrice$ = -56					; size = 4
_matchPrice$ = -52					; size = 4
_cur$ = -48						; size = 4
_len$ = -44						; size = 4
_lenEnd$ = -40						; size = 4
_posState$ = -36					; size = 4
_i$ = -32						; size = 4
_repMaxIndex$ = -28					; size = 4
_numPairs$ = -20					; size = 4
_mainLen$ = -12						; size = 4
_numAvail$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_p$ = 8							; size = 4
_position$ = 12						; size = 4
_backRes$ = 16						; size = 4
_GetOptimum@12 PROC
; Line 985
	push	ebp
	mov	ebp, esp
	sub	esp, 504				; 000001f8H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-504]
	mov	ecx, 126				; 0000007eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 992
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [eax+24]
	cmp	edx, DWORD PTR [ecx+28]
	je	SHORT $LN138@GetOptimum
; Line 994
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	imul	ecx, 48					; 00000030H
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx+1844]
	mov	DWORD PTR _opt$81055[ebp], eax
; Line 995
	mov	ecx, DWORD PTR _opt$81055[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [ecx+24]
	sub	eax, DWORD PTR [edx+28]
	mov	DWORD PTR _lenRes$81056[ebp], eax
; Line 996
	mov	ecx, DWORD PTR _backRes$[ebp]
	mov	edx, DWORD PTR _opt$81055[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [ecx], eax
; Line 997
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _opt$81055[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [ecx+28], eax
; Line 998
	mov	eax, DWORD PTR _lenRes$81056[ebp]
	jmp	$LN139@GetOptimum
$LN138@GetOptimum:
; Line 1000
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+24], 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+28], 0
; Line 1002
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+48], 0
	jne	SHORT $LN137@GetOptimum
; Line 1003
	lea	ecx, DWORD PTR _numPairs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_ReadMatchDistances@8
	mov	DWORD PTR _mainLen$[ebp], eax
; Line 1004
	jmp	SHORT $LN136@GetOptimum
$LN137@GetOptimum:
; Line 1006
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _mainLen$[ebp], ecx
; Line 1007
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR _numPairs$[ebp], eax
$LN136@GetOptimum:
; Line 1010
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR _numAvail$[ebp], edx
; Line 1011
	cmp	DWORD PTR _numAvail$[ebp], 2
	jae	SHORT $LN135@GetOptimum
; Line 1013
	mov	eax, DWORD PTR _backRes$[ebp]
	mov	DWORD PTR [eax], -1
; Line 1014
	mov	eax, 1
	jmp	$LN139@GetOptimum
$LN135@GetOptimum:
; Line 1016
	cmp	DWORD PTR _numAvail$[ebp], 273		; 00000111H
	jbe	SHORT $LN134@GetOptimum
; Line 1017
	mov	DWORD PTR _numAvail$[ebp], 273		; 00000111H
$LN134@GetOptimum:
; Line 1019
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	sub	eax, 1
	mov	DWORD PTR _data$[ebp], eax
; Line 1020
	mov	DWORD PTR _repMaxIndex$[ebp], 0
; Line 1021
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN133@GetOptimum
$LN132@GetOptimum:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN133@GetOptimum:
	cmp	DWORD PTR _i$[ebp], 4
	jae	$LN131@GetOptimum
; Line 1025
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4+52]
	mov	DWORD PTR _reps$[ebp+eax*4], ecx
; Line 1026
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _data$[ebp]
	sub	eax, DWORD PTR _reps$[ebp+edx*4]
	sub	eax, 1
	mov	DWORD PTR _data2$81066[ebp], eax
; Line 1027
	mov	ecx, DWORD PTR _data$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _data2$81066[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	edx, ecx
	jne	SHORT $LN129@GetOptimum
	mov	edx, DWORD PTR _data$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	mov	ecx, DWORD PTR _data2$81066[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	cmp	eax, edx
	je	SHORT $LN130@GetOptimum
$LN129@GetOptimum:
; Line 1029
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _repLens$[ebp+eax*4], 0
; Line 1030
	jmp	SHORT $LN132@GetOptimum
$LN130@GetOptimum:
; Line 1032
	mov	DWORD PTR _lenTest$81065[ebp], 2
	jmp	SHORT $LN128@GetOptimum
$LN127@GetOptimum:
	mov	ecx, DWORD PTR _lenTest$81065[ebp]
	add	ecx, 1
	mov	DWORD PTR _lenTest$81065[ebp], ecx
$LN128@GetOptimum:
	mov	edx, DWORD PTR _lenTest$81065[ebp]
	cmp	edx, DWORD PTR _numAvail$[ebp]
	jae	SHORT $LN126@GetOptimum
	mov	eax, DWORD PTR _data$[ebp]
	add	eax, DWORD PTR _lenTest$81065[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _data2$81066[ebp]
	add	edx, DWORD PTR _lenTest$81065[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	ecx, eax
	jne	SHORT $LN126@GetOptimum
	jmp	SHORT $LN127@GetOptimum
$LN126@GetOptimum:
; Line 1033
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _lenTest$81065[ebp]
	mov	DWORD PTR _repLens$[ebp+ecx*4], edx
; Line 1034
	mov	eax, DWORD PTR _repMaxIndex$[ebp]
	mov	ecx, DWORD PTR _lenTest$81065[ebp]
	cmp	ecx, DWORD PTR _repLens$[ebp+eax*4]
	jbe	SHORT $LN125@GetOptimum
; Line 1035
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _repMaxIndex$[ebp], edx
$LN125@GetOptimum:
; Line 1036
	jmp	$LN132@GetOptimum
$LN131@GetOptimum:
; Line 1037
	mov	eax, DWORD PTR _repMaxIndex$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _repLens$[ebp+eax*4]
	cmp	edx, DWORD PTR [ecx+44]
	jb	SHORT $LN124@GetOptimum
; Line 1040
	mov	eax, DWORD PTR _backRes$[ebp]
	mov	ecx, DWORD PTR _repMaxIndex$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 1041
	mov	edx, DWORD PTR _repMaxIndex$[ebp]
	mov	eax, DWORD PTR _repLens$[ebp+edx*4]
	mov	DWORD PTR _lenRes$81074[ebp], eax
; Line 1042
	mov	ecx, DWORD PTR _lenRes$81074[ebp]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_MovePos@8
; Line 1043
	mov	eax, DWORD PTR _lenRes$81074[ebp]
	jmp	$LN139@GetOptimum
$LN124@GetOptimum:
; Line 1046
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 201012				; 00031134H
	mov	DWORD PTR _matches$[ebp], eax
; Line 1047
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _mainLen$[ebp]
	cmp	edx, DWORD PTR [ecx+44]
	jb	SHORT $LN123@GetOptimum
; Line 1049
	mov	eax, DWORD PTR _numPairs$[ebp]
	mov	ecx, DWORD PTR _matches$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4-4]
	add	edx, 4
	mov	eax, DWORD PTR _backRes$[ebp]
	mov	DWORD PTR [eax], edx
; Line 1050
	mov	ecx, DWORD PTR _mainLen$[ebp]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_MovePos@8
; Line 1051
	mov	eax, DWORD PTR _mainLen$[ebp]
	jmp	$LN139@GetOptimum
$LN123@GetOptimum:
; Line 1053
	mov	eax, DWORD PTR _data$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _curByte$[ebp], cl
; Line 1054
	mov	edx, DWORD PTR _reps$[ebp]
	add	edx, 1
	mov	eax, DWORD PTR _data$[ebp]
	sub	eax, edx
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _matchByte$[ebp], cl
; Line 1056
	cmp	DWORD PTR _mainLen$[ebp], 2
	jae	SHORT $LN122@GetOptimum
	movzx	edx, BYTE PTR _curByte$[ebp]
	movzx	eax, BYTE PTR _matchByte$[ebp]
	cmp	edx, eax
	je	SHORT $LN122@GetOptimum
	mov	ecx, DWORD PTR _repMaxIndex$[ebp]
	cmp	DWORD PTR _repLens$[ebp+ecx*4], 2
	jae	SHORT $LN122@GetOptimum
; Line 1058
	mov	edx, DWORD PTR _backRes$[ebp]
	mov	DWORD PTR [edx], -1
; Line 1059
	mov	eax, 1
	jmp	$LN139@GetOptimum
$LN122@GetOptimum:
; Line 1062
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	DWORD PTR [eax+1848], edx
; Line 1064
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _position$[ebp]
	and	ecx, DWORD PTR [eax+88]
	mov	DWORD PTR _posState$[ebp], ecx
; Line 1067
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _position$[ebp]
	and	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [ecx+72]
	shl	eax, cl
	mov	edx, DWORD PTR _data$[ebp]
	movzx	edx, BYTE PTR [edx-1]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	esi, 8
	sub	esi, DWORD PTR [ecx+72]
	mov	ecx, esi
	sar	edx, cl
	add	eax, edx
	imul	eax, 768				; 00000300H
	mov	edx, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [edx+96]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _probs$81079[ebp], edx
; Line 1071
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+68], 7
	jb	SHORT $LN141@GetOptimum
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 200500				; 00030f34H
	push	ecx
	movzx	edx, BYTE PTR _matchByte$[ebp]
	push	edx
	movzx	eax, BYTE PTR _curByte$[ebp]
	push	eax
	mov	ecx, DWORD PTR _probs$81079[ebp]
	push	ecx
	call	_LitEnc_GetPriceMatched@16
	mov	DWORD PTR tv236[ebp], eax
	jmp	SHORT $LN142@GetOptimum
$LN141@GetOptimum:
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 200500				; 00030f34H
	push	edx
	movzx	eax, BYTE PTR _curByte$[ebp]
	push	eax
	mov	ecx, DWORD PTR _probs$81079[ebp]
	push	ecx
	call	_LitEnc_GetPrice@12
	mov	DWORD PTR tv236[ebp], eax
$LN142@GetOptimum:
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+68]
	shl	eax, 5
	mov	ecx, DWORD PTR _p$[ebp]
	lea	edx, DWORD PTR [ecx+eax+206344]
	mov	eax, DWORD PTR _posState$[ebp]
	movzx	ecx, WORD PTR [edx+eax*2]
	sar	ecx, 4
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+200500]
	add	eax, DWORD PTR tv236[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+1892], eax
; Line 1074
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+1920], -1
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+1900], 0
; Line 1076
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	shl	edx, 5
	mov	eax, DWORD PTR _p$[ebp]
	lea	ecx, DWORD PTR [eax+edx+206344]
	mov	edx, DWORD PTR _posState$[ebp]
	movzx	eax, WORD PTR [ecx+edx*2]
	xor	eax, 2047				; 000007ffH
	sar	eax, 4
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+200500]
	mov	DWORD PTR _matchPrice$[ebp], edx
; Line 1077
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, WORD PTR [edx+ecx*2+206728]
	xor	eax, 2047				; 000007ffH
	sar	eax, 4
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _matchPrice$[ebp]
	add	edx, DWORD PTR [ecx+eax*4+200500]
	mov	DWORD PTR _repMatchPrice$[ebp], edx
; Line 1079
	movzx	eax, BYTE PTR _matchByte$[ebp]
	movzx	ecx, BYTE PTR _curByte$[ebp]
	cmp	eax, ecx
	jne	SHORT $LN121@GetOptimum
; Line 1081
	mov	edx, DWORD PTR _posState$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_GetRepLen1Price@12
	add	eax, DWORD PTR _repMatchPrice$[ebp]
	mov	DWORD PTR _shortRepPrice$81083[ebp], eax
; Line 1082
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _shortRepPrice$81083[ebp]
	cmp	ecx, DWORD PTR [eax+1892]
	jae	SHORT $LN121@GetOptimum
; Line 1084
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _shortRepPrice$81083[ebp]
	mov	DWORD PTR [edx+1892], eax
; Line 1085
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+1920], 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+1900], 0
$LN121@GetOptimum:
; Line 1088
	mov	eax, DWORD PTR _repMaxIndex$[ebp]
	mov	ecx, DWORD PTR _mainLen$[ebp]
	cmp	ecx, DWORD PTR _repLens$[ebp+eax*4]
	jb	SHORT $LN143@GetOptimum
	mov	edx, DWORD PTR _mainLen$[ebp]
	mov	DWORD PTR tv294[ebp], edx
	jmp	SHORT $LN144@GetOptimum
$LN143@GetOptimum:
	mov	eax, DWORD PTR _repMaxIndex$[ebp]
	mov	ecx, DWORD PTR _repLens$[ebp+eax*4]
	mov	DWORD PTR tv294[ebp], ecx
$LN144@GetOptimum:
	mov	edx, DWORD PTR tv294[ebp]
	mov	DWORD PTR _lenEnd$[ebp], edx
; Line 1090
	cmp	DWORD PTR _lenEnd$[ebp], 2
	jae	SHORT $LN119@GetOptimum
; Line 1092
	mov	eax, DWORD PTR _backRes$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+1920]
	mov	DWORD PTR [eax], edx
; Line 1093
	mov	eax, 1
	jmp	$LN139@GetOptimum
$LN119@GetOptimum:
; Line 1096
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+1916], 0
; Line 1097
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN118@GetOptimum
$LN117@GetOptimum:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN118@GetOptimum:
	cmp	DWORD PTR _i$[ebp], 4
	jae	SHORT $LN116@GetOptimum
; Line 1098
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _reps$[ebp+ecx*4]
	mov	DWORD PTR [eax+edx*4+1876], ecx
	jmp	SHORT $LN117@GetOptimum
$LN116@GetOptimum:
; Line 1100
	mov	edx, DWORD PTR _lenEnd$[ebp]
	mov	DWORD PTR _len$[ebp], edx
$LN115@GetOptimum:
; Line 1102
	mov	eax, DWORD PTR _len$[ebp]
	imul	eax, 48					; 00000030H
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+eax+1844], 1073741824	; 40000000H
	mov	edx, DWORD PTR _len$[ebp]
	sub	edx, 1
	mov	DWORD PTR _len$[ebp], edx
; Line 1103
	cmp	DWORD PTR _len$[ebp], 2
	jae	SHORT $LN115@GetOptimum
; Line 1105
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN112@GetOptimum
$LN111@GetOptimum:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN112@GetOptimum:
	cmp	DWORD PTR _i$[ebp], 4
	jae	$LN110@GetOptimum
; Line 1107
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _repLens$[ebp+ecx*4]
	mov	DWORD PTR _repLen$81095[ebp], edx
; Line 1109
	cmp	DWORD PTR _repLen$81095[ebp], 2
	jae	SHORT $LN109@GetOptimum
; Line 1110
	jmp	SHORT $LN111@GetOptimum
$LN109@GetOptimum:
; Line 1111
	mov	eax, DWORD PTR _posState$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_GetPureRepPrice@16
	add	eax, DWORD PTR _repMatchPrice$[ebp]
	mov	DWORD PTR _price$81096[ebp], eax
$LN108@GetOptimum:
; Line 1114
	mov	edx, DWORD PTR _posState$[ebp]
	imul	edx, 1088				; 00000440H
	mov	eax, DWORD PTR _p$[ebp]
	lea	ecx, DWORD PTR [eax+edx+227516]
	mov	edx, DWORD PTR _repLen$81095[ebp]
	mov	eax, DWORD PTR _price$81096[ebp]
	add	eax, DWORD PTR [ecx+edx*4-8]
	mov	DWORD PTR _curAndLenPrice$81101[ebp], eax
; Line 1115
	mov	ecx, DWORD PTR _repLen$81095[ebp]
	imul	ecx, 48					; 00000030H
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx+1844]
	mov	DWORD PTR _opt$81102[ebp], eax
; Line 1116
	mov	ecx, DWORD PTR _opt$81102[ebp]
	mov	edx, DWORD PTR _curAndLenPrice$81101[ebp]
	cmp	edx, DWORD PTR [ecx]
	jae	SHORT $LN107@GetOptimum
; Line 1118
	mov	eax, DWORD PTR _opt$81102[ebp]
	mov	ecx, DWORD PTR _curAndLenPrice$81101[ebp]
	mov	DWORD PTR [eax], ecx
; Line 1119
	mov	edx, DWORD PTR _opt$81102[ebp]
	mov	DWORD PTR [edx+24], 0
; Line 1120
	mov	eax, DWORD PTR _opt$81102[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+28], ecx
; Line 1121
	mov	edx, DWORD PTR _opt$81102[ebp]
	mov	DWORD PTR [edx+8], 0
$LN107@GetOptimum:
; Line 1124
	mov	eax, DWORD PTR _repLen$81095[ebp]
	sub	eax, 1
	mov	DWORD PTR _repLen$81095[ebp], eax
	cmp	DWORD PTR _repLen$81095[ebp], 2
	jae	$LN108@GetOptimum
; Line 1125
	jmp	$LN111@GetOptimum
$LN110@GetOptimum:
; Line 1127
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, WORD PTR [eax+edx*2+206728]
	sar	ecx, 4
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _matchPrice$[ebp]
	add	eax, DWORD PTR [edx+ecx*4+200500]
	mov	DWORD PTR _normalMatchPrice$[ebp], eax
; Line 1129
	cmp	DWORD PTR _repLens$[ebp], 2
	jb	SHORT $LN145@GetOptimum
	mov	ecx, DWORD PTR _repLens$[ebp]
	add	ecx, 1
	mov	DWORD PTR tv388[ebp], ecx
	jmp	SHORT $LN146@GetOptimum
$LN145@GetOptimum:
	mov	DWORD PTR tv388[ebp], 2
$LN146@GetOptimum:
	mov	edx, DWORD PTR tv388[ebp]
	mov	DWORD PTR _len$[ebp], edx
; Line 1130
	mov	eax, DWORD PTR _len$[ebp]
	cmp	eax, DWORD PTR _mainLen$[ebp]
	ja	$LN104@GetOptimum
; Line 1132
	mov	DWORD PTR _offs$81105[ebp], 0
$LN103@GetOptimum:
; Line 1133
	mov	ecx, DWORD PTR _offs$81105[ebp]
	mov	edx, DWORD PTR _matches$[ebp]
	mov	eax, DWORD PTR _len$[ebp]
	cmp	eax, DWORD PTR [edx+ecx*4]
	jbe	SHORT $LN102@GetOptimum
; Line 1134
	mov	ecx, DWORD PTR _offs$81105[ebp]
	add	ecx, 2
	mov	DWORD PTR _offs$81105[ebp], ecx
	jmp	SHORT $LN103@GetOptimum
$LN102@GetOptimum:
; Line 1135
	jmp	SHORT $LN101@GetOptimum
$LN100@GetOptimum:
	mov	edx, DWORD PTR _len$[ebp]
	add	edx, 1
	mov	DWORD PTR _len$[ebp], edx
$LN101@GetOptimum:
; Line 1138
	mov	eax, DWORD PTR _offs$81105[ebp]
	mov	ecx, DWORD PTR _matches$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+4]
	mov	DWORD PTR _distance$81113[ebp], edx
; Line 1140
	mov	eax, DWORD PTR _posState$[ebp]
	imul	eax, 1088				; 00000440H
	mov	ecx, DWORD PTR _p$[ebp]
	lea	edx, DWORD PTR [ecx+eax+209012]
	mov	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _normalMatchPrice$[ebp]
	add	ecx, DWORD PTR [edx+eax*4-8]
	mov	DWORD PTR _curAndLenPrice$81114[ebp], ecx
; Line 1141
	cmp	DWORD PTR _len$[ebp], 5
	jae	SHORT $LN147@GetOptimum
	mov	edx, DWORD PTR _len$[ebp]
	sub	edx, 2
	mov	DWORD PTR tv407[ebp], edx
	jmp	SHORT $LN148@GetOptimum
$LN147@GetOptimum:
	mov	DWORD PTR tv407[ebp], 3
$LN148@GetOptimum:
	mov	eax, DWORD PTR tv407[ebp]
	mov	DWORD PTR _lenToPosState$81115[ebp], eax
; Line 1142
	cmp	DWORD PTR _distance$81113[ebp], 128	; 00000080H
	jae	SHORT $LN98@GetOptimum
; Line 1143
	mov	ecx, DWORD PTR _lenToPosState$81115[ebp]
	shl	ecx, 9
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx+204232]
	mov	ecx, DWORD PTR _distance$81113[ebp]
	mov	edx, DWORD PTR _curAndLenPrice$81114[ebp]
	add	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _curAndLenPrice$81114[ebp], edx
; Line 1144
	jmp	SHORT $LN97@GetOptimum
$LN98@GetOptimum:
; Line 1147
	cmp	DWORD PTR _distance$81113[ebp], 131072	; 00020000H
	sbb	eax, eax
	and	eax, -10				; fffffff6H
	add	eax, 16					; 00000010H
	mov	DWORD PTR _i$81119[ebp], eax
	mov	edx, DWORD PTR _distance$81113[ebp]
	mov	ecx, DWORD PTR _i$81119[ebp]
	shr	edx, cl
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+198452]
	mov	edx, DWORD PTR _i$81119[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	mov	DWORD PTR _slot$81118[ebp], eax
; Line 1148
	mov	ecx, DWORD PTR _distance$81113[ebp]
	and	ecx, 15					; 0000000fH
	mov	edx, DWORD PTR _lenToPosState$81115[ebp]
	shl	edx, 8
	mov	eax, DWORD PTR _p$[ebp]
	lea	edx, DWORD PTR [eax+edx+203208]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+ecx*4+206280]
	mov	eax, DWORD PTR _slot$81118[ebp]
	add	ecx, DWORD PTR [edx+eax*4]
	add	ecx, DWORD PTR _curAndLenPrice$81114[ebp]
	mov	DWORD PTR _curAndLenPrice$81114[ebp], ecx
$LN97@GetOptimum:
; Line 1150
	mov	ecx, DWORD PTR _len$[ebp]
	imul	ecx, 48					; 00000030H
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx+1844]
	mov	DWORD PTR _opt$81112[ebp], eax
; Line 1151
	mov	ecx, DWORD PTR _opt$81112[ebp]
	mov	edx, DWORD PTR _curAndLenPrice$81114[ebp]
	cmp	edx, DWORD PTR [ecx]
	jae	SHORT $LN96@GetOptimum
; Line 1153
	mov	eax, DWORD PTR _opt$81112[ebp]
	mov	ecx, DWORD PTR _curAndLenPrice$81114[ebp]
	mov	DWORD PTR [eax], ecx
; Line 1154
	mov	edx, DWORD PTR _opt$81112[ebp]
	mov	DWORD PTR [edx+24], 0
; Line 1155
	mov	eax, DWORD PTR _distance$81113[ebp]
	add	eax, 4
	mov	ecx, DWORD PTR _opt$81112[ebp]
	mov	DWORD PTR [ecx+28], eax
; Line 1156
	mov	edx, DWORD PTR _opt$81112[ebp]
	mov	DWORD PTR [edx+8], 0
$LN96@GetOptimum:
; Line 1158
	mov	eax, DWORD PTR _offs$81105[ebp]
	mov	ecx, DWORD PTR _matches$[ebp]
	mov	edx, DWORD PTR _len$[ebp]
	cmp	edx, DWORD PTR [ecx+eax*4]
	jne	SHORT $LN95@GetOptimum
; Line 1160
	mov	eax, DWORD PTR _offs$81105[ebp]
	add	eax, 2
	mov	DWORD PTR _offs$81105[ebp], eax
; Line 1161
	mov	ecx, DWORD PTR _offs$81105[ebp]
	cmp	ecx, DWORD PTR _numPairs$[ebp]
	jne	SHORT $LN95@GetOptimum
; Line 1162
	jmp	SHORT $LN104@GetOptimum
$LN95@GetOptimum:
; Line 1164
	jmp	$LN100@GetOptimum
$LN104@GetOptimum:
; Line 1167
	mov	DWORD PTR _cur$[ebp], 0
$LN93@GetOptimum:
; Line 1189
	mov	edx, DWORD PTR _cur$[ebp]
	add	edx, 1
	mov	DWORD PTR _cur$[ebp], edx
; Line 1190
	mov	eax, DWORD PTR _cur$[ebp]
	cmp	eax, DWORD PTR _lenEnd$[ebp]
	jne	SHORT $LN91@GetOptimum
; Line 1191
	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	mov	edx, DWORD PTR _backRes$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_Backward@12
	jmp	$LN139@GetOptimum
$LN91@GetOptimum:
; Line 1193
	lea	ecx, DWORD PTR _numPairs$81130[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_ReadMatchDistances@8
	mov	DWORD PTR _newLen$81129[ebp], eax
; Line 1194
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _newLen$81129[ebp]
	cmp	ecx, DWORD PTR [eax+44]
	jb	SHORT $LN90@GetOptimum
; Line 1196
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _numPairs$81130[ebp]
	mov	DWORD PTR [edx+36], eax
; Line 1197
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _newLen$81129[ebp]
	mov	DWORD PTR [ecx+32], edx
; Line 1198
	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	mov	ecx, DWORD PTR _backRes$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_Backward@12
	jmp	$LN139@GetOptimum
$LN90@GetOptimum:
; Line 1200
	mov	eax, DWORD PTR _position$[ebp]
	add	eax, 1
	mov	DWORD PTR _position$[ebp], eax
; Line 1201
	mov	ecx, DWORD PTR _cur$[ebp]
	imul	ecx, 48					; 00000030H
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx+1844]
	mov	DWORD PTR _curOpt$81143[ebp], eax
; Line 1202
	mov	ecx, DWORD PTR _curOpt$81143[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _posPrev$81131[ebp], edx
; Line 1203
	mov	eax, DWORD PTR _curOpt$81143[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	$LN89@GetOptimum
; Line 1205
	mov	ecx, DWORD PTR _posPrev$81131[ebp]
	sub	ecx, 1
	mov	DWORD PTR _posPrev$81131[ebp], ecx
; Line 1206
	mov	edx, DWORD PTR _curOpt$81143[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN88@GetOptimum
; Line 1208
	mov	eax, DWORD PTR _curOpt$81143[ebp]
	mov	ecx, DWORD PTR [eax+16]
	imul	ecx, 48					; 00000030H
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+ecx+1848]
	mov	DWORD PTR _state$81132[ebp], eax
; Line 1209
	mov	ecx, DWORD PTR _curOpt$81143[ebp]
	cmp	DWORD PTR [ecx+20], 4
	jae	SHORT $LN87@GetOptimum
; Line 1210
	mov	edx, DWORD PTR _state$81132[ebp]
	mov	eax, DWORD PTR _kRepNextStates[edx*4]
	mov	DWORD PTR _state$81132[ebp], eax
; Line 1211
	jmp	SHORT $LN86@GetOptimum
$LN87@GetOptimum:
; Line 1212
	mov	ecx, DWORD PTR _state$81132[ebp]
	mov	edx, DWORD PTR _kMatchNextStates[ecx*4]
	mov	DWORD PTR _state$81132[ebp], edx
$LN86@GetOptimum:
; Line 1214
	jmp	SHORT $LN85@GetOptimum
$LN88@GetOptimum:
; Line 1215
	mov	eax, DWORD PTR _posPrev$81131[ebp]
	imul	eax, 48					; 00000030H
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+eax+1848]
	mov	DWORD PTR _state$81132[ebp], edx
$LN85@GetOptimum:
; Line 1216
	mov	eax, DWORD PTR _state$81132[ebp]
	mov	ecx, DWORD PTR _kLiteralNextStates[eax*4]
	mov	DWORD PTR _state$81132[ebp], ecx
; Line 1218
	jmp	SHORT $LN84@GetOptimum
$LN89@GetOptimum:
; Line 1219
	mov	edx, DWORD PTR _posPrev$81131[ebp]
	imul	edx, 48					; 00000030H
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+edx+1848]
	mov	DWORD PTR _state$81132[ebp], ecx
$LN84@GetOptimum:
; Line 1220
	mov	edx, DWORD PTR _cur$[ebp]
	sub	edx, 1
	cmp	DWORD PTR _posPrev$81131[ebp], edx
	jne	SHORT $LN83@GetOptimum
; Line 1222
	mov	eax, DWORD PTR _curOpt$81143[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN82@GetOptimum
; Line 1223
	mov	ecx, DWORD PTR _state$81132[ebp]
	mov	edx, DWORD PTR _kShortRepNextStates[ecx*4]
	mov	DWORD PTR _state$81132[ebp], edx
; Line 1224
	jmp	SHORT $LN81@GetOptimum
$LN82@GetOptimum:
; Line 1225
	mov	eax, DWORD PTR _state$81132[ebp]
	mov	ecx, DWORD PTR _kLiteralNextStates[eax*4]
	mov	DWORD PTR _state$81132[ebp], ecx
$LN81@GetOptimum:
; Line 1227
	jmp	$LN80@GetOptimum
$LN83@GetOptimum:
; Line 1231
	mov	edx, DWORD PTR _curOpt$81143[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN79@GetOptimum
	mov	eax, DWORD PTR _curOpt$81143[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN79@GetOptimum
; Line 1233
	mov	ecx, DWORD PTR _curOpt$81143[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _posPrev$81131[ebp], edx
; Line 1234
	mov	eax, DWORD PTR _curOpt$81143[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _pos$81157[ebp], ecx
; Line 1235
	mov	edx, DWORD PTR _state$81132[ebp]
	mov	eax, DWORD PTR _kRepNextStates[edx*4]
	mov	DWORD PTR _state$81132[ebp], eax
; Line 1237
	jmp	SHORT $LN78@GetOptimum
$LN79@GetOptimum:
; Line 1239
	mov	ecx, DWORD PTR _curOpt$81143[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _pos$81157[ebp], edx
; Line 1240
	cmp	DWORD PTR _pos$81157[ebp], 4
	jae	SHORT $LN77@GetOptimum
; Line 1241
	mov	eax, DWORD PTR _state$81132[ebp]
	mov	ecx, DWORD PTR _kRepNextStates[eax*4]
	mov	DWORD PTR _state$81132[ebp], ecx
; Line 1242
	jmp	SHORT $LN78@GetOptimum
$LN77@GetOptimum:
; Line 1243
	mov	edx, DWORD PTR _state$81132[ebp]
	mov	eax, DWORD PTR _kMatchNextStates[edx*4]
	mov	DWORD PTR _state$81132[ebp], eax
$LN78@GetOptimum:
; Line 1245
	mov	ecx, DWORD PTR _posPrev$81131[ebp]
	imul	ecx, 48					; 00000030H
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx+1844]
	mov	DWORD PTR _prevOpt$81158[ebp], eax
; Line 1246
	cmp	DWORD PTR _pos$81157[ebp], 4
	jae	$LN75@GetOptimum
; Line 1249
	mov	ecx, DWORD PTR _pos$81157[ebp]
	mov	edx, DWORD PTR _prevOpt$81158[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+32]
	mov	DWORD PTR _reps$[ebp], eax
; Line 1250
	mov	DWORD PTR _i$81164[ebp], 1
	jmp	SHORT $LN74@GetOptimum
$LN73@GetOptimum:
	mov	ecx, DWORD PTR _i$81164[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$81164[ebp], ecx
$LN74@GetOptimum:
	mov	edx, DWORD PTR _i$81164[ebp]
	cmp	edx, DWORD PTR _pos$81157[ebp]
	ja	SHORT $LN72@GetOptimum
; Line 1251
	mov	eax, DWORD PTR _i$81164[ebp]
	mov	ecx, DWORD PTR _i$81164[ebp]
	mov	edx, DWORD PTR _prevOpt$81158[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4+28]
	mov	DWORD PTR _reps$[ebp+eax*4], ecx
	jmp	SHORT $LN73@GetOptimum
$LN72@GetOptimum:
; Line 1252
	jmp	SHORT $LN71@GetOptimum
$LN70@GetOptimum:
	mov	edx, DWORD PTR _i$81164[ebp]
	add	edx, 1
	mov	DWORD PTR _i$81164[ebp], edx
$LN71@GetOptimum:
	cmp	DWORD PTR _i$81164[ebp], 4
	jae	SHORT $LN69@GetOptimum
; Line 1253
	mov	eax, DWORD PTR _i$81164[ebp]
	mov	ecx, DWORD PTR _i$81164[ebp]
	mov	edx, DWORD PTR _prevOpt$81158[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4+32]
	mov	DWORD PTR _reps$[ebp+eax*4], ecx
	jmp	SHORT $LN70@GetOptimum
$LN69@GetOptimum:
; Line 1255
	jmp	SHORT $LN80@GetOptimum
$LN75@GetOptimum:
; Line 1258
	mov	edx, DWORD PTR _pos$81157[ebp]
	sub	edx, 4
	mov	DWORD PTR _reps$[ebp], edx
; Line 1259
	mov	DWORD PTR _i$81172[ebp], 1
	jmp	SHORT $LN67@GetOptimum
$LN66@GetOptimum:
	mov	eax, DWORD PTR _i$81172[ebp]
	add	eax, 1
	mov	DWORD PTR _i$81172[ebp], eax
$LN67@GetOptimum:
	cmp	DWORD PTR _i$81172[ebp], 4
	jae	SHORT $LN80@GetOptimum
; Line 1260
	mov	ecx, DWORD PTR _i$81172[ebp]
	mov	edx, DWORD PTR _i$81172[ebp]
	mov	eax, DWORD PTR _prevOpt$81158[ebp]
	mov	edx, DWORD PTR [eax+edx*4+28]
	mov	DWORD PTR _reps$[ebp+ecx*4], edx
	jmp	SHORT $LN66@GetOptimum
$LN80@GetOptimum:
; Line 1263
	mov	eax, DWORD PTR _curOpt$81143[ebp]
	mov	ecx, DWORD PTR _state$81132[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 1265
	mov	edx, DWORD PTR _curOpt$81143[ebp]
	mov	eax, DWORD PTR _reps$[ebp]
	mov	DWORD PTR [edx+32], eax
; Line 1266
	mov	ecx, DWORD PTR _curOpt$81143[ebp]
	mov	edx, DWORD PTR _reps$[ebp+4]
	mov	DWORD PTR [ecx+36], edx
; Line 1267
	mov	eax, DWORD PTR _curOpt$81143[ebp]
	mov	ecx, DWORD PTR _reps$[ebp+8]
	mov	DWORD PTR [eax+40], ecx
; Line 1268
	mov	edx, DWORD PTR _curOpt$81143[ebp]
	mov	eax, DWORD PTR _reps$[ebp+12]
	mov	DWORD PTR [edx+44], eax
; Line 1270
	mov	ecx, DWORD PTR _curOpt$81143[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _curPrice$81135[ebp], edx
; Line 1271
	mov	DWORD PTR _nextIsChar$81139[ebp], 0
; Line 1272
	mov	esi, esp
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	sub	eax, 1
	mov	DWORD PTR _data$81142[ebp], eax
; Line 1273
	mov	ecx, DWORD PTR _data$81142[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _curByte$81140[ebp], dl
; Line 1274
	mov	eax, DWORD PTR _reps$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _data$81142[ebp]
	sub	ecx, eax
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _matchByte$81141[ebp], dl
; Line 1276
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _position$[ebp]
	and	ecx, DWORD PTR [eax+88]
	mov	DWORD PTR _posState$81133[ebp], ecx
; Line 1278
	mov	edx, DWORD PTR _state$81132[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR _p$[ebp]
	lea	ecx, DWORD PTR [eax+edx+206344]
	mov	edx, DWORD PTR _posState$81133[ebp]
	movzx	eax, WORD PTR [ecx+edx*2]
	sar	eax, 4
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _curPrice$81135[ebp]
	add	edx, DWORD PTR [ecx+eax*4+200500]
	mov	DWORD PTR _curAnd1Price$81136[ebp], edx
; Line 1280
	mov	eax, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _position$[ebp]
	and	edx, DWORD PTR [eax+84]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	shl	edx, cl
	mov	ecx, DWORD PTR _data$81142[ebp]
	movzx	eax, BYTE PTR [ecx-1]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	esi, 8
	sub	esi, DWORD PTR [ecx+72]
	mov	ecx, esi
	sar	eax, cl
	add	edx, eax
	imul	edx, 768				; 00000300H
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	lea	edx, DWORD PTR [ecx+edx*2]
	mov	DWORD PTR _probs$81177[ebp], edx
; Line 1284
	cmp	DWORD PTR _state$81132[ebp], 7
	jb	SHORT $LN149@GetOptimum
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 200500				; 00030f34H
	push	eax
	movzx	ecx, BYTE PTR _matchByte$81141[ebp]
	push	ecx
	movzx	edx, BYTE PTR _curByte$81140[ebp]
	push	edx
	mov	eax, DWORD PTR _probs$81177[ebp]
	push	eax
	call	_LitEnc_GetPriceMatched@16
	mov	DWORD PTR tv608[ebp], eax
	jmp	SHORT $LN150@GetOptimum
$LN149@GetOptimum:
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 200500				; 00030f34H
	push	ecx
	movzx	edx, BYTE PTR _curByte$81140[ebp]
	push	edx
	mov	eax, DWORD PTR _probs$81177[ebp]
	push	eax
	call	_LitEnc_GetPrice@12
	mov	DWORD PTR tv608[ebp], eax
$LN150@GetOptimum:
	mov	ecx, DWORD PTR _curAnd1Price$81136[ebp]
	add	ecx, DWORD PTR tv608[ebp]
	mov	DWORD PTR _curAnd1Price$81136[ebp], ecx
; Line 1287
	mov	edx, DWORD PTR _cur$[ebp]
	add	edx, 1
	imul	edx, 48					; 00000030H
	mov	eax, DWORD PTR _p$[ebp]
	lea	ecx, DWORD PTR [eax+edx+1844]
	mov	DWORD PTR _nextOpt$81144[ebp], ecx
; Line 1289
	mov	edx, DWORD PTR _nextOpt$81144[ebp]
	mov	eax, DWORD PTR _curAnd1Price$81136[ebp]
	cmp	eax, DWORD PTR [edx]
	jae	SHORT $LN64@GetOptimum
; Line 1291
	mov	ecx, DWORD PTR _nextOpt$81144[ebp]
	mov	edx, DWORD PTR _curAnd1Price$81136[ebp]
	mov	DWORD PTR [ecx], edx
; Line 1292
	mov	eax, DWORD PTR _nextOpt$81144[ebp]
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [eax+24], ecx
; Line 1293
	mov	edx, DWORD PTR _nextOpt$81144[ebp]
	mov	DWORD PTR [edx+28], -1
	mov	eax, DWORD PTR _nextOpt$81144[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 1294
	mov	DWORD PTR _nextIsChar$81139[ebp], 1
$LN64@GetOptimum:
; Line 1297
	mov	ecx, DWORD PTR _state$81132[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx+206344]
	mov	ecx, DWORD PTR _posState$81133[ebp]
	movzx	edx, WORD PTR [eax+ecx*2]
	xor	edx, 2047				; 000007ffH
	sar	edx, 4
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _curPrice$81135[ebp]
	add	ecx, DWORD PTR [eax+edx*4+200500]
	mov	DWORD PTR _matchPrice$81137[ebp], ecx
; Line 1298
	mov	edx, DWORD PTR _state$81132[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, WORD PTR [eax+edx*2+206728]
	xor	ecx, 2047				; 000007ffH
	sar	ecx, 4
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _matchPrice$81137[ebp]
	add	eax, DWORD PTR [edx+ecx*4+200500]
	mov	DWORD PTR _repMatchPrice$81138[ebp], eax
; Line 1300
	movzx	ecx, BYTE PTR _matchByte$81141[ebp]
	movzx	edx, BYTE PTR _curByte$81140[ebp]
	cmp	ecx, edx
	jne	$LN63@GetOptimum
	mov	eax, DWORD PTR _nextOpt$81144[ebp]
	mov	ecx, DWORD PTR [eax+24]
	cmp	ecx, DWORD PTR _cur$[ebp]
	jae	SHORT $LN62@GetOptimum
	mov	edx, DWORD PTR _nextOpt$81144[ebp]
	cmp	DWORD PTR [edx+28], 0
	je	SHORT $LN63@GetOptimum
$LN62@GetOptimum:
; Line 1302
	mov	eax, DWORD PTR _posState$81133[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$81132[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_GetRepLen1Price@12
	add	eax, DWORD PTR _repMatchPrice$81138[ebp]
	mov	DWORD PTR _shortRepPrice$81183[ebp], eax
; Line 1303
	mov	eax, DWORD PTR _nextOpt$81144[ebp]
	mov	ecx, DWORD PTR _shortRepPrice$81183[ebp]
	cmp	ecx, DWORD PTR [eax]
	ja	SHORT $LN63@GetOptimum
; Line 1305
	mov	edx, DWORD PTR _nextOpt$81144[ebp]
	mov	eax, DWORD PTR _shortRepPrice$81183[ebp]
	mov	DWORD PTR [edx], eax
; Line 1306
	mov	ecx, DWORD PTR _nextOpt$81144[ebp]
	mov	edx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [ecx+24], edx
; Line 1307
	mov	eax, DWORD PTR _nextOpt$81144[ebp]
	mov	DWORD PTR [eax+28], 0
	mov	ecx, DWORD PTR _nextOpt$81144[ebp]
	mov	DWORD PTR [ecx+8], 0
; Line 1308
	mov	DWORD PTR _nextIsChar$81139[ebp], 1
$LN63@GetOptimum:
; Line 1311
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR _numAvailFull$81128[ebp], eax
; Line 1313
	mov	ecx, 4095				; 00000fffH
	sub	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR _temp$81185[ebp], ecx
; Line 1314
	mov	edx, DWORD PTR _temp$81185[ebp]
	cmp	edx, DWORD PTR _numAvailFull$81128[ebp]
	jae	SHORT $LN60@GetOptimum
; Line 1315
	mov	eax, DWORD PTR _temp$81185[ebp]
	mov	DWORD PTR _numAvailFull$81128[ebp], eax
$LN60@GetOptimum:
; Line 1318
	cmp	DWORD PTR _numAvailFull$81128[ebp], 2
	jae	SHORT $LN59@GetOptimum
; Line 1319
	jmp	$LN93@GetOptimum
$LN59@GetOptimum:
; Line 1320
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _numAvailFull$81128[ebp]
	cmp	edx, DWORD PTR [ecx+44]
	ja	SHORT $LN151@GetOptimum
	mov	eax, DWORD PTR _numAvailFull$81128[ebp]
	mov	DWORD PTR tv695[ebp], eax
	jmp	SHORT $LN152@GetOptimum
$LN151@GetOptimum:
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR tv695[ebp], edx
$LN152@GetOptimum:
	mov	eax, DWORD PTR tv695[ebp]
	mov	DWORD PTR _numAvail$[ebp], eax
; Line 1322
	cmp	DWORD PTR _nextIsChar$81139[ebp], 0
	jne	$LN58@GetOptimum
	movzx	ecx, BYTE PTR _matchByte$81141[ebp]
	movzx	edx, BYTE PTR _curByte$81140[ebp]
	cmp	ecx, edx
	je	$LN58@GetOptimum
; Line 1327
	mov	eax, DWORD PTR _data$81142[ebp]
	sub	eax, DWORD PTR _reps$[ebp]
	sub	eax, 1
	mov	DWORD PTR _data2$81191[ebp], eax
; Line 1328
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	add	edx, 1
	mov	DWORD PTR _limit$81192[ebp], edx
; Line 1329
	mov	eax, DWORD PTR _limit$81192[ebp]
	cmp	eax, DWORD PTR _numAvailFull$81128[ebp]
	jbe	SHORT $LN57@GetOptimum
; Line 1330
	mov	ecx, DWORD PTR _numAvailFull$81128[ebp]
	mov	DWORD PTR _limit$81192[ebp], ecx
$LN57@GetOptimum:
; Line 1332
	mov	DWORD PTR _temp$81189[ebp], 1
	jmp	SHORT $LN56@GetOptimum
$LN55@GetOptimum:
	mov	edx, DWORD PTR _temp$81189[ebp]
	add	edx, 1
	mov	DWORD PTR _temp$81189[ebp], edx
$LN56@GetOptimum:
	mov	eax, DWORD PTR _temp$81189[ebp]
	cmp	eax, DWORD PTR _limit$81192[ebp]
	jae	SHORT $LN54@GetOptimum
	mov	ecx, DWORD PTR _data$81142[ebp]
	add	ecx, DWORD PTR _temp$81189[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _data2$81191[ebp]
	add	eax, DWORD PTR _temp$81189[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	edx, ecx
	jne	SHORT $LN54@GetOptimum
	jmp	SHORT $LN55@GetOptimum
$LN54@GetOptimum:
; Line 1333
	mov	edx, DWORD PTR _temp$81189[ebp]
	sub	edx, 1
	mov	DWORD PTR _lenTest2$81190[ebp], edx
; Line 1334
	cmp	DWORD PTR _lenTest2$81190[ebp], 2
	jb	$LN58@GetOptimum
; Line 1336
	mov	eax, DWORD PTR _state$81132[ebp]
	mov	ecx, DWORD PTR _kLiteralNextStates[eax*4]
	mov	DWORD PTR _state2$81198[ebp], ecx
; Line 1337
	mov	edx, DWORD PTR _position$[ebp]
	add	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	and	edx, DWORD PTR [eax+88]
	mov	DWORD PTR _posStateNext$81199[ebp], edx
; Line 1340
	mov	ecx, DWORD PTR _state2$81198[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx+206344]
	mov	ecx, DWORD PTR _posStateNext$81199[ebp]
	movzx	edx, WORD PTR [eax+ecx*2]
	xor	edx, 2047				; 000007ffH
	sar	edx, 4
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _curAnd1Price$81136[ebp]
	add	ecx, DWORD PTR [eax+edx*4+200500]
	mov	edx, DWORD PTR _state2$81198[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, WORD PTR [eax+edx*2+206728]
	xor	edx, 2047				; 000007ffH
	sar	edx, 4
	mov	eax, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR [eax+edx*4+200500]
	mov	DWORD PTR _nextRepMatchPrice$81200[ebp], ecx
; Line 1345
	mov	ecx, DWORD PTR _lenTest2$81190[ebp]
	mov	edx, DWORD PTR _cur$[ebp]
	lea	eax, DWORD PTR [edx+ecx+1]
	mov	DWORD PTR _offset$81203[ebp], eax
$LN52@GetOptimum:
; Line 1346
	mov	ecx, DWORD PTR _lenEnd$[ebp]
	cmp	ecx, DWORD PTR _offset$81203[ebp]
	jae	SHORT $LN51@GetOptimum
; Line 1347
	mov	edx, DWORD PTR _lenEnd$[ebp]
	add	edx, 1
	mov	DWORD PTR _lenEnd$[ebp], edx
	mov	eax, DWORD PTR _lenEnd$[ebp]
	imul	eax, 48					; 00000030H
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+eax+1844], 1073741824	; 40000000H
	jmp	SHORT $LN52@GetOptimum
$LN51@GetOptimum:
; Line 1348
	mov	edx, DWORD PTR _posStateNext$81199[ebp]
	push	edx
	mov	eax, DWORD PTR _state2$81198[ebp]
	push	eax
	mov	ecx, DWORD PTR _lenTest2$81190[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_GetRepPrice@20
	add	eax, DWORD PTR _nextRepMatchPrice$81200[ebp]
	mov	DWORD PTR _curAndLenPrice$81201[ebp], eax
; Line 1349
	mov	eax, DWORD PTR _offset$81203[ebp]
	imul	eax, 48					; 00000030H
	mov	ecx, DWORD PTR _p$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1844]
	mov	DWORD PTR _opt$81202[ebp], edx
; Line 1350
	mov	eax, DWORD PTR _opt$81202[ebp]
	mov	ecx, DWORD PTR _curAndLenPrice$81201[ebp]
	cmp	ecx, DWORD PTR [eax]
	jae	SHORT $LN58@GetOptimum
; Line 1352
	mov	edx, DWORD PTR _opt$81202[ebp]
	mov	eax, DWORD PTR _curAndLenPrice$81201[ebp]
	mov	DWORD PTR [edx], eax
; Line 1353
	mov	ecx, DWORD PTR _cur$[ebp]
	add	ecx, 1
	mov	edx, DWORD PTR _opt$81202[ebp]
	mov	DWORD PTR [edx+24], ecx
; Line 1354
	mov	eax, DWORD PTR _opt$81202[ebp]
	mov	DWORD PTR [eax+28], 0
; Line 1355
	mov	ecx, DWORD PTR _opt$81202[ebp]
	mov	DWORD PTR [ecx+8], 1
; Line 1356
	mov	edx, DWORD PTR _opt$81202[ebp]
	mov	DWORD PTR [edx+12], 0
$LN58@GetOptimum:
; Line 1362
	mov	DWORD PTR _startLen$81134[ebp], 2
; Line 1365
	mov	DWORD PTR _repIndex$81208[ebp], 0
	jmp	SHORT $LN49@GetOptimum
$LN48@GetOptimum:
	mov	eax, DWORD PTR _repIndex$81208[ebp]
	add	eax, 1
	mov	DWORD PTR _repIndex$81208[ebp], eax
$LN49@GetOptimum:
	cmp	DWORD PTR _repIndex$81208[ebp], 4
	jae	$LN47@GetOptimum
; Line 1370
	mov	ecx, DWORD PTR _repIndex$81208[ebp]
	mov	edx, DWORD PTR _data$81142[ebp]
	sub	edx, DWORD PTR _reps$[ebp+ecx*4]
	sub	edx, 1
	mov	DWORD PTR _data2$81215[ebp], edx
; Line 1371
	mov	eax, DWORD PTR _data$81142[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _data2$81215[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	ecx, eax
	jne	SHORT $LN45@GetOptimum
	mov	ecx, DWORD PTR _data$81142[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	mov	eax, DWORD PTR _data2$81215[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	cmp	edx, ecx
	je	SHORT $LN46@GetOptimum
$LN45@GetOptimum:
; Line 1372
	jmp	SHORT $LN48@GetOptimum
$LN46@GetOptimum:
; Line 1373
	mov	DWORD PTR _lenTest$81212[ebp], 2
	jmp	SHORT $LN44@GetOptimum
$LN43@GetOptimum:
	mov	edx, DWORD PTR _lenTest$81212[ebp]
	add	edx, 1
	mov	DWORD PTR _lenTest$81212[ebp], edx
$LN44@GetOptimum:
	mov	eax, DWORD PTR _lenTest$81212[ebp]
	cmp	eax, DWORD PTR _numAvail$[ebp]
	jae	SHORT $LN41@GetOptimum
	mov	ecx, DWORD PTR _data$81142[ebp]
	add	ecx, DWORD PTR _lenTest$81212[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _data2$81215[ebp]
	add	eax, DWORD PTR _lenTest$81212[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	edx, ecx
	jne	SHORT $LN41@GetOptimum
	jmp	SHORT $LN43@GetOptimum
$LN41@GetOptimum:
; Line 1374
	mov	edx, DWORD PTR _cur$[ebp]
	add	edx, DWORD PTR _lenTest$81212[ebp]
	cmp	DWORD PTR _lenEnd$[ebp], edx
	jae	SHORT $LN40@GetOptimum
; Line 1375
	mov	eax, DWORD PTR _lenEnd$[ebp]
	add	eax, 1
	mov	DWORD PTR _lenEnd$[ebp], eax
	mov	ecx, DWORD PTR _lenEnd$[ebp]
	imul	ecx, 48					; 00000030H
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+ecx+1844], 1073741824	; 40000000H
	jmp	SHORT $LN41@GetOptimum
$LN40@GetOptimum:
; Line 1376
	mov	eax, DWORD PTR _lenTest$81212[ebp]
	mov	DWORD PTR _lenTestTemp$81213[ebp], eax
; Line 1377
	mov	ecx, DWORD PTR _posState$81133[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$81132[ebp]
	push	edx
	mov	eax, DWORD PTR _repIndex$81208[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_GetPureRepPrice@16
	add	eax, DWORD PTR _repMatchPrice$81138[ebp]
	mov	DWORD PTR _price$81214[ebp], eax
$LN39@GetOptimum:
; Line 1380
	mov	edx, DWORD PTR _posState$81133[ebp]
	imul	edx, 1088				; 00000440H
	mov	eax, DWORD PTR _p$[ebp]
	lea	ecx, DWORD PTR [eax+edx+227516]
	mov	edx, DWORD PTR _lenTest$81212[ebp]
	mov	eax, DWORD PTR _price$81214[ebp]
	add	eax, DWORD PTR [ecx+edx*4-8]
	mov	DWORD PTR _curAndLenPrice$81227[ebp], eax
; Line 1381
	mov	ecx, DWORD PTR _cur$[ebp]
	add	ecx, DWORD PTR _lenTest$81212[ebp]
	imul	ecx, 48					; 00000030H
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx+1844]
	mov	DWORD PTR _opt$81228[ebp], eax
; Line 1382
	mov	ecx, DWORD PTR _opt$81228[ebp]
	mov	edx, DWORD PTR _curAndLenPrice$81227[ebp]
	cmp	edx, DWORD PTR [ecx]
	jae	SHORT $LN38@GetOptimum
; Line 1384
	mov	eax, DWORD PTR _opt$81228[ebp]
	mov	ecx, DWORD PTR _curAndLenPrice$81227[ebp]
	mov	DWORD PTR [eax], ecx
; Line 1385
	mov	edx, DWORD PTR _opt$81228[ebp]
	mov	eax, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [edx+24], eax
; Line 1386
	mov	ecx, DWORD PTR _opt$81228[ebp]
	mov	edx, DWORD PTR _repIndex$81208[ebp]
	mov	DWORD PTR [ecx+28], edx
; Line 1387
	mov	eax, DWORD PTR _opt$81228[ebp]
	mov	DWORD PTR [eax+8], 0
$LN38@GetOptimum:
; Line 1390
	mov	ecx, DWORD PTR _lenTest$81212[ebp]
	sub	ecx, 1
	mov	DWORD PTR _lenTest$81212[ebp], ecx
	cmp	DWORD PTR _lenTest$81212[ebp], 2
	jae	$LN39@GetOptimum
; Line 1391
	mov	edx, DWORD PTR _lenTestTemp$81213[ebp]
	mov	DWORD PTR _lenTest$81212[ebp], edx
; Line 1393
	cmp	DWORD PTR _repIndex$81208[ebp], 0
	jne	SHORT $LN35@GetOptimum
; Line 1394
	mov	eax, DWORD PTR _lenTest$81212[ebp]
	add	eax, 1
	mov	DWORD PTR _startLen$81134[ebp], eax
$LN35@GetOptimum:
; Line 1398
	mov	ecx, DWORD PTR _lenTest$81212[ebp]
	add	ecx, 1
	mov	DWORD PTR _lenTest2$81231[ebp], ecx
; Line 1399
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _lenTest2$81231[ebp]
	add	eax, DWORD PTR [edx+44]
	mov	DWORD PTR _limit$81232[ebp], eax
; Line 1401
	mov	ecx, DWORD PTR _limit$81232[ebp]
	cmp	ecx, DWORD PTR _numAvailFull$81128[ebp]
	jbe	SHORT $LN34@GetOptimum
; Line 1402
	mov	edx, DWORD PTR _numAvailFull$81128[ebp]
	mov	DWORD PTR _limit$81232[ebp], edx
$LN34@GetOptimum:
; Line 1403
	jmp	SHORT $LN33@GetOptimum
$LN32@GetOptimum:
	mov	eax, DWORD PTR _lenTest2$81231[ebp]
	add	eax, 1
	mov	DWORD PTR _lenTest2$81231[ebp], eax
$LN33@GetOptimum:
	mov	ecx, DWORD PTR _lenTest2$81231[ebp]
	cmp	ecx, DWORD PTR _limit$81232[ebp]
	jae	SHORT $LN31@GetOptimum
	mov	edx, DWORD PTR _data$81142[ebp]
	add	edx, DWORD PTR _lenTest2$81231[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _data2$81215[ebp]
	add	ecx, DWORD PTR _lenTest2$81231[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	eax, edx
	jne	SHORT $LN31@GetOptimum
	jmp	SHORT $LN32@GetOptimum
$LN31@GetOptimum:
; Line 1404
	mov	eax, DWORD PTR _lenTest$81212[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _lenTest2$81231[ebp]
	sub	ecx, eax
	mov	DWORD PTR _lenTest2$81231[ebp], ecx
; Line 1405
	cmp	DWORD PTR _lenTest2$81231[ebp], 2
	jb	$LN30@GetOptimum
; Line 1407
	mov	edx, DWORD PTR _state$81132[ebp]
	mov	eax, DWORD PTR _kRepNextStates[edx*4]
	mov	DWORD PTR _state2$81239[ebp], eax
; Line 1408
	mov	ecx, DWORD PTR _position$[ebp]
	add	ecx, DWORD PTR _lenTest$81212[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	and	ecx, DWORD PTR [edx+88]
	mov	DWORD PTR _posStateNext$81240[ebp], ecx
; Line 1413
	mov	eax, DWORD PTR _posState$81133[ebp]
	imul	eax, 1088				; 00000440H
	mov	ecx, DWORD PTR _p$[ebp]
	lea	edx, DWORD PTR [ecx+eax+227516]
	mov	eax, DWORD PTR _lenTest$81212[ebp]
	mov	esi, DWORD PTR _price$81214[ebp]
	add	esi, DWORD PTR [edx+eax*4-8]
	mov	ecx, DWORD PTR _state2$81239[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx+206344]
	mov	ecx, DWORD PTR _posStateNext$81240[ebp]
	movzx	edx, WORD PTR [eax+ecx*2]
	sar	edx, 4
	mov	eax, DWORD PTR _p$[ebp]
	add	esi, DWORD PTR [eax+edx*4+200500]
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 200500				; 00030f34H
	push	ecx
	mov	edx, DWORD PTR _data2$81215[ebp]
	add	edx, DWORD PTR _lenTest$81212[ebp]
	movzx	eax, BYTE PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _data$81142[ebp]
	add	ecx, DWORD PTR _lenTest$81212[ebp]
	movzx	edx, BYTE PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _position$[ebp]
	add	eax, DWORD PTR _lenTest$81212[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	and	eax, DWORD PTR [ecx+84]
	mov	edx, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [edx+72]
	shl	eax, cl
	mov	ecx, DWORD PTR _data$81142[ebp]
	add	ecx, DWORD PTR _lenTest$81212[ebp]
	movzx	edx, BYTE PTR [ecx-1]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edi, 8
	sub	edi, DWORD PTR [ecx+72]
	mov	ecx, edi
	sar	edx, cl
	add	eax, edx
	imul	eax, 768				; 00000300H
	mov	edx, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [edx+96]
	lea	edx, DWORD PTR [ecx+eax*2]
	push	edx
	call	_LitEnc_GetPriceMatched@16
	add	esi, eax
	mov	DWORD PTR _curAndLenCharPrice$81241[ebp], esi
; Line 1414
	mov	eax, DWORD PTR _state2$81239[ebp]
	mov	ecx, DWORD PTR _kLiteralNextStates[eax*4]
	mov	DWORD PTR _state2$81239[ebp], ecx
; Line 1415
	mov	edx, DWORD PTR _lenTest$81212[ebp]
	mov	eax, DWORD PTR _position$[ebp]
	lea	ecx, DWORD PTR [eax+edx+1]
	mov	edx, DWORD PTR _p$[ebp]
	and	ecx, DWORD PTR [edx+88]
	mov	DWORD PTR _posStateNext$81240[ebp], ecx
; Line 1418
	mov	eax, DWORD PTR _state2$81239[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _p$[ebp]
	lea	edx, DWORD PTR [ecx+eax+206344]
	mov	eax, DWORD PTR _posStateNext$81240[ebp]
	movzx	ecx, WORD PTR [edx+eax*2]
	xor	ecx, 2047				; 000007ffH
	sar	ecx, 4
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _curAndLenCharPrice$81241[ebp]
	add	eax, DWORD PTR [edx+ecx*4+200500]
	mov	ecx, DWORD PTR _state2$81239[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	movzx	ecx, WORD PTR [edx+ecx*2+206728]
	xor	ecx, 2047				; 000007ffH
	sar	ecx, 4
	mov	edx, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR [edx+ecx*4+200500]
	mov	DWORD PTR _nextRepMatchPrice$81233[ebp], eax
; Line 1424
	mov	eax, DWORD PTR _cur$[ebp]
	add	eax, DWORD PTR _lenTest$81212[ebp]
	mov	ecx, DWORD PTR _lenTest2$81231[ebp]
	lea	edx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _offset$81245[ebp], edx
$LN29@GetOptimum:
; Line 1425
	mov	eax, DWORD PTR _lenEnd$[ebp]
	cmp	eax, DWORD PTR _offset$81245[ebp]
	jae	SHORT $LN28@GetOptimum
; Line 1426
	mov	ecx, DWORD PTR _lenEnd$[ebp]
	add	ecx, 1
	mov	DWORD PTR _lenEnd$[ebp], ecx
	mov	edx, DWORD PTR _lenEnd$[ebp]
	imul	edx, 48					; 00000030H
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+edx+1844], 1073741824	; 40000000H
	jmp	SHORT $LN29@GetOptimum
$LN28@GetOptimum:
; Line 1427
	mov	ecx, DWORD PTR _posStateNext$81240[ebp]
	push	ecx
	mov	edx, DWORD PTR _state2$81239[ebp]
	push	edx
	mov	eax, DWORD PTR _lenTest2$81231[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_GetRepPrice@20
	add	eax, DWORD PTR _nextRepMatchPrice$81233[ebp]
	mov	DWORD PTR _curAndLenPrice$81243[ebp], eax
; Line 1428
	mov	edx, DWORD PTR _offset$81245[ebp]
	imul	edx, 48					; 00000030H
	mov	eax, DWORD PTR _p$[ebp]
	lea	ecx, DWORD PTR [eax+edx+1844]
	mov	DWORD PTR _opt$81244[ebp], ecx
; Line 1429
	mov	edx, DWORD PTR _opt$81244[ebp]
	mov	eax, DWORD PTR _curAndLenPrice$81243[ebp]
	cmp	eax, DWORD PTR [edx]
	jae	SHORT $LN30@GetOptimum
; Line 1431
	mov	ecx, DWORD PTR _opt$81244[ebp]
	mov	edx, DWORD PTR _curAndLenPrice$81243[ebp]
	mov	DWORD PTR [ecx], edx
; Line 1432
	mov	eax, DWORD PTR _lenTest$81212[ebp]
	mov	ecx, DWORD PTR _cur$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	mov	eax, DWORD PTR _opt$81244[ebp]
	mov	DWORD PTR [eax+24], edx
; Line 1433
	mov	ecx, DWORD PTR _opt$81244[ebp]
	mov	DWORD PTR [ecx+28], 0
; Line 1434
	mov	edx, DWORD PTR _opt$81244[ebp]
	mov	DWORD PTR [edx+8], 1
; Line 1435
	mov	eax, DWORD PTR _opt$81244[ebp]
	mov	DWORD PTR [eax+12], 1
; Line 1436
	mov	ecx, DWORD PTR _opt$81244[ebp]
	mov	edx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [ecx+16], edx
; Line 1437
	mov	eax, DWORD PTR _opt$81244[ebp]
	mov	ecx, DWORD PTR _repIndex$81208[ebp]
	mov	DWORD PTR [eax+20], ecx
$LN30@GetOptimum:
; Line 1442
	jmp	$LN48@GetOptimum
$LN47@GetOptimum:
; Line 1445
	mov	edx, DWORD PTR _newLen$81129[ebp]
	cmp	edx, DWORD PTR _numAvail$[ebp]
	jbe	SHORT $LN26@GetOptimum
; Line 1447
	mov	eax, DWORD PTR _numAvail$[ebp]
	mov	DWORD PTR _newLen$81129[ebp], eax
; Line 1448
	mov	DWORD PTR _numPairs$81130[ebp], 0
	jmp	SHORT $LN25@GetOptimum
$LN24@GetOptimum:
	mov	ecx, DWORD PTR _numPairs$81130[ebp]
	add	ecx, 2
	mov	DWORD PTR _numPairs$81130[ebp], ecx
$LN25@GetOptimum:
	mov	edx, DWORD PTR _numPairs$81130[ebp]
	mov	eax, DWORD PTR _matches$[ebp]
	mov	ecx, DWORD PTR _newLen$81129[ebp]
	cmp	ecx, DWORD PTR [eax+edx*4]
	jbe	SHORT $LN23@GetOptimum
	jmp	SHORT $LN24@GetOptimum
$LN23@GetOptimum:
; Line 1449
	mov	edx, DWORD PTR _numPairs$81130[ebp]
	mov	eax, DWORD PTR _matches$[ebp]
	mov	ecx, DWORD PTR _newLen$81129[ebp]
	mov	DWORD PTR [eax+edx*4], ecx
; Line 1450
	mov	edx, DWORD PTR _numPairs$81130[ebp]
	add	edx, 2
	mov	DWORD PTR _numPairs$81130[ebp], edx
$LN26@GetOptimum:
; Line 1452
	mov	eax, DWORD PTR _newLen$81129[ebp]
	cmp	eax, DWORD PTR _startLen$81134[ebp]
	jb	$LN22@GetOptimum
; Line 1454
	mov	ecx, DWORD PTR _state$81132[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, WORD PTR [edx+ecx*2+206728]
	sar	eax, 4
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _matchPrice$81137[ebp]
	add	edx, DWORD PTR [ecx+eax*4+200500]
	mov	DWORD PTR _normalMatchPrice$81255[ebp], edx
$LN21@GetOptimum:
; Line 1457
	mov	eax, DWORD PTR _cur$[ebp]
	add	eax, DWORD PTR _newLen$81129[ebp]
	cmp	DWORD PTR _lenEnd$[ebp], eax
	jae	SHORT $LN20@GetOptimum
; Line 1458
	mov	ecx, DWORD PTR _lenEnd$[ebp]
	add	ecx, 1
	mov	DWORD PTR _lenEnd$[ebp], ecx
	mov	edx, DWORD PTR _lenEnd$[ebp]
	imul	edx, 48					; 00000030H
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+edx+1844], 1073741824	; 40000000H
	jmp	SHORT $LN21@GetOptimum
$LN20@GetOptimum:
; Line 1460
	mov	DWORD PTR _offs$81256[ebp], 0
$LN19@GetOptimum:
; Line 1461
	mov	ecx, DWORD PTR _offs$81256[ebp]
	mov	edx, DWORD PTR _matches$[ebp]
	mov	eax, DWORD PTR _startLen$81134[ebp]
	cmp	eax, DWORD PTR [edx+ecx*4]
	jbe	SHORT $LN18@GetOptimum
; Line 1462
	mov	ecx, DWORD PTR _offs$81256[ebp]
	add	ecx, 2
	mov	DWORD PTR _offs$81256[ebp], ecx
	jmp	SHORT $LN19@GetOptimum
$LN18@GetOptimum:
; Line 1463
	mov	edx, DWORD PTR _offs$81256[ebp]
	mov	eax, DWORD PTR _matches$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+4]
	mov	DWORD PTR _curBack$81257[ebp], ecx
; Line 1464
	cmp	DWORD PTR _curBack$81257[ebp], 131072	; 00020000H
	sbb	edx, edx
	and	edx, -10				; fffffff6H
	add	edx, 16					; 00000010H
	mov	DWORD PTR _i$81266[ebp], edx
	mov	eax, DWORD PTR _curBack$81257[ebp]
	mov	ecx, DWORD PTR _i$81266[ebp]
	shr	eax, cl
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+198452]
	mov	eax, DWORD PTR _i$81266[ebp]
	lea	ecx, DWORD PTR [edx+eax*2]
	mov	DWORD PTR _posSlot$81258[ebp], ecx
; Line 1465
	mov	edx, DWORD PTR _startLen$81134[ebp]
	mov	DWORD PTR _lenTest$81259[ebp], edx
	jmp	SHORT $LN17@GetOptimum
$LN16@GetOptimum:
	mov	eax, DWORD PTR _lenTest$81259[ebp]
	add	eax, 1
	mov	DWORD PTR _lenTest$81259[ebp], eax
$LN17@GetOptimum:
; Line 1467
	mov	ecx, DWORD PTR _posState$81133[ebp]
	imul	ecx, 1088				; 00000440H
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx+209012]
	mov	ecx, DWORD PTR _lenTest$81259[ebp]
	mov	edx, DWORD PTR _normalMatchPrice$81255[ebp]
	add	edx, DWORD PTR [eax+ecx*4-8]
	mov	DWORD PTR _curAndLenPrice$81272[ebp], edx
; Line 1468
	cmp	DWORD PTR _lenTest$81259[ebp], 5
	jae	SHORT $LN153@GetOptimum
	mov	eax, DWORD PTR _lenTest$81259[ebp]
	sub	eax, 2
	mov	DWORD PTR tv1016[ebp], eax
	jmp	SHORT $LN154@GetOptimum
$LN153@GetOptimum:
	mov	DWORD PTR tv1016[ebp], 3
$LN154@GetOptimum:
	mov	ecx, DWORD PTR tv1016[ebp]
	mov	DWORD PTR _lenToPosState$81273[ebp], ecx
; Line 1470
	cmp	DWORD PTR _curBack$81257[ebp], 128	; 00000080H
	jae	SHORT $LN14@GetOptimum
; Line 1471
	mov	edx, DWORD PTR _lenToPosState$81273[ebp]
	shl	edx, 9
	mov	eax, DWORD PTR _p$[ebp]
	lea	ecx, DWORD PTR [eax+edx+204232]
	mov	edx, DWORD PTR _curBack$81257[ebp]
	mov	eax, DWORD PTR _curAndLenPrice$81272[ebp]
	add	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _curAndLenPrice$81272[ebp], eax
; Line 1472
	jmp	SHORT $LN13@GetOptimum
$LN14@GetOptimum:
; Line 1473
	mov	ecx, DWORD PTR _lenToPosState$81273[ebp]
	shl	ecx, 8
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx+203208]
	mov	ecx, DWORD PTR _curBack$81257[ebp]
	and	ecx, 15					; 0000000fH
	mov	edx, DWORD PTR _posSlot$81258[ebp]
	mov	eax, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR [edx+ecx*4+206280]
	add	eax, DWORD PTR _curAndLenPrice$81272[ebp]
	mov	DWORD PTR _curAndLenPrice$81272[ebp], eax
$LN13@GetOptimum:
; Line 1475
	mov	eax, DWORD PTR _cur$[ebp]
	add	eax, DWORD PTR _lenTest$81259[ebp]
	imul	eax, 48					; 00000030H
	mov	ecx, DWORD PTR _p$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1844]
	mov	DWORD PTR _opt$81274[ebp], edx
; Line 1476
	mov	eax, DWORD PTR _opt$81274[ebp]
	mov	ecx, DWORD PTR _curAndLenPrice$81272[ebp]
	cmp	ecx, DWORD PTR [eax]
	jae	SHORT $LN12@GetOptimum
; Line 1478
	mov	edx, DWORD PTR _opt$81274[ebp]
	mov	eax, DWORD PTR _curAndLenPrice$81272[ebp]
	mov	DWORD PTR [edx], eax
; Line 1479
	mov	ecx, DWORD PTR _opt$81274[ebp]
	mov	edx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [ecx+24], edx
; Line 1480
	mov	eax, DWORD PTR _curBack$81257[ebp]
	add	eax, 4
	mov	ecx, DWORD PTR _opt$81274[ebp]
	mov	DWORD PTR [ecx+28], eax
; Line 1481
	mov	edx, DWORD PTR _opt$81274[ebp]
	mov	DWORD PTR [edx+8], 0
$LN12@GetOptimum:
; Line 1484
	mov	eax, DWORD PTR _offs$81256[ebp]
	mov	ecx, DWORD PTR _matches$[ebp]
	mov	edx, DWORD PTR _lenTest$81259[ebp]
	cmp	edx, DWORD PTR [ecx+eax*4]
	jne	$LN11@GetOptimum
; Line 1487
	mov	eax, DWORD PTR _data$81142[ebp]
	sub	eax, DWORD PTR _curBack$81257[ebp]
	sub	eax, 1
	mov	DWORD PTR _data2$81279[ebp], eax
; Line 1488
	mov	ecx, DWORD PTR _lenTest$81259[ebp]
	add	ecx, 1
	mov	DWORD PTR _lenTest2$81280[ebp], ecx
; Line 1489
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _lenTest2$81280[ebp]
	add	eax, DWORD PTR [edx+44]
	mov	DWORD PTR _limit$81281[ebp], eax
; Line 1491
	mov	ecx, DWORD PTR _limit$81281[ebp]
	cmp	ecx, DWORD PTR _numAvailFull$81128[ebp]
	jbe	SHORT $LN10@GetOptimum
; Line 1492
	mov	edx, DWORD PTR _numAvailFull$81128[ebp]
	mov	DWORD PTR _limit$81281[ebp], edx
$LN10@GetOptimum:
; Line 1493
	jmp	SHORT $LN9@GetOptimum
$LN8@GetOptimum:
	mov	eax, DWORD PTR _lenTest2$81280[ebp]
	add	eax, 1
	mov	DWORD PTR _lenTest2$81280[ebp], eax
$LN9@GetOptimum:
	mov	ecx, DWORD PTR _lenTest2$81280[ebp]
	cmp	ecx, DWORD PTR _limit$81281[ebp]
	jae	SHORT $LN7@GetOptimum
	mov	edx, DWORD PTR _data$81142[ebp]
	add	edx, DWORD PTR _lenTest2$81280[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _data2$81279[ebp]
	add	ecx, DWORD PTR _lenTest2$81280[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	eax, edx
	jne	SHORT $LN7@GetOptimum
	jmp	SHORT $LN8@GetOptimum
$LN7@GetOptimum:
; Line 1494
	mov	eax, DWORD PTR _lenTest$81259[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _lenTest2$81280[ebp]
	sub	ecx, eax
	mov	DWORD PTR _lenTest2$81280[ebp], ecx
; Line 1495
	cmp	DWORD PTR _lenTest2$81280[ebp], 2
	jb	$LN6@GetOptimum
; Line 1497
	mov	edx, DWORD PTR _state$81132[ebp]
	mov	eax, DWORD PTR _kMatchNextStates[edx*4]
	mov	DWORD PTR _state2$81288[ebp], eax
; Line 1498
	mov	ecx, DWORD PTR _position$[ebp]
	add	ecx, DWORD PTR _lenTest$81259[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	and	ecx, DWORD PTR [edx+88]
	mov	DWORD PTR _posStateNext$81289[ebp], ecx
; Line 1502
	mov	eax, DWORD PTR _state2$81288[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _p$[ebp]
	lea	edx, DWORD PTR [ecx+eax+206344]
	mov	eax, DWORD PTR _posStateNext$81289[ebp]
	movzx	ecx, WORD PTR [edx+eax*2]
	sar	ecx, 4
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _curAndLenPrice$81272[ebp]
	add	esi, DWORD PTR [edx+ecx*4+200500]
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 200500				; 00030f34H
	push	eax
	mov	ecx, DWORD PTR _data2$81279[ebp]
	add	ecx, DWORD PTR _lenTest$81259[ebp]
	movzx	edx, BYTE PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _data$81142[ebp]
	add	eax, DWORD PTR _lenTest$81259[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _position$[ebp]
	add	edx, DWORD PTR _lenTest$81259[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	and	edx, DWORD PTR [eax+84]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [ecx+72]
	shl	edx, cl
	mov	eax, DWORD PTR _data$81142[ebp]
	add	eax, DWORD PTR _lenTest$81259[ebp]
	movzx	eax, BYTE PTR [eax-1]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edi, 8
	sub	edi, DWORD PTR [ecx+72]
	mov	ecx, edi
	sar	eax, cl
	add	edx, eax
	imul	edx, 768				; 00000300H
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	lea	edx, DWORD PTR [ecx+edx*2]
	push	edx
	call	_LitEnc_GetPriceMatched@16
	add	esi, eax
	mov	DWORD PTR _curAndLenCharPrice$81290[ebp], esi
; Line 1503
	mov	eax, DWORD PTR _state2$81288[ebp]
	mov	ecx, DWORD PTR _kLiteralNextStates[eax*4]
	mov	DWORD PTR _state2$81288[ebp], ecx
; Line 1504
	mov	edx, DWORD PTR _posStateNext$81289[ebp]
	add	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	and	edx, DWORD PTR [eax+88]
	mov	DWORD PTR _posStateNext$81289[ebp], edx
; Line 1507
	mov	ecx, DWORD PTR _state2$81288[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx+206344]
	mov	ecx, DWORD PTR _posStateNext$81289[ebp]
	movzx	edx, WORD PTR [eax+ecx*2]
	xor	edx, 2047				; 000007ffH
	sar	edx, 4
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _curAndLenCharPrice$81290[ebp]
	add	ecx, DWORD PTR [eax+edx*4+200500]
	mov	edx, DWORD PTR _state2$81288[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, WORD PTR [eax+edx*2+206728]
	xor	edx, 2047				; 000007ffH
	sar	edx, 4
	mov	eax, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR [eax+edx*4+200500]
	mov	DWORD PTR _nextRepMatchPrice$81282[ebp], ecx
; Line 1511
	mov	ecx, DWORD PTR _cur$[ebp]
	add	ecx, DWORD PTR _lenTest$81259[ebp]
	mov	edx, DWORD PTR _lenTest2$81280[ebp]
	lea	eax, DWORD PTR [ecx+edx+1]
	mov	DWORD PTR _offset$81292[ebp], eax
$LN5@GetOptimum:
; Line 1514
	mov	ecx, DWORD PTR _lenEnd$[ebp]
	cmp	ecx, DWORD PTR _offset$81292[ebp]
	jae	SHORT $LN4@GetOptimum
; Line 1515
	mov	edx, DWORD PTR _lenEnd$[ebp]
	add	edx, 1
	mov	DWORD PTR _lenEnd$[ebp], edx
	mov	eax, DWORD PTR _lenEnd$[ebp]
	imul	eax, 48					; 00000030H
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+eax+1844], 1073741824	; 40000000H
	jmp	SHORT $LN5@GetOptimum
$LN4@GetOptimum:
; Line 1516
	mov	edx, DWORD PTR _posStateNext$81289[ebp]
	push	edx
	mov	eax, DWORD PTR _state2$81288[ebp]
	push	eax
	mov	ecx, DWORD PTR _lenTest2$81280[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_GetRepPrice@20
	add	eax, DWORD PTR _nextRepMatchPrice$81282[ebp]
	mov	DWORD PTR _curAndLenPrice$81293[ebp], eax
; Line 1517
	mov	eax, DWORD PTR _offset$81292[ebp]
	imul	eax, 48					; 00000030H
	mov	ecx, DWORD PTR _p$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1844]
	mov	DWORD PTR _opt$81294[ebp], edx
; Line 1518
	mov	eax, DWORD PTR _opt$81294[ebp]
	mov	ecx, DWORD PTR _curAndLenPrice$81293[ebp]
	cmp	ecx, DWORD PTR [eax]
	jae	SHORT $LN6@GetOptimum
; Line 1520
	mov	edx, DWORD PTR _opt$81294[ebp]
	mov	eax, DWORD PTR _curAndLenPrice$81293[ebp]
	mov	DWORD PTR [edx], eax
; Line 1521
	mov	ecx, DWORD PTR _lenTest$81259[ebp]
	mov	edx, DWORD PTR _cur$[ebp]
	lea	eax, DWORD PTR [edx+ecx+1]
	mov	ecx, DWORD PTR _opt$81294[ebp]
	mov	DWORD PTR [ecx+24], eax
; Line 1522
	mov	edx, DWORD PTR _opt$81294[ebp]
	mov	DWORD PTR [edx+28], 0
; Line 1523
	mov	eax, DWORD PTR _opt$81294[ebp]
	mov	DWORD PTR [eax+8], 1
; Line 1524
	mov	ecx, DWORD PTR _opt$81294[ebp]
	mov	DWORD PTR [ecx+12], 1
; Line 1525
	mov	edx, DWORD PTR _opt$81294[ebp]
	mov	eax, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [edx+16], eax
; Line 1526
	mov	ecx, DWORD PTR _curBack$81257[ebp]
	add	ecx, 4
	mov	edx, DWORD PTR _opt$81294[ebp]
	mov	DWORD PTR [edx+20], ecx
$LN6@GetOptimum:
; Line 1530
	mov	eax, DWORD PTR _offs$81256[ebp]
	add	eax, 2
	mov	DWORD PTR _offs$81256[ebp], eax
; Line 1531
	mov	ecx, DWORD PTR _offs$81256[ebp]
	cmp	ecx, DWORD PTR _numPairs$81130[ebp]
	jne	SHORT $LN2@GetOptimum
; Line 1532
	jmp	SHORT $LN22@GetOptimum
$LN2@GetOptimum:
; Line 1533
	mov	edx, DWORD PTR _offs$81256[ebp]
	mov	eax, DWORD PTR _matches$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+4]
	mov	DWORD PTR _curBack$81257[ebp], ecx
; Line 1534
	cmp	DWORD PTR _curBack$81257[ebp], 128	; 00000080H
	jb	SHORT $LN11@GetOptimum
; Line 1535
	cmp	DWORD PTR _curBack$81257[ebp], 131072	; 00020000H
	sbb	edx, edx
	and	edx, -10				; fffffff6H
	add	edx, 16					; 00000010H
	mov	DWORD PTR _i$81301[ebp], edx
	mov	eax, DWORD PTR _curBack$81257[ebp]
	mov	ecx, DWORD PTR _i$81301[ebp]
	shr	eax, cl
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+198452]
	mov	eax, DWORD PTR _i$81301[ebp]
	lea	ecx, DWORD PTR [edx+eax*2]
	mov	DWORD PTR _posSlot$81258[ebp], ecx
$LN11@GetOptimum:
; Line 1537
	jmp	$LN16@GetOptimum
$LN22@GetOptimum:
; Line 1539
	jmp	$LN93@GetOptimum
$LN139@GetOptimum:
; Line 1540
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN161@GetOptimum
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 504				; 000001f8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN161@GetOptimum:
	DD	4
	DD	$LN160@GetOptimum
$LN160@GetOptimum:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN156@GetOptimum
	DD	-80					; ffffffb0H
	DD	16					; 00000010H
	DD	$LN157@GetOptimum
	DD	-104					; ffffff98H
	DD	16					; 00000010H
	DD	$LN158@GetOptimum
	DD	-208					; ffffff30H
	DD	4
	DD	$LN159@GetOptimum
$LN159@GetOptimum:
	DB	110					; 0000006eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	0
$LN158@GetOptimum:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	112					; 00000070H
	DB	76					; 0000004cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	0
$LN157@GetOptimum:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	112					; 00000070H
	DB	115					; 00000073H
	DB	0
$LN156@GetOptimum:
	DB	110					; 0000006eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	0
_GetOptimum@12 ENDP
; Function compile flags: /Odtp /RTCsu
_price$ = -4						; size = 4
_probs$ = 8						; size = 4
_symbol$ = 12						; size = 4
_ProbPrices$ = 16					; size = 4
_LitEnc_GetPrice@12 PROC
; Line 687
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 688
	mov	DWORD PTR _price$[ebp], 0
; Line 689
	mov	eax, DWORD PTR _symbol$[ebp]
	or	eax, 256				; 00000100H
	mov	DWORD PTR _symbol$[ebp], eax
$LN3@LitEnc_Get:
; Line 692
	mov	ecx, DWORD PTR _symbol$[ebp]
	shr	ecx, 8
	mov	edx, DWORD PTR _probs$[ebp]
	movzx	eax, WORD PTR [edx+ecx*2]
	mov	ecx, DWORD PTR _symbol$[ebp]
	shr	ecx, 7
	and	ecx, 1
	neg	ecx
	and	ecx, 2047				; 000007ffH
	xor	eax, ecx
	sar	eax, 4
	mov	edx, DWORD PTR _ProbPrices$[ebp]
	mov	ecx, DWORD PTR _price$[ebp]
	add	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _price$[ebp], ecx
; Line 693
	mov	edx, DWORD PTR _symbol$[ebp]
	shl	edx, 1
	mov	DWORD PTR _symbol$[ebp], edx
; Line 695
	cmp	DWORD PTR _symbol$[ebp], 65536		; 00010000H
	jb	SHORT $LN3@LitEnc_Get
; Line 696
	mov	eax, DWORD PTR _price$[ebp]
; Line 697
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_LitEnc_GetPrice@12 ENDP
; Function compile flags: /Odtp /RTCsu
_offs$ = -8						; size = 4
_price$ = -4						; size = 4
_probs$ = 8						; size = 4
_symbol$ = 12						; size = 4
_matchByte$ = 16					; size = 4
_ProbPrices$ = 20					; size = 4
_LitEnc_GetPriceMatched@16 PROC
; Line 700
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 701
	mov	DWORD PTR _price$[ebp], 0
; Line 702
	mov	DWORD PTR _offs$[ebp], 256		; 00000100H
; Line 703
	mov	eax, DWORD PTR _symbol$[ebp]
	or	eax, 256				; 00000100H
	mov	DWORD PTR _symbol$[ebp], eax
$LN3@LitEnc_Get@2:
; Line 706
	mov	ecx, DWORD PTR _matchByte$[ebp]
	shl	ecx, 1
	mov	DWORD PTR _matchByte$[ebp], ecx
; Line 707
	mov	edx, DWORD PTR _matchByte$[ebp]
	and	edx, DWORD PTR _offs$[ebp]
	add	edx, DWORD PTR _offs$[ebp]
	mov	eax, DWORD PTR _symbol$[ebp]
	shr	eax, 8
	add	edx, eax
	mov	ecx, DWORD PTR _probs$[ebp]
	movzx	edx, WORD PTR [ecx+edx*2]
	mov	eax, DWORD PTR _symbol$[ebp]
	shr	eax, 7
	and	eax, 1
	neg	eax
	and	eax, 2047				; 000007ffH
	xor	edx, eax
	sar	edx, 4
	mov	ecx, DWORD PTR _ProbPrices$[ebp]
	mov	eax, DWORD PTR _price$[ebp]
	add	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _price$[ebp], eax
; Line 708
	mov	ecx, DWORD PTR _symbol$[ebp]
	shl	ecx, 1
	mov	DWORD PTR _symbol$[ebp], ecx
; Line 709
	mov	edx, DWORD PTR _matchByte$[ebp]
	xor	edx, DWORD PTR _symbol$[ebp]
	not	edx
	and	edx, DWORD PTR _offs$[ebp]
	mov	DWORD PTR _offs$[ebp], edx
; Line 711
	cmp	DWORD PTR _symbol$[ebp], 65536		; 00010000H
	jb	SHORT $LN3@LitEnc_Get@2
; Line 712
	mov	eax, DWORD PTR _price$[ebp]
; Line 713
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_LitEnc_GetPriceMatched@16 ENDP
; Function compile flags: /Odtp /RTCsu
_p$ = 8						; size = 4
_num$ = 12						; size = 4
_MovePos@8 PROC
; Line 854
	push	ebp
	mov	ebp, esp
	push	esi
; Line 860
	cmp	DWORD PTR _num$[ebp], 0
	je	SHORT $LN2@MovePos
; Line 862
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	add	ecx, DWORD PTR _num$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+48], ecx
; Line 863
	mov	esi, esp
	mov	eax, DWORD PTR _num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@MovePos:
; Line 865
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_MovePos@8 ENDP
; Function compile flags: /Odtp /RTCsu
_p$ = 8						; size = 4
_state$ = 12						; size = 4
_posState$ = 16						; size = 4
_GetRepLen1Price@12 PROC
; Line 912
	push	ebp
	mov	ebp, esp
; Line 915
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2+206752]
	sar	edx, 4
	mov	eax, DWORD PTR _state$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [ecx+eax+206824]
	mov	ecx, DWORD PTR _posState$[ebp]
	movzx	eax, WORD PTR [eax+ecx*2]
	sar	eax, 4
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+edx*4+200500]
	mov	ecx, DWORD PTR _p$[ebp]
	add	edx, DWORD PTR [ecx+eax*4+200500]
	mov	eax, edx
; Line 916
	pop	ebp
	ret	12					; 0000000cH
_GetRepLen1Price@12 ENDP
; Function compile flags: /Odtp /RTCsu
_price$ = -4						; size = 4
_p$ = 8							; size = 4
_repIndex$ = 12						; size = 4
_state$ = 16						; size = 4
_posState$ = 20						; size = 4
_GetPureRepPrice@16 PROC
; Line 919
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 921
	cmp	DWORD PTR _repIndex$[ebp], 0
	jne	SHORT $LN4@GetPureRep
; Line 923
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2+206752]
	sar	edx, 4
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+200500]
	mov	DWORD PTR _price$[ebp], ecx
; Line 924
	mov	edx, DWORD PTR _state$[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR _p$[ebp]
	lea	ecx, DWORD PTR [eax+edx+206824]
	mov	edx, DWORD PTR _posState$[ebp]
	movzx	eax, WORD PTR [ecx+edx*2]
	xor	eax, 2047				; 000007ffH
	sar	eax, 4
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _price$[ebp]
	add	edx, DWORD PTR [ecx+eax*4+200500]
	mov	DWORD PTR _price$[ebp], edx
; Line 926
	jmp	$LN3@GetPureRep
$LN4@GetPureRep:
; Line 928
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2+206752]
	xor	edx, 2047				; 000007ffH
	sar	edx, 4
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+200500]
	mov	DWORD PTR _price$[ebp], ecx
; Line 929
	cmp	DWORD PTR _repIndex$[ebp], 1
	jne	SHORT $LN2@GetPureRep
; Line 930
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, WORD PTR [eax+edx*2+206776]
	sar	ecx, 4
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _price$[ebp]
	add	eax, DWORD PTR [edx+ecx*4+200500]
	mov	DWORD PTR _price$[ebp], eax
; Line 931
	jmp	SHORT $LN3@GetPureRep
$LN2@GetPureRep:
; Line 933
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, WORD PTR [edx+ecx*2+206776]
	xor	eax, 2047				; 000007ffH
	sar	eax, 4
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _price$[ebp]
	add	edx, DWORD PTR [ecx+eax*4+200500]
	mov	DWORD PTR _price$[ebp], edx
; Line 934
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2+206800]
	mov	eax, DWORD PTR _repIndex$[ebp]
	sub	eax, 2
	neg	eax
	and	eax, 2047				; 000007ffH
	xor	edx, eax
	sar	edx, 4
	mov	ecx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _price$[ebp]
	add	eax, DWORD PTR [ecx+edx*4+200500]
	mov	DWORD PTR _price$[ebp], eax
$LN3@GetPureRep:
; Line 937
	mov	eax, DWORD PTR _price$[ebp]
; Line 938
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_GetPureRepPrice@16 ENDP
; Function compile flags: /Odtp /RTCsu
_p$ = 8						; size = 4
_repIndex$ = 12						; size = 4
_len$ = 16						; size = 4
_state$ = 20						; size = 4
_posState$ = 24						; size = 4
_GetRepPrice@20 PROC
; Line 941
	push	ebp
	mov	ebp, esp
	push	esi
; Line 943
	mov	eax, DWORD PTR _posState$[ebp]
	imul	eax, 1088				; 00000440H
	mov	ecx, DWORD PTR _p$[ebp]
	lea	esi, DWORD PTR [ecx+eax+227516]
	mov	edx, DWORD PTR _posState$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	mov	ecx, DWORD PTR _repIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_GetPureRepPrice@16
	mov	ecx, DWORD PTR _len$[ebp]
	add	eax, DWORD PTR [esi+ecx*4-8]
; Line 944
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	20					; 00000014H
_GetRepPrice@20 ENDP
; Function compile flags: /Odtp /RTCsu
_backCur$81027 = -16					; size = 4
_posPrev$81026 = -12					; size = 4
_backMem$ = -8						; size = 4
_posMem$ = -4						; size = 4
_p$ = 8							; size = 4
_backRes$ = 12						; size = 4
_cur$ = 16						; size = 4
_Backward@12 PROC
; Line 947
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 948
	mov	eax, DWORD PTR _cur$[ebp]
	imul	eax, 48					; 00000030H
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+eax+1868]
	mov	DWORD PTR _posMem$[ebp], edx
; Line 949
	mov	eax, DWORD PTR _cur$[ebp]
	imul	eax, 48					; 00000030H
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+eax+1872]
	mov	DWORD PTR _backMem$[ebp], edx
; Line 950
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [eax+24], ecx
$LN5@Backward:
; Line 953
	mov	edx, DWORD PTR _cur$[ebp]
	imul	edx, 48					; 00000030H
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+edx+1852], 0
	je	$LN2@Backward
; Line 955
	mov	ecx, DWORD PTR _posMem$[ebp]
	imul	ecx, 48					; 00000030H
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+ecx+1872], -1
	mov	eax, DWORD PTR _posMem$[ebp]
	imul	eax, 48					; 00000030H
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+eax+1852], 0
; Line 956
	mov	edx, DWORD PTR _posMem$[ebp]
	sub	edx, 1
	mov	eax, DWORD PTR _posMem$[ebp]
	imul	eax, 48					; 00000030H
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+eax+1868], edx
; Line 957
	mov	edx, DWORD PTR _cur$[ebp]
	imul	edx, 48					; 00000030H
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+edx+1856], 0
	je	SHORT $LN2@Backward
; Line 959
	mov	ecx, DWORD PTR _posMem$[ebp]
	sub	ecx, 1
	imul	ecx, 48					; 00000030H
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+ecx+1852], 0
; Line 960
	mov	eax, DWORD PTR _cur$[ebp]
	imul	eax, 48					; 00000030H
	mov	ecx, DWORD PTR _posMem$[ebp]
	sub	ecx, 1
	imul	ecx, 48					; 00000030H
	mov	edx, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [esi+eax+1860]
	mov	DWORD PTR [edx+ecx+1868], eax
; Line 961
	mov	ecx, DWORD PTR _cur$[ebp]
	imul	ecx, 48					; 00000030H
	mov	edx, DWORD PTR _posMem$[ebp]
	sub	edx, 1
	imul	edx, 48					; 00000030H
	mov	eax, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [esi+ecx+1864]
	mov	DWORD PTR [eax+edx+1872], ecx
$LN2@Backward:
; Line 965
	mov	edx, DWORD PTR _posMem$[ebp]
	mov	DWORD PTR _posPrev$81026[ebp], edx
; Line 966
	mov	eax, DWORD PTR _backMem$[ebp]
	mov	DWORD PTR _backCur$81027[ebp], eax
; Line 968
	mov	ecx, DWORD PTR _posPrev$81026[ebp]
	imul	ecx, 48					; 00000030H
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+ecx+1872]
	mov	DWORD PTR _backMem$[ebp], eax
; Line 969
	mov	ecx, DWORD PTR _posPrev$81026[ebp]
	imul	ecx, 48					; 00000030H
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+ecx+1868]
	mov	DWORD PTR _posMem$[ebp], eax
; Line 971
	mov	ecx, DWORD PTR _posPrev$81026[ebp]
	imul	ecx, 48					; 00000030H
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _backCur$81027[ebp]
	mov	DWORD PTR [edx+ecx+1872], eax
; Line 972
	mov	ecx, DWORD PTR _posPrev$81026[ebp]
	imul	ecx, 48					; 00000030H
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [edx+ecx+1868], eax
; Line 973
	mov	ecx, DWORD PTR _posPrev$81026[ebp]
	mov	DWORD PTR _cur$[ebp], ecx
; Line 976
	cmp	DWORD PTR _cur$[ebp], 0
	jne	$LN5@Backward
; Line 977
	mov	edx, DWORD PTR _backRes$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+1872]
	mov	DWORD PTR [edx], ecx
; Line 978
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+1868]
	mov	DWORD PTR [edx+28], ecx
; Line 979
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+28]
; Line 980
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_Backward@12 ENDP
; Function compile flags: /Odtp /RTCsu
_data2$81359 = -68					; size = 4
_limit$81358 = -64					; size = 4
_len$81357 = -60					; size = 4
_newDistance$81349 = -56				; size = 4
_data2$81328 = -52					; size = 4
_len$81327 = -48					; size = 4
_matches$ = -44						; size = 4
_data$ = -40						; size = 4
_i$ = -36						; size = 4
_repLen$ = -32						; size = 4
_repIndex$ = -28					; size = 4
_numPairs$ = -20					; size = 4
_mainDist$ = -12					; size = 4
_mainLen$ = -8						; size = 4
_numAvail$ = -4						; size = 4
_p$ = 8							; size = 4
_backRes$ = 12						; size = 4
_GetOptimumFast@8 PROC
; Line 1545
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-68]
	mov	ecx, 17					; 00000011H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1550
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+48], 0
	jne	SHORT $LN39@GetOptimum@2
; Line 1551
	lea	ecx, DWORD PTR _numPairs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_ReadMatchDistances@8
	mov	DWORD PTR _mainLen$[ebp], eax
; Line 1552
	jmp	SHORT $LN38@GetOptimum@2
$LN39@GetOptimum@2:
; Line 1554
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _mainLen$[ebp], ecx
; Line 1555
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR _numPairs$[ebp], eax
$LN38@GetOptimum@2:
; Line 1558
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR _numAvail$[ebp], edx
; Line 1559
	mov	eax, DWORD PTR _backRes$[ebp]
	mov	DWORD PTR [eax], -1
; Line 1560
	cmp	DWORD PTR _numAvail$[ebp], 2
	jae	SHORT $LN37@GetOptimum@2
; Line 1561
	mov	eax, 1
	jmp	$LN40@GetOptimum@2
$LN37@GetOptimum@2:
; Line 1562
	cmp	DWORD PTR _numAvail$[ebp], 273		; 00000111H
	jbe	SHORT $LN36@GetOptimum@2
; Line 1563
	mov	DWORD PTR _numAvail$[ebp], 273		; 00000111H
$LN36@GetOptimum@2:
; Line 1564
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	sub	eax, 1
	mov	DWORD PTR _data$[ebp], eax
; Line 1566
	mov	DWORD PTR _repIndex$[ebp], 0
	mov	edx, DWORD PTR _repIndex$[ebp]
	mov	DWORD PTR _repLen$[ebp], edx
; Line 1567
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN35@GetOptimum@2
$LN34@GetOptimum@2:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN35@GetOptimum@2:
	cmp	DWORD PTR _i$[ebp], 4
	jae	$LN33@GetOptimum@2
; Line 1570
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _data$[ebp]
	sub	eax, DWORD PTR [edx+ecx*4+52]
	sub	eax, 1
	mov	DWORD PTR _data2$81328[ebp], eax
; Line 1571
	mov	ecx, DWORD PTR _data$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _data2$81328[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	edx, ecx
	jne	SHORT $LN31@GetOptimum@2
	mov	edx, DWORD PTR _data$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	mov	ecx, DWORD PTR _data2$81328[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	cmp	eax, edx
	je	SHORT $LN32@GetOptimum@2
$LN31@GetOptimum@2:
; Line 1572
	jmp	SHORT $LN34@GetOptimum@2
$LN32@GetOptimum@2:
; Line 1573
	mov	DWORD PTR _len$81327[ebp], 2
	jmp	SHORT $LN30@GetOptimum@2
$LN29@GetOptimum@2:
	mov	eax, DWORD PTR _len$81327[ebp]
	add	eax, 1
	mov	DWORD PTR _len$81327[ebp], eax
$LN30@GetOptimum@2:
	mov	ecx, DWORD PTR _len$81327[ebp]
	cmp	ecx, DWORD PTR _numAvail$[ebp]
	jae	SHORT $LN28@GetOptimum@2
	mov	edx, DWORD PTR _data$[ebp]
	add	edx, DWORD PTR _len$81327[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _data2$81328[ebp]
	add	ecx, DWORD PTR _len$81327[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	eax, edx
	jne	SHORT $LN28@GetOptimum@2
	jmp	SHORT $LN29@GetOptimum@2
$LN28@GetOptimum@2:
; Line 1574
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _len$81327[ebp]
	cmp	ecx, DWORD PTR [eax+44]
	jb	SHORT $LN27@GetOptimum@2
; Line 1576
	mov	edx, DWORD PTR _backRes$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx], eax
; Line 1577
	mov	ecx, DWORD PTR _len$81327[ebp]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_MovePos@8
; Line 1578
	mov	eax, DWORD PTR _len$81327[ebp]
	jmp	$LN40@GetOptimum@2
$LN27@GetOptimum@2:
; Line 1580
	mov	eax, DWORD PTR _len$81327[ebp]
	cmp	eax, DWORD PTR _repLen$[ebp]
	jbe	SHORT $LN26@GetOptimum@2
; Line 1582
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _repIndex$[ebp], ecx
; Line 1583
	mov	edx, DWORD PTR _len$81327[ebp]
	mov	DWORD PTR _repLen$[ebp], edx
$LN26@GetOptimum@2:
; Line 1585
	jmp	$LN34@GetOptimum@2
$LN33@GetOptimum@2:
; Line 1587
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 201012				; 00031134H
	mov	DWORD PTR _matches$[ebp], eax
; Line 1588
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _mainLen$[ebp]
	cmp	edx, DWORD PTR [ecx+44]
	jb	SHORT $LN25@GetOptimum@2
; Line 1590
	mov	eax, DWORD PTR _numPairs$[ebp]
	mov	ecx, DWORD PTR _matches$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4-4]
	add	edx, 4
	mov	eax, DWORD PTR _backRes$[ebp]
	mov	DWORD PTR [eax], edx
; Line 1591
	mov	ecx, DWORD PTR _mainLen$[ebp]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_MovePos@8
; Line 1592
	mov	eax, DWORD PTR _mainLen$[ebp]
	jmp	$LN40@GetOptimum@2
$LN25@GetOptimum@2:
; Line 1595
	mov	DWORD PTR _mainDist$[ebp], 0
; Line 1596
	cmp	DWORD PTR _mainLen$[ebp], 2
	jb	SHORT $LN24@GetOptimum@2
; Line 1598
	mov	eax, DWORD PTR _numPairs$[ebp]
	mov	ecx, DWORD PTR _matches$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4-4]
	mov	DWORD PTR _mainDist$[ebp], edx
$LN23@GetOptimum@2:
; Line 1599
	cmp	DWORD PTR _numPairs$[ebp], 2
	jbe	SHORT $LN22@GetOptimum@2
	mov	eax, DWORD PTR _numPairs$[ebp]
	mov	ecx, DWORD PTR _matches$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4-16]
	add	edx, 1
	cmp	DWORD PTR _mainLen$[ebp], edx
	jne	SHORT $LN22@GetOptimum@2
; Line 1601
	mov	eax, DWORD PTR _mainDist$[ebp]
	shr	eax, 7
	mov	ecx, DWORD PTR _numPairs$[ebp]
	mov	edx, DWORD PTR _matches$[ebp]
	cmp	eax, DWORD PTR [edx+ecx*4-12]
	ja	SHORT $LN21@GetOptimum@2
; Line 1602
	jmp	SHORT $LN22@GetOptimum@2
$LN21@GetOptimum@2:
; Line 1603
	mov	eax, DWORD PTR _numPairs$[ebp]
	sub	eax, 2
	mov	DWORD PTR _numPairs$[ebp], eax
; Line 1604
	mov	ecx, DWORD PTR _numPairs$[ebp]
	mov	edx, DWORD PTR _matches$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4-8]
	mov	DWORD PTR _mainLen$[ebp], eax
; Line 1605
	mov	ecx, DWORD PTR _numPairs$[ebp]
	mov	edx, DWORD PTR _matches$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4-4]
	mov	DWORD PTR _mainDist$[ebp], eax
; Line 1606
	jmp	SHORT $LN23@GetOptimum@2
$LN22@GetOptimum@2:
; Line 1607
	cmp	DWORD PTR _mainLen$[ebp], 2
	jne	SHORT $LN24@GetOptimum@2
	cmp	DWORD PTR _mainDist$[ebp], 128		; 00000080H
	jb	SHORT $LN24@GetOptimum@2
; Line 1608
	mov	DWORD PTR _mainLen$[ebp], 1
$LN24@GetOptimum@2:
; Line 1614
	cmp	DWORD PTR _repLen$[ebp], 2
	jb	SHORT $LN19@GetOptimum@2
	mov	ecx, DWORD PTR _repLen$[ebp]
	add	ecx, 1
	cmp	ecx, DWORD PTR _mainLen$[ebp]
	jae	SHORT $LN18@GetOptimum@2
	mov	edx, DWORD PTR _repLen$[ebp]
	add	edx, 2
	cmp	edx, DWORD PTR _mainLen$[ebp]
	jb	SHORT $LN17@GetOptimum@2
	cmp	DWORD PTR _mainDist$[ebp], 512		; 00000200H
	jae	SHORT $LN18@GetOptimum@2
$LN17@GetOptimum@2:
	mov	eax, DWORD PTR _repLen$[ebp]
	add	eax, 3
	cmp	eax, DWORD PTR _mainLen$[ebp]
	jb	SHORT $LN19@GetOptimum@2
	cmp	DWORD PTR _mainDist$[ebp], 32768	; 00008000H
	jb	SHORT $LN19@GetOptimum@2
$LN18@GetOptimum@2:
; Line 1616
	mov	ecx, DWORD PTR _backRes$[ebp]
	mov	edx, DWORD PTR _repIndex$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 1617
	mov	eax, DWORD PTR _repLen$[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_MovePos@8
; Line 1618
	mov	eax, DWORD PTR _repLen$[ebp]
	jmp	$LN40@GetOptimum@2
$LN19@GetOptimum@2:
; Line 1621
	cmp	DWORD PTR _mainLen$[ebp], 2
	jb	SHORT $LN15@GetOptimum@2
	cmp	DWORD PTR _numAvail$[ebp], 2
	ja	SHORT $LN16@GetOptimum@2
$LN15@GetOptimum@2:
; Line 1622
	mov	eax, 1
	jmp	$LN40@GetOptimum@2
$LN16@GetOptimum@2:
; Line 1624
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 36					; 00000024H
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_ReadMatchDistances@8
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+32], eax
; Line 1625
	mov	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [edx+32], 2
	jb	SHORT $LN14@GetOptimum@2
; Line 1627
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _matches$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4-4]
	mov	DWORD PTR _newDistance$81349[ebp], eax
; Line 1631
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	cmp	edx, DWORD PTR _mainLen$[ebp]
	jb	SHORT $LN11@GetOptimum@2
	mov	eax, DWORD PTR _newDistance$81349[ebp]
	cmp	eax, DWORD PTR _mainDist$[ebp]
	jb	SHORT $LN12@GetOptimum@2
$LN11@GetOptimum@2:
	mov	ecx, DWORD PTR _mainLen$[ebp]
	add	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [edx+32], ecx
	jne	SHORT $LN10@GetOptimum@2
	mov	eax, DWORD PTR _newDistance$81349[ebp]
	shr	eax, 7
	cmp	eax, DWORD PTR _mainDist$[ebp]
	jbe	SHORT $LN12@GetOptimum@2
$LN10@GetOptimum@2:
	mov	ecx, DWORD PTR _mainLen$[ebp]
	add	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [edx+32], ecx
	ja	SHORT $LN12@GetOptimum@2
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	add	ecx, 1
	cmp	ecx, DWORD PTR _mainLen$[ebp]
	jb	SHORT $LN14@GetOptimum@2
	cmp	DWORD PTR _mainLen$[ebp], 3
	jb	SHORT $LN14@GetOptimum@2
	mov	edx, DWORD PTR _mainDist$[ebp]
	shr	edx, 7
	cmp	edx, DWORD PTR _newDistance$81349[ebp]
	jbe	SHORT $LN14@GetOptimum@2
$LN12@GetOptimum@2:
; Line 1632
	mov	eax, 1
	jmp	$LN40@GetOptimum@2
$LN14@GetOptimum@2:
; Line 1635
	mov	esi, esp
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	sub	eax, 1
	mov	DWORD PTR _data$[ebp], eax
; Line 1636
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN9@GetOptimum@2
$LN8@GetOptimum@2:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN9@GetOptimum@2:
	cmp	DWORD PTR _i$[ebp], 4
	jae	$LN7@GetOptimum@2
; Line 1639
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	sub	ecx, DWORD PTR [eax+edx*4+52]
	sub	ecx, 1
	mov	DWORD PTR _data2$81359[ebp], ecx
; Line 1640
	mov	edx, DWORD PTR _data$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _data2$81359[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	eax, edx
	jne	SHORT $LN5@GetOptimum@2
	mov	eax, DWORD PTR _data$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	mov	edx, DWORD PTR _data2$81359[ebp]
	movzx	eax, BYTE PTR [edx+1]
	cmp	ecx, eax
	je	SHORT $LN6@GetOptimum@2
$LN5@GetOptimum@2:
; Line 1641
	jmp	SHORT $LN8@GetOptimum@2
$LN6@GetOptimum@2:
; Line 1642
	mov	ecx, DWORD PTR _mainLen$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _limit$81358[ebp], ecx
; Line 1643
	mov	DWORD PTR _len$81357[ebp], 2
	jmp	SHORT $LN4@GetOptimum@2
$LN3@GetOptimum@2:
	mov	edx, DWORD PTR _len$81357[ebp]
	add	edx, 1
	mov	DWORD PTR _len$81357[ebp], edx
$LN4@GetOptimum@2:
	mov	eax, DWORD PTR _len$81357[ebp]
	cmp	eax, DWORD PTR _limit$81358[ebp]
	jae	SHORT $LN2@GetOptimum@2
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, DWORD PTR _len$81357[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _data2$81359[ebp]
	add	eax, DWORD PTR _len$81357[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	edx, ecx
	jne	SHORT $LN2@GetOptimum@2
	jmp	SHORT $LN3@GetOptimum@2
$LN2@GetOptimum@2:
; Line 1644
	mov	edx, DWORD PTR _len$81357[ebp]
	cmp	edx, DWORD PTR _limit$81358[ebp]
	jb	SHORT $LN1@GetOptimum@2
; Line 1645
	mov	eax, 1
	jmp	SHORT $LN40@GetOptimum@2
$LN1@GetOptimum@2:
; Line 1646
	jmp	$LN8@GetOptimum@2
$LN7@GetOptimum@2:
; Line 1647
	mov	eax, DWORD PTR _mainDist$[ebp]
	add	eax, 4
	mov	ecx, DWORD PTR _backRes$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 1648
	mov	edx, DWORD PTR _mainLen$[ebp]
	sub	edx, 2
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_MovePos@8
; Line 1649
	mov	eax, DWORD PTR _mainLen$[ebp]
$LN40@GetOptimum@2:
; Line 1650
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN44@GetOptimum@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 68					; 00000044H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN44@GetOptimum@2:
	DD	1
	DD	$LN43@GetOptimum@2
$LN43@GetOptimum@2:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN42@GetOptimum@2
$LN42@GetOptimum@2:
	DB	110					; 0000006eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	0
_GetOptimumFast@8 ENDP
; Function compile flags: /Odtp /RTCsu
_p$ = 8						; size = 4
_CheckErrors@4 PROC
; Line 1666
	push	ebp
	mov	ebp, esp
; Line 1667
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+144], 0
	je	SHORT $LN4@CheckError
; Line 1668
	mov	ecx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [ecx+144]
	jmp	SHORT $LN5@CheckError
$LN4@CheckError:
; Line 1669
	mov	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [edx+200], 0
	je	SHORT $LN3@CheckError
; Line 1670
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+144], 9
$LN3@CheckError:
; Line 1671
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [ecx+684], 0
	je	SHORT $LN2@CheckError
; Line 1672
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+144], 8
$LN2@CheckError:
; Line 1673
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+144], 0
	je	SHORT $LN1@CheckError
; Line 1674
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+108], 1
$LN1@CheckError:
; Line 1675
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+144]
$LN5@CheckError:
; Line 1676
	pop	ebp
	ret	4
_CheckErrors@4 ENDP
; Function compile flags: /Odtp /RTCsu
_p$ = 8						; size = 4
_nowPos$ = 12						; size = 4
_Flush@8 PROC
; Line 1679
	push	ebp
	mov	ebp, esp
; Line 1681
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+108], 1
; Line 1682
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [ecx+104], 0
	je	SHORT $LN1@Flush
; Line 1683
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _nowPos$[ebp]
	and	eax, DWORD PTR [edx+88]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_WriteEndMarker@8
$LN1@Flush:
; Line 1684
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 152				; 00000098H
	push	edx
	call	_RangeEnc_FlushData@4
; Line 1685
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 152				; 00000098H
	push	eax
	call	_RangeEnc_FlushStream@4
; Line 1686
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_CheckErrors@4
; Line 1687
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_Flush@8 ENDP
; Function compile flags: /Odtp /RTCsu
_i$ = -4						; size = 4
_p$ = 8							; size = 4
_RangeEnc_FlushData@4 PROC
; Line 581
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 583
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@RangeEnc_F@2
$LN2@RangeEnc_F@2:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@RangeEnc_F@2:
	cmp	DWORD PTR _i$[ebp], 5
	jge	SHORT $LN4@RangeEnc_F@2
; Line 584
	mov	ecx, DWORD PTR _p$[ebp]
	call	@RangeEnc_ShiftLow@4
	jmp	SHORT $LN2@RangeEnc_F@2
$LN4@RangeEnc_F@2:
; Line 585
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_RangeEnc_FlushData@4 ENDP
; Function compile flags: /Odtp /RTCsu
tv136 = -8						; size = 4
_len$ = -4						; size = 4
_p$ = 8							; size = 4
_posState$ = 12						; size = 4
_WriteEndMarker@8 PROC
; Line 1653
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1655
	push	1
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	shl	ecx, 5
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx+206344]
	mov	ecx, DWORD PTR _posState$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 152				; 00000098H
	push	eax
	call	_RangeEnc_EncodeBit@12
; Line 1656
	push	0
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	eax, DWORD PTR _p$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2+206728]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 152				; 00000098H
	push	edx
	call	_RangeEnc_EncodeBit@12
; Line 1657
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _kMatchNextStates[ecx*4]
	mov	DWORD PTR [edx+68], eax
; Line 1658
	mov	DWORD PTR _len$[ebp], 2
; Line 1659
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 200500				; 00030f34H
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	xor	eax, eax
	cmp	DWORD PTR [edx+100], 0
	sete	al
	push	eax
	mov	ecx, DWORD PTR _posState$[ebp]
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	sub	edx, 2
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 152				; 00000098H
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 207980				; 00032c6cH
	push	ecx
	call	_LenEnc_Encode2@24
; Line 1660
	cmp	DWORD PTR _len$[ebp], 5
	jae	SHORT $LN3@WriteEndMa
	mov	edx, DWORD PTR _len$[ebp]
	sub	edx, 2
	mov	DWORD PTR tv136[ebp], edx
	jmp	SHORT $LN4@WriteEndMa
$LN3@WriteEndMa:
	mov	DWORD PTR tv136[ebp], 3
$LN4@WriteEndMa:
	push	63					; 0000003fH
	push	6
	mov	eax, DWORD PTR tv136[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR _p$[ebp]
	lea	edx, DWORD PTR [ecx+eax+207208]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 152				; 00000098H
	push	eax
	call	_RcTree_Encode@16
; Line 1661
	push	26					; 0000001aH
	push	67108863				; 03ffffffH
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 152				; 00000098H
	push	ecx
	call	_RangeEnc_EncodeDirectBits@12
; Line 1662
	push	15					; 0000000fH
	push	4
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 207948				; 00032c4cH
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 152				; 00000098H
	push	eax
	call	_RcTree_ReverseEncode@16
; Line 1663
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_WriteEndMarker@8 ENDP
; Function compile flags: /Odtp /RTCsu
_p$ = -4						; size = 4
_pp$ = 8						; size = 4
_data$ = 12						; size = 4
_size$ = 16						; size = 4
_MyWrite@12 PROC
; Line 2152
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2153
	mov	eax, DWORD PTR _pp$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 2154
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	cmp	edx, DWORD PTR _size$[ebp]
	jae	SHORT $LN1@MyWrite
; Line 2156
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _size$[ebp], ecx
; Line 2157
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+12], 1
$LN1@MyWrite:
; Line 2159
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 2160
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+8], edx
; Line 2161
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+4], edx
; Line 2162
	mov	eax, DWORD PTR _size$[ebp]
; Line 2163
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_MyWrite@12 ENDP
_TEXT	ENDS
PUBLIC	_LzmaEnc_Encode@24
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
___result__$81766 = -4					; size = 4
_pp$ = 8						; size = 4
_outStream$ = 12					; size = 4
_inStream$ = 16						; size = 4
_progress$ = 20						; size = 4
_alloc$ = 24						; size = 4
_allocBig$ = 28						; size = 4
_LzmaEnc_Encode@24 PROC
; Line 2243
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2244
	mov	eax, DWORD PTR _allocBig$[ebp]
	push	eax
	mov	ecx, DWORD PTR _alloc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _inStream$[ebp]
	push	edx
	mov	eax, DWORD PTR _outStream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pp$[ebp]
	push	ecx
	call	_LzmaEnc_Prepare@20
	mov	DWORD PTR ___result__$81766[ebp], eax
	cmp	DWORD PTR ___result__$81766[ebp], 0
	je	SHORT $LN1@LzmaEnc_En
	mov	eax, DWORD PTR ___result__$81766[ebp]
	jmp	SHORT $LN2@LzmaEnc_En
$LN1@LzmaEnc_En:
; Line 2245
	mov	edx, DWORD PTR _progress$[ebp]
	push	edx
	mov	eax, DWORD PTR _pp$[ebp]
	push	eax
	call	_LzmaEnc_Encode2@8
$LN2@LzmaEnc_En:
; Line 2246
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
_LzmaEnc_Encode@24 ENDP
; Function compile flags: /Odtp /RTCsu
_p$ = -4						; size = 4
_pp$ = 8						; size = 4
_outStream$ = 12					; size = 4
_inStream$ = 16						; size = 4
_alloc$ = 20						; size = 4
_allocBig$ = 24						; size = 4
_LzmaEnc_Prepare@20 PROC
; Line 2097
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2098
	mov	eax, DWORD PTR _pp$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 2099
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _inStream$[ebp]
	mov	DWORD PTR [ecx+648], edx
; Line 2100
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+116], 1
; Line 2101
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _outStream$[ebp]
	mov	DWORD PTR [ecx+188], edx
; Line 2102
	mov	eax, DWORD PTR _allocBig$[ebp]
	push	eax
	mov	ecx, DWORD PTR _alloc$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_LzmaEnc_AllocAndInit@16
; Line 2103
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_LzmaEnc_Prepare@20 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_allocaDummy$ = -780					; size = 768
_res$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_p$ = 8							; size = 4
_progress$ = 12						; size = 4
_LzmaEnc_Encode2@8 PROC
; Line 2213
	push	ebp
	mov	ebp, esp
	sub	esp, 784				; 00000310H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-784]
	mov	ecx, 196				; 000000c4H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 2214
	mov	DWORD PTR _res$[ebp], 0
; Line 2218
	mov	BYTE PTR _allocaDummy$[ebp], 0
; Line 2219
	mov	al, BYTE PTR _allocaDummy$[ebp]
	mov	BYTE PTR _allocaDummy$[ebp+1], al
$LN6@LzmaEnc_En@2:
; Line 2224
	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_LzmaEnc_CodeOneBlock@16
	mov	DWORD PTR _res$[ebp], eax
; Line 2225
	cmp	DWORD PTR _res$[ebp], 0
	jne	SHORT $LN3@LzmaEnc_En@2
	mov	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [edx+108], 0
	je	SHORT $LN4@LzmaEnc_En@2
$LN3@LzmaEnc_En@2:
; Line 2226
	jmp	SHORT $LN5@LzmaEnc_En@2
$LN4@LzmaEnc_En@2:
; Line 2227
	cmp	DWORD PTR _progress$[ebp], 0
	je	SHORT $LN2@LzmaEnc_En@2
; Line 2229
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [eax+176]
	sub	eax, DWORD PTR [ecx+184]
	cdq
	mov	ecx, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR [ecx+192]
	adc	edx, DWORD PTR [ecx+196]
	mov	ecx, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR [ecx+168]
	adc	edx, DWORD PTR [ecx+172]
	mov	esi, esp
	push	edx
	push	eax
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+124]
	push	eax
	mov	ecx, DWORD PTR [edx+120]
	push	ecx
	mov	edx, DWORD PTR _progress$[ebp]
	push	edx
	mov	eax, DWORD PTR _progress$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _res$[ebp], eax
; Line 2230
	cmp	DWORD PTR _res$[ebp], 0
	je	SHORT $LN2@LzmaEnc_En@2
; Line 2232
	mov	DWORD PTR _res$[ebp], 10		; 0000000aH
; Line 2233
	jmp	SHORT $LN5@LzmaEnc_En@2
$LN2@LzmaEnc_En@2:
; Line 2236
	jmp	$LN6@LzmaEnc_En@2
$LN5@LzmaEnc_En@2:
; Line 2237
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_LzmaEnc_Finish@4
; Line 2238
	mov	eax, DWORD PTR _res$[ebp]
; Line 2239
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@LzmaEnc_En@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 784				; 00000310H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN11@LzmaEnc_En@2:
	DD	1
	DD	$LN10@LzmaEnc_En@2
$LN10@LzmaEnc_En@2:
	DD	-780					; fffffcf4H
	DD	768					; 00000300H
	DD	$LN9@LzmaEnc_En@2
$LN9@LzmaEnc_En@2:
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	68					; 00000044H
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	109					; 0000006dH
	DB	121					; 00000079H
	DB	0
_LzmaEnc_Encode2@8 ENDP
_TEXT	ENDS
PUBLIC	_LzmaEnc_WriteProperties@12
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_kDictMask$81784 = -16					; size = 4
_dictSize$ = -12					; size = 4
_i$ = -8						; size = 4
_p$ = -4						; size = 4
_pp$ = 8						; size = 4
_props$ = 12						; size = 4
_size$ = 16						; size = 4
_LzmaEnc_WriteProperties@12 PROC
; Line 2249
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 2250
	mov	eax, DWORD PTR _pp$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 2252
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	DWORD PTR _dictSize$[ebp], edx
; Line 2253
	mov	eax, DWORD PTR _size$[ebp]
	cmp	DWORD PTR [eax], 5
	jae	SHORT $LN12@LzmaEnc_Wr
; Line 2254
	mov	eax, 5
	jmp	$LN13@LzmaEnc_Wr
$LN12@LzmaEnc_Wr:
; Line 2255
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx], 5
; Line 2256
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+80]
	imul	eax, 5
	mov	ecx, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR [ecx+76]
	imul	eax, 9
	mov	edx, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR [edx+72]
	mov	ecx, DWORD PTR _props$[ebp]
	mov	BYTE PTR [ecx], al
; Line 2258
	cmp	DWORD PTR _dictSize$[ebp], 4194304	; 00400000H
	jb	SHORT $LN11@LzmaEnc_Wr
; Line 2260
	mov	DWORD PTR _kDictMask$81784[ebp], 1048575 ; 000fffffH
; Line 2261
	or	edx, -1
	sub	edx, DWORD PTR _kDictMask$81784[ebp]
	cmp	DWORD PTR _dictSize$[ebp], edx
	jae	SHORT $LN10@LzmaEnc_Wr
; Line 2262
	mov	eax, DWORD PTR _dictSize$[ebp]
	add	eax, DWORD PTR _kDictMask$81784[ebp]
	mov	ecx, DWORD PTR _kDictMask$81784[ebp]
	not	ecx
	and	eax, ecx
	mov	DWORD PTR _dictSize$[ebp], eax
$LN10@LzmaEnc_Wr:
; Line 2264
	jmp	SHORT $LN9@LzmaEnc_Wr
$LN11@LzmaEnc_Wr:
	mov	DWORD PTR _i$[ebp], 11			; 0000000bH
	jmp	SHORT $LN8@LzmaEnc_Wr
$LN7@LzmaEnc_Wr:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN8@LzmaEnc_Wr:
	cmp	DWORD PTR _i$[ebp], 30			; 0000001eH
	ja	SHORT $LN9@LzmaEnc_Wr
; Line 2266
	mov	eax, 2
	mov	ecx, DWORD PTR _i$[ebp]
	shl	eax, cl
	cmp	DWORD PTR _dictSize$[ebp], eax
	ja	SHORT $LN5@LzmaEnc_Wr
	mov	edx, 2
	mov	ecx, DWORD PTR _i$[ebp]
	shl	edx, cl
	mov	DWORD PTR _dictSize$[ebp], edx
	jmp	SHORT $LN9@LzmaEnc_Wr
$LN5@LzmaEnc_Wr:
; Line 2267
	mov	eax, 3
	mov	ecx, DWORD PTR _i$[ebp]
	shl	eax, cl
	cmp	DWORD PTR _dictSize$[ebp], eax
	ja	SHORT $LN4@LzmaEnc_Wr
	mov	edx, 3
	mov	ecx, DWORD PTR _i$[ebp]
	shl	edx, cl
	mov	DWORD PTR _dictSize$[ebp], edx
	jmp	SHORT $LN9@LzmaEnc_Wr
$LN4@LzmaEnc_Wr:
; Line 2268
	jmp	SHORT $LN7@LzmaEnc_Wr
$LN9@LzmaEnc_Wr:
; Line 2270
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@LzmaEnc_Wr
$LN2@LzmaEnc_Wr:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@LzmaEnc_Wr:
	cmp	DWORD PTR _i$[ebp], 4
	jae	SHORT $LN1@LzmaEnc_Wr
; Line 2271
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 3
	mov	edx, DWORD PTR _dictSize$[ebp]
	shr	edx, cl
	mov	eax, DWORD PTR _props$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR [eax+1], dl
	jmp	SHORT $LN2@LzmaEnc_Wr
$LN1@LzmaEnc_Wr:
; Line 2272
	xor	eax, eax
$LN13@LzmaEnc_Wr:
; Line 2273
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_LzmaEnc_WriteProperties@12 ENDP
_TEXT	ENDS
PUBLIC	_LzmaEnc_MemEncode@36
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_outStream$ = -28					; size = 16
_p$ = -8						; size = 4
_res$ = -4						; size = 4
_pp$ = 8						; size = 4
_dest$ = 12						; size = 4
_destLen$ = 16						; size = 4
_src$ = 20						; size = 4
_srcLen$ = 24						; size = 4
_writeEndMark$ = 28					; size = 4
_progress$ = 32						; size = 4
_alloc$ = 36						; size = 4
_allocBig$ = 40						; size = 4
_LzmaEnc_MemEncode@36 PROC
; Line 2277
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 2279
	mov	eax, DWORD PTR _pp$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 2283
	mov	ecx, DWORD PTR _srcLen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _src$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_LzmaEnc_SetInputBuf@12
; Line 2285
	mov	DWORD PTR _outStream$[ebp], OFFSET _MyWrite@12
; Line 2286
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	DWORD PTR _outStream$[ebp+4], ecx
; Line 2287
	mov	edx, DWORD PTR _destLen$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _outStream$[ebp+8], eax
; Line 2288
	mov	DWORD PTR _outStream$[ebp+12], 0
; Line 2290
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _writeEndMark$[ebp]
	mov	DWORD PTR [ecx+104], edx
; Line 2292
	mov	eax, DWORD PTR _p$[ebp]
	lea	ecx, DWORD PTR _outStream$[ebp]
	mov	DWORD PTR [eax+188], ecx
; Line 2293
	mov	edx, DWORD PTR _allocBig$[ebp]
	push	edx
	mov	eax, DWORD PTR _alloc$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _srcLen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _src$[ebp]
	push	edx
	mov	eax, DWORD PTR _pp$[ebp]
	push	eax
	call	_LzmaEnc_MemPrepare@24
	mov	DWORD PTR _res$[ebp], eax
; Line 2294
	cmp	DWORD PTR _res$[ebp], 0
	jne	SHORT $LN2@LzmaEnc_Me
; Line 2295
	mov	ecx, DWORD PTR _progress$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_LzmaEnc_Encode2@8
	mov	DWORD PTR _res$[ebp], eax
$LN2@LzmaEnc_Me:
; Line 2297
	mov	eax, DWORD PTR _destLen$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, DWORD PTR _outStream$[ebp+8]
	mov	edx, DWORD PTR _destLen$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 2298
	cmp	DWORD PTR _outStream$[ebp+12], 0
	je	SHORT $LN1@LzmaEnc_Me
; Line 2299
	mov	eax, 7
	jmp	SHORT $LN3@LzmaEnc_Me
$LN1@LzmaEnc_Me:
; Line 2300
	mov	eax, DWORD PTR _res$[ebp]
$LN3@LzmaEnc_Me:
; Line 2301
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@LzmaEnc_Me
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
	npad	3
$LN7@LzmaEnc_Me:
	DD	1
	DD	$LN6@LzmaEnc_Me
$LN6@LzmaEnc_Me:
	DD	-28					; ffffffe4H
	DD	16					; 00000010H
	DD	$LN5@LzmaEnc_Me
$LN5@LzmaEnc_Me:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
_LzmaEnc_MemEncode@36 ENDP
_TEXT	ENDS
PUBLIC	_LzmaEncode@44
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_res$ = -8						; size = 4
_p$ = -4						; size = 4
_dest$ = 8						; size = 4
_destLen$ = 12						; size = 4
_src$ = 16						; size = 4
_srcLen$ = 20						; size = 4
_props$ = 24						; size = 4
_propsEncoded$ = 28					; size = 4
_propsSize$ = 32					; size = 4
_writeEndMark$ = 36					; size = 4
_progress$ = 40						; size = 4
_alloc$ = 44						; size = 4
_allocBig$ = 48						; size = 4
_LzmaEncode@44 PROC
; Line 2306
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2307
	mov	eax, DWORD PTR _alloc$[ebp]
	push	eax
	call	_LzmaEnc_Create@4
	mov	DWORD PTR _p$[ebp], eax
; Line 2309
	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN3@LzmaEncode
; Line 2310
	mov	eax, 2
	jmp	SHORT $LN4@LzmaEncode
$LN3@LzmaEncode:
; Line 2312
	mov	ecx, DWORD PTR _props$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_LzmaEnc_SetProps@8
	mov	DWORD PTR _res$[ebp], eax
; Line 2313
	cmp	DWORD PTR _res$[ebp], 0
	jne	SHORT $LN2@LzmaEncode
; Line 2315
	mov	eax, DWORD PTR _propsSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _propsEncoded$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_LzmaEnc_WriteProperties@12
	mov	DWORD PTR _res$[ebp], eax
; Line 2316
	cmp	DWORD PTR _res$[ebp], 0
	jne	SHORT $LN2@LzmaEncode
; Line 2318
	mov	eax, DWORD PTR _allocBig$[ebp]
	push	eax
	mov	ecx, DWORD PTR _alloc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _progress$[ebp]
	push	edx
	mov	eax, DWORD PTR _writeEndMark$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcLen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _src$[ebp]
	push	edx
	mov	eax, DWORD PTR _destLen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_LzmaEnc_MemEncode@36
	mov	DWORD PTR _res$[ebp], eax
$LN2@LzmaEncode:
; Line 2321
	mov	eax, DWORD PTR _allocBig$[ebp]
	push	eax
	mov	ecx, DWORD PTR _alloc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_LzmaEnc_Destroy@12
; Line 2322
	mov	eax, DWORD PTR _res$[ebp]
$LN4@LzmaEncode:
; Line 2323
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	44					; 0000002cH
_LzmaEncode@44 ENDP
_TEXT	ENDS
END
