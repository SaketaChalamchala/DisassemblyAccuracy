; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\CPP\7zip\Common\CWrappers.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??0CCompressProgressWrap@@QAE@PAUICompressProgressInfo@@@Z ; CCompressProgressWrap::CCompressProgressWrap
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\cpp\7zip\common\cwrappers.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
_progress$ = 8						; size = 4
??0CCompressProgressWrap@@QAE@PAUICompressProgressInfo@@@Z PROC ; CCompressProgressWrap::CCompressProgressWrap
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 24
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ?CompressProgress@@YGHPAX_K1@Z ; CompressProgress
; Line 25
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _progress$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 26
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 27
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0CCompressProgressWrap@@QAE@PAUICompressProgressInfo@@@Z ENDP ; CCompressProgressWrap::CCompressProgressWrap
_TEXT	ENDS
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv77 = -12						; size = 4
tv74 = -8						; size = 4
_p$ = -4						; size = 4
_pp$ = 8						; size = 4
_inSize$ = 12						; size = 8
_outSize$ = 20						; size = 8
?CompressProgress@@YGHPAX_K1@Z PROC			; CompressProgress
; Line 16
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 17
	mov	eax, DWORD PTR _pp$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 18
	mov	ecx, DWORD PTR _outSize$[ebp]
	and	ecx, DWORD PTR _outSize$[ebp+4]
	cmp	ecx, -1
	jne	SHORT $LN3@CompressPr
	mov	DWORD PTR tv74[ebp], 0
	jmp	SHORT $LN4@CompressPr
$LN3@CompressPr:
	lea	edx, DWORD PTR _outSize$[ebp]
	mov	DWORD PTR tv74[ebp], edx
$LN4@CompressPr:
	mov	eax, DWORD PTR _inSize$[ebp]
	and	eax, DWORD PTR _inSize$[ebp+4]
	cmp	eax, -1
	jne	SHORT $LN5@CompressPr
	mov	DWORD PTR tv77[ebp], 0
	jmp	SHORT $LN6@CompressPr
$LN5@CompressPr:
	lea	ecx, DWORD PTR _inSize$[ebp]
	mov	DWORD PTR tv77[ebp], ecx
$LN6@CompressPr:
	mov	esi, esp
	mov	edx, DWORD PTR tv74[ebp]
	push	edx
	mov	eax, DWORD PTR tv77[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 19
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+8]
; Line 20
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?CompressProgress@@YGHPAX_K1@Z ENDP			; CompressProgress
_TEXT	ENDS
PUBLIC	?HRESULT_To_SRes@@YGHJH@Z			; HRESULT_To_SRes
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv64 = -4						; size = 4
_res$ = 8						; size = 4
_defaultRes$ = 12					; size = 4
?HRESULT_To_SRes@@YGHJH@Z PROC				; HRESULT_To_SRes
; Line 32
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 33
	mov	eax, DWORD PTR _res$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], -2147024809	; 80070057H
	jg	SHORT $LN11@HRESULT_To
	cmp	DWORD PTR tv64[ebp], -2147024809	; 80070057H
	je	SHORT $LN4@HRESULT_To
	cmp	DWORD PTR tv64[ebp], -2147467263	; 80004001H
	je	SHORT $LN1@HRESULT_To
	cmp	DWORD PTR tv64[ebp], -2147467260	; 80004004H
	je	SHORT $LN3@HRESULT_To
	cmp	DWORD PTR tv64[ebp], -2147024882	; 8007000eH
	je	SHORT $LN5@HRESULT_To
	jmp	SHORT $LN7@HRESULT_To
$LN11@HRESULT_To:
	cmp	DWORD PTR tv64[ebp], 0
	je	SHORT $LN6@HRESULT_To
	cmp	DWORD PTR tv64[ebp], 1
	je	SHORT $LN2@HRESULT_To
	jmp	SHORT $LN7@HRESULT_To
$LN6@HRESULT_To:
; Line 35
	xor	eax, eax
	jmp	SHORT $LN9@HRESULT_To
$LN5@HRESULT_To:
; Line 36
	mov	eax, 2
	jmp	SHORT $LN9@HRESULT_To
$LN4@HRESULT_To:
; Line 37
	mov	eax, 5
	jmp	SHORT $LN9@HRESULT_To
$LN3@HRESULT_To:
; Line 38
	mov	eax, 10					; 0000000aH
	jmp	SHORT $LN9@HRESULT_To
$LN2@HRESULT_To:
; Line 39
	mov	eax, 1
	jmp	SHORT $LN9@HRESULT_To
$LN1@HRESULT_To:
; Line 40
	mov	eax, 4
	jmp	SHORT $LN9@HRESULT_To
$LN7@HRESULT_To:
; Line 42
	mov	eax, DWORD PTR _defaultRes$[ebp]
$LN9@HRESULT_To:
; Line 43
	mov	esp, ebp
	pop	ebp
	ret	8
?HRESULT_To_SRes@@YGHJH@Z ENDP				; HRESULT_To_SRes
_TEXT	ENDS
PUBLIC	??0CSeqInStreamWrap@@QAE@PAUISequentialInStream@@@Z ; CSeqInStreamWrap::CSeqInStreamWrap
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_stream$ = 8						; size = 4
??0CSeqInStreamWrap@@QAE@PAUISequentialInStream@@@Z PROC ; CSeqInStreamWrap::CSeqInStreamWrap
; _this$ = ecx
; Line 73
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 74
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ?MyRead@@YGHPAX0PAI@Z ; MyRead
; Line 75
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 76
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0
	mov	DWORD PTR [eax+20], 0
; Line 77
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0CSeqInStreamWrap@@QAE@PAUISequentialInStream@@@Z ENDP ; CSeqInStreamWrap::CSeqInStreamWrap
_TEXT	ENDS
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv65 = -20						; size = 4
_curSize$ = -12						; size = 4
_p$ = -4						; size = 4
_object$ = 8						; size = 4
_data$ = 12						; size = 4
_size$ = 16						; size = 4
?MyRead@@YGHPAX0PAI@Z PROC				; MyRead
; Line 46
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 47
	mov	eax, DWORD PTR _object$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 48
	mov	ecx, DWORD PTR _size$[ebp]
	cmp	DWORD PTR [ecx], -2147483648		; 80000000H
	jae	SHORT $LN4@MyRead
	mov	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN5@MyRead
$LN4@MyRead:
	mov	DWORD PTR tv65[ebp], -2147483648	; 80000000H
$LN5@MyRead:
	mov	ecx, DWORD PTR tv65[ebp]
	mov	DWORD PTR _curSize$[ebp], ecx
; Line 49
	mov	esi, esp
	lea	edx, DWORD PTR _curSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _curSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 50
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR _curSize$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 51
	mov	edx, DWORD PTR _curSize$[ebp]
	xor	eax, eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	edx, DWORD PTR [ecx+16]
	adc	eax, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+16], edx
	mov	DWORD PTR [ecx+20], eax
; Line 52
	mov	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [edx+8], 0
	jne	SHORT $LN1@MyRead
; Line 53
	xor	eax, eax
	jmp	SHORT $LN2@MyRead
$LN1@MyRead:
; Line 54
	push	8
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	?HRESULT_To_SRes@@YGHJH@Z		; HRESULT_To_SRes
$LN2@MyRead:
; Line 55
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@MyRead
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN8@MyRead:
	DD	1
	DD	$LN7@MyRead
$LN7@MyRead:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN6@MyRead
$LN6@MyRead:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
?MyRead@@YGHPAX0PAI@Z ENDP				; MyRead
_TEXT	ENDS
PUBLIC	??0CSeqOutStreamWrap@@QAE@PAUISequentialOutStream@@@Z ; CSeqOutStreamWrap::CSeqOutStreamWrap
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_stream$ = 8						; size = 4
??0CSeqOutStreamWrap@@QAE@PAUISequentialOutStream@@@Z PROC ; CSeqOutStreamWrap::CSeqOutStreamWrap
; _this$ = ecx
; Line 80
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 81
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ?MyWrite@@YGIPAXPBXI@Z ; MyWrite
; Line 82
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 83
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 84
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
; Line 85
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0CSeqOutStreamWrap@@QAE@PAUISequentialOutStream@@@Z ENDP ; CSeqOutStreamWrap::CSeqOutStreamWrap
_TEXT	ENDS
EXTRN	?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z:PROC ; WriteStream
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = -4						; size = 4
_object$ = 8						; size = 4
_data$ = 12						; size = 4
_size$ = 16						; size = 4
?MyWrite@@YGIPAXPBXI@Z PROC				; MyWrite
; Line 58
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 59
	mov	eax, DWORD PTR _object$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 60
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN3@MyWrite
; Line 62
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z ; WriteStream
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 63
	mov	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN2@MyWrite
; Line 64
	xor	eax, eax
	jmp	SHORT $LN4@MyWrite
$LN2@MyWrite:
; Line 66
	jmp	SHORT $LN1@MyWrite
$LN3@MyWrite:
; Line 67
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+8], 0
$LN1@MyWrite:
; Line 68
	mov	ecx, DWORD PTR _size$[ebp]
	xor	edx, edx
	mov	eax, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR [eax+16]
	adc	edx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+16], ecx
	mov	DWORD PTR [eax+20], edx
; Line 69
	mov	eax, DWORD PTR _size$[ebp]
$LN4@MyWrite:
; Line 70
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?MyWrite@@YGIPAXPBXI@Z ENDP				; MyWrite
_TEXT	ENDS
PUBLIC	?SResToHRESULT@@YGJH@Z				; SResToHRESULT
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv64 = -4						; size = 4
_res$ = 8						; size = 4
?SResToHRESULT@@YGJH@Z PROC				; SResToHRESULT
; Line 88
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 89
	mov	eax, DWORD PTR _res$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 10			; 0000000aH
	ja	SHORT $LN7@SResToHRES
	mov	ecx, DWORD PTR tv64[ebp]
	jmp	DWORD PTR $LN11@SResToHRES[ecx*4]
$LN6@SResToHRES:
; Line 91
	xor	eax, eax
	jmp	SHORT $LN9@SResToHRES
$LN5@SResToHRES:
; Line 92
	mov	eax, -2147024882			; 8007000eH
	jmp	SHORT $LN9@SResToHRES
$LN4@SResToHRES:
; Line 93
	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN9@SResToHRES
$LN3@SResToHRES:
; Line 94
	mov	eax, -2147467260			; 80004004H
	jmp	SHORT $LN9@SResToHRES
$LN2@SResToHRES:
; Line 95
	mov	eax, 1
	jmp	SHORT $LN9@SResToHRES
$LN1@SResToHRES:
; Line 96
	mov	eax, -2147467263			; 80004001H
	jmp	SHORT $LN9@SResToHRES
$LN7@SResToHRES:
; Line 98
	mov	eax, -2147467259			; 80004005H
$LN9@SResToHRES:
; Line 99
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN11@SResToHRES:
	DD	$LN6@SResToHRES
	DD	$LN2@SResToHRES
	DD	$LN5@SResToHRES
	DD	$LN7@SResToHRES
	DD	$LN1@SResToHRES
	DD	$LN4@SResToHRES
	DD	$LN7@SResToHRES
	DD	$LN7@SResToHRES
	DD	$LN7@SResToHRES
	DD	$LN7@SResToHRES
	DD	$LN3@SResToHRES
?SResToHRESULT@@YGJH@Z ENDP				; SResToHRESULT
_TEXT	ENDS
PUBLIC	??0CSeekInStreamWrap@@QAE@PAUIInStream@@@Z	; CSeekInStreamWrap::CSeekInStreamWrap
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_stream$ = 8						; size = 4
??0CSeekInStreamWrap@@QAE@PAUIInStream@@@Z PROC		; CSeekInStreamWrap::CSeekInStreamWrap
; _this$ = ecx
; Line 128
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 129
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 130
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], OFFSET ?InStreamWrap_Read@@YGHPAX0PAI@Z ; InStreamWrap_Read
; Line 131
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], OFFSET ?InStreamWrap_Seek@@YGHPAXPA_JW4ESzSeek@@@Z ; InStreamWrap_Seek
; Line 132
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
; Line 133
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0CSeekInStreamWrap@@QAE@PAUIInStream@@@Z ENDP		; CSeekInStreamWrap::CSeekInStreamWrap
; Function compile flags: /Odtp /RTCsu
tv65 = -20						; size = 4
_curSize$ = -12						; size = 4
_p$ = -4						; size = 4
_pp$ = 8						; size = 4
_data$ = 12						; size = 4
_size$ = 16						; size = 4
?InStreamWrap_Read@@YGHPAX0PAI@Z PROC			; InStreamWrap_Read
; Line 102
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 103
	mov	eax, DWORD PTR _pp$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 104
	mov	ecx, DWORD PTR _size$[ebp]
	cmp	DWORD PTR [ecx], -2147483648		; 80000000H
	jae	SHORT $LN3@InStreamWr
	mov	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@InStreamWr
$LN3@InStreamWr:
	mov	DWORD PTR tv65[ebp], -2147483648	; 80000000H
$LN4@InStreamWr:
	mov	ecx, DWORD PTR tv65[ebp]
	mov	DWORD PTR _curSize$[ebp], ecx
; Line 105
	mov	esi, esp
	lea	edx, DWORD PTR _curSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _curSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 106
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR _curSize$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 107
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+12]
	neg	eax
	sbb	eax, eax
	and	eax, 8
; Line 108
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@InStreamWr
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	3
$LN7@InStreamWr:
	DD	1
	DD	$LN6@InStreamWr
$LN6@InStreamWr:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN5@InStreamWr
$LN5@InStreamWr:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
?InStreamWrap_Read@@YGHPAX0PAI@Z ENDP			; InStreamWrap_Read
; Function compile flags: /Odtp /RTCsu
tv64 = -28						; size = 4
_newPosition$ = -20					; size = 8
_moveMethod$ = -8					; size = 4
_p$ = -4						; size = 4
_pp$ = 8						; size = 4
_offset$ = 12						; size = 4
_origin$ = 16						; size = 4
?InStreamWrap_Seek@@YGHPAXPA_JW4ESzSeek@@@Z PROC	; InStreamWrap_Seek
; Line 111
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 112
	mov	eax, DWORD PTR _pp$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 114
	mov	ecx, DWORD PTR _origin$[ebp]
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 0
	je	SHORT $LN4@InStreamWr@2
	cmp	DWORD PTR tv64[ebp], 1
	je	SHORT $LN3@InStreamWr@2
	cmp	DWORD PTR tv64[ebp], 2
	je	SHORT $LN2@InStreamWr@2
	jmp	SHORT $LN1@InStreamWr@2
$LN4@InStreamWr@2:
; Line 116
	mov	DWORD PTR _moveMethod$[ebp], 0
	jmp	SHORT $LN5@InStreamWr@2
$LN3@InStreamWr@2:
; Line 117
	mov	DWORD PTR _moveMethod$[ebp], 1
	jmp	SHORT $LN5@InStreamWr@2
$LN2@InStreamWr@2:
; Line 118
	mov	DWORD PTR _moveMethod$[ebp], 2
	jmp	SHORT $LN5@InStreamWr@2
$LN1@InStreamWr@2:
; Line 119
	mov	eax, 5
	jmp	SHORT $LN7@InStreamWr@2
$LN5@InStreamWr@2:
; Line 122
	mov	esi, esp
	lea	edx, DWORD PTR _newPosition$[ebp]
	push	edx
	mov	eax, DWORD PTR _moveMethod$[ebp]
	push	eax
	mov	ecx, DWORD PTR _offset$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR [ecx]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 123
	mov	edx, DWORD PTR _offset$[ebp]
	mov	eax, DWORD PTR _newPosition$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _newPosition$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
; Line 124
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+12]
	neg	eax
	sbb	eax, eax
	and	eax, 8
$LN7@InStreamWr@2:
; Line 125
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@InStreamWr@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	3
$LN11@InStreamWr@2:
	DD	1
	DD	$LN10@InStreamWr@2
$LN10@InStreamWr@2:
	DD	-20					; ffffffecH
	DD	8
	DD	$LN9@InStreamWr@2
$LN9@InStreamWr@2:
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	0
?InStreamWrap_Seek@@YGHPAXPA_JW4ESzSeek@@@Z ENDP	; InStreamWrap_Seek
_TEXT	ENDS
PUBLIC	?Free@CByteInBufWrap@@QAEXXZ			; CByteInBufWrap::Free
EXTRN	_MidFree@4:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Free@CByteInBufWrap@@QAEXXZ PROC			; CByteInBufWrap::Free
; _this$ = ecx
; Line 139
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 140
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_MidFree@4
; Line 141
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
; Line 142
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Free@CByteInBufWrap@@QAEXXZ ENDP			; CByteInBufWrap::Free
_TEXT	ENDS
PUBLIC	?Alloc@CByteInBufWrap@@QAE_NI@Z			; CByteInBufWrap::Alloc
EXTRN	_MidAlloc@4:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?Alloc@CByteInBufWrap@@QAE_NI@Z PROC			; CByteInBufWrap::Alloc
; _this$ = ecx
; Line 145
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 146
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN1@Alloc
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	cmp	edx, DWORD PTR [ecx+16]
	je	SHORT $LN2@Alloc
$LN1@Alloc:
; Line 148
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Free@CByteInBufWrap@@QAEXXZ		; CByteInBufWrap::Free
; Line 149
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	call	_MidAlloc@4
	mov	DWORD PTR tv72[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv72[ebp]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR tv72[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv72[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 150
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx+16], edx
$LN2@Alloc:
; Line 152
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+12], 0
	setne	cl
	mov	al, cl
; Line 153
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Alloc@CByteInBufWrap@@QAE_NI@Z ENDP			; CByteInBufWrap::Alloc
_TEXT	ENDS
PUBLIC	?ReadByteFromNewBlock@CByteInBufWrap@@QAEEXZ	; CByteInBufWrap::ReadByteFromNewBlock
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv130 = -17						; size = 1
_avail$66692 = -12					; size = 4
_this$ = -4						; size = 4
?ReadByteFromNewBlock@CByteInBufWrap@@QAEEXZ PROC	; CByteInBufWrap::ReadByteFromNewBlock
; _this$ = ecx
; Line 156
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 157
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+36], 0
	jne	$LN2@ReadByteFr
; Line 160
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [edx+12]
	cdq
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+24]
	adc	edx, DWORD PTR [ecx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], eax
	mov	DWORD PTR [ecx+28], edx
; Line 161
	mov	esi, esp
	lea	edx, DWORD PTR _avail$66692[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+36], eax
; Line 162
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+4], ecx
; Line 163
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	add	eax, DWORD PTR _avail$66692[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 164
	cmp	DWORD PTR _avail$66692[ebp], 0
	je	SHORT $LN2@ReadByteFr
; Line 165
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv130[ebp], cl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	al, BYTE PTR tv130[ebp]
	jmp	SHORT $LN3@ReadByteFr
$LN2@ReadByteFr:
; Line 167
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+32], 1
; Line 168
	xor	al, al
$LN3@ReadByteFr:
; Line 169
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@ReadByteFr
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@ReadByteFr:
	DD	1
	DD	$LN6@ReadByteFr
$LN6@ReadByteFr:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN5@ReadByteFr
$LN5@ReadByteFr:
	DB	97					; 00000061H
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	0
?ReadByteFromNewBlock@CByteInBufWrap@@QAEEXZ ENDP	; CByteInBufWrap::ReadByteFromNewBlock
_TEXT	ENDS
PUBLIC	??0CByteInBufWrap@@QAE@XZ			; CByteInBufWrap::CByteInBufWrap
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CByteInBufWrap@@QAE@XZ PROC				; CByteInBufWrap::CByteInBufWrap
; _this$ = ecx
; Line 180
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
; Line 181
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ?Wrap_ReadByte@@YGEPAX@Z ; Wrap_ReadByte
; Line 182
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CByteInBufWrap@@QAE@XZ ENDP				; CByteInBufWrap::CByteInBufWrap
; Function compile flags: /Odtp /RTCsu
tv72 = -5						; size = 1
_p$ = -4						; size = 4
_pp$ = 8						; size = 4
?Wrap_ReadByte@@YGEPAX@Z PROC				; Wrap_ReadByte
; Line 172
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 173
	mov	eax, DWORD PTR _pp$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 174
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+8]
	je	SHORT $LN1@Wrap_ReadB
; Line 175
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv72[ebp], al
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+4], edx
	mov	al, BYTE PTR tv72[ebp]
	jmp	SHORT $LN2@Wrap_ReadB
$LN1@Wrap_ReadB:
; Line 176
	mov	ecx, DWORD PTR _p$[ebp]
	call	?ReadByteFromNewBlock@CByteInBufWrap@@QAEEXZ ; CByteInBufWrap::ReadByteFromNewBlock
$LN2@Wrap_ReadB:
; Line 177
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Wrap_ReadByte@@YGEPAX@Z ENDP				; Wrap_ReadByte
_TEXT	ENDS
PUBLIC	?Free@CByteOutBufWrap@@QAEXXZ			; CByteOutBufWrap::Free
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Free@CByteOutBufWrap@@QAEXXZ PROC			; CByteOutBufWrap::Free
; _this$ = ecx
; Line 188
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 189
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_MidFree@4
; Line 190
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
; Line 191
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Free@CByteOutBufWrap@@QAEXXZ ENDP			; CByteOutBufWrap::Free
_TEXT	ENDS
PUBLIC	?Alloc@CByteOutBufWrap@@QAE_NI@Z		; CByteOutBufWrap::Alloc
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?Alloc@CByteOutBufWrap@@QAE_NI@Z PROC			; CByteOutBufWrap::Alloc
; _this$ = ecx
; Line 194
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 195
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN1@Alloc@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	cmp	edx, DWORD PTR [ecx+16]
	je	SHORT $LN2@Alloc@2
$LN1@Alloc@2:
; Line 197
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Free@CByteOutBufWrap@@QAEXXZ		; CByteOutBufWrap::Free
; Line 198
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	call	_MidAlloc@4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 199
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+16], eax
$LN2@Alloc@2:
; Line 201
	mov	ecx, DWORD PTR _this$[ebp]
	xor	eax, eax
	cmp	DWORD PTR [ecx+12], 0
	setne	al
; Line 202
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Alloc@CByteOutBufWrap@@QAE_NI@Z ENDP			; CByteOutBufWrap::Alloc
_TEXT	ENDS
PUBLIC	?Flush@CByteOutBufWrap@@QAEJXZ			; CByteOutBufWrap::Flush
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_size$66718 = -8					; size = 4
_this$ = -4						; size = 4
?Flush@CByteOutBufWrap@@QAEJXZ PROC			; CByteOutBufWrap::Flush
; _this$ = ecx
; Line 205
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 206
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+32], 0
	jne	SHORT $LN2@Flush
; Line 208
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _size$66718[ebp], eax
; Line 209
	mov	ecx, DWORD PTR _size$66718[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z ; WriteStream
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+32], eax
; Line 210
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+32], 0
	jne	SHORT $LN1@Flush
; Line 211
	mov	eax, DWORD PTR _size$66718[ebp]
	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [edx+24]
	adc	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+24], eax
	mov	DWORD PTR [edx+28], ecx
$LN1@Flush:
; Line 212
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+4], edx
$LN2@Flush:
; Line 214
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+32]
; Line 215
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Flush@CByteOutBufWrap@@QAEJXZ ENDP			; CByteOutBufWrap::Flush
_TEXT	ENDS
PUBLIC	??0CByteOutBufWrap@@QAE@XZ			; CByteOutBufWrap::CByteOutBufWrap
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CByteOutBufWrap@@QAE@XZ PROC				; CByteOutBufWrap::CByteOutBufWrap
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
; Line 229
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ?Wrap_WriteByte@@YGXPAXE@Z ; Wrap_WriteByte
; Line 230
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CByteOutBufWrap@@QAE@XZ ENDP				; CByteOutBufWrap::CByteOutBufWrap
; Function compile flags: /Odtp /RTCsu
_dest$ = -8						; size = 4
_p$ = -4						; size = 4
_pp$ = 8						; size = 4
_b$ = 12						; size = 1
?Wrap_WriteByte@@YGXPAXE@Z PROC				; Wrap_WriteByte
; Line 218
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 219
	mov	eax, DWORD PTR _pp$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 220
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _dest$[ebp], edx
; Line 221
	mov	eax, DWORD PTR _dest$[ebp]
	mov	cl, BYTE PTR _b$[ebp]
	mov	BYTE PTR [eax], cl
; Line 222
	mov	edx, DWORD PTR _dest$[ebp]
	add	edx, 1
	mov	DWORD PTR _dest$[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 223
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _dest$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN2@Wrap_Write
; Line 224
	mov	ecx, DWORD PTR _p$[ebp]
	call	?Flush@CByteOutBufWrap@@QAEJXZ		; CByteOutBufWrap::Flush
$LN2@Wrap_Write:
; Line 225
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Wrap_WriteByte@@YGXPAXE@Z ENDP				; Wrap_WriteByte
_TEXT	ENDS
END
