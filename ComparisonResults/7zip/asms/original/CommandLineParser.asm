; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\CPP\Common\CommandLineParser.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_kStopSwitchParsing DD FLAT:$SG67228
_DATA	ENDS
CONST	SEGMENT
$SG67228 DB	'--', 00H
	ORG $+1
$SG67279 DB	'Unknown switch:', 00H
$SG67283 DB	'Multiple instances for switch:', 00H
	ORG $+1
$SG67286 DB	'Too short switch:', 00H
	ORG $+2
$SG67294 DB	'Incorrect switch postfix:', 00H
	ORG $+2
$SG67301 DB	'Incorrect switch postfix:', 00H
	ORG $+2
$SG67306 DB	'Too long switch:', 00H
CONST	ENDS
PUBLIC	??YUString@@QAEAAV0@_W@Z			; UString::operator+=
PUBLIC	?Ptr@UString@@QBEPB_WI@Z			; UString::Ptr
PUBLIC	??BUString@@QBEPB_WXZ				; UString::operator wchar_t const *
PUBLIC	?Len@UString@@QBEIXZ				; UString::Len
PUBLIC	?Empty@UString@@QAEXXZ				; UString::Empty
PUBLIC	?SplitCommandLine@NCommandLineParser@@YG_NABVUString@@AAV2@1@Z ; NCommandLineParser::SplitCommandLine
EXTRN	??4UString@@QAEAAV0@PB_W@Z:PROC			; UString::operator=
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\cpp\common\commandlineparser.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_c$67210 = -12						; size = 2
_i$ = -8						; size = 4
_quoteMode$ = -1					; size = 1
_src$ = 8						; size = 4
_dest1$ = 12						; size = 4
_dest2$ = 16						; size = 4
?SplitCommandLine@NCommandLineParser@@YG_NABVUString@@AAV2@1@Z PROC ; NCommandLineParser::SplitCommandLine
; Line 24
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 25
	mov	ecx, DWORD PTR _dest1$[ebp]
	call	?Empty@UString@@QAEXXZ			; UString::Empty
; Line 26
	mov	ecx, DWORD PTR _dest2$[ebp]
	call	?Empty@UString@@QAEXXZ			; UString::Empty
; Line 27
	mov	BYTE PTR _quoteMode$[ebp], 0
; Line 29
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@SplitComma
$LN6@SplitComma:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@SplitComma:
	mov	ecx, DWORD PTR _src$[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN5@SplitComma
; Line 31
	mov	ecx, DWORD PTR _src$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	ecx, DWORD PTR _i$[ebp]
	mov	dx, WORD PTR [eax+ecx*2]
	mov	WORD PTR _c$67210[ebp], dx
; Line 32
	movzx	eax, WORD PTR _c$67210[ebp]
	cmp	eax, 32					; 00000020H
	je	SHORT $LN3@SplitComma
	movzx	ecx, WORD PTR _c$67210[ebp]
	cmp	ecx, 9
	jne	SHORT $LN4@SplitComma
$LN3@SplitComma:
	movzx	edx, BYTE PTR _quoteMode$[ebp]
	test	edx, edx
	jne	SHORT $LN4@SplitComma
; Line 34
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _src$[ebp]
	call	?Ptr@UString@@QBEPB_WI@Z		; UString::Ptr
	push	eax
	mov	ecx, DWORD PTR _dest2$[ebp]
	call	??4UString@@QAEAAV0@PB_W@Z		; UString::operator=
; Line 35
	xor	eax, eax
	cmp	DWORD PTR _i$[ebp], 0
	setne	al
	jmp	SHORT $LN8@SplitComma
$LN4@SplitComma:
; Line 37
	movzx	ecx, WORD PTR _c$67210[ebp]
	cmp	ecx, 34					; 00000022H
	jne	SHORT $LN2@SplitComma
; Line 38
	movzx	edx, BYTE PTR _quoteMode$[ebp]
	neg	edx
	sbb	edx, edx
	add	edx, 1
	mov	BYTE PTR _quoteMode$[ebp], dl
; Line 39
	jmp	SHORT $LN1@SplitComma
$LN2@SplitComma:
; Line 40
	movzx	eax, WORD PTR _c$67210[ebp]
	push	eax
	mov	ecx, DWORD PTR _dest1$[ebp]
	call	??YUString@@QAEAAV0@_W@Z		; UString::operator+=
$LN1@SplitComma:
; Line 41
	jmp	$LN6@SplitComma
$LN5@SplitComma:
; Line 42
	xor	eax, eax
	cmp	DWORD PTR _i$[ebp], 0
	setne	al
$LN8@SplitComma:
; Line 43
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SplitCommandLine@NCommandLineParser@@YG_NABVUString@@AAV2@1@Z ENDP ; NCommandLineParser::SplitCommandLine
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Len@UString@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Len@UString@@QBEIXZ PROC				; UString::Len, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 472
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Len@UString@@QBEIXZ ENDP				; UString::Len
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Empty@UString@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Empty@UString@@QAEXXZ PROC				; UString::Empty, COMDAT
; _this$ = ecx
; Line 474
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	xor	eax, eax
	mov	WORD PTR [edx], ax
	mov	esp, ebp
	pop	ebp
	ret	0
?Empty@UString@@QAEXXZ ENDP				; UString::Empty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??BUString@@QBEPB_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BUString@@QBEPB_WXZ PROC				; UString::operator wchar_t const *, COMDAT
; _this$ = ecx
; Line 476
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??BUString@@QBEPB_WXZ ENDP				; UString::operator wchar_t const *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Ptr@UString@@QBEPB_WI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pos$ = 8						; size = 4
?Ptr@UString@@QBEPB_WI@Z PROC				; UString::Ptr, COMDAT
; _this$ = ecx
; Line 478
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pos$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	mov	esp, ebp
	pop	ebp
	ret	4
?Ptr@UString@@QBEPB_WI@Z ENDP				; UString::Ptr
_TEXT	ENDS
EXTRN	?Grow_1@UString@@AAEXXZ:PROC			; UString::Grow_1
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??YUString@@QAEAAV0@_W@Z
_TEXT	SEGMENT
_chars$ = -12						; size = 4
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_c$ = 8							; size = 2
??YUString@@QAEAAV0@_W@Z PROC				; UString::operator+=, COMDAT
; _this$ = ecx
; Line 515
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 516
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+4]
	jne	SHORT $LN1@operator
; Line 517
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Grow_1@UString@@AAEXXZ			; UString::Grow_1
$LN1@operator:
; Line 518
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _len$[ebp], ecx
; Line 519
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _chars$[ebp], eax
; Line 520
	mov	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _chars$[ebp]
	mov	ax, WORD PTR _c$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
	mov	ecx, DWORD PTR _len$[ebp]
	add	ecx, 1
	mov	DWORD PTR _len$[ebp], ecx
; Line 521
	xor	edx, edx
	mov	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _chars$[ebp]
	mov	WORD PTR [ecx+eax*2], dx
; Line 522
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 523
	mov	eax, DWORD PTR _this$[ebp]
; Line 524
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??YUString@@QAEAAV0@_W@Z ENDP				; UString::operator+=
_TEXT	ENDS
PUBLIC	??1UString@@QAE@XZ				; UString::~UString
PUBLIC	?IsEmpty@UString@@QBE_NXZ			; UString::IsEmpty
PUBLIC	?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z ; CObjectVector<UString>::Add
PUBLIC	?Clear@?$CObjectVector@VUString@@@@QAEXXZ	; CObjectVector<UString>::Clear
PUBLIC	?Trim@UString@@QAEXXZ				; UString::Trim
PUBLIC	?SplitCommandLine@NCommandLineParser@@YGXABVUString@@AAV?$CObjectVector@VUString@@@@@Z ; NCommandLineParser::SplitCommandLine
EXTRN	??4UString@@QAEAAV0@ABV0@@Z:PROC		; UString::operator=
EXTRN	??0UString@@QAE@XZ:PROC				; UString::UString
EXTRN	??0UString@@QAE@ABV0@@Z:PROC			; UString::UString
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
xdata$x	SEGMENT
__unwindtable$?SplitCommandLine@NCommandLineParser@@YGXABVUString@@AAV?$CObjectVector@VUString@@@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SplitCommandLine@NCommandLineParser@@YGXABVUString@@AAV?$CObjectVector@VUString@@@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?SplitCommandLine@NCommandLineParser@@YGXABVUString@@AAV?$CObjectVector@VUString@@@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?SplitCommandLine@NCommandLineParser@@YGXABVUString@@AAV?$CObjectVector@VUString@@@@@Z$2
__ehfuncinfo$?SplitCommandLine@NCommandLineParser@@YGXABVUString@@AAV?$CObjectVector@VUString@@@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?SplitCommandLine@NCommandLineParser@@YGXABVUString@@AAV?$CObjectVector@VUString@@@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
_s2$67224 = -68						; size = 12
_s1$67223 = -48						; size = 12
_sTemp$ = -28						; size = 12
__$EHRec$ = -12						; size = 12
_s$ = 8							; size = 4
_parts$ = 12						; size = 4
?SplitCommandLine@NCommandLineParser@@YGXABVUString@@AAV?$CObjectVector@VUString@@@@@Z PROC ; NCommandLineParser::SplitCommandLine
; File c:\workspace\7z1505-src\cpp\common\commandlineparser.cpp
; Line 46
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SplitCommandLine@NCommandLineParser@@YGXABVUString@@AAV?$CObjectVector@VUString@@@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 60					; 0000003cH
	push	edi
	lea	edi, DWORD PTR [ebp-72]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 47
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	lea	ecx, DWORD PTR _sTemp$[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 48
	lea	ecx, DWORD PTR _sTemp$[ebp]
	call	?Trim@UString@@QAEXXZ			; UString::Trim
; Line 49
	mov	ecx, DWORD PTR _parts$[ebp]
	call	?Clear@?$CObjectVector@VUString@@@@QAEXXZ ; CObjectVector<UString>::Clear
$LN4@SplitComma@2:
; Line 52
	lea	ecx, DWORD PTR _s1$67223[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _s2$67224[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 2
; Line 53
	lea	ecx, DWORD PTR _s2$67224[ebp]
	push	ecx
	lea	edx, DWORD PTR _s1$67223[ebp]
	push	edx
	lea	eax, DWORD PTR _sTemp$[ebp]
	push	eax
	call	?SplitCommandLine@NCommandLineParser@@YG_NABVUString@@AAV2@1@Z ; NCommandLineParser::SplitCommandLine
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@SplitComma@2
; Line 54
	lea	edx, DWORD PTR _s1$67223[ebp]
	push	edx
	mov	ecx, DWORD PTR _parts$[ebp]
	call	?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z ; CObjectVector<UString>::Add
$LN2@SplitComma@2:
; Line 55
	lea	ecx, DWORD PTR _s2$67224[ebp]
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@SplitComma@2
; Line 56
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _s2$67224[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _s1$67223[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	jmp	SHORT $LN3@SplitComma@2
$LN1@SplitComma@2:
; Line 57
	lea	ecx, DWORD PTR _s2$67224[ebp]
	push	ecx
	lea	ecx, DWORD PTR _sTemp$[ebp]
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
; Line 58
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _s2$67224[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _s1$67223[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	jmp	$LN4@SplitComma@2
$LN3@SplitComma@2:
; Line 59
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _sTemp$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@SplitComma@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 72					; 00000048H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN15@SplitComma@2:
	DD	3
	DD	$LN14@SplitComma@2
$LN14@SplitComma@2:
	DD	-28					; ffffffe4H
	DD	12					; 0000000cH
	DD	$LN10@SplitComma@2
	DD	-48					; ffffffd0H
	DD	12					; 0000000cH
	DD	$LN11@SplitComma@2
	DD	-68					; ffffffbcH
	DD	12					; 0000000cH
	DD	$LN12@SplitComma@2
$LN12@SplitComma@2:
	DB	115					; 00000073H
	DB	50					; 00000032H
	DB	0
$LN11@SplitComma@2:
	DB	115					; 00000073H
	DB	49					; 00000031H
	DB	0
$LN10@SplitComma@2:
	DB	115					; 00000073H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SplitCommandLine@NCommandLineParser@@YGXABVUString@@AAV?$CObjectVector@VUString@@@@@Z$0:
	lea	ecx, DWORD PTR _sTemp$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?SplitCommandLine@NCommandLineParser@@YGXABVUString@@AAV?$CObjectVector@VUString@@@@@Z$1:
	lea	ecx, DWORD PTR _s1$67223[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?SplitCommandLine@NCommandLineParser@@YGXABVUString@@AAV?$CObjectVector@VUString@@@@@Z$2:
	lea	ecx, DWORD PTR _s2$67224[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$?SplitCommandLine@NCommandLineParser@@YGXABVUString@@AAV?$CObjectVector@VUString@@@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-68]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SplitCommandLine@NCommandLineParser@@YGXABVUString@@AAV?$CObjectVector@VUString@@@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SplitCommandLine@NCommandLineParser@@YGXABVUString@@AAV?$CObjectVector@VUString@@@@@Z ENDP ; NCommandLineParser::SplitCommandLine
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1UString@@QAE@XZ
_TEXT	SEGMENT
$T67463 = -8						; size = 4
_this$ = -4						; size = 4
??1UString@@QAE@XZ PROC					; UString::~UString, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 470
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T67463[ebp], ecx
	mov	edx, DWORD PTR $T67463[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1UString@@QAE@XZ ENDP					; UString::~UString
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsEmpty@UString@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@UString@@QBE_NXZ PROC				; UString::IsEmpty, COMDAT
; _this$ = ecx
; Line 473
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+4], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@UString@@QBE_NXZ ENDP				; UString::IsEmpty
_TEXT	ENDS
EXTRN	?TrimLeft@UString@@QAEXXZ:PROC			; UString::TrimLeft
EXTRN	?TrimRight@UString@@QAEXXZ:PROC			; UString::TrimRight
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Trim@UString@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Trim@UString@@QAEXXZ PROC				; UString::Trim, COMDAT
; _this$ = ecx
; Line 584
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 585
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TrimRight@UString@@QAEXXZ		; UString::TrimRight
; Line 586
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TrimLeft@UString@@QAEXXZ		; UString::TrimLeft
; Line 587
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Trim@UString@@QAEXXZ ENDP				; UString::Trim
_TEXT	ENDS
PUBLIC	??1AString@@QAE@XZ				; AString::~AString
PUBLIC	??1?$CObjectVector@VUString@@@@QAE@XZ		; CObjectVector<UString>::~CObjectVector<UString>
PUBLIC	??0CSwitchResult@NCommandLineParser@@QAE@XZ	; NCommandLineParser::CSwitchResult::CSwitchResult
PUBLIC	??1CSwitchResult@NCommandLineParser@@QAE@XZ	; NCommandLineParser::CSwitchResult::~CSwitchResult
PUBLIC	??0?$CObjectVector@VUString@@@@QAE@XZ		; CObjectVector<UString>::CObjectVector<UString>
PUBLIC	??0CParser@NCommandLineParser@@QAE@I@Z		; NCommandLineParser::CParser::CParser
EXTRN	??_L@YGXPAXIHP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??0AString@@QAE@XZ:PROC				; AString::AString
xdata$x	SEGMENT
__unwindtable$??0CParser@NCommandLineParser@@QAE@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CParser@NCommandLineParser@@QAE@I@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CParser@NCommandLineParser@@QAE@I@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CParser@NCommandLineParser@@QAE@I@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CParser@NCommandLineParser@@QAE@I@Z$3
__ehfuncinfo$??0CParser@NCommandLineParser@@QAE@I@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0CParser@NCommandLineParser@@QAE@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv135 = -32						; size = 4
$T67472 = -28						; size = 4
$T67471 = -24						; size = 4
$T67470 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_numSwitches$ = 8					; size = 4
??0CParser@NCommandLineParser@@QAE@I@Z PROC		; NCommandLineParser::CParser::CParser
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\commandlineparser.cpp
; Line 72
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CParser@NCommandLineParser@@QAE@I@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _numSwitches$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::CObjectVector<UString>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??0AString@@QAE@XZ			; AString::AString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 2
; Line 73
	mov	eax, DWORD PTR _numSwitches$[ebp]
	mov	DWORD PTR $T67470[ebp], eax
	xor	ecx, ecx
	mov	eax, DWORD PTR $T67470[ebp]
	mov	edx, 20					; 00000014H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	xor	eax, eax
	add	ecx, 4
	setb	al
	neg	eax
	or	eax, ecx
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T67472[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	cmp	DWORD PTR $T67472[ebp], 0
	je	SHORT $LN3@CParser
	mov	ecx, DWORD PTR $T67472[ebp]
	mov	edx, DWORD PTR $T67470[ebp]
	mov	DWORD PTR [ecx], edx
	push	OFFSET ??1CSwitchResult@NCommandLineParser@@QAE@XZ
	push	OFFSET ??0CSwitchResult@NCommandLineParser@@QAE@XZ ; NCommandLineParser::CSwitchResult::CSwitchResult
	mov	eax, DWORD PTR $T67470[ebp]
	push	eax
	push	20					; 00000014H
	mov	ecx, DWORD PTR $T67472[ebp]
	add	ecx, 4
	push	ecx
	call	??_L@YGXPAXIHP6EX0@Z1@Z
	mov	edx, DWORD PTR $T67472[ebp]
	add	edx, 4
	mov	DWORD PTR tv135[ebp], edx
	jmp	SHORT $LN4@CParser
$LN3@CParser:
	mov	DWORD PTR tv135[ebp], 0
$LN4@CParser:
	mov	eax, DWORD PTR tv135[ebp]
	mov	DWORD PTR $T67471[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T67471[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 74
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0CParser@NCommandLineParser@@QAE@I@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
__unwindfunclet$??0CParser@NCommandLineParser@@QAE@I@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	jmp	??1AString@@QAE@XZ			; AString::~AString
__unwindfunclet$??0CParser@NCommandLineParser@@QAE@I@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??0CParser@NCommandLineParser@@QAE@I@Z$3:
	mov	eax, DWORD PTR $T67472[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??0CParser@NCommandLineParser@@QAE@I@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CParser@NCommandLineParser@@QAE@I@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CParser@NCommandLineParser@@QAE@I@Z ENDP		; NCommandLineParser::CParser::CParser
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1AString@@QAE@XZ
_TEXT	SEGMENT
$T67484 = -8						; size = 4
_this$ = -4						; size = 4
??1AString@@QAE@XZ PROC					; AString::~AString, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 232
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T67484[ebp], ecx
	mov	edx, DWORD PTR $T67484[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1AString@@QAE@XZ ENDP					; AString::~AString
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CSwitchResult@NCommandLineParser@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CSwitchResult@NCommandLineParser@@QAE@XZ PROC	; NCommandLineParser::CSwitchResult::CSwitchResult, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\commandlineparser.h
; Line 41
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::CObjectVector<UString>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CSwitchResult@NCommandLineParser@@QAE@XZ ENDP	; NCommandLineParser::CSwitchResult::CSwitchResult
_TEXT	ENDS
PUBLIC	??_ECSwitchResult@NCommandLineParser@@QAEPAXI@Z	; NCommandLineParser::CSwitchResult::`vector deleting destructor'
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_ECSwitchResult@NCommandLineParser@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_ECSwitchResult@NCommandLineParser@@QAEPAXI@Z PROC	; NCommandLineParser::CSwitchResult::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1CSwitchResult@NCommandLineParser@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	20					; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CSwitchResult@NCommandLineParser@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_ECSwitchResult@NCommandLineParser@@QAEPAXI@Z ENDP	; NCommandLineParser::CSwitchResult::`vector deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CSwitchResult@NCommandLineParser@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CSwitchResult@NCommandLineParser@@QAE@XZ PROC	; NCommandLineParser::CSwitchResult::~CSwitchResult, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CSwitchResult@NCommandLineParser@@QAE@XZ ENDP	; NCommandLineParser::CSwitchResult::~CSwitchResult
_TEXT	ENDS
PUBLIC	??1CParser@NCommandLineParser@@QAE@XZ		; NCommandLineParser::CParser::~CParser
xdata$x	SEGMENT
__unwindtable$??1CParser@NCommandLineParser@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CParser@NCommandLineParser@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CParser@NCommandLineParser@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CParser@NCommandLineParser@@QAE@XZ$2
__ehfuncinfo$??1CParser@NCommandLineParser@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1CParser@NCommandLineParser@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv75 = -28						; size = 4
$T67496 = -24						; size = 4
$T67495 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CParser@NCommandLineParser@@QAE@XZ PROC		; NCommandLineParser::CParser::~CParser
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\commandlineparser.cpp
; Line 77
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CParser@NCommandLineParser@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 2
; Line 78
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T67496[ebp], ecx
	mov	edx, DWORD PTR $T67496[ebp]
	mov	DWORD PTR $T67495[ebp], edx
	cmp	DWORD PTR $T67495[ebp], 0
	je	SHORT $LN3@CParser@2
	push	3
	mov	ecx, DWORD PTR $T67495[ebp]
	call	??_ECSwitchResult@NCommandLineParser@@QAEPAXI@Z
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN1@CParser@2
$LN3@CParser@2:
	mov	DWORD PTR tv75[ebp], 0
$LN1@CParser@2:
; Line 79
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??1CParser@NCommandLineParser@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
__unwindfunclet$??1CParser@NCommandLineParser@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	jmp	??1AString@@QAE@XZ			; AString::~AString
__unwindfunclet$??1CParser@NCommandLineParser@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$??1CParser@NCommandLineParser@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CParser@NCommandLineParser@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CParser@NCommandLineParser@@QAE@XZ ENDP		; NCommandLineParser::CParser::~CParser
PUBLIC	?MyStringLen@@YGIPBD@Z				; MyStringLen
PUBLIC	?ParseString@CParser@NCommandLineParser@@AAE_NABVUString@@PBUCSwitchForm@2@@Z ; NCommandLineParser::CParser::ParseString
EXTRN	??0UString@@QAE@PB_W@Z:PROC			; UString::UString
EXTRN	?FindCharPosInString@@YGHPBDD@Z:PROC		; FindCharPosInString
EXTRN	??4AString@@QAEAAV0@PBD@Z:PROC			; AString::operator=
xdata$x	SEGMENT
__unwindtable$?ParseString@CParser@NCommandLineParser@@AAE_NABVUString@@PBUCSwitchForm@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ParseString@CParser@NCommandLineParser@@AAE_NABVUString@@PBUCSwitchForm@2@@Z$0
__ehfuncinfo$?ParseString@CParser@NCommandLineParser@@AAE_NABVUString@@PBUCSwitchForm@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ParseString@CParser@NCommandLineParser@@AAE_NABVUString@@PBUCSwitchForm@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv157 = -72						; size = 4
$T67507 = -68						; size = 12
_c$67297 = -56						; size = 2
_rem$ = -52						; size = 4
_form$ = -48						; size = 4
_sw$ = -44						; size = 4
_switchLen$67272 = -40					; size = 4
_key$67271 = -36					; size = 4
_i$67267 = -32						; size = 4
_maxLen$ = -28						; size = 4
_switchIndex$ = -24					; size = 4
_pos$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_s$ = 8							; size = 4
_switchForms$ = 12					; size = 4
?ParseString@CParser@NCommandLineParser@@AAE_NABVUString@@PBUCSwitchForm@2@@Z PROC ; NCommandLineParser::CParser::ParseString
; _this$ = ecx
; Line 85
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ParseString@CParser@NCommandLineParser@@AAE_NABVUString@@PBUCSwitchForm@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 60					; 0000003cH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-72]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 86
	mov	ecx, DWORD PTR _s$[ebp]
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN21@ParseStrin
	mov	ecx, DWORD PTR _s$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	movzx	ecx, WORD PTR [eax]
	push	ecx
	call	?IsItSwitchChar@NCommandLineParser@@YG_N_W@Z ; NCommandLineParser::IsItSwitchChar
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN22@ParseStrin
$LN21@ParseStrin:
; Line 87
	xor	al, al
	jmp	$LN23@ParseStrin
$LN22@ParseStrin:
; Line 89
	mov	DWORD PTR _pos$[ebp], 1
; Line 90
	mov	DWORD PTR _switchIndex$[ebp], 0
; Line 91
	mov	DWORD PTR _maxLen$[ebp], -1
; Line 93
	mov	DWORD PTR _i$67267[ebp], 0
	jmp	SHORT $LN20@ParseStrin
$LN19@ParseStrin:
	mov	eax, DWORD PTR _i$67267[ebp]
	add	eax, 1
	mov	DWORD PTR _i$67267[ebp], eax
$LN20@ParseStrin:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$67267[ebp]
	cmp	edx, DWORD PTR [ecx]
	jae	SHORT $LN18@ParseStrin
; Line 95
	mov	eax, DWORD PTR _i$67267[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _switchForms$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _key$67271[ebp], edx
; Line 96
	mov	eax, DWORD PTR _key$67271[ebp]
	push	eax
	call	?MyStringLen@@YGIPBD@Z			; MyStringLen
	mov	DWORD PTR _switchLen$67272[ebp], eax
; Line 97
	mov	ecx, DWORD PTR _switchLen$67272[ebp]
	cmp	ecx, DWORD PTR _maxLen$[ebp]
	jle	SHORT $LN16@ParseStrin
	mov	esi, DWORD PTR _pos$[ebp]
	add	esi, DWORD PTR _switchLen$67272[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	cmp	esi, eax
	jbe	SHORT $LN17@ParseStrin
$LN16@ParseStrin:
; Line 98
	jmp	SHORT $LN19@ParseStrin
$LN17@ParseStrin:
; Line 99
	mov	edx, DWORD PTR _key$67271[ebp]
	push	edx
	mov	ecx, DWORD PTR _s$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	ecx, DWORD PTR _pos$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	push	edx
	call	?IsString1PrefixedByString2_NoCase@@YG_NPB_WPBD@Z ; IsString1PrefixedByString2_NoCase
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN15@ParseStrin
; Line 101
	mov	ecx, DWORD PTR _i$67267[ebp]
	mov	DWORD PTR _switchIndex$[ebp], ecx
; Line 102
	mov	edx, DWORD PTR _switchLen$67272[ebp]
	mov	DWORD PTR _maxLen$[ebp], edx
$LN15@ParseStrin:
; Line 104
	jmp	SHORT $LN19@ParseStrin
$LN18@ParseStrin:
; Line 106
	cmp	DWORD PTR _maxLen$[ebp], 0
	jge	SHORT $LN14@ParseStrin
; Line 108
	push	OFFSET $SG67279
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??4AString@@QAEAAV0@PBD@Z		; AString::operator=
; Line 109
	xor	al, al
	jmp	$LN23@ParseStrin
$LN14@ParseStrin:
; Line 112
	mov	eax, DWORD PTR _pos$[ebp]
	add	eax, DWORD PTR _maxLen$[ebp]
	mov	DWORD PTR _pos$[ebp], eax
; Line 114
	mov	ecx, DWORD PTR _switchIndex$[ebp]
	imul	ecx, 20					; 00000014H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _sw$[ebp], ecx
; Line 115
	mov	eax, DWORD PTR _switchIndex$[ebp]
	imul	eax, 12					; 0000000cH
	add	eax, DWORD PTR _switchForms$[ebp]
	mov	DWORD PTR _form$[ebp], eax
; Line 117
	mov	ecx, DWORD PTR _form$[ebp]
	movzx	edx, BYTE PTR [ecx+5]
	test	edx, edx
	jne	SHORT $LN13@ParseStrin
	mov	eax, DWORD PTR _sw$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN13@ParseStrin
; Line 119
	push	OFFSET $SG67283
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??4AString@@QAEAAV0@PBD@Z		; AString::operator=
; Line 120
	xor	al, al
	jmp	$LN23@ParseStrin
$LN13@ParseStrin:
; Line 123
	mov	edx, DWORD PTR _sw$[ebp]
	mov	BYTE PTR [edx], 1
; Line 125
	mov	ecx, DWORD PTR _s$[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	sub	eax, DWORD PTR _pos$[ebp]
	mov	DWORD PTR _rem$[ebp], eax
; Line 126
	mov	eax, DWORD PTR _form$[ebp]
	movzx	ecx, BYTE PTR [eax+6]
	cmp	DWORD PTR _rem$[ebp], ecx
	jge	SHORT $LN12@ParseStrin
; Line 128
	push	OFFSET $SG67286
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??4AString@@QAEAAV0@PBD@Z		; AString::operator=
; Line 129
	xor	al, al
	jmp	$LN23@ParseStrin
$LN12@ParseStrin:
; Line 132
	mov	edx, DWORD PTR _sw$[ebp]
	mov	BYTE PTR [edx+1], 0
; Line 133
	mov	eax, DWORD PTR _sw$[ebp]
	mov	DWORD PTR [eax+4], -1
; Line 135
	mov	ecx, DWORD PTR _form$[ebp]
	mov	dl, BYTE PTR [ecx+4]
	mov	BYTE PTR tv157[ebp], dl
	cmp	BYTE PTR tv157[ebp], 1
	je	SHORT $LN9@ParseStrin
	cmp	BYTE PTR tv157[ebp], 2
	je	$LN2@ParseStrin
	cmp	BYTE PTR tv157[ebp], 3
	je	SHORT $LN6@ParseStrin
	jmp	$LN10@ParseStrin
$LN9@ParseStrin:
; Line 138
	cmp	DWORD PTR _rem$[ebp], 1
	jne	SHORT $LN8@ParseStrin
; Line 140
	mov	ecx, DWORD PTR _s$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	ecx, DWORD PTR _pos$[ebp]
	movzx	edx, WORD PTR [eax+ecx*2]
	xor	eax, eax
	cmp	edx, 45					; 0000002dH
	sete	al
	mov	ecx, DWORD PTR _sw$[ebp]
	mov	BYTE PTR [ecx+1], al
; Line 141
	mov	edx, DWORD PTR _sw$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	test	eax, eax
	je	SHORT $LN7@ParseStrin
; Line 142
	mov	al, 1
	jmp	$LN23@ParseStrin
$LN7@ParseStrin:
; Line 143
	push	OFFSET $SG67294
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??4AString@@QAEAAV0@PBD@Z		; AString::operator=
; Line 144
	xor	al, al
	jmp	$LN23@ParseStrin
$LN8@ParseStrin:
; Line 146
	jmp	$LN10@ParseStrin
$LN6@ParseStrin:
; Line 149
	cmp	DWORD PTR _rem$[ebp], 1
	jne	SHORT $LN5@ParseStrin
; Line 151
	mov	ecx, DWORD PTR _s$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	ecx, DWORD PTR _pos$[ebp]
	mov	dx, WORD PTR [eax+ecx*2]
	mov	WORD PTR _c$67297[ebp], dx
; Line 152
	movzx	eax, WORD PTR _c$67297[ebp]
	cmp	eax, 127				; 0000007fH
	jg	SHORT $LN4@ParseStrin
; Line 154
	movzx	ecx, BYTE PTR _c$67297[ebp]
	push	ecx
	mov	edx, DWORD PTR _form$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	?FindCharPosInString@@YGHPBDD@Z		; FindCharPosInString
	mov	ecx, DWORD PTR _sw$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 155
	mov	edx, DWORD PTR _sw$[ebp]
	cmp	DWORD PTR [edx+4], 0
	jl	SHORT $LN4@ParseStrin
; Line 156
	mov	al, 1
	jmp	SHORT $LN23@ParseStrin
$LN4@ParseStrin:
; Line 158
	push	OFFSET $SG67301
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??4AString@@QAEAAV0@PBD@Z		; AString::operator=
; Line 159
	xor	al, al
	jmp	SHORT $LN23@ParseStrin
$LN5@ParseStrin:
; Line 161
	jmp	SHORT $LN10@ParseStrin
$LN2@ParseStrin:
; Line 164
	mov	ecx, DWORD PTR _s$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	ecx, DWORD PTR _pos$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	push	edx
	lea	ecx, DWORD PTR $T67507[ebp]
	call	??0UString@@QAE@PB_W@Z			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR $T67507[ebp]
	push	eax
	mov	ecx, DWORD PTR _sw$[ebp]
	add	ecx, 8
	call	?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z ; CObjectVector<UString>::Add
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T67507[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
; Line 165
	mov	al, 1
	jmp	SHORT $LN23@ParseStrin
$LN10@ParseStrin:
; Line 168
	mov	ecx, DWORD PTR _s$[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	cmp	DWORD PTR _pos$[ebp], eax
	je	SHORT $LN1@ParseStrin
; Line 170
	push	OFFSET $SG67306
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??4AString@@QAEAAV0@PBD@Z		; AString::operator=
; Line 171
	xor	al, al
	jmp	SHORT $LN23@ParseStrin
$LN1@ParseStrin:
; Line 173
	mov	al, 1
$LN23@ParseStrin:
; Line 174
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 72					; 00000048H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ParseString@CParser@NCommandLineParser@@AAE_NABVUString@@PBUCSwitchForm@2@@Z$0:
	lea	ecx, DWORD PTR $T67507[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$?ParseString@CParser@NCommandLineParser@@AAE_NABVUString@@PBUCSwitchForm@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ParseString@CParser@NCommandLineParser@@AAE_NABVUString@@PBUCSwitchForm@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ParseString@CParser@NCommandLineParser@@AAE_NABVUString@@PBUCSwitchForm@2@@Z ENDP ; NCommandLineParser::CParser::ParseString
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?MyStringLen@@YGIPBD@Z
_TEXT	SEGMENT
_i$ = -4						; size = 4
_s$ = 8							; size = 4
?MyStringLen@@YGIPBD@Z PROC				; MyStringLen, COMDAT
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 28
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@MyStringLe
$LN2@MyStringLe:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@MyStringLe:
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN1@MyStringLe
	jmp	SHORT $LN2@MyStringLe
$LN1@MyStringLe:
; Line 29
	mov	eax, DWORD PTR _i$[ebp]
; Line 30
	mov	esp, ebp
	pop	ebp
	ret	4
?MyStringLen@@YGIPBD@Z ENDP				; MyStringLen
_TEXT	ENDS
PUBLIC	?MyCharLower_Ascii@@YG_W_W@Z			; MyCharLower_Ascii
PUBLIC	?MyCharLower_Ascii@@YGDD@Z			; MyCharLower_Ascii
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_c$67196 = -1						; size = 1
_u$ = 8							; size = 4
_a$ = 12						; size = 4
?IsString1PrefixedByString2_NoCase@@YG_NPB_WPBD@Z PROC	; IsString1PrefixedByString2_NoCase
; File c:\workspace\7z1505-src\cpp\common\commandlineparser.cpp
; Line 8
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
$LN4@IsString1P:
; Line 11
	mov	eax, DWORD PTR _a$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c$67196[ebp], cl
; Line 12
	movsx	edx, BYTE PTR _c$67196[ebp]
	test	edx, edx
	jne	SHORT $LN2@IsString1P
; Line 13
	mov	al, 1
	jmp	SHORT $LN5@IsString1P
$LN2@IsString1P:
; Line 14
	movzx	eax, BYTE PTR _c$67196[ebp]
	push	eax
	call	?MyCharLower_Ascii@@YGDD@Z		; MyCharLower_Ascii
	movzx	esi, al
	mov	ecx, DWORD PTR _u$[ebp]
	movzx	edx, WORD PTR [ecx]
	push	edx
	call	?MyCharLower_Ascii@@YG_W_W@Z		; MyCharLower_Ascii
	movzx	eax, ax
	cmp	esi, eax
	je	SHORT $LN1@IsString1P
; Line 15
	xor	al, al
	jmp	SHORT $LN5@IsString1P
$LN1@IsString1P:
; Line 16
	mov	ecx, DWORD PTR _a$[ebp]
	add	ecx, 1
	mov	DWORD PTR _a$[ebp], ecx
; Line 17
	mov	edx, DWORD PTR _u$[ebp]
	add	edx, 2
	mov	DWORD PTR _u$[ebp], edx
; Line 18
	jmp	SHORT $LN4@IsString1P
$LN5@IsString1P:
; Line 19
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?IsString1PrefixedByString2_NoCase@@YG_NPB_WPBD@Z ENDP	; IsString1PrefixedByString2_NoCase
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?MyCharLower_Ascii@@YGDD@Z
_TEXT	SEGMENT
_c$ = 8							; size = 1
?MyCharLower_Ascii@@YGDD@Z PROC				; MyCharLower_Ascii, COMDAT
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 106
	push	ebp
	mov	ebp, esp
; Line 107
	movsx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 65					; 00000041H
	jl	SHORT $LN1@MyCharLowe
	movsx	ecx, BYTE PTR _c$[ebp]
	cmp	ecx, 90					; 0000005aH
	jg	SHORT $LN1@MyCharLowe
; Line 108
	movzx	eax, BYTE PTR _c$[ebp]
	add	eax, 32					; 00000020H
	jmp	SHORT $LN2@MyCharLowe
$LN1@MyCharLowe:
; Line 109
	mov	al, BYTE PTR _c$[ebp]
$LN2@MyCharLowe:
; Line 110
	pop	ebp
	ret	4
?MyCharLower_Ascii@@YGDD@Z ENDP				; MyCharLower_Ascii
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?MyCharLower_Ascii@@YG_W_W@Z
_TEXT	SEGMENT
_c$ = 8							; size = 2
?MyCharLower_Ascii@@YG_W_W@Z PROC			; MyCharLower_Ascii, COMDAT
; Line 113
	push	ebp
	mov	ebp, esp
; Line 114
	movzx	eax, WORD PTR _c$[ebp]
	cmp	eax, 65					; 00000041H
	jl	SHORT $LN1@MyCharLowe@2
	movzx	ecx, WORD PTR _c$[ebp]
	cmp	ecx, 90					; 0000005aH
	jg	SHORT $LN1@MyCharLowe@2
; Line 115
	movzx	eax, WORD PTR _c$[ebp]
	add	eax, 32					; 00000020H
	jmp	SHORT $LN2@MyCharLowe@2
$LN1@MyCharLowe@2:
; Line 116
	mov	ax, WORD PTR _c$[ebp]
$LN2@MyCharLowe@2:
; Line 117
	pop	ebp
	ret	4
?MyCharLower_Ascii@@YG_W_W@Z ENDP			; MyCharLower_Ascii
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
_TEXT	SEGMENT
_c$ = 8							; size = 2
?IsItSwitchChar@NCommandLineParser@@YG_N_W@Z PROC	; NCommandLineParser::IsItSwitchChar
; File c:\workspace\7z1505-src\cpp\common\commandlineparser.cpp
; Line 65
	push	ebp
	mov	ebp, esp
; Line 66
	movzx	eax, WORD PTR _c$[ebp]
	xor	ecx, ecx
	cmp	eax, 45					; 0000002dH
	sete	cl
	mov	al, cl
; Line 67
	pop	ebp
	ret	4
?IsItSwitchChar@NCommandLineParser@@YG_N_W@Z ENDP	; NCommandLineParser::IsItSwitchChar
_TEXT	ENDS
PUBLIC	?IsEqualTo@UString@@QBE_NPBD@Z			; UString::IsEqualTo
PUBLIC	??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[]
PUBLIC	?Size@?$CObjectVector@VUString@@@@QBEIXZ	; CObjectVector<UString>::Size
PUBLIC	?ParseStrings@CParser@NCommandLineParser@@QAE_NPBUCSwitchForm@2@ABV?$CObjectVector@VUString@@@@@Z ; NCommandLineParser::CParser::ParseStrings
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_s$67317 = -16						; size = 4
_i$67313 = -12						; size = 4
_stopSwitch$ = -5					; size = 1
_this$ = -4						; size = 4
_switchForms$ = 8					; size = 4
_commandStrings$ = 12					; size = 4
?ParseStrings@CParser@NCommandLineParser@@QAE_NPBUCSwitchForm@2@ABV?$CObjectVector@VUString@@@@@Z PROC ; NCommandLineParser::CParser::ParseStrings
; _this$ = ecx
; Line 177
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 178
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?Empty@UString@@QAEXXZ			; UString::Empty
; Line 179
	mov	BYTE PTR _stopSwitch$[ebp], 0
; Line 180
	mov	DWORD PTR _i$67313[ebp], 0
	jmp	SHORT $LN7@ParseStrin@2
$LN6@ParseStrin@2:
	mov	eax, DWORD PTR _i$67313[ebp]
	add	eax, 1
	mov	DWORD PTR _i$67313[ebp], eax
$LN7@ParseStrin@2:
	mov	ecx, DWORD PTR _commandStrings$[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	cmp	DWORD PTR _i$67313[ebp], eax
	jae	$LN5@ParseStrin@2
; Line 182
	mov	ecx, DWORD PTR _i$67313[ebp]
	push	ecx
	mov	ecx, DWORD PTR _commandStrings$[ebp]
	call	??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[]
	mov	DWORD PTR _s$67317[ebp], eax
; Line 183
	movzx	edx, BYTE PTR _stopSwitch$[ebp]
	test	edx, edx
	jne	SHORT $LN4@ParseStrin@2
; Line 185
	mov	eax, DWORD PTR _kStopSwitchParsing
	push	eax
	mov	ecx, DWORD PTR _s$67317[ebp]
	call	?IsEqualTo@UString@@QBE_NPBD@Z		; UString::IsEqualTo
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@ParseStrin@2
; Line 187
	mov	BYTE PTR _stopSwitch$[ebp], 1
; Line 188
	jmp	SHORT $LN6@ParseStrin@2
$LN3@ParseStrin@2:
; Line 190
	mov	ecx, DWORD PTR _s$67317[ebp]
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN4@ParseStrin@2
	mov	ecx, DWORD PTR _s$67317[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	movzx	eax, WORD PTR [eax]
	push	eax
	call	?IsItSwitchChar@NCommandLineParser@@YG_N_W@Z ; NCommandLineParser::IsItSwitchChar
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@ParseStrin@2
; Line 192
	mov	edx, DWORD PTR _switchForms$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$67317[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ParseString@CParser@NCommandLineParser@@AAE_NABVUString@@PBUCSwitchForm@2@@Z ; NCommandLineParser::CParser::ParseString
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@ParseStrin@2
; Line 193
	jmp	$LN6@ParseStrin@2
$LN1@ParseStrin@2:
; Line 194
	mov	edx, DWORD PTR _s$67317[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
; Line 195
	xor	al, al
	jmp	SHORT $LN8@ParseStrin@2
$LN4@ParseStrin@2:
; Line 198
	mov	eax, DWORD PTR _s$67317[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z ; CObjectVector<UString>::Add
; Line 199
	jmp	$LN6@ParseStrin@2
$LN5@ParseStrin@2:
; Line 200
	mov	al, 1
$LN8@ParseStrin@2:
; Line 201
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?ParseStrings@CParser@NCommandLineParser@@QAE_NPBUCSwitchForm@2@ABV?$CObjectVector@VUString@@@@@Z ENDP ; NCommandLineParser::CParser::ParseStrings
_TEXT	ENDS
EXTRN	?StringsAreEqual_Ascii@@YG_NPB_WPBD@Z:PROC	; StringsAreEqual_Ascii
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsEqualTo@UString@@QBE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
?IsEqualTo@UString@@QBE_NPBD@Z PROC			; UString::IsEqualTo, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 547
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	?StringsAreEqual_Ascii@@YG_NPB_WPBD@Z	; StringsAreEqual_Ascii
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?IsEqualTo@UString@@QBE_NPBD@Z ENDP			; UString::IsEqualTo
_TEXT	ENDS
PUBLIC	?Size@?$CRecordVector@PAX@@QBEIXZ		; CRecordVector<void *>::Size
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Size@?$CObjectVector@VUString@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@VUString@@@@QBEIXZ PROC		; CObjectVector<UString>::Size, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@VUString@@@@QBEIXZ ENDP		; CObjectVector<UString>::Size
_TEXT	ENDS
PUBLIC	??0?$CRecordVector@PAX@@QAE@XZ			; CRecordVector<void *>::CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CObjectVector@VUString@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@VUString@@@@QAE@XZ PROC		; CObjectVector<UString>::CObjectVector<UString>, COMDAT
; _this$ = ecx
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@VUString@@@@QAE@XZ ENDP		; CObjectVector<UString>::CObjectVector<UString>
_TEXT	ENDS
PUBLIC	??A?$CRecordVector@PAX@@QBEABQAXI@Z		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z PROC	; CObjectVector<UString>::operator[], COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ENDP	; CObjectVector<UString>::operator[]
_TEXT	ENDS
PUBLIC	?Add@?$CRecordVector@PAX@@QAEIQAX@Z		; CRecordVector<void *>::Add
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z$0
__ehfuncinfo$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
_TEXT	SEGMENT
tv74 = -28						; size = 4
$T67533 = -24						; size = 4
$T67532 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_item$ = 8						; size = 4
?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z PROC ; CObjectVector<UString>::Add, COMDAT
; _this$ = ecx
; Line 459
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T67533[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T67533[ebp], 0
	je	SHORT $LN3@Add
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T67533[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@Add
$LN3@Add:
	mov	DWORD PTR tv74[ebp], 0
$LN4@Add:
	mov	ecx, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T67532[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T67532[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z$0:
	mov	eax, DWORD PTR $T67533[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z ENDP ; CObjectVector<UString>::Add
PUBLIC	??1?$CRecordVector@PAX@@QAE@XZ			; CRecordVector<void *>::~CRecordVector<void *>
PUBLIC	??_GUString@@QAEPAXI@Z				; UString::`scalar deleting destructor'
PUBLIC	??A?$CRecordVector@PAX@@QAEAAPAXI@Z		; CRecordVector<void *>::operator[]
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@VUString@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@VUString@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@VUString@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@VUString@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@VUString@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T67546 = -28						; size = 4
$T67545 = -24						; size = 4
_i$67337 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@VUString@@@@QAE@XZ PROC		; CObjectVector<UString>::~CObjectVector<UString>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@VUString@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$67337[ebp], eax
$LN2@CObjectVec:
	cmp	DWORD PTR _i$67337[ebp], 0
	je	SHORT $LN3@CObjectVec
; Line 489
	mov	eax, DWORD PTR _i$67337[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$67337[ebp], eax
	mov	ecx, DWORD PTR _i$67337[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T67546[ebp], edx
	mov	eax, DWORD PTR $T67546[ebp]
	mov	DWORD PTR $T67545[ebp], eax
	cmp	DWORD PTR $T67545[ebp], 0
	je	SHORT $LN5@CObjectVec
	push	1
	mov	ecx, DWORD PTR $T67545[ebp]
	call	??_GUString@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec
$LN5@CObjectVec:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec:
	jmp	SHORT $LN2@CObjectVec
$LN3@CObjectVec:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@VUString@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@VUString@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@VUString@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@VUString@@@@QAE@XZ ENDP		; CObjectVector<UString>::~CObjectVector<UString>
PUBLIC	?Clear@?$CRecordVector@PAX@@QAEXXZ		; CRecordVector<void *>::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Clear@?$CObjectVector@VUString@@@@QAEXXZ
_TEXT	SEGMENT
tv75 = -20						; size = 4
$T67559 = -16						; size = 4
$T67558 = -12						; size = 4
_i$67346 = -8						; size = 4
_this$ = -4						; size = 4
?Clear@?$CObjectVector@VUString@@@@QAEXXZ PROC		; CObjectVector<UString>::Clear, COMDAT
; _this$ = ecx
; Line 499
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 500
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$67346[ebp], eax
$LN2@Clear:
	cmp	DWORD PTR _i$67346[ebp], 0
	je	SHORT $LN1@Clear
; Line 501
	mov	eax, DWORD PTR _i$67346[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$67346[ebp], eax
	mov	ecx, DWORD PTR _i$67346[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T67559[ebp], edx
	mov	eax, DWORD PTR $T67559[ebp]
	mov	DWORD PTR $T67558[ebp], eax
	cmp	DWORD PTR $T67558[ebp], 0
	je	SHORT $LN5@Clear
	push	1
	mov	ecx, DWORD PTR $T67558[ebp]
	call	??_GUString@@QAEPAXI@Z
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN6@Clear
$LN5@Clear:
	mov	DWORD PTR tv75[ebp], 0
$LN6@Clear:
	jmp	SHORT $LN2@Clear
$LN1@Clear:
; Line 502
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CRecordVector@PAX@@QAEXXZ	; CRecordVector<void *>::Clear
; Line 503
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CObjectVector@VUString@@@@QAEXXZ ENDP		; CObjectVector<UString>::Clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??_GUString@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GUString@@QAEPAXI@Z PROC				; UString::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GUString@@QAEPAXI@Z ENDP				; UString::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@PAX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@PAX@@QAE@XZ PROC			; CRecordVector<void *>::CRecordVector<void *>, COMDAT
; _this$ = ecx
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@PAX@@QAE@XZ ENDP			; CRecordVector<void *>::CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@PAX@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@PAX@@QBEIXZ PROC			; CRecordVector<void *>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@PAX@@QBEIXZ ENDP			; CRecordVector<void *>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@PAX@@QAE@XZ
_TEXT	SEGMENT
$T67570 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@PAX@@QAE@XZ PROC			; CRecordVector<void *>::~CRecordVector<void *>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T67570[ebp], ecx
	mov	edx, DWORD PTR $T67570[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@PAX@@QAE@XZ ENDP			; CRecordVector<void *>::~CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Clear@?$CRecordVector@PAX@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$CRecordVector@PAX@@QAEXXZ PROC			; CRecordVector<void *>::Clear, COMDAT
; _this$ = ecx
; Line 131
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CRecordVector@PAX@@QAEXXZ ENDP			; CRecordVector<void *>::Clear
_TEXT	ENDS
PUBLIC	?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ	; CRecordVector<void *>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@PAX@@QAEIQAX@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?Add@?$CRecordVector@PAX@@QAEIQAX@Z PROC		; CRecordVector<void *>::Add, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ; CRecordVector<void *>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 201
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv72[ebp]
; Line 202
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CRecordVector@PAX@@QAEIQAX@Z ENDP		; CRecordVector<void *>::Add
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@PAX@@QBEABQAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@PAX@@QBEABQAXI@Z PROC		; CRecordVector<void *>::operator[], COMDAT
; _this$ = ecx
; Line 227
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@PAX@@QBEABQAXI@Z ENDP		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@PAX@@QAEAAPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@PAX@@QAEAAPAXI@Z PROC		; CRecordVector<void *>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@PAX@@QAEAAPAXI@Z ENDP		; CRecordVector<void *>::operator[]
_TEXT	ENDS
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ
_TEXT	SEGMENT
$T67582 = -20						; size = 4
$T67581 = -16						; size = 4
_p$67376 = -12						; size = 4
_newCapacity$67375 = -8					; size = 4
_this$ = -4						; size = 4
?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ PROC	; CRecordVector<void *>::ReserveOnePosition, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@ReserveOne
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$67375[ebp], ecx
; Line 23
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$67375[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T67581[ebp], eax
	mov	eax, DWORD PTR $T67581[ebp]
	mov	DWORD PTR _p$67376[ebp], eax
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@ReserveOne
; Line 25
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$67376[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne:
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T67582[ebp], edx
	mov	eax, DWORD PTR $T67582[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$67376[ebp]
	mov	DWORD PTR [ecx], edx
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$67375[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ReserveOne:
; Line 30
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ENDP	; CRecordVector<void *>::ReserveOnePosition
_TEXT	ENDS
END
