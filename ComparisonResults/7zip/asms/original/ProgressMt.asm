; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\CPP\7zip\Common\ProgressMt.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock
PUBLIC	??4?$CMyComPtr@UICompressProgressInfo@@@@QAEPAUICompressProgressInfo@@PAU1@@Z ; CMyComPtr<ICompressProgressInfo>::operator=
PUBLIC	?Add@?$CRecordVector@_K@@QAEI_K@Z		; CRecordVector<unsigned __int64>::Add
PUBLIC	?Clear@?$CRecordVector@_K@@QAEXXZ		; CRecordVector<unsigned __int64>::Clear
PUBLIC	??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z ; NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock
PUBLIC	?Init@CMtCompressProgressMixer@@QAEXHPAUICompressProgressInfo@@@Z ; CMtCompressProgressMixer::Init
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
xdata$x	SEGMENT
__unwindtable$?Init@CMtCompressProgressMixer@@QAEXHPAUICompressProgressInfo@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Init@CMtCompressProgressMixer@@QAEXHPAUICompressProgressInfo@@@Z$0
__ehfuncinfo$?Init@CMtCompressProgressMixer@@QAEXHPAUICompressProgressInfo@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Init@CMtCompressProgressMixer@@QAEXHPAUICompressProgressInfo@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\cpp\7zip\common\progressmt.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_i$67217 = -32						; size = 4
_lock$ = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_numItems$ = 8						; size = 4
_progress$ = 12						; size = 4
?Init@CMtCompressProgressMixer@@QAEXHPAUICompressProgressInfo@@@Z PROC ; CMtCompressProgressMixer::Init
; _this$ = ecx
; Line 8
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Init@CMtCompressProgressMixer@@QAEXHPAUICompressProgressInfo@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 9
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 48					; 00000030H
	push	eax
	lea	ecx, DWORD PTR _lock$[ebp]
	call	??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z ; NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 10
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Clear@?$CRecordVector@_K@@QAEXXZ	; CRecordVector<unsigned __int64>::Clear
; Line 11
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?Clear@?$CRecordVector@_K@@QAEXXZ	; CRecordVector<unsigned __int64>::Clear
; Line 12
	mov	DWORD PTR _i$67217[ebp], 0
	jmp	SHORT $LN3@Init
$LN2@Init:
	mov	ecx, DWORD PTR _i$67217[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$67217[ebp], ecx
$LN3@Init:
	mov	edx, DWORD PTR _i$67217[ebp]
	cmp	edx, DWORD PTR _numItems$[ebp]
	jge	SHORT $LN1@Init
; Line 14
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Add@?$CRecordVector@_K@@QAEI_K@Z	; CRecordVector<unsigned __int64>::Add
; Line 15
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?Add@?$CRecordVector@_K@@QAEI_K@Z	; CRecordVector<unsigned __int64>::Add
; Line 16
	jmp	SHORT $LN2@Init
$LN1@Init:
; Line 17
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0
	mov	DWORD PTR [eax+36], 0
; Line 18
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
; Line 19
	mov	edx, DWORD PTR _progress$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$CMyComPtr@UICompressProgressInfo@@@@QAEPAUICompressProgressInfo@@PAU1@@Z ; CMyComPtr<ICompressProgressInfo>::operator=
; Line 20
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _lock$[ebp]
	call	??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@Init
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN10@Init:
	DD	1
	DD	$LN9@Init
$LN9@Init:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN7@Init
$LN7@Init:
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Init@CMtCompressProgressMixer@@QAEXHPAUICompressProgressInfo@@@Z$0:
	lea	ecx, DWORD PTR _lock$[ebp]
	jmp	??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock
__ehhandler$?Init@CMtCompressProgressMixer@@QAEXHPAUICompressProgressInfo@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Init@CMtCompressProgressMixer@@QAEXHPAUICompressProgressInfo@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Init@CMtCompressProgressMixer@@QAEXHPAUICompressProgressInfo@@@Z ENDP ; CMtCompressProgressMixer::Init
PUBLIC	?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ; NWindows::NSynchronization::CCriticalSection::Enter
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_object$ = 8						; size = 4
??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z PROC ; NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\synchronization.h
; Line 158
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _object$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ; NWindows::NSynchronization::CCriticalSection::Enter
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z ENDP ; NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock
_TEXT	ENDS
EXTRN	__imp__EnterCriticalSection@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ PROC ; NWindows::NSynchronization::CCriticalSection::Enter, COMDAT
; _this$ = ecx
; Line 149
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	DWORD PTR __imp__EnterCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ENDP ; NWindows::NSynchronization::CCriticalSection::Enter
_TEXT	ENDS
PUBLIC	?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ ; NWindows::NSynchronization::CCriticalSectionLock::Unlock
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ PROC ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock, COMDAT
; _this$ = ecx
; Line 159
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ ; NWindows::NSynchronization::CCriticalSectionLock::Unlock
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ENDP ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock
_TEXT	ENDS
PUBLIC	?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ; NWindows::NSynchronization::CCriticalSection::Leave
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ PROC ; NWindows::NSynchronization::CCriticalSectionLock::Unlock, COMDAT
; _this$ = ecx
; Line 156
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ; NWindows::NSynchronization::CCriticalSection::Leave
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ ENDP ; NWindows::NSynchronization::CCriticalSectionLock::Unlock
_TEXT	ENDS
EXTRN	__imp__LeaveCriticalSection@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ PROC ; NWindows::NSynchronization::CCriticalSection::Leave, COMDAT
; _this$ = ecx
; Line 150
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	DWORD PTR __imp__LeaveCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ ENDP ; NWindows::NSynchronization::CCriticalSection::Leave
_TEXT	ENDS
PUBLIC	??A?$CRecordVector@_K@@QAEAA_KI@Z		; CRecordVector<unsigned __int64>::operator[]
PUBLIC	?Reinit@CMtCompressProgressMixer@@QAEXH@Z	; CMtCompressProgressMixer::Reinit
xdata$x	SEGMENT
__unwindtable$?Reinit@CMtCompressProgressMixer@@QAEXH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Reinit@CMtCompressProgressMixer@@QAEXH@Z$0
__ehfuncinfo$?Reinit@CMtCompressProgressMixer@@QAEXH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Reinit@CMtCompressProgressMixer@@QAEXH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
_lock$ = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_index$ = 8						; size = 4
?Reinit@CMtCompressProgressMixer@@QAEXH@Z PROC		; CMtCompressProgressMixer::Reinit
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\progressmt.cpp
; Line 23
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Reinit@CMtCompressProgressMixer@@QAEXH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 24
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 48					; 00000030H
	push	eax
	lea	ecx, DWORD PTR _lock$[ebp]
	call	??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z ; NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 25
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??A?$CRecordVector@_K@@QAEAA_KI@Z	; CRecordVector<unsigned __int64>::operator[]
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0
; Line 26
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??A?$CRecordVector@_K@@QAEAA_KI@Z	; CRecordVector<unsigned __int64>::operator[]
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0
; Line 27
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _lock$[ebp]
	call	??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Reinit
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN7@Reinit:
	DD	1
	DD	$LN6@Reinit
$LN6@Reinit:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN4@Reinit
$LN4@Reinit:
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Reinit@CMtCompressProgressMixer@@QAEXH@Z$0:
	lea	ecx, DWORD PTR _lock$[ebp]
	jmp	??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock
__ehhandler$?Reinit@CMtCompressProgressMixer@@QAEXH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Reinit@CMtCompressProgressMixer@@QAEXH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Reinit@CMtCompressProgressMixer@@QAEXH@Z ENDP		; CMtCompressProgressMixer::Reinit
PUBLIC	??C?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator->
PUBLIC	??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *
PUBLIC	?SetRatioInfo@CMtCompressProgressMixer@@QAEJHPB_K0@Z ; CMtCompressProgressMixer::SetRatioInfo
xdata$x	SEGMENT
__unwindtable$?SetRatioInfo@CMtCompressProgressMixer@@QAEJHPB_K0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetRatioInfo@CMtCompressProgressMixer@@QAEJHPB_K0@Z$0
__ehfuncinfo$?SetRatioInfo@CMtCompressProgressMixer@@QAEJHPB_K0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetRatioInfo@CMtCompressProgressMixer@@QAEJHPB_K0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv133 = -56						; size = 4
$T67358 = -52						; size = 4
$T67357 = -48						; size = 4
_diff$67236 = -44					; size = 8
_diff$67234 = -36					; size = 8
_lock$ = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_index$ = 8						; size = 4
_inSize$ = 12						; size = 4
_outSize$ = 16						; size = 4
?SetRatioInfo@CMtCompressProgressMixer@@QAEJHPB_K0@Z PROC ; CMtCompressProgressMixer::SetRatioInfo
; _this$ = ecx
; Line 30
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetRatioInfo@CMtCompressProgressMixer@@QAEJHPB_K0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 44					; 0000002cH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 31
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 48					; 00000030H
	push	eax
	lea	ecx, DWORD PTR _lock$[ebp]
	call	??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z ; NWindows::NSynchronization::CCriticalSectionLock::CCriticalSectionLock
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 32
	cmp	DWORD PTR _inSize$[ebp], 0
	je	SHORT $LN3@SetRatioIn
; Line 34
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??A?$CRecordVector@_K@@QAEAA_KI@Z	; CRecordVector<unsigned __int64>::operator[]
	mov	edx, DWORD PTR _inSize$[ebp]
	mov	ecx, DWORD PTR [edx]
	sub	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx+4]
	sbb	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _diff$67234[ebp], ecx
	mov	DWORD PTR _diff$67234[ebp+4], edx
; Line 35
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??A?$CRecordVector@_K@@QAEAA_KI@Z	; CRecordVector<unsigned __int64>::operator[]
	mov	ecx, DWORD PTR _inSize$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
; Line 36
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	add	eax, DWORD PTR _diff$67234[ebp]
	mov	ecx, DWORD PTR [edx+36]
	adc	ecx, DWORD PTR _diff$67234[ebp+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+32], eax
	mov	DWORD PTR [edx+36], ecx
$LN3@SetRatioIn:
; Line 38
	cmp	DWORD PTR _outSize$[ebp], 0
	je	SHORT $LN2@SetRatioIn
; Line 40
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??A?$CRecordVector@_K@@QAEAA_KI@Z	; CRecordVector<unsigned __int64>::operator[]
	mov	ecx, DWORD PTR _outSize$[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+4]
	sbb	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _diff$67236[ebp], edx
	mov	DWORD PTR _diff$67236[ebp+4], ecx
; Line 41
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??A?$CRecordVector@_K@@QAEAA_KI@Z	; CRecordVector<unsigned __int64>::operator[]
	mov	ecx, DWORD PTR _outSize$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
; Line 42
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	add	eax, DWORD PTR _diff$67236[ebp]
	mov	ecx, DWORD PTR [edx+44]
	adc	ecx, DWORD PTR _diff$67236[ebp+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+40], eax
	mov	DWORD PTR [edx+44], ecx
$LN2@SetRatioIn:
; Line 44
	mov	ecx, DWORD PTR _this$[ebp]
	call	??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *
	test	eax, eax
	je	SHORT $LN1@SetRatioIn
; Line 45
	mov	ecx, DWORD PTR _this$[ebp]
	call	??C?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator->
	mov	DWORD PTR tv133[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 40					; 00000028H
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	push	ecx
	mov	edx, DWORD PTR tv133[ebp]
	push	edx
	mov	eax, DWORD PTR tv133[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T67357[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _lock$[ebp]
	call	??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock
	mov	eax, DWORD PTR $T67357[ebp]
	jmp	SHORT $LN4@SetRatioIn
$LN1@SetRatioIn:
; Line 46
	mov	DWORD PTR $T67358[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _lock$[ebp]
	call	??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock
	mov	eax, DWORD PTR $T67358[ebp]
$LN4@SetRatioIn:
; Line 47
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@SetRatioIn
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN10@SetRatioIn:
	DD	1
	DD	$LN9@SetRatioIn
$LN9@SetRatioIn:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN7@SetRatioIn
$LN7@SetRatioIn:
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SetRatioInfo@CMtCompressProgressMixer@@QAEJHPB_K0@Z$0:
	lea	ecx, DWORD PTR _lock$[ebp]
	jmp	??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CCriticalSectionLock::~CCriticalSectionLock
__ehhandler$?SetRatioInfo@CMtCompressProgressMixer@@QAEJHPB_K0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-56]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetRatioInfo@CMtCompressProgressMixer@@QAEJHPB_K0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetRatioInfo@CMtCompressProgressMixer@@QAEJHPB_K0@Z ENDP ; CMtCompressProgressMixer::SetRatioInfo
PUBLIC	?SetRatioInfo@CMtCompressProgress@@UAGJPB_K0@Z	; CMtCompressProgress::SetRatioInfo
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = 8						; size = 4
_inSize$ = 12						; size = 4
_outSize$ = 16						; size = 4
?SetRatioInfo@CMtCompressProgress@@UAGJPB_K0@Z PROC	; CMtCompressProgress::SetRatioInfo
; Line 51
	push	ebp
	mov	ebp, esp
; Line 52
	mov	eax, DWORD PTR _outSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _inSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?SetRatioInfo@CMtCompressProgressMixer@@QAEJHPB_K0@Z ; CMtCompressProgressMixer::SetRatioInfo
; Line 53
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?SetRatioInfo@CMtCompressProgress@@UAGJPB_K0@Z ENDP	; CMtCompressProgress::SetRatioInfo
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ PROC ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ENDP ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ PROC ; CMyComPtr<ICompressProgressInfo>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ENDP ; CMyComPtr<ICompressProgressInfo>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UICompressProgressInfo@@@@QAEPAUICompressProgressInfo@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UICompressProgressInfo@@@@QAEPAUICompressProgressInfo@@PAU1@@Z PROC ; CMyComPtr<ICompressProgressInfo>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UICompressProgressInfo@@@@QAEPAUICompressProgressInfo@@PAU1@@Z ENDP ; CMyComPtr<ICompressProgressInfo>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Clear@?$CRecordVector@_K@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$CRecordVector@_K@@QAEXXZ PROC			; CRecordVector<unsigned __int64>::Clear, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 131
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CRecordVector@_K@@QAEXXZ ENDP			; CRecordVector<unsigned __int64>::Clear
_TEXT	ENDS
PUBLIC	?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ	; CRecordVector<unsigned __int64>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@_K@@QAEI_K@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 8
?Add@?$CRecordVector@_K@@QAEI_K@Z PROC			; CRecordVector<unsigned __int64>::Add, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ ; CRecordVector<unsigned __int64>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*8], edx
	mov	edx, DWORD PTR _item$[ebp+4]
	mov	DWORD PTR [eax+ecx*8+4], edx
; Line 201
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv72[ebp]
; Line 202
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Add@?$CRecordVector@_K@@QAEI_K@Z ENDP			; CRecordVector<unsigned __int64>::Add
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@_K@@QAEAA_KI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@_K@@QAEAA_KI@Z PROC			; CRecordVector<unsigned __int64>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@_K@@QAEAA_KI@Z ENDP			; CRecordVector<unsigned __int64>::operator[]
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_memcpy:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ
_TEXT	SEGMENT
$T67382 = -20						; size = 4
$T67381 = -16						; size = 4
_p$67265 = -12						; size = 4
_newCapacity$67264 = -8					; size = 4
_this$ = -4						; size = 4
?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ PROC	; CRecordVector<unsigned __int64>::ReserveOnePosition, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@ReserveOne
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$67264[ebp], ecx
; Line 23
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$67264[ebp]
	mov	edx, 8
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T67381[ebp], eax
	mov	eax, DWORD PTR $T67381[ebp]
	mov	DWORD PTR _p$67265[ebp], eax
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@ReserveOne
; Line 25
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$67265[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne:
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T67382[ebp], edx
	mov	eax, DWORD PTR $T67382[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$67265[ebp]
	mov	DWORD PTR [ecx], edx
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$67264[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ReserveOne:
; Line 30
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ ENDP	; CRecordVector<unsigned __int64>::ReserveOnePosition
_TEXT	ENDS
END
