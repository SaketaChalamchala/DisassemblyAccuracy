; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\C\HuffEnc.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	__$ArrayPad$
PUBLIC	_Huffman_Generate@20
EXTRN	_HeapSort@8:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__RTC_CheckEsp:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\c\huffenc.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
tv191 = -512						; size = 4
tv169 = -508						; size = 4
tv95 = -504						; size = 4
tv73 = -500						; size = 4
_i$1466 = -496						; size = 4
_len$1462 = -492					; size = 4
_code$1461 = -488					; size = 4
_nextCodes$1460 = -480					; size = 68
_num$1455 = -408					; size = 4
_len$1451 = -404					; size = 4
_len$1446 = -400					; size = 4
_lenCounters$1439 = -392				; size = 68
_freq$1438 = -320					; size = 4
_m$1437 = -316						; size = 4
_n$1436 = -312						; size = 4
_i$1432 = -308						; size = 4
_e$1431 = -304						; size = 4
_b$1430 = -300						; size = 4
_maxCode$1426 = -296					; size = 4
_minCode$1425 = -292					; size = 4
_freq$1421 = -288					; size = 4
_temp$1417 = -284					; size = 4
_freq$1413 = -280					; size = 4
_counters$1406 = -272					; size = 256
_i$1405 = -12						; size = 4
_num$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_freqs$ = 8						; size = 4
_p$ = 12						; size = 4
_lens$ = 16						; size = 4
_numSymbols$ = 20					; size = 4
_maxLen$ = 24						; size = 4
_Huffman_Generate@20 PROC
; Line 18
	push	ebp
	mov	ebp, esp
	sub	esp, 512				; 00000200H
	push	edi
	lea	edi, DWORD PTR [ebp-512]
	mov	ecx, 128				; 00000080H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 19
	mov	DWORD PTR _num$[ebp], 0
; Line 27
	mov	DWORD PTR _i$1405[ebp], 0
	jmp	SHORT $LN41@Huffman_Ge
$LN40@Huffman_Ge:
	mov	eax, DWORD PTR _i$1405[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1405[ebp], eax
$LN41@Huffman_Ge:
	cmp	DWORD PTR _i$1405[ebp], 64		; 00000040H
	jae	SHORT $LN39@Huffman_Ge
; Line 28
	mov	ecx, DWORD PTR _i$1405[ebp]
	mov	DWORD PTR _counters$1406[ebp+ecx*4], 0
	jmp	SHORT $LN40@Huffman_Ge
$LN39@Huffman_Ge:
; Line 29
	mov	DWORD PTR _i$1405[ebp], 0
	jmp	SHORT $LN38@Huffman_Ge
$LN37@Huffman_Ge:
	mov	edx, DWORD PTR _i$1405[ebp]
	add	edx, 1
	mov	DWORD PTR _i$1405[ebp], edx
$LN38@Huffman_Ge:
	mov	eax, DWORD PTR _i$1405[ebp]
	cmp	eax, DWORD PTR _numSymbols$[ebp]
	jae	SHORT $LN36@Huffman_Ge
; Line 31
	mov	ecx, DWORD PTR _i$1405[ebp]
	mov	edx, DWORD PTR _freqs$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _freq$1413[ebp], eax
; Line 32
	cmp	DWORD PTR _freq$1413[ebp], 63		; 0000003fH
	jae	SHORT $LN44@Huffman_Ge
	mov	ecx, DWORD PTR _freq$1413[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN45@Huffman_Ge
$LN44@Huffman_Ge:
	mov	DWORD PTR tv73[ebp], 63			; 0000003fH
$LN45@Huffman_Ge:
	mov	edx, DWORD PTR tv73[ebp]
	mov	eax, DWORD PTR _counters$1406[ebp+edx*4]
	add	eax, 1
	mov	ecx, DWORD PTR tv73[ebp]
	mov	DWORD PTR _counters$1406[ebp+ecx*4], eax
; Line 33
	jmp	SHORT $LN37@Huffman_Ge
$LN36@Huffman_Ge:
; Line 35
	mov	DWORD PTR _i$1405[ebp], 1
	jmp	SHORT $LN35@Huffman_Ge
$LN34@Huffman_Ge:
	mov	edx, DWORD PTR _i$1405[ebp]
	add	edx, 1
	mov	DWORD PTR _i$1405[ebp], edx
$LN35@Huffman_Ge:
	cmp	DWORD PTR _i$1405[ebp], 64		; 00000040H
	jae	SHORT $LN33@Huffman_Ge
; Line 37
	mov	eax, DWORD PTR _i$1405[ebp]
	mov	ecx, DWORD PTR _counters$1406[ebp+eax*4]
	mov	DWORD PTR _temp$1417[ebp], ecx
; Line 38
	mov	edx, DWORD PTR _i$1405[ebp]
	mov	eax, DWORD PTR _num$[ebp]
	mov	DWORD PTR _counters$1406[ebp+edx*4], eax
; Line 39
	mov	ecx, DWORD PTR _num$[ebp]
	add	ecx, DWORD PTR _temp$1417[ebp]
	mov	DWORD PTR _num$[ebp], ecx
; Line 40
	jmp	SHORT $LN34@Huffman_Ge
$LN33@Huffman_Ge:
; Line 42
	mov	DWORD PTR _i$1405[ebp], 0
	jmp	SHORT $LN32@Huffman_Ge
$LN31@Huffman_Ge:
	mov	edx, DWORD PTR _i$1405[ebp]
	add	edx, 1
	mov	DWORD PTR _i$1405[ebp], edx
$LN32@Huffman_Ge:
	mov	eax, DWORD PTR _i$1405[ebp]
	cmp	eax, DWORD PTR _numSymbols$[ebp]
	jae	$LN30@Huffman_Ge
; Line 44
	mov	ecx, DWORD PTR _i$1405[ebp]
	mov	edx, DWORD PTR _freqs$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _freq$1421[ebp], eax
; Line 45
	cmp	DWORD PTR _freq$1421[ebp], 0
	jne	SHORT $LN29@Huffman_Ge
; Line 46
	mov	ecx, DWORD PTR _lens$[ebp]
	add	ecx, DWORD PTR _i$1405[ebp]
	mov	BYTE PTR [ecx], 0
; Line 47
	jmp	SHORT $LN28@Huffman_Ge
$LN29@Huffman_Ge:
; Line 48
	cmp	DWORD PTR _freq$1421[ebp], 63		; 0000003fH
	jae	SHORT $LN46@Huffman_Ge
	mov	edx, DWORD PTR _freq$1421[ebp]
	mov	DWORD PTR tv95[ebp], edx
	jmp	SHORT $LN47@Huffman_Ge
$LN46@Huffman_Ge:
	mov	DWORD PTR tv95[ebp], 63			; 0000003fH
$LN47@Huffman_Ge:
	mov	eax, DWORD PTR _freq$1421[ebp]
	shl	eax, 10					; 0000000aH
	or	eax, DWORD PTR _i$1405[ebp]
	mov	ecx, DWORD PTR tv95[ebp]
	mov	edx, DWORD PTR _counters$1406[ebp+ecx*4]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
	mov	edx, DWORD PTR tv95[ebp]
	mov	eax, DWORD PTR _counters$1406[ebp+edx*4]
	add	eax, 1
	mov	ecx, DWORD PTR tv95[ebp]
	mov	DWORD PTR _counters$1406[ebp+ecx*4], eax
$LN28@Huffman_Ge:
; Line 49
	jmp	$LN31@Huffman_Ge
$LN30@Huffman_Ge:
; Line 50
	mov	DWORD PTR _counters$1406[ebp], 0
; Line 51
	mov	edx, DWORD PTR _counters$1406[ebp+252]
	sub	edx, DWORD PTR _counters$1406[ebp+248]
	push	edx
	mov	eax, DWORD PTR _counters$1406[ebp+248]
	mov	ecx, DWORD PTR _p$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	_HeapSort@8
; Line 68
	cmp	DWORD PTR _num$[ebp], 2
	jae	SHORT $LN27@Huffman_Ge
; Line 70
	mov	DWORD PTR _minCode$1425[ebp], 0
; Line 71
	mov	DWORD PTR _maxCode$1426[ebp], 1
; Line 72
	cmp	DWORD PTR _num$[ebp], 1
	jne	SHORT $LN26@Huffman_Ge
; Line 74
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 1023				; 000003ffH
	mov	DWORD PTR _maxCode$1426[ebp], ecx
; Line 75
	jne	SHORT $LN26@Huffman_Ge
; Line 76
	mov	edx, DWORD PTR _maxCode$1426[ebp]
	add	edx, 1
	mov	DWORD PTR _maxCode$1426[ebp], edx
$LN26@Huffman_Ge:
; Line 78
	mov	eax, DWORD PTR _minCode$1425[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+eax*4], 0
; Line 79
	mov	edx, DWORD PTR _maxCode$1426[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+edx*4], 1
; Line 80
	mov	ecx, DWORD PTR _lens$[ebp]
	add	ecx, DWORD PTR _maxCode$1426[ebp]
	mov	BYTE PTR [ecx], 1
	mov	edx, DWORD PTR _lens$[ebp]
	add	edx, DWORD PTR _minCode$1425[ebp]
	mov	BYTE PTR [edx], 1
; Line 81
	jmp	$LN42@Huffman_Ge
$LN27@Huffman_Ge:
; Line 87
	mov	DWORD PTR _e$1431[ebp], 0
	mov	eax, DWORD PTR _e$1431[ebp]
	mov	DWORD PTR _b$1430[ebp], eax
	mov	ecx, DWORD PTR _b$1430[ebp]
	mov	DWORD PTR _i$1432[ebp], ecx
$LN24@Huffman_Ge:
; Line 91
	mov	edx, DWORD PTR _i$1432[ebp]
	cmp	edx, DWORD PTR _num$[ebp]
	je	SHORT $LN49@Huffman_Ge
	mov	eax, DWORD PTR _b$1430[ebp]
	cmp	eax, DWORD PTR _e$1431[ebp]
	je	SHORT $LN48@Huffman_Ge
	mov	ecx, DWORD PTR _i$1432[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	shr	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _b$1430[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4]
	shr	ecx, 10					; 0000000aH
	cmp	eax, ecx
	ja	SHORT $LN49@Huffman_Ge
$LN48@Huffman_Ge:
	mov	edx, DWORD PTR _i$1432[ebp]
	mov	DWORD PTR tv169[ebp], edx
	mov	eax, DWORD PTR _i$1432[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1432[ebp], eax
	jmp	SHORT $LN50@Huffman_Ge
$LN49@Huffman_Ge:
	mov	ecx, DWORD PTR _b$1430[ebp]
	mov	DWORD PTR tv169[ebp], ecx
	mov	edx, DWORD PTR _b$1430[ebp]
	add	edx, 1
	mov	DWORD PTR _b$1430[ebp], edx
$LN50@Huffman_Ge:
	mov	eax, DWORD PTR tv169[ebp]
	mov	DWORD PTR _n$1436[ebp], eax
; Line 92
	mov	ecx, DWORD PTR _n$1436[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	and	eax, -1024				; fffffc00H
	mov	DWORD PTR _freq$1438[ebp], eax
; Line 93
	mov	ecx, DWORD PTR _n$1436[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	and	eax, 1023				; 000003ffH
	mov	ecx, DWORD PTR _e$1431[ebp]
	shl	ecx, 10					; 0000000aH
	or	eax, ecx
	mov	edx, DWORD PTR _n$1436[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
; Line 94
	mov	edx, DWORD PTR _i$1432[ebp]
	cmp	edx, DWORD PTR _num$[ebp]
	je	SHORT $LN52@Huffman_Ge
	mov	eax, DWORD PTR _b$1430[ebp]
	cmp	eax, DWORD PTR _e$1431[ebp]
	je	SHORT $LN51@Huffman_Ge
	mov	ecx, DWORD PTR _i$1432[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	shr	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _b$1430[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4]
	shr	ecx, 10					; 0000000aH
	cmp	eax, ecx
	ja	SHORT $LN52@Huffman_Ge
$LN51@Huffman_Ge:
	mov	edx, DWORD PTR _i$1432[ebp]
	mov	DWORD PTR tv191[ebp], edx
	mov	eax, DWORD PTR _i$1432[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1432[ebp], eax
	jmp	SHORT $LN53@Huffman_Ge
$LN52@Huffman_Ge:
	mov	ecx, DWORD PTR _b$1430[ebp]
	mov	DWORD PTR tv191[ebp], ecx
	mov	edx, DWORD PTR _b$1430[ebp]
	add	edx, 1
	mov	DWORD PTR _b$1430[ebp], edx
$LN53@Huffman_Ge:
	mov	eax, DWORD PTR tv191[ebp]
	mov	DWORD PTR _m$1437[ebp], eax
; Line 95
	mov	ecx, DWORD PTR _m$1437[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	and	eax, -1024				; fffffc00H
	add	eax, DWORD PTR _freq$1438[ebp]
	mov	DWORD PTR _freq$1438[ebp], eax
; Line 96
	mov	ecx, DWORD PTR _m$1437[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	and	eax, 1023				; 000003ffH
	mov	ecx, DWORD PTR _e$1431[ebp]
	shl	ecx, 10					; 0000000aH
	or	eax, ecx
	mov	edx, DWORD PTR _m$1437[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
; Line 97
	mov	edx, DWORD PTR _e$1431[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	and	ecx, 1023				; 000003ffH
	or	ecx, DWORD PTR _freq$1438[ebp]
	mov	edx, DWORD PTR _e$1431[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+edx*4], ecx
; Line 98
	mov	ecx, DWORD PTR _e$1431[ebp]
	add	ecx, 1
	mov	DWORD PTR _e$1431[ebp], ecx
; Line 100
	mov	edx, DWORD PTR _num$[ebp]
	sub	edx, DWORD PTR _e$1431[ebp]
	cmp	edx, 1
	ja	$LN24@Huffman_Ge
; Line 104
	mov	DWORD PTR _i$1432[ebp], 0
	jmp	SHORT $LN21@Huffman_Ge
$LN20@Huffman_Ge:
	mov	eax, DWORD PTR _i$1432[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1432[ebp], eax
$LN21@Huffman_Ge:
	cmp	DWORD PTR _i$1432[ebp], 16		; 00000010H
	ja	SHORT $LN19@Huffman_Ge
; Line 105
	mov	ecx, DWORD PTR _i$1432[ebp]
	mov	DWORD PTR _lenCounters$1439[ebp+ecx*4], 0
	jmp	SHORT $LN20@Huffman_Ge
$LN19@Huffman_Ge:
; Line 107
	mov	edx, DWORD PTR _e$1431[ebp]
	sub	edx, 1
	mov	DWORD PTR _e$1431[ebp], edx
	mov	eax, DWORD PTR _e$1431[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	and	edx, 1023				; 000003ffH
	mov	eax, DWORD PTR _e$1431[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
; Line 108
	mov	DWORD PTR _lenCounters$1439[ebp+4], 2
$LN18@Huffman_Ge:
; Line 109
	cmp	DWORD PTR _e$1431[ebp], 0
	jbe	$LN17@Huffman_Ge
; Line 111
	mov	edx, DWORD PTR _e$1431[ebp]
	sub	edx, 1
	mov	DWORD PTR _e$1431[ebp], edx
	mov	eax, DWORD PTR _e$1431[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	shr	edx, 10					; 0000000aH
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	shr	ecx, 10					; 0000000aH
	add	ecx, 1
	mov	DWORD PTR _len$1446[ebp], ecx
; Line 112
	mov	edx, DWORD PTR _e$1431[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	and	ecx, 1023				; 000003ffH
	mov	edx, DWORD PTR _len$1446[ebp]
	shl	edx, 10					; 0000000aH
	or	ecx, edx
	mov	eax, DWORD PTR _e$1431[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
; Line 113
	mov	eax, DWORD PTR _len$1446[ebp]
	cmp	eax, DWORD PTR _maxLen$[ebp]
	jb	SHORT $LN16@Huffman_Ge
; Line 114
	mov	ecx, DWORD PTR _maxLen$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _len$1446[ebp], ecx
	jmp	SHORT $LN15@Huffman_Ge
$LN14@Huffman_Ge:
	mov	edx, DWORD PTR _len$1446[ebp]
	sub	edx, 1
	mov	DWORD PTR _len$1446[ebp], edx
$LN15@Huffman_Ge:
	mov	eax, DWORD PTR _len$1446[ebp]
	cmp	DWORD PTR _lenCounters$1439[ebp+eax*4], 0
	jne	SHORT $LN16@Huffman_Ge
	jmp	SHORT $LN14@Huffman_Ge
$LN16@Huffman_Ge:
; Line 115
	mov	ecx, DWORD PTR _len$1446[ebp]
	mov	edx, DWORD PTR _lenCounters$1439[ebp+ecx*4]
	sub	edx, 1
	mov	eax, DWORD PTR _len$1446[ebp]
	mov	DWORD PTR _lenCounters$1439[ebp+eax*4], edx
; Line 116
	mov	ecx, DWORD PTR _len$1446[ebp]
	mov	edx, DWORD PTR _lenCounters$1439[ebp+ecx*4+4]
	add	edx, 2
	mov	eax, DWORD PTR _len$1446[ebp]
	mov	DWORD PTR _lenCounters$1439[ebp+eax*4+4], edx
; Line 117
	jmp	$LN18@Huffman_Ge
$LN17@Huffman_Ge:
; Line 121
	mov	DWORD PTR _i$1432[ebp], 0
; Line 122
	mov	ecx, DWORD PTR _maxLen$[ebp]
	mov	DWORD PTR _len$1451[ebp], ecx
	jmp	SHORT $LN12@Huffman_Ge
$LN11@Huffman_Ge:
	mov	edx, DWORD PTR _len$1451[ebp]
	sub	edx, 1
	mov	DWORD PTR _len$1451[ebp], edx
$LN12@Huffman_Ge:
	cmp	DWORD PTR _len$1451[ebp], 0
	je	SHORT $LN10@Huffman_Ge
; Line 125
	mov	eax, DWORD PTR _len$1451[ebp]
	mov	ecx, DWORD PTR _lenCounters$1439[ebp+eax*4]
	mov	DWORD PTR _num$1455[ebp], ecx
	jmp	SHORT $LN9@Huffman_Ge
$LN8@Huffman_Ge:
	mov	edx, DWORD PTR _num$1455[ebp]
	sub	edx, 1
	mov	DWORD PTR _num$1455[ebp], edx
$LN9@Huffman_Ge:
	cmp	DWORD PTR _num$1455[ebp], 0
	je	SHORT $LN7@Huffman_Ge
; Line 126
	mov	eax, DWORD PTR _i$1432[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	and	edx, 1023				; 000003ffH
	mov	eax, DWORD PTR _lens$[ebp]
	mov	cl, BYTE PTR _len$1451[ebp]
	mov	BYTE PTR [eax+edx], cl
	mov	edx, DWORD PTR _i$1432[ebp]
	add	edx, 1
	mov	DWORD PTR _i$1432[ebp], edx
	jmp	SHORT $LN8@Huffman_Ge
$LN7@Huffman_Ge:
; Line 127
	jmp	SHORT $LN11@Huffman_Ge
$LN10@Huffman_Ge:
; Line 133
	mov	DWORD PTR _code$1461[ebp], 0
; Line 135
	mov	DWORD PTR _len$1462[ebp], 1
	jmp	SHORT $LN6@Huffman_Ge
$LN5@Huffman_Ge:
	mov	eax, DWORD PTR _len$1462[ebp]
	add	eax, 1
	mov	DWORD PTR _len$1462[ebp], eax
$LN6@Huffman_Ge:
	cmp	DWORD PTR _len$1462[ebp], 16		; 00000010H
	ja	SHORT $LN4@Huffman_Ge
; Line 136
	mov	ecx, DWORD PTR _len$1462[ebp]
	mov	edx, DWORD PTR _code$1461[ebp]
	add	edx, DWORD PTR _lenCounters$1439[ebp+ecx*4-4]
	shl	edx, 1
	mov	DWORD PTR _code$1461[ebp], edx
	mov	eax, DWORD PTR _len$1462[ebp]
	mov	ecx, DWORD PTR _code$1461[ebp]
	mov	DWORD PTR _nextCodes$1460[ebp+eax*4], ecx
	jmp	SHORT $LN5@Huffman_Ge
$LN4@Huffman_Ge:
; Line 142
	mov	DWORD PTR _i$1466[ebp], 0
	jmp	SHORT $LN3@Huffman_Ge
$LN2@Huffman_Ge:
	mov	edx, DWORD PTR _i$1466[ebp]
	add	edx, 1
	mov	DWORD PTR _i$1466[ebp], edx
$LN3@Huffman_Ge:
	mov	eax, DWORD PTR _i$1466[ebp]
	cmp	eax, DWORD PTR _numSymbols$[ebp]
	jae	SHORT $LN42@Huffman_Ge
; Line 143
	mov	ecx, DWORD PTR _lens$[ebp]
	add	ecx, DWORD PTR _i$1466[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _i$1466[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _nextCodes$1460[ebp+edx*4]
	mov	DWORD PTR [ecx+eax*4], edx
	mov	eax, DWORD PTR _lens$[ebp]
	add	eax, DWORD PTR _i$1466[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _nextCodes$1460[ebp+ecx*4]
	add	edx, 1
	mov	eax, DWORD PTR _lens$[ebp]
	add	eax, DWORD PTR _i$1466[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _nextCodes$1460[ebp+ecx*4], edx
	jmp	SHORT $LN2@Huffman_Ge
$LN42@Huffman_Ge:
; Line 148
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN58@Huffman_Ge
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 512				; 00000200H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
	npad	3
$LN58@Huffman_Ge:
	DD	3
	DD	$LN57@Huffman_Ge
$LN57@Huffman_Ge:
	DD	-272					; fffffef0H
	DD	256					; 00000100H
	DD	$LN54@Huffman_Ge
	DD	-392					; fffffe78H
	DD	68					; 00000044H
	DD	$LN55@Huffman_Ge
	DD	-480					; fffffe20H
	DD	68					; 00000044H
	DD	$LN56@Huffman_Ge
$LN56@Huffman_Ge:
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN55@Huffman_Ge:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	0
$LN54@Huffman_Ge:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	0
_Huffman_Generate@20 ENDP
_TEXT	ENDS
END
