; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\CPP\Common\Wildcard.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?g_CaseSensitive@@3_NA				; g_CaseSensitive
_BSS	SEGMENT
?g_CaseSensitive@@3_NA DB 01H DUP (?)			; g_CaseSensitive
_BSS	ENDS
CONST	SEGMENT
$SG67687 DB	'*', 00H, 00H, 00H
$SG67871 DB	'?', 00H, 00H, 00H
$SG67889 DB	'.', 00H, 00H, 00H
$SG67893 DB	'?', 00H, 00H, 00H
$SG67899 DB	'UNC', 00H
$SG67921 DB	'Empty file path', 00H
$SG67928 DB	'?', 00H, 00H, 00H
$SG67943 DB	'.', 00H, '.', 00H, 00H, 00H
	ORG $+2
$SG67944 DB	'.', 00H, 00H, 00H
$SG67963 DB	'*', 00H, 00H, 00H
CONST	ENDS
PUBLIC	?IsPath1PrefixedByPath2@@YG_NPB_W0@Z		; IsPath1PrefixedByPath2
EXTRN	?IsString1PrefixedByString2_NoCase@@YG_NPB_W0@Z:PROC ; IsString1PrefixedByString2_NoCase
EXTRN	?IsString1PrefixedByString2@@YG_NPB_W0@Z:PROC	; IsString1PrefixedByString2
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\cpp\common\wildcard.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
?IsPath1PrefixedByPath2@@YG_NPB_W0@Z PROC		; IsPath1PrefixedByPath2
; Line 16
	push	ebp
	mov	ebp, esp
; Line 17
	movzx	eax, BYTE PTR ?g_CaseSensitive@@3_NA	; g_CaseSensitive
	test	eax, eax
	je	SHORT $LN1@IsPath1Pre
; Line 18
	mov	ecx, DWORD PTR _s2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s1$[ebp]
	push	edx
	call	?IsString1PrefixedByString2@@YG_NPB_W0@Z ; IsString1PrefixedByString2
	jmp	SHORT $LN2@IsPath1Pre
$LN1@IsPath1Pre:
; Line 19
	mov	eax, DWORD PTR _s2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s1$[ebp]
	push	ecx
	call	?IsString1PrefixedByString2_NoCase@@YG_NPB_W0@Z ; IsString1PrefixedByString2_NoCase
$LN2@IsPath1Pre:
; Line 20
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?IsPath1PrefixedByPath2@@YG_NPB_W0@Z ENDP		; IsPath1PrefixedByPath2
_TEXT	ENDS
PUBLIC	?CompareFileNames@@YGHPB_W0@Z			; CompareFileNames
EXTRN	?MyStringCompareNoCase@@YGHPB_W0@Z:PROC		; MyStringCompareNoCase
EXTRN	__imp__wcscmp:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
?CompareFileNames@@YGHPB_W0@Z PROC			; CompareFileNames
; Line 23
	push	ebp
	mov	ebp, esp
	push	esi
; Line 24
	movzx	eax, BYTE PTR ?g_CaseSensitive@@3_NA	; g_CaseSensitive
	test	eax, eax
	je	SHORT $LN1@CompareFil
; Line 25
	mov	esi, esp
	mov	ecx, DWORD PTR _s2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s1$[ebp]
	push	edx
	call	DWORD PTR __imp__wcscmp
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN2@CompareFil
$LN1@CompareFil:
; Line 26
	mov	eax, DWORD PTR _s2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s1$[ebp]
	push	ecx
	call	?MyStringCompareNoCase@@YGHPB_W0@Z	; MyStringCompareNoCase
$LN2@CompareFil:
; Line 27
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?CompareFileNames@@YGHPB_W0@Z ENDP			; CompareFileNames
_TEXT	ENDS
PUBLIC	??1UString@@QAE@XZ				; UString::~UString
PUBLIC	?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z ; CObjectVector<UString>::Add
PUBLIC	?Ptr@UString@@QBEPB_WI@Z			; UString::Ptr
PUBLIC	?IsPathSepar@@YG_N_W@Z				; IsPathSepar
PUBLIC	??BUString@@QBEPB_WXZ				; UString::operator wchar_t const *
PUBLIC	?Len@UString@@QBEIXZ				; UString::Len
PUBLIC	?Clear@?$CObjectVector@VUString@@@@QAEXXZ	; CObjectVector<UString>::Clear
PUBLIC	?SplitPathToParts@@YGXABVUString@@AAV?$CObjectVector@VUString@@@@@Z ; SplitPathToParts
EXTRN	?SetFrom@UString@@QAEXPB_WI@Z:PROC		; UString::SetFrom
EXTRN	??0UString@@QAE@XZ:PROC				; UString::UString
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
xdata$x	SEGMENT
__unwindtable$?SplitPathToParts@@YGXABVUString@@AAV?$CObjectVector@VUString@@@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SplitPathToParts@@YGXABVUString@@AAV?$CObjectVector@VUString@@@@@Z$0
__ehfuncinfo$?SplitPathToParts@@YGXABVUString@@AAV?$CObjectVector@VUString@@@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SplitPathToParts@@YGXABVUString@@AAV?$CObjectVector@VUString@@@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
_i$67617 = -44						; size = 4
_prev$ = -40						; size = 4
_name$ = -32						; size = 12
_len$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_path$ = 8						; size = 4
_pathParts$ = 12					; size = 4
?SplitPathToParts@@YGXABVUString@@AAV?$CObjectVector@VUString@@@@@Z PROC ; SplitPathToParts
; Line 78
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SplitPathToParts@@YGXABVUString@@AAV?$CObjectVector@VUString@@@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-44], eax
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 79
	mov	ecx, DWORD PTR _pathParts$[ebp]
	call	?Clear@?$CObjectVector@VUString@@@@QAEXXZ ; CObjectVector<UString>::Clear
; Line 80
	mov	ecx, DWORD PTR _path$[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	mov	DWORD PTR _len$[ebp], eax
; Line 81
	cmp	DWORD PTR _len$[ebp], 0
	jne	SHORT $LN5@SplitPathT
; Line 82
	jmp	$LN6@SplitPathT
$LN5@SplitPathT:
; Line 83
	lea	ecx, DWORD PTR _name$[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 84
	mov	DWORD PTR _prev$[ebp], 0
; Line 85
	mov	DWORD PTR _i$67617[ebp], 0
	jmp	SHORT $LN4@SplitPathT
$LN3@SplitPathT:
	mov	eax, DWORD PTR _i$67617[ebp]
	add	eax, 1
	mov	DWORD PTR _i$67617[ebp], eax
$LN4@SplitPathT:
	mov	ecx, DWORD PTR _i$67617[ebp]
	cmp	ecx, DWORD PTR _len$[ebp]
	jae	SHORT $LN2@SplitPathT
; Line 86
	mov	ecx, DWORD PTR _path$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	edx, DWORD PTR _i$67617[ebp]
	movzx	eax, WORD PTR [eax+edx*2]
	push	eax
	call	?IsPathSepar@@YG_N_W@Z			; IsPathSepar
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@SplitPathT
; Line 88
	mov	edx, DWORD PTR _i$67617[ebp]
	sub	edx, DWORD PTR _prev$[ebp]
	push	edx
	mov	eax, DWORD PTR _prev$[ebp]
	push	eax
	mov	ecx, DWORD PTR _path$[ebp]
	call	?Ptr@UString@@QBEPB_WI@Z		; UString::Ptr
	push	eax
	lea	ecx, DWORD PTR _name$[ebp]
	call	?SetFrom@UString@@QAEXPB_WI@Z		; UString::SetFrom
; Line 89
	lea	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pathParts$[ebp]
	call	?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z ; CObjectVector<UString>::Add
; Line 90
	mov	edx, DWORD PTR _i$67617[ebp]
	add	edx, 1
	mov	DWORD PTR _prev$[ebp], edx
$LN1@SplitPathT:
; Line 91
	jmp	SHORT $LN3@SplitPathT
$LN2@SplitPathT:
; Line 92
	mov	eax, DWORD PTR _len$[ebp]
	sub	eax, DWORD PTR _prev$[ebp]
	push	eax
	mov	ecx, DWORD PTR _prev$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _path$[ebp]
	call	?Ptr@UString@@QBEPB_WI@Z		; UString::Ptr
	push	eax
	lea	ecx, DWORD PTR _name$[ebp]
	call	?SetFrom@UString@@QAEXPB_WI@Z		; UString::SetFrom
; Line 93
	lea	edx, DWORD PTR _name$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pathParts$[ebp]
	call	?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z ; CObjectVector<UString>::Add
; Line 94
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _name$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
$LN6@SplitPathT:
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@SplitPathT
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN12@SplitPathT:
	DD	1
	DD	$LN11@SplitPathT
$LN11@SplitPathT:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN9@SplitPathT
$LN9@SplitPathT:
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SplitPathToParts@@YGXABVUString@@AAV?$CObjectVector@VUString@@@@@Z$0:
	lea	ecx, DWORD PTR _name$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$?SplitPathToParts@@YGXABVUString@@AAV?$CObjectVector@VUString@@@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SplitPathToParts@@YGXABVUString@@AAV?$CObjectVector@VUString@@@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SplitPathToParts@@YGXABVUString@@AAV?$CObjectVector@VUString@@@@@Z ENDP ; SplitPathToParts
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsPathSepar@@YG_N_W@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
_c$ = 8							; size = 2
?IsPathSepar@@YG_N_W@Z PROC				; IsPathSepar, COMDAT
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	movzx	eax, WORD PTR _c$[ebp]
	cmp	eax, 92					; 0000005cH
	je	SHORT $LN3@IsPathSepa
	movzx	ecx, WORD PTR _c$[ebp]
	cmp	ecx, 47					; 0000002fH
	je	SHORT $LN3@IsPathSepa
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@IsPathSepa
$LN3@IsPathSepa:
	mov	DWORD PTR tv68[ebp], 1
$LN4@IsPathSepa:
	mov	al, BYTE PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsPathSepar@@YG_N_W@Z ENDP				; IsPathSepar
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1UString@@QAE@XZ
_TEXT	SEGMENT
$T68423 = -8						; size = 4
_this$ = -4						; size = 4
??1UString@@QAE@XZ PROC					; UString::~UString, COMDAT
; _this$ = ecx
; Line 470
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T68423[ebp], ecx
	mov	edx, DWORD PTR $T68423[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1UString@@QAE@XZ ENDP					; UString::~UString
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Len@UString@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Len@UString@@QBEIXZ PROC				; UString::Len, COMDAT
; _this$ = ecx
; Line 472
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Len@UString@@QBEIXZ ENDP				; UString::Len
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??BUString@@QBEPB_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BUString@@QBEPB_WXZ PROC				; UString::operator wchar_t const *, COMDAT
; _this$ = ecx
; Line 476
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??BUString@@QBEPB_WXZ ENDP				; UString::operator wchar_t const *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Ptr@UString@@QBEPB_WI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pos$ = 8						; size = 4
?Ptr@UString@@QBEPB_WI@Z PROC				; UString::Ptr, COMDAT
; _this$ = ecx
; Line 478
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pos$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	mov	esp, ebp
	pop	ebp
	ret	4
?Ptr@UString@@QBEPB_WI@Z ENDP				; UString::Ptr
_TEXT	ENDS
PUBLIC	?SplitPathToParts_2@@YGXABVUString@@AAV1@1@Z	; SplitPathToParts_2
EXTRN	??4UString@@QAEAAV0@PB_W@Z:PROC			; UString::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = -8						; size = 4
_start$ = -4						; size = 4
_path$ = 8						; size = 4
_dirPrefix$ = 12					; size = 4
_name$ = 16						; size = 4
?SplitPathToParts_2@@YGXABVUString@@AAV1@1@Z PROC	; SplitPathToParts_2
; File c:\workspace\7z1505-src\cpp\common\wildcard.cpp
; Line 97
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 98
	mov	ecx, DWORD PTR _path$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	DWORD PTR _start$[ebp], eax
; Line 99
	mov	ecx, DWORD PTR _path$[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	mov	ecx, DWORD PTR _start$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _p$[ebp], edx
; Line 100
	jmp	SHORT $LN4@SplitPathT@2
$LN3@SplitPathT@2:
	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, 2
	mov	DWORD PTR _p$[ebp], eax
$LN4@SplitPathT@2:
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	ecx, DWORD PTR _start$[ebp]
	je	SHORT $LN2@SplitPathT@2
; Line 101
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, WORD PTR [edx-2]
	push	eax
	call	?IsPathSepar@@YG_N_W@Z			; IsPathSepar
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@SplitPathT@2
; Line 102
	jmp	SHORT $LN2@SplitPathT@2
$LN1@SplitPathT@2:
; Line 103
	jmp	SHORT $LN3@SplitPathT@2
$LN2@SplitPathT@2:
	mov	edx, DWORD PTR _p$[ebp]
	sub	edx, DWORD PTR _start$[ebp]
	sar	edx, 1
	push	edx
	mov	ecx, DWORD PTR _path$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	mov	ecx, DWORD PTR _dirPrefix$[ebp]
	call	?SetFrom@UString@@QAEXPB_WI@Z		; UString::SetFrom
; Line 104
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	call	??4UString@@QAEAAV0@PB_W@Z		; UString::operator=
; Line 105
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SplitPathToParts_2@@YGXABVUString@@AAV1@1@Z ENDP	; SplitPathToParts_2
_TEXT	ENDS
PUBLIC	?SplitPathToParts_Smart@@YGXABVUString@@AAV1@1@Z ; SplitPathToParts_Smart
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = -8						; size = 4
_start$ = -4						; size = 4
_path$ = 8						; size = 4
_dirPrefix$ = 12					; size = 4
_name$ = 16						; size = 4
?SplitPathToParts_Smart@@YGXABVUString@@AAV1@1@Z PROC	; SplitPathToParts_Smart
; Line 108
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 109
	mov	ecx, DWORD PTR _path$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	DWORD PTR _start$[ebp], eax
; Line 110
	mov	ecx, DWORD PTR _path$[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	mov	ecx, DWORD PTR _start$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _p$[ebp], edx
; Line 111
	mov	eax, DWORD PTR _p$[ebp]
	cmp	eax, DWORD PTR _start$[ebp]
	je	SHORT $LN6@SplitPathT@3
; Line 113
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, WORD PTR [ecx-2]
	push	edx
	call	?IsPathSepar@@YG_N_W@Z			; IsPathSepar
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@SplitPathT@3
; Line 114
	mov	ecx, DWORD PTR _p$[ebp]
	sub	ecx, 2
	mov	DWORD PTR _p$[ebp], ecx
$LN5@SplitPathT@3:
; Line 115
	jmp	SHORT $LN4@SplitPathT@3
$LN3@SplitPathT@3:
	mov	edx, DWORD PTR _p$[ebp]
	sub	edx, 2
	mov	DWORD PTR _p$[ebp], edx
$LN4@SplitPathT@3:
	mov	eax, DWORD PTR _p$[ebp]
	cmp	eax, DWORD PTR _start$[ebp]
	je	SHORT $LN6@SplitPathT@3
; Line 116
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, WORD PTR [ecx-2]
	push	edx
	call	?IsPathSepar@@YG_N_W@Z			; IsPathSepar
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@SplitPathT@3
; Line 117
	jmp	SHORT $LN6@SplitPathT@3
$LN1@SplitPathT@3:
; Line 118
	jmp	SHORT $LN3@SplitPathT@3
$LN6@SplitPathT@3:
; Line 119
	mov	ecx, DWORD PTR _p$[ebp]
	sub	ecx, DWORD PTR _start$[ebp]
	sar	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _path$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	mov	ecx, DWORD PTR _dirPrefix$[ebp]
	call	?SetFrom@UString@@QAEXPB_WI@Z		; UString::SetFrom
; Line 120
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	ecx, DWORD PTR _name$[ebp]
	call	??4UString@@QAEAAV0@PB_W@Z		; UString::operator=
; Line 121
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SplitPathToParts_Smart@@YGXABVUString@@AAV1@1@Z ENDP	; SplitPathToParts_Smart
_TEXT	ENDS
PUBLIC	?Left@UString@@QBE?AV1@I@Z			; UString::Left
PUBLIC	?ExtractDirPrefixFromPath@@YG?AVUString@@ABV1@@Z ; ExtractDirPrefixFromPath
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T68435 = -12						; size = 4
_p$ = -8						; size = 4
_start$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_path$ = 12						; size = 4
?ExtractDirPrefixFromPath@@YG?AVUString@@ABV1@@Z PROC	; ExtractDirPrefixFromPath
; Line 124
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR $T68435[ebp], 0
; Line 125
	mov	ecx, DWORD PTR _path$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	DWORD PTR _start$[ebp], eax
; Line 126
	mov	ecx, DWORD PTR _path$[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	mov	ecx, DWORD PTR _start$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _p$[ebp], edx
; Line 127
	jmp	SHORT $LN4@ExtractDir
$LN3@ExtractDir:
	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, 2
	mov	DWORD PTR _p$[ebp], eax
$LN4@ExtractDir:
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	ecx, DWORD PTR _start$[ebp]
	je	SHORT $LN2@ExtractDir
; Line 128
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, WORD PTR [edx-2]
	push	eax
	call	?IsPathSepar@@YG_N_W@Z			; IsPathSepar
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@ExtractDir
; Line 129
	jmp	SHORT $LN2@ExtractDir
$LN1@ExtractDir:
; Line 130
	jmp	SHORT $LN3@ExtractDir
$LN2@ExtractDir:
	mov	edx, DWORD PTR _p$[ebp]
	sub	edx, DWORD PTR _start$[ebp]
	sar	edx, 1
	push	edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _path$[ebp]
	call	?Left@UString@@QBE?AV1@I@Z		; UString::Left
	mov	ecx, DWORD PTR $T68435[ebp]
	or	ecx, 1
	mov	DWORD PTR $T68435[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 131
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?ExtractDirPrefixFromPath@@YG?AVUString@@ABV1@@Z ENDP	; ExtractDirPrefixFromPath
_TEXT	ENDS
EXTRN	??0UString@@AAE@IABV0@@Z:PROC			; UString::UString
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Left@UString@@QBE?AV1@I@Z
_TEXT	SEGMENT
$T68439 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_count$ = 12						; size = 4
?Left@UString@@QBE?AV1@I@Z PROC				; UString::Left, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 540
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T68439[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0UString@@AAE@IABV0@@Z		; UString::UString
	mov	edx, DWORD PTR $T68439[ebp]
	or	edx, 1
	mov	DWORD PTR $T68439[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Left@UString@@QBE?AV1@I@Z ENDP				; UString::Left
_TEXT	ENDS
PUBLIC	?ExtractFileNameFromPath@@YG?AVUString@@ABV1@@Z	; ExtractFileNameFromPath
EXTRN	??0UString@@QAE@PB_W@Z:PROC			; UString::UString
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T68444 = -12						; size = 4
_p$ = -8						; size = 4
_start$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_path$ = 12						; size = 4
?ExtractFileNameFromPath@@YG?AVUString@@ABV1@@Z PROC	; ExtractFileNameFromPath
; File c:\workspace\7z1505-src\cpp\common\wildcard.cpp
; Line 134
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR $T68444[ebp], 0
; Line 135
	mov	ecx, DWORD PTR _path$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	DWORD PTR _start$[ebp], eax
; Line 136
	mov	ecx, DWORD PTR _path$[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	mov	ecx, DWORD PTR _start$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _p$[ebp], edx
; Line 137
	jmp	SHORT $LN4@ExtractFil
$LN3@ExtractFil:
	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, 2
	mov	DWORD PTR _p$[ebp], eax
$LN4@ExtractFil:
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	ecx, DWORD PTR _start$[ebp]
	je	SHORT $LN2@ExtractFil
; Line 138
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, WORD PTR [edx-2]
	push	eax
	call	?IsPathSepar@@YG_N_W@Z			; IsPathSepar
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@ExtractFil
; Line 139
	jmp	SHORT $LN2@ExtractFil
$LN1@ExtractFil:
; Line 140
	jmp	SHORT $LN3@ExtractFil
$LN2@ExtractFil:
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0UString@@QAE@PB_W@Z			; UString::UString
	mov	eax, DWORD PTR $T68444[ebp]
	or	eax, 1
	mov	DWORD PTR $T68444[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 141
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?ExtractFileNameFromPath@@YG?AVUString@@ABV1@@Z ENDP	; ExtractFileNameFromPath
_TEXT	ENDS
PUBLIC	?DoesWildcardMatchName@@YG_NABVUString@@0@Z	; DoesWildcardMatchName
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_mask$ = 8						; size = 4
_name$ = 12						; size = 4
?DoesWildcardMatchName@@YG_NABVUString@@0@Z PROC	; DoesWildcardMatchName
; Line 145
	push	ebp
	mov	ebp, esp
; Line 146
	mov	ecx, DWORD PTR _name$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	mov	ecx, DWORD PTR _mask$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	?EnhancedMaskTest@@YG_NPB_W0@Z		; EnhancedMaskTest
; Line 147
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?DoesWildcardMatchName@@YG_NABVUString@@0@Z ENDP	; DoesWildcardMatchName
_TEXT	ENDS
PUBLIC	?MyCharUpper@@YG_W_W@Z				; MyCharUpper
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_c$67597 = -8						; size = 2
_m$67596 = -4						; size = 2
_mask$ = 8						; size = 4
_name$ = 12						; size = 4
?EnhancedMaskTest@@YG_NPB_W0@Z PROC			; EnhancedMaskTest
; Line 44
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
$LN13@EnhancedMa:
; Line 47
	mov	eax, DWORD PTR _mask$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _m$67596[ebp], cx
; Line 48
	mov	edx, DWORD PTR _name$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR _c$67597[ebp], ax
; Line 49
	movzx	ecx, WORD PTR _m$67596[ebp]
	test	ecx, ecx
	jne	SHORT $LN11@EnhancedMa
; Line 50
	movzx	eax, WORD PTR _c$67597[ebp]
	neg	eax
	sbb	eax, eax
	add	eax, 1
	jmp	$LN14@EnhancedMa
$LN11@EnhancedMa:
; Line 51
	movzx	edx, WORD PTR _m$67596[ebp]
	cmp	edx, 42					; 0000002aH
	jne	SHORT $LN10@EnhancedMa
; Line 53
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mask$[ebp]
	add	ecx, 2
	push	ecx
	call	?EnhancedMaskTest@@YG_NPB_W0@Z		; EnhancedMaskTest
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN9@EnhancedMa
; Line 54
	mov	al, 1
	jmp	SHORT $LN14@EnhancedMa
$LN9@EnhancedMa:
; Line 55
	movzx	eax, WORD PTR _c$67597[ebp]
	test	eax, eax
	jne	SHORT $LN8@EnhancedMa
; Line 56
	xor	al, al
	jmp	SHORT $LN14@EnhancedMa
$LN8@EnhancedMa:
; Line 58
	jmp	SHORT $LN7@EnhancedMa
$LN10@EnhancedMa:
; Line 60
	movzx	ecx, WORD PTR _m$67596[ebp]
	cmp	ecx, 63					; 0000003fH
	jne	SHORT $LN6@EnhancedMa
; Line 62
	movzx	edx, WORD PTR _c$67597[ebp]
	test	edx, edx
	jne	SHORT $LN5@EnhancedMa
; Line 63
	xor	al, al
	jmp	SHORT $LN14@EnhancedMa
$LN5@EnhancedMa:
; Line 64
	jmp	SHORT $LN4@EnhancedMa
$LN6@EnhancedMa:
; Line 65
	movzx	eax, WORD PTR _m$67596[ebp]
	movzx	ecx, WORD PTR _c$67597[ebp]
	cmp	eax, ecx
	je	SHORT $LN4@EnhancedMa
; Line 66
	movzx	edx, BYTE PTR ?g_CaseSensitive@@3_NA	; g_CaseSensitive
	test	edx, edx
	jne	SHORT $LN1@EnhancedMa
	movzx	eax, WORD PTR _m$67596[ebp]
	push	eax
	call	?MyCharUpper@@YG_W_W@Z			; MyCharUpper
	movzx	esi, ax
	movzx	ecx, WORD PTR _c$67597[ebp]
	push	ecx
	call	?MyCharUpper@@YG_W_W@Z			; MyCharUpper
	movzx	edx, ax
	cmp	esi, edx
	je	SHORT $LN4@EnhancedMa
$LN1@EnhancedMa:
; Line 67
	xor	al, al
	jmp	SHORT $LN14@EnhancedMa
$LN4@EnhancedMa:
; Line 68
	mov	eax, DWORD PTR _mask$[ebp]
	add	eax, 2
	mov	DWORD PTR _mask$[ebp], eax
$LN7@EnhancedMa:
; Line 70
	mov	ecx, DWORD PTR _name$[ebp]
	add	ecx, 2
	mov	DWORD PTR _name$[ebp], ecx
; Line 71
	jmp	$LN13@EnhancedMa
$LN14@EnhancedMa:
; Line 72
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?EnhancedMaskTest@@YG_NPB_W0@Z ENDP			; EnhancedMaskTest
_TEXT	ENDS
EXTRN	?MyCharUpper_WIN@@YG_W_W@Z:PROC			; MyCharUpper_WIN
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?MyCharUpper@@YG_W_W@Z
_TEXT	SEGMENT
_c$ = 8							; size = 2
?MyCharUpper@@YG_W_W@Z PROC				; MyCharUpper, COMDAT
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 122
	push	ebp
	mov	ebp, esp
; Line 123
	movzx	eax, WORD PTR _c$[ebp]
	cmp	eax, 97					; 00000061H
	jge	SHORT $LN3@MyCharUppe
	mov	ax, WORD PTR _c$[ebp]
	jmp	SHORT $LN4@MyCharUppe
$LN3@MyCharUppe:
; Line 124
	movzx	ecx, WORD PTR _c$[ebp]
	cmp	ecx, 122				; 0000007aH
	jg	SHORT $LN2@MyCharUppe
	movzx	eax, WORD PTR _c$[ebp]
	sub	eax, 32					; 00000020H
	jmp	SHORT $LN4@MyCharUppe
$LN2@MyCharUppe:
; Line 125
	movzx	edx, WORD PTR _c$[ebp]
	cmp	edx, 127				; 0000007fH
	jg	SHORT $LN1@MyCharUppe
	mov	ax, WORD PTR _c$[ebp]
	jmp	SHORT $LN4@MyCharUppe
$LN1@MyCharUppe:
; Line 130
	movzx	eax, WORD PTR _c$[ebp]
	push	eax
	call	?MyCharUpper_WIN@@YG_W_W@Z		; MyCharUpper_WIN
$LN4@MyCharUppe:
; Line 135
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
?MyCharUpper@@YG_W_W@Z ENDP				; MyCharUpper
_TEXT	ENDS
PUBLIC	?DoesNameContainWildcard@@YG_NABVUString@@@Z	; DoesNameContainWildcard
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_c$67681 = -8						; size = 2
_i$67677 = -4						; size = 4
_path$ = 8						; size = 4
?DoesNameContainWildcard@@YG_NABVUString@@@Z PROC	; DoesNameContainWildcard
; File c:\workspace\7z1505-src\cpp\common\wildcard.cpp
; Line 150
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 151
	mov	DWORD PTR _i$67677[ebp], 0
	jmp	SHORT $LN5@DoesNameCo
$LN4@DoesNameCo:
	mov	eax, DWORD PTR _i$67677[ebp]
	add	eax, 1
	mov	DWORD PTR _i$67677[ebp], eax
$LN5@DoesNameCo:
	mov	ecx, DWORD PTR _path$[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	cmp	DWORD PTR _i$67677[ebp], eax
	jae	SHORT $LN3@DoesNameCo
; Line 153
	mov	ecx, DWORD PTR _path$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	ecx, DWORD PTR _i$67677[ebp]
	mov	dx, WORD PTR [eax+ecx*2]
	mov	WORD PTR _c$67681[ebp], dx
; Line 154
	movzx	eax, WORD PTR _c$67681[ebp]
	cmp	eax, 42					; 0000002aH
	je	SHORT $LN1@DoesNameCo
	movzx	ecx, WORD PTR _c$67681[ebp]
	cmp	ecx, 63					; 0000003fH
	jne	SHORT $LN2@DoesNameCo
$LN1@DoesNameCo:
; Line 155
	mov	al, 1
	jmp	SHORT $LN6@DoesNameCo
$LN2@DoesNameCo:
; Line 156
	jmp	SHORT $LN4@DoesNameCo
$LN3@DoesNameCo:
; Line 157
	xor	al, al
$LN6@DoesNameCo:
; Line 158
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?DoesNameContainWildcard@@YG_NABVUString@@@Z ENDP	; DoesNameContainWildcard
_TEXT	ENDS
PUBLIC	??8@YG_NABVUString@@PB_W@Z			; operator==
PUBLIC	?Front@?$CObjectVector@VUString@@@@QBEABVUString@@XZ ; CObjectVector<UString>::Front
PUBLIC	?Size@?$CObjectVector@VUString@@@@QBEIXZ	; CObjectVector<UString>::Size
PUBLIC	?AreAllAllowed@CItem@NWildcard@@QBE_NXZ		; NWildcard::CItem::AreAllAllowed
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv83 = -8						; size = 4
_this$ = -4						; size = 4
?AreAllAllowed@CItem@NWildcard@@QBE_NXZ PROC		; NWildcard::CItem::AreAllAllowed
; _this$ = ecx
; Line 184
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 185
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	je	SHORT $LN3@AreAllAllo
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+14]
	test	eax, eax
	je	SHORT $LN3@AreAllAllo
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+15]
	test	edx, edx
	je	SHORT $LN3@AreAllAllo
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	cmp	eax, 1
	jne	SHORT $LN3@AreAllAllo
	push	OFFSET $SG67687
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Front@?$CObjectVector@VUString@@@@QBEABVUString@@XZ ; CObjectVector<UString>::Front
	push	eax
	call	??8@YG_NABVUString@@PB_W@Z		; operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@AreAllAllo
	mov	DWORD PTR tv83[ebp], 1
	jmp	SHORT $LN4@AreAllAllo
$LN3@AreAllAllo:
	mov	DWORD PTR tv83[ebp], 0
$LN4@AreAllAllo:
	mov	al, BYTE PTR tv83[ebp]
; Line 186
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?AreAllAllowed@CItem@NWildcard@@QBE_NXZ ENDP		; NWildcard::CItem::AreAllAllowed
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??8@YG_NABVUString@@PB_W@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
??8@YG_NABVUString@@PB_W@Z PROC				; operator==, COMDAT
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 617
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, esp
	mov	eax, DWORD PTR _s2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s1$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	DWORD PTR __imp__wcscmp
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	neg	eax
	sbb	eax, eax
	add	eax, 1
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
??8@YG_NABVUString@@PB_W@Z ENDP				; operator==
_TEXT	ENDS
PUBLIC	??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[]
PUBLIC	?CheckPath@CItem@NWildcard@@QBE_NABV?$CObjectVector@VUString@@@@_N@Z ; NWildcard::CItem::CheckPath
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$67712 = -24						; size = 4
_d$67708 = -20						; size = 4
_finish$ = -16						; size = 4
_start$ = -12						; size = 4
_delta$ = -8						; size = 4
_this$ = -4						; size = 4
_pathParts$ = 8						; size = 4
_isFile$ = 12						; size = 1
?CheckPath@CItem@NWildcard@@QBE_NABV?$CObjectVector@VUString@@@@_N@Z PROC ; NWildcard::CItem::CheckPath
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\wildcard.cpp
; Line 189
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 190
	movzx	eax, BYTE PTR _isFile$[ebp]
	test	eax, eax
	jne	SHORT $LN21@CheckPath
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+14]
	test	edx, edx
	jne	SHORT $LN21@CheckPath
; Line 191
	xor	al, al
	jmp	$LN22@CheckPath
$LN21@CheckPath:
; Line 205
	mov	ecx, DWORD PTR _pathParts$[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	sub	esi, eax
	mov	DWORD PTR _delta$[ebp], esi
; Line 206
	jns	SHORT $LN20@CheckPath
; Line 207
	xor	al, al
	jmp	$LN22@CheckPath
$LN20@CheckPath:
; Line 208
	mov	DWORD PTR _start$[ebp], 0
; Line 209
	mov	DWORD PTR _finish$[ebp], 0
; Line 211
	movzx	eax, BYTE PTR _isFile$[ebp]
	test	eax, eax
	je	SHORT $LN19@CheckPath
; Line 213
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+14]
	test	edx, edx
	jne	SHORT $LN18@CheckPath
; Line 215
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	je	SHORT $LN17@CheckPath
; Line 216
	mov	edx, DWORD PTR _delta$[ebp]
	mov	DWORD PTR _start$[ebp], edx
	jmp	SHORT $LN18@CheckPath
$LN17@CheckPath:
; Line 217
	cmp	DWORD PTR _delta$[ebp], 0
	je	SHORT $LN18@CheckPath
; Line 218
	xor	al, al
	jmp	$LN22@CheckPath
$LN18@CheckPath:
; Line 220
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	jne	SHORT $LN19@CheckPath
	cmp	DWORD PTR _delta$[ebp], 0
	jne	SHORT $LN19@CheckPath
; Line 221
	xor	al, al
	jmp	$LN22@CheckPath
$LN19@CheckPath:
; Line 224
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+12]
	test	eax, eax
	je	SHORT $LN13@CheckPath
; Line 226
	mov	ecx, DWORD PTR _delta$[ebp]
	mov	DWORD PTR _finish$[ebp], ecx
; Line 227
	movzx	edx, BYTE PTR _isFile$[ebp]
	test	edx, edx
	je	SHORT $LN13@CheckPath
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	jne	SHORT $LN13@CheckPath
; Line 228
	mov	edx, DWORD PTR _delta$[ebp]
	sub	edx, 1
	mov	DWORD PTR _finish$[ebp], edx
$LN13@CheckPath:
; Line 231
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _d$67708[ebp], eax
	jmp	SHORT $LN11@CheckPath
$LN10@CheckPath:
	mov	ecx, DWORD PTR _d$67708[ebp]
	add	ecx, 1
	mov	DWORD PTR _d$67708[ebp], ecx
$LN11@CheckPath:
	mov	edx, DWORD PTR _d$67708[ebp]
	cmp	edx, DWORD PTR _finish$[ebp]
	jg	$LN9@CheckPath
; Line 234
	mov	DWORD PTR _i$67712[ebp], 0
	jmp	SHORT $LN8@CheckPath
$LN7@CheckPath:
	mov	eax, DWORD PTR _i$67712[ebp]
	add	eax, 1
	mov	DWORD PTR _i$67712[ebp], eax
$LN8@CheckPath:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	cmp	DWORD PTR _i$67712[ebp], eax
	jae	SHORT $LN6@CheckPath
; Line 236
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+15]
	test	edx, edx
	je	SHORT $LN5@CheckPath
; Line 238
	mov	eax, DWORD PTR _i$67712[ebp]
	add	eax, DWORD PTR _d$67708[ebp]
	push	eax
	mov	ecx, DWORD PTR _pathParts$[ebp]
	call	??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[]
	push	eax
	mov	ecx, DWORD PTR _i$67712[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[]
	push	eax
	call	?DoesWildcardMatchName@@YG_NABVUString@@0@Z ; DoesWildcardMatchName
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN4@CheckPath
; Line 239
	jmp	SHORT $LN6@CheckPath
$LN4@CheckPath:
; Line 241
	jmp	SHORT $LN3@CheckPath
$LN5@CheckPath:
; Line 243
	mov	eax, DWORD PTR _i$67712[ebp]
	add	eax, DWORD PTR _d$67708[ebp]
	push	eax
	mov	ecx, DWORD PTR _pathParts$[ebp]
	call	??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[]
	mov	ecx, eax
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	mov	ecx, DWORD PTR _i$67712[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[]
	mov	ecx, eax
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	?CompareFileNames@@YGHPB_W0@Z		; CompareFileNames
	test	eax, eax
	je	SHORT $LN3@CheckPath
; Line 244
	jmp	SHORT $LN6@CheckPath
$LN3@CheckPath:
; Line 246
	jmp	$LN7@CheckPath
$LN6@CheckPath:
; Line 247
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	cmp	DWORD PTR _i$67712[ebp], eax
	jne	SHORT $LN1@CheckPath
; Line 248
	mov	al, 1
	jmp	SHORT $LN22@CheckPath
$LN1@CheckPath:
; Line 249
	jmp	$LN10@CheckPath
$LN9@CheckPath:
; Line 250
	xor	al, al
$LN22@CheckPath:
; Line 251
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?CheckPath@CItem@NWildcard@@QBE_NABV?$CObjectVector@VUString@@@@_N@Z ENDP ; NWildcard::CItem::CheckPath
_TEXT	ENDS
PUBLIC	?Front@?$CObjectVector@UCItem@NWildcard@@@@QBEABUCItem@NWildcard@@XZ ; CObjectVector<NWildcard::CItem>::Front
PUBLIC	?Size@?$CObjectVector@UCItem@NWildcard@@@@QBEIXZ ; CObjectVector<NWildcard::CItem>::Size
PUBLIC	?IsEmpty@?$CObjectVector@UCItem@NWildcard@@@@QBE_NXZ ; CObjectVector<NWildcard::CItem>::IsEmpty
PUBLIC	?IsEmpty@?$CObjectVector@VCCensorNode@NWildcard@@@@QBE_NXZ ; CObjectVector<NWildcard::CCensorNode>::IsEmpty
PUBLIC	?IsEmpty@UString@@QBE_NXZ			; UString::IsEmpty
PUBLIC	?AreAllAllowed@CCensorNode@NWildcard@@QBE_NXZ	; NWildcard::CCensorNode::AreAllAllowed
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?AreAllAllowed@CCensorNode@NWildcard@@QBE_NXZ PROC	; NWildcard::CCensorNode::AreAllAllowed
; _this$ = ecx
; Line 254
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 258
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@AreAllAllo@2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?IsEmpty@?$CObjectVector@VCCensorNode@NWildcard@@@@QBE_NXZ ; CObjectVector<NWildcard::CCensorNode>::IsEmpty
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@AreAllAllo@2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?IsEmpty@?$CObjectVector@UCItem@NWildcard@@@@QBE_NXZ ; CObjectVector<NWildcard::CItem>::IsEmpty
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@AreAllAllo@2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	?Size@?$CObjectVector@UCItem@NWildcard@@@@QBEIXZ ; CObjectVector<NWildcard::CItem>::Size
	cmp	eax, 1
	je	SHORT $LN2@AreAllAllo@2
$LN1@AreAllAllo@2:
; Line 259
	xor	al, al
	jmp	SHORT $LN3@AreAllAllo@2
$LN2@AreAllAllo@2:
; Line 260
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	?Front@?$CObjectVector@UCItem@NWildcard@@@@QBEABUCItem@NWildcard@@XZ ; CObjectVector<NWildcard::CItem>::Front
	mov	ecx, eax
	call	?AreAllAllowed@CItem@NWildcard@@QBE_NXZ	; NWildcard::CItem::AreAllAllowed
$LN3@AreAllAllo@2:
; Line 261
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?AreAllAllowed@CCensorNode@NWildcard@@QBE_NXZ ENDP	; NWildcard::CCensorNode::AreAllAllowed
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsEmpty@UString@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@UString@@QBE_NXZ PROC				; UString::IsEmpty, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 473
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+4], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@UString@@QBE_NXZ ENDP				; UString::IsEmpty
_TEXT	ENDS
PUBLIC	??A?$CObjectVector@VCCensorNode@NWildcard@@@@QBEABVCCensorNode@NWildcard@@I@Z ; CObjectVector<NWildcard::CCensorNode>::operator[]
PUBLIC	?Size@?$CObjectVector@VCCensorNode@NWildcard@@@@QBEIXZ ; CObjectVector<NWildcard::CCensorNode>::Size
PUBLIC	?FindSubNode@CCensorNode@NWildcard@@QBEHABVUString@@@Z ; NWildcard::CCensorNode::FindSubNode
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$67730 = -8						; size = 4
_this$ = -4						; size = 4
_name$ = 8						; size = 4
?FindSubNode@CCensorNode@NWildcard@@QBEHABVUString@@@Z PROC ; NWildcard::CCensorNode::FindSubNode
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\wildcard.cpp
; Line 264
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 265
	mov	DWORD PTR _i$67730[ebp], 0
	jmp	SHORT $LN4@FindSubNod
$LN3@FindSubNod:
	mov	eax, DWORD PTR _i$67730[ebp]
	add	eax, 1
	mov	DWORD PTR _i$67730[ebp], eax
$LN4@FindSubNod:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?Size@?$CObjectVector@VCCensorNode@NWildcard@@@@QBEIXZ ; CObjectVector<NWildcard::CCensorNode>::Size
	cmp	DWORD PTR _i$67730[ebp], eax
	jae	SHORT $LN2@FindSubNod
; Line 266
	mov	ecx, DWORD PTR _name$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	mov	ecx, DWORD PTR _i$67730[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??A?$CObjectVector@VCCensorNode@NWildcard@@@@QBEABVCCensorNode@NWildcard@@I@Z ; CObjectVector<NWildcard::CCensorNode>::operator[]
	add	eax, 4
	mov	ecx, eax
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	?CompareFileNames@@YGHPB_W0@Z		; CompareFileNames
	test	eax, eax
	jne	SHORT $LN1@FindSubNod
; Line 267
	mov	eax, DWORD PTR _i$67730[ebp]
	jmp	SHORT $LN5@FindSubNod
$LN1@FindSubNod:
; Line 268
	jmp	SHORT $LN3@FindSubNod
$LN2@FindSubNod:
	or	eax, -1
$LN5@FindSubNod:
; Line 269
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?FindSubNode@CCensorNode@NWildcard@@QBEHABVUString@@@Z ENDP ; NWildcard::CCensorNode::FindSubNode
_TEXT	ENDS
PUBLIC	?Add@?$CObjectVector@UCItem@NWildcard@@@@QAEIABUCItem@NWildcard@@@Z ; CObjectVector<NWildcard::CItem>::Add
PUBLIC	?AddItemSimple@CCensorNode@NWildcard@@AAEX_NAAUCItem@2@@Z ; NWildcard::CCensorNode::AddItemSimple
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_include$ = 8						; size = 1
_item$ = 12						; size = 4
?AddItemSimple@CCensorNode@NWildcard@@AAEX_NAAUCItem@2@@Z PROC ; NWildcard::CCensorNode::AddItemSimple
; _this$ = ecx
; Line 272
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 273
	movzx	eax, BYTE PTR _include$[ebp]
	test	eax, eax
	je	SHORT $LN2@AddItemSim
; Line 274
	mov	ecx, DWORD PTR _item$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	?Add@?$CObjectVector@UCItem@NWildcard@@@@QAEIABUCItem@NWildcard@@@Z ; CObjectVector<NWildcard::CItem>::Add
; Line 275
	jmp	SHORT $LN3@AddItemSim
$LN2@AddItemSim:
; Line 276
	mov	edx, DWORD PTR _item$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?Add@?$CObjectVector@UCItem@NWildcard@@@@QAEIABUCItem@NWildcard@@@Z ; CObjectVector<NWildcard::CItem>::Add
$LN3@AddItemSim:
; Line 277
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?AddItemSimple@CCensorNode@NWildcard@@AAEX_NAAUCItem@2@@Z ENDP ; NWildcard::CCensorNode::AddItemSimple
_TEXT	ENDS
PUBLIC	??A?$CObjectVector@VCCensorNode@NWildcard@@@@QAEAAVCCensorNode@NWildcard@@I@Z ; CObjectVector<NWildcard::CCensorNode>::operator[]
PUBLIC	?Delete@?$CObjectVector@VUString@@@@QAEXI@Z	; CObjectVector<UString>::Delete
PUBLIC	??1CCensorNode@NWildcard@@QAE@XZ		; NWildcard::CCensorNode::~CCensorNode
PUBLIC	?Add@?$CObjectVector@VCCensorNode@NWildcard@@@@QAEIABVCCensorNode@NWildcard@@@Z ; CObjectVector<NWildcard::CCensorNode>::Add
PUBLIC	??0CCensorNode@NWildcard@@QAE@ABVUString@@PAV01@@Z ; NWildcard::CCensorNode::CCensorNode
PUBLIC	?Front@?$CObjectVector@VUString@@@@QAEAAVUString@@XZ ; CObjectVector<UString>::Front
PUBLIC	?AddItem@CCensorNode@NWildcard@@QAEX_NAAUCItem@2@H@Z ; NWildcard::CCensorNode::AddItem
xdata$x	SEGMENT
__unwindtable$?AddItem@CCensorNode@NWildcard@@QAEX_NAAUCItem@2@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddItem@CCensorNode@NWildcard@@QAEX_NAAUCItem@2@H@Z$0
__ehfuncinfo$?AddItem@CCensorNode@NWildcard@@QAEX_NAAUCItem@2@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddItem@CCensorNode@NWildcard@@QAEX_NAAUCItem@2@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv154 = -84						; size = 4
tv155 = -80						; size = 4
$T68463 = -76						; size = 52
_index$ = -24						; size = 4
_front$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_include$ = 8						; size = 1
_item$ = 12						; size = 4
_ignoreWildcardIndex$ = 16				; size = 4
?AddItem@CCensorNode@NWildcard@@QAEX_NAAUCItem@2@H@Z PROC ; NWildcard::CCensorNode::AddItem
; _this$ = ecx
; Line 280
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddItem@CCensorNode@NWildcard@@QAEX_NAAUCItem@2@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 72					; 00000048H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-84]
	mov	ecx, 18					; 00000012H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 281
	mov	ecx, DWORD PTR _item$[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	cmp	eax, 1
	ja	SHORT $LN5@AddItem
; Line 283
	mov	ecx, DWORD PTR _item$[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	test	eax, eax
	je	SHORT $LN4@AddItem
	mov	eax, DWORD PTR _item$[ebp]
	movzx	ecx, BYTE PTR [eax+15]
	test	ecx, ecx
	je	SHORT $LN4@AddItem
; Line 285
	mov	ecx, DWORD PTR _item$[ebp]
	call	?Front@?$CObjectVector@VUString@@@@QAEAAVUString@@XZ ; CObjectVector<UString>::Front
	push	eax
	call	?DoesNameContainWildcard@@YG_NABVUString@@@Z ; DoesNameContainWildcard
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN4@AddItem
; Line 286
	mov	eax, DWORD PTR _item$[ebp]
	mov	BYTE PTR [eax+15], 0
$LN4@AddItem:
; Line 288
	mov	ecx, DWORD PTR _item$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _include$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddItemSimple@CCensorNode@NWildcard@@AAEX_NAAUCItem@2@@Z ; NWildcard::CCensorNode::AddItemSimple
; Line 289
	jmp	$LN6@AddItem
$LN5@AddItem:
; Line 291
	mov	ecx, DWORD PTR _item$[ebp]
	call	?Front@?$CObjectVector@VUString@@@@QAEAAVUString@@XZ ; CObjectVector<UString>::Front
	mov	DWORD PTR _front$[ebp], eax
; Line 296
	mov	eax, DWORD PTR _item$[ebp]
	movzx	ecx, BYTE PTR [eax+15]
	test	ecx, ecx
	je	SHORT $LN2@AddItem
	cmp	DWORD PTR _ignoreWildcardIndex$[ebp], 0
	je	SHORT $LN2@AddItem
	mov	edx, DWORD PTR _front$[ebp]
	push	edx
	call	?DoesNameContainWildcard@@YG_NABVUString@@@Z ; DoesNameContainWildcard
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@AddItem
; Line 298
	mov	ecx, DWORD PTR _item$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _include$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddItemSimple@CCensorNode@NWildcard@@AAEX_NAAUCItem@2@@Z ; NWildcard::CCensorNode::AddItemSimple
; Line 299
	jmp	$LN6@AddItem
$LN2@AddItem:
; Line 301
	mov	eax, DWORD PTR _front$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindSubNode@CCensorNode@NWildcard@@QBEHABVUString@@@Z ; NWildcard::CCensorNode::FindSubNode
	mov	DWORD PTR _index$[ebp], eax
; Line 302
	cmp	DWORD PTR _index$[ebp], 0
	jge	SHORT $LN1@AddItem
; Line 303
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _front$[ebp]
	push	edx
	lea	ecx, DWORD PTR $T68463[ebp]
	call	??0CCensorNode@NWildcard@@QAE@ABVUString@@PAV01@@Z ; NWildcard::CCensorNode::CCensorNode
	mov	DWORD PTR tv155[ebp], eax
	mov	eax, DWORD PTR tv155[ebp]
	mov	DWORD PTR tv154[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR tv154[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?Add@?$CObjectVector@VCCensorNode@NWildcard@@@@QAEIABVCCensorNode@NWildcard@@@Z ; CObjectVector<NWildcard::CCensorNode>::Add
	mov	DWORD PTR _index$[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T68463[ebp]
	call	??1CCensorNode@NWildcard@@QAE@XZ
$LN1@AddItem:
; Line 304
	push	0
	mov	ecx, DWORD PTR _item$[ebp]
	call	?Delete@?$CObjectVector@VUString@@@@QAEXI@Z ; CObjectVector<UString>::Delete
; Line 305
	mov	edx, DWORD PTR _ignoreWildcardIndex$[ebp]
	sub	edx, 1
	push	edx
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _include$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??A?$CObjectVector@VCCensorNode@NWildcard@@@@QAEAAVCCensorNode@NWildcard@@I@Z ; CObjectVector<NWildcard::CCensorNode>::operator[]
	mov	ecx, eax
	call	?AddItem@CCensorNode@NWildcard@@QAEX_NAAUCItem@2@H@Z ; NWildcard::CCensorNode::AddItem
$LN6@AddItem:
; Line 306
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 84					; 00000054H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?AddItem@CCensorNode@NWildcard@@QAEX_NAAUCItem@2@H@Z$0:
	lea	ecx, DWORD PTR $T68463[ebp]
	jmp	??1CCensorNode@NWildcard@@QAE@XZ
__ehhandler$?AddItem@CCensorNode@NWildcard@@QAEX_NAAUCItem@2@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-80]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddItem@CCensorNode@NWildcard@@QAEX_NAAUCItem@2@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddItem@CCensorNode@NWildcard@@QAEX_NAAUCItem@2@H@Z ENDP ; NWildcard::CCensorNode::AddItem
PUBLIC	??1?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ	; CObjectVector<NWildcard::CItem>::~CObjectVector<NWildcard::CItem>
PUBLIC	??1?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ ; CObjectVector<NWildcard::CCensorNode>::~CObjectVector<NWildcard::CCensorNode>
PUBLIC	??0?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ	; CObjectVector<NWildcard::CItem>::CObjectVector<NWildcard::CItem>
PUBLIC	??0?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ ; CObjectVector<NWildcard::CCensorNode>::CObjectVector<NWildcard::CCensorNode>
EXTRN	??0UString@@QAE@ABV0@@Z:PROC			; UString::UString
;	COMDAT xdata$x
; File c:\workspace\7z1505-src\cpp\common\wildcard.h
xdata$x	SEGMENT
__unwindtable$??0CCensorNode@NWildcard@@QAE@ABVUString@@PAV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CCensorNode@NWildcard@@QAE@ABVUString@@PAV01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CCensorNode@NWildcard@@QAE@ABVUString@@PAV01@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CCensorNode@NWildcard@@QAE@ABVUString@@PAV01@@Z$2
__ehfuncinfo$??0CCensorNode@NWildcard@@QAE@ABVUString@@PAV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0CCensorNode@NWildcard@@QAE@ABVUString@@PAV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CCensorNode@NWildcard@@QAE@ABVUString@@PAV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_name$ = 8						; size = 4
_parent$ = 12						; size = 4
??0CCensorNode@NWildcard@@QAE@ABVUString@@PAV01@@Z PROC	; NWildcard::CCensorNode::CCensorNode, COMDAT
; _this$ = ecx
; Line 64
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CCensorNode@NWildcard@@QAE@ABVUString@@PAV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _parent$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ ; CObjectVector<NWildcard::CCensorNode>::CObjectVector<NWildcard::CCensorNode>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??0?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ ; CObjectVector<NWildcard::CItem>::CObjectVector<NWildcard::CItem>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??0?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ ; CObjectVector<NWildcard::CItem>::CObjectVector<NWildcard::CItem>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CCensorNode@NWildcard@@QAE@ABVUString@@PAV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??0CCensorNode@NWildcard@@QAE@ABVUString@@PAV01@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	jmp	??1?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ ; CObjectVector<NWildcard::CCensorNode>::~CObjectVector<NWildcard::CCensorNode>
__unwindfunclet$??0CCensorNode@NWildcard@@QAE@ABVUString@@PAV01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	jmp	??1?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ ; CObjectVector<NWildcard::CItem>::~CObjectVector<NWildcard::CItem>
__ehhandler$??0CCensorNode@NWildcard@@QAE@ABVUString@@PAV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CCensorNode@NWildcard@@QAE@ABVUString@@PAV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CCensorNode@NWildcard@@QAE@ABVUString@@PAV01@@Z ENDP	; NWildcard::CCensorNode::CCensorNode
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CCensorNode@NWildcard@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CCensorNode@NWildcard@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CCensorNode@NWildcard@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CCensorNode@NWildcard@@QAE@XZ$2
__ehfuncinfo$??1CCensorNode@NWildcard@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1CCensorNode@NWildcard@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CCensorNode@NWildcard@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CCensorNode@NWildcard@@QAE@XZ PROC			; NWildcard::CCensorNode::~CCensorNode, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CCensorNode@NWildcard@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??1?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ ; CObjectVector<NWildcard::CItem>::~CObjectVector<NWildcard::CItem>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??1?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ ; CObjectVector<NWildcard::CItem>::~CObjectVector<NWildcard::CItem>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??1?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ ; CObjectVector<NWildcard::CCensorNode>::~CObjectVector<NWildcard::CCensorNode>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CCensorNode@NWildcard@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??1CCensorNode@NWildcard@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	jmp	??1?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ ; CObjectVector<NWildcard::CCensorNode>::~CObjectVector<NWildcard::CCensorNode>
__unwindfunclet$??1CCensorNode@NWildcard@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	jmp	??1?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ ; CObjectVector<NWildcard::CItem>::~CObjectVector<NWildcard::CItem>
__ehhandler$??1CCensorNode@NWildcard@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CCensorNode@NWildcard@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CCensorNode@NWildcard@@QAE@XZ ENDP			; NWildcard::CCensorNode::~CCensorNode
PUBLIC	??1CItem@NWildcard@@QAE@XZ			; NWildcard::CItem::~CItem
PUBLIC	??0CItem@NWildcard@@QAE@XZ			; NWildcard::CItem::CItem
PUBLIC	?AddItem@CCensorNode@NWildcard@@QAEX_NABVUString@@0000@Z ; NWildcard::CCensorNode::AddItem
xdata$x	SEGMENT
__unwindtable$?AddItem@CCensorNode@NWildcard@@QAEX_NABVUString@@0000@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddItem@CCensorNode@NWildcard@@QAEX_NABVUString@@0000@Z$0
__ehfuncinfo$?AddItem@CCensorNode@NWildcard@@QAEX_NABVUString@@0000@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddItem@CCensorNode@NWildcard@@QAEX_NABVUString@@0000@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
_item$ = -36						; size = 16
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_include$ = 8						; size = 1
_path$ = 12						; size = 4
_recursive$ = 16					; size = 1
_forFile$ = 20						; size = 1
_forDir$ = 24						; size = 1
_wildcardMatching$ = 28					; size = 1
?AddItem@CCensorNode@NWildcard@@QAEX_NABVUString@@0000@Z PROC ; NWildcard::CCensorNode::AddItem
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\wildcard.cpp
; Line 309
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddItem@CCensorNode@NWildcard@@QAEX_NABVUString@@0000@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 310
	lea	ecx, DWORD PTR _item$[ebp]
	call	??0CItem@NWildcard@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 311
	lea	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR _path$[ebp]
	push	ecx
	call	?SplitPathToParts@@YGXABVUString@@AAV?$CObjectVector@VUString@@@@@Z ; SplitPathToParts
; Line 312
	mov	dl, BYTE PTR _recursive$[ebp]
	mov	BYTE PTR _item$[ebp+12], dl
; Line 313
	mov	al, BYTE PTR _forFile$[ebp]
	mov	BYTE PTR _item$[ebp+13], al
; Line 314
	mov	cl, BYTE PTR _forDir$[ebp]
	mov	BYTE PTR _item$[ebp+14], cl
; Line 315
	mov	dl, BYTE PTR _wildcardMatching$[ebp]
	mov	BYTE PTR _item$[ebp+15], dl
; Line 316
	push	-1
	lea	eax, DWORD PTR _item$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _include$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddItem@CCensorNode@NWildcard@@QAEX_NAAUCItem@2@H@Z ; NWildcard::CCensorNode::AddItem
; Line 317
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _item$[ebp]
	call	??1CItem@NWildcard@@QAE@XZ
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@AddItem@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
$LN7@AddItem@2:
	DD	1
	DD	$LN6@AddItem@2
$LN6@AddItem@2:
	DD	-36					; ffffffdcH
	DD	16					; 00000010H
	DD	$LN4@AddItem@2
$LN4@AddItem@2:
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?AddItem@CCensorNode@NWildcard@@QAEX_NABVUString@@0000@Z$0:
	lea	ecx, DWORD PTR _item$[ebp]
	jmp	??1CItem@NWildcard@@QAE@XZ
__ehhandler$?AddItem@CCensorNode@NWildcard@@QAEX_NABVUString@@0000@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddItem@CCensorNode@NWildcard@@QAEX_NABVUString@@0000@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddItem@CCensorNode@NWildcard@@QAEX_NABVUString@@0000@Z ENDP ; NWildcard::CCensorNode::AddItem
PUBLIC	??0?$CObjectVector@VUString@@@@QAE@XZ		; CObjectVector<UString>::CObjectVector<UString>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CItem@NWildcard@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CItem@NWildcard@@QAE@XZ PROC				; NWildcard::CItem::CItem, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::CObjectVector<UString>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CItem@NWildcard@@QAE@XZ ENDP				; NWildcard::CItem::CItem
_TEXT	ENDS
PUBLIC	??1?$CObjectVector@VUString@@@@QAE@XZ		; CObjectVector<UString>::~CObjectVector<UString>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CItem@NWildcard@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CItem@NWildcard@@QAE@XZ PROC				; NWildcard::CItem::~CItem, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CItem@NWildcard@@QAE@XZ ENDP				; NWildcard::CItem::~CItem
_TEXT	ENDS
PUBLIC	??A?$CObjectVector@UCItem@NWildcard@@@@QBEABUCItem@NWildcard@@I@Z ; CObjectVector<NWildcard::CItem>::operator[]
PUBLIC	?NeedCheckSubDirs@CCensorNode@NWildcard@@QBE_NXZ ; NWildcard::CCensorNode::NeedCheckSubDirs
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_item$67777 = -12					; size = 4
_i$67773 = -8						; size = 4
_this$ = -4						; size = 4
?NeedCheckSubDirs@CCensorNode@NWildcard@@QBE_NXZ PROC	; NWildcard::CCensorNode::NeedCheckSubDirs
; _this$ = ecx
; Line 320
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 321
	mov	DWORD PTR _i$67773[ebp], 0
	jmp	SHORT $LN5@NeedCheckS
$LN4@NeedCheckS:
	mov	eax, DWORD PTR _i$67773[ebp]
	add	eax, 1
	mov	DWORD PTR _i$67773[ebp], eax
$LN5@NeedCheckS:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	?Size@?$CObjectVector@UCItem@NWildcard@@@@QBEIXZ ; CObjectVector<NWildcard::CItem>::Size
	cmp	DWORD PTR _i$67773[ebp], eax
	jae	SHORT $LN3@NeedCheckS
; Line 323
	mov	ecx, DWORD PTR _i$67773[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??A?$CObjectVector@UCItem@NWildcard@@@@QBEABUCItem@NWildcard@@I@Z ; CObjectVector<NWildcard::CItem>::operator[]
	mov	DWORD PTR _item$67777[ebp], eax
; Line 324
	mov	edx, DWORD PTR _item$67777[ebp]
	movzx	eax, BYTE PTR [edx+12]
	test	eax, eax
	jne	SHORT $LN1@NeedCheckS
	mov	ecx, DWORD PTR _item$67777[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	cmp	eax, 1
	jbe	SHORT $LN2@NeedCheckS
$LN1@NeedCheckS:
; Line 325
	mov	al, 1
	jmp	SHORT $LN6@NeedCheckS
$LN2@NeedCheckS:
; Line 326
	jmp	SHORT $LN4@NeedCheckS
$LN3@NeedCheckS:
; Line 327
	xor	al, al
$LN6@NeedCheckS:
; Line 328
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?NeedCheckSubDirs@CCensorNode@NWildcard@@QBE_NXZ ENDP	; NWildcard::CCensorNode::NeedCheckSubDirs
_TEXT	ENDS
PUBLIC	?AreThereIncludeItems@CCensorNode@NWildcard@@QBE_NXZ ; NWildcard::CCensorNode::AreThereIncludeItems
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$67784 = -8						; size = 4
_this$ = -4						; size = 4
?AreThereIncludeItems@CCensorNode@NWildcard@@QBE_NXZ PROC ; NWildcard::CCensorNode::AreThereIncludeItems
; _this$ = ecx
; Line 331
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 332
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	?Size@?$CObjectVector@UCItem@NWildcard@@@@QBEIXZ ; CObjectVector<NWildcard::CItem>::Size
	test	eax, eax
	jbe	SHORT $LN5@AreThereIn
; Line 333
	mov	al, 1
	jmp	SHORT $LN6@AreThereIn
$LN5@AreThereIn:
; Line 334
	mov	DWORD PTR _i$67784[ebp], 0
	jmp	SHORT $LN4@AreThereIn
$LN3@AreThereIn:
	mov	eax, DWORD PTR _i$67784[ebp]
	add	eax, 1
	mov	DWORD PTR _i$67784[ebp], eax
$LN4@AreThereIn:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?Size@?$CObjectVector@VCCensorNode@NWildcard@@@@QBEIXZ ; CObjectVector<NWildcard::CCensorNode>::Size
	cmp	DWORD PTR _i$67784[ebp], eax
	jae	SHORT $LN2@AreThereIn
; Line 335
	mov	ecx, DWORD PTR _i$67784[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??A?$CObjectVector@VCCensorNode@NWildcard@@@@QBEABVCCensorNode@NWildcard@@I@Z ; CObjectVector<NWildcard::CCensorNode>::operator[]
	mov	ecx, eax
	call	?AreThereIncludeItems@CCensorNode@NWildcard@@QBE_NXZ ; NWildcard::CCensorNode::AreThereIncludeItems
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@AreThereIn
; Line 336
	mov	al, 1
	jmp	SHORT $LN6@AreThereIn
$LN1@AreThereIn:
; Line 337
	jmp	SHORT $LN3@AreThereIn
$LN2@AreThereIn:
	xor	al, al
$LN6@AreThereIn:
; Line 338
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?AreThereIncludeItems@CCensorNode@NWildcard@@QBE_NXZ ENDP ; NWildcard::CCensorNode::AreThereIncludeItems
_TEXT	ENDS
PUBLIC	?CheckPathCurrent@CCensorNode@NWildcard@@ABE_N_NABV?$CObjectVector@VUString@@@@0@Z ; NWildcard::CCensorNode::CheckPathCurrent
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv68 = -20						; size = 4
$T68511 = -16						; size = 4
_i$67799 = -12						; size = 4
_items$ = -8						; size = 4
_this$ = -4						; size = 4
_include$ = 8						; size = 1
_pathParts$ = 12					; size = 4
_isFile$ = 16						; size = 1
?CheckPathCurrent@CCensorNode@NWildcard@@ABE_N_NABV?$CObjectVector@VUString@@@@0@Z PROC ; NWildcard::CCensorNode::CheckPathCurrent
; _this$ = ecx
; Line 341
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 342
	movzx	eax, BYTE PTR _include$[ebp]
	test	eax, eax
	je	SHORT $LN7@CheckPathC
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	mov	DWORD PTR tv68[ebp], ecx
	jmp	SHORT $LN8@CheckPathC
$LN7@CheckPathC:
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 40					; 00000028H
	mov	DWORD PTR tv68[ebp], edx
$LN8@CheckPathC:
	mov	eax, DWORD PTR tv68[ebp]
	mov	DWORD PTR $T68511[ebp], eax
	mov	ecx, DWORD PTR $T68511[ebp]
	mov	DWORD PTR _items$[ebp], ecx
; Line 343
	mov	DWORD PTR _i$67799[ebp], 0
	jmp	SHORT $LN4@CheckPathC
$LN3@CheckPathC:
	mov	edx, DWORD PTR _i$67799[ebp]
	add	edx, 1
	mov	DWORD PTR _i$67799[ebp], edx
$LN4@CheckPathC:
	mov	ecx, DWORD PTR _items$[ebp]
	call	?Size@?$CObjectVector@UCItem@NWildcard@@@@QBEIXZ ; CObjectVector<NWildcard::CItem>::Size
	cmp	DWORD PTR _i$67799[ebp], eax
	jae	SHORT $LN2@CheckPathC
; Line 344
	movzx	eax, BYTE PTR _isFile$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pathParts$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$67799[ebp]
	push	edx
	mov	ecx, DWORD PTR _items$[ebp]
	call	??A?$CObjectVector@UCItem@NWildcard@@@@QBEABUCItem@NWildcard@@I@Z ; CObjectVector<NWildcard::CItem>::operator[]
	mov	ecx, eax
	call	?CheckPath@CItem@NWildcard@@QBE_NABV?$CObjectVector@VUString@@@@_N@Z ; NWildcard::CItem::CheckPath
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@CheckPathC
; Line 345
	mov	al, 1
	jmp	SHORT $LN5@CheckPathC
$LN1@CheckPathC:
; Line 346
	jmp	SHORT $LN3@CheckPathC
$LN2@CheckPathC:
	xor	al, al
$LN5@CheckPathC:
; Line 347
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?CheckPathCurrent@CCensorNode@NWildcard@@ABE_N_NABV?$CObjectVector@VUString@@@@0@Z ENDP ; NWildcard::CCensorNode::CheckPathCurrent
_TEXT	ENDS
PUBLIC	??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z	; CObjectVector<UString>::CObjectVector<UString>
PUBLIC	?CheckPathVect@CCensorNode@NWildcard@@QBE_NABV?$CObjectVector@VUString@@@@_NAA_N@Z ; NWildcard::CCensorNode::CheckPathVect
xdata$x	SEGMENT
__unwindtable$?CheckPathVect@CCensorNode@NWildcard@@QBE_NABV?$CObjectVector@VUString@@@@_NAA_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CheckPathVect@CCensorNode@NWildcard@@QBE_NABV?$CObjectVector@VUString@@@@_NAA_N@Z$0
__ehfuncinfo$?CheckPathVect@CCensorNode@NWildcard@@QBE_NABV?$CObjectVector@VUString@@@@_NAA_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CheckPathVect@CCensorNode@NWildcard@@QBE_NABV?$CObjectVector@VUString@@@@_NAA_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T68515 = -45						; size = 1
_pathParts2$67815 = -40					; size = 12
_index$ = -24						; size = 4
_finded$ = -17						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pathParts$ = 8						; size = 4
_isFile$ = 12						; size = 1
_include$ = 16						; size = 4
?CheckPathVect@CCensorNode@NWildcard@@QBE_NABV?$CObjectVector@VUString@@@@_NAA_N@Z PROC ; NWildcard::CCensorNode::CheckPathVect
; _this$ = ecx
; Line 350
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CheckPathVect@CCensorNode@NWildcard@@QBE_NABV?$CObjectVector@VUString@@@@_NAA_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-48], eax
	mov	DWORD PTR [ebp-44], eax
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 351
	movzx	eax, BYTE PTR _isFile$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pathParts$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckPathCurrent@CCensorNode@NWildcard@@ABE_N_NABV?$CObjectVector@VUString@@@@0@Z ; NWildcard::CCensorNode::CheckPathCurrent
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN4@CheckPathV
; Line 353
	mov	eax, DWORD PTR _include$[ebp]
	mov	BYTE PTR [eax], 0
; Line 354
	mov	al, 1
	jmp	$LN5@CheckPathV
$LN4@CheckPathV:
; Line 356
	mov	ecx, DWORD PTR _include$[ebp]
	mov	BYTE PTR [ecx], 1
; Line 357
	movzx	edx, BYTE PTR _isFile$[ebp]
	push	edx
	mov	eax, DWORD PTR _pathParts$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckPathCurrent@CCensorNode@NWildcard@@ABE_N_NABV?$CObjectVector@VUString@@@@0@Z ; NWildcard::CCensorNode::CheckPathCurrent
	mov	BYTE PTR _finded$[ebp], al
; Line 358
	mov	ecx, DWORD PTR _pathParts$[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	cmp	eax, 1
	ja	SHORT $LN3@CheckPathV
; Line 359
	mov	al, BYTE PTR _finded$[ebp]
	jmp	$LN5@CheckPathV
$LN3@CheckPathV:
; Line 360
	mov	ecx, DWORD PTR _pathParts$[ebp]
	call	?Front@?$CObjectVector@VUString@@@@QBEABVUString@@XZ ; CObjectVector<UString>::Front
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindSubNode@CCensorNode@NWildcard@@QBEHABVUString@@@Z ; NWildcard::CCensorNode::FindSubNode
	mov	DWORD PTR _index$[ebp], eax
; Line 361
	cmp	DWORD PTR _index$[ebp], 0
	jl	SHORT $LN2@CheckPathV
; Line 363
	mov	ecx, DWORD PTR _pathParts$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _pathParts2$67815[ebp]
	call	??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z ; CObjectVector<UString>::CObjectVector<UString>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 364
	push	0
	lea	ecx, DWORD PTR _pathParts2$67815[ebp]
	call	?Delete@?$CObjectVector@VUString@@@@QAEXI@Z ; CObjectVector<UString>::Delete
; Line 365
	mov	edx, DWORD PTR _include$[ebp]
	push	edx
	movzx	eax, BYTE PTR _isFile$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pathParts2$67815[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??A?$CObjectVector@VCCensorNode@NWildcard@@@@QBEABVCCensorNode@NWildcard@@I@Z ; CObjectVector<NWildcard::CCensorNode>::operator[]
	mov	ecx, eax
	call	?CheckPathVect@CCensorNode@NWildcard@@QBE_NABV?$CObjectVector@VUString@@@@_NAA_N@Z ; NWildcard::CCensorNode::CheckPathVect
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@CheckPathV
; Line 366
	mov	BYTE PTR $T68515[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _pathParts2$67815[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	al, BYTE PTR $T68515[ebp]
	jmp	SHORT $LN5@CheckPathV
$LN1@CheckPathV:
; Line 367
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _pathParts2$67815[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
$LN2@CheckPathV:
; Line 368
	mov	al, BYTE PTR _finded$[ebp]
$LN5@CheckPathV:
; Line 369
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@CheckPathV
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN11@CheckPathV:
	DD	1
	DD	$LN10@CheckPathV
$LN10@CheckPathV:
	DD	-40					; ffffffd8H
	DD	12					; 0000000cH
	DD	$LN8@CheckPathV
$LN8@CheckPathV:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	50					; 00000032H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CheckPathVect@CCensorNode@NWildcard@@QBE_NABV?$CObjectVector@VUString@@@@_NAA_N@Z$0:
	lea	ecx, DWORD PTR _pathParts2$67815[ebp]
	jmp	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
__ehhandler$?CheckPathVect@CCensorNode@NWildcard@@QBE_NABV?$CObjectVector@VUString@@@@_NAA_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CheckPathVect@CCensorNode@NWildcard@@QBE_NABV?$CObjectVector@VUString@@@@_NAA_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CheckPathVect@CCensorNode@NWildcard@@QBE_NABV?$CObjectVector@VUString@@@@_NAA_N@Z ENDP ; NWildcard::CCensorNode::CheckPathVect
PUBLIC	?Insert@?$CObjectVector@VUString@@@@QAEXIABVUString@@@Z ; CObjectVector<UString>::Insert
PUBLIC	?CheckPathToRoot@CCensorNode@NWildcard@@QBE_N_NAAV?$CObjectVector@VUString@@@@0@Z ; NWildcard::CCensorNode::CheckPathToRoot
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_include$ = 8						; size = 1
_pathParts$ = 12					; size = 4
_isFile$ = 16						; size = 1
?CheckPathToRoot@CCensorNode@NWildcard@@QBE_N_NAAV?$CObjectVector@VUString@@@@0@Z PROC ; NWildcard::CCensorNode::CheckPathToRoot
; _this$ = ecx
; Line 404
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 405
	movzx	eax, BYTE PTR _isFile$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pathParts$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _include$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckPathCurrent@CCensorNode@NWildcard@@ABE_N_NABV?$CObjectVector@VUString@@@@0@Z ; NWildcard::CCensorNode::CheckPathCurrent
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@CheckPathT
; Line 406
	mov	al, 1
	jmp	SHORT $LN3@CheckPathT
$LN2@CheckPathT:
; Line 407
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN1@CheckPathT
; Line 408
	xor	al, al
	jmp	SHORT $LN3@CheckPathT
$LN1@CheckPathT:
; Line 409
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	push	edx
	push	0
	mov	ecx, DWORD PTR _pathParts$[ebp]
	call	?Insert@?$CObjectVector@VUString@@@@QAEXIABVUString@@@Z ; CObjectVector<UString>::Insert
; Line 410
	movzx	eax, BYTE PTR _isFile$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pathParts$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _include$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?CheckPathToRoot@CCensorNode@NWildcard@@QBE_N_NAAV?$CObjectVector@VUString@@@@0@Z ; NWildcard::CCensorNode::CheckPathToRoot
$LN3@CheckPathT:
; Line 411
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?CheckPathToRoot@CCensorNode@NWildcard@@QBE_N_NAAV?$CObjectVector@VUString@@@@0@Z ENDP ; NWildcard::CCensorNode::CheckPathToRoot
_TEXT	ENDS
PUBLIC	?DeleteBack@UString@@QAEXXZ			; UString::DeleteBack
PUBLIC	?Back@UString@@QBE_WXZ				; UString::Back
PUBLIC	?AddItem2@CCensorNode@NWildcard@@QAEX_NABVUString@@00@Z ; NWildcard::CCensorNode::AddItem2
xdata$x	SEGMENT
__unwindtable$?AddItem2@CCensorNode@NWildcard@@QAEX_NABVUString@@00@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddItem2@CCensorNode@NWildcard@@QAEX_NABVUString@@00@Z$0
__ehfuncinfo$?AddItem2@CCensorNode@NWildcard@@QAEX_NABVUString@@00@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddItem2@CCensorNode@NWildcard@@QAEX_NABVUString@@00@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
_path2$ = -36						; size = 12
_forFolder$ = -18					; size = 1
_forFile$ = -17						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_include$ = 8						; size = 1
_path$ = 12						; size = 4
_recursive$ = 16					; size = 1
_wildcardMatching$ = 20					; size = 1
?AddItem2@CCensorNode@NWildcard@@QAEX_NABVUString@@00@Z PROC ; NWildcard::CCensorNode::AddItem2
; _this$ = ecx
; Line 423
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddItem2@CCensorNode@NWildcard@@QAEX_NABVUString@@00@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 424
	mov	ecx, DWORD PTR _path$[ebp]
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@AddItem2
; Line 425
	jmp	SHORT $LN3@AddItem2
$LN2@AddItem2:
; Line 426
	mov	BYTE PTR _forFile$[ebp], 1
; Line 427
	mov	BYTE PTR _forFolder$[ebp], 1
; Line 428
	mov	ecx, DWORD PTR _path$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _path2$[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 429
	mov	ecx, DWORD PTR _path$[ebp]
	call	?Back@UString@@QBE_WXZ			; UString::Back
	movzx	edx, ax
	push	edx
	call	?IsPathSepar@@YG_N_W@Z			; IsPathSepar
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@AddItem2
; Line 431
	lea	ecx, DWORD PTR _path2$[ebp]
	call	?DeleteBack@UString@@QAEXXZ		; UString::DeleteBack
; Line 432
	mov	BYTE PTR _forFile$[ebp], 0
$LN1@AddItem2:
; Line 434
	movzx	ecx, BYTE PTR _wildcardMatching$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _forFolder$[ebp]
	push	edx
	movzx	eax, BYTE PTR _forFile$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _recursive$[ebp]
	push	ecx
	lea	edx, DWORD PTR _path2$[ebp]
	push	edx
	movzx	eax, BYTE PTR _include$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddItem@CCensorNode@NWildcard@@QAEX_NABVUString@@0000@Z ; NWildcard::CCensorNode::AddItem
; Line 435
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _path2$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
$LN3@AddItem2:
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@AddItem2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	2
$LN9@AddItem2:
	DD	1
	DD	$LN8@AddItem2
$LN8@AddItem2:
	DD	-36					; ffffffdcH
	DD	12					; 0000000cH
	DD	$LN6@AddItem2
$LN6@AddItem2:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	50					; 00000032H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?AddItem2@CCensorNode@NWildcard@@QAEX_NABVUString@@00@Z$0:
	lea	ecx, DWORD PTR _path2$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$?AddItem2@CCensorNode@NWildcard@@QAEX_NABVUString@@00@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddItem2@CCensorNode@NWildcard@@QAEX_NABVUString@@00@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddItem2@CCensorNode@NWildcard@@QAEX_NABVUString@@00@Z ENDP ; NWildcard::CCensorNode::AddItem2
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Back@UString@@QBE_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Back@UString@@QBE_WXZ PROC				; UString::Back, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 480
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ax, WORD PTR [eax+ecx*2-2]
	mov	esp, ebp
	pop	ebp
	ret	0
?Back@UString@@QBE_WXZ ENDP				; UString::Back
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?DeleteBack@UString@@QAEXXZ
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
?DeleteBack@UString@@QAEXXZ PROC			; UString::DeleteBack, COMDAT
; _this$ = ecx
; Line 602
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv66[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv66[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	xor	eax, eax
	mov	ecx, DWORD PTR tv66[ebp]
	mov	WORD PTR [edx+ecx*2], ax
	mov	esp, ebp
	pop	ebp
	ret	0
?DeleteBack@UString@@QAEXXZ ENDP			; UString::DeleteBack
_TEXT	ENDS
PUBLIC	??Y?$CObjectVector@UCItem@NWildcard@@@@QAEAAV0@ABV0@@Z ; CObjectVector<NWildcard::CItem>::operator+=
PUBLIC	?ExtendExclude@CCensorNode@NWildcard@@QAEXABV12@@Z ; NWildcard::CCensorNode::ExtendExclude
xdata$x	SEGMENT
__unwindtable$?ExtendExclude@CCensorNode@NWildcard@@QAEXABV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ExtendExclude@CCensorNode@NWildcard@@QAEXABV12@@Z$0
__ehfuncinfo$?ExtendExclude@CCensorNode@NWildcard@@QAEXABV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ExtendExclude@CCensorNode@NWildcard@@QAEXABV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv132 = -88						; size = 4
tv133 = -84						; size = 4
$T68539 = -80						; size = 52
_subNodeIndex$67847 = -28				; size = 4
_node$67846 = -24					; size = 4
_i$67842 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_fromNodes$ = 8						; size = 4
?ExtendExclude@CCensorNode@NWildcard@@QAEXABV12@@Z PROC	; NWildcard::CCensorNode::ExtendExclude
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\wildcard.cpp
; Line 438
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ExtendExclude@CCensorNode@NWildcard@@QAEXABV12@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 76					; 0000004cH
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-88]
	mov	ecx, 19					; 00000013H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 439
	mov	eax, DWORD PTR _fromNodes$[ebp]
	add	eax, 40					; 00000028H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??Y?$CObjectVector@UCItem@NWildcard@@@@QAEAAV0@ABV0@@Z ; CObjectVector<NWildcard::CItem>::operator+=
; Line 440
	mov	DWORD PTR _i$67842[ebp], 0
	jmp	SHORT $LN4@ExtendExcl
$LN3@ExtendExcl:
	mov	ecx, DWORD PTR _i$67842[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$67842[ebp], ecx
$LN4@ExtendExcl:
	mov	ecx, DWORD PTR _fromNodes$[ebp]
	add	ecx, 16					; 00000010H
	call	?Size@?$CObjectVector@VCCensorNode@NWildcard@@@@QBEIXZ ; CObjectVector<NWildcard::CCensorNode>::Size
	cmp	DWORD PTR _i$67842[ebp], eax
	jae	$LN5@ExtendExcl
; Line 442
	mov	edx, DWORD PTR _i$67842[ebp]
	push	edx
	mov	ecx, DWORD PTR _fromNodes$[ebp]
	add	ecx, 16					; 00000010H
	call	??A?$CObjectVector@VCCensorNode@NWildcard@@@@QBEABVCCensorNode@NWildcard@@I@Z ; CObjectVector<NWildcard::CCensorNode>::operator[]
	mov	DWORD PTR _node$67846[ebp], eax
; Line 443
	mov	eax, DWORD PTR _node$67846[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindSubNode@CCensorNode@NWildcard@@QBEHABVUString@@@Z ; NWildcard::CCensorNode::FindSubNode
	mov	DWORD PTR _subNodeIndex$67847[ebp], eax
; Line 444
	cmp	DWORD PTR _subNodeIndex$67847[ebp], 0
	jge	SHORT $LN1@ExtendExcl
; Line 445
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _node$67846[ebp]
	add	edx, 4
	push	edx
	lea	ecx, DWORD PTR $T68539[ebp]
	call	??0CCensorNode@NWildcard@@QAE@ABVUString@@PAV01@@Z ; NWildcard::CCensorNode::CCensorNode
	mov	DWORD PTR tv133[ebp], eax
	mov	eax, DWORD PTR tv133[ebp]
	mov	DWORD PTR tv132[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR tv132[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?Add@?$CObjectVector@VCCensorNode@NWildcard@@@@QAEIABVCCensorNode@NWildcard@@@Z ; CObjectVector<NWildcard::CCensorNode>::Add
	mov	DWORD PTR _subNodeIndex$67847[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T68539[ebp]
	call	??1CCensorNode@NWildcard@@QAE@XZ
$LN1@ExtendExcl:
; Line 446
	mov	edx, DWORD PTR _node$67846[ebp]
	push	edx
	mov	eax, DWORD PTR _subNodeIndex$67847[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??A?$CObjectVector@VCCensorNode@NWildcard@@@@QAEAAVCCensorNode@NWildcard@@I@Z ; CObjectVector<NWildcard::CCensorNode>::operator[]
	mov	ecx, eax
	call	?ExtendExclude@CCensorNode@NWildcard@@QAEXABV12@@Z ; NWildcard::CCensorNode::ExtendExclude
; Line 447
	jmp	$LN3@ExtendExcl
$LN5@ExtendExcl:
; Line 448
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 88					; 00000058H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ExtendExclude@CCensorNode@NWildcard@@QAEXABV12@@Z$0:
	lea	ecx, DWORD PTR $T68539[ebp]
	jmp	??1CCensorNode@NWildcard@@QAE@XZ
__ehhandler$?ExtendExclude@CCensorNode@NWildcard@@QAEXABV12@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ExtendExclude@CCensorNode@NWildcard@@QAEXABV12@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ExtendExclude@CCensorNode@NWildcard@@QAEXABV12@@Z ENDP	; NWildcard::CCensorNode::ExtendExclude
PUBLIC	??A?$CObjectVector@UCPair@NWildcard@@@@QBEABUCPair@NWildcard@@I@Z ; CObjectVector<NWildcard::CPair>::operator[]
PUBLIC	?Size@?$CObjectVector@UCPair@NWildcard@@@@QBEIXZ ; CObjectVector<NWildcard::CPair>::Size
PUBLIC	?FindPrefix@CCensor@NWildcard@@ABEHABVUString@@@Z ; NWildcard::CCensor::FindPrefix
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$67854 = -8						; size = 4
_this$ = -4						; size = 4
_prefix$ = 8						; size = 4
?FindPrefix@CCensor@NWildcard@@ABEHABVUString@@@Z PROC	; NWildcard::CCensor::FindPrefix
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 452
	mov	DWORD PTR _i$67854[ebp], 0
	jmp	SHORT $LN4@FindPrefix
$LN3@FindPrefix:
	mov	eax, DWORD PTR _i$67854[ebp]
	add	eax, 1
	mov	DWORD PTR _i$67854[ebp], eax
$LN4@FindPrefix:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CObjectVector@UCPair@NWildcard@@@@QBEIXZ ; CObjectVector<NWildcard::CPair>::Size
	cmp	DWORD PTR _i$67854[ebp], eax
	jae	SHORT $LN2@FindPrefix
; Line 453
	mov	ecx, DWORD PTR _prefix$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	mov	ecx, DWORD PTR _i$67854[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CObjectVector@UCPair@NWildcard@@@@QBEABUCPair@NWildcard@@I@Z ; CObjectVector<NWildcard::CPair>::operator[]
	mov	ecx, eax
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	?CompareFileNames@@YGHPB_W0@Z		; CompareFileNames
	test	eax, eax
	jne	SHORT $LN1@FindPrefix
; Line 454
	mov	eax, DWORD PTR _i$67854[ebp]
	jmp	SHORT $LN5@FindPrefix
$LN1@FindPrefix:
; Line 455
	jmp	SHORT $LN3@FindPrefix
$LN2@FindPrefix:
	or	eax, -1
$LN5@FindPrefix:
; Line 456
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?FindPrefix@CCensor@NWildcard@@ABEHABVUString@@@Z ENDP	; NWildcard::CCensor::FindPrefix
_TEXT	ENDS
PUBLIC	?IsDriveColonName@NWildcard@@YG_NPB_W@Z		; NWildcard::IsDriveColonName
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv80 = -8						; size = 4
_c$ = -4						; size = 2
_s$ = 8							; size = 4
?IsDriveColonName@NWildcard@@YG_NPB_W@Z PROC		; NWildcard::IsDriveColonName
; Line 461
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 462
	mov	eax, DWORD PTR _s$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _c$[ebp], cx
; Line 463
	movzx	edx, WORD PTR _c$[ebp]
	test	edx, edx
	je	SHORT $LN5@IsDriveCol
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	cmp	ecx, 58					; 0000003aH
	jne	SHORT $LN5@IsDriveCol
	mov	edx, DWORD PTR _s$[ebp]
	movzx	eax, WORD PTR [edx+4]
	test	eax, eax
	jne	SHORT $LN5@IsDriveCol
	movzx	ecx, WORD PTR _c$[ebp]
	cmp	ecx, 97					; 00000061H
	jl	SHORT $LN4@IsDriveCol
	movzx	edx, WORD PTR _c$[ebp]
	cmp	edx, 122				; 0000007aH
	jle	SHORT $LN6@IsDriveCol
$LN4@IsDriveCol:
	movzx	eax, WORD PTR _c$[ebp]
	cmp	eax, 65					; 00000041H
	jl	SHORT $LN5@IsDriveCol
	movzx	ecx, WORD PTR _c$[ebp]
	cmp	ecx, 90					; 0000005aH
	jg	SHORT $LN5@IsDriveCol
$LN6@IsDriveCol:
	mov	DWORD PTR tv80[ebp], 1
	jmp	SHORT $LN7@IsDriveCol
$LN5@IsDriveCol:
	mov	DWORD PTR tv80[ebp], 0
$LN7@IsDriveCol:
	mov	al, BYTE PTR tv80[ebp]
; Line 464
	mov	esp, ebp
	pop	ebp
	ret	4
?IsDriveColonName@NWildcard@@YG_NPB_W@Z ENDP		; NWildcard::IsDriveColonName
_TEXT	ENDS
PUBLIC	??9@YG_NABVUString@@PB_W@Z			; operator!=
PUBLIC	??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[]
PUBLIC	?IsEmpty@?$CObjectVector@VUString@@@@QBE_NXZ	; CObjectVector<UString>::IsEmpty
PUBLIC	?GetNumPrefixParts_if_DrivePath@NWildcard@@YGIAAV?$CObjectVector@VUString@@@@@Z ; NWildcard::GetNumPrefixParts_if_DrivePath
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_testIndex$ = -4					; size = 4
_pathParts$ = 8						; size = 4
?GetNumPrefixParts_if_DrivePath@NWildcard@@YGIAAV?$CObjectVector@VUString@@@@@Z PROC ; NWildcard::GetNumPrefixParts_if_DrivePath
; Line 467
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 468
	mov	ecx, DWORD PTR _pathParts$[ebp]
	call	?IsEmpty@?$CObjectVector@VUString@@@@QBE_NXZ ; CObjectVector<UString>::IsEmpty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@GetNumPref
; Line 469
	xor	eax, eax
	jmp	$LN6@GetNumPref
$LN5@GetNumPref:
; Line 471
	mov	DWORD PTR _testIndex$[ebp], 0
; Line 472
	push	0
	mov	ecx, DWORD PTR _pathParts$[ebp]
	call	??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[]
	mov	ecx, eax
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@GetNumPref
; Line 476
	mov	ecx, DWORD PTR _pathParts$[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	cmp	eax, 4
	jb	SHORT $LN2@GetNumPref
	push	1
	mov	ecx, DWORD PTR _pathParts$[ebp]
	call	??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[]
	mov	ecx, eax
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@GetNumPref
	push	OFFSET $SG67871
	push	2
	mov	ecx, DWORD PTR _pathParts$[ebp]
	call	??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[]
	push	eax
	call	??9@YG_NABVUString@@PB_W@Z		; operator!=
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@GetNumPref
$LN2@GetNumPref:
; Line 477
	xor	eax, eax
	jmp	SHORT $LN6@GetNumPref
$LN3@GetNumPref:
; Line 478
	mov	DWORD PTR _testIndex$[ebp], 3
$LN4@GetNumPref:
; Line 480
	mov	ecx, DWORD PTR _testIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pathParts$[ebp]
	call	??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[]
	mov	ecx, eax
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	?IsDriveColonName@NWildcard@@YG_NPB_W@Z	; NWildcard::IsDriveColonName
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@GetNumPref
; Line 481
	mov	eax, DWORD PTR _testIndex$[ebp]
	add	eax, 1
	jmp	SHORT $LN6@GetNumPref
$LN1@GetNumPref:
; Line 482
	xor	eax, eax
$LN6@GetNumPref:
; Line 483
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetNumPrefixParts_if_DrivePath@NWildcard@@YGIAAV?$CObjectVector@VUString@@@@@Z ENDP ; NWildcard::GetNumPrefixParts_if_DrivePath
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??9@YG_NABVUString@@PB_W@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
??9@YG_NABVUString@@PB_W@Z PROC				; operator!=, COMDAT
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 621
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, esp
	mov	eax, DWORD PTR _s2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s1$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	DWORD PTR __imp__wcscmp
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	neg	eax
	sbb	eax, eax
	neg	eax
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
??9@YG_NABVUString@@PB_W@Z ENDP				; operator!=
_TEXT	ENDS
PUBLIC	??A?$CObjectVector@UCPair@NWildcard@@@@QAEAAUCPair@NWildcard@@I@Z ; CObjectVector<NWildcard::CPair>::operator[]
PUBLIC	??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z	; CObjectVector<UString>::operator=
PUBLIC	??1CPair@NWildcard@@QAE@XZ			; NWildcard::CPair::~CPair
PUBLIC	?Add@?$CObjectVector@UCPair@NWildcard@@@@QAEIABUCPair@NWildcard@@@Z ; CObjectVector<NWildcard::CPair>::Add
PUBLIC	??0CPair@NWildcard@@QAE@ABVUString@@@Z		; NWildcard::CPair::CPair
PUBLIC	?Add_PathSepar@UString@@QAEXXZ			; UString::Add_PathSepar
PUBLIC	?DeleteBack@?$CObjectVector@VUString@@@@QAEXXZ	; CObjectVector<UString>::DeleteBack
PUBLIC	?Back@?$CObjectVector@VUString@@@@QAEAAVUString@@XZ ; CObjectVector<UString>::Back
PUBLIC	__TI2PAD
PUBLIC	?AddItem@CCensor@NWildcard@@QAEXW4ECensorPathMode@2@_NABVUString@@11@Z ; NWildcard::CCensor::AddItem
PUBLIC	__CTA2PAD
PUBLIC	__CT??_R0PAD@84
PUBLIC	??_R0PAD@8					; char * `RTTI Type Descriptor'
PUBLIC	__CT??_R0PAX@84
PUBLIC	??_R0PAX@8					; void * `RTTI Type Descriptor'
EXTRN	??YUString@@QAEAAV0@ABV0@@Z:PROC		; UString::operator+=
EXTRN	__CxxThrowException@8:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_R0PAX@8
; File c:\workspace\7z1505-src\cpp\common\wildcard.cpp
_DATA	SEGMENT
??_R0PAX@8 DD	FLAT:??_7type_info@@6B@			; void * `RTTI Type Descriptor'
	DD	00H
	DB	'.PAX', 00H
_DATA	ENDS
;	COMDAT __CT??_R0PAX@84
xdata$x	SEGMENT
__CT??_R0PAX@84 DD 01H
	DD	FLAT:??_R0PAX@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	00H
xdata$x	ENDS
;	COMDAT ??_R0PAD@8
_DATA	SEGMENT
??_R0PAD@8 DD	FLAT:??_7type_info@@6B@			; char * `RTTI Type Descriptor'
	DD	00H
	DB	'.PAD', 00H
_DATA	ENDS
;	COMDAT __CT??_R0PAD@84
xdata$x	SEGMENT
__CT??_R0PAD@84 DD 01H
	DD	FLAT:??_R0PAD@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	00H
xdata$x	ENDS
;	COMDAT __CTA2PAD
xdata$x	SEGMENT
__CTA2PAD DD	02H
	DD	FLAT:__CT??_R0PAD@84
	DD	FLAT:__CT??_R0PAX@84
xdata$x	ENDS
;	COMDAT __TI2PAD
xdata$x	SEGMENT
__TI2PAD DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA2PAD
xdata$x	ENDS
xdata$x	SEGMENT
__ehfuncinfo$?AddItem@CCensor@NWildcard@@QAEXW4ECensorPathMode@2@_NABVUString@@11@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?AddItem@CCensor@NWildcard@@QAEXW4ECensorPathMode@2@_NABVUString@@11@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?AddItem@CCensor@NWildcard@@QAEXW4ECensorPathMode@2@_NABVUString@@11@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddItem@CCensor@NWildcard@@QAEXW4ECensorPathMode@2@_NABVUString@@11@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?AddItem@CCensor@NWildcard@@QAEXW4ECensorPathMode@2@_NABVUString@@11@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?AddItem@CCensor@NWildcard@@QAEXW4ECensorPathMode@2@_NABVUString@@11@Z$3
	DD	01H
	DD	FLAT:__unwindfunclet$?AddItem@CCensor@NWildcard@@QAEXW4ECensorPathMode@2@_NABVUString@@11@Z$4
	DD	01H
	DD	FLAT:__unwindfunclet$?AddItem@CCensor@NWildcard@@QAEXW4ECensorPathMode@2@_NABVUString@@11@Z$5
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv262 = -220						; size = 4
tv83 = -216						; size = 4
tv260 = -212						; size = 4
tv259 = -208						; size = 4
$T68560 = -204						; size = 12
$T68559 = -192						; size = 64
$T68558 = -128						; size = 4
$T68556 = -124						; size = 4
_item$ = -116						; size = 16
_index$ = -96						; size = 4
_front$67953 = -92					; size = 4
_i$67949 = -88						; size = 4
_part$67940 = -84					; size = 4
_i$67936 = -80						; size = 4
_dotsIndex$67935 = -76					; size = 4
_numSkipParts$67932 = -72				; size = 4
_numPrefixParts$67930 = -68				; size = 4
_ignoreWildcardIndex$ = -64				; size = 4
_prefix$ = -56						; size = 12
_forFile$ = -37						; size = 1
_pathParts$ = -32					; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pathMode$ = 8						; size = 4
_include$ = 12						; size = 1
_path$ = 16						; size = 4
_recursive$ = 20					; size = 1
_wildcardMatching$ = 24					; size = 1
?AddItem@CCensor@NWildcard@@QAEXW4ECensorPathMode@2@_NABVUString@@11@Z PROC ; NWildcard::CCensor::AddItem
; _this$ = ecx
; Line 535
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddItem@CCensor@NWildcard@@QAEXW4ECensorPathMode@2@_NABVUString@@11@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 208				; 000000d0H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 536
	mov	ecx, DWORD PTR _path$[ebp]
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN23@AddItem@3
; Line 537
	mov	DWORD PTR $T68556[ebp], OFFSET $SG67921
	push	OFFSET __TI2PAD
	lea	ecx, DWORD PTR $T68556[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN23@AddItem@3:
; Line 539
	lea	ecx, DWORD PTR _pathParts$[ebp]
	call	??0?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::CObjectVector<UString>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 540
	lea	edx, DWORD PTR _pathParts$[ebp]
	push	edx
	mov	eax, DWORD PTR _path$[ebp]
	push	eax
	call	?SplitPathToParts@@YGXABVUString@@AAV?$CObjectVector@VUString@@@@@Z ; SplitPathToParts
; Line 542
	mov	BYTE PTR _forFile$[ebp], 1
; Line 543
	lea	ecx, DWORD PTR _pathParts$[ebp]
	call	?Back@?$CObjectVector@VUString@@@@QAEAAVUString@@XZ ; CObjectVector<UString>::Back
	mov	ecx, eax
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN22@AddItem@3
; Line 545
	mov	BYTE PTR _forFile$[ebp], 0
; Line 546
	lea	ecx, DWORD PTR _pathParts$[ebp]
	call	?DeleteBack@?$CObjectVector@VUString@@@@QAEXXZ ; CObjectVector<UString>::DeleteBack
$LN22@AddItem@3:
; Line 549
	lea	ecx, DWORD PTR _prefix$[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
; Line 551
	mov	DWORD PTR _ignoreWildcardIndex$[ebp], -1
; Line 558
	lea	ecx, DWORD PTR _pathParts$[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	cmp	eax, 3
	jb	SHORT $LN21@AddItem@3
	push	0
	lea	ecx, DWORD PTR _pathParts$[ebp]
	call	??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[]
	mov	ecx, eax
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN21@AddItem@3
	push	1
	lea	ecx, DWORD PTR _pathParts$[ebp]
	call	??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[]
	mov	ecx, eax
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN21@AddItem@3
	push	OFFSET $SG67928
	push	2
	lea	ecx, DWORD PTR _pathParts$[ebp]
	call	??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[]
	push	eax
	call	??8@YG_NABVUString@@PB_W@Z		; operator==
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN21@AddItem@3
; Line 559
	mov	DWORD PTR _ignoreWildcardIndex$[ebp], 2
$LN21@AddItem@3:
; Line 562
	cmp	DWORD PTR _pathMode$[ebp], 2
	je	$LN20@AddItem@3
; Line 564
	mov	DWORD PTR _ignoreWildcardIndex$[ebp], -1
; Line 566
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T68558[ebp], esp
	lea	edx, DWORD PTR _pathParts$[ebp]
	push	edx
	call	??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z ; CObjectVector<UString>::CObjectVector<UString>
	mov	DWORD PTR tv259[ebp], eax
	call	?GetNumPrefixParts@NWildcard@@YGIV?$CObjectVector@VUString@@@@@Z ; NWildcard::GetNumPrefixParts
	mov	DWORD PTR tv260[ebp], eax
	mov	eax, DWORD PTR tv260[ebp]
	mov	DWORD PTR _numPrefixParts$67930[ebp], eax
; Line 567
	mov	ecx, DWORD PTR _numPrefixParts$67930[ebp]
	mov	DWORD PTR _numSkipParts$67932[ebp], ecx
; Line 569
	cmp	DWORD PTR _pathMode$[ebp], 1
	je	SHORT $LN19@AddItem@3
; Line 571
	cmp	DWORD PTR _numPrefixParts$67930[ebp], 0
	je	SHORT $LN19@AddItem@3
	lea	ecx, DWORD PTR _pathParts$[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	cmp	eax, DWORD PTR _numPrefixParts$67930[ebp]
	jbe	SHORT $LN19@AddItem@3
; Line 572
	lea	ecx, DWORD PTR _pathParts$[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	sub	eax, 1
	mov	DWORD PTR _numSkipParts$67932[ebp], eax
$LN19@AddItem@3:
; Line 575
	mov	DWORD PTR _dotsIndex$67935[ebp], -1
; Line 576
	mov	edx, DWORD PTR _numPrefixParts$67930[ebp]
	mov	DWORD PTR _i$67936[ebp], edx
	jmp	SHORT $LN17@AddItem@3
$LN16@AddItem@3:
	mov	eax, DWORD PTR _i$67936[ebp]
	add	eax, 1
	mov	DWORD PTR _i$67936[ebp], eax
$LN17@AddItem@3:
	lea	ecx, DWORD PTR _pathParts$[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	cmp	DWORD PTR _i$67936[ebp], eax
	jae	SHORT $LN15@AddItem@3
; Line 578
	mov	ecx, DWORD PTR _i$67936[ebp]
	push	ecx
	lea	ecx, DWORD PTR _pathParts$[ebp]
	call	??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[]
	mov	DWORD PTR _part$67940[ebp], eax
; Line 579
	push	OFFSET $SG67943
	mov	edx, DWORD PTR _part$67940[ebp]
	push	edx
	call	??8@YG_NABVUString@@PB_W@Z		; operator==
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN13@AddItem@3
	push	OFFSET $SG67944
	mov	ecx, DWORD PTR _part$67940[ebp]
	push	ecx
	call	??8@YG_NABVUString@@PB_W@Z		; operator==
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN14@AddItem@3
$LN13@AddItem@3:
; Line 580
	mov	eax, DWORD PTR _i$67936[ebp]
	mov	DWORD PTR _dotsIndex$67935[ebp], eax
$LN14@AddItem@3:
; Line 581
	jmp	SHORT $LN16@AddItem@3
$LN15@AddItem@3:
; Line 583
	cmp	DWORD PTR _dotsIndex$67935[ebp], 0
	jl	SHORT $LN12@AddItem@3
; Line 584
	lea	ecx, DWORD PTR _pathParts$[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	sub	eax, 1
	cmp	DWORD PTR _dotsIndex$67935[ebp], eax
	jne	SHORT $LN11@AddItem@3
; Line 585
	lea	ecx, DWORD PTR _pathParts$[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	mov	DWORD PTR _numSkipParts$67932[ebp], eax
; Line 586
	jmp	SHORT $LN12@AddItem@3
$LN11@AddItem@3:
; Line 587
	lea	ecx, DWORD PTR _pathParts$[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	sub	eax, 1
	mov	DWORD PTR _numSkipParts$67932[ebp], eax
$LN12@AddItem@3:
; Line 590
	mov	DWORD PTR _i$67949[ebp], 0
	jmp	SHORT $LN9@AddItem@3
$LN8@AddItem@3:
	mov	ecx, DWORD PTR _i$67949[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$67949[ebp], ecx
$LN9@AddItem@3:
	mov	edx, DWORD PTR _i$67949[ebp]
	cmp	edx, DWORD PTR _numSkipParts$67932[ebp]
	jae	SHORT $LN20@AddItem@3
; Line 593
	lea	ecx, DWORD PTR _pathParts$[ebp]
	call	?Front@?$CObjectVector@VUString@@@@QAEAAVUString@@XZ ; CObjectVector<UString>::Front
	mov	DWORD PTR _front$67953[ebp], eax
; Line 595
	movzx	eax, BYTE PTR _wildcardMatching$[ebp]
	test	eax, eax
	je	SHORT $LN6@AddItem@3
; Line 596
	mov	ecx, DWORD PTR _i$67949[ebp]
	cmp	ecx, DWORD PTR _numPrefixParts$67930[ebp]
	jb	SHORT $LN6@AddItem@3
	mov	edx, DWORD PTR _front$67953[ebp]
	push	edx
	call	?DoesNameContainWildcard@@YG_NABVUString@@@Z ; DoesNameContainWildcard
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@AddItem@3
; Line 597
	jmp	SHORT $LN20@AddItem@3
$LN6@AddItem@3:
; Line 598
	mov	ecx, DWORD PTR _front$67953[ebp]
	push	ecx
	lea	ecx, DWORD PTR _prefix$[ebp]
	call	??YUString@@QAEAAV0@ABV0@@Z		; UString::operator+=
; Line 599
	lea	ecx, DWORD PTR _prefix$[ebp]
	call	?Add_PathSepar@UString@@QAEXXZ		; UString::Add_PathSepar
; Line 601
	push	0
	lea	ecx, DWORD PTR _pathParts$[ebp]
	call	?Delete@?$CObjectVector@VUString@@@@QAEXI@Z ; CObjectVector<UString>::Delete
; Line 602
	jmp	SHORT $LN8@AddItem@3
$LN20@AddItem@3:
; Line 605
	lea	edx, DWORD PTR _prefix$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindPrefix@CCensor@NWildcard@@ABEHABVUString@@@Z ; NWildcard::CCensor::FindPrefix
	mov	DWORD PTR _index$[ebp], eax
; Line 606
	cmp	DWORD PTR _index$[ebp], 0
	jge	SHORT $LN4@AddItem@3
; Line 607
	lea	eax, DWORD PTR _prefix$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T68559[ebp]
	call	??0CPair@NWildcard@@QAE@ABVUString@@@Z	; NWildcard::CPair::CPair
	mov	DWORD PTR tv83[ebp], eax
	mov	ecx, DWORD PTR tv83[ebp]
	mov	DWORD PTR tv262[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	edx, DWORD PTR tv262[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CObjectVector@UCPair@NWildcard@@@@QAEIABUCPair@NWildcard@@@Z ; CObjectVector<NWildcard::CPair>::Add
	mov	DWORD PTR _index$[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T68559[ebp]
	call	??1CPair@NWildcard@@QAE@XZ
$LN4@AddItem@3:
; Line 609
	cmp	DWORD PTR _pathMode$[ebp], 2
	je	SHORT $LN3@AddItem@3
; Line 611
	lea	ecx, DWORD PTR _pathParts$[ebp]
	call	?IsEmpty@?$CObjectVector@VUString@@@@QBE_NXZ ; CObjectVector<UString>::IsEmpty
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@AddItem@3
	lea	ecx, DWORD PTR _pathParts$[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	cmp	eax, 1
	jne	SHORT $LN3@AddItem@3
	push	0
	lea	ecx, DWORD PTR _pathParts$[ebp]
	call	??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[]
	mov	ecx, eax
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@AddItem@3
$LN1@AddItem@3:
; Line 614
	lea	ecx, DWORD PTR _pathParts$[ebp]
	call	?Clear@?$CObjectVector@VUString@@@@QAEXXZ ; CObjectVector<UString>::Clear
; Line 615
	push	OFFSET $SG67963
	lea	ecx, DWORD PTR $T68560[ebp]
	call	??0UString@@QAE@PB_W@Z			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	edx, DWORD PTR $T68560[ebp]
	push	edx
	lea	ecx, DWORD PTR _pathParts$[ebp]
	call	?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z ; CObjectVector<UString>::Add
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T68560[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
; Line 616
	mov	BYTE PTR _forFile$[ebp], 1
; Line 617
	mov	BYTE PTR _wildcardMatching$[ebp], 1
; Line 618
	mov	BYTE PTR _recursive$[ebp], 0
$LN3@AddItem@3:
; Line 622
	lea	ecx, DWORD PTR _item$[ebp]
	call	??0CItem@NWildcard@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
; Line 623
	lea	eax, DWORD PTR _pathParts$[ebp]
	push	eax
	lea	ecx, DWORD PTR _item$[ebp]
	call	??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z ; CObjectVector<UString>::operator=
; Line 624
	mov	BYTE PTR _item$[ebp+14], 1
; Line 625
	mov	cl, BYTE PTR _forFile$[ebp]
	mov	BYTE PTR _item$[ebp+13], cl
; Line 626
	mov	dl, BYTE PTR _recursive$[ebp]
	mov	BYTE PTR _item$[ebp+12], dl
; Line 627
	mov	al, BYTE PTR _wildcardMatching$[ebp]
	mov	BYTE PTR _item$[ebp+15], al
; Line 628
	mov	ecx, DWORD PTR _ignoreWildcardIndex$[ebp]
	push	ecx
	lea	edx, DWORD PTR _item$[ebp]
	push	edx
	movzx	eax, BYTE PTR _include$[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CObjectVector@UCPair@NWildcard@@@@QAEAAUCPair@NWildcard@@I@Z ; CObjectVector<NWildcard::CPair>::operator[]
	add	eax, 12					; 0000000cH
	mov	ecx, eax
	call	?AddItem@CCensorNode@NWildcard@@QAEX_NAAUCItem@2@H@Z ; NWildcard::CCensorNode::AddItem
; Line 629
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _item$[ebp]
	call	??1CItem@NWildcard@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _prefix$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _pathParts$[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
$LN25@AddItem@3:
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN37@AddItem@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
	npad	1
$LN37@AddItem@3:
	DD	3
	DD	$LN36@AddItem@3
$LN36@AddItem@3:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN32@AddItem@3
	DD	-56					; ffffffc8H
	DD	12					; 0000000cH
	DD	$LN33@AddItem@3
	DD	-116					; ffffff8cH
	DD	16					; 00000010H
	DD	$LN34@AddItem@3
$LN34@AddItem@3:
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	0
$LN33@AddItem@3:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	120					; 00000078H
	DB	0
$LN32@AddItem@3:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?AddItem@CCensor@NWildcard@@QAEXW4ECensorPathMode@2@_NABVUString@@11@Z$0:
	lea	ecx, DWORD PTR _pathParts$[ebp]
	jmp	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
__unwindfunclet$?AddItem@CCensor@NWildcard@@QAEXW4ECensorPathMode@2@_NABVUString@@11@Z$1:
	lea	ecx, DWORD PTR _prefix$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?AddItem@CCensor@NWildcard@@QAEXW4ECensorPathMode@2@_NABVUString@@11@Z$3:
	lea	ecx, DWORD PTR $T68559[ebp]
	jmp	??1CPair@NWildcard@@QAE@XZ
__unwindfunclet$?AddItem@CCensor@NWildcard@@QAEXW4ECensorPathMode@2@_NABVUString@@11@Z$4:
	lea	ecx, DWORD PTR $T68560[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?AddItem@CCensor@NWildcard@@QAEXW4ECensorPathMode@2@_NABVUString@@11@Z$5:
	lea	ecx, DWORD PTR _item$[ebp]
	jmp	??1CItem@NWildcard@@QAE@XZ
__ehhandler$?AddItem@CCensor@NWildcard@@QAEXW4ECensorPathMode@2@_NABVUString@@11@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-216]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddItem@CCensor@NWildcard@@QAEXW4ECensorPathMode@2@_NABVUString@@11@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddItem@CCensor@NWildcard@@QAEXW4ECensorPathMode@2@_NABVUString@@11@Z ENDP ; NWildcard::CCensor::AddItem
PUBLIC	??YUString@@QAEAAV0@_W@Z			; UString::operator+=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add_PathSepar@UString@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Add_PathSepar@UString@@QAEXXZ PROC			; UString::Add_PathSepar, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 529
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	push	92					; 0000005cH
	mov	ecx, DWORD PTR _this$[ebp]
	call	??YUString@@QAEAAV0@_W@Z		; UString::operator+=
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Add_PathSepar@UString@@QAEXXZ ENDP			; UString::Add_PathSepar
_TEXT	ENDS
EXTRN	?Grow_1@UString@@AAEXXZ:PROC			; UString::Grow_1
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??YUString@@QAEAAV0@_W@Z
_TEXT	SEGMENT
_chars$ = -12						; size = 4
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_c$ = 8							; size = 2
??YUString@@QAEAAV0@_W@Z PROC				; UString::operator+=, COMDAT
; _this$ = ecx
; Line 515
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 516
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+4]
	jne	SHORT $LN1@operator
; Line 517
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Grow_1@UString@@AAEXXZ			; UString::Grow_1
$LN1@operator:
; Line 518
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _len$[ebp], ecx
; Line 519
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _chars$[ebp], eax
; Line 520
	mov	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _chars$[ebp]
	mov	ax, WORD PTR _c$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
	mov	ecx, DWORD PTR _len$[ebp]
	add	ecx, 1
	mov	DWORD PTR _len$[ebp], ecx
; Line 521
	xor	edx, edx
	mov	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _chars$[ebp]
	mov	WORD PTR [ecx+eax*2], dx
; Line 522
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 523
	mov	eax, DWORD PTR _this$[ebp]
; Line 524
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??YUString@@QAEAAV0@_W@Z ENDP				; UString::operator+=
_TEXT	ENDS
PUBLIC	??0CCensorNode@NWildcard@@QAE@XZ		; NWildcard::CCensorNode::CCensorNode
;	COMDAT xdata$x
; File c:\workspace\7z1505-src\cpp\common\wildcard.h
xdata$x	SEGMENT
__unwindtable$??0CPair@NWildcard@@QAE@ABVUString@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CPair@NWildcard@@QAE@ABVUString@@@Z$0
__ehfuncinfo$??0CPair@NWildcard@@QAE@ABVUString@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CPair@NWildcard@@QAE@ABVUString@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CPair@NWildcard@@QAE@ABVUString@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_prefix$ = 8						; size = 4
??0CPair@NWildcard@@QAE@ABVUString@@@Z PROC		; NWildcard::CPair::CPair, COMDAT
; _this$ = ecx
; Line 95
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CPair@NWildcard@@QAE@ABVUString@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _prefix$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0CCensorNode@NWildcard@@QAE@XZ	; NWildcard::CCensorNode::CCensorNode
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CPair@NWildcard@@QAE@ABVUString@@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$??0CPair@NWildcard@@QAE@ABVUString@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CPair@NWildcard@@QAE@ABVUString@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CPair@NWildcard@@QAE@ABVUString@@@Z ENDP		; NWildcard::CPair::CPair
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CCensorNode@NWildcard@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CCensorNode@NWildcard@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CCensorNode@NWildcard@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CCensorNode@NWildcard@@QAE@XZ$2
__ehfuncinfo$??0CCensorNode@NWildcard@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0CCensorNode@NWildcard@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CCensorNode@NWildcard@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CCensorNode@NWildcard@@QAE@XZ PROC			; NWildcard::CCensorNode::CCensorNode, COMDAT
; _this$ = ecx
; Line 63
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CCensorNode@NWildcard@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ ; CObjectVector<NWildcard::CCensorNode>::CObjectVector<NWildcard::CCensorNode>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??0?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ ; CObjectVector<NWildcard::CItem>::CObjectVector<NWildcard::CItem>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??0?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ ; CObjectVector<NWildcard::CItem>::CObjectVector<NWildcard::CItem>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CCensorNode@NWildcard@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??0CCensorNode@NWildcard@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	jmp	??1?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ ; CObjectVector<NWildcard::CCensorNode>::~CObjectVector<NWildcard::CCensorNode>
__unwindfunclet$??0CCensorNode@NWildcard@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	jmp	??1?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ ; CObjectVector<NWildcard::CItem>::~CObjectVector<NWildcard::CItem>
__ehhandler$??0CCensorNode@NWildcard@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CCensorNode@NWildcard@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CCensorNode@NWildcard@@QAE@XZ ENDP			; NWildcard::CCensorNode::CCensorNode
PUBLIC	?IsEqualTo_Ascii_NoCase@UString@@QBE_NPBD@Z	; UString::IsEqualTo_Ascii_NoCase
xdata$x	SEGMENT
__unwindtable$?GetNumPrefixParts@NWildcard@@YGIV?$CObjectVector@VUString@@@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetNumPrefixParts@NWildcard@@YGIV?$CObjectVector@VUString@@@@@Z$0
__ehfuncinfo$?GetNumPrefixParts@NWildcard@@YGIV?$CObjectVector@VUString@@@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetNumPrefixParts@NWildcard@@YGIV?$CObjectVector@VUString@@@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T68614 = -64						; size = 4
$T68613 = -60						; size = 4
$T68612 = -56						; size = 4
$T68611 = -52						; size = 4
$T68610 = -48						; size = 4
$T68609 = -44						; size = 4
$T68608 = -40						; size = 4
$T68607 = -36						; size = 4
$T68606 = -32						; size = 4
$T68605 = -28						; size = 4
$T68604 = -24						; size = 4
$T68603 = -20						; size = 4
_networkParts$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pathParts$ = 8						; size = 12
?GetNumPrefixParts@NWildcard@@YGIV?$CObjectVector@VUString@@@@@Z PROC ; NWildcard::GetNumPrefixParts
; File c:\workspace\7z1505-src\cpp\common\wildcard.cpp
; Line 488
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetNumPrefixParts@NWildcard@@YGIV?$CObjectVector@VUString@@@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 52					; 00000034H
	push	edi
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 489
	lea	ecx, DWORD PTR _pathParts$[ebp]
	call	?IsEmpty@?$CObjectVector@VUString@@@@QBE_NXZ ; CObjectVector<UString>::IsEmpty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN12@GetNumPref@2
; Line 490
	mov	DWORD PTR $T68603[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _pathParts$[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	eax, DWORD PTR $T68603[ebp]
	jmp	$LN13@GetNumPref@2
$LN12@GetNumPref@2:
; Line 494
	push	0
	lea	ecx, DWORD PTR _pathParts$[ebp]
	call	??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[]
	mov	ecx, eax
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	?IsDriveColonName@NWildcard@@YG_NPB_W@Z	; NWildcard::IsDriveColonName
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN11@GetNumPref@2
; Line 495
	mov	DWORD PTR $T68604[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _pathParts$[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	eax, DWORD PTR $T68604[ebp]
	jmp	$LN13@GetNumPref@2
$LN11@GetNumPref@2:
; Line 496
	push	0
	lea	ecx, DWORD PTR _pathParts$[ebp]
	call	??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[]
	mov	ecx, eax
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN10@GetNumPref@2
; Line 497
	mov	DWORD PTR $T68605[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _pathParts$[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	eax, DWORD PTR $T68605[ebp]
	jmp	$LN13@GetNumPref@2
$LN10@GetNumPref@2:
; Line 499
	lea	ecx, DWORD PTR _pathParts$[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	cmp	eax, 1
	jne	SHORT $LN9@GetNumPref@2
; Line 500
	mov	DWORD PTR $T68606[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _pathParts$[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	eax, DWORD PTR $T68606[ebp]
	jmp	$LN13@GetNumPref@2
$LN9@GetNumPref@2:
; Line 501
	push	1
	lea	ecx, DWORD PTR _pathParts$[ebp]
	call	??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[]
	mov	ecx, eax
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN8@GetNumPref@2
; Line 502
	mov	DWORD PTR $T68607[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _pathParts$[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	eax, DWORD PTR $T68607[ebp]
	jmp	$LN13@GetNumPref@2
$LN8@GetNumPref@2:
; Line 503
	lea	ecx, DWORD PTR _pathParts$[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	cmp	eax, 2
	jne	SHORT $LN7@GetNumPref@2
; Line 504
	mov	DWORD PTR $T68608[ebp], 2
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _pathParts$[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	eax, DWORD PTR $T68608[ebp]
	jmp	$LN13@GetNumPref@2
$LN7@GetNumPref@2:
; Line 505
	push	OFFSET $SG67889
	push	2
	lea	ecx, DWORD PTR _pathParts$[ebp]
	call	??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[]
	push	eax
	call	??8@YG_NABVUString@@PB_W@Z		; operator==
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN6@GetNumPref@2
; Line 506
	mov	DWORD PTR $T68609[ebp], 3
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _pathParts$[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	eax, DWORD PTR $T68609[ebp]
	jmp	$LN13@GetNumPref@2
$LN6@GetNumPref@2:
; Line 508
	mov	DWORD PTR _networkParts$[ebp], 2
; Line 509
	push	OFFSET $SG67893
	push	2
	lea	ecx, DWORD PTR _pathParts$[ebp]
	call	??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[]
	push	eax
	call	??8@YG_NABVUString@@PB_W@Z		; operator==
	movzx	edx, al
	test	edx, edx
	je	$LN5@GetNumPref@2
; Line 511
	lea	ecx, DWORD PTR _pathParts$[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	cmp	eax, 3
	jne	SHORT $LN4@GetNumPref@2
; Line 512
	mov	DWORD PTR $T68610[ebp], 3
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _pathParts$[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	eax, DWORD PTR $T68610[ebp]
	jmp	$LN13@GetNumPref@2
$LN4@GetNumPref@2:
; Line 513
	push	3
	lea	ecx, DWORD PTR _pathParts$[ebp]
	call	??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[]
	mov	ecx, eax
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	?IsDriveColonName@NWildcard@@YG_NPB_W@Z	; NWildcard::IsDriveColonName
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@GetNumPref@2
; Line 514
	mov	DWORD PTR $T68611[ebp], 4
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _pathParts$[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	eax, DWORD PTR $T68611[ebp]
	jmp	$LN13@GetNumPref@2
$LN3@GetNumPref@2:
; Line 515
	push	OFFSET $SG67899
	push	3
	lea	ecx, DWORD PTR _pathParts$[ebp]
	call	??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[]
	mov	ecx, eax
	call	?IsEqualTo_Ascii_NoCase@UString@@QBE_NPBD@Z ; UString::IsEqualTo_Ascii_NoCase
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN2@GetNumPref@2
; Line 516
	mov	DWORD PTR $T68612[ebp], 3
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _pathParts$[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	eax, DWORD PTR $T68612[ebp]
	jmp	SHORT $LN13@GetNumPref@2
$LN2@GetNumPref@2:
; Line 517
	mov	DWORD PTR _networkParts$[ebp], 4
$LN5@GetNumPref@2:
; Line 522
	mov	edx, DWORD PTR _networkParts$[ebp]
	add	edx, 1
	mov	DWORD PTR _networkParts$[ebp], edx
; Line 523
	lea	ecx, DWORD PTR _pathParts$[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	cmp	eax, DWORD PTR _networkParts$[ebp]
	ja	SHORT $LN1@GetNumPref@2
; Line 524
	lea	ecx, DWORD PTR _pathParts$[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	mov	DWORD PTR $T68613[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _pathParts$[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	eax, DWORD PTR $T68613[ebp]
	jmp	SHORT $LN13@GetNumPref@2
$LN1@GetNumPref@2:
; Line 525
	mov	eax, DWORD PTR _networkParts$[ebp]
	mov	DWORD PTR $T68614[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _pathParts$[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	eax, DWORD PTR $T68614[ebp]
$LN13@GetNumPref@2:
; Line 532
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 64					; 00000040H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?GetNumPrefixParts@NWildcard@@YGIV?$CObjectVector@VUString@@@@@Z$0:
	lea	ecx, DWORD PTR _pathParts$[ebp]
	jmp	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
__ehhandler$?GetNumPrefixParts@NWildcard@@YGIV?$CObjectVector@VUString@@@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-60]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetNumPrefixParts@NWildcard@@YGIV?$CObjectVector@VUString@@@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetNumPrefixParts@NWildcard@@YGIV?$CObjectVector@VUString@@@@@Z ENDP ; NWildcard::GetNumPrefixParts
EXTRN	?StringsAreEqualNoCase_Ascii@@YG_NPB_WPBD@Z:PROC ; StringsAreEqualNoCase_Ascii
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsEqualTo_Ascii_NoCase@UString@@QBE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
?IsEqualTo_Ascii_NoCase@UString@@QBE_NPBD@Z PROC	; UString::IsEqualTo_Ascii_NoCase, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 549
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	?StringsAreEqualNoCase_Ascii@@YG_NPB_WPBD@Z ; StringsAreEqualNoCase_Ascii
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?IsEqualTo_Ascii_NoCase@UString@@QBE_NPBD@Z ENDP	; UString::IsEqualTo_Ascii_NoCase
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CPair@NWildcard@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CPair@NWildcard@@QAE@XZ$0
__ehfuncinfo$??1CPair@NWildcard@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CPair@NWildcard@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CPair@NWildcard@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CPair@NWildcard@@QAE@XZ PROC				; NWildcard::CPair::~CPair, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CPair@NWildcard@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1CCensorNode@NWildcard@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CPair@NWildcard@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$??1CPair@NWildcard@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CPair@NWildcard@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CPair@NWildcard@@QAE@XZ ENDP				; NWildcard::CPair::~CPair
PUBLIC	?ExtendExclude@CCensor@NWildcard@@QAEXXZ	; NWildcard::CCensor::ExtendExclude
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_index$ = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
?ExtendExclude@CCensor@NWildcard@@QAEXXZ PROC		; NWildcard::CCensor::ExtendExclude
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\wildcard.cpp
; Line 650
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 652
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN9@ExtendExcl@2
$LN8@ExtendExcl@2:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN9@ExtendExcl@2:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CObjectVector@UCPair@NWildcard@@@@QBEIXZ ; CObjectVector<NWildcard::CPair>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN7@ExtendExcl@2
; Line 653
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CObjectVector@UCPair@NWildcard@@@@QAEAAUCPair@NWildcard@@I@Z ; CObjectVector<NWildcard::CPair>::operator[]
	mov	ecx, eax
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN6@ExtendExcl@2
; Line 654
	jmp	SHORT $LN7@ExtendExcl@2
$LN6@ExtendExcl@2:
; Line 655
	jmp	SHORT $LN8@ExtendExcl@2
$LN7@ExtendExcl@2:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CObjectVector@UCPair@NWildcard@@@@QBEIXZ ; CObjectVector<NWildcard::CPair>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jne	SHORT $LN5@ExtendExcl@2
; Line 656
	jmp	SHORT $LN10@ExtendExcl@2
$LN5@ExtendExcl@2:
; Line 657
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _index$[ebp], eax
; Line 658
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@ExtendExcl@2
$LN3@ExtendExcl@2:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN4@ExtendExcl@2:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CObjectVector@UCPair@NWildcard@@@@QBEIXZ ; CObjectVector<NWildcard::CPair>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN10@ExtendExcl@2
; Line 659
	mov	edx, DWORD PTR _index$[ebp]
	cmp	edx, DWORD PTR _i$[ebp]
	je	SHORT $LN1@ExtendExcl@2
; Line 660
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CObjectVector@UCPair@NWildcard@@@@QAEAAUCPair@NWildcard@@I@Z ; CObjectVector<NWildcard::CPair>::operator[]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CObjectVector@UCPair@NWildcard@@@@QAEAAUCPair@NWildcard@@I@Z ; CObjectVector<NWildcard::CPair>::operator[]
	add	eax, 12					; 0000000cH
	mov	ecx, eax
	call	?ExtendExclude@CCensorNode@NWildcard@@QAEXABV12@@Z ; NWildcard::CCensorNode::ExtendExclude
$LN1@ExtendExcl@2:
; Line 661
	jmp	SHORT $LN3@ExtendExcl@2
$LN10@ExtendExcl@2:
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ExtendExclude@CCensor@NWildcard@@QAEXXZ ENDP		; NWildcard::CCensor::ExtendExclude
_TEXT	ENDS
PUBLIC	?Clear@?$CObjectVector@UCCensorPath@NWildcard@@@@QAEXXZ ; CObjectVector<NWildcard::CCensorPath>::Clear
PUBLIC	??A?$CObjectVector@UCCensorPath@NWildcard@@@@QAEAAUCCensorPath@NWildcard@@I@Z ; CObjectVector<NWildcard::CCensorPath>::operator[]
PUBLIC	?Size@?$CObjectVector@UCCensorPath@NWildcard@@@@QBEIXZ ; CObjectVector<NWildcard::CCensorPath>::Size
PUBLIC	?AddPathsToCensor@CCensor@NWildcard@@QAEXW4ECensorPathMode@2@@Z ; NWildcard::CCensor::AddPathsToCensor
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_cp$67990 = -12						; size = 4
_i$67986 = -8						; size = 4
_this$ = -4						; size = 4
_censorPathMode$ = 8					; size = 4
?AddPathsToCensor@CCensor@NWildcard@@QAEXW4ECensorPathMode@2@@Z PROC ; NWildcard::CCensor::AddPathsToCensor
; _this$ = ecx
; Line 664
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 665
	mov	DWORD PTR _i$67986[ebp], 0
	jmp	SHORT $LN3@AddPathsTo
$LN2@AddPathsTo:
	mov	eax, DWORD PTR _i$67986[ebp]
	add	eax, 1
	mov	DWORD PTR _i$67986[ebp], eax
$LN3@AddPathsTo:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Size@?$CObjectVector@UCCensorPath@NWildcard@@@@QBEIXZ ; CObjectVector<NWildcard::CCensorPath>::Size
	cmp	DWORD PTR _i$67986[ebp], eax
	jae	SHORT $LN1@AddPathsTo
; Line 667
	mov	ecx, DWORD PTR _i$67986[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$CObjectVector@UCCensorPath@NWildcard@@@@QAEAAUCCensorPath@NWildcard@@I@Z ; CObjectVector<NWildcard::CCensorPath>::operator[]
	mov	DWORD PTR _cp$67990[ebp], eax
; Line 668
	mov	edx, DWORD PTR _cp$67990[ebp]
	movzx	eax, BYTE PTR [edx+14]
	push	eax
	mov	ecx, DWORD PTR _cp$67990[ebp]
	movzx	edx, BYTE PTR [ecx+13]
	push	edx
	mov	eax, DWORD PTR _cp$67990[ebp]
	push	eax
	mov	ecx, DWORD PTR _cp$67990[ebp]
	movzx	edx, BYTE PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _censorPathMode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddItem@CCensor@NWildcard@@QAEXW4ECensorPathMode@2@_NABVUString@@11@Z ; NWildcard::CCensor::AddItem
; Line 669
	jmp	SHORT $LN2@AddPathsTo
$LN1@AddPathsTo:
; Line 670
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Clear@?$CObjectVector@UCCensorPath@NWildcard@@@@QAEXXZ ; CObjectVector<NWildcard::CCensorPath>::Clear
; Line 671
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?AddPathsToCensor@CCensor@NWildcard@@QAEXW4ECensorPathMode@2@@Z ENDP ; NWildcard::CCensor::AddPathsToCensor
_TEXT	ENDS
PUBLIC	?AddNew@?$CObjectVector@UCCensorPath@NWildcard@@@@QAEAAUCCensorPath@NWildcard@@XZ ; CObjectVector<NWildcard::CCensorPath>::AddNew
PUBLIC	?AddPreItem@CCensor@NWildcard@@QAEX_NABVUString@@00@Z ; NWildcard::CCensor::AddPreItem
EXTRN	??4UString@@QAEAAV0@ABV0@@Z:PROC		; UString::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_cp$ = -8						; size = 4
_this$ = -4						; size = 4
_include$ = 8						; size = 1
_path$ = 12						; size = 4
_recursive$ = 16					; size = 1
_wildcardMatching$ = 20					; size = 1
?AddPreItem@CCensor@NWildcard@@QAEX_NABVUString@@00@Z PROC ; NWildcard::CCensor::AddPreItem
; _this$ = ecx
; Line 674
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 675
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?AddNew@?$CObjectVector@UCCensorPath@NWildcard@@@@QAEAAUCCensorPath@NWildcard@@XZ ; CObjectVector<NWildcard::CCensorPath>::AddNew
	mov	DWORD PTR _cp$[ebp], eax
; Line 676
	mov	eax, DWORD PTR _path$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cp$[ebp]
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
; Line 677
	mov	ecx, DWORD PTR _cp$[ebp]
	mov	dl, BYTE PTR _include$[ebp]
	mov	BYTE PTR [ecx+12], dl
; Line 678
	mov	eax, DWORD PTR _cp$[ebp]
	mov	cl, BYTE PTR _recursive$[ebp]
	mov	BYTE PTR [eax+13], cl
; Line 679
	mov	edx, DWORD PTR _cp$[ebp]
	mov	al, BYTE PTR _wildcardMatching$[ebp]
	mov	BYTE PTR [edx+14], al
; Line 680
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?AddPreItem@CCensor@NWildcard@@QAEX_NABVUString@@00@Z ENDP ; NWildcard::CCensor::AddPreItem
_TEXT	ENDS
PUBLIC	?Size@?$CRecordVector@PAX@@QBEIXZ		; CRecordVector<void *>::Size
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Size@?$CObjectVector@VUString@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@VUString@@@@QBEIXZ PROC		; CObjectVector<UString>::Size, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@VUString@@@@QBEIXZ ENDP		; CObjectVector<UString>::Size
_TEXT	ENDS
PUBLIC	?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ		; CRecordVector<void *>::IsEmpty
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsEmpty@?$CObjectVector@VUString@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@?$CObjectVector@VUString@@@@QBE_NXZ PROC	; CObjectVector<UString>::IsEmpty, COMDAT
; _this$ = ecx
; Line 416
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ	; CRecordVector<void *>::IsEmpty
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@?$CObjectVector@VUString@@@@QBE_NXZ ENDP	; CObjectVector<UString>::IsEmpty
_TEXT	ENDS
PUBLIC	??0?$CRecordVector@PAX@@QAE@XZ			; CRecordVector<void *>::CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CObjectVector@VUString@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@VUString@@@@QAE@XZ PROC		; CObjectVector<UString>::CObjectVector<UString>, COMDAT
; _this$ = ecx
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@VUString@@@@QAE@XZ ENDP		; CObjectVector<UString>::CObjectVector<UString>
_TEXT	ENDS
PUBLIC	??1?$CRecordVector@PAX@@QAE@XZ			; CRecordVector<void *>::~CRecordVector<void *>
PUBLIC	?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z	; CRecordVector<void *>::AddInReserved
PUBLIC	?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z	; CRecordVector<void *>::ConstructReserve
EXTRN	??2@YAPAXI@Z:PROC				; operator new
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z$1
__ehfuncinfo$??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
tv85 = -36						; size = 4
$T68644 = -32						; size = 4
$T68643 = -28						; size = 4
_i$68008 = -24						; size = 4
_size$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_v$ = 8							; size = 4
??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z PROC		; CObjectVector<UString>::CObjectVector<UString>, COMDAT
; _this$ = ecx
; Line 422
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 424
	mov	ecx, DWORD PTR _v$[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	mov	DWORD PTR _size$[ebp], eax
; Line 425
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z ; CRecordVector<void *>::ConstructReserve
; Line 426
	mov	DWORD PTR _i$68008[ebp], 0
	jmp	SHORT $LN3@CObjectVec
$LN2@CObjectVec:
	mov	ecx, DWORD PTR _i$68008[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$68008[ebp], ecx
$LN3@CObjectVec:
	mov	edx, DWORD PTR _i$68008[ebp]
	cmp	edx, DWORD PTR _size$[ebp]
	jae	SHORT $LN4@CObjectVec
; Line 427
	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T68644[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T68644[ebp], 0
	je	SHORT $LN6@CObjectVec
	mov	eax, DWORD PTR _i$68008[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	call	??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[]
	push	eax
	mov	ecx, DWORD PTR $T68644[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	DWORD PTR tv85[ebp], eax
	jmp	SHORT $LN7@CObjectVec
$LN6@CObjectVec:
	mov	DWORD PTR tv85[ebp], 0
$LN7@CObjectVec:
	mov	ecx, DWORD PTR tv85[ebp]
	mov	DWORD PTR $T68643[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T68643[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ; CRecordVector<void *>::AddInReserved
	jmp	SHORT $LN2@CObjectVec
$LN4@CObjectVec:
; Line 428
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__unwindfunclet$??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z$1:
	mov	eax, DWORD PTR $T68644[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z ENDP		; CObjectVector<UString>::CObjectVector<UString>
PUBLIC	?Reserve@?$CRecordVector@PAX@@QAEXI@Z		; CRecordVector<void *>::Reserve
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z$0
__ehfuncinfo$??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
tv84 = -36						; size = 4
$T68658 = -32						; size = 4
$T68657 = -28						; size = 4
_i$68020 = -24						; size = 4
_size$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_v$ = 8							; size = 4
??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z PROC	; CObjectVector<UString>::operator=, COMDAT
; _this$ = ecx
; Line 430
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 431
	mov	eax, DWORD PTR _v$[ebp]
	cmp	eax, DWORD PTR _this$[ebp]
	jne	SHORT $LN4@operator@2
; Line 432
	mov	eax, DWORD PTR _this$[ebp]
	jmp	$LN5@operator@2
$LN4@operator@2:
; Line 433
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CObjectVector@VUString@@@@QAEXXZ ; CObjectVector<UString>::Clear
; Line 434
	mov	ecx, DWORD PTR _v$[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	mov	DWORD PTR _size$[ebp], eax
; Line 435
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reserve@?$CRecordVector@PAX@@QAEXI@Z	; CRecordVector<void *>::Reserve
; Line 436
	mov	DWORD PTR _i$68020[ebp], 0
	jmp	SHORT $LN3@operator@2
$LN2@operator@2:
	mov	edx, DWORD PTR _i$68020[ebp]
	add	edx, 1
	mov	DWORD PTR _i$68020[ebp], edx
$LN3@operator@2:
	mov	eax, DWORD PTR _i$68020[ebp]
	cmp	eax, DWORD PTR _size$[ebp]
	jae	SHORT $LN1@operator@2
; Line 437
	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T68658[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T68658[ebp], 0
	je	SHORT $LN7@operator@2
	mov	ecx, DWORD PTR _i$68020[ebp]
	push	ecx
	mov	ecx, DWORD PTR _v$[ebp]
	call	??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[]
	push	eax
	mov	ecx, DWORD PTR $T68658[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	DWORD PTR tv84[ebp], eax
	jmp	SHORT $LN8@operator@2
$LN7@operator@2:
	mov	DWORD PTR tv84[ebp], 0
$LN8@operator@2:
	mov	edx, DWORD PTR tv84[ebp]
	mov	DWORD PTR $T68657[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T68657[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ; CRecordVector<void *>::AddInReserved
	jmp	SHORT $LN2@operator@2
$LN1@operator@2:
; Line 438
	mov	eax, DWORD PTR _this$[ebp]
$LN5@operator@2:
; Line 439
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z$0:
	mov	eax, DWORD PTR $T68658[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z ENDP	; CObjectVector<UString>::operator=
PUBLIC	??A?$CRecordVector@PAX@@QBEABQAXI@Z		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z PROC	; CObjectVector<UString>::operator[], COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ENDP	; CObjectVector<UString>::operator[]
_TEXT	ENDS
PUBLIC	??A?$CRecordVector@PAX@@QAEAAPAXI@Z		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z PROC	; CObjectVector<UString>::operator[], COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ENDP	; CObjectVector<UString>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Front@?$CObjectVector@VUString@@@@QBEABVUString@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Front@?$CObjectVector@VUString@@@@QBEABVUString@@XZ PROC ; CObjectVector<UString>::Front, COMDAT
; _this$ = ecx
; Line 452
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Front@?$CObjectVector@VUString@@@@QBEABVUString@@XZ ENDP ; CObjectVector<UString>::Front
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Front@?$CObjectVector@VUString@@@@QAEAAVUString@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Front@?$CObjectVector@VUString@@@@QAEAAVUString@@XZ PROC ; CObjectVector<UString>::Front, COMDAT
; _this$ = ecx
; Line 453
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Front@?$CObjectVector@VUString@@@@QAEAAVUString@@XZ ENDP ; CObjectVector<UString>::Front
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Back@?$CObjectVector@VUString@@@@QAEAAVUString@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Back@?$CObjectVector@VUString@@@@QAEAAVUString@@XZ PROC ; CObjectVector<UString>::Back, COMDAT
; _this$ = ecx
; Line 455
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Back@?$CObjectVector@VUString@@@@QAEAAVUString@@XZ ENDP ; CObjectVector<UString>::Back
_TEXT	ENDS
PUBLIC	?Add@?$CRecordVector@PAX@@QAEIQAX@Z		; CRecordVector<void *>::Add
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z$0
__ehfuncinfo$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
_TEXT	SEGMENT
tv74 = -28						; size = 4
$T68681 = -24						; size = 4
$T68680 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_item$ = 8						; size = 4
?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z PROC ; CObjectVector<UString>::Add, COMDAT
; _this$ = ecx
; Line 459
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T68681[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T68681[ebp], 0
	je	SHORT $LN3@Add
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T68681[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@Add
$LN3@Add:
	mov	DWORD PTR tv74[ebp], 0
$LN4@Add:
	mov	ecx, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T68680[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T68680[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z$0:
	mov	eax, DWORD PTR $T68681[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z ENDP ; CObjectVector<UString>::Add
PUBLIC	?Insert@?$CRecordVector@PAX@@QAEXIQAX@Z		; CRecordVector<void *>::Insert
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Insert@?$CObjectVector@VUString@@@@QAEXIABVUString@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Insert@?$CObjectVector@VUString@@@@QAEXIABVUString@@@Z$0
__ehfuncinfo$?Insert@?$CObjectVector@VUString@@@@QAEXIABVUString@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Insert@?$CObjectVector@VUString@@@@QAEXIABVUString@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?Insert@?$CObjectVector@VUString@@@@QAEXIABVUString@@@Z
_TEXT	SEGMENT
tv73 = -28						; size = 4
$T68694 = -24						; size = 4
$T68693 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_index$ = 8						; size = 4
_item$ = 12						; size = 4
?Insert@?$CObjectVector@VUString@@@@QAEXIABVUString@@@Z PROC ; CObjectVector<UString>::Insert, COMDAT
; _this$ = ecx
; Line 477
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Insert@?$CObjectVector@VUString@@@@QAEXIABVUString@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T68694[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T68694[ebp], 0
	je	SHORT $LN3@Insert
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T68694[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	DWORD PTR tv73[ebp], eax
	jmp	SHORT $LN4@Insert
$LN3@Insert:
	mov	DWORD PTR tv73[ebp], 0
$LN4@Insert:
	mov	ecx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T68693[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T68693[ebp]
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Insert@?$CRecordVector@PAX@@QAEXIQAX@Z	; CRecordVector<void *>::Insert
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Insert@?$CObjectVector@VUString@@@@QAEXIABVUString@@@Z$0:
	mov	eax, DWORD PTR $T68694[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Insert@?$CObjectVector@VUString@@@@QAEXIABVUString@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Insert@?$CObjectVector@VUString@@@@QAEXIABVUString@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Insert@?$CObjectVector@VUString@@@@QAEXIABVUString@@@Z ENDP ; CObjectVector<UString>::Insert
PUBLIC	??_GUString@@QAEPAXI@Z				; UString::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@VUString@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@VUString@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@VUString@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@VUString@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@VUString@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T68707 = -28						; size = 4
$T68706 = -24						; size = 4
_i$68054 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@VUString@@@@QAE@XZ PROC		; CObjectVector<UString>::~CObjectVector<UString>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@VUString@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$68054[ebp], eax
$LN2@CObjectVec@2:
	cmp	DWORD PTR _i$68054[ebp], 0
	je	SHORT $LN3@CObjectVec@2
; Line 489
	mov	eax, DWORD PTR _i$68054[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$68054[ebp], eax
	mov	ecx, DWORD PTR _i$68054[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T68707[ebp], edx
	mov	eax, DWORD PTR $T68707[ebp]
	mov	DWORD PTR $T68706[ebp], eax
	cmp	DWORD PTR $T68706[ebp], 0
	je	SHORT $LN5@CObjectVec@2
	push	1
	mov	ecx, DWORD PTR $T68706[ebp]
	call	??_GUString@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@2
$LN5@CObjectVec@2:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@2:
	jmp	SHORT $LN2@CObjectVec@2
$LN3@CObjectVec@2:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@VUString@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@VUString@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@VUString@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@VUString@@@@QAE@XZ ENDP		; CObjectVector<UString>::~CObjectVector<UString>
PUBLIC	?Clear@?$CRecordVector@PAX@@QAEXXZ		; CRecordVector<void *>::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Clear@?$CObjectVector@VUString@@@@QAEXXZ
_TEXT	SEGMENT
tv75 = -20						; size = 4
$T68720 = -16						; size = 4
$T68719 = -12						; size = 4
_i$68063 = -8						; size = 4
_this$ = -4						; size = 4
?Clear@?$CObjectVector@VUString@@@@QAEXXZ PROC		; CObjectVector<UString>::Clear, COMDAT
; _this$ = ecx
; Line 499
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 500
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$68063[ebp], eax
$LN2@Clear:
	cmp	DWORD PTR _i$68063[ebp], 0
	je	SHORT $LN1@Clear
; Line 501
	mov	eax, DWORD PTR _i$68063[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$68063[ebp], eax
	mov	ecx, DWORD PTR _i$68063[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T68720[ebp], edx
	mov	eax, DWORD PTR $T68720[ebp]
	mov	DWORD PTR $T68719[ebp], eax
	cmp	DWORD PTR $T68719[ebp], 0
	je	SHORT $LN5@Clear
	push	1
	mov	ecx, DWORD PTR $T68719[ebp]
	call	??_GUString@@QAEPAXI@Z
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN6@Clear
$LN5@Clear:
	mov	DWORD PTR tv75[ebp], 0
$LN6@Clear:
	jmp	SHORT $LN2@Clear
$LN1@Clear:
; Line 502
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CRecordVector@PAX@@QAEXXZ	; CRecordVector<void *>::Clear
; Line 503
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CObjectVector@VUString@@@@QAEXXZ ENDP		; CObjectVector<UString>::Clear
_TEXT	ENDS
PUBLIC	?DeleteBack@?$CRecordVector@PAX@@QAEXXZ		; CRecordVector<void *>::DeleteBack
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?DeleteBack@?$CObjectVector@VUString@@@@QAEXXZ
_TEXT	SEGMENT
tv74 = -16						; size = 4
$T68726 = -12						; size = 4
$T68725 = -8						; size = 4
_this$ = -4						; size = 4
?DeleteBack@?$CObjectVector@VUString@@@@QAEXXZ PROC	; CObjectVector<UString>::DeleteBack, COMDAT
; _this$ = ecx
; Line 521
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 522
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR $T68726[ebp], eax
	mov	ecx, DWORD PTR $T68726[ebp]
	mov	DWORD PTR $T68725[ebp], ecx
	cmp	DWORD PTR $T68725[ebp], 0
	je	SHORT $LN3@DeleteBack
	push	1
	mov	ecx, DWORD PTR $T68725[ebp]
	call	??_GUString@@QAEPAXI@Z
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@DeleteBack
$LN3@DeleteBack:
	mov	DWORD PTR tv74[ebp], 0
$LN4@DeleteBack:
; Line 523
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DeleteBack@?$CRecordVector@PAX@@QAEXXZ	; CRecordVector<void *>::DeleteBack
; Line 524
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?DeleteBack@?$CObjectVector@VUString@@@@QAEXXZ ENDP	; CObjectVector<UString>::DeleteBack
_TEXT	ENDS
PUBLIC	?Delete@?$CRecordVector@PAX@@QAEXI@Z		; CRecordVector<void *>::Delete
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Delete@?$CObjectVector@VUString@@@@QAEXI@Z
_TEXT	SEGMENT
tv71 = -16						; size = 4
$T68732 = -12						; size = 4
$T68731 = -8						; size = 4
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?Delete@?$CObjectVector@VUString@@@@QAEXI@Z PROC	; CObjectVector<UString>::Delete, COMDAT
; _this$ = ecx
; Line 527
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 528
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T68732[ebp], ecx
	mov	edx, DWORD PTR $T68732[ebp]
	mov	DWORD PTR $T68731[ebp], edx
	cmp	DWORD PTR $T68731[ebp], 0
	je	SHORT $LN3@Delete
	push	1
	mov	ecx, DWORD PTR $T68731[ebp]
	call	??_GUString@@QAEPAXI@Z
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN4@Delete
$LN3@Delete:
	mov	DWORD PTR tv71[ebp], 0
$LN4@Delete:
; Line 529
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Delete@?$CRecordVector@PAX@@QAEXI@Z	; CRecordVector<void *>::Delete
; Line 530
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Delete@?$CObjectVector@VUString@@@@QAEXI@Z ENDP	; CObjectVector<UString>::Delete
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CObjectVector@VCCensorNode@NWildcard@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@VCCensorNode@NWildcard@@@@QBEIXZ PROC ; CObjectVector<NWildcard::CCensorNode>::Size, COMDAT
; _this$ = ecx
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@VCCensorNode@NWildcard@@@@QBEIXZ ENDP ; CObjectVector<NWildcard::CCensorNode>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsEmpty@?$CObjectVector@VCCensorNode@NWildcard@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@?$CObjectVector@VCCensorNode@NWildcard@@@@QBE_NXZ PROC ; CObjectVector<NWildcard::CCensorNode>::IsEmpty, COMDAT
; _this$ = ecx
; Line 416
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ	; CRecordVector<void *>::IsEmpty
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@?$CObjectVector@VCCensorNode@NWildcard@@@@QBE_NXZ ENDP ; CObjectVector<NWildcard::CCensorNode>::IsEmpty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ PROC ; CObjectVector<NWildcard::CCensorNode>::CObjectVector<NWildcard::CCensorNode>, COMDAT
; _this$ = ecx
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ ENDP ; CObjectVector<NWildcard::CCensorNode>::CObjectVector<NWildcard::CCensorNode>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@VCCensorNode@NWildcard@@@@QBEABVCCensorNode@NWildcard@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@VCCensorNode@NWildcard@@@@QBEABVCCensorNode@NWildcard@@I@Z PROC ; CObjectVector<NWildcard::CCensorNode>::operator[], COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@VCCensorNode@NWildcard@@@@QBEABVCCensorNode@NWildcard@@I@Z ENDP ; CObjectVector<NWildcard::CCensorNode>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@VCCensorNode@NWildcard@@@@QAEAAVCCensorNode@NWildcard@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@VCCensorNode@NWildcard@@@@QAEAAVCCensorNode@NWildcard@@I@Z PROC ; CObjectVector<NWildcard::CCensorNode>::operator[], COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@VCCensorNode@NWildcard@@@@QAEAAVCCensorNode@NWildcard@@I@Z ENDP ; CObjectVector<NWildcard::CCensorNode>::operator[]
_TEXT	ENDS
PUBLIC	??0CCensorNode@NWildcard@@QAE@ABV01@@Z		; NWildcard::CCensorNode::CCensorNode
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Add@?$CObjectVector@VCCensorNode@NWildcard@@@@QAEIABVCCensorNode@NWildcard@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Add@?$CObjectVector@VCCensorNode@NWildcard@@@@QAEIABVCCensorNode@NWildcard@@@Z$0
__ehfuncinfo$?Add@?$CObjectVector@VCCensorNode@NWildcard@@@@QAEIABVCCensorNode@NWildcard@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Add@?$CObjectVector@VCCensorNode@NWildcard@@@@QAEIABVCCensorNode@NWildcard@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?Add@?$CObjectVector@VCCensorNode@NWildcard@@@@QAEIABVCCensorNode@NWildcard@@@Z
_TEXT	SEGMENT
tv74 = -28						; size = 4
$T68749 = -24						; size = 4
$T68748 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_item$ = 8						; size = 4
?Add@?$CObjectVector@VCCensorNode@NWildcard@@@@QAEIABVCCensorNode@NWildcard@@@Z PROC ; CObjectVector<NWildcard::CCensorNode>::Add, COMDAT
; _this$ = ecx
; Line 459
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Add@?$CObjectVector@VCCensorNode@NWildcard@@@@QAEIABVCCensorNode@NWildcard@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	52					; 00000034H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T68749[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T68749[ebp], 0
	je	SHORT $LN3@Add@2
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T68749[ebp]
	call	??0CCensorNode@NWildcard@@QAE@ABV01@@Z
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@Add@2
$LN3@Add@2:
	mov	DWORD PTR tv74[ebp], 0
$LN4@Add@2:
	mov	ecx, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T68748[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T68748[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Add@?$CObjectVector@VCCensorNode@NWildcard@@@@QAEIABVCCensorNode@NWildcard@@@Z$0:
	mov	eax, DWORD PTR $T68749[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Add@?$CObjectVector@VCCensorNode@NWildcard@@@@QAEIABVCCensorNode@NWildcard@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Add@?$CObjectVector@VCCensorNode@NWildcard@@@@QAEIABVCCensorNode@NWildcard@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Add@?$CObjectVector@VCCensorNode@NWildcard@@@@QAEIABVCCensorNode@NWildcard@@@Z ENDP ; CObjectVector<NWildcard::CCensorNode>::Add
PUBLIC	??_GCCensorNode@NWildcard@@QAEPAXI@Z		; NWildcard::CCensorNode::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T68762 = -28						; size = 4
$T68761 = -24						; size = 4
_i$68100 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ PROC ; CObjectVector<NWildcard::CCensorNode>::~CObjectVector<NWildcard::CCensorNode>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$68100[ebp], eax
$LN2@CObjectVec@3:
	cmp	DWORD PTR _i$68100[ebp], 0
	je	SHORT $LN3@CObjectVec@3
; Line 489
	mov	eax, DWORD PTR _i$68100[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$68100[ebp], eax
	mov	ecx, DWORD PTR _i$68100[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T68762[ebp], edx
	mov	eax, DWORD PTR $T68762[ebp]
	mov	DWORD PTR $T68761[ebp], eax
	cmp	DWORD PTR $T68761[ebp], 0
	je	SHORT $LN5@CObjectVec@3
	push	1
	mov	ecx, DWORD PTR $T68761[ebp]
	call	??_GCCensorNode@NWildcard@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@3
$LN5@CObjectVec@3:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@3:
	jmp	SHORT $LN2@CObjectVec@3
$LN3@CObjectVec@3:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ ENDP ; CObjectVector<NWildcard::CCensorNode>::~CObjectVector<NWildcard::CCensorNode>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Size@?$CObjectVector@UCItem@NWildcard@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@UCItem@NWildcard@@@@QBEIXZ PROC	; CObjectVector<NWildcard::CItem>::Size, COMDAT
; _this$ = ecx
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@UCItem@NWildcard@@@@QBEIXZ ENDP	; CObjectVector<NWildcard::CItem>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsEmpty@?$CObjectVector@UCItem@NWildcard@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@?$CObjectVector@UCItem@NWildcard@@@@QBE_NXZ PROC ; CObjectVector<NWildcard::CItem>::IsEmpty, COMDAT
; _this$ = ecx
; Line 416
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ	; CRecordVector<void *>::IsEmpty
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@?$CObjectVector@UCItem@NWildcard@@@@QBE_NXZ ENDP ; CObjectVector<NWildcard::CItem>::IsEmpty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ PROC	; CObjectVector<NWildcard::CItem>::CObjectVector<NWildcard::CItem>, COMDAT
; _this$ = ecx
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ ENDP	; CObjectVector<NWildcard::CItem>::CObjectVector<NWildcard::CItem>
_TEXT	ENDS
PUBLIC	??0CItem@NWildcard@@QAE@ABU01@@Z		; NWildcard::CItem::CItem
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??Y?$CObjectVector@UCItem@NWildcard@@@@QAEAAV0@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??Y?$CObjectVector@UCItem@NWildcard@@@@QAEAAV0@ABV0@@Z$0
__ehfuncinfo$??Y?$CObjectVector@UCItem@NWildcard@@@@QAEAAV0@ABV0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??Y?$CObjectVector@UCItem@NWildcard@@@@QAEAAV0@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??Y?$CObjectVector@UCItem@NWildcard@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
tv85 = -36						; size = 4
$T68782 = -32						; size = 4
$T68781 = -28						; size = 4
_i$68116 = -24						; size = 4
_size$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_v$ = 8							; size = 4
??Y?$CObjectVector@UCItem@NWildcard@@@@QAEAAV0@ABV0@@Z PROC ; CObjectVector<NWildcard::CItem>::operator+=, COMDAT
; _this$ = ecx
; Line 442
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??Y?$CObjectVector@UCItem@NWildcard@@@@QAEAAV0@ABV0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 443
	mov	ecx, DWORD PTR _v$[ebp]
	call	?Size@?$CObjectVector@UCItem@NWildcard@@@@QBEIXZ ; CObjectVector<NWildcard::CItem>::Size
	mov	DWORD PTR _size$[ebp], eax
; Line 444
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CObjectVector@UCItem@NWildcard@@@@QBEIXZ ; CObjectVector<NWildcard::CItem>::Size
	add	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reserve@?$CRecordVector@PAX@@QAEXI@Z	; CRecordVector<void *>::Reserve
; Line 445
	mov	DWORD PTR _i$68116[ebp], 0
	jmp	SHORT $LN3@operator@3
$LN2@operator@3:
	mov	eax, DWORD PTR _i$68116[ebp]
	add	eax, 1
	mov	DWORD PTR _i$68116[ebp], eax
$LN3@operator@3:
	mov	ecx, DWORD PTR _i$68116[ebp]
	cmp	ecx, DWORD PTR _size$[ebp]
	jae	SHORT $LN1@operator@3
; Line 446
	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T68782[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T68782[ebp], 0
	je	SHORT $LN6@operator@3
	mov	edx, DWORD PTR _i$68116[ebp]
	push	edx
	mov	ecx, DWORD PTR _v$[ebp]
	call	??A?$CObjectVector@UCItem@NWildcard@@@@QBEABUCItem@NWildcard@@I@Z ; CObjectVector<NWildcard::CItem>::operator[]
	push	eax
	mov	ecx, DWORD PTR $T68782[ebp]
	call	??0CItem@NWildcard@@QAE@ABU01@@Z
	mov	DWORD PTR tv85[ebp], eax
	jmp	SHORT $LN7@operator@3
$LN6@operator@3:
	mov	DWORD PTR tv85[ebp], 0
$LN7@operator@3:
	mov	eax, DWORD PTR tv85[ebp]
	mov	DWORD PTR $T68781[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T68781[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ; CRecordVector<void *>::AddInReserved
	jmp	SHORT $LN2@operator@3
$LN1@operator@3:
; Line 447
	mov	eax, DWORD PTR _this$[ebp]
; Line 448
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??Y?$CObjectVector@UCItem@NWildcard@@@@QAEAAV0@ABV0@@Z$0:
	mov	eax, DWORD PTR $T68782[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??Y?$CObjectVector@UCItem@NWildcard@@@@QAEAAV0@ABV0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??Y?$CObjectVector@UCItem@NWildcard@@@@QAEAAV0@ABV0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??Y?$CObjectVector@UCItem@NWildcard@@@@QAEAAV0@ABV0@@Z ENDP ; CObjectVector<NWildcard::CItem>::operator+=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??A?$CObjectVector@UCItem@NWildcard@@@@QBEABUCItem@NWildcard@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCItem@NWildcard@@@@QBEABUCItem@NWildcard@@I@Z PROC ; CObjectVector<NWildcard::CItem>::operator[], COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCItem@NWildcard@@@@QBEABUCItem@NWildcard@@I@Z ENDP ; CObjectVector<NWildcard::CItem>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Front@?$CObjectVector@UCItem@NWildcard@@@@QBEABUCItem@NWildcard@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Front@?$CObjectVector@UCItem@NWildcard@@@@QBEABUCItem@NWildcard@@XZ PROC ; CObjectVector<NWildcard::CItem>::Front, COMDAT
; _this$ = ecx
; Line 452
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CObjectVector@UCItem@NWildcard@@@@QBEABUCItem@NWildcard@@I@Z ; CObjectVector<NWildcard::CItem>::operator[]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Front@?$CObjectVector@UCItem@NWildcard@@@@QBEABUCItem@NWildcard@@XZ ENDP ; CObjectVector<NWildcard::CItem>::Front
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Add@?$CObjectVector@UCItem@NWildcard@@@@QAEIABUCItem@NWildcard@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Add@?$CObjectVector@UCItem@NWildcard@@@@QAEIABUCItem@NWildcard@@@Z$0
__ehfuncinfo$?Add@?$CObjectVector@UCItem@NWildcard@@@@QAEIABUCItem@NWildcard@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Add@?$CObjectVector@UCItem@NWildcard@@@@QAEIABUCItem@NWildcard@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?Add@?$CObjectVector@UCItem@NWildcard@@@@QAEIABUCItem@NWildcard@@@Z
_TEXT	SEGMENT
tv74 = -28						; size = 4
$T68799 = -24						; size = 4
$T68798 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_item$ = 8						; size = 4
?Add@?$CObjectVector@UCItem@NWildcard@@@@QAEIABUCItem@NWildcard@@@Z PROC ; CObjectVector<NWildcard::CItem>::Add, COMDAT
; _this$ = ecx
; Line 459
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Add@?$CObjectVector@UCItem@NWildcard@@@@QAEIABUCItem@NWildcard@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T68799[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T68799[ebp], 0
	je	SHORT $LN3@Add@3
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T68799[ebp]
	call	??0CItem@NWildcard@@QAE@ABU01@@Z
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@Add@3
$LN3@Add@3:
	mov	DWORD PTR tv74[ebp], 0
$LN4@Add@3:
	mov	ecx, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T68798[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T68798[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Add@?$CObjectVector@UCItem@NWildcard@@@@QAEIABUCItem@NWildcard@@@Z$0:
	mov	eax, DWORD PTR $T68799[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Add@?$CObjectVector@UCItem@NWildcard@@@@QAEIABUCItem@NWildcard@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Add@?$CObjectVector@UCItem@NWildcard@@@@QAEIABUCItem@NWildcard@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Add@?$CObjectVector@UCItem@NWildcard@@@@QAEIABUCItem@NWildcard@@@Z ENDP ; CObjectVector<NWildcard::CItem>::Add
PUBLIC	??_GCItem@NWildcard@@QAEPAXI@Z			; NWildcard::CItem::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T68812 = -28						; size = 4
$T68811 = -24						; size = 4
_i$68137 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ PROC	; CObjectVector<NWildcard::CItem>::~CObjectVector<NWildcard::CItem>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$68137[ebp], eax
$LN2@CObjectVec@4:
	cmp	DWORD PTR _i$68137[ebp], 0
	je	SHORT $LN3@CObjectVec@4
; Line 489
	mov	eax, DWORD PTR _i$68137[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$68137[ebp], eax
	mov	ecx, DWORD PTR _i$68137[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T68812[ebp], edx
	mov	eax, DWORD PTR $T68812[ebp]
	mov	DWORD PTR $T68811[ebp], eax
	cmp	DWORD PTR $T68811[ebp], 0
	je	SHORT $LN5@CObjectVec@4
	push	1
	mov	ecx, DWORD PTR $T68811[ebp]
	call	??_GCItem@NWildcard@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@4
$LN5@CObjectVec@4:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@4:
	jmp	SHORT $LN2@CObjectVec@4
$LN3@CObjectVec@4:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ ENDP	; CObjectVector<NWildcard::CItem>::~CObjectVector<NWildcard::CItem>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Size@?$CObjectVector@UCPair@NWildcard@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@UCPair@NWildcard@@@@QBEIXZ PROC	; CObjectVector<NWildcard::CPair>::Size, COMDAT
; _this$ = ecx
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@UCPair@NWildcard@@@@QBEIXZ ENDP	; CObjectVector<NWildcard::CPair>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@UCPair@NWildcard@@@@QBEABUCPair@NWildcard@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCPair@NWildcard@@@@QBEABUCPair@NWildcard@@I@Z PROC ; CObjectVector<NWildcard::CPair>::operator[], COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCPair@NWildcard@@@@QBEABUCPair@NWildcard@@I@Z ENDP ; CObjectVector<NWildcard::CPair>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@UCPair@NWildcard@@@@QAEAAUCPair@NWildcard@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCPair@NWildcard@@@@QAEAAUCPair@NWildcard@@I@Z PROC ; CObjectVector<NWildcard::CPair>::operator[], COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCPair@NWildcard@@@@QAEAAUCPair@NWildcard@@I@Z ENDP ; CObjectVector<NWildcard::CPair>::operator[]
_TEXT	ENDS
PUBLIC	??0CPair@NWildcard@@QAE@ABU01@@Z		; NWildcard::CPair::CPair
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Add@?$CObjectVector@UCPair@NWildcard@@@@QAEIABUCPair@NWildcard@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Add@?$CObjectVector@UCPair@NWildcard@@@@QAEIABUCPair@NWildcard@@@Z$0
__ehfuncinfo$?Add@?$CObjectVector@UCPair@NWildcard@@@@QAEIABUCPair@NWildcard@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Add@?$CObjectVector@UCPair@NWildcard@@@@QAEIABUCPair@NWildcard@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?Add@?$CObjectVector@UCPair@NWildcard@@@@QAEIABUCPair@NWildcard@@@Z
_TEXT	SEGMENT
tv74 = -28						; size = 4
$T68831 = -24						; size = 4
$T68830 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_item$ = 8						; size = 4
?Add@?$CObjectVector@UCPair@NWildcard@@@@QAEIABUCPair@NWildcard@@@Z PROC ; CObjectVector<NWildcard::CPair>::Add, COMDAT
; _this$ = ecx
; Line 459
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Add@?$CObjectVector@UCPair@NWildcard@@@@QAEIABUCPair@NWildcard@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	64					; 00000040H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T68831[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T68831[ebp], 0
	je	SHORT $LN3@Add@4
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T68831[ebp]
	call	??0CPair@NWildcard@@QAE@ABU01@@Z
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@Add@4
$LN3@Add@4:
	mov	DWORD PTR tv74[ebp], 0
$LN4@Add@4:
	mov	ecx, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T68830[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T68830[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Add@?$CObjectVector@UCPair@NWildcard@@@@QAEIABUCPair@NWildcard@@@Z$0:
	mov	eax, DWORD PTR $T68831[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Add@?$CObjectVector@UCPair@NWildcard@@@@QAEIABUCPair@NWildcard@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Add@?$CObjectVector@UCPair@NWildcard@@@@QAEIABUCPair@NWildcard@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Add@?$CObjectVector@UCPair@NWildcard@@@@QAEIABUCPair@NWildcard@@@Z ENDP ; CObjectVector<NWildcard::CPair>::Add
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Size@?$CObjectVector@UCCensorPath@NWildcard@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@UCCensorPath@NWildcard@@@@QBEIXZ PROC ; CObjectVector<NWildcard::CCensorPath>::Size, COMDAT
; _this$ = ecx
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@UCCensorPath@NWildcard@@@@QBEIXZ ENDP ; CObjectVector<NWildcard::CCensorPath>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@UCCensorPath@NWildcard@@@@QAEAAUCCensorPath@NWildcard@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCCensorPath@NWildcard@@@@QAEAAUCCensorPath@NWildcard@@I@Z PROC ; CObjectVector<NWildcard::CCensorPath>::operator[], COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCCensorPath@NWildcard@@@@QAEAAUCCensorPath@NWildcard@@I@Z ENDP ; CObjectVector<NWildcard::CCensorPath>::operator[]
_TEXT	ENDS
PUBLIC	??0CCensorPath@NWildcard@@QAE@XZ		; NWildcard::CCensorPath::CCensorPath
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AddNew@?$CObjectVector@UCCensorPath@NWildcard@@@@QAEAAUCCensorPath@NWildcard@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddNew@?$CObjectVector@UCCensorPath@NWildcard@@@@QAEAAUCCensorPath@NWildcard@@XZ$0
__ehfuncinfo$?AddNew@?$CObjectVector@UCCensorPath@NWildcard@@@@QAEAAUCCensorPath@NWildcard@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddNew@?$CObjectVector@UCCensorPath@NWildcard@@@@QAEAAUCCensorPath@NWildcard@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?AddNew@?$CObjectVector@UCCensorPath@NWildcard@@@@QAEAAUCCensorPath@NWildcard@@XZ
_TEXT	SEGMENT
tv71 = -32						; size = 4
$T68848 = -28						; size = 4
$T68847 = -24						; size = 4
_p$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?AddNew@?$CObjectVector@UCCensorPath@NWildcard@@@@QAEAAUCCensorPath@NWildcard@@XZ PROC ; CObjectVector<NWildcard::CCensorPath>::AddNew, COMDAT
; _this$ = ecx
; Line 464
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddNew@?$CObjectVector@UCCensorPath@NWildcard@@@@QAEAAUCCensorPath@NWildcard@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 465
	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T68848[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T68848[ebp], 0
	je	SHORT $LN3@AddNew
	mov	ecx, DWORD PTR $T68848[ebp]
	call	??0CCensorPath@NWildcard@@QAE@XZ	; NWildcard::CCensorPath::CCensorPath
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN4@AddNew
$LN3@AddNew:
	mov	DWORD PTR tv71[ebp], 0
$LN4@AddNew:
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR $T68847[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T68847[ebp]
	mov	DWORD PTR _p$[ebp], ecx
; Line 466
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
; Line 467
	mov	eax, DWORD PTR _p$[ebp]
; Line 468
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddNew@?$CObjectVector@UCCensorPath@NWildcard@@@@QAEAAUCCensorPath@NWildcard@@XZ$0:
	mov	eax, DWORD PTR $T68848[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?AddNew@?$CObjectVector@UCCensorPath@NWildcard@@@@QAEAAUCCensorPath@NWildcard@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddNew@?$CObjectVector@UCCensorPath@NWildcard@@@@QAEAAUCCensorPath@NWildcard@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddNew@?$CObjectVector@UCCensorPath@NWildcard@@@@QAEAAUCCensorPath@NWildcard@@XZ ENDP ; CObjectVector<NWildcard::CCensorPath>::AddNew
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CCensorPath@NWildcard@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CCensorPath@NWildcard@@QAE@XZ PROC			; NWildcard::CCensorPath::CCensorPath, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\wildcard.h
; Line 116
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+13], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+14], 1
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CCensorPath@NWildcard@@QAE@XZ ENDP			; NWildcard::CCensorPath::CCensorPath
_TEXT	ENDS
PUBLIC	??_GCCensorPath@NWildcard@@QAEPAXI@Z		; NWildcard::CCensorPath::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Clear@?$CObjectVector@UCCensorPath@NWildcard@@@@QAEXXZ
_TEXT	SEGMENT
tv75 = -20						; size = 4
$T68864 = -16						; size = 4
$T68863 = -12						; size = 4
_i$68174 = -8						; size = 4
_this$ = -4						; size = 4
?Clear@?$CObjectVector@UCCensorPath@NWildcard@@@@QAEXXZ PROC ; CObjectVector<NWildcard::CCensorPath>::Clear, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 499
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 500
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$68174[ebp], eax
$LN2@Clear@2:
	cmp	DWORD PTR _i$68174[ebp], 0
	je	SHORT $LN1@Clear@2
; Line 501
	mov	eax, DWORD PTR _i$68174[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$68174[ebp], eax
	mov	ecx, DWORD PTR _i$68174[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T68864[ebp], edx
	mov	eax, DWORD PTR $T68864[ebp]
	mov	DWORD PTR $T68863[ebp], eax
	cmp	DWORD PTR $T68863[ebp], 0
	je	SHORT $LN5@Clear@2
	push	1
	mov	ecx, DWORD PTR $T68863[ebp]
	call	??_GCCensorPath@NWildcard@@QAEPAXI@Z
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN6@Clear@2
$LN5@Clear@2:
	mov	DWORD PTR tv75[ebp], 0
$LN6@Clear@2:
	jmp	SHORT $LN2@Clear@2
$LN1@Clear@2:
; Line 502
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CRecordVector@PAX@@QAEXXZ	; CRecordVector<void *>::Clear
; Line 503
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CObjectVector@UCCensorPath@NWildcard@@@@QAEXXZ ENDP ; CObjectVector<NWildcard::CCensorPath>::Clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??_GUString@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GUString@@QAEPAXI@Z PROC				; UString::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GUString@@QAEPAXI@Z ENDP				; UString::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0?$CObjectVector@UCItem@NWildcard@@@@QAE@ABV0@@Z ; CObjectVector<NWildcard::CItem>::CObjectVector<NWildcard::CItem>
PUBLIC	??0?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@ABV0@@Z ; CObjectVector<NWildcard::CCensorNode>::CObjectVector<NWildcard::CCensorNode>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CCensorNode@NWildcard@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CCensorNode@NWildcard@@QAE@ABV01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CCensorNode@NWildcard@@QAE@ABV01@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CCensorNode@NWildcard@@QAE@ABV01@@Z$2
__ehfuncinfo$??0CCensorNode@NWildcard@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0CCensorNode@NWildcard@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CCensorNode@NWildcard@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0CCensorNode@NWildcard@@QAE@ABV01@@Z PROC		; NWildcard::CCensorNode::CCensorNode, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CCensorNode@NWildcard@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@ABV0@@Z ; CObjectVector<NWildcard::CCensorNode>::CObjectVector<NWildcard::CCensorNode>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 28					; 0000001cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??0?$CObjectVector@UCItem@NWildcard@@@@QAE@ABV0@@Z ; CObjectVector<NWildcard::CItem>::CObjectVector<NWildcard::CItem>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 40					; 00000028H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??0?$CObjectVector@UCItem@NWildcard@@@@QAE@ABV0@@Z ; CObjectVector<NWildcard::CItem>::CObjectVector<NWildcard::CItem>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CCensorNode@NWildcard@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??0CCensorNode@NWildcard@@QAE@ABV01@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	jmp	??1?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@XZ ; CObjectVector<NWildcard::CCensorNode>::~CObjectVector<NWildcard::CCensorNode>
__unwindfunclet$??0CCensorNode@NWildcard@@QAE@ABV01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	jmp	??1?$CObjectVector@UCItem@NWildcard@@@@QAE@XZ ; CObjectVector<NWildcard::CItem>::~CObjectVector<NWildcard::CItem>
__ehhandler$??0CCensorNode@NWildcard@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CCensorNode@NWildcard@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CCensorNode@NWildcard@@QAE@ABV01@@Z ENDP		; NWildcard::CCensorNode::CCensorNode
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCCensorNode@NWildcard@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCCensorNode@NWildcard@@QAEPAXI@Z PROC		; NWildcard::CCensorNode::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CCensorNode@NWildcard@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCCensorNode@NWildcard@@QAEPAXI@Z ENDP		; NWildcard::CCensorNode::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CItem@NWildcard@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CItem@NWildcard@@QAE@ABU01@@Z PROC			; NWildcard::CItem::CItem, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z ; CObjectVector<UString>::CObjectVector<UString>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx+12]
	mov	BYTE PTR [ecx+12], al
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx+13]
	mov	BYTE PTR [ecx+13], al
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx+14]
	mov	BYTE PTR [ecx+14], al
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx+15]
	mov	BYTE PTR [ecx+15], al
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CItem@NWildcard@@QAE@ABU01@@Z ENDP			; NWildcard::CItem::CItem
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??_GCItem@NWildcard@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCItem@NWildcard@@QAEPAXI@Z PROC			; NWildcard::CItem::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CItem@NWildcard@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@3
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCItem@NWildcard@@QAEPAXI@Z ENDP			; NWildcard::CItem::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CPair@NWildcard@@QAE@ABU01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CPair@NWildcard@@QAE@ABU01@@Z$0
__ehfuncinfo$??0CPair@NWildcard@@QAE@ABU01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CPair@NWildcard@@QAE@ABU01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CPair@NWildcard@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0CPair@NWildcard@@QAE@ABU01@@Z PROC			; NWildcard::CPair::CPair, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CPair@NWildcard@@QAE@ABU01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0CCensorNode@NWildcard@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CPair@NWildcard@@QAE@ABU01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$??0CPair@NWildcard@@QAE@ABU01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CPair@NWildcard@@QAE@ABU01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CPair@NWildcard@@QAE@ABU01@@Z ENDP			; NWildcard::CPair::CPair
PUBLIC	??1CCensorPath@NWildcard@@QAE@XZ		; NWildcard::CCensorPath::~CCensorPath
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCCensorPath@NWildcard@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCCensorPath@NWildcard@@QAEPAXI@Z PROC		; NWildcard::CCensorPath::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CCensorPath@NWildcard@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@4:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCCensorPath@NWildcard@@QAEPAXI@Z ENDP		; NWildcard::CCensorPath::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CCensorPath@NWildcard@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CCensorPath@NWildcard@@QAE@XZ PROC			; NWildcard::CCensorPath::~CCensorPath, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CCensorPath@NWildcard@@QAE@XZ ENDP			; NWildcard::CCensorPath::~CCensorPath
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@PAX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@PAX@@QAE@XZ PROC			; CRecordVector<void *>::CRecordVector<void *>, COMDAT
; _this$ = ecx
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@PAX@@QAE@XZ ENDP			; CRecordVector<void *>::CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@PAX@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@PAX@@QBEIXZ PROC			; CRecordVector<void *>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@PAX@@QBEIXZ ENDP			; CRecordVector<void *>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ PROC		; CRecordVector<void *>::IsEmpty, COMDAT
; _this$ = ecx
; Line 49
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+4], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ ENDP		; CRecordVector<void *>::IsEmpty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z
_TEXT	SEGMENT
$T68911 = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z PROC	; CRecordVector<void *>::ConstructReserve, COMDAT
; _this$ = ecx
; Line 52
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 53
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN2@ConstructR
; Line 55
	xor	ecx, ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T68911[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T68911[ebp]
	mov	DWORD PTR [eax], ecx
; Line 56
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@ConstructR:
; Line 58
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z ENDP	; CRecordVector<void *>::ConstructReserve
_TEXT	ENDS
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Reserve@?$CRecordVector@PAX@@QAEXI@Z
_TEXT	SEGMENT
$T68915 = -16						; size = 4
$T68914 = -12						; size = 4
_p$68222 = -8						; size = 4
_this$ = -4						; size = 4
_newCapacity$ = 8					; size = 4
?Reserve@?$CRecordVector@PAX@@QAEXI@Z PROC		; CRecordVector<void *>::Reserve, COMDAT
; _this$ = ecx
; Line 61
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 62
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	SHORT $LN3@Reserve
; Line 64
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T68914[ebp], eax
	mov	eax, DWORD PTR $T68914[ebp]
	mov	DWORD PTR _p$68222[ebp], eax
; Line 65
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@Reserve
; Line 66
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$68222[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@Reserve:
; Line 67
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T68915[ebp], edx
	mov	eax, DWORD PTR $T68915[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 68
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$68222[ebp]
	mov	DWORD PTR [ecx], edx
; Line 69
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@Reserve:
; Line 71
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Reserve@?$CRecordVector@PAX@@QAEXI@Z ENDP		; CRecordVector<void *>::Reserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@PAX@@QAE@XZ
_TEXT	SEGMENT
$T68918 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@PAX@@QAE@XZ PROC			; CRecordVector<void *>::~CRecordVector<void *>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T68918[ebp], ecx
	mov	edx, DWORD PTR $T68918[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@PAX@@QAE@XZ ENDP			; CRecordVector<void *>::~CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Clear@?$CRecordVector@PAX@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$CRecordVector@PAX@@QAEXXZ PROC			; CRecordVector<void *>::Clear, COMDAT
; _this$ = ecx
; Line 131
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CRecordVector@PAX@@QAEXXZ ENDP			; CRecordVector<void *>::Clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?DeleteBack@?$CRecordVector@PAX@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DeleteBack@?$CRecordVector@PAX@@QAEXXZ PROC		; CRecordVector<void *>::DeleteBack, COMDAT
; _this$ = ecx
; Line 133
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?DeleteBack@?$CRecordVector@PAX@@QAEXXZ ENDP		; CRecordVector<void *>::DeleteBack
_TEXT	ENDS
PUBLIC	?MoveItems@?$CRecordVector@PAX@@AAEXII@Z	; CRecordVector<void *>::MoveItems
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Delete@?$CRecordVector@PAX@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?Delete@?$CRecordVector@PAX@@QAEXI@Z PROC		; CRecordVector<void *>::Delete, COMDAT
; _this$ = ecx
; Line 151
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 152
	mov	eax, DWORD PTR _index$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MoveItems@?$CRecordVector@PAX@@AAEXII@Z ; CRecordVector<void *>::MoveItems
; Line 153
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	sub	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 154
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Delete@?$CRecordVector@PAX@@QAEXI@Z ENDP		; CRecordVector<void *>::Delete
_TEXT	ENDS
PUBLIC	?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ	; CRecordVector<void *>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@PAX@@QAEIQAX@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?Add@?$CRecordVector@PAX@@QAEIQAX@Z PROC		; CRecordVector<void *>::Add, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ; CRecordVector<void *>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 201
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv72[ebp]
; Line 202
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CRecordVector@PAX@@QAEIQAX@Z ENDP		; CRecordVector<void *>::Add
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z PROC	; CRecordVector<void *>::AddInReserved, COMDAT
; _this$ = ecx
; Line 205
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 206
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 207
	mov	esp, ebp
	pop	ebp
	ret	4
?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ENDP	; CRecordVector<void *>::AddInReserved
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Insert@?$CRecordVector@PAX@@QAEXIQAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
_item$ = 12						; size = 4
?Insert@?$CRecordVector@PAX@@QAEXIQAX@Z PROC		; CRecordVector<void *>::Insert, COMDAT
; _this$ = ecx
; Line 210
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 211
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ; CRecordVector<void *>::ReserveOnePosition
; Line 212
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MoveItems@?$CRecordVector@PAX@@AAEXII@Z ; CRecordVector<void *>::MoveItems
; Line 213
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 214
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 215
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Insert@?$CRecordVector@PAX@@QAEXIQAX@Z ENDP		; CRecordVector<void *>::Insert
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@PAX@@QBEABQAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@PAX@@QBEABQAXI@Z PROC		; CRecordVector<void *>::operator[], COMDAT
; _this$ = ecx
; Line 227
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@PAX@@QBEABQAXI@Z ENDP		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@PAX@@QAEAAPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@PAX@@QAEAAPAXI@Z PROC		; CRecordVector<void *>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@PAX@@QAEAAPAXI@Z ENDP		; CRecordVector<void *>::operator[]
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@ABV0@@Z$1
__ehfuncinfo$??0?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@ABV0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
tv85 = -36						; size = 4
$T68938 = -32						; size = 4
$T68937 = -28						; size = 4
_i$68251 = -24						; size = 4
_size$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_v$ = 8							; size = 4
??0?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@ABV0@@Z PROC ; CObjectVector<NWildcard::CCensorNode>::CObjectVector<NWildcard::CCensorNode>, COMDAT
; _this$ = ecx
; Line 422
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@ABV0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 424
	mov	ecx, DWORD PTR _v$[ebp]
	call	?Size@?$CObjectVector@VCCensorNode@NWildcard@@@@QBEIXZ ; CObjectVector<NWildcard::CCensorNode>::Size
	mov	DWORD PTR _size$[ebp], eax
; Line 425
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z ; CRecordVector<void *>::ConstructReserve
; Line 426
	mov	DWORD PTR _i$68251[ebp], 0
	jmp	SHORT $LN3@CObjectVec@5
$LN2@CObjectVec@5:
	mov	ecx, DWORD PTR _i$68251[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$68251[ebp], ecx
$LN3@CObjectVec@5:
	mov	edx, DWORD PTR _i$68251[ebp]
	cmp	edx, DWORD PTR _size$[ebp]
	jae	SHORT $LN4@CObjectVec@5
; Line 427
	push	52					; 00000034H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T68938[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T68938[ebp], 0
	je	SHORT $LN6@CObjectVec@5
	mov	eax, DWORD PTR _i$68251[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	call	??A?$CObjectVector@VCCensorNode@NWildcard@@@@QBEABVCCensorNode@NWildcard@@I@Z ; CObjectVector<NWildcard::CCensorNode>::operator[]
	push	eax
	mov	ecx, DWORD PTR $T68938[ebp]
	call	??0CCensorNode@NWildcard@@QAE@ABV01@@Z
	mov	DWORD PTR tv85[ebp], eax
	jmp	SHORT $LN7@CObjectVec@5
$LN6@CObjectVec@5:
	mov	DWORD PTR tv85[ebp], 0
$LN7@CObjectVec@5:
	mov	ecx, DWORD PTR tv85[ebp]
	mov	DWORD PTR $T68937[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T68937[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ; CRecordVector<void *>::AddInReserved
	jmp	SHORT $LN2@CObjectVec@5
$LN4@CObjectVec@5:
; Line 428
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@ABV0@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__unwindfunclet$??0?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@ABV0@@Z$1:
	mov	eax, DWORD PTR $T68938[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??0?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@ABV0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@ABV0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$CObjectVector@VCCensorNode@NWildcard@@@@QAE@ABV0@@Z ENDP ; CObjectVector<NWildcard::CCensorNode>::CObjectVector<NWildcard::CCensorNode>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$CObjectVector@UCItem@NWildcard@@@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CObjectVector@UCItem@NWildcard@@@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$CObjectVector@UCItem@NWildcard@@@@QAE@ABV0@@Z$1
__ehfuncinfo$??0?$CObjectVector@UCItem@NWildcard@@@@QAE@ABV0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$CObjectVector@UCItem@NWildcard@@@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0?$CObjectVector@UCItem@NWildcard@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
tv85 = -36						; size = 4
$T68952 = -32						; size = 4
$T68951 = -28						; size = 4
_i$68262 = -24						; size = 4
_size$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_v$ = 8							; size = 4
??0?$CObjectVector@UCItem@NWildcard@@@@QAE@ABV0@@Z PROC	; CObjectVector<NWildcard::CItem>::CObjectVector<NWildcard::CItem>, COMDAT
; _this$ = ecx
; Line 422
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$CObjectVector@UCItem@NWildcard@@@@QAE@ABV0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 424
	mov	ecx, DWORD PTR _v$[ebp]
	call	?Size@?$CObjectVector@UCItem@NWildcard@@@@QBEIXZ ; CObjectVector<NWildcard::CItem>::Size
	mov	DWORD PTR _size$[ebp], eax
; Line 425
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z ; CRecordVector<void *>::ConstructReserve
; Line 426
	mov	DWORD PTR _i$68262[ebp], 0
	jmp	SHORT $LN3@CObjectVec@6
$LN2@CObjectVec@6:
	mov	ecx, DWORD PTR _i$68262[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$68262[ebp], ecx
$LN3@CObjectVec@6:
	mov	edx, DWORD PTR _i$68262[ebp]
	cmp	edx, DWORD PTR _size$[ebp]
	jae	SHORT $LN4@CObjectVec@6
; Line 427
	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T68952[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T68952[ebp], 0
	je	SHORT $LN6@CObjectVec@6
	mov	eax, DWORD PTR _i$68262[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	call	??A?$CObjectVector@UCItem@NWildcard@@@@QBEABUCItem@NWildcard@@I@Z ; CObjectVector<NWildcard::CItem>::operator[]
	push	eax
	mov	ecx, DWORD PTR $T68952[ebp]
	call	??0CItem@NWildcard@@QAE@ABU01@@Z
	mov	DWORD PTR tv85[ebp], eax
	jmp	SHORT $LN7@CObjectVec@6
$LN6@CObjectVec@6:
	mov	DWORD PTR tv85[ebp], 0
$LN7@CObjectVec@6:
	mov	ecx, DWORD PTR tv85[ebp]
	mov	DWORD PTR $T68951[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T68951[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ; CRecordVector<void *>::AddInReserved
	jmp	SHORT $LN2@CObjectVec@6
$LN4@CObjectVec@6:
; Line 428
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CObjectVector@UCItem@NWildcard@@@@QAE@ABV0@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__unwindfunclet$??0?$CObjectVector@UCItem@NWildcard@@@@QAE@ABV0@@Z$1:
	mov	eax, DWORD PTR $T68952[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??0?$CObjectVector@UCItem@NWildcard@@@@QAE@ABV0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$CObjectVector@UCItem@NWildcard@@@@QAE@ABV0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$CObjectVector@UCItem@NWildcard@@@@QAE@ABV0@@Z ENDP	; CObjectVector<NWildcard::CItem>::CObjectVector<NWildcard::CItem>
EXTRN	__imp__memmove:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?MoveItems@?$CRecordVector@PAX@@AAEXII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_destIndex$ = 8						; size = 4
_srcIndex$ = 12						; size = 4
?MoveItems@?$CRecordVector@PAX@@AAEXII@Z PROC		; CRecordVector<void *>::MoveItems, COMDAT
; _this$ = ecx
; Line 14
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 15
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR _srcIndex$[ebp]
	shl	ecx, 2
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _srcIndex$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _destIndex$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 16
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?MoveItems@?$CRecordVector@PAX@@AAEXII@Z ENDP		; CRecordVector<void *>::MoveItems
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ
_TEXT	SEGMENT
$T68968 = -20						; size = 4
$T68967 = -16						; size = 4
_p$68278 = -12						; size = 4
_newCapacity$68277 = -8					; size = 4
_this$ = -4						; size = 4
?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ PROC	; CRecordVector<void *>::ReserveOnePosition, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@ReserveOne
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$68277[ebp], ecx
; Line 23
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$68277[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T68967[ebp], eax
	mov	eax, DWORD PTR $T68967[ebp]
	mov	DWORD PTR _p$68278[ebp], eax
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@ReserveOne
; Line 25
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$68278[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne:
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T68968[ebp], edx
	mov	eax, DWORD PTR $T68968[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$68278[ebp]
	mov	DWORD PTR [ecx], edx
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$68277[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ReserveOne:
; Line 30
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ENDP	; CRecordVector<void *>::ReserveOnePosition
_TEXT	ENDS
END
