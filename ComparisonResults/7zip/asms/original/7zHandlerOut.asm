; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\CPP\7zip\Archive\7z\7zHandlerOut.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_k_LZMA_Name DD	FLAT:$SG74019
_kDefaultMethodName DD FLAT:$SG74021
_k_Copy_Name DD	FLAT:$SG74023
_k_MatchFinder_ForHeaders DD FLAT:$SG74025
_DATA	ENDS
CONST	SEGMENT
$SG74019 DB	'LZMA', 00H
	ORG $+3
$SG74021 DB	'LZMA2', 00H
	ORG $+2
$SG74023 DB	'Copy', 00H
	ORG $+3
$SG74025 DB	'BT2', 00H
$SG74549 DB	'rsfx', 00H
	ORG $+3
$SG74552 DB	'hc', 00H
	ORG $+1
$SG74555 DB	'hcf', 00H
$SG74564 DB	'he', 00H
	ORG $+1
$SG74571 DB	'tc', 00H
	ORG $+1
$SG74574 DB	'ta', 00H
	ORG $+1
$SG74577 DB	'tm', 00H
	ORG $+1
$SG74580 DB	'mtf', 00H
CONST	ENDS
PUBLIC	?GetFileTimeType@CHandler@N7z@NArchive@@UAGJPAI@Z ; NArchive::N7z::CHandler::GetFileTimeType
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zhandlerout.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_this$ = 8						; size = 4
_type$ = 12						; size = 4
?GetFileTimeType@CHandler@N7z@NArchive@@UAGJPAI@Z PROC	; NArchive::N7z::CHandler::GetFileTimeType
; Line 36
	push	ebp
	mov	ebp, esp
; Line 37
	mov	eax, DWORD PTR _type$[ebp]
	mov	DWORD PTR [eax], 0
; Line 38
	xor	eax, eax
; Line 39
	pop	ebp
	ret	8
?GetFileTimeType@CHandler@N7z@NArchive@@UAGJPAI@Z ENDP	; NArchive::N7z::CHandler::GetFileTimeType
_TEXT	ENDS
PUBLIC	??4CProps@@QAEAAU0@ABU0@@Z			; CProps::operator=
PUBLIC	?PropsMethod_To_FullMethod@CHandler@N7z@NArchive@@AAEJAAUCMethodFull@23@ABVCOneMethodInfo@@@Z ; NArchive::N7z::CHandler::PropsMethod_To_FullMethod
EXTRN	?FindMethod@@YG_NABVAString@@AA_KAAI@Z:PROC	; FindMethod
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dest$ = 8						; size = 4
_m$ = 12						; size = 4
?PropsMethod_To_FullMethod@CHandler@N7z@NArchive@@AAEJAAUCMethodFull@23@ABVCOneMethodInfo@@@Z PROC ; NArchive::N7z::CHandler::PropsMethod_To_FullMethod
; _this$ = ecx
; Line 42
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 45
	mov	eax, DWORD PTR _dest$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	edx, DWORD PTR _m$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	call	?FindMethod@@YG_NABVAString@@AA_KAAI@Z	; FindMethod
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@PropsMetho
; Line 46
	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN2@PropsMetho
$LN1@PropsMetho:
; Line 47
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _dest$[ebp]
	call	??4CProps@@QAEAAU0@ABU0@@Z
; Line 48
	xor	eax, eax
$LN2@PropsMetho:
; Line 49
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?PropsMethod_To_FullMethod@CHandler@N7z@NArchive@@AAEJAAUCMethodFull@23@ABVCOneMethodInfo@@@Z ENDP ; NArchive::N7z::CHandler::PropsMethod_To_FullMethod
_TEXT	ENDS
PUBLIC	??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z	; CObjectVector<CProp>::operator=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4CProps@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4CProps@@QAEAAU0@ABU0@@Z PROC				; CProps::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z ; CObjectVector<CProp>::operator=
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4CProps@@QAEAAU0@ABU0@@Z ENDP				; CProps::operator=
_TEXT	ENDS
PUBLIC	??1COneMethodInfo@@QAE@XZ			; COneMethodInfo::~COneMethodInfo
PUBLIC	?AddNew@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@XZ ; CObjectVector<NArchive::N7z::CMethodFull>::AddNew
PUBLIC	?AddProp_NumThreads@CMethodProps@@QAEXI@Z	; CMethodProps::AddProp_NumThreads
PUBLIC	?AddProp_Level@CMethodProps@@QAEXI@Z		; CMethodProps::AddProp_Level
PUBLIC	?AddProp_Ascii@CProps@@QAEXKPBD@Z		; CProps::AddProp_Ascii
PUBLIC	??0COneMethodInfo@@QAE@XZ			; COneMethodInfo::COneMethodInfo
PUBLIC	?SetHeaderMethod@CHandler@N7z@NArchive@@AAEJAAUCCompressionMethodMode@23@@Z ; NArchive::N7z::CHandler::SetHeaderMethod
EXTRN	?AddProp32@CProps@@QAEXKI@Z:PROC		; CProps::AddProp32
EXTRN	??4AString@@QAEAAV0@PBD@Z:PROC			; AString::operator=
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
xdata$x	SEGMENT
__unwindtable$?SetHeaderMethod@CHandler@N7z@NArchive@@AAEJAAUCCompressionMethodMode@23@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetHeaderMethod@CHandler@N7z@NArchive@@AAEJAAUCCompressionMethodMode@23@@Z$0
__ehfuncinfo$?SetHeaderMethod@CHandler@N7z@NArchive@@AAEJAAUCCompressionMethodMode@23@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetHeaderMethod@CHandler@N7z@NArchive@@AAEJAAUCCompressionMethodMode@23@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T76038 = -68						; size = 4
_methodFull$ = -64					; size = 4
_m$ = -56						; size = 36
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_headerMethod$ = 8					; size = 4
?SetHeaderMethod@CHandler@N7z@NArchive@@AAEJAAUCCompressionMethodMode@23@@Z PROC ; NArchive::N7z::CHandler::SetHeaderMethod
; _this$ = ecx
; Line 52
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetHeaderMethod@CHandler@N7z@NArchive@@AAEJAAUCCompressionMethodMode@23@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 56					; 00000038H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-68]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 53
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+122]
	test	ecx, ecx
	jne	SHORT $LN1@SetHeaderM
; Line 54
	xor	eax, eax
	jmp	$LN2@SetHeaderM
$LN1@SetHeaderM:
; Line 55
	lea	ecx, DWORD PTR _m$[ebp]
	call	??0COneMethodInfo@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 56
	mov	edx, DWORD PTR _k_LZMA_Name
	push	edx
	lea	ecx, DWORD PTR _m$[ebp+12]
	call	??4AString@@QAEAAV0@PBD@Z		; AString::operator=
; Line 57
	mov	eax, DWORD PTR _k_MatchFinder_ForHeaders
	push	eax
	push	9
	lea	ecx, DWORD PTR _m$[ebp]
	call	?AddProp_Ascii@CProps@@QAEXKPBD@Z	; CProps::AddProp_Ascii
; Line 58
	push	5
	lea	ecx, DWORD PTR _m$[ebp]
	call	?AddProp_Level@CMethodProps@@QAEXI@Z	; CMethodProps::AddProp_Level
; Line 59
	push	273					; 00000111H
	push	8
	lea	ecx, DWORD PTR _m$[ebp]
	call	?AddProp32@CProps@@QAEXKI@Z		; CProps::AddProp32
; Line 60
	push	1048576					; 00100000H
	push	1
	lea	ecx, DWORD PTR _m$[ebp]
	call	?AddProp32@CProps@@QAEXKI@Z		; CProps::AddProp32
; Line 61
	push	1
	lea	ecx, DWORD PTR _m$[ebp]
	call	?AddProp_NumThreads@CMethodProps@@QAEXI@Z ; CMethodProps::AddProp_NumThreads
; Line 63
	mov	ecx, DWORD PTR _headerMethod$[ebp]
	call	?AddNew@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@XZ ; CObjectVector<NArchive::N7z::CMethodFull>::AddNew
	mov	DWORD PTR _methodFull$[ebp], eax
; Line 64
	lea	ecx, DWORD PTR _m$[ebp]
	push	ecx
	mov	edx, DWORD PTR _methodFull$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PropsMethod_To_FullMethod@CHandler@N7z@NArchive@@AAEJAAUCMethodFull@23@ABVCOneMethodInfo@@@Z ; NArchive::N7z::CHandler::PropsMethod_To_FullMethod
	mov	DWORD PTR $T76038[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _m$[ebp]
	call	??1COneMethodInfo@@QAE@XZ
	mov	eax, DWORD PTR $T76038[ebp]
$LN2@SetHeaderM:
; Line 65
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@SetHeaderM
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 68					; 00000044H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN8@SetHeaderM:
	DD	1
	DD	$LN7@SetHeaderM
$LN7@SetHeaderM:
	DD	-56					; ffffffc8H
	DD	36					; 00000024H
	DD	$LN5@SetHeaderM
$LN5@SetHeaderM:
	DB	109					; 0000006dH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SetHeaderMethod@CHandler@N7z@NArchive@@AAEJAAUCCompressionMethodMode@23@@Z$0:
	lea	ecx, DWORD PTR _m$[ebp]
	jmp	??1COneMethodInfo@@QAE@XZ
__ehhandler$?SetHeaderMethod@CHandler@N7z@NArchive@@AAEJAAUCCompressionMethodMode@23@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-64]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetHeaderMethod@CHandler@N7z@NArchive@@AAEJAAUCCompressionMethodMode@23@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetHeaderMethod@CHandler@N7z@NArchive@@AAEJAAUCCompressionMethodMode@23@@Z ENDP ; NArchive::N7z::CHandler::SetHeaderMethod
PUBLIC	?AddNew@?$CObjectVector@UCProp@@@@QAEAAUCProp@@XZ ; CObjectVector<CProp>::AddNew
EXTRN	??4CPropVariant@NCOM@NWindows@@QAEAAV012@PBD@Z:PROC ; NWindows::NCOM::CPropVariant::operator=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?AddProp_Ascii@CProps@@QAEXKPBD@Z
_TEXT	SEGMENT
_prop$ = -8						; size = 4
_this$ = -4						; size = 4
_propid$ = 8						; size = 4
_s$ = 12						; size = 4
?AddProp_Ascii@CProps@@QAEXKPBD@Z PROC			; CProps::AddProp_Ascii, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\methodprops.h
; Line 44
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 45
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddNew@?$CObjectVector@UCProp@@@@QAEAAUCProp@@XZ ; CObjectVector<CProp>::AddNew
	mov	DWORD PTR _prop$[ebp], eax
; Line 46
	mov	eax, DWORD PTR _prop$[ebp]
	mov	BYTE PTR [eax+4], 1
; Line 47
	mov	ecx, DWORD PTR _prop$[ebp]
	mov	edx, DWORD PTR _propid$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 48
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _prop$[ebp]
	add	ecx, 8
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@PBD@Z ; NWindows::NCOM::CPropVariant::operator=
; Line 49
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?AddProp_Ascii@CProps@@QAEXKPBD@Z ENDP			; CProps::AddProp_Ascii
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddProp_Level@CMethodProps@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_level$ = 8						; size = 4
?AddProp_Level@CMethodProps@@QAEXI@Z PROC		; CMethodProps::AddProp_Level, COMDAT
; _this$ = ecx
; Line 164
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 165
	mov	eax, DWORD PTR _level$[ebp]
	push	eax
	push	15					; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddProp32@CProps@@QAEXKI@Z		; CProps::AddProp32
; Line 166
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?AddProp_Level@CMethodProps@@QAEXI@Z ENDP		; CMethodProps::AddProp_Level
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddProp_NumThreads@CMethodProps@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_numThreads$ = 8					; size = 4
?AddProp_NumThreads@CMethodProps@@QAEXI@Z PROC		; CMethodProps::AddProp_NumThreads, COMDAT
; _this$ = ecx
; Line 169
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 170
	mov	eax, DWORD PTR _numThreads$[ebp]
	push	eax
	push	13					; 0000000dH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddProp32@CProps@@QAEXKI@Z		; CProps::AddProp32
; Line 171
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?AddProp_NumThreads@CMethodProps@@QAEXI@Z ENDP		; CMethodProps::AddProp_NumThreads
_TEXT	ENDS
PUBLIC	??1AString@@QAE@XZ				; AString::~AString
PUBLIC	??1CMethodProps@@QAE@XZ				; CMethodProps::~CMethodProps
PUBLIC	??0CMethodProps@@QAE@XZ				; CMethodProps::CMethodProps
EXTRN	??0UString@@QAE@XZ:PROC				; UString::UString
EXTRN	??0AString@@QAE@XZ:PROC				; AString::AString
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0COneMethodInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0COneMethodInfo@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0COneMethodInfo@@QAE@XZ$1
__ehfuncinfo$??0COneMethodInfo@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0COneMethodInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0COneMethodInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0COneMethodInfo@@QAE@XZ PROC				; COneMethodInfo::COneMethodInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0COneMethodInfo@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CMethodProps@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0AString@@QAE@XZ			; AString::AString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0COneMethodInfo@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CMethodProps@@QAE@XZ
__unwindfunclet$??0COneMethodInfo@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1AString@@QAE@XZ			; AString::~AString
__ehhandler$??0COneMethodInfo@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0COneMethodInfo@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0COneMethodInfo@@QAE@XZ ENDP				; COneMethodInfo::COneMethodInfo
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1AString@@QAE@XZ
_TEXT	SEGMENT
$T76071 = -8						; size = 4
_this$ = -4						; size = 4
??1AString@@QAE@XZ PROC					; AString::~AString, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 232
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T76071[ebp], ecx
	mov	edx, DWORD PTR $T76071[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1AString@@QAE@XZ ENDP					; AString::~AString
_TEXT	ENDS
PUBLIC	??1UString@@QAE@XZ				; UString::~UString
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1COneMethodInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1COneMethodInfo@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1COneMethodInfo@@QAE@XZ$1
__ehfuncinfo$??1COneMethodInfo@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1COneMethodInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1COneMethodInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1COneMethodInfo@@QAE@XZ PROC				; COneMethodInfo::~COneMethodInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1COneMethodInfo@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CMethodProps@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1COneMethodInfo@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CMethodProps@@QAE@XZ
__unwindfunclet$??1COneMethodInfo@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1AString@@QAE@XZ			; AString::~AString
__ehhandler$??1COneMethodInfo@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1COneMethodInfo@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1COneMethodInfo@@QAE@XZ ENDP				; COneMethodInfo::~COneMethodInfo
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1UString@@QAE@XZ
_TEXT	SEGMENT
$T76085 = -8						; size = 4
_this$ = -4						; size = 4
??1UString@@QAE@XZ PROC					; UString::~UString, COMDAT
; _this$ = ecx
; Line 470
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T76085[ebp], ecx
	mov	edx, DWORD PTR $T76085[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1UString@@QAE@XZ ENDP					; UString::~UString
_TEXT	ENDS
PUBLIC	??0CProps@@QAE@XZ				; CProps::CProps
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CMethodProps@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMethodProps@@QAE@XZ PROC				; CMethodProps::CMethodProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CProps@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CMethodProps@@QAE@XZ ENDP				; CMethodProps::CMethodProps
_TEXT	ENDS
PUBLIC	??1CProps@@QAE@XZ				; CProps::~CProps
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CMethodProps@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CMethodProps@@QAE@XZ PROC				; CMethodProps::~CMethodProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CProps@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CMethodProps@@QAE@XZ ENDP				; CMethodProps::~CMethodProps
_TEXT	ENDS
PUBLIC	??0?$CObjectVector@UCProp@@@@QAE@XZ		; CObjectVector<CProp>::CObjectVector<CProp>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CProps@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CProps@@QAE@XZ PROC					; CProps::CProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CObjectVector@UCProp@@@@QAE@XZ	; CObjectVector<CProp>::CObjectVector<CProp>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CProps@@QAE@XZ ENDP					; CProps::CProps
_TEXT	ENDS
PUBLIC	??1?$CObjectVector@UCProp@@@@QAE@XZ		; CObjectVector<CProp>::~CObjectVector<CProp>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CProps@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CProps@@QAE@XZ PROC					; CProps::~CProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CObjectVector@UCProp@@@@QAE@XZ	; CObjectVector<CProp>::~CObjectVector<CProp>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CProps@@QAE@XZ ENDP					; CProps::~CProps
_TEXT	ENDS
PUBLIC	?Get_BZip2_BlockSize@CMethodProps@@QBEIXZ	; CMethodProps::Get_BZip2_BlockSize
PUBLIC	?Get_Ppmd_MemSize@CMethodProps@@QBEIXZ		; CMethodProps::Get_Ppmd_MemSize
PUBLIC	?Get_Lzma_DicSize@CMethodProps@@QBEIXZ		; CMethodProps::Get_Lzma_DicSize
PUBLIC	??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ	; CObjectVector<COneMethodInfo>::~CObjectVector<COneMethodInfo>
PUBLIC	?Insert@?$CObjectVector@VCOneMethodInfo@@@@QAEXIABVCOneMethodInfo@@@Z ; CObjectVector<COneMethodInfo>::Insert
PUBLIC	??A?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEAAUCBond2@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CBond2>::operator[]
PUBLIC	?Size@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CBond2>::Size
PUBLIC	?GetLevel@CMultiMethodProps@NArchive@@QBEHXZ	; NArchive::CMultiMethodProps::GetLevel
PUBLIC	?AddNew@?$CObjectVector@VCOneMethodInfo@@@@QAEAAVCOneMethodInfo@@XZ ; CObjectVector<COneMethodInfo>::AddNew
PUBLIC	?IsEmpty@?$CObjectVector@VCOneMethodInfo@@@@QBE_NXZ ; CObjectVector<COneMethodInfo>::IsEmpty
PUBLIC	?IsEmpty@AString@@QBE_NXZ			; AString::IsEmpty
PUBLIC	??A?$CObjectVector@VCOneMethodInfo@@@@QAEAAVCOneMethodInfo@@I@Z ; CObjectVector<COneMethodInfo>::operator[]
PUBLIC	?Size@?$CObjectVector@VCOneMethodInfo@@@@QBEIXZ	; CObjectVector<COneMethodInfo>::Size
PUBLIC	??0?$CObjectVector@VCOneMethodInfo@@@@QAE@ABV0@@Z ; CObjectVector<COneMethodInfo>::CObjectVector<COneMethodInfo>
PUBLIC	??4?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEAAV0@ABV0@@Z ; CRecordVector<NArchive::N7z::CBond2>::operator=
PUBLIC	?SetMainMethod@CHandler@N7z@NArchive@@AAEJAAUCCompressionMethodMode@23@I@Z ; NArchive::N7z::CHandler::SetMainMethod
EXTRN	?SetGlobalLevelAndThreads@CMultiMethodProps@NArchive@@QAEXAAVCOneMethodInfo@@I@Z:PROC ; NArchive::CMultiMethodProps::SetGlobalLevelAndThreads
EXTRN	__allshl:PROC
xdata$x	SEGMENT
__unwindtable$?SetMainMethod@CHandler@N7z@NArchive@@AAEJAAUCCompressionMethodMode@23@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetMainMethod@CHandler@N7z@NArchive@@AAEJAAUCCompressionMethodMode@23@I@Z$0
__ehfuncinfo$?SetMainMethod@CHandler@N7z@NArchive@@AAEJAAUCCompressionMethodMode@23@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetMainMethod@CHandler@N7z@NArchive@@AAEJAAUCCompressionMethodMode@23@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv382 = -136						; size = 4
tv374 = -132						; size = 4
tv205 = -128						; size = 8
tv224 = -120						; size = 8
tv342 = -112						; size = 4
tv139 = -108						; size = 4
$T76104 = -104						; size = 4
$T76102 = -100						; size = 4
_dicSize$74094 = -96					; size = 4
___result__$74089 = -92					; size = 4
_methodFull$74088 = -88					; size = 4
_oneMethodInfo$74087 = -84				; size = 4
_i$74083 = -80						; size = 4
_needSolid$ = -73					; size = 1
_kSolidBytes_Max$ = -72					; size = 8
_kSolidBytes_Min$ = -64					; size = 8
_bond$74078 = -56					; size = 4
_k$74074 = -52						; size = 4
_m$74070 = -48						; size = 4
_methodName$74067 = -44					; size = 4
_i$74063 = -40						; size = 4
_methods$ = -32						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_methodMode$ = 8					; size = 4
_numThreads$ = 12					; size = 4
?SetMainMethod@CHandler@N7z@NArchive@@AAEJAAUCCompressionMethodMode@23@I@Z PROC ; NArchive::N7z::CHandler::SetMainMethod
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zhandlerout.cpp
; Line 73
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetMainMethod@CHandler@N7z@NArchive@@AAEJAAUCCompressionMethodMode@23@I@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 124				; 0000007cH
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-136]
	mov	ecx, 31					; 0000001fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 74
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 472				; 000001d8H
	push	eax
	mov	ecx, DWORD PTR _methodMode$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEAAV0@ABV0@@Z ; CRecordVector<NArchive::N7z::CBond2>::operator=
; Line 76
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	push	ecx
	lea	ecx, DWORD PTR _methods$[ebp]
	call	??0?$CObjectVector@VCOneMethodInfo@@@@QAE@ABV0@@Z ; CObjectVector<COneMethodInfo>::CObjectVector<COneMethodInfo>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 79
	mov	DWORD PTR _i$74063[ebp], 0
	jmp	SHORT $LN27@SetMainMet
$LN26@SetMainMet:
	mov	edx, DWORD PTR _i$74063[ebp]
	add	edx, 1
	mov	DWORD PTR _i$74063[ebp], edx
$LN27@SetMainMet:
	lea	ecx, DWORD PTR _methods$[ebp]
	call	?Size@?$CObjectVector@VCOneMethodInfo@@@@QBEIXZ ; CObjectVector<COneMethodInfo>::Size
	cmp	DWORD PTR _i$74063[ebp], eax
	jae	SHORT $LN25@SetMainMet
; Line 81
	mov	eax, DWORD PTR _i$74063[ebp]
	push	eax
	lea	ecx, DWORD PTR _methods$[ebp]
	call	??A?$CObjectVector@VCOneMethodInfo@@@@QAEAAVCOneMethodInfo@@I@Z ; CObjectVector<COneMethodInfo>::operator[]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _methodName$74067[ebp], eax
; Line 82
	mov	ecx, DWORD PTR _methodName$74067[ebp]
	call	?IsEmpty@AString@@QBE_NXZ		; AString::IsEmpty
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN24@SetMainMet
; Line 83
	mov	edx, DWORD PTR _kDefaultMethodName
	push	edx
	mov	ecx, DWORD PTR _methodName$74067[ebp]
	call	??4AString@@QAEAAV0@PBD@Z		; AString::operator=
$LN24@SetMainMet:
; Line 84
	jmp	SHORT $LN26@SetMainMet
$LN25@SetMainMet:
; Line 85
	lea	ecx, DWORD PTR _methods$[ebp]
	call	?IsEmpty@?$CObjectVector@VCOneMethodInfo@@@@QBE_NXZ ; CObjectVector<COneMethodInfo>::IsEmpty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN23@SetMainMet
; Line 87
	lea	ecx, DWORD PTR _methods$[ebp]
	call	?AddNew@?$CObjectVector@VCOneMethodInfo@@@@QAEAAVCOneMethodInfo@@XZ ; CObjectVector<COneMethodInfo>::AddNew
	mov	DWORD PTR _m$74070[ebp], eax
; Line 88
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?GetLevel@CMultiMethodProps@NArchive@@QBEHXZ ; NArchive::CMultiMethodProps::GetLevel
	test	eax, eax
	jne	SHORT $LN30@SetMainMet
	mov	ecx, DWORD PTR _k_Copy_Name
	mov	DWORD PTR tv139[ebp], ecx
	jmp	SHORT $LN31@SetMainMet
$LN30@SetMainMet:
	mov	edx, DWORD PTR _kDefaultMethodName
	mov	DWORD PTR tv139[ebp], edx
$LN31@SetMainMet:
	mov	eax, DWORD PTR tv139[ebp]
	push	eax
	mov	ecx, DWORD PTR _m$74070[ebp]
	add	ecx, 12					; 0000000cH
	call	??4AString@@QAEAAV0@PBD@Z		; AString::operator=
; Line 89
	mov	ecx, DWORD PTR _methodMode$[ebp]
	mov	BYTE PTR [ecx+24], 1
$LN23@SetMainMet:
; Line 93
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	call	?IsEmpty@AString@@QBE_NXZ		; AString::IsEmpty
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN22@SetMainMet
; Line 97
	mov	DWORD PTR _k$74074[ebp], 0
	jmp	SHORT $LN21@SetMainMet
$LN20@SetMainMet:
	mov	eax, DWORD PTR _k$74074[ebp]
	add	eax, 1
	mov	DWORD PTR _k$74074[ebp], eax
$LN21@SetMainMet:
	mov	ecx, DWORD PTR _methodMode$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Size@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CBond2>::Size
	cmp	DWORD PTR _k$74074[ebp], eax
	jae	SHORT $LN19@SetMainMet
; Line 99
	mov	ecx, DWORD PTR _k$74074[ebp]
	push	ecx
	mov	ecx, DWORD PTR _methodMode$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEAAUCBond2@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CBond2>::operator[]
	mov	DWORD PTR _bond$74078[ebp], eax
; Line 100
	mov	edx, DWORD PTR _bond$74078[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 1
	mov	ecx, DWORD PTR _bond$74078[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 101
	mov	edx, DWORD PTR _bond$74078[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _bond$74078[ebp]
	mov	DWORD PTR [ecx], eax
; Line 102
	jmp	SHORT $LN20@SetMainMet
$LN19@SetMainMet:
; Line 103
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 56					; 00000038H
	push	edx
	push	0
	lea	ecx, DWORD PTR _methods$[ebp]
	call	?Insert@?$CObjectVector@VCOneMethodInfo@@@@QAEXIABVCOneMethodInfo@@@Z ; CObjectVector<COneMethodInfo>::Insert
; Line 104
	mov	eax, DWORD PTR _methodMode$[ebp]
	mov	BYTE PTR [eax+25], 1
$LN22@SetMainMet:
; Line 108
	mov	DWORD PTR _kSolidBytes_Min$[ebp], 16777216 ; 01000000H
	mov	DWORD PTR _kSolidBytes_Min$[ebp+4], 0
; Line 109
	mov	DWORD PTR _kSolidBytes_Max$[ebp], -1
	mov	DWORD PTR _kSolidBytes_Max$[ebp+4], 0
; Line 111
	mov	BYTE PTR _needSolid$[ebp], 0
; Line 113
	mov	DWORD PTR _i$74083[ebp], 0
	jmp	SHORT $LN18@SetMainMet
$LN17@SetMainMet:
	mov	ecx, DWORD PTR _i$74083[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$74083[ebp], ecx
$LN18@SetMainMet:
	lea	ecx, DWORD PTR _methods$[ebp]
	call	?Size@?$CObjectVector@VCOneMethodInfo@@@@QBEIXZ ; CObjectVector<COneMethodInfo>::Size
	cmp	DWORD PTR _i$74083[ebp], eax
	jae	$LN16@SetMainMet
; Line 115
	mov	edx, DWORD PTR _i$74083[ebp]
	push	edx
	lea	ecx, DWORD PTR _methods$[ebp]
	call	??A?$CObjectVector@VCOneMethodInfo@@@@QAEAAVCOneMethodInfo@@I@Z ; CObjectVector<COneMethodInfo>::operator[]
	mov	DWORD PTR _oneMethodInfo$74087[ebp], eax
; Line 120
	mov	eax, DWORD PTR _numThreads$[ebp]
	push	eax
	mov	ecx, DWORD PTR _oneMethodInfo$74087[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?SetGlobalLevelAndThreads@CMultiMethodProps@NArchive@@QAEXAAVCOneMethodInfo@@I@Z ; NArchive::CMultiMethodProps::SetGlobalLevelAndThreads
; Line 122
	mov	ecx, DWORD PTR _methodMode$[ebp]
	call	?AddNew@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@XZ ; CObjectVector<NArchive::N7z::CMethodFull>::AddNew
	mov	DWORD PTR _methodFull$74088[ebp], eax
; Line 123
	mov	edx, DWORD PTR _oneMethodInfo$74087[ebp]
	push	edx
	mov	eax, DWORD PTR _methodFull$74088[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PropsMethod_To_FullMethod@CHandler@N7z@NArchive@@AAEJAAUCMethodFull@23@ABVCOneMethodInfo@@@Z ; NArchive::N7z::CHandler::PropsMethod_To_FullMethod
	mov	DWORD PTR ___result__$74089[ebp], eax
	cmp	DWORD PTR ___result__$74089[ebp], 0
	je	SHORT $LN15@SetMainMet
	mov	ecx, DWORD PTR ___result__$74089[ebp]
	mov	DWORD PTR $T76102[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _methods$[ebp]
	call	??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ ; CObjectVector<COneMethodInfo>::~CObjectVector<COneMethodInfo>
	mov	eax, DWORD PTR $T76102[ebp]
	jmp	$LN28@SetMainMet
$LN15@SetMainMet:
; Line 125
	mov	edx, DWORD PTR _methodFull$74088[ebp]
	mov	DWORD PTR tv342[ebp], edx
	mov	eax, DWORD PTR tv342[ebp]
	mov	ecx, DWORD PTR tv342[ebp]
	mov	edx, DWORD PTR [eax+16]
	or	edx, DWORD PTR [ecx+20]
	je	SHORT $LN14@SetMainMet
; Line 126
	mov	BYTE PTR _needSolid$[ebp], 1
$LN14@SetMainMet:
; Line 128
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+120]
	test	ecx, ecx
	je	SHORT $LN13@SetMainMet
; Line 129
	jmp	$LN17@SetMainMet
$LN13@SetMainMet:
; Line 132
	mov	edx, DWORD PTR _methodFull$74088[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR tv224[ebp], eax
	mov	ecx, DWORD PTR [edx+20]
	mov	DWORD PTR tv224[ebp+4], ecx
	cmp	DWORD PTR tv224[ebp+4], 0
	ja	SHORT $LN6@SetMainMet
	jb	SHORT $LN34@SetMainMet
	cmp	DWORD PTR tv224[ebp], 262658		; 00040202H
	ja	SHORT $LN6@SetMainMet
$LN34@SetMainMet:
	mov	edx, DWORD PTR tv224[ebp]
	mov	DWORD PTR tv205[ebp], edx
	cmp	DWORD PTR tv205[ebp], 197633		; 00030401H
	ja	SHORT $LN32@SetMainMet
	cmp	DWORD PTR tv205[ebp], 197633		; 00030401H
	je	SHORT $LN9@SetMainMet
	cmp	DWORD PTR tv205[ebp], 33		; 00000021H
	je	SHORT $LN10@SetMainMet
	cmp	DWORD PTR tv205[ebp], 196865		; 00030101H
	je	SHORT $LN10@SetMainMet
	jmp	SHORT $LN6@SetMainMet
$LN32@SetMainMet:
	cmp	DWORD PTR tv205[ebp], 262408		; 00040108H
	je	SHORT $LN8@SetMainMet
	cmp	DWORD PTR tv205[ebp], 262658		; 00040202H
	je	SHORT $LN7@SetMainMet
	jmp	SHORT $LN6@SetMainMet
$LN10@SetMainMet:
; Line 135
	mov	ecx, DWORD PTR _oneMethodInfo$74087[ebp]
	call	?Get_Lzma_DicSize@CMethodProps@@QBEIXZ	; CMethodProps::Get_Lzma_DicSize
	mov	DWORD PTR _dicSize$74094[ebp], eax
	jmp	SHORT $LN11@SetMainMet
$LN9@SetMainMet:
; Line 136
	mov	ecx, DWORD PTR _oneMethodInfo$74087[ebp]
	call	?Get_Ppmd_MemSize@CMethodProps@@QBEIXZ	; CMethodProps::Get_Ppmd_MemSize
	mov	DWORD PTR _dicSize$74094[ebp], eax
	jmp	SHORT $LN11@SetMainMet
$LN8@SetMainMet:
; Line 137
	mov	DWORD PTR _dicSize$74094[ebp], 32768	; 00008000H
	jmp	SHORT $LN11@SetMainMet
$LN7@SetMainMet:
; Line 138
	mov	ecx, DWORD PTR _oneMethodInfo$74087[ebp]
	call	?Get_BZip2_BlockSize@CMethodProps@@QBEIXZ ; CMethodProps::Get_BZip2_BlockSize
	mov	DWORD PTR _dicSize$74094[ebp], eax
	jmp	SHORT $LN11@SetMainMet
$LN6@SetMainMet:
; Line 139
	jmp	$LN17@SetMainMet
$LN11@SetMainMet:
; Line 142
	mov	eax, DWORD PTR _dicSize$74094[ebp]
	xor	edx, edx
	mov	cl, 7
	call	__allshl
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+112], eax
	mov	DWORD PTR [ecx+116], edx
; Line 143
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv374[ebp], edx
	mov	eax, DWORD PTR tv374[ebp]
	cmp	DWORD PTR [eax+116], 0
	ja	SHORT $LN5@SetMainMet
	jb	SHORT $LN35@SetMainMet
	mov	ecx, DWORD PTR tv374[ebp]
	cmp	DWORD PTR [ecx+112], 16777216		; 01000000H
	jae	SHORT $LN5@SetMainMet
$LN35@SetMainMet:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+112], 16777216		; 01000000H
	mov	DWORD PTR [edx+116], 0
$LN5@SetMainMet:
; Line 144
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv382[ebp], eax
	mov	ecx, DWORD PTR tv382[ebp]
	cmp	DWORD PTR [ecx+116], 0
	ja	SHORT $LN36@SetMainMet
	mov	edx, DWORD PTR tv382[ebp]
	cmp	DWORD PTR [edx+112], -1
	jbe	SHORT $LN4@SetMainMet
$LN36@SetMainMet:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+112], -1
	mov	DWORD PTR [eax+116], 0
$LN4@SetMainMet:
; Line 145
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+120], 1
; Line 146
	jmp	$LN17@SetMainMet
$LN16@SetMainMet:
; Line 148
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+120]
	test	eax, eax
	jne	SHORT $LN3@SetMainMet
; Line 149
	movzx	ecx, BYTE PTR _needSolid$[ebp]
	test	ecx, ecx
	je	SHORT $LN2@SetMainMet
; Line 150
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+112], -1
	mov	DWORD PTR [edx+116], 0
; Line 151
	jmp	SHORT $LN3@SetMainMet
$LN2@SetMainMet:
; Line 152
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+112], 0
	mov	DWORD PTR [eax+116], 0
$LN3@SetMainMet:
; Line 153
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+120], 1
; Line 154
	mov	DWORD PTR $T76104[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _methods$[ebp]
	call	??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ ; CObjectVector<COneMethodInfo>::~CObjectVector<COneMethodInfo>
	mov	eax, DWORD PTR $T76104[ebp]
$LN28@SetMainMet:
; Line 155
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN40@SetMainMet
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 136				; 00000088H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN40@SetMainMet:
	DD	1
	DD	$LN39@SetMainMet
$LN39@SetMainMet:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN37@SetMainMet
$LN37@SetMainMet:
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SetMainMethod@CHandler@N7z@NArchive@@AAEJAAUCCompressionMethodMode@23@I@Z$0:
	lea	ecx, DWORD PTR _methods$[ebp]
	jmp	??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ ; CObjectVector<COneMethodInfo>::~CObjectVector<COneMethodInfo>
__ehhandler$?SetMainMethod@CHandler@N7z@NArchive@@AAEJAAUCCompressionMethodMode@23@I@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-132]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetMainMethod@CHandler@N7z@NArchive@@AAEJAAUCCompressionMethodMode@23@I@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetMainMethod@CHandler@N7z@NArchive@@AAEJAAUCCompressionMethodMode@23@I@Z ENDP ; NArchive::N7z::CHandler::SetMainMethod
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsEmpty@AString@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@AString@@QBE_NXZ PROC				; AString::IsEmpty, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 235
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+4], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@AString@@QBE_NXZ ENDP				; AString::IsEmpty
_TEXT	ENDS
PUBLIC	??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z	; CObjectVector<CProp>::operator[]
EXTRN	?GetLevel@CMethodProps@@QBEHXZ:PROC		; CMethodProps::GetLevel
EXTRN	?FindProp@CMethodProps@@QBEHK@Z:PROC		; CMethodProps::FindProp
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Get_Lzma_DicSize@CMethodProps@@QBEIXZ
_TEXT	SEGMENT
tv138 = -16						; size = 4
_level$ = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
?Get_Lzma_DicSize@CMethodProps@@QBEIXZ PROC		; CMethodProps::Get_Lzma_DicSize, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\methodprops.h
; Line 93
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 94
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindProp@CMethodProps@@QBEHK@Z		; CMethodProps::FindProp
	mov	DWORD PTR _i$[ebp], eax
; Line 95
	cmp	DWORD PTR _i$[ebp], 0
	jl	SHORT $LN2@Get_Lzma_D
; Line 96
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ; CObjectVector<CProp>::operator[]
	movzx	ecx, WORD PTR [eax+8]
	cmp	ecx, 19					; 00000013H
	jne	SHORT $LN2@Get_Lzma_D
; Line 97
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ; CObjectVector<CProp>::operator[]
	mov	eax, DWORD PTR [eax+16]
	jmp	SHORT $LN3@Get_Lzma_D
$LN2@Get_Lzma_D:
; Line 98
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetLevel@CMethodProps@@QBEHXZ		; CMethodProps::GetLevel
	mov	DWORD PTR _level$[ebp], eax
; Line 99
	cmp	DWORD PTR _level$[ebp], 5
	jg	SHORT $LN5@Get_Lzma_D
	mov	eax, DWORD PTR _level$[ebp]
	lea	ecx, DWORD PTR [eax+eax+14]
	mov	edx, 1
	shl	edx, cl
	mov	DWORD PTR tv138[ebp], edx
	jmp	SHORT $LN6@Get_Lzma_D
$LN5@Get_Lzma_D:
	mov	eax, DWORD PTR _level$[ebp]
	sub	eax, 6
	neg	eax
	sbb	eax, eax
	and	eax, 33554432				; 02000000H
	add	eax, 33554432				; 02000000H
	mov	DWORD PTR tv138[ebp], eax
$LN6@Get_Lzma_D:
	mov	eax, DWORD PTR tv138[ebp]
$LN3@Get_Lzma_D:
; Line 100
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Lzma_DicSize@CMethodProps@@QBEIXZ ENDP		; CMethodProps::Get_Lzma_DicSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Get_BZip2_BlockSize@CMethodProps@@QBEIXZ
_TEXT	SEGMENT
tv138 = -32						; size = 4
tv139 = -28						; size = 4
_level$ = -24						; size = 4
_kDicSizeMax$69276 = -20				; size = 4
_kDicSizeMin$69275 = -16				; size = 4
_blockSize$69274 = -12					; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
?Get_BZip2_BlockSize@CMethodProps@@QBEIXZ PROC		; CMethodProps::Get_BZip2_BlockSize, COMDAT
; _this$ = ecx
; Line 137
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 138
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindProp@CMethodProps@@QBEHK@Z		; CMethodProps::FindProp
	mov	DWORD PTR _i$[ebp], eax
; Line 139
	cmp	DWORD PTR _i$[ebp], 0
	jl	SHORT $LN4@Get_BZip2_
; Line 140
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ; CObjectVector<CProp>::operator[]
	movzx	ecx, WORD PTR [eax+8]
	cmp	ecx, 19					; 00000013H
	jne	SHORT $LN4@Get_BZip2_
; Line 142
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ; CObjectVector<CProp>::operator[]
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR _blockSize$69274[ebp], eax
; Line 143
	mov	DWORD PTR _kDicSizeMin$69275[ebp], 100000 ; 000186a0H
; Line 144
	mov	DWORD PTR _kDicSizeMax$69276[ebp], 900000 ; 000dbba0H
; Line 145
	cmp	DWORD PTR _blockSize$69274[ebp], 100000	; 000186a0H
	jae	SHORT $LN2@Get_BZip2_
	mov	DWORD PTR _blockSize$69274[ebp], 100000	; 000186a0H
$LN2@Get_BZip2_:
; Line 146
	cmp	DWORD PTR _blockSize$69274[ebp], 900000	; 000dbba0H
	jbe	SHORT $LN1@Get_BZip2_
	mov	DWORD PTR _blockSize$69274[ebp], 900000	; 000dbba0H
$LN1@Get_BZip2_:
; Line 147
	mov	eax, DWORD PTR _blockSize$69274[ebp]
	jmp	SHORT $LN5@Get_BZip2_
$LN4@Get_BZip2_:
; Line 149
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetLevel@CMethodProps@@QBEHXZ		; CMethodProps::GetLevel
	mov	DWORD PTR _level$[ebp], eax
; Line 150
	cmp	DWORD PTR _level$[ebp], 5
	jl	SHORT $LN9@Get_BZip2_
	mov	DWORD PTR tv139[ebp], 9
	jmp	SHORT $LN10@Get_BZip2_
$LN9@Get_BZip2_:
	cmp	DWORD PTR _level$[ebp], 1
	jl	SHORT $LN7@Get_BZip2_
	mov	ecx, DWORD PTR _level$[ebp]
	lea	edx, DWORD PTR [ecx+ecx-1]
	mov	DWORD PTR tv138[ebp], edx
	jmp	SHORT $LN8@Get_BZip2_
$LN7@Get_BZip2_:
	mov	DWORD PTR tv138[ebp], 1
$LN8@Get_BZip2_:
	mov	eax, DWORD PTR tv138[ebp]
	mov	DWORD PTR tv139[ebp], eax
$LN10@Get_BZip2_:
	mov	eax, DWORD PTR tv139[ebp]
	imul	eax, 100000				; 000186a0H
$LN5@Get_BZip2_:
; Line 151
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_BZip2_BlockSize@CMethodProps@@QBEIXZ ENDP		; CMethodProps::Get_BZip2_BlockSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Get_Ppmd_MemSize@CMethodProps@@QBEIXZ
_TEXT	SEGMENT
tv135 = -16						; size = 4
_level$ = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
?Get_Ppmd_MemSize@CMethodProps@@QBEIXZ PROC		; CMethodProps::Get_Ppmd_MemSize, COMDAT
; _this$ = ecx
; Line 154
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 155
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindProp@CMethodProps@@QBEHK@Z		; CMethodProps::FindProp
	mov	DWORD PTR _i$[ebp], eax
; Line 156
	cmp	DWORD PTR _i$[ebp], 0
	jl	SHORT $LN2@Get_Ppmd_M
; Line 157
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ; CObjectVector<CProp>::operator[]
	movzx	ecx, WORD PTR [eax+8]
	cmp	ecx, 19					; 00000013H
	jne	SHORT $LN2@Get_Ppmd_M
; Line 158
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ; CObjectVector<CProp>::operator[]
	mov	eax, DWORD PTR [eax+16]
	jmp	SHORT $LN3@Get_Ppmd_M
$LN2@Get_Ppmd_M:
; Line 159
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetLevel@CMethodProps@@QBEHXZ		; CMethodProps::GetLevel
	mov	DWORD PTR _level$[ebp], eax
; Line 160
	cmp	DWORD PTR _level$[ebp], 9
	jl	SHORT $LN5@Get_Ppmd_M
	mov	DWORD PTR tv135[ebp], 201326592		; 0c000000H
	jmp	SHORT $LN6@Get_Ppmd_M
$LN5@Get_Ppmd_M:
	mov	ecx, DWORD PTR _level$[ebp]
	add	ecx, 19					; 00000013H
	mov	eax, 1
	shl	eax, cl
	mov	DWORD PTR tv135[ebp], eax
$LN6@Get_Ppmd_M:
	mov	eax, DWORD PTR tv135[ebp]
$LN3@Get_Ppmd_M:
; Line 161
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_Ppmd_MemSize@CMethodProps@@QBEIXZ ENDP		; CMethodProps::Get_Ppmd_MemSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetLevel@CMultiMethodProps@NArchive@@QBEHXZ
_TEXT	SEGMENT
tv65 = -8						; size = 4
_this$ = -4						; size = 4
?GetLevel@CMultiMethodProps@NArchive@@QBEHXZ PROC	; NArchive::CMultiMethodProps::GetLevel, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\common\handlerout.h
; Line 40
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], -1
	jne	SHORT $LN3@GetLevel
	mov	DWORD PTR tv65[ebp], 5
	jmp	SHORT $LN4@GetLevel
$LN3@GetLevel:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv65[ebp], edx
$LN4@GetLevel:
	mov	eax, DWORD PTR tv65[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetLevel@CMultiMethodProps@NArchive@@QBEHXZ ENDP	; NArchive::CMultiMethodProps::GetLevel
_TEXT	ENDS
PUBLIC	?ClearAndFree@?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAEXXZ ; CObjectVector<NArchive::N7z::CUpdateItem>::ClearAndFree
PUBLIC	??1COutArchive@N7z@NArchive@@QAE@XZ		; NArchive::N7z::COutArchive::~COutArchive
PUBLIC	??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CArchiveDatabaseOut::~CArchiveDatabaseOut
PUBLIC	??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
PUBLIC	??B?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ ; CMyComPtr<ICryptoGetTextPassword>::operator ICryptoGetTextPassword *
PUBLIC	??I?$CMyComPtr@UICryptoGetTextPassword@@@@QAEPAPAUICryptoGetTextPassword@@XZ ; CMyComPtr<ICryptoGetTextPassword>::operator&
PUBLIC	??0?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::CMyComPtr<ICryptoGetTextPassword>
PUBLIC	??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CArchiveDatabaseOut::CArchiveDatabaseOut
PUBLIC	??0COutArchive@N7z@NArchive@@QAE@XZ		; NArchive::N7z::COutArchive::COutArchive
PUBLIC	?GetAnalysisLevel@CMultiMethodProps@NArchive@@QBEHXZ ; NArchive::CMultiMethodProps::GetAnalysisLevel
PUBLIC	??0CUpdateOptions@N7z@NArchive@@QAE@XZ		; NArchive::N7z::CUpdateOptions::CUpdateOptions
PUBLIC	??BCMyComBSTR@@QBEPB_WXZ			; CMyComBSTR::operator wchar_t const *
PUBLIC	??1?$CMyComPtr@UICryptoGetTextPassword2@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword2>::~CMyComPtr<ICryptoGetTextPassword2>
PUBLIC	??1CMyComBSTR@@QAE@XZ				; CMyComBSTR::~CMyComBSTR
PUBLIC	??ICMyComBSTR@@QAEPAPA_WXZ			; CMyComBSTR::operator&
PUBLIC	??C?$CMyComPtr@UICryptoGetTextPassword2@@@@QBEPAUICryptoGetTextPassword2@@XZ ; CMyComPtr<ICryptoGetTextPassword2>::operator->
PUBLIC	??0CMyComBSTR@@QAE@XZ				; CMyComBSTR::CMyComBSTR
PUBLIC	??B?$CMyComPtr@UICryptoGetTextPassword2@@@@QBEPAUICryptoGetTextPassword2@@XZ ; CMyComPtr<ICryptoGetTextPassword2>::operator ICryptoGetTextPassword2 *
PUBLIC	?Empty@UString@@QAEXXZ				; UString::Empty
PUBLIC	??I?$CMyComPtr@UICryptoGetTextPassword2@@@@QAEPAPAUICryptoGetTextPassword2@@XZ ; CMyComPtr<ICryptoGetTextPassword2>::operator&
PUBLIC	??0?$CMyComPtr@UICryptoGetTextPassword2@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword2>::CMyComPtr<ICryptoGetTextPassword2>
PUBLIC	??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode
PUBLIC	??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CCompressionMethodMode::CCompressionMethodMode
PUBLIC	?Add@?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAEIABUCUpdateItem@N7z@NArchive@@@Z ; CObjectVector<NArchive::N7z::CUpdateItem>::Add
PUBLIC	?SetDirStatusFromAttrib@CUpdateItem@N7z@NArchive@@QAEXXZ ; NArchive::N7z::CUpdateItem::SetDirStatusFromAttrib
PUBLIC	??1CPropVariant@NCOM@NWindows@@QAE@XZ		; NWindows::NCOM::CPropVariant::~CPropVariant
PUBLIC	??0CPropVariant@NCOM@NWindows@@QAE@XZ		; NWindows::NCOM::CPropVariant::CPropVariant
PUBLIC	?GetItem@CUInt64DefVector@N7z@NArchive@@QBE_NIAA_K@Z ; NArchive::N7z::CUInt64DefVector::GetItem
PUBLIC	?IsItemAnti@CDatabase@N7z@NArchive@@QBE_NI@Z	; NArchive::N7z::CDatabase::IsItemAnti
PUBLIC	??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEABUCFileItem@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CFileItem>::operator[]
PUBLIC	??1CUpdateItem@N7z@NArchive@@QAE@XZ		; NArchive::N7z::CUpdateItem::~CUpdateItem
PUBLIC	?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CFileItem>::Size
PUBLIC	?IntToBool@@YG_NH@Z				; IntToBool
PUBLIC	??0CUpdateItem@N7z@NArchive@@QAE@XZ		; NArchive::N7z::CUpdateItem::CUpdateItem
PUBLIC	??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CUpdateItem>::~CObjectVector<NArchive::N7z::CUpdateItem>
PUBLIC	?IsEmpty@?$CRecordVector@_N@@QBE_NXZ		; CRecordVector<bool>::IsEmpty
PUBLIC	??0?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CUpdateItem>::CObjectVector<NArchive::N7z::CUpdateItem>
PUBLIC	??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *
PUBLIC	?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z ; NArchive::N7z::CHandler::UpdateItems
EXTRN	?WriteDatabase@COutArchive@N7z@NArchive@@QAEJABUCArchiveDatabaseOut@23@PBUCCompressionMethodMode@23@ABUCHeaderOptions@23@@Z:PROC ; NArchive::N7z::COutArchive::WriteDatabase
EXTRN	?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z:PROC ; NArchive::N7z::Update
EXTRN	_IID_ICryptoGetTextPassword:BYTE
EXTRN	??4UString@@QAEAAV0@PB_W@Z:PROC			; UString::operator=
EXTRN	_IID_ICryptoGetTextPassword2:BYTE
EXTRN	??4UString@@QAEAAV0@ABV0@@Z:PROC		; UString::operator=
EXTRN	?MakeLegalName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z:PROC ; NArchive::NItemName::MakeLegalName
EXTRN	??0UString@@QAE@PB_W@Z:PROC			; UString::UString
EXTRN	?GetPath@CDatabase@N7z@NArchive@@QBEXIAAVUString@@@Z:PROC ; NArchive::N7z::CDatabase::GetPath
xdata$x	SEGMENT
__catchsym$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$20 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$0
__tryblocktable$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z DD 00H
	DD	012H
	DD	013H
	DD	01H
	DD	FLAT:__catchsym$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$20
__ehfuncinfo$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z DD 019930522H
	DD	014H
	DD	FLAT:__unwindtable$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$4
	DD	03H
	DD	FLAT:__unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$5
	DD	04H
	DD	FLAT:__unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$6
	DD	04H
	DD	FLAT:__unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$7
	DD	06H
	DD	FLAT:__unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$8
	DD	07H
	DD	FLAT:__unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$9
	DD	04H
	DD	FLAT:__unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$10
	DD	04H
	DD	FLAT:__unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$11
	DD	04H
	DD	FLAT:__unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$12
	DD	02H
	DD	FLAT:__unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$13
	DD	0cH
	DD	FLAT:__unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$14
	DD	0dH
	DD	FLAT:__unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$15
	DD	0eH
	DD	FLAT:__unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$16
	DD	0eH
	DD	FLAT:__unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$17
	DD	010H
	DD	FLAT:__unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$18
	DD	011H
	DD	FLAT:__unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$19
	DD	0ffffffffH
	DD	00H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv1105 = -1280						; size = 4
tv1104 = -1276						; size = 4
tv1103 = -1272						; size = 4
tv1102 = -1268						; size = 4
tv1101 = -1264						; size = 4
tv1100 = -1260						; size = 4
tv1099 = -1256						; size = 4
tv1098 = -1252						; size = 4
tv1097 = -1248						; size = 4
tv808 = -1244						; size = 4
tv796 = -1240						; size = 4
tv1096 = -1236						; size = 4
tv1095 = -1232						; size = 4
tv1094 = -1228						; size = 4
tv1093 = -1221						; size = 1
tv1092 = -1220						; size = 4
tv1091 = -1216						; size = 4
tv719 = -1212						; size = 4
tv1090 = -1208						; size = 4
tv1089 = -1204						; size = 4
tv1088 = -1200						; size = 4
tv1087 = -1196						; size = 4
tv1086 = -1192						; size = 4
tv1085 = -1188						; size = 4
tv1084 = -1184						; size = 4
tv1083 = -1180						; size = 4
tv1082 = -1176						; size = 4
tv1081 = -1172						; size = 4
tv1080 = -1168						; size = 4
tv1079 = -1164						; size = 4
tv1078 = -1160						; size = 4
tv1077 = -1156						; size = 4
tv1076 = -1152						; size = 4
tv973 = -1148						; size = 4
tv1075 = -1144						; size = 4
tv1074 = -1140						; size = 4
tv1073 = -1136						; size = 4
tv1072 = -1132						; size = 4
tv1071 = -1128						; size = 4
tv1070 = -1124						; size = 4
tv1069 = -1120						; size = 4
tv1068 = -1116						; size = 4
tv1067 = -1112						; size = 4
tv1066 = -1108						; size = 1
tv1065 = -1107						; size = 1
tv1064 = -1106						; size = 1
tv1063 = -1105						; size = 1
tv1062 = -1104						; size = 4
tv1061 = -1100						; size = 4
tv1060 = -1096						; size = 4
tv1059 = -1090						; size = 1
tv1058 = -1089						; size = 1
tv1057 = -1088						; size = 4
tv1056 = -1084						; size = 4
tv1055 = -1080						; size = 4
tv1054 = -1075						; size = 1
tv1053 = -1074						; size = 1
tv1052 = -1073						; size = 1
tv173 = -1072						; size = 4
tv144 = -1068						; size = 4
tv92 = -1064						; size = 4
tv1051 = -1060						; size = 4
tv1050 = -1056						; size = 4
$T76173 = -1052						; size = 4
$T76172 = -1048						; size = 4
$T76171 = -1044						; size = 4
$T76166 = -1040						; size = 4
$T76165 = -1036						; size = 4
$T76164 = -1032						; size = 4
$T76163 = -1028						; size = 4
$T76162 = -1024						; size = 4
$T76161 = -1020						; size = 4
$T76160 = -1016						; size = 4
$T76159 = -1012						; size = 4
$T76158 = -1008						; size = 4
$T76157 = -1004						; size = 4
$T76156 = -1000						; size = 12
$T76155 = -988						; size = 12
$T76154 = -976						; size = 4
$T76153 = -972						; size = 4
$T76152 = -968						; size = 4
$T76151 = -964						; size = 4
$T76150 = -960						; size = 4
$T76149 = -956						; size = 4
$T76148 = -952						; size = 4
$T76147 = -948						; size = 4
$T76146 = -944						; size = 4
$T76145 = -940						; size = 4
___result__$74419 = -936				; size = 4
_getPassword$74417 = -928				; size = 4
_newDatabase$74379 = -916				; size = 228
_archive$74378 = -680					; size = 88
_options$74377 = -584					; size = 48
_level$74376 = -532					; size = 4
_encryptHeaders$74369 = -526				; size = 1
_compressMainHeader$74368 = -525			; size = 1
___result__$74364 = -524				; size = 4
_passwordIsDefined$74363 = -516				; size = 4
_password$74362 = -504					; size = 4
_getPassword2$74359 = -492				; size = 4
___result__$74319 = -484				; size = 4
___result__$74316 = -480				; size = 4
_res$74315 = -476					; size = 4
_headerMethod$74314 = -468				; size = 48
_methodMode$74313 = -412				; size = 48
___result__$74303 = -360				; size = 4
_prop$74302 = -352					; size = 16
___result__$74288 = -332				; size = 4
_prop$74287 = -324					; size = 16
___result__$74277 = -304				; size = 4
_prop$74276 = -296					; size = 16
___result__$74265 = -276				; size = 4
_prop$74264 = -268					; size = 16
___result__$74261 = -248				; size = 4
___result__$74257 = -244				; size = 4
___result__$74253 = -240				; size = 4
___result__$74243 = -236				; size = 4
_prop$74242 = -228					; size = 16
_folderStatusIsDefined$74241 = -205			; size = 1
_fi$74237 = -204					; size = 4
_name$74230 = -196					; size = 12
_ui$74229 = -176					; size = 64
___result__$74226 = -108				; size = 4
_indexInArchive$74222 = -100				; size = 4
_newProps$74221 = -88					; size = 4
_newData$74220 = -76					; size = 4
_i$74216 = -68						; size = 4
_s$74215 = -60						; size = 12
_need_MTime$74210 = -43					; size = 1
_need_ATime$74209 = -42					; size = 1
_need_CTime$74208 = -41					; size = 1
_updateItems$74207 = -36				; size = 12
_db$74140 = -20						; size = 4
__$EHRec$ = -16						; size = 16
_this$ = 8						; size = 4
_outStream$ = 12					; size = 4
_numItems$ = 16						; size = 4
_updateCallback$ = 20					; size = 4
?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z PROC ; NArchive::N7z::CHandler::UpdateItems
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zhandlerout.cpp
; Line 247
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 1264				; 000004f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1280]
	mov	ecx, 316				; 0000013cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
; Line 248
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 250
	mov	DWORD PTR _db$74140[ebp], 0
; Line 261
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 124				; 0000007cH
	call	??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *
	mov	DWORD PTR tv1050[ebp], eax
	cmp	DWORD PTR tv1050[ebp], 0
	je	SHORT $LN61@UpdateItem
; Line 262
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 132				; 00000084H
	mov	DWORD PTR _db$74140[ebp], eax
$LN61@UpdateItem:
; Line 280
	lea	ecx, DWORD PTR _updateItems$74207[ebp]
	call	??0?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CUpdateItem>::CObjectVector<NArchive::N7z::CUpdateItem>
	mov	DWORD PTR tv1051[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 1
; Line 282
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+114]
	test	edx, edx
	je	SHORT $LN65@UpdateItem
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+113]
	test	ecx, ecx
	je	SHORT $LN65@UpdateItem
	mov	DWORD PTR tv92[ebp], 1
	jmp	SHORT $LN66@UpdateItem
$LN65@UpdateItem:
	mov	DWORD PTR tv92[ebp], 0
$LN66@UpdateItem:
	mov	dl, BYTE PTR tv92[ebp]
	mov	BYTE PTR _need_CTime$74208[ebp], dl
; Line 283
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+116]
	test	ecx, ecx
	je	SHORT $LN67@UpdateItem
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+115]
	test	eax, eax
	je	SHORT $LN67@UpdateItem
	mov	DWORD PTR tv144[ebp], 1
	jmp	SHORT $LN68@UpdateItem
$LN67@UpdateItem:
	mov	DWORD PTR tv144[ebp], 0
$LN68@UpdateItem:
	mov	cl, BYTE PTR tv144[ebp]
	mov	BYTE PTR _need_ATime$74209[ebp], cl
; Line 284
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+118]
	test	eax, eax
	je	SHORT $LN69@UpdateItem
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+117]
	test	edx, edx
	jne	SHORT $LN70@UpdateItem
$LN69@UpdateItem:
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+118]
	test	ecx, ecx
	je	SHORT $LN70@UpdateItem
	mov	DWORD PTR tv173[ebp], 0
	jmp	SHORT $LN71@UpdateItem
$LN70@UpdateItem:
	mov	DWORD PTR tv173[ebp], 1
$LN71@UpdateItem:
	mov	dl, BYTE PTR tv173[ebp]
	mov	BYTE PTR _need_MTime$74210[ebp], dl
; Line 285
	cmp	DWORD PTR _db$74140[ebp], 0
	je	$LN60@UpdateItem
; Line 287
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+114]
	test	ecx, ecx
	jne	SHORT $LN59@UpdateItem
	mov	ecx, DWORD PTR _db$74140[ebp]
	add	ecx, 100				; 00000064H
	call	?IsEmpty@?$CRecordVector@_N@@QBE_NXZ	; CRecordVector<bool>::IsEmpty
	mov	BYTE PTR tv1052[ebp], al
	movzx	edx, BYTE PTR tv1052[ebp]
	neg	edx
	sbb	edx, edx
	add	edx, 1
	mov	BYTE PTR _need_CTime$74208[ebp], dl
$LN59@UpdateItem:
; Line 288
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+116]
	test	ecx, ecx
	jne	SHORT $LN58@UpdateItem
	mov	ecx, DWORD PTR _db$74140[ebp]
	add	ecx, 124				; 0000007cH
	call	?IsEmpty@?$CRecordVector@_N@@QBE_NXZ	; CRecordVector<bool>::IsEmpty
	mov	BYTE PTR tv1053[ebp], al
	movzx	edx, BYTE PTR tv1053[ebp]
	neg	edx
	sbb	edx, edx
	add	edx, 1
	mov	BYTE PTR _need_ATime$74209[ebp], dl
$LN58@UpdateItem:
; Line 289
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+118]
	test	ecx, ecx
	jne	SHORT $LN60@UpdateItem
	mov	ecx, DWORD PTR _db$74140[ebp]
	add	ecx, 148				; 00000094H
	call	?IsEmpty@?$CRecordVector@_N@@QBE_NXZ	; CRecordVector<bool>::IsEmpty
	mov	BYTE PTR tv1054[ebp], al
	movzx	edx, BYTE PTR tv1054[ebp]
	neg	edx
	sbb	edx, edx
	add	edx, 1
	mov	BYTE PTR _need_MTime$74210[ebp], dl
$LN60@UpdateItem:
; Line 292
	lea	ecx, DWORD PTR _s$74215[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR tv1055[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 2
; Line 294
	mov	DWORD PTR _i$74216[ebp], 0
	jmp	SHORT $LN56@UpdateItem
$LN55@UpdateItem:
	mov	eax, DWORD PTR _i$74216[ebp]
	add	eax, 1
	mov	DWORD PTR _i$74216[ebp], eax
$LN56@UpdateItem:
	mov	ecx, DWORD PTR _i$74216[ebp]
	cmp	ecx, DWORD PTR _numItems$[ebp]
	jae	$LN54@UpdateItem
; Line 298
	cmp	DWORD PTR _updateCallback$[ebp], 0
	jne	SHORT $LN53@UpdateItem
; Line 299
	mov	DWORD PTR $T76145[ebp], -2147467259	; 80004005H
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _s$74215[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _updateItems$74207[ebp]
	call	??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CUpdateItem>::~CObjectVector<NArchive::N7z::CUpdateItem>
	mov	eax, DWORD PTR $T76145[ebp]
	jmp	$LN63@UpdateItem
$LN53@UpdateItem:
; Line 300
	mov	esi, esp
	lea	edx, DWORD PTR _indexInArchive$74222[ebp]
	push	edx
	lea	eax, DWORD PTR _newProps$74221[ebp]
	push	eax
	lea	ecx, DWORD PTR _newData$74220[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$74216[ebp]
	push	edx
	mov	eax, DWORD PTR _updateCallback$[ebp]
	push	eax
	mov	ecx, DWORD PTR _updateCallback$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv1056[ebp], eax
	mov	ecx, DWORD PTR tv1056[ebp]
	mov	DWORD PTR ___result__$74226[ebp], ecx
	cmp	DWORD PTR ___result__$74226[ebp], 0
	je	SHORT $LN52@UpdateItem
	mov	edx, DWORD PTR ___result__$74226[ebp]
	mov	DWORD PTR $T76146[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _s$74215[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _updateItems$74207[ebp]
	call	??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CUpdateItem>::~CObjectVector<NArchive::N7z::CUpdateItem>
	mov	eax, DWORD PTR $T76146[ebp]
	jmp	$LN63@UpdateItem
$LN52@UpdateItem:
; Line 301
	lea	ecx, DWORD PTR _ui$74229[ebp]
	call	??0CUpdateItem@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CUpdateItem::CUpdateItem
	mov	DWORD PTR tv1057[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 3
; Line 302
	mov	eax, DWORD PTR _newProps$74221[ebp]
	push	eax
	call	?IntToBool@@YG_NH@Z			; IntToBool
	mov	BYTE PTR tv1058[ebp], al
	mov	cl, BYTE PTR tv1058[ebp]
	mov	BYTE PTR _ui$74229[ebp+57], cl
; Line 303
	mov	edx, DWORD PTR _newData$74220[ebp]
	push	edx
	call	?IntToBool@@YG_NH@Z			; IntToBool
	mov	BYTE PTR tv1059[ebp], al
	mov	al, BYTE PTR tv1059[ebp]
	mov	BYTE PTR _ui$74229[ebp+56], al
; Line 304
	mov	ecx, DWORD PTR _indexInArchive$74222[ebp]
	mov	DWORD PTR _ui$74229[ebp], ecx
; Line 305
	mov	edx, DWORD PTR _i$74216[ebp]
	mov	DWORD PTR _ui$74229[ebp+4], edx
; Line 306
	mov	BYTE PTR _ui$74229[ebp+58], 0
; Line 307
	mov	DWORD PTR _ui$74229[ebp+32], 0
	mov	DWORD PTR _ui$74229[ebp+36], 0
; Line 309
	lea	ecx, DWORD PTR _name$74230[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR tv1060[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 4
; Line 311
	cmp	DWORD PTR _ui$74229[ebp], -1
	je	$LN51@UpdateItem
; Line 313
	cmp	DWORD PTR _db$74140[ebp], 0
	je	SHORT $LN49@UpdateItem
	mov	ecx, DWORD PTR _db$74140[ebp]
	add	ecx, 88					; 00000058H
	call	?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CFileItem>::Size
	mov	DWORD PTR tv1061[ebp], eax
	mov	eax, DWORD PTR _ui$74229[ebp]
	cmp	eax, DWORD PTR tv1061[ebp]
	jb	SHORT $LN50@UpdateItem
$LN49@UpdateItem:
; Line 314
	mov	DWORD PTR $T76147[ebp], -2147024809	; 80070057H
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _name$74230[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _ui$74229[ebp]
	call	??1CUpdateItem@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _s$74215[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _updateItems$74207[ebp]
	call	??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CUpdateItem>::~CObjectVector<NArchive::N7z::CUpdateItem>
	mov	eax, DWORD PTR $T76147[ebp]
	jmp	$LN63@UpdateItem
$LN50@UpdateItem:
; Line 315
	mov	ecx, DWORD PTR _ui$74229[ebp]
	push	ecx
	mov	ecx, DWORD PTR _db$74140[ebp]
	add	ecx, 88					; 00000058H
	call	??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEABUCFileItem@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CFileItem>::operator[]
	mov	DWORD PTR tv1062[ebp], eax
	mov	edx, DWORD PTR tv1062[ebp]
	mov	DWORD PTR _fi$74237[ebp], edx
; Line 316
	movzx	eax, BYTE PTR _ui$74229[ebp+57]
	test	eax, eax
	jne	SHORT $LN48@UpdateItem
; Line 318
	lea	ecx, DWORD PTR _name$74230[ebp]
	push	ecx
	mov	edx, DWORD PTR _ui$74229[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 132				; 00000084H
	call	?GetPath@CDatabase@N7z@NArchive@@QBEXIAAVUString@@@Z ; NArchive::N7z::CDatabase::GetPath
$LN48@UpdateItem:
; Line 320
	mov	eax, DWORD PTR _fi$74237[ebp]
	mov	cl, BYTE PTR [eax+17]
	mov	BYTE PTR _ui$74229[ebp+59], cl
; Line 321
	mov	edx, DWORD PTR _fi$74237[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _ui$74229[ebp+32], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _ui$74229[ebp+36], ecx
; Line 323
	mov	edx, DWORD PTR _ui$74229[ebp]
	push	edx
	mov	ecx, DWORD PTR _db$74140[ebp]
	call	?IsItemAnti@CDatabase@N7z@NArchive@@QBE_NI@Z ; NArchive::N7z::CDatabase::IsItemAnti
	mov	BYTE PTR tv1063[ebp], al
	mov	al, BYTE PTR tv1063[ebp]
	mov	BYTE PTR _ui$74229[ebp+58], al
; Line 325
	movzx	ecx, BYTE PTR _ui$74229[ebp+57]
	test	ecx, ecx
	jne	SHORT $LN51@UpdateItem
; Line 327
	lea	edx, DWORD PTR _ui$74229[ebp+8]
	push	edx
	mov	eax, DWORD PTR _ui$74229[ebp]
	push	eax
	mov	ecx, DWORD PTR _db$74140[ebp]
	add	ecx, 100				; 00000064H
	call	?GetItem@CUInt64DefVector@N7z@NArchive@@QBE_NIAA_K@Z ; NArchive::N7z::CUInt64DefVector::GetItem
	mov	BYTE PTR tv1064[ebp], al
	mov	cl, BYTE PTR tv1064[ebp]
	mov	BYTE PTR _ui$74229[ebp+61], cl
; Line 328
	lea	edx, DWORD PTR _ui$74229[ebp+16]
	push	edx
	mov	eax, DWORD PTR _ui$74229[ebp]
	push	eax
	mov	ecx, DWORD PTR _db$74140[ebp]
	add	ecx, 124				; 0000007cH
	call	?GetItem@CUInt64DefVector@N7z@NArchive@@QBE_NIAA_K@Z ; NArchive::N7z::CUInt64DefVector::GetItem
	mov	BYTE PTR tv1065[ebp], al
	mov	cl, BYTE PTR tv1065[ebp]
	mov	BYTE PTR _ui$74229[ebp+62], cl
; Line 329
	lea	edx, DWORD PTR _ui$74229[ebp+24]
	push	edx
	mov	eax, DWORD PTR _ui$74229[ebp]
	push	eax
	mov	ecx, DWORD PTR _db$74140[ebp]
	add	ecx, 148				; 00000094H
	call	?GetItem@CUInt64DefVector@N7z@NArchive@@QBE_NIAA_K@Z ; NArchive::N7z::CUInt64DefVector::GetItem
	mov	BYTE PTR tv1066[ebp], al
	mov	cl, BYTE PTR tv1066[ebp]
	mov	BYTE PTR _ui$74229[ebp+63], cl
$LN51@UpdateItem:
; Line 333
	movzx	edx, BYTE PTR _ui$74229[ebp+57]
	test	edx, edx
	je	$LN17@UpdateItem
; Line 337
	lea	ecx, DWORD PTR _prop$74242[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
	mov	DWORD PTR tv1067[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 5
; Line 338
	mov	esi, esp
	lea	eax, DWORD PTR _prop$74242[ebp]
	push	eax
	push	9
	mov	ecx, DWORD PTR _i$74216[ebp]
	push	ecx
	mov	edx, DWORD PTR _updateCallback$[ebp]
	push	edx
	mov	eax, DWORD PTR _updateCallback$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv1068[ebp], eax
	mov	eax, DWORD PTR tv1068[ebp]
	mov	DWORD PTR ___result__$74243[ebp], eax
	cmp	DWORD PTR ___result__$74243[ebp], 0
	je	SHORT $LN45@UpdateItem
	mov	ecx, DWORD PTR ___result__$74243[ebp]
	mov	DWORD PTR $T76148[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _prop$74242[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _name$74230[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _ui$74229[ebp]
	call	??1CUpdateItem@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _s$74215[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _updateItems$74207[ebp]
	call	??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CUpdateItem>::~CObjectVector<NArchive::N7z::CUpdateItem>
	mov	eax, DWORD PTR $T76148[ebp]
	jmp	$LN63@UpdateItem
$LN45@UpdateItem:
; Line 339
	movzx	edx, WORD PTR _prop$74242[ebp]
	test	edx, edx
	jne	SHORT $LN44@UpdateItem
; Line 340
	mov	BYTE PTR _ui$74229[ebp+60], 0
	jmp	SHORT $LN43@UpdateItem
$LN44@UpdateItem:
; Line 341
	movzx	eax, WORD PTR _prop$74242[ebp]
	cmp	eax, 19					; 00000013H
	je	SHORT $LN42@UpdateItem
; Line 342
	mov	DWORD PTR $T76149[ebp], -2147024809	; 80070057H
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _prop$74242[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _name$74230[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _ui$74229[ebp]
	call	??1CUpdateItem@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _s$74215[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _updateItems$74207[ebp]
	call	??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CUpdateItem>::~CObjectVector<NArchive::N7z::CUpdateItem>
	mov	eax, DWORD PTR $T76149[ebp]
	jmp	$LN63@UpdateItem
; Line 343
	jmp	SHORT $LN43@UpdateItem
$LN42@UpdateItem:
; Line 345
	mov	ecx, DWORD PTR _prop$74242[ebp+8]
	mov	DWORD PTR _ui$74229[ebp+52], ecx
; Line 346
	mov	BYTE PTR _ui$74229[ebp+60], 1
$LN43@UpdateItem:
; Line 348
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _prop$74242[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
; Line 351
	movzx	edx, BYTE PTR _need_CTime$74208[ebp]
	test	edx, edx
	je	$LN40@UpdateItem
	lea	eax, DWORD PTR _ui$74229[ebp+61]
	push	eax
	lea	ecx, DWORD PTR _ui$74229[ebp+8]
	push	ecx
	push	10					; 0000000aH
	mov	edx, DWORD PTR _i$74216[ebp]
	push	edx
	mov	eax, DWORD PTR _updateCallback$[ebp]
	push	eax
	call	?GetTime@N7z@NArchive@@YGJPAUIArchiveUpdateCallback@@HKAA_KAA_N@Z ; NArchive::N7z::GetTime
	mov	DWORD PTR tv1069[ebp], eax
	mov	ecx, DWORD PTR tv1069[ebp]
	mov	DWORD PTR ___result__$74253[ebp], ecx
	cmp	DWORD PTR ___result__$74253[ebp], 0
	je	SHORT $LN40@UpdateItem
	mov	edx, DWORD PTR ___result__$74253[ebp]
	mov	DWORD PTR $T76150[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _name$74230[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _ui$74229[ebp]
	call	??1CUpdateItem@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _s$74215[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _updateItems$74207[ebp]
	call	??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CUpdateItem>::~CObjectVector<NArchive::N7z::CUpdateItem>
	mov	eax, DWORD PTR $T76150[ebp]
	jmp	$LN63@UpdateItem
$LN40@UpdateItem:
; Line 352
	movzx	eax, BYTE PTR _need_ATime$74209[ebp]
	test	eax, eax
	je	$LN38@UpdateItem
	lea	ecx, DWORD PTR _ui$74229[ebp+62]
	push	ecx
	lea	edx, DWORD PTR _ui$74229[ebp+16]
	push	edx
	push	11					; 0000000bH
	mov	eax, DWORD PTR _i$74216[ebp]
	push	eax
	mov	ecx, DWORD PTR _updateCallback$[ebp]
	push	ecx
	call	?GetTime@N7z@NArchive@@YGJPAUIArchiveUpdateCallback@@HKAA_KAA_N@Z ; NArchive::N7z::GetTime
	mov	DWORD PTR tv1070[ebp], eax
	mov	edx, DWORD PTR tv1070[ebp]
	mov	DWORD PTR ___result__$74257[ebp], edx
	cmp	DWORD PTR ___result__$74257[ebp], 0
	je	SHORT $LN38@UpdateItem
	mov	eax, DWORD PTR ___result__$74257[ebp]
	mov	DWORD PTR $T76151[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _name$74230[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _ui$74229[ebp]
	call	??1CUpdateItem@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _s$74215[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _updateItems$74207[ebp]
	call	??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CUpdateItem>::~CObjectVector<NArchive::N7z::CUpdateItem>
	mov	eax, DWORD PTR $T76151[ebp]
	jmp	$LN63@UpdateItem
$LN38@UpdateItem:
; Line 353
	movzx	ecx, BYTE PTR _need_MTime$74210[ebp]
	test	ecx, ecx
	je	$LN36@UpdateItem
	lea	edx, DWORD PTR _ui$74229[ebp+63]
	push	edx
	lea	eax, DWORD PTR _ui$74229[ebp+24]
	push	eax
	push	12					; 0000000cH
	mov	ecx, DWORD PTR _i$74216[ebp]
	push	ecx
	mov	edx, DWORD PTR _updateCallback$[ebp]
	push	edx
	call	?GetTime@N7z@NArchive@@YGJPAUIArchiveUpdateCallback@@HKAA_KAA_N@Z ; NArchive::N7z::GetTime
	mov	DWORD PTR tv1071[ebp], eax
	mov	eax, DWORD PTR tv1071[ebp]
	mov	DWORD PTR ___result__$74261[ebp], eax
	cmp	DWORD PTR ___result__$74261[ebp], 0
	je	SHORT $LN36@UpdateItem
	mov	ecx, DWORD PTR ___result__$74261[ebp]
	mov	DWORD PTR $T76152[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _name$74230[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _ui$74229[ebp]
	call	??1CUpdateItem@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _s$74215[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _updateItems$74207[ebp]
	call	??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CUpdateItem>::~CObjectVector<NArchive::N7z::CUpdateItem>
	mov	eax, DWORD PTR $T76152[ebp]
	jmp	$LN63@UpdateItem
$LN36@UpdateItem:
; Line 370
	lea	ecx, DWORD PTR _prop$74264[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
	mov	DWORD PTR tv1072[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 6
; Line 371
	mov	esi, esp
	lea	edx, DWORD PTR _prop$74264[ebp]
	push	edx
	push	3
	mov	eax, DWORD PTR _i$74216[ebp]
	push	eax
	mov	ecx, DWORD PTR _updateCallback$[ebp]
	push	ecx
	mov	edx, DWORD PTR _updateCallback$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv1073[ebp], eax
	mov	edx, DWORD PTR tv1073[ebp]
	mov	DWORD PTR ___result__$74265[ebp], edx
	cmp	DWORD PTR ___result__$74265[ebp], 0
	je	SHORT $LN34@UpdateItem
	mov	eax, DWORD PTR ___result__$74265[ebp]
	mov	DWORD PTR $T76153[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _prop$74264[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _name$74230[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _ui$74229[ebp]
	call	??1CUpdateItem@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _s$74215[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _updateItems$74207[ebp]
	call	??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CUpdateItem>::~CObjectVector<NArchive::N7z::CUpdateItem>
	mov	eax, DWORD PTR $T76153[ebp]
	jmp	$LN63@UpdateItem
$LN34@UpdateItem:
; Line 372
	movzx	ecx, WORD PTR _prop$74264[ebp]
	test	ecx, ecx
	jne	SHORT $LN33@UpdateItem
	jmp	$LN32@UpdateItem
$LN33@UpdateItem:
; Line 375
	movzx	edx, WORD PTR _prop$74264[ebp]
	cmp	edx, 8
	je	SHORT $LN31@UpdateItem
; Line 376
	mov	DWORD PTR $T76154[ebp], -2147024809	; 80070057H
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _prop$74264[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _name$74230[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _ui$74229[ebp]
	call	??1CUpdateItem@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _s$74215[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _updateItems$74207[ebp]
	call	??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CUpdateItem>::~CObjectVector<NArchive::N7z::CUpdateItem>
	mov	eax, DWORD PTR $T76154[ebp]
	jmp	$LN63@UpdateItem
; Line 377
	jmp	SHORT $LN32@UpdateItem
$LN31@UpdateItem:
; Line 379
	mov	eax, DWORD PTR _prop$74264[ebp+8]
	push	eax
	lea	ecx, DWORD PTR $T76155[ebp]
	call	??0UString@@QAE@PB_W@Z			; UString::UString
	mov	DWORD PTR tv1074[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 7
	lea	ecx, DWORD PTR $T76155[ebp]
	push	ecx
	lea	edx, DWORD PTR $T76156[ebp]
	push	edx
	call	?MakeLegalName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z ; NArchive::NItemName::MakeLegalName
	mov	DWORD PTR tv1075[ebp], eax
	mov	eax, DWORD PTR tv1075[ebp]
	mov	DWORD PTR tv973[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 8
	mov	ecx, DWORD PTR tv973[ebp]
	push	ecx
	lea	ecx, DWORD PTR _name$74230[ebp]
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
	mov	BYTE PTR __$EHRec$[ebp+12], 7
	lea	ecx, DWORD PTR $T76156[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 6
	lea	ecx, DWORD PTR $T76155[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
$LN32@UpdateItem:
; Line 381
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _prop$74264[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
; Line 383
	lea	ecx, DWORD PTR _prop$74276[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
	mov	DWORD PTR tv1076[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 9
; Line 384
	mov	esi, esp
	lea	edx, DWORD PTR _prop$74276[ebp]
	push	edx
	push	6
	mov	eax, DWORD PTR _i$74216[ebp]
	push	eax
	mov	ecx, DWORD PTR _updateCallback$[ebp]
	push	ecx
	mov	edx, DWORD PTR _updateCallback$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv1077[ebp], eax
	mov	edx, DWORD PTR tv1077[ebp]
	mov	DWORD PTR ___result__$74277[ebp], edx
	cmp	DWORD PTR ___result__$74277[ebp], 0
	je	SHORT $LN29@UpdateItem
	mov	eax, DWORD PTR ___result__$74277[ebp]
	mov	DWORD PTR $T76157[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _prop$74276[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _name$74230[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _ui$74229[ebp]
	call	??1CUpdateItem@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _s$74215[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _updateItems$74207[ebp]
	call	??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CUpdateItem>::~CObjectVector<NArchive::N7z::CUpdateItem>
	mov	eax, DWORD PTR $T76157[ebp]
	jmp	$LN63@UpdateItem
$LN29@UpdateItem:
; Line 385
	movzx	ecx, WORD PTR _prop$74276[ebp]
	test	ecx, ecx
	jne	SHORT $LN28@UpdateItem
; Line 386
	mov	BYTE PTR _folderStatusIsDefined$74241[ebp], 0
	jmp	SHORT $LN27@UpdateItem
$LN28@UpdateItem:
; Line 387
	movzx	edx, WORD PTR _prop$74276[ebp]
	cmp	edx, 11					; 0000000bH
	je	SHORT $LN26@UpdateItem
; Line 388
	mov	DWORD PTR $T76158[ebp], -2147024809	; 80070057H
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _prop$74276[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _name$74230[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _ui$74229[ebp]
	call	??1CUpdateItem@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _s$74215[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _updateItems$74207[ebp]
	call	??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CUpdateItem>::~CObjectVector<NArchive::N7z::CUpdateItem>
	mov	eax, DWORD PTR $T76158[ebp]
	jmp	$LN63@UpdateItem
; Line 389
	jmp	SHORT $LN27@UpdateItem
$LN26@UpdateItem:
; Line 391
	movsx	eax, WORD PTR _prop$74276[ebp+8]
	neg	eax
	sbb	eax, eax
	neg	eax
	mov	BYTE PTR _ui$74229[ebp+59], al
; Line 392
	mov	BYTE PTR _folderStatusIsDefined$74241[ebp], 1
$LN27@UpdateItem:
; Line 394
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _prop$74276[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
; Line 397
	lea	ecx, DWORD PTR _prop$74287[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
	mov	DWORD PTR tv1078[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 10		; 0000000aH
; Line 398
	mov	esi, esp
	lea	ecx, DWORD PTR _prop$74287[ebp]
	push	ecx
	push	21					; 00000015H
	mov	edx, DWORD PTR _i$74216[ebp]
	push	edx
	mov	eax, DWORD PTR _updateCallback$[ebp]
	push	eax
	mov	ecx, DWORD PTR _updateCallback$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv1079[ebp], eax
	mov	ecx, DWORD PTR tv1079[ebp]
	mov	DWORD PTR ___result__$74288[ebp], ecx
	cmp	DWORD PTR ___result__$74288[ebp], 0
	je	SHORT $LN24@UpdateItem
	mov	edx, DWORD PTR ___result__$74288[ebp]
	mov	DWORD PTR $T76159[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _prop$74287[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _name$74230[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _ui$74229[ebp]
	call	??1CUpdateItem@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _s$74215[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _updateItems$74207[ebp]
	call	??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CUpdateItem>::~CObjectVector<NArchive::N7z::CUpdateItem>
	mov	eax, DWORD PTR $T76159[ebp]
	jmp	$LN63@UpdateItem
$LN24@UpdateItem:
; Line 399
	movzx	eax, WORD PTR _prop$74287[ebp]
	test	eax, eax
	jne	SHORT $LN23@UpdateItem
; Line 400
	mov	BYTE PTR _ui$74229[ebp+58], 0
	jmp	SHORT $LN22@UpdateItem
$LN23@UpdateItem:
; Line 401
	movzx	ecx, WORD PTR _prop$74287[ebp]
	cmp	ecx, 11					; 0000000bH
	je	SHORT $LN21@UpdateItem
; Line 402
	mov	DWORD PTR $T76160[ebp], -2147024809	; 80070057H
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _prop$74287[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _name$74230[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _ui$74229[ebp]
	call	??1CUpdateItem@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _s$74215[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _updateItems$74207[ebp]
	call	??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CUpdateItem>::~CObjectVector<NArchive::N7z::CUpdateItem>
	mov	eax, DWORD PTR $T76160[ebp]
	jmp	$LN63@UpdateItem
; Line 403
	jmp	SHORT $LN22@UpdateItem
$LN21@UpdateItem:
; Line 404
	movsx	edx, WORD PTR _prop$74287[ebp+8]
	neg	edx
	sbb	edx, edx
	neg	edx
	mov	BYTE PTR _ui$74229[ebp+58], dl
$LN22@UpdateItem:
; Line 405
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _prop$74287[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
; Line 420
	movzx	eax, BYTE PTR _ui$74229[ebp+58]
	test	eax, eax
	je	SHORT $LN19@UpdateItem
; Line 422
	mov	BYTE PTR _ui$74229[ebp+60], 0
; Line 424
	mov	BYTE PTR _ui$74229[ebp+61], 0
; Line 425
	mov	BYTE PTR _ui$74229[ebp+62], 0
; Line 426
	mov	BYTE PTR _ui$74229[ebp+63], 0
; Line 428
	mov	DWORD PTR _ui$74229[ebp+32], 0
	mov	DWORD PTR _ui$74229[ebp+36], 0
$LN19@UpdateItem:
; Line 431
	movzx	ecx, BYTE PTR _folderStatusIsDefined$74241[ebp]
	test	ecx, ecx
	jne	SHORT $LN17@UpdateItem
	movzx	edx, BYTE PTR _ui$74229[ebp+60]
	test	edx, edx
	je	SHORT $LN17@UpdateItem
; Line 432
	lea	ecx, DWORD PTR _ui$74229[ebp]
	call	?SetDirStatusFromAttrib@CUpdateItem@N7z@NArchive@@QAEXXZ ; NArchive::N7z::CUpdateItem::SetDirStatusFromAttrib
$LN17@UpdateItem:
; Line 507
	lea	eax, DWORD PTR _name$74230[ebp]
	push	eax
	lea	ecx, DWORD PTR _ui$74229[ebp+40]
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
; Line 509
	movzx	ecx, BYTE PTR _ui$74229[ebp+56]
	test	ecx, ecx
	je	$LN16@UpdateItem
; Line 511
	lea	ecx, DWORD PTR _prop$74302[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
	mov	DWORD PTR tv1080[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 11		; 0000000bH
; Line 512
	mov	esi, esp
	lea	edx, DWORD PTR _prop$74302[ebp]
	push	edx
	push	7
	mov	eax, DWORD PTR _i$74216[ebp]
	push	eax
	mov	ecx, DWORD PTR _updateCallback$[ebp]
	push	ecx
	mov	edx, DWORD PTR _updateCallback$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv1081[ebp], eax
	mov	edx, DWORD PTR tv1081[ebp]
	mov	DWORD PTR ___result__$74303[ebp], edx
	cmp	DWORD PTR ___result__$74303[ebp], 0
	je	SHORT $LN15@UpdateItem
	mov	eax, DWORD PTR ___result__$74303[ebp]
	mov	DWORD PTR $T76161[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _prop$74302[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _name$74230[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _ui$74229[ebp]
	call	??1CUpdateItem@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _s$74215[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _updateItems$74207[ebp]
	call	??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CUpdateItem>::~CObjectVector<NArchive::N7z::CUpdateItem>
	mov	eax, DWORD PTR $T76161[ebp]
	jmp	$LN63@UpdateItem
$LN15@UpdateItem:
; Line 513
	movzx	ecx, WORD PTR _prop$74302[ebp]
	cmp	ecx, 21					; 00000015H
	je	SHORT $LN14@UpdateItem
; Line 514
	mov	DWORD PTR $T76162[ebp], -2147024809	; 80070057H
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _prop$74302[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _name$74230[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _ui$74229[ebp]
	call	??1CUpdateItem@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _s$74215[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _updateItems$74207[ebp]
	call	??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CUpdateItem>::~CObjectVector<NArchive::N7z::CUpdateItem>
	mov	eax, DWORD PTR $T76162[ebp]
	jmp	$LN63@UpdateItem
$LN14@UpdateItem:
; Line 515
	mov	edx, DWORD PTR _prop$74302[ebp+8]
	mov	DWORD PTR _ui$74229[ebp+32], edx
	mov	eax, DWORD PTR _prop$74302[ebp+12]
	mov	DWORD PTR _ui$74229[ebp+36], eax
; Line 516
	mov	ecx, DWORD PTR _ui$74229[ebp+32]
	or	ecx, DWORD PTR _ui$74229[ebp+36]
	je	SHORT $LN13@UpdateItem
	movzx	edx, BYTE PTR _ui$74229[ebp+58]
	test	edx, edx
	je	SHORT $LN13@UpdateItem
; Line 517
	mov	DWORD PTR $T76163[ebp], -2147024809	; 80070057H
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _prop$74302[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _name$74230[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _ui$74229[ebp]
	call	??1CUpdateItem@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _s$74215[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _updateItems$74207[ebp]
	call	??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CUpdateItem>::~CObjectVector<NArchive::N7z::CUpdateItem>
	mov	eax, DWORD PTR $T76163[ebp]
	jmp	$LN63@UpdateItem
$LN13@UpdateItem:
; Line 518
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _prop$74302[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
$LN16@UpdateItem:
; Line 519
	lea	eax, DWORD PTR _ui$74229[ebp]
	push	eax
	lea	ecx, DWORD PTR _updateItems$74207[ebp]
	call	?Add@?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAEIABUCUpdateItem@N7z@NArchive@@@Z ; CObjectVector<NArchive::N7z::CUpdateItem>::Add
; Line 520
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _name$74230[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _ui$74229[ebp]
	call	??1CUpdateItem@N7z@NArchive@@QAE@XZ
	jmp	$LN55@UpdateItem
$LN54@UpdateItem:
; Line 532
	lea	ecx, DWORD PTR _methodMode$74313[ebp]
	call	??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCompressionMethodMode::CCompressionMethodMode
	mov	DWORD PTR tv1082[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR _headerMethod$74314[ebp]
	call	??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCompressionMethodMode::CCompressionMethodMode
	mov	DWORD PTR tv1083[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 13		; 0000000dH
; Line 538
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	lea	eax, DWORD PTR _methodMode$74313[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 12					; 0000000cH
	call	?SetMainMethod@CHandler@N7z@NArchive@@AAEJAAUCCompressionMethodMode@23@I@Z ; NArchive::N7z::CHandler::SetMainMethod
	mov	DWORD PTR tv1084[ebp], eax
	mov	ecx, DWORD PTR tv1084[ebp]
	mov	DWORD PTR _res$74315[ebp], ecx
; Line 539
	mov	edx, DWORD PTR _res$74315[ebp]
	mov	DWORD PTR ___result__$74316[ebp], edx
	cmp	DWORD PTR ___result__$74316[ebp], 0
	je	SHORT $LN12@UpdateItem
	mov	eax, DWORD PTR ___result__$74316[ebp]
	mov	DWORD PTR $T76164[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR _headerMethod$74314[ebp]
	call	??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _methodMode$74313[ebp]
	call	??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _s$74215[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _updateItems$74207[ebp]
	call	??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CUpdateItem>::~CObjectVector<NArchive::N7z::CUpdateItem>
	mov	eax, DWORD PTR $T76164[ebp]
	jmp	$LN63@UpdateItem
$LN12@UpdateItem:
; Line 541
	lea	ecx, DWORD PTR _headerMethod$74314[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	sub	ecx, 12					; 0000000cH
	call	?SetHeaderMethod@CHandler@N7z@NArchive@@AAEJAAUCCompressionMethodMode@23@@Z ; NArchive::N7z::CHandler::SetHeaderMethod
	mov	DWORD PTR tv1085[ebp], eax
	mov	edx, DWORD PTR tv1085[ebp]
	mov	DWORD PTR ___result__$74319[ebp], edx
	cmp	DWORD PTR ___result__$74319[ebp], 0
	je	SHORT $LN11@UpdateItem
	mov	eax, DWORD PTR ___result__$74319[ebp]
	mov	DWORD PTR $T76165[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR _headerMethod$74314[ebp]
	call	??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _methodMode$74313[ebp]
	call	??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _s$74215[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _updateItems$74207[ebp]
	call	??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CUpdateItem>::~CObjectVector<NArchive::N7z::CUpdateItem>
	mov	eax, DWORD PTR $T76165[ebp]
	jmp	$LN63@UpdateItem
$LN11@UpdateItem:
; Line 544
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _methodMode$74313[ebp+28], edx
; Line 545
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+119]
	mov	BYTE PTR _methodMode$74313[ebp+32], cl
; Line 546
	mov	DWORD PTR _headerMethod$74314[ebp+28], 1
; Line 547
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+119]
	mov	BYTE PTR _headerMethod$74314[ebp+32], al
; Line 550
	lea	ecx, DWORD PTR _getPassword2$74359[ebp]
	call	??0?$CMyComPtr@UICryptoGetTextPassword2@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword2>::CMyComPtr<ICryptoGetTextPassword2>
	mov	DWORD PTR tv1086[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 14		; 0000000eH
; Line 551
	lea	ecx, DWORD PTR _getPassword2$74359[ebp]
	call	??I?$CMyComPtr@UICryptoGetTextPassword2@@@@QAEPAPAUICryptoGetTextPassword2@@XZ ; CMyComPtr<ICryptoGetTextPassword2>::operator&
	mov	DWORD PTR tv1087[ebp], eax
	mov	esi, esp
	mov	ecx, DWORD PTR tv1087[ebp]
	push	ecx
	push	OFFSET _IID_ICryptoGetTextPassword2
	mov	edx, DWORD PTR _updateCallback$[ebp]
	push	edx
	mov	eax, DWORD PTR _updateCallback$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 553
	mov	BYTE PTR _methodMode$74313[ebp+33], 0
; Line 554
	lea	ecx, DWORD PTR _methodMode$74313[ebp+36]
	call	?Empty@UString@@QAEXXZ			; UString::Empty
; Line 555
	lea	ecx, DWORD PTR _getPassword2$74359[ebp]
	call	??B?$CMyComPtr@UICryptoGetTextPassword2@@@@QBEPAUICryptoGetTextPassword2@@XZ ; CMyComPtr<ICryptoGetTextPassword2>::operator ICryptoGetTextPassword2 *
	mov	DWORD PTR tv1088[ebp], eax
	cmp	DWORD PTR tv1088[ebp], 0
	je	$LN10@UpdateItem
; Line 557
	lea	ecx, DWORD PTR _password$74362[ebp]
	call	??0CMyComBSTR@@QAE@XZ			; CMyComBSTR::CMyComBSTR
	mov	DWORD PTR tv1089[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 15		; 0000000fH
; Line 559
	lea	ecx, DWORD PTR _getPassword2$74359[ebp]
	call	??C?$CMyComPtr@UICryptoGetTextPassword2@@@@QBEPAUICryptoGetTextPassword2@@XZ ; CMyComPtr<ICryptoGetTextPassword2>::operator->
	mov	DWORD PTR tv1090[ebp], eax
	mov	eax, DWORD PTR tv1090[ebp]
	mov	DWORD PTR tv719[ebp], eax
	lea	ecx, DWORD PTR _password$74362[ebp]
	call	??ICMyComBSTR@@QAEPAPA_WXZ		; CMyComBSTR::operator&
	mov	DWORD PTR tv1091[ebp], eax
	mov	esi, esp
	mov	ecx, DWORD PTR tv1091[ebp]
	push	ecx
	lea	edx, DWORD PTR _passwordIsDefined$74363[ebp]
	push	edx
	mov	eax, DWORD PTR tv719[ebp]
	push	eax
	mov	ecx, DWORD PTR tv719[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv1092[ebp], eax
	mov	ecx, DWORD PTR tv1092[ebp]
	mov	DWORD PTR ___result__$74364[ebp], ecx
	cmp	DWORD PTR ___result__$74364[ebp], 0
	je	SHORT $LN9@UpdateItem
	mov	edx, DWORD PTR ___result__$74364[ebp]
	mov	DWORD PTR $T76166[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 14		; 0000000eH
	lea	ecx, DWORD PTR _password$74362[ebp]
	call	??1CMyComBSTR@@QAE@XZ			; CMyComBSTR::~CMyComBSTR
	mov	BYTE PTR __$EHRec$[ebp+12], 13		; 0000000dH
	lea	ecx, DWORD PTR _getPassword2$74359[ebp]
	call	??1?$CMyComPtr@UICryptoGetTextPassword2@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword2>::~CMyComPtr<ICryptoGetTextPassword2>
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR _headerMethod$74314[ebp]
	call	??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _methodMode$74313[ebp]
	call	??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _s$74215[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _updateItems$74207[ebp]
	call	??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CUpdateItem>::~CObjectVector<NArchive::N7z::CUpdateItem>
	mov	eax, DWORD PTR $T76166[ebp]
	jmp	$LN63@UpdateItem
$LN9@UpdateItem:
; Line 560
	mov	eax, DWORD PTR _passwordIsDefined$74363[ebp]
	push	eax
	call	?IntToBool@@YG_NH@Z			; IntToBool
	mov	BYTE PTR tv1093[ebp], al
	mov	cl, BYTE PTR tv1093[ebp]
	mov	BYTE PTR _methodMode$74313[ebp+33], cl
; Line 561
	movzx	edx, BYTE PTR _methodMode$74313[ebp+33]
	test	edx, edx
	je	SHORT $LN8@UpdateItem
	lea	ecx, DWORD PTR _password$74362[ebp]
	call	??BCMyComBSTR@@QBEPB_WXZ		; CMyComBSTR::operator wchar_t const *
	mov	DWORD PTR tv1094[ebp], eax
	cmp	DWORD PTR tv1094[ebp], 0
	je	SHORT $LN8@UpdateItem
; Line 562
	lea	ecx, DWORD PTR _password$74362[ebp]
	call	??BCMyComBSTR@@QBEPB_WXZ		; CMyComBSTR::operator wchar_t const *
	mov	DWORD PTR tv1095[ebp], eax
	mov	eax, DWORD PTR tv1095[ebp]
	push	eax
	lea	ecx, DWORD PTR _methodMode$74313[ebp+36]
	call	??4UString@@QAEAAV0@PB_W@Z		; UString::operator=
$LN8@UpdateItem:
; Line 563
	mov	BYTE PTR __$EHRec$[ebp+12], 14		; 0000000eH
	lea	ecx, DWORD PTR _password$74362[ebp]
	call	??1CMyComBSTR@@QAE@XZ			; CMyComBSTR::~CMyComBSTR
$LN10@UpdateItem:
; Line 565
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+110]
	mov	BYTE PTR _compressMainHeader$74368[ebp], dl
; Line 567
	mov	BYTE PTR _encryptHeaders$74369[ebp], 0
; Line 570
	movzx	eax, BYTE PTR _methodMode$74313[ebp+33]
	test	eax, eax
	jne	SHORT $LN7@UpdateItem
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+445]
	test	edx, edx
	je	SHORT $LN7@UpdateItem
; Line 573
	mov	BYTE PTR _methodMode$74313[ebp+33], 1
; Line 574
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 448				; 000001c0H
	push	eax
	lea	ecx, DWORD PTR _methodMode$74313[ebp+36]
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
$LN7@UpdateItem:
; Line 578
	movzx	ecx, BYTE PTR _methodMode$74313[ebp+33]
	test	ecx, ecx
	je	SHORT $LN6@UpdateItem
; Line 580
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+111]
	test	eax, eax
	je	SHORT $LN5@UpdateItem
; Line 581
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+112]
	mov	BYTE PTR _encryptHeaders$74369[ebp], dl
; Line 583
	jmp	SHORT $LN4@UpdateItem
$LN5@UpdateItem:
; Line 584
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+445]
	mov	BYTE PTR _encryptHeaders$74369[ebp], cl
$LN4@UpdateItem:
; Line 586
	mov	BYTE PTR _compressMainHeader$74368[ebp], 1
; Line 587
	movzx	edx, BYTE PTR _encryptHeaders$74369[ebp]
	test	edx, edx
	je	SHORT $LN6@UpdateItem
; Line 589
	mov	al, BYTE PTR _methodMode$74313[ebp+33]
	mov	BYTE PTR _headerMethod$74314[ebp+33], al
; Line 590
	lea	ecx, DWORD PTR _methodMode$74313[ebp+36]
	push	ecx
	lea	ecx, DWORD PTR _headerMethod$74314[ebp+36]
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
$LN6@UpdateItem:
; Line 594
	cmp	DWORD PTR _numItems$[ebp], 2
	jae	SHORT $LN2@UpdateItem
; Line 595
	mov	BYTE PTR _compressMainHeader$74368[ebp], 0
$LN2@UpdateItem:
; Line 597
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?GetLevel@CMultiMethodProps@NArchive@@QBEHXZ ; NArchive::CMultiMethodProps::GetLevel
	mov	DWORD PTR tv1096[ebp], eax
	mov	edx, DWORD PTR tv1096[ebp]
	mov	DWORD PTR _level$74376[ebp], edx
; Line 599
	lea	ecx, DWORD PTR _options$74377[ebp]
	call	??0CUpdateOptions@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CUpdateOptions::CUpdateOptions
; Line 600
	lea	eax, DWORD PTR _methodMode$74313[ebp]
	mov	DWORD PTR _options$74377[ebp], eax
; Line 601
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+110]
	test	edx, edx
	jne	SHORT $LN72@UpdateItem
	movzx	eax, BYTE PTR _encryptHeaders$74369[ebp]
	test	eax, eax
	jne	SHORT $LN72@UpdateItem
	mov	DWORD PTR tv796[ebp], 0
	jmp	SHORT $LN73@UpdateItem
$LN72@UpdateItem:
	lea	ecx, DWORD PTR _headerMethod$74314[ebp]
	mov	DWORD PTR tv796[ebp], ecx
$LN73@UpdateItem:
	mov	edx, DWORD PTR tv796[ebp]
	mov	DWORD PTR _options$74377[ebp+4], edx
; Line 602
	cmp	DWORD PTR _level$74376[ebp], 0
	je	SHORT $LN74@UpdateItem
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+80]
	test	ecx, ecx
	je	SHORT $LN74@UpdateItem
	movzx	edx, BYTE PTR _methodMode$74313[ebp+25]
	test	edx, edx
	jne	SHORT $LN74@UpdateItem
	mov	DWORD PTR tv808[ebp], 1
	jmp	SHORT $LN75@UpdateItem
$LN74@UpdateItem:
	mov	DWORD PTR tv808[ebp], 0
$LN75@UpdateItem:
	mov	al, BYTE PTR tv808[ebp]
	mov	BYTE PTR _options$74377[ebp+8], al
; Line 603
	xor	ecx, ecx
	cmp	DWORD PTR _level$74376[ebp], 8
	setge	cl
	mov	BYTE PTR _options$74377[ebp+9], cl
; Line 604
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?GetAnalysisLevel@CMultiMethodProps@NArchive@@QBEHXZ ; NArchive::CMultiMethodProps::GetAnalysisLevel
	mov	DWORD PTR tv1097[ebp], eax
	mov	edx, DWORD PTR tv1097[ebp]
	mov	DWORD PTR _options$74377[ebp+12], edx
; Line 606
	mov	al, BYTE PTR _compressMainHeader$74368[ebp]
	mov	BYTE PTR _options$74377[ebp+16], al
; Line 613
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+92]
	mov	DWORD PTR _options$74377[ebp+24], edx
	mov	eax, DWORD PTR [ecx+96]
	mov	DWORD PTR _options$74377[ebp+28], eax
; Line 614
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	DWORD PTR _options$74377[ebp+32], edx
	mov	eax, DWORD PTR [ecx+104]
	mov	DWORD PTR _options$74377[ebp+36], eax
; Line 615
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+109]
	mov	BYTE PTR _options$74377[ebp+40], dl
; Line 616
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+84]
	mov	BYTE PTR _options$74377[ebp+41], cl
; Line 619
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+119]
	mov	BYTE PTR _options$74377[ebp+42], al
; Line 621
	lea	ecx, DWORD PTR _archive$74378[ebp]
	call	??0COutArchive@N7z@NArchive@@QAE@XZ	; NArchive::N7z::COutArchive::COutArchive
	mov	DWORD PTR tv1098[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 16		; 00000010H
; Line 622
	lea	ecx, DWORD PTR _newDatabase$74379[ebp]
	call	??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ
	mov	DWORD PTR tv1099[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 17		; 00000011H
; Line 624
	lea	ecx, DWORD PTR _getPassword$74417[ebp]
	call	??0?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::CMyComPtr<ICryptoGetTextPassword>
	mov	DWORD PTR tv1100[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 18		; 00000012H
; Line 625
	lea	ecx, DWORD PTR _getPassword$74417[ebp]
	call	??I?$CMyComPtr@UICryptoGetTextPassword@@@@QAEPAPAUICryptoGetTextPassword@@XZ ; CMyComPtr<ICryptoGetTextPassword>::operator&
	mov	DWORD PTR tv1101[ebp], eax
	mov	esi, esp
	mov	ecx, DWORD PTR tv1101[ebp]
	push	ecx
	push	OFFSET _IID_ICryptoGetTextPassword
	mov	edx, DWORD PTR _updateCallback$[ebp]
	push	edx
	mov	eax, DWORD PTR _updateCallback$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 655
	lea	ecx, DWORD PTR _getPassword$74417[ebp]
	call	??B?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ ; CMyComPtr<ICryptoGetTextPassword>::operator ICryptoGetTextPassword *
	mov	DWORD PTR tv1102[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 124				; 0000007cH
	call	??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *
	mov	DWORD PTR tv1103[ebp], eax
	mov	eax, DWORD PTR tv1102[ebp]
	push	eax
	lea	ecx, DWORD PTR _options$74377[ebp]
	push	ecx
	mov	edx, DWORD PTR _updateCallback$[ebp]
	push	edx
	mov	eax, DWORD PTR _outStream$[ebp]
	push	eax
	lea	ecx, DWORD PTR _newDatabase$74379[ebp]
	push	ecx
	lea	edx, DWORD PTR _archive$74378[ebp]
	push	edx
	lea	eax, DWORD PTR _updateItems$74207[ebp]
	push	eax
	mov	ecx, DWORD PTR _db$74140[ebp]
	push	ecx
	mov	edx, DWORD PTR tv1103[ebp]
	push	edx
	call	?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z ; NArchive::N7z::Update
	mov	DWORD PTR tv1104[ebp], eax
	mov	eax, DWORD PTR tv1104[ebp]
	mov	DWORD PTR _res$74315[ebp], eax
; Line 657
	mov	ecx, DWORD PTR _res$74315[ebp]
	mov	DWORD PTR ___result__$74419[ebp], ecx
	cmp	DWORD PTR ___result__$74419[ebp], 0
	je	$LN1@UpdateItem
	mov	edx, DWORD PTR ___result__$74419[ebp]
	mov	DWORD PTR $T76171[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 17		; 00000011H
	lea	ecx, DWORD PTR _getPassword$74417[ebp]
	call	??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
	mov	BYTE PTR __$EHRec$[ebp+12], 16		; 00000010H
	lea	ecx, DWORD PTR _newDatabase$74379[ebp]
	call	??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 14		; 0000000eH
	lea	ecx, DWORD PTR _archive$74378[ebp]
	call	??1COutArchive@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 13		; 0000000dH
	lea	ecx, DWORD PTR _getPassword2$74359[ebp]
	call	??1?$CMyComPtr@UICryptoGetTextPassword2@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword2>::~CMyComPtr<ICryptoGetTextPassword2>
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR _headerMethod$74314[ebp]
	call	??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _methodMode$74313[ebp]
	call	??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _s$74215[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _updateItems$74207[ebp]
	call	??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CUpdateItem>::~CObjectVector<NArchive::N7z::CUpdateItem>
	mov	eax, DWORD PTR $T76171[ebp]
	jmp	$LN63@UpdateItem
$LN1@UpdateItem:
; Line 659
	lea	ecx, DWORD PTR _updateItems$74207[ebp]
	call	?ClearAndFree@?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAEXXZ ; CObjectVector<NArchive::N7z::CUpdateItem>::ClearAndFree
; Line 662
	lea	eax, DWORD PTR _options$74377[ebp+16]
	push	eax
	mov	ecx, DWORD PTR _options$74377[ebp+4]
	push	ecx
	lea	edx, DWORD PTR _newDatabase$74379[ebp]
	push	edx
	lea	ecx, DWORD PTR _archive$74378[ebp]
	call	?WriteDatabase@COutArchive@N7z@NArchive@@QAEJABUCArchiveDatabaseOut@23@PBUCCompressionMethodMode@23@ABUCHeaderOptions@23@@Z ; NArchive::N7z::COutArchive::WriteDatabase
	mov	DWORD PTR tv1105[ebp], eax
	mov	eax, DWORD PTR tv1105[ebp]
	mov	DWORD PTR $T76172[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 17		; 00000011H
	lea	ecx, DWORD PTR _getPassword$74417[ebp]
	call	??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
	mov	BYTE PTR __$EHRec$[ebp+12], 16		; 00000010H
	lea	ecx, DWORD PTR _newDatabase$74379[ebp]
	call	??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 14		; 0000000eH
	lea	ecx, DWORD PTR _archive$74378[ebp]
	call	??1COutArchive@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 13		; 0000000dH
	lea	ecx, DWORD PTR _getPassword2$74359[ebp]
	call	??1?$CMyComPtr@UICryptoGetTextPassword2@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword2>::~CMyComPtr<ICryptoGetTextPassword2>
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR _headerMethod$74314[ebp]
	call	??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _methodMode$74313[ebp]
	call	??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _s$74215[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _updateItems$74207[ebp]
	call	??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CUpdateItem>::~CObjectVector<NArchive::N7z::CUpdateItem>
	mov	eax, DWORD PTR $T76172[ebp]
	jmp	SHORT $LN63@UpdateItem
__catch$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$0:
; Line 664
	mov	DWORD PTR $T76173[ebp], -2147024882	; 8007000eH
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN97@UpdateItem
	ret	0
	mov	eax, __tryend$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$1
	ret	0
__tryend$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$1:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN63@UpdateItem
$LN97@UpdateItem:
	mov	eax, DWORD PTR $T76173[ebp]
$LN63@UpdateItem:
; Line 665
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN122@UpdateItem
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 1280				; 00000500H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	3
$LN122@UpdateItem:
	DD	21					; 00000015H
	DD	$LN121@UpdateItem
$LN121@UpdateItem:
	DD	-36					; ffffffdcH
	DD	12					; 0000000cH
	DD	$LN99@UpdateItem
	DD	-60					; ffffffc4H
	DD	12					; 0000000cH
	DD	$LN100@UpdateItem
	DD	-76					; ffffffb4H
	DD	4
	DD	$LN101@UpdateItem
	DD	-88					; ffffffa8H
	DD	4
	DD	$LN102@UpdateItem
	DD	-100					; ffffff9cH
	DD	4
	DD	$LN103@UpdateItem
	DD	-176					; ffffff50H
	DD	64					; 00000040H
	DD	$LN104@UpdateItem
	DD	-196					; ffffff3cH
	DD	12					; 0000000cH
	DD	$LN105@UpdateItem
	DD	-228					; ffffff1cH
	DD	16					; 00000010H
	DD	$LN106@UpdateItem
	DD	-268					; fffffef4H
	DD	16					; 00000010H
	DD	$LN107@UpdateItem
	DD	-296					; fffffed8H
	DD	16					; 00000010H
	DD	$LN108@UpdateItem
	DD	-324					; fffffebcH
	DD	16					; 00000010H
	DD	$LN109@UpdateItem
	DD	-352					; fffffea0H
	DD	16					; 00000010H
	DD	$LN110@UpdateItem
	DD	-412					; fffffe64H
	DD	48					; 00000030H
	DD	$LN111@UpdateItem
	DD	-468					; fffffe2cH
	DD	48					; 00000030H
	DD	$LN112@UpdateItem
	DD	-492					; fffffe14H
	DD	4
	DD	$LN113@UpdateItem
	DD	-504					; fffffe08H
	DD	4
	DD	$LN114@UpdateItem
	DD	-516					; fffffdfcH
	DD	4
	DD	$LN115@UpdateItem
	DD	-584					; fffffdb8H
	DD	48					; 00000030H
	DD	$LN116@UpdateItem
	DD	-680					; fffffd58H
	DD	88					; 00000058H
	DD	$LN117@UpdateItem
	DD	-916					; fffffc6cH
	DD	228					; 000000e4H
	DD	$LN118@UpdateItem
	DD	-928					; fffffc60H
	DD	4
	DD	$LN119@UpdateItem
$LN119@UpdateItem:
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	0
$LN118@UpdateItem:
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	0
$LN117@UpdateItem:
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	0
$LN116@UpdateItem:
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	0
$LN115@UpdateItem:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	73					; 00000049H
	DB	115					; 00000073H
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$LN114@UpdateItem:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	0
$LN113@UpdateItem:
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	50					; 00000032H
	DB	0
$LN112@UpdateItem:
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	77					; 0000004dH
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	0
$LN111@UpdateItem:
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	77					; 0000004dH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN110@UpdateItem:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
$LN109@UpdateItem:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
$LN108@UpdateItem:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
$LN107@UpdateItem:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
$LN106@UpdateItem:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
$LN105@UpdateItem:
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN104@UpdateItem:
	DB	117					; 00000075H
	DB	105					; 00000069H
	DB	0
$LN103@UpdateItem:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	65					; 00000041H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	0
$LN102@UpdateItem:
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	115					; 00000073H
	DB	0
$LN101@UpdateItem:
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
$LN100@UpdateItem:
	DB	115					; 00000073H
	DB	0
$LN99@UpdateItem:
	DB	117					; 00000075H
	DB	112					; 00000070H
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	73					; 00000049H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	115					; 00000073H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$2:
	lea	ecx, DWORD PTR _updateItems$74207[ebp]
	jmp	??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CUpdateItem>::~CObjectVector<NArchive::N7z::CUpdateItem>
__unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$3:
	lea	ecx, DWORD PTR _s$74215[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$4:
	lea	ecx, DWORD PTR _ui$74229[ebp]
	jmp	??1CUpdateItem@N7z@NArchive@@QAE@XZ
__unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$5:
	lea	ecx, DWORD PTR _name$74230[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$6:
	lea	ecx, DWORD PTR _prop$74242[ebp]
	jmp	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
__unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$7:
	lea	ecx, DWORD PTR _prop$74264[ebp]
	jmp	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
__unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$8:
	lea	ecx, DWORD PTR $T76155[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$9:
	lea	ecx, DWORD PTR $T76156[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$10:
	lea	ecx, DWORD PTR _prop$74276[ebp]
	jmp	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
__unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$11:
	lea	ecx, DWORD PTR _prop$74287[ebp]
	jmp	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
__unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$12:
	lea	ecx, DWORD PTR _prop$74302[ebp]
	jmp	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
__unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$13:
	lea	ecx, DWORD PTR _methodMode$74313[ebp]
	jmp	??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
__unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$14:
	lea	ecx, DWORD PTR _headerMethod$74314[ebp]
	jmp	??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
__unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$15:
	lea	ecx, DWORD PTR _getPassword2$74359[ebp]
	jmp	??1?$CMyComPtr@UICryptoGetTextPassword2@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword2>::~CMyComPtr<ICryptoGetTextPassword2>
__unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$16:
	lea	ecx, DWORD PTR _password$74362[ebp]
	jmp	??1CMyComBSTR@@QAE@XZ			; CMyComBSTR::~CMyComBSTR
__unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$17:
	lea	ecx, DWORD PTR _archive$74378[ebp]
	jmp	??1COutArchive@N7z@NArchive@@QAE@XZ
__unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$18:
	lea	ecx, DWORD PTR _newDatabase$74379[ebp]
	jmp	??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ
__unwindfunclet$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z$19:
	lea	ecx, DWORD PTR _getPassword$74417[ebp]
	jmp	??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
__ehhandler$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-1284]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?UpdateItems@CHandler@N7z@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z ENDP ; NArchive::N7z::CHandler::UpdateItems
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Empty@UString@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Empty@UString@@QAEXXZ PROC				; UString::Empty, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 474
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	xor	eax, eax
	mov	WORD PTR [edx], ax
	mov	esp, ebp
	pop	ebp
	ret	0
?Empty@UString@@QAEXXZ ENDP				; UString::Empty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CMyComBSTR@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMyComBSTR@@QAE@XZ PROC				; CMyComBSTR::CMyComBSTR, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 87
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CMyComBSTR@@QAE@XZ ENDP				; CMyComBSTR::CMyComBSTR
_TEXT	ENDS
EXTRN	__imp__SysFreeString@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CMyComBSTR@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CMyComBSTR@@QAE@XZ PROC				; CMyComBSTR::~CMyComBSTR, COMDAT
; _this$ = ecx
; Line 88
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__SysFreeString@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CMyComBSTR@@QAE@XZ ENDP				; CMyComBSTR::~CMyComBSTR
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??ICMyComBSTR@@QAEPAPA_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??ICMyComBSTR@@QAEPAPA_WXZ PROC				; CMyComBSTR::operator&, COMDAT
; _this$ = ecx
; Line 89
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??ICMyComBSTR@@QAEPAPA_WXZ ENDP				; CMyComBSTR::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??BCMyComBSTR@@QBEPB_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BCMyComBSTR@@QBEPB_WXZ PROC				; CMyComBSTR::operator wchar_t const *, COMDAT
; _this$ = ecx
; Line 90
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??BCMyComBSTR@@QBEPB_WXZ ENDP				; CMyComBSTR::operator wchar_t const *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CPropVariant@NCOM@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CPropVariant@NCOM@NWindows@@QAE@XZ PROC		; NWindows::NCOM::CPropVariant::CPropVariant, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\propvariant.h
; Line 47
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 49
	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx], ax
; Line 50
	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+2], dx
; Line 54
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
; Line 55
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CPropVariant@NCOM@NWindows@@QAE@XZ ENDP		; NWindows::NCOM::CPropVariant::CPropVariant
_TEXT	ENDS
EXTRN	?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ:PROC	; NWindows::NCOM::CPropVariant::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CPropVariant@NCOM@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CPropVariant@NCOM@NWindows@@QAE@XZ PROC		; NWindows::NCOM::CPropVariant::~CPropVariant, COMDAT
; _this$ = ecx
; Line 56
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ ; NWindows::NCOM::CPropVariant::Clear
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CPropVariant@NCOM@NWindows@@QAE@XZ ENDP		; NWindows::NCOM::CPropVariant::~CPropVariant
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetAnalysisLevel@CMultiMethodProps@NArchive@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAnalysisLevel@CMultiMethodProps@NArchive@@QBEHXZ PROC ; NArchive::CMultiMethodProps::GetAnalysisLevel, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\common\handlerout.h
; Line 41
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetAnalysisLevel@CMultiMethodProps@NArchive@@QBEHXZ ENDP ; NArchive::CMultiMethodProps::GetAnalysisLevel
_TEXT	ENDS
PUBLIC	??1?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CBond2>::~CRecordVector<NArchive::N7z::CBond2>
PUBLIC	??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CMethodFull>::~CObjectVector<NArchive::N7z::CMethodFull>
PUBLIC	??0?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CBond2>::CRecordVector<NArchive::N7z::CBond2>
PUBLIC	??0?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CMethodFull>::CObjectVector<NArchive::N7z::CMethodFull>
;	COMDAT xdata$x
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zcompressionmode.h
xdata$x	SEGMENT
__unwindtable$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ$1
__ehfuncinfo$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ PROC	; NArchive::N7z::CCompressionMethodMode::CCompressionMethodMode, COMDAT
; _this$ = ecx
; Line 69
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CMethodFull>::CObjectVector<NArchive::N7z::CMethodFull>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CBond2>::CRecordVector<NArchive::N7z::CBond2>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+24], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+25], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+32], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+33], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CMethodFull>::~CObjectVector<NArchive::N7z::CMethodFull>
__unwindfunclet$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CBond2>::~CRecordVector<NArchive::N7z::CBond2>
__ehhandler$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ ENDP	; NArchive::N7z::CCompressionMethodMode::CCompressionMethodMode
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IntToBool@@YG_NH@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?IntToBool@@YG_NH@Z PROC				; IntToBool, COMDAT
; File c:\workspace\7z1505-src\cpp\common\defs.h
; Line 18
	push	ebp
	mov	ebp, esp
	xor	eax, eax
	cmp	DWORD PTR _value$[ebp], 0
	setne	al
	pop	ebp
	ret	4
?IntToBool@@YG_NH@Z ENDP				; IntToBool
_TEXT	ENDS
PUBLIC	??A?$CRecordVector@_K@@QBEAB_KI@Z		; CRecordVector<unsigned __int64>::operator[]
PUBLIC	??A?$CRecordVector@_N@@QBEAB_NI@Z		; CRecordVector<bool>::operator[]
PUBLIC	?Size@?$CRecordVector@_N@@QBEIXZ		; CRecordVector<bool>::Size
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetItem@CUInt64DefVector@N7z@NArchive@@QBE_NIAA_K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
_value$ = 12						; size = 4
?GetItem@CUInt64DefVector@N7z@NArchive@@QBE_NIAA_K@Z PROC ; NArchive::N7z::CUInt64DefVector::GetItem, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zitem.h
; Line 134
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 135
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@_N@@QBEIXZ	; CRecordVector<bool>::Size
	cmp	DWORD PTR _index$[ebp], eax
	jae	SHORT $LN1@GetItem
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@_N@@QBEAB_NI@Z	; CRecordVector<bool>::operator[]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN1@GetItem
; Line 137
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$CRecordVector@_K@@QBEAB_KI@Z	; CRecordVector<unsigned __int64>::operator[]
	mov	ecx, DWORD PTR _value$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], eax
; Line 138
	mov	al, 1
	jmp	SHORT $LN2@GetItem
$LN1@GetItem:
; Line 140
	mov	ecx, DWORD PTR _value$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
; Line 141
	xor	al, al
$LN2@GetItem:
; Line 142
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?GetItem@CUInt64DefVector@N7z@NArchive@@QBE_NIAA_K@Z ENDP ; NArchive::N7z::CUInt64DefVector::GetItem
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsItemAnti@CDatabase@N7z@NArchive@@QBE_NI@Z
_TEXT	SEGMENT
tv74 = -8						; size = 4
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?IsItemAnti@CDatabase@N7z@NArchive@@QBE_NI@Z PROC	; NArchive::N7z::CDatabase::IsItemAnti, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zin.h
; Line 158
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 196				; 000000c4H
	call	?Size@?$CRecordVector@_N@@QBEIXZ	; CRecordVector<bool>::Size
	cmp	DWORD PTR _index$[ebp], eax
	jae	SHORT $LN3@IsItemAnti
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 196				; 000000c4H
	call	??A?$CRecordVector@_N@@QBEAB_NI@Z	; CRecordVector<bool>::operator[]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN3@IsItemAnti
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@IsItemAnti
$LN3@IsItemAnti:
	mov	DWORD PTR tv74[ebp], 0
$LN4@IsItemAnti:
	mov	al, BYTE PTR tv74[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?IsItemAnti@CDatabase@N7z@NArchive@@QBE_NI@Z ENDP	; NArchive::N7z::CDatabase::IsItemAnti
_TEXT	ENDS
PUBLIC	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ		; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
PUBLIC	??1COutBuffer@@QAE@XZ				; COutBuffer::~COutBuffer
PUBLIC	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ	; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
PUBLIC	??0?$CMyComPtr@UIOutStream@@@@QAE@XZ		; CMyComPtr<IOutStream>::CMyComPtr<IOutStream>
PUBLIC	??0CWriteBufferLoc@N7z@NArchive@@QAE@XZ		; NArchive::N7z::CWriteBufferLoc::CWriteBufferLoc
PUBLIC	??0COutBuffer@@QAE@XZ				; COutBuffer::COutBuffer
EXTRN	?Create@COutBuffer@@QAE_NI@Z:PROC		; COutBuffer::Create
;	COMDAT xdata$x
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zout.h
xdata$x	SEGMENT
__unwindtable$??0COutArchive@N7z@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0COutArchive@N7z@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0COutArchive@N7z@NArchive@@QAE@XZ$1
__ehfuncinfo$??0COutArchive@N7z@NArchive@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0COutArchive@N7z@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0COutArchive@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0COutArchive@N7z@NArchive@@QAE@XZ PROC		; NArchive::N7z::COutArchive::COutArchive, COMDAT
; _this$ = ecx
; Line 301
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0COutArchive@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0COutBuffer@@QAE@XZ			; COutBuffer::COutBuffer
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??0CWriteBufferLoc@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CWriteBufferLoc::CWriteBufferLoc
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	call	??0?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::CMyComPtr<IOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
	push	65536					; 00010000H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?Create@COutBuffer@@QAE_NI@Z		; COutBuffer::Create
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0COutArchive@N7z@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1COutBuffer@@QAE@XZ			; COutBuffer::~COutBuffer
__unwindfunclet$??0COutArchive@N7z@NArchive@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	jmp	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
__ehhandler$??0COutArchive@N7z@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0COutArchive@N7z@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0COutArchive@N7z@NArchive@@QAE@XZ ENDP		; NArchive::N7z::COutArchive::COutArchive
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0COutBuffer@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0COutBuffer@@QAE@XZ PROC				; COutBuffer::COutBuffer, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\outbuffer.h
; Line 36
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0COutBuffer@@QAE@XZ ENDP				; COutBuffer::COutBuffer
_TEXT	ENDS
EXTRN	?Free@COutBuffer@@QAEXXZ:PROC			; COutBuffer::Free
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1COutBuffer@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1COutBuffer@@QAE@XZ PROC				; COutBuffer::~COutBuffer, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Free@COutBuffer@@QAEXXZ		; COutBuffer::Free
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1COutBuffer@@QAE@XZ ENDP				; COutBuffer::~COutBuffer
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CWriteBufferLoc@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CWriteBufferLoc@N7z@NArchive@@QAE@XZ PROC		; NArchive::N7z::CWriteBufferLoc::CWriteBufferLoc, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zout.h
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CWriteBufferLoc@N7z@NArchive@@QAE@XZ ENDP		; NArchive::N7z::CWriteBufferLoc::CWriteBufferLoc
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CUpdateItem@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CUpdateItem@N7z@NArchive@@QAE@XZ PROC		; NArchive::N7z::CUpdateItem::CUpdateItem, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zupdate.h
; Line 80
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+58], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+59], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+60], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+61], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+62], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+63], 0
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CUpdateItem@N7z@NArchive@@QAE@XZ ENDP		; NArchive::N7z::CUpdateItem::CUpdateItem
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SetDirStatusFromAttrib@CUpdateItem@N7z@NArchive@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SetDirStatusFromAttrib@CUpdateItem@N7z@NArchive@@QAEXXZ PROC ; NArchive::N7z::CUpdateItem::SetDirStatusFromAttrib, COMDAT
; _this$ = ecx
; Line 81
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	and	ecx, 16					; 00000010H
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+59], cl
	mov	esp, ebp
	pop	ebp
	ret	0
?SetDirStatusFromAttrib@CUpdateItem@N7z@NArchive@@QAEXXZ ENDP ; NArchive::N7z::CUpdateItem::SetDirStatusFromAttrib
_TEXT	ENDS
PUBLIC	??0CHeaderOptions@N7z@NArchive@@QAE@XZ		; NArchive::N7z::CHeaderOptions::CHeaderOptions
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CUpdateOptions@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CUpdateOptions@N7z@NArchive@@QAE@XZ PROC		; NArchive::N7z::CUpdateOptions::CUpdateOptions, COMDAT
; _this$ = ecx
; Line 114
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+9], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0CHeaderOptions@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CHeaderOptions::CHeaderOptions
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+24], -1
	mov	DWORD PTR [edx+28], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], -1
	mov	DWORD PTR [eax+36], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+40], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+41], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+42], 1
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CUpdateOptions@N7z@NArchive@@QAE@XZ ENDP		; NArchive::N7z::CUpdateOptions::CUpdateOptions
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CHeaderOptions@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CHeaderOptions@N7z@NArchive@@QAE@XZ PROC		; NArchive::N7z::CHeaderOptions::CHeaderOptions, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zout.h
; Line 64
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CHeaderOptions@N7z@NArchive@@QAE@XZ ENDP		; NArchive::N7z::CHeaderOptions::CHeaderOptions
_TEXT	ENDS
xdata$x	SEGMENT
__unwindtable$?GetTime@N7z@NArchive@@YGJPAUIArchiveUpdateCallback@@HKAA_KAA_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetTime@N7z@NArchive@@YGJPAUIArchiveUpdateCallback@@HKAA_KAA_N@Z$0
__ehfuncinfo$?GetTime@N7z@NArchive@@YGJPAUIArchiveUpdateCallback@@HKAA_KAA_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetTime@N7z@NArchive@@YGJPAUIArchiveUpdateCallback@@HKAA_KAA_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T76290 = -52						; size = 4
$T76289 = -48						; size = 4
$T76288 = -44						; size = 4
___result__$74121 = -40					; size = 4
_prop$ = -32						; size = 16
__$EHRec$ = -12						; size = 12
_updateCallback$ = 8					; size = 4
_index$ = 12						; size = 4
_propID$ = 16						; size = 4
_ft$ = 20						; size = 4
_ftDefined$ = 24					; size = 4
?GetTime@N7z@NArchive@@YGJPAUIArchiveUpdateCallback@@HKAA_KAA_N@Z PROC ; NArchive::N7z::GetTime
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zhandlerout.cpp
; Line 158
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetTime@N7z@NArchive@@YGJPAUIArchiveUpdateCallback@@HKAA_KAA_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 161
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 162
	mov	esi, esp
	lea	eax, DWORD PTR _prop$[ebp]
	push	eax
	mov	ecx, DWORD PTR _propID$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _updateCallback$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _updateCallback$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$74121[ebp], eax
	cmp	DWORD PTR ___result__$74121[ebp], 0
	je	SHORT $LN5@GetTime
	mov	ecx, DWORD PTR ___result__$74121[ebp]
	mov	DWORD PTR $T76288[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T76288[ebp]
	jmp	$LN6@GetTime
$LN5@GetTime:
; Line 163
	movzx	edx, WORD PTR _prop$[ebp]
	cmp	edx, 64					; 00000040H
	jne	SHORT $LN4@GetTime
; Line 165
	mov	esi, DWORD PTR _prop$[ebp+8]
	xor	edi, edi
	mov	eax, DWORD PTR _prop$[ebp+12]
	xor	edx, edx
	mov	cl, 32					; 00000020H
	call	__allshl
	or	esi, eax
	or	edi, edx
	mov	eax, DWORD PTR _ft$[ebp]
	mov	DWORD PTR [eax], esi
	mov	DWORD PTR [eax+4], edi
; Line 166
	mov	ecx, DWORD PTR _ftDefined$[ebp]
	mov	BYTE PTR [ecx], 1
	jmp	SHORT $LN3@GetTime
$LN4@GetTime:
; Line 168
	movzx	edx, WORD PTR _prop$[ebp]
	test	edx, edx
	je	SHORT $LN2@GetTime
; Line 169
	mov	DWORD PTR $T76289[ebp], -2147024809	; 80070057H
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T76289[ebp]
	jmp	SHORT $LN6@GetTime
; Line 170
	jmp	SHORT $LN3@GetTime
$LN2@GetTime:
; Line 172
	mov	eax, DWORD PTR _ft$[ebp]
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0
; Line 173
	mov	ecx, DWORD PTR _ftDefined$[ebp]
	mov	BYTE PTR [ecx], 0
$LN3@GetTime:
; Line 175
	mov	DWORD PTR $T76290[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T76290[ebp]
$LN6@GetTime:
; Line 176
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@GetTime
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
	npad	2
$LN12@GetTime:
	DD	1
	DD	$LN11@GetTime
$LN11@GetTime:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN9@GetTime
$LN9@GetTime:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?GetTime@N7z@NArchive@@YGJPAUIArchiveUpdateCallback@@HKAA_KAA_N@Z$0:
	lea	ecx, DWORD PTR _prop$[ebp]
	jmp	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
__ehhandler$?GetTime@N7z@NArchive@@YGJPAUIArchiveUpdateCallback@@HKAA_KAA_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetTime@N7z@NArchive@@YGJPAUIArchiveUpdateCallback@@HKAA_KAA_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetTime@N7z@NArchive@@YGJPAUIArchiveUpdateCallback@@HKAA_KAA_N@Z ENDP ; NArchive::N7z::GetTime
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CUpdateItem@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CUpdateItem@N7z@NArchive@@QAE@XZ PROC		; NArchive::N7z::CUpdateItem::~CUpdateItem, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??1UString@@QAE@XZ			; UString::~UString
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CUpdateItem@N7z@NArchive@@QAE@XZ ENDP		; NArchive::N7z::CUpdateItem::~CUpdateItem
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ$1
__ehfuncinfo$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ PROC	; NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CBond2>::~CRecordVector<NArchive::N7z::CBond2>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CMethodFull>::~CObjectVector<NArchive::N7z::CMethodFull>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CMethodFull>::~CObjectVector<NArchive::N7z::CMethodFull>
__unwindfunclet$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CBond2>::~CRecordVector<NArchive::N7z::CBond2>
__ehhandler$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ ENDP	; NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode
PUBLIC	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ	; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1COutArchive@N7z@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1COutArchive@N7z@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1COutArchive@N7z@NArchive@@QAE@XZ$1
__ehfuncinfo$??1COutArchive@N7z@NArchive@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1COutArchive@N7z@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1COutArchive@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1COutArchive@N7z@NArchive@@QAE@XZ PROC		; NArchive::N7z::COutArchive::~COutArchive, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1COutArchive@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	call	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1COutBuffer@@QAE@XZ			; COutBuffer::~COutBuffer
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1COutArchive@N7z@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1COutBuffer@@QAE@XZ			; COutBuffer::~COutBuffer
__unwindfunclet$??1COutArchive@N7z@NArchive@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	jmp	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
__ehhandler$??1COutArchive@N7z@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1COutArchive@N7z@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1COutArchive@N7z@NArchive@@QAE@XZ ENDP		; NArchive::N7z::COutArchive::~COutArchive
PUBLIC	??1CUInt64DefVector@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CUInt64DefVector::~CUInt64DefVector
PUBLIC	??1?$CObjectVector@VUString@@@@QAE@XZ		; CObjectVector<UString>::~CObjectVector<UString>
PUBLIC	??1?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFileItem>::~CRecordVector<NArchive::N7z::CFileItem>
PUBLIC	??1?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CFolder>::~CObjectVector<NArchive::N7z::CFolder>
PUBLIC	??1CUInt32DefVector@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CUInt32DefVector::~CUInt32DefVector
PUBLIC	??1?$CRecordVector@_K@@QAE@XZ			; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
PUBLIC	??1COutFolders@N7z@NArchive@@QAE@XZ		; NArchive::N7z::COutFolders::~COutFolders
PUBLIC	??0?$CRecordVector@_N@@QAE@XZ			; CRecordVector<bool>::CRecordVector<bool>
PUBLIC	??0CUInt64DefVector@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CUInt64DefVector::CUInt64DefVector
PUBLIC	??0?$CObjectVector@VUString@@@@QAE@XZ		; CObjectVector<UString>::CObjectVector<UString>
PUBLIC	??0?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFileItem>::CRecordVector<NArchive::N7z::CFileItem>
PUBLIC	??0?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CFolder>::CObjectVector<NArchive::N7z::CFolder>
PUBLIC	??0CUInt32DefVector@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CUInt32DefVector::CUInt32DefVector
PUBLIC	??0?$CRecordVector@_K@@QAE@XZ			; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>
PUBLIC	??0COutFolders@N7z@NArchive@@QAE@XZ		; NArchive::N7z::COutFolders::COutFolders
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ DD 019930522H
	DD	0aH
	DD	FLAT:__unwindtable$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$7
	DD	07H
	DD	FLAT:__unwindfunclet$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$8
	DD	08H
	DD	FLAT:__unwindfunclet$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$9
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ PROC	; NArchive::N7z::CArchiveDatabaseOut::CArchiveDatabaseOut, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0COutFolders@N7z@NArchive@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??0?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??0CUInt32DefVector@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	??0?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CFolder>::CObjectVector<NArchive::N7z::CFolder>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??0?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFileItem>::CRecordVector<NArchive::N7z::CFileItem>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 108				; 0000006cH
	call	??0?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::CObjectVector<UString>
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	call	??0CUInt64DefVector@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	??0CUInt64DefVector@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 168				; 000000a8H
	call	??0CUInt64DefVector@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 192				; 000000c0H
	call	??0CUInt64DefVector@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 216				; 000000d8H
	call	??0?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::CRecordVector<bool>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1COutFolders@N7z@NArchive@@QAE@XZ
__unwindfunclet$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	jmp	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
__unwindfunclet$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	jmp	??1CUInt32DefVector@N7z@NArchive@@QAE@XZ
__unwindfunclet$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	jmp	??1?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CFolder>::~CObjectVector<NArchive::N7z::CFolder>
__unwindfunclet$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	jmp	??1?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFileItem>::~CRecordVector<NArchive::N7z::CFileItem>
__unwindfunclet$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 108				; 0000006cH
	jmp	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
__unwindfunclet$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$6:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	jmp	??1CUInt64DefVector@N7z@NArchive@@QAE@XZ
__unwindfunclet$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$7:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	jmp	??1CUInt64DefVector@N7z@NArchive@@QAE@XZ
__unwindfunclet$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$8:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 168				; 000000a8H
	jmp	??1CUInt64DefVector@N7z@NArchive@@QAE@XZ
__unwindfunclet$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$9:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 192				; 000000c0H
	jmp	??1CUInt64DefVector@N7z@NArchive@@QAE@XZ
__ehhandler$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ ENDP	; NArchive::N7z::CArchiveDatabaseOut::CArchiveDatabaseOut
PUBLIC	??1?$CRecordVector@_N@@QAE@XZ			; CRecordVector<bool>::~CRecordVector<bool>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CUInt64DefVector@N7z@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CUInt64DefVector@N7z@NArchive@@QAE@XZ$0
__ehfuncinfo$??1CUInt64DefVector@N7z@NArchive@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CUInt64DefVector@N7z@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CUInt64DefVector@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CUInt64DefVector@N7z@NArchive@@QAE@XZ PROC		; NArchive::N7z::CUInt64DefVector::~CUInt64DefVector, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CUInt64DefVector@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CUInt64DefVector@N7z@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
__ehhandler$??1CUInt64DefVector@N7z@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CUInt64DefVector@N7z@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CUInt64DefVector@N7z@NArchive@@QAE@XZ ENDP		; NArchive::N7z::CUInt64DefVector::~CUInt64DefVector
PUBLIC	??1?$CRecordVector@I@@QAE@XZ			; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ$0
__ehfuncinfo$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CUInt32DefVector@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CUInt32DefVector@N7z@NArchive@@QAE@XZ PROC		; NArchive::N7z::CUInt32DefVector::~CUInt32DefVector, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
__ehhandler$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CUInt32DefVector@N7z@NArchive@@QAE@XZ ENDP		; NArchive::N7z::CUInt32DefVector::~CUInt32DefVector
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ DD 019930522H
	DD	0aH
	DD	FLAT:__unwindtable$??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$7
	DD	07H
	DD	FLAT:__unwindfunclet$??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$8
	DD	08H
	DD	FLAT:__unwindfunclet$??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$9
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ PROC	; NArchive::N7z::CArchiveDatabaseOut::~CArchiveDatabaseOut, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 9
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 216				; 000000d8H
	call	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 192				; 000000c0H
	call	??1CUInt64DefVector@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 168				; 000000a8H
	call	??1CUInt64DefVector@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	??1CUInt64DefVector@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	call	??1CUInt64DefVector@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 108				; 0000006cH
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??1?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFileItem>::~CRecordVector<NArchive::N7z::CFileItem>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	??1?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CFolder>::~CObjectVector<NArchive::N7z::CFolder>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??1CUInt32DefVector@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1COutFolders@N7z@NArchive@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1COutFolders@N7z@NArchive@@QAE@XZ
__unwindfunclet$??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	jmp	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
__unwindfunclet$??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	jmp	??1CUInt32DefVector@N7z@NArchive@@QAE@XZ
__unwindfunclet$??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	jmp	??1?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CFolder>::~CObjectVector<NArchive::N7z::CFolder>
__unwindfunclet$??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	jmp	??1?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFileItem>::~CRecordVector<NArchive::N7z::CFileItem>
__unwindfunclet$??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 108				; 0000006cH
	jmp	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
__unwindfunclet$??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$6:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	jmp	??1CUInt64DefVector@N7z@NArchive@@QAE@XZ
__unwindfunclet$??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$7:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	jmp	??1CUInt64DefVector@N7z@NArchive@@QAE@XZ
__unwindfunclet$??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$8:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 168				; 000000a8H
	jmp	??1CUInt64DefVector@N7z@NArchive@@QAE@XZ
__unwindfunclet$??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ$9:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 192				; 000000c0H
	jmp	??1CUInt64DefVector@N7z@NArchive@@QAE@XZ
__ehhandler$??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CArchiveDatabaseOut@N7z@NArchive@@QAE@XZ ENDP	; NArchive::N7z::CArchiveDatabaseOut::~CArchiveDatabaseOut
PUBLIC	??0?$CRecordVector@I@@QAE@XZ			; CRecordVector<unsigned int>::CRecordVector<unsigned int>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0COutFolders@N7z@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0COutFolders@N7z@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0COutFolders@N7z@NArchive@@QAE@XZ$1
__ehfuncinfo$??0COutFolders@N7z@NArchive@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0COutFolders@N7z@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0COutFolders@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0COutFolders@N7z@NArchive@@QAE@XZ PROC		; NArchive::N7z::COutFolders::COutFolders, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0COutFolders@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CUInt32DefVector@N7z@NArchive@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0COutFolders@N7z@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CUInt32DefVector@N7z@NArchive@@QAE@XZ
__unwindfunclet$??0COutFolders@N7z@NArchive@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
__ehhandler$??0COutFolders@N7z@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0COutFolders@N7z@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0COutFolders@N7z@NArchive@@QAE@XZ ENDP		; NArchive::N7z::COutFolders::COutFolders
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1COutFolders@N7z@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1COutFolders@N7z@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1COutFolders@N7z@NArchive@@QAE@XZ$1
__ehfuncinfo$??1COutFolders@N7z@NArchive@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1COutFolders@N7z@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1COutFolders@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1COutFolders@N7z@NArchive@@QAE@XZ PROC		; NArchive::N7z::COutFolders::~COutFolders, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1COutFolders@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CUInt32DefVector@N7z@NArchive@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1COutFolders@N7z@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CUInt32DefVector@N7z@NArchive@@QAE@XZ
__unwindfunclet$??1COutFolders@N7z@NArchive@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
__ehhandler$??1COutFolders@N7z@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1COutFolders@N7z@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1COutFolders@N7z@NArchive@@QAE@XZ ENDP		; NArchive::N7z::COutFolders::~COutFolders
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ$0
__ehfuncinfo$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CUInt32DefVector@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CUInt32DefVector@N7z@NArchive@@QAE@XZ PROC		; NArchive::N7z::CUInt32DefVector::CUInt32DefVector, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::CRecordVector<bool>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::CRecordVector<unsigned int>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
__ehhandler$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CUInt32DefVector@N7z@NArchive@@QAE@XZ ENDP		; NArchive::N7z::CUInt32DefVector::CUInt32DefVector
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CUInt64DefVector@N7z@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CUInt64DefVector@N7z@NArchive@@QAE@XZ$0
__ehfuncinfo$??0CUInt64DefVector@N7z@NArchive@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CUInt64DefVector@N7z@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CUInt64DefVector@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CUInt64DefVector@N7z@NArchive@@QAE@XZ PROC		; NArchive::N7z::CUInt64DefVector::CUInt64DefVector, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CUInt64DefVector@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::CRecordVector<bool>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CUInt64DefVector@N7z@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
__ehhandler$??0CUInt64DefVector@N7z@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CUInt64DefVector@N7z@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CUInt64DefVector@N7z@NArchive@@QAE@XZ ENDP		; NArchive::N7z::CUInt64DefVector::CUInt64DefVector
PUBLIC	?InitSolid@COutHandler@N7z@NArchive@@QAEXXZ	; NArchive::N7z::COutHandler::InitSolid
PUBLIC	?Init@CBoolPair@@QAEXXZ				; CBoolPair::Init
PUBLIC	?InitProps@COutHandler@N7z@NArchive@@QAEXXZ	; NArchive::N7z::COutHandler::InitProps
EXTRN	?Init@CMultiMethodProps@NArchive@@QAEXXZ:PROC	; NArchive::CMultiMethodProps::Init
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?InitProps@COutHandler@N7z@NArchive@@QAEXXZ PROC	; NArchive::N7z::COutHandler::InitProps
; _this$ = ecx
; Line 686
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 687
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Init@CMultiMethodProps@NArchive@@QAEXXZ ; NArchive::CMultiMethodProps::Init
; Line 689
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+72], 0
; Line 690
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+98], 1
; Line 691
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+99], 0
; Line 692
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+100], 0
; Line 695
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 101				; 00000065H
	call	?Init@CBoolPair@@QAEXXZ			; CBoolPair::Init
; Line 696
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 103				; 00000067H
	call	?Init@CBoolPair@@QAEXXZ			; CBoolPair::Init
; Line 697
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 105				; 00000069H
	call	?Init@CBoolPair@@QAEXXZ			; CBoolPair::Init
; Line 699
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+107], 1
; Line 703
	mov	ecx, DWORD PTR _this$[ebp]
	call	?InitSolid@COutHandler@N7z@NArchive@@QAEXXZ ; NArchive::N7z::COutHandler::InitSolid
; Line 704
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?InitProps@COutHandler@N7z@NArchive@@QAEXXZ ENDP	; NArchive::N7z::COutHandler::InitProps
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Init@CBoolPair@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Init@CBoolPair@@QAEXXZ PROC				; CBoolPair::Init, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mytypes.h
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 19
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax], 0
; Line 20
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1], 0
; Line 21
	mov	esp, ebp
	pop	ebp
	ret	0
?Init@CBoolPair@@QAEXXZ ENDP				; CBoolPair::Init
_TEXT	ENDS
PUBLIC	?InitSolidSize@COutHandler@N7z@NArchive@@QAEXXZ	; NArchive::N7z::COutHandler::InitSolidSize
PUBLIC	?InitSolidFiles@COutHandler@N7z@NArchive@@QAEXXZ ; NArchive::N7z::COutHandler::InitSolidFiles
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?InitSolid@COutHandler@N7z@NArchive@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?InitSolid@COutHandler@N7z@NArchive@@QAEXXZ PROC	; NArchive::N7z::COutHandler::InitSolid, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zhandler.h
; Line 64
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 65
	mov	ecx, DWORD PTR _this$[ebp]
	call	?InitSolidFiles@COutHandler@N7z@NArchive@@QAEXXZ ; NArchive::N7z::COutHandler::InitSolidFiles
; Line 66
	mov	ecx, DWORD PTR _this$[ebp]
	call	?InitSolidSize@COutHandler@N7z@NArchive@@QAEXXZ ; NArchive::N7z::COutHandler::InitSolidSize
; Line 67
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+97], 0
; Line 68
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+96], 0
; Line 69
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?InitSolid@COutHandler@N7z@NArchive@@QAEXXZ ENDP	; NArchive::N7z::COutHandler::InitSolid
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?InitSolidFiles@COutHandler@N7z@NArchive@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?InitSolidFiles@COutHandler@N7z@NArchive@@QAEXXZ PROC	; NArchive::N7z::COutHandler::InitSolidFiles, COMDAT
; _this$ = ecx
; Line 61
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+80], -1
	mov	DWORD PTR [eax+84], -1
	mov	esp, ebp
	pop	ebp
	ret	0
?InitSolidFiles@COutHandler@N7z@NArchive@@QAEXXZ ENDP	; NArchive::N7z::COutHandler::InitSolidFiles
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?InitSolidSize@COutHandler@N7z@NArchive@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?InitSolidSize@COutHandler@N7z@NArchive@@QAEXXZ PROC	; NArchive::N7z::COutHandler::InitSolidSize, COMDAT
; _this$ = ecx
; Line 62
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+88], -1
	mov	DWORD PTR [eax+92], -1
	mov	esp, ebp
	pop	ebp
	ret	0
?InitSolidSize@COutHandler@N7z@NArchive@@QAEXXZ ENDP	; NArchive::N7z::COutHandler::InitSolidSize
_TEXT	ENDS
PUBLIC	??BUString@@QBEPB_WXZ				; UString::operator wchar_t const *
PUBLIC	?Len@UString@@QBEIXZ				; UString::Len
PUBLIC	?MakeLower_Ascii@UString@@QAEXXZ		; UString::MakeLower_Ascii
PUBLIC	?SetSolidFromString@COutHandler@N7z@NArchive@@AAEJABVUString@@@Z ; NArchive::N7z::COutHandler::SetSolidFromString
EXTRN	?ConvertStringToUInt64@@YG_KPB_WPAPB_W@Z:PROC	; ConvertStringToUInt64
EXTRN	??0UString@@QAE@ABV0@@Z:PROC			; UString::UString
xdata$x	SEGMENT
__unwindtable$?SetSolidFromString@COutHandler@N7z@NArchive@@AAEJABVUString@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetSolidFromString@COutHandler@N7z@NArchive@@AAEJABVUString@@@Z$0
__ehfuncinfo$?SetSolidFromString@COutHandler@N7z@NArchive@@AAEJABVUString@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetSolidFromString@COutHandler@N7z@NArchive@@AAEJABVUString@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv138 = -96						; size = 4
tv87 = -92						; size = 4
$T76439 = -88						; size = 4
$T76438 = -84						; size = 4
$T76437 = -80						; size = 4
$T76436 = -76						; size = 4
_numBits$74484 = -72					; size = 4
_c$74480 = -68						; size = 2
_v$74471 = -64						; size = 8
_end$74470 = -52					; size = 4
_start$74468 = -44					; size = 4
_i$74464 = -40						; size = 4
_s2$ = -32						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_s$ = 8							; size = 4
?SetSolidFromString@COutHandler@N7z@NArchive@@AAEJABVUString@@@Z PROC ; NArchive::N7z::COutHandler::SetSolidFromString
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zhandlerout.cpp
; Line 707
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetSolidFromString@COutHandler@N7z@NArchive@@AAEJABVUString@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-96]
	mov	ecx, 21					; 00000015H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 708
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	lea	ecx, DWORD PTR _s2$[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 709
	lea	ecx, DWORD PTR _s2$[ebp]
	call	?MakeLower_Ascii@UString@@QAEXXZ	; UString::MakeLower_Ascii
; Line 710
	mov	DWORD PTR _i$74464[ebp], 0
$LN16@SetSolidFr:
	lea	ecx, DWORD PTR _s2$[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	cmp	DWORD PTR _i$74464[ebp], eax
	jae	$LN15@SetSolidFr
; Line 712
	lea	ecx, DWORD PTR _s2$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	ecx, DWORD PTR _i$74464[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	mov	DWORD PTR _start$74468[ebp], edx
; Line 714
	lea	eax, DWORD PTR _end$74470[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$74468[ebp]
	push	ecx
	call	?ConvertStringToUInt64@@YG_KPB_WPAPB_W@Z ; ConvertStringToUInt64
	mov	DWORD PTR _v$74471[ebp], eax
	mov	DWORD PTR _v$74471[ebp+4], edx
; Line 715
	mov	edx, DWORD PTR _start$74468[ebp]
	cmp	edx, DWORD PTR _end$74470[ebp]
	jne	SHORT $LN14@SetSolidFr
; Line 717
	lea	ecx, DWORD PTR _s2$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	ecx, DWORD PTR _i$74464[ebp]
	movzx	edx, WORD PTR [eax+ecx*2]
	mov	eax, DWORD PTR _i$74464[ebp]
	add	eax, 1
	mov	DWORD PTR _i$74464[ebp], eax
	cmp	edx, 101				; 00000065H
	je	SHORT $LN19@SetSolidFr
	mov	DWORD PTR tv87[ebp], 1
	jmp	SHORT $LN20@SetSolidFr
$LN19@SetSolidFr:
	mov	DWORD PTR tv87[ebp], 0
$LN20@SetSolidFr:
	cmp	DWORD PTR tv87[ebp], 0
	je	SHORT $LN13@SetSolidFr
; Line 718
	mov	DWORD PTR $T76436[ebp], -2147024809	; 80070057H
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _s2$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T76436[ebp]
	jmp	$LN17@SetSolidFr
$LN13@SetSolidFr:
; Line 719
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+97], 1
; Line 720
	jmp	$LN16@SetSolidFr
$LN14@SetSolidFr:
; Line 722
	mov	edx, DWORD PTR _end$74470[ebp]
	sub	edx, DWORD PTR _start$74468[ebp]
	sar	edx, 1
	add	edx, DWORD PTR _i$74464[ebp]
	mov	DWORD PTR _i$74464[ebp], edx
; Line 723
	lea	ecx, DWORD PTR _s2$[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	cmp	DWORD PTR _i$74464[ebp], eax
	jne	SHORT $LN12@SetSolidFr
; Line 724
	mov	DWORD PTR $T76437[ebp], -2147024809	; 80070057H
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _s2$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T76437[ebp]
	jmp	$LN17@SetSolidFr
$LN12@SetSolidFr:
; Line 725
	lea	ecx, DWORD PTR _s2$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	ecx, DWORD PTR _i$74464[ebp]
	mov	dx, WORD PTR [eax+ecx*2]
	mov	WORD PTR _c$74480[ebp], dx
	mov	eax, DWORD PTR _i$74464[ebp]
	add	eax, 1
	mov	DWORD PTR _i$74464[ebp], eax
; Line 726
	movzx	ecx, WORD PTR _c$74480[ebp]
	cmp	ecx, 102				; 00000066H
	jne	SHORT $LN11@SetSolidFr
; Line 728
	cmp	DWORD PTR _v$74471[ebp+4], 0
	ja	SHORT $LN10@SetSolidFr
	jb	SHORT $LN23@SetSolidFr
	cmp	DWORD PTR _v$74471[ebp], 1
	jae	SHORT $LN10@SetSolidFr
$LN23@SetSolidFr:
; Line 729
	mov	DWORD PTR _v$74471[ebp], 1
	mov	DWORD PTR _v$74471[ebp+4], 0
$LN10@SetSolidFr:
; Line 730
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _v$74471[ebp]
	mov	DWORD PTR [edx+80], eax
	mov	ecx, DWORD PTR _v$74471[ebp+4]
	mov	DWORD PTR [edx+84], ecx
; Line 732
	jmp	$LN9@SetSolidFr
$LN11@SetSolidFr:
; Line 735
	movzx	edx, WORD PTR _c$74480[ebp]
	mov	DWORD PTR tv138[ebp], edx
	mov	eax, DWORD PTR tv138[ebp]
	sub	eax, 98					; 00000062H
	mov	DWORD PTR tv138[ebp], eax
	cmp	DWORD PTR tv138[ebp], 18		; 00000012H
	ja	SHORT $LN1@SetSolidFr
	mov	ecx, DWORD PTR tv138[ebp]
	movzx	edx, BYTE PTR $LN24@SetSolidFr[ecx]
	jmp	DWORD PTR $LN30@SetSolidFr[edx*4]
$LN6@SetSolidFr:
; Line 737
	mov	DWORD PTR _numBits$74484[ebp], 0
	jmp	SHORT $LN7@SetSolidFr
$LN5@SetSolidFr:
; Line 738
	mov	DWORD PTR _numBits$74484[ebp], 10	; 0000000aH
	jmp	SHORT $LN7@SetSolidFr
$LN4@SetSolidFr:
; Line 739
	mov	DWORD PTR _numBits$74484[ebp], 20	; 00000014H
	jmp	SHORT $LN7@SetSolidFr
$LN3@SetSolidFr:
; Line 740
	mov	DWORD PTR _numBits$74484[ebp], 30	; 0000001eH
	jmp	SHORT $LN7@SetSolidFr
$LN2@SetSolidFr:
; Line 741
	mov	DWORD PTR _numBits$74484[ebp], 40	; 00000028H
	jmp	SHORT $LN7@SetSolidFr
$LN1@SetSolidFr:
; Line 742
	mov	DWORD PTR $T76438[ebp], -2147024809	; 80070057H
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _s2$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T76438[ebp]
	jmp	SHORT $LN17@SetSolidFr
$LN7@SetSolidFr:
; Line 744
	mov	eax, DWORD PTR _v$74471[ebp]
	mov	edx, DWORD PTR _v$74471[ebp+4]
	mov	ecx, DWORD PTR _numBits$74484[ebp]
	call	__allshl
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+88], eax
	mov	DWORD PTR [ecx+92], edx
; Line 745
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+96], 1
$LN9@SetSolidFr:
; Line 747
	jmp	$LN16@SetSolidFr
$LN15@SetSolidFr:
; Line 748
	mov	DWORD PTR $T76439[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _s2$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T76439[ebp]
$LN17@SetSolidFr:
; Line 749
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN29@SetSolidFr
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 96					; 00000060H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN29@SetSolidFr:
	DD	2
	DD	$LN28@SetSolidFr
$LN28@SetSolidFr:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN25@SetSolidFr
	DD	-52					; ffffffccH
	DD	4
	DD	$LN26@SetSolidFr
$LN26@SetSolidFr:
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
$LN25@SetSolidFr:
	DB	115					; 00000073H
	DB	50					; 00000032H
	DB	0
	npad	1
$LN30@SetSolidFr:
	DD	$LN6@SetSolidFr
	DD	$LN3@SetSolidFr
	DD	$LN5@SetSolidFr
	DD	$LN4@SetSolidFr
	DD	$LN2@SetSolidFr
	DD	$LN1@SetSolidFr
$LN24@SetSolidFr:
	DB	0
	DB	5
	DB	5
	DB	5
	DB	5
	DB	1
	DB	5
	DB	5
	DB	5
	DB	2
	DB	5
	DB	3
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SetSolidFromString@COutHandler@N7z@NArchive@@AAEJABVUString@@@Z$0:
	lea	ecx, DWORD PTR _s2$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$?SetSolidFromString@COutHandler@N7z@NArchive@@AAEJABVUString@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-92]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetSolidFromString@COutHandler@N7z@NArchive@@AAEJABVUString@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetSolidFromString@COutHandler@N7z@NArchive@@AAEJABVUString@@@Z ENDP ; NArchive::N7z::COutHandler::SetSolidFromString
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Len@UString@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Len@UString@@QBEIXZ PROC				; UString::Len, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 472
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Len@UString@@QBEIXZ ENDP				; UString::Len
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??BUString@@QBEPB_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BUString@@QBEPB_WXZ PROC				; UString::operator wchar_t const *, COMDAT
; _this$ = ecx
; Line 476
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??BUString@@QBEPB_WXZ ENDP				; UString::operator wchar_t const *
_TEXT	ENDS
EXTRN	?MyStringLower_Ascii@@YGXPA_W@Z:PROC		; MyStringLower_Ascii
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?MakeLower_Ascii@UString@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MakeLower_Ascii@UString@@QAEXXZ PROC			; UString::MakeLower_Ascii, COMDAT
; _this$ = ecx
; Line 545
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?MyStringLower_Ascii@@YGXPA_W@Z		; MyStringLower_Ascii
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?MakeLower_Ascii@UString@@QAEXXZ ENDP			; UString::MakeLower_Ascii
_TEXT	ENDS
PUBLIC	?SetSolidFromPROPVARIANT@COutHandler@N7z@NArchive@@AAEJABUtagPROPVARIANT@@@Z ; NArchive::N7z::COutHandler::SetSolidFromPROPVARIANT
EXTRN	?StringToBool@@YG_NABVUString@@AA_N@Z:PROC	; StringToBool
xdata$x	SEGMENT
__unwindtable$?SetSolidFromPROPVARIANT@COutHandler@N7z@NArchive@@AAEJABUtagPROPVARIANT@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetSolidFromPROPVARIANT@COutHandler@N7z@NArchive@@AAEJABUtagPROPVARIANT@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?SetSolidFromPROPVARIANT@COutHandler@N7z@NArchive@@AAEJABUtagPROPVARIANT@@@Z$1
__ehfuncinfo$?SetSolidFromPROPVARIANT@COutHandler@N7z@NArchive@@AAEJABUtagPROPVARIANT@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?SetSolidFromPROPVARIANT@COutHandler@N7z@NArchive@@AAEJABUtagPROPVARIANT@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv65 = -64						; size = 4
$T76463 = -60						; size = 12
$T76462 = -48						; size = 4
$T76461 = -44						; size = 12
$T76460 = -29						; size = 1
_isSolid$ = -21						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_value$ = 8						; size = 4
?SetSolidFromPROPVARIANT@COutHandler@N7z@NArchive@@AAEJABUtagPROPVARIANT@@@Z PROC ; NArchive::N7z::COutHandler::SetSolidFromPROPVARIANT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zhandlerout.cpp
; Line 752
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetSolidFromPROPVARIANT@COutHandler@N7z@NArchive@@AAEJABUtagPROPVARIANT@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 52					; 00000034H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 754
	mov	eax, DWORD PTR _value$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR tv65[ebp], ecx
	cmp	DWORD PTR tv65[ebp], 0
	je	SHORT $LN7@SetSolidFr@2
	cmp	DWORD PTR tv65[ebp], 8
	je	SHORT $LN5@SetSolidFr@2
	cmp	DWORD PTR tv65[ebp], 11			; 0000000bH
	je	SHORT $LN6@SetSolidFr@2
	jmp	$LN3@SetSolidFr@2
$LN7@SetSolidFr@2:
; Line 756
	mov	BYTE PTR _isSolid$[ebp], 1
	jmp	$LN8@SetSolidFr@2
$LN6@SetSolidFr@2:
; Line 757
	mov	edx, DWORD PTR _value$[ebp]
	movsx	eax, WORD PTR [edx+8]
	neg	eax
	sbb	eax, eax
	neg	eax
	mov	BYTE PTR _isSolid$[ebp], al
	jmp	SHORT $LN8@SetSolidFr@2
$LN5@SetSolidFr@2:
; Line 759
	mov	ecx, DWORD PTR _value$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	lea	ecx, DWORD PTR $T76461[ebp]
	call	??0UString@@QAE@PB_W@Z			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR _isSolid$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T76461[ebp]
	push	ecx
	call	?StringToBool@@YG_NABVUString@@AA_N@Z	; StringToBool
	mov	BYTE PTR $T76460[ebp], al
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T76461[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	movzx	edx, BYTE PTR $T76460[ebp]
	test	edx, edx
	je	SHORT $LN4@SetSolidFr@2
; Line 760
	jmp	SHORT $LN8@SetSolidFr@2
$LN4@SetSolidFr@2:
; Line 761
	mov	eax, DWORD PTR _value$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	lea	ecx, DWORD PTR $T76463[ebp]
	call	??0UString@@QAE@PB_W@Z			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	lea	edx, DWORD PTR $T76463[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSolidFromString@COutHandler@N7z@NArchive@@AAEJABVUString@@@Z ; NArchive::N7z::COutHandler::SetSolidFromString
	mov	DWORD PTR $T76462[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T76463[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T76462[ebp]
	jmp	SHORT $LN10@SetSolidFr@2
$LN3@SetSolidFr@2:
; Line 762
	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN10@SetSolidFr@2
$LN8@SetSolidFr@2:
; Line 764
	movzx	eax, BYTE PTR _isSolid$[ebp]
	test	eax, eax
	je	SHORT $LN2@SetSolidFr@2
; Line 765
	mov	ecx, DWORD PTR _this$[ebp]
	call	?InitSolid@COutHandler@N7z@NArchive@@QAEXXZ ; NArchive::N7z::COutHandler::InitSolid
; Line 766
	jmp	SHORT $LN1@SetSolidFr@2
$LN2@SetSolidFr@2:
; Line 767
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+80], 1
	mov	DWORD PTR [ecx+84], 0
$LN1@SetSolidFr@2:
; Line 768
	xor	eax, eax
$LN10@SetSolidFr@2:
; Line 769
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@SetSolidFr@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 64					; 00000040H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN17@SetSolidFr@2:
	DD	1
	DD	$LN16@SetSolidFr@2
$LN16@SetSolidFr@2:
	DD	-21					; ffffffebH
	DD	1
	DD	$LN14@SetSolidFr@2
$LN14@SetSolidFr@2:
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	83					; 00000053H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SetSolidFromPROPVARIANT@COutHandler@N7z@NArchive@@AAEJABUtagPROPVARIANT@@@Z$0:
	lea	ecx, DWORD PTR $T76461[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?SetSolidFromPROPVARIANT@COutHandler@N7z@NArchive@@AAEJABUtagPROPVARIANT@@@Z$1:
	lea	ecx, DWORD PTR $T76463[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$?SetSolidFromPROPVARIANT@COutHandler@N7z@NArchive@@AAEJABUtagPROPVARIANT@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-60]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetSolidFromPROPVARIANT@COutHandler@N7z@NArchive@@AAEJABUtagPROPVARIANT@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetSolidFromPROPVARIANT@COutHandler@N7z@NArchive@@AAEJABUtagPROPVARIANT@@@Z ENDP ; NArchive::N7z::COutHandler::SetSolidFromPROPVARIANT
PUBLIC	?IsEqualTo@UString@@QBE_NPBD@Z			; UString::IsEqualTo
PUBLIC	?IsEmpty@UString@@QBE_NXZ			; UString::IsEmpty
PUBLIC	?SetProperty@COutHandler@N7z@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z ; NArchive::N7z::COutHandler::SetProperty
EXTRN	?SetProperty@CMultiMethodProps@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z:PROC ; NArchive::CMultiMethodProps::SetProperty
EXTRN	?PROPVARIANT_to_bool@@YGJABUtagPROPVARIANT@@AA_N@Z:PROC ; PROPVARIANT_to_bool
EXTRN	?ParseStringToUInt32@@YGIABVUString@@AAI@Z:PROC	; ParseStringToUInt32
EXTRN	?Delete@UString@@QAEXI@Z:PROC			; UString::Delete
xdata$x	SEGMENT
__unwindtable$?SetProperty@COutHandler@N7z@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetProperty@COutHandler@N7z@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z$0
__ehfuncinfo$?SetProperty@COutHandler@N7z@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetProperty@COutHandler@N7z@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T76488 = -132						; size = 4
$T76487 = -128						; size = 4
$T76486 = -124						; size = 4
$T76485 = -120						; size = 4
$T76484 = -116						; size = 4
$T76483 = -112						; size = 4
$T76482 = -108						; size = 4
$T76481 = -104						; size = 4
$T76480 = -100						; size = 4
$T76479 = -96						; size = 4
$T76478 = -92						; size = 4
$T76477 = -88						; size = 4
$T76476 = -84						; size = 4
$T76475 = -80						; size = 4
$T76474 = -76						; size = 4
___result__$74565 = -72					; size = 4
___result__$74557 = -68					; size = 4
_compressHeadersFull$74556 = -57			; size = 1
_index$ = -52						; size = 4
_number$ = -44						; size = 4
_name$ = -32						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_nameSpec$ = 8						; size = 4
_value$ = 12						; size = 4
?SetProperty@COutHandler@N7z@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z PROC ; NArchive::N7z::COutHandler::SetProperty
; _this$ = ecx
; Line 779
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetProperty@COutHandler@N7z@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 120				; 00000078H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-132]
	mov	ecx, 30					; 0000001eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 780
	mov	eax, DWORD PTR _nameSpec$[ebp]
	push	eax
	lea	ecx, DWORD PTR _name$[ebp]
	call	??0UString@@QAE@PB_W@Z			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 781
	lea	ecx, DWORD PTR _name$[ebp]
	call	?MakeLower_Ascii@UString@@QAEXXZ	; UString::MakeLower_Ascii
; Line 782
	lea	ecx, DWORD PTR _name$[ebp]
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN15@SetPropert
; Line 783
	mov	DWORD PTR $T76474[ebp], -2147024809	; 80070057H
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _name$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T76474[ebp]
	jmp	$LN16@SetPropert
$LN15@SetPropert:
; Line 785
	lea	ecx, DWORD PTR _name$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	movzx	edx, WORD PTR [eax]
	cmp	edx, 115				; 00000073H
	jne	$LN14@SetPropert
; Line 787
	push	0
	lea	ecx, DWORD PTR _name$[ebp]
	call	?Delete@UString@@QAEXI@Z		; UString::Delete
; Line 788
	lea	ecx, DWORD PTR _name$[ebp]
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN13@SetPropert
; Line 789
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSolidFromPROPVARIANT@COutHandler@N7z@NArchive@@AAEJABUtagPROPVARIANT@@@Z ; NArchive::N7z::COutHandler::SetSolidFromPROPVARIANT
	mov	DWORD PTR $T76475[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _name$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T76475[ebp]
	jmp	$LN16@SetPropert
$LN13@SetPropert:
; Line 790
	mov	edx, DWORD PTR _value$[ebp]
	movzx	eax, WORD PTR [edx]
	test	eax, eax
	je	SHORT $LN12@SetPropert
; Line 791
	mov	DWORD PTR $T76476[ebp], -2147024809	; 80070057H
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _name$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T76476[ebp]
	jmp	$LN16@SetPropert
$LN12@SetPropert:
; Line 792
	lea	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSolidFromString@COutHandler@N7z@NArchive@@AAEJABVUString@@@Z ; NArchive::N7z::COutHandler::SetSolidFromString
	mov	DWORD PTR $T76477[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _name$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T76477[ebp]
	jmp	$LN16@SetPropert
$LN14@SetPropert:
; Line 796
	lea	edx, DWORD PTR _number$[ebp]
	push	edx
	lea	eax, DWORD PTR _name$[ebp]
	push	eax
	call	?ParseStringToUInt32@@YGIABVUString@@AAI@Z ; ParseStringToUInt32
	mov	DWORD PTR _index$[ebp], eax
; Line 798
	cmp	DWORD PTR _index$[ebp], 0
	jne	$LN11@SetPropert
; Line 800
	push	OFFSET $SG74549
	lea	ecx, DWORD PTR _name$[ebp]
	call	?IsEqualTo@UString@@QBE_NPBD@Z		; UString::IsEqualTo
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN10@SetPropert
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 72					; 00000048H
	push	edx
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	call	?PROPVARIANT_to_bool@@YGJABUtagPROPVARIANT@@AA_N@Z ; PROPVARIANT_to_bool
	mov	DWORD PTR $T76478[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _name$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T76478[ebp]
	jmp	$LN16@SetPropert
$LN10@SetPropert:
; Line 801
	push	OFFSET $SG74552
	lea	ecx, DWORD PTR _name$[ebp]
	call	?IsEqualTo@UString@@QBE_NPBD@Z		; UString::IsEqualTo
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN9@SetPropert
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 98					; 00000062H
	push	edx
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	call	?PROPVARIANT_to_bool@@YGJABUtagPROPVARIANT@@AA_N@Z ; PROPVARIANT_to_bool
	mov	DWORD PTR $T76479[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _name$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T76479[ebp]
	jmp	$LN16@SetPropert
$LN9@SetPropert:
; Line 804
	push	OFFSET $SG74555
	lea	ecx, DWORD PTR _name$[ebp]
	call	?IsEqualTo@UString@@QBE_NPBD@Z		; UString::IsEqualTo
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN8@SetPropert
; Line 806
	mov	BYTE PTR _compressHeadersFull$74556[ebp], 1
; Line 807
	lea	edx, DWORD PTR _compressHeadersFull$74556[ebp]
	push	edx
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	call	?PROPVARIANT_to_bool@@YGJABUtagPROPVARIANT@@AA_N@Z ; PROPVARIANT_to_bool
	mov	DWORD PTR ___result__$74557[ebp], eax
	cmp	DWORD PTR ___result__$74557[ebp], 0
	je	SHORT $LN7@SetPropert
	mov	ecx, DWORD PTR ___result__$74557[ebp]
	mov	DWORD PTR $T76480[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _name$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T76480[ebp]
	jmp	$LN16@SetPropert
$LN7@SetPropert:
; Line 808
	movzx	edx, BYTE PTR _compressHeadersFull$74556[ebp]
	neg	edx
	sbb	edx, edx
	and	edx, 2147024809				; 7ff8ffa9H
	add	edx, -2147024809			; 80070057H
	mov	DWORD PTR $T76481[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _name$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T76481[ebp]
	jmp	$LN16@SetPropert
$LN8@SetPropert:
; Line 811
	push	OFFSET $SG74564
	lea	ecx, DWORD PTR _name$[ebp]
	call	?IsEqualTo@UString@@QBE_NPBD@Z		; UString::IsEqualTo
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@SetPropert
; Line 813
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	push	ecx
	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	call	?PROPVARIANT_to_bool@@YGJABUtagPROPVARIANT@@AA_N@Z ; PROPVARIANT_to_bool
	mov	DWORD PTR ___result__$74565[ebp], eax
	cmp	DWORD PTR ___result__$74565[ebp], 0
	je	SHORT $LN5@SetPropert
	mov	eax, DWORD PTR ___result__$74565[ebp]
	mov	DWORD PTR $T76482[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _name$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T76482[ebp]
	jmp	$LN16@SetPropert
$LN5@SetPropert:
; Line 814
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+99], 1
; Line 815
	mov	DWORD PTR $T76483[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _name$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T76483[ebp]
	jmp	$LN16@SetPropert
$LN6@SetPropert:
; Line 818
	push	OFFSET $SG74571
	lea	ecx, DWORD PTR _name$[ebp]
	call	?IsEqualTo@UString@@QBE_NPBD@Z		; UString::IsEqualTo
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN4@SetPropert
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 101				; 00000065H
	push	eax
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	call	?PROPVARIANT_to_BoolPair@N7z@NArchive@@YGJABUtagPROPVARIANT@@AAUCBoolPair@@@Z ; NArchive::N7z::PROPVARIANT_to_BoolPair
	mov	DWORD PTR $T76484[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _name$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T76484[ebp]
	jmp	$LN16@SetPropert
$LN4@SetPropert:
; Line 819
	push	OFFSET $SG74574
	lea	ecx, DWORD PTR _name$[ebp]
	call	?IsEqualTo@UString@@QBE_NPBD@Z		; UString::IsEqualTo
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN3@SetPropert
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 103				; 00000067H
	push	eax
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	call	?PROPVARIANT_to_BoolPair@N7z@NArchive@@YGJABUtagPROPVARIANT@@AAUCBoolPair@@@Z ; NArchive::N7z::PROPVARIANT_to_BoolPair
	mov	DWORD PTR $T76485[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _name$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T76485[ebp]
	jmp	$LN16@SetPropert
$LN3@SetPropert:
; Line 820
	push	OFFSET $SG74577
	lea	ecx, DWORD PTR _name$[ebp]
	call	?IsEqualTo@UString@@QBE_NPBD@Z		; UString::IsEqualTo
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@SetPropert
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 105				; 00000069H
	push	eax
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	call	?PROPVARIANT_to_BoolPair@N7z@NArchive@@YGJABUtagPROPVARIANT@@AAUCBoolPair@@@Z ; NArchive::N7z::PROPVARIANT_to_BoolPair
	mov	DWORD PTR $T76486[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _name$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T76486[ebp]
	jmp	SHORT $LN16@SetPropert
$LN2@SetPropert:
; Line 822
	push	OFFSET $SG74580
	lea	ecx, DWORD PTR _name$[ebp]
	call	?IsEqualTo@UString@@QBE_NPBD@Z		; UString::IsEqualTo
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN11@SetPropert
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 107				; 0000006bH
	push	eax
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	call	?PROPVARIANT_to_bool@@YGJABUtagPROPVARIANT@@AA_N@Z ; PROPVARIANT_to_bool
	mov	DWORD PTR $T76487[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _name$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T76487[ebp]
	jmp	SHORT $LN16@SetPropert
$LN11@SetPropert:
; Line 826
	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	lea	ecx, DWORD PTR _name$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetProperty@CMultiMethodProps@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z ; NArchive::CMultiMethodProps::SetProperty
	mov	DWORD PTR $T76488[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _name$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T76488[ebp]
$LN16@SetPropert:
; Line 827
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN24@SetPropert
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 132				; 00000084H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN24@SetPropert:
	DD	3
	DD	$LN23@SetPropert
$LN23@SetPropert:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN19@SetPropert
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN20@SetPropert
	DD	-57					; ffffffc7H
	DD	1
	DD	$LN21@SetPropert
$LN21@SetPropert:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	72					; 00000048H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	70					; 00000046H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	0
$LN20@SetPropert:
	DB	110					; 0000006eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	98					; 00000062H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN19@SetPropert:
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SetProperty@COutHandler@N7z@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z$0:
	lea	ecx, DWORD PTR _name$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$?SetProperty@COutHandler@N7z@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-128]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetProperty@COutHandler@N7z@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetProperty@COutHandler@N7z@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z ENDP ; NArchive::N7z::COutHandler::SetProperty
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsEmpty@UString@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@UString@@QBE_NXZ PROC				; UString::IsEmpty, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 473
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+4], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@UString@@QBE_NXZ ENDP				; UString::IsEmpty
_TEXT	ENDS
EXTRN	?StringsAreEqual_Ascii@@YG_NPB_WPBD@Z:PROC	; StringsAreEqual_Ascii
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsEqualTo@UString@@QBE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
?IsEqualTo@UString@@QBE_NPBD@Z PROC			; UString::IsEqualTo, COMDAT
; _this$ = ecx
; Line 547
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	?StringsAreEqual_Ascii@@YG_NPB_WPBD@Z	; StringsAreEqual_Ascii
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?IsEqualTo@UString@@QBE_NPBD@Z ENDP			; UString::IsEqualTo
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
_TEXT	SEGMENT
___result__$74526 = -4					; size = 4
_prop$ = 8						; size = 4
_dest$ = 12						; size = 4
?PROPVARIANT_to_BoolPair@N7z@NArchive@@YGJABUtagPROPVARIANT@@AAUCBoolPair@@@Z PROC ; NArchive::N7z::PROPVARIANT_to_BoolPair
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zhandlerout.cpp
; Line 772
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 773
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _prop$[ebp]
	push	ecx
	call	?PROPVARIANT_to_bool@@YGJABUtagPROPVARIANT@@AA_N@Z ; PROPVARIANT_to_bool
	mov	DWORD PTR ___result__$74526[ebp], eax
	cmp	DWORD PTR ___result__$74526[ebp], 0
	je	SHORT $LN1@PROPVARIAN
	mov	eax, DWORD PTR ___result__$74526[ebp]
	jmp	SHORT $LN2@PROPVARIAN
$LN1@PROPVARIAN:
; Line 774
	mov	edx, DWORD PTR _dest$[ebp]
	mov	BYTE PTR [edx+1], 1
; Line 775
	xor	eax, eax
$LN2@PROPVARIAN:
; Line 776
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?PROPVARIANT_to_BoolPair@N7z@NArchive@@YGJABUtagPROPVARIANT@@AAUCBoolPair@@@Z ENDP ; NArchive::N7z::PROPVARIANT_to_BoolPair
_TEXT	ENDS
PUBLIC	?DeleteFrontal@?$CObjectVector@VCOneMethodInfo@@@@QAEXI@Z ; CObjectVector<COneMethodInfo>::DeleteFrontal
PUBLIC	?GetNumEmptyMethods@CMultiMethodProps@NArchive@@QBEIXZ ; NArchive::CMultiMethodProps::GetNumEmptyMethods
PUBLIC	?Add@?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEIUCBond2@N7z@NArchive@@@Z ; CRecordVector<NArchive::N7z::CBond2>::Add
PUBLIC	?Clear@?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEXXZ ; CRecordVector<NArchive::N7z::CBond2>::Clear
PUBLIC	__$ArrayPad$
PUBLIC	?SetProperties@CHandler@N7z@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z ; NArchive::N7z::CHandler::SetProperties
xdata$x	SEGMENT
__catchsym$?SetProperties@CHandler@N7z@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?SetProperties@CHandler@N7z@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z$0
__tryblocktable$?SetProperties@CHandler@N7z@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$?SetProperties@CHandler@N7z@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z$3
__unwindtable$?SetProperties@CHandler@N7z@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$?SetProperties@CHandler@N7z@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z$2
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?SetProperties@CHandler@N7z@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?SetProperties@CHandler@N7z@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z
	DD	01H
	DD	FLAT:__tryblocktable$?SetProperties@CHandler@N7z@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv300 = -224						; size = 4
tv299 = -220						; size = 4
tv298 = -216						; size = 4
tv297 = -212						; size = 4
tv296 = -208						; size = 4
tv295 = -204						; size = 4
tv294 = -200						; size = 4
tv293 = -196						; size = 4
tv292 = -192						; size = 4
tv291 = -188						; size = 4
tv290 = -184						; size = 4
tv289 = -177						; size = 1
tv288 = -176						; size = 4
tv255 = -172						; size = 4
tv254 = -168						; size = 4
tv253 = -164						; size = 4
tv252 = -157						; size = 1
tv251 = -156						; size = 4
$T76514 = -152						; size = 4
$T76513 = -148						; size = 4
$T76512 = -144						; size = 4
$T76511 = -140						; size = 4
$T76510 = -136						; size = 4
$T76509 = -132						; size = 4
$T76508 = -128						; size = 4
$T76507 = -124						; size = 4
$T76506 = -120						; size = 4
_bond$74645 = -116					; size = 4
_k$74641 = -112						; size = 4
_bond$74638 = -108					; size = 4
_bond$74629 = -104					; size = 4
_k$74625 = -100						; size = 4
_numEmptyMethods$74623 = -96				; size = 4
___result__$74620 = -92					; size = 4
___result__$74611 = -88					; size = 4
_inStream$74610 = -80					; size = 4
___result__$74604 = -72					; size = 4
_bond$74603 = -64					; size = 12
_value$74598 = -48					; size = 4
_name$74594 = -40					; size = 12
_i$74590 = -24						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_this$ = 8						; size = 4
_names$ = 12						; size = 4
_values$ = 16						; size = 4
_numProps$ = 20						; size = 4
?SetProperties@CHandler@N7z@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z PROC ; NArchive::N7z::CHandler::SetProperties
; Line 830
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetProperties@CHandler@N7z@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
; Line 831
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 832
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 464				; 000001d0H
	call	?Clear@?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEXXZ ; CRecordVector<NArchive::N7z::CBond2>::Clear
; Line 833
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?InitProps@COutHandler@N7z@NArchive@@QAEXXZ ; NArchive::N7z::COutHandler::InitProps
; Line 835
	mov	DWORD PTR _i$74590[ebp], 0
	jmp	SHORT $LN26@SetPropert@2
$LN25@SetPropert@2:
	mov	eax, DWORD PTR _i$74590[ebp]
	add	eax, 1
	mov	DWORD PTR _i$74590[ebp], eax
$LN26@SetPropert@2:
	mov	ecx, DWORD PTR _i$74590[ebp]
	cmp	ecx, DWORD PTR _numProps$[ebp]
	jae	$LN24@SetPropert@2
; Line 837
	mov	edx, DWORD PTR _i$74590[ebp]
	mov	eax, DWORD PTR _names$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	lea	ecx, DWORD PTR _name$74594[ebp]
	call	??0UString@@QAE@PB_W@Z			; UString::UString
	mov	DWORD PTR tv251[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 1
; Line 838
	lea	ecx, DWORD PTR _name$74594[ebp]
	call	?MakeLower_Ascii@UString@@QAEXXZ	; UString::MakeLower_Ascii
; Line 839
	lea	ecx, DWORD PTR _name$74594[ebp]
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	mov	BYTE PTR tv252[ebp], al
	movzx	edx, BYTE PTR tv252[ebp]
	test	edx, edx
	je	SHORT $LN23@SetPropert@2
; Line 840
	mov	DWORD PTR $T76506[ebp], -2147024809	; 80070057H
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _name$74594[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T76506[ebp]
	jmp	$LN28@SetPropert@2
$LN23@SetPropert@2:
; Line 842
	mov	eax, DWORD PTR _i$74590[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _values$[ebp]
	mov	DWORD PTR _value$74598[ebp], eax
; Line 844
	lea	ecx, DWORD PTR _name$74594[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	DWORD PTR tv253[ebp], eax
	mov	ecx, DWORD PTR tv253[ebp]
	movzx	edx, WORD PTR [ecx]
	cmp	edx, 98					; 00000062H
	jne	$LN22@SetPropert@2
; Line 846
	mov	eax, DWORD PTR _value$74598[ebp]
	movzx	ecx, WORD PTR [eax]
	test	ecx, ecx
	je	SHORT $LN21@SetPropert@2
; Line 847
	mov	DWORD PTR $T76507[ebp], -2147024809	; 80070057H
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _name$74594[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T76507[ebp]
	jmp	$LN28@SetPropert@2
$LN21@SetPropert@2:
; Line 848
	push	0
	lea	ecx, DWORD PTR _name$74594[ebp]
	call	?Delete@UString@@QAEXI@Z		; UString::Delete
; Line 851
	lea	edx, DWORD PTR _bond$74603[ebp+4]
	push	edx
	lea	eax, DWORD PTR _bond$74603[ebp]
	push	eax
	lea	ecx, DWORD PTR _name$74594[ebp]
	push	ecx
	call	?ParseBond@N7z@NArchive@@YGJAAVUString@@AAI1@Z ; NArchive::N7z::ParseBond
	mov	DWORD PTR tv254[ebp], eax
	mov	edx, DWORD PTR tv254[ebp]
	mov	DWORD PTR ___result__$74604[ebp], edx
	cmp	DWORD PTR ___result__$74604[ebp], 0
	je	SHORT $LN20@SetPropert@2
	mov	eax, DWORD PTR ___result__$74604[ebp]
	mov	DWORD PTR $T76508[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _name$74594[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T76508[ebp]
	jmp	$LN28@SetPropert@2
$LN20@SetPropert@2:
; Line 852
	lea	ecx, DWORD PTR _name$74594[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	DWORD PTR tv255[ebp], eax
	mov	ecx, DWORD PTR tv255[ebp]
	movzx	edx, WORD PTR [ecx]
	cmp	edx, 58					; 0000003aH
	je	SHORT $LN19@SetPropert@2
; Line 853
	mov	DWORD PTR $T76509[ebp], -2147024809	; 80070057H
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _name$74594[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T76509[ebp]
	jmp	$LN28@SetPropert@2
$LN19@SetPropert@2:
; Line 854
	push	0
	lea	ecx, DWORD PTR _name$74594[ebp]
	call	?Delete@UString@@QAEXI@Z		; UString::Delete
; Line 855
	mov	DWORD PTR _inStream$74610[ebp], 0
; Line 856
	lea	eax, DWORD PTR _inStream$74610[ebp]
	push	eax
	lea	ecx, DWORD PTR _bond$74603[ebp+8]
	push	ecx
	lea	edx, DWORD PTR _name$74594[ebp]
	push	edx
	call	?ParseBond@N7z@NArchive@@YGJAAVUString@@AAI1@Z ; NArchive::N7z::ParseBond
	mov	DWORD PTR tv288[ebp], eax
	mov	eax, DWORD PTR tv288[ebp]
	mov	DWORD PTR ___result__$74611[ebp], eax
	cmp	DWORD PTR ___result__$74611[ebp], 0
	je	SHORT $LN18@SetPropert@2
	mov	ecx, DWORD PTR ___result__$74611[ebp]
	mov	DWORD PTR $T76510[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _name$74594[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T76510[ebp]
	jmp	$LN28@SetPropert@2
$LN18@SetPropert@2:
; Line 857
	cmp	DWORD PTR _inStream$74610[ebp], 0
	je	SHORT $LN17@SetPropert@2
; Line 858
	mov	DWORD PTR $T76511[ebp], -2147024809	; 80070057H
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _name$74594[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T76511[ebp]
	jmp	$LN28@SetPropert@2
$LN17@SetPropert@2:
; Line 859
	lea	ecx, DWORD PTR _name$74594[ebp]
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	mov	BYTE PTR tv289[ebp], al
	movzx	edx, BYTE PTR tv289[ebp]
	test	edx, edx
	jne	SHORT $LN16@SetPropert@2
; Line 860
	mov	DWORD PTR $T76512[ebp], -2147024809	; 80070057H
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _name$74594[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T76512[ebp]
	jmp	$LN28@SetPropert@2
$LN16@SetPropert@2:
; Line 861
	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	ecx, DWORD PTR _bond$74603[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _bond$74603[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _bond$74603[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 464				; 000001d0H
	call	?Add@?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEIUCBond2@N7z@NArchive@@@Z ; CRecordVector<NArchive::N7z::CBond2>::Add
; Line 862
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _name$74594[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	jmp	$LN25@SetPropert@2
$LN22@SetPropert@2:
; Line 865
	lea	ecx, DWORD PTR _name$74594[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	DWORD PTR tv290[ebp], eax
	mov	edx, DWORD PTR _value$74598[ebp]
	push	edx
	mov	eax, DWORD PTR tv290[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?SetProperty@COutHandler@N7z@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z ; NArchive::N7z::COutHandler::SetProperty
	mov	DWORD PTR tv291[ebp], eax
	mov	ecx, DWORD PTR tv291[ebp]
	mov	DWORD PTR ___result__$74620[ebp], ecx
	cmp	DWORD PTR ___result__$74620[ebp], 0
	je	SHORT $LN15@SetPropert@2
	mov	edx, DWORD PTR ___result__$74620[ebp]
	mov	DWORD PTR $T76513[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _name$74594[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T76513[ebp]
	jmp	$LN28@SetPropert@2
$LN15@SetPropert@2:
; Line 866
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _name$74594[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	jmp	$LN25@SetPropert@2
$LN24@SetPropert@2:
; Line 868
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?GetNumEmptyMethods@CMultiMethodProps@NArchive@@QBEIXZ ; NArchive::CMultiMethodProps::GetNumEmptyMethods
	mov	DWORD PTR tv292[ebp], eax
	mov	eax, DWORD PTR tv292[ebp]
	mov	DWORD PTR _numEmptyMethods$74623[ebp], eax
; Line 869
	cmp	DWORD PTR _numEmptyMethods$74623[ebp], 0
	jbe	$LN14@SetPropert@2
; Line 872
	mov	DWORD PTR _k$74625[ebp], 0
	jmp	SHORT $LN13@SetPropert@2
$LN12@SetPropert@2:
	mov	ecx, DWORD PTR _k$74625[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$74625[ebp], ecx
$LN13@SetPropert@2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 464				; 000001d0H
	call	?Size@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CBond2>::Size
	mov	DWORD PTR tv293[ebp], eax
	mov	edx, DWORD PTR _k$74625[ebp]
	cmp	edx, DWORD PTR tv293[ebp]
	jae	SHORT $LN11@SetPropert@2
; Line 874
	mov	eax, DWORD PTR _k$74625[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 464				; 000001d0H
	call	??A?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEAAUCBond2@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CBond2>::operator[]
	mov	DWORD PTR tv294[ebp], eax
	mov	ecx, DWORD PTR tv294[ebp]
	mov	DWORD PTR _bond$74629[ebp], ecx
; Line 876
	mov	edx, DWORD PTR _bond$74629[ebp]
	mov	eax, DWORD PTR [edx+8]
	cmp	eax, DWORD PTR _numEmptyMethods$74623[ebp]
	jb	SHORT $LN9@SetPropert@2
	mov	ecx, DWORD PTR _bond$74629[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR _numEmptyMethods$74623[ebp]
	jae	SHORT $LN10@SetPropert@2
$LN9@SetPropert@2:
; Line 877
	mov	eax, -2147024809			; 80070057H
	jmp	$LN28@SetPropert@2
$LN10@SetPropert@2:
; Line 878
	jmp	SHORT $LN12@SetPropert@2
$LN11@SetPropert@2:
; Line 879
	mov	DWORD PTR _k$74625[ebp], 0
	jmp	SHORT $LN8@SetPropert@2
$LN7@SetPropert@2:
	mov	eax, DWORD PTR _k$74625[ebp]
	add	eax, 1
	mov	DWORD PTR _k$74625[ebp], eax
$LN8@SetPropert@2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 464				; 000001d0H
	call	?Size@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CBond2>::Size
	mov	DWORD PTR tv295[ebp], eax
	mov	ecx, DWORD PTR _k$74625[ebp]
	cmp	ecx, DWORD PTR tv295[ebp]
	jae	SHORT $LN6@SetPropert@2
; Line 881
	mov	edx, DWORD PTR _k$74625[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 464				; 000001d0H
	call	??A?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEAAUCBond2@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CBond2>::operator[]
	mov	DWORD PTR tv296[ebp], eax
	mov	eax, DWORD PTR tv296[ebp]
	mov	DWORD PTR _bond$74638[ebp], eax
; Line 882
	mov	ecx, DWORD PTR _bond$74638[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, DWORD PTR _numEmptyMethods$74623[ebp]
	mov	eax, DWORD PTR _bond$74638[ebp]
	mov	DWORD PTR [eax+8], edx
; Line 883
	mov	ecx, DWORD PTR _bond$74638[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	edx, DWORD PTR _numEmptyMethods$74623[ebp]
	mov	eax, DWORD PTR _bond$74638[ebp]
	mov	DWORD PTR [eax], edx
; Line 884
	jmp	SHORT $LN7@SetPropert@2
$LN6@SetPropert@2:
; Line 885
	mov	ecx, DWORD PTR _numEmptyMethods$74623[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	?DeleteFrontal@?$CObjectVector@VCOneMethodInfo@@@@QAEXI@Z ; CObjectVector<COneMethodInfo>::DeleteFrontal
$LN14@SetPropert@2:
; Line 888
	mov	DWORD PTR _k$74641[ebp], 0
	jmp	SHORT $LN5@SetPropert@2
$LN4@SetPropert@2:
	mov	edx, DWORD PTR _k$74641[ebp]
	add	edx, 1
	mov	DWORD PTR _k$74641[ebp], edx
$LN5@SetPropert@2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 464				; 000001d0H
	call	?Size@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CBond2>::Size
	mov	DWORD PTR tv297[ebp], eax
	mov	eax, DWORD PTR _k$74641[ebp]
	cmp	eax, DWORD PTR tv297[ebp]
	jae	SHORT $LN3@SetPropert@2
; Line 890
	mov	ecx, DWORD PTR _k$74641[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 464				; 000001d0H
	call	??A?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEAAUCBond2@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CBond2>::operator[]
	mov	DWORD PTR tv298[ebp], eax
	mov	edx, DWORD PTR tv298[ebp]
	mov	DWORD PTR _bond$74645[ebp], edx
; Line 892
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	?Size@?$CObjectVector@VCOneMethodInfo@@@@QBEIXZ ; CObjectVector<COneMethodInfo>::Size
	mov	DWORD PTR tv299[ebp], eax
	mov	eax, DWORD PTR _bond$74645[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, DWORD PTR tv299[ebp]
	jae	SHORT $LN1@SetPropert@2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	?Size@?$CObjectVector@VCOneMethodInfo@@@@QBEIXZ ; CObjectVector<COneMethodInfo>::Size
	mov	DWORD PTR tv300[ebp], eax
	mov	edx, DWORD PTR _bond$74645[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR tv300[ebp]
	jb	SHORT $LN2@SetPropert@2
$LN1@SetPropert@2:
; Line 893
	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN28@SetPropert@2
$LN2@SetPropert@2:
; Line 894
	jmp	$LN4@SetPropert@2
$LN3@SetPropert@2:
; Line 896
	xor	eax, eax
	jmp	SHORT $LN28@SetPropert@2
__catch$?SetProperties@CHandler@N7z@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z$0:
; Line 897
	mov	DWORD PTR $T76514[ebp], -2147024882	; 8007000eH
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN34@SetPropert@2
	ret	0
	mov	eax, __tryend$?SetProperties@CHandler@N7z@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z$1
	ret	0
__tryend$?SetProperties@CHandler@N7z@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z$1:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN28@SetPropert@2
$LN34@SetPropert@2:
	mov	eax, DWORD PTR $T76514[ebp]
$LN28@SetPropert@2:
; Line 898
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN41@SetPropert@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	2
$LN41@SetPropert@2:
	DD	3
	DD	$LN40@SetPropert@2
$LN40@SetPropert@2:
	DD	-40					; ffffffd8H
	DD	12					; 0000000cH
	DD	$LN36@SetPropert@2
	DD	-64					; ffffffc0H
	DD	12					; 0000000cH
	DD	$LN37@SetPropert@2
	DD	-80					; ffffffb0H
	DD	4
	DD	$LN38@SetPropert@2
$LN38@SetPropert@2:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN37@SetPropert@2:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
$LN36@SetPropert@2:
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SetProperties@CHandler@N7z@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z$2:
	lea	ecx, DWORD PTR _name$74594[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$?SetProperties@CHandler@N7z@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-228]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetProperties@CHandler@N7z@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetProperties@CHandler@N7z@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z ENDP ; NArchive::N7z::CHandler::SetProperties
PUBLIC	?IsEmpty@COneMethodInfo@@QBE_NXZ		; COneMethodInfo::IsEmpty
PUBLIC	??A?$CObjectVector@VCOneMethodInfo@@@@QBEABVCOneMethodInfo@@I@Z ; CObjectVector<COneMethodInfo>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetNumEmptyMethods@CMultiMethodProps@NArchive@@QBEIXZ
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
?GetNumEmptyMethods@CMultiMethodProps@NArchive@@QBEIXZ PROC ; NArchive::CMultiMethodProps::GetNumEmptyMethods, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\common\handlerout.h
; Line 32
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 34
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@GetNumEmpt
$LN3@GetNumEmpt:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@GetNumEmpt:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?Size@?$CObjectVector@VCOneMethodInfo@@@@QBEIXZ ; CObjectVector<COneMethodInfo>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN2@GetNumEmpt
; Line 35
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??A?$CObjectVector@VCOneMethodInfo@@@@QBEABVCOneMethodInfo@@I@Z ; CObjectVector<COneMethodInfo>::operator[]
	mov	ecx, eax
	call	?IsEmpty@COneMethodInfo@@QBE_NXZ	; COneMethodInfo::IsEmpty
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN1@GetNumEmpt
; Line 36
	jmp	SHORT $LN2@GetNumEmpt
$LN1@GetNumEmpt:
; Line 37
	jmp	SHORT $LN3@GetNumEmpt
$LN2@GetNumEmpt:
	mov	eax, DWORD PTR _i$[ebp]
; Line 38
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetNumEmptyMethods@CMultiMethodProps@NArchive@@QBEIXZ ENDP ; NArchive::CMultiMethodProps::GetNumEmptyMethods
_TEXT	ENDS
PUBLIC	?IsEmpty@?$CObjectVector@UCProp@@@@QBE_NXZ	; CObjectVector<CProp>::IsEmpty
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsEmpty@COneMethodInfo@@QBE_NXZ
_TEXT	SEGMENT
tv78 = -8						; size = 4
_this$ = -4						; size = 4
?IsEmpty@COneMethodInfo@@QBE_NXZ PROC			; COneMethodInfo::IsEmpty, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\methodprops.h
; Line 189
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?IsEmpty@AString@@QBE_NXZ		; AString::IsEmpty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@IsEmpty
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsEmpty@?$CObjectVector@UCProp@@@@QBE_NXZ ; CObjectVector<CProp>::IsEmpty
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@IsEmpty
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@IsEmpty
$LN3@IsEmpty:
	mov	DWORD PTR tv78[ebp], 0
$LN4@IsEmpty:
	mov	al, BYTE PTR tv78[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@COneMethodInfo@@QBE_NXZ ENDP			; COneMethodInfo::IsEmpty
_TEXT	ENDS
EXTRN	?DeleteFrontal@UString@@QAEXI@Z:PROC		; UString::DeleteFrontal
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_index$74452 = -8					; size = 4
_index$ = -4						; size = 4
_srcString$ = 8						; size = 4
_coder$ = 12						; size = 4
_stream$ = 16						; size = 4
?ParseBond@N7z@NArchive@@YGJAAVUString@@AAI1@Z PROC	; NArchive::N7z::ParseBond
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zhandlerout.cpp
; Line 668
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 669
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax], 0
; Line 670
	mov	ecx, DWORD PTR _coder$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcString$[ebp]
	push	edx
	call	?ParseStringToUInt32@@YGIABVUString@@AAI@Z ; ParseStringToUInt32
	mov	DWORD PTR _index$[ebp], eax
; Line 671
	cmp	DWORD PTR _index$[ebp], 0
	jne	SHORT $LN3@ParseBond
; Line 672
	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN4@ParseBond
$LN3@ParseBond:
; Line 673
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcString$[ebp]
	call	?DeleteFrontal@UString@@QAEXI@Z		; UString::DeleteFrontal
; Line 674
	mov	ecx, DWORD PTR _srcString$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 115				; 00000073H
	jne	SHORT $LN2@ParseBond
; Line 676
	push	0
	mov	ecx, DWORD PTR _srcString$[ebp]
	call	?Delete@UString@@QAEXI@Z		; UString::Delete
; Line 677
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	eax, DWORD PTR _srcString$[ebp]
	push	eax
	call	?ParseStringToUInt32@@YGIABVUString@@AAI@Z ; ParseStringToUInt32
	mov	DWORD PTR _index$74452[ebp], eax
; Line 678
	cmp	DWORD PTR _index$74452[ebp], 0
	jne	SHORT $LN1@ParseBond
; Line 679
	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN4@ParseBond
$LN1@ParseBond:
; Line 680
	mov	ecx, DWORD PTR _index$74452[ebp]
	push	ecx
	mov	ecx, DWORD PTR _srcString$[ebp]
	call	?DeleteFrontal@UString@@QAEXI@Z		; UString::DeleteFrontal
$LN2@ParseBond:
; Line 682
	xor	eax, eax
$LN4@ParseBond:
; Line 683
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?ParseBond@N7z@NArchive@@YGJAAVUString@@AAI1@Z ENDP	; NArchive::N7z::ParseBond
_TEXT	ENDS
PUBLIC	??0?$CRecordVector@PAX@@QAE@XZ			; CRecordVector<void *>::CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CObjectVector@VUString@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@VUString@@@@QAE@XZ PROC		; CObjectVector<UString>::CObjectVector<UString>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@VUString@@@@QAE@XZ ENDP		; CObjectVector<UString>::CObjectVector<UString>
_TEXT	ENDS
PUBLIC	??1?$CRecordVector@PAX@@QAE@XZ			; CRecordVector<void *>::~CRecordVector<void *>
PUBLIC	??_GUString@@QAEPAXI@Z				; UString::`scalar deleting destructor'
PUBLIC	??A?$CRecordVector@PAX@@QAEAAPAXI@Z		; CRecordVector<void *>::operator[]
PUBLIC	?Size@?$CRecordVector@PAX@@QBEIXZ		; CRecordVector<void *>::Size
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@VUString@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@VUString@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@VUString@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@VUString@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@VUString@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T76544 = -28						; size = 4
$T76543 = -24						; size = 4
_i$74665 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@VUString@@@@QAE@XZ PROC		; CObjectVector<UString>::~CObjectVector<UString>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@VUString@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$74665[ebp], eax
$LN2@CObjectVec:
	cmp	DWORD PTR _i$74665[ebp], 0
	je	SHORT $LN3@CObjectVec
; Line 489
	mov	eax, DWORD PTR _i$74665[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$74665[ebp], eax
	mov	ecx, DWORD PTR _i$74665[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T76544[ebp], edx
	mov	eax, DWORD PTR $T76544[ebp]
	mov	DWORD PTR $T76543[ebp], eax
	cmp	DWORD PTR $T76543[ebp], 0
	je	SHORT $LN5@CObjectVec
	push	1
	mov	ecx, DWORD PTR $T76543[ebp]
	call	??_GUString@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec
$LN5@CObjectVec:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec:
	jmp	SHORT $LN2@CObjectVec
$LN3@CObjectVec:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@VUString@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@VUString@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@VUString@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@VUString@@@@QAE@XZ ENDP		; CObjectVector<UString>::~CObjectVector<UString>
PUBLIC	?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ		; CRecordVector<void *>::IsEmpty
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsEmpty@?$CObjectVector@UCProp@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@?$CObjectVector@UCProp@@@@QBE_NXZ PROC		; CObjectVector<CProp>::IsEmpty, COMDAT
; _this$ = ecx
; Line 416
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ	; CRecordVector<void *>::IsEmpty
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@?$CObjectVector@UCProp@@@@QBE_NXZ ENDP		; CObjectVector<CProp>::IsEmpty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CObjectVector@UCProp@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@UCProp@@@@QAE@XZ PROC		; CObjectVector<CProp>::CObjectVector<CProp>, COMDAT
; _this$ = ecx
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@UCProp@@@@QAE@XZ ENDP		; CObjectVector<CProp>::CObjectVector<CProp>
_TEXT	ENDS
PUBLIC	?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z	; CRecordVector<void *>::AddInReserved
PUBLIC	??0CProp@@QAE@ABU0@@Z				; CProp::CProp
PUBLIC	?Reserve@?$CRecordVector@PAX@@QAEXI@Z		; CRecordVector<void *>::Reserve
PUBLIC	?Size@?$CObjectVector@UCProp@@@@QBEIXZ		; CObjectVector<CProp>::Size
PUBLIC	?Clear@?$CObjectVector@UCProp@@@@QAEXXZ		; CObjectVector<CProp>::Clear
EXTRN	??2@YAPAXI@Z:PROC				; operator new
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z$0
__ehfuncinfo$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
tv84 = -36						; size = 4
$T76562 = -32						; size = 4
$T76561 = -28						; size = 4
_i$74733 = -24						; size = 4
_size$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_v$ = 8							; size = 4
??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z PROC	; CObjectVector<CProp>::operator=, COMDAT
; _this$ = ecx
; Line 430
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 431
	mov	eax, DWORD PTR _v$[ebp]
	cmp	eax, DWORD PTR _this$[ebp]
	jne	SHORT $LN4@operator
; Line 432
	mov	eax, DWORD PTR _this$[ebp]
	jmp	$LN5@operator
$LN4@operator:
; Line 433
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CObjectVector@UCProp@@@@QAEXXZ	; CObjectVector<CProp>::Clear
; Line 434
	mov	ecx, DWORD PTR _v$[ebp]
	call	?Size@?$CObjectVector@UCProp@@@@QBEIXZ	; CObjectVector<CProp>::Size
	mov	DWORD PTR _size$[ebp], eax
; Line 435
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reserve@?$CRecordVector@PAX@@QAEXI@Z	; CRecordVector<void *>::Reserve
; Line 436
	mov	DWORD PTR _i$74733[ebp], 0
	jmp	SHORT $LN3@operator
$LN2@operator:
	mov	edx, DWORD PTR _i$74733[ebp]
	add	edx, 1
	mov	DWORD PTR _i$74733[ebp], edx
$LN3@operator:
	mov	eax, DWORD PTR _i$74733[ebp]
	cmp	eax, DWORD PTR _size$[ebp]
	jae	SHORT $LN1@operator
; Line 437
	push	24					; 00000018H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T76562[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T76562[ebp], 0
	je	SHORT $LN7@operator
	mov	ecx, DWORD PTR _i$74733[ebp]
	push	ecx
	mov	ecx, DWORD PTR _v$[ebp]
	call	??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ; CObjectVector<CProp>::operator[]
	push	eax
	mov	ecx, DWORD PTR $T76562[ebp]
	call	??0CProp@@QAE@ABU0@@Z
	mov	DWORD PTR tv84[ebp], eax
	jmp	SHORT $LN8@operator
$LN7@operator:
	mov	DWORD PTR tv84[ebp], 0
$LN8@operator:
	mov	edx, DWORD PTR tv84[ebp]
	mov	DWORD PTR $T76561[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T76561[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ; CRecordVector<void *>::AddInReserved
	jmp	SHORT $LN2@operator
$LN1@operator:
; Line 438
	mov	eax, DWORD PTR _this$[ebp]
$LN5@operator:
; Line 439
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z$0:
	mov	eax, DWORD PTR $T76562[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z ENDP	; CObjectVector<CProp>::operator=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Size@?$CObjectVector@UCProp@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@UCProp@@@@QBEIXZ PROC		; CObjectVector<CProp>::Size, COMDAT
; _this$ = ecx
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@UCProp@@@@QBEIXZ ENDP		; CObjectVector<CProp>::Size
_TEXT	ENDS
PUBLIC	??A?$CRecordVector@PAX@@QBEABQAXI@Z		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z PROC	; CObjectVector<CProp>::operator[], COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ENDP	; CObjectVector<CProp>::operator[]
_TEXT	ENDS
PUBLIC	?Add@?$CRecordVector@PAX@@QAEIQAX@Z		; CRecordVector<void *>::Add
PUBLIC	??0CProp@@QAE@XZ				; CProp::CProp
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AddNew@?$CObjectVector@UCProp@@@@QAEAAUCProp@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddNew@?$CObjectVector@UCProp@@@@QAEAAUCProp@@XZ$0
__ehfuncinfo$?AddNew@?$CObjectVector@UCProp@@@@QAEAAUCProp@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddNew@?$CObjectVector@UCProp@@@@QAEAAUCProp@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?AddNew@?$CObjectVector@UCProp@@@@QAEAAUCProp@@XZ
_TEXT	SEGMENT
tv71 = -32						; size = 4
$T76579 = -28						; size = 4
$T76578 = -24						; size = 4
_p$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?AddNew@?$CObjectVector@UCProp@@@@QAEAAUCProp@@XZ PROC	; CObjectVector<CProp>::AddNew, COMDAT
; _this$ = ecx
; Line 464
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddNew@?$CObjectVector@UCProp@@@@QAEAAUCProp@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 465
	push	24					; 00000018H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T76579[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T76579[ebp], 0
	je	SHORT $LN3@AddNew
	mov	ecx, DWORD PTR $T76579[ebp]
	call	??0CProp@@QAE@XZ			; CProp::CProp
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN4@AddNew
$LN3@AddNew:
	mov	DWORD PTR tv71[ebp], 0
$LN4@AddNew:
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR $T76578[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T76578[ebp]
	mov	DWORD PTR _p$[ebp], ecx
; Line 466
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
; Line 467
	mov	eax, DWORD PTR _p$[ebp]
; Line 468
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddNew@?$CObjectVector@UCProp@@@@QAEAAUCProp@@XZ$0:
	mov	eax, DWORD PTR $T76579[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?AddNew@?$CObjectVector@UCProp@@@@QAEAAUCProp@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddNew@?$CObjectVector@UCProp@@@@QAEAAUCProp@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddNew@?$CObjectVector@UCProp@@@@QAEAAUCProp@@XZ ENDP	; CObjectVector<CProp>::AddNew
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CProp@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CProp@@QAE@XZ PROC					; CProp::CProp, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\methodprops.h
; Line 24
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CProp@@QAE@XZ ENDP					; CProp::CProp
_TEXT	ENDS
PUBLIC	??_GCProp@@QAEPAXI@Z				; CProp::`scalar deleting destructor'
;	COMDAT xdata$x
; File c:\workspace\7z1505-src\cpp\common\myvector.h
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@UCProp@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@UCProp@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@UCProp@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@UCProp@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T76595 = -28						; size = 4
$T76594 = -24						; size = 4
_i$74753 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@UCProp@@@@QAE@XZ PROC		; CObjectVector<CProp>::~CObjectVector<CProp>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$74753[ebp], eax
$LN2@CObjectVec@2:
	cmp	DWORD PTR _i$74753[ebp], 0
	je	SHORT $LN3@CObjectVec@2
; Line 489
	mov	eax, DWORD PTR _i$74753[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$74753[ebp], eax
	mov	ecx, DWORD PTR _i$74753[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T76595[ebp], edx
	mov	eax, DWORD PTR $T76595[ebp]
	mov	DWORD PTR $T76594[ebp], eax
	cmp	DWORD PTR $T76594[ebp], 0
	je	SHORT $LN5@CObjectVec@2
	push	1
	mov	ecx, DWORD PTR $T76594[ebp]
	call	??_GCProp@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@2
$LN5@CObjectVec@2:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@2:
	jmp	SHORT $LN2@CObjectVec@2
$LN3@CObjectVec@2:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@UCProp@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@UCProp@@@@QAE@XZ ENDP		; CObjectVector<CProp>::~CObjectVector<CProp>
PUBLIC	?Clear@?$CRecordVector@PAX@@QAEXXZ		; CRecordVector<void *>::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Clear@?$CObjectVector@UCProp@@@@QAEXXZ
_TEXT	SEGMENT
tv75 = -20						; size = 4
$T76608 = -16						; size = 4
$T76607 = -12						; size = 4
_i$74762 = -8						; size = 4
_this$ = -4						; size = 4
?Clear@?$CObjectVector@UCProp@@@@QAEXXZ PROC		; CObjectVector<CProp>::Clear, COMDAT
; _this$ = ecx
; Line 499
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 500
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$74762[ebp], eax
$LN2@Clear:
	cmp	DWORD PTR _i$74762[ebp], 0
	je	SHORT $LN1@Clear
; Line 501
	mov	eax, DWORD PTR _i$74762[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$74762[ebp], eax
	mov	ecx, DWORD PTR _i$74762[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T76608[ebp], edx
	mov	eax, DWORD PTR $T76608[ebp]
	mov	DWORD PTR $T76607[ebp], eax
	cmp	DWORD PTR $T76607[ebp], 0
	je	SHORT $LN5@Clear
	push	1
	mov	ecx, DWORD PTR $T76607[ebp]
	call	??_GCProp@@QAEPAXI@Z
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN6@Clear
$LN5@Clear:
	mov	DWORD PTR tv75[ebp], 0
$LN6@Clear:
	jmp	SHORT $LN2@Clear
$LN1@Clear:
; Line 502
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CRecordVector@PAX@@QAEXXZ	; CRecordVector<void *>::Clear
; Line 503
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CObjectVector@UCProp@@@@QAEXXZ ENDP		; CObjectVector<CProp>::Clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CObjectVector@VCOneMethodInfo@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@VCOneMethodInfo@@@@QBEIXZ PROC	; CObjectVector<COneMethodInfo>::Size, COMDAT
; _this$ = ecx
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@VCOneMethodInfo@@@@QBEIXZ ENDP	; CObjectVector<COneMethodInfo>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsEmpty@?$CObjectVector@VCOneMethodInfo@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@?$CObjectVector@VCOneMethodInfo@@@@QBE_NXZ PROC ; CObjectVector<COneMethodInfo>::IsEmpty, COMDAT
; _this$ = ecx
; Line 416
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ	; CRecordVector<void *>::IsEmpty
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@?$CObjectVector@VCOneMethodInfo@@@@QBE_NXZ ENDP ; CObjectVector<COneMethodInfo>::IsEmpty
_TEXT	ENDS
PUBLIC	??0COneMethodInfo@@QAE@ABV0@@Z			; COneMethodInfo::COneMethodInfo
PUBLIC	?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z	; CRecordVector<void *>::ConstructReserve
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$CObjectVector@VCOneMethodInfo@@@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CObjectVector@VCOneMethodInfo@@@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$CObjectVector@VCOneMethodInfo@@@@QAE@ABV0@@Z$1
__ehfuncinfo$??0?$CObjectVector@VCOneMethodInfo@@@@QAE@ABV0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$CObjectVector@VCOneMethodInfo@@@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0?$CObjectVector@VCOneMethodInfo@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
tv85 = -36						; size = 4
$T76618 = -32						; size = 4
$T76617 = -28						; size = 4
_i$74778 = -24						; size = 4
_size$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_v$ = 8							; size = 4
??0?$CObjectVector@VCOneMethodInfo@@@@QAE@ABV0@@Z PROC	; CObjectVector<COneMethodInfo>::CObjectVector<COneMethodInfo>, COMDAT
; _this$ = ecx
; Line 422
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$CObjectVector@VCOneMethodInfo@@@@QAE@ABV0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 424
	mov	ecx, DWORD PTR _v$[ebp]
	call	?Size@?$CObjectVector@VCOneMethodInfo@@@@QBEIXZ ; CObjectVector<COneMethodInfo>::Size
	mov	DWORD PTR _size$[ebp], eax
; Line 425
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z ; CRecordVector<void *>::ConstructReserve
; Line 426
	mov	DWORD PTR _i$74778[ebp], 0
	jmp	SHORT $LN3@CObjectVec@3
$LN2@CObjectVec@3:
	mov	ecx, DWORD PTR _i$74778[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$74778[ebp], ecx
$LN3@CObjectVec@3:
	mov	edx, DWORD PTR _i$74778[ebp]
	cmp	edx, DWORD PTR _size$[ebp]
	jae	SHORT $LN4@CObjectVec@3
; Line 427
	push	36					; 00000024H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T76618[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T76618[ebp], 0
	je	SHORT $LN6@CObjectVec@3
	mov	eax, DWORD PTR _i$74778[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	call	??A?$CObjectVector@VCOneMethodInfo@@@@QBEABVCOneMethodInfo@@I@Z ; CObjectVector<COneMethodInfo>::operator[]
	push	eax
	mov	ecx, DWORD PTR $T76618[ebp]
	call	??0COneMethodInfo@@QAE@ABV0@@Z
	mov	DWORD PTR tv85[ebp], eax
	jmp	SHORT $LN7@CObjectVec@3
$LN6@CObjectVec@3:
	mov	DWORD PTR tv85[ebp], 0
$LN7@CObjectVec@3:
	mov	ecx, DWORD PTR tv85[ebp]
	mov	DWORD PTR $T76617[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T76617[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ; CRecordVector<void *>::AddInReserved
	jmp	SHORT $LN2@CObjectVec@3
$LN4@CObjectVec@3:
; Line 428
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CObjectVector@VCOneMethodInfo@@@@QAE@ABV0@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__unwindfunclet$??0?$CObjectVector@VCOneMethodInfo@@@@QAE@ABV0@@Z$1:
	mov	eax, DWORD PTR $T76618[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??0?$CObjectVector@VCOneMethodInfo@@@@QAE@ABV0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$CObjectVector@VCOneMethodInfo@@@@QAE@ABV0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$CObjectVector@VCOneMethodInfo@@@@QAE@ABV0@@Z ENDP	; CObjectVector<COneMethodInfo>::CObjectVector<COneMethodInfo>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??A?$CObjectVector@VCOneMethodInfo@@@@QBEABVCOneMethodInfo@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@VCOneMethodInfo@@@@QBEABVCOneMethodInfo@@I@Z PROC ; CObjectVector<COneMethodInfo>::operator[], COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@VCOneMethodInfo@@@@QBEABVCOneMethodInfo@@I@Z ENDP ; CObjectVector<COneMethodInfo>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@VCOneMethodInfo@@@@QAEAAVCOneMethodInfo@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@VCOneMethodInfo@@@@QAEAAVCOneMethodInfo@@I@Z PROC ; CObjectVector<COneMethodInfo>::operator[], COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@VCOneMethodInfo@@@@QAEAAVCOneMethodInfo@@I@Z ENDP ; CObjectVector<COneMethodInfo>::operator[]
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AddNew@?$CObjectVector@VCOneMethodInfo@@@@QAEAAVCOneMethodInfo@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddNew@?$CObjectVector@VCOneMethodInfo@@@@QAEAAVCOneMethodInfo@@XZ$0
__ehfuncinfo$?AddNew@?$CObjectVector@VCOneMethodInfo@@@@QAEAAVCOneMethodInfo@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddNew@?$CObjectVector@VCOneMethodInfo@@@@QAEAAVCOneMethodInfo@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?AddNew@?$CObjectVector@VCOneMethodInfo@@@@QAEAAVCOneMethodInfo@@XZ
_TEXT	SEGMENT
tv71 = -32						; size = 4
$T76636 = -28						; size = 4
$T76635 = -24						; size = 4
_p$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?AddNew@?$CObjectVector@VCOneMethodInfo@@@@QAEAAVCOneMethodInfo@@XZ PROC ; CObjectVector<COneMethodInfo>::AddNew, COMDAT
; _this$ = ecx
; Line 464
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddNew@?$CObjectVector@VCOneMethodInfo@@@@QAEAAVCOneMethodInfo@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 465
	push	36					; 00000024H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T76636[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T76636[ebp], 0
	je	SHORT $LN3@AddNew@2
	mov	ecx, DWORD PTR $T76636[ebp]
	call	??0COneMethodInfo@@QAE@XZ
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN4@AddNew@2
$LN3@AddNew@2:
	mov	DWORD PTR tv71[ebp], 0
$LN4@AddNew@2:
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR $T76635[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T76635[ebp]
	mov	DWORD PTR _p$[ebp], ecx
; Line 466
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
; Line 467
	mov	eax, DWORD PTR _p$[ebp]
; Line 468
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddNew@?$CObjectVector@VCOneMethodInfo@@@@QAEAAVCOneMethodInfo@@XZ$0:
	mov	eax, DWORD PTR $T76636[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?AddNew@?$CObjectVector@VCOneMethodInfo@@@@QAEAAVCOneMethodInfo@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddNew@?$CObjectVector@VCOneMethodInfo@@@@QAEAAVCOneMethodInfo@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddNew@?$CObjectVector@VCOneMethodInfo@@@@QAEAAVCOneMethodInfo@@XZ ENDP ; CObjectVector<COneMethodInfo>::AddNew
PUBLIC	?Insert@?$CRecordVector@PAX@@QAEXIQAX@Z		; CRecordVector<void *>::Insert
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Insert@?$CObjectVector@VCOneMethodInfo@@@@QAEXIABVCOneMethodInfo@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Insert@?$CObjectVector@VCOneMethodInfo@@@@QAEXIABVCOneMethodInfo@@@Z$0
__ehfuncinfo$?Insert@?$CObjectVector@VCOneMethodInfo@@@@QAEXIABVCOneMethodInfo@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Insert@?$CObjectVector@VCOneMethodInfo@@@@QAEXIABVCOneMethodInfo@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?Insert@?$CObjectVector@VCOneMethodInfo@@@@QAEXIABVCOneMethodInfo@@@Z
_TEXT	SEGMENT
tv73 = -28						; size = 4
$T76649 = -24						; size = 4
$T76648 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_index$ = 8						; size = 4
_item$ = 12						; size = 4
?Insert@?$CObjectVector@VCOneMethodInfo@@@@QAEXIABVCOneMethodInfo@@@Z PROC ; CObjectVector<COneMethodInfo>::Insert, COMDAT
; _this$ = ecx
; Line 477
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Insert@?$CObjectVector@VCOneMethodInfo@@@@QAEXIABVCOneMethodInfo@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	36					; 00000024H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T76649[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T76649[ebp], 0
	je	SHORT $LN3@Insert
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T76649[ebp]
	call	??0COneMethodInfo@@QAE@ABV0@@Z
	mov	DWORD PTR tv73[ebp], eax
	jmp	SHORT $LN4@Insert
$LN3@Insert:
	mov	DWORD PTR tv73[ebp], 0
$LN4@Insert:
	mov	ecx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T76648[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T76648[ebp]
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Insert@?$CRecordVector@PAX@@QAEXIQAX@Z	; CRecordVector<void *>::Insert
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Insert@?$CObjectVector@VCOneMethodInfo@@@@QAEXIABVCOneMethodInfo@@@Z$0:
	mov	eax, DWORD PTR $T76649[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Insert@?$CObjectVector@VCOneMethodInfo@@@@QAEXIABVCOneMethodInfo@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Insert@?$CObjectVector@VCOneMethodInfo@@@@QAEXIABVCOneMethodInfo@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Insert@?$CObjectVector@VCOneMethodInfo@@@@QAEXIABVCOneMethodInfo@@@Z ENDP ; CObjectVector<COneMethodInfo>::Insert
PUBLIC	??_GCOneMethodInfo@@QAEPAXI@Z			; COneMethodInfo::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T76662 = -28						; size = 4
$T76661 = -24						; size = 4
_i$74807 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ PROC	; CObjectVector<COneMethodInfo>::~CObjectVector<COneMethodInfo>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$74807[ebp], eax
$LN2@CObjectVec@4:
	cmp	DWORD PTR _i$74807[ebp], 0
	je	SHORT $LN3@CObjectVec@4
; Line 489
	mov	eax, DWORD PTR _i$74807[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$74807[ebp], eax
	mov	ecx, DWORD PTR _i$74807[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T76662[ebp], edx
	mov	eax, DWORD PTR $T76662[ebp]
	mov	DWORD PTR $T76661[ebp], eax
	cmp	DWORD PTR $T76661[ebp], 0
	je	SHORT $LN5@CObjectVec@4
	push	1
	mov	ecx, DWORD PTR $T76661[ebp]
	call	??_GCOneMethodInfo@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@4
$LN5@CObjectVec@4:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@4:
	jmp	SHORT $LN2@CObjectVec@4
$LN3@CObjectVec@4:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ ENDP	; CObjectVector<COneMethodInfo>::~CObjectVector<COneMethodInfo>
PUBLIC	?DeleteFrontal@?$CRecordVector@PAX@@QAEXI@Z	; CRecordVector<void *>::DeleteFrontal
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?DeleteFrontal@?$CObjectVector@VCOneMethodInfo@@@@QAEXI@Z
_TEXT	SEGMENT
tv73 = -20						; size = 4
$T76675 = -16						; size = 4
$T76674 = -12						; size = 4
_i$74816 = -8						; size = 4
_this$ = -4						; size = 4
_num$ = 8						; size = 4
?DeleteFrontal@?$CObjectVector@VCOneMethodInfo@@@@QAEXI@Z PROC ; CObjectVector<COneMethodInfo>::DeleteFrontal, COMDAT
; _this$ = ecx
; Line 514
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 515
	mov	DWORD PTR _i$74816[ebp], 0
	jmp	SHORT $LN3@DeleteFron
$LN2@DeleteFron:
	mov	eax, DWORD PTR _i$74816[ebp]
	add	eax, 1
	mov	DWORD PTR _i$74816[ebp], eax
$LN3@DeleteFron:
	mov	ecx, DWORD PTR _i$74816[ebp]
	cmp	ecx, DWORD PTR _num$[ebp]
	jae	SHORT $LN1@DeleteFron
; Line 516
	mov	edx, DWORD PTR _i$74816[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR $T76675[ebp], eax
	mov	ecx, DWORD PTR $T76675[ebp]
	mov	DWORD PTR $T76674[ebp], ecx
	cmp	DWORD PTR $T76674[ebp], 0
	je	SHORT $LN6@DeleteFron
	push	1
	mov	ecx, DWORD PTR $T76674[ebp]
	call	??_GCOneMethodInfo@@QAEPAXI@Z
	mov	DWORD PTR tv73[ebp], eax
	jmp	SHORT $LN7@DeleteFron
$LN6@DeleteFron:
	mov	DWORD PTR tv73[ebp], 0
$LN7@DeleteFron:
	jmp	SHORT $LN2@DeleteFron
$LN1@DeleteFron:
; Line 517
	mov	edx, DWORD PTR _num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DeleteFrontal@?$CRecordVector@PAX@@QAEXI@Z ; CRecordVector<void *>::DeleteFrontal
; Line 518
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?DeleteFrontal@?$CObjectVector@VCOneMethodInfo@@@@QAEXI@Z ENDP ; CObjectVector<COneMethodInfo>::DeleteFrontal
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ PROC ; CObjectVector<NArchive::N7z::CMethodFull>::CObjectVector<NArchive::N7z::CMethodFull>, COMDAT
; _this$ = ecx
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ ENDP ; CObjectVector<NArchive::N7z::CMethodFull>::CObjectVector<NArchive::N7z::CMethodFull>
_TEXT	ENDS
PUBLIC	??0CMethodFull@N7z@NArchive@@QAE@XZ		; NArchive::N7z::CMethodFull::CMethodFull
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AddNew@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddNew@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@XZ$0
__ehfuncinfo$?AddNew@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddNew@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?AddNew@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@XZ
_TEXT	SEGMENT
tv71 = -32						; size = 4
$T76684 = -28						; size = 4
$T76683 = -24						; size = 4
_p$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?AddNew@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@XZ PROC ; CObjectVector<NArchive::N7z::CMethodFull>::AddNew, COMDAT
; _this$ = ecx
; Line 464
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddNew@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 465
	push	32					; 00000020H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T76684[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T76684[ebp], 0
	je	SHORT $LN3@AddNew@3
	mov	ecx, DWORD PTR $T76684[ebp]
	call	??0CMethodFull@N7z@NArchive@@QAE@XZ
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN4@AddNew@3
$LN3@AddNew@3:
	mov	DWORD PTR tv71[ebp], 0
$LN4@AddNew@3:
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR $T76683[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T76683[ebp]
	mov	DWORD PTR _p$[ebp], ecx
; Line 466
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
; Line 467
	mov	eax, DWORD PTR _p$[ebp]
; Line 468
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddNew@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@XZ$0:
	mov	eax, DWORD PTR $T76684[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?AddNew@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddNew@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddNew@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@XZ ENDP ; CObjectVector<NArchive::N7z::CMethodFull>::AddNew
PUBLIC	??_GCMethodFull@N7z@NArchive@@QAEPAXI@Z		; NArchive::N7z::CMethodFull::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T76697 = -28						; size = 4
$T76696 = -24						; size = 4
_i$74836 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ PROC ; CObjectVector<NArchive::N7z::CMethodFull>::~CObjectVector<NArchive::N7z::CMethodFull>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$74836[ebp], eax
$LN2@CObjectVec@5:
	cmp	DWORD PTR _i$74836[ebp], 0
	je	SHORT $LN3@CObjectVec@5
; Line 489
	mov	eax, DWORD PTR _i$74836[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$74836[ebp], eax
	mov	ecx, DWORD PTR _i$74836[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T76697[ebp], edx
	mov	eax, DWORD PTR $T76697[ebp]
	mov	DWORD PTR $T76696[ebp], eax
	cmp	DWORD PTR $T76696[ebp], 0
	je	SHORT $LN5@CObjectVec@5
	push	1
	mov	ecx, DWORD PTR $T76696[ebp]
	call	??_GCMethodFull@N7z@NArchive@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@5
$LN5@CObjectVec@5:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@5:
	jmp	SHORT $LN2@CObjectVec@5
$LN3@CObjectVec@5:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ ENDP ; CObjectVector<NArchive::N7z::CMethodFull>::~CObjectVector<NArchive::N7z::CMethodFull>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ PROC	; CRecordVector<NArchive::N7z::CBond2>::CRecordVector<NArchive::N7z::CBond2>, COMDAT
; _this$ = ecx
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ ENDP	; CRecordVector<NArchive::N7z::CBond2>::CRecordVector<NArchive::N7z::CBond2>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBEIXZ PROC ; CRecordVector<NArchive::N7z::CBond2>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBEIXZ ENDP ; CRecordVector<NArchive::N7z::CBond2>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
$T76713 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ PROC	; CRecordVector<NArchive::N7z::CBond2>::~CRecordVector<NArchive::N7z::CBond2>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T76713[ebp], ecx
	mov	edx, DWORD PTR $T76713[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ ENDP	; CRecordVector<NArchive::N7z::CBond2>::~CRecordVector<NArchive::N7z::CBond2>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Clear@?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEXXZ PROC ; CRecordVector<NArchive::N7z::CBond2>::Clear, COMDAT
; _this$ = ecx
; Line 131
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEXXZ ENDP ; CRecordVector<NArchive::N7z::CBond2>::Clear
_TEXT	ENDS
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
$T76719 = -16						; size = 4
$T76718 = -12						; size = 4
_size$ = -8						; size = 4
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??4?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEAAV0@ABV0@@Z PROC ; CRecordVector<NArchive::N7z::CBond2>::operator=, COMDAT
; _this$ = ecx
; Line 168
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 169
	mov	eax, DWORD PTR _v$[ebp]
	cmp	eax, DWORD PTR _this$[ebp]
	jne	SHORT $LN3@operator@2
; Line 170
	mov	eax, DWORD PTR _this$[ebp]
	jmp	$LN4@operator@2
$LN3@operator@2:
; Line 171
	mov	ecx, DWORD PTR _v$[ebp]
	call	?Size@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CBond2>::Size
	mov	DWORD PTR _size$[ebp], eax
; Line 172
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jbe	SHORT $LN2@operator@2
; Line 174
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T76718[ebp], ecx
	mov	edx, DWORD PTR $T76718[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 175
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 176
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 177
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0
; Line 178
	xor	ecx, ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, 12					; 0000000cH
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T76719[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T76719[ebp]
	mov	DWORD PTR [eax], ecx
; Line 179
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@operator@2:
; Line 181
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 182
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN1@operator@2
; Line 183
	mov	eax, DWORD PTR _size$[ebp]
	imul	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@operator@2:
; Line 184
	mov	eax, DWORD PTR _this$[ebp]
$LN4@operator@2:
; Line 185
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEAAV0@ABV0@@Z ENDP ; CRecordVector<NArchive::N7z::CBond2>::operator=
_TEXT	ENDS
PUBLIC	?ReserveOnePosition@?$CRecordVector@UCBond2@N7z@NArchive@@@@AAEXXZ ; CRecordVector<NArchive::N7z::CBond2>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEIUCBond2@N7z@NArchive@@@Z
_TEXT	SEGMENT
tv72 = -20						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 12
?Add@?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEIUCBond2@N7z@NArchive@@@Z PROC ; CRecordVector<NArchive::N7z::CBond2>::Add, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@UCBond2@N7z@NArchive@@@@AAEXXZ ; CRecordVector<NArchive::N7z::CBond2>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _item$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _item$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
; Line 201
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR tv72[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR tv72[ebp]
; Line 202
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Add
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN5@Add:
	DD	1
	DD	$LN4@Add
$LN4@Add:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN3@Add
$LN3@Add:
	DB	95					; 0000005fH
	DB	36					; 00000024H
	DB	65					; 00000041H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	0
?Add@?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEIUCBond2@N7z@NArchive@@@Z ENDP ; CRecordVector<NArchive::N7z::CBond2>::Add
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEAAUCBond2@N7z@NArchive@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEAAUCBond2@N7z@NArchive@@I@Z PROC ; CRecordVector<NArchive::N7z::CBond2>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEAAUCBond2@N7z@NArchive@@I@Z ENDP ; CRecordVector<NArchive::N7z::CBond2>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@_N@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@_N@@QAE@XZ PROC			; CRecordVector<bool>::CRecordVector<bool>, COMDAT
; _this$ = ecx
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@_N@@QAE@XZ ENDP			; CRecordVector<bool>::CRecordVector<bool>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@_N@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@_N@@QBEIXZ PROC			; CRecordVector<bool>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@_N@@QBEIXZ ENDP			; CRecordVector<bool>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsEmpty@?$CRecordVector@_N@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@?$CRecordVector@_N@@QBE_NXZ PROC		; CRecordVector<bool>::IsEmpty, COMDAT
; _this$ = ecx
; Line 49
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+4], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@?$CRecordVector@_N@@QBE_NXZ ENDP		; CRecordVector<bool>::IsEmpty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@_N@@QAE@XZ
_TEXT	SEGMENT
$T76736 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@_N@@QAE@XZ PROC			; CRecordVector<bool>::~CRecordVector<bool>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T76736[ebp], ecx
	mov	edx, DWORD PTR $T76736[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@_N@@QAE@XZ ENDP			; CRecordVector<bool>::~CRecordVector<bool>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@_N@@QBEAB_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@_N@@QBEAB_NI@Z PROC			; CRecordVector<bool>::operator[], COMDAT
; _this$ = ecx
; Line 227
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	add	eax, DWORD PTR _index$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@_N@@QBEAB_NI@Z ENDP			; CRecordVector<bool>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@I@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@I@@QAE@XZ PROC			; CRecordVector<unsigned int>::CRecordVector<unsigned int>, COMDAT
; _this$ = ecx
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@I@@QAE@XZ ENDP			; CRecordVector<unsigned int>::CRecordVector<unsigned int>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@I@@QAE@XZ
_TEXT	SEGMENT
$T76743 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@I@@QAE@XZ PROC			; CRecordVector<unsigned int>::~CRecordVector<unsigned int>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T76743[ebp], ecx
	mov	edx, DWORD PTR $T76743[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@I@@QAE@XZ ENDP			; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@_K@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@_K@@QAE@XZ PROC			; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>, COMDAT
; _this$ = ecx
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@_K@@QAE@XZ ENDP			; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@_K@@QAE@XZ
_TEXT	SEGMENT
$T76748 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@_K@@QAE@XZ PROC			; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T76748[ebp], ecx
	mov	edx, DWORD PTR $T76748[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@_K@@QAE@XZ ENDP			; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@_K@@QBEAB_KI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@_K@@QBEAB_KI@Z PROC			; CRecordVector<unsigned __int64>::operator[], COMDAT
; _this$ = ecx
; Line 227
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@_K@@QBEAB_KI@Z ENDP			; CRecordVector<unsigned __int64>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAE@XZ PROC ; CRecordVector<NArchive::N7z::CFileItem>::CRecordVector<NArchive::N7z::CFileItem>, COMDAT
; _this$ = ecx
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAE@XZ ENDP ; CRecordVector<NArchive::N7z::CFileItem>::CRecordVector<NArchive::N7z::CFileItem>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ PROC ; CRecordVector<NArchive::N7z::CFileItem>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ ENDP ; CRecordVector<NArchive::N7z::CFileItem>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
$T76757 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAE@XZ PROC ; CRecordVector<NArchive::N7z::CFileItem>::~CRecordVector<NArchive::N7z::CFileItem>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T76757[ebp], ecx
	mov	edx, DWORD PTR $T76757[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAE@XZ ENDP ; CRecordVector<NArchive::N7z::CFileItem>::~CRecordVector<NArchive::N7z::CFileItem>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEABUCFileItem@N7z@NArchive@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEABUCFileItem@N7z@NArchive@@I@Z PROC ; CRecordVector<NArchive::N7z::CFileItem>::operator[], COMDAT
; _this$ = ecx
; Line 227
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEABUCFileItem@N7z@NArchive@@I@Z ENDP ; CRecordVector<NArchive::N7z::CFileItem>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ PROC	; CMyComPtr<IInStream>::operator IInStream *, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ENDP	; CMyComPtr<IInStream>::operator IInStream *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ PROC	; CObjectVector<NArchive::N7z::CFolder>::CObjectVector<NArchive::N7z::CFolder>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ ENDP	; CObjectVector<NArchive::N7z::CFolder>::CObjectVector<NArchive::N7z::CFolder>
_TEXT	ENDS
PUBLIC	??_GCFolder@N7z@NArchive@@QAEPAXI@Z		; NArchive::N7z::CFolder::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T76772 = -28						; size = 4
$T76771 = -24						; size = 4
_i$75222 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ PROC	; CObjectVector<NArchive::N7z::CFolder>::~CObjectVector<NArchive::N7z::CFolder>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$75222[ebp], eax
$LN2@CObjectVec@6:
	cmp	DWORD PTR _i$75222[ebp], 0
	je	SHORT $LN3@CObjectVec@6
; Line 489
	mov	eax, DWORD PTR _i$75222[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$75222[ebp], eax
	mov	ecx, DWORD PTR _i$75222[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T76772[ebp], edx
	mov	eax, DWORD PTR $T76772[ebp]
	mov	DWORD PTR $T76771[ebp], eax
	cmp	DWORD PTR $T76771[ebp], 0
	je	SHORT $LN5@CObjectVec@6
	push	1
	mov	ecx, DWORD PTR $T76771[ebp]
	call	??_GCFolder@N7z@NArchive@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@6
$LN5@CObjectVec@6:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@6:
	jmp	SHORT $LN2@CObjectVec@6
$LN3@CObjectVec@6:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ ENDP	; CObjectVector<NArchive::N7z::CFolder>::~CObjectVector<NArchive::N7z::CFolder>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CMyComPtr@UIOutStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UIOutStream@@@@QAE@XZ PROC		; CMyComPtr<IOutStream>::CMyComPtr<IOutStream>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UIOutStream@@@@QAE@XZ ENDP		; CMyComPtr<IOutStream>::CMyComPtr<IOutStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIOutStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIOutStream@@@@QAE@XZ PROC		; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@2:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIOutStream@@@@QAE@XZ ENDP		; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ PROC ; CObjectVector<NArchive::N7z::CUpdateItem>::CObjectVector<NArchive::N7z::CUpdateItem>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ ENDP ; CObjectVector<NArchive::N7z::CUpdateItem>::CObjectVector<NArchive::N7z::CUpdateItem>
_TEXT	ENDS
PUBLIC	??0CUpdateItem@N7z@NArchive@@QAE@ABU012@@Z	; NArchive::N7z::CUpdateItem::CUpdateItem
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Add@?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAEIABUCUpdateItem@N7z@NArchive@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Add@?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAEIABUCUpdateItem@N7z@NArchive@@@Z$0
__ehfuncinfo$?Add@?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAEIABUCUpdateItem@N7z@NArchive@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Add@?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAEIABUCUpdateItem@N7z@NArchive@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?Add@?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAEIABUCUpdateItem@N7z@NArchive@@@Z
_TEXT	SEGMENT
tv74 = -28						; size = 4
$T76792 = -24						; size = 4
$T76791 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_item$ = 8						; size = 4
?Add@?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAEIABUCUpdateItem@N7z@NArchive@@@Z PROC ; CObjectVector<NArchive::N7z::CUpdateItem>::Add, COMDAT
; _this$ = ecx
; Line 459
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Add@?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAEIABUCUpdateItem@N7z@NArchive@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	64					; 00000040H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T76792[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T76792[ebp], 0
	je	SHORT $LN3@Add@2
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T76792[ebp]
	call	??0CUpdateItem@N7z@NArchive@@QAE@ABU012@@Z
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@Add@2
$LN3@Add@2:
	mov	DWORD PTR tv74[ebp], 0
$LN4@Add@2:
	mov	ecx, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T76791[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T76791[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Add@?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAEIABUCUpdateItem@N7z@NArchive@@@Z$0:
	mov	eax, DWORD PTR $T76792[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Add@?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAEIABUCUpdateItem@N7z@NArchive@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Add@?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAEIABUCUpdateItem@N7z@NArchive@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Add@?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAEIABUCUpdateItem@N7z@NArchive@@@Z ENDP ; CObjectVector<NArchive::N7z::CUpdateItem>::Add
PUBLIC	??_GCUpdateItem@N7z@NArchive@@QAEPAXI@Z		; NArchive::N7z::CUpdateItem::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T76805 = -28						; size = 4
$T76804 = -24						; size = 4
_i$75253 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ PROC ; CObjectVector<NArchive::N7z::CUpdateItem>::~CObjectVector<NArchive::N7z::CUpdateItem>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$75253[ebp], eax
$LN2@CObjectVec@7:
	cmp	DWORD PTR _i$75253[ebp], 0
	je	SHORT $LN3@CObjectVec@7
; Line 489
	mov	eax, DWORD PTR _i$75253[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$75253[ebp], eax
	mov	ecx, DWORD PTR _i$75253[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T76805[ebp], edx
	mov	eax, DWORD PTR $T76805[ebp]
	mov	DWORD PTR $T76804[ebp], eax
	cmp	DWORD PTR $T76804[ebp], 0
	je	SHORT $LN5@CObjectVec@7
	push	1
	mov	ecx, DWORD PTR $T76804[ebp]
	call	??_GCUpdateItem@N7z@NArchive@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@7
$LN5@CObjectVec@7:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@7:
	jmp	SHORT $LN2@CObjectVec@7
$LN3@CObjectVec@7:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAE@XZ ENDP ; CObjectVector<NArchive::N7z::CUpdateItem>::~CObjectVector<NArchive::N7z::CUpdateItem>
PUBLIC	?ClearAndFree@?$CRecordVector@PAX@@QAEXXZ	; CRecordVector<void *>::ClearAndFree
PUBLIC	?Clear@?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAEXXZ ; CObjectVector<NArchive::N7z::CUpdateItem>::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ClearAndFree@?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ClearAndFree@?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAEXXZ PROC ; CObjectVector<NArchive::N7z::CUpdateItem>::ClearAndFree, COMDAT
; _this$ = ecx
; Line 493
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 494
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAEXXZ ; CObjectVector<NArchive::N7z::CUpdateItem>::Clear
; Line 495
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearAndFree@?$CRecordVector@PAX@@QAEXXZ ; CRecordVector<void *>::ClearAndFree
; Line 496
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ClearAndFree@?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAEXXZ ENDP ; CObjectVector<NArchive::N7z::CUpdateItem>::ClearAndFree
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICryptoGetTextPassword2@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UICryptoGetTextPassword2@@@@QAE@XZ PROC	; CMyComPtr<ICryptoGetTextPassword2>::CMyComPtr<ICryptoGetTextPassword2>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UICryptoGetTextPassword2@@@@QAE@XZ ENDP	; CMyComPtr<ICryptoGetTextPassword2>::CMyComPtr<ICryptoGetTextPassword2>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICryptoGetTextPassword2@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICryptoGetTextPassword2@@@@QAE@XZ PROC	; CMyComPtr<ICryptoGetTextPassword2>::~CMyComPtr<ICryptoGetTextPassword2>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@3:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICryptoGetTextPassword2@@@@QAE@XZ ENDP	; CMyComPtr<ICryptoGetTextPassword2>::~CMyComPtr<ICryptoGetTextPassword2>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UICryptoGetTextPassword2@@@@QBEPAUICryptoGetTextPassword2@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UICryptoGetTextPassword2@@@@QBEPAUICryptoGetTextPassword2@@XZ PROC ; CMyComPtr<ICryptoGetTextPassword2>::operator ICryptoGetTextPassword2 *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UICryptoGetTextPassword2@@@@QBEPAUICryptoGetTextPassword2@@XZ ENDP ; CMyComPtr<ICryptoGetTextPassword2>::operator ICryptoGetTextPassword2 *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UICryptoGetTextPassword2@@@@QAEPAPAUICryptoGetTextPassword2@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UICryptoGetTextPassword2@@@@QAEPAPAUICryptoGetTextPassword2@@XZ PROC ; CMyComPtr<ICryptoGetTextPassword2>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UICryptoGetTextPassword2@@@@QAEPAPAUICryptoGetTextPassword2@@XZ ENDP ; CMyComPtr<ICryptoGetTextPassword2>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UICryptoGetTextPassword2@@@@QBEPAUICryptoGetTextPassword2@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UICryptoGetTextPassword2@@@@QBEPAUICryptoGetTextPassword2@@XZ PROC ; CMyComPtr<ICryptoGetTextPassword2>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UICryptoGetTextPassword2@@@@QBEPAUICryptoGetTextPassword2@@XZ ENDP ; CMyComPtr<ICryptoGetTextPassword2>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ PROC	; CMyComPtr<ICryptoGetTextPassword>::CMyComPtr<ICryptoGetTextPassword>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ENDP	; CMyComPtr<ICryptoGetTextPassword>::CMyComPtr<ICryptoGetTextPassword>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ PROC	; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@4:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ENDP	; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ PROC ; CMyComPtr<ICryptoGetTextPassword>::operator ICryptoGetTextPassword *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ ENDP ; CMyComPtr<ICryptoGetTextPassword>::operator ICryptoGetTextPassword *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UICryptoGetTextPassword@@@@QAEPAPAUICryptoGetTextPassword@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UICryptoGetTextPassword@@@@QAEPAPAUICryptoGetTextPassword@@XZ PROC ; CMyComPtr<ICryptoGetTextPassword>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UICryptoGetTextPassword@@@@QAEPAPAUICryptoGetTextPassword@@XZ ENDP ; CMyComPtr<ICryptoGetTextPassword>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??_GUString@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GUString@@QAEPAXI@Z PROC				; UString::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GUString@@QAEPAXI@Z ENDP				; UString::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	??0CPropVariant@NCOM@NWindows@@QAE@ABV012@@Z:PROC ; NWindows::NCOM::CPropVariant::CPropVariant
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CProp@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CProp@@QAE@ABU0@@Z PROC				; CProp::CProp, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+4]
	mov	BYTE PTR [eax+4], dl
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0CPropVariant@NCOM@NWindows@@QAE@ABV012@@Z ; NWindows::NCOM::CPropVariant::CPropVariant
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CProp@@QAE@ABU0@@Z ENDP				; CProp::CProp
_TEXT	ENDS
PUBLIC	??1CProp@@QAE@XZ				; CProp::~CProp
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCProp@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCProp@@QAEPAXI@Z PROC				; CProp::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CProp@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCProp@@QAEPAXI@Z ENDP				; CProp::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0CMethodProps@@QAE@ABV0@@Z			; CMethodProps::CMethodProps
EXTRN	??0AString@@QAE@ABV0@@Z:PROC			; AString::AString
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0COneMethodInfo@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0COneMethodInfo@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0COneMethodInfo@@QAE@ABV0@@Z$1
__ehfuncinfo$??0COneMethodInfo@@QAE@ABV0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0COneMethodInfo@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0COneMethodInfo@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0COneMethodInfo@@QAE@ABV0@@Z PROC			; COneMethodInfo::COneMethodInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0COneMethodInfo@@QAE@ABV0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CMethodProps@@QAE@ABV0@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0AString@@QAE@ABV0@@Z			; AString::AString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 24					; 00000018H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0COneMethodInfo@@QAE@ABV0@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CMethodProps@@QAE@XZ
__unwindfunclet$??0COneMethodInfo@@QAE@ABV0@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1AString@@QAE@XZ			; AString::~AString
__ehhandler$??0COneMethodInfo@@QAE@ABV0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0COneMethodInfo@@QAE@ABV0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0COneMethodInfo@@QAE@ABV0@@Z ENDP			; COneMethodInfo::COneMethodInfo
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCOneMethodInfo@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCOneMethodInfo@@QAEPAXI@Z PROC			; COneMethodInfo::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1COneMethodInfo@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@3
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCOneMethodInfo@@QAEPAXI@Z ENDP			; COneMethodInfo::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CMethodFull@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMethodFull@N7z@NArchive@@QAE@XZ PROC		; NArchive::N7z::CMethodFull::CMethodFull, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CMethodProps@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CMethodFull@N7z@NArchive@@QAE@XZ ENDP		; NArchive::N7z::CMethodFull::CMethodFull
_TEXT	ENDS
PUBLIC	??1CMethodFull@N7z@NArchive@@QAE@XZ		; NArchive::N7z::CMethodFull::~CMethodFull
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCMethodFull@N7z@NArchive@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCMethodFull@N7z@NArchive@@QAEPAXI@Z PROC		; NArchive::N7z::CMethodFull::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CMethodFull@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@4:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCMethodFull@N7z@NArchive@@QAEPAXI@Z ENDP		; NArchive::N7z::CMethodFull::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	push	esi
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector
	mov	esi, esp
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR ___t$[ebp]
	add	ecx, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], ecx
	jmp	SHORT $LN2@vector
$LN3@vector:
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??1CFolder@N7z@NArchive@@QAE@XZ			; NArchive::N7z::CFolder::~CFolder
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCFolder@N7z@NArchive@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCFolder@N7z@NArchive@@QAEPAXI@Z PROC		; NArchive::N7z::CFolder::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CFolder@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@5
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@5:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCFolder@N7z@NArchive@@QAEPAXI@Z ENDP		; NArchive::N7z::CFolder::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CUpdateItem@N7z@NArchive@@QAE@ABU012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CUpdateItem@N7z@NArchive@@QAE@ABU012@@Z PROC		; NArchive::N7z::CUpdateItem::CUpdateItem, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], ecx
	mov	eax, DWORD PTR [eax+20]
	mov	DWORD PTR [edx+20], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [ecx+24], eax
	mov	edx, DWORD PTR [edx+28]
	mov	DWORD PTR [ecx+28], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+32], edx
	mov	ecx, DWORD PTR [ecx+36]
	mov	DWORD PTR [eax+36], ecx
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 40					; 00000028H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR [eax+52], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+56]
	mov	BYTE PTR [eax+56], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+57]
	mov	BYTE PTR [eax+57], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+58]
	mov	BYTE PTR [eax+58], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+59]
	mov	BYTE PTR [eax+59], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+60]
	mov	BYTE PTR [eax+60], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+61]
	mov	BYTE PTR [eax+61], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+62]
	mov	BYTE PTR [eax+62], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+63]
	mov	BYTE PTR [eax+63], dl
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CUpdateItem@N7z@NArchive@@QAE@ABU012@@Z ENDP		; NArchive::N7z::CUpdateItem::CUpdateItem
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??_GCUpdateItem@N7z@NArchive@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCUpdateItem@N7z@NArchive@@QAEPAXI@Z PROC		; NArchive::N7z::CUpdateItem::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CUpdateItem@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@6
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@6:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCUpdateItem@N7z@NArchive@@QAEPAXI@Z ENDP		; NArchive::N7z::CUpdateItem::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CProp@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CProp@@QAE@XZ PROC					; CProp::~CProp, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CProp@@QAE@XZ ENDP					; CProp::~CProp
_TEXT	ENDS
PUBLIC	??0CProps@@QAE@ABU0@@Z				; CProps::CProps
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CMethodProps@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CMethodProps@@QAE@ABV0@@Z PROC			; CMethodProps::CMethodProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CProps@@QAE@ABU0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CMethodProps@@QAE@ABV0@@Z ENDP			; CMethodProps::CMethodProps
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CMethodFull@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CMethodFull@N7z@NArchive@@QAE@XZ PROC		; NArchive::N7z::CMethodFull::~CMethodFull, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CMethodProps@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CMethodFull@N7z@NArchive@@QAE@XZ ENDP		; NArchive::N7z::CMethodFull::~CMethodFull
_TEXT	ENDS
PUBLIC	??1?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ ; CObjArray2<NArchive::N7z::CCoderInfo>::~CObjArray2<NArchive::N7z::CCoderInfo>
PUBLIC	??1?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ	; CObjArray2<NArchive::N7z::CBond>::~CObjArray2<NArchive::N7z::CBond>
PUBLIC	??1?$CObjArray2@I@@QAE@XZ			; CObjArray2<unsigned int>::~CObjArray2<unsigned int>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CFolder@N7z@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CFolder@N7z@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CFolder@N7z@NArchive@@QAE@XZ$1
__ehfuncinfo$??1CFolder@N7z@NArchive@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CFolder@N7z@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CFolder@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CFolder@N7z@NArchive@@QAE@XZ PROC			; NArchive::N7z::CFolder::~CFolder, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CFolder@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??1?$CObjArray2@I@@QAE@XZ		; CObjArray2<unsigned int>::~CObjArray2<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ ; CObjArray2<NArchive::N7z::CBond>::~CObjArray2<NArchive::N7z::CBond>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ ; CObjArray2<NArchive::N7z::CCoderInfo>::~CObjArray2<NArchive::N7z::CCoderInfo>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CFolder@N7z@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ ; CObjArray2<NArchive::N7z::CCoderInfo>::~CObjArray2<NArchive::N7z::CCoderInfo>
__unwindfunclet$??1CFolder@N7z@NArchive@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ ; CObjArray2<NArchive::N7z::CBond>::~CObjArray2<NArchive::N7z::CBond>
__ehhandler$??1CFolder@N7z@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CFolder@N7z@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CFolder@N7z@NArchive@@QAE@XZ ENDP			; NArchive::N7z::CFolder::~CFolder
PUBLIC	??_ECCoderInfo@N7z@NArchive@@QAEPAXI@Z		; NArchive::N7z::CCoderInfo::`vector deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
tv68 = -16						; size = 4
$T76891 = -12						; size = 4
$T76890 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ PROC	; CObjArray2<NArchive::N7z::CCoderInfo>::~CObjArray2<NArchive::N7z::CCoderInfo>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mybuffer.h
; Line 203
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T76891[ebp], ecx
	mov	edx, DWORD PTR $T76891[ebp]
	mov	DWORD PTR $T76890[ebp], edx
	cmp	DWORD PTR $T76890[ebp], 0
	je	SHORT $LN3@CObjArray2
	push	3
	mov	ecx, DWORD PTR $T76890[ebp]
	call	??_ECCoderInfo@N7z@NArchive@@QAEPAXI@Z
	mov	DWORD PTR tv68[ebp], eax
	jmp	SHORT $LN1@CObjArray2
$LN3@CObjArray2:
	mov	DWORD PTR tv68[ebp], 0
$LN1@CObjArray2:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ ENDP	; CObjArray2<NArchive::N7z::CCoderInfo>::~CObjArray2<NArchive::N7z::CCoderInfo>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
$T76896 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ PROC	; CObjArray2<NArchive::N7z::CBond>::~CObjArray2<NArchive::N7z::CBond>, COMDAT
; _this$ = ecx
; Line 203
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T76896[ebp], ecx
	mov	edx, DWORD PTR $T76896[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ ENDP	; CObjArray2<NArchive::N7z::CBond>::~CObjArray2<NArchive::N7z::CBond>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CObjArray2@I@@QAE@XZ
_TEXT	SEGMENT
$T76899 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CObjArray2@I@@QAE@XZ PROC				; CObjArray2<unsigned int>::~CObjArray2<unsigned int>, COMDAT
; _this$ = ecx
; Line 203
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T76899[ebp], ecx
	mov	edx, DWORD PTR $T76899[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CObjArray2@I@@QAE@XZ ENDP				; CObjArray2<unsigned int>::~CObjArray2<unsigned int>
_TEXT	ENDS
PUBLIC	??1CCoderInfo@N7z@NArchive@@QAE@XZ		; NArchive::N7z::CCoderInfo::~CCoderInfo
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_ECCoderInfo@N7z@NArchive@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_ECCoderInfo@N7z@NArchive@@QAEPAXI@Z PROC		; NArchive::N7z::CCoderInfo::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector@2
	push	OFFSET ??1CCoderInfo@N7z@NArchive@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector@2
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN2@vector@2:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector@2
$LN3@vector@2:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CCoderInfo@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector@2
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@2:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector@2:
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_ECCoderInfo@N7z@NArchive@@QAEPAXI@Z ENDP		; NArchive::N7z::CCoderInfo::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??1?$CBuffer@E@@QAE@XZ				; CBuffer<unsigned char>::~CBuffer<unsigned char>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CCoderInfo@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CCoderInfo@N7z@NArchive@@QAE@XZ PROC			; NArchive::N7z::CCoderInfo::~CCoderInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CCoderInfo@N7z@NArchive@@QAE@XZ ENDP			; NArchive::N7z::CCoderInfo::~CCoderInfo
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CBuffer@E@@QAE@XZ
_TEXT	SEGMENT
$T76907 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CBuffer@E@@QAE@XZ PROC				; CBuffer<unsigned char>::~CBuffer<unsigned char>, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T76907[ebp], ecx
	mov	edx, DWORD PTR $T76907[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CBuffer@E@@QAE@XZ ENDP				; CBuffer<unsigned char>::~CBuffer<unsigned char>
_TEXT	ENDS
PUBLIC	??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z	; CObjectVector<CProp>::CObjectVector<CProp>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CProps@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CProps@@QAE@ABU0@@Z PROC				; CProps::CProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z ; CObjectVector<CProp>::CObjectVector<CProp>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CProps@@QAE@ABU0@@Z ENDP				; CProps::CProps
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@PAX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@PAX@@QAE@XZ PROC			; CRecordVector<void *>::CRecordVector<void *>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@PAX@@QAE@XZ ENDP			; CRecordVector<void *>::CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@PAX@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@PAX@@QBEIXZ PROC			; CRecordVector<void *>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@PAX@@QBEIXZ ENDP			; CRecordVector<void *>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ PROC		; CRecordVector<void *>::IsEmpty, COMDAT
; _this$ = ecx
; Line 49
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+4], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ ENDP		; CRecordVector<void *>::IsEmpty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z
_TEXT	SEGMENT
$T76919 = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z PROC	; CRecordVector<void *>::ConstructReserve, COMDAT
; _this$ = ecx
; Line 52
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 53
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN2@ConstructR
; Line 55
	xor	ecx, ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T76919[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T76919[ebp]
	mov	DWORD PTR [eax], ecx
; Line 56
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@ConstructR:
; Line 58
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z ENDP	; CRecordVector<void *>::ConstructReserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Reserve@?$CRecordVector@PAX@@QAEXI@Z
_TEXT	SEGMENT
$T76923 = -16						; size = 4
$T76922 = -12						; size = 4
_p$75395 = -8						; size = 4
_this$ = -4						; size = 4
_newCapacity$ = 8					; size = 4
?Reserve@?$CRecordVector@PAX@@QAEXI@Z PROC		; CRecordVector<void *>::Reserve, COMDAT
; _this$ = ecx
; Line 61
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 62
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	SHORT $LN3@Reserve
; Line 64
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T76922[ebp], eax
	mov	eax, DWORD PTR $T76922[ebp]
	mov	DWORD PTR _p$75395[ebp], eax
; Line 65
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@Reserve
; Line 66
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$75395[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@Reserve:
; Line 67
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T76923[ebp], edx
	mov	eax, DWORD PTR $T76923[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 68
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$75395[ebp]
	mov	DWORD PTR [ecx], edx
; Line 69
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@Reserve:
; Line 71
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Reserve@?$CRecordVector@PAX@@QAEXI@Z ENDP		; CRecordVector<void *>::Reserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@PAX@@QAE@XZ
_TEXT	SEGMENT
$T76926 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@PAX@@QAE@XZ PROC			; CRecordVector<void *>::~CRecordVector<void *>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T76926[ebp], ecx
	mov	edx, DWORD PTR $T76926[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@PAX@@QAE@XZ ENDP			; CRecordVector<void *>::~CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ClearAndFree@?$CRecordVector@PAX@@QAEXXZ
_TEXT	SEGMENT
$T76929 = -8						; size = 4
_this$ = -4						; size = 4
?ClearAndFree@?$CRecordVector@PAX@@QAEXXZ PROC		; CRecordVector<void *>::ClearAndFree, COMDAT
; _this$ = ecx
; Line 124
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 125
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T76929[ebp], ecx
	mov	edx, DWORD PTR $T76929[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 126
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
; Line 127
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 128
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
; Line 129
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ClearAndFree@?$CRecordVector@PAX@@QAEXXZ ENDP		; CRecordVector<void *>::ClearAndFree
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Clear@?$CRecordVector@PAX@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$CRecordVector@PAX@@QAEXXZ PROC			; CRecordVector<void *>::Clear, COMDAT
; _this$ = ecx
; Line 131
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CRecordVector@PAX@@QAEXXZ ENDP			; CRecordVector<void *>::Clear
_TEXT	ENDS
PUBLIC	?MoveItems@?$CRecordVector@PAX@@AAEXII@Z	; CRecordVector<void *>::MoveItems
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?DeleteFrontal@?$CRecordVector@PAX@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_num$ = 8						; size = 4
?DeleteFrontal@?$CRecordVector@PAX@@QAEXI@Z PROC	; CRecordVector<void *>::DeleteFrontal, COMDAT
; _this$ = ecx
; Line 142
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 143
	cmp	DWORD PTR _num$[ebp], 0
	je	SHORT $LN2@DeleteFron@2
; Line 145
	mov	eax, DWORD PTR _num$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MoveItems@?$CRecordVector@PAX@@AAEXII@Z ; CRecordVector<void *>::MoveItems
; Line 146
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, DWORD PTR _num$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
$LN2@DeleteFron@2:
; Line 148
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?DeleteFrontal@?$CRecordVector@PAX@@QAEXI@Z ENDP	; CRecordVector<void *>::DeleteFrontal
_TEXT	ENDS
PUBLIC	?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ	; CRecordVector<void *>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@PAX@@QAEIQAX@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?Add@?$CRecordVector@PAX@@QAEIQAX@Z PROC		; CRecordVector<void *>::Add, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ; CRecordVector<void *>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 201
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv72[ebp]
; Line 202
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CRecordVector@PAX@@QAEIQAX@Z ENDP		; CRecordVector<void *>::Add
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z PROC	; CRecordVector<void *>::AddInReserved, COMDAT
; _this$ = ecx
; Line 205
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 206
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 207
	mov	esp, ebp
	pop	ebp
	ret	4
?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ENDP	; CRecordVector<void *>::AddInReserved
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Insert@?$CRecordVector@PAX@@QAEXIQAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
_item$ = 12						; size = 4
?Insert@?$CRecordVector@PAX@@QAEXIQAX@Z PROC		; CRecordVector<void *>::Insert, COMDAT
; _this$ = ecx
; Line 210
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 211
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ; CRecordVector<void *>::ReserveOnePosition
; Line 212
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MoveItems@?$CRecordVector@PAX@@AAEXII@Z ; CRecordVector<void *>::MoveItems
; Line 213
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 214
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 215
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Insert@?$CRecordVector@PAX@@QAEXIQAX@Z ENDP		; CRecordVector<void *>::Insert
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@PAX@@QBEABQAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@PAX@@QBEABQAXI@Z PROC		; CRecordVector<void *>::operator[], COMDAT
; _this$ = ecx
; Line 227
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@PAX@@QBEABQAXI@Z ENDP		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@PAX@@QAEAAPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@PAX@@QAEAAPAXI@Z PROC		; CRecordVector<void *>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@PAX@@QAEAAPAXI@Z ENDP		; CRecordVector<void *>::operator[]
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$1
__ehfuncinfo$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
tv85 = -36						; size = 4
$T76947 = -32						; size = 4
$T76946 = -28						; size = 4
_i$75439 = -24						; size = 4
_size$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_v$ = 8							; size = 4
??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z PROC		; CObjectVector<CProp>::CObjectVector<CProp>, COMDAT
; _this$ = ecx
; Line 422
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 424
	mov	ecx, DWORD PTR _v$[ebp]
	call	?Size@?$CObjectVector@UCProp@@@@QBEIXZ	; CObjectVector<CProp>::Size
	mov	DWORD PTR _size$[ebp], eax
; Line 425
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z ; CRecordVector<void *>::ConstructReserve
; Line 426
	mov	DWORD PTR _i$75439[ebp], 0
	jmp	SHORT $LN3@CObjectVec@8
$LN2@CObjectVec@8:
	mov	ecx, DWORD PTR _i$75439[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$75439[ebp], ecx
$LN3@CObjectVec@8:
	mov	edx, DWORD PTR _i$75439[ebp]
	cmp	edx, DWORD PTR _size$[ebp]
	jae	SHORT $LN4@CObjectVec@8
; Line 427
	push	24					; 00000018H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T76947[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T76947[ebp], 0
	je	SHORT $LN6@CObjectVec@8
	mov	eax, DWORD PTR _i$75439[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	call	??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ; CObjectVector<CProp>::operator[]
	push	eax
	mov	ecx, DWORD PTR $T76947[ebp]
	call	??0CProp@@QAE@ABU0@@Z
	mov	DWORD PTR tv85[ebp], eax
	jmp	SHORT $LN7@CObjectVec@8
$LN6@CObjectVec@8:
	mov	DWORD PTR tv85[ebp], 0
$LN7@CObjectVec@8:
	mov	ecx, DWORD PTR tv85[ebp]
	mov	DWORD PTR $T76946[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T76946[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ; CRecordVector<void *>::AddInReserved
	jmp	SHORT $LN2@CObjectVec@8
$LN4@CObjectVec@8:
; Line 428
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$1:
	mov	eax, DWORD PTR $T76947[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z ENDP		; CObjectVector<CProp>::CObjectVector<CProp>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ReserveOnePosition@?$CRecordVector@UCBond2@N7z@NArchive@@@@AAEXXZ
_TEXT	SEGMENT
$T76961 = -20						; size = 4
$T76960 = -16						; size = 4
_p$75451 = -12						; size = 4
_newCapacity$75450 = -8					; size = 4
_this$ = -4						; size = 4
?ReserveOnePosition@?$CRecordVector@UCBond2@N7z@NArchive@@@@AAEXXZ PROC ; CRecordVector<NArchive::N7z::CBond2>::ReserveOnePosition, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@ReserveOne
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$75450[ebp], ecx
; Line 23
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$75450[ebp]
	mov	edx, 12					; 0000000cH
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T76960[ebp], eax
	mov	eax, DWORD PTR $T76960[ebp]
	mov	DWORD PTR _p$75451[ebp], eax
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@ReserveOne
; Line 25
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	imul	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$75451[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne:
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T76961[ebp], edx
	mov	eax, DWORD PTR $T76961[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$75451[ebp]
	mov	DWORD PTR [ecx], edx
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$75450[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ReserveOne:
; Line 30
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveOnePosition@?$CRecordVector@UCBond2@N7z@NArchive@@@@AAEXXZ ENDP ; CRecordVector<NArchive::N7z::CBond2>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Clear@?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAEXXZ
_TEXT	SEGMENT
tv75 = -20						; size = 4
$T76965 = -16						; size = 4
$T76964 = -12						; size = 4
_i$75483 = -8						; size = 4
_this$ = -4						; size = 4
?Clear@?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAEXXZ PROC ; CObjectVector<NArchive::N7z::CUpdateItem>::Clear, COMDAT
; _this$ = ecx
; Line 499
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 500
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$75483[ebp], eax
$LN2@Clear@2:
	cmp	DWORD PTR _i$75483[ebp], 0
	je	SHORT $LN1@Clear@2
; Line 501
	mov	eax, DWORD PTR _i$75483[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$75483[ebp], eax
	mov	ecx, DWORD PTR _i$75483[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T76965[ebp], edx
	mov	eax, DWORD PTR $T76965[ebp]
	mov	DWORD PTR $T76964[ebp], eax
	cmp	DWORD PTR $T76964[ebp], 0
	je	SHORT $LN5@Clear@2
	push	1
	mov	ecx, DWORD PTR $T76964[ebp]
	call	??_GCUpdateItem@N7z@NArchive@@QAEPAXI@Z
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN6@Clear@2
$LN5@Clear@2:
	mov	DWORD PTR tv75[ebp], 0
$LN6@Clear@2:
	jmp	SHORT $LN2@Clear@2
$LN1@Clear@2:
; Line 502
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CRecordVector@PAX@@QAEXXZ	; CRecordVector<void *>::Clear
; Line 503
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QAEXXZ ENDP ; CObjectVector<NArchive::N7z::CUpdateItem>::Clear
_TEXT	ENDS
EXTRN	__imp__memmove:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?MoveItems@?$CRecordVector@PAX@@AAEXII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_destIndex$ = 8						; size = 4
_srcIndex$ = 12						; size = 4
?MoveItems@?$CRecordVector@PAX@@AAEXII@Z PROC		; CRecordVector<void *>::MoveItems, COMDAT
; _this$ = ecx
; Line 14
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 15
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR _srcIndex$[ebp]
	shl	ecx, 2
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _srcIndex$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _destIndex$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 16
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?MoveItems@?$CRecordVector@PAX@@AAEXII@Z ENDP		; CRecordVector<void *>::MoveItems
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ
_TEXT	SEGMENT
$T76973 = -20						; size = 4
$T76972 = -16						; size = 4
_p$75498 = -12						; size = 4
_newCapacity$75497 = -8					; size = 4
_this$ = -4						; size = 4
?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ PROC	; CRecordVector<void *>::ReserveOnePosition, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@ReserveOne@2
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$75497[ebp], ecx
; Line 23
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$75497[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T76972[ebp], eax
	mov	eax, DWORD PTR $T76972[ebp]
	mov	DWORD PTR _p$75498[ebp], eax
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@ReserveOne@2
; Line 25
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$75498[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne@2:
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T76973[ebp], edx
	mov	eax, DWORD PTR $T76973[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$75498[ebp]
	mov	DWORD PTR [ecx], edx
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$75497[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ReserveOne@2:
; Line 30
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ENDP	; CRecordVector<void *>::ReserveOnePosition
_TEXT	ENDS
END
