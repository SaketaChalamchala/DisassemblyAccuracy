; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\CPP\7zip\UI\Common\PropIDUtils.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
_g_WinAttribChars DB 'RHS8DAdNTsLCOnE_', 00H
	ORG $+3
_kPosixTypes DB	030H
	DB	070H
	DB	063H
	DB	033H
	DB	064H
	DB	035H
	DB	062H
	DB	037H
	DB	02dH
	DB	039H
	DB	06cH
	DB	042H
	DB	073H
	DB	044H
	DB	045H
	DB	046H
$SG67842 DB	'0', 00H
	ORG $+2
$SG67843 DB	'Dialup', 00H
	ORG $+1
$SG67844 DB	'Network', 00H
$SG67845 DB	'Batch', 00H
	ORG $+2
$SG67846 DB	'Interactive', 00H
$SG67847 DB	'Logon', 00H
	ORG $+2
$SG67848 DB	'Service', 00H
$SG67849 DB	'Anonymous', 00H
	ORG $+2
$SG67850 DB	'Proxy', 00H
	ORG $+2
$SG67851 DB	'EnterpriseDC', 00H
	ORG $+3
$SG67852 DB	'Self', 00H
	ORG $+3
$SG67853 DB	'AuthenticatedUsers', 00H
	ORG $+1
$SG67854 DB	'RestrictedCode', 00H
	ORG $+1
$SG67855 DB	'TerminalServer', 00H
	ORG $+1
$SG67856 DB	'RemoteInteractiveLogon', 00H
	ORG $+1
$SG67857 DB	'ThisOrganization', 00H
	ORG $+3
$SG67858 DB	'16', 00H
	ORG $+1
$SG67859 DB	'IUserIIS', 00H
	ORG $+3
$SG67860 DB	'LocalSystem', 00H
$SG67861 DB	'LocalService', 00H
	ORG $+3
$SG67862 DB	'NetworkService', 00H
	ORG $+1
$SG67863 DB	'Domains', 00H
$SG67877 DB	'PowerUsers', 00H
	ORG $+1
_sidNames DD	FLAT:$SG67842
	DD	FLAT:$SG67843
	DD	FLAT:$SG67844
	DD	FLAT:$SG67845
	DD	FLAT:$SG67846
	DD	FLAT:$SG67847
	DD	FLAT:$SG67848
	DD	FLAT:$SG67849
	DD	FLAT:$SG67850
	DD	FLAT:$SG67851
	DD	FLAT:$SG67852
	DD	FLAT:$SG67853
	DD	FLAT:$SG67854
	DD	FLAT:$SG67855
	DD	FLAT:$SG67856
	DD	FLAT:$SG67857
	DD	FLAT:$SG67858
	DD	FLAT:$SG67859
	DD	FLAT:$SG67860
	DD	FLAT:$SG67861
	DD	FLAT:$SG67862
	DD	FLAT:$SG67863
$SG67874 DB	'Administrators', 00H
	ORG $+1
$SG67875 DB	'Users', 00H
	ORG $+2
$SG67876 DB	'Guests', 00H
	ORG $+1
$SG67878 DB	'AccountOperators', 00H
	ORG $+3
$SG67879 DB	'ServerOperators', 00H
$SG67880 DB	'PrintOperators', 00H
	ORG $+1
$SG67881 DB	'BackupOperators', 00H
$SG67882 DB	'Replicators', 00H
$SG67883 DB	'Backup Operators', 00H
	ORG $+3
$SG67884 DB	'PreWindows2000CompatibleAccess', 00H
	ORG $+1
$SG67885 DB	'RemoteDesktopUsers', 00H
	ORG $+1
$SG67886 DB	'NetworkConfigurationOperators', 00H
	ORG $+2
$SG67887 DB	'IncomingForestTrustBuilders', 00H
$SG67888 DB	'PerformanceMonitorUsers', 00H
$SG67889 DB	'PerformanceLogUsers', 00H
$SG67890 DB	'WindowsAuthorizationAccessGroup', 00H
$SG67891 DB	'TerminalServerLicenseServers', 00H
	ORG $+3
$SG67892 DB	'DistributedCOMUsers', 00H
$SG67893 DB	'CryptographicOperators', 00H
	ORG $+1
$SG67894 DB	'EventLogReaders', 00H
$SG67895 DB	'CertificateServiceDCOMAccess', 00H
	ORG $+3
$SG67897 DB	'Administrator', 00H
	ORG $+2
$SG67899 DB	'KRBTGT', 00H
	ORG $+1
$SG67901 DB	'DomainUsers', 00H
_sid_32_Names DD 0220H
	DD	FLAT:$SG67874
	DD	0221H
	DD	FLAT:$SG67875
	DD	0222H
	DD	FLAT:$SG67876
	DD	0223H
	DD	FLAT:$SG67877
	DD	0224H
	DD	FLAT:$SG67878
	DD	0225H
	DD	FLAT:$SG67879
	DD	0226H
	DD	FLAT:$SG67880
	DD	0227H
	DD	FLAT:$SG67881
	DD	0228H
	DD	FLAT:$SG67882
	DD	0229H
	DD	FLAT:$SG67883
	DD	022aH
	DD	FLAT:$SG67884
	DD	022bH
	DD	FLAT:$SG67885
	DD	022cH
	DD	FLAT:$SG67886
	DD	022dH
	DD	FLAT:$SG67887
	DD	022eH
	DD	FLAT:$SG67888
	DD	022fH
	DD	FLAT:$SG67889
	DD	0230H
	DD	FLAT:$SG67890
	DD	0231H
	DD	FLAT:$SG67891
	DD	0232H
	DD	FLAT:$SG67892
	DD	0239H
	DD	FLAT:$SG67893
	DD	023dH
	DD	FLAT:$SG67894
	DD	023eH
	DD	FLAT:$SG67895
$SG67898 DB	'Guest', 00H
	ORG $+2
$SG67900 DB	'DomainAdmins', 00H
	ORG $+3
$SG67902 DB	'DomainComputers', 00H
$SG67903 DB	'DomainControllers', 00H
	ORG $+2
$SG67904 DB	'CertPublishers', 00H
	ORG $+1
$SG67905 DB	'SchemaAdmins', 00H
	ORG $+3
$SG67906 DB	'EnterpriseAdmins', 00H
	ORG $+3
$SG67907 DB	'GroupPolicyCreatorOwners', 00H
	ORG $+3
$SG67908 DB	'RASandIASServers', 00H
	ORG $+3
$SG67909 DB	'RASandIASServers', 00H
	ORG $+3
$SG67910 DB	'AllowedRODCPasswordReplicationGroup', 00H
$SG67911 DB	'DeniedRODCPasswordReplicationGroup', 00H
	ORG $+1
$SG67922 DB	'TrustedInstaller', 00H
	ORG $+3
_sid_21_Names DD 01f4H
	DD	FLAT:$SG67897
	DD	01f5H
	DD	FLAT:$SG67898
	DD	01f6H
	DD	FLAT:$SG67899
	DD	0200H
	DD	FLAT:$SG67900
	DD	0201H
	DD	FLAT:$SG67901
	DD	0203H
	DD	FLAT:$SG67902
	DD	0204H
	DD	FLAT:$SG67903
	DD	0205H
	DD	FLAT:$SG67904
	DD	0206H
	DD	FLAT:$SG67905
	DD	0207H
	DD	FLAT:$SG67906
	DD	0208H
	DD	FLAT:$SG67907
	DD	0229H
	DD	FLAT:$SG67908
	DD	0229H
	DD	FLAT:$SG67909
	DD	023bH
	DD	FLAT:$SG67910
	DD	023cH
	DD	FLAT:$SG67911
_services_to_name DD 038fb89b5H
	DD	0cbc28419H
	DD	06d236c5cH
	DD	06e770057H
	DD	0876402c0H
	DD	FLAT:$SG67922
$SG67930 DB	'ERROR', 00H
	ORG $+2
$SG67933 DB	'UNSUPPORTED', 00H
$SG67936 DB	'ERROR', 00H
	ORG $+2
$SG67977 DB	'S-1-', 00H
	ORG $+3
$SG67980 DB	'0x', 00H
	ORG $+1
$SG67998 DB	'ERROR', 00H
	ORG $+2
$SG68035 DB	'ERROR', 00H
	ORG $+2
$SG68039 DB	'UNSUPPORTED', 00H
$SG68044 DB	's:', 00H
	ORG $+1
$SG68045 DB	'd:', 00H
	ORG $+1
$SG68099 DB	'Junction: ', 00H
	ORG $+1
$SG68102 DB	' : ', 00H
CONST	ENDS
PUBLIC	?ConvertWinAttribToString@@YGXPADI@Z		; ConvertWinAttribToString
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\propidutils.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_i$67788 = -4						; size = 4
_s$ = 8							; size = 4
_wa$ = 12						; size = 4
?ConvertWinAttribToString@@YGXPADI@Z PROC		; ConvertWinAttribToString
; Line 69
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 70
	mov	DWORD PTR _i$67788[ebp], 0
	jmp	SHORT $LN5@ConvertWin
$LN4@ConvertWin:
	mov	eax, DWORD PTR _i$67788[ebp]
	add	eax, 1
	mov	DWORD PTR _i$67788[ebp], eax
$LN5@ConvertWin:
	cmp	DWORD PTR _i$67788[ebp], 16		; 00000010H
	jge	SHORT $LN3@ConvertWin
; Line 71
	mov	edx, 1
	mov	ecx, DWORD PTR _i$67788[ebp]
	shl	edx, cl
	and	edx, DWORD PTR _wa$[ebp]
	je	SHORT $LN2@ConvertWin
	cmp	DWORD PTR _i$67788[ebp], 7
	je	SHORT $LN2@ConvertWin
; Line 72
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _i$67788[ebp]
	mov	dl, BYTE PTR _g_WinAttribChars[ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 1
	mov	DWORD PTR _s$[ebp], eax
$LN2@ConvertWin:
; Line 73
	jmp	SHORT $LN4@ConvertWin
$LN3@ConvertWin:
	mov	ecx, DWORD PTR _s$[ebp]
	mov	BYTE PTR [ecx], 0
; Line 79
	mov	edx, DWORD PTR _wa$[ebp]
	shr	edx, 16					; 00000010H
	test	edx, edx
	je	SHORT $LN6@ConvertWin
; Line 81
	mov	eax, DWORD PTR _s$[ebp]
	mov	BYTE PTR [eax], 32			; 00000020H
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, 1
	mov	DWORD PTR _s$[ebp], ecx
; Line 82
	mov	edx, DWORD PTR _wa$[ebp]
	shr	edx, 16					; 00000010H
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	?ConvertPosixAttribToString@@YGXPADI@Z	; ConvertPosixAttribToString
$LN6@ConvertWin:
; Line 84
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?ConvertWinAttribToString@@YGXPADI@Z ENDP		; ConvertWinAttribToString
_TEXT	ENDS
EXTRN	?ConvertUInt32ToHex8Digits@@YGXIPAD@Z:PROC	; ConvertUInt32ToHex8Digits
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$67775 = -4						; size = 4
_s$ = 8							; size = 4
_a$ = 12						; size = 4
?ConvertPosixAttribToString@@YGXPADI@Z PROC		; ConvertPosixAttribToString
; Line 47
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 48
	mov	eax, DWORD PTR _a$[ebp]
	shr	eax, 12					; 0000000cH
	and	eax, 15					; 0000000fH
	mov	ecx, DWORD PTR _s$[ebp]
	mov	dl, BYTE PTR _kPosixTypes[eax]
	mov	BYTE PTR [ecx], dl
; Line 49
	mov	DWORD PTR _i$67775[ebp], 6
	jmp	SHORT $LN7@ConvertPos
$LN6@ConvertPos:
	mov	eax, DWORD PTR _i$67775[ebp]
	sub	eax, 3
	mov	DWORD PTR _i$67775[ebp], eax
$LN7@ConvertPos:
	cmp	DWORD PTR _i$67775[ebp], 0
	jl	SHORT $LN5@ConvertPos
; Line 51
	mov	ecx, DWORD PTR _i$67775[ebp]
	add	ecx, 2
	mov	edx, 1
	shl	edx, cl
	and	edx, DWORD PTR _a$[ebp]
	neg	edx
	sbb	dl, dl
	and	dl, 69					; 00000045H
	add	dl, 45					; 0000002dH
	mov	eax, 7
	sub	eax, DWORD PTR _i$67775[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	BYTE PTR [ecx+eax], dl
; Line 52
	mov	ecx, DWORD PTR _i$67775[ebp]
	add	ecx, 1
	mov	edx, 1
	shl	edx, cl
	and	edx, DWORD PTR _a$[ebp]
	neg	edx
	sbb	dl, dl
	and	dl, 74					; 0000004aH
	add	dl, 45					; 0000002dH
	mov	eax, 8
	sub	eax, DWORD PTR _i$67775[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	BYTE PTR [ecx+eax], dl
; Line 53
	mov	edx, 1
	mov	ecx, DWORD PTR _i$67775[ebp]
	shl	edx, cl
	and	edx, DWORD PTR _a$[ebp]
	neg	edx
	sbb	dl, dl
	and	dl, 75					; 0000004bH
	add	dl, 45					; 0000002dH
	mov	eax, 9
	sub	eax, DWORD PTR _i$67775[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	BYTE PTR [ecx+eax], dl
; Line 54
	jmp	$LN6@ConvertPos
$LN5@ConvertPos:
; Line 55
	mov	edx, DWORD PTR _a$[ebp]
	and	edx, 2048				; 00000800H
	je	SHORT $LN4@ConvertPos
	mov	eax, DWORD PTR _a$[ebp]
	and	eax, 64					; 00000040H
	neg	eax
	sbb	al, al
	and	al, 32					; 00000020H
	add	al, 83					; 00000053H
	mov	ecx, DWORD PTR _s$[ebp]
	mov	BYTE PTR [ecx+3], al
$LN4@ConvertPos:
; Line 56
	mov	edx, DWORD PTR _a$[ebp]
	and	edx, 1024				; 00000400H
	je	SHORT $LN3@ConvertPos
	mov	eax, DWORD PTR _a$[ebp]
	and	eax, 8
	neg	eax
	sbb	al, al
	and	al, 32					; 00000020H
	add	al, 83					; 00000053H
	mov	ecx, DWORD PTR _s$[ebp]
	mov	BYTE PTR [ecx+6], al
$LN3@ConvertPos:
; Line 57
	mov	edx, DWORD PTR _a$[ebp]
	and	edx, 512				; 00000200H
	je	SHORT $LN2@ConvertPos
	mov	eax, DWORD PTR _a$[ebp]
	and	eax, 1
	neg	eax
	sbb	al, al
	and	al, 32					; 00000020H
	add	al, 84					; 00000054H
	mov	ecx, DWORD PTR _s$[ebp]
	mov	BYTE PTR [ecx+9], al
$LN2@ConvertPos:
; Line 58
	mov	edx, DWORD PTR _s$[ebp]
	mov	BYTE PTR [edx+10], 0
; Line 60
	mov	eax, DWORD PTR _a$[ebp]
	and	eax, -65536				; ffff0000H
	mov	DWORD PTR _a$[ebp], eax
; Line 61
	je	SHORT $LN8@ConvertPos
; Line 63
	mov	ecx, DWORD PTR _s$[ebp]
	mov	BYTE PTR [ecx+10], 32			; 00000020H
; Line 64
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, 11					; 0000000bH
	push	edx
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	call	?ConvertUInt32ToHex8Digits@@YGXIPAD@Z	; ConvertUInt32ToHex8Digits
$LN8@ConvertPos:
; Line 66
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?ConvertPosixAttribToString@@YGXPADI@Z ENDP		; ConvertPosixAttribToString
_TEXT	ENDS
PUBLIC	?ConvertPropVariantToUInt64@@YG_NABUtagPROPVARIANT@@AA_K@Z ; ConvertPropVariantToUInt64
PUBLIC	?ConvertPropertyToShortString@@YGXPADABUtagPROPVARIANT@@K_N@Z ; ConvertPropertyToShortString
EXTRN	?ConvertPropVariantToShortString@@YGXABUtagPROPVARIANT@@PAD@Z:PROC ; ConvertPropVariantToShortString
EXTRN	?ConvertUInt64ToHex@@YGX_KPAD@Z:PROC		; ConvertUInt64ToHex
EXTRN	?ConvertUInt64ToString@@YGX_KPAD@Z:PROC		; ConvertUInt64ToString
EXTRN	_strlen:PROC
EXTRN	?ConvertUInt32ToString@@YGXIPAD@Z:PROC		; ConvertUInt32ToString
EXTRN	?ConvertFileTimeToString@@YG_NABU_FILETIME@@PAD_N2@Z:PROC ; ConvertFileTimeToString
EXTRN	__imp__FileTimeToLocalFileTime@8:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__aullshr:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv77 = -48						; size = 4
_v$67822 = -40						; size = 8
_low$67819 = -28					; size = 8
_a$67813 = -20						; size = 4
_localFileTime$67801 = -12				; size = 8
_dest$ = 8						; size = 4
_prop$ = 12						; size = 4
_propID$ = 16						; size = 4
_full$ = 20						; size = 1
?ConvertPropertyToShortString@@YGXPADABUtagPROPVARIANT@@K_N@Z PROC ; ConvertPropertyToShortString
; Line 87
	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 88
	mov	eax, DWORD PTR _dest$[ebp]
	mov	BYTE PTR [eax], 0
; Line 90
	mov	ecx, DWORD PTR _prop$[ebp]
	movzx	edx, WORD PTR [ecx]
	cmp	edx, 64					; 00000040H
	jne	SHORT $LN16@ConvertPro
; Line 95
	mov	eax, DWORD PTR _prop$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN13@ConvertPro
	mov	ecx, DWORD PTR _prop$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN14@ConvertPro
$LN13@ConvertPro:
	mov	esi, esp
	lea	edx, DWORD PTR _localFileTime$67801[ebp]
	push	edx
	mov	eax, DWORD PTR _prop$[ebp]
	add	eax, 8
	push	eax
	call	DWORD PTR __imp__FileTimeToLocalFileTime@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN15@ConvertPro
$LN14@ConvertPro:
; Line 96
	jmp	$LN17@ConvertPro
$LN15@ConvertPro:
; Line 97
	movzx	ecx, BYTE PTR _full$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _dest$[ebp]
	push	edx
	lea	eax, DWORD PTR _localFileTime$67801[ebp]
	push	eax
	call	?ConvertFileTimeToString@@YG_NABU_FILETIME@@PAD_N2@Z ; ConvertFileTimeToString
; Line 98
	jmp	$LN17@ConvertPro
$LN16@ConvertPro:
; Line 101
	mov	ecx, DWORD PTR _propID$[ebp]
	mov	DWORD PTR tv77[ebp], ecx
	mov	edx, DWORD PTR tv77[ebp]
	sub	edx, 9
	mov	DWORD PTR tv77[ebp], edx
	cmp	DWORD PTR tv77[ebp], 82			; 00000052H
	ja	$LN11@ConvertPro
	mov	eax, DWORD PTR tv77[ebp]
	movzx	ecx, BYTE PTR $LN19@ConvertPro[eax]
	jmp	DWORD PTR $LN24@ConvertPro[ecx*4]
$LN10@ConvertPro:
; Line 105
	mov	edx, DWORD PTR _prop$[ebp]
	movzx	eax, WORD PTR [edx]
	cmp	eax, 19					; 00000013H
	je	SHORT $LN9@ConvertPro
; Line 106
	jmp	$LN11@ConvertPro
$LN9@ConvertPro:
; Line 107
	mov	ecx, DWORD PTR _dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR _prop$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	?ConvertUInt32ToHex8Digits@@YGXIPAD@Z	; ConvertUInt32ToHex8Digits
; Line 108
	jmp	$LN17@ConvertPro
$LN8@ConvertPro:
; Line 112
	mov	ecx, DWORD PTR _prop$[ebp]
	movzx	edx, WORD PTR [ecx]
	cmp	edx, 19					; 00000013H
	je	SHORT $LN7@ConvertPro
; Line 113
	jmp	$LN11@ConvertPro
$LN7@ConvertPro:
; Line 114
	mov	eax, DWORD PTR _prop$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _a$67813[ebp], ecx
; Line 121
	mov	edx, DWORD PTR _a$67813[ebp]
	push	edx
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	call	?ConvertWinAttribToString@@YGXPADI@Z	; ConvertWinAttribToString
; Line 122
	jmp	$LN17@ConvertPro
$LN6@ConvertPro:
; Line 126
	mov	ecx, DWORD PTR _prop$[ebp]
	movzx	edx, WORD PTR [ecx]
	cmp	edx, 19					; 00000013H
	je	SHORT $LN5@ConvertPro
; Line 127
	jmp	$LN11@ConvertPro
$LN5@ConvertPro:
; Line 128
	mov	eax, DWORD PTR _prop$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _dest$[ebp]
	push	edx
	call	?ConvertPosixAttribToString@@YGXPADI@Z	; ConvertPosixAttribToString
; Line 129
	jmp	$LN17@ConvertPro
$LN4@ConvertPro:
; Line 133
	mov	eax, DWORD PTR _prop$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 21					; 00000015H
	je	SHORT $LN3@ConvertPro
; Line 134
	jmp	$LN11@ConvertPro
$LN3@ConvertPro:
; Line 135
	mov	edx, DWORD PTR _dest$[ebp]
	push	edx
	mov	ecx, DWORD PTR _prop$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR [ecx+12]
	mov	cl, 48					; 00000030H
	call	__aullshr
	push	eax
	call	?ConvertUInt32ToString@@YGXIPAD@Z	; ConvertUInt32ToString
; Line 136
	mov	edx, DWORD PTR _dest$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	add	eax, DWORD PTR _dest$[ebp]
	mov	DWORD PTR _dest$[ebp], eax
; Line 137
	mov	eax, DWORD PTR _dest$[ebp]
	mov	BYTE PTR [eax], 45			; 0000002dH
	mov	ecx, DWORD PTR _dest$[ebp]
	add	ecx, 1
	mov	DWORD PTR _dest$[ebp], ecx
; Line 138
	mov	edx, DWORD PTR _prop$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [edx+12]
	and	ecx, 65535				; 0000ffffH
	mov	DWORD PTR _low$67819[ebp], eax
	mov	DWORD PTR _low$67819[ebp+4], ecx
; Line 139
	mov	edx, DWORD PTR _dest$[ebp]
	push	edx
	mov	eax, DWORD PTR _low$67819[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _low$67819[ebp]
	push	ecx
	call	?ConvertUInt64ToString@@YGX_KPAD@Z	; ConvertUInt64ToString
; Line 140
	jmp	SHORT $LN17@ConvertPro
$LN2@ConvertPro:
; Line 144
	mov	DWORD PTR _v$67822[ebp], 0
	mov	DWORD PTR _v$67822[ebp+4], 0
; Line 145
	lea	edx, DWORD PTR _v$67822[ebp]
	push	edx
	mov	eax, DWORD PTR _prop$[ebp]
	push	eax
	call	?ConvertPropVariantToUInt64@@YG_NABUtagPROPVARIANT@@AA_K@Z ; ConvertPropVariantToUInt64
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN11@ConvertPro
; Line 147
	mov	edx, DWORD PTR _dest$[ebp]
	mov	BYTE PTR [edx], 48			; 00000030H
; Line 148
	mov	eax, DWORD PTR _dest$[ebp]
	mov	BYTE PTR [eax+1], 120			; 00000078H
; Line 149
	mov	ecx, DWORD PTR _dest$[ebp]
	add	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _prop$[ebp]
	mov	eax, DWORD PTR [edx+8]
	xor	ecx, ecx
	push	ecx
	push	eax
	call	?ConvertUInt64ToHex@@YGX_KPAD@Z		; ConvertUInt64ToHex
; Line 150
	jmp	SHORT $LN17@ConvertPro
$LN11@ConvertPro:
; Line 156
	mov	edx, DWORD PTR _dest$[ebp]
	push	edx
	mov	eax, DWORD PTR _prop$[ebp]
	push	eax
	call	?ConvertPropVariantToShortString@@YGXABUtagPROPVARIANT@@PAD@Z ; ConvertPropVariantToShortString
$LN17@ConvertPro:
; Line 157
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN23@ConvertPro
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	1
$LN23@ConvertPro:
	DD	2
	DD	$LN22@ConvertPro
$LN22@ConvertPro:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN20@ConvertPro
	DD	-40					; ffffffd8H
	DD	8
	DD	$LN21@ConvertPro
$LN21@ConvertPro:
	DB	118					; 00000076H
	DB	0
$LN20@ConvertPro:
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	70					; 00000046H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	84					; 00000054H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN24@ConvertPro:
	DD	$LN8@ConvertPro
	DD	$LN10@ConvertPro
	DD	$LN2@ConvertPro
	DD	$LN6@ConvertPro
	DD	$LN4@ConvertPro
	DD	$LN11@ConvertPro
$LN19@ConvertPro:
	DB	0
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	1
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	2
	DB	5
	DB	5
	DB	5
	DB	5
	DB	3
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	4
?ConvertPropertyToShortString@@YGXPADABUtagPROPVARIANT@@K_N@Z ENDP ; ConvertPropertyToShortString
_TEXT	ENDS
PUBLIC	__TI1H
PUBLIC	__CTA1H
PUBLIC	__CT??_R0H@84
PUBLIC	??_R0H@8					; int `RTTI Type Descriptor'
EXTRN	__CxxThrowException@8:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_R0H@8
; File c:\workspace\7z1505-src\cpp\windows\propvariantconv.h
_DATA	SEGMENT
??_R0H@8 DD	FLAT:??_7type_info@@6B@			; int `RTTI Type Descriptor'
	DD	00H
	DB	'.H', 00H
_DATA	ENDS
;	COMDAT __CT??_R0H@84
xdata$x	SEGMENT
__CT??_R0H@84 DD 01H
	DD	FLAT:??_R0H@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	00H
xdata$x	ENDS
;	COMDAT __CTA1H
xdata$x	SEGMENT
__CTA1H	DD	01H
	DD	FLAT:__CT??_R0H@84
xdata$x	ENDS
;	COMDAT __TI1H
xdata$x	SEGMENT
__TI1H	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA1H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?ConvertPropVariantToUInt64@@YG_NABUtagPROPVARIANT@@AA_K@Z
_TEXT	SEGMENT
tv65 = -8						; size = 4
$T68186 = -4						; size = 4
_prop$ = 8						; size = 4
_value$ = 12						; size = 4
?ConvertPropVariantToUInt64@@YG_NABUtagPROPVARIANT@@AA_K@Z PROC ; ConvertPropVariantToUInt64, COMDAT
; Line 18
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 19
	mov	eax, DWORD PTR _prop$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR tv65[ebp], ecx
	cmp	DWORD PTR tv65[ebp], 21			; 00000015H
	ja	SHORT $LN1@ConvertPro@2
	mov	edx, DWORD PTR tv65[ebp]
	movzx	eax, BYTE PTR $LN11@ConvertPro@2[edx]
	jmp	DWORD PTR $LN12@ConvertPro@2[eax*4]
$LN6@ConvertPro@2:
; Line 21
	mov	ecx, DWORD PTR _value$[ebp]
	mov	edx, DWORD PTR _prop$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+4], edx
	mov	al, 1
	jmp	SHORT $LN10@ConvertPro@2
$LN5@ConvertPro@2:
; Line 22
	mov	eax, DWORD PTR _prop$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	xor	edx, edx
	mov	eax, DWORD PTR _value$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	al, 1
	jmp	SHORT $LN10@ConvertPro@2
$LN4@ConvertPro@2:
; Line 23
	mov	ecx, DWORD PTR _prop$[ebp]
	movzx	eax, WORD PTR [ecx+8]
	cdq
	mov	ecx, DWORD PTR _value$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
	mov	al, 1
	jmp	SHORT $LN10@ConvertPro@2
$LN3@ConvertPro@2:
; Line 24
	mov	edx, DWORD PTR _prop$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	cdq
	mov	ecx, DWORD PTR _value$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
	mov	al, 1
	jmp	SHORT $LN10@ConvertPro@2
$LN2@ConvertPro@2:
; Line 25
	xor	al, al
	jmp	SHORT $LN10@ConvertPro@2
$LN1@ConvertPro@2:
; Line 26
	mov	DWORD PTR $T68186[ebp], 151199		; 00024e9fH
	push	OFFSET __TI1H
	lea	edx, DWORD PTR $T68186[ebp]
	push	edx
	call	__CxxThrowException@8
$LN10@ConvertPro@2:
; Line 28
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN12@ConvertPro@2:
	DD	$LN2@ConvertPro@2
	DD	$LN3@ConvertPro@2
	DD	$LN4@ConvertPro@2
	DD	$LN5@ConvertPro@2
	DD	$LN6@ConvertPro@2
	DD	$LN1@ConvertPro@2
$LN11@ConvertPro@2:
	DB	0
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	1
	DB	2
	DB	3
	DB	5
	DB	4
?ConvertPropVariantToUInt64@@YG_NABUtagPROPVARIANT@@AA_K@Z ENDP ; ConvertPropVariantToUInt64
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?ConvertPropertyToString@@YGXAAVUString@@ABUtagPROPVARIANT@@K_N@Z ; ConvertPropertyToString
EXTRN	?SetFromAscii@UString@@QAEXPBD@Z:PROC		; UString::SetFromAscii
EXTRN	?SetFromBstr@UString@@QAEXPA_W@Z:PROC		; UString::SetFromBstr
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_temp$ = -72						; size = 64
__$ArrayPad$ = -4					; size = 4
_dest$ = 8						; size = 4
_prop$ = 12						; size = 4
_propID$ = 16						; size = 4
_full$ = 20						; size = 1
?ConvertPropertyToString@@YGXAAVUString@@ABUtagPROPVARIANT@@K_N@Z PROC ; ConvertPropertyToString
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\propidutils.cpp
; Line 160
	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	edi
	lea	edi, DWORD PTR [ebp-76]
	mov	ecx, 19					; 00000013H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 161
	mov	eax, DWORD PTR _prop$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 8
	jne	SHORT $LN1@ConvertPro@3
; Line 163
	mov	edx, DWORD PTR _prop$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	call	?SetFromBstr@UString@@QAEXPA_W@Z	; UString::SetFromBstr
; Line 164
	jmp	SHORT $LN2@ConvertPro@3
$LN1@ConvertPro@3:
; Line 167
	movzx	ecx, BYTE PTR _full$[ebp]
	push	ecx
	mov	edx, DWORD PTR _propID$[ebp]
	push	edx
	mov	eax, DWORD PTR _prop$[ebp]
	push	eax
	lea	ecx, DWORD PTR _temp$[ebp]
	push	ecx
	call	?ConvertPropertyToShortString@@YGXPADABUtagPROPVARIANT@@K_N@Z ; ConvertPropertyToShortString
; Line 168
	lea	edx, DWORD PTR _temp$[ebp]
	push	edx
	mov	ecx, DWORD PTR _dest$[ebp]
	call	?SetFromAscii@UString@@QAEXPBD@Z	; UString::SetFromAscii
$LN2@ConvertPro@3:
; Line 169
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@ConvertPro@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 76					; 0000004cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	2
$LN6@ConvertPro@3:
	DD	1
	DD	$LN5@ConvertPro@3
$LN5@ConvertPro@3:
	DD	-72					; ffffffb8H
	DD	64					; 00000040H
	DD	$LN4@ConvertPro@3
$LN4@ConvertPro@3:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
?ConvertPropertyToString@@YGXAAVUString@@ABUtagPROPVARIANT@@K_N@Z ENDP ; ConvertPropertyToString
_TEXT	ENDS
PUBLIC	??YAString@@QAEAAV0@D@Z				; AString::operator+=
PUBLIC	?Empty@AString@@QAEXXZ				; AString::Empty
PUBLIC	?ConvertNtSecureToString@@YGXPBEIAAVAString@@@Z	; ConvertNtSecureToString
EXTRN	??YAString@@QAEAAV0@PBD@Z:PROC			; AString::operator+=
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_data$ = 8						; size = 4
_size$ = 12						; size = 4
_s$ = 16						; size = 4
?ConvertNtSecureToString@@YGXPBEIAAVAString@@@Z PROC	; ConvertNtSecureToString
; Line 458
	push	ebp
	mov	ebp, esp
; Line 459
	mov	ecx, DWORD PTR _s$[ebp]
	call	?Empty@AString@@QAEXXZ			; AString::Empty
; Line 460
	cmp	DWORD PTR _size$[ebp], 20		; 00000014H
	jb	SHORT $LN2@ConvertNtS
	cmp	DWORD PTR _size$[ebp], 262144		; 00040000H
	jbe	SHORT $LN3@ConvertNtS
$LN2@ConvertNtS:
; Line 462
	push	OFFSET $SG68035
	mov	ecx, DWORD PTR _s$[ebp]
	call	??YAString@@QAEAAV0@PBD@Z		; AString::operator+=
; Line 463
	jmp	$LN4@ConvertNtS
$LN3@ConvertNtS:
; Line 465
	mov	eax, DWORD PTR _data$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 1
	je	SHORT $LN1@ConvertNtS
; Line 467
	push	OFFSET $SG68039
	mov	ecx, DWORD PTR _s$[ebp]
	call	??YAString@@QAEAAV0@PBD@Z		; AString::operator+=
; Line 468
	jmp	$LN4@ConvertNtS
$LN1@ConvertNtS:
; Line 470
	mov	edx, DWORD PTR _data$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	?ParseOwner@@YGXAAVAString@@PBEII@Z	; ParseOwner
; Line 471
	push	32					; 00000020H
	mov	ecx, DWORD PTR _s$[ebp]
	call	??YAString@@QAEAAV0@D@Z			; AString::operator+=
; Line 472
	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	?ParseOwner@@YGXAAVAString@@PBEII@Z	; ParseOwner
; Line 473
	push	12					; 0000000cH
	push	16					; 00000010H
	push	OFFSET $SG68044
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	?ParseAcl@@YGXAAVAString@@PBEIPBDII@Z	; ParseAcl
; Line 474
	push	16					; 00000010H
	push	4
	push	OFFSET $SG68045
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	?ParseAcl@@YGXAAVAString@@PBEIPBDII@Z	; ParseAcl
; Line 475
	push	32					; 00000020H
	mov	ecx, DWORD PTR _s$[ebp]
	call	??YAString@@QAEAAV0@D@Z			; AString::operator+=
; Line 476
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	?AddUInt32ToString@@YGXAAVAString@@I@Z	; AddUInt32ToString
$LN4@ConvertNtS:
; Line 479
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?ConvertNtSecureToString@@YGXPBEIAAVAString@@@Z ENDP	; ConvertNtSecureToString
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Empty@AString@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Empty@AString@@QAEXXZ PROC				; AString::Empty, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 236
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	BYTE PTR [edx], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Empty@AString@@QAEXXZ ENDP				; AString::Empty
_TEXT	ENDS
EXTRN	?Grow_1@AString@@AAEXXZ:PROC			; AString::Grow_1
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??YAString@@QAEAAV0@D@Z
_TEXT	SEGMENT
_chars$ = -12						; size = 4
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_c$ = 8							; size = 1
??YAString@@QAEAAV0@D@Z PROC				; AString::operator+=, COMDAT
; _this$ = ecx
; Line 281
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 282
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+4]
	jne	SHORT $LN1@operator
; Line 283
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Grow_1@AString@@AAEXXZ			; AString::Grow_1
$LN1@operator:
; Line 284
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _len$[ebp], ecx
; Line 285
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _chars$[ebp], eax
; Line 286
	mov	ecx, DWORD PTR _chars$[ebp]
	add	ecx, DWORD PTR _len$[ebp]
	mov	dl, BYTE PTR _c$[ebp]
	mov	BYTE PTR [ecx], dl
	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 1
	mov	DWORD PTR _len$[ebp], eax
; Line 287
	mov	ecx, DWORD PTR _chars$[ebp]
	add	ecx, DWORD PTR _len$[ebp]
	mov	BYTE PTR [ecx], 0
; Line 288
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 289
	mov	eax, DWORD PTR _this$[ebp]
; Line 290
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??YAString@@QAEAAV0@D@Z ENDP				; AString::operator+=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
_TEXT	SEGMENT
_sidSize$ = -8						; size = 4
_s$ = 8							; size = 4
_p$ = 12						; size = 4
_size$ = 16						; size = 4
_pos$ = 20						; size = 4
?ParseOwner@@YGXAAVAString@@PBEII@Z PROC		; ParseOwner
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\propidutils.cpp
; Line 372
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 373
	mov	eax, DWORD PTR _pos$[ebp]
	cmp	eax, DWORD PTR _size$[ebp]
	jbe	SHORT $LN1@ParseOwner
; Line 375
	push	OFFSET $SG67998
	mov	ecx, DWORD PTR _s$[ebp]
	call	??YAString@@QAEAAV0@PBD@Z		; AString::operator+=
; Line 376
	jmp	SHORT $LN2@ParseOwner
$LN1@ParseOwner:
; Line 378
	mov	DWORD PTR _sidSize$[ebp], 0
; Line 379
	lea	ecx, DWORD PTR _sidSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _size$[ebp]
	sub	edx, DWORD PTR _pos$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR _pos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	?ParseSid@@YGXAAVAString@@PBEIAAI@Z	; ParseSid
$LN2@ParseOwner:
; Line 380
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@ParseOwner
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	3
$LN6@ParseOwner:
	DD	1
	DD	$LN5@ParseOwner
$LN5@ParseOwner:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@ParseOwner
$LN4@ParseOwner:
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
?ParseOwner@@YGXAAVAString@@PBEII@Z ENDP		; ParseOwner
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$67985 = -80						; size = 4
_i$67981 = -76						; size = 4
_sz$ = -68						; size = 16
_j$67969 = -48						; size = 4
_sn$67968 = -44						; size = 4
_i$67964 = -40						; size = 4
_i$67958 = -36						; size = 4
_v4$67955 = -32						; size = 4
_i$67949 = -28						; size = 4
_v1$67946 = -24						; size = 4
_v0$67941 = -20						; size = 4
_authority$ = -16					; size = 4
_num$ = -12						; size = 4
_rev$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_s$ = 8							; size = 4
_p$ = 12						; size = 4
_lim$ = 16						; size = 4
_sidSize$ = 20						; size = 4
?ParseSid@@YGXAAVAString@@PBEIAAI@Z PROC		; ParseSid
; Line 284
	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-80]
	mov	ecx, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 285
	mov	eax, DWORD PTR _sidSize$[ebp]
	mov	DWORD PTR [eax], 0
; Line 286
	cmp	DWORD PTR _lim$[ebp], 8
	jae	SHORT $LN31@ParseSid
; Line 288
	push	OFFSET $SG67930
	mov	ecx, DWORD PTR _s$[ebp]
	call	??YAString@@QAEAAV0@PBD@Z		; AString::operator+=
; Line 289
	jmp	$LN32@ParseSid
$LN31@ParseSid:
; Line 291
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _rev$[ebp], edx
; Line 292
	cmp	DWORD PTR _rev$[ebp], 1
	je	SHORT $LN30@ParseSid
; Line 294
	push	OFFSET $SG67933
	mov	ecx, DWORD PTR _s$[ebp]
	call	??YAString@@QAEAAV0@PBD@Z		; AString::operator+=
; Line 295
	jmp	$LN32@ParseSid
$LN30@ParseSid:
; Line 297
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	mov	DWORD PTR _num$[ebp], ecx
; Line 298
	mov	edx, DWORD PTR _num$[ebp]
	lea	eax, DWORD PTR [edx*4+8]
	cmp	eax, DWORD PTR _lim$[ebp]
	jbe	SHORT $LN29@ParseSid
; Line 300
	push	OFFSET $SG67936
	mov	ecx, DWORD PTR _s$[ebp]
	call	??YAString@@QAEAAV0@PBD@Z		; AString::operator+=
; Line 301
	jmp	$LN32@ParseSid
$LN29@ParseSid:
; Line 303
	mov	ecx, DWORD PTR _num$[ebp]
	lea	edx, DWORD PTR [ecx*4+8]
	mov	eax, DWORD PTR _sidSize$[ebp]
	mov	DWORD PTR [eax], edx
; Line 304
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	bswap	edx
	mov	DWORD PTR _authority$[ebp], edx
; Line 306
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	test	ecx, ecx
	jne	$LN28@ParseSid
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+3]
	test	eax, eax
	jne	$LN28@ParseSid
	cmp	DWORD PTR _authority$[ebp], 5
	jne	$LN28@ParseSid
	cmp	DWORD PTR _num$[ebp], 1
	jb	$LN28@ParseSid
; Line 308
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _v0$67941[ebp], edx
; Line 309
	cmp	DWORD PTR _v0$67941[ebp], 22		; 00000016H
	jae	SHORT $LN27@ParseSid
; Line 311
	mov	eax, DWORD PTR _v0$67941[ebp]
	mov	ecx, DWORD PTR _sidNames[eax*4]
	push	ecx
	mov	ecx, DWORD PTR _s$[ebp]
	call	??YAString@@QAEAAV0@PBD@Z		; AString::operator+=
; Line 312
	jmp	$LN32@ParseSid
$LN27@ParseSid:
; Line 314
	cmp	DWORD PTR _v0$67941[ebp], 32		; 00000020H
	jne	SHORT $LN26@ParseSid
	cmp	DWORD PTR _num$[ebp], 2
	jne	SHORT $LN26@ParseSid
; Line 316
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _v1$67946[ebp], eax
; Line 317
	mov	DWORD PTR _i$67949[ebp], 0
	jmp	SHORT $LN25@ParseSid
$LN24@ParseSid:
	mov	ecx, DWORD PTR _i$67949[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$67949[ebp], ecx
$LN25@ParseSid:
	cmp	DWORD PTR _i$67949[ebp], 22		; 00000016H
	jae	SHORT $LN26@ParseSid
; Line 318
	mov	edx, DWORD PTR _i$67949[ebp]
	mov	eax, DWORD PTR _sid_32_Names[edx*8]
	cmp	eax, DWORD PTR _v1$67946[ebp]
	jne	SHORT $LN22@ParseSid
; Line 320
	mov	ecx, DWORD PTR _i$67949[ebp]
	mov	edx, DWORD PTR _sid_32_Names[ecx*8+4]
	push	edx
	mov	ecx, DWORD PTR _s$[ebp]
	call	??YAString@@QAEAAV0@PBD@Z		; AString::operator+=
; Line 321
	jmp	$LN32@ParseSid
$LN22@ParseSid:
; Line 323
	jmp	SHORT $LN24@ParseSid
$LN26@ParseSid:
; Line 324
	cmp	DWORD PTR _v0$67941[ebp], 21		; 00000015H
	jne	SHORT $LN21@ParseSid
	cmp	DWORD PTR _num$[ebp], 5
	jne	SHORT $LN21@ParseSid
; Line 326
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _v4$67955[ebp], ecx
; Line 327
	mov	DWORD PTR _i$67958[ebp], 0
	jmp	SHORT $LN20@ParseSid
$LN19@ParseSid:
	mov	edx, DWORD PTR _i$67958[ebp]
	add	edx, 1
	mov	DWORD PTR _i$67958[ebp], edx
$LN20@ParseSid:
	cmp	DWORD PTR _i$67958[ebp], 15		; 0000000fH
	jae	SHORT $LN21@ParseSid
; Line 328
	mov	eax, DWORD PTR _i$67958[ebp]
	mov	ecx, DWORD PTR _sid_21_Names[eax*8]
	cmp	ecx, DWORD PTR _v4$67955[ebp]
	jne	SHORT $LN17@ParseSid
; Line 330
	mov	edx, DWORD PTR _i$67958[ebp]
	mov	eax, DWORD PTR _sid_21_Names[edx*8+4]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	call	??YAString@@QAEAAV0@PBD@Z		; AString::operator+=
; Line 331
	jmp	$LN32@ParseSid
$LN17@ParseSid:
; Line 333
	jmp	SHORT $LN19@ParseSid
$LN21@ParseSid:
; Line 334
	cmp	DWORD PTR _v0$67941[ebp], 80		; 00000050H
	jne	SHORT $LN28@ParseSid
	cmp	DWORD PTR _num$[ebp], 6
	jne	SHORT $LN28@ParseSid
; Line 336
	mov	DWORD PTR _i$67964[ebp], 0
	jmp	SHORT $LN15@ParseSid
$LN14@ParseSid:
	mov	ecx, DWORD PTR _i$67964[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$67964[ebp], ecx
$LN15@ParseSid:
	cmp	DWORD PTR _i$67964[ebp], 1
	jae	SHORT $LN28@ParseSid
; Line 338
	mov	edx, DWORD PTR _i$67964[ebp]
	imul	edx, 24					; 00000018H
	add	edx, OFFSET _services_to_name
	mov	DWORD PTR _sn$67968[ebp], edx
; Line 340
	mov	DWORD PTR _j$67969[ebp], 0
	jmp	SHORT $LN12@ParseSid
$LN11@ParseSid:
	mov	eax, DWORD PTR _j$67969[ebp]
	add	eax, 1
	mov	DWORD PTR _j$67969[ebp], eax
$LN12@ParseSid:
	cmp	DWORD PTR _j$67969[ebp], 5
	jge	SHORT $LN10@ParseSid
	mov	ecx, DWORD PTR _j$67969[ebp]
	mov	edx, DWORD PTR _sn$67968[ebp]
	mov	eax, DWORD PTR _j$67969[ebp]
	mov	esi, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4]
	cmp	ecx, DWORD PTR [esi+eax*4+12]
	jne	SHORT $LN10@ParseSid
	jmp	SHORT $LN11@ParseSid
$LN10@ParseSid:
; Line 341
	cmp	DWORD PTR _j$67969[ebp], 5
	jne	SHORT $LN9@ParseSid
; Line 343
	mov	edx, DWORD PTR _sn$67968[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	call	??YAString@@QAEAAV0@PBD@Z		; AString::operator+=
; Line 344
	jmp	$LN32@ParseSid
$LN9@ParseSid:
; Line 346
	jmp	SHORT $LN14@ParseSid
$LN28@ParseSid:
; Line 351
	push	OFFSET $SG67977
	mov	ecx, DWORD PTR _s$[ebp]
	call	??YAString@@QAEAAV0@PBD@Z		; AString::operator+=
; Line 352
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+2]
	test	edx, edx
	jne	SHORT $LN8@ParseSid
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+3]
	test	ecx, ecx
	jne	SHORT $LN8@ParseSid
; Line 354
	lea	edx, DWORD PTR _sz$[ebp]
	push	edx
	mov	eax, DWORD PTR _authority$[ebp]
	push	eax
	call	?ConvertUInt32ToString@@YGXIPAD@Z	; ConvertUInt32ToString
; Line 355
	lea	ecx, DWORD PTR _sz$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _s$[ebp]
	call	??YAString@@QAEAAV0@PBD@Z		; AString::operator+=
; Line 357
	jmp	SHORT $LN7@ParseSid
$LN8@ParseSid:
; Line 359
	push	OFFSET $SG67980
	mov	ecx, DWORD PTR _s$[ebp]
	call	??YAString@@QAEAAV0@PBD@Z		; AString::operator+=
; Line 360
	mov	DWORD PTR _i$67981[ebp], 2
	jmp	SHORT $LN6@ParseSid
$LN5@ParseSid:
	mov	edx, DWORD PTR _i$67981[ebp]
	add	edx, 1
	mov	DWORD PTR _i$67981[ebp], edx
$LN6@ParseSid:
	cmp	DWORD PTR _i$67981[ebp], 8
	jge	SHORT $LN7@ParseSid
; Line 361
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR _i$67981[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	?AddHexToString@@YGXAAVAString@@I@Z	; AddHexToString
	jmp	SHORT $LN5@ParseSid
$LN7@ParseSid:
; Line 363
	mov	DWORD PTR _i$67985[ebp], 0
	jmp	SHORT $LN3@ParseSid
$LN2@ParseSid:
	mov	eax, DWORD PTR _i$67985[ebp]
	add	eax, 1
	mov	DWORD PTR _i$67985[ebp], eax
$LN3@ParseSid:
	mov	ecx, DWORD PTR _i$67985[ebp]
	cmp	ecx, DWORD PTR _num$[ebp]
	jae	SHORT $LN32@ParseSid
; Line 365
	push	45					; 0000002dH
	mov	ecx, DWORD PTR _s$[ebp]
	call	??YAString@@QAEAAV0@D@Z			; AString::operator+=
; Line 366
	lea	edx, DWORD PTR _sz$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$67985[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+8]
	push	edx
	call	?ConvertUInt32ToString@@YGXIPAD@Z	; ConvertUInt32ToString
; Line 367
	lea	eax, DWORD PTR _sz$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	call	??YAString@@QAEAAV0@PBD@Z		; AString::operator+=
; Line 368
	jmp	SHORT $LN2@ParseSid
$LN32@ParseSid:
; Line 369
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN36@ParseSid
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 80					; 00000050H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	2
$LN36@ParseSid:
	DD	1
	DD	$LN35@ParseSid
$LN35@ParseSid:
	DD	-68					; ffffffbcH
	DD	16					; 00000010H
	DD	$LN34@ParseSid
$LN34@ParseSid:
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	0
?ParseSid@@YGXAAVAString@@PBEIAAI@Z ENDP		; ParseSid
; Function compile flags: /Odtp /RTCsu
_res$ = 8						; size = 4
_v$ = 12						; size = 4
?AddHexToString@@YGXAAVAString@@I@Z PROC		; AddHexToString
; Line 179
	push	ebp
	mov	ebp, esp
; Line 180
	mov	eax, DWORD PTR _v$[ebp]
	shr	eax, 4
	push	eax
	call	?GetHex@@YGII@Z				; GetHex
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	call	??YAString@@QAEAAV0@D@Z			; AString::operator+=
; Line 181
	mov	ecx, DWORD PTR _v$[ebp]
	and	ecx, 15					; 0000000fH
	push	ecx
	call	?GetHex@@YGII@Z				; GetHex
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	call	??YAString@@QAEAAV0@D@Z			; AString::operator+=
; Line 182
	push	32					; 00000020H
	mov	ecx, DWORD PTR _res$[ebp]
	call	??YAString@@QAEAAV0@D@Z			; AString::operator+=
; Line 183
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?AddHexToString@@YGXAAVAString@@I@Z ENDP		; AddHexToString
; Function compile flags: /Odtp /RTCsu
tv68 = -4						; size = 4
_v$ = 8							; size = 4
?GetHex@@YGII@Z PROC					; GetHex
; Line 172
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 173
	cmp	DWORD PTR _v$[ebp], 10			; 0000000aH
	jae	SHORT $LN3@GetHex
	mov	eax, DWORD PTR _v$[ebp]
	add	eax, 48					; 00000030H
	mov	DWORD PTR tv68[ebp], eax
	jmp	SHORT $LN4@GetHex
$LN3@GetHex:
	mov	ecx, DWORD PTR _v$[ebp]
	add	ecx, 55					; 00000037H
	mov	DWORD PTR tv68[ebp], ecx
$LN4@GetHex:
	mov	eax, DWORD PTR tv68[ebp]
; Line 174
	mov	esp, ebp
	pop	ebp
	ret	4
?GetHex@@YGII@Z ENDP					; GetHex
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_sz$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_s$ = 8							; size = 4
_val$ = 12						; size = 4
?AddUInt32ToString@@YGXAAVAString@@I@Z PROC		; AddUInt32ToString
; Line 383
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 385
	lea	eax, DWORD PTR _sz$[ebp]
	push	eax
	mov	ecx, DWORD PTR _val$[ebp]
	push	ecx
	call	?ConvertUInt32ToString@@YGXIPAD@Z	; ConvertUInt32ToString
; Line 386
	lea	edx, DWORD PTR _sz$[ebp]
	push	edx
	mov	ecx, DWORD PTR _s$[ebp]
	call	??YAString@@QAEAAV0@PBD@Z		; AString::operator+=
; Line 387
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@AddUInt32T
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN5@AddUInt32T:
	DD	1
	DD	$LN4@AddUInt32T
$LN4@AddUInt32T:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN3@AddUInt32T
$LN3@AddUInt32T:
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	0
?AddUInt32ToString@@YGXAAVAString@@I@Z ENDP		; AddUInt32ToString
; Function compile flags: /Odtp /RTCsu
_num$ = -12						; size = 4
_pos$ = -8						; size = 4
_control$ = -4						; size = 4
_s$ = 8							; size = 4
_p$ = 12						; size = 4
_size$ = 16						; size = 4
_strName$ = 20						; size = 4
_flags$ = 24						; size = 4
_offset$ = 28						; size = 4
?ParseAcl@@YGXAAVAString@@PBEIPBDII@Z PROC		; ParseAcl
; Line 390
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 391
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	mov	DWORD PTR _control$[ebp], ecx
; Line 392
	mov	edx, DWORD PTR _flags$[ebp]
	and	edx, DWORD PTR _control$[ebp]
	jne	SHORT $LN4@ParseAcl
; Line 393
	jmp	SHORT $LN5@ParseAcl
$LN4@ParseAcl:
; Line 394
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR _offset$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pos$[ebp], ecx
; Line 395
	push	32					; 00000020H
	mov	ecx, DWORD PTR _s$[ebp]
	call	??YAString@@QAEAAV0@D@Z			; AString::operator+=
; Line 396
	mov	edx, DWORD PTR _strName$[ebp]
	push	edx
	mov	ecx, DWORD PTR _s$[ebp]
	call	??YAString@@QAEAAV0@PBD@Z		; AString::operator+=
; Line 397
	mov	eax, DWORD PTR _pos$[ebp]
	cmp	eax, DWORD PTR _size$[ebp]
	jb	SHORT $LN3@ParseAcl
; Line 398
	jmp	SHORT $LN5@ParseAcl
$LN3@ParseAcl:
; Line 399
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR _pos$[ebp]
	mov	DWORD PTR _p$[ebp], ecx
; Line 400
	mov	edx, DWORD PTR _size$[ebp]
	sub	edx, DWORD PTR _pos$[ebp]
	mov	DWORD PTR _size$[ebp], edx
; Line 401
	cmp	DWORD PTR _size$[ebp], 8
	jae	SHORT $LN2@ParseAcl
; Line 402
	jmp	SHORT $LN5@ParseAcl
$LN2@ParseAcl:
; Line 403
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 2
	je	SHORT $LN1@ParseAcl
; Line 404
	jmp	SHORT $LN5@ParseAcl
$LN1@ParseAcl:
; Line 405
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _num$[ebp], eax
; Line 406
	mov	ecx, DWORD PTR _num$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	?AddUInt32ToString@@YGXAAVAString@@I@Z	; AddUInt32ToString
$LN5@ParseAcl:
; Line 440
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?ParseAcl@@YGXAAVAString@@PBEIPBDII@Z ENDP		; ParseAcl
_TEXT	ENDS
PUBLIC	?CheckNtSecure@@YG_NPBEI@Z			; CheckNtSecure
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_data$ = 8						; size = 4
_size$ = 12						; size = 4
?CheckNtSecure@@YG_NPBEI@Z PROC				; CheckNtSecure
; Line 514
	push	ebp
	mov	ebp, esp
; Line 515
	cmp	DWORD PTR _size$[ebp], 20		; 00000014H
	jae	SHORT $LN7@CheckNtSec
; Line 516
	xor	al, al
	jmp	$LN8@CheckNtSec
$LN7@CheckNtSec:
; Line 517
	mov	eax, DWORD PTR _data$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 1
	je	SHORT $LN6@CheckNtSec
; Line 518
	mov	al, 1
	jmp	$LN8@CheckNtSec
$LN6@CheckNtSec:
; Line 519
	cmp	DWORD PTR _size$[ebp], 262144		; 00040000H
	jbe	SHORT $LN5@CheckNtSec
; Line 520
	xor	al, al
	jmp	SHORT $LN8@CheckNtSec
$LN5@CheckNtSec:
; Line 521
	mov	edx, DWORD PTR _data$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	call	?CheckSid@@YG_NPBEII@Z			; CheckSid
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN4@CheckNtSec
	xor	al, al
	jmp	SHORT $LN8@CheckNtSec
$LN4@CheckNtSec:
; Line 522
	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	call	?CheckSid@@YG_NPBEII@Z			; CheckSid
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN3@CheckNtSec
	xor	al, al
	jmp	SHORT $LN8@CheckNtSec
$LN3@CheckNtSec:
; Line 523
	push	12					; 0000000cH
	push	16					; 00000010H
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	call	?CheckAcl@@YG_NPBEIII@Z			; CheckAcl
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN2@CheckNtSec
	xor	al, al
	jmp	SHORT $LN8@CheckNtSec
$LN2@CheckNtSec:
; Line 524
	push	16					; 00000010H
	push	4
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	call	?CheckAcl@@YG_NPBEIII@Z			; CheckAcl
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN1@CheckNtSec
	xor	al, al
	jmp	SHORT $LN8@CheckNtSec
$LN1@CheckNtSec:
; Line 525
	mov	al, 1
$LN8@CheckNtSec:
; Line 526
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?CheckNtSecure@@YG_NPBEI@Z ENDP				; CheckNtSecure
; Function compile flags: /Odtp /RTCsu
_num$ = -8						; size = 4
_rev$ = -4						; size = 4
_data$ = 8						; size = 4
_size$ = 12						; size = 4
_pos$ = 16						; size = 4
?CheckSid@@YG_NPBEII@Z PROC				; CheckSid
; Line 484
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 485
	mov	eax, DWORD PTR _pos$[ebp]
	cmp	eax, DWORD PTR _size$[ebp]
	jb	SHORT $LN3@CheckSid
; Line 486
	xor	al, al
	jmp	SHORT $LN4@CheckSid
$LN3@CheckSid:
; Line 487
	mov	ecx, DWORD PTR _size$[ebp]
	sub	ecx, DWORD PTR _pos$[ebp]
	mov	DWORD PTR _size$[ebp], ecx
; Line 488
	cmp	DWORD PTR _size$[ebp], 8
	jae	SHORT $LN2@CheckSid
; Line 489
	xor	al, al
	jmp	SHORT $LN4@CheckSid
$LN2@CheckSid:
; Line 490
	mov	edx, DWORD PTR _data$[ebp]
	add	edx, DWORD PTR _pos$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	DWORD PTR _rev$[ebp], eax
; Line 491
	cmp	DWORD PTR _rev$[ebp], 1
	je	SHORT $LN1@CheckSid
; Line 492
	xor	al, al
	jmp	SHORT $LN4@CheckSid
$LN1@CheckSid:
; Line 493
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, DWORD PTR _pos$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	mov	DWORD PTR _num$[ebp], edx
; Line 494
	mov	eax, DWORD PTR _num$[ebp]
	lea	ecx, DWORD PTR [eax*4+8]
	cmp	DWORD PTR _size$[ebp], ecx
	sbb	eax, eax
	add	eax, 1
$LN4@CheckSid:
; Line 495
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?CheckSid@@YG_NPBEII@Z ENDP				; CheckSid
; Function compile flags: /Odtp /RTCsu
_aclSize$ = -12					; size = 4
_pos$ = -8						; size = 4
_control$ = -4						; size = 4
_p$ = 8							; size = 4
_size$ = 12						; size = 4
_flags$ = 16						; size = 4
_offset$ = 20						; size = 4
?CheckAcl@@YG_NPBEIII@Z PROC				; CheckAcl
; Line 498
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 499
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	mov	DWORD PTR _control$[ebp], ecx
; Line 500
	mov	edx, DWORD PTR _flags$[ebp]
	and	edx, DWORD PTR _control$[ebp]
	jne	SHORT $LN3@CheckAcl
; Line 501
	mov	al, 1
	jmp	SHORT $LN4@CheckAcl
$LN3@CheckAcl:
; Line 502
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR _offset$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pos$[ebp], ecx
; Line 503
	mov	edx, DWORD PTR _pos$[ebp]
	cmp	edx, DWORD PTR _size$[ebp]
	jb	SHORT $LN2@CheckAcl
; Line 504
	xor	al, al
	jmp	SHORT $LN4@CheckAcl
$LN2@CheckAcl:
; Line 505
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR _pos$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 506
	mov	ecx, DWORD PTR _size$[ebp]
	sub	ecx, DWORD PTR _pos$[ebp]
	mov	DWORD PTR _size$[ebp], ecx
; Line 507
	cmp	DWORD PTR _size$[ebp], 8
	jae	SHORT $LN1@CheckAcl
; Line 508
	xor	al, al
	jmp	SHORT $LN4@CheckAcl
$LN1@CheckAcl:
; Line 509
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, WORD PTR [edx+2]
	mov	DWORD PTR _aclSize$[ebp], eax
; Line 510
	mov	ecx, DWORD PTR _aclSize$[ebp]
	cmp	DWORD PTR _size$[ebp], ecx
	sbb	eax, eax
	add	eax, 1
$LN4@CheckAcl:
; Line 511
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?CheckAcl@@YG_NPBEIII@Z ENDP				; CheckAcl
_TEXT	ENDS
PUBLIC	??YUString@@QAEAAV0@_W@Z			; UString::operator+=
PUBLIC	??1CReparseAttr@NFile@NWindows@@QAE@XZ		; NWindows::NFile::CReparseAttr::~CReparseAttr
PUBLIC	??1UString@@QAE@XZ				; UString::~UString
PUBLIC	?IsSymLink@CReparseAttr@NFile@NWindows@@QBE_NXZ	; NWindows::NFile::CReparseAttr::IsSymLink
PUBLIC	??0CReparseAttr@NFile@NWindows@@QAE@XZ		; NWindows::NFile::CReparseAttr::CReparseAttr
PUBLIC	?Empty@UString@@QAEXXZ				; UString::Empty
PUBLIC	__$ArrayPad$
PUBLIC	?ConvertNtReparseToString@@YG_NPBEIAAVUString@@@Z ; ConvertNtReparseToString
EXTRN	?Add_Space@UString@@QAEXXZ:PROC			; UString::Add_Space
EXTRN	?IsOkNamePair@CReparseAttr@NFile@NWindows@@QBE_NXZ:PROC ; NWindows::NFile::CReparseAttr::IsOkNamePair
EXTRN	??YUString@@QAEAAV0@ABV0@@Z:PROC		; UString::operator+=
EXTRN	?GetPath@CReparseAttr@NFile@NWindows@@QBE?AVUString@@XZ:PROC ; NWindows::NFile::CReparseAttr::GetPath
EXTRN	?AddAscii@UString@@QAEXPBD@Z:PROC		; UString::AddAscii
EXTRN	?Parse@CReparseAttr@NFile@NWindows@@QAE_NPBEI@Z:PROC ; NWindows::NFile::CReparseAttr::Parse
EXTRN	___CxxFrameHandler3:PROC
xdata$x	SEGMENT
__unwindtable$?ConvertNtReparseToString@@YG_NPBEIAAVUString@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ConvertNtReparseToString@@YG_NPBEIAAVUString@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?ConvertNtReparseToString@@YG_NPBEIAAVUString@@@Z$1
__ehfuncinfo$?ConvertNtReparseToString@@YG_NPBEIAAVUString@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?ConvertNtReparseToString@@YG_NPBEIAAVUString@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv160 = -124						; size = 4
tv66 = -120						; size = 4
$T68232 = -113						; size = 1
$T68231 = -112						; size = 1
$T68230 = -111						; size = 1
$T68229 = -110						; size = 1
$T68228 = -109						; size = 1
$T68227 = -108						; size = 12
_b$68123 = -96						; size = 4
_i$68119 = -92						; size = 4
_hex$ = -84						; size = 16
_len$ = -64						; size = 4
_tag$ = -60						; size = 4
_attr$ = -52						; size = 32
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_data$ = 8						; size = 4
_size$ = 12						; size = 4
_s$ = 16						; size = 4
?ConvertNtReparseToString@@YG_NPBEIAAVUString@@@Z PROC	; ConvertNtReparseToString
; Line 531
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ConvertNtReparseToString@@YG_NPBEIAAVUString@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 112				; 00000070H
	push	edi
	lea	edi, DWORD PTR [ebp-124]
	mov	ecx, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 532
	mov	ecx, DWORD PTR _s$[ebp]
	call	?Empty@UString@@QAEXXZ			; UString::Empty
; Line 533
	lea	ecx, DWORD PTR _attr$[ebp]
	call	??0CReparseAttr@NFile@NWindows@@QAE@XZ	; NWindows::NFile::CReparseAttr::CReparseAttr
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 534
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _attr$[ebp]
	call	?Parse@CReparseAttr@NFile@NWindows@@QAE_NPBEI@Z ; NWindows::NFile::CReparseAttr::Parse
	movzx	edx, al
	test	edx, edx
	je	$LN9@ConvertNtR
; Line 536
	lea	ecx, DWORD PTR _attr$[ebp]
	call	?IsSymLink@CReparseAttr@NFile@NWindows@@QBE_NXZ ; NWindows::NFile::CReparseAttr::IsSymLink
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN8@ConvertNtR
; Line 537
	push	OFFSET $SG68099
	mov	ecx, DWORD PTR _s$[ebp]
	call	?AddAscii@UString@@QAEXPBD@Z		; UString::AddAscii
$LN8@ConvertNtR:
; Line 538
	lea	ecx, DWORD PTR $T68227[ebp]
	push	ecx
	lea	ecx, DWORD PTR _attr$[ebp]
	call	?GetPath@CReparseAttr@NFile@NWindows@@QBE?AVUString@@XZ ; NWindows::NFile::CReparseAttr::GetPath
	mov	DWORD PTR tv66[ebp], eax
	mov	edx, DWORD PTR tv66[ebp]
	mov	DWORD PTR tv160[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR tv160[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	call	??YUString@@QAEAAV0@ABV0@@Z		; UString::operator+=
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T68227[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
; Line 539
	lea	ecx, DWORD PTR _attr$[ebp]
	call	?IsOkNamePair@CReparseAttr@NFile@NWindows@@QBE_NXZ ; NWindows::NFile::CReparseAttr::IsOkNamePair
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN7@ConvertNtR
; Line 541
	push	OFFSET $SG68102
	mov	ecx, DWORD PTR _s$[ebp]
	call	?AddAscii@UString@@QAEXPBD@Z		; UString::AddAscii
; Line 542
	lea	edx, DWORD PTR _attr$[ebp+20]
	push	edx
	mov	ecx, DWORD PTR _s$[ebp]
	call	??YUString@@QAEAAV0@ABV0@@Z		; UString::operator+=
$LN7@ConvertNtR:
; Line 544
	mov	BYTE PTR $T68228[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _attr$[ebp]
	call	??1CReparseAttr@NFile@NWindows@@QAE@XZ
	mov	al, BYTE PTR $T68228[ebp]
	jmp	$LN10@ConvertNtR
$LN9@ConvertNtR:
; Line 547
	cmp	DWORD PTR _size$[ebp], 8
	jae	SHORT $LN6@ConvertNtR
; Line 548
	mov	BYTE PTR $T68229[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _attr$[ebp]
	call	??1CReparseAttr@NFile@NWindows@@QAE@XZ
	mov	al, BYTE PTR $T68229[ebp]
	jmp	$LN10@ConvertNtR
$LN6@ConvertNtR:
; Line 549
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _tag$[ebp], ecx
; Line 550
	mov	edx, DWORD PTR _data$[ebp]
	movzx	eax, WORD PTR [edx+4]
	mov	DWORD PTR _len$[ebp], eax
; Line 551
	mov	ecx, DWORD PTR _len$[ebp]
	add	ecx, 8
	cmp	ecx, DWORD PTR _size$[ebp]
	jbe	SHORT $LN5@ConvertNtR
; Line 552
	mov	BYTE PTR $T68230[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _attr$[ebp]
	call	??1CReparseAttr@NFile@NWindows@@QAE@XZ
	mov	al, BYTE PTR $T68230[ebp]
	jmp	$LN10@ConvertNtR
$LN5@ConvertNtR:
; Line 553
	mov	edx, DWORD PTR _data$[ebp]
	movzx	eax, WORD PTR [edx+6]
	test	eax, eax
	je	SHORT $LN4@ConvertNtR
; Line 554
	mov	BYTE PTR $T68231[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _attr$[ebp]
	call	??1CReparseAttr@NFile@NWindows@@QAE@XZ
	mov	al, BYTE PTR $T68231[ebp]
	jmp	$LN10@ConvertNtR
$LN4@ConvertNtR:
; Line 557
	lea	ecx, DWORD PTR _hex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tag$[ebp]
	push	edx
	call	?ConvertUInt32ToHex8Digits@@YGXIPAD@Z	; ConvertUInt32ToHex8Digits
; Line 558
	lea	eax, DWORD PTR _hex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	call	?AddAscii@UString@@QAEXPBD@Z		; UString::AddAscii
; Line 559
	mov	ecx, DWORD PTR _s$[ebp]
	call	?Add_Space@UString@@QAEXXZ		; UString::Add_Space
; Line 561
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, 8
	mov	DWORD PTR _data$[ebp], ecx
; Line 563
	mov	DWORD PTR _i$68119[ebp], 0
	jmp	SHORT $LN3@ConvertNtR
$LN2@ConvertNtR:
	mov	edx, DWORD PTR _i$68119[ebp]
	add	edx, 1
	mov	DWORD PTR _i$68119[ebp], edx
$LN3@ConvertNtR:
	mov	eax, DWORD PTR _i$68119[ebp]
	cmp	eax, DWORD PTR _len$[ebp]
	jae	SHORT $LN1@ConvertNtR
; Line 565
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, DWORD PTR _i$68119[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _b$68123[ebp], edx
; Line 566
	mov	eax, DWORD PTR _b$68123[ebp]
	shr	eax, 4
	and	eax, 15					; 0000000fH
	push	eax
	call	?GetHex@@YGII@Z				; GetHex
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	call	??YUString@@QAEAAV0@_W@Z		; UString::operator+=
; Line 567
	mov	ecx, DWORD PTR _b$68123[ebp]
	and	ecx, 15					; 0000000fH
	push	ecx
	call	?GetHex@@YGII@Z				; GetHex
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	call	??YUString@@QAEAAV0@_W@Z		; UString::operator+=
; Line 568
	jmp	SHORT $LN2@ConvertNtR
$LN1@ConvertNtR:
; Line 569
	mov	BYTE PTR $T68232[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _attr$[ebp]
	call	??1CReparseAttr@NFile@NWindows@@QAE@XZ
	mov	al, BYTE PTR $T68232[ebp]
$LN10@ConvertNtR:
; Line 570
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@ConvertNtR
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 124				; 0000007cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	3
$LN18@ConvertNtR:
	DD	2
	DD	$LN17@ConvertNtR
$LN17@ConvertNtR:
	DD	-52					; ffffffccH
	DD	32					; 00000020H
	DD	$LN14@ConvertNtR
	DD	-84					; ffffffacH
	DD	16					; 00000010H
	DD	$LN15@ConvertNtR
$LN15@ConvertNtR:
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	0
$LN14@ConvertNtR:
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ConvertNtReparseToString@@YG_NPBEIAAVUString@@@Z$0:
	lea	ecx, DWORD PTR _attr$[ebp]
	jmp	??1CReparseAttr@NFile@NWindows@@QAE@XZ
__unwindfunclet$?ConvertNtReparseToString@@YG_NPBEIAAVUString@@@Z$1:
	lea	ecx, DWORD PTR $T68227[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$?ConvertNtReparseToString@@YG_NPBEIAAVUString@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-120]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ConvertNtReparseToString@@YG_NPBEIAAVUString@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ConvertNtReparseToString@@YG_NPBEIAAVUString@@@Z ENDP	; ConvertNtReparseToString
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1UString@@QAE@XZ
_TEXT	SEGMENT
$T68247 = -8						; size = 4
_this$ = -4						; size = 4
??1UString@@QAE@XZ PROC					; UString::~UString, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 470
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T68247[ebp], ecx
	mov	edx, DWORD PTR $T68247[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1UString@@QAE@XZ ENDP					; UString::~UString
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Empty@UString@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Empty@UString@@QAEXXZ PROC				; UString::Empty, COMDAT
; _this$ = ecx
; Line 474
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	xor	eax, eax
	mov	WORD PTR [edx], ax
	mov	esp, ebp
	pop	ebp
	ret	0
?Empty@UString@@QAEXXZ ENDP				; UString::Empty
_TEXT	ENDS
EXTRN	?Grow_1@UString@@AAEXXZ:PROC			; UString::Grow_1
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??YUString@@QAEAAV0@_W@Z
_TEXT	SEGMENT
_chars$ = -12						; size = 4
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_c$ = 8							; size = 2
??YUString@@QAEAAV0@_W@Z PROC				; UString::operator+=, COMDAT
; _this$ = ecx
; Line 515
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 516
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+4]
	jne	SHORT $LN1@operator@2
; Line 517
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Grow_1@UString@@AAEXXZ			; UString::Grow_1
$LN1@operator@2:
; Line 518
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _len$[ebp], ecx
; Line 519
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _chars$[ebp], eax
; Line 520
	mov	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _chars$[ebp]
	mov	ax, WORD PTR _c$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
	mov	ecx, DWORD PTR _len$[ebp]
	add	ecx, 1
	mov	DWORD PTR _len$[ebp], ecx
; Line 521
	xor	edx, edx
	mov	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _chars$[ebp]
	mov	WORD PTR [ecx+eax*2], dx
; Line 522
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 523
	mov	eax, DWORD PTR _this$[ebp]
; Line 524
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??YUString@@QAEAAV0@_W@Z ENDP				; UString::operator+=
_TEXT	ENDS
EXTRN	??0UString@@QAE@XZ:PROC				; UString::UString
;	COMDAT xdata$x
; File c:\workspace\7z1505-src\cpp\windows\fileio.h
xdata$x	SEGMENT
__unwindtable$??0CReparseAttr@NFile@NWindows@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CReparseAttr@NFile@NWindows@@QAE@XZ$0
__ehfuncinfo$??0CReparseAttr@NFile@NWindows@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CReparseAttr@NFile@NWindows@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CReparseAttr@NFile@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CReparseAttr@NFile@NWindows@@QAE@XZ PROC		; NWindows::NFile::CReparseAttr::CReparseAttr, COMDAT
; _this$ = ecx
; Line 45
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CReparseAttr@NFile@NWindows@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CReparseAttr@NFile@NWindows@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$??0CReparseAttr@NFile@NWindows@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CReparseAttr@NFile@NWindows@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CReparseAttr@NFile@NWindows@@QAE@XZ ENDP		; NWindows::NFile::CReparseAttr::CReparseAttr
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsSymLink@CReparseAttr@NFile@NWindows@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsSymLink@CReparseAttr@NFile@NWindows@@QBE_NXZ PROC	; NWindows::NFile::CReparseAttr::IsSymLink, COMDAT
; _this$ = ecx
; Line 49
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], -1610612724		; a000000cH
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSymLink@CReparseAttr@NFile@NWindows@@QBE_NXZ ENDP	; NWindows::NFile::CReparseAttr::IsSymLink
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CReparseAttr@NFile@NWindows@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CReparseAttr@NFile@NWindows@@QAE@XZ$0
__ehfuncinfo$??1CReparseAttr@NFile@NWindows@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CReparseAttr@NFile@NWindows@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CReparseAttr@NFile@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CReparseAttr@NFile@NWindows@@QAE@XZ PROC		; NWindows::NFile::CReparseAttr::~CReparseAttr, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CReparseAttr@NFile@NWindows@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CReparseAttr@NFile@NWindows@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$??1CReparseAttr@NFile@NWindows@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CReparseAttr@NFile@NWindows@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CReparseAttr@NFile@NWindows@@QAE@XZ ENDP		; NWindows::NFile::CReparseAttr::~CReparseAttr
END
