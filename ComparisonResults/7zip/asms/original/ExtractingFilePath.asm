; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\CPP\7zip\UI\Common\ExtractingFilePath.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG67658 DB	':$DATA', 00H
	ORG $+1
$SG67669 DB	'CON', 00H
$SG67670 DB	'PRN', 00H
$SG67671 DB	'AUX', 00H
$SG67672 DB	'NUL', 00H
$SG67673 DB	'COM', 00H
$SG67674 DB	'LPT', 00H
_g_ReservedNames DD FLAT:$SG67669
	DD	FLAT:$SG67670
	DD	FLAT:$SG67671
	DD	FLAT:$SG67672
	DD	FLAT:$SG67673
	DD	FLAT:$SG67674
$SG67725 DB	'?', 00H, 00H, 00H
CONST	ENDS
PUBLIC	?IsEmpty@UString@@QBE_NXZ			; UString::IsEmpty
PUBLIC	?ReplaceOneCharAtPos@UString@@QAEXI_W@Z		; UString::ReplaceOneCharAtPos
PUBLIC	??BUString@@QBEPB_WXZ				; UString::operator wchar_t const *
PUBLIC	?RightPtr@UString@@QBEPB_WI@Z			; UString::RightPtr
PUBLIC	?Len@UString@@QBEIXZ				; UString::Len
PUBLIC	?Correct_AltStream_Name@@YGXAAVUString@@@Z	; Correct_AltStream_Name
EXTRN	??4UString@@QAEAAV0@_W@Z:PROC			; UString::operator=
EXTRN	?StringsAreEqualNoCase_Ascii@@YG_NPB_WPBD@Z:PROC ; StringsAreEqualNoCase_Ascii
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\extractingfilepath.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_c$67663 = -16						; size = 2
_i$67659 = -12						; size = 4
_kPostfixSize$ = -8					; size = 4
_len$ = -4						; size = 4
_s$ = 8							; size = 4
?Correct_AltStream_Name@@YGXAAVUString@@@Z PROC		; Correct_AltStream_Name
; Line 47
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 48
	mov	ecx, DWORD PTR _s$[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	mov	DWORD PTR _len$[ebp], eax
; Line 49
	mov	DWORD PTR _kPostfixSize$[ebp], 6
; Line 51
	mov	ecx, DWORD PTR _s$[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	cmp	eax, 6
	jb	SHORT $LN7@Correct_Al
	push	OFFSET $SG67658
	push	6
	mov	ecx, DWORD PTR _s$[ebp]
	call	?RightPtr@UString@@QBEPB_WI@Z		; UString::RightPtr
	push	eax
	call	?StringsAreEqualNoCase_Ascii@@YG_NPB_WPBD@Z ; StringsAreEqualNoCase_Ascii
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@Correct_Al
; Line 52
	mov	ecx, DWORD PTR _len$[ebp]
	sub	ecx, 6
	mov	DWORD PTR _len$[ebp], ecx
$LN7@Correct_Al:
; Line 53
	mov	DWORD PTR _i$67659[ebp], 0
	jmp	SHORT $LN6@Correct_Al
$LN5@Correct_Al:
	mov	edx, DWORD PTR _i$67659[ebp]
	add	edx, 1
	mov	DWORD PTR _i$67659[ebp], edx
$LN6@Correct_Al:
	mov	eax, DWORD PTR _i$67659[ebp]
	cmp	eax, DWORD PTR _len$[ebp]
	jae	SHORT $LN4@Correct_Al
; Line 55
	mov	ecx, DWORD PTR _s$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	ecx, DWORD PTR _i$67659[ebp]
	mov	dx, WORD PTR [eax+ecx*2]
	mov	WORD PTR _c$67663[ebp], dx
; Line 56
	movzx	eax, WORD PTR _c$67663[ebp]
	cmp	eax, 58					; 0000003aH
	je	SHORT $LN2@Correct_Al
	movzx	ecx, WORD PTR _c$67663[ebp]
	cmp	ecx, 92					; 0000005cH
	je	SHORT $LN2@Correct_Al
	movzx	edx, WORD PTR _c$67663[ebp]
	cmp	edx, 47					; 0000002fH
	jne	SHORT $LN3@Correct_Al
$LN2@Correct_Al:
; Line 57
	push	95					; 0000005fH
	mov	eax, DWORD PTR _i$67659[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	call	?ReplaceOneCharAtPos@UString@@QAEXI_W@Z	; UString::ReplaceOneCharAtPos
$LN3@Correct_Al:
; Line 58
	jmp	SHORT $LN5@Correct_Al
$LN4@Correct_Al:
; Line 59
	mov	ecx, DWORD PTR _s$[ebp]
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN8@Correct_Al
; Line 60
	push	95					; 0000005fH
	mov	ecx, DWORD PTR _s$[ebp]
	call	??4UString@@QAEAAV0@_W@Z		; UString::operator=
$LN8@Correct_Al:
; Line 61
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Correct_AltStream_Name@@YGXAAVUString@@@Z ENDP		; Correct_AltStream_Name
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Len@UString@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Len@UString@@QBEIXZ PROC				; UString::Len, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 472
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Len@UString@@QBEIXZ ENDP				; UString::Len
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsEmpty@UString@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@UString@@QBE_NXZ PROC				; UString::IsEmpty, COMDAT
; _this$ = ecx
; Line 473
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+4], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@UString@@QBE_NXZ ENDP				; UString::IsEmpty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??BUString@@QBEPB_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BUString@@QBEPB_WXZ PROC				; UString::operator wchar_t const *, COMDAT
; _this$ = ecx
; Line 476
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??BUString@@QBEPB_WXZ ENDP				; UString::operator wchar_t const *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?RightPtr@UString@@QBEPB_WI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_num$ = 8						; size = 4
?RightPtr@UString@@QBEPB_WI@Z PROC			; UString::RightPtr, COMDAT
; _this$ = ecx
; Line 479
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	eax, DWORD PTR [eax+ecx*2]
	mov	ecx, DWORD PTR _num$[ebp]
	shl	ecx, 1
	sub	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?RightPtr@UString@@QBEPB_WI@Z ENDP			; UString::RightPtr
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReplaceOneCharAtPos@UString@@QAEXI_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pos$ = 8						; size = 4
_c$ = 12						; size = 2
?ReplaceOneCharAtPos@UString@@QAEXI_W@Z PROC		; UString::ReplaceOneCharAtPos, COMDAT
; _this$ = ecx
; Line 482
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pos$[ebp]
	mov	ax, WORD PTR _c$[ebp]
	mov	WORD PTR [ecx+edx*2], ax
	mov	esp, ebp
	pop	ebp
	ret	8
?ReplaceOneCharAtPos@UString@@QAEXI_W@Z ENDP		; UString::ReplaceOneCharAtPos
_TEXT	ENDS
PUBLIC	??1UString@@QAE@XZ				; UString::~UString
PUBLIC	?Get_Correct_FsFile_Name@@YG?AVUString@@ABV1@@Z	; Get_Correct_FsFile_Name
EXTRN	??0UString@@QAE@ABV0@@Z:PROC			; UString::UString
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
xdata$x	SEGMENT
__unwindtable$?Get_Correct_FsFile_Name@@YG?AVUString@@ABV1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Get_Correct_FsFile_Name@@YG?AVUString@@ABV1@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?Get_Correct_FsFile_Name@@YG?AVUString@@ABV1@@Z$0
__ehfuncinfo$?Get_Correct_FsFile_Name@@YG?AVUString@@ABV1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Get_Correct_FsFile_Name@@YG?AVUString@@ABV1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T67951 = -36						; size = 4
_res$ = -28						; size = 12
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_name$ = 12						; size = 4
?Get_Correct_FsFile_Name@@YG?AVUString@@ABV1@@Z PROC	; Get_Correct_FsFile_Name
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\extractingfilepath.cpp
; Line 123
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Get_Correct_FsFile_Name@@YG?AVUString@@ABV1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T67951[ebp], 0
; Line 124
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	lea	ecx, DWORD PTR _res$[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 125
	lea	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	?Correct_PathPart@@YGXAAVUString@@@Z	; Correct_PathPart
; Line 128
	lea	edx, DWORD PTR _res$[ebp]
	push	edx
	call	?CorrectUnsupportedName@@YGXAAVUString@@@Z ; CorrectUnsupportedName
; Line 131
	lea	ecx, DWORD PTR _res$[ebp]
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@Get_Correc
; Line 132
	push	95					; 0000005fH
	lea	ecx, DWORD PTR _res$[ebp]
	call	??4UString@@QAEAAV0@_W@Z		; UString::operator=
$LN1@Get_Correc:
; Line 133
	lea	ecx, DWORD PTR _res$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	edx, DWORD PTR $T67951[ebp]
	or	edx, 1
	mov	DWORD PTR $T67951[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _res$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 134
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@Get_Correc
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN10@Get_Correc:
	DD	1
	DD	$LN9@Get_Correc
$LN9@Get_Correc:
	DD	-28					; ffffffe4H
	DD	12					; 0000000cH
	DD	$LN7@Get_Correc
$LN7@Get_Correc:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Get_Correct_FsFile_Name@@YG?AVUString@@ABV1@@Z$0:
	lea	ecx, DWORD PTR _res$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?Get_Correct_FsFile_Name@@YG?AVUString@@ABV1@@Z$1:
	mov	eax, DWORD PTR $T67951[ebp]
	and	eax, 1
	je	$LN6@Get_Correc
	and	DWORD PTR $T67951[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
$LN6@Get_Correc:
	ret	0
__ehhandler$?Get_Correct_FsFile_Name@@YG?AVUString@@ABV1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Get_Correct_FsFile_Name@@YG?AVUString@@ABV1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Get_Correct_FsFile_Name@@YG?AVUString@@ABV1@@Z ENDP	; Get_Correct_FsFile_Name
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1UString@@QAE@XZ
_TEXT	SEGMENT
$T67967 = -8						; size = 4
_this$ = -4						; size = 4
??1UString@@QAE@XZ PROC					; UString::~UString, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 470
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T67967[ebp], ecx
	mov	edx, DWORD PTR $T67967[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1UString@@QAE@XZ ENDP					; UString::~UString
_TEXT	ENDS
EXTRN	?InsertAtFront@UString@@QAEX_W@Z:PROC		; UString::InsertAtFront
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_name$ = 8						; size = 4
?CorrectUnsupportedName@@YGXAAVUString@@@Z PROC		; CorrectUnsupportedName
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\extractingfilepath.cpp
; Line 101
	push	ebp
	mov	ebp, esp
; Line 102
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	?IsSupportedName@@YG_NABVUString@@@Z	; IsSupportedName
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN2@CorrectUns
; Line 103
	push	95					; 0000005fH
	mov	ecx, DWORD PTR _name$[ebp]
	call	?InsertAtFront@UString@@QAEX_W@Z	; UString::InsertAtFront
$LN2@CorrectUns:
; Line 104
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
?CorrectUnsupportedName@@YGXAAVUString@@@Z ENDP		; CorrectUnsupportedName
_TEXT	ENDS
PUBLIC	?MyStringLen@@YGIPBD@Z				; MyStringLen
EXTRN	?IsPrefixedBy_Ascii_NoCase@UString@@QBE_NPBD@Z:PROC ; UString::IsPrefixedBy_Ascii_NoCase
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_c$67693 = -20						; size = 2
_c$67687 = -16						; size = 2
_len$67683 = -12					; size = 4
_reservedName$67682 = -8				; size = 4
_i$67678 = -4						; size = 4
_name$ = 8						; size = 4
?IsSupportedName@@YG_NABVUString@@@Z PROC		; IsSupportedName
; Line 72
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 73
	mov	DWORD PTR _i$67678[ebp], 0
	jmp	SHORT $LN13@IsSupporte
$LN12@IsSupporte:
	mov	eax, DWORD PTR _i$67678[ebp]
	add	eax, 1
	mov	DWORD PTR _i$67678[ebp], eax
$LN13@IsSupporte:
	cmp	DWORD PTR _i$67678[ebp], 6
	jae	$LN11@IsSupporte
; Line 75
	mov	ecx, DWORD PTR _i$67678[ebp]
	mov	edx, DWORD PTR _g_ReservedNames[ecx*4]
	mov	DWORD PTR _reservedName$67682[ebp], edx
; Line 76
	mov	eax, DWORD PTR _reservedName$67682[ebp]
	push	eax
	call	?MyStringLen@@YGIPBD@Z			; MyStringLen
	mov	DWORD PTR _len$67683[ebp], eax
; Line 77
	mov	ecx, DWORD PTR _name$[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	cmp	eax, DWORD PTR _len$67683[ebp]
	jae	SHORT $LN10@IsSupporte
; Line 78
	jmp	SHORT $LN12@IsSupporte
$LN10@IsSupporte:
; Line 79
	mov	ecx, DWORD PTR _reservedName$67682[ebp]
	push	ecx
	mov	ecx, DWORD PTR _name$[ebp]
	call	?IsPrefixedBy_Ascii_NoCase@UString@@QBE_NPBD@Z ; UString::IsPrefixedBy_Ascii_NoCase
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN9@IsSupporte
; Line 80
	jmp	SHORT $LN12@IsSupporte
$LN9@IsSupporte:
; Line 81
	cmp	DWORD PTR _i$67678[ebp], 4
	jb	SHORT $LN5@IsSupporte
; Line 83
	mov	ecx, DWORD PTR _name$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	ecx, DWORD PTR _len$67683[ebp]
	mov	dx, WORD PTR [eax+ecx*2]
	mov	WORD PTR _c$67687[ebp], dx
; Line 84
	movzx	eax, WORD PTR _c$67687[ebp]
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN6@IsSupporte
	movzx	ecx, WORD PTR _c$67687[ebp]
	cmp	ecx, 57					; 00000039H
	jle	SHORT $LN7@IsSupporte
$LN6@IsSupporte:
; Line 85
	jmp	SHORT $LN12@IsSupporte
$LN7@IsSupporte:
; Line 86
	mov	edx, DWORD PTR _len$67683[ebp]
	add	edx, 1
	mov	DWORD PTR _len$67683[ebp], edx
$LN5@IsSupporte:
; Line 90
	mov	ecx, DWORD PTR _name$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	ecx, DWORD PTR _len$67683[ebp]
	mov	dx, WORD PTR [eax+ecx*2]
	mov	WORD PTR _c$67693[ebp], dx
	mov	eax, DWORD PTR _len$67683[ebp]
	add	eax, 1
	mov	DWORD PTR _len$67683[ebp], eax
; Line 91
	movzx	ecx, WORD PTR _c$67693[ebp]
	test	ecx, ecx
	je	SHORT $LN2@IsSupporte
	movzx	edx, WORD PTR _c$67693[ebp]
	cmp	edx, 46					; 0000002eH
	jne	SHORT $LN3@IsSupporte
$LN2@IsSupporte:
; Line 92
	xor	al, al
	jmp	SHORT $LN14@IsSupporte
$LN3@IsSupporte:
; Line 93
	movzx	eax, WORD PTR _c$67693[ebp]
	cmp	eax, 32					; 00000020H
	je	SHORT $LN1@IsSupporte
; Line 94
	jmp	SHORT $LN4@IsSupporte
$LN1@IsSupporte:
; Line 95
	jmp	SHORT $LN5@IsSupporte
$LN4@IsSupporte:
; Line 96
	jmp	$LN12@IsSupporte
$LN11@IsSupporte:
; Line 97
	mov	al, 1
$LN14@IsSupporte:
; Line 98
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?IsSupportedName@@YG_NABVUString@@@Z ENDP		; IsSupportedName
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?MyStringLen@@YGIPBD@Z
_TEXT	SEGMENT
_i$ = -4						; size = 4
_s$ = 8							; size = 4
?MyStringLen@@YGIPBD@Z PROC				; MyStringLen, COMDAT
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 28
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@MyStringLe
$LN2@MyStringLe:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@MyStringLe:
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN1@MyStringLe
	jmp	SHORT $LN2@MyStringLe
$LN1@MyStringLe:
; Line 29
	mov	eax, DWORD PTR _i$[ebp]
; Line 30
	mov	esp, ebp
	pop	ebp
	ret	4
?MyStringLen@@YGIPBD@Z ENDP				; MyStringLen
_TEXT	ENDS
PUBLIC	?Empty@UString@@QAEXXZ				; UString::Empty
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_s$ = 8							; size = 4
?Correct_PathPart@@YGXAAVUString@@@Z PROC		; Correct_PathPart
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\extractingfilepath.cpp
; Line 109
	push	ebp
	mov	ebp, esp
; Line 111
	mov	ecx, DWORD PTR _s$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	movzx	eax, WORD PTR [eax]
	cmp	eax, 46					; 0000002eH
	jne	SHORT $LN3@Correct_Pa
	mov	ecx, DWORD PTR _s$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	movzx	ecx, WORD PTR [eax+2]
	test	ecx, ecx
	je	SHORT $LN2@Correct_Pa
	mov	ecx, DWORD PTR _s$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	movzx	edx, WORD PTR [eax+2]
	cmp	edx, 46					; 0000002eH
	jne	SHORT $LN3@Correct_Pa
	mov	ecx, DWORD PTR _s$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	movzx	eax, WORD PTR [eax+4]
	test	eax, eax
	jne	SHORT $LN3@Correct_Pa
$LN2@Correct_Pa:
; Line 112
	mov	ecx, DWORD PTR _s$[ebp]
	call	?Empty@UString@@QAEXXZ			; UString::Empty
; Line 114
	jmp	SHORT $LN4@Correct_Pa
$LN3@Correct_Pa:
; Line 115
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	?ReplaceIncorrectChars@@YGXAAVUString@@@Z ; ReplaceIncorrectChars
$LN4@Correct_Pa:
; Line 117
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
?Correct_PathPart@@YGXAAVUString@@@Z ENDP		; Correct_PathPart
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Empty@UString@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Empty@UString@@QAEXXZ PROC				; UString::Empty, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 474
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	xor	eax, eax
	mov	WORD PTR [edx], ax
	mov	esp, ebp
	pop	ebp
	ret	0
?Empty@UString@@QAEXXZ ENDP				; UString::Empty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
_TEXT	SEGMENT
_c$67650 = -16						; size = 2
_i$67646 = -12						; size = 4
_c$67643 = -8						; size = 2
_i$67639 = -4						; size = 4
_s$ = 8							; size = 4
?ReplaceIncorrectChars@@YGXAAVUString@@@Z PROC		; ReplaceIncorrectChars
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\extractingfilepath.cpp
; Line 12
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 14
	mov	DWORD PTR _i$67639[ebp], 0
	jmp	SHORT $LN8@ReplaceInc
$LN7@ReplaceInc:
	mov	eax, DWORD PTR _i$67639[ebp]
	add	eax, 1
	mov	DWORD PTR _i$67639[ebp], eax
$LN8@ReplaceInc:
	mov	ecx, DWORD PTR _s$[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	cmp	DWORD PTR _i$67639[ebp], eax
	jae	$LN6@ReplaceInc
; Line 16
	mov	ecx, DWORD PTR _s$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	ecx, DWORD PTR _i$67639[ebp]
	mov	dx, WORD PTR [eax+ecx*2]
	mov	WORD PTR _c$67643[ebp], dx
; Line 22
	movzx	eax, WORD PTR _c$67643[ebp]
	cmp	eax, 58					; 0000003aH
	je	SHORT $LN4@ReplaceInc
	movzx	ecx, WORD PTR _c$67643[ebp]
	cmp	ecx, 42					; 0000002aH
	je	SHORT $LN4@ReplaceInc
	movzx	edx, WORD PTR _c$67643[ebp]
	cmp	edx, 63					; 0000003fH
	je	SHORT $LN4@ReplaceInc
	movzx	eax, WORD PTR _c$67643[ebp]
	cmp	eax, 32					; 00000020H
	jl	SHORT $LN4@ReplaceInc
	movzx	ecx, WORD PTR _c$67643[ebp]
	cmp	ecx, 60					; 0000003cH
	je	SHORT $LN4@ReplaceInc
	movzx	edx, WORD PTR _c$67643[ebp]
	cmp	edx, 62					; 0000003eH
	je	SHORT $LN4@ReplaceInc
	movzx	eax, WORD PTR _c$67643[ebp]
	cmp	eax, 124				; 0000007cH
	je	SHORT $LN4@ReplaceInc
	movzx	ecx, WORD PTR _c$67643[ebp]
	cmp	ecx, 34					; 00000022H
	je	SHORT $LN4@ReplaceInc
	movzx	edx, WORD PTR _c$67643[ebp]
	cmp	edx, 47					; 0000002fH
	je	SHORT $LN4@ReplaceInc
	movzx	eax, WORD PTR _c$67643[ebp]
	cmp	eax, 92					; 0000005cH
	jne	SHORT $LN5@ReplaceInc
$LN4@ReplaceInc:
; Line 23
	push	95					; 0000005fH
	mov	ecx, DWORD PTR _i$67639[ebp]
	push	ecx
	mov	ecx, DWORD PTR _s$[ebp]
	call	?ReplaceOneCharAtPos@UString@@QAEXI_W@Z	; UString::ReplaceOneCharAtPos
$LN5@ReplaceInc:
; Line 24
	jmp	$LN7@ReplaceInc
$LN6@ReplaceInc:
; Line 29
	mov	ecx, DWORD PTR _s$[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	mov	DWORD PTR _i$67646[ebp], eax
$LN3@ReplaceInc:
	cmp	DWORD PTR _i$67646[ebp], 0
	je	SHORT $LN9@ReplaceInc
; Line 31
	mov	edx, DWORD PTR _i$67646[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$67646[ebp], edx
	mov	ecx, DWORD PTR _s$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	ecx, DWORD PTR _i$67646[ebp]
	mov	dx, WORD PTR [eax+ecx*2]
	mov	WORD PTR _c$67650[ebp], dx
; Line 32
	movzx	eax, WORD PTR _c$67650[ebp]
	cmp	eax, 46					; 0000002eH
	je	SHORT $LN1@ReplaceInc
	movzx	ecx, WORD PTR _c$67650[ebp]
	cmp	ecx, 32					; 00000020H
	je	SHORT $LN1@ReplaceInc
; Line 33
	jmp	SHORT $LN9@ReplaceInc
$LN1@ReplaceInc:
; Line 34
	push	95					; 0000005fH
	mov	edx, DWORD PTR _i$67646[ebp]
	push	edx
	mov	ecx, DWORD PTR _s$[ebp]
	call	?ReplaceOneCharAtPos@UString@@QAEXI_W@Z	; UString::ReplaceOneCharAtPos
; Line 35
	jmp	SHORT $LN3@ReplaceInc
$LN9@ReplaceInc:
; Line 38
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ReplaceIncorrectChars@@YGXAAVUString@@@Z ENDP		; ReplaceIncorrectChars
_TEXT	ENDS
PUBLIC	?Back@?$CObjectVector@VUString@@@@QAEAAVUString@@XZ ; CObjectVector<UString>::Back
PUBLIC	?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z ; CObjectVector<UString>::Add
PUBLIC	?IsEmpty@?$CObjectVector@VUString@@@@QBE_NXZ	; CObjectVector<UString>::IsEmpty
PUBLIC	?Delete@?$CObjectVector@VUString@@@@QAEXI@Z	; CObjectVector<UString>::Delete
PUBLIC	?Insert@?$CObjectVector@VUString@@@@QAEXIABVUString@@@Z ; CObjectVector<UString>::Insert
PUBLIC	?Ptr@UString@@QBEPB_WI@Z			; UString::Ptr
PUBLIC	??8@YG_NABVUString@@PB_W@Z			; operator==
PUBLIC	?Size@?$CObjectVector@VUString@@@@QBEIXZ	; CObjectVector<UString>::Size
PUBLIC	??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[]
PUBLIC	?Correct_FsPath@@YGX_NAAV?$CObjectVector@VUString@@@@0@Z ; Correct_FsPath
EXTRN	??0UString@@QAE@_W@Z:PROC			; UString::UString
EXTRN	??0UString@@QAE@PB_W@Z:PROC			; UString::UString
EXTRN	?IsDrivePath2@NName@NFile@NWindows@@YG_NPB_W@Z:PROC ; NWindows::NFile::NName::IsDrivePath2
xdata$x	SEGMENT
__unwindtable$?Correct_FsPath@@YGX_NAAV?$CObjectVector@VUString@@@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Correct_FsPath@@YGX_NAAV?$CObjectVector@VUString@@@@0@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Correct_FsPath@@YGX_NAAV?$CObjectVector@VUString@@@@0@Z$1
__ehfuncinfo$?Correct_FsPath@@YGX_NAAV?$CObjectVector@VUString@@@@0@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Correct_FsPath@@YGX_NAAV?$CObjectVector@VUString@@@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T67978 = -64						; size = 12
_s$67745 = -52						; size = 4
_s$67736 = -48						; size = 4
_s$67732 = -40						; size = 12
_ds$67730 = -24						; size = 4
_isDrive$67721 = -17					; size = 1
_i$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_absIsAllowed$ = 8					; size = 1
_parts$ = 12						; size = 4
_isDir$ = 16						; size = 1
?Correct_FsPath@@YGX_NAAV?$CObjectVector@VUString@@@@0@Z PROC ; Correct_FsPath
; Line 138
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Correct_FsPath@@YGX_NAAV?$CObjectVector@VUString@@@@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 52					; 00000034H
	push	edi
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 139
	mov	DWORD PTR _i$[ebp], 0
; Line 141
	movzx	eax, BYTE PTR _absIsAllowed$[ebp]
	test	eax, eax
	je	$LN10@Correct_Fs
; Line 144
	mov	BYTE PTR _isDrive$67721[ebp], 0
; Line 146
	push	0
	mov	ecx, DWORD PTR _parts$[ebp]
	call	??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[]
	mov	ecx, eax
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	ecx, al
	test	ecx, ecx
	je	$LN18@Correct_Fs
; Line 148
	mov	DWORD PTR _i$[ebp], 1
; Line 150
	mov	ecx, DWORD PTR _parts$[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	cmp	eax, 1
	jbe	$LN17@Correct_Fs
	push	1
	mov	ecx, DWORD PTR _parts$[ebp]
	call	??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[]
	mov	ecx, eax
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN17@Correct_Fs
; Line 152
	mov	DWORD PTR _i$[ebp], 2
; Line 153
	mov	ecx, DWORD PTR _parts$[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	cmp	eax, 2
	jbe	SHORT $LN17@Correct_Fs
	push	OFFSET $SG67725
	push	2
	mov	ecx, DWORD PTR _parts$[ebp]
	call	??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[]
	push	eax
	call	??8@YG_NABVUString@@PB_W@Z		; operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN17@Correct_Fs
; Line 155
	mov	DWORD PTR _i$[ebp], 3
; Line 156
	mov	ecx, DWORD PTR _parts$[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	cmp	eax, 3
	jbe	SHORT $LN17@Correct_Fs
	push	3
	mov	ecx, DWORD PTR _parts$[ebp]
	call	??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[]
	mov	ecx, eax
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	?IsDrivePath2@NName@NFile@NWindows@@YG_NPB_W@Z ; NWindows::NFile::NName::IsDrivePath2
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN17@Correct_Fs
; Line 158
	mov	BYTE PTR _isDrive$67721[ebp], 1
; Line 159
	mov	DWORD PTR _i$[ebp], 4
$LN17@Correct_Fs:
; Line 164
	jmp	SHORT $LN14@Correct_Fs
$LN18@Correct_Fs:
; Line 166
	push	0
	mov	ecx, DWORD PTR _parts$[ebp]
	call	??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[]
	mov	ecx, eax
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	?IsDrivePath2@NName@NFile@NWindows@@YG_NPB_W@Z ; NWindows::NFile::NName::IsDrivePath2
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN14@Correct_Fs
; Line 168
	mov	BYTE PTR _isDrive$67721[ebp], 1
; Line 169
	mov	DWORD PTR _i$[ebp], 1
$LN14@Correct_Fs:
; Line 172
	movzx	eax, BYTE PTR _isDrive$67721[ebp]
	test	eax, eax
	je	SHORT $LN10@Correct_Fs
; Line 175
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _parts$[ebp]
	call	??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[]
	mov	DWORD PTR _ds$67730[ebp], eax
; Line 176
	mov	ecx, DWORD PTR _ds$67730[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	cmp	eax, 2
	je	SHORT $LN10@Correct_Fs
; Line 178
	push	2
	mov	ecx, DWORD PTR _ds$67730[ebp]
	call	?Ptr@UString@@QBEPB_WI@Z		; UString::Ptr
	push	eax
	lea	ecx, DWORD PTR _s$67732[ebp]
	call	??0UString@@QAE@PB_W@Z			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 179
	lea	edx, DWORD PTR _s$67732[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _parts$[ebp]
	call	?Insert@?$CObjectVector@VUString@@@@QAEXIABVUString@@@Z ; CObjectVector<UString>::Insert
; Line 180
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _s$67732[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
$LN10@Correct_Fs:
; Line 185
	mov	ecx, DWORD PTR _parts$[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN9@Correct_Fs
; Line 187
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _parts$[ebp]
	call	??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[]
	mov	DWORD PTR _s$67736[ebp], eax
; Line 190
	mov	edx, DWORD PTR _s$67736[ebp]
	push	edx
	call	?Correct_PathPart@@YGXAAVUString@@@Z	; Correct_PathPart
; Line 193
	mov	ecx, DWORD PTR _s$67736[ebp]
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN8@Correct_Fs
; Line 195
	movzx	ecx, BYTE PTR _isDir$[ebp]
	test	ecx, ecx
	jne	SHORT $LN6@Correct_Fs
	mov	ecx, DWORD PTR _parts$[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	sub	eax, 1
	cmp	DWORD PTR _i$[ebp], eax
	je	SHORT $LN7@Correct_Fs
$LN6@Correct_Fs:
; Line 197
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _parts$[ebp]
	call	?Delete@?$CObjectVector@VUString@@@@QAEXI@Z ; CObjectVector<UString>::Delete
; Line 198
	jmp	SHORT $LN10@Correct_Fs
$LN7@Correct_Fs:
; Line 200
	push	95					; 0000005fH
	mov	ecx, DWORD PTR _s$67736[ebp]
	call	??4UString@@QAEAAV0@_W@Z		; UString::operator=
; Line 202
	jmp	SHORT $LN5@Correct_Fs
$LN8@Correct_Fs:
; Line 205
	mov	eax, DWORD PTR _s$67736[ebp]
	push	eax
	call	?CorrectUnsupportedName@@YGXAAVUString@@@Z ; CorrectUnsupportedName
$LN5@Correct_Fs:
; Line 209
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
; Line 210
	jmp	SHORT $LN10@Correct_Fs
$LN9@Correct_Fs:
; Line 212
	movzx	edx, BYTE PTR _isDir$[ebp]
	test	edx, edx
	jne	SHORT $LN20@Correct_Fs
; Line 214
	mov	ecx, DWORD PTR _parts$[ebp]
	call	?IsEmpty@?$CObjectVector@VUString@@@@QBE_NXZ ; CObjectVector<UString>::IsEmpty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@Correct_Fs
; Line 215
	push	95					; 0000005fH
	lea	ecx, DWORD PTR $T67978[ebp]
	call	??0UString@@QAE@_W@Z			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T67978[ebp]
	push	ecx
	mov	ecx, DWORD PTR _parts$[ebp]
	call	?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z ; CObjectVector<UString>::Add
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T67978[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
; Line 216
	jmp	SHORT $LN20@Correct_Fs
$LN3@Correct_Fs:
; Line 218
	mov	ecx, DWORD PTR _parts$[ebp]
	call	?Back@?$CObjectVector@VUString@@@@QAEAAVUString@@XZ ; CObjectVector<UString>::Back
	mov	DWORD PTR _s$67745[ebp], eax
; Line 219
	mov	ecx, DWORD PTR _s$67745[ebp]
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN20@Correct_Fs
; Line 220
	push	95					; 0000005fH
	mov	ecx, DWORD PTR _s$67745[ebp]
	call	??4UString@@QAEAAV0@_W@Z		; UString::operator=
$LN20@Correct_Fs:
; Line 223
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN28@Correct_Fs
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 64					; 00000040H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN28@Correct_Fs:
	DD	1
	DD	$LN27@Correct_Fs
$LN27@Correct_Fs:
	DD	-40					; ffffffd8H
	DD	12					; 0000000cH
	DD	$LN25@Correct_Fs
$LN25@Correct_Fs:
	DB	115					; 00000073H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Correct_FsPath@@YGX_NAAV?$CObjectVector@VUString@@@@0@Z$0:
	lea	ecx, DWORD PTR _s$67732[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?Correct_FsPath@@YGX_NAAV?$CObjectVector@VUString@@@@0@Z$1:
	lea	ecx, DWORD PTR $T67978[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$?Correct_FsPath@@YGX_NAAV?$CObjectVector@VUString@@@@0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-60]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Correct_FsPath@@YGX_NAAV?$CObjectVector@VUString@@@@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Correct_FsPath@@YGX_NAAV?$CObjectVector@VUString@@@@0@Z ENDP ; Correct_FsPath
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Ptr@UString@@QBEPB_WI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pos$ = 8						; size = 4
?Ptr@UString@@QBEPB_WI@Z PROC				; UString::Ptr, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 478
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pos$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	mov	esp, ebp
	pop	ebp
	ret	4
?Ptr@UString@@QBEPB_WI@Z ENDP				; UString::Ptr
_TEXT	ENDS
EXTRN	__imp__wcscmp:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??8@YG_NABVUString@@PB_W@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
??8@YG_NABVUString@@PB_W@Z PROC				; operator==, COMDAT
; Line 617
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, esp
	mov	eax, DWORD PTR _s2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s1$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	DWORD PTR __imp__wcscmp
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	neg	eax
	sbb	eax, eax
	add	eax, 1
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
??8@YG_NABVUString@@PB_W@Z ENDP				; operator==
_TEXT	ENDS
PUBLIC	??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[]
PUBLIC	?Add_PathSepar@UString@@QAEXXZ			; UString::Add_PathSepar
PUBLIC	?MakePathFromParts@@YG?AVUString@@ABV?$CObjectVector@VUString@@@@@Z ; MakePathFromParts
EXTRN	??YUString@@QAEAAV0@ABV0@@Z:PROC		; UString::operator+=
EXTRN	??0UString@@QAE@XZ:PROC				; UString::UString
xdata$x	SEGMENT
__unwindtable$?MakePathFromParts@@YG?AVUString@@ABV?$CObjectVector@VUString@@@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?MakePathFromParts@@YG?AVUString@@ABV?$CObjectVector@VUString@@@@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?MakePathFromParts@@YG?AVUString@@ABV?$CObjectVector@VUString@@@@@Z$0
__ehfuncinfo$?MakePathFromParts@@YG?AVUString@@ABV?$CObjectVector@VUString@@@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?MakePathFromParts@@YG?AVUString@@ABV?$CObjectVector@VUString@@@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T67996 = -40						; size = 4
_i$67752 = -36						; size = 4
_s$ = -28						; size = 12
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_parts$ = 12						; size = 4
?MakePathFromParts@@YG?AVUString@@ABV?$CObjectVector@VUString@@@@@Z PROC ; MakePathFromParts
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\extractingfilepath.cpp
; Line 226
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?MakePathFromParts@@YG?AVUString@@ABV?$CObjectVector@VUString@@@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T67996[ebp], 0
; Line 227
	lea	ecx, DWORD PTR _s$[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 228
	mov	DWORD PTR _i$67752[ebp], 0
	jmp	SHORT $LN4@MakePathFr
$LN3@MakePathFr:
	mov	eax, DWORD PTR _i$67752[ebp]
	add	eax, 1
	mov	DWORD PTR _i$67752[ebp], eax
$LN4@MakePathFr:
	mov	ecx, DWORD PTR _parts$[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	cmp	DWORD PTR _i$67752[ebp], eax
	jae	SHORT $LN2@MakePathFr
; Line 230
	cmp	DWORD PTR _i$67752[ebp], 0
	je	SHORT $LN1@MakePathFr
; Line 231
	lea	ecx, DWORD PTR _s$[ebp]
	call	?Add_PathSepar@UString@@QAEXXZ		; UString::Add_PathSepar
$LN1@MakePathFr:
; Line 232
	mov	ecx, DWORD PTR _i$67752[ebp]
	push	ecx
	mov	ecx, DWORD PTR _parts$[ebp]
	call	??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[]
	push	eax
	lea	ecx, DWORD PTR _s$[ebp]
	call	??YUString@@QAEAAV0@ABV0@@Z		; UString::operator+=
; Line 233
	jmp	SHORT $LN3@MakePathFr
$LN2@MakePathFr:
; Line 234
	lea	edx, DWORD PTR _s$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	eax, DWORD PTR $T67996[ebp]
	or	eax, 1
	mov	DWORD PTR $T67996[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _s$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 235
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@MakePathFr
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN13@MakePathFr:
	DD	1
	DD	$LN12@MakePathFr
$LN12@MakePathFr:
	DD	-28					; ffffffe4H
	DD	12					; 0000000cH
	DD	$LN10@MakePathFr
$LN10@MakePathFr:
	DB	115					; 00000073H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?MakePathFromParts@@YG?AVUString@@ABV?$CObjectVector@VUString@@@@@Z$0:
	lea	ecx, DWORD PTR _s$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?MakePathFromParts@@YG?AVUString@@ABV?$CObjectVector@VUString@@@@@Z$1:
	mov	eax, DWORD PTR $T67996[ebp]
	and	eax, 1
	je	$LN9@MakePathFr
	and	DWORD PTR $T67996[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
$LN9@MakePathFr:
	ret	0
__ehhandler$?MakePathFromParts@@YG?AVUString@@ABV?$CObjectVector@VUString@@@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?MakePathFromParts@@YG?AVUString@@ABV?$CObjectVector@VUString@@@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?MakePathFromParts@@YG?AVUString@@ABV?$CObjectVector@VUString@@@@@Z ENDP ; MakePathFromParts
PUBLIC	??YUString@@QAEAAV0@_W@Z			; UString::operator+=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add_PathSepar@UString@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Add_PathSepar@UString@@QAEXXZ PROC			; UString::Add_PathSepar, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 529
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	push	92					; 0000005cH
	mov	ecx, DWORD PTR _this$[ebp]
	call	??YUString@@QAEAAV0@_W@Z		; UString::operator+=
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Add_PathSepar@UString@@QAEXXZ ENDP			; UString::Add_PathSepar
_TEXT	ENDS
EXTRN	?Grow_1@UString@@AAEXXZ:PROC			; UString::Grow_1
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??YUString@@QAEAAV0@_W@Z
_TEXT	SEGMENT
_chars$ = -12						; size = 4
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_c$ = 8							; size = 2
??YUString@@QAEAAV0@_W@Z PROC				; UString::operator+=, COMDAT
; _this$ = ecx
; Line 515
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 516
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+4]
	jne	SHORT $LN1@operator
; Line 517
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Grow_1@UString@@AAEXXZ			; UString::Grow_1
$LN1@operator:
; Line 518
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _len$[ebp], ecx
; Line 519
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _chars$[ebp], eax
; Line 520
	mov	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _chars$[ebp]
	mov	ax, WORD PTR _c$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
	mov	ecx, DWORD PTR _len$[ebp]
	add	ecx, 1
	mov	DWORD PTR _len$[ebp], ecx
; Line 521
	xor	edx, edx
	mov	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _chars$[ebp]
	mov	WORD PTR [ecx+eax*2], dx
; Line 522
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 523
	mov	eax, DWORD PTR _this$[ebp]
; Line 524
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??YUString@@QAEAAV0@_W@Z ENDP				; UString::operator+=
_TEXT	ENDS
PUBLIC	?Size@?$CRecordVector@PAX@@QBEIXZ		; CRecordVector<void *>::Size
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Size@?$CObjectVector@VUString@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@VUString@@@@QBEIXZ PROC		; CObjectVector<UString>::Size, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@VUString@@@@QBEIXZ ENDP		; CObjectVector<UString>::Size
_TEXT	ENDS
PUBLIC	?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ		; CRecordVector<void *>::IsEmpty
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsEmpty@?$CObjectVector@VUString@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@?$CObjectVector@VUString@@@@QBE_NXZ PROC	; CObjectVector<UString>::IsEmpty, COMDAT
; _this$ = ecx
; Line 416
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ	; CRecordVector<void *>::IsEmpty
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@?$CObjectVector@VUString@@@@QBE_NXZ ENDP	; CObjectVector<UString>::IsEmpty
_TEXT	ENDS
PUBLIC	??A?$CRecordVector@PAX@@QBEABQAXI@Z		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z PROC	; CObjectVector<UString>::operator[], COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ENDP	; CObjectVector<UString>::operator[]
_TEXT	ENDS
PUBLIC	??A?$CRecordVector@PAX@@QAEAAPAXI@Z		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z PROC	; CObjectVector<UString>::operator[], COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ENDP	; CObjectVector<UString>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Back@?$CObjectVector@VUString@@@@QAEAAVUString@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Back@?$CObjectVector@VUString@@@@QAEAAVUString@@XZ PROC ; CObjectVector<UString>::Back, COMDAT
; _this$ = ecx
; Line 455
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Back@?$CObjectVector@VUString@@@@QAEAAVUString@@XZ ENDP ; CObjectVector<UString>::Back
_TEXT	ENDS
PUBLIC	?Add@?$CRecordVector@PAX@@QAEIQAX@Z		; CRecordVector<void *>::Add
EXTRN	??2@YAPAXI@Z:PROC				; operator new
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z$0
__ehfuncinfo$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
_TEXT	SEGMENT
tv74 = -28						; size = 4
$T68021 = -24						; size = 4
$T68020 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_item$ = 8						; size = 4
?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z PROC ; CObjectVector<UString>::Add, COMDAT
; _this$ = ecx
; Line 459
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T68021[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T68021[ebp], 0
	je	SHORT $LN3@Add
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T68021[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@Add
$LN3@Add:
	mov	DWORD PTR tv74[ebp], 0
$LN4@Add:
	mov	ecx, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T68020[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T68020[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z$0:
	mov	eax, DWORD PTR $T68021[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z ENDP ; CObjectVector<UString>::Add
PUBLIC	?Insert@?$CRecordVector@PAX@@QAEXIQAX@Z		; CRecordVector<void *>::Insert
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Insert@?$CObjectVector@VUString@@@@QAEXIABVUString@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Insert@?$CObjectVector@VUString@@@@QAEXIABVUString@@@Z$0
__ehfuncinfo$?Insert@?$CObjectVector@VUString@@@@QAEXIABVUString@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Insert@?$CObjectVector@VUString@@@@QAEXIABVUString@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?Insert@?$CObjectVector@VUString@@@@QAEXIABVUString@@@Z
_TEXT	SEGMENT
tv73 = -28						; size = 4
$T68034 = -24						; size = 4
$T68033 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_index$ = 8						; size = 4
_item$ = 12						; size = 4
?Insert@?$CObjectVector@VUString@@@@QAEXIABVUString@@@Z PROC ; CObjectVector<UString>::Insert, COMDAT
; _this$ = ecx
; Line 477
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Insert@?$CObjectVector@VUString@@@@QAEXIABVUString@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T68034[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T68034[ebp], 0
	je	SHORT $LN3@Insert
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T68034[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	DWORD PTR tv73[ebp], eax
	jmp	SHORT $LN4@Insert
$LN3@Insert:
	mov	DWORD PTR tv73[ebp], 0
$LN4@Insert:
	mov	ecx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T68033[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T68033[ebp]
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Insert@?$CRecordVector@PAX@@QAEXIQAX@Z	; CRecordVector<void *>::Insert
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Insert@?$CObjectVector@VUString@@@@QAEXIABVUString@@@Z$0:
	mov	eax, DWORD PTR $T68034[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Insert@?$CObjectVector@VUString@@@@QAEXIABVUString@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Insert@?$CObjectVector@VUString@@@@QAEXIABVUString@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Insert@?$CObjectVector@VUString@@@@QAEXIABVUString@@@Z ENDP ; CObjectVector<UString>::Insert
PUBLIC	?Delete@?$CRecordVector@PAX@@QAEXI@Z		; CRecordVector<void *>::Delete
PUBLIC	??_GUString@@QAEPAXI@Z				; UString::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Delete@?$CObjectVector@VUString@@@@QAEXI@Z
_TEXT	SEGMENT
tv71 = -16						; size = 4
$T68047 = -12						; size = 4
$T68046 = -8						; size = 4
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?Delete@?$CObjectVector@VUString@@@@QAEXI@Z PROC	; CObjectVector<UString>::Delete, COMDAT
; _this$ = ecx
; Line 527
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 528
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T68047[ebp], ecx
	mov	edx, DWORD PTR $T68047[ebp]
	mov	DWORD PTR $T68046[ebp], edx
	cmp	DWORD PTR $T68046[ebp], 0
	je	SHORT $LN3@Delete
	push	1
	mov	ecx, DWORD PTR $T68046[ebp]
	call	??_GUString@@QAEPAXI@Z
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN4@Delete
$LN3@Delete:
	mov	DWORD PTR tv71[ebp], 0
$LN4@Delete:
; Line 529
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Delete@?$CRecordVector@PAX@@QAEXI@Z	; CRecordVector<void *>::Delete
; Line 530
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Delete@?$CObjectVector@VUString@@@@QAEXI@Z ENDP	; CObjectVector<UString>::Delete
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??_GUString@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GUString@@QAEPAXI@Z PROC				; UString::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GUString@@QAEPAXI@Z ENDP				; UString::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@PAX@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@PAX@@QBEIXZ PROC			; CRecordVector<void *>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@PAX@@QBEIXZ ENDP			; CRecordVector<void *>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ PROC		; CRecordVector<void *>::IsEmpty, COMDAT
; _this$ = ecx
; Line 49
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+4], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ ENDP		; CRecordVector<void *>::IsEmpty
_TEXT	ENDS
PUBLIC	?MoveItems@?$CRecordVector@PAX@@AAEXII@Z	; CRecordVector<void *>::MoveItems
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Delete@?$CRecordVector@PAX@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?Delete@?$CRecordVector@PAX@@QAEXI@Z PROC		; CRecordVector<void *>::Delete, COMDAT
; _this$ = ecx
; Line 151
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 152
	mov	eax, DWORD PTR _index$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MoveItems@?$CRecordVector@PAX@@AAEXII@Z ; CRecordVector<void *>::MoveItems
; Line 153
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	sub	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 154
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Delete@?$CRecordVector@PAX@@QAEXI@Z ENDP		; CRecordVector<void *>::Delete
_TEXT	ENDS
PUBLIC	?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ	; CRecordVector<void *>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@PAX@@QAEIQAX@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?Add@?$CRecordVector@PAX@@QAEIQAX@Z PROC		; CRecordVector<void *>::Add, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ; CRecordVector<void *>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 201
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv72[ebp]
; Line 202
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CRecordVector@PAX@@QAEIQAX@Z ENDP		; CRecordVector<void *>::Add
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Insert@?$CRecordVector@PAX@@QAEXIQAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
_item$ = 12						; size = 4
?Insert@?$CRecordVector@PAX@@QAEXIQAX@Z PROC		; CRecordVector<void *>::Insert, COMDAT
; _this$ = ecx
; Line 210
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 211
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ; CRecordVector<void *>::ReserveOnePosition
; Line 212
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MoveItems@?$CRecordVector@PAX@@AAEXII@Z ; CRecordVector<void *>::MoveItems
; Line 213
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 214
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 215
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Insert@?$CRecordVector@PAX@@QAEXIQAX@Z ENDP		; CRecordVector<void *>::Insert
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@PAX@@QBEABQAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@PAX@@QBEABQAXI@Z PROC		; CRecordVector<void *>::operator[], COMDAT
; _this$ = ecx
; Line 227
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@PAX@@QBEABQAXI@Z ENDP		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@PAX@@QAEAAPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@PAX@@QAEAAPAXI@Z PROC		; CRecordVector<void *>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@PAX@@QAEAAPAXI@Z ENDP		; CRecordVector<void *>::operator[]
_TEXT	ENDS
EXTRN	__imp__memmove:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?MoveItems@?$CRecordVector@PAX@@AAEXII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_destIndex$ = 8						; size = 4
_srcIndex$ = 12						; size = 4
?MoveItems@?$CRecordVector@PAX@@AAEXII@Z PROC		; CRecordVector<void *>::MoveItems, COMDAT
; _this$ = ecx
; Line 14
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 15
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR _srcIndex$[ebp]
	shl	ecx, 2
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _srcIndex$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _destIndex$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 16
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?MoveItems@?$CRecordVector@PAX@@AAEXII@Z ENDP		; CRecordVector<void *>::MoveItems
_TEXT	ENDS
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ
_TEXT	SEGMENT
$T68071 = -20						; size = 4
$T68070 = -16						; size = 4
_p$67865 = -12						; size = 4
_newCapacity$67864 = -8					; size = 4
_this$ = -4						; size = 4
?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ PROC	; CRecordVector<void *>::ReserveOnePosition, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@ReserveOne
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$67864[ebp], ecx
; Line 23
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$67864[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T68070[ebp], eax
	mov	eax, DWORD PTR $T68070[ebp]
	mov	DWORD PTR _p$67865[ebp], eax
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@ReserveOne
; Line 25
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$67865[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne:
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T68071[ebp], edx
	mov	eax, DWORD PTR $T68071[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$67865[ebp]
	mov	DWORD PTR [ecx], edx
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$67864[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ReserveOne:
; Line 30
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ENDP	; CRecordVector<void *>::ReserveOnePosition
_TEXT	ENDS
END
