; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\CPP\Common\IntToString.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	__$ArrayPad$
PUBLIC	?ConvertUInt32ToString@@YGXIPAD@Z		; ConvertUInt32ToString
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\cpp\common\inttostring.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_i$ = -32						; size = 4
_temp$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_val$ = 8						; size = 4
_s$ = 12						; size = 4
?ConvertUInt32ToString@@YGXIPAD@Z PROC			; ConvertUInt32ToString
; Line 15
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 16
	mov	DWORD PTR _i$[ebp], 0
$LN4@ConvertUIn:
	cmp	DWORD PTR _val$[ebp], 10		; 0000000aH
	jb	SHORT $LN3@ConvertUIn
	mov	eax, DWORD PTR _val$[ebp]
	xor	edx, edx
	mov	ecx, 10					; 0000000aH
	div	ecx
	add	edx, 48					; 00000030H
	mov	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR _temp$[ebp+eax], dl
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	mov	eax, DWORD PTR _val$[ebp]
	xor	edx, edx
	mov	ecx, 10					; 0000000aH
	div	ecx
	mov	DWORD PTR _val$[ebp], eax
	jmp	SHORT $LN4@ConvertUIn
$LN3@ConvertUIn:
	mov	edx, DWORD PTR _val$[ebp]
	add	edx, 48					; 00000030H
	mov	eax, DWORD PTR _s$[ebp]
	mov	BYTE PTR [eax], dl
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, 1
	mov	DWORD PTR _s$[ebp], ecx
$LN2@ConvertUIn:
	cmp	DWORD PTR _i$[ebp], 0
	je	SHORT $LN1@ConvertUIn
	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	dl, BYTE PTR _temp$[ebp+ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 1
	mov	DWORD PTR _s$[ebp], eax
	jmp	SHORT $LN2@ConvertUIn
$LN1@ConvertUIn:
	mov	ecx, DWORD PTR _s$[ebp]
	mov	BYTE PTR [ecx], 0
; Line 17
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@ConvertUIn
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN9@ConvertUIn:
	DD	1
	DD	$LN8@ConvertUIn
$LN8@ConvertUIn:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN7@ConvertUIn
$LN7@ConvertUIn:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
?ConvertUInt32ToString@@YGXIPAD@Z ENDP			; ConvertUInt32ToString
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?ConvertUInt64ToString@@YGX_KPAD@Z		; ConvertUInt64ToString
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__aulldiv:PROC
EXTRN	__aullrem:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$ = -40						; size = 4
_temp$ = -32						; size = 24
__$ArrayPad$ = -4					; size = 4
_val$ = 8						; size = 8
_s$ = 16						; size = 4
?ConvertUInt64ToString@@YGX_KPAD@Z PROC			; ConvertUInt64ToString
; Line 20
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 21
	cmp	DWORD PTR _val$[ebp+4], 0
	ja	SHORT $LN5@ConvertUIn@2
	jb	SHORT $LN8@ConvertUIn@2
	cmp	DWORD PTR _val$[ebp], -1
	ja	SHORT $LN5@ConvertUIn@2
$LN8@ConvertUIn@2:
; Line 23
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _val$[ebp]
	push	ecx
	call	?ConvertUInt32ToString@@YGXIPAD@Z	; ConvertUInt32ToString
; Line 24
	jmp	$LN6@ConvertUIn@2
$LN5@ConvertUIn@2:
; Line 26
	mov	DWORD PTR _i$[ebp], 0
$LN4@ConvertUIn@2:
	cmp	DWORD PTR _val$[ebp+4], 0
	ja	SHORT $LN9@ConvertUIn@2
	cmp	DWORD PTR _val$[ebp], 10		; 0000000aH
	jb	SHORT $LN3@ConvertUIn@2
$LN9@ConvertUIn@2:
	push	0
	push	10					; 0000000aH
	mov	edx, DWORD PTR _val$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _val$[ebp]
	push	eax
	call	__aullrem
	add	eax, 48					; 00000030H
	mov	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR _temp$[ebp+ecx], al
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	push	0
	push	10					; 0000000aH
	mov	eax, DWORD PTR _val$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _val$[ebp]
	push	ecx
	call	__aulldiv
	mov	DWORD PTR _val$[ebp], eax
	mov	DWORD PTR _val$[ebp+4], edx
	jmp	SHORT $LN4@ConvertUIn@2
$LN3@ConvertUIn@2:
	mov	edx, DWORD PTR _val$[ebp]
	add	edx, 48					; 00000030H
	mov	eax, DWORD PTR _s$[ebp]
	mov	BYTE PTR [eax], dl
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, 1
	mov	DWORD PTR _s$[ebp], ecx
$LN2@ConvertUIn@2:
	cmp	DWORD PTR _i$[ebp], 0
	je	SHORT $LN1@ConvertUIn@2
	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	dl, BYTE PTR _temp$[ebp+ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 1
	mov	DWORD PTR _s$[ebp], eax
	jmp	SHORT $LN2@ConvertUIn@2
$LN1@ConvertUIn@2:
	mov	ecx, DWORD PTR _s$[ebp]
	mov	BYTE PTR [ecx], 0
$LN6@ConvertUIn@2:
; Line 27
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@ConvertUIn@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN12@ConvertUIn@2:
	DD	1
	DD	$LN11@ConvertUIn@2
$LN11@ConvertUIn@2:
	DD	-32					; ffffffe0H
	DD	24					; 00000018H
	DD	$LN10@ConvertUIn@2
$LN10@ConvertUIn@2:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
?ConvertUInt64ToString@@YGX_KPAD@Z ENDP			; ConvertUInt64ToString
_TEXT	ENDS
PUBLIC	?ConvertUInt64ToOct@@YGX_KPAD@Z			; ConvertUInt64ToOct
EXTRN	__aullshr:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_t$65856 = -16						; size = 4
_i$ = -12						; size = 4
_v$ = -8						; size = 8
_val$ = 8						; size = 8
_s$ = 16						; size = 4
?ConvertUInt64ToOct@@YGX_KPAD@Z PROC			; ConvertUInt64ToOct
; Line 30
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 31
	mov	eax, DWORD PTR _val$[ebp]
	mov	DWORD PTR _v$[ebp], eax
	mov	ecx, DWORD PTR _val$[ebp+4]
	mov	DWORD PTR _v$[ebp+4], ecx
; Line 33
	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN7@ConvertUIn@3
$LN6@ConvertUIn@3:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN7@ConvertUIn@3:
; Line 35
	mov	eax, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR _v$[ebp+4]
	mov	cl, 3
	call	__aullshr
	mov	DWORD PTR _v$[ebp], eax
	mov	DWORD PTR _v$[ebp+4], edx
; Line 36
	mov	eax, DWORD PTR _v$[ebp]
	or	eax, DWORD PTR _v$[ebp+4]
	jne	SHORT $LN4@ConvertUIn@3
; Line 37
	jmp	SHORT $LN5@ConvertUIn@3
$LN4@ConvertUIn@3:
; Line 38
	jmp	SHORT $LN6@ConvertUIn@3
$LN5@ConvertUIn@3:
; Line 39
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [ecx], 0
$LN3@ConvertUIn@3:
; Line 42
	mov	edx, DWORD PTR _val$[ebp]
	and	edx, 7
	mov	eax, DWORD PTR _val$[ebp+4]
	and	eax, 0
	mov	DWORD PTR _t$65856[ebp], edx
; Line 43
	mov	eax, DWORD PTR _val$[ebp]
	mov	edx, DWORD PTR _val$[ebp+4]
	mov	cl, 3
	call	__aullshr
	mov	DWORD PTR _val$[ebp], eax
	mov	DWORD PTR _val$[ebp+4], edx
; Line 44
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	mov	edx, DWORD PTR _t$65856[ebp]
	add	edx, 48					; 00000030H
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR [eax], dl
; Line 46
	cmp	DWORD PTR _i$[ebp], 0
	jne	SHORT $LN3@ConvertUIn@3
; Line 47
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?ConvertUInt64ToOct@@YGX_KPAD@Z ENDP			; ConvertUInt64ToOct
_TEXT	ENDS
PUBLIC	?ConvertUInt32ToHex@@YGXIPAD@Z			; ConvertUInt32ToHex
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv76 = -16						; size = 4
_t$65872 = -12						; size = 4
_i$ = -8						; size = 4
_v$ = -4						; size = 4
_val$ = 8						; size = 4
_s$ = 12						; size = 4
?ConvertUInt32ToHex@@YGXIPAD@Z PROC			; ConvertUInt32ToHex
; Line 50
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 51
	mov	eax, DWORD PTR _val$[ebp]
	mov	DWORD PTR _v$[ebp], eax
; Line 53
	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN7@ConvertUIn@4
$LN6@ConvertUIn@4:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN7@ConvertUIn@4:
; Line 55
	mov	edx, DWORD PTR _v$[ebp]
	shr	edx, 4
	mov	DWORD PTR _v$[ebp], edx
; Line 56
	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN4@ConvertUIn@4
; Line 57
	jmp	SHORT $LN5@ConvertUIn@4
$LN4@ConvertUIn@4:
; Line 58
	jmp	SHORT $LN6@ConvertUIn@4
$LN5@ConvertUIn@4:
; Line 59
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR [eax], 0
$LN3@ConvertUIn@4:
; Line 62
	mov	ecx, DWORD PTR _val$[ebp]
	and	ecx, 15					; 0000000fH
	mov	DWORD PTR _t$65872[ebp], ecx
; Line 63
	mov	edx, DWORD PTR _val$[ebp]
	shr	edx, 4
	mov	DWORD PTR _val$[ebp], edx
; Line 64
	cmp	DWORD PTR _t$65872[ebp], 10		; 0000000aH
	jae	SHORT $LN10@ConvertUIn@4
	mov	eax, DWORD PTR _t$65872[ebp]
	add	eax, 48					; 00000030H
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN11@ConvertUIn@4
$LN10@ConvertUIn@4:
	mov	ecx, DWORD PTR _t$65872[ebp]
	add	ecx, 55					; 00000037H
	mov	DWORD PTR tv76[ebp], ecx
$LN11@ConvertUIn@4:
	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR tv76[ebp]
	mov	BYTE PTR [eax], cl
; Line 66
	cmp	DWORD PTR _i$[ebp], 0
	jne	SHORT $LN3@ConvertUIn@4
; Line 67
	mov	esp, ebp
	pop	ebp
	ret	8
?ConvertUInt32ToHex@@YGXIPAD@Z ENDP			; ConvertUInt32ToHex
_TEXT	ENDS
PUBLIC	?ConvertUInt64ToHex@@YGX_KPAD@Z			; ConvertUInt64ToHex
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv77 = -20						; size = 4
_t$65888 = -16						; size = 4
_i$ = -12						; size = 4
_v$ = -8						; size = 8
_val$ = 8						; size = 8
_s$ = 16						; size = 4
?ConvertUInt64ToHex@@YGX_KPAD@Z PROC			; ConvertUInt64ToHex
; Line 70
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 71
	mov	eax, DWORD PTR _val$[ebp]
	mov	DWORD PTR _v$[ebp], eax
	mov	ecx, DWORD PTR _val$[ebp+4]
	mov	DWORD PTR _v$[ebp+4], ecx
; Line 73
	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN7@ConvertUIn@5
$LN6@ConvertUIn@5:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN7@ConvertUIn@5:
; Line 75
	mov	eax, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR _v$[ebp+4]
	mov	cl, 4
	call	__aullshr
	mov	DWORD PTR _v$[ebp], eax
	mov	DWORD PTR _v$[ebp+4], edx
; Line 76
	mov	eax, DWORD PTR _v$[ebp]
	or	eax, DWORD PTR _v$[ebp+4]
	jne	SHORT $LN4@ConvertUIn@5
; Line 77
	jmp	SHORT $LN5@ConvertUIn@5
$LN4@ConvertUIn@5:
; Line 78
	jmp	SHORT $LN6@ConvertUIn@5
$LN5@ConvertUIn@5:
; Line 79
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [ecx], 0
$LN3@ConvertUIn@5:
; Line 82
	mov	edx, DWORD PTR _val$[ebp]
	and	edx, 15					; 0000000fH
	mov	eax, DWORD PTR _val$[ebp+4]
	and	eax, 0
	mov	DWORD PTR _t$65888[ebp], edx
; Line 83
	mov	eax, DWORD PTR _val$[ebp]
	mov	edx, DWORD PTR _val$[ebp+4]
	mov	cl, 4
	call	__aullshr
	mov	DWORD PTR _val$[ebp], eax
	mov	DWORD PTR _val$[ebp+4], edx
; Line 84
	cmp	DWORD PTR _t$65888[ebp], 10		; 0000000aH
	jae	SHORT $LN10@ConvertUIn@5
	mov	ecx, DWORD PTR _t$65888[ebp]
	add	ecx, 48					; 00000030H
	mov	DWORD PTR tv77[ebp], ecx
	jmp	SHORT $LN11@ConvertUIn@5
$LN10@ConvertUIn@5:
	mov	edx, DWORD PTR _t$65888[ebp]
	add	edx, 55					; 00000037H
	mov	DWORD PTR tv77[ebp], edx
$LN11@ConvertUIn@5:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	dl, BYTE PTR tv77[ebp]
	mov	BYTE PTR [ecx], dl
; Line 86
	cmp	DWORD PTR _i$[ebp], 0
	jne	SHORT $LN3@ConvertUIn@5
; Line 87
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?ConvertUInt64ToHex@@YGX_KPAD@Z ENDP			; ConvertUInt64ToHex
_TEXT	ENDS
PUBLIC	?ConvertUInt32ToHex8Digits@@YGXIPAD@Z		; ConvertUInt32ToHex8Digits
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv74 = -12						; size = 4
_t$65899 = -8						; size = 4
_i$65895 = -4						; size = 4
_val$ = 8						; size = 4
_s$ = 12						; size = 4
?ConvertUInt32ToHex8Digits@@YGXIPAD@Z PROC		; ConvertUInt32ToHex8Digits
; Line 90
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 91
	mov	eax, DWORD PTR _s$[ebp]
	mov	BYTE PTR [eax+8], 0
; Line 92
	mov	DWORD PTR _i$65895[ebp], 7
	jmp	SHORT $LN3@ConvertUIn@6
$LN2@ConvertUIn@6:
	mov	ecx, DWORD PTR _i$65895[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$65895[ebp], ecx
$LN3@ConvertUIn@6:
	cmp	DWORD PTR _i$65895[ebp], 0
	jl	SHORT $LN4@ConvertUIn@6
; Line 94
	mov	edx, DWORD PTR _val$[ebp]
	and	edx, 15					; 0000000fH
	mov	DWORD PTR _t$65899[ebp], edx
; Line 95
	mov	eax, DWORD PTR _val$[ebp]
	shr	eax, 4
	mov	DWORD PTR _val$[ebp], eax
; Line 96
	cmp	DWORD PTR _t$65899[ebp], 10		; 0000000aH
	jae	SHORT $LN6@ConvertUIn@6
	mov	ecx, DWORD PTR _t$65899[ebp]
	add	ecx, 48					; 00000030H
	mov	DWORD PTR tv74[ebp], ecx
	jmp	SHORT $LN7@ConvertUIn@6
$LN6@ConvertUIn@6:
	mov	edx, DWORD PTR _t$65899[ebp]
	add	edx, 55					; 00000037H
	mov	DWORD PTR tv74[ebp], edx
$LN7@ConvertUIn@6:
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR _i$65895[ebp]
	mov	cl, BYTE PTR tv74[ebp]
	mov	BYTE PTR [eax], cl
; Line 97
	jmp	SHORT $LN2@ConvertUIn@6
$LN4@ConvertUIn@6:
; Line 98
	mov	esp, ebp
	pop	ebp
	ret	8
?ConvertUInt32ToHex8Digits@@YGXIPAD@Z ENDP		; ConvertUInt32ToHex8Digits
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?ConvertUInt32ToString@@YGXIPA_W@Z		; ConvertUInt32ToString
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$ = -32						; size = 4
_temp$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_val$ = 8						; size = 4
_s$ = 12						; size = 4
?ConvertUInt32ToString@@YGXIPA_W@Z PROC			; ConvertUInt32ToString
; Line 114
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 115
	mov	DWORD PTR _i$[ebp], 0
$LN4@ConvertUIn@7:
	cmp	DWORD PTR _val$[ebp], 10		; 0000000aH
	jb	SHORT $LN3@ConvertUIn@7
	mov	eax, DWORD PTR _val$[ebp]
	xor	edx, edx
	mov	ecx, 10					; 0000000aH
	div	ecx
	add	edx, 48					; 00000030H
	mov	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR _temp$[ebp+eax], dl
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	mov	eax, DWORD PTR _val$[ebp]
	xor	edx, edx
	mov	ecx, 10					; 0000000aH
	div	ecx
	mov	DWORD PTR _val$[ebp], eax
	jmp	SHORT $LN4@ConvertUIn@7
$LN3@ConvertUIn@7:
	mov	edx, DWORD PTR _val$[ebp]
	add	edx, 48					; 00000030H
	mov	eax, DWORD PTR _s$[ebp]
	mov	WORD PTR [eax], dx
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, 2
	mov	DWORD PTR _s$[ebp], ecx
$LN2@ConvertUIn@7:
	cmp	DWORD PTR _i$[ebp], 0
	je	SHORT $LN1@ConvertUIn@7
	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	movzx	cx, BYTE PTR _temp$[ebp+eax]
	mov	edx, DWORD PTR _s$[ebp]
	mov	WORD PTR [edx], cx
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 2
	mov	DWORD PTR _s$[ebp], eax
	jmp	SHORT $LN2@ConvertUIn@7
$LN1@ConvertUIn@7:
	xor	ecx, ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	WORD PTR [edx], cx
; Line 116
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@ConvertUIn@7
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN9@ConvertUIn@7:
	DD	1
	DD	$LN8@ConvertUIn@7
$LN8@ConvertUIn@7:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN7@ConvertUIn@7
$LN7@ConvertUIn@7:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
?ConvertUInt32ToString@@YGXIPA_W@Z ENDP			; ConvertUInt32ToString
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?ConvertUInt64ToString@@YGX_KPA_W@Z		; ConvertUInt64ToString
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$ = -40						; size = 4
_temp$ = -32						; size = 24
__$ArrayPad$ = -4					; size = 4
_val$ = 8						; size = 8
_s$ = 16						; size = 4
?ConvertUInt64ToString@@YGX_KPA_W@Z PROC		; ConvertUInt64ToString
; Line 119
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 120
	cmp	DWORD PTR _val$[ebp+4], 0
	ja	SHORT $LN5@ConvertUIn@8
	jb	SHORT $LN8@ConvertUIn@8
	cmp	DWORD PTR _val$[ebp], -1
	ja	SHORT $LN5@ConvertUIn@8
$LN8@ConvertUIn@8:
; Line 122
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _val$[ebp]
	push	ecx
	call	?ConvertUInt32ToString@@YGXIPA_W@Z	; ConvertUInt32ToString
; Line 123
	jmp	$LN6@ConvertUIn@8
$LN5@ConvertUIn@8:
; Line 125
	mov	DWORD PTR _i$[ebp], 0
$LN4@ConvertUIn@8:
	cmp	DWORD PTR _val$[ebp+4], 0
	ja	SHORT $LN9@ConvertUIn@8
	cmp	DWORD PTR _val$[ebp], 10		; 0000000aH
	jb	SHORT $LN3@ConvertUIn@8
$LN9@ConvertUIn@8:
	push	0
	push	10					; 0000000aH
	mov	edx, DWORD PTR _val$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _val$[ebp]
	push	eax
	call	__aullrem
	add	eax, 48					; 00000030H
	mov	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR _temp$[ebp+ecx], al
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	push	0
	push	10					; 0000000aH
	mov	eax, DWORD PTR _val$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _val$[ebp]
	push	ecx
	call	__aulldiv
	mov	DWORD PTR _val$[ebp], eax
	mov	DWORD PTR _val$[ebp+4], edx
	jmp	SHORT $LN4@ConvertUIn@8
$LN3@ConvertUIn@8:
	mov	edx, DWORD PTR _val$[ebp]
	add	edx, 48					; 00000030H
	mov	eax, DWORD PTR _s$[ebp]
	mov	WORD PTR [eax], dx
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, 2
	mov	DWORD PTR _s$[ebp], ecx
$LN2@ConvertUIn@8:
	cmp	DWORD PTR _i$[ebp], 0
	je	SHORT $LN1@ConvertUIn@8
	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	movzx	cx, BYTE PTR _temp$[ebp+eax]
	mov	edx, DWORD PTR _s$[ebp]
	mov	WORD PTR [edx], cx
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 2
	mov	DWORD PTR _s$[ebp], eax
	jmp	SHORT $LN2@ConvertUIn@8
$LN1@ConvertUIn@8:
	xor	ecx, ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	WORD PTR [edx], cx
$LN6@ConvertUIn@8:
; Line 126
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@ConvertUIn@8
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN12@ConvertUIn@8:
	DD	1
	DD	$LN11@ConvertUIn@8
$LN11@ConvertUIn@8:
	DD	-32					; ffffffe0H
	DD	24					; 00000018H
	DD	$LN10@ConvertUIn@8
$LN10@ConvertUIn@8:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
?ConvertUInt64ToString@@YGX_KPA_W@Z ENDP		; ConvertUInt64ToString
_TEXT	ENDS
PUBLIC	?ConvertInt64ToString@@YGX_JPAD@Z		; ConvertInt64ToString
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_val$ = 8						; size = 8
_s$ = 16						; size = 4
?ConvertInt64ToString@@YGX_JPAD@Z PROC			; ConvertInt64ToString
; Line 129
	push	ebp
	mov	ebp, esp
; Line 130
	cmp	DWORD PTR _val$[ebp+4], 0
	jg	SHORT $LN1@ConvertInt
	jl	SHORT $LN4@ConvertInt
	cmp	DWORD PTR _val$[ebp], 0
	jae	SHORT $LN1@ConvertInt
$LN4@ConvertInt:
; Line 132
	mov	eax, DWORD PTR _s$[ebp]
	mov	BYTE PTR [eax], 45			; 0000002dH
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, 1
	mov	DWORD PTR _s$[ebp], ecx
; Line 133
	mov	edx, DWORD PTR _val$[ebp]
	neg	edx
	mov	eax, DWORD PTR _val$[ebp+4]
	adc	eax, 0
	neg	eax
	mov	DWORD PTR _val$[ebp], edx
	mov	DWORD PTR _val$[ebp+4], eax
$LN1@ConvertInt:
; Line 135
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	mov	edx, DWORD PTR _val$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _val$[ebp]
	push	eax
	call	?ConvertUInt64ToString@@YGX_KPAD@Z	; ConvertUInt64ToString
; Line 136
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?ConvertInt64ToString@@YGX_JPAD@Z ENDP			; ConvertInt64ToString
_TEXT	ENDS
PUBLIC	?ConvertInt64ToString@@YGX_JPA_W@Z		; ConvertInt64ToString
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_val$ = 8						; size = 8
_s$ = 16						; size = 4
?ConvertInt64ToString@@YGX_JPA_W@Z PROC			; ConvertInt64ToString
; Line 139
	push	ebp
	mov	ebp, esp
; Line 140
	cmp	DWORD PTR _val$[ebp+4], 0
	jg	SHORT $LN1@ConvertInt@2
	jl	SHORT $LN4@ConvertInt@2
	cmp	DWORD PTR _val$[ebp], 0
	jae	SHORT $LN1@ConvertInt@2
$LN4@ConvertInt@2:
; Line 142
	mov	eax, 45					; 0000002dH
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, 2
	mov	DWORD PTR _s$[ebp], edx
; Line 143
	mov	eax, DWORD PTR _val$[ebp]
	neg	eax
	mov	ecx, DWORD PTR _val$[ebp+4]
	adc	ecx, 0
	neg	ecx
	mov	DWORD PTR _val$[ebp], eax
	mov	DWORD PTR _val$[ebp+4], ecx
$LN1@ConvertInt@2:
; Line 145
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	mov	eax, DWORD PTR _val$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _val$[ebp]
	push	ecx
	call	?ConvertUInt64ToString@@YGX_KPA_W@Z	; ConvertUInt64ToString
; Line 146
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?ConvertInt64ToString@@YGX_JPA_W@Z ENDP			; ConvertInt64ToString
_TEXT	ENDS
END
