; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\C\LzFindMt.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_MtSync_Init@4
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\c\lzfindmt.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_p$ = 8							; size = 4
_MtSync_Init@4 PROC
; Line 132
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+4], 1
	pop	ebp
	ret	4
_MtSync_Init@4 ENDP
_TEXT	ENDS
PUBLIC	_BtThreadFunc@4
EXTRN	_Semaphore_Release1@4:PROC
EXTRN	_Event_Set@4:PROC
EXTRN	_Handle_WaitObject@4:PROC
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv81 = -12						; size = 4
_blockIndex$80545 = -8					; size = 4
_p$ = -4						; size = 4
_mt$ = 8						; size = 4
_BtThreadFunc@4 PROC
; Line 414
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 415
	mov	eax, DWORD PTR _mt$[ebp]
	add	eax, 44					; 0000002cH
	mov	DWORD PTR _p$[ebp], eax
$LN6@BtThreadFu:
; Line 418
	mov	DWORD PTR _blockIndex$80545[ebp], 0
; Line 419
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	_Handle_WaitObject@4
; Line 420
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	call	_Event_Set@4
$LN4@BtThreadFu:
; Line 423
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN2@BtThreadFu
; Line 424
	jmp	SHORT $LN7@BtThreadFu
$LN2@BtThreadFu:
; Line 425
	mov	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN1@BtThreadFu
; Line 427
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _blockIndex$80545[ebp]
	mov	DWORD PTR [eax+72], ecx
; Line 428
	mov	edx, DWORD PTR _mt$[ebp]
	add	edx, 296				; 00000128H
	push	edx
	call	_MtSync_StopWriting@4
; Line 429
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	call	_Event_Set@4
; Line 430
	jmp	SHORT $LN3@BtThreadFu
$LN1@BtThreadFu:
; Line 432
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	_Handle_WaitObject@4
; Line 433
	mov	eax, DWORD PTR _blockIndex$80545[ebp]
	mov	DWORD PTR tv81[ebp], eax
	mov	ecx, DWORD PTR _blockIndex$80545[ebp]
	add	ecx, 1
	mov	DWORD PTR _blockIndex$80545[ebp], ecx
	mov	edx, DWORD PTR tv81[ebp]
	push	edx
	mov	eax, DWORD PTR _mt$[ebp]
	push	eax
	call	_BtFillBlock@8
; Line 434
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 36					; 00000024H
	push	ecx
	call	_Semaphore_Release1@4
; Line 435
	jmp	SHORT $LN4@BtThreadFu
$LN3@BtThreadFu:
; Line 436
	jmp	$LN6@BtThreadFu
$LN7@BtThreadFu:
; Line 437
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_BtThreadFunc@4 ENDP
_TEXT	ENDS
EXTRN	__imp__LeaveCriticalSection@4:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv82 = -8						; size = 4
_myNumBlocks$ = -4					; size = 4
_p$ = 8							; size = 4
_MtSync_StopWriting@4 PROC
; Line 52
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 53
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	DWORD PTR _myNumBlocks$[ebp], ecx
; Line 54
	mov	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN4@MtSync_Sto
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN5@MtSync_Sto
$LN4@MtSync_Sto:
; Line 55
	jmp	$LN6@MtSync_Sto
$LN5@MtSync_Sto:
; Line 56
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+12], 1
; Line 57
	mov	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [edx+44], 0
	je	SHORT $LN3@MtSync_Sto
; Line 59
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 48					; 00000030H
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__LeaveCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 60
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+44], 0
$LN3@MtSync_Sto:
; Line 62
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 32					; 00000020H
	push	edx
	call	_Semaphore_Release1@4
; Line 64
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	call	_Handle_WaitObject@4
$LN2@MtSync_Sto:
; Line 66
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _myNumBlocks$[ebp]
	mov	ecx, DWORD PTR [edx+72]
	mov	edx, DWORD PTR _myNumBlocks$[ebp]
	add	edx, 1
	mov	DWORD PTR _myNumBlocks$[ebp], edx
	cmp	eax, ecx
	je	SHORT $LN8@MtSync_Sto
	mov	DWORD PTR tv82[ebp], 1
	jmp	SHORT $LN9@MtSync_Sto
$LN8@MtSync_Sto:
	mov	DWORD PTR tv82[ebp], 0
$LN9@MtSync_Sto:
	cmp	DWORD PTR tv82[ebp], 0
	je	SHORT $LN1@MtSync_Sto
; Line 68
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	call	_Handle_WaitObject@4
; Line 69
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 32					; 00000020H
	push	edx
	call	_Semaphore_Release1@4
; Line 70
	jmp	SHORT $LN2@MtSync_Sto
$LN1@MtSync_Sto:
; Line 71
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+4], 1
$LN6@MtSync_Sto:
; Line 72
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_MtSync_StopWriting@4 ENDP
_TEXT	ENDS
EXTRN	_MatchFinder_Normalize3@12:PROC
EXTRN	__imp__EnterCriticalSection@4:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_subValue$80534 = -8					; size = 4
_sync$ = -4						; size = 4
_p$ = 8							; size = 4
_globalBlockIndex$ = 12					; size = 4
_BtFillBlock@8 PROC
; Line 389
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 390
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 296				; 00000128H
	mov	DWORD PTR _sync$[ebp], eax
; Line 391
	mov	ecx, DWORD PTR _sync$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jne	SHORT $LN3@BtFillBloc
; Line 393
	mov	edx, DWORD PTR _sync$[ebp]
	add	edx, 48					; 00000030H
	mov	esi, esp
	push	edx
	call	DWORD PTR __imp__EnterCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 394
	mov	eax, DWORD PTR _sync$[ebp]
	mov	DWORD PTR [eax+44], 1
$LN3@BtFillBloc:
; Line 397
	mov	ecx, DWORD PTR _globalBlockIndex$[ebp]
	and	ecx, 63					; 0000003fH
	shl	ecx, 14					; 0000000eH
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+4]
	lea	ecx, DWORD PTR [eax+ecx*4]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_BtGetMatches@8
; Line 399
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+276], -16385		; ffffbfffH
	jbe	SHORT $LN2@BtFillBloc
; Line 401
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [ecx+276]
	sub	eax, DWORD PTR [edx+288]
	mov	DWORD PTR _subValue$80534[ebp], eax
; Line 402
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+288]
	shl	edx, 1
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+264]
	push	ecx
	mov	edx, DWORD PTR _subValue$80534[ebp]
	push	edx
	call	_MatchFinder_Normalize3@12
; Line 403
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+276]
	sub	ecx, DWORD PTR _subValue$80534[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+276], ecx
$LN2@BtFillBloc:
; Line 406
	mov	eax, DWORD PTR _sync$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN4@BtFillBloc
; Line 408
	mov	ecx, DWORD PTR _sync$[ebp]
	add	ecx, 48					; 00000030H
	mov	esi, esp
	push	ecx
	call	DWORD PTR __imp__LeaveCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 409
	mov	edx, DWORD PTR _sync$[ebp]
	mov	DWORD PTR [edx+44], 0
$LN4@BtFillBloc:
; Line 411
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_BtFillBlock@8 ENDP
_TEXT	ENDS
EXTRN	_GetMatchesSpec1@40:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv170 = -48						; size = 4
tv142 = -44						; size = 4
_num$80522 = -40					; size = 4
_startDistances$80521 = -36				; size = 4
_size2$80515 = -32					; size = 4
_cyclicBufferPos$80513 = -28				; size = 4
_pos$80512 = -24					; size = 4
_lenLimit$80511 = -20					; size = 4
_size$80510 = -16					; size = 4
_limit$ = -12						; size = 4
_curPos$ = -8						; size = 4
_numProcessed$ = -4					; size = 4
_p$ = 8							; size = 4
_distances$ = 12					; size = 4
_BtGetMatches@8 PROC
; Line 314
	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 315
	mov	DWORD PTR _numProcessed$[ebp], 0
; Line 316
	mov	DWORD PTR _curPos$[ebp], 2
; Line 317
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+268]
	shl	ecx, 1
	mov	edx, 16384				; 00004000H
	sub	edx, ecx
	mov	DWORD PTR _limit$[ebp], edx
; Line 319
	mov	eax, DWORD PTR _distances$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+260]
	mov	DWORD PTR [eax+4], edx
$LN13@BtGetMatch:
; Line 321
	mov	eax, DWORD PTR _curPos$[ebp]
	cmp	eax, DWORD PTR _limit$[ebp]
	jae	$LN12@BtGetMatch
; Line 323
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [ecx+252]
	cmp	eax, DWORD PTR [edx+256]
	jne	$LN11@BtGetMatch
; Line 325
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_MatchFinderMt_GetNextBlock_Hash@4
; Line 326
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _numProcessed$[ebp]
	add	eax, DWORD PTR [edx+260]
	mov	ecx, DWORD PTR _distances$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 327
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [edx+260]
	cmp	ecx, DWORD PTR [eax+272]
	jb	SHORT $LN10@BtGetMatch
; Line 328
	jmp	SHORT $LN13@BtGetMatch
$LN10@BtGetMatch:
; Line 329
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _curPos$[ebp]
	add	eax, DWORD PTR [edx+260]
	mov	ecx, DWORD PTR _distances$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 330
	mov	edx, DWORD PTR _curPos$[ebp]
	mov	eax, DWORD PTR _distances$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _distances$[ebp], ecx
; Line 331
	jmp	SHORT $LN9@BtGetMatch
$LN8@BtGetMatch:
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+260]
	sub	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+260], eax
$LN9@BtGetMatch:
	mov	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [edx+260], 0
	je	SHORT $LN7@BtGetMatch
; Line 332
	mov	eax, DWORD PTR _distances$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _distances$[ebp]
	add	ecx, 4
	mov	DWORD PTR _distances$[ebp], ecx
	jmp	SHORT $LN8@BtGetMatch
$LN7@BtGetMatch:
; Line 333
	jmp	$LN14@BtGetMatch
$LN11@BtGetMatch:
; Line 336
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [edx+256]
	sub	ecx, DWORD PTR [eax+252]
	mov	DWORD PTR _size$80510[ebp], ecx
; Line 337
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+268]
	mov	DWORD PTR _lenLimit$80511[ebp], eax
; Line 338
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+276]
	mov	DWORD PTR _pos$80512[ebp], edx
; Line 339
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	mov	DWORD PTR _cyclicBufferPos$80513[ebp], ecx
; Line 340
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _lenLimit$80511[ebp]
	cmp	eax, DWORD PTR [edx+260]
	jb	SHORT $LN6@BtGetMatch
; Line 341
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+260]
	mov	DWORD PTR _lenLimit$80511[ebp], edx
$LN6@BtGetMatch:
; Line 343
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+260]
	sub	ecx, DWORD PTR _lenLimit$80511[ebp]
	add	ecx, 1
	mov	DWORD PTR _size2$80515[ebp], ecx
; Line 344
	mov	edx, DWORD PTR _size2$80515[ebp]
	cmp	edx, DWORD PTR _size$80510[ebp]
	jae	SHORT $LN5@BtGetMatch
; Line 345
	mov	eax, DWORD PTR _size2$80515[ebp]
	mov	DWORD PTR _size$80510[ebp], eax
$LN5@BtGetMatch:
; Line 346
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+288]
	sub	edx, DWORD PTR _cyclicBufferPos$80513[ebp]
	mov	DWORD PTR _size2$80515[ebp], edx
; Line 347
	mov	eax, DWORD PTR _size2$80515[ebp]
	cmp	eax, DWORD PTR _size$80510[ebp]
	jae	SHORT $LN3@BtGetMatch
; Line 348
	mov	ecx, DWORD PTR _size2$80515[ebp]
	mov	DWORD PTR _size$80510[ebp], ecx
$LN3@BtGetMatch:
; Line 352
	mov	edx, DWORD PTR _curPos$[ebp]
	cmp	edx, DWORD PTR _limit$[ebp]
	jae	$LN2@BtGetMatch
	mov	eax, DWORD PTR _size$80510[ebp]
	mov	ecx, DWORD PTR _size$80510[ebp]
	sub	ecx, 1
	mov	DWORD PTR _size$80510[ebp], ecx
	test	eax, eax
	je	SHORT $LN16@BtGetMatch
	mov	DWORD PTR tv142[ebp], 1
	jmp	SHORT $LN17@BtGetMatch
$LN16@BtGetMatch:
	mov	DWORD PTR tv142[ebp], 0
$LN17@BtGetMatch:
	cmp	DWORD PTR tv142[ebp], 0
	je	$LN2@BtGetMatch
; Line 354
	mov	edx, DWORD PTR _curPos$[ebp]
	mov	eax, DWORD PTR _distances$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _startDistances$80521[ebp], ecx
; Line 357
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+252]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+248]
	mov	ecx, DWORD PTR _pos$80512[ebp]
	sub	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv170[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+252]
	add	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+252], eax
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+272]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _startDistances$80521[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+292]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+288]
	push	edx
	mov	eax, DWORD PTR _cyclicBufferPos$80513[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+264]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+280]
	push	ecx
	mov	edx, DWORD PTR _pos$80512[ebp]
	push	edx
	mov	eax, DWORD PTR tv170[ebp]
	push	eax
	mov	ecx, DWORD PTR _lenLimit$80511[ebp]
	push	ecx
	call	_GetMatchesSpec1@40
	sub	eax, DWORD PTR _startDistances$80521[ebp]
	sar	eax, 2
	mov	DWORD PTR _num$80522[ebp], eax
; Line 358
	mov	edx, DWORD PTR _num$80522[ebp]
	sub	edx, 1
	mov	eax, DWORD PTR _startDistances$80521[ebp]
	mov	DWORD PTR [eax], edx
; Line 359
	mov	ecx, DWORD PTR _curPos$[ebp]
	add	ecx, DWORD PTR _num$80522[ebp]
	mov	DWORD PTR _curPos$[ebp], ecx
; Line 360
	mov	edx, DWORD PTR _cyclicBufferPos$80513[ebp]
	add	edx, 1
	mov	DWORD PTR _cyclicBufferPos$80513[ebp], edx
; Line 361
	mov	eax, DWORD PTR _pos$80512[ebp]
	add	eax, 1
	mov	DWORD PTR _pos$80512[ebp], eax
; Line 362
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+280]
	add	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+280], edx
; Line 363
	jmp	$LN3@BtGetMatch
$LN2@BtGetMatch:
; Line 376
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _pos$80512[ebp]
	sub	edx, DWORD PTR [ecx+276]
	add	edx, DWORD PTR _numProcessed$[ebp]
	mov	DWORD PTR _numProcessed$[ebp], edx
; Line 377
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _pos$80512[ebp]
	sub	ecx, DWORD PTR [eax+276]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+260]
	sub	eax, ecx
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+260], eax
; Line 378
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _pos$80512[ebp]
	mov	DWORD PTR [edx+276], eax
; Line 379
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _cyclicBufferPos$80513[ebp]
	cmp	edx, DWORD PTR [ecx+288]
	jne	SHORT $LN1@BtGetMatch
; Line 380
	mov	DWORD PTR _cyclicBufferPos$80513[ebp], 0
$LN1@BtGetMatch:
; Line 381
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _cyclicBufferPos$80513[ebp]
	mov	DWORD PTR [eax+284], ecx
; Line 383
	jmp	$LN13@BtGetMatch
$LN12@BtGetMatch:
; Line 385
	mov	edx, DWORD PTR _distances$[ebp]
	mov	eax, DWORD PTR _curPos$[ebp]
	mov	DWORD PTR [edx], eax
$LN14@BtGetMatch:
; Line 386
	pop	edi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_BtGetMatches@8 ENDP
; Function compile flags: /Odtp /RTCsu
tv71 = -4						; size = 4
_p$ = 8							; size = 4
_MatchFinderMt_GetNextBlock_Hash@4 PROC
; Line 221
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 222
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 296				; 00000128H
	push	eax
	call	_MtSync_GetNextBlock@4
; Line 223
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+368]
	sub	edx, 1
	and	edx, 7
	shl	edx, 13					; 0000000dH
	mov	DWORD PTR tv71[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR tv71[ebp]
	mov	DWORD PTR [eax+252], ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR [edx+256], eax
; Line 224
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+252]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+248]
	mov	eax, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [eax+256]
	add	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+256], eax
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+252]
	add	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+252], eax
; Line 225
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+252]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+248]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR [ecx+260], edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+252]
	add	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+252], ecx
; Line 226
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_MatchFinderMt_GetNextBlock_Hash@4 ENDP
_TEXT	ENDS
EXTRN	_Event_Reset@4:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = 8							; size = 4
_MtSync_GetNextBlock@4 PROC
; Line 24
	push	ebp
	mov	ebp, esp
	push	esi
; Line 25
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@MtSync_Get
; Line 27
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+72], 1
; Line 28
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 29
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+12], 0
; Line 30
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+8], 0
; Line 31
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 24					; 00000018H
	push	edx
	call	_Event_Reset@4
; Line 32
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	call	_Event_Reset@4
; Line 34
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 20					; 00000014H
	push	ecx
	call	_Event_Set@4
; Line 35
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_Handle_WaitObject@4
; Line 37
	jmp	SHORT $LN1@MtSync_Get
$LN2@MtSync_Get:
; Line 39
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 48					; 00000030H
	mov	esi, esp
	push	ecx
	call	DWORD PTR __imp__LeaveCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 40
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+44], 0
; Line 41
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	add	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+72], ecx
; Line 42
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 32					; 00000020H
	push	eax
	call	_Semaphore_Release1@4
$LN1@MtSync_Get:
; Line 44
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	call	_Handle_WaitObject@4
; Line 45
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 48					; 00000030H
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__EnterCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 46
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+44], 1
; Line 47
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
_MtSync_GetNextBlock@4 ENDP
_TEXT	ENDS
PUBLIC	_MatchFinderMt_Construct@4
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = 8							; size = 4
_MatchFinderMt_Construct@4 PROC
; Line 440
	push	ebp
	mov	ebp, esp
; Line 441
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+248], 0
; Line 442
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 296				; 00000128H
	push	ecx
	call	_MtSync_Construct@4
; Line 443
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 44					; 0000002cH
	push	edx
	call	_MtSync_Construct@4
; Line 444
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
_MatchFinderMt_Construct@4 ENDP
; Function compile flags: /Odtp /RTCsu
_p$ = 8						; size = 4
_MtSync_Construct@4 PROC
; Line 11
	push	ebp
	mov	ebp, esp
; Line 12
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], 0
; Line 13
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+40], 0
; Line 14
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+44], 0
; Line 15
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+16], 0
; Line 16
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+20], 0
; Line 17
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+24], 0
; Line 18
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+28], 0
; Line 19
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+32], 0
; Line 20
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+36], 0
; Line 21
	pop	ebp
	ret	4
_MtSync_Construct@4 ENDP
_TEXT	ENDS
PUBLIC	_MatchFinderMt_Destruct@8
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = 8							; size = 4
_alloc$ = 12						; size = 4
_MatchFinderMt_Destruct@8 PROC
; Line 453
	push	ebp
	mov	ebp, esp
; Line 454
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 296				; 00000128H
	push	eax
	call	_MtSync_Destruct@4
; Line 455
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 44					; 0000002cH
	push	ecx
	call	_MtSync_Destruct@4
; Line 456
	mov	edx, DWORD PTR _alloc$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_MatchFinderMt_FreeMem@8
; Line 457
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_MatchFinderMt_Destruct@8 ENDP
_TEXT	ENDS
EXTRN	__imp__DeleteCriticalSection@4:PROC
EXTRN	_HandlePtr_Close@4:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = 8							; size = 4
_MtSync_Destruct@4 PROC
; Line 75
	push	ebp
	mov	ebp, esp
	push	esi
; Line 76
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN3@MtSync_Des
; Line 78
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_MtSync_StopWriting@4
; Line 79
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+8], 1
; Line 80
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@MtSync_Des
; Line 81
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 20					; 00000014H
	push	ecx
	call	_Event_Set@4
$LN2@MtSync_Des:
; Line 82
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_Handle_WaitObject@4
; Line 83
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	call	_HandlePtr_Close@4
$LN3@MtSync_Des:
; Line 85
	mov	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [edx+40], 0
	je	SHORT $LN1@MtSync_Des
; Line 87
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 48					; 00000030H
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__DeleteCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 88
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+40], 0
$LN1@MtSync_Des:
; Line 91
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 20					; 00000014H
	push	edx
	call	_HandlePtr_Close@4
; Line 92
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	call	_HandlePtr_Close@4
; Line 93
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 28					; 0000001cH
	push	ecx
	call	_HandlePtr_Close@4
; Line 94
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 32					; 00000020H
	push	edx
	call	_HandlePtr_Close@4
; Line 95
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 36					; 00000024H
	push	eax
	call	_HandlePtr_Close@4
; Line 97
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 98
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
_MtSync_Destruct@4 ENDP
; Function compile flags: /Odtp /RTCsu
_p$ = 8						; size = 4
_alloc$ = 12						; size = 4
_MatchFinderMt_FreeMem@8 PROC
; Line 447
	push	ebp
	mov	ebp, esp
	push	esi
; Line 448
	mov	esi, esp
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+248]
	push	ecx
	mov	edx, DWORD PTR _alloc$[ebp]
	push	edx
	mov	eax, DWORD PTR _alloc$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 449
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+248], 0
; Line 450
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_MatchFinderMt_FreeMem@8 ENDP
_TEXT	ENDS
PUBLIC	_MatchFinderMt_Create@24
EXTRN	_MatchFinder_Create@24:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
___result__$80606 = -12					; size = 4
___result__$80604 = -8					; size = 4
_mf$ = -4						; size = 4
_p$ = 8							; size = 4
_historySize$ = 12					; size = 4
_keepAddBufferBefore$ = 16				; size = 4
_matchMaxLen$ = 20					; size = 4
_keepAddBufferAfter$ = 24				; size = 4
_alloc$ = 28						; size = 4
_MatchFinderMt_Create@24 PROC
; Line 476
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 477
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+376]
	mov	DWORD PTR _mf$[ebp], ecx
; Line 478
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _historySize$[ebp]
	mov	DWORD PTR [edx+32], eax
; Line 479
	mov	ecx, DWORD PTR _matchMaxLen$[ebp]
	shl	ecx, 2
	cmp	ecx, 16384				; 00004000H
	jb	SHORT $LN6@MatchFinde
; Line 480
	mov	eax, 5
	jmp	$LN7@MatchFinde
$LN6@MatchFinde:
; Line 481
	mov	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [edx+248], 0
	jne	SHORT $LN5@MatchFinde
; Line 483
	mov	esi, esp
	push	4456448					; 00440000H
	mov	eax, DWORD PTR _alloc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _alloc$[ebp]
	mov	edx, DWORD PTR [ecx]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+248], eax
; Line 484
	mov	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [edx+248], 0
	jne	SHORT $LN4@MatchFinde
; Line 485
	mov	eax, 2
	jmp	$LN7@MatchFinde
$LN4@MatchFinde:
; Line 486
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+248]
	add	ecx, 262144				; 00040000H
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+4], ecx
$LN5@MatchFinde:
; Line 488
	mov	eax, DWORD PTR _keepAddBufferBefore$[ebp]
	add	eax, 1114112				; 00110000H
	mov	DWORD PTR _keepAddBufferBefore$[ebp], eax
; Line 489
	mov	ecx, DWORD PTR _keepAddBufferAfter$[ebp]
	add	ecx, 8192				; 00002000H
	mov	DWORD PTR _keepAddBufferAfter$[ebp], ecx
; Line 490
	mov	edx, DWORD PTR _alloc$[ebp]
	push	edx
	mov	eax, DWORD PTR _keepAddBufferAfter$[ebp]
	push	eax
	mov	ecx, DWORD PTR _matchMaxLen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _keepAddBufferBefore$[ebp]
	push	edx
	mov	eax, DWORD PTR _historySize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mf$[ebp]
	push	ecx
	call	_MatchFinder_Create@24
	test	eax, eax
	jne	SHORT $LN3@MatchFinde
; Line 491
	mov	eax, 2
	jmp	SHORT $LN7@MatchFinde
$LN3@MatchFinde:
; Line 493
	push	8
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	push	OFFSET _HashThreadFunc2@4
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 296				; 00000128H
	push	eax
	call	_MtSync_Create@16
	mov	DWORD PTR ___result__$80604[ebp], eax
	cmp	DWORD PTR ___result__$80604[ebp], 0
	je	SHORT $LN2@MatchFinde
	mov	eax, DWORD PTR ___result__$80604[ebp]
	jmp	SHORT $LN7@MatchFinde
$LN2@MatchFinde:
; Line 494
	push	64					; 00000040H
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	push	OFFSET _BtThreadFunc2@4
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 44					; 0000002cH
	push	edx
	call	_MtSync_Create@16
	mov	DWORD PTR ___result__$80606[ebp], eax
	cmp	DWORD PTR ___result__$80606[ebp], 0
	je	SHORT $LN1@MatchFinde
	mov	eax, DWORD PTR ___result__$80606[ebp]
	jmp	SHORT $LN7@MatchFinde
$LN1@MatchFinde:
; Line 495
	xor	eax, eax
$LN7@MatchFinde:
; Line 496
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
_MatchFinderMt_Create@24 ENDP
; Function compile flags: /Odtp /RTCsu
_res$ = -4						; size = 4
_p$ = 8							; size = 4
_startAddress$ = 12					; size = 4
_obj$ = 16						; size = 4
_numBlocks$ = 20					; size = 4
_MtSync_Create@16 PROC
; Line 125
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 126
	mov	eax, DWORD PTR _numBlocks$[ebp]
	push	eax
	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _startAddress$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_MtSync_Create2@16
	mov	DWORD PTR _res$[ebp], eax
; Line 127
	cmp	DWORD PTR _res$[ebp], 0
	je	SHORT $LN1@MtSync_Cre
; Line 128
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_MtSync_Destruct@4
$LN1@MtSync_Cre:
; Line 129
	mov	eax, DWORD PTR _res$[ebp]
; Line 130
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_MtSync_Create@16 ENDP
_TEXT	ENDS
EXTRN	_Thread_Create@12:PROC
EXTRN	_Semaphore_Create@12:PROC
EXTRN	_AutoResetEvent_CreateNotSignaled@4:PROC
EXTRN	_CriticalSection_Init@4:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = 8							; size = 4
_startAddress$ = 12					; size = 4
_obj$ = 16						; size = 4
_numBlocks$ = 20					; size = 4
_MtSync_Create2@16 PROC
; Line 103
	push	ebp
	mov	ebp, esp
; Line 104
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN8@MtSync_Cre@2
; Line 105
	xor	eax, eax
	jmp	$LN9@MtSync_Cre@2
$LN8@MtSync_Cre@2:
; Line 107
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 48					; 00000030H
	push	ecx
	call	_CriticalSection_Init@4
	test	eax, eax
	je	SHORT $LN7@MtSync_Cre@2
	mov	eax, 12					; 0000000cH
	jmp	$LN9@MtSync_Cre@2
$LN7@MtSync_Cre@2:
; Line 108
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+40], 1
; Line 110
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	call	_AutoResetEvent_CreateNotSignaled@4
	test	eax, eax
	je	SHORT $LN6@MtSync_Cre@2
	mov	eax, 12					; 0000000cH
	jmp	$LN9@MtSync_Cre@2
$LN6@MtSync_Cre@2:
; Line 111
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 24					; 00000018H
	push	ecx
	call	_AutoResetEvent_CreateNotSignaled@4
	test	eax, eax
	je	SHORT $LN5@MtSync_Cre@2
	mov	eax, 12					; 0000000cH
	jmp	$LN9@MtSync_Cre@2
$LN5@MtSync_Cre@2:
; Line 112
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 28					; 0000001cH
	push	edx
	call	_AutoResetEvent_CreateNotSignaled@4
	test	eax, eax
	je	SHORT $LN4@MtSync_Cre@2
	mov	eax, 12					; 0000000cH
	jmp	SHORT $LN9@MtSync_Cre@2
$LN4@MtSync_Cre@2:
; Line 114
	mov	eax, DWORD PTR _numBlocks$[ebp]
	push	eax
	mov	ecx, DWORD PTR _numBlocks$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 32					; 00000020H
	push	edx
	call	_Semaphore_Create@12
	test	eax, eax
	je	SHORT $LN3@MtSync_Cre@2
	mov	eax, 12					; 0000000cH
	jmp	SHORT $LN9@MtSync_Cre@2
$LN3@MtSync_Cre@2:
; Line 115
	mov	eax, DWORD PTR _numBlocks$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 36					; 00000024H
	push	ecx
	call	_Semaphore_Create@12
	test	eax, eax
	je	SHORT $LN2@MtSync_Cre@2
	mov	eax, 12					; 0000000cH
	jmp	SHORT $LN9@MtSync_Cre@2
$LN2@MtSync_Cre@2:
; Line 117
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+4], 1
; Line 119
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _startAddress$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 16					; 00000010H
	push	edx
	call	_Thread_Create@12
	test	eax, eax
	je	SHORT $LN1@MtSync_Cre@2
	mov	eax, 12					; 0000000cH
	jmp	SHORT $LN9@MtSync_Cre@2
$LN1@MtSync_Cre@2:
; Line 120
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], 1
; Line 121
	xor	eax, eax
$LN9@MtSync_Cre@2:
; Line 122
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	16					; 00000010H
_MtSync_Create2@16 ENDP
; Function compile flags: /Odtp /RTCsu
_p$ = 8						; size = 4
_HashThreadFunc2@4 PROC
; Line 462
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_HashThreadFunc@4
	xor	eax, eax
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
_HashThreadFunc2@4 ENDP
_TEXT	ENDS
EXTRN	_MatchFinder_ReduceOffsets@8:PROC
EXTRN	_MatchFinder_ReadIfRequired@4:PROC
EXTRN	_MatchFinder_MoveBlock@4:PROC
EXTRN	_MatchFinder_GetPointerToCurrentPos@4:PROC
EXTRN	_MatchFinder_NeedMove@4:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_num$80486 = -32					; size = 4
_heads$80485 = -28					; size = 4
_subValue$80483 = -24					; size = 4
_afterPtr$80481 = -20					; size = 4
_beforePtr$80480 = -16					; size = 4
_mf$80478 = -12						; size = 4
_numProcessedBlocks$80472 = -8				; size = 4
_p$ = -4						; size = 4
_mt$ = 8						; size = 4
_HashThreadFunc@4 PROC
; Line 151
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 152
	mov	eax, DWORD PTR _mt$[ebp]
	add	eax, 296				; 00000128H
	mov	DWORD PTR _p$[ebp], eax
$LN10@HashThread:
; Line 155
	mov	DWORD PTR _numProcessedBlocks$80472[ebp], 0
; Line 156
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	_Handle_WaitObject@4
; Line 157
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	call	_Event_Set@4
$LN8@HashThread:
; Line 160
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN6@HashThread
; Line 161
	jmp	$LN11@HashThread
$LN6@HashThread:
; Line 162
	mov	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN5@HashThread
; Line 164
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _numProcessedBlocks$80472[ebp]
	mov	DWORD PTR [eax+72], ecx
; Line 165
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 28					; 0000001cH
	push	edx
	call	_Event_Set@4
; Line 166
	jmp	$LN7@HashThread
$LN5@HashThread:
; Line 170
	mov	eax, DWORD PTR _mt$[ebp]
	mov	ecx, DWORD PTR [eax+376]
	mov	DWORD PTR _mf$80478[ebp], ecx
; Line 171
	mov	edx, DWORD PTR _mf$80478[ebp]
	push	edx
	call	_MatchFinder_NeedMove@4
	test	eax, eax
	je	$LN4@HashThread
; Line 173
	mov	eax, DWORD PTR _mt$[ebp]
	add	eax, 92					; 0000005cH
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__EnterCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 174
	mov	ecx, DWORD PTR _mt$[ebp]
	add	ecx, 344				; 00000158H
	mov	esi, esp
	push	ecx
	call	DWORD PTR __imp__EnterCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 176
	mov	edx, DWORD PTR _mf$80478[ebp]
	push	edx
	call	_MatchFinder_GetPointerToCurrentPos@4
	mov	DWORD PTR _beforePtr$80480[ebp], eax
; Line 178
	mov	eax, DWORD PTR _mf$80478[ebp]
	push	eax
	call	_MatchFinder_MoveBlock@4
; Line 179
	mov	ecx, DWORD PTR _mf$80478[ebp]
	push	ecx
	call	_MatchFinder_GetPointerToCurrentPos@4
	mov	DWORD PTR _afterPtr$80481[ebp], eax
; Line 180
	mov	edx, DWORD PTR _beforePtr$80480[ebp]
	sub	edx, DWORD PTR _afterPtr$80481[ebp]
	mov	eax, DWORD PTR _mt$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, edx
	mov	edx, DWORD PTR _mt$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 181
	mov	eax, DWORD PTR _beforePtr$80480[ebp]
	sub	eax, DWORD PTR _afterPtr$80481[ebp]
	mov	ecx, DWORD PTR _mt$[ebp]
	mov	edx, DWORD PTR [ecx+280]
	sub	edx, eax
	mov	eax, DWORD PTR _mt$[ebp]
	mov	DWORD PTR [eax+280], edx
; Line 183
	mov	ecx, DWORD PTR _mt$[ebp]
	add	ecx, 92					; 0000005cH
	mov	esi, esp
	push	ecx
	call	DWORD PTR __imp__LeaveCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 184
	mov	edx, DWORD PTR _mt$[ebp]
	add	edx, 344				; 00000158H
	mov	esi, esp
	push	edx
	call	DWORD PTR __imp__LeaveCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 185
	jmp	$LN8@HashThread
$LN4@HashThread:
; Line 188
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	_Handle_WaitObject@4
; Line 190
	mov	edx, DWORD PTR _mf$80478[ebp]
	push	edx
	call	_MatchFinder_ReadIfRequired@4
; Line 191
	mov	eax, DWORD PTR _mf$80478[ebp]
	cmp	DWORD PTR [eax+4], -8193		; ffffdfffH
	jbe	SHORT $LN3@HashThread
; Line 193
	mov	ecx, DWORD PTR _mf$80478[ebp]
	mov	edx, DWORD PTR _mf$80478[ebp]
	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [edx+80]
	sub	eax, 1
	mov	DWORD PTR _subValue$80483[ebp], eax
; Line 194
	mov	ecx, DWORD PTR _subValue$80483[ebp]
	push	ecx
	mov	edx, DWORD PTR _mf$80478[ebp]
	push	edx
	call	_MatchFinder_ReduceOffsets@8
; Line 195
	mov	eax, DWORD PTR _mf$80478[ebp]
	mov	ecx, DWORD PTR [eax+44]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _mf$80478[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR _mf$80478[ebp]
	mov	edx, DWORD PTR [ecx+36]
	lea	eax, DWORD PTR [edx+eax*4]
	push	eax
	mov	ecx, DWORD PTR _subValue$80483[ebp]
	push	ecx
	call	_MatchFinder_Normalize3@12
$LN3@HashThread:
; Line 198
	mov	edx, DWORD PTR _numProcessedBlocks$80472[ebp]
	and	edx, 7
	shl	edx, 13					; 0000000dH
	mov	eax, DWORD PTR _mt$[ebp]
	mov	ecx, DWORD PTR [eax+248]
	lea	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _heads$80485[ebp], edx
	mov	eax, DWORD PTR _numProcessedBlocks$80472[ebp]
	add	eax, 1
	mov	DWORD PTR _numProcessedBlocks$80472[ebp], eax
; Line 199
	mov	ecx, DWORD PTR _mf$80478[ebp]
	mov	edx, DWORD PTR _mf$80478[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _num$80486[ebp], eax
; Line 200
	mov	ecx, DWORD PTR _heads$80485[ebp]
	mov	DWORD PTR [ecx], 2
; Line 201
	mov	edx, DWORD PTR _heads$80485[ebp]
	mov	eax, DWORD PTR _num$80486[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 202
	mov	ecx, DWORD PTR _mf$80478[ebp]
	mov	edx, DWORD PTR _num$80486[ebp]
	cmp	edx, DWORD PTR [ecx+72]
	jb	SHORT $LN2@HashThread
; Line 204
	mov	eax, DWORD PTR _mf$80478[ebp]
	mov	ecx, DWORD PTR _num$80486[ebp]
	sub	ecx, DWORD PTR [eax+72]
	add	ecx, 1
	mov	DWORD PTR _num$80486[ebp], ecx
; Line 205
	cmp	DWORD PTR _num$80486[ebp], 8190		; 00001ffeH
	jbe	SHORT $LN1@HashThread
; Line 206
	mov	DWORD PTR _num$80486[ebp], 8190		; 00001ffeH
$LN1@HashThread:
; Line 207
	mov	edx, DWORD PTR _mf$80478[ebp]
	add	edx, 96					; 00000060H
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _num$80486[ebp]
	push	eax
	mov	ecx, DWORD PTR _heads$80485[ebp]
	add	ecx, 8
	push	ecx
	mov	edx, DWORD PTR _mf$80478[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	mov	ecx, DWORD PTR _mf$80478[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	eax, DWORD PTR _mf$80478[ebp]
	mov	ecx, DWORD PTR [eax+36]
	lea	edx, DWORD PTR [ecx+edx*4]
	push	edx
	mov	eax, DWORD PTR _mf$80478[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _mf$80478[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _mt$[ebp]
	mov	edx, DWORD PTR [ecx+372]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 208
	mov	eax, DWORD PTR _heads$80485[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _num$80486[ebp]
	mov	edx, DWORD PTR _heads$80485[ebp]
	mov	DWORD PTR [edx], ecx
$LN2@HashThread:
; Line 210
	mov	eax, DWORD PTR _mf$80478[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _num$80486[ebp]
	mov	edx, DWORD PTR _mf$80478[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 211
	mov	eax, DWORD PTR _mf$80478[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _num$80486[ebp]
	mov	edx, DWORD PTR _mf$80478[ebp]
	mov	DWORD PTR [edx], ecx
; Line 215
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 36					; 00000024H
	push	eax
	call	_Semaphore_Release1@4
; Line 216
	jmp	$LN8@HashThread
$LN7@HashThread:
; Line 217
	jmp	$LN10@HashThread
$LN11@HashThread:
; Line 218
	pop	esi
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_HashThreadFunc@4 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$ = -400						; size = 4
_allocaDummy$ = -392					; size = 384
__$ArrayPad$ = -4					; size = 4
_p$ = 8							; size = 4
_BtThreadFunc2@4 PROC
; Line 464
	push	ebp
	mov	ebp, esp
	sub	esp, 400				; 00000190H
	push	edi
	lea	edi, DWORD PTR [ebp-400]
	mov	ecx, 100				; 00000064H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 466
	mov	DWORD PTR _i$[ebp], 0
; Line 467
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@BtThreadFu@2
$LN3@BtThreadFu@2:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@BtThreadFu@2:
	cmp	DWORD PTR _i$[ebp], 16			; 00000010H
	jae	SHORT $LN2@BtThreadFu@2
; Line 468
	mov	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR _allocaDummy$[ebp+ecx], 0
	jmp	SHORT $LN3@BtThreadFu@2
$LN2@BtThreadFu@2:
; Line 469
	movzx	edx, BYTE PTR _allocaDummy$[ebp]
	test	edx, edx
	jne	SHORT $LN1@BtThreadFu@2
; Line 470
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_BtThreadFunc@4
$LN1@BtThreadFu@2:
; Line 471
	xor	eax, eax
; Line 472
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@BtThreadFu@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 400				; 00000190H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN9@BtThreadFu@2:
	DD	1
	DD	$LN8@BtThreadFu@2
$LN8@BtThreadFu@2:
	DD	-392					; fffffe78H
	DD	384					; 00000180H
	DD	$LN7@BtThreadFu@2
$LN7@BtThreadFu@2:
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	68					; 00000044H
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	109					; 0000006dH
	DB	121					; 00000079H
	DB	0
_BtThreadFunc2@4 ENDP
_TEXT	ENDS
PUBLIC	_MatchFinderMt_Init@4
EXTRN	_MatchFinder_Init@4:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_mf$ = -4						; size = 4
_p$ = 8							; size = 4
_MatchFinderMt_Init@4 PROC
; Line 500
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 501
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+376]
	mov	DWORD PTR _mf$[ebp], ecx
; Line 502
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+12], 0
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 503
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+256], 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+252], 0
; Line 504
	mov	eax, DWORD PTR _mf$[ebp]
	push	eax
	call	_MatchFinder_Init@4
; Line 505
	mov	ecx, DWORD PTR _mf$[ebp]
	push	ecx
	call	_MatchFinder_GetPointerToCurrentPos@4
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 506
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+20], 0
; Line 507
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	add	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+16], edx
; Line 509
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _mf$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR [ecx+24], eax
; Line 510
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _mf$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	DWORD PTR [ecx+28], eax
; Line 511
	mov	ecx, DWORD PTR _mf$[ebp]
	add	ecx, 96					; 00000060H
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+36], ecx
; Line 513
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _mf$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR [eax+264], edx
; Line 514
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _mf$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+268], edx
; Line 515
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _mf$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR [eax+272], edx
; Line 516
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _mf$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+276], edx
; Line 517
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _mf$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+280], edx
; Line 518
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _mf$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+284], edx
; Line 519
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _mf$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+288], edx
; Line 520
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _mf$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR [eax+292], edx
; Line 521
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_MatchFinderMt_Init@4 ENDP
_TEXT	ENDS
PUBLIC	_MatchFinderMt_ReleaseStream@4
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = 8							; size = 4
_MatchFinderMt_ReleaseStream@4 PROC
; Line 525
	push	ebp
	mov	ebp, esp
; Line 526
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 44					; 0000002cH
	push	eax
	call	_MtSync_StopWriting@4
; Line 528
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
_MatchFinderMt_ReleaseStream@4 ENDP
_TEXT	ENDS
PUBLIC	_MatchFinderMt_CreateVTable@8
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv82 = -8						; size = 4
tv69 = -4						; size = 4
_p$ = 8							; size = 4
_vTable$ = 12						; size = 4
_MatchFinderMt_CreateVTable@8 PROC
; Line 767
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 768
	mov	eax, DWORD PTR _vTable$[ebp]
	mov	DWORD PTR [eax], OFFSET _MatchFinderMt_Init@4
; Line 769
	mov	ecx, DWORD PTR _vTable$[ebp]
	mov	DWORD PTR [ecx+4], OFFSET _MatchFinderMt_GetNumAvailableBytes@4
; Line 770
	mov	edx, DWORD PTR _vTable$[ebp]
	mov	DWORD PTR [edx+8], OFFSET _MatchFinderMt_GetPointerToCurrentPos@4
; Line 771
	mov	eax, DWORD PTR _vTable$[ebp]
	mov	DWORD PTR [eax+12], OFFSET _MatchFinderMt_GetMatches@8
; Line 773
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+376]
	mov	eax, DWORD PTR [edx+72]
	mov	DWORD PTR tv69[ebp], eax
	cmp	DWORD PTR tv69[ebp], 2
	je	SHORT $LN3@MatchFinde@2
	cmp	DWORD PTR tv69[ebp], 3
	je	SHORT $LN2@MatchFinde@2
	jmp	SHORT $LN1@MatchFinde@2
$LN3@MatchFinde@2:
; Line 776
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+372], OFFSET _GetHeads2@28
; Line 777
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+40], 0
; Line 778
	mov	eax, DWORD PTR _vTable$[ebp]
	mov	DWORD PTR [eax+16], OFFSET _MatchFinderMt0_Skip@8
; Line 779
	mov	ecx, DWORD PTR _vTable$[ebp]
	mov	DWORD PTR [ecx+12], OFFSET _MatchFinderMt2_GetMatches@8
; Line 780
	jmp	SHORT $LN6@MatchFinde@2
$LN2@MatchFinde@2:
; Line 782
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+372], OFFSET _GetHeads3@28
; Line 783
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+40], OFFSET _MixMatches2@12
; Line 784
	mov	ecx, DWORD PTR _vTable$[ebp]
	mov	DWORD PTR [ecx+16], OFFSET _MatchFinderMt2_Skip@8
; Line 785
	jmp	SHORT $LN6@MatchFinde@2
$LN1@MatchFinde@2:
; Line 788
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+376]
	movzx	ecx, BYTE PTR [eax+30]
	test	ecx, ecx
	je	SHORT $LN8@MatchFinde@2
	mov	DWORD PTR tv82[ebp], OFFSET _GetHeads4b@28
	jmp	SHORT $LN9@MatchFinde@2
$LN8@MatchFinde@2:
	mov	DWORD PTR tv82[ebp], OFFSET _GetHeads4@28
$LN9@MatchFinde@2:
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR tv82[ebp]
	mov	DWORD PTR [edx+372], eax
; Line 789
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+40], OFFSET _MixMatches3@12
; Line 790
	mov	edx, DWORD PTR _vTable$[ebp]
	mov	DWORD PTR [edx+16], OFFSET _MatchFinderMt3_Skip@8
$LN6@MatchFinde@2:
; Line 800
	mov	esp, ebp
	pop	ebp
	ret	8
_MatchFinderMt_CreateVTable@8 ENDP
; Function compile flags: /Odtp /RTCsu
_value$80398 = -4					; size = 4
_p$ = 8							; size = 4
_pos$ = 12						; size = 4
_hash$ = 16						; size = 4
_hashMask$ = 20						; size = 4
_heads$ = 24						; size = 4
_numHeads$ = 28						; size = 4
_crc$ = 32						; size = 4
_GetHeads2@28 PROC
; Line 144
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	jmp	SHORT $LN3@GetHeads2
$LN2@GetHeads2:
	mov	eax, DWORD PTR _numHeads$[ebp]
	sub	eax, 1
	mov	DWORD PTR _numHeads$[ebp], eax
$LN3@GetHeads2:
	cmp	DWORD PTR _numHeads$[ebp], 0
	je	SHORT $LN4@GetHeads2
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	shl	ecx, 8
	or	edx, ecx
	mov	DWORD PTR _value$80398[ebp], edx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
	mov	eax, DWORD PTR _value$80398[ebp]
	mov	ecx, DWORD PTR _hash$[ebp]
	mov	edx, DWORD PTR _pos$[ebp]
	sub	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _heads$[ebp]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR _heads$[ebp]
	add	ecx, 4
	mov	DWORD PTR _heads$[ebp], ecx
	mov	edx, DWORD PTR _value$80398[ebp]
	mov	eax, DWORD PTR _hash$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	mov	DWORD PTR [eax+edx*4], ecx
	mov	edx, DWORD PTR _pos$[ebp]
	add	edx, 1
	mov	DWORD PTR _pos$[ebp], edx
	jmp	SHORT $LN2@GetHeads2
$LN4@GetHeads2:
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
_GetHeads2@28 ENDP
; Function compile flags: /Odtp /RTCsu
_value$80419 = -4					; size = 4
_p$ = 8							; size = 4
_pos$ = 12						; size = 4
_hash$ = 16						; size = 4
_hashMask$ = 20						; size = 4
_heads$ = 24						; size = 4
_numHeads$ = 28						; size = 4
_crc$ = 32						; size = 4
_GetHeads3@28 PROC
; Line 145
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	jmp	SHORT $LN3@GetHeads3
$LN2@GetHeads3:
	mov	eax, DWORD PTR _numHeads$[ebp]
	sub	eax, 1
	mov	DWORD PTR _numHeads$[ebp], eax
$LN3@GetHeads3:
	cmp	DWORD PTR _numHeads$[ebp], 0
	je	SHORT $LN4@GetHeads3
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	mov	eax, DWORD PTR _crc$[ebp]
	xor	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+2]
	shl	eax, 8
	xor	ecx, eax
	and	ecx, DWORD PTR _hashMask$[ebp]
	mov	DWORD PTR _value$80419[ebp], ecx
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, DWORD PTR _value$80419[ebp]
	mov	eax, DWORD PTR _hash$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	sub	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _heads$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR _heads$[ebp]
	add	eax, 4
	mov	DWORD PTR _heads$[ebp], eax
	mov	ecx, DWORD PTR _value$80419[ebp]
	mov	edx, DWORD PTR _hash$[ebp]
	mov	eax, DWORD PTR _pos$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
	mov	ecx, DWORD PTR _pos$[ebp]
	add	ecx, 1
	mov	DWORD PTR _pos$[ebp], ecx
	jmp	SHORT $LN2@GetHeads3
$LN4@GetHeads3:
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
_GetHeads3@28 ENDP
; Function compile flags: /Odtp /RTCsu
_value$80440 = -4					; size = 4
_p$ = 8							; size = 4
_pos$ = 12						; size = 4
_hash$ = 16						; size = 4
_hashMask$ = 20						; size = 4
_heads$ = 24						; size = 4
_numHeads$ = 28						; size = 4
_crc$ = 32						; size = 4
_GetHeads4@28 PROC
; Line 146
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	jmp	SHORT $LN3@GetHeads4
$LN2@GetHeads4:
	mov	eax, DWORD PTR _numHeads$[ebp]
	sub	eax, 1
	mov	DWORD PTR _numHeads$[ebp], eax
$LN3@GetHeads4:
	cmp	DWORD PTR _numHeads$[ebp], 0
	je	SHORT $LN4@GetHeads4
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	mov	eax, DWORD PTR _crc$[ebp]
	xor	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+2]
	shl	eax, 8
	xor	ecx, eax
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+3]
	mov	edx, DWORD PTR _crc$[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	shl	eax, 5
	xor	ecx, eax
	and	ecx, DWORD PTR _hashMask$[ebp]
	mov	DWORD PTR _value$80440[ebp], ecx
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, DWORD PTR _value$80440[ebp]
	mov	eax, DWORD PTR _hash$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	sub	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _heads$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR _heads$[ebp]
	add	eax, 4
	mov	DWORD PTR _heads$[ebp], eax
	mov	ecx, DWORD PTR _value$80440[ebp]
	mov	edx, DWORD PTR _hash$[ebp]
	mov	eax, DWORD PTR _pos$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
	mov	ecx, DWORD PTR _pos$[ebp]
	add	ecx, 1
	mov	DWORD PTR _pos$[ebp], ecx
	jmp	SHORT $LN2@GetHeads4
$LN4@GetHeads4:
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
_GetHeads4@28 ENDP
; Function compile flags: /Odtp /RTCsu
_value$80461 = -4					; size = 4
_p$ = 8							; size = 4
_pos$ = 12						; size = 4
_hash$ = 16						; size = 4
_hashMask$ = 20						; size = 4
_heads$ = 24						; size = 4
_numHeads$ = 28						; size = 4
_crc$ = 32						; size = 4
_GetHeads4b@28 PROC
; Line 147
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	jmp	SHORT $LN3@GetHeads4b
$LN2@GetHeads4b:
	mov	eax, DWORD PTR _numHeads$[ebp]
	sub	eax, 1
	mov	DWORD PTR _numHeads$[ebp], eax
$LN3@GetHeads4b:
	cmp	DWORD PTR _numHeads$[ebp], 0
	je	SHORT $LN4@GetHeads4b
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	mov	eax, DWORD PTR _crc$[ebp]
	xor	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+2]
	shl	eax, 8
	xor	ecx, eax
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+3]
	shl	eax, 16					; 00000010H
	xor	ecx, eax
	and	ecx, DWORD PTR _hashMask$[ebp]
	mov	DWORD PTR _value$80461[ebp], ecx
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
	mov	edx, DWORD PTR _value$80461[ebp]
	mov	eax, DWORD PTR _hash$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	sub	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _heads$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR _heads$[ebp]
	add	eax, 4
	mov	DWORD PTR _heads$[ebp], eax
	mov	ecx, DWORD PTR _value$80461[ebp]
	mov	edx, DWORD PTR _hash$[ebp]
	mov	eax, DWORD PTR _pos$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
	mov	ecx, DWORD PTR _pos$[ebp]
	add	ecx, 1
	mov	DWORD PTR _pos$[ebp], ecx
	jmp	SHORT $LN2@GetHeads4b
$LN4@GetHeads4b:
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
_GetHeads4b@28 ENDP
; Function compile flags: /Odtp /RTCsu
_p$ = 8						; size = 4
_MatchFinderMt_GetPointerToCurrentPos@4 PROC
; Line 549
	push	ebp
	mov	ebp, esp
; Line 550
	mov	eax, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [eax]
; Line 551
	pop	ebp
	ret	4
_MatchFinderMt_GetPointerToCurrentPos@4 ENDP
; Function compile flags: /Odtp /RTCsu
_p$ = 8						; size = 4
_MatchFinderMt_GetNumAvailableBytes@4 PROC
; Line 556
	push	ebp
	mov	ebp, esp
; Line 557
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+12]
	jne	SHORT $LN1@MatchFinde@3
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_MatchFinderMt_GetNextBlock_Bt@4
$LN1@MatchFinde@3:
; Line 558
	mov	ecx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [ecx+20]
; Line 559
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
_MatchFinderMt_GetNumAvailableBytes@4 ENDP
; Function compile flags: /Odtp /RTCsu
tv71 = -8						; size = 4
_blockIndex$ = -4					; size = 4
_p$ = 8							; size = 4
_MatchFinderMt_GetNextBlock_Bt@4 PROC
; Line 537
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 539
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 44					; 0000002cH
	push	eax
	call	_MtSync_GetNextBlock@4
; Line 540
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	sub	edx, 1
	and	edx, 63					; 0000003fH
	mov	DWORD PTR _blockIndex$[ebp], edx
; Line 541
	mov	eax, DWORD PTR _blockIndex$[ebp]
	shl	eax, 14					; 0000000eH
	mov	DWORD PTR tv71[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR tv71[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR tv71[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 542
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	add	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 543
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR [edx+20], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+8], edx
; Line 544
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [ecx+16], -16385		; ffffbfffH
	jb	SHORT $LN2@MatchFinde@4
; Line 545
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_MatchFinderMt_Normalize@4
$LN2@MatchFinde@4:
; Line 546
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_MatchFinderMt_GetNextBlock_Bt@4 ENDP
; Function compile flags: /Odtp /RTCsu
_p$ = 8						; size = 4
_MatchFinderMt_Normalize@4 PROC
; Line 531
	push	ebp
	mov	ebp, esp
; Line 532
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [ecx+16]
	sub	eax, DWORD PTR [edx+32]
	sub	eax, 1
	push	eax
	call	_MatchFinder_Normalize3@12
; Line 533
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	add	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+16], edx
; Line 534
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
_MatchFinderMt_Normalize@4 ENDP
; Function compile flags: /Odtp /RTCsu
_lzPos$ = -20						; size = 4
_cur$ = -16						; size = 4
_hash$ = -12						; size = 4
_curMatch2$ = -8					; size = 4
_h2$ = -4						; size = 4
_p$ = 8							; size = 4
_matchMinPos$ = 12					; size = 4
_distances$ = 16					; size = 4
_MixMatches2@12 PROC
; Line 562
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 564
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _hash$[ebp], ecx
; Line 565
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _cur$[ebp], eax
; Line 566
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _lzPos$[ebp], edx
; Line 567
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [edx+1]
	xor	edx, DWORD PTR [eax+ecx*4]
	and	edx, 1023				; 000003ffH
	mov	DWORD PTR _h2$[ebp], edx
; Line 569
	mov	eax, DWORD PTR _h2$[ebp]
	mov	ecx, DWORD PTR _hash$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _curMatch2$[ebp], edx
; Line 570
	mov	eax, DWORD PTR _h2$[ebp]
	mov	ecx, DWORD PTR _hash$[ebp]
	mov	edx, DWORD PTR _lzPos$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
; Line 572
	mov	eax, DWORD PTR _curMatch2$[ebp]
	cmp	eax, DWORD PTR _matchMinPos$[ebp]
	jb	SHORT $LN2@MixMatches
; Line 573
	mov	ecx, DWORD PTR _curMatch2$[ebp]
	sub	ecx, DWORD PTR _lzPos$[ebp]
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	eax, edx
	jne	SHORT $LN2@MixMatches
; Line 575
	mov	eax, DWORD PTR _distances$[ebp]
	mov	DWORD PTR [eax], 2
	mov	ecx, DWORD PTR _distances$[ebp]
	add	ecx, 4
	mov	DWORD PTR _distances$[ebp], ecx
; Line 576
	mov	edx, DWORD PTR _lzPos$[ebp]
	sub	edx, DWORD PTR _curMatch2$[ebp]
	sub	edx, 1
	mov	eax, DWORD PTR _distances$[ebp]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR _distances$[ebp]
	add	ecx, 4
	mov	DWORD PTR _distances$[ebp], ecx
$LN2@MixMatches:
; Line 579
	mov	eax, DWORD PTR _distances$[ebp]
; Line 580
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_MixMatches2@12 ENDP
; Function compile flags: /Odtp /RTCsu
_temp$80666 = -32					; size = 4
_lzPos$ = -28						; size = 4
_cur$ = -24						; size = 4
_hash$ = -20						; size = 4
_curMatch3$ = -16					; size = 4
_curMatch2$ = -12					; size = 4
_h3$ = -8						; size = 4
_h2$ = -4						; size = 4
_p$ = 8							; size = 4
_matchMinPos$ = 12					; size = 4
_distances$ = 16					; size = 4
_MixMatches3@12 PROC
; Line 583
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 585
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _hash$[ebp], ecx
; Line 586
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _cur$[ebp], eax
; Line 587
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _lzPos$[ebp], edx
; Line 588
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [edx+1]
	xor	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _temp$80666[ebp], edx
	mov	eax, DWORD PTR _temp$80666[ebp]
	and	eax, 1023				; 000003ffH
	mov	DWORD PTR _h2$[ebp], eax
	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx+2]
	shl	edx, 8
	xor	edx, DWORD PTR _temp$80666[ebp]
	and	edx, 65535				; 0000ffffH
	mov	DWORD PTR _h3$[ebp], edx
; Line 590
	mov	eax, DWORD PTR _h2$[ebp]
	mov	ecx, DWORD PTR _hash$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _curMatch2$[ebp], edx
; Line 591
	mov	eax, DWORD PTR _h3$[ebp]
	mov	ecx, DWORD PTR _hash$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+4096]
	mov	DWORD PTR _curMatch3$[ebp], edx
; Line 593
	mov	eax, DWORD PTR _h2$[ebp]
	mov	ecx, DWORD PTR _hash$[ebp]
	mov	edx, DWORD PTR _lzPos$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
; Line 594
	mov	eax, DWORD PTR _h3$[ebp]
	mov	ecx, DWORD PTR _hash$[ebp]
	mov	edx, DWORD PTR _lzPos$[ebp]
	mov	DWORD PTR [ecx+eax*4+4096], edx
; Line 596
	mov	eax, DWORD PTR _curMatch2$[ebp]
	cmp	eax, DWORD PTR _matchMinPos$[ebp]
	jb	SHORT $LN3@MixMatches@2
	mov	ecx, DWORD PTR _curMatch2$[ebp]
	sub	ecx, DWORD PTR _lzPos$[ebp]
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	eax, edx
	jne	SHORT $LN3@MixMatches@2
; Line 598
	mov	eax, DWORD PTR _lzPos$[ebp]
	sub	eax, DWORD PTR _curMatch2$[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR _distances$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 599
	mov	edx, DWORD PTR _curMatch2$[ebp]
	sub	edx, DWORD PTR _lzPos$[ebp]
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+2]
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx+2]
	cmp	ecx, eax
	jne	SHORT $LN2@MixMatches@2
; Line 601
	mov	ecx, DWORD PTR _distances$[ebp]
	mov	DWORD PTR [ecx], 3
; Line 602
	mov	eax, DWORD PTR _distances$[ebp]
	add	eax, 8
	jmp	SHORT $LN4@MixMatches@2
$LN2@MixMatches@2:
; Line 604
	mov	edx, DWORD PTR _distances$[ebp]
	mov	DWORD PTR [edx], 2
; Line 605
	mov	eax, DWORD PTR _distances$[ebp]
	add	eax, 8
	mov	DWORD PTR _distances$[ebp], eax
$LN3@MixMatches@2:
; Line 608
	mov	ecx, DWORD PTR _curMatch3$[ebp]
	cmp	ecx, DWORD PTR _matchMinPos$[ebp]
	jb	SHORT $LN1@MixMatches@2
	mov	edx, DWORD PTR _curMatch3$[ebp]
	sub	edx, DWORD PTR _lzPos$[ebp]
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	ecx, eax
	jne	SHORT $LN1@MixMatches@2
; Line 610
	mov	ecx, DWORD PTR _distances$[ebp]
	mov	DWORD PTR [ecx], 3
	mov	edx, DWORD PTR _distances$[ebp]
	add	edx, 4
	mov	DWORD PTR _distances$[ebp], edx
; Line 611
	mov	eax, DWORD PTR _lzPos$[ebp]
	sub	eax, DWORD PTR _curMatch3$[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR _distances$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _distances$[ebp]
	add	edx, 4
	mov	DWORD PTR _distances$[ebp], edx
$LN1@MixMatches@2:
; Line 614
	mov	eax, DWORD PTR _distances$[ebp]
$LN4@MixMatches@2:
; Line 615
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_MixMatches3@12 ENDP
; Function compile flags: /Odtp /RTCsu
_i$80682 = -12						; size = 4
_len$ = -8						; size = 4
_btBuf$ = -4						; size = 4
_p$ = 8							; size = 4
_distances$ = 12					; size = 4
_MatchFinderMt2_GetMatches@8 PROC
; Line 675
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 676
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+4]
	lea	ecx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _btBuf$[ebp], ecx
; Line 677
	mov	edx, DWORD PTR _btBuf$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _len$[ebp], eax
	mov	ecx, DWORD PTR _btBuf$[ebp]
	add	ecx, 4
	mov	DWORD PTR _btBuf$[ebp], ecx
; Line 678
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _len$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+8], edx
; Line 679
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	sub	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+20], edx
; Line 682
	mov	DWORD PTR _i$80682[ebp], 0
	jmp	SHORT $LN3@MatchFinde@5
$LN2@MatchFinde@5:
	mov	ecx, DWORD PTR _i$80682[ebp]
	add	ecx, 2
	mov	DWORD PTR _i$80682[ebp], ecx
$LN3@MatchFinde@5:
	mov	edx, DWORD PTR _i$80682[ebp]
	cmp	edx, DWORD PTR _len$[ebp]
	jae	SHORT $LN1@MatchFinde@5
; Line 684
	mov	eax, DWORD PTR _distances$[ebp]
	mov	ecx, DWORD PTR _btBuf$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _distances$[ebp]
	add	eax, 4
	mov	DWORD PTR _distances$[ebp], eax
	mov	ecx, DWORD PTR _btBuf$[ebp]
	add	ecx, 4
	mov	DWORD PTR _btBuf$[ebp], ecx
; Line 685
	mov	edx, DWORD PTR _distances$[ebp]
	mov	eax, DWORD PTR _btBuf$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR _distances$[ebp]
	add	edx, 4
	mov	DWORD PTR _distances$[ebp], edx
	mov	eax, DWORD PTR _btBuf$[ebp]
	add	eax, 4
	mov	DWORD PTR _btBuf$[ebp], eax
; Line 686
	jmp	SHORT $LN2@MatchFinde@5
$LN1@MatchFinde@5:
; Line 688
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	add	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+16], edx
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], edx
; Line 689
	mov	eax, DWORD PTR _len$[ebp]
; Line 690
	mov	esp, ebp
	pop	ebp
	ret	8
_MatchFinderMt2_GetMatches@8 ENDP
; Function compile flags: /Odtp /RTCsu
tv79 = -16						; size = 4
_distances2$80698 = -12					; size = 4
_len$ = -8						; size = 4
_btBuf$ = -4						; size = 4
_p$ = 8							; size = 4
_distances$ = 12					; size = 4
_MatchFinderMt_GetMatches@8 PROC
; Line 693
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 694
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+4]
	lea	ecx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _btBuf$[ebp], ecx
; Line 695
	mov	edx, DWORD PTR _btBuf$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _len$[ebp], eax
	mov	ecx, DWORD PTR _btBuf$[ebp]
	add	ecx, 4
	mov	DWORD PTR _btBuf$[ebp], ecx
; Line 696
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _len$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+8], edx
; Line 698
	cmp	DWORD PTR _len$[ebp], 0
	jne	SHORT $LN6@MatchFinde@6
; Line 701
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	sub	ecx, 1
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+20], ecx
	cmp	edx, 4
	jb	SHORT $LN9@MatchFinde@6
	mov	DWORD PTR tv79[ebp], 1
	jmp	SHORT $LN10@MatchFinde@6
$LN9@MatchFinde@6:
	mov	DWORD PTR tv79[ebp], 0
$LN10@MatchFinde@6:
	cmp	DWORD PTR tv79[ebp], 0
	je	SHORT $LN5@MatchFinde@6
; Line 702
	mov	esi, esp
	mov	ecx, DWORD PTR _distances$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	sub	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	sub	eax, DWORD PTR _distances$[ebp]
	sar	eax, 2
	mov	DWORD PTR _len$[ebp], eax
$LN5@MatchFinde@6:
; Line 704
	jmp	$LN4@MatchFinde@6
$LN6@MatchFinde@6:
; Line 708
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+20]
	sub	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+20], eax
; Line 709
	mov	esi, esp
	mov	edx, DWORD PTR _distances$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _btBuf$[ebp]
	mov	edx, DWORD PTR [eax+16]
	sub	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _distances2$80698[ebp], eax
$LN3@MatchFinde@6:
; Line 712
	mov	eax, DWORD PTR _distances2$80698[ebp]
	mov	ecx, DWORD PTR _btBuf$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _distances2$80698[ebp]
	add	eax, 4
	mov	DWORD PTR _distances2$80698[ebp], eax
	mov	ecx, DWORD PTR _btBuf$[ebp]
	add	ecx, 4
	mov	DWORD PTR _btBuf$[ebp], ecx
; Line 713
	mov	edx, DWORD PTR _distances2$80698[ebp]
	mov	eax, DWORD PTR _btBuf$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR _distances2$80698[ebp]
	add	edx, 4
	mov	DWORD PTR _distances2$80698[ebp], edx
	mov	eax, DWORD PTR _btBuf$[ebp]
	add	eax, 4
	mov	DWORD PTR _btBuf$[ebp], eax
; Line 715
	mov	ecx, DWORD PTR _len$[ebp]
	sub	ecx, 2
	mov	DWORD PTR _len$[ebp], ecx
	jne	SHORT $LN3@MatchFinde@6
; Line 716
	mov	edx, DWORD PTR _distances2$80698[ebp]
	sub	edx, DWORD PTR _distances$[ebp]
	sar	edx, 2
	mov	DWORD PTR _len$[ebp], edx
$LN4@MatchFinde@6:
; Line 718
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+16], ecx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 719
	mov	eax, DWORD PTR _len$[ebp]
; Line 720
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_MatchFinderMt_GetMatches@8 ENDP
; Function compile flags: /Odtp /RTCsu
_p$ = 8						; size = 4
_num$ = 12						; size = 4
_MatchFinderMt0_Skip@8 PROC
; Line 727
	push	ebp
	mov	ebp, esp
$LN4@MatchFinde@7:
; Line 728
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+12]
	jne	SHORT $LN1@MatchFinde@7
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_MatchFinderMt_GetNextBlock_Bt@4
$LN1@MatchFinde@7:
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	sub	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+20], edx
; Line 729
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	add	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+16], edx
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	lea	edx, DWORD PTR [edx+ecx+1]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR _num$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _num$[ebp], ecx
	jne	SHORT $LN4@MatchFinde@7
; Line 730
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_MatchFinderMt0_Skip@8 ENDP
; Function compile flags: /Odtp /RTCsu
tv73 = -16						; size = 4
_h2$80726 = -12						; size = 4
_hash$80725 = -8					; size = 4
_cur$80724 = -4						; size = 4
_p$ = 8							; size = 4
_num$ = 12						; size = 4
_MatchFinderMt2_Skip@8 PROC
; Line 733
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
$LN5@MatchFinde@8:
; Line 734
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+12]
	jne	SHORT $LN2@MatchFinde@8
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_MatchFinderMt_GetNextBlock_Bt@4
$LN2@MatchFinde@8:
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	sub	ecx, 1
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+20], ecx
	cmp	edx, 2
	jb	SHORT $LN8@MatchFinde@8
	mov	DWORD PTR tv73[ebp], 1
	jmp	SHORT $LN9@MatchFinde@8
$LN8@MatchFinde@8:
	mov	DWORD PTR tv73[ebp], 0
$LN9@MatchFinde@8:
	cmp	DWORD PTR tv73[ebp], 0
	je	SHORT $LN1@MatchFinde@8
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _cur$80724[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _hash$80725[ebp], ecx
; Line 736
	mov	edx, DWORD PTR _cur$80724[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	ecx, DWORD PTR _cur$80724[ebp]
	movzx	ecx, BYTE PTR [ecx+1]
	xor	ecx, DWORD PTR [edx+eax*4]
	and	ecx, 1023				; 000003ffH
	mov	DWORD PTR _h2$80726[ebp], ecx
; Line 737
	mov	edx, DWORD PTR _h2$80726[ebp]
	mov	eax, DWORD PTR _hash$80725[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+edx*4], ecx
$LN1@MatchFinde@8:
; Line 738
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+16]
	add	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+eax*4]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	lea	eax, DWORD PTR [eax+edx+1]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	edx, DWORD PTR _num$[ebp]
	sub	edx, 1
	mov	DWORD PTR _num$[ebp], edx
	jne	$LN5@MatchFinde@8
; Line 739
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_MatchFinderMt2_Skip@8 ENDP
; Function compile flags: /Odtp /RTCsu
tv73 = -24						; size = 4
_temp$80742 = -20					; size = 4
_h3$80741 = -16						; size = 4
_h2$80740 = -12						; size = 4
_hash$80739 = -8					; size = 4
_cur$80738 = -4						; size = 4
_p$ = 8							; size = 4
_num$ = 12						; size = 4
_MatchFinderMt3_Skip@8 PROC
; Line 742
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
$LN5@MatchFinde@9:
; Line 743
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+12]
	jne	SHORT $LN2@MatchFinde@9
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_MatchFinderMt_GetNextBlock_Bt@4
$LN2@MatchFinde@9:
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	sub	ecx, 1
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+20], ecx
	cmp	edx, 3
	jb	SHORT $LN8@MatchFinde@9
	mov	DWORD PTR tv73[ebp], 1
	jmp	SHORT $LN9@MatchFinde@9
$LN8@MatchFinde@9:
	mov	DWORD PTR tv73[ebp], 0
$LN9@MatchFinde@9:
	cmp	DWORD PTR tv73[ebp], 0
	je	SHORT $LN1@MatchFinde@9
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _cur$80738[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _hash$80739[ebp], ecx
; Line 745
	mov	edx, DWORD PTR _cur$80738[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	ecx, DWORD PTR _cur$80738[ebp]
	movzx	ecx, BYTE PTR [ecx+1]
	xor	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _temp$80742[ebp], ecx
	mov	edx, DWORD PTR _temp$80742[ebp]
	and	edx, 1023				; 000003ffH
	mov	DWORD PTR _h2$80740[ebp], edx
	mov	eax, DWORD PTR _cur$80738[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	shl	ecx, 8
	xor	ecx, DWORD PTR _temp$80742[ebp]
	and	ecx, 65535				; 0000ffffH
	mov	DWORD PTR _h3$80741[ebp], ecx
; Line 748
	mov	edx, DWORD PTR _h2$80740[ebp]
	mov	eax, DWORD PTR _hash$80739[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+edx*4], ecx
	mov	edx, DWORD PTR _h3$80741[ebp]
	mov	eax, DWORD PTR _hash$80739[ebp]
	mov	ecx, DWORD PTR _h2$80740[ebp]
	mov	esi, DWORD PTR _hash$80739[ebp]
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	DWORD PTR [eax+edx*4+4096], ecx
$LN1@MatchFinde@9:
; Line 749
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+16]
	add	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+eax*4]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	lea	eax, DWORD PTR [eax+edx+1]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	edx, DWORD PTR _num$[ebp]
	sub	edx, 1
	mov	DWORD PTR _num$[ebp], edx
	jne	$LN5@MatchFinde@9
; Line 750
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_MatchFinderMt3_Skip@8 ENDP
_TEXT	ENDS
END
