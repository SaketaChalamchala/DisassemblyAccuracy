; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\CPP\Windows\PropVariantConv.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?BOOLToBool@@YG_NH@Z				; BOOLToBool
PUBLIC	__$ArrayPad$
PUBLIC	?ConvertFileTimeToString@@YG_NABU_FILETIME@@PAD_N2@Z ; ConvertFileTimeToString
EXTRN	__imp__FileTimeToSystemTime@8:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\cpp\windows\propvariantconv.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_val$ = -32						; size = 4
_st$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_ft$ = 8						; size = 4
_s$ = 12						; size = 4
_includeTime$ = 16					; size = 1
_includeSeconds$ = 20					; size = 1
?ConvertFileTimeToString@@YG_NABU_FILETIME@@PAD_N2@Z PROC ; ConvertFileTimeToString
; Line 13
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 15
	mov	esi, esp
	lea	eax, DWORD PTR _st$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ft$[ebp]
	push	ecx
	call	DWORD PTR __imp__FileTimeToSystemTime@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	?BOOLToBool@@YG_NH@Z			; BOOLToBool
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN4@ConvertFil
; Line 17
	mov	eax, DWORD PTR _s$[ebp]
	mov	BYTE PTR [eax], 0
; Line 18
	xor	al, al
	jmp	$LN5@ConvertFil
$LN4@ConvertFil:
; Line 20
	movzx	ecx, WORD PTR _st$[ebp]
	mov	DWORD PTR _val$[ebp], ecx
; Line 21
	cmp	DWORD PTR _val$[ebp], 10000		; 00002710H
	jb	SHORT $LN3@ConvertFil
; Line 23
	mov	eax, DWORD PTR _val$[ebp]
	xor	edx, edx
	mov	ecx, 10000				; 00002710H
	div	ecx
	add	eax, 48					; 00000030H
	mov	edx, DWORD PTR _s$[ebp]
	mov	BYTE PTR [edx], al
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 1
	mov	DWORD PTR _s$[ebp], eax
; Line 24
	mov	eax, DWORD PTR _val$[ebp]
	xor	edx, edx
	mov	ecx, 10000				; 00002710H
	div	ecx
	mov	DWORD PTR _val$[ebp], edx
$LN3@ConvertFil:
; Line 27
	mov	eax, DWORD PTR _val$[ebp]
	xor	edx, edx
	mov	ecx, 10					; 0000000aH
	div	ecx
	add	edx, 48					; 00000030H
	mov	eax, DWORD PTR _s$[ebp]
	mov	BYTE PTR [eax+3], dl
	mov	eax, DWORD PTR _val$[ebp]
	xor	edx, edx
	mov	ecx, 10					; 0000000aH
	div	ecx
	mov	DWORD PTR _val$[ebp], eax
; Line 28
	mov	eax, DWORD PTR _val$[ebp]
	xor	edx, edx
	mov	ecx, 10					; 0000000aH
	div	ecx
	add	edx, 48					; 00000030H
	mov	eax, DWORD PTR _s$[ebp]
	mov	BYTE PTR [eax+2], dl
	mov	eax, DWORD PTR _val$[ebp]
	xor	edx, edx
	mov	ecx, 10					; 0000000aH
	div	ecx
	mov	DWORD PTR _val$[ebp], eax
; Line 29
	mov	eax, DWORD PTR _val$[ebp]
	xor	edx, edx
	mov	ecx, 10					; 0000000aH
	div	ecx
	add	edx, 48					; 00000030H
	mov	eax, DWORD PTR _s$[ebp]
	mov	BYTE PTR [eax+1], dl
; Line 30
	mov	eax, DWORD PTR _val$[ebp]
	xor	edx, edx
	mov	ecx, 10					; 0000000aH
	div	ecx
	add	eax, 48					; 00000030H
	mov	edx, DWORD PTR _s$[ebp]
	mov	BYTE PTR [edx], al
; Line 31
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 4
	mov	DWORD PTR _s$[ebp], eax
; Line 33
	mov	ecx, DWORD PTR _s$[ebp]
	mov	BYTE PTR [ecx], 45			; 0000002dH
	movzx	eax, WORD PTR _st$[ebp+2]
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	add	eax, 48					; 00000030H
	mov	edx, DWORD PTR _s$[ebp]
	mov	BYTE PTR [edx+1], al
	movzx	eax, WORD PTR _st$[ebp+2]
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	add	edx, 48					; 00000030H
	mov	eax, DWORD PTR _s$[ebp]
	mov	BYTE PTR [eax+2], dl
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, 3
	mov	DWORD PTR _s$[ebp], ecx
; Line 34
	mov	edx, DWORD PTR _s$[ebp]
	mov	BYTE PTR [edx], 45			; 0000002dH
	movzx	eax, WORD PTR _st$[ebp+6]
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	add	eax, 48					; 00000030H
	mov	edx, DWORD PTR _s$[ebp]
	mov	BYTE PTR [edx+1], al
	movzx	eax, WORD PTR _st$[ebp+6]
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	add	edx, 48					; 00000030H
	mov	eax, DWORD PTR _s$[ebp]
	mov	BYTE PTR [eax+2], dl
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, 3
	mov	DWORD PTR _s$[ebp], ecx
; Line 35
	movzx	edx, BYTE PTR _includeTime$[ebp]
	test	edx, edx
	je	$LN2@ConvertFil
; Line 37
	mov	eax, DWORD PTR _s$[ebp]
	mov	BYTE PTR [eax], 32			; 00000020H
	movzx	eax, WORD PTR _st$[ebp+8]
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	add	eax, 48					; 00000030H
	mov	edx, DWORD PTR _s$[ebp]
	mov	BYTE PTR [edx+1], al
	movzx	eax, WORD PTR _st$[ebp+8]
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	add	edx, 48					; 00000030H
	mov	eax, DWORD PTR _s$[ebp]
	mov	BYTE PTR [eax+2], dl
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, 3
	mov	DWORD PTR _s$[ebp], ecx
; Line 38
	mov	edx, DWORD PTR _s$[ebp]
	mov	BYTE PTR [edx], 58			; 0000003aH
	movzx	eax, WORD PTR _st$[ebp+10]
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	add	eax, 48					; 00000030H
	mov	edx, DWORD PTR _s$[ebp]
	mov	BYTE PTR [edx+1], al
	movzx	eax, WORD PTR _st$[ebp+10]
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	add	edx, 48					; 00000030H
	mov	eax, DWORD PTR _s$[ebp]
	mov	BYTE PTR [eax+2], dl
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, 3
	mov	DWORD PTR _s$[ebp], ecx
; Line 39
	movzx	edx, BYTE PTR _includeSeconds$[ebp]
	test	edx, edx
	je	SHORT $LN2@ConvertFil
; Line 40
	mov	eax, DWORD PTR _s$[ebp]
	mov	BYTE PTR [eax], 58			; 0000003aH
	movzx	eax, WORD PTR _st$[ebp+12]
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	add	eax, 48					; 00000030H
	mov	edx, DWORD PTR _s$[ebp]
	mov	BYTE PTR [edx+1], al
	movzx	eax, WORD PTR _st$[ebp+12]
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	add	edx, 48					; 00000030H
	mov	eax, DWORD PTR _s$[ebp]
	mov	BYTE PTR [eax+2], dl
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, 3
	mov	DWORD PTR _s$[ebp], ecx
$LN2@ConvertFil:
; Line 42
	mov	edx, DWORD PTR _s$[ebp]
	mov	BYTE PTR [edx], 0
; Line 43
	mov	al, 1
$LN5@ConvertFil:
; Line 44
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@ConvertFil
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	2
$LN9@ConvertFil:
	DD	1
	DD	$LN8@ConvertFil
$LN8@ConvertFil:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN7@ConvertFil
$LN7@ConvertFil:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
?ConvertFileTimeToString@@YG_NABU_FILETIME@@PAD_N2@Z ENDP ; ConvertFileTimeToString
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?BOOLToBool@@YG_NH@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
?BOOLToBool@@YG_NH@Z PROC				; BOOLToBool, COMDAT
; File c:\workspace\7z1505-src\cpp\windows\defs.h
; Line 10
	push	ebp
	mov	ebp, esp
	xor	eax, eax
	cmp	DWORD PTR _v$[ebp], 0
	setne	al
	pop	ebp
	ret	4
?BOOLToBool@@YG_NH@Z ENDP				; BOOLToBool
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?ConvertFileTimeToString@@YGXABU_FILETIME@@PA_W_N2@Z ; ConvertFileTimeToString
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_c$65906 = -49						; size = 1
_i$65902 = -48						; size = 4
_s$ = -40						; size = 32
__$ArrayPad$ = -4					; size = 4
_ft$ = 8						; size = 4
_dest$ = 12						; size = 4
_includeTime$ = 16					; size = 1
_includeSeconds$ = 20					; size = 1
?ConvertFileTimeToString@@YGXABU_FILETIME@@PA_W_N2@Z PROC ; ConvertFileTimeToString
; File c:\workspace\7z1505-src\cpp\windows\propvariantconv.cpp
; Line 47
	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 49
	movzx	eax, BYTE PTR _includeSeconds$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _includeTime$[ebp]
	push	ecx
	lea	edx, DWORD PTR _s$[ebp]
	push	edx
	mov	eax, DWORD PTR _ft$[ebp]
	push	eax
	call	?ConvertFileTimeToString@@YG_NABU_FILETIME@@PAD_N2@Z ; ConvertFileTimeToString
; Line 50
	mov	DWORD PTR _i$65902[ebp], 0
	jmp	SHORT $LN4@ConvertFil@2
$LN3@ConvertFil@2:
	mov	ecx, DWORD PTR _i$65902[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$65902[ebp], ecx
$LN4@ConvertFil@2:
; Line 52
	mov	edx, DWORD PTR _i$65902[ebp]
	mov	al, BYTE PTR _s$[ebp+edx]
	mov	BYTE PTR _c$65906[ebp], al
; Line 53
	movzx	cx, BYTE PTR _c$65906[ebp]
	mov	edx, DWORD PTR _i$65902[ebp]
	mov	eax, DWORD PTR _dest$[ebp]
	mov	WORD PTR [eax+edx*2], cx
; Line 54
	movzx	ecx, BYTE PTR _c$65906[ebp]
	test	ecx, ecx
	jne	SHORT $LN1@ConvertFil@2
; Line 55
	jmp	SHORT $LN5@ConvertFil@2
$LN1@ConvertFil@2:
; Line 56
	jmp	SHORT $LN3@ConvertFil@2
$LN5@ConvertFil@2:
; Line 57
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@ConvertFil@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	2
$LN9@ConvertFil@2:
	DD	1
	DD	$LN8@ConvertFil@2
$LN8@ConvertFil@2:
	DD	-40					; ffffffd8H
	DD	32					; 00000020H
	DD	$LN7@ConvertFil@2
$LN7@ConvertFil@2:
	DB	115					; 00000073H
	DB	0
?ConvertFileTimeToString@@YGXABU_FILETIME@@PA_W_N2@Z ENDP ; ConvertFileTimeToString
_TEXT	ENDS
PUBLIC	?VARIANT_BOOLToBool@@YG_NF@Z			; VARIANT_BOOLToBool
PUBLIC	?ConvertPropVariantToShortString@@YGXABUtagPROPVARIANT@@PAD@Z ; ConvertPropVariantToShortString
EXTRN	?ConvertInt64ToString@@YGX_JPAD@Z:PROC		; ConvertInt64ToString
EXTRN	?ConvertUInt64ToString@@YGX_KPAD@Z:PROC		; ConvertUInt64ToString
EXTRN	?ConvertUInt32ToString@@YGXIPAD@Z:PROC		; ConvertUInt32ToString
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv65 = -4						; size = 4
_prop$ = 8						; size = 4
_dest$ = 12						; size = 4
?ConvertPropVariantToShortString@@YGXABUtagPROPVARIANT@@PAD@Z PROC ; ConvertPropVariantToShortString
; Line 60
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 61
	mov	eax, DWORD PTR _dest$[ebp]
	mov	BYTE PTR [eax], 0
; Line 62
	mov	ecx, DWORD PTR _prop$[ebp]
	movzx	edx, WORD PTR [ecx]
	mov	DWORD PTR tv65[ebp], edx
	cmp	DWORD PTR tv65[ebp], 64			; 00000040H
	ja	$LN1@ConvertPro
	mov	eax, DWORD PTR tv65[ebp]
	movzx	ecx, BYTE PTR $LN17@ConvertPro[eax]
	jmp	DWORD PTR $LN18@ConvertPro[ecx*4]
$LN12@ConvertPro:
; Line 64
	jmp	$LN15@ConvertPro
$LN11@ConvertPro:
; Line 65
	mov	edx, DWORD PTR _dest$[ebp]
	mov	BYTE PTR [edx], 63			; 0000003fH
	mov	eax, DWORD PTR _dest$[ebp]
	mov	BYTE PTR [eax+1], 0
	jmp	$LN15@ConvertPro
$LN10@ConvertPro:
; Line 66
	mov	ecx, DWORD PTR _dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR _prop$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	push	eax
	call	?ConvertUInt32ToString@@YGXIPAD@Z	; ConvertUInt32ToString
	jmp	$LN15@ConvertPro
$LN9@ConvertPro:
; Line 67
	mov	ecx, DWORD PTR _dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR _prop$[ebp]
	movzx	eax, WORD PTR [edx+8]
	push	eax
	call	?ConvertUInt32ToString@@YGXIPAD@Z	; ConvertUInt32ToString
	jmp	$LN15@ConvertPro
$LN8@ConvertPro:
; Line 68
	mov	ecx, DWORD PTR _dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR _prop$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	?ConvertUInt32ToString@@YGXIPAD@Z	; ConvertUInt32ToString
	jmp	$LN15@ConvertPro
$LN7@ConvertPro:
; Line 69
	mov	ecx, DWORD PTR _dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR _prop$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR [edx+8]
	push	ecx
	call	?ConvertUInt64ToString@@YGX_KPAD@Z	; ConvertUInt64ToString
	jmp	$LN15@ConvertPro
$LN6@ConvertPro:
; Line 70
	push	1
	push	1
	mov	edx, DWORD PTR _dest$[ebp]
	push	edx
	mov	eax, DWORD PTR _prop$[ebp]
	add	eax, 8
	push	eax
	call	?ConvertFileTimeToString@@YG_NABU_FILETIME@@PAD_N2@Z ; ConvertFileTimeToString
	jmp	$LN15@ConvertPro
$LN5@ConvertPro:
; Line 72
	mov	ecx, DWORD PTR _dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR _prop$[ebp]
	movsx	eax, WORD PTR [edx+8]
	cdq
	push	edx
	push	eax
	call	?ConvertInt64ToString@@YGX_JPAD@Z	; ConvertInt64ToString
	jmp	SHORT $LN15@ConvertPro
$LN4@ConvertPro:
; Line 73
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _prop$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	cdq
	push	edx
	push	eax
	call	?ConvertInt64ToString@@YGX_JPAD@Z	; ConvertInt64ToString
	jmp	SHORT $LN15@ConvertPro
$LN3@ConvertPro:
; Line 74
	mov	edx, DWORD PTR _dest$[ebp]
	push	edx
	mov	eax, DWORD PTR _prop$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	push	edx
	call	?ConvertInt64ToString@@YGX_JPAD@Z	; ConvertInt64ToString
	jmp	SHORT $LN15@ConvertPro
$LN2@ConvertPro:
; Line 75
	mov	eax, DWORD PTR _prop$[ebp]
	movzx	ecx, WORD PTR [eax+8]
	push	ecx
	call	?VARIANT_BOOLToBool@@YG_NF@Z		; VARIANT_BOOLToBool
	movzx	edx, al
	test	edx, edx
	sete	al
	lea	eax, DWORD PTR [eax+eax+43]
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _dest$[ebp]
	mov	BYTE PTR [edx+1], 0
	jmp	SHORT $LN15@ConvertPro
$LN1@ConvertPro:
; Line 76
	mov	eax, DWORD PTR _dest$[ebp]
	mov	BYTE PTR [eax], 63			; 0000003fH
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	BYTE PTR [ecx+1], 58			; 0000003aH
	mov	edx, DWORD PTR _dest$[ebp]
	add	edx, 2
	push	edx
	mov	eax, DWORD PTR _prop$[ebp]
	movzx	eax, WORD PTR [eax]
	cdq
	push	edx
	push	eax
	call	?ConvertUInt64ToString@@YGX_KPAD@Z	; ConvertUInt64ToString
$LN15@ConvertPro:
; Line 78
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN18@ConvertPro:
	DD	$LN12@ConvertPro
	DD	$LN5@ConvertPro
	DD	$LN4@ConvertPro
	DD	$LN11@ConvertPro
	DD	$LN2@ConvertPro
	DD	$LN10@ConvertPro
	DD	$LN9@ConvertPro
	DD	$LN8@ConvertPro
	DD	$LN3@ConvertPro
	DD	$LN7@ConvertPro
	DD	$LN6@ConvertPro
	DD	$LN1@ConvertPro
$LN17@ConvertPro:
	DB	0
	DB	11					; 0000000bH
	DB	1
	DB	2
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	3
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	4
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	5
	DB	6
	DB	7
	DB	8
	DB	9
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	10					; 0000000aH
?ConvertPropVariantToShortString@@YGXABUtagPROPVARIANT@@PAD@Z ENDP ; ConvertPropVariantToShortString
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?VARIANT_BOOLToBool@@YG_NF@Z
_TEXT	SEGMENT
_v$ = 8							; size = 2
?VARIANT_BOOLToBool@@YG_NF@Z PROC			; VARIANT_BOOLToBool, COMDAT
; File c:\workspace\7z1505-src\cpp\windows\defs.h
; Line 15
	push	ebp
	mov	ebp, esp
	movsx	eax, WORD PTR _v$[ebp]
	neg	eax
	sbb	eax, eax
	neg	eax
	pop	ebp
	ret	4
?VARIANT_BOOLToBool@@YG_NF@Z ENDP			; VARIANT_BOOLToBool
_TEXT	ENDS
PUBLIC	?ConvertPropVariantToShortString@@YGXABUtagPROPVARIANT@@PA_W@Z ; ConvertPropVariantToShortString
EXTRN	?ConvertInt64ToString@@YGX_JPA_W@Z:PROC		; ConvertInt64ToString
EXTRN	?ConvertUInt64ToString@@YGX_KPA_W@Z:PROC	; ConvertUInt64ToString
EXTRN	?ConvertUInt32ToString@@YGXIPA_W@Z:PROC		; ConvertUInt32ToString
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv65 = -4						; size = 4
_prop$ = 8						; size = 4
_dest$ = 12						; size = 4
?ConvertPropVariantToShortString@@YGXABUtagPROPVARIANT@@PA_W@Z PROC ; ConvertPropVariantToShortString
; File c:\workspace\7z1505-src\cpp\windows\propvariantconv.cpp
; Line 81
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 82
	xor	eax, eax
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	WORD PTR [ecx], ax
; Line 83
	mov	edx, DWORD PTR _prop$[ebp]
	movzx	eax, WORD PTR [edx]
	mov	DWORD PTR tv65[ebp], eax
	cmp	DWORD PTR tv65[ebp], 64			; 00000040H
	ja	$LN1@ConvertPro@2
	mov	ecx, DWORD PTR tv65[ebp]
	movzx	edx, BYTE PTR $LN17@ConvertPro@2[ecx]
	jmp	DWORD PTR $LN18@ConvertPro@2[edx*4]
$LN12@ConvertPro@2:
; Line 85
	jmp	$LN15@ConvertPro@2
$LN11@ConvertPro@2:
; Line 86
	mov	eax, 63					; 0000003fH
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	WORD PTR [ecx], ax
	xor	edx, edx
	mov	eax, DWORD PTR _dest$[ebp]
	mov	WORD PTR [eax+2], dx
	jmp	$LN15@ConvertPro@2
$LN10@ConvertPro@2:
; Line 87
	mov	ecx, DWORD PTR _dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR _prop$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	push	eax
	call	?ConvertUInt32ToString@@YGXIPA_W@Z	; ConvertUInt32ToString
	jmp	$LN15@ConvertPro@2
$LN9@ConvertPro@2:
; Line 88
	mov	ecx, DWORD PTR _dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR _prop$[ebp]
	movzx	eax, WORD PTR [edx+8]
	push	eax
	call	?ConvertUInt32ToString@@YGXIPA_W@Z	; ConvertUInt32ToString
	jmp	$LN15@ConvertPro@2
$LN8@ConvertPro@2:
; Line 89
	mov	ecx, DWORD PTR _dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR _prop$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	?ConvertUInt32ToString@@YGXIPA_W@Z	; ConvertUInt32ToString
	jmp	$LN15@ConvertPro@2
$LN7@ConvertPro@2:
; Line 90
	mov	ecx, DWORD PTR _dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR _prop$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR [edx+8]
	push	ecx
	call	?ConvertUInt64ToString@@YGX_KPA_W@Z	; ConvertUInt64ToString
	jmp	$LN15@ConvertPro@2
$LN6@ConvertPro@2:
; Line 91
	push	1
	push	1
	mov	edx, DWORD PTR _dest$[ebp]
	push	edx
	mov	eax, DWORD PTR _prop$[ebp]
	add	eax, 8
	push	eax
	call	?ConvertFileTimeToString@@YGXABU_FILETIME@@PA_W_N2@Z ; ConvertFileTimeToString
	jmp	$LN15@ConvertPro@2
$LN5@ConvertPro@2:
; Line 93
	mov	ecx, DWORD PTR _dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR _prop$[ebp]
	movsx	eax, WORD PTR [edx+8]
	cdq
	push	edx
	push	eax
	call	?ConvertInt64ToString@@YGX_JPA_W@Z	; ConvertInt64ToString
	jmp	SHORT $LN15@ConvertPro@2
$LN4@ConvertPro@2:
; Line 94
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _prop$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	cdq
	push	edx
	push	eax
	call	?ConvertInt64ToString@@YGX_JPA_W@Z	; ConvertInt64ToString
	jmp	SHORT $LN15@ConvertPro@2
$LN3@ConvertPro@2:
; Line 95
	mov	edx, DWORD PTR _dest$[ebp]
	push	edx
	mov	eax, DWORD PTR _prop$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	push	edx
	call	?ConvertInt64ToString@@YGX_JPA_W@Z	; ConvertInt64ToString
	jmp	SHORT $LN15@ConvertPro@2
$LN2@ConvertPro@2:
; Line 96
	mov	eax, DWORD PTR _prop$[ebp]
	movzx	ecx, WORD PTR [eax+8]
	push	ecx
	call	?VARIANT_BOOLToBool@@YG_NF@Z		; VARIANT_BOOLToBool
	movzx	edx, al
	neg	edx
	sbb	edx, edx
	and	edx, -2					; fffffffeH
	add	edx, 45					; 0000002dH
	mov	eax, DWORD PTR _dest$[ebp]
	mov	WORD PTR [eax], dx
	xor	ecx, ecx
	mov	edx, DWORD PTR _dest$[ebp]
	mov	WORD PTR [edx+2], cx
	jmp	SHORT $LN15@ConvertPro@2
$LN1@ConvertPro@2:
; Line 97
	mov	eax, 63					; 0000003fH
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, 58					; 0000003aH
	mov	eax, DWORD PTR _dest$[ebp]
	mov	WORD PTR [eax+2], dx
	mov	ecx, DWORD PTR _dest$[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _prop$[ebp]
	movzx	eax, WORD PTR [edx]
	push	eax
	call	?ConvertUInt32ToString@@YGXIPA_W@Z	; ConvertUInt32ToString
$LN15@ConvertPro@2:
; Line 99
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN18@ConvertPro@2:
	DD	$LN12@ConvertPro@2
	DD	$LN5@ConvertPro@2
	DD	$LN4@ConvertPro@2
	DD	$LN11@ConvertPro@2
	DD	$LN2@ConvertPro@2
	DD	$LN10@ConvertPro@2
	DD	$LN9@ConvertPro@2
	DD	$LN8@ConvertPro@2
	DD	$LN3@ConvertPro@2
	DD	$LN7@ConvertPro@2
	DD	$LN6@ConvertPro@2
	DD	$LN1@ConvertPro@2
$LN17@ConvertPro@2:
	DB	0
	DB	11					; 0000000bH
	DB	1
	DB	2
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	3
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	4
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	5
	DB	6
	DB	7
	DB	8
	DB	9
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	10					; 0000000aH
?ConvertPropVariantToShortString@@YGXABUtagPROPVARIANT@@PA_W@Z ENDP ; ConvertPropVariantToShortString
_TEXT	ENDS
END
