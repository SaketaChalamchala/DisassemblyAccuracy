; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\CPP\7zip\UI\Common\HashCalc.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_k_DefaultHashMethod DD FLAT:$SG71081
_DATA	ENDS
CONST	SEGMENT
$SG71081 DB	'CRC32', 00H
	ORG $+2
$SG71263 DB	'*', 00H
	ORG $+2
$SG71297 DB	'Can''t create hasher', 00H
$SG71453 DB	'Scanning error', 00H
CONST	ENDS
PUBLIC	??4?$CMyComPtr@UIHasher@@@@QAEPAUIHasher@@ABV0@@Z ; CMyComPtr<IHasher>::operator=
PUBLIC	?AddNew@?$CObjectVector@UCHasherState@@@@QAEAAUCHasherState@@XZ ; CObjectVector<CHasherState>::AddNew
PUBLIC	??C?$CMyComPtr@UIHasher@@@@QBEPAUIHasher@@XZ	; CMyComPtr<IHasher>::operator->
PUBLIC	??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderProperties>::~CMyComPtr<ICompressSetCoderProperties>
PUBLIC	??B?$CMyComPtr@UICompressSetCoderProperties@@@@QBEPAUICompressSetCoderProperties@@XZ ; CMyComPtr<ICompressSetCoderProperties>::operator ICompressSetCoderProperties *
PUBLIC	??$QueryInterface@UICompressSetCoderProperties@@@?$CMyComPtr@UIHasher@@@@QBEJABU_GUID@@PAPAUICompressSetCoderProperties@@@Z ; CMyComPtr<IHasher>::QueryInterface<ICompressSetCoderProperties>
PUBLIC	??I?$CMyComPtr@UICompressSetCoderProperties@@@@QAEPAPAUICompressSetCoderProperties@@XZ ; CMyComPtr<ICompressSetCoderProperties>::operator&
PUBLIC	??0?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderProperties>::CMyComPtr<ICompressSetCoderProperties>
PUBLIC	??A?$CObjectVector@VCOneMethodInfo@@@@QAEAAVCOneMethodInfo@@I@Z ; CObjectVector<COneMethodInfo>::operator[]
PUBLIC	__TI2PAD
PUBLIC	??7?$CMyComPtr@UIHasher@@@@QBE_NXZ		; CMyComPtr<IHasher>::operator!
PUBLIC	??1?$CMyComPtr@UIHasher@@@@QAE@XZ		; CMyComPtr<IHasher>::~CMyComPtr<IHasher>
PUBLIC	??1AString@@QAE@XZ				; AString::~AString
PUBLIC	??0?$CMyComPtr@UIHasher@@@@QAE@XZ		; CMyComPtr<IHasher>::CMyComPtr<IHasher>
PUBLIC	?Insert@?$CObjectVector@VCOneMethodInfo@@@@QAEXIABVCOneMethodInfo@@@Z ; CObjectVector<COneMethodInfo>::Insert
PUBLIC	?Size@?$CObjectVector@VCOneMethodInfo@@@@QBEIXZ	; CObjectVector<COneMethodInfo>::Size
PUBLIC	?AddToUniqueSorted@?$CRecordVector@_K@@QAEI_K@Z	; CRecordVector<unsigned __int64>::AddToUniqueSorted
PUBLIC	??A?$CRecordVector@_K@@QAEAA_KI@Z		; CRecordVector<unsigned __int64>::operator[]
PUBLIC	?Size@?$CRecordVector@_K@@QBEIXZ		; CRecordVector<unsigned __int64>::Size
PUBLIC	?Clear@?$CRecordVector@_K@@QAEXXZ		; CRecordVector<unsigned __int64>::Clear
PUBLIC	?Clear@?$CObjectVector@VCOneMethodInfo@@@@QAEXXZ ; CObjectVector<COneMethodInfo>::Clear
PUBLIC	??8@YG_NABVAString@@PBD@Z			; operator==
PUBLIC	?IsEmpty@AString@@QBE_NXZ			; AString::IsEmpty
PUBLIC	??1?$CObjectVector@VUString@@@@QAE@XZ		; CObjectVector<UString>::~CObjectVector<UString>
PUBLIC	??1?$CRecordVector@_K@@QAE@XZ			; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
PUBLIC	??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ	; CObjectVector<COneMethodInfo>::~CObjectVector<COneMethodInfo>
PUBLIC	??1COneMethodInfo@@QAE@XZ			; COneMethodInfo::~COneMethodInfo
PUBLIC	??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[]
PUBLIC	??0COneMethodInfo@@QAE@XZ			; COneMethodInfo::COneMethodInfo
PUBLIC	?Size@?$CObjectVector@VUString@@@@QBEIXZ	; CObjectVector<UString>::Size
PUBLIC	??0?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ	; CObjectVector<COneMethodInfo>::CObjectVector<COneMethodInfo>
PUBLIC	??0?$CRecordVector@_K@@QAE@XZ			; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>
PUBLIC	??1UString@@QAE@XZ				; UString::~UString
PUBLIC	?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z ; CObjectVector<UString>::Add
PUBLIC	?IsEmpty@?$CObjectVector@VUString@@@@QBE_NXZ	; CObjectVector<UString>::IsEmpty
PUBLIC	??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z	; CObjectVector<UString>::CObjectVector<UString>
PUBLIC	?SetMethods@CHashBundle@@QAEJABV?$CObjectVector@VUString@@@@@Z ; CHashBundle::SetMethods
PUBLIC	__CTA2PAD
PUBLIC	__CT??_R0PAD@84
PUBLIC	??_R0PAD@8					; char * `RTTI Type Descriptor'
PUBLIC	__CT??_R0PAX@84
PUBLIC	??_R0PAX@8					; void * `RTTI Type Descriptor'
EXTRN	_memset:PROC
EXTRN	??4AString@@QAEAAV0@ABV0@@Z:PROC		; AString::operator=
EXTRN	?SetCoderProps@CProps@@QBEJPAUICompressSetCoderProperties@@PB_K@Z:PROC ; CProps::SetCoderProps
EXTRN	_IID_ICompressSetCoderProperties:BYTE
EXTRN	?CreateHasher@@YGJ_KAAVAString@@AAV?$CMyComPtr@UIHasher@@@@@Z:PROC ; CreateHasher
EXTRN	??0AString@@QAE@XZ:PROC				; AString::AString
EXTRN	?FindHashMethod@@YG_NABVAString@@AA_K@Z:PROC	; FindHashMethod
EXTRN	?GetHashMethods@@YGXAAV?$CRecordVector@_K@@@Z:PROC ; GetHashMethods
EXTRN	??4AString@@QAEAAV0@PBD@Z:PROC			; AString::operator=
EXTRN	?ParseMethodFromString@COneMethodInfo@@QAEJABVUString@@@Z:PROC ; COneMethodInfo::ParseMethodFromString
EXTRN	?SetFromAscii@UString@@QAEXPBD@Z:PROC		; UString::SetFromAscii
EXTRN	??0UString@@QAE@XZ:PROC				; UString::UString
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_R0PAX@8
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\hashcalc.cpp
_DATA	SEGMENT
??_R0PAX@8 DD	FLAT:??_7type_info@@6B@			; void * `RTTI Type Descriptor'
	DD	00H
	DB	'.PAX', 00H
_DATA	ENDS
;	COMDAT __CT??_R0PAX@84
xdata$x	SEGMENT
__CT??_R0PAX@84 DD 01H
	DD	FLAT:??_R0PAX@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	00H
xdata$x	ENDS
;	COMDAT ??_R0PAD@8
_DATA	SEGMENT
??_R0PAD@8 DD	FLAT:??_7type_info@@6B@			; char * `RTTI Type Descriptor'
	DD	00H
	DB	'.PAD', 00H
_DATA	ENDS
;	COMDAT __CT??_R0PAD@84
xdata$x	SEGMENT
__CT??_R0PAD@84 DD 01H
	DD	FLAT:??_R0PAD@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	00H
xdata$x	ENDS
;	COMDAT __CTA2PAD
xdata$x	SEGMENT
__CTA2PAD DD	02H
	DD	FLAT:__CT??_R0PAD@84
	DD	FLAT:__CT??_R0PAX@84
xdata$x	ENDS
;	COMDAT __TI2PAD
xdata$x	SEGMENT
__TI2PAD DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA2PAD
xdata$x	ENDS
xdata$x	SEGMENT
__ehfuncinfo$?SetMethods@CHashBundle@@QAEJABV?$CObjectVector@VUString@@@@@Z DD 019930522H
	DD	09H
	DD	FLAT:__unwindtable$?SetMethods@CHashBundle@@QAEJABV?$CObjectVector@VUString@@@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?SetMethods@CHashBundle@@QAEJABV?$CObjectVector@VUString@@@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetMethods@CHashBundle@@QAEJABV?$CObjectVector@VUString@@@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?SetMethods@CHashBundle@@QAEJABV?$CObjectVector@VUString@@@@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?SetMethods@CHashBundle@@QAEJABV?$CObjectVector@VUString@@@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?SetMethods@CHashBundle@@QAEJABV?$CObjectVector@VUString@@@@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?SetMethods@CHashBundle@@QAEJABV?$CObjectVector@VUString@@@@@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?SetMethods@CHashBundle@@QAEJABV?$CObjectVector@VUString@@@@@Z$5
	DD	03H
	DD	FLAT:__unwindfunclet$?SetMethods@CHashBundle@@QAEJABV?$CObjectVector@VUString@@@@@Z$6
	DD	06H
	DD	FLAT:__unwindfunclet$?SetMethods@CHashBundle@@QAEJABV?$CObjectVector@VUString@@@@@Z$7
	DD	07H
	DD	FLAT:__unwindfunclet$?SetMethods@CHashBundle@@QAEJABV?$CObjectVector@VUString@@@@@Z$8
xdata$x	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
tv234 = -296						; size = 4
$T72321 = -292						; size = 4
$T72320 = -288						; size = 4
$T72319 = -284						; size = 4
$T72317 = -280						; size = 4
$T72316 = -276						; size = 4
$T72315 = -272						; size = 4
$T72314 = -268						; size = 4
_i$71350 = -264						; size = 4
_h$71349 = -260						; size = 4
_digestSize$71345 = -256				; size = 4
___result__$71342 = -252				; size = 4
_scp$71336 = -244					; size = 4
_m$71298 = -236						; size = 4
___result__$71285 = -232				; size = 4
_name$71284 = -224					; size = 12
_hasher$71283 = -204					; size = 4
_index$71277 = -196					; size = 4
_id$71273 = -188					; size = 8
_index$71270 = -176					; size = 4
_t$71266 = -172						; size = 4
_tempMethods$71265 = -164				; size = 12
___result__$71258 = -148				; size = 4
_m$71257 = -140						; size = 36
_i$ = -100						; size = 4
_methods$ = -92						; size = 12
_ids$ = -72						; size = 12
_s$71088 = -52						; size = 12
_names$ = -32						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_hashMethods$ = 8					; size = 4
?SetMethods@CHashBundle@@QAEJABV?$CObjectVector@VUString@@@@@Z PROC ; CHashBundle::SetMethods
; _this$ = ecx
; Line 36
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetMethods@CHashBundle@@QAEJABV?$CObjectVector@VUString@@@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 284				; 0000011cH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-296]
	mov	ecx, 71					; 00000047H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 37
	mov	eax, DWORD PTR _hashMethods$[ebp]
	push	eax
	lea	ecx, DWORD PTR _names$[ebp]
	call	??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z ; CObjectVector<UString>::CObjectVector<UString>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 38
	lea	ecx, DWORD PTR _names$[ebp]
	call	?IsEmpty@?$CObjectVector@VUString@@@@QBE_NXZ ; CObjectVector<UString>::IsEmpty
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN25@SetMethods
; Line 40
	lea	ecx, DWORD PTR _s$71088[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
; Line 41
	mov	edx, DWORD PTR _k_DefaultHashMethod
	push	edx
	lea	ecx, DWORD PTR _s$71088[ebp]
	call	?SetFromAscii@UString@@QAEXPBD@Z	; UString::SetFromAscii
; Line 42
	lea	eax, DWORD PTR _s$71088[ebp]
	push	eax
	lea	ecx, DWORD PTR _names$[ebp]
	call	?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z ; CObjectVector<UString>::Add
; Line 43
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _s$71088[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
$LN25@SetMethods:
; Line 45
	lea	ecx, DWORD PTR _ids$[ebp]
	call	??0?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
; Line 46
	lea	ecx, DWORD PTR _methods$[ebp]
	call	??0?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ ; CObjectVector<COneMethodInfo>::CObjectVector<COneMethodInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
; Line 49
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN24@SetMethods
$LN23@SetMethods:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN24@SetMethods:
	lea	ecx, DWORD PTR _names$[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	$LN22@SetMethods
; Line 51
	lea	ecx, DWORD PTR _m$71257[ebp]
	call	??0COneMethodInfo@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
; Line 52
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	lea	ecx, DWORD PTR _names$[ebp]
	call	??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[]
	push	eax
	lea	ecx, DWORD PTR _m$71257[ebp]
	call	?ParseMethodFromString@COneMethodInfo@@QAEJABVUString@@@Z ; COneMethodInfo::ParseMethodFromString
	mov	DWORD PTR ___result__$71258[ebp], eax
	cmp	DWORD PTR ___result__$71258[ebp], 0
	je	SHORT $LN21@SetMethods
	mov	eax, DWORD PTR ___result__$71258[ebp]
	mov	DWORD PTR $T72314[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _m$71257[ebp]
	call	??1COneMethodInfo@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _methods$[ebp]
	call	??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ ; CObjectVector<COneMethodInfo>::~CObjectVector<COneMethodInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _ids$[ebp]
	call	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _names$[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	eax, DWORD PTR $T72314[ebp]
	jmp	$LN27@SetMethods
$LN21@SetMethods:
; Line 54
	lea	ecx, DWORD PTR _m$71257[ebp+12]
	call	?IsEmpty@AString@@QBE_NXZ		; AString::IsEmpty
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN20@SetMethods
; Line 55
	mov	edx, DWORD PTR _k_DefaultHashMethod
	push	edx
	lea	ecx, DWORD PTR _m$71257[ebp+12]
	call	??4AString@@QAEAAV0@PBD@Z		; AString::operator=
$LN20@SetMethods:
; Line 57
	push	OFFSET $SG71263
	lea	eax, DWORD PTR _m$71257[ebp+12]
	push	eax
	call	??8@YG_NABVAString@@PBD@Z		; operator==
	movzx	ecx, al
	test	ecx, ecx
	je	$LN19@SetMethods
; Line 59
	lea	ecx, DWORD PTR _tempMethods$71265[ebp]
	call	??0?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>
	mov	BYTE PTR __$EHRec$[ebp+8], 5
; Line 60
	lea	edx, DWORD PTR _tempMethods$71265[ebp]
	push	edx
	call	?GetHashMethods@@YGXAAV?$CRecordVector@_K@@@Z ; GetHashMethods
; Line 61
	lea	ecx, DWORD PTR _methods$[ebp]
	call	?Clear@?$CObjectVector@VCOneMethodInfo@@@@QAEXXZ ; CObjectVector<COneMethodInfo>::Clear
; Line 62
	lea	ecx, DWORD PTR _ids$[ebp]
	call	?Clear@?$CRecordVector@_K@@QAEXXZ	; CRecordVector<unsigned __int64>::Clear
; Line 63
	mov	DWORD PTR _t$71266[ebp], 0
	jmp	SHORT $LN18@SetMethods
$LN17@SetMethods:
	mov	eax, DWORD PTR _t$71266[ebp]
	add	eax, 1
	mov	DWORD PTR _t$71266[ebp], eax
$LN18@SetMethods:
	lea	ecx, DWORD PTR _tempMethods$71265[ebp]
	call	?Size@?$CRecordVector@_K@@QBEIXZ	; CRecordVector<unsigned __int64>::Size
	cmp	DWORD PTR _t$71266[ebp], eax
	jae	SHORT $LN16@SetMethods
; Line 65
	mov	ecx, DWORD PTR _t$71266[ebp]
	push	ecx
	lea	ecx, DWORD PTR _tempMethods$71265[ebp]
	call	??A?$CRecordVector@_K@@QAEAA_KI@Z	; CRecordVector<unsigned __int64>::operator[]
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR _ids$[ebp]
	call	?AddToUniqueSorted@?$CRecordVector@_K@@QAEI_K@Z ; CRecordVector<unsigned __int64>::AddToUniqueSorted
	mov	DWORD PTR _index$71270[ebp], eax
; Line 66
	lea	ecx, DWORD PTR _ids$[ebp]
	call	?Size@?$CRecordVector@_K@@QBEIXZ	; CRecordVector<unsigned __int64>::Size
	mov	esi, eax
	lea	ecx, DWORD PTR _methods$[ebp]
	call	?Size@?$CObjectVector@VCOneMethodInfo@@@@QBEIXZ ; CObjectVector<COneMethodInfo>::Size
	cmp	esi, eax
	je	SHORT $LN15@SetMethods
; Line 67
	lea	ecx, DWORD PTR _m$71257[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$71270[ebp]
	push	edx
	lea	ecx, DWORD PTR _methods$[ebp]
	call	?Insert@?$CObjectVector@VCOneMethodInfo@@@@QAEXIABVCOneMethodInfo@@@Z ; CObjectVector<COneMethodInfo>::Insert
$LN15@SetMethods:
; Line 68
	jmp	SHORT $LN17@SetMethods
$LN16@SetMethods:
; Line 69
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _tempMethods$71265[ebp]
	call	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _m$71257[ebp]
	call	??1COneMethodInfo@@QAE@XZ
	jmp	$LN22@SetMethods
; Line 71
	jmp	$LN14@SetMethods
$LN19@SetMethods:
; Line 75
	lea	eax, DWORD PTR _id$71273[ebp]
	push	eax
	lea	ecx, DWORD PTR _m$71257[ebp+12]
	push	ecx
	call	?FindHashMethod@@YG_NABVAString@@AA_K@Z	; FindHashMethod
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN13@SetMethods
; Line 76
	mov	DWORD PTR $T72315[ebp], -2147467263	; 80004001H
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _m$71257[ebp]
	call	??1COneMethodInfo@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _methods$[ebp]
	call	??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ ; CObjectVector<COneMethodInfo>::~CObjectVector<COneMethodInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _ids$[ebp]
	call	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _names$[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	eax, DWORD PTR $T72315[ebp]
	jmp	$LN27@SetMethods
$LN13@SetMethods:
; Line 77
	mov	eax, DWORD PTR _id$71273[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _id$71273[ebp]
	push	ecx
	lea	ecx, DWORD PTR _ids$[ebp]
	call	?AddToUniqueSorted@?$CRecordVector@_K@@QAEI_K@Z ; CRecordVector<unsigned __int64>::AddToUniqueSorted
	mov	DWORD PTR _index$71277[ebp], eax
; Line 78
	lea	ecx, DWORD PTR _ids$[ebp]
	call	?Size@?$CRecordVector@_K@@QBEIXZ	; CRecordVector<unsigned __int64>::Size
	mov	esi, eax
	lea	ecx, DWORD PTR _methods$[ebp]
	call	?Size@?$CObjectVector@VCOneMethodInfo@@@@QBEIXZ ; CObjectVector<COneMethodInfo>::Size
	cmp	esi, eax
	je	SHORT $LN14@SetMethods
; Line 79
	lea	edx, DWORD PTR _m$71257[ebp]
	push	edx
	mov	eax, DWORD PTR _index$71277[ebp]
	push	eax
	lea	ecx, DWORD PTR _methods$[ebp]
	call	?Insert@?$CObjectVector@VCOneMethodInfo@@@@QAEXIABVCOneMethodInfo@@@Z ; CObjectVector<COneMethodInfo>::Insert
$LN14@SetMethods:
; Line 81
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _m$71257[ebp]
	call	??1COneMethodInfo@@QAE@XZ
	jmp	$LN23@SetMethods
$LN22@SetMethods:
; Line 83
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN11@SetMethods
$LN10@SetMethods:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN11@SetMethods:
	lea	ecx, DWORD PTR _ids$[ebp]
	call	?Size@?$CRecordVector@_K@@QBEIXZ	; CRecordVector<unsigned __int64>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	$LN9@SetMethods
; Line 85
	lea	ecx, DWORD PTR _hasher$71283[ebp]
	call	??0?$CMyComPtr@UIHasher@@@@QAE@XZ	; CMyComPtr<IHasher>::CMyComPtr<IHasher>
	mov	BYTE PTR __$EHRec$[ebp+8], 6
; Line 86
	lea	ecx, DWORD PTR _name$71284[ebp]
	call	??0AString@@QAE@XZ			; AString::AString
	mov	BYTE PTR __$EHRec$[ebp+8], 7
; Line 87
	lea	edx, DWORD PTR _hasher$71283[ebp]
	push	edx
	lea	eax, DWORD PTR _name$71284[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _ids$[ebp]
	call	??A?$CRecordVector@_K@@QAEAA_KI@Z	; CRecordVector<unsigned __int64>::operator[]
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?CreateHasher@@YGJ_KAAVAString@@AAV?$CMyComPtr@UIHasher@@@@@Z ; CreateHasher
	mov	DWORD PTR ___result__$71285[ebp], eax
	cmp	DWORD PTR ___result__$71285[ebp], 0
	je	SHORT $LN8@SetMethods
	mov	ecx, DWORD PTR ___result__$71285[ebp]
	mov	DWORD PTR $T72316[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _name$71284[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _hasher$71283[ebp]
	call	??1?$CMyComPtr@UIHasher@@@@QAE@XZ	; CMyComPtr<IHasher>::~CMyComPtr<IHasher>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _methods$[ebp]
	call	??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ ; CObjectVector<COneMethodInfo>::~CObjectVector<COneMethodInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _ids$[ebp]
	call	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _names$[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	eax, DWORD PTR $T72316[ebp]
	jmp	$LN27@SetMethods
$LN8@SetMethods:
; Line 88
	lea	ecx, DWORD PTR _hasher$71283[ebp]
	call	??7?$CMyComPtr@UIHasher@@@@QBE_NXZ	; CMyComPtr<IHasher>::operator!
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN7@SetMethods
; Line 89
	mov	DWORD PTR $T72317[ebp], OFFSET $SG71297
	push	OFFSET __TI2PAD
	lea	eax, DWORD PTR $T72317[ebp]
	push	eax
	call	__CxxThrowException@8
$LN7@SetMethods:
; Line 90
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _methods$[ebp]
	call	??A?$CObjectVector@VCOneMethodInfo@@@@QAEAAVCOneMethodInfo@@I@Z ; CObjectVector<COneMethodInfo>::operator[]
	mov	DWORD PTR _m$71298[ebp], eax
; Line 92
	lea	ecx, DWORD PTR _scp$71336[ebp]
	call	??0?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderProperties>::CMyComPtr<ICompressSetCoderProperties>
	mov	BYTE PTR __$EHRec$[ebp+8], 8
; Line 93
	lea	ecx, DWORD PTR _scp$71336[ebp]
	call	??I?$CMyComPtr@UICompressSetCoderProperties@@@@QAEPAPAUICompressSetCoderProperties@@XZ ; CMyComPtr<ICompressSetCoderProperties>::operator&
	push	eax
	push	OFFSET _IID_ICompressSetCoderProperties
	lea	ecx, DWORD PTR _hasher$71283[ebp]
	call	??$QueryInterface@UICompressSetCoderProperties@@@?$CMyComPtr@UIHasher@@@@QBEJABU_GUID@@PAPAUICompressSetCoderProperties@@@Z ; CMyComPtr<IHasher>::QueryInterface<ICompressSetCoderProperties>
; Line 94
	lea	ecx, DWORD PTR _scp$71336[ebp]
	call	??B?$CMyComPtr@UICompressSetCoderProperties@@@@QBEPAUICompressSetCoderProperties@@XZ ; CMyComPtr<ICompressSetCoderProperties>::operator ICompressSetCoderProperties *
	test	eax, eax
	je	$LN6@SetMethods
; Line 95
	push	0
	lea	ecx, DWORD PTR _scp$71336[ebp]
	call	??B?$CMyComPtr@UICompressSetCoderProperties@@@@QBEPAUICompressSetCoderProperties@@XZ ; CMyComPtr<ICompressSetCoderProperties>::operator ICompressSetCoderProperties *
	push	eax
	mov	ecx, DWORD PTR _m$71298[ebp]
	call	?SetCoderProps@CProps@@QBEJPAUICompressSetCoderProperties@@PB_K@Z ; CProps::SetCoderProps
	mov	DWORD PTR ___result__$71342[ebp], eax
	cmp	DWORD PTR ___result__$71342[ebp], 0
	je	SHORT $LN6@SetMethods
	mov	edx, DWORD PTR ___result__$71342[ebp]
	mov	DWORD PTR $T72319[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _scp$71336[ebp]
	call	??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderProperties>::~CMyComPtr<ICompressSetCoderProperties>
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _name$71284[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _hasher$71283[ebp]
	call	??1?$CMyComPtr@UIHasher@@@@QAE@XZ	; CMyComPtr<IHasher>::~CMyComPtr<IHasher>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _methods$[ebp]
	call	??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ ; CObjectVector<COneMethodInfo>::~CObjectVector<COneMethodInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _ids$[ebp]
	call	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _names$[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	eax, DWORD PTR $T72319[ebp]
	jmp	$LN27@SetMethods
$LN6@SetMethods:
; Line 96
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _scp$71336[ebp]
	call	??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderProperties>::~CMyComPtr<ICompressSetCoderProperties>
; Line 97
	lea	ecx, DWORD PTR _hasher$71283[ebp]
	call	??C?$CMyComPtr@UIHasher@@@@QBEPAUIHasher@@XZ ; CMyComPtr<IHasher>::operator->
	mov	DWORD PTR tv234[ebp], eax
	mov	eax, DWORD PTR tv234[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR tv234[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _digestSize$71345[ebp], eax
; Line 98
	cmp	DWORD PTR _digestSize$71345[ebp], 64	; 00000040H
	jbe	SHORT $LN4@SetMethods
; Line 99
	mov	DWORD PTR $T72320[ebp], -2147467263	; 80004001H
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _name$71284[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _hasher$71283[ebp]
	call	??1?$CMyComPtr@UIHasher@@@@QAE@XZ	; CMyComPtr<IHasher>::~CMyComPtr<IHasher>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _methods$[ebp]
	call	??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ ; CObjectVector<COneMethodInfo>::~CObjectVector<COneMethodInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _ids$[ebp]
	call	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _names$[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	eax, DWORD PTR $T72320[ebp]
	jmp	$LN27@SetMethods
$LN4@SetMethods:
; Line 100
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?AddNew@?$CObjectVector@UCHasherState@@@@QAEAAUCHasherState@@XZ ; CObjectVector<CHasherState>::AddNew
	mov	DWORD PTR _h$71349[ebp], eax
; Line 101
	lea	ecx, DWORD PTR _hasher$71283[ebp]
	push	ecx
	mov	ecx, DWORD PTR _h$71349[ebp]
	call	??4?$CMyComPtr@UIHasher@@@@QAEPAUIHasher@@ABV0@@Z ; CMyComPtr<IHasher>::operator=
; Line 102
	lea	edx, DWORD PTR _name$71284[ebp]
	push	edx
	mov	ecx, DWORD PTR _h$71349[ebp]
	add	ecx, 4
	call	??4AString@@QAEAAV0@ABV0@@Z		; AString::operator=
; Line 103
	mov	eax, DWORD PTR _h$71349[ebp]
	mov	ecx, DWORD PTR _digestSize$71345[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 104
	mov	DWORD PTR _i$71350[ebp], 0
	jmp	SHORT $LN3@SetMethods
$LN2@SetMethods:
	mov	edx, DWORD PTR _i$71350[ebp]
	add	edx, 1
	mov	DWORD PTR _i$71350[ebp], edx
$LN3@SetMethods:
	cmp	DWORD PTR _i$71350[ebp], 4
	jae	SHORT $LN1@SetMethods
; Line 105
	mov	eax, DWORD PTR _digestSize$71345[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _i$71350[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR _h$71349[ebp]
	lea	eax, DWORD PTR [edx+ecx+20]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN2@SetMethods
$LN1@SetMethods:
; Line 106
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _name$71284[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _hasher$71283[ebp]
	call	??1?$CMyComPtr@UIHasher@@@@QAE@XZ	; CMyComPtr<IHasher>::~CMyComPtr<IHasher>
	jmp	$LN10@SetMethods
$LN9@SetMethods:
; Line 108
	mov	DWORD PTR $T72321[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _methods$[ebp]
	call	??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ ; CObjectVector<COneMethodInfo>::~CObjectVector<COneMethodInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _ids$[ebp]
	call	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _names$[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	eax, DWORD PTR $T72321[ebp]
$LN27@SetMethods:
; Line 109
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN49@SetMethods
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 296				; 00000128H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN49@SetMethods:
	DD	10					; 0000000aH
	DD	$LN48@SetMethods
$LN48@SetMethods:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN37@SetMethods
	DD	-52					; ffffffccH
	DD	12					; 0000000cH
	DD	$LN38@SetMethods
	DD	-72					; ffffffb8H
	DD	12					; 0000000cH
	DD	$LN39@SetMethods
	DD	-92					; ffffffa4H
	DD	12					; 0000000cH
	DD	$LN40@SetMethods
	DD	-140					; ffffff74H
	DD	36					; 00000024H
	DD	$LN41@SetMethods
	DD	-164					; ffffff5cH
	DD	12					; 0000000cH
	DD	$LN42@SetMethods
	DD	-188					; ffffff44H
	DD	8
	DD	$LN43@SetMethods
	DD	-204					; ffffff34H
	DD	4
	DD	$LN44@SetMethods
	DD	-224					; ffffff20H
	DD	12					; 0000000cH
	DD	$LN45@SetMethods
	DD	-244					; ffffff0cH
	DD	4
	DD	$LN46@SetMethods
$LN46@SetMethods:
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	112					; 00000070H
	DB	0
$LN45@SetMethods:
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN44@SetMethods:
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN43@SetMethods:
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	0
$LN42@SetMethods:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	77					; 0000004dH
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN41@SetMethods:
	DB	109					; 0000006dH
	DB	0
$LN40@SetMethods:
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN39@SetMethods:
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN38@SetMethods:
	DB	115					; 00000073H
	DB	0
$LN37@SetMethods:
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SetMethods@CHashBundle@@QAEJABV?$CObjectVector@VUString@@@@@Z$0:
	lea	ecx, DWORD PTR _names$[ebp]
	jmp	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
__unwindfunclet$?SetMethods@CHashBundle@@QAEJABV?$CObjectVector@VUString@@@@@Z$1:
	lea	ecx, DWORD PTR _s$71088[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?SetMethods@CHashBundle@@QAEJABV?$CObjectVector@VUString@@@@@Z$2:
	lea	ecx, DWORD PTR _ids$[ebp]
	jmp	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
__unwindfunclet$?SetMethods@CHashBundle@@QAEJABV?$CObjectVector@VUString@@@@@Z$3:
	lea	ecx, DWORD PTR _methods$[ebp]
	jmp	??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ ; CObjectVector<COneMethodInfo>::~CObjectVector<COneMethodInfo>
__unwindfunclet$?SetMethods@CHashBundle@@QAEJABV?$CObjectVector@VUString@@@@@Z$4:
	lea	ecx, DWORD PTR _m$71257[ebp]
	jmp	??1COneMethodInfo@@QAE@XZ
__unwindfunclet$?SetMethods@CHashBundle@@QAEJABV?$CObjectVector@VUString@@@@@Z$5:
	lea	ecx, DWORD PTR _tempMethods$71265[ebp]
	jmp	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
__unwindfunclet$?SetMethods@CHashBundle@@QAEJABV?$CObjectVector@VUString@@@@@Z$6:
	lea	ecx, DWORD PTR _hasher$71283[ebp]
	jmp	??1?$CMyComPtr@UIHasher@@@@QAE@XZ	; CMyComPtr<IHasher>::~CMyComPtr<IHasher>
__unwindfunclet$?SetMethods@CHashBundle@@QAEJABV?$CObjectVector@VUString@@@@@Z$7:
	lea	ecx, DWORD PTR _name$71284[ebp]
	jmp	??1AString@@QAE@XZ			; AString::~AString
__unwindfunclet$?SetMethods@CHashBundle@@QAEJABV?$CObjectVector@VUString@@@@@Z$8:
	lea	ecx, DWORD PTR _scp$71336[ebp]
	jmp	??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderProperties>::~CMyComPtr<ICompressSetCoderProperties>
__ehhandler$?SetMethods@CHashBundle@@QAEJABV?$CObjectVector@VUString@@@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-296]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetMethods@CHashBundle@@QAEJABV?$CObjectVector@VUString@@@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetMethods@CHashBundle@@QAEJABV?$CObjectVector@VUString@@@@@Z ENDP ; CHashBundle::SetMethods
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1AString@@QAE@XZ
_TEXT	SEGMENT
$T72361 = -8						; size = 4
_this$ = -4						; size = 4
??1AString@@QAE@XZ PROC					; AString::~AString, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 232
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T72361[ebp], ecx
	mov	edx, DWORD PTR $T72361[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1AString@@QAE@XZ ENDP					; AString::~AString
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsEmpty@AString@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@AString@@QBE_NXZ PROC				; AString::IsEmpty, COMDAT
; _this$ = ecx
; Line 235
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+4], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@AString@@QBE_NXZ ENDP				; AString::IsEmpty
_TEXT	ENDS
PUBLIC	??BAString@@QBEPBDXZ				; AString::operator char const *
EXTRN	_strcmp:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??8@YG_NABVAString@@PBD@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
??8@YG_NABVAString@@PBD@Z PROC				; operator==, COMDAT
; Line 391
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _s2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s1$[ebp]
	call	??BAString@@QBEPBDXZ			; AString::operator char const *
	push	eax
	call	_strcmp
	add	esp, 8
	neg	eax
	sbb	eax, eax
	add	eax, 1
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
??8@YG_NABVAString@@PBD@Z ENDP				; operator==
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??BAString@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BAString@@QBEPBDXZ PROC				; AString::operator char const *, COMDAT
; _this$ = ecx
; Line 238
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??BAString@@QBEPBDXZ ENDP				; AString::operator char const *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1UString@@QAE@XZ
_TEXT	SEGMENT
$T72370 = -8						; size = 4
_this$ = -4						; size = 4
??1UString@@QAE@XZ PROC					; UString::~UString, COMDAT
; _this$ = ecx
; Line 470
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T72370[ebp], ecx
	mov	edx, DWORD PTR $T72370[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1UString@@QAE@XZ ENDP					; UString::~UString
_TEXT	ENDS
PUBLIC	??1CMethodProps@@QAE@XZ				; CMethodProps::~CMethodProps
PUBLIC	??0CMethodProps@@QAE@XZ				; CMethodProps::CMethodProps
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0COneMethodInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0COneMethodInfo@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0COneMethodInfo@@QAE@XZ$1
__ehfuncinfo$??0COneMethodInfo@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0COneMethodInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0COneMethodInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0COneMethodInfo@@QAE@XZ PROC				; COneMethodInfo::COneMethodInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0COneMethodInfo@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CMethodProps@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0AString@@QAE@XZ			; AString::AString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0COneMethodInfo@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CMethodProps@@QAE@XZ
__unwindfunclet$??0COneMethodInfo@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1AString@@QAE@XZ			; AString::~AString
__ehhandler$??0COneMethodInfo@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0COneMethodInfo@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0COneMethodInfo@@QAE@XZ ENDP				; COneMethodInfo::COneMethodInfo
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1COneMethodInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1COneMethodInfo@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1COneMethodInfo@@QAE@XZ$1
__ehfuncinfo$??1COneMethodInfo@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1COneMethodInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1COneMethodInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1COneMethodInfo@@QAE@XZ PROC				; COneMethodInfo::~COneMethodInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1COneMethodInfo@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CMethodProps@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1COneMethodInfo@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CMethodProps@@QAE@XZ
__unwindfunclet$??1COneMethodInfo@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1AString@@QAE@XZ			; AString::~AString
__ehhandler$??1COneMethodInfo@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1COneMethodInfo@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1COneMethodInfo@@QAE@XZ ENDP				; COneMethodInfo::~COneMethodInfo
PUBLIC	??0CProps@@QAE@XZ				; CProps::CProps
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CMethodProps@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMethodProps@@QAE@XZ PROC				; CMethodProps::CMethodProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CProps@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CMethodProps@@QAE@XZ ENDP				; CMethodProps::CMethodProps
_TEXT	ENDS
PUBLIC	??1CProps@@QAE@XZ				; CProps::~CProps
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CMethodProps@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CMethodProps@@QAE@XZ PROC				; CMethodProps::~CMethodProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CProps@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CMethodProps@@QAE@XZ ENDP				; CMethodProps::~CMethodProps
_TEXT	ENDS
PUBLIC	??0?$CObjectVector@UCProp@@@@QAE@XZ		; CObjectVector<CProp>::CObjectVector<CProp>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CProps@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CProps@@QAE@XZ PROC					; CProps::CProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CObjectVector@UCProp@@@@QAE@XZ	; CObjectVector<CProp>::CObjectVector<CProp>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CProps@@QAE@XZ ENDP					; CProps::CProps
_TEXT	ENDS
PUBLIC	??1?$CObjectVector@UCProp@@@@QAE@XZ		; CObjectVector<CProp>::~CObjectVector<CProp>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CProps@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CProps@@QAE@XZ PROC					; CProps::~CProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CObjectVector@UCProp@@@@QAE@XZ	; CObjectVector<CProp>::~CObjectVector<CProp>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CProps@@QAE@XZ ENDP					; CProps::~CProps
_TEXT	ENDS
PUBLIC	??A?$CObjectVector@UCHasherState@@@@QAEAAUCHasherState@@I@Z ; CObjectVector<CHasherState>::operator[]
PUBLIC	?Size@?$CObjectVector@UCHasherState@@@@QBEIXZ	; CObjectVector<CHasherState>::Size
PUBLIC	?InitForNewFile@CHashBundle@@UAEXXZ		; CHashBundle::InitForNewFile
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv77 = -16						; size = 4
_h$71376 = -12						; size = 4
_i$71372 = -8						; size = 4
_this$ = -4						; size = 4
?InitForNewFile@CHashBundle@@UAEXXZ PROC		; CHashBundle::InitForNewFile
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\hashcalc.cpp
; Line 112
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 113
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+64], 0
	mov	DWORD PTR [eax+68], 0
; Line 114
	mov	DWORD PTR _i$71372[ebp], 0
	jmp	SHORT $LN3@InitForNew
$LN2@InitForNew:
	mov	ecx, DWORD PTR _i$71372[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$71372[ebp], ecx
$LN3@InitForNew:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Size@?$CObjectVector@UCHasherState@@@@QBEIXZ ; CObjectVector<CHasherState>::Size
	cmp	DWORD PTR _i$71372[ebp], eax
	jae	SHORT $LN4@InitForNew
; Line 116
	mov	edx, DWORD PTR _i$71372[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??A?$CObjectVector@UCHasherState@@@@QAEAAUCHasherState@@I@Z ; CObjectVector<CHasherState>::operator[]
	mov	DWORD PTR _h$71376[ebp], eax
; Line 117
	mov	ecx, DWORD PTR _h$71376[ebp]
	call	??C?$CMyComPtr@UIHasher@@@@QBEPAUIHasher@@XZ ; CMyComPtr<IHasher>::operator->
	mov	DWORD PTR tv77[ebp], eax
	mov	eax, DWORD PTR tv77[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR tv77[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 118
	mov	ecx, DWORD PTR _h$71376[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	push	0
	mov	eax, DWORD PTR _h$71376[ebp]
	add	eax, 20					; 00000014H
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 119
	jmp	SHORT $LN2@InitForNew
$LN4@InitForNew:
; Line 120
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?InitForNewFile@CHashBundle@@UAEXXZ ENDP		; CHashBundle::InitForNewFile
_TEXT	ENDS
PUBLIC	?Update@CHashBundle@@UAEXPBXI@Z			; CHashBundle::Update
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv80 = -12						; size = 4
_i$71382 = -8						; size = 4
_this$ = -4						; size = 4
_data$ = 8						; size = 4
_size$ = 12						; size = 4
?Update@CHashBundle@@UAEXPBXI@Z PROC			; CHashBundle::Update
; _this$ = ecx
; Line 123
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 124
	mov	eax, DWORD PTR _size$[ebp]
	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [edx+64]
	adc	ecx, DWORD PTR [edx+68]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+64], eax
	mov	DWORD PTR [edx+68], ecx
; Line 125
	mov	DWORD PTR _i$71382[ebp], 0
	jmp	SHORT $LN3@Update
$LN2@Update:
	mov	eax, DWORD PTR _i$71382[ebp]
	add	eax, 1
	mov	DWORD PTR _i$71382[ebp], eax
$LN3@Update:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Size@?$CObjectVector@UCHasherState@@@@QBEIXZ ; CObjectVector<CHasherState>::Size
	cmp	DWORD PTR _i$71382[ebp], eax
	jae	SHORT $LN4@Update
; Line 126
	mov	ecx, DWORD PTR _i$71382[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??A?$CObjectVector@UCHasherState@@@@QAEAAUCHasherState@@I@Z ; CObjectVector<CHasherState>::operator[]
	mov	ecx, eax
	call	??C?$CMyComPtr@UIHasher@@@@QBEPAUIHasher@@XZ ; CMyComPtr<IHasher>::operator->
	mov	DWORD PTR tv80[ebp], eax
	mov	esi, esp
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv80[ebp]
	push	ecx
	mov	edx, DWORD PTR tv80[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN2@Update
$LN4@Update:
; Line 127
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Update@CHashBundle@@UAEXPBXI@Z ENDP			; CHashBundle::Update
_TEXT	ENDS
PUBLIC	?SetSize@CHashBundle@@UAEX_K@Z			; CHashBundle::SetSize
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_size$ = 8						; size = 8
?SetSize@CHashBundle@@UAEX_K@Z PROC			; CHashBundle::SetSize
; _this$ = ecx
; Line 130
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 131
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+64], ecx
	mov	edx, DWORD PTR _size$[ebp+4]
	mov	DWORD PTR [eax+68], edx
; Line 132
	mov	esp, ebp
	pop	ebp
	ret	8
?SetSize@CHashBundle@@UAEX_K@Z ENDP			; CHashBundle::SetSize
_TEXT	ENDS
PUBLIC	??BUString@@QBEPB_WXZ				; UString::operator wchar_t const *
PUBLIC	?Len@UString@@QBEIXZ				; UString::Len
PUBLIC	__$ArrayPad$
PUBLIC	?Final@CHashBundle@@UAEX_N0ABVUString@@@Z	; CHashBundle::Final
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv206 = -156						; size = 4
tv198 = -152						; size = 4
tv172 = -148						; size = 4
tv164 = -144						; size = 4
tv158 = -140						; size = 4
tv139 = -136						; size = 4
_tempDigest$71430 = -128				; size = 64
_temp$71427 = -56					; size = 2
_c$71426 = -48						; size = 2
_k$71422 = -44						; size = 4
_h$71419 = -40						; size = 4
_i$71415 = -36						; size = 4
_pre$ = -28						; size = 16
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_isDir$ = 8						; size = 1
_isAltStream$ = 12					; size = 1
_path$ = 16						; size = 4
?Final@CHashBundle@@UAEX_N0ABVUString@@@Z PROC		; CHashBundle::Final
; _this$ = ecx
; Line 146
	push	ebp
	mov	ebp, esp
	sub	esp, 156				; 0000009cH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-156]
	mov	ecx, 39					; 00000027H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 147
	movzx	eax, BYTE PTR _isDir$[ebp]
	test	eax, eax
	je	SHORT $LN14@Final
; Line 148
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	add	edx, 1
	mov	eax, DWORD PTR [ecx+20]
	adc	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], edx
	mov	DWORD PTR [ecx+20], eax
	jmp	SHORT $LN13@Final
$LN14@Final:
; Line 149
	movzx	edx, BYTE PTR _isAltStream$[ebp]
	test	edx, edx
	je	SHORT $LN12@Final
; Line 151
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+36]
	adc	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], ecx
	mov	DWORD PTR [eax+36], edx
; Line 152
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+48]
	add	eax, DWORD PTR [edx+64]
	mov	ecx, DWORD PTR [ecx+52]
	adc	ecx, DWORD PTR [edx+68]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+48], eax
	mov	DWORD PTR [edx+52], ecx
; Line 154
	jmp	SHORT $LN13@Final
$LN12@Final:
; Line 156
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+28]
	adc	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], ecx
	mov	DWORD PTR [eax+28], edx
; Line 157
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+40]
	add	eax, DWORD PTR [edx+64]
	mov	ecx, DWORD PTR [ecx+44]
	adc	ecx, DWORD PTR [edx+68]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+40], eax
	mov	DWORD PTR [edx+44], ecx
$LN13@Final:
; Line 161
	push	16					; 00000010H
	push	0
	lea	eax, DWORD PTR _pre$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 162
	movzx	ecx, BYTE PTR _isDir$[ebp]
	test	ecx, ecx
	je	SHORT $LN10@Final
; Line 163
	mov	BYTE PTR _pre$[ebp], 1
$LN10@Final:
; Line 165
	mov	DWORD PTR _i$71415[ebp], 0
	jmp	SHORT $LN9@Final
$LN8@Final:
	mov	edx, DWORD PTR _i$71415[ebp]
	add	edx, 1
	mov	DWORD PTR _i$71415[ebp], edx
$LN9@Final:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Size@?$CObjectVector@UCHasherState@@@@QBEIXZ ; CObjectVector<CHasherState>::Size
	cmp	DWORD PTR _i$71415[ebp], eax
	jae	$LN15@Final
; Line 167
	mov	eax, DWORD PTR _i$71415[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??A?$CObjectVector@UCHasherState@@@@QAEAAUCHasherState@@I@Z ; CObjectVector<CHasherState>::operator[]
	mov	DWORD PTR _h$71419[ebp], eax
; Line 168
	movzx	ecx, BYTE PTR _isDir$[ebp]
	test	ecx, ecx
	jne	SHORT $LN6@Final
; Line 170
	mov	ecx, DWORD PTR _h$71419[ebp]
	call	??C?$CMyComPtr@UIHasher@@@@QBEPAUIHasher@@XZ ; CMyComPtr<IHasher>::operator->
	mov	DWORD PTR tv139[ebp], eax
	mov	edx, DWORD PTR _h$71419[ebp]
	add	edx, 20					; 00000014H
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR tv139[ebp]
	push	eax
	mov	ecx, DWORD PTR tv139[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 171
	movzx	ecx, BYTE PTR _isAltStream$[ebp]
	test	ecx, ecx
	jne	SHORT $LN6@Final
; Line 172
	mov	edx, DWORD PTR _h$71419[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _h$71419[ebp]
	add	ecx, 20					; 00000014H
	push	ecx
	mov	edx, DWORD PTR _h$71419[ebp]
	add	edx, 84					; 00000054H
	push	edx
	call	?AddDigests@@YGXPAEPBEI@Z		; AddDigests
$LN6@Final:
; Line 175
	mov	ecx, DWORD PTR _h$71419[ebp]
	call	??C?$CMyComPtr@UIHasher@@@@QBEPAUIHasher@@XZ ; CMyComPtr<IHasher>::operator->
	mov	DWORD PTR tv158[ebp], eax
	mov	eax, DWORD PTR tv158[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR tv158[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 176
	mov	ecx, DWORD PTR _h$71419[ebp]
	call	??C?$CMyComPtr@UIHasher@@@@QBEPAUIHasher@@XZ ; CMyComPtr<IHasher>::operator->
	mov	DWORD PTR tv164[ebp], eax
	mov	esi, esp
	push	16					; 00000010H
	lea	ecx, DWORD PTR _pre$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv164[ebp]
	push	edx
	mov	eax, DWORD PTR tv164[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 177
	mov	ecx, DWORD PTR _h$71419[ebp]
	call	??C?$CMyComPtr@UIHasher@@@@QBEPAUIHasher@@XZ ; CMyComPtr<IHasher>::operator->
	mov	DWORD PTR tv172[ebp], eax
	mov	esi, esp
	mov	eax, DWORD PTR _h$71419[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _h$71419[ebp]
	add	edx, 20					; 00000014H
	push	edx
	mov	eax, DWORD PTR tv172[ebp]
	push	eax
	mov	ecx, DWORD PTR tv172[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 179
	mov	DWORD PTR _k$71422[ebp], 0
	jmp	SHORT $LN4@Final
$LN3@Final:
	mov	ecx, DWORD PTR _k$71422[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$71422[ebp], ecx
$LN4@Final:
	mov	ecx, DWORD PTR _path$[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	cmp	DWORD PTR _k$71422[ebp], eax
	jae	SHORT $LN2@Final
; Line 181
	mov	ecx, DWORD PTR _path$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	edx, DWORD PTR _k$71422[ebp]
	mov	ax, WORD PTR [eax+edx*2]
	mov	WORD PTR _c$71426[ebp], ax
; Line 182
	movzx	ecx, WORD PTR _c$71426[ebp]
	and	ecx, 255				; 000000ffH
	mov	BYTE PTR _temp$71427[ebp], cl
	movzx	edx, WORD PTR _c$71426[ebp]
	sar	edx, 8
	and	edx, 255				; 000000ffH
	mov	BYTE PTR _temp$71427[ebp+1], dl
; Line 183
	mov	ecx, DWORD PTR _h$71419[ebp]
	call	??C?$CMyComPtr@UIHasher@@@@QBEPAUIHasher@@XZ ; CMyComPtr<IHasher>::operator->
	mov	DWORD PTR tv198[ebp], eax
	mov	esi, esp
	push	2
	lea	eax, DWORD PTR _temp$71427[ebp]
	push	eax
	mov	ecx, DWORD PTR tv198[ebp]
	push	ecx
	mov	edx, DWORD PTR tv198[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 184
	jmp	SHORT $LN3@Final
$LN2@Final:
; Line 187
	mov	ecx, DWORD PTR _h$71419[ebp]
	call	??C?$CMyComPtr@UIHasher@@@@QBEPAUIHasher@@XZ ; CMyComPtr<IHasher>::operator->
	mov	DWORD PTR tv206[ebp], eax
	mov	esi, esp
	lea	edx, DWORD PTR _tempDigest$71430[ebp]
	push	edx
	mov	eax, DWORD PTR tv206[ebp]
	push	eax
	mov	ecx, DWORD PTR tv206[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 188
	movzx	ecx, BYTE PTR _isAltStream$[ebp]
	test	ecx, ecx
	jne	SHORT $LN1@Final
; Line 189
	mov	edx, DWORD PTR _h$71419[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	lea	ecx, DWORD PTR _tempDigest$71430[ebp]
	push	ecx
	mov	edx, DWORD PTR _h$71419[ebp]
	add	edx, 148				; 00000094H
	push	edx
	call	?AddDigests@@YGXPAEPBEI@Z		; AddDigests
$LN1@Final:
; Line 190
	mov	eax, DWORD PTR _h$71419[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	lea	edx, DWORD PTR _tempDigest$71430[ebp]
	push	edx
	mov	eax, DWORD PTR _h$71419[ebp]
	add	eax, 212				; 000000d4H
	push	eax
	call	?AddDigests@@YGXPAEPBEI@Z		; AddDigests
; Line 191
	jmp	$LN8@Final
$LN15@Final:
; Line 192
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN21@Final
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 156				; 0000009cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN21@Final:
	DD	3
	DD	$LN20@Final
$LN20@Final:
	DD	-28					; ffffffe4H
	DD	16					; 00000010H
	DD	$LN17@Final
	DD	-56					; ffffffc8H
	DD	2
	DD	$LN18@Final
	DD	-128					; ffffff80H
	DD	64					; 00000040H
	DD	$LN19@Final
$LN19@Final:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	68					; 00000044H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN18@Final:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
$LN17@Final:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	0
?Final@CHashBundle@@UAEX_N0ABVUString@@@Z ENDP		; CHashBundle::Final
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Len@UString@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Len@UString@@QBEIXZ PROC				; UString::Len, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 472
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Len@UString@@QBEIXZ ENDP				; UString::Len
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??BUString@@QBEPB_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BUString@@QBEPB_WXZ PROC				; UString::operator wchar_t const *, COMDAT
; _this$ = ecx
; Line 476
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??BUString@@QBEPB_WXZ ENDP				; UString::operator wchar_t const *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
_TEXT	SEGMENT
_i$71396 = -8						; size = 4
_next$ = -4						; size = 4
_dest$ = 8						; size = 4
_src$ = 12						; size = 4
_size$ = 16						; size = 4
?AddDigests@@YGXPAEPBEI@Z PROC				; AddDigests
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\hashcalc.cpp
; Line 135
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 136
	mov	DWORD PTR _next$[ebp], 0
; Line 137
	mov	DWORD PTR _i$71396[ebp], 0
	jmp	SHORT $LN3@AddDigests
$LN2@AddDigests:
	mov	eax, DWORD PTR _i$71396[ebp]
	add	eax, 1
	mov	DWORD PTR _i$71396[ebp], eax
$LN3@AddDigests:
	mov	ecx, DWORD PTR _i$71396[ebp]
	cmp	ecx, DWORD PTR _size$[ebp]
	jae	SHORT $LN4@AddDigests
; Line 139
	mov	edx, DWORD PTR _dest$[ebp]
	add	edx, DWORD PTR _i$71396[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _src$[ebp]
	add	ecx, DWORD PTR _i$71396[ebp]
	movzx	edx, BYTE PTR [ecx]
	add	edx, DWORD PTR _next$[ebp]
	add	edx, eax
	mov	DWORD PTR _next$[ebp], edx
; Line 140
	mov	eax, DWORD PTR _dest$[ebp]
	add	eax, DWORD PTR _i$71396[ebp]
	mov	cl, BYTE PTR _next$[ebp]
	mov	BYTE PTR [eax], cl
; Line 141
	mov	edx, DWORD PTR _next$[ebp]
	shr	edx, 8
	mov	DWORD PTR _next$[ebp], edx
; Line 142
	jmp	SHORT $LN2@AddDigests
$LN4@AddDigests:
; Line 143
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?AddDigests@@YGXPAEPBEI@Z ENDP				; AddDigests
_TEXT	ENDS
PUBLIC	??BCHashMidBuf@@QAEPAXXZ			; CHashMidBuf::operator void *
PUBLIC	??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator->
PUBLIC	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ	; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
PUBLIC	?OpenShared@CInFileStream@@QAE_NPB_W_N@Z	; CInFileStream::OpenShared
PUBLIC	?IsDir@CDirItem@@QBE_NXZ			; CDirItem::IsDir
PUBLIC	??A?$CObjectVector@UCDirItem@@@@QAEAAUCDirItem@@I@Z ; CObjectVector<CDirItem>::operator[]
PUBLIC	??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=
PUBLIC	??0CStdInFileStream@@QAE@XZ			; CStdInFileStream::CStdInFileStream
PUBLIC	??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ	; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
PUBLIC	?Size@?$CObjectVector@UCDirItem@@@@QBEIXZ	; CObjectVector<CDirItem>::Size
PUBLIC	??1CHashMidBuf@@QAE@XZ				; CHashMidBuf::~CHashMidBuf
PUBLIC	?Alloc@CHashMidBuf@@QAE_NI@Z			; CHashMidBuf::Alloc
PUBLIC	??0CHashMidBuf@@QAE@XZ				; CHashMidBuf::CHashMidBuf
PUBLIC	?GetTotalBytes@CDirItemsStat@@QBE_KXZ		; CDirItemsStat::GetTotalBytes
PUBLIC	?Init@CHashBundle@@QAEXXZ			; CHashBundle::Init
PUBLIC	??1CHashBundle@@QAE@XZ				; CHashBundle::~CHashBundle
PUBLIC	??0CHashBundle@@QAE@XZ				; CHashBundle::CHashBundle
PUBLIC	??1CDirItems@@QAE@XZ				; CDirItems::~CDirItems
PUBLIC	??1CDirItem@@QAE@XZ				; CDirItem::~CDirItem
PUBLIC	?Add@?$CObjectVector@UCDirItem@@@@QAEIABUCDirItem@@@Z ; CObjectVector<CDirItem>::Add
PUBLIC	??0CDirItem@@QAE@XZ				; CDirItem::CDirItem
PUBLIC	?HashCalc@@YGJABVCCensor@NWildcard@@ABUCHashOptions@@AAVAString@@PAUIHashCallbackUI@@@Z ; HashCalc
EXTRN	__imp__GetLastError@0:PROC
EXTRN	?GetPhyPath@CDirItems@@QBE?AVUString@@I@Z:PROC	; CDirItems::GetPhyPath
EXTRN	??4UString@@QAEAAV0@ABV0@@Z:PROC		; UString::operator=
EXTRN	?GetLogPath@CDirItems@@QBE?AVUString@@I@Z:PROC	; CDirItems::GetLogPath
EXTRN	??0CInFileStream@@QAE@XZ:PROC			; CInFileStream::CInFileStream
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	?EnumerateItems@@YGJABVCCensor@NWildcard@@W4ECensorPathMode@2@ABVUString@@AAVCDirItems@@@Z:PROC ; EnumerateItems
EXTRN	??0CDirItems@@QAE@XZ:PROC			; CDirItems::CDirItems
xdata$x	SEGMENT
__ehfuncinfo$?HashCalc@@YGJABVCCensor@NWildcard@@ABUCHashOptions@@AAVAString@@PAUIHashCallbackUI@@@Z DD 019930522H
	DD	0bH
	DD	FLAT:__unwindtable$?HashCalc@@YGJABVCCensor@NWildcard@@ABUCHashOptions@@AAVAString@@PAUIHashCallbackUI@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?HashCalc@@YGJABVCCensor@NWildcard@@ABUCHashOptions@@AAVAString@@PAUIHashCallbackUI@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?HashCalc@@YGJABVCCensor@NWildcard@@ABUCHashOptions@@AAVAString@@PAUIHashCallbackUI@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?HashCalc@@YGJABVCCensor@NWildcard@@ABUCHashOptions@@AAVAString@@PAUIHashCallbackUI@@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?HashCalc@@YGJABVCCensor@NWildcard@@ABUCHashOptions@@AAVAString@@PAUIHashCallbackUI@@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?HashCalc@@YGJABVCCensor@NWildcard@@ABUCHashOptions@@AAVAString@@PAUIHashCallbackUI@@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?HashCalc@@YGJABVCCensor@NWildcard@@ABUCHashOptions@@AAVAString@@PAUIHashCallbackUI@@@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?HashCalc@@YGJABVCCensor@NWildcard@@ABUCHashOptions@@AAVAString@@PAUIHashCallbackUI@@@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$?HashCalc@@YGJABVCCensor@NWildcard@@ABUCHashOptions@@AAVAString@@PAUIHashCallbackUI@@@Z$6
	DD	06H
	DD	FLAT:__unwindfunclet$?HashCalc@@YGJABVCCensor@NWildcard@@ABUCHashOptions@@AAVAString@@PAUIHashCallbackUI@@@Z$7
	DD	06H
	DD	FLAT:__unwindfunclet$?HashCalc@@YGJABVCCensor@NWildcard@@ABUCHashOptions@@AAVAString@@PAUIHashCallbackUI@@@Z$8
	DD	06H
	DD	FLAT:__unwindfunclet$?HashCalc@@YGJABVCCensor@NWildcard@@ABUCHashOptions@@AAVAString@@PAUIHashCallbackUI@@@Z$9
	DD	06H
	DD	FLAT:__unwindfunclet$?HashCalc@@YGJABVCCensor@NWildcard@@ABUCHashOptions@@AAVAString@@PAUIHashCallbackUI@@@Z$10
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv342 = -652						; size = 4
tv414 = -648						; size = 4
tv195 = -644						; size = 4
tv241 = -640						; size = 4
tv233 = -636						; size = 4
tv392 = -632						; size = 4
tv75 = -628						; size = 4
$T72446 = -624						; size = 4
$T72445 = -620						; size = 4
$T72444 = -616						; size = 4
$T72443 = -612						; size = 4
$T72442 = -608						; size = 4
$T72441 = -604						; size = 4
$T72440 = -600						; size = 4
$T72439 = -596						; size = 12
$T72436 = -584						; size = 4
$T72435 = -580						; size = 4
$T72432 = -576						; size = 4
$T72431 = -572						; size = 4
$T72430 = -568						; size = 4
$T72429 = -564						; size = 4
$T72428 = -560						; size = 4
$T72427 = -556						; size = 4
$T72426 = -552						; size = 4
$T72425 = -548						; size = 4
$T72424 = -544						; size = 4
$T72423 = -540						; size = 12
$T72422 = -528						; size = 4
___result__$71566 = -524				; size = 4
___result__$71563 = -520				; size = 4
___result__$71559 = -516				; size = 4
_size$71558 = -508					; size = 4
___result__$71555 = -500				; size = 4
_step$71550 = -496					; size = 4
_fileSize$71548 = -492					; size = 8
___result__$71545 = -484				; size = 4
_res$71541 = -480					; size = 4
_phyPath$71538 = -472					; size = 12
_dirItem$71535 = -456					; size = 4
_inStreamSpec$71530 = -452				; size = 4
_isAltStream$71523 = -446				; size = 1
_isDir$71522 = -445					; size = 1
_path$71521 = -440					; size = 12
_inStream$71520 = -420					; size = 4
___result__$71477 = -412				; size = 4
_completeValue$ = -404					; size = 8
_buf$ = -388						; size = 4
_kBufSize$ = -380					; size = 4
___result__$71468 = -376				; size = 4
___result__$71464 = -372				; size = 4
___result__$71460 = -368				; size = 4
_hb$ = -360						; size = 72
_i$ = -284						; size = 4
___result__$71455 = -280				; size = 4
_res$71447 = -276					; size = 4
___result__$71444 = -272				; size = 4
_di$71440 = -264					; size = 80
_dirItems$ = -176					; size = 160
__$EHRec$ = -12						; size = 12
_censor$ = 8						; size = 4
_options$ = 12						; size = 4
_errorInfo$ = 16					; size = 4
_callback$ = 20						; size = 4
?HashCalc@@YGJABVCCensor@NWildcard@@ABUCHashOptions@@AAVAString@@PAUIHashCallbackUI@@@Z PROC ; HashCalc
; Line 201
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?HashCalc@@YGJABVCCensor@NWildcard@@ABUCHashOptions@@AAVAString@@PAUIHashCallbackUI@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 640				; 00000280H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-652]
	mov	ecx, 160				; 000000a0H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 202
	lea	ecx, DWORD PTR _dirItems$[ebp]
	call	??0CDirItems@@QAE@XZ			; CDirItems::CDirItems
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 203
	mov	eax, DWORD PTR _callback$[ebp]
	mov	DWORD PTR _dirItems$[ebp+152], eax
; Line 205
	mov	ecx, DWORD PTR _options$[ebp]
	movzx	edx, BYTE PTR [ecx+13]
	test	edx, edx
	je	$LN32@HashCalc
; Line 207
	lea	ecx, DWORD PTR _di$71440[ebp]
	call	??0CDirItem@@QAE@XZ			; CDirItem::CDirItem
	mov	BYTE PTR __$EHRec$[ebp+8], 1
; Line 208
	mov	DWORD PTR _di$71440[ebp], -1
	mov	DWORD PTR _di$71440[ebp+4], -1
; Line 209
	mov	DWORD PTR _di$71440[ebp+60], 0
; Line 210
	mov	DWORD PTR _di$71440[ebp+24], 0
; Line 211
	mov	DWORD PTR _di$71440[ebp+28], 0
; Line 212
	mov	eax, DWORD PTR _di$71440[ebp+24]
	mov	DWORD PTR _di$71440[ebp+16], eax
	mov	ecx, DWORD PTR _di$71440[ebp+28]
	mov	DWORD PTR _di$71440[ebp+20], ecx
	mov	edx, DWORD PTR _di$71440[ebp+16]
	mov	DWORD PTR _di$71440[ebp+8], edx
	mov	eax, DWORD PTR _di$71440[ebp+20]
	mov	DWORD PTR _di$71440[ebp+12], eax
; Line 213
	lea	ecx, DWORD PTR _di$71440[ebp]
	push	ecx
	lea	ecx, DWORD PTR _dirItems$[ebp+36]
	call	?Add@?$CObjectVector@UCDirItem@@@@QAEIABUCDirItem@@@Z ; CObjectVector<CDirItem>::Add
; Line 214
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _di$71440[ebp]
	call	??1CDirItem@@QAE@XZ
; Line 215
	jmp	$LN31@HashCalc
$LN32@HashCalc:
; Line 217
	mov	edx, DWORD PTR _callback$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _callback$[ebp]
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$71444[ebp], eax
	cmp	DWORD PTR ___result__$71444[ebp], 0
	je	SHORT $LN30@HashCalc
	mov	eax, DWORD PTR ___result__$71444[ebp]
	mov	DWORD PTR $T72422[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _dirItems$[ebp]
	call	??1CDirItems@@QAE@XZ
	mov	eax, DWORD PTR $T72422[ebp]
	jmp	$LN33@HashCalc
$LN30@HashCalc:
; Line 218
	mov	ecx, DWORD PTR _options$[ebp]
	mov	dl, BYTE PTR [ecx+14]
	mov	BYTE PTR _dirItems$[ebp+49], dl
; Line 223
	lea	eax, DWORD PTR _dirItems$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T72423[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR tv75[ebp], eax
	mov	ecx, DWORD PTR tv75[ebp]
	mov	DWORD PTR tv392[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	edx, DWORD PTR tv392[ebp]
	push	edx
	mov	eax, DWORD PTR _options$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _censor$[ebp]
	push	edx
	call	?EnumerateItems@@YGJABVCCensor@NWildcard@@W4ECensorPathMode@2@ABVUString@@AAVCDirItems@@@Z ; EnumerateItems
	mov	DWORD PTR _res$71447[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T72423[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
; Line 225
	cmp	DWORD PTR _res$71447[ebp], 0
	je	SHORT $LN29@HashCalc
; Line 227
	cmp	DWORD PTR _res$71447[ebp], -2147467260	; 80004004H
	je	SHORT $LN28@HashCalc
; Line 228
	push	OFFSET $SG71453
	mov	ecx, DWORD PTR _errorInfo$[ebp]
	call	??4AString@@QAEAAV0@PBD@Z		; AString::operator=
$LN28@HashCalc:
; Line 229
	mov	eax, DWORD PTR _res$71447[ebp]
	mov	DWORD PTR $T72424[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _dirItems$[ebp]
	call	??1CDirItems@@QAE@XZ
	mov	eax, DWORD PTR $T72424[ebp]
	jmp	$LN33@HashCalc
$LN29@HashCalc:
; Line 231
	mov	esi, esp
	lea	ecx, DWORD PTR _dirItems$[ebp+56]
	push	ecx
	mov	edx, DWORD PTR _callback$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _callback$[ebp]
	mov	edx, DWORD PTR [eax+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$71455[ebp], eax
	cmp	DWORD PTR ___result__$71455[ebp], 0
	je	SHORT $LN31@HashCalc
	mov	eax, DWORD PTR ___result__$71455[ebp]
	mov	DWORD PTR $T72425[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _dirItems$[ebp]
	call	??1CDirItems@@QAE@XZ
	mov	eax, DWORD PTR $T72425[ebp]
	jmp	$LN33@HashCalc
$LN31@HashCalc:
; Line 235
	lea	ecx, DWORD PTR _hb$[ebp]
	call	??0CHashBundle@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
; Line 236
	mov	ecx, DWORD PTR _options$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _hb$[ebp]
	call	?SetMethods@CHashBundle@@QAEJABV?$CObjectVector@VUString@@@@@Z ; CHashBundle::SetMethods
	mov	DWORD PTR ___result__$71460[ebp], eax
	cmp	DWORD PTR ___result__$71460[ebp], 0
	je	SHORT $LN26@HashCalc
	mov	edx, DWORD PTR ___result__$71460[ebp]
	mov	DWORD PTR $T72426[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _hb$[ebp]
	call	??1CHashBundle@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _dirItems$[ebp]
	call	??1CDirItems@@QAE@XZ
	mov	eax, DWORD PTR $T72426[ebp]
	jmp	$LN33@HashCalc
$LN26@HashCalc:
; Line 237
	lea	ecx, DWORD PTR _hb$[ebp]
	call	?Init@CHashBundle@@QAEXXZ		; CHashBundle::Init
; Line 239
	mov	eax, DWORD PTR _dirItems$[ebp+96]
	mov	DWORD PTR _hb$[ebp+56], eax
	mov	ecx, DWORD PTR _dirItems$[ebp+100]
	mov	DWORD PTR _hb$[ebp+60], ecx
; Line 241
	mov	edx, DWORD PTR _options$[ebp]
	movzx	eax, BYTE PTR [edx+13]
	test	eax, eax
	je	SHORT $LN25@HashCalc
; Line 243
	mov	esi, esp
	push	0
	push	1
	mov	ecx, DWORD PTR _callback$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _callback$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$71464[ebp], eax
	cmp	DWORD PTR ___result__$71464[ebp], 0
	je	SHORT $LN24@HashCalc
	mov	ecx, DWORD PTR ___result__$71464[ebp]
	mov	DWORD PTR $T72427[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _hb$[ebp]
	call	??1CHashBundle@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _dirItems$[ebp]
	call	??1CDirItems@@QAE@XZ
	mov	eax, DWORD PTR $T72427[ebp]
	jmp	$LN33@HashCalc
$LN24@HashCalc:
; Line 245
	jmp	SHORT $LN23@HashCalc
$LN25@HashCalc:
; Line 247
	lea	ecx, DWORD PTR _dirItems$[ebp+56]
	call	?GetTotalBytes@CDirItemsStat@@QBE_KXZ	; CDirItemsStat::GetTotalBytes
	mov	esi, esp
	push	edx
	push	eax
	mov	edx, DWORD PTR _callback$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _callback$[ebp]
	mov	edx, DWORD PTR [eax+20]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$71468[ebp], eax
	cmp	DWORD PTR ___result__$71468[ebp], 0
	je	SHORT $LN23@HashCalc
	mov	eax, DWORD PTR ___result__$71468[ebp]
	mov	DWORD PTR $T72428[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _hb$[ebp]
	call	??1CHashBundle@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _dirItems$[ebp]
	call	??1CDirItems@@QAE@XZ
	mov	eax, DWORD PTR $T72428[ebp]
	jmp	$LN33@HashCalc
$LN23@HashCalc:
; Line 250
	mov	DWORD PTR _kBufSize$[ebp], 32768	; 00008000H
; Line 251
	lea	ecx, DWORD PTR _buf$[ebp]
	call	??0CHashMidBuf@@QAE@XZ			; CHashMidBuf::CHashMidBuf
	mov	BYTE PTR __$EHRec$[ebp+8], 4
; Line 252
	push	32768					; 00008000H
	lea	ecx, DWORD PTR _buf$[ebp]
	call	?Alloc@CHashMidBuf@@QAE_NI@Z		; CHashMidBuf::Alloc
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN21@HashCalc
; Line 253
	mov	DWORD PTR $T72429[ebp], -2147024882	; 8007000eH
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _buf$[ebp]
	call	??1CHashMidBuf@@QAE@XZ			; CHashMidBuf::~CHashMidBuf
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _hb$[ebp]
	call	??1CHashBundle@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _dirItems$[ebp]
	call	??1CDirItems@@QAE@XZ
	mov	eax, DWORD PTR $T72429[ebp]
	jmp	$LN33@HashCalc
$LN21@HashCalc:
; Line 255
	mov	DWORD PTR _completeValue$[ebp], 0
	mov	DWORD PTR _completeValue$[ebp+4], 0
; Line 257
	mov	esi, esp
	lea	edx, DWORD PTR _hb$[ebp]
	push	edx
	mov	eax, DWORD PTR _callback$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _callback$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$71477[ebp], eax
	cmp	DWORD PTR ___result__$71477[ebp], 0
	je	SHORT $LN20@HashCalc
	mov	ecx, DWORD PTR ___result__$71477[ebp]
	mov	DWORD PTR $T72430[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _buf$[ebp]
	call	??1CHashMidBuf@@QAE@XZ			; CHashMidBuf::~CHashMidBuf
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _hb$[ebp]
	call	??1CHashBundle@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _dirItems$[ebp]
	call	??1CDirItems@@QAE@XZ
	mov	eax, DWORD PTR $T72430[ebp]
	jmp	$LN33@HashCalc
$LN20@HashCalc:
; Line 259
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN19@HashCalc
$LN18@HashCalc:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN19@HashCalc:
	lea	ecx, DWORD PTR _dirItems$[ebp+36]
	call	?Size@?$CObjectVector@UCDirItem@@@@QBEIXZ ; CObjectVector<CDirItem>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	$LN17@HashCalc
; Line 261
	lea	ecx, DWORD PTR _inStream$71520[ebp]
	call	??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 5
; Line 262
	lea	ecx, DWORD PTR _path$71521[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 6
; Line 263
	mov	BYTE PTR _isDir$71522[ebp], 0
; Line 264
	mov	BYTE PTR _isAltStream$71523[ebp], 0
; Line 265
	mov	eax, DWORD PTR _options$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	je	SHORT $LN16@HashCalc
; Line 267
	push	8
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T72432[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	cmp	DWORD PTR $T72432[ebp], 0
	je	SHORT $LN35@HashCalc
	mov	ecx, DWORD PTR $T72432[ebp]
	call	??0CStdInFileStream@@QAE@XZ
	mov	DWORD PTR tv233[ebp], eax
	jmp	SHORT $LN36@HashCalc
$LN35@HashCalc:
	mov	DWORD PTR tv233[ebp], 0
$LN36@HashCalc:
	mov	edx, DWORD PTR tv233[ebp]
	mov	DWORD PTR $T72431[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	eax, DWORD PTR $T72431[ebp]
	push	eax
	lea	ecx, DWORD PTR _inStream$71520[ebp]
	call	??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=
; Line 269
	jmp	$LN15@HashCalc
$LN16@HashCalc:
; Line 271
	push	88					; 00000058H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T72436[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	cmp	DWORD PTR $T72436[ebp], 0
	je	SHORT $LN37@HashCalc
	mov	ecx, DWORD PTR $T72436[ebp]
	call	??0CInFileStream@@QAE@XZ		; CInFileStream::CInFileStream
	mov	DWORD PTR tv241[ebp], eax
	jmp	SHORT $LN38@HashCalc
$LN37@HashCalc:
	mov	DWORD PTR tv241[ebp], 0
$LN38@HashCalc:
	mov	ecx, DWORD PTR tv241[ebp]
	mov	DWORD PTR $T72435[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	edx, DWORD PTR $T72435[ebp]
	mov	DWORD PTR _inStreamSpec$71530[ebp], edx
; Line 272
	mov	eax, DWORD PTR _inStreamSpec$71530[ebp]
	push	eax
	lea	ecx, DWORD PTR _inStream$71520[ebp]
	call	??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=
; Line 273
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _dirItems$[ebp+36]
	call	??A?$CObjectVector@UCDirItem@@@@QAEAAUCDirItem@@I@Z ; CObjectVector<CDirItem>::operator[]
	mov	DWORD PTR _dirItem$71535[ebp], eax
; Line 274
	mov	ecx, DWORD PTR _dirItem$71535[ebp]
	call	?IsDir@CDirItem@@QBE_NXZ		; CDirItem::IsDir
	mov	BYTE PTR _isDir$71522[ebp], al
; Line 275
	mov	edx, DWORD PTR _dirItem$71535[ebp]
	mov	al, BYTE PTR [edx+76]
	mov	BYTE PTR _isAltStream$71523[ebp], al
; Line 276
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T72439[ebp]
	push	edx
	lea	ecx, DWORD PTR _dirItems$[ebp]
	call	?GetLogPath@CDirItems@@QBE?AVUString@@I@Z ; CDirItems::GetLogPath
	mov	DWORD PTR tv195[ebp], eax
	mov	eax, DWORD PTR tv195[ebp]
	mov	DWORD PTR tv414[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	mov	ecx, DWORD PTR tv414[ebp]
	push	ecx
	lea	ecx, DWORD PTR _path$71521[ebp]
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR $T72439[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
; Line 277
	movzx	edx, BYTE PTR _isDir$71522[ebp]
	test	edx, edx
	jne	$LN15@HashCalc
; Line 279
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	lea	ecx, DWORD PTR _phyPath$71538[ebp]
	push	ecx
	lea	ecx, DWORD PTR _dirItems$[ebp]
	call	?GetPhyPath@CDirItems@@QBE?AVUString@@I@Z ; CDirItems::GetPhyPath
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
; Line 280
	mov	edx, DWORD PTR _options$[ebp]
	movzx	eax, BYTE PTR [edx+12]
	push	eax
	lea	ecx, DWORD PTR _phyPath$71538[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	mov	ecx, DWORD PTR _inStreamSpec$71530[ebp]
	call	?OpenShared@CInFileStream@@QAE_NPB_W_N@Z ; CInFileStream::OpenShared
	movzx	ecx, al
	test	ecx, ecx
	jne	$LN13@HashCalc
; Line 282
	mov	esi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	lea	edx, DWORD PTR _phyPath$71538[ebp]
	push	edx
	mov	eax, DWORD PTR _callback$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _callback$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _res$71541[ebp], eax
; Line 283
	mov	ecx, DWORD PTR _hb$[ebp+56]
	add	ecx, 1
	mov	edx, DWORD PTR _hb$[ebp+60]
	adc	edx, 0
	mov	DWORD PTR _hb$[ebp+56], ecx
	mov	DWORD PTR _hb$[ebp+60], edx
; Line 284
	cmp	DWORD PTR _res$71541[ebp], 1
	je	SHORT $LN12@HashCalc
; Line 285
	mov	eax, DWORD PTR _res$71541[ebp]
	mov	DWORD PTR $T72440[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _phyPath$71538[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _path$71521[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _inStream$71520[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _buf$[ebp]
	call	??1CHashMidBuf@@QAE@XZ			; CHashMidBuf::~CHashMidBuf
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _hb$[ebp]
	call	??1CHashBundle@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _dirItems$[ebp]
	call	??1CDirItems@@QAE@XZ
	mov	eax, DWORD PTR $T72440[ebp]
	jmp	$LN33@HashCalc
$LN12@HashCalc:
; Line 286
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _phyPath$71538[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _path$71521[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _inStream$71520[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	jmp	$LN18@HashCalc
$LN13@HashCalc:
; Line 288
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _phyPath$71538[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
$LN15@HashCalc:
; Line 290
	mov	esi, esp
	movzx	ecx, BYTE PTR _isDir$71522[ebp]
	push	ecx
	lea	ecx, DWORD PTR _path$71521[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	mov	edx, DWORD PTR _callback$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _callback$[ebp]
	mov	edx, DWORD PTR [eax+36]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$71545[ebp], eax
	cmp	DWORD PTR ___result__$71545[ebp], 0
	je	SHORT $LN11@HashCalc
	mov	eax, DWORD PTR ___result__$71545[ebp]
	mov	DWORD PTR $T72441[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _path$71521[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _inStream$71520[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _buf$[ebp]
	call	??1CHashMidBuf@@QAE@XZ			; CHashMidBuf::~CHashMidBuf
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _hb$[ebp]
	call	??1CHashBundle@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _dirItems$[ebp]
	call	??1CDirItems@@QAE@XZ
	mov	eax, DWORD PTR $T72441[ebp]
	jmp	$LN33@HashCalc
$LN11@HashCalc:
; Line 291
	mov	DWORD PTR _fileSize$71548[ebp], 0
	mov	DWORD PTR _fileSize$71548[ebp+4], 0
; Line 293
	lea	ecx, DWORD PTR _hb$[ebp]
	call	?InitForNewFile@CHashBundle@@UAEXXZ	; CHashBundle::InitForNewFile
; Line 294
	movzx	ecx, BYTE PTR _isDir$71522[ebp]
	test	ecx, ecx
	jne	$LN10@HashCalc
; Line 296
	mov	DWORD PTR _step$71550[ebp], 0
	jmp	SHORT $LN9@HashCalc
$LN8@HashCalc:
	mov	edx, DWORD PTR _step$71550[ebp]
	add	edx, 1
	mov	DWORD PTR _step$71550[ebp], edx
$LN9@HashCalc:
; Line 298
	mov	eax, DWORD PTR _step$71550[ebp]
	and	eax, 255				; 000000ffH
	jne	$LN6@HashCalc
; Line 299
	mov	esi, esp
	lea	ecx, DWORD PTR _completeValue$[ebp]
	push	ecx
	mov	edx, DWORD PTR _callback$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _callback$[ebp]
	mov	edx, DWORD PTR [eax+24]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$71555[ebp], eax
	cmp	DWORD PTR ___result__$71555[ebp], 0
	je	SHORT $LN6@HashCalc
	mov	eax, DWORD PTR ___result__$71555[ebp]
	mov	DWORD PTR $T72442[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _path$71521[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _inStream$71520[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _buf$[ebp]
	call	??1CHashMidBuf@@QAE@XZ			; CHashMidBuf::~CHashMidBuf
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _hb$[ebp]
	call	??1CHashBundle@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _dirItems$[ebp]
	call	??1CDirItems@@QAE@XZ
	mov	eax, DWORD PTR $T72442[ebp]
	jmp	$LN33@HashCalc
$LN6@HashCalc:
; Line 301
	lea	ecx, DWORD PTR _inStream$71520[ebp]
	call	??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator->
	mov	DWORD PTR tv342[ebp], eax
	mov	esi, esp
	lea	ecx, DWORD PTR _size$71558[ebp]
	push	ecx
	push	32768					; 00008000H
	lea	ecx, DWORD PTR _buf$[ebp]
	call	??BCHashMidBuf@@QAEPAXXZ		; CHashMidBuf::operator void *
	push	eax
	mov	edx, DWORD PTR tv342[ebp]
	push	edx
	mov	eax, DWORD PTR tv342[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$71559[ebp], eax
	cmp	DWORD PTR ___result__$71559[ebp], 0
	je	SHORT $LN4@HashCalc
	mov	eax, DWORD PTR ___result__$71559[ebp]
	mov	DWORD PTR $T72443[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _path$71521[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _inStream$71520[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _buf$[ebp]
	call	??1CHashMidBuf@@QAE@XZ			; CHashMidBuf::~CHashMidBuf
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _hb$[ebp]
	call	??1CHashBundle@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _dirItems$[ebp]
	call	??1CDirItems@@QAE@XZ
	mov	eax, DWORD PTR $T72443[ebp]
	jmp	$LN33@HashCalc
$LN4@HashCalc:
; Line 302
	cmp	DWORD PTR _size$71558[ebp], 0
	jne	SHORT $LN3@HashCalc
; Line 303
	jmp	SHORT $LN10@HashCalc
$LN3@HashCalc:
; Line 304
	mov	ecx, DWORD PTR _size$71558[ebp]
	push	ecx
	lea	ecx, DWORD PTR _buf$[ebp]
	call	??BCHashMidBuf@@QAEPAXXZ		; CHashMidBuf::operator void *
	push	eax
	lea	ecx, DWORD PTR _hb$[ebp]
	call	?Update@CHashBundle@@UAEXPBXI@Z		; CHashBundle::Update
; Line 305
	mov	edx, DWORD PTR _size$71558[ebp]
	xor	eax, eax
	add	edx, DWORD PTR _fileSize$71548[ebp]
	adc	eax, DWORD PTR _fileSize$71548[ebp+4]
	mov	DWORD PTR _fileSize$71548[ebp], edx
	mov	DWORD PTR _fileSize$71548[ebp+4], eax
; Line 306
	mov	ecx, DWORD PTR _size$71558[ebp]
	xor	edx, edx
	add	ecx, DWORD PTR _completeValue$[ebp]
	adc	edx, DWORD PTR _completeValue$[ebp+4]
	mov	DWORD PTR _completeValue$[ebp], ecx
	mov	DWORD PTR _completeValue$[ebp+4], edx
; Line 307
	jmp	$LN8@HashCalc
$LN10@HashCalc:
; Line 309
	lea	eax, DWORD PTR _path$71521[ebp]
	push	eax
	movzx	ecx, BYTE PTR _isAltStream$71523[ebp]
	push	ecx
	movzx	edx, BYTE PTR _isDir$71522[ebp]
	push	edx
	lea	ecx, DWORD PTR _hb$[ebp]
	call	?Final@CHashBundle@@UAEX_N0ABVUString@@@Z ; CHashBundle::Final
; Line 310
	movzx	eax, BYTE PTR _isDir$71522[ebp]
	test	eax, eax
	sete	cl
	mov	esi, esp
	movzx	edx, cl
	push	edx
	lea	eax, DWORD PTR _hb$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fileSize$71548[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _fileSize$71548[ebp]
	push	edx
	mov	eax, DWORD PTR _callback$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _callback$[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$71563[ebp], eax
	cmp	DWORD PTR ___result__$71563[ebp], 0
	je	SHORT $LN2@HashCalc
	mov	ecx, DWORD PTR ___result__$71563[ebp]
	mov	DWORD PTR $T72444[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _path$71521[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _inStream$71520[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _buf$[ebp]
	call	??1CHashMidBuf@@QAE@XZ			; CHashMidBuf::~CHashMidBuf
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _hb$[ebp]
	call	??1CHashBundle@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _dirItems$[ebp]
	call	??1CDirItems@@QAE@XZ
	mov	eax, DWORD PTR $T72444[ebp]
	jmp	$LN33@HashCalc
$LN2@HashCalc:
; Line 311
	mov	esi, esp
	lea	edx, DWORD PTR _completeValue$[ebp]
	push	edx
	mov	eax, DWORD PTR _callback$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _callback$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$71566[ebp], eax
	cmp	DWORD PTR ___result__$71566[ebp], 0
	je	SHORT $LN1@HashCalc
	mov	ecx, DWORD PTR ___result__$71566[ebp]
	mov	DWORD PTR $T72445[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _path$71521[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _inStream$71520[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _buf$[ebp]
	call	??1CHashMidBuf@@QAE@XZ			; CHashMidBuf::~CHashMidBuf
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _hb$[ebp]
	call	??1CHashBundle@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _dirItems$[ebp]
	call	??1CDirItems@@QAE@XZ
	mov	eax, DWORD PTR $T72445[ebp]
	jmp	SHORT $LN33@HashCalc
$LN1@HashCalc:
; Line 312
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _path$71521[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _inStream$71520[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	jmp	$LN18@HashCalc
$LN17@HashCalc:
; Line 313
	mov	esi, esp
	lea	edx, DWORD PTR _hb$[ebp]
	push	edx
	mov	eax, DWORD PTR _callback$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _callback$[ebp]
	mov	eax, DWORD PTR [edx+48]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T72446[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _buf$[ebp]
	call	??1CHashMidBuf@@QAE@XZ			; CHashMidBuf::~CHashMidBuf
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _hb$[ebp]
	call	??1CHashBundle@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _dirItems$[ebp]
	call	??1CDirItems@@QAE@XZ
	mov	eax, DWORD PTR $T72446[ebp]
$LN33@HashCalc:
; Line 314
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN61@HashCalc
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 652				; 0000028cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	3
$LN61@HashCalc:
	DD	9
	DD	$LN60@HashCalc
$LN60@HashCalc:
	DD	-176					; ffffff50H
	DD	160					; 000000a0H
	DD	$LN50@HashCalc
	DD	-264					; fffffef8H
	DD	80					; 00000050H
	DD	$LN51@HashCalc
	DD	-360					; fffffe98H
	DD	72					; 00000048H
	DD	$LN52@HashCalc
	DD	-388					; fffffe7cH
	DD	4
	DD	$LN53@HashCalc
	DD	-404					; fffffe6cH
	DD	8
	DD	$LN54@HashCalc
	DD	-420					; fffffe5cH
	DD	4
	DD	$LN55@HashCalc
	DD	-440					; fffffe48H
	DD	12					; 0000000cH
	DD	$LN56@HashCalc
	DD	-472					; fffffe28H
	DD	12					; 0000000cH
	DD	$LN57@HashCalc
	DD	-508					; fffffe04H
	DD	4
	DD	$LN58@HashCalc
$LN58@HashCalc:
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN57@HashCalc:
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	121					; 00000079H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN56@HashCalc:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN55@HashCalc:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN54@HashCalc:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	86					; 00000056H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	0
$LN53@HashCalc:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN52@HashCalc:
	DB	104					; 00000068H
	DB	98					; 00000062H
	DB	0
$LN51@HashCalc:
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	0
$LN50@HashCalc:
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	73					; 00000049H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	115					; 00000073H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?HashCalc@@YGJABVCCensor@NWildcard@@ABUCHashOptions@@AAVAString@@PAUIHashCallbackUI@@@Z$0:
	lea	ecx, DWORD PTR _dirItems$[ebp]
	jmp	??1CDirItems@@QAE@XZ
__unwindfunclet$?HashCalc@@YGJABVCCensor@NWildcard@@ABUCHashOptions@@AAVAString@@PAUIHashCallbackUI@@@Z$1:
	lea	ecx, DWORD PTR _di$71440[ebp]
	jmp	??1CDirItem@@QAE@XZ
__unwindfunclet$?HashCalc@@YGJABVCCensor@NWildcard@@ABUCHashOptions@@AAVAString@@PAUIHashCallbackUI@@@Z$2:
	lea	ecx, DWORD PTR $T72423[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?HashCalc@@YGJABVCCensor@NWildcard@@ABUCHashOptions@@AAVAString@@PAUIHashCallbackUI@@@Z$3:
	lea	ecx, DWORD PTR _hb$[ebp]
	jmp	??1CHashBundle@@QAE@XZ
__unwindfunclet$?HashCalc@@YGJABVCCensor@NWildcard@@ABUCHashOptions@@AAVAString@@PAUIHashCallbackUI@@@Z$4:
	lea	ecx, DWORD PTR _buf$[ebp]
	jmp	??1CHashMidBuf@@QAE@XZ			; CHashMidBuf::~CHashMidBuf
__unwindfunclet$?HashCalc@@YGJABVCCensor@NWildcard@@ABUCHashOptions@@AAVAString@@PAUIHashCallbackUI@@@Z$5:
	lea	ecx, DWORD PTR _inStream$71520[ebp]
	jmp	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
__unwindfunclet$?HashCalc@@YGJABVCCensor@NWildcard@@ABUCHashOptions@@AAVAString@@PAUIHashCallbackUI@@@Z$6:
	lea	ecx, DWORD PTR _path$71521[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?HashCalc@@YGJABVCCensor@NWildcard@@ABUCHashOptions@@AAVAString@@PAUIHashCallbackUI@@@Z$7:
	mov	eax, DWORD PTR $T72432[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?HashCalc@@YGJABVCCensor@NWildcard@@ABUCHashOptions@@AAVAString@@PAUIHashCallbackUI@@@Z$8:
	mov	eax, DWORD PTR $T72436[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?HashCalc@@YGJABVCCensor@NWildcard@@ABUCHashOptions@@AAVAString@@PAUIHashCallbackUI@@@Z$9:
	lea	ecx, DWORD PTR $T72439[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?HashCalc@@YGJABVCCensor@NWildcard@@ABUCHashOptions@@AAVAString@@PAUIHashCallbackUI@@@Z$10:
	lea	ecx, DWORD PTR _phyPath$71538[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$?HashCalc@@YGJABVCCensor@NWildcard@@ABUCHashOptions@@AAVAString@@PAUIHashCallbackUI@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-652]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?HashCalc@@YGJABVCCensor@NWildcard@@ABUCHashOptions@@AAVAString@@PAUIHashCallbackUI@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?HashCalc@@YGJABVCCensor@NWildcard@@ABUCHashOptions@@AAVAString@@PAUIHashCallbackUI@@@Z ENDP ; HashCalc
EXTRN	?OpenShared@CInFile@NIO@NFile@NWindows@@QAE_NPB_W_N@Z:PROC ; NWindows::NFile::NIO::CInFile::OpenShared
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?OpenShared@CInFileStream@@QAE_NPB_W_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_fileName$ = 8						; size = 4
_shareForWrite$ = 12					; size = 1
?OpenShared@CInFileStream@@QAE_NPB_W_N@Z PROC		; CInFileStream::OpenShared, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\filestreams.h
; Line 74
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 75
	movzx	eax, BYTE PTR _shareForWrite$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fileName$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?OpenShared@CInFile@NIO@NFile@NWindows@@QAE_NPB_W_N@Z ; NWindows::NFile::NIO::CInFile::OpenShared
; Line 76
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?OpenShared@CInFileStream@@QAE_NPB_W_N@Z ENDP		; CInFileStream::OpenShared
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetTotalBytes@CDirItemsStat@@QBE_KXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetTotalBytes@CDirItemsStat@@QBE_KXZ PROC		; CDirItemsStat::GetTotalBytes, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\diritem.h
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+24]
	add	edx, DWORD PTR [ecx+32]
	mov	esi, DWORD PTR [eax+28]
	adc	esi, DWORD PTR [ecx+36]
	mov	eax, edx
	mov	edx, esi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?GetTotalBytes@CDirItemsStat@@QBE_KXZ ENDP		; CDirItemsStat::GetTotalBytes
_TEXT	ENDS
PUBLIC	??1?$CBuffer@E@@QAE@XZ				; CBuffer<unsigned char>::~CBuffer<unsigned char>
PUBLIC	??0?$CBuffer@E@@QAE@XZ				; CBuffer<unsigned char>::CBuffer<unsigned char>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CDirItem@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CDirItem@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CDirItem@@QAE@XZ$1
__ehfuncinfo$??0CDirItem@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CDirItem@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CDirItem@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CDirItem@@QAE@XZ PROC				; CDirItem::CDirItem, COMDAT
; _this$ = ecx
; Line 69
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CDirItem@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??0?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::CBuffer<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??0?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::CBuffer<unsigned char>
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+64], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+68], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+72], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+76], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CDirItem@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??0CDirItem@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	jmp	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
__ehhandler$??0CDirItem@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CDirItem@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CDirItem@@QAE@XZ ENDP				; CDirItem::CDirItem
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsDir@CDirItem@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsDir@CDirItem@@QBE_NXZ PROC				; CDirItem::IsDir, COMDAT
; _this$ = ecx
; Line 70
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+60]
	and	eax, 16					; 00000010H
	neg	eax
	sbb	eax, eax
	neg	eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsDir@CDirItem@@QBE_NXZ ENDP				; CDirItem::IsDir
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Init@CHashBundle@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Init@CHashBundle@@QAEXXZ PROC				; CHashBundle::Init, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\hashcalc.h
; Line 58
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 59
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+56], 0
	mov	DWORD PTR [eax+60], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+48], 0
	mov	DWORD PTR [ecx+52], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+40], 0
	mov	DWORD PTR [edx+44], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0
	mov	DWORD PTR [eax+36], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
; Line 60
	mov	esp, ebp
	pop	ebp
	ret	0
?Init@CHashBundle@@QAEXXZ ENDP				; CHashBundle::Init
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CHashMidBuf@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CHashMidBuf@@QAE@XZ PROC				; CHashMidBuf::CHashMidBuf, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\hashcalc.cpp
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CHashMidBuf@@QAE@XZ ENDP				; CHashMidBuf::CHashMidBuf
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??BCHashMidBuf@@QAEPAXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BCHashMidBuf@@QAEPAXXZ PROC				; CHashMidBuf::operator void *, COMDAT
; _this$ = ecx
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??BCHashMidBuf@@QAEPAXXZ ENDP				; CHashMidBuf::operator void *
_TEXT	ENDS
EXTRN	_MidAlloc@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Alloc@CHashMidBuf@@QAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?Alloc@CHashMidBuf@@QAE_NI@Z PROC			; CHashMidBuf::Alloc, COMDAT
; _this$ = ecx
; Line 24
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 25
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@Alloc
; Line 26
	xor	al, al
	jmp	SHORT $LN2@Alloc
$LN1@Alloc:
; Line 27
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	call	_MidAlloc@4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	setne	cl
	mov	al, cl
$LN2@Alloc:
; Line 29
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Alloc@CHashMidBuf@@QAE_NI@Z ENDP			; CHashMidBuf::Alloc
_TEXT	ENDS
EXTRN	_MidFree@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CHashMidBuf@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CHashMidBuf@@QAE@XZ PROC				; CHashMidBuf::~CHashMidBuf, COMDAT
; _this$ = ecx
; Line 30
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_MidFree@4
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CHashMidBuf@@QAE@XZ ENDP				; CHashMidBuf::~CHashMidBuf
_TEXT	ENDS
PUBLIC	??1?$CRecordVector@H@@QAE@XZ			; CRecordVector<int>::~CRecordVector<int>
PUBLIC	??1?$CObjectVector@UCDirItem@@@@QAE@XZ		; CObjectVector<CDirItem>::~CObjectVector<CDirItem>
PUBLIC	??1CUniqBlocks@@QAE@XZ				; CUniqBlocks::~CUniqBlocks
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CDirItems@@QAE@XZ DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??1CDirItems@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1CDirItems@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CDirItems@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CDirItems@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CDirItems@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CDirItems@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1CDirItems@@QAE@XZ$4
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CDirItems@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CDirItems@@QAE@XZ PROC				; CDirItems::~CDirItems, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CDirItems@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 140				; 0000008cH
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 104				; 00000068H
	call	??1CUniqBlocks@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??1?$CObjectVector@UCDirItem@@@@QAE@XZ	; CObjectVector<CDirItem>::~CObjectVector<CDirItem>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CDirItems@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
__unwindfunclet$??1CDirItems@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
__unwindfunclet$??1CDirItems@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
__unwindfunclet$??1CDirItems@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	jmp	??1?$CObjectVector@UCDirItem@@@@QAE@XZ	; CObjectVector<CDirItem>::~CObjectVector<CDirItem>
__unwindfunclet$??1CDirItems@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 104				; 00000068H
	jmp	??1CUniqBlocks@@QAE@XZ
__ehhandler$??1CDirItems@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CDirItems@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CDirItems@@QAE@XZ ENDP				; CDirItems::~CDirItems
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CDirItem@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CDirItem@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CDirItem@@QAE@XZ$1
__ehfuncinfo$??1CDirItem@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CDirItem@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CDirItem@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CDirItem@@QAE@XZ PROC				; CDirItem::~CDirItem, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CDirItem@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CDirItem@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??1CDirItem@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	jmp	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
__ehhandler$??1CDirItem@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CDirItem@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CDirItem@@QAE@XZ ENDP				; CDirItem::~CDirItem
PUBLIC	??0?$CObjectVector@UCHasherState@@@@QAE@XZ	; CObjectVector<CHasherState>::CObjectVector<CHasherState>
PUBLIC	??_7CHashBundle@@6B@				; CHashBundle::`vftable'
PUBLIC	??0IHashCalc@@QAE@XZ				; IHashCalc::IHashCalc
PUBLIC	??_R4CHashBundle@@6B@				; CHashBundle::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUCHashBundle@@@8				; CHashBundle `RTTI Type Descriptor'
PUBLIC	??_R3CHashBundle@@8				; CHashBundle::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CHashBundle@@8				; CHashBundle::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CHashBundle@@8			; CHashBundle::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@IHashCalc@@8			; IHashCalc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIHashCalc@@@8				; IHashCalc `RTTI Type Descriptor'
PUBLIC	??_R3IHashCalc@@8				; IHashCalc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IHashCalc@@8				; IHashCalc::`RTTI Base Class Array'
;	COMDAT ??_R2IHashCalc@@8
rdata$r	SEGMENT
??_R2IHashCalc@@8 DD FLAT:??_R1A@?0A@EA@IHashCalc@@8	; IHashCalc::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3IHashCalc@@8
rdata$r	SEGMENT
??_R3IHashCalc@@8 DD 00H				; IHashCalc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2IHashCalc@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIHashCalc@@@8
_DATA	SEGMENT
??_R0?AUIHashCalc@@@8 DD FLAT:??_7type_info@@6B@	; IHashCalc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIHashCalc@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IHashCalc@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IHashCalc@@8 DD FLAT:??_R0?AUIHashCalc@@@8 ; IHashCalc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IHashCalc@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CHashBundle@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CHashBundle@@8 DD FLAT:??_R0?AUCHashBundle@@@8 ; CHashBundle::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CHashBundle@@8
rdata$r	ENDS
;	COMDAT ??_R2CHashBundle@@8
rdata$r	SEGMENT
??_R2CHashBundle@@8 DD FLAT:??_R1A@?0A@EA@CHashBundle@@8 ; CHashBundle::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IHashCalc@@8
rdata$r	ENDS
;	COMDAT ??_R3CHashBundle@@8
rdata$r	SEGMENT
??_R3CHashBundle@@8 DD 00H				; CHashBundle::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CHashBundle@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUCHashBundle@@@8
_DATA	SEGMENT
??_R0?AUCHashBundle@@@8 DD FLAT:??_7type_info@@6B@	; CHashBundle `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUCHashBundle@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CHashBundle@@6B@
rdata$r	SEGMENT
??_R4CHashBundle@@6B@ DD 00H				; CHashBundle::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUCHashBundle@@@8
	DD	FLAT:??_R3CHashBundle@@8
rdata$r	ENDS
;	COMDAT ??_7CHashBundle@@6B@
CONST	SEGMENT
??_7CHashBundle@@6B@ DD FLAT:??_R4CHashBundle@@6B@	; CHashBundle::`vftable'
	DD	FLAT:?InitForNewFile@CHashBundle@@UAEXXZ
	DD	FLAT:?Update@CHashBundle@@UAEXPBXI@Z
	DD	FLAT:?SetSize@CHashBundle@@UAEX_K@Z
	DD	FLAT:?Final@CHashBundle@@UAEX_N0ABVUString@@@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CHashBundle@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CHashBundle@@QAE@XZ PROC				; CHashBundle::CHashBundle, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IHashCalc@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CHashBundle@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$CObjectVector@UCHasherState@@@@QAE@XZ ; CObjectVector<CHasherState>::CObjectVector<CHasherState>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CHashBundle@@QAE@XZ ENDP				; CHashBundle::CHashBundle
_TEXT	ENDS
PUBLIC	??1?$CObjectVector@UCHasherState@@@@QAE@XZ	; CObjectVector<CHasherState>::~CObjectVector<CHasherState>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CHashBundle@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CHashBundle@@QAE@XZ PROC				; CHashBundle::~CHashBundle, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1?$CObjectVector@UCHasherState@@@@QAE@XZ ; CObjectVector<CHasherState>::~CObjectVector<CHasherState>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CHashBundle@@QAE@XZ ENDP				; CHashBundle::~CHashBundle
_TEXT	ENDS
PUBLIC	??_7CStdInFileStream@@6B@			; CStdInFileStream::`vftable'
PUBLIC	??0CMyUnknownImp@@QAE@XZ			; CMyUnknownImp::CMyUnknownImp
PUBLIC	??0ISequentialInStream@@QAE@XZ			; ISequentialInStream::ISequentialInStream
PUBLIC	??_R4CStdInFileStream@@6B@			; CStdInFileStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCStdInFileStream@@@8			; CStdInFileStream `RTTI Type Descriptor'
PUBLIC	??_R3CStdInFileStream@@8			; CStdInFileStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CStdInFileStream@@8			; CStdInFileStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CStdInFileStream@@8		; CStdInFileStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ISequentialInStream@@8		; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUISequentialInStream@@@8			; ISequentialInStream `RTTI Type Descriptor'
PUBLIC	??_R3ISequentialInStream@@8			; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ISequentialInStream@@8			; ISequentialInStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIUnknown@@@8				; IUnknown `RTTI Type Descriptor'
PUBLIC	??_R3IUnknown@@8				; IUnknown::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IUnknown@@8				; IUnknown::`RTTI Base Class Array'
PUBLIC	??_R13?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AVCMyUnknownImp@@@8			; CMyUnknownImp `RTTI Type Descriptor'
PUBLIC	??_R3CMyUnknownImp@@8				; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMyUnknownImp@@8				; CMyUnknownImp::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?QueryInterface@CStdInFileStream@@UAGJABU_GUID@@PAPAX@Z ; CStdInFileStream::QueryInterface
PUBLIC	?AddRef@CStdInFileStream@@UAGKXZ		; CStdInFileStream::AddRef
PUBLIC	?Release@CStdInFileStream@@UAGKXZ		; CStdInFileStream::Release
EXTRN	?Read@CStdInFileStream@@UAGJPAXIPAI@Z:PROC	; CStdInFileStream::Read
EXTRN	??_ECStdInFileStream@@UAEPAXI@Z:PROC		; CStdInFileStream::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R2CMyUnknownImp@@8
rdata$r	SEGMENT
??_R2CMyUnknownImp@@8 DD FLAT:??_R1A@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMyUnknownImp@@8
rdata$r	SEGMENT
??_R3CMyUnknownImp@@8 DD 00H				; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMyUnknownImp@@@8
_DATA	SEGMENT
??_R0?AVCMyUnknownImp@@@8 DD FLAT:??_7type_info@@6B@	; CMyUnknownImp `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMyUnknownImp@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R13?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R2IUnknown@@8
rdata$r	SEGMENT
??_R2IUnknown@@8 DD FLAT:??_R1A@?0A@EA@IUnknown@@8	; IUnknown::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3IUnknown@@8
rdata$r	SEGMENT
??_R3IUnknown@@8 DD 00H					; IUnknown::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIUnknown@@@8
_DATA	SEGMENT
??_R0?AUIUnknown@@@8 DD FLAT:??_7type_info@@6B@		; IUnknown `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIUnknown@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IUnknown@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R2ISequentialInStream@@8
rdata$r	SEGMENT
??_R2ISequentialInStream@@8 DD FLAT:??_R1A@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ISequentialInStream@@8
rdata$r	SEGMENT
??_R3ISequentialInStream@@8 DD 00H			; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ISequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUISequentialInStream@@@8
_DATA	SEGMENT
??_R0?AUISequentialInStream@@@8 DD FLAT:??_7type_info@@6B@ ; ISequentialInStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUISequentialInStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ISequentialInStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ISequentialInStream@@8 DD FLAT:??_R0?AUISequentialInStream@@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ISequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CStdInFileStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CStdInFileStream@@8 DD FLAT:??_R0?AVCStdInFileStream@@@8 ; CStdInFileStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CStdInFileStream@@8
rdata$r	ENDS
;	COMDAT ??_R2CStdInFileStream@@8
rdata$r	SEGMENT
??_R2CStdInFileStream@@8 DD FLAT:??_R1A@?0A@EA@CStdInFileStream@@8 ; CStdInFileStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ISequentialInStream@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CStdInFileStream@@8
rdata$r	SEGMENT
??_R3CStdInFileStream@@8 DD 00H				; CStdInFileStream::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2CStdInFileStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCStdInFileStream@@@8
_DATA	SEGMENT
??_R0?AVCStdInFileStream@@@8 DD FLAT:??_7type_info@@6B@	; CStdInFileStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCStdInFileStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CStdInFileStream@@6B@
rdata$r	SEGMENT
??_R4CStdInFileStream@@6B@ DD 00H			; CStdInFileStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCStdInFileStream@@@8
	DD	FLAT:??_R3CStdInFileStream@@8
rdata$r	ENDS
;	COMDAT ??_7CStdInFileStream@@6B@
CONST	SEGMENT
??_7CStdInFileStream@@6B@ DD FLAT:??_R4CStdInFileStream@@6B@ ; CStdInFileStream::`vftable'
	DD	FLAT:?QueryInterface@CStdInFileStream@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CStdInFileStream@@UAGKXZ
	DD	FLAT:?Release@CStdInFileStream@@UAGKXZ
	DD	FLAT:?Read@CStdInFileStream@@UAGJPAXIPAI@Z
	DD	FLAT:??_ECStdInFileStream@@UAEPAXI@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CStdInFileStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CStdInFileStream@@QAE@XZ PROC			; CStdInFileStream::CStdInFileStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ISequentialInStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CStdInFileStream@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CStdInFileStream@@QAE@XZ ENDP			; CStdInFileStream::CStdInFileStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CMyUnknownImp@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMyUnknownImp@@QAE@XZ PROC				; CMyUnknownImp::CMyUnknownImp, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 167
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CMyUnknownImp@@QAE@XZ ENDP				; CMyUnknownImp::CMyUnknownImp
_TEXT	ENDS
PUBLIC	_==@8
EXTRN	_IID_IUnknown:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@CStdInFileStream@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CStdInFileStream@@UAGJABU_GUID@@PAPAX@Z PROC ; CStdInFileStream::QueryInterface, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\common\filestreams.h
; Line 102
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN1@QueryInter
$LN2@QueryInter:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN3@QueryInter
$LN1@QueryInter:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	xor	eax, eax
$LN3@QueryInter:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CStdInFileStream@@UAGJABU_GUID@@PAPAX@Z ENDP ; CStdInFileStream::QueryInterface
_TEXT	ENDS
PUBLIC	_IsEqualGUID@8
; Function compile flags: /Odtp /RTCsu
;	COMDAT _==@8
_TEXT	SEGMENT
_guidOne$ = 8						; size = 4
_guidOther$ = 12					; size = 4
_==@8	PROC						; COMDAT
; File c:\program files (x86)\microsoft sdks\windows\v7.0a\include\guiddef.h
; Line 193
	push	ebp
	mov	ebp, esp
; Line 194
	mov	eax, DWORD PTR _guidOther$[ebp]
	push	eax
	mov	ecx, DWORD PTR _guidOne$[ebp]
	push	ecx
	call	_IsEqualGUID@8
; Line 195
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_==@8	ENDP
_TEXT	ENDS
EXTRN	_memcmp:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT _IsEqualGUID@8
_TEXT	SEGMENT
_rguid1$ = 8						; size = 4
_rguid2$ = 12						; size = 4
_IsEqualGUID@8 PROC					; COMDAT
; Line 160
	push	ebp
	mov	ebp, esp
; Line 161
	push	16					; 00000010H
	mov	eax, DWORD PTR _rguid2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rguid1$[ebp]
	push	ecx
	call	_memcmp
	add	esp, 12					; 0000000cH
	neg	eax
	sbb	eax, eax
	add	eax, 1
; Line 162
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_IsEqualGUID@8 ENDP
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CStdInFileStream@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CStdInFileStream@@UAGKXZ PROC			; CStdInFileStream::AddRef, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\common\filestreams.h
; Line 102
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CStdInFileStream@@UAGKXZ ENDP			; CStdInFileStream::AddRef
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CStdInFileStream@@UAGKXZ
_TEXT	SEGMENT
tv83 = -16						; size = 4
tv70 = -12						; size = 4
$T72545 = -8						; size = 4
$T72544 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CStdInFileStream@@UAGKXZ PROC			; CStdInFileStream::Release, COMDAT
; Line 102
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	jmp	SHORT $LN2@Release
$LN1@Release:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T72545[ebp], edx
	mov	eax, DWORD PTR $T72545[ebp]
	mov	DWORD PTR $T72544[ebp], eax
	cmp	DWORD PTR $T72544[ebp], 0
	je	SHORT $LN4@Release
	mov	esi, esp
	push	1
	mov	ecx, DWORD PTR $T72544[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T72544[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv83[ebp], eax
	jmp	SHORT $LN5@Release
$LN4@Release:
	mov	DWORD PTR tv83[ebp], 0
$LN5@Release:
	xor	eax, eax
$LN2@Release:
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CStdInFileStream@@UAGKXZ ENDP			; CStdInFileStream::Release
_TEXT	ENDS
PUBLIC	??1CStdInFileStream@@UAE@XZ			; CStdInFileStream::~CStdInFileStream
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCStdInFileStream@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCStdInFileStream@@UAEPAXI@Z PROC			; CStdInFileStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CStdInFileStream@@UAE@XZ		; CStdInFileStream::~CStdInFileStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCStdInFileStream@@UAEPAXI@Z ENDP			; CStdInFileStream::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CStdInFileStream@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CStdInFileStream@@UAE@XZ PROC			; CStdInFileStream::~CStdInFileStream, COMDAT
; _this$ = ecx
; Line 104
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CStdInFileStream@@6B@
	mov	esp, ebp
	pop	ebp
	ret	0
??1CStdInFileStream@@UAE@XZ ENDP			; CStdInFileStream::~CStdInFileStream
_TEXT	ENDS
PUBLIC	??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ	; CObjectVector<CBuffer<unsigned char> >::~CObjectVector<CBuffer<unsigned char> >
PUBLIC	??1?$CRecordVector@I@@QAE@XZ			; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CUniqBlocks@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CUniqBlocks@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CUniqBlocks@@QAE@XZ$1
__ehfuncinfo$??1CUniqBlocks@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CUniqBlocks@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CUniqBlocks@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CUniqBlocks@@QAE@XZ PROC				; CUniqBlocks::~CUniqBlocks, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CUniqBlocks@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ ; CObjectVector<CBuffer<unsigned char> >::~CObjectVector<CBuffer<unsigned char> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CUniqBlocks@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ ; CObjectVector<CBuffer<unsigned char> >::~CObjectVector<CBuffer<unsigned char> >
__unwindfunclet$??1CUniqBlocks@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
__ehhandler$??1CUniqBlocks@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CUniqBlocks@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CUniqBlocks@@QAE@XZ ENDP				; CUniqBlocks::~CUniqBlocks
PUBLIC	??_7IHashCalc@@6B@				; IHashCalc::`vftable'
PUBLIC	??_R4IHashCalc@@6B@				; IHashCalc::`RTTI Complete Object Locator'
EXTRN	__purecall:PROC
;	COMDAT ??_R4IHashCalc@@6B@
rdata$r	SEGMENT
??_R4IHashCalc@@6B@ DD 00H				; IHashCalc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIHashCalc@@@8
	DD	FLAT:??_R3IHashCalc@@8
rdata$r	ENDS
;	COMDAT ??_7IHashCalc@@6B@
CONST	SEGMENT
??_7IHashCalc@@6B@ DD FLAT:??_R4IHashCalc@@6B@		; IHashCalc::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0IHashCalc@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IHashCalc@@QAE@XZ PROC				; IHashCalc::IHashCalc, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7IHashCalc@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0IHashCalc@@QAE@XZ ENDP				; IHashCalc::IHashCalc
_TEXT	ENDS
PUBLIC	??_7ISequentialInStream@@6B@			; ISequentialInStream::`vftable'
PUBLIC	??0IUnknown@@QAE@XZ				; IUnknown::IUnknown
PUBLIC	??_R4ISequentialInStream@@6B@			; ISequentialInStream::`RTTI Complete Object Locator'
;	COMDAT ??_R4ISequentialInStream@@6B@
rdata$r	SEGMENT
??_R4ISequentialInStream@@6B@ DD 00H			; ISequentialInStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUISequentialInStream@@@8
	DD	FLAT:??_R3ISequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_7ISequentialInStream@@6B@
CONST	SEGMENT
??_7ISequentialInStream@@6B@ DD FLAT:??_R4ISequentialInStream@@6B@ ; ISequentialInStream::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ISequentialInStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ISequentialInStream@@QAE@XZ PROC			; ISequentialInStream::ISequentialInStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ISequentialInStream@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ISequentialInStream@@QAE@XZ ENDP			; ISequentialInStream::ISequentialInStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0IUnknown@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IUnknown@@QAE@XZ PROC				; IUnknown::IUnknown, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0IUnknown@@QAE@XZ ENDP				; IUnknown::IUnknown
_TEXT	ENDS
PUBLIC	?AddHashHexToString@@YGXPADPBEI@Z		; AddHashHexToString
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_b$71606 = -16						; size = 4
_i$71602 = -12						; size = 4
_step$ = -8						; size = 4
_i$71596 = -4						; size = 4
_dest$ = 8						; size = 4
_data$ = 12						; size = 4
_size$ = 16						; size = 4
?AddHashHexToString@@YGXPADPBEI@Z PROC			; AddHashHexToString
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\hashcalc.cpp
; Line 323
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 324
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	BYTE PTR [ecx+eax*2], 0
; Line 326
	cmp	DWORD PTR _data$[ebp], 0
	jne	SHORT $LN8@AddHashHex
; Line 328
	mov	DWORD PTR _i$71596[ebp], 0
	jmp	SHORT $LN7@AddHashHex
$LN6@AddHashHex:
	mov	edx, DWORD PTR _i$71596[ebp]
	add	edx, 1
	mov	DWORD PTR _i$71596[ebp], edx
$LN7@AddHashHex:
	mov	eax, DWORD PTR _i$71596[ebp]
	cmp	eax, DWORD PTR _size$[ebp]
	jae	SHORT $LN5@AddHashHex
; Line 330
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	BYTE PTR [ecx], 32			; 00000020H
; Line 331
	mov	edx, DWORD PTR _dest$[ebp]
	mov	BYTE PTR [edx+1], 32			; 00000020H
; Line 332
	mov	eax, DWORD PTR _dest$[ebp]
	add	eax, 2
	mov	DWORD PTR _dest$[ebp], eax
; Line 333
	jmp	SHORT $LN6@AddHashHex
$LN5@AddHashHex:
; Line 334
	jmp	SHORT $LN9@AddHashHex
$LN8@AddHashHex:
; Line 337
	mov	DWORD PTR _step$[ebp], 2
; Line 338
	cmp	DWORD PTR _size$[ebp], 8
	ja	SHORT $LN4@AddHashHex
; Line 340
	mov	DWORD PTR _step$[ebp], -2		; fffffffeH
; Line 341
	mov	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR _dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2-2]
	mov	DWORD PTR _dest$[ebp], eax
$LN4@AddHashHex:
; Line 344
	mov	DWORD PTR _i$71602[ebp], 0
	jmp	SHORT $LN3@AddHashHex
$LN2@AddHashHex:
	mov	ecx, DWORD PTR _i$71602[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$71602[ebp], ecx
$LN3@AddHashHex:
	mov	edx, DWORD PTR _i$71602[ebp]
	cmp	edx, DWORD PTR _size$[ebp]
	jae	SHORT $LN9@AddHashHex
; Line 346
	mov	eax, DWORD PTR _data$[ebp]
	add	eax, DWORD PTR _i$71602[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _b$71606[ebp], ecx
; Line 347
	mov	edx, DWORD PTR _b$71606[ebp]
	shr	edx, 4
	and	edx, 15					; 0000000fH
	push	edx
	call	?GetHex@@YGDI@Z				; GetHex
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	BYTE PTR [ecx], al
; Line 348
	mov	edx, DWORD PTR _b$71606[ebp]
	and	edx, 15					; 0000000fH
	push	edx
	call	?GetHex@@YGDI@Z				; GetHex
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	BYTE PTR [ecx+1], al
; Line 349
	mov	edx, DWORD PTR _dest$[ebp]
	add	edx, DWORD PTR _step$[ebp]
	mov	DWORD PTR _dest$[ebp], edx
; Line 350
	jmp	SHORT $LN2@AddHashHex
$LN9@AddHashHex:
; Line 351
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?AddHashHexToString@@YGXPADPBEI@Z ENDP			; AddHashHexToString
; Function compile flags: /Odtp /RTCsu
tv68 = -4						; size = 4
_v$ = 8							; size = 4
?GetHex@@YGDI@Z PROC					; GetHex
; Line 318
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 319
	cmp	DWORD PTR _v$[ebp], 10			; 0000000aH
	jae	SHORT $LN3@GetHex
	mov	eax, DWORD PTR _v$[ebp]
	add	eax, 48					; 00000030H
	mov	DWORD PTR tv68[ebp], eax
	jmp	SHORT $LN4@GetHex
$LN3@GetHex:
	mov	ecx, DWORD PTR _v$[ebp]
	add	ecx, 55					; 00000037H
	mov	DWORD PTR tv68[ebp], ecx
$LN4@GetHex:
	mov	al, BYTE PTR tv68[ebp]
; Line 320
	mov	esp, ebp
	pop	ebp
	ret	4
?GetHex@@YGDI@Z ENDP					; GetHex
_TEXT	ENDS
PUBLIC	?Size@?$CRecordVector@PAX@@QBEIXZ		; CRecordVector<void *>::Size
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Size@?$CObjectVector@VUString@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@VUString@@@@QBEIXZ PROC		; CObjectVector<UString>::Size, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@VUString@@@@QBEIXZ ENDP		; CObjectVector<UString>::Size
_TEXT	ENDS
PUBLIC	?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ		; CRecordVector<void *>::IsEmpty
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsEmpty@?$CObjectVector@VUString@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@?$CObjectVector@VUString@@@@QBE_NXZ PROC	; CObjectVector<UString>::IsEmpty, COMDAT
; _this$ = ecx
; Line 416
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ	; CRecordVector<void *>::IsEmpty
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@?$CObjectVector@VUString@@@@QBE_NXZ ENDP	; CObjectVector<UString>::IsEmpty
_TEXT	ENDS
PUBLIC	??1?$CRecordVector@PAX@@QAE@XZ			; CRecordVector<void *>::~CRecordVector<void *>
PUBLIC	?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z	; CRecordVector<void *>::AddInReserved
PUBLIC	??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[]
PUBLIC	?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z	; CRecordVector<void *>::ConstructReserve
PUBLIC	??0?$CRecordVector@PAX@@QAE@XZ			; CRecordVector<void *>::CRecordVector<void *>
EXTRN	??0UString@@QAE@ABV0@@Z:PROC			; UString::UString
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z$1
__ehfuncinfo$??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
tv85 = -36						; size = 4
$T72580 = -32						; size = 4
$T72579 = -28						; size = 4
_i$71616 = -24						; size = 4
_size$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_v$ = 8							; size = 4
??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z PROC		; CObjectVector<UString>::CObjectVector<UString>, COMDAT
; _this$ = ecx
; Line 422
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 424
	mov	ecx, DWORD PTR _v$[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	mov	DWORD PTR _size$[ebp], eax
; Line 425
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z ; CRecordVector<void *>::ConstructReserve
; Line 426
	mov	DWORD PTR _i$71616[ebp], 0
	jmp	SHORT $LN3@CObjectVec
$LN2@CObjectVec:
	mov	ecx, DWORD PTR _i$71616[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$71616[ebp], ecx
$LN3@CObjectVec:
	mov	edx, DWORD PTR _i$71616[ebp]
	cmp	edx, DWORD PTR _size$[ebp]
	jae	SHORT $LN4@CObjectVec
; Line 427
	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T72580[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T72580[ebp], 0
	je	SHORT $LN6@CObjectVec
	mov	eax, DWORD PTR _i$71616[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	call	??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[]
	push	eax
	mov	ecx, DWORD PTR $T72580[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	DWORD PTR tv85[ebp], eax
	jmp	SHORT $LN7@CObjectVec
$LN6@CObjectVec:
	mov	DWORD PTR tv85[ebp], 0
$LN7@CObjectVec:
	mov	ecx, DWORD PTR tv85[ebp]
	mov	DWORD PTR $T72579[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T72579[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ; CRecordVector<void *>::AddInReserved
	jmp	SHORT $LN2@CObjectVec
$LN4@CObjectVec:
; Line 428
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__unwindfunclet$??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z$1:
	mov	eax, DWORD PTR $T72580[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z ENDP		; CObjectVector<UString>::CObjectVector<UString>
PUBLIC	??A?$CRecordVector@PAX@@QBEABQAXI@Z		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z PROC	; CObjectVector<UString>::operator[], COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ENDP	; CObjectVector<UString>::operator[]
_TEXT	ENDS
PUBLIC	??A?$CRecordVector@PAX@@QAEAAPAXI@Z		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z PROC	; CObjectVector<UString>::operator[], COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ENDP	; CObjectVector<UString>::operator[]
_TEXT	ENDS
PUBLIC	?Add@?$CRecordVector@PAX@@QAEIQAX@Z		; CRecordVector<void *>::Add
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z$0
__ehfuncinfo$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
_TEXT	SEGMENT
tv74 = -28						; size = 4
$T72598 = -24						; size = 4
$T72597 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_item$ = 8						; size = 4
?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z PROC ; CObjectVector<UString>::Add, COMDAT
; _this$ = ecx
; Line 459
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T72598[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T72598[ebp], 0
	je	SHORT $LN3@Add
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T72598[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@Add
$LN3@Add:
	mov	DWORD PTR tv74[ebp], 0
$LN4@Add:
	mov	ecx, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T72597[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T72597[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z$0:
	mov	eax, DWORD PTR $T72598[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z ENDP ; CObjectVector<UString>::Add
PUBLIC	??_GUString@@QAEPAXI@Z				; UString::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@VUString@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@VUString@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@VUString@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@VUString@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@VUString@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T72611 = -28						; size = 4
$T72610 = -24						; size = 4
_i$71638 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@VUString@@@@QAE@XZ PROC		; CObjectVector<UString>::~CObjectVector<UString>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@VUString@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$71638[ebp], eax
$LN2@CObjectVec@2:
	cmp	DWORD PTR _i$71638[ebp], 0
	je	SHORT $LN3@CObjectVec@2
; Line 489
	mov	eax, DWORD PTR _i$71638[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$71638[ebp], eax
	mov	ecx, DWORD PTR _i$71638[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T72611[ebp], edx
	mov	eax, DWORD PTR $T72611[ebp]
	mov	DWORD PTR $T72610[ebp], eax
	cmp	DWORD PTR $T72610[ebp], 0
	je	SHORT $LN5@CObjectVec@2
	push	1
	mov	ecx, DWORD PTR $T72610[ebp]
	call	??_GUString@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@2
$LN5@CObjectVec@2:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@2:
	jmp	SHORT $LN2@CObjectVec@2
$LN3@CObjectVec@2:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@VUString@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@VUString@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@VUString@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@VUString@@@@QAE@XZ ENDP		; CObjectVector<UString>::~CObjectVector<UString>
PUBLIC	??_G?$CBuffer@E@@QAEPAXI@Z			; CBuffer<unsigned char>::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T72624 = -28						; size = 4
$T72623 = -24						; size = 4
_i$71678 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ PROC		; CObjectVector<CBuffer<unsigned char> >::~CObjectVector<CBuffer<unsigned char> >, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$71678[ebp], eax
$LN2@CObjectVec@3:
	cmp	DWORD PTR _i$71678[ebp], 0
	je	SHORT $LN3@CObjectVec@3
; Line 489
	mov	eax, DWORD PTR _i$71678[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$71678[ebp], eax
	mov	ecx, DWORD PTR _i$71678[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T72624[ebp], edx
	mov	eax, DWORD PTR $T72624[ebp]
	mov	DWORD PTR $T72623[ebp], eax
	cmp	DWORD PTR $T72623[ebp], 0
	je	SHORT $LN5@CObjectVec@3
	push	1
	mov	ecx, DWORD PTR $T72623[ebp]
	call	??_G?$CBuffer@E@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@3
$LN5@CObjectVec@3:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@3:
	jmp	SHORT $LN2@CObjectVec@3
$LN3@CObjectVec@3:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ ENDP		; CObjectVector<CBuffer<unsigned char> >::~CObjectVector<CBuffer<unsigned char> >
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$CRecordVector@I@@QAE@XZ
_TEXT	SEGMENT
$T72636 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@I@@QAE@XZ PROC			; CRecordVector<unsigned int>::~CRecordVector<unsigned int>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T72636[ebp], ecx
	mov	edx, DWORD PTR $T72636[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@I@@QAE@XZ ENDP			; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CBuffer@E@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CBuffer@E@@QAE@XZ PROC				; CBuffer<unsigned char>::CBuffer<unsigned char>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mybuffer.h
; Line 24
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CBuffer@E@@QAE@XZ ENDP				; CBuffer<unsigned char>::CBuffer<unsigned char>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CBuffer@E@@QAE@XZ
_TEXT	SEGMENT
$T72641 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CBuffer@E@@QAE@XZ PROC				; CBuffer<unsigned char>::~CBuffer<unsigned char>, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T72641[ebp], ecx
	mov	edx, DWORD PTR $T72641[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CBuffer@E@@QAE@XZ ENDP				; CBuffer<unsigned char>::~CBuffer<unsigned char>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@H@@QAE@XZ
_TEXT	SEGMENT
$T72644 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@H@@QAE@XZ PROC			; CRecordVector<int>::~CRecordVector<int>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T72644[ebp], ecx
	mov	edx, DWORD PTR $T72644[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@H@@QAE@XZ ENDP			; CRecordVector<int>::~CRecordVector<int>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CObjectVector@UCDirItem@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@UCDirItem@@@@QBEIXZ PROC		; CObjectVector<CDirItem>::Size, COMDAT
; _this$ = ecx
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@UCDirItem@@@@QBEIXZ ENDP		; CObjectVector<CDirItem>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@UCDirItem@@@@QAEAAUCDirItem@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCDirItem@@@@QAEAAUCDirItem@@I@Z PROC ; CObjectVector<CDirItem>::operator[], COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCDirItem@@@@QAEAAUCDirItem@@I@Z ENDP ; CObjectVector<CDirItem>::operator[]
_TEXT	ENDS
PUBLIC	??0CDirItem@@QAE@ABU0@@Z			; CDirItem::CDirItem
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Add@?$CObjectVector@UCDirItem@@@@QAEIABUCDirItem@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Add@?$CObjectVector@UCDirItem@@@@QAEIABUCDirItem@@@Z$0
__ehfuncinfo$?Add@?$CObjectVector@UCDirItem@@@@QAEIABUCDirItem@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Add@?$CObjectVector@UCDirItem@@@@QAEIABUCDirItem@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?Add@?$CObjectVector@UCDirItem@@@@QAEIABUCDirItem@@@Z
_TEXT	SEGMENT
tv74 = -28						; size = 4
$T72652 = -24						; size = 4
$T72651 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_item$ = 8						; size = 4
?Add@?$CObjectVector@UCDirItem@@@@QAEIABUCDirItem@@@Z PROC ; CObjectVector<CDirItem>::Add, COMDAT
; _this$ = ecx
; Line 459
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Add@?$CObjectVector@UCDirItem@@@@QAEIABUCDirItem@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	80					; 00000050H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T72652[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T72652[ebp], 0
	je	SHORT $LN3@Add@2
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T72652[ebp]
	call	??0CDirItem@@QAE@ABU0@@Z
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@Add@2
$LN3@Add@2:
	mov	DWORD PTR tv74[ebp], 0
$LN4@Add@2:
	mov	ecx, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T72651[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T72651[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Add@?$CObjectVector@UCDirItem@@@@QAEIABUCDirItem@@@Z$0:
	mov	eax, DWORD PTR $T72652[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Add@?$CObjectVector@UCDirItem@@@@QAEIABUCDirItem@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Add@?$CObjectVector@UCDirItem@@@@QAEIABUCDirItem@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Add@?$CObjectVector@UCDirItem@@@@QAEIABUCDirItem@@@Z ENDP ; CObjectVector<CDirItem>::Add
PUBLIC	??_GCDirItem@@QAEPAXI@Z				; CDirItem::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@UCDirItem@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@UCDirItem@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@UCDirItem@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@UCDirItem@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@UCDirItem@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T72665 = -28						; size = 4
$T72664 = -24						; size = 4
_i$71711 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@UCDirItem@@@@QAE@XZ PROC		; CObjectVector<CDirItem>::~CObjectVector<CDirItem>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@UCDirItem@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$71711[ebp], eax
$LN2@CObjectVec@4:
	cmp	DWORD PTR _i$71711[ebp], 0
	je	SHORT $LN3@CObjectVec@4
; Line 489
	mov	eax, DWORD PTR _i$71711[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$71711[ebp], eax
	mov	ecx, DWORD PTR _i$71711[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T72665[ebp], edx
	mov	eax, DWORD PTR $T72665[ebp]
	mov	DWORD PTR $T72664[ebp], eax
	cmp	DWORD PTR $T72664[ebp], 0
	je	SHORT $LN5@CObjectVec@4
	push	1
	mov	ecx, DWORD PTR $T72664[ebp]
	call	??_GCDirItem@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@4
$LN5@CObjectVec@4:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@4:
	jmp	SHORT $LN2@CObjectVec@4
$LN3@CObjectVec@4:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@UCDirItem@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@UCDirItem@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@UCDirItem@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@UCDirItem@@@@QAE@XZ ENDP		; CObjectVector<CDirItem>::~CObjectVector<CDirItem>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CObjectVector@UCProp@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@UCProp@@@@QAE@XZ PROC		; CObjectVector<CProp>::CObjectVector<CProp>, COMDAT
; _this$ = ecx
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@UCProp@@@@QAE@XZ ENDP		; CObjectVector<CProp>::CObjectVector<CProp>
_TEXT	ENDS
PUBLIC	??_GCProp@@QAEPAXI@Z				; CProp::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@UCProp@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@UCProp@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@UCProp@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@UCProp@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T72681 = -28						; size = 4
$T72680 = -24						; size = 4
_i$71736 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@UCProp@@@@QAE@XZ PROC		; CObjectVector<CProp>::~CObjectVector<CProp>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$71736[ebp], eax
$LN2@CObjectVec@5:
	cmp	DWORD PTR _i$71736[ebp], 0
	je	SHORT $LN3@CObjectVec@5
; Line 489
	mov	eax, DWORD PTR _i$71736[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$71736[ebp], eax
	mov	ecx, DWORD PTR _i$71736[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T72681[ebp], edx
	mov	eax, DWORD PTR $T72681[ebp]
	mov	DWORD PTR $T72680[ebp], eax
	cmp	DWORD PTR $T72680[ebp], 0
	je	SHORT $LN5@CObjectVec@5
	push	1
	mov	ecx, DWORD PTR $T72680[ebp]
	call	??_GCProp@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@5
$LN5@CObjectVec@5:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@5:
	jmp	SHORT $LN2@CObjectVec@5
$LN3@CObjectVec@5:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@UCProp@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@UCProp@@@@QAE@XZ ENDP		; CObjectVector<CProp>::~CObjectVector<CProp>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CMyComPtr@UIHasher@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UIHasher@@@@QAE@XZ PROC			; CMyComPtr<IHasher>::CMyComPtr<IHasher>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UIHasher@@@@QAE@XZ ENDP			; CMyComPtr<IHasher>::CMyComPtr<IHasher>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIHasher@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIHasher@@@@QAE@XZ PROC			; CMyComPtr<IHasher>::~CMyComPtr<IHasher>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIHasher@@@@QAE@XZ ENDP			; CMyComPtr<IHasher>::~CMyComPtr<IHasher>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UIHasher@@@@QBEPAUIHasher@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UIHasher@@@@QBEPAUIHasher@@XZ PROC	; CMyComPtr<IHasher>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UIHasher@@@@QBEPAUIHasher@@XZ ENDP	; CMyComPtr<IHasher>::operator->
_TEXT	ENDS
PUBLIC	??4?$CMyComPtr@UIHasher@@@@QAEPAUIHasher@@PAU1@@Z ; CMyComPtr<IHasher>::operator=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4?$CMyComPtr@UIHasher@@@@QAEPAUIHasher@@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lp$ = 8						; size = 4
??4?$CMyComPtr@UIHasher@@@@QAEPAUIHasher@@ABV0@@Z PROC	; CMyComPtr<IHasher>::operator=, COMDAT
; _this$ = ecx
; Line 36
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _lp$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$CMyComPtr@UIHasher@@@@QAEPAUIHasher@@PAU1@@Z ; CMyComPtr<IHasher>::operator=
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UIHasher@@@@QAEPAUIHasher@@ABV0@@Z ENDP	; CMyComPtr<IHasher>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??7?$CMyComPtr@UIHasher@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??7?$CMyComPtr@UIHasher@@@@QBE_NXZ PROC			; CMyComPtr<IHasher>::operator!, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
??7?$CMyComPtr@UIHasher@@@@QBE_NXZ ENDP			; CMyComPtr<IHasher>::operator!
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CObjectVector@UCHasherState@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@UCHasherState@@@@QBEIXZ PROC	; CObjectVector<CHasherState>::Size, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@UCHasherState@@@@QBEIXZ ENDP	; CObjectVector<CHasherState>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CObjectVector@UCHasherState@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@UCHasherState@@@@QAE@XZ PROC		; CObjectVector<CHasherState>::CObjectVector<CHasherState>, COMDAT
; _this$ = ecx
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@UCHasherState@@@@QAE@XZ ENDP		; CObjectVector<CHasherState>::CObjectVector<CHasherState>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@UCHasherState@@@@QAEAAUCHasherState@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCHasherState@@@@QAEAAUCHasherState@@I@Z PROC ; CObjectVector<CHasherState>::operator[], COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCHasherState@@@@QAEAAUCHasherState@@I@Z ENDP ; CObjectVector<CHasherState>::operator[]
_TEXT	ENDS
PUBLIC	??0CHasherState@@QAE@XZ				; CHasherState::CHasherState
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AddNew@?$CObjectVector@UCHasherState@@@@QAEAAUCHasherState@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddNew@?$CObjectVector@UCHasherState@@@@QAEAAUCHasherState@@XZ$0
__ehfuncinfo$?AddNew@?$CObjectVector@UCHasherState@@@@QAEAAUCHasherState@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddNew@?$CObjectVector@UCHasherState@@@@QAEAAUCHasherState@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?AddNew@?$CObjectVector@UCHasherState@@@@QAEAAUCHasherState@@XZ
_TEXT	SEGMENT
tv71 = -32						; size = 4
$T72711 = -28						; size = 4
$T72710 = -24						; size = 4
_p$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?AddNew@?$CObjectVector@UCHasherState@@@@QAEAAUCHasherState@@XZ PROC ; CObjectVector<CHasherState>::AddNew, COMDAT
; _this$ = ecx
; Line 464
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddNew@?$CObjectVector@UCHasherState@@@@QAEAAUCHasherState@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 465
	push	276					; 00000114H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T72711[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T72711[ebp], 0
	je	SHORT $LN3@AddNew
	mov	ecx, DWORD PTR $T72711[ebp]
	call	??0CHasherState@@QAE@XZ
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN4@AddNew
$LN3@AddNew:
	mov	DWORD PTR tv71[ebp], 0
$LN4@AddNew:
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR $T72710[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T72710[ebp]
	mov	DWORD PTR _p$[ebp], ecx
; Line 466
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
; Line 467
	mov	eax, DWORD PTR _p$[ebp]
; Line 468
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddNew@?$CObjectVector@UCHasherState@@@@QAEAAUCHasherState@@XZ$0:
	mov	eax, DWORD PTR $T72711[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?AddNew@?$CObjectVector@UCHasherState@@@@QAEAAUCHasherState@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddNew@?$CObjectVector@UCHasherState@@@@QAEAAUCHasherState@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddNew@?$CObjectVector@UCHasherState@@@@QAEAAUCHasherState@@XZ ENDP ; CObjectVector<CHasherState>::AddNew
PUBLIC	??_GCHasherState@@QAEPAXI@Z			; CHasherState::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@UCHasherState@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@UCHasherState@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@UCHasherState@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@UCHasherState@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@UCHasherState@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T72724 = -28						; size = 4
$T72723 = -24						; size = 4
_i$71779 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@UCHasherState@@@@QAE@XZ PROC		; CObjectVector<CHasherState>::~CObjectVector<CHasherState>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@UCHasherState@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$71779[ebp], eax
$LN2@CObjectVec@6:
	cmp	DWORD PTR _i$71779[ebp], 0
	je	SHORT $LN3@CObjectVec@6
; Line 489
	mov	eax, DWORD PTR _i$71779[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$71779[ebp], eax
	mov	ecx, DWORD PTR _i$71779[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T72724[ebp], edx
	mov	eax, DWORD PTR $T72724[ebp]
	mov	DWORD PTR $T72723[ebp], eax
	cmp	DWORD PTR $T72723[ebp], 0
	je	SHORT $LN5@CObjectVec@6
	push	1
	mov	ecx, DWORD PTR $T72723[ebp]
	call	??_GCHasherState@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@6
$LN5@CObjectVec@6:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@6:
	jmp	SHORT $LN2@CObjectVec@6
$LN3@CObjectVec@6:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@UCHasherState@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@UCHasherState@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@UCHasherState@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@UCHasherState@@@@QAE@XZ ENDP		; CObjectVector<CHasherState>::~CObjectVector<CHasherState>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CRecordVector@_K@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@_K@@QAE@XZ PROC			; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>, COMDAT
; _this$ = ecx
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@_K@@QAE@XZ ENDP			; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@_K@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@_K@@QBEIXZ PROC			; CRecordVector<unsigned __int64>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@_K@@QBEIXZ ENDP			; CRecordVector<unsigned __int64>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@_K@@QAE@XZ
_TEXT	SEGMENT
$T72740 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@_K@@QAE@XZ PROC			; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T72740[ebp], ecx
	mov	edx, DWORD PTR $T72740[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@_K@@QAE@XZ ENDP			; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Clear@?$CRecordVector@_K@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$CRecordVector@_K@@QAEXXZ PROC			; CRecordVector<unsigned __int64>::Clear, COMDAT
; _this$ = ecx
; Line 131
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CRecordVector@_K@@QAEXXZ ENDP			; CRecordVector<unsigned __int64>::Clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@_K@@QAEAA_KI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@_K@@QAEAA_KI@Z PROC			; CRecordVector<unsigned __int64>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@_K@@QAEAA_KI@Z ENDP			; CRecordVector<unsigned __int64>::operator[]
_TEXT	ENDS
PUBLIC	?Insert@?$CRecordVector@_K@@QAEXI_K@Z		; CRecordVector<unsigned __int64>::Insert
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?AddToUniqueSorted@?$CRecordVector@_K@@QAEI_K@Z
_TEXT	SEGMENT
_midVal$71805 = -24					; size = 8
_mid$71804 = -16					; size = 4
_right$ = -12						; size = 4
_left$ = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 8
?AddToUniqueSorted@?$CRecordVector@_K@@QAEI_K@Z PROC	; CRecordVector<unsigned __int64>::AddToUniqueSorted, COMDAT
; _this$ = ecx
; Line 287
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 288
	mov	DWORD PTR _left$[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _right$[ebp], ecx
$LN5@AddToUniqu:
; Line 289
	mov	edx, DWORD PTR _left$[ebp]
	cmp	edx, DWORD PTR _right$[ebp]
	je	SHORT $LN4@AddToUniqu
; Line 291
	mov	eax, DWORD PTR _left$[ebp]
	add	eax, DWORD PTR _right$[ebp]
	shr	eax, 1
	mov	DWORD PTR _mid$71804[ebp], eax
; Line 292
	mov	ecx, DWORD PTR _mid$71804[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@_K@@QAEAA_KI@Z	; CRecordVector<unsigned __int64>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _midVal$71805[ebp], edx
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR _midVal$71805[ebp+4], eax
; Line 293
	mov	ecx, DWORD PTR _item$[ebp]
	cmp	ecx, DWORD PTR _midVal$71805[ebp]
	jne	SHORT $LN3@AddToUniqu
	mov	edx, DWORD PTR _item$[ebp+4]
	cmp	edx, DWORD PTR _midVal$71805[ebp+4]
	jne	SHORT $LN3@AddToUniqu
; Line 294
	mov	eax, DWORD PTR _mid$71804[ebp]
	jmp	SHORT $LN6@AddToUniqu
$LN3@AddToUniqu:
; Line 295
	mov	eax, DWORD PTR _item$[ebp+4]
	cmp	eax, DWORD PTR _midVal$71805[ebp+4]
	ja	SHORT $LN2@AddToUniqu
	jb	SHORT $LN8@AddToUniqu
	mov	ecx, DWORD PTR _item$[ebp]
	cmp	ecx, DWORD PTR _midVal$71805[ebp]
	jae	SHORT $LN2@AddToUniqu
$LN8@AddToUniqu:
; Line 296
	mov	edx, DWORD PTR _mid$71804[ebp]
	mov	DWORD PTR _right$[ebp], edx
; Line 297
	jmp	SHORT $LN1@AddToUniqu
$LN2@AddToUniqu:
; Line 298
	mov	eax, DWORD PTR _mid$71804[ebp]
	add	eax, 1
	mov	DWORD PTR _left$[ebp], eax
$LN1@AddToUniqu:
; Line 299
	jmp	SHORT $LN5@AddToUniqu
$LN4@AddToUniqu:
; Line 300
	mov	ecx, DWORD PTR _item$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _item$[ebp]
	push	edx
	mov	eax, DWORD PTR _right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Insert@?$CRecordVector@_K@@QAEXI_K@Z	; CRecordVector<unsigned __int64>::Insert
; Line 301
	mov	eax, DWORD PTR _right$[ebp]
$LN6@AddToUniqu:
; Line 302
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?AddToUniqueSorted@?$CRecordVector@_K@@QAEI_K@Z ENDP	; CRecordVector<unsigned __int64>::AddToUniqueSorted
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CObjectVector@VCOneMethodInfo@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@VCOneMethodInfo@@@@QBEIXZ PROC	; CObjectVector<COneMethodInfo>::Size, COMDAT
; _this$ = ecx
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@VCOneMethodInfo@@@@QBEIXZ ENDP	; CObjectVector<COneMethodInfo>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ PROC	; CObjectVector<COneMethodInfo>::CObjectVector<COneMethodInfo>, COMDAT
; _this$ = ecx
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ ENDP	; CObjectVector<COneMethodInfo>::CObjectVector<COneMethodInfo>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@VCOneMethodInfo@@@@QAEAAVCOneMethodInfo@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@VCOneMethodInfo@@@@QAEAAVCOneMethodInfo@@I@Z PROC ; CObjectVector<COneMethodInfo>::operator[], COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@VCOneMethodInfo@@@@QAEAAVCOneMethodInfo@@I@Z ENDP ; CObjectVector<COneMethodInfo>::operator[]
_TEXT	ENDS
PUBLIC	?Insert@?$CRecordVector@PAX@@QAEXIQAX@Z		; CRecordVector<void *>::Insert
PUBLIC	??0COneMethodInfo@@QAE@ABV0@@Z			; COneMethodInfo::COneMethodInfo
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Insert@?$CObjectVector@VCOneMethodInfo@@@@QAEXIABVCOneMethodInfo@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Insert@?$CObjectVector@VCOneMethodInfo@@@@QAEXIABVCOneMethodInfo@@@Z$0
__ehfuncinfo$?Insert@?$CObjectVector@VCOneMethodInfo@@@@QAEXIABVCOneMethodInfo@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Insert@?$CObjectVector@VCOneMethodInfo@@@@QAEXIABVCOneMethodInfo@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?Insert@?$CObjectVector@VCOneMethodInfo@@@@QAEXIABVCOneMethodInfo@@@Z
_TEXT	SEGMENT
tv73 = -28						; size = 4
$T72758 = -24						; size = 4
$T72757 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_index$ = 8						; size = 4
_item$ = 12						; size = 4
?Insert@?$CObjectVector@VCOneMethodInfo@@@@QAEXIABVCOneMethodInfo@@@Z PROC ; CObjectVector<COneMethodInfo>::Insert, COMDAT
; _this$ = ecx
; Line 477
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Insert@?$CObjectVector@VCOneMethodInfo@@@@QAEXIABVCOneMethodInfo@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	36					; 00000024H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T72758[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T72758[ebp], 0
	je	SHORT $LN3@Insert
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T72758[ebp]
	call	??0COneMethodInfo@@QAE@ABV0@@Z
	mov	DWORD PTR tv73[ebp], eax
	jmp	SHORT $LN4@Insert
$LN3@Insert:
	mov	DWORD PTR tv73[ebp], 0
$LN4@Insert:
	mov	ecx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T72757[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T72757[ebp]
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Insert@?$CRecordVector@PAX@@QAEXIQAX@Z	; CRecordVector<void *>::Insert
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Insert@?$CObjectVector@VCOneMethodInfo@@@@QAEXIABVCOneMethodInfo@@@Z$0:
	mov	eax, DWORD PTR $T72758[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Insert@?$CObjectVector@VCOneMethodInfo@@@@QAEXIABVCOneMethodInfo@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Insert@?$CObjectVector@VCOneMethodInfo@@@@QAEXIABVCOneMethodInfo@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Insert@?$CObjectVector@VCOneMethodInfo@@@@QAEXIABVCOneMethodInfo@@@Z ENDP ; CObjectVector<COneMethodInfo>::Insert
PUBLIC	??_GCOneMethodInfo@@QAEPAXI@Z			; COneMethodInfo::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T72771 = -28						; size = 4
$T72770 = -24						; size = 4
_i$71824 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ PROC	; CObjectVector<COneMethodInfo>::~CObjectVector<COneMethodInfo>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$71824[ebp], eax
$LN2@CObjectVec@7:
	cmp	DWORD PTR _i$71824[ebp], 0
	je	SHORT $LN3@CObjectVec@7
; Line 489
	mov	eax, DWORD PTR _i$71824[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$71824[ebp], eax
	mov	ecx, DWORD PTR _i$71824[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T72771[ebp], edx
	mov	eax, DWORD PTR $T72771[ebp]
	mov	DWORD PTR $T72770[ebp], eax
	cmp	DWORD PTR $T72770[ebp], 0
	je	SHORT $LN5@CObjectVec@7
	push	1
	mov	ecx, DWORD PTR $T72770[ebp]
	call	??_GCOneMethodInfo@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@7
$LN5@CObjectVec@7:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@7:
	jmp	SHORT $LN2@CObjectVec@7
$LN3@CObjectVec@7:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@VCOneMethodInfo@@@@QAE@XZ ENDP	; CObjectVector<COneMethodInfo>::~CObjectVector<COneMethodInfo>
PUBLIC	?Clear@?$CRecordVector@PAX@@QAEXXZ		; CRecordVector<void *>::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Clear@?$CObjectVector@VCOneMethodInfo@@@@QAEXXZ
_TEXT	SEGMENT
tv75 = -20						; size = 4
$T72784 = -16						; size = 4
$T72783 = -12						; size = 4
_i$71833 = -8						; size = 4
_this$ = -4						; size = 4
?Clear@?$CObjectVector@VCOneMethodInfo@@@@QAEXXZ PROC	; CObjectVector<COneMethodInfo>::Clear, COMDAT
; _this$ = ecx
; Line 499
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 500
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$71833[ebp], eax
$LN2@Clear:
	cmp	DWORD PTR _i$71833[ebp], 0
	je	SHORT $LN1@Clear
; Line 501
	mov	eax, DWORD PTR _i$71833[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$71833[ebp], eax
	mov	ecx, DWORD PTR _i$71833[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T72784[ebp], edx
	mov	eax, DWORD PTR $T72784[ebp]
	mov	DWORD PTR $T72783[ebp], eax
	cmp	DWORD PTR $T72783[ebp], 0
	je	SHORT $LN5@Clear
	push	1
	mov	ecx, DWORD PTR $T72783[ebp]
	call	??_GCOneMethodInfo@@QAEPAXI@Z
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN6@Clear
$LN5@Clear:
	mov	DWORD PTR tv75[ebp], 0
$LN6@Clear:
	jmp	SHORT $LN2@Clear
$LN1@Clear:
; Line 502
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CRecordVector@PAX@@QAEXXZ	; CRecordVector<void *>::Clear
; Line 503
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CObjectVector@VCOneMethodInfo@@@@QAEXXZ ENDP	; CObjectVector<COneMethodInfo>::Clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ PROC ; CMyComPtr<ICompressSetCoderProperties>::CMyComPtr<ICompressSetCoderProperties>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ENDP ; CMyComPtr<ICompressSetCoderProperties>::CMyComPtr<ICompressSetCoderProperties>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ PROC ; CMyComPtr<ICompressSetCoderProperties>::~CMyComPtr<ICompressSetCoderProperties>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@2:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ ENDP ; CMyComPtr<ICompressSetCoderProperties>::~CMyComPtr<ICompressSetCoderProperties>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UICompressSetCoderProperties@@@@QBEPAUICompressSetCoderProperties@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UICompressSetCoderProperties@@@@QBEPAUICompressSetCoderProperties@@XZ PROC ; CMyComPtr<ICompressSetCoderProperties>::operator ICompressSetCoderProperties *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UICompressSetCoderProperties@@@@QBEPAUICompressSetCoderProperties@@XZ ENDP ; CMyComPtr<ICompressSetCoderProperties>::operator ICompressSetCoderProperties *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UICompressSetCoderProperties@@@@QAEPAPAUICompressSetCoderProperties@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UICompressSetCoderProperties@@@@QAEPAPAUICompressSetCoderProperties@@XZ PROC ; CMyComPtr<ICompressSetCoderProperties>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UICompressSetCoderProperties@@@@QAEPAPAUICompressSetCoderProperties@@XZ ENDP ; CMyComPtr<ICompressSetCoderProperties>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@3:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ PROC ; CMyComPtr<ISequentialInStream>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ENDP ; CMyComPtr<ISequentialInStream>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z PROC ; CMyComPtr<ISequentialInStream>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ENDP ; CMyComPtr<ISequentialInStream>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??_GUString@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GUString@@QAEPAXI@Z PROC				; UString::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GUString@@QAEPAXI@Z ENDP				; UString::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??_G?$CBuffer@E@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$CBuffer@E@@QAEPAXI@Z PROC				; CBuffer<unsigned char>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@3
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$CBuffer@E@@QAEPAXI@Z ENDP				; CBuffer<unsigned char>::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0?$CBuffer@E@@QAE@ABV0@@Z			; CBuffer<unsigned char>::CBuffer<unsigned char>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CDirItem@@QAE@ABU0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CDirItem@@QAE@ABU0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CDirItem@@QAE@ABU0@@Z$1
__ehfuncinfo$??0CDirItem@@QAE@ABU0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CDirItem@@QAE@ABU0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CDirItem@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0CDirItem@@QAE@ABU0@@Z PROC				; CDirItem::CDirItem, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CDirItem@@QAE@ABU0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], ecx
	mov	DWORD PTR [eax+20], edx
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR [ecx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], edx
	mov	DWORD PTR [ecx+28], eax
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 32					; 00000020H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 44					; 0000002cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??0?$CBuffer@E@@QAE@ABV0@@Z		; CBuffer<unsigned char>::CBuffer<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 52					; 00000034H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??0?$CBuffer@E@@QAE@ABV0@@Z		; CBuffer<unsigned char>::CBuffer<unsigned char>
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR [edx+60], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR [edx+64], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	DWORD PTR [edx+68], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	DWORD PTR [edx+72], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cl, BYTE PTR [eax+76]
	mov	BYTE PTR [edx+76], cl
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CDirItem@@QAE@ABU0@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??0CDirItem@@QAE@ABU0@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	jmp	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
__ehhandler$??0CDirItem@@QAE@ABU0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CDirItem@@QAE@ABU0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CDirItem@@QAE@ABU0@@Z ENDP				; CDirItem::CDirItem
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCDirItem@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCDirItem@@QAEPAXI@Z PROC				; CDirItem::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CDirItem@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@4:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCDirItem@@QAEPAXI@Z ENDP				; CDirItem::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1CProp@@QAE@XZ				; CProp::~CProp
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCProp@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCProp@@QAEPAXI@Z PROC				; CProp::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CProp@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@5
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@5:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCProp@@QAEPAXI@Z ENDP				; CProp::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CHasherState@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CHasherState@@QAE@XZ$0
__ehfuncinfo$??0CHasherState@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CHasherState@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CHasherState@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CHasherState@@QAE@XZ PROC				; CHasherState::CHasherState, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CHasherState@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CMyComPtr@UIHasher@@@@QAE@XZ	; CMyComPtr<IHasher>::CMyComPtr<IHasher>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0AString@@QAE@XZ			; AString::AString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CHasherState@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CMyComPtr@UIHasher@@@@QAE@XZ	; CMyComPtr<IHasher>::~CMyComPtr<IHasher>
__ehhandler$??0CHasherState@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CHasherState@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CHasherState@@QAE@XZ ENDP				; CHasherState::CHasherState
PUBLIC	??1CHasherState@@QAE@XZ				; CHasherState::~CHasherState
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCHasherState@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCHasherState@@QAEPAXI@Z PROC			; CHasherState::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CHasherState@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@6
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@6:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCHasherState@@QAEPAXI@Z ENDP			; CHasherState::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0CMethodProps@@QAE@ABV0@@Z			; CMethodProps::CMethodProps
EXTRN	??0AString@@QAE@ABV0@@Z:PROC			; AString::AString
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0COneMethodInfo@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0COneMethodInfo@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0COneMethodInfo@@QAE@ABV0@@Z$1
__ehfuncinfo$??0COneMethodInfo@@QAE@ABV0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0COneMethodInfo@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0COneMethodInfo@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0COneMethodInfo@@QAE@ABV0@@Z PROC			; COneMethodInfo::COneMethodInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0COneMethodInfo@@QAE@ABV0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CMethodProps@@QAE@ABV0@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0AString@@QAE@ABV0@@Z			; AString::AString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 24					; 00000018H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0COneMethodInfo@@QAE@ABV0@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CMethodProps@@QAE@XZ
__unwindfunclet$??0COneMethodInfo@@QAE@ABV0@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1AString@@QAE@XZ			; AString::~AString
__ehhandler$??0COneMethodInfo@@QAE@ABV0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0COneMethodInfo@@QAE@ABV0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0COneMethodInfo@@QAE@ABV0@@Z ENDP			; COneMethodInfo::COneMethodInfo
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCOneMethodInfo@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCOneMethodInfo@@QAEPAXI@Z PROC			; COneMethodInfo::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1COneMethodInfo@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@7
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@7:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCOneMethodInfo@@QAEPAXI@Z ENDP			; COneMethodInfo::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1CPropVariant@NCOM@NWindows@@QAE@XZ		; NWindows::NCOM::CPropVariant::~CPropVariant
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CProp@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CProp@@QAE@XZ PROC					; CProp::~CProp, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CProp@@QAE@XZ ENDP					; CProp::~CProp
_TEXT	ENDS
EXTRN	?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ:PROC	; NWindows::NCOM::CPropVariant::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CPropVariant@NCOM@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CPropVariant@NCOM@NWindows@@QAE@XZ PROC		; NWindows::NCOM::CPropVariant::~CPropVariant, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\propvariant.h
; Line 56
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ ; NWindows::NCOM::CPropVariant::Clear
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CPropVariant@NCOM@NWindows@@QAE@XZ ENDP		; NWindows::NCOM::CPropVariant::~CPropVariant
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CHasherState@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CHasherState@@QAE@XZ$0
__ehfuncinfo$??1CHasherState@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CHasherState@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CHasherState@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CHasherState@@QAE@XZ PROC				; CHasherState::~CHasherState, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CHasherState@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CMyComPtr@UIHasher@@@@QAE@XZ	; CMyComPtr<IHasher>::~CMyComPtr<IHasher>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CHasherState@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CMyComPtr@UIHasher@@@@QAE@XZ	; CMyComPtr<IHasher>::~CMyComPtr<IHasher>
__ehhandler$??1CHasherState@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CHasherState@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CHasherState@@QAE@XZ ENDP				; CHasherState::~CHasherState
PUBLIC	??0CProps@@QAE@ABU0@@Z				; CProps::CProps
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CMethodProps@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CMethodProps@@QAE@ABV0@@Z PROC			; CMethodProps::CMethodProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CProps@@QAE@ABU0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CMethodProps@@QAE@ABV0@@Z ENDP			; CMethodProps::CMethodProps
_TEXT	ENDS
PUBLIC	??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z	; CObjectVector<CProp>::CObjectVector<CProp>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CProps@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CProps@@QAE@ABU0@@Z PROC				; CProps::CProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z ; CObjectVector<CProp>::CObjectVector<CProp>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CProps@@QAE@ABU0@@Z ENDP				; CProps::CProps
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@PAX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@PAX@@QAE@XZ PROC			; CRecordVector<void *>::CRecordVector<void *>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@PAX@@QAE@XZ ENDP			; CRecordVector<void *>::CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@PAX@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@PAX@@QBEIXZ PROC			; CRecordVector<void *>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@PAX@@QBEIXZ ENDP			; CRecordVector<void *>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ PROC		; CRecordVector<void *>::IsEmpty, COMDAT
; _this$ = ecx
; Line 49
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+4], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ ENDP		; CRecordVector<void *>::IsEmpty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z
_TEXT	SEGMENT
$T72875 = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z PROC	; CRecordVector<void *>::ConstructReserve, COMDAT
; _this$ = ecx
; Line 52
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 53
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN2@ConstructR
; Line 55
	xor	ecx, ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T72875[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T72875[ebp]
	mov	DWORD PTR [eax], ecx
; Line 56
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@ConstructR:
; Line 58
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z ENDP	; CRecordVector<void *>::ConstructReserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@PAX@@QAE@XZ
_TEXT	SEGMENT
$T72878 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@PAX@@QAE@XZ PROC			; CRecordVector<void *>::~CRecordVector<void *>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T72878[ebp], ecx
	mov	edx, DWORD PTR $T72878[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@PAX@@QAE@XZ ENDP			; CRecordVector<void *>::~CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Clear@?$CRecordVector@PAX@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$CRecordVector@PAX@@QAEXXZ PROC			; CRecordVector<void *>::Clear, COMDAT
; _this$ = ecx
; Line 131
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CRecordVector@PAX@@QAEXXZ ENDP			; CRecordVector<void *>::Clear
_TEXT	ENDS
PUBLIC	?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ	; CRecordVector<void *>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@PAX@@QAEIQAX@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?Add@?$CRecordVector@PAX@@QAEIQAX@Z PROC		; CRecordVector<void *>::Add, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ; CRecordVector<void *>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 201
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv72[ebp]
; Line 202
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CRecordVector@PAX@@QAEIQAX@Z ENDP		; CRecordVector<void *>::Add
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z PROC	; CRecordVector<void *>::AddInReserved, COMDAT
; _this$ = ecx
; Line 205
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 206
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 207
	mov	esp, ebp
	pop	ebp
	ret	4
?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ENDP	; CRecordVector<void *>::AddInReserved
_TEXT	ENDS
PUBLIC	?MoveItems@?$CRecordVector@PAX@@AAEXII@Z	; CRecordVector<void *>::MoveItems
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Insert@?$CRecordVector@PAX@@QAEXIQAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
_item$ = 12						; size = 4
?Insert@?$CRecordVector@PAX@@QAEXIQAX@Z PROC		; CRecordVector<void *>::Insert, COMDAT
; _this$ = ecx
; Line 210
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 211
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ; CRecordVector<void *>::ReserveOnePosition
; Line 212
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MoveItems@?$CRecordVector@PAX@@AAEXII@Z ; CRecordVector<void *>::MoveItems
; Line 213
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 214
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 215
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Insert@?$CRecordVector@PAX@@QAEXIQAX@Z ENDP		; CRecordVector<void *>::Insert
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@PAX@@QBEABQAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@PAX@@QBEABQAXI@Z PROC		; CRecordVector<void *>::operator[], COMDAT
; _this$ = ecx
; Line 227
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@PAX@@QBEABQAXI@Z ENDP		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@PAX@@QAEAAPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@PAX@@QAEAAPAXI@Z PROC		; CRecordVector<void *>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@PAX@@QAEAAPAXI@Z ENDP		; CRecordVector<void *>::operator[]
_TEXT	ENDS
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CBuffer@E@@QAE@ABV0@@Z
_TEXT	SEGMENT
$T72893 = -12						; size = 4
_size$ = -8						; size = 4
_this$ = -4						; size = 4
_buffer$ = 8						; size = 4
??0?$CBuffer@E@@QAE@ABV0@@Z PROC			; CBuffer<unsigned char>::CBuffer<unsigned char>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mybuffer.h
; Line 27
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 28
	mov	edx, DWORD PTR _buffer$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _size$[ebp], eax
; Line 29
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN2@CBuffer
; Line 31
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T72893[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T72893[ebp]
	mov	DWORD PTR [edx], eax
; Line 32
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buffer$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 33
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN2@CBuffer:
; Line 35
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CBuffer@E@@QAE@ABV0@@Z ENDP			; CBuffer<unsigned char>::CBuffer<unsigned char>
_TEXT	ENDS
PUBLIC	??0CProp@@QAE@ABU0@@Z				; CProp::CProp
PUBLIC	??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z	; CObjectVector<CProp>::operator[]
PUBLIC	?Size@?$CObjectVector@UCProp@@@@QBEIXZ		; CObjectVector<CProp>::Size
;	COMDAT xdata$x
; File c:\workspace\7z1505-src\cpp\common\myvector.h
xdata$x	SEGMENT
__unwindtable$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$1
__ehfuncinfo$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
tv85 = -36						; size = 4
$T72897 = -32						; size = 4
$T72896 = -28						; size = 4
_i$71952 = -24						; size = 4
_size$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_v$ = 8							; size = 4
??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z PROC		; CObjectVector<CProp>::CObjectVector<CProp>, COMDAT
; _this$ = ecx
; Line 422
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 424
	mov	ecx, DWORD PTR _v$[ebp]
	call	?Size@?$CObjectVector@UCProp@@@@QBEIXZ	; CObjectVector<CProp>::Size
	mov	DWORD PTR _size$[ebp], eax
; Line 425
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z ; CRecordVector<void *>::ConstructReserve
; Line 426
	mov	DWORD PTR _i$71952[ebp], 0
	jmp	SHORT $LN3@CObjectVec@8
$LN2@CObjectVec@8:
	mov	ecx, DWORD PTR _i$71952[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$71952[ebp], ecx
$LN3@CObjectVec@8:
	mov	edx, DWORD PTR _i$71952[ebp]
	cmp	edx, DWORD PTR _size$[ebp]
	jae	SHORT $LN4@CObjectVec@8
; Line 427
	push	24					; 00000018H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T72897[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T72897[ebp], 0
	je	SHORT $LN6@CObjectVec@8
	mov	eax, DWORD PTR _i$71952[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	call	??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ; CObjectVector<CProp>::operator[]
	push	eax
	mov	ecx, DWORD PTR $T72897[ebp]
	call	??0CProp@@QAE@ABU0@@Z
	mov	DWORD PTR tv85[ebp], eax
	jmp	SHORT $LN7@CObjectVec@8
$LN6@CObjectVec@8:
	mov	DWORD PTR tv85[ebp], 0
$LN7@CObjectVec@8:
	mov	ecx, DWORD PTR tv85[ebp]
	mov	DWORD PTR $T72896[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T72896[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ; CRecordVector<void *>::AddInReserved
	jmp	SHORT $LN2@CObjectVec@8
$LN4@CObjectVec@8:
; Line 428
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$1:
	mov	eax, DWORD PTR $T72897[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z ENDP		; CObjectVector<CProp>::CObjectVector<CProp>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Size@?$CObjectVector@UCProp@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@UCProp@@@@QBEIXZ PROC		; CObjectVector<CProp>::Size, COMDAT
; _this$ = ecx
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@UCProp@@@@QBEIXZ ENDP		; CObjectVector<CProp>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z PROC	; CObjectVector<CProp>::operator[], COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ENDP	; CObjectVector<CProp>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UIHasher@@@@QAEPAUIHasher@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UIHasher@@@@QAEPAUIHasher@@PAU1@@Z PROC	; CMyComPtr<IHasher>::operator=, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@2
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@2:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@2
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@2:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UIHasher@@@@QAEPAUIHasher@@PAU1@@Z ENDP	; CMyComPtr<IHasher>::operator=
_TEXT	ENDS
PUBLIC	?MoveItems@?$CRecordVector@_K@@AAEXII@Z		; CRecordVector<unsigned __int64>::MoveItems
PUBLIC	?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ	; CRecordVector<unsigned __int64>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Insert@?$CRecordVector@_K@@QAEXI_K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
_item$ = 12						; size = 8
?Insert@?$CRecordVector@_K@@QAEXI_K@Z PROC		; CRecordVector<unsigned __int64>::Insert, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 210
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 211
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ ; CRecordVector<unsigned __int64>::ReserveOnePosition
; Line 212
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MoveItems@?$CRecordVector@_K@@AAEXII@Z	; CRecordVector<unsigned __int64>::MoveItems
; Line 213
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*8], edx
	mov	edx, DWORD PTR _item$[ebp+4]
	mov	DWORD PTR [eax+ecx*8+4], edx
; Line 214
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 215
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Insert@?$CRecordVector@_K@@QAEXI_K@Z ENDP		; CRecordVector<unsigned __int64>::Insert
_TEXT	ENDS
EXTRN	??0CPropVariant@NCOM@NWindows@@QAE@ABV012@@Z:PROC ; NWindows::NCOM::CPropVariant::CPropVariant
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CProp@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CProp@@QAE@ABU0@@Z PROC				; CProp::CProp, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+4]
	mov	BYTE PTR [eax+4], dl
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0CPropVariant@NCOM@NWindows@@QAE@ABV012@@Z ; NWindows::NCOM::CPropVariant::CPropVariant
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CProp@@QAE@ABU0@@Z ENDP				; CProp::CProp
_TEXT	ENDS
EXTRN	__imp__memmove:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?MoveItems@?$CRecordVector@PAX@@AAEXII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_destIndex$ = 8						; size = 4
_srcIndex$ = 12						; size = 4
?MoveItems@?$CRecordVector@PAX@@AAEXII@Z PROC		; CRecordVector<void *>::MoveItems, COMDAT
; _this$ = ecx
; Line 14
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 15
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR _srcIndex$[ebp]
	shl	ecx, 2
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _srcIndex$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _destIndex$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 16
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?MoveItems@?$CRecordVector@PAX@@AAEXII@Z ENDP		; CRecordVector<void *>::MoveItems
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ
_TEXT	SEGMENT
$T72924 = -20						; size = 4
$T72923 = -16						; size = 4
_p$71977 = -12						; size = 4
_newCapacity$71976 = -8					; size = 4
_this$ = -4						; size = 4
?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ PROC	; CRecordVector<void *>::ReserveOnePosition, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@ReserveOne
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$71976[ebp], ecx
; Line 23
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$71976[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T72923[ebp], eax
	mov	eax, DWORD PTR $T72923[ebp]
	mov	DWORD PTR _p$71977[ebp], eax
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@ReserveOne
; Line 25
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$71977[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne:
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T72924[ebp], edx
	mov	eax, DWORD PTR $T72924[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$71977[ebp]
	mov	DWORD PTR [ecx], edx
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$71976[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ReserveOne:
; Line 30
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ENDP	; CRecordVector<void *>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?MoveItems@?$CRecordVector@_K@@AAEXII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_destIndex$ = 8						; size = 4
_srcIndex$ = 12						; size = 4
?MoveItems@?$CRecordVector@_K@@AAEXII@Z PROC		; CRecordVector<unsigned __int64>::MoveItems, COMDAT
; _this$ = ecx
; Line 14
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 15
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR _srcIndex$[ebp]
	shl	ecx, 3
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _srcIndex$[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _destIndex$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 16
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?MoveItems@?$CRecordVector@_K@@AAEXII@Z ENDP		; CRecordVector<unsigned __int64>::MoveItems
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ
_TEXT	SEGMENT
$T72930 = -20						; size = 4
$T72929 = -16						; size = 4
_p$71992 = -12						; size = 4
_newCapacity$71991 = -8					; size = 4
_this$ = -4						; size = 4
?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ PROC	; CRecordVector<unsigned __int64>::ReserveOnePosition, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@ReserveOne@2
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$71991[ebp], ecx
; Line 23
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$71991[ebp]
	mov	edx, 8
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T72929[ebp], eax
	mov	eax, DWORD PTR $T72929[ebp]
	mov	DWORD PTR _p$71992[ebp], eax
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@ReserveOne@2
; Line 25
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$71992[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne@2:
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T72930[ebp], edx
	mov	eax, DWORD PTR $T72930[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$71992[ebp]
	mov	DWORD PTR [ecx], edx
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$71991[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ReserveOne@2:
; Line 30
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ ENDP	; CRecordVector<unsigned __int64>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$QueryInterface@UICompressSetCoderProperties@@@?$CMyComPtr@UIHasher@@@@QBEJABU_GUID@@PAPAUICompressSetCoderProperties@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iid$ = 8						; size = 4
_pp$ = 12						; size = 4
??$QueryInterface@UICompressSetCoderProperties@@@?$CMyComPtr@UIHasher@@@@QBEJABU_GUID@@PAPAUICompressSetCoderProperties@@@Z PROC ; CMyComPtr<IHasher>::QueryInterface<ICompressSetCoderProperties>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 70
	mov	esi, esp
	mov	eax, DWORD PTR _pp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 71
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$QueryInterface@UICompressSetCoderProperties@@@?$CMyComPtr@UIHasher@@@@QBEJABU_GUID@@PAPAUICompressSetCoderProperties@@@Z ENDP ; CMyComPtr<IHasher>::QueryInterface<ICompressSetCoderProperties>
_TEXT	ENDS
END
