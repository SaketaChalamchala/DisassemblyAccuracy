; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\CPP\7zip\Archive\Tar\TarUpdate.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??B?$CMyComPtr@VCLimitedSequentialInStream@@@@QBEPAVCLimitedSequentialInStream@@XZ ; CMyComPtr<CLimitedSequentialInStream>::operator CLimitedSequentialInStream *
PUBLIC	??C?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator->
PUBLIC	??B?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator IArchiveUpdateCallbackFile *
PUBLIC	?Init@CLimitedSequentialInStream@@QAEX_K@Z	; CLimitedSequentialInStream::Init
PUBLIC	?GetDataPosition@CItemEx@NTar@NArchive@@QBE_KXZ	; NArchive::NTar::CItemEx::GetDataPosition
PUBLIC	??4?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAEAAV0@ABV0@@Z ; CRecordVector<NArchive::NTar::CSparseBlock>::operator=
PUBLIC	?IsDir@CItem@NTar@NArchive@@QBE_NXZ		; NArchive::NTar::CItem::IsDir
PUBLIC	??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator->
PUBLIC	??7?$CMyComPtr@UIOutStream@@@@QBE_NXZ		; CMyComPtr<IOutStream>::operator!
PUBLIC	??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *
PUBLIC	??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator->
PUBLIC	?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ ; CMyComPtr<ISequentialInStream>::Release
PUBLIC	??1?$CMyComPtr@UIStreamGetProps@@@@QAE@XZ	; CMyComPtr<IStreamGetProps>::~CMyComPtr<IStreamGetProps>
PUBLIC	??C?$CMyComPtr@UIStreamGetProps@@@@QBEPAUIStreamGetProps@@XZ ; CMyComPtr<IStreamGetProps>::operator->
PUBLIC	??B?$CMyComPtr@UIStreamGetProps@@@@QBEPAUIStreamGetProps@@XZ ; CMyComPtr<IStreamGetProps>::operator IStreamGetProps *
PUBLIC	??I?$CMyComPtr@UIStreamGetProps@@@@QAEPAPAUIStreamGetProps@@XZ ; CMyComPtr<IStreamGetProps>::operator&
PUBLIC	??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator->
PUBLIC	??0?$CMyComPtr@UIStreamGetProps@@@@QAE@XZ	; CMyComPtr<IStreamGetProps>::CMyComPtr<IStreamGetProps>
PUBLIC	??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
PUBLIC	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ	; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
PUBLIC	??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator&
PUBLIC	??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ	; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
PUBLIC	?Clear@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAEXXZ ; CRecordVector<NArchive::NTar::CSparseBlock>::Clear
PUBLIC	?IsEmpty@AString@@QBE_NXZ			; AString::IsEmpty
PUBLIC	??1CItem@NTar@NArchive@@QAE@XZ			; NArchive::NTar::CItem::~CItem
PUBLIC	??1AString@@QAE@XZ				; AString::~AString
PUBLIC	??4CItem@NTar@NArchive@@QAEAAU012@ABU012@@Z	; NArchive::NTar::CItem::operator=
PUBLIC	??0CItem@NTar@NArchive@@QAE@XZ			; NArchive::NTar::CItem::CItem
PUBLIC	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ	; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
PUBLIC	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ	; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
PUBLIC	??1?$CMyComPtr@VCLimitedSequentialInStream@@@@QAE@XZ ; CMyComPtr<CLimitedSequentialInStream>::~CMyComPtr<CLimitedSequentialInStream>
PUBLIC	?SetStream@CLimitedSequentialInStream@@QAEXPAUISequentialInStream@@@Z ; CLimitedSequentialInStream::SetStream
PUBLIC	??0?$CMyComPtr@VCLimitedSequentialInStream@@@@QAE@PAVCLimitedSequentialInStream@@@Z ; CMyComPtr<CLimitedSequentialInStream>::CMyComPtr<CLimitedSequentialInStream>
PUBLIC	??0CLimitedSequentialInStream@@QAE@XZ		; CLimitedSequentialInStream::CLimitedSequentialInStream
PUBLIC	??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>
PUBLIC	??0?$CMyComPtr@UICompressCoder@@@@QAE@PAUICompressCoder@@@Z ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>
PUBLIC	??0CCopyCoder@NCompress@@QAE@XZ			; NCompress::CCopyCoder::CCopyCoder
PUBLIC	??1COutArchive@NTar@NArchive@@QAE@XZ		; NArchive::NTar::COutArchive::~COutArchive
PUBLIC	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ		; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
PUBLIC	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
PUBLIC	?GetFullSize@CItemEx@NTar@NArchive@@QBE_KXZ	; NArchive::NTar::CItemEx::GetFullSize
PUBLIC	??A?$CObjectVector@UCItemEx@NTar@NArchive@@@@QBEABUCItemEx@NTar@NArchive@@I@Z ; CObjectVector<NArchive::NTar::CItemEx>::operator[]
PUBLIC	??A?$CObjectVector@UCUpdateItem@NTar@NArchive@@@@QBEABUCUpdateItem@NTar@NArchive@@I@Z ; CObjectVector<NArchive::NTar::CUpdateItem>::operator[]
PUBLIC	?Size@?$CObjectVector@UCUpdateItem@NTar@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NTar::CUpdateItem>::Size
PUBLIC	??I?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAEPAPAUIArchiveUpdateCallbackFile@@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator&
PUBLIC	??0?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::CMyComPtr<IArchiveUpdateCallbackFile>
PUBLIC	??I?$CMyComPtr@UIOutStream@@@@QAEPAPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator&
PUBLIC	??0?$CMyComPtr@UIOutStream@@@@QAE@XZ		; CMyComPtr<IOutStream>::CMyComPtr<IOutStream>
PUBLIC	?Create@COutArchive@NTar@NArchive@@QAEXPAUISequentialOutStream@@@Z ; NArchive::NTar::COutArchive::Create
PUBLIC	??0COutArchive@NTar@NArchive@@QAE@XZ		; NArchive::NTar::COutArchive::COutArchive
PUBLIC	__$ArrayPad$
PUBLIC	?UpdateArchive@NTar@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@ABV?$CObjectVector@UCItemEx@NTar@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NTar@NArchive@@@@IPAUIArchiveUpdateCallback@@@Z ; NArchive::NTar::UpdateArchive
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	?WriteFinishHeader@COutArchive@NTar@NArchive@@QAEJXZ:PROC ; NArchive::NTar::COutArchive::WriteFinishHeader
EXTRN	?FillDataResidual@COutArchive@NTar@NArchive@@QAEJ_K@Z:PROC ; NArchive::NTar::COutArchive::FillDataResidual
EXTRN	?WriteHeader@COutArchive@NTar@NArchive@@QAEJABUCItem@23@@Z:PROC ; NArchive::NTar::COutArchive::WriteHeader
EXTRN	?FileTimeToUnixTime64@NTime@NWindows@@YG_JABU_FILETIME@@@Z:PROC ; NWindows::NTime::FileTimeToUnixTime64
EXTRN	_IID_IStreamGetProps:BYTE
EXTRN	?GetPropString@NTar@NArchive@@YGJPAUIArchiveUpdateCallback@@IKAAVAString@@I_N@Z:PROC ; NArchive::NTar::GetPropString
EXTRN	??0AString@@QAE@XZ:PROC				; AString::AString
EXTRN	_memcpy:PROC
EXTRN	?kUsTar_00@NMagic@NFileHeader@NTar@NArchive@@3QBDB:BYTE ; NArchive::NTar::NFileHeader::NMagic::kUsTar_00
EXTRN	??4AString@@QAEAAV0@ABV0@@Z:PROC		; AString::operator=
EXTRN	?SetCur@CLocalProgress@@QAEJXZ:PROC		; CLocalProgress::SetCur
EXTRN	?Init@CLocalProgress@@QAEXPAUIProgress@@_N@Z:PROC ; CLocalProgress::Init
EXTRN	??0CLocalProgress@@QAE@XZ:PROC			; CLocalProgress::CLocalProgress
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	_IID_IArchiveUpdateCallbackFile:BYTE
EXTRN	_IID_IOutStream:BYTE
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
xdata$x	SEGMENT
__ehfuncinfo$?UpdateArchive@NTar@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@ABV?$CObjectVector@UCItemEx@NTar@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NTar@NArchive@@@@IPAUIArchiveUpdateCallback@@@Z DD 019930522H
	DD	0eH
	DD	FLAT:__unwindtable$?UpdateArchive@NTar@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@ABV?$CObjectVector@UCItemEx@NTar@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NTar@NArchive@@@@IPAUIArchiveUpdateCallback@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?UpdateArchive@NTar@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@ABV?$CObjectVector@UCItemEx@NTar@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NTar@NArchive@@@@IPAUIArchiveUpdateCallback@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?UpdateArchive@NTar@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@ABV?$CObjectVector@UCItemEx@NTar@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NTar@NArchive@@@@IPAUIArchiveUpdateCallback@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?UpdateArchive@NTar@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@ABV?$CObjectVector@UCItemEx@NTar@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NTar@NArchive@@@@IPAUIArchiveUpdateCallback@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?UpdateArchive@NTar@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@ABV?$CObjectVector@UCItemEx@NTar@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NTar@NArchive@@@@IPAUIArchiveUpdateCallback@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?UpdateArchive@NTar@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@ABV?$CObjectVector@UCItemEx@NTar@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NTar@NArchive@@@@IPAUIArchiveUpdateCallback@@@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$?UpdateArchive@NTar@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@ABV?$CObjectVector@UCItemEx@NTar@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NTar@NArchive@@@@IPAUIArchiveUpdateCallback@@@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?UpdateArchive@NTar@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@ABV?$CObjectVector@UCItemEx@NTar@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NTar@NArchive@@@@IPAUIArchiveUpdateCallback@@@Z$5
	DD	04H
	DD	FLAT:__unwindfunclet$?UpdateArchive@NTar@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@ABV?$CObjectVector@UCItemEx@NTar@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NTar@NArchive@@@@IPAUIArchiveUpdateCallback@@@Z$6
	DD	06H
	DD	FLAT:__unwindfunclet$?UpdateArchive@NTar@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@ABV?$CObjectVector@UCItemEx@NTar@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NTar@NArchive@@@@IPAUIArchiveUpdateCallback@@@Z$7
	DD	06H
	DD	FLAT:__unwindfunclet$?UpdateArchive@NTar@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@ABV?$CObjectVector@UCItemEx@NTar@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NTar@NArchive@@@@IPAUIArchiveUpdateCallback@@@Z$8
	DD	08H
	DD	FLAT:__unwindfunclet$?UpdateArchive@NTar@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@ABV?$CObjectVector@UCItemEx@NTar@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NTar@NArchive@@@@IPAUIArchiveUpdateCallback@@@Z$9
	DD	09H
	DD	FLAT:__unwindfunclet$?UpdateArchive@NTar@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@ABV?$CObjectVector@UCItemEx@NTar@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NTar@NArchive@@@@IPAUIArchiveUpdateCallback@@@Z$10
	DD	0aH
	DD	FLAT:__unwindfunclet$?UpdateArchive@NTar@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@ABV?$CObjectVector@UCItemEx@NTar@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NTar@NArchive@@@@IPAUIArchiveUpdateCallback@@@Z$11
	DD	0bH
	DD	FLAT:__unwindfunclet$?UpdateArchive@NTar@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@ABV?$CObjectVector@UCItemEx@NTar@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NTar@NArchive@@@@IPAUIArchiveUpdateCallback@@@Z$12
	DD	0bH
	DD	FLAT:__unwindfunclet$?UpdateArchive@NTar@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@ABV?$CObjectVector@UCItemEx@NTar@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NTar@NArchive@@@@IPAUIArchiveUpdateCallback@@@Z$13
xdata$x	ENDS
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\cpp\7zip\archive\tar\tarupdate.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
tv1309 = -636						; size = 4
tv655 = -632						; size = 4
tv644 = -628						; size = 4
tv482 = -624						; size = 4
tv465 = -620						; size = 4
tv1098 = -616						; size = 4
tv439 = -612						; size = 4
tv396 = -608						; size = 4
tv351 = -604						; size = 4
tv1015 = -600						; size = 4
tv201 = -596						; size = 4
tv179 = -592						; size = 4
tv164 = -588						; size = 4
$T70796 = -584						; size = 4
$T70795 = -580						; size = 4
$T70794 = -576						; size = 4
$T70793 = -572						; size = 4
$T70792 = -568						; size = 4
$T70791 = -564						; size = 4
$T70790 = -560						; size = 4
$T70789 = -556						; size = 4
$T70788 = -552						; size = 4
$T70787 = -548						; size = 4
$T70786 = -544						; size = 4
$T70785 = -540						; size = 4
$T70784 = -536						; size = 4
$T70783 = -532						; size = 4
$T70782 = -528						; size = 4
$T70781 = -524						; size = 4
$T70780 = -520						; size = 4
$T70779 = -516						; size = 4
$T70778 = -512						; size = 4
$T70777 = -508						; size = 4
$T70776 = -504						; size = 4
$T70775 = -500						; size = 4
$T70772 = -496						; size = 4
$T70771 = -492						; size = 4
$T70768 = -488						; size = 4
$T70767 = -484						; size = 4
$T70764 = -480						; size = 4
$T70763 = -476						; size = 4
$T70762 = -472						; size = 4
___result__$70295 = -468				; size = 4
___result__$70292 = -464				; size = 4
___result__$70286 = -460				; size = 4
___result__$70282 = -456				; size = 4
___result__$70278 = -452				; size = 4
___result__$70274 = -448				; size = 4
___result__$70271 = -444				; size = 4
_size$70266 = -440					; size = 8
_existItem$70265 = -432					; size = 4
___result__$70261 = -428				; size = 4
___result__$70258 = -424				; size = 4
___result__$70255 = -420				; size = 4
___result__$70252 = -416				; size = 4
___result__$70248 = -412				; size = 4
_backOffset$70247 = -408				; size = 8
___result__$70240 = -400				; size = 4
___result__$70236 = -396				; size = 4
_fileHeaderStartPos$70235 = -392			; size = 8
___result__$70230 = -384				; size = 4
_hardLink$70229 = -376					; size = 12
_size2$70226 = -356					; size = 8
_mTime$70225 = -340					; size = 8
_getProps$70222 = -324					; size = 4
___result__$70181 = -316				; size = 4
_res$70177 = -312					; size = 4
_needWrite$70174 = -305					; size = 1
_fileInStream$70173 = -300				; size = 4
___result__$70162 = -292				; size = 4
_symLink$70159 = -284					; size = 12
_item$70154 = -264					; size = 120
_ui$70153 = -140					; size = 4
___result__$70150 = -136				; size = 4
_inStreamLimited$ = -128				; size = 4
_streamSpec$ = -120					; size = 4
_progress$ = -112					; size = 4
_lps$ = -104						; size = 4
_copyCoder$ = -96					; size = 4
_copyCoderSpec$ = -88					; size = 4
___result__$70051 = -84					; size = 4
_ui$69984 = -80						; size = 4
_i$ = -76						; size = 4
_complexity$ = -72					; size = 8
_opCallback$ = -60					; size = 4
_outSeekStream$ = -48					; size = 4
_outArchive$ = -36					; size = 16
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_inStream$ = 8						; size = 4
_outStream$ = 12					; size = 4
_inputItems$ = 16					; size = 4
_updateItems$ = 20					; size = 4
_codePage$ = 24						; size = 4
_updateCallback$ = 28					; size = 4
?UpdateArchive@NTar@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@ABV?$CObjectVector@UCItemEx@NTar@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NTar@NArchive@@@@IPAUIArchiveUpdateCallback@@@Z PROC ; NArchive::NTar::UpdateArchive
; Line 26
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?UpdateArchive@NTar@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@ABV?$CObjectVector@UCItemEx@NTar@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NTar@NArchive@@@@IPAUIArchiveUpdateCallback@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 624				; 00000270H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-636]
	mov	ecx, 156				; 0000009cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 27
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	??0COutArchive@NTar@NArchive@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 28
	mov	eax, DWORD PTR _outStream$[ebp]
	push	eax
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	?Create@COutArchive@NTar@NArchive@@QAEXPAUISequentialOutStream@@@Z ; NArchive::NTar::COutArchive::Create
; Line 29
	mov	DWORD PTR _outArchive$[ebp+8], 0
	mov	DWORD PTR _outArchive$[ebp+12], 0
; Line 31
	lea	ecx, DWORD PTR _outSeekStream$[ebp]
	call	??0?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::CMyComPtr<IOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
; Line 32
	lea	ecx, DWORD PTR _outSeekStream$[ebp]
	call	??I?$CMyComPtr@UIOutStream@@@@QAEPAPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator&
	mov	esi, esp
	push	eax
	push	OFFSET _IID_IOutStream
	mov	ecx, DWORD PTR _outStream$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _outStream$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 34
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??0?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::CMyComPtr<IArchiveUpdateCallbackFile>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
; Line 35
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??I?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAEPAPAUIArchiveUpdateCallbackFile@@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator&
	mov	esi, esp
	push	eax
	push	OFFSET _IID_IArchiveUpdateCallbackFile
	mov	edx, DWORD PTR _updateCallback$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _updateCallback$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 37
	mov	DWORD PTR _complexity$[ebp], 0
	mov	DWORD PTR _complexity$[ebp+4], 0
; Line 40
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN56@UpdateArch
$LN55@UpdateArch:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN56@UpdateArch:
	mov	ecx, DWORD PTR _updateItems$[ebp]
	call	?Size@?$CObjectVector@UCUpdateItem@NTar@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NTar::CUpdateItem>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN54@UpdateArch
; Line 42
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _updateItems$[ebp]
	call	??A?$CObjectVector@UCUpdateItem@NTar@NArchive@@@@QBEABUCUpdateItem@NTar@NArchive@@I@Z ; CObjectVector<NArchive::NTar::CUpdateItem>::operator[]
	mov	DWORD PTR _ui$69984[ebp], eax
; Line 43
	mov	edx, DWORD PTR _ui$69984[ebp]
	movzx	eax, BYTE PTR [edx+28]
	test	eax, eax
	je	SHORT $LN53@UpdateArch
; Line 44
	mov	ecx, DWORD PTR _ui$69984[ebp]
	mov	edx, DWORD PTR _complexity$[ebp]
	add	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _complexity$[ebp+4]
	adc	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR _complexity$[ebp], edx
	mov	DWORD PTR _complexity$[ebp+4], eax
; Line 45
	jmp	SHORT $LN52@UpdateArch
$LN53@UpdateArch:
; Line 46
	mov	ecx, DWORD PTR _ui$69984[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _inputItems$[ebp]
	call	??A?$CObjectVector@UCItemEx@NTar@NArchive@@@@QBEABUCItemEx@NTar@NArchive@@I@Z ; CObjectVector<NArchive::NTar::CItemEx>::operator[]
	mov	ecx, eax
	call	?GetFullSize@CItemEx@NTar@NArchive@@QBE_KXZ ; NArchive::NTar::CItemEx::GetFullSize
	add	eax, DWORD PTR _complexity$[ebp]
	adc	edx, DWORD PTR _complexity$[ebp+4]
	mov	DWORD PTR _complexity$[ebp], eax
	mov	DWORD PTR _complexity$[ebp+4], edx
$LN52@UpdateArch:
; Line 47
	jmp	SHORT $LN55@UpdateArch
$LN54@UpdateArch:
; Line 49
	mov	esi, esp
	mov	eax, DWORD PTR _complexity$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _complexity$[ebp]
	push	ecx
	mov	edx, DWORD PTR _updateCallback$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _updateCallback$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$70051[ebp], eax
	cmp	DWORD PTR ___result__$70051[ebp], 0
	je	SHORT $LN51@UpdateArch
	mov	eax, DWORD PTR ___result__$70051[ebp]
	mov	DWORD PTR $T70762[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outSeekStream$[ebp]
	call	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	??1COutArchive@NTar@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T70762[ebp]
	jmp	$LN57@UpdateArch
$LN51@UpdateArch:
; Line 51
	push	40					; 00000028H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T70764[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	cmp	DWORD PTR $T70764[ebp], 0
	je	SHORT $LN59@UpdateArch
	mov	ecx, DWORD PTR $T70764[ebp]
	call	??0CCopyCoder@NCompress@@QAE@XZ		; NCompress::CCopyCoder::CCopyCoder
	mov	DWORD PTR tv164[ebp], eax
	jmp	SHORT $LN60@UpdateArch
$LN59@UpdateArch:
	mov	DWORD PTR tv164[ebp], 0
$LN60@UpdateArch:
	mov	ecx, DWORD PTR tv164[ebp]
	mov	DWORD PTR $T70763[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	edx, DWORD PTR $T70763[ebp]
	mov	DWORD PTR _copyCoderSpec$[ebp], edx
; Line 52
	mov	eax, DWORD PTR _copyCoderSpec$[ebp]
	push	eax
	lea	ecx, DWORD PTR _copyCoder$[ebp]
	call	??0?$CMyComPtr@UICompressCoder@@@@QAE@PAUICompressCoder@@@Z ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
; Line 54
	push	56					; 00000038H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T70768[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	cmp	DWORD PTR $T70768[ebp], 0
	je	SHORT $LN61@UpdateArch
	mov	ecx, DWORD PTR $T70768[ebp]
	call	??0CLocalProgress@@QAE@XZ		; CLocalProgress::CLocalProgress
	mov	DWORD PTR tv179[ebp], eax
	jmp	SHORT $LN62@UpdateArch
$LN61@UpdateArch:
	mov	DWORD PTR tv179[ebp], 0
$LN62@UpdateArch:
	mov	ecx, DWORD PTR tv179[ebp]
	mov	DWORD PTR $T70767[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	edx, DWORD PTR $T70767[ebp]
	mov	DWORD PTR _lps$[ebp], edx
; Line 55
	mov	eax, DWORD PTR _lps$[ebp]
	push	eax
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 6
; Line 56
	push	1
	mov	ecx, DWORD PTR _updateCallback$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _lps$[ebp]
	call	?Init@CLocalProgress@@QAEXPAUIProgress@@_N@Z ; CLocalProgress::Init
; Line 58
	push	40					; 00000028H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T70772[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	cmp	DWORD PTR $T70772[ebp], 0
	je	SHORT $LN63@UpdateArch
	mov	ecx, DWORD PTR $T70772[ebp]
	call	??0CLimitedSequentialInStream@@QAE@XZ
	mov	DWORD PTR tv201[ebp], eax
	jmp	SHORT $LN64@UpdateArch
$LN63@UpdateArch:
	mov	DWORD PTR tv201[ebp], 0
$LN64@UpdateArch:
	mov	edx, DWORD PTR tv201[ebp]
	mov	DWORD PTR $T70771[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	eax, DWORD PTR $T70771[ebp]
	mov	DWORD PTR _streamSpec$[ebp], eax
; Line 59
	mov	ecx, DWORD PTR _streamSpec$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _inStreamLimited$[ebp]
	call	??0?$CMyComPtr@VCLimitedSequentialInStream@@@@QAE@PAVCLimitedSequentialInStream@@@Z ; CMyComPtr<CLimitedSequentialInStream>::CMyComPtr<CLimitedSequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 8
; Line 60
	mov	edx, DWORD PTR _inStream$[ebp]
	push	edx
	mov	ecx, DWORD PTR _streamSpec$[ebp]
	call	?SetStream@CLimitedSequentialInStream@@QAEXPAUISequentialInStream@@@Z ; CLimitedSequentialInStream::SetStream
; Line 62
	mov	DWORD PTR _complexity$[ebp], 0
	mov	DWORD PTR _complexity$[ebp+4], 0
; Line 64
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN50@UpdateArch
$LN49@UpdateArch:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN50@UpdateArch:
	mov	ecx, DWORD PTR _updateItems$[ebp]
	call	?Size@?$CObjectVector@UCUpdateItem@NTar@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NTar::CUpdateItem>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	$LN48@UpdateArch
; Line 66
	mov	ecx, DWORD PTR _lps$[ebp]
	mov	edx, DWORD PTR _complexity$[ebp]
	mov	DWORD PTR [ecx+40], edx
	mov	eax, DWORD PTR _complexity$[ebp+4]
	mov	DWORD PTR [ecx+44], eax
	mov	ecx, DWORD PTR _lps$[ebp]
	mov	edx, DWORD PTR _complexity$[ebp]
	mov	DWORD PTR [ecx+32], edx
	mov	eax, DWORD PTR _complexity$[ebp+4]
	mov	DWORD PTR [ecx+36], eax
; Line 67
	mov	ecx, DWORD PTR _lps$[ebp]
	call	?SetCur@CLocalProgress@@QAEJXZ		; CLocalProgress::SetCur
	mov	DWORD PTR ___result__$70150[ebp], eax
	cmp	DWORD PTR ___result__$70150[ebp], 0
	je	SHORT $LN47@UpdateArch
	mov	ecx, DWORD PTR ___result__$70150[ebp]
	mov	DWORD PTR $T70775[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _inStreamLimited$[ebp]
	call	??1?$CMyComPtr@VCLimitedSequentialInStream@@@@QAE@XZ ; CMyComPtr<CLimitedSequentialInStream>::~CMyComPtr<CLimitedSequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _copyCoder$[ebp]
	call	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outSeekStream$[ebp]
	call	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	??1COutArchive@NTar@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T70775[ebp]
	jmp	$LN57@UpdateArch
$LN47@UpdateArch:
; Line 69
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _updateItems$[ebp]
	call	??A?$CObjectVector@UCUpdateItem@NTar@NArchive@@@@QBEABUCUpdateItem@NTar@NArchive@@I@Z ; CObjectVector<NArchive::NTar::CUpdateItem>::operator[]
	mov	DWORD PTR _ui$70153[ebp], eax
; Line 70
	lea	ecx, DWORD PTR _item$70154[ebp]
	call	??0CItem@NTar@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 9
; Line 71
	mov	eax, DWORD PTR _ui$70153[ebp]
	movzx	ecx, BYTE PTR [eax+29]
	test	ecx, ecx
	je	$LN46@UpdateArch
; Line 73
	mov	edx, DWORD PTR _ui$70153[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR _item$70154[ebp+40], eax
; Line 74
	mov	ecx, DWORD PTR _ui$70153[ebp]
	add	ecx, 32					; 00000020H
	push	ecx
	lea	ecx, DWORD PTR _item$70154[ebp]
	call	??4AString@@QAEAAV0@ABV0@@Z		; AString::operator=
; Line 75
	mov	edx, DWORD PTR _ui$70153[ebp]
	add	edx, 44					; 0000002cH
	push	edx
	lea	ecx, DWORD PTR _item$70154[ebp+72]
	call	??4AString@@QAEAAV0@ABV0@@Z		; AString::operator=
; Line 76
	mov	eax, DWORD PTR _ui$70153[ebp]
	add	eax, 56					; 00000038H
	push	eax
	lea	ecx, DWORD PTR _item$70154[ebp+84]
	call	??4AString@@QAEAAV0@ABV0@@Z		; AString::operator=
; Line 77
	mov	ecx, DWORD PTR _ui$70153[ebp]
	movzx	edx, BYTE PTR [ecx+30]
	test	edx, edx
	je	SHORT $LN45@UpdateArch
; Line 79
	mov	BYTE PTR _item$70154[ebp+104], 53	; 00000035H
; Line 80
	mov	DWORD PTR _item$70154[ebp+16], 0
	mov	DWORD PTR _item$70154[ebp+20], 0
; Line 82
	jmp	SHORT $LN44@UpdateArch
$LN45@UpdateArch:
; Line 84
	mov	BYTE PTR _item$70154[ebp+104], 48	; 00000030H
; Line 85
	mov	eax, DWORD PTR _ui$70153[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _item$70154[ebp+16], ecx
	mov	edx, DWORD PTR [eax+20]
	mov	DWORD PTR _item$70154[ebp+20], edx
$LN44@UpdateArch:
; Line 87
	mov	eax, DWORD PTR _ui$70153[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _item$70154[ebp+32], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _item$70154[ebp+36], edx
; Line 88
	mov	BYTE PTR _item$70154[ebp+105], 0
; Line 89
	mov	BYTE PTR _item$70154[ebp+106], 0
; Line 90
	mov	DWORD PTR _item$70154[ebp+44], 0
; Line 91
	mov	DWORD PTR _item$70154[ebp+48], 0
; Line 92
	push	8
	push	OFFSET ?kUsTar_00@NMagic@NFileHeader@NTar@NArchive@@3QBDB ; NArchive::NTar::NFileHeader::NMagic::kUsTar_00
	lea	eax, DWORD PTR _item$70154[ebp+96]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 94
	jmp	SHORT $LN43@UpdateArch
$LN46@UpdateArch:
; Line 95
	mov	ecx, DWORD PTR _ui$70153[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _inputItems$[ebp]
	call	??A?$CObjectVector@UCItemEx@NTar@NArchive@@@@QBEABUCItemEx@NTar@NArchive@@I@Z ; CObjectVector<NArchive::NTar::CItemEx>::operator[]
	push	eax
	lea	ecx, DWORD PTR _item$70154[ebp]
	call	??4CItem@NTar@NArchive@@QAEAAU012@ABU012@@Z
$LN43@UpdateArch:
; Line 97
	lea	ecx, DWORD PTR _symLink$70159[ebp]
	call	??0AString@@QAE@XZ			; AString::AString
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
; Line 98
	mov	eax, DWORD PTR _ui$70153[ebp]
	movzx	ecx, BYTE PTR [eax+28]
	test	ecx, ecx
	jne	SHORT $LN41@UpdateArch
	mov	edx, DWORD PTR _ui$70153[ebp]
	movzx	eax, BYTE PTR [edx+29]
	test	eax, eax
	je	$LN42@UpdateArch
$LN41@UpdateArch:
; Line 100
	push	1
	mov	ecx, DWORD PTR _codePage$[ebp]
	push	ecx
	lea	edx, DWORD PTR _symLink$70159[ebp]
	push	edx
	push	54					; 00000036H
	mov	eax, DWORD PTR _ui$70153[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _updateCallback$[ebp]
	push	edx
	call	?GetPropString@NTar@NArchive@@YGJPAUIArchiveUpdateCallback@@IKAAVAString@@I_N@Z ; NArchive::NTar::GetPropString
	mov	DWORD PTR ___result__$70162[ebp], eax
	cmp	DWORD PTR ___result__$70162[ebp], 0
	je	$LN40@UpdateArch
	mov	eax, DWORD PTR ___result__$70162[ebp]
	mov	DWORD PTR $T70776[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _symLink$70159[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _item$70154[ebp]
	call	??1CItem@NTar@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _inStreamLimited$[ebp]
	call	??1?$CMyComPtr@VCLimitedSequentialInStream@@@@QAE@XZ ; CMyComPtr<CLimitedSequentialInStream>::~CMyComPtr<CLimitedSequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _copyCoder$[ebp]
	call	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outSeekStream$[ebp]
	call	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	??1COutArchive@NTar@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T70776[ebp]
	jmp	$LN57@UpdateArch
$LN40@UpdateArch:
; Line 101
	lea	ecx, DWORD PTR _symLink$70159[ebp]
	call	?IsEmpty@AString@@QBE_NXZ		; AString::IsEmpty
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN42@UpdateArch
; Line 103
	mov	BYTE PTR _item$70154[ebp+104], 50	; 00000032H
; Line 104
	lea	edx, DWORD PTR _symLink$70159[ebp]
	push	edx
	lea	ecx, DWORD PTR _item$70154[ebp+60]
	call	??4AString@@QAEAAV0@ABV0@@Z		; AString::operator=
$LN42@UpdateArch:
; Line 108
	mov	eax, DWORD PTR _ui$70153[ebp]
	movzx	ecx, BYTE PTR [eax+28]
	test	ecx, ecx
	je	$LN38@UpdateArch
; Line 110
	lea	ecx, DWORD PTR _item$70154[ebp+108]
	call	?Clear@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAEXXZ ; CRecordVector<NArchive::NTar::CSparseBlock>::Clear
; Line 111
	mov	edx, DWORD PTR _ui$70153[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _item$70154[ebp+16], eax
	mov	ecx, DWORD PTR [edx+20]
	mov	DWORD PTR _item$70154[ebp+20], ecx
; Line 112
	mov	edx, DWORD PTR _ui$70153[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _item$70154[ebp+24], eax
	mov	ecx, DWORD PTR [edx+20]
	mov	DWORD PTR _item$70154[ebp+28], ecx
; Line 113
	mov	edx, DWORD PTR _ui$70153[ebp]
	mov	DWORD PTR tv1015[ebp], edx
	mov	eax, DWORD PTR tv1015[ebp]
	mov	ecx, DWORD PTR tv1015[ebp]
	mov	edx, DWORD PTR [eax+16]
	and	edx, DWORD PTR [ecx+20]
	cmp	edx, -1
	jne	SHORT $LN37@UpdateArch
; Line 114
	mov	DWORD PTR $T70777[ebp], -2147024809	; 80070057H
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _symLink$70159[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _item$70154[ebp]
	call	??1CItem@NTar@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _inStreamLimited$[ebp]
	call	??1?$CMyComPtr@VCLimitedSequentialInStream@@@@QAE@XZ ; CMyComPtr<CLimitedSequentialInStream>::~CMyComPtr<CLimitedSequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _copyCoder$[ebp]
	call	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outSeekStream$[ebp]
	call	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	??1COutArchive@NTar@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T70777[ebp]
	jmp	$LN57@UpdateArch
$LN37@UpdateArch:
; Line 116
	lea	ecx, DWORD PTR _fileInStream$70173[ebp]
	call	??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
; Line 118
	mov	BYTE PTR _needWrite$70174[ebp], 1
; Line 119
	lea	ecx, DWORD PTR _symLink$70159[ebp]
	call	?IsEmpty@AString@@QBE_NXZ		; AString::IsEmpty
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN36@UpdateArch
; Line 121
	mov	DWORD PTR _item$70154[ebp+16], 0
	mov	DWORD PTR _item$70154[ebp+20], 0
; Line 122
	mov	DWORD PTR _item$70154[ebp+24], 0
	mov	DWORD PTR _item$70154[ebp+28], 0
; Line 124
	jmp	$LN35@UpdateArch
$LN36@UpdateArch:
; Line 126
	lea	ecx, DWORD PTR _fileInStream$70173[ebp]
	call	??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator&
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _ui$70153[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _updateCallback$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _updateCallback$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+28]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _res$70177[ebp], eax
; Line 127
	cmp	DWORD PTR _res$70177[ebp], 1
	jne	SHORT $LN34@UpdateArch
; Line 128
	mov	BYTE PTR _needWrite$70174[ebp], 0
; Line 129
	jmp	$LN35@UpdateArch
$LN34@UpdateArch:
; Line 131
	mov	ecx, DWORD PTR _res$70177[ebp]
	mov	DWORD PTR ___result__$70181[ebp], ecx
	cmp	DWORD PTR ___result__$70181[ebp], 0
	je	$LN32@UpdateArch
	mov	edx, DWORD PTR ___result__$70181[ebp]
	mov	DWORD PTR $T70778[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _fileInStream$70173[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _symLink$70159[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _item$70154[ebp]
	call	??1CItem@NTar@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _inStreamLimited$[ebp]
	call	??1?$CMyComPtr@VCLimitedSequentialInStream@@@@QAE@XZ ; CMyComPtr<CLimitedSequentialInStream>::~CMyComPtr<CLimitedSequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _copyCoder$[ebp]
	call	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outSeekStream$[ebp]
	call	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	??1COutArchive@NTar@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T70778[ebp]
	jmp	$LN57@UpdateArch
$LN32@UpdateArch:
; Line 133
	lea	ecx, DWORD PTR _fileInStream$70173[ebp]
	call	??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
	test	eax, eax
	je	$LN31@UpdateArch
; Line 135
	lea	ecx, DWORD PTR _getProps$70222[ebp]
	call	??0?$CMyComPtr@UIStreamGetProps@@@@QAE@XZ ; CMyComPtr<IStreamGetProps>::CMyComPtr<IStreamGetProps>
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
; Line 136
	lea	ecx, DWORD PTR _fileInStream$70173[ebp]
	call	??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator->
	mov	DWORD PTR tv351[ebp], eax
	lea	ecx, DWORD PTR _getProps$70222[ebp]
	call	??I?$CMyComPtr@UIStreamGetProps@@@@QAEPAPAUIStreamGetProps@@XZ ; CMyComPtr<IStreamGetProps>::operator&
	mov	esi, esp
	push	eax
	push	OFFSET _IID_IStreamGetProps
	mov	eax, DWORD PTR tv351[ebp]
	push	eax
	mov	ecx, DWORD PTR tv351[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 137
	lea	ecx, DWORD PTR _getProps$70222[ebp]
	call	??B?$CMyComPtr@UIStreamGetProps@@@@QBEPAUIStreamGetProps@@XZ ; CMyComPtr<IStreamGetProps>::operator IStreamGetProps *
	test	eax, eax
	je	SHORT $LN30@UpdateArch
; Line 141
	lea	ecx, DWORD PTR _getProps$70222[ebp]
	call	??C?$CMyComPtr@UIStreamGetProps@@@@QBEPAUIStreamGetProps@@XZ ; CMyComPtr<IStreamGetProps>::operator->
	mov	DWORD PTR tv396[ebp], eax
	mov	esi, esp
	push	0
	lea	ecx, DWORD PTR _mTime$70225[ebp]
	push	ecx
	push	0
	push	0
	lea	edx, DWORD PTR _size2$70226[ebp]
	push	edx
	mov	eax, DWORD PTR tv396[ebp]
	push	eax
	mov	ecx, DWORD PTR tv396[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN30@UpdateArch
; Line 143
	mov	ecx, DWORD PTR _size2$70226[ebp]
	mov	DWORD PTR _item$70154[ebp+16], ecx
	mov	edx, DWORD PTR _size2$70226[ebp+4]
	mov	DWORD PTR _item$70154[ebp+20], edx
; Line 144
	lea	eax, DWORD PTR _mTime$70225[ebp]
	push	eax
	call	?FileTimeToUnixTime64@NTime@NWindows@@YG_JABU_FILETIME@@@Z ; NWindows::NTime::FileTimeToUnixTime64
	mov	DWORD PTR _item$70154[ebp+32], eax
	mov	DWORD PTR _item$70154[ebp+36], edx
$LN30@UpdateArch:
; Line 147
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _getProps$70222[ebp]
	call	??1?$CMyComPtr@UIStreamGetProps@@@@QAE@XZ ; CMyComPtr<IStreamGetProps>::~CMyComPtr<IStreamGetProps>
$LN31@UpdateArch:
; Line 149
	lea	ecx, DWORD PTR _hardLink$70229[ebp]
	call	??0AString@@QAE@XZ			; AString::AString
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH
; Line 150
	push	1
	mov	ecx, DWORD PTR _codePage$[ebp]
	push	ecx
	lea	edx, DWORD PTR _hardLink$70229[ebp]
	push	edx
	push	90					; 0000005aH
	mov	eax, DWORD PTR _ui$70153[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _updateCallback$[ebp]
	push	edx
	call	?GetPropString@NTar@NArchive@@YGJPAUIArchiveUpdateCallback@@IKAAVAString@@I_N@Z ; NArchive::NTar::GetPropString
	mov	DWORD PTR ___result__$70230[ebp], eax
	cmp	DWORD PTR ___result__$70230[ebp], 0
	je	$LN28@UpdateArch
	mov	eax, DWORD PTR ___result__$70230[ebp]
	mov	DWORD PTR $T70779[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _hardLink$70229[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _fileInStream$70173[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _symLink$70159[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _item$70154[ebp]
	call	??1CItem@NTar@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _inStreamLimited$[ebp]
	call	??1?$CMyComPtr@VCLimitedSequentialInStream@@@@QAE@XZ ; CMyComPtr<CLimitedSequentialInStream>::~CMyComPtr<CLimitedSequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _copyCoder$[ebp]
	call	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outSeekStream$[ebp]
	call	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	??1COutArchive@NTar@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T70779[ebp]
	jmp	$LN57@UpdateArch
$LN28@UpdateArch:
; Line 151
	lea	ecx, DWORD PTR _hardLink$70229[ebp]
	call	?IsEmpty@AString@@QBE_NXZ		; AString::IsEmpty
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN27@UpdateArch
; Line 153
	mov	BYTE PTR _item$70154[ebp+104], 49	; 00000031H
; Line 154
	lea	edx, DWORD PTR _hardLink$70229[ebp]
	push	edx
	lea	ecx, DWORD PTR _item$70154[ebp+60]
	call	??4AString@@QAEAAV0@ABV0@@Z		; AString::operator=
; Line 155
	mov	DWORD PTR _item$70154[ebp+16], 0
	mov	DWORD PTR _item$70154[ebp+20], 0
; Line 156
	mov	DWORD PTR _item$70154[ebp+24], 0
	mov	DWORD PTR _item$70154[ebp+28], 0
; Line 157
	lea	ecx, DWORD PTR _fileInStream$70173[ebp]
	call	?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ ; CMyComPtr<ISequentialInStream>::Release
$LN27@UpdateArch:
; Line 159
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _hardLink$70229[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
$LN35@UpdateArch:
; Line 163
	movzx	eax, BYTE PTR _needWrite$70174[ebp]
	test	eax, eax
	je	$LN26@UpdateArch
; Line 165
	mov	ecx, DWORD PTR _outArchive$[ebp+8]
	mov	DWORD PTR _fileHeaderStartPos$70235[ebp], ecx
	mov	edx, DWORD PTR _outArchive$[ebp+12]
	mov	DWORD PTR _fileHeaderStartPos$70235[ebp+4], edx
; Line 166
	lea	eax, DWORD PTR _item$70154[ebp]
	push	eax
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	?WriteHeader@COutArchive@NTar@NArchive@@QAEJABUCItem@23@@Z ; NArchive::NTar::COutArchive::WriteHeader
	mov	DWORD PTR ___result__$70236[ebp], eax
	cmp	DWORD PTR ___result__$70236[ebp], 0
	je	$LN25@UpdateArch
	mov	ecx, DWORD PTR ___result__$70236[ebp]
	mov	DWORD PTR $T70780[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _fileInStream$70173[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _symLink$70159[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _item$70154[ebp]
	call	??1CItem@NTar@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _inStreamLimited$[ebp]
	call	??1?$CMyComPtr@VCLimitedSequentialInStream@@@@QAE@XZ ; CMyComPtr<CLimitedSequentialInStream>::~CMyComPtr<CLimitedSequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _copyCoder$[ebp]
	call	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outSeekStream$[ebp]
	call	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	??1COutArchive@NTar@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T70780[ebp]
	jmp	$LN57@UpdateArch
$LN25@UpdateArch:
; Line 167
	lea	ecx, DWORD PTR _fileInStream$70173[ebp]
	call	??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
	test	eax, eax
	je	$LN26@UpdateArch
; Line 169
	lea	ecx, DWORD PTR _copyCoder$[ebp]
	call	??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator->
	mov	DWORD PTR tv439[ebp], eax
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *
	mov	esi, esp
	push	eax
	push	0
	push	0
	mov	edx, DWORD PTR _outStream$[ebp]
	push	edx
	lea	ecx, DWORD PTR _fileInStream$70173[ebp]
	call	??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
	push	eax
	mov	eax, DWORD PTR tv439[ebp]
	push	eax
	mov	ecx, DWORD PTR tv439[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$70240[ebp], eax
	cmp	DWORD PTR ___result__$70240[ebp], 0
	je	$LN23@UpdateArch
	mov	ecx, DWORD PTR ___result__$70240[ebp]
	mov	DWORD PTR $T70781[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _fileInStream$70173[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _symLink$70159[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _item$70154[ebp]
	call	??1CItem@NTar@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _inStreamLimited$[ebp]
	call	??1?$CMyComPtr@VCLimitedSequentialInStream@@@@QAE@XZ ; CMyComPtr<CLimitedSequentialInStream>::~CMyComPtr<CLimitedSequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _copyCoder$[ebp]
	call	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outSeekStream$[ebp]
	call	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	??1COutArchive@NTar@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T70781[ebp]
	jmp	$LN57@UpdateArch
$LN23@UpdateArch:
; Line 170
	mov	edx, DWORD PTR _copyCoderSpec$[ebp]
	mov	eax, DWORD PTR _outArchive$[ebp+8]
	add	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR _outArchive$[ebp+12]
	adc	ecx, DWORD PTR [edx+36]
	mov	DWORD PTR _outArchive$[ebp+8], eax
	mov	DWORD PTR _outArchive$[ebp+12], ecx
; Line 171
	mov	edx, DWORD PTR _copyCoderSpec$[ebp]
	mov	DWORD PTR tv1098[ebp], edx
	mov	eax, DWORD PTR tv1098[ebp]
	mov	ecx, DWORD PTR [eax+32]
	cmp	ecx, DWORD PTR _item$70154[ebp+16]
	jne	SHORT $LN79@UpdateArch
	mov	edx, DWORD PTR tv1098[ebp]
	mov	eax, DWORD PTR [edx+36]
	cmp	eax, DWORD PTR _item$70154[ebp+20]
	je	$LN22@UpdateArch
$LN79@UpdateArch:
; Line 173
	lea	ecx, DWORD PTR _outSeekStream$[ebp]
	call	??7?$CMyComPtr@UIOutStream@@@@QBE_NXZ	; CMyComPtr<IOutStream>::operator!
	movzx	ecx, al
	test	ecx, ecx
	je	$LN21@UpdateArch
; Line 174
	mov	DWORD PTR $T70782[ebp], -2147467259	; 80004005H
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _fileInStream$70173[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _symLink$70159[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _item$70154[ebp]
	call	??1CItem@NTar@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _inStreamLimited$[ebp]
	call	??1?$CMyComPtr@VCLimitedSequentialInStream@@@@QAE@XZ ; CMyComPtr<CLimitedSequentialInStream>::~CMyComPtr<CLimitedSequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _copyCoder$[ebp]
	call	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outSeekStream$[ebp]
	call	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	??1COutArchive@NTar@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T70782[ebp]
	jmp	$LN57@UpdateArch
$LN21@UpdateArch:
; Line 175
	mov	edx, DWORD PTR _outArchive$[ebp+8]
	sub	edx, DWORD PTR _fileHeaderStartPos$70235[ebp]
	mov	eax, DWORD PTR _outArchive$[ebp+12]
	sbb	eax, DWORD PTR _fileHeaderStartPos$70235[ebp+4]
	mov	DWORD PTR _backOffset$70247[ebp], edx
	mov	DWORD PTR _backOffset$70247[ebp+4], eax
; Line 176
	lea	ecx, DWORD PTR _outSeekStream$[ebp]
	call	??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator->
	mov	DWORD PTR tv465[ebp], eax
	mov	esi, esp
	push	0
	push	1
	mov	ecx, DWORD PTR _backOffset$70247[ebp]
	neg	ecx
	mov	edx, DWORD PTR _backOffset$70247[ebp+4]
	adc	edx, 0
	neg	edx
	push	edx
	push	ecx
	mov	eax, DWORD PTR tv465[ebp]
	push	eax
	mov	ecx, DWORD PTR tv465[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$70248[ebp], eax
	cmp	DWORD PTR ___result__$70248[ebp], 0
	je	$LN20@UpdateArch
	mov	ecx, DWORD PTR ___result__$70248[ebp]
	mov	DWORD PTR $T70783[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _fileInStream$70173[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _symLink$70159[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _item$70154[ebp]
	call	??1CItem@NTar@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _inStreamLimited$[ebp]
	call	??1?$CMyComPtr@VCLimitedSequentialInStream@@@@QAE@XZ ; CMyComPtr<CLimitedSequentialInStream>::~CMyComPtr<CLimitedSequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _copyCoder$[ebp]
	call	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outSeekStream$[ebp]
	call	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	??1COutArchive@NTar@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T70783[ebp]
	jmp	$LN57@UpdateArch
$LN20@UpdateArch:
; Line 177
	mov	edx, DWORD PTR _fileHeaderStartPos$70235[ebp]
	mov	DWORD PTR _outArchive$[ebp+8], edx
	mov	eax, DWORD PTR _fileHeaderStartPos$70235[ebp+4]
	mov	DWORD PTR _outArchive$[ebp+12], eax
; Line 178
	mov	ecx, DWORD PTR _copyCoderSpec$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR _item$70154[ebp+16], edx
	mov	eax, DWORD PTR [ecx+36]
	mov	DWORD PTR _item$70154[ebp+20], eax
; Line 179
	lea	ecx, DWORD PTR _item$70154[ebp]
	push	ecx
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	?WriteHeader@COutArchive@NTar@NArchive@@QAEJABUCItem@23@@Z ; NArchive::NTar::COutArchive::WriteHeader
	mov	DWORD PTR ___result__$70252[ebp], eax
	cmp	DWORD PTR ___result__$70252[ebp], 0
	je	$LN19@UpdateArch
	mov	edx, DWORD PTR ___result__$70252[ebp]
	mov	DWORD PTR $T70784[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _fileInStream$70173[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _symLink$70159[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _item$70154[ebp]
	call	??1CItem@NTar@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _inStreamLimited$[ebp]
	call	??1?$CMyComPtr@VCLimitedSequentialInStream@@@@QAE@XZ ; CMyComPtr<CLimitedSequentialInStream>::~CMyComPtr<CLimitedSequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _copyCoder$[ebp]
	call	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outSeekStream$[ebp]
	call	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	??1COutArchive@NTar@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T70784[ebp]
	jmp	$LN57@UpdateArch
$LN19@UpdateArch:
; Line 180
	lea	ecx, DWORD PTR _outSeekStream$[ebp]
	call	??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator->
	mov	DWORD PTR tv482[ebp], eax
	mov	esi, esp
	push	0
	push	1
	mov	eax, DWORD PTR _item$70154[ebp+20]
	push	eax
	mov	ecx, DWORD PTR _item$70154[ebp+16]
	push	ecx
	mov	edx, DWORD PTR tv482[ebp]
	push	edx
	mov	eax, DWORD PTR tv482[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$70255[ebp], eax
	cmp	DWORD PTR ___result__$70255[ebp], 0
	je	$LN18@UpdateArch
	mov	eax, DWORD PTR ___result__$70255[ebp]
	mov	DWORD PTR $T70785[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _fileInStream$70173[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _symLink$70159[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _item$70154[ebp]
	call	??1CItem@NTar@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _inStreamLimited$[ebp]
	call	??1?$CMyComPtr@VCLimitedSequentialInStream@@@@QAE@XZ ; CMyComPtr<CLimitedSequentialInStream>::~CMyComPtr<CLimitedSequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _copyCoder$[ebp]
	call	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outSeekStream$[ebp]
	call	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	??1COutArchive@NTar@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T70785[ebp]
	jmp	$LN57@UpdateArch
$LN18@UpdateArch:
; Line 181
	mov	ecx, DWORD PTR _outArchive$[ebp+8]
	add	ecx, DWORD PTR _item$70154[ebp+16]
	mov	edx, DWORD PTR _outArchive$[ebp+12]
	adc	edx, DWORD PTR _item$70154[ebp+20]
	mov	DWORD PTR _outArchive$[ebp+8], ecx
	mov	DWORD PTR _outArchive$[ebp+12], edx
$LN22@UpdateArch:
; Line 183
	mov	eax, DWORD PTR _item$70154[ebp+20]
	push	eax
	mov	ecx, DWORD PTR _item$70154[ebp+16]
	push	ecx
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	?FillDataResidual@COutArchive@NTar@NArchive@@QAEJ_K@Z ; NArchive::NTar::COutArchive::FillDataResidual
	mov	DWORD PTR ___result__$70258[ebp], eax
	cmp	DWORD PTR ___result__$70258[ebp], 0
	je	$LN26@UpdateArch
	mov	edx, DWORD PTR ___result__$70258[ebp]
	mov	DWORD PTR $T70786[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _fileInStream$70173[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _symLink$70159[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _item$70154[ebp]
	call	??1CItem@NTar@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _inStreamLimited$[ebp]
	call	??1?$CMyComPtr@VCLimitedSequentialInStream@@@@QAE@XZ ; CMyComPtr<CLimitedSequentialInStream>::~CMyComPtr<CLimitedSequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _copyCoder$[ebp]
	call	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outSeekStream$[ebp]
	call	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	??1COutArchive@NTar@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T70786[ebp]
	jmp	$LN57@UpdateArch
$LN26@UpdateArch:
; Line 186
	mov	eax, DWORD PTR _complexity$[ebp]
	add	eax, DWORD PTR _item$70154[ebp+16]
	mov	ecx, DWORD PTR _complexity$[ebp+4]
	adc	ecx, DWORD PTR _item$70154[ebp+20]
	mov	DWORD PTR _complexity$[ebp], eax
	mov	DWORD PTR _complexity$[ebp+4], ecx
; Line 187
	mov	esi, esp
	push	0
	mov	edx, DWORD PTR _updateCallback$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _updateCallback$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+32]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$70261[ebp], eax
	cmp	DWORD PTR ___result__$70261[ebp], 0
	je	$LN16@UpdateArch
	mov	eax, DWORD PTR ___result__$70261[ebp]
	mov	DWORD PTR $T70787[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _fileInStream$70173[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _symLink$70159[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _item$70154[ebp]
	call	??1CItem@NTar@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _inStreamLimited$[ebp]
	call	??1?$CMyComPtr@VCLimitedSequentialInStream@@@@QAE@XZ ; CMyComPtr<CLimitedSequentialInStream>::~CMyComPtr<CLimitedSequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _copyCoder$[ebp]
	call	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outSeekStream$[ebp]
	call	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	??1COutArchive@NTar@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T70787[ebp]
	jmp	$LN57@UpdateArch
$LN16@UpdateArch:
; Line 188
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _fileInStream$70173[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
; Line 189
	jmp	$LN15@UpdateArch
$LN38@UpdateArch:
; Line 191
	mov	ecx, DWORD PTR _ui$70153[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _inputItems$[ebp]
	call	??A?$CObjectVector@UCItemEx@NTar@NArchive@@@@QBEABUCItemEx@NTar@NArchive@@I@Z ; CObjectVector<NArchive::NTar::CItemEx>::operator[]
	mov	DWORD PTR _existItem$70265[ebp], eax
; Line 193
	mov	eax, DWORD PTR _ui$70153[ebp]
	movzx	ecx, BYTE PTR [eax+29]
	test	ecx, ecx
	je	$LN14@UpdateArch
; Line 197
	lea	ecx, DWORD PTR _symLink$70159[ebp]
	call	?IsEmpty@AString@@QBE_NXZ		; AString::IsEmpty
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN13@UpdateArch
; Line 199
	mov	DWORD PTR _item$70154[ebp+16], 0
	mov	DWORD PTR _item$70154[ebp+20], 0
; Line 200
	mov	DWORD PTR _item$70154[ebp+24], 0
	mov	DWORD PTR _item$70154[ebp+28], 0
; Line 202
	jmp	SHORT $LN12@UpdateArch
$LN13@UpdateArch:
; Line 204
	mov	eax, DWORD PTR _ui$70153[ebp]
	movzx	esi, BYTE PTR [eax+30]
	mov	ecx, DWORD PTR _existItem$70265[ebp]
	call	?IsDir@CItem@NTar@NArchive@@QBE_NXZ	; NArchive::NTar::CItem::IsDir
	movzx	ecx, al
	cmp	esi, ecx
	jne	SHORT $LN11@UpdateArch
; Line 205
	mov	edx, DWORD PTR _existItem$70265[ebp]
	mov	al, BYTE PTR [edx+104]
	mov	BYTE PTR _item$70154[ebp+104], al
$LN11@UpdateArch:
; Line 207
	mov	ecx, DWORD PTR _existItem$70265[ebp]
	add	ecx, 108				; 0000006cH
	push	ecx
	lea	ecx, DWORD PTR _item$70154[ebp+108]
	call	??4?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAEAAV0@ABV0@@Z ; CRecordVector<NArchive::NTar::CSparseBlock>::operator=
; Line 208
	mov	edx, DWORD PTR _existItem$70265[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR _item$70154[ebp+24], eax
	mov	ecx, DWORD PTR [edx+28]
	mov	DWORD PTR _item$70154[ebp+28], ecx
; Line 209
	mov	edx, DWORD PTR _existItem$70265[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _item$70154[ebp+16], eax
	mov	ecx, DWORD PTR [edx+20]
	mov	DWORD PTR _item$70154[ebp+20], ecx
$LN12@UpdateArch:
; Line 212
	mov	edx, DWORD PTR _existItem$70265[ebp]
	mov	al, BYTE PTR [edx+105]
	mov	BYTE PTR _item$70154[ebp+105], al
; Line 213
	mov	ecx, DWORD PTR _existItem$70265[ebp]
	mov	dl, BYTE PTR [ecx+106]
	mov	BYTE PTR _item$70154[ebp+106], dl
; Line 214
	mov	eax, DWORD PTR _existItem$70265[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _item$70154[ebp+52], ecx
; Line 215
	mov	edx, DWORD PTR _existItem$70265[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	DWORD PTR _item$70154[ebp+56], eax
; Line 216
	mov	ecx, DWORD PTR _existItem$70265[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR _item$70154[ebp+44], edx
; Line 217
	mov	eax, DWORD PTR _existItem$70265[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR _item$70154[ebp+48], ecx
; Line 219
	lea	edx, DWORD PTR _item$70154[ebp]
	push	edx
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	?WriteHeader@COutArchive@NTar@NArchive@@QAEJABUCItem@23@@Z ; NArchive::NTar::COutArchive::WriteHeader
	mov	DWORD PTR ___result__$70271[ebp], eax
	cmp	DWORD PTR ___result__$70271[ebp], 0
	je	$LN10@UpdateArch
	mov	eax, DWORD PTR ___result__$70271[ebp]
	mov	DWORD PTR $T70788[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _symLink$70159[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _item$70154[ebp]
	call	??1CItem@NTar@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _inStreamLimited$[ebp]
	call	??1?$CMyComPtr@VCLimitedSequentialInStream@@@@QAE@XZ ; CMyComPtr<CLimitedSequentialInStream>::~CMyComPtr<CLimitedSequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _copyCoder$[ebp]
	call	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outSeekStream$[ebp]
	call	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	??1COutArchive@NTar@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T70788[ebp]
	jmp	$LN57@UpdateArch
$LN10@UpdateArch:
; Line 220
	mov	esi, esp
	push	0
	push	0
	mov	ecx, DWORD PTR _existItem$70265[ebp]
	call	?GetDataPosition@CItemEx@NTar@NArchive@@QBE_KXZ ; NArchive::NTar::CItemEx::GetDataPosition
	push	edx
	push	eax
	mov	ecx, DWORD PTR _inStream$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _inStream$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$70274[ebp], eax
	cmp	DWORD PTR ___result__$70274[ebp], 0
	je	$LN9@UpdateArch
	mov	edx, DWORD PTR ___result__$70274[ebp]
	mov	DWORD PTR $T70789[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _symLink$70159[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _item$70154[ebp]
	call	??1CItem@NTar@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _inStreamLimited$[ebp]
	call	??1?$CMyComPtr@VCLimitedSequentialInStream@@@@QAE@XZ ; CMyComPtr<CLimitedSequentialInStream>::~CMyComPtr<CLimitedSequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _copyCoder$[ebp]
	call	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outSeekStream$[ebp]
	call	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	??1COutArchive@NTar@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T70789[ebp]
	jmp	$LN57@UpdateArch
$LN9@UpdateArch:
; Line 221
	mov	eax, DWORD PTR _existItem$70265[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _size$70266[ebp], ecx
	mov	edx, DWORD PTR [eax+20]
	mov	DWORD PTR _size$70266[ebp+4], edx
; Line 223
	jmp	$LN8@UpdateArch
$LN14@UpdateArch:
; Line 225
	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR _existItem$70265[ebp]
	mov	ecx, DWORD PTR [eax+124]
	push	ecx
	mov	edx, DWORD PTR [eax+120]
	push	edx
	mov	eax, DWORD PTR _inStream$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _inStream$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$70278[ebp], eax
	cmp	DWORD PTR ___result__$70278[ebp], 0
	je	$LN7@UpdateArch
	mov	ecx, DWORD PTR ___result__$70278[ebp]
	mov	DWORD PTR $T70790[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _symLink$70159[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _item$70154[ebp]
	call	??1CItem@NTar@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _inStreamLimited$[ebp]
	call	??1?$CMyComPtr@VCLimitedSequentialInStream@@@@QAE@XZ ; CMyComPtr<CLimitedSequentialInStream>::~CMyComPtr<CLimitedSequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _copyCoder$[ebp]
	call	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outSeekStream$[ebp]
	call	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	??1COutArchive@NTar@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T70790[ebp]
	jmp	$LN57@UpdateArch
$LN7@UpdateArch:
; Line 226
	mov	ecx, DWORD PTR _existItem$70265[ebp]
	call	?GetFullSize@CItemEx@NTar@NArchive@@QBE_KXZ ; NArchive::NTar::CItemEx::GetFullSize
	mov	DWORD PTR _size$70266[ebp], eax
	mov	DWORD PTR _size$70266[ebp+4], edx
$LN8@UpdateArch:
; Line 228
	mov	edx, DWORD PTR _size$70266[ebp+4]
	push	edx
	mov	eax, DWORD PTR _size$70266[ebp]
	push	eax
	mov	ecx, DWORD PTR _streamSpec$[ebp]
	call	?Init@CLimitedSequentialInStream@@QAEX_K@Z ; CLimitedSequentialInStream::Init
; Line 230
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??B?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator IArchiveUpdateCallbackFile *
	test	eax, eax
	je	$LN6@UpdateArch
; Line 234
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??C?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator->
	mov	DWORD PTR tv644[ebp], eax
	mov	esi, esp
	push	3
	mov	ecx, DWORD PTR _ui$70153[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	push	1
	mov	eax, DWORD PTR tv644[ebp]
	push	eax
	mov	ecx, DWORD PTR tv644[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$70282[ebp], eax
	cmp	DWORD PTR ___result__$70282[ebp], 0
	je	$LN6@UpdateArch
	mov	ecx, DWORD PTR ___result__$70282[ebp]
	mov	DWORD PTR $T70791[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _symLink$70159[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _item$70154[ebp]
	call	??1CItem@NTar@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _inStreamLimited$[ebp]
	call	??1?$CMyComPtr@VCLimitedSequentialInStream@@@@QAE@XZ ; CMyComPtr<CLimitedSequentialInStream>::~CMyComPtr<CLimitedSequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _copyCoder$[ebp]
	call	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outSeekStream$[ebp]
	call	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	??1COutArchive@NTar@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T70791[ebp]
	jmp	$LN57@UpdateArch
$LN6@UpdateArch:
; Line 237
	lea	ecx, DWORD PTR _copyCoder$[ebp]
	call	??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator->
	mov	DWORD PTR tv655[ebp], eax
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *
	mov	esi, esp
	push	eax
	push	0
	push	0
	mov	edx, DWORD PTR _outStream$[ebp]
	push	edx
	lea	ecx, DWORD PTR _inStreamLimited$[ebp]
	call	??B?$CMyComPtr@VCLimitedSequentialInStream@@@@QBEPAVCLimitedSequentialInStream@@XZ ; CMyComPtr<CLimitedSequentialInStream>::operator CLimitedSequentialInStream *
	push	eax
	mov	eax, DWORD PTR tv655[ebp]
	push	eax
	mov	ecx, DWORD PTR tv655[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$70286[ebp], eax
	cmp	DWORD PTR ___result__$70286[ebp], 0
	je	$LN4@UpdateArch
	mov	ecx, DWORD PTR ___result__$70286[ebp]
	mov	DWORD PTR $T70792[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _symLink$70159[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _item$70154[ebp]
	call	??1CItem@NTar@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _inStreamLimited$[ebp]
	call	??1?$CMyComPtr@VCLimitedSequentialInStream@@@@QAE@XZ ; CMyComPtr<CLimitedSequentialInStream>::~CMyComPtr<CLimitedSequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _copyCoder$[ebp]
	call	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outSeekStream$[ebp]
	call	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	??1COutArchive@NTar@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T70792[ebp]
	jmp	$LN57@UpdateArch
$LN4@UpdateArch:
; Line 238
	mov	edx, DWORD PTR _copyCoderSpec$[ebp]
	mov	DWORD PTR tv1309[ebp], edx
	mov	eax, DWORD PTR tv1309[ebp]
	mov	ecx, DWORD PTR [eax+32]
	cmp	ecx, DWORD PTR _size$70266[ebp]
	jne	SHORT $LN80@UpdateArch
	mov	edx, DWORD PTR tv1309[ebp]
	mov	eax, DWORD PTR [edx+36]
	cmp	eax, DWORD PTR _size$70266[ebp+4]
	je	SHORT $LN3@UpdateArch
$LN80@UpdateArch:
; Line 239
	mov	DWORD PTR $T70793[ebp], -2147467259	; 80004005H
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _symLink$70159[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _item$70154[ebp]
	call	??1CItem@NTar@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _inStreamLimited$[ebp]
	call	??1?$CMyComPtr@VCLimitedSequentialInStream@@@@QAE@XZ ; CMyComPtr<CLimitedSequentialInStream>::~CMyComPtr<CLimitedSequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _copyCoder$[ebp]
	call	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outSeekStream$[ebp]
	call	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	??1COutArchive@NTar@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T70793[ebp]
	jmp	$LN57@UpdateArch
$LN3@UpdateArch:
; Line 240
	mov	ecx, DWORD PTR _outArchive$[ebp+8]
	add	ecx, DWORD PTR _size$70266[ebp]
	mov	edx, DWORD PTR _outArchive$[ebp+12]
	adc	edx, DWORD PTR _size$70266[ebp+4]
	mov	DWORD PTR _outArchive$[ebp+8], ecx
	mov	DWORD PTR _outArchive$[ebp+12], edx
; Line 241
	mov	eax, DWORD PTR _existItem$70265[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR [eax+16]
	push	edx
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	?FillDataResidual@COutArchive@NTar@NArchive@@QAEJ_K@Z ; NArchive::NTar::COutArchive::FillDataResidual
	mov	DWORD PTR ___result__$70292[ebp], eax
	cmp	DWORD PTR ___result__$70292[ebp], 0
	je	$LN2@UpdateArch
	mov	eax, DWORD PTR ___result__$70292[ebp]
	mov	DWORD PTR $T70794[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _symLink$70159[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _item$70154[ebp]
	call	??1CItem@NTar@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _inStreamLimited$[ebp]
	call	??1?$CMyComPtr@VCLimitedSequentialInStream@@@@QAE@XZ ; CMyComPtr<CLimitedSequentialInStream>::~CMyComPtr<CLimitedSequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _copyCoder$[ebp]
	call	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outSeekStream$[ebp]
	call	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	??1COutArchive@NTar@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T70794[ebp]
	jmp	$LN57@UpdateArch
$LN2@UpdateArch:
; Line 242
	mov	ecx, DWORD PTR _complexity$[ebp]
	add	ecx, DWORD PTR _size$70266[ebp]
	mov	edx, DWORD PTR _complexity$[ebp+4]
	adc	edx, DWORD PTR _size$70266[ebp+4]
	mov	DWORD PTR _complexity$[ebp], ecx
	mov	DWORD PTR _complexity$[ebp+4], edx
$LN15@UpdateArch:
; Line 244
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _symLink$70159[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _item$70154[ebp]
	call	??1CItem@NTar@NArchive@@QAE@XZ
	jmp	$LN49@UpdateArch
$LN48@UpdateArch:
; Line 245
	mov	eax, DWORD PTR _lps$[ebp]
	mov	ecx, DWORD PTR _complexity$[ebp]
	mov	DWORD PTR [eax+40], ecx
	mov	edx, DWORD PTR _complexity$[ebp+4]
	mov	DWORD PTR [eax+44], edx
	mov	eax, DWORD PTR _lps$[ebp]
	mov	ecx, DWORD PTR _complexity$[ebp]
	mov	DWORD PTR [eax+32], ecx
	mov	edx, DWORD PTR _complexity$[ebp+4]
	mov	DWORD PTR [eax+36], edx
; Line 246
	mov	ecx, DWORD PTR _lps$[ebp]
	call	?SetCur@CLocalProgress@@QAEJXZ		; CLocalProgress::SetCur
	mov	DWORD PTR ___result__$70295[ebp], eax
	cmp	DWORD PTR ___result__$70295[ebp], 0
	je	SHORT $LN1@UpdateArch
	mov	eax, DWORD PTR ___result__$70295[ebp]
	mov	DWORD PTR $T70795[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _inStreamLimited$[ebp]
	call	??1?$CMyComPtr@VCLimitedSequentialInStream@@@@QAE@XZ ; CMyComPtr<CLimitedSequentialInStream>::~CMyComPtr<CLimitedSequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _copyCoder$[ebp]
	call	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outSeekStream$[ebp]
	call	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	??1COutArchive@NTar@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T70795[ebp]
	jmp	SHORT $LN57@UpdateArch
$LN1@UpdateArch:
; Line 247
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	?WriteFinishHeader@COutArchive@NTar@NArchive@@QAEJXZ ; NArchive::NTar::COutArchive::WriteFinishHeader
	mov	DWORD PTR $T70796[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _inStreamLimited$[ebp]
	call	??1?$CMyComPtr@VCLimitedSequentialInStream@@@@QAE@XZ ; CMyComPtr<CLimitedSequentialInStream>::~CMyComPtr<CLimitedSequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _copyCoder$[ebp]
	call	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outSeekStream$[ebp]
	call	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	??1COutArchive@NTar@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T70796[ebp]
$LN57@UpdateArch:
; Line 248
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN96@UpdateArch
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 636				; 0000027cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
	npad	1
$LN96@UpdateArch:
	DD	13					; 0000000dH
	DD	$LN95@UpdateArch
$LN95@UpdateArch:
	DD	-36					; ffffffdcH
	DD	16					; 00000010H
	DD	$LN81@UpdateArch
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN82@UpdateArch
	DD	-60					; ffffffc4H
	DD	4
	DD	$LN83@UpdateArch
	DD	-96					; ffffffa0H
	DD	4
	DD	$LN84@UpdateArch
	DD	-112					; ffffff90H
	DD	4
	DD	$LN85@UpdateArch
	DD	-128					; ffffff80H
	DD	4
	DD	$LN86@UpdateArch
	DD	-264					; fffffef8H
	DD	120					; 00000078H
	DD	$LN87@UpdateArch
	DD	-284					; fffffee4H
	DD	12					; 0000000cH
	DD	$LN88@UpdateArch
	DD	-300					; fffffed4H
	DD	4
	DD	$LN89@UpdateArch
	DD	-324					; fffffebcH
	DD	4
	DD	$LN90@UpdateArch
	DD	-340					; fffffeacH
	DD	8
	DD	$LN91@UpdateArch
	DD	-356					; fffffe9cH
	DD	8
	DD	$LN92@UpdateArch
	DD	-376					; fffffe88H
	DD	12					; 0000000cH
	DD	$LN93@UpdateArch
$LN93@UpdateArch:
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	76					; 0000004cH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	107					; 0000006bH
	DB	0
$LN92@UpdateArch:
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	50					; 00000032H
	DB	0
$LN91@UpdateArch:
	DB	109					; 0000006dH
	DB	84					; 00000054H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN90@UpdateArch:
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	115					; 00000073H
	DB	0
$LN89@UpdateArch:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN88@UpdateArch:
	DB	115					; 00000073H
	DB	121					; 00000079H
	DB	109					; 0000006dH
	DB	76					; 0000004cH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	107					; 0000006bH
	DB	0
$LN87@UpdateArch:
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	0
$LN86@UpdateArch:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	76					; 0000004cH
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$LN85@UpdateArch:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	103					; 00000067H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	0
$LN84@UpdateArch:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	121					; 00000079H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN83@UpdateArch:
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	98					; 00000062H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
$LN82@UpdateArch:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	101					; 00000065H
	DB	101					; 00000065H
	DB	107					; 0000006bH
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN81@UpdateArch:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	65					; 00000041H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?UpdateArchive@NTar@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@ABV?$CObjectVector@UCItemEx@NTar@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NTar@NArchive@@@@IPAUIArchiveUpdateCallback@@@Z$0:
	lea	ecx, DWORD PTR _outArchive$[ebp]
	jmp	??1COutArchive@NTar@NArchive@@QAE@XZ
__unwindfunclet$?UpdateArchive@NTar@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@ABV?$CObjectVector@UCItemEx@NTar@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NTar@NArchive@@@@IPAUIArchiveUpdateCallback@@@Z$1:
	lea	ecx, DWORD PTR _outSeekStream$[ebp]
	jmp	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
__unwindfunclet$?UpdateArchive@NTar@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@ABV?$CObjectVector@UCItemEx@NTar@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NTar@NArchive@@@@IPAUIArchiveUpdateCallback@@@Z$2:
	lea	ecx, DWORD PTR _opCallback$[ebp]
	jmp	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
__unwindfunclet$?UpdateArchive@NTar@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@ABV?$CObjectVector@UCItemEx@NTar@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NTar@NArchive@@@@IPAUIArchiveUpdateCallback@@@Z$3:
	mov	eax, DWORD PTR $T70764[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?UpdateArchive@NTar@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@ABV?$CObjectVector@UCItemEx@NTar@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NTar@NArchive@@@@IPAUIArchiveUpdateCallback@@@Z$4:
	lea	ecx, DWORD PTR _copyCoder$[ebp]
	jmp	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
__unwindfunclet$?UpdateArchive@NTar@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@ABV?$CObjectVector@UCItemEx@NTar@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NTar@NArchive@@@@IPAUIArchiveUpdateCallback@@@Z$5:
	mov	eax, DWORD PTR $T70768[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?UpdateArchive@NTar@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@ABV?$CObjectVector@UCItemEx@NTar@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NTar@NArchive@@@@IPAUIArchiveUpdateCallback@@@Z$6:
	lea	ecx, DWORD PTR _progress$[ebp]
	jmp	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
__unwindfunclet$?UpdateArchive@NTar@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@ABV?$CObjectVector@UCItemEx@NTar@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NTar@NArchive@@@@IPAUIArchiveUpdateCallback@@@Z$7:
	mov	eax, DWORD PTR $T70772[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?UpdateArchive@NTar@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@ABV?$CObjectVector@UCItemEx@NTar@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NTar@NArchive@@@@IPAUIArchiveUpdateCallback@@@Z$8:
	lea	ecx, DWORD PTR _inStreamLimited$[ebp]
	jmp	??1?$CMyComPtr@VCLimitedSequentialInStream@@@@QAE@XZ ; CMyComPtr<CLimitedSequentialInStream>::~CMyComPtr<CLimitedSequentialInStream>
__unwindfunclet$?UpdateArchive@NTar@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@ABV?$CObjectVector@UCItemEx@NTar@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NTar@NArchive@@@@IPAUIArchiveUpdateCallback@@@Z$9:
	lea	ecx, DWORD PTR _item$70154[ebp]
	jmp	??1CItem@NTar@NArchive@@QAE@XZ
__unwindfunclet$?UpdateArchive@NTar@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@ABV?$CObjectVector@UCItemEx@NTar@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NTar@NArchive@@@@IPAUIArchiveUpdateCallback@@@Z$10:
	lea	ecx, DWORD PTR _symLink$70159[ebp]
	jmp	??1AString@@QAE@XZ			; AString::~AString
__unwindfunclet$?UpdateArchive@NTar@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@ABV?$CObjectVector@UCItemEx@NTar@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NTar@NArchive@@@@IPAUIArchiveUpdateCallback@@@Z$11:
	lea	ecx, DWORD PTR _fileInStream$70173[ebp]
	jmp	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
__unwindfunclet$?UpdateArchive@NTar@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@ABV?$CObjectVector@UCItemEx@NTar@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NTar@NArchive@@@@IPAUIArchiveUpdateCallback@@@Z$12:
	lea	ecx, DWORD PTR _getProps$70222[ebp]
	jmp	??1?$CMyComPtr@UIStreamGetProps@@@@QAE@XZ ; CMyComPtr<IStreamGetProps>::~CMyComPtr<IStreamGetProps>
__unwindfunclet$?UpdateArchive@NTar@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@ABV?$CObjectVector@UCItemEx@NTar@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NTar@NArchive@@@@IPAUIArchiveUpdateCallback@@@Z$13:
	lea	ecx, DWORD PTR _hardLink$70229[ebp]
	jmp	??1AString@@QAE@XZ			; AString::~AString
__ehhandler$?UpdateArchive@NTar@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@ABV?$CObjectVector@UCItemEx@NTar@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NTar@NArchive@@@@IPAUIArchiveUpdateCallback@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-636]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?UpdateArchive@NTar@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@ABV?$CObjectVector@UCItemEx@NTar@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NTar@NArchive@@@@IPAUIArchiveUpdateCallback@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?UpdateArchive@NTar@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@ABV?$CObjectVector@UCItemEx@NTar@NArchive@@@@ABV?$CObjectVector@UCUpdateItem@NTar@NArchive@@@@IPAUIArchiveUpdateCallback@@@Z ENDP ; NArchive::NTar::UpdateArchive
PUBLIC	??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetStream@CLimitedSequentialInStream@@QAEXPAUISequentialInStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_stream$ = 8						; size = 4
?SetStream@CLimitedSequentialInStream@@QAEXPAUISequentialInStream@@@Z PROC ; CLimitedSequentialInStream::SetStream, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\limitedstreams.h
; Line 20
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetStream@CLimitedSequentialInStream@@QAEXPAUISequentialInStream@@@Z ENDP ; CLimitedSequentialInStream::SetStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Init@CLimitedSequentialInStream@@QAEX_K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_streamSize$ = 8					; size = 8
?Init@CLimitedSequentialInStream@@QAEX_K@Z PROC		; CLimitedSequentialInStream::Init, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 24
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _streamSize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR _streamSize$[ebp+4]
	mov	DWORD PTR [eax+20], edx
; Line 25
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0
	mov	DWORD PTR [eax+28], 0
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+32], 0
; Line 27
	mov	esp, ebp
	pop	ebp
	ret	8
?Init@CLimitedSequentialInStream@@QAEX_K@Z ENDP		; CLimitedSequentialInStream::Init
_TEXT	ENDS
PUBLIC	??_7CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ ; NCompress::CCopyCoder::`vftable'
PUBLIC	??_7CCopyCoder@NCompress@@6BISequentialInStream@@@ ; NCompress::CCopyCoder::`vftable'
PUBLIC	??_7CCopyCoder@NCompress@@6BICompressSetInStream@@@ ; NCompress::CCopyCoder::`vftable'
PUBLIC	??_7CCopyCoder@NCompress@@6BICompressCoder@@@	; NCompress::CCopyCoder::`vftable'
PUBLIC	??0CMyUnknownImp@@QAE@XZ			; CMyUnknownImp::CMyUnknownImp
PUBLIC	??0ICompressGetInStreamProcessedSize@@QAE@XZ	; ICompressGetInStreamProcessedSize::ICompressGetInStreamProcessedSize
PUBLIC	??0ISequentialInStream@@QAE@XZ			; ISequentialInStream::ISequentialInStream
PUBLIC	??0ICompressSetInStream@@QAE@XZ			; ICompressSetInStream::ICompressSetInStream
PUBLIC	??0ICompressCoder@@QAE@XZ			; ICompressCoder::ICompressCoder
PUBLIC	??_R4CCopyCoder@NCompress@@6BICompressCoder@@@	; NCompress::CCopyCoder::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCCopyCoder@NCompress@@@8		; NCompress::CCopyCoder `RTTI Type Descriptor'
PUBLIC	??_R3CCopyCoder@NCompress@@8			; NCompress::CCopyCoder::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCopyCoder@NCompress@@8			; NCompress::CCopyCoder::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCopyCoder@NCompress@@8		; NCompress::CCopyCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ICompressCoder@@8			; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUICompressCoder@@@8			; ICompressCoder `RTTI Type Descriptor'
PUBLIC	??_R3ICompressCoder@@8				; ICompressCoder::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ICompressCoder@@8				; ICompressCoder::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIUnknown@@@8				; IUnknown `RTTI Type Descriptor'
PUBLIC	??_R3IUnknown@@8				; IUnknown::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IUnknown@@8				; IUnknown::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EC@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
PUBLIC	??_R13?0A@EA@ICompressSetInStream@@8		; ICompressSetInStream::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AUICompressSetInStream@@@8		; ICompressSetInStream `RTTI Type Descriptor'
PUBLIC	??_R3ICompressSetInStream@@8			; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ICompressSetInStream@@8			; ICompressSetInStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ICompressSetInStream@@8		; ICompressSetInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EC@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
PUBLIC	??_R17?0A@EA@ISequentialInStream@@8		; ISequentialInStream::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	??_R0?AUISequentialInStream@@@8			; ISequentialInStream `RTTI Type Descriptor'
PUBLIC	??_R3ISequentialInStream@@8			; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ISequentialInStream@@8			; ISequentialInStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ISequentialInStream@@8		; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R17?0A@EC@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
PUBLIC	??_R1M@?0A@EA@ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (12,-1,0,64)'
PUBLIC	??_R0?AUICompressGetInStreamProcessedSize@@@8	; ICompressGetInStreamProcessedSize `RTTI Type Descriptor'
PUBLIC	??_R3ICompressGetInStreamProcessedSize@@8	; ICompressGetInStreamProcessedSize::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ICompressGetInStreamProcessedSize@@8	; ICompressGetInStreamProcessedSize::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1M@?0A@EC@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (12,-1,0,66)'
PUBLIC	??_R1BA@?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (16,-1,0,64)'
PUBLIC	??_R0?AVCMyUnknownImp@@@8			; CMyUnknownImp `RTTI Type Descriptor'
PUBLIC	??_R3CMyUnknownImp@@8				; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMyUnknownImp@@8				; CMyUnknownImp::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::CCopyCoder::QueryInterface
PUBLIC	?AddRef@CCopyCoder@NCompress@@UAGKXZ		; NCompress::CCopyCoder::AddRef
PUBLIC	?Release@CCopyCoder@NCompress@@UAGKXZ		; NCompress::CCopyCoder::Release
PUBLIC	??_R4CCopyCoder@NCompress@@6BICompressSetInStream@@@ ; NCompress::CCopyCoder::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{4}'
PUBLIC	?AddRef@CCopyCoder@NCompress@@W3AGKXZ		; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{4}'
PUBLIC	?Release@CCopyCoder@NCompress@@W3AGKXZ		; [thunk]:NCompress::CCopyCoder::Release`adjustor{4}'
PUBLIC	??_R4CCopyCoder@NCompress@@6BISequentialInStream@@@ ; NCompress::CCopyCoder::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{8}'
PUBLIC	?AddRef@CCopyCoder@NCompress@@W7AGKXZ		; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{8}'
PUBLIC	?Release@CCopyCoder@NCompress@@W7AGKXZ		; [thunk]:NCompress::CCopyCoder::Release`adjustor{8}'
PUBLIC	??_R4CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ ; NCompress::CCopyCoder::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{12}'
PUBLIC	?AddRef@CCopyCoder@NCompress@@WM@AGKXZ		; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{12}'
PUBLIC	?Release@CCopyCoder@NCompress@@WM@AGKXZ		; [thunk]:NCompress::CCopyCoder::Release`adjustor{12}'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?Code@CCopyCoder@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z:PROC ; NCompress::CCopyCoder::Code
EXTRN	?SetInStream@CCopyCoder@NCompress@@UAGJPAUISequentialInStream@@@Z:PROC ; NCompress::CCopyCoder::SetInStream
EXTRN	?ReleaseInStream@CCopyCoder@NCompress@@UAGJXZ:PROC ; NCompress::CCopyCoder::ReleaseInStream
EXTRN	?Read@CCopyCoder@NCompress@@UAGJPAXIPAI@Z:PROC	; NCompress::CCopyCoder::Read
EXTRN	?GetInStreamProcessedSize@CCopyCoder@NCompress@@UAGJPA_K@Z:PROC ; NCompress::CCopyCoder::GetInStreamProcessedSize
;	COMDAT ??_R4CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@
; File c:\workspace\7z1505-src\cpp\7zip\compress\copycoder.h
rdata$r	SEGMENT
??_R4CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ DD 00H ; NCompress::CCopyCoder::`RTTI Complete Object Locator'
	DD	0cH
	DD	00H
	DD	FLAT:??_R0?AVCCopyCoder@NCompress@@@8
	DD	FLAT:??_R3CCopyCoder@NCompress@@8
rdata$r	ENDS
;	COMDAT ??_R4CCopyCoder@NCompress@@6BISequentialInStream@@@
rdata$r	SEGMENT
??_R4CCopyCoder@NCompress@@6BISequentialInStream@@@ DD 00H ; NCompress::CCopyCoder::`RTTI Complete Object Locator'
	DD	08H
	DD	00H
	DD	FLAT:??_R0?AVCCopyCoder@NCompress@@@8
	DD	FLAT:??_R3CCopyCoder@NCompress@@8
rdata$r	ENDS
;	COMDAT ??_R4CCopyCoder@NCompress@@6BICompressSetInStream@@@
rdata$r	SEGMENT
??_R4CCopyCoder@NCompress@@6BICompressSetInStream@@@ DD 00H ; NCompress::CCopyCoder::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVCCopyCoder@NCompress@@@8
	DD	FLAT:??_R3CCopyCoder@NCompress@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R2CMyUnknownImp@@8
rdata$r	SEGMENT
??_R2CMyUnknownImp@@8 DD FLAT:??_R1A@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMyUnknownImp@@8
rdata$r	SEGMENT
??_R3CMyUnknownImp@@8 DD 00H				; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMyUnknownImp@@@8
_DATA	SEGMENT
??_R0?AVCMyUnknownImp@@@8 DD FLAT:??_7type_info@@6B@	; CMyUnknownImp `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMyUnknownImp@@', 00H
_DATA	ENDS
;	COMDAT ??_R1BA@?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R1BA@?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (16,-1,0,64)'
	DD	00H
	DD	010H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R1M@?0A@EC@IUnknown@@8
rdata$r	SEGMENT
??_R1M@?0A@EC@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (12,-1,0,66)'
	DD	00H
	DD	0cH
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8 DD FLAT:??_R0?AUICompressGetInStreamProcessedSize@@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICompressGetInStreamProcessedSize@@8
rdata$r	ENDS
;	COMDAT ??_R2ICompressGetInStreamProcessedSize@@8
rdata$r	SEGMENT
??_R2ICompressGetInStreamProcessedSize@@8 DD FLAT:??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ICompressGetInStreamProcessedSize@@8
rdata$r	SEGMENT
??_R3ICompressGetInStreamProcessedSize@@8 DD 00H	; ICompressGetInStreamProcessedSize::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ICompressGetInStreamProcessedSize@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUICompressGetInStreamProcessedSize@@@8
_DATA	SEGMENT
??_R0?AUICompressGetInStreamProcessedSize@@@8 DD FLAT:??_7type_info@@6B@ ; ICompressGetInStreamProcessedSize `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUICompressGetInStreamProcessedSize@@', 00H
_DATA	ENDS
;	COMDAT ??_R1M@?0A@EA@ICompressGetInStreamProcessedSize@@8
rdata$r	SEGMENT
??_R1M@?0A@EA@ICompressGetInStreamProcessedSize@@8 DD FLAT:??_R0?AUICompressGetInStreamProcessedSize@@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (12,-1,0,64)'
	DD	01H
	DD	0cH
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICompressGetInStreamProcessedSize@@8
rdata$r	ENDS
;	COMDAT ??_R17?0A@EC@IUnknown@@8
rdata$r	SEGMENT
??_R17?0A@EC@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ISequentialInStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ISequentialInStream@@8 DD FLAT:??_R0?AUISequentialInStream@@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ISequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_R2ISequentialInStream@@8
rdata$r	SEGMENT
??_R2ISequentialInStream@@8 DD FLAT:??_R1A@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ISequentialInStream@@8
rdata$r	SEGMENT
??_R3ISequentialInStream@@8 DD 00H			; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ISequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUISequentialInStream@@@8
_DATA	SEGMENT
??_R0?AUISequentialInStream@@@8 DD FLAT:??_7type_info@@6B@ ; ISequentialInStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUISequentialInStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R17?0A@EA@ISequentialInStream@@8
rdata$r	SEGMENT
??_R17?0A@EA@ISequentialInStream@@8 DD FLAT:??_R0?AUISequentialInStream@@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	01H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ISequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_R13?0A@EC@IUnknown@@8
rdata$r	SEGMENT
??_R13?0A@EC@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ICompressSetInStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ICompressSetInStream@@8 DD FLAT:??_R0?AUICompressSetInStream@@@8 ; ICompressSetInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICompressSetInStream@@8
rdata$r	ENDS
;	COMDAT ??_R2ICompressSetInStream@@8
rdata$r	SEGMENT
??_R2ICompressSetInStream@@8 DD FLAT:??_R1A@?0A@EA@ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ICompressSetInStream@@8
rdata$r	SEGMENT
??_R3ICompressSetInStream@@8 DD 00H			; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ICompressSetInStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUICompressSetInStream@@@8
_DATA	SEGMENT
??_R0?AUICompressSetInStream@@@8 DD FLAT:??_7type_info@@6B@ ; ICompressSetInStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUICompressSetInStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@ICompressSetInStream@@8
rdata$r	SEGMENT
??_R13?0A@EA@ICompressSetInStream@@8 DD FLAT:??_R0?AUICompressSetInStream@@@8 ; ICompressSetInStream::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	01H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICompressSetInStream@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EC@IUnknown@@8
rdata$r	SEGMENT
??_R1A@?0A@EC@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R2IUnknown@@8
rdata$r	SEGMENT
??_R2IUnknown@@8 DD FLAT:??_R1A@?0A@EA@IUnknown@@8	; IUnknown::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3IUnknown@@8
rdata$r	SEGMENT
??_R3IUnknown@@8 DD 00H					; IUnknown::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIUnknown@@@8
_DATA	SEGMENT
??_R0?AUIUnknown@@@8 DD FLAT:??_7type_info@@6B@		; IUnknown `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIUnknown@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IUnknown@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R2ICompressCoder@@8
rdata$r	SEGMENT
??_R2ICompressCoder@@8 DD FLAT:??_R1A@?0A@EA@ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ICompressCoder@@8
rdata$r	SEGMENT
??_R3ICompressCoder@@8 DD 00H				; ICompressCoder::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ICompressCoder@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUICompressCoder@@@8
_DATA	SEGMENT
??_R0?AUICompressCoder@@@8 DD FLAT:??_7type_info@@6B@	; ICompressCoder `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUICompressCoder@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ICompressCoder@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ICompressCoder@@8 DD FLAT:??_R0?AUICompressCoder@@@8 ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICompressCoder@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CCopyCoder@NCompress@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CCopyCoder@NCompress@@8 DD FLAT:??_R0?AVCCopyCoder@NCompress@@@8 ; NCompress::CCopyCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	09H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCopyCoder@NCompress@@8
rdata$r	ENDS
;	COMDAT ??_R2CCopyCoder@NCompress@@8
rdata$r	SEGMENT
??_R2CCopyCoder@NCompress@@8 DD FLAT:??_R1A@?0A@EA@CCopyCoder@NCompress@@8 ; NCompress::CCopyCoder::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ICompressCoder@@8
	DD	FLAT:??_R1A@?0A@EC@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@ICompressSetInStream@@8
	DD	FLAT:??_R13?0A@EC@IUnknown@@8
	DD	FLAT:??_R17?0A@EA@ISequentialInStream@@8
	DD	FLAT:??_R17?0A@EC@IUnknown@@8
	DD	FLAT:??_R1M@?0A@EA@ICompressGetInStreamProcessedSize@@8
	DD	FLAT:??_R1M@?0A@EC@IUnknown@@8
	DD	FLAT:??_R1BA@?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CCopyCoder@NCompress@@8
rdata$r	SEGMENT
??_R3CCopyCoder@NCompress@@8 DD 00H			; NCompress::CCopyCoder::`RTTI Class Hierarchy Descriptor'
	DD	05H
	DD	0aH
	DD	FLAT:??_R2CCopyCoder@NCompress@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCopyCoder@NCompress@@@8
_DATA	SEGMENT
??_R0?AVCCopyCoder@NCompress@@@8 DD FLAT:??_7type_info@@6B@ ; NCompress::CCopyCoder `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCopyCoder@NCompress@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CCopyCoder@NCompress@@6BICompressCoder@@@
rdata$r	SEGMENT
??_R4CCopyCoder@NCompress@@6BICompressCoder@@@ DD 00H	; NCompress::CCopyCoder::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCCopyCoder@NCompress@@@8
	DD	FLAT:??_R3CCopyCoder@NCompress@@8
rdata$r	ENDS
;	COMDAT ??_7CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@
CONST	SEGMENT
??_7CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ DD FLAT:??_R4CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ ; NCompress::CCopyCoder::`vftable'
	DD	FLAT:?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CCopyCoder@NCompress@@WM@AGKXZ
	DD	FLAT:?Release@CCopyCoder@NCompress@@WM@AGKXZ
	DD	FLAT:?GetInStreamProcessedSize@CCopyCoder@NCompress@@UAGJPA_K@Z
CONST	ENDS
;	COMDAT ??_7CCopyCoder@NCompress@@6BISequentialInStream@@@
CONST	SEGMENT
??_7CCopyCoder@NCompress@@6BISequentialInStream@@@ DD FLAT:??_R4CCopyCoder@NCompress@@6BISequentialInStream@@@ ; NCompress::CCopyCoder::`vftable'
	DD	FLAT:?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CCopyCoder@NCompress@@W7AGKXZ
	DD	FLAT:?Release@CCopyCoder@NCompress@@W7AGKXZ
	DD	FLAT:?Read@CCopyCoder@NCompress@@UAGJPAXIPAI@Z
CONST	ENDS
;	COMDAT ??_7CCopyCoder@NCompress@@6BICompressSetInStream@@@
CONST	SEGMENT
??_7CCopyCoder@NCompress@@6BICompressSetInStream@@@ DD FLAT:??_R4CCopyCoder@NCompress@@6BICompressSetInStream@@@ ; NCompress::CCopyCoder::`vftable'
	DD	FLAT:?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CCopyCoder@NCompress@@W3AGKXZ
	DD	FLAT:?Release@CCopyCoder@NCompress@@W3AGKXZ
	DD	FLAT:?SetInStream@CCopyCoder@NCompress@@UAGJPAUISequentialInStream@@@Z
	DD	FLAT:?ReleaseInStream@CCopyCoder@NCompress@@UAGJXZ
CONST	ENDS
;	COMDAT ??_7CCopyCoder@NCompress@@6BICompressCoder@@@
CONST	SEGMENT
??_7CCopyCoder@NCompress@@6BICompressCoder@@@ DD FLAT:??_R4CCopyCoder@NCompress@@6BICompressCoder@@@ ; NCompress::CCopyCoder::`vftable'
	DD	FLAT:?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CCopyCoder@NCompress@@UAGKXZ
	DD	FLAT:?Release@CCopyCoder@NCompress@@UAGKXZ
	DD	FLAT:?Code@CCopyCoder@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CCopyCoder@NCompress@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CCopyCoder@NCompress@@QAE@XZ PROC			; NCompress::CCopyCoder::CCopyCoder, COMDAT
; _this$ = ecx
; Line 24
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ICompressCoder@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0ICompressSetInStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0ISequentialInStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0ICompressGetInStreamProcessedSize@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CCopyCoder@NCompress@@6BICompressCoder@@@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], OFFSET ??_7CCopyCoder@NCompress@@6BICompressSetInStream@@@
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], OFFSET ??_7CCopyCoder@NCompress@@6BISequentialInStream@@@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], OFFSET ??_7CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+32], 0
	mov	DWORD PTR [edx+36], 0
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CCopyCoder@NCompress@@QAE@XZ ENDP			; NCompress::CCopyCoder::CCopyCoder
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CMyUnknownImp@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMyUnknownImp@@QAE@XZ PROC				; CMyUnknownImp::CMyUnknownImp, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 167
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CMyUnknownImp@@QAE@XZ ENDP				; CMyUnknownImp::CMyUnknownImp
_TEXT	ENDS
PUBLIC	_==@8
EXTRN	_IID_ICompressGetInStreamProcessedSize:BYTE
EXTRN	_IID_ISequentialInStream:BYTE
EXTRN	_IID_ICompressSetInStream:BYTE
EXTRN	_IID_ICompressCoder:BYTE
EXTRN	_IID_IUnknown:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
tv144 = -12						; size = 4
tv134 = -8						; size = 4
tv92 = -4						; size = 4
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z PROC ; NCompress::CCopyCoder::QueryInterface, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\compress\copycoder.h
; Line 31
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN10@QueryInter
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	$LN9@QueryInter
$LN10@QueryInter:
	push	OFFSET _IID_ICompressCoder
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN8@QueryInter
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	$LN9@QueryInter
$LN8@QueryInter:
	push	OFFSET _IID_ICompressSetInStream
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN6@QueryInter
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN13@QueryInter
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	mov	DWORD PTR tv92[ebp], edx
	jmp	SHORT $LN14@QueryInter
$LN13@QueryInter:
	mov	DWORD PTR tv92[ebp], 0
$LN14@QueryInter:
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	ecx, DWORD PTR tv92[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN9@QueryInter
$LN6@QueryInter:
	push	OFFSET _IID_ISequentialInStream
	mov	edx, DWORD PTR _iid$[ebp]
	push	edx
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@QueryInter
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN15@QueryInter
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	mov	DWORD PTR tv134[ebp], eax
	jmp	SHORT $LN16@QueryInter
$LN15@QueryInter:
	mov	DWORD PTR tv134[ebp], 0
$LN16@QueryInter:
	mov	ecx, DWORD PTR _outObject$[ebp]
	mov	edx, DWORD PTR tv134[ebp]
	mov	DWORD PTR [ecx], edx
	jmp	SHORT $LN9@QueryInter
$LN4@QueryInter:
	push	OFFSET _IID_ICompressGetInStreamProcessedSize
	mov	eax, DWORD PTR _iid$[ebp]
	push	eax
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN17@QueryInter
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR tv144[ebp], ecx
	jmp	SHORT $LN18@QueryInter
$LN17@QueryInter:
	mov	DWORD PTR tv144[ebp], 0
$LN18@QueryInter:
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR tv144[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN9@QueryInter
$LN2@QueryInter:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN11@QueryInter
$LN9@QueryInter:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], edx
	xor	eax, eax
$LN11@QueryInter:
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z ENDP ; NCompress::CCopyCoder::QueryInterface
_TEXT	ENDS
PUBLIC	_IsEqualGUID@8
; Function compile flags: /Odtp /RTCsu
;	COMDAT _==@8
_TEXT	SEGMENT
_guidOne$ = 8						; size = 4
_guidOther$ = 12					; size = 4
_==@8	PROC						; COMDAT
; File c:\program files (x86)\microsoft sdks\windows\v7.0a\include\guiddef.h
; Line 193
	push	ebp
	mov	ebp, esp
; Line 194
	mov	eax, DWORD PTR _guidOther$[ebp]
	push	eax
	mov	ecx, DWORD PTR _guidOne$[ebp]
	push	ecx
	call	_IsEqualGUID@8
; Line 195
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_==@8	ENDP
_TEXT	ENDS
EXTRN	_memcmp:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT _IsEqualGUID@8
_TEXT	SEGMENT
_rguid1$ = 8						; size = 4
_rguid2$ = 12						; size = 4
_IsEqualGUID@8 PROC					; COMDAT
; Line 160
	push	ebp
	mov	ebp, esp
; Line 161
	push	16					; 00000010H
	mov	eax, DWORD PTR _rguid2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rguid1$[ebp]
	push	ecx
	call	_memcmp
	add	esp, 12					; 0000000cH
	neg	eax
	sbb	eax, eax
	add	eax, 1
; Line 162
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_IsEqualGUID@8 ENDP
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CCopyCoder@NCompress@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CCopyCoder@NCompress@@UAGKXZ PROC		; NCompress::CCopyCoder::AddRef, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\compress\copycoder.h
; Line 31
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+16], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CCopyCoder@NCompress@@UAGKXZ ENDP		; NCompress::CCopyCoder::AddRef
_TEXT	ENDS
PUBLIC	??_GCCopyCoder@NCompress@@QAEPAXI@Z		; NCompress::CCopyCoder::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CCopyCoder@NCompress@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T70870 = -8						; size = 4
$T70869 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CCopyCoder@NCompress@@UAGKXZ PROC		; NCompress::CCopyCoder::Release, COMDAT
; Line 31
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+16], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+16]
	jmp	SHORT $LN2@Release
$LN1@Release:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T70870[ebp], edx
	mov	eax, DWORD PTR $T70870[ebp]
	mov	DWORD PTR $T70869[ebp], eax
	cmp	DWORD PTR $T70869[ebp], 0
	je	SHORT $LN4@Release
	push	1
	mov	ecx, DWORD PTR $T70869[ebp]
	call	??_GCCopyCoder@NCompress@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release
$LN4@Release:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release:
	xor	eax, eax
$LN2@Release:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CCopyCoder@NCompress@@UAGKXZ ENDP		; NCompress::CCopyCoder::Release
_TEXT	ENDS
PUBLIC	??_7ICompressCoder@@6B@				; ICompressCoder::`vftable'
PUBLIC	??0IUnknown@@QAE@XZ				; IUnknown::IUnknown
PUBLIC	??_R4ICompressCoder@@6B@			; ICompressCoder::`RTTI Complete Object Locator'
EXTRN	__purecall:PROC
;	COMDAT ??_R4ICompressCoder@@6B@
rdata$r	SEGMENT
??_R4ICompressCoder@@6B@ DD 00H				; ICompressCoder::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUICompressCoder@@@8
	DD	FLAT:??_R3ICompressCoder@@8
rdata$r	ENDS
;	COMDAT ??_7ICompressCoder@@6B@
CONST	SEGMENT
??_7ICompressCoder@@6B@ DD FLAT:??_R4ICompressCoder@@6B@ ; ICompressCoder::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ICompressCoder@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ICompressCoder@@QAE@XZ PROC				; ICompressCoder::ICompressCoder, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ICompressCoder@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ICompressCoder@@QAE@XZ ENDP				; ICompressCoder::ICompressCoder
_TEXT	ENDS
PUBLIC	??_7ICompressSetInStream@@6B@			; ICompressSetInStream::`vftable'
PUBLIC	??_R4ICompressSetInStream@@6B@			; ICompressSetInStream::`RTTI Complete Object Locator'
;	COMDAT ??_R4ICompressSetInStream@@6B@
rdata$r	SEGMENT
??_R4ICompressSetInStream@@6B@ DD 00H			; ICompressSetInStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUICompressSetInStream@@@8
	DD	FLAT:??_R3ICompressSetInStream@@8
rdata$r	ENDS
;	COMDAT ??_7ICompressSetInStream@@6B@
CONST	SEGMENT
??_7ICompressSetInStream@@6B@ DD FLAT:??_R4ICompressSetInStream@@6B@ ; ICompressSetInStream::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ICompressSetInStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ICompressSetInStream@@QAE@XZ PROC			; ICompressSetInStream::ICompressSetInStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ICompressSetInStream@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ICompressSetInStream@@QAE@XZ ENDP			; ICompressSetInStream::ICompressSetInStream
_TEXT	ENDS
PUBLIC	??_7ISequentialInStream@@6B@			; ISequentialInStream::`vftable'
PUBLIC	??_R4ISequentialInStream@@6B@			; ISequentialInStream::`RTTI Complete Object Locator'
;	COMDAT ??_R4ISequentialInStream@@6B@
rdata$r	SEGMENT
??_R4ISequentialInStream@@6B@ DD 00H			; ISequentialInStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUISequentialInStream@@@8
	DD	FLAT:??_R3ISequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_7ISequentialInStream@@6B@
CONST	SEGMENT
??_7ISequentialInStream@@6B@ DD FLAT:??_R4ISequentialInStream@@6B@ ; ISequentialInStream::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ISequentialInStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ISequentialInStream@@QAE@XZ PROC			; ISequentialInStream::ISequentialInStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ISequentialInStream@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ISequentialInStream@@QAE@XZ ENDP			; ISequentialInStream::ISequentialInStream
_TEXT	ENDS
PUBLIC	??_7ICompressGetInStreamProcessedSize@@6B@	; ICompressGetInStreamProcessedSize::`vftable'
PUBLIC	??_R4ICompressGetInStreamProcessedSize@@6B@	; ICompressGetInStreamProcessedSize::`RTTI Complete Object Locator'
;	COMDAT ??_R4ICompressGetInStreamProcessedSize@@6B@
rdata$r	SEGMENT
??_R4ICompressGetInStreamProcessedSize@@6B@ DD 00H	; ICompressGetInStreamProcessedSize::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUICompressGetInStreamProcessedSize@@@8
	DD	FLAT:??_R3ICompressGetInStreamProcessedSize@@8
rdata$r	ENDS
;	COMDAT ??_7ICompressGetInStreamProcessedSize@@6B@
CONST	SEGMENT
??_7ICompressGetInStreamProcessedSize@@6B@ DD FLAT:??_R4ICompressGetInStreamProcessedSize@@6B@ ; ICompressGetInStreamProcessedSize::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ICompressGetInStreamProcessedSize@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ICompressGetInStreamProcessedSize@@QAE@XZ PROC	; ICompressGetInStreamProcessedSize::ICompressGetInStreamProcessedSize, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ICompressGetInStreamProcessedSize@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ICompressGetInStreamProcessedSize@@QAE@XZ ENDP	; ICompressGetInStreamProcessedSize::ICompressGetInStreamProcessedSize
_TEXT	ENDS
EXTRN	??1CCopyCoder@NCompress@@QAE@XZ:PROC		; NCompress::CCopyCoder::~CCopyCoder
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCCopyCoder@NCompress@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCCopyCoder@NCompress@@QAEPAXI@Z PROC		; NCompress::CCopyCoder::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CCopyCoder@NCompress@@QAE@XZ		; NCompress::CCopyCoder::~CCopyCoder
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCCopyCoder@NCompress@@QAEPAXI@Z ENDP		; NCompress::CCopyCoder::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0IUnknown@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IUnknown@@QAE@XZ PROC				; IUnknown::IUnknown, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0IUnknown@@QAE@XZ ENDP				; IUnknown::IUnknown
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1AString@@QAE@XZ
_TEXT	SEGMENT
$T70887 = -8						; size = 4
_this$ = -4						; size = 4
??1AString@@QAE@XZ PROC					; AString::~AString, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 232
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T70887[ebp], ecx
	mov	edx, DWORD PTR $T70887[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1AString@@QAE@XZ ENDP					; AString::~AString
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsEmpty@AString@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@AString@@QBE_NXZ PROC				; AString::IsEmpty, COMDAT
; _this$ = ecx
; Line 235
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+4], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@AString@@QBE_NXZ ENDP				; AString::IsEmpty
_TEXT	ENDS
EXTRN	?HasTailSlash@NItemName@NArchive@@YG_NABVAString@@I@Z:PROC ; NArchive::NItemName::HasTailSlash
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsDir@CItem@NTar@NArchive@@QBE_NXZ
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
?IsDir@CItem@NTar@NArchive@@QBE_NXZ PROC		; NArchive::NTar::CItem::IsDir, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\tar\taritem.h
; Line 60
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 61
	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax+104]
	mov	DWORD PTR tv66[ebp], ecx
	cmp	DWORD PTR tv66[ebp], 68			; 00000044H
	ja	SHORT $LN3@IsDir
	mov	edx, DWORD PTR tv66[ebp]
	movzx	eax, BYTE PTR $LN7@IsDir[edx]
	jmp	DWORD PTR $LN8@IsDir[eax*4]
$LN2@IsDir:
; Line 65
	mov	al, 1
	jmp	SHORT $LN5@IsDir
$LN1@IsDir:
; Line 69
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?HasTailSlash@NItemName@NArchive@@YG_NABVAString@@I@Z ; NArchive::NItemName::HasTailSlash
	jmp	SHORT $LN5@IsDir
$LN3@IsDir:
; Line 71
	xor	al, al
$LN5@IsDir:
; Line 72
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN8@IsDir:
	DD	$LN1@IsDir
	DD	$LN2@IsDir
	DD	$LN3@IsDir
$LN7@IsDir:
	DB	0
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	0
	DB	2
	DB	0
	DB	2
	DB	2
	DB	1
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	1
?IsDir@CItem@NTar@NArchive@@QBE_NXZ ENDP		; NArchive::NTar::CItem::IsDir
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetDataPosition@CItemEx@NTar@NArchive@@QBE_KXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDataPosition@CItemEx@NTar@NArchive@@QBE_KXZ PROC	; NArchive::NTar::CItemEx::GetDataPosition, COMDAT
; _this$ = ecx
; Line 92
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+128]
	xor	edx, edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+120]
	adc	edx, DWORD PTR [ecx+124]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDataPosition@CItemEx@NTar@NArchive@@QBE_KXZ ENDP	; NArchive::NTar::CItemEx::GetDataPosition
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetFullSize@CItemEx@NTar@NArchive@@QBE_KXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFullSize@CItemEx@NTar@NArchive@@QBE_KXZ PROC	; NArchive::NTar::CItemEx::GetFullSize, COMDAT
; _this$ = ecx
; Line 93
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+128]
	xor	edx, edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	adc	edx, DWORD PTR [ecx+20]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetFullSize@CItemEx@NTar@NArchive@@QBE_KXZ ENDP	; NArchive::NTar::CItemEx::GetFullSize
_TEXT	ENDS
PUBLIC	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Create@COutArchive@NTar@NArchive@@QAEXPAUISequentialOutStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_outStream$ = 8						; size = 4
?Create@COutArchive@NTar@NArchive@@QAEXPAUISequentialOutStream@@@Z PROC ; NArchive::NTar::COutArchive::Create, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\tar\tarout.h
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 26
	mov	eax, DWORD PTR _outStream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=
; Line 27
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Create@COutArchive@NTar@NArchive@@QAEXPAUISequentialOutStream@@@Z ENDP ; NArchive::NTar::COutArchive::Create
_TEXT	ENDS
PUBLIC	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ	; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0COutArchive@NTar@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0COutArchive@NTar@NArchive@@QAE@XZ PROC		; NArchive::NTar::COutArchive::COutArchive, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0COutArchive@NTar@NArchive@@QAE@XZ ENDP		; NArchive::NTar::COutArchive::COutArchive
_TEXT	ENDS
PUBLIC	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ	; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1COutArchive@NTar@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1COutArchive@NTar@NArchive@@QAE@XZ PROC		; NArchive::NTar::COutArchive::~COutArchive, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1COutArchive@NTar@NArchive@@QAE@XZ ENDP		; NArchive::NTar::COutArchive::~COutArchive
_TEXT	ENDS
PUBLIC	??_7CLimitedSequentialInStream@@6B@		; CLimitedSequentialInStream::`vftable'
PUBLIC	??_R4CLimitedSequentialInStream@@6B@		; CLimitedSequentialInStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCLimitedSequentialInStream@@@8		; CLimitedSequentialInStream `RTTI Type Descriptor'
PUBLIC	??_R3CLimitedSequentialInStream@@8		; CLimitedSequentialInStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CLimitedSequentialInStream@@8		; CLimitedSequentialInStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CLimitedSequentialInStream@@8	; CLimitedSequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	?QueryInterface@CLimitedSequentialInStream@@UAGJABU_GUID@@PAPAX@Z ; CLimitedSequentialInStream::QueryInterface
PUBLIC	?AddRef@CLimitedSequentialInStream@@UAGKXZ	; CLimitedSequentialInStream::AddRef
PUBLIC	?Release@CLimitedSequentialInStream@@UAGKXZ	; CLimitedSequentialInStream::Release
EXTRN	?Read@CLimitedSequentialInStream@@UAGJPAXIPAI@Z:PROC ; CLimitedSequentialInStream::Read
;	COMDAT ??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R13?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CLimitedSequentialInStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CLimitedSequentialInStream@@8 DD FLAT:??_R0?AVCLimitedSequentialInStream@@@8 ; CLimitedSequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CLimitedSequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_R2CLimitedSequentialInStream@@8
rdata$r	SEGMENT
??_R2CLimitedSequentialInStream@@8 DD FLAT:??_R1A@?0A@EA@CLimitedSequentialInStream@@8 ; CLimitedSequentialInStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ISequentialInStream@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CLimitedSequentialInStream@@8
rdata$r	SEGMENT
??_R3CLimitedSequentialInStream@@8 DD 00H		; CLimitedSequentialInStream::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2CLimitedSequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCLimitedSequentialInStream@@@8
_DATA	SEGMENT
??_R0?AVCLimitedSequentialInStream@@@8 DD FLAT:??_7type_info@@6B@ ; CLimitedSequentialInStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCLimitedSequentialInStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CLimitedSequentialInStream@@6B@
rdata$r	SEGMENT
??_R4CLimitedSequentialInStream@@6B@ DD 00H		; CLimitedSequentialInStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCLimitedSequentialInStream@@@8
	DD	FLAT:??_R3CLimitedSequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_7CLimitedSequentialInStream@@6B@
CONST	SEGMENT
??_7CLimitedSequentialInStream@@6B@ DD FLAT:??_R4CLimitedSequentialInStream@@6B@ ; CLimitedSequentialInStream::`vftable'
	DD	FLAT:?QueryInterface@CLimitedSequentialInStream@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CLimitedSequentialInStream@@UAGKXZ
	DD	FLAT:?Release@CLimitedSequentialInStream@@UAGKXZ
	DD	FLAT:?Read@CLimitedSequentialInStream@@UAGJPAXIPAI@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CLimitedSequentialInStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CLimitedSequentialInStream@@QAE@XZ PROC		; CLimitedSequentialInStream::CLimitedSequentialInStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ISequentialInStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CLimitedSequentialInStream@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CLimitedSequentialInStream@@QAE@XZ ENDP		; CLimitedSequentialInStream::CLimitedSequentialInStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CLimitedSequentialInStream@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CLimitedSequentialInStream@@UAGJABU_GUID@@PAPAX@Z PROC ; CLimitedSequentialInStream::QueryInterface, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\common\limitedstreams.h
; Line 29
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@QueryInter@2
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN3@QueryInter@2
$LN4@QueryInter@2:
	push	OFFSET _IID_ISequentialInStream
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@2
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN3@QueryInter@2
$LN2@QueryInter@2:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN5@QueryInter@2
$LN3@QueryInter@2:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	xor	eax, eax
$LN5@QueryInter@2:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CLimitedSequentialInStream@@UAGJABU_GUID@@PAPAX@Z ENDP ; CLimitedSequentialInStream::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CLimitedSequentialInStream@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CLimitedSequentialInStream@@UAGKXZ PROC		; CLimitedSequentialInStream::AddRef, COMDAT
; Line 29
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CLimitedSequentialInStream@@UAGKXZ ENDP		; CLimitedSequentialInStream::AddRef
_TEXT	ENDS
PUBLIC	??_GCLimitedSequentialInStream@@QAEPAXI@Z	; CLimitedSequentialInStream::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CLimitedSequentialInStream@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T70916 = -8						; size = 4
$T70915 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CLimitedSequentialInStream@@UAGKXZ PROC	; CLimitedSequentialInStream::Release, COMDAT
; Line 29
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	jmp	SHORT $LN2@Release@2
$LN1@Release@2:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T70916[ebp], edx
	mov	eax, DWORD PTR $T70916[ebp]
	mov	DWORD PTR $T70915[ebp], eax
	cmp	DWORD PTR $T70915[ebp], 0
	je	SHORT $LN4@Release@2
	push	1
	mov	ecx, DWORD PTR $T70915[ebp]
	call	??_GCLimitedSequentialInStream@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release@2
$LN4@Release@2:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release@2:
	xor	eax, eax
$LN2@Release@2:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CLimitedSequentialInStream@@UAGKXZ ENDP	; CLimitedSequentialInStream::Release
_TEXT	ENDS
PUBLIC	??1CLimitedSequentialInStream@@QAE@XZ		; CLimitedSequentialInStream::~CLimitedSequentialInStream
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCLimitedSequentialInStream@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCLimitedSequentialInStream@@QAEPAXI@Z PROC		; CLimitedSequentialInStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CLimitedSequentialInStream@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCLimitedSequentialInStream@@QAEPAXI@Z ENDP		; CLimitedSequentialInStream::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CLimitedSequentialInStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CLimitedSequentialInStream@@QAE@XZ PROC		; CLimitedSequentialInStream::~CLimitedSequentialInStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CLimitedSequentialInStream@@QAE@XZ ENDP		; CLimitedSequentialInStream::~CLimitedSequentialInStream
_TEXT	ENDS
PUBLIC	??0?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::NTar::CSparseBlock>::CRecordVector<NArchive::NTar::CSparseBlock>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CItem@NTar@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CItem@NTar@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CItem@NTar@NArchive@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CItem@NTar@NArchive@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CItem@NTar@NArchive@@QAE@XZ$3
__ehfuncinfo$??0CItem@NTar@NArchive@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0CItem@NTar@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CItem@NTar@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CItem@NTar@NArchive@@QAE@XZ PROC			; NArchive::NTar::CItem::CItem, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CItem@NTar@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0AString@@QAE@XZ			; AString::AString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??0AString@@QAE@XZ			; AString::AString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	call	??0AString@@QAE@XZ			; AString::AString
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	??0AString@@QAE@XZ			; AString::AString
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 108				; 0000006cH
	call	??0?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::NTar::CSparseBlock>::CRecordVector<NArchive::NTar::CSparseBlock>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CItem@NTar@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1AString@@QAE@XZ			; AString::~AString
__unwindfunclet$??0CItem@NTar@NArchive@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	jmp	??1AString@@QAE@XZ			; AString::~AString
__unwindfunclet$??0CItem@NTar@NArchive@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	jmp	??1AString@@QAE@XZ			; AString::~AString
__unwindfunclet$??0CItem@NTar@NArchive@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	jmp	??1AString@@QAE@XZ			; AString::~AString
__ehhandler$??0CItem@NTar@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CItem@NTar@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CItem@NTar@NArchive@@QAE@XZ ENDP			; NArchive::NTar::CItem::CItem
PUBLIC	??1?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::NTar::CSparseBlock>::~CRecordVector<NArchive::NTar::CSparseBlock>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CItem@NTar@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CItem@NTar@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CItem@NTar@NArchive@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CItem@NTar@NArchive@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CItem@NTar@NArchive@@QAE@XZ$3
__ehfuncinfo$??1CItem@NTar@NArchive@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??1CItem@NTar@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CItem@NTar@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CItem@NTar@NArchive@@QAE@XZ PROC			; NArchive::NTar::CItem::~CItem, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CItem@NTar@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 108				; 0000006cH
	call	??1?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::NTar::CSparseBlock>::~CRecordVector<NArchive::NTar::CSparseBlock>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CItem@NTar@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1AString@@QAE@XZ			; AString::~AString
__unwindfunclet$??1CItem@NTar@NArchive@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	jmp	??1AString@@QAE@XZ			; AString::~AString
__unwindfunclet$??1CItem@NTar@NArchive@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	jmp	??1AString@@QAE@XZ			; AString::~AString
__unwindfunclet$??1CItem@NTar@NArchive@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	jmp	??1AString@@QAE@XZ			; AString::~AString
__ehhandler$??1CItem@NTar@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CItem@NTar@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CItem@NTar@NArchive@@QAE@XZ ENDP			; NArchive::NTar::CItem::~CItem
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4CItem@NTar@NArchive@@QAEAAU012@ABU012@@Z
_TEXT	SEGMENT
_$S1$70312 = -8						; size = 4
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4CItem@NTar@NArchive@@QAEAAU012@ABU012@@Z PROC	; NArchive::NTar::CItem::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4AString@@QAEAAV0@ABV0@@Z		; AString::operator=
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax
	mov	edx, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+20], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	ecx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR [edx+32], ecx
	mov	eax, DWORD PTR [eax+36]
	mov	DWORD PTR [edx+36], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR [ecx+40], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR [ecx+44], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	DWORD PTR [ecx+48], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+52]
	mov	DWORD PTR [ecx+52], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	DWORD PTR [ecx+56], eax
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 60					; 0000003cH
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??4AString@@QAEAAV0@ABV0@@Z		; AString::operator=
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 72					; 00000048H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	call	??4AString@@QAEAAV0@ABV0@@Z		; AString::operator=
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 84					; 00000054H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	??4AString@@QAEAAV0@ABV0@@Z		; AString::operator=
	mov	DWORD PTR _$S1$70312[ebp], 0
	jmp	SHORT $LN3@operator
$LN2@operator:
	mov	ecx, DWORD PTR _$S1$70312[ebp]
	add	ecx, 1
	mov	DWORD PTR _$S1$70312[ebp], ecx
$LN3@operator:
	cmp	DWORD PTR _$S1$70312[ebp], 8
	jae	SHORT $LN1@operator
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR _$S1$70312[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, DWORD PTR _$S1$70312[ebp]
	mov	cl, BYTE PTR [eax+96]
	mov	BYTE PTR [edx+96], cl
	jmp	SHORT $LN2@operator
$LN1@operator:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cl, BYTE PTR [eax+104]
	mov	BYTE PTR [edx+104], cl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cl, BYTE PTR [eax+105]
	mov	BYTE PTR [edx+105], cl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cl, BYTE PTR [eax+106]
	mov	BYTE PTR [edx+106], cl
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 108				; 0000006cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 108				; 0000006cH
	call	??4?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAEAAV0@ABV0@@Z ; CRecordVector<NArchive::NTar::CSparseBlock>::operator=
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4CItem@NTar@NArchive@@QAEAAU012@ABU012@@Z ENDP	; NArchive::NTar::CItem::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ PROC ; CMyComPtr<ISequentialInStream>::Release, COMDAT
; _this$ = ecx
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Release@3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
$LN2@Release@3:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ ENDP ; CMyComPtr<ISequentialInStream>::Release
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ PROC ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ENDP ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ PROC ; CMyComPtr<ISequentialInStream>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ ENDP ; CMyComPtr<ISequentialInStream>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ PROC ; CMyComPtr<ISequentialInStream>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ENDP ; CMyComPtr<ISequentialInStream>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z PROC ; CMyComPtr<ISequentialInStream>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@2
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@2:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@2
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@2:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ENDP ; CMyComPtr<ISequentialInStream>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@2:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z PROC ; CMyComPtr<ISequentialOutStream>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@3
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@3:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@3
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@3:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ENDP ; CMyComPtr<ISequentialOutStream>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIOutStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UIOutStream@@@@QAE@XZ PROC		; CMyComPtr<IOutStream>::CMyComPtr<IOutStream>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UIOutStream@@@@QAE@XZ ENDP		; CMyComPtr<IOutStream>::CMyComPtr<IOutStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIOutStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIOutStream@@@@QAE@XZ PROC		; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@3:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIOutStream@@@@QAE@XZ ENDP		; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UIOutStream@@@@QAEPAPAUIOutStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UIOutStream@@@@QAEPAPAUIOutStream@@XZ PROC ; CMyComPtr<IOutStream>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UIOutStream@@@@QAEPAPAUIOutStream@@XZ ENDP ; CMyComPtr<IOutStream>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ PROC	; CMyComPtr<IOutStream>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ENDP	; CMyComPtr<IOutStream>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??7?$CMyComPtr@UIOutStream@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??7?$CMyComPtr@UIOutStream@@@@QBE_NXZ PROC		; CMyComPtr<IOutStream>::operator!, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
??7?$CMyComPtr@UIOutStream@@@@QBE_NXZ ENDP		; CMyComPtr<IOutStream>::operator!
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z PROC ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@CMyComPtr@4
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@4:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z ENDP ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ PROC	; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@5:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ENDP	; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ PROC ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ENDP ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAE@XZ PROC ; CRecordVector<NArchive::NTar::CSparseBlock>::CRecordVector<NArchive::NTar::CSparseBlock>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAE@XZ ENDP ; CRecordVector<NArchive::NTar::CSparseBlock>::CRecordVector<NArchive::NTar::CSparseBlock>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
$T70992 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAE@XZ PROC ; CRecordVector<NArchive::NTar::CSparseBlock>::~CRecordVector<NArchive::NTar::CSparseBlock>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T70992[ebp], ecx
	mov	edx, DWORD PTR $T70992[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAE@XZ ENDP ; CRecordVector<NArchive::NTar::CSparseBlock>::~CRecordVector<NArchive::NTar::CSparseBlock>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Clear@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAEXXZ PROC ; CRecordVector<NArchive::NTar::CSparseBlock>::Clear, COMDAT
; _this$ = ecx
; Line 131
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAEXXZ ENDP ; CRecordVector<NArchive::NTar::CSparseBlock>::Clear
_TEXT	ENDS
PUBLIC	?Size@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::NTar::CSparseBlock>::Size
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
$T70998 = -16						; size = 4
$T70997 = -12						; size = 4
_size$ = -8						; size = 4
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??4?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAEAAV0@ABV0@@Z PROC ; CRecordVector<NArchive::NTar::CSparseBlock>::operator=, COMDAT
; _this$ = ecx
; Line 168
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 169
	mov	eax, DWORD PTR _v$[ebp]
	cmp	eax, DWORD PTR _this$[ebp]
	jne	SHORT $LN3@operator@4
; Line 170
	mov	eax, DWORD PTR _this$[ebp]
	jmp	$LN4@operator@4
$LN3@operator@4:
; Line 171
	mov	ecx, DWORD PTR _v$[ebp]
	call	?Size@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::NTar::CSparseBlock>::Size
	mov	DWORD PTR _size$[ebp], eax
; Line 172
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jbe	SHORT $LN2@operator@4
; Line 174
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T70997[ebp], ecx
	mov	edx, DWORD PTR $T70997[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 175
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 176
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 177
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0
; Line 178
	xor	ecx, ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, 16					; 00000010H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T70998[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T70998[ebp]
	mov	DWORD PTR [eax], ecx
; Line 179
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@operator@4:
; Line 181
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 182
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN1@operator@4
; Line 183
	mov	eax, DWORD PTR _size$[ebp]
	shl	eax, 4
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@operator@4:
; Line 184
	mov	eax, DWORD PTR _this$[ebp]
$LN4@operator@4:
; Line 185
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAEAAV0@ABV0@@Z ENDP ; CRecordVector<NArchive::NTar::CSparseBlock>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ PROC ; CMyComPtr<IArchiveUpdateCallbackFile>::CMyComPtr<IArchiveUpdateCallbackFile>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ENDP ; CMyComPtr<IArchiveUpdateCallbackFile>::CMyComPtr<IArchiveUpdateCallbackFile>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ PROC ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@6:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ENDP ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ PROC ; CMyComPtr<IArchiveUpdateCallbackFile>::operator IArchiveUpdateCallbackFile *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ ENDP ; CMyComPtr<IArchiveUpdateCallbackFile>::operator IArchiveUpdateCallbackFile *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAEPAPAUIArchiveUpdateCallbackFile@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAEPAPAUIArchiveUpdateCallbackFile@@XZ PROC ; CMyComPtr<IArchiveUpdateCallbackFile>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAEPAPAUIArchiveUpdateCallbackFile@@XZ ENDP ; CMyComPtr<IArchiveUpdateCallbackFile>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ PROC ; CMyComPtr<IArchiveUpdateCallbackFile>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ ENDP ; CMyComPtr<IArchiveUpdateCallbackFile>::operator->
_TEXT	ENDS
PUBLIC	?Size@?$CRecordVector@PAX@@QBEIXZ		; CRecordVector<void *>::Size
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Size@?$CObjectVector@UCUpdateItem@NTar@NArchive@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@UCUpdateItem@NTar@NArchive@@@@QBEIXZ PROC ; CObjectVector<NArchive::NTar::CUpdateItem>::Size, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@UCUpdateItem@NTar@NArchive@@@@QBEIXZ ENDP ; CObjectVector<NArchive::NTar::CUpdateItem>::Size
_TEXT	ENDS
PUBLIC	??A?$CRecordVector@PAX@@QBEABQAXI@Z		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??A?$CObjectVector@UCUpdateItem@NTar@NArchive@@@@QBEABUCUpdateItem@NTar@NArchive@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCUpdateItem@NTar@NArchive@@@@QBEABUCUpdateItem@NTar@NArchive@@I@Z PROC ; CObjectVector<NArchive::NTar::CUpdateItem>::operator[], COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCUpdateItem@NTar@NArchive@@@@QBEABUCUpdateItem@NTar@NArchive@@I@Z ENDP ; CObjectVector<NArchive::NTar::CUpdateItem>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@UCItemEx@NTar@NArchive@@@@QBEABUCItemEx@NTar@NArchive@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCItemEx@NTar@NArchive@@@@QBEABUCItemEx@NTar@NArchive@@I@Z PROC ; CObjectVector<NArchive::NTar::CItemEx>::operator[], COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCItemEx@NTar@NArchive@@@@QBEABUCItemEx@NTar@NArchive@@I@Z ENDP ; CObjectVector<NArchive::NTar::CItemEx>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICompressCoder@@@@QAE@PAUICompressCoder@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??0?$CMyComPtr@UICompressCoder@@@@QAE@PAUICompressCoder@@@Z PROC ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@CMyComPtr@7
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@7:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UICompressCoder@@@@QAE@PAUICompressCoder@@@Z ENDP ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ PROC		; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@8:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ENDP		; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ PROC ; CMyComPtr<ICompressCoder>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ENDP ; CMyComPtr<ICompressCoder>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@VCLimitedSequentialInStream@@@@QAE@PAVCLimitedSequentialInStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??0?$CMyComPtr@VCLimitedSequentialInStream@@@@QAE@PAVCLimitedSequentialInStream@@@Z PROC ; CMyComPtr<CLimitedSequentialInStream>::CMyComPtr<CLimitedSequentialInStream>, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@CMyComPtr@9
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@9:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@VCLimitedSequentialInStream@@@@QAE@PAVCLimitedSequentialInStream@@@Z ENDP ; CMyComPtr<CLimitedSequentialInStream>::CMyComPtr<CLimitedSequentialInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@VCLimitedSequentialInStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@VCLimitedSequentialInStream@@@@QAE@XZ PROC ; CMyComPtr<CLimitedSequentialInStream>::~CMyComPtr<CLimitedSequentialInStream>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@10
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@10:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@VCLimitedSequentialInStream@@@@QAE@XZ ENDP ; CMyComPtr<CLimitedSequentialInStream>::~CMyComPtr<CLimitedSequentialInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@VCLimitedSequentialInStream@@@@QBEPAVCLimitedSequentialInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@VCLimitedSequentialInStream@@@@QBEPAVCLimitedSequentialInStream@@XZ PROC ; CMyComPtr<CLimitedSequentialInStream>::operator CLimitedSequentialInStream *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@VCLimitedSequentialInStream@@@@QBEPAVCLimitedSequentialInStream@@XZ ENDP ; CMyComPtr<CLimitedSequentialInStream>::operator CLimitedSequentialInStream *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIStreamGetProps@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UIStreamGetProps@@@@QAE@XZ PROC		; CMyComPtr<IStreamGetProps>::CMyComPtr<IStreamGetProps>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UIStreamGetProps@@@@QAE@XZ ENDP		; CMyComPtr<IStreamGetProps>::CMyComPtr<IStreamGetProps>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIStreamGetProps@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIStreamGetProps@@@@QAE@XZ PROC		; CMyComPtr<IStreamGetProps>::~CMyComPtr<IStreamGetProps>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@11
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@11:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIStreamGetProps@@@@QAE@XZ ENDP		; CMyComPtr<IStreamGetProps>::~CMyComPtr<IStreamGetProps>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UIStreamGetProps@@@@QBEPAUIStreamGetProps@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UIStreamGetProps@@@@QBEPAUIStreamGetProps@@XZ PROC ; CMyComPtr<IStreamGetProps>::operator IStreamGetProps *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UIStreamGetProps@@@@QBEPAUIStreamGetProps@@XZ ENDP ; CMyComPtr<IStreamGetProps>::operator IStreamGetProps *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UIStreamGetProps@@@@QAEPAPAUIStreamGetProps@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UIStreamGetProps@@@@QAEPAPAUIStreamGetProps@@XZ PROC ; CMyComPtr<IStreamGetProps>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UIStreamGetProps@@@@QAEPAPAUIStreamGetProps@@XZ ENDP ; CMyComPtr<IStreamGetProps>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UIStreamGetProps@@@@QBEPAUIStreamGetProps@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UIStreamGetProps@@@@QBEPAUIStreamGetProps@@XZ PROC ; CMyComPtr<IStreamGetProps>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UIStreamGetProps@@@@QBEPAUIStreamGetProps@@XZ ENDP ; CMyComPtr<IStreamGetProps>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@PAX@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@PAX@@QBEIXZ PROC			; CRecordVector<void *>::Size, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@PAX@@QBEIXZ ENDP			; CRecordVector<void *>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@PAX@@QBEABQAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@PAX@@QBEABQAXI@Z PROC		; CRecordVector<void *>::operator[], COMDAT
; _this$ = ecx
; Line 227
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@PAX@@QBEABQAXI@Z ENDP		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QBEIXZ PROC ; CRecordVector<NArchive::NTar::CSparseBlock>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QBEIXZ ENDP ; CRecordVector<NArchive::NTar::CSparseBlock>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CCopyCoder@NCompress@@W3AGKXZ
_TEXT	SEGMENT
?Release@CCopyCoder@NCompress@@W3AGKXZ PROC		; [thunk]:NCompress::CCopyCoder::Release`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?Release@CCopyCoder@NCompress@@UAGKXZ	; NCompress::CCopyCoder::Release
?Release@CCopyCoder@NCompress@@W3AGKXZ ENDP		; [thunk]:NCompress::CCopyCoder::Release`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CCopyCoder@NCompress@@W7AGKXZ
_TEXT	SEGMENT
?Release@CCopyCoder@NCompress@@W7AGKXZ PROC		; [thunk]:NCompress::CCopyCoder::Release`adjustor{8}', COMDAT
	sub	DWORD PTR [esp+4], 8
	jmp	?Release@CCopyCoder@NCompress@@UAGKXZ	; NCompress::CCopyCoder::Release
?Release@CCopyCoder@NCompress@@W7AGKXZ ENDP		; [thunk]:NCompress::CCopyCoder::Release`adjustor{8}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CCopyCoder@NCompress@@WM@AGKXZ
_TEXT	SEGMENT
?Release@CCopyCoder@NCompress@@WM@AGKXZ PROC		; [thunk]:NCompress::CCopyCoder::Release`adjustor{12}', COMDAT
	sub	DWORD PTR [esp+4], 12			; 0000000cH
	jmp	?Release@CCopyCoder@NCompress@@UAGKXZ	; NCompress::CCopyCoder::Release
?Release@CCopyCoder@NCompress@@WM@AGKXZ ENDP		; [thunk]:NCompress::CCopyCoder::Release`adjustor{12}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CCopyCoder@NCompress@@W3AGKXZ
_TEXT	SEGMENT
?AddRef@CCopyCoder@NCompress@@W3AGKXZ PROC		; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?AddRef@CCopyCoder@NCompress@@UAGKXZ	; NCompress::CCopyCoder::AddRef
?AddRef@CCopyCoder@NCompress@@W3AGKXZ ENDP		; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CCopyCoder@NCompress@@W7AGKXZ
_TEXT	SEGMENT
?AddRef@CCopyCoder@NCompress@@W7AGKXZ PROC		; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{8}', COMDAT
	sub	DWORD PTR [esp+4], 8
	jmp	?AddRef@CCopyCoder@NCompress@@UAGKXZ	; NCompress::CCopyCoder::AddRef
?AddRef@CCopyCoder@NCompress@@W7AGKXZ ENDP		; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{8}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::CCopyCoder::QueryInterface
?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CCopyCoder@NCompress@@WM@AGKXZ
_TEXT	SEGMENT
?AddRef@CCopyCoder@NCompress@@WM@AGKXZ PROC		; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{12}', COMDAT
	sub	DWORD PTR [esp+4], 12			; 0000000cH
	jmp	?AddRef@CCopyCoder@NCompress@@UAGKXZ	; NCompress::CCopyCoder::AddRef
?AddRef@CCopyCoder@NCompress@@WM@AGKXZ ENDP		; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{12}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{8}', COMDAT
	sub	DWORD PTR [esp+4], 8
	jmp	?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::CCopyCoder::QueryInterface
?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{8}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{12}', COMDAT
	sub	DWORD PTR [esp+4], 12			; 0000000cH
	jmp	?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::CCopyCoder::QueryInterface
?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{12}'
_TEXT	ENDS
END
