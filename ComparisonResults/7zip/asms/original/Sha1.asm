; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\C\Sha1.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_Sha1_Init@4
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\c\sha1.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_p$ = 8							; size = 4
_Sha1_Init@4 PROC
; Line 72
	push	ebp
	mov	ebp, esp
; Line 73
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], 1732584193		; 67452301H
; Line 74
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+4], -271733879		; efcdab89H
; Line 75
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+8], -1732584194		; 98badcfeH
; Line 76
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+12], 271733878		; 10325476H
; Line 77
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+16], -1009589776		; c3d2e1f0H
; Line 78
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
; Line 79
	pop	ebp
	ret	4
_Sha1_Init@4 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_Sha1_GetBlockDigest@12
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv843 = -428						; size = 4
tv806 = -424						; size = 4
tv769 = -420						; size = 4
tv732 = -416						; size = 4
tv699 = -412						; size = 4
tv661 = -408						; size = 4
tv622 = -404						; size = 4
tv583 = -400						; size = 4
tv544 = -396						; size = 4
tv509 = -392						; size = 4
tv469 = -388						; size = 4
tv432 = -384						; size = 4
tv395 = -380						; size = 4
tv358 = -376						; size = 4
tv325 = -372						; size = 4
_i$3561 = -368						; size = 4
_i$3557 = -364						; size = 4
_i$3553 = -360						; size = 4
_i$3549 = -356						; size = 4
_W$ = -348						; size = 320
_e$ = -24						; size = 4
_d$ = -20						; size = 4
_c$ = -16						; size = 4
_b$ = -12						; size = 4
_a$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_p$ = 8							; size = 4
_data$ = 12						; size = 4
_destDigest$ = 16					; size = 4
_Sha1_GetBlockDigest@12 PROC
; Line 82
	push	ebp
	mov	ebp, esp
	sub	esp, 428				; 000001acH
	push	edi
	lea	edi, DWORD PTR [ebp-428]
	mov	ecx, 107				; 0000006bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 86
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _a$[ebp], ecx
; Line 87
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _b$[ebp], eax
; Line 88
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _c$[ebp], edx
; Line 89
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _d$[ebp], ecx
; Line 90
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _e$[ebp], eax
; Line 92
	mov	DWORD PTR _i$3549[ebp], 0
	jmp	SHORT $LN12@Sha1_GetBl
$LN11@Sha1_GetBl:
	mov	ecx, DWORD PTR _i$3549[ebp]
	add	ecx, 5
	mov	DWORD PTR _i$3549[ebp], ecx
$LN12@Sha1_GetBl:
	cmp	DWORD PTR _i$3549[ebp], 15		; 0000000fH
	jae	$LN10@Sha1_GetBl
	mov	edx, DWORD PTR _i$3549[ebp]
	mov	eax, DWORD PTR _i$3549[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _W$[ebp+edx*4], eax
	mov	ecx, DWORD PTR _a$[ebp]
	rol	ecx, 5
	mov	edx, DWORD PTR _c$[ebp]
	xor	edx, DWORD PTR _d$[ebp]
	and	edx, DWORD PTR _b$[ebp]
	xor	edx, DWORD PTR _d$[ebp]
	mov	eax, DWORD PTR _i$3549[ebp]
	add	edx, DWORD PTR _W$[ebp+eax*4]
	add	ecx, DWORD PTR _e$[ebp]
	lea	ecx, DWORD PTR [ecx+edx+1518500249]
	mov	DWORD PTR _e$[ebp], ecx
	mov	edx, DWORD PTR _b$[ebp]
	rol	edx, 30					; 0000001eH
	mov	DWORD PTR _b$[ebp], edx
	mov	eax, DWORD PTR _i$3549[ebp]
	mov	ecx, DWORD PTR _i$3549[ebp]
	mov	edx, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4+4]
	mov	DWORD PTR _W$[ebp+eax*4+4], ecx
	mov	edx, DWORD PTR _e$[ebp]
	rol	edx, 5
	mov	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	and	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _i$3549[ebp]
	add	eax, DWORD PTR _W$[ebp+ecx*4+4]
	add	edx, DWORD PTR _d$[ebp]
	lea	edx, DWORD PTR [edx+eax+1518500249]
	mov	DWORD PTR _d$[ebp], edx
	mov	eax, DWORD PTR _a$[ebp]
	rol	eax, 30					; 0000001eH
	mov	DWORD PTR _a$[ebp], eax
	mov	ecx, DWORD PTR _i$3549[ebp]
	mov	edx, DWORD PTR _i$3549[ebp]
	mov	eax, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [eax+edx*4+8]
	mov	DWORD PTR _W$[ebp+ecx*4+8], edx
	mov	eax, DWORD PTR _d$[ebp]
	rol	eax, 5
	mov	ecx, DWORD PTR _a$[ebp]
	xor	ecx, DWORD PTR _b$[ebp]
	and	ecx, DWORD PTR _e$[ebp]
	xor	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR _i$3549[ebp]
	add	ecx, DWORD PTR _W$[ebp+edx*4+8]
	add	eax, DWORD PTR _c$[ebp]
	lea	eax, DWORD PTR [eax+ecx+1518500249]
	mov	DWORD PTR _c$[ebp], eax
	mov	ecx, DWORD PTR _e$[ebp]
	rol	ecx, 30					; 0000001eH
	mov	DWORD PTR _e$[ebp], ecx
	mov	edx, DWORD PTR _i$3549[ebp]
	mov	eax, DWORD PTR _i$3549[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+12]
	mov	DWORD PTR _W$[ebp+edx*4+12], eax
	mov	ecx, DWORD PTR _c$[ebp]
	rol	ecx, 5
	mov	edx, DWORD PTR _e$[ebp]
	xor	edx, DWORD PTR _a$[ebp]
	and	edx, DWORD PTR _d$[ebp]
	xor	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _i$3549[ebp]
	add	edx, DWORD PTR _W$[ebp+eax*4+12]
	add	ecx, DWORD PTR _b$[ebp]
	lea	ecx, DWORD PTR [ecx+edx+1518500249]
	mov	DWORD PTR _b$[ebp], ecx
	mov	edx, DWORD PTR _d$[ebp]
	rol	edx, 30					; 0000001eH
	mov	DWORD PTR _d$[ebp], edx
	mov	eax, DWORD PTR _i$3549[ebp]
	mov	ecx, DWORD PTR _i$3549[ebp]
	mov	edx, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4+16]
	mov	DWORD PTR _W$[ebp+eax*4+16], ecx
	mov	edx, DWORD PTR _b$[ebp]
	rol	edx, 5
	mov	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _e$[ebp]
	and	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _e$[ebp]
	mov	ecx, DWORD PTR _i$3549[ebp]
	add	eax, DWORD PTR _W$[ebp+ecx*4+16]
	add	edx, DWORD PTR _a$[ebp]
	lea	edx, DWORD PTR [edx+eax+1518500249]
	mov	DWORD PTR _a$[ebp], edx
	mov	eax, DWORD PTR _c$[ebp]
	rol	eax, 30					; 0000001eH
	mov	DWORD PTR _c$[ebp], eax
	jmp	$LN11@Sha1_GetBl
$LN10@Sha1_GetBl:
; Line 94
	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	mov	DWORD PTR _W$[ebp+60], edx
	mov	eax, DWORD PTR _a$[ebp]
	rol	eax, 5
	mov	ecx, DWORD PTR _c$[ebp]
	xor	ecx, DWORD PTR _d$[ebp]
	and	ecx, DWORD PTR _b$[ebp]
	xor	ecx, DWORD PTR _d$[ebp]
	add	ecx, DWORD PTR _W$[ebp+60]
	add	eax, DWORD PTR _e$[ebp]
	lea	edx, DWORD PTR [eax+ecx+1518500249]
	mov	DWORD PTR _e$[ebp], edx
	mov	eax, DWORD PTR _b$[ebp]
	rol	eax, 30					; 0000001eH
	mov	DWORD PTR _b$[ebp], eax
	mov	ecx, DWORD PTR _W$[ebp+52]
	xor	ecx, DWORD PTR _W$[ebp+32]
	xor	ecx, DWORD PTR _W$[ebp+8]
	xor	ecx, DWORD PTR _W$[ebp]
	rol	ecx, 1
	mov	DWORD PTR _W$[ebp+64], ecx
	mov	edx, DWORD PTR _e$[ebp]
	rol	edx, 5
	mov	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	and	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR _W$[ebp+64]
	add	edx, DWORD PTR _d$[ebp]
	lea	ecx, DWORD PTR [edx+eax+1518500249]
	mov	DWORD PTR _d$[ebp], ecx
	mov	edx, DWORD PTR _a$[ebp]
	rol	edx, 30					; 0000001eH
	mov	DWORD PTR _a$[ebp], edx
	mov	eax, DWORD PTR _W$[ebp+56]
	xor	eax, DWORD PTR _W$[ebp+36]
	xor	eax, DWORD PTR _W$[ebp+12]
	xor	eax, DWORD PTR _W$[ebp+4]
	rol	eax, 1
	mov	DWORD PTR _W$[ebp+68], eax
	mov	ecx, DWORD PTR _d$[ebp]
	rol	ecx, 5
	mov	edx, DWORD PTR _a$[ebp]
	xor	edx, DWORD PTR _b$[ebp]
	and	edx, DWORD PTR _e$[ebp]
	xor	edx, DWORD PTR _b$[ebp]
	add	edx, DWORD PTR _W$[ebp+68]
	add	ecx, DWORD PTR _c$[ebp]
	lea	eax, DWORD PTR [ecx+edx+1518500249]
	mov	DWORD PTR _c$[ebp], eax
	mov	ecx, DWORD PTR _e$[ebp]
	rol	ecx, 30					; 0000001eH
	mov	DWORD PTR _e$[ebp], ecx
	mov	edx, DWORD PTR _W$[ebp+60]
	xor	edx, DWORD PTR _W$[ebp+40]
	xor	edx, DWORD PTR _W$[ebp+16]
	xor	edx, DWORD PTR _W$[ebp+8]
	rol	edx, 1
	mov	DWORD PTR _W$[ebp+72], edx
	mov	eax, DWORD PTR _c$[ebp]
	rol	eax, 5
	mov	ecx, DWORD PTR _e$[ebp]
	xor	ecx, DWORD PTR _a$[ebp]
	and	ecx, DWORD PTR _d$[ebp]
	xor	ecx, DWORD PTR _a$[ebp]
	add	ecx, DWORD PTR _W$[ebp+72]
	add	eax, DWORD PTR _b$[ebp]
	lea	edx, DWORD PTR [eax+ecx+1518500249]
	mov	DWORD PTR _b$[ebp], edx
	mov	eax, DWORD PTR _d$[ebp]
	rol	eax, 30					; 0000001eH
	mov	DWORD PTR _d$[ebp], eax
	mov	ecx, DWORD PTR _W$[ebp+64]
	xor	ecx, DWORD PTR _W$[ebp+44]
	xor	ecx, DWORD PTR _W$[ebp+20]
	xor	ecx, DWORD PTR _W$[ebp+12]
	rol	ecx, 1
	mov	DWORD PTR _W$[ebp+76], ecx
	mov	edx, DWORD PTR _b$[ebp]
	rol	edx, 5
	mov	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _e$[ebp]
	and	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _e$[ebp]
	add	eax, DWORD PTR _W$[ebp+76]
	add	edx, DWORD PTR _a$[ebp]
	lea	ecx, DWORD PTR [edx+eax+1518500249]
	mov	DWORD PTR _a$[ebp], ecx
	mov	edx, DWORD PTR _c$[ebp]
	rol	edx, 30					; 0000001eH
	mov	DWORD PTR _c$[ebp], edx
; Line 96
	mov	DWORD PTR _i$3553[ebp], 20		; 00000014H
	jmp	SHORT $LN9@Sha1_GetBl
$LN8@Sha1_GetBl:
	mov	eax, DWORD PTR _i$3553[ebp]
	add	eax, 5
	mov	DWORD PTR _i$3553[ebp], eax
$LN9@Sha1_GetBl:
	cmp	DWORD PTR _i$3553[ebp], 40		; 00000028H
	jae	$LN7@Sha1_GetBl
	mov	ecx, DWORD PTR _i$3553[ebp]
	mov	edx, DWORD PTR _i$3553[ebp]
	mov	eax, DWORD PTR _W$[ebp+ecx*4-12]
	xor	eax, DWORD PTR _W$[ebp+edx*4-32]
	mov	ecx, DWORD PTR _i$3553[ebp]
	xor	eax, DWORD PTR _W$[ebp+ecx*4-56]
	mov	edx, DWORD PTR _i$3553[ebp]
	xor	eax, DWORD PTR _W$[ebp+edx*4-64]
	rol	eax, 1
	mov	DWORD PTR tv325[ebp], eax
	mov	eax, DWORD PTR _i$3553[ebp]
	mov	ecx, DWORD PTR tv325[ebp]
	mov	DWORD PTR _W$[ebp+eax*4], ecx
	mov	edx, DWORD PTR _a$[ebp]
	rol	edx, 5
	mov	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	add	eax, DWORD PTR tv325[ebp]
	add	edx, DWORD PTR _e$[ebp]
	lea	ecx, DWORD PTR [edx+eax+1859775393]
	mov	DWORD PTR _e$[ebp], ecx
	mov	edx, DWORD PTR _b$[ebp]
	rol	edx, 30					; 0000001eH
	mov	DWORD PTR _b$[ebp], edx
	mov	eax, DWORD PTR _i$3553[ebp]
	mov	ecx, DWORD PTR _i$3553[ebp]
	mov	edx, DWORD PTR _W$[ebp+eax*4-8]
	xor	edx, DWORD PTR _W$[ebp+ecx*4-28]
	mov	eax, DWORD PTR _i$3553[ebp]
	xor	edx, DWORD PTR _W$[ebp+eax*4-52]
	mov	ecx, DWORD PTR _i$3553[ebp]
	xor	edx, DWORD PTR _W$[ebp+ecx*4-60]
	rol	edx, 1
	mov	DWORD PTR tv358[ebp], edx
	mov	edx, DWORD PTR _i$3553[ebp]
	mov	eax, DWORD PTR tv358[ebp]
	mov	DWORD PTR _W$[ebp+edx*4+4], eax
	mov	ecx, DWORD PTR _e$[ebp]
	rol	ecx, 5
	mov	edx, DWORD PTR _a$[ebp]
	xor	edx, DWORD PTR _b$[ebp]
	xor	edx, DWORD PTR _c$[ebp]
	add	edx, DWORD PTR tv358[ebp]
	add	ecx, DWORD PTR _d$[ebp]
	lea	eax, DWORD PTR [ecx+edx+1859775393]
	mov	DWORD PTR _d$[ebp], eax
	mov	ecx, DWORD PTR _a$[ebp]
	rol	ecx, 30					; 0000001eH
	mov	DWORD PTR _a$[ebp], ecx
	mov	edx, DWORD PTR _i$3553[ebp]
	mov	eax, DWORD PTR _i$3553[ebp]
	mov	ecx, DWORD PTR _W$[ebp+edx*4-4]
	xor	ecx, DWORD PTR _W$[ebp+eax*4-24]
	mov	edx, DWORD PTR _i$3553[ebp]
	xor	ecx, DWORD PTR _W$[ebp+edx*4-48]
	mov	eax, DWORD PTR _i$3553[ebp]
	xor	ecx, DWORD PTR _W$[ebp+eax*4-56]
	rol	ecx, 1
	mov	DWORD PTR tv395[ebp], ecx
	mov	ecx, DWORD PTR _i$3553[ebp]
	mov	edx, DWORD PTR tv395[ebp]
	mov	DWORD PTR _W$[ebp+ecx*4+8], edx
	mov	eax, DWORD PTR _d$[ebp]
	rol	eax, 5
	mov	ecx, DWORD PTR _e$[ebp]
	xor	ecx, DWORD PTR _a$[ebp]
	xor	ecx, DWORD PTR _b$[ebp]
	add	ecx, DWORD PTR tv395[ebp]
	add	eax, DWORD PTR _c$[ebp]
	lea	edx, DWORD PTR [eax+ecx+1859775393]
	mov	DWORD PTR _c$[ebp], edx
	mov	eax, DWORD PTR _e$[ebp]
	rol	eax, 30					; 0000001eH
	mov	DWORD PTR _e$[ebp], eax
	mov	ecx, DWORD PTR _i$3553[ebp]
	mov	edx, DWORD PTR _i$3553[ebp]
	mov	eax, DWORD PTR _W$[ebp+ecx*4]
	xor	eax, DWORD PTR _W$[ebp+edx*4-20]
	mov	ecx, DWORD PTR _i$3553[ebp]
	xor	eax, DWORD PTR _W$[ebp+ecx*4-44]
	mov	edx, DWORD PTR _i$3553[ebp]
	xor	eax, DWORD PTR _W$[ebp+edx*4-52]
	rol	eax, 1
	mov	DWORD PTR tv432[ebp], eax
	mov	eax, DWORD PTR _i$3553[ebp]
	mov	ecx, DWORD PTR tv432[ebp]
	mov	DWORD PTR _W$[ebp+eax*4+12], ecx
	mov	edx, DWORD PTR _c$[ebp]
	rol	edx, 5
	mov	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _e$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR tv432[ebp]
	add	edx, DWORD PTR _b$[ebp]
	lea	ecx, DWORD PTR [edx+eax+1859775393]
	mov	DWORD PTR _b$[ebp], ecx
	mov	edx, DWORD PTR _d$[ebp]
	rol	edx, 30					; 0000001eH
	mov	DWORD PTR _d$[ebp], edx
	mov	eax, DWORD PTR _i$3553[ebp]
	mov	ecx, DWORD PTR _i$3553[ebp]
	mov	edx, DWORD PTR _W$[ebp+eax*4+4]
	xor	edx, DWORD PTR _W$[ebp+ecx*4-16]
	mov	eax, DWORD PTR _i$3553[ebp]
	xor	edx, DWORD PTR _W$[ebp+eax*4-40]
	mov	ecx, DWORD PTR _i$3553[ebp]
	xor	edx, DWORD PTR _W$[ebp+ecx*4-48]
	rol	edx, 1
	mov	DWORD PTR tv469[ebp], edx
	mov	edx, DWORD PTR _i$3553[ebp]
	mov	eax, DWORD PTR tv469[ebp]
	mov	DWORD PTR _W$[ebp+edx*4+16], eax
	mov	ecx, DWORD PTR _b$[ebp]
	rol	ecx, 5
	mov	edx, DWORD PTR _c$[ebp]
	xor	edx, DWORD PTR _d$[ebp]
	xor	edx, DWORD PTR _e$[ebp]
	add	edx, DWORD PTR tv469[ebp]
	add	ecx, DWORD PTR _a$[ebp]
	lea	eax, DWORD PTR [ecx+edx+1859775393]
	mov	DWORD PTR _a$[ebp], eax
	mov	ecx, DWORD PTR _c$[ebp]
	rol	ecx, 30					; 0000001eH
	mov	DWORD PTR _c$[ebp], ecx
	jmp	$LN8@Sha1_GetBl
$LN7@Sha1_GetBl:
; Line 97
	mov	DWORD PTR _i$3557[ebp], 40		; 00000028H
	jmp	SHORT $LN6@Sha1_GetBl
$LN5@Sha1_GetBl:
	mov	edx, DWORD PTR _i$3557[ebp]
	add	edx, 5
	mov	DWORD PTR _i$3557[ebp], edx
$LN6@Sha1_GetBl:
	cmp	DWORD PTR _i$3557[ebp], 60		; 0000003cH
	jae	$LN4@Sha1_GetBl
	mov	eax, DWORD PTR _i$3557[ebp]
	mov	ecx, DWORD PTR _i$3557[ebp]
	mov	edx, DWORD PTR _W$[ebp+eax*4-12]
	xor	edx, DWORD PTR _W$[ebp+ecx*4-32]
	mov	eax, DWORD PTR _i$3557[ebp]
	xor	edx, DWORD PTR _W$[ebp+eax*4-56]
	mov	ecx, DWORD PTR _i$3557[ebp]
	xor	edx, DWORD PTR _W$[ebp+ecx*4-64]
	rol	edx, 1
	mov	DWORD PTR tv509[ebp], edx
	mov	edx, DWORD PTR _i$3557[ebp]
	mov	eax, DWORD PTR tv509[ebp]
	mov	DWORD PTR _W$[ebp+edx*4], eax
	mov	ecx, DWORD PTR _a$[ebp]
	rol	ecx, 5
	mov	edx, DWORD PTR _b$[ebp]
	or	edx, DWORD PTR _c$[ebp]
	and	edx, DWORD PTR _d$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	and	eax, DWORD PTR _c$[ebp]
	or	eax, edx
	add	eax, DWORD PTR tv509[ebp]
	add	ecx, DWORD PTR _e$[ebp]
	lea	ecx, DWORD PTR [ecx+eax-1894007588]
	mov	DWORD PTR _e$[ebp], ecx
	mov	edx, DWORD PTR _b$[ebp]
	rol	edx, 30					; 0000001eH
	mov	DWORD PTR _b$[ebp], edx
	mov	eax, DWORD PTR _i$3557[ebp]
	mov	ecx, DWORD PTR _i$3557[ebp]
	mov	edx, DWORD PTR _W$[ebp+eax*4-8]
	xor	edx, DWORD PTR _W$[ebp+ecx*4-28]
	mov	eax, DWORD PTR _i$3557[ebp]
	xor	edx, DWORD PTR _W$[ebp+eax*4-52]
	mov	ecx, DWORD PTR _i$3557[ebp]
	xor	edx, DWORD PTR _W$[ebp+ecx*4-60]
	rol	edx, 1
	mov	DWORD PTR tv544[ebp], edx
	mov	edx, DWORD PTR _i$3557[ebp]
	mov	eax, DWORD PTR tv544[ebp]
	mov	DWORD PTR _W$[ebp+edx*4+4], eax
	mov	ecx, DWORD PTR _e$[ebp]
	rol	ecx, 5
	mov	edx, DWORD PTR _a$[ebp]
	or	edx, DWORD PTR _b$[ebp]
	and	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR _a$[ebp]
	and	eax, DWORD PTR _b$[ebp]
	or	eax, edx
	add	eax, DWORD PTR tv544[ebp]
	add	ecx, DWORD PTR _d$[ebp]
	lea	ecx, DWORD PTR [ecx+eax-1894007588]
	mov	DWORD PTR _d$[ebp], ecx
	mov	edx, DWORD PTR _a$[ebp]
	rol	edx, 30					; 0000001eH
	mov	DWORD PTR _a$[ebp], edx
	mov	eax, DWORD PTR _i$3557[ebp]
	mov	ecx, DWORD PTR _i$3557[ebp]
	mov	edx, DWORD PTR _W$[ebp+eax*4-4]
	xor	edx, DWORD PTR _W$[ebp+ecx*4-24]
	mov	eax, DWORD PTR _i$3557[ebp]
	xor	edx, DWORD PTR _W$[ebp+eax*4-48]
	mov	ecx, DWORD PTR _i$3557[ebp]
	xor	edx, DWORD PTR _W$[ebp+ecx*4-56]
	rol	edx, 1
	mov	DWORD PTR tv583[ebp], edx
	mov	edx, DWORD PTR _i$3557[ebp]
	mov	eax, DWORD PTR tv583[ebp]
	mov	DWORD PTR _W$[ebp+edx*4+8], eax
	mov	ecx, DWORD PTR _d$[ebp]
	rol	ecx, 5
	mov	edx, DWORD PTR _e$[ebp]
	or	edx, DWORD PTR _a$[ebp]
	and	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR _e$[ebp]
	and	eax, DWORD PTR _a$[ebp]
	or	eax, edx
	add	eax, DWORD PTR tv583[ebp]
	add	ecx, DWORD PTR _c$[ebp]
	lea	ecx, DWORD PTR [ecx+eax-1894007588]
	mov	DWORD PTR _c$[ebp], ecx
	mov	edx, DWORD PTR _e$[ebp]
	rol	edx, 30					; 0000001eH
	mov	DWORD PTR _e$[ebp], edx
	mov	eax, DWORD PTR _i$3557[ebp]
	mov	ecx, DWORD PTR _i$3557[ebp]
	mov	edx, DWORD PTR _W$[ebp+eax*4]
	xor	edx, DWORD PTR _W$[ebp+ecx*4-20]
	mov	eax, DWORD PTR _i$3557[ebp]
	xor	edx, DWORD PTR _W$[ebp+eax*4-44]
	mov	ecx, DWORD PTR _i$3557[ebp]
	xor	edx, DWORD PTR _W$[ebp+ecx*4-52]
	rol	edx, 1
	mov	DWORD PTR tv622[ebp], edx
	mov	edx, DWORD PTR _i$3557[ebp]
	mov	eax, DWORD PTR tv622[ebp]
	mov	DWORD PTR _W$[ebp+edx*4+12], eax
	mov	ecx, DWORD PTR _c$[ebp]
	rol	ecx, 5
	mov	edx, DWORD PTR _d$[ebp]
	or	edx, DWORD PTR _e$[ebp]
	and	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _d$[ebp]
	and	eax, DWORD PTR _e$[ebp]
	or	eax, edx
	add	eax, DWORD PTR tv622[ebp]
	add	ecx, DWORD PTR _b$[ebp]
	lea	ecx, DWORD PTR [ecx+eax-1894007588]
	mov	DWORD PTR _b$[ebp], ecx
	mov	edx, DWORD PTR _d$[ebp]
	rol	edx, 30					; 0000001eH
	mov	DWORD PTR _d$[ebp], edx
	mov	eax, DWORD PTR _i$3557[ebp]
	mov	ecx, DWORD PTR _i$3557[ebp]
	mov	edx, DWORD PTR _W$[ebp+eax*4+4]
	xor	edx, DWORD PTR _W$[ebp+ecx*4-16]
	mov	eax, DWORD PTR _i$3557[ebp]
	xor	edx, DWORD PTR _W$[ebp+eax*4-40]
	mov	ecx, DWORD PTR _i$3557[ebp]
	xor	edx, DWORD PTR _W$[ebp+ecx*4-48]
	rol	edx, 1
	mov	DWORD PTR tv661[ebp], edx
	mov	edx, DWORD PTR _i$3557[ebp]
	mov	eax, DWORD PTR tv661[ebp]
	mov	DWORD PTR _W$[ebp+edx*4+16], eax
	mov	ecx, DWORD PTR _b$[ebp]
	rol	ecx, 5
	mov	edx, DWORD PTR _c$[ebp]
	or	edx, DWORD PTR _d$[ebp]
	and	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, DWORD PTR _d$[ebp]
	or	eax, edx
	add	eax, DWORD PTR tv661[ebp]
	add	ecx, DWORD PTR _a$[ebp]
	lea	ecx, DWORD PTR [ecx+eax-1894007588]
	mov	DWORD PTR _a$[ebp], ecx
	mov	edx, DWORD PTR _c$[ebp]
	rol	edx, 30					; 0000001eH
	mov	DWORD PTR _c$[ebp], edx
	jmp	$LN5@Sha1_GetBl
$LN4@Sha1_GetBl:
; Line 98
	mov	DWORD PTR _i$3561[ebp], 60		; 0000003cH
	jmp	SHORT $LN3@Sha1_GetBl
$LN2@Sha1_GetBl:
	mov	eax, DWORD PTR _i$3561[ebp]
	add	eax, 5
	mov	DWORD PTR _i$3561[ebp], eax
$LN3@Sha1_GetBl:
	cmp	DWORD PTR _i$3561[ebp], 80		; 00000050H
	jae	$LN1@Sha1_GetBl
	mov	ecx, DWORD PTR _i$3561[ebp]
	mov	edx, DWORD PTR _i$3561[ebp]
	mov	eax, DWORD PTR _W$[ebp+ecx*4-12]
	xor	eax, DWORD PTR _W$[ebp+edx*4-32]
	mov	ecx, DWORD PTR _i$3561[ebp]
	xor	eax, DWORD PTR _W$[ebp+ecx*4-56]
	mov	edx, DWORD PTR _i$3561[ebp]
	xor	eax, DWORD PTR _W$[ebp+edx*4-64]
	rol	eax, 1
	mov	DWORD PTR tv699[ebp], eax
	mov	eax, DWORD PTR _i$3561[ebp]
	mov	ecx, DWORD PTR tv699[ebp]
	mov	DWORD PTR _W$[ebp+eax*4], ecx
	mov	edx, DWORD PTR _a$[ebp]
	rol	edx, 5
	mov	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	add	eax, DWORD PTR tv699[ebp]
	add	edx, DWORD PTR _e$[ebp]
	lea	ecx, DWORD PTR [edx+eax-899497514]
	mov	DWORD PTR _e$[ebp], ecx
	mov	edx, DWORD PTR _b$[ebp]
	rol	edx, 30					; 0000001eH
	mov	DWORD PTR _b$[ebp], edx
	mov	eax, DWORD PTR _i$3561[ebp]
	mov	ecx, DWORD PTR _i$3561[ebp]
	mov	edx, DWORD PTR _W$[ebp+eax*4-8]
	xor	edx, DWORD PTR _W$[ebp+ecx*4-28]
	mov	eax, DWORD PTR _i$3561[ebp]
	xor	edx, DWORD PTR _W$[ebp+eax*4-52]
	mov	ecx, DWORD PTR _i$3561[ebp]
	xor	edx, DWORD PTR _W$[ebp+ecx*4-60]
	rol	edx, 1
	mov	DWORD PTR tv732[ebp], edx
	mov	edx, DWORD PTR _i$3561[ebp]
	mov	eax, DWORD PTR tv732[ebp]
	mov	DWORD PTR _W$[ebp+edx*4+4], eax
	mov	ecx, DWORD PTR _e$[ebp]
	rol	ecx, 5
	mov	edx, DWORD PTR _a$[ebp]
	xor	edx, DWORD PTR _b$[ebp]
	xor	edx, DWORD PTR _c$[ebp]
	add	edx, DWORD PTR tv732[ebp]
	add	ecx, DWORD PTR _d$[ebp]
	lea	eax, DWORD PTR [ecx+edx-899497514]
	mov	DWORD PTR _d$[ebp], eax
	mov	ecx, DWORD PTR _a$[ebp]
	rol	ecx, 30					; 0000001eH
	mov	DWORD PTR _a$[ebp], ecx
	mov	edx, DWORD PTR _i$3561[ebp]
	mov	eax, DWORD PTR _i$3561[ebp]
	mov	ecx, DWORD PTR _W$[ebp+edx*4-4]
	xor	ecx, DWORD PTR _W$[ebp+eax*4-24]
	mov	edx, DWORD PTR _i$3561[ebp]
	xor	ecx, DWORD PTR _W$[ebp+edx*4-48]
	mov	eax, DWORD PTR _i$3561[ebp]
	xor	ecx, DWORD PTR _W$[ebp+eax*4-56]
	rol	ecx, 1
	mov	DWORD PTR tv769[ebp], ecx
	mov	ecx, DWORD PTR _i$3561[ebp]
	mov	edx, DWORD PTR tv769[ebp]
	mov	DWORD PTR _W$[ebp+ecx*4+8], edx
	mov	eax, DWORD PTR _d$[ebp]
	rol	eax, 5
	mov	ecx, DWORD PTR _e$[ebp]
	xor	ecx, DWORD PTR _a$[ebp]
	xor	ecx, DWORD PTR _b$[ebp]
	add	ecx, DWORD PTR tv769[ebp]
	add	eax, DWORD PTR _c$[ebp]
	lea	edx, DWORD PTR [eax+ecx-899497514]
	mov	DWORD PTR _c$[ebp], edx
	mov	eax, DWORD PTR _e$[ebp]
	rol	eax, 30					; 0000001eH
	mov	DWORD PTR _e$[ebp], eax
	mov	ecx, DWORD PTR _i$3561[ebp]
	mov	edx, DWORD PTR _i$3561[ebp]
	mov	eax, DWORD PTR _W$[ebp+ecx*4]
	xor	eax, DWORD PTR _W$[ebp+edx*4-20]
	mov	ecx, DWORD PTR _i$3561[ebp]
	xor	eax, DWORD PTR _W$[ebp+ecx*4-44]
	mov	edx, DWORD PTR _i$3561[ebp]
	xor	eax, DWORD PTR _W$[ebp+edx*4-52]
	rol	eax, 1
	mov	DWORD PTR tv806[ebp], eax
	mov	eax, DWORD PTR _i$3561[ebp]
	mov	ecx, DWORD PTR tv806[ebp]
	mov	DWORD PTR _W$[ebp+eax*4+12], ecx
	mov	edx, DWORD PTR _c$[ebp]
	rol	edx, 5
	mov	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _e$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR tv806[ebp]
	add	edx, DWORD PTR _b$[ebp]
	lea	ecx, DWORD PTR [edx+eax-899497514]
	mov	DWORD PTR _b$[ebp], ecx
	mov	edx, DWORD PTR _d$[ebp]
	rol	edx, 30					; 0000001eH
	mov	DWORD PTR _d$[ebp], edx
	mov	eax, DWORD PTR _i$3561[ebp]
	mov	ecx, DWORD PTR _i$3561[ebp]
	mov	edx, DWORD PTR _W$[ebp+eax*4+4]
	xor	edx, DWORD PTR _W$[ebp+ecx*4-16]
	mov	eax, DWORD PTR _i$3561[ebp]
	xor	edx, DWORD PTR _W$[ebp+eax*4-40]
	mov	ecx, DWORD PTR _i$3561[ebp]
	xor	edx, DWORD PTR _W$[ebp+ecx*4-48]
	rol	edx, 1
	mov	DWORD PTR tv843[ebp], edx
	mov	edx, DWORD PTR _i$3561[ebp]
	mov	eax, DWORD PTR tv843[ebp]
	mov	DWORD PTR _W$[ebp+edx*4+16], eax
	mov	ecx, DWORD PTR _b$[ebp]
	rol	ecx, 5
	mov	edx, DWORD PTR _c$[ebp]
	xor	edx, DWORD PTR _d$[ebp]
	xor	edx, DWORD PTR _e$[ebp]
	add	edx, DWORD PTR tv843[ebp]
	add	ecx, DWORD PTR _a$[ebp]
	lea	eax, DWORD PTR [ecx+edx-899497514]
	mov	DWORD PTR _a$[ebp], eax
	mov	ecx, DWORD PTR _c$[ebp]
	rol	ecx, 30					; 0000001eH
	mov	DWORD PTR _c$[ebp], ecx
	jmp	$LN2@Sha1_GetBl
$LN1@Sha1_GetBl:
; Line 100
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _destDigest$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 101
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _destDigest$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 102
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _destDigest$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 103
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+12]
	add	eax, DWORD PTR _d$[ebp]
	mov	ecx, DWORD PTR _destDigest$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 104
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+16]
	add	eax, DWORD PTR _e$[ebp]
	mov	ecx, DWORD PTR _destDigest$[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 105
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@Sha1_GetBl
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN17@Sha1_GetBl:
	DD	1
	DD	$LN16@Sha1_GetBl
$LN16@Sha1_GetBl:
	DD	-348					; fffffea4H
	DD	320					; 00000140H
	DD	$LN15@Sha1_GetBl
$LN15@Sha1_GetBl:
	DB	87					; 00000057H
	DB	0
_Sha1_GetBlockDigest@12 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_Sha1_UpdateBlock_Rar@12
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv843 = -432						; size = 4
tv806 = -428						; size = 4
tv769 = -424						; size = 4
tv732 = -420						; size = 4
tv699 = -416						; size = 4
tv661 = -412						; size = 4
tv622 = -408						; size = 4
tv583 = -404						; size = 4
tv544 = -400						; size = 4
tv509 = -396						; size = 4
tv469 = -392						; size = 4
tv432 = -388						; size = 4
tv395 = -384						; size = 4
tv358 = -380						; size = 4
tv325 = -376						; size = 4
_i$3596 = -372						; size = 4
_i$3591 = -368						; size = 4
_i$3587 = -364						; size = 4
_i$3583 = -360						; size = 4
_i$3579 = -356						; size = 4
_W$ = -348						; size = 320
_e$ = -24						; size = 4
_d$ = -20						; size = 4
_c$ = -16						; size = 4
_b$ = -12						; size = 4
_a$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_p$ = 8							; size = 4
_data$ = 12						; size = 4
_returnRes$ = 16					; size = 4
_Sha1_UpdateBlock_Rar@12 PROC
; Line 108
	push	ebp
	mov	ebp, esp
	sub	esp, 432				; 000001b0H
	push	edi
	lea	edi, DWORD PTR [ebp-432]
	mov	ecx, 108				; 0000006cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 112
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _a$[ebp], ecx
; Line 113
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _b$[ebp], eax
; Line 114
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _c$[ebp], edx
; Line 115
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _d$[ebp], ecx
; Line 116
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _e$[ebp], eax
; Line 118
	mov	DWORD PTR _i$3579[ebp], 0
	jmp	SHORT $LN16@Sha1_Updat
$LN15@Sha1_Updat:
	mov	ecx, DWORD PTR _i$3579[ebp]
	add	ecx, 5
	mov	DWORD PTR _i$3579[ebp], ecx
$LN16@Sha1_Updat:
	cmp	DWORD PTR _i$3579[ebp], 15		; 0000000fH
	jae	$LN14@Sha1_Updat
	mov	edx, DWORD PTR _i$3579[ebp]
	mov	eax, DWORD PTR _i$3579[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _W$[ebp+edx*4], eax
	mov	ecx, DWORD PTR _a$[ebp]
	rol	ecx, 5
	mov	edx, DWORD PTR _c$[ebp]
	xor	edx, DWORD PTR _d$[ebp]
	and	edx, DWORD PTR _b$[ebp]
	xor	edx, DWORD PTR _d$[ebp]
	mov	eax, DWORD PTR _i$3579[ebp]
	add	edx, DWORD PTR _W$[ebp+eax*4]
	add	ecx, DWORD PTR _e$[ebp]
	lea	ecx, DWORD PTR [ecx+edx+1518500249]
	mov	DWORD PTR _e$[ebp], ecx
	mov	edx, DWORD PTR _b$[ebp]
	rol	edx, 30					; 0000001eH
	mov	DWORD PTR _b$[ebp], edx
	mov	eax, DWORD PTR _i$3579[ebp]
	mov	ecx, DWORD PTR _i$3579[ebp]
	mov	edx, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4+4]
	mov	DWORD PTR _W$[ebp+eax*4+4], ecx
	mov	edx, DWORD PTR _e$[ebp]
	rol	edx, 5
	mov	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	and	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _i$3579[ebp]
	add	eax, DWORD PTR _W$[ebp+ecx*4+4]
	add	edx, DWORD PTR _d$[ebp]
	lea	edx, DWORD PTR [edx+eax+1518500249]
	mov	DWORD PTR _d$[ebp], edx
	mov	eax, DWORD PTR _a$[ebp]
	rol	eax, 30					; 0000001eH
	mov	DWORD PTR _a$[ebp], eax
	mov	ecx, DWORD PTR _i$3579[ebp]
	mov	edx, DWORD PTR _i$3579[ebp]
	mov	eax, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [eax+edx*4+8]
	mov	DWORD PTR _W$[ebp+ecx*4+8], edx
	mov	eax, DWORD PTR _d$[ebp]
	rol	eax, 5
	mov	ecx, DWORD PTR _a$[ebp]
	xor	ecx, DWORD PTR _b$[ebp]
	and	ecx, DWORD PTR _e$[ebp]
	xor	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR _i$3579[ebp]
	add	ecx, DWORD PTR _W$[ebp+edx*4+8]
	add	eax, DWORD PTR _c$[ebp]
	lea	eax, DWORD PTR [eax+ecx+1518500249]
	mov	DWORD PTR _c$[ebp], eax
	mov	ecx, DWORD PTR _e$[ebp]
	rol	ecx, 30					; 0000001eH
	mov	DWORD PTR _e$[ebp], ecx
	mov	edx, DWORD PTR _i$3579[ebp]
	mov	eax, DWORD PTR _i$3579[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+12]
	mov	DWORD PTR _W$[ebp+edx*4+12], eax
	mov	ecx, DWORD PTR _c$[ebp]
	rol	ecx, 5
	mov	edx, DWORD PTR _e$[ebp]
	xor	edx, DWORD PTR _a$[ebp]
	and	edx, DWORD PTR _d$[ebp]
	xor	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _i$3579[ebp]
	add	edx, DWORD PTR _W$[ebp+eax*4+12]
	add	ecx, DWORD PTR _b$[ebp]
	lea	ecx, DWORD PTR [ecx+edx+1518500249]
	mov	DWORD PTR _b$[ebp], ecx
	mov	edx, DWORD PTR _d$[ebp]
	rol	edx, 30					; 0000001eH
	mov	DWORD PTR _d$[ebp], edx
	mov	eax, DWORD PTR _i$3579[ebp]
	mov	ecx, DWORD PTR _i$3579[ebp]
	mov	edx, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4+16]
	mov	DWORD PTR _W$[ebp+eax*4+16], ecx
	mov	edx, DWORD PTR _b$[ebp]
	rol	edx, 5
	mov	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _e$[ebp]
	and	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _e$[ebp]
	mov	ecx, DWORD PTR _i$3579[ebp]
	add	eax, DWORD PTR _W$[ebp+ecx*4+16]
	add	edx, DWORD PTR _a$[ebp]
	lea	edx, DWORD PTR [edx+eax+1518500249]
	mov	DWORD PTR _a$[ebp], edx
	mov	eax, DWORD PTR _c$[ebp]
	rol	eax, 30					; 0000001eH
	mov	DWORD PTR _c$[ebp], eax
	jmp	$LN15@Sha1_Updat
$LN14@Sha1_Updat:
; Line 120
	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	mov	DWORD PTR _W$[ebp+60], edx
	mov	eax, DWORD PTR _a$[ebp]
	rol	eax, 5
	mov	ecx, DWORD PTR _c$[ebp]
	xor	ecx, DWORD PTR _d$[ebp]
	and	ecx, DWORD PTR _b$[ebp]
	xor	ecx, DWORD PTR _d$[ebp]
	add	ecx, DWORD PTR _W$[ebp+60]
	add	eax, DWORD PTR _e$[ebp]
	lea	edx, DWORD PTR [eax+ecx+1518500249]
	mov	DWORD PTR _e$[ebp], edx
	mov	eax, DWORD PTR _b$[ebp]
	rol	eax, 30					; 0000001eH
	mov	DWORD PTR _b$[ebp], eax
	mov	ecx, DWORD PTR _W$[ebp+52]
	xor	ecx, DWORD PTR _W$[ebp+32]
	xor	ecx, DWORD PTR _W$[ebp+8]
	xor	ecx, DWORD PTR _W$[ebp]
	rol	ecx, 1
	mov	DWORD PTR _W$[ebp+64], ecx
	mov	edx, DWORD PTR _e$[ebp]
	rol	edx, 5
	mov	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	and	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR _W$[ebp+64]
	add	edx, DWORD PTR _d$[ebp]
	lea	ecx, DWORD PTR [edx+eax+1518500249]
	mov	DWORD PTR _d$[ebp], ecx
	mov	edx, DWORD PTR _a$[ebp]
	rol	edx, 30					; 0000001eH
	mov	DWORD PTR _a$[ebp], edx
	mov	eax, DWORD PTR _W$[ebp+56]
	xor	eax, DWORD PTR _W$[ebp+36]
	xor	eax, DWORD PTR _W$[ebp+12]
	xor	eax, DWORD PTR _W$[ebp+4]
	rol	eax, 1
	mov	DWORD PTR _W$[ebp+68], eax
	mov	ecx, DWORD PTR _d$[ebp]
	rol	ecx, 5
	mov	edx, DWORD PTR _a$[ebp]
	xor	edx, DWORD PTR _b$[ebp]
	and	edx, DWORD PTR _e$[ebp]
	xor	edx, DWORD PTR _b$[ebp]
	add	edx, DWORD PTR _W$[ebp+68]
	add	ecx, DWORD PTR _c$[ebp]
	lea	eax, DWORD PTR [ecx+edx+1518500249]
	mov	DWORD PTR _c$[ebp], eax
	mov	ecx, DWORD PTR _e$[ebp]
	rol	ecx, 30					; 0000001eH
	mov	DWORD PTR _e$[ebp], ecx
	mov	edx, DWORD PTR _W$[ebp+60]
	xor	edx, DWORD PTR _W$[ebp+40]
	xor	edx, DWORD PTR _W$[ebp+16]
	xor	edx, DWORD PTR _W$[ebp+8]
	rol	edx, 1
	mov	DWORD PTR _W$[ebp+72], edx
	mov	eax, DWORD PTR _c$[ebp]
	rol	eax, 5
	mov	ecx, DWORD PTR _e$[ebp]
	xor	ecx, DWORD PTR _a$[ebp]
	and	ecx, DWORD PTR _d$[ebp]
	xor	ecx, DWORD PTR _a$[ebp]
	add	ecx, DWORD PTR _W$[ebp+72]
	add	eax, DWORD PTR _b$[ebp]
	lea	edx, DWORD PTR [eax+ecx+1518500249]
	mov	DWORD PTR _b$[ebp], edx
	mov	eax, DWORD PTR _d$[ebp]
	rol	eax, 30					; 0000001eH
	mov	DWORD PTR _d$[ebp], eax
	mov	ecx, DWORD PTR _W$[ebp+64]
	xor	ecx, DWORD PTR _W$[ebp+44]
	xor	ecx, DWORD PTR _W$[ebp+20]
	xor	ecx, DWORD PTR _W$[ebp+12]
	rol	ecx, 1
	mov	DWORD PTR _W$[ebp+76], ecx
	mov	edx, DWORD PTR _b$[ebp]
	rol	edx, 5
	mov	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _e$[ebp]
	and	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _e$[ebp]
	add	eax, DWORD PTR _W$[ebp+76]
	add	edx, DWORD PTR _a$[ebp]
	lea	ecx, DWORD PTR [edx+eax+1518500249]
	mov	DWORD PTR _a$[ebp], ecx
	mov	edx, DWORD PTR _c$[ebp]
	rol	edx, 30					; 0000001eH
	mov	DWORD PTR _c$[ebp], edx
; Line 122
	mov	DWORD PTR _i$3583[ebp], 20		; 00000014H
	jmp	SHORT $LN13@Sha1_Updat
$LN12@Sha1_Updat:
	mov	eax, DWORD PTR _i$3583[ebp]
	add	eax, 5
	mov	DWORD PTR _i$3583[ebp], eax
$LN13@Sha1_Updat:
	cmp	DWORD PTR _i$3583[ebp], 40		; 00000028H
	jae	$LN11@Sha1_Updat
	mov	ecx, DWORD PTR _i$3583[ebp]
	mov	edx, DWORD PTR _i$3583[ebp]
	mov	eax, DWORD PTR _W$[ebp+ecx*4-12]
	xor	eax, DWORD PTR _W$[ebp+edx*4-32]
	mov	ecx, DWORD PTR _i$3583[ebp]
	xor	eax, DWORD PTR _W$[ebp+ecx*4-56]
	mov	edx, DWORD PTR _i$3583[ebp]
	xor	eax, DWORD PTR _W$[ebp+edx*4-64]
	rol	eax, 1
	mov	DWORD PTR tv325[ebp], eax
	mov	eax, DWORD PTR _i$3583[ebp]
	mov	ecx, DWORD PTR tv325[ebp]
	mov	DWORD PTR _W$[ebp+eax*4], ecx
	mov	edx, DWORD PTR _a$[ebp]
	rol	edx, 5
	mov	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	add	eax, DWORD PTR tv325[ebp]
	add	edx, DWORD PTR _e$[ebp]
	lea	ecx, DWORD PTR [edx+eax+1859775393]
	mov	DWORD PTR _e$[ebp], ecx
	mov	edx, DWORD PTR _b$[ebp]
	rol	edx, 30					; 0000001eH
	mov	DWORD PTR _b$[ebp], edx
	mov	eax, DWORD PTR _i$3583[ebp]
	mov	ecx, DWORD PTR _i$3583[ebp]
	mov	edx, DWORD PTR _W$[ebp+eax*4-8]
	xor	edx, DWORD PTR _W$[ebp+ecx*4-28]
	mov	eax, DWORD PTR _i$3583[ebp]
	xor	edx, DWORD PTR _W$[ebp+eax*4-52]
	mov	ecx, DWORD PTR _i$3583[ebp]
	xor	edx, DWORD PTR _W$[ebp+ecx*4-60]
	rol	edx, 1
	mov	DWORD PTR tv358[ebp], edx
	mov	edx, DWORD PTR _i$3583[ebp]
	mov	eax, DWORD PTR tv358[ebp]
	mov	DWORD PTR _W$[ebp+edx*4+4], eax
	mov	ecx, DWORD PTR _e$[ebp]
	rol	ecx, 5
	mov	edx, DWORD PTR _a$[ebp]
	xor	edx, DWORD PTR _b$[ebp]
	xor	edx, DWORD PTR _c$[ebp]
	add	edx, DWORD PTR tv358[ebp]
	add	ecx, DWORD PTR _d$[ebp]
	lea	eax, DWORD PTR [ecx+edx+1859775393]
	mov	DWORD PTR _d$[ebp], eax
	mov	ecx, DWORD PTR _a$[ebp]
	rol	ecx, 30					; 0000001eH
	mov	DWORD PTR _a$[ebp], ecx
	mov	edx, DWORD PTR _i$3583[ebp]
	mov	eax, DWORD PTR _i$3583[ebp]
	mov	ecx, DWORD PTR _W$[ebp+edx*4-4]
	xor	ecx, DWORD PTR _W$[ebp+eax*4-24]
	mov	edx, DWORD PTR _i$3583[ebp]
	xor	ecx, DWORD PTR _W$[ebp+edx*4-48]
	mov	eax, DWORD PTR _i$3583[ebp]
	xor	ecx, DWORD PTR _W$[ebp+eax*4-56]
	rol	ecx, 1
	mov	DWORD PTR tv395[ebp], ecx
	mov	ecx, DWORD PTR _i$3583[ebp]
	mov	edx, DWORD PTR tv395[ebp]
	mov	DWORD PTR _W$[ebp+ecx*4+8], edx
	mov	eax, DWORD PTR _d$[ebp]
	rol	eax, 5
	mov	ecx, DWORD PTR _e$[ebp]
	xor	ecx, DWORD PTR _a$[ebp]
	xor	ecx, DWORD PTR _b$[ebp]
	add	ecx, DWORD PTR tv395[ebp]
	add	eax, DWORD PTR _c$[ebp]
	lea	edx, DWORD PTR [eax+ecx+1859775393]
	mov	DWORD PTR _c$[ebp], edx
	mov	eax, DWORD PTR _e$[ebp]
	rol	eax, 30					; 0000001eH
	mov	DWORD PTR _e$[ebp], eax
	mov	ecx, DWORD PTR _i$3583[ebp]
	mov	edx, DWORD PTR _i$3583[ebp]
	mov	eax, DWORD PTR _W$[ebp+ecx*4]
	xor	eax, DWORD PTR _W$[ebp+edx*4-20]
	mov	ecx, DWORD PTR _i$3583[ebp]
	xor	eax, DWORD PTR _W$[ebp+ecx*4-44]
	mov	edx, DWORD PTR _i$3583[ebp]
	xor	eax, DWORD PTR _W$[ebp+edx*4-52]
	rol	eax, 1
	mov	DWORD PTR tv432[ebp], eax
	mov	eax, DWORD PTR _i$3583[ebp]
	mov	ecx, DWORD PTR tv432[ebp]
	mov	DWORD PTR _W$[ebp+eax*4+12], ecx
	mov	edx, DWORD PTR _c$[ebp]
	rol	edx, 5
	mov	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _e$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR tv432[ebp]
	add	edx, DWORD PTR _b$[ebp]
	lea	ecx, DWORD PTR [edx+eax+1859775393]
	mov	DWORD PTR _b$[ebp], ecx
	mov	edx, DWORD PTR _d$[ebp]
	rol	edx, 30					; 0000001eH
	mov	DWORD PTR _d$[ebp], edx
	mov	eax, DWORD PTR _i$3583[ebp]
	mov	ecx, DWORD PTR _i$3583[ebp]
	mov	edx, DWORD PTR _W$[ebp+eax*4+4]
	xor	edx, DWORD PTR _W$[ebp+ecx*4-16]
	mov	eax, DWORD PTR _i$3583[ebp]
	xor	edx, DWORD PTR _W$[ebp+eax*4-40]
	mov	ecx, DWORD PTR _i$3583[ebp]
	xor	edx, DWORD PTR _W$[ebp+ecx*4-48]
	rol	edx, 1
	mov	DWORD PTR tv469[ebp], edx
	mov	edx, DWORD PTR _i$3583[ebp]
	mov	eax, DWORD PTR tv469[ebp]
	mov	DWORD PTR _W$[ebp+edx*4+16], eax
	mov	ecx, DWORD PTR _b$[ebp]
	rol	ecx, 5
	mov	edx, DWORD PTR _c$[ebp]
	xor	edx, DWORD PTR _d$[ebp]
	xor	edx, DWORD PTR _e$[ebp]
	add	edx, DWORD PTR tv469[ebp]
	add	ecx, DWORD PTR _a$[ebp]
	lea	eax, DWORD PTR [ecx+edx+1859775393]
	mov	DWORD PTR _a$[ebp], eax
	mov	ecx, DWORD PTR _c$[ebp]
	rol	ecx, 30					; 0000001eH
	mov	DWORD PTR _c$[ebp], ecx
	jmp	$LN12@Sha1_Updat
$LN11@Sha1_Updat:
; Line 123
	mov	DWORD PTR _i$3587[ebp], 40		; 00000028H
	jmp	SHORT $LN10@Sha1_Updat
$LN9@Sha1_Updat:
	mov	edx, DWORD PTR _i$3587[ebp]
	add	edx, 5
	mov	DWORD PTR _i$3587[ebp], edx
$LN10@Sha1_Updat:
	cmp	DWORD PTR _i$3587[ebp], 60		; 0000003cH
	jae	$LN8@Sha1_Updat
	mov	eax, DWORD PTR _i$3587[ebp]
	mov	ecx, DWORD PTR _i$3587[ebp]
	mov	edx, DWORD PTR _W$[ebp+eax*4-12]
	xor	edx, DWORD PTR _W$[ebp+ecx*4-32]
	mov	eax, DWORD PTR _i$3587[ebp]
	xor	edx, DWORD PTR _W$[ebp+eax*4-56]
	mov	ecx, DWORD PTR _i$3587[ebp]
	xor	edx, DWORD PTR _W$[ebp+ecx*4-64]
	rol	edx, 1
	mov	DWORD PTR tv509[ebp], edx
	mov	edx, DWORD PTR _i$3587[ebp]
	mov	eax, DWORD PTR tv509[ebp]
	mov	DWORD PTR _W$[ebp+edx*4], eax
	mov	ecx, DWORD PTR _a$[ebp]
	rol	ecx, 5
	mov	edx, DWORD PTR _b$[ebp]
	or	edx, DWORD PTR _c$[ebp]
	and	edx, DWORD PTR _d$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	and	eax, DWORD PTR _c$[ebp]
	or	eax, edx
	add	eax, DWORD PTR tv509[ebp]
	add	ecx, DWORD PTR _e$[ebp]
	lea	ecx, DWORD PTR [ecx+eax-1894007588]
	mov	DWORD PTR _e$[ebp], ecx
	mov	edx, DWORD PTR _b$[ebp]
	rol	edx, 30					; 0000001eH
	mov	DWORD PTR _b$[ebp], edx
	mov	eax, DWORD PTR _i$3587[ebp]
	mov	ecx, DWORD PTR _i$3587[ebp]
	mov	edx, DWORD PTR _W$[ebp+eax*4-8]
	xor	edx, DWORD PTR _W$[ebp+ecx*4-28]
	mov	eax, DWORD PTR _i$3587[ebp]
	xor	edx, DWORD PTR _W$[ebp+eax*4-52]
	mov	ecx, DWORD PTR _i$3587[ebp]
	xor	edx, DWORD PTR _W$[ebp+ecx*4-60]
	rol	edx, 1
	mov	DWORD PTR tv544[ebp], edx
	mov	edx, DWORD PTR _i$3587[ebp]
	mov	eax, DWORD PTR tv544[ebp]
	mov	DWORD PTR _W$[ebp+edx*4+4], eax
	mov	ecx, DWORD PTR _e$[ebp]
	rol	ecx, 5
	mov	edx, DWORD PTR _a$[ebp]
	or	edx, DWORD PTR _b$[ebp]
	and	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR _a$[ebp]
	and	eax, DWORD PTR _b$[ebp]
	or	eax, edx
	add	eax, DWORD PTR tv544[ebp]
	add	ecx, DWORD PTR _d$[ebp]
	lea	ecx, DWORD PTR [ecx+eax-1894007588]
	mov	DWORD PTR _d$[ebp], ecx
	mov	edx, DWORD PTR _a$[ebp]
	rol	edx, 30					; 0000001eH
	mov	DWORD PTR _a$[ebp], edx
	mov	eax, DWORD PTR _i$3587[ebp]
	mov	ecx, DWORD PTR _i$3587[ebp]
	mov	edx, DWORD PTR _W$[ebp+eax*4-4]
	xor	edx, DWORD PTR _W$[ebp+ecx*4-24]
	mov	eax, DWORD PTR _i$3587[ebp]
	xor	edx, DWORD PTR _W$[ebp+eax*4-48]
	mov	ecx, DWORD PTR _i$3587[ebp]
	xor	edx, DWORD PTR _W$[ebp+ecx*4-56]
	rol	edx, 1
	mov	DWORD PTR tv583[ebp], edx
	mov	edx, DWORD PTR _i$3587[ebp]
	mov	eax, DWORD PTR tv583[ebp]
	mov	DWORD PTR _W$[ebp+edx*4+8], eax
	mov	ecx, DWORD PTR _d$[ebp]
	rol	ecx, 5
	mov	edx, DWORD PTR _e$[ebp]
	or	edx, DWORD PTR _a$[ebp]
	and	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR _e$[ebp]
	and	eax, DWORD PTR _a$[ebp]
	or	eax, edx
	add	eax, DWORD PTR tv583[ebp]
	add	ecx, DWORD PTR _c$[ebp]
	lea	ecx, DWORD PTR [ecx+eax-1894007588]
	mov	DWORD PTR _c$[ebp], ecx
	mov	edx, DWORD PTR _e$[ebp]
	rol	edx, 30					; 0000001eH
	mov	DWORD PTR _e$[ebp], edx
	mov	eax, DWORD PTR _i$3587[ebp]
	mov	ecx, DWORD PTR _i$3587[ebp]
	mov	edx, DWORD PTR _W$[ebp+eax*4]
	xor	edx, DWORD PTR _W$[ebp+ecx*4-20]
	mov	eax, DWORD PTR _i$3587[ebp]
	xor	edx, DWORD PTR _W$[ebp+eax*4-44]
	mov	ecx, DWORD PTR _i$3587[ebp]
	xor	edx, DWORD PTR _W$[ebp+ecx*4-52]
	rol	edx, 1
	mov	DWORD PTR tv622[ebp], edx
	mov	edx, DWORD PTR _i$3587[ebp]
	mov	eax, DWORD PTR tv622[ebp]
	mov	DWORD PTR _W$[ebp+edx*4+12], eax
	mov	ecx, DWORD PTR _c$[ebp]
	rol	ecx, 5
	mov	edx, DWORD PTR _d$[ebp]
	or	edx, DWORD PTR _e$[ebp]
	and	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _d$[ebp]
	and	eax, DWORD PTR _e$[ebp]
	or	eax, edx
	add	eax, DWORD PTR tv622[ebp]
	add	ecx, DWORD PTR _b$[ebp]
	lea	ecx, DWORD PTR [ecx+eax-1894007588]
	mov	DWORD PTR _b$[ebp], ecx
	mov	edx, DWORD PTR _d$[ebp]
	rol	edx, 30					; 0000001eH
	mov	DWORD PTR _d$[ebp], edx
	mov	eax, DWORD PTR _i$3587[ebp]
	mov	ecx, DWORD PTR _i$3587[ebp]
	mov	edx, DWORD PTR _W$[ebp+eax*4+4]
	xor	edx, DWORD PTR _W$[ebp+ecx*4-16]
	mov	eax, DWORD PTR _i$3587[ebp]
	xor	edx, DWORD PTR _W$[ebp+eax*4-40]
	mov	ecx, DWORD PTR _i$3587[ebp]
	xor	edx, DWORD PTR _W$[ebp+ecx*4-48]
	rol	edx, 1
	mov	DWORD PTR tv661[ebp], edx
	mov	edx, DWORD PTR _i$3587[ebp]
	mov	eax, DWORD PTR tv661[ebp]
	mov	DWORD PTR _W$[ebp+edx*4+16], eax
	mov	ecx, DWORD PTR _b$[ebp]
	rol	ecx, 5
	mov	edx, DWORD PTR _c$[ebp]
	or	edx, DWORD PTR _d$[ebp]
	and	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, DWORD PTR _d$[ebp]
	or	eax, edx
	add	eax, DWORD PTR tv661[ebp]
	add	ecx, DWORD PTR _a$[ebp]
	lea	ecx, DWORD PTR [ecx+eax-1894007588]
	mov	DWORD PTR _a$[ebp], ecx
	mov	edx, DWORD PTR _c$[ebp]
	rol	edx, 30					; 0000001eH
	mov	DWORD PTR _c$[ebp], edx
	jmp	$LN9@Sha1_Updat
$LN8@Sha1_Updat:
; Line 124
	mov	DWORD PTR _i$3591[ebp], 60		; 0000003cH
	jmp	SHORT $LN7@Sha1_Updat
$LN6@Sha1_Updat:
	mov	eax, DWORD PTR _i$3591[ebp]
	add	eax, 5
	mov	DWORD PTR _i$3591[ebp], eax
$LN7@Sha1_Updat:
	cmp	DWORD PTR _i$3591[ebp], 80		; 00000050H
	jae	$LN5@Sha1_Updat
	mov	ecx, DWORD PTR _i$3591[ebp]
	mov	edx, DWORD PTR _i$3591[ebp]
	mov	eax, DWORD PTR _W$[ebp+ecx*4-12]
	xor	eax, DWORD PTR _W$[ebp+edx*4-32]
	mov	ecx, DWORD PTR _i$3591[ebp]
	xor	eax, DWORD PTR _W$[ebp+ecx*4-56]
	mov	edx, DWORD PTR _i$3591[ebp]
	xor	eax, DWORD PTR _W$[ebp+edx*4-64]
	rol	eax, 1
	mov	DWORD PTR tv699[ebp], eax
	mov	eax, DWORD PTR _i$3591[ebp]
	mov	ecx, DWORD PTR tv699[ebp]
	mov	DWORD PTR _W$[ebp+eax*4], ecx
	mov	edx, DWORD PTR _a$[ebp]
	rol	edx, 5
	mov	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	add	eax, DWORD PTR tv699[ebp]
	add	edx, DWORD PTR _e$[ebp]
	lea	ecx, DWORD PTR [edx+eax-899497514]
	mov	DWORD PTR _e$[ebp], ecx
	mov	edx, DWORD PTR _b$[ebp]
	rol	edx, 30					; 0000001eH
	mov	DWORD PTR _b$[ebp], edx
	mov	eax, DWORD PTR _i$3591[ebp]
	mov	ecx, DWORD PTR _i$3591[ebp]
	mov	edx, DWORD PTR _W$[ebp+eax*4-8]
	xor	edx, DWORD PTR _W$[ebp+ecx*4-28]
	mov	eax, DWORD PTR _i$3591[ebp]
	xor	edx, DWORD PTR _W$[ebp+eax*4-52]
	mov	ecx, DWORD PTR _i$3591[ebp]
	xor	edx, DWORD PTR _W$[ebp+ecx*4-60]
	rol	edx, 1
	mov	DWORD PTR tv732[ebp], edx
	mov	edx, DWORD PTR _i$3591[ebp]
	mov	eax, DWORD PTR tv732[ebp]
	mov	DWORD PTR _W$[ebp+edx*4+4], eax
	mov	ecx, DWORD PTR _e$[ebp]
	rol	ecx, 5
	mov	edx, DWORD PTR _a$[ebp]
	xor	edx, DWORD PTR _b$[ebp]
	xor	edx, DWORD PTR _c$[ebp]
	add	edx, DWORD PTR tv732[ebp]
	add	ecx, DWORD PTR _d$[ebp]
	lea	eax, DWORD PTR [ecx+edx-899497514]
	mov	DWORD PTR _d$[ebp], eax
	mov	ecx, DWORD PTR _a$[ebp]
	rol	ecx, 30					; 0000001eH
	mov	DWORD PTR _a$[ebp], ecx
	mov	edx, DWORD PTR _i$3591[ebp]
	mov	eax, DWORD PTR _i$3591[ebp]
	mov	ecx, DWORD PTR _W$[ebp+edx*4-4]
	xor	ecx, DWORD PTR _W$[ebp+eax*4-24]
	mov	edx, DWORD PTR _i$3591[ebp]
	xor	ecx, DWORD PTR _W$[ebp+edx*4-48]
	mov	eax, DWORD PTR _i$3591[ebp]
	xor	ecx, DWORD PTR _W$[ebp+eax*4-56]
	rol	ecx, 1
	mov	DWORD PTR tv769[ebp], ecx
	mov	ecx, DWORD PTR _i$3591[ebp]
	mov	edx, DWORD PTR tv769[ebp]
	mov	DWORD PTR _W$[ebp+ecx*4+8], edx
	mov	eax, DWORD PTR _d$[ebp]
	rol	eax, 5
	mov	ecx, DWORD PTR _e$[ebp]
	xor	ecx, DWORD PTR _a$[ebp]
	xor	ecx, DWORD PTR _b$[ebp]
	add	ecx, DWORD PTR tv769[ebp]
	add	eax, DWORD PTR _c$[ebp]
	lea	edx, DWORD PTR [eax+ecx-899497514]
	mov	DWORD PTR _c$[ebp], edx
	mov	eax, DWORD PTR _e$[ebp]
	rol	eax, 30					; 0000001eH
	mov	DWORD PTR _e$[ebp], eax
	mov	ecx, DWORD PTR _i$3591[ebp]
	mov	edx, DWORD PTR _i$3591[ebp]
	mov	eax, DWORD PTR _W$[ebp+ecx*4]
	xor	eax, DWORD PTR _W$[ebp+edx*4-20]
	mov	ecx, DWORD PTR _i$3591[ebp]
	xor	eax, DWORD PTR _W$[ebp+ecx*4-44]
	mov	edx, DWORD PTR _i$3591[ebp]
	xor	eax, DWORD PTR _W$[ebp+edx*4-52]
	rol	eax, 1
	mov	DWORD PTR tv806[ebp], eax
	mov	eax, DWORD PTR _i$3591[ebp]
	mov	ecx, DWORD PTR tv806[ebp]
	mov	DWORD PTR _W$[ebp+eax*4+12], ecx
	mov	edx, DWORD PTR _c$[ebp]
	rol	edx, 5
	mov	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _e$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR tv806[ebp]
	add	edx, DWORD PTR _b$[ebp]
	lea	ecx, DWORD PTR [edx+eax-899497514]
	mov	DWORD PTR _b$[ebp], ecx
	mov	edx, DWORD PTR _d$[ebp]
	rol	edx, 30					; 0000001eH
	mov	DWORD PTR _d$[ebp], edx
	mov	eax, DWORD PTR _i$3591[ebp]
	mov	ecx, DWORD PTR _i$3591[ebp]
	mov	edx, DWORD PTR _W$[ebp+eax*4+4]
	xor	edx, DWORD PTR _W$[ebp+ecx*4-16]
	mov	eax, DWORD PTR _i$3591[ebp]
	xor	edx, DWORD PTR _W$[ebp+eax*4-40]
	mov	ecx, DWORD PTR _i$3591[ebp]
	xor	edx, DWORD PTR _W$[ebp+ecx*4-48]
	rol	edx, 1
	mov	DWORD PTR tv843[ebp], edx
	mov	edx, DWORD PTR _i$3591[ebp]
	mov	eax, DWORD PTR tv843[ebp]
	mov	DWORD PTR _W$[ebp+edx*4+16], eax
	mov	ecx, DWORD PTR _b$[ebp]
	rol	ecx, 5
	mov	edx, DWORD PTR _c$[ebp]
	xor	edx, DWORD PTR _d$[ebp]
	xor	edx, DWORD PTR _e$[ebp]
	add	edx, DWORD PTR tv843[ebp]
	add	ecx, DWORD PTR _a$[ebp]
	lea	eax, DWORD PTR [ecx+edx-899497514]
	mov	DWORD PTR _a$[ebp], eax
	mov	ecx, DWORD PTR _c$[ebp]
	rol	ecx, 30					; 0000001eH
	mov	DWORD PTR _c$[ebp], ecx
	jmp	$LN6@Sha1_Updat
$LN5@Sha1_Updat:
; Line 126
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 127
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 128
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 129
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+12]
	add	eax, DWORD PTR _d$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 130
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+16]
	add	eax, DWORD PTR _e$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 132
	cmp	DWORD PTR _returnRes$[ebp], 0
	je	SHORT $LN17@Sha1_Updat
; Line 135
	mov	DWORD PTR _i$3596[ebp], 0
	jmp	SHORT $LN3@Sha1_Updat
$LN2@Sha1_Updat:
	mov	edx, DWORD PTR _i$3596[ebp]
	add	edx, 1
	mov	DWORD PTR _i$3596[ebp], edx
$LN3@Sha1_Updat:
	cmp	DWORD PTR _i$3596[ebp], 16		; 00000010H
	jae	SHORT $LN17@Sha1_Updat
; Line 136
	mov	eax, DWORD PTR _i$3596[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR _i$3596[ebp]
	mov	edx, DWORD PTR _W$[ebp+edx*4+256]
	mov	DWORD PTR [ecx+eax*4], edx
	jmp	SHORT $LN2@Sha1_Updat
$LN17@Sha1_Updat:
; Line 138
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN21@Sha1_Updat
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	3
$LN21@Sha1_Updat:
	DD	1
	DD	$LN20@Sha1_Updat
$LN20@Sha1_Updat:
	DD	-348					; fffffea4H
	DD	320					; 00000140H
	DD	$LN19@Sha1_Updat
$LN19@Sha1_Updat:
	DB	87					; 00000057H
	DB	0
_Sha1_UpdateBlock_Rar@12 ENDP
_TEXT	ENDS
PUBLIC	_Sha1_Update@12
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_w$3638 = -20						; size = 4
_i$3625 = -16						; size = 4
_w$3612 = -12						; size = 4
_pos2$ = -8						; size = 4
_pos$ = -4						; size = 4
_p$ = 8							; size = 4
_data$ = 12						; size = 4
_size$ = 16						; size = 4
_Sha1_Update@12 PROC
; Line 143
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 145
	cmp	DWORD PTR _size$[ebp], 0
	jne	SHORT $LN17@Sha1_Updat@2
; Line 146
	jmp	$LN18@Sha1_Updat@2
$LN17@Sha1_Updat@2:
; Line 147
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	and	ecx, 63					; 0000003fH
	mov	DWORD PTR _pos$[ebp], ecx
; Line 148
	mov	edx, DWORD PTR _size$[ebp]
	xor	eax, eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	edx, DWORD PTR [ecx+24]
	adc	eax, DWORD PTR [ecx+28]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+24], edx
	mov	DWORD PTR [ecx+28], eax
; Line 149
	mov	edx, DWORD PTR _pos$[ebp]
	and	edx, 3
	mov	DWORD PTR _pos2$[ebp], edx
; Line 150
	mov	eax, DWORD PTR _pos$[ebp]
	shr	eax, 2
	mov	DWORD PTR _pos$[ebp], eax
; Line 152
	cmp	DWORD PTR _pos2$[ebp], 0
	je	$LN13@Sha1_Updat@2
; Line 154
	mov	ecx, DWORD PTR _data$[ebp]
	movzx	edx, BYTE PTR [ecx]
	shl	edx, 24					; 00000018H
	mov	DWORD PTR _w$3612[ebp], edx
; Line 155
	mov	eax, DWORD PTR _size$[ebp]
	sub	eax, 1
	mov	DWORD PTR _size$[ebp], eax
	je	SHORT $LN15@Sha1_Updat@2
	cmp	DWORD PTR _pos2$[ebp], 3
	jae	SHORT $LN15@Sha1_Updat@2
; Line 157
	mov	ecx, DWORD PTR _data$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	shl	edx, 16					; 00000010H
	or	edx, DWORD PTR _w$3612[ebp]
	mov	DWORD PTR _w$3612[ebp], edx
; Line 158
	mov	eax, DWORD PTR _size$[ebp]
	sub	eax, 1
	mov	DWORD PTR _size$[ebp], eax
	je	SHORT $LN15@Sha1_Updat@2
	cmp	DWORD PTR _pos2$[ebp], 2
	jae	SHORT $LN15@Sha1_Updat@2
; Line 160
	mov	ecx, DWORD PTR _data$[ebp]
	movzx	edx, BYTE PTR [ecx+2]
	shl	edx, 8
	or	edx, DWORD PTR _w$3612[ebp]
	mov	DWORD PTR _w$3612[ebp], edx
; Line 161
	mov	eax, DWORD PTR _size$[ebp]
	sub	eax, 1
	mov	DWORD PTR _size$[ebp], eax
$LN15@Sha1_Updat@2:
; Line 164
	mov	ecx, 4
	sub	ecx, DWORD PTR _pos2$[ebp]
	add	ecx, DWORD PTR _data$[ebp]
	mov	DWORD PTR _data$[ebp], ecx
; Line 165
	mov	ecx, DWORD PTR _pos2$[ebp]
	shl	ecx, 3
	mov	edx, DWORD PTR _w$3612[ebp]
	shr	edx, cl
	mov	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	or	edx, DWORD PTR [ecx+eax*4+32]
	mov	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+eax*4+32], edx
	mov	edx, DWORD PTR _pos$[ebp]
	add	edx, 1
	mov	DWORD PTR _pos$[ebp], edx
$LN13@Sha1_Updat@2:
; Line 170
	cmp	DWORD PTR _pos$[ebp], 16		; 00000010H
	jne	SHORT $LN11@Sha1_Updat@2
$LN10@Sha1_Updat@2:
; Line 175
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 32					; 00000020H
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_Sha1_GetBlockDigest@12
; Line 176
	cmp	DWORD PTR _size$[ebp], 64		; 00000040H
	jae	SHORT $LN8@Sha1_Updat@2
; Line 177
	jmp	SHORT $LN9@Sha1_Updat@2
$LN8@Sha1_Updat@2:
; Line 178
	mov	eax, DWORD PTR _size$[ebp]
	sub	eax, 64					; 00000040H
	mov	DWORD PTR _size$[ebp], eax
; Line 179
	mov	DWORD PTR _i$3625[ebp], 0
	jmp	SHORT $LN7@Sha1_Updat@2
$LN6@Sha1_Updat@2:
	mov	ecx, DWORD PTR _i$3625[ebp]
	add	ecx, 2
	mov	DWORD PTR _i$3625[ebp], ecx
$LN7@Sha1_Updat@2:
	cmp	DWORD PTR _i$3625[ebp], 16		; 00000010H
	jae	SHORT $LN5@Sha1_Updat@2
; Line 181
	mov	edx, DWORD PTR _data$[ebp]
	mov	eax, DWORD PTR [edx]
	bswap	eax
	mov	ecx, DWORD PTR _i$3625[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+ecx*4+32], eax
; Line 182
	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	bswap	ecx
	mov	edx, DWORD PTR _i$3625[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+edx*4+36], ecx
; Line 183
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, 8
	mov	DWORD PTR _data$[ebp], ecx
; Line 184
	jmp	SHORT $LN6@Sha1_Updat@2
$LN5@Sha1_Updat@2:
; Line 185
	jmp	SHORT $LN10@Sha1_Updat@2
$LN9@Sha1_Updat@2:
; Line 186
	mov	DWORD PTR _pos$[ebp], 0
$LN11@Sha1_Updat@2:
; Line 188
	cmp	DWORD PTR _size$[ebp], 4
	jae	SHORT $LN4@Sha1_Updat@2
; Line 189
	jmp	SHORT $LN12@Sha1_Updat@2
$LN4@Sha1_Updat@2:
; Line 191
	mov	edx, DWORD PTR _data$[ebp]
	mov	eax, DWORD PTR [edx]
	bswap	eax
	mov	ecx, DWORD PTR _pos$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+ecx*4+32], eax
; Line 192
	mov	eax, DWORD PTR _data$[ebp]
	add	eax, 4
	mov	DWORD PTR _data$[ebp], eax
; Line 193
	mov	ecx, DWORD PTR _size$[ebp]
	sub	ecx, 4
	mov	DWORD PTR _size$[ebp], ecx
; Line 194
	mov	edx, DWORD PTR _pos$[ebp]
	add	edx, 1
	mov	DWORD PTR _pos$[ebp], edx
; Line 195
	jmp	$LN13@Sha1_Updat@2
$LN12@Sha1_Updat@2:
; Line 197
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN18@Sha1_Updat@2
; Line 199
	mov	eax, DWORD PTR _data$[ebp]
	movzx	ecx, BYTE PTR [eax]
	shl	ecx, 24					; 00000018H
	mov	DWORD PTR _w$3638[ebp], ecx
; Line 200
	cmp	DWORD PTR _size$[ebp], 1
	jbe	SHORT $LN2@Sha1_Updat@2
; Line 202
	mov	edx, DWORD PTR _data$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	shl	eax, 16					; 00000010H
	or	eax, DWORD PTR _w$3638[ebp]
	mov	DWORD PTR _w$3638[ebp], eax
; Line 203
	cmp	DWORD PTR _size$[ebp], 2
	jbe	SHORT $LN2@Sha1_Updat@2
; Line 204
	mov	ecx, DWORD PTR _data$[ebp]
	movzx	edx, BYTE PTR [ecx+2]
	shl	edx, 8
	or	edx, DWORD PTR _w$3638[ebp]
	mov	DWORD PTR _w$3638[ebp], edx
$LN2@Sha1_Updat@2:
; Line 206
	mov	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _w$3638[ebp]
	mov	DWORD PTR [ecx+eax*4+32], edx
$LN18@Sha1_Updat@2:
; Line 208
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_Sha1_Update@12 ENDP
_TEXT	ENDS
PUBLIC	_Sha1_Update_Rar@16
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv72 = -36						; size = 4
_prev$3671 = -32					; size = 4
_d$3670 = -28						; size = 4
_i$3666 = -24						; size = 4
_ref$3662 = -20						; size = 4
_v$3660 = -16						; size = 4
_pos2$3659 = -12					; size = 4
_pos$ = -8						; size = 4
_returnRes$ = -4					; size = 4
_p$ = 8							; size = 4
_data$ = 12						; size = 4
_size$ = 16						; size = 4
_rar350Mode$ = 20					; size = 4
_Sha1_Update_Rar@16 PROC
; Line 211
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 212
	mov	DWORD PTR _returnRes$[ebp], 0
; Line 214
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	and	ecx, 63					; 0000003fH
	mov	DWORD PTR _pos$[ebp], ecx
; Line 215
	mov	edx, DWORD PTR _size$[ebp]
	xor	eax, eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	edx, DWORD PTR [ecx+24]
	adc	eax, DWORD PTR [ecx+28]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+24], edx
	mov	DWORD PTR [ecx+28], eax
$LN8@Sha1_Updat@3:
; Line 217
	mov	edx, DWORD PTR _size$[ebp]
	mov	DWORD PTR tv72[ebp], edx
	mov	eax, DWORD PTR _size$[ebp]
	sub	eax, 1
	mov	DWORD PTR _size$[ebp], eax
	cmp	DWORD PTR tv72[ebp], 0
	je	$LN9@Sha1_Updat@3
; Line 219
	mov	ecx, DWORD PTR _pos$[ebp]
	and	ecx, 3
	mov	DWORD PTR _pos2$3659[ebp], ecx
; Line 220
	mov	edx, DWORD PTR _data$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, 3
	sub	ecx, DWORD PTR _pos2$3659[ebp]
	shl	ecx, 3
	shl	eax, cl
	mov	DWORD PTR _v$3660[ebp], eax
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, 1
	mov	DWORD PTR _data$[ebp], ecx
; Line 221
	mov	edx, DWORD PTR _pos$[ebp]
	shr	edx, 2
	mov	eax, DWORD PTR _p$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4+32]
	mov	DWORD PTR _ref$3662[ebp], ecx
; Line 222
	mov	edx, DWORD PTR _pos$[ebp]
	add	edx, 1
	mov	DWORD PTR _pos$[ebp], edx
; Line 223
	cmp	DWORD PTR _pos2$3659[ebp], 0
	jne	SHORT $LN6@Sha1_Updat@3
; Line 225
	mov	eax, DWORD PTR _ref$3662[ebp]
	mov	ecx, DWORD PTR _v$3660[ebp]
	mov	DWORD PTR [eax], ecx
; Line 226
	jmp	SHORT $LN8@Sha1_Updat@3
$LN6@Sha1_Updat@3:
; Line 228
	mov	edx, DWORD PTR _ref$3662[ebp]
	mov	eax, DWORD PTR [edx]
	or	eax, DWORD PTR _v$3660[ebp]
	mov	ecx, DWORD PTR _ref$3662[ebp]
	mov	DWORD PTR [ecx], eax
; Line 230
	cmp	DWORD PTR _pos$[ebp], 64		; 00000040H
	jne	SHORT $LN5@Sha1_Updat@3
; Line 232
	mov	DWORD PTR _pos$[ebp], 0
; Line 233
	mov	edx, DWORD PTR _returnRes$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 32					; 00000020H
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_Sha1_UpdateBlock_Rar@12
; Line 234
	cmp	DWORD PTR _returnRes$[ebp], 0
	je	SHORT $LN4@Sha1_Updat@3
; Line 237
	mov	DWORD PTR _i$3666[ebp], 0
	jmp	SHORT $LN3@Sha1_Updat@3
$LN2@Sha1_Updat@3:
	mov	edx, DWORD PTR _i$3666[ebp]
	add	edx, 1
	mov	DWORD PTR _i$3666[ebp], edx
$LN3@Sha1_Updat@3:
	cmp	DWORD PTR _i$3666[ebp], 16		; 00000010H
	jae	SHORT $LN4@Sha1_Updat@3
; Line 239
	mov	eax, DWORD PTR _i$3666[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+32]
	mov	DWORD PTR _d$3670[ebp], edx
; Line 240
	mov	eax, DWORD PTR _i$3666[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4-64]
	mov	DWORD PTR _prev$3671[ebp], edx
; Line 241
	mov	eax, DWORD PTR _prev$3671[ebp]
	mov	ecx, DWORD PTR _d$3670[ebp]
	mov	DWORD PTR [eax], ecx
; Line 242
	jmp	SHORT $LN2@Sha1_Updat@3
$LN4@Sha1_Updat@3:
; Line 244
	mov	edx, DWORD PTR _rar350Mode$[ebp]
	mov	DWORD PTR _returnRes$[ebp], edx
$LN5@Sha1_Updat@3:
; Line 246
	jmp	$LN8@Sha1_Updat@3
$LN9@Sha1_Updat@3:
; Line 247
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_Sha1_Update_Rar@16 ENDP
_TEXT	ENDS
PUBLIC	_Sha1_Final@8
EXTRN	__aullshr:PROC
EXTRN	__allshl:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_v$3695 = -28						; size = 4
_i$ = -24						; size = 4
_w$ = -20						; size = 4
_numBits$ = -16						; size = 8
_pos2$ = -8						; size = 4
_pos$ = -4						; size = 4
_p$ = 8							; size = 4
_digest$ = 12						; size = 4
_Sha1_Final@8 PROC
; Line 250
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 251
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	and	ecx, 63					; 0000003fH
	mov	DWORD PTR _pos$[ebp], ecx
; Line 252
	mov	edx, DWORD PTR _pos$[ebp]
	and	edx, 3
	mov	DWORD PTR _pos2$[ebp], edx
; Line 257
	mov	eax, DWORD PTR _pos$[ebp]
	shr	eax, 2
	mov	DWORD PTR _pos$[ebp], eax
; Line 259
	mov	DWORD PTR _w$[ebp], 0
; Line 260
	cmp	DWORD PTR _pos2$[ebp], 0
	je	SHORT $LN7@Sha1_Final
; Line 261
	mov	ecx, DWORD PTR _pos$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+32]
	mov	DWORD PTR _w$[ebp], eax
$LN7@Sha1_Final:
; Line 262
	mov	ecx, DWORD PTR _pos2$[ebp]
	shl	ecx, 3
	mov	edx, -2147483648			; 80000000H
	shr	edx, cl
	or	edx, DWORD PTR _w$[ebp]
	mov	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+eax*4+32], edx
	mov	edx, DWORD PTR _pos$[ebp]
	add	edx, 1
	mov	DWORD PTR _pos$[ebp], edx
$LN6@Sha1_Final:
; Line 264
	cmp	DWORD PTR _pos$[ebp], 14		; 0000000eH
	je	SHORT $LN5@Sha1_Final
; Line 266
	mov	eax, DWORD PTR _pos$[ebp]
	and	eax, 15					; 0000000fH
	mov	DWORD PTR _pos$[ebp], eax
; Line 267
	jne	SHORT $LN4@Sha1_Final
; Line 268
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 32					; 00000020H
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_Sha1_GetBlockDigest@12
$LN4@Sha1_Final:
; Line 269
	mov	ecx, DWORD PTR _pos$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+ecx*4+32], 0
	mov	eax, DWORD PTR _pos$[ebp]
	add	eax, 1
	mov	DWORD PTR _pos$[ebp], eax
; Line 270
	jmp	SHORT $LN6@Sha1_Final
$LN5@Sha1_Final:
; Line 272
	mov	ecx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [ecx+24]
	mov	edx, DWORD PTR [ecx+28]
	mov	cl, 3
	call	__allshl
	mov	DWORD PTR _numBits$[ebp], eax
	mov	DWORD PTR _numBits$[ebp+4], edx
; Line 273
	mov	eax, DWORD PTR _numBits$[ebp]
	mov	edx, DWORD PTR _numBits$[ebp+4]
	mov	cl, 32					; 00000020H
	call	__aullshr
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+88], eax
; Line 274
	mov	eax, DWORD PTR _numBits$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+92], eax
; Line 275
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 32					; 00000020H
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_Sha1_GetBlockDigest@12
; Line 277
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@Sha1_Final
$LN2@Sha1_Final:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN3@Sha1_Final:
	cmp	DWORD PTR _i$[ebp], 5
	jae	SHORT $LN1@Sha1_Final
; Line 279
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _v$3695[ebp], edx
; Line 280
	mov	eax, DWORD PTR _v$3695[ebp]
	bswap	eax
	mov	ecx, DWORD PTR _digest$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 281
	mov	edx, DWORD PTR _digest$[ebp]
	add	edx, 4
	mov	DWORD PTR _digest$[ebp], edx
; Line 282
	jmp	SHORT $LN2@Sha1_Final
$LN1@Sha1_Final:
; Line 284
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_Sha1_Init@4
; Line 285
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_Sha1_Final@8 ENDP
_TEXT	ENDS
PUBLIC	_Sha1_32_PrepareBlock@12
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_numBits$ = -8						; size = 8
_p$ = 8							; size = 4
_block$ = 12						; size = 4
_size$ = 16						; size = 4
_Sha1_32_PrepareBlock@12 PROC
; Line 289
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 290
	mov	eax, DWORD PTR _size$[ebp]
	xor	edx, edx
	mov	ecx, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR [ecx+24]
	adc	edx, DWORD PTR [ecx+28]
	mov	cl, 5
	call	__allshl
	mov	DWORD PTR _numBits$[ebp], eax
	mov	DWORD PTR _numBits$[ebp+4], edx
; Line 291
	mov	eax, DWORD PTR _numBits$[ebp]
	mov	edx, DWORD PTR _numBits$[ebp+4]
	mov	cl, 32					; 00000020H
	call	__aullshr
	mov	edx, DWORD PTR _block$[ebp]
	mov	DWORD PTR [edx+56], eax
; Line 292
	mov	eax, DWORD PTR _numBits$[ebp]
	mov	ecx, DWORD PTR _block$[ebp]
	mov	DWORD PTR [ecx+60], eax
; Line 293
	mov	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR _block$[ebp]
	mov	DWORD PTR [eax+edx*4], -2147483648	; 80000000H
	mov	ecx, DWORD PTR _size$[ebp]
	add	ecx, 1
	mov	DWORD PTR _size$[ebp], ecx
$LN2@Sha1_32_Pr:
; Line 294
	cmp	DWORD PTR _size$[ebp], 14		; 0000000eH
	je	SHORT $LN3@Sha1_32_Pr
; Line 295
	mov	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR _block$[ebp]
	mov	DWORD PTR [eax+edx*4], 0
	mov	ecx, DWORD PTR _size$[ebp]
	add	ecx, 1
	mov	DWORD PTR _size$[ebp], ecx
	jmp	SHORT $LN2@Sha1_32_Pr
$LN3@Sha1_32_Pr:
; Line 296
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_Sha1_32_PrepareBlock@12 ENDP
_TEXT	ENDS
PUBLIC	_Sha1_32_Update@12
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv72 = -8						; size = 4
_pos$ = -4						; size = 4
_p$ = 8							; size = 4
_data$ = 12						; size = 4
_size$ = 16						; size = 4
_Sha1_32_Update@12 PROC
; Line 299
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 300
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	and	ecx, 15					; 0000000fH
	mov	DWORD PTR _pos$[ebp], ecx
; Line 301
	mov	edx, DWORD PTR _size$[ebp]
	xor	eax, eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	edx, DWORD PTR [ecx+24]
	adc	eax, DWORD PTR [ecx+28]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+24], edx
	mov	DWORD PTR [ecx+28], eax
$LN3@Sha1_32_Up:
; Line 302
	mov	edx, DWORD PTR _size$[ebp]
	mov	DWORD PTR tv72[ebp], edx
	mov	eax, DWORD PTR _size$[ebp]
	sub	eax, 1
	mov	DWORD PTR _size$[ebp], eax
	cmp	DWORD PTR tv72[ebp], 0
	je	SHORT $LN4@Sha1_32_Up
; Line 304
	mov	ecx, DWORD PTR _pos$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _data$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx+ecx*4+32], eax
	mov	ecx, DWORD PTR _pos$[ebp]
	add	ecx, 1
	mov	DWORD PTR _pos$[ebp], ecx
	mov	edx, DWORD PTR _data$[ebp]
	add	edx, 4
	mov	DWORD PTR _data$[ebp], edx
; Line 305
	cmp	DWORD PTR _pos$[ebp], 16		; 00000010H
	jne	SHORT $LN1@Sha1_32_Up
; Line 307
	mov	DWORD PTR _pos$[ebp], 0
; Line 308
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 32					; 00000020H
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_Sha1_GetBlockDigest@12
$LN1@Sha1_32_Up:
; Line 310
	jmp	SHORT $LN3@Sha1_32_Up
$LN4@Sha1_32_Up:
; Line 311
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_Sha1_32_Update@12 ENDP
_TEXT	ENDS
PUBLIC	_Sha1_32_Final@8
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_pos$ = -12						; size = 4
_numBits$ = -8						; size = 8
_p$ = 8							; size = 4
_digest$ = 12						; size = 4
_Sha1_32_Final@8 PROC
; Line 314
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 316
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	and	ecx, 15					; 0000000fH
	mov	DWORD PTR _pos$[ebp], ecx
; Line 317
	mov	edx, DWORD PTR _pos$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+edx*4+32], -2147483648	; 80000000H
	mov	ecx, DWORD PTR _pos$[ebp]
	add	ecx, 1
	mov	DWORD PTR _pos$[ebp], ecx
$LN3@Sha1_32_Fi:
; Line 319
	cmp	DWORD PTR _pos$[ebp], 14		; 0000000eH
	je	SHORT $LN2@Sha1_32_Fi
; Line 321
	mov	edx, DWORD PTR _pos$[ebp]
	and	edx, 15					; 0000000fH
	mov	DWORD PTR _pos$[ebp], edx
; Line 322
	jne	SHORT $LN1@Sha1_32_Fi
; Line 323
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 32					; 00000020H
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_Sha1_GetBlockDigest@12
$LN1@Sha1_32_Fi:
; Line 324
	mov	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+eax*4+32], 0
	mov	edx, DWORD PTR _pos$[ebp]
	add	edx, 1
	mov	DWORD PTR _pos$[ebp], edx
; Line 325
	jmp	SHORT $LN3@Sha1_32_Fi
$LN2@Sha1_32_Fi:
; Line 327
	mov	ecx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [ecx+24]
	mov	edx, DWORD PTR [ecx+28]
	mov	cl, 5
	call	__allshl
	mov	DWORD PTR _numBits$[ebp], eax
	mov	DWORD PTR _numBits$[ebp+4], edx
; Line 328
	mov	eax, DWORD PTR _numBits$[ebp]
	mov	edx, DWORD PTR _numBits$[ebp+4]
	mov	cl, 32					; 00000020H
	call	__aullshr
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+88], eax
; Line 329
	mov	eax, DWORD PTR _numBits$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+92], eax
; Line 331
	mov	edx, DWORD PTR _digest$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 32					; 00000020H
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_Sha1_GetBlockDigest@12
; Line 333
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_Sha1_Init@4
; Line 334
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_Sha1_32_Final@8 ENDP
_TEXT	ENDS
END
