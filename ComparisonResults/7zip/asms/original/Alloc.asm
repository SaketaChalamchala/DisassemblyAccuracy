; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\C\Alloc.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_g_LargePageSize
PUBLIC	_g_Alloc
PUBLIC	_g_BigAlloc
_BSS	SEGMENT
_g_LargePageSize DD 01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
$SG80036 DB	'GetLargePageMinimum', 00H
$SG80037 DB	'kernel32.dll', 00H
	ORG $+3
_g_Alloc DD	FLAT:_SzAlloc@8
	DD	FLAT:_SzFree@8
_g_BigAlloc DD	FLAT:_SzBigAlloc@8
	DD	FLAT:_SzBigFree@8
_DATA	ENDS
PUBLIC	_MyAlloc@4
EXTRN	__imp__malloc:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\c\alloc.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_size$ = 8						; size = 4
_MyAlloc@4 PROC
; Line 24
	push	ebp
	mov	ebp, esp
	push	esi
; Line 25
	cmp	DWORD PTR _size$[ebp], 0
	jne	SHORT $LN1@MyAlloc
; Line 26
	xor	eax, eax
	jmp	SHORT $LN2@MyAlloc
$LN1@MyAlloc:
; Line 34
	mov	esi, esp
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@MyAlloc:
; Line 36
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
_MyAlloc@4 ENDP
_TEXT	ENDS
PUBLIC	_MyFree@4
EXTRN	__imp__free:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_address$ = 8						; size = 4
_MyFree@4 PROC
; Line 39
	push	ebp
	mov	ebp, esp
	push	esi
; Line 44
	mov	esi, esp
	mov	eax, DWORD PTR _address$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 45
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
_MyFree@4 ENDP
_TEXT	ENDS
PUBLIC	_MidAlloc@4
EXTRN	__imp__VirtualAlloc@16:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_size$ = 8						; size = 4
_MidAlloc@4 PROC
; Line 50
	push	ebp
	mov	ebp, esp
	push	esi
; Line 51
	cmp	DWORD PTR _size$[ebp], 0
	jne	SHORT $LN1@MidAlloc
; Line 52
	xor	eax, eax
	jmp	SHORT $LN2@MidAlloc
$LN1@MidAlloc:
; Line 56
	mov	esi, esp
	push	4
	push	4096					; 00001000H
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	push	0
	call	DWORD PTR __imp__VirtualAlloc@16
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@MidAlloc:
; Line 57
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
_MidAlloc@4 ENDP
_TEXT	ENDS
PUBLIC	_MidFree@4
EXTRN	__imp__VirtualFree@12:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_address$ = 8						; size = 4
_MidFree@4 PROC
; Line 60
	push	ebp
	mov	ebp, esp
	push	esi
; Line 65
	cmp	DWORD PTR _address$[ebp], 0
	jne	SHORT $LN1@MidFree
; Line 66
	jmp	SHORT $LN2@MidFree
$LN1@MidFree:
; Line 67
	mov	esi, esp
	push	32768					; 00008000H
	push	0
	mov	eax, DWORD PTR _address$[ebp]
	push	eax
	call	DWORD PTR __imp__VirtualFree@12
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@MidFree:
; Line 68
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
_MidFree@4 ENDP
_TEXT	ENDS
PUBLIC	_SetLargePageSize@0
EXTRN	__imp__GetProcAddress@8:PROC
EXTRN	__imp__GetModuleHandleA@4:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_largePageMinimum$ = -8					; size = 4
_size$ = -4						; size = 4
_SetLargePageSize@0 PROC
; Line 80
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	push	edi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 82
	mov	DWORD PTR _size$[ebp], 0
; Line 84
	mov	esi, esp
	push	OFFSET $SG80036
	mov	edi, esp
	push	OFFSET $SG80037
	call	DWORD PTR __imp__GetModuleHandleA@4
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _largePageMinimum$[ebp], eax
; Line 85
	cmp	DWORD PTR _largePageMinimum$[ebp], 0
	jne	SHORT $LN3@SetLargePa
; Line 86
	jmp	SHORT $LN4@SetLargePa
$LN3@SetLargePa:
; Line 87
	mov	esi, esp
	call	DWORD PTR _largePageMinimum$[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _size$[ebp], eax
; Line 88
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN1@SetLargePa
	mov	eax, DWORD PTR _size$[ebp]
	sub	eax, 1
	and	eax, DWORD PTR _size$[ebp]
	je	SHORT $LN2@SetLargePa
$LN1@SetLargePa:
; Line 89
	jmp	SHORT $LN4@SetLargePa
$LN2@SetLargePa:
; Line 90
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR _g_LargePageSize, ecx
$LN4@SetLargePa:
; Line 92
	pop	edi
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_SetLargePageSize@0 ENDP
_TEXT	ENDS
PUBLIC	_BigAlloc@4
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_res$80046 = -4						; size = 4
_size$ = 8						; size = 4
_BigAlloc@4 PROC
; Line 96
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 97
	cmp	DWORD PTR _size$[ebp], 0
	jne	SHORT $LN3@BigAlloc
; Line 98
	xor	eax, eax
	jmp	SHORT $LN4@BigAlloc
$LN3@BigAlloc:
; Line 104
	cmp	DWORD PTR _g_LargePageSize, 0
	je	SHORT $LN2@BigAlloc
	cmp	DWORD PTR _g_LargePageSize, 1073741824	; 40000000H
	ja	SHORT $LN2@BigAlloc
	cmp	DWORD PTR _size$[ebp], 262144		; 00040000H
	jb	SHORT $LN2@BigAlloc
; Line 107
	mov	esi, esp
	push	4
	push	536875008				; 20001000H
	mov	eax, DWORD PTR _g_LargePageSize
	mov	ecx, DWORD PTR _size$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	eax, DWORD PTR _g_LargePageSize
	sub	eax, 1
	not	eax
	and	edx, eax
	push	edx
	push	0
	call	DWORD PTR __imp__VirtualAlloc@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _res$80046[ebp], eax
; Line 108
	cmp	DWORD PTR _res$80046[ebp], 0
	je	SHORT $LN2@BigAlloc
; Line 109
	mov	eax, DWORD PTR _res$80046[ebp]
	jmp	SHORT $LN4@BigAlloc
$LN2@BigAlloc:
; Line 112
	mov	esi, esp
	push	4
	push	4096					; 00001000H
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	push	0
	call	DWORD PTR __imp__VirtualAlloc@16
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@BigAlloc:
; Line 113
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_BigAlloc@4 ENDP
_TEXT	ENDS
PUBLIC	_BigFree@4
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_address$ = 8						; size = 4
_BigFree@4 PROC
; Line 116
	push	ebp
	mov	ebp, esp
	push	esi
; Line 122
	cmp	DWORD PTR _address$[ebp], 0
	jne	SHORT $LN1@BigFree
; Line 123
	jmp	SHORT $LN2@BigFree
$LN1@BigFree:
; Line 124
	mov	esi, esp
	push	32768					; 00008000H
	push	0
	mov	eax, DWORD PTR _address$[ebp]
	push	eax
	call	DWORD PTR __imp__VirtualFree@12
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@BigFree:
; Line 125
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
_BigFree@4 ENDP
; Function compile flags: /Odtp /RTCsu
_p$ = 8						; size = 4
_size$ = 12						; size = 4
_SzAlloc@8 PROC
; Line 130
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	call	_MyAlloc@4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_SzAlloc@8 ENDP
; Function compile flags: /Odtp /RTCsu
_p$ = 8						; size = 4
_address$ = 12						; size = 4
_SzFree@8 PROC
; Line 131
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _address$[ebp]
	push	eax
	call	_MyFree@4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_SzFree@8 ENDP
; Function compile flags: /Odtp /RTCsu
_p$ = 8						; size = 4
_size$ = 12						; size = 4
_SzBigAlloc@8 PROC
; Line 134
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	call	_BigAlloc@4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_SzBigAlloc@8 ENDP
; Function compile flags: /Odtp /RTCsu
_p$ = 8						; size = 4
_address$ = 12						; size = 4
_SzBigFree@8 PROC
; Line 135
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _address$[ebp]
	push	eax
	call	_BigFree@4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_SzBigFree@8 ENDP
_TEXT	ENDS
END
