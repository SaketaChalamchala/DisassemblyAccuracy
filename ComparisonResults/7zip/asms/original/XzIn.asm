; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\C\XzIn.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	__$ArrayPad$
PUBLIC	_Xz_ReadHeader@8
EXTRN	_Xz_ParseHeader@8:PROC
EXTRN	_memcmp:PROC
EXTRN	_XZ_SIG:FWORD
EXTRN	_SeqInStream_Read2@16:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__RTC_CheckEsp:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\c\xzin.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
___result__$3809 = -28					; size = 4
_sig$ = -20						; size = 12
__$ArrayPad$ = -4					; size = 4
_p$ = 8							; size = 4
_inStream$ = 12						; size = 4
_Xz_ReadHeader@8 PROC
; Line 13
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 15
	push	17					; 00000011H
	push	12					; 0000000cH
	lea	eax, DWORD PTR _sig$[ebp]
	push	eax
	mov	ecx, DWORD PTR _inStream$[ebp]
	push	ecx
	call	_SeqInStream_Read2@16
	mov	DWORD PTR ___result__$3809[ebp], eax
	cmp	DWORD PTR ___result__$3809[ebp], 0
	je	SHORT $LN2@Xz_ReadHea
	mov	eax, DWORD PTR ___result__$3809[ebp]
	jmp	SHORT $LN3@Xz_ReadHea
$LN2@Xz_ReadHea:
; Line 16
	push	6
	push	OFFSET _XZ_SIG
	lea	edx, DWORD PTR _sig$[ebp]
	push	edx
	call	_memcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN1@Xz_ReadHea
; Line 17
	mov	eax, 17					; 00000011H
	jmp	SHORT $LN3@Xz_ReadHea
$LN1@Xz_ReadHea:
; Line 18
	lea	eax, DWORD PTR _sig$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_Xz_ParseHeader@8
$LN3@Xz_ReadHea:
; Line 19
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Xz_ReadHea
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN7@Xz_ReadHea:
	DD	1
	DD	$LN6@Xz_ReadHea
$LN6@Xz_ReadHea:
	DD	-20					; ffffffecH
	DD	12					; 0000000cH
	DD	$LN5@Xz_ReadHea
$LN5@Xz_ReadHea:
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	0
_Xz_ReadHeader@8 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_XzBlock_ReadHeader@16
EXTRN	_XzBlock_Parse@8:PROC
EXTRN	_SeqInStream_Read@12:PROC
EXTRN	_SeqInStream_ReadByte@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
___result__$3827 = -1048				; size = 4
___result__$3823 = -1044				; size = 4
_headerSize$ = -1040					; size = 4
_header$ = -1032					; size = 1024
__$ArrayPad$ = -4					; size = 4
_p$ = 8							; size = 4
_inStream$ = 12						; size = 4
_isIndex$ = 16						; size = 4
_headerSizeRes$ = 20					; size = 4
_XzBlock_ReadHeader@16 PROC
; Line 26
	push	ebp
	mov	ebp, esp
	sub	esp, 1048				; 00000418H
	push	edi
	lea	edi, DWORD PTR [ebp-1048]
	mov	ecx, 262				; 00000106H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 29
	mov	eax, DWORD PTR _headerSizeRes$[ebp]
	mov	DWORD PTR [eax], 0
; Line 30
	lea	ecx, DWORD PTR _header$[ebp]
	push	ecx
	mov	edx, DWORD PTR _inStream$[ebp]
	push	edx
	call	_SeqInStream_ReadByte@8
	mov	DWORD PTR ___result__$3823[ebp], eax
	cmp	DWORD PTR ___result__$3823[ebp], 0
	je	SHORT $LN3@XzBlock_Re
	mov	eax, DWORD PTR ___result__$3823[ebp]
	jmp	$LN4@XzBlock_Re
$LN3@XzBlock_Re:
; Line 31
	movzx	eax, BYTE PTR _header$[ebp]
	lea	ecx, DWORD PTR [eax*4+4]
	mov	DWORD PTR _headerSize$[ebp], ecx
; Line 32
	cmp	DWORD PTR _headerSize$[ebp], 0
	jne	SHORT $LN2@XzBlock_Re
; Line 34
	mov	edx, DWORD PTR _headerSizeRes$[ebp]
	mov	DWORD PTR [edx], 1
; Line 35
	mov	eax, DWORD PTR _isIndex$[ebp]
	mov	DWORD PTR [eax], 1
; Line 36
	xor	eax, eax
	jmp	SHORT $LN4@XzBlock_Re
$LN2@XzBlock_Re:
; Line 39
	mov	ecx, DWORD PTR _isIndex$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 40
	mov	edx, DWORD PTR _headerSizeRes$[ebp]
	mov	eax, DWORD PTR _headerSize$[ebp]
	mov	DWORD PTR [edx], eax
; Line 41
	mov	ecx, DWORD PTR _headerSize$[ebp]
	sub	ecx, 1
	push	ecx
	lea	edx, DWORD PTR _header$[ebp+1]
	push	edx
	mov	eax, DWORD PTR _inStream$[ebp]
	push	eax
	call	_SeqInStream_Read@12
	mov	DWORD PTR ___result__$3827[ebp], eax
	cmp	DWORD PTR ___result__$3827[ebp], 0
	je	SHORT $LN1@XzBlock_Re
	mov	eax, DWORD PTR ___result__$3827[ebp]
	jmp	SHORT $LN4@XzBlock_Re
$LN1@XzBlock_Re:
; Line 42
	lea	ecx, DWORD PTR _header$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_XzBlock_Parse@8
$LN4@XzBlock_Re:
; Line 43
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@XzBlock_Re
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1048				; 00000418H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN8@XzBlock_Re:
	DD	1
	DD	$LN7@XzBlock_Re
$LN7@XzBlock_Re:
	DD	-1032					; fffffbf8H
	DD	1024					; 00000400H
	DD	$LN6@XzBlock_Re
$LN6@XzBlock_Re:
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_XzBlock_ReadHeader@16 ENDP
_TEXT	ENDS
PUBLIC	_Xz_GetUnpackSize@4
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_newSize$3837 = -20					; size = 8
_i$ = -12						; size = 4
_size$ = -8						; size = 8
_p$ = 8							; size = 4
_Xz_GetUnpackSize@4 PROC
; Line 49
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 50
	mov	DWORD PTR _size$[ebp], 0
	mov	DWORD PTR _size$[ebp+4], 0
; Line 52
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@Xz_GetUnpa
$LN3@Xz_GetUnpa:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@Xz_GetUnpa:
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+4]
	jae	SHORT $LN2@Xz_GetUnpa
; Line 53
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR _size$[ebp]
	add	ecx, DWORD PTR [edx+eax]
	mov	esi, DWORD PTR _size$[ebp+4]
	adc	esi, DWORD PTR [edx+eax+4]
	mov	DWORD PTR _newSize$3837[ebp], ecx
	mov	DWORD PTR _newSize$3837[ebp+4], esi
	mov	edx, DWORD PTR _newSize$3837[ebp+4]
	cmp	edx, DWORD PTR _size$[ebp+4]
	ja	SHORT $LN1@Xz_GetUnpa
	jb	SHORT $LN7@Xz_GetUnpa
	mov	eax, DWORD PTR _newSize$3837[ebp]
	cmp	eax, DWORD PTR _size$[ebp]
	jae	SHORT $LN1@Xz_GetUnpa
$LN7@Xz_GetUnpa:
	or	eax, -1
	or	edx, -1
	jmp	SHORT $LN5@Xz_GetUnpa
$LN1@Xz_GetUnpa:
	mov	ecx, DWORD PTR _newSize$3837[ebp]
	mov	DWORD PTR _size$[ebp], ecx
	mov	edx, DWORD PTR _newSize$3837[ebp+4]
	mov	DWORD PTR _size$[ebp+4], edx
	jmp	SHORT $LN3@Xz_GetUnpa
$LN2@Xz_GetUnpa:
; Line 54
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR _size$[ebp+4]
$LN5@Xz_GetUnpa:
; Line 55
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
_Xz_GetUnpackSize@4 ENDP
_TEXT	ENDS
PUBLIC	_Xz_GetPackSize@4
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_newSize$3849 = -20					; size = 8
_i$ = -12						; size = 4
_size$ = -8						; size = 8
_p$ = 8							; size = 4
_Xz_GetPackSize@4 PROC
; Line 58
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 59
	mov	DWORD PTR _size$[ebp], 0
	mov	DWORD PTR _size$[ebp+4], 0
; Line 61
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@Xz_GetPack
$LN3@Xz_GetPack:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@Xz_GetPack:
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+4]
	jae	SHORT $LN2@Xz_GetPack
; Line 62
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR [edx+eax+8]
	add	ecx, 3
	mov	edx, DWORD PTR [edx+eax+12]
	adc	edx, 0
	and	ecx, -4					; fffffffcH
	add	ecx, DWORD PTR _size$[ebp]
	adc	edx, DWORD PTR _size$[ebp+4]
	mov	DWORD PTR _newSize$3849[ebp], ecx
	mov	DWORD PTR _newSize$3849[ebp+4], edx
	mov	eax, DWORD PTR _newSize$3849[ebp+4]
	cmp	eax, DWORD PTR _size$[ebp+4]
	ja	SHORT $LN1@Xz_GetPack
	jb	SHORT $LN7@Xz_GetPack
	mov	ecx, DWORD PTR _newSize$3849[ebp]
	cmp	ecx, DWORD PTR _size$[ebp]
	jae	SHORT $LN1@Xz_GetPack
$LN7@Xz_GetPack:
	or	eax, -1
	or	edx, -1
	jmp	SHORT $LN5@Xz_GetPack
$LN1@Xz_GetPack:
	mov	edx, DWORD PTR _newSize$3849[ebp]
	mov	DWORD PTR _size$[ebp], edx
	mov	eax, DWORD PTR _newSize$3849[ebp+4]
	mov	DWORD PTR _size$[ebp+4], eax
	jmp	SHORT $LN3@Xz_GetPack
$LN2@Xz_GetPack:
; Line 63
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR _size$[ebp+4]
$LN5@Xz_GetPack:
; Line 64
	mov	esp, ebp
	pop	ebp
	ret	4
_Xz_GetPackSize@4 ENDP
_TEXT	ENDS
PUBLIC	_Xzs_Construct@4
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = 8							; size = 4
_Xzs_Construct@4 PROC
; Line 235
	push	ebp
	mov	ebp, esp
; Line 236
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 237
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+8], 0
; Line 238
	pop	ebp
	ret	4
_Xzs_Construct@4 ENDP
_TEXT	ENDS
PUBLIC	_Xzs_Free@8
EXTRN	_Xz_Free@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$ = -4						; size = 4
_p$ = 8							; size = 4
_alloc$ = 12						; size = 4
_Xzs_Free@8 PROC
; Line 241
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 243
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@Xzs_Free
$LN2@Xzs_Free:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@Xzs_Free:
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx]
	jae	SHORT $LN1@Xzs_Free
; Line 244
	mov	eax, DWORD PTR _alloc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR [edx+8]
	push	ecx
	call	_Xz_Free@8
	jmp	SHORT $LN2@Xzs_Free
$LN1@Xzs_Free:
; Line 245
	mov	esi, esp
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _alloc$[ebp]
	push	edx
	mov	eax, DWORD PTR _alloc$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 246
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], 0
; Line 247
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+8], 0
; Line 248
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_Xzs_Free@8 ENDP
_TEXT	ENDS
PUBLIC	_Xzs_GetNumBlocks@4
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$ = -12						; size = 4
_num$ = -8						; size = 8
_p$ = 8							; size = 4
_Xzs_GetNumBlocks@4 PROC
; Line 251
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 252
	mov	DWORD PTR _num$[ebp], 0
	mov	DWORD PTR _num$[ebp+4], 0
; Line 254
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@Xzs_GetNum
$LN2@Xzs_GetNum:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@Xzs_GetNum:
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx]
	jae	SHORT $LN1@Xzs_GetNum
; Line 255
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+eax+4]
	xor	ecx, ecx
	add	eax, DWORD PTR _num$[ebp]
	adc	ecx, DWORD PTR _num$[ebp+4]
	mov	DWORD PTR _num$[ebp], eax
	mov	DWORD PTR _num$[ebp+4], ecx
	jmp	SHORT $LN2@Xzs_GetNum
$LN1@Xzs_GetNum:
; Line 256
	mov	eax, DWORD PTR _num$[ebp]
	mov	edx, DWORD PTR _num$[ebp+4]
; Line 257
	mov	esp, ebp
	pop	ebp
	ret	4
_Xzs_GetNumBlocks@4 ENDP
_TEXT	ENDS
PUBLIC	_Xzs_GetUnpackSize@4
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_newSize$4023 = -20					; size = 8
_i$ = -12						; size = 4
_size$ = -8						; size = 8
_p$ = 8							; size = 4
_Xzs_GetUnpackSize@4 PROC
; Line 260
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 261
	mov	DWORD PTR _size$[ebp], 0
	mov	DWORD PTR _size$[ebp+4], 0
; Line 263
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@Xzs_GetUnp
$LN3@Xzs_GetUnp:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@Xzs_GetUnp:
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx]
	jae	SHORT $LN2@Xzs_GetUnp
; Line 264
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR [ecx+8]
	push	eax
	call	_Xz_GetUnpackSize@4
	add	eax, DWORD PTR _size$[ebp]
	adc	edx, DWORD PTR _size$[ebp+4]
	mov	DWORD PTR _newSize$4023[ebp], eax
	mov	DWORD PTR _newSize$4023[ebp+4], edx
	mov	edx, DWORD PTR _newSize$4023[ebp+4]
	cmp	edx, DWORD PTR _size$[ebp+4]
	ja	SHORT $LN1@Xzs_GetUnp
	jb	SHORT $LN7@Xzs_GetUnp
	mov	eax, DWORD PTR _newSize$4023[ebp]
	cmp	eax, DWORD PTR _size$[ebp]
	jae	SHORT $LN1@Xzs_GetUnp
$LN7@Xzs_GetUnp:
	or	eax, -1
	or	edx, -1
	jmp	SHORT $LN5@Xzs_GetUnp
$LN1@Xzs_GetUnp:
	mov	ecx, DWORD PTR _newSize$4023[ebp]
	mov	DWORD PTR _size$[ebp], ecx
	mov	edx, DWORD PTR _newSize$4023[ebp+4]
	mov	DWORD PTR _size$[ebp+4], edx
	jmp	SHORT $LN3@Xzs_GetUnp
$LN2@Xzs_GetUnp:
; Line 265
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR _size$[ebp+4]
$LN5@Xzs_GetUnp:
; Line 266
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_Xzs_GetUnpackSize@4 ENDP
_TEXT	ENDS
PUBLIC	_Xzs_ReadBackward@20
EXTRN	_LookInStream_SeekTo@12:PROC
EXTRN	_memcpy:PROC
EXTRN	_Xz_Construct@4:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv225 = -76						; size = 4
___result__$4058 = -72					; size = 4
_data$4050 = -68					; size = 4
_newNum$4049 = -64					; size = 4
___result__$4046 = -60					; size = 4
_res$4045 = -56						; size = 4
_st$4044 = -48						; size = 24
___result__$4039 = -20					; size = 4
_endOffset$ = -12					; size = 8
_p$ = 8							; size = 4
_stream$ = 12						; size = 4
_startOffset$ = 16					; size = 4
_progress$ = 20						; size = 4
_alloc$ = 24						; size = 4
_Xzs_ReadBackward@20 PROC
; Line 280
	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-76]
	mov	ecx, 19					; 00000013H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 281
	mov	DWORD PTR _endOffset$[ebp], 0
	mov	DWORD PTR _endOffset$[ebp+4], 0
; Line 282
	mov	esi, esp
	push	2
	lea	eax, DWORD PTR _endOffset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$4039[ebp], eax
	cmp	DWORD PTR ___result__$4039[ebp], 0
	je	SHORT $LN10@Xzs_ReadBa
	mov	eax, DWORD PTR ___result__$4039[ebp]
	jmp	$LN11@Xzs_ReadBa
$LN10@Xzs_ReadBa:
; Line 283
	mov	ecx, DWORD PTR _startOffset$[ebp]
	mov	edx, DWORD PTR _endOffset$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _endOffset$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
$LN9@Xzs_ReadBa:
; Line 288
	lea	ecx, DWORD PTR _st$4044[ebp]
	push	ecx
	call	_Xz_Construct@4
; Line 289
	mov	edx, DWORD PTR _alloc$[ebp]
	push	edx
	mov	eax, DWORD PTR _startOffset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	lea	edx, DWORD PTR _st$4044[ebp]
	push	edx
	call	_Xz_ReadBackward@16
	mov	DWORD PTR _res$4045[ebp], eax
; Line 290
	mov	eax, DWORD PTR _startOffset$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _st$4044[ebp+16], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _st$4044[ebp+20], edx
; Line 291
	mov	eax, DWORD PTR _res$4045[ebp]
	mov	DWORD PTR ___result__$4046[ebp], eax
	cmp	DWORD PTR ___result__$4046[ebp], 0
	je	SHORT $LN7@Xzs_ReadBa
	mov	eax, DWORD PTR ___result__$4046[ebp]
	jmp	$LN11@Xzs_ReadBa
$LN7@Xzs_ReadBa:
; Line 292
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx+4]
	jne	$LN6@Xzs_ReadBa
; Line 294
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	shr	edx, 2
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR [ecx+edx+1]
	mov	DWORD PTR _newNum$4049[ebp], edx
; Line 295
	mov	eax, DWORD PTR _newNum$4049[ebp]
	imul	eax, 24					; 00000018H
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _alloc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _alloc$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _data$4050[ebp], eax
; Line 296
	cmp	DWORD PTR _data$4050[ebp], 0
	jne	SHORT $LN5@Xzs_ReadBa
; Line 297
	mov	eax, 2
	jmp	$LN11@Xzs_ReadBa
$LN5@Xzs_ReadBa:
; Line 298
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _newNum$4049[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 299
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN4@Xzs_ReadBa
; Line 300
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	imul	edx, 24					; 00000018H
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _data$4050[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN4@Xzs_ReadBa:
; Line 301
	mov	esi, esp
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _alloc$[ebp]
	push	edx
	mov	eax, DWORD PTR _alloc$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 302
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _data$4050[ebp]
	mov	DWORD PTR [edx+8], eax
$LN6@Xzs_ReadBa:
; Line 304
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, edx
	mov	edx, DWORD PTR _st$4044[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _st$4044[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _st$4044[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _st$4044[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	edx, DWORD PTR _st$4044[ebp+16]
	mov	DWORD PTR [ecx+16], edx
	mov	eax, DWORD PTR _st$4044[ebp+20]
	mov	DWORD PTR [ecx+20], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], edx
; Line 305
	mov	ecx, DWORD PTR _startOffset$[ebp]
	mov	DWORD PTR tv225[ebp], ecx
	mov	edx, DWORD PTR tv225[ebp]
	mov	eax, DWORD PTR tv225[ebp]
	mov	ecx, DWORD PTR [edx]
	or	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN3@Xzs_ReadBa
; Line 306
	jmp	SHORT $LN8@Xzs_ReadBa
$LN3@Xzs_ReadBa:
; Line 307
	mov	edx, DWORD PTR _startOffset$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR [edx]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_LookInStream_SeekTo@12
	mov	DWORD PTR ___result__$4058[ebp], eax
	cmp	DWORD PTR ___result__$4058[ebp], 0
	je	SHORT $LN2@Xzs_ReadBa
	mov	eax, DWORD PTR ___result__$4058[ebp]
	jmp	SHORT $LN11@Xzs_ReadBa
$LN2@Xzs_ReadBa:
; Line 308
	cmp	DWORD PTR _progress$[ebp], 0
	je	SHORT $LN1@Xzs_ReadBa
	mov	esi, esp
	push	-1
	push	-1
	mov	eax, DWORD PTR _startOffset$[ebp]
	mov	ecx, DWORD PTR _endOffset$[ebp]
	sub	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _endOffset$[ebp+4]
	sbb	edx, DWORD PTR [eax+4]
	push	edx
	push	ecx
	mov	eax, DWORD PTR _progress$[ebp]
	push	eax
	mov	ecx, DWORD PTR _progress$[ebp]
	mov	edx, DWORD PTR [ecx]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN1@Xzs_ReadBa
; Line 309
	mov	eax, 10					; 0000000aH
	jmp	SHORT $LN11@Xzs_ReadBa
$LN1@Xzs_ReadBa:
; Line 310
	jmp	$LN9@Xzs_ReadBa
$LN8@Xzs_ReadBa:
; Line 311
	xor	eax, eax
$LN11@Xzs_ReadBa:
; Line 312
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@Xzs_ReadBa
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 76					; 0000004cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$LN16@Xzs_ReadBa:
	DD	2
	DD	$LN15@Xzs_ReadBa
$LN15@Xzs_ReadBa:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN13@Xzs_ReadBa
	DD	-48					; ffffffd0H
	DD	24					; 00000018H
	DD	$LN14@Xzs_ReadBa
$LN14@Xzs_ReadBa:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN13@Xzs_ReadBa:
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	79					; 0000004fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
_Xzs_ReadBackward@20 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_SecToRead_CreateVTable@4:PROC
EXTRN	@CrcCalc@8:PROC
EXTRN	_XZ_FOOTER_SIG:WORD
EXTRN	__allshl:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv382 = -1164						; size = 8
tv83 = -1156						; size = 4
tv213 = -1152						; size = 8
___result__$3993 = -1144				; size = 4
_secToRead$3992 = -1136					; size = 8
_headerFlags$3991 = -1120				; size = 2
___result__$3989 = -1112				; size = 4
_totalSize$3983 = -1108					; size = 8
___result__$3981 = -1100				; size = 4
___result__$3979 = -1096				; size = 4
___result__$3963 = -1092				; size = 4
___result__$3951 = -1088				; size = 4
_temp$3949 = -1080					; size = 1024
_i$3948 = -52						; size = 4
_total$3944 = -48					; size = 4
___result__$3941 = -44					; size = 4
_pos$ = -40						; size = 8
_buf$ = -28						; size = 12
_indexSize$ = -12					; size = 8
__$ArrayPad$ = -4					; size = 4
_p$ = 8							; size = 4
_stream$ = 12						; size = 4
_startOffset$ = 16					; size = 4
_alloc$ = 20						; size = 4
_Xz_ReadBackward@16 PROC
; Line 145
	push	ebp
	mov	ebp, esp
	sub	esp, 1164				; 0000048cH
	push	edi
	lea	edi, DWORD PTR [ebp-1164]
	mov	ecx, 291				; 00000123H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 148
	mov	eax, DWORD PTR _startOffset$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pos$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _pos$[ebp+4], edx
; Line 150
	mov	eax, DWORD PTR _pos$[ebp]
	and	eax, 3
	mov	ecx, DWORD PTR _pos$[ebp+4]
	and	ecx, 0
	mov	DWORD PTR tv213[ebp], eax
	mov	DWORD PTR tv213[ebp+4], ecx
	mov	edx, DWORD PTR tv213[ebp]
	or	edx, DWORD PTR tv213[ebp+4]
	jne	SHORT $LN26@Xz_ReadBac
	cmp	DWORD PTR _pos$[ebp+4], 0
	ja	SHORT $LN27@Xz_ReadBac
	jb	SHORT $LN26@Xz_ReadBac
	cmp	DWORD PTR _pos$[ebp], 12		; 0000000cH
	jae	SHORT $LN27@Xz_ReadBac
$LN26@Xz_ReadBac:
; Line 151
	mov	eax, 17					; 00000011H
	jmp	$LN28@Xz_ReadBac
$LN27@Xz_ReadBac:
; Line 153
	mov	eax, DWORD PTR _pos$[ebp]
	sub	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _pos$[ebp+4]
	sbb	ecx, 0
	mov	DWORD PTR _pos$[ebp], eax
	mov	DWORD PTR _pos$[ebp+4], ecx
; Line 154
	push	12					; 0000000cH
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _pos$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_LookInStream_SeekRead_ForArc@20
	mov	DWORD PTR ___result__$3941[ebp], eax
	cmp	DWORD PTR ___result__$3941[ebp], 0
	je	SHORT $LN25@Xz_ReadBac
	mov	eax, DWORD PTR ___result__$3941[ebp]
	jmp	$LN28@Xz_ReadBac
$LN25@Xz_ReadBac:
; Line 156
	push	2
	push	OFFSET _XZ_FOOTER_SIG
	lea	eax, DWORD PTR _buf$[ebp+10]
	push	eax
	call	_memcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN24@Xz_ReadBac
; Line 158
	mov	DWORD PTR _total$3944[ebp], 0
; Line 159
	mov	ecx, DWORD PTR _pos$[ebp]
	add	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _pos$[ebp+4]
	adc	edx, 0
	mov	DWORD PTR _pos$[ebp], ecx
	mov	DWORD PTR _pos$[ebp+4], edx
$LN23@Xz_ReadBac:
; Line 167
	cmp	DWORD PTR _pos$[ebp+4], 0
	ja	SHORT $LN33@Xz_ReadBac
	cmp	DWORD PTR _pos$[ebp], 1024		; 00000400H
	jbe	SHORT $LN30@Xz_ReadBac
$LN33@Xz_ReadBac:
	mov	DWORD PTR tv83[ebp], 1024		; 00000400H
	jmp	SHORT $LN31@Xz_ReadBac
$LN30@Xz_ReadBac:
	mov	eax, DWORD PTR _pos$[ebp]
	mov	DWORD PTR tv83[ebp], eax
$LN31@Xz_ReadBac:
	mov	ecx, DWORD PTR tv83[ebp]
	mov	DWORD PTR _i$3948[ebp], ecx
; Line 168
	mov	edx, DWORD PTR _i$3948[ebp]
	xor	eax, eax
	mov	ecx, DWORD PTR _pos$[ebp]
	sub	ecx, edx
	mov	edx, DWORD PTR _pos$[ebp+4]
	sbb	edx, eax
	mov	DWORD PTR _pos$[ebp], ecx
	mov	DWORD PTR _pos$[ebp+4], edx
; Line 169
	mov	eax, DWORD PTR _i$3948[ebp]
	push	eax
	lea	ecx, DWORD PTR _temp$3949[ebp]
	push	ecx
	mov	edx, DWORD PTR _pos$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _pos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_LookInStream_SeekRead_ForArc@20
	mov	DWORD PTR ___result__$3951[ebp], eax
	cmp	DWORD PTR ___result__$3951[ebp], 0
	je	SHORT $LN21@Xz_ReadBac
	mov	eax, DWORD PTR ___result__$3951[ebp]
	jmp	$LN28@Xz_ReadBac
$LN21@Xz_ReadBac:
; Line 170
	mov	edx, DWORD PTR _total$3944[ebp]
	add	edx, DWORD PTR _i$3948[ebp]
	mov	DWORD PTR _total$3944[ebp], edx
; Line 171
	jmp	SHORT $LN20@Xz_ReadBac
$LN19@Xz_ReadBac:
	mov	eax, DWORD PTR _i$3948[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$3948[ebp], eax
$LN20@Xz_ReadBac:
	cmp	DWORD PTR _i$3948[ebp], 0
	je	SHORT $LN18@Xz_ReadBac
; Line 172
	mov	ecx, DWORD PTR _i$3948[ebp]
	movzx	edx, BYTE PTR _temp$3949[ebp+ecx-1]
	test	edx, edx
	je	SHORT $LN17@Xz_ReadBac
; Line 173
	jmp	SHORT $LN18@Xz_ReadBac
$LN17@Xz_ReadBac:
; Line 174
	jmp	SHORT $LN19@Xz_ReadBac
$LN18@Xz_ReadBac:
	cmp	DWORD PTR _i$3948[ebp], 0
	je	SHORT $LN16@Xz_ReadBac
; Line 176
	mov	eax, DWORD PTR _i$3948[ebp]
	and	eax, 3
	je	SHORT $LN15@Xz_ReadBac
; Line 177
	mov	eax, 17					; 00000011H
	jmp	$LN28@Xz_ReadBac
$LN15@Xz_ReadBac:
; Line 178
	mov	ecx, DWORD PTR _i$3948[ebp]
	xor	edx, edx
	add	ecx, DWORD PTR _pos$[ebp]
	adc	edx, DWORD PTR _pos$[ebp+4]
	mov	DWORD PTR _pos$[ebp], ecx
	mov	DWORD PTR _pos$[ebp+4], edx
; Line 179
	jmp	SHORT $LN22@Xz_ReadBac
$LN16@Xz_ReadBac:
; Line 181
	cmp	DWORD PTR _pos$[ebp+4], 0
	ja	SHORT $LN34@Xz_ReadBac
	cmp	DWORD PTR _pos$[ebp], 12		; 0000000cH
	jb	SHORT $LN13@Xz_ReadBac
$LN34@Xz_ReadBac:
	cmp	DWORD PTR _total$3944[ebp], 65536	; 00010000H
	jbe	SHORT $LN14@Xz_ReadBac
$LN13@Xz_ReadBac:
; Line 182
	mov	eax, 17					; 00000011H
	jmp	$LN28@Xz_ReadBac
$LN14@Xz_ReadBac:
; Line 183
	jmp	$LN23@Xz_ReadBac
$LN22@Xz_ReadBac:
; Line 185
	cmp	DWORD PTR _pos$[ebp+4], 0
	ja	SHORT $LN12@Xz_ReadBac
	jb	SHORT $LN35@Xz_ReadBac
	cmp	DWORD PTR _pos$[ebp], 12		; 0000000cH
	jae	SHORT $LN12@Xz_ReadBac
$LN35@Xz_ReadBac:
; Line 186
	mov	eax, 17					; 00000011H
	jmp	$LN28@Xz_ReadBac
$LN12@Xz_ReadBac:
; Line 187
	mov	eax, DWORD PTR _pos$[ebp]
	sub	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _pos$[ebp+4]
	sbb	ecx, 0
	mov	DWORD PTR _pos$[ebp], eax
	mov	DWORD PTR _pos$[ebp+4], ecx
; Line 188
	push	12					; 0000000cH
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _pos$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_LookInStream_SeekRead_ForArc@20
	mov	DWORD PTR ___result__$3963[ebp], eax
	cmp	DWORD PTR ___result__$3963[ebp], 0
	je	SHORT $LN11@Xz_ReadBac
	mov	eax, DWORD PTR ___result__$3963[ebp]
	jmp	$LN28@Xz_ReadBac
$LN11@Xz_ReadBac:
; Line 189
	push	2
	push	OFFSET _XZ_FOOTER_SIG
	lea	eax, DWORD PTR _buf$[ebp+10]
	push	eax
	call	_memcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN24@Xz_ReadBac
; Line 190
	mov	eax, 17					; 00000011H
	jmp	$LN28@Xz_ReadBac
$LN24@Xz_ReadBac:
; Line 193
	movzx	ecx, BYTE PTR _buf$[ebp+8]
	shl	ecx, 8
	movzx	edx, BYTE PTR _buf$[ebp+9]
	or	ecx, edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	WORD PTR [eax], cx
; Line 195
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, WORD PTR [ecx]
	cmp	edx, 15					; 0000000fH
	jle	SHORT $LN9@Xz_ReadBac
; Line 196
	mov	eax, 4
	jmp	$LN28@Xz_ReadBac
$LN9@Xz_ReadBac:
; Line 198
	lea	ecx, DWORD PTR _buf$[ebp+4]
	mov	edx, 6
	call	@CrcCalc@8
	cmp	DWORD PTR _buf$[ebp], eax
	je	SHORT $LN8@Xz_ReadBac
; Line 199
	mov	eax, 16					; 00000010H
	jmp	$LN28@Xz_ReadBac
$LN8@Xz_ReadBac:
; Line 201
	mov	eax, DWORD PTR _buf$[ebp+4]
	xor	edx, edx
	add	eax, 1
	adc	edx, 0
	mov	cl, 2
	call	__allshl
	mov	DWORD PTR _indexSize$[ebp], eax
	mov	DWORD PTR _indexSize$[ebp+4], edx
; Line 203
	mov	eax, DWORD PTR _pos$[ebp+4]
	cmp	eax, DWORD PTR _indexSize$[ebp+4]
	ja	SHORT $LN7@Xz_ReadBac
	jb	SHORT $LN36@Xz_ReadBac
	mov	ecx, DWORD PTR _pos$[ebp]
	cmp	ecx, DWORD PTR _indexSize$[ebp]
	jae	SHORT $LN7@Xz_ReadBac
$LN36@Xz_ReadBac:
; Line 204
	mov	eax, 16					; 00000010H
	jmp	$LN28@Xz_ReadBac
$LN7@Xz_ReadBac:
; Line 206
	mov	edx, DWORD PTR _pos$[ebp]
	sub	edx, DWORD PTR _indexSize$[ebp]
	mov	eax, DWORD PTR _pos$[ebp+4]
	sbb	eax, DWORD PTR _indexSize$[ebp+4]
	mov	DWORD PTR _pos$[ebp], edx
	mov	DWORD PTR _pos$[ebp+4], eax
; Line 207
	mov	ecx, DWORD PTR _pos$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _pos$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_LookInStream_SeekTo@12
	mov	DWORD PTR ___result__$3979[ebp], eax
	cmp	DWORD PTR ___result__$3979[ebp], 0
	je	SHORT $LN6@Xz_ReadBac
	mov	eax, DWORD PTR ___result__$3979[ebp]
	jmp	$LN28@Xz_ReadBac
$LN6@Xz_ReadBac:
; Line 208
	mov	ecx, DWORD PTR _alloc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _indexSize$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _indexSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_Xz_ReadIndex@20
	mov	DWORD PTR ___result__$3981[ebp], eax
	cmp	DWORD PTR ___result__$3981[ebp], 0
	je	SHORT $LN5@Xz_ReadBac
	mov	eax, DWORD PTR ___result__$3981[ebp]
	jmp	$LN28@Xz_ReadBac
$LN5@Xz_ReadBac:
; Line 211
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_Xz_GetPackSize@4
	mov	DWORD PTR _totalSize$3983[ebp], eax
	mov	DWORD PTR _totalSize$3983[ebp+4], edx
; Line 214
	mov	ecx, DWORD PTR _totalSize$3983[ebp]
	and	ecx, DWORD PTR _totalSize$3983[ebp+4]
	cmp	ecx, -1
	je	SHORT $LN3@Xz_ReadBac
	cmp	DWORD PTR _totalSize$3983[ebp+4], -2147483648 ; 80000000H
	ja	SHORT $LN3@Xz_ReadBac
	jb	SHORT $LN37@Xz_ReadBac
	cmp	DWORD PTR _totalSize$3983[ebp], 0
	jae	SHORT $LN3@Xz_ReadBac
$LN37@Xz_ReadBac:
	mov	edx, DWORD PTR _totalSize$3983[ebp]
	add	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _totalSize$3983[ebp+4]
	adc	eax, 0
	mov	DWORD PTR tv382[ebp], edx
	mov	DWORD PTR tv382[ebp+4], eax
	mov	ecx, DWORD PTR _pos$[ebp+4]
	cmp	ecx, DWORD PTR tv382[ebp+4]
	ja	SHORT $LN4@Xz_ReadBac
	jb	SHORT $LN3@Xz_ReadBac
	mov	edx, DWORD PTR _pos$[ebp]
	cmp	edx, DWORD PTR tv382[ebp]
	jae	SHORT $LN4@Xz_ReadBac
$LN3@Xz_ReadBac:
; Line 215
	mov	eax, 16					; 00000010H
	jmp	$LN28@Xz_ReadBac
$LN4@Xz_ReadBac:
; Line 216
	mov	eax, DWORD PTR _totalSize$3983[ebp]
	add	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _totalSize$3983[ebp+4]
	adc	ecx, 0
	mov	edx, DWORD PTR _pos$[ebp]
	sub	edx, eax
	mov	eax, DWORD PTR _pos$[ebp+4]
	sbb	eax, ecx
	mov	DWORD PTR _pos$[ebp], edx
	mov	DWORD PTR _pos$[ebp+4], eax
; Line 217
	mov	ecx, DWORD PTR _pos$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _pos$[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	_LookInStream_SeekTo@12
	mov	DWORD PTR ___result__$3989[ebp], eax
	cmp	DWORD PTR ___result__$3989[ebp], 0
	je	SHORT $LN2@Xz_ReadBac
	mov	eax, DWORD PTR ___result__$3989[ebp]
	jmp	SHORT $LN28@Xz_ReadBac
$LN2@Xz_ReadBac:
; Line 218
	mov	ecx, DWORD PTR _startOffset$[ebp]
	mov	edx, DWORD PTR _pos$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _pos$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
; Line 223
	lea	ecx, DWORD PTR _secToRead$3992[ebp]
	push	ecx
	call	_SecToRead_CreateVTable@4
; Line 224
	mov	edx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR _secToRead$3992[ebp+4], edx
; Line 226
	lea	eax, DWORD PTR _secToRead$3992[ebp]
	push	eax
	lea	ecx, DWORD PTR _headerFlags$3991[ebp]
	push	ecx
	call	_Xz_ReadHeader@8
	mov	DWORD PTR ___result__$3993[ebp], eax
	cmp	DWORD PTR ___result__$3993[ebp], 0
	je	SHORT $LN1@Xz_ReadBac
	mov	eax, DWORD PTR ___result__$3993[ebp]
	jmp	SHORT $LN28@Xz_ReadBac
$LN1@Xz_ReadBac:
; Line 227
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, WORD PTR [edx]
	movzx	ecx, WORD PTR _headerFlags$3991[ebp]
	sub	eax, ecx
	neg	eax
	sbb	eax, eax
	and	eax, 16					; 00000010H
$LN28@Xz_ReadBac:
; Line 229
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN44@Xz_ReadBac
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1164				; 0000048cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	3
$LN44@Xz_ReadBac:
	DD	4
	DD	$LN43@Xz_ReadBac
$LN43@Xz_ReadBac:
	DD	-28					; ffffffe4H
	DD	12					; 0000000cH
	DD	$LN39@Xz_ReadBac
	DD	-1080					; fffffbc8H
	DD	1024					; 00000400H
	DD	$LN40@Xz_ReadBac
	DD	-1120					; fffffba0H
	DD	2
	DD	$LN41@Xz_ReadBac
	DD	-1136					; fffffb90H
	DD	8
	DD	$LN42@Xz_ReadBac
$LN42@Xz_ReadBac:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	84					; 00000054H
	DB	111					; 0000006fH
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	0
$LN41@Xz_ReadBac:
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	70					; 00000046H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	103					; 00000067H
	DB	115					; 00000073H
	DB	0
$LN40@Xz_ReadBac:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
$LN39@Xz_ReadBac:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
_Xz_ReadBackward@16 ENDP
_TEXT	ENDS
EXTRN	_LookInStream_Read2@16:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv90 = -20						; size = 8
_buf$ = -12						; size = 4
_size$ = -8						; size = 4
_res$ = -4						; size = 4
_p$ = 8							; size = 4
_stream$ = 12						; size = 4
_indexSize$ = 16					; size = 8
_alloc$ = 24						; size = 4
_Xz_ReadIndex@20 PROC
; Line 118
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 122
	cmp	DWORD PTR _indexSize$[ebp+4], 0
	ja	SHORT $LN7@Xz_ReadInd
	cmp	DWORD PTR _indexSize$[ebp], -2147483648	; 80000000H
	jbe	SHORT $LN4@Xz_ReadInd
$LN7@Xz_ReadInd:
; Line 123
	mov	eax, 4
	jmp	$LN5@Xz_ReadInd
$LN4@Xz_ReadInd:
; Line 124
	mov	eax, DWORD PTR _indexSize$[ebp]
	mov	DWORD PTR _size$[ebp], eax
; Line 125
	mov	ecx, DWORD PTR _size$[ebp]
	xor	edx, edx
	mov	DWORD PTR tv90[ebp], ecx
	mov	DWORD PTR tv90[ebp+4], edx
	mov	eax, DWORD PTR tv90[ebp]
	cmp	eax, DWORD PTR _indexSize$[ebp]
	jne	SHORT $LN8@Xz_ReadInd
	mov	ecx, DWORD PTR tv90[ebp+4]
	cmp	ecx, DWORD PTR _indexSize$[ebp+4]
	je	SHORT $LN3@Xz_ReadInd
$LN8@Xz_ReadInd:
; Line 126
	mov	eax, 4
	jmp	SHORT $LN5@Xz_ReadInd
$LN3@Xz_ReadInd:
; Line 127
	mov	esi, esp
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	eax, DWORD PTR _alloc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _alloc$[ebp]
	mov	edx, DWORD PTR [ecx]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _buf$[ebp], eax
; Line 128
	cmp	DWORD PTR _buf$[ebp], 0
	jne	SHORT $LN2@Xz_ReadInd
; Line 129
	mov	eax, 2
	jmp	SHORT $LN5@Xz_ReadInd
$LN2@Xz_ReadInd:
; Line 130
	push	4
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_LookInStream_Read2@16
	mov	DWORD PTR _res$[ebp], eax
; Line 131
	cmp	DWORD PTR _res$[ebp], 0
	jne	SHORT $LN1@Xz_ReadInd
; Line 132
	mov	eax, DWORD PTR _alloc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_Xz_ReadIndex2@16
	mov	DWORD PTR _res$[ebp], eax
$LN1@Xz_ReadInd:
; Line 133
	mov	esi, esp
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _alloc$[ebp]
	push	edx
	mov	eax, DWORD PTR _alloc$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 134
	mov	eax, DWORD PTR _res$[ebp]
$LN5@Xz_ReadInd:
; Line 135
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_Xz_ReadIndex@20 ENDP
_TEXT	ENDS
EXTRN	_Xz_ReadVarInt@12:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv160 = -64						; size = 4
tv221 = -60						; size = 4
tv180 = -56						; size = 8
_s$3888 = -48						; size = 4
_s$3886 = -44						; size = 4
_block$3885 = -40					; size = 4
_s$3874 = -36						; size = 4
_numBlocks64$3873 = -28					; size = 8
_crc$ = -16						; size = 4
_pos$ = -12						; size = 4
_numBlocks$ = -8					; size = 4
_i$ = -4						; size = 4
_p$ = 8							; size = 4
_buf$ = 12						; size = 4
_size$ = 16						; size = 4
_alloc$ = 20						; size = 4
_Xz_ReadIndex2@16 PROC
; Line 74
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 75
	mov	DWORD PTR _pos$[ebp], 1
; Line 78
	cmp	DWORD PTR _size$[ebp], 5
	jb	SHORT $LN16@Xz_ReadInd@2
	mov	eax, DWORD PTR _buf$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN17@Xz_ReadInd@2
$LN16@Xz_ReadInd@2:
; Line 79
	mov	eax, 16					; 00000010H
	jmp	$LN18@Xz_ReadInd@2
$LN17@Xz_ReadInd@2:
; Line 81
	mov	edx, DWORD PTR _size$[ebp]
	sub	edx, 4
	mov	DWORD PTR _size$[ebp], edx
; Line 82
	mov	edx, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR _buf$[ebp]
	call	@CrcCalc@8
	mov	DWORD PTR _crc$[ebp], eax
; Line 83
	mov	eax, DWORD PTR _buf$[ebp]
	add	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR _crc$[ebp]
	cmp	ecx, DWORD PTR [eax]
	je	SHORT $LN15@Xz_ReadInd@2
; Line 84
	mov	eax, 16					; 00000010H
	jmp	$LN18@Xz_ReadInd@2
$LN15@Xz_ReadInd@2:
; Line 88
	lea	edx, DWORD PTR _numBlocks64$3873[ebp]
	push	edx
	mov	eax, DWORD PTR _size$[ebp]
	sub	eax, DWORD PTR _pos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	add	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	call	_Xz_ReadVarInt@12
	mov	DWORD PTR _s$3874[ebp], eax
	cmp	DWORD PTR _s$3874[ebp], 0
	jne	SHORT $LN14@Xz_ReadInd@2
	mov	eax, 16					; 00000010H
	jmp	$LN18@Xz_ReadInd@2
$LN14@Xz_ReadInd@2:
	mov	edx, DWORD PTR _pos$[ebp]
	add	edx, DWORD PTR _s$3874[ebp]
	mov	DWORD PTR _pos$[ebp], edx
; Line 89
	mov	eax, DWORD PTR _numBlocks64$3873[ebp]
	mov	DWORD PTR _numBlocks$[ebp], eax
; Line 90
	mov	ecx, DWORD PTR _numBlocks$[ebp]
	xor	edx, edx
	mov	DWORD PTR tv180[ebp], ecx
	mov	DWORD PTR tv180[ebp+4], edx
	mov	eax, DWORD PTR tv180[ebp]
	cmp	eax, DWORD PTR _numBlocks64$3873[ebp]
	jne	SHORT $LN12@Xz_ReadInd@2
	mov	ecx, DWORD PTR tv180[ebp+4]
	cmp	ecx, DWORD PTR _numBlocks64$3873[ebp+4]
	jne	SHORT $LN12@Xz_ReadInd@2
	mov	edx, DWORD PTR _numBlocks$[ebp]
	shl	edx, 1
	cmp	edx, DWORD PTR _size$[ebp]
	jbe	SHORT $LN13@Xz_ReadInd@2
$LN12@Xz_ReadInd@2:
; Line 91
	mov	eax, 16					; 00000010H
	jmp	$LN18@Xz_ReadInd@2
$LN13@Xz_ReadInd@2:
; Line 94
	mov	eax, DWORD PTR _alloc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_Xz_Free@8
; Line 95
	cmp	DWORD PTR _numBlocks$[ebp], 0
	je	$LN3@Xz_ReadInd@2
; Line 97
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _numBlocks$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 98
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _numBlocks$[ebp]
	mov	DWORD PTR [ecx+8], edx
; Line 99
	mov	eax, DWORD PTR _numBlocks$[ebp]
	shl	eax, 4
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _alloc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _alloc$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 100
	mov	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [edx+12], 0
	jne	SHORT $LN10@Xz_ReadInd@2
; Line 101
	mov	eax, 2
	jmp	$LN18@Xz_ReadInd@2
$LN10@Xz_ReadInd@2:
; Line 102
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN9@Xz_ReadInd@2
$LN8@Xz_ReadInd@2:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN9@Xz_ReadInd@2:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _numBlocks$[ebp]
	jae	$LN3@Xz_ReadInd@2
; Line 104
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _p$[ebp]
	add	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _block$3885[ebp], edx
; Line 105
	mov	ecx, DWORD PTR _block$3885[ebp]
	add	ecx, 8
	push	ecx
	mov	edx, DWORD PTR _size$[ebp]
	sub	edx, DWORD PTR _pos$[ebp]
	push	edx
	mov	eax, DWORD PTR _buf$[ebp]
	add	eax, DWORD PTR _pos$[ebp]
	push	eax
	call	_Xz_ReadVarInt@12
	mov	DWORD PTR _s$3886[ebp], eax
	cmp	DWORD PTR _s$3886[ebp], 0
	jne	SHORT $LN6@Xz_ReadInd@2
	mov	eax, 16					; 00000010H
	jmp	$LN18@Xz_ReadInd@2
$LN6@Xz_ReadInd@2:
	mov	ecx, DWORD PTR _pos$[ebp]
	add	ecx, DWORD PTR _s$3886[ebp]
	mov	DWORD PTR _pos$[ebp], ecx
; Line 106
	mov	edx, DWORD PTR _block$3885[ebp]
	push	edx
	mov	eax, DWORD PTR _size$[ebp]
	sub	eax, DWORD PTR _pos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	add	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	call	_Xz_ReadVarInt@12
	mov	DWORD PTR _s$3888[ebp], eax
	cmp	DWORD PTR _s$3888[ebp], 0
	jne	SHORT $LN5@Xz_ReadInd@2
	mov	eax, 16					; 00000010H
	jmp	SHORT $LN18@Xz_ReadInd@2
$LN5@Xz_ReadInd@2:
	mov	edx, DWORD PTR _pos$[ebp]
	add	edx, DWORD PTR _s$3888[ebp]
	mov	DWORD PTR _pos$[ebp], edx
; Line 107
	mov	eax, DWORD PTR _block$3885[ebp]
	mov	DWORD PTR tv221[ebp], eax
	mov	ecx, DWORD PTR tv221[ebp]
	mov	edx, DWORD PTR tv221[ebp]
	mov	eax, DWORD PTR [ecx+8]
	or	eax, DWORD PTR [edx+12]
	jne	SHORT $LN4@Xz_ReadInd@2
; Line 108
	mov	eax, 16					; 00000010H
	jmp	SHORT $LN18@Xz_ReadInd@2
$LN4@Xz_ReadInd@2:
; Line 109
	jmp	$LN8@Xz_ReadInd@2
$LN3@Xz_ReadInd@2:
; Line 111
	mov	ecx, DWORD PTR _pos$[ebp]
	and	ecx, 3
	je	SHORT $LN2@Xz_ReadInd@2
; Line 112
	mov	edx, DWORD PTR _buf$[ebp]
	add	edx, DWORD PTR _pos$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _pos$[ebp]
	add	ecx, 1
	mov	DWORD PTR _pos$[ebp], ecx
	test	eax, eax
	je	SHORT $LN20@Xz_ReadInd@2
	mov	DWORD PTR tv160[ebp], 1
	jmp	SHORT $LN21@Xz_ReadInd@2
$LN20@Xz_ReadInd@2:
	mov	DWORD PTR tv160[ebp], 0
$LN21@Xz_ReadInd@2:
	cmp	DWORD PTR tv160[ebp], 0
	je	SHORT $LN1@Xz_ReadInd@2
; Line 113
	mov	eax, 16					; 00000010H
	jmp	SHORT $LN18@Xz_ReadInd@2
$LN1@Xz_ReadInd@2:
; Line 114
	jmp	SHORT $LN3@Xz_ReadInd@2
$LN2@Xz_ReadInd@2:
	mov	eax, DWORD PTR _pos$[ebp]
	sub	eax, DWORD PTR _size$[ebp]
	neg	eax
	sbb	eax, eax
	and	eax, 16					; 00000010H
$LN18@Xz_ReadInd@2:
; Line 115
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN24@Xz_ReadInd@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 64					; 00000040H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	1
$LN24@Xz_ReadInd@2:
	DD	1
	DD	$LN23@Xz_ReadInd@2
$LN23@Xz_ReadInd@2:
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN22@Xz_ReadInd@2
$LN22@Xz_ReadInd@2:
	DB	110					; 0000006eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	66					; 00000042H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	115					; 00000073H
	DB	54					; 00000036H
	DB	52					; 00000034H
	DB	0
_Xz_ReadIndex2@16 ENDP
_TEXT	ENDS
EXTRN	_LookInStream_Read@12:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
___result__$3924 = -4					; size = 4
_stream$ = 8						; size = 4
_offset$ = 12						; size = 8
_buf$ = 20						; size = 4
_size$ = 24						; size = 4
_LookInStream_SeekRead_ForArc@20 PROC
; Line 138
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 139
	mov	eax, DWORD PTR _offset$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _offset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_LookInStream_SeekTo@12
	mov	DWORD PTR ___result__$3924[ebp], eax
	cmp	DWORD PTR ___result__$3924[ebp], 0
	je	SHORT $LN1@LookInStre
	mov	eax, DWORD PTR ___result__$3924[ebp]
	jmp	SHORT $LN2@LookInStre
$LN1@LookInStre:
; Line 140
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	_LookInStream_Read@12
$LN2@LookInStre:
; Line 142
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_LookInStream_SeekRead_ForArc@20 ENDP
_TEXT	ENDS
END
