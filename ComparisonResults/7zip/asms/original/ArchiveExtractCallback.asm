; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\CPP\7zip\UI\Common\ArchiveExtractCallback.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_kCantAutoRename DD FLAT:$SG76080
_kCantRenameFile DD FLAT:$SG76082
_kCantDeleteOutputFile DD FLAT:$SG76084
_kCantDeleteOutputDir DD FLAT:$SG76086
_DATA	ENDS
CONST	SEGMENT
$SG76080 DB	'Can not create file with auto name', 00H
	ORG $+1
$SG76082 DB	'Can not rename existing file', 00H
	ORG $+3
$SG76084 DB	'Can not delete output file', 00H
	ORG $+1
$SG76086 DB	'Can not delete output folder', 00H
	ORG $+3
$SG76105 DB	'SeSecurityPrivilege', 00H
$SG76325 DB	' : ', 00H
$SG76341 DB	' : ', 00H
$SG76377 DB	'.', 00H, 00H, 00H
$SG76379 DB	'.', 00H, '.', 00H, 00H, 00H
	ORG $+2
$SG76721 DB	'Dangerous link path was ignored', 00H
$SG76730 DB	'Incorrect path', 00H
	ORG $+1
$SG76738 DB	'Can not create hard link', 00H
	ORG $+3
$SG76749 DB	'Internal error for symbolic link file', 00H
	ORG $+2
$SG76756 DB	'Can not create symbolic link', 00H
	ORG $+3
$SG76775 DB	'Can not create hard link', 00H
	ORG $+3
$SG76789 DB	'Can not open output file', 00H
CONST	ENDS
PUBLIC	??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator->
PUBLIC	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
PUBLIC	?Write@COutStreamWithHash@@UAGJPBXIPAI@Z	; COutStreamWithHash::Write
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\archiveextractcallback.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
tv72 = -8						; size = 4
_result$ = -4						; size = 4
_this$ = 8						; size = 4
_data$ = 12						; size = 4
_size$ = 16						; size = 4
_processedSize$ = 20					; size = 4
?Write@COutStreamWithHash@@UAGJPBXIPAI@Z PROC		; COutStreamWithHash::Write
; Line 45
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 46
	mov	DWORD PTR _result$[ebp], 0
; Line 47
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
	test	eax, eax
	je	SHORT $LN3@Write
; Line 48
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator->
	mov	DWORD PTR tv72[ebp], eax
	mov	esi, esp
	lea	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	mov	eax, DWORD PTR tv72[ebp]
	push	eax
	mov	ecx, DWORD PTR tv72[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
$LN3@Write:
; Line 49
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+24]
	test	edx, edx
	je	SHORT $LN2@Write
; Line 50
	mov	esi, esp
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+28]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Write:
; Line 51
	mov	ecx, DWORD PTR _size$[ebp]
	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+16]
	adc	edx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], ecx
	mov	DWORD PTR [eax+20], edx
; Line 52
	cmp	DWORD PTR _processedSize$[ebp], 0
	je	SHORT $LN1@Write
; Line 53
	mov	ecx, DWORD PTR _processedSize$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx], edx
$LN1@Write:
; Line 54
	mov	eax, DWORD PTR _result$[ebp]
; Line 55
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Write@COutStreamWithHash@@UAGJPBXIPAI@Z ENDP		; COutStreamWithHash::Write
_TEXT	ENDS
PUBLIC	?AdjustPrivileges@CAccessToken@NSecurity@NWindows@@QAE_NPAU_TOKEN_PRIVILEGES@@@Z ; NWindows::NSecurity::CAccessToken::AdjustPrivileges
PUBLIC	??1CAccessToken@NSecurity@NWindows@@QAE@XZ	; NWindows::NSecurity::CAccessToken::~CAccessToken
PUBLIC	?OpenProcessToken@CAccessToken@NSecurity@NWindows@@QAE_NPAXK@Z ; NWindows::NSecurity::CAccessToken::OpenProcessToken
PUBLIC	??0CAccessToken@NSecurity@NWindows@@QAE@XZ	; NWindows::NSecurity::CAccessToken::CAccessToken
PUBLIC	__$ArrayPad$
PUBLIC	?InitLocalPrivileges@@YG_NXZ			; InitLocalPrivileges
EXTRN	__imp__GetLastError@0:PROC
EXTRN	__imp__LookupPrivilegeValueA@12:PROC
EXTRN	__imp__GetCurrentProcess@0:PROC
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
xdata$x	SEGMENT
__unwindtable$?InitLocalPrivileges@@YG_NXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?InitLocalPrivileges@@YG_NXZ$0
__ehfuncinfo$?InitLocalPrivileges@@YG_NXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?InitLocalPrivileges@@YG_NXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T78497 = -56						; size = 1
$T78496 = -55						; size = 1
$T78495 = -54						; size = 1
$T78494 = -53						; size = 1
_tp$ = -48						; size = 16
_token$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?InitLocalPrivileges@@YG_NXZ PROC			; InitLocalPrivileges
; Line 61
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?InitLocalPrivileges@@YG_NXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 44					; 0000002cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 62
	lea	ecx, DWORD PTR _token$[ebp]
	call	??0CAccessToken@NSecurity@NWindows@@QAE@XZ ; NWindows::NSecurity::CAccessToken::CAccessToken
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 64
	push	40					; 00000028H
	mov	esi, esp
	call	DWORD PTR __imp__GetCurrentProcess@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	lea	ecx, DWORD PTR _token$[ebp]
	call	?OpenProcessToken@CAccessToken@NSecurity@NWindows@@QAE_NPAXK@Z ; NWindows::NSecurity::CAccessToken::OpenProcessToken
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@InitLocalP
; Line 65
	mov	BYTE PTR $T78494[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _token$[ebp]
	call	??1CAccessToken@NSecurity@NWindows@@QAE@XZ ; NWindows::NSecurity::CAccessToken::~CAccessToken
	mov	al, BYTE PTR $T78494[ebp]
	jmp	$LN4@InitLocalP
$LN3@InitLocalP:
; Line 69
	mov	DWORD PTR _tp$[ebp], 1
; Line 70
	mov	DWORD PTR _tp$[ebp+12], 2
; Line 72
	mov	esi, esp
	lea	ecx, DWORD PTR _tp$[ebp+4]
	push	ecx
	push	OFFSET $SG76105
	push	0
	call	DWORD PTR __imp__LookupPrivilegeValueA@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN2@InitLocalP
; Line 73
	mov	BYTE PTR $T78495[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _token$[ebp]
	call	??1CAccessToken@NSecurity@NWindows@@QAE@XZ ; NWindows::NSecurity::CAccessToken::~CAccessToken
	mov	al, BYTE PTR $T78495[ebp]
	jmp	SHORT $LN4@InitLocalP
$LN2@InitLocalP:
; Line 74
	lea	edx, DWORD PTR _tp$[ebp]
	push	edx
	lea	ecx, DWORD PTR _token$[ebp]
	call	?AdjustPrivileges@CAccessToken@NSecurity@NWindows@@QAE_NPAU_TOKEN_PRIVILEGES@@@Z ; NWindows::NSecurity::CAccessToken::AdjustPrivileges
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@InitLocalP
; Line 75
	mov	BYTE PTR $T78496[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _token$[ebp]
	call	??1CAccessToken@NSecurity@NWindows@@QAE@XZ ; NWindows::NSecurity::CAccessToken::~CAccessToken
	mov	al, BYTE PTR $T78496[ebp]
	jmp	SHORT $LN4@InitLocalP
$LN1@InitLocalP:
; Line 76
	mov	esi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	neg	eax
	sbb	eax, eax
	add	eax, 1
	mov	BYTE PTR $T78497[ebp], al
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _token$[ebp]
	call	??1CAccessToken@NSecurity@NWindows@@QAE@XZ ; NWindows::NSecurity::CAccessToken::~CAccessToken
	mov	al, BYTE PTR $T78497[ebp]
$LN4@InitLocalP:
; Line 77
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@InitLocalP
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN11@InitLocalP:
	DD	2
	DD	$LN10@InitLocalP
$LN10@InitLocalP:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN7@InitLocalP
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN8@InitLocalP
$LN8@InitLocalP:
	DB	116					; 00000074H
	DB	112					; 00000070H
	DB	0
$LN7@InitLocalP:
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?InitLocalPrivileges@@YG_NXZ$0:
	lea	ecx, DWORD PTR _token$[ebp]
	jmp	??1CAccessToken@NSecurity@NWindows@@QAE@XZ ; NWindows::NSecurity::CAccessToken::~CAccessToken
__ehhandler$?InitLocalPrivileges@@YG_NXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-56]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?InitLocalPrivileges@@YG_NXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?InitLocalPrivileges@@YG_NXZ ENDP			; InitLocalPrivileges
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CAccessToken@NSecurity@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CAccessToken@NSecurity@NWindows@@QAE@XZ PROC		; NWindows::NSecurity::CAccessToken::CAccessToken, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\securityutils.h
; Line 17
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CAccessToken@NSecurity@NWindows@@QAE@XZ ENDP		; NWindows::NSecurity::CAccessToken::CAccessToken
_TEXT	ENDS
PUBLIC	?Close@CAccessToken@NSecurity@NWindows@@QAE_NXZ	; NWindows::NSecurity::CAccessToken::Close
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CAccessToken@NSecurity@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CAccessToken@NSecurity@NWindows@@QAE@XZ PROC		; NWindows::NSecurity::CAccessToken::~CAccessToken, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Close@CAccessToken@NSecurity@NWindows@@QAE_NXZ ; NWindows::NSecurity::CAccessToken::Close
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CAccessToken@NSecurity@NWindows@@QAE@XZ ENDP		; NWindows::NSecurity::CAccessToken::~CAccessToken
_TEXT	ENDS
PUBLIC	?BOOLToBool@@YG_NH@Z				; BOOLToBool
EXTRN	__imp__CloseHandle@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Close@CAccessToken@NSecurity@NWindows@@QAE_NXZ
_TEXT	SEGMENT
_res$ = -5						; size = 1
_this$ = -4						; size = 4
?Close@CAccessToken@NSecurity@NWindows@@QAE_NXZ PROC	; NWindows::NSecurity::CAccessToken::Close, COMDAT
; _this$ = ecx
; Line 20
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 21
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN2@Close
; Line 22
	mov	al, 1
	jmp	SHORT $LN3@Close
$LN2@Close:
; Line 23
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__CloseHandle@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	?BOOLToBool@@YG_NH@Z			; BOOLToBool
	mov	BYTE PTR _res$[ebp], al
; Line 24
	movzx	eax, BYTE PTR _res$[ebp]
	test	eax, eax
	je	SHORT $LN1@Close
; Line 25
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
$LN1@Close:
; Line 26
	mov	al, BYTE PTR _res$[ebp]
$LN3@Close:
; Line 27
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Close@CAccessToken@NSecurity@NWindows@@QAE_NXZ ENDP	; NWindows::NSecurity::CAccessToken::Close
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?BOOLToBool@@YG_NH@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
?BOOLToBool@@YG_NH@Z PROC				; BOOLToBool, COMDAT
; File c:\workspace\7z1505-src\cpp\windows\defs.h
; Line 10
	push	ebp
	mov	ebp, esp
	xor	eax, eax
	cmp	DWORD PTR _v$[ebp], 0
	setne	al
	pop	ebp
	ret	4
?BOOLToBool@@YG_NH@Z ENDP				; BOOLToBool
_TEXT	ENDS
EXTRN	__imp__OpenProcessToken@12:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?OpenProcessToken@CAccessToken@NSecurity@NWindows@@QAE_NPAXK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_processHandle$ = 8					; size = 4
_desiredAccess$ = 12					; size = 4
?OpenProcessToken@CAccessToken@NSecurity@NWindows@@QAE_NPAXK@Z PROC ; NWindows::NSecurity::CAccessToken::OpenProcessToken, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\securityutils.h
; Line 30
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Close@CAccessToken@NSecurity@NWindows@@QAE_NXZ ; NWindows::NSecurity::CAccessToken::Close
; Line 32
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _desiredAccess$[ebp]
	push	ecx
	mov	edx, DWORD PTR _processHandle$[ebp]
	push	edx
	call	DWORD PTR __imp__OpenProcessToken@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	?BOOLToBool@@YG_NH@Z			; BOOLToBool
; Line 33
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?OpenProcessToken@CAccessToken@NSecurity@NWindows@@QAE_NPAXK@Z ENDP ; NWindows::NSecurity::CAccessToken::OpenProcessToken
_TEXT	ENDS
PUBLIC	?AdjustPrivileges@CAccessToken@NSecurity@NWindows@@QAE_N_NPAU_TOKEN_PRIVILEGES@@@Z ; NWindows::NSecurity::CAccessToken::AdjustPrivileges
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?AdjustPrivileges@CAccessToken@NSecurity@NWindows@@QAE_NPAU_TOKEN_PRIVILEGES@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newState$ = 8						; size = 4
?AdjustPrivileges@CAccessToken@NSecurity@NWindows@@QAE_NPAU_TOKEN_PRIVILEGES@@@Z PROC ; NWindows::NSecurity::CAccessToken::AdjustPrivileges, COMDAT
; _this$ = ecx
; Line 52
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _newState$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AdjustPrivileges@CAccessToken@NSecurity@NWindows@@QAE_N_NPAU_TOKEN_PRIVILEGES@@@Z ; NWindows::NSecurity::CAccessToken::AdjustPrivileges
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?AdjustPrivileges@CAccessToken@NSecurity@NWindows@@QAE_NPAU_TOKEN_PRIVILEGES@@@Z ENDP ; NWindows::NSecurity::CAccessToken::AdjustPrivileges
_TEXT	ENDS
PUBLIC	?AdjustPrivileges@CAccessToken@NSecurity@NWindows@@QAE_N_NPAU_TOKEN_PRIVILEGES@@K1PAK@Z ; NWindows::NSecurity::CAccessToken::AdjustPrivileges
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?AdjustPrivileges@CAccessToken@NSecurity@NWindows@@QAE_N_NPAU_TOKEN_PRIVILEGES@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_disableAllPrivileges$ = 8				; size = 1
_newState$ = 12						; size = 4
?AdjustPrivileges@CAccessToken@NSecurity@NWindows@@QAE_N_NPAU_TOKEN_PRIVILEGES@@@Z PROC ; NWindows::NSecurity::CAccessToken::AdjustPrivileges, COMDAT
; _this$ = ecx
; Line 49
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _newState$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _disableAllPrivileges$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AdjustPrivileges@CAccessToken@NSecurity@NWindows@@QAE_N_NPAU_TOKEN_PRIVILEGES@@K1PAK@Z ; NWindows::NSecurity::CAccessToken::AdjustPrivileges
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?AdjustPrivileges@CAccessToken@NSecurity@NWindows@@QAE_N_NPAU_TOKEN_PRIVILEGES@@@Z ENDP ; NWindows::NSecurity::CAccessToken::AdjustPrivileges
_TEXT	ENDS
PUBLIC	?BoolToBOOL@@YGH_N@Z				; BoolToBOOL
EXTRN	__imp__AdjustTokenPrivileges@24:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?AdjustPrivileges@CAccessToken@NSecurity@NWindows@@QAE_N_NPAU_TOKEN_PRIVILEGES@@K1PAK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_disableAllPrivileges$ = 8				; size = 1
_newState$ = 12						; size = 4
_bufferLength$ = 16					; size = 4
_previousState$ = 20					; size = 4
_returnLength$ = 24					; size = 4
?AdjustPrivileges@CAccessToken@NSecurity@NWindows@@QAE_N_NPAU_TOKEN_PRIVILEGES@@K1PAK@Z PROC ; NWindows::NSecurity::CAccessToken::AdjustPrivileges, COMDAT
; _this$ = ecx
; Line 45
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 46
	mov	esi, esp
	mov	eax, DWORD PTR _returnLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _previousState$[ebp]
	push	ecx
	mov	edx, DWORD PTR _bufferLength$[ebp]
	push	edx
	mov	eax, DWORD PTR _newState$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _disableAllPrivileges$[ebp]
	push	ecx
	call	?BoolToBOOL@@YGH_N@Z			; BoolToBOOL
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	DWORD PTR __imp__AdjustTokenPrivileges@24
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	?BOOLToBool@@YG_NH@Z			; BOOLToBool
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?AdjustPrivileges@CAccessToken@NSecurity@NWindows@@QAE_N_NPAU_TOKEN_PRIVILEGES@@K1PAK@Z ENDP ; NWindows::NSecurity::CAccessToken::AdjustPrivileges
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?BoolToBOOL@@YGH_N@Z
_TEXT	SEGMENT
_v$ = 8							; size = 1
?BoolToBOOL@@YGH_N@Z PROC				; BoolToBOOL, COMDAT
; File c:\workspace\7z1505-src\cpp\windows\defs.h
; Line 11
	push	ebp
	mov	ebp, esp
	movzx	eax, BYTE PTR _v$[ebp]
	neg	eax
	sbb	eax, eax
	neg	eax
	pop	ebp
	ret	4
?BoolToBOOL@@YGH_N@Z ENDP				; BoolToBOOL
_TEXT	ENDS
PUBLIC	??$MyCompare@_K@@YGH_K0@Z			; MyCompare<unsigned __int64>
PUBLIC	?Compare@CHardLinkNode@@QBEHABU1@@Z		; CHardLinkNode::Compare
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv87 = -20						; size = 4
tv86 = -16						; size = 4
tv74 = -12						; size = 4
tv73 = -8						; size = 4
_this$ = -4						; size = 4
_a$ = 8							; size = 4
?Compare@CHardLinkNode@@QBEHABU1@@Z PROC		; CHardLinkNode::Compare
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\archiveextractcallback.cpp
; Line 83
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 84
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	mov	DWORD PTR tv73[ebp], eax
	mov	DWORD PTR tv74[ebp], ecx
	mov	edx, DWORD PTR tv73[ebp]
	mov	eax, DWORD PTR tv74[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+4]
	ja	SHORT $LN2@Compare
	jb	SHORT $LN5@Compare
	mov	edx, DWORD PTR tv73[ebp]
	mov	eax, DWORD PTR tv74[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax]
	jae	SHORT $LN2@Compare
$LN5@Compare:
	or	eax, -1
	jmp	SHORT $LN3@Compare
$LN2@Compare:
; Line 85
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR tv86[ebp], edx
	mov	DWORD PTR tv87[ebp], eax
	mov	ecx, DWORD PTR tv86[ebp]
	mov	edx, DWORD PTR tv87[ebp]
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+4]
	jb	SHORT $LN1@Compare
	ja	SHORT $LN6@Compare
	mov	ecx, DWORD PTR tv86[ebp]
	mov	edx, DWORD PTR tv87[ebp]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	jbe	SHORT $LN1@Compare
$LN6@Compare:
	mov	eax, 1
	jmp	SHORT $LN3@Compare
$LN1@Compare:
; Line 86
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	push	eax
	call	??$MyCompare@_K@@YGH_K0@Z		; MyCompare<unsigned __int64>
$LN3@Compare:
; Line 87
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Compare@CHardLinkNode@@QBEHABU1@@Z ENDP		; CHardLinkNode::Compare
_TEXT	ENDS
PUBLIC	?PrepareLinks@CHardLinks@@QAEXXZ		; CHardLinks::PrepareLinks
PUBLIC	?DeleteFrom@?$CRecordVector@UCHardLinkNode@@@@QAEXI@Z ; CRecordVector<CHardLinkNode>::DeleteFrom
PUBLIC	??A?$CRecordVector@UCHardLinkNode@@@@QAEAAUCHardLinkNode@@I@Z ; CRecordVector<CHardLinkNode>::operator[]
PUBLIC	?Size@?$CRecordVector@UCHardLinkNode@@@@QBEIXZ	; CRecordVector<CHardLinkNode>::Size
PUBLIC	?Sort2@?$CRecordVector@UCHardLinkNode@@@@QAEXXZ	; CRecordVector<CHardLinkNode>::Sort2
PUBLIC	?Add@?$CRecordVector@UCHardLinkNode@@@@QAEIUCHardLinkNode@@@Z ; CRecordVector<CHardLinkNode>::Add
PUBLIC	??A?$CRecordVector@I@@QBEABII@Z			; CRecordVector<unsigned int>::operator[]
PUBLIC	?Size@?$CRecordVector@I@@QBEIXZ			; CRecordVector<unsigned int>::Size
PUBLIC	??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator IInArchive *
PUBLIC	?Clear@CHardLinks@@QAEXXZ			; CHardLinks::Clear
PUBLIC	__$ArrayPad$
PUBLIC	?PrepareHardLinks@CArchiveExtractCallback@@QAEJPBV?$CRecordVector@I@@@Z ; CArchiveExtractCallback::PrepareHardLinks
EXTRN	?Archive_IsItem_AltStream@@YGJPAUIInArchive@@IAA_N@Z:PROC ; Archive_IsItem_AltStream
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv90 = -112						; size = 4
_i$76172 = -108						; size = 4
_numSame$76171 = -104					; size = 4
_k$76170 = -100						; size = 4
___result__$76167 = -96					; size = 4
_isAltStream$76166 = -85				; size = 1
___result__$76163 = -80					; size = 4
_realIndex$76162 = -76					; size = 4
_defined$76161 = -65					; size = 1
_h$76160 = -56						; size = 16
_i$76156 = -36						; size = 4
___result__$76154 = -32					; size = 4
_numItems$76151 = -24					; size = 4
_hardIDs$ = -16						; size = 4
_archive$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_realIndices$ = 8					; size = 4
?PrepareHardLinks@CArchiveExtractCallback@@QAEJPBV?$CRecordVector@I@@@Z PROC ; CArchiveExtractCallback::PrepareHardLinks
; _this$ = ecx
; Line 111
	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-112]
	mov	ecx, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 112
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 400				; 00000190H
	call	?Clear@CHardLinks@@QAEXXZ		; CHardLinks::Clear
; Line 114
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, BYTE PTR [ecx+222]
	test	edx, edx
	jne	SHORT $LN18@PrepareHar
; Line 115
	xor	eax, eax
	jmp	$LN19@PrepareHar
$LN18@PrepareHar:
; Line 117
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	call	??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator IInArchive *
	mov	DWORD PTR _archive$[ebp], eax
; Line 118
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 400				; 00000190H
	mov	DWORD PTR _hardIDs$[ebp], ecx
; Line 122
	cmp	DWORD PTR _realIndices$[ebp], 0
	je	SHORT $LN17@PrepareHar
; Line 123
	mov	ecx, DWORD PTR _realIndices$[ebp]
	call	?Size@?$CRecordVector@I@@QBEIXZ		; CRecordVector<unsigned int>::Size
	mov	DWORD PTR _numItems$76151[ebp], eax
; Line 124
	jmp	SHORT $LN16@PrepareHar
$LN17@PrepareHar:
; Line 126
	mov	esi, esp
	lea	edx, DWORD PTR _numItems$76151[ebp]
	push	edx
	mov	eax, DWORD PTR _archive$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _archive$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$76154[ebp], eax
	cmp	DWORD PTR ___result__$76154[ebp], 0
	je	SHORT $LN16@PrepareHar
	mov	eax, DWORD PTR ___result__$76154[ebp]
	jmp	$LN19@PrepareHar
$LN16@PrepareHar:
; Line 129
	mov	DWORD PTR _i$76156[ebp], 0
	jmp	SHORT $LN14@PrepareHar
$LN13@PrepareHar:
	mov	ecx, DWORD PTR _i$76156[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$76156[ebp], ecx
$LN14@PrepareHar:
	mov	edx, DWORD PTR _i$76156[ebp]
	cmp	edx, DWORD PTR _numItems$76151[ebp]
	jae	$LN12@PrepareHar
; Line 133
	cmp	DWORD PTR _realIndices$[ebp], 0
	je	SHORT $LN21@PrepareHar
	mov	eax, DWORD PTR _i$76156[ebp]
	push	eax
	mov	ecx, DWORD PTR _realIndices$[ebp]
	call	??A?$CRecordVector@I@@QBEABII@Z		; CRecordVector<unsigned int>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv90[ebp], ecx
	jmp	SHORT $LN22@PrepareHar
$LN21@PrepareHar:
	mov	edx, DWORD PTR _i$76156[ebp]
	mov	DWORD PTR tv90[ebp], edx
$LN22@PrepareHar:
	mov	eax, DWORD PTR tv90[ebp]
	mov	DWORD PTR _realIndex$76162[ebp], eax
; Line 135
	lea	ecx, DWORD PTR _defined$76161[ebp]
	push	ecx
	lea	edx, DWORD PTR _h$76160[ebp]
	push	edx
	mov	eax, DWORD PTR _realIndex$76162[ebp]
	push	eax
	mov	ecx, DWORD PTR _archive$[ebp]
	push	ecx
	call	?Archive_Get_HardLinkNode@@YGJPAUIInArchive@@IAAUCHardLinkNode@@AA_N@Z ; Archive_Get_HardLinkNode
	mov	DWORD PTR ___result__$76163[ebp], eax
	cmp	DWORD PTR ___result__$76163[ebp], 0
	je	SHORT $LN11@PrepareHar
	mov	eax, DWORD PTR ___result__$76163[ebp]
	jmp	$LN19@PrepareHar
$LN11@PrepareHar:
; Line 136
	movzx	edx, BYTE PTR _defined$76161[ebp]
	test	edx, edx
	je	SHORT $LN10@PrepareHar
; Line 138
	mov	BYTE PTR _isAltStream$76166[ebp], 0
; Line 139
	lea	eax, DWORD PTR _isAltStream$76166[ebp]
	push	eax
	mov	ecx, DWORD PTR _realIndex$76162[ebp]
	push	ecx
	mov	edx, DWORD PTR _archive$[ebp]
	push	edx
	call	?Archive_IsItem_AltStream@@YGJPAUIInArchive@@IAA_N@Z ; Archive_IsItem_AltStream
	mov	DWORD PTR ___result__$76167[ebp], eax
	cmp	DWORD PTR ___result__$76167[ebp], 0
	je	SHORT $LN9@PrepareHar
	mov	eax, DWORD PTR ___result__$76167[ebp]
	jmp	$LN19@PrepareHar
$LN9@PrepareHar:
; Line 140
	movzx	eax, BYTE PTR _isAltStream$76166[ebp]
	test	eax, eax
	jne	SHORT $LN10@PrepareHar
; Line 141
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _h$76160[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _h$76160[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _h$76160[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _h$76160[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _hardIDs$[ebp]
	call	?Add@?$CRecordVector@UCHardLinkNode@@@@QAEIUCHardLinkNode@@@Z ; CRecordVector<CHardLinkNode>::Add
$LN10@PrepareHar:
; Line 143
	jmp	$LN13@PrepareHar
$LN12@PrepareHar:
; Line 146
	mov	ecx, DWORD PTR _hardIDs$[ebp]
	call	?Sort2@?$CRecordVector@UCHardLinkNode@@@@QAEXXZ ; CRecordVector<CHardLinkNode>::Sort2
; Line 150
	mov	DWORD PTR _k$76170[ebp], 0
; Line 151
	mov	DWORD PTR _numSame$76171[ebp], 1
; Line 152
	mov	DWORD PTR _i$76172[ebp], 1
	jmp	SHORT $LN7@PrepareHar
$LN6@PrepareHar:
	mov	ecx, DWORD PTR _i$76172[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$76172[ebp], ecx
$LN7@PrepareHar:
	mov	ecx, DWORD PTR _hardIDs$[ebp]
	call	?Size@?$CRecordVector@UCHardLinkNode@@@@QBEIXZ ; CRecordVector<CHardLinkNode>::Size
	cmp	DWORD PTR _i$76172[ebp], eax
	jae	$LN5@PrepareHar
; Line 154
	mov	edx, DWORD PTR _i$76172[ebp]
	sub	edx, 1
	push	edx
	mov	ecx, DWORD PTR _hardIDs$[ebp]
	call	??A?$CRecordVector@UCHardLinkNode@@@@QAEAAUCHardLinkNode@@I@Z ; CRecordVector<CHardLinkNode>::operator[]
	push	eax
	mov	eax, DWORD PTR _i$76172[ebp]
	push	eax
	mov	ecx, DWORD PTR _hardIDs$[ebp]
	call	??A?$CRecordVector@UCHardLinkNode@@@@QAEAAUCHardLinkNode@@I@Z ; CRecordVector<CHardLinkNode>::operator[]
	mov	ecx, eax
	call	?Compare@CHardLinkNode@@QBEHABU1@@Z	; CHardLinkNode::Compare
	test	eax, eax
	je	SHORT $LN4@PrepareHar
; Line 155
	mov	DWORD PTR _numSame$76171[ebp], 1
	jmp	SHORT $LN3@PrepareHar
$LN4@PrepareHar:
; Line 156
	mov	ecx, DWORD PTR _numSame$76171[ebp]
	add	ecx, 1
	mov	DWORD PTR _numSame$76171[ebp], ecx
	cmp	DWORD PTR _numSame$76171[ebp], 2
	jne	SHORT $LN3@PrepareHar
; Line 158
	mov	edx, DWORD PTR _i$76172[ebp]
	sub	edx, 1
	cmp	edx, DWORD PTR _k$76170[ebp]
	je	SHORT $LN1@PrepareHar
; Line 159
	mov	eax, DWORD PTR _i$76172[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _hardIDs$[ebp]
	call	??A?$CRecordVector@UCHardLinkNode@@@@QAEAAUCHardLinkNode@@I@Z ; CRecordVector<CHardLinkNode>::operator[]
	mov	esi, eax
	mov	ecx, DWORD PTR _k$76170[ebp]
	push	ecx
	mov	ecx, DWORD PTR _hardIDs$[ebp]
	call	??A?$CRecordVector@UCHardLinkNode@@@@QAEAAUCHardLinkNode@@I@Z ; CRecordVector<CHardLinkNode>::operator[]
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [esi+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [esi+12]
	mov	DWORD PTR [eax+12], ecx
$LN1@PrepareHar:
; Line 160
	mov	edx, DWORD PTR _k$76170[ebp]
	add	edx, 1
	mov	DWORD PTR _k$76170[ebp], edx
$LN3@PrepareHar:
; Line 162
	jmp	$LN6@PrepareHar
$LN5@PrepareHar:
; Line 163
	mov	eax, DWORD PTR _k$76170[ebp]
	push	eax
	mov	ecx, DWORD PTR _hardIDs$[ebp]
	call	?DeleteFrom@?$CRecordVector@UCHardLinkNode@@@@QAEXI@Z ; CRecordVector<CHardLinkNode>::DeleteFrom
; Line 166
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 400				; 00000190H
	call	?PrepareLinks@CHardLinks@@QAEXXZ	; CHardLinks::PrepareLinks
; Line 167
	xor	eax, eax
$LN19@PrepareHar:
; Line 168
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN28@PrepareHar
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 112				; 00000070H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN28@PrepareHar:
	DD	4
	DD	$LN27@PrepareHar
$LN27@PrepareHar:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN23@PrepareHar
	DD	-56					; ffffffc8H
	DD	16					; 00000010H
	DD	$LN24@PrepareHar
	DD	-65					; ffffffbfH
	DD	1
	DD	$LN25@PrepareHar
	DD	-85					; ffffffabH
	DD	1
	DD	$LN26@PrepareHar
$LN26@PrepareHar:
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	65					; 00000041H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN25@PrepareHar:
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$LN24@PrepareHar:
	DB	104					; 00000068H
	DB	0
$LN23@PrepareHar:
	DB	110					; 0000006eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	73					; 00000049H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	115					; 00000073H
	DB	0
?PrepareHardLinks@CArchiveExtractCallback@@QAEJPBV?$CRecordVector@I@@@Z ENDP ; CArchiveExtractCallback::PrepareHardLinks
_TEXT	ENDS
PUBLIC	?Clear@?$CObjectVector@VUString@@@@QAEXXZ	; CObjectVector<UString>::Clear
PUBLIC	?Clear@?$CRecordVector@UCHardLinkNode@@@@QAEXXZ	; CRecordVector<CHardLinkNode>::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Clear@CHardLinks@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@CHardLinks@@QAEXXZ PROC				; CHardLinks::Clear, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\archiveextractcallback.h
; Line 113
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 114
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CRecordVector@UCHardLinkNode@@@@QAEXXZ ; CRecordVector<CHardLinkNode>::Clear
; Line 115
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Clear@?$CObjectVector@VUString@@@@QAEXXZ ; CObjectVector<UString>::Clear
; Line 116
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@CHardLinks@@QAEXXZ ENDP				; CHardLinks::Clear
_TEXT	ENDS
PUBLIC	?AddNew@?$CObjectVector@VUString@@@@QAEAAVUString@@XZ ; CObjectVector<UString>::AddNew
PUBLIC	?Size@?$CObjectVector@VUString@@@@QBEIXZ	; CObjectVector<UString>::Size
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?PrepareLinks@CHardLinks@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?PrepareLinks@CHardLinks@@QAEXXZ PROC			; CHardLinks::PrepareLinks, COMDAT
; _this$ = ecx
; Line 119
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
$LN2@PrepareLin:
; Line 120
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@UCHardLinkNode@@@@QBEIXZ ; CRecordVector<CHardLinkNode>::Size
	cmp	esi, eax
	jae	SHORT $LN3@PrepareLin
; Line 121
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?AddNew@?$CObjectVector@VUString@@@@QAEAAVUString@@XZ ; CObjectVector<UString>::AddNew
	jmp	SHORT $LN2@PrepareLin
$LN3@PrepareLin:
; Line 122
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PrepareLinks@CHardLinks@@QAEXXZ ENDP			; CHardLinks::PrepareLinks
_TEXT	ENDS
PUBLIC	?ConvertPropVariantToUInt64@@YG_NABUtagPROPVARIANT@@AA_K@Z ; ConvertPropVariantToUInt64
PUBLIC	??1CPropVariant@NCOM@NWindows@@QAE@XZ		; NWindows::NCOM::CPropVariant::~CPropVariant
PUBLIC	??0CPropVariant@NCOM@NWindows@@QAE@XZ		; NWindows::NCOM::CPropVariant::CPropVariant
xdata$x	SEGMENT
__unwindtable$?Archive_Get_HardLinkNode@@YGJPAUIInArchive@@IAAUCHardLinkNode@@AA_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Archive_Get_HardLinkNode@@YGJPAUIInArchive@@IAAUCHardLinkNode@@AA_N@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Archive_Get_HardLinkNode@@YGJPAUIInArchive@@IAAUCHardLinkNode@@AA_N@Z$1
__ehfuncinfo$?Archive_Get_HardLinkNode@@YGJPAUIInArchive@@IAAUCHardLinkNode@@AA_N@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Archive_Get_HardLinkNode@@YGJPAUIInArchive@@IAAUCHardLinkNode@@AA_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T78551 = -80						; size = 4
$T78550 = -76						; size = 4
$T78549 = -72						; size = 4
___result__$76137 = -68					; size = 4
_prop$76136 = -60					; size = 16
___result__$76130 = -40					; size = 4
_prop$76129 = -32					; size = 16
__$EHRec$ = -12						; size = 12
_archive$ = 8						; size = 4
_index$ = 12						; size = 4
_h$ = 16						; size = 4
_defined$ = 20						; size = 4
?Archive_Get_HardLinkNode@@YGJPAUIInArchive@@IAAUCHardLinkNode@@AA_N@Z PROC ; Archive_Get_HardLinkNode
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\archiveextractcallback.cpp
; Line 90
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Archive_Get_HardLinkNode@@YGJPAUIInArchive@@IAAUCHardLinkNode@@AA_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-80]
	mov	ecx, 17					; 00000011H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 91
	mov	eax, DWORD PTR _h$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	DWORD PTR [eax+12], 0
; Line 92
	mov	ecx, DWORD PTR _h$[ebp]
	mov	DWORD PTR [ecx], -1
	mov	DWORD PTR [ecx+4], -1
; Line 93
	mov	edx, DWORD PTR _defined$[ebp]
	mov	BYTE PTR [edx], 0
; Line 95
	lea	ecx, DWORD PTR _prop$76129[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 96
	mov	esi, esp
	lea	eax, DWORD PTR _prop$76129[ebp]
	push	eax
	push	91					; 0000005bH
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _archive$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _archive$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+24]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$76130[ebp], eax
	cmp	DWORD PTR ___result__$76130[ebp], 0
	je	SHORT $LN3@Archive_Ge
	mov	eax, DWORD PTR ___result__$76130[ebp]
	mov	DWORD PTR $T78549[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prop$76129[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T78549[ebp]
	jmp	$LN4@Archive_Ge
$LN3@Archive_Ge:
; Line 97
	mov	ecx, DWORD PTR _h$[ebp]
	add	ecx, 8
	push	ecx
	lea	edx, DWORD PTR _prop$76129[ebp]
	push	edx
	call	?ConvertPropVariantToUInt64@@YG_NABUtagPROPVARIANT@@AA_K@Z ; ConvertPropVariantToUInt64
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@Archive_Ge
; Line 98
	mov	DWORD PTR $T78550[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prop$76129[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T78550[ebp]
	jmp	$LN4@Archive_Ge
$LN2@Archive_Ge:
; Line 99
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prop$76129[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
; Line 101
	lea	ecx, DWORD PTR _prop$76136[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 102
	mov	esi, esp
	lea	ecx, DWORD PTR _prop$76136[ebp]
	push	ecx
	push	92					; 0000005cH
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _archive$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _archive$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$76137[ebp], eax
	cmp	DWORD PTR ___result__$76137[ebp], 0
	je	SHORT $LN1@Archive_Ge
	mov	ecx, DWORD PTR ___result__$76137[ebp]
	mov	DWORD PTR $T78551[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prop$76136[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T78551[ebp]
	jmp	SHORT $LN4@Archive_Ge
$LN1@Archive_Ge:
; Line 103
	mov	edx, DWORD PTR _h$[ebp]
	push	edx
	lea	eax, DWORD PTR _prop$76136[ebp]
	push	eax
	call	?ConvertPropVariantToUInt64@@YG_NABUtagPROPVARIANT@@AA_K@Z ; ConvertPropVariantToUInt64
; Line 104
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prop$76136[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
; Line 105
	mov	ecx, DWORD PTR _defined$[ebp]
	mov	BYTE PTR [ecx], 1
; Line 106
	xor	eax, eax
$LN4@Archive_Ge:
; Line 107
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@Archive_Ge
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 80					; 00000050H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN12@Archive_Ge:
	DD	2
	DD	$LN11@Archive_Ge
$LN11@Archive_Ge:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN8@Archive_Ge
	DD	-60					; ffffffc4H
	DD	16					; 00000010H
	DD	$LN9@Archive_Ge
$LN9@Archive_Ge:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
$LN8@Archive_Ge:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Archive_Get_HardLinkNode@@YGJPAUIInArchive@@IAAUCHardLinkNode@@AA_N@Z$0:
	lea	ecx, DWORD PTR _prop$76129[ebp]
	jmp	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
__unwindfunclet$?Archive_Get_HardLinkNode@@YGJPAUIInArchive@@IAAUCHardLinkNode@@AA_N@Z$1:
	lea	ecx, DWORD PTR _prop$76136[ebp]
	jmp	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
__ehhandler$?Archive_Get_HardLinkNode@@YGJPAUIInArchive@@IAAUCHardLinkNode@@AA_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-80]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Archive_Get_HardLinkNode@@YGJPAUIInArchive@@IAAUCHardLinkNode@@AA_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Archive_Get_HardLinkNode@@YGJPAUIInArchive@@IAAUCHardLinkNode@@AA_N@Z ENDP ; Archive_Get_HardLinkNode
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CPropVariant@NCOM@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CPropVariant@NCOM@NWindows@@QAE@XZ PROC		; NWindows::NCOM::CPropVariant::CPropVariant, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\propvariant.h
; Line 47
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 49
	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx], ax
; Line 50
	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+2], dx
; Line 54
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
; Line 55
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CPropVariant@NCOM@NWindows@@QAE@XZ ENDP		; NWindows::NCOM::CPropVariant::CPropVariant
_TEXT	ENDS
EXTRN	?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ:PROC	; NWindows::NCOM::CPropVariant::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CPropVariant@NCOM@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CPropVariant@NCOM@NWindows@@QAE@XZ PROC		; NWindows::NCOM::CPropVariant::~CPropVariant, COMDAT
; _this$ = ecx
; Line 56
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ ; NWindows::NCOM::CPropVariant::Clear
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CPropVariant@NCOM@NWindows@@QAE@XZ ENDP		; NWindows::NCOM::CPropVariant::~CPropVariant
_TEXT	ENDS
PUBLIC	__TI1H
PUBLIC	__CTA1H
PUBLIC	__CT??_R0H@84
PUBLIC	??_R0H@8					; int `RTTI Type Descriptor'
EXTRN	__CxxThrowException@8:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_R0H@8
; File c:\workspace\7z1505-src\cpp\windows\propvariantconv.h
_DATA	SEGMENT
??_R0H@8 DD	FLAT:??_7type_info@@6B@			; int `RTTI Type Descriptor'
	DD	00H
	DB	'.H', 00H
_DATA	ENDS
;	COMDAT __CT??_R0H@84
xdata$x	SEGMENT
__CT??_R0H@84 DD 01H
	DD	FLAT:??_R0H@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	00H
xdata$x	ENDS
;	COMDAT __CTA1H
xdata$x	SEGMENT
__CTA1H	DD	01H
	DD	FLAT:__CT??_R0H@84
xdata$x	ENDS
;	COMDAT __TI1H
xdata$x	SEGMENT
__TI1H	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA1H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?ConvertPropVariantToUInt64@@YG_NABUtagPROPVARIANT@@AA_K@Z
_TEXT	SEGMENT
tv65 = -8						; size = 4
$T78567 = -4						; size = 4
_prop$ = 8						; size = 4
_value$ = 12						; size = 4
?ConvertPropVariantToUInt64@@YG_NABUtagPROPVARIANT@@AA_K@Z PROC ; ConvertPropVariantToUInt64, COMDAT
; Line 18
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 19
	mov	eax, DWORD PTR _prop$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR tv65[ebp], ecx
	cmp	DWORD PTR tv65[ebp], 21			; 00000015H
	ja	SHORT $LN1@ConvertPro
	mov	edx, DWORD PTR tv65[ebp]
	movzx	eax, BYTE PTR $LN11@ConvertPro[edx]
	jmp	DWORD PTR $LN12@ConvertPro[eax*4]
$LN6@ConvertPro:
; Line 21
	mov	ecx, DWORD PTR _value$[ebp]
	mov	edx, DWORD PTR _prop$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+4], edx
	mov	al, 1
	jmp	SHORT $LN10@ConvertPro
$LN5@ConvertPro:
; Line 22
	mov	eax, DWORD PTR _prop$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	xor	edx, edx
	mov	eax, DWORD PTR _value$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	al, 1
	jmp	SHORT $LN10@ConvertPro
$LN4@ConvertPro:
; Line 23
	mov	ecx, DWORD PTR _prop$[ebp]
	movzx	eax, WORD PTR [ecx+8]
	cdq
	mov	ecx, DWORD PTR _value$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
	mov	al, 1
	jmp	SHORT $LN10@ConvertPro
$LN3@ConvertPro:
; Line 24
	mov	edx, DWORD PTR _prop$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	cdq
	mov	ecx, DWORD PTR _value$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
	mov	al, 1
	jmp	SHORT $LN10@ConvertPro
$LN2@ConvertPro:
; Line 25
	xor	al, al
	jmp	SHORT $LN10@ConvertPro
$LN1@ConvertPro:
; Line 26
	mov	DWORD PTR $T78567[ebp], 151199		; 00024e9fH
	push	OFFSET __TI1H
	lea	edx, DWORD PTR $T78567[ebp]
	push	edx
	call	__CxxThrowException@8
$LN10@ConvertPro:
; Line 28
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN12@ConvertPro:
	DD	$LN2@ConvertPro
	DD	$LN3@ConvertPro
	DD	$LN4@ConvertPro
	DD	$LN5@ConvertPro
	DD	$LN6@ConvertPro
	DD	$LN1@ConvertPro
$LN11@ConvertPro:
	DB	0
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	1
	DB	2
	DB	3
	DB	5
	DB	4
?ConvertPropVariantToUInt64@@YG_NABUtagPROPVARIANT@@AA_K@Z ENDP ; ConvertPropVariantToUInt64
_TEXT	ENDS
PUBLIC	??1?$CObjectVector@UCIndexToPathPair@@@@QAE@XZ	; CObjectVector<CIndexToPathPair>::~CObjectVector<CIndexToPathPair>
PUBLIC	??1CHardLinks@@QAE@XZ				; CHardLinks::~CHardLinks
PUBLIC	??1?$CRecordVector@I@@QAE@XZ			; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
PUBLIC	??1?$CObjectVector@VUString@@@@QAE@XZ		; CObjectVector<UString>::~CObjectVector<UString>
PUBLIC	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ	; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
PUBLIC	??1CReadArcItem@@QAE@XZ				; CReadArcItem::~CReadArcItem
PUBLIC	??1?$CMyComPtr@UIGetProp@@@@QAE@XZ		; CMyComPtr<IGetProp>::~CMyComPtr<IGetProp>
PUBLIC	??1?$CMyComPtr@UIFolderExtractToStreamCallback@@@@QAE@XZ ; CMyComPtr<IFolderExtractToStreamCallback>::~CMyComPtr<IFolderExtractToStreamCallback>
PUBLIC	??1UString@@QAE@XZ				; UString::~UString
PUBLIC	??1?$CMyComPtr@UIFolderArchiveExtractCallback2@@@@QAE@XZ ; CMyComPtr<IFolderArchiveExtractCallback2>::~CMyComPtr<IFolderArchiveExtractCallback2>
PUBLIC	??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>
PUBLIC	??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
PUBLIC	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ	; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
PUBLIC	??1?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IFolderArchiveExtractCallback>::~CMyComPtr<IFolderArchiveExtractCallback>
PUBLIC	??4?$CMyComPtr@UICompressProgressInfo@@@@QAEPAUICompressProgressInfo@@PAU1@@Z ; CMyComPtr<ICompressProgressInfo>::operator=
PUBLIC	??0?$CObjectVector@UCIndexToPathPair@@@@QAE@XZ	; CObjectVector<CIndexToPathPair>::CObjectVector<CIndexToPathPair>
PUBLIC	??0CHardLinks@@QAE@XZ				; CHardLinks::CHardLinks
PUBLIC	??0?$CRecordVector@I@@QAE@XZ			; CRecordVector<unsigned int>::CRecordVector<unsigned int>
PUBLIC	??0?$CObjectVector@VUString@@@@QAE@XZ		; CObjectVector<UString>::CObjectVector<UString>
PUBLIC	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ	; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
PUBLIC	??0CReadArcItem@@QAE@XZ				; CReadArcItem::CReadArcItem
PUBLIC	??0?$CMyComPtr@UIGetProp@@@@QAE@XZ		; CMyComPtr<IGetProp>::CMyComPtr<IGetProp>
PUBLIC	??0?$CMyComPtr@UIFolderExtractToStreamCallback@@@@QAE@XZ ; CMyComPtr<IFolderExtractToStreamCallback>::CMyComPtr<IFolderExtractToStreamCallback>
PUBLIC	??0?$CMyComPtr@UIFolderArchiveExtractCallback2@@@@QAE@XZ ; CMyComPtr<IFolderArchiveExtractCallback2>::CMyComPtr<IFolderArchiveExtractCallback2>
PUBLIC	??0?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::CMyComPtr<IArchiveExtractCallbackMessage>
PUBLIC	??0?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::CMyComPtr<ICryptoGetTextPassword>
PUBLIC	??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ	; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>
PUBLIC	??0?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IFolderArchiveExtractCallback>::CMyComPtr<IFolderArchiveExtractCallback>
PUBLIC	??0CExtractNtOptions@@QAE@XZ			; CExtractNtOptions::CExtractNtOptions
PUBLIC	??_7CArchiveExtractCallback@@6BICompressProgressInfo@@@ ; CArchiveExtractCallback::`vftable'
PUBLIC	??_7CArchiveExtractCallback@@6BICryptoGetTextPassword@@@ ; CArchiveExtractCallback::`vftable'
PUBLIC	??_7CArchiveExtractCallback@@6BIArchiveExtractCallbackMessage@@@ ; CArchiveExtractCallback::`vftable'
PUBLIC	??_7CArchiveExtractCallback@@6BIArchiveExtractCallback@@@ ; CArchiveExtractCallback::`vftable'
PUBLIC	??0CMyUnknownImp@@QAE@XZ			; CMyUnknownImp::CMyUnknownImp
PUBLIC	??0ICompressProgressInfo@@QAE@XZ		; ICompressProgressInfo::ICompressProgressInfo
PUBLIC	??0ICryptoGetTextPassword@@QAE@XZ		; ICryptoGetTextPassword::ICryptoGetTextPassword
PUBLIC	??0IArchiveExtractCallbackMessage@@QAE@XZ	; IArchiveExtractCallbackMessage::IArchiveExtractCallbackMessage
PUBLIC	??0IArchiveExtractCallback@@QAE@XZ		; IArchiveExtractCallback::IArchiveExtractCallback
PUBLIC	??0CArchiveExtractCallback@@QAE@XZ		; CArchiveExtractCallback::CArchiveExtractCallback
PUBLIC	??_R4CArchiveExtractCallback@@6BIArchiveExtractCallback@@@ ; CArchiveExtractCallback::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCArchiveExtractCallback@@@8		; CArchiveExtractCallback `RTTI Type Descriptor'
PUBLIC	??_R3CArchiveExtractCallback@@8			; CArchiveExtractCallback::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CArchiveExtractCallback@@8			; CArchiveExtractCallback::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CArchiveExtractCallback@@8	; CArchiveExtractCallback::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@IArchiveExtractCallback@@8	; IArchiveExtractCallback::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIArchiveExtractCallback@@@8		; IArchiveExtractCallback `RTTI Type Descriptor'
PUBLIC	??_R3IArchiveExtractCallback@@8			; IArchiveExtractCallback::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IArchiveExtractCallback@@8			; IArchiveExtractCallback::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IProgress@@8			; IProgress::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIProgress@@@8				; IProgress `RTTI Type Descriptor'
PUBLIC	??_R3IProgress@@8				; IProgress::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IProgress@@8				; IProgress::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIUnknown@@@8				; IUnknown `RTTI Type Descriptor'
PUBLIC	??_R3IUnknown@@8				; IUnknown::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IUnknown@@8				; IUnknown::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EC@IProgress@@8			; IProgress::`RTTI Base Class Descriptor at (0,-1,0,66)'
PUBLIC	??_R1A@?0A@EC@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
PUBLIC	??_R13?0A@EA@IArchiveExtractCallbackMessage@@8	; IArchiveExtractCallbackMessage::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AUIArchiveExtractCallbackMessage@@@8	; IArchiveExtractCallbackMessage `RTTI Type Descriptor'
PUBLIC	??_R3IArchiveExtractCallbackMessage@@8		; IArchiveExtractCallbackMessage::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IArchiveExtractCallbackMessage@@8		; IArchiveExtractCallbackMessage::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IArchiveExtractCallbackMessage@@8	; IArchiveExtractCallbackMessage::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EC@IProgress@@8			; IProgress::`RTTI Base Class Descriptor at (4,-1,0,66)'
PUBLIC	??_R13?0A@EC@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
PUBLIC	??_R17?0A@EA@ICryptoGetTextPassword@@8		; ICryptoGetTextPassword::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	??_R0?AUICryptoGetTextPassword@@@8		; ICryptoGetTextPassword `RTTI Type Descriptor'
PUBLIC	??_R3ICryptoGetTextPassword@@8			; ICryptoGetTextPassword::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ICryptoGetTextPassword@@8			; ICryptoGetTextPassword::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ICryptoGetTextPassword@@8		; ICryptoGetTextPassword::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R17?0A@EC@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
PUBLIC	??_R1M@?0A@EA@ICompressProgressInfo@@8		; ICompressProgressInfo::`RTTI Base Class Descriptor at (12,-1,0,64)'
PUBLIC	??_R0?AUICompressProgressInfo@@@8		; ICompressProgressInfo `RTTI Type Descriptor'
PUBLIC	??_R3ICompressProgressInfo@@8			; ICompressProgressInfo::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ICompressProgressInfo@@8			; ICompressProgressInfo::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ICompressProgressInfo@@8		; ICompressProgressInfo::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1M@?0A@EC@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (12,-1,0,66)'
PUBLIC	??_R1BA@?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (16,-1,0,64)'
PUBLIC	??_R0?AVCMyUnknownImp@@@8			; CMyUnknownImp `RTTI Type Descriptor'
PUBLIC	??_R3CMyUnknownImp@@8				; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMyUnknownImp@@8				; CMyUnknownImp::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?QueryInterface@CArchiveExtractCallback@@UAGJABU_GUID@@PAPAX@Z ; CArchiveExtractCallback::QueryInterface
PUBLIC	?AddRef@CArchiveExtractCallback@@UAGKXZ		; CArchiveExtractCallback::AddRef
PUBLIC	?Release@CArchiveExtractCallback@@UAGKXZ	; CArchiveExtractCallback::Release
PUBLIC	?SetTotal@CArchiveExtractCallback@@UAGJ_K@Z	; CArchiveExtractCallback::SetTotal
PUBLIC	?SetCompleted@CArchiveExtractCallback@@UAGJPB_K@Z ; CArchiveExtractCallback::SetCompleted
PUBLIC	?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z ; CArchiveExtractCallback::GetStream
PUBLIC	?PrepareOperation@CArchiveExtractCallback@@UAGJH@Z ; CArchiveExtractCallback::PrepareOperation
PUBLIC	?SetOperationResult@CArchiveExtractCallback@@UAGJH@Z ; CArchiveExtractCallback::SetOperationResult
PUBLIC	??_R4CArchiveExtractCallback@@6BIArchiveExtractCallbackMessage@@@ ; CArchiveExtractCallback::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@CArchiveExtractCallback@@W3AGJABU_GUID@@PAPAX@Z ; [thunk]:CArchiveExtractCallback::QueryInterface`adjustor{4}'
PUBLIC	?AddRef@CArchiveExtractCallback@@W3AGKXZ	; [thunk]:CArchiveExtractCallback::AddRef`adjustor{4}'
PUBLIC	?Release@CArchiveExtractCallback@@W3AGKXZ	; [thunk]:CArchiveExtractCallback::Release`adjustor{4}'
PUBLIC	?SetTotal@CArchiveExtractCallback@@W3AGJ_K@Z	; [thunk]:CArchiveExtractCallback::SetTotal`adjustor{4}'
PUBLIC	?SetCompleted@CArchiveExtractCallback@@W3AGJPB_K@Z ; [thunk]:CArchiveExtractCallback::SetCompleted`adjustor{4}'
PUBLIC	?ReportExtractResult@CArchiveExtractCallback@@UAGJIIH@Z ; CArchiveExtractCallback::ReportExtractResult
PUBLIC	??_R4CArchiveExtractCallback@@6BICryptoGetTextPassword@@@ ; CArchiveExtractCallback::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@CArchiveExtractCallback@@W7AGJABU_GUID@@PAPAX@Z ; [thunk]:CArchiveExtractCallback::QueryInterface`adjustor{8}'
PUBLIC	?AddRef@CArchiveExtractCallback@@W7AGKXZ	; [thunk]:CArchiveExtractCallback::AddRef`adjustor{8}'
PUBLIC	?Release@CArchiveExtractCallback@@W7AGKXZ	; [thunk]:CArchiveExtractCallback::Release`adjustor{8}'
PUBLIC	?CryptoGetTextPassword@CArchiveExtractCallback@@UAGJPAPA_W@Z ; CArchiveExtractCallback::CryptoGetTextPassword
PUBLIC	??_R4CArchiveExtractCallback@@6BICompressProgressInfo@@@ ; CArchiveExtractCallback::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@CArchiveExtractCallback@@WM@AGJABU_GUID@@PAPAX@Z ; [thunk]:CArchiveExtractCallback::QueryInterface`adjustor{12}'
PUBLIC	?AddRef@CArchiveExtractCallback@@WM@AGKXZ	; [thunk]:CArchiveExtractCallback::AddRef`adjustor{12}'
PUBLIC	?Release@CArchiveExtractCallback@@WM@AGKXZ	; [thunk]:CArchiveExtractCallback::Release`adjustor{12}'
PUBLIC	?SetRatioInfo@CArchiveExtractCallback@@UAGJPB_K0@Z ; CArchiveExtractCallback::SetRatioInfo
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??0CLocalProgress@@QAE@XZ:PROC			; CLocalProgress::CLocalProgress
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??0UString@@QAE@XZ:PROC				; UString::UString
;	COMDAT ??_R4CArchiveExtractCallback@@6BICompressProgressInfo@@@
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\archiveextractcallback.cpp
rdata$r	SEGMENT
??_R4CArchiveExtractCallback@@6BICompressProgressInfo@@@ DD 00H ; CArchiveExtractCallback::`RTTI Complete Object Locator'
	DD	0cH
	DD	00H
	DD	FLAT:??_R0?AVCArchiveExtractCallback@@@8
	DD	FLAT:??_R3CArchiveExtractCallback@@8
rdata$r	ENDS
;	COMDAT ??_R4CArchiveExtractCallback@@6BICryptoGetTextPassword@@@
rdata$r	SEGMENT
??_R4CArchiveExtractCallback@@6BICryptoGetTextPassword@@@ DD 00H ; CArchiveExtractCallback::`RTTI Complete Object Locator'
	DD	08H
	DD	00H
	DD	FLAT:??_R0?AVCArchiveExtractCallback@@@8
	DD	FLAT:??_R3CArchiveExtractCallback@@8
rdata$r	ENDS
;	COMDAT ??_R4CArchiveExtractCallback@@6BIArchiveExtractCallbackMessage@@@
rdata$r	SEGMENT
??_R4CArchiveExtractCallback@@6BIArchiveExtractCallbackMessage@@@ DD 00H ; CArchiveExtractCallback::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVCArchiveExtractCallback@@@8
	DD	FLAT:??_R3CArchiveExtractCallback@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R2CMyUnknownImp@@8
rdata$r	SEGMENT
??_R2CMyUnknownImp@@8 DD FLAT:??_R1A@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMyUnknownImp@@8
rdata$r	SEGMENT
??_R3CMyUnknownImp@@8 DD 00H				; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMyUnknownImp@@@8
_DATA	SEGMENT
??_R0?AVCMyUnknownImp@@@8 DD FLAT:??_7type_info@@6B@	; CMyUnknownImp `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMyUnknownImp@@', 00H
_DATA	ENDS
;	COMDAT ??_R1BA@?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R1BA@?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (16,-1,0,64)'
	DD	00H
	DD	010H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R1M@?0A@EC@IUnknown@@8
rdata$r	SEGMENT
??_R1M@?0A@EC@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (12,-1,0,66)'
	DD	00H
	DD	0cH
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ICompressProgressInfo@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ICompressProgressInfo@@8 DD FLAT:??_R0?AUICompressProgressInfo@@@8 ; ICompressProgressInfo::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICompressProgressInfo@@8
rdata$r	ENDS
;	COMDAT ??_R2ICompressProgressInfo@@8
rdata$r	SEGMENT
??_R2ICompressProgressInfo@@8 DD FLAT:??_R1A@?0A@EA@ICompressProgressInfo@@8 ; ICompressProgressInfo::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ICompressProgressInfo@@8
rdata$r	SEGMENT
??_R3ICompressProgressInfo@@8 DD 00H			; ICompressProgressInfo::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ICompressProgressInfo@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUICompressProgressInfo@@@8
_DATA	SEGMENT
??_R0?AUICompressProgressInfo@@@8 DD FLAT:??_7type_info@@6B@ ; ICompressProgressInfo `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUICompressProgressInfo@@', 00H
_DATA	ENDS
;	COMDAT ??_R1M@?0A@EA@ICompressProgressInfo@@8
rdata$r	SEGMENT
??_R1M@?0A@EA@ICompressProgressInfo@@8 DD FLAT:??_R0?AUICompressProgressInfo@@@8 ; ICompressProgressInfo::`RTTI Base Class Descriptor at (12,-1,0,64)'
	DD	01H
	DD	0cH
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICompressProgressInfo@@8
rdata$r	ENDS
;	COMDAT ??_R17?0A@EC@IUnknown@@8
rdata$r	SEGMENT
??_R17?0A@EC@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ICryptoGetTextPassword@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ICryptoGetTextPassword@@8 DD FLAT:??_R0?AUICryptoGetTextPassword@@@8 ; ICryptoGetTextPassword::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICryptoGetTextPassword@@8
rdata$r	ENDS
;	COMDAT ??_R2ICryptoGetTextPassword@@8
rdata$r	SEGMENT
??_R2ICryptoGetTextPassword@@8 DD FLAT:??_R1A@?0A@EA@ICryptoGetTextPassword@@8 ; ICryptoGetTextPassword::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ICryptoGetTextPassword@@8
rdata$r	SEGMENT
??_R3ICryptoGetTextPassword@@8 DD 00H			; ICryptoGetTextPassword::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ICryptoGetTextPassword@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUICryptoGetTextPassword@@@8
_DATA	SEGMENT
??_R0?AUICryptoGetTextPassword@@@8 DD FLAT:??_7type_info@@6B@ ; ICryptoGetTextPassword `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUICryptoGetTextPassword@@', 00H
_DATA	ENDS
;	COMDAT ??_R17?0A@EA@ICryptoGetTextPassword@@8
rdata$r	SEGMENT
??_R17?0A@EA@ICryptoGetTextPassword@@8 DD FLAT:??_R0?AUICryptoGetTextPassword@@@8 ; ICryptoGetTextPassword::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	01H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICryptoGetTextPassword@@8
rdata$r	ENDS
;	COMDAT ??_R13?0A@EC@IUnknown@@8
rdata$r	SEGMENT
??_R13?0A@EC@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R13?0A@EC@IProgress@@8
rdata$r	SEGMENT
??_R13?0A@EC@IProgress@@8 DD FLAT:??_R0?AUIProgress@@@8	; IProgress::`RTTI Base Class Descriptor at (4,-1,0,66)'
	DD	01H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IProgress@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@IArchiveExtractCallbackMessage@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IArchiveExtractCallbackMessage@@8 DD FLAT:??_R0?AUIArchiveExtractCallbackMessage@@@8 ; IArchiveExtractCallbackMessage::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IArchiveExtractCallbackMessage@@8
rdata$r	ENDS
;	COMDAT ??_R2IArchiveExtractCallbackMessage@@8
rdata$r	SEGMENT
??_R2IArchiveExtractCallbackMessage@@8 DD FLAT:??_R1A@?0A@EA@IArchiveExtractCallbackMessage@@8 ; IArchiveExtractCallbackMessage::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IProgress@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3IArchiveExtractCallbackMessage@@8
rdata$r	SEGMENT
??_R3IArchiveExtractCallbackMessage@@8 DD 00H		; IArchiveExtractCallbackMessage::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2IArchiveExtractCallbackMessage@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIArchiveExtractCallbackMessage@@@8
_DATA	SEGMENT
??_R0?AUIArchiveExtractCallbackMessage@@@8 DD FLAT:??_7type_info@@6B@ ; IArchiveExtractCallbackMessage `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIArchiveExtractCallbackMessage@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@IArchiveExtractCallbackMessage@@8
rdata$r	SEGMENT
??_R13?0A@EA@IArchiveExtractCallbackMessage@@8 DD FLAT:??_R0?AUIArchiveExtractCallbackMessage@@@8 ; IArchiveExtractCallbackMessage::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	02H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IArchiveExtractCallbackMessage@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EC@IUnknown@@8
rdata$r	SEGMENT
??_R1A@?0A@EC@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EC@IProgress@@8
rdata$r	SEGMENT
??_R1A@?0A@EC@IProgress@@8 DD FLAT:??_R0?AUIProgress@@@8 ; IProgress::`RTTI Base Class Descriptor at (0,-1,0,66)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IProgress@@8
rdata$r	ENDS
;	COMDAT ??_R2IUnknown@@8
rdata$r	SEGMENT
??_R2IUnknown@@8 DD FLAT:??_R1A@?0A@EA@IUnknown@@8	; IUnknown::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3IUnknown@@8
rdata$r	SEGMENT
??_R3IUnknown@@8 DD 00H					; IUnknown::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIUnknown@@@8
_DATA	SEGMENT
??_R0?AUIUnknown@@@8 DD FLAT:??_7type_info@@6B@		; IUnknown `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIUnknown@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IUnknown@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R2IProgress@@8
rdata$r	SEGMENT
??_R2IProgress@@8 DD FLAT:??_R1A@?0A@EA@IProgress@@8	; IProgress::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3IProgress@@8
rdata$r	SEGMENT
??_R3IProgress@@8 DD 00H				; IProgress::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2IProgress@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIProgress@@@8
_DATA	SEGMENT
??_R0?AUIProgress@@@8 DD FLAT:??_7type_info@@6B@	; IProgress `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIProgress@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IProgress@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IProgress@@8 DD FLAT:??_R0?AUIProgress@@@8 ; IProgress::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IProgress@@8
rdata$r	ENDS
;	COMDAT ??_R2IArchiveExtractCallback@@8
rdata$r	SEGMENT
??_R2IArchiveExtractCallback@@8 DD FLAT:??_R1A@?0A@EA@IArchiveExtractCallback@@8 ; IArchiveExtractCallback::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IProgress@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3IArchiveExtractCallback@@8
rdata$r	SEGMENT
??_R3IArchiveExtractCallback@@8 DD 00H			; IArchiveExtractCallback::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2IArchiveExtractCallback@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIArchiveExtractCallback@@@8
_DATA	SEGMENT
??_R0?AUIArchiveExtractCallback@@@8 DD FLAT:??_7type_info@@6B@ ; IArchiveExtractCallback `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIArchiveExtractCallback@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IArchiveExtractCallback@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IArchiveExtractCallback@@8 DD FLAT:??_R0?AUIArchiveExtractCallback@@@8 ; IArchiveExtractCallback::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IArchiveExtractCallback@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CArchiveExtractCallback@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CArchiveExtractCallback@@8 DD FLAT:??_R0?AVCArchiveExtractCallback@@@8 ; CArchiveExtractCallback::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	0bH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CArchiveExtractCallback@@8
rdata$r	ENDS
;	COMDAT ??_R2CArchiveExtractCallback@@8
rdata$r	SEGMENT
??_R2CArchiveExtractCallback@@8 DD FLAT:??_R1A@?0A@EA@CArchiveExtractCallback@@8 ; CArchiveExtractCallback::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IArchiveExtractCallback@@8
	DD	FLAT:??_R1A@?0A@EC@IProgress@@8
	DD	FLAT:??_R1A@?0A@EC@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@IArchiveExtractCallbackMessage@@8
	DD	FLAT:??_R13?0A@EC@IProgress@@8
	DD	FLAT:??_R13?0A@EC@IUnknown@@8
	DD	FLAT:??_R17?0A@EA@ICryptoGetTextPassword@@8
	DD	FLAT:??_R17?0A@EC@IUnknown@@8
	DD	FLAT:??_R1M@?0A@EA@ICompressProgressInfo@@8
	DD	FLAT:??_R1M@?0A@EC@IUnknown@@8
	DD	FLAT:??_R1BA@?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CArchiveExtractCallback@@8
rdata$r	SEGMENT
??_R3CArchiveExtractCallback@@8 DD 00H			; CArchiveExtractCallback::`RTTI Class Hierarchy Descriptor'
	DD	05H
	DD	0cH
	DD	FLAT:??_R2CArchiveExtractCallback@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCArchiveExtractCallback@@@8
_DATA	SEGMENT
??_R0?AVCArchiveExtractCallback@@@8 DD FLAT:??_7type_info@@6B@ ; CArchiveExtractCallback `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCArchiveExtractCallback@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CArchiveExtractCallback@@6BIArchiveExtractCallback@@@
rdata$r	SEGMENT
??_R4CArchiveExtractCallback@@6BIArchiveExtractCallback@@@ DD 00H ; CArchiveExtractCallback::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCArchiveExtractCallback@@@8
	DD	FLAT:??_R3CArchiveExtractCallback@@8
rdata$r	ENDS
;	COMDAT ??_7CArchiveExtractCallback@@6BICompressProgressInfo@@@
CONST	SEGMENT
??_7CArchiveExtractCallback@@6BICompressProgressInfo@@@ DD FLAT:??_R4CArchiveExtractCallback@@6BICompressProgressInfo@@@ ; CArchiveExtractCallback::`vftable'
	DD	FLAT:?QueryInterface@CArchiveExtractCallback@@WM@AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CArchiveExtractCallback@@WM@AGKXZ
	DD	FLAT:?Release@CArchiveExtractCallback@@WM@AGKXZ
	DD	FLAT:?SetRatioInfo@CArchiveExtractCallback@@UAGJPB_K0@Z
CONST	ENDS
;	COMDAT ??_7CArchiveExtractCallback@@6BICryptoGetTextPassword@@@
CONST	SEGMENT
??_7CArchiveExtractCallback@@6BICryptoGetTextPassword@@@ DD FLAT:??_R4CArchiveExtractCallback@@6BICryptoGetTextPassword@@@ ; CArchiveExtractCallback::`vftable'
	DD	FLAT:?QueryInterface@CArchiveExtractCallback@@W7AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CArchiveExtractCallback@@W7AGKXZ
	DD	FLAT:?Release@CArchiveExtractCallback@@W7AGKXZ
	DD	FLAT:?CryptoGetTextPassword@CArchiveExtractCallback@@UAGJPAPA_W@Z
CONST	ENDS
;	COMDAT ??_7CArchiveExtractCallback@@6BIArchiveExtractCallbackMessage@@@
CONST	SEGMENT
??_7CArchiveExtractCallback@@6BIArchiveExtractCallbackMessage@@@ DD FLAT:??_R4CArchiveExtractCallback@@6BIArchiveExtractCallbackMessage@@@ ; CArchiveExtractCallback::`vftable'
	DD	FLAT:?QueryInterface@CArchiveExtractCallback@@W3AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CArchiveExtractCallback@@W3AGKXZ
	DD	FLAT:?Release@CArchiveExtractCallback@@W3AGKXZ
	DD	FLAT:?SetTotal@CArchiveExtractCallback@@W3AGJ_K@Z
	DD	FLAT:?SetCompleted@CArchiveExtractCallback@@W3AGJPB_K@Z
	DD	FLAT:?ReportExtractResult@CArchiveExtractCallback@@UAGJIIH@Z
CONST	ENDS
;	COMDAT ??_7CArchiveExtractCallback@@6BIArchiveExtractCallback@@@
CONST	SEGMENT
??_7CArchiveExtractCallback@@6BIArchiveExtractCallback@@@ DD FLAT:??_R4CArchiveExtractCallback@@6BIArchiveExtractCallback@@@ ; CArchiveExtractCallback::`vftable'
	DD	FLAT:?QueryInterface@CArchiveExtractCallback@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CArchiveExtractCallback@@UAGKXZ
	DD	FLAT:?Release@CArchiveExtractCallback@@UAGKXZ
	DD	FLAT:?SetTotal@CArchiveExtractCallback@@UAGJ_K@Z
	DD	FLAT:?SetCompleted@CArchiveExtractCallback@@UAGJPB_K@Z
	DD	FLAT:?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z
	DD	FLAT:?PrepareOperation@CArchiveExtractCallback@@UAGJH@Z
	DD	FLAT:?SetOperationResult@CArchiveExtractCallback@@UAGJH@Z
CONST	ENDS
xdata$x	SEGMENT
__ehfuncinfo$??0CArchiveExtractCallback@@QAE@XZ DD 019930522H
	DD	014H
	DD	FLAT:__unwindtable$??0CArchiveExtractCallback@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0CArchiveExtractCallback@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CArchiveExtractCallback@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CArchiveExtractCallback@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CArchiveExtractCallback@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CArchiveExtractCallback@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0CArchiveExtractCallback@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0CArchiveExtractCallback@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0CArchiveExtractCallback@@QAE@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??0CArchiveExtractCallback@@QAE@XZ$7
	DD	07H
	DD	FLAT:__unwindfunclet$??0CArchiveExtractCallback@@QAE@XZ$8
	DD	08H
	DD	FLAT:__unwindfunclet$??0CArchiveExtractCallback@@QAE@XZ$9
	DD	09H
	DD	FLAT:__unwindfunclet$??0CArchiveExtractCallback@@QAE@XZ$10
	DD	0aH
	DD	FLAT:__unwindfunclet$??0CArchiveExtractCallback@@QAE@XZ$11
	DD	0bH
	DD	FLAT:__unwindfunclet$??0CArchiveExtractCallback@@QAE@XZ$12
	DD	0cH
	DD	FLAT:__unwindfunclet$??0CArchiveExtractCallback@@QAE@XZ$13
	DD	0dH
	DD	FLAT:__unwindfunclet$??0CArchiveExtractCallback@@QAE@XZ$14
	DD	0eH
	DD	FLAT:__unwindfunclet$??0CArchiveExtractCallback@@QAE@XZ$15
	DD	0fH
	DD	FLAT:__unwindfunclet$??0CArchiveExtractCallback@@QAE@XZ$16
	DD	010H
	DD	FLAT:__unwindfunclet$??0CArchiveExtractCallback@@QAE@XZ$17
	DD	011H
	DD	FLAT:__unwindfunclet$??0CArchiveExtractCallback@@QAE@XZ$18
	DD	012H
	DD	FLAT:__unwindfunclet$??0CArchiveExtractCallback@@QAE@XZ$19
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv250 = -28						; size = 4
$T78574 = -24						; size = 4
$T78573 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CArchiveExtractCallback@@QAE@XZ PROC			; CArchiveExtractCallback::CArchiveExtractCallback
; _this$ = ecx
; Line 177
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CArchiveExtractCallback@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IArchiveExtractCallback@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0IArchiveExtractCallbackMessage@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0ICryptoGetTextPassword@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0ICompressProgressInfo@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CArchiveExtractCallback@@6BIArchiveExtractCallback@@@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], OFFSET ??_7CArchiveExtractCallback@@6BIArchiveExtractCallbackMessage@@@
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], OFFSET ??_7CArchiveExtractCallback@@6BICryptoGetTextPassword@@@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], OFFSET ??_7CArchiveExtractCallback@@6BICompressProgressInfo@@@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0CExtractNtOptions@@QAE@XZ		; CExtractNtOptions::CExtractNtOptions
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??0?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IFolderArchiveExtractCallback>::CMyComPtr<IFolderArchiveExtractCallback>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??0?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::CMyComPtr<ICryptoGetTextPassword>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??0?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::CMyComPtr<IArchiveExtractCallbackMessage>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	??0?$CMyComPtr@UIFolderArchiveExtractCallback2@@@@QAE@XZ ; CMyComPtr<IFolderArchiveExtractCallback2>::CMyComPtr<IFolderArchiveExtractCallback2>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 92					; 0000005cH
	call	??0?$CMyComPtr@UIFolderExtractToStreamCallback@@@@QAE@XZ ; CMyComPtr<IFolderExtractToStreamCallback>::CMyComPtr<IFolderExtractToStreamCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	call	??0?$CMyComPtr@UIGetProp@@@@QAE@XZ	; CMyComPtr<IGetProp>::CMyComPtr<IGetProp>
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 104				; 00000068H
	call	??0CReadArcItem@@QAE@XZ			; CReadArcItem::CReadArcItem
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 168				; 000000a8H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+194], 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+195], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+196], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 256				; 00000100H
	call	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 264				; 00000108H
	call	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 272				; 00000110H
	call	??0?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::CObjectVector<UString>
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+294], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 296				; 00000128H
	call	??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 14		; 0000000eH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 324				; 00000144H
	call	??0?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::CObjectVector<UString>
	mov	BYTE PTR __$EHRec$[ebp+8], 15		; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 336				; 00000150H
	call	??0?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 16		; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 400				; 00000190H
	call	??0CHardLinks@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 424				; 000001a8H
	call	??0?$CObjectVector@UCIndexToPathPair@@@@QAE@XZ ; CObjectVector<CIndexToPathPair>::CObjectVector<CIndexToPathPair>
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
; Line 178
	push	56					; 00000038H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T78574[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 19		; 00000013H
	cmp	DWORD PTR $T78574[ebp], 0
	je	SHORT $LN3@CArchiveEx
	mov	ecx, DWORD PTR $T78574[ebp]
	call	??0CLocalProgress@@QAE@XZ		; CLocalProgress::CLocalProgress
	mov	DWORD PTR tv250[ebp], eax
	jmp	SHORT $LN4@CArchiveEx
$LN3@CArchiveEx:
	mov	DWORD PTR tv250[ebp], 0
$LN4@CArchiveEx:
	mov	edx, DWORD PTR tv250[ebp]
	mov	DWORD PTR $T78573[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T78573[ebp]
	mov	DWORD PTR [eax+352], ecx
; Line 179
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+352]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 296				; 00000128H
	call	??4?$CMyComPtr@UICompressProgressInfo@@@@QAEPAUICompressProgressInfo@@PAU1@@Z ; CMyComPtr<ICompressProgressInfo>::operator=
; Line 182
	call	?InitLocalPrivileges@@YG_NXZ		; InitLocalPrivileges
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+348], al
; Line 184
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0CArchiveExtractCallback@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	jmp	??1?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IFolderArchiveExtractCallback>::~CMyComPtr<IFolderArchiveExtractCallback>
__unwindfunclet$??0CArchiveExtractCallback@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	jmp	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
__unwindfunclet$??0CArchiveExtractCallback@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	jmp	??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
__unwindfunclet$??0CArchiveExtractCallback@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	jmp	??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>
__unwindfunclet$??0CArchiveExtractCallback@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	jmp	??1?$CMyComPtr@UIFolderArchiveExtractCallback2@@@@QAE@XZ ; CMyComPtr<IFolderArchiveExtractCallback2>::~CMyComPtr<IFolderArchiveExtractCallback2>
__unwindfunclet$??0CArchiveExtractCallback@@QAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??0CArchiveExtractCallback@@QAE@XZ$6:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??0CArchiveExtractCallback@@QAE@XZ$7:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 92					; 0000005cH
	jmp	??1?$CMyComPtr@UIFolderExtractToStreamCallback@@@@QAE@XZ ; CMyComPtr<IFolderExtractToStreamCallback>::~CMyComPtr<IFolderExtractToStreamCallback>
__unwindfunclet$??0CArchiveExtractCallback@@QAE@XZ$8:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	jmp	??1?$CMyComPtr@UIGetProp@@@@QAE@XZ	; CMyComPtr<IGetProp>::~CMyComPtr<IGetProp>
__unwindfunclet$??0CArchiveExtractCallback@@QAE@XZ$9:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 104				; 00000068H
	jmp	??1CReadArcItem@@QAE@XZ
__unwindfunclet$??0CArchiveExtractCallback@@QAE@XZ$10:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 168				; 000000a8H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??0CArchiveExtractCallback@@QAE@XZ$11:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 256				; 00000100H
	jmp	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
__unwindfunclet$??0CArchiveExtractCallback@@QAE@XZ$12:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 264				; 00000108H
	jmp	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
__unwindfunclet$??0CArchiveExtractCallback@@QAE@XZ$13:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 272				; 00000110H
	jmp	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
__unwindfunclet$??0CArchiveExtractCallback@@QAE@XZ$14:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 296				; 00000128H
	jmp	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
__unwindfunclet$??0CArchiveExtractCallback@@QAE@XZ$15:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 324				; 00000144H
	jmp	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
__unwindfunclet$??0CArchiveExtractCallback@@QAE@XZ$16:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 336				; 00000150H
	jmp	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
__unwindfunclet$??0CArchiveExtractCallback@@QAE@XZ$17:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 400				; 00000190H
	jmp	??1CHardLinks@@QAE@XZ
__unwindfunclet$??0CArchiveExtractCallback@@QAE@XZ$18:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 424				; 000001a8H
	jmp	??1?$CObjectVector@UCIndexToPathPair@@@@QAE@XZ ; CObjectVector<CIndexToPathPair>::~CObjectVector<CIndexToPathPair>
__unwindfunclet$??0CArchiveExtractCallback@@QAE@XZ$19:
	mov	eax, DWORD PTR $T78574[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??0CArchiveExtractCallback@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CArchiveExtractCallback@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CArchiveExtractCallback@@QAE@XZ ENDP			; CArchiveExtractCallback::CArchiveExtractCallback
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1UString@@QAE@XZ
_TEXT	SEGMENT
$T78602 = -8						; size = 4
_this$ = -4						; size = 4
??1UString@@QAE@XZ PROC					; UString::~UString, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 470
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T78602[ebp], ecx
	mov	edx, DWORD PTR $T78602[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1UString@@QAE@XZ ENDP					; UString::~UString
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CMyUnknownImp@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMyUnknownImp@@QAE@XZ PROC				; CMyUnknownImp::CMyUnknownImp, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 167
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CMyUnknownImp@@QAE@XZ ENDP				; CMyUnknownImp::CMyUnknownImp
_TEXT	ENDS
PUBLIC	??_7ICryptoGetTextPassword@@6B@			; ICryptoGetTextPassword::`vftable'
PUBLIC	??0IUnknown@@QAE@XZ				; IUnknown::IUnknown
PUBLIC	??_R4ICryptoGetTextPassword@@6B@		; ICryptoGetTextPassword::`RTTI Complete Object Locator'
EXTRN	__purecall:PROC
;	COMDAT ??_R4ICryptoGetTextPassword@@6B@
rdata$r	SEGMENT
??_R4ICryptoGetTextPassword@@6B@ DD 00H			; ICryptoGetTextPassword::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUICryptoGetTextPassword@@@8
	DD	FLAT:??_R3ICryptoGetTextPassword@@8
rdata$r	ENDS
;	COMDAT ??_7ICryptoGetTextPassword@@6B@
CONST	SEGMENT
??_7ICryptoGetTextPassword@@6B@ DD FLAT:??_R4ICryptoGetTextPassword@@6B@ ; ICryptoGetTextPassword::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ICryptoGetTextPassword@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ICryptoGetTextPassword@@QAE@XZ PROC			; ICryptoGetTextPassword::ICryptoGetTextPassword, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ICryptoGetTextPassword@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ICryptoGetTextPassword@@QAE@XZ ENDP			; ICryptoGetTextPassword::ICryptoGetTextPassword
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0IUnknown@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IUnknown@@QAE@XZ PROC				; IUnknown::IUnknown, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0IUnknown@@QAE@XZ ENDP				; IUnknown::IUnknown
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\openarchive.h
xdata$x	SEGMENT
__unwindtable$??0CReadArcItem@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CReadArcItem@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CReadArcItem@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CReadArcItem@@QAE@XZ$2
__ehfuncinfo$??0CReadArcItem@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0CReadArcItem@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CReadArcItem@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CReadArcItem@@QAE@XZ PROC				; CReadArcItem::CReadArcItem, COMDAT
; _this$ = ecx
; Line 248
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CReadArcItem@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::CObjectVector<UString>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0UString@@QAE@XZ			; UString::UString
; Line 251
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+49], 0
; Line 255
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+56], 0
; Line 256
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+60], -1
; Line 258
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CReadArcItem@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??0CReadArcItem@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
__unwindfunclet$??0CReadArcItem@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$??0CReadArcItem@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CReadArcItem@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CReadArcItem@@QAE@XZ ENDP				; CReadArcItem::CReadArcItem
PUBLIC	??0CBoolPair@@QAE@XZ				; CBoolPair::CBoolPair
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CExtractNtOptions@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CExtractNtOptions@@QAE@XZ PROC			; CExtractNtOptions::CExtractNtOptions, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\archiveextractcallback.h
; Line 63
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CBoolPair@@QAE@XZ			; CBoolPair::CBoolPair
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 2
	call	??0CBoolPair@@QAE@XZ			; CBoolPair::CBoolPair
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CBoolPair@@QAE@XZ			; CBoolPair::CBoolPair
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 6
	call	??0CBoolPair@@QAE@XZ			; CBoolPair::CBoolPair
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+9], 0
; Line 64
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+2], 1
; Line 65
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+4], 1
; Line 66
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+6], 1
; Line 67
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CExtractNtOptions@@QAE@XZ ENDP			; CExtractNtOptions::CExtractNtOptions
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CBoolPair@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CBoolPair@@QAE@XZ PROC				; CBoolPair::CBoolPair, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mytypes.h
; Line 15
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CBoolPair@@QAE@XZ ENDP				; CBoolPair::CBoolPair
_TEXT	ENDS
PUBLIC	_==@8
EXTRN	_IID_ICompressProgressInfo:BYTE
EXTRN	_IID_ICryptoGetTextPassword:BYTE
EXTRN	_IID_IArchiveExtractCallbackMessage:BYTE
EXTRN	_IID_IUnknown:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@CArchiveExtractCallback@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
tv138 = -16						; size = 4
tv128 = -12						; size = 4
tv86 = -8						; size = 4
tv75 = -4						; size = 4
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CArchiveExtractCallback@@UAGJABU_GUID@@PAPAX@Z PROC ; CArchiveExtractCallback::QueryInterface, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\archiveextractcallback.h
; Line 258
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN8@QueryInter
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN11@QueryInter
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	mov	DWORD PTR tv75[ebp], edx
	jmp	SHORT $LN12@QueryInter
$LN11@QueryInter:
	mov	DWORD PTR tv75[ebp], 0
$LN12@QueryInter:
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	ecx, DWORD PTR tv75[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	$LN7@QueryInter
$LN8@QueryInter:
	push	OFFSET _IID_IArchiveExtractCallbackMessage
	mov	edx, DWORD PTR _iid$[ebp]
	push	edx
	call	_==@8
	test	eax, eax
	je	SHORT $LN6@QueryInter
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN13@QueryInter
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR tv86[ebp], eax
	jmp	SHORT $LN14@QueryInter
$LN13@QueryInter:
	mov	DWORD PTR tv86[ebp], 0
$LN14@QueryInter:
	mov	ecx, DWORD PTR _outObject$[ebp]
	mov	edx, DWORD PTR tv86[ebp]
	mov	DWORD PTR [ecx], edx
	jmp	SHORT $LN7@QueryInter
$LN6@QueryInter:
	push	OFFSET _IID_ICryptoGetTextPassword
	mov	eax, DWORD PTR _iid$[ebp]
	push	eax
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@QueryInter
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN15@QueryInter
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	mov	DWORD PTR tv128[ebp], ecx
	jmp	SHORT $LN16@QueryInter
$LN15@QueryInter:
	mov	DWORD PTR tv128[ebp], 0
$LN16@QueryInter:
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR tv128[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN7@QueryInter
$LN4@QueryInter:
	push	OFFSET _IID_ICompressProgressInfo
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN17@QueryInter
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR tv138[ebp], edx
	jmp	SHORT $LN18@QueryInter
$LN17@QueryInter:
	mov	DWORD PTR tv138[ebp], 0
$LN18@QueryInter:
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	ecx, DWORD PTR tv138[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN7@QueryInter
$LN2@QueryInter:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN9@QueryInter
$LN7@QueryInter:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	xor	eax, eax
$LN9@QueryInter:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CArchiveExtractCallback@@UAGJABU_GUID@@PAPAX@Z ENDP ; CArchiveExtractCallback::QueryInterface
_TEXT	ENDS
PUBLIC	_IsEqualGUID@8
; Function compile flags: /Odtp /RTCsu
;	COMDAT _==@8
_TEXT	SEGMENT
_guidOne$ = 8						; size = 4
_guidOther$ = 12					; size = 4
_==@8	PROC						; COMDAT
; File c:\program files (x86)\microsoft sdks\windows\v7.0a\include\guiddef.h
; Line 193
	push	ebp
	mov	ebp, esp
; Line 194
	mov	eax, DWORD PTR _guidOther$[ebp]
	push	eax
	mov	ecx, DWORD PTR _guidOne$[ebp]
	push	ecx
	call	_IsEqualGUID@8
; Line 195
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_==@8	ENDP
_TEXT	ENDS
EXTRN	_memcmp:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT _IsEqualGUID@8
_TEXT	SEGMENT
_rguid1$ = 8						; size = 4
_rguid2$ = 12						; size = 4
_IsEqualGUID@8 PROC					; COMDAT
; Line 160
	push	ebp
	mov	ebp, esp
; Line 161
	push	16					; 00000010H
	mov	eax, DWORD PTR _rguid2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rguid1$[ebp]
	push	ecx
	call	_memcmp
	add	esp, 12					; 0000000cH
	neg	eax
	sbb	eax, eax
	add	eax, 1
; Line 162
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_IsEqualGUID@8 ENDP
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CArchiveExtractCallback@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CArchiveExtractCallback@@UAGKXZ PROC		; CArchiveExtractCallback::AddRef, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\archiveextractcallback.h
; Line 258
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+16], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CArchiveExtractCallback@@UAGKXZ ENDP		; CArchiveExtractCallback::AddRef
_TEXT	ENDS
PUBLIC	??_GCArchiveExtractCallback@@QAEPAXI@Z		; CArchiveExtractCallback::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CArchiveExtractCallback@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T78644 = -8						; size = 4
$T78643 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CArchiveExtractCallback@@UAGKXZ PROC		; CArchiveExtractCallback::Release, COMDAT
; Line 258
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+16], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+16]
	jmp	SHORT $LN2@Release
$LN1@Release:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T78644[ebp], edx
	mov	eax, DWORD PTR $T78644[ebp]
	mov	DWORD PTR $T78643[ebp], eax
	cmp	DWORD PTR $T78643[ebp], 0
	je	SHORT $LN4@Release
	push	1
	mov	ecx, DWORD PTR $T78643[ebp]
	call	??_GCArchiveExtractCallback@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release
$LN4@Release:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release:
	xor	eax, eax
$LN2@Release:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CArchiveExtractCallback@@UAGKXZ ENDP		; CArchiveExtractCallback::Release
_TEXT	ENDS
PUBLIC	??1CArchiveExtractCallback@@QAE@XZ		; CArchiveExtractCallback::~CArchiveExtractCallback
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCArchiveExtractCallback@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCArchiveExtractCallback@@QAEPAXI@Z PROC		; CArchiveExtractCallback::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CArchiveExtractCallback@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCArchiveExtractCallback@@QAEPAXI@Z ENDP		; CArchiveExtractCallback::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CArchiveExtractCallback@@QAE@XZ DD 019930522H
	DD	012H
	DD	FLAT:__unwindtable$??1CArchiveExtractCallback@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1CArchiveExtractCallback@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CArchiveExtractCallback@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CArchiveExtractCallback@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CArchiveExtractCallback@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CArchiveExtractCallback@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1CArchiveExtractCallback@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??1CArchiveExtractCallback@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??1CArchiveExtractCallback@@QAE@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??1CArchiveExtractCallback@@QAE@XZ$7
	DD	07H
	DD	FLAT:__unwindfunclet$??1CArchiveExtractCallback@@QAE@XZ$8
	DD	08H
	DD	FLAT:__unwindfunclet$??1CArchiveExtractCallback@@QAE@XZ$9
	DD	09H
	DD	FLAT:__unwindfunclet$??1CArchiveExtractCallback@@QAE@XZ$10
	DD	0aH
	DD	FLAT:__unwindfunclet$??1CArchiveExtractCallback@@QAE@XZ$11
	DD	0bH
	DD	FLAT:__unwindfunclet$??1CArchiveExtractCallback@@QAE@XZ$12
	DD	0cH
	DD	FLAT:__unwindfunclet$??1CArchiveExtractCallback@@QAE@XZ$13
	DD	0dH
	DD	FLAT:__unwindfunclet$??1CArchiveExtractCallback@@QAE@XZ$14
	DD	0eH
	DD	FLAT:__unwindfunclet$??1CArchiveExtractCallback@@QAE@XZ$15
	DD	0fH
	DD	FLAT:__unwindfunclet$??1CArchiveExtractCallback@@QAE@XZ$16
	DD	010H
	DD	FLAT:__unwindfunclet$??1CArchiveExtractCallback@@QAE@XZ$17
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CArchiveExtractCallback@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CArchiveExtractCallback@@QAE@XZ PROC			; CArchiveExtractCallback::~CArchiveExtractCallback, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CArchiveExtractCallback@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 17		; 00000011H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 424				; 000001a8H
	call	??1?$CObjectVector@UCIndexToPathPair@@@@QAE@XZ ; CObjectVector<CIndexToPathPair>::~CObjectVector<CIndexToPathPair>
	mov	BYTE PTR __$EHRec$[ebp+8], 16		; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 400				; 00000190H
	call	??1CHardLinks@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 15		; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 336				; 00000150H
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 14		; 0000000eH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 324				; 00000144H
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 296				; 00000128H
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 272				; 00000110H
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 264				; 00000108H
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 256				; 00000100H
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 168				; 000000a8H
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 104				; 00000068H
	call	??1CReadArcItem@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	call	??1?$CMyComPtr@UIGetProp@@@@QAE@XZ	; CMyComPtr<IGetProp>::~CMyComPtr<IGetProp>
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 92					; 0000005cH
	call	??1?$CMyComPtr@UIFolderExtractToStreamCallback@@@@QAE@XZ ; CMyComPtr<IFolderExtractToStreamCallback>::~CMyComPtr<IFolderExtractToStreamCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	??1?$CMyComPtr@UIFolderArchiveExtractCallback2@@@@QAE@XZ ; CMyComPtr<IFolderArchiveExtractCallback2>::~CMyComPtr<IFolderArchiveExtractCallback2>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??1?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IFolderArchiveExtractCallback>::~CMyComPtr<IFolderArchiveExtractCallback>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CArchiveExtractCallback@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	jmp	??1?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QAE@XZ ; CMyComPtr<IFolderArchiveExtractCallback>::~CMyComPtr<IFolderArchiveExtractCallback>
__unwindfunclet$??1CArchiveExtractCallback@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	jmp	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
__unwindfunclet$??1CArchiveExtractCallback@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	jmp	??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
__unwindfunclet$??1CArchiveExtractCallback@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	jmp	??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>
__unwindfunclet$??1CArchiveExtractCallback@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	jmp	??1?$CMyComPtr@UIFolderArchiveExtractCallback2@@@@QAE@XZ ; CMyComPtr<IFolderArchiveExtractCallback2>::~CMyComPtr<IFolderArchiveExtractCallback2>
__unwindfunclet$??1CArchiveExtractCallback@@QAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??1CArchiveExtractCallback@@QAE@XZ$6:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??1CArchiveExtractCallback@@QAE@XZ$7:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 92					; 0000005cH
	jmp	??1?$CMyComPtr@UIFolderExtractToStreamCallback@@@@QAE@XZ ; CMyComPtr<IFolderExtractToStreamCallback>::~CMyComPtr<IFolderExtractToStreamCallback>
__unwindfunclet$??1CArchiveExtractCallback@@QAE@XZ$8:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	jmp	??1?$CMyComPtr@UIGetProp@@@@QAE@XZ	; CMyComPtr<IGetProp>::~CMyComPtr<IGetProp>
__unwindfunclet$??1CArchiveExtractCallback@@QAE@XZ$9:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 104				; 00000068H
	jmp	??1CReadArcItem@@QAE@XZ
__unwindfunclet$??1CArchiveExtractCallback@@QAE@XZ$10:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 168				; 000000a8H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??1CArchiveExtractCallback@@QAE@XZ$11:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 256				; 00000100H
	jmp	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
__unwindfunclet$??1CArchiveExtractCallback@@QAE@XZ$12:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 264				; 00000108H
	jmp	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
__unwindfunclet$??1CArchiveExtractCallback@@QAE@XZ$13:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 272				; 00000110H
	jmp	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
__unwindfunclet$??1CArchiveExtractCallback@@QAE@XZ$14:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 296				; 00000128H
	jmp	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
__unwindfunclet$??1CArchiveExtractCallback@@QAE@XZ$15:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 324				; 00000144H
	jmp	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
__unwindfunclet$??1CArchiveExtractCallback@@QAE@XZ$16:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 336				; 00000150H
	jmp	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
__unwindfunclet$??1CArchiveExtractCallback@@QAE@XZ$17:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 400				; 00000190H
	jmp	??1CHardLinks@@QAE@XZ
__ehhandler$??1CArchiveExtractCallback@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CArchiveExtractCallback@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CArchiveExtractCallback@@QAE@XZ ENDP			; CArchiveExtractCallback::~CArchiveExtractCallback
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CReadArcItem@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CReadArcItem@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CReadArcItem@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CReadArcItem@@QAE@XZ$2
__ehfuncinfo$??1CReadArcItem@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1CReadArcItem@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CReadArcItem@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CReadArcItem@@QAE@XZ PROC				; CReadArcItem::~CReadArcItem, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CReadArcItem@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CReadArcItem@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??1CReadArcItem@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
__unwindfunclet$??1CReadArcItem@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$??1CReadArcItem@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CReadArcItem@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CReadArcItem@@QAE@XZ ENDP				; CReadArcItem::~CReadArcItem
PUBLIC	??1?$CRecordVector@UCHardLinkNode@@@@QAE@XZ	; CRecordVector<CHardLinkNode>::~CRecordVector<CHardLinkNode>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CHardLinks@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CHardLinks@@QAE@XZ$0
__ehfuncinfo$??1CHardLinks@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CHardLinks@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CHardLinks@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CHardLinks@@QAE@XZ PROC				; CHardLinks::~CHardLinks, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CHardLinks@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@UCHardLinkNode@@@@QAE@XZ ; CRecordVector<CHardLinkNode>::~CRecordVector<CHardLinkNode>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CHardLinks@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@UCHardLinkNode@@@@QAE@XZ ; CRecordVector<CHardLinkNode>::~CRecordVector<CHardLinkNode>
__ehhandler$??1CHardLinks@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CHardLinks@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CHardLinks@@QAE@XZ ENDP				; CHardLinks::~CHardLinks
PUBLIC	??_7IArchiveExtractCallback@@6B@		; IArchiveExtractCallback::`vftable'
PUBLIC	??0IProgress@@QAE@XZ				; IProgress::IProgress
PUBLIC	??_R4IArchiveExtractCallback@@6B@		; IArchiveExtractCallback::`RTTI Complete Object Locator'
;	COMDAT ??_R4IArchiveExtractCallback@@6B@
rdata$r	SEGMENT
??_R4IArchiveExtractCallback@@6B@ DD 00H		; IArchiveExtractCallback::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIArchiveExtractCallback@@@8
	DD	FLAT:??_R3IArchiveExtractCallback@@8
rdata$r	ENDS
;	COMDAT ??_7IArchiveExtractCallback@@6B@
CONST	SEGMENT
??_7IArchiveExtractCallback@@6B@ DD FLAT:??_R4IArchiveExtractCallback@@6B@ ; IArchiveExtractCallback::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0IArchiveExtractCallback@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IArchiveExtractCallback@@QAE@XZ PROC			; IArchiveExtractCallback::IArchiveExtractCallback, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IProgress@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7IArchiveExtractCallback@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0IArchiveExtractCallback@@QAE@XZ ENDP			; IArchiveExtractCallback::IArchiveExtractCallback
_TEXT	ENDS
PUBLIC	??_7IArchiveExtractCallbackMessage@@6B@		; IArchiveExtractCallbackMessage::`vftable'
PUBLIC	??_R4IArchiveExtractCallbackMessage@@6B@	; IArchiveExtractCallbackMessage::`RTTI Complete Object Locator'
;	COMDAT ??_R4IArchiveExtractCallbackMessage@@6B@
rdata$r	SEGMENT
??_R4IArchiveExtractCallbackMessage@@6B@ DD 00H		; IArchiveExtractCallbackMessage::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIArchiveExtractCallbackMessage@@@8
	DD	FLAT:??_R3IArchiveExtractCallbackMessage@@8
rdata$r	ENDS
;	COMDAT ??_7IArchiveExtractCallbackMessage@@6B@
CONST	SEGMENT
??_7IArchiveExtractCallbackMessage@@6B@ DD FLAT:??_R4IArchiveExtractCallbackMessage@@6B@ ; IArchiveExtractCallbackMessage::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0IArchiveExtractCallbackMessage@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IArchiveExtractCallbackMessage@@QAE@XZ PROC		; IArchiveExtractCallbackMessage::IArchiveExtractCallbackMessage, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IProgress@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7IArchiveExtractCallbackMessage@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0IArchiveExtractCallbackMessage@@QAE@XZ ENDP		; IArchiveExtractCallbackMessage::IArchiveExtractCallbackMessage
_TEXT	ENDS
PUBLIC	??_7ICompressProgressInfo@@6B@			; ICompressProgressInfo::`vftable'
PUBLIC	??_R4ICompressProgressInfo@@6B@			; ICompressProgressInfo::`RTTI Complete Object Locator'
;	COMDAT ??_R4ICompressProgressInfo@@6B@
rdata$r	SEGMENT
??_R4ICompressProgressInfo@@6B@ DD 00H			; ICompressProgressInfo::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUICompressProgressInfo@@@8
	DD	FLAT:??_R3ICompressProgressInfo@@8
rdata$r	ENDS
;	COMDAT ??_7ICompressProgressInfo@@6B@
CONST	SEGMENT
??_7ICompressProgressInfo@@6B@ DD FLAT:??_R4ICompressProgressInfo@@6B@ ; ICompressProgressInfo::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ICompressProgressInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ICompressProgressInfo@@QAE@XZ PROC			; ICompressProgressInfo::ICompressProgressInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ICompressProgressInfo@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ICompressProgressInfo@@QAE@XZ ENDP			; ICompressProgressInfo::ICompressProgressInfo
_TEXT	ENDS
PUBLIC	??0?$CRecordVector@UCHardLinkNode@@@@QAE@XZ	; CRecordVector<CHardLinkNode>::CRecordVector<CHardLinkNode>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CHardLinks@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CHardLinks@@QAE@XZ$0
__ehfuncinfo$??0CHardLinks@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CHardLinks@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CHardLinks@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CHardLinks@@QAE@XZ PROC				; CHardLinks::CHardLinks, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CHardLinks@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@UCHardLinkNode@@@@QAE@XZ ; CRecordVector<CHardLinkNode>::CRecordVector<CHardLinkNode>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::CObjectVector<UString>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CHardLinks@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@UCHardLinkNode@@@@QAE@XZ ; CRecordVector<CHardLinkNode>::~CRecordVector<CHardLinkNode>
__ehhandler$??0CHardLinks@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CHardLinks@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CHardLinks@@QAE@XZ ENDP				; CHardLinks::CHardLinks
PUBLIC	??_7IProgress@@6B@				; IProgress::`vftable'
PUBLIC	??_R4IProgress@@6B@				; IProgress::`RTTI Complete Object Locator'
;	COMDAT ??_R4IProgress@@6B@
rdata$r	SEGMENT
??_R4IProgress@@6B@ DD 00H				; IProgress::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIProgress@@@8
	DD	FLAT:??_R3IProgress@@8
rdata$r	ENDS
;	COMDAT ??_7IProgress@@6B@
CONST	SEGMENT
??_7IProgress@@6B@ DD FLAT:??_R4IProgress@@6B@		; IProgress::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0IProgress@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IProgress@@QAE@XZ PROC				; IProgress::IProgress, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7IProgress@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0IProgress@@QAE@XZ ENDP				; IProgress::IProgress
_TEXT	ENDS
PUBLIC	??BUString@@QBEPB_WXZ				; UString::operator wchar_t const *
PUBLIC	??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z	; CObjectVector<UString>::operator=
PUBLIC	?Release@?$CMyComPtr@UIFolderExtractToStreamCallback@@@@QAEXXZ ; CMyComPtr<IFolderExtractToStreamCallback>::Release
PUBLIC	??C?$CMyComPtr@UIFolderExtractToStreamCallback@@@@QBEPAUIFolderExtractToStreamCallback@@XZ ; CMyComPtr<IFolderExtractToStreamCallback>::operator->
PUBLIC	??B?$CMyComPtr@UIFolderExtractToStreamCallback@@@@QBEPAUIFolderExtractToStreamCallback@@XZ ; CMyComPtr<IFolderExtractToStreamCallback>::operator IFolderExtractToStreamCallback *
PUBLIC	??$QueryInterface@UIFolderExtractToStreamCallback@@@?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QBEJABU_GUID@@PAPAUIFolderExtractToStreamCallback@@@Z ; CMyComPtr<IFolderArchiveExtractCallback>::QueryInterface<IFolderExtractToStreamCallback>
PUBLIC	??I?$CMyComPtr@UIFolderExtractToStreamCallback@@@@QAEPAPAUIFolderExtractToStreamCallback@@XZ ; CMyComPtr<IFolderExtractToStreamCallback>::operator&
PUBLIC	??$QueryInterface@UIFolderArchiveExtractCallback2@@@?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QBEJABU_GUID@@PAPAUIFolderArchiveExtractCallback2@@@Z ; CMyComPtr<IFolderArchiveExtractCallback>::QueryInterface<IFolderArchiveExtractCallback2>
PUBLIC	??I?$CMyComPtr@UIFolderArchiveExtractCallback2@@@@QAEPAPAUIFolderArchiveExtractCallback2@@XZ ; CMyComPtr<IFolderArchiveExtractCallback2>::operator&
PUBLIC	??$QueryInterface@UIArchiveExtractCallbackMessage@@@?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QBEJABU_GUID@@PAPAUIArchiveExtractCallbackMessage@@@Z ; CMyComPtr<IFolderArchiveExtractCallback>::QueryInterface<IArchiveExtractCallbackMessage>
PUBLIC	??I?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAEPAPAUIArchiveExtractCallbackMessage@@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::operator&
PUBLIC	??$QueryInterface@UICompressProgressInfo@@@?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QBEJABU_GUID@@PAPAUICompressProgressInfo@@@Z ; CMyComPtr<IFolderArchiveExtractCallback>::QueryInterface<ICompressProgressInfo>
PUBLIC	??I?$CMyComPtr@UICompressProgressInfo@@@@QAEPAPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator&
PUBLIC	?Release@?$CMyComPtr@UICompressProgressInfo@@@@QAEXXZ ; CMyComPtr<ICompressProgressInfo>::Release
PUBLIC	??4?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QAEPAUIFolderArchiveExtractCallback@@PAU1@@Z ; CMyComPtr<IFolderArchiveExtractCallback>::operator=
PUBLIC	?Clear@?$CObjectVector@UCIndexToPathPair@@@@QAEXXZ ; CObjectVector<CIndexToPathPair>::Clear
PUBLIC	?Clear@?$CRecordVector@I@@QAEXXZ		; CRecordVector<unsigned int>::Clear
PUBLIC	?Init@CArchiveExtractCallback@@QAEXABUCExtractNtOptions@@PBVCCensorNode@NWildcard@@PBVCArc@@PAUIFolderArchiveExtractCallback@@_N4ABVUString@@ABV?$CObjectVector@VUString@@@@4_K@Z ; CArchiveExtractCallback::Init
EXTRN	?MyGetFullPathName@NDir@NFile@NWindows@@YG_NPB_WAAVUString@@@Z:PROC ; NWindows::NFile::NDir::MyGetFullPathName
EXTRN	?NormalizeDirPathPrefix@NName@NFile@NWindows@@YGXAAVUString@@@Z:PROC ; NWindows::NFile::NName::NormalizeDirPathPrefix
EXTRN	?IsAltPathPrefix@NName@NFile@NWindows@@YG_NPB_W@Z:PROC ; NWindows::NFile::NName::IsAltPathPrefix
EXTRN	??4UString@@QAEAAV0@ABV0@@Z:PROC		; UString::operator=
EXTRN	?Init@CLocalProgress@@QAEXPAUIProgress@@_N@Z:PROC ; CLocalProgress::Init
EXTRN	_IID_IFolderExtractToStreamCallback:BYTE
EXTRN	_IID_IFolderArchiveExtractCallback2:BYTE
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv154 = -20						; size = 4
_useStreams$76228 = -12					; size = 4
_this$ = -4						; size = 4
_ntOptions$ = 8						; size = 4
_wildcardCensor$ = 12					; size = 4
_arc$ = 16						; size = 4
_extractCallback2$ = 20					; size = 4
_stdOutMode$ = 24					; size = 1
_testMode$ = 28						; size = 1
_directoryPath$ = 32					; size = 4
_removePathParts$ = 36					; size = 4
_removePartsForAltStreams$ = 40				; size = 1
_packSize$ = 44						; size = 8
?Init@CArchiveExtractCallback@@QAEXABUCExtractNtOptions@@PBVCCensorNode@NWildcard@@PBVCArc@@PAUIFolderArchiveExtractCallback@@_N4ABVUString@@ABV?$CObjectVector@VUString@@@@4_K@Z PROC ; CArchiveExtractCallback::Init
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\archiveextractcallback.cpp
; Line 195
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 196
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 324				; 00000144H
	call	?Clear@?$CObjectVector@VUString@@@@QAEXXZ ; CObjectVector<UString>::Clear
; Line 197
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 336				; 00000150H
	call	?Clear@?$CRecordVector@I@@QAEXXZ	; CRecordVector<unsigned int>::Clear
; Line 200
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 400				; 00000190H
	call	?Clear@CHardLinks@@QAEXXZ		; CHardLinks::Clear
; Line 204
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 424				; 000001a8H
	call	?Clear@?$CObjectVector@UCIndexToPathPair@@@@QAEXXZ ; CObjectVector<CIndexToPathPair>::Clear
; Line 207
	mov	eax, DWORD PTR _ntOptions$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	ax, WORD PTR [eax+8]
	mov	WORD PTR [ecx+8], ax
; Line 208
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _wildcardCensor$[ebp]
	mov	DWORD PTR [ecx+36], edx
; Line 210
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _stdOutMode$[ebp]
	mov	BYTE PTR [eax+292], cl
; Line 211
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR _testMode$[ebp]
	mov	BYTE PTR [edx+293], al
; Line 216
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+304]
	mov	DWORD PTR [ecx+312], eax
	mov	edx, DWORD PTR [edx+308]
	mov	DWORD PTR [ecx+316], edx
; Line 217
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+320], 1
; Line 219
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _packSize$[ebp]
	mov	DWORD PTR [ecx+304], edx
	mov	eax, DWORD PTR _packSize$[ebp+4]
	mov	DWORD PTR [ecx+308], eax
; Line 221
	mov	ecx, DWORD PTR _extractCallback2$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??4?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QAEPAUIFolderArchiveExtractCallback@@PAU1@@Z ; CMyComPtr<IFolderArchiveExtractCallback>::operator=
; Line 222
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	?Release@?$CMyComPtr@UICompressProgressInfo@@@@QAEXXZ ; CMyComPtr<ICompressProgressInfo>::Release
; Line 223
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??I?$CMyComPtr@UICompressProgressInfo@@@@QAEPAPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator&
	push	eax
	push	OFFSET _IID_ICompressProgressInfo
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??$QueryInterface@UICompressProgressInfo@@@?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QBEJABU_GUID@@PAPAUICompressProgressInfo@@@Z ; CMyComPtr<IFolderArchiveExtractCallback>::QueryInterface<ICompressProgressInfo>
; Line 224
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??I?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAEPAPAUIArchiveExtractCallbackMessage@@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::operator&
	push	eax
	push	OFFSET _IID_IArchiveExtractCallbackMessage
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??$QueryInterface@UIArchiveExtractCallbackMessage@@@?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QBEJABU_GUID@@PAPAUIArchiveExtractCallbackMessage@@@Z ; CMyComPtr<IFolderArchiveExtractCallback>::QueryInterface<IArchiveExtractCallbackMessage>
; Line 225
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	??I?$CMyComPtr@UIFolderArchiveExtractCallback2@@@@QAEPAPAUIFolderArchiveExtractCallback2@@XZ ; CMyComPtr<IFolderArchiveExtractCallback2>::operator&
	push	eax
	push	OFFSET _IID_IFolderArchiveExtractCallback2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??$QueryInterface@UIFolderArchiveExtractCallback2@@@?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QBEJABU_GUID@@PAPAUIFolderArchiveExtractCallback2@@@Z ; CMyComPtr<IFolderArchiveExtractCallback>::QueryInterface<IFolderArchiveExtractCallback2>
; Line 229
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 92					; 0000005cH
	call	??I?$CMyComPtr@UIFolderExtractToStreamCallback@@@@QAEPAPAUIFolderExtractToStreamCallback@@XZ ; CMyComPtr<IFolderExtractToStreamCallback>::operator&
	push	eax
	push	OFFSET _IID_IFolderExtractToStreamCallback
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??$QueryInterface@UIFolderExtractToStreamCallback@@@?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QBEJABU_GUID@@PAPAUIFolderExtractToStreamCallback@@@Z ; CMyComPtr<IFolderArchiveExtractCallback>::QueryInterface<IFolderExtractToStreamCallback>
; Line 230
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 92					; 0000005cH
	call	??B?$CMyComPtr@UIFolderExtractToStreamCallback@@@@QBEPAUIFolderExtractToStreamCallback@@XZ ; CMyComPtr<IFolderExtractToStreamCallback>::operator IFolderExtractToStreamCallback *
	test	eax, eax
	je	SHORT $LN4@Init
; Line 232
	mov	DWORD PTR _useStreams$76228[ebp], 0
; Line 233
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 92					; 0000005cH
	call	??C?$CMyComPtr@UIFolderExtractToStreamCallback@@@@QBEPAUIFolderExtractToStreamCallback@@XZ ; CMyComPtr<IFolderExtractToStreamCallback>::operator->
	mov	DWORD PTR tv154[ebp], eax
	mov	esi, esp
	lea	edx, DWORD PTR _useStreams$76228[ebp]
	push	edx
	mov	eax, DWORD PTR tv154[ebp]
	push	eax
	mov	ecx, DWORD PTR tv154[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN3@Init
; Line 234
	mov	DWORD PTR _useStreams$76228[ebp], 0
$LN3@Init:
; Line 235
	cmp	DWORD PTR _useStreams$76228[ebp], 0
	jne	SHORT $LN4@Init
; Line 236
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 92					; 0000005cH
	call	?Release@?$CMyComPtr@UIFolderExtractToStreamCallback@@@@QAEXXZ ; CMyComPtr<IFolderExtractToStreamCallback>::Release
$LN4@Init:
; Line 241
	push	1
	mov	ecx, DWORD PTR _extractCallback2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+352]
	call	?Init@CLocalProgress@@QAEXPAUIProgress@@_N@Z ; CLocalProgress::Init
; Line 242
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+352]
	mov	BYTE PTR [ecx+49], 0
; Line 244
	mov	edx, DWORD PTR _removePathParts$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 272				; 00000110H
	call	??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z ; CObjectVector<UString>::operator=
; Line 245
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _removePartsForAltStreams$[ebp]
	mov	BYTE PTR [eax+269], cl
; Line 248
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+288], -1
; Line 249
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+284], 0
; Line 252
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _arc$[ebp]
	mov	DWORD PTR [ecx+20], edx
; Line 253
	mov	eax, DWORD PTR _directoryPath$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
; Line 254
	mov	ecx, DWORD PTR _directoryPath$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
; Line 256
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	?IsAltPathPrefix@NName@NFile@NWindows@@YG_NPB_W@Z ; NWindows::NFile::NName::IsAltPathPrefix
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN5@Init
; Line 259
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 60					; 0000003cH
	push	eax
	call	?NormalizeDirPathPrefix@NName@NFile@NWindows@@YGXAAVUString@@@Z ; NWindows::NFile::NName::NormalizeDirPathPrefix
; Line 260
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	push	ecx
	mov	ecx, DWORD PTR _directoryPath$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	?MyGetFullPathName@NDir@NFile@NWindows@@YG_NPB_WAAVUString@@@Z ; NWindows::NFile::NDir::MyGetFullPathName
; Line 261
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 72					; 00000048H
	push	edx
	call	?NormalizeDirPathPrefix@NName@NFile@NWindows@@YGXAAVUString@@@Z ; NWindows::NFile::NName::NormalizeDirPathPrefix
$LN5@Init:
; Line 263
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@Init
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	44					; 0000002cH
$LN9@Init:
	DD	1
	DD	$LN8@Init
$LN8@Init:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN7@Init
$LN7@Init:
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	115					; 00000073H
	DB	0
?Init@CArchiveExtractCallback@@QAEXABUCExtractNtOptions@@PBVCCensorNode@NWildcard@@PBVCArc@@PAUIFolderArchiveExtractCallback@@_N4ABVUString@@ABV?$CObjectVector@VUString@@@@4_K@Z ENDP ; CArchiveExtractCallback::Init
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??BUString@@QBEPB_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BUString@@QBEPB_WXZ PROC				; UString::operator wchar_t const *, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 476
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??BUString@@QBEPB_WXZ ENDP				; UString::operator wchar_t const *
_TEXT	ENDS
PUBLIC	??C?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QBEPAUIFolderArchiveExtractCallback@@XZ ; CMyComPtr<IFolderArchiveExtractCallback>::operator->
PUBLIC	??B?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QBEPAUIFolderArchiveExtractCallback@@XZ ; CMyComPtr<IFolderArchiveExtractCallback>::operator IFolderArchiveExtractCallback *
xdata$x	SEGMENT
__catchsym$?SetTotal@CArchiveExtractCallback@@UAGJ_K@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?SetTotal@CArchiveExtractCallback@@UAGJ_K@Z$0
__unwindtable$?SetTotal@CArchiveExtractCallback@@UAGJ_K@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?SetTotal@CArchiveExtractCallback@@UAGJ_K@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?SetTotal@CArchiveExtractCallback@@UAGJ_K@Z$2
__ehfuncinfo$?SetTotal@CArchiveExtractCallback@@UAGJ_K@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?SetTotal@CArchiveExtractCallback@@UAGJ_K@Z
	DD	01H
	DD	FLAT:__tryblocktable$?SetTotal@CArchiveExtractCallback@@UAGJ_K@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv89 = -36						; size = 4
tv81 = -32						; size = 4
tv88 = -28						; size = 4
tv87 = -24						; size = 4
$T78724 = -20						; size = 4
__$EHRec$ = -16						; size = 16
_this$ = 8						; size = 4
_size$ = 12						; size = 8
?SetTotal@CArchiveExtractCallback@@UAGJ_K@Z PROC	; CArchiveExtractCallback::SetTotal
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\archiveextractcallback.cpp
; Line 266
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetTotal@CArchiveExtractCallback@@UAGJ_K@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 20					; 00000014H
	push	ebx
	push	esi
	push	edi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
; Line 267
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 268
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+312], ecx
	mov	edx, DWORD PTR _size$[ebp+4]
	mov	DWORD PTR [eax+316], edx
; Line 269
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+320], 1
; Line 270
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+294]
	test	edx, edx
	jne	SHORT $LN1@SetTotal
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??B?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QBEPAUIFolderArchiveExtractCallback@@XZ ; CMyComPtr<IFolderArchiveExtractCallback>::operator IFolderArchiveExtractCallback *
	mov	DWORD PTR tv87[ebp], eax
	cmp	DWORD PTR tv87[ebp], 0
	je	SHORT $LN1@SetTotal
; Line 271
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??C?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QBEPAUIFolderArchiveExtractCallback@@XZ ; CMyComPtr<IFolderArchiveExtractCallback>::operator->
	mov	DWORD PTR tv88[ebp], eax
	mov	eax, DWORD PTR tv88[ebp]
	mov	DWORD PTR tv81[ebp], eax
	mov	esi, esp
	mov	ecx, DWORD PTR _size$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	eax, DWORD PTR tv81[ebp]
	push	eax
	mov	ecx, DWORD PTR tv81[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv89[ebp], eax
	mov	eax, DWORD PTR tv89[ebp]
	jmp	SHORT $LN3@SetTotal
$LN1@SetTotal:
; Line 272
	xor	eax, eax
	jmp	SHORT $LN3@SetTotal
__catch$?SetTotal@CArchiveExtractCallback@@UAGJ_K@Z$0:
; Line 273
	mov	DWORD PTR $T78724[ebp], -2147024882	; 8007000eH
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN8@SetTotal
	ret	0
	mov	eax, __tryend$?SetTotal@CArchiveExtractCallback@@UAGJ_K@Z$1
	ret	0
__tryend$?SetTotal@CArchiveExtractCallback@@UAGJ_K@Z$1:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN3@SetTotal
$LN8@SetTotal:
	mov	eax, DWORD PTR $T78724[ebp]
$LN3@SetTotal:
; Line 274
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
__ehhandler$?SetTotal@CArchiveExtractCallback@@UAGJ_K@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetTotal@CArchiveExtractCallback@@UAGJ_K@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetTotal@CArchiveExtractCallback@@UAGJ_K@Z ENDP	; CArchiveExtractCallback::SetTotal
PUBLIC	??7?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QBE_NXZ ; CMyComPtr<IFolderArchiveExtractCallback>::operator!
xdata$x	SEGMENT
__catchsym$?SetCompleted@CArchiveExtractCallback@@UAGJPB_K@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?SetCompleted@CArchiveExtractCallback@@UAGJPB_K@Z$0
__unwindtable$?SetCompleted@CArchiveExtractCallback@@UAGJPB_K@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?SetCompleted@CArchiveExtractCallback@@UAGJPB_K@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?SetCompleted@CArchiveExtractCallback@@UAGJPB_K@Z$2
__ehfuncinfo$?SetCompleted@CArchiveExtractCallback@@UAGJPB_K@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?SetCompleted@CArchiveExtractCallback@@UAGJPB_K@Z
	DD	01H
	DD	FLAT:__tryblocktable$?SetCompleted@CArchiveExtractCallback@@UAGJPB_K@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv134 = -60						; size = 4
tv93 = -56						; size = 4
tv133 = -52						; size = 4
tv132 = -48						; size = 8
tv131 = -37						; size = 1
$T78737 = -36						; size = 4
_packCur$76266 = -28					; size = 8
__$EHRec$ = -16						; size = 16
_this$ = 8						; size = 4
_completeValue$ = 12					; size = 4
?SetCompleted@CArchiveExtractCallback@@UAGJPB_K@Z PROC	; CArchiveExtractCallback::SetCompleted
; Line 296
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetCompleted@CArchiveExtractCallback@@UAGJPB_K@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 44					; 0000002cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
; Line 297
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 299
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??7?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QBE_NXZ ; CMyComPtr<IFolderArchiveExtractCallback>::operator!
	mov	BYTE PTR tv131[ebp], al
	movzx	eax, BYTE PTR tv131[ebp]
	test	eax, eax
	je	SHORT $LN3@SetComplet
; Line 300
	xor	eax, eax
	jmp	$LN5@SetComplet
$LN3@SetComplet:
; Line 303
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+294]
	test	edx, edx
	je	SHORT $LN2@SetComplet
; Line 305
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+352]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR _packCur$76266[ebp], edx
	mov	eax, DWORD PTR [ecx+36]
	mov	DWORD PTR _packCur$76266[ebp+4], eax
; Line 306
	cmp	DWORD PTR _completeValue$[ebp], 0
	je	SHORT $LN1@SetComplet
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+320]
	test	edx, edx
	je	SHORT $LN1@SetComplet
; Line 307
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+308]
	push	ecx
	mov	edx, DWORD PTR [eax+304]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+316]
	push	ecx
	mov	edx, DWORD PTR [eax+312]
	push	edx
	mov	eax, DWORD PTR _completeValue$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?MyMultDiv64@@YG_K_K00@Z		; MyMultDiv64
	mov	DWORD PTR tv132[ebp], eax
	mov	DWORD PTR tv132[ebp+4], edx
	mov	eax, DWORD PTR _packCur$76266[ebp]
	add	eax, DWORD PTR tv132[ebp]
	mov	ecx, DWORD PTR _packCur$76266[ebp+4]
	adc	ecx, DWORD PTR tv132[ebp+4]
	mov	DWORD PTR _packCur$76266[ebp], eax
	mov	DWORD PTR _packCur$76266[ebp+4], ecx
$LN1@SetComplet:
; Line 308
	lea	edx, DWORD PTR _packCur$76266[ebp]
	mov	DWORD PTR _completeValue$[ebp], edx
$LN2@SetComplet:
; Line 310
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??C?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QBEPAUIFolderArchiveExtractCallback@@XZ ; CMyComPtr<IFolderArchiveExtractCallback>::operator->
	mov	DWORD PTR tv133[ebp], eax
	mov	eax, DWORD PTR tv133[ebp]
	mov	DWORD PTR tv93[ebp], eax
	mov	esi, esp
	mov	ecx, DWORD PTR _completeValue$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv93[ebp]
	push	edx
	mov	eax, DWORD PTR tv93[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv134[ebp], eax
	mov	eax, DWORD PTR tv134[ebp]
	jmp	SHORT $LN5@SetComplet
__catch$?SetCompleted@CArchiveExtractCallback@@UAGJPB_K@Z$0:
; Line 312
	mov	DWORD PTR $T78737[ebp], -2147024882	; 8007000eH
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN10@SetComplet
	ret	0
	mov	eax, __tryend$?SetCompleted@CArchiveExtractCallback@@UAGJPB_K@Z$1
	ret	0
__tryend$?SetCompleted@CArchiveExtractCallback@@UAGJPB_K@Z$1:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN5@SetComplet
$LN10@SetComplet:
	mov	eax, DWORD PTR $T78737[ebp]
$LN5@SetComplet:
; Line 313
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@SetComplet
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN15@SetComplet:
	DD	1
	DD	$LN14@SetComplet
$LN14@SetComplet:
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN12@SetComplet
$LN12@SetComplet:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	67					; 00000043H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__ehhandler$?SetCompleted@CArchiveExtractCallback@@UAGJPB_K@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-64]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetCompleted@CArchiveExtractCallback@@UAGJPB_K@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetCompleted@CArchiveExtractCallback@@UAGJPB_K@Z ENDP	; CArchiveExtractCallback::SetCompleted
EXTRN	__aulldiv:PROC
EXTRN	__allmul:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_unpCur$ = 8						; size = 8
_unpTotal$ = 16						; size = 8
_packTotal$ = 24					; size = 8
?MyMultDiv64@@YG_K_K00@Z PROC				; MyMultDiv64
; Line 287
	push	ebp
	mov	ebp, esp
; Line 288
	lea	eax, DWORD PTR _unpTotal$[ebp]
	push	eax
	lea	ecx, DWORD PTR _packTotal$[ebp]
	push	ecx
	call	?NormalizeVals@@YGXAA_K0@Z		; NormalizeVals
; Line 289
	lea	edx, DWORD PTR _unpTotal$[ebp]
	push	edx
	lea	eax, DWORD PTR _unpCur$[ebp]
	push	eax
	call	?NormalizeVals@@YGXAA_K0@Z		; NormalizeVals
; Line 290
	mov	ecx, DWORD PTR _unpTotal$[ebp]
	or	ecx, DWORD PTR _unpTotal$[ebp+4]
	jne	SHORT $LN1@MyMultDiv6
; Line 291
	mov	DWORD PTR _unpTotal$[ebp], 1
	mov	DWORD PTR _unpTotal$[ebp+4], 0
$LN1@MyMultDiv6:
; Line 292
	mov	edx, DWORD PTR _packTotal$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _packTotal$[ebp]
	push	eax
	mov	ecx, DWORD PTR _unpCur$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _unpCur$[ebp]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _unpTotal$[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR _unpTotal$[ebp]
	push	ecx
	push	edx
	push	eax
	call	__aulldiv
; Line 293
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	24					; 00000018H
?MyMultDiv64@@YG_K_K00@Z ENDP				; MyMultDiv64
_TEXT	ENDS
EXTRN	__aullshr:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv68 = -12						; size = 4
_kMax$ = -8						; size = 8
_v1$ = 8						; size = 4
_v2$ = 12						; size = 4
?NormalizeVals@@YGXAA_K0@Z PROC				; NormalizeVals
; Line 277
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 278
	mov	DWORD PTR _kMax$[ebp], -2147483648	; 80000000H
	mov	DWORD PTR _kMax$[ebp+4], 0
$LN2@NormalizeV:
; Line 279
	mov	eax, DWORD PTR _v1$[ebp]
	mov	DWORD PTR tv68[ebp], eax
	mov	ecx, DWORD PTR tv68[ebp]
	cmp	DWORD PTR [ecx+4], 0
	ja	SHORT $LN5@NormalizeV
	mov	edx, DWORD PTR tv68[ebp]
	cmp	DWORD PTR [edx], -2147483648		; 80000000H
	jbe	SHORT $LN3@NormalizeV
$LN5@NormalizeV:
; Line 281
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	mov	cl, 1
	call	__aullshr
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
; Line 282
	mov	edx, DWORD PTR _v2$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+4]
	mov	cl, 1
	call	__aullshr
	mov	ecx, DWORD PTR _v2$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
; Line 283
	jmp	SHORT $LN2@NormalizeV
$LN3@NormalizeV:
; Line 284
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?NormalizeVals@@YGXAA_K0@Z ENDP				; NormalizeVals
_TEXT	ENDS
PUBLIC	??C?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator->
xdata$x	SEGMENT
__catchsym$?SetRatioInfo@CArchiveExtractCallback@@UAGJPB_K0@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?SetRatioInfo@CArchiveExtractCallback@@UAGJPB_K0@Z$0
__unwindtable$?SetRatioInfo@CArchiveExtractCallback@@UAGJPB_K0@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?SetRatioInfo@CArchiveExtractCallback@@UAGJPB_K0@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?SetRatioInfo@CArchiveExtractCallback@@UAGJPB_K0@Z$2
__ehfuncinfo$?SetRatioInfo@CArchiveExtractCallback@@UAGJPB_K0@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?SetRatioInfo@CArchiveExtractCallback@@UAGJPB_K0@Z
	DD	01H
	DD	FLAT:__tryblocktable$?SetRatioInfo@CArchiveExtractCallback@@UAGJPB_K0@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv77 = -32						; size = 4
tv69 = -28						; size = 4
tv76 = -24						; size = 4
$T78759 = -20						; size = 4
__$EHRec$ = -16						; size = 16
_this$ = 8						; size = 4
_inSize$ = 12						; size = 4
_outSize$ = 16						; size = 4
?SetRatioInfo@CArchiveExtractCallback@@UAGJPB_K0@Z PROC	; CArchiveExtractCallback::SetRatioInfo
; Line 316
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetRatioInfo@CArchiveExtractCallback@@UAGJPB_K0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
; Line 317
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 318
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 284				; 0000011cH
	call	??C?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator->
	mov	DWORD PTR tv76[ebp], eax
	mov	eax, DWORD PTR tv76[ebp]
	mov	DWORD PTR tv69[ebp], eax
	mov	esi, esp
	mov	ecx, DWORD PTR _outSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _inSize$[ebp]
	push	edx
	mov	eax, DWORD PTR tv69[ebp]
	push	eax
	mov	ecx, DWORD PTR tv69[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv77[ebp], eax
	mov	eax, DWORD PTR tv77[ebp]
	jmp	SHORT $LN2@SetRatioIn
__catch$?SetRatioInfo@CArchiveExtractCallback@@UAGJPB_K0@Z$0:
; Line 319
	mov	DWORD PTR $T78759[ebp], -2147024882	; 8007000eH
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN7@SetRatioIn
	ret	0
	mov	eax, __tryend$?SetRatioInfo@CArchiveExtractCallback@@UAGJPB_K0@Z$1
	ret	0
__tryend$?SetRatioInfo@CArchiveExtractCallback@@UAGJPB_K0@Z$1:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN2@SetRatioIn
$LN7@SetRatioIn:
	mov	eax, DWORD PTR $T78759[ebp]
$LN2@SetRatioIn:
; Line 320
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
__ehhandler$?SetRatioInfo@CArchiveExtractCallback@@UAGJPB_K0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetRatioInfo@CArchiveExtractCallback@@UAGJPB_K0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetRatioInfo@CArchiveExtractCallback@@UAGJPB_K0@Z ENDP	; CArchiveExtractCallback::SetRatioInfo
PUBLIC	?Len@UString@@QBEIXZ				; UString::Len
PUBLIC	?Add_PathSepar@UString@@QAEXXZ			; UString::Add_PathSepar
PUBLIC	?Empty@UString@@QAEXXZ				; UString::Empty
PUBLIC	?IsEmpty@UString@@QBE_NXZ			; UString::IsEmpty
PUBLIC	??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[]
PUBLIC	?IsEmpty@?$CObjectVector@VUString@@@@QBE_NXZ	; CObjectVector<UString>::IsEmpty
PUBLIC	?CreateComplexDirectory@CArchiveExtractCallback@@AAEXABV?$CObjectVector@VUString@@@@AAVUString@@@Z ; CArchiveExtractCallback::CreateComplexDirectory
EXTRN	?CreateDir@NDir@NFile@NWindows@@YG_NPB_W@Z:PROC	; NWindows::NFile::NDir::CreateDir
EXTRN	??YUString@@QAEAAV0@ABV0@@Z:PROC		; UString::operator+=
EXTRN	?IsDrivePath2@NName@NFile@NWindows@@YG_NPB_W@Z:PROC ; NWindows::NFile::NName::IsDrivePath2
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_s$76297 = -20						; size = 4
_i$76292 = -16						; size = 4
_s$76286 = -12						; size = 4
_isAbsPath$ = -5					; size = 1
_this$ = -4						; size = 4
_dirPathParts$ = 8					; size = 4
_fullPath$ = 12						; size = 4
?CreateComplexDirectory@CArchiveExtractCallback@@AAEXABV?$CObjectVector@VUString@@@@AAVUString@@@Z PROC ; CArchiveExtractCallback::CreateComplexDirectory
; _this$ = ecx
; Line 323
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 324
	mov	BYTE PTR _isAbsPath$[ebp], 0
; Line 326
	mov	ecx, DWORD PTR _dirPathParts$[ebp]
	call	?IsEmpty@?$CObjectVector@VUString@@@@QBE_NXZ ; CObjectVector<UString>::IsEmpty
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN12@CreateComp
; Line 328
	push	0
	mov	ecx, DWORD PTR _dirPathParts$[ebp]
	call	??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[]
	mov	DWORD PTR _s$76286[ebp], eax
; Line 329
	mov	ecx, DWORD PTR _s$76286[ebp]
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN11@CreateComp
; Line 330
	mov	BYTE PTR _isAbsPath$[ebp], 1
; Line 332
	jmp	SHORT $LN12@CreateComp
$LN11@CreateComp:
; Line 334
	mov	ecx, DWORD PTR _s$76286[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	?IsDrivePath2@NName@NFile@NWindows@@YG_NPB_W@Z ; NWindows::NFile::NName::IsDrivePath2
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN12@CreateComp
; Line 335
	mov	BYTE PTR _isAbsPath$[ebp], 1
$LN12@CreateComp:
; Line 340
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+84], 3
	jne	SHORT $LN8@CreateComp
	movzx	ecx, BYTE PTR _isAbsPath$[ebp]
	test	ecx, ecx
	je	SHORT $LN8@CreateComp
; Line 341
	mov	ecx, DWORD PTR _fullPath$[ebp]
	call	?Empty@UString@@QAEXXZ			; UString::Empty
; Line 342
	jmp	SHORT $LN7@CreateComp
$LN8@CreateComp:
; Line 343
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 60					; 0000003cH
	push	edx
	mov	ecx, DWORD PTR _fullPath$[ebp]
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
$LN7@CreateComp:
; Line 345
	mov	DWORD PTR _i$76292[ebp], 0
	jmp	SHORT $LN6@CreateComp
$LN5@CreateComp:
	mov	eax, DWORD PTR _i$76292[ebp]
	add	eax, 1
	mov	DWORD PTR _i$76292[ebp], eax
$LN6@CreateComp:
	mov	ecx, DWORD PTR _dirPathParts$[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	cmp	DWORD PTR _i$76292[ebp], eax
	jae	SHORT $LN13@CreateComp
; Line 347
	cmp	DWORD PTR _i$76292[ebp], 0
	je	SHORT $LN3@CreateComp
; Line 348
	mov	ecx, DWORD PTR _fullPath$[ebp]
	call	?Add_PathSepar@UString@@QAEXXZ		; UString::Add_PathSepar
$LN3@CreateComp:
; Line 349
	mov	ecx, DWORD PTR _i$76292[ebp]
	push	ecx
	mov	ecx, DWORD PTR _dirPathParts$[ebp]
	call	??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[]
	mov	DWORD PTR _s$76297[ebp], eax
; Line 350
	mov	edx, DWORD PTR _s$76297[ebp]
	push	edx
	mov	ecx, DWORD PTR _fullPath$[ebp]
	call	??YUString@@QAEAAV0@ABV0@@Z		; UString::operator+=
; Line 352
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+84], 3
	jne	SHORT $LN2@CreateComp
; Line 353
	cmp	DWORD PTR _i$76292[ebp], 0
	jne	SHORT $LN2@CreateComp
	mov	ecx, DWORD PTR _s$76297[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	cmp	eax, 2
	jne	SHORT $LN2@CreateComp
	mov	ecx, DWORD PTR _s$76297[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	?IsDrivePath2@NName@NFile@NWindows@@YG_NPB_W@Z ; NWindows::NFile::NName::IsDrivePath2
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@CreateComp
; Line 354
	jmp	SHORT $LN5@CreateComp
$LN2@CreateComp:
; Line 356
	mov	ecx, DWORD PTR _fullPath$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	?CreateDir@NDir@NFile@NWindows@@YG_NPB_W@Z ; NWindows::NFile::NDir::CreateDir
; Line 357
	jmp	$LN5@CreateComp
$LN13@CreateComp:
; Line 358
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?CreateComplexDirectory@CArchiveExtractCallback@@AAEXABV?$CObjectVector@VUString@@@@AAVUString@@@Z ENDP ; CArchiveExtractCallback::CreateComplexDirectory
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Len@UString@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Len@UString@@QBEIXZ PROC				; UString::Len, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 472
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Len@UString@@QBEIXZ ENDP				; UString::Len
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsEmpty@UString@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@UString@@QBE_NXZ PROC				; UString::IsEmpty, COMDAT
; _this$ = ecx
; Line 473
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+4], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@UString@@QBE_NXZ ENDP				; UString::IsEmpty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Empty@UString@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Empty@UString@@QAEXXZ PROC				; UString::Empty, COMDAT
; _this$ = ecx
; Line 474
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	xor	eax, eax
	mov	WORD PTR [edx], ax
	mov	esp, ebp
	pop	ebp
	ret	0
?Empty@UString@@QAEXXZ ENDP				; UString::Empty
_TEXT	ENDS
PUBLIC	??YUString@@QAEAAV0@_W@Z			; UString::operator+=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add_PathSepar@UString@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Add_PathSepar@UString@@QAEXXZ PROC			; UString::Add_PathSepar, COMDAT
; _this$ = ecx
; Line 529
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	push	92					; 0000005cH
	mov	ecx, DWORD PTR _this$[ebp]
	call	??YUString@@QAEAAV0@_W@Z		; UString::operator+=
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Add_PathSepar@UString@@QAEXXZ ENDP			; UString::Add_PathSepar
_TEXT	ENDS
EXTRN	?Grow_1@UString@@AAEXXZ:PROC			; UString::Grow_1
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??YUString@@QAEAAV0@_W@Z
_TEXT	SEGMENT
_chars$ = -12						; size = 4
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_c$ = 8							; size = 2
??YUString@@QAEAAV0@_W@Z PROC				; UString::operator+=, COMDAT
; _this$ = ecx
; Line 515
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 516
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+4]
	jne	SHORT $LN1@operator
; Line 517
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Grow_1@UString@@AAEXXZ			; UString::Grow_1
$LN1@operator:
; Line 518
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _len$[ebp], ecx
; Line 519
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _chars$[ebp], eax
; Line 520
	mov	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _chars$[ebp]
	mov	ax, WORD PTR _c$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
	mov	ecx, DWORD PTR _len$[ebp]
	add	ecx, 1
	mov	DWORD PTR _len$[ebp], ecx
; Line 521
	xor	edx, edx
	mov	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _chars$[ebp]
	mov	WORD PTR [ecx+eax*2], dx
; Line 522
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 523
	mov	eax, DWORD PTR _this$[ebp]
; Line 524
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??YUString@@QAEAAV0@_W@Z ENDP				; UString::operator+=
_TEXT	ENDS
PUBLIC	??C?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator->
PUBLIC	?GetTime@CArchiveExtractCallback@@AAEJHKAAU_FILETIME@@AA_N@Z ; CArchiveExtractCallback::GetTime
xdata$x	SEGMENT
__unwindtable$?GetTime@CArchiveExtractCallback@@AAEJHKAAU_FILETIME@@AA_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetTime@CArchiveExtractCallback@@AAEJHKAAU_FILETIME@@AA_N@Z$0
__ehfuncinfo$?GetTime@CArchiveExtractCallback@@AAEJHKAAU_FILETIME@@AA_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetTime@CArchiveExtractCallback@@AAEJHKAAU_FILETIME@@AA_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv130 = -64						; size = 4
tv71 = -60						; size = 4
$T78787 = -56						; size = 4
$T78786 = -52						; size = 4
$T78783 = -48						; size = 4
___result__$76308 = -44					; size = 4
_prop$ = -36						; size = 16
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_index$ = 8						; size = 4
_propID$ = 12						; size = 4
_filetime$ = 16						; size = 4
_filetimeIsDefined$ = 20				; size = 4
?GetTime@CArchiveExtractCallback@@AAEJHKAAU_FILETIME@@AA_N@Z PROC ; CArchiveExtractCallback::GetTime
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\archiveextractcallback.cpp
; Line 361
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetTime@CArchiveExtractCallback@@AAEJHKAAU_FILETIME@@AA_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 52					; 00000034H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 362
	mov	eax, DWORD PTR _filetimeIsDefined$[ebp]
	mov	BYTE PTR [eax], 0
; Line 363
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 364
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	call	??C?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator->
	mov	DWORD PTR tv71[ebp], eax
	mov	esi, esp
	lea	edx, DWORD PTR _prop$[ebp]
	push	edx
	mov	eax, DWORD PTR _propID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv71[ebp]
	push	edx
	mov	eax, DWORD PTR tv71[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$76308[ebp], eax
	cmp	DWORD PTR ___result__$76308[ebp], 0
	je	SHORT $LN4@GetTime
	mov	eax, DWORD PTR ___result__$76308[ebp]
	mov	DWORD PTR $T78783[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T78783[ebp]
	jmp	SHORT $LN5@GetTime
$LN4@GetTime:
; Line 365
	movzx	ecx, WORD PTR _prop$[ebp]
	cmp	ecx, 64					; 00000040H
	jne	SHORT $LN3@GetTime
; Line 367
	mov	edx, DWORD PTR _filetime$[ebp]
	mov	eax, DWORD PTR _prop$[ebp+8]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _prop$[ebp+12]
	mov	DWORD PTR [edx+4], ecx
; Line 368
	mov	edx, DWORD PTR _filetime$[ebp]
	cmp	DWORD PTR [edx+4], 0
	jne	SHORT $LN7@GetTime
	mov	eax, DWORD PTR _filetime$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN7@GetTime
	mov	DWORD PTR tv130[ebp], 0
	jmp	SHORT $LN8@GetTime
$LN7@GetTime:
	mov	DWORD PTR tv130[ebp], 1
$LN8@GetTime:
	mov	ecx, DWORD PTR _filetimeIsDefined$[ebp]
	mov	dl, BYTE PTR tv130[ebp]
	mov	BYTE PTR [ecx], dl
	jmp	SHORT $LN2@GetTime
$LN3@GetTime:
; Line 370
	movzx	eax, WORD PTR _prop$[ebp]
	test	eax, eax
	je	SHORT $LN2@GetTime
; Line 371
	mov	DWORD PTR $T78786[ebp], -2147467259	; 80004005H
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T78786[ebp]
	jmp	SHORT $LN5@GetTime
$LN2@GetTime:
; Line 372
	mov	DWORD PTR $T78787[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T78787[ebp]
$LN5@GetTime:
; Line 373
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@GetTime
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 64					; 00000040H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN13@GetTime:
	DD	1
	DD	$LN12@GetTime
$LN12@GetTime:
	DD	-36					; ffffffdcH
	DD	16					; 00000010H
	DD	$LN10@GetTime
$LN10@GetTime:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?GetTime@CArchiveExtractCallback@@AAEJHKAAU_FILETIME@@AA_N@Z$0:
	lea	ecx, DWORD PTR _prop$[ebp]
	jmp	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
__ehhandler$?GetTime@CArchiveExtractCallback@@AAEJHKAAU_FILETIME@@AA_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-64]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetTime@CArchiveExtractCallback@@AAEJHKAAU_FILETIME@@AA_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetTime@CArchiveExtractCallback@@AAEJHKAAU_FILETIME@@AA_N@Z ENDP ; CArchiveExtractCallback::GetTime
PUBLIC	?GetUnpackSize@CArchiveExtractCallback@@AAEJXZ	; CArchiveExtractCallback::GetUnpackSize
EXTRN	?GetItemSize@CArc@@QBEJIAA_KAA_N@Z:PROC		; CArc::GetItemSize
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUnpackSize@CArchiveExtractCallback@@AAEJXZ PROC	; CArchiveExtractCallback::GetUnpackSize
; _this$ = ecx
; Line 376
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 377
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 248				; 000000f8H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 240				; 000000f0H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+232]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	call	?GetItemSize@CArc@@QBEJIAA_KAA_N@Z	; CArc::GetItemSize
; Line 378
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetUnpackSize@CArchiveExtractCallback@@AAEJXZ ENDP	; CArchiveExtractCallback::GetUnpackSize
_TEXT	ENDS
PUBLIC	?SendMessageError@CArchiveExtractCallback@@AAEJPBDABVUString@@@Z ; CArchiveExtractCallback::SendMessageError
EXTRN	?AddAscii@UString@@QAEXPBD@Z:PROC		; UString::AddAscii
xdata$x	SEGMENT
__unwindtable$?SendMessageError@CArchiveExtractCallback@@AAEJPBDABVUString@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SendMessageError@CArchiveExtractCallback@@AAEJPBDABVUString@@@Z$0
__ehfuncinfo$?SendMessageError@CArchiveExtractCallback@@AAEJPBDABVUString@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SendMessageError@CArchiveExtractCallback@@AAEJPBDABVUString@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv75 = -44						; size = 4
$T78798 = -40						; size = 4
_s$ = -32						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_message$ = 8						; size = 4
_path$ = 12						; size = 4
?SendMessageError@CArchiveExtractCallback@@AAEJPBDABVUString@@@Z PROC ; CArchiveExtractCallback::SendMessageError
; _this$ = ecx
; Line 387
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SendMessageError@CArchiveExtractCallback@@AAEJPBDABVUString@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-44], eax
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 388
	lea	ecx, DWORD PTR _s$[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 389
	mov	eax, DWORD PTR _message$[ebp]
	push	eax
	lea	ecx, DWORD PTR _s$[ebp]
	call	?AddAscii@UString@@QAEXPBD@Z		; UString::AddAscii
; Line 390
	mov	ecx, DWORD PTR _path$[ebp]
	push	ecx
	lea	edx, DWORD PTR _s$[ebp]
	push	edx
	call	?AddPathToMessage@@YGXAAVUString@@ABV1@@Z ; AddPathToMessage
; Line 391
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??C?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QBEPAUIFolderArchiveExtractCallback@@XZ ; CMyComPtr<IFolderArchiveExtractCallback>::operator->
	mov	DWORD PTR tv75[ebp], eax
	lea	ecx, DWORD PTR _s$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR tv75[ebp]
	push	eax
	mov	ecx, DWORD PTR tv75[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T78798[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _s$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T78798[ebp]
; Line 392
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@SendMessag
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN7@SendMessag:
	DD	1
	DD	$LN6@SendMessag
$LN6@SendMessag:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN4@SendMessag
$LN4@SendMessag:
	DB	115					; 00000073H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SendMessageError@CArchiveExtractCallback@@AAEJPBDABVUString@@@Z$0:
	lea	ecx, DWORD PTR _s$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$?SendMessageError@CArchiveExtractCallback@@AAEJPBDABVUString@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SendMessageError@CArchiveExtractCallback@@AAEJPBDABVUString@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SendMessageError@CArchiveExtractCallback@@AAEJPBDABVUString@@@Z ENDP ; CArchiveExtractCallback::SendMessageError
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_s$ = 8							; size = 4
_path$ = 12						; size = 4
?AddPathToMessage@@YGXAAVUString@@ABV1@@Z PROC		; AddPathToMessage
; Line 381
	push	ebp
	mov	ebp, esp
; Line 382
	push	OFFSET $SG76325
	mov	ecx, DWORD PTR _s$[ebp]
	call	?AddAscii@UString@@QAEXPBD@Z		; UString::AddAscii
; Line 383
	mov	eax, DWORD PTR _path$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	call	??YUString@@QAEAAV0@ABV0@@Z		; UString::operator+=
; Line 384
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?AddPathToMessage@@YGXAAVUString@@ABV1@@Z ENDP		; AddPathToMessage
_TEXT	ENDS
PUBLIC	?SendMessageError_with_LastError@CArchiveExtractCallback@@AAEJPBDABVUString@@@Z ; CArchiveExtractCallback::SendMessageError_with_LastError
EXTRN	?MyFormatMessage@NError@NWindows@@YG?AVUString@@K@Z:PROC ; NWindows::NError::MyFormatMessage
xdata$x	SEGMENT
__unwindtable$?SendMessageError_with_LastError@CArchiveExtractCallback@@AAEJPBDABVUString@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SendMessageError_with_LastError@CArchiveExtractCallback@@AAEJPBDABVUString@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?SendMessageError_with_LastError@CArchiveExtractCallback@@AAEJPBDABVUString@@@Z$1
__ehfuncinfo$?SendMessageError_with_LastError@CArchiveExtractCallback@@AAEJPBDABVUString@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?SendMessageError_with_LastError@CArchiveExtractCallback@@AAEJPBDABVUString@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv86 = -68						; size = 4
tv95 = -64						; size = 4
tv66 = -60						; size = 4
$T78810 = -56						; size = 4
$T78809 = -52						; size = 12
_s$ = -36						; size = 12
_errorCode$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_message$ = 8						; size = 4
_path$ = 12						; size = 4
?SendMessageError_with_LastError@CArchiveExtractCallback@@AAEJPBDABVUString@@@Z PROC ; CArchiveExtractCallback::SendMessageError_with_LastError
; _this$ = ecx
; Line 395
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SendMessageError_with_LastError@CArchiveExtractCallback@@AAEJPBDABVUString@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 56					; 00000038H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-68]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 396
	mov	esi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _errorCode$[ebp], eax
; Line 397
	lea	ecx, DWORD PTR _s$[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 398
	mov	eax, DWORD PTR _message$[ebp]
	push	eax
	lea	ecx, DWORD PTR _s$[ebp]
	call	?AddAscii@UString@@QAEXPBD@Z		; UString::AddAscii
; Line 399
	cmp	DWORD PTR _errorCode$[ebp], 0
	je	SHORT $LN1@SendMessag@2
; Line 401
	push	OFFSET $SG76341
	lea	ecx, DWORD PTR _s$[ebp]
	call	?AddAscii@UString@@QAEXPBD@Z		; UString::AddAscii
; Line 402
	mov	ecx, DWORD PTR _errorCode$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T78809[ebp]
	push	edx
	call	?MyFormatMessage@NError@NWindows@@YG?AVUString@@K@Z ; NWindows::NError::MyFormatMessage
	mov	DWORD PTR tv66[ebp], eax
	mov	eax, DWORD PTR tv66[ebp]
	mov	DWORD PTR tv95[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR tv95[ebp]
	push	ecx
	lea	ecx, DWORD PTR _s$[ebp]
	call	??YUString@@QAEAAV0@ABV0@@Z		; UString::operator+=
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T78809[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
$LN1@SendMessag@2:
; Line 404
	mov	edx, DWORD PTR _path$[ebp]
	push	edx
	lea	eax, DWORD PTR _s$[ebp]
	push	eax
	call	?AddPathToMessage@@YGXAAVUString@@ABV1@@Z ; AddPathToMessage
; Line 405
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??C?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QBEPAUIFolderArchiveExtractCallback@@XZ ; CMyComPtr<IFolderArchiveExtractCallback>::operator->
	mov	DWORD PTR tv86[ebp], eax
	lea	ecx, DWORD PTR _s$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR tv86[ebp]
	push	ecx
	mov	edx, DWORD PTR tv86[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T78810[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _s$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T78810[ebp]
; Line 406
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@SendMessag@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 68					; 00000044H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN9@SendMessag@2:
	DD	1
	DD	$LN8@SendMessag@2
$LN8@SendMessag@2:
	DD	-36					; ffffffdcH
	DD	12					; 0000000cH
	DD	$LN6@SendMessag@2
$LN6@SendMessag@2:
	DB	115					; 00000073H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SendMessageError_with_LastError@CArchiveExtractCallback@@AAEJPBDABVUString@@@Z$0:
	lea	ecx, DWORD PTR _s$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?SendMessageError_with_LastError@CArchiveExtractCallback@@AAEJPBDABVUString@@@Z$1:
	lea	ecx, DWORD PTR $T78809[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$?SendMessageError_with_LastError@CArchiveExtractCallback@@AAEJPBDABVUString@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-68]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SendMessageError_with_LastError@CArchiveExtractCallback@@AAEJPBDABVUString@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SendMessageError_with_LastError@CArchiveExtractCallback@@AAEJPBDABVUString@@@Z ENDP ; CArchiveExtractCallback::SendMessageError_with_LastError
PUBLIC	?SendMessageError2@CArchiveExtractCallback@@AAEJPBDABVUString@@1@Z ; CArchiveExtractCallback::SendMessageError2
xdata$x	SEGMENT
__unwindtable$?SendMessageError2@CArchiveExtractCallback@@AAEJPBDABVUString@@1@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SendMessageError2@CArchiveExtractCallback@@AAEJPBDABVUString@@1@Z$0
__ehfuncinfo$?SendMessageError2@CArchiveExtractCallback@@AAEJPBDABVUString@@1@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SendMessageError2@CArchiveExtractCallback@@AAEJPBDABVUString@@1@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv77 = -44						; size = 4
$T78821 = -40						; size = 4
_s$ = -32						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_message$ = 8						; size = 4
_path1$ = 12						; size = 4
_path2$ = 16						; size = 4
?SendMessageError2@CArchiveExtractCallback@@AAEJPBDABVUString@@1@Z PROC ; CArchiveExtractCallback::SendMessageError2
; _this$ = ecx
; Line 409
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SendMessageError2@CArchiveExtractCallback@@AAEJPBDABVUString@@1@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-44], eax
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 410
	lea	ecx, DWORD PTR _s$[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 411
	mov	eax, DWORD PTR _message$[ebp]
	push	eax
	lea	ecx, DWORD PTR _s$[ebp]
	call	?AddAscii@UString@@QAEXPBD@Z		; UString::AddAscii
; Line 412
	mov	ecx, DWORD PTR _path1$[ebp]
	push	ecx
	lea	edx, DWORD PTR _s$[ebp]
	push	edx
	call	?AddPathToMessage@@YGXAAVUString@@ABV1@@Z ; AddPathToMessage
; Line 413
	mov	eax, DWORD PTR _path2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	?AddPathToMessage@@YGXAAVUString@@ABV1@@Z ; AddPathToMessage
; Line 414
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??C?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QBEPAUIFolderArchiveExtractCallback@@XZ ; CMyComPtr<IFolderArchiveExtractCallback>::operator->
	mov	DWORD PTR tv77[ebp], eax
	lea	ecx, DWORD PTR _s$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR tv77[ebp]
	push	edx
	mov	eax, DWORD PTR tv77[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T78821[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _s$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T78821[ebp]
; Line 415
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@SendMessag@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN7@SendMessag@3:
	DD	1
	DD	$LN6@SendMessag@3
$LN6@SendMessag@3:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN4@SendMessag@3
$LN4@SendMessag@3:
	DB	115					; 00000073H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SendMessageError2@CArchiveExtractCallback@@AAEJPBDABVUString@@1@Z$0:
	lea	ecx, DWORD PTR _s$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$?SendMessageError2@CArchiveExtractCallback@@AAEJPBDABVUString@@1@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SendMessageError2@CArchiveExtractCallback@@AAEJPBDABVUString@@1@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SendMessageError2@CArchiveExtractCallback@@AAEJPBDABVUString@@1@Z ENDP ; CArchiveExtractCallback::SendMessageError2
PUBLIC	?GetPropA@CGetProp@@UAGJKPAUtagPROPVARIANT@@@Z	; CGetProp::GetPropA
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv68 = -4						; size = 4
_this$ = 8						; size = 4
_propID$ = 12						; size = 4
_value$ = 16						; size = 4
?GetPropA@CGetProp@@UAGJKPAUtagPROPVARIANT@@@Z PROC	; CGetProp::GetPropA
; Line 420
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 431
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	??C?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator->
	mov	DWORD PTR tv68[ebp], eax
	mov	esi, esp
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _propID$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR tv68[ebp]
	push	edx
	mov	eax, DWORD PTR tv68[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 432
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?GetPropA@CGetProp@@UAGJKPAUtagPROPVARIANT@@@Z ENDP	; CGetProp::GetPropA
_TEXT	ENDS
PUBLIC	?Back@?$CObjectVector@VUString@@@@QAEAAVUString@@XZ ; CObjectVector<UString>::Back
PUBLIC	??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z	; CObjectVector<UString>::CObjectVector<UString>
PUBLIC	?CensorNode_CheckPath2@@YG_NABVCCensorNode@NWildcard@@ABUCReadArcItem@@AA_N@Z ; CensorNode_CheckPath2
EXTRN	?CheckPathVect@CCensorNode@NWildcard@@QBE_NABV?$CObjectVector@VUString@@@@_NAA_N@Z:PROC ; NWildcard::CCensorNode::CheckPathVect
xdata$x	SEGMENT
__unwindtable$?CensorNode_CheckPath2@@YG_NABVCCensorNode@NWildcard@@ABUCReadArcItem@@AA_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CensorNode_CheckPath2@@YG_NABVCCensorNode@NWildcard@@ABUCReadArcItem@@AA_N@Z$0
__ehfuncinfo$?CensorNode_CheckPath2@@YG_NABVCCensorNode@NWildcard@@ABUCReadArcItem@@AA_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CensorNode_CheckPath2@@YG_NABVCCensorNode@NWildcard@@ABUCReadArcItem@@AA_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T78833 = -54						; size = 1
$T78832 = -53						; size = 1
_include2$ = -45					; size = 1
_back$ = -40						; size = 4
_pathParts2$ = -32					; size = 12
_found$ = -13						; size = 1
__$EHRec$ = -12						; size = 12
_node$ = 8						; size = 4
_item$ = 12						; size = 4
_include$ = 16						; size = 4
?CensorNode_CheckPath2@@YG_NABVCCensorNode@NWildcard@@ABUCReadArcItem@@AA_N@Z PROC ; CensorNode_CheckPath2
; Line 480
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CensorNode_CheckPath2@@YG_NABVCCensorNode@NWildcard@@ABUCReadArcItem@@AA_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 44					; 0000002cH
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 481
	mov	BYTE PTR _found$[ebp], 0
; Line 483
	mov	eax, DWORD PTR _include$[ebp]
	push	eax
	mov	ecx, DWORD PTR _item$[ebp]
	movzx	edx, BYTE PTR [ecx+51]
	test	edx, edx
	sete	al
	movzx	ecx, al
	push	ecx
	mov	edx, DWORD PTR _item$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	ecx, DWORD PTR _node$[ebp]
	call	?CheckPathVect@CCensorNode@NWildcard@@QBE_NABV?$CObjectVector@VUString@@@@_NAA_N@Z ; NWildcard::CCensorNode::CheckPathVect
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@CensorNode
; Line 485
	mov	ecx, DWORD PTR _include$[ebp]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	jne	SHORT $LN5@CensorNode
; Line 486
	mov	al, 1
	jmp	$LN7@CensorNode
$LN5@CensorNode:
; Line 489
	mov	eax, DWORD PTR _item$[ebp]
	movzx	ecx, BYTE PTR [eax+48]
	test	ecx, ecx
	jne	SHORT $LN4@CensorNode
; Line 490
	mov	al, 1
	jmp	$LN7@CensorNode
$LN4@CensorNode:
; Line 493
	mov	BYTE PTR _found$[ebp], 1
$LN6@CensorNode:
; Line 498
	mov	edx, DWORD PTR _item$[ebp]
	movzx	eax, BYTE PTR [edx+48]
	test	eax, eax
	jne	SHORT $LN3@CensorNode
; Line 499
	xor	al, al
	jmp	$LN7@CensorNode
$LN3@CensorNode:
; Line 501
	mov	ecx, DWORD PTR _item$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	lea	ecx, DWORD PTR _pathParts2$[ebp]
	call	??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z ; CObjectVector<UString>::CObjectVector<UString>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 502
	lea	ecx, DWORD PTR _pathParts2$[ebp]
	call	?IsEmpty@?$CObjectVector@VUString@@@@QBE_NXZ ; CObjectVector<UString>::IsEmpty
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@CensorNode
; Line 503
	lea	ecx, DWORD PTR _pathParts2$[ebp]
	call	?AddNew@?$CObjectVector@VUString@@@@QAEAAVUString@@XZ ; CObjectVector<UString>::AddNew
$LN2@CensorNode:
; Line 504
	lea	ecx, DWORD PTR _pathParts2$[ebp]
	call	?Back@?$CObjectVector@VUString@@@@QAEAAVUString@@XZ ; CObjectVector<UString>::Back
	mov	DWORD PTR _back$[ebp], eax
; Line 505
	push	58					; 0000003aH
	mov	ecx, DWORD PTR _back$[ebp]
	call	??YUString@@QAEAAV0@_W@Z		; UString::operator+=
; Line 506
	mov	eax, DWORD PTR _item$[ebp]
	add	eax, 36					; 00000024H
	push	eax
	mov	ecx, DWORD PTR _back$[ebp]
	call	??YUString@@QAEAAV0@ABV0@@Z		; UString::operator+=
; Line 511
	lea	ecx, DWORD PTR _include2$[ebp]
	push	ecx
	push	1
	lea	edx, DWORD PTR _pathParts2$[ebp]
	push	edx
	mov	ecx, DWORD PTR _node$[ebp]
	call	?CheckPathVect@CCensorNode@NWildcard@@QBE_NABV?$CObjectVector@VUString@@@@_NAA_N@Z ; NWildcard::CCensorNode::CheckPathVect
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@CensorNode
; Line 513
	mov	ecx, DWORD PTR _include$[ebp]
	mov	dl, BYTE PTR _include2$[ebp]
	mov	BYTE PTR [ecx], dl
; Line 514
	mov	BYTE PTR $T78832[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _pathParts2$[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	al, BYTE PTR $T78832[ebp]
	jmp	SHORT $LN7@CensorNode
$LN1@CensorNode:
; Line 519
	mov	al, BYTE PTR _found$[ebp]
	mov	BYTE PTR $T78833[ebp], al
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _pathParts2$[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	al, BYTE PTR $T78833[ebp]
$LN7@CensorNode:
; Line 520
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@CensorNode
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN14@CensorNode:
	DD	2
	DD	$LN13@CensorNode
$LN13@CensorNode:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN10@CensorNode
	DD	-45					; ffffffd3H
	DD	1
	DD	$LN11@CensorNode
$LN11@CensorNode:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	50					; 00000032H
	DB	0
$LN10@CensorNode:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	50					; 00000032H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CensorNode_CheckPath2@@YG_NABVCCensorNode@NWildcard@@ABUCReadArcItem@@AA_N@Z$0:
	lea	ecx, DWORD PTR _pathParts2$[ebp]
	jmp	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
__ehhandler$?CensorNode_CheckPath2@@YG_NABVCCensorNode@NWildcard@@ABUCReadArcItem@@AA_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CensorNode_CheckPath2@@YG_NABVCCensorNode@NWildcard@@ABUCReadArcItem@@AA_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CensorNode_CheckPath2@@YG_NABVCCensorNode@NWildcard@@ABUCReadArcItem@@AA_N@Z ENDP ; CensorNode_CheckPath2
PUBLIC	?CensorNode_CheckPath@@YG_NABVCCensorNode@NWildcard@@ABUCReadArcItem@@@Z ; CensorNode_CheckPath
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_include$ = -5						; size = 1
_node$ = 8						; size = 4
_item$ = 12						; size = 4
?CensorNode_CheckPath@@YG_NABVCCensorNode@NWildcard@@ABUCReadArcItem@@@Z PROC ; CensorNode_CheckPath
; Line 523
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 525
	lea	eax, DWORD PTR _include$[ebp]
	push	eax
	mov	ecx, DWORD PTR _item$[ebp]
	push	ecx
	mov	edx, DWORD PTR _node$[ebp]
	push	edx
	call	?CensorNode_CheckPath2@@YG_NABVCCensorNode@NWildcard@@ABUCReadArcItem@@AA_N@Z ; CensorNode_CheckPath2
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@CensorNode@2
; Line 526
	mov	al, BYTE PTR _include$[ebp]
	jmp	SHORT $LN2@CensorNode@2
$LN1@CensorNode@2:
; Line 527
	xor	al, al
$LN2@CensorNode@2:
; Line 528
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@CensorNode@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN6@CensorNode@2:
	DD	1
	DD	$LN5@CensorNode@2
$LN5@CensorNode@2:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN4@CensorNode@2
$LN4@CensorNode@2:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
?CensorNode_CheckPath@@YG_NABVCCensorNode@NWildcard@@ABUCReadArcItem@@@Z ENDP ; CensorNode_CheckPath
_TEXT	ENDS
PUBLIC	?Detach@?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::Detach
PUBLIC	?Init@COutStreamWithHash@@QAEX_N@Z		; COutStreamWithHash::Init
PUBLIC	?SetStream@COutStreamWithHash@@QAEXPAUISequentialOutStream@@@Z ; COutStreamWithHash::SetStream
PUBLIC	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@ABV0@@Z ; CMyComPtr<ISequentialOutStream>::operator=
PUBLIC	?AddToUniqueSorted@?$CObjectVector@UCIndexToPathPair@@@@QAEIABUCIndexToPathPair@@@Z ; CObjectVector<CIndexToPathPair>::AddToUniqueSorted
PUBLIC	?Size@?$CObjectVector@UCIndexToPathPair@@@@QBEIXZ ; CObjectVector<CIndexToPathPair>::Size
PUBLIC	??0CIndexToPathPair@@QAE@IABVUString@@@Z	; CIndexToPathPair::CIndexToPathPair
PUBLIC	?Open@COutFileStream@@QAE_NPB_WK@Z		; COutFileStream::Open
PUBLIC	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
PUBLIC	??0COutFileStream@@QAE@XZ			; COutFileStream::COutFileStream
PUBLIC	?FindInSorted2@?$CRecordVector@UCHardLinkNode@@@@QBEHABUCHardLinkNode@@@Z ; CRecordVector<CHardLinkNode>::FindInSorted2
PUBLIC	?IsEmpty@?$CRecordVector@UCHardLinkNode@@@@QBE_NXZ ; CRecordVector<CHardLinkNode>::IsEmpty
PUBLIC	??1?$CBuffer@E@@QAE@XZ				; CBuffer<unsigned char>::~CBuffer<unsigned char>
PUBLIC	??B?$CBuffer@E@@QAEPAEXZ			; CBuffer<unsigned char>::operator unsigned char *
PUBLIC	?Size@?$CBuffer@E@@QBEIXZ			; CBuffer<unsigned char>::Size
PUBLIC	??0?$CBuffer@E@@QAE@XZ				; CBuffer<unsigned char>::CBuffer<unsigned char>
PUBLIC	?IsReadOnly@CFileInfoBase@NFind@NFile@NWindows@@QBE_NXZ ; NWindows::NFile::NFind::CFileInfoBase::IsReadOnly
PUBLIC	?DeleteFrom@UString@@QAEXI@Z			; UString::DeleteFrom
PUBLIC	?IsDir@CFileInfoBase@NFind@NFile@NWindows@@QBE_NXZ ; NWindows::NFile::NFind::CFileInfoBase::IsDir
PUBLIC	?Left@UString@@QBE?AV1@I@Z			; UString::Left
PUBLIC	??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ	; NWindows::NFile::NFind::CFileInfo::~CFileInfo
PUBLIC	??0CFileInfo@NFind@NFile@NWindows@@QAE@XZ	; NWindows::NFile::NFind::CFileInfo::CFileInfo
PUBLIC	??1CIndexToPathPair@@QAE@XZ			; CIndexToPathPair::~CIndexToPathPair
PUBLIC	??A?$CObjectVector@UCIndexToPathPair@@@@QAEAAUCIndexToPathPair@@I@Z ; CObjectVector<CIndexToPathPair>::operator[]
PUBLIC	?FindInSorted@?$CObjectVector@UCIndexToPathPair@@@@QBEHABUCIndexToPathPair@@@Z ; CObjectVector<CIndexToPathPair>::FindInSorted
PUBLIC	??0CIndexToPathPair@@QAE@I@Z			; CIndexToPathPair::CIndexToPathPair
PUBLIC	?Add@?$CRecordVector@I@@QAEII@Z			; CRecordVector<unsigned int>::Add
PUBLIC	?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z ; CObjectVector<UString>::Add
PUBLIC	?DeleteBack@?$CObjectVector@VUString@@@@QAEXXZ	; CObjectVector<UString>::DeleteBack
PUBLIC	?IsItemAnti@CArc@@QBEJIAA_N@Z			; CArc::IsItemAnti
PUBLIC	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=
PUBLIC	??0CStdOutFileStream@@QAE@XZ			; CStdOutFileStream::CStdOutFileStream
PUBLIC	?BoolToInt@@YGH_N@Z				; BoolToInt
PUBLIC	??B?$CMyComPtr@UIGetProp@@@@QBEPAUIGetProp@@XZ	; CMyComPtr<IGetProp>::operator IGetProp *
PUBLIC	??4?$CMyComPtr@UIGetProp@@@@QAEPAUIGetProp@@PAU1@@Z ; CMyComPtr<IGetProp>::operator=
PUBLIC	??0CGetProp@@QAE@XZ				; CGetProp::CGetProp
PUBLIC	??7?$CMyComPtr@UIGetProp@@@@QBE_NXZ		; CMyComPtr<IGetProp>::operator!
PUBLIC	?DeleteFrontal@?$CObjectVector@VUString@@@@QAEXI@Z ; CObjectVector<UString>::DeleteFrontal
PUBLIC	??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[]
PUBLIC	??1CReparseAttr@NFile@NWindows@@QAE@XZ		; NWindows::NFile::CReparseAttr::~CReparseAttr
PUBLIC	?IsRelative@CReparseAttr@NFile@NWindows@@QBE_NXZ ; NWindows::NFile::CReparseAttr::IsRelative
PUBLIC	?IsMountPoint@CReparseAttr@NFile@NWindows@@QBE_NXZ ; NWindows::NFile::CReparseAttr::IsMountPoint
PUBLIC	??0CReparseAttr@NFile@NWindows@@QAE@XZ		; NWindows::NFile::CReparseAttr::CReparseAttr
PUBLIC	??C?$CMyComPtr@UIArchiveGetRawProps@@@@QBEPAUIArchiveGetRawProps@@XZ ; CMyComPtr<IArchiveGetRawProps>::operator->
PUBLIC	??B?$CMyComPtr@UIArchiveGetRawProps@@@@QBEPAUIArchiveGetRawProps@@XZ ; CMyComPtr<IArchiveGetRawProps>::operator IArchiveGetRawProps *
PUBLIC	?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ; CMyComPtr<ISequentialOutStream>::Release
PUBLIC	?ReleaseStream@COutStreamWithHash@@QAEXXZ	; COutStreamWithHash::ReleaseStream
PUBLIC	__$ArrayPad$
EXTRN	?SetReparseData@NIO@NFile@NWindows@@YG_NPB_W_NPBXK@Z:PROC ; NWindows::NFile::NIO::SetReparseData
EXTRN	?FillLinkData@NFile@NWindows@@YG_NAAV?$CBuffer@E@@PB_W_N@Z:PROC ; NWindows::NFile::FillLinkData
EXTRN	?MyCreateHardLink@NDir@NFile@NWindows@@YG_NPB_W0@Z:PROC ; NWindows::NFile::NDir::MyCreateHardLink
EXTRN	?GetFullPath@NName@NFile@NWindows@@YG_NPB_W0AAVUString@@@Z:PROC ; NWindows::NFile::NName::GetFullPath
EXTRN	?SetFileAttrib@NDir@NFile@NWindows@@YG_NPB_WK@Z:PROC ; NWindows::NFile::NDir::SetFileAttrib
EXTRN	?FindAltStreamColon@NName@NFile@NWindows@@YGHPB_W@Z:PROC ; NWindows::NFile::NName::FindAltStreamColon
EXTRN	?DeleteFileAlways@NDir@NFile@NWindows@@YG_NPB_W@Z:PROC ; NWindows::NFile::NDir::DeleteFileAlways
EXTRN	?MyMoveFile@NDir@NFile@NWindows@@YG_NPB_W0@Z:PROC ; NWindows::NFile::NDir::MyMoveFile
EXTRN	?AutoRenamePath@@YG_NAAVUString@@@Z:PROC	; AutoRenamePath
EXTRN	??H@YG?AVUString@@ABV0@0@Z:PROC			; operator+
EXTRN	?ReverseFind_PathSepar@UString@@QBEHXZ:PROC	; UString::ReverseFind_PathSepar
EXTRN	?Find@CFileInfo@NFind@NFile@NWindows@@QAE_NPB_W@Z:PROC ; NWindows::NFile::NFind::CFileInfo::Find
EXTRN	?RemoveDir@NDir@NFile@NWindows@@YG_NPB_W@Z:PROC	; NWindows::NFile::NDir::RemoveDir
EXTRN	?IsAbsolutePath@NName@NFile@NWindows@@YG_NPB_W@Z:PROC ; NWindows::NFile::NName::IsAbsolutePath
EXTRN	?SetDirTime@NDir@NFile@NWindows@@YG_NPB_WPBU_FILETIME@@11@Z:PROC ; NWindows::NFile::NDir::SetDirTime
EXTRN	?GetNumPrefixParts_if_DrivePath@NWildcard@@YGIAAV?$CObjectVector@VUString@@@@@Z:PROC ; NWildcard::GetNumPrefixParts_if_DrivePath
EXTRN	?Correct_AltStream_Name@@YGXAAVUString@@@Z:PROC	; Correct_AltStream_Name
EXTRN	??0UString@@QAE@ABV0@@Z:PROC			; UString::UString
EXTRN	?Correct_FsPath@@YGX_NAAV?$CObjectVector@VUString@@@@0@Z:PROC ; Correct_FsPath
EXTRN	?Archive_GetItemBoolProp@@YGJPAUIInArchive@@IKAA_N@Z:PROC ; Archive_GetItemBoolProp
EXTRN	?MakePathFromParts@@YG?AVUString@@ABV?$CObjectVector@VUString@@@@@Z:PROC ; MakePathFromParts
EXTRN	?CompareFileNames@@YGHPB_W0@Z:PROC		; CompareFileNames
EXTRN	?SplitPathToParts@@YGXABVUString@@AAV?$CObjectVector@VUString@@@@@Z:PROC ; SplitPathToParts
EXTRN	?DeleteFrontal@UString@@QAEXI@Z:PROC		; UString::DeleteFrontal
EXTRN	?GetRootPrefixSize@NName@NFile@NWindows@@YGIPB_W@Z:PROC ; NWindows::NFile::NName::GetRootPrefixSize
EXTRN	?Replace@UString@@QAEX_W0@Z:PROC		; UString::Replace
EXTRN	?GetPath@CReparseAttr@NFile@NWindows@@QBE?AVUString@@XZ:PROC ; NWindows::NFile::CReparseAttr::GetPath
EXTRN	?Parse@CReparseAttr@NFile@NWindows@@QAE_NPBEI@Z:PROC ; NWindows::NFile::CReparseAttr::Parse
EXTRN	?SetFromBstr@UString@@QAEXPA_W@Z:PROC		; UString::SetFromBstr
EXTRN	?GetItem@CArc@@QBEJIAAUCReadArcItem@@@Z:PROC	; CArc::GetItem
xdata$x	SEGMENT
__catchsym$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$37 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$0
__tryblocktable$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z DD 00H
	DD	024H
	DD	025H
	DD	01H
	DD	FLAT:__catchsym$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$37
__ehfuncinfo$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z DD 019930522H
	DD	026H
	DD	FLAT:__unwindtable$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z
	DD	01H
	DD	FLAT:__tryblocktable$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$4
	DD	02H
	DD	FLAT:__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$5
	DD	02H
	DD	FLAT:__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$6
	DD	05H
	DD	FLAT:__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$7
	DD	06H
	DD	FLAT:__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$8
	DD	02H
	DD	FLAT:__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$9
	DD	08H
	DD	FLAT:__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$10
	DD	02H
	DD	FLAT:__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$11
	DD	02H
	DD	FLAT:__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$12
	DD	02H
	DD	FLAT:__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$13
	DD	0cH
	DD	FLAT:__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$14
	DD	0cH
	DD	FLAT:__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$15
	DD	0cH
	DD	FLAT:__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$16
	DD	0cH
	DD	FLAT:__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$17
	DD	010H
	DD	FLAT:__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$18
	DD	010H
	DD	FLAT:__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$19
	DD	012H
	DD	FLAT:__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$20
	DD	012H
	DD	FLAT:__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$21
	DD	014H
	DD	FLAT:__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$22
	DD	012H
	DD	FLAT:__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$23
	DD	016H
	DD	FLAT:__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$24
	DD	017H
	DD	FLAT:__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$25
	DD	016H
	DD	FLAT:__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$25
	DD	016H
	DD	FLAT:__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$26
	DD	016H
	DD	FLAT:__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$27
	DD	01bH
	DD	FLAT:__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$28
	DD	012H
	DD	FLAT:__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$29
	DD	01dH
	DD	FLAT:__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$30
	DD	01dH
	DD	FLAT:__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$31
	DD	01fH
	DD	FLAT:__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$32
	DD	020H
	DD	FLAT:__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$33
	DD	012H
	DD	FLAT:__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$34
	DD	012H
	DD	FLAT:__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$35
	DD	023H
	DD	FLAT:__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$36
	DD	0ffffffffH
	DD	00H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv1974 = -2060						; size = 4
tv1973 = -2056						; size = 4
tv1972 = -2052						; size = 4
tv1971 = -2048						; size = 4
tv1970 = -2044						; size = 4
tv1969 = -2040						; size = 4
tv1968 = -2036						; size = 4
tv1967 = -2032						; size = 4
tv1966 = -2028						; size = 4
tv1965 = -2024						; size = 4
tv1964 = -2020						; size = 4
tv1963 = -2013						; size = 1
tv1427 = -2012						; size = 4
tv1426 = -2008						; size = 4
tv1962 = -2004						; size = 4
tv1960 = -2000						; size = 4
tv1959 = -1996						; size = 4
tv1958 = -1989						; size = 1
tv1957 = -1988						; size = 4
tv1956 = -1984						; size = 4
tv1955 = -1977						; size = 1
tv1954 = -1976						; size = 4
tv1953 = -1972						; size = 4
tv1952 = -1968						; size = 4
tv1951 = -1961						; size = 1
tv1950 = -1960						; size = 4
tv1949 = -1953						; size = 1
tv1948 = -1952						; size = 4
tv1947 = -1948						; size = 4
tv1946 = -1944						; size = 4
tv1945 = -1940						; size = 4
tv1944 = -1933						; size = 1
tv1943 = -1932						; size = 4
tv1942 = -1928						; size = 4
tv1941 = -1924						; size = 4
tv1940 = -1917						; size = 1
tv1939 = -1916						; size = 4
tv1938 = -1912						; size = 4
tv1937 = -1908						; size = 4
tv1936 = -1901						; size = 1
tv1935 = -1900						; size = 4
tv1934 = -1896						; size = 4
tv1933 = -1889						; size = 1
tv1932 = -1888						; size = 4
tv1931 = -1881						; size = 1
tv1930 = -1880						; size = 4
tv1929 = -1876						; size = 4
tv1928 = -1872						; size = 4
tv1927 = -1868						; size = 4
tv1926 = -1861						; size = 1
tv1722 = -1860						; size = 4
tv1925 = -1856						; size = 4
tv1924 = -1852						; size = 4
tv1923 = -1845						; size = 1
tv1922 = -1844						; size = 4
tv1921 = -1838						; size = 1
tv1920 = -1837						; size = 1
tv1919 = -1836						; size = 4
tv1918 = -1832						; size = 4
tv1917 = -1828						; size = 4
tv1916 = -1824						; size = 4
tv1915 = -1820						; size = 4
tv1914 = -1816						; size = 4
tv1913 = -1812						; size = 4
tv1912 = -1805						; size = 1
tv1911 = -1804						; size = 4
tv1910 = -1800						; size = 4
tv1909 = -1793						; size = 1
tv1908 = -1792						; size = 4
tv1907 = -1785						; size = 1
tv1906 = -1784						; size = 4
tv1905 = -1777						; size = 1
tv1904 = -1776						; size = 4
tv1903 = -1772						; size = 4
tv1902 = -1768						; size = 4
tv1901 = -1761						; size = 1
tv1900 = -1760						; size = 4
tv1899 = -1756						; size = 4
tv1898 = -1749						; size = 1
tv1063 = -1748						; size = 4
tv1897 = -1744						; size = 4
tv1896 = -1740						; size = 4
tv1895 = -1736						; size = 4
tv991 = -1732						; size = 4
tv1894 = -1728						; size = 4
tv1040 = -1724						; size = 4
tv1032 = -1720						; size = 4
tv1893 = -1716						; size = 4
tv1631 = -1712						; size = 4
tv1892 = -1708						; size = 4
tv972 = -1704						; size = 4
tv1891 = -1697						; size = 1
tv1890 = -1696						; size = 4
tv1889 = -1692						; size = 4
tv1888 = -1685						; size = 1
tv1887 = -1684						; size = 4
tv1886 = -1680						; size = 4
tv1885 = -1676						; size = 4
tv1884 = -1672						; size = 4
tv1883 = -1668						; size = 4
tv1617 = -1664						; size = 4
tv1882 = -1660						; size = 4
tv1881 = -1656						; size = 4
tv1880 = -1652						; size = 4
tv1879 = -1648						; size = 4
tv880 = -1644						; size = 4
tv869 = -1640						; size = 4
tv857 = -1636						; size = 4
tv858 = -1632						; size = 4
tv1878 = -1628						; size = 4
tv1877 = -1622						; size = 1
tv1876 = -1621						; size = 1
tv1875 = -1620						; size = 4
tv1874 = -1616						; size = 4
tv1873 = -1612						; size = 4
tv1872 = -1608						; size = 4
tv1871 = -1601						; size = 1
tv778 = -1600						; size = 4
tv1870 = -1593						; size = 1
tv1869 = -1592						; size = 4
tv1868 = -1588						; size = 4
tv1867 = -1584						; size = 4
tv1866 = -1580						; size = 4
tv1865 = -1576						; size = 4
tv1864 = -1572						; size = 4
tv1863 = -1568						; size = 4
tv638 = -1564						; size = 4
tv1862 = -1560						; size = 4
tv1860 = -1556						; size = 4
tv1859 = -1552						; size = 4
tv1858 = -1548						; size = 4
tv1857 = -1544						; size = 4
tv1856 = -1540						; size = 4
tv1855 = -1536						; size = 4
tv598 = -1532						; size = 4
tv1854 = -1528						; size = 4
tv1853 = -1521						; size = 1
tv1852 = -1520						; size = 4
tv558 = -1516						; size = 4
tv1851 = -1512						; size = 4
tv1849 = -1508						; size = 4
tv1848 = -1501						; size = 1
tv1847 = -1500						; size = 4
tv1846 = -1496						; size = 4
tv1845 = -1489						; size = 1
tv1844 = -1488						; size = 4
tv1843 = -1484						; size = 4
tv1842 = -1477						; size = 1
tv1841 = -1476						; size = 4
tv1840 = -1472						; size = 4
tv1839 = -1468						; size = 4
tv1838 = -1464						; size = 4
tv1837 = -1460						; size = 4
tv1836 = -1456						; size = 4
tv1835 = -1452						; size = 4
tv1834 = -1448						; size = 4
tv1833 = -1444						; size = 4
tv1832 = -1440						; size = 4
tv1831 = -1436						; size = 4
tv1830 = -1429						; size = 1
tv458 = -1428						; size = 4
tv1829 = -1421						; size = 1
tv1828 = -1420						; size = 4
tv1827 = -1416						; size = 4
tv1826 = -1410						; size = 1
tv1825 = -1409						; size = 1
tv1824 = -1408						; size = 4
tv1584 = -1404						; size = 4
tv1823 = -1400						; size = 4
tv1822 = -1396						; size = 4
tv1821 = -1392						; size = 4
tv1820 = -1388						; size = 4
tv1819 = -1384						; size = 4
tv1818 = -1380						; size = 4
tv1817 = -1376						; size = 4
tv1816 = -1372						; size = 4
tv1815 = -1368						; size = 4
tv1814 = -1364						; size = 4
tv1813 = -1357						; size = 1
tv1812 = -1356						; size = 4
tv1811 = -1351						; size = 1
tv1810 = -1350						; size = 1
tv1809 = -1349						; size = 1
tv1581 = -1348						; size = 4
tv1808 = -1344						; size = 4
tv1807 = -1337						; size = 1
tv1806 = -1336						; size = 4
tv1805 = -1332						; size = 4
tv266 = -1328						; size = 4
tv1804 = -1324						; size = 4
tv1803 = -1320						; size = 4
tv1802 = -1313						; size = 1
tv1801 = -1312						; size = 4
tv1800 = -1308						; size = 4
tv1799 = -1304						; size = 4
tv1798 = -1300						; size = 4
tv1797 = -1296						; size = 4
tv1796 = -1292						; size = 4
tv1795 = -1288						; size = 4
tv1794 = -1284						; size = 4
tv1793 = -1280						; size = 4
tv1792 = -1276						; size = 4
$T78930 = -1272						; size = 4
$T78929 = -1268						; size = 4
$T78928 = -1264						; size = 4
$T78927 = -1260						; size = 4
$T78926 = -1256						; size = 4
$T78923 = -1252						; size = 4
$T78922 = -1248						; size = 4
$T78921 = -1244						; size = 4
$T78920 = -1240						; size = 4
$T78919 = -1236						; size = 4
$T78918 = -1232						; size = 4
$T78917 = -1228						; size = 4
$T78916 = -1224						; size = 4
$T78915 = -1220						; size = 4
$T78914 = -1216						; size = 4
$T78913 = -1212						; size = 12
$T78912 = -1200						; size = 4
$T78911 = -1196						; size = 4
$T78910 = -1192						; size = 4
$T78909 = -1188						; size = 4
$T78908 = -1184						; size = 4
$T78907 = -1180						; size = 4
$T78906 = -1176						; size = 4
$T78905 = -1172						; size = 4
$T78904 = -1168						; size = 4
$T78903 = -1164						; size = 4
$T78902 = -1160						; size = 4
$T78901 = -1156						; size = 4
$T78900 = -1152						; size = 4
$T78899 = -1148						; size = 4
$T78898 = -1144						; size = 4
$T78893 = -1140						; size = 12
$T78892 = -1128						; size = 4
$T78891 = -1124						; size = 4
$T78890 = -1120						; size = 12
$T78878 = -1108						; size = 4
$T78877 = -1104						; size = 4
$T78876 = -1100						; size = 4
$T78875 = -1096						; size = 4
$T78874 = -1092						; size = 4
$T78873 = -1088						; size = 4
$T78870 = -1084						; size = 4
$T78869 = -1080						; size = 4
$T78868 = -1076						; size = 4
$T78865 = -1072						; size = 4
$T78864 = -1068						; size = 4
$T78863 = -1064						; size = 4
$T78862 = -1060						; size = 4
$T78861 = -1056						; size = 4
$T78860 = -1052						; size = 4
$T78859 = -1048						; size = 4
$T78858 = -1044						; size = 4
$T78857 = -1040						; size = 12
$T78856 = -1028						; size = 12
$T78855 = -1016						; size = 4
$T78854 = -1012						; size = 4
$T78853 = -1008						; size = 4
$T78852 = -1004						; size = 4
$T78851 = -1000						; size = 4
$T78850 = -996						; size = 4
$T78849 = -992						; size = 4
___result__$76800 = -988				; size = 4
_insertIndex$76797 = -984				; size = 4
_oldSize$76796 = -980					; size = 4
_pair$76795 = -972					; size = 16
___result__$76788 = -952				; size = 4
_outStreamLoc$76786 = -944				; size = 4
___result__$76774 = -936				; size = 4
_hl$76770 = -932					; size = 4
_linkIndex$76768 = -928					; size = 4
___result__$76764 = -924				; size = 4
_defined$76763 = -913					; size = 1
_h$76762 = -904						; size = 16
_needWriteFile$76760 = -881				; size = 1
___result__$76755 = -880				; size = 4
___result__$76748 = -876				; size = 4
_attr$76746 = -868					; size = 32
_data$76744 = -828					; size = 8
___result__$76737 = -816				; size = 4
___result__$76729 = -812				; size = 4
_existPath$76725 = -804					; size = 12
___result__$76720 = -788				; size = 4
_relatPath$76716 = -780					; size = 12
_parentFi$76711 = -760					; size = 56
_parentFsPath$76710 = -696				; size = 12
_colonPos$76707 = -680					; size = 4
___result__$76701 = -676				; size = 4
_needDelete$76698 = -669				; size = 1
___result__$76692 = -668				; size = 4
___result__$76684 = -664				; size = 4
___result__$76678 = -660				; size = 4
_existPath$76676 = -652					; size = 12
___result__$76669 = -636				; size = 4
___result__$76645 = -632				; size = 4
_overwriteResult$76644 = -624				; size = 4
_realFullProcessedPath$76641 = -612			; size = 12
_slashPos$76640 = -596					; size = 4
_fileInfo$76630 = -588					; size = 56
_isRenamed$76622 = -525					; size = 1
_s$76621 = -520						; size = 12
_pair$76619 = -504					; size = 4
_renIndex$76617 = -500					; size = 4
_pair$76616 = -492					; size = 16
_fullProcessedPath$76609 = -468				; size = 12
_fullPathNew$76607 = -448				; size = 12
_processedPath$76601 = -428				; size = 12
_name$76598 = -412					; size = 4
_needColon$76595 = -405					; size = 1
_s$76594 = -400						; size = 12
___result__$76590 = -384				; size = 4
_isAnti$76589 = -373					; size = 1
___result__$76586 = -368				; size = 4
___result__$76583 = -364				; size = 4
___result__$76580 = -360				; size = 4
___result__$76571 = -356				; size = 4
_prop$76570 = -348					; size = 16
_outStreamLoc$76562 = -324				; size = 4
_name$76555 = -312					; size = 12
_i$76533 = -296						; size = 4
_badPrefix$76524 = -289					; size = 1
_numRemovePathParts$76517 = -288			; size = 4
_numRemovePathParts$76507 = -284			; size = 4
_pathParts$76500 = -280					; size = 4
___result__$76494 = -276				; size = 4
___result__$76491 = -272				; size = 4
_i$76484 = -268						; size = 4
_badPrefix$76483 = -261					; size = 1
_pathParts$76482 = -256					; size = 12
_n$76479 = -240						; size = 4
_reparse$76471 = -232					; size = 32
_s$76470 = -192						; size = 12
_propType$76465 = -172					; size = 4
_dataSize$76464 = -160					; size = 4
_data$76463 = -148					; size = 4
_isOkReparse$76461 = -137				; size = 1
___result__$76452 = -136				; size = 4
_prop$76451 = -128					; size = 16
___result__$76442 = -108				; size = 4
_prop$76441 = -100					; size = 16
_linkPath$76440 = -76					; size = 12
_isRelative$76439 = -59					; size = 1
_isJunction$76438 = -58					; size = 1
_isHardLink$76437 = -57					; size = 1
___result__$76430 = -56					; size = 4
_prop$76429 = -48					; size = 16
___result__$76427 = -28					; size = 4
_archive$76423 = -24					; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_this$ = 8						; size = 4
_index$ = 12						; size = 4
_outStream$ = 16					; size = 4
_askExtractMode$ = 20					; size = 4
?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z PROC ; CArchiveExtractCallback::GetStream
; Line 545
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 2044				; 000007fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-2060]
	mov	ecx, 511				; 000001ffH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
; Line 546
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 548
	mov	eax, DWORD PTR _outStream$[ebp]
	mov	DWORD PTR [eax], 0
; Line 551
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 264				; 00000108H
	call	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
	mov	DWORD PTR tv1792[ebp], eax
	cmp	DWORD PTR tv1792[ebp], 0
	je	SHORT $LN186@GetStream
; Line 552
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+260]
	call	?ReleaseStream@COutStreamWithHash@@QAEXXZ ; COutStreamWithHash::ReleaseStream
$LN186@GetStream:
; Line 553
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+268], 0
; Line 556
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 256				; 00000100H
	call	?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ; CMyComPtr<ISequentialOutStream>::Release
; Line 558
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+197], 0
; Line 559
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+184], 0
	mov	DWORD PTR [ecx+188], 0
; Line 560
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+192], 0
; Line 562
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+240], 0
	mov	DWORD PTR [eax+244], 0
; Line 563
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+248], 0
; Line 564
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _index$[ebp]
	mov	DWORD PTR [edx+232], eax
; Line 566
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	call	??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator IInArchive *
	mov	DWORD PTR tv1793[ebp], eax
	mov	edx, DWORD PTR tv1793[ebp]
	mov	DWORD PTR _archive$76423[ebp], edx
; Line 569
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+284]
	mov	BYTE PTR [eax+160], dl
; Line 570
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+284]
	test	ecx, ecx
	je	SHORT $LN185@GetStream
; Line 572
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+288]
	mov	DWORD PTR [edx+164], ecx
; Line 574
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+84], 0
	je	SHORT $LN183@GetStream
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+84], 3
	jne	SHORT $LN185@GetStream
$LN183@GetStream:
; Line 575
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+164], -1
$LN185@GetStream:
; Line 580
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+33]
	mov	BYTE PTR [edx+153], cl
; Line 583
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 104				; 00000068H
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	call	?GetItem@CArc@@QBEJIAAUCReadArcItem@@@Z	; CArc::GetItem
	mov	DWORD PTR tv1794[ebp], eax
	mov	edx, DWORD PTR tv1794[ebp]
	mov	DWORD PTR ___result__$76427[ebp], edx
	cmp	DWORD PTR ___result__$76427[ebp], 0
	je	SHORT $LN182@GetStream
	mov	eax, DWORD PTR ___result__$76427[ebp]
	jmp	$LN188@GetStream
$LN182@GetStream:
; Line 586
	lea	ecx, DWORD PTR _prop$76429[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
	mov	DWORD PTR tv1795[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 1
; Line 587
	mov	esi, esp
	lea	eax, DWORD PTR _prop$76429[ebp]
	push	eax
	push	29					; 0000001dH
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _archive$76423[ebp]
	push	edx
	mov	eax, DWORD PTR _archive$76423[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv1796[ebp], eax
	mov	eax, DWORD PTR tv1796[ebp]
	mov	DWORD PTR ___result__$76430[ebp], eax
	cmp	DWORD PTR ___result__$76430[ebp], 0
	je	SHORT $LN181@GetStream
	mov	ecx, DWORD PTR ___result__$76430[ebp]
	mov	DWORD PTR $T78849[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _prop$76429[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T78849[ebp]
	jmp	$LN188@GetStream
$LN181@GetStream:
; Line 588
	movzx	edx, WORD PTR _prop$76429[ebp]
	test	edx, edx
	je	SHORT $LN180@GetStream
; Line 590
	movzx	eax, WORD PTR _prop$76429[ebp]
	cmp	eax, 21					; 00000015H
	je	SHORT $LN179@GetStream
; Line 591
	mov	DWORD PTR $T78850[ebp], -2147467259	; 80004005H
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _prop$76429[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T78850[ebp]
	jmp	$LN188@GetStream
$LN179@GetStream:
; Line 592
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _prop$76429[ebp+8]
	mov	DWORD PTR [ecx+184], edx
	mov	eax, DWORD PTR _prop$76429[ebp+12]
	mov	DWORD PTR [ecx+188], eax
; Line 593
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+192], 1
$LN180@GetStream:
; Line 595
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _prop$76429[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
; Line 599
	mov	BYTE PTR _isHardLink$76437[ebp], 0
; Line 600
	mov	BYTE PTR _isJunction$76438[ebp], 0
; Line 601
	mov	BYTE PTR _isRelative$76439[ebp], 0
; Line 603
	lea	ecx, DWORD PTR _linkPath$76440[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR tv1797[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 2
; Line 607
	lea	ecx, DWORD PTR _prop$76441[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
	mov	DWORD PTR tv1798[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 3
; Line 608
	mov	esi, esp
	lea	edx, DWORD PTR _prop$76441[ebp]
	push	edx
	push	90					; 0000005aH
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _archive$76423[ebp]
	push	ecx
	mov	edx, DWORD PTR _archive$76423[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv1799[ebp], eax
	mov	edx, DWORD PTR tv1799[ebp]
	mov	DWORD PTR ___result__$76442[ebp], edx
	cmp	DWORD PTR ___result__$76442[ebp], 0
	je	SHORT $LN178@GetStream
	mov	eax, DWORD PTR ___result__$76442[ebp]
	mov	DWORD PTR $T78851[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _prop$76441[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _linkPath$76440[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T78851[ebp]
	jmp	$LN188@GetStream
$LN178@GetStream:
; Line 609
	movzx	ecx, WORD PTR _prop$76441[ebp]
	cmp	ecx, 8
	jne	SHORT $LN177@GetStream
; Line 611
	mov	BYTE PTR _isHardLink$76437[ebp], 1
; Line 612
	mov	edx, DWORD PTR _prop$76441[ebp+8]
	push	edx
	lea	ecx, DWORD PTR _linkPath$76440[ebp]
	call	?SetFromBstr@UString@@QAEXPA_W@Z	; UString::SetFromBstr
; Line 613
	mov	BYTE PTR _isRelative$76439[ebp], 0
	jmp	SHORT $LN176@GetStream
$LN177@GetStream:
; Line 615
	movzx	eax, WORD PTR _prop$76441[ebp]
	test	eax, eax
	jne	SHORT $LN175@GetStream
; Line 619
	jmp	SHORT $LN176@GetStream
$LN175@GetStream:
; Line 620
	mov	DWORD PTR $T78852[ebp], -2147467259	; 80004005H
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _prop$76441[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _linkPath$76440[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T78852[ebp]
	jmp	$LN188@GetStream
$LN176@GetStream:
; Line 621
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _prop$76441[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
; Line 623
	lea	ecx, DWORD PTR _prop$76451[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
	mov	DWORD PTR tv1800[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 4
; Line 624
	mov	esi, esp
	lea	ecx, DWORD PTR _prop$76451[ebp]
	push	ecx
	push	54					; 00000036H
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _archive$76423[ebp]
	push	eax
	mov	ecx, DWORD PTR _archive$76423[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv1801[ebp], eax
	mov	ecx, DWORD PTR tv1801[ebp]
	mov	DWORD PTR ___result__$76452[ebp], ecx
	cmp	DWORD PTR ___result__$76452[ebp], 0
	je	SHORT $LN173@GetStream
	mov	edx, DWORD PTR ___result__$76452[ebp]
	mov	DWORD PTR $T78853[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _prop$76451[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _linkPath$76440[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T78853[ebp]
	jmp	$LN188@GetStream
$LN173@GetStream:
; Line 625
	movzx	eax, WORD PTR _prop$76451[ebp]
	cmp	eax, 8
	jne	SHORT $LN172@GetStream
; Line 627
	mov	BYTE PTR _isHardLink$76437[ebp], 0
; Line 628
	mov	ecx, DWORD PTR _prop$76451[ebp+8]
	push	ecx
	lea	ecx, DWORD PTR _linkPath$76440[ebp]
	call	?SetFromBstr@UString@@QAEXPA_W@Z	; UString::SetFromBstr
; Line 629
	mov	BYTE PTR _isRelative$76439[ebp], 1
	jmp	SHORT $LN171@GetStream
$LN172@GetStream:
; Line 631
	movzx	edx, WORD PTR _prop$76451[ebp]
	test	edx, edx
	jne	SHORT $LN170@GetStream
; Line 635
	jmp	SHORT $LN171@GetStream
$LN170@GetStream:
; Line 636
	mov	DWORD PTR $T78854[ebp], -2147467259	; 80004005H
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _prop$76451[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _linkPath$76440[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T78854[ebp]
	jmp	$LN188@GetStream
$LN171@GetStream:
; Line 637
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _prop$76451[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
; Line 639
	mov	BYTE PTR _isOkReparse$76461[ebp], 0
; Line 641
	lea	ecx, DWORD PTR _linkPath$76440[ebp]
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	mov	BYTE PTR tv1802[ebp], al
	movzx	eax, BYTE PTR tv1802[ebp]
	test	eax, eax
	je	$LN168@GetStream
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	add	ecx, 8
	call	??B?$CMyComPtr@UIArchiveGetRawProps@@@@QBEPAUIArchiveGetRawProps@@XZ ; CMyComPtr<IArchiveGetRawProps>::operator IArchiveGetRawProps *
	mov	DWORD PTR tv1803[ebp], eax
	cmp	DWORD PTR tv1803[ebp], 0
	je	$LN168@GetStream
; Line 646
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	add	ecx, 8
	call	??C?$CMyComPtr@UIArchiveGetRawProps@@@@QBEPAUIArchiveGetRawProps@@XZ ; CMyComPtr<IArchiveGetRawProps>::operator->
	mov	DWORD PTR tv1804[ebp], eax
	mov	eax, DWORD PTR tv1804[ebp]
	mov	DWORD PTR tv266[ebp], eax
	mov	esi, esp
	lea	ecx, DWORD PTR _propType$76465[ebp]
	push	ecx
	lea	edx, DWORD PTR _dataSize$76464[ebp]
	push	edx
	lea	eax, DWORD PTR _data$76463[ebp]
	push	eax
	push	89					; 00000059H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+232]
	push	edx
	mov	eax, DWORD PTR tv266[ebp]
	push	eax
	mov	ecx, DWORD PTR tv266[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 647
	cmp	DWORD PTR _dataSize$76464[ebp], 0
	je	$LN168@GetStream
; Line 649
	cmp	DWORD PTR _propType$76465[ebp], 1
	je	SHORT $LN166@GetStream
; Line 650
	mov	DWORD PTR $T78855[ebp], -2147467259	; 80004005H
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _linkPath$76440[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T78855[ebp]
	jmp	$LN188@GetStream
$LN166@GetStream:
; Line 651
	lea	ecx, DWORD PTR _s$76470[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR tv1805[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 5
; Line 652
	lea	ecx, DWORD PTR _reparse$76471[ebp]
	call	??0CReparseAttr@NFile@NWindows@@QAE@XZ	; NWindows::NFile::CReparseAttr::CReparseAttr
	mov	DWORD PTR tv1806[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 6
; Line 653
	mov	ecx, DWORD PTR _dataSize$76464[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$76463[ebp]
	push	edx
	lea	ecx, DWORD PTR _reparse$76471[ebp]
	call	?Parse@CReparseAttr@NFile@NWindows@@QAE_NPBEI@Z ; NWindows::NFile::CReparseAttr::Parse
	mov	BYTE PTR tv1807[ebp], al
	mov	al, BYTE PTR tv1807[ebp]
	mov	BYTE PTR _isOkReparse$76461[ebp], al
; Line 654
	movzx	ecx, BYTE PTR _isOkReparse$76461[ebp]
	test	ecx, ecx
	je	SHORT $LN165@GetStream
; Line 656
	mov	BYTE PTR _isHardLink$76437[ebp], 0
; Line 657
	lea	edx, DWORD PTR $T78856[ebp]
	push	edx
	lea	ecx, DWORD PTR _reparse$76471[ebp]
	call	?GetPath@CReparseAttr@NFile@NWindows@@QBE?AVUString@@XZ ; NWindows::NFile::CReparseAttr::GetPath
	mov	DWORD PTR tv1808[ebp], eax
	mov	eax, DWORD PTR tv1808[ebp]
	mov	DWORD PTR tv1581[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 7
	mov	ecx, DWORD PTR tv1581[ebp]
	push	ecx
	lea	ecx, DWORD PTR _linkPath$76440[ebp]
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
	mov	BYTE PTR __$EHRec$[ebp+12], 6
	lea	ecx, DWORD PTR $T78856[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
; Line 658
	lea	ecx, DWORD PTR _reparse$76471[ebp]
	call	?IsMountPoint@CReparseAttr@NFile@NWindows@@QBE_NXZ ; NWindows::NFile::CReparseAttr::IsMountPoint
	mov	BYTE PTR tv1809[ebp], al
	mov	dl, BYTE PTR tv1809[ebp]
	mov	BYTE PTR _isJunction$76438[ebp], dl
; Line 659
	lea	ecx, DWORD PTR _reparse$76471[ebp]
	call	?IsRelative@CReparseAttr@NFile@NWindows@@QBE_NXZ ; NWindows::NFile::CReparseAttr::IsRelative
	mov	BYTE PTR tv1810[ebp], al
	mov	al, BYTE PTR tv1810[ebp]
	mov	BYTE PTR _isRelative$76439[ebp], al
$LN165@GetStream:
; Line 664
	mov	BYTE PTR __$EHRec$[ebp+12], 5
	lea	ecx, DWORD PTR _reparse$76471[ebp]
	call	??1CReparseAttr@NFile@NWindows@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _s$76470[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
$LN168@GetStream:
; Line 667
	lea	ecx, DWORD PTR _linkPath$76440[ebp]
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	mov	BYTE PTR tv1811[ebp], al
	movzx	ecx, BYTE PTR tv1811[ebp]
	test	ecx, ecx
	jne	SHORT $LN164@GetStream
; Line 670
	push	92					; 0000005cH
	push	47					; 0000002fH
	lea	ecx, DWORD PTR _linkPath$76440[ebp]
	call	?Replace@UString@@QAEX_W0@Z		; UString::Replace
$LN163@GetStream:
; Line 676
	lea	ecx, DWORD PTR _linkPath$76440[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	DWORD PTR tv1812[ebp], eax
	mov	edx, DWORD PTR tv1812[ebp]
	push	edx
	call	?GetRootPrefixSize@NName@NFile@NWindows@@YGIPB_W@Z ; NWindows::NFile::NName::GetRootPrefixSize
	mov	DWORD PTR _n$76479[ebp], eax
; Line 677
	cmp	DWORD PTR _n$76479[ebp], 0
	jne	SHORT $LN161@GetStream
; Line 678
	jmp	SHORT $LN164@GetStream
$LN161@GetStream:
; Line 679
	mov	BYTE PTR _isRelative$76439[ebp], 0
; Line 680
	mov	eax, DWORD PTR _n$76479[ebp]
	push	eax
	lea	ecx, DWORD PTR _linkPath$76440[ebp]
	call	?DeleteFrontal@UString@@QAEXI@Z		; UString::DeleteFrontal
; Line 681
	jmp	SHORT $LN163@GetStream
$LN164@GetStream:
; Line 684
	lea	ecx, DWORD PTR _linkPath$76440[ebp]
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	mov	BYTE PTR tv1813[ebp], al
	movzx	ecx, BYTE PTR tv1813[ebp]
	test	ecx, ecx
	jne	$LN160@GetStream
	movzx	edx, BYTE PTR _isRelative$76439[ebp]
	test	edx, edx
	jne	$LN160@GetStream
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 272				; 00000110H
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	mov	DWORD PTR tv1814[ebp], eax
	cmp	DWORD PTR tv1814[ebp], 0
	je	$LN160@GetStream
; Line 686
	lea	ecx, DWORD PTR _pathParts$76482[ebp]
	call	??0?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::CObjectVector<UString>
	mov	DWORD PTR tv1815[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 8
; Line 687
	lea	eax, DWORD PTR _pathParts$76482[ebp]
	push	eax
	lea	ecx, DWORD PTR _linkPath$76440[ebp]
	push	ecx
	call	?SplitPathToParts@@YGXABVUString@@AAV?$CObjectVector@VUString@@@@@Z ; SplitPathToParts
; Line 688
	mov	BYTE PTR _badPrefix$76483[ebp], 0
; Line 689
	mov	DWORD PTR _i$76484[ebp], 0
	jmp	SHORT $LN159@GetStream
$LN158@GetStream:
	mov	edx, DWORD PTR _i$76484[ebp]
	add	edx, 1
	mov	DWORD PTR _i$76484[ebp], edx
$LN159@GetStream:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 272				; 00000110H
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	mov	DWORD PTR tv1816[ebp], eax
	mov	eax, DWORD PTR _i$76484[ebp]
	cmp	eax, DWORD PTR tv1816[ebp]
	jae	$LN157@GetStream
; Line 691
	mov	ecx, DWORD PTR _i$76484[ebp]
	push	ecx
	lea	ecx, DWORD PTR _pathParts$76482[ebp]
	call	??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[]
	mov	DWORD PTR tv1817[ebp], eax
	mov	ecx, DWORD PTR tv1817[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	DWORD PTR tv1818[ebp], eax
	mov	edx, DWORD PTR _i$76484[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 272				; 00000110H
	call	??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[]
	mov	DWORD PTR tv1819[ebp], eax
	mov	ecx, DWORD PTR tv1819[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	DWORD PTR tv1820[ebp], eax
	mov	eax, DWORD PTR tv1818[ebp]
	push	eax
	mov	ecx, DWORD PTR tv1820[ebp]
	push	ecx
	call	?CompareFileNames@@YGHPB_W0@Z		; CompareFileNames
	mov	DWORD PTR tv1821[ebp], eax
	cmp	DWORD PTR tv1821[ebp], 0
	je	SHORT $LN156@GetStream
; Line 693
	mov	BYTE PTR _badPrefix$76483[ebp], 1
; Line 694
	jmp	SHORT $LN157@GetStream
$LN156@GetStream:
; Line 696
	jmp	$LN158@GetStream
$LN157@GetStream:
; Line 697
	movzx	edx, BYTE PTR _badPrefix$76483[ebp]
	test	edx, edx
	jne	SHORT $LN155@GetStream
; Line 698
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 272				; 00000110H
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	mov	DWORD PTR tv1822[ebp], eax
	mov	eax, DWORD PTR tv1822[ebp]
	push	eax
	lea	ecx, DWORD PTR _pathParts$76482[ebp]
	call	?DeleteFrontal@?$CObjectVector@VUString@@@@QAEXI@Z ; CObjectVector<UString>::DeleteFrontal
$LN155@GetStream:
; Line 699
	lea	ecx, DWORD PTR _pathParts$76482[ebp]
	push	ecx
	lea	edx, DWORD PTR $T78857[ebp]
	push	edx
	call	?MakePathFromParts@@YG?AVUString@@ABV?$CObjectVector@VUString@@@@@Z ; MakePathFromParts
	mov	DWORD PTR tv1823[ebp], eax
	mov	eax, DWORD PTR tv1823[ebp]
	mov	DWORD PTR tv1584[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 9
	mov	ecx, DWORD PTR tv1584[ebp]
	push	ecx
	lea	ecx, DWORD PTR _linkPath$76440[ebp]
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
	mov	BYTE PTR __$EHRec$[ebp+12], 8
	lea	ecx, DWORD PTR $T78857[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
; Line 700
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _pathParts$76482[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
$LN160@GetStream:
; Line 704
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 197				; 000000c5H
	push	edx
	push	15					; 0000000fH
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _archive$76423[ebp]
	push	ecx
	call	?Archive_GetItemBoolProp@@YGJPAUIInArchive@@IKAA_N@Z ; Archive_GetItemBoolProp
	mov	DWORD PTR ___result__$76491[ebp], eax
	cmp	DWORD PTR ___result__$76491[ebp], 0
	je	SHORT $LN154@GetStream
	mov	edx, DWORD PTR ___result__$76491[ebp]
	mov	DWORD PTR $T78858[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _linkPath$76440[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T78858[ebp]
	jmp	$LN188@GetStream
$LN154@GetStream:
; Line 706
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetUnpackSize@CArchiveExtractCallback@@AAEJXZ ; CArchiveExtractCallback::GetUnpackSize
	mov	DWORD PTR tv1824[ebp], eax
	mov	eax, DWORD PTR tv1824[ebp]
	mov	DWORD PTR ___result__$76494[ebp], eax
	cmp	DWORD PTR ___result__$76494[ebp], 0
	je	SHORT $LN153@GetStream
	mov	ecx, DWORD PTR ___result__$76494[ebp]
	mov	DWORD PTR $T78859[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _linkPath$76440[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T78859[ebp]
	jmp	$LN188@GetStream
$LN153@GetStream:
; Line 710
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+30]
	test	eax, eax
	jne	SHORT $LN152@GetStream
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+152]
	test	edx, edx
	je	SHORT $LN152@GetStream
; Line 711
	mov	DWORD PTR $T78860[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _linkPath$76440[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T78860[ebp]
	jmp	$LN188@GetStream
$LN152@GetStream:
; Line 716
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 116				; 00000074H
	mov	DWORD PTR _pathParts$76500[ebp], eax
; Line 718
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN151@GetStream
; Line 720
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 104				; 00000068H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	call	?CensorNode_CheckPath@@YG_NABVCCensorNode@NWildcard@@ABUCReadArcItem@@@Z ; CensorNode_CheckPath
	mov	BYTE PTR tv1825[ebp], al
	movzx	edx, BYTE PTR tv1825[ebp]
	test	edx, edx
	jne	SHORT $LN151@GetStream
; Line 721
	mov	DWORD PTR $T78861[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _linkPath$76440[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T78861[ebp]
	jmp	$LN188@GetStream
$LN151@GetStream:
; Line 725
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+284]
	test	ecx, ecx
	je	$LN149@GetStream
; Line 727
	mov	ecx, DWORD PTR _pathParts$76500[ebp]
	call	?IsEmpty@?$CObjectVector@VUString@@@@QBE_NXZ ; CObjectVector<UString>::IsEmpty
	mov	BYTE PTR tv1826[ebp], al
	movzx	edx, BYTE PTR tv1826[ebp]
	test	edx, edx
	jne	$LN148@GetStream
; Line 729
	mov	DWORD PTR _numRemovePathParts$76507[ebp], 0
; Line 732
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+84], 4
	jne	SHORT $LN147@GetStream
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+152]
	test	edx, edx
	je	SHORT $LN147@GetStream
; Line 733
	mov	ecx, DWORD PTR _pathParts$76500[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	mov	DWORD PTR tv1827[ebp], eax
	mov	eax, DWORD PTR tv1827[ebp]
	mov	DWORD PTR _numRemovePathParts$76507[ebp], eax
; Line 734
	jmp	SHORT $LN146@GetStream
$LN147@GetStream:
; Line 737
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+84], 2
	je	SHORT $LN144@GetStream
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+84], 4
	jne	SHORT $LN146@GetStream
$LN144@GetStream:
; Line 738
	mov	ecx, DWORD PTR _pathParts$76500[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	mov	DWORD PTR tv1828[ebp], eax
	mov	eax, DWORD PTR tv1828[ebp]
	sub	eax, 1
	mov	DWORD PTR _numRemovePathParts$76507[ebp], eax
$LN146@GetStream:
; Line 739
	mov	ecx, DWORD PTR _numRemovePathParts$76507[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pathParts$76500[ebp]
	call	?DeleteFrontal@?$CObjectVector@VUString@@@@QAEXI@Z ; CObjectVector<UString>::DeleteFrontal
$LN148@GetStream:
; Line 742
	jmp	$LN143@GetStream
$LN149@GetStream:
; Line 745
	mov	ecx, DWORD PTR _pathParts$76500[ebp]
	call	?IsEmpty@?$CObjectVector@VUString@@@@QBE_NXZ ; CObjectVector<UString>::IsEmpty
	mov	BYTE PTR tv1829[ebp], al
	movzx	edx, BYTE PTR tv1829[ebp]
	test	edx, edx
	je	SHORT $LN142@GetStream
; Line 747
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+154]
	test	ecx, ecx
	je	SHORT $LN142@GetStream
; Line 748
	mov	DWORD PTR $T78862[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _linkPath$76440[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T78862[ebp]
	jmp	$LN188@GetStream
$LN142@GetStream:
; Line 757
	mov	DWORD PTR _numRemovePathParts$76517[ebp], 0
; Line 759
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	DWORD PTR tv458[ebp], eax
	cmp	DWORD PTR tv458[ebp], 4
	ja	$LN139@GetStream
	mov	ecx, DWORD PTR tv458[ebp]
	jmp	DWORD PTR $LN288@GetStream[ecx*4]
$LN138@GetStream:
; Line 764
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 272				; 00000110H
	call	?IsEmpty@?$CObjectVector@VUString@@@@QBE_NXZ ; CObjectVector<UString>::IsEmpty
	mov	BYTE PTR tv1830[ebp], al
	movzx	edx, BYTE PTR tv1830[ebp]
	test	edx, edx
	je	SHORT $LN137@GetStream
; Line 765
	jmp	$LN139@GetStream
$LN137@GetStream:
; Line 766
	mov	BYTE PTR _badPrefix$76524[ebp], 0
; Line 768
	mov	ecx, DWORD PTR _pathParts$76500[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	mov	DWORD PTR tv1831[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 272				; 00000110H
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	mov	DWORD PTR tv1832[ebp], eax
	mov	eax, DWORD PTR tv1831[ebp]
	cmp	eax, DWORD PTR tv1832[ebp]
	jae	SHORT $LN136@GetStream
; Line 769
	mov	BYTE PTR _badPrefix$76524[ebp], 1
; Line 770
	jmp	$LN135@GetStream
$LN136@GetStream:
; Line 772
	mov	ecx, DWORD PTR _pathParts$76500[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	mov	DWORD PTR tv1833[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 272				; 00000110H
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	mov	DWORD PTR tv1834[ebp], eax
	mov	ecx, DWORD PTR tv1833[ebp]
	cmp	ecx, DWORD PTR tv1834[ebp]
	jne	SHORT $LN134@GetStream
; Line 774
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+269]
	test	eax, eax
	je	SHORT $LN133@GetStream
; Line 777
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+152]
	test	edx, edx
	jne	SHORT $LN132@GetStream
; Line 779
	mov	BYTE PTR _badPrefix$76524[ebp], 1
$LN132@GetStream:
; Line 781
	jmp	SHORT $LN134@GetStream
$LN133@GetStream:
; Line 783
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+155]
	test	ecx, ecx
	jne	SHORT $LN134@GetStream
; Line 784
	mov	BYTE PTR _badPrefix$76524[ebp], 1
$LN134@GetStream:
; Line 788
	movzx	edx, BYTE PTR _badPrefix$76524[ebp]
	test	edx, edx
	jne	$LN135@GetStream
; Line 789
	mov	DWORD PTR _i$76533[ebp], 0
	jmp	SHORT $LN128@GetStream
$LN127@GetStream:
	mov	eax, DWORD PTR _i$76533[ebp]
	add	eax, 1
	mov	DWORD PTR _i$76533[ebp], eax
$LN128@GetStream:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 272				; 00000110H
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	mov	DWORD PTR tv1835[ebp], eax
	mov	ecx, DWORD PTR _i$76533[ebp]
	cmp	ecx, DWORD PTR tv1835[ebp]
	jae	$LN135@GetStream
; Line 791
	mov	edx, DWORD PTR _i$76533[ebp]
	push	edx
	mov	ecx, DWORD PTR _pathParts$76500[ebp]
	call	??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[]
	mov	DWORD PTR tv1836[ebp], eax
	mov	ecx, DWORD PTR tv1836[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	DWORD PTR tv1837[ebp], eax
	mov	eax, DWORD PTR _i$76533[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 272				; 00000110H
	call	??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[]
	mov	DWORD PTR tv1838[ebp], eax
	mov	ecx, DWORD PTR tv1838[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	DWORD PTR tv1839[ebp], eax
	mov	ecx, DWORD PTR tv1837[ebp]
	push	ecx
	mov	edx, DWORD PTR tv1839[ebp]
	push	edx
	call	?CompareFileNames@@YGHPB_W0@Z		; CompareFileNames
	mov	DWORD PTR tv1840[ebp], eax
	cmp	DWORD PTR tv1840[ebp], 0
	je	SHORT $LN125@GetStream
; Line 793
	mov	BYTE PTR _badPrefix$76524[ebp], 1
; Line 794
	jmp	SHORT $LN135@GetStream
$LN125@GetStream:
; Line 796
	jmp	$LN127@GetStream
$LN135@GetStream:
; Line 799
	movzx	eax, BYTE PTR _badPrefix$76524[ebp]
	test	eax, eax
	je	SHORT $LN124@GetStream
; Line 801
	cmp	DWORD PTR _askExtractMode$[ebp], 0
	jne	SHORT $LN123@GetStream
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+293]
	test	edx, edx
	jne	SHORT $LN123@GetStream
; Line 802
	mov	DWORD PTR $T78863[ebp], -2147467259	; 80004005H
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _linkPath$76440[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T78863[ebp]
	jmp	$LN188@GetStream
$LN123@GetStream:
; Line 804
	jmp	SHORT $LN122@GetStream
$LN124@GetStream:
; Line 805
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 272				; 00000110H
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	mov	DWORD PTR tv1841[ebp], eax
	mov	eax, DWORD PTR tv1841[ebp]
	mov	DWORD PTR _numRemovePathParts$76517[ebp], eax
$LN122@GetStream:
; Line 806
	jmp	$LN139@GetStream
$LN121@GetStream:
; Line 811
	mov	ecx, DWORD PTR _pathParts$76500[ebp]
	call	?IsEmpty@?$CObjectVector@VUString@@@@QBE_NXZ ; CObjectVector<UString>::IsEmpty
	mov	BYTE PTR tv1842[ebp], al
	movzx	ecx, BYTE PTR tv1842[ebp]
	test	ecx, ecx
	jne	SHORT $LN120@GetStream
; Line 812
	mov	ecx, DWORD PTR _pathParts$76500[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	mov	DWORD PTR tv1843[ebp], eax
	mov	edx, DWORD PTR tv1843[ebp]
	sub	edx, 1
	mov	DWORD PTR _numRemovePathParts$76517[ebp], edx
$LN120@GetStream:
; Line 813
	jmp	SHORT $LN139@GetStream
$LN119@GetStream:
; Line 818
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+152]
	test	ecx, ecx
	je	SHORT $LN118@GetStream
; Line 819
	mov	ecx, DWORD PTR _pathParts$76500[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	mov	DWORD PTR tv1844[ebp], eax
	mov	edx, DWORD PTR tv1844[ebp]
	mov	DWORD PTR _numRemovePathParts$76517[ebp], edx
; Line 820
	jmp	SHORT $LN139@GetStream
$LN118@GetStream:
; Line 822
	mov	ecx, DWORD PTR _pathParts$76500[ebp]
	call	?IsEmpty@?$CObjectVector@VUString@@@@QBE_NXZ ; CObjectVector<UString>::IsEmpty
	mov	BYTE PTR tv1845[ebp], al
	movzx	eax, BYTE PTR tv1845[ebp]
	test	eax, eax
	jne	SHORT $LN139@GetStream
; Line 823
	mov	ecx, DWORD PTR _pathParts$76500[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	mov	DWORD PTR tv1846[ebp], eax
	mov	ecx, DWORD PTR tv1846[ebp]
	sub	ecx, 1
	mov	DWORD PTR _numRemovePathParts$76517[ebp], ecx
$LN139@GetStream:
; Line 833
	mov	edx, DWORD PTR _numRemovePathParts$76517[ebp]
	push	edx
	mov	ecx, DWORD PTR _pathParts$76500[ebp]
	call	?DeleteFrontal@?$CObjectVector@VUString@@@@QAEXI@Z ; CObjectVector<UString>::DeleteFrontal
$LN143@GetStream:
; Line 838
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 92					; 0000005cH
	call	??B?$CMyComPtr@UIFolderExtractToStreamCallback@@@@QBEPAUIFolderExtractToStreamCallback@@XZ ; CMyComPtr<IFolderExtractToStreamCallback>::operator IFolderExtractToStreamCallback *
	mov	DWORD PTR tv1847[ebp], eax
	cmp	DWORD PTR tv1847[ebp], 0
	je	$LN115@GetStream
; Line 840
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	call	??7?$CMyComPtr@UIGetProp@@@@QBE_NXZ	; CMyComPtr<IGetProp>::operator!
	mov	BYTE PTR tv1848[ebp], al
	movzx	eax, BYTE PTR tv1848[ebp]
	test	eax, eax
	je	$LN114@GetStream
; Line 842
	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR tv1849[ebp], eax
	mov	ecx, DWORD PTR tv1849[ebp]
	mov	DWORD PTR $T78865[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 10		; 0000000aH
	cmp	DWORD PTR $T78865[ebp], 0
	je	SHORT $LN190@GetStream
	mov	ecx, DWORD PTR $T78865[ebp]
	call	??0CGetProp@@QAE@XZ
	mov	DWORD PTR tv1851[ebp], eax
	mov	edx, DWORD PTR tv1851[ebp]
	mov	DWORD PTR tv558[ebp], edx
	jmp	SHORT $LN191@GetStream
$LN190@GetStream:
	mov	DWORD PTR tv558[ebp], 0
$LN191@GetStream:
	mov	eax, DWORD PTR tv558[ebp]
	mov	DWORD PTR $T78864[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T78864[ebp]
	mov	DWORD PTR [ecx+96], edx
; Line 843
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	call	??4?$CMyComPtr@UIGetProp@@@@QAEPAUIGetProp@@PAU1@@Z ; CMyComPtr<IGetProp>::operator=
$LN114@GetStream:
; Line 845
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+8], edx
; Line 846
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	edx, DWORD PTR _index$[ebp]
	mov	DWORD PTR [ecx+12], edx
; Line 847
	mov	eax, DWORD PTR _pathParts$76500[ebp]
	push	eax
	lea	ecx, DWORD PTR _name$76555[ebp]
	push	ecx
	call	?MakePathFromParts@@YG?AVUString@@ABV?$CObjectVector@VUString@@@@@Z ; MakePathFromParts
	mov	DWORD PTR tv1852[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 11		; 0000000bH
; Line 850
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+152]
	test	eax, eax
	je	SHORT $LN113@GetStream
; Line 852
	mov	ecx, DWORD PTR _pathParts$76500[ebp]
	call	?IsEmpty@?$CObjectVector@VUString@@@@QBE_NXZ ; CObjectVector<UString>::IsEmpty
	mov	BYTE PTR tv1853[ebp], al
	movzx	ecx, BYTE PTR tv1853[ebp]
	test	ecx, ecx
	je	SHORT $LN111@GetStream
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+269]
	test	eax, eax
	jne	SHORT $LN112@GetStream
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+84], 4
	je	SHORT $LN112@GetStream
$LN111@GetStream:
; Line 853
	push	58					; 0000003aH
	lea	ecx, DWORD PTR _name$76555[ebp]
	call	??YUString@@QAEAAV0@_W@Z		; UString::operator+=
$LN112@GetStream:
; Line 854
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 140				; 0000008cH
	push	edx
	lea	ecx, DWORD PTR _name$76555[ebp]
	call	??YUString@@QAEAAV0@ABV0@@Z		; UString::operator+=
$LN113@GetStream:
; Line 858
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 92					; 0000005cH
	call	??C?$CMyComPtr@UIFolderExtractToStreamCallback@@@@QBEPAUIFolderExtractToStreamCallback@@XZ ; CMyComPtr<IFolderExtractToStreamCallback>::operator->
	mov	DWORD PTR tv1854[ebp], eax
	mov	eax, DWORD PTR tv1854[ebp]
	mov	DWORD PTR tv598[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	call	??B?$CMyComPtr@UIGetProp@@@@QBEPAUIGetProp@@XZ ; CMyComPtr<IGetProp>::operator IGetProp *
	mov	DWORD PTR tv1855[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+154]
	push	edx
	call	?BoolToInt@@YGH_N@Z			; BoolToInt
	mov	DWORD PTR tv1856[ebp], eax
	lea	ecx, DWORD PTR _name$76555[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	DWORD PTR tv1857[ebp], eax
	mov	esi, esp
	mov	eax, DWORD PTR tv1855[ebp]
	push	eax
	mov	ecx, DWORD PTR _askExtractMode$[ebp]
	push	ecx
	mov	edx, DWORD PTR _outStream$[ebp]
	push	edx
	mov	eax, DWORD PTR tv1856[ebp]
	push	eax
	mov	ecx, DWORD PTR tv1857[ebp]
	push	ecx
	mov	edx, DWORD PTR tv598[ebp]
	push	edx
	mov	eax, DWORD PTR tv598[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv1858[ebp], eax
	mov	eax, DWORD PTR tv1858[ebp]
	mov	DWORD PTR $T78868[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _name$76555[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _linkPath$76440[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T78868[ebp]
	jmp	$LN188@GetStream
$LN115@GetStream:
; Line 863
	lea	ecx, DWORD PTR _outStreamLoc$76562[ebp]
	call	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
	mov	DWORD PTR tv1859[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
; Line 865
	cmp	DWORD PTR _askExtractMode$[ebp], 0
	jne	$LN110@GetStream
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+293]
	test	edx, edx
	jne	$LN110@GetStream
; Line 867
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+292]
	test	ecx, ecx
	je	SHORT $LN109@GetStream
; Line 869
	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR tv1860[ebp], eax
	mov	edx, DWORD PTR tv1860[ebp]
	mov	DWORD PTR $T78870[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 13		; 0000000dH
	cmp	DWORD PTR $T78870[ebp], 0
	je	SHORT $LN192@GetStream
	mov	ecx, DWORD PTR $T78870[ebp]
	call	??0CStdOutFileStream@@QAE@XZ		; CStdOutFileStream::CStdOutFileStream
	mov	DWORD PTR tv1862[ebp], eax
	mov	eax, DWORD PTR tv1862[ebp]
	mov	DWORD PTR tv638[ebp], eax
	jmp	SHORT $LN193@GetStream
$LN192@GetStream:
	mov	DWORD PTR tv638[ebp], 0
$LN193@GetStream:
	mov	ecx, DWORD PTR tv638[ebp]
	mov	DWORD PTR $T78869[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	mov	edx, DWORD PTR $T78869[ebp]
	push	edx
	lea	ecx, DWORD PTR _outStreamLoc$76562[ebp]
	call	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=
; Line 871
	jmp	$LN110@GetStream
$LN109@GetStream:
; Line 874
	lea	ecx, DWORD PTR _prop$76570[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
	mov	DWORD PTR tv1863[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 14		; 0000000eH
; Line 875
	mov	esi, esp
	lea	eax, DWORD PTR _prop$76570[ebp]
	push	eax
	push	9
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _archive$76423[ebp]
	push	edx
	mov	eax, DWORD PTR _archive$76423[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv1864[ebp], eax
	mov	eax, DWORD PTR tv1864[ebp]
	mov	DWORD PTR ___result__$76571[ebp], eax
	cmp	DWORD PTR ___result__$76571[ebp], 0
	je	SHORT $LN107@GetStream
	mov	ecx, DWORD PTR ___result__$76571[ebp]
	mov	DWORD PTR $T78873[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR _prop$76570[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _outStreamLoc$76562[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _linkPath$76440[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T78873[ebp]
	jmp	$LN188@GetStream
$LN107@GetStream:
; Line 876
	movzx	edx, WORD PTR _prop$76570[ebp]
	cmp	edx, 19					; 00000013H
	jne	SHORT $LN106@GetStream
; Line 878
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _prop$76570[ebp+8]
	mov	DWORD PTR [eax+224], ecx
; Line 879
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+231], 1
	jmp	SHORT $LN105@GetStream
$LN106@GetStream:
; Line 881
	movzx	eax, WORD PTR _prop$76570[ebp]
	test	eax, eax
	jne	SHORT $LN104@GetStream
; Line 882
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+231], 0
; Line 883
	jmp	SHORT $LN105@GetStream
$LN104@GetStream:
; Line 884
	mov	DWORD PTR $T78874[ebp], -2147467259	; 80004005H
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR _prop$76570[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _outStreamLoc$76562[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _linkPath$76440[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T78874[ebp]
	jmp	$LN188@GetStream
$LN105@GetStream:
; Line 885
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR _prop$76570[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
; Line 887
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 228				; 000000e4H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 200				; 000000c8H
	push	eax
	push	10					; 0000000aH
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetTime@CArchiveExtractCallback@@AAEJHKAAU_FILETIME@@AA_N@Z ; CArchiveExtractCallback::GetTime
	mov	DWORD PTR tv1865[ebp], eax
	mov	edx, DWORD PTR tv1865[ebp]
	mov	DWORD PTR ___result__$76580[ebp], edx
	cmp	DWORD PTR ___result__$76580[ebp], 0
	je	SHORT $LN102@GetStream
	mov	eax, DWORD PTR ___result__$76580[ebp]
	mov	DWORD PTR $T78875[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _outStreamLoc$76562[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _linkPath$76440[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T78875[ebp]
	jmp	$LN188@GetStream
$LN102@GetStream:
; Line 888
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 229				; 000000e5H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 208				; 000000d0H
	push	edx
	push	11					; 0000000bH
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetTime@CArchiveExtractCallback@@AAEJHKAAU_FILETIME@@AA_N@Z ; CArchiveExtractCallback::GetTime
	mov	DWORD PTR tv1866[ebp], eax
	mov	ecx, DWORD PTR tv1866[ebp]
	mov	DWORD PTR ___result__$76583[ebp], ecx
	cmp	DWORD PTR ___result__$76583[ebp], 0
	je	SHORT $LN101@GetStream
	mov	edx, DWORD PTR ___result__$76583[ebp]
	mov	DWORD PTR $T78876[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _outStreamLoc$76562[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _linkPath$76440[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T78876[ebp]
	jmp	$LN188@GetStream
$LN101@GetStream:
; Line 889
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 230				; 000000e6H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 216				; 000000d8H
	push	ecx
	push	12					; 0000000cH
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetTime@CArchiveExtractCallback@@AAEJHKAAU_FILETIME@@AA_N@Z ; CArchiveExtractCallback::GetTime
	mov	DWORD PTR tv1867[ebp], eax
	mov	eax, DWORD PTR tv1867[ebp]
	mov	DWORD PTR ___result__$76586[ebp], eax
	cmp	DWORD PTR ___result__$76586[ebp], 0
	je	SHORT $LN100@GetStream
	mov	ecx, DWORD PTR ___result__$76586[ebp]
	mov	DWORD PTR $T78877[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _outStreamLoc$76562[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _linkPath$76440[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T78877[ebp]
	jmp	$LN188@GetStream
$LN100@GetStream:
; Line 891
	mov	BYTE PTR _isAnti$76589[ebp], 0
; Line 892
	lea	edx, DWORD PTR _isAnti$76589[ebp]
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	call	?IsItemAnti@CArc@@QBEJIAA_N@Z		; CArc::IsItemAnti
	mov	DWORD PTR tv1868[ebp], eax
	mov	edx, DWORD PTR tv1868[ebp]
	mov	DWORD PTR ___result__$76590[ebp], edx
	cmp	DWORD PTR ___result__$76590[ebp], 0
	je	SHORT $LN99@GetStream
	mov	eax, DWORD PTR ___result__$76590[ebp]
	mov	DWORD PTR $T78878[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _outStreamLoc$76562[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _linkPath$76440[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T78878[ebp]
	jmp	$LN188@GetStream
$LN99@GetStream:
; Line 894
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+155]
	push	edx
	mov	eax, DWORD PTR _pathParts$76500[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+84], 3
	sete	dl
	movzx	eax, dl
	push	eax
	call	?Correct_FsPath@@YGX_NAAV?$CObjectVector@VUString@@@@0@Z ; Correct_FsPath
; Line 898
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+152]
	test	edx, edx
	je	$LN98@GetStream
; Line 900
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 140				; 0000008cH
	push	eax
	lea	ecx, DWORD PTR _s$76594[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	DWORD PTR tv1869[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 15		; 0000000fH
; Line 901
	lea	ecx, DWORD PTR _s$76594[ebp]
	push	ecx
	call	?Correct_AltStream_Name@@YGXAAVUString@@@Z ; Correct_AltStream_Name
; Line 902
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+269]
	test	eax, eax
	jne	SHORT $LN194@GetStream
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+84], 4
	jne	SHORT $LN195@GetStream
$LN194@GetStream:
	mov	ecx, DWORD PTR _pathParts$76500[ebp]
	call	?IsEmpty@?$CObjectVector@VUString@@@@QBE_NXZ ; CObjectVector<UString>::IsEmpty
	mov	BYTE PTR tv1870[ebp], al
	movzx	edx, BYTE PTR tv1870[ebp]
	test	edx, edx
	je	SHORT $LN195@GetStream
	mov	DWORD PTR tv778[ebp], 0
	jmp	SHORT $LN196@GetStream
$LN195@GetStream:
	mov	DWORD PTR tv778[ebp], 1
$LN196@GetStream:
	mov	al, BYTE PTR tv778[ebp]
	mov	BYTE PTR _needColon$76595[ebp], al
; Line 903
	mov	ecx, DWORD PTR _pathParts$76500[ebp]
	call	?IsEmpty@?$CObjectVector@VUString@@@@QBE_NXZ ; CObjectVector<UString>::IsEmpty
	mov	BYTE PTR tv1871[ebp], al
	movzx	ecx, BYTE PTR tv1871[ebp]
	test	ecx, ecx
	je	SHORT $LN97@GetStream
; Line 904
	mov	ecx, DWORD PTR _pathParts$76500[ebp]
	call	?AddNew@?$CObjectVector@VUString@@@@QAEAAVUString@@XZ ; CObjectVector<UString>::AddNew
$LN97@GetStream:
; Line 906
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+84], 3
	jne	SHORT $LN96@GetStream
	mov	eax, DWORD PTR _pathParts$76500[ebp]
	push	eax
	call	?GetNumPrefixParts_if_DrivePath@NWildcard@@YGIAAV?$CObjectVector@VUString@@@@@Z ; NWildcard::GetNumPrefixParts_if_DrivePath
	mov	DWORD PTR tv1872[ebp], eax
	mov	ecx, DWORD PTR _pathParts$76500[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	mov	DWORD PTR tv1873[ebp], eax
	mov	ecx, DWORD PTR tv1872[ebp]
	cmp	ecx, DWORD PTR tv1873[ebp]
	jne	SHORT $LN96@GetStream
; Line 907
	mov	ecx, DWORD PTR _pathParts$76500[ebp]
	call	?AddNew@?$CObjectVector@VUString@@@@QAEAAVUString@@XZ ; CObjectVector<UString>::AddNew
$LN96@GetStream:
; Line 908
	mov	ecx, DWORD PTR _pathParts$76500[ebp]
	call	?Back@?$CObjectVector@VUString@@@@QAEAAVUString@@XZ ; CObjectVector<UString>::Back
	mov	DWORD PTR tv1874[ebp], eax
	mov	edx, DWORD PTR tv1874[ebp]
	mov	DWORD PTR _name$76598[ebp], edx
; Line 909
	movzx	eax, BYTE PTR _needColon$76595[ebp]
	test	eax, eax
	je	SHORT $LN95@GetStream
; Line 910
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+32]
	neg	edx
	sbb	edx, edx
	and	edx, 37					; 00000025H
	add	edx, 58					; 0000003aH
	push	edx
	mov	ecx, DWORD PTR _name$76598[ebp]
	call	??YUString@@QAEAAV0@_W@Z		; UString::operator+=
$LN95@GetStream:
; Line 911
	lea	eax, DWORD PTR _s$76594[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$76598[ebp]
	call	??YUString@@QAEAAV0@ABV0@@Z		; UString::operator+=
; Line 912
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR _s$76594[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
$LN98@GetStream:
; Line 916
	mov	ecx, DWORD PTR _pathParts$76500[ebp]
	push	ecx
	lea	edx, DWORD PTR _processedPath$76601[ebp]
	push	edx
	call	?MakePathFromParts@@YG?AVUString@@ABV?$CObjectVector@VUString@@@@@Z ; MakePathFromParts
	mov	DWORD PTR tv1875[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 16		; 00000010H
; Line 918
	movzx	eax, BYTE PTR _isAnti$76589[ebp]
	test	eax, eax
	jne	$LN94@GetStream
; Line 920
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+154]
	test	edx, edx
	jne	SHORT $LN93@GetStream
; Line 922
	mov	ecx, DWORD PTR _pathParts$76500[ebp]
	call	?IsEmpty@?$CObjectVector@VUString@@@@QBE_NXZ ; CObjectVector<UString>::IsEmpty
	mov	BYTE PTR tv1876[ebp], al
	movzx	eax, BYTE PTR tv1876[ebp]
	test	eax, eax
	jne	SHORT $LN93@GetStream
; Line 923
	mov	ecx, DWORD PTR _pathParts$76500[ebp]
	call	?DeleteBack@?$CObjectVector@VUString@@@@QAEXXZ ; CObjectVector<UString>::DeleteBack
$LN93@GetStream:
; Line 926
	mov	ecx, DWORD PTR _pathParts$76500[ebp]
	call	?IsEmpty@?$CObjectVector@VUString@@@@QBE_NXZ ; CObjectVector<UString>::IsEmpty
	mov	BYTE PTR tv1877[ebp], al
	movzx	ecx, BYTE PTR tv1877[ebp]
	test	ecx, ecx
	jne	$LN94@GetStream
; Line 928
	lea	ecx, DWORD PTR _fullPathNew$76607[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR tv1878[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 17		; 00000011H
; Line 929
	lea	edx, DWORD PTR _fullPathNew$76607[ebp]
	push	edx
	mov	eax, DWORD PTR _pathParts$76500[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CreateComplexDirectory@CArchiveExtractCallback@@AAEXABV?$CObjectVector@VUString@@@@AAVUString@@@Z ; CArchiveExtractCallback::CreateComplexDirectory
; Line 930
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+154]
	test	edx, edx
	je	$LN90@GetStream
; Line 932
	lea	eax, DWORD PTR _fullPathNew$76607[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 324				; 00000144H
	call	?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z ; CObjectVector<UString>::Add
; Line 933
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 336				; 00000150H
	call	?Add@?$CRecordVector@I@@QAEII@Z		; CRecordVector<unsigned int>::Add
; Line 937
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+196]
	test	eax, eax
	je	SHORT $LN197@GetStream
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+230]
	test	edx, edx
	je	SHORT $LN197@GetStream
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 216				; 000000d8H
	mov	DWORD PTR tv858[ebp], eax
	jmp	SHORT $LN200@GetStream
$LN197@GetStream:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	movzx	eax, BYTE PTR [edx+164]
	test	eax, eax
	je	SHORT $LN198@GetStream
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 156				; 0000009cH
	mov	DWORD PTR tv857[ebp], edx
	jmp	SHORT $LN199@GetStream
$LN198@GetStream:
	mov	DWORD PTR tv857[ebp], 0
$LN199@GetStream:
	mov	eax, DWORD PTR tv857[ebp]
	mov	DWORD PTR tv858[ebp], eax
$LN200@GetStream:
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+195]
	test	edx, edx
	je	SHORT $LN201@GetStream
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+229]
	test	ecx, ecx
	je	SHORT $LN201@GetStream
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 208				; 000000d0H
	mov	DWORD PTR tv869[ebp], edx
	jmp	SHORT $LN202@GetStream
$LN201@GetStream:
	mov	DWORD PTR tv869[ebp], 0
$LN202@GetStream:
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+194]
	test	ecx, ecx
	je	SHORT $LN203@GetStream
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+228]
	test	eax, eax
	je	SHORT $LN203@GetStream
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 200				; 000000c8H
	mov	DWORD PTR tv880[ebp], ecx
	jmp	SHORT $LN204@GetStream
$LN203@GetStream:
	mov	DWORD PTR tv880[ebp], 0
$LN204@GetStream:
	lea	ecx, DWORD PTR _fullPathNew$76607[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	DWORD PTR tv1879[ebp], eax
	mov	edx, DWORD PTR tv858[ebp]
	push	edx
	mov	eax, DWORD PTR tv869[ebp]
	push	eax
	mov	ecx, DWORD PTR tv880[ebp]
	push	ecx
	mov	edx, DWORD PTR tv1879[ebp]
	push	edx
	call	?SetDirTime@NDir@NFile@NWindows@@YG_NPB_WPBU_FILETIME@@11@Z ; NWindows::NFile::NDir::SetDirTime
$LN90@GetStream:
; Line 939
	mov	BYTE PTR __$EHRec$[ebp+12], 16		; 00000010H
	lea	ecx, DWORD PTR _fullPathNew$76607[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
$LN94@GetStream:
; Line 943
	lea	eax, DWORD PTR _processedPath$76601[ebp]
	push	eax
	lea	ecx, DWORD PTR _fullProcessedPath$76609[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	DWORD PTR tv1880[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 18		; 00000012H
; Line 945
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+84], 3
	jne	SHORT $LN88@GetStream
	lea	ecx, DWORD PTR _processedPath$76601[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	DWORD PTR tv1881[ebp], eax
	mov	edx, DWORD PTR tv1881[ebp]
	push	edx
	call	?IsAbsolutePath@NName@NFile@NWindows@@YG_NPB_W@Z ; NWindows::NFile::NName::IsAbsolutePath
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN89@GetStream
$LN88@GetStream:
; Line 947
	lea	ecx, DWORD PTR _fullProcessedPath$76609[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 60					; 0000003cH
	push	edx
	lea	eax, DWORD PTR $T78890[ebp]
	push	eax
	call	?MakePath_from_2_Parts@@YG?AVUString@@ABV1@0@Z ; MakePath_from_2_Parts
	mov	DWORD PTR tv1882[ebp], eax
	mov	ecx, DWORD PTR tv1882[ebp]
	mov	DWORD PTR tv1617[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 19		; 00000013H
	mov	edx, DWORD PTR tv1617[ebp]
	push	edx
	lea	ecx, DWORD PTR _fullProcessedPath$76609[ebp]
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
	mov	BYTE PTR __$EHRec$[ebp+12], 18		; 00000012H
	lea	ecx, DWORD PTR $T78890[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
$LN89@GetStream:
; Line 952
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+152]
	test	ecx, ecx
	je	$LN87@GetStream
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+156], -1
	je	$LN87@GetStream
; Line 954
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	push	ecx
	lea	ecx, DWORD PTR _pair$76616[ebp]
	call	??0CIndexToPathPair@@QAE@I@Z		; CIndexToPathPair::CIndexToPathPair
	mov	DWORD PTR tv1883[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 20		; 00000014H
; Line 955
	lea	edx, DWORD PTR _pair$76616[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 424				; 000001a8H
	call	?FindInSorted@?$CObjectVector@UCIndexToPathPair@@@@QBEHABUCIndexToPathPair@@@Z ; CObjectVector<CIndexToPathPair>::FindInSorted
	mov	DWORD PTR tv1884[ebp], eax
	mov	eax, DWORD PTR tv1884[ebp]
	mov	DWORD PTR _renIndex$76617[ebp], eax
; Line 956
	cmp	DWORD PTR _renIndex$76617[ebp], 0
	jl	$LN86@GetStream
; Line 958
	mov	ecx, DWORD PTR _renIndex$76617[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 424				; 000001a8H
	call	??A?$CObjectVector@UCIndexToPathPair@@@@QAEAAUCIndexToPathPair@@I@Z ; CObjectVector<CIndexToPathPair>::operator[]
	mov	DWORD PTR tv1885[ebp], eax
	mov	edx, DWORD PTR tv1885[ebp]
	mov	DWORD PTR _pair$76619[ebp], edx
; Line 959
	mov	eax, DWORD PTR _pair$76619[ebp]
	add	eax, 4
	push	eax
	lea	ecx, DWORD PTR _fullProcessedPath$76609[ebp]
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
; Line 960
	push	58					; 0000003aH
	lea	ecx, DWORD PTR _fullProcessedPath$76609[ebp]
	call	??YUString@@QAEAAV0@_W@Z		; UString::operator+=
; Line 961
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 140				; 0000008cH
	push	ecx
	lea	ecx, DWORD PTR _s$76621[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	DWORD PTR tv1886[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 21		; 00000015H
; Line 962
	lea	edx, DWORD PTR _s$76621[ebp]
	push	edx
	call	?Correct_AltStream_Name@@YGXAAVUString@@@Z ; Correct_AltStream_Name
; Line 963
	lea	eax, DWORD PTR _s$76621[ebp]
	push	eax
	lea	ecx, DWORD PTR _fullProcessedPath$76609[ebp]
	call	??YUString@@QAEAAV0@ABV0@@Z		; UString::operator+=
; Line 964
	mov	BYTE PTR __$EHRec$[ebp+12], 20		; 00000014H
	lea	ecx, DWORD PTR _s$76621[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
$LN86@GetStream:
; Line 965
	mov	BYTE PTR __$EHRec$[ebp+12], 18		; 00000012H
	lea	ecx, DWORD PTR _pair$76616[ebp]
	call	??1CIndexToPathPair@@QAE@XZ
$LN87@GetStream:
; Line 969
	mov	BYTE PTR _isRenamed$76622[ebp], 0
; Line 971
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+154]
	test	edx, edx
	je	$LN85@GetStream
; Line 973
	lea	eax, DWORD PTR _fullProcessedPath$76609[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 168				; 000000a8H
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
; Line 974
	movzx	ecx, BYTE PTR _isAnti$76589[ebp]
	test	ecx, ecx
	je	SHORT $LN84@GetStream
; Line 975
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 168				; 000000a8H
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	DWORD PTR tv1887[ebp], eax
	mov	edx, DWORD PTR tv1887[ebp]
	push	edx
	call	?RemoveDir@NDir@NFile@NWindows@@YG_NPB_W@Z ; NWindows::NFile::NDir::RemoveDir
$LN84@GetStream:
; Line 977
	lea	ecx, DWORD PTR _linkPath$76440[ebp]
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	mov	BYTE PTR tv1888[ebp], al
	movzx	eax, BYTE PTR tv1888[ebp]
	test	eax, eax
	je	SHORT $LN83@GetStream
; Line 979
	mov	DWORD PTR $T78891[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+12], 16		; 00000010H
	lea	ecx, DWORD PTR _fullProcessedPath$76609[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR _processedPath$76601[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _outStreamLoc$76562[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _linkPath$76440[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T78891[ebp]
	jmp	$LN188@GetStream
$LN83@GetStream:
; Line 980
	jmp	$LN82@GetStream
$LN85@GetStream:
; Line 981
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+192]
	test	edx, edx
	jne	$LN82@GetStream
; Line 985
	lea	ecx, DWORD PTR _fileInfo$76630[ebp]
	call	??0CFileInfo@NFind@NFile@NWindows@@QAE@XZ
	mov	DWORD PTR tv1889[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 22		; 00000016H
; Line 986
	lea	ecx, DWORD PTR _fullProcessedPath$76609[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	DWORD PTR tv1890[ebp], eax
	mov	eax, DWORD PTR tv1890[ebp]
	push	eax
	lea	ecx, DWORD PTR _fileInfo$76630[ebp]
	call	?Find@CFileInfo@NFind@NFile@NWindows@@QAE_NPB_W@Z ; NWindows::NFile::NFind::CFileInfo::Find
	mov	BYTE PTR tv1891[ebp], al
	movzx	ecx, BYTE PTR tv1891[ebp]
	test	ecx, ecx
	je	$LN80@GetStream
; Line 988
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+88]
	mov	DWORD PTR tv972[ebp], eax
	cmp	DWORD PTR tv972[ebp], 0
	je	SHORT $LN76@GetStream
	cmp	DWORD PTR tv972[ebp], 2
	je	SHORT $LN77@GetStream
	jmp	$LN78@GetStream
$LN77@GetStream:
; Line 991
	mov	DWORD PTR $T78892[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+12], 18		; 00000012H
	lea	ecx, DWORD PTR _fileInfo$76630[ebp]
	call	??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 16		; 00000010H
	lea	ecx, DWORD PTR _fullProcessedPath$76609[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR _processedPath$76601[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _outStreamLoc$76562[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _linkPath$76440[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T78892[ebp]
	jmp	$LN188@GetStream
$LN76@GetStream:
; Line 994
	lea	ecx, DWORD PTR _fullProcessedPath$76609[ebp]
	call	?ReverseFind_PathSepar@UString@@QBEHXZ	; UString::ReverseFind_PathSepar
	mov	DWORD PTR _slashPos$76640[ebp], eax
; Line 995
	mov	ecx, DWORD PTR _slashPos$76640[ebp]
	add	ecx, 1
	push	ecx
	lea	edx, DWORD PTR $T78893[ebp]
	push	edx
	lea	ecx, DWORD PTR _fullProcessedPath$76609[ebp]
	call	?Left@UString@@QBE?AV1@I@Z		; UString::Left
	mov	DWORD PTR tv1892[ebp], eax
	mov	eax, DWORD PTR tv1892[ebp]
	mov	DWORD PTR tv1631[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 23		; 00000017H
	lea	ecx, DWORD PTR _fileInfo$76630[ebp+40]
	push	ecx
	mov	edx, DWORD PTR tv1631[ebp]
	push	edx
	lea	eax, DWORD PTR _realFullProcessedPath$76641[ebp]
	push	eax
	call	??H@YG?AVUString@@ABV0@0@Z		; operator+
	mov	DWORD PTR tv1893[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 25		; 00000019H
	lea	ecx, DWORD PTR $T78893[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
; Line 1002
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+248]
	test	edx, edx
	je	SHORT $LN205@GetStream
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 240				; 000000f0H
	mov	DWORD PTR tv1032[ebp], eax
	jmp	SHORT $LN206@GetStream
$LN205@GetStream:
	mov	DWORD PTR tv1032[ebp], 0
$LN206@GetStream:
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+230]
	test	edx, edx
	je	SHORT $LN207@GetStream
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 216				; 000000d8H
	mov	DWORD PTR tv1040[ebp], eax
	jmp	SHORT $LN208@GetStream
$LN207@GetStream:
	mov	DWORD PTR tv1040[ebp], 0
$LN208@GetStream:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??C?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QBEPAUIFolderArchiveExtractCallback@@XZ ; CMyComPtr<IFolderArchiveExtractCallback>::operator->
	mov	DWORD PTR tv1894[ebp], eax
	mov	ecx, DWORD PTR tv1894[ebp]
	mov	DWORD PTR tv991[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 104				; 00000068H
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	DWORD PTR tv1895[ebp], eax
	lea	ecx, DWORD PTR _realFullProcessedPath$76641[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	DWORD PTR tv1896[ebp], eax
	mov	esi, esp
	lea	edx, DWORD PTR _overwriteResult$76644[ebp]
	push	edx
	mov	eax, DWORD PTR tv1032[ebp]
	push	eax
	mov	ecx, DWORD PTR tv1040[ebp]
	push	ecx
	mov	edx, DWORD PTR tv1895[ebp]
	push	edx
	lea	eax, DWORD PTR _fileInfo$76630[ebp]
	push	eax
	lea	ecx, DWORD PTR _fileInfo$76630[ebp+24]
	push	ecx
	mov	edx, DWORD PTR tv1896[ebp]
	push	edx
	mov	eax, DWORD PTR tv991[ebp]
	push	eax
	mov	ecx, DWORD PTR tv991[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv1897[ebp], eax
	mov	ecx, DWORD PTR tv1897[ebp]
	mov	DWORD PTR ___result__$76645[ebp], ecx
	cmp	DWORD PTR ___result__$76645[ebp], 0
	je	SHORT $LN75@GetStream
	mov	edx, DWORD PTR ___result__$76645[ebp]
	mov	DWORD PTR $T78898[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 22		; 00000016H
	lea	ecx, DWORD PTR _realFullProcessedPath$76641[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 18		; 00000012H
	lea	ecx, DWORD PTR _fileInfo$76630[ebp]
	call	??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 16		; 00000010H
	lea	ecx, DWORD PTR _fullProcessedPath$76609[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR _processedPath$76601[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _outStreamLoc$76562[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _linkPath$76440[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T78898[ebp]
	jmp	$LN188@GetStream
$LN75@GetStream:
; Line 1004
	mov	eax, DWORD PTR _overwriteResult$76644[ebp]
	mov	DWORD PTR tv1063[ebp], eax
	cmp	DWORD PTR tv1063[ebp], 5
	ja	$LN66@GetStream
	mov	ecx, DWORD PTR tv1063[ebp]
	jmp	DWORD PTR $LN289@GetStream[ecx*4]
$LN72@GetStream:
; Line 1006
	mov	DWORD PTR $T78899[ebp], -2147467260	; 80004004H
	mov	BYTE PTR __$EHRec$[ebp+12], 22		; 00000016H
	lea	ecx, DWORD PTR _realFullProcessedPath$76641[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 18		; 00000012H
	lea	ecx, DWORD PTR _fileInfo$76630[ebp]
	call	??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 16		; 00000010H
	lea	ecx, DWORD PTR _fullProcessedPath$76609[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR _processedPath$76601[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _outStreamLoc$76562[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _linkPath$76440[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T78899[ebp]
	jmp	$LN188@GetStream
$LN71@GetStream:
; Line 1007
	mov	DWORD PTR $T78900[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+12], 22		; 00000016H
	lea	ecx, DWORD PTR _realFullProcessedPath$76641[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 18		; 00000012H
	lea	ecx, DWORD PTR _fileInfo$76630[ebp]
	call	??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 16		; 00000010H
	lea	ecx, DWORD PTR _fullProcessedPath$76609[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR _processedPath$76601[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _outStreamLoc$76562[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _linkPath$76440[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T78900[ebp]
	jmp	$LN188@GetStream
$LN70@GetStream:
; Line 1008
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+88], 2
	mov	DWORD PTR $T78901[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+12], 22		; 00000016H
	lea	ecx, DWORD PTR _realFullProcessedPath$76641[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 18		; 00000012H
	lea	ecx, DWORD PTR _fileInfo$76630[ebp]
	call	??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 16		; 00000010H
	lea	ecx, DWORD PTR _fullProcessedPath$76609[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR _processedPath$76601[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _outStreamLoc$76562[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _linkPath$76440[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T78901[ebp]
	jmp	$LN188@GetStream
$LN69@GetStream:
; Line 1009
	jmp	$LN73@GetStream
$LN68@GetStream:
; Line 1010
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+88], 1
	jmp	SHORT $LN73@GetStream
$LN67@GetStream:
; Line 1011
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+88], 3
	jmp	SHORT $LN73@GetStream
$LN66@GetStream:
; Line 1013
	mov	DWORD PTR $T78902[ebp], -2147467259	; 80004005H
	mov	BYTE PTR __$EHRec$[ebp+12], 22		; 00000016H
	lea	ecx, DWORD PTR _realFullProcessedPath$76641[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 18		; 00000012H
	lea	ecx, DWORD PTR _fileInfo$76630[ebp]
	call	??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 16		; 00000010H
	lea	ecx, DWORD PTR _fullProcessedPath$76609[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR _processedPath$76601[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _outStreamLoc$76562[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _linkPath$76440[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T78902[ebp]
	jmp	$LN188@GetStream
$LN73@GetStream:
; Line 1015
	mov	BYTE PTR __$EHRec$[ebp+12], 22		; 00000016H
	lea	ecx, DWORD PTR _realFullProcessedPath$76641[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
$LN78@GetStream:
; Line 1017
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+88], 3
	jne	$LN65@GetStream
; Line 1019
	lea	eax, DWORD PTR _fullProcessedPath$76609[ebp]
	push	eax
	call	?AutoRenamePath@@YG_NAAVUString@@@Z	; AutoRenamePath
	mov	BYTE PTR tv1898[ebp], al
	movzx	ecx, BYTE PTR tv1898[ebp]
	test	ecx, ecx
	jne	$LN64@GetStream
; Line 1021
	lea	edx, DWORD PTR _fullProcessedPath$76609[ebp]
	push	edx
	mov	eax, DWORD PTR _kCantAutoRename
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SendMessageError@CArchiveExtractCallback@@AAEJPBDABVUString@@@Z ; CArchiveExtractCallback::SendMessageError
	mov	DWORD PTR tv1899[ebp], eax
	mov	ecx, DWORD PTR tv1899[ebp]
	mov	DWORD PTR ___result__$76669[ebp], ecx
	cmp	DWORD PTR ___result__$76669[ebp], 0
	je	SHORT $LN63@GetStream
	mov	edx, DWORD PTR ___result__$76669[ebp]
	mov	DWORD PTR $T78903[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 18		; 00000012H
	lea	ecx, DWORD PTR _fileInfo$76630[ebp]
	call	??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 16		; 00000010H
	lea	ecx, DWORD PTR _fullProcessedPath$76609[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR _processedPath$76601[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _outStreamLoc$76562[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _linkPath$76440[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T78903[ebp]
	jmp	$LN188@GetStream
$LN63@GetStream:
; Line 1022
	mov	DWORD PTR $T78904[ebp], -2147467259	; 80004005H
	mov	BYTE PTR __$EHRec$[ebp+12], 18		; 00000012H
	lea	ecx, DWORD PTR _fileInfo$76630[ebp]
	call	??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 16		; 00000010H
	lea	ecx, DWORD PTR _fullProcessedPath$76609[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR _processedPath$76601[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _outStreamLoc$76562[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _linkPath$76440[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T78904[ebp]
	jmp	$LN188@GetStream
$LN64@GetStream:
; Line 1024
	mov	BYTE PTR _isRenamed$76622[ebp], 1
	jmp	$LN62@GetStream
$LN65@GetStream:
; Line 1026
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+88], 4
	jne	$LN61@GetStream
; Line 1028
	lea	ecx, DWORD PTR _fullProcessedPath$76609[ebp]
	push	ecx
	lea	ecx, DWORD PTR _existPath$76676[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	DWORD PTR tv1900[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 26		; 0000001aH
; Line 1029
	lea	edx, DWORD PTR _existPath$76676[ebp]
	push	edx
	call	?AutoRenamePath@@YG_NAAVUString@@@Z	; AutoRenamePath
	mov	BYTE PTR tv1901[ebp], al
	movzx	eax, BYTE PTR tv1901[ebp]
	test	eax, eax
	jne	$LN60@GetStream
; Line 1031
	lea	ecx, DWORD PTR _fullProcessedPath$76609[ebp]
	push	ecx
	mov	edx, DWORD PTR _kCantAutoRename
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SendMessageError@CArchiveExtractCallback@@AAEJPBDABVUString@@@Z ; CArchiveExtractCallback::SendMessageError
	mov	DWORD PTR tv1902[ebp], eax
	mov	eax, DWORD PTR tv1902[ebp]
	mov	DWORD PTR ___result__$76678[ebp], eax
	cmp	DWORD PTR ___result__$76678[ebp], 0
	je	SHORT $LN59@GetStream
	mov	ecx, DWORD PTR ___result__$76678[ebp]
	mov	DWORD PTR $T78905[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 22		; 00000016H
	lea	ecx, DWORD PTR _existPath$76676[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 18		; 00000012H
	lea	ecx, DWORD PTR _fileInfo$76630[ebp]
	call	??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 16		; 00000010H
	lea	ecx, DWORD PTR _fullProcessedPath$76609[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR _processedPath$76601[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _outStreamLoc$76562[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _linkPath$76440[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T78905[ebp]
	jmp	$LN188@GetStream
$LN59@GetStream:
; Line 1032
	mov	DWORD PTR $T78906[ebp], -2147467259	; 80004005H
	mov	BYTE PTR __$EHRec$[ebp+12], 22		; 00000016H
	lea	ecx, DWORD PTR _existPath$76676[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 18		; 00000012H
	lea	ecx, DWORD PTR _fileInfo$76630[ebp]
	call	??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 16		; 00000010H
	lea	ecx, DWORD PTR _fullProcessedPath$76609[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR _processedPath$76601[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _outStreamLoc$76562[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _linkPath$76440[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T78906[ebp]
	jmp	$LN188@GetStream
$LN60@GetStream:
; Line 1035
	lea	ecx, DWORD PTR _existPath$76676[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	DWORD PTR tv1903[ebp], eax
	lea	ecx, DWORD PTR _fullProcessedPath$76609[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	DWORD PTR tv1904[ebp], eax
	mov	edx, DWORD PTR tv1903[ebp]
	push	edx
	mov	eax, DWORD PTR tv1904[ebp]
	push	eax
	call	?MyMoveFile@NDir@NFile@NWindows@@YG_NPB_W0@Z ; NWindows::NFile::NDir::MyMoveFile
	mov	BYTE PTR tv1905[ebp], al
	movzx	ecx, BYTE PTR tv1905[ebp]
	test	ecx, ecx
	jne	$LN58@GetStream
; Line 1037
	lea	edx, DWORD PTR _fullProcessedPath$76609[ebp]
	push	edx
	lea	eax, DWORD PTR _existPath$76676[ebp]
	push	eax
	mov	ecx, DWORD PTR _kCantRenameFile
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SendMessageError2@CArchiveExtractCallback@@AAEJPBDABVUString@@1@Z ; CArchiveExtractCallback::SendMessageError2
	mov	DWORD PTR tv1906[ebp], eax
	mov	edx, DWORD PTR tv1906[ebp]
	mov	DWORD PTR ___result__$76684[ebp], edx
	cmp	DWORD PTR ___result__$76684[ebp], 0
	je	SHORT $LN57@GetStream
	mov	eax, DWORD PTR ___result__$76684[ebp]
	mov	DWORD PTR $T78907[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 22		; 00000016H
	lea	ecx, DWORD PTR _existPath$76676[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 18		; 00000012H
	lea	ecx, DWORD PTR _fileInfo$76630[ebp]
	call	??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 16		; 00000010H
	lea	ecx, DWORD PTR _fullProcessedPath$76609[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR _processedPath$76601[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _outStreamLoc$76562[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _linkPath$76440[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T78907[ebp]
	jmp	$LN188@GetStream
$LN57@GetStream:
; Line 1038
	mov	DWORD PTR $T78908[ebp], -2147467259	; 80004005H
	mov	BYTE PTR __$EHRec$[ebp+12], 22		; 00000016H
	lea	ecx, DWORD PTR _existPath$76676[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 18		; 00000012H
	lea	ecx, DWORD PTR _fileInfo$76630[ebp]
	call	??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 16		; 00000010H
	lea	ecx, DWORD PTR _fullProcessedPath$76609[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR _processedPath$76601[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _outStreamLoc$76562[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _linkPath$76440[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T78908[ebp]
	jmp	$LN188@GetStream
$LN58@GetStream:
; Line 1040
	mov	BYTE PTR __$EHRec$[ebp+12], 22		; 00000016H
	lea	ecx, DWORD PTR _existPath$76676[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
; Line 1041
	jmp	$LN62@GetStream
$LN61@GetStream:
; Line 1043
	lea	ecx, DWORD PTR _fileInfo$76630[ebp]
	call	?IsDir@CFileInfoBase@NFind@NFile@NWindows@@QBE_NXZ ; NWindows::NFile::NFind::CFileInfoBase::IsDir
	mov	BYTE PTR tv1907[ebp], al
	movzx	ecx, BYTE PTR tv1907[ebp]
	test	ecx, ecx
	je	$LN55@GetStream
; Line 1046
	lea	ecx, DWORD PTR _fullProcessedPath$76609[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	DWORD PTR tv1908[ebp], eax
	mov	edx, DWORD PTR tv1908[ebp]
	push	edx
	call	?RemoveDir@NDir@NFile@NWindows@@YG_NPB_W@Z ; NWindows::NFile::NDir::RemoveDir
	mov	BYTE PTR tv1909[ebp], al
	movzx	eax, BYTE PTR tv1909[ebp]
	test	eax, eax
	jne	$LN54@GetStream
; Line 1048
	lea	ecx, DWORD PTR _fullProcessedPath$76609[ebp]
	push	ecx
	mov	edx, DWORD PTR _kCantDeleteOutputDir
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SendMessageError_with_LastError@CArchiveExtractCallback@@AAEJPBDABVUString@@@Z ; CArchiveExtractCallback::SendMessageError_with_LastError
	mov	DWORD PTR tv1910[ebp], eax
	mov	eax, DWORD PTR tv1910[ebp]
	mov	DWORD PTR ___result__$76692[ebp], eax
	cmp	DWORD PTR ___result__$76692[ebp], 0
	je	SHORT $LN53@GetStream
	mov	ecx, DWORD PTR ___result__$76692[ebp]
	mov	DWORD PTR $T78909[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 18		; 00000012H
	lea	ecx, DWORD PTR _fileInfo$76630[ebp]
	call	??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 16		; 00000010H
	lea	ecx, DWORD PTR _fullProcessedPath$76609[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR _processedPath$76601[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _outStreamLoc$76562[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _linkPath$76440[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T78909[ebp]
	jmp	$LN188@GetStream
$LN53@GetStream:
; Line 1049
	mov	DWORD PTR $T78910[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+12], 18		; 00000012H
	lea	ecx, DWORD PTR _fileInfo$76630[ebp]
	call	??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 16		; 00000010H
	lea	ecx, DWORD PTR _fullProcessedPath$76609[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR _processedPath$76601[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _outStreamLoc$76562[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _linkPath$76440[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T78910[ebp]
	jmp	$LN188@GetStream
$LN54@GetStream:
; Line 1052
	jmp	$LN62@GetStream
$LN55@GetStream:
; Line 1054
	mov	BYTE PTR _needDelete$76698[ebp], 1
; Line 1055
	movzx	edx, BYTE PTR _needDelete$76698[ebp]
	test	edx, edx
	je	$LN62@GetStream
; Line 1057
	lea	ecx, DWORD PTR _fullProcessedPath$76609[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	DWORD PTR tv1911[ebp], eax
	mov	eax, DWORD PTR tv1911[ebp]
	push	eax
	call	?DeleteFileAlways@NDir@NFile@NWindows@@YG_NPB_W@Z ; NWindows::NFile::NDir::DeleteFileAlways
	mov	BYTE PTR tv1912[ebp], al
	movzx	ecx, BYTE PTR tv1912[ebp]
	test	ecx, ecx
	jne	$LN62@GetStream
; Line 1059
	lea	edx, DWORD PTR _fullProcessedPath$76609[ebp]
	push	edx
	mov	eax, DWORD PTR _kCantDeleteOutputFile
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SendMessageError_with_LastError@CArchiveExtractCallback@@AAEJPBDABVUString@@@Z ; CArchiveExtractCallback::SendMessageError_with_LastError
	mov	DWORD PTR tv1913[ebp], eax
	mov	ecx, DWORD PTR tv1913[ebp]
	mov	DWORD PTR ___result__$76701[ebp], ecx
	cmp	DWORD PTR ___result__$76701[ebp], 0
	je	SHORT $LN49@GetStream
	mov	edx, DWORD PTR ___result__$76701[ebp]
	mov	DWORD PTR $T78911[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 18		; 00000012H
	lea	ecx, DWORD PTR _fileInfo$76630[ebp]
	call	??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 16		; 00000010H
	lea	ecx, DWORD PTR _fullProcessedPath$76609[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR _processedPath$76601[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _outStreamLoc$76562[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _linkPath$76440[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T78911[ebp]
	jmp	$LN188@GetStream
$LN49@GetStream:
; Line 1060
	mov	DWORD PTR $T78912[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+12], 18		; 00000012H
	lea	ecx, DWORD PTR _fileInfo$76630[ebp]
	call	??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 16		; 00000010H
	lea	ecx, DWORD PTR _fullProcessedPath$76609[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR _processedPath$76601[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _outStreamLoc$76562[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _linkPath$76440[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T78912[ebp]
	jmp	$LN188@GetStream
$LN62@GetStream:
; Line 1067
	jmp	$LN48@GetStream
$LN80@GetStream:
; Line 1071
	lea	ecx, DWORD PTR _fullProcessedPath$76609[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	DWORD PTR tv1914[ebp], eax
	mov	eax, DWORD PTR tv1914[ebp]
	push	eax
	call	?FindAltStreamColon@NName@NFile@NWindows@@YGHPB_W@Z ; NWindows::NFile::NName::FindAltStreamColon
	mov	DWORD PTR tv1915[ebp], eax
	mov	ecx, DWORD PTR tv1915[ebp]
	mov	DWORD PTR _colonPos$76707[ebp], ecx
; Line 1072
	cmp	DWORD PTR _colonPos$76707[ebp], 0
	jl	$LN48@GetStream
	lea	ecx, DWORD PTR _fullProcessedPath$76609[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	DWORD PTR tv1916[ebp], eax
	mov	edx, DWORD PTR _colonPos$76707[ebp]
	mov	eax, DWORD PTR tv1916[ebp]
	movzx	ecx, WORD PTR [eax+edx*2+2]
	test	ecx, ecx
	je	$LN48@GetStream
; Line 1074
	lea	edx, DWORD PTR _fullProcessedPath$76609[ebp]
	push	edx
	lea	ecx, DWORD PTR _parentFsPath$76710[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	DWORD PTR tv1917[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 27		; 0000001bH
; Line 1075
	mov	eax, DWORD PTR _colonPos$76707[ebp]
	push	eax
	lea	ecx, DWORD PTR _parentFsPath$76710[ebp]
	call	?DeleteFrom@UString@@QAEXI@Z		; UString::DeleteFrom
; Line 1076
	lea	ecx, DWORD PTR _parentFi$76711[ebp]
	call	??0CFileInfo@NFind@NFile@NWindows@@QAE@XZ
	mov	DWORD PTR tv1918[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 28		; 0000001cH
; Line 1077
	lea	ecx, DWORD PTR _parentFsPath$76710[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	DWORD PTR tv1919[ebp], eax
	mov	ecx, DWORD PTR tv1919[ebp]
	push	ecx
	lea	ecx, DWORD PTR _parentFi$76711[ebp]
	call	?Find@CFileInfo@NFind@NFile@NWindows@@QAE_NPB_W@Z ; NWindows::NFile::NFind::CFileInfo::Find
	mov	BYTE PTR tv1920[ebp], al
	movzx	edx, BYTE PTR tv1920[ebp]
	test	edx, edx
	je	SHORT $LN46@GetStream
; Line 1079
	lea	ecx, DWORD PTR _parentFi$76711[ebp]
	call	?IsReadOnly@CFileInfoBase@NFind@NFile@NWindows@@QBE_NXZ ; NWindows::NFile::NFind::CFileInfoBase::IsReadOnly
	mov	BYTE PTR tv1921[ebp], al
	movzx	eax, BYTE PTR tv1921[ebp]
	test	eax, eax
	je	SHORT $LN46@GetStream
; Line 1080
	lea	ecx, DWORD PTR _parentFsPath$76710[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	DWORD PTR tv1922[ebp], eax
	mov	ecx, DWORD PTR _parentFi$76711[ebp+32]
	and	ecx, -2					; fffffffeH
	push	ecx
	mov	edx, DWORD PTR tv1922[ebp]
	push	edx
	call	?SetFileAttrib@NDir@NFile@NWindows@@YG_NPB_WK@Z ; NWindows::NFile::NDir::SetFileAttrib
$LN46@GetStream:
; Line 1082
	mov	BYTE PTR __$EHRec$[ebp+12], 27		; 0000001bH
	lea	ecx, DWORD PTR _parentFi$76711[ebp]
	call	??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 22		; 00000016H
	lea	ecx, DWORD PTR _parentFsPath$76710[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
$LN48@GetStream:
; Line 1087
	mov	BYTE PTR __$EHRec$[ebp+12], 18		; 00000012H
	lea	ecx, DWORD PTR _fileInfo$76630[ebp]
	call	??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ
$LN82@GetStream:
; Line 1088
	lea	eax, DWORD PTR _fullProcessedPath$76609[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 168				; 000000a8H
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
; Line 1091
	movzx	ecx, BYTE PTR _isAnti$76589[ebp]
	test	ecx, ecx
	jne	$LN44@GetStream
; Line 1095
	lea	ecx, DWORD PTR _linkPath$76440[ebp]
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	mov	BYTE PTR tv1923[ebp], al
	movzx	edx, BYTE PTR tv1923[ebp]
	test	edx, edx
	jne	$LN43@GetStream
; Line 1099
	lea	ecx, DWORD PTR _relatPath$76716[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR tv1924[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 29		; 0000001dH
; Line 1100
	movzx	eax, BYTE PTR _isRelative$76439[ebp]
	test	eax, eax
	je	SHORT $LN42@GetStream
; Line 1101
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 104				; 00000068H
	push	ecx
	lea	edx, DWORD PTR $T78913[ebp]
	push	edx
	call	?GetDirPrefixOf@@YG?AVUString@@ABV1@@Z	; GetDirPrefixOf
	mov	DWORD PTR tv1925[ebp], eax
	mov	eax, DWORD PTR tv1925[ebp]
	mov	DWORD PTR tv1722[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 30		; 0000001eH
	mov	ecx, DWORD PTR tv1722[ebp]
	push	ecx
	lea	ecx, DWORD PTR _relatPath$76716[ebp]
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
	mov	BYTE PTR __$EHRec$[ebp+12], 29		; 0000001dH
	lea	ecx, DWORD PTR $T78913[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
$LN42@GetStream:
; Line 1102
	lea	edx, DWORD PTR _linkPath$76440[ebp]
	push	edx
	lea	ecx, DWORD PTR _relatPath$76716[ebp]
	call	??YUString@@QAEAAV0@ABV0@@Z		; UString::operator+=
; Line 1104
	lea	eax, DWORD PTR _relatPath$76716[ebp]
	push	eax
	call	?IsSafePath@@YG_NABVUString@@@Z		; IsSafePath
	mov	BYTE PTR tv1926[ebp], al
	movzx	ecx, BYTE PTR tv1926[ebp]
	test	ecx, ecx
	jne	$LN41@GetStream
; Line 1106
	lea	edx, DWORD PTR _relatPath$76716[ebp]
	push	edx
	push	OFFSET $SG76721
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SendMessageError@CArchiveExtractCallback@@AAEJPBDABVUString@@@Z ; CArchiveExtractCallback::SendMessageError
	mov	DWORD PTR tv1927[ebp], eax
	mov	eax, DWORD PTR tv1927[ebp]
	mov	DWORD PTR ___result__$76720[ebp], eax
	cmp	DWORD PTR ___result__$76720[ebp], 0
	je	SHORT $LN40@GetStream
	mov	ecx, DWORD PTR ___result__$76720[ebp]
	mov	DWORD PTR $T78914[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 18		; 00000012H
	lea	ecx, DWORD PTR _relatPath$76716[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 16		; 00000010H
	lea	ecx, DWORD PTR _fullProcessedPath$76609[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR _processedPath$76601[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _outStreamLoc$76562[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _linkPath$76440[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T78914[ebp]
	jmp	$LN188@GetStream
$LN40@GetStream:
; Line 1108
	jmp	$LN39@GetStream
$LN41@GetStream:
; Line 1110
	lea	ecx, DWORD PTR _existPath$76725[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR tv1928[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 31		; 0000001fH
; Line 1111
	movzx	edx, BYTE PTR _isHardLink$76437[ebp]
	test	edx, edx
	jne	SHORT $LN37@GetStream
	movzx	eax, BYTE PTR _isRelative$76439[ebp]
	test	eax, eax
	jne	$LN38@GetStream
$LN37@GetStream:
; Line 1113
	lea	ecx, DWORD PTR _relatPath$76716[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	DWORD PTR tv1929[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	DWORD PTR tv1930[ebp], eax
	lea	ecx, DWORD PTR _existPath$76725[ebp]
	push	ecx
	mov	edx, DWORD PTR tv1929[ebp]
	push	edx
	mov	eax, DWORD PTR tv1930[ebp]
	push	eax
	call	?GetFullPath@NName@NFile@NWindows@@YG_NPB_W0AAVUString@@@Z ; NWindows::NFile::NName::GetFullPath
	mov	BYTE PTR tv1931[ebp], al
	movzx	ecx, BYTE PTR tv1931[ebp]
	test	ecx, ecx
	jne	$LN36@GetStream
; Line 1115
	lea	edx, DWORD PTR _relatPath$76716[ebp]
	push	edx
	push	OFFSET $SG76730
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SendMessageError@CArchiveExtractCallback@@AAEJPBDABVUString@@@Z ; CArchiveExtractCallback::SendMessageError
	mov	DWORD PTR tv1932[ebp], eax
	mov	eax, DWORD PTR tv1932[ebp]
	mov	DWORD PTR ___result__$76729[ebp], eax
	cmp	DWORD PTR ___result__$76729[ebp], 0
	je	SHORT $LN36@GetStream
	mov	ecx, DWORD PTR ___result__$76729[ebp]
	mov	DWORD PTR $T78915[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 29		; 0000001dH
	lea	ecx, DWORD PTR _existPath$76725[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 18		; 00000012H
	lea	ecx, DWORD PTR _relatPath$76716[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 16		; 00000010H
	lea	ecx, DWORD PTR _fullProcessedPath$76609[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR _processedPath$76601[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _outStreamLoc$76562[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _linkPath$76440[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T78915[ebp]
	jmp	$LN188@GetStream
$LN36@GetStream:
; Line 1118
	jmp	SHORT $LN34@GetStream
$LN38@GetStream:
; Line 1120
	lea	edx, DWORD PTR _linkPath$76440[ebp]
	push	edx
	lea	ecx, DWORD PTR _existPath$76725[ebp]
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
$LN34@GetStream:
; Line 1123
	lea	ecx, DWORD PTR _existPath$76725[ebp]
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	mov	BYTE PTR tv1933[ebp], al
	movzx	eax, BYTE PTR tv1933[ebp]
	test	eax, eax
	jne	$LN33@GetStream
; Line 1125
	movzx	ecx, BYTE PTR _isHardLink$76437[ebp]
	test	ecx, ecx
	je	$LN32@GetStream
; Line 1127
	lea	ecx, DWORD PTR _existPath$76725[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	DWORD PTR tv1934[ebp], eax
	lea	ecx, DWORD PTR _fullProcessedPath$76609[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	DWORD PTR tv1935[ebp], eax
	mov	edx, DWORD PTR tv1934[ebp]
	push	edx
	mov	eax, DWORD PTR tv1935[ebp]
	push	eax
	call	?MyCreateHardLink@NDir@NFile@NWindows@@YG_NPB_W0@Z ; NWindows::NFile::NDir::MyCreateHardLink
	mov	BYTE PTR tv1936[ebp], al
	movzx	ecx, BYTE PTR tv1936[ebp]
	test	ecx, ecx
	jne	$LN31@GetStream
; Line 1129
	lea	edx, DWORD PTR _existPath$76725[ebp]
	push	edx
	lea	eax, DWORD PTR _fullProcessedPath$76609[ebp]
	push	eax
	push	OFFSET $SG76738
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SendMessageError2@CArchiveExtractCallback@@AAEJPBDABVUString@@1@Z ; CArchiveExtractCallback::SendMessageError2
	mov	DWORD PTR tv1937[ebp], eax
	mov	ecx, DWORD PTR tv1937[ebp]
	mov	DWORD PTR ___result__$76737[ebp], ecx
	cmp	DWORD PTR ___result__$76737[ebp], 0
	je	SHORT $LN31@GetStream
	mov	edx, DWORD PTR ___result__$76737[ebp]
	mov	DWORD PTR $T78916[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 29		; 0000001dH
	lea	ecx, DWORD PTR _existPath$76725[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 18		; 00000012H
	lea	ecx, DWORD PTR _relatPath$76716[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 16		; 00000010H
	lea	ecx, DWORD PTR _fullProcessedPath$76609[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR _processedPath$76601[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _outStreamLoc$76562[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _linkPath$76440[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T78916[ebp]
	jmp	$LN188@GetStream
$LN31@GetStream:
; Line 1132
	jmp	$LN33@GetStream
$LN32@GetStream:
; Line 1133
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+26]
	test	ecx, ecx
	je	$LN33@GetStream
; Line 1143
	lea	ecx, DWORD PTR _data$76744[ebp]
	call	??0?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::CBuffer<unsigned char>
	mov	DWORD PTR tv1938[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 32		; 00000020H
; Line 1144
	lea	ecx, DWORD PTR _existPath$76725[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	DWORD PTR tv1939[ebp], eax
	movzx	edx, BYTE PTR _isJunction$76438[ebp]
	test	edx, edx
	sete	al
	movzx	ecx, al
	push	ecx
	mov	edx, DWORD PTR tv1939[ebp]
	push	edx
	lea	eax, DWORD PTR _data$76744[ebp]
	push	eax
	call	?FillLinkData@NFile@NWindows@@YG_NAAV?$CBuffer@E@@PB_W_N@Z ; NWindows::NFile::FillLinkData
	mov	BYTE PTR tv1940[ebp], al
	movzx	ecx, BYTE PTR tv1940[ebp]
	test	ecx, ecx
	je	$LN26@GetStream
; Line 1146
	lea	ecx, DWORD PTR _attr$76746[ebp]
	call	??0CReparseAttr@NFile@NWindows@@QAE@XZ	; NWindows::NFile::CReparseAttr::CReparseAttr
	mov	DWORD PTR tv1941[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 33		; 00000021H
; Line 1147
	lea	ecx, DWORD PTR _data$76744[ebp]
	call	?Size@?$CBuffer@E@@QBEIXZ		; CBuffer<unsigned char>::Size
	mov	DWORD PTR tv1942[ebp], eax
	lea	ecx, DWORD PTR _data$76744[ebp]
	call	??B?$CBuffer@E@@QAEPAEXZ		; CBuffer<unsigned char>::operator unsigned char *
	mov	DWORD PTR tv1943[ebp], eax
	mov	edx, DWORD PTR tv1942[ebp]
	push	edx
	mov	eax, DWORD PTR tv1943[ebp]
	push	eax
	lea	ecx, DWORD PTR _attr$76746[ebp]
	call	?Parse@CReparseAttr@NFile@NWindows@@QAE_NPBEI@Z ; NWindows::NFile::CReparseAttr::Parse
	mov	BYTE PTR tv1944[ebp], al
	movzx	ecx, BYTE PTR tv1944[ebp]
	test	ecx, ecx
	jne	$LN25@GetStream
; Line 1149
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 104				; 00000068H
	push	edx
	push	OFFSET $SG76749
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SendMessageError@CArchiveExtractCallback@@AAEJPBDABVUString@@@Z ; CArchiveExtractCallback::SendMessageError
	mov	DWORD PTR tv1945[ebp], eax
	mov	eax, DWORD PTR tv1945[ebp]
	mov	DWORD PTR ___result__$76748[ebp], eax
	cmp	DWORD PTR ___result__$76748[ebp], 0
	je	$LN24@GetStream
	mov	ecx, DWORD PTR ___result__$76748[ebp]
	mov	DWORD PTR $T78917[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 32		; 00000020H
	lea	ecx, DWORD PTR _attr$76746[ebp]
	call	??1CReparseAttr@NFile@NWindows@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 31		; 0000001fH
	lea	ecx, DWORD PTR _data$76744[ebp]
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+12], 29		; 0000001dH
	lea	ecx, DWORD PTR _existPath$76725[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 18		; 00000012H
	lea	ecx, DWORD PTR _relatPath$76716[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 16		; 00000010H
	lea	ecx, DWORD PTR _fullProcessedPath$76609[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR _processedPath$76601[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _outStreamLoc$76562[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _linkPath$76440[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T78917[ebp]
	jmp	$LN188@GetStream
$LN24@GetStream:
; Line 1152
	jmp	$LN23@GetStream
$LN25@GetStream:
; Line 1153
	lea	ecx, DWORD PTR _data$76744[ebp]
	call	?Size@?$CBuffer@E@@QBEIXZ		; CBuffer<unsigned char>::Size
	mov	DWORD PTR tv1946[ebp], eax
	lea	ecx, DWORD PTR _data$76744[ebp]
	call	??B?$CBuffer@E@@QAEPAEXZ		; CBuffer<unsigned char>::operator unsigned char *
	mov	DWORD PTR tv1947[ebp], eax
	lea	ecx, DWORD PTR _fullProcessedPath$76609[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	DWORD PTR tv1948[ebp], eax
	mov	edx, DWORD PTR tv1946[ebp]
	push	edx
	mov	eax, DWORD PTR tv1947[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+154]
	push	edx
	mov	eax, DWORD PTR tv1948[ebp]
	push	eax
	call	?SetReparseData@NIO@NFile@NWindows@@YG_NPB_W_NPBXK@Z ; NWindows::NFile::NIO::SetReparseData
	mov	BYTE PTR tv1949[ebp], al
	movzx	ecx, BYTE PTR tv1949[ebp]
	test	ecx, ecx
	jne	$LN23@GetStream
; Line 1155
	lea	edx, DWORD PTR _fullProcessedPath$76609[ebp]
	push	edx
	push	OFFSET $SG76756
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SendMessageError_with_LastError@CArchiveExtractCallback@@AAEJPBDABVUString@@@Z ; CArchiveExtractCallback::SendMessageError_with_LastError
	mov	DWORD PTR tv1950[ebp], eax
	mov	eax, DWORD PTR tv1950[ebp]
	mov	DWORD PTR ___result__$76755[ebp], eax
	cmp	DWORD PTR ___result__$76755[ebp], 0
	je	$LN23@GetStream
	mov	ecx, DWORD PTR ___result__$76755[ebp]
	mov	DWORD PTR $T78918[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 32		; 00000020H
	lea	ecx, DWORD PTR _attr$76746[ebp]
	call	??1CReparseAttr@NFile@NWindows@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 31		; 0000001fH
	lea	ecx, DWORD PTR _data$76744[ebp]
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+12], 29		; 0000001dH
	lea	ecx, DWORD PTR _existPath$76725[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 18		; 00000012H
	lea	ecx, DWORD PTR _relatPath$76716[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 16		; 00000010H
	lea	ecx, DWORD PTR _fullProcessedPath$76609[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR _processedPath$76601[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _outStreamLoc$76562[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _linkPath$76440[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T78918[ebp]
	jmp	$LN188@GetStream
$LN23@GetStream:
; Line 1157
	mov	BYTE PTR __$EHRec$[ebp+12], 32		; 00000020H
	lea	ecx, DWORD PTR _attr$76746[ebp]
	call	??1CReparseAttr@NFile@NWindows@@QAE@XZ
$LN26@GetStream:
; Line 1158
	mov	BYTE PTR __$EHRec$[ebp+12], 31		; 0000001fH
	lea	ecx, DWORD PTR _data$76744[ebp]
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
$LN33@GetStream:
; Line 1160
	mov	BYTE PTR __$EHRec$[ebp+12], 29		; 0000001dH
	lea	ecx, DWORD PTR _existPath$76725[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
$LN39@GetStream:
; Line 1163
	mov	BYTE PTR __$EHRec$[ebp+12], 18		; 00000012H
	lea	ecx, DWORD PTR _relatPath$76716[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
; Line 1164
	jmp	$LN44@GetStream
$LN43@GetStream:
; Line 1167
	mov	BYTE PTR _needWriteFile$76760[ebp], 1
; Line 1170
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 400				; 00000190H
	call	?IsEmpty@?$CRecordVector@UCHardLinkNode@@@@QBE_NXZ ; CRecordVector<CHardLinkNode>::IsEmpty
	mov	BYTE PTR tv1951[ebp], al
	movzx	edx, BYTE PTR tv1951[ebp]
	test	edx, edx
	jne	$LN19@GetStream
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+152]
	test	ecx, ecx
	jne	$LN19@GetStream
; Line 1174
	lea	edx, DWORD PTR _defined$76763[ebp]
	push	edx
	lea	eax, DWORD PTR _h$76762[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _archive$76423[ebp]
	push	edx
	call	?Archive_Get_HardLinkNode@@YGJPAUIInArchive@@IAAUCHardLinkNode@@AA_N@Z ; Archive_Get_HardLinkNode
	mov	DWORD PTR tv1952[ebp], eax
	mov	eax, DWORD PTR tv1952[ebp]
	mov	DWORD PTR ___result__$76764[ebp], eax
	cmp	DWORD PTR ___result__$76764[ebp], 0
	je	SHORT $LN18@GetStream
	mov	ecx, DWORD PTR ___result__$76764[ebp]
	mov	DWORD PTR $T78919[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 16		; 00000010H
	lea	ecx, DWORD PTR _fullProcessedPath$76609[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR _processedPath$76601[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _outStreamLoc$76562[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _linkPath$76440[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T78919[ebp]
	jmp	$LN188@GetStream
$LN18@GetStream:
; Line 1175
	movzx	edx, BYTE PTR _defined$76763[ebp]
	test	edx, edx
	je	$LN19@GetStream
; Line 1178
	lea	eax, DWORD PTR _h$76762[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 400				; 00000190H
	call	?FindInSorted2@?$CRecordVector@UCHardLinkNode@@@@QBEHABUCHardLinkNode@@@Z ; CRecordVector<CHardLinkNode>::FindInSorted2
	mov	DWORD PTR tv1953[ebp], eax
	mov	ecx, DWORD PTR tv1953[ebp]
	mov	DWORD PTR _linkIndex$76768[ebp], ecx
; Line 1179
	cmp	DWORD PTR _linkIndex$76768[ebp], 0
	jl	$LN19@GetStream
; Line 1181
	mov	edx, DWORD PTR _linkIndex$76768[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 412				; 0000019cH
	call	??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[]
	mov	DWORD PTR tv1954[ebp], eax
	mov	eax, DWORD PTR tv1954[ebp]
	mov	DWORD PTR _hl$76770[ebp], eax
; Line 1182
	mov	ecx, DWORD PTR _hl$76770[ebp]
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	mov	BYTE PTR tv1955[ebp], al
	movzx	ecx, BYTE PTR tv1955[ebp]
	test	ecx, ecx
	je	SHORT $LN15@GetStream
; Line 1183
	lea	edx, DWORD PTR _fullProcessedPath$76609[ebp]
	push	edx
	mov	ecx, DWORD PTR _hl$76770[ebp]
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
; Line 1184
	jmp	$LN19@GetStream
$LN15@GetStream:
; Line 1186
	mov	ecx, DWORD PTR _hl$76770[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	DWORD PTR tv1956[ebp], eax
	lea	ecx, DWORD PTR _fullProcessedPath$76609[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	DWORD PTR tv1957[ebp], eax
	mov	eax, DWORD PTR tv1956[ebp]
	push	eax
	mov	ecx, DWORD PTR tv1957[ebp]
	push	ecx
	call	?MyCreateHardLink@NDir@NFile@NWindows@@YG_NPB_W0@Z ; NWindows::NFile::NDir::MyCreateHardLink
	mov	BYTE PTR tv1958[ebp], al
	movzx	edx, BYTE PTR tv1958[ebp]
	test	edx, edx
	jne	$LN13@GetStream
; Line 1188
	mov	eax, DWORD PTR _hl$76770[ebp]
	push	eax
	lea	ecx, DWORD PTR _fullProcessedPath$76609[ebp]
	push	ecx
	push	OFFSET $SG76775
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SendMessageError2@CArchiveExtractCallback@@AAEJPBDABVUString@@1@Z ; CArchiveExtractCallback::SendMessageError2
	mov	DWORD PTR tv1959[ebp], eax
	mov	edx, DWORD PTR tv1959[ebp]
	mov	DWORD PTR ___result__$76774[ebp], edx
	cmp	DWORD PTR ___result__$76774[ebp], 0
	je	SHORT $LN12@GetStream
	mov	eax, DWORD PTR ___result__$76774[ebp]
	mov	DWORD PTR $T78920[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 16		; 00000010H
	lea	ecx, DWORD PTR _fullProcessedPath$76609[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR _processedPath$76601[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _outStreamLoc$76562[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _linkPath$76440[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T78920[ebp]
	jmp	$LN188@GetStream
$LN12@GetStream:
; Line 1189
	mov	DWORD PTR $T78921[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+12], 16		; 00000010H
	lea	ecx, DWORD PTR _fullProcessedPath$76609[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR _processedPath$76601[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _outStreamLoc$76562[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _linkPath$76440[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T78921[ebp]
	jmp	$LN188@GetStream
$LN13@GetStream:
; Line 1191
	mov	BYTE PTR _needWriteFile$76760[ebp], 0
$LN19@GetStream:
; Line 1199
	movzx	ecx, BYTE PTR _needWriteFile$76760[ebp]
	test	ecx, ecx
	je	$LN44@GetStream
; Line 1201
	push	32					; 00000020H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR tv1960[ebp], eax
	mov	edx, DWORD PTR tv1960[ebp]
	mov	DWORD PTR $T78923[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 34		; 00000022H
	cmp	DWORD PTR $T78923[ebp], 0
	je	SHORT $LN209@GetStream
	mov	ecx, DWORD PTR $T78923[ebp]
	call	??0COutFileStream@@QAE@XZ
	mov	DWORD PTR tv1962[ebp], eax
	mov	eax, DWORD PTR tv1962[ebp]
	mov	DWORD PTR tv1426[ebp], eax
	jmp	SHORT $LN210@GetStream
$LN209@GetStream:
	mov	DWORD PTR tv1426[ebp], 0
$LN210@GetStream:
	mov	ecx, DWORD PTR tv1426[ebp]
	mov	DWORD PTR $T78922[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 18		; 00000012H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T78922[ebp]
	mov	DWORD PTR [edx+252], eax
; Line 1202
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+252]
	push	edx
	lea	ecx, DWORD PTR _outStreamLoc$76786[ebp]
	call	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 35		; 00000023H
; Line 1203
	lea	ecx, DWORD PTR _fullProcessedPath$76609[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	DWORD PTR tv1427[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+192]
	neg	ecx
	sbb	ecx, ecx
	and	ecx, 2
	add	ecx, 2
	push	ecx
	mov	edx, DWORD PTR tv1427[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+252]
	call	?Open@COutFileStream@@QAE_NPB_WK@Z	; COutFileStream::Open
	mov	BYTE PTR tv1963[ebp], al
	movzx	ecx, BYTE PTR tv1963[ebp]
	test	ecx, ecx
	jne	$LN10@GetStream
; Line 1207
	lea	edx, DWORD PTR _fullProcessedPath$76609[ebp]
	push	edx
	push	OFFSET $SG76789
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SendMessageError_with_LastError@CArchiveExtractCallback@@AAEJPBDABVUString@@@Z ; CArchiveExtractCallback::SendMessageError_with_LastError
	mov	DWORD PTR tv1964[ebp], eax
	mov	eax, DWORD PTR tv1964[ebp]
	mov	DWORD PTR ___result__$76788[ebp], eax
	cmp	DWORD PTR ___result__$76788[ebp], 0
	je	SHORT $LN9@GetStream
	mov	ecx, DWORD PTR ___result__$76788[ebp]
	mov	DWORD PTR $T78926[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 18		; 00000012H
	lea	ecx, DWORD PTR _outStreamLoc$76786[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 16		; 00000010H
	lea	ecx, DWORD PTR _fullProcessedPath$76609[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR _processedPath$76601[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _outStreamLoc$76562[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _linkPath$76440[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T78926[ebp]
	jmp	$LN188@GetStream
$LN9@GetStream:
; Line 1208
	mov	DWORD PTR $T78927[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+12], 18		; 00000012H
	lea	ecx, DWORD PTR _outStreamLoc$76786[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 16		; 00000010H
	lea	ecx, DWORD PTR _fullProcessedPath$76609[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR _processedPath$76601[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _outStreamLoc$76562[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _linkPath$76440[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T78927[ebp]
	jmp	$LN188@GetStream
$LN10@GetStream:
; Line 1214
	movzx	edx, BYTE PTR _isRenamed$76622[ebp]
	test	edx, edx
	je	$LN8@GetStream
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+152]
	test	ecx, ecx
	jne	$LN8@GetStream
; Line 1216
	lea	edx, DWORD PTR _fullProcessedPath$76609[ebp]
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pair$76795[ebp]
	call	??0CIndexToPathPair@@QAE@IABVUString@@@Z ; CIndexToPathPair::CIndexToPathPair
	mov	DWORD PTR tv1965[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 36		; 00000024H
; Line 1217
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 424				; 000001a8H
	call	?Size@?$CObjectVector@UCIndexToPathPair@@@@QBEIXZ ; CObjectVector<CIndexToPathPair>::Size
	mov	DWORD PTR tv1966[ebp], eax
	mov	ecx, DWORD PTR tv1966[ebp]
	mov	DWORD PTR _oldSize$76796[ebp], ecx
; Line 1218
	lea	edx, DWORD PTR _pair$76795[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 424				; 000001a8H
	call	?AddToUniqueSorted@?$CObjectVector@UCIndexToPathPair@@@@QAEIABUCIndexToPathPair@@@Z ; CObjectVector<CIndexToPathPair>::AddToUniqueSorted
	mov	DWORD PTR tv1967[ebp], eax
	mov	eax, DWORD PTR tv1967[ebp]
	mov	DWORD PTR _insertIndex$76797[ebp], eax
; Line 1219
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 424				; 000001a8H
	call	?Size@?$CObjectVector@UCIndexToPathPair@@@@QBEIXZ ; CObjectVector<CIndexToPathPair>::Size
	mov	DWORD PTR tv1968[ebp], eax
	mov	ecx, DWORD PTR _oldSize$76796[ebp]
	cmp	ecx, DWORD PTR tv1968[ebp]
	jne	SHORT $LN7@GetStream
; Line 1220
	mov	edx, DWORD PTR _insertIndex$76797[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 424				; 000001a8H
	call	??A?$CObjectVector@UCIndexToPathPair@@@@QAEAAUCIndexToPathPair@@I@Z ; CObjectVector<CIndexToPathPair>::operator[]
	mov	DWORD PTR tv1969[ebp], eax
	lea	eax, DWORD PTR _fullProcessedPath$76609[ebp]
	push	eax
	mov	ecx, DWORD PTR tv1969[ebp]
	add	ecx, 4
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
$LN7@GetStream:
; Line 1221
	mov	BYTE PTR __$EHRec$[ebp+12], 35		; 00000023H
	lea	ecx, DWORD PTR _pair$76795[ebp]
	call	??1CIndexToPathPair@@QAE@XZ
$LN8@GetStream:
; Line 1224
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+192]
	test	edx, edx
	je	$LN6@GetStream
; Line 1226
	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+188]
	push	ecx
	mov	edx, DWORD PTR [eax+184]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+252]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+252]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv1970[ebp], eax
	mov	eax, DWORD PTR tv1970[ebp]
	mov	DWORD PTR ___result__$76800[ebp], eax
	cmp	DWORD PTR ___result__$76800[ebp], 0
	je	SHORT $LN6@GetStream
	mov	ecx, DWORD PTR ___result__$76800[ebp]
	mov	DWORD PTR $T78928[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 18		; 00000012H
	lea	ecx, DWORD PTR _outStreamLoc$76786[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 16		; 00000010H
	lea	ecx, DWORD PTR _fullProcessedPath$76609[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR _processedPath$76601[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _outStreamLoc$76562[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _linkPath$76440[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T78928[ebp]
	jmp	$LN188@GetStream
$LN6@GetStream:
; Line 1228
	lea	edx, DWORD PTR _outStreamLoc$76786[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 256				; 00000100H
	call	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@ABV0@@Z ; CMyComPtr<ISequentialOutStream>::operator=
; Line 1229
	mov	BYTE PTR __$EHRec$[ebp+12], 18		; 00000012H
	lea	ecx, DWORD PTR _outStreamLoc$76786[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
$LN44@GetStream:
; Line 1233
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 256				; 00000100H
	push	eax
	lea	ecx, DWORD PTR _outStreamLoc$76562[ebp]
	call	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@ABV0@@Z ; CMyComPtr<ISequentialOutStream>::operator=
; Line 1234
	mov	BYTE PTR __$EHRec$[ebp+12], 16		; 00000010H
	lea	ecx, DWORD PTR _fullProcessedPath$76609[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR _processedPath$76601[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
$LN110@GetStream:
; Line 1239
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 264				; 00000108H
	call	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
	mov	DWORD PTR tv1971[ebp], eax
	cmp	DWORD PTR tv1971[ebp], 0
	je	SHORT $LN4@GetStream
; Line 1242
	cmp	DWORD PTR _askExtractMode$[ebp], 0
	je	SHORT $LN2@GetStream
	cmp	DWORD PTR _askExtractMode$[ebp], 1
	jne	SHORT $LN4@GetStream
$LN2@GetStream:
; Line 1244
	lea	ecx, DWORD PTR _outStreamLoc$76562[ebp]
	call	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
	mov	DWORD PTR tv1972[ebp], eax
	mov	ecx, DWORD PTR tv1972[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+260]
	call	?SetStream@COutStreamWithHash@@QAEXPAUISequentialOutStream@@@Z ; COutStreamWithHash::SetStream
; Line 1245
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 264				; 00000108H
	push	eax
	lea	ecx, DWORD PTR _outStreamLoc$76562[ebp]
	call	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@ABV0@@Z ; CMyComPtr<ISequentialOutStream>::operator=
; Line 1246
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+260]
	call	?Init@COutStreamWithHash@@QAEX_N@Z	; COutStreamWithHash::Init
; Line 1247
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+268], 1
$LN4@GetStream:
; Line 1253
	lea	ecx, DWORD PTR _outStreamLoc$76562[ebp]
	call	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
	mov	DWORD PTR tv1973[ebp], eax
	cmp	DWORD PTR tv1973[ebp], 0
	je	SHORT $LN1@GetStream
; Line 1254
	lea	ecx, DWORD PTR _outStreamLoc$76562[ebp]
	call	?Detach@?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::Detach
	mov	DWORD PTR tv1974[ebp], eax
	mov	eax, DWORD PTR _outStream$[ebp]
	mov	ecx, DWORD PTR tv1974[ebp]
	mov	DWORD PTR [eax], ecx
$LN1@GetStream:
; Line 1255
	mov	DWORD PTR $T78929[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _outStreamLoc$76562[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _linkPath$76440[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T78929[ebp]
	jmp	SHORT $LN188@GetStream
__catch$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$0:
; Line 1256
	mov	DWORD PTR $T78930[ebp], -2147024882	; 8007000eH
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN249@GetStream
	ret	0
	mov	eax, __tryend$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$1
	ret	0
__tryend$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$1:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN188@GetStream
$LN249@GetStream:
	mov	eax, DWORD PTR $T78930[ebp]
$LN188@GetStream:
; Line 1257
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN287@GetStream
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 2060				; 0000080cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	1
$LN287@GetStream:
	DD	34					; 00000022H
	DD	$LN286@GetStream
$LN286@GetStream:
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN251@GetStream
	DD	-76					; ffffffb4H
	DD	12					; 0000000cH
	DD	$LN252@GetStream
	DD	-100					; ffffff9cH
	DD	16					; 00000010H
	DD	$LN253@GetStream
	DD	-128					; ffffff80H
	DD	16					; 00000010H
	DD	$LN254@GetStream
	DD	-148					; ffffff6cH
	DD	4
	DD	$LN255@GetStream
	DD	-160					; ffffff60H
	DD	4
	DD	$LN256@GetStream
	DD	-172					; ffffff54H
	DD	4
	DD	$LN257@GetStream
	DD	-192					; ffffff40H
	DD	12					; 0000000cH
	DD	$LN258@GetStream
	DD	-232					; ffffff18H
	DD	32					; 00000020H
	DD	$LN259@GetStream
	DD	-256					; ffffff00H
	DD	12					; 0000000cH
	DD	$LN260@GetStream
	DD	-312					; fffffec8H
	DD	12					; 0000000cH
	DD	$LN261@GetStream
	DD	-324					; fffffebcH
	DD	4
	DD	$LN262@GetStream
	DD	-348					; fffffea4H
	DD	16					; 00000010H
	DD	$LN263@GetStream
	DD	-373					; fffffe8bH
	DD	1
	DD	$LN264@GetStream
	DD	-400					; fffffe70H
	DD	12					; 0000000cH
	DD	$LN265@GetStream
	DD	-428					; fffffe54H
	DD	12					; 0000000cH
	DD	$LN266@GetStream
	DD	-448					; fffffe40H
	DD	12					; 0000000cH
	DD	$LN267@GetStream
	DD	-468					; fffffe2cH
	DD	12					; 0000000cH
	DD	$LN268@GetStream
	DD	-492					; fffffe14H
	DD	16					; 00000010H
	DD	$LN269@GetStream
	DD	-520					; fffffdf8H
	DD	12					; 0000000cH
	DD	$LN270@GetStream
	DD	-588					; fffffdb4H
	DD	56					; 00000038H
	DD	$LN271@GetStream
	DD	-612					; fffffd9cH
	DD	12					; 0000000cH
	DD	$LN272@GetStream
	DD	-624					; fffffd90H
	DD	4
	DD	$LN273@GetStream
	DD	-652					; fffffd74H
	DD	12					; 0000000cH
	DD	$LN274@GetStream
	DD	-696					; fffffd48H
	DD	12					; 0000000cH
	DD	$LN275@GetStream
	DD	-760					; fffffd08H
	DD	56					; 00000038H
	DD	$LN276@GetStream
	DD	-780					; fffffcf4H
	DD	12					; 0000000cH
	DD	$LN277@GetStream
	DD	-804					; fffffcdcH
	DD	12					; 0000000cH
	DD	$LN278@GetStream
	DD	-828					; fffffcc4H
	DD	8
	DD	$LN279@GetStream
	DD	-868					; fffffc9cH
	DD	32					; 00000020H
	DD	$LN280@GetStream
	DD	-904					; fffffc78H
	DD	16					; 00000010H
	DD	$LN281@GetStream
	DD	-913					; fffffc6fH
	DD	1
	DD	$LN282@GetStream
	DD	-944					; fffffc50H
	DD	4
	DD	$LN283@GetStream
	DD	-972					; fffffc34H
	DD	16					; 00000010H
	DD	$LN284@GetStream
$LN284@GetStream:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	0
$LN283@GetStream:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	0
$LN282@GetStream:
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$LN281@GetStream:
	DB	104					; 00000068H
	DB	0
$LN280@GetStream:
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
$LN279@GetStream:
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
$LN278@GetStream:
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN277@GetStream:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN276@GetStream:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	70					; 00000046H
	DB	105					; 00000069H
	DB	0
$LN275@GetStream:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	70					; 00000046H
	DB	115					; 00000073H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN274@GetStream:
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN273@GetStream:
	DB	111					; 0000006fH
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	119					; 00000077H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	0
$LN272@GetStream:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	70					; 00000046H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN271@GetStream:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	0
$LN270@GetStream:
	DB	115					; 00000073H
	DB	0
$LN269@GetStream:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	0
$LN268@GetStream:
	DB	102					; 00000066H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN267@GetStream:
	DB	102					; 00000066H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	78					; 0000004eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	0
$LN266@GetStream:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN265@GetStream:
	DB	115					; 00000073H
	DB	0
$LN264@GetStream:
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	65					; 00000041H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	0
$LN263@GetStream:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
$LN262@GetStream:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	0
$LN261@GetStream:
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN260@GetStream:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
$LN259@GetStream:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	0
$LN258@GetStream:
	DB	115					; 00000073H
	DB	0
$LN257@GetStream:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	84					; 00000054H
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	0
$LN256@GetStream:
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN255@GetStream:
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
$LN254@GetStream:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
$LN253@GetStream:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
$LN252@GetStream:
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	107					; 0000006bH
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN251@GetStream:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
	npad	1
$LN288@GetStream:
	DD	$LN138@GetStream
	DD	$LN138@GetStream
	DD	$LN121@GetStream
	DD	$LN139@GetStream
	DD	$LN119@GetStream
$LN289@GetStream:
	DD	$LN69@GetStream
	DD	$LN68@GetStream
	DD	$LN71@GetStream
	DD	$LN70@GetStream
	DD	$LN67@GetStream
	DD	$LN72@GetStream
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$2:
	lea	ecx, DWORD PTR _prop$76429[ebp]
	jmp	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$3:
	lea	ecx, DWORD PTR _linkPath$76440[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$4:
	lea	ecx, DWORD PTR _prop$76441[ebp]
	jmp	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$5:
	lea	ecx, DWORD PTR _prop$76451[ebp]
	jmp	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$6:
	lea	ecx, DWORD PTR _s$76470[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$7:
	lea	ecx, DWORD PTR _reparse$76471[ebp]
	jmp	??1CReparseAttr@NFile@NWindows@@QAE@XZ
__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$8:
	lea	ecx, DWORD PTR $T78856[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$9:
	lea	ecx, DWORD PTR _pathParts$76482[ebp]
	jmp	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$10:
	lea	ecx, DWORD PTR $T78857[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$11:
	mov	eax, DWORD PTR $T78865[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$12:
	lea	ecx, DWORD PTR _name$76555[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$13:
	lea	ecx, DWORD PTR _outStreamLoc$76562[ebp]
	jmp	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$14:
	mov	eax, DWORD PTR $T78870[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$15:
	lea	ecx, DWORD PTR _prop$76570[ebp]
	jmp	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$16:
	lea	ecx, DWORD PTR _s$76594[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$17:
	lea	ecx, DWORD PTR _processedPath$76601[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$18:
	lea	ecx, DWORD PTR _fullPathNew$76607[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$19:
	lea	ecx, DWORD PTR _fullProcessedPath$76609[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$20:
	lea	ecx, DWORD PTR $T78890[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$21:
	lea	ecx, DWORD PTR _pair$76616[ebp]
	jmp	??1CIndexToPathPair@@QAE@XZ
__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$22:
	lea	ecx, DWORD PTR _s$76621[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$23:
	lea	ecx, DWORD PTR _fileInfo$76630[ebp]
	jmp	??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ
__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$24:
	lea	ecx, DWORD PTR $T78893[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$25:
	lea	ecx, DWORD PTR _realFullProcessedPath$76641[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$26:
	lea	ecx, DWORD PTR _existPath$76676[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$27:
	lea	ecx, DWORD PTR _parentFsPath$76710[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$28:
	lea	ecx, DWORD PTR _parentFi$76711[ebp]
	jmp	??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ
__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$29:
	lea	ecx, DWORD PTR _relatPath$76716[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$30:
	lea	ecx, DWORD PTR $T78913[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$31:
	lea	ecx, DWORD PTR _existPath$76725[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$32:
	lea	ecx, DWORD PTR _data$76744[ebp]
	jmp	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$33:
	lea	ecx, DWORD PTR _attr$76746[ebp]
	jmp	??1CReparseAttr@NFile@NWindows@@QAE@XZ
__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$34:
	mov	eax, DWORD PTR $T78923[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$35:
	lea	ecx, DWORD PTR _outStreamLoc$76786[ebp]
	jmp	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
__unwindfunclet$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z$36:
	lea	ecx, DWORD PTR _pair$76795[ebp]
	jmp	??1CIndexToPathPair@@QAE@XZ
__ehhandler$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-2064]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetStream@CArchiveExtractCallback@@UAGJIPAPAUISequentialOutStream@@H@Z ENDP ; CArchiveExtractCallback::GetStream
EXTRN	??0UString@@AAE@IABV0@@Z:PROC			; UString::UString
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Left@UString@@QBE?AV1@I@Z
_TEXT	SEGMENT
$T79017 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_count$ = 12						; size = 4
?Left@UString@@QBE?AV1@I@Z PROC				; UString::Left, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 540
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T79017[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0UString@@AAE@IABV0@@Z		; UString::UString
	mov	edx, DWORD PTR $T79017[ebp]
	or	edx, 1
	mov	DWORD PTR $T79017[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Left@UString@@QBE?AV1@I@Z ENDP				; UString::Left
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?DeleteFrom@UString@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?DeleteFrom@UString@@QAEXI@Z PROC			; UString::DeleteFrom, COMDAT
; _this$ = ecx
; Line 604
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 605
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN2@DeleteFrom
; Line 607
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _index$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 608
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	xor	eax, eax
	mov	ecx, DWORD PTR _index$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
$LN2@DeleteFrom:
; Line 610
	mov	esp, ebp
	pop	ebp
	ret	4
?DeleteFrom@UString@@QAEXI@Z ENDP			; UString::DeleteFrom
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?BoolToInt@@YGH_N@Z
_TEXT	SEGMENT
_value$ = 8						; size = 1
?BoolToInt@@YGH_N@Z PROC				; BoolToInt, COMDAT
; File c:\workspace\7z1505-src\cpp\common\defs.h
; Line 15
	push	ebp
	mov	ebp, esp
	movzx	eax, BYTE PTR _value$[ebp]
	neg	eax
	sbb	eax, eax
	neg	eax
	pop	ebp
	ret	4
?BoolToInt@@YGH_N@Z ENDP				; BoolToInt
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\workspace\7z1505-src\cpp\windows\fileio.h
xdata$x	SEGMENT
__unwindtable$??0CReparseAttr@NFile@NWindows@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CReparseAttr@NFile@NWindows@@QAE@XZ$0
__ehfuncinfo$??0CReparseAttr@NFile@NWindows@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CReparseAttr@NFile@NWindows@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CReparseAttr@NFile@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CReparseAttr@NFile@NWindows@@QAE@XZ PROC		; NWindows::NFile::CReparseAttr::CReparseAttr, COMDAT
; _this$ = ecx
; Line 45
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CReparseAttr@NFile@NWindows@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CReparseAttr@NFile@NWindows@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$??0CReparseAttr@NFile@NWindows@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CReparseAttr@NFile@NWindows@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CReparseAttr@NFile@NWindows@@QAE@XZ ENDP		; NWindows::NFile::CReparseAttr::CReparseAttr
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsMountPoint@CReparseAttr@NFile@NWindows@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsMountPoint@CReparseAttr@NFile@NWindows@@QBE_NXZ PROC	; NWindows::NFile::CReparseAttr::IsMountPoint, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], -1610612733		; a0000003H
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?IsMountPoint@CReparseAttr@NFile@NWindows@@QBE_NXZ ENDP	; NWindows::NFile::CReparseAttr::IsMountPoint
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsRelative@CReparseAttr@NFile@NWindows@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsRelative@CReparseAttr@NFile@NWindows@@QBE_NXZ PROC	; NWindows::NFile::CReparseAttr::IsRelative, COMDAT
; _this$ = ecx
; Line 50
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+4], 1
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?IsRelative@CReparseAttr@NFile@NWindows@@QBE_NXZ ENDP	; NWindows::NFile::CReparseAttr::IsRelative
_TEXT	ENDS
PUBLIC	?MatchesMask@CFileInfoBase@NFind@NFile@NWindows@@ABE_NI@Z ; NWindows::NFile::NFind::CFileInfoBase::MatchesMask
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsDir@CFileInfoBase@NFind@NFile@NWindows@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsDir@CFileInfoBase@NFind@NFile@NWindows@@QBE_NXZ PROC	; NWindows::NFile::NFind::CFileInfoBase::IsDir, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\filefind.h
; Line 51
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MatchesMask@CFileInfoBase@NFind@NFile@NWindows@@ABE_NI@Z ; NWindows::NFile::NFind::CFileInfoBase::MatchesMask
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsDir@CFileInfoBase@NFind@NFile@NWindows@@QBE_NXZ ENDP	; NWindows::NFile::NFind::CFileInfoBase::IsDir
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?MatchesMask@CFileInfoBase@NFind@NFile@NWindows@@ABE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_mask$ = 8						; size = 4
?MatchesMask@CFileInfoBase@NFind@NFile@NWindows@@ABE_NI@Z PROC ; NWindows::NFile::NFind::CFileInfoBase::MatchesMask, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+32]
	and	eax, DWORD PTR _mask$[ebp]
	neg	eax
	sbb	eax, eax
	neg	eax
	mov	esp, ebp
	pop	ebp
	ret	4
?MatchesMask@CFileInfoBase@NFind@NFile@NWindows@@ABE_NI@Z ENDP ; NWindows::NFile::NFind::CFileInfoBase::MatchesMask
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsReadOnly@CFileInfoBase@NFind@NFile@NWindows@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsReadOnly@CFileInfoBase@NFind@NFile@NWindows@@QBE_NXZ PROC ; NWindows::NFile::NFind::CFileInfoBase::IsReadOnly, COMDAT
; _this$ = ecx
; Line 56
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MatchesMask@CFileInfoBase@NFind@NFile@NWindows@@ABE_NI@Z ; NWindows::NFile::NFind::CFileInfoBase::MatchesMask
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsReadOnly@CFileInfoBase@NFind@NFile@NWindows@@QBE_NXZ ENDP ; NWindows::NFile::NFind::CFileInfoBase::IsReadOnly
_TEXT	ENDS
EXTRN	?Open@COutFile@NIO@NFile@NWindows@@QAE_NPB_WK@Z:PROC ; NWindows::NFile::NIO::COutFile::Open
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Open@COutFileStream@@QAE_NPB_WK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_fileName$ = 8						; size = 4
_creationDisposition$ = 12				; size = 4
?Open@COutFileStream@@QAE_NPB_WK@Z PROC			; COutFileStream::Open, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\filestreams.h
; Line 125
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 126
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0
	mov	DWORD PTR [eax+28], 0
; Line 127
	mov	ecx, DWORD PTR _creationDisposition$[ebp]
	push	ecx
	mov	edx, DWORD PTR _fileName$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Open@COutFile@NIO@NFile@NWindows@@QAE_NPB_WK@Z ; NWindows::NFile::NIO::COutFile::Open
; Line 128
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Open@COutFileStream@@QAE_NPB_WK@Z ENDP			; COutFileStream::Open
_TEXT	ENDS
PUBLIC	??_7CStdOutFileStream@@6B@			; CStdOutFileStream::`vftable'
PUBLIC	??0ISequentialOutStream@@QAE@XZ			; ISequentialOutStream::ISequentialOutStream
PUBLIC	??_R4CStdOutFileStream@@6B@			; CStdOutFileStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCStdOutFileStream@@@8			; CStdOutFileStream `RTTI Type Descriptor'
PUBLIC	??_R3CStdOutFileStream@@8			; CStdOutFileStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CStdOutFileStream@@8			; CStdOutFileStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CStdOutFileStream@@8		; CStdOutFileStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ISequentialOutStream@@8		; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUISequentialOutStream@@@8		; ISequentialOutStream `RTTI Type Descriptor'
PUBLIC	??_R3ISequentialOutStream@@8			; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ISequentialOutStream@@8			; ISequentialOutStream::`RTTI Base Class Array'
PUBLIC	??_R13?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	?QueryInterface@CStdOutFileStream@@UAGJABU_GUID@@PAPAX@Z ; CStdOutFileStream::QueryInterface
PUBLIC	?AddRef@CStdOutFileStream@@UAGKXZ		; CStdOutFileStream::AddRef
PUBLIC	?Release@CStdOutFileStream@@UAGKXZ		; CStdOutFileStream::Release
EXTRN	?Write@CStdOutFileStream@@UAGJPBXIPAI@Z:PROC	; CStdOutFileStream::Write
EXTRN	??_ECStdOutFileStream@@UAEPAXI@Z:PROC		; CStdOutFileStream::`vector deleting destructor'
;	COMDAT ??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R13?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R2ISequentialOutStream@@8
rdata$r	SEGMENT
??_R2ISequentialOutStream@@8 DD FLAT:??_R1A@?0A@EA@ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ISequentialOutStream@@8
rdata$r	SEGMENT
??_R3ISequentialOutStream@@8 DD 00H			; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ISequentialOutStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUISequentialOutStream@@@8
_DATA	SEGMENT
??_R0?AUISequentialOutStream@@@8 DD FLAT:??_7type_info@@6B@ ; ISequentialOutStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUISequentialOutStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ISequentialOutStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ISequentialOutStream@@8 DD FLAT:??_R0?AUISequentialOutStream@@@8 ; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ISequentialOutStream@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CStdOutFileStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CStdOutFileStream@@8 DD FLAT:??_R0?AVCStdOutFileStream@@@8 ; CStdOutFileStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CStdOutFileStream@@8
rdata$r	ENDS
;	COMDAT ??_R2CStdOutFileStream@@8
rdata$r	SEGMENT
??_R2CStdOutFileStream@@8 DD FLAT:??_R1A@?0A@EA@CStdOutFileStream@@8 ; CStdOutFileStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ISequentialOutStream@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CStdOutFileStream@@8
rdata$r	SEGMENT
??_R3CStdOutFileStream@@8 DD 00H			; CStdOutFileStream::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2CStdOutFileStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCStdOutFileStream@@@8
_DATA	SEGMENT
??_R0?AVCStdOutFileStream@@@8 DD FLAT:??_7type_info@@6B@ ; CStdOutFileStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCStdOutFileStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CStdOutFileStream@@6B@
rdata$r	SEGMENT
??_R4CStdOutFileStream@@6B@ DD 00H			; CStdOutFileStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCStdOutFileStream@@@8
	DD	FLAT:??_R3CStdOutFileStream@@8
rdata$r	ENDS
;	COMDAT ??_7CStdOutFileStream@@6B@
CONST	SEGMENT
??_7CStdOutFileStream@@6B@ DD FLAT:??_R4CStdOutFileStream@@6B@ ; CStdOutFileStream::`vftable'
	DD	FLAT:?QueryInterface@CStdOutFileStream@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CStdOutFileStream@@UAGKXZ
	DD	FLAT:?Release@CStdOutFileStream@@UAGKXZ
	DD	FLAT:?Write@CStdOutFileStream@@UAGJPBXIPAI@Z
	DD	FLAT:??_ECStdOutFileStream@@UAEPAXI@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CStdOutFileStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CStdOutFileStream@@QAE@XZ PROC			; CStdOutFileStream::CStdOutFileStream, COMDAT
; _this$ = ecx
; Line 161
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ISequentialOutStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CStdOutFileStream@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CStdOutFileStream@@QAE@XZ ENDP			; CStdOutFileStream::CStdOutFileStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CStdOutFileStream@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CStdOutFileStream@@UAGJABU_GUID@@PAPAX@Z PROC ; CStdOutFileStream::QueryInterface, COMDAT
; Line 158
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@2
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN1@QueryInter@2
$LN2@QueryInter@2:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN3@QueryInter@2
$LN1@QueryInter@2:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	xor	eax, eax
$LN3@QueryInter@2:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CStdOutFileStream@@UAGJABU_GUID@@PAPAX@Z ENDP ; CStdOutFileStream::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CStdOutFileStream@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CStdOutFileStream@@UAGKXZ PROC			; CStdOutFileStream::AddRef, COMDAT
; Line 158
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CStdOutFileStream@@UAGKXZ ENDP			; CStdOutFileStream::AddRef
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CStdOutFileStream@@UAGKXZ
_TEXT	SEGMENT
tv83 = -16						; size = 4
tv70 = -12						; size = 4
$T79054 = -8						; size = 4
$T79053 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CStdOutFileStream@@UAGKXZ PROC			; CStdOutFileStream::Release, COMDAT
; Line 158
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	jmp	SHORT $LN2@Release@2
$LN1@Release@2:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T79054[ebp], edx
	mov	eax, DWORD PTR $T79054[ebp]
	mov	DWORD PTR $T79053[ebp], eax
	cmp	DWORD PTR $T79053[ebp], 0
	je	SHORT $LN4@Release@2
	mov	esi, esp
	push	1
	mov	ecx, DWORD PTR $T79053[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T79053[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv83[ebp], eax
	jmp	SHORT $LN5@Release@2
$LN4@Release@2:
	mov	DWORD PTR tv83[ebp], 0
$LN5@Release@2:
	xor	eax, eax
$LN2@Release@2:
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CStdOutFileStream@@UAGKXZ ENDP			; CStdOutFileStream::Release
_TEXT	ENDS
PUBLIC	??1CStdOutFileStream@@UAE@XZ			; CStdOutFileStream::~CStdOutFileStream
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCStdOutFileStream@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCStdOutFileStream@@UAEPAXI@Z PROC			; CStdOutFileStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CStdOutFileStream@@UAE@XZ		; CStdOutFileStream::~CStdOutFileStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCStdOutFileStream@@UAEPAXI@Z ENDP			; CStdOutFileStream::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CStdOutFileStream@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CStdOutFileStream@@UAE@XZ PROC			; CStdOutFileStream::~CStdOutFileStream, COMDAT
; _this$ = ecx
; Line 162
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CStdOutFileStream@@6B@
	mov	esp, ebp
	pop	ebp
	ret	0
??1CStdOutFileStream@@UAE@XZ ENDP			; CStdOutFileStream::~CStdOutFileStream
_TEXT	ENDS
PUBLIC	??_7ISequentialOutStream@@6B@			; ISequentialOutStream::`vftable'
PUBLIC	??_R4ISequentialOutStream@@6B@			; ISequentialOutStream::`RTTI Complete Object Locator'
;	COMDAT ??_R4ISequentialOutStream@@6B@
rdata$r	SEGMENT
??_R4ISequentialOutStream@@6B@ DD 00H			; ISequentialOutStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUISequentialOutStream@@@8
	DD	FLAT:??_R3ISequentialOutStream@@8
rdata$r	ENDS
;	COMDAT ??_7ISequentialOutStream@@6B@
CONST	SEGMENT
??_7ISequentialOutStream@@6B@ DD FLAT:??_R4ISequentialOutStream@@6B@ ; ISequentialOutStream::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ISequentialOutStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ISequentialOutStream@@QAE@XZ PROC			; ISequentialOutStream::ISequentialOutStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ISequentialOutStream@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ISequentialOutStream@@QAE@XZ ENDP			; ISequentialOutStream::ISequentialOutStream
_TEXT	ENDS
PUBLIC	??0CFileInfoBase@NFind@NFile@NWindows@@QAE@XZ	; NWindows::NFile::NFind::CFileInfoBase::CFileInfoBase
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CFileInfo@NFind@NFile@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CFileInfo@NFind@NFile@NWindows@@QAE@XZ PROC		; NWindows::NFile::NFind::CFileInfo::CFileInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CFileInfoBase@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfoBase::CFileInfoBase
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CFileInfo@NFind@NFile@NWindows@@QAE@XZ ENDP		; NWindows::NFile::NFind::CFileInfo::CFileInfo
_TEXT	ENDS
EXTRN	?ClearBase@CFileInfoBase@NFind@NFile@NWindows@@QAEXXZ:PROC ; NWindows::NFile::NFind::CFileInfoBase::ClearBase
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CFileInfoBase@NFind@NFile@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CFileInfoBase@NFind@NFile@NWindows@@QAE@XZ PROC	; NWindows::NFile::NFind::CFileInfoBase::CFileInfoBase, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\filefind.h
; Line 44
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearBase@CFileInfoBase@NFind@NFile@NWindows@@QAEXXZ ; NWindows::NFile::NFind::CFileInfoBase::ClearBase
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CFileInfoBase@NFind@NFile@NWindows@@QAE@XZ ENDP	; NWindows::NFile::NFind::CFileInfoBase::CFileInfoBase
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ PROC		; NWindows::NFile::NFind::CFileInfo::~CFileInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??1UString@@QAE@XZ			; UString::~UString
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ENDP		; NWindows::NFile::NFind::CFileInfo::~CFileInfo
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsItemAnti@CArc@@QBEJIAA_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
_result$ = 12						; size = 4
?IsItemAnti@CArc@@QBEJIAA_N@Z PROC			; CArc::IsItemAnti, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\openarchive.h
; Line 353
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _result$[ebp]
	push	eax
	push	21					; 00000015H
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator IInArchive *
	push	eax
	call	?Archive_GetItemBoolProp@@YGJPAUIInArchive@@IKAA_N@Z ; Archive_GetItemBoolProp
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?IsItemAnti@CArc@@QBEJIAA_N@Z ENDP			; CArc::IsItemAnti
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SetStream@COutStreamWithHash@@QAEXPAUISequentialOutStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_stream$ = 8						; size = 4
?SetStream@COutStreamWithHash@@QAEXPAUISequentialOutStream@@@Z PROC ; COutStreamWithHash::SetStream, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\archiveextractcallback.h
; Line 36
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetStream@COutStreamWithHash@@QAEXPAUISequentialOutStream@@@Z ENDP ; COutStreamWithHash::SetStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReleaseStream@COutStreamWithHash@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ReleaseStream@COutStreamWithHash@@QAEXXZ PROC		; COutStreamWithHash::ReleaseStream, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ; CMyComPtr<ISequentialOutStream>::Release
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReleaseStream@COutStreamWithHash@@QAEXXZ ENDP		; COutStreamWithHash::ReleaseStream
_TEXT	ENDS
PUBLIC	?InitCRC@COutStreamWithHash@@QAEXXZ		; COutStreamWithHash::InitCRC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Init@COutStreamWithHash@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_calculate$ = 8						; size = 1
?Init@COutStreamWithHash@@QAEX_N@Z PROC			; COutStreamWithHash::Init, COMDAT
; _this$ = ecx
; Line 39
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 40
	mov	ecx, DWORD PTR _this$[ebp]
	call	?InitCRC@COutStreamWithHash@@QAEXXZ	; COutStreamWithHash::InitCRC
; Line 41
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0
	mov	DWORD PTR [eax+20], 0
; Line 42
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR _calculate$[ebp]
	mov	BYTE PTR [ecx+24], dl
; Line 43
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Init@COutStreamWithHash@@QAEX_N@Z ENDP			; COutStreamWithHash::Init
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?InitCRC@COutStreamWithHash@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?InitCRC@COutStreamWithHash@@QAEXXZ PROC		; COutStreamWithHash::InitCRC, COMDAT
; _this$ = ecx
; Line 45
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, eax
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?InitCRC@COutStreamWithHash@@QAEXXZ ENDP		; COutStreamWithHash::InitCRC
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CIndexToPathPair@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??0CIndexToPathPair@@QAE@I@Z PROC			; CIndexToPathPair::CIndexToPathPair, COMDAT
; _this$ = ecx
; Line 134
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0UString@@QAE@XZ			; UString::UString
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CIndexToPathPair@@QAE@I@Z ENDP			; CIndexToPathPair::CIndexToPathPair
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CIndexToPathPair@@QAE@IABVUString@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
_path$ = 12						; size = 4
??0CIndexToPathPair@@QAE@IABVUString@@@Z PROC		; CIndexToPathPair::CIndexToPathPair, COMDAT
; _this$ = ecx
; Line 135
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _path$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0CIndexToPathPair@@QAE@IABVUString@@@Z ENDP		; CIndexToPathPair::CIndexToPathPair
_TEXT	ENDS
PUBLIC	?DeleteBack@UString@@QAEXXZ			; UString::DeleteBack
PUBLIC	?IsPathSepar@@YG_N_W@Z				; IsPathSepar
PUBLIC	?Back@UString@@QBE_WXZ				; UString::Back
xdata$x	SEGMENT
__unwindtable$?GetDirPrefixOf@@YG?AVUString@@ABV1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetDirPrefixOf@@YG?AVUString@@ABV1@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?GetDirPrefixOf@@YG?AVUString@@ABV1@@Z$0
__ehfuncinfo$?GetDirPrefixOf@@YG?AVUString@@ABV1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?GetDirPrefixOf@@YG?AVUString@@ABV1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T79091 = -40						; size = 4
_pos$76364 = -36					; size = 4
_s$ = -28						; size = 12
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_src$ = 12						; size = 4
?GetDirPrefixOf@@YG?AVUString@@ABV1@@Z PROC		; GetDirPrefixOf
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\archiveextractcallback.cpp
; Line 440
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetDirPrefixOf@@YG?AVUString@@ABV1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T79091[ebp], 0
; Line 441
	mov	eax, DWORD PTR _src$[ebp]
	push	eax
	lea	ecx, DWORD PTR _s$[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 442
	lea	ecx, DWORD PTR _s$[ebp]
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN2@GetDirPref
; Line 444
	lea	ecx, DWORD PTR _s$[ebp]
	call	?Back@UString@@QBE_WXZ			; UString::Back
	movzx	edx, ax
	push	edx
	call	?IsPathSepar@@YG_N_W@Z			; IsPathSepar
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@GetDirPref
; Line 445
	lea	ecx, DWORD PTR _s$[ebp]
	call	?DeleteBack@UString@@QAEXXZ		; UString::DeleteBack
$LN1@GetDirPref:
; Line 446
	lea	ecx, DWORD PTR _s$[ebp]
	call	?ReverseFind_PathSepar@UString@@QBEHXZ	; UString::ReverseFind_PathSepar
	mov	DWORD PTR _pos$76364[ebp], eax
; Line 447
	mov	ecx, DWORD PTR _pos$76364[ebp]
	add	ecx, 1
	push	ecx
	lea	ecx, DWORD PTR _s$[ebp]
	call	?DeleteFrom@UString@@QAEXI@Z		; UString::DeleteFrom
$LN2@GetDirPref:
; Line 449
	lea	edx, DWORD PTR _s$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	eax, DWORD PTR $T79091[ebp]
	or	eax, 1
	mov	DWORD PTR $T79091[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _s$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 450
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@GetDirPref
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN11@GetDirPref:
	DD	1
	DD	$LN10@GetDirPref
$LN10@GetDirPref:
	DD	-28					; ffffffe4H
	DD	12					; 0000000cH
	DD	$LN8@GetDirPref
$LN8@GetDirPref:
	DB	115					; 00000073H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?GetDirPrefixOf@@YG?AVUString@@ABV1@@Z$0:
	lea	ecx, DWORD PTR _s$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?GetDirPrefixOf@@YG?AVUString@@ABV1@@Z$1:
	mov	eax, DWORD PTR $T79091[ebp]
	and	eax, 1
	je	$LN7@GetDirPref
	and	DWORD PTR $T79091[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
$LN7@GetDirPref:
	ret	0
__ehhandler$?GetDirPrefixOf@@YG?AVUString@@ABV1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetDirPrefixOf@@YG?AVUString@@ABV1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetDirPrefixOf@@YG?AVUString@@ABV1@@Z ENDP		; GetDirPrefixOf
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsPathSepar@@YG_N_W@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
_c$ = 8							; size = 2
?IsPathSepar@@YG_N_W@Z PROC				; IsPathSepar, COMDAT
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	movzx	eax, WORD PTR _c$[ebp]
	cmp	eax, 92					; 0000005cH
	je	SHORT $LN3@IsPathSepa
	movzx	ecx, WORD PTR _c$[ebp]
	cmp	ecx, 47					; 0000002fH
	je	SHORT $LN3@IsPathSepa
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@IsPathSepa
$LN3@IsPathSepa:
	mov	DWORD PTR tv68[ebp], 1
$LN4@IsPathSepa:
	mov	al, BYTE PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsPathSepar@@YG_N_W@Z ENDP				; IsPathSepar
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Back@UString@@QBE_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Back@UString@@QBE_WXZ PROC				; UString::Back, COMDAT
; _this$ = ecx
; Line 480
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ax, WORD PTR [eax+ecx*2-2]
	mov	esp, ebp
	pop	ebp
	ret	0
?Back@UString@@QBE_WXZ ENDP				; UString::Back
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?DeleteBack@UString@@QAEXXZ
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
?DeleteBack@UString@@QAEXXZ PROC			; UString::DeleteBack, COMDAT
; _this$ = ecx
; Line 602
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv66[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv66[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	xor	eax, eax
	mov	ecx, DWORD PTR tv66[ebp]
	mov	WORD PTR [edx+ecx*2], ax
	mov	esp, ebp
	pop	ebp
	ret	0
?DeleteBack@UString@@QAEXXZ ENDP			; UString::DeleteBack
_TEXT	ENDS
PUBLIC	??8@YG_NABVUString@@PB_W@Z			; operator==
xdata$x	SEGMENT
__unwindtable$?IsSafePath@@YG_NABVUString@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?IsSafePath@@YG_NABVUString@@@Z$0
__ehfuncinfo$?IsSafePath@@YG_NABVUString@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?IsSafePath@@YG_NABVUString@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T79110 = -46						; size = 1
$T79109 = -45						; size = 1
_s$76374 = -44						; size = 4
_i$76370 = -40						; size = 4
_level$ = -36						; size = 4
_parts$ = -28						; size = 12
__$EHRec$ = -12						; size = 12
_path$ = 8						; size = 4
?IsSafePath@@YG_NABVUString@@@Z PROC			; IsSafePath
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\archiveextractcallback.cpp
; Line 453
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?IsSafePath@@YG_NABVUString@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-48], eax
	mov	DWORD PTR [ebp-44], eax
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 454
	lea	ecx, DWORD PTR _parts$[ebp]
	call	??0?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::CObjectVector<UString>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 455
	lea	eax, DWORD PTR _parts$[ebp]
	push	eax
	mov	ecx, DWORD PTR _path$[ebp]
	push	ecx
	call	?SplitPathToParts@@YGXABVUString@@AAV?$CObjectVector@VUString@@@@@Z ; SplitPathToParts
; Line 456
	mov	DWORD PTR _level$[ebp], 0
; Line 457
	mov	DWORD PTR _i$76370[ebp], 0
	jmp	SHORT $LN8@IsSafePath
$LN7@IsSafePath:
	mov	edx, DWORD PTR _i$76370[ebp]
	add	edx, 1
	mov	DWORD PTR _i$76370[ebp], edx
$LN8@IsSafePath:
	lea	ecx, DWORD PTR _parts$[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	cmp	DWORD PTR _i$76370[ebp], eax
	jae	$LN6@IsSafePath
; Line 459
	mov	eax, DWORD PTR _i$76370[ebp]
	push	eax
	lea	ecx, DWORD PTR _parts$[ebp]
	call	??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[]
	mov	DWORD PTR _s$76374[ebp], eax
; Line 460
	mov	ecx, DWORD PTR _s$76374[ebp]
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN5@IsSafePath
; Line 461
	jmp	SHORT $LN7@IsSafePath
$LN5@IsSafePath:
; Line 462
	push	OFFSET $SG76377
	mov	edx, DWORD PTR _s$76374[ebp]
	push	edx
	call	??8@YG_NABVUString@@PB_W@Z		; operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@IsSafePath
; Line 463
	jmp	SHORT $LN7@IsSafePath
$LN4@IsSafePath:
; Line 464
	push	OFFSET $SG76379
	mov	ecx, DWORD PTR _s$76374[ebp]
	push	ecx
	call	??8@YG_NABVUString@@PB_W@Z		; operator==
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN3@IsSafePath
; Line 466
	cmp	DWORD PTR _level$[ebp], 0
	jg	SHORT $LN2@IsSafePath
; Line 467
	mov	BYTE PTR $T79109[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _parts$[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	al, BYTE PTR $T79109[ebp]
	jmp	SHORT $LN9@IsSafePath
$LN2@IsSafePath:
; Line 468
	mov	eax, DWORD PTR _level$[ebp]
	sub	eax, 1
	mov	DWORD PTR _level$[ebp], eax
; Line 470
	jmp	SHORT $LN1@IsSafePath
$LN3@IsSafePath:
; Line 471
	mov	ecx, DWORD PTR _level$[ebp]
	add	ecx, 1
	mov	DWORD PTR _level$[ebp], ecx
$LN1@IsSafePath:
; Line 472
	jmp	$LN7@IsSafePath
$LN6@IsSafePath:
; Line 473
	xor	edx, edx
	cmp	DWORD PTR _level$[ebp], 0
	setg	dl
	mov	BYTE PTR $T79110[ebp], dl
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _parts$[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	al, BYTE PTR $T79110[ebp]
$LN9@IsSafePath:
; Line 474
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@IsSafePath
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN15@IsSafePath:
	DD	1
	DD	$LN14@IsSafePath
$LN14@IsSafePath:
	DD	-28					; ffffffe4H
	DD	12					; 0000000cH
	DD	$LN12@IsSafePath
$LN12@IsSafePath:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?IsSafePath@@YG_NABVUString@@@Z$0:
	lea	ecx, DWORD PTR _parts$[ebp]
	jmp	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
__ehhandler$?IsSafePath@@YG_NABVUString@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?IsSafePath@@YG_NABVUString@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?IsSafePath@@YG_NABVUString@@@Z ENDP			; IsSafePath
EXTRN	__imp__wcscmp:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??8@YG_NABVUString@@PB_W@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
??8@YG_NABVUString@@PB_W@Z PROC				; operator==, COMDAT
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 617
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, esp
	mov	eax, DWORD PTR _s2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s1$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	DWORD PTR __imp__wcscmp
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	neg	eax
	sbb	eax, eax
	add	eax, 1
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
??8@YG_NABVUString@@PB_W@Z ENDP				; operator==
_TEXT	ENDS
EXTRN	?IsDriveRootPath_SuperAllowed@NName@NFile@NWindows@@YG_NPB_W@Z:PROC ; NWindows::NFile::NName::IsDriveRootPath_SuperAllowed
xdata$x	SEGMENT
__unwindtable$?MakePath_from_2_Parts@@YG?AVUString@@ABV1@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?MakePath_from_2_Parts@@YG?AVUString@@ABV1@0@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?MakePath_from_2_Parts@@YG?AVUString@@ABV1@0@Z$0
__ehfuncinfo$?MakePath_from_2_Parts@@YG?AVUString@@ABV1@0@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?MakePath_from_2_Parts@@YG?AVUString@@ABV1@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T79124 = -36						; size = 4
_s$ = -28						; size = 12
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_prefix$ = 12						; size = 4
_path$ = 16						; size = 4
?MakePath_from_2_Parts@@YG?AVUString@@ABV1@0@Z PROC	; MakePath_from_2_Parts
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\archiveextractcallback.cpp
; Line 531
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?MakePath_from_2_Parts@@YG?AVUString@@ABV1@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T79124[ebp], 0
; Line 532
	mov	eax, DWORD PTR _prefix$[ebp]
	push	eax
	lea	ecx, DWORD PTR _s$[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 534
	mov	ecx, DWORD PTR _path$[ebp]
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN2@MakePath_f
	mov	ecx, DWORD PTR _path$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	movzx	edx, WORD PTR [eax]
	cmp	edx, 58					; 0000003aH
	jne	SHORT $LN2@MakePath_f
	mov	ecx, DWORD PTR _prefix$[ebp]
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@MakePath_f
	mov	ecx, DWORD PTR _prefix$[ebp]
	call	?Back@UString@@QBE_WXZ			; UString::Back
	movzx	ecx, ax
	push	ecx
	call	?IsPathSepar@@YG_N_W@Z			; IsPathSepar
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@MakePath_f
; Line 536
	mov	ecx, DWORD PTR _prefix$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	?IsDriveRootPath_SuperAllowed@NName@NFile@NWindows@@YG_NPB_W@Z ; NWindows::NFile::NName::IsDriveRootPath_SuperAllowed
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@MakePath_f
; Line 537
	lea	ecx, DWORD PTR _s$[ebp]
	call	?DeleteBack@UString@@QAEXXZ		; UString::DeleteBack
$LN2@MakePath_f:
; Line 540
	mov	ecx, DWORD PTR _path$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _s$[ebp]
	call	??YUString@@QAEAAV0@ABV0@@Z		; UString::operator+=
; Line 541
	lea	edx, DWORD PTR _s$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	eax, DWORD PTR $T79124[ebp]
	or	eax, 1
	mov	DWORD PTR $T79124[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _s$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 542
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@MakePath_f
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	3
$LN11@MakePath_f:
	DD	1
	DD	$LN10@MakePath_f
$LN10@MakePath_f:
	DD	-28					; ffffffe4H
	DD	12					; 0000000cH
	DD	$LN8@MakePath_f
$LN8@MakePath_f:
	DB	115					; 00000073H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?MakePath_from_2_Parts@@YG?AVUString@@ABV1@0@Z$0:
	lea	ecx, DWORD PTR _s$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?MakePath_from_2_Parts@@YG?AVUString@@ABV1@0@Z$1:
	mov	eax, DWORD PTR $T79124[ebp]
	and	eax, 1
	je	$LN7@MakePath_f
	and	DWORD PTR $T79124[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
$LN7@MakePath_f:
	ret	0
__ehhandler$?MakePath_from_2_Parts@@YG?AVUString@@ABV1@0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?MakePath_from_2_Parts@@YG?AVUString@@ABV1@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?MakePath_from_2_Parts@@YG?AVUString@@ABV1@0@Z ENDP	; MakePath_from_2_Parts
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CReparseAttr@NFile@NWindows@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CReparseAttr@NFile@NWindows@@QAE@XZ$0
__ehfuncinfo$??1CReparseAttr@NFile@NWindows@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CReparseAttr@NFile@NWindows@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CReparseAttr@NFile@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CReparseAttr@NFile@NWindows@@QAE@XZ PROC		; NWindows::NFile::CReparseAttr::~CReparseAttr, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CReparseAttr@NFile@NWindows@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CReparseAttr@NFile@NWindows@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$??1CReparseAttr@NFile@NWindows@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CReparseAttr@NFile@NWindows@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CReparseAttr@NFile@NWindows@@QAE@XZ ENDP		; NWindows::NFile::CReparseAttr::~CReparseAttr
PUBLIC	??_7CGetProp@@6B@				; CGetProp::`vftable'
PUBLIC	??0IGetProp@@QAE@XZ				; IGetProp::IGetProp
PUBLIC	??_R4CGetProp@@6B@				; CGetProp::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCGetProp@@@8				; CGetProp `RTTI Type Descriptor'
PUBLIC	??_R3CGetProp@@8				; CGetProp::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGetProp@@8				; CGetProp::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGetProp@@8			; CGetProp::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@IGetProp@@8			; IGetProp::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIGetProp@@@8				; IGetProp `RTTI Type Descriptor'
PUBLIC	??_R3IGetProp@@8				; IGetProp::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IGetProp@@8				; IGetProp::`RTTI Base Class Array'
PUBLIC	?QueryInterface@CGetProp@@UAGJABU_GUID@@PAPAX@Z	; CGetProp::QueryInterface
PUBLIC	?AddRef@CGetProp@@UAGKXZ			; CGetProp::AddRef
PUBLIC	?Release@CGetProp@@UAGKXZ			; CGetProp::Release
;	COMDAT ??_R2IGetProp@@8
rdata$r	SEGMENT
??_R2IGetProp@@8 DD FLAT:??_R1A@?0A@EA@IGetProp@@8	; IGetProp::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3IGetProp@@8
rdata$r	SEGMENT
??_R3IGetProp@@8 DD 00H					; IGetProp::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2IGetProp@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIGetProp@@@8
_DATA	SEGMENT
??_R0?AUIGetProp@@@8 DD FLAT:??_7type_info@@6B@		; IGetProp `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIGetProp@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IGetProp@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IGetProp@@8 DD FLAT:??_R0?AUIGetProp@@@8	; IGetProp::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IGetProp@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CGetProp@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGetProp@@8 DD FLAT:??_R0?AVCGetProp@@@8	; CGetProp::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGetProp@@8
rdata$r	ENDS
;	COMDAT ??_R2CGetProp@@8
rdata$r	SEGMENT
??_R2CGetProp@@8 DD FLAT:??_R1A@?0A@EA@CGetProp@@8	; CGetProp::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IGetProp@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CGetProp@@8
rdata$r	SEGMENT
??_R3CGetProp@@8 DD 00H					; CGetProp::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2CGetProp@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGetProp@@@8
_DATA	SEGMENT
??_R0?AVCGetProp@@@8 DD FLAT:??_7type_info@@6B@		; CGetProp `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGetProp@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CGetProp@@6B@
rdata$r	SEGMENT
??_R4CGetProp@@6B@ DD 00H				; CGetProp::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCGetProp@@@8
	DD	FLAT:??_R3CGetProp@@8
rdata$r	ENDS
;	COMDAT ??_7CGetProp@@6B@
CONST	SEGMENT
??_7CGetProp@@6B@ DD FLAT:??_R4CGetProp@@6B@		; CGetProp::`vftable'
	DD	FLAT:?QueryInterface@CGetProp@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CGetProp@@UAGKXZ
	DD	FLAT:?Release@CGetProp@@UAGKXZ
	DD	FLAT:?GetPropA@CGetProp@@UAGJKPAUtagPROPVARIANT@@@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CGetProp@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CGetProp@@QAE@XZ PROC				; CGetProp::CGetProp, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IGetProp@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CGetProp@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CGetProp@@QAE@XZ ENDP				; CGetProp::CGetProp
_TEXT	ENDS
EXTRN	_IID_IGetProp:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@CGetProp@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CGetProp@@UAGJABU_GUID@@PAPAX@Z PROC	; CGetProp::QueryInterface, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\archiveextractcallback.h
; Line 81
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@QueryInter@3
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN3@QueryInter@3
$LN4@QueryInter@3:
	push	OFFSET _IID_IGetProp
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@3
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN3@QueryInter@3
$LN2@QueryInter@3:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN5@QueryInter@3
$LN3@QueryInter@3:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	xor	eax, eax
$LN5@QueryInter@3:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CGetProp@@UAGJABU_GUID@@PAPAX@Z ENDP	; CGetProp::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CGetProp@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CGetProp@@UAGKXZ PROC				; CGetProp::AddRef, COMDAT
; Line 81
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CGetProp@@UAGKXZ ENDP				; CGetProp::AddRef
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CGetProp@@UAGKXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
$T79150 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CGetProp@@UAGKXZ PROC				; CGetProp::Release, COMDAT
; Line 81
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	jmp	SHORT $LN2@Release@3
$LN1@Release@3:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T79150[ebp], edx
	mov	eax, DWORD PTR $T79150[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	xor	eax, eax
$LN2@Release@3:
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CGetProp@@UAGKXZ ENDP				; CGetProp::Release
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CIndexToPathPair@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CIndexToPathPair@@QAE@XZ PROC			; CIndexToPathPair::~CIndexToPathPair, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1UString@@QAE@XZ			; UString::~UString
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CIndexToPathPair@@QAE@XZ ENDP			; CIndexToPathPair::~CIndexToPathPair
_TEXT	ENDS
PUBLIC	??0COutFile@NIO@NFile@NWindows@@QAE@XZ		; NWindows::NFile::NIO::COutFile::COutFile
PUBLIC	??_7COutFileStream@@6B@				; COutFileStream::`vftable'
PUBLIC	??0IOutStream@@QAE@XZ				; IOutStream::IOutStream
PUBLIC	??_R4COutFileStream@@6B@			; COutFileStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCOutFileStream@@@8			; COutFileStream `RTTI Type Descriptor'
PUBLIC	??_R3COutFileStream@@8				; COutFileStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2COutFileStream@@8				; COutFileStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@COutFileStream@@8			; COutFileStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@IOutStream@@8			; IOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIOutStream@@@8				; IOutStream `RTTI Type Descriptor'
PUBLIC	??_R3IOutStream@@8				; IOutStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IOutStream@@8				; IOutStream::`RTTI Base Class Array'
PUBLIC	?QueryInterface@COutFileStream@@UAGJABU_GUID@@PAPAX@Z ; COutFileStream::QueryInterface
PUBLIC	?AddRef@COutFileStream@@UAGKXZ			; COutFileStream::AddRef
PUBLIC	?Release@COutFileStream@@UAGKXZ			; COutFileStream::Release
EXTRN	?Write@COutFileStream@@UAGJPBXIPAI@Z:PROC	; COutFileStream::Write
EXTRN	?Seek@COutFileStream@@UAGJ_JIPA_K@Z:PROC	; COutFileStream::Seek
EXTRN	?SetSize@COutFileStream@@UAGJ_K@Z:PROC		; COutFileStream::SetSize
EXTRN	??_ECOutFileStream@@UAEPAXI@Z:PROC		; COutFileStream::`vector deleting destructor'
;	COMDAT ??_R2IOutStream@@8
rdata$r	SEGMENT
??_R2IOutStream@@8 DD FLAT:??_R1A@?0A@EA@IOutStream@@8	; IOutStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ISequentialOutStream@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3IOutStream@@8
rdata$r	SEGMENT
??_R3IOutStream@@8 DD 00H				; IOutStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2IOutStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIOutStream@@@8
_DATA	SEGMENT
??_R0?AUIOutStream@@@8 DD FLAT:??_7type_info@@6B@	; IOutStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIOutStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IOutStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IOutStream@@8 DD FLAT:??_R0?AUIOutStream@@@8 ; IOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IOutStream@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@COutFileStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@COutFileStream@@8 DD FLAT:??_R0?AVCOutFileStream@@@8 ; COutFileStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3COutFileStream@@8
rdata$r	ENDS
;	COMDAT ??_R2COutFileStream@@8
rdata$r	SEGMENT
??_R2COutFileStream@@8 DD FLAT:??_R1A@?0A@EA@COutFileStream@@8 ; COutFileStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IOutStream@@8
	DD	FLAT:??_R1A@?0A@EA@ISequentialOutStream@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3COutFileStream@@8
rdata$r	SEGMENT
??_R3COutFileStream@@8 DD 00H				; COutFileStream::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2COutFileStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCOutFileStream@@@8
_DATA	SEGMENT
??_R0?AVCOutFileStream@@@8 DD FLAT:??_7type_info@@6B@	; COutFileStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCOutFileStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R4COutFileStream@@6B@
rdata$r	SEGMENT
??_R4COutFileStream@@6B@ DD 00H				; COutFileStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCOutFileStream@@@8
	DD	FLAT:??_R3COutFileStream@@8
rdata$r	ENDS
;	COMDAT ??_7COutFileStream@@6B@
CONST	SEGMENT
??_7COutFileStream@@6B@ DD FLAT:??_R4COutFileStream@@6B@ ; COutFileStream::`vftable'
	DD	FLAT:?QueryInterface@COutFileStream@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@COutFileStream@@UAGKXZ
	DD	FLAT:?Release@COutFileStream@@UAGKXZ
	DD	FLAT:?Write@COutFileStream@@UAGJPBXIPAI@Z
	DD	FLAT:?Seek@COutFileStream@@UAGJ_JIPA_K@Z
	DD	FLAT:?SetSize@COutFileStream@@UAGJ_K@Z
	DD	FLAT:??_ECOutFileStream@@UAEPAXI@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0COutFileStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0COutFileStream@@QAE@XZ PROC				; COutFileStream::COutFileStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IOutStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7COutFileStream@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0COutFile@NIO@NFile@NWindows@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0COutFileStream@@QAE@XZ ENDP				; COutFileStream::COutFileStream
_TEXT	ENDS
EXTRN	_IID_IOutStream:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@COutFileStream@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@COutFileStream@@UAGJABU_GUID@@PAPAX@Z PROC ; COutFileStream::QueryInterface, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\common\filestreams.h
; Line 143
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@QueryInter@4
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN3@QueryInter@4
$LN4@QueryInter@4:
	push	OFFSET _IID_IOutStream
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@4
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN3@QueryInter@4
$LN2@QueryInter@4:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN5@QueryInter@4
$LN3@QueryInter@4:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	xor	eax, eax
$LN5@QueryInter@4:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@COutFileStream@@UAGJABU_GUID@@PAPAX@Z ENDP ; COutFileStream::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@COutFileStream@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@COutFileStream@@UAGKXZ PROC			; COutFileStream::AddRef, COMDAT
; Line 143
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@COutFileStream@@UAGKXZ ENDP			; COutFileStream::AddRef
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@COutFileStream@@UAGKXZ
_TEXT	SEGMENT
tv83 = -16						; size = 4
tv70 = -12						; size = 4
$T79164 = -8						; size = 4
$T79163 = -4						; size = 4
_this$ = 8						; size = 4
?Release@COutFileStream@@UAGKXZ PROC			; COutFileStream::Release, COMDAT
; Line 143
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	jmp	SHORT $LN2@Release@4
$LN1@Release@4:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T79164[ebp], edx
	mov	eax, DWORD PTR $T79164[ebp]
	mov	DWORD PTR $T79163[ebp], eax
	cmp	DWORD PTR $T79163[ebp], 0
	je	SHORT $LN4@Release@4
	mov	esi, esp
	push	1
	mov	ecx, DWORD PTR $T79163[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T79163[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv83[ebp], eax
	jmp	SHORT $LN5@Release@4
$LN4@Release@4:
	mov	DWORD PTR tv83[ebp], 0
$LN5@Release@4:
	xor	eax, eax
$LN2@Release@4:
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@COutFileStream@@UAGKXZ ENDP			; COutFileStream::Release
_TEXT	ENDS
PUBLIC	??1COutFileStream@@UAE@XZ			; COutFileStream::~COutFileStream
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCOutFileStream@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCOutFileStream@@UAEPAXI@Z PROC			; COutFileStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1COutFileStream@@UAE@XZ		; COutFileStream::~COutFileStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@3
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCOutFileStream@@UAEPAXI@Z ENDP			; COutFileStream::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1COutFile@NIO@NFile@NWindows@@QAE@XZ		; NWindows::NFile::NIO::COutFile::~COutFile
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1COutFileStream@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1COutFileStream@@UAE@XZ PROC				; COutFileStream::~COutFileStream, COMDAT
; _this$ = ecx
; Line 118
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7COutFileStream@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1COutFile@NIO@NFile@NWindows@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1COutFileStream@@UAE@XZ ENDP				; COutFileStream::~COutFileStream
_TEXT	ENDS
PUBLIC	??1CFileBase@NIO@NFile@NWindows@@QAE@XZ		; NWindows::NFile::NIO::CFileBase::~CFileBase
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1COutFile@NIO@NFile@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1COutFile@NIO@NFile@NWindows@@QAE@XZ PROC		; NWindows::NFile::NIO::COutFile::~COutFile, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CFileBase@NIO@NFile@NWindows@@QAE@XZ	; NWindows::NFile::NIO::CFileBase::~CFileBase
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1COutFile@NIO@NFile@NWindows@@QAE@XZ ENDP		; NWindows::NFile::NIO::COutFile::~COutFile
_TEXT	ENDS
EXTRN	?Close@CFileBase@NIO@NFile@NWindows@@QAE_NXZ:PROC ; NWindows::NFile::NIO::CFileBase::Close
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CFileBase@NIO@NFile@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CFileBase@NIO@NFile@NWindows@@QAE@XZ PROC		; NWindows::NFile::NIO::CFileBase::~CFileBase, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\fileio.h
; Line 98
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Close@CFileBase@NIO@NFile@NWindows@@QAE_NXZ ; NWindows::NFile::NIO::CFileBase::Close
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CFileBase@NIO@NFile@NWindows@@QAE@XZ ENDP		; NWindows::NFile::NIO::CFileBase::~CFileBase
_TEXT	ENDS
PUBLIC	??_7IGetProp@@6B@				; IGetProp::`vftable'
PUBLIC	??_R4IGetProp@@6B@				; IGetProp::`RTTI Complete Object Locator'
;	COMDAT ??_R4IGetProp@@6B@
rdata$r	SEGMENT
??_R4IGetProp@@6B@ DD 00H				; IGetProp::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIGetProp@@@8
	DD	FLAT:??_R3IGetProp@@8
rdata$r	ENDS
;	COMDAT ??_7IGetProp@@6B@
CONST	SEGMENT
??_7IGetProp@@6B@ DD FLAT:??_R4IGetProp@@6B@		; IGetProp::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0IGetProp@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IGetProp@@QAE@XZ PROC				; IGetProp::IGetProp, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7IGetProp@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0IGetProp@@QAE@XZ ENDP				; IGetProp::IGetProp
_TEXT	ENDS
PUBLIC	??_7IOutStream@@6B@				; IOutStream::`vftable'
PUBLIC	??_R4IOutStream@@6B@				; IOutStream::`RTTI Complete Object Locator'
;	COMDAT ??_R4IOutStream@@6B@
rdata$r	SEGMENT
??_R4IOutStream@@6B@ DD 00H				; IOutStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIOutStream@@@8
	DD	FLAT:??_R3IOutStream@@8
rdata$r	ENDS
;	COMDAT ??_7IOutStream@@6B@
CONST	SEGMENT
??_7IOutStream@@6B@ DD FLAT:??_R4IOutStream@@6B@	; IOutStream::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0IOutStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IOutStream@@QAE@XZ PROC				; IOutStream::IOutStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ISequentialOutStream@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7IOutStream@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0IOutStream@@QAE@XZ ENDP				; IOutStream::IOutStream
_TEXT	ENDS
PUBLIC	??0CFileBase@NIO@NFile@NWindows@@QAE@XZ		; NWindows::NFile::NIO::CFileBase::CFileBase
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0COutFile@NIO@NFile@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0COutFile@NIO@NFile@NWindows@@QAE@XZ PROC		; NWindows::NFile::NIO::COutFile::COutFile, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CFileBase@NIO@NFile@NWindows@@QAE@XZ	; NWindows::NFile::NIO::CFileBase::CFileBase
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0COutFile@NIO@NFile@NWindows@@QAE@XZ ENDP		; NWindows::NFile::NIO::COutFile::COutFile
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CFileBase@NIO@NFile@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CFileBase@NIO@NFile@NWindows@@QAE@XZ PROC		; NWindows::NFile::NIO::CFileBase::CFileBase, COMDAT
; _this$ = ecx
; Line 97
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CFileBase@NIO@NFile@NWindows@@QAE@XZ ENDP		; NWindows::NFile::NIO::CFileBase::CFileBase
_TEXT	ENDS
xdata$x	SEGMENT
__catchsym$?PrepareOperation@CArchiveExtractCallback@@UAGJH@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?PrepareOperation@CArchiveExtractCallback@@UAGJH@Z$0
__unwindtable$?PrepareOperation@CArchiveExtractCallback@@UAGJH@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?PrepareOperation@CArchiveExtractCallback@@UAGJH@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?PrepareOperation@CArchiveExtractCallback@@UAGJH@Z$2
__ehfuncinfo$?PrepareOperation@CArchiveExtractCallback@@UAGJH@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?PrepareOperation@CArchiveExtractCallback@@UAGJH@Z
	DD	01H
	DD	FLAT:__tryblocktable$?PrepareOperation@CArchiveExtractCallback@@UAGJH@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv148 = -64						; size = 4
tv147 = -60						; size = 4
tv146 = -56						; size = 4
tv88 = -52						; size = 4
tv145 = -48						; size = 4
tv128 = -44						; size = 4
tv78 = -40						; size = 4
tv144 = -36						; size = 4
tv72 = -32						; size = 4
tv143 = -28						; size = 4
tv142 = -24						; size = 4
$T79190 = -20						; size = 4
__$EHRec$ = -16						; size = 16
_this$ = 8						; size = 4
_askExtractMode$ = 12					; size = 4
?PrepareOperation@CArchiveExtractCallback@@UAGJH@Z PROC	; CArchiveExtractCallback::PrepareOperation
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\archiveextractcallback.cpp
; Line 1260
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?PrepareOperation@CArchiveExtractCallback@@UAGJH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 48					; 00000030H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
; Line 1261
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 1264
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 92					; 0000005cH
	call	??B?$CMyComPtr@UIFolderExtractToStreamCallback@@@@QBEPAUIFolderExtractToStreamCallback@@XZ ; CMyComPtr<IFolderExtractToStreamCallback>::operator IFolderExtractToStreamCallback *
	mov	DWORD PTR tv142[ebp], eax
	cmp	DWORD PTR tv142[ebp], 0
	je	SHORT $LN6@PrepareOpe
; Line 1265
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 92					; 0000005cH
	call	??C?$CMyComPtr@UIFolderExtractToStreamCallback@@@@QBEPAUIFolderExtractToStreamCallback@@XZ ; CMyComPtr<IFolderExtractToStreamCallback>::operator->
	mov	DWORD PTR tv143[ebp], eax
	mov	eax, DWORD PTR tv143[ebp]
	mov	DWORD PTR tv72[ebp], eax
	mov	esi, esp
	mov	ecx, DWORD PTR _askExtractMode$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv72[ebp]
	push	edx
	mov	eax, DWORD PTR tv72[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv144[ebp], eax
	mov	eax, DWORD PTR tv144[ebp]
	jmp	$LN8@PrepareOpe
$LN6@PrepareOpe:
; Line 1268
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+193], 0
; Line 1269
	mov	ecx, DWORD PTR _askExtractMode$[ebp]
	mov	DWORD PTR tv78[ebp], ecx
	cmp	DWORD PTR tv78[ebp], 0
	je	SHORT $LN3@PrepareOpe
	jmp	SHORT $LN4@PrepareOpe
$LN3@PrepareOpe:
; Line 1272
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+293]
	test	eax, eax
	je	SHORT $LN2@PrepareOpe
; Line 1273
	mov	DWORD PTR _askExtractMode$[ebp], 1
; Line 1274
	jmp	SHORT $LN4@PrepareOpe
$LN2@PrepareOpe:
; Line 1275
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+193], 1
$LN4@PrepareOpe:
; Line 1280
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+192]
	test	eax, eax
	je	SHORT $LN10@PrepareOpe
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 184				; 000000b8H
	mov	DWORD PTR tv128[ebp], ecx
	jmp	SHORT $LN11@PrepareOpe
$LN10@PrepareOpe:
	mov	DWORD PTR tv128[ebp], 0
$LN11@PrepareOpe:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??C?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QBEPAUIFolderArchiveExtractCallback@@XZ ; CMyComPtr<IFolderArchiveExtractCallback>::operator->
	mov	DWORD PTR tv145[ebp], eax
	mov	edx, DWORD PTR tv145[ebp]
	mov	DWORD PTR tv88[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+154]
	push	ecx
	call	?BoolToInt@@YGH_N@Z			; BoolToInt
	mov	DWORD PTR tv146[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 104				; 00000068H
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	DWORD PTR tv147[ebp], eax
	mov	esi, esp
	mov	edx, DWORD PTR tv128[ebp]
	push	edx
	mov	eax, DWORD PTR _askExtractMode$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv146[ebp]
	push	ecx
	mov	edx, DWORD PTR tv147[ebp]
	push	edx
	mov	eax, DWORD PTR tv88[ebp]
	push	eax
	mov	ecx, DWORD PTR tv88[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv148[ebp], eax
	mov	eax, DWORD PTR tv148[ebp]
	jmp	SHORT $LN8@PrepareOpe
__catch$?PrepareOperation@CArchiveExtractCallback@@UAGJH@Z$0:
; Line 1282
	mov	DWORD PTR $T79190[ebp], -2147024882	; 8007000eH
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN15@PrepareOpe
	ret	0
	mov	eax, __tryend$?PrepareOperation@CArchiveExtractCallback@@UAGJH@Z$1
	ret	0
__tryend$?PrepareOperation@CArchiveExtractCallback@@UAGJH@Z$1:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN8@PrepareOpe
$LN15@PrepareOpe:
	mov	eax, DWORD PTR $T79190[ebp]
$LN8@PrepareOpe:
; Line 1283
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 64					; 00000040H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__ehhandler$?PrepareOperation@CArchiveExtractCallback@@UAGJH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-68]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?PrepareOperation@CArchiveExtractCallback@@UAGJH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?PrepareOperation@CArchiveExtractCallback@@UAGJH@Z ENDP	; CArchiveExtractCallback::PrepareOperation
PUBLIC	?SetTime@COutFileStream@@QAE_NPBU_FILETIME@@00@Z ; COutFileStream::SetTime
PUBLIC	?GetSize@COutStreamWithHash@@QBE_KXZ		; COutStreamWithHash::GetSize
EXTRN	__imp__SetFileSecurityW@12:PROC
EXTRN	?CheckNtSecure@@YG_NPBEI@Z:PROC			; CheckNtSecure
EXTRN	?Close@COutFileStream@@QAEJXZ:PROC		; COutFileStream::Close
xdata$x	SEGMENT
__catchsym$?SetOperationResult@CArchiveExtractCallback@@UAGJH@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?SetOperationResult@CArchiveExtractCallback@@UAGJH@Z$0
__unwindtable$?SetOperationResult@CArchiveExtractCallback@@UAGJH@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?SetOperationResult@CArchiveExtractCallback@@UAGJH@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?SetOperationResult@CArchiveExtractCallback@@UAGJH@Z$2
__ehfuncinfo$?SetOperationResult@CArchiveExtractCallback@@UAGJH@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?SetOperationResult@CArchiveExtractCallback@@UAGJH@Z
	DD	01H
	DD	FLAT:__tryblocktable$?SetOperationResult@CArchiveExtractCallback@@UAGJH@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv320 = -156						; size = 4
tv319 = -152						; size = 4
tv296 = -148						; size = 4
tv318 = -144						; size = 4
tv317 = -140						; size = 4
tv316 = -136						; size = 4
tv213 = -132						; size = 4
tv315 = -128						; size = 4
tv314 = -124						; size = 4
tv313 = -120						; size = 4
tv187 = -116						; size = 4
tv176 = -112						; size = 4
tv164 = -108						; size = 4
tv165 = -104						; size = 4
tv312 = -100						; size = 4
tv311 = -96						; size = 8
tv310 = -88						; size = 4
tv309 = -84						; size = 4
tv72 = -80						; size = 4
tv308 = -76						; size = 4
tv307 = -72						; size = 4
$T79211 = -68						; size = 4
___result__$76872 = -64					; size = 4
_securInfo$76859 = -60					; size = 4
_propType$76853 = -52					; size = 4
_dataSize$76852 = -40					; size = 4
_data$76851 = -28					; size = 4
___result__$76848 = -20					; size = 4
__$EHRec$ = -16						; size = 16
_this$ = 8						; size = 4
_opRes$ = 12						; size = 4
?SetOperationResult@CArchiveExtractCallback@@UAGJH@Z PROC ; CArchiveExtractCallback::SetOperationResult
; Line 1286
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetOperationResult@CArchiveExtractCallback@@UAGJH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 140				; 0000008cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-156]
	mov	ecx, 35					; 00000023H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
; Line 1287
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 1290
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 92					; 0000005cH
	call	??B?$CMyComPtr@UIFolderExtractToStreamCallback@@@@QBEPAUIFolderExtractToStreamCallback@@XZ ; CMyComPtr<IFolderExtractToStreamCallback>::operator IFolderExtractToStreamCallback *
	mov	DWORD PTR tv307[ebp], eax
	cmp	DWORD PTR tv307[ebp], 0
	je	SHORT $LN19@SetOperati
; Line 1291
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 92					; 0000005cH
	call	??C?$CMyComPtr@UIFolderExtractToStreamCallback@@@@QBEPAUIFolderExtractToStreamCallback@@XZ ; CMyComPtr<IFolderExtractToStreamCallback>::operator->
	mov	DWORD PTR tv308[ebp], eax
	mov	eax, DWORD PTR tv308[ebp]
	mov	DWORD PTR tv72[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+197]
	push	edx
	call	?BoolToInt@@YGH_N@Z			; BoolToInt
	mov	DWORD PTR tv309[ebp], eax
	mov	esi, esp
	mov	eax, DWORD PTR tv309[ebp]
	push	eax
	mov	ecx, DWORD PTR _opRes$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv72[ebp]
	push	edx
	mov	eax, DWORD PTR tv72[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv310[ebp], eax
	mov	eax, DWORD PTR tv310[ebp]
	jmp	$LN21@SetOperati
$LN19@SetOperati:
; Line 1296
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+268]
	test	ecx, ecx
	je	$LN18@SetOperati
; Line 1304
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 104				; 00000068H
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+152]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+154]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+260]
	mov	ecx, DWORD PTR [edx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+260]
	mov	eax, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1305
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+260]
	call	?GetSize@COutStreamWithHash@@QBE_KXZ	; COutStreamWithHash::GetSize
	mov	DWORD PTR tv311[ebp], eax
	mov	DWORD PTR tv311[ebp+4], edx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv311[ebp]
	mov	DWORD PTR [edx+240], eax
	mov	ecx, DWORD PTR tv311[ebp+4]
	mov	DWORD PTR [edx+244], ecx
; Line 1306
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+248], 1
; Line 1307
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+260]
	call	?ReleaseStream@COutStreamWithHash@@QAEXXZ ; COutStreamWithHash::ReleaseStream
; Line 1308
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+268], 0
$LN18@SetOperati:
; Line 1313
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 256				; 00000100H
	call	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
	mov	DWORD PTR tv312[ebp], eax
	cmp	DWORD PTR tv312[ebp], 0
	je	$LN17@SetOperati
; Line 1318
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+196]
	test	eax, eax
	je	SHORT $LN23@SetOperati
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+230]
	test	edx, edx
	je	SHORT $LN23@SetOperati
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 216				; 000000d8H
	mov	DWORD PTR tv165[ebp], eax
	jmp	SHORT $LN26@SetOperati
$LN23@SetOperati:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	movzx	eax, BYTE PTR [edx+164]
	test	eax, eax
	je	SHORT $LN24@SetOperati
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 156				; 0000009cH
	mov	DWORD PTR tv164[ebp], edx
	jmp	SHORT $LN25@SetOperati
$LN24@SetOperati:
	mov	DWORD PTR tv164[ebp], 0
$LN25@SetOperati:
	mov	eax, DWORD PTR tv164[ebp]
	mov	DWORD PTR tv165[ebp], eax
$LN26@SetOperati:
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+195]
	test	edx, edx
	je	SHORT $LN27@SetOperati
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+229]
	test	ecx, ecx
	je	SHORT $LN27@SetOperati
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 208				; 000000d0H
	mov	DWORD PTR tv176[ebp], edx
	jmp	SHORT $LN28@SetOperati
$LN27@SetOperati:
	mov	DWORD PTR tv176[ebp], 0
$LN28@SetOperati:
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+194]
	test	ecx, ecx
	je	SHORT $LN29@SetOperati
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+228]
	test	eax, eax
	je	SHORT $LN29@SetOperati
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 200				; 000000c8H
	mov	DWORD PTR tv187[ebp], ecx
	jmp	SHORT $LN30@SetOperati
$LN29@SetOperati:
	mov	DWORD PTR tv187[ebp], 0
$LN30@SetOperati:
	mov	edx, DWORD PTR tv165[ebp]
	push	edx
	mov	eax, DWORD PTR tv176[ebp]
	push	eax
	mov	ecx, DWORD PTR tv187[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+252]
	call	?SetTime@COutFileStream@@QAE_NPBU_FILETIME@@00@Z ; COutFileStream::SetTime
; Line 1319
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+252]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+24]
	mov	DWORD PTR [edx+240], eax
	mov	ecx, DWORD PTR [ecx+28]
	mov	DWORD PTR [edx+244], ecx
; Line 1320
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+248], 1
; Line 1321
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+252]
	call	?Close@COutFileStream@@QAEJXZ		; COutFileStream::Close
	mov	DWORD PTR tv313[ebp], eax
	mov	ecx, DWORD PTR tv313[ebp]
	mov	DWORD PTR ___result__$76848[ebp], ecx
	cmp	DWORD PTR ___result__$76848[ebp], 0
	je	SHORT $LN16@SetOperati
	mov	eax, DWORD PTR ___result__$76848[ebp]
	jmp	$LN21@SetOperati
$LN16@SetOperati:
; Line 1322
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 256				; 00000100H
	call	?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ; CMyComPtr<ISequentialOutStream>::Release
$LN17@SetOperati:
; Line 1326
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+24]
	test	eax, eax
	je	$LN15@SetOperati
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	add	ecx, 8
	call	??B?$CMyComPtr@UIArchiveGetRawProps@@@@QBEPAUIArchiveGetRawProps@@XZ ; CMyComPtr<IArchiveGetRawProps>::operator IArchiveGetRawProps *
	mov	DWORD PTR tv314[ebp], eax
	cmp	DWORD PTR tv314[ebp], 0
	je	$LN15@SetOperati
; Line 1331
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	add	ecx, 8
	call	??C?$CMyComPtr@UIArchiveGetRawProps@@@@QBEPAUIArchiveGetRawProps@@XZ ; CMyComPtr<IArchiveGetRawProps>::operator->
	mov	DWORD PTR tv315[ebp], eax
	mov	eax, DWORD PTR tv315[ebp]
	mov	DWORD PTR tv213[ebp], eax
	mov	esi, esp
	lea	ecx, DWORD PTR _propType$76853[ebp]
	push	ecx
	lea	edx, DWORD PTR _dataSize$76852[ebp]
	push	edx
	lea	eax, DWORD PTR _data$76851[ebp]
	push	eax
	push	62					; 0000003eH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+232]
	push	edx
	mov	eax, DWORD PTR tv213[ebp]
	push	eax
	mov	ecx, DWORD PTR tv213[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1332
	cmp	DWORD PTR _dataSize$76852[ebp], 0
	je	SHORT $LN15@SetOperati
; Line 1334
	cmp	DWORD PTR _propType$76853[ebp], 1
	je	SHORT $LN13@SetOperati
; Line 1335
	mov	eax, -2147467259			; 80004005H
	jmp	$LN21@SetOperati
$LN13@SetOperati:
; Line 1336
	mov	ecx, DWORD PTR _dataSize$76852[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$76851[ebp]
	push	edx
	call	?CheckNtSecure@@YG_NPBEI@Z		; CheckNtSecure
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN15@SetOperati
; Line 1338
	mov	DWORD PTR _securInfo$76859[ebp], 7
; Line 1339
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+348]
	test	edx, edx
	je	SHORT $LN11@SetOperati
; Line 1340
	mov	eax, DWORD PTR _securInfo$76859[ebp]
	or	eax, 8
	mov	DWORD PTR _securInfo$76859[ebp], eax
$LN11@SetOperati:
; Line 1341
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 168				; 000000a8H
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	DWORD PTR tv316[ebp], eax
	mov	esi, esp
	mov	ecx, DWORD PTR _data$76851[ebp]
	push	ecx
	mov	edx, DWORD PTR _securInfo$76859[ebp]
	push	edx
	mov	eax, DWORD PTR tv316[ebp]
	push	eax
	call	DWORD PTR __imp__SetFileSecurityW@12
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN15@SetOperati:
; Line 1347
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+248]
	test	edx, edx
	jne	SHORT $LN10@SetOperati
; Line 1348
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetUnpackSize@CArchiveExtractCallback@@AAEJXZ ; CArchiveExtractCallback::GetUnpackSize
$LN10@SetOperati:
; Line 1349
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+248]
	test	ecx, ecx
	je	SHORT $LN9@SetOperati
; Line 1352
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+152]
	test	eax, eax
	je	SHORT $LN8@SetOperati
; Line 1353
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+392]
	add	eax, DWORD PTR [edx+240]
	mov	ecx, DWORD PTR [ecx+396]
	adc	ecx, DWORD PTR [edx+244]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+392], eax
	mov	DWORD PTR [edx+396], ecx
; Line 1354
	jmp	SHORT $LN9@SetOperati
$LN8@SetOperati:
; Line 1356
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+384]
	add	edx, DWORD PTR [ecx+240]
	mov	eax, DWORD PTR [eax+388]
	adc	eax, DWORD PTR [ecx+244]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+384], edx
	mov	DWORD PTR [ecx+388], eax
$LN9@SetOperati:
; Line 1359
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+154]
	test	eax, eax
	je	SHORT $LN6@SetOperati
; Line 1360
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+360]
	add	edx, 1
	mov	eax, DWORD PTR [ecx+364]
	adc	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+360], edx
	mov	DWORD PTR [ecx+364], eax
	jmp	SHORT $LN5@SetOperati
$LN6@SetOperati:
; Line 1362
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+152]
	test	eax, eax
	je	SHORT $LN4@SetOperati
; Line 1363
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+376]
	add	edx, 1
	mov	eax, DWORD PTR [ecx+380]
	adc	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+376], edx
	mov	DWORD PTR [ecx+380], eax
; Line 1365
	jmp	SHORT $LN5@SetOperati
$LN4@SetOperati:
; Line 1366
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+368]
	add	eax, 1
	mov	ecx, DWORD PTR [edx+372]
	adc	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+368], eax
	mov	DWORD PTR [edx+372], ecx
$LN5@SetOperati:
; Line 1368
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+193]
	test	ecx, ecx
	je	SHORT $LN2@SetOperati
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+231]
	test	eax, eax
	je	SHORT $LN2@SetOperati
; Line 1369
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 168				; 000000a8H
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	DWORD PTR tv317[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+224]
	push	edx
	mov	eax, DWORD PTR tv317[ebp]
	push	eax
	call	?SetFileAttrib@NDir@NFile@NWindows@@YG_NPB_WK@Z ; NWindows::NFile::NDir::SetFileAttrib
$LN2@SetOperati:
; Line 1370
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??C?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QBEPAUIFolderArchiveExtractCallback@@XZ ; CMyComPtr<IFolderArchiveExtractCallback>::operator->
	mov	DWORD PTR tv318[ebp], eax
	mov	ecx, DWORD PTR tv318[ebp]
	mov	DWORD PTR tv296[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+197]
	push	eax
	call	?BoolToInt@@YGH_N@Z			; BoolToInt
	mov	DWORD PTR tv319[ebp], eax
	mov	esi, esp
	mov	ecx, DWORD PTR tv319[ebp]
	push	ecx
	mov	edx, DWORD PTR _opRes$[ebp]
	push	edx
	mov	eax, DWORD PTR tv296[ebp]
	push	eax
	mov	ecx, DWORD PTR tv296[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv320[ebp], eax
	mov	ecx, DWORD PTR tv320[ebp]
	mov	DWORD PTR ___result__$76872[ebp], ecx
	cmp	DWORD PTR ___result__$76872[ebp], 0
	je	SHORT $LN1@SetOperati
	mov	eax, DWORD PTR ___result__$76872[ebp]
	jmp	SHORT $LN21@SetOperati
$LN1@SetOperati:
; Line 1371
	xor	eax, eax
	jmp	SHORT $LN21@SetOperati
__catch$?SetOperationResult@CArchiveExtractCallback@@UAGJH@Z$0:
; Line 1372
	mov	DWORD PTR $T79211[ebp], -2147024882	; 8007000eH
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN34@SetOperati
	ret	0
	mov	eax, __tryend$?SetOperationResult@CArchiveExtractCallback@@UAGJH@Z$1
	ret	0
__tryend$?SetOperationResult@CArchiveExtractCallback@@UAGJH@Z$1:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN21@SetOperati
$LN34@SetOperati:
	mov	eax, DWORD PTR $T79211[ebp]
$LN21@SetOperati:
; Line 1373
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN41@SetOperati
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 156				; 0000009cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN41@SetOperati:
	DD	3
	DD	$LN40@SetOperati
$LN40@SetOperati:
	DD	-28					; ffffffe4H
	DD	4
	DD	$LN36@SetOperati
	DD	-40					; ffffffd8H
	DD	4
	DD	$LN37@SetOperati
	DD	-52					; ffffffccH
	DD	4
	DD	$LN38@SetOperati
$LN38@SetOperati:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	84					; 00000054H
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	0
$LN37@SetOperati:
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN36@SetOperati:
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__ehhandler$?SetOperationResult@CArchiveExtractCallback@@UAGJH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-160]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetOperationResult@CArchiveExtractCallback@@UAGJH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetOperationResult@CArchiveExtractCallback@@UAGJH@Z ENDP ; CArchiveExtractCallback::SetOperationResult
EXTRN	?SetTime@COutFile@NIO@NFile@NWindows@@QAE_NPBU_FILETIME@@00@Z:PROC ; NWindows::NFile::NIO::COutFile::SetTime
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetTime@COutFileStream@@QAE_NPBU_FILETIME@@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_cTime$ = 8						; size = 4
_aTime$ = 12						; size = 4
_mTime$ = 16						; size = 4
?SetTime@COutFileStream@@QAE_NPBU_FILETIME@@00@Z PROC	; COutFileStream::SetTime, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\filestreams.h
; Line 136
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 137
	mov	eax, DWORD PTR _mTime$[ebp]
	push	eax
	mov	ecx, DWORD PTR _aTime$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cTime$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?SetTime@COutFile@NIO@NFile@NWindows@@QAE_NPBU_FILETIME@@00@Z ; NWindows::NFile::NIO::COutFile::SetTime
; Line 138
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetTime@COutFileStream@@QAE_NPBU_FILETIME@@00@Z ENDP	; COutFileStream::SetTime
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetSize@COutStreamWithHash@@QBE_KXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSize@COutStreamWithHash@@QBE_KXZ PROC		; COutStreamWithHash::GetSize, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\archiveextractcallback.h
; Line 46
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+16]
	mov	edx, DWORD PTR [ecx+20]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSize@COutStreamWithHash@@QBE_KXZ ENDP		; COutStreamWithHash::GetSize
_TEXT	ENDS
PUBLIC	??C?$CMyComPtr@UIFolderArchiveExtractCallback2@@@@QBEPAUIFolderArchiveExtractCallback2@@XZ ; CMyComPtr<IFolderArchiveExtractCallback2>::operator->
PUBLIC	??B?$CMyComPtr@UIFolderArchiveExtractCallback2@@@@QBEPAUIFolderArchiveExtractCallback2@@XZ ; CMyComPtr<IFolderArchiveExtractCallback2>::operator IFolderArchiveExtractCallback2 *
PUBLIC	__$ArrayPad$
EXTRN	?ConvertUInt32ToString@@YGXIPA_W@Z:PROC		; ConvertUInt32ToString
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv138 = -176						; size = 4
$T79236 = -172						; size = 4
$T79235 = -168						; size = 4
$T79234 = -164						; size = 4
___result__$76895 = -160				; size = 4
___result__$76892 = -156				; size = 4
_item$76891 = -148					; size = 64
_s$76887 = -80						; size = 4
_s2$76886 = -72						; size = 12
_temp$76885 = -52					; size = 32
_isEncrypted$76884 = -9					; size = 1
__$ArrayPad$ = -4					; size = 4
_this$ = 8						; size = 4
_indexType$ = 12					; size = 4
_index$ = 16						; size = 4
_opRes$ = 20						; size = 4
?ReportExtractResult@CArchiveExtractCallback@@UAGJIIH@Z PROC ; CArchiveExtractCallback::ReportExtractResult
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\archiveextractcallback.cpp
; Line 1376
	push	ebp
	mov	ebp, esp
	sub	esp, 176				; 000000b0H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-176]
	mov	ecx, 44					; 0000002cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1377
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??B?$CMyComPtr@UIFolderArchiveExtractCallback2@@@@QBEPAUIFolderArchiveExtractCallback2@@XZ ; CMyComPtr<IFolderArchiveExtractCallback2>::operator IFolderArchiveExtractCallback2 *
	test	eax, eax
	je	$LN5@ReportExtr
; Line 1379
	mov	BYTE PTR _isEncrypted$76884[ebp], 0
; Line 1381
	lea	ecx, DWORD PTR _s2$76886[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
; Line 1382
	mov	DWORD PTR _s$76887[ebp], 0
; Line 1384
	cmp	DWORD PTR _indexType$[ebp], 1
	jne	$LN4@ReportExtr
	cmp	DWORD PTR _index$[ebp], -1
	je	$LN4@ReportExtr
; Line 1386
	lea	ecx, DWORD PTR _item$76891[ebp]
	call	??0CReadArcItem@@QAE@XZ			; CReadArcItem::CReadArcItem
; Line 1387
	lea	eax, DWORD PTR _item$76891[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	call	?GetItem@CArc@@QBEJIAAUCReadArcItem@@@Z	; CArc::GetItem
	mov	DWORD PTR ___result__$76892[ebp], eax
	cmp	DWORD PTR ___result__$76892[ebp], 0
	je	SHORT $LN3@ReportExtr
	mov	eax, DWORD PTR ___result__$76892[ebp]
	mov	DWORD PTR $T79234[ebp], eax
	lea	ecx, DWORD PTR _item$76891[ebp]
	call	??1CReadArcItem@@QAE@XZ
	lea	ecx, DWORD PTR _s2$76886[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T79234[ebp]
	jmp	$LN6@ReportExtr
$LN3@ReportExtr:
; Line 1388
	lea	ecx, DWORD PTR _item$76891[ebp]
	push	ecx
	lea	ecx, DWORD PTR _s2$76886[ebp]
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
; Line 1389
	lea	ecx, DWORD PTR _s2$76886[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	DWORD PTR _s$76887[ebp], eax
; Line 1390
	lea	edx, DWORD PTR _isEncrypted$76884[ebp]
	push	edx
	push	15					; 0000000fH
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+16]
	call	??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator IInArchive *
	push	eax
	call	?Archive_GetItemBoolProp@@YGJPAUIInArchive@@IKAA_N@Z ; Archive_GetItemBoolProp
	mov	DWORD PTR ___result__$76895[ebp], eax
	cmp	DWORD PTR ___result__$76895[ebp], 0
	je	SHORT $LN2@ReportExtr
	mov	edx, DWORD PTR ___result__$76895[ebp]
	mov	DWORD PTR $T79235[ebp], edx
	lea	ecx, DWORD PTR _item$76891[ebp]
	call	??1CReadArcItem@@QAE@XZ
	lea	ecx, DWORD PTR _s2$76886[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T79235[ebp]
	jmp	SHORT $LN6@ReportExtr
$LN2@ReportExtr:
; Line 1391
	lea	ecx, DWORD PTR _item$76891[ebp]
	call	??1CReadArcItem@@QAE@XZ
; Line 1392
	jmp	SHORT $LN1@ReportExtr
$LN4@ReportExtr:
; Line 1394
	mov	eax, 35					; 00000023H
	mov	WORD PTR _temp$76885[ebp], ax
; Line 1395
	lea	ecx, DWORD PTR _temp$76885[ebp+2]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	call	?ConvertUInt32ToString@@YGXIPA_W@Z	; ConvertUInt32ToString
; Line 1396
	lea	eax, DWORD PTR _temp$76885[ebp]
	mov	DWORD PTR _s$76887[ebp], eax
$LN1@ReportExtr:
; Line 1400
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??C?$CMyComPtr@UIFolderArchiveExtractCallback2@@@@QBEPAUIFolderArchiveExtractCallback2@@XZ ; CMyComPtr<IFolderArchiveExtractCallback2>::operator->
	mov	DWORD PTR tv138[ebp], eax
	mov	esi, esp
	mov	ecx, DWORD PTR _s$76887[ebp]
	push	ecx
	movzx	edx, BYTE PTR _isEncrypted$76884[ebp]
	push	edx
	mov	eax, DWORD PTR _opRes$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv138[ebp]
	push	ecx
	mov	edx, DWORD PTR tv138[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T79236[ebp], eax
	lea	ecx, DWORD PTR _s2$76886[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T79236[ebp]
	jmp	SHORT $LN6@ReportExtr
$LN5@ReportExtr:
; Line 1403
	xor	eax, eax
$LN6@ReportExtr:
; Line 1404
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@ReportExtr
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 176				; 000000b0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	2
$LN13@ReportExtr:
	DD	4
	DD	$LN12@ReportExtr
$LN12@ReportExtr:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN8@ReportExtr
	DD	-52					; ffffffccH
	DD	32					; 00000020H
	DD	$LN9@ReportExtr
	DD	-72					; ffffffb8H
	DD	12					; 0000000cH
	DD	$LN10@ReportExtr
	DD	-148					; ffffff6cH
	DD	64					; 00000040H
	DD	$LN11@ReportExtr
$LN11@ReportExtr:
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	0
$LN10@ReportExtr:
	DB	115					; 00000073H
	DB	50					; 00000032H
	DB	0
$LN9@ReportExtr:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
$LN8@ReportExtr:
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	69					; 00000045H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
?ReportExtractResult@CArchiveExtractCallback@@UAGJIIH@Z ENDP ; CArchiveExtractCallback::ReportExtractResult
_TEXT	ENDS
PUBLIC	??C?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ ; CMyComPtr<ICryptoGetTextPassword>::operator->
PUBLIC	??$QueryInterface@UICryptoGetTextPassword@@@?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QBEJABU_GUID@@PAPAUICryptoGetTextPassword@@@Z ; CMyComPtr<IFolderArchiveExtractCallback>::QueryInterface<ICryptoGetTextPassword>
PUBLIC	??I?$CMyComPtr@UICryptoGetTextPassword@@@@QAEPAPAUICryptoGetTextPassword@@XZ ; CMyComPtr<ICryptoGetTextPassword>::operator&
PUBLIC	??7?$CMyComPtr@UICryptoGetTextPassword@@@@QBE_NXZ ; CMyComPtr<ICryptoGetTextPassword>::operator!
xdata$x	SEGMENT
__catchsym$?CryptoGetTextPassword@CArchiveExtractCallback@@UAGJPAPA_W@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?CryptoGetTextPassword@CArchiveExtractCallback@@UAGJPAPA_W@Z$0
__unwindtable$?CryptoGetTextPassword@CArchiveExtractCallback@@UAGJPAPA_W@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?CryptoGetTextPassword@CArchiveExtractCallback@@UAGJPAPA_W@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?CryptoGetTextPassword@CArchiveExtractCallback@@UAGJPAPA_W@Z$2
__ehfuncinfo$?CryptoGetTextPassword@CArchiveExtractCallback@@UAGJPAPA_W@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?CryptoGetTextPassword@CArchiveExtractCallback@@UAGJPAPA_W@Z
	DD	01H
	DD	FLAT:__tryblocktable$?CryptoGetTextPassword@CArchiveExtractCallback@@UAGJPAPA_W@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv95 = -44						; size = 4
tv86 = -40						; size = 4
tv94 = -36						; size = 4
tv93 = -32						; size = 4
tv92 = -25						; size = 1
$T79244 = -24						; size = 4
___result__$76907 = -20					; size = 4
__$EHRec$ = -16						; size = 16
_this$ = 8						; size = 4
_password$ = 12						; size = 4
?CryptoGetTextPassword@CArchiveExtractCallback@@UAGJPAPA_W@Z PROC ; CArchiveExtractCallback::CryptoGetTextPassword
; Line 1408
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CryptoGetTextPassword@CArchiveExtractCallback@@UAGJPAPA_W@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 28					; 0000001cH
	push	ebx
	push	esi
	push	edi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-44], eax
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
; Line 1409
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 1410
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??7?$CMyComPtr@UICryptoGetTextPassword@@@@QBE_NXZ ; CMyComPtr<ICryptoGetTextPassword>::operator!
	mov	BYTE PTR tv92[ebp], al
	movzx	eax, BYTE PTR tv92[ebp]
	test	eax, eax
	je	SHORT $LN2@CryptoGetT
; Line 1413
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??I?$CMyComPtr@UICryptoGetTextPassword@@@@QAEPAPAUICryptoGetTextPassword@@XZ ; CMyComPtr<ICryptoGetTextPassword>::operator&
	mov	DWORD PTR tv93[ebp], eax
	mov	ecx, DWORD PTR tv93[ebp]
	push	ecx
	push	OFFSET _IID_ICryptoGetTextPassword
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??$QueryInterface@UICryptoGetTextPassword@@@?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QBEJABU_GUID@@PAPAUICryptoGetTextPassword@@@Z ; CMyComPtr<IFolderArchiveExtractCallback>::QueryInterface<ICryptoGetTextPassword>
	mov	DWORD PTR ___result__$76907[ebp], eax
	cmp	DWORD PTR ___result__$76907[ebp], 0
	je	SHORT $LN2@CryptoGetT
	mov	eax, DWORD PTR ___result__$76907[ebp]
	jmp	SHORT $LN4@CryptoGetT
$LN2@CryptoGetT:
; Line 1415
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??C?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ ; CMyComPtr<ICryptoGetTextPassword>::operator->
	mov	DWORD PTR tv94[ebp], eax
	mov	edx, DWORD PTR tv94[ebp]
	mov	DWORD PTR tv86[ebp], edx
	mov	esi, esp
	mov	eax, DWORD PTR _password$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv86[ebp]
	push	ecx
	mov	edx, DWORD PTR tv86[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv95[ebp], eax
	mov	eax, DWORD PTR tv95[ebp]
	jmp	SHORT $LN4@CryptoGetT
__catch$?CryptoGetTextPassword@CArchiveExtractCallback@@UAGJPAPA_W@Z$0:
; Line 1416
	mov	DWORD PTR $T79244[ebp], -2147024882	; 8007000eH
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN9@CryptoGetT
	ret	0
	mov	eax, __tryend$?CryptoGetTextPassword@CArchiveExtractCallback@@UAGJPAPA_W@Z$1
	ret	0
__tryend$?CryptoGetTextPassword@CArchiveExtractCallback@@UAGJPAPA_W@Z$1:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN4@CryptoGetT
$LN9@CryptoGetT:
	mov	eax, DWORD PTR $T79244[ebp]
$LN4@CryptoGetT:
; Line 1417
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__ehhandler$?CryptoGetTextPassword@CArchiveExtractCallback@@UAGJPAPA_W@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-48]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CryptoGetTextPassword@CArchiveExtractCallback@@UAGJPAPA_W@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CryptoGetTextPassword@CArchiveExtractCallback@@UAGJPAPA_W@Z ENDP ; CArchiveExtractCallback::CryptoGetTextPassword
PUBLIC	??$MyCompare@I@@YGHII@Z				; MyCompare<unsigned int>
PUBLIC	?Compare@CExtrRefSortPair@@QBEHABU1@@Z		; CExtrRefSortPair::Compare
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
___tt$76930 = -8					; size = 4
_this$ = -4						; size = 4
_a$ = 8							; size = 4
?Compare@CExtrRefSortPair@@QBEHABU1@@Z PROC		; CExtrRefSortPair::Compare
; _this$ = ecx
; Line 1431
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1432
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	??$MyCompare@I@@YGHII@Z			; MyCompare<unsigned int>
	neg	eax
	mov	DWORD PTR ___tt$76930[ebp], eax
	je	SHORT $LN1@Compare@2
	mov	eax, DWORD PTR ___tt$76930[ebp]
	jmp	SHORT $LN2@Compare@2
$LN1@Compare@2:
; Line 1433
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	??$MyCompare@I@@YGHII@Z			; MyCompare<unsigned int>
$LN2@Compare@2:
; Line 1434
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Compare@CExtrRefSortPair@@QBEHABU1@@Z ENDP		; CExtrRefSortPair::Compare
_TEXT	ENDS
PUBLIC	??1?$CRecordVector@UCExtrRefSortPair@@@@QAE@XZ	; CRecordVector<CExtrRefSortPair>::~CRecordVector<CExtrRefSortPair>
PUBLIC	??A?$CRecordVector@I@@QAEAAII@Z			; CRecordVector<unsigned int>::operator[]
PUBLIC	?Size@?$CRecordVector@UCExtrRefSortPair@@@@QBEIXZ ; CRecordVector<CExtrRefSortPair>::Size
PUBLIC	?Sort2@?$CRecordVector@UCExtrRefSortPair@@@@QAEXXZ ; CRecordVector<CExtrRefSortPair>::Sort2
PUBLIC	??A?$CRecordVector@UCExtrRefSortPair@@@@QAEAAUCExtrRefSortPair@@I@Z ; CRecordVector<CExtrRefSortPair>::operator[]
PUBLIC	?ClearAndSetSize@?$CRecordVector@UCExtrRefSortPair@@@@QAEXI@Z ; CRecordVector<CExtrRefSortPair>::ClearAndSetSize
PUBLIC	??0?$CRecordVector@UCExtrRefSortPair@@@@QAE@XZ	; CRecordVector<CExtrRefSortPair>::CRecordVector<CExtrRefSortPair>
PUBLIC	?SetDirsTimes@CArchiveExtractCallback@@QAEJXZ	; CArchiveExtractCallback::SetDirsTimes
xdata$x	SEGMENT
__unwindtable$?SetDirsTimes@CArchiveExtractCallback@@QAEJXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetDirsTimes@CArchiveExtractCallback@@QAEJXZ$0
__ehfuncinfo$?SetDirsTimes@CArchiveExtractCallback@@QAEJXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetDirsTimes@CArchiveExtractCallback@@QAEJXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv182 = -180						; size = 4
tv175 = -176						; size = 4
tv167 = -172						; size = 4
tv168 = -168						; size = 4
$T79269 = -164						; size = 4
$T79260 = -160						; size = 4
$T79259 = -156						; size = 4
$T79258 = -152						; size = 4
___result__$77066 = -148				; size = 4
___result__$77063 = -144				; size = 4
___result__$77060 = -140				; size = 4
_MTimeDefined$77059 = -129				; size = 1
_ATimeDefined$77058 = -117				; size = 1
_CTimeDefined$77057 = -105				; size = 1
_MTime$77056 = -96					; size = 8
_ATime$77055 = -80					; size = 8
_CTime$77054 = -64					; size = 8
_index$77053 = -52					; size = 4
_pairIndex$77052 = -48					; size = 4
_pair$77048 = -44					; size = 4
_i$ = -40						; size = 4
_pairs$ = -32						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?SetDirsTimes@CArchiveExtractCallback@@QAEJXZ PROC	; CArchiveExtractCallback::SetDirsTimes
; _this$ = ecx
; Line 1449
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetDirsTimes@CArchiveExtractCallback@@QAEJXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 168				; 000000a8H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-180]
	mov	ecx, 42					; 0000002aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1450
	lea	ecx, DWORD PTR _pairs$[ebp]
	call	??0?$CRecordVector@UCExtrRefSortPair@@@@QAE@XZ ; CRecordVector<CExtrRefSortPair>::CRecordVector<CExtrRefSortPair>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 1451
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 324				; 00000144H
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	push	eax
	lea	ecx, DWORD PTR _pairs$[ebp]
	call	?ClearAndSetSize@?$CRecordVector@UCExtrRefSortPair@@@@QAEXI@Z ; CRecordVector<CExtrRefSortPair>::ClearAndSetSize
; Line 1454
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN9@SetDirsTim
$LN8@SetDirsTim:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN9@SetDirsTim:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 324				; 00000144H
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN7@SetDirsTim
; Line 1456
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _pairs$[ebp]
	call	??A?$CRecordVector@UCExtrRefSortPair@@@@QAEAAUCExtrRefSortPair@@I@Z ; CRecordVector<CExtrRefSortPair>::operator[]
	mov	DWORD PTR _pair$77048[ebp], eax
; Line 1457
	mov	edx, DWORD PTR _pair$77048[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 1458
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 324				; 00000144H
	call	??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[]
	mov	ecx, eax
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	?GetNumSlashes@@YGIPB_W@Z		; GetNumSlashes
	mov	edx, DWORD PTR _pair$77048[ebp]
	mov	DWORD PTR [edx], eax
; Line 1459
	jmp	SHORT $LN8@SetDirsTim
$LN7@SetDirsTim:
; Line 1461
	lea	ecx, DWORD PTR _pairs$[ebp]
	call	?Sort2@?$CRecordVector@UCExtrRefSortPair@@@@QAEXXZ ; CRecordVector<CExtrRefSortPair>::Sort2
; Line 1463
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@SetDirsTim
$LN5@SetDirsTim:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@SetDirsTim:
	lea	ecx, DWORD PTR _pairs$[ebp]
	call	?Size@?$CRecordVector@UCExtrRefSortPair@@@@QBEIXZ ; CRecordVector<CExtrRefSortPair>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	$LN4@SetDirsTim
; Line 1465
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _pairs$[ebp]
	call	??A?$CRecordVector@UCExtrRefSortPair@@@@QAEAAUCExtrRefSortPair@@I@Z ; CRecordVector<CExtrRefSortPair>::operator[]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _pairIndex$77052[ebp], edx
; Line 1466
	mov	eax, DWORD PTR _pairIndex$77052[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 336				; 00000150H
	call	??A?$CRecordVector@I@@QAEAAII@Z		; CRecordVector<unsigned int>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _index$77053[ebp], ecx
; Line 1476
	lea	edx, DWORD PTR _CTimeDefined$77057[ebp]
	push	edx
	lea	eax, DWORD PTR _CTime$77054[ebp]
	push	eax
	push	10					; 0000000aH
	mov	ecx, DWORD PTR _index$77053[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetTime@CArchiveExtractCallback@@AAEJHKAAU_FILETIME@@AA_N@Z ; CArchiveExtractCallback::GetTime
	mov	DWORD PTR ___result__$77060[ebp], eax
	cmp	DWORD PTR ___result__$77060[ebp], 0
	je	SHORT $LN3@SetDirsTim
	mov	edx, DWORD PTR ___result__$77060[ebp]
	mov	DWORD PTR $T79258[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _pairs$[ebp]
	call	??1?$CRecordVector@UCExtrRefSortPair@@@@QAE@XZ ; CRecordVector<CExtrRefSortPair>::~CRecordVector<CExtrRefSortPair>
	mov	eax, DWORD PTR $T79258[ebp]
	jmp	$LN10@SetDirsTim
$LN3@SetDirsTim:
; Line 1477
	lea	eax, DWORD PTR _ATimeDefined$77058[ebp]
	push	eax
	lea	ecx, DWORD PTR _ATime$77055[ebp]
	push	ecx
	push	11					; 0000000bH
	mov	edx, DWORD PTR _index$77053[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetTime@CArchiveExtractCallback@@AAEJHKAAU_FILETIME@@AA_N@Z ; CArchiveExtractCallback::GetTime
	mov	DWORD PTR ___result__$77063[ebp], eax
	cmp	DWORD PTR ___result__$77063[ebp], 0
	je	SHORT $LN2@SetDirsTim
	mov	eax, DWORD PTR ___result__$77063[ebp]
	mov	DWORD PTR $T79259[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _pairs$[ebp]
	call	??1?$CRecordVector@UCExtrRefSortPair@@@@QAE@XZ ; CRecordVector<CExtrRefSortPair>::~CRecordVector<CExtrRefSortPair>
	mov	eax, DWORD PTR $T79259[ebp]
	jmp	$LN10@SetDirsTim
$LN2@SetDirsTim:
; Line 1478
	lea	ecx, DWORD PTR _MTimeDefined$77059[ebp]
	push	ecx
	lea	edx, DWORD PTR _MTime$77056[ebp]
	push	edx
	push	12					; 0000000cH
	mov	eax, DWORD PTR _index$77053[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetTime@CArchiveExtractCallback@@AAEJHKAAU_FILETIME@@AA_N@Z ; CArchiveExtractCallback::GetTime
	mov	DWORD PTR ___result__$77066[ebp], eax
	cmp	DWORD PTR ___result__$77066[ebp], 0
	je	SHORT $LN1@SetDirsTim
	mov	ecx, DWORD PTR ___result__$77066[ebp]
	mov	DWORD PTR $T79260[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _pairs$[ebp]
	call	??1?$CRecordVector@UCExtrRefSortPair@@@@QAE@XZ ; CRecordVector<CExtrRefSortPair>::~CRecordVector<CExtrRefSortPair>
	mov	eax, DWORD PTR $T79260[ebp]
	jmp	$LN10@SetDirsTim
$LN1@SetDirsTim:
; Line 1484
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+196]
	test	eax, eax
	je	SHORT $LN12@SetDirsTim
	movzx	ecx, BYTE PTR _MTimeDefined$77059[ebp]
	test	ecx, ecx
	je	SHORT $LN12@SetDirsTim
	lea	edx, DWORD PTR _MTime$77056[ebp]
	mov	DWORD PTR tv168[ebp], edx
	jmp	SHORT $LN15@SetDirsTim
$LN12@SetDirsTim:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, BYTE PTR [ecx+164]
	test	edx, edx
	je	SHORT $LN13@SetDirsTim
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 156				; 0000009cH
	mov	DWORD PTR tv167[ebp], ecx
	jmp	SHORT $LN14@SetDirsTim
$LN13@SetDirsTim:
	mov	DWORD PTR tv167[ebp], 0
$LN14@SetDirsTim:
	mov	edx, DWORD PTR tv167[ebp]
	mov	DWORD PTR tv168[ebp], edx
$LN15@SetDirsTim:
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+195]
	test	ecx, ecx
	je	SHORT $LN16@SetDirsTim
	movzx	edx, BYTE PTR _ATimeDefined$77058[ebp]
	test	edx, edx
	je	SHORT $LN16@SetDirsTim
	lea	eax, DWORD PTR _ATime$77055[ebp]
	mov	DWORD PTR tv175[ebp], eax
	jmp	SHORT $LN17@SetDirsTim
$LN16@SetDirsTim:
	mov	DWORD PTR tv175[ebp], 0
$LN17@SetDirsTim:
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+194]
	test	edx, edx
	je	SHORT $LN18@SetDirsTim
	movzx	eax, BYTE PTR _CTimeDefined$77057[ebp]
	test	eax, eax
	je	SHORT $LN18@SetDirsTim
	lea	ecx, DWORD PTR _CTime$77054[ebp]
	mov	DWORD PTR tv182[ebp], ecx
	jmp	SHORT $LN19@SetDirsTim
$LN18@SetDirsTim:
	mov	DWORD PTR tv182[ebp], 0
$LN19@SetDirsTim:
	mov	edx, DWORD PTR tv168[ebp]
	push	edx
	mov	eax, DWORD PTR tv175[ebp]
	push	eax
	mov	ecx, DWORD PTR tv182[ebp]
	push	ecx
	mov	edx, DWORD PTR _pairIndex$77052[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 324				; 00000144H
	call	??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[]
	mov	ecx, eax
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	?SetDirTime@NDir@NFile@NWindows@@YG_NPB_WPBU_FILETIME@@11@Z ; NWindows::NFile::NDir::SetDirTime
; Line 1485
	jmp	$LN5@SetDirsTim
$LN4@SetDirsTim:
; Line 1486
	mov	DWORD PTR $T79269[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _pairs$[ebp]
	call	??1?$CRecordVector@UCExtrRefSortPair@@@@QAE@XZ ; CRecordVector<CExtrRefSortPair>::~CRecordVector<CExtrRefSortPair>
	mov	eax, DWORD PTR $T79269[ebp]
$LN10@SetDirsTim:
; Line 1487
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN30@SetDirsTim
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 180				; 000000b4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN30@SetDirsTim:
	DD	7
	DD	$LN29@SetDirsTim
$LN29@SetDirsTim:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN21@SetDirsTim
	DD	-64					; ffffffc0H
	DD	8
	DD	$LN22@SetDirsTim
	DD	-80					; ffffffb0H
	DD	8
	DD	$LN23@SetDirsTim
	DD	-96					; ffffffa0H
	DD	8
	DD	$LN24@SetDirsTim
	DD	-105					; ffffff97H
	DD	1
	DD	$LN25@SetDirsTim
	DD	-117					; ffffff8bH
	DD	1
	DD	$LN26@SetDirsTim
	DD	-129					; ffffff7fH
	DD	1
	DD	$LN27@SetDirsTim
$LN27@SetDirsTim:
	DB	77					; 0000004dH
	DB	84					; 00000054H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$LN26@SetDirsTim:
	DB	65					; 00000041H
	DB	84					; 00000054H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$LN25@SetDirsTim:
	DB	67					; 00000043H
	DB	84					; 00000054H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$LN24@SetDirsTim:
	DB	77					; 0000004dH
	DB	84					; 00000054H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN23@SetDirsTim:
	DB	65					; 00000041H
	DB	84					; 00000054H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN22@SetDirsTim:
	DB	67					; 00000043H
	DB	84					; 00000054H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN21@SetDirsTim:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SetDirsTimes@CArchiveExtractCallback@@QAEJXZ$0:
	lea	ecx, DWORD PTR _pairs$[ebp]
	jmp	??1?$CRecordVector@UCExtrRefSortPair@@@@QAE@XZ ; CRecordVector<CExtrRefSortPair>::~CRecordVector<CExtrRefSortPair>
__ehhandler$?SetDirsTimes@CArchiveExtractCallback@@QAEJXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-176]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetDirsTimes@CArchiveExtractCallback@@QAEJXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetDirsTimes@CArchiveExtractCallback@@QAEJXZ ENDP	; CArchiveExtractCallback::SetDirsTimes
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_c$76939 = -8						; size = 2
_numSlashes$76935 = -4					; size = 4
_s$ = 8							; size = 4
?GetNumSlashes@@YGIPB_W@Z PROC				; GetNumSlashes
; Line 1437
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1438
	mov	DWORD PTR _numSlashes$76935[ebp], 0
$LN5@GetNumSlas:
; Line 1440
	mov	eax, DWORD PTR _s$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _c$76939[ebp], cx
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, 2
	mov	DWORD PTR _s$[ebp], edx
; Line 1441
	movzx	eax, WORD PTR _c$76939[ebp]
	test	eax, eax
	jne	SHORT $LN3@GetNumSlas
; Line 1442
	mov	eax, DWORD PTR _numSlashes$76935[ebp]
	jmp	SHORT $LN6@GetNumSlas
$LN3@GetNumSlas:
; Line 1443
	movzx	ecx, WORD PTR _c$76939[ebp]
	cmp	ecx, 92					; 0000005cH
	je	SHORT $LN1@GetNumSlas
	movzx	edx, WORD PTR _c$76939[ebp]
	cmp	edx, 47					; 0000002fH
	jne	SHORT $LN2@GetNumSlas
$LN1@GetNumSlas:
; Line 1444
	mov	eax, DWORD PTR _numSlashes$76935[ebp]
	add	eax, 1
	mov	DWORD PTR _numSlashes$76935[ebp], eax
$LN2@GetNumSlas:
; Line 1445
	jmp	SHORT $LN5@GetNumSlas
$LN6@GetNumSlas:
; Line 1446
	mov	esp, ebp
	pop	ebp
	ret	4
?GetNumSlashes@@YGIPB_W@Z ENDP				; GetNumSlashes
_TEXT	ENDS
PUBLIC	?Size@?$CRecordVector@PAX@@QBEIXZ		; CRecordVector<void *>::Size
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Size@?$CObjectVector@VUString@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@VUString@@@@QBEIXZ PROC		; CObjectVector<UString>::Size, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@VUString@@@@QBEIXZ ENDP		; CObjectVector<UString>::Size
_TEXT	ENDS
PUBLIC	?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ		; CRecordVector<void *>::IsEmpty
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsEmpty@?$CObjectVector@VUString@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@?$CObjectVector@VUString@@@@QBE_NXZ PROC	; CObjectVector<UString>::IsEmpty, COMDAT
; _this$ = ecx
; Line 416
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ	; CRecordVector<void *>::IsEmpty
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@?$CObjectVector@VUString@@@@QBE_NXZ ENDP	; CObjectVector<UString>::IsEmpty
_TEXT	ENDS
PUBLIC	??0?$CRecordVector@PAX@@QAE@XZ			; CRecordVector<void *>::CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CObjectVector@VUString@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@VUString@@@@QAE@XZ PROC		; CObjectVector<UString>::CObjectVector<UString>, COMDAT
; _this$ = ecx
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@VUString@@@@QAE@XZ ENDP		; CObjectVector<UString>::CObjectVector<UString>
_TEXT	ENDS
PUBLIC	??1?$CRecordVector@PAX@@QAE@XZ			; CRecordVector<void *>::~CRecordVector<void *>
PUBLIC	?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z	; CRecordVector<void *>::AddInReserved
PUBLIC	?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z	; CRecordVector<void *>::ConstructReserve
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z$1
__ehfuncinfo$??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
tv85 = -36						; size = 4
$T79294 = -32						; size = 4
$T79293 = -28						; size = 4
_i$77080 = -24						; size = 4
_size$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_v$ = 8							; size = 4
??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z PROC		; CObjectVector<UString>::CObjectVector<UString>, COMDAT
; _this$ = ecx
; Line 422
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 424
	mov	ecx, DWORD PTR _v$[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	mov	DWORD PTR _size$[ebp], eax
; Line 425
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z ; CRecordVector<void *>::ConstructReserve
; Line 426
	mov	DWORD PTR _i$77080[ebp], 0
	jmp	SHORT $LN3@CObjectVec
$LN2@CObjectVec:
	mov	ecx, DWORD PTR _i$77080[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$77080[ebp], ecx
$LN3@CObjectVec:
	mov	edx, DWORD PTR _i$77080[ebp]
	cmp	edx, DWORD PTR _size$[ebp]
	jae	SHORT $LN4@CObjectVec
; Line 427
	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T79294[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T79294[ebp], 0
	je	SHORT $LN6@CObjectVec
	mov	eax, DWORD PTR _i$77080[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	call	??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[]
	push	eax
	mov	ecx, DWORD PTR $T79294[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	DWORD PTR tv85[ebp], eax
	jmp	SHORT $LN7@CObjectVec
$LN6@CObjectVec:
	mov	DWORD PTR tv85[ebp], 0
$LN7@CObjectVec:
	mov	ecx, DWORD PTR tv85[ebp]
	mov	DWORD PTR $T79293[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T79293[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ; CRecordVector<void *>::AddInReserved
	jmp	SHORT $LN2@CObjectVec
$LN4@CObjectVec:
; Line 428
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__unwindfunclet$??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z$1:
	mov	eax, DWORD PTR $T79294[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$CObjectVector@VUString@@@@QAE@ABV0@@Z ENDP		; CObjectVector<UString>::CObjectVector<UString>
PUBLIC	?Reserve@?$CRecordVector@PAX@@QAEXI@Z		; CRecordVector<void *>::Reserve
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z$0
__ehfuncinfo$??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
tv84 = -36						; size = 4
$T79308 = -32						; size = 4
$T79307 = -28						; size = 4
_i$77092 = -24						; size = 4
_size$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_v$ = 8							; size = 4
??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z PROC	; CObjectVector<UString>::operator=, COMDAT
; _this$ = ecx
; Line 430
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 431
	mov	eax, DWORD PTR _v$[ebp]
	cmp	eax, DWORD PTR _this$[ebp]
	jne	SHORT $LN4@operator@2
; Line 432
	mov	eax, DWORD PTR _this$[ebp]
	jmp	$LN5@operator@2
$LN4@operator@2:
; Line 433
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CObjectVector@VUString@@@@QAEXXZ ; CObjectVector<UString>::Clear
; Line 434
	mov	ecx, DWORD PTR _v$[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	mov	DWORD PTR _size$[ebp], eax
; Line 435
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reserve@?$CRecordVector@PAX@@QAEXI@Z	; CRecordVector<void *>::Reserve
; Line 436
	mov	DWORD PTR _i$77092[ebp], 0
	jmp	SHORT $LN3@operator@2
$LN2@operator@2:
	mov	edx, DWORD PTR _i$77092[ebp]
	add	edx, 1
	mov	DWORD PTR _i$77092[ebp], edx
$LN3@operator@2:
	mov	eax, DWORD PTR _i$77092[ebp]
	cmp	eax, DWORD PTR _size$[ebp]
	jae	SHORT $LN1@operator@2
; Line 437
	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T79308[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T79308[ebp], 0
	je	SHORT $LN7@operator@2
	mov	ecx, DWORD PTR _i$77092[ebp]
	push	ecx
	mov	ecx, DWORD PTR _v$[ebp]
	call	??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[]
	push	eax
	mov	ecx, DWORD PTR $T79308[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	DWORD PTR tv84[ebp], eax
	jmp	SHORT $LN8@operator@2
$LN7@operator@2:
	mov	DWORD PTR tv84[ebp], 0
$LN8@operator@2:
	mov	edx, DWORD PTR tv84[ebp]
	mov	DWORD PTR $T79307[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T79307[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ; CRecordVector<void *>::AddInReserved
	jmp	SHORT $LN2@operator@2
$LN1@operator@2:
; Line 438
	mov	eax, DWORD PTR _this$[ebp]
$LN5@operator@2:
; Line 439
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z$0:
	mov	eax, DWORD PTR $T79308[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z ENDP	; CObjectVector<UString>::operator=
PUBLIC	??A?$CRecordVector@PAX@@QBEABQAXI@Z		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z PROC	; CObjectVector<UString>::operator[], COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ENDP	; CObjectVector<UString>::operator[]
_TEXT	ENDS
PUBLIC	??A?$CRecordVector@PAX@@QAEAAPAXI@Z		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z PROC	; CObjectVector<UString>::operator[], COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ENDP	; CObjectVector<UString>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Back@?$CObjectVector@VUString@@@@QAEAAVUString@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Back@?$CObjectVector@VUString@@@@QAEAAVUString@@XZ PROC ; CObjectVector<UString>::Back, COMDAT
; _this$ = ecx
; Line 455
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Back@?$CObjectVector@VUString@@@@QAEAAVUString@@XZ ENDP ; CObjectVector<UString>::Back
_TEXT	ENDS
PUBLIC	?Add@?$CRecordVector@PAX@@QAEIQAX@Z		; CRecordVector<void *>::Add
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z$0
__ehfuncinfo$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
_TEXT	SEGMENT
tv74 = -28						; size = 4
$T79327 = -24						; size = 4
$T79326 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_item$ = 8						; size = 4
?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z PROC ; CObjectVector<UString>::Add, COMDAT
; _this$ = ecx
; Line 459
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T79327[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T79327[ebp], 0
	je	SHORT $LN3@Add
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T79327[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@Add
$LN3@Add:
	mov	DWORD PTR tv74[ebp], 0
$LN4@Add:
	mov	ecx, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T79326[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T79326[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z$0:
	mov	eax, DWORD PTR $T79327[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z ENDP ; CObjectVector<UString>::Add
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AddNew@?$CObjectVector@VUString@@@@QAEAAVUString@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddNew@?$CObjectVector@VUString@@@@QAEAAVUString@@XZ$0
__ehfuncinfo$?AddNew@?$CObjectVector@VUString@@@@QAEAAVUString@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddNew@?$CObjectVector@VUString@@@@QAEAAVUString@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?AddNew@?$CObjectVector@VUString@@@@QAEAAVUString@@XZ
_TEXT	SEGMENT
tv71 = -32						; size = 4
$T79340 = -28						; size = 4
$T79339 = -24						; size = 4
_p$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?AddNew@?$CObjectVector@VUString@@@@QAEAAVUString@@XZ PROC ; CObjectVector<UString>::AddNew, COMDAT
; _this$ = ecx
; Line 464
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddNew@?$CObjectVector@VUString@@@@QAEAAVUString@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 465
	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T79340[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T79340[ebp], 0
	je	SHORT $LN3@AddNew
	mov	ecx, DWORD PTR $T79340[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN4@AddNew
$LN3@AddNew:
	mov	DWORD PTR tv71[ebp], 0
$LN4@AddNew:
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR $T79339[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T79339[ebp]
	mov	DWORD PTR _p$[ebp], ecx
; Line 466
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
; Line 467
	mov	eax, DWORD PTR _p$[ebp]
; Line 468
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddNew@?$CObjectVector@VUString@@@@QAEAAVUString@@XZ$0:
	mov	eax, DWORD PTR $T79340[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?AddNew@?$CObjectVector@VUString@@@@QAEAAVUString@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddNew@?$CObjectVector@VUString@@@@QAEAAVUString@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddNew@?$CObjectVector@VUString@@@@QAEAAVUString@@XZ ENDP ; CObjectVector<UString>::AddNew
PUBLIC	??_GUString@@QAEPAXI@Z				; UString::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@VUString@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@VUString@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@VUString@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@VUString@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@VUString@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T79353 = -28						; size = 4
$T79352 = -24						; size = 4
_i$77123 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@VUString@@@@QAE@XZ PROC		; CObjectVector<UString>::~CObjectVector<UString>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@VUString@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$77123[ebp], eax
$LN2@CObjectVec@2:
	cmp	DWORD PTR _i$77123[ebp], 0
	je	SHORT $LN3@CObjectVec@2
; Line 489
	mov	eax, DWORD PTR _i$77123[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$77123[ebp], eax
	mov	ecx, DWORD PTR _i$77123[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T79353[ebp], edx
	mov	eax, DWORD PTR $T79353[ebp]
	mov	DWORD PTR $T79352[ebp], eax
	cmp	DWORD PTR $T79352[ebp], 0
	je	SHORT $LN5@CObjectVec@2
	push	1
	mov	ecx, DWORD PTR $T79352[ebp]
	call	??_GUString@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@2
$LN5@CObjectVec@2:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@2:
	jmp	SHORT $LN2@CObjectVec@2
$LN3@CObjectVec@2:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@VUString@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@VUString@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@VUString@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@VUString@@@@QAE@XZ ENDP		; CObjectVector<UString>::~CObjectVector<UString>
PUBLIC	?Clear@?$CRecordVector@PAX@@QAEXXZ		; CRecordVector<void *>::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Clear@?$CObjectVector@VUString@@@@QAEXXZ
_TEXT	SEGMENT
tv75 = -20						; size = 4
$T79366 = -16						; size = 4
$T79365 = -12						; size = 4
_i$77132 = -8						; size = 4
_this$ = -4						; size = 4
?Clear@?$CObjectVector@VUString@@@@QAEXXZ PROC		; CObjectVector<UString>::Clear, COMDAT
; _this$ = ecx
; Line 499
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 500
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$77132[ebp], eax
$LN2@Clear:
	cmp	DWORD PTR _i$77132[ebp], 0
	je	SHORT $LN1@Clear
; Line 501
	mov	eax, DWORD PTR _i$77132[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$77132[ebp], eax
	mov	ecx, DWORD PTR _i$77132[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T79366[ebp], edx
	mov	eax, DWORD PTR $T79366[ebp]
	mov	DWORD PTR $T79365[ebp], eax
	cmp	DWORD PTR $T79365[ebp], 0
	je	SHORT $LN5@Clear
	push	1
	mov	ecx, DWORD PTR $T79365[ebp]
	call	??_GUString@@QAEPAXI@Z
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN6@Clear
$LN5@Clear:
	mov	DWORD PTR tv75[ebp], 0
$LN6@Clear:
	jmp	SHORT $LN2@Clear
$LN1@Clear:
; Line 502
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CRecordVector@PAX@@QAEXXZ	; CRecordVector<void *>::Clear
; Line 503
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CObjectVector@VUString@@@@QAEXXZ ENDP		; CObjectVector<UString>::Clear
_TEXT	ENDS
PUBLIC	?DeleteFrontal@?$CRecordVector@PAX@@QAEXI@Z	; CRecordVector<void *>::DeleteFrontal
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?DeleteFrontal@?$CObjectVector@VUString@@@@QAEXI@Z
_TEXT	SEGMENT
tv73 = -20						; size = 4
$T79372 = -16						; size = 4
$T79371 = -12						; size = 4
_i$77141 = -8						; size = 4
_this$ = -4						; size = 4
_num$ = 8						; size = 4
?DeleteFrontal@?$CObjectVector@VUString@@@@QAEXI@Z PROC	; CObjectVector<UString>::DeleteFrontal, COMDAT
; _this$ = ecx
; Line 514
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 515
	mov	DWORD PTR _i$77141[ebp], 0
	jmp	SHORT $LN3@DeleteFron
$LN2@DeleteFron:
	mov	eax, DWORD PTR _i$77141[ebp]
	add	eax, 1
	mov	DWORD PTR _i$77141[ebp], eax
$LN3@DeleteFron:
	mov	ecx, DWORD PTR _i$77141[ebp]
	cmp	ecx, DWORD PTR _num$[ebp]
	jae	SHORT $LN1@DeleteFron
; Line 516
	mov	edx, DWORD PTR _i$77141[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR $T79372[ebp], eax
	mov	ecx, DWORD PTR $T79372[ebp]
	mov	DWORD PTR $T79371[ebp], ecx
	cmp	DWORD PTR $T79371[ebp], 0
	je	SHORT $LN6@DeleteFron
	push	1
	mov	ecx, DWORD PTR $T79371[ebp]
	call	??_GUString@@QAEPAXI@Z
	mov	DWORD PTR tv73[ebp], eax
	jmp	SHORT $LN7@DeleteFron
$LN6@DeleteFron:
	mov	DWORD PTR tv73[ebp], 0
$LN7@DeleteFron:
	jmp	SHORT $LN2@DeleteFron
$LN1@DeleteFron:
; Line 517
	mov	edx, DWORD PTR _num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DeleteFrontal@?$CRecordVector@PAX@@QAEXI@Z ; CRecordVector<void *>::DeleteFrontal
; Line 518
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?DeleteFrontal@?$CObjectVector@VUString@@@@QAEXI@Z ENDP	; CObjectVector<UString>::DeleteFrontal
_TEXT	ENDS
PUBLIC	?DeleteBack@?$CRecordVector@PAX@@QAEXXZ		; CRecordVector<void *>::DeleteBack
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?DeleteBack@?$CObjectVector@VUString@@@@QAEXXZ
_TEXT	SEGMENT
tv74 = -16						; size = 4
$T79378 = -12						; size = 4
$T79377 = -8						; size = 4
_this$ = -4						; size = 4
?DeleteBack@?$CObjectVector@VUString@@@@QAEXXZ PROC	; CObjectVector<UString>::DeleteBack, COMDAT
; _this$ = ecx
; Line 521
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 522
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR $T79378[ebp], eax
	mov	ecx, DWORD PTR $T79378[ebp]
	mov	DWORD PTR $T79377[ebp], ecx
	cmp	DWORD PTR $T79377[ebp], 0
	je	SHORT $LN3@DeleteBack
	push	1
	mov	ecx, DWORD PTR $T79377[ebp]
	call	??_GUString@@QAEPAXI@Z
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@DeleteBack
$LN3@DeleteBack:
	mov	DWORD PTR tv74[ebp], 0
$LN4@DeleteBack:
; Line 523
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DeleteBack@?$CRecordVector@PAX@@QAEXXZ	; CRecordVector<void *>::DeleteBack
; Line 524
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?DeleteBack@?$CObjectVector@VUString@@@@QAEXXZ ENDP	; CObjectVector<UString>::DeleteBack
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ PROC	; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ENDP	; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ PROC	; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ENDP	; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@?$CMyComPtr@UICompressProgressInfo@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Release@?$CMyComPtr@UICompressProgressInfo@@@@QAEXXZ PROC ; CMyComPtr<ICompressProgressInfo>::Release, COMDAT
; _this$ = ecx
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Release@5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
$LN2@Release@5:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Release@?$CMyComPtr@UICompressProgressInfo@@@@QAEXXZ ENDP ; CMyComPtr<ICompressProgressInfo>::Release
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UICompressProgressInfo@@@@QAEPAPAUICompressProgressInfo@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UICompressProgressInfo@@@@QAEPAPAUICompressProgressInfo@@XZ PROC ; CMyComPtr<ICompressProgressInfo>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UICompressProgressInfo@@@@QAEPAPAUICompressProgressInfo@@XZ ENDP ; CMyComPtr<ICompressProgressInfo>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ PROC ; CMyComPtr<ICompressProgressInfo>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ENDP ; CMyComPtr<ICompressProgressInfo>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UICompressProgressInfo@@@@QAEPAUICompressProgressInfo@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UICompressProgressInfo@@@@QAEPAUICompressProgressInfo@@PAU1@@Z PROC ; CMyComPtr<ICompressProgressInfo>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@3
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@3:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@3
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@3:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UICompressProgressInfo@@@@QAEPAUICompressProgressInfo@@PAU1@@Z ENDP ; CMyComPtr<ICompressProgressInfo>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ PROC	; CMyComPtr<IInArchive>::operator IInArchive *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ENDP	; CMyComPtr<IInArchive>::operator IInArchive *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ PROC	; CMyComPtr<IInArchive>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ENDP	; CMyComPtr<IInArchive>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UIArchiveGetRawProps@@@@QBEPAUIArchiveGetRawProps@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UIArchiveGetRawProps@@@@QBEPAUIArchiveGetRawProps@@XZ PROC ; CMyComPtr<IArchiveGetRawProps>::operator IArchiveGetRawProps *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UIArchiveGetRawProps@@@@QBEPAUIArchiveGetRawProps@@XZ ENDP ; CMyComPtr<IArchiveGetRawProps>::operator IArchiveGetRawProps *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UIArchiveGetRawProps@@@@QBEPAUIArchiveGetRawProps@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UIArchiveGetRawProps@@@@QBEPAUIArchiveGetRawProps@@XZ PROC ; CMyComPtr<IArchiveGetRawProps>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UIArchiveGetRawProps@@@@QBEPAUIArchiveGetRawProps@@XZ ENDP ; CMyComPtr<IArchiveGetRawProps>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@I@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@I@@QAE@XZ PROC			; CRecordVector<unsigned int>::CRecordVector<unsigned int>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@I@@QAE@XZ ENDP			; CRecordVector<unsigned int>::CRecordVector<unsigned int>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@I@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@I@@QBEIXZ PROC			; CRecordVector<unsigned int>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@I@@QBEIXZ ENDP			; CRecordVector<unsigned int>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@I@@QAE@XZ
_TEXT	SEGMENT
$T79407 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@I@@QAE@XZ PROC			; CRecordVector<unsigned int>::~CRecordVector<unsigned int>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T79407[ebp], ecx
	mov	edx, DWORD PTR $T79407[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@I@@QAE@XZ ENDP			; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Clear@?$CRecordVector@I@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$CRecordVector@I@@QAEXXZ PROC			; CRecordVector<unsigned int>::Clear, COMDAT
; _this$ = ecx
; Line 131
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CRecordVector@I@@QAEXXZ ENDP			; CRecordVector<unsigned int>::Clear
_TEXT	ENDS
PUBLIC	?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ	; CRecordVector<unsigned int>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@I@@QAEII@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?Add@?$CRecordVector@I@@QAEII@Z PROC			; CRecordVector<unsigned int>::Add, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ ; CRecordVector<unsigned int>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 201
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv72[ebp]
; Line 202
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CRecordVector@I@@QAEII@Z ENDP			; CRecordVector<unsigned int>::Add
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@I@@QBEABII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@I@@QBEABII@Z PROC			; CRecordVector<unsigned int>::operator[], COMDAT
; _this$ = ecx
; Line 227
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@I@@QBEABII@Z ENDP			; CRecordVector<unsigned int>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@I@@QAEAAII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@I@@QAEAAII@Z PROC			; CRecordVector<unsigned int>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@I@@QAEAAII@Z ENDP			; CRecordVector<unsigned int>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CBuffer@E@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CBuffer@E@@QAE@XZ PROC				; CBuffer<unsigned char>::CBuffer<unsigned char>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mybuffer.h
; Line 24
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CBuffer@E@@QAE@XZ ENDP				; CBuffer<unsigned char>::CBuffer<unsigned char>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CBuffer@E@@QAE@XZ
_TEXT	SEGMENT
$T79420 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CBuffer@E@@QAE@XZ PROC				; CBuffer<unsigned char>::~CBuffer<unsigned char>, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T79420[ebp], ecx
	mov	edx, DWORD PTR $T79420[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CBuffer@E@@QAE@XZ ENDP				; CBuffer<unsigned char>::~CBuffer<unsigned char>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CBuffer@E@@QAEPAEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CBuffer@E@@QAEPAEXZ PROC				; CBuffer<unsigned char>::operator unsigned char *, COMDAT
; _this$ = ecx
; Line 39
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CBuffer@E@@QAEPAEXZ ENDP				; CBuffer<unsigned char>::operator unsigned char *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CBuffer@E@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CBuffer@E@@QBEIXZ PROC				; CBuffer<unsigned char>::Size, COMDAT
; _this$ = ecx
; Line 41
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CBuffer@E@@QBEIXZ ENDP				; CBuffer<unsigned char>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z PROC ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@CMyComPtr@2
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@2:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z ENDP ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@3:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ PROC ; CMyComPtr<ISequentialOutStream>::Release, COMDAT
; _this$ = ecx
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Release@6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
$LN2@Release@6:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ENDP ; CMyComPtr<ISequentialOutStream>::Release
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ PROC ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ENDP ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ PROC ; CMyComPtr<ISequentialOutStream>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ENDP ; CMyComPtr<ISequentialOutStream>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z PROC ; CMyComPtr<ISequentialOutStream>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@4
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@4:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@4
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@4:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ENDP ; CMyComPtr<ISequentialOutStream>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lp$ = 8						; size = 4
??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@ABV0@@Z PROC ; CMyComPtr<ISequentialOutStream>::operator=, COMDAT
; _this$ = ecx
; Line 36
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _lp$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@ABV0@@Z ENDP ; CMyComPtr<ISequentialOutStream>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Detach@?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@XZ
_TEXT	SEGMENT
_pt$ = -8						; size = 4
_this$ = -4						; size = 4
?Detach@?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@XZ PROC ; CMyComPtr<ISequentialOutStream>::Detach, COMDAT
; _this$ = ecx
; Line 45
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 46
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pt$[ebp], ecx
; Line 47
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0
; Line 48
	mov	eax, DWORD PTR _pt$[ebp]
; Line 49
	mov	esp, ebp
	pop	ebp
	ret	0
?Detach@?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@XZ ENDP ; CMyComPtr<ISequentialOutStream>::Detach
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@UCHardLinkNode@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@UCHardLinkNode@@@@QAE@XZ PROC	; CRecordVector<CHardLinkNode>::CRecordVector<CHardLinkNode>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@UCHardLinkNode@@@@QAE@XZ ENDP	; CRecordVector<CHardLinkNode>::CRecordVector<CHardLinkNode>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@UCHardLinkNode@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@UCHardLinkNode@@@@QBEIXZ PROC	; CRecordVector<CHardLinkNode>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@UCHardLinkNode@@@@QBEIXZ ENDP	; CRecordVector<CHardLinkNode>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsEmpty@?$CRecordVector@UCHardLinkNode@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@?$CRecordVector@UCHardLinkNode@@@@QBE_NXZ PROC	; CRecordVector<CHardLinkNode>::IsEmpty, COMDAT
; _this$ = ecx
; Line 49
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+4], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@?$CRecordVector@UCHardLinkNode@@@@QBE_NXZ ENDP	; CRecordVector<CHardLinkNode>::IsEmpty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@UCHardLinkNode@@@@QAE@XZ
_TEXT	SEGMENT
$T79451 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@UCHardLinkNode@@@@QAE@XZ PROC	; CRecordVector<CHardLinkNode>::~CRecordVector<CHardLinkNode>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T79451[ebp], ecx
	mov	edx, DWORD PTR $T79451[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@UCHardLinkNode@@@@QAE@XZ ENDP	; CRecordVector<CHardLinkNode>::~CRecordVector<CHardLinkNode>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Clear@?$CRecordVector@UCHardLinkNode@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$CRecordVector@UCHardLinkNode@@@@QAEXXZ PROC	; CRecordVector<CHardLinkNode>::Clear, COMDAT
; _this$ = ecx
; Line 131
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CRecordVector@UCHardLinkNode@@@@QAEXXZ ENDP	; CRecordVector<CHardLinkNode>::Clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?DeleteFrom@?$CRecordVector@UCHardLinkNode@@@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?DeleteFrom@?$CRecordVector@UCHardLinkNode@@@@QAEXI@Z PROC ; CRecordVector<CHardLinkNode>::DeleteFrom, COMDAT
; _this$ = ecx
; Line 136
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 138
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 139
	mov	esp, ebp
	pop	ebp
	ret	4
?DeleteFrom@?$CRecordVector@UCHardLinkNode@@@@QAEXI@Z ENDP ; CRecordVector<CHardLinkNode>::DeleteFrom
_TEXT	ENDS
PUBLIC	?ReserveOnePosition@?$CRecordVector@UCHardLinkNode@@@@AAEXXZ ; CRecordVector<CHardLinkNode>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@UCHardLinkNode@@@@QAEIUCHardLinkNode@@@Z
_TEXT	SEGMENT
tv72 = -20						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 16
?Add@?$CRecordVector@UCHardLinkNode@@@@QAEIUCHardLinkNode@@@Z PROC ; CRecordVector<CHardLinkNode>::Add, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@UCHardLinkNode@@@@AAEXXZ ; CRecordVector<CHardLinkNode>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _item$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _item$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _item$[ebp+12]
	mov	DWORD PTR [eax+12], edx
; Line 201
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv72[ebp]
; Line 202
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Add@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN5@Add@2:
	DD	1
	DD	$LN4@Add@2
$LN4@Add@2:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN3@Add@2
$LN3@Add@2:
	DB	95					; 0000005fH
	DB	36					; 00000024H
	DB	65					; 00000041H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	0
?Add@?$CRecordVector@UCHardLinkNode@@@@QAEIUCHardLinkNode@@@Z ENDP ; CRecordVector<CHardLinkNode>::Add
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@UCHardLinkNode@@@@QAEAAUCHardLinkNode@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@UCHardLinkNode@@@@QAEAAUCHardLinkNode@@I@Z PROC ; CRecordVector<CHardLinkNode>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@UCHardLinkNode@@@@QAEAAUCHardLinkNode@@I@Z ENDP ; CRecordVector<CHardLinkNode>::operator[]
_TEXT	ENDS
PUBLIC	?FindInSorted2@?$CRecordVector@UCHardLinkNode@@@@QBEHABUCHardLinkNode@@II@Z ; CRecordVector<CHardLinkNode>::FindInSorted2
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?FindInSorted2@?$CRecordVector@UCHardLinkNode@@@@QBEHABUCHardLinkNode@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?FindInSorted2@?$CRecordVector@UCHardLinkNode@@@@QBEHABUCHardLinkNode@@@Z PROC ; CRecordVector<CHardLinkNode>::FindInSorted2, COMDAT
; _this$ = ecx
; Line 282
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 283
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	0
	mov	edx, DWORD PTR _item$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindInSorted2@?$CRecordVector@UCHardLinkNode@@@@QBEHABUCHardLinkNode@@II@Z ; CRecordVector<CHardLinkNode>::FindInSorted2
; Line 284
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?FindInSorted2@?$CRecordVector@UCHardLinkNode@@@@QBEHABUCHardLinkNode@@@Z ENDP ; CRecordVector<CHardLinkNode>::FindInSorted2
_TEXT	ENDS
PUBLIC	?SortRefDown2@?$CRecordVector@UCHardLinkNode@@@@SGXPAUCHardLinkNode@@II@Z ; CRecordVector<CHardLinkNode>::SortRefDown2
PUBLIC	?Front@?$CRecordVector@UCHardLinkNode@@@@QAEAAUCHardLinkNode@@XZ ; CRecordVector<CHardLinkNode>::Front
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Sort2@?$CRecordVector@UCHardLinkNode@@@@QAEXXZ
_TEXT	SEGMENT
_temp$77425 = -40					; size = 16
_i$77418 = -20						; size = 4
_p$ = -16						; size = 4
_size$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?Sort2@?$CRecordVector@UCHardLinkNode@@@@QAEXXZ PROC	; CRecordVector<CHardLinkNode>::Sort2, COMDAT
; _this$ = ecx
; Line 382
	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 383
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _size$[ebp], ecx
; Line 384
	cmp	DWORD PTR _size$[ebp], 1
	ja	SHORT $LN7@Sort2
; Line 385
	jmp	$LN8@Sort2
$LN7@Sort2:
; Line 386
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Front@?$CRecordVector@UCHardLinkNode@@@@QAEAAUCHardLinkNode@@XZ ; CRecordVector<CHardLinkNode>::Front
	sub	eax, 16					; 00000010H
	mov	DWORD PTR _p$[ebp], eax
; Line 388
	mov	edx, DWORD PTR _size$[ebp]
	shr	edx, 1
	mov	DWORD PTR _i$77418[ebp], edx
$LN6@Sort2:
; Line 390
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$77418[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	?SortRefDown2@?$CRecordVector@UCHardLinkNode@@@@SGXPAUCHardLinkNode@@II@Z ; CRecordVector<CHardLinkNode>::SortRefDown2
; Line 391
	mov	eax, DWORD PTR _i$77418[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$77418[ebp], eax
	jne	SHORT $LN6@Sort2
$LN3@Sort2:
; Line 395
	mov	ecx, DWORD PTR _size$[ebp]
	shl	ecx, 4
	add	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _temp$77425[ebp], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _temp$77425[ebp+4], eax
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _temp$77425[ebp+8], edx
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _temp$77425[ebp+12], eax
; Line 396
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _size$[ebp]
	shl	edx, 4
	add	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _size$[ebp]
	sub	edx, 1
	mov	DWORD PTR _size$[ebp], edx
; Line 397
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _temp$77425[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$77425[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$77425[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _temp$77425[ebp+12]
	mov	DWORD PTR [eax+12], edx
; Line 398
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	?SortRefDown2@?$CRecordVector@UCHardLinkNode@@@@SGXPAUCHardLinkNode@@II@Z ; CRecordVector<CHardLinkNode>::SortRefDown2
; Line 400
	cmp	DWORD PTR _size$[ebp], 1
	ja	SHORT $LN3@Sort2
$LN8@Sort2:
; Line 401
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@Sort2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN12@Sort2:
	DD	1
	DD	$LN11@Sort2
$LN11@Sort2:
	DD	-40					; ffffffd8H
	DD	16					; 00000010H
	DD	$LN10@Sort2
$LN10@Sort2:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
?Sort2@?$CRecordVector@UCHardLinkNode@@@@QAEXXZ ENDP	; CRecordVector<CHardLinkNode>::Sort2
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QAE@XZ PROC ; CMyComPtr<IFolderArchiveExtractCallback>::CMyComPtr<IFolderArchiveExtractCallback>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QAE@XZ ENDP ; CMyComPtr<IFolderArchiveExtractCallback>::CMyComPtr<IFolderArchiveExtractCallback>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QAE@XZ PROC ; CMyComPtr<IFolderArchiveExtractCallback>::~CMyComPtr<IFolderArchiveExtractCallback>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@4:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QAE@XZ ENDP ; CMyComPtr<IFolderArchiveExtractCallback>::~CMyComPtr<IFolderArchiveExtractCallback>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QBEPAUIFolderArchiveExtractCallback@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QBEPAUIFolderArchiveExtractCallback@@XZ PROC ; CMyComPtr<IFolderArchiveExtractCallback>::operator IFolderArchiveExtractCallback *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QBEPAUIFolderArchiveExtractCallback@@XZ ENDP ; CMyComPtr<IFolderArchiveExtractCallback>::operator IFolderArchiveExtractCallback *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QBEPAUIFolderArchiveExtractCallback@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QBEPAUIFolderArchiveExtractCallback@@XZ PROC ; CMyComPtr<IFolderArchiveExtractCallback>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QBEPAUIFolderArchiveExtractCallback@@XZ ENDP ; CMyComPtr<IFolderArchiveExtractCallback>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QAEPAUIFolderArchiveExtractCallback@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QAEPAUIFolderArchiveExtractCallback@@PAU1@@Z PROC ; CMyComPtr<IFolderArchiveExtractCallback>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@5
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@5:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@5
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@5:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QAEPAUIFolderArchiveExtractCallback@@PAU1@@Z ENDP ; CMyComPtr<IFolderArchiveExtractCallback>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??7?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??7?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QBE_NXZ PROC ; CMyComPtr<IFolderArchiveExtractCallback>::operator!, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
??7?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QBE_NXZ ENDP ; CMyComPtr<IFolderArchiveExtractCallback>::operator!
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ PROC	; CMyComPtr<ICryptoGetTextPassword>::CMyComPtr<ICryptoGetTextPassword>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ENDP	; CMyComPtr<ICryptoGetTextPassword>::CMyComPtr<ICryptoGetTextPassword>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ PROC	; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@5:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ENDP	; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UICryptoGetTextPassword@@@@QAEPAPAUICryptoGetTextPassword@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UICryptoGetTextPassword@@@@QAEPAPAUICryptoGetTextPassword@@XZ PROC ; CMyComPtr<ICryptoGetTextPassword>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UICryptoGetTextPassword@@@@QAEPAPAUICryptoGetTextPassword@@XZ ENDP ; CMyComPtr<ICryptoGetTextPassword>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ PROC ; CMyComPtr<ICryptoGetTextPassword>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ ENDP ; CMyComPtr<ICryptoGetTextPassword>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??7?$CMyComPtr@UICryptoGetTextPassword@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??7?$CMyComPtr@UICryptoGetTextPassword@@@@QBE_NXZ PROC	; CMyComPtr<ICryptoGetTextPassword>::operator!, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
??7?$CMyComPtr@UICryptoGetTextPassword@@@@QBE_NXZ ENDP	; CMyComPtr<ICryptoGetTextPassword>::operator!
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ PROC ; CMyComPtr<IArchiveExtractCallbackMessage>::CMyComPtr<IArchiveExtractCallbackMessage>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ENDP ; CMyComPtr<IArchiveExtractCallbackMessage>::CMyComPtr<IArchiveExtractCallbackMessage>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ PROC ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@6:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ENDP ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAEPAPAUIArchiveExtractCallbackMessage@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAEPAPAUIArchiveExtractCallbackMessage@@XZ PROC ; CMyComPtr<IArchiveExtractCallbackMessage>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAEPAPAUIArchiveExtractCallbackMessage@@XZ ENDP ; CMyComPtr<IArchiveExtractCallbackMessage>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIFolderArchiveExtractCallback2@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UIFolderArchiveExtractCallback2@@@@QAE@XZ PROC ; CMyComPtr<IFolderArchiveExtractCallback2>::CMyComPtr<IFolderArchiveExtractCallback2>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UIFolderArchiveExtractCallback2@@@@QAE@XZ ENDP ; CMyComPtr<IFolderArchiveExtractCallback2>::CMyComPtr<IFolderArchiveExtractCallback2>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIFolderArchiveExtractCallback2@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIFolderArchiveExtractCallback2@@@@QAE@XZ PROC ; CMyComPtr<IFolderArchiveExtractCallback2>::~CMyComPtr<IFolderArchiveExtractCallback2>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@7:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIFolderArchiveExtractCallback2@@@@QAE@XZ ENDP ; CMyComPtr<IFolderArchiveExtractCallback2>::~CMyComPtr<IFolderArchiveExtractCallback2>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UIFolderArchiveExtractCallback2@@@@QBEPAUIFolderArchiveExtractCallback2@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UIFolderArchiveExtractCallback2@@@@QBEPAUIFolderArchiveExtractCallback2@@XZ PROC ; CMyComPtr<IFolderArchiveExtractCallback2>::operator IFolderArchiveExtractCallback2 *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UIFolderArchiveExtractCallback2@@@@QBEPAUIFolderArchiveExtractCallback2@@XZ ENDP ; CMyComPtr<IFolderArchiveExtractCallback2>::operator IFolderArchiveExtractCallback2 *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UIFolderArchiveExtractCallback2@@@@QAEPAPAUIFolderArchiveExtractCallback2@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UIFolderArchiveExtractCallback2@@@@QAEPAPAUIFolderArchiveExtractCallback2@@XZ PROC ; CMyComPtr<IFolderArchiveExtractCallback2>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UIFolderArchiveExtractCallback2@@@@QAEPAPAUIFolderArchiveExtractCallback2@@XZ ENDP ; CMyComPtr<IFolderArchiveExtractCallback2>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UIFolderArchiveExtractCallback2@@@@QBEPAUIFolderArchiveExtractCallback2@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UIFolderArchiveExtractCallback2@@@@QBEPAUIFolderArchiveExtractCallback2@@XZ PROC ; CMyComPtr<IFolderArchiveExtractCallback2>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UIFolderArchiveExtractCallback2@@@@QBEPAUIFolderArchiveExtractCallback2@@XZ ENDP ; CMyComPtr<IFolderArchiveExtractCallback2>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIFolderExtractToStreamCallback@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UIFolderExtractToStreamCallback@@@@QAE@XZ PROC ; CMyComPtr<IFolderExtractToStreamCallback>::CMyComPtr<IFolderExtractToStreamCallback>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UIFolderExtractToStreamCallback@@@@QAE@XZ ENDP ; CMyComPtr<IFolderExtractToStreamCallback>::CMyComPtr<IFolderExtractToStreamCallback>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIFolderExtractToStreamCallback@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIFolderExtractToStreamCallback@@@@QAE@XZ PROC ; CMyComPtr<IFolderExtractToStreamCallback>::~CMyComPtr<IFolderExtractToStreamCallback>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@8:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIFolderExtractToStreamCallback@@@@QAE@XZ ENDP ; CMyComPtr<IFolderExtractToStreamCallback>::~CMyComPtr<IFolderExtractToStreamCallback>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@?$CMyComPtr@UIFolderExtractToStreamCallback@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Release@?$CMyComPtr@UIFolderExtractToStreamCallback@@@@QAEXXZ PROC ; CMyComPtr<IFolderExtractToStreamCallback>::Release, COMDAT
; _this$ = ecx
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Release@7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
$LN2@Release@7:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Release@?$CMyComPtr@UIFolderExtractToStreamCallback@@@@QAEXXZ ENDP ; CMyComPtr<IFolderExtractToStreamCallback>::Release
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UIFolderExtractToStreamCallback@@@@QBEPAUIFolderExtractToStreamCallback@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UIFolderExtractToStreamCallback@@@@QBEPAUIFolderExtractToStreamCallback@@XZ PROC ; CMyComPtr<IFolderExtractToStreamCallback>::operator IFolderExtractToStreamCallback *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UIFolderExtractToStreamCallback@@@@QBEPAUIFolderExtractToStreamCallback@@XZ ENDP ; CMyComPtr<IFolderExtractToStreamCallback>::operator IFolderExtractToStreamCallback *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UIFolderExtractToStreamCallback@@@@QAEPAPAUIFolderExtractToStreamCallback@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UIFolderExtractToStreamCallback@@@@QAEPAPAUIFolderExtractToStreamCallback@@XZ PROC ; CMyComPtr<IFolderExtractToStreamCallback>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UIFolderExtractToStreamCallback@@@@QAEPAPAUIFolderExtractToStreamCallback@@XZ ENDP ; CMyComPtr<IFolderExtractToStreamCallback>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UIFolderExtractToStreamCallback@@@@QBEPAUIFolderExtractToStreamCallback@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UIFolderExtractToStreamCallback@@@@QBEPAUIFolderExtractToStreamCallback@@XZ PROC ; CMyComPtr<IFolderExtractToStreamCallback>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UIFolderExtractToStreamCallback@@@@QBEPAUIFolderExtractToStreamCallback@@XZ ENDP ; CMyComPtr<IFolderExtractToStreamCallback>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIGetProp@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UIGetProp@@@@QAE@XZ PROC			; CMyComPtr<IGetProp>::CMyComPtr<IGetProp>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UIGetProp@@@@QAE@XZ ENDP			; CMyComPtr<IGetProp>::CMyComPtr<IGetProp>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIGetProp@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIGetProp@@@@QAE@XZ PROC			; CMyComPtr<IGetProp>::~CMyComPtr<IGetProp>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@9
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@9:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIGetProp@@@@QAE@XZ ENDP			; CMyComPtr<IGetProp>::~CMyComPtr<IGetProp>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UIGetProp@@@@QBEPAUIGetProp@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UIGetProp@@@@QBEPAUIGetProp@@XZ PROC	; CMyComPtr<IGetProp>::operator IGetProp *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UIGetProp@@@@QBEPAUIGetProp@@XZ ENDP	; CMyComPtr<IGetProp>::operator IGetProp *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UIGetProp@@@@QAEPAUIGetProp@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UIGetProp@@@@QAEPAUIGetProp@@PAU1@@Z PROC ; CMyComPtr<IGetProp>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@6
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@6:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@6
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@6:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UIGetProp@@@@QAEPAUIGetProp@@PAU1@@Z ENDP ; CMyComPtr<IGetProp>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??7?$CMyComPtr@UIGetProp@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??7?$CMyComPtr@UIGetProp@@@@QBE_NXZ PROC		; CMyComPtr<IGetProp>::operator!, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
??7?$CMyComPtr@UIGetProp@@@@QBE_NXZ ENDP		; CMyComPtr<IGetProp>::operator!
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CObjectVector@UCIndexToPathPair@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@UCIndexToPathPair@@@@QBEIXZ PROC	; CObjectVector<CIndexToPathPair>::Size, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@UCIndexToPathPair@@@@QBEIXZ ENDP	; CObjectVector<CIndexToPathPair>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CObjectVector@UCIndexToPathPair@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@UCIndexToPathPair@@@@QAE@XZ PROC	; CObjectVector<CIndexToPathPair>::CObjectVector<CIndexToPathPair>, COMDAT
; _this$ = ecx
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@UCIndexToPathPair@@@@QAE@XZ ENDP	; CObjectVector<CIndexToPathPair>::CObjectVector<CIndexToPathPair>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@UCIndexToPathPair@@@@QAEAAUCIndexToPathPair@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCIndexToPathPair@@@@QAEAAUCIndexToPathPair@@I@Z PROC ; CObjectVector<CIndexToPathPair>::operator[], COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCIndexToPathPair@@@@QAEAAUCIndexToPathPair@@I@Z ENDP ; CObjectVector<CIndexToPathPair>::operator[]
_TEXT	ENDS
PUBLIC	??_GCIndexToPathPair@@QAEPAXI@Z			; CIndexToPathPair::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@UCIndexToPathPair@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@UCIndexToPathPair@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@UCIndexToPathPair@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@UCIndexToPathPair@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@UCIndexToPathPair@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T79542 = -28						; size = 4
$T79541 = -24						; size = 4
_i$77510 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@UCIndexToPathPair@@@@QAE@XZ PROC	; CObjectVector<CIndexToPathPair>::~CObjectVector<CIndexToPathPair>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@UCIndexToPathPair@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$77510[ebp], eax
$LN2@CObjectVec@3:
	cmp	DWORD PTR _i$77510[ebp], 0
	je	SHORT $LN3@CObjectVec@3
; Line 489
	mov	eax, DWORD PTR _i$77510[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$77510[ebp], eax
	mov	ecx, DWORD PTR _i$77510[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T79542[ebp], edx
	mov	eax, DWORD PTR $T79542[ebp]
	mov	DWORD PTR $T79541[ebp], eax
	cmp	DWORD PTR $T79541[ebp], 0
	je	SHORT $LN5@CObjectVec@3
	push	1
	mov	ecx, DWORD PTR $T79541[ebp]
	call	??_GCIndexToPathPair@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@3
$LN5@CObjectVec@3:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@3:
	jmp	SHORT $LN2@CObjectVec@3
$LN3@CObjectVec@3:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@UCIndexToPathPair@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@UCIndexToPathPair@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@UCIndexToPathPair@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@UCIndexToPathPair@@@@QAE@XZ ENDP	; CObjectVector<CIndexToPathPair>::~CObjectVector<CIndexToPathPair>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Clear@?$CObjectVector@UCIndexToPathPair@@@@QAEXXZ
_TEXT	SEGMENT
tv75 = -20						; size = 4
$T79555 = -16						; size = 4
$T79554 = -12						; size = 4
_i$77519 = -8						; size = 4
_this$ = -4						; size = 4
?Clear@?$CObjectVector@UCIndexToPathPair@@@@QAEXXZ PROC	; CObjectVector<CIndexToPathPair>::Clear, COMDAT
; _this$ = ecx
; Line 499
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 500
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$77519[ebp], eax
$LN2@Clear@2:
	cmp	DWORD PTR _i$77519[ebp], 0
	je	SHORT $LN1@Clear@2
; Line 501
	mov	eax, DWORD PTR _i$77519[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$77519[ebp], eax
	mov	ecx, DWORD PTR _i$77519[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T79555[ebp], edx
	mov	eax, DWORD PTR $T79555[ebp]
	mov	DWORD PTR $T79554[ebp], eax
	cmp	DWORD PTR $T79554[ebp], 0
	je	SHORT $LN5@Clear@2
	push	1
	mov	ecx, DWORD PTR $T79554[ebp]
	call	??_GCIndexToPathPair@@QAEPAXI@Z
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN6@Clear@2
$LN5@Clear@2:
	mov	DWORD PTR tv75[ebp], 0
$LN6@Clear@2:
	jmp	SHORT $LN2@Clear@2
$LN1@Clear@2:
; Line 502
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CRecordVector@PAX@@QAEXXZ	; CRecordVector<void *>::Clear
; Line 503
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CObjectVector@UCIndexToPathPair@@@@QAEXXZ ENDP	; CObjectVector<CIndexToPathPair>::Clear
_TEXT	ENDS
PUBLIC	?Compare@CIndexToPathPair@@QBEHABU1@@Z		; CIndexToPathPair::Compare
PUBLIC	??A?$CObjectVector@UCIndexToPathPair@@@@QBEABUCIndexToPathPair@@I@Z ; CObjectVector<CIndexToPathPair>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?FindInSorted@?$CObjectVector@UCIndexToPathPair@@@@QBEHABUCIndexToPathPair@@@Z
_TEXT	SEGMENT
_comp$77535 = -24					; size = 4
_midVal$77534 = -20					; size = 4
_mid$77533 = -16					; size = 4
_right$ = -12						; size = 4
_left$ = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?FindInSorted@?$CObjectVector@UCIndexToPathPair@@@@QBEHABUCIndexToPathPair@@@Z PROC ; CObjectVector<CIndexToPathPair>::FindInSorted, COMDAT
; _this$ = ecx
; Line 553
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 554
	mov	DWORD PTR _left$[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CObjectVector@UCIndexToPathPair@@@@QBEIXZ ; CObjectVector<CIndexToPathPair>::Size
	mov	DWORD PTR _right$[ebp], eax
$LN5@FindInSort:
; Line 555
	mov	eax, DWORD PTR _left$[ebp]
	cmp	eax, DWORD PTR _right$[ebp]
	je	SHORT $LN4@FindInSort
; Line 557
	mov	ecx, DWORD PTR _left$[ebp]
	add	ecx, DWORD PTR _right$[ebp]
	shr	ecx, 1
	mov	DWORD PTR _mid$77533[ebp], ecx
; Line 558
	mov	edx, DWORD PTR _mid$77533[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CObjectVector@UCIndexToPathPair@@@@QBEABUCIndexToPathPair@@I@Z ; CObjectVector<CIndexToPathPair>::operator[]
	mov	DWORD PTR _midVal$77534[ebp], eax
; Line 559
	mov	eax, DWORD PTR _midVal$77534[ebp]
	push	eax
	mov	ecx, DWORD PTR _item$[ebp]
	call	?Compare@CIndexToPathPair@@QBEHABU1@@Z	; CIndexToPathPair::Compare
	mov	DWORD PTR _comp$77535[ebp], eax
; Line 560
	cmp	DWORD PTR _comp$77535[ebp], 0
	jne	SHORT $LN3@FindInSort
; Line 561
	mov	eax, DWORD PTR _mid$77533[ebp]
	jmp	SHORT $LN6@FindInSort
$LN3@FindInSort:
; Line 562
	cmp	DWORD PTR _comp$77535[ebp], 0
	jge	SHORT $LN2@FindInSort
; Line 563
	mov	ecx, DWORD PTR _mid$77533[ebp]
	mov	DWORD PTR _right$[ebp], ecx
; Line 564
	jmp	SHORT $LN1@FindInSort
$LN2@FindInSort:
; Line 565
	mov	edx, DWORD PTR _mid$77533[ebp]
	add	edx, 1
	mov	DWORD PTR _left$[ebp], edx
$LN1@FindInSort:
; Line 566
	jmp	SHORT $LN5@FindInSort
$LN4@FindInSort:
; Line 567
	or	eax, -1
$LN6@FindInSort:
; Line 568
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?FindInSorted@?$CObjectVector@UCIndexToPathPair@@@@QBEHABUCIndexToPathPair@@@Z ENDP ; CObjectVector<CIndexToPathPair>::FindInSorted
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Compare@CIndexToPathPair@@QBEHABU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pair$ = 8						; size = 4
?Compare@CIndexToPathPair@@QBEHABU1@@Z PROC		; CIndexToPathPair::Compare, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\archiveextractcallback.h
; Line 138
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 139
	mov	eax, DWORD PTR _pair$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	??$MyCompare@I@@YGHII@Z			; MyCompare<unsigned int>
; Line 140
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Compare@CIndexToPathPair@@QBEHABU1@@Z ENDP		; CIndexToPathPair::Compare
_TEXT	ENDS
PUBLIC	?Insert@?$CObjectVector@UCIndexToPathPair@@@@QAEXIABUCIndexToPathPair@@@Z ; CObjectVector<CIndexToPathPair>::Insert
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?AddToUniqueSorted@?$CObjectVector@UCIndexToPathPair@@@@QAEIABUCIndexToPathPair@@@Z
_TEXT	SEGMENT
_comp$77548 = -24					; size = 4
_midVal$77547 = -20					; size = 4
_mid$77546 = -16					; size = 4
_right$ = -12						; size = 4
_left$ = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?AddToUniqueSorted@?$CObjectVector@UCIndexToPathPair@@@@QAEIABUCIndexToPathPair@@@Z PROC ; CObjectVector<CIndexToPathPair>::AddToUniqueSorted, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 571
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 572
	mov	DWORD PTR _left$[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CObjectVector@UCIndexToPathPair@@@@QBEIXZ ; CObjectVector<CIndexToPathPair>::Size
	mov	DWORD PTR _right$[ebp], eax
$LN5@AddToUniqu:
; Line 573
	mov	eax, DWORD PTR _left$[ebp]
	cmp	eax, DWORD PTR _right$[ebp]
	je	SHORT $LN4@AddToUniqu
; Line 575
	mov	ecx, DWORD PTR _left$[ebp]
	add	ecx, DWORD PTR _right$[ebp]
	shr	ecx, 1
	mov	DWORD PTR _mid$77546[ebp], ecx
; Line 576
	mov	edx, DWORD PTR _mid$77546[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CObjectVector@UCIndexToPathPair@@@@QAEAAUCIndexToPathPair@@I@Z ; CObjectVector<CIndexToPathPair>::operator[]
	mov	DWORD PTR _midVal$77547[ebp], eax
; Line 577
	mov	eax, DWORD PTR _midVal$77547[ebp]
	push	eax
	mov	ecx, DWORD PTR _item$[ebp]
	call	?Compare@CIndexToPathPair@@QBEHABU1@@Z	; CIndexToPathPair::Compare
	mov	DWORD PTR _comp$77548[ebp], eax
; Line 578
	cmp	DWORD PTR _comp$77548[ebp], 0
	jne	SHORT $LN3@AddToUniqu
; Line 579
	mov	eax, DWORD PTR _mid$77546[ebp]
	jmp	SHORT $LN6@AddToUniqu
$LN3@AddToUniqu:
; Line 580
	cmp	DWORD PTR _comp$77548[ebp], 0
	jge	SHORT $LN2@AddToUniqu
; Line 581
	mov	ecx, DWORD PTR _mid$77546[ebp]
	mov	DWORD PTR _right$[ebp], ecx
; Line 582
	jmp	SHORT $LN1@AddToUniqu
$LN2@AddToUniqu:
; Line 583
	mov	edx, DWORD PTR _mid$77546[ebp]
	add	edx, 1
	mov	DWORD PTR _left$[ebp], edx
$LN1@AddToUniqu:
; Line 584
	jmp	SHORT $LN5@AddToUniqu
$LN4@AddToUniqu:
; Line 585
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR _right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Insert@?$CObjectVector@UCIndexToPathPair@@@@QAEXIABUCIndexToPathPair@@@Z ; CObjectVector<CIndexToPathPair>::Insert
; Line 586
	mov	eax, DWORD PTR _right$[ebp]
$LN6@AddToUniqu:
; Line 587
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?AddToUniqueSorted@?$CObjectVector@UCIndexToPathPair@@@@QAEIABUCIndexToPathPair@@@Z ENDP ; CObjectVector<CIndexToPathPair>::AddToUniqueSorted
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@UCExtrRefSortPair@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@UCExtrRefSortPair@@@@QAE@XZ PROC	; CRecordVector<CExtrRefSortPair>::CRecordVector<CExtrRefSortPair>, COMDAT
; _this$ = ecx
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@UCExtrRefSortPair@@@@QAE@XZ ENDP	; CRecordVector<CExtrRefSortPair>::CRecordVector<CExtrRefSortPair>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@UCExtrRefSortPair@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@UCExtrRefSortPair@@@@QBEIXZ PROC	; CRecordVector<CExtrRefSortPair>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@UCExtrRefSortPair@@@@QBEIXZ ENDP	; CRecordVector<CExtrRefSortPair>::Size
_TEXT	ENDS
PUBLIC	?ClearAndReserve@?$CRecordVector@UCExtrRefSortPair@@@@QAEXI@Z ; CRecordVector<CExtrRefSortPair>::ClearAndReserve
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ClearAndSetSize@?$CRecordVector@UCExtrRefSortPair@@@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newSize$ = 8						; size = 4
?ClearAndSetSize@?$CRecordVector@UCExtrRefSortPair@@@@QAEXI@Z PROC ; CRecordVector<CExtrRefSortPair>::ClearAndSetSize, COMDAT
; _this$ = ecx
; Line 87
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 88
	mov	eax, DWORD PTR _newSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearAndReserve@?$CRecordVector@UCExtrRefSortPair@@@@QAEXI@Z ; CRecordVector<CExtrRefSortPair>::ClearAndReserve
; Line 89
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _newSize$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 90
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearAndSetSize@?$CRecordVector@UCExtrRefSortPair@@@@QAEXI@Z ENDP ; CRecordVector<CExtrRefSortPair>::ClearAndSetSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@UCExtrRefSortPair@@@@QAE@XZ
_TEXT	SEGMENT
$T79572 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@UCExtrRefSortPair@@@@QAE@XZ PROC	; CRecordVector<CExtrRefSortPair>::~CRecordVector<CExtrRefSortPair>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T79572[ebp], ecx
	mov	edx, DWORD PTR $T79572[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@UCExtrRefSortPair@@@@QAE@XZ ENDP	; CRecordVector<CExtrRefSortPair>::~CRecordVector<CExtrRefSortPair>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@UCExtrRefSortPair@@@@QAEAAUCExtrRefSortPair@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@UCExtrRefSortPair@@@@QAEAAUCExtrRefSortPair@@I@Z PROC ; CRecordVector<CExtrRefSortPair>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@UCExtrRefSortPair@@@@QAEAAUCExtrRefSortPair@@I@Z ENDP ; CRecordVector<CExtrRefSortPair>::operator[]
_TEXT	ENDS
PUBLIC	?SortRefDown2@?$CRecordVector@UCExtrRefSortPair@@@@SGXPAUCExtrRefSortPair@@II@Z ; CRecordVector<CExtrRefSortPair>::SortRefDown2
PUBLIC	?Front@?$CRecordVector@UCExtrRefSortPair@@@@QAEAAUCExtrRefSortPair@@XZ ; CRecordVector<CExtrRefSortPair>::Front
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Sort2@?$CRecordVector@UCExtrRefSortPair@@@@QAEXXZ
_TEXT	SEGMENT
_temp$77575 = -28					; size = 8
_i$77568 = -16						; size = 4
_p$ = -12						; size = 4
_size$ = -8						; size = 4
_this$ = -4						; size = 4
?Sort2@?$CRecordVector@UCExtrRefSortPair@@@@QAEXXZ PROC	; CRecordVector<CExtrRefSortPair>::Sort2, COMDAT
; _this$ = ecx
; Line 382
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 383
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _size$[ebp], ecx
; Line 384
	cmp	DWORD PTR _size$[ebp], 1
	ja	SHORT $LN7@Sort2@2
; Line 385
	jmp	$LN8@Sort2@2
$LN7@Sort2@2:
; Line 386
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Front@?$CRecordVector@UCExtrRefSortPair@@@@QAEAAUCExtrRefSortPair@@XZ ; CRecordVector<CExtrRefSortPair>::Front
	sub	eax, 8
	mov	DWORD PTR _p$[ebp], eax
; Line 388
	mov	edx, DWORD PTR _size$[ebp]
	shr	edx, 1
	mov	DWORD PTR _i$77568[ebp], edx
$LN6@Sort2@2:
; Line 390
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$77568[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	?SortRefDown2@?$CRecordVector@UCExtrRefSortPair@@@@SGXPAUCExtrRefSortPair@@II@Z ; CRecordVector<CExtrRefSortPair>::SortRefDown2
; Line 391
	mov	eax, DWORD PTR _i$77568[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$77568[ebp], eax
	jne	SHORT $LN6@Sort2@2
$LN3@Sort2@2:
; Line 395
	mov	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+ecx*8]
	mov	ecx, DWORD PTR [edx+ecx*8+4]
	mov	DWORD PTR _temp$77575[ebp], eax
	mov	DWORD PTR _temp$77575[ebp+4], ecx
; Line 396
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _size$[ebp]
	mov	esi, DWORD PTR _p$[ebp]
	mov	DWORD PTR [esi+edx*8], eax
	mov	DWORD PTR [esi+edx*8+4], ecx
	mov	eax, DWORD PTR _size$[ebp]
	sub	eax, 1
	mov	DWORD PTR _size$[ebp], eax
; Line 397
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _temp$77575[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _temp$77575[ebp+4]
	mov	DWORD PTR [ecx+12], eax
; Line 398
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	?SortRefDown2@?$CRecordVector@UCExtrRefSortPair@@@@SGXPAUCExtrRefSortPair@@II@Z ; CRecordVector<CExtrRefSortPair>::SortRefDown2
; Line 400
	cmp	DWORD PTR _size$[ebp], 1
	ja	SHORT $LN3@Sort2@2
$LN8@Sort2@2:
; Line 401
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@Sort2@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN12@Sort2@2:
	DD	1
	DD	$LN11@Sort2@2
$LN11@Sort2@2:
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN10@Sort2@2
$LN10@Sort2@2:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
?Sort2@?$CRecordVector@UCExtrRefSortPair@@@@QAEXXZ ENDP	; CRecordVector<CExtrRefSortPair>::Sort2
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??_GUString@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GUString@@QAEPAXI@Z PROC				; UString::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@4:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GUString@@QAEPAXI@Z ENDP				; UString::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??_GCIndexToPathPair@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCIndexToPathPair@@QAEPAXI@Z PROC			; CIndexToPathPair::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CIndexToPathPair@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@5
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@5:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCIndexToPathPair@@QAEPAXI@Z ENDP			; CIndexToPathPair::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@PAX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@PAX@@QAE@XZ PROC			; CRecordVector<void *>::CRecordVector<void *>, COMDAT
; _this$ = ecx
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@PAX@@QAE@XZ ENDP			; CRecordVector<void *>::CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@PAX@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@PAX@@QBEIXZ PROC			; CRecordVector<void *>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@PAX@@QBEIXZ ENDP			; CRecordVector<void *>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ PROC		; CRecordVector<void *>::IsEmpty, COMDAT
; _this$ = ecx
; Line 49
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+4], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ ENDP		; CRecordVector<void *>::IsEmpty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z
_TEXT	SEGMENT
$T79592 = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z PROC	; CRecordVector<void *>::ConstructReserve, COMDAT
; _this$ = ecx
; Line 52
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 53
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN2@ConstructR
; Line 55
	xor	ecx, ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T79592[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T79592[ebp]
	mov	DWORD PTR [eax], ecx
; Line 56
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@ConstructR:
; Line 58
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z ENDP	; CRecordVector<void *>::ConstructReserve
_TEXT	ENDS
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Reserve@?$CRecordVector@PAX@@QAEXI@Z
_TEXT	SEGMENT
$T79596 = -16						; size = 4
$T79595 = -12						; size = 4
_p$77636 = -8						; size = 4
_this$ = -4						; size = 4
_newCapacity$ = 8					; size = 4
?Reserve@?$CRecordVector@PAX@@QAEXI@Z PROC		; CRecordVector<void *>::Reserve, COMDAT
; _this$ = ecx
; Line 61
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 62
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	SHORT $LN3@Reserve
; Line 64
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T79595[ebp], eax
	mov	eax, DWORD PTR $T79595[ebp]
	mov	DWORD PTR _p$77636[ebp], eax
; Line 65
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@Reserve
; Line 66
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$77636[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@Reserve:
; Line 67
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T79596[ebp], edx
	mov	eax, DWORD PTR $T79596[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 68
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$77636[ebp]
	mov	DWORD PTR [ecx], edx
; Line 69
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@Reserve:
; Line 71
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Reserve@?$CRecordVector@PAX@@QAEXI@Z ENDP		; CRecordVector<void *>::Reserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@PAX@@QAE@XZ
_TEXT	SEGMENT
$T79599 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@PAX@@QAE@XZ PROC			; CRecordVector<void *>::~CRecordVector<void *>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T79599[ebp], ecx
	mov	edx, DWORD PTR $T79599[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@PAX@@QAE@XZ ENDP			; CRecordVector<void *>::~CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Clear@?$CRecordVector@PAX@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$CRecordVector@PAX@@QAEXXZ PROC			; CRecordVector<void *>::Clear, COMDAT
; _this$ = ecx
; Line 131
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CRecordVector@PAX@@QAEXXZ ENDP			; CRecordVector<void *>::Clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?DeleteBack@?$CRecordVector@PAX@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DeleteBack@?$CRecordVector@PAX@@QAEXXZ PROC		; CRecordVector<void *>::DeleteBack, COMDAT
; _this$ = ecx
; Line 133
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?DeleteBack@?$CRecordVector@PAX@@QAEXXZ ENDP		; CRecordVector<void *>::DeleteBack
_TEXT	ENDS
PUBLIC	?MoveItems@?$CRecordVector@PAX@@AAEXII@Z	; CRecordVector<void *>::MoveItems
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?DeleteFrontal@?$CRecordVector@PAX@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_num$ = 8						; size = 4
?DeleteFrontal@?$CRecordVector@PAX@@QAEXI@Z PROC	; CRecordVector<void *>::DeleteFrontal, COMDAT
; _this$ = ecx
; Line 142
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 143
	cmp	DWORD PTR _num$[ebp], 0
	je	SHORT $LN2@DeleteFron@2
; Line 145
	mov	eax, DWORD PTR _num$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MoveItems@?$CRecordVector@PAX@@AAEXII@Z ; CRecordVector<void *>::MoveItems
; Line 146
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, DWORD PTR _num$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
$LN2@DeleteFron@2:
; Line 148
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?DeleteFrontal@?$CRecordVector@PAX@@QAEXI@Z ENDP	; CRecordVector<void *>::DeleteFrontal
_TEXT	ENDS
PUBLIC	?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ	; CRecordVector<void *>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@PAX@@QAEIQAX@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?Add@?$CRecordVector@PAX@@QAEIQAX@Z PROC		; CRecordVector<void *>::Add, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ; CRecordVector<void *>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 201
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv72[ebp]
; Line 202
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CRecordVector@PAX@@QAEIQAX@Z ENDP		; CRecordVector<void *>::Add
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z PROC	; CRecordVector<void *>::AddInReserved, COMDAT
; _this$ = ecx
; Line 205
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 206
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 207
	mov	esp, ebp
	pop	ebp
	ret	4
?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ENDP	; CRecordVector<void *>::AddInReserved
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@PAX@@QBEABQAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@PAX@@QBEABQAXI@Z PROC		; CRecordVector<void *>::operator[], COMDAT
; _this$ = ecx
; Line 227
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@PAX@@QBEABQAXI@Z ENDP		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@PAX@@QAEAAPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@PAX@@QAEAAPAXI@Z PROC		; CRecordVector<void *>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@PAX@@QAEAAPAXI@Z ENDP		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ
_TEXT	SEGMENT
$T79617 = -20						; size = 4
$T79616 = -16						; size = 4
_p$77671 = -12						; size = 4
_newCapacity$77670 = -8					; size = 4
_this$ = -4						; size = 4
?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ PROC	; CRecordVector<unsigned int>::ReserveOnePosition, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@ReserveOne
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$77670[ebp], ecx
; Line 23
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$77670[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T79616[ebp], eax
	mov	eax, DWORD PTR $T79616[ebp]
	mov	DWORD PTR _p$77671[ebp], eax
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@ReserveOne
; Line 25
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$77671[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne:
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T79617[ebp], edx
	mov	eax, DWORD PTR $T79617[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$77671[ebp]
	mov	DWORD PTR [ecx], edx
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$77670[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ReserveOne:
; Line 30
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ ENDP	; CRecordVector<unsigned int>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReserveOnePosition@?$CRecordVector@UCHardLinkNode@@@@AAEXXZ
_TEXT	SEGMENT
$T79621 = -20						; size = 4
$T79620 = -16						; size = 4
_p$77682 = -12						; size = 4
_newCapacity$77681 = -8					; size = 4
_this$ = -4						; size = 4
?ReserveOnePosition@?$CRecordVector@UCHardLinkNode@@@@AAEXXZ PROC ; CRecordVector<CHardLinkNode>::ReserveOnePosition, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@ReserveOne@2
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$77681[ebp], ecx
; Line 23
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$77681[ebp]
	mov	edx, 16					; 00000010H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T79620[ebp], eax
	mov	eax, DWORD PTR $T79620[ebp]
	mov	DWORD PTR _p$77682[ebp], eax
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@ReserveOne@2
; Line 25
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$77682[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne@2:
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T79621[ebp], edx
	mov	eax, DWORD PTR $T79621[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$77682[ebp]
	mov	DWORD PTR [ecx], edx
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$77681[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ReserveOne@2:
; Line 30
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveOnePosition@?$CRecordVector@UCHardLinkNode@@@@AAEXXZ ENDP ; CRecordVector<CHardLinkNode>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Front@?$CRecordVector@UCHardLinkNode@@@@QAEAAUCHardLinkNode@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Front@?$CRecordVector@UCHardLinkNode@@@@QAEAAUCHardLinkNode@@XZ PROC ; CRecordVector<CHardLinkNode>::Front, COMDAT
; _this$ = ecx
; Line 230
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
?Front@?$CRecordVector@UCHardLinkNode@@@@QAEAAUCHardLinkNode@@XZ ENDP ; CRecordVector<CHardLinkNode>::Front
_TEXT	ENDS
PUBLIC	??A?$CRecordVector@UCHardLinkNode@@@@QBEABUCHardLinkNode@@I@Z ; CRecordVector<CHardLinkNode>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?FindInSorted2@?$CRecordVector@UCHardLinkNode@@@@QBEHABUCHardLinkNode@@II@Z
_TEXT	SEGMENT
_comp$77698 = -16					; size = 4
_midVal$77697 = -12					; size = 4
_mid$77696 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 4
_left$ = 12						; size = 4
_right$ = 16						; size = 4
?FindInSorted2@?$CRecordVector@UCHardLinkNode@@@@QBEHABUCHardLinkNode@@II@Z PROC ; CRecordVector<CHardLinkNode>::FindInSorted2, COMDAT
; _this$ = ecx
; Line 260
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
$LN5@FindInSort@2:
; Line 261
	mov	eax, DWORD PTR _left$[ebp]
	cmp	eax, DWORD PTR _right$[ebp]
	je	SHORT $LN4@FindInSort@2
; Line 263
	mov	ecx, DWORD PTR _left$[ebp]
	add	ecx, DWORD PTR _right$[ebp]
	shr	ecx, 1
	mov	DWORD PTR _mid$77696[ebp], ecx
; Line 264
	mov	edx, DWORD PTR _mid$77696[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@UCHardLinkNode@@@@QBEABUCHardLinkNode@@I@Z ; CRecordVector<CHardLinkNode>::operator[]
	mov	DWORD PTR _midVal$77697[ebp], eax
; Line 265
	mov	eax, DWORD PTR _midVal$77697[ebp]
	push	eax
	mov	ecx, DWORD PTR _item$[ebp]
	call	?Compare@CHardLinkNode@@QBEHABU1@@Z	; CHardLinkNode::Compare
	mov	DWORD PTR _comp$77698[ebp], eax
; Line 266
	cmp	DWORD PTR _comp$77698[ebp], 0
	jne	SHORT $LN3@FindInSort@2
; Line 267
	mov	eax, DWORD PTR _mid$77696[ebp]
	jmp	SHORT $LN6@FindInSort@2
$LN3@FindInSort@2:
; Line 268
	cmp	DWORD PTR _comp$77698[ebp], 0
	jge	SHORT $LN2@FindInSort@2
; Line 269
	mov	ecx, DWORD PTR _mid$77696[ebp]
	mov	DWORD PTR _right$[ebp], ecx
; Line 270
	jmp	SHORT $LN1@FindInSort@2
$LN2@FindInSort@2:
; Line 271
	mov	edx, DWORD PTR _mid$77696[ebp]
	add	edx, 1
	mov	DWORD PTR _left$[ebp], edx
$LN1@FindInSort@2:
; Line 272
	jmp	SHORT $LN5@FindInSort@2
$LN4@FindInSort@2:
; Line 273
	or	eax, -1
$LN6@FindInSort@2:
; Line 274
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?FindInSorted2@?$CRecordVector@UCHardLinkNode@@@@QBEHABUCHardLinkNode@@II@Z ENDP ; CRecordVector<CHardLinkNode>::FindInSorted2
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SortRefDown2@?$CRecordVector@UCHardLinkNode@@@@SGXPAUCHardLinkNode@@II@Z
_TEXT	SEGMENT
_s$77707 = -32						; size = 4
_temp$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_p$ = 8							; size = 4
_k$ = 12						; size = 4
_size$ = 16						; size = 4
?SortRefDown2@?$CRecordVector@UCHardLinkNode@@@@SGXPAUCHardLinkNode@@II@Z PROC ; CRecordVector<CHardLinkNode>::SortRefDown2, COMDAT
; Line 364
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 365
	mov	eax, DWORD PTR _k$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _temp$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _temp$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _temp$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _temp$[ebp+12], edx
$LN5@SortRefDow:
; Line 368
	mov	eax, DWORD PTR _k$[ebp]
	shl	eax, 1
	mov	DWORD PTR _s$77707[ebp], eax
; Line 369
	mov	ecx, DWORD PTR _s$77707[ebp]
	cmp	ecx, DWORD PTR _size$[ebp]
	jbe	SHORT $LN3@SortRefDow
; Line 370
	jmp	SHORT $LN4@SortRefDow
$LN3@SortRefDow:
; Line 371
	mov	edx, DWORD PTR _s$77707[ebp]
	cmp	edx, DWORD PTR _size$[ebp]
	jae	SHORT $LN2@SortRefDow
	mov	eax, DWORD PTR _s$77707[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$77707[ebp]
	add	ecx, 1
	shl	ecx, 4
	add	ecx, DWORD PTR _p$[ebp]
	call	?Compare@CHardLinkNode@@QBEHABU1@@Z	; CHardLinkNode::Compare
	test	eax, eax
	jle	SHORT $LN2@SortRefDow
; Line 372
	mov	ecx, DWORD PTR _s$77707[ebp]
	add	ecx, 1
	mov	DWORD PTR _s$77707[ebp], ecx
$LN2@SortRefDow:
; Line 373
	mov	edx, DWORD PTR _s$77707[ebp]
	shl	edx, 4
	add	edx, DWORD PTR _p$[ebp]
	push	edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	?Compare@CHardLinkNode@@QBEHABU1@@Z	; CHardLinkNode::Compare
	test	eax, eax
	jl	SHORT $LN1@SortRefDow
; Line 374
	jmp	SHORT $LN4@SortRefDow
$LN1@SortRefDow:
; Line 375
	mov	eax, DWORD PTR _s$77707[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _k$[ebp]
	shl	ecx, 4
	add	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 376
	mov	ecx, DWORD PTR _s$77707[ebp]
	mov	DWORD PTR _k$[ebp], ecx
; Line 377
	jmp	$LN5@SortRefDow
$LN4@SortRefDow:
; Line 378
	mov	edx, DWORD PTR _k$[ebp]
	shl	edx, 4
	add	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _temp$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
; Line 379
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@SortRefDow
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	3
$LN10@SortRefDow:
	DD	1
	DD	$LN9@SortRefDow
$LN9@SortRefDow:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN8@SortRefDow
$LN8@SortRefDow:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
?SortRefDown2@?$CRecordVector@UCHardLinkNode@@@@SGXPAUCHardLinkNode@@II@Z ENDP ; CRecordVector<CHardLinkNode>::SortRefDown2
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@UCIndexToPathPair@@@@QBEABUCIndexToPathPair@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCIndexToPathPair@@@@QBEABUCIndexToPathPair@@I@Z PROC ; CObjectVector<CIndexToPathPair>::operator[], COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCIndexToPathPair@@@@QBEABUCIndexToPathPair@@I@Z ENDP ; CObjectVector<CIndexToPathPair>::operator[]
_TEXT	ENDS
PUBLIC	?Insert@?$CRecordVector@PAX@@QAEXIQAX@Z		; CRecordVector<void *>::Insert
PUBLIC	??0CIndexToPathPair@@QAE@ABU0@@Z		; CIndexToPathPair::CIndexToPathPair
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Insert@?$CObjectVector@UCIndexToPathPair@@@@QAEXIABUCIndexToPathPair@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Insert@?$CObjectVector@UCIndexToPathPair@@@@QAEXIABUCIndexToPathPair@@@Z$0
__ehfuncinfo$?Insert@?$CObjectVector@UCIndexToPathPair@@@@QAEXIABUCIndexToPathPair@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Insert@?$CObjectVector@UCIndexToPathPair@@@@QAEXIABUCIndexToPathPair@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?Insert@?$CObjectVector@UCIndexToPathPair@@@@QAEXIABUCIndexToPathPair@@@Z
_TEXT	SEGMENT
tv73 = -28						; size = 4
$T79637 = -24						; size = 4
$T79636 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_index$ = 8						; size = 4
_item$ = 12						; size = 4
?Insert@?$CObjectVector@UCIndexToPathPair@@@@QAEXIABUCIndexToPathPair@@@Z PROC ; CObjectVector<CIndexToPathPair>::Insert, COMDAT
; _this$ = ecx
; Line 477
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Insert@?$CObjectVector@UCIndexToPathPair@@@@QAEXIABUCIndexToPathPair@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T79637[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T79637[ebp], 0
	je	SHORT $LN3@Insert
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T79637[ebp]
	call	??0CIndexToPathPair@@QAE@ABU0@@Z
	mov	DWORD PTR tv73[ebp], eax
	jmp	SHORT $LN4@Insert
$LN3@Insert:
	mov	DWORD PTR tv73[ebp], 0
$LN4@Insert:
	mov	ecx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T79636[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T79636[ebp]
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Insert@?$CRecordVector@PAX@@QAEXIQAX@Z	; CRecordVector<void *>::Insert
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Insert@?$CObjectVector@UCIndexToPathPair@@@@QAEXIABUCIndexToPathPair@@@Z$0:
	mov	eax, DWORD PTR $T79637[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Insert@?$CObjectVector@UCIndexToPathPair@@@@QAEXIABUCIndexToPathPair@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Insert@?$CObjectVector@UCIndexToPathPair@@@@QAEXIABUCIndexToPathPair@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Insert@?$CObjectVector@UCIndexToPathPair@@@@QAEXIABUCIndexToPathPair@@@Z ENDP ; CObjectVector<CIndexToPathPair>::Insert
PUBLIC	?Clear@?$CRecordVector@UCExtrRefSortPair@@@@QAEXXZ ; CRecordVector<CExtrRefSortPair>::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ClearAndReserve@?$CRecordVector@UCExtrRefSortPair@@@@QAEXI@Z
_TEXT	SEGMENT
$T79650 = -12						; size = 4
$T79649 = -8						; size = 4
_this$ = -4						; size = 4
_newCapacity$ = 8					; size = 4
?ClearAndReserve@?$CRecordVector@UCExtrRefSortPair@@@@QAEXI@Z PROC ; CRecordVector<CExtrRefSortPair>::ClearAndReserve, COMDAT
; _this$ = ecx
; Line 74
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 75
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CRecordVector@UCExtrRefSortPair@@@@QAEXXZ ; CRecordVector<CExtrRefSortPair>::Clear
; Line 76
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	SHORT $LN2@ClearAndRe
; Line 78
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T79649[ebp], eax
	mov	ecx, DWORD PTR $T79649[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 79
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0
; Line 80
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 81
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$[ebp]
	mov	edx, 8
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T79650[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T79650[ebp]
	mov	DWORD PTR [eax], ecx
; Line 82
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _newCapacity$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@ClearAndRe:
; Line 84
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearAndReserve@?$CRecordVector@UCExtrRefSortPair@@@@QAEXI@Z ENDP ; CRecordVector<CExtrRefSortPair>::ClearAndReserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Front@?$CRecordVector@UCExtrRefSortPair@@@@QAEAAUCExtrRefSortPair@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Front@?$CRecordVector@UCExtrRefSortPair@@@@QAEAAUCExtrRefSortPair@@XZ PROC ; CRecordVector<CExtrRefSortPair>::Front, COMDAT
; _this$ = ecx
; Line 230
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
?Front@?$CRecordVector@UCExtrRefSortPair@@@@QAEAAUCExtrRefSortPair@@XZ ENDP ; CRecordVector<CExtrRefSortPair>::Front
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SortRefDown2@?$CRecordVector@UCExtrRefSortPair@@@@SGXPAUCExtrRefSortPair@@II@Z
_TEXT	SEGMENT
_s$77733 = -20						; size = 4
_temp$ = -12						; size = 8
_p$ = 8							; size = 4
_k$ = 12						; size = 4
_size$ = 16						; size = 4
?SortRefDown2@?$CRecordVector@UCExtrRefSortPair@@@@SGXPAUCExtrRefSortPair@@II@Z PROC ; CRecordVector<CExtrRefSortPair>::SortRefDown2, COMDAT
; Line 364
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 365
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8]
	mov	eax, DWORD PTR [ecx+eax*8+4]
	mov	DWORD PTR _temp$[ebp], edx
	mov	DWORD PTR _temp$[ebp+4], eax
$LN5@SortRefDow@2:
; Line 368
	mov	ecx, DWORD PTR _k$[ebp]
	shl	ecx, 1
	mov	DWORD PTR _s$77733[ebp], ecx
; Line 369
	mov	edx, DWORD PTR _s$77733[ebp]
	cmp	edx, DWORD PTR _size$[ebp]
	jbe	SHORT $LN3@SortRefDow@2
; Line 370
	jmp	SHORT $LN4@SortRefDow@2
$LN3@SortRefDow@2:
; Line 371
	mov	eax, DWORD PTR _s$77733[ebp]
	cmp	eax, DWORD PTR _size$[ebp]
	jae	SHORT $LN2@SortRefDow@2
	mov	ecx, DWORD PTR _s$77733[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	push	eax
	mov	ecx, DWORD PTR _s$77733[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	lea	ecx, DWORD PTR [edx+ecx*8+8]
	call	?Compare@CExtrRefSortPair@@QBEHABU1@@Z	; CExtrRefSortPair::Compare
	test	eax, eax
	jle	SHORT $LN2@SortRefDow@2
; Line 372
	mov	eax, DWORD PTR _s$77733[ebp]
	add	eax, 1
	mov	DWORD PTR _s$77733[ebp], eax
$LN2@SortRefDow@2:
; Line 373
	mov	ecx, DWORD PTR _s$77733[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	push	eax
	lea	ecx, DWORD PTR _temp$[ebp]
	call	?Compare@CExtrRefSortPair@@QBEHABU1@@Z	; CExtrRefSortPair::Compare
	test	eax, eax
	jl	SHORT $LN1@SortRefDow@2
; Line 374
	jmp	SHORT $LN4@SortRefDow@2
$LN1@SortRefDow@2:
; Line 375
	mov	ecx, DWORD PTR _s$77733[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+ecx*8]
	mov	ecx, DWORD PTR [edx+ecx*8+4]
	mov	edx, DWORD PTR _k$[ebp]
	mov	esi, DWORD PTR _p$[ebp]
	mov	DWORD PTR [esi+edx*8], eax
	mov	DWORD PTR [esi+edx*8+4], ecx
; Line 376
	mov	eax, DWORD PTR _s$77733[ebp]
	mov	DWORD PTR _k$[ebp], eax
; Line 377
	jmp	SHORT $LN5@SortRefDow@2
$LN4@SortRefDow@2:
; Line 378
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [edx+ecx*8], eax
	mov	eax, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [edx+ecx*8+4], eax
; Line 379
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@SortRefDow@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	3
$LN10@SortRefDow@2:
	DD	1
	DD	$LN9@SortRefDow@2
$LN9@SortRefDow@2:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN8@SortRefDow@2
$LN8@SortRefDow@2:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
?SortRefDown2@?$CRecordVector@UCExtrRefSortPair@@@@SGXPAUCExtrRefSortPair@@II@Z ENDP ; CRecordVector<CExtrRefSortPair>::SortRefDown2
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CIndexToPathPair@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CIndexToPathPair@@QAE@ABU0@@Z PROC			; CIndexToPathPair::CIndexToPathPair, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CIndexToPathPair@@QAE@ABU0@@Z ENDP			; CIndexToPathPair::CIndexToPathPair
_TEXT	ENDS
EXTRN	__imp__memmove:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?MoveItems@?$CRecordVector@PAX@@AAEXII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_destIndex$ = 8						; size = 4
_srcIndex$ = 12						; size = 4
?MoveItems@?$CRecordVector@PAX@@AAEXII@Z PROC		; CRecordVector<void *>::MoveItems, COMDAT
; _this$ = ecx
; Line 14
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 15
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR _srcIndex$[ebp]
	shl	ecx, 2
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _srcIndex$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _destIndex$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 16
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?MoveItems@?$CRecordVector@PAX@@AAEXII@Z ENDP		; CRecordVector<void *>::MoveItems
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ
_TEXT	SEGMENT
$T79666 = -20						; size = 4
$T79665 = -16						; size = 4
_p$77748 = -12						; size = 4
_newCapacity$77747 = -8					; size = 4
_this$ = -4						; size = 4
?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ PROC	; CRecordVector<void *>::ReserveOnePosition, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@ReserveOne@3
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$77747[ebp], ecx
; Line 23
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$77747[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T79665[ebp], eax
	mov	eax, DWORD PTR $T79665[ebp]
	mov	DWORD PTR _p$77748[ebp], eax
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@ReserveOne@3
; Line 25
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$77748[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne@3:
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T79666[ebp], edx
	mov	eax, DWORD PTR $T79666[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$77748[ebp]
	mov	DWORD PTR [ecx], edx
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$77747[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ReserveOne@3:
; Line 30
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ENDP	; CRecordVector<void *>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Insert@?$CRecordVector@PAX@@QAEXIQAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
_item$ = 12						; size = 4
?Insert@?$CRecordVector@PAX@@QAEXIQAX@Z PROC		; CRecordVector<void *>::Insert, COMDAT
; _this$ = ecx
; Line 210
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 211
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ; CRecordVector<void *>::ReserveOnePosition
; Line 212
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MoveItems@?$CRecordVector@PAX@@AAEXII@Z ; CRecordVector<void *>::MoveItems
; Line 213
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 214
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 215
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Insert@?$CRecordVector@PAX@@QAEXIQAX@Z ENDP		; CRecordVector<void *>::Insert
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@UCHardLinkNode@@@@QBEABUCHardLinkNode@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@UCHardLinkNode@@@@QBEABUCHardLinkNode@@I@Z PROC ; CRecordVector<CHardLinkNode>::operator[], COMDAT
; _this$ = ecx
; Line 227
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@UCHardLinkNode@@@@QBEABUCHardLinkNode@@I@Z ENDP ; CRecordVector<CHardLinkNode>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Clear@?$CRecordVector@UCExtrRefSortPair@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$CRecordVector@UCExtrRefSortPair@@@@QAEXXZ PROC	; CRecordVector<CExtrRefSortPair>::Clear, COMDAT
; _this$ = ecx
; Line 131
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CRecordVector@UCExtrRefSortPair@@@@QAEXXZ ENDP	; CRecordVector<CExtrRefSortPair>::Clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$MyCompare@I@@YGHII@Z
_TEXT	SEGMENT
tv67 = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$MyCompare@I@@YGHII@Z PROC				; MyCompare<unsigned int>, COMDAT
; File c:\workspace\7z1505-src\cpp\common\defs.h
; Line 12
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _a$[ebp]
	cmp	eax, DWORD PTR _b$[ebp]
	jae	SHORT $LN3@MyCompare
	mov	DWORD PTR tv67[ebp], -1
	jmp	SHORT $LN4@MyCompare
$LN3@MyCompare:
	mov	ecx, DWORD PTR _a$[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR _b$[ebp]
	setne	dl
	mov	DWORD PTR tv67[ebp], edx
$LN4@MyCompare:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??$MyCompare@I@@YGHII@Z ENDP				; MyCompare<unsigned int>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$MyCompare@_K@@YGH_K0@Z
_TEXT	SEGMENT
tv66 = -8						; size = 4
tv67 = -4						; size = 4
_a$ = 8							; size = 8
_b$ = 16						; size = 8
??$MyCompare@_K@@YGH_K0@Z PROC				; MyCompare<unsigned __int64>, COMDAT
; Line 12
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _a$[ebp+4]
	cmp	eax, DWORD PTR _b$[ebp+4]
	ja	SHORT $LN5@MyCompare@2
	jb	SHORT $LN7@MyCompare@2
	mov	ecx, DWORD PTR _a$[ebp]
	cmp	ecx, DWORD PTR _b$[ebp]
	jae	SHORT $LN5@MyCompare@2
$LN7@MyCompare@2:
	mov	DWORD PTR tv67[ebp], -1
	jmp	SHORT $LN6@MyCompare@2
$LN5@MyCompare@2:
	mov	edx, DWORD PTR _a$[ebp]
	cmp	edx, DWORD PTR _b$[ebp]
	jne	SHORT $LN3@MyCompare@2
	mov	eax, DWORD PTR _a$[ebp+4]
	cmp	eax, DWORD PTR _b$[ebp+4]
	jne	SHORT $LN3@MyCompare@2
	mov	DWORD PTR tv66[ebp], 0
	jmp	SHORT $LN4@MyCompare@2
$LN3@MyCompare@2:
	mov	DWORD PTR tv66[ebp], 1
$LN4@MyCompare@2:
	mov	ecx, DWORD PTR tv66[ebp]
	mov	DWORD PTR tv67[ebp], ecx
$LN6@MyCompare@2:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??$MyCompare@_K@@YGH_K0@Z ENDP				; MyCompare<unsigned __int64>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$QueryInterface@UICompressProgressInfo@@@?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QBEJABU_GUID@@PAPAUICompressProgressInfo@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iid$ = 8						; size = 4
_pp$ = 12						; size = 4
??$QueryInterface@UICompressProgressInfo@@@?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QBEJABU_GUID@@PAPAUICompressProgressInfo@@@Z PROC ; CMyComPtr<IFolderArchiveExtractCallback>::QueryInterface<ICompressProgressInfo>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 70
	mov	esi, esp
	mov	eax, DWORD PTR _pp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 71
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$QueryInterface@UICompressProgressInfo@@@?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QBEJABU_GUID@@PAPAUICompressProgressInfo@@@Z ENDP ; CMyComPtr<IFolderArchiveExtractCallback>::QueryInterface<ICompressProgressInfo>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$QueryInterface@UIArchiveExtractCallbackMessage@@@?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QBEJABU_GUID@@PAPAUIArchiveExtractCallbackMessage@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iid$ = 8						; size = 4
_pp$ = 12						; size = 4
??$QueryInterface@UIArchiveExtractCallbackMessage@@@?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QBEJABU_GUID@@PAPAUIArchiveExtractCallbackMessage@@@Z PROC ; CMyComPtr<IFolderArchiveExtractCallback>::QueryInterface<IArchiveExtractCallbackMessage>, COMDAT
; _this$ = ecx
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 70
	mov	esi, esp
	mov	eax, DWORD PTR _pp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 71
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$QueryInterface@UIArchiveExtractCallbackMessage@@@?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QBEJABU_GUID@@PAPAUIArchiveExtractCallbackMessage@@@Z ENDP ; CMyComPtr<IFolderArchiveExtractCallback>::QueryInterface<IArchiveExtractCallbackMessage>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$QueryInterface@UIFolderArchiveExtractCallback2@@@?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QBEJABU_GUID@@PAPAUIFolderArchiveExtractCallback2@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iid$ = 8						; size = 4
_pp$ = 12						; size = 4
??$QueryInterface@UIFolderArchiveExtractCallback2@@@?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QBEJABU_GUID@@PAPAUIFolderArchiveExtractCallback2@@@Z PROC ; CMyComPtr<IFolderArchiveExtractCallback>::QueryInterface<IFolderArchiveExtractCallback2>, COMDAT
; _this$ = ecx
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 70
	mov	esi, esp
	mov	eax, DWORD PTR _pp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 71
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$QueryInterface@UIFolderArchiveExtractCallback2@@@?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QBEJABU_GUID@@PAPAUIFolderArchiveExtractCallback2@@@Z ENDP ; CMyComPtr<IFolderArchiveExtractCallback>::QueryInterface<IFolderArchiveExtractCallback2>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$QueryInterface@UIFolderExtractToStreamCallback@@@?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QBEJABU_GUID@@PAPAUIFolderExtractToStreamCallback@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iid$ = 8						; size = 4
_pp$ = 12						; size = 4
??$QueryInterface@UIFolderExtractToStreamCallback@@@?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QBEJABU_GUID@@PAPAUIFolderExtractToStreamCallback@@@Z PROC ; CMyComPtr<IFolderArchiveExtractCallback>::QueryInterface<IFolderExtractToStreamCallback>, COMDAT
; _this$ = ecx
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 70
	mov	esi, esp
	mov	eax, DWORD PTR _pp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 71
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$QueryInterface@UIFolderExtractToStreamCallback@@@?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QBEJABU_GUID@@PAPAUIFolderExtractToStreamCallback@@@Z ENDP ; CMyComPtr<IFolderArchiveExtractCallback>::QueryInterface<IFolderExtractToStreamCallback>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$QueryInterface@UICryptoGetTextPassword@@@?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QBEJABU_GUID@@PAPAUICryptoGetTextPassword@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iid$ = 8						; size = 4
_pp$ = 12						; size = 4
??$QueryInterface@UICryptoGetTextPassword@@@?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QBEJABU_GUID@@PAPAUICryptoGetTextPassword@@@Z PROC ; CMyComPtr<IFolderArchiveExtractCallback>::QueryInterface<ICryptoGetTextPassword>, COMDAT
; _this$ = ecx
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 70
	mov	esi, esp
	mov	eax, DWORD PTR _pp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 71
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$QueryInterface@UICryptoGetTextPassword@@@?$CMyComPtr@UIFolderArchiveExtractCallback@@@@QBEJABU_GUID@@PAPAUICryptoGetTextPassword@@@Z ENDP ; CMyComPtr<IFolderArchiveExtractCallback>::QueryInterface<ICryptoGetTextPassword>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CArchiveExtractCallback@@W3AGKXZ
_TEXT	SEGMENT
?Release@CArchiveExtractCallback@@W3AGKXZ PROC		; [thunk]:CArchiveExtractCallback::Release`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?Release@CArchiveExtractCallback@@UAGKXZ ; CArchiveExtractCallback::Release
?Release@CArchiveExtractCallback@@W3AGKXZ ENDP		; [thunk]:CArchiveExtractCallback::Release`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CArchiveExtractCallback@@W7AGKXZ
_TEXT	SEGMENT
?Release@CArchiveExtractCallback@@W7AGKXZ PROC		; [thunk]:CArchiveExtractCallback::Release`adjustor{8}', COMDAT
	sub	DWORD PTR [esp+4], 8
	jmp	?Release@CArchiveExtractCallback@@UAGKXZ ; CArchiveExtractCallback::Release
?Release@CArchiveExtractCallback@@W7AGKXZ ENDP		; [thunk]:CArchiveExtractCallback::Release`adjustor{8}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SetTotal@CArchiveExtractCallback@@W3AGJ_K@Z
_TEXT	SEGMENT
?SetTotal@CArchiveExtractCallback@@W3AGJ_K@Z PROC	; [thunk]:CArchiveExtractCallback::SetTotal`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?SetTotal@CArchiveExtractCallback@@UAGJ_K@Z ; CArchiveExtractCallback::SetTotal
?SetTotal@CArchiveExtractCallback@@W3AGJ_K@Z ENDP	; [thunk]:CArchiveExtractCallback::SetTotal`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CArchiveExtractCallback@@WM@AGKXZ
_TEXT	SEGMENT
?Release@CArchiveExtractCallback@@WM@AGKXZ PROC		; [thunk]:CArchiveExtractCallback::Release`adjustor{12}', COMDAT
	sub	DWORD PTR [esp+4], 12			; 0000000cH
	jmp	?Release@CArchiveExtractCallback@@UAGKXZ ; CArchiveExtractCallback::Release
?Release@CArchiveExtractCallback@@WM@AGKXZ ENDP		; [thunk]:CArchiveExtractCallback::Release`adjustor{12}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CArchiveExtractCallback@@W3AGKXZ
_TEXT	SEGMENT
?AddRef@CArchiveExtractCallback@@W3AGKXZ PROC		; [thunk]:CArchiveExtractCallback::AddRef`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?AddRef@CArchiveExtractCallback@@UAGKXZ	; CArchiveExtractCallback::AddRef
?AddRef@CArchiveExtractCallback@@W3AGKXZ ENDP		; [thunk]:CArchiveExtractCallback::AddRef`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CArchiveExtractCallback@@W7AGKXZ
_TEXT	SEGMENT
?AddRef@CArchiveExtractCallback@@W7AGKXZ PROC		; [thunk]:CArchiveExtractCallback::AddRef`adjustor{8}', COMDAT
	sub	DWORD PTR [esp+4], 8
	jmp	?AddRef@CArchiveExtractCallback@@UAGKXZ	; CArchiveExtractCallback::AddRef
?AddRef@CArchiveExtractCallback@@W7AGKXZ ENDP		; [thunk]:CArchiveExtractCallback::AddRef`adjustor{8}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CArchiveExtractCallback@@W3AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CArchiveExtractCallback@@W3AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:CArchiveExtractCallback::QueryInterface`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?QueryInterface@CArchiveExtractCallback@@UAGJABU_GUID@@PAPAX@Z ; CArchiveExtractCallback::QueryInterface
?QueryInterface@CArchiveExtractCallback@@W3AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:CArchiveExtractCallback::QueryInterface`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CArchiveExtractCallback@@WM@AGKXZ
_TEXT	SEGMENT
?AddRef@CArchiveExtractCallback@@WM@AGKXZ PROC		; [thunk]:CArchiveExtractCallback::AddRef`adjustor{12}', COMDAT
	sub	DWORD PTR [esp+4], 12			; 0000000cH
	jmp	?AddRef@CArchiveExtractCallback@@UAGKXZ	; CArchiveExtractCallback::AddRef
?AddRef@CArchiveExtractCallback@@WM@AGKXZ ENDP		; [thunk]:CArchiveExtractCallback::AddRef`adjustor{12}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CArchiveExtractCallback@@W7AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CArchiveExtractCallback@@W7AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:CArchiveExtractCallback::QueryInterface`adjustor{8}', COMDAT
	sub	DWORD PTR [esp+4], 8
	jmp	?QueryInterface@CArchiveExtractCallback@@UAGJABU_GUID@@PAPAX@Z ; CArchiveExtractCallback::QueryInterface
?QueryInterface@CArchiveExtractCallback@@W7AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:CArchiveExtractCallback::QueryInterface`adjustor{8}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CArchiveExtractCallback@@WM@AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CArchiveExtractCallback@@WM@AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:CArchiveExtractCallback::QueryInterface`adjustor{12}', COMDAT
	sub	DWORD PTR [esp+4], 12			; 0000000cH
	jmp	?QueryInterface@CArchiveExtractCallback@@UAGJABU_GUID@@PAPAX@Z ; CArchiveExtractCallback::QueryInterface
?QueryInterface@CArchiveExtractCallback@@WM@AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:CArchiveExtractCallback::QueryInterface`adjustor{12}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SetCompleted@CArchiveExtractCallback@@W3AGJPB_K@Z
_TEXT	SEGMENT
?SetCompleted@CArchiveExtractCallback@@W3AGJPB_K@Z PROC	; [thunk]:CArchiveExtractCallback::SetCompleted`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?SetCompleted@CArchiveExtractCallback@@UAGJPB_K@Z ; CArchiveExtractCallback::SetCompleted
?SetCompleted@CArchiveExtractCallback@@W3AGJPB_K@Z ENDP	; [thunk]:CArchiveExtractCallback::SetCompleted`adjustor{4}'
_TEXT	ENDS
END
