; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\CPP\Common\UTFConvert.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?CheckUTF8@@YG_NPBD_N@Z				; CheckUTF8
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\cpp\common\utfconvert.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
tv138 = -20						; size = 4
_c2$67090 = -13						; size = 1
_val$67086 = -12					; size = 4
_numBytes$67075 = -8					; size = 4
_c$67071 = -1						; size = 1
_src$ = 8						; size = 4
_allowReduced$ = 12					; size = 1
?CheckUTF8@@YG_NPBD_N@Z PROC				; CheckUTF8
; Line 41
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
$LN21@CheckUTF8:
; Line 44
	mov	eax, DWORD PTR _src$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c$67071[ebp], cl
	mov	edx, DWORD PTR _src$[ebp]
	add	edx, 1
	mov	DWORD PTR _src$[ebp], edx
; Line 45
	movzx	eax, BYTE PTR _c$67071[ebp]
	test	eax, eax
	jne	SHORT $LN19@CheckUTF8
; Line 46
	mov	al, 1
	jmp	$LN22@CheckUTF8
$LN19@CheckUTF8:
; Line 48
	movzx	ecx, BYTE PTR _c$67071[ebp]
	cmp	ecx, 128				; 00000080H
	jge	SHORT $LN18@CheckUTF8
; Line 49
	jmp	SHORT $LN21@CheckUTF8
$LN18@CheckUTF8:
; Line 50
	movzx	edx, BYTE PTR _c$67071[ebp]
	cmp	edx, 192				; 000000c0H
	jge	SHORT $LN17@CheckUTF8
; Line 51
	xor	al, al
	jmp	$LN22@CheckUTF8
$LN17@CheckUTF8:
; Line 54
	movzx	eax, BYTE PTR _c$67071[ebp]
	cmp	eax, 224				; 000000e0H
	jge	SHORT $LN16@CheckUTF8
	mov	DWORD PTR _numBytes$67075[ebp], 1
	movzx	ecx, BYTE PTR _c$67071[ebp]
	sub	ecx, 192				; 000000c0H
	mov	BYTE PTR _c$67071[ebp], cl
	jmp	$LN15@CheckUTF8
$LN16@CheckUTF8:
	movzx	edx, BYTE PTR _c$67071[ebp]
	cmp	edx, 240				; 000000f0H
	jge	SHORT $LN14@CheckUTF8
	mov	DWORD PTR _numBytes$67075[ebp], 2
	movzx	eax, BYTE PTR _c$67071[ebp]
	sub	eax, 224				; 000000e0H
	mov	BYTE PTR _c$67071[ebp], al
	jmp	SHORT $LN15@CheckUTF8
$LN14@CheckUTF8:
	movzx	ecx, BYTE PTR _c$67071[ebp]
	cmp	ecx, 248				; 000000f8H
	jge	SHORT $LN12@CheckUTF8
	mov	DWORD PTR _numBytes$67075[ebp], 3
	movzx	edx, BYTE PTR _c$67071[ebp]
	sub	edx, 240				; 000000f0H
	mov	BYTE PTR _c$67071[ebp], dl
	jmp	SHORT $LN15@CheckUTF8
$LN12@CheckUTF8:
	movzx	eax, BYTE PTR _c$67071[ebp]
	cmp	eax, 252				; 000000fcH
	jge	SHORT $LN10@CheckUTF8
	mov	DWORD PTR _numBytes$67075[ebp], 4
	movzx	ecx, BYTE PTR _c$67071[ebp]
	sub	ecx, 248				; 000000f8H
	mov	BYTE PTR _c$67071[ebp], cl
	jmp	SHORT $LN15@CheckUTF8
$LN10@CheckUTF8:
	movzx	edx, BYTE PTR _c$67071[ebp]
	cmp	edx, 254				; 000000feH
	jge	SHORT $LN8@CheckUTF8
	mov	DWORD PTR _numBytes$67075[ebp], 5
	movzx	eax, BYTE PTR _c$67071[ebp]
	sub	eax, 252				; 000000fcH
	mov	BYTE PTR _c$67071[ebp], al
; Line 55
	jmp	SHORT $LN15@CheckUTF8
$LN8@CheckUTF8:
; Line 56
	xor	al, al
	jmp	$LN22@CheckUTF8
$LN15@CheckUTF8:
; Line 58
	movzx	ecx, BYTE PTR _c$67071[ebp]
	mov	DWORD PTR _val$67086[ebp], ecx
$LN6@CheckUTF8:
; Line 62
	mov	edx, DWORD PTR _src$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR _c2$67090[ebp], al
	mov	ecx, DWORD PTR _src$[ebp]
	add	ecx, 1
	mov	DWORD PTR _src$[ebp], ecx
; Line 63
	movzx	edx, BYTE PTR _c2$67090[ebp]
	cmp	edx, 128				; 00000080H
	jl	SHORT $LN2@CheckUTF8
	movzx	eax, BYTE PTR _c2$67090[ebp]
	cmp	eax, 192				; 000000c0H
	jl	SHORT $LN3@CheckUTF8
$LN2@CheckUTF8:
; Line 64
	movzx	ecx, BYTE PTR _allowReduced$[ebp]
	test	ecx, ecx
	je	SHORT $LN24@CheckUTF8
	movzx	edx, BYTE PTR _c2$67090[ebp]
	test	edx, edx
	jne	SHORT $LN24@CheckUTF8
	mov	DWORD PTR tv138[ebp], 1
	jmp	SHORT $LN25@CheckUTF8
$LN24@CheckUTF8:
	mov	DWORD PTR tv138[ebp], 0
$LN25@CheckUTF8:
	mov	al, BYTE PTR tv138[ebp]
	jmp	SHORT $LN22@CheckUTF8
$LN3@CheckUTF8:
; Line 65
	mov	eax, DWORD PTR _val$67086[ebp]
	shl	eax, 6
	mov	DWORD PTR _val$67086[ebp], eax
; Line 66
	movzx	ecx, BYTE PTR _c2$67090[ebp]
	sub	ecx, 128				; 00000080H
	or	ecx, DWORD PTR _val$67086[ebp]
	mov	DWORD PTR _val$67086[ebp], ecx
; Line 68
	mov	edx, DWORD PTR _numBytes$67075[ebp]
	sub	edx, 1
	mov	DWORD PTR _numBytes$67075[ebp], edx
	jne	SHORT $LN6@CheckUTF8
; Line 70
	cmp	DWORD PTR _val$67086[ebp], 1114112	; 00110000H
	jb	SHORT $LN1@CheckUTF8
; Line 71
	xor	al, al
	jmp	SHORT $LN22@CheckUTF8
$LN1@CheckUTF8:
; Line 72
	jmp	$LN21@CheckUTF8
$LN22@CheckUTF8:
; Line 73
	mov	esp, ebp
	pop	ebp
	ret	8
?CheckUTF8@@YG_NPBD_N@Z ENDP				; CheckUTF8
_TEXT	ENDS
PUBLIC	?ReleaseBuf_SetEnd@UString@@QAEXI@Z		; UString::ReleaseBuf_SetEnd
PUBLIC	?GetBuf@UString@@QAEPA_WI@Z			; UString::GetBuf
PUBLIC	??BAString@@QBEPBDXZ				; AString::operator char const *
PUBLIC	?Ptr@AString@@QBEPBDI@Z				; AString::Ptr
PUBLIC	?Len@AString@@QBEIXZ				; AString::Len
PUBLIC	?Empty@UString@@QAEXXZ				; UString::Empty
PUBLIC	?ConvertUTF8ToUnicode@@YG_NABVAString@@AAVUString@@@Z ; ConvertUTF8ToUnicode
EXTRN	__RTC_CheckEsp:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_res$ = -13						; size = 1
_destLen$ = -8						; size = 4
_src$ = 8						; size = 4
_dest$ = 12						; size = 4
?ConvertUTF8ToUnicode@@YG_NABVAString@@AAVUString@@@Z PROC ; ConvertUTF8ToUnicode
; Line 273
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 274
	mov	ecx, DWORD PTR _dest$[ebp]
	call	?Empty@UString@@QAEXXZ			; UString::Empty
; Line 275
	mov	DWORD PTR _destLen$[ebp], 0
; Line 276
	mov	ecx, DWORD PTR _src$[ebp]
	call	?Len@AString@@QBEIXZ			; AString::Len
	push	eax
	mov	ecx, DWORD PTR _src$[ebp]
	call	?Ptr@AString@@QBEPBDI@Z			; AString::Ptr
	push	eax
	mov	ecx, DWORD PTR _src$[ebp]
	call	??BAString@@QBEPBDXZ			; AString::operator char const *
	push	eax
	lea	eax, DWORD PTR _destLen$[ebp]
	push	eax
	push	0
	call	?Utf8_To_Utf16@@YG_NPA_WPAIPBD2@Z	; Utf8_To_Utf16
; Line 277
	mov	ecx, DWORD PTR _src$[ebp]
	call	?Len@AString@@QBEIXZ			; AString::Len
	push	eax
	mov	ecx, DWORD PTR _src$[ebp]
	call	?Ptr@AString@@QBEPBDI@Z			; AString::Ptr
	push	eax
	mov	ecx, DWORD PTR _src$[ebp]
	call	??BAString@@QBEPBDXZ			; AString::operator char const *
	push	eax
	lea	ecx, DWORD PTR _destLen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _destLen$[ebp]
	push	edx
	mov	ecx, DWORD PTR _dest$[ebp]
	call	?GetBuf@UString@@QAEPA_WI@Z		; UString::GetBuf
	push	eax
	call	?Utf8_To_Utf16@@YG_NPA_WPAIPBD2@Z	; Utf8_To_Utf16
	mov	BYTE PTR _res$[ebp], al
; Line 278
	mov	eax, DWORD PTR _destLen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	call	?ReleaseBuf_SetEnd@UString@@QAEXI@Z	; UString::ReleaseBuf_SetEnd
; Line 279
	mov	al, BYTE PTR _res$[ebp]
; Line 280
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@ConvertUTF
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN5@ConvertUTF:
	DD	1
	DD	$LN4@ConvertUTF
$LN4@ConvertUTF:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@ConvertUTF
$LN3@ConvertUTF:
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	76					; 0000004cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
?ConvertUTF8ToUnicode@@YG_NABVAString@@AAVUString@@@Z ENDP ; ConvertUTF8ToUnicode
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Len@AString@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Len@AString@@QBEIXZ PROC				; AString::Len, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 234
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Len@AString@@QBEIXZ ENDP				; AString::Len
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??BAString@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BAString@@QBEPBDXZ PROC				; AString::operator char const *, COMDAT
; _this$ = ecx
; Line 238
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??BAString@@QBEPBDXZ ENDP				; AString::operator char const *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Ptr@AString@@QBEPBDI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pos$ = 8						; size = 4
?Ptr@AString@@QBEPBDI@Z PROC				; AString::Ptr, COMDAT
; _this$ = ecx
; Line 240
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	add	eax, DWORD PTR _pos$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?Ptr@AString@@QBEPBDI@Z ENDP				; AString::Ptr
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Empty@UString@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Empty@UString@@QAEXXZ PROC				; UString::Empty, COMDAT
; _this$ = ecx
; Line 474
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	xor	eax, eax
	mov	WORD PTR [edx], ax
	mov	esp, ebp
	pop	ebp
	ret	0
?Empty@UString@@QAEXXZ ENDP				; UString::Empty
_TEXT	ENDS
EXTRN	?ReAlloc2@UString@@AAEXI@Z:PROC			; UString::ReAlloc2
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetBuf@UString@@QAEPA_WI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_minLen$ = 8						; size = 4
?GetBuf@UString@@QAEPA_WI@Z PROC			; UString::GetBuf, COMDAT
; _this$ = ecx
; Line 485
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 486
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _minLen$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	SHORT $LN1@GetBuf
; Line 487
	mov	edx, DWORD PTR _minLen$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReAlloc2@UString@@AAEXI@Z		; UString::ReAlloc2
$LN1@GetBuf:
; Line 488
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
; Line 489
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetBuf@UString@@QAEPA_WI@Z ENDP			; UString::GetBuf
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReleaseBuf_SetEnd@UString@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newLen$ = 8						; size = 4
?ReleaseBuf_SetEnd@UString@@QAEXI@Z PROC		; UString::ReleaseBuf_SetEnd, COMDAT
; _this$ = ecx
; Line 501
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newLen$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	xor	ecx, ecx
	mov	edx, DWORD PTR _newLen$[ebp]
	mov	WORD PTR [eax+edx*2], cx
	mov	esp, ebp
	pop	ebp
	ret	4
?ReleaseBuf_SetEnd@UString@@QAEXI@Z ENDP		; UString::ReleaseBuf_SetEnd
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
_TEXT	SEGMENT
_c2$67130 = -17						; size = 1
_val$67126 = -16					; size = 4
_numBytes$67113 = -12					; size = 4
_c$67105 = -6						; size = 1
_ok$ = -5						; size = 1
_destPos$ = -4						; size = 4
_dest$ = 8						; size = 4
_destLen$ = 12						; size = 4
_src$ = 16						; size = 4
_srcLim$ = 20						; size = 4
?Utf8_To_Utf16@@YG_NPA_WPAIPBD2@Z PROC			; Utf8_To_Utf16
; File c:\workspace\7z1505-src\cpp\common\utfconvert.cpp
; Line 80
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 81
	mov	DWORD PTR _destPos$[ebp], 0
; Line 82
	mov	BYTE PTR _ok$[ebp], 1
$LN32@Utf8_To_Ut:
; Line 87
	mov	eax, DWORD PTR _src$[ebp]
	cmp	eax, DWORD PTR _srcLim$[ebp]
	jne	SHORT $LN30@Utf8_To_Ut
; Line 89
	mov	ecx, DWORD PTR _destLen$[ebp]
	mov	edx, DWORD PTR _destPos$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 90
	mov	al, BYTE PTR _ok$[ebp]
	jmp	$LN33@Utf8_To_Ut
$LN30@Utf8_To_Ut:
; Line 92
	mov	eax, DWORD PTR _src$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c$67105[ebp], cl
	mov	edx, DWORD PTR _src$[ebp]
	add	edx, 1
	mov	DWORD PTR _src$[ebp], edx
; Line 94
	movzx	eax, BYTE PTR _c$67105[ebp]
	cmp	eax, 128				; 00000080H
	jge	SHORT $LN29@Utf8_To_Ut
; Line 96
	cmp	DWORD PTR _dest$[ebp], 0
	je	SHORT $LN28@Utf8_To_Ut
; Line 97
	movzx	cx, BYTE PTR _c$67105[ebp]
	mov	edx, DWORD PTR _destPos$[ebp]
	mov	eax, DWORD PTR _dest$[ebp]
	mov	WORD PTR [eax+edx*2], cx
$LN28@Utf8_To_Ut:
; Line 98
	mov	ecx, DWORD PTR _destPos$[ebp]
	add	ecx, 1
	mov	DWORD PTR _destPos$[ebp], ecx
; Line 99
	jmp	SHORT $LN32@Utf8_To_Ut
$LN29@Utf8_To_Ut:
; Line 101
	movzx	edx, BYTE PTR _c$67105[ebp]
	cmp	edx, 192				; 000000c0H
	jge	SHORT $LN27@Utf8_To_Ut
; Line 102
	cmp	DWORD PTR _dest$[ebp], 0
	je	SHORT $LN26@Utf8_To_Ut
	mov	eax, 65533				; 0000fffdH
	mov	ecx, DWORD PTR _destPos$[ebp]
	mov	edx, DWORD PTR _dest$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
$LN26@Utf8_To_Ut:
	mov	eax, DWORD PTR _destPos$[ebp]
	add	eax, 1
	mov	DWORD PTR _destPos$[ebp], eax
	mov	BYTE PTR _ok$[ebp], 0
	jmp	$LN32@Utf8_To_Ut
$LN27@Utf8_To_Ut:
; Line 105
	movzx	ecx, BYTE PTR _c$67105[ebp]
	cmp	ecx, 224				; 000000e0H
	jge	SHORT $LN25@Utf8_To_Ut
	mov	DWORD PTR _numBytes$67113[ebp], 1
	movzx	edx, BYTE PTR _c$67105[ebp]
	sub	edx, 192				; 000000c0H
	mov	BYTE PTR _c$67105[ebp], dl
	jmp	$LN24@Utf8_To_Ut
$LN25@Utf8_To_Ut:
	movzx	eax, BYTE PTR _c$67105[ebp]
	cmp	eax, 240				; 000000f0H
	jge	SHORT $LN23@Utf8_To_Ut
	mov	DWORD PTR _numBytes$67113[ebp], 2
	movzx	ecx, BYTE PTR _c$67105[ebp]
	sub	ecx, 224				; 000000e0H
	mov	BYTE PTR _c$67105[ebp], cl
	jmp	$LN24@Utf8_To_Ut
$LN23@Utf8_To_Ut:
	movzx	edx, BYTE PTR _c$67105[ebp]
	cmp	edx, 248				; 000000f8H
	jge	SHORT $LN21@Utf8_To_Ut
	mov	DWORD PTR _numBytes$67113[ebp], 3
	movzx	eax, BYTE PTR _c$67105[ebp]
	sub	eax, 240				; 000000f0H
	mov	BYTE PTR _c$67105[ebp], al
	jmp	SHORT $LN24@Utf8_To_Ut
$LN21@Utf8_To_Ut:
	movzx	ecx, BYTE PTR _c$67105[ebp]
	cmp	ecx, 252				; 000000fcH
	jge	SHORT $LN19@Utf8_To_Ut
	mov	DWORD PTR _numBytes$67113[ebp], 4
	movzx	edx, BYTE PTR _c$67105[ebp]
	sub	edx, 248				; 000000f8H
	mov	BYTE PTR _c$67105[ebp], dl
	jmp	SHORT $LN24@Utf8_To_Ut
$LN19@Utf8_To_Ut:
	movzx	eax, BYTE PTR _c$67105[ebp]
	cmp	eax, 254				; 000000feH
	jge	SHORT $LN17@Utf8_To_Ut
	mov	DWORD PTR _numBytes$67113[ebp], 5
	movzx	ecx, BYTE PTR _c$67105[ebp]
	sub	ecx, 252				; 000000fcH
	mov	BYTE PTR _c$67105[ebp], cl
; Line 106
	jmp	SHORT $LN24@Utf8_To_Ut
$LN17@Utf8_To_Ut:
; Line 107
	cmp	DWORD PTR _dest$[ebp], 0
	je	SHORT $LN15@Utf8_To_Ut
	mov	edx, 65533				; 0000fffdH
	mov	eax, DWORD PTR _destPos$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	WORD PTR [ecx+eax*2], dx
$LN15@Utf8_To_Ut:
	mov	edx, DWORD PTR _destPos$[ebp]
	add	edx, 1
	mov	DWORD PTR _destPos$[ebp], edx
	mov	BYTE PTR _ok$[ebp], 0
	jmp	$LN32@Utf8_To_Ut
$LN24@Utf8_To_Ut:
; Line 109
	movzx	eax, BYTE PTR _c$67105[ebp]
	mov	DWORD PTR _val$67126[ebp], eax
$LN14@Utf8_To_Ut:
; Line 114
	mov	ecx, DWORD PTR _src$[ebp]
	cmp	ecx, DWORD PTR _srcLim$[ebp]
	jne	SHORT $LN11@Utf8_To_Ut
; Line 115
	jmp	SHORT $LN12@Utf8_To_Ut
$LN11@Utf8_To_Ut:
; Line 116
	mov	edx, DWORD PTR _src$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR _c2$67130[ebp], al
; Line 117
	movzx	ecx, BYTE PTR _c2$67130[ebp]
	cmp	ecx, 128				; 00000080H
	jl	SHORT $LN9@Utf8_To_Ut
	movzx	edx, BYTE PTR _c2$67130[ebp]
	cmp	edx, 192				; 000000c0H
	jl	SHORT $LN10@Utf8_To_Ut
$LN9@Utf8_To_Ut:
; Line 118
	jmp	SHORT $LN12@Utf8_To_Ut
$LN10@Utf8_To_Ut:
; Line 119
	mov	eax, DWORD PTR _src$[ebp]
	add	eax, 1
	mov	DWORD PTR _src$[ebp], eax
; Line 120
	mov	ecx, DWORD PTR _val$67126[ebp]
	shl	ecx, 6
	mov	DWORD PTR _val$67126[ebp], ecx
; Line 121
	movzx	edx, BYTE PTR _c2$67130[ebp]
	sub	edx, 128				; 00000080H
	or	edx, DWORD PTR _val$67126[ebp]
	mov	DWORD PTR _val$67126[ebp], edx
; Line 123
	mov	eax, DWORD PTR _numBytes$67113[ebp]
	sub	eax, 1
	mov	DWORD PTR _numBytes$67113[ebp], eax
	jne	SHORT $LN14@Utf8_To_Ut
$LN12@Utf8_To_Ut:
; Line 125
	cmp	DWORD PTR _numBytes$67113[ebp], 0
	je	SHORT $LN8@Utf8_To_Ut
; Line 126
	cmp	DWORD PTR _dest$[ebp], 0
	je	SHORT $LN7@Utf8_To_Ut
	mov	ecx, 65533				; 0000fffdH
	mov	edx, DWORD PTR _destPos$[ebp]
	mov	eax, DWORD PTR _dest$[ebp]
	mov	WORD PTR [eax+edx*2], cx
$LN7@Utf8_To_Ut:
	mov	ecx, DWORD PTR _destPos$[ebp]
	add	ecx, 1
	mov	DWORD PTR _destPos$[ebp], ecx
	mov	BYTE PTR _ok$[ebp], 0
	jmp	$LN32@Utf8_To_Ut
$LN8@Utf8_To_Ut:
; Line 128
	cmp	DWORD PTR _val$67126[ebp], 65536	; 00010000H
	jae	SHORT $LN6@Utf8_To_Ut
; Line 130
	cmp	DWORD PTR _dest$[ebp], 0
	je	SHORT $LN5@Utf8_To_Ut
; Line 131
	mov	edx, DWORD PTR _destPos$[ebp]
	mov	eax, DWORD PTR _dest$[ebp]
	mov	cx, WORD PTR _val$67126[ebp]
	mov	WORD PTR [eax+edx*2], cx
$LN5@Utf8_To_Ut:
; Line 132
	mov	edx, DWORD PTR _destPos$[ebp]
	add	edx, 1
	mov	DWORD PTR _destPos$[ebp], edx
; Line 134
	jmp	SHORT $LN4@Utf8_To_Ut
$LN6@Utf8_To_Ut:
; Line 136
	mov	eax, DWORD PTR _val$67126[ebp]
	sub	eax, 65536				; 00010000H
	mov	DWORD PTR _val$67126[ebp], eax
; Line 137
	cmp	DWORD PTR _val$67126[ebp], 1048576	; 00100000H
	jb	SHORT $LN3@Utf8_To_Ut
; Line 138
	cmp	DWORD PTR _dest$[ebp], 0
	je	SHORT $LN2@Utf8_To_Ut
	mov	ecx, 65533				; 0000fffdH
	mov	edx, DWORD PTR _destPos$[ebp]
	mov	eax, DWORD PTR _dest$[ebp]
	mov	WORD PTR [eax+edx*2], cx
$LN2@Utf8_To_Ut:
	mov	ecx, DWORD PTR _destPos$[ebp]
	add	ecx, 1
	mov	DWORD PTR _destPos$[ebp], ecx
	mov	BYTE PTR _ok$[ebp], 0
	jmp	$LN32@Utf8_To_Ut
$LN3@Utf8_To_Ut:
; Line 139
	cmp	DWORD PTR _dest$[ebp], 0
	je	SHORT $LN1@Utf8_To_Ut
; Line 141
	mov	edx, DWORD PTR _val$67126[ebp]
	shr	edx, 10					; 0000000aH
	add	edx, 55296				; 0000d800H
	mov	eax, DWORD PTR _destPos$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	WORD PTR [ecx+eax*2], dx
; Line 142
	mov	edx, DWORD PTR _val$67126[ebp]
	and	edx, 1023				; 000003ffH
	add	edx, 56320				; 0000dc00H
	mov	eax, DWORD PTR _destPos$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	WORD PTR [ecx+eax*2+2], dx
$LN1@Utf8_To_Ut:
; Line 144
	mov	edx, DWORD PTR _destPos$[ebp]
	add	edx, 2
	mov	DWORD PTR _destPos$[ebp], edx
$LN4@Utf8_To_Ut:
; Line 146
	jmp	$LN32@Utf8_To_Ut
$LN33@Utf8_To_Ut:
; Line 147
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Utf8_To_Utf16@@YG_NPA_WPAIPBD2@Z ENDP			; Utf8_To_Utf16
_TEXT	ENDS
PUBLIC	?ReleaseBuf_SetEnd@AString@@QAEXI@Z		; AString::ReleaseBuf_SetEnd
PUBLIC	?GetBuf@AString@@QAEPADI@Z			; AString::GetBuf
PUBLIC	??BUString@@QBEPB_WXZ				; UString::operator wchar_t const *
PUBLIC	?Ptr@UString@@QBEPB_WI@Z			; UString::Ptr
PUBLIC	?Len@UString@@QBEIXZ				; UString::Len
PUBLIC	?Empty@AString@@QAEXXZ				; AString::Empty
PUBLIC	?ConvertUnicodeToUTF8@@YGXABVUString@@AAVAString@@@Z ; ConvertUnicodeToUTF8
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_destLen$ = -4						; size = 4
_src$ = 8						; size = 4
_dest$ = 12						; size = 4
?ConvertUnicodeToUTF8@@YGXABVUString@@AAVAString@@@Z PROC ; ConvertUnicodeToUTF8
; Line 283
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 284
	mov	ecx, DWORD PTR _dest$[ebp]
	call	?Empty@AString@@QAEXXZ			; AString::Empty
; Line 285
	mov	ecx, DWORD PTR _src$[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	push	eax
	mov	ecx, DWORD PTR _src$[ebp]
	call	?Ptr@UString@@QBEPB_WI@Z		; UString::Ptr
	push	eax
	mov	ecx, DWORD PTR _src$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	?Utf16_To_Utf8_Calc@@YGIPB_W0@Z		; Utf16_To_Utf8_Calc
	mov	DWORD PTR _destLen$[ebp], eax
; Line 286
	mov	ecx, DWORD PTR _src$[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	push	eax
	mov	ecx, DWORD PTR _src$[ebp]
	call	?Ptr@UString@@QBEPB_WI@Z		; UString::Ptr
	push	eax
	mov	ecx, DWORD PTR _src$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	mov	eax, DWORD PTR _destLen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	call	?GetBuf@AString@@QAEPADI@Z		; AString::GetBuf
	push	eax
	call	?Utf16_To_Utf8@@YGPADPADPB_W1@Z		; Utf16_To_Utf8
; Line 287
	mov	ecx, DWORD PTR _destLen$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _dest$[ebp]
	call	?ReleaseBuf_SetEnd@AString@@QAEXI@Z	; AString::ReleaseBuf_SetEnd
; Line 288
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?ConvertUnicodeToUTF8@@YGXABVUString@@AAVAString@@@Z ENDP ; ConvertUnicodeToUTF8
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Empty@AString@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Empty@AString@@QAEXXZ PROC				; AString::Empty, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 236
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	BYTE PTR [edx], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Empty@AString@@QAEXXZ ENDP				; AString::Empty
_TEXT	ENDS
EXTRN	?ReAlloc2@AString@@AAEXI@Z:PROC			; AString::ReAlloc2
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetBuf@AString@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_minLen$ = 8						; size = 4
?GetBuf@AString@@QAEPADI@Z PROC				; AString::GetBuf, COMDAT
; _this$ = ecx
; Line 250
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 251
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _minLen$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	SHORT $LN1@GetBuf@2
; Line 252
	mov	edx, DWORD PTR _minLen$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReAlloc2@AString@@AAEXI@Z		; AString::ReAlloc2
$LN1@GetBuf@2:
; Line 253
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
; Line 254
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetBuf@AString@@QAEPADI@Z ENDP				; AString::GetBuf
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReleaseBuf_SetEnd@AString@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newLen$ = 8						; size = 4
?ReleaseBuf_SetEnd@AString@@QAEXI@Z PROC		; AString::ReleaseBuf_SetEnd, COMDAT
; _this$ = ecx
; Line 266
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newLen$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _newLen$[ebp]
	mov	BYTE PTR [eax+ecx], 0
	mov	esp, ebp
	pop	ebp
	ret	4
?ReleaseBuf_SetEnd@AString@@QAEXI@Z ENDP		; AString::ReleaseBuf_SetEnd
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Len@UString@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Len@UString@@QBEIXZ PROC				; UString::Len, COMDAT
; _this$ = ecx
; Line 472
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Len@UString@@QBEIXZ ENDP				; UString::Len
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??BUString@@QBEPB_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BUString@@QBEPB_WXZ PROC				; UString::operator wchar_t const *, COMDAT
; _this$ = ecx
; Line 476
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??BUString@@QBEPB_WXZ ENDP				; UString::operator wchar_t const *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Ptr@UString@@QBEPB_WI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pos$ = 8						; size = 4
?Ptr@UString@@QBEPB_WI@Z PROC				; UString::Ptr, COMDAT
; _this$ = ecx
; Line 478
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pos$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	mov	esp, ebp
	pop	ebp
	ret	4
?Ptr@UString@@QBEPB_WI@Z ENDP				; UString::Ptr
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
_TEXT	SEGMENT
_c2$67161 = -12						; size = 4
_val$67156 = -8						; size = 4
_size$ = -4						; size = 4
_src$ = 8						; size = 4
_srcLim$ = 12						; size = 4
?Utf16_To_Utf8_Calc@@YGIPB_W0@Z PROC			; Utf16_To_Utf8_Calc
; File c:\workspace\7z1505-src\cpp\common\utfconvert.cpp
; Line 155
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 156
	mov	eax, DWORD PTR _srcLim$[ebp]
	sub	eax, DWORD PTR _src$[ebp]
	sar	eax, 1
	mov	DWORD PTR _size$[ebp], eax
$LN7@Utf16_To_U:
; Line 159
	mov	ecx, DWORD PTR _src$[ebp]
	cmp	ecx, DWORD PTR _srcLim$[ebp]
	jne	SHORT $LN5@Utf16_To_U
; Line 160
	mov	eax, DWORD PTR _size$[ebp]
	jmp	$LN8@Utf16_To_U
$LN5@Utf16_To_U:
; Line 162
	mov	edx, DWORD PTR _src$[ebp]
	movzx	eax, WORD PTR [edx]
	mov	DWORD PTR _val$67156[ebp], eax
	mov	ecx, DWORD PTR _src$[ebp]
	add	ecx, 2
	mov	DWORD PTR _src$[ebp], ecx
; Line 164
	cmp	DWORD PTR _val$67156[ebp], 128		; 00000080H
	jae	SHORT $LN4@Utf16_To_U
; Line 165
	jmp	SHORT $LN7@Utf16_To_U
$LN4@Utf16_To_U:
; Line 167
	cmp	DWORD PTR _val$67156[ebp], 2048		; 00000800H
	jae	SHORT $LN3@Utf16_To_U
; Line 169
	mov	edx, DWORD PTR _size$[ebp]
	add	edx, 1
	mov	DWORD PTR _size$[ebp], edx
; Line 170
	jmp	SHORT $LN7@Utf16_To_U
$LN3@Utf16_To_U:
; Line 173
	cmp	DWORD PTR _val$67156[ebp], 55296	; 0000d800H
	jb	SHORT $LN2@Utf16_To_U
	cmp	DWORD PTR _val$67156[ebp], 56320	; 0000dc00H
	jae	SHORT $LN2@Utf16_To_U
	mov	eax, DWORD PTR _src$[ebp]
	cmp	eax, DWORD PTR _srcLim$[ebp]
	je	SHORT $LN2@Utf16_To_U
; Line 175
	mov	ecx, DWORD PTR _src$[ebp]
	movzx	edx, WORD PTR [ecx]
	mov	DWORD PTR _c2$67161[ebp], edx
; Line 176
	cmp	DWORD PTR _c2$67161[ebp], 56320		; 0000dc00H
	jb	SHORT $LN2@Utf16_To_U
	cmp	DWORD PTR _c2$67161[ebp], 57344		; 0000e000H
	jae	SHORT $LN2@Utf16_To_U
; Line 178
	mov	eax, DWORD PTR _src$[ebp]
	add	eax, 2
	mov	DWORD PTR _src$[ebp], eax
; Line 179
	mov	ecx, DWORD PTR _size$[ebp]
	add	ecx, 2
	mov	DWORD PTR _size$[ebp], ecx
; Line 180
	jmp	$LN7@Utf16_To_U
$LN2@Utf16_To_U:
; Line 186
	mov	edx, DWORD PTR _size$[ebp]
	add	edx, 2
	mov	DWORD PTR _size$[ebp], edx
; Line 197
	jmp	$LN7@Utf16_To_U
$LN8@Utf16_To_U:
; Line 198
	mov	esp, ebp
	pop	ebp
	ret	8
?Utf16_To_Utf8_Calc@@YGIPB_W0@Z ENDP			; Utf16_To_Utf8_Calc
; Function compile flags: /Odtp /RTCsu
_c2$67180 = -8						; size = 4
_val$67172 = -4						; size = 4
_dest$ = 8						; size = 4
_src$ = 12						; size = 4
_srcLim$ = 16						; size = 4
?Utf16_To_Utf8@@YGPADPADPB_W1@Z PROC			; Utf16_To_Utf8
; Line 201
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
$LN7@Utf16_To_U@2:
; Line 204
	mov	eax, DWORD PTR _src$[ebp]
	cmp	eax, DWORD PTR _srcLim$[ebp]
	jne	SHORT $LN5@Utf16_To_U@2
; Line 205
	mov	eax, DWORD PTR _dest$[ebp]
	jmp	$LN8@Utf16_To_U@2
$LN5@Utf16_To_U@2:
; Line 207
	mov	ecx, DWORD PTR _src$[ebp]
	movzx	edx, WORD PTR [ecx]
	mov	DWORD PTR _val$67172[ebp], edx
	mov	eax, DWORD PTR _src$[ebp]
	add	eax, 2
	mov	DWORD PTR _src$[ebp], eax
; Line 209
	cmp	DWORD PTR _val$67172[ebp], 128		; 00000080H
	jae	SHORT $LN4@Utf16_To_U@2
; Line 211
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	dl, BYTE PTR _val$67172[ebp]
	mov	BYTE PTR [ecx], dl
	mov	eax, DWORD PTR _dest$[ebp]
	add	eax, 1
	mov	DWORD PTR _dest$[ebp], eax
; Line 212
	jmp	SHORT $LN7@Utf16_To_U@2
$LN4@Utf16_To_U@2:
; Line 215
	cmp	DWORD PTR _val$67172[ebp], 2048		; 00000800H
	jae	SHORT $LN3@Utf16_To_U@2
; Line 217
	mov	ecx, DWORD PTR _val$67172[ebp]
	shr	ecx, 6
	add	ecx, 192				; 000000c0H
	mov	edx, DWORD PTR _dest$[ebp]
	mov	BYTE PTR [edx], cl
; Line 218
	mov	eax, DWORD PTR _val$67172[ebp]
	and	eax, 63					; 0000003fH
	add	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	BYTE PTR [ecx+1], al
; Line 219
	mov	edx, DWORD PTR _dest$[ebp]
	add	edx, 2
	mov	DWORD PTR _dest$[ebp], edx
; Line 220
	jmp	SHORT $LN7@Utf16_To_U@2
$LN3@Utf16_To_U@2:
; Line 223
	cmp	DWORD PTR _val$67172[ebp], 55296	; 0000d800H
	jb	$LN2@Utf16_To_U@2
	cmp	DWORD PTR _val$67172[ebp], 56320	; 0000dc00H
	jae	$LN2@Utf16_To_U@2
	mov	eax, DWORD PTR _src$[ebp]
	cmp	eax, DWORD PTR _srcLim$[ebp]
	je	$LN2@Utf16_To_U@2
; Line 225
	mov	ecx, DWORD PTR _src$[ebp]
	movzx	edx, WORD PTR [ecx]
	mov	DWORD PTR _c2$67180[ebp], edx
; Line 226
	cmp	DWORD PTR _c2$67180[ebp], 56320		; 0000dc00H
	jb	$LN2@Utf16_To_U@2
	cmp	DWORD PTR _c2$67180[ebp], 57344		; 0000e000H
	jae	$LN2@Utf16_To_U@2
; Line 228
	mov	eax, DWORD PTR _src$[ebp]
	add	eax, 2
	mov	DWORD PTR _src$[ebp], eax
; Line 229
	mov	ecx, DWORD PTR _val$67172[ebp]
	sub	ecx, 55296				; 0000d800H
	shl	ecx, 10					; 0000000aH
	mov	edx, DWORD PTR _c2$67180[ebp]
	sub	edx, 56320				; 0000dc00H
	or	ecx, edx
	add	ecx, 65536				; 00010000H
	mov	DWORD PTR _val$67172[ebp], ecx
; Line 230
	mov	eax, DWORD PTR _val$67172[ebp]
	shr	eax, 18					; 00000012H
	add	eax, 240				; 000000f0H
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	BYTE PTR [ecx], al
; Line 231
	mov	edx, DWORD PTR _val$67172[ebp]
	shr	edx, 12					; 0000000cH
	and	edx, 63					; 0000003fH
	add	edx, 128				; 00000080H
	mov	eax, DWORD PTR _dest$[ebp]
	mov	BYTE PTR [eax+1], dl
; Line 232
	mov	ecx, DWORD PTR _val$67172[ebp]
	shr	ecx, 6
	and	ecx, 63					; 0000003fH
	add	ecx, 128				; 00000080H
	mov	edx, DWORD PTR _dest$[ebp]
	mov	BYTE PTR [edx+2], cl
; Line 233
	mov	eax, DWORD PTR _val$67172[ebp]
	and	eax, 63					; 0000003fH
	add	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	BYTE PTR [ecx+3], al
; Line 234
	mov	edx, DWORD PTR _dest$[ebp]
	add	edx, 4
	mov	DWORD PTR _dest$[ebp], edx
; Line 235
	jmp	$LN7@Utf16_To_U@2
$LN2@Utf16_To_U@2:
; Line 243
	mov	eax, DWORD PTR _val$67172[ebp]
	shr	eax, 12					; 0000000cH
	add	eax, 224				; 000000e0H
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	BYTE PTR [ecx], al
; Line 244
	mov	edx, DWORD PTR _val$67172[ebp]
	shr	edx, 6
	and	edx, 63					; 0000003fH
	add	edx, 128				; 00000080H
	mov	eax, DWORD PTR _dest$[ebp]
	mov	BYTE PTR [eax+1], dl
; Line 245
	mov	ecx, DWORD PTR _val$67172[ebp]
	and	ecx, 63					; 0000003fH
	add	ecx, 128				; 00000080H
	mov	edx, DWORD PTR _dest$[ebp]
	mov	BYTE PTR [edx+2], cl
; Line 246
	mov	eax, DWORD PTR _dest$[ebp]
	add	eax, 3
	mov	DWORD PTR _dest$[ebp], eax
; Line 247
	jmp	$LN7@Utf16_To_U@2
; Line 269
	jmp	$LN7@Utf16_To_U@2
$LN8@Utf16_To_U@2:
; Line 270
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Utf16_To_Utf8@@YGPADPADPB_W1@Z ENDP			; Utf16_To_Utf8
_TEXT	ENDS
END
