; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\CPP\7zip\Common\LimitedStreams.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator->
PUBLIC	??$MyMin@_K@@YG_K_K0@Z				; MyMin<unsigned __int64>
PUBLIC	?Read@CLimitedSequentialInStream@@UAGJPAXIPAI@Z	; CLimitedSequentialInStream::Read
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\cpp\7zip\common\limitedstreams.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
tv77 = -24						; size = 4
_result$ = -20						; size = 4
_sizeToRead$ = -16					; size = 4
_realProcessedSize$ = -8				; size = 4
_this$ = 8						; size = 4
_data$ = 12						; size = 4
_size$ = 16						; size = 4
_processedSize$ = 20					; size = 4
?Read@CLimitedSequentialInStream@@UAGJPAXIPAI@Z PROC	; CLimitedSequentialInStream::Read
; Line 9
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 10
	mov	DWORD PTR _realProcessedSize$[ebp], 0
; Line 11
	mov	eax, DWORD PTR _size$[ebp]
	xor	ecx, ecx
	push	ecx
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	sub	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [edx+20]
	sbb	edx, DWORD PTR [eax+28]
	push	edx
	push	ecx
	call	??$MyMin@_K@@YG_K_K0@Z			; MyMin<unsigned __int64>
	mov	DWORD PTR _sizeToRead$[ebp], eax
; Line 12
	mov	DWORD PTR _result$[ebp], 0
; Line 13
	cmp	DWORD PTR _sizeToRead$[ebp], 0
	jbe	SHORT $LN3@Read
; Line 15
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator->
	mov	DWORD PTR tv77[ebp], eax
	mov	esi, esp
	lea	eax, DWORD PTR _realProcessedSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sizeToRead$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	mov	eax, DWORD PTR tv77[ebp]
	push	eax
	mov	ecx, DWORD PTR tv77[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
; Line 16
	mov	ecx, DWORD PTR _realProcessedSize$[ebp]
	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+24]
	adc	edx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], ecx
	mov	DWORD PTR [eax+28], edx
; Line 17
	cmp	DWORD PTR _realProcessedSize$[ebp], 0
	jne	SHORT $LN3@Read
; Line 18
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+32], 1
$LN3@Read:
; Line 20
	cmp	DWORD PTR _processedSize$[ebp], 0
	je	SHORT $LN1@Read
; Line 21
	mov	edx, DWORD PTR _processedSize$[ebp]
	mov	eax, DWORD PTR _realProcessedSize$[ebp]
	mov	DWORD PTR [edx], eax
$LN1@Read:
; Line 22
	mov	eax, DWORD PTR _result$[ebp]
; Line 23
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@Read
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN8@Read:
	DD	1
	DD	$LN7@Read
$LN7@Read:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN6@Read
$LN6@Read:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
?Read@CLimitedSequentialInStream@@UAGJPAXIPAI@Z ENDP	; CLimitedSequentialInStream::Read
_TEXT	ENDS
PUBLIC	??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->
PUBLIC	?SeekToPhys@CLimitedInStream@@AAEJXZ		; CLimitedInStream::SeekToPhys
PUBLIC	?Read@CLimitedInStream@@UAGJPAXIPAI@Z		; CLimitedInStream::Read
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv91 = -48						; size = 4
tv182 = -44						; size = 4
tv165 = -40						; size = 8
tv144 = -32						; size = 4
tv143 = -28						; size = 4
_res$ = -24						; size = 4
___result_$67364 = -20					; size = 4
_newPos$ = -16						; size = 8
_rem$ = -8						; size = 8
_this$ = 8						; size = 4
_data$ = 12						; size = 4
_size$ = 16						; size = 4
_processedSize$ = 20					; size = 4
?Read@CLimitedInStream@@UAGJPAXIPAI@Z PROC		; CLimitedInStream::Read
; Line 26
	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 27
	cmp	DWORD PTR _processedSize$[ebp], 0
	je	SHORT $LN6@Read@2
; Line 28
	mov	eax, DWORD PTR _processedSize$[ebp]
	mov	DWORD PTR [eax], 0
$LN6@Read@2:
; Line 29
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv143[ebp], ecx
	mov	DWORD PTR tv144[ebp], edx
	mov	eax, DWORD PTR tv143[ebp]
	mov	ecx, DWORD PTR tv144[ebp]
	mov	edx, DWORD PTR [eax+20]
	cmp	edx, DWORD PTR [ecx+36]
	jb	SHORT $LN5@Read@2
	ja	SHORT $LN9@Read@2
	mov	eax, DWORD PTR tv143[ebp]
	mov	ecx, DWORD PTR tv144[ebp]
	mov	edx, DWORD PTR [eax+16]
	cmp	edx, DWORD PTR [ecx+32]
	jb	SHORT $LN5@Read@2
$LN9@Read@2:
; Line 32
	xor	eax, eax
	jmp	$LN7@Read@2
$LN5@Read@2:
; Line 35
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+32]
	sub	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [eax+36]
	sbb	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR _rem$[ebp], edx
	mov	DWORD PTR _rem$[ebp+4], eax
; Line 36
	mov	ecx, DWORD PTR _size$[ebp]
	xor	edx, edx
	mov	DWORD PTR tv165[ebp], ecx
	mov	DWORD PTR tv165[ebp+4], edx
	mov	eax, DWORD PTR _rem$[ebp+4]
	cmp	eax, DWORD PTR tv165[ebp+4]
	ja	SHORT $LN4@Read@2
	jb	SHORT $LN10@Read@2
	mov	ecx, DWORD PTR _rem$[ebp]
	cmp	ecx, DWORD PTR tv165[ebp]
	jae	SHORT $LN4@Read@2
$LN10@Read@2:
; Line 37
	mov	edx, DWORD PTR _rem$[ebp]
	mov	DWORD PTR _size$[ebp], edx
$LN4@Read@2:
; Line 38
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+40]
	add	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [eax+44]
	adc	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR _newPos$[ebp], edx
	mov	DWORD PTR _newPos$[ebp+4], eax
; Line 39
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv182[ebp], ecx
	mov	edx, DWORD PTR tv182[ebp]
	mov	eax, DWORD PTR _newPos$[ebp]
	cmp	eax, DWORD PTR [edx+24]
	jne	SHORT $LN11@Read@2
	mov	ecx, DWORD PTR tv182[ebp]
	mov	edx, DWORD PTR _newPos$[ebp+4]
	cmp	edx, DWORD PTR [ecx+28]
	je	SHORT $LN3@Read@2
$LN11@Read@2:
; Line 41
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newPos$[ebp]
	mov	DWORD PTR [eax+24], ecx
	mov	edx, DWORD PTR _newPos$[ebp+4]
	mov	DWORD PTR [eax+28], edx
; Line 42
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SeekToPhys@CLimitedInStream@@AAEJXZ	; CLimitedInStream::SeekToPhys
	mov	DWORD PTR ___result_$67364[ebp], eax
	cmp	DWORD PTR ___result_$67364[ebp], 0
	je	SHORT $LN3@Read@2
	mov	eax, DWORD PTR ___result_$67364[ebp]
	jmp	SHORT $LN7@Read@2
$LN3@Read@2:
; Line 44
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->
	mov	DWORD PTR tv91[ebp], eax
	mov	esi, esp
	lea	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	mov	eax, DWORD PTR tv91[ebp]
	push	eax
	mov	ecx, DWORD PTR tv91[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _res$[ebp], eax
; Line 45
	cmp	DWORD PTR _processedSize$[ebp], 0
	je	SHORT $LN1@Read@2
; Line 46
	mov	ecx, DWORD PTR _processedSize$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx], edx
$LN1@Read@2:
; Line 47
	mov	eax, DWORD PTR _size$[ebp]
	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [edx+24]
	adc	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+24], eax
	mov	DWORD PTR [edx+28], ecx
; Line 48
	mov	eax, DWORD PTR _size$[ebp]
	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [edx+16]
	adc	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], eax
	mov	DWORD PTR [edx+20], ecx
; Line 49
	mov	eax, DWORD PTR _res$[ebp]
$LN7@Read@2:
; Line 50
	pop	edi
	pop	esi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Read@CLimitedInStream@@UAGJPAXIPAI@Z ENDP		; CLimitedInStream::Read
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SeekToPhys@CLimitedInStream@@AAEJXZ
_TEXT	SEGMENT
tv68 = -8						; size = 4
_this$ = -4						; size = 4
?SeekToPhys@CLimitedInStream@@AAEJXZ PROC		; CLimitedInStream::SeekToPhys, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\limitedstreams.h
; Line 46
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->
	mov	DWORD PTR tv68[ebp], eax
	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR [eax+24]
	push	edx
	mov	eax, DWORD PTR tv68[ebp]
	push	eax
	mov	ecx, DWORD PTR tv68[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?SeekToPhys@CLimitedInStream@@AAEJXZ ENDP		; CLimitedInStream::SeekToPhys
_TEXT	ENDS
PUBLIC	?Seek@CLimitedInStream@@UAGJ_JIPA_K@Z		; CLimitedInStream::Seek
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv64 = -4						; size = 4
_this$ = 8						; size = 4
_offset$ = 12						; size = 8
_seekOrigin$ = 20					; size = 4
_newPosition$ = 24					; size = 4
?Seek@CLimitedInStream@@UAGJ_JIPA_K@Z PROC		; CLimitedInStream::Seek
; File c:\workspace\7z1505-src\cpp\7zip\common\limitedstreams.cpp
; Line 53
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 54
	mov	eax, DWORD PTR _seekOrigin$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 0
	je	SHORT $LN6@Seek
	cmp	DWORD PTR tv64[ebp], 1
	je	SHORT $LN5@Seek
	cmp	DWORD PTR tv64[ebp], 2
	je	SHORT $LN4@Seek
	jmp	SHORT $LN3@Seek
$LN6@Seek:
; Line 56
	jmp	SHORT $LN7@Seek
$LN5@Seek:
; Line 57
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _offset$[ebp]
	add	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _offset$[ebp+4]
	adc	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR _offset$[ebp], edx
	mov	DWORD PTR _offset$[ebp+4], eax
	jmp	SHORT $LN7@Seek
$LN4@Seek:
; Line 58
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _offset$[ebp]
	add	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _offset$[ebp+4]
	adc	eax, DWORD PTR [ecx+36]
	mov	DWORD PTR _offset$[ebp], edx
	mov	DWORD PTR _offset$[ebp+4], eax
	jmp	SHORT $LN7@Seek
$LN3@Seek:
; Line 59
	mov	eax, -2147287039			; 80030001H
	jmp	SHORT $LN9@Seek
$LN7@Seek:
; Line 61
	cmp	DWORD PTR _offset$[ebp+4], 0
	jg	SHORT $LN2@Seek
	jl	SHORT $LN11@Seek
	cmp	DWORD PTR _offset$[ebp], 0
	jae	SHORT $LN2@Seek
$LN11@Seek:
; Line 62
	mov	eax, -2147024765			; 80070083H
	jmp	SHORT $LN9@Seek
$LN2@Seek:
; Line 63
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [ecx+16], edx
	mov	eax, DWORD PTR _offset$[ebp+4]
	mov	DWORD PTR [ecx+20], eax
; Line 64
	cmp	DWORD PTR _newPosition$[ebp], 0
	je	SHORT $LN1@Seek
; Line 65
	mov	ecx, DWORD PTR _newPosition$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+4], edx
$LN1@Seek:
; Line 66
	xor	eax, eax
$LN9@Seek:
; Line 67
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?Seek@CLimitedInStream@@UAGJ_JIPA_K@Z ENDP		; CLimitedInStream::Seek
_TEXT	ENDS
PUBLIC	?Detach@?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::Detach
PUBLIC	?SeekToStart@CLimitedInStream@@QAEJXZ		; CLimitedInStream::SeekToStart
PUBLIC	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ	; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
PUBLIC	?InitAndSeek@CLimitedInStream@@QAEJ_K0@Z	; CLimitedInStream::InitAndSeek
PUBLIC	?SetStream@CLimitedInStream@@QAEXPAUIInStream@@@Z ; CLimitedInStream::SetStream
PUBLIC	??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
PUBLIC	??0CLimitedInStream@@QAE@XZ			; CLimitedInStream::CLimitedInStream
PUBLIC	?CreateLimitedInStream@@YGJPAUIInStream@@_K1PAPAUISequentialInStream@@@Z ; CreateLimitedInStream
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
xdata$x	SEGMENT
__unwindtable$?CreateLimitedInStream@@YGJPAUIInStream@@_K1PAPAUISequentialInStream@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateLimitedInStream@@YGJPAUIInStream@@_K1PAPAUISequentialInStream@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateLimitedInStream@@YGJPAUIInStream@@_K1PAPAUISequentialInStream@@@Z$1
__ehfuncinfo$?CreateLimitedInStream@@YGJPAUIInStream@@_K1PAPAUISequentialInStream@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?CreateLimitedInStream@@YGJPAUIInStream@@_K1PAPAUISequentialInStream@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv71 = -52						; size = 4
$T67922 = -48						; size = 4
$T67921 = -44						; size = 4
$T67918 = -40						; size = 4
$T67917 = -36						; size = 4
___result_$67403 = -32					; size = 4
_streamTemp$ = -24					; size = 4
_streamSpec$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_inStream$ = 8						; size = 4
_pos$ = 12						; size = 8
_size$ = 20						; size = 8
_resStream$ = 28					; size = 4
?CreateLimitedInStream@@YGJPAUIInStream@@_K1PAPAUISequentialInStream@@@Z PROC ; CreateLimitedInStream
; Line 70
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateLimitedInStream@@YGJPAUIInStream@@_K1PAPAUISequentialInStream@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 71
	mov	eax, DWORD PTR _resStream$[ebp]
	mov	DWORD PTR [eax], 0
; Line 72
	push	48					; 00000030H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T67918[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T67918[ebp], 0
	je	SHORT $LN4@CreateLimi
	mov	ecx, DWORD PTR $T67918[ebp]
	call	??0CLimitedInStream@@QAE@XZ
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN5@CreateLimi
$LN4@CreateLimi:
	mov	DWORD PTR tv71[ebp], 0
$LN5@CreateLimi:
	mov	ecx, DWORD PTR tv71[ebp]
	mov	DWORD PTR $T67917[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T67917[ebp]
	mov	DWORD PTR _streamSpec$[ebp], edx
; Line 73
	mov	eax, DWORD PTR _streamSpec$[ebp]
	push	eax
	lea	ecx, DWORD PTR _streamTemp$[ebp]
	call	??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 74
	mov	ecx, DWORD PTR _inStream$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _streamSpec$[ebp]
	call	?SetStream@CLimitedInStream@@QAEXPAUIInStream@@@Z ; CLimitedInStream::SetStream
; Line 75
	mov	edx, DWORD PTR _size$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pos$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _pos$[ebp]
	push	edx
	mov	ecx, DWORD PTR _streamSpec$[ebp]
	call	?InitAndSeek@CLimitedInStream@@QAEJ_K0@Z ; CLimitedInStream::InitAndSeek
	mov	DWORD PTR ___result_$67403[ebp], eax
	cmp	DWORD PTR ___result_$67403[ebp], 0
	je	SHORT $LN1@CreateLimi
	mov	eax, DWORD PTR ___result_$67403[ebp]
	mov	DWORD PTR $T67921[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _streamTemp$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T67921[ebp]
	jmp	SHORT $LN2@CreateLimi
$LN1@CreateLimi:
; Line 76
	mov	ecx, DWORD PTR _streamSpec$[ebp]
	call	?SeekToStart@CLimitedInStream@@QAEJXZ	; CLimitedInStream::SeekToStart
; Line 77
	lea	ecx, DWORD PTR _streamTemp$[ebp]
	call	?Detach@?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::Detach
	mov	ecx, DWORD PTR _resStream$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 78
	mov	DWORD PTR $T67922[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _streamTemp$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T67922[ebp]
$LN2@CreateLimi:
; Line 79
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@CreateLimi
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
$LN11@CreateLimi:
	DD	1
	DD	$LN10@CreateLimi
$LN10@CreateLimi:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN8@CreateLimi
$LN8@CreateLimi:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateLimitedInStream@@YGJPAUIInStream@@_K1PAPAUISequentialInStream@@@Z$0:
	mov	eax, DWORD PTR $T67918[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?CreateLimitedInStream@@YGJPAUIInStream@@_K1PAPAUISequentialInStream@@@Z$1:
	lea	ecx, DWORD PTR _streamTemp$[ebp]
	jmp	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
__ehhandler$?CreateLimitedInStream@@YGJPAUIInStream@@_K1PAPAUISequentialInStream@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-48]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateLimitedInStream@@YGJPAUIInStream@@_K1PAPAUISequentialInStream@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateLimitedInStream@@YGJPAUIInStream@@_K1PAPAUISequentialInStream@@@Z ENDP ; CreateLimitedInStream
PUBLIC	??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ; CMyComPtr<IInStream>::operator=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetStream@CLimitedInStream@@QAEXPAUIInStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_stream$ = 8						; size = 4
?SetStream@CLimitedInStream@@QAEXPAUIInStream@@@Z PROC	; CLimitedInStream::SetStream, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\limitedstreams.h
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ; CMyComPtr<IInStream>::operator=
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetStream@CLimitedInStream@@QAEXPAUIInStream@@@Z ENDP	; CLimitedInStream::SetStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?InitAndSeek@CLimitedInStream@@QAEJ_K0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_startOffset$ = 8					; size = 8
_size$ = 16						; size = 8
?InitAndSeek@CLimitedInStream@@QAEJ_K0@Z PROC		; CLimitedInStream::InitAndSeek, COMDAT
; _this$ = ecx
; Line 50
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 51
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _startOffset$[ebp]
	mov	DWORD PTR [eax+40], ecx
	mov	edx, DWORD PTR _startOffset$[ebp+4]
	mov	DWORD PTR [eax+44], edx
; Line 52
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _startOffset$[ebp]
	mov	DWORD PTR [eax+24], ecx
	mov	edx, DWORD PTR _startOffset$[ebp+4]
	mov	DWORD PTR [eax+28], edx
; Line 53
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0
	mov	DWORD PTR [eax+20], 0
; Line 54
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx+32], edx
	mov	eax, DWORD PTR _size$[ebp+4]
	mov	DWORD PTR [ecx+36], eax
; Line 55
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SeekToPhys@CLimitedInStream@@AAEJXZ	; CLimitedInStream::SeekToPhys
; Line 56
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?InitAndSeek@CLimitedInStream@@QAEJ_K0@Z ENDP		; CLimitedInStream::InitAndSeek
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SeekToStart@CLimitedInStream@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SeekToStart@CLimitedInStream@@QAEJXZ PROC		; CLimitedInStream::SeekToStart, COMDAT
; _this$ = ecx
; Line 63
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	push	0
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?SeekToStart@CLimitedInStream@@QAEJXZ ENDP		; CLimitedInStream::SeekToStart
_TEXT	ENDS
PUBLIC	??0?$CMyComPtr@UIInStream@@@@QAE@XZ		; CMyComPtr<IInStream>::CMyComPtr<IInStream>
PUBLIC	??_7CLimitedInStream@@6B@			; CLimitedInStream::`vftable'
PUBLIC	??0CMyUnknownImp@@QAE@XZ			; CMyUnknownImp::CMyUnknownImp
PUBLIC	??0IInStream@@QAE@XZ				; IInStream::IInStream
PUBLIC	??_R4CLimitedInStream@@6B@			; CLimitedInStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCLimitedInStream@@@8			; CLimitedInStream `RTTI Type Descriptor'
PUBLIC	??_R3CLimitedInStream@@8			; CLimitedInStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CLimitedInStream@@8			; CLimitedInStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CLimitedInStream@@8		; CLimitedInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@IInStream@@8			; IInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIInStream@@@8				; IInStream `RTTI Type Descriptor'
PUBLIC	??_R3IInStream@@8				; IInStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IInStream@@8				; IInStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ISequentialInStream@@8		; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUISequentialInStream@@@8			; ISequentialInStream `RTTI Type Descriptor'
PUBLIC	??_R3ISequentialInStream@@8			; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ISequentialInStream@@8			; ISequentialInStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIUnknown@@@8				; IUnknown `RTTI Type Descriptor'
PUBLIC	??_R3IUnknown@@8				; IUnknown::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IUnknown@@8				; IUnknown::`RTTI Base Class Array'
PUBLIC	??_R13?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AVCMyUnknownImp@@@8			; CMyUnknownImp `RTTI Type Descriptor'
PUBLIC	??_R3CMyUnknownImp@@8				; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMyUnknownImp@@8				; CMyUnknownImp::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?QueryInterface@CLimitedInStream@@UAGJABU_GUID@@PAPAX@Z ; CLimitedInStream::QueryInterface
PUBLIC	?AddRef@CLimitedInStream@@UAGKXZ		; CLimitedInStream::AddRef
PUBLIC	?Release@CLimitedInStream@@UAGKXZ		; CLimitedInStream::Release
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_R1A@?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R2CMyUnknownImp@@8
rdata$r	SEGMENT
??_R2CMyUnknownImp@@8 DD FLAT:??_R1A@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMyUnknownImp@@8
rdata$r	SEGMENT
??_R3CMyUnknownImp@@8 DD 00H				; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMyUnknownImp@@@8
_DATA	SEGMENT
??_R0?AVCMyUnknownImp@@@8 DD FLAT:??_7type_info@@6B@	; CMyUnknownImp `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMyUnknownImp@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R13?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R2IUnknown@@8
rdata$r	SEGMENT
??_R2IUnknown@@8 DD FLAT:??_R1A@?0A@EA@IUnknown@@8	; IUnknown::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3IUnknown@@8
rdata$r	SEGMENT
??_R3IUnknown@@8 DD 00H					; IUnknown::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIUnknown@@@8
_DATA	SEGMENT
??_R0?AUIUnknown@@@8 DD FLAT:??_7type_info@@6B@		; IUnknown `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIUnknown@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IUnknown@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R2ISequentialInStream@@8
rdata$r	SEGMENT
??_R2ISequentialInStream@@8 DD FLAT:??_R1A@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ISequentialInStream@@8
rdata$r	SEGMENT
??_R3ISequentialInStream@@8 DD 00H			; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ISequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUISequentialInStream@@@8
_DATA	SEGMENT
??_R0?AUISequentialInStream@@@8 DD FLAT:??_7type_info@@6B@ ; ISequentialInStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUISequentialInStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ISequentialInStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ISequentialInStream@@8 DD FLAT:??_R0?AUISequentialInStream@@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ISequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_R2IInStream@@8
rdata$r	SEGMENT
??_R2IInStream@@8 DD FLAT:??_R1A@?0A@EA@IInStream@@8	; IInStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ISequentialInStream@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3IInStream@@8
rdata$r	SEGMENT
??_R3IInStream@@8 DD 00H				; IInStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2IInStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIInStream@@@8
_DATA	SEGMENT
??_R0?AUIInStream@@@8 DD FLAT:??_7type_info@@6B@	; IInStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIInStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IInStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IInStream@@8 DD FLAT:??_R0?AUIInStream@@@8 ; IInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IInStream@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CLimitedInStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CLimitedInStream@@8 DD FLAT:??_R0?AVCLimitedInStream@@@8 ; CLimitedInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CLimitedInStream@@8
rdata$r	ENDS
;	COMDAT ??_R2CLimitedInStream@@8
rdata$r	SEGMENT
??_R2CLimitedInStream@@8 DD FLAT:??_R1A@?0A@EA@CLimitedInStream@@8 ; CLimitedInStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IInStream@@8
	DD	FLAT:??_R1A@?0A@EA@ISequentialInStream@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CLimitedInStream@@8
rdata$r	SEGMENT
??_R3CLimitedInStream@@8 DD 00H				; CLimitedInStream::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2CLimitedInStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCLimitedInStream@@@8
_DATA	SEGMENT
??_R0?AVCLimitedInStream@@@8 DD FLAT:??_7type_info@@6B@	; CLimitedInStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCLimitedInStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CLimitedInStream@@6B@
rdata$r	SEGMENT
??_R4CLimitedInStream@@6B@ DD 00H			; CLimitedInStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCLimitedInStream@@@8
	DD	FLAT:??_R3CLimitedInStream@@8
rdata$r	ENDS
;	COMDAT ??_7CLimitedInStream@@6B@
CONST	SEGMENT
??_7CLimitedInStream@@6B@ DD FLAT:??_R4CLimitedInStream@@6B@ ; CLimitedInStream::`vftable'
	DD	FLAT:?QueryInterface@CLimitedInStream@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CLimitedInStream@@UAGKXZ
	DD	FLAT:?Release@CLimitedInStream@@UAGKXZ
	DD	FLAT:?Read@CLimitedInStream@@UAGJPAXIPAI@Z
	DD	FLAT:?Seek@CLimitedInStream@@UAGJ_JIPA_K@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CLimitedInStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CLimitedInStream@@QAE@XZ PROC			; CLimitedInStream::CLimitedInStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IInStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CLimitedInStream@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::CMyComPtr<IInStream>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CLimitedInStream@@QAE@XZ ENDP			; CLimitedInStream::CLimitedInStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CMyUnknownImp@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMyUnknownImp@@QAE@XZ PROC				; CMyUnknownImp::CMyUnknownImp, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 167
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CMyUnknownImp@@QAE@XZ ENDP				; CMyUnknownImp::CMyUnknownImp
_TEXT	ENDS
PUBLIC	_==@8
EXTRN	_IID_IInStream:BYTE
EXTRN	_IID_ISequentialInStream:BYTE
EXTRN	_IID_IUnknown:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@CLimitedInStream@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CLimitedInStream@@UAGJABU_GUID@@PAPAX@Z PROC ; CLimitedInStream::QueryInterface, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\common\limitedstreams.h
; Line 58
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN6@QueryInter
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN5@QueryInter
$LN6@QueryInter:
	push	OFFSET _IID_ISequentialInStream
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@QueryInter
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN5@QueryInter
$LN4@QueryInter:
	push	OFFSET _IID_IInStream
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN5@QueryInter
$LN2@QueryInter:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN7@QueryInter
$LN5@QueryInter:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	xor	eax, eax
$LN7@QueryInter:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CLimitedInStream@@UAGJABU_GUID@@PAPAX@Z ENDP ; CLimitedInStream::QueryInterface
_TEXT	ENDS
PUBLIC	_IsEqualGUID@8
; Function compile flags: /Odtp /RTCsu
;	COMDAT _==@8
_TEXT	SEGMENT
_guidOne$ = 8						; size = 4
_guidOther$ = 12					; size = 4
_==@8	PROC						; COMDAT
; File c:\program files (x86)\microsoft sdks\windows\v7.0a\include\guiddef.h
; Line 193
	push	ebp
	mov	ebp, esp
; Line 194
	mov	eax, DWORD PTR _guidOther$[ebp]
	push	eax
	mov	ecx, DWORD PTR _guidOne$[ebp]
	push	ecx
	call	_IsEqualGUID@8
; Line 195
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_==@8	ENDP
_TEXT	ENDS
EXTRN	_memcmp:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT _IsEqualGUID@8
_TEXT	SEGMENT
_rguid1$ = 8						; size = 4
_rguid2$ = 12						; size = 4
_IsEqualGUID@8 PROC					; COMDAT
; Line 160
	push	ebp
	mov	ebp, esp
; Line 161
	push	16					; 00000010H
	mov	eax, DWORD PTR _rguid2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rguid1$[ebp]
	push	ecx
	call	_memcmp
	add	esp, 12					; 0000000cH
	neg	eax
	sbb	eax, eax
	add	eax, 1
; Line 162
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_IsEqualGUID@8 ENDP
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CLimitedInStream@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CLimitedInStream@@UAGKXZ PROC			; CLimitedInStream::AddRef, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\common\limitedstreams.h
; Line 58
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CLimitedInStream@@UAGKXZ ENDP			; CLimitedInStream::AddRef
_TEXT	ENDS
PUBLIC	??_GCLimitedInStream@@QAEPAXI@Z			; CLimitedInStream::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CLimitedInStream@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T67958 = -8						; size = 4
$T67957 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CLimitedInStream@@UAGKXZ PROC			; CLimitedInStream::Release, COMDAT
; Line 58
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	jmp	SHORT $LN2@Release
$LN1@Release:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T67958[ebp], edx
	mov	eax, DWORD PTR $T67958[ebp]
	mov	DWORD PTR $T67957[ebp], eax
	cmp	DWORD PTR $T67957[ebp], 0
	je	SHORT $LN4@Release
	push	1
	mov	ecx, DWORD PTR $T67957[ebp]
	call	??_GCLimitedInStream@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release
$LN4@Release:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release:
	xor	eax, eax
$LN2@Release:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CLimitedInStream@@UAGKXZ ENDP			; CLimitedInStream::Release
_TEXT	ENDS
PUBLIC	??1CLimitedInStream@@QAE@XZ			; CLimitedInStream::~CLimitedInStream
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCLimitedInStream@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCLimitedInStream@@QAEPAXI@Z PROC			; CLimitedInStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CLimitedInStream@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCLimitedInStream@@QAEPAXI@Z ENDP			; CLimitedInStream::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1?$CMyComPtr@UIInStream@@@@QAE@XZ		; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CLimitedInStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CLimitedInStream@@QAE@XZ PROC			; CLimitedInStream::~CLimitedInStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CLimitedInStream@@QAE@XZ ENDP			; CLimitedInStream::~CLimitedInStream
_TEXT	ENDS
PUBLIC	??_7IInStream@@6B@				; IInStream::`vftable'
PUBLIC	??0ISequentialInStream@@QAE@XZ			; ISequentialInStream::ISequentialInStream
PUBLIC	??_R4IInStream@@6B@				; IInStream::`RTTI Complete Object Locator'
EXTRN	__purecall:PROC
;	COMDAT ??_R4IInStream@@6B@
rdata$r	SEGMENT
??_R4IInStream@@6B@ DD 00H				; IInStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIInStream@@@8
	DD	FLAT:??_R3IInStream@@8
rdata$r	ENDS
;	COMDAT ??_7IInStream@@6B@
CONST	SEGMENT
??_7IInStream@@6B@ DD FLAT:??_R4IInStream@@6B@		; IInStream::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0IInStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IInStream@@QAE@XZ PROC				; IInStream::IInStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ISequentialInStream@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7IInStream@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0IInStream@@QAE@XZ ENDP				; IInStream::IInStream
_TEXT	ENDS
PUBLIC	??_7ISequentialInStream@@6B@			; ISequentialInStream::`vftable'
PUBLIC	??0IUnknown@@QAE@XZ				; IUnknown::IUnknown
PUBLIC	??_R4ISequentialInStream@@6B@			; ISequentialInStream::`RTTI Complete Object Locator'
;	COMDAT ??_R4ISequentialInStream@@6B@
rdata$r	SEGMENT
??_R4ISequentialInStream@@6B@ DD 00H			; ISequentialInStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUISequentialInStream@@@8
	DD	FLAT:??_R3ISequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_7ISequentialInStream@@6B@
CONST	SEGMENT
??_7ISequentialInStream@@6B@ DD FLAT:??_R4ISequentialInStream@@6B@ ; ISequentialInStream::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ISequentialInStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ISequentialInStream@@QAE@XZ PROC			; ISequentialInStream::ISequentialInStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ISequentialInStream@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ISequentialInStream@@QAE@XZ ENDP			; ISequentialInStream::ISequentialInStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0IUnknown@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IUnknown@@QAE@XZ PROC				; IUnknown::IUnknown, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0IUnknown@@QAE@XZ ENDP				; IUnknown::IUnknown
_TEXT	ENDS
PUBLIC	?Size@?$CRecordVector@I@@QBEIXZ			; CRecordVector<unsigned int>::Size
PUBLIC	?SeekToPhys@CClusterInStream@@QAEJXZ		; CClusterInStream::SeekToPhys
PUBLIC	??A?$CRecordVector@I@@QAEAAII@Z			; CRecordVector<unsigned int>::operator[]
PUBLIC	?Read@CClusterInStream@@UAGJPAXIPAI@Z		; CClusterInStream::Read
EXTRN	__allshl:PROC
EXTRN	__aullshr:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv169 = -68						; size = 4
tv290 = -64						; size = 8
tv250 = -56						; size = 4
tv194 = -52						; size = 4
tv193 = -48						; size = 4
_res$ = -44						; size = 4
_rem$67446 = -40					; size = 8
_i$67440 = -32						; size = 4
___result_$67437 = -28					; size = 4
_newPos$67434 = -24					; size = 8
_phyBlock$67433 = -16					; size = 4
_offsetInBlock$67431 = -12				; size = 4
_virtBlock$67429 = -8					; size = 4
_blockSize$67427 = -4					; size = 4
_this$ = 8						; size = 4
_data$ = 12						; size = 4
_size$ = 16						; size = 4
_processedSize$ = 20					; size = 4
?Read@CClusterInStream@@UAGJPAXIPAI@Z PROC		; CClusterInStream::Read
; File c:\workspace\7z1505-src\cpp\7zip\common\limitedstreams.cpp
; Line 82
	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-68]
	mov	ecx, 17					; 00000011H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 83
	cmp	DWORD PTR _processedSize$[ebp], 0
	je	SHORT $LN11@Read@3
; Line 84
	mov	eax, DWORD PTR _processedSize$[ebp]
	mov	DWORD PTR [eax], 0
$LN11@Read@3:
; Line 85
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv193[ebp], ecx
	mov	DWORD PTR tv194[ebp], edx
	mov	eax, DWORD PTR tv193[ebp]
	mov	ecx, DWORD PTR tv194[ebp]
	mov	edx, DWORD PTR [eax+12]
	cmp	edx, DWORD PTR [ecx+44]
	jb	SHORT $LN10@Read@3
	ja	SHORT $LN14@Read@3
	mov	eax, DWORD PTR tv193[ebp]
	mov	ecx, DWORD PTR tv194[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+40]
	jb	SHORT $LN10@Read@3
$LN14@Read@3:
; Line 86
	xor	eax, eax
	jmp	$LN12@Read@3
$LN10@Read@3:
; Line 88
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 0
	jne	$LN9@Read@3
; Line 90
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, 1
	mov	ecx, DWORD PTR [ecx+48]
	shl	edx, cl
	mov	DWORD PTR _blockSize$67427[ebp], edx
; Line 91
	mov	ecx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR [esi+48]
	call	__aullshr
	mov	DWORD PTR _virtBlock$67429[ebp], eax
; Line 92
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _blockSize$67427[ebp]
	sub	ecx, 1
	and	eax, ecx
	mov	DWORD PTR _offsetInBlock$67431[ebp], eax
; Line 93
	mov	edx, DWORD PTR _virtBlock$67429[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??A?$CRecordVector@I@@QAEAAII@Z		; CRecordVector<unsigned int>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _phyBlock$67433[ebp], eax
; Line 94
	mov	eax, DWORD PTR _phyBlock$67433[ebp]
	xor	edx, edx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+48]
	call	__allshl
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+32]
	adc	edx, DWORD PTR [ecx+36]
	mov	ecx, DWORD PTR _offsetInBlock$67431[ebp]
	xor	esi, esi
	add	eax, ecx
	adc	edx, esi
	mov	DWORD PTR _newPos$67434[ebp], eax
	mov	DWORD PTR _newPos$67434[ebp+4], edx
; Line 95
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv250[ebp], edx
	mov	eax, DWORD PTR tv250[ebp]
	mov	ecx, DWORD PTR _newPos$67434[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jne	SHORT $LN15@Read@3
	mov	edx, DWORD PTR tv250[ebp]
	mov	eax, DWORD PTR _newPos$67434[ebp+4]
	cmp	eax, DWORD PTR [edx+20]
	je	SHORT $LN8@Read@3
$LN15@Read@3:
; Line 97
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _newPos$67434[ebp]
	mov	DWORD PTR [ecx+16], edx
	mov	eax, DWORD PTR _newPos$67434[ebp+4]
	mov	DWORD PTR [ecx+20], eax
; Line 98
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SeekToPhys@CClusterInStream@@QAEJXZ	; CClusterInStream::SeekToPhys
	mov	DWORD PTR ___result_$67437[ebp], eax
	cmp	DWORD PTR ___result_$67437[ebp], 0
	je	SHORT $LN8@Read@3
	mov	eax, DWORD PTR ___result_$67437[ebp]
	jmp	$LN12@Read@3
$LN8@Read@3:
; Line 100
	mov	ecx, DWORD PTR _blockSize$67427[ebp]
	sub	ecx, DWORD PTR _offsetInBlock$67431[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+24], ecx
; Line 101
	mov	DWORD PTR _i$67440[ebp], 1
	jmp	SHORT $LN6@Read@3
$LN5@Read@3:
	mov	eax, DWORD PTR _i$67440[ebp]
	add	eax, 1
	mov	DWORD PTR _i$67440[ebp], eax
$LN6@Read@3:
	cmp	DWORD PTR _i$67440[ebp], 64		; 00000040H
	jge	SHORT $LN4@Read@3
	mov	esi, DWORD PTR _virtBlock$67429[ebp]
	add	esi, DWORD PTR _i$67440[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	?Size@?$CRecordVector@I@@QBEIXZ		; CRecordVector<unsigned int>::Size
	cmp	esi, eax
	jae	SHORT $LN4@Read@3
	mov	esi, DWORD PTR _phyBlock$67433[ebp]
	add	esi, DWORD PTR _i$67440[ebp]
	mov	ecx, DWORD PTR _virtBlock$67429[ebp]
	add	ecx, DWORD PTR _i$67440[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??A?$CRecordVector@I@@QAEAAII@Z		; CRecordVector<unsigned int>::operator[]
	cmp	esi, DWORD PTR [eax]
	jne	SHORT $LN4@Read@3
; Line 102
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, 1
	mov	ecx, DWORD PTR [edx+48]
	shl	eax, cl
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+24]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+24], eax
	jmp	SHORT $LN5@Read@3
$LN4@Read@3:
; Line 103
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+40]
	sub	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [eax+44]
	sbb	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _rem$67446[ebp], edx
	mov	DWORD PTR _rem$67446[ebp+4], eax
; Line 104
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	xor	eax, eax
	mov	DWORD PTR tv290[ebp], edx
	mov	DWORD PTR tv290[ebp+4], eax
	mov	ecx, DWORD PTR tv290[ebp+4]
	cmp	ecx, DWORD PTR _rem$67446[ebp+4]
	jb	SHORT $LN9@Read@3
	ja	SHORT $LN16@Read@3
	mov	edx, DWORD PTR tv290[ebp]
	cmp	edx, DWORD PTR _rem$67446[ebp]
	jbe	SHORT $LN9@Read@3
$LN16@Read@3:
; Line 105
	mov	eax, DWORD PTR _rem$67446[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], eax
$LN9@Read@3:
; Line 107
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	cmp	eax, DWORD PTR [edx+24]
	jbe	SHORT $LN2@Read@3
; Line 108
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _size$[ebp], edx
$LN2@Read@3:
; Line 109
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->
	mov	DWORD PTR tv169[ebp], eax
	mov	esi, esp
	lea	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	mov	eax, DWORD PTR tv169[ebp]
	push	eax
	mov	ecx, DWORD PTR tv169[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _res$[ebp], eax
; Line 110
	cmp	DWORD PTR _processedSize$[ebp], 0
	je	SHORT $LN1@Read@3
; Line 111
	mov	ecx, DWORD PTR _processedSize$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx], edx
$LN1@Read@3:
; Line 112
	mov	eax, DWORD PTR _size$[ebp]
	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [edx+16]
	adc	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], eax
	mov	DWORD PTR [edx+20], ecx
; Line 113
	mov	eax, DWORD PTR _size$[ebp]
	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [edx+8]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx
; Line 114
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	sub	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+24], ecx
; Line 115
	mov	eax, DWORD PTR _res$[ebp]
$LN12@Read@3:
; Line 116
	pop	edi
	pop	esi
	add	esp, 68					; 00000044H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Read@CClusterInStream@@UAGJPAXIPAI@Z ENDP		; CClusterInStream::Read
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SeekToPhys@CClusterInStream@@QAEJXZ
_TEXT	SEGMENT
tv68 = -8						; size = 4
_this$ = -4						; size = 4
?SeekToPhys@CClusterInStream@@QAEJXZ PROC		; CClusterInStream::SeekToPhys, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\limitedstreams.h
; Line 82
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->
	mov	DWORD PTR tv68[ebp], eax
	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR [eax+16]
	push	edx
	mov	eax, DWORD PTR tv68[ebp]
	push	eax
	mov	ecx, DWORD PTR tv68[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?SeekToPhys@CClusterInStream@@QAEJXZ ENDP		; CClusterInStream::SeekToPhys
_TEXT	ENDS
PUBLIC	?Seek@CClusterInStream@@UAGJ_JIPA_K@Z		; CClusterInStream::Seek
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv130 = -8						; size = 4
tv64 = -4						; size = 4
_this$ = 8						; size = 4
_offset$ = 12						; size = 8
_seekOrigin$ = 20					; size = 4
_newPosition$ = 24					; size = 4
?Seek@CClusterInStream@@UAGJ_JIPA_K@Z PROC		; CClusterInStream::Seek
; File c:\workspace\7z1505-src\cpp\7zip\common\limitedstreams.cpp
; Line 119
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 120
	mov	eax, DWORD PTR _seekOrigin$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 0
	je	SHORT $LN7@Seek@2
	cmp	DWORD PTR tv64[ebp], 1
	je	SHORT $LN6@Seek@2
	cmp	DWORD PTR tv64[ebp], 2
	je	SHORT $LN5@Seek@2
	jmp	SHORT $LN4@Seek@2
$LN7@Seek@2:
; Line 122
	jmp	SHORT $LN8@Seek@2
$LN6@Seek@2:
; Line 123
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _offset$[ebp]
	add	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _offset$[ebp+4]
	adc	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _offset$[ebp], edx
	mov	DWORD PTR _offset$[ebp+4], eax
	jmp	SHORT $LN8@Seek@2
$LN5@Seek@2:
; Line 124
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _offset$[ebp]
	add	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR _offset$[ebp+4]
	adc	eax, DWORD PTR [ecx+44]
	mov	DWORD PTR _offset$[ebp], edx
	mov	DWORD PTR _offset$[ebp+4], eax
	jmp	SHORT $LN8@Seek@2
$LN4@Seek@2:
; Line 125
	mov	eax, -2147287039			; 80030001H
	jmp	SHORT $LN10@Seek@2
$LN8@Seek@2:
; Line 127
	cmp	DWORD PTR _offset$[ebp+4], 0
	jg	SHORT $LN3@Seek@2
	jl	SHORT $LN12@Seek@2
	cmp	DWORD PTR _offset$[ebp], 0
	jae	SHORT $LN3@Seek@2
$LN12@Seek@2:
; Line 128
	mov	eax, -2147024765			; 80070083H
	jmp	SHORT $LN10@Seek@2
$LN3@Seek@2:
; Line 129
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv130[ebp], ecx
	mov	edx, DWORD PTR tv130[ebp]
	mov	eax, DWORD PTR [edx+8]
	cmp	eax, DWORD PTR _offset$[ebp]
	jne	SHORT $LN13@Seek@2
	mov	ecx, DWORD PTR tv130[ebp]
	mov	edx, DWORD PTR [ecx+12]
	cmp	edx, DWORD PTR _offset$[ebp+4]
	je	SHORT $LN2@Seek@2
$LN13@Seek@2:
; Line 130
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0
$LN2@Seek@2:
; Line 131
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _offset$[ebp+4]
	mov	DWORD PTR [ecx+12], eax
; Line 132
	cmp	DWORD PTR _newPosition$[ebp], 0
	je	SHORT $LN1@Seek@2
; Line 133
	mov	ecx, DWORD PTR _newPosition$[ebp]
	mov	edx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _offset$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
$LN1@Seek@2:
; Line 134
	xor	eax, eax
$LN10@Seek@2:
; Line 135
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?Seek@CClusterInStream@@UAGJ_JIPA_K@Z ENDP		; CClusterInStream::Seek
_TEXT	ENDS
PUBLIC	?SeekToPhys@CExtentsStream@@AAEJXZ		; CExtentsStream::SeekToPhys
PUBLIC	??A?$CRecordVector@UCSeekExtent@@@@QAEAAUCSeekExtent@@I@Z ; CRecordVector<CSeekExtent>::operator[]
PUBLIC	?Size@?$CRecordVector@UCSeekExtent@@@@QBEIXZ	; CRecordVector<CSeekExtent>::Size
PUBLIC	?Back@?$CRecordVector@UCSeekExtent@@@@QAEAAUCSeekExtent@@XZ ; CRecordVector<CSeekExtent>::Back
PUBLIC	?Read@CExtentsStream@@UAGJPAXIPAI@Z		; CExtentsStream::Read
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv155 = -72						; size = 4
tv253 = -68						; size = 8
tv227 = -60						; size = 4
tv197 = -56						; size = 4
tv196 = -52						; size = 4
tv177 = -48						; size = 4
tv176 = -44						; size = 4
_res$ = -40						; size = 4
_rem$ = -36						; size = 8
___result_$67499 = -28					; size = 4
_phyPos$ = -24						; size = 8
_extent$ = -16						; size = 4
_mid$67491 = -12					; size = 4
_right$ = -8						; size = 4
_left$ = -4						; size = 4
_this$ = 8						; size = 4
_data$ = 12						; size = 4
_size$ = 16						; size = 4
_processedSize$ = 20					; size = 4
?Read@CExtentsStream@@UAGJPAXIPAI@Z PROC		; CExtentsStream::Read
; Line 139
	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-72]
	mov	ecx, 18					; 00000012H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 140
	cmp	DWORD PTR _processedSize$[ebp], 0
	je	SHORT $LN13@Read@4
; Line 141
	mov	eax, DWORD PTR _processedSize$[ebp]
	mov	DWORD PTR [eax], 0
$LN13@Read@4:
; Line 142
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?Back@?$CRecordVector@UCSeekExtent@@@@QAEAAUCSeekExtent@@XZ ; CRecordVector<CSeekExtent>::Back
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv176[ebp], ecx
	mov	DWORD PTR tv177[ebp], eax
	mov	edx, DWORD PTR tv176[ebp]
	mov	eax, DWORD PTR tv177[ebp]
	mov	ecx, DWORD PTR [edx+20]
	cmp	ecx, DWORD PTR [eax+12]
	jb	SHORT $LN12@Read@4
	ja	SHORT $LN16@Read@4
	mov	edx, DWORD PTR tv176[ebp]
	mov	eax, DWORD PTR tv177[ebp]
	mov	ecx, DWORD PTR [edx+16]
	cmp	ecx, DWORD PTR [eax+8]
	jb	SHORT $LN12@Read@4
$LN16@Read@4:
; Line 143
	xor	eax, eax
	jmp	$LN14@Read@4
$LN12@Read@4:
; Line 144
	cmp	DWORD PTR _size$[ebp], 0
	jne	SHORT $LN11@Read@4
; Line 145
	xor	eax, eax
	jmp	$LN14@Read@4
$LN11@Read@4:
; Line 147
	mov	DWORD PTR _left$[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?Size@?$CRecordVector@UCSeekExtent@@@@QBEIXZ ; CRecordVector<CSeekExtent>::Size
	sub	eax, 1
	mov	DWORD PTR _right$[ebp], eax
$LN10@Read@4:
; Line 150
	mov	edx, DWORD PTR _left$[ebp]
	add	edx, DWORD PTR _right$[ebp]
	shr	edx, 1
	mov	DWORD PTR _mid$67491[ebp], edx
; Line 151
	mov	eax, DWORD PTR _mid$67491[ebp]
	cmp	eax, DWORD PTR _left$[ebp]
	jne	SHORT $LN8@Read@4
; Line 152
	jmp	SHORT $LN9@Read@4
$LN8@Read@4:
; Line 153
	mov	ecx, DWORD PTR _mid$67491[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??A?$CRecordVector@UCSeekExtent@@@@QAEAAUCSeekExtent@@I@Z ; CRecordVector<CSeekExtent>::operator[]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv196[ebp], edx
	mov	DWORD PTR tv197[ebp], eax
	mov	eax, DWORD PTR tv196[ebp]
	mov	ecx, DWORD PTR tv197[ebp]
	mov	edx, DWORD PTR [eax+20]
	cmp	edx, DWORD PTR [ecx+12]
	ja	SHORT $LN7@Read@4
	jb	SHORT $LN17@Read@4
	mov	eax, DWORD PTR tv196[ebp]
	mov	ecx, DWORD PTR tv197[ebp]
	mov	edx, DWORD PTR [eax+16]
	cmp	edx, DWORD PTR [ecx+8]
	jae	SHORT $LN7@Read@4
$LN17@Read@4:
; Line 154
	mov	eax, DWORD PTR _mid$67491[ebp]
	mov	DWORD PTR _right$[ebp], eax
; Line 155
	jmp	SHORT $LN6@Read@4
$LN7@Read@4:
; Line 156
	mov	ecx, DWORD PTR _mid$67491[ebp]
	mov	DWORD PTR _left$[ebp], ecx
$LN6@Read@4:
; Line 157
	jmp	SHORT $LN10@Read@4
$LN9@Read@4:
; Line 159
	mov	edx, DWORD PTR _left$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??A?$CRecordVector@UCSeekExtent@@@@QAEAAUCSeekExtent@@I@Z ; CRecordVector<CSeekExtent>::operator[]
	mov	DWORD PTR _extent$[ebp], eax
; Line 160
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _extent$[ebp]
	mov	edx, DWORD PTR [eax+16]
	sub	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [eax+20]
	sbb	eax, DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR _extent$[ebp]
	add	edx, DWORD PTR [ecx]
	adc	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _phyPos$[ebp], edx
	mov	DWORD PTR _phyPos$[ebp+4], eax
; Line 161
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+24]
	test	eax, eax
	jne	SHORT $LN4@Read@4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv227[ebp], ecx
	mov	edx, DWORD PTR tv227[ebp]
	mov	eax, DWORD PTR [edx+8]
	cmp	eax, DWORD PTR _phyPos$[ebp]
	jne	SHORT $LN4@Read@4
	mov	ecx, DWORD PTR tv227[ebp]
	mov	edx, DWORD PTR [ecx+12]
	cmp	edx, DWORD PTR _phyPos$[ebp+4]
	je	SHORT $LN5@Read@4
$LN4@Read@4:
; Line 163
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+24], 0
; Line 164
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _phyPos$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _phyPos$[ebp+4]
	mov	DWORD PTR [ecx+12], eax
; Line 165
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SeekToPhys@CExtentsStream@@AAEJXZ	; CExtentsStream::SeekToPhys
	mov	DWORD PTR ___result_$67499[ebp], eax
	cmp	DWORD PTR ___result_$67499[ebp], 0
	je	SHORT $LN5@Read@4
	mov	eax, DWORD PTR ___result_$67499[ebp]
	jmp	$LN14@Read@4
$LN5@Read@4:
; Line 168
	mov	ecx, DWORD PTR _left$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??A?$CRecordVector@UCSeekExtent@@@@QAEAAUCSeekExtent@@I@Z ; CRecordVector<CSeekExtent>::operator[]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, DWORD PTR [edx+16]
	mov	eax, DWORD PTR [eax+12]
	sbb	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _rem$[ebp], ecx
	mov	DWORD PTR _rem$[ebp+4], eax
; Line 169
	mov	ecx, DWORD PTR _size$[ebp]
	xor	edx, edx
	mov	DWORD PTR tv253[ebp], ecx
	mov	DWORD PTR tv253[ebp+4], edx
	mov	eax, DWORD PTR tv253[ebp+4]
	cmp	eax, DWORD PTR _rem$[ebp+4]
	jb	SHORT $LN2@Read@4
	ja	SHORT $LN19@Read@4
	mov	ecx, DWORD PTR tv253[ebp]
	cmp	ecx, DWORD PTR _rem$[ebp]
	jbe	SHORT $LN2@Read@4
$LN19@Read@4:
; Line 170
	mov	edx, DWORD PTR _rem$[ebp]
	mov	DWORD PTR _size$[ebp], edx
$LN2@Read@4:
; Line 172
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->
	mov	DWORD PTR tv155[ebp], eax
	mov	esi, esp
	lea	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	mov	eax, DWORD PTR tv155[ebp]
	push	eax
	mov	ecx, DWORD PTR tv155[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _res$[ebp], eax
; Line 173
	mov	ecx, DWORD PTR _size$[ebp]
	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+8]
	adc	edx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
; Line 174
	mov	ecx, DWORD PTR _size$[ebp]
	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+16]
	adc	edx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], ecx
	mov	DWORD PTR [eax+20], edx
; Line 175
	cmp	DWORD PTR _processedSize$[ebp], 0
	je	SHORT $LN1@Read@4
; Line 176
	mov	ecx, DWORD PTR _processedSize$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx], edx
$LN1@Read@4:
; Line 177
	mov	eax, DWORD PTR _res$[ebp]
$LN14@Read@4:
; Line 178
	pop	edi
	pop	esi
	add	esp, 72					; 00000048H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Read@CExtentsStream@@UAGJPAXIPAI@Z ENDP		; CExtentsStream::Read
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SeekToPhys@CExtentsStream@@AAEJXZ
_TEXT	SEGMENT
tv68 = -8						; size = 4
_this$ = -4						; size = 4
?SeekToPhys@CExtentsStream@@AAEJXZ PROC			; CExtentsStream::SeekToPhys, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\limitedstreams.h
; Line 117
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->
	mov	DWORD PTR tv68[ebp], eax
	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	push	edx
	mov	eax, DWORD PTR tv68[ebp]
	push	eax
	mov	ecx, DWORD PTR tv68[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?SeekToPhys@CExtentsStream@@AAEJXZ ENDP			; CExtentsStream::SeekToPhys
_TEXT	ENDS
PUBLIC	?Seek@CExtentsStream@@UAGJ_JIPA_K@Z		; CExtentsStream::Seek
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv64 = -4						; size = 4
_this$ = 8						; size = 4
_offset$ = 12						; size = 8
_seekOrigin$ = 20					; size = 4
_newPosition$ = 24					; size = 4
?Seek@CExtentsStream@@UAGJ_JIPA_K@Z PROC		; CExtentsStream::Seek
; File c:\workspace\7z1505-src\cpp\7zip\common\limitedstreams.cpp
; Line 181
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 182
	mov	eax, DWORD PTR _seekOrigin$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 0
	je	SHORT $LN6@Seek@3
	cmp	DWORD PTR tv64[ebp], 1
	je	SHORT $LN5@Seek@3
	cmp	DWORD PTR tv64[ebp], 2
	je	SHORT $LN4@Seek@3
	jmp	SHORT $LN3@Seek@3
$LN6@Seek@3:
; Line 184
	jmp	SHORT $LN7@Seek@3
$LN5@Seek@3:
; Line 185
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _offset$[ebp]
	add	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _offset$[ebp+4]
	adc	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR _offset$[ebp], edx
	mov	DWORD PTR _offset$[ebp+4], eax
	jmp	SHORT $LN7@Seek@3
$LN4@Seek@3:
; Line 186
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?Back@?$CRecordVector@UCSeekExtent@@@@QAEAAUCSeekExtent@@XZ ; CRecordVector<CSeekExtent>::Back
	mov	ecx, DWORD PTR _offset$[ebp]
	add	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _offset$[ebp+4]
	adc	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _offset$[ebp], ecx
	mov	DWORD PTR _offset$[ebp+4], edx
	jmp	SHORT $LN7@Seek@3
$LN3@Seek@3:
; Line 187
	mov	eax, -2147287039			; 80030001H
	jmp	SHORT $LN9@Seek@3
$LN7@Seek@3:
; Line 189
	cmp	DWORD PTR _offset$[ebp+4], 0
	jg	SHORT $LN2@Seek@3
	jl	SHORT $LN11@Seek@3
	cmp	DWORD PTR _offset$[ebp], 0
	jae	SHORT $LN2@Seek@3
$LN11@Seek@3:
; Line 190
	mov	eax, -2147024765			; 80070083H
	jmp	SHORT $LN9@Seek@3
$LN2@Seek@3:
; Line 191
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR _offset$[ebp+4]
	mov	DWORD PTR [eax+20], edx
; Line 192
	cmp	DWORD PTR _newPosition$[ebp], 0
	je	SHORT $LN1@Seek@3
; Line 193
	mov	eax, DWORD PTR _newPosition$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+4], ecx
$LN1@Seek@3:
; Line 194
	xor	eax, eax
$LN9@Seek@3:
; Line 195
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?Seek@CExtentsStream@@UAGJ_JIPA_K@Z ENDP		; CExtentsStream::Seek
_TEXT	ENDS
PUBLIC	??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator->
PUBLIC	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
PUBLIC	?Write@CLimitedSequentialOutStream@@UAGJPBXIPAI@Z ; CLimitedSequentialOutStream::Write
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv85 = -24						; size = 4
tv145 = -20						; size = 4
tv137 = -16						; size = 4
tv134 = -12						; size = 8
_result$ = -4						; size = 4
_this$ = 8						; size = 4
_data$ = 12						; size = 4
_size$ = 16						; size = 4
_processedSize$ = 20					; size = 4
?Write@CLimitedSequentialOutStream@@UAGJPBXIPAI@Z PROC	; CLimitedSequentialOutStream::Write
; Line 199
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 200
	mov	DWORD PTR _result$[ebp], 0
; Line 201
	cmp	DWORD PTR _processedSize$[ebp], 0
	je	SHORT $LN7@Write
; Line 202
	mov	eax, DWORD PTR _processedSize$[ebp]
	mov	DWORD PTR [eax], 0
$LN7@Write:
; Line 203
	mov	ecx, DWORD PTR _size$[ebp]
	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv134[ebp], ecx
	mov	DWORD PTR tv134[ebp+4], edx
	mov	DWORD PTR tv137[ebp], eax
	mov	ecx, DWORD PTR tv137[ebp]
	mov	edx, DWORD PTR tv134[ebp+4]
	cmp	edx, DWORD PTR [ecx+20]
	jb	SHORT $LN6@Write
	ja	SHORT $LN10@Write
	mov	eax, DWORD PTR tv137[ebp]
	mov	ecx, DWORD PTR tv134[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jbe	SHORT $LN6@Write
$LN10@Write:
; Line 205
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv145[ebp], edx
	mov	eax, DWORD PTR tv145[ebp]
	mov	ecx, DWORD PTR tv145[ebp]
	mov	edx, DWORD PTR [eax+16]
	or	edx, DWORD PTR [ecx+20]
	jne	SHORT $LN5@Write
; Line 207
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+24], 1
; Line 208
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+25]
	test	edx, edx
	jne	SHORT $LN4@Write
; Line 209
	mov	eax, -2147467259			; 80004005H
	jmp	$LN8@Write
$LN4@Write:
; Line 210
	cmp	DWORD PTR _processedSize$[ebp], 0
	je	SHORT $LN3@Write
; Line 211
	mov	eax, DWORD PTR _processedSize$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax], ecx
$LN3@Write:
; Line 212
	xor	eax, eax
	jmp	SHORT $LN8@Write
$LN5@Write:
; Line 214
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _size$[ebp], eax
$LN6@Write:
; Line 216
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
	test	eax, eax
	je	SHORT $LN2@Write
; Line 217
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator->
	mov	DWORD PTR tv85[ebp], eax
	mov	esi, esp
	lea	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv85[ebp]
	push	ecx
	mov	edx, DWORD PTR tv85[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
$LN2@Write:
; Line 218
	mov	edx, DWORD PTR _size$[ebp]
	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [ecx+16]
	sub	esi, edx
	mov	edx, DWORD PTR [ecx+20]
	sbb	edx, eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], esi
	mov	DWORD PTR [eax+20], edx
; Line 219
	cmp	DWORD PTR _processedSize$[ebp], 0
	je	SHORT $LN1@Write
; Line 220
	mov	ecx, DWORD PTR _processedSize$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx], edx
$LN1@Write:
; Line 221
	mov	eax, DWORD PTR _result$[ebp]
$LN8@Write:
; Line 222
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Write@CLimitedSequentialOutStream@@UAGJPBXIPAI@Z ENDP	; CLimitedSequentialOutStream::Write
_TEXT	ENDS
PUBLIC	?Read@CTailInStream@@UAGJPAXIPAI@Z		; CTailInStream::Read
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv72 = -20						; size = 4
_res$ = -16						; size = 4
_cur$ = -8						; size = 4
_this$ = 8						; size = 4
_data$ = 12						; size = 4
_size$ = 16						; size = 4
_processedSize$ = 20					; size = 4
?Read@CTailInStream@@UAGJPAXIPAI@Z PROC			; CTailInStream::Read
; Line 226
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 228
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->
	mov	DWORD PTR tv72[ebp], eax
	mov	esi, esp
	lea	eax, DWORD PTR _cur$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	mov	eax, DWORD PTR tv72[ebp]
	push	eax
	mov	ecx, DWORD PTR tv72[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _res$[ebp], eax
; Line 229
	cmp	DWORD PTR _processedSize$[ebp], 0
	je	SHORT $LN1@Read@5
; Line 230
	mov	ecx, DWORD PTR _processedSize$[ebp]
	mov	edx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [ecx], edx
$LN1@Read@5:
; Line 231
	mov	eax, DWORD PTR _cur$[ebp]
	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [edx+8]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx
; Line 232
	mov	eax, DWORD PTR _res$[ebp]
; Line 233
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@Read@5
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	3
$LN6@Read@5:
	DD	1
	DD	$LN5@Read@5
$LN5@Read@5:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@Read@5
$LN4@Read@5:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	0
?Read@CTailInStream@@UAGJPAXIPAI@Z ENDP			; CTailInStream::Read
_TEXT	ENDS
PUBLIC	?Seek@CTailInStream@@UAGJ_JIPA_K@Z		; CTailInStream::Seek
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv129 = -36						; size = 4
tv164 = -32						; size = 4
tv71 = -28						; size = 4
tv64 = -24						; size = 4
___result_$67569 = -20					; size = 4
_pos$67568 = -12					; size = 8
_this$ = 8						; size = 4
_offset$ = 12						; size = 8
_seekOrigin$ = 20					; size = 4
_newPosition$ = 24					; size = 4
?Seek@CTailInStream@@UAGJ_JIPA_K@Z PROC			; CTailInStream::Seek
; Line 236
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 237
	mov	eax, DWORD PTR _seekOrigin$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 0
	je	SHORT $LN9@Seek@4
	cmp	DWORD PTR tv64[ebp], 1
	je	SHORT $LN8@Seek@4
	cmp	DWORD PTR tv64[ebp], 2
	je	SHORT $LN7@Seek@4
	jmp	$LN3@Seek@4
$LN9@Seek@4:
; Line 239
	jmp	$LN10@Seek@4
$LN8@Seek@4:
; Line 240
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _offset$[ebp]
	add	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _offset$[ebp+4]
	adc	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _offset$[ebp], edx
	mov	DWORD PTR _offset$[ebp+4], eax
	jmp	$LN10@Seek@4
$LN7@Seek@4:
; Line 243
	mov	DWORD PTR _pos$67568[ebp], 0
	mov	DWORD PTR _pos$67568[ebp+4], 0
; Line 244
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->
	mov	DWORD PTR tv71[ebp], eax
	mov	esi, esp
	lea	ecx, DWORD PTR _pos$67568[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _offset$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv71[ebp]
	push	ecx
	mov	edx, DWORD PTR tv71[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result_$67569[ebp], eax
	cmp	DWORD PTR ___result_$67569[ebp], 0
	je	SHORT $LN6@Seek@4
	mov	eax, DWORD PTR ___result_$67569[ebp]
	jmp	$LN12@Seek@4
$LN6@Seek@4:
; Line 245
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv164[ebp], edx
	mov	eax, DWORD PTR tv164[ebp]
	mov	ecx, DWORD PTR _pos$67568[ebp+4]
	cmp	ecx, DWORD PTR [eax+28]
	ja	SHORT $LN5@Seek@4
	jb	SHORT $LN14@Seek@4
	mov	edx, DWORD PTR tv164[ebp]
	mov	eax, DWORD PTR _pos$67568[ebp]
	cmp	eax, DWORD PTR [edx+24]
	jae	SHORT $LN5@Seek@4
$LN14@Seek@4:
; Line 246
	mov	eax, -2147024765			; 80070083H
	jmp	$LN12@Seek@4
$LN5@Seek@4:
; Line 247
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pos$67568[ebp]
	sub	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR _pos$67568[ebp+4]
	sbb	eax, DWORD PTR [ecx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+12], eax
; Line 248
	cmp	DWORD PTR _newPosition$[ebp], 0
	je	SHORT $LN4@Seek@4
; Line 249
	mov	edx, DWORD PTR _newPosition$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+4], eax
$LN4@Seek@4:
; Line 250
	xor	eax, eax
	jmp	SHORT $LN12@Seek@4
$LN3@Seek@4:
; Line 252
	mov	eax, -2147287039			; 80030001H
	jmp	SHORT $LN12@Seek@4
$LN10@Seek@4:
; Line 254
	cmp	DWORD PTR _offset$[ebp+4], 0
	jg	SHORT $LN2@Seek@4
	jl	SHORT $LN15@Seek@4
	cmp	DWORD PTR _offset$[ebp], 0
	jae	SHORT $LN2@Seek@4
$LN15@Seek@4:
; Line 255
	mov	eax, -2147024765			; 80070083H
	jmp	SHORT $LN12@Seek@4
$LN2@Seek@4:
; Line 256
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _offset$[ebp+4]
	mov	DWORD PTR [ecx+12], eax
; Line 257
	cmp	DWORD PTR _newPosition$[ebp], 0
	je	SHORT $LN1@Seek@4
; Line 258
	mov	ecx, DWORD PTR _newPosition$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+4], edx
$LN1@Seek@4:
; Line 259
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->
	mov	DWORD PTR tv129[ebp], eax
	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+24]
	add	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [eax+28]
	adc	eax, DWORD PTR [ecx+12]
	push	eax
	push	edx
	mov	ecx, DWORD PTR tv129[ebp]
	push	ecx
	mov	edx, DWORD PTR tv129[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN12@Seek@4:
; Line 260
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@Seek@4
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
	npad	3
$LN18@Seek@4:
	DD	1
	DD	$LN17@Seek@4
$LN17@Seek@4:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN16@Seek@4
$LN16@Seek@4:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
?Seek@CTailInStream@@UAGJ_JIPA_K@Z ENDP			; CTailInStream::Seek
_TEXT	ENDS
PUBLIC	?SeekToPhys@CLimitedCachedInStream@@AAEJXZ	; CLimitedCachedInStream::SeekToPhys
PUBLIC	?Read@CLimitedCachedInStream@@UAGJPAXIPAI@Z	; CLimitedCachedInStream::Read
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv143 = -72						; size = 4
tv236 = -68						; size = 4
tv223 = -64						; size = 8
tv213 = -56						; size = 8
tv186 = -48						; size = 8
tv165 = -40						; size = 4
tv164 = -36						; size = 4
___result_$67607 = -32					; size = 4
_res$ = -28						; size = 4
_offsetInCache$ = -24					; size = 8
_newPos$ = -16						; size = 8
_rem$ = -8						; size = 8
_this$ = 8						; size = 4
_data$ = 12						; size = 4
_size$ = 16						; size = 4
_processedSize$ = 20					; size = 4
?Read@CLimitedCachedInStream@@UAGJPAXIPAI@Z PROC	; CLimitedCachedInStream::Read
; Line 263
	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-72]
	mov	ecx, 18					; 00000012H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 264
	cmp	DWORD PTR _processedSize$[ebp], 0
	je	SHORT $LN9@Read@6
; Line 265
	mov	eax, DWORD PTR _processedSize$[ebp]
	mov	DWORD PTR [eax], 0
$LN9@Read@6:
; Line 266
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv164[ebp], ecx
	mov	DWORD PTR tv165[ebp], edx
	mov	eax, DWORD PTR tv164[ebp]
	mov	ecx, DWORD PTR tv165[ebp]
	mov	edx, DWORD PTR [eax+20]
	cmp	edx, DWORD PTR [ecx+36]
	jb	SHORT $LN8@Read@6
	ja	SHORT $LN12@Read@6
	mov	eax, DWORD PTR tv164[ebp]
	mov	ecx, DWORD PTR tv165[ebp]
	mov	edx, DWORD PTR [eax+16]
	cmp	edx, DWORD PTR [ecx+32]
	jb	SHORT $LN8@Read@6
$LN12@Read@6:
; Line 269
	xor	eax, eax
	jmp	$LN10@Read@6
$LN8@Read@6:
; Line 272
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+32]
	sub	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [eax+36]
	sbb	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR _rem$[ebp], edx
	mov	DWORD PTR _rem$[ebp+4], eax
; Line 273
	mov	ecx, DWORD PTR _size$[ebp]
	xor	edx, edx
	mov	DWORD PTR tv186[ebp], ecx
	mov	DWORD PTR tv186[ebp+4], edx
	mov	eax, DWORD PTR _rem$[ebp+4]
	cmp	eax, DWORD PTR tv186[ebp+4]
	ja	SHORT $LN7@Read@6
	jb	SHORT $LN13@Read@6
	mov	ecx, DWORD PTR _rem$[ebp]
	cmp	ecx, DWORD PTR tv186[ebp]
	jae	SHORT $LN7@Read@6
$LN13@Read@6:
; Line 274
	mov	edx, DWORD PTR _rem$[ebp]
	mov	DWORD PTR _size$[ebp], edx
$LN7@Read@6:
; Line 276
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+40]
	add	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [eax+44]
	adc	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR _newPos$[ebp], edx
	mov	DWORD PTR _newPos$[ebp+4], eax
; Line 277
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	xor	eax, eax
	mov	ecx, DWORD PTR _newPos$[ebp]
	sub	ecx, edx
	mov	edx, DWORD PTR _newPos$[ebp+4]
	sbb	edx, eax
	mov	DWORD PTR _offsetInCache$[ebp], ecx
	mov	DWORD PTR _offsetInCache$[ebp+4], edx
; Line 278
	mov	DWORD PTR _res$[ebp], 0
; Line 281
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	xor	edx, edx
	mov	DWORD PTR tv213[ebp], ecx
	mov	DWORD PTR tv213[ebp+4], edx
	mov	eax, DWORD PTR _newPos$[ebp+4]
	cmp	eax, DWORD PTR tv213[ebp+4]
	jb	SHORT $LN6@Read@6
	ja	SHORT $LN14@Read@6
	mov	ecx, DWORD PTR _newPos$[ebp]
	cmp	ecx, DWORD PTR tv213[ebp]
	jb	SHORT $LN6@Read@6
$LN14@Read@6:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+52]
	xor	ecx, ecx
	mov	DWORD PTR tv223[ebp], eax
	mov	DWORD PTR tv223[ebp+4], ecx
	mov	edx, DWORD PTR _offsetInCache$[ebp+4]
	cmp	edx, DWORD PTR tv223[ebp+4]
	ja	SHORT $LN6@Read@6
	jb	SHORT $LN15@Read@6
	mov	eax, DWORD PTR _offsetInCache$[ebp]
	cmp	eax, DWORD PTR tv223[ebp]
	ja	SHORT $LN6@Read@6
$LN15@Read@6:
	mov	ecx, DWORD PTR _offsetInCache$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+52]
	sub	eax, ecx
	cmp	DWORD PTR _size$[ebp], eax
	ja	SHORT $LN6@Read@6
; Line 283
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN5@Read@6
; Line 284
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _offsetInCache$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+48]
	push	edx
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN5@Read@6:
; Line 286
	jmp	$LN4@Read@6
$LN6@Read@6:
; Line 288
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv236[ebp], edx
	mov	eax, DWORD PTR tv236[ebp]
	mov	ecx, DWORD PTR _newPos$[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	jne	SHORT $LN16@Read@6
	mov	edx, DWORD PTR tv236[ebp]
	mov	eax, DWORD PTR _newPos$[ebp+4]
	cmp	eax, DWORD PTR [edx+28]
	je	SHORT $LN3@Read@6
$LN16@Read@6:
; Line 290
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _newPos$[ebp]
	mov	DWORD PTR [ecx+24], edx
	mov	eax, DWORD PTR _newPos$[ebp+4]
	mov	DWORD PTR [ecx+28], eax
; Line 291
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SeekToPhys@CLimitedCachedInStream@@AAEJXZ ; CLimitedCachedInStream::SeekToPhys
	mov	DWORD PTR ___result_$67607[ebp], eax
	cmp	DWORD PTR ___result_$67607[ebp], 0
	je	SHORT $LN3@Read@6
	mov	eax, DWORD PTR ___result_$67607[ebp]
	jmp	SHORT $LN10@Read@6
$LN3@Read@6:
; Line 293
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->
	mov	DWORD PTR tv143[ebp], eax
	mov	esi, esp
	lea	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv143[ebp]
	push	ecx
	mov	edx, DWORD PTR tv143[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _res$[ebp], eax
; Line 294
	mov	edx, DWORD PTR _size$[ebp]
	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [ecx+24]
	adc	eax, DWORD PTR [ecx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], edx
	mov	DWORD PTR [ecx+28], eax
$LN4@Read@6:
; Line 296
	cmp	DWORD PTR _processedSize$[ebp], 0
	je	SHORT $LN1@Read@6
; Line 297
	mov	edx, DWORD PTR _processedSize$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx], eax
$LN1@Read@6:
; Line 298
	mov	ecx, DWORD PTR _size$[ebp]
	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+16]
	adc	edx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], ecx
	mov	DWORD PTR [eax+20], edx
; Line 299
	mov	eax, DWORD PTR _res$[ebp]
$LN10@Read@6:
; Line 300
	pop	edi
	pop	esi
	add	esp, 72					; 00000048H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Read@CLimitedCachedInStream@@UAGJPAXIPAI@Z ENDP	; CLimitedCachedInStream::Read
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SeekToPhys@CLimitedCachedInStream@@AAEJXZ
_TEXT	SEGMENT
tv68 = -8						; size = 4
_this$ = -4						; size = 4
?SeekToPhys@CLimitedCachedInStream@@AAEJXZ PROC		; CLimitedCachedInStream::SeekToPhys, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\limitedstreams.h
; Line 197
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->
	mov	DWORD PTR tv68[ebp], eax
	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR [eax+24]
	push	edx
	mov	eax, DWORD PTR tv68[ebp]
	push	eax
	mov	ecx, DWORD PTR tv68[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?SeekToPhys@CLimitedCachedInStream@@AAEJXZ ENDP		; CLimitedCachedInStream::SeekToPhys
_TEXT	ENDS
PUBLIC	?Seek@CLimitedCachedInStream@@UAGJ_JIPA_K@Z	; CLimitedCachedInStream::Seek
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv64 = -4						; size = 4
_this$ = 8						; size = 4
_offset$ = 12						; size = 8
_seekOrigin$ = 20					; size = 4
_newPosition$ = 24					; size = 4
?Seek@CLimitedCachedInStream@@UAGJ_JIPA_K@Z PROC	; CLimitedCachedInStream::Seek
; File c:\workspace\7z1505-src\cpp\7zip\common\limitedstreams.cpp
; Line 303
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 304
	mov	eax, DWORD PTR _seekOrigin$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 0
	je	SHORT $LN6@Seek@5
	cmp	DWORD PTR tv64[ebp], 1
	je	SHORT $LN5@Seek@5
	cmp	DWORD PTR tv64[ebp], 2
	je	SHORT $LN4@Seek@5
	jmp	SHORT $LN3@Seek@5
$LN6@Seek@5:
; Line 306
	jmp	SHORT $LN7@Seek@5
$LN5@Seek@5:
; Line 307
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _offset$[ebp]
	add	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _offset$[ebp+4]
	adc	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR _offset$[ebp], edx
	mov	DWORD PTR _offset$[ebp+4], eax
	jmp	SHORT $LN7@Seek@5
$LN4@Seek@5:
; Line 308
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _offset$[ebp]
	add	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _offset$[ebp+4]
	adc	eax, DWORD PTR [ecx+36]
	mov	DWORD PTR _offset$[ebp], edx
	mov	DWORD PTR _offset$[ebp+4], eax
	jmp	SHORT $LN7@Seek@5
$LN3@Seek@5:
; Line 309
	mov	eax, -2147287039			; 80030001H
	jmp	SHORT $LN9@Seek@5
$LN7@Seek@5:
; Line 311
	cmp	DWORD PTR _offset$[ebp+4], 0
	jg	SHORT $LN2@Seek@5
	jl	SHORT $LN11@Seek@5
	cmp	DWORD PTR _offset$[ebp], 0
	jae	SHORT $LN2@Seek@5
$LN11@Seek@5:
; Line 312
	mov	eax, -2147024765			; 80070083H
	jmp	SHORT $LN9@Seek@5
$LN2@Seek@5:
; Line 313
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [ecx+16], edx
	mov	eax, DWORD PTR _offset$[ebp+4]
	mov	DWORD PTR [ecx+20], eax
; Line 314
	cmp	DWORD PTR _newPosition$[ebp], 0
	je	SHORT $LN1@Seek@5
; Line 315
	mov	ecx, DWORD PTR _newPosition$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+4], edx
$LN1@Seek@5:
; Line 316
	xor	eax, eax
$LN9@Seek@5:
; Line 317
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?Seek@CLimitedCachedInStream@@UAGJ_JIPA_K@Z ENDP	; CLimitedCachedInStream::Seek
_TEXT	ENDS
PUBLIC	??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator->
PUBLIC	?Write@CTailOutStream@@UAGJPBXIPAI@Z		; CTailOutStream::Write
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv147 = -28						; size = 4
tv146 = -24						; size = 4
tv72 = -20						; size = 4
_res$ = -16						; size = 4
_cur$ = -8						; size = 4
_this$ = 8						; size = 4
_data$ = 12						; size = 4
_size$ = 16						; size = 4
_processedSize$ = 20					; size = 4
?Write@CTailOutStream@@UAGJPBXIPAI@Z PROC		; CTailOutStream::Write
; Line 320
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 322
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator->
	mov	DWORD PTR tv72[ebp], eax
	mov	esi, esp
	lea	eax, DWORD PTR _cur$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	mov	eax, DWORD PTR tv72[ebp]
	push	eax
	mov	ecx, DWORD PTR tv72[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _res$[ebp], eax
; Line 323
	cmp	DWORD PTR _processedSize$[ebp], 0
	je	SHORT $LN2@Write@2
; Line 324
	mov	ecx, DWORD PTR _processedSize$[ebp]
	mov	edx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [ecx], edx
$LN2@Write@2:
; Line 325
	mov	eax, DWORD PTR _cur$[ebp]
	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [edx+8]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx
; Line 326
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv146[ebp], eax
	mov	DWORD PTR tv147[ebp], ecx
	mov	edx, DWORD PTR tv146[ebp]
	mov	eax, DWORD PTR tv147[ebp]
	mov	ecx, DWORD PTR [edx+20]
	cmp	ecx, DWORD PTR [eax+12]
	ja	SHORT $LN1@Write@2
	jb	SHORT $LN5@Write@2
	mov	edx, DWORD PTR tv146[ebp]
	mov	eax, DWORD PTR tv147[ebp]
	mov	ecx, DWORD PTR [edx+16]
	cmp	ecx, DWORD PTR [eax+8]
	jae	SHORT $LN1@Write@2
$LN5@Write@2:
; Line 327
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+16], ecx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+20], eax
$LN1@Write@2:
; Line 328
	mov	eax, DWORD PTR _res$[ebp]
; Line 329
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@Write@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	1
$LN8@Write@2:
	DD	1
	DD	$LN7@Write@2
$LN7@Write@2:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN6@Write@2
$LN6@Write@2:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	0
?Write@CTailOutStream@@UAGJPBXIPAI@Z ENDP		; CTailOutStream::Write
_TEXT	ENDS
PUBLIC	?Seek@CTailOutStream@@UAGJ_JIPA_K@Z		; CTailOutStream::Seek
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv80 = -8						; size = 4
tv64 = -4						; size = 4
_this$ = 8						; size = 4
_offset$ = 12						; size = 8
_seekOrigin$ = 20					; size = 4
_newPosition$ = 24					; size = 4
?Seek@CTailOutStream@@UAGJ_JIPA_K@Z PROC		; CTailOutStream::Seek
; Line 332
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 333
	mov	eax, DWORD PTR _seekOrigin$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 0
	je	SHORT $LN6@Seek@6
	cmp	DWORD PTR tv64[ebp], 1
	je	SHORT $LN5@Seek@6
	cmp	DWORD PTR tv64[ebp], 2
	je	SHORT $LN4@Seek@6
	jmp	SHORT $LN3@Seek@6
$LN6@Seek@6:
; Line 335
	jmp	SHORT $LN7@Seek@6
$LN5@Seek@6:
; Line 336
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _offset$[ebp]
	add	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _offset$[ebp+4]
	adc	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _offset$[ebp], edx
	mov	DWORD PTR _offset$[ebp+4], eax
	jmp	SHORT $LN7@Seek@6
$LN4@Seek@6:
; Line 337
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _offset$[ebp]
	add	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _offset$[ebp+4]
	adc	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR _offset$[ebp], edx
	mov	DWORD PTR _offset$[ebp+4], eax
	jmp	SHORT $LN7@Seek@6
$LN3@Seek@6:
; Line 338
	mov	eax, -2147287039			; 80030001H
	jmp	SHORT $LN9@Seek@6
$LN7@Seek@6:
; Line 340
	cmp	DWORD PTR _offset$[ebp+4], 0
	jg	SHORT $LN2@Seek@6
	jl	SHORT $LN11@Seek@6
	cmp	DWORD PTR _offset$[ebp], 0
	jae	SHORT $LN2@Seek@6
$LN11@Seek@6:
; Line 341
	mov	eax, -2147024765			; 80070083H
	jmp	SHORT $LN9@Seek@6
$LN2@Seek@6:
; Line 342
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _offset$[ebp+4]
	mov	DWORD PTR [ecx+12], eax
; Line 343
	cmp	DWORD PTR _newPosition$[ebp], 0
	je	SHORT $LN1@Seek@6
; Line 344
	mov	ecx, DWORD PTR _newPosition$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+4], edx
$LN1@Seek@6:
; Line 345
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator->
	mov	DWORD PTR tv80[ebp], eax
	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+32]
	add	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [eax+36]
	adc	eax, DWORD PTR [ecx+12]
	push	eax
	push	edx
	mov	ecx, DWORD PTR tv80[ebp]
	push	ecx
	mov	edx, DWORD PTR tv80[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN9@Seek@6:
; Line 346
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?Seek@CTailOutStream@@UAGJ_JIPA_K@Z ENDP		; CTailOutStream::Seek
_TEXT	ENDS
PUBLIC	?SetSize@CTailOutStream@@UAGJ_K@Z		; CTailOutStream::SetSize
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv69 = -4						; size = 4
_this$ = 8						; size = 4
_newSize$ = 12						; size = 8
?SetSize@CTailOutStream@@UAGJ_K@Z PROC			; CTailOutStream::SetSize
; Line 349
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 350
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newSize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR _newSize$[ebp+4]
	mov	DWORD PTR [eax+20], edx
; Line 351
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator->
	mov	DWORD PTR tv69[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	add	ecx, DWORD PTR _newSize$[ebp]
	mov	edx, DWORD PTR [eax+36]
	adc	edx, DWORD PTR _newSize$[ebp+4]
	mov	esi, esp
	push	edx
	push	ecx
	mov	eax, DWORD PTR tv69[ebp]
	push	eax
	mov	ecx, DWORD PTR tv69[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 352
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetSize@CTailOutStream@@UAGJ_K@Z ENDP			; CTailOutStream::SetSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z PROC ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@CMyComPtr
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z ENDP ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@2:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ PROC ; CMyComPtr<ISequentialInStream>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ENDP ; CMyComPtr<ISequentialInStream>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Detach@?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@XZ
_TEXT	SEGMENT
_pt$ = -8						; size = 4
_this$ = -4						; size = 4
?Detach@?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@XZ PROC ; CMyComPtr<ISequentialInStream>::Detach, COMDAT
; _this$ = ecx
; Line 45
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 46
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pt$[ebp], ecx
; Line 47
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0
; Line 48
	mov	eax, DWORD PTR _pt$[ebp]
; Line 49
	mov	esp, ebp
	pop	ebp
	ret	0
?Detach@?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@XZ ENDP ; CMyComPtr<ISequentialInStream>::Detach
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIInStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UIInStream@@@@QAE@XZ PROC		; CMyComPtr<IInStream>::CMyComPtr<IInStream>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UIInStream@@@@QAE@XZ ENDP		; CMyComPtr<IInStream>::CMyComPtr<IInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIInStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIInStream@@@@QAE@XZ PROC		; CMyComPtr<IInStream>::~CMyComPtr<IInStream>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@3:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIInStream@@@@QAE@XZ ENDP		; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ PROC	; CMyComPtr<IInStream>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ENDP	; CMyComPtr<IInStream>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z PROC ; CMyComPtr<IInStream>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ENDP ; CMyComPtr<IInStream>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@I@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@I@@QBEIXZ PROC			; CRecordVector<unsigned int>::Size, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@I@@QBEIXZ ENDP			; CRecordVector<unsigned int>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@I@@QAEAAII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@I@@QAEAAII@Z PROC			; CRecordVector<unsigned int>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@I@@QAEAAII@Z ENDP			; CRecordVector<unsigned int>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@UCSeekExtent@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@UCSeekExtent@@@@QBEIXZ PROC	; CRecordVector<CSeekExtent>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@UCSeekExtent@@@@QBEIXZ ENDP	; CRecordVector<CSeekExtent>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@UCSeekExtent@@@@QAEAAUCSeekExtent@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@UCSeekExtent@@@@QAEAAUCSeekExtent@@I@Z PROC ; CRecordVector<CSeekExtent>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@UCSeekExtent@@@@QAEAAUCSeekExtent@@I@Z ENDP ; CRecordVector<CSeekExtent>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Back@?$CRecordVector@UCSeekExtent@@@@QAEAAUCSeekExtent@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Back@?$CRecordVector@UCSeekExtent@@@@QAEAAUCSeekExtent@@XZ PROC ; CRecordVector<CSeekExtent>::Back, COMDAT
; _this$ = ecx
; Line 232
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	sub	eax, 1
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	esp, ebp
	pop	ebp
	ret	0
?Back@?$CRecordVector@UCSeekExtent@@@@QAEAAUCSeekExtent@@XZ ENDP ; CRecordVector<CSeekExtent>::Back
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ PROC ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ENDP ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ PROC ; CMyComPtr<ISequentialOutStream>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ENDP ; CMyComPtr<ISequentialOutStream>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ PROC	; CMyComPtr<IOutStream>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ENDP	; CMyComPtr<IOutStream>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$MyMin@_K@@YG_K_K0@Z
_TEXT	SEGMENT
tv65 = -8						; size = 8
_a$ = 8							; size = 8
_b$ = 16						; size = 8
??$MyMin@_K@@YG_K_K0@Z PROC				; MyMin<unsigned __int64>, COMDAT
; File c:\workspace\7z1505-src\cpp\common\defs.h
; Line 7
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _a$[ebp+4]
	cmp	eax, DWORD PTR _b$[ebp+4]
	ja	SHORT $LN3@MyMin
	jb	SHORT $LN5@MyMin
	mov	ecx, DWORD PTR _a$[ebp]
	cmp	ecx, DWORD PTR _b$[ebp]
	jae	SHORT $LN3@MyMin
$LN5@MyMin:
	mov	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR tv65[ebp], edx
	mov	eax, DWORD PTR _a$[ebp+4]
	mov	DWORD PTR tv65[ebp+4], eax
	jmp	SHORT $LN4@MyMin
$LN3@MyMin:
	mov	ecx, DWORD PTR _b$[ebp]
	mov	DWORD PTR tv65[ebp], ecx
	mov	edx, DWORD PTR _b$[ebp+4]
	mov	DWORD PTR tv65[ebp+4], edx
$LN4@MyMin:
	mov	eax, DWORD PTR tv65[ebp]
	mov	edx, DWORD PTR tv65[ebp+4]
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??$MyMin@_K@@YG_K_K0@Z ENDP				; MyMin<unsigned __int64>
_TEXT	ENDS
END
