; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\CPP\7zip\Crypto\ZipStrong.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?Update@CContext@NSha1@NCrypto@@QAEXPBEI@Z	; NCrypto::NSha1::CContext::Update
PUBLIC	?Init@CContextBase@NSha1@NCrypto@@QAEXXZ	; NCrypto::NSha1::CContextBase::Init
PUBLIC	__$ArrayPad$
PUBLIC	?SetPassword@CKeyInfo@NZipStrong@NCrypto@@QAEXPBEI@Z ; NCrypto::NZipStrong::CKeyInfo::SetPassword
EXTRN	___security_cookie:DWORD
EXTRN	__RTC_CheckEsp:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\cpp\7zip\crypto\zipstrong.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_sha$ = -108						; size = 96
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_data$ = 8						; size = 4
_size$ = 12						; size = 4
?SetPassword@CKeyInfo@NZipStrong@NCrypto@@QAEXPBEI@Z PROC ; NCrypto::NZipStrong::CKeyInfo::SetPassword
; _this$ = ecx
; Line 46
	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-112]
	mov	ecx, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 48
	lea	ecx, DWORD PTR _sha$[ebp]
	call	?Init@CContextBase@NSha1@NCrypto@@QAEXXZ ; NCrypto::NSha1::CContextBase::Init
; Line 49
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _sha$[ebp]
	call	?Update@CContext@NSha1@NCrypto@@QAEXPBEI@Z ; NCrypto::NSha1::CContext::Update
; Line 50
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	lea	eax, DWORD PTR _sha$[ebp]
	push	eax
	call	?DeriveKey@NZipStrong@NCrypto@@YGXAAVCContext@NSha1@2@PAE@Z ; NCrypto::NZipStrong::DeriveKey
; Line 51
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@SetPasswor
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 112				; 00000070H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN5@SetPasswor:
	DD	1
	DD	$LN4@SetPasswor
$LN4@SetPasswor:
	DD	-108					; ffffff94H
	DD	96					; 00000060H
	DD	$LN3@SetPasswor
$LN3@SetPasswor:
	DB	115					; 00000073H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	0
?SetPassword@CKeyInfo@NZipStrong@NCrypto@@QAEXPBEI@Z ENDP ; NCrypto::NZipStrong::CKeyInfo::SetPassword
_TEXT	ENDS
EXTRN	_Sha1_Init@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Init@CContextBase@NSha1@NCrypto@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Init@CContextBase@NSha1@NCrypto@@QAEXXZ PROC		; NCrypto::NSha1::CContextBase::Init, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\crypto\sha1cls.h
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	_Sha1_Init@4
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Init@CContextBase@NSha1@NCrypto@@QAEXXZ ENDP		; NCrypto::NSha1::CContextBase::Init
_TEXT	ENDS
EXTRN	_Sha1_Update@12:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Update@CContext@NSha1@NCrypto@@QAEXPBEI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_data$ = 8						; size = 4
_size$ = 12						; size = 4
?Update@CContext@NSha1@NCrypto@@QAEXPBEI@Z PROC		; NCrypto::NSha1::CContext::Update, COMDAT
; _this$ = ecx
; Line 30
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	_Sha1_Update@12
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Update@CContext@NSha1@NCrypto@@QAEXPBEI@Z ENDP		; NCrypto::NSha1::CContext::Update
_TEXT	ENDS
PUBLIC	?Final@CContext@NSha1@NCrypto@@QAEXPAE@Z	; NCrypto::NSha1::CContext::Final
PUBLIC	__$ArrayPad$
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_temp$ = -76						; size = 40
_digest$ = -28						; size = 20
__$ArrayPad$ = -4					; size = 4
_sha$ = 8						; size = 4
_key$ = 12						; size = 4
?DeriveKey@NZipStrong@NCrypto@@YGXAAVCContext@NSha1@2@PAE@Z PROC ; NCrypto::NZipStrong::DeriveKey
; File c:\workspace\7z1505-src\cpp\7zip\crypto\zipstrong.cpp
; Line 36
	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	edi
	lea	edi, DWORD PTR [ebp-80]
	mov	ecx, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 38
	lea	eax, DWORD PTR _digest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sha$[ebp]
	call	?Final@CContext@NSha1@NCrypto@@QAEXPAE@Z ; NCrypto::NSha1::CContext::Final
; Line 40
	lea	ecx, DWORD PTR _temp$[ebp]
	push	ecx
	push	54					; 00000036H
	lea	edx, DWORD PTR _digest$[ebp]
	push	edx
	call	?DeriveKey2@NZipStrong@NCrypto@@YGXPBEEPAE@Z ; NCrypto::NZipStrong::DeriveKey2
; Line 41
	lea	eax, DWORD PTR _temp$[ebp+20]
	push	eax
	push	92					; 0000005cH
	lea	ecx, DWORD PTR _digest$[ebp]
	push	ecx
	call	?DeriveKey2@NZipStrong@NCrypto@@YGXPBEEPAE@Z ; NCrypto::NZipStrong::DeriveKey2
; Line 42
	push	32					; 00000020H
	lea	edx, DWORD PTR _temp$[ebp]
	push	edx
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 43
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@DeriveKey
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 80					; 00000050H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN6@DeriveKey:
	DD	2
	DD	$LN5@DeriveKey
$LN5@DeriveKey:
	DD	-28					; ffffffe4H
	DD	20					; 00000014H
	DD	$LN3@DeriveKey
	DD	-76					; ffffffb4H
	DD	40					; 00000028H
	DD	$LN4@DeriveKey
$LN4@DeriveKey:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
$LN3@DeriveKey:
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
?DeriveKey@NZipStrong@NCrypto@@YGXAAVCContext@NSha1@2@PAE@Z ENDP ; NCrypto::NZipStrong::DeriveKey
_TEXT	ENDS
EXTRN	_Sha1_Final@8:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Final@CContext@NSha1@NCrypto@@QAEXPAE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_digest$ = 8						; size = 4
?Final@CContext@NSha1@NCrypto@@QAEXPAE@Z PROC		; NCrypto::NSha1::CContext::Final, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\crypto\sha1cls.h
; Line 32
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _digest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	_Sha1_Final@8
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Final@CContext@NSha1@NCrypto@@QAEXPAE@Z ENDP		; NCrypto::NSha1::CContext::Final
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_memset:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_sha$ = -180						; size = 96
_i$66956 = -80						; size = 4
_buf$ = -72						; size = 64
__$ArrayPad$ = -4					; size = 4
_digest$ = 8						; size = 4
_c$ = 12						; size = 1
_dest$ = 16						; size = 4
?DeriveKey2@NZipStrong@NCrypto@@YGXPBEEPAE@Z PROC	; NCrypto::NZipStrong::DeriveKey2
; File c:\workspace\7z1505-src\cpp\7zip\crypto\zipstrong.cpp
; Line 24
	push	ebp
	mov	ebp, esp
	sub	esp, 184				; 000000b8H
	push	edi
	lea	edi, DWORD PTR [ebp-184]
	mov	ecx, 46					; 0000002eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 26
	push	64					; 00000040H
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 27
	mov	DWORD PTR _i$66956[ebp], 0
	jmp	SHORT $LN3@DeriveKey2
$LN2@DeriveKey2:
	mov	edx, DWORD PTR _i$66956[ebp]
	add	edx, 1
	mov	DWORD PTR _i$66956[ebp], edx
$LN3@DeriveKey2:
	cmp	DWORD PTR _i$66956[ebp], 20		; 00000014H
	jae	SHORT $LN1@DeriveKey2
; Line 28
	mov	eax, DWORD PTR _digest$[ebp]
	add	eax, DWORD PTR _i$66956[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _i$66956[ebp]
	movzx	eax, BYTE PTR _buf$[ebp+edx]
	xor	eax, ecx
	mov	ecx, DWORD PTR _i$66956[ebp]
	mov	BYTE PTR _buf$[ebp+ecx], al
	jmp	SHORT $LN2@DeriveKey2
$LN1@DeriveKey2:
; Line 30
	lea	ecx, DWORD PTR _sha$[ebp]
	call	?Init@CContextBase@NSha1@NCrypto@@QAEXXZ ; NCrypto::NSha1::CContextBase::Init
; Line 31
	push	64					; 00000040H
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	lea	ecx, DWORD PTR _sha$[ebp]
	call	?Update@CContext@NSha1@NCrypto@@QAEXPBEI@Z ; NCrypto::NSha1::CContext::Update
; Line 32
	mov	eax, DWORD PTR _dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR _sha$[ebp]
	call	?Final@CContext@NSha1@NCrypto@@QAEXPAE@Z ; NCrypto::NSha1::CContext::Final
; Line 33
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@DeriveKey2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 184				; 000000b8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN9@DeriveKey2:
	DD	2
	DD	$LN8@DeriveKey2
$LN8@DeriveKey2:
	DD	-72					; ffffffb8H
	DD	64					; 00000040H
	DD	$LN6@DeriveKey2
	DD	-180					; ffffff4cH
	DD	96					; 00000060H
	DD	$LN7@DeriveKey2
$LN7@DeriveKey2:
	DB	115					; 00000073H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	0
$LN6@DeriveKey2:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
?DeriveKey2@NZipStrong@NCrypto@@YGXPBEEPAE@Z ENDP	; NCrypto::NZipStrong::DeriveKey2
_TEXT	ENDS
PUBLIC	?CryptoSetPassword@CBaseCoder@NZipStrong@NCrypto@@UAGJPBEI@Z ; NCrypto::NZipStrong::CBaseCoder::CryptoSetPassword
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = 8						; size = 4
_data$ = 12						; size = 4
_size$ = 16						; size = 4
?CryptoSetPassword@CBaseCoder@NZipStrong@NCrypto@@UAGJPBEI@Z PROC ; NCrypto::NZipStrong::CBaseCoder::CryptoSetPassword
; Line 54
	push	ebp
	mov	ebp, esp
; Line 55
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?SetPassword@CKeyInfo@NZipStrong@NCrypto@@QAEXPBEI@Z ; NCrypto::NZipStrong::CKeyInfo::SetPassword
; Line 56
	xor	eax, eax
; Line 57
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?CryptoSetPassword@CBaseCoder@NZipStrong@NCrypto@@UAGJPBEI@Z ENDP ; NCrypto::NZipStrong::CBaseCoder::CryptoSetPassword
_TEXT	ENDS
PUBLIC	?Init@CBaseCoder@NZipStrong@NCrypto@@UAGJXZ	; NCrypto::NZipStrong::CBaseCoder::Init
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = 8						; size = 4
?Init@CBaseCoder@NZipStrong@NCrypto@@UAGJXZ PROC	; NCrypto::NZipStrong::CBaseCoder::Init
; Line 60
	push	ebp
	mov	ebp, esp
; Line 61
	xor	eax, eax
; Line 62
	pop	ebp
	ret	4
?Init@CBaseCoder@NZipStrong@NCrypto@@UAGJXZ ENDP	; NCrypto::NZipStrong::CBaseCoder::Init
_TEXT	ENDS
PUBLIC	??B?$CBuffer@E@@QAEPAEXZ			; CBuffer<unsigned char>::operator unsigned char *
PUBLIC	?Alloc@?$CBuffer@E@@QAEXI@Z			; CBuffer<unsigned char>::Alloc
PUBLIC	?Size@?$CBuffer@E@@QBEIXZ			; CBuffer<unsigned char>::Size
PUBLIC	?ReadHeader@CDecoder@NZipStrong@NCrypto@@QAEJPAUISequentialInStream@@I_K@Z ; NCrypto::NZipStrong::CDecoder::ReadHeader
EXTRN	?ReadStream_FALSE@@YGJPAUISequentialInStream@@PAXI@Z:PROC ; ReadStream_FALSE
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_kAlign$ = -32						; size = 4
___result__$67003 = -28					; size = 4
___result__$66999 = -24					; size = 4
___result__$66990 = -20					; size = 4
_temp$ = -12						; size = 4
_this$ = -4						; size = 4
_inStream$ = 8						; size = 4
_crc$ = 12						; size = 4
_unpackSize$ = 16					; size = 8
?ReadHeader@CDecoder@NZipStrong@NCrypto@@QAEJPAUISequentialInStream@@I_K@Z PROC ; NCrypto::NZipStrong::CDecoder::ReadHeader
; _this$ = ecx
; Line 65
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 67
	push	2
	lea	eax, DWORD PTR _temp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _inStream$[ebp]
	push	ecx
	call	?ReadStream_FALSE@@YGJPAUISequentialInStream@@PAXI@Z ; ReadStream_FALSE
	mov	DWORD PTR ___result__$66990[ebp], eax
	cmp	DWORD PTR ___result__$66990[ebp], 0
	je	SHORT $LN10@ReadHeader
	mov	eax, DWORD PTR ___result__$66990[ebp]
	jmp	$LN11@ReadHeader
$LN10@ReadHeader:
; Line 68
	movzx	edx, WORD PTR _temp$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+384], edx
; Line 69
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+384], 0
	jne	SHORT $LN9@ReadHeader
; Line 71
	push	16					; 00000010H
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 388				; 00000184H
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 72
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _crc$[ebp]
	mov	DWORD PTR [eax+388], ecx
; Line 73
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _unpackSize$[ebp]
	mov	DWORD PTR [edx+392], eax
	mov	ecx, DWORD PTR _unpackSize$[ebp+4]
	mov	DWORD PTR [edx+396], ecx
; Line 74
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+384], 12			; 0000000cH
	jmp	SHORT $LN8@ReadHeader
$LN9@ReadHeader:
; Line 76
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+384], 16			; 00000010H
	jne	SHORT $LN7@ReadHeader
; Line 78
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+384]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 388				; 00000184H
	push	eax
	mov	ecx, DWORD PTR _inStream$[ebp]
	push	ecx
	call	?ReadStream_FALSE@@YGJPAUISequentialInStream@@PAXI@Z ; ReadStream_FALSE
	mov	DWORD PTR ___result__$66999[ebp], eax
	cmp	DWORD PTR ___result__$66999[ebp], 0
	je	SHORT $LN6@ReadHeader
	mov	eax, DWORD PTR ___result__$66999[ebp]
	jmp	$LN11@ReadHeader
$LN6@ReadHeader:
; Line 80
	jmp	SHORT $LN8@ReadHeader
$LN7@ReadHeader:
; Line 81
	mov	eax, -2147467263			; 80004001H
	jmp	$LN11@ReadHeader
$LN8@ReadHeader:
; Line 82
	push	4
	lea	edx, DWORD PTR _temp$[ebp]
	push	edx
	mov	eax, DWORD PTR _inStream$[ebp]
	push	eax
	call	?ReadStream_FALSE@@YGJPAUISequentialInStream@@PAXI@Z ; ReadStream_FALSE
	mov	DWORD PTR ___result__$67003[ebp], eax
	cmp	DWORD PTR ___result__$67003[ebp], 0
	je	SHORT $LN4@ReadHeader
	mov	eax, DWORD PTR ___result__$67003[ebp]
	jmp	$LN11@ReadHeader
$LN4@ReadHeader:
; Line 83
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [ecx+404], edx
; Line 84
	mov	DWORD PTR _kAlign$[ebp], 16		; 00000010H
; Line 85
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+404], 16			; 00000010H
	jb	SHORT $LN2@ReadHeader
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+404], 262144		; 00040000H
	jbe	SHORT $LN3@ReadHeader
$LN2@ReadHeader:
; Line 86
	mov	eax, -2147467263			; 80004001H
	jmp	SHORT $LN11@ReadHeader
$LN3@ReadHeader:
; Line 87
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+404]
	add	esi, 16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 372				; 00000174H
	call	?Size@?$CBuffer@E@@QBEIXZ		; CBuffer<unsigned char>::Size
	cmp	esi, eax
	jbe	SHORT $LN1@ReadHeader
; Line 89
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+404]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 372				; 00000174H
	call	?Alloc@?$CBuffer@E@@QAEXI@Z		; CBuffer<unsigned char>::Alloc
; Line 90
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 372				; 00000174H
	call	??B?$CBuffer@E@@QAEPAEXZ		; CBuffer<unsigned char>::operator unsigned char *
	add	eax, 15					; 0000000fH
	and	eax, -16				; fffffff0H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+380], eax
$LN1@ReadHeader:
; Line 92
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+404]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+380]
	push	eax
	mov	ecx, DWORD PTR _inStream$[ebp]
	push	ecx
	call	?ReadStream_FALSE@@YGJPAUISequentialInStream@@PAXI@Z ; ReadStream_FALSE
$LN11@ReadHeader:
; Line 93
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@ReadHeader
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	3
$LN15@ReadHeader:
	DD	1
	DD	$LN14@ReadHeader
$LN14@ReadHeader:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN13@ReadHeader
$LN13@ReadHeader:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
?ReadHeader@CDecoder@NZipStrong@NCrypto@@QAEJPAUISequentialInStream@@I_K@Z ENDP ; NCrypto::NZipStrong::CDecoder::ReadHeader
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?Init_and_CheckPassword@CDecoder@NZipStrong@NCrypto@@QAEJAA_N@Z ; NCrypto::NZipStrong::CDecoder::Init_and_CheckPassword
EXTRN	@CrcCalc@8:PROC
EXTRN	__imp__memmove:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
___result__$67074 = -204				; size = 4
___result__$67072 = -200				; size = 4
_sha$ = -192						; size = 96
_fileKey$ = -88						; size = 32
___result__$67068 = -52					; size = 4
___result__$67066 = -48					; size = 4
___result__$67064 = -44					; size = 4
_validSize$ = -40					; size = 4
_validData$ = -36					; size = 4
_rdSize$ = -32						; size = 4
_flags$ = -28						; size = 2
_bitLen$ = -24						; size = 2
_algId$ = -20						; size = 2
_format$ = -16						; size = 2
_p$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_passwOK$ = 8						; size = 4
?Init_and_CheckPassword@CDecoder@NZipStrong@NCrypto@@QAEJAA_N@Z PROC ; NCrypto::NZipStrong::CDecoder::Init_and_CheckPassword
; _this$ = ecx
; Line 96
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 97
	mov	eax, DWORD PTR _passwOK$[ebp]
	mov	BYTE PTR [eax], 0
; Line 98
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+404], 16			; 00000010H
	jae	SHORT $LN19@Init_and_C
; Line 99
	mov	eax, -2147467263			; 80004001H
	jmp	$LN20@Init_and_C
$LN19@Init_and_C:
; Line 100
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+380]
	mov	DWORD PTR _p$[ebp], eax
; Line 101
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR _format$[ebp], dx
; Line 102
	movzx	eax, WORD PTR _format$[ebp]
	cmp	eax, 3
	je	SHORT $LN18@Init_and_C
; Line 103
	mov	eax, -2147467263			; 80004001H
	jmp	$LN20@Init_and_C
$LN18@Init_and_C:
; Line 104
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dx, WORD PTR [ecx+2]
	mov	WORD PTR _algId$[ebp], dx
; Line 105
	movzx	eax, WORD PTR _algId$[ebp]
	cmp	eax, 26126				; 0000660eH
	jge	SHORT $LN17@Init_and_C
; Line 106
	mov	eax, -2147467263			; 80004001H
	jmp	$LN20@Init_and_C
$LN17@Init_and_C:
; Line 107
	movzx	ecx, WORD PTR _algId$[ebp]
	sub	ecx, 26126				; 0000660eH
	mov	WORD PTR _algId$[ebp], cx
; Line 108
	movzx	edx, WORD PTR _algId$[ebp]
	cmp	edx, 2
	jle	SHORT $LN16@Init_and_C
; Line 109
	mov	eax, -2147467263			; 80004001H
	jmp	$LN20@Init_and_C
$LN16@Init_and_C:
; Line 110
	mov	eax, DWORD PTR _p$[ebp]
	mov	cx, WORD PTR [eax+4]
	mov	WORD PTR _bitLen$[ebp], cx
; Line 111
	mov	edx, DWORD PTR _p$[ebp]
	mov	ax, WORD PTR [edx+6]
	mov	WORD PTR _flags$[ebp], ax
; Line 112
	movzx	ecx, WORD PTR _algId$[ebp]
	shl	ecx, 6
	add	ecx, 128				; 00000080H
	movzx	edx, WORD PTR _bitLen$[ebp]
	cmp	ecx, edx
	je	SHORT $LN15@Init_and_C
; Line 113
	mov	eax, -2147467263			; 80004001H
	jmp	$LN20@Init_and_C
$LN15@Init_and_C:
; Line 114
	movzx	eax, WORD PTR _algId$[ebp]
	lea	ecx, DWORD PTR [eax*8+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+368], ecx
; Line 115
	movzx	eax, WORD PTR _flags$[ebp]
	and	eax, 1
	jne	SHORT $LN14@Init_and_C
; Line 116
	mov	eax, -2147467263			; 80004001H
	jmp	$LN20@Init_and_C
$LN14@Init_and_C:
; Line 117
	movzx	ecx, WORD PTR _flags$[ebp]
	and	ecx, 16384				; 00004000H
	je	SHORT $LN13@Init_and_C
; Line 120
	mov	eax, -2147467263			; 80004001H
	jmp	$LN20@Init_and_C
$LN13@Init_and_C:
; Line 123
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, WORD PTR [edx+8]
	mov	DWORD PTR _rdSize$[ebp], eax
; Line 124
	mov	ecx, DWORD PTR _rdSize$[ebp]
	and	ecx, 15					; 0000000fH
	jne	SHORT $LN11@Init_and_C
	mov	edx, DWORD PTR _rdSize$[ebp]
	add	edx, 16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR [eax+404]
	jbe	SHORT $LN12@Init_and_C
$LN11@Init_and_C:
; Line 125
	mov	eax, -2147467263			; 80004001H
	jmp	$LN20@Init_and_C
$LN12@Init_and_C:
; Line 126
	mov	esi, esp
	mov	ecx, DWORD PTR _rdSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 10					; 0000000aH
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 127
	mov	ecx, DWORD PTR _rdSize$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx+16]
	mov	DWORD PTR _validData$[ebp], eax
; Line 128
	mov	ecx, DWORD PTR _validData$[ebp]
	cmp	DWORD PTR [ecx-6], 0
	je	SHORT $LN10@Init_and_C
; Line 129
	mov	eax, -2147467263			; 80004001H
	jmp	$LN20@Init_and_C
$LN10@Init_and_C:
; Line 130
	mov	edx, DWORD PTR _validData$[ebp]
	movzx	eax, WORD PTR [edx-2]
	mov	DWORD PTR _validSize$[ebp], eax
; Line 131
	mov	ecx, DWORD PTR _validSize$[ebp]
	and	ecx, 15					; 0000000fH
	jne	SHORT $LN8@Init_and_C
	mov	edx, DWORD PTR _validSize$[ebp]
	mov	eax, DWORD PTR _rdSize$[ebp]
	lea	ecx, DWORD PTR [eax+edx+16]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	ecx, DWORD PTR [edx+404]
	je	SHORT $LN9@Init_and_C
$LN8@Init_and_C:
; Line 132
	mov	eax, -2147467263			; 80004001H
	jmp	$LN20@Init_and_C
$LN9@Init_and_C:
; Line 136
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+368]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 336				; 00000150H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	eax
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$67064[ebp], eax
	cmp	DWORD PTR ___result__$67064[ebp], 0
	je	SHORT $LN7@Init_and_C
	mov	eax, DWORD PTR ___result__$67064[ebp]
	jmp	$LN20@Init_and_C
$LN7@Init_and_C:
; Line 137
	mov	esi, esp
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 388				; 00000184H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	edx
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$67066[ebp], eax
	cmp	DWORD PTR ___result__$67066[ebp], 0
	je	SHORT $LN6@Init_and_C
	mov	eax, DWORD PTR ___result__$67066[ebp]
	jmp	$LN20@Init_and_C
$LN6@Init_and_C:
; Line 138
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$67068[ebp], eax
	cmp	DWORD PTR ___result__$67068[ebp], 0
	je	SHORT $LN5@Init_and_C
	mov	eax, DWORD PTR ___result__$67068[ebp]
	jmp	$LN20@Init_and_C
$LN5@Init_and_C:
; Line 139
	mov	esi, esp
	mov	ecx, DWORD PTR _rdSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 144
	lea	ecx, DWORD PTR _sha$[ebp]
	call	?Init@CContextBase@NSha1@NCrypto@@QAEXXZ ; NCrypto::NSha1::CContextBase::Init
; Line 145
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+384]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 388				; 00000184H
	push	eax
	lea	ecx, DWORD PTR _sha$[ebp]
	call	?Update@CContext@NSha1@NCrypto@@QAEXPBEI@Z ; NCrypto::NSha1::CContext::Update
; Line 146
	mov	ecx, DWORD PTR _rdSize$[ebp]
	sub	ecx, 16					; 00000010H
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	lea	ecx, DWORD PTR _sha$[ebp]
	call	?Update@CContext@NSha1@NCrypto@@QAEXPBEI@Z ; NCrypto::NSha1::CContext::Update
; Line 147
	lea	eax, DWORD PTR _fileKey$[ebp]
	push	eax
	lea	ecx, DWORD PTR _sha$[ebp]
	push	ecx
	call	?DeriveKey@NZipStrong@NCrypto@@YGXAAVCContext@NSha1@2@PAE@Z ; NCrypto::NZipStrong::DeriveKey
; Line 149
	mov	esi, esp
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+368]
	push	eax
	lea	ecx, DWORD PTR _fileKey$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	edx
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$67072[ebp], eax
	cmp	DWORD PTR ___result__$67072[ebp], 0
	je	SHORT $LN4@Init_and_C
	mov	eax, DWORD PTR ___result__$67072[ebp]
	jmp	$LN20@Init_and_C
$LN4@Init_and_C:
; Line 150
	mov	esi, esp
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 388				; 00000184H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	ecx
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$67074[ebp], eax
	cmp	DWORD PTR ___result__$67074[ebp], 0
	je	SHORT $LN3@Init_and_C
	mov	eax, DWORD PTR ___result__$67074[ebp]
	jmp	SHORT $LN20@Init_and_C
$LN3@Init_and_C:
; Line 151
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 152
	mov	esi, esp
	mov	eax, DWORD PTR _validSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _validData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 154
	cmp	DWORD PTR _validSize$[ebp], 4
	jae	SHORT $LN2@Init_and_C
; Line 155
	mov	eax, -2147467263			; 80004001H
	jmp	SHORT $LN20@Init_and_C
$LN2@Init_and_C:
; Line 156
	mov	eax, DWORD PTR _validSize$[ebp]
	sub	eax, 4
	mov	DWORD PTR _validSize$[ebp], eax
; Line 157
	mov	edx, DWORD PTR _validSize$[ebp]
	mov	ecx, DWORD PTR _validData$[ebp]
	call	@CrcCalc@8
	mov	ecx, DWORD PTR _validData$[ebp]
	add	ecx, DWORD PTR _validSize$[ebp]
	cmp	DWORD PTR [ecx], eax
	je	SHORT $LN1@Init_and_C
; Line 158
	xor	eax, eax
	jmp	SHORT $LN20@Init_and_C
$LN1@Init_and_C:
; Line 159
	mov	edx, DWORD PTR _passwOK$[ebp]
	mov	BYTE PTR [edx], 1
; Line 160
	xor	eax, eax
$LN20@Init_and_C:
; Line 161
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN25@Init_and_C
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN25@Init_and_C:
	DD	2
	DD	$LN24@Init_and_C
$LN24@Init_and_C:
	DD	-88					; ffffffa8H
	DD	32					; 00000020H
	DD	$LN22@Init_and_C
	DD	-192					; ffffff40H
	DD	96					; 00000060H
	DD	$LN23@Init_and_C
$LN23@Init_and_C:
	DB	115					; 00000073H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	0
$LN22@Init_and_C:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	75					; 0000004bH
	DB	101					; 00000065H
	DB	121					; 00000079H
	DB	0
?Init_and_CheckPassword@CDecoder@NZipStrong@NCrypto@@QAEJAA_N@Z ENDP ; NCrypto::NZipStrong::CDecoder::Init_and_CheckPassword
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CBuffer@E@@QAEPAEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CBuffer@E@@QAEPAEXZ PROC				; CBuffer<unsigned char>::operator unsigned char *, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mybuffer.h
; Line 39
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CBuffer@E@@QAEPAEXZ ENDP				; CBuffer<unsigned char>::operator unsigned char *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CBuffer@E@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CBuffer@E@@QBEIXZ PROC				; CBuffer<unsigned char>::Size, COMDAT
; _this$ = ecx
; Line 41
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CBuffer@E@@QBEIXZ ENDP				; CBuffer<unsigned char>::Size
_TEXT	ENDS
PUBLIC	?Free@?$CBuffer@E@@QAEXXZ			; CBuffer<unsigned char>::Free
EXTRN	??2@YAPAXI@Z:PROC				; operator new
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Alloc@?$CBuffer@E@@QAEXI@Z
_TEXT	SEGMENT
$T67285 = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?Alloc@?$CBuffer@E@@QAEXI@Z PROC			; CBuffer<unsigned char>::Alloc, COMDAT
; _this$ = ecx
; Line 44
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 45
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	je	SHORT $LN3@Alloc
; Line 47
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Free@?$CBuffer@E@@QAEXXZ		; CBuffer<unsigned char>::Free
; Line 48
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN3@Alloc
; Line 50
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T67285[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T67285[ebp]
	mov	DWORD PTR [eax], ecx
; Line 51
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+4], eax
$LN3@Alloc:
; Line 54
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Alloc@?$CBuffer@E@@QAEXI@Z ENDP			; CBuffer<unsigned char>::Alloc
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Free@?$CBuffer@E@@QAEXXZ
_TEXT	SEGMENT
$T67288 = -8						; size = 4
_this$ = -4						; size = 4
?Free@?$CBuffer@E@@QAEXXZ PROC				; CBuffer<unsigned char>::Free, COMDAT
; _this$ = ecx
; Line 15
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 16
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@Free
; Line 18
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T67288[ebp], edx
	mov	eax, DWORD PTR $T67288[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 19
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
$LN1@Free:
; Line 21
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 22
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Free@?$CBuffer@E@@QAEXXZ ENDP				; CBuffer<unsigned char>::Free
_TEXT	ENDS
END
