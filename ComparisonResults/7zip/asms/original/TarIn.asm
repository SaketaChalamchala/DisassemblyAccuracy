; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\CPP\7zip\Archive\Tar\TarIn.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_IsArc_Tar@8
EXTRN	__RTC_CheckEsp:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\cpp\7zip\archive\tar\tarin.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_checkSum$ = -56					; size = 4
_time$ = -44						; size = 8
_packSize$ = -28					; size = 8
_mode$ = -12						; size = 4
_p$ = -4						; size = 4
_p2$ = 8						; size = 4
_size$ = 12						; size = 4
_IsArc_Tar@8 PROC
; Line 108
	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 109
	cmp	DWORD PTR _size$[ebp], 512		; 00000200H
	jae	SHORT $LN5@IsArc_Tar
; Line 110
	mov	eax, 2
	jmp	$LN6@IsArc_Tar
$LN5@IsArc_Tar:
; Line 112
	mov	eax, DWORD PTR _p2$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 113
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 100				; 00000064H
	mov	DWORD PTR _p$[ebp], ecx
; Line 116
	lea	edx, DWORD PTR _mode$[ebp]
	push	edx
	push	8
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	?OctalToNumber32@NTar@NArchive@@YG_NPBDIAAI@Z ; NArchive::NTar::OctalToNumber32
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN4@IsArc_Tar
	xor	eax, eax
	jmp	SHORT $LN6@IsArc_Tar
$LN4@IsArc_Tar:
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 8
	mov	DWORD PTR _p$[ebp], edx
; Line 119
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 8
	mov	DWORD PTR _p$[ebp], eax
; Line 121
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 8
	mov	DWORD PTR _p$[ebp], ecx
; Line 126
	lea	edx, DWORD PTR _packSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	?ParseSize@NTar@NArchive@@YG_NPBDAA_K@Z	; NArchive::NTar::ParseSize
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@IsArc_Tar
	xor	eax, eax
	jmp	SHORT $LN6@IsArc_Tar
$LN3@IsArc_Tar:
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR _p$[ebp], edx
; Line 127
	lea	eax, DWORD PTR _time$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	?ParseInt64@NTar@NArchive@@YG_NPBDAA_J@Z ; NArchive::NTar::ParseInt64
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN2@IsArc_Tar
	xor	eax, eax
	jmp	SHORT $LN6@IsArc_Tar
$LN2@IsArc_Tar:
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _p$[ebp], eax
; Line 128
	lea	ecx, DWORD PTR _checkSum$[ebp]
	push	ecx
	push	8
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	?OctalToNumber32@NTar@NArchive@@YG_NPBDIAAI@Z ; NArchive::NTar::OctalToNumber32
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@IsArc_Tar
	xor	eax, eax
	jmp	SHORT $LN6@IsArc_Tar
$LN1@IsArc_Tar:
; Line 129
	mov	eax, 1
$LN6@IsArc_Tar:
; Line 130
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@IsArc_Tar
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN13@IsArc_Tar:
	DD	4
	DD	$LN12@IsArc_Tar
$LN12@IsArc_Tar:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN8@IsArc_Tar
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN9@IsArc_Tar
	DD	-44					; ffffffd4H
	DD	8
	DD	$LN10@IsArc_Tar
	DD	-56					; ffffffc8H
	DD	4
	DD	$LN11@IsArc_Tar
$LN11@IsArc_Tar:
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	83					; 00000053H
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	0
$LN10@IsArc_Tar:
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN9@IsArc_Tar:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN8@IsArc_Tar:
	DB	109					; 0000006dH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
_IsArc_Tar@8 ENDP
; Function compile flags: /Odtp /RTCsu
tv72 = -20						; size = 4
_res64$ = -12						; size = 8
_srcString$ = 8						; size = 4
_size$ = 12						; size = 4
_res$ = 16						; size = 4
?OctalToNumber32@NTar@NArchive@@YG_NPBDIAAI@Z PROC	; NArchive::NTar::OctalToNumber32
; Line 44
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 46
	lea	eax, DWORD PTR _res64$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcString$[ebp]
	push	edx
	call	?OctalToNumber@NTar@NArchive@@YG_NPBDIAA_K@Z ; NArchive::NTar::OctalToNumber
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@OctalToNum
; Line 47
	xor	al, al
	jmp	SHORT $LN2@OctalToNum
$LN1@OctalToNum:
; Line 48
	mov	ecx, DWORD PTR _res64$[ebp]
	mov	edx, DWORD PTR _res$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 49
	cmp	DWORD PTR _res64$[ebp+4], 0
	ja	SHORT $LN4@OctalToNum
	jb	SHORT $LN6@OctalToNum
	cmp	DWORD PTR _res64$[ebp], -1
	ja	SHORT $LN4@OctalToNum
$LN6@OctalToNum:
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN5@OctalToNum
$LN4@OctalToNum:
	mov	DWORD PTR tv72[ebp], 0
$LN5@OctalToNum:
	mov	al, BYTE PTR tv72[ebp]
$LN2@OctalToNum:
; Line 50
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@OctalToNum
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN9@OctalToNum:
	DD	1
	DD	$LN8@OctalToNum
$LN8@OctalToNum:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN7@OctalToNum
$LN7@OctalToNum:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	54					; 00000036H
	DB	52					; 00000034H
	DB	0
?OctalToNumber32@NTar@NArchive@@YG_NPBDIAAI@Z ENDP	; NArchive::NTar::OctalToNumber32
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	?ConvertOctStringToUInt64@@YG_KPBDPAPBD@Z:PROC	; ConvertOctStringToUInt64
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv82 = -64						; size = 4
_i$ = -60						; size = 4
_end$ = -52						; size = 4
_sz$ = -40						; size = 32
__$ArrayPad$ = -4					; size = 4
_srcString$ = 8						; size = 4
_size$ = 12						; size = 4
_res$ = 16						; size = 4
?OctalToNumber@NTar@NArchive@@YG_NPBDIAA_K@Z PROC	; NArchive::NTar::OctalToNumber
; Line 30
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	edi
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 32
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcString$[ebp]
	push	ecx
	lea	edx, DWORD PTR _sz$[ebp]
	push	edx
	call	?MyStrNCpy@NTar@NArchive@@YGXPADPBDI@Z	; NArchive::NTar::MyStrNCpy
; Line 33
	mov	eax, DWORD PTR _size$[ebp]
	mov	BYTE PTR _sz$[ebp+eax], 0
; Line 36
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@OctalToNum@2
$LN3@OctalToNum@2:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN4@OctalToNum@2:
	mov	edx, DWORD PTR _i$[ebp]
	movsx	eax, BYTE PTR _sz$[ebp+edx]
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN2@OctalToNum@2
	jmp	SHORT $LN3@OctalToNum@2
$LN2@OctalToNum@2:
; Line 37
	lea	ecx, DWORD PTR _end$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR _sz$[ebp+edx]
	push	eax
	call	?ConvertOctStringToUInt64@@YG_KPBDPAPBD@Z ; ConvertOctStringToUInt64
	mov	ecx, DWORD PTR _res$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
; Line 38
	mov	edx, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR _sz$[ebp+edx]
	cmp	DWORD PTR _end$[ebp], eax
	jne	SHORT $LN1@OctalToNum@2
; Line 39
	xor	al, al
	jmp	SHORT $LN5@OctalToNum@2
$LN1@OctalToNum@2:
; Line 40
	mov	ecx, DWORD PTR _end$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 32					; 00000020H
	je	SHORT $LN7@OctalToNum@2
	mov	eax, DWORD PTR _end$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN7@OctalToNum@2
	mov	DWORD PTR tv82[ebp], 0
	jmp	SHORT $LN8@OctalToNum@2
$LN7@OctalToNum@2:
	mov	DWORD PTR tv82[ebp], 1
$LN8@OctalToNum@2:
	mov	al, BYTE PTR tv82[ebp]
$LN5@OctalToNum@2:
; Line 41
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@OctalToNum@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 64					; 00000040H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN12@OctalToNum@2:
	DD	2
	DD	$LN11@OctalToNum@2
$LN11@OctalToNum@2:
	DD	-40					; ffffffd8H
	DD	32					; 00000020H
	DD	$LN9@OctalToNum@2
	DD	-52					; ffffffccH
	DD	4
	DD	$LN10@OctalToNum@2
$LN10@OctalToNum@2:
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
$LN9@OctalToNum@2:
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	0
?OctalToNumber@NTar@NArchive@@YG_NPBDIAA_K@Z ENDP	; NArchive::NTar::OctalToNumber
; Function compile flags: /Odtp /RTCsu
_c$68066 = -5						; size = 1
_i$68062 = -4						; size = 4
_dest$ = 8						; size = 4
_src$ = 12						; size = 4
_size$ = 16						; size = 4
?MyStrNCpy@NTar@NArchive@@YGXPADPBDI@Z PROC		; NArchive::NTar::MyStrNCpy
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 20
	mov	DWORD PTR _i$68062[ebp], 0
	jmp	SHORT $LN4@MyStrNCpy
$LN3@MyStrNCpy:
	mov	eax, DWORD PTR _i$68062[ebp]
	add	eax, 1
	mov	DWORD PTR _i$68062[ebp], eax
$LN4@MyStrNCpy:
	mov	ecx, DWORD PTR _i$68062[ebp]
	cmp	ecx, DWORD PTR _size$[ebp]
	jae	SHORT $LN5@MyStrNCpy
; Line 22
	mov	edx, DWORD PTR _src$[ebp]
	add	edx, DWORD PTR _i$68062[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR _c$68066[ebp], al
; Line 23
	mov	ecx, DWORD PTR _dest$[ebp]
	add	ecx, DWORD PTR _i$68062[ebp]
	mov	dl, BYTE PTR _c$68066[ebp]
	mov	BYTE PTR [ecx], dl
; Line 24
	movsx	eax, BYTE PTR _c$68066[ebp]
	test	eax, eax
	jne	SHORT $LN1@MyStrNCpy
; Line 25
	jmp	SHORT $LN5@MyStrNCpy
$LN1@MyStrNCpy:
; Line 26
	jmp	SHORT $LN3@MyStrNCpy
$LN5@MyStrNCpy:
; Line 27
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?MyStrNCpy@NTar@NArchive@@YGXPADPBDI@Z ENDP		; NArchive::NTar::MyStrNCpy
_TEXT	ENDS
EXTRN	__allshr:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv79 = -48						; size = 4
tv164 = -44						; size = 8
tv73 = -36						; size = 4
tv144 = -32						; size = 8
_res$ = -21						; size = 1
_uv$ = -16						; size = 8
_h$ = -4						; size = 4
_p$ = 8							; size = 4
_val$ = 12						; size = 4
?ParseInt64@NTar@NArchive@@YG_NPBDAA_J@Z PROC		; NArchive::NTar::ParseInt64
; Line 81
	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 82
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	bswap	ecx
	mov	DWORD PTR _h$[ebp], ecx
; Line 83
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [edx+8]
	bswap	eax
	bswap	ecx
	mov	edx, DWORD PTR _val$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	DWORD PTR [edx+4], eax
; Line 84
	cmp	DWORD PTR _h$[ebp], -2147483648		; 80000000H
	jne	SHORT $LN2@ParseInt64
; Line 85
	mov	ecx, DWORD PTR _val$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	mov	cl, 63					; 0000003fH
	call	__allshr
	and	eax, 1
	and	edx, 0
	mov	DWORD PTR tv144[ebp], eax
	mov	DWORD PTR tv144[ebp+4], edx
	mov	edx, DWORD PTR tv144[ebp]
	or	edx, DWORD PTR tv144[ebp+4]
	jne	SHORT $LN5@ParseInt64
	mov	DWORD PTR tv73[ebp], 1
	jmp	SHORT $LN6@ParseInt64
$LN5@ParseInt64:
	mov	DWORD PTR tv73[ebp], 0
$LN6@ParseInt64:
	mov	al, BYTE PTR tv73[ebp]
	jmp	SHORT $LN3@ParseInt64
$LN2@ParseInt64:
; Line 86
	cmp	DWORD PTR _h$[ebp], -1
	jne	SHORT $LN1@ParseInt64
; Line 87
	mov	ecx, DWORD PTR _val$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	mov	cl, 63					; 0000003fH
	call	__allshr
	and	eax, 1
	and	edx, 0
	mov	DWORD PTR tv164[ebp], eax
	mov	DWORD PTR tv164[ebp+4], edx
	mov	edx, DWORD PTR tv164[ebp]
	or	edx, DWORD PTR tv164[ebp+4]
	je	SHORT $LN7@ParseInt64
	mov	DWORD PTR tv79[ebp], 1
	jmp	SHORT $LN8@ParseInt64
$LN7@ParseInt64:
	mov	DWORD PTR tv79[ebp], 0
$LN8@ParseInt64:
	mov	al, BYTE PTR tv79[ebp]
	jmp	SHORT $LN3@ParseInt64
$LN1@ParseInt64:
; Line 89
	lea	eax, DWORD PTR _uv$[ebp]
	push	eax
	push	12					; 0000000cH
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	?OctalToNumber@NTar@NArchive@@YG_NPBDIAA_K@Z ; NArchive::NTar::OctalToNumber
	mov	BYTE PTR _res$[ebp], al
; Line 90
	mov	edx, DWORD PTR _val$[ebp]
	mov	eax, DWORD PTR _uv$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _uv$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
; Line 91
	mov	al, BYTE PTR _res$[ebp]
$LN3@ParseInt64:
; Line 92
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@ParseInt64
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN11@ParseInt64:
	DD	1
	DD	$LN10@ParseInt64
$LN10@ParseInt64:
	DD	-16					; fffffff0H
	DD	8
	DD	$LN9@ParseInt64
$LN9@ParseInt64:
	DB	117					; 00000075H
	DB	118					; 00000076H
	DB	0
?ParseInt64@NTar@NArchive@@YG_NPBDAA_J@Z ENDP		; NArchive::NTar::ParseInt64
_TEXT	ENDS
EXTRN	__aullshr:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv73 = -12						; size = 4
tv138 = -8						; size = 8
_p$ = 8							; size = 4
_val$ = 12						; size = 4
?ParseSize@NTar@NArchive@@YG_NPBDAA_K@Z PROC		; NArchive::NTar::ParseSize
; Line 95
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 96
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	bswap	ecx
	cmp	ecx, -2147483648			; 80000000H
	jne	SHORT $LN1@ParseSize
; Line 99
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [edx+8]
	bswap	eax
	bswap	ecx
	mov	edx, DWORD PTR _val$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	DWORD PTR [edx+4], eax
; Line 100
	mov	ecx, DWORD PTR _val$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	mov	cl, 63					; 0000003fH
	call	__aullshr
	and	eax, 1
	and	edx, 0
	mov	DWORD PTR tv138[ebp], eax
	mov	DWORD PTR tv138[ebp+4], edx
	mov	edx, DWORD PTR tv138[ebp]
	or	edx, DWORD PTR tv138[ebp+4]
	jne	SHORT $LN4@ParseSize
	mov	DWORD PTR tv73[ebp], 1
	jmp	SHORT $LN5@ParseSize
$LN4@ParseSize:
	mov	DWORD PTR tv73[ebp], 0
$LN5@ParseSize:
	mov	al, BYTE PTR tv73[ebp]
	jmp	SHORT $LN2@ParseSize
$LN1@ParseSize:
; Line 102
	mov	eax, DWORD PTR _val$[ebp]
	push	eax
	push	12					; 0000000cH
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	?OctalToNumber@NTar@NArchive@@YG_NPBDIAA_K@Z ; NArchive::NTar::OctalToNumber
$LN2@ParseSize:
; Line 103
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?ParseSize@NTar@NArchive@@YG_NPBDAA_K@Z ENDP		; NArchive::NTar::ParseSize
_TEXT	ENDS
PUBLIC	?ReleaseBuf_CalcLen@AString@@QAEXI@Z		; AString::ReleaseBuf_CalcLen
PUBLIC	?GetBuf@AString@@QAEPADI@Z			; AString::GetBuf
PUBLIC	?GetPackSizeAligned@CItem@NTar@NArchive@@QBE_KXZ ; NArchive::NTar::CItem::GetPackSizeAligned
PUBLIC	??9@YG_NABVAString@@PBD@Z			; operator!=
PUBLIC	??1AString@@QAE@XZ				; AString::~AString
PUBLIC	?ReadItem@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z ; NArchive::NTar::ReadItem
EXTRN	??4AString@@QAEAAV0@ABV0@@Z:PROC		; AString::operator=
EXTRN	?ReadStream@@YGJPAUISequentialInStream@@PAXPAI@Z:PROC ; ReadStream
EXTRN	?kLongLink2@NFileHeader@NTar@NArchive@@3PBDB:DWORD ; NArchive::NTar::NFileHeader::kLongLink2
EXTRN	?kLongLink@NFileHeader@NTar@NArchive@@3PBDB:DWORD ; NArchive::NTar::NFileHeader::kLongLink
EXTRN	??0AString@@QAE@XZ:PROC				; AString::AString
EXTRN	___CxxFrameHandler3:PROC
xdata$x	SEGMENT
__unwindtable$?ReadItem@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ReadItem@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?ReadItem@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z$1
__ehfuncinfo$?ReadItem@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?ReadItem@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv201 = -144						; size = 4
tv297 = -140						; size = 4
$T68437 = -136						; size = 4
$T68436 = -132						; size = 4
$T68435 = -128						; size = 4
$T68434 = -124						; size = 4
$T68433 = -120						; size = 4
$T68432 = -116						; size = 4
$T68431 = -112						; size = 4
$T68430 = -108						; size = 4
$T68429 = -104						; size = 4
$T68428 = -100						; size = 4
$T68427 = -96						; size = 4
___result__$68318 = -92					; size = 4
_res$68315 = -88					; size = 4
_processedSize$68314 = -80				; size = 4
_buf$68313 = -72					; size = 4
_packSize$68311 = -68					; size = 4
_name$68296 = -64					; size = 4
___result__$68283 = -60					; size = 4
_nameK$ = -52						; size = 12
_nameL$ = -32						; size = 12
_flagK$ = -14						; size = 1
_flagL$ = -13						; size = 1
__$EHRec$ = -12						; size = 12
_stream$ = 8						; size = 4
_filled$ = 12						; size = 4
_item$ = 16						; size = 4
_error$ = 20						; size = 4
?ReadItem@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z PROC ; NArchive::NTar::ReadItem
; Line 332
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ReadItem@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 132				; 00000084H
	push	edi
	lea	edi, DWORD PTR [ebp-144]
	mov	ecx, 33					; 00000021H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 333
	mov	eax, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+128], 0
; Line 334
	mov	BYTE PTR _flagL$[ebp], 0
; Line 335
	mov	BYTE PTR _flagK$[ebp], 0
; Line 336
	lea	ecx, DWORD PTR _nameL$[ebp]
	call	??0AString@@QAE@XZ			; AString::AString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 337
	lea	ecx, DWORD PTR _nameK$[ebp]
	call	??0AString@@QAE@XZ			; AString::AString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
$LN27@ReadItem:
; Line 341
	mov	ecx, DWORD PTR _error$[ebp]
	push	ecx
	mov	edx, DWORD PTR _item$[ebp]
	push	edx
	mov	eax, DWORD PTR _filled$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	?GetNextItemReal@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z ; NArchive::NTar::GetNextItemReal
	mov	DWORD PTR ___result__$68283[ebp], eax
	cmp	DWORD PTR ___result__$68283[ebp], 0
	je	SHORT $LN25@ReadItem
	mov	edx, DWORD PTR ___result__$68283[ebp]
	mov	DWORD PTR $T68427[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _nameK$[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _nameL$[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	eax, DWORD PTR $T68427[ebp]
	jmp	$LN28@ReadItem
$LN25@ReadItem:
; Line 342
	mov	eax, DWORD PTR _filled$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN24@ReadItem
; Line 344
	mov	edx, DWORD PTR _error$[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN23@ReadItem
	movzx	eax, BYTE PTR _flagL$[ebp]
	test	eax, eax
	jne	SHORT $LN22@ReadItem
	movzx	ecx, BYTE PTR _flagK$[ebp]
	test	ecx, ecx
	je	SHORT $LN23@ReadItem
$LN22@ReadItem:
; Line 345
	mov	edx, DWORD PTR _error$[ebp]
	mov	DWORD PTR [edx], 1
$LN23@ReadItem:
; Line 346
	mov	DWORD PTR $T68428[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _nameK$[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _nameL$[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	eax, DWORD PTR $T68428[ebp]
	jmp	$LN28@ReadItem
$LN24@ReadItem:
; Line 349
	mov	eax, DWORD PTR _error$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN21@ReadItem
; Line 350
	mov	DWORD PTR $T68429[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _nameK$[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _nameL$[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	eax, DWORD PTR $T68429[ebp]
	jmp	$LN28@ReadItem
$LN21@ReadItem:
; Line 353
	mov	ecx, DWORD PTR _item$[ebp]
	movsx	edx, BYTE PTR [ecx+104]
	cmp	edx, 76					; 0000004cH
	je	SHORT $LN19@ReadItem
	mov	eax, DWORD PTR _item$[ebp]
	movsx	ecx, BYTE PTR [eax+104]
	cmp	ecx, 75					; 0000004bH
	jne	$LN20@ReadItem
$LN19@ReadItem:
; Line 356
	mov	edx, DWORD PTR _item$[ebp]
	movsx	eax, BYTE PTR [edx+104]
	cmp	eax, 76					; 0000004cH
	jne	SHORT $LN18@ReadItem
; Line 357
	movzx	ecx, BYTE PTR _flagL$[ebp]
	test	ecx, ecx
	je	SHORT $LN17@ReadItem
	mov	DWORD PTR $T68430[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _nameK$[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _nameL$[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	eax, DWORD PTR $T68430[ebp]
	jmp	$LN28@ReadItem
$LN17@ReadItem:
	mov	BYTE PTR _flagL$[ebp], 1
	lea	edx, DWORD PTR _nameL$[ebp]
	mov	DWORD PTR _name$68296[ebp], edx
; Line 358
	jmp	SHORT $LN16@ReadItem
$LN18@ReadItem:
; Line 359
	movzx	eax, BYTE PTR _flagK$[ebp]
	test	eax, eax
	je	SHORT $LN15@ReadItem
	mov	DWORD PTR $T68431[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _nameK$[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _nameL$[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	eax, DWORD PTR $T68431[ebp]
	jmp	$LN28@ReadItem
$LN15@ReadItem:
	mov	BYTE PTR _flagK$[ebp], 1
	lea	ecx, DWORD PTR _nameK$[ebp]
	mov	DWORD PTR _name$68296[ebp], ecx
$LN16@ReadItem:
; Line 362
	mov	edx, DWORD PTR ?kLongLink@NFileHeader@NTar@NArchive@@3PBDB ; NArchive::NTar::NFileHeader::kLongLink
	push	edx
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	call	??9@YG_NABVAString@@PBD@Z		; operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN14@ReadItem
	mov	edx, DWORD PTR ?kLongLink2@NFileHeader@NTar@NArchive@@3PBDB ; NArchive::NTar::NFileHeader::kLongLink2
	push	edx
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	call	??9@YG_NABVAString@@PBD@Z		; operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN14@ReadItem
; Line 363
	mov	DWORD PTR $T68432[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _nameK$[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _nameL$[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	eax, DWORD PTR $T68432[ebp]
	jmp	$LN28@ReadItem
$LN14@ReadItem:
; Line 364
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR tv297[ebp], edx
	mov	eax, DWORD PTR tv297[ebp]
	cmp	DWORD PTR [eax+20], 0
	ja	SHORT $LN32@ReadItem
	mov	ecx, DWORD PTR tv297[ebp]
	cmp	DWORD PTR [ecx+16], 16384		; 00004000H
	jbe	SHORT $LN13@ReadItem
$LN32@ReadItem:
; Line 365
	mov	DWORD PTR $T68433[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _nameK$[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _nameL$[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	eax, DWORD PTR $T68433[ebp]
	jmp	$LN28@ReadItem
$LN13@ReadItem:
; Line 366
	mov	ecx, DWORD PTR _item$[ebp]
	call	?GetPackSizeAligned@CItem@NTar@NArchive@@QBE_KXZ ; NArchive::NTar::CItem::GetPackSizeAligned
	mov	DWORD PTR _packSize$68311[ebp], eax
; Line 367
	mov	edx, DWORD PTR _packSize$68311[ebp]
	push	edx
	mov	ecx, DWORD PTR _name$68296[ebp]
	call	?GetBuf@AString@@QAEPADI@Z		; AString::GetBuf
	mov	DWORD PTR _buf$68313[ebp], eax
; Line 368
	mov	eax, DWORD PTR _packSize$68311[ebp]
	mov	DWORD PTR _processedSize$68314[ebp], eax
; Line 369
	lea	ecx, DWORD PTR _processedSize$68314[ebp]
	push	ecx
	mov	edx, DWORD PTR _buf$68313[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	?ReadStream@@YGJPAUISequentialInStream@@PAXPAI@Z ; ReadStream
	mov	DWORD PTR _res$68315[ebp], eax
; Line 370
	mov	ecx, DWORD PTR _item$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	add	edx, DWORD PTR _processedSize$68314[ebp]
	mov	eax, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+128], edx
; Line 371
	mov	ecx, DWORD PTR _item$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	ecx, DWORD PTR _name$68296[ebp]
	call	?ReleaseBuf_CalcLen@AString@@QAEXI@Z	; AString::ReleaseBuf_CalcLen
; Line 372
	mov	eax, DWORD PTR _res$68315[ebp]
	mov	DWORD PTR ___result__$68318[ebp], eax
	cmp	DWORD PTR ___result__$68318[ebp], 0
	je	SHORT $LN12@ReadItem
	mov	ecx, DWORD PTR ___result__$68318[ebp]
	mov	DWORD PTR $T68434[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _nameK$[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _nameL$[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	eax, DWORD PTR $T68434[ebp]
	jmp	$LN28@ReadItem
$LN12@ReadItem:
; Line 373
	mov	edx, DWORD PTR _processedSize$68314[ebp]
	cmp	edx, DWORD PTR _packSize$68311[ebp]
	je	SHORT $LN11@ReadItem
; Line 375
	mov	eax, DWORD PTR _error$[ebp]
	mov	DWORD PTR [eax], 2
; Line 376
	mov	DWORD PTR $T68435[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _nameK$[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _nameL$[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	eax, DWORD PTR $T68435[ebp]
	jmp	$LN28@ReadItem
$LN11@ReadItem:
; Line 378
	jmp	$LN27@ReadItem
$LN20@ReadItem:
; Line 381
	mov	ecx, DWORD PTR _item$[ebp]
	movsx	edx, BYTE PTR [ecx+104]
	mov	DWORD PTR tv201[ebp], edx
	mov	eax, DWORD PTR tv201[ebp]
	sub	eax, 68					; 00000044H
	mov	DWORD PTR tv201[ebp], eax
	cmp	DWORD PTR tv201[ebp], 52		; 00000034H
	ja	SHORT $LN5@ReadItem
	mov	ecx, DWORD PTR tv201[ebp]
	movzx	edx, BYTE PTR $LN33@ReadItem[ecx]
	jmp	DWORD PTR $LN40@ReadItem[edx*4]
$LN8@ReadItem:
; Line 388
	jmp	SHORT $LN9@ReadItem
$LN7@ReadItem:
; Line 392
	jmp	SHORT $LN9@ReadItem
$LN6@ReadItem:
; Line 397
	jmp	SHORT $LN9@ReadItem
$LN5@ReadItem:
; Line 401
	mov	eax, DWORD PTR _item$[ebp]
	movsx	ecx, BYTE PTR [eax+104]
	cmp	ecx, 55					; 00000037H
	jg	SHORT $LN3@ReadItem
	mov	edx, DWORD PTR _item$[ebp]
	movsx	eax, BYTE PTR [edx+104]
	cmp	eax, 48					; 00000030H
	jge	SHORT $LN9@ReadItem
	mov	ecx, DWORD PTR _item$[ebp]
	movsx	edx, BYTE PTR [ecx+104]
	test	edx, edx
	je	SHORT $LN9@ReadItem
$LN3@ReadItem:
; Line 402
	mov	DWORD PTR $T68436[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _nameK$[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _nameL$[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	eax, DWORD PTR $T68436[ebp]
	jmp	$LN28@ReadItem
$LN9@ReadItem:
; Line 405
	movzx	eax, BYTE PTR _flagL$[ebp]
	test	eax, eax
	je	SHORT $LN2@ReadItem
; Line 407
	lea	ecx, DWORD PTR _nameL$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _item$[ebp]
	call	??4AString@@QAEAAV0@ABV0@@Z		; AString::operator=
; Line 408
	mov	edx, DWORD PTR _item$[ebp]
	mov	BYTE PTR [edx+132], 0
$LN2@ReadItem:
; Line 411
	movzx	eax, BYTE PTR _flagK$[ebp]
	test	eax, eax
	je	SHORT $LN1@ReadItem
; Line 413
	lea	ecx, DWORD PTR _nameK$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _item$[ebp]
	add	ecx, 60					; 0000003cH
	call	??4AString@@QAEAAV0@ABV0@@Z		; AString::operator=
; Line 414
	mov	edx, DWORD PTR _item$[ebp]
	mov	BYTE PTR [edx+133], 0
$LN1@ReadItem:
; Line 417
	mov	eax, DWORD PTR _error$[ebp]
	mov	DWORD PTR [eax], 0
; Line 418
	mov	DWORD PTR $T68437[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _nameK$[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _nameL$[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	eax, DWORD PTR $T68437[ebp]
	jmp	SHORT $LN28@ReadItem
; Line 419
	jmp	$LN27@ReadItem
; Line 420
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _nameK$[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _nameL$[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
$LN28@ReadItem:
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN39@ReadItem
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 144				; 00000090H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	3
$LN39@ReadItem:
	DD	3
	DD	$LN38@ReadItem
$LN38@ReadItem:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN34@ReadItem
	DD	-52					; ffffffccH
	DD	12					; 0000000cH
	DD	$LN35@ReadItem
	DD	-80					; ffffffb0H
	DD	4
	DD	$LN36@ReadItem
$LN36@ReadItem:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN35@ReadItem:
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	75					; 0000004bH
	DB	0
$LN34@ReadItem:
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	76					; 0000004cH
	DB	0
	npad	2
$LN40@ReadItem:
	DD	$LN7@ReadItem
	DD	$LN6@ReadItem
	DD	$LN8@ReadItem
	DD	$LN5@ReadItem
$LN33@ReadItem:
	DB	0
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	1
	DB	3
	DB	3
	DB	3
	DB	3
	DB	2
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	2
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	2
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ReadItem@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z$0:
	lea	ecx, DWORD PTR _nameL$[ebp]
	jmp	??1AString@@QAE@XZ			; AString::~AString
__unwindfunclet$?ReadItem@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z$1:
	lea	ecx, DWORD PTR _nameK$[ebp]
	jmp	??1AString@@QAE@XZ			; AString::~AString
__ehhandler$?ReadItem@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-140]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ReadItem@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ReadItem@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z ENDP ; NArchive::NTar::ReadItem
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1AString@@QAE@XZ
_TEXT	SEGMENT
$T68456 = -8						; size = 4
_this$ = -4						; size = 4
??1AString@@QAE@XZ PROC					; AString::~AString, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 232
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T68456[ebp], ecx
	mov	edx, DWORD PTR $T68456[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1AString@@QAE@XZ ENDP					; AString::~AString
_TEXT	ENDS
EXTRN	?ReAlloc2@AString@@AAEXI@Z:PROC			; AString::ReAlloc2
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetBuf@AString@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_minLen$ = 8						; size = 4
?GetBuf@AString@@QAEPADI@Z PROC				; AString::GetBuf, COMDAT
; _this$ = ecx
; Line 250
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 251
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _minLen$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	SHORT $LN1@GetBuf
; Line 252
	mov	edx, DWORD PTR _minLen$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReAlloc2@AString@@AAEXI@Z		; AString::ReAlloc2
$LN1@GetBuf:
; Line 253
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
; Line 254
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetBuf@AString@@QAEPADI@Z ENDP				; AString::GetBuf
_TEXT	ENDS
PUBLIC	?MyStringLen@@YGIPBD@Z				; MyStringLen
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ReleaseBuf_CalcLen@AString@@QAEXI@Z
_TEXT	SEGMENT
_chars$ = -8						; size = 4
_this$ = -4						; size = 4
_maxLen$ = 8						; size = 4
?ReleaseBuf_CalcLen@AString@@QAEXI@Z PROC		; AString::ReleaseBuf_CalcLen, COMDAT
; _this$ = ecx
; Line 268
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 269
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _chars$[ebp], ecx
; Line 270
	mov	edx, DWORD PTR _chars$[ebp]
	add	edx, DWORD PTR _maxLen$[ebp]
	mov	BYTE PTR [edx], 0
; Line 271
	mov	eax, DWORD PTR _chars$[ebp]
	push	eax
	call	?MyStringLen@@YGIPBD@Z			; MyStringLen
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 272
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ReleaseBuf_CalcLen@AString@@QAEXI@Z ENDP		; AString::ReleaseBuf_CalcLen
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?MyStringLen@@YGIPBD@Z
_TEXT	SEGMENT
_i$ = -4						; size = 4
_s$ = 8							; size = 4
?MyStringLen@@YGIPBD@Z PROC				; MyStringLen, COMDAT
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 28
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@MyStringLe
$LN2@MyStringLe:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@MyStringLe:
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN1@MyStringLe
	jmp	SHORT $LN2@MyStringLe
$LN1@MyStringLe:
; Line 29
	mov	eax, DWORD PTR _i$[ebp]
; Line 30
	mov	esp, ebp
	pop	ebp
	ret	4
?MyStringLen@@YGIPBD@Z ENDP				; MyStringLen
_TEXT	ENDS
PUBLIC	??BAString@@QBEPBDXZ				; AString::operator char const *
EXTRN	_strcmp:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??9@YG_NABVAString@@PBD@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
??9@YG_NABVAString@@PBD@Z PROC				; operator!=, COMDAT
; Line 395
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _s2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s1$[ebp]
	call	??BAString@@QBEPBDXZ			; AString::operator char const *
	push	eax
	call	_strcmp
	add	esp, 8
	neg	eax
	sbb	eax, eax
	neg	eax
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
??9@YG_NABVAString@@PBD@Z ENDP				; operator!=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??BAString@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BAString@@QBEPBDXZ PROC				; AString::operator char const *, COMDAT
; _this$ = ecx
; Line 238
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??BAString@@QBEPBDXZ ENDP				; AString::operator char const *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetPackSizeAligned@CItem@NTar@NArchive@@QBE_KXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPackSizeAligned@CItem@NTar@NArchive@@QBE_KXZ PROC	; NArchive::NTar::CItem::GetPackSizeAligned, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\tar\taritem.h
; Line 82
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 511				; 000001ffH
	mov	edx, DWORD PTR [eax+20]
	adc	edx, 0
	and	ecx, -512				; fffffe00H
	mov	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPackSizeAligned@CItem@NTar@NArchive@@QBE_KXZ ENDP	; NArchive::NTar::CItem::GetPackSizeAligned
_TEXT	ENDS
PUBLIC	?Add@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAEIUCSparseBlock@NTar@NArchive@@@Z ; CRecordVector<NArchive::NTar::CSparseBlock>::Add
PUBLIC	??H@YG?AVAString@@ABV0@D@Z			; operator+
PUBLIC	?IsUstarMagic@CItem@NTar@NArchive@@QBE_NXZ	; NArchive::NTar::CItem::IsUstarMagic
PUBLIC	?IsEmpty@AString@@QBE_NXZ			; AString::IsEmpty
PUBLIC	?Len@AString@@QBEIXZ				; AString::Len
PUBLIC	__$ArrayPad$
EXTRN	??H@YG?AVAString@@ABV0@0@Z:PROC			; operator+
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
xdata$x	SEGMENT
__unwindtable$?GetNextItemReal@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetNextItemReal@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetNextItemReal@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?GetNextItemReal@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z$2
__ehfuncinfo$?GetNextItemReal@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?GetNextItemReal@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv908 = -784						; size = 4
tv890 = -780						; size = 8
tv880 = -772						; size = 8
tv868 = -764						; size = 4
tv818 = -760						; size = 4
tv800 = -756						; size = 8
tv790 = -748						; size = 8
tv778 = -740						; size = 4
tv599 = -736						; size = 4
tv600 = -732						; size = 4
tv597 = -728						; size = 4
tv352 = -724						; size = 4
tv264 = -720						; size = 4
tv142 = -716						; size = 4
$T68477 = -712						; size = 12
$T68476 = -700						; size = 12
_sb$68254 = -684					; size = 16
_i$68245 = -664						; size = 4
___result__$68239 = -660				; size = 4
_processedSize$68238 = -652				; size = 4
_sb$68220 = -640					; size = 16
_i$68211 = -620						; size = 4
_min$68210 = -616					; size = 8
_isExtended$68205 = -606				; size = 1
_c$68197 = -605						; size = 1
_i$68193 = -604						; size = 4
_checkSumReal_Signed$ = -600				; size = 4
_checkSumReal$ = -596					; size = 4
_prefix$68186 = -588					; size = 12
_checkSum$ = -568					; size = 4
___result__$68156 = -560				; size = 4
_processedSize$68155 = -552				; size = 4
_thereAreEmptyRecords$ = -541				; size = 1
_p$ = -540						; size = 4
_buf$ = -532						; size = 512
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_stream$ = 8						; size = 4
_filled$ = 12						; size = 4
_item$ = 16						; size = 4
_error$ = 20						; size = 4
?GetNextItemReal@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z PROC ; NArchive::NTar::GetNextItemReal
; File c:\workspace\7z1505-src\cpp\7zip\archive\tar\tarin.cpp
; Line 133
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetNextItemReal@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 772				; 00000304H
	push	edi
	lea	edi, DWORD PTR [ebp-784]
	mov	ecx, 193				; 000000c1H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 135
	lea	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 137
	mov	ecx, DWORD PTR _error$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 138
	mov	edx, DWORD PTR _filled$[ebp]
	mov	BYTE PTR [edx], 0
; Line 140
	mov	BYTE PTR _thereAreEmptyRecords$[ebp], 0
$LN62@GetNextIte:
; Line 143
	mov	DWORD PTR _processedSize$68155[ebp], 512 ; 00000200H
; Line 144
	lea	eax, DWORD PTR _processedSize$68155[ebp]
	push	eax
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	?ReadStream@@YGJPAUISequentialInStream@@PAXPAI@Z ; ReadStream
	mov	DWORD PTR ___result__$68156[ebp], eax
	cmp	DWORD PTR ___result__$68156[ebp], 0
	je	SHORT $LN60@GetNextIte
	mov	eax, DWORD PTR ___result__$68156[ebp]
	jmp	$LN63@GetNextIte
$LN60@GetNextIte:
; Line 145
	cmp	DWORD PTR _processedSize$68155[ebp], 0
	jne	SHORT $LN59@GetNextIte
; Line 147
	movzx	eax, BYTE PTR _thereAreEmptyRecords$[ebp]
	test	eax, eax
	jne	SHORT $LN58@GetNextIte
; Line 148
	mov	ecx, DWORD PTR _error$[ebp]
	mov	DWORD PTR [ecx], 2
$LN58@GetNextIte:
; Line 149
	xor	eax, eax
	jmp	$LN63@GetNextIte
$LN59@GetNextIte:
; Line 151
	cmp	DWORD PTR _processedSize$68155[ebp], 512 ; 00000200H
	je	SHORT $LN57@GetNextIte
; Line 153
	movzx	edx, BYTE PTR _thereAreEmptyRecords$[ebp]
	test	edx, edx
	jne	SHORT $LN55@GetNextIte
; Line 154
	mov	eax, DWORD PTR _error$[ebp]
	mov	DWORD PTR [eax], 2
$LN55@GetNextIte:
; Line 168
	xor	eax, eax
	jmp	$LN63@GetNextIte
$LN57@GetNextIte:
; Line 170
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	?IsRecordLast@NTar@NArchive@@YG_NPBD@Z	; NArchive::NTar::IsRecordLast
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN54@GetNextIte
; Line 171
	jmp	SHORT $LN61@GetNextIte
$LN54@GetNextIte:
; Line 172
	mov	eax, DWORD PTR _item$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	add	ecx, 512				; 00000200H
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [edx+128], ecx
; Line 173
	mov	BYTE PTR _thereAreEmptyRecords$[ebp], 1
; Line 174
	jmp	$LN62@GetNextIte
$LN61@GetNextIte:
; Line 175
	movzx	eax, BYTE PTR _thereAreEmptyRecords$[ebp]
	test	eax, eax
	je	SHORT $LN53@GetNextIte
; Line 178
	xor	eax, eax
	jmp	$LN63@GetNextIte
$LN53@GetNextIte:
; Line 181
	mov	ecx, DWORD PTR _error$[ebp]
	mov	DWORD PTR [ecx], 1
; Line 182
	mov	edx, DWORD PTR _item$[ebp]
	push	edx
	push	100					; 00000064H
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	?ReadString@NTar@NArchive@@YGXPBDIAAVAString@@@Z ; NArchive::NTar::ReadString
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 100				; 00000064H
	mov	DWORD PTR _p$[ebp], ecx
; Line 185
	mov	ecx, DWORD PTR _item$[ebp]
	call	?Len@AString@@QBEIXZ			; AString::Len
	cmp	eax, 100				; 00000064H
	je	SHORT $LN65@GetNextIte
	mov	ecx, DWORD PTR _item$[ebp]
	call	?Len@AString@@QBEIXZ			; AString::Len
	cmp	eax, 99					; 00000063H
	je	SHORT $LN65@GetNextIte
	mov	DWORD PTR tv142[ebp], 0
	jmp	SHORT $LN66@GetNextIte
$LN65@GetNextIte:
	mov	DWORD PTR tv142[ebp], 1
$LN66@GetNextIte:
	mov	edx, DWORD PTR _item$[ebp]
	mov	al, BYTE PTR tv142[ebp]
	mov	BYTE PTR [edx+132], al
; Line 187
	mov	ecx, DWORD PTR _item$[ebp]
	add	ecx, 40					; 00000028H
	push	ecx
	push	8
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	?OctalToNumber32@NTar@NArchive@@YG_NPBDIAAI@Z ; NArchive::NTar::OctalToNumber32
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN52@GetNextIte
	xor	eax, eax
	jmp	$LN63@GetNextIte
$LN52@GetNextIte:
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 8
	mov	DWORD PTR _p$[ebp], ecx
; Line 189
	mov	edx, DWORD PTR _item$[ebp]
	add	edx, 44					; 0000002cH
	push	edx
	push	8
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	?OctalToNumber32@NTar@NArchive@@YG_NPBDIAAI@Z ; NArchive::NTar::OctalToNumber32
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN51@GetNextIte
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [edx+44], 0
$LN51@GetNextIte:
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 8
	mov	DWORD PTR _p$[ebp], eax
; Line 190
	mov	ecx, DWORD PTR _item$[ebp]
	add	ecx, 48					; 00000030H
	push	ecx
	push	8
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	?OctalToNumber32@NTar@NArchive@@YG_NPBDIAAI@Z ; NArchive::NTar::OctalToNumber32
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN50@GetNextIte
	mov	ecx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [ecx+48], 0
$LN50@GetNextIte:
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 8
	mov	DWORD PTR _p$[ebp], edx
; Line 192
	mov	eax, DWORD PTR _item$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	?ParseSize@NTar@NArchive@@YG_NPBDAA_K@Z	; NArchive::NTar::ParseSize
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN49@GetNextIte
	xor	eax, eax
	jmp	$LN63@GetNextIte
$LN49@GetNextIte:
; Line 193
	mov	eax, DWORD PTR _item$[ebp]
	mov	ecx, DWORD PTR _item$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+24], edx
	mov	ecx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+28], ecx
; Line 194
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR _p$[ebp], edx
; Line 195
	mov	eax, DWORD PTR _item$[ebp]
	add	eax, 32					; 00000020H
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	?ParseInt64@NTar@NArchive@@YG_NPBDAA_J@Z ; NArchive::NTar::ParseInt64
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN48@GetNextIte
	xor	eax, eax
	jmp	$LN63@GetNextIte
$LN48@GetNextIte:
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _p$[ebp], eax
; Line 198
	lea	ecx, DWORD PTR _checkSum$[ebp]
	push	ecx
	push	8
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	?OctalToNumber32@NTar@NArchive@@YG_NPBDIAAI@Z ; NArchive::NTar::OctalToNumber32
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN47@GetNextIte
	xor	eax, eax
	jmp	$LN63@GetNextIte
$LN47@GetNextIte:
; Line 199
	push	8
	push	32					; 00000020H
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 8
	mov	DWORD PTR _p$[ebp], edx
; Line 201
	mov	eax, DWORD PTR _item$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax+104], dl
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
; Line 203
	mov	ecx, DWORD PTR _item$[ebp]
	add	ecx, 60					; 0000003cH
	push	ecx
	push	100					; 00000064H
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	?ReadString@NTar@NArchive@@YGXPBDIAAVAString@@@Z ; NArchive::NTar::ReadString
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 100				; 00000064H
	mov	DWORD PTR _p$[ebp], eax
; Line 206
	mov	ecx, DWORD PTR _item$[ebp]
	add	ecx, 60					; 0000003cH
	call	?Len@AString@@QBEIXZ			; AString::Len
	cmp	eax, 100				; 00000064H
	je	SHORT $LN67@GetNextIte
	mov	ecx, DWORD PTR _item$[ebp]
	add	ecx, 60					; 0000003cH
	call	?Len@AString@@QBEIXZ			; AString::Len
	cmp	eax, 99					; 00000063H
	je	SHORT $LN67@GetNextIte
	mov	DWORD PTR tv264[ebp], 0
	jmp	SHORT $LN68@GetNextIte
$LN67@GetNextIte:
	mov	DWORD PTR tv264[ebp], 1
$LN68@GetNextIte:
	mov	ecx, DWORD PTR _item$[ebp]
	mov	dl, BYTE PTR tv264[ebp]
	mov	BYTE PTR [ecx+133], dl
; Line 208
	push	8
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _item$[ebp]
	add	ecx, 96					; 00000060H
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 8
	mov	DWORD PTR _p$[ebp], edx
; Line 210
	mov	eax, DWORD PTR _item$[ebp]
	add	eax, 72					; 00000048H
	push	eax
	push	32					; 00000020H
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	?ReadString@NTar@NArchive@@YGXPBDIAAVAString@@@Z ; NArchive::NTar::ReadString
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 32					; 00000020H
	mov	DWORD PTR _p$[ebp], edx
; Line 211
	mov	eax, DWORD PTR _item$[ebp]
	add	eax, 84					; 00000054H
	push	eax
	push	32					; 00000020H
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	?ReadString@NTar@NArchive@@YGXPBDIAAVAString@@@Z ; NArchive::NTar::ReadString
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 32					; 00000020H
	mov	DWORD PTR _p$[ebp], edx
; Line 213
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	mov	edx, DWORD PTR _item$[ebp]
	mov	BYTE PTR [edx+105], cl
	mov	eax, DWORD PTR _item$[ebp]
	movzx	ecx, BYTE PTR [eax+105]
	test	ecx, ecx
	je	SHORT $LN46@GetNextIte
	mov	edx, DWORD PTR _item$[ebp]
	add	edx, 52					; 00000034H
	push	edx
	push	8
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	?OctalToNumber32@NTar@NArchive@@YG_NPBDIAAI@Z ; NArchive::NTar::OctalToNumber32
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN46@GetNextIte
	xor	eax, eax
	jmp	$LN63@GetNextIte
$LN46@GetNextIte:
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 8
	mov	DWORD PTR _p$[ebp], edx
; Line 214
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	mov	edx, DWORD PTR _item$[ebp]
	mov	BYTE PTR [edx+106], cl
	mov	eax, DWORD PTR _item$[ebp]
	movzx	ecx, BYTE PTR [eax+106]
	test	ecx, ecx
	je	SHORT $LN44@GetNextIte
	mov	edx, DWORD PTR _item$[ebp]
	add	edx, 56					; 00000038H
	push	edx
	push	8
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	?OctalToNumber32@NTar@NArchive@@YG_NPBDIAAI@Z ; NArchive::NTar::OctalToNumber32
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN44@GetNextIte
	xor	eax, eax
	jmp	$LN63@GetNextIte
$LN44@GetNextIte:
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 8
	mov	DWORD PTR _p$[ebp], edx
; Line 216
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	$LN42@GetNextIte
; Line 218
	lea	ecx, DWORD PTR _prefix$68186[ebp]
	call	??0AString@@QAE@XZ			; AString::AString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 219
	lea	edx, DWORD PTR _prefix$68186[ebp]
	push	edx
	push	155					; 0000009bH
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	?ReadString@NTar@NArchive@@YGXPBDIAAVAString@@@Z ; NArchive::NTar::ReadString
; Line 222
	lea	ecx, DWORD PTR _prefix$68186[ebp]
	call	?IsEmpty@AString@@QBE_NXZ		; AString::IsEmpty
	movzx	ecx, al
	test	ecx, ecx
	jne	$LN41@GetNextIte
	mov	ecx, DWORD PTR _item$[ebp]
	call	?IsUstarMagic@CItem@NTar@NArchive@@QBE_NXZ ; NArchive::NTar::CItem::IsUstarMagic
	movzx	edx, al
	test	edx, edx
	je	$LN41@GetNextIte
	mov	eax, DWORD PTR _item$[ebp]
	movsx	ecx, BYTE PTR [eax+104]
	cmp	ecx, 76					; 0000004cH
	je	$LN41@GetNextIte
; Line 223
	mov	edx, DWORD PTR _item$[ebp]
	push	edx
	push	47					; 0000002fH
	lea	eax, DWORD PTR _prefix$68186[ebp]
	push	eax
	lea	ecx, DWORD PTR $T68476[ebp]
	push	ecx
	call	??H@YG?AVAString@@ABV0@D@Z		; operator+
	mov	DWORD PTR tv352[ebp], eax
	mov	edx, DWORD PTR tv352[ebp]
	mov	DWORD PTR tv597[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR tv597[ebp]
	push	eax
	lea	ecx, DWORD PTR $T68477[ebp]
	push	ecx
	call	??H@YG?AVAString@@ABV0@0@Z		; operator+
	mov	DWORD PTR tv600[ebp], eax
	mov	edx, DWORD PTR tv600[ebp]
	mov	DWORD PTR tv599[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	eax, DWORD PTR tv599[ebp]
	push	eax
	mov	ecx, DWORD PTR _item$[ebp]
	call	??4AString@@QAEAAV0@ABV0@@Z		; AString::operator=
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T68477[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T68476[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
$LN41@GetNextIte:
; Line 224
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _prefix$68186[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
$LN42@GetNextIte:
; Line 226
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 155				; 0000009bH
	mov	DWORD PTR _p$[ebp], ecx
; Line 228
	mov	edx, DWORD PTR _item$[ebp]
	movsx	eax, BYTE PTR [edx+104]
	cmp	eax, 49					; 00000031H
	jne	SHORT $LN40@GetNextIte
; Line 230
	mov	ecx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
; Line 231
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
$LN40@GetNextIte:
; Line 238
	mov	DWORD PTR _checkSumReal$[ebp], 0
; Line 239
	mov	DWORD PTR _checkSumReal_Signed$[ebp], 0
; Line 240
	mov	DWORD PTR _i$68193[ebp], 0
	jmp	SHORT $LN39@GetNextIte
$LN38@GetNextIte:
	mov	eax, DWORD PTR _i$68193[ebp]
	add	eax, 1
	mov	DWORD PTR _i$68193[ebp], eax
$LN39@GetNextIte:
	cmp	DWORD PTR _i$68193[ebp], 512		; 00000200H
	jae	SHORT $LN37@GetNextIte
; Line 242
	mov	ecx, DWORD PTR _i$68193[ebp]
	mov	dl, BYTE PTR _buf$[ebp+ecx]
	mov	BYTE PTR _c$68197[ebp], dl
; Line 243
	movsx	eax, BYTE PTR _c$68197[ebp]
	add	eax, DWORD PTR _checkSumReal_Signed$[ebp]
	mov	DWORD PTR _checkSumReal_Signed$[ebp], eax
; Line 244
	mov	ecx, DWORD PTR _i$68193[ebp]
	movzx	edx, BYTE PTR _buf$[ebp+ecx]
	add	edx, DWORD PTR _checkSumReal$[ebp]
	mov	DWORD PTR _checkSumReal$[ebp], edx
; Line 245
	jmp	SHORT $LN38@GetNextIte
$LN37@GetNextIte:
; Line 247
	mov	eax, DWORD PTR _checkSumReal$[ebp]
	cmp	eax, DWORD PTR _checkSum$[ebp]
	je	SHORT $LN36@GetNextIte
; Line 249
	mov	ecx, DWORD PTR _checkSumReal_Signed$[ebp]
	cmp	ecx, DWORD PTR _checkSum$[ebp]
	je	SHORT $LN36@GetNextIte
; Line 250
	xor	eax, eax
	jmp	$LN63@GetNextIte
$LN36@GetNextIte:
; Line 253
	mov	edx, DWORD PTR _item$[ebp]
	mov	eax, DWORD PTR [edx+128]
	add	eax, 512				; 00000200H
	mov	ecx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [ecx+128], eax
; Line 255
	mov	edx, DWORD PTR _item$[ebp]
	movsx	eax, BYTE PTR [edx+104]
	cmp	eax, 83					; 00000053H
	jne	$LN34@GetNextIte
; Line 257
	mov	cl, BYTE PTR _buf$[ebp+482]
	mov	BYTE PTR _isExtended$68205[ebp], cl
; Line 258
	movzx	edx, BYTE PTR _isExtended$68205[ebp]
	test	edx, edx
	je	SHORT $LN33@GetNextIte
	movzx	eax, BYTE PTR _isExtended$68205[ebp]
	cmp	eax, 1
	je	SHORT $LN33@GetNextIte
; Line 259
	xor	eax, eax
	jmp	$LN63@GetNextIte
$LN33@GetNextIte:
; Line 260
	mov	ecx, DWORD PTR _item$[ebp]
	add	ecx, 24					; 00000018H
	push	ecx
	lea	edx, DWORD PTR _buf$[ebp+483]
	push	edx
	call	?ParseSize@NTar@NArchive@@YG_NPBDAA_K@Z	; NArchive::NTar::ParseSize
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN32@GetNextIte
	xor	eax, eax
	jmp	$LN63@GetNextIte
$LN32@GetNextIte:
; Line 261
	mov	DWORD PTR _min$68210[ebp], 0
	mov	DWORD PTR _min$68210[ebp+4], 0
; Line 262
	mov	DWORD PTR _i$68211[ebp], 0
	jmp	SHORT $LN31@GetNextIte
$LN30@GetNextIte:
	mov	ecx, DWORD PTR _i$68211[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$68211[ebp], ecx
$LN31@GetNextIte:
	cmp	DWORD PTR _i$68211[ebp], 4
	jae	$LN29@GetNextIte
; Line 264
	mov	edx, DWORD PTR _i$68211[ebp]
	imul	edx, 24					; 00000018H
	lea	eax, DWORD PTR _buf$[ebp+edx+386]
	mov	DWORD PTR _p$[ebp], eax
; Line 265
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	bswap	edx
	test	edx, edx
	jne	SHORT $LN28@GetNextIte
; Line 267
	movzx	eax, BYTE PTR _isExtended$68205[ebp]
	test	eax, eax
	je	SHORT $LN27@GetNextIte
; Line 268
	xor	eax, eax
	jmp	$LN63@GetNextIte
$LN27@GetNextIte:
; Line 269
	jmp	$LN29@GetNextIte
$LN28@GetNextIte:
; Line 272
	lea	ecx, DWORD PTR _sb$68220[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	?ParseSize@NTar@NArchive@@YG_NPBDAA_K@Z	; NArchive::NTar::ParseSize
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN26@GetNextIte
	xor	eax, eax
	jmp	$LN63@GetNextIte
$LN26@GetNextIte:
; Line 273
	lea	ecx, DWORD PTR _sb$68220[ebp+8]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	call	?ParseSize@NTar@NArchive@@YG_NPBDAA_K@Z	; NArchive::NTar::ParseSize
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN25@GetNextIte
	xor	eax, eax
	jmp	$LN63@GetNextIte
$LN25@GetNextIte:
; Line 274
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _sb$68220[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _sb$68220[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _sb$68220[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _sb$68220[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _item$[ebp]
	add	ecx, 108				; 0000006cH
	call	?Add@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAEIUCSparseBlock@NTar@NArchive@@@Z ; CRecordVector<NArchive::NTar::CSparseBlock>::Add
; Line 275
	mov	ecx, DWORD PTR _sb$68220[ebp+4]
	cmp	ecx, DWORD PTR _min$68210[ebp+4]
	jb	SHORT $LN23@GetNextIte
	ja	SHORT $LN72@GetNextIte
	mov	edx, DWORD PTR _sb$68220[ebp]
	cmp	edx, DWORD PTR _min$68210[ebp]
	jb	SHORT $LN23@GetNextIte
$LN72@GetNextIte:
	mov	eax, DWORD PTR _item$[ebp]
	mov	DWORD PTR tv778[ebp], eax
	mov	ecx, DWORD PTR tv778[ebp]
	mov	edx, DWORD PTR _sb$68220[ebp+4]
	cmp	edx, DWORD PTR [ecx+28]
	jb	SHORT $LN24@GetNextIte
	ja	SHORT $LN23@GetNextIte
	mov	eax, DWORD PTR tv778[ebp]
	mov	ecx, DWORD PTR _sb$68220[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	jbe	SHORT $LN24@GetNextIte
$LN23@GetNextIte:
; Line 276
	xor	eax, eax
	jmp	$LN63@GetNextIte
$LN24@GetNextIte:
; Line 277
	mov	edx, DWORD PTR _sb$68220[ebp]
	and	edx, 511				; 000001ffH
	mov	eax, DWORD PTR _sb$68220[ebp+4]
	and	eax, 0
	mov	DWORD PTR tv790[ebp], edx
	mov	DWORD PTR tv790[ebp+4], eax
	mov	ecx, DWORD PTR tv790[ebp]
	or	ecx, DWORD PTR tv790[ebp+4]
	jne	SHORT $LN21@GetNextIte
	mov	edx, DWORD PTR _sb$68220[ebp+8]
	and	edx, 511				; 000001ffH
	mov	eax, DWORD PTR _sb$68220[ebp+12]
	and	eax, 0
	mov	DWORD PTR tv800[ebp], edx
	mov	DWORD PTR tv800[ebp+4], eax
	mov	ecx, DWORD PTR tv800[ebp]
	or	ecx, DWORD PTR tv800[ebp+4]
	je	SHORT $LN22@GetNextIte
$LN21@GetNextIte:
; Line 278
	xor	eax, eax
	jmp	$LN63@GetNextIte
$LN22@GetNextIte:
; Line 279
	mov	edx, DWORD PTR _sb$68220[ebp]
	add	edx, DWORD PTR _sb$68220[ebp+8]
	mov	eax, DWORD PTR _sb$68220[ebp+4]
	adc	eax, DWORD PTR _sb$68220[ebp+12]
	mov	DWORD PTR _min$68210[ebp], edx
	mov	DWORD PTR _min$68210[ebp+4], eax
; Line 280
	mov	ecx, DWORD PTR _min$68210[ebp+4]
	cmp	ecx, DWORD PTR _sb$68220[ebp+4]
	ja	SHORT $LN20@GetNextIte
	jb	SHORT $LN74@GetNextIte
	mov	edx, DWORD PTR _min$68210[ebp]
	cmp	edx, DWORD PTR _sb$68220[ebp]
	jae	SHORT $LN20@GetNextIte
$LN74@GetNextIte:
; Line 281
	xor	eax, eax
	jmp	$LN63@GetNextIte
$LN20@GetNextIte:
; Line 282
	jmp	$LN30@GetNextIte
$LN29@GetNextIte:
; Line 283
	mov	eax, DWORD PTR _item$[ebp]
	mov	DWORD PTR tv818[ebp], eax
	mov	ecx, DWORD PTR tv818[ebp]
	mov	edx, DWORD PTR _min$68210[ebp+4]
	cmp	edx, DWORD PTR [ecx+28]
	jb	SHORT $LN18@GetNextIte
	ja	SHORT $LN75@GetNextIte
	mov	eax, DWORD PTR tv818[ebp]
	mov	ecx, DWORD PTR _min$68210[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	jbe	SHORT $LN18@GetNextIte
$LN75@GetNextIte:
; Line 284
	xor	eax, eax
	jmp	$LN63@GetNextIte
$LN18@GetNextIte:
; Line 286
	movzx	edx, BYTE PTR _isExtended$68205[ebp]
	test	edx, edx
	je	$LN17@GetNextIte
; Line 288
	mov	DWORD PTR _processedSize$68238[ebp], 512 ; 00000200H
; Line 289
	lea	eax, DWORD PTR _processedSize$68238[ebp]
	push	eax
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	?ReadStream@@YGJPAUISequentialInStream@@PAXPAI@Z ; ReadStream
	mov	DWORD PTR ___result__$68239[ebp], eax
	cmp	DWORD PTR ___result__$68239[ebp], 0
	je	SHORT $LN16@GetNextIte
	mov	eax, DWORD PTR ___result__$68239[ebp]
	jmp	$LN63@GetNextIte
$LN16@GetNextIte:
; Line 290
	cmp	DWORD PTR _processedSize$68238[ebp], 512 ; 00000200H
	je	SHORT $LN15@GetNextIte
; Line 292
	mov	eax, DWORD PTR _error$[ebp]
	mov	DWORD PTR [eax], 2
; Line 293
	xor	eax, eax
	jmp	$LN63@GetNextIte
$LN15@GetNextIte:
; Line 296
	mov	ecx, DWORD PTR _item$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	add	edx, 512				; 00000200H
	mov	eax, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+128], edx
; Line 297
	mov	cl, BYTE PTR _buf$[ebp+504]
	mov	BYTE PTR _isExtended$68205[ebp], cl
; Line 298
	movzx	edx, BYTE PTR _isExtended$68205[ebp]
	test	edx, edx
	je	SHORT $LN14@GetNextIte
	movzx	eax, BYTE PTR _isExtended$68205[ebp]
	cmp	eax, 1
	je	SHORT $LN14@GetNextIte
; Line 299
	xor	eax, eax
	jmp	$LN63@GetNextIte
$LN14@GetNextIte:
; Line 300
	mov	DWORD PTR _i$68245[ebp], 0
	jmp	SHORT $LN13@GetNextIte
$LN12@GetNextIte:
	mov	ecx, DWORD PTR _i$68245[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$68245[ebp], ecx
$LN13@GetNextIte:
	cmp	DWORD PTR _i$68245[ebp], 21		; 00000015H
	jae	$LN11@GetNextIte
; Line 302
	mov	edx, DWORD PTR _i$68245[ebp]
	imul	edx, 24					; 00000018H
	lea	eax, DWORD PTR _buf$[ebp+edx]
	mov	DWORD PTR _p$[ebp], eax
; Line 303
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	bswap	edx
	test	edx, edx
	jne	SHORT $LN10@GetNextIte
; Line 305
	movzx	eax, BYTE PTR _isExtended$68205[ebp]
	test	eax, eax
	je	SHORT $LN9@GetNextIte
; Line 306
	xor	eax, eax
	jmp	$LN63@GetNextIte
$LN9@GetNextIte:
; Line 307
	jmp	$LN11@GetNextIte
$LN10@GetNextIte:
; Line 310
	lea	ecx, DWORD PTR _sb$68254[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	?ParseSize@NTar@NArchive@@YG_NPBDAA_K@Z	; NArchive::NTar::ParseSize
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN8@GetNextIte
	xor	eax, eax
	jmp	$LN63@GetNextIte
$LN8@GetNextIte:
; Line 311
	lea	ecx, DWORD PTR _sb$68254[ebp+8]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	call	?ParseSize@NTar@NArchive@@YG_NPBDAA_K@Z	; NArchive::NTar::ParseSize
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN7@GetNextIte
	xor	eax, eax
	jmp	$LN63@GetNextIte
$LN7@GetNextIte:
; Line 312
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _sb$68254[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _sb$68254[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _sb$68254[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _sb$68254[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _item$[ebp]
	add	ecx, 108				; 0000006cH
	call	?Add@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAEIUCSparseBlock@NTar@NArchive@@@Z ; CRecordVector<NArchive::NTar::CSparseBlock>::Add
; Line 313
	mov	ecx, DWORD PTR _sb$68254[ebp+4]
	cmp	ecx, DWORD PTR _min$68210[ebp+4]
	jb	SHORT $LN5@GetNextIte
	ja	SHORT $LN76@GetNextIte
	mov	edx, DWORD PTR _sb$68254[ebp]
	cmp	edx, DWORD PTR _min$68210[ebp]
	jb	SHORT $LN5@GetNextIte
$LN76@GetNextIte:
	mov	eax, DWORD PTR _item$[ebp]
	mov	DWORD PTR tv868[ebp], eax
	mov	ecx, DWORD PTR tv868[ebp]
	mov	edx, DWORD PTR _sb$68254[ebp+4]
	cmp	edx, DWORD PTR [ecx+28]
	jb	SHORT $LN6@GetNextIte
	ja	SHORT $LN5@GetNextIte
	mov	eax, DWORD PTR tv868[ebp]
	mov	ecx, DWORD PTR _sb$68254[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	jbe	SHORT $LN6@GetNextIte
$LN5@GetNextIte:
; Line 314
	xor	eax, eax
	jmp	$LN63@GetNextIte
$LN6@GetNextIte:
; Line 315
	mov	edx, DWORD PTR _sb$68254[ebp]
	and	edx, 511				; 000001ffH
	mov	eax, DWORD PTR _sb$68254[ebp+4]
	and	eax, 0
	mov	DWORD PTR tv880[ebp], edx
	mov	DWORD PTR tv880[ebp+4], eax
	mov	ecx, DWORD PTR tv880[ebp]
	or	ecx, DWORD PTR tv880[ebp+4]
	jne	SHORT $LN3@GetNextIte
	mov	edx, DWORD PTR _sb$68254[ebp+8]
	and	edx, 511				; 000001ffH
	mov	eax, DWORD PTR _sb$68254[ebp+12]
	and	eax, 0
	mov	DWORD PTR tv890[ebp], edx
	mov	DWORD PTR tv890[ebp+4], eax
	mov	ecx, DWORD PTR tv890[ebp]
	or	ecx, DWORD PTR tv890[ebp+4]
	je	SHORT $LN4@GetNextIte
$LN3@GetNextIte:
; Line 316
	xor	eax, eax
	jmp	$LN63@GetNextIte
$LN4@GetNextIte:
; Line 317
	mov	edx, DWORD PTR _sb$68254[ebp]
	add	edx, DWORD PTR _sb$68254[ebp+8]
	mov	eax, DWORD PTR _sb$68254[ebp+4]
	adc	eax, DWORD PTR _sb$68254[ebp+12]
	mov	DWORD PTR _min$68210[ebp], edx
	mov	DWORD PTR _min$68210[ebp+4], eax
; Line 318
	mov	ecx, DWORD PTR _min$68210[ebp+4]
	cmp	ecx, DWORD PTR _sb$68254[ebp+4]
	ja	SHORT $LN2@GetNextIte
	jb	SHORT $LN78@GetNextIte
	mov	edx, DWORD PTR _min$68210[ebp]
	cmp	edx, DWORD PTR _sb$68254[ebp]
	jae	SHORT $LN2@GetNextIte
$LN78@GetNextIte:
; Line 319
	xor	eax, eax
	jmp	SHORT $LN63@GetNextIte
$LN2@GetNextIte:
; Line 320
	jmp	$LN12@GetNextIte
$LN11@GetNextIte:
; Line 321
	jmp	$LN18@GetNextIte
$LN17@GetNextIte:
; Line 322
	mov	eax, DWORD PTR _item$[ebp]
	mov	DWORD PTR tv908[ebp], eax
	mov	ecx, DWORD PTR tv908[ebp]
	mov	edx, DWORD PTR _min$68210[ebp+4]
	cmp	edx, DWORD PTR [ecx+28]
	jb	SHORT $LN34@GetNextIte
	ja	SHORT $LN79@GetNextIte
	mov	eax, DWORD PTR tv908[ebp]
	mov	ecx, DWORD PTR _min$68210[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	jbe	SHORT $LN34@GetNextIte
$LN79@GetNextIte:
; Line 323
	xor	eax, eax
	jmp	SHORT $LN63@GetNextIte
$LN34@GetNextIte:
; Line 326
	mov	edx, DWORD PTR _filled$[ebp]
	mov	BYTE PTR [edx], 1
; Line 327
	mov	eax, DWORD PTR _error$[ebp]
	mov	DWORD PTR [eax], 0
; Line 328
	xor	eax, eax
$LN63@GetNextIte:
; Line 329
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN89@GetNextIte
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 784				; 00000310H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN89@GetNextIte:
	DD	7
	DD	$LN88@GetNextIte
$LN88@GetNextIte:
	DD	-532					; fffffdecH
	DD	512					; 00000200H
	DD	$LN80@GetNextIte
	DD	-552					; fffffdd8H
	DD	4
	DD	$LN81@GetNextIte
	DD	-568					; fffffdc8H
	DD	4
	DD	$LN82@GetNextIte
	DD	-588					; fffffdb4H
	DD	12					; 0000000cH
	DD	$LN83@GetNextIte
	DD	-640					; fffffd80H
	DD	16					; 00000010H
	DD	$LN84@GetNextIte
	DD	-652					; fffffd74H
	DD	4
	DD	$LN85@GetNextIte
	DD	-684					; fffffd54H
	DD	16					; 00000010H
	DD	$LN86@GetNextIte
$LN86@GetNextIte:
	DB	115					; 00000073H
	DB	98					; 00000062H
	DB	0
$LN85@GetNextIte:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN84@GetNextIte:
	DB	115					; 00000073H
	DB	98					; 00000062H
	DB	0
$LN83@GetNextIte:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	120					; 00000078H
	DB	0
$LN82@GetNextIte:
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	83					; 00000053H
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	0
$LN81@GetNextIte:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN80@GetNextIte:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?GetNextItemReal@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z$0:
	lea	ecx, DWORD PTR _prefix$68186[ebp]
	jmp	??1AString@@QAE@XZ			; AString::~AString
__unwindfunclet$?GetNextItemReal@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z$1:
	lea	ecx, DWORD PTR $T68476[ebp]
	jmp	??1AString@@QAE@XZ			; AString::~AString
__unwindfunclet$?GetNextItemReal@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z$2:
	lea	ecx, DWORD PTR $T68477[ebp]
	jmp	??1AString@@QAE@XZ			; AString::~AString
__ehhandler$?GetNextItemReal@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-780]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetNextItemReal@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetNextItemReal@NTar@NArchive@@YGJPAUISequentialInStream@@AA_NAAUCItemEx@12@AAW4EErrorType@12@@Z ENDP ; NArchive::NTar::GetNextItemReal
EXTRN	??0AString@@AAE@ABV0@D@Z:PROC			; AString::AString
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??H@YG?AVAString@@ABV0@D@Z
_TEXT	SEGMENT
$T68504 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_s$ = 12						; size = 4
_c$ = 16						; size = 1
??H@YG?AVAString@@ABV0@D@Z PROC				; operator+, COMDAT
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 209
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR $T68504[ebp], 0
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0AString@@AAE@ABV0@D@Z		; AString::AString
	mov	edx, DWORD PTR $T68504[ebp]
	or	edx, 1
	mov	DWORD PTR $T68504[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??H@YG?AVAString@@ABV0@D@Z ENDP				; operator+
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Len@AString@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Len@AString@@QBEIXZ PROC				; AString::Len, COMDAT
; _this$ = ecx
; Line 234
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Len@AString@@QBEIXZ ENDP				; AString::Len
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsEmpty@AString@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@AString@@QBE_NXZ PROC				; AString::IsEmpty, COMDAT
; _this$ = ecx
; Line 235
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+4], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@AString@@QBE_NXZ ENDP				; AString::IsEmpty
_TEXT	ENDS
EXTRN	?kUsTar_00@NMagic@NFileHeader@NTar@NArchive@@3QBDB:BYTE ; NArchive::NTar::NFileHeader::NMagic::kUsTar_00
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsUstarMagic@CItem@NTar@NArchive@@QBE_NXZ
_TEXT	SEGMENT
_i$68016 = -8						; size = 4
_this$ = -4						; size = 4
?IsUstarMagic@CItem@NTar@NArchive@@QBE_NXZ PROC		; NArchive::NTar::CItem::IsUstarMagic, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\tar\taritem.h
; Line 75
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 76
	mov	DWORD PTR _i$68016[ebp], 0
	jmp	SHORT $LN4@IsUstarMag
$LN3@IsUstarMag:
	mov	eax, DWORD PTR _i$68016[ebp]
	add	eax, 1
	mov	DWORD PTR _i$68016[ebp], eax
$LN4@IsUstarMag:
	cmp	DWORD PTR _i$68016[ebp], 5
	jge	SHORT $LN2@IsUstarMag
; Line 77
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR _i$68016[ebp]
	movsx	edx, BYTE PTR [ecx+96]
	mov	eax, DWORD PTR _i$68016[ebp]
	movsx	ecx, BYTE PTR ?kUsTar_00@NMagic@NFileHeader@NTar@NArchive@@3QBDB[eax]
	cmp	edx, ecx
	je	SHORT $LN1@IsUstarMag
; Line 78
	xor	al, al
	jmp	SHORT $LN5@IsUstarMag
$LN1@IsUstarMag:
; Line 79
	jmp	SHORT $LN3@IsUstarMag
$LN2@IsUstarMag:
	mov	al, 1
$LN5@IsUstarMag:
; Line 80
	mov	esp, ebp
	pop	ebp
	ret	0
?IsUstarMagic@CItem@NTar@NArchive@@QBE_NXZ ENDP		; NArchive::NTar::CItem::IsUstarMagic
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
_TEXT	SEGMENT
_i$68091 = -4						; size = 4
_buf$ = 8						; size = 4
?IsRecordLast@NTar@NArchive@@YG_NPBD@Z PROC		; NArchive::NTar::IsRecordLast
; File c:\workspace\7z1505-src\cpp\7zip\archive\tar\tarin.cpp
; Line 65
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 66
	mov	DWORD PTR _i$68091[ebp], 0
	jmp	SHORT $LN4@IsRecordLa
$LN3@IsRecordLa:
	mov	eax, DWORD PTR _i$68091[ebp]
	add	eax, 1
	mov	DWORD PTR _i$68091[ebp], eax
$LN4@IsRecordLa:
	cmp	DWORD PTR _i$68091[ebp], 512		; 00000200H
	jae	SHORT $LN2@IsRecordLa
; Line 67
	mov	ecx, DWORD PTR _buf$[ebp]
	add	ecx, DWORD PTR _i$68091[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN1@IsRecordLa
; Line 68
	xor	al, al
	jmp	SHORT $LN5@IsRecordLa
$LN1@IsRecordLa:
; Line 69
	jmp	SHORT $LN3@IsRecordLa
$LN2@IsRecordLa:
	mov	al, 1
$LN5@IsRecordLa:
; Line 70
	mov	esp, ebp
	pop	ebp
	ret	4
?IsRecordLast@NTar@NArchive@@YG_NPBD@Z ENDP		; NArchive::NTar::IsRecordLast
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	??4AString@@QAEAAV0@PBD@Z:PROC			; AString::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_temp$ = -524						; size = 513
__$ArrayPad$ = -4					; size = 4
_s$ = 8							; size = 4
_size$ = 12						; size = 4
_result$ = 16						; size = 4
?ReadString@NTar@NArchive@@YGXPBDIAAVAString@@@Z PROC	; NArchive::NTar::ReadString
; Line 73
	push	ebp
	mov	ebp, esp
	sub	esp, 528				; 00000210H
	push	edi
	lea	edi, DWORD PTR [ebp-528]
	mov	ecx, 132				; 00000084H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 75
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	lea	edx, DWORD PTR _temp$[ebp]
	push	edx
	call	?MyStrNCpy@NTar@NArchive@@YGXPADPBDI@Z	; NArchive::NTar::MyStrNCpy
; Line 76
	mov	eax, DWORD PTR _size$[ebp]
	mov	BYTE PTR _temp$[ebp+eax], 0
; Line 77
	lea	ecx, DWORD PTR _temp$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _result$[ebp]
	call	??4AString@@QAEAAV0@PBD@Z		; AString::operator=
; Line 78
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@ReadString
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 528				; 00000210H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN5@ReadString:
	DD	1
	DD	$LN4@ReadString
$LN4@ReadString:
	DD	-524					; fffffdf4H
	DD	513					; 00000201H
	DD	$LN3@ReadString
$LN3@ReadString:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
?ReadString@NTar@NArchive@@YGXPBDIAAVAString@@@Z ENDP	; NArchive::NTar::ReadString
_TEXT	ENDS
PUBLIC	?ReserveOnePosition@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@AAEXXZ ; CRecordVector<NArchive::NTar::CSparseBlock>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAEIUCSparseBlock@NTar@NArchive@@@Z
_TEXT	SEGMENT
tv72 = -20						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 16
?Add@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAEIUCSparseBlock@NTar@NArchive@@@Z PROC ; CRecordVector<NArchive::NTar::CSparseBlock>::Add, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@AAEXXZ ; CRecordVector<NArchive::NTar::CSparseBlock>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _item$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _item$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _item$[ebp+12]
	mov	DWORD PTR [eax+12], edx
; Line 201
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv72[ebp]
; Line 202
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Add
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN5@Add:
	DD	1
	DD	$LN4@Add
$LN4@Add:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN3@Add
$LN3@Add:
	DB	95					; 0000005fH
	DB	36					; 00000024H
	DB	65					; 00000041H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	0
?Add@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@QAEIUCSparseBlock@NTar@NArchive@@@Z ENDP ; CRecordVector<NArchive::NTar::CSparseBlock>::Add
_TEXT	ENDS
EXTRN	??2@YAPAXI@Z:PROC				; operator new
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ReserveOnePosition@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@AAEXXZ
_TEXT	SEGMENT
$T68527 = -20						; size = 4
$T68526 = -16						; size = 4
_p$68346 = -12						; size = 4
_newCapacity$68345 = -8					; size = 4
_this$ = -4						; size = 4
?ReserveOnePosition@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@AAEXXZ PROC ; CRecordVector<NArchive::NTar::CSparseBlock>::ReserveOnePosition, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@ReserveOne
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$68345[ebp], ecx
; Line 23
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$68345[ebp]
	mov	edx, 16					; 00000010H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T68526[ebp], eax
	mov	eax, DWORD PTR $T68526[ebp]
	mov	DWORD PTR _p$68346[ebp], eax
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@ReserveOne
; Line 25
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$68346[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne:
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T68527[ebp], edx
	mov	eax, DWORD PTR $T68527[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$68346[ebp]
	mov	DWORD PTR [ecx], edx
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$68345[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ReserveOne:
; Line 30
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveOnePosition@?$CRecordVector@UCSparseBlock@NTar@NArchive@@@@AAEXXZ ENDP ; CRecordVector<NArchive::NTar::CSparseBlock>::ReserveOnePosition
_TEXT	ENDS
END
