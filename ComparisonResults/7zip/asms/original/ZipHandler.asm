; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\CPP\7zip\Archive\Zip\ZipHandler.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_kMethod_AES DD	FLAT:$SG73979
_kMethod_ZipCrypto DD FLAT:$SG73981
_kMethod_StrongCrypto DD FLAT:$SG73983
_DATA	ENDS
CONST	SEGMENT
$SG73946 DB	'FAT', 00H
$SG73947 DB	'AMIGA', 00H
	ORG $+2
$SG73948 DB	'VMS', 00H
$SG73949 DB	'Unix', 00H
	ORG $+3
$SG73950 DB	'VM/CMS', 00H
	ORG $+1
$SG73951 DB	'Atari', 00H
	ORG $+2
$SG73952 DB	'HPFS', 00H
	ORG $+3
$SG73953 DB	'Macintosh', 00H
	ORG $+2
$SG73954 DB	'Z-System', 00H
	ORG $+3
$SG73955 DB	'CP/M', 00H
	ORG $+3
$SG73956 DB	'TOPS-20', 00H
$SG73957 DB	'NTFS', 00H
	ORG $+3
$SG73958 DB	'SMS/QDOS', 00H
	ORG $+3
$SG73959 DB	'Acorn', 00H
	ORG $+2
$SG73960 DB	'VFAT', 00H
	ORG $+3
$SG73961 DB	'MVS', 00H
$SG73962 DB	'BeOS', 00H
	ORG $+3
$SG73963 DB	'Tandem', 00H
	ORG $+1
$SG73964 DB	'OS/400', 00H
	ORG $+1
$SG73965 DB	'OS/X', 00H
	ORG $+3
_kHostOS DD	FLAT:$SG73946
	DD	FLAT:$SG73947
	DD	FLAT:$SG73948
	DD	FLAT:$SG73949
	DD	FLAT:$SG73950
	DD	FLAT:$SG73951
	DD	FLAT:$SG73952
	DD	FLAT:$SG73953
	DD	FLAT:$SG73954
	DD	FLAT:$SG73955
	DD	FLAT:$SG73956
	DD	FLAT:$SG73957
	DD	FLAT:$SG73958
	DD	FLAT:$SG73959
	DD	FLAT:$SG73960
	DD	FLAT:$SG73961
	DD	FLAT:$SG73962
	DD	FLAT:$SG73963
	DD	FLAT:$SG73964
	DD	FLAT:$SG73965
$SG73967 DB	'Store', 00H
	ORG $+2
$SG73968 DB	'Shrink', 00H
	ORG $+1
$SG73969 DB	'Reduced1', 00H
	ORG $+3
$SG73970 DB	'Reduced2', 00H
	ORG $+3
$SG73971 DB	'Reduced3', 00H
	ORG $+3
$SG73972 DB	'Reduced4', 00H
	ORG $+3
$SG73973 DB	'Implode', 00H
$SG73974 DB	'Tokenizing', 00H
	ORG $+1
$SG73975 DB	'Deflate', 00H
$SG73976 DB	'Deflate64', 00H
	ORG $+2
$SG73977 DB	'PKImploding', 00H
_kMethods DD	FLAT:$SG73967
	DD	FLAT:$SG73968
	DD	FLAT:$SG73969
	DD	FLAT:$SG73970
	DD	FLAT:$SG73971
	DD	FLAT:$SG73972
	DD	FLAT:$SG73973
	DD	FLAT:$SG73974
	DD	FLAT:$SG73975
	DD	FLAT:$SG73976
	DD	FLAT:$SG73977
$SG73979 DB	'AES', 00H
$SG73981 DB	'ZipCrypto', 00H
	ORG $+2
$SG73983 DB	'StrongCrypto', 00H
	ORG $+3
$SG73994 DB	'BZip2', 00H
	ORG $+2
$SG73995 DB	'LZMA', 00H
	ORG $+3
$SG73996 DB	'xz', 00H
	ORG $+1
$SG73997 DB	'Jpeg', 00H
	ORG $+3
$SG73998 DB	'WavPack', 00H
$SG73999 DB	'PPMd', 00H
	ORG $+3
_k_MethodIdNamePairs DD 0cH
	DD	FLAT:$SG73994
	DD	0eH
	DD	FLAT:$SG73995
	DD	05fH
	DD	FLAT:$SG73996
	DD	060H
	DD	FLAT:$SG73997
	DD	061H
	DD	FLAT:$SG73998
	DD	062H
	DD	FLAT:$SG73999
$SG74001 DB	'DES', 00H
$SG74002 DB	'RC2a', 00H
	ORG $+3
$SG74003 DB	'3DES-168', 00H
	ORG $+3
$SG74004 DB	'3DES-112', 00H
	ORG $+3
$SG74005 DB	'pkAES-128', 00H
	ORG $+2
$SG74006 DB	'pkAES-192', 00H
	ORG $+2
$SG74007 DB	'pkAES-256', 00H
	ORG $+2
$SG74008 DB	'RC2', 00H
$SG74009 DB	'Blowfish', 00H
	ORG $+3
$SG74010 DB	'Twofish', 00H
$SG74011 DB	'RC4', 00H
_k_StrongCryptoPairs DD 06601H
	DD	FLAT:$SG74001
	DD	06602H
	DD	FLAT:$SG74002
	DD	06603H
	DD	FLAT:$SG74003
	DD	06609H
	DD	FLAT:$SG74004
	DD	0660eH
	DD	FLAT:$SG74005
	DD	0660fH
	DD	FLAT:$SG74006
	DD	06610H
	DD	FLAT:$SG74007
	DD	06702H
	DD	FLAT:$SG74008
	DD	06720H
	DD	FLAT:$SG74009
	DD	06721H
	DD	FLAT:$SG74010
	DD	06801H
	DD	FLAT:$SG74011
_kProps	DB	03H
	DB	06H
	DB	07H
	DB	08H
	DB	0cH
	DB	0aH
	DB	0bH
	DB	09H
	DB	0fH
	DB	01cH
	DB	013H
	DB	016H
	DB	017H
	DB	021H
	ORG $+2
_kArcProps DB	058H
	DB	029H
	DB	01cH
	ORG $+1
$SG74206 DB	':EOS', 00H
CONST	ENDS
PUBLIC	?FindNameForId@NZip@NArchive@@YGPBDPBUCIdToNamePair@12@II@Z ; NArchive::NZip::FindNameForId
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\ziphandler.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_pair$74021 = -8					; size = 4
_i$74017 = -4						; size = 4
_pairs$ = 8						; size = 4
_num$ = 12						; size = 4
_id$ = 16						; size = 4
?FindNameForId@NZip@NArchive@@YGPBDPBUCIdToNamePair@12@II@Z PROC ; NArchive::NZip::FindNameForId
; Line 118
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 119
	mov	DWORD PTR _i$74017[ebp], 0
	jmp	SHORT $LN4@FindNameFo
$LN3@FindNameFo:
	mov	eax, DWORD PTR _i$74017[ebp]
	add	eax, 1
	mov	DWORD PTR _i$74017[ebp], eax
$LN4@FindNameFo:
	mov	ecx, DWORD PTR _i$74017[ebp]
	cmp	ecx, DWORD PTR _num$[ebp]
	jae	SHORT $LN2@FindNameFo
; Line 121
	mov	edx, DWORD PTR _i$74017[ebp]
	mov	eax, DWORD PTR _pairs$[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	mov	DWORD PTR _pair$74021[ebp], ecx
; Line 122
	mov	edx, DWORD PTR _pair$74021[ebp]
	mov	eax, DWORD PTR _id$[ebp]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN1@FindNameFo
; Line 123
	mov	ecx, DWORD PTR _pair$74021[ebp]
	mov	eax, DWORD PTR [ecx+4]
	jmp	SHORT $LN5@FindNameFo
$LN1@FindNameFo:
; Line 124
	jmp	SHORT $LN3@FindNameFo
$LN2@FindNameFo:
; Line 125
	xor	eax, eax
$LN5@FindNameFo:
; Line 126
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?FindNameForId@NZip@NArchive@@YGPBDPBUCIdToNamePair@12@II@Z ENDP ; NArchive::NZip::FindNameForId
_TEXT	ENDS
PUBLIC	??1CBaseProps@NZip@NArchive@@QAE@XZ		; NArchive::NZip::CBaseProps::~CBaseProps
PUBLIC	??1CInArchive@NZip@NArchive@@QAE@XZ		; NArchive::NZip::CInArchive::~CInArchive
PUBLIC	??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemEx>::~CObjectVector<NArchive::NZip::CItemEx>
PUBLIC	?InitMethodProps@CHandler@NZip@NArchive@@AAEXXZ	; NArchive::NZip::CHandler::InitMethodProps
PUBLIC	??0CBaseProps@NZip@NArchive@@QAE@XZ		; NArchive::NZip::CBaseProps::CBaseProps
PUBLIC	??0CInArchive@NZip@NArchive@@QAE@XZ		; NArchive::NZip::CInArchive::CInArchive
PUBLIC	??0?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemEx>::CObjectVector<NArchive::NZip::CItemEx>
PUBLIC	??_7CHandler@NZip@NArchive@@6BISetProperties@@@	; NArchive::NZip::CHandler::`vftable'
PUBLIC	??_7CHandler@NZip@NArchive@@6BIOutArchive@@@	; NArchive::NZip::CHandler::`vftable'
PUBLIC	??_7CHandler@NZip@NArchive@@6BIInArchive@@@	; NArchive::NZip::CHandler::`vftable'
PUBLIC	??0CMyUnknownImp@@QAE@XZ			; CMyUnknownImp::CMyUnknownImp
PUBLIC	??0ISetProperties@@QAE@XZ			; ISetProperties::ISetProperties
PUBLIC	??0IOutArchive@@QAE@XZ				; IOutArchive::IOutArchive
PUBLIC	??0IInArchive@@QAE@XZ				; IInArchive::IInArchive
PUBLIC	??0CHandler@NZip@NArchive@@QAE@XZ		; NArchive::NZip::CHandler::CHandler
PUBLIC	??_R4CHandler@NZip@NArchive@@6BIInArchive@@@	; NArchive::NZip::CHandler::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCHandler@NZip@NArchive@@@8		; NArchive::NZip::CHandler `RTTI Type Descriptor'
PUBLIC	??_R3CHandler@NZip@NArchive@@8			; NArchive::NZip::CHandler::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CHandler@NZip@NArchive@@8			; NArchive::NZip::CHandler::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CHandler@NZip@NArchive@@8		; NArchive::NZip::CHandler::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@IInArchive@@8			; IInArchive::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIInArchive@@@8				; IInArchive `RTTI Type Descriptor'
PUBLIC	??_R3IInArchive@@8				; IInArchive::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IInArchive@@8				; IInArchive::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIUnknown@@@8				; IUnknown `RTTI Type Descriptor'
PUBLIC	??_R3IUnknown@@8				; IUnknown::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IUnknown@@8				; IUnknown::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EC@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
PUBLIC	??_R13?0A@EA@IOutArchive@@8			; IOutArchive::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AUIOutArchive@@@8				; IOutArchive `RTTI Type Descriptor'
PUBLIC	??_R3IOutArchive@@8				; IOutArchive::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IOutArchive@@8				; IOutArchive::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IOutArchive@@8			; IOutArchive::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EC@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
PUBLIC	??_R17?0A@EA@ISetProperties@@8			; ISetProperties::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	??_R0?AUISetProperties@@@8			; ISetProperties `RTTI Type Descriptor'
PUBLIC	??_R3ISetProperties@@8				; ISetProperties::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ISetProperties@@8				; ISetProperties::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ISetProperties@@8			; ISetProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R17?0A@EC@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
PUBLIC	??_R1M@?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (12,-1,0,64)'
PUBLIC	??_R0?AVCMyUnknownImp@@@8			; CMyUnknownImp `RTTI Type Descriptor'
PUBLIC	??_R3CMyUnknownImp@@8				; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMyUnknownImp@@8				; CMyUnknownImp::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?QueryInterface@CHandler@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::NZip::CHandler::QueryInterface
PUBLIC	?AddRef@CHandler@NZip@NArchive@@UAGKXZ		; NArchive::NZip::CHandler::AddRef
PUBLIC	?Release@CHandler@NZip@NArchive@@UAGKXZ		; NArchive::NZip::CHandler::Release
PUBLIC	?Open@CHandler@NZip@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z ; NArchive::NZip::CHandler::Open
PUBLIC	?Close@CHandler@NZip@NArchive@@UAGJXZ		; NArchive::NZip::CHandler::Close
PUBLIC	?GetNumberOfItems@CHandler@NZip@NArchive@@UAGJPAI@Z ; NArchive::NZip::CHandler::GetNumberOfItems
PUBLIC	?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z ; NArchive::NZip::CHandler::GetProperty
PUBLIC	?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z ; NArchive::NZip::CHandler::Extract
PUBLIC	?GetArchiveProperty@CHandler@NZip@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z ; NArchive::NZip::CHandler::GetArchiveProperty
PUBLIC	?GetNumberOfProperties@CHandler@NZip@NArchive@@UAGJPAI@Z ; NArchive::NZip::CHandler::GetNumberOfProperties
PUBLIC	?GetPropertyInfo@CHandler@NZip@NArchive@@UAGJIPAPA_WPAKPAG@Z ; NArchive::NZip::CHandler::GetPropertyInfo
PUBLIC	?GetNumberOfArchiveProperties@CHandler@NZip@NArchive@@UAGJPAI@Z ; NArchive::NZip::CHandler::GetNumberOfArchiveProperties
PUBLIC	?GetArchivePropertyInfo@CHandler@NZip@NArchive@@UAGJIPAPA_WPAKPAG@Z ; NArchive::NZip::CHandler::GetArchivePropertyInfo
PUBLIC	??_R4CHandler@NZip@NArchive@@6BIOutArchive@@@	; NArchive::NZip::CHandler::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@CHandler@NZip@NArchive@@W3AGJABU_GUID@@PAPAX@Z ; [thunk]:NArchive::NZip::CHandler::QueryInterface`adjustor{4}'
PUBLIC	?AddRef@CHandler@NZip@NArchive@@W3AGKXZ		; [thunk]:NArchive::NZip::CHandler::AddRef`adjustor{4}'
PUBLIC	?Release@CHandler@NZip@NArchive@@W3AGKXZ	; [thunk]:NArchive::NZip::CHandler::Release`adjustor{4}'
PUBLIC	??_R4CHandler@NZip@NArchive@@6BISetProperties@@@ ; NArchive::NZip::CHandler::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@CHandler@NZip@NArchive@@W7AGJABU_GUID@@PAPAX@Z ; [thunk]:NArchive::NZip::CHandler::QueryInterface`adjustor{8}'
PUBLIC	?AddRef@CHandler@NZip@NArchive@@W7AGKXZ		; [thunk]:NArchive::NZip::CHandler::AddRef`adjustor{8}'
PUBLIC	?Release@CHandler@NZip@NArchive@@W7AGKXZ	; [thunk]:NArchive::NZip::CHandler::Release`adjustor{8}'
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z:PROC ; NArchive::NZip::CHandler::UpdateItems
EXTRN	?GetFileTimeType@CHandler@NZip@NArchive@@UAGJPAI@Z:PROC ; NArchive::NZip::CHandler::GetFileTimeType
EXTRN	?SetProperties@CHandler@NZip@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z:PROC ; NArchive::NZip::CHandler::SetProperties
;	COMDAT ??_R4CHandler@NZip@NArchive@@6BISetProperties@@@
rdata$r	SEGMENT
??_R4CHandler@NZip@NArchive@@6BISetProperties@@@ DD 00H	; NArchive::NZip::CHandler::`RTTI Complete Object Locator'
	DD	08H
	DD	00H
	DD	FLAT:??_R0?AVCHandler@NZip@NArchive@@@8
	DD	FLAT:??_R3CHandler@NZip@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R4CHandler@NZip@NArchive@@6BIOutArchive@@@
rdata$r	SEGMENT
??_R4CHandler@NZip@NArchive@@6BIOutArchive@@@ DD 00H	; NArchive::NZip::CHandler::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVCHandler@NZip@NArchive@@@8
	DD	FLAT:??_R3CHandler@NZip@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R2CMyUnknownImp@@8
rdata$r	SEGMENT
??_R2CMyUnknownImp@@8 DD FLAT:??_R1A@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMyUnknownImp@@8
rdata$r	SEGMENT
??_R3CMyUnknownImp@@8 DD 00H				; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMyUnknownImp@@@8
_DATA	SEGMENT
??_R0?AVCMyUnknownImp@@@8 DD FLAT:??_7type_info@@6B@	; CMyUnknownImp `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMyUnknownImp@@', 00H
_DATA	ENDS
;	COMDAT ??_R1M@?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R1M@?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (12,-1,0,64)'
	DD	00H
	DD	0cH
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R17?0A@EC@IUnknown@@8
rdata$r	SEGMENT
??_R17?0A@EC@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ISetProperties@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ISetProperties@@8 DD FLAT:??_R0?AUISetProperties@@@8 ; ISetProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ISetProperties@@8
rdata$r	ENDS
;	COMDAT ??_R2ISetProperties@@8
rdata$r	SEGMENT
??_R2ISetProperties@@8 DD FLAT:??_R1A@?0A@EA@ISetProperties@@8 ; ISetProperties::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ISetProperties@@8
rdata$r	SEGMENT
??_R3ISetProperties@@8 DD 00H				; ISetProperties::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ISetProperties@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUISetProperties@@@8
_DATA	SEGMENT
??_R0?AUISetProperties@@@8 DD FLAT:??_7type_info@@6B@	; ISetProperties `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUISetProperties@@', 00H
_DATA	ENDS
;	COMDAT ??_R17?0A@EA@ISetProperties@@8
rdata$r	SEGMENT
??_R17?0A@EA@ISetProperties@@8 DD FLAT:??_R0?AUISetProperties@@@8 ; ISetProperties::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	01H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ISetProperties@@8
rdata$r	ENDS
;	COMDAT ??_R13?0A@EC@IUnknown@@8
rdata$r	SEGMENT
??_R13?0A@EC@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@IOutArchive@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IOutArchive@@8 DD FLAT:??_R0?AUIOutArchive@@@8 ; IOutArchive::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IOutArchive@@8
rdata$r	ENDS
;	COMDAT ??_R2IOutArchive@@8
rdata$r	SEGMENT
??_R2IOutArchive@@8 DD FLAT:??_R1A@?0A@EA@IOutArchive@@8 ; IOutArchive::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3IOutArchive@@8
rdata$r	SEGMENT
??_R3IOutArchive@@8 DD 00H				; IOutArchive::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2IOutArchive@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIOutArchive@@@8
_DATA	SEGMENT
??_R0?AUIOutArchive@@@8 DD FLAT:??_7type_info@@6B@	; IOutArchive `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIOutArchive@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@IOutArchive@@8
rdata$r	SEGMENT
??_R13?0A@EA@IOutArchive@@8 DD FLAT:??_R0?AUIOutArchive@@@8 ; IOutArchive::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	01H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IOutArchive@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EC@IUnknown@@8
rdata$r	SEGMENT
??_R1A@?0A@EC@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R2IUnknown@@8
rdata$r	SEGMENT
??_R2IUnknown@@8 DD FLAT:??_R1A@?0A@EA@IUnknown@@8	; IUnknown::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3IUnknown@@8
rdata$r	SEGMENT
??_R3IUnknown@@8 DD 00H					; IUnknown::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIUnknown@@@8
_DATA	SEGMENT
??_R0?AUIUnknown@@@8 DD FLAT:??_7type_info@@6B@		; IUnknown `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIUnknown@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IUnknown@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R2IInArchive@@8
rdata$r	SEGMENT
??_R2IInArchive@@8 DD FLAT:??_R1A@?0A@EA@IInArchive@@8	; IInArchive::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3IInArchive@@8
rdata$r	SEGMENT
??_R3IInArchive@@8 DD 00H				; IInArchive::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2IInArchive@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIInArchive@@@8
_DATA	SEGMENT
??_R0?AUIInArchive@@@8 DD FLAT:??_7type_info@@6B@	; IInArchive `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIInArchive@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IInArchive@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IInArchive@@8 DD FLAT:??_R0?AUIInArchive@@@8 ; IInArchive::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IInArchive@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CHandler@NZip@NArchive@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CHandler@NZip@NArchive@@8 DD FLAT:??_R0?AVCHandler@NZip@NArchive@@@8 ; NArchive::NZip::CHandler::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	07H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CHandler@NZip@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R2CHandler@NZip@NArchive@@8
rdata$r	SEGMENT
??_R2CHandler@NZip@NArchive@@8 DD FLAT:??_R1A@?0A@EA@CHandler@NZip@NArchive@@8 ; NArchive::NZip::CHandler::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IInArchive@@8
	DD	FLAT:??_R1A@?0A@EC@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@IOutArchive@@8
	DD	FLAT:??_R13?0A@EC@IUnknown@@8
	DD	FLAT:??_R17?0A@EA@ISetProperties@@8
	DD	FLAT:??_R17?0A@EC@IUnknown@@8
	DD	FLAT:??_R1M@?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CHandler@NZip@NArchive@@8
rdata$r	SEGMENT
??_R3CHandler@NZip@NArchive@@8 DD 00H			; NArchive::NZip::CHandler::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	08H
	DD	FLAT:??_R2CHandler@NZip@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCHandler@NZip@NArchive@@@8
_DATA	SEGMENT
??_R0?AVCHandler@NZip@NArchive@@@8 DD FLAT:??_7type_info@@6B@ ; NArchive::NZip::CHandler `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCHandler@NZip@NArchive@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CHandler@NZip@NArchive@@6BIInArchive@@@
rdata$r	SEGMENT
??_R4CHandler@NZip@NArchive@@6BIInArchive@@@ DD 00H	; NArchive::NZip::CHandler::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCHandler@NZip@NArchive@@@8
	DD	FLAT:??_R3CHandler@NZip@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_7CHandler@NZip@NArchive@@6BISetProperties@@@
CONST	SEGMENT
??_7CHandler@NZip@NArchive@@6BISetProperties@@@ DD FLAT:??_R4CHandler@NZip@NArchive@@6BISetProperties@@@ ; NArchive::NZip::CHandler::`vftable'
	DD	FLAT:?QueryInterface@CHandler@NZip@NArchive@@W7AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CHandler@NZip@NArchive@@W7AGKXZ
	DD	FLAT:?Release@CHandler@NZip@NArchive@@W7AGKXZ
	DD	FLAT:?SetProperties@CHandler@NZip@NArchive@@UAGJPBQB_WPBUtagPROPVARIANT@@I@Z
CONST	ENDS
;	COMDAT ??_7CHandler@NZip@NArchive@@6BIOutArchive@@@
CONST	SEGMENT
??_7CHandler@NZip@NArchive@@6BIOutArchive@@@ DD FLAT:??_R4CHandler@NZip@NArchive@@6BIOutArchive@@@ ; NArchive::NZip::CHandler::`vftable'
	DD	FLAT:?QueryInterface@CHandler@NZip@NArchive@@W3AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CHandler@NZip@NArchive@@W3AGKXZ
	DD	FLAT:?Release@CHandler@NZip@NArchive@@W3AGKXZ
	DD	FLAT:?UpdateItems@CHandler@NZip@NArchive@@UAGJPAUISequentialOutStream@@IPAUIArchiveUpdateCallback@@@Z
	DD	FLAT:?GetFileTimeType@CHandler@NZip@NArchive@@UAGJPAI@Z
CONST	ENDS
;	COMDAT ??_7CHandler@NZip@NArchive@@6BIInArchive@@@
CONST	SEGMENT
??_7CHandler@NZip@NArchive@@6BIInArchive@@@ DD FLAT:??_R4CHandler@NZip@NArchive@@6BIInArchive@@@ ; NArchive::NZip::CHandler::`vftable'
	DD	FLAT:?QueryInterface@CHandler@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CHandler@NZip@NArchive@@UAGKXZ
	DD	FLAT:?Release@CHandler@NZip@NArchive@@UAGKXZ
	DD	FLAT:?Open@CHandler@NZip@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
	DD	FLAT:?Close@CHandler@NZip@NArchive@@UAGJXZ
	DD	FLAT:?GetNumberOfItems@CHandler@NZip@NArchive@@UAGJPAI@Z
	DD	FLAT:?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
	DD	FLAT:?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
	DD	FLAT:?GetArchiveProperty@CHandler@NZip@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z
	DD	FLAT:?GetNumberOfProperties@CHandler@NZip@NArchive@@UAGJPAI@Z
	DD	FLAT:?GetPropertyInfo@CHandler@NZip@NArchive@@UAGJIPAPA_WPAKPAG@Z
	DD	FLAT:?GetNumberOfArchiveProperties@CHandler@NZip@NArchive@@UAGJPAI@Z
	DD	FLAT:?GetArchivePropertyInfo@CHandler@NZip@NArchive@@UAGJIPAPA_WPAKPAG@Z
CONST	ENDS
xdata$x	SEGMENT
__unwindtable$??0CHandler@NZip@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CHandler@NZip@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CHandler@NZip@NArchive@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CHandler@NZip@NArchive@@QAE@XZ$2
__ehfuncinfo$??0CHandler@NZip@NArchive@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0CHandler@NZip@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CHandler@NZip@NArchive@@QAE@XZ PROC			; NArchive::NZip::CHandler::CHandler
; _this$ = ecx
; Line 155
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CHandler@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IInArchive@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0IOutArchive@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0ISetProperties@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CHandler@NZip@NArchive@@6BIInArchive@@@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], OFFSET ??_7CHandler@NZip@NArchive@@6BIOutArchive@@@
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], OFFSET ??_7CHandler@NZip@NArchive@@6BISetProperties@@@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemEx>::CObjectVector<NArchive::NZip::CItemEx>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??0CInArchive@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 168				; 000000a8H
	call	??0CBaseProps@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
; Line 156
	mov	ecx, DWORD PTR _this$[ebp]
	call	?InitMethodProps@CHandler@NZip@NArchive@@AAEXXZ ; NArchive::NZip::CHandler::InitMethodProps
; Line 157
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0CHandler@NZip@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	jmp	??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemEx>::~CObjectVector<NArchive::NZip::CItemEx>
__unwindfunclet$??0CHandler@NZip@NArchive@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	jmp	??1CInArchive@NZip@NArchive@@QAE@XZ
__unwindfunclet$??0CHandler@NZip@NArchive@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 168				; 000000a8H
	jmp	??1CBaseProps@NZip@NArchive@@QAE@XZ
__ehhandler$??0CHandler@NZip@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CHandler@NZip@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CHandler@NZip@NArchive@@QAE@XZ ENDP			; NArchive::NZip::CHandler::CHandler
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CMyUnknownImp@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMyUnknownImp@@QAE@XZ PROC				; CMyUnknownImp::CMyUnknownImp, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 167
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CMyUnknownImp@@QAE@XZ ENDP				; CMyUnknownImp::CMyUnknownImp
_TEXT	ENDS
PUBLIC	??0CMethodProps@@QAE@XZ				; CMethodProps::CMethodProps
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CBaseProps@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CBaseProps@NZip@NArchive@@QAE@XZ PROC		; NArchive::NZip::CBaseProps::CBaseProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CMethodProps@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CBaseProps@NZip@NArchive@@QAE@XZ ENDP		; NArchive::NZip::CBaseProps::CBaseProps
_TEXT	ENDS
PUBLIC	??0CProps@@QAE@XZ				; CProps::CProps
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CMethodProps@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMethodProps@@QAE@XZ PROC				; CMethodProps::CMethodProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CProps@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CMethodProps@@QAE@XZ ENDP				; CMethodProps::CMethodProps
_TEXT	ENDS
PUBLIC	??0?$CObjectVector@UCProp@@@@QAE@XZ		; CObjectVector<CProp>::CObjectVector<CProp>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CProps@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CProps@@QAE@XZ PROC					; CProps::CProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CObjectVector@UCProp@@@@QAE@XZ	; CObjectVector<CProp>::CObjectVector<CProp>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CProps@@QAE@XZ ENDP					; CProps::CProps
_TEXT	ENDS
PUBLIC	??1CMethodProps@@QAE@XZ				; CMethodProps::~CMethodProps
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CBaseProps@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CBaseProps@NZip@NArchive@@QAE@XZ PROC		; NArchive::NZip::CBaseProps::~CBaseProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CMethodProps@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CBaseProps@NZip@NArchive@@QAE@XZ ENDP		; NArchive::NZip::CBaseProps::~CBaseProps
_TEXT	ENDS
PUBLIC	??1CProps@@QAE@XZ				; CProps::~CProps
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CMethodProps@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CMethodProps@@QAE@XZ PROC				; CMethodProps::~CMethodProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CProps@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CMethodProps@@QAE@XZ ENDP				; CMethodProps::~CMethodProps
_TEXT	ENDS
PUBLIC	??1?$CObjectVector@UCProp@@@@QAE@XZ		; CObjectVector<CProp>::~CObjectVector<CProp>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CProps@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CProps@@QAE@XZ PROC					; CProps::~CProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CObjectVector@UCProp@@@@QAE@XZ	; CObjectVector<CProp>::~CObjectVector<CProp>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CProps@@QAE@XZ ENDP					; CProps::~CProps
_TEXT	ENDS
PUBLIC	_==@8
EXTRN	_IID_ISetProperties:BYTE
EXTRN	_IID_IOutArchive:BYTE
EXTRN	_IID_IInArchive:BYTE
EXTRN	_IID_IUnknown:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@CHandler@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
tv134 = -8						; size = 4
tv92 = -4						; size = 4
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CHandler@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z PROC ; NArchive::NZip::CHandler::QueryInterface, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\ziphandler.h
; Line 26
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN8@QueryInter
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	$LN7@QueryInter
$LN8@QueryInter:
	push	OFFSET _IID_IInArchive
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN6@QueryInter
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN7@QueryInter
$LN6@QueryInter:
; Line 27
	push	OFFSET _IID_IOutArchive
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@QueryInter
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN11@QueryInter
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	mov	DWORD PTR tv92[ebp], edx
	jmp	SHORT $LN12@QueryInter
$LN11@QueryInter:
	mov	DWORD PTR tv92[ebp], 0
$LN12@QueryInter:
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	ecx, DWORD PTR tv92[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN7@QueryInter
$LN4@QueryInter:
; Line 28
	push	OFFSET _IID_ISetProperties
	mov	edx, DWORD PTR _iid$[ebp]
	push	edx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN13@QueryInter
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	mov	DWORD PTR tv134[ebp], eax
	jmp	SHORT $LN14@QueryInter
$LN13@QueryInter:
	mov	DWORD PTR tv134[ebp], 0
$LN14@QueryInter:
	mov	ecx, DWORD PTR _outObject$[ebp]
	mov	edx, DWORD PTR tv134[ebp]
	mov	DWORD PTR [ecx], edx
	jmp	SHORT $LN7@QueryInter
$LN2@QueryInter:
; Line 30
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN9@QueryInter
$LN7@QueryInter:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], ecx
	xor	eax, eax
$LN9@QueryInter:
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CHandler@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z ENDP ; NArchive::NZip::CHandler::QueryInterface
_TEXT	ENDS
PUBLIC	_IsEqualGUID@8
; Function compile flags: /Odtp /RTCsu
;	COMDAT _==@8
_TEXT	SEGMENT
_guidOne$ = 8						; size = 4
_guidOther$ = 12					; size = 4
_==@8	PROC						; COMDAT
; File c:\program files (x86)\microsoft sdks\windows\v7.0a\include\guiddef.h
; Line 193
	push	ebp
	mov	ebp, esp
; Line 194
	mov	eax, DWORD PTR _guidOther$[ebp]
	push	eax
	mov	ecx, DWORD PTR _guidOne$[ebp]
	push	ecx
	call	_IsEqualGUID@8
; Line 195
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_==@8	ENDP
_TEXT	ENDS
EXTRN	_memcmp:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT _IsEqualGUID@8
_TEXT	SEGMENT
_rguid1$ = 8						; size = 4
_rguid2$ = 12						; size = 4
_IsEqualGUID@8 PROC					; COMDAT
; Line 160
	push	ebp
	mov	ebp, esp
; Line 161
	push	16					; 00000010H
	mov	eax, DWORD PTR _rguid2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rguid1$[ebp]
	push	ecx
	call	_memcmp
	add	esp, 12					; 0000000cH
	neg	eax
	sbb	eax, eax
	add	eax, 1
; Line 162
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_IsEqualGUID@8 ENDP
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CHandler@NZip@NArchive@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CHandler@NZip@NArchive@@UAGKXZ PROC		; NArchive::NZip::CHandler::AddRef, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\ziphandler.h
; Line 31
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+12], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CHandler@NZip@NArchive@@UAGKXZ ENDP		; NArchive::NZip::CHandler::AddRef
_TEXT	ENDS
PUBLIC	??_GCHandler@NZip@NArchive@@QAEPAXI@Z		; NArchive::NZip::CHandler::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CHandler@NZip@NArchive@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T76381 = -8						; size = 4
$T76380 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CHandler@NZip@NArchive@@UAGKXZ PROC		; NArchive::NZip::CHandler::Release, COMDAT
; Line 31
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+12], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	jmp	SHORT $LN2@Release
$LN1@Release:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T76381[ebp], edx
	mov	eax, DWORD PTR $T76381[ebp]
	mov	DWORD PTR $T76380[ebp], eax
	cmp	DWORD PTR $T76380[ebp], 0
	je	SHORT $LN4@Release
	push	1
	mov	ecx, DWORD PTR $T76380[ebp]
	call	??_GCHandler@NZip@NArchive@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release
$LN4@Release:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release:
	xor	eax, eax
$LN2@Release:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CHandler@NZip@NArchive@@UAGKXZ ENDP		; NArchive::NZip::CHandler::Release
_TEXT	ENDS
PUBLIC	?Init@CBaseProps@NZip@NArchive@@QAEXXZ		; NArchive::NZip::CBaseProps::Init
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?InitMethodProps@CHandler@NZip@NArchive@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?InitMethodProps@CHandler@NZip@NArchive@@AAEXXZ PROC	; NArchive::NZip::CHandler::InitMethodProps, COMDAT
; _this$ = ecx
; Line 59
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 60
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 168				; 000000a8H
	call	?Init@CBaseProps@NZip@NArchive@@QAEXXZ	; NArchive::NZip::CBaseProps::Init
; Line 61
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+192], -1
; Line 62
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+196], 0
; Line 63
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+197], 1
; Line 64
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+198], 0
; Line 65
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+199], 0
; Line 66
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+200], 0
; Line 67
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+201], 0
; Line 68
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+204], 1
; Line 69
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?InitMethodProps@CHandler@NZip@NArchive@@AAEXXZ ENDP	; NArchive::NZip::CHandler::InitMethodProps
_TEXT	ENDS
PUBLIC	?Clear@CProps@@QAEXXZ				; CProps::Clear
EXTRN	?GetNumberOfProcessors@NSystem@NWindows@@YGIXZ:PROC ; NWindows::NSystem::GetNumberOfProcessors
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Init@CBaseProps@NZip@NArchive@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Init@CBaseProps@NZip@NArchive@@QAEXXZ PROC		; NArchive::NZip::CBaseProps::Init, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\zipcompressionmode.h
; Line 30
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@CProps@@QAEXXZ			; CProps::Clear
; Line 32
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], -1
; Line 34
	call	?GetNumberOfProcessors@NSystem@NWindows@@YGIXZ ; NWindows::NSystem::GetNumberOfProcessors
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 35
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+20], 0
; Line 37
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+21], 0
; Line 38
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+22], 3
; Line 39
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Init@CBaseProps@NZip@NArchive@@QAEXXZ ENDP		; NArchive::NZip::CBaseProps::Init
_TEXT	ENDS
PUBLIC	?Clear@?$CObjectVector@UCProp@@@@QAEXXZ		; CObjectVector<CProp>::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Clear@CProps@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@CProps@@QAEXXZ PROC				; CProps::Clear, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\methodprops.h
; Line 31
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CObjectVector@UCProp@@@@QAEXXZ	; CObjectVector<CProp>::Clear
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@CProps@@QAEXXZ ENDP				; CProps::Clear
_TEXT	ENDS
PUBLIC	??1CHandler@NZip@NArchive@@QAE@XZ		; NArchive::NZip::CHandler::~CHandler
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCHandler@NZip@NArchive@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCHandler@NZip@NArchive@@QAEPAXI@Z PROC		; NArchive::NZip::CHandler::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CHandler@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCHandler@NZip@NArchive@@QAEPAXI@Z ENDP		; NArchive::NZip::CHandler::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CHandler@NZip@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CHandler@NZip@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CHandler@NZip@NArchive@@QAE@XZ$1
__ehfuncinfo$??1CHandler@NZip@NArchive@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CHandler@NZip@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CHandler@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CHandler@NZip@NArchive@@QAE@XZ PROC			; NArchive::NZip::CHandler::~CHandler, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CHandler@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 168				; 000000a8H
	call	??1CBaseProps@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??1CInArchive@NZip@NArchive@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemEx>::~CObjectVector<NArchive::NZip::CItemEx>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CHandler@NZip@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	jmp	??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemEx>::~CObjectVector<NArchive::NZip::CItemEx>
__unwindfunclet$??1CHandler@NZip@NArchive@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	jmp	??1CInArchive@NZip@NArchive@@QAE@XZ
__ehhandler$??1CHandler@NZip@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CHandler@NZip@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CHandler@NZip@NArchive@@QAE@XZ ENDP			; NArchive::NZip::CHandler::~CHandler
PUBLIC	??1CInBuffer@@QAE@XZ				; CInBuffer::~CInBuffer
PUBLIC	??1CInArchiveInfo@NZip@NArchive@@QAE@XZ		; NArchive::NZip::CInArchiveInfo::~CInArchiveInfo
PUBLIC	??1?$CMyComPtr@UIInStream@@@@QAE@XZ		; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CInArchive@NZip@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CInArchive@NZip@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CInArchive@NZip@NArchive@@QAE@XZ$1
__ehfuncinfo$??1CInArchive@NZip@NArchive@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CInArchive@NZip@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CInArchive@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CInArchive@NZip@NArchive@@QAE@XZ PROC		; NArchive::NZip::CInArchive::~CInArchive, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CInArchive@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 128				; 00000080H
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	??1CInArchiveInfo@NZip@NArchive@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CInBuffer@@QAE@XZ			; CInBuffer::~CInBuffer
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CInArchive@NZip@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CInBuffer@@QAE@XZ			; CInBuffer::~CInBuffer
__unwindfunclet$??1CInArchive@NZip@NArchive@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	jmp	??1CInArchiveInfo@NZip@NArchive@@QAE@XZ
__ehhandler$??1CInArchive@NZip@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CInArchive@NZip@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CInArchive@NZip@NArchive@@QAE@XZ ENDP		; NArchive::NZip::CInArchive::~CInArchive
EXTRN	?Free@CInBuffer@@QAEXXZ:PROC			; CInBuffer::Free
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CInBuffer@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CInBuffer@@QAE@XZ PROC				; CInBuffer::~CInBuffer, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\inbuffer.h
; Line 85
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Free@CInBuffer@@QAEXXZ			; CInBuffer::Free
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CInBuffer@@QAE@XZ ENDP				; CInBuffer::~CInBuffer
_TEXT	ENDS
PUBLIC	??1?$CBuffer@E@@QAE@XZ				; CBuffer<unsigned char>::~CBuffer<unsigned char>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CInArchiveInfo@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CInArchiveInfo@NZip@NArchive@@QAE@XZ PROC		; NArchive::NZip::CInArchiveInfo::~CInArchiveInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CInArchiveInfo@NZip@NArchive@@QAE@XZ ENDP		; NArchive::NZip::CInArchiveInfo::~CInArchiveInfo
_TEXT	ENDS
PUBLIC	??_7IInArchive@@6B@				; IInArchive::`vftable'
PUBLIC	??0IUnknown@@QAE@XZ				; IUnknown::IUnknown
PUBLIC	??_R4IInArchive@@6B@				; IInArchive::`RTTI Complete Object Locator'
EXTRN	__purecall:PROC
;	COMDAT ??_R4IInArchive@@6B@
rdata$r	SEGMENT
??_R4IInArchive@@6B@ DD 00H				; IInArchive::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIInArchive@@@8
	DD	FLAT:??_R3IInArchive@@8
rdata$r	ENDS
;	COMDAT ??_7IInArchive@@6B@
CONST	SEGMENT
??_7IInArchive@@6B@ DD FLAT:??_R4IInArchive@@6B@	; IInArchive::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0IInArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IInArchive@@QAE@XZ PROC				; IInArchive::IInArchive, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7IInArchive@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0IInArchive@@QAE@XZ ENDP				; IInArchive::IInArchive
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0IUnknown@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IUnknown@@QAE@XZ PROC				; IUnknown::IUnknown, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0IUnknown@@QAE@XZ ENDP				; IUnknown::IUnknown
_TEXT	ENDS
PUBLIC	??_7IOutArchive@@6B@				; IOutArchive::`vftable'
PUBLIC	??_R4IOutArchive@@6B@				; IOutArchive::`RTTI Complete Object Locator'
;	COMDAT ??_R4IOutArchive@@6B@
rdata$r	SEGMENT
??_R4IOutArchive@@6B@ DD 00H				; IOutArchive::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIOutArchive@@@8
	DD	FLAT:??_R3IOutArchive@@8
rdata$r	ENDS
;	COMDAT ??_7IOutArchive@@6B@
CONST	SEGMENT
??_7IOutArchive@@6B@ DD FLAT:??_R4IOutArchive@@6B@	; IOutArchive::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0IOutArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IOutArchive@@QAE@XZ PROC				; IOutArchive::IOutArchive, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7IOutArchive@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0IOutArchive@@QAE@XZ ENDP				; IOutArchive::IOutArchive
_TEXT	ENDS
PUBLIC	??_7ISetProperties@@6B@				; ISetProperties::`vftable'
PUBLIC	??_R4ISetProperties@@6B@			; ISetProperties::`RTTI Complete Object Locator'
;	COMDAT ??_R4ISetProperties@@6B@
rdata$r	SEGMENT
??_R4ISetProperties@@6B@ DD 00H				; ISetProperties::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUISetProperties@@@8
	DD	FLAT:??_R3ISetProperties@@8
rdata$r	ENDS
;	COMDAT ??_7ISetProperties@@6B@
CONST	SEGMENT
??_7ISetProperties@@6B@ DD FLAT:??_R4ISetProperties@@6B@ ; ISetProperties::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ISetProperties@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ISetProperties@@QAE@XZ PROC				; ISetProperties::ISetProperties, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ISetProperties@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ISetProperties@@QAE@XZ ENDP				; ISetProperties::ISetProperties
_TEXT	ENDS
PUBLIC	??0?$CMyComPtr@UIInStream@@@@QAE@XZ		; CMyComPtr<IInStream>::CMyComPtr<IInStream>
PUBLIC	??0CInArchiveInfo@NZip@NArchive@@QAE@XZ		; NArchive::NZip::CInArchiveInfo::CInArchiveInfo
PUBLIC	??0CInBuffer@@QAE@XZ				; CInBuffer::CInBuffer
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CInArchive@NZip@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CInArchive@NZip@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CInArchive@NZip@NArchive@@QAE@XZ$1
__ehfuncinfo$??0CInArchive@NZip@NArchive@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CInArchive@NZip@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CInArchive@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CInArchive@NZip@NArchive@@QAE@XZ PROC		; NArchive::NZip::CInArchive::CInArchive, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CInArchive@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CInBuffer@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	??0CInArchiveInfo@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CInArchiveInfo::CInArchiveInfo
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 128				; 00000080H
	call	??0?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::CMyComPtr<IInStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CInArchive@NZip@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CInBuffer@@QAE@XZ			; CInBuffer::~CInBuffer
__unwindfunclet$??0CInArchive@NZip@NArchive@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	jmp	??1CInArchiveInfo@NZip@NArchive@@QAE@XZ
__ehhandler$??0CInArchive@NZip@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CInArchive@NZip@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CInArchive@NZip@NArchive@@QAE@XZ ENDP		; NArchive::NZip::CInArchive::CInArchive
PUBLIC	??0?$CBuffer@E@@QAE@XZ				; CBuffer<unsigned char>::CBuffer<unsigned char>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CInArchiveInfo@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CInArchiveInfo@NZip@NArchive@@QAE@XZ PROC		; NArchive::NZip::CInArchiveInfo::CInArchiveInfo, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\zipin.h
; Line 58
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0
	mov	DWORD PTR [eax+28], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+40], 0
	mov	DWORD PTR [edx+44], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+48], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??0?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::CBuffer<unsigned char>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CInArchiveInfo@NZip@NArchive@@QAE@XZ ENDP		; NArchive::NZip::CInArchiveInfo::CInArchiveInfo
_TEXT	ENDS
EXTRN	??0CInBufferBase@@QAE@XZ:PROC			; CInBufferBase::CInBufferBase
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CInBuffer@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CInBuffer@@QAE@XZ PROC				; CInBuffer::CInBuffer, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CInBufferBase@@QAE@XZ		; CInBufferBase::CInBufferBase
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CInBuffer@@QAE@XZ ENDP				; CInBuffer::CInBuffer
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
_TEXT	SEGMENT
_this$ = 8						; size = 4
_numProps$ = 12						; size = 4
?GetNumberOfProperties@CHandler@NZip@NArchive@@UAGJPAI@Z PROC ; NArchive::NZip::CHandler::GetNumberOfProperties
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\ziphandler.cpp
; Line 166
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _numProps$[ebp]
	mov	DWORD PTR [eax], 14			; 0000000eH
	xor	eax, eax
	pop	ebp
	ret	8
?GetNumberOfProperties@CHandler@NZip@NArchive@@UAGJPAI@Z ENDP ; NArchive::NZip::CHandler::GetNumberOfProperties
_TEXT	ENDS
EXTRN	?k7z_PROPID_To_VARTYPE@@3QBEB:BYTE		; k7z_PROPID_To_VARTYPE
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = 8						; size = 4
_index$ = 12						; size = 4
_name$ = 16						; size = 4
_propID$ = 20						; size = 4
_varType$ = 24						; size = 4
?GetPropertyInfo@CHandler@NZip@NArchive@@UAGJIPAPA_WPAKPAG@Z PROC ; NArchive::NZip::CHandler::GetPropertyInfo
; Line 166
	push	ebp
	mov	ebp, esp
	cmp	DWORD PTR _index$[ebp], 14		; 0000000eH
	jb	SHORT $LN1@GetPropert
	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN2@GetPropert
$LN1@GetPropert:
	mov	eax, DWORD PTR _index$[ebp]
	movzx	ecx, BYTE PTR _kProps[eax]
	mov	edx, DWORD PTR _propID$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR _propID$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	dx, BYTE PTR ?k7z_PROPID_To_VARTYPE@@3QBEB[ecx]
	mov	eax, DWORD PTR _varType$[ebp]
	mov	WORD PTR [eax], dx
	mov	ecx, DWORD PTR _name$[ebp]
	mov	DWORD PTR [ecx], 0
	xor	eax, eax
$LN2@GetPropert:
	pop	ebp
	ret	20					; 00000014H
?GetPropertyInfo@CHandler@NZip@NArchive@@UAGJIPAPA_WPAKPAG@Z ENDP ; NArchive::NZip::CHandler::GetPropertyInfo
; Function compile flags: /Odtp /RTCsu
_this$ = 8						; size = 4
_numProps$ = 12						; size = 4
?GetNumberOfArchiveProperties@CHandler@NZip@NArchive@@UAGJPAI@Z PROC ; NArchive::NZip::CHandler::GetNumberOfArchiveProperties
; Line 167
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _numProps$[ebp]
	mov	DWORD PTR [eax], 3
	xor	eax, eax
	pop	ebp
	ret	8
?GetNumberOfArchiveProperties@CHandler@NZip@NArchive@@UAGJPAI@Z ENDP ; NArchive::NZip::CHandler::GetNumberOfArchiveProperties
; Function compile flags: /Odtp /RTCsu
_this$ = 8						; size = 4
_index$ = 12						; size = 4
_name$ = 16						; size = 4
_propID$ = 20						; size = 4
_varType$ = 24						; size = 4
?GetArchivePropertyInfo@CHandler@NZip@NArchive@@UAGJIPAPA_WPAKPAG@Z PROC ; NArchive::NZip::CHandler::GetArchivePropertyInfo
; Line 167
	push	ebp
	mov	ebp, esp
	cmp	DWORD PTR _index$[ebp], 3
	jb	SHORT $LN1@GetArchive
	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN2@GetArchive
$LN1@GetArchive:
	mov	eax, DWORD PTR _index$[ebp]
	movzx	ecx, BYTE PTR _kArcProps[eax]
	mov	edx, DWORD PTR _propID$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR _propID$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	dx, BYTE PTR ?k7z_PROPID_To_VARTYPE@@3QBEB[ecx]
	mov	eax, DWORD PTR _varType$[ebp]
	mov	WORD PTR [eax], dx
	mov	ecx, DWORD PTR _name$[ebp]
	mov	DWORD PTR [ecx], 0
	xor	eax, eax
$LN2@GetArchive:
	pop	ebp
	ret	20					; 00000014H
?GetArchivePropertyInfo@CHandler@NZip@NArchive@@UAGJIPAPA_WPAKPAG@Z ENDP ; NArchive::NZip::CHandler::GetArchivePropertyInfo
_TEXT	ENDS
PUBLIC	??1CPropVariant@NCOM@NWindows@@QAE@XZ		; NWindows::NCOM::CPropVariant::~CPropVariant
PUBLIC	?CanUpdate@CInArchive@NZip@NArchive@@QBE_NXZ	; NArchive::NZip::CInArchive::CanUpdate
PUBLIC	?IsOpen@CInArchive@NZip@NArchive@@QBE_NXZ	; NArchive::NZip::CInArchive::IsOpen
PUBLIC	?GetEmbeddedStubSize@CInArchiveInfo@NZip@NArchive@@QBE_KXZ ; NArchive::NZip::CInArchiveInfo::GetEmbeddedStubSize
PUBLIC	?GetPhySize@CInArchiveInfo@NZip@NArchive@@QBE_KXZ ; NArchive::NZip::CInArchiveInfo::GetPhySize
PUBLIC	??1AString@@QAE@XZ				; AString::~AString
PUBLIC	??1UString@@QAE@XZ				; UString::~UString
PUBLIC	?Size@?$CBuffer@E@@QBEIXZ			; CBuffer<unsigned char>::Size
PUBLIC	??0CPropVariant@NCOM@NWindows@@QAE@XZ		; NWindows::NCOM::CPropVariant::CPropVariant
EXTRN	?Detach@CPropVariant@NCOM@NWindows@@QAEJPAUtagPROPVARIANT@@@Z:PROC ; NWindows::NCOM::CPropVariant::Detach
EXTRN	??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z:PROC ; NWindows::NCOM::CPropVariant::operator=
EXTRN	??4CPropVariant@NCOM@NWindows@@QAEAAV012@_J@Z:PROC ; NWindows::NCOM::CPropVariant::operator=
EXTRN	??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z:PROC ; NWindows::NCOM::CPropVariant::operator=
EXTRN	??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABVUString@@@Z:PROC ; NWindows::NCOM::CPropVariant::operator=
EXTRN	?MultiByteToUnicodeString@@YG?AVUString@@ABVAString@@I@Z:PROC ; MultiByteToUnicodeString
EXTRN	??4CPropVariant@NCOM@NWindows@@QAEAAV012@_N@Z:PROC ; NWindows::NCOM::CPropVariant::operator=
EXTRN	@_RTC_CheckStackVars@8:PROC
xdata$x	SEGMENT
__catchsym$?GetArchiveProperty@CHandler@NZip@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?GetArchiveProperty@CHandler@NZip@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$0
__tryblocktable$?GetArchiveProperty@CHandler@NZip@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z DD 00H
	DD	03H
	DD	04H
	DD	01H
	DD	FLAT:__catchsym$?GetArchiveProperty@CHandler@NZip@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$5
__ehfuncinfo$?GetArchiveProperty@CHandler@NZip@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?GetArchiveProperty@CHandler@NZip@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?GetArchiveProperty@CHandler@NZip@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?GetArchiveProperty@CHandler@NZip@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$?GetArchiveProperty@CHandler@NZip@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?GetArchiveProperty@CHandler@NZip@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$?GetArchiveProperty@CHandler@NZip@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$4
	DD	0ffffffffH
	DD	00H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv222 = -158						; size = 1
tv221 = -157						; size = 1
tv318 = -156						; size = 8
tv220 = -148						; size = 8
tv294 = -140						; size = 4
tv219 = -136						; size = 8
tv218 = -128						; size = 8
tv212 = -120						; size = 4
tv217 = -116						; size = 4
tv210 = -112						; size = 4
tv216 = -108						; size = 4
tv215 = -104						; size = 4
tv67 = -100						; size = 4
tv214 = -96						; size = 4
$T76451 = -92						; size = 4
$T76450 = -88						; size = 12
$T76449 = -76						; size = 12
_stubSize$74110 = -64					; size = 8
_v$74105 = -56						; size = 4
_v$74101 = -52						; size = 4
_stubSize$74098 = -48					; size = 8
_prop$74084 = -36					; size = 16
__$EHRec$ = -16						; size = 16
_this$ = 8						; size = 4
_propID$ = 12						; size = 4
_value$ = 16						; size = 4
?GetArchiveProperty@CHandler@NZip@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z PROC ; NArchive::NZip::CHandler::GetArchiveProperty
; Line 170
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetArchiveProperty@CHandler@NZip@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 144				; 00000090H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-160]
	mov	ecx, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
; Line 171
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 172
	lea	ecx, DWORD PTR _prop$74084[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
	mov	DWORD PTR tv214[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 1
; Line 173
	mov	eax, DWORD PTR _propID$[ebp]
	mov	DWORD PTR tv67[ebp], eax
	mov	ecx, DWORD PTR tv67[ebp]
	sub	ecx, 28					; 0000001cH
	mov	DWORD PTR tv67[ebp], ecx
	cmp	DWORD PTR tv67[ebp], 65			; 00000041H
	ja	$LN22@GetArchive@2
	mov	edx, DWORD PTR tv67[ebp]
	movzx	eax, BYTE PTR $LN35@GetArchive@2[edx]
	jmp	DWORD PTR $LN42@GetArchive@2[eax*4]
$LN21@GetArchive@2:
; Line 175
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+153]
	test	edx, edx
	je	SHORT $LN20@GetArchive@2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+153]
	push	ecx
	lea	ecx, DWORD PTR _prop$74084[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@_N@Z ; NWindows::NCOM::CPropVariant::operator=
$LN20@GetArchive@2:
	jmp	$LN22@GetArchive@2
$LN19@GetArchive@2:
; Line 176
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 140				; 0000008cH
	call	?Size@?$CBuffer@E@@QBEIXZ		; CBuffer<unsigned char>::Size
	mov	DWORD PTR tv215[ebp], eax
	cmp	DWORD PTR tv215[ebp], 0
	je	SHORT $LN18@GetArchive@2
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 140				; 0000008cH
	push	edx
	lea	eax, DWORD PTR $T76449[ebp]
	push	eax
	call	?BytesToString@NZip@NArchive@@YG?AVAString@@ABV?$CBuffer@E@@@Z ; NArchive::NZip::BytesToString
	mov	DWORD PTR tv216[ebp], eax
	mov	ecx, DWORD PTR tv216[ebp]
	mov	DWORD PTR tv210[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	push	0
	mov	edx, DWORD PTR tv210[ebp]
	push	edx
	lea	eax, DWORD PTR $T76450[ebp]
	push	eax
	call	?MultiByteToUnicodeString@@YG?AVUString@@ABVAString@@I@Z ; MultiByteToUnicodeString
	mov	DWORD PTR tv217[ebp], eax
	mov	ecx, DWORD PTR tv217[ebp]
	mov	DWORD PTR tv212[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	mov	edx, DWORD PTR tv212[ebp]
	push	edx
	lea	ecx, DWORD PTR _prop$74084[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABVUString@@@Z ; NWindows::NCOM::CPropVariant::operator=
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR $T76450[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR $T76449[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
$LN18@GetArchive@2:
	jmp	$LN22@GetArchive@2
$LN17@GetArchive@2:
; Line 177
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 88					; 00000058H
	call	?GetPhySize@CInArchiveInfo@NZip@NArchive@@QBE_KXZ ; NArchive::NZip::CInArchiveInfo::GetPhySize
	mov	DWORD PTR tv218[ebp], eax
	mov	DWORD PTR tv218[ebp+4], edx
	mov	eax, DWORD PTR tv218[ebp+4]
	push	eax
	mov	ecx, DWORD PTR tv218[ebp]
	push	ecx
	lea	ecx, DWORD PTR _prop$74084[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=
	jmp	$LN22@GetArchive@2
$LN16@GetArchive@2:
; Line 179
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+92]
	push	eax
	mov	ecx, DWORD PTR [edx+88]
	push	ecx
	lea	ecx, DWORD PTR _prop$74084[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@_J@Z ; NWindows::NCOM::CPropVariant::operator=
	jmp	$LN22@GetArchive@2
$LN15@GetArchive@2:
; Line 183
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 88					; 00000058H
	call	?GetEmbeddedStubSize@CInArchiveInfo@NZip@NArchive@@QBE_KXZ ; NArchive::NZip::CInArchiveInfo::GetEmbeddedStubSize
	mov	DWORD PTR tv219[ebp], eax
	mov	DWORD PTR tv219[ebp+4], edx
	mov	edx, DWORD PTR tv219[ebp]
	mov	DWORD PTR _stubSize$74098[ebp], edx
	mov	eax, DWORD PTR tv219[ebp+4]
	mov	DWORD PTR _stubSize$74098[ebp+4], eax
; Line 184
	mov	ecx, DWORD PTR _stubSize$74098[ebp]
	or	ecx, DWORD PTR _stubSize$74098[ebp+4]
	je	SHORT $LN14@GetArchive@2
; Line 185
	mov	edx, DWORD PTR _stubSize$74098[ebp+4]
	push	edx
	mov	eax, DWORD PTR _stubSize$74098[ebp]
	push	eax
	lea	ecx, DWORD PTR _prop$74084[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=
$LN14@GetArchive@2:
; Line 186
	jmp	$LN22@GetArchive@2
$LN13@GetArchive@2:
; Line 191
	mov	DWORD PTR _v$74101[ebp], 0
; Line 193
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+155]
	test	edx, edx
	je	SHORT $LN12@GetArchive@2
	mov	eax, DWORD PTR _v$74101[ebp]
	or	eax, 2
	mov	DWORD PTR _v$74101[ebp], eax
$LN12@GetArchive@2:
; Line 194
	cmp	DWORD PTR _v$74101[ebp], 0
	je	SHORT $LN11@GetArchive@2
; Line 195
	mov	ecx, DWORD PTR _v$74101[ebp]
	push	ecx
	lea	ecx, DWORD PTR _prop$74084[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z ; NWindows::NCOM::CPropVariant::operator=
$LN11@GetArchive@2:
; Line 196
	jmp	$LN22@GetArchive@2
$LN10@GetArchive@2:
; Line 201
	mov	DWORD PTR _v$74105[ebp], 0
; Line 202
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+152]
	test	eax, eax
	jne	SHORT $LN9@GetArchive@2
	mov	ecx, DWORD PTR _v$74105[ebp]
	or	ecx, 1
	mov	DWORD PTR _v$74105[ebp], ecx
$LN9@GetArchive@2:
; Line 203
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+154]
	test	eax, eax
	je	SHORT $LN8@GetArchive@2
	mov	ecx, DWORD PTR _v$74105[ebp]
	or	ecx, 2
	mov	DWORD PTR _v$74105[ebp], ecx
$LN8@GetArchive@2:
; Line 204
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+157]
	test	eax, eax
	je	SHORT $LN7@GetArchive@2
	mov	ecx, DWORD PTR _v$74105[ebp]
	or	ecx, 32					; 00000020H
	mov	DWORD PTR _v$74105[ebp], ecx
$LN7@GetArchive@2:
; Line 205
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv294[ebp], edx
	mov	eax, DWORD PTR tv294[ebp]
	cmp	DWORD PTR [eax+92], 0
	jg	SHORT $LN6@GetArchive@2
	jl	SHORT $LN36@GetArchive@2
	mov	ecx, DWORD PTR tv294[ebp]
	cmp	DWORD PTR [ecx+88], 0
	jae	SHORT $LN6@GetArchive@2
$LN36@GetArchive@2:
; Line 211
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 88					; 00000058H
	call	?GetEmbeddedStubSize@CInArchiveInfo@NZip@NArchive@@QBE_KXZ ; NArchive::NZip::CInArchiveInfo::GetEmbeddedStubSize
	mov	DWORD PTR tv220[ebp], eax
	mov	DWORD PTR tv220[ebp+4], edx
	mov	edx, DWORD PTR tv220[ebp]
	mov	DWORD PTR _stubSize$74110[ebp], edx
	mov	eax, DWORD PTR tv220[ebp+4]
	mov	DWORD PTR _stubSize$74110[ebp+4], eax
; Line 212
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	neg	edx
	mov	eax, DWORD PTR [ecx+92]
	adc	eax, 0
	neg	eax
	mov	DWORD PTR tv318[ebp], edx
	mov	DWORD PTR tv318[ebp+4], eax
	mov	ecx, DWORD PTR _stubSize$74110[ebp+4]
	cmp	ecx, DWORD PTR tv318[ebp+4]
	ja	SHORT $LN6@GetArchive@2
	jb	SHORT $LN37@GetArchive@2
	mov	edx, DWORD PTR _stubSize$74110[ebp]
	cmp	edx, DWORD PTR tv318[ebp]
	jae	SHORT $LN6@GetArchive@2
$LN37@GetArchive@2:
; Line 213
	mov	eax, DWORD PTR _v$74105[ebp]
	or	eax, 8
	mov	DWORD PTR _v$74105[ebp], eax
$LN6@GetArchive@2:
; Line 215
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+158]
	test	edx, edx
	je	SHORT $LN4@GetArchive@2
	mov	eax, DWORD PTR _v$74105[ebp]
	or	eax, 16					; 00000010H
	mov	DWORD PTR _v$74105[ebp], eax
$LN4@GetArchive@2:
; Line 216
	mov	ecx, DWORD PTR _v$74105[ebp]
	push	ecx
	lea	ecx, DWORD PTR _prop$74084[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z ; NWindows::NCOM::CPropVariant::operator=
; Line 217
	jmp	SHORT $LN22@GetArchive@2
$LN3@GetArchive@2:
; Line 222
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?IsOpen@CInArchive@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CInArchive::IsOpen
	mov	BYTE PTR tv221[ebp], al
	movzx	edx, BYTE PTR tv221[ebp]
	test	edx, edx
	je	SHORT $LN22@GetArchive@2
; Line 223
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?CanUpdate@CInArchive@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CInArchive::CanUpdate
	mov	BYTE PTR tv222[ebp], al
	movzx	eax, BYTE PTR tv222[ebp]
	test	eax, eax
	jne	SHORT $LN22@GetArchive@2
; Line 224
	push	1
	lea	ecx, DWORD PTR _prop$74084[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@_N@Z ; NWindows::NCOM::CPropVariant::operator=
$LN22@GetArchive@2:
; Line 228
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _prop$74084[ebp]
	call	?Detach@CPropVariant@NCOM@NWindows@@QAEJPAUtagPROPVARIANT@@@Z ; NWindows::NCOM::CPropVariant::Detach
; Line 229
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _prop$74084[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	jmp	SHORT $LN27@GetArchive@2
__catch$?GetArchiveProperty@CHandler@NZip@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$0:
	mov	DWORD PTR $T76451[ebp], -2147024882	; 8007000eH
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN33@GetArchive@2
	ret	0
	mov	eax, $LN27@GetArchive@2
	ret	0
$LN27@GetArchive@2:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN32@GetArchive@2
$LN33@GetArchive@2:
	mov	eax, DWORD PTR $T76451[ebp]
	jmp	SHORT $LN25@GetArchive@2
$LN32@GetArchive@2:
; Line 230
	xor	eax, eax
$LN25@GetArchive@2:
; Line 231
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN41@GetArchive@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 160				; 000000a0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN41@GetArchive@2:
	DD	1
	DD	$LN40@GetArchive@2
$LN40@GetArchive@2:
	DD	-36					; ffffffdcH
	DD	16					; 00000010H
	DD	$LN38@GetArchive@2
$LN38@GetArchive@2:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
	npad	3
$LN42@GetArchive@2:
	DD	$LN19@GetArchive@2
	DD	$LN16@GetArchive@2
	DD	$LN21@GetArchive@2
	DD	$LN17@GetArchive@2
	DD	$LN10@GetArchive@2
	DD	$LN13@GetArchive@2
	DD	$LN15@GetArchive@2
	DD	$LN3@GetArchive@2
	DD	$LN22@GetArchive@2
$LN35@GetArchive@2:
	DB	0
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	1
	DB	8
	DB	8
	DB	8
	DB	8
	DB	2
	DB	8
	DB	8
	DB	3
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	4
	DB	5
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	6
	DB	8
	DB	8
	DB	8
	DB	8
	DB	7
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?GetArchiveProperty@CHandler@NZip@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$2:
	lea	ecx, DWORD PTR _prop$74084[ebp]
	jmp	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
__unwindfunclet$?GetArchiveProperty@CHandler@NZip@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$3:
	lea	ecx, DWORD PTR $T76449[ebp]
	jmp	??1AString@@QAE@XZ			; AString::~AString
__unwindfunclet$?GetArchiveProperty@CHandler@NZip@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z$4:
	lea	ecx, DWORD PTR $T76450[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$?GetArchiveProperty@CHandler@NZip@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-164]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetArchiveProperty@CHandler@NZip@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetArchiveProperty@CHandler@NZip@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z ENDP ; NArchive::NZip::CHandler::GetArchiveProperty
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1AString@@QAE@XZ
_TEXT	SEGMENT
$T76475 = -8						; size = 4
_this$ = -4						; size = 4
??1AString@@QAE@XZ PROC					; AString::~AString, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 232
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T76475[ebp], ecx
	mov	edx, DWORD PTR $T76475[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1AString@@QAE@XZ ENDP					; AString::~AString
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1UString@@QAE@XZ
_TEXT	SEGMENT
$T76478 = -8						; size = 4
_this$ = -4						; size = 4
??1UString@@QAE@XZ PROC					; UString::~UString, COMDAT
; _this$ = ecx
; Line 470
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T76478[ebp], ecx
	mov	edx, DWORD PTR $T76478[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1UString@@QAE@XZ ENDP					; UString::~UString
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CPropVariant@NCOM@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CPropVariant@NCOM@NWindows@@QAE@XZ PROC		; NWindows::NCOM::CPropVariant::CPropVariant, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\propvariant.h
; Line 47
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 49
	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx], ax
; Line 50
	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+2], dx
; Line 54
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
; Line 55
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CPropVariant@NCOM@NWindows@@QAE@XZ ENDP		; NWindows::NCOM::CPropVariant::CPropVariant
_TEXT	ENDS
EXTRN	?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ:PROC	; NWindows::NCOM::CPropVariant::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CPropVariant@NCOM@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CPropVariant@NCOM@NWindows@@QAE@XZ PROC		; NWindows::NCOM::CPropVariant::~CPropVariant, COMDAT
; _this$ = ecx
; Line 56
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ ; NWindows::NCOM::CPropVariant::Clear
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CPropVariant@NCOM@NWindows@@QAE@XZ ENDP		; NWindows::NCOM::CPropVariant::~CPropVariant
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetPhySize@CInArchiveInfo@NZip@NArchive@@QBE_KXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPhySize@CInArchiveInfo@NZip@NArchive@@QBE_KXZ PROC	; NArchive::NZip::CInArchiveInfo::GetPhySize, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\zipin.h
; Line 60
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+24]
	sub	edx, DWORD PTR [ecx]
	mov	esi, DWORD PTR [eax+28]
	sbb	esi, DWORD PTR [ecx+4]
	mov	eax, edx
	mov	edx, esi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPhySize@CInArchiveInfo@NZip@NArchive@@QBE_KXZ ENDP	; NArchive::NZip::CInArchiveInfo::GetPhySize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetEmbeddedStubSize@CInArchiveInfo@NZip@NArchive@@QBE_KXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetEmbeddedStubSize@CInArchiveInfo@NZip@NArchive@@QBE_KXZ PROC ; NArchive::NZip::CInArchiveInfo::GetEmbeddedStubSize, COMDAT
; _this$ = ecx
; Line 62
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 63
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+48]
	test	ecx, ecx
	je	SHORT $LN1@GetEmbedde
; Line 64
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	edx, DWORD PTR [edx+44]
	jmp	SHORT $LN2@GetEmbedde
$LN1@GetEmbedde:
; Line 65
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+16]
	sub	edx, DWORD PTR [ecx]
	mov	esi, DWORD PTR [eax+20]
	sbb	esi, DWORD PTR [ecx+4]
	mov	eax, edx
	mov	edx, esi
$LN2@GetEmbedde:
; Line 66
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?GetEmbeddedStubSize@CInArchiveInfo@NZip@NArchive@@QBE_KXZ ENDP ; NArchive::NZip::CInArchiveInfo::GetEmbeddedStubSize
_TEXT	ENDS
PUBLIC	??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsOpen@CInArchive@NZip@NArchive@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsOpen@CInArchive@NZip@NArchive@@QBE_NXZ PROC		; NArchive::NZip::CInArchive::IsOpen, COMDAT
; _this$ = ecx
; Line 152
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 128				; 00000080H
	call	??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *
	neg	eax
	sbb	eax, eax
	neg	eax
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsOpen@CInArchive@NZip@NArchive@@QBE_NXZ ENDP		; NArchive::NZip::CInArchive::IsOpen
_TEXT	ENDS
PUBLIC	?ThereIsTail@CInArchiveInfo@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CInArchiveInfo::ThereIsTail
PUBLIC	?AreThereErrors@CInArchive@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CInArchive::AreThereErrors
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?CanUpdate@CInArchive@NZip@NArchive@@QBE_NXZ
_TEXT	SEGMENT
tv145 = -24						; size = 8
tv129 = -16						; size = 4
tv128 = -12						; size = 4
tv88 = -8						; size = 4
_this$ = -4						; size = 4
?CanUpdate@CInArchive@NZip@NArchive@@QBE_NXZ PROC	; NArchive::NZip::CInArchive::CanUpdate, COMDAT
; _this$ = ecx
; Line 170
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 171
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AreThereErrors@CInArchive@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CInArchive::AreThereErrors
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@CanUpdate
; Line 172
	xor	al, al
	jmp	$LN6@CanUpdate
$LN5@CanUpdate:
; Line 173
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv88[ebp], ecx
	mov	edx, DWORD PTR tv88[ebp]
	cmp	DWORD PTR [edx+60], 0
	jg	SHORT $LN4@CanUpdate
	jl	SHORT $LN8@CanUpdate
	mov	eax, DWORD PTR tv88[ebp]
	cmp	DWORD PTR [eax+56], 0
	jae	SHORT $LN4@CanUpdate
$LN8@CanUpdate:
; Line 174
	xor	al, al
	jmp	SHORT $LN6@CanUpdate
$LN4@CanUpdate:
; Line 175
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv128[ebp], ecx
	mov	DWORD PTR tv129[ebp], edx
	mov	eax, DWORD PTR tv128[ebp]
	mov	ecx, DWORD PTR tv129[ebp]
	mov	edx, DWORD PTR [eax+76]
	cmp	edx, DWORD PTR [ecx+60]
	jg	SHORT $LN3@CanUpdate
	jl	SHORT $LN9@CanUpdate
	mov	eax, DWORD PTR tv128[ebp]
	mov	ecx, DWORD PTR tv129[ebp]
	mov	edx, DWORD PTR [eax+72]
	cmp	edx, DWORD PTR [ecx+56]
	jae	SHORT $LN3@CanUpdate
$LN9@CanUpdate:
; Line 176
	xor	al, al
	jmp	SHORT $LN6@CanUpdate
$LN3@CanUpdate:
; Line 180
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	?GetEmbeddedStubSize@CInArchiveInfo@NZip@NArchive@@QBE_KXZ ; NArchive::NZip::CInArchiveInfo::GetEmbeddedStubSize
	mov	DWORD PTR tv145[ebp], eax
	mov	DWORD PTR tv145[ebp+4], edx
	mov	eax, DWORD PTR tv145[ebp]
	or	eax, DWORD PTR tv145[ebp+4]
	je	SHORT $LN2@CanUpdate
; Line 181
	xor	al, al
	jmp	SHORT $LN6@CanUpdate
$LN2@CanUpdate:
; Line 183
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	?ThereIsTail@CInArchiveInfo@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CInArchiveInfo::ThereIsTail
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@CanUpdate
; Line 184
	xor	al, al
	jmp	SHORT $LN6@CanUpdate
$LN1@CanUpdate:
; Line 185
	mov	al, 1
$LN6@CanUpdate:
; Line 186
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?CanUpdate@CInArchive@NZip@NArchive@@QBE_NXZ ENDP	; NArchive::NZip::CInArchive::CanUpdate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ThereIsTail@CInArchiveInfo@NZip@NArchive@@QBE_NXZ
_TEXT	SEGMENT
tv67 = -16						; size = 4
tv72 = -12						; size = 4
tv71 = -8						; size = 4
_this$ = -4						; size = 4
?ThereIsTail@CInArchiveInfo@NZip@NArchive@@QBE_NXZ PROC	; NArchive::NZip::CInArchiveInfo::ThereIsTail, COMDAT
; _this$ = ecx
; Line 67
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv71[ebp], eax
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR tv71[ebp]
	mov	eax, DWORD PTR tv72[ebp]
	mov	ecx, DWORD PTR [edx+36]
	cmp	ecx, DWORD PTR [eax+28]
	jb	SHORT $LN3@ThereIsTai
	ja	SHORT $LN5@ThereIsTai
	mov	edx, DWORD PTR tv71[ebp]
	mov	eax, DWORD PTR tv72[ebp]
	mov	ecx, DWORD PTR [edx+32]
	cmp	ecx, DWORD PTR [eax+24]
	jbe	SHORT $LN3@ThereIsTai
$LN5@ThereIsTai:
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@ThereIsTai
$LN3@ThereIsTai:
	mov	DWORD PTR tv67[ebp], 0
$LN4@ThereIsTai:
	mov	al, BYTE PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?ThereIsTail@CInArchiveInfo@NZip@NArchive@@QBE_NXZ ENDP	; NArchive::NZip::CInArchiveInfo::ThereIsTail
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AreThereErrors@CInArchive@NZip@NArchive@@QBE_NXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
?AreThereErrors@CInArchive@NZip@NArchive@@QBE_NXZ PROC	; NArchive::NZip::CInArchive::AreThereErrors, COMDAT
; _this$ = ecx
; Line 153
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+122]
	test	ecx, ecx
	jne	SHORT $LN3@AreThereEr
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+125]
	test	eax, eax
	jne	SHORT $LN3@AreThereEr
	mov	DWORD PTR tv70[ebp], 0
	jmp	SHORT $LN4@AreThereEr
$LN3@AreThereEr:
	mov	DWORD PTR tv70[ebp], 1
$LN4@AreThereEr:
	mov	al, BYTE PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?AreThereErrors@CInArchive@NZip@NArchive@@QBE_NXZ ENDP	; NArchive::NZip::CInArchive::AreThereErrors
_TEXT	ENDS
PUBLIC	??B?$CBuffer@E@@QBEPBEXZ			; CBuffer<unsigned char>::operator unsigned char const *
EXTRN	??0AString@@QAE@ABV0@@Z:PROC			; AString::AString
EXTRN	?SetFrom_CalcLen@AString@@QAEXPBDI@Z:PROC	; AString::SetFrom_CalcLen
EXTRN	??0AString@@QAE@XZ:PROC				; AString::AString
xdata$x	SEGMENT
__unwindtable$?BytesToString@NZip@NArchive@@YG?AVAString@@ABV?$CBuffer@E@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?BytesToString@NZip@NArchive@@YG?AVAString@@ABV?$CBuffer@E@@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?BytesToString@NZip@NArchive@@YG?AVAString@@ABV?$CBuffer@E@@@Z$0
__ehfuncinfo$?BytesToString@NZip@NArchive@@YG?AVAString@@ABV?$CBuffer@E@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?BytesToString@NZip@NArchive@@YG?AVAString@@ABV?$CBuffer@E@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T76506 = -36						; size = 4
_s$ = -28						; size = 12
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_data$ = 12						; size = 4
?BytesToString@NZip@NArchive@@YG?AVAString@@ABV?$CBuffer@E@@@Z PROC ; NArchive::NZip::BytesToString
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\ziphandler.cpp
; Line 160
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?BytesToString@NZip@NArchive@@YG?AVAString@@ABV?$CBuffer@E@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T76506[ebp], 0
; Line 161
	lea	ecx, DWORD PTR _s$[ebp]
	call	??0AString@@QAE@XZ			; AString::AString
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 162
	mov	ecx, DWORD PTR _data$[ebp]
	call	?Size@?$CBuffer@E@@QBEIXZ		; CBuffer<unsigned char>::Size
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	call	??B?$CBuffer@E@@QBEPBEXZ		; CBuffer<unsigned char>::operator unsigned char const *
	push	eax
	lea	ecx, DWORD PTR _s$[ebp]
	call	?SetFrom_CalcLen@AString@@QAEXPBDI@Z	; AString::SetFrom_CalcLen
; Line 163
	lea	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0AString@@QAE@ABV0@@Z			; AString::AString
	mov	ecx, DWORD PTR $T76506[ebp]
	or	ecx, 1
	mov	DWORD PTR $T76506[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _s$[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 164
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@BytesToStr
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN9@BytesToStr:
	DD	1
	DD	$LN8@BytesToStr
$LN8@BytesToStr:
	DD	-28					; ffffffe4H
	DD	12					; 0000000cH
	DD	$LN6@BytesToStr
$LN6@BytesToStr:
	DB	115					; 00000073H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?BytesToString@NZip@NArchive@@YG?AVAString@@ABV?$CBuffer@E@@@Z$0:
	lea	ecx, DWORD PTR _s$[ebp]
	jmp	??1AString@@QAE@XZ			; AString::~AString
__unwindfunclet$?BytesToString@NZip@NArchive@@YG?AVAString@@ABV?$CBuffer@E@@@Z$1:
	mov	eax, DWORD PTR $T76506[ebp]
	and	eax, 1
	je	$LN5@BytesToStr
	and	DWORD PTR $T76506[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1AString@@QAE@XZ			; AString::~AString
$LN5@BytesToStr:
	ret	0
__ehhandler$?BytesToString@NZip@NArchive@@YG?AVAString@@ABV?$CBuffer@E@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?BytesToString@NZip@NArchive@@YG?AVAString@@ABV?$CBuffer@E@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?BytesToString@NZip@NArchive@@YG?AVAString@@ABV?$CBuffer@E@@@Z ENDP ; NArchive::NZip::BytesToString
PUBLIC	?Size@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CItemEx>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = 8						; size = 4
_numItems$ = 12						; size = 4
?GetNumberOfItems@CHandler@NZip@NArchive@@UAGJPAI@Z PROC ; NArchive::NZip::CHandler::GetNumberOfItems
; Line 234
	push	ebp
	mov	ebp, esp
; Line 235
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?Size@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CItemEx>::Size
	mov	ecx, DWORD PTR _numItems$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 236
	xor	eax, eax
; Line 237
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?GetNumberOfItems@CHandler@NZip@NArchive@@UAGJPAI@Z ENDP ; NArchive::NZip::CHandler::GetNumberOfItems
_TEXT	ENDS
PUBLIC	?GetHostOS@CItem@NZip@NArchive@@QBEEXZ		; NArchive::NZip::CItem::GetHostOS
PUBLIC	??BAString@@QBEPBDXZ				; AString::operator char const *
PUBLIC	?IsLzmaEOS@CLocalItem@NZip@NArchive@@QBE_NXZ	; NArchive::NZip::CLocalItem::IsLzmaEOS
PUBLIC	??YAString@@QAEAAV0@D@Z				; AString::operator+=
PUBLIC	?GetStrongCrypto@CExtraBlock@NZip@NArchive@@QBE_NAAUCStrongCryptoExtra@23@@Z ; NArchive::NZip::CExtraBlock::GetStrongCrypto
PUBLIC	?IsStrongEncrypted@CLocalItem@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CLocalItem::IsStrongEncrypted
PUBLIC	?GetWzAes@CExtraBlock@NZip@NArchive@@QBE_NAAUCWzAesExtra@23@@Z ; NArchive::NZip::CExtraBlock::GetWzAes
PUBLIC	??0CWzAesExtra@NZip@NArchive@@QAE@XZ		; NArchive::NZip::CWzAesExtra::CWzAesExtra
PUBLIC	?IsThereCrc@CItem@NZip@NArchive@@QBE_NXZ	; NArchive::NZip::CItem::IsThereCrc
PUBLIC	?IsEncrypted@CLocalItem@NZip@NArchive@@QBE_NXZ	; NArchive::NZip::CLocalItem::IsEncrypted
PUBLIC	?GetUnixTime@CExtraBlock@NZip@NArchive@@QBE_N_NIAAI@Z ; NArchive::NZip::CExtraBlock::GetUnixTime
PUBLIC	?GetNtfsTime@CExtraBlock@NZip@NArchive@@QBE_NIAAU_FILETIME@@@Z ; NArchive::NZip::CExtraBlock::GetNtfsTime
PUBLIC	?GetUnicodeString@CItem@NZip@NArchive@@QBEXABVAString@@AAVUString@@_NI@Z ; NArchive::NZip::CItem::GetUnicodeString
PUBLIC	??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEAAVCItemEx@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CItemEx>::operator[]
PUBLIC	__$ArrayPad$
EXTRN	??4CPropVariant@NCOM@NWindows@@QAEAAV012@PBD@Z:PROC ; NWindows::NCOM::CPropVariant::operator=
EXTRN	?ConvertUInt32ToString@@YGXIPAD@Z:PROC		; ConvertUInt32ToString
EXTRN	??YAString@@QAEAAV0@PBD@Z:PROC			; AString::operator+=
EXTRN	?GetPosixAttrib@CItem@NZip@NArchive@@QBE_NAAI@Z:PROC ; NArchive::NZip::CItem::GetPosixAttrib
EXTRN	?GetWinAttrib@CItem@NZip@NArchive@@QBEIXZ:PROC	; NArchive::NZip::CItem::GetWinAttrib
EXTRN	__imp__LocalFileTimeToFileTime@8:PROC
EXTRN	?DosTimeToFileTime@NTime@NWindows@@YG_NIAAU_FILETIME@@@Z:PROC ; NWindows::NTime::DosTimeToFileTime
EXTRN	?UnixTimeToFileTime@NTime@NWindows@@YGXIAAU_FILETIME@@@Z:PROC ; NWindows::NTime::UnixTimeToFileTime
EXTRN	??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABU_FILETIME@@@Z:PROC ; NWindows::NCOM::CPropVariant::operator=
EXTRN	?IsDir@CItem@NZip@NArchive@@QBE_NXZ:PROC	; NArchive::NZip::CItem::IsDir
EXTRN	?ConvertToOSName2@NItemName@NArchive@@YGXAAVUString@@@Z:PROC ; NArchive::NItemName::ConvertToOSName2
EXTRN	??0UString@@QAE@XZ:PROC				; UString::UString
xdata$x	SEGMENT
__catchsym$?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$7 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$0
__tryblocktable$?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z DD 00H
	DD	05H
	DD	06H
	DD	01H
	DD	FLAT:__catchsym$?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$7
__ehfuncinfo$?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$3
	DD	01H
	DD	FLAT:__unwindfunclet$?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$4
	DD	03H
	DD	FLAT:__unwindfunclet$?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$5
	DD	01H
	DD	FLAT:__unwindfunclet$?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$6
	DD	0ffffffffH
	DD	00H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv528 = -477						; size = 1
tv527 = -476						; size = 4
tv526 = -469						; size = 1
tv525 = -468						; size = 4
tv524 = -464						; size = 4
tv523 = -460						; size = 1
tv522 = -459						; size = 1
tv521 = -458						; size = 1
tv520 = -457						; size = 1
tv519 = -456						; size = 4
tv518 = -449						; size = 1
tv497 = -448						; size = 4
tv517 = -444						; size = 4
tv516 = -440						; size = 4
tv515 = -436						; size = 4
tv514 = -430						; size = 1
tv513 = -429						; size = 1
tv512 = -428						; size = 4
tv511 = -423						; size = 1
tv510 = -422						; size = 1
tv509 = -421						; size = 1
tv508 = -420						; size = 1
tv507 = -419						; size = 1
tv506 = -418						; size = 1
tv505 = -417						; size = 1
tv504 = -416						; size = 4
tv71 = -412						; size = 4
tv503 = -408						; size = 4
tv502 = -404						; size = 4
$T76520 = -400						; size = 4
$T76519 = -396						; size = 4
$T76518 = -392						; size = 12
_s$74210 = -380						; size = 4
_temp$74209 = -372					; size = 16
_hostOS$74208 = -349					; size = 1
_s$74201 = -348						; size = 4
_temp$74200 = -340					; size = 16
_temp$74197 = -316					; size = 16
_s$74194 = -296						; size = 4
_f$74192 = -288						; size = 8
_s$74188 = -272						; size = 16
_aesField$74186 = -248					; size = 6
_m$74183 = -232						; size = 12
_id$74182 = -216					; size = 4
_res$74177 = -208					; size = 12
_attrib$74172 = -188					; size = 4
_localFileTime$74164 = -176				; size = 8
_unixTime$74161 = -160					; size = 4
_defined$74159 = -149					; size = 1
_utc$74158 = -144					; size = 8
_ft$74155 = -128					; size = 8
_ft$74152 = -112					; size = 8
_type$74146 = -100					; size = 4
_unixTime$74145 = -92					; size = 4
_ft$74144 = -80						; size = 8
_res$74139 = -64					; size = 12
_item$74133 = -48					; size = 4
_prop$74132 = -40					; size = 16
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_this$ = 8						; size = 4
_index$ = 12						; size = 4
_propID$ = 16						; size = 4
_value$ = 20						; size = 4
?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z PROC ; NArchive::NZip::CHandler::GetProperty
; Line 240
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 464				; 000001d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-480]
	mov	ecx, 116				; 00000074H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
; Line 241
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 242
	lea	ecx, DWORD PTR _prop$74132[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
	mov	DWORD PTR tv502[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 1
; Line 243
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEAAVCItemEx@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CItemEx>::operator[]
	mov	DWORD PTR tv503[ebp], eax
	mov	ecx, DWORD PTR tv503[ebp]
	mov	DWORD PTR _item$74133[ebp], ecx
; Line 244
	mov	edx, DWORD PTR _propID$[ebp]
	mov	DWORD PTR tv71[ebp], edx
	mov	eax, DWORD PTR tv71[ebp]
	sub	eax, 3
	mov	DWORD PTR tv71[ebp], eax
	cmp	DWORD PTR tv71[ebp], 50			; 00000032H
	ja	$LN50@GetPropert@2
	mov	ecx, DWORD PTR tv71[ebp]
	movzx	edx, BYTE PTR $LN65@GetPropert@2[ecx]
	jmp	DWORD PTR $LN87@GetPropert@2[edx*4]
$LN49@GetPropert@2:
; Line 248
	lea	ecx, DWORD PTR _res$74139[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR tv504[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 2
; Line 249
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+204]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+201]
	push	eax
	lea	ecx, DWORD PTR _res$74139[ebp]
	push	ecx
	mov	edx, DWORD PTR _item$74133[ebp]
	add	edx, 32					; 00000020H
	push	edx
	mov	ecx, DWORD PTR _item$74133[ebp]
	call	?GetUnicodeString@CItem@NZip@NArchive@@QBEXABVAString@@AAVUString@@_NI@Z ; NArchive::NZip::CItem::GetUnicodeString
; Line 250
	lea	eax, DWORD PTR _res$74139[ebp]
	push	eax
	call	?ConvertToOSName2@NItemName@NArchive@@YGXAAVUString@@@Z ; NArchive::NItemName::ConvertToOSName2
; Line 251
	lea	ecx, DWORD PTR _res$74139[ebp]
	push	ecx
	lea	ecx, DWORD PTR _prop$74132[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABVUString@@@Z ; NWindows::NCOM::CPropVariant::operator=
; Line 252
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _res$74139[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	jmp	$LN50@GetPropert@2
$LN48@GetPropert@2:
; Line 255
	mov	ecx, DWORD PTR _item$74133[ebp]
	call	?IsDir@CItem@NZip@NArchive@@QBE_NXZ	; NArchive::NZip::CItem::IsDir
	mov	BYTE PTR tv505[ebp], al
	movzx	edx, BYTE PTR tv505[ebp]
	push	edx
	lea	ecx, DWORD PTR _prop$74132[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@_N@Z ; NWindows::NCOM::CPropVariant::operator=
	jmp	$LN50@GetPropert@2
$LN47@GetPropert@2:
; Line 256
	mov	eax, DWORD PTR _item$74133[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	push	edx
	lea	ecx, DWORD PTR _prop$74132[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=
	jmp	$LN50@GetPropert@2
$LN46@GetPropert@2:
; Line 257
	mov	eax, DWORD PTR _item$74133[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR [eax+16]
	push	edx
	lea	ecx, DWORD PTR _prop$74132[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=
	jmp	$LN50@GetPropert@2
$LN45@GetPropert@2:
; Line 264
	lea	eax, DWORD PTR _ft$74144[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _item$74133[ebp]
	add	ecx, 72					; 00000048H
	call	?GetNtfsTime@CExtraBlock@NZip@NArchive@@QBE_NIAAU_FILETIME@@@Z ; NArchive::NZip::CExtraBlock::GetNtfsTime
	mov	BYTE PTR tv506[ebp], al
	movzx	ecx, BYTE PTR tv506[ebp]
	test	ecx, ecx
	je	SHORT $LN44@GetPropert@2
; Line 265
	mov	DWORD PTR _type$74146[ebp], 0
	jmp	SHORT $LN43@GetPropert@2
$LN44@GetPropert@2:
; Line 266
	lea	edx, DWORD PTR _unixTime$74145[ebp]
	push	edx
	push	0
	push	1
	mov	ecx, DWORD PTR _item$74133[ebp]
	add	ecx, 72					; 00000048H
	call	?GetUnixTime@CExtraBlock@NZip@NArchive@@QBE_N_NIAAI@Z ; NArchive::NZip::CExtraBlock::GetUnixTime
	mov	BYTE PTR tv507[ebp], al
	movzx	eax, BYTE PTR tv507[ebp]
	test	eax, eax
	je	SHORT $LN42@GetPropert@2
; Line 267
	mov	DWORD PTR _type$74146[ebp], 1
; Line 268
	jmp	SHORT $LN43@GetPropert@2
$LN42@GetPropert@2:
; Line 269
	mov	DWORD PTR _type$74146[ebp], 2
$LN43@GetPropert@2:
; Line 270
	mov	ecx, DWORD PTR _type$74146[ebp]
	push	ecx
	lea	ecx, DWORD PTR _prop$74132[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z ; NWindows::NCOM::CPropVariant::operator=
; Line 271
	jmp	$LN50@GetPropert@2
$LN40@GetPropert@2:
; Line 277
	lea	edx, DWORD PTR _ft$74152[ebp]
	push	edx
	push	2
	mov	ecx, DWORD PTR _item$74133[ebp]
	add	ecx, 72					; 00000048H
	call	?GetNtfsTime@CExtraBlock@NZip@NArchive@@QBE_NIAAU_FILETIME@@@Z ; NArchive::NZip::CExtraBlock::GetNtfsTime
	mov	BYTE PTR tv508[ebp], al
	movzx	eax, BYTE PTR tv508[ebp]
	test	eax, eax
	je	SHORT $LN39@GetPropert@2
; Line 278
	lea	ecx, DWORD PTR _ft$74152[ebp]
	push	ecx
	lea	ecx, DWORD PTR _prop$74132[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABU_FILETIME@@@Z ; NWindows::NCOM::CPropVariant::operator=
$LN39@GetPropert@2:
; Line 279
	jmp	$LN50@GetPropert@2
$LN38@GetPropert@2:
; Line 285
	lea	edx, DWORD PTR _ft$74155[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _item$74133[ebp]
	add	ecx, 72					; 00000048H
	call	?GetNtfsTime@CExtraBlock@NZip@NArchive@@QBE_NIAAU_FILETIME@@@Z ; NArchive::NZip::CExtraBlock::GetNtfsTime
	mov	BYTE PTR tv509[ebp], al
	movzx	eax, BYTE PTR tv509[ebp]
	test	eax, eax
	je	SHORT $LN37@GetPropert@2
; Line 286
	lea	ecx, DWORD PTR _ft$74155[ebp]
	push	ecx
	lea	ecx, DWORD PTR _prop$74132[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABU_FILETIME@@@Z ; NWindows::NCOM::CPropVariant::operator=
$LN37@GetPropert@2:
; Line 287
	jmp	$LN50@GetPropert@2
$LN36@GetPropert@2:
; Line 293
	mov	BYTE PTR _defined$74159[ebp], 1
; Line 294
	lea	edx, DWORD PTR _utc$74158[ebp]
	push	edx
	push	0
	mov	ecx, DWORD PTR _item$74133[ebp]
	add	ecx, 72					; 00000048H
	call	?GetNtfsTime@CExtraBlock@NZip@NArchive@@QBE_NIAAU_FILETIME@@@Z ; NArchive::NZip::CExtraBlock::GetNtfsTime
	mov	BYTE PTR tv510[ebp], al
	movzx	eax, BYTE PTR tv510[ebp]
	test	eax, eax
	jne	$LN35@GetPropert@2
; Line 296
	mov	DWORD PTR _unixTime$74161[ebp], 0
; Line 297
	lea	ecx, DWORD PTR _unixTime$74161[ebp]
	push	ecx
	push	0
	push	1
	mov	ecx, DWORD PTR _item$74133[ebp]
	add	ecx, 72					; 00000048H
	call	?GetUnixTime@CExtraBlock@NZip@NArchive@@QBE_N_NIAAI@Z ; NArchive::NZip::CExtraBlock::GetUnixTime
	mov	BYTE PTR tv511[ebp], al
	movzx	edx, BYTE PTR tv511[ebp]
	test	edx, edx
	je	SHORT $LN34@GetPropert@2
; Line 298
	lea	eax, DWORD PTR _utc$74158[ebp]
	push	eax
	mov	ecx, DWORD PTR _unixTime$74161[ebp]
	push	ecx
	call	?UnixTimeToFileTime@NTime@NWindows@@YGXIAAU_FILETIME@@@Z ; NWindows::NTime::UnixTimeToFileTime
; Line 299
	jmp	SHORT $LN35@GetPropert@2
$LN34@GetPropert@2:
; Line 302
	mov	edx, DWORD PTR _item$74133[ebp]
	cmp	DWORD PTR [edx+24], 0
	jne	SHORT $LN32@GetPropert@2
; Line 303
	mov	BYTE PTR _defined$74159[ebp], 0
; Line 304
	jmp	SHORT $LN35@GetPropert@2
$LN32@GetPropert@2:
; Line 305
	lea	eax, DWORD PTR _localFileTime$74164[ebp]
	push	eax
	mov	ecx, DWORD PTR _item$74133[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	?DosTimeToFileTime@NTime@NWindows@@YG_NIAAU_FILETIME@@@Z ; NWindows::NTime::DosTimeToFileTime
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN29@GetPropert@2
	mov	esi, esp
	lea	ecx, DWORD PTR _utc$74158[ebp]
	push	ecx
	lea	edx, DWORD PTR _localFileTime$74164[ebp]
	push	edx
	call	DWORD PTR __imp__LocalFileTimeToFileTime@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN35@GetPropert@2
$LN29@GetPropert@2:
; Line 306
	mov	DWORD PTR _utc$74158[ebp], 0
	mov	eax, DWORD PTR _utc$74158[ebp]
	mov	DWORD PTR _utc$74158[ebp+4], eax
$LN35@GetPropert@2:
; Line 309
	movzx	ecx, BYTE PTR _defined$74159[ebp]
	test	ecx, ecx
	je	SHORT $LN28@GetPropert@2
; Line 310
	lea	edx, DWORD PTR _utc$74158[ebp]
	push	edx
	lea	ecx, DWORD PTR _prop$74132[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABU_FILETIME@@@Z ; NWindows::NCOM::CPropVariant::operator=
$LN28@GetPropert@2:
; Line 311
	jmp	$LN50@GetPropert@2
$LN27@GetPropert@2:
; Line 314
	mov	ecx, DWORD PTR _item$74133[ebp]
	call	?GetWinAttrib@CItem@NZip@NArchive@@QBEIXZ ; NArchive::NZip::CItem::GetWinAttrib
	mov	DWORD PTR tv512[ebp], eax
	mov	eax, DWORD PTR tv512[ebp]
	push	eax
	lea	ecx, DWORD PTR _prop$74132[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z ; NWindows::NCOM::CPropVariant::operator=
	jmp	$LN50@GetPropert@2
$LN26@GetPropert@2:
; Line 319
	lea	ecx, DWORD PTR _attrib$74172[ebp]
	push	ecx
	mov	ecx, DWORD PTR _item$74133[ebp]
	call	?GetPosixAttrib@CItem@NZip@NArchive@@QBE_NAAI@Z ; NArchive::NZip::CItem::GetPosixAttrib
	mov	BYTE PTR tv513[ebp], al
	movzx	edx, BYTE PTR tv513[ebp]
	test	edx, edx
	je	SHORT $LN25@GetPropert@2
; Line 320
	mov	eax, DWORD PTR _attrib$74172[ebp]
	push	eax
	lea	ecx, DWORD PTR _prop$74132[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z ; NWindows::NCOM::CPropVariant::operator=
$LN25@GetPropert@2:
; Line 321
	jmp	$LN50@GetPropert@2
$LN24@GetPropert@2:
; Line 324
	mov	ecx, DWORD PTR _item$74133[ebp]
	call	?IsEncrypted@CLocalItem@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CLocalItem::IsEncrypted
	mov	BYTE PTR tv514[ebp], al
	movzx	ecx, BYTE PTR tv514[ebp]
	push	ecx
	lea	ecx, DWORD PTR _prop$74132[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@_N@Z ; NWindows::NCOM::CPropVariant::operator=
	jmp	$LN50@GetPropert@2
$LN23@GetPropert@2:
; Line 328
	mov	ecx, DWORD PTR _item$74133[ebp]
	add	ecx, 84					; 00000054H
	call	?Size@?$CBuffer@E@@QBEIXZ		; CBuffer<unsigned char>::Size
	mov	DWORD PTR tv515[ebp], eax
	cmp	DWORD PTR tv515[ebp], 0
	je	$LN22@GetPropert@2
; Line 330
	lea	ecx, DWORD PTR _res$74177[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR tv516[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 3
; Line 331
	mov	edx, DWORD PTR _item$74133[ebp]
	add	edx, 84					; 00000054H
	push	edx
	lea	eax, DWORD PTR $T76518[ebp]
	push	eax
	call	?BytesToString@NZip@NArchive@@YG?AVAString@@ABV?$CBuffer@E@@@Z ; NArchive::NZip::BytesToString
	mov	DWORD PTR tv517[ebp], eax
	mov	ecx, DWORD PTR tv517[ebp]
	mov	DWORD PTR tv497[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+204]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+201]
	push	edx
	lea	eax, DWORD PTR _res$74177[ebp]
	push	eax
	mov	ecx, DWORD PTR tv497[ebp]
	push	ecx
	mov	ecx, DWORD PTR _item$74133[ebp]
	call	?GetUnicodeString@CItem@NZip@NArchive@@QBEXABVAString@@AAVUString@@_NI@Z ; NArchive::NZip::CItem::GetUnicodeString
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR $T76518[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
; Line 332
	lea	edx, DWORD PTR _res$74177[ebp]
	push	edx
	lea	ecx, DWORD PTR _prop$74132[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABVUString@@@Z ; NWindows::NCOM::CPropVariant::operator=
; Line 333
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _res$74177[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
$LN22@GetPropert@2:
; Line 334
	jmp	$LN50@GetPropert@2
$LN21@GetPropert@2:
; Line 337
	mov	ecx, DWORD PTR _item$74133[ebp]
	call	?IsThereCrc@CItem@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CItem::IsThereCrc
	mov	BYTE PTR tv518[ebp], al
	movzx	eax, BYTE PTR tv518[ebp]
	test	eax, eax
	je	SHORT $LN20@GetPropert@2
	mov	ecx, DWORD PTR _item$74133[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	lea	ecx, DWORD PTR _prop$74132[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z ; NWindows::NCOM::CPropVariant::operator=
$LN20@GetPropert@2:
	jmp	$LN50@GetPropert@2
$LN19@GetPropert@2:
; Line 341
	mov	eax, DWORD PTR _item$74133[ebp]
	movzx	ecx, WORD PTR [eax+2]
	mov	DWORD PTR _id$74182[ebp], ecx
; Line 342
	lea	ecx, DWORD PTR _m$74183[ebp]
	call	??0AString@@QAE@XZ			; AString::AString
	mov	DWORD PTR tv519[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 5
; Line 344
	mov	ecx, DWORD PTR _item$74133[ebp]
	call	?IsEncrypted@CLocalItem@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CLocalItem::IsEncrypted
	mov	BYTE PTR tv520[ebp], al
	movzx	edx, BYTE PTR tv520[ebp]
	test	edx, edx
	je	$LN18@GetPropert@2
; Line 346
	cmp	DWORD PTR _id$74182[ebp], 99		; 00000063H
	jne	$LN17@GetPropert@2
; Line 348
	mov	eax, DWORD PTR _kMethod_AES
	push	eax
	lea	ecx, DWORD PTR _m$74183[ebp]
	call	??YAString@@QAEAAV0@PBD@Z		; AString::operator+=
; Line 349
	lea	ecx, DWORD PTR _aesField$74186[ebp]
	call	??0CWzAesExtra@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CWzAesExtra::CWzAesExtra
; Line 350
	lea	ecx, DWORD PTR _aesField$74186[ebp]
	push	ecx
	mov	ecx, DWORD PTR _item$74133[ebp]
	add	ecx, 72					; 00000048H
	call	?GetWzAes@CExtraBlock@NZip@NArchive@@QBE_NAAUCWzAesExtra@23@@Z ; NArchive::NZip::CExtraBlock::GetWzAes
	mov	BYTE PTR tv521[ebp], al
	movzx	edx, BYTE PTR tv521[ebp]
	test	edx, edx
	je	SHORT $LN16@GetPropert@2
; Line 353
	mov	BYTE PTR _s$74188[ebp], 45		; 0000002dH
; Line 354
	lea	eax, DWORD PTR _s$74188[ebp+1]
	push	eax
	movzx	ecx, BYTE PTR _aesField$74186[ebp+2]
	add	ecx, 1
	shl	ecx, 6
	push	ecx
	call	?ConvertUInt32ToString@@YGXIPAD@Z	; ConvertUInt32ToString
; Line 355
	lea	edx, DWORD PTR _s$74188[ebp]
	push	edx
	lea	ecx, DWORD PTR _m$74183[ebp]
	call	??YAString@@QAEAAV0@PBD@Z		; AString::operator+=
; Line 356
	movzx	eax, WORD PTR _aesField$74186[ebp+4]
	mov	DWORD PTR _id$74182[ebp], eax
$LN16@GetPropert@2:
; Line 358
	jmp	$LN15@GetPropert@2
$LN17@GetPropert@2:
; Line 359
	mov	ecx, DWORD PTR _item$74133[ebp]
	call	?IsStrongEncrypted@CLocalItem@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CLocalItem::IsStrongEncrypted
	mov	BYTE PTR tv522[ebp], al
	movzx	ecx, BYTE PTR tv522[ebp]
	test	ecx, ecx
	je	$LN14@GetPropert@2
; Line 362
	xor	edx, edx
	mov	WORD PTR _f$74192[ebp+2], dx
; Line 363
	lea	eax, DWORD PTR _f$74192[ebp]
	push	eax
	mov	ecx, DWORD PTR _item$74133[ebp]
	add	ecx, 72					; 00000048H
	call	?GetStrongCrypto@CExtraBlock@NZip@NArchive@@QBE_NAAUCStrongCryptoExtra@23@@Z ; NArchive::NZip::CExtraBlock::GetStrongCrypto
	mov	BYTE PTR tv523[ebp], al
	movzx	ecx, BYTE PTR tv523[ebp]
	test	ecx, ecx
	je	$LN13@GetPropert@2
; Line 365
	movzx	edx, WORD PTR _f$74192[ebp+2]
	push	edx
	push	11					; 0000000bH
	push	OFFSET _k_StrongCryptoPairs
	call	?FindNameForId@NZip@NArchive@@YGPBDPBUCIdToNamePair@12@II@Z ; NArchive::NZip::FindNameForId
	mov	DWORD PTR tv524[ebp], eax
	mov	eax, DWORD PTR tv524[ebp]
	mov	DWORD PTR _s$74194[ebp], eax
; Line 366
	cmp	DWORD PTR _s$74194[ebp], 0
	je	SHORT $LN12@GetPropert@2
; Line 367
	mov	ecx, DWORD PTR _s$74194[ebp]
	push	ecx
	lea	ecx, DWORD PTR _m$74183[ebp]
	call	??YAString@@QAEAAV0@PBD@Z		; AString::operator+=
; Line 368
	jmp	SHORT $LN11@GetPropert@2
$LN12@GetPropert@2:
; Line 370
	mov	edx, DWORD PTR _kMethod_StrongCrypto
	push	edx
	lea	ecx, DWORD PTR _m$74183[ebp]
	call	??YAString@@QAEAAV0@PBD@Z		; AString::operator+=
; Line 372
	mov	BYTE PTR _temp$74197[ebp], 58		; 0000003aH
; Line 373
	lea	eax, DWORD PTR _temp$74197[ebp+1]
	push	eax
	movzx	ecx, WORD PTR _f$74192[ebp+2]
	push	ecx
	call	?ConvertUInt32ToString@@YGXIPAD@Z	; ConvertUInt32ToString
; Line 374
	lea	edx, DWORD PTR _temp$74197[ebp]
	push	edx
	lea	ecx, DWORD PTR _m$74183[ebp]
	call	??YAString@@QAEAAV0@PBD@Z		; AString::operator+=
$LN11@GetPropert@2:
; Line 377
	jmp	SHORT $LN10@GetPropert@2
$LN13@GetPropert@2:
; Line 378
	mov	eax, DWORD PTR _kMethod_StrongCrypto
	push	eax
	lea	ecx, DWORD PTR _m$74183[ebp]
	call	??YAString@@QAEAAV0@PBD@Z		; AString::operator+=
$LN10@GetPropert@2:
; Line 380
	jmp	SHORT $LN15@GetPropert@2
$LN14@GetPropert@2:
; Line 381
	mov	ecx, DWORD PTR _kMethod_ZipCrypto
	push	ecx
	lea	ecx, DWORD PTR _m$74183[ebp]
	call	??YAString@@QAEAAV0@PBD@Z		; AString::operator+=
$LN15@GetPropert@2:
; Line 382
	push	32					; 00000020H
	lea	ecx, DWORD PTR _m$74183[ebp]
	call	??YAString@@QAEAAV0@D@Z			; AString::operator+=
$LN18@GetPropert@2:
; Line 387
	mov	DWORD PTR _s$74201[ebp], 0
; Line 388
	cmp	DWORD PTR _id$74182[ebp], 11		; 0000000bH
	jae	SHORT $LN8@GetPropert@2
; Line 389
	mov	edx, DWORD PTR _id$74182[ebp]
	mov	eax, DWORD PTR _kMethods[edx*4]
	mov	DWORD PTR _s$74201[ebp], eax
; Line 390
	jmp	SHORT $LN7@GetPropert@2
$LN8@GetPropert@2:
; Line 392
	mov	ecx, DWORD PTR _id$74182[ebp]
	push	ecx
	push	6
	push	OFFSET _k_MethodIdNamePairs
	call	?FindNameForId@NZip@NArchive@@YGPBDPBUCIdToNamePair@12@II@Z ; NArchive::NZip::FindNameForId
	mov	DWORD PTR tv525[ebp], eax
	mov	edx, DWORD PTR tv525[ebp]
	mov	DWORD PTR _s$74201[ebp], edx
; Line 393
	cmp	DWORD PTR _s$74201[ebp], 0
	jne	SHORT $LN7@GetPropert@2
; Line 395
	lea	eax, DWORD PTR _temp$74200[ebp]
	push	eax
	mov	ecx, DWORD PTR _id$74182[ebp]
	push	ecx
	call	?ConvertUInt32ToString@@YGXIPAD@Z	; ConvertUInt32ToString
; Line 396
	lea	edx, DWORD PTR _temp$74200[ebp]
	mov	DWORD PTR _s$74201[ebp], edx
$LN7@GetPropert@2:
; Line 399
	mov	eax, DWORD PTR _s$74201[ebp]
	push	eax
	lea	ecx, DWORD PTR _m$74183[ebp]
	call	??YAString@@QAEAAV0@PBD@Z		; AString::operator+=
; Line 400
	cmp	DWORD PTR _id$74182[ebp], 14		; 0000000eH
	jne	SHORT $LN5@GetPropert@2
	mov	ecx, DWORD PTR _item$74133[ebp]
	call	?IsLzmaEOS@CLocalItem@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CLocalItem::IsLzmaEOS
	mov	BYTE PTR tv526[ebp], al
	movzx	ecx, BYTE PTR tv526[ebp]
	test	ecx, ecx
	je	SHORT $LN5@GetPropert@2
; Line 401
	push	OFFSET $SG74206
	lea	ecx, DWORD PTR _m$74183[ebp]
	call	??YAString@@QAEAAV0@PBD@Z		; AString::operator+=
$LN5@GetPropert@2:
; Line 404
	lea	ecx, DWORD PTR _m$74183[ebp]
	call	??BAString@@QBEPBDXZ			; AString::operator char const *
	mov	DWORD PTR tv527[ebp], eax
	mov	edx, DWORD PTR tv527[ebp]
	push	edx
	lea	ecx, DWORD PTR _prop$74132[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@PBD@Z ; NWindows::NCOM::CPropVariant::operator=
; Line 405
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _m$74183[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	jmp	$LN50@GetPropert@2
$LN4@GetPropert@2:
; Line 410
	mov	ecx, DWORD PTR _item$74133[ebp]
	call	?GetHostOS@CItem@NZip@NArchive@@QBEEXZ	; NArchive::NZip::CItem::GetHostOS
	mov	BYTE PTR tv528[ebp], al
	mov	al, BYTE PTR tv528[ebp]
	mov	BYTE PTR _hostOS$74208[ebp], al
; Line 412
	mov	DWORD PTR _s$74210[ebp], 0
; Line 413
	movzx	ecx, BYTE PTR _hostOS$74208[ebp]
	cmp	ecx, 20					; 00000014H
	jae	SHORT $LN3@GetPropert@2
; Line 414
	movzx	edx, BYTE PTR _hostOS$74208[ebp]
	mov	eax, DWORD PTR _kHostOS[edx*4]
	mov	DWORD PTR _s$74210[ebp], eax
; Line 415
	jmp	SHORT $LN2@GetPropert@2
$LN3@GetPropert@2:
; Line 417
	lea	ecx, DWORD PTR _temp$74209[ebp]
	push	ecx
	movzx	edx, BYTE PTR _hostOS$74208[ebp]
	push	edx
	call	?ConvertUInt32ToString@@YGXIPAD@Z	; ConvertUInt32ToString
; Line 418
	lea	eax, DWORD PTR _temp$74209[ebp]
	mov	DWORD PTR _s$74210[ebp], eax
$LN2@GetPropert@2:
; Line 420
	mov	ecx, DWORD PTR _s$74210[ebp]
	push	ecx
	lea	ecx, DWORD PTR _prop$74132[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@PBD@Z ; NWindows::NCOM::CPropVariant::operator=
; Line 421
	jmp	SHORT $LN50@GetPropert@2
$LN1@GetPropert@2:
; Line 425
	mov	edx, DWORD PTR _item$74133[ebp]
	movzx	eax, BYTE PTR [edx+4]
	push	eax
	lea	ecx, DWORD PTR _prop$74132[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z ; NWindows::NCOM::CPropVariant::operator=
$LN50@GetPropert@2:
; Line 428
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _prop$74132[ebp]
	call	?Detach@CPropVariant@NCOM@NWindows@@QAEJPAUtagPROPVARIANT@@@Z ; NWindows::NCOM::CPropVariant::Detach
; Line 429
	mov	DWORD PTR $T76519[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _prop$74132[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T76519[ebp]
	jmp	SHORT $LN53@GetPropert@2
__catch$?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$0:
; Line 430
	mov	DWORD PTR $T76520[ebp], -2147024882	; 8007000eH
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN63@GetPropert@2
	ret	0
	mov	eax, __tryend$?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$1
	ret	0
__tryend$?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$1:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN53@GetPropert@2
$LN63@GetPropert@2:
	mov	eax, DWORD PTR $T76520[ebp]
$LN53@GetPropert@2:
; Line 431
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN86@GetPropert@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 480				; 000001e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	3
$LN86@GetPropert@2:
	DD	18					; 00000012H
	DD	$LN85@GetPropert@2
$LN85@GetPropert@2:
	DD	-40					; ffffffd8H
	DD	16					; 00000010H
	DD	$LN66@GetPropert@2
	DD	-64					; ffffffc0H
	DD	12					; 0000000cH
	DD	$LN67@GetPropert@2
	DD	-80					; ffffffb0H
	DD	8
	DD	$LN68@GetPropert@2
	DD	-92					; ffffffa4H
	DD	4
	DD	$LN69@GetPropert@2
	DD	-112					; ffffff90H
	DD	8
	DD	$LN70@GetPropert@2
	DD	-128					; ffffff80H
	DD	8
	DD	$LN71@GetPropert@2
	DD	-144					; ffffff70H
	DD	8
	DD	$LN72@GetPropert@2
	DD	-160					; ffffff60H
	DD	4
	DD	$LN73@GetPropert@2
	DD	-176					; ffffff50H
	DD	8
	DD	$LN74@GetPropert@2
	DD	-188					; ffffff44H
	DD	4
	DD	$LN75@GetPropert@2
	DD	-208					; ffffff30H
	DD	12					; 0000000cH
	DD	$LN76@GetPropert@2
	DD	-232					; ffffff18H
	DD	12					; 0000000cH
	DD	$LN77@GetPropert@2
	DD	-248					; ffffff08H
	DD	6
	DD	$LN78@GetPropert@2
	DD	-272					; fffffef0H
	DD	16					; 00000010H
	DD	$LN79@GetPropert@2
	DD	-288					; fffffee0H
	DD	8
	DD	$LN80@GetPropert@2
	DD	-316					; fffffec4H
	DD	16					; 00000010H
	DD	$LN81@GetPropert@2
	DD	-340					; fffffeacH
	DD	16					; 00000010H
	DD	$LN82@GetPropert@2
	DD	-372					; fffffe8cH
	DD	16					; 00000010H
	DD	$LN83@GetPropert@2
$LN83@GetPropert@2:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
$LN82@GetPropert@2:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
$LN81@GetPropert@2:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
$LN80@GetPropert@2:
	DB	102					; 00000066H
	DB	0
$LN79@GetPropert@2:
	DB	115					; 00000073H
	DB	0
$LN78@GetPropert@2:
	DB	97					; 00000061H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	70					; 00000046H
	DB	105					; 00000069H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	100					; 00000064H
	DB	0
$LN77@GetPropert@2:
	DB	109					; 0000006dH
	DB	0
$LN76@GetPropert@2:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN75@GetPropert@2:
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	98					; 00000062H
	DB	0
$LN74@GetPropert@2:
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	70					; 00000046H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	84					; 00000054H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN73@GetPropert@2:
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	105					; 00000069H
	DB	120					; 00000078H
	DB	84					; 00000054H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN72@GetPropert@2:
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	99					; 00000063H
	DB	0
$LN71@GetPropert@2:
	DB	102					; 00000066H
	DB	116					; 00000074H
	DB	0
$LN70@GetPropert@2:
	DB	102					; 00000066H
	DB	116					; 00000074H
	DB	0
$LN69@GetPropert@2:
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	105					; 00000069H
	DB	120					; 00000078H
	DB	84					; 00000054H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN68@GetPropert@2:
	DB	102					; 00000066H
	DB	116					; 00000074H
	DB	0
$LN67@GetPropert@2:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN66@GetPropert@2:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
	npad	1
$LN87@GetPropert@2:
	DD	$LN49@GetPropert@2
	DD	$LN48@GetPropert@2
	DD	$LN47@GetPropert@2
	DD	$LN46@GetPropert@2
	DD	$LN27@GetPropert@2
	DD	$LN40@GetPropert@2
	DD	$LN38@GetPropert@2
	DD	$LN36@GetPropert@2
	DD	$LN24@GetPropert@2
	DD	$LN21@GetPropert@2
	DD	$LN19@GetPropert@2
	DD	$LN4@GetPropert@2
	DD	$LN23@GetPropert@2
	DD	$LN1@GetPropert@2
	DD	$LN45@GetPropert@2
	DD	$LN26@GetPropert@2
	DD	$LN50@GetPropert@2
$LN65@GetPropert@2:
	DB	0
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	1
	DB	2
	DB	3
	DB	4
	DB	5
	DB	6
	DB	7
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	8
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	9
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	10					; 0000000aH
	DB	11					; 0000000bH
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	12					; 0000000cH
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	13					; 0000000dH
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	14					; 0000000eH
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	15					; 0000000fH
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$2:
	lea	ecx, DWORD PTR _prop$74132[ebp]
	jmp	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
__unwindfunclet$?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$3:
	lea	ecx, DWORD PTR _res$74139[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$4:
	lea	ecx, DWORD PTR _res$74177[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$5:
	lea	ecx, DWORD PTR $T76518[ebp]
	jmp	??1AString@@QAE@XZ			; AString::~AString
__unwindfunclet$?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z$6:
	lea	ecx, DWORD PTR _m$74183[ebp]
	jmp	??1AString@@QAE@XZ			; AString::~AString
__ehhandler$?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-484]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetProperty@CHandler@NZip@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z ENDP ; NArchive::NZip::CHandler::GetProperty
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??BAString@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BAString@@QBEPBDXZ PROC				; AString::operator char const *, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 238
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??BAString@@QBEPBDXZ ENDP				; AString::operator char const *
_TEXT	ENDS
EXTRN	?Grow_1@AString@@AAEXXZ:PROC			; AString::Grow_1
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??YAString@@QAEAAV0@D@Z
_TEXT	SEGMENT
_chars$ = -12						; size = 4
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_c$ = 8							; size = 1
??YAString@@QAEAAV0@D@Z PROC				; AString::operator+=, COMDAT
; _this$ = ecx
; Line 281
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 282
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+4]
	jne	SHORT $LN1@operator
; Line 283
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Grow_1@AString@@AAEXXZ			; AString::Grow_1
$LN1@operator:
; Line 284
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _len$[ebp], ecx
; Line 285
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _chars$[ebp], eax
; Line 286
	mov	ecx, DWORD PTR _chars$[ebp]
	add	ecx, DWORD PTR _len$[ebp]
	mov	dl, BYTE PTR _c$[ebp]
	mov	BYTE PTR [ecx], dl
	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 1
	mov	DWORD PTR _len$[ebp], eax
; Line 287
	mov	ecx, DWORD PTR _chars$[ebp]
	add	ecx, DWORD PTR _len$[ebp]
	mov	BYTE PTR [ecx], 0
; Line 288
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 289
	mov	eax, DWORD PTR _this$[ebp]
; Line 290
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??YAString@@QAEAAV0@D@Z ENDP				; AString::operator+=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CWzAesExtra@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CWzAesExtra@NZip@NArchive@@QAE@XZ PROC		; NArchive::NZip::CWzAesExtra::CWzAesExtra, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\zipitem.h
; Line 42
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+2], 3
	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+4], ax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CWzAesExtra@NZip@NArchive@@QAE@XZ ENDP		; NArchive::NZip::CWzAesExtra::CWzAesExtra
_TEXT	ENDS
PUBLIC	?ParseFromSubBlock@CWzAesExtra@NZip@NArchive@@QAE_NABUCExtraSubBlock@23@@Z ; NArchive::NZip::CWzAesExtra::ParseFromSubBlock
PUBLIC	??A?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEABUCExtraSubBlock@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CExtraSubBlock>::operator[]
PUBLIC	?Size@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Size
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetWzAes@CExtraBlock@NZip@NArchive@@QBE_NAAUCWzAesExtra@23@@Z
_TEXT	SEGMENT
_i$72789 = -8						; size = 4
_this$ = -4						; size = 4
_e$ = 8							; size = 4
?GetWzAes@CExtraBlock@NZip@NArchive@@QBE_NAAUCWzAesExtra@23@@Z PROC ; NArchive::NZip::CExtraBlock::GetWzAes, COMDAT
; _this$ = ecx
; Line 129
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 130
	mov	DWORD PTR _i$72789[ebp], 0
	jmp	SHORT $LN4@GetWzAes
$LN3@GetWzAes:
	mov	eax, DWORD PTR _i$72789[ebp]
	add	eax, 1
	mov	DWORD PTR _i$72789[ebp], eax
$LN4@GetWzAes:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Size
	cmp	DWORD PTR _i$72789[ebp], eax
	jae	SHORT $LN2@GetWzAes
; Line 131
	mov	ecx, DWORD PTR _i$72789[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEABUCExtraSubBlock@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CExtraSubBlock>::operator[]
	push	eax
	mov	ecx, DWORD PTR _e$[ebp]
	call	?ParseFromSubBlock@CWzAesExtra@NZip@NArchive@@QAE_NABUCExtraSubBlock@23@@Z ; NArchive::NZip::CWzAesExtra::ParseFromSubBlock
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@GetWzAes
; Line 132
	mov	al, 1
	jmp	SHORT $LN5@GetWzAes
$LN1@GetWzAes:
; Line 133
	jmp	SHORT $LN3@GetWzAes
$LN2@GetWzAes:
	xor	al, al
$LN5@GetWzAes:
; Line 134
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetWzAes@CExtraBlock@NZip@NArchive@@QBE_NAAUCWzAesExtra@23@@Z ENDP ; NArchive::NZip::CExtraBlock::GetWzAes
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ParseFromSubBlock@CWzAesExtra@NZip@NArchive@@QAE_NABUCExtraSubBlock@23@@Z
_TEXT	SEGMENT
_p$ = -8						; size = 4
_this$ = -4						; size = 4
_sb$ = 8						; size = 4
?ParseFromSubBlock@CWzAesExtra@NZip@NArchive@@QAE_NABUCExtraSubBlock@23@@Z PROC ; NArchive::NZip::CWzAesExtra::ParseFromSubBlock, COMDAT
; _this$ = ecx
; Line 47
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 48
	mov	eax, DWORD PTR _sb$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 39169				; 00009901H
	je	SHORT $LN4@ParseFromS
; Line 49
	xor	al, al
	jmp	SHORT $LN5@ParseFromS
$LN4@ParseFromS:
; Line 50
	mov	ecx, DWORD PTR _sb$[ebp]
	add	ecx, 4
	call	?Size@?$CBuffer@E@@QBEIXZ		; CBuffer<unsigned char>::Size
	cmp	eax, 7
	jae	SHORT $LN3@ParseFromS
; Line 51
	xor	al, al
	jmp	SHORT $LN5@ParseFromS
$LN3@ParseFromS:
; Line 52
	mov	ecx, DWORD PTR _sb$[ebp]
	add	ecx, 4
	call	??B?$CBuffer@E@@QBEPBEXZ		; CBuffer<unsigned char>::operator unsigned char const *
	mov	DWORD PTR _p$[ebp], eax
; Line 53
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR [edx], cx
; Line 54
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+2]
	cmp	eax, 65					; 00000041H
	jne	SHORT $LN1@ParseFromS
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+3]
	cmp	edx, 69					; 00000045H
	je	SHORT $LN2@ParseFromS
$LN1@ParseFromS:
; Line 55
	xor	al, al
	jmp	SHORT $LN5@ParseFromS
$LN2@ParseFromS:
; Line 56
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dl, BYTE PTR [ecx+4]
	mov	BYTE PTR [eax+2], dl
; Line 58
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dx, WORD PTR [ecx+5]
	mov	WORD PTR [eax+4], dx
; Line 59
	mov	al, 1
$LN5@ParseFromS:
; Line 60
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ParseFromSubBlock@CWzAesExtra@NZip@NArchive@@QAE_NABUCExtraSubBlock@23@@Z ENDP ; NArchive::NZip::CWzAesExtra::ParseFromSubBlock
_TEXT	ENDS
PUBLIC	?ParseFromSubBlock@CStrongCryptoExtra@NZip@NArchive@@QAE_NABUCExtraSubBlock@23@@Z ; NArchive::NZip::CStrongCryptoExtra::ParseFromSubBlock
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetStrongCrypto@CExtraBlock@NZip@NArchive@@QBE_NAAUCStrongCryptoExtra@23@@Z
_TEXT	SEGMENT
_i$72799 = -8						; size = 4
_this$ = -4						; size = 4
_e$ = 8							; size = 4
?GetStrongCrypto@CExtraBlock@NZip@NArchive@@QBE_NAAUCStrongCryptoExtra@23@@Z PROC ; NArchive::NZip::CExtraBlock::GetStrongCrypto, COMDAT
; _this$ = ecx
; Line 143
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 144
	mov	DWORD PTR _i$72799[ebp], 0
	jmp	SHORT $LN4@GetStrongC
$LN3@GetStrongC:
	mov	eax, DWORD PTR _i$72799[ebp]
	add	eax, 1
	mov	DWORD PTR _i$72799[ebp], eax
$LN4@GetStrongC:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Size
	cmp	DWORD PTR _i$72799[ebp], eax
	jae	SHORT $LN2@GetStrongC
; Line 145
	mov	ecx, DWORD PTR _i$72799[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEABUCExtraSubBlock@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CExtraSubBlock>::operator[]
	push	eax
	mov	ecx, DWORD PTR _e$[ebp]
	call	?ParseFromSubBlock@CStrongCryptoExtra@NZip@NArchive@@QAE_NABUCExtraSubBlock@23@@Z ; NArchive::NZip::CStrongCryptoExtra::ParseFromSubBlock
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@GetStrongC
; Line 146
	mov	al, 1
	jmp	SHORT $LN5@GetStrongC
$LN1@GetStrongC:
; Line 147
	jmp	SHORT $LN3@GetStrongC
$LN2@GetStrongC:
	xor	al, al
$LN5@GetStrongC:
; Line 148
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetStrongCrypto@CExtraBlock@NZip@NArchive@@QBE_NAAUCStrongCryptoExtra@23@@Z ENDP ; NArchive::NZip::CExtraBlock::GetStrongCrypto
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ParseFromSubBlock@CStrongCryptoExtra@NZip@NArchive@@QAE_NABUCExtraSubBlock@23@@Z
_TEXT	SEGMENT
_p$ = -8						; size = 4
_this$ = -4						; size = 4
_sb$ = 8						; size = 4
?ParseFromSubBlock@CStrongCryptoExtra@NZip@NArchive@@QAE_NABUCExtraSubBlock@23@@Z PROC ; NArchive::NZip::CStrongCryptoExtra::ParseFromSubBlock, COMDAT
; _this$ = ecx
; Line 100
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 101
	mov	eax, DWORD PTR _sb$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 23					; 00000017H
	je	SHORT $LN2@ParseFromS@2
; Line 102
	xor	al, al
	jmp	SHORT $LN3@ParseFromS@2
$LN2@ParseFromS@2:
; Line 103
	mov	ecx, DWORD PTR _sb$[ebp]
	add	ecx, 4
	call	??B?$CBuffer@E@@QBEPBEXZ		; CBuffer<unsigned char>::operator unsigned char const *
	mov	DWORD PTR _p$[ebp], eax
; Line 104
	mov	ecx, DWORD PTR _sb$[ebp]
	add	ecx, 4
	call	?Size@?$CBuffer@E@@QBEIXZ		; CBuffer<unsigned char>::Size
	cmp	eax, 8
	jae	SHORT $LN1@ParseFromS@2
; Line 105
	xor	al, al
	jmp	SHORT $LN3@ParseFromS@2
$LN1@ParseFromS@2:
; Line 106
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR [edx], cx
; Line 107
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	cx, WORD PTR [eax+2]
	mov	WORD PTR [edx+2], cx
; Line 108
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	cx, WORD PTR [eax+4]
	mov	WORD PTR [edx+4], cx
; Line 109
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	cx, WORD PTR [eax+6]
	mov	WORD PTR [edx+6], cx
; Line 110
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx]
	xor	ecx, ecx
	cmp	eax, 2
	sete	cl
	mov	al, cl
$LN3@ParseFromS@2:
; Line 111
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ParseFromSubBlock@CStrongCryptoExtra@NZip@NArchive@@QAE_NABUCExtraSubBlock@23@@Z ENDP ; NArchive::NZip::CStrongCryptoExtra::ParseFromSubBlock
_TEXT	ENDS
EXTRN	?ExtractNtfsTime@CExtraSubBlock@NZip@NArchive@@QBE_NIAAU_FILETIME@@@Z:PROC ; NArchive::NZip::CExtraSubBlock::ExtractNtfsTime
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetNtfsTime@CExtraBlock@NZip@NArchive@@QBE_NIAAU_FILETIME@@@Z
_TEXT	SEGMENT
_sb$72810 = -12						; size = 4
_i$72806 = -8						; size = 4
_this$ = -4						; size = 4
_index$ = 8						; size = 4
_ft$ = 12						; size = 4
?GetNtfsTime@CExtraBlock@NZip@NArchive@@QBE_NIAAU_FILETIME@@@Z PROC ; NArchive::NZip::CExtraBlock::GetNtfsTime, COMDAT
; _this$ = ecx
; Line 159
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 160
	mov	DWORD PTR _i$72806[ebp], 0
	jmp	SHORT $LN4@GetNtfsTim
$LN3@GetNtfsTim:
	mov	eax, DWORD PTR _i$72806[ebp]
	add	eax, 1
	mov	DWORD PTR _i$72806[ebp], eax
$LN4@GetNtfsTim:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Size
	cmp	DWORD PTR _i$72806[ebp], eax
	jae	SHORT $LN2@GetNtfsTim
; Line 162
	mov	ecx, DWORD PTR _i$72806[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEABUCExtraSubBlock@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CExtraSubBlock>::operator[]
	mov	DWORD PTR _sb$72810[ebp], eax
; Line 163
	mov	edx, DWORD PTR _sb$72810[ebp]
	movzx	eax, WORD PTR [edx]
	cmp	eax, 10					; 0000000aH
	jne	SHORT $LN1@GetNtfsTim
; Line 164
	mov	ecx, DWORD PTR _ft$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _sb$72810[ebp]
	call	?ExtractNtfsTime@CExtraSubBlock@NZip@NArchive@@QBE_NIAAU_FILETIME@@@Z ; NArchive::NZip::CExtraSubBlock::ExtractNtfsTime
	jmp	SHORT $LN5@GetNtfsTim
$LN1@GetNtfsTim:
; Line 165
	jmp	SHORT $LN3@GetNtfsTim
$LN2@GetNtfsTim:
; Line 166
	xor	al, al
$LN5@GetNtfsTim:
; Line 167
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?GetNtfsTime@CExtraBlock@NZip@NArchive@@QBE_NIAAU_FILETIME@@@Z ENDP ; NArchive::NZip::CExtraBlock::GetNtfsTime
_TEXT	ENDS
EXTRN	?ExtractUnixTime@CExtraSubBlock@NZip@NArchive@@QBE_N_NIAAI@Z:PROC ; NArchive::NZip::CExtraSubBlock::ExtractUnixTime
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetUnixTime@CExtraBlock@NZip@NArchive@@QBE_N_NIAAI@Z
_TEXT	SEGMENT
_sb$72818 = -12						; size = 4
_i$72814 = -8						; size = 4
_this$ = -4						; size = 4
_isCentral$ = 8						; size = 1
_index$ = 12						; size = 4
_res$ = 16						; size = 4
?GetUnixTime@CExtraBlock@NZip@NArchive@@QBE_N_NIAAI@Z PROC ; NArchive::NZip::CExtraBlock::GetUnixTime, COMDAT
; _this$ = ecx
; Line 170
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 171
	mov	DWORD PTR _i$72814[ebp], 0
	jmp	SHORT $LN4@GetUnixTim
$LN3@GetUnixTim:
	mov	eax, DWORD PTR _i$72814[ebp]
	add	eax, 1
	mov	DWORD PTR _i$72814[ebp], eax
$LN4@GetUnixTim:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Size
	cmp	DWORD PTR _i$72814[ebp], eax
	jae	SHORT $LN2@GetUnixTim
; Line 173
	mov	ecx, DWORD PTR _i$72814[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEABUCExtraSubBlock@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CExtraSubBlock>::operator[]
	mov	DWORD PTR _sb$72818[ebp], eax
; Line 174
	mov	edx, DWORD PTR _sb$72818[ebp]
	movzx	eax, WORD PTR [edx]
	cmp	eax, 21589				; 00005455H
	jne	SHORT $LN1@GetUnixTim
; Line 175
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	movzx	eax, BYTE PTR _isCentral$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sb$72818[ebp]
	call	?ExtractUnixTime@CExtraSubBlock@NZip@NArchive@@QBE_N_NIAAI@Z ; NArchive::NZip::CExtraSubBlock::ExtractUnixTime
	jmp	SHORT $LN5@GetUnixTim
$LN1@GetUnixTim:
; Line 176
	jmp	SHORT $LN3@GetUnixTim
$LN2@GetUnixTim:
; Line 177
	xor	al, al
$LN5@GetUnixTim:
; Line 178
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?GetUnixTime@CExtraBlock@NZip@NArchive@@QBE_N_NIAAI@Z ENDP ; NArchive::NZip::CExtraBlock::GetUnixTime
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsEncrypted@CLocalItem@NZip@NArchive@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEncrypted@CLocalItem@NZip@NArchive@@QBE_NXZ PROC	; NArchive::NZip::CLocalItem::IsEncrypted, COMDAT
; _this$ = ecx
; Line 209
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [eax]
	and	eax, 1
	neg	eax
	sbb	eax, eax
	neg	eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEncrypted@CLocalItem@NZip@NArchive@@QBE_NXZ ENDP	; NArchive::NZip::CLocalItem::IsEncrypted
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsStrongEncrypted@CLocalItem@NZip@NArchive@@QBE_NXZ
_TEXT	SEGMENT
tv71 = -8						; size = 4
_this$ = -4						; size = 4
?IsStrongEncrypted@CLocalItem@NZip@NArchive@@QBE_NXZ PROC ; NArchive::NZip::CLocalItem::IsStrongEncrypted, COMDAT
; _this$ = ecx
; Line 210
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsEncrypted@CLocalItem@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CLocalItem::IsEncrypted
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@IsStrongEn
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx]
	and	edx, 64					; 00000040H
	je	SHORT $LN3@IsStrongEn
	mov	DWORD PTR tv71[ebp], 1
	jmp	SHORT $LN4@IsStrongEn
$LN3@IsStrongEn:
	mov	DWORD PTR tv71[ebp], 0
$LN4@IsStrongEn:
	mov	al, BYTE PTR tv71[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsStrongEncrypted@CLocalItem@NZip@NArchive@@QBE_NXZ ENDP ; NArchive::NZip::CLocalItem::IsStrongEncrypted
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsLzmaEOS@CLocalItem@NZip@NArchive@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsLzmaEOS@CLocalItem@NZip@NArchive@@QBE_NXZ PROC	; NArchive::NZip::CLocalItem::IsLzmaEOS, COMDAT
; _this$ = ecx
; Line 212
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [eax]
	and	eax, 2
	neg	eax
	sbb	eax, eax
	neg	eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsLzmaEOS@CLocalItem@NZip@NArchive@@QBE_NXZ ENDP	; NArchive::NZip::CLocalItem::IsLzmaEOS
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetHostOS@CItem@NZip@NArchive@@QBEEXZ
_TEXT	SEGMENT
tv75 = -5						; size = 1
_this$ = -4						; size = 4
?GetHostOS@CItem@NZip@NArchive@@QBEEXZ PROC		; NArchive::NZip::CItem::GetHostOS, COMDAT
; _this$ = ecx
; Line 279
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+93]
	test	ecx, ecx
	je	SHORT $LN3@GetHostOS
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+57]
	mov	BYTE PTR tv75[ebp], al
	jmp	SHORT $LN4@GetHostOS
$LN3@GetHostOS:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+5]
	mov	BYTE PTR tv75[ebp], dl
$LN4@GetHostOS:
	mov	al, BYTE PTR tv75[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetHostOS@CItem@NZip@NArchive@@QBEEXZ ENDP		; NArchive::NZip::CItem::GetHostOS
_TEXT	ENDS
PUBLIC	?GetCodePage@CItem@NZip@NArchive@@QBEIXZ	; NArchive::NZip::CItem::GetCodePage
PUBLIC	?IsUtf8@CLocalItem@NZip@NArchive@@QBE_NXZ	; NArchive::NZip::CLocalItem::IsUtf8
EXTRN	?MultiByteToUnicodeString2@@YGXAAVUString@@ABVAString@@I@Z:PROC ; MultiByteToUnicodeString2
EXTRN	?ConvertUTF8ToUnicode@@YG_NABVAString@@AAVUString@@@Z:PROC ; ConvertUTF8ToUnicode
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetUnicodeString@CItem@NZip@NArchive@@QBEXABVAString@@AAVUString@@_NI@Z
_TEXT	SEGMENT
tv94 = -12						; size = 4
_ignore_Utf8_Errors$ = -6				; size = 1
_isUtf8$ = -5						; size = 1
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_res$ = 12						; size = 4
_useSpecifiedCodePage$ = 16				; size = 1
_codePage$ = 20						; size = 4
?GetUnicodeString@CItem@NZip@NArchive@@QBEXABVAString@@AAVUString@@_NI@Z PROC ; NArchive::NZip::CItem::GetUnicodeString, COMDAT
; _this$ = ecx
; Line 282
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 283
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsUtf8@CLocalItem@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CLocalItem::IsUtf8
	mov	BYTE PTR _isUtf8$[ebp], al
; Line 284
	mov	BYTE PTR _ignore_Utf8_Errors$[ebp], 1
; Line 287
	movzx	eax, BYTE PTR _isUtf8$[ebp]
	test	eax, eax
	jne	SHORT $LN7@GetUnicode
; Line 289
	movzx	ecx, BYTE PTR _useSpecifiedCodePage$[ebp]
	test	ecx, ecx
	je	SHORT $LN6@GetUnicode
; Line 290
	xor	edx, edx
	cmp	DWORD PTR _codePage$[ebp], 65001	; 0000fde9H
	sete	dl
	mov	BYTE PTR _isUtf8$[ebp], dl
	jmp	SHORT $LN7@GetUnicode
$LN6@GetUnicode:
; Line 291
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetHostOS@CItem@NZip@NArchive@@QBEEXZ	; NArchive::NZip::CItem::GetHostOS
	movzx	eax, al
	cmp	eax, 3
	jne	SHORT $LN7@GetUnicode
; Line 296
	mov	BYTE PTR _isUtf8$[ebp], 1
; Line 297
	mov	BYTE PTR _ignore_Utf8_Errors$[ebp], 0
$LN7@GetUnicode:
; Line 302
	movzx	ecx, BYTE PTR _isUtf8$[ebp]
	test	ecx, ecx
	je	SHORT $LN3@GetUnicode
; Line 303
	mov	edx, DWORD PTR _res$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	?ConvertUTF8ToUnicode@@YG_NABVAString@@AAVUString@@@Z ; ConvertUTF8ToUnicode
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN1@GetUnicode
	movzx	edx, BYTE PTR _ignore_Utf8_Errors$[ebp]
	test	edx, edx
	je	SHORT $LN3@GetUnicode
$LN1@GetUnicode:
; Line 304
	jmp	SHORT $LN8@GetUnicode
$LN3@GetUnicode:
; Line 305
	movzx	eax, BYTE PTR _useSpecifiedCodePage$[ebp]
	test	eax, eax
	je	SHORT $LN10@GetUnicode
	mov	ecx, DWORD PTR _codePage$[ebp]
	mov	DWORD PTR tv94[ebp], ecx
	jmp	SHORT $LN11@GetUnicode
$LN10@GetUnicode:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCodePage@CItem@NZip@NArchive@@QBEIXZ ; NArchive::NZip::CItem::GetCodePage
	mov	DWORD PTR tv94[ebp], eax
$LN11@GetUnicode:
	mov	edx, DWORD PTR tv94[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	?MultiByteToUnicodeString2@@YGXAAVUString@@ABVAString@@I@Z ; MultiByteToUnicodeString2
$LN8@GetUnicode:
; Line 306
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?GetUnicodeString@CItem@NZip@NArchive@@QBEXABVAString@@AAVUString@@_NI@Z ENDP ; NArchive::NZip::CItem::GetUnicodeString
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsUtf8@CLocalItem@NZip@NArchive@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsUtf8@CLocalItem@NZip@NArchive@@QBE_NXZ PROC		; NArchive::NZip::CLocalItem::IsUtf8, COMDAT
; _this$ = ecx
; Line 208
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [eax]
	and	eax, 2048				; 00000800H
	neg	eax
	sbb	eax, eax
	neg	eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsUtf8@CLocalItem@NZip@NArchive@@QBE_NXZ ENDP		; NArchive::NZip::CLocalItem::IsUtf8
_TEXT	ENDS
PUBLIC	?NeedCrc@CWzAesExtra@NZip@NArchive@@QBE_NXZ	; NArchive::NZip::CWzAesExtra::NeedCrc
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsThereCrc@CItem@NZip@NArchive@@QBE_NXZ
_TEXT	SEGMENT
tv90 = -24						; size = 4
_aesField$72940 = -16					; size = 6
_this$ = -4						; size = 4
?IsThereCrc@CItem@NZip@NArchive@@QBE_NXZ PROC		; NArchive::NZip::CItem::IsThereCrc, COMDAT
; _this$ = ecx
; Line 309
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 310
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	cmp	ecx, 99					; 00000063H
	jne	SHORT $LN2@IsThereCrc
; Line 312
	lea	ecx, DWORD PTR _aesField$72940[ebp]
	call	??0CWzAesExtra@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CWzAesExtra::CWzAesExtra
; Line 313
	lea	edx, DWORD PTR _aesField$72940[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	call	?GetWzAes@CExtraBlock@NZip@NArchive@@QBE_NAAUCWzAesExtra@23@@Z ; NArchive::NZip::CExtraBlock::GetWzAes
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@IsThereCrc
; Line 314
	lea	ecx, DWORD PTR _aesField$72940[ebp]
	call	?NeedCrc@CWzAesExtra@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CWzAesExtra::NeedCrc
	jmp	SHORT $LN3@IsThereCrc
$LN2@IsThereCrc:
; Line 316
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+28], 0
	jne	SHORT $LN5@IsThereCrc
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsDir@CItem@NZip@NArchive@@QBE_NXZ	; NArchive::NZip::CItem::IsDir
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN5@IsThereCrc
	mov	DWORD PTR tv90[ebp], 0
	jmp	SHORT $LN6@IsThereCrc
$LN5@IsThereCrc:
	mov	DWORD PTR tv90[ebp], 1
$LN6@IsThereCrc:
	mov	al, BYTE PTR tv90[ebp]
$LN3@IsThereCrc:
; Line 317
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@IsThereCrc
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN9@IsThereCrc:
	DD	1
	DD	$LN8@IsThereCrc
$LN8@IsThereCrc:
	DD	-16					; fffffff0H
	DD	6
	DD	$LN7@IsThereCrc
$LN7@IsThereCrc:
	DB	97					; 00000061H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	70					; 00000046H
	DB	105					; 00000069H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	100					; 00000064H
	DB	0
?IsThereCrc@CItem@NZip@NArchive@@QBE_NXZ ENDP		; NArchive::NZip::CItem::IsThereCrc
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?NeedCrc@CWzAesExtra@NZip@NArchive@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?NeedCrc@CWzAesExtra@NZip@NArchive@@QBE_NXZ PROC	; NArchive::NZip::CWzAesExtra::NeedCrc, COMDAT
; _this$ = ecx
; Line 44
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [eax]
	sub	eax, 1
	neg	eax
	sbb	eax, eax
	add	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?NeedCrc@CWzAesExtra@NZip@NArchive@@QBE_NXZ ENDP	; NArchive::NZip::CWzAesExtra::NeedCrc
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetCodePage@CItem@NZip@NArchive@@QBEIXZ
_TEXT	SEGMENT
tv70 = -12						; size = 4
_hostOS$ = -5						; size = 1
_this$ = -4						; size = 4
?GetCodePage@CItem@NZip@NArchive@@QBEIXZ PROC		; NArchive::NZip::CItem::GetCodePage, COMDAT
; _this$ = ecx
; Line 320
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 321
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetHostOS@CItem@NZip@NArchive@@QBEEXZ	; NArchive::NZip::CItem::GetHostOS
	mov	BYTE PTR _hostOS$[ebp], al
; Line 324
	movzx	eax, BYTE PTR _hostOS$[ebp]
	test	eax, eax
	je	SHORT $LN3@GetCodePag
	movzx	ecx, BYTE PTR _hostOS$[ebp]
	cmp	ecx, 11					; 0000000bH
	je	SHORT $LN3@GetCodePag
	mov	DWORD PTR tv70[ebp], 0
	jmp	SHORT $LN4@GetCodePag
$LN3@GetCodePag:
	mov	DWORD PTR tv70[ebp], 1
$LN4@GetCodePag:
	mov	eax, DWORD PTR tv70[ebp]
; Line 325
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCodePage@CItem@NZip@NArchive@@QBEIXZ ENDP		; NArchive::NZip::CItem::GetCodePage
_TEXT	ENDS
PUBLIC	??C?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ ; CMyComPtr<IArchiveOpenCallback>::operator->
PUBLIC	?SetCompletedLocal@CProgressImp@NZip@NArchive@@UAEJ_K0@Z ; NArchive::NZip::CProgressImp::SetCompletedLocal
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv68 = -8						; size = 4
_this$ = -4						; size = 4
_numFiles$ = 8						; size = 8
_numBytes$ = 16						; size = 8
?SetCompletedLocal@CProgressImp@NZip@NArchive@@UAEJ_K0@Z PROC ; NArchive::NZip::CProgressImp::SetCompletedLocal
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\ziphandler.cpp
; Line 444
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 445
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??C?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ ; CMyComPtr<IArchiveOpenCallback>::operator->
	mov	DWORD PTR tv68[ebp], eax
	mov	esi, esp
	lea	eax, DWORD PTR _numBytes$[ebp]
	push	eax
	lea	ecx, DWORD PTR _numFiles$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv68[ebp]
	push	edx
	mov	eax, DWORD PTR tv68[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 446
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?SetCompletedLocal@CProgressImp@NZip@NArchive@@UAEJ_K0@Z ENDP ; NArchive::NZip::CProgressImp::SetCompletedLocal
_TEXT	ENDS
PUBLIC	?SetTotalCD@CProgressImp@NZip@NArchive@@UAEJ_K@Z ; NArchive::NZip::CProgressImp::SetTotalCD
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv68 = -8						; size = 4
_this$ = -4						; size = 4
_numFiles$ = 8						; size = 8
?SetTotalCD@CProgressImp@NZip@NArchive@@UAEJ_K@Z PROC	; NArchive::NZip::CProgressImp::SetTotalCD
; _this$ = ecx
; Line 449
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 450
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??C?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ ; CMyComPtr<IArchiveOpenCallback>::operator->
	mov	DWORD PTR tv68[ebp], eax
	mov	esi, esp
	push	0
	lea	eax, DWORD PTR _numFiles$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv68[ebp]
	push	ecx
	mov	edx, DWORD PTR tv68[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 451
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?SetTotalCD@CProgressImp@NZip@NArchive@@UAEJ_K@Z ENDP	; NArchive::NZip::CProgressImp::SetTotalCD
_TEXT	ENDS
PUBLIC	?SetCompletedCD@CProgressImp@NZip@NArchive@@UAEJ_K@Z ; NArchive::NZip::CProgressImp::SetCompletedCD
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv68 = -8						; size = 4
_this$ = -4						; size = 4
_numFiles$ = 8						; size = 8
?SetCompletedCD@CProgressImp@NZip@NArchive@@UAEJ_K@Z PROC ; NArchive::NZip::CProgressImp::SetCompletedCD
; _this$ = ecx
; Line 454
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 455
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??C?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ ; CMyComPtr<IArchiveOpenCallback>::operator->
	mov	DWORD PTR tv68[ebp], eax
	mov	esi, esp
	push	0
	lea	eax, DWORD PTR _numFiles$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv68[ebp]
	push	ecx
	mov	edx, DWORD PTR tv68[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 456
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?SetCompletedCD@CProgressImp@NZip@NArchive@@UAEJ_K@Z ENDP ; NArchive::NZip::CProgressImp::SetCompletedCD
_TEXT	ENDS
PUBLIC	??1CProgressImp@NZip@NArchive@@QAE@XZ		; NArchive::NZip::CProgressImp::~CProgressImp
PUBLIC	??0CProgressImp@NZip@NArchive@@QAE@PAUIArchiveOpenCallback@@@Z ; NArchive::NZip::CProgressImp::CProgressImp
EXTRN	?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z:PROC ; NArchive::NZip::CInArchive::ReadHeaders
EXTRN	?Open@CInArchive@NZip@NArchive@@QAEJPAUIInStream@@PB_K@Z:PROC ; NArchive::NZip::CInArchive::Open
EXTRN	__CxxThrowException@8:PROC
xdata$x	SEGMENT
__catchsym$?Open@CHandler@NZip@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$6 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?Open@CHandler@NZip@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$2
__catchsym$?Open@CHandler@NZip@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?Open@CHandler@NZip@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$0
__ehfuncinfo$?Open@CHandler@NZip@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?Open@CHandler@NZip@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
	DD	02H
	DD	FLAT:__tryblocktable$?Open@CHandler@NZip@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?Open@CHandler@NZip@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z DD 01H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?Open@CHandler@NZip@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$5
	DD	00H
	DD	03H
	DD	04H
	DD	01H
	DD	FLAT:__catchsym$?Open@CHandler@NZip@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$6
__unwindtable$?Open@CHandler@NZip@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	FLAT:__unwindfunclet$?Open@CHandler@NZip@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$4
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv140 = -56						; size = 4
tv139 = -52						; size = 4
tv138 = -48						; size = 4
$T76614 = -44						; size = 4
$T76612 = -40						; size = 4
_progressImp$74305 = -32				; size = 8
___result__$74303 = -20					; size = 4
__$EHRec$ = -16						; size = 16
_this$ = 8						; size = 4
_inStream$ = 12						; size = 4
_maxCheckStartPosition$ = 16				; size = 4
_callback$ = 20						; size = 4
?Open@CHandler@NZip@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z PROC ; NArchive::NZip::CHandler::Open
; Line 460
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Open@CHandler@NZip@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 40					; 00000028H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
; Line 461
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 463
	mov	BYTE PTR __$EHRec$[ebp+12], 1
; Line 464
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 465
	mov	ecx, DWORD PTR _maxCheckStartPosition$[ebp]
	push	ecx
	mov	edx, DWORD PTR _inStream$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?Open@CInArchive@NZip@NArchive@@QAEJPAUIInStream@@PB_K@Z ; NArchive::NZip::CInArchive::Open
	mov	DWORD PTR tv138[ebp], eax
	mov	eax, DWORD PTR tv138[ebp]
	mov	DWORD PTR ___result__$74303[ebp], eax
	cmp	DWORD PTR ___result__$74303[ebp], 0
	je	SHORT $LN1@Open
	mov	eax, DWORD PTR ___result__$74303[ebp]
	jmp	$LN5@Open
$LN1@Open:
; Line 466
	mov	ecx, DWORD PTR _callback$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _progressImp$74305[ebp]
	call	??0CProgressImp@NZip@NArchive@@QAE@PAUIArchiveOpenCallback@@@Z ; NArchive::NZip::CProgressImp::CProgressImp
	mov	DWORD PTR tv139[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 2
; Line 467
	mov	edx, DWORD PTR _callback$[ebp]
	neg	edx
	sbb	edx, edx
	lea	eax, DWORD PTR _progressImp$74305[ebp]
	and	edx, eax
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z ; NArchive::NZip::CInArchive::ReadHeaders
	mov	DWORD PTR tv140[ebp], eax
	mov	edx, DWORD PTR tv140[ebp]
	mov	DWORD PTR $T76612[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _progressImp$74305[ebp]
	call	??1CProgressImp@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T76612[ebp]
	jmp	SHORT $LN5@Open
__catch$?Open@CHandler@NZip@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$0:
; Line 469
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	0
	push	0
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	eax, __tryend$?Open@CHandler@NZip@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$1
	ret	0
	mov	DWORD PTR __$EHRec$[ebp+12], 0
__tryend$?Open@CHandler@NZip@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$1:
	jmp	SHORT $LN6@Open
__catch$?Open@CHandler@NZip@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$2:
; Line 470
	mov	DWORD PTR $T76614[ebp], -2147024882	; 8007000eH
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN14@Open
	ret	0
	mov	eax, $LN6@Open
	ret	0
$LN6@Open:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN5@Open
$LN14@Open:
	mov	eax, DWORD PTR $T76614[ebp]
$LN5@Open:
; Line 471
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@Open
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	2
$LN20@Open:
	DD	1
	DD	$LN19@Open
$LN19@Open:
	DD	-32					; ffffffe0H
	DD	8
	DD	$LN17@Open
$LN17@Open:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	103					; 00000067H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	73					; 00000049H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Open@CHandler@NZip@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$4:
	lea	ecx, DWORD PTR _progressImp$74305[ebp]
	jmp	??1CProgressImp@NZip@NArchive@@QAE@XZ
__ehhandler$?Open@CHandler@NZip@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-60]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Open@CHandler@NZip@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Open@CHandler@NZip@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z ENDP ; NArchive::NZip::CHandler::Open
PUBLIC	??0?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@PAUIArchiveOpenCallback@@@Z ; CMyComPtr<IArchiveOpenCallback>::CMyComPtr<IArchiveOpenCallback>
PUBLIC	??_7CProgressImp@NZip@NArchive@@6B@		; NArchive::NZip::CProgressImp::`vftable'
PUBLIC	??0CProgressVirt@NZip@NArchive@@QAE@XZ		; NArchive::NZip::CProgressVirt::CProgressVirt
PUBLIC	??_R4CProgressImp@NZip@NArchive@@6B@		; NArchive::NZip::CProgressImp::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCProgressImp@NZip@NArchive@@@8		; NArchive::NZip::CProgressImp `RTTI Type Descriptor'
PUBLIC	??_R3CProgressImp@NZip@NArchive@@8		; NArchive::NZip::CProgressImp::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CProgressImp@NZip@NArchive@@8		; NArchive::NZip::CProgressImp::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CProgressImp@NZip@NArchive@@8	; NArchive::NZip::CProgressImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CProgressVirt@NZip@NArchive@@8	; NArchive::NZip::CProgressVirt::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUCProgressVirt@NZip@NArchive@@@8		; NArchive::NZip::CProgressVirt `RTTI Type Descriptor'
PUBLIC	??_R3CProgressVirt@NZip@NArchive@@8		; NArchive::NZip::CProgressVirt::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CProgressVirt@NZip@NArchive@@8		; NArchive::NZip::CProgressVirt::`RTTI Base Class Array'
;	COMDAT ??_R2CProgressVirt@NZip@NArchive@@8
rdata$r	SEGMENT
??_R2CProgressVirt@NZip@NArchive@@8 DD FLAT:??_R1A@?0A@EA@CProgressVirt@NZip@NArchive@@8 ; NArchive::NZip::CProgressVirt::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CProgressVirt@NZip@NArchive@@8
rdata$r	SEGMENT
??_R3CProgressVirt@NZip@NArchive@@8 DD 00H		; NArchive::NZip::CProgressVirt::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CProgressVirt@NZip@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUCProgressVirt@NZip@NArchive@@@8
_DATA	SEGMENT
??_R0?AUCProgressVirt@NZip@NArchive@@@8 DD FLAT:??_7type_info@@6B@ ; NArchive::NZip::CProgressVirt `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUCProgressVirt@NZip@NArchive@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@CProgressVirt@NZip@NArchive@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CProgressVirt@NZip@NArchive@@8 DD FLAT:??_R0?AUCProgressVirt@NZip@NArchive@@@8 ; NArchive::NZip::CProgressVirt::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CProgressVirt@NZip@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CProgressImp@NZip@NArchive@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CProgressImp@NZip@NArchive@@8 DD FLAT:??_R0?AVCProgressImp@NZip@NArchive@@@8 ; NArchive::NZip::CProgressImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CProgressImp@NZip@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R2CProgressImp@NZip@NArchive@@8
rdata$r	SEGMENT
??_R2CProgressImp@NZip@NArchive@@8 DD FLAT:??_R1A@?0A@EA@CProgressImp@NZip@NArchive@@8 ; NArchive::NZip::CProgressImp::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CProgressVirt@NZip@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R3CProgressImp@NZip@NArchive@@8
rdata$r	SEGMENT
??_R3CProgressImp@NZip@NArchive@@8 DD 00H		; NArchive::NZip::CProgressImp::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CProgressImp@NZip@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCProgressImp@NZip@NArchive@@@8
_DATA	SEGMENT
??_R0?AVCProgressImp@NZip@NArchive@@@8 DD FLAT:??_7type_info@@6B@ ; NArchive::NZip::CProgressImp `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCProgressImp@NZip@NArchive@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CProgressImp@NZip@NArchive@@6B@
rdata$r	SEGMENT
??_R4CProgressImp@NZip@NArchive@@6B@ DD 00H		; NArchive::NZip::CProgressImp::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCProgressImp@NZip@NArchive@@@8
	DD	FLAT:??_R3CProgressImp@NZip@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_7CProgressImp@NZip@NArchive@@6B@
CONST	SEGMENT
??_7CProgressImp@NZip@NArchive@@6B@ DD FLAT:??_R4CProgressImp@NZip@NArchive@@6B@ ; NArchive::NZip::CProgressImp::`vftable'
	DD	FLAT:?SetCompletedLocal@CProgressImp@NZip@NArchive@@UAEJ_K0@Z
	DD	FLAT:?SetTotalCD@CProgressImp@NZip@NArchive@@UAEJ_K@Z
	DD	FLAT:?SetCompletedCD@CProgressImp@NZip@NArchive@@UAEJ_K@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CProgressImp@NZip@NArchive@@QAE@PAUIArchiveOpenCallback@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_callback$ = 8						; size = 4
??0CProgressImp@NZip@NArchive@@QAE@PAUIArchiveOpenCallback@@@Z PROC ; NArchive::NZip::CProgressImp::CProgressImp, COMDAT
; _this$ = ecx
; Line 440
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CProgressVirt@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CProgressImp@NZip@NArchive@@6B@
	mov	ecx, DWORD PTR _callback$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@PAUIArchiveOpenCallback@@@Z ; CMyComPtr<IArchiveOpenCallback>::CMyComPtr<IArchiveOpenCallback>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CProgressImp@NZip@NArchive@@QAE@PAUIArchiveOpenCallback@@@Z ENDP ; NArchive::NZip::CProgressImp::CProgressImp
_TEXT	ENDS
PUBLIC	??_7CProgressVirt@NZip@NArchive@@6B@		; NArchive::NZip::CProgressVirt::`vftable'
PUBLIC	??_R4CProgressVirt@NZip@NArchive@@6B@		; NArchive::NZip::CProgressVirt::`RTTI Complete Object Locator'
;	COMDAT ??_R4CProgressVirt@NZip@NArchive@@6B@
rdata$r	SEGMENT
??_R4CProgressVirt@NZip@NArchive@@6B@ DD 00H		; NArchive::NZip::CProgressVirt::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUCProgressVirt@NZip@NArchive@@@8
	DD	FLAT:??_R3CProgressVirt@NZip@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_7CProgressVirt@NZip@NArchive@@6B@
CONST	SEGMENT
??_7CProgressVirt@NZip@NArchive@@6B@ DD FLAT:??_R4CProgressVirt@NZip@NArchive@@6B@ ; NArchive::NZip::CProgressVirt::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CProgressVirt@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CProgressVirt@NZip@NArchive@@QAE@XZ PROC		; NArchive::NZip::CProgressVirt::CProgressVirt, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CProgressVirt@NZip@NArchive@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CProgressVirt@NZip@NArchive@@QAE@XZ ENDP		; NArchive::NZip::CProgressVirt::CProgressVirt
_TEXT	ENDS
PUBLIC	??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ	; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CProgressImp@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CProgressImp@NZip@NArchive@@QAE@XZ PROC		; NArchive::NZip::CProgressImp::~CProgressImp, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CProgressImp@NZip@NArchive@@QAE@XZ ENDP		; NArchive::NZip::CProgressImp::~CProgressImp
_TEXT	ENDS
PUBLIC	?Clear@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEXXZ ; CObjectVector<NArchive::NZip::CItemEx>::Clear
EXTRN	?Close@CInArchive@NZip@NArchive@@QAEXXZ:PROC	; NArchive::NZip::CInArchive::Close
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = 8						; size = 4
?Close@CHandler@NZip@NArchive@@UAGJXZ PROC		; NArchive::NZip::CHandler::Close
; Line 474
	push	ebp
	mov	ebp, esp
; Line 475
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?Clear@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEXXZ ; CObjectVector<NArchive::NZip::CItemEx>::Clear
; Line 476
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?Close@CInArchive@NZip@NArchive@@QAEXXZ	; NArchive::NZip::CInArchive::Close
; Line 477
	xor	eax, eax
; Line 478
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
?Close@CHandler@NZip@NArchive@@UAGJXZ ENDP		; NArchive::NZip::CHandler::Close
_TEXT	ENDS
PUBLIC	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ	; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
PUBLIC	??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z ; CMyComPtr<ICompressCoder>::operator=
PUBLIC	??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ	; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>
PUBLIC	??_7CLzmaDecoder@NZip@NArchive@@6B@		; NArchive::NZip::CLzmaDecoder::`vftable'
PUBLIC	??0ICompressCoder@@QAE@XZ			; ICompressCoder::ICompressCoder
PUBLIC	??0CLzmaDecoder@NZip@NArchive@@QAE@XZ		; NArchive::NZip::CLzmaDecoder::CLzmaDecoder
PUBLIC	??_R4CLzmaDecoder@NZip@NArchive@@6B@		; NArchive::NZip::CLzmaDecoder::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCLzmaDecoder@NZip@NArchive@@@8		; NArchive::NZip::CLzmaDecoder `RTTI Type Descriptor'
PUBLIC	??_R3CLzmaDecoder@NZip@NArchive@@8		; NArchive::NZip::CLzmaDecoder::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CLzmaDecoder@NZip@NArchive@@8		; NArchive::NZip::CLzmaDecoder::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CLzmaDecoder@NZip@NArchive@@8	; NArchive::NZip::CLzmaDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ICompressCoder@@8			; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUICompressCoder@@@8			; ICompressCoder `RTTI Type Descriptor'
PUBLIC	??_R3ICompressCoder@@8				; ICompressCoder::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ICompressCoder@@8				; ICompressCoder::`RTTI Base Class Array'
PUBLIC	??_R13?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	?QueryInterface@CLzmaDecoder@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::NZip::CLzmaDecoder::QueryInterface
PUBLIC	?AddRef@CLzmaDecoder@NZip@NArchive@@UAGKXZ	; NArchive::NZip::CLzmaDecoder::AddRef
PUBLIC	?Release@CLzmaDecoder@NZip@NArchive@@UAGKXZ	; NArchive::NZip::CLzmaDecoder::Release
PUBLIC	?Code@CLzmaDecoder@NZip@NArchive@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ; NArchive::NZip::CLzmaDecoder::Code
EXTRN	??0CDecoder@NLzma@NCompress@@QAE@XZ:PROC	; NCompress::NLzma::CDecoder::CDecoder
EXTRN	??2@YAPAXI@Z:PROC				; operator new
;	COMDAT ??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R13?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R2ICompressCoder@@8
rdata$r	SEGMENT
??_R2ICompressCoder@@8 DD FLAT:??_R1A@?0A@EA@ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ICompressCoder@@8
rdata$r	SEGMENT
??_R3ICompressCoder@@8 DD 00H				; ICompressCoder::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ICompressCoder@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUICompressCoder@@@8
_DATA	SEGMENT
??_R0?AUICompressCoder@@@8 DD FLAT:??_7type_info@@6B@	; ICompressCoder `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUICompressCoder@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ICompressCoder@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ICompressCoder@@8 DD FLAT:??_R0?AUICompressCoder@@@8 ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICompressCoder@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CLzmaDecoder@NZip@NArchive@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CLzmaDecoder@NZip@NArchive@@8 DD FLAT:??_R0?AVCLzmaDecoder@NZip@NArchive@@@8 ; NArchive::NZip::CLzmaDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CLzmaDecoder@NZip@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R2CLzmaDecoder@NZip@NArchive@@8
rdata$r	SEGMENT
??_R2CLzmaDecoder@NZip@NArchive@@8 DD FLAT:??_R1A@?0A@EA@CLzmaDecoder@NZip@NArchive@@8 ; NArchive::NZip::CLzmaDecoder::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ICompressCoder@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CLzmaDecoder@NZip@NArchive@@8
rdata$r	SEGMENT
??_R3CLzmaDecoder@NZip@NArchive@@8 DD 00H		; NArchive::NZip::CLzmaDecoder::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2CLzmaDecoder@NZip@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCLzmaDecoder@NZip@NArchive@@@8
_DATA	SEGMENT
??_R0?AVCLzmaDecoder@NZip@NArchive@@@8 DD FLAT:??_7type_info@@6B@ ; NArchive::NZip::CLzmaDecoder `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCLzmaDecoder@NZip@NArchive@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CLzmaDecoder@NZip@NArchive@@6B@
rdata$r	SEGMENT
??_R4CLzmaDecoder@NZip@NArchive@@6B@ DD 00H		; NArchive::NZip::CLzmaDecoder::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCLzmaDecoder@NZip@NArchive@@@8
	DD	FLAT:??_R3CLzmaDecoder@NZip@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_7CLzmaDecoder@NZip@NArchive@@6B@
CONST	SEGMENT
??_7CLzmaDecoder@NZip@NArchive@@6B@ DD FLAT:??_R4CLzmaDecoder@NZip@NArchive@@6B@ ; NArchive::NZip::CLzmaDecoder::`vftable'
	DD	FLAT:?QueryInterface@CLzmaDecoder@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CLzmaDecoder@NZip@NArchive@@UAGKXZ
	DD	FLAT:?Release@CLzmaDecoder@NZip@NArchive@@UAGKXZ
	DD	FLAT:?Code@CLzmaDecoder@NZip@NArchive@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
CONST	ENDS
xdata$x	SEGMENT
__unwindtable$??0CLzmaDecoder@NZip@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CLzmaDecoder@NZip@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CLzmaDecoder@NZip@NArchive@@QAE@XZ$1
__ehfuncinfo$??0CLzmaDecoder@NZip@NArchive@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CLzmaDecoder@NZip@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv92 = -28						; size = 4
$T76647 = -24						; size = 4
$T76646 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CLzmaDecoder@NZip@NArchive@@QAE@XZ PROC		; NArchive::NZip::CLzmaDecoder::CLzmaDecoder
; _this$ = ecx
; Line 498
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CLzmaDecoder@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ICompressCoder@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CLzmaDecoder@NZip@NArchive@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 499
	push	216					; 000000d8H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T76647[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T76647[ebp], 0
	je	SHORT $LN3@CLzmaDecod
	mov	ecx, DWORD PTR $T76647[ebp]
	call	??0CDecoder@NLzma@NCompress@@QAE@XZ	; NCompress::NLzma::CDecoder::CDecoder
	mov	DWORD PTR tv92[ebp], eax
	jmp	SHORT $LN4@CLzmaDecod
$LN3@CLzmaDecod:
	mov	DWORD PTR tv92[ebp], 0
$LN4@CLzmaDecod:
	mov	ecx, DWORD PTR tv92[ebp]
	mov	DWORD PTR $T76646[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T76646[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 500
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z ; CMyComPtr<ICompressCoder>::operator=
; Line 501
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0CLzmaDecoder@NZip@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
__unwindfunclet$??0CLzmaDecoder@NZip@NArchive@@QAE@XZ$1:
	mov	eax, DWORD PTR $T76647[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??0CLzmaDecoder@NZip@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CLzmaDecoder@NZip@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CLzmaDecoder@NZip@NArchive@@QAE@XZ ENDP		; NArchive::NZip::CLzmaDecoder::CLzmaDecoder
PUBLIC	??_7ICompressCoder@@6B@				; ICompressCoder::`vftable'
PUBLIC	??_R4ICompressCoder@@6B@			; ICompressCoder::`RTTI Complete Object Locator'
;	COMDAT ??_R4ICompressCoder@@6B@
rdata$r	SEGMENT
??_R4ICompressCoder@@6B@ DD 00H				; ICompressCoder::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUICompressCoder@@@8
	DD	FLAT:??_R3ICompressCoder@@8
rdata$r	ENDS
;	COMDAT ??_7ICompressCoder@@6B@
CONST	SEGMENT
??_7ICompressCoder@@6B@ DD FLAT:??_R4ICompressCoder@@6B@ ; ICompressCoder::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ICompressCoder@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ICompressCoder@@QAE@XZ PROC				; ICompressCoder::ICompressCoder, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ICompressCoder@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ICompressCoder@@QAE@XZ ENDP				; ICompressCoder::ICompressCoder
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CLzmaDecoder@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CLzmaDecoder@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z PROC ; NArchive::NZip::CLzmaDecoder::QueryInterface, COMDAT
; Line 494
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@2
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN1@QueryInter@2
$LN2@QueryInter@2:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN3@QueryInter@2
$LN1@QueryInter@2:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	xor	eax, eax
$LN3@QueryInter@2:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CLzmaDecoder@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z ENDP ; NArchive::NZip::CLzmaDecoder::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CLzmaDecoder@NZip@NArchive@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CLzmaDecoder@NZip@NArchive@@UAGKXZ PROC		; NArchive::NZip::CLzmaDecoder::AddRef, COMDAT
; Line 494
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CLzmaDecoder@NZip@NArchive@@UAGKXZ ENDP		; NArchive::NZip::CLzmaDecoder::AddRef
_TEXT	ENDS
PUBLIC	??_GCLzmaDecoder@NZip@NArchive@@QAEPAXI@Z	; NArchive::NZip::CLzmaDecoder::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CLzmaDecoder@NZip@NArchive@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T76664 = -8						; size = 4
$T76663 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CLzmaDecoder@NZip@NArchive@@UAGKXZ PROC	; NArchive::NZip::CLzmaDecoder::Release, COMDAT
; Line 494
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	jmp	SHORT $LN2@Release@2
$LN1@Release@2:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T76664[ebp], edx
	mov	eax, DWORD PTR $T76664[ebp]
	mov	DWORD PTR $T76663[ebp], eax
	cmp	DWORD PTR $T76663[ebp], 0
	je	SHORT $LN4@Release@2
	push	1
	mov	ecx, DWORD PTR $T76663[ebp]
	call	??_GCLzmaDecoder@NZip@NArchive@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release@2
$LN4@Release@2:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release@2:
	xor	eax, eax
$LN2@Release@2:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CLzmaDecoder@NZip@NArchive@@UAGKXZ ENDP	; NArchive::NZip::CLzmaDecoder::Release
_TEXT	ENDS
PUBLIC	??1CLzmaDecoder@NZip@NArchive@@QAE@XZ		; NArchive::NZip::CLzmaDecoder::~CLzmaDecoder
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCLzmaDecoder@NZip@NArchive@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCLzmaDecoder@NZip@NArchive@@QAEPAXI@Z PROC		; NArchive::NZip::CLzmaDecoder::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CLzmaDecoder@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCLzmaDecoder@NZip@NArchive@@QAEPAXI@Z ENDP		; NArchive::NZip::CLzmaDecoder::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CLzmaDecoder@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CLzmaDecoder@NZip@NArchive@@QAE@XZ PROC		; NArchive::NZip::CLzmaDecoder::~CLzmaDecoder, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CLzmaDecoder@NZip@NArchive@@QAE@XZ ENDP		; NArchive::NZip::CLzmaDecoder::~CLzmaDecoder
_TEXT	ENDS
PUBLIC	??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator->
PUBLIC	__$ArrayPad$
EXTRN	?ReadStream_FALSE@@YGJPAUISequentialInStream@@PAXI@Z:PROC ; ReadStream_FALSE
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv94 = -36						; size = 4
___result__$74385 = -32					; size = 4
___result__$74380 = -28					; size = 4
_buf$ = -20						; size = 9
__$ArrayPad$ = -4					; size = 4
_this$ = 8						; size = 4
_inStream$ = 12						; size = 4
_outStream$ = 16					; size = 4
___formal$ = 20						; size = 4
_outSize$ = 24						; size = 4
_progress$ = 28						; size = 4
?Code@CLzmaDecoder@NZip@NArchive@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z PROC ; NArchive::NZip::CLzmaDecoder::Code
; Line 505
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 507
	push	9
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _inStream$[ebp]
	push	ecx
	call	?ReadStream_FALSE@@YGJPAUISequentialInStream@@PAXI@Z ; ReadStream_FALSE
	mov	DWORD PTR ___result__$74380[ebp], eax
	cmp	DWORD PTR ___result__$74380[ebp], 0
	je	SHORT $LN4@Code
	mov	eax, DWORD PTR ___result__$74380[ebp]
	jmp	$LN5@Code
$LN4@Code:
; Line 508
	movzx	edx, BYTE PTR _buf$[ebp+2]
	cmp	edx, 5
	jne	SHORT $LN2@Code
	movzx	eax, BYTE PTR _buf$[ebp+3]
	test	eax, eax
	je	SHORT $LN3@Code
$LN2@Code:
; Line 509
	mov	eax, -2147467263			; 80004001H
	jmp	SHORT $LN5@Code
$LN3@Code:
; Line 510
	mov	esi, esp
	push	5
	lea	ecx, DWORD PTR _buf$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 4
	mov	eax, DWORD PTR [eax+4]
	push	edx
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$74385[ebp], eax
	cmp	DWORD PTR ___result__$74385[ebp], 0
	je	SHORT $LN1@Code
	mov	eax, DWORD PTR ___result__$74385[ebp]
	jmp	SHORT $LN5@Code
$LN1@Code:
; Line 511
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator->
	mov	DWORD PTR tv94[ebp], eax
	mov	esi, esp
	mov	edx, DWORD PTR _progress$[ebp]
	push	edx
	mov	eax, DWORD PTR _outSize$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _outStream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _inStream$[ebp]
	push	edx
	mov	eax, DWORD PTR tv94[ebp]
	push	eax
	mov	ecx, DWORD PTR tv94[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@Code:
; Line 512
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@Code
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
	npad	3
$LN9@Code:
	DD	1
	DD	$LN8@Code
$LN8@Code:
	DD	-20					; ffffffecH
	DD	9
	DD	$LN7@Code
$LN7@Code:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
?Code@CLzmaDecoder@NZip@NArchive@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ENDP ; NArchive::NZip::CLzmaDecoder::Code
_TEXT	ENDS
PUBLIC	?Code@CXzDecoder@NZip@NArchive@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ; NArchive::NZip::CXzDecoder::Code
EXTRN	?Get_Extract_OperationResult@CDecoder@NXz@NArchive@@QBEHXZ:PROC ; NArchive::NXz::CDecoder::Get_Extract_OperationResult
EXTRN	?Decode@CDecoder@NXz@NArchive@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z:PROC ; NArchive::NXz::CDecoder::Decode
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_opRes$ = -8						; size = 4
___result__$74444 = -4					; size = 4
_this$ = 8						; size = 4
_inStream$ = 12						; size = 4
_outStream$ = 16					; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
_progress$ = 28						; size = 4
?Code@CXzDecoder@NZip@NArchive@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z PROC ; NArchive::NZip::CXzDecoder::Code
; Line 530
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 531
	mov	eax, DWORD PTR _progress$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outStream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _inStream$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Decode@CDecoder@NXz@NArchive@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z ; NArchive::NXz::CDecoder::Decode
	mov	DWORD PTR ___result__$74444[ebp], eax
	cmp	DWORD PTR ___result__$74444[ebp], 0
	je	SHORT $LN3@Code@2
	mov	eax, DWORD PTR ___result__$74444[ebp]
	jmp	SHORT $LN4@Code@2
$LN3@Code@2:
; Line 532
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Get_Extract_OperationResult@CDecoder@NXz@NArchive@@QBEHXZ ; NArchive::NXz::CDecoder::Get_Extract_OperationResult
	mov	DWORD PTR _opRes$[ebp], eax
; Line 533
	cmp	DWORD PTR _opRes$[ebp], 1
	jne	SHORT $LN2@Code@2
; Line 534
	mov	eax, -2147467263			; 80004001H
	jmp	SHORT $LN4@Code@2
$LN2@Code@2:
; Line 535
	cmp	DWORD PTR _opRes$[ebp], 0
	je	SHORT $LN1@Code@2
; Line 536
	mov	eax, 1
	jmp	SHORT $LN4@Code@2
$LN1@Code@2:
; Line 537
	xor	eax, eax
$LN4@Code@2:
; Line 538
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?Code@CXzDecoder@NZip@NArchive@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ENDP ; NArchive::NZip::CXzDecoder::Code
_TEXT	ENDS
PUBLIC	?GetCRC@COutStreamWithCRC@@QBEIXZ		; COutStreamWithCRC::GetCRC
PUBLIC	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
PUBLIC	??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@ABV0@@Z ; CMyComPtr<ISequentialInStream>::operator=
PUBLIC	?HasDescriptor@CLocalItem@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CLocalItem::HasDescriptor
PUBLIC	??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
PUBLIC	??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=
PUBLIC	??7?$CMyComPtr@UISequentialInStream@@@@QBE_NXZ	; CMyComPtr<ISequentialInStream>::operator!
PUBLIC	??1?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ	; CMyComPtr<ICompressSetCoderMt>::~CMyComPtr<ICompressSetCoderMt>
PUBLIC	??C?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ ; CMyComPtr<ICompressSetCoderMt>::operator->
PUBLIC	??B?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ ; CMyComPtr<ICompressSetCoderMt>::operator ICompressSetCoderMt *
PUBLIC	??I?$CMyComPtr@UICompressSetCoderMt@@@@QAEPAPAUICompressSetCoderMt@@XZ ; CMyComPtr<ICompressSetCoderMt>::operator&
PUBLIC	??0?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ	; CMyComPtr<ICompressSetCoderMt>::CMyComPtr<ICompressSetCoderMt>
PUBLIC	??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::~CMyComPtr<ICompressSetDecoderProperties2>
PUBLIC	??C?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBEPAUICompressSetDecoderProperties2@@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::operator->
PUBLIC	??B?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBEPAUICompressSetDecoderProperties2@@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::operator ICompressSetDecoderProperties2 *
PUBLIC	??I?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAEPAPAUICompressSetDecoderProperties2@@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::operator&
PUBLIC	??0?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::CMyComPtr<ICompressSetDecoderProperties2>
PUBLIC	?Add@?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QAEIABUCMethodItem@NZip@NArchive@@@Z ; CObjectVector<NArchive::NZip::CMethodItem>::Add
PUBLIC	??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator ICompressCoder *
PUBLIC	??1CMethodItem@NZip@NArchive@@QAE@XZ		; NArchive::NZip::CMethodItem::~CMethodItem
PUBLIC	??0CXzDecoder@NZip@NArchive@@QAE@XZ		; NArchive::NZip::CXzDecoder::CXzDecoder
PUBLIC	??0CDecoder@NShrink@NCompress@@QAE@XZ		; NCompress::NShrink::CDecoder::CDecoder
PUBLIC	??0CCopyCoder@NCompress@@QAE@XZ			; NCompress::CCopyCoder::CCopyCoder
PUBLIC	??0CMethodItem@NZip@NArchive@@QAE@XZ		; NArchive::NZip::CMethodItem::CMethodItem
PUBLIC	??A?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QAEAAUCMethodItem@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CMethodItem>::operator[]
PUBLIC	?Size@?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CMethodItem>::Size
PUBLIC	?Len@AString@@QBEIXZ				; AString::Len
PUBLIC	??C?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ ; CMyComPtr<ICryptoSetPassword>::operator->
PUBLIC	??BCMyComBSTR@@QBEPB_WXZ			; CMyComBSTR::operator wchar_t const *
PUBLIC	??1CMyComBSTR@@QAE@XZ				; CMyComBSTR::~CMyComBSTR
PUBLIC	??ICMyComBSTR@@QAEPAPA_WXZ			; CMyComBSTR::operator&
PUBLIC	??C?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ ; CMyComPtr<ICryptoGetTextPassword>::operator->
PUBLIC	??0CMyComBSTR@@QAE@XZ				; CMyComBSTR::CMyComBSTR
PUBLIC	??B?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ ; CMyComPtr<ICryptoGetTextPassword>::operator ICryptoGetTextPassword *
PUBLIC	??I?$CMyComPtr@UICryptoGetTextPassword@@@@QAEPAPAUICryptoGetTextPassword@@XZ ; CMyComPtr<ICryptoGetTextPassword>::operator&
PUBLIC	??7?$CMyComPtr@UICryptoGetTextPassword@@@@QBE_NXZ ; CMyComPtr<ICryptoGetTextPassword>::operator!
PUBLIC	??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ	; CMyComPtr<ICryptoSetPassword>::~CMyComPtr<ICryptoSetPassword>
PUBLIC	??$QueryInterface@UICryptoSetPassword@@@?$CMyComPtr@UICompressFilter@@@@QBEJABU_GUID@@PAPAUICryptoSetPassword@@@Z ; CMyComPtr<ICompressFilter>::QueryInterface<ICryptoSetPassword>
PUBLIC	??I?$CMyComPtr@UICryptoSetPassword@@@@QAEPAPAUICryptoSetPassword@@XZ ; CMyComPtr<ICryptoSetPassword>::operator&
PUBLIC	??0?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ	; CMyComPtr<ICryptoSetPassword>::CMyComPtr<ICryptoSetPassword>
PUBLIC	??0CDecoder@NZip@NCrypto@@QAE@XZ		; NCrypto::NZip::CDecoder::CDecoder
PUBLIC	??0CDecoder@NZipStrong@NCrypto@@QAE@XZ		; NCrypto::NZipStrong::CDecoder::CDecoder
PUBLIC	?SetKeyMode@CBaseCoder@NWzAes@NCrypto@@QAE_NI@Z	; NCrypto::NWzAes::CBaseCoder::SetKeyMode
PUBLIC	??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@ABV0@@Z ; CMyComPtr<ICompressFilter>::operator=
PUBLIC	??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@PAU1@@Z ; CMyComPtr<ICompressFilter>::operator=
PUBLIC	??0CDecoder@NWzAes@NCrypto@@QAE@XZ		; NCrypto::NWzAes::CDecoder::CDecoder
PUBLIC	??7?$CMyComPtr@UICompressFilter@@@@QBE_NXZ	; CMyComPtr<ICompressFilter>::operator!
PUBLIC	??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ	; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>
PUBLIC	??0?$CMyComPtr@UICompressFilter@@@@QAE@XZ	; CMyComPtr<ICompressFilter>::CMyComPtr<ICompressFilter>
PUBLIC	?Attach@?$CMyComPtr@UISequentialInStream@@@@QAEXPAUISequentialInStream@@@Z ; CMyComPtr<ISequentialInStream>::Attach
PUBLIC	?GetDataPosition@CItemEx@NZip@NArchive@@QBE_KXZ	; NArchive::NZip::CItemEx::GetDataPosition
PUBLIC	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ	; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
PUBLIC	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ	; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
PUBLIC	??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ	; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
PUBLIC	?Init@COutStreamWithCRC@@QAEX_N@Z		; COutStreamWithCRC::Init
PUBLIC	?SetStream@COutStreamWithCRC@@QAEXPAUISequentialOutStream@@@Z ; COutStreamWithCRC::SetStream
PUBLIC	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
PUBLIC	??0COutStreamWithCRC@@QAE@XZ			; COutStreamWithCRC::COutStreamWithCRC
PUBLIC	??1C_InStream_Releaser@CFilterCoder@@QAE@XZ	; CFilterCoder::C_InStream_Releaser::~C_InStream_Releaser
PUBLIC	??0C_InStream_Releaser@CFilterCoder@@QAE@XZ	; CFilterCoder::C_InStream_Releaser::C_InStream_Releaser
PUBLIC	?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z ; NArchive::NZip::CZipDecoder::Decode
EXTRN	?CheckMac@CDecoder@NWzAes@NCrypto@@QAEJPAUISequentialInStream@@AA_N@Z:PROC ; NCrypto::NWzAes::CDecoder::CheckMac
EXTRN	?Init_NoSubFilterInit@CFilterCoder@@QAEJXZ:PROC	; CFilterCoder::Init_NoSubFilterInit
EXTRN	?Init_BeforeDecode@CDecoder@NZip@NCrypto@@QAEXXZ:PROC ; NCrypto::NZip::CDecoder::Init_BeforeDecode
EXTRN	?ReadHeader@CDecoder@NZip@NCrypto@@QAEJPAUISequentialInStream@@@Z:PROC ; NCrypto::NZip::CDecoder::ReadHeader
EXTRN	?Init_and_CheckPassword@CDecoder@NZipStrong@NCrypto@@QAEJAA_N@Z:PROC ; NCrypto::NZipStrong::CDecoder::Init_and_CheckPassword
EXTRN	?ReadHeader@CDecoder@NZipStrong@NCrypto@@QAEJPAUISequentialInStream@@I_K@Z:PROC ; NCrypto::NZipStrong::CDecoder::ReadHeader
EXTRN	?Init_and_CheckPassword@CDecoder@NWzAes@NCrypto@@QAE_NXZ:PROC ; NCrypto::NWzAes::CDecoder::Init_and_CheckPassword
EXTRN	?ReadHeader@CDecoder@NWzAes@NCrypto@@QAEJPAUISequentialInStream@@@Z:PROC ; NCrypto::NWzAes::CDecoder::ReadHeader
EXTRN	??0CFilterCoder@@QAE@_N@Z:PROC			; CFilterCoder::CFilterCoder
EXTRN	_IID_ICompressSetCoderMt:BYTE
EXTRN	_IID_ICompressSetDecoderProperties2:BYTE
EXTRN	?CreateCoder@@YGJ_K_NAAV?$CMyComPtr@UICompressCoder@@@@@Z:PROC ; CreateCoder
EXTRN	??0CDecoder@NPpmdZip@NCompress@@QAE@_N@Z:PROC	; NCompress::NPpmdZip::CDecoder::CDecoder
EXTRN	??0CCoder@NDecoder@NImplode@NCompress@@QAE@XZ:PROC ; NCompress::NImplode::NDecoder::CCoder::CCoder
EXTRN	??4AString@@QAEAAV0@ABV0@@Z:PROC		; AString::operator=
EXTRN	?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@I@Z:PROC ; UnicodeStringToMultiByte
EXTRN	??0UString@@QAE@PB_W@Z:PROC			; UString::UString
EXTRN	_IID_ICryptoGetTextPassword:BYTE
EXTRN	_IID_ICryptoSetPassword:BYTE
EXTRN	?CreateLimitedStream@CInArchive@NZip@NArchive@@QAEPAUISequentialInStream@@_K0@Z:PROC ; NArchive::NZip::CInArchive::CreateLimitedStream
xdata$x	SEGMENT
__ehfuncinfo$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z DD 019930522H
	DD	01aH
	DD	FLAT:__unwindtable$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$5
	DD	04H
	DD	FLAT:__unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$6
	DD	04H
	DD	FLAT:__unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$7
	DD	04H
	DD	FLAT:__unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$8
	DD	08H
	DD	FLAT:__unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$9
	DD	09H
	DD	FLAT:__unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$10
	DD	0aH
	DD	FLAT:__unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$11
	DD	0bH
	DD	FLAT:__unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$12
	DD	0aH
	DD	FLAT:__unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$13
	DD	0dH
	DD	FLAT:__unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$14
	DD	04H
	DD	FLAT:__unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$15
	DD	0fH
	DD	FLAT:__unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$16
	DD	0fH
	DD	FLAT:__unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$17
	DD	0fH
	DD	FLAT:__unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$18
	DD	0fH
	DD	FLAT:__unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$19
	DD	0fH
	DD	FLAT:__unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$20
	DD	0fH
	DD	FLAT:__unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$21
	DD	04H
	DD	FLAT:__unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$22
	DD	04H
	DD	FLAT:__unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$23
	DD	04H
	DD	FLAT:__unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$24
	DD	018H
	DD	FLAT:__unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$25
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv881 = -668						; size = 4
tv764 = -664						; size = 4
tv686 = -660						; size = 4
tv687 = -656						; size = 4
tv678 = -652						; size = 4
tv647 = -648						; size = 4
tv620 = -644						; size = 4
tv570 = -640						; size = 4
tv555 = -636						; size = 4
tv509 = -632						; size = 4
tv495 = -628						; size = 4
tv481 = -624						; size = 4
tv467 = -620						; size = 4
tv430 = -616						; size = 4
tv416 = -612						; size = 4
tv921 = -608						; size = 4
tv404 = -604						; size = 4
tv918 = -600						; size = 4
tv390 = -596						; size = 4
tv367 = -592						; size = 4
tv319 = -588						; size = 4
tv296 = -584						; size = 4
tv259 = -580						; size = 4
tv156 = -576						; size = 4
$T76755 = -572						; size = 4
$T76752 = -568						; size = 4
$T76751 = -564						; size = 4
$T76750 = -560						; size = 4
$T76749 = -556						; size = 4
$T76748 = -552						; size = 4
$T76747 = -548						; size = 4
$T76744 = -544						; size = 4
$T76743 = -540						; size = 4
$T76738 = -536						; size = 4
$T76737 = -532						; size = 4
$T76736 = -528						; size = 4
$T76735 = -524						; size = 4
$T76734 = -520						; size = 4
$T76733 = -516						; size = 4
$T76732 = -512						; size = 4
$T76729 = -508						; size = 4
$T76728 = -504						; size = 4
$T76725 = -500						; size = 4
$T76724 = -496						; size = 4
$T76721 = -492						; size = 4
$T76720 = -488						; size = 4
$T76717 = -484						; size = 4
$T76716 = -480						; size = 4
$T76713 = -476						; size = 4
$T76712 = -472						; size = 4
$T76709 = -468						; size = 4
$T76708 = -464						; size = 4
$T76707 = -460						; size = 4
$T76706 = -456						; size = 4
$T76705 = -452						; size = 12
$T76704 = -440						; size = 12
$T76703 = -428						; size = 12
$T76702 = -416						; size = 12
$T76701 = -404						; size = 4
$T76700 = -400						; size = 4
$T76697 = -396						; size = 4
$T76696 = -392						; size = 4
$T76693 = -388						; size = 4
$T76692 = -384						; size = 4
$T76691 = -380						; size = 4
$T76688 = -376						; size = 4
$T76687 = -372						; size = 4
$T76686 = -368						; size = 4
$T76685 = -364						; size = 4
$T76682 = -360						; size = 4
$T76681 = -356						; size = 4
$T76680 = -352						; size = 4
_authOk$ = -341						; size = 1
_crcOK$ = -333						; size = 1
___result__$74874 = -332				; size = 4
___result__$74860 = -328				; size = 4
___result__$74857 = -324				; size = 4
_v2$74850 = -318					; size = 1
_v1$74849 = -317					; size = 1
_passwOK$74841 = -309					; size = 1
_inStreamNew$74824 = -300				; size = 4
_result$74821 = -292					; size = 4
___result__$74818 = -288				; size = 4
_setCoderMt$74815 = -280				; size = 4
___result__$74775 = -272				; size = 4
_properties$74773 = -261				; size = 1
_setDecoderProperties$74770 = -252			; size = 4
_coder$ = -244						; size = 4
___result__$74762 = -240				; size = 4
_szMethodID$74755 = -236				; size = 8
_mi$74718 = -224					; size = 8
_m$ = -212						; size = 4
___result__$74709 = -208				; size = 4
_result$74701 = -204					; size = 4
_charPassword$74690 = -196				; size = 12
___result__$74687 = -180				; size = 4
_password$74686 = -172					; size = 4
___result__$74676 = -164				; size = 4
_cryptoSetPassword$74675 = -156				; size = 4
_aesField$74649 = -144					; size = 6
_cryptoFilter$ = -128					; size = 4
_dataPos$74644 = -120					; size = 8
_packSize$74639 = -112					; size = 8
_inStream$ = -100					; size = 4
_authenticationPos$ = -92				; size = 8
_outStream$ = -80					; size = 4
_outStreamSpec$ = -72					; size = 4
_aesField$74627 = -64					; size = 6
_f$74621 = -48						; size = 8
_id$ = -36						; size = 4
_pkAesMode$ = -31					; size = 1
_wzAesMode$ = -30					; size = 1
_needCRC$ = -29						; size = 1
_inStreamReleaser$ = -24				; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_archive$ = 8						; size = 4
_item$ = 12						; size = 4
_realOutStream$ = 16					; size = 4
_extractCallback$ = 20					; size = 4
_compressProgress$ = 24					; size = 4
_numThreads$ = 28					; size = 4
_res$ = 32						; size = 4
?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z PROC ; NArchive::NZip::CZipDecoder::Decode
; _this$ = ecx
; Line 591
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 656				; 00000290H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-668]
	mov	ecx, 164				; 000000a4H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 592
	mov	eax, DWORD PTR _res$[ebp]
	mov	DWORD PTR [eax], 2
; Line 593
	lea	ecx, DWORD PTR _inStreamReleaser$[ebp]
	call	??0C_InStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_InStream_Releaser::C_InStream_Releaser
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 595
	mov	BYTE PTR _needCRC$[ebp], 1
; Line 596
	mov	BYTE PTR _wzAesMode$[ebp], 0
; Line 597
	mov	BYTE PTR _pkAesMode$[ebp], 0
; Line 598
	mov	ecx, DWORD PTR _item$[ebp]
	movzx	edx, WORD PTR [ecx+2]
	mov	DWORD PTR _id$[ebp], edx
; Line 600
	mov	ecx, DWORD PTR _item$[ebp]
	call	?IsEncrypted@CLocalItem@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CLocalItem::IsEncrypted
	movzx	eax, al
	test	eax, eax
	je	$LN78@Decode
; Line 602
	mov	ecx, DWORD PTR _item$[ebp]
	call	?IsStrongEncrypted@CLocalItem@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CLocalItem::IsStrongEncrypted
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN77@Decode
; Line 605
	lea	edx, DWORD PTR _f$74621[ebp]
	push	edx
	mov	ecx, DWORD PTR _item$[ebp]
	add	ecx, 72					; 00000048H
	call	?GetStrongCrypto@CExtraBlock@NZip@NArchive@@QBE_NAAUCStrongCryptoExtra@23@@Z ; NArchive::NZip::CExtraBlock::GetStrongCrypto
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN76@Decode
; Line 607
	mov	BYTE PTR _pkAesMode$[ebp], 1
$LN76@Decode:
; Line 609
	movzx	ecx, BYTE PTR _pkAesMode$[ebp]
	test	ecx, ecx
	jne	SHORT $LN77@Decode
; Line 611
	mov	edx, DWORD PTR _res$[ebp]
	mov	DWORD PTR [edx], 1
; Line 612
	mov	DWORD PTR $T76680[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inStreamReleaser$[ebp]
	call	??1C_InStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_InStream_Releaser::~C_InStream_Releaser
	mov	eax, DWORD PTR $T76680[ebp]
	jmp	$LN79@Decode
$LN77@Decode:
; Line 615
	movzx	eax, BYTE PTR _pkAesMode$[ebp]
	test	eax, eax
	jne	SHORT $LN78@Decode
	cmp	DWORD PTR _id$[ebp], 99			; 00000063H
	jne	SHORT $LN78@Decode
; Line 617
	lea	ecx, DWORD PTR _aesField$74627[ebp]
	call	??0CWzAesExtra@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CWzAesExtra::CWzAesExtra
; Line 618
	lea	ecx, DWORD PTR _aesField$74627[ebp]
	push	ecx
	mov	ecx, DWORD PTR _item$[ebp]
	add	ecx, 72					; 00000048H
	call	?GetWzAes@CExtraBlock@NZip@NArchive@@QBE_NAAUCWzAesExtra@23@@Z ; NArchive::NZip::CExtraBlock::GetWzAes
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN78@Decode
; Line 620
	mov	BYTE PTR _wzAesMode$[ebp], 1
; Line 621
	lea	ecx, DWORD PTR _aesField$74627[ebp]
	call	?NeedCrc@CWzAesExtra@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CWzAesExtra::NeedCrc
	mov	BYTE PTR _needCRC$[ebp], al
$LN78@Decode:
; Line 626
	push	32					; 00000020H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T76682[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T76682[ebp], 0
	je	SHORT $LN81@Decode
	mov	ecx, DWORD PTR $T76682[ebp]
	call	??0COutStreamWithCRC@@QAE@XZ
	mov	DWORD PTR tv156[ebp], eax
	jmp	SHORT $LN82@Decode
$LN81@Decode:
	mov	DWORD PTR tv156[ebp], 0
$LN82@Decode:
	mov	eax, DWORD PTR tv156[ebp]
	mov	DWORD PTR $T76681[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR $T76681[ebp]
	mov	DWORD PTR _outStreamSpec$[ebp], ecx
; Line 627
	mov	edx, DWORD PTR _outStreamSpec$[ebp]
	push	edx
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
; Line 628
	mov	eax, DWORD PTR _realOutStream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outStreamSpec$[ebp]
	call	?SetStream@COutStreamWithCRC@@QAEXPAUISequentialOutStream@@@Z ; COutStreamWithCRC::SetStream
; Line 629
	movzx	ecx, BYTE PTR _needCRC$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _outStreamSpec$[ebp]
	call	?Init@COutStreamWithCRC@@QAEX_N@Z	; COutStreamWithCRC::Init
; Line 633
	lea	ecx, DWORD PTR _inStream$[ebp]
	call	??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
; Line 635
	mov	edx, DWORD PTR _item$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _packSize$74639[ebp], eax
	mov	ecx, DWORD PTR [edx+20]
	mov	DWORD PTR _packSize$74639[ebp+4], ecx
; Line 636
	movzx	edx, BYTE PTR _wzAesMode$[ebp]
	test	edx, edx
	je	SHORT $LN72@Decode
; Line 638
	cmp	DWORD PTR _packSize$74639[ebp+4], 0
	ja	SHORT $LN71@Decode
	jb	SHORT $LN135@Decode
	cmp	DWORD PTR _packSize$74639[ebp], 10	; 0000000aH
	jae	SHORT $LN71@Decode
$LN135@Decode:
; Line 639
	mov	DWORD PTR $T76685[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _inStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inStreamReleaser$[ebp]
	call	??1C_InStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_InStream_Releaser::~C_InStream_Releaser
	mov	eax, DWORD PTR $T76685[ebp]
	jmp	$LN79@Decode
$LN71@Decode:
; Line 640
	mov	eax, DWORD PTR _packSize$74639[ebp]
	sub	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _packSize$74639[ebp+4]
	sbb	ecx, 0
	mov	DWORD PTR _packSize$74639[ebp], eax
	mov	DWORD PTR _packSize$74639[ebp+4], ecx
$LN72@Decode:
; Line 642
	mov	ecx, DWORD PTR _item$[ebp]
	call	?GetDataPosition@CItemEx@NZip@NArchive@@QBE_KXZ ; NArchive::NZip::CItemEx::GetDataPosition
	mov	DWORD PTR _dataPos$74644[ebp], eax
	mov	DWORD PTR _dataPos$74644[ebp+4], edx
; Line 643
	mov	edx, DWORD PTR _packSize$74639[ebp+4]
	push	edx
	mov	eax, DWORD PTR _packSize$74639[ebp]
	push	eax
	mov	ecx, DWORD PTR _dataPos$74644[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _dataPos$74644[ebp]
	push	edx
	mov	ecx, DWORD PTR _archive$[ebp]
	call	?CreateLimitedStream@CInArchive@NZip@NArchive@@QAEPAUISequentialInStream@@_K0@Z ; NArchive::NZip::CInArchive::CreateLimitedStream
	push	eax
	lea	ecx, DWORD PTR _inStream$[ebp]
	call	?Attach@?$CMyComPtr@UISequentialInStream@@@@QAEXPAUISequentialInStream@@@Z ; CMyComPtr<ISequentialInStream>::Attach
; Line 644
	mov	eax, DWORD PTR _dataPos$74644[ebp]
	add	eax, DWORD PTR _packSize$74639[ebp]
	mov	ecx, DWORD PTR _dataPos$74644[ebp+4]
	adc	ecx, DWORD PTR _packSize$74639[ebp+4]
	mov	DWORD PTR _authenticationPos$[ebp], eax
	mov	DWORD PTR _authenticationPos$[ebp+4], ecx
; Line 647
	lea	ecx, DWORD PTR _cryptoFilter$[ebp]
	call	??0?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::CMyComPtr<ICompressFilter>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
; Line 649
	mov	ecx, DWORD PTR _item$[ebp]
	call	?IsEncrypted@CLocalItem@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CLocalItem::IsEncrypted
	movzx	edx, al
	test	edx, edx
	je	$LN70@Decode
; Line 651
	movzx	eax, BYTE PTR _wzAesMode$[ebp]
	test	eax, eax
	je	$LN69@Decode
; Line 653
	lea	ecx, DWORD PTR _aesField$74649[ebp]
	call	??0CWzAesExtra@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CWzAesExtra::CWzAesExtra
; Line 654
	lea	ecx, DWORD PTR _aesField$74649[ebp]
	push	ecx
	mov	ecx, DWORD PTR _item$[ebp]
	add	ecx, 72					; 00000048H
	call	?GetWzAes@CExtraBlock@NZip@NArchive@@QBE_NAAUCWzAesExtra@23@@Z ; NArchive::NZip::CExtraBlock::GetWzAes
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN68@Decode
; Line 655
	mov	DWORD PTR $T76686[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _cryptoFilter$[ebp]
	call	??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _inStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inStreamReleaser$[ebp]
	call	??1C_InStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_InStream_Releaser::~C_InStream_Releaser
	mov	eax, DWORD PTR $T76686[ebp]
	jmp	$LN79@Decode
$LN68@Decode:
; Line 656
	movzx	eax, WORD PTR _aesField$74649[ebp+4]
	mov	DWORD PTR _id$[ebp], eax
; Line 657
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??7?$CMyComPtr@UICompressFilter@@@@QBE_NXZ ; CMyComPtr<ICompressFilter>::operator!
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN67@Decode
; Line 659
	push	560					; 00000230H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T76688[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	cmp	DWORD PTR $T76688[ebp], 0
	je	SHORT $LN83@Decode
	mov	ecx, DWORD PTR $T76688[ebp]
	call	??0CDecoder@NWzAes@NCrypto@@QAE@XZ
	mov	DWORD PTR tv259[ebp], eax
	jmp	SHORT $LN84@Decode
$LN83@Decode:
	mov	DWORD PTR tv259[ebp], 0
$LN84@Decode:
	mov	edx, DWORD PTR tv259[ebp]
	mov	DWORD PTR $T76687[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T76687[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 660
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@PAU1@@Z ; CMyComPtr<ICompressFilter>::operator=
$LN67@Decode:
; Line 662
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	push	ecx
	lea	ecx, DWORD PTR _cryptoFilter$[ebp]
	call	??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@ABV0@@Z ; CMyComPtr<ICompressFilter>::operator=
; Line 663
	movzx	edx, BYTE PTR _aesField$74649[ebp+2]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?SetKeyMode@CBaseCoder@NWzAes@NCrypto@@QAE_NI@Z ; NCrypto::NWzAes::CBaseCoder::SetKeyMode
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN66@Decode
; Line 665
	mov	edx, DWORD PTR _res$[ebp]
	mov	DWORD PTR [edx], 1
; Line 666
	mov	DWORD PTR $T76691[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _cryptoFilter$[ebp]
	call	??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _inStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inStreamReleaser$[ebp]
	call	??1C_InStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_InStream_Releaser::~C_InStream_Releaser
	mov	eax, DWORD PTR $T76691[ebp]
	jmp	$LN79@Decode
$LN66@Decode:
; Line 668
	jmp	$LN65@Decode
$LN69@Decode:
; Line 669
	movzx	eax, BYTE PTR _pkAesMode$[ebp]
	test	eax, eax
	je	$LN64@Decode
; Line 671
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??7?$CMyComPtr@UICompressFilter@@@@QBE_NXZ ; CMyComPtr<ICompressFilter>::operator!
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN63@Decode
; Line 673
	push	408					; 00000198H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T76693[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	cmp	DWORD PTR $T76693[ebp], 0
	je	SHORT $LN85@Decode
	mov	ecx, DWORD PTR $T76693[ebp]
	call	??0CDecoder@NZipStrong@NCrypto@@QAE@XZ
	mov	DWORD PTR tv296[ebp], eax
	jmp	SHORT $LN86@Decode
$LN85@Decode:
	mov	DWORD PTR tv296[ebp], 0
$LN86@Decode:
	mov	edx, DWORD PTR tv296[ebp]
	mov	DWORD PTR $T76692[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T76692[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 674
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@PAU1@@Z ; CMyComPtr<ICompressFilter>::operator=
$LN63@Decode:
; Line 676
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	lea	ecx, DWORD PTR _cryptoFilter$[ebp]
	call	??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@ABV0@@Z ; CMyComPtr<ICompressFilter>::operator=
; Line 678
	jmp	$LN65@Decode
$LN64@Decode:
; Line 680
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??7?$CMyComPtr@UICompressFilter@@@@QBE_NXZ ; CMyComPtr<ICompressFilter>::operator!
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN61@Decode
; Line 682
	push	48					; 00000030H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T76697[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	cmp	DWORD PTR $T76697[ebp], 0
	je	SHORT $LN87@Decode
	mov	ecx, DWORD PTR $T76697[ebp]
	call	??0CDecoder@NZip@NCrypto@@QAE@XZ
	mov	DWORD PTR tv319[ebp], eax
	jmp	SHORT $LN88@Decode
$LN87@Decode:
	mov	DWORD PTR tv319[ebp], 0
$LN88@Decode:
	mov	eax, DWORD PTR tv319[ebp]
	mov	DWORD PTR $T76696[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T76696[ebp]
	mov	DWORD PTR [ecx], edx
; Line 683
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@PAU1@@Z ; CMyComPtr<ICompressFilter>::operator=
$LN61@Decode:
; Line 685
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	lea	ecx, DWORD PTR _cryptoFilter$[ebp]
	call	??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@ABV0@@Z ; CMyComPtr<ICompressFilter>::operator=
$LN65@Decode:
; Line 688
	lea	ecx, DWORD PTR _cryptoSetPassword$74675[ebp]
	call	??0?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ ; CMyComPtr<ICryptoSetPassword>::CMyComPtr<ICryptoSetPassword>
	mov	BYTE PTR __$EHRec$[ebp+8], 8
; Line 689
	lea	ecx, DWORD PTR _cryptoSetPassword$74675[ebp]
	call	??I?$CMyComPtr@UICryptoSetPassword@@@@QAEPAPAUICryptoSetPassword@@XZ ; CMyComPtr<ICryptoSetPassword>::operator&
	push	eax
	push	OFFSET _IID_ICryptoSetPassword
	lea	ecx, DWORD PTR _cryptoFilter$[ebp]
	call	??$QueryInterface@UICryptoSetPassword@@@?$CMyComPtr@UICompressFilter@@@@QBEJABU_GUID@@PAPAUICryptoSetPassword@@@Z ; CMyComPtr<ICompressFilter>::QueryInterface<ICryptoSetPassword>
	mov	DWORD PTR ___result__$74676[ebp], eax
	cmp	DWORD PTR ___result__$74676[ebp], 0
	je	SHORT $LN60@Decode
	mov	eax, DWORD PTR ___result__$74676[ebp]
	mov	DWORD PTR $T76700[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _cryptoSetPassword$74675[ebp]
	call	??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ ; CMyComPtr<ICryptoSetPassword>::~CMyComPtr<ICryptoSetPassword>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _cryptoFilter$[ebp]
	call	??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _inStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inStreamReleaser$[ebp]
	call	??1C_InStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_InStream_Releaser::~C_InStream_Releaser
	mov	eax, DWORD PTR $T76700[ebp]
	jmp	$LN79@Decode
$LN60@Decode:
; Line 691
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??7?$CMyComPtr@UICryptoGetTextPassword@@@@QBE_NXZ ; CMyComPtr<ICryptoGetTextPassword>::operator!
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN59@Decode
; Line 692
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??I?$CMyComPtr@UICryptoGetTextPassword@@@@QAEPAPAUICryptoGetTextPassword@@XZ ; CMyComPtr<ICryptoGetTextPassword>::operator&
	mov	esi, esp
	push	eax
	push	OFFSET _IID_ICryptoGetTextPassword
	mov	edx, DWORD PTR _extractCallback$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _extractCallback$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN59@Decode:
; Line 694
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??B?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ ; CMyComPtr<ICryptoGetTextPassword>::operator ICryptoGetTextPassword *
	test	eax, eax
	je	$LN58@Decode
; Line 696
	lea	ecx, DWORD PTR _password$74686[ebp]
	call	??0CMyComBSTR@@QAE@XZ			; CMyComBSTR::CMyComBSTR
	mov	BYTE PTR __$EHRec$[ebp+8], 9
; Line 697
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??C?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ ; CMyComPtr<ICryptoGetTextPassword>::operator->
	mov	DWORD PTR tv367[ebp], eax
	lea	ecx, DWORD PTR _password$74686[ebp]
	call	??ICMyComBSTR@@QAEPAPA_WXZ		; CMyComBSTR::operator&
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR tv367[ebp]
	push	eax
	mov	ecx, DWORD PTR tv367[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$74687[ebp], eax
	cmp	DWORD PTR ___result__$74687[ebp], 0
	je	SHORT $LN57@Decode
	mov	ecx, DWORD PTR ___result__$74687[ebp]
	mov	DWORD PTR $T76701[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _password$74686[ebp]
	call	??1CMyComBSTR@@QAE@XZ			; CMyComBSTR::~CMyComBSTR
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _cryptoSetPassword$74675[ebp]
	call	??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ ; CMyComPtr<ICryptoSetPassword>::~CMyComPtr<ICryptoSetPassword>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _cryptoFilter$[ebp]
	call	??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _inStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inStreamReleaser$[ebp]
	call	??1C_InStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_InStream_Releaser::~C_InStream_Releaser
	mov	eax, DWORD PTR $T76701[ebp]
	jmp	$LN79@Decode
$LN57@Decode:
; Line 698
	lea	ecx, DWORD PTR _charPassword$74690[ebp]
	call	??0AString@@QAE@XZ			; AString::AString
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
; Line 699
	lea	ecx, DWORD PTR _password$74686[ebp]
	call	??BCMyComBSTR@@QBEPB_WXZ		; CMyComBSTR::operator wchar_t const *
	test	eax, eax
	je	$LN56@Decode
; Line 701
	movzx	edx, BYTE PTR _wzAesMode$[ebp]
	test	edx, edx
	jne	SHORT $LN54@Decode
	movzx	eax, BYTE PTR _pkAesMode$[ebp]
	test	eax, eax
	je	SHORT $LN55@Decode
$LN54@Decode:
; Line 703
	lea	ecx, DWORD PTR _password$74686[ebp]
	call	??BCMyComBSTR@@QBEPB_WXZ		; CMyComBSTR::operator wchar_t const *
	push	eax
	lea	ecx, DWORD PTR $T76702[ebp]
	call	??0UString@@QAE@PB_W@Z			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	push	0
	lea	ecx, DWORD PTR $T76702[ebp]
	push	ecx
	lea	edx, DWORD PTR $T76703[ebp]
	push	edx
	call	?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@I@Z ; UnicodeStringToMultiByte
	mov	DWORD PTR tv390[ebp], eax
	mov	eax, DWORD PTR tv390[ebp]
	mov	DWORD PTR tv918[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	mov	ecx, DWORD PTR tv918[ebp]
	push	ecx
	lea	ecx, DWORD PTR _charPassword$74690[ebp]
	call	??4AString@@QAEAAV0@ABV0@@Z		; AString::operator=
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR $T76703[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR $T76702[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
; Line 719
	jmp	SHORT $LN56@Decode
$LN55@Decode:
; Line 723
	lea	ecx, DWORD PTR _password$74686[ebp]
	call	??BCMyComBSTR@@QBEPB_WXZ		; CMyComBSTR::operator wchar_t const *
	push	eax
	lea	ecx, DWORD PTR $T76704[ebp]
	call	??0UString@@QAE@PB_W@Z			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH
	push	1
	lea	edx, DWORD PTR $T76704[ebp]
	push	edx
	lea	eax, DWORD PTR $T76705[ebp]
	push	eax
	call	?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@I@Z ; UnicodeStringToMultiByte
	mov	DWORD PTR tv404[ebp], eax
	mov	ecx, DWORD PTR tv404[ebp]
	mov	DWORD PTR tv921[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 14		; 0000000eH
	mov	edx, DWORD PTR tv921[ebp]
	push	edx
	lea	ecx, DWORD PTR _charPassword$74690[ebp]
	call	??4AString@@QAEAAV0@ABV0@@Z		; AString::operator=
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH
	lea	ecx, DWORD PTR $T76705[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR $T76704[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
$LN56@Decode:
; Line 727
	lea	ecx, DWORD PTR _cryptoSetPassword$74675[ebp]
	call	??C?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ ; CMyComPtr<ICryptoSetPassword>::operator->
	mov	DWORD PTR tv416[ebp], eax
	lea	ecx, DWORD PTR _charPassword$74690[ebp]
	call	?Len@AString@@QBEIXZ			; AString::Len
	mov	esi, esp
	push	eax
	lea	ecx, DWORD PTR _charPassword$74690[ebp]
	call	??BAString@@QBEPBDXZ			; AString::operator char const *
	push	eax
	mov	eax, DWORD PTR tv416[ebp]
	push	eax
	mov	ecx, DWORD PTR tv416[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$74701[ebp], eax
; Line 728
	cmp	DWORD PTR _result$74701[ebp], 0
	je	SHORT $LN52@Decode
; Line 729
	mov	DWORD PTR $T76706[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _charPassword$74690[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _password$74686[ebp]
	call	??1CMyComBSTR@@QAE@XZ			; CMyComBSTR::~CMyComBSTR
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _cryptoSetPassword$74675[ebp]
	call	??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ ; CMyComPtr<ICryptoSetPassword>::~CMyComPtr<ICryptoSetPassword>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _cryptoFilter$[ebp]
	call	??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _inStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inStreamReleaser$[ebp]
	call	??1C_InStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_InStream_Releaser::~C_InStream_Releaser
	mov	eax, DWORD PTR $T76706[ebp]
	jmp	$LN79@Decode
$LN52@Decode:
; Line 730
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _charPassword$74690[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _password$74686[ebp]
	call	??1CMyComBSTR@@QAE@XZ			; CMyComBSTR::~CMyComBSTR
; Line 731
	jmp	$LN51@Decode
$LN58@Decode:
; Line 733
	lea	ecx, DWORD PTR _cryptoSetPassword$74675[ebp]
	call	??C?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ ; CMyComPtr<ICryptoSetPassword>::operator->
	mov	DWORD PTR tv430[ebp], eax
	mov	esi, esp
	push	0
	push	0
	mov	ecx, DWORD PTR tv430[ebp]
	push	ecx
	mov	edx, DWORD PTR tv430[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$74709[ebp], eax
	cmp	DWORD PTR ___result__$74709[ebp], 0
	je	SHORT $LN51@Decode
	mov	edx, DWORD PTR ___result__$74709[ebp]
	mov	DWORD PTR $T76707[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _cryptoSetPassword$74675[ebp]
	call	??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ ; CMyComPtr<ICryptoSetPassword>::~CMyComPtr<ICryptoSetPassword>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _cryptoFilter$[ebp]
	call	??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _inStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inStreamReleaser$[ebp]
	call	??1C_InStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_InStream_Releaser::~C_InStream_Releaser
	mov	eax, DWORD PTR $T76707[ebp]
	jmp	$LN79@Decode
$LN51@Decode:
; Line 735
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _cryptoSetPassword$74675[ebp]
	call	??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ ; CMyComPtr<ICryptoSetPassword>::~CMyComPtr<ICryptoSetPassword>
$LN70@Decode:
; Line 738
	mov	DWORD PTR _m$[ebp], 0
	jmp	SHORT $LN49@Decode
$LN48@Decode:
	mov	eax, DWORD PTR _m$[ebp]
	add	eax, 1
	mov	DWORD PTR _m$[ebp], eax
$LN49@Decode:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	?Size@?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CMethodItem>::Size
	cmp	DWORD PTR _m$[ebp], eax
	jae	SHORT $LN47@Decode
; Line 739
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QAEAAUCMethodItem@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CMethodItem>::operator[]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR _id$[ebp]
	jne	SHORT $LN46@Decode
; Line 740
	jmp	SHORT $LN47@Decode
$LN46@Decode:
; Line 742
	jmp	SHORT $LN48@Decode
$LN47@Decode:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	?Size@?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CMethodItem>::Size
	cmp	DWORD PTR _m$[ebp], eax
	jne	$LN45@Decode
; Line 744
	lea	ecx, DWORD PTR _mi$74718[ebp]
	call	??0CMethodItem@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 15		; 0000000fH
; Line 745
	mov	eax, DWORD PTR _id$[ebp]
	mov	DWORD PTR _mi$74718[ebp], eax
; Line 746
	cmp	DWORD PTR _id$[ebp], 0
	jne	SHORT $LN44@Decode
; Line 747
	push	40					; 00000028H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T76709[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 16		; 00000010H
	cmp	DWORD PTR $T76709[ebp], 0
	je	SHORT $LN89@Decode
	mov	ecx, DWORD PTR $T76709[ebp]
	call	??0CCopyCoder@NCompress@@QAE@XZ		; NCompress::CCopyCoder::CCopyCoder
	mov	DWORD PTR tv467[ebp], eax
	jmp	SHORT $LN90@Decode
$LN89@Decode:
	mov	DWORD PTR tv467[ebp], 0
$LN90@Decode:
	mov	ecx, DWORD PTR tv467[ebp]
	mov	DWORD PTR $T76708[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 15		; 0000000fH
	mov	edx, DWORD PTR $T76708[ebp]
	push	edx
	lea	ecx, DWORD PTR _mi$74718[ebp+4]
	call	??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z ; CMyComPtr<ICompressCoder>::operator=
	jmp	$LN43@Decode
$LN44@Decode:
; Line 748
	cmp	DWORD PTR _id$[ebp], 1
	jne	SHORT $LN42@Decode
; Line 749
	push	49160					; 0000c008H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T76713[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	cmp	DWORD PTR $T76713[ebp], 0
	je	SHORT $LN91@Decode
	mov	ecx, DWORD PTR $T76713[ebp]
	call	??0CDecoder@NShrink@NCompress@@QAE@XZ
	mov	DWORD PTR tv481[ebp], eax
	jmp	SHORT $LN92@Decode
$LN91@Decode:
	mov	DWORD PTR tv481[ebp], 0
$LN92@Decode:
	mov	eax, DWORD PTR tv481[ebp]
	mov	DWORD PTR $T76712[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 15		; 0000000fH
	mov	ecx, DWORD PTR $T76712[ebp]
	push	ecx
	lea	ecx, DWORD PTR _mi$74718[ebp+4]
	call	??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z ; CMyComPtr<ICompressCoder>::operator=
	jmp	$LN43@Decode
$LN42@Decode:
; Line 750
	cmp	DWORD PTR _id$[ebp], 6
	jne	SHORT $LN40@Decode
; Line 751
	push	584					; 00000248H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T76717[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
	cmp	DWORD PTR $T76717[ebp], 0
	je	SHORT $LN93@Decode
	mov	ecx, DWORD PTR $T76717[ebp]
	call	??0CCoder@NDecoder@NImplode@NCompress@@QAE@XZ ; NCompress::NImplode::NDecoder::CCoder::CCoder
	mov	DWORD PTR tv495[ebp], eax
	jmp	SHORT $LN94@Decode
$LN93@Decode:
	mov	DWORD PTR tv495[ebp], 0
$LN94@Decode:
	mov	edx, DWORD PTR tv495[ebp]
	mov	DWORD PTR $T76716[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 15		; 0000000fH
	mov	eax, DWORD PTR $T76716[ebp]
	push	eax
	lea	ecx, DWORD PTR _mi$74718[ebp+4]
	call	??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z ; CMyComPtr<ICompressCoder>::operator=
	jmp	$LN43@Decode
$LN40@Decode:
; Line 752
	cmp	DWORD PTR _id$[ebp], 14			; 0000000eH
	jne	SHORT $LN38@Decode
; Line 753
	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T76721[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 19		; 00000013H
	cmp	DWORD PTR $T76721[ebp], 0
	je	SHORT $LN95@Decode
	mov	ecx, DWORD PTR $T76721[ebp]
	call	??0CLzmaDecoder@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CLzmaDecoder::CLzmaDecoder
	mov	DWORD PTR tv509[ebp], eax
	jmp	SHORT $LN96@Decode
$LN95@Decode:
	mov	DWORD PTR tv509[ebp], 0
$LN96@Decode:
	mov	ecx, DWORD PTR tv509[ebp]
	mov	DWORD PTR $T76720[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 15		; 0000000fH
	mov	edx, DWORD PTR $T76720[ebp]
	push	edx
	lea	ecx, DWORD PTR _mi$74718[ebp+4]
	call	??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z ; CMyComPtr<ICompressCoder>::operator=
	jmp	$LN43@Decode
$LN38@Decode:
; Line 754
	cmp	DWORD PTR _id$[ebp], 95			; 0000005fH
	jne	SHORT $LN36@Decode
; Line 755
	push	1776					; 000006f0H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T76725[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 20		; 00000014H
	cmp	DWORD PTR $T76725[ebp], 0
	je	SHORT $LN97@Decode
	mov	ecx, DWORD PTR $T76725[ebp]
	call	??0CXzDecoder@NZip@NArchive@@QAE@XZ
	mov	DWORD PTR tv555[ebp], eax
	jmp	SHORT $LN98@Decode
$LN97@Decode:
	mov	DWORD PTR tv555[ebp], 0
$LN98@Decode:
	mov	eax, DWORD PTR tv555[ebp]
	mov	DWORD PTR $T76724[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 15		; 0000000fH
	mov	ecx, DWORD PTR $T76724[ebp]
	push	ecx
	lea	ecx, DWORD PTR _mi$74718[ebp+4]
	call	??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z ; CMyComPtr<ICompressCoder>::operator=
	jmp	$LN43@Decode
$LN36@Decode:
; Line 756
	cmp	DWORD PTR _id$[ebp], 98			; 00000062H
	jne	SHORT $LN34@Decode
; Line 757
	push	7408					; 00001cf0H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T76729[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 21		; 00000015H
	cmp	DWORD PTR $T76729[ebp], 0
	je	SHORT $LN99@Decode
	push	1
	mov	ecx, DWORD PTR $T76729[ebp]
	call	??0CDecoder@NPpmdZip@NCompress@@QAE@_N@Z ; NCompress::NPpmdZip::CDecoder::CDecoder
	mov	DWORD PTR tv570[ebp], eax
	jmp	SHORT $LN100@Decode
$LN99@Decode:
	mov	DWORD PTR tv570[ebp], 0
$LN100@Decode:
	mov	edx, DWORD PTR tv570[ebp]
	mov	DWORD PTR $T76728[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 15		; 0000000fH
	mov	eax, DWORD PTR $T76728[ebp]
	push	eax
	lea	ecx, DWORD PTR _mi$74718[ebp+4]
	call	??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z ; CMyComPtr<ICompressCoder>::operator=
; Line 758
	jmp	$LN43@Decode
$LN34@Decode:
; Line 761
	cmp	DWORD PTR _id$[ebp], 12			; 0000000cH
	jne	SHORT $LN32@Decode
; Line 762
	mov	DWORD PTR _szMethodID$74755[ebp], 262658 ; 00040202H
	mov	DWORD PTR _szMethodID$74755[ebp+4], 0
; Line 763
	jmp	$LN31@Decode
$LN32@Decode:
; Line 765
	cmp	DWORD PTR _id$[ebp], 255		; 000000ffH
	jbe	SHORT $LN30@Decode
; Line 767
	mov	ecx, DWORD PTR _res$[ebp]
	mov	DWORD PTR [ecx], 1
; Line 768
	mov	DWORD PTR $T76732[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _mi$74718[ebp]
	call	??1CMethodItem@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _cryptoFilter$[ebp]
	call	??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _inStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inStreamReleaser$[ebp]
	call	??1C_InStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_InStream_Releaser::~C_InStream_Releaser
	mov	eax, DWORD PTR $T76732[ebp]
	jmp	$LN79@Decode
$LN30@Decode:
; Line 770
	movzx	eax, BYTE PTR _id$[ebp]
	cdq
	add	eax, 262400				; 00040100H
	adc	edx, 0
	mov	DWORD PTR _szMethodID$74755[ebp], eax
	mov	DWORD PTR _szMethodID$74755[ebp+4], edx
$LN31@Decode:
; Line 773
	lea	edx, DWORD PTR _mi$74718[ebp+4]
	push	edx
	push	0
	mov	eax, DWORD PTR _szMethodID$74755[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _szMethodID$74755[ebp]
	push	ecx
	call	?CreateCoder@@YGJ_K_NAAV?$CMyComPtr@UICompressCoder@@@@@Z ; CreateCoder
	mov	DWORD PTR ___result__$74762[ebp], eax
	cmp	DWORD PTR ___result__$74762[ebp], 0
	je	SHORT $LN29@Decode
	mov	edx, DWORD PTR ___result__$74762[ebp]
	mov	DWORD PTR $T76733[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _mi$74718[ebp]
	call	??1CMethodItem@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _cryptoFilter$[ebp]
	call	??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _inStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inStreamReleaser$[ebp]
	call	??1C_InStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_InStream_Releaser::~C_InStream_Releaser
	mov	eax, DWORD PTR $T76733[ebp]
	jmp	$LN79@Decode
$LN29@Decode:
; Line 775
	lea	ecx, DWORD PTR _mi$74718[ebp+4]
	call	??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator ICompressCoder *
	test	eax, eax
	jne	SHORT $LN43@Decode
; Line 777
	mov	eax, DWORD PTR _res$[ebp]
	mov	DWORD PTR [eax], 1
; Line 778
	mov	DWORD PTR $T76734[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _mi$74718[ebp]
	call	??1CMethodItem@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _cryptoFilter$[ebp]
	call	??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _inStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inStreamReleaser$[ebp]
	call	??1C_InStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_InStream_Releaser::~C_InStream_Releaser
	mov	eax, DWORD PTR $T76734[ebp]
	jmp	$LN79@Decode
$LN43@Decode:
; Line 781
	lea	ecx, DWORD PTR _mi$74718[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	?Add@?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QAEIABUCMethodItem@NZip@NArchive@@@Z ; CObjectVector<NArchive::NZip::CMethodItem>::Add
	mov	DWORD PTR _m$[ebp], eax
; Line 782
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _mi$74718[ebp]
	call	??1CMethodItem@NZip@NArchive@@QAE@XZ
$LN45@Decode:
; Line 784
	mov	edx, DWORD PTR _m$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QAEAAUCMethodItem@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CMethodItem>::operator[]
	add	eax, 4
	mov	ecx, eax
	call	??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator ICompressCoder *
	mov	DWORD PTR _coder$[ebp], eax
; Line 787
	lea	ecx, DWORD PTR _setDecoderProperties$74770[ebp]
	call	??0?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::CMyComPtr<ICompressSetDecoderProperties2>
	mov	BYTE PTR __$EHRec$[ebp+8], 22		; 00000016H
; Line 788
	lea	ecx, DWORD PTR _setDecoderProperties$74770[ebp]
	call	??I?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAEPAPAUICompressSetDecoderProperties2@@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::operator&
	mov	esi, esp
	push	eax
	push	OFFSET _IID_ICompressSetDecoderProperties2
	mov	eax, DWORD PTR _coder$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _coder$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 789
	lea	ecx, DWORD PTR _setDecoderProperties$74770[ebp]
	call	??B?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBEPAUICompressSetDecoderProperties2@@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::operator ICompressSetDecoderProperties2 *
	test	eax, eax
	je	$LN27@Decode
; Line 791
	mov	ecx, DWORD PTR _item$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _properties$74773[ebp], dl
; Line 792
	lea	ecx, DWORD PTR _setDecoderProperties$74770[ebp]
	call	??C?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBEPAUICompressSetDecoderProperties2@@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::operator->
	mov	DWORD PTR tv620[ebp], eax
	mov	esi, esp
	push	1
	lea	eax, DWORD PTR _properties$74773[ebp]
	push	eax
	mov	ecx, DWORD PTR tv620[ebp]
	push	ecx
	mov	edx, DWORD PTR tv620[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$74775[ebp], eax
	cmp	DWORD PTR ___result__$74775[ebp], 0
	je	SHORT $LN27@Decode
	mov	edx, DWORD PTR ___result__$74775[ebp]
	mov	DWORD PTR $T76735[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _setDecoderProperties$74770[ebp]
	call	??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::~CMyComPtr<ICompressSetDecoderProperties2>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _cryptoFilter$[ebp]
	call	??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _inStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inStreamReleaser$[ebp]
	call	??1C_InStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_InStream_Releaser::~C_InStream_Releaser
	mov	eax, DWORD PTR $T76735[ebp]
	jmp	$LN79@Decode
$LN27@Decode:
; Line 794
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _setDecoderProperties$74770[ebp]
	call	??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::~CMyComPtr<ICompressSetDecoderProperties2>
; Line 798
	lea	ecx, DWORD PTR _setCoderMt$74815[ebp]
	call	??0?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderMt>::CMyComPtr<ICompressSetCoderMt>
	mov	BYTE PTR __$EHRec$[ebp+8], 23		; 00000017H
; Line 799
	lea	ecx, DWORD PTR _setCoderMt$74815[ebp]
	call	??I?$CMyComPtr@UICompressSetCoderMt@@@@QAEPAPAUICompressSetCoderMt@@XZ ; CMyComPtr<ICompressSetCoderMt>::operator&
	mov	esi, esp
	push	eax
	push	OFFSET _IID_ICompressSetCoderMt
	mov	eax, DWORD PTR _coder$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _coder$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 800
	lea	ecx, DWORD PTR _setCoderMt$74815[ebp]
	call	??B?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ ; CMyComPtr<ICompressSetCoderMt>::operator ICompressSetCoderMt *
	test	eax, eax
	je	$LN25@Decode
; Line 802
	lea	ecx, DWORD PTR _setCoderMt$74815[ebp]
	call	??C?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ ; CMyComPtr<ICompressSetCoderMt>::operator->
	mov	DWORD PTR tv647[ebp], eax
	mov	esi, esp
	mov	ecx, DWORD PTR _numThreads$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv647[ebp]
	push	edx
	mov	eax, DWORD PTR tv647[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$74818[ebp], eax
	cmp	DWORD PTR ___result__$74818[ebp], 0
	je	SHORT $LN25@Decode
	mov	eax, DWORD PTR ___result__$74818[ebp]
	mov	DWORD PTR $T76736[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _setCoderMt$74815[ebp]
	call	??1?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderMt>::~CMyComPtr<ICompressSetCoderMt>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _cryptoFilter$[ebp]
	call	??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _inStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inStreamReleaser$[ebp]
	call	??1C_InStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_InStream_Releaser::~C_InStream_Releaser
	mov	eax, DWORD PTR $T76736[ebp]
	jmp	$LN79@Decode
$LN25@Decode:
; Line 804
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _setCoderMt$74815[ebp]
	call	??1?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderMt>::~CMyComPtr<ICompressSetCoderMt>
; Line 808
	mov	DWORD PTR _result$74821[ebp], 0
; Line 809
	lea	ecx, DWORD PTR _inStreamNew$74824[ebp]
	call	??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 24		; 00000018H
; Line 810
	mov	ecx, DWORD PTR _item$[ebp]
	call	?IsEncrypted@CLocalItem@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CLocalItem::IsEncrypted
	movzx	ecx, al
	test	ecx, ecx
	je	$LN23@Decode
; Line 812
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??7?$CMyComPtr@UISequentialInStream@@@@QBE_NXZ ; CMyComPtr<ISequentialInStream>::operator!
	movzx	edx, al
	test	edx, edx
	je	$LN22@Decode
; Line 814
	push	152					; 00000098H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T76738[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 25		; 00000019H
	cmp	DWORD PTR $T76738[ebp], 0
	je	SHORT $LN101@Decode
	push	0
	mov	ecx, DWORD PTR $T76738[ebp]
	call	??0CFilterCoder@@QAE@_N@Z		; CFilterCoder::CFilterCoder
	mov	DWORD PTR tv678[ebp], eax
	jmp	SHORT $LN102@Decode
$LN101@Decode:
	mov	DWORD PTR tv678[ebp], 0
$LN102@Decode:
	mov	eax, DWORD PTR tv678[ebp]
	mov	DWORD PTR $T76737[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 24		; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T76737[ebp]
	mov	DWORD PTR [ecx+24], edx
; Line 815
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR tv687[ebp], ecx
	cmp	DWORD PTR tv687[ebp], 0
	je	SHORT $LN103@Decode
	mov	edx, DWORD PTR tv687[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR tv686[ebp], edx
	jmp	SHORT $LN104@Decode
$LN103@Decode:
	mov	DWORD PTR tv686[ebp], 0
$LN104@Decode:
	mov	eax, DWORD PTR tv686[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=
$LN22@Decode:
; Line 818
	lea	ecx, DWORD PTR _cryptoFilter$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	add	ecx, 148				; 00000094H
	call	??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@ABV0@@Z ; CMyComPtr<ICompressFilter>::operator=
; Line 820
	movzx	eax, BYTE PTR _wzAesMode$[ebp]
	test	eax, eax
	je	$LN21@Decode
; Line 822
	lea	ecx, DWORD PTR _inStream$[ebp]
	call	??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?ReadHeader@CDecoder@NWzAes@NCrypto@@QAEJPAUISequentialInStream@@@Z ; NCrypto::NWzAes::CDecoder::ReadHeader
	mov	DWORD PTR _result$74821[ebp], eax
; Line 823
	cmp	DWORD PTR _result$74821[ebp], 0
	jne	SHORT $LN20@Decode
; Line 825
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?Init_and_CheckPassword@CDecoder@NWzAes@NCrypto@@QAE_NXZ ; NCrypto::NWzAes::CDecoder::Init_and_CheckPassword
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN20@Decode
; Line 827
	mov	ecx, DWORD PTR _res$[ebp]
	mov	DWORD PTR [ecx], 9
; Line 828
	mov	DWORD PTR $T76743[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _inStreamNew$74824[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _cryptoFilter$[ebp]
	call	??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _inStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inStreamReleaser$[ebp]
	call	??1C_InStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_InStream_Releaser::~C_InStream_Releaser
	mov	eax, DWORD PTR $T76743[ebp]
	jmp	$LN79@Decode
$LN20@Decode:
; Line 831
	jmp	$LN18@Decode
$LN21@Decode:
; Line 832
	movzx	edx, BYTE PTR _pkAesMode$[ebp]
	test	edx, edx
	je	$LN17@Decode
; Line 834
	mov	eax, DWORD PTR _item$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	push	edx
	mov	eax, DWORD PTR _item$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	lea	ecx, DWORD PTR _inStream$[ebp]
	call	??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?ReadHeader@CDecoder@NZipStrong@NCrypto@@QAEJPAUISequentialInStream@@I_K@Z ; NCrypto::NZipStrong::CDecoder::ReadHeader
	mov	DWORD PTR _result$74821[ebp], eax
; Line 835
	cmp	DWORD PTR _result$74821[ebp], 0
	jne	$LN16@Decode
; Line 838
	lea	eax, DWORD PTR _passwOK$74841[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?Init_and_CheckPassword@CDecoder@NZipStrong@NCrypto@@QAEJAA_N@Z ; NCrypto::NZipStrong::CDecoder::Init_and_CheckPassword
	mov	DWORD PTR _result$74821[ebp], eax
; Line 839
	cmp	DWORD PTR _result$74821[ebp], 0
	jne	SHORT $LN16@Decode
	movzx	edx, BYTE PTR _passwOK$74841[ebp]
	test	edx, edx
	jne	SHORT $LN16@Decode
; Line 841
	mov	eax, DWORD PTR _res$[ebp]
	mov	DWORD PTR [eax], 9
; Line 842
	mov	DWORD PTR $T76744[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _inStreamNew$74824[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _cryptoFilter$[ebp]
	call	??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _inStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inStreamReleaser$[ebp]
	call	??1C_InStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_InStream_Releaser::~C_InStream_Releaser
	mov	eax, DWORD PTR $T76744[ebp]
	jmp	$LN79@Decode
$LN16@Decode:
; Line 846
	jmp	$LN18@Decode
$LN17@Decode:
; Line 848
	lea	ecx, DWORD PTR _inStream$[ebp]
	call	??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?ReadHeader@CDecoder@NZip@NCrypto@@QAEJPAUISequentialInStream@@@Z ; NCrypto::NZip::CDecoder::ReadHeader
	mov	DWORD PTR _result$74821[ebp], eax
; Line 849
	cmp	DWORD PTR _result$74821[ebp], 0
	jne	$LN18@Decode
; Line 851
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?Init_BeforeDecode@CDecoder@NZip@NCrypto@@QAEXXZ ; NCrypto::NZip::CDecoder::Init_BeforeDecode
; Line 862
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	dl, BYTE PTR [ecx+47]
	mov	BYTE PTR _v1$74849[ebp], dl
; Line 863
	mov	ecx, DWORD PTR _item$[ebp]
	call	?HasDescriptor@CLocalItem@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CLocalItem::HasDescriptor
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN105@Decode
	mov	ecx, DWORD PTR _item$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	shr	edx, 8
	mov	DWORD PTR tv764[ebp], edx
	jmp	SHORT $LN106@Decode
$LN105@Decode:
	mov	eax, DWORD PTR _item$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	shr	ecx, 24					; 00000018H
	mov	DWORD PTR tv764[ebp], ecx
$LN106@Decode:
	mov	dl, BYTE PTR tv764[ebp]
	mov	BYTE PTR _v2$74850[ebp], dl
; Line 865
	movzx	eax, BYTE PTR _v1$74849[ebp]
	movzx	ecx, BYTE PTR _v2$74850[ebp]
	cmp	eax, ecx
	je	SHORT $LN18@Decode
; Line 867
	mov	edx, DWORD PTR _res$[ebp]
	mov	DWORD PTR [edx], 9
; Line 868
	mov	DWORD PTR $T76747[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _inStreamNew$74824[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _cryptoFilter$[ebp]
	call	??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _inStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inStreamReleaser$[ebp]
	call	??1C_InStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_InStream_Releaser::~C_InStream_Releaser
	mov	eax, DWORD PTR $T76747[ebp]
	jmp	$LN79@Decode
$LN18@Decode:
; Line 873
	cmp	DWORD PTR _result$74821[ebp], 0
	jne	$LN11@Decode
; Line 875
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _inStreamReleaser$[ebp], ecx
; Line 876
	lea	ecx, DWORD PTR _inStream$[ebp]
	call	??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	add	edx, 12					; 0000000cH
	mov	eax, DWORD PTR [eax+12]
	push	edx
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$74857[ebp], eax
	cmp	DWORD PTR ___result__$74857[ebp], 0
	je	SHORT $LN10@Decode
	mov	edx, DWORD PTR ___result__$74857[ebp]
	mov	DWORD PTR $T76748[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _inStreamNew$74824[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _cryptoFilter$[ebp]
	call	??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _inStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inStreamReleaser$[ebp]
	call	??1C_InStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_InStream_Releaser::~C_InStream_Releaser
	mov	eax, DWORD PTR $T76748[ebp]
	jmp	$LN79@Decode
$LN10@Decode:
; Line 881
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	?Init_NoSubFilterInit@CFilterCoder@@QAEJXZ ; CFilterCoder::Init_NoSubFilterInit
	mov	DWORD PTR ___result__$74860[ebp], eax
	cmp	DWORD PTR ___result__$74860[ebp], 0
	je	SHORT $LN9@Decode
	mov	ecx, DWORD PTR ___result__$74860[ebp]
	mov	DWORD PTR $T76749[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _inStreamNew$74824[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _cryptoFilter$[ebp]
	call	??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _inStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inStreamReleaser$[ebp]
	call	??1C_InStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_InStream_Releaser::~C_InStream_Releaser
	mov	eax, DWORD PTR $T76749[ebp]
	jmp	$LN79@Decode
$LN9@Decode:
; Line 884
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 28					; 0000001cH
	push	edx
	lea	ecx, DWORD PTR _inStreamNew$74824[ebp]
	call	??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@ABV0@@Z ; CMyComPtr<ISequentialInStream>::operator=
$LN11@Decode:
; Line 887
	jmp	SHORT $LN8@Decode
$LN23@Decode:
; Line 888
	lea	eax, DWORD PTR _inStream$[ebp]
	push	eax
	lea	ecx, DWORD PTR _inStreamNew$74824[ebp]
	call	??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@ABV0@@Z ; CMyComPtr<ISequentialInStream>::operator=
$LN8@Decode:
; Line 890
	cmp	DWORD PTR _result$74821[ebp], 0
	jne	SHORT $LN7@Decode
; Line 891
	mov	esi, esp
	mov	ecx, DWORD PTR _compressProgress$[ebp]
	push	ecx
	mov	edx, DWORD PTR _item$[ebp]
	add	edx, 8
	push	edx
	push	0
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
	push	eax
	lea	ecx, DWORD PTR _inStreamNew$74824[ebp]
	call	??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
	push	eax
	mov	eax, DWORD PTR _coder$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _coder$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$74821[ebp], eax
$LN7@Decode:
; Line 893
	cmp	DWORD PTR _result$74821[ebp], 1
	jne	SHORT $LN6@Decode
; Line 894
	mov	DWORD PTR $T76750[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _inStreamNew$74824[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _cryptoFilter$[ebp]
	call	??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _inStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inStreamReleaser$[ebp]
	call	??1C_InStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_InStream_Releaser::~C_InStream_Releaser
	mov	eax, DWORD PTR $T76750[ebp]
	jmp	$LN79@Decode
$LN6@Decode:
; Line 896
	cmp	DWORD PTR _result$74821[ebp], -2147467263 ; 80004001H
	jne	SHORT $LN5@Decode
; Line 898
	mov	ecx, DWORD PTR _res$[ebp]
	mov	DWORD PTR [ecx], 1
; Line 899
	mov	DWORD PTR $T76751[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _inStreamNew$74824[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _cryptoFilter$[ebp]
	call	??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _inStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inStreamReleaser$[ebp]
	call	??1C_InStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_InStream_Releaser::~C_InStream_Releaser
	mov	eax, DWORD PTR $T76751[ebp]
	jmp	$LN79@Decode
$LN5@Decode:
; Line 902
	mov	edx, DWORD PTR _result$74821[ebp]
	mov	DWORD PTR ___result__$74874[ebp], edx
	cmp	DWORD PTR ___result__$74874[ebp], 0
	je	SHORT $LN4@Decode
	mov	eax, DWORD PTR ___result__$74874[ebp]
	mov	DWORD PTR $T76752[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _inStreamNew$74824[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _cryptoFilter$[ebp]
	call	??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _inStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inStreamReleaser$[ebp]
	call	??1C_InStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_InStream_Releaser::~C_InStream_Releaser
	mov	eax, DWORD PTR $T76752[ebp]
	jmp	$LN79@Decode
$LN4@Decode:
; Line 903
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _inStreamNew$74824[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
; Line 905
	mov	BYTE PTR _crcOK$[ebp], 1
; Line 906
	mov	BYTE PTR _authOk$[ebp], 1
; Line 907
	movzx	ecx, BYTE PTR _needCRC$[ebp]
	test	ecx, ecx
	je	SHORT $LN3@Decode
; Line 908
	mov	ecx, DWORD PTR _outStreamSpec$[ebp]
	call	?GetCRC@COutStreamWithCRC@@QBEIXZ	; COutStreamWithCRC::GetCRC
	mov	edx, DWORD PTR _item$[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx+28]
	sete	cl
	mov	BYTE PTR _crcOK$[ebp], cl
$LN3@Decode:
; Line 909
	movzx	edx, BYTE PTR _wzAesMode$[ebp]
	test	edx, edx
	je	SHORT $LN2@Decode
; Line 911
	push	0
	push	10					; 0000000aH
	mov	eax, DWORD PTR _authenticationPos$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _authenticationPos$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _archive$[ebp]
	call	?CreateLimitedStream@CInArchive@NZip@NArchive@@QAEPAUISequentialInStream@@_K0@Z ; NArchive::NZip::CInArchive::CreateLimitedStream
	push	eax
	lea	ecx, DWORD PTR _inStream$[ebp]
	call	?Attach@?$CMyComPtr@UISequentialInStream@@@@QAEXPAUISequentialInStream@@@Z ; CMyComPtr<ISequentialInStream>::Attach
; Line 912
	lea	edx, DWORD PTR _authOk$[ebp]
	push	edx
	lea	ecx, DWORD PTR _inStream$[ebp]
	call	??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?CheckMac@CDecoder@NWzAes@NCrypto@@QAEJPAUISequentialInStream@@AA_N@Z ; NCrypto::NWzAes::CDecoder::CheckMac
	test	eax, eax
	je	SHORT $LN2@Decode
; Line 913
	mov	BYTE PTR _authOk$[ebp], 0
$LN2@Decode:
; Line 918
	movzx	ecx, BYTE PTR _crcOK$[ebp]
	test	ecx, ecx
	je	SHORT $LN107@Decode
	movzx	edx, BYTE PTR _authOk$[ebp]
	test	edx, edx
	je	SHORT $LN107@Decode
	mov	DWORD PTR tv881[ebp], 0
	jmp	SHORT $LN108@Decode
$LN107@Decode:
	mov	DWORD PTR tv881[ebp], 3
$LN108@Decode:
	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR tv881[ebp]
	mov	DWORD PTR [eax], ecx
; Line 919
	mov	DWORD PTR $T76755[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _cryptoFilter$[ebp]
	call	??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _inStream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inStreamReleaser$[ebp]
	call	??1C_InStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_InStream_Releaser::~C_InStream_Releaser
	mov	eax, DWORD PTR $T76755[ebp]
$LN79@Decode:
; Line 920
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN155@Decode
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 668				; 0000029cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
	npad	2
$LN155@Decode:
	DD	17					; 00000011H
	DD	$LN154@Decode
$LN154@Decode:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN136@Decode
	DD	-48					; ffffffd0H
	DD	8
	DD	$LN137@Decode
	DD	-64					; ffffffc0H
	DD	6
	DD	$LN138@Decode
	DD	-80					; ffffffb0H
	DD	4
	DD	$LN139@Decode
	DD	-100					; ffffff9cH
	DD	4
	DD	$LN140@Decode
	DD	-128					; ffffff80H
	DD	4
	DD	$LN141@Decode
	DD	-144					; ffffff70H
	DD	6
	DD	$LN142@Decode
	DD	-156					; ffffff64H
	DD	4
	DD	$LN143@Decode
	DD	-172					; ffffff54H
	DD	4
	DD	$LN144@Decode
	DD	-196					; ffffff3cH
	DD	12					; 0000000cH
	DD	$LN145@Decode
	DD	-224					; ffffff20H
	DD	8
	DD	$LN146@Decode
	DD	-252					; ffffff04H
	DD	4
	DD	$LN147@Decode
	DD	-261					; fffffefbH
	DD	1
	DD	$LN148@Decode
	DD	-280					; fffffee8H
	DD	4
	DD	$LN149@Decode
	DD	-300					; fffffed4H
	DD	4
	DD	$LN150@Decode
	DD	-309					; fffffecbH
	DD	1
	DD	$LN151@Decode
	DD	-341					; fffffeabH
	DD	1
	DD	$LN152@Decode
$LN152@Decode:
	DB	97					; 00000061H
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	79					; 0000004fH
	DB	107					; 0000006bH
	DB	0
$LN151@Decode:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	119					; 00000077H
	DB	79					; 0000004fH
	DB	75					; 0000004bH
	DB	0
$LN150@Decode:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	78					; 0000004eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	0
$LN149@Decode:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	77					; 0000004dH
	DB	116					; 00000074H
	DB	0
$LN148@Decode:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN147@Decode:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN146@Decode:
	DB	109					; 0000006dH
	DB	105					; 00000069H
	DB	0
$LN145@Decode:
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	0
$LN144@Decode:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	0
$LN143@Decode:
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	83					; 00000053H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	0
$LN142@Decode:
	DB	97					; 00000061H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	70					; 00000046H
	DB	105					; 00000069H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	100					; 00000064H
	DB	0
$LN141@Decode:
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	70					; 00000046H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN140@Decode:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN139@Decode:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN138@Decode:
	DB	97					; 00000061H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	70					; 00000046H
	DB	105					; 00000069H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	100					; 00000064H
	DB	0
$LN137@Decode:
	DB	102					; 00000066H
	DB	0
$LN136@Decode:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$0:
	lea	ecx, DWORD PTR _inStreamReleaser$[ebp]
	jmp	??1C_InStream_Releaser@CFilterCoder@@QAE@XZ ; CFilterCoder::C_InStream_Releaser::~C_InStream_Releaser
__unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$1:
	mov	eax, DWORD PTR $T76682[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$2:
	lea	ecx, DWORD PTR _outStream$[ebp]
	jmp	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
__unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$3:
	lea	ecx, DWORD PTR _inStream$[ebp]
	jmp	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
__unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$4:
	lea	ecx, DWORD PTR _cryptoFilter$[ebp]
	jmp	??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>
__unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$5:
	mov	eax, DWORD PTR $T76688[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$6:
	mov	eax, DWORD PTR $T76693[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$7:
	mov	eax, DWORD PTR $T76697[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$8:
	lea	ecx, DWORD PTR _cryptoSetPassword$74675[ebp]
	jmp	??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ ; CMyComPtr<ICryptoSetPassword>::~CMyComPtr<ICryptoSetPassword>
__unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$9:
	lea	ecx, DWORD PTR _password$74686[ebp]
	jmp	??1CMyComBSTR@@QAE@XZ			; CMyComBSTR::~CMyComBSTR
__unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$10:
	lea	ecx, DWORD PTR _charPassword$74690[ebp]
	jmp	??1AString@@QAE@XZ			; AString::~AString
__unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$11:
	lea	ecx, DWORD PTR $T76702[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$12:
	lea	ecx, DWORD PTR $T76703[ebp]
	jmp	??1AString@@QAE@XZ			; AString::~AString
__unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$13:
	lea	ecx, DWORD PTR $T76704[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$14:
	lea	ecx, DWORD PTR $T76705[ebp]
	jmp	??1AString@@QAE@XZ			; AString::~AString
__unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$15:
	lea	ecx, DWORD PTR _mi$74718[ebp]
	jmp	??1CMethodItem@NZip@NArchive@@QAE@XZ
__unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$16:
	mov	eax, DWORD PTR $T76709[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$17:
	mov	eax, DWORD PTR $T76713[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$18:
	mov	eax, DWORD PTR $T76717[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$19:
	mov	eax, DWORD PTR $T76721[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$20:
	mov	eax, DWORD PTR $T76725[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$21:
	mov	eax, DWORD PTR $T76729[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$22:
	lea	ecx, DWORD PTR _setDecoderProperties$74770[ebp]
	jmp	??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::~CMyComPtr<ICompressSetDecoderProperties2>
__unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$23:
	lea	ecx, DWORD PTR _setCoderMt$74815[ebp]
	jmp	??1?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ ; CMyComPtr<ICompressSetCoderMt>::~CMyComPtr<ICompressSetCoderMt>
__unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$24:
	lea	ecx, DWORD PTR _inStreamNew$74824[ebp]
	jmp	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
__unwindfunclet$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z$25:
	mov	eax, DWORD PTR $T76738[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-668]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z ENDP ; NArchive::NZip::CZipDecoder::Decode
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Len@AString@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Len@AString@@QBEIXZ PROC				; AString::Len, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 234
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Len@AString@@QBEIXZ ENDP				; AString::Len
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CMyComBSTR@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMyComBSTR@@QAE@XZ PROC				; CMyComBSTR::CMyComBSTR, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 87
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CMyComBSTR@@QAE@XZ ENDP				; CMyComBSTR::CMyComBSTR
_TEXT	ENDS
EXTRN	__imp__SysFreeString@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CMyComBSTR@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CMyComBSTR@@QAE@XZ PROC				; CMyComBSTR::~CMyComBSTR, COMDAT
; _this$ = ecx
; Line 88
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__SysFreeString@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CMyComBSTR@@QAE@XZ ENDP				; CMyComBSTR::~CMyComBSTR
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??ICMyComBSTR@@QAEPAPA_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??ICMyComBSTR@@QAEPAPA_WXZ PROC				; CMyComBSTR::operator&, COMDAT
; _this$ = ecx
; Line 89
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??ICMyComBSTR@@QAEPAPA_WXZ ENDP				; CMyComBSTR::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??BCMyComBSTR@@QBEPB_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BCMyComBSTR@@QBEPB_WXZ PROC				; CMyComBSTR::operator wchar_t const *, COMDAT
; _this$ = ecx
; Line 90
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??BCMyComBSTR@@QBEPB_WXZ ENDP				; CMyComBSTR::operator wchar_t const *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0C_InStream_Releaser@CFilterCoder@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0C_InStream_Releaser@CFilterCoder@@QAE@XZ PROC	; CFilterCoder::C_InStream_Releaser::C_InStream_Releaser, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\filtercoder.h
; Line 144
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0C_InStream_Releaser@CFilterCoder@@QAE@XZ ENDP	; CFilterCoder::C_InStream_Releaser::C_InStream_Releaser
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1C_InStream_Releaser@CFilterCoder@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1C_InStream_Releaser@CFilterCoder@@QAE@XZ PROC	; CFilterCoder::C_InStream_Releaser::~C_InStream_Releaser, COMDAT
; _this$ = ecx
; Line 145
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@C_InStream
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR [edx+12]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@C_InStream:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1C_InStream_Releaser@CFilterCoder@@QAE@XZ ENDP	; CFilterCoder::C_InStream_Releaser::~C_InStream_Releaser
_TEXT	ENDS
PUBLIC	??_7CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ ; NCompress::CCopyCoder::`vftable'
PUBLIC	??_7CCopyCoder@NCompress@@6BISequentialInStream@@@ ; NCompress::CCopyCoder::`vftable'
PUBLIC	??_7CCopyCoder@NCompress@@6BICompressSetInStream@@@ ; NCompress::CCopyCoder::`vftable'
PUBLIC	??_7CCopyCoder@NCompress@@6BICompressCoder@@@	; NCompress::CCopyCoder::`vftable'
PUBLIC	??0ICompressGetInStreamProcessedSize@@QAE@XZ	; ICompressGetInStreamProcessedSize::ICompressGetInStreamProcessedSize
PUBLIC	??0ISequentialInStream@@QAE@XZ			; ISequentialInStream::ISequentialInStream
PUBLIC	??0ICompressSetInStream@@QAE@XZ			; ICompressSetInStream::ICompressSetInStream
PUBLIC	??_R4CCopyCoder@NCompress@@6BICompressCoder@@@	; NCompress::CCopyCoder::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCCopyCoder@NCompress@@@8		; NCompress::CCopyCoder `RTTI Type Descriptor'
PUBLIC	??_R3CCopyCoder@NCompress@@8			; NCompress::CCopyCoder::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCopyCoder@NCompress@@8			; NCompress::CCopyCoder::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCopyCoder@NCompress@@8		; NCompress::CCopyCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@ICompressSetInStream@@8		; ICompressSetInStream::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AUICompressSetInStream@@@8		; ICompressSetInStream `RTTI Type Descriptor'
PUBLIC	??_R3ICompressSetInStream@@8			; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ICompressSetInStream@@8			; ICompressSetInStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ICompressSetInStream@@8		; ICompressSetInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R17?0A@EA@ISequentialInStream@@8		; ISequentialInStream::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	??_R0?AUISequentialInStream@@@8			; ISequentialInStream `RTTI Type Descriptor'
PUBLIC	??_R3ISequentialInStream@@8			; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ISequentialInStream@@8			; ISequentialInStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ISequentialInStream@@8		; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1M@?0A@EA@ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (12,-1,0,64)'
PUBLIC	??_R0?AUICompressGetInStreamProcessedSize@@@8	; ICompressGetInStreamProcessedSize `RTTI Type Descriptor'
PUBLIC	??_R3ICompressGetInStreamProcessedSize@@8	; ICompressGetInStreamProcessedSize::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ICompressGetInStreamProcessedSize@@8	; ICompressGetInStreamProcessedSize::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1M@?0A@EC@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (12,-1,0,66)'
PUBLIC	??_R1BA@?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (16,-1,0,64)'
PUBLIC	?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::CCopyCoder::QueryInterface
PUBLIC	?AddRef@CCopyCoder@NCompress@@UAGKXZ		; NCompress::CCopyCoder::AddRef
PUBLIC	?Release@CCopyCoder@NCompress@@UAGKXZ		; NCompress::CCopyCoder::Release
PUBLIC	??_R4CCopyCoder@NCompress@@6BICompressSetInStream@@@ ; NCompress::CCopyCoder::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{4}'
PUBLIC	?AddRef@CCopyCoder@NCompress@@W3AGKXZ		; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{4}'
PUBLIC	?Release@CCopyCoder@NCompress@@W3AGKXZ		; [thunk]:NCompress::CCopyCoder::Release`adjustor{4}'
PUBLIC	??_R4CCopyCoder@NCompress@@6BISequentialInStream@@@ ; NCompress::CCopyCoder::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{8}'
PUBLIC	?AddRef@CCopyCoder@NCompress@@W7AGKXZ		; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{8}'
PUBLIC	?Release@CCopyCoder@NCompress@@W7AGKXZ		; [thunk]:NCompress::CCopyCoder::Release`adjustor{8}'
PUBLIC	??_R4CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ ; NCompress::CCopyCoder::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{12}'
PUBLIC	?AddRef@CCopyCoder@NCompress@@WM@AGKXZ		; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{12}'
PUBLIC	?Release@CCopyCoder@NCompress@@WM@AGKXZ		; [thunk]:NCompress::CCopyCoder::Release`adjustor{12}'
EXTRN	?Code@CCopyCoder@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z:PROC ; NCompress::CCopyCoder::Code
EXTRN	?SetInStream@CCopyCoder@NCompress@@UAGJPAUISequentialInStream@@@Z:PROC ; NCompress::CCopyCoder::SetInStream
EXTRN	?ReleaseInStream@CCopyCoder@NCompress@@UAGJXZ:PROC ; NCompress::CCopyCoder::ReleaseInStream
EXTRN	?Read@CCopyCoder@NCompress@@UAGJPAXIPAI@Z:PROC	; NCompress::CCopyCoder::Read
EXTRN	?GetInStreamProcessedSize@CCopyCoder@NCompress@@UAGJPA_K@Z:PROC ; NCompress::CCopyCoder::GetInStreamProcessedSize
;	COMDAT ??_R4CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@
; File c:\workspace\7z1505-src\cpp\7zip\compress\copycoder.h
rdata$r	SEGMENT
??_R4CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ DD 00H ; NCompress::CCopyCoder::`RTTI Complete Object Locator'
	DD	0cH
	DD	00H
	DD	FLAT:??_R0?AVCCopyCoder@NCompress@@@8
	DD	FLAT:??_R3CCopyCoder@NCompress@@8
rdata$r	ENDS
;	COMDAT ??_R4CCopyCoder@NCompress@@6BISequentialInStream@@@
rdata$r	SEGMENT
??_R4CCopyCoder@NCompress@@6BISequentialInStream@@@ DD 00H ; NCompress::CCopyCoder::`RTTI Complete Object Locator'
	DD	08H
	DD	00H
	DD	FLAT:??_R0?AVCCopyCoder@NCompress@@@8
	DD	FLAT:??_R3CCopyCoder@NCompress@@8
rdata$r	ENDS
;	COMDAT ??_R4CCopyCoder@NCompress@@6BICompressSetInStream@@@
rdata$r	SEGMENT
??_R4CCopyCoder@NCompress@@6BICompressSetInStream@@@ DD 00H ; NCompress::CCopyCoder::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVCCopyCoder@NCompress@@@8
	DD	FLAT:??_R3CCopyCoder@NCompress@@8
rdata$r	ENDS
;	COMDAT ??_R1BA@?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R1BA@?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (16,-1,0,64)'
	DD	00H
	DD	010H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R1M@?0A@EC@IUnknown@@8
rdata$r	SEGMENT
??_R1M@?0A@EC@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (12,-1,0,66)'
	DD	00H
	DD	0cH
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8 DD FLAT:??_R0?AUICompressGetInStreamProcessedSize@@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICompressGetInStreamProcessedSize@@8
rdata$r	ENDS
;	COMDAT ??_R2ICompressGetInStreamProcessedSize@@8
rdata$r	SEGMENT
??_R2ICompressGetInStreamProcessedSize@@8 DD FLAT:??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ICompressGetInStreamProcessedSize@@8
rdata$r	SEGMENT
??_R3ICompressGetInStreamProcessedSize@@8 DD 00H	; ICompressGetInStreamProcessedSize::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ICompressGetInStreamProcessedSize@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUICompressGetInStreamProcessedSize@@@8
_DATA	SEGMENT
??_R0?AUICompressGetInStreamProcessedSize@@@8 DD FLAT:??_7type_info@@6B@ ; ICompressGetInStreamProcessedSize `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUICompressGetInStreamProcessedSize@@', 00H
_DATA	ENDS
;	COMDAT ??_R1M@?0A@EA@ICompressGetInStreamProcessedSize@@8
rdata$r	SEGMENT
??_R1M@?0A@EA@ICompressGetInStreamProcessedSize@@8 DD FLAT:??_R0?AUICompressGetInStreamProcessedSize@@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (12,-1,0,64)'
	DD	01H
	DD	0cH
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICompressGetInStreamProcessedSize@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ISequentialInStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ISequentialInStream@@8 DD FLAT:??_R0?AUISequentialInStream@@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ISequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_R2ISequentialInStream@@8
rdata$r	SEGMENT
??_R2ISequentialInStream@@8 DD FLAT:??_R1A@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ISequentialInStream@@8
rdata$r	SEGMENT
??_R3ISequentialInStream@@8 DD 00H			; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ISequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUISequentialInStream@@@8
_DATA	SEGMENT
??_R0?AUISequentialInStream@@@8 DD FLAT:??_7type_info@@6B@ ; ISequentialInStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUISequentialInStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R17?0A@EA@ISequentialInStream@@8
rdata$r	SEGMENT
??_R17?0A@EA@ISequentialInStream@@8 DD FLAT:??_R0?AUISequentialInStream@@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	01H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ISequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ICompressSetInStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ICompressSetInStream@@8 DD FLAT:??_R0?AUICompressSetInStream@@@8 ; ICompressSetInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICompressSetInStream@@8
rdata$r	ENDS
;	COMDAT ??_R2ICompressSetInStream@@8
rdata$r	SEGMENT
??_R2ICompressSetInStream@@8 DD FLAT:??_R1A@?0A@EA@ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ICompressSetInStream@@8
rdata$r	SEGMENT
??_R3ICompressSetInStream@@8 DD 00H			; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ICompressSetInStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUICompressSetInStream@@@8
_DATA	SEGMENT
??_R0?AUICompressSetInStream@@@8 DD FLAT:??_7type_info@@6B@ ; ICompressSetInStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUICompressSetInStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@ICompressSetInStream@@8
rdata$r	SEGMENT
??_R13?0A@EA@ICompressSetInStream@@8 DD FLAT:??_R0?AUICompressSetInStream@@@8 ; ICompressSetInStream::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	01H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICompressSetInStream@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CCopyCoder@NCompress@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CCopyCoder@NCompress@@8 DD FLAT:??_R0?AVCCopyCoder@NCompress@@@8 ; NCompress::CCopyCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	09H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCopyCoder@NCompress@@8
rdata$r	ENDS
;	COMDAT ??_R2CCopyCoder@NCompress@@8
rdata$r	SEGMENT
??_R2CCopyCoder@NCompress@@8 DD FLAT:??_R1A@?0A@EA@CCopyCoder@NCompress@@8 ; NCompress::CCopyCoder::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ICompressCoder@@8
	DD	FLAT:??_R1A@?0A@EC@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@ICompressSetInStream@@8
	DD	FLAT:??_R13?0A@EC@IUnknown@@8
	DD	FLAT:??_R17?0A@EA@ISequentialInStream@@8
	DD	FLAT:??_R17?0A@EC@IUnknown@@8
	DD	FLAT:??_R1M@?0A@EA@ICompressGetInStreamProcessedSize@@8
	DD	FLAT:??_R1M@?0A@EC@IUnknown@@8
	DD	FLAT:??_R1BA@?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CCopyCoder@NCompress@@8
rdata$r	SEGMENT
??_R3CCopyCoder@NCompress@@8 DD 00H			; NCompress::CCopyCoder::`RTTI Class Hierarchy Descriptor'
	DD	05H
	DD	0aH
	DD	FLAT:??_R2CCopyCoder@NCompress@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCopyCoder@NCompress@@@8
_DATA	SEGMENT
??_R0?AVCCopyCoder@NCompress@@@8 DD FLAT:??_7type_info@@6B@ ; NCompress::CCopyCoder `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCopyCoder@NCompress@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CCopyCoder@NCompress@@6BICompressCoder@@@
rdata$r	SEGMENT
??_R4CCopyCoder@NCompress@@6BICompressCoder@@@ DD 00H	; NCompress::CCopyCoder::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCCopyCoder@NCompress@@@8
	DD	FLAT:??_R3CCopyCoder@NCompress@@8
rdata$r	ENDS
;	COMDAT ??_7CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@
CONST	SEGMENT
??_7CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ DD FLAT:??_R4CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ ; NCompress::CCopyCoder::`vftable'
	DD	FLAT:?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CCopyCoder@NCompress@@WM@AGKXZ
	DD	FLAT:?Release@CCopyCoder@NCompress@@WM@AGKXZ
	DD	FLAT:?GetInStreamProcessedSize@CCopyCoder@NCompress@@UAGJPA_K@Z
CONST	ENDS
;	COMDAT ??_7CCopyCoder@NCompress@@6BISequentialInStream@@@
CONST	SEGMENT
??_7CCopyCoder@NCompress@@6BISequentialInStream@@@ DD FLAT:??_R4CCopyCoder@NCompress@@6BISequentialInStream@@@ ; NCompress::CCopyCoder::`vftable'
	DD	FLAT:?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CCopyCoder@NCompress@@W7AGKXZ
	DD	FLAT:?Release@CCopyCoder@NCompress@@W7AGKXZ
	DD	FLAT:?Read@CCopyCoder@NCompress@@UAGJPAXIPAI@Z
CONST	ENDS
;	COMDAT ??_7CCopyCoder@NCompress@@6BICompressSetInStream@@@
CONST	SEGMENT
??_7CCopyCoder@NCompress@@6BICompressSetInStream@@@ DD FLAT:??_R4CCopyCoder@NCompress@@6BICompressSetInStream@@@ ; NCompress::CCopyCoder::`vftable'
	DD	FLAT:?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CCopyCoder@NCompress@@W3AGKXZ
	DD	FLAT:?Release@CCopyCoder@NCompress@@W3AGKXZ
	DD	FLAT:?SetInStream@CCopyCoder@NCompress@@UAGJPAUISequentialInStream@@@Z
	DD	FLAT:?ReleaseInStream@CCopyCoder@NCompress@@UAGJXZ
CONST	ENDS
;	COMDAT ??_7CCopyCoder@NCompress@@6BICompressCoder@@@
CONST	SEGMENT
??_7CCopyCoder@NCompress@@6BICompressCoder@@@ DD FLAT:??_R4CCopyCoder@NCompress@@6BICompressCoder@@@ ; NCompress::CCopyCoder::`vftable'
	DD	FLAT:?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CCopyCoder@NCompress@@UAGKXZ
	DD	FLAT:?Release@CCopyCoder@NCompress@@UAGKXZ
	DD	FLAT:?Code@CCopyCoder@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CCopyCoder@NCompress@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CCopyCoder@NCompress@@QAE@XZ PROC			; NCompress::CCopyCoder::CCopyCoder, COMDAT
; _this$ = ecx
; Line 24
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ICompressCoder@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0ICompressSetInStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0ISequentialInStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0ICompressGetInStreamProcessedSize@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CCopyCoder@NCompress@@6BICompressCoder@@@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], OFFSET ??_7CCopyCoder@NCompress@@6BICompressSetInStream@@@
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], OFFSET ??_7CCopyCoder@NCompress@@6BISequentialInStream@@@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], OFFSET ??_7CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+32], 0
	mov	DWORD PTR [edx+36], 0
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CCopyCoder@NCompress@@QAE@XZ ENDP			; NCompress::CCopyCoder::CCopyCoder
_TEXT	ENDS
PUBLIC	??_7ISequentialInStream@@6B@			; ISequentialInStream::`vftable'
PUBLIC	??_R4ISequentialInStream@@6B@			; ISequentialInStream::`RTTI Complete Object Locator'
;	COMDAT ??_R4ISequentialInStream@@6B@
rdata$r	SEGMENT
??_R4ISequentialInStream@@6B@ DD 00H			; ISequentialInStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUISequentialInStream@@@8
	DD	FLAT:??_R3ISequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_7ISequentialInStream@@6B@
CONST	SEGMENT
??_7ISequentialInStream@@6B@ DD FLAT:??_R4ISequentialInStream@@6B@ ; ISequentialInStream::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ISequentialInStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ISequentialInStream@@QAE@XZ PROC			; ISequentialInStream::ISequentialInStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ISequentialInStream@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ISequentialInStream@@QAE@XZ ENDP			; ISequentialInStream::ISequentialInStream
_TEXT	ENDS
EXTRN	_IID_ICompressGetInStreamProcessedSize:BYTE
EXTRN	_IID_ISequentialInStream:BYTE
EXTRN	_IID_ICompressSetInStream:BYTE
EXTRN	_IID_ICompressCoder:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
tv144 = -12						; size = 4
tv134 = -8						; size = 4
tv92 = -4						; size = 4
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z PROC ; NCompress::CCopyCoder::QueryInterface, COMDAT
; Line 31
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN10@QueryInter@3
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	$LN9@QueryInter@3
$LN10@QueryInter@3:
	push	OFFSET _IID_ICompressCoder
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN8@QueryInter@3
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	$LN9@QueryInter@3
$LN8@QueryInter@3:
	push	OFFSET _IID_ICompressSetInStream
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN6@QueryInter@3
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN13@QueryInter@3
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	mov	DWORD PTR tv92[ebp], edx
	jmp	SHORT $LN14@QueryInter@3
$LN13@QueryInter@3:
	mov	DWORD PTR tv92[ebp], 0
$LN14@QueryInter@3:
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	ecx, DWORD PTR tv92[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN9@QueryInter@3
$LN6@QueryInter@3:
	push	OFFSET _IID_ISequentialInStream
	mov	edx, DWORD PTR _iid$[ebp]
	push	edx
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@QueryInter@3
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN15@QueryInter@3
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	mov	DWORD PTR tv134[ebp], eax
	jmp	SHORT $LN16@QueryInter@3
$LN15@QueryInter@3:
	mov	DWORD PTR tv134[ebp], 0
$LN16@QueryInter@3:
	mov	ecx, DWORD PTR _outObject$[ebp]
	mov	edx, DWORD PTR tv134[ebp]
	mov	DWORD PTR [ecx], edx
	jmp	SHORT $LN9@QueryInter@3
$LN4@QueryInter@3:
	push	OFFSET _IID_ICompressGetInStreamProcessedSize
	mov	eax, DWORD PTR _iid$[ebp]
	push	eax
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@3
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN17@QueryInter@3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR tv144[ebp], ecx
	jmp	SHORT $LN18@QueryInter@3
$LN17@QueryInter@3:
	mov	DWORD PTR tv144[ebp], 0
$LN18@QueryInter@3:
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR tv144[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN9@QueryInter@3
$LN2@QueryInter@3:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN11@QueryInter@3
$LN9@QueryInter@3:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], edx
	xor	eax, eax
$LN11@QueryInter@3:
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z ENDP ; NCompress::CCopyCoder::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CCopyCoder@NCompress@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CCopyCoder@NCompress@@UAGKXZ PROC		; NCompress::CCopyCoder::AddRef, COMDAT
; Line 31
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+16], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CCopyCoder@NCompress@@UAGKXZ ENDP		; NCompress::CCopyCoder::AddRef
_TEXT	ENDS
PUBLIC	??_GCCopyCoder@NCompress@@QAEPAXI@Z		; NCompress::CCopyCoder::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CCopyCoder@NCompress@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T76837 = -8						; size = 4
$T76836 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CCopyCoder@NCompress@@UAGKXZ PROC		; NCompress::CCopyCoder::Release, COMDAT
; Line 31
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+16], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+16]
	jmp	SHORT $LN2@Release@3
$LN1@Release@3:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T76837[ebp], edx
	mov	eax, DWORD PTR $T76837[ebp]
	mov	DWORD PTR $T76836[ebp], eax
	cmp	DWORD PTR $T76836[ebp], 0
	je	SHORT $LN4@Release@3
	push	1
	mov	ecx, DWORD PTR $T76836[ebp]
	call	??_GCCopyCoder@NCompress@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release@3
$LN4@Release@3:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release@3:
	xor	eax, eax
$LN2@Release@3:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CCopyCoder@NCompress@@UAGKXZ ENDP		; NCompress::CCopyCoder::Release
_TEXT	ENDS
PUBLIC	??_7ICompressSetInStream@@6B@			; ICompressSetInStream::`vftable'
PUBLIC	??_R4ICompressSetInStream@@6B@			; ICompressSetInStream::`RTTI Complete Object Locator'
;	COMDAT ??_R4ICompressSetInStream@@6B@
rdata$r	SEGMENT
??_R4ICompressSetInStream@@6B@ DD 00H			; ICompressSetInStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUICompressSetInStream@@@8
	DD	FLAT:??_R3ICompressSetInStream@@8
rdata$r	ENDS
;	COMDAT ??_7ICompressSetInStream@@6B@
CONST	SEGMENT
??_7ICompressSetInStream@@6B@ DD FLAT:??_R4ICompressSetInStream@@6B@ ; ICompressSetInStream::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ICompressSetInStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ICompressSetInStream@@QAE@XZ PROC			; ICompressSetInStream::ICompressSetInStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ICompressSetInStream@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ICompressSetInStream@@QAE@XZ ENDP			; ICompressSetInStream::ICompressSetInStream
_TEXT	ENDS
PUBLIC	??_7ICompressGetInStreamProcessedSize@@6B@	; ICompressGetInStreamProcessedSize::`vftable'
PUBLIC	??_R4ICompressGetInStreamProcessedSize@@6B@	; ICompressGetInStreamProcessedSize::`RTTI Complete Object Locator'
;	COMDAT ??_R4ICompressGetInStreamProcessedSize@@6B@
rdata$r	SEGMENT
??_R4ICompressGetInStreamProcessedSize@@6B@ DD 00H	; ICompressGetInStreamProcessedSize::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUICompressGetInStreamProcessedSize@@@8
	DD	FLAT:??_R3ICompressGetInStreamProcessedSize@@8
rdata$r	ENDS
;	COMDAT ??_7ICompressGetInStreamProcessedSize@@6B@
CONST	SEGMENT
??_7ICompressGetInStreamProcessedSize@@6B@ DD FLAT:??_R4ICompressGetInStreamProcessedSize@@6B@ ; ICompressGetInStreamProcessedSize::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ICompressGetInStreamProcessedSize@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ICompressGetInStreamProcessedSize@@QAE@XZ PROC	; ICompressGetInStreamProcessedSize::ICompressGetInStreamProcessedSize, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ICompressGetInStreamProcessedSize@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ICompressGetInStreamProcessedSize@@QAE@XZ ENDP	; ICompressGetInStreamProcessedSize::ICompressGetInStreamProcessedSize
_TEXT	ENDS
EXTRN	??1CCopyCoder@NCompress@@QAE@XZ:PROC		; NCompress::CCopyCoder::~CCopyCoder
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCCopyCoder@NCompress@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCCopyCoder@NCompress@@QAEPAXI@Z PROC		; NCompress::CCopyCoder::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CCopyCoder@NCompress@@QAE@XZ		; NCompress::CCopyCoder::~CCopyCoder
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@3
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCCopyCoder@NCompress@@QAEPAXI@Z ENDP		; NCompress::CCopyCoder::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SetKeyMode@CBaseCoder@NWzAes@NCrypto@@QAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_mode$ = 8						; size = 4
?SetKeyMode@CBaseCoder@NWzAes@NCrypto@@QAE_NI@Z PROC	; NCrypto::NWzAes::CBaseCoder::SetKeyMode, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\crypto\wzaes.h
; Line 102
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 103
	cmp	DWORD PTR _mode$[ebp], 1
	jb	SHORT $LN1@SetKeyMode
	cmp	DWORD PTR _mode$[ebp], 3
	jbe	SHORT $LN2@SetKeyMode
$LN1@SetKeyMode:
; Line 104
	xor	al, al
	jmp	SHORT $LN3@SetKeyMode
$LN2@SetKeyMode:
; Line 105
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _mode$[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 106
	mov	al, 1
$LN3@SetKeyMode:
; Line 107
	mov	esp, ebp
	pop	ebp
	ret	4
?SetKeyMode@CBaseCoder@NWzAes@NCrypto@@QAE_NI@Z ENDP	; NCrypto::NWzAes::CBaseCoder::SetKeyMode
_TEXT	ENDS
PUBLIC	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetStream@COutStreamWithCRC@@QAEXPAUISequentialOutStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_stream$ = 8						; size = 4
?SetStream@COutStreamWithCRC@@QAEXPAUISequentialOutStream@@@Z PROC ; COutStreamWithCRC::SetStream, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\common\outstreamwithcrc.h
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetStream@COutStreamWithCRC@@QAEXPAUISequentialOutStream@@@Z ENDP ; COutStreamWithCRC::SetStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Init@COutStreamWithCRC@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_calculate$ = 8						; size = 1
?Init@COutStreamWithCRC@@QAEX_N@Z PROC			; COutStreamWithCRC::Init, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 27
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0
	mov	DWORD PTR [eax+20], 0
; Line 28
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR _calculate$[ebp]
	mov	BYTE PTR [ecx+28], dl
; Line 29
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], -1
; Line 30
	mov	esp, ebp
	pop	ebp
	ret	4
?Init@COutStreamWithCRC@@QAEX_N@Z ENDP			; COutStreamWithCRC::Init
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetCRC@COutStreamWithCRC@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCRC@COutStreamWithCRC@@QBEIXZ PROC			; COutStreamWithCRC::GetCRC, COMDAT
; _this$ = ecx
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+24]
	xor	eax, -1
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCRC@COutStreamWithCRC@@QBEIXZ ENDP			; COutStreamWithCRC::GetCRC
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?HasDescriptor@CLocalItem@NZip@NArchive@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?HasDescriptor@CLocalItem@NZip@NArchive@@QBE_NXZ PROC	; NArchive::NZip::CLocalItem::HasDescriptor, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\zipitem.h
; Line 213
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [eax]
	and	eax, 8
	neg	eax
	sbb	eax, eax
	neg	eax
	mov	esp, ebp
	pop	ebp
	ret	0
?HasDescriptor@CLocalItem@NZip@NArchive@@QBE_NXZ ENDP	; NArchive::NZip::CLocalItem::HasDescriptor
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetDataPosition@CItemEx@NZip@NArchive@@QBE_KXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDataPosition@CItemEx@NZip@NArchive@@QBE_KXZ PROC	; NArchive::NZip::CItemEx::GetDataPosition, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\zipin.h
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+96]
	xor	edx, edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+64]
	adc	edx, DWORD PTR [ecx+68]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDataPosition@CItemEx@NZip@NArchive@@QBE_KXZ ENDP	; NArchive::NZip::CItemEx::GetDataPosition
_TEXT	ENDS
PUBLIC	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ	; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
PUBLIC	??_7COutStreamWithCRC@@6B@			; COutStreamWithCRC::`vftable'
PUBLIC	??0ISequentialOutStream@@QAE@XZ			; ISequentialOutStream::ISequentialOutStream
PUBLIC	??_R4COutStreamWithCRC@@6B@			; COutStreamWithCRC::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCOutStreamWithCRC@@@8			; COutStreamWithCRC `RTTI Type Descriptor'
PUBLIC	??_R3COutStreamWithCRC@@8			; COutStreamWithCRC::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2COutStreamWithCRC@@8			; COutStreamWithCRC::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@COutStreamWithCRC@@8		; COutStreamWithCRC::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ISequentialOutStream@@8		; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUISequentialOutStream@@@8		; ISequentialOutStream `RTTI Type Descriptor'
PUBLIC	??_R3ISequentialOutStream@@8			; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ISequentialOutStream@@8			; ISequentialOutStream::`RTTI Base Class Array'
PUBLIC	?QueryInterface@COutStreamWithCRC@@UAGJABU_GUID@@PAPAX@Z ; COutStreamWithCRC::QueryInterface
PUBLIC	?AddRef@COutStreamWithCRC@@UAGKXZ		; COutStreamWithCRC::AddRef
PUBLIC	?Release@COutStreamWithCRC@@UAGKXZ		; COutStreamWithCRC::Release
EXTRN	?Write@COutStreamWithCRC@@UAGJPBXIPAI@Z:PROC	; COutStreamWithCRC::Write
;	COMDAT ??_R2ISequentialOutStream@@8
rdata$r	SEGMENT
??_R2ISequentialOutStream@@8 DD FLAT:??_R1A@?0A@EA@ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ISequentialOutStream@@8
rdata$r	SEGMENT
??_R3ISequentialOutStream@@8 DD 00H			; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ISequentialOutStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUISequentialOutStream@@@8
_DATA	SEGMENT
??_R0?AUISequentialOutStream@@@8 DD FLAT:??_7type_info@@6B@ ; ISequentialOutStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUISequentialOutStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ISequentialOutStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ISequentialOutStream@@8 DD FLAT:??_R0?AUISequentialOutStream@@@8 ; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ISequentialOutStream@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@COutStreamWithCRC@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@COutStreamWithCRC@@8 DD FLAT:??_R0?AVCOutStreamWithCRC@@@8 ; COutStreamWithCRC::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3COutStreamWithCRC@@8
rdata$r	ENDS
;	COMDAT ??_R2COutStreamWithCRC@@8
rdata$r	SEGMENT
??_R2COutStreamWithCRC@@8 DD FLAT:??_R1A@?0A@EA@COutStreamWithCRC@@8 ; COutStreamWithCRC::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ISequentialOutStream@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3COutStreamWithCRC@@8
rdata$r	SEGMENT
??_R3COutStreamWithCRC@@8 DD 00H			; COutStreamWithCRC::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2COutStreamWithCRC@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCOutStreamWithCRC@@@8
_DATA	SEGMENT
??_R0?AVCOutStreamWithCRC@@@8 DD FLAT:??_7type_info@@6B@ ; COutStreamWithCRC `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCOutStreamWithCRC@@', 00H
_DATA	ENDS
;	COMDAT ??_R4COutStreamWithCRC@@6B@
rdata$r	SEGMENT
??_R4COutStreamWithCRC@@6B@ DD 00H			; COutStreamWithCRC::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCOutStreamWithCRC@@@8
	DD	FLAT:??_R3COutStreamWithCRC@@8
rdata$r	ENDS
;	COMDAT ??_7COutStreamWithCRC@@6B@
CONST	SEGMENT
??_7COutStreamWithCRC@@6B@ DD FLAT:??_R4COutStreamWithCRC@@6B@ ; COutStreamWithCRC::`vftable'
	DD	FLAT:?QueryInterface@COutStreamWithCRC@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@COutStreamWithCRC@@UAGKXZ
	DD	FLAT:?Release@COutStreamWithCRC@@UAGKXZ
	DD	FLAT:?Write@COutStreamWithCRC@@UAGJPBXIPAI@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0COutStreamWithCRC@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0COutStreamWithCRC@@QAE@XZ PROC			; COutStreamWithCRC::COutStreamWithCRC, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ISequentialOutStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7COutStreamWithCRC@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0COutStreamWithCRC@@QAE@XZ ENDP			; COutStreamWithCRC::COutStreamWithCRC
_TEXT	ENDS
PUBLIC	??_7ISequentialOutStream@@6B@			; ISequentialOutStream::`vftable'
PUBLIC	??_R4ISequentialOutStream@@6B@			; ISequentialOutStream::`RTTI Complete Object Locator'
;	COMDAT ??_R4ISequentialOutStream@@6B@
rdata$r	SEGMENT
??_R4ISequentialOutStream@@6B@ DD 00H			; ISequentialOutStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUISequentialOutStream@@@8
	DD	FLAT:??_R3ISequentialOutStream@@8
rdata$r	ENDS
;	COMDAT ??_7ISequentialOutStream@@6B@
CONST	SEGMENT
??_7ISequentialOutStream@@6B@ DD FLAT:??_R4ISequentialOutStream@@6B@ ; ISequentialOutStream::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ISequentialOutStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ISequentialOutStream@@QAE@XZ PROC			; ISequentialOutStream::ISequentialOutStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ISequentialOutStream@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ISequentialOutStream@@QAE@XZ ENDP			; ISequentialOutStream::ISequentialOutStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@COutStreamWithCRC@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@COutStreamWithCRC@@UAGJABU_GUID@@PAPAX@Z PROC ; COutStreamWithCRC::QueryInterface, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\archive\common\outstreamwithcrc.h
; Line 21
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@4
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN1@QueryInter@4
$LN2@QueryInter@4:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN3@QueryInter@4
$LN1@QueryInter@4:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	xor	eax, eax
$LN3@QueryInter@4:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@COutStreamWithCRC@@UAGJABU_GUID@@PAPAX@Z ENDP ; COutStreamWithCRC::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@COutStreamWithCRC@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@COutStreamWithCRC@@UAGKXZ PROC			; COutStreamWithCRC::AddRef, COMDAT
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@COutStreamWithCRC@@UAGKXZ ENDP			; COutStreamWithCRC::AddRef
_TEXT	ENDS
PUBLIC	??_GCOutStreamWithCRC@@QAEPAXI@Z		; COutStreamWithCRC::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@COutStreamWithCRC@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T76870 = -8						; size = 4
$T76869 = -4						; size = 4
_this$ = 8						; size = 4
?Release@COutStreamWithCRC@@UAGKXZ PROC			; COutStreamWithCRC::Release, COMDAT
; Line 21
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	jmp	SHORT $LN2@Release@4
$LN1@Release@4:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T76870[ebp], edx
	mov	eax, DWORD PTR $T76870[ebp]
	mov	DWORD PTR $T76869[ebp], eax
	cmp	DWORD PTR $T76869[ebp], 0
	je	SHORT $LN4@Release@4
	push	1
	mov	ecx, DWORD PTR $T76869[ebp]
	call	??_GCOutStreamWithCRC@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release@4
$LN4@Release@4:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release@4:
	xor	eax, eax
$LN2@Release@4:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@COutStreamWithCRC@@UAGKXZ ENDP			; COutStreamWithCRC::Release
_TEXT	ENDS
PUBLIC	??1COutStreamWithCRC@@QAE@XZ			; COutStreamWithCRC::~COutStreamWithCRC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCOutStreamWithCRC@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCOutStreamWithCRC@@QAEPAXI@Z PROC			; COutStreamWithCRC::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1COutStreamWithCRC@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@4:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCOutStreamWithCRC@@QAEPAXI@Z ENDP			; COutStreamWithCRC::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1COutStreamWithCRC@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1COutStreamWithCRC@@QAE@XZ PROC			; COutStreamWithCRC::~COutStreamWithCRC, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1COutStreamWithCRC@@QAE@XZ ENDP			; COutStreamWithCRC::~COutStreamWithCRC
_TEXT	ENDS
PUBLIC	??_7CDecoder@NWzAes@NCrypto@@6BICryptoSetPassword@@@ ; NCrypto::NWzAes::CDecoder::`vftable'
PUBLIC	??_7CDecoder@NWzAes@NCrypto@@6BICompressFilter@@@ ; NCrypto::NWzAes::CDecoder::`vftable'
PUBLIC	??0CBaseCoder@NWzAes@NCrypto@@QAE@XZ		; NCrypto::NWzAes::CBaseCoder::CBaseCoder
PUBLIC	??_R4CDecoder@NWzAes@NCrypto@@6BICompressFilter@@@ ; NCrypto::NWzAes::CDecoder::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCDecoder@NWzAes@NCrypto@@@8		; NCrypto::NWzAes::CDecoder `RTTI Type Descriptor'
PUBLIC	??_R3CDecoder@NWzAes@NCrypto@@8			; NCrypto::NWzAes::CDecoder::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CDecoder@NWzAes@NCrypto@@8			; NCrypto::NWzAes::CDecoder::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CDecoder@NWzAes@NCrypto@@8	; NCrypto::NWzAes::CDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CBaseCoder@NWzAes@NCrypto@@8	; NCrypto::NWzAes::CBaseCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCBaseCoder@NWzAes@NCrypto@@@8		; NCrypto::NWzAes::CBaseCoder `RTTI Type Descriptor'
PUBLIC	??_R3CBaseCoder@NWzAes@NCrypto@@8		; NCrypto::NWzAes::CBaseCoder::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CBaseCoder@NWzAes@NCrypto@@8		; NCrypto::NWzAes::CBaseCoder::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ICompressFilter@@8		; ICompressFilter::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUICompressFilter@@@8			; ICompressFilter `RTTI Type Descriptor'
PUBLIC	??_R3ICompressFilter@@8				; ICompressFilter::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ICompressFilter@@8				; ICompressFilter::`RTTI Base Class Array'
PUBLIC	??_R13?0A@EA@ICryptoSetPassword@@8		; ICryptoSetPassword::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AUICryptoSetPassword@@@8			; ICryptoSetPassword `RTTI Type Descriptor'
PUBLIC	??_R3ICryptoSetPassword@@8			; ICryptoSetPassword::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ICryptoSetPassword@@8			; ICryptoSetPassword::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ICryptoSetPassword@@8		; ICryptoSetPassword::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R17?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	?QueryInterface@CBaseCoder@NWzAes@NCrypto@@UAGJABU_GUID@@PAPAX@Z ; NCrypto::NWzAes::CBaseCoder::QueryInterface
PUBLIC	?AddRef@CBaseCoder@NWzAes@NCrypto@@UAGKXZ	; NCrypto::NWzAes::CBaseCoder::AddRef
PUBLIC	?Release@CBaseCoder@NWzAes@NCrypto@@UAGKXZ	; NCrypto::NWzAes::CBaseCoder::Release
PUBLIC	??_R4CDecoder@NWzAes@NCrypto@@6BICryptoSetPassword@@@ ; NCrypto::NWzAes::CDecoder::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@CBaseCoder@NWzAes@NCrypto@@W3AGJABU_GUID@@PAPAX@Z ; [thunk]:NCrypto::NWzAes::CBaseCoder::QueryInterface`adjustor{4}'
PUBLIC	?AddRef@CBaseCoder@NWzAes@NCrypto@@W3AGKXZ	; [thunk]:NCrypto::NWzAes::CBaseCoder::AddRef`adjustor{4}'
PUBLIC	?Release@CBaseCoder@NWzAes@NCrypto@@W3AGKXZ	; [thunk]:NCrypto::NWzAes::CBaseCoder::Release`adjustor{4}'
EXTRN	?Init@CBaseCoder@NWzAes@NCrypto@@UAGJXZ:PROC	; NCrypto::NWzAes::CBaseCoder::Init
EXTRN	?Filter@CDecoder@NWzAes@NCrypto@@UAGIPAEI@Z:PROC ; NCrypto::NWzAes::CDecoder::Filter
EXTRN	?CryptoSetPassword@CBaseCoder@NWzAes@NCrypto@@UAGJPBEI@Z:PROC ; NCrypto::NWzAes::CBaseCoder::CryptoSetPassword
;	COMDAT ??_R4CDecoder@NWzAes@NCrypto@@6BICryptoSetPassword@@@
rdata$r	SEGMENT
??_R4CDecoder@NWzAes@NCrypto@@6BICryptoSetPassword@@@ DD 00H ; NCrypto::NWzAes::CDecoder::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVCDecoder@NWzAes@NCrypto@@@8
	DD	FLAT:??_R3CDecoder@NWzAes@NCrypto@@8
rdata$r	ENDS
;	COMDAT ??_R17?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R17?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ICryptoSetPassword@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ICryptoSetPassword@@8 DD FLAT:??_R0?AUICryptoSetPassword@@@8 ; ICryptoSetPassword::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICryptoSetPassword@@8
rdata$r	ENDS
;	COMDAT ??_R2ICryptoSetPassword@@8
rdata$r	SEGMENT
??_R2ICryptoSetPassword@@8 DD FLAT:??_R1A@?0A@EA@ICryptoSetPassword@@8 ; ICryptoSetPassword::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ICryptoSetPassword@@8
rdata$r	SEGMENT
??_R3ICryptoSetPassword@@8 DD 00H			; ICryptoSetPassword::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ICryptoSetPassword@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUICryptoSetPassword@@@8
_DATA	SEGMENT
??_R0?AUICryptoSetPassword@@@8 DD FLAT:??_7type_info@@6B@ ; ICryptoSetPassword `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUICryptoSetPassword@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@ICryptoSetPassword@@8
rdata$r	SEGMENT
??_R13?0A@EA@ICryptoSetPassword@@8 DD FLAT:??_R0?AUICryptoSetPassword@@@8 ; ICryptoSetPassword::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	01H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICryptoSetPassword@@8
rdata$r	ENDS
;	COMDAT ??_R2ICompressFilter@@8
rdata$r	SEGMENT
??_R2ICompressFilter@@8 DD FLAT:??_R1A@?0A@EA@ICompressFilter@@8 ; ICompressFilter::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ICompressFilter@@8
rdata$r	SEGMENT
??_R3ICompressFilter@@8 DD 00H				; ICompressFilter::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ICompressFilter@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUICompressFilter@@@8
_DATA	SEGMENT
??_R0?AUICompressFilter@@@8 DD FLAT:??_7type_info@@6B@	; ICompressFilter `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUICompressFilter@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ICompressFilter@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ICompressFilter@@8 DD FLAT:??_R0?AUICompressFilter@@@8 ; ICompressFilter::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICompressFilter@@8
rdata$r	ENDS
;	COMDAT ??_R2CBaseCoder@NWzAes@NCrypto@@8
rdata$r	SEGMENT
??_R2CBaseCoder@NWzAes@NCrypto@@8 DD FLAT:??_R1A@?0A@EA@CBaseCoder@NWzAes@NCrypto@@8 ; NCrypto::NWzAes::CBaseCoder::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ICompressFilter@@8
	DD	FLAT:??_R1A@?0A@EC@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@ICryptoSetPassword@@8
	DD	FLAT:??_R13?0A@EC@IUnknown@@8
	DD	FLAT:??_R17?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CBaseCoder@NWzAes@NCrypto@@8
rdata$r	SEGMENT
??_R3CBaseCoder@NWzAes@NCrypto@@8 DD 00H		; NCrypto::NWzAes::CBaseCoder::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	06H
	DD	FLAT:??_R2CBaseCoder@NWzAes@NCrypto@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCBaseCoder@NWzAes@NCrypto@@@8
_DATA	SEGMENT
??_R0?AVCBaseCoder@NWzAes@NCrypto@@@8 DD FLAT:??_7type_info@@6B@ ; NCrypto::NWzAes::CBaseCoder `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCBaseCoder@NWzAes@NCrypto@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@CBaseCoder@NWzAes@NCrypto@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CBaseCoder@NWzAes@NCrypto@@8 DD FLAT:??_R0?AVCBaseCoder@NWzAes@NCrypto@@@8 ; NCrypto::NWzAes::CBaseCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	05H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CBaseCoder@NWzAes@NCrypto@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CDecoder@NWzAes@NCrypto@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CDecoder@NWzAes@NCrypto@@8 DD FLAT:??_R0?AVCDecoder@NWzAes@NCrypto@@@8 ; NCrypto::NWzAes::CDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	06H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CDecoder@NWzAes@NCrypto@@8
rdata$r	ENDS
;	COMDAT ??_R2CDecoder@NWzAes@NCrypto@@8
rdata$r	SEGMENT
??_R2CDecoder@NWzAes@NCrypto@@8 DD FLAT:??_R1A@?0A@EA@CDecoder@NWzAes@NCrypto@@8 ; NCrypto::NWzAes::CDecoder::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CBaseCoder@NWzAes@NCrypto@@8
	DD	FLAT:??_R1A@?0A@EA@ICompressFilter@@8
	DD	FLAT:??_R1A@?0A@EC@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@ICryptoSetPassword@@8
	DD	FLAT:??_R13?0A@EC@IUnknown@@8
	DD	FLAT:??_R17?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CDecoder@NWzAes@NCrypto@@8
rdata$r	SEGMENT
??_R3CDecoder@NWzAes@NCrypto@@8 DD 00H			; NCrypto::NWzAes::CDecoder::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	07H
	DD	FLAT:??_R2CDecoder@NWzAes@NCrypto@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCDecoder@NWzAes@NCrypto@@@8
_DATA	SEGMENT
??_R0?AVCDecoder@NWzAes@NCrypto@@@8 DD FLAT:??_7type_info@@6B@ ; NCrypto::NWzAes::CDecoder `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCDecoder@NWzAes@NCrypto@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CDecoder@NWzAes@NCrypto@@6BICompressFilter@@@
rdata$r	SEGMENT
??_R4CDecoder@NWzAes@NCrypto@@6BICompressFilter@@@ DD 00H ; NCrypto::NWzAes::CDecoder::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCDecoder@NWzAes@NCrypto@@@8
	DD	FLAT:??_R3CDecoder@NWzAes@NCrypto@@8
rdata$r	ENDS
;	COMDAT ??_7CDecoder@NWzAes@NCrypto@@6BICryptoSetPassword@@@
CONST	SEGMENT
??_7CDecoder@NWzAes@NCrypto@@6BICryptoSetPassword@@@ DD FLAT:??_R4CDecoder@NWzAes@NCrypto@@6BICryptoSetPassword@@@ ; NCrypto::NWzAes::CDecoder::`vftable'
	DD	FLAT:?QueryInterface@CBaseCoder@NWzAes@NCrypto@@W3AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CBaseCoder@NWzAes@NCrypto@@W3AGKXZ
	DD	FLAT:?Release@CBaseCoder@NWzAes@NCrypto@@W3AGKXZ
	DD	FLAT:?CryptoSetPassword@CBaseCoder@NWzAes@NCrypto@@UAGJPBEI@Z
CONST	ENDS
;	COMDAT ??_7CDecoder@NWzAes@NCrypto@@6BICompressFilter@@@
CONST	SEGMENT
??_7CDecoder@NWzAes@NCrypto@@6BICompressFilter@@@ DD FLAT:??_R4CDecoder@NWzAes@NCrypto@@6BICompressFilter@@@ ; NCrypto::NWzAes::CDecoder::`vftable'
	DD	FLAT:?QueryInterface@CBaseCoder@NWzAes@NCrypto@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CBaseCoder@NWzAes@NCrypto@@UAGKXZ
	DD	FLAT:?Release@CBaseCoder@NWzAes@NCrypto@@UAGKXZ
	DD	FLAT:?Init@CBaseCoder@NWzAes@NCrypto@@UAGJXZ
	DD	FLAT:?Filter@CDecoder@NWzAes@NCrypto@@UAGIPAEI@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CDecoder@NWzAes@NCrypto@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CDecoder@NWzAes@NCrypto@@QAE@XZ PROC			; NCrypto::NWzAes::CDecoder::CDecoder, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CBaseCoder@NWzAes@NCrypto@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CDecoder@NWzAes@NCrypto@@6BICompressFilter@@@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], OFFSET ??_7CDecoder@NWzAes@NCrypto@@6BICryptoSetPassword@@@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CDecoder@NWzAes@NCrypto@@QAE@XZ ENDP			; NCrypto::NWzAes::CDecoder::CDecoder
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CBaseCoder@NWzAes@NCrypto@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
tv86 = -8						; size = 4
tv75 = -4						; size = 4
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CBaseCoder@NWzAes@NCrypto@@UAGJABU_GUID@@PAPAX@Z PROC ; NCrypto::NWzAes::CBaseCoder::QueryInterface, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\crypto\wzaes.h
; Line 92
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@QueryInter@5
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN7@QueryInter@5
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	mov	DWORD PTR tv75[ebp], edx
	jmp	SHORT $LN8@QueryInter@5
$LN7@QueryInter@5:
	mov	DWORD PTR tv75[ebp], 0
$LN8@QueryInter@5:
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	ecx, DWORD PTR tv75[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN3@QueryInter@5
$LN4@QueryInter@5:
	push	OFFSET _IID_ICryptoSetPassword
	mov	edx, DWORD PTR _iid$[ebp]
	push	edx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@5
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN9@QueryInter@5
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR tv86[ebp], eax
	jmp	SHORT $LN10@QueryInter@5
$LN9@QueryInter@5:
	mov	DWORD PTR tv86[ebp], 0
$LN10@QueryInter@5:
	mov	ecx, DWORD PTR _outObject$[ebp]
	mov	edx, DWORD PTR tv86[ebp]
	mov	DWORD PTR [ecx], edx
	jmp	SHORT $LN3@QueryInter@5
$LN2@QueryInter@5:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN5@QueryInter@5
$LN3@QueryInter@5:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx
	xor	eax, eax
$LN5@QueryInter@5:
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CBaseCoder@NWzAes@NCrypto@@UAGJABU_GUID@@PAPAX@Z ENDP ; NCrypto::NWzAes::CBaseCoder::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CBaseCoder@NWzAes@NCrypto@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CBaseCoder@NWzAes@NCrypto@@UAGKXZ PROC		; NCrypto::NWzAes::CBaseCoder::AddRef, COMDAT
; Line 92
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CBaseCoder@NWzAes@NCrypto@@UAGKXZ ENDP		; NCrypto::NWzAes::CBaseCoder::AddRef
_TEXT	ENDS
PUBLIC	??_GCBaseCoder@NWzAes@NCrypto@@QAEPAXI@Z	; NCrypto::NWzAes::CBaseCoder::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CBaseCoder@NWzAes@NCrypto@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T76892 = -8						; size = 4
$T76891 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CBaseCoder@NWzAes@NCrypto@@UAGKXZ PROC		; NCrypto::NWzAes::CBaseCoder::Release, COMDAT
; Line 92
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+8], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	jmp	SHORT $LN2@Release@5
$LN1@Release@5:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T76892[ebp], edx
	mov	eax, DWORD PTR $T76892[ebp]
	mov	DWORD PTR $T76891[ebp], eax
	cmp	DWORD PTR $T76891[ebp], 0
	je	SHORT $LN4@Release@5
	push	1
	mov	ecx, DWORD PTR $T76891[ebp]
	call	??_GCBaseCoder@NWzAes@NCrypto@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release@5
$LN4@Release@5:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release@5:
	xor	eax, eax
$LN2@Release@5:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CBaseCoder@NWzAes@NCrypto@@UAGKXZ ENDP		; NCrypto::NWzAes::CBaseCoder::Release
_TEXT	ENDS
PUBLIC	??1CBaseCoder@NWzAes@NCrypto@@QAE@XZ		; NCrypto::NWzAes::CBaseCoder::~CBaseCoder
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCBaseCoder@NWzAes@NCrypto@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCBaseCoder@NWzAes@NCrypto@@QAEPAXI@Z PROC		; NCrypto::NWzAes::CBaseCoder::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CBaseCoder@NWzAes@NCrypto@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@5
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@5:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCBaseCoder@NWzAes@NCrypto@@QAEPAXI@Z ENDP		; NCrypto::NWzAes::CBaseCoder::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1CKeyInfo@NWzAes@NCrypto@@QAE@XZ		; NCrypto::NWzAes::CKeyInfo::~CKeyInfo
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CBaseCoder@NWzAes@NCrypto@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CBaseCoder@NWzAes@NCrypto@@QAE@XZ PROC		; NCrypto::NWzAes::CBaseCoder::~CBaseCoder, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1CKeyInfo@NWzAes@NCrypto@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CBaseCoder@NWzAes@NCrypto@@QAE@XZ ENDP		; NCrypto::NWzAes::CBaseCoder::~CBaseCoder
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CKeyInfo@NWzAes@NCrypto@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CKeyInfo@NWzAes@NCrypto@@QAE@XZ PROC			; NCrypto::NWzAes::CKeyInfo::~CKeyInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CKeyInfo@NWzAes@NCrypto@@QAE@XZ ENDP			; NCrypto::NWzAes::CKeyInfo::~CKeyInfo
_TEXT	ENDS
PUBLIC	??_7CDecoder@NZipStrong@NCrypto@@6B@		; NCrypto::NZipStrong::CDecoder::`vftable'
PUBLIC	??_7CDecoder@NZipStrong@NCrypto@@6BICompressSetCoderProperties@@@ ; NCrypto::NZipStrong::CDecoder::`vftable'
PUBLIC	??_7CDecoder@NZipStrong@NCrypto@@6BICryptoProperties@@@ ; NCrypto::NZipStrong::CDecoder::`vftable'
PUBLIC	??_7CDecoder@NZipStrong@NCrypto@@6BICompressFilter@@@ ; NCrypto::NZipStrong::CDecoder::`vftable'
PUBLIC	??0CBaseCoder@NZipStrong@NCrypto@@QAE@XZ	; NCrypto::NZipStrong::CBaseCoder::CBaseCoder
PUBLIC	??_R4CDecoder@NZipStrong@NCrypto@@6BICompressFilter@@@ ; NCrypto::NZipStrong::CDecoder::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCDecoder@NZipStrong@NCrypto@@@8		; NCrypto::NZipStrong::CDecoder `RTTI Type Descriptor'
PUBLIC	??_R3CDecoder@NZipStrong@NCrypto@@8		; NCrypto::NZipStrong::CDecoder::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CDecoder@NZipStrong@NCrypto@@8		; NCrypto::NZipStrong::CDecoder::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CDecoder@NZipStrong@NCrypto@@8	; NCrypto::NZipStrong::CDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CBaseCoder@NZipStrong@NCrypto@@8	; NCrypto::NZipStrong::CBaseCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCBaseCoder@NZipStrong@NCrypto@@@8	; NCrypto::NZipStrong::CBaseCoder `RTTI Type Descriptor'
PUBLIC	??_R3CBaseCoder@NZipStrong@NCrypto@@8		; NCrypto::NZipStrong::CBaseCoder::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CBaseCoder@NZipStrong@NCrypto@@8		; NCrypto::NZipStrong::CBaseCoder::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CAesCbcDecoder@NCrypto@@8		; NCrypto::CAesCbcDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUCAesCbcDecoder@NCrypto@@@8		; NCrypto::CAesCbcDecoder `RTTI Type Descriptor'
PUBLIC	??_R3CAesCbcDecoder@NCrypto@@8			; NCrypto::CAesCbcDecoder::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CAesCbcDecoder@NCrypto@@8			; NCrypto::CAesCbcDecoder::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CAesCbcCoder@NCrypto@@8		; NCrypto::CAesCbcCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCAesCbcCoder@NCrypto@@@8		; NCrypto::CAesCbcCoder `RTTI Type Descriptor'
PUBLIC	??_R3CAesCbcCoder@NCrypto@@8			; NCrypto::CAesCbcCoder::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CAesCbcCoder@NCrypto@@8			; NCrypto::CAesCbcCoder::`RTTI Base Class Array'
PUBLIC	??_R13?0A@EA@ICryptoProperties@@8		; ICryptoProperties::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AUICryptoProperties@@@8			; ICryptoProperties `RTTI Type Descriptor'
PUBLIC	??_R3ICryptoProperties@@8			; ICryptoProperties::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ICryptoProperties@@8			; ICryptoProperties::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ICryptoProperties@@8		; ICryptoProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R17?0A@EA@ICompressSetCoderProperties@@8	; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	??_R0?AUICompressSetCoderProperties@@@8		; ICompressSetCoderProperties `RTTI Type Descriptor'
PUBLIC	??_R3ICompressSetCoderProperties@@8		; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ICompressSetCoderProperties@@8		; ICompressSetCoderProperties::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ICompressSetCoderProperties@@8	; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1BEM@?0A@EA@ICryptoSetPassword@@8		; ICryptoSetPassword::`RTTI Base Class Descriptor at (332,-1,0,64)'
PUBLIC	??_R1BEM@?0A@EC@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (332,-1,0,66)'
PUBLIC	?QueryInterface@CDecoder@NZipStrong@NCrypto@@UAGJABU_GUID@@PAPAX@Z ; NCrypto::NZipStrong::CDecoder::QueryInterface
PUBLIC	?AddRef@CDecoder@NZipStrong@NCrypto@@UAGKXZ	; NCrypto::NZipStrong::CDecoder::AddRef
PUBLIC	?Release@CDecoder@NZipStrong@NCrypto@@UAGKXZ	; NCrypto::NZipStrong::CDecoder::Release
PUBLIC	??_R4CDecoder@NZipStrong@NCrypto@@6BICryptoProperties@@@ ; NCrypto::NZipStrong::CDecoder::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@CDecoder@NZipStrong@NCrypto@@W3AGJABU_GUID@@PAPAX@Z ; [thunk]:NCrypto::NZipStrong::CDecoder::QueryInterface`adjustor{4}'
PUBLIC	?AddRef@CDecoder@NZipStrong@NCrypto@@W3AGKXZ	; [thunk]:NCrypto::NZipStrong::CDecoder::AddRef`adjustor{4}'
PUBLIC	?Release@CDecoder@NZipStrong@NCrypto@@W3AGKXZ	; [thunk]:NCrypto::NZipStrong::CDecoder::Release`adjustor{4}'
PUBLIC	??_R4CDecoder@NZipStrong@NCrypto@@6BICompressSetCoderProperties@@@ ; NCrypto::NZipStrong::CDecoder::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@CDecoder@NZipStrong@NCrypto@@W7AGJABU_GUID@@PAPAX@Z ; [thunk]:NCrypto::NZipStrong::CDecoder::QueryInterface`adjustor{8}'
PUBLIC	?AddRef@CDecoder@NZipStrong@NCrypto@@W7AGKXZ	; [thunk]:NCrypto::NZipStrong::CDecoder::AddRef`adjustor{8}'
PUBLIC	?Release@CDecoder@NZipStrong@NCrypto@@W7AGKXZ	; [thunk]:NCrypto::NZipStrong::CDecoder::Release`adjustor{8}'
PUBLIC	??_R4CDecoder@NZipStrong@NCrypto@@6B@		; NCrypto::NZipStrong::CDecoder::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@CDecoder@NZipStrong@NCrypto@@WBEM@AGJABU_GUID@@PAPAX@Z ; [thunk]:NCrypto::NZipStrong::CDecoder::QueryInterface`adjustor{332}'
PUBLIC	?AddRef@CDecoder@NZipStrong@NCrypto@@WBEM@AGKXZ	; [thunk]:NCrypto::NZipStrong::CDecoder::AddRef`adjustor{332}'
PUBLIC	?Release@CDecoder@NZipStrong@NCrypto@@WBEM@AGKXZ ; [thunk]:NCrypto::NZipStrong::CDecoder::Release`adjustor{332}'
EXTRN	?Init@CBaseCoder@NZipStrong@NCrypto@@UAGJXZ:PROC ; NCrypto::NZipStrong::CBaseCoder::Init
EXTRN	?Filter@CAesCbcCoder@NCrypto@@UAGIPAEI@Z:PROC	; NCrypto::CAesCbcCoder::Filter
EXTRN	?SetKey@CAesCbcCoder@NCrypto@@UAGJPBEI@Z:PROC	; NCrypto::CAesCbcCoder::SetKey
EXTRN	?SetInitVector@CAesCbcCoder@NCrypto@@UAGJPBEI@Z:PROC ; NCrypto::CAesCbcCoder::SetInitVector
EXTRN	?SetCoderProperties@CAesCbcCoder@NCrypto@@UAGJPBKPBUtagPROPVARIANT@@I@Z:PROC ; NCrypto::CAesCbcCoder::SetCoderProperties
EXTRN	?CryptoSetPassword@CBaseCoder@NZipStrong@NCrypto@@UAGJPBEI@Z:PROC ; NCrypto::NZipStrong::CBaseCoder::CryptoSetPassword
;	COMDAT ??_R4CDecoder@NZipStrong@NCrypto@@6B@
rdata$r	SEGMENT
??_R4CDecoder@NZipStrong@NCrypto@@6B@ DD 00H		; NCrypto::NZipStrong::CDecoder::`RTTI Complete Object Locator'
	DD	014cH
	DD	00H
	DD	FLAT:??_R0?AVCDecoder@NZipStrong@NCrypto@@@8
	DD	FLAT:??_R3CDecoder@NZipStrong@NCrypto@@8
rdata$r	ENDS
;	COMDAT ??_R4CDecoder@NZipStrong@NCrypto@@6BICompressSetCoderProperties@@@
rdata$r	SEGMENT
??_R4CDecoder@NZipStrong@NCrypto@@6BICompressSetCoderProperties@@@ DD 00H ; NCrypto::NZipStrong::CDecoder::`RTTI Complete Object Locator'
	DD	08H
	DD	00H
	DD	FLAT:??_R0?AVCDecoder@NZipStrong@NCrypto@@@8
	DD	FLAT:??_R3CDecoder@NZipStrong@NCrypto@@8
rdata$r	ENDS
;	COMDAT ??_R4CDecoder@NZipStrong@NCrypto@@6BICryptoProperties@@@
rdata$r	SEGMENT
??_R4CDecoder@NZipStrong@NCrypto@@6BICryptoProperties@@@ DD 00H ; NCrypto::NZipStrong::CDecoder::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVCDecoder@NZipStrong@NCrypto@@@8
	DD	FLAT:??_R3CDecoder@NZipStrong@NCrypto@@8
rdata$r	ENDS
;	COMDAT ??_R1BEM@?0A@EC@IUnknown@@8
rdata$r	SEGMENT
??_R1BEM@?0A@EC@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8 ; IUnknown::`RTTI Base Class Descriptor at (332,-1,0,66)'
	DD	00H
	DD	014cH
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R1BEM@?0A@EA@ICryptoSetPassword@@8
rdata$r	SEGMENT
??_R1BEM@?0A@EA@ICryptoSetPassword@@8 DD FLAT:??_R0?AUICryptoSetPassword@@@8 ; ICryptoSetPassword::`RTTI Base Class Descriptor at (332,-1,0,64)'
	DD	01H
	DD	014cH
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICryptoSetPassword@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ICompressSetCoderProperties@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ICompressSetCoderProperties@@8 DD FLAT:??_R0?AUICompressSetCoderProperties@@@8 ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICompressSetCoderProperties@@8
rdata$r	ENDS
;	COMDAT ??_R2ICompressSetCoderProperties@@8
rdata$r	SEGMENT
??_R2ICompressSetCoderProperties@@8 DD FLAT:??_R1A@?0A@EA@ICompressSetCoderProperties@@8 ; ICompressSetCoderProperties::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ICompressSetCoderProperties@@8
rdata$r	SEGMENT
??_R3ICompressSetCoderProperties@@8 DD 00H		; ICompressSetCoderProperties::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ICompressSetCoderProperties@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUICompressSetCoderProperties@@@8
_DATA	SEGMENT
??_R0?AUICompressSetCoderProperties@@@8 DD FLAT:??_7type_info@@6B@ ; ICompressSetCoderProperties `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUICompressSetCoderProperties@@', 00H
_DATA	ENDS
;	COMDAT ??_R17?0A@EA@ICompressSetCoderProperties@@8
rdata$r	SEGMENT
??_R17?0A@EA@ICompressSetCoderProperties@@8 DD FLAT:??_R0?AUICompressSetCoderProperties@@@8 ; ICompressSetCoderProperties::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	01H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICompressSetCoderProperties@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ICryptoProperties@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ICryptoProperties@@8 DD FLAT:??_R0?AUICryptoProperties@@@8 ; ICryptoProperties::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICryptoProperties@@8
rdata$r	ENDS
;	COMDAT ??_R2ICryptoProperties@@8
rdata$r	SEGMENT
??_R2ICryptoProperties@@8 DD FLAT:??_R1A@?0A@EA@ICryptoProperties@@8 ; ICryptoProperties::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ICryptoProperties@@8
rdata$r	SEGMENT
??_R3ICryptoProperties@@8 DD 00H			; ICryptoProperties::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ICryptoProperties@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUICryptoProperties@@@8
_DATA	SEGMENT
??_R0?AUICryptoProperties@@@8 DD FLAT:??_7type_info@@6B@ ; ICryptoProperties `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUICryptoProperties@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@ICryptoProperties@@8
rdata$r	SEGMENT
??_R13?0A@EA@ICryptoProperties@@8 DD FLAT:??_R0?AUICryptoProperties@@@8 ; ICryptoProperties::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	01H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICryptoProperties@@8
rdata$r	ENDS
;	COMDAT ??_R2CAesCbcCoder@NCrypto@@8
rdata$r	SEGMENT
??_R2CAesCbcCoder@NCrypto@@8 DD FLAT:??_R1A@?0A@EA@CAesCbcCoder@NCrypto@@8 ; NCrypto::CAesCbcCoder::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ICompressFilter@@8
	DD	FLAT:??_R1A@?0A@EC@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@ICryptoProperties@@8
	DD	FLAT:??_R13?0A@EC@IUnknown@@8
	DD	FLAT:??_R17?0A@EA@ICompressSetCoderProperties@@8
	DD	FLAT:??_R17?0A@EC@IUnknown@@8
	DD	FLAT:??_R1M@?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CAesCbcCoder@NCrypto@@8
rdata$r	SEGMENT
??_R3CAesCbcCoder@NCrypto@@8 DD 00H			; NCrypto::CAesCbcCoder::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	08H
	DD	FLAT:??_R2CAesCbcCoder@NCrypto@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCAesCbcCoder@NCrypto@@@8
_DATA	SEGMENT
??_R0?AVCAesCbcCoder@NCrypto@@@8 DD FLAT:??_7type_info@@6B@ ; NCrypto::CAesCbcCoder `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCAesCbcCoder@NCrypto@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@CAesCbcCoder@NCrypto@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CAesCbcCoder@NCrypto@@8 DD FLAT:??_R0?AVCAesCbcCoder@NCrypto@@@8 ; NCrypto::CAesCbcCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	07H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CAesCbcCoder@NCrypto@@8
rdata$r	ENDS
;	COMDAT ??_R2CAesCbcDecoder@NCrypto@@8
rdata$r	SEGMENT
??_R2CAesCbcDecoder@NCrypto@@8 DD FLAT:??_R1A@?0A@EA@CAesCbcDecoder@NCrypto@@8 ; NCrypto::CAesCbcDecoder::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CAesCbcCoder@NCrypto@@8
	DD	FLAT:??_R1A@?0A@EA@ICompressFilter@@8
	DD	FLAT:??_R1A@?0A@EC@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@ICryptoProperties@@8
	DD	FLAT:??_R13?0A@EC@IUnknown@@8
	DD	FLAT:??_R17?0A@EA@ICompressSetCoderProperties@@8
	DD	FLAT:??_R17?0A@EC@IUnknown@@8
	DD	FLAT:??_R1M@?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CAesCbcDecoder@NCrypto@@8
rdata$r	SEGMENT
??_R3CAesCbcDecoder@NCrypto@@8 DD 00H			; NCrypto::CAesCbcDecoder::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	09H
	DD	FLAT:??_R2CAesCbcDecoder@NCrypto@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUCAesCbcDecoder@NCrypto@@@8
_DATA	SEGMENT
??_R0?AUCAesCbcDecoder@NCrypto@@@8 DD FLAT:??_7type_info@@6B@ ; NCrypto::CAesCbcDecoder `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUCAesCbcDecoder@NCrypto@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@CAesCbcDecoder@NCrypto@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CAesCbcDecoder@NCrypto@@8 DD FLAT:??_R0?AUCAesCbcDecoder@NCrypto@@@8 ; NCrypto::CAesCbcDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	08H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CAesCbcDecoder@NCrypto@@8
rdata$r	ENDS
;	COMDAT ??_R2CBaseCoder@NZipStrong@NCrypto@@8
rdata$r	SEGMENT
??_R2CBaseCoder@NZipStrong@NCrypto@@8 DD FLAT:??_R1A@?0A@EA@CBaseCoder@NZipStrong@NCrypto@@8 ; NCrypto::NZipStrong::CBaseCoder::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CAesCbcDecoder@NCrypto@@8
	DD	FLAT:??_R1A@?0A@EA@CAesCbcCoder@NCrypto@@8
	DD	FLAT:??_R1A@?0A@EA@ICompressFilter@@8
	DD	FLAT:??_R1A@?0A@EC@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@ICryptoProperties@@8
	DD	FLAT:??_R13?0A@EC@IUnknown@@8
	DD	FLAT:??_R17?0A@EA@ICompressSetCoderProperties@@8
	DD	FLAT:??_R17?0A@EC@IUnknown@@8
	DD	FLAT:??_R1M@?0A@EA@CMyUnknownImp@@8
	DD	FLAT:??_R1BEM@?0A@EA@ICryptoSetPassword@@8
	DD	FLAT:??_R1BEM@?0A@EC@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3CBaseCoder@NZipStrong@NCrypto@@8
rdata$r	SEGMENT
??_R3CBaseCoder@NZipStrong@NCrypto@@8 DD 00H		; NCrypto::NZipStrong::CBaseCoder::`RTTI Class Hierarchy Descriptor'
	DD	05H
	DD	0cH
	DD	FLAT:??_R2CBaseCoder@NZipStrong@NCrypto@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCBaseCoder@NZipStrong@NCrypto@@@8
_DATA	SEGMENT
??_R0?AVCBaseCoder@NZipStrong@NCrypto@@@8 DD FLAT:??_7type_info@@6B@ ; NCrypto::NZipStrong::CBaseCoder `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCBaseCoder@NZipStrong@NCrypto@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@CBaseCoder@NZipStrong@NCrypto@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CBaseCoder@NZipStrong@NCrypto@@8 DD FLAT:??_R0?AVCBaseCoder@NZipStrong@NCrypto@@@8 ; NCrypto::NZipStrong::CBaseCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	0bH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CBaseCoder@NZipStrong@NCrypto@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CDecoder@NZipStrong@NCrypto@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CDecoder@NZipStrong@NCrypto@@8 DD FLAT:??_R0?AVCDecoder@NZipStrong@NCrypto@@@8 ; NCrypto::NZipStrong::CDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	0cH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CDecoder@NZipStrong@NCrypto@@8
rdata$r	ENDS
;	COMDAT ??_R2CDecoder@NZipStrong@NCrypto@@8
rdata$r	SEGMENT
??_R2CDecoder@NZipStrong@NCrypto@@8 DD FLAT:??_R1A@?0A@EA@CDecoder@NZipStrong@NCrypto@@8 ; NCrypto::NZipStrong::CDecoder::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CBaseCoder@NZipStrong@NCrypto@@8
	DD	FLAT:??_R1A@?0A@EA@CAesCbcDecoder@NCrypto@@8
	DD	FLAT:??_R1A@?0A@EA@CAesCbcCoder@NCrypto@@8
	DD	FLAT:??_R1A@?0A@EA@ICompressFilter@@8
	DD	FLAT:??_R1A@?0A@EC@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@ICryptoProperties@@8
	DD	FLAT:??_R13?0A@EC@IUnknown@@8
	DD	FLAT:??_R17?0A@EA@ICompressSetCoderProperties@@8
	DD	FLAT:??_R17?0A@EC@IUnknown@@8
	DD	FLAT:??_R1M@?0A@EA@CMyUnknownImp@@8
	DD	FLAT:??_R1BEM@?0A@EA@ICryptoSetPassword@@8
	DD	FLAT:??_R1BEM@?0A@EC@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3CDecoder@NZipStrong@NCrypto@@8
rdata$r	SEGMENT
??_R3CDecoder@NZipStrong@NCrypto@@8 DD 00H		; NCrypto::NZipStrong::CDecoder::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	0dH
	DD	FLAT:??_R2CDecoder@NZipStrong@NCrypto@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCDecoder@NZipStrong@NCrypto@@@8
_DATA	SEGMENT
??_R0?AVCDecoder@NZipStrong@NCrypto@@@8 DD FLAT:??_7type_info@@6B@ ; NCrypto::NZipStrong::CDecoder `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCDecoder@NZipStrong@NCrypto@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CDecoder@NZipStrong@NCrypto@@6BICompressFilter@@@
rdata$r	SEGMENT
??_R4CDecoder@NZipStrong@NCrypto@@6BICompressFilter@@@ DD 00H ; NCrypto::NZipStrong::CDecoder::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCDecoder@NZipStrong@NCrypto@@@8
	DD	FLAT:??_R3CDecoder@NZipStrong@NCrypto@@8
rdata$r	ENDS
;	COMDAT ??_7CDecoder@NZipStrong@NCrypto@@6B@
CONST	SEGMENT
??_7CDecoder@NZipStrong@NCrypto@@6B@ DD FLAT:??_R4CDecoder@NZipStrong@NCrypto@@6B@ ; NCrypto::NZipStrong::CDecoder::`vftable'
	DD	FLAT:?QueryInterface@CDecoder@NZipStrong@NCrypto@@WBEM@AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CDecoder@NZipStrong@NCrypto@@WBEM@AGKXZ
	DD	FLAT:?Release@CDecoder@NZipStrong@NCrypto@@WBEM@AGKXZ
	DD	FLAT:?CryptoSetPassword@CBaseCoder@NZipStrong@NCrypto@@UAGJPBEI@Z
CONST	ENDS
;	COMDAT ??_7CDecoder@NZipStrong@NCrypto@@6BICompressSetCoderProperties@@@
CONST	SEGMENT
??_7CDecoder@NZipStrong@NCrypto@@6BICompressSetCoderProperties@@@ DD FLAT:??_R4CDecoder@NZipStrong@NCrypto@@6BICompressSetCoderProperties@@@ ; NCrypto::NZipStrong::CDecoder::`vftable'
	DD	FLAT:?QueryInterface@CDecoder@NZipStrong@NCrypto@@W7AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CDecoder@NZipStrong@NCrypto@@W7AGKXZ
	DD	FLAT:?Release@CDecoder@NZipStrong@NCrypto@@W7AGKXZ
	DD	FLAT:?SetCoderProperties@CAesCbcCoder@NCrypto@@UAGJPBKPBUtagPROPVARIANT@@I@Z
CONST	ENDS
;	COMDAT ??_7CDecoder@NZipStrong@NCrypto@@6BICryptoProperties@@@
CONST	SEGMENT
??_7CDecoder@NZipStrong@NCrypto@@6BICryptoProperties@@@ DD FLAT:??_R4CDecoder@NZipStrong@NCrypto@@6BICryptoProperties@@@ ; NCrypto::NZipStrong::CDecoder::`vftable'
	DD	FLAT:?QueryInterface@CDecoder@NZipStrong@NCrypto@@W3AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CDecoder@NZipStrong@NCrypto@@W3AGKXZ
	DD	FLAT:?Release@CDecoder@NZipStrong@NCrypto@@W3AGKXZ
	DD	FLAT:?SetKey@CAesCbcCoder@NCrypto@@UAGJPBEI@Z
	DD	FLAT:?SetInitVector@CAesCbcCoder@NCrypto@@UAGJPBEI@Z
CONST	ENDS
;	COMDAT ??_7CDecoder@NZipStrong@NCrypto@@6BICompressFilter@@@
CONST	SEGMENT
??_7CDecoder@NZipStrong@NCrypto@@6BICompressFilter@@@ DD FLAT:??_R4CDecoder@NZipStrong@NCrypto@@6BICompressFilter@@@ ; NCrypto::NZipStrong::CDecoder::`vftable'
	DD	FLAT:?QueryInterface@CDecoder@NZipStrong@NCrypto@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CDecoder@NZipStrong@NCrypto@@UAGKXZ
	DD	FLAT:?Release@CDecoder@NZipStrong@NCrypto@@UAGKXZ
	DD	FLAT:?Init@CBaseCoder@NZipStrong@NCrypto@@UAGJXZ
	DD	FLAT:?Filter@CAesCbcCoder@NCrypto@@UAGIPAEI@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CDecoder@NZipStrong@NCrypto@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CDecoder@NZipStrong@NCrypto@@QAE@XZ PROC		; NCrypto::NZipStrong::CDecoder::CDecoder, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CBaseCoder@NZipStrong@NCrypto@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CDecoder@NZipStrong@NCrypto@@6BICompressFilter@@@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], OFFSET ??_7CDecoder@NZipStrong@NCrypto@@6BICryptoProperties@@@
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], OFFSET ??_7CDecoder@NZipStrong@NCrypto@@6BICompressSetCoderProperties@@@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+332], OFFSET ??_7CDecoder@NZipStrong@NCrypto@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CDecoder@NZipStrong@NCrypto@@QAE@XZ ENDP		; NCrypto::NZipStrong::CDecoder::CDecoder
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CDecoder@NZipStrong@NCrypto@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
tv86 = -8						; size = 4
tv75 = -4						; size = 4
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CDecoder@NZipStrong@NCrypto@@UAGJABU_GUID@@PAPAX@Z PROC ; NCrypto::NZipStrong::CDecoder::QueryInterface, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\crypto\zipstrong.h
; Line 51
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@QueryInter@6
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN7@QueryInter@6
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 332				; 0000014cH
	mov	DWORD PTR tv75[ebp], edx
	jmp	SHORT $LN8@QueryInter@6
$LN7@QueryInter@6:
	mov	DWORD PTR tv75[ebp], 0
$LN8@QueryInter@6:
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	ecx, DWORD PTR tv75[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN3@QueryInter@6
$LN4@QueryInter@6:
	push	OFFSET _IID_ICryptoSetPassword
	mov	edx, DWORD PTR _iid$[ebp]
	push	edx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@6
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN9@QueryInter@6
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 332				; 0000014cH
	mov	DWORD PTR tv86[ebp], eax
	jmp	SHORT $LN10@QueryInter@6
$LN9@QueryInter@6:
	mov	DWORD PTR tv86[ebp], 0
$LN10@QueryInter@6:
	mov	ecx, DWORD PTR _outObject$[ebp]
	mov	edx, DWORD PTR tv86[ebp]
	mov	DWORD PTR [ecx], edx
	jmp	SHORT $LN3@QueryInter@6
$LN2@QueryInter@6:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN5@QueryInter@6
$LN3@QueryInter@6:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], ecx
	xor	eax, eax
$LN5@QueryInter@6:
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CDecoder@NZipStrong@NCrypto@@UAGJABU_GUID@@PAPAX@Z ENDP ; NCrypto::NZipStrong::CDecoder::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CDecoder@NZipStrong@NCrypto@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CDecoder@NZipStrong@NCrypto@@UAGKXZ PROC	; NCrypto::NZipStrong::CDecoder::AddRef, COMDAT
; Line 51
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+12], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CDecoder@NZipStrong@NCrypto@@UAGKXZ ENDP	; NCrypto::NZipStrong::CDecoder::AddRef
_TEXT	ENDS
PUBLIC	??_GCDecoder@NZipStrong@NCrypto@@QAEPAXI@Z	; NCrypto::NZipStrong::CDecoder::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CDecoder@NZipStrong@NCrypto@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T76917 = -8						; size = 4
$T76916 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CDecoder@NZipStrong@NCrypto@@UAGKXZ PROC	; NCrypto::NZipStrong::CDecoder::Release, COMDAT
; Line 51
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+12], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	jmp	SHORT $LN2@Release@6
$LN1@Release@6:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T76917[ebp], edx
	mov	eax, DWORD PTR $T76917[ebp]
	mov	DWORD PTR $T76916[ebp], eax
	cmp	DWORD PTR $T76916[ebp], 0
	je	SHORT $LN4@Release@6
	push	1
	mov	ecx, DWORD PTR $T76916[ebp]
	call	??_GCDecoder@NZipStrong@NCrypto@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release@6
$LN4@Release@6:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release@6:
	xor	eax, eax
$LN2@Release@6:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CDecoder@NZipStrong@NCrypto@@UAGKXZ ENDP	; NCrypto::NZipStrong::CDecoder::Release
_TEXT	ENDS
PUBLIC	??1CDecoder@NZipStrong@NCrypto@@QAE@XZ		; NCrypto::NZipStrong::CDecoder::~CDecoder
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCDecoder@NZipStrong@NCrypto@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCDecoder@NZipStrong@NCrypto@@QAEPAXI@Z PROC		; NCrypto::NZipStrong::CDecoder::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CDecoder@NZipStrong@NCrypto@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@6
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@6:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCDecoder@NZipStrong@NCrypto@@QAEPAXI@Z ENDP		; NCrypto::NZipStrong::CDecoder::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1CBaseCoder@NZipStrong@NCrypto@@QAE@XZ	; NCrypto::NZipStrong::CBaseCoder::~CBaseCoder
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CDecoder@NZipStrong@NCrypto@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CDecoder@NZipStrong@NCrypto@@QAE@XZ PROC		; NCrypto::NZipStrong::CDecoder::~CDecoder, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CBaseCoder@NZipStrong@NCrypto@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CDecoder@NZipStrong@NCrypto@@QAE@XZ ENDP		; NCrypto::NZipStrong::CDecoder::~CDecoder
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CBaseCoder@NZipStrong@NCrypto@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CBaseCoder@NZipStrong@NCrypto@@QAE@XZ PROC		; NCrypto::NZipStrong::CBaseCoder::~CBaseCoder, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 372				; 00000174H
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CBaseCoder@NZipStrong@NCrypto@@QAE@XZ ENDP		; NCrypto::NZipStrong::CBaseCoder::~CBaseCoder
_TEXT	ENDS
PUBLIC	??_7CDecoder@NZip@NCrypto@@6BICryptoSetPassword@@@ ; NCrypto::NZip::CDecoder::`vftable'
PUBLIC	??_7CDecoder@NZip@NCrypto@@6BICompressFilter@@@	; NCrypto::NZip::CDecoder::`vftable'
PUBLIC	??0CCipher@NZip@NCrypto@@QAE@XZ			; NCrypto::NZip::CCipher::CCipher
PUBLIC	??_R4CDecoder@NZip@NCrypto@@6BICompressFilter@@@ ; NCrypto::NZip::CDecoder::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCDecoder@NZip@NCrypto@@@8		; NCrypto::NZip::CDecoder `RTTI Type Descriptor'
PUBLIC	??_R3CDecoder@NZip@NCrypto@@8			; NCrypto::NZip::CDecoder::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CDecoder@NZip@NCrypto@@8			; NCrypto::NZip::CDecoder::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CDecoder@NZip@NCrypto@@8		; NCrypto::NZip::CDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CCipher@NZip@NCrypto@@8		; NCrypto::NZip::CCipher::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCCipher@NZip@NCrypto@@@8		; NCrypto::NZip::CCipher `RTTI Type Descriptor'
PUBLIC	??_R3CCipher@NZip@NCrypto@@8			; NCrypto::NZip::CCipher::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCipher@NZip@NCrypto@@8			; NCrypto::NZip::CCipher::`RTTI Base Class Array'
PUBLIC	?QueryInterface@CCipher@NZip@NCrypto@@UAGJABU_GUID@@PAPAX@Z ; NCrypto::NZip::CCipher::QueryInterface
PUBLIC	?AddRef@CCipher@NZip@NCrypto@@UAGKXZ		; NCrypto::NZip::CCipher::AddRef
PUBLIC	?Release@CCipher@NZip@NCrypto@@UAGKXZ		; NCrypto::NZip::CCipher::Release
PUBLIC	??_R4CDecoder@NZip@NCrypto@@6BICryptoSetPassword@@@ ; NCrypto::NZip::CDecoder::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@CCipher@NZip@NCrypto@@W3AGJABU_GUID@@PAPAX@Z ; [thunk]:NCrypto::NZip::CCipher::QueryInterface`adjustor{4}'
PUBLIC	?AddRef@CCipher@NZip@NCrypto@@W3AGKXZ		; [thunk]:NCrypto::NZip::CCipher::AddRef`adjustor{4}'
PUBLIC	?Release@CCipher@NZip@NCrypto@@W3AGKXZ		; [thunk]:NCrypto::NZip::CCipher::Release`adjustor{4}'
EXTRN	?Init@CCipher@NZip@NCrypto@@UAGJXZ:PROC		; NCrypto::NZip::CCipher::Init
EXTRN	?Filter@CDecoder@NZip@NCrypto@@UAGIPAEI@Z:PROC	; NCrypto::NZip::CDecoder::Filter
EXTRN	?CryptoSetPassword@CCipher@NZip@NCrypto@@UAGJPBEI@Z:PROC ; NCrypto::NZip::CCipher::CryptoSetPassword
;	COMDAT ??_R4CDecoder@NZip@NCrypto@@6BICryptoSetPassword@@@
rdata$r	SEGMENT
??_R4CDecoder@NZip@NCrypto@@6BICryptoSetPassword@@@ DD 00H ; NCrypto::NZip::CDecoder::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVCDecoder@NZip@NCrypto@@@8
	DD	FLAT:??_R3CDecoder@NZip@NCrypto@@8
rdata$r	ENDS
;	COMDAT ??_R2CCipher@NZip@NCrypto@@8
rdata$r	SEGMENT
??_R2CCipher@NZip@NCrypto@@8 DD FLAT:??_R1A@?0A@EA@CCipher@NZip@NCrypto@@8 ; NCrypto::NZip::CCipher::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ICompressFilter@@8
	DD	FLAT:??_R1A@?0A@EC@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@ICryptoSetPassword@@8
	DD	FLAT:??_R13?0A@EC@IUnknown@@8
	DD	FLAT:??_R17?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CCipher@NZip@NCrypto@@8
rdata$r	SEGMENT
??_R3CCipher@NZip@NCrypto@@8 DD 00H			; NCrypto::NZip::CCipher::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	06H
	DD	FLAT:??_R2CCipher@NZip@NCrypto@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCipher@NZip@NCrypto@@@8
_DATA	SEGMENT
??_R0?AVCCipher@NZip@NCrypto@@@8 DD FLAT:??_7type_info@@6B@ ; NCrypto::NZip::CCipher `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCipher@NZip@NCrypto@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@CCipher@NZip@NCrypto@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CCipher@NZip@NCrypto@@8 DD FLAT:??_R0?AVCCipher@NZip@NCrypto@@@8 ; NCrypto::NZip::CCipher::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	05H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCipher@NZip@NCrypto@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CDecoder@NZip@NCrypto@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CDecoder@NZip@NCrypto@@8 DD FLAT:??_R0?AVCDecoder@NZip@NCrypto@@@8 ; NCrypto::NZip::CDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	06H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CDecoder@NZip@NCrypto@@8
rdata$r	ENDS
;	COMDAT ??_R2CDecoder@NZip@NCrypto@@8
rdata$r	SEGMENT
??_R2CDecoder@NZip@NCrypto@@8 DD FLAT:??_R1A@?0A@EA@CDecoder@NZip@NCrypto@@8 ; NCrypto::NZip::CDecoder::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CCipher@NZip@NCrypto@@8
	DD	FLAT:??_R1A@?0A@EA@ICompressFilter@@8
	DD	FLAT:??_R1A@?0A@EC@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@ICryptoSetPassword@@8
	DD	FLAT:??_R13?0A@EC@IUnknown@@8
	DD	FLAT:??_R17?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CDecoder@NZip@NCrypto@@8
rdata$r	SEGMENT
??_R3CDecoder@NZip@NCrypto@@8 DD 00H			; NCrypto::NZip::CDecoder::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	07H
	DD	FLAT:??_R2CDecoder@NZip@NCrypto@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCDecoder@NZip@NCrypto@@@8
_DATA	SEGMENT
??_R0?AVCDecoder@NZip@NCrypto@@@8 DD FLAT:??_7type_info@@6B@ ; NCrypto::NZip::CDecoder `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCDecoder@NZip@NCrypto@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CDecoder@NZip@NCrypto@@6BICompressFilter@@@
rdata$r	SEGMENT
??_R4CDecoder@NZip@NCrypto@@6BICompressFilter@@@ DD 00H	; NCrypto::NZip::CDecoder::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCDecoder@NZip@NCrypto@@@8
	DD	FLAT:??_R3CDecoder@NZip@NCrypto@@8
rdata$r	ENDS
;	COMDAT ??_7CDecoder@NZip@NCrypto@@6BICryptoSetPassword@@@
CONST	SEGMENT
??_7CDecoder@NZip@NCrypto@@6BICryptoSetPassword@@@ DD FLAT:??_R4CDecoder@NZip@NCrypto@@6BICryptoSetPassword@@@ ; NCrypto::NZip::CDecoder::`vftable'
	DD	FLAT:?QueryInterface@CCipher@NZip@NCrypto@@W3AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CCipher@NZip@NCrypto@@W3AGKXZ
	DD	FLAT:?Release@CCipher@NZip@NCrypto@@W3AGKXZ
	DD	FLAT:?CryptoSetPassword@CCipher@NZip@NCrypto@@UAGJPBEI@Z
CONST	ENDS
;	COMDAT ??_7CDecoder@NZip@NCrypto@@6BICompressFilter@@@
CONST	SEGMENT
??_7CDecoder@NZip@NCrypto@@6BICompressFilter@@@ DD FLAT:??_R4CDecoder@NZip@NCrypto@@6BICompressFilter@@@ ; NCrypto::NZip::CDecoder::`vftable'
	DD	FLAT:?QueryInterface@CCipher@NZip@NCrypto@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CCipher@NZip@NCrypto@@UAGKXZ
	DD	FLAT:?Release@CCipher@NZip@NCrypto@@UAGKXZ
	DD	FLAT:?Init@CCipher@NZip@NCrypto@@UAGJXZ
	DD	FLAT:?Filter@CDecoder@NZip@NCrypto@@UAGIPAEI@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CDecoder@NZip@NCrypto@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CDecoder@NZip@NCrypto@@QAE@XZ PROC			; NCrypto::NZip::CDecoder::CDecoder, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CCipher@NZip@NCrypto@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CDecoder@NZip@NCrypto@@6BICompressFilter@@@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], OFFSET ??_7CDecoder@NZip@NCrypto@@6BICryptoSetPassword@@@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CDecoder@NZip@NCrypto@@QAE@XZ ENDP			; NCrypto::NZip::CDecoder::CDecoder
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CCipher@NZip@NCrypto@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
tv86 = -8						; size = 4
tv75 = -4						; size = 4
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CCipher@NZip@NCrypto@@UAGJABU_GUID@@PAPAX@Z PROC ; NCrypto::NZip::CCipher::QueryInterface, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\crypto\zipcrypto.h
; Line 50
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@QueryInter@7
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN7@QueryInter@7
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	mov	DWORD PTR tv75[ebp], edx
	jmp	SHORT $LN8@QueryInter@7
$LN7@QueryInter@7:
	mov	DWORD PTR tv75[ebp], 0
$LN8@QueryInter@7:
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	ecx, DWORD PTR tv75[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN3@QueryInter@7
$LN4@QueryInter@7:
	push	OFFSET _IID_ICryptoSetPassword
	mov	edx, DWORD PTR _iid$[ebp]
	push	edx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@7
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN9@QueryInter@7
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR tv86[ebp], eax
	jmp	SHORT $LN10@QueryInter@7
$LN9@QueryInter@7:
	mov	DWORD PTR tv86[ebp], 0
$LN10@QueryInter@7:
	mov	ecx, DWORD PTR _outObject$[ebp]
	mov	edx, DWORD PTR tv86[ebp]
	mov	DWORD PTR [ecx], edx
	jmp	SHORT $LN3@QueryInter@7
$LN2@QueryInter@7:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN5@QueryInter@7
$LN3@QueryInter@7:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx
	xor	eax, eax
$LN5@QueryInter@7:
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CCipher@NZip@NCrypto@@UAGJABU_GUID@@PAPAX@Z ENDP ; NCrypto::NZip::CCipher::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CCipher@NZip@NCrypto@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CCipher@NZip@NCrypto@@UAGKXZ PROC		; NCrypto::NZip::CCipher::AddRef, COMDAT
; Line 50
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CCipher@NZip@NCrypto@@UAGKXZ ENDP		; NCrypto::NZip::CCipher::AddRef
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CCipher@NZip@NCrypto@@UAGKXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
$T76940 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CCipher@NZip@NCrypto@@UAGKXZ PROC		; NCrypto::NZip::CCipher::Release, COMDAT
; Line 50
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+8], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	jmp	SHORT $LN2@Release@7
$LN1@Release@7:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T76940[ebp], edx
	mov	eax, DWORD PTR $T76940[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	xor	eax, eax
$LN2@Release@7:
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CCipher@NZip@NCrypto@@UAGKXZ ENDP		; NCrypto::NZip::CCipher::Release
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CMethodItem@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMethodItem@NZip@NArchive@@QAE@XZ PROC		; NArchive::NZip::CMethodItem::CMethodItem, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CMethodItem@NZip@NArchive@@QAE@XZ ENDP		; NArchive::NZip::CMethodItem::CMethodItem
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CMethodItem@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CMethodItem@NZip@NArchive@@QAE@XZ PROC		; NArchive::NZip::CMethodItem::~CMethodItem, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CMethodItem@NZip@NArchive@@QAE@XZ ENDP		; NArchive::NZip::CMethodItem::~CMethodItem
_TEXT	ENDS
PUBLIC	??_7CDecoder@NShrink@NCompress@@6B@		; NCompress::NShrink::CDecoder::`vftable'
PUBLIC	??_R4CDecoder@NShrink@NCompress@@6B@		; NCompress::NShrink::CDecoder::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCDecoder@NShrink@NCompress@@@8		; NCompress::NShrink::CDecoder `RTTI Type Descriptor'
PUBLIC	??_R3CDecoder@NShrink@NCompress@@8		; NCompress::NShrink::CDecoder::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CDecoder@NShrink@NCompress@@8		; NCompress::NShrink::CDecoder::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CDecoder@NShrink@NCompress@@8	; NCompress::NShrink::CDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?QueryInterface@CDecoder@NShrink@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::NShrink::CDecoder::QueryInterface
PUBLIC	?AddRef@CDecoder@NShrink@NCompress@@UAGKXZ	; NCompress::NShrink::CDecoder::AddRef
PUBLIC	?Release@CDecoder@NShrink@NCompress@@UAGKXZ	; NCompress::NShrink::CDecoder::Release
EXTRN	?Code@CDecoder@NShrink@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z:PROC ; NCompress::NShrink::CDecoder::Code
;	COMDAT ??_R1A@?0A@EA@CDecoder@NShrink@NCompress@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CDecoder@NShrink@NCompress@@8 DD FLAT:??_R0?AVCDecoder@NShrink@NCompress@@@8 ; NCompress::NShrink::CDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CDecoder@NShrink@NCompress@@8
rdata$r	ENDS
;	COMDAT ??_R2CDecoder@NShrink@NCompress@@8
rdata$r	SEGMENT
??_R2CDecoder@NShrink@NCompress@@8 DD FLAT:??_R1A@?0A@EA@CDecoder@NShrink@NCompress@@8 ; NCompress::NShrink::CDecoder::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ICompressCoder@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CDecoder@NShrink@NCompress@@8
rdata$r	SEGMENT
??_R3CDecoder@NShrink@NCompress@@8 DD 00H		; NCompress::NShrink::CDecoder::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2CDecoder@NShrink@NCompress@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCDecoder@NShrink@NCompress@@@8
_DATA	SEGMENT
??_R0?AVCDecoder@NShrink@NCompress@@@8 DD FLAT:??_7type_info@@6B@ ; NCompress::NShrink::CDecoder `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCDecoder@NShrink@NCompress@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CDecoder@NShrink@NCompress@@6B@
rdata$r	SEGMENT
??_R4CDecoder@NShrink@NCompress@@6B@ DD 00H		; NCompress::NShrink::CDecoder::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCDecoder@NShrink@NCompress@@@8
	DD	FLAT:??_R3CDecoder@NShrink@NCompress@@8
rdata$r	ENDS
;	COMDAT ??_7CDecoder@NShrink@NCompress@@6B@
CONST	SEGMENT
??_7CDecoder@NShrink@NCompress@@6B@ DD FLAT:??_R4CDecoder@NShrink@NCompress@@6B@ ; NCompress::NShrink::CDecoder::`vftable'
	DD	FLAT:?QueryInterface@CDecoder@NShrink@NCompress@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CDecoder@NShrink@NCompress@@UAGKXZ
	DD	FLAT:?Release@CDecoder@NShrink@NCompress@@UAGKXZ
	DD	FLAT:?Code@CDecoder@NShrink@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CDecoder@NShrink@NCompress@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CDecoder@NShrink@NCompress@@QAE@XZ PROC		; NCompress::NShrink::CDecoder::CDecoder, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ICompressCoder@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CDecoder@NShrink@NCompress@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CDecoder@NShrink@NCompress@@QAE@XZ ENDP		; NCompress::NShrink::CDecoder::CDecoder
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CDecoder@NShrink@NCompress@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CDecoder@NShrink@NCompress@@UAGJABU_GUID@@PAPAX@Z PROC ; NCompress::NShrink::CDecoder::QueryInterface, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\compress\shrinkdecoder.h
; Line 27
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@8
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN1@QueryInter@8
$LN2@QueryInter@8:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN3@QueryInter@8
$LN1@QueryInter@8:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	xor	eax, eax
$LN3@QueryInter@8:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CDecoder@NShrink@NCompress@@UAGJABU_GUID@@PAPAX@Z ENDP ; NCompress::NShrink::CDecoder::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CDecoder@NShrink@NCompress@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CDecoder@NShrink@NCompress@@UAGKXZ PROC		; NCompress::NShrink::CDecoder::AddRef, COMDAT
; Line 27
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CDecoder@NShrink@NCompress@@UAGKXZ ENDP		; NCompress::NShrink::CDecoder::AddRef
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CDecoder@NShrink@NCompress@@UAGKXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
$T76955 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CDecoder@NShrink@NCompress@@UAGKXZ PROC	; NCompress::NShrink::CDecoder::Release, COMDAT
; Line 27
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	jmp	SHORT $LN2@Release@8
$LN1@Release@8:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T76955[ebp], edx
	mov	eax, DWORD PTR $T76955[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	xor	eax, eax
$LN2@Release@8:
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CDecoder@NShrink@NCompress@@UAGKXZ ENDP	; NCompress::NShrink::CDecoder::Release
_TEXT	ENDS
PUBLIC	??0CDecoder@NXz@NArchive@@QAE@XZ		; NArchive::NXz::CDecoder::CDecoder
PUBLIC	??_7CXzDecoder@NZip@NArchive@@6B@		; NArchive::NZip::CXzDecoder::`vftable'
PUBLIC	??_R4CXzDecoder@NZip@NArchive@@6B@		; NArchive::NZip::CXzDecoder::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCXzDecoder@NZip@NArchive@@@8		; NArchive::NZip::CXzDecoder `RTTI Type Descriptor'
PUBLIC	??_R3CXzDecoder@NZip@NArchive@@8		; NArchive::NZip::CXzDecoder::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CXzDecoder@NZip@NArchive@@8		; NArchive::NZip::CXzDecoder::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CXzDecoder@NZip@NArchive@@8	; NArchive::NZip::CXzDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?QueryInterface@CXzDecoder@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::NZip::CXzDecoder::QueryInterface
PUBLIC	?AddRef@CXzDecoder@NZip@NArchive@@UAGKXZ	; NArchive::NZip::CXzDecoder::AddRef
PUBLIC	?Release@CXzDecoder@NZip@NArchive@@UAGKXZ	; NArchive::NZip::CXzDecoder::Release
;	COMDAT ??_R1A@?0A@EA@CXzDecoder@NZip@NArchive@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CXzDecoder@NZip@NArchive@@8 DD FLAT:??_R0?AVCXzDecoder@NZip@NArchive@@@8 ; NArchive::NZip::CXzDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CXzDecoder@NZip@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R2CXzDecoder@NZip@NArchive@@8
rdata$r	SEGMENT
??_R2CXzDecoder@NZip@NArchive@@8 DD FLAT:??_R1A@?0A@EA@CXzDecoder@NZip@NArchive@@8 ; NArchive::NZip::CXzDecoder::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ICompressCoder@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CXzDecoder@NZip@NArchive@@8
rdata$r	SEGMENT
??_R3CXzDecoder@NZip@NArchive@@8 DD 00H			; NArchive::NZip::CXzDecoder::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2CXzDecoder@NZip@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCXzDecoder@NZip@NArchive@@@8
_DATA	SEGMENT
??_R0?AVCXzDecoder@NZip@NArchive@@@8 DD FLAT:??_7type_info@@6B@ ; NArchive::NZip::CXzDecoder `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCXzDecoder@NZip@NArchive@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CXzDecoder@NZip@NArchive@@6B@
rdata$r	SEGMENT
??_R4CXzDecoder@NZip@NArchive@@6B@ DD 00H		; NArchive::NZip::CXzDecoder::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCXzDecoder@NZip@NArchive@@@8
	DD	FLAT:??_R3CXzDecoder@NZip@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_7CXzDecoder@NZip@NArchive@@6B@
CONST	SEGMENT
??_7CXzDecoder@NZip@NArchive@@6B@ DD FLAT:??_R4CXzDecoder@NZip@NArchive@@6B@ ; NArchive::NZip::CXzDecoder::`vftable'
	DD	FLAT:?QueryInterface@CXzDecoder@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CXzDecoder@NZip@NArchive@@UAGKXZ
	DD	FLAT:?Release@CXzDecoder@NZip@NArchive@@UAGKXZ
	DD	FLAT:?Code@CXzDecoder@NZip@NArchive@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CXzDecoder@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CXzDecoder@NZip@NArchive@@QAE@XZ PROC		; NArchive::NZip::CXzDecoder::CXzDecoder, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ICompressCoder@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CXzDecoder@NZip@NArchive@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0CDecoder@NXz@NArchive@@QAE@XZ	; NArchive::NXz::CDecoder::CDecoder
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CXzDecoder@NZip@NArchive@@QAE@XZ ENDP		; NArchive::NZip::CXzDecoder::CXzDecoder
_TEXT	ENDS
PUBLIC	??0CStatInfo@NXz@NArchive@@QAE@XZ		; NArchive::NXz::CStatInfo::CStatInfo
EXTRN	??0CXzUnpackerCPP@NXz@NArchive@@QAE@XZ:PROC	; NArchive::NXz::CXzUnpackerCPP::CXzUnpackerCPP
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CDecoder@NXz@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CDecoder@NXz@NArchive@@QAE@XZ PROC			; NArchive::NXz::CDecoder::CDecoder, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\xzhandler.h
; Line 55
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CStatInfo@NXz@NArchive@@QAE@XZ	; NArchive::NXz::CStatInfo::CStatInfo
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	??0CXzUnpackerCPP@NXz@NArchive@@QAE@XZ	; NArchive::NXz::CXzUnpackerCPP::CXzUnpackerCPP
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1760], 0
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CDecoder@NXz@NArchive@@QAE@XZ ENDP			; NArchive::NXz::CDecoder::CDecoder
_TEXT	ENDS
EXTRN	?Clear@CStatInfo@NXz@NArchive@@QAEXXZ:PROC	; NArchive::NXz::CStatInfo::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CStatInfo@NXz@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CStatInfo@NXz@NArchive@@QAE@XZ PROC			; NArchive::NXz::CStatInfo::CStatInfo, COMDAT
; _this$ = ecx
; Line 45
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@CStatInfo@NXz@NArchive@@QAEXXZ	; NArchive::NXz::CStatInfo::Clear
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CStatInfo@NXz@NArchive@@QAE@XZ ENDP			; NArchive::NXz::CStatInfo::CStatInfo
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CXzDecoder@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CXzDecoder@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z PROC ; NArchive::NZip::CXzDecoder::QueryInterface, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\ziphandler.cpp
; Line 525
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@9
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN1@QueryInter@9
$LN2@QueryInter@9:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN3@QueryInter@9
$LN1@QueryInter@9:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	xor	eax, eax
$LN3@QueryInter@9:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CXzDecoder@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z ENDP ; NArchive::NZip::CXzDecoder::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CXzDecoder@NZip@NArchive@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CXzDecoder@NZip@NArchive@@UAGKXZ PROC		; NArchive::NZip::CXzDecoder::AddRef, COMDAT
; Line 525
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CXzDecoder@NZip@NArchive@@UAGKXZ ENDP		; NArchive::NZip::CXzDecoder::AddRef
_TEXT	ENDS
PUBLIC	??_GCXzDecoder@NZip@NArchive@@QAEPAXI@Z		; NArchive::NZip::CXzDecoder::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CXzDecoder@NZip@NArchive@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T76971 = -8						; size = 4
$T76970 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CXzDecoder@NZip@NArchive@@UAGKXZ PROC		; NArchive::NZip::CXzDecoder::Release, COMDAT
; Line 525
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@9
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	jmp	SHORT $LN2@Release@9
$LN1@Release@9:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T76971[ebp], edx
	mov	eax, DWORD PTR $T76971[ebp]
	mov	DWORD PTR $T76970[ebp], eax
	cmp	DWORD PTR $T76970[ebp], 0
	je	SHORT $LN4@Release@9
	push	1
	mov	ecx, DWORD PTR $T76970[ebp]
	call	??_GCXzDecoder@NZip@NArchive@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release@9
$LN4@Release@9:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release@9:
	xor	eax, eax
$LN2@Release@9:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CXzDecoder@NZip@NArchive@@UAGKXZ ENDP		; NArchive::NZip::CXzDecoder::Release
_TEXT	ENDS
PUBLIC	??1CXzDecoder@NZip@NArchive@@QAE@XZ		; NArchive::NZip::CXzDecoder::~CXzDecoder
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCXzDecoder@NZip@NArchive@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCXzDecoder@NZip@NArchive@@QAEPAXI@Z PROC		; NArchive::NZip::CXzDecoder::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CXzDecoder@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@7
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@7:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCXzDecoder@NZip@NArchive@@QAEPAXI@Z ENDP		; NArchive::NZip::CXzDecoder::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1CDecoder@NXz@NArchive@@QAE@XZ		; NArchive::NXz::CDecoder::~CDecoder
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CXzDecoder@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CXzDecoder@NZip@NArchive@@QAE@XZ PROC		; NArchive::NZip::CXzDecoder::~CXzDecoder, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1CDecoder@NXz@NArchive@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CXzDecoder@NZip@NArchive@@QAE@XZ ENDP		; NArchive::NZip::CXzDecoder::~CXzDecoder
_TEXT	ENDS
EXTRN	??1CXzUnpackerCPP@NXz@NArchive@@QAE@XZ:PROC	; NArchive::NXz::CXzUnpackerCPP::~CXzUnpackerCPP
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CDecoder@NXz@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CDecoder@NXz@NArchive@@QAE@XZ PROC			; NArchive::NXz::CDecoder::~CDecoder, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	??1CXzUnpackerCPP@NXz@NArchive@@QAE@XZ	; NArchive::NXz::CXzUnpackerCPP::~CXzUnpackerCPP
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CDecoder@NXz@NArchive@@QAE@XZ ENDP			; NArchive::NXz::CDecoder::~CDecoder
_TEXT	ENDS
PUBLIC	??0CKeyInfo@NWzAes@NCrypto@@QAE@XZ		; NCrypto::NWzAes::CKeyInfo::CKeyInfo
PUBLIC	??_7CBaseCoder@NWzAes@NCrypto@@6BICryptoSetPassword@@@ ; NCrypto::NWzAes::CBaseCoder::`vftable'
PUBLIC	??_7CBaseCoder@NWzAes@NCrypto@@6BICompressFilter@@@ ; NCrypto::NWzAes::CBaseCoder::`vftable'
PUBLIC	??0ICryptoSetPassword@@QAE@XZ			; ICryptoSetPassword::ICryptoSetPassword
PUBLIC	??0ICompressFilter@@QAE@XZ			; ICompressFilter::ICompressFilter
PUBLIC	??_R4CBaseCoder@NWzAes@NCrypto@@6BICompressFilter@@@ ; NCrypto::NWzAes::CBaseCoder::`RTTI Complete Object Locator'
PUBLIC	??_R4CBaseCoder@NWzAes@NCrypto@@6BICryptoSetPassword@@@ ; NCrypto::NWzAes::CBaseCoder::`RTTI Complete Object Locator'
EXTRN	??0CAesCtr2@NWzAes@NCrypto@@QAE@XZ:PROC		; NCrypto::NWzAes::CAesCtr2::CAesCtr2
;	COMDAT ??_R4CBaseCoder@NWzAes@NCrypto@@6BICryptoSetPassword@@@
rdata$r	SEGMENT
??_R4CBaseCoder@NWzAes@NCrypto@@6BICryptoSetPassword@@@ DD 00H ; NCrypto::NWzAes::CBaseCoder::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVCBaseCoder@NWzAes@NCrypto@@@8
	DD	FLAT:??_R3CBaseCoder@NWzAes@NCrypto@@8
rdata$r	ENDS
;	COMDAT ??_R4CBaseCoder@NWzAes@NCrypto@@6BICompressFilter@@@
rdata$r	SEGMENT
??_R4CBaseCoder@NWzAes@NCrypto@@6BICompressFilter@@@ DD 00H ; NCrypto::NWzAes::CBaseCoder::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCBaseCoder@NWzAes@NCrypto@@@8
	DD	FLAT:??_R3CBaseCoder@NWzAes@NCrypto@@8
rdata$r	ENDS
;	COMDAT ??_7CBaseCoder@NWzAes@NCrypto@@6BICryptoSetPassword@@@
CONST	SEGMENT
??_7CBaseCoder@NWzAes@NCrypto@@6BICryptoSetPassword@@@ DD FLAT:??_R4CBaseCoder@NWzAes@NCrypto@@6BICryptoSetPassword@@@ ; NCrypto::NWzAes::CBaseCoder::`vftable'
	DD	FLAT:?QueryInterface@CBaseCoder@NWzAes@NCrypto@@W3AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CBaseCoder@NWzAes@NCrypto@@W3AGKXZ
	DD	FLAT:?Release@CBaseCoder@NWzAes@NCrypto@@W3AGKXZ
	DD	FLAT:?CryptoSetPassword@CBaseCoder@NWzAes@NCrypto@@UAGJPBEI@Z
CONST	ENDS
;	COMDAT ??_7CBaseCoder@NWzAes@NCrypto@@6BICompressFilter@@@
CONST	SEGMENT
??_7CBaseCoder@NWzAes@NCrypto@@6BICompressFilter@@@ DD FLAT:??_R4CBaseCoder@NWzAes@NCrypto@@6BICompressFilter@@@ ; NCrypto::NWzAes::CBaseCoder::`vftable'
	DD	FLAT:?QueryInterface@CBaseCoder@NWzAes@NCrypto@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CBaseCoder@NWzAes@NCrypto@@UAGKXZ
	DD	FLAT:?Release@CBaseCoder@NWzAes@NCrypto@@UAGKXZ
	DD	FLAT:?Init@CBaseCoder@NWzAes@NCrypto@@UAGJXZ
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CBaseCoder@NWzAes@NCrypto@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CBaseCoder@NWzAes@NCrypto@@QAE@XZ$0
__ehfuncinfo$??0CBaseCoder@NWzAes@NCrypto@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CBaseCoder@NWzAes@NCrypto@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CBaseCoder@NWzAes@NCrypto@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CBaseCoder@NWzAes@NCrypto@@QAE@XZ PROC		; NCrypto::NWzAes::CBaseCoder::CBaseCoder, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CBaseCoder@NWzAes@NCrypto@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ICompressFilter@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0ICryptoSetPassword@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CBaseCoder@NWzAes@NCrypto@@6BICompressFilter@@@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], OFFSET ??_7CBaseCoder@NWzAes@NCrypto@@6BICryptoSetPassword@@@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0CKeyInfo@NWzAes@NCrypto@@QAE@XZ	; NCrypto::NWzAes::CKeyInfo::CKeyInfo
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 240				; 000000f0H
	call	??0CAesCtr2@NWzAes@NCrypto@@QAE@XZ	; NCrypto::NWzAes::CAesCtr2::CAesCtr2
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CBaseCoder@NWzAes@NCrypto@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1CKeyInfo@NWzAes@NCrypto@@QAE@XZ
__ehhandler$??0CBaseCoder@NWzAes@NCrypto@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CBaseCoder@NWzAes@NCrypto@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CBaseCoder@NWzAes@NCrypto@@QAE@XZ ENDP		; NCrypto::NWzAes::CBaseCoder::CBaseCoder
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CKeyInfo@NWzAes@NCrypto@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CKeyInfo@NWzAes@NCrypto@@QAE@XZ PROC			; NCrypto::NWzAes::CKeyInfo::CKeyInfo, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\crypto\wzaes.h
; Line 66
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::CBuffer<unsigned char>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CKeyInfo@NWzAes@NCrypto@@QAE@XZ ENDP			; NCrypto::NWzAes::CKeyInfo::CKeyInfo
_TEXT	ENDS
PUBLIC	??_7CBaseCoder@NZipStrong@NCrypto@@6B@		; NCrypto::NZipStrong::CBaseCoder::`vftable'
PUBLIC	??_7CBaseCoder@NZipStrong@NCrypto@@6BICompressSetCoderProperties@@@ ; NCrypto::NZipStrong::CBaseCoder::`vftable'
PUBLIC	??_7CBaseCoder@NZipStrong@NCrypto@@6BICryptoProperties@@@ ; NCrypto::NZipStrong::CBaseCoder::`vftable'
PUBLIC	??_7CBaseCoder@NZipStrong@NCrypto@@6BICompressFilter@@@ ; NCrypto::NZipStrong::CBaseCoder::`vftable'
PUBLIC	??0CAesCbcDecoder@NCrypto@@QAE@I@Z		; NCrypto::CAesCbcDecoder::CAesCbcDecoder
PUBLIC	??_R4CBaseCoder@NZipStrong@NCrypto@@6BICompressFilter@@@ ; NCrypto::NZipStrong::CBaseCoder::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@CAesCbcCoder@NCrypto@@UAGJABU_GUID@@PAPAX@Z ; NCrypto::CAesCbcCoder::QueryInterface
PUBLIC	?AddRef@CAesCbcCoder@NCrypto@@UAGKXZ		; NCrypto::CAesCbcCoder::AddRef
PUBLIC	?Release@CAesCbcCoder@NCrypto@@UAGKXZ		; NCrypto::CAesCbcCoder::Release
PUBLIC	??_R4CBaseCoder@NZipStrong@NCrypto@@6BICryptoProperties@@@ ; NCrypto::NZipStrong::CBaseCoder::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@CAesCbcCoder@NCrypto@@W3AGJABU_GUID@@PAPAX@Z ; [thunk]:NCrypto::CAesCbcCoder::QueryInterface`adjustor{4}'
PUBLIC	?AddRef@CAesCbcCoder@NCrypto@@W3AGKXZ		; [thunk]:NCrypto::CAesCbcCoder::AddRef`adjustor{4}'
PUBLIC	?Release@CAesCbcCoder@NCrypto@@W3AGKXZ		; [thunk]:NCrypto::CAesCbcCoder::Release`adjustor{4}'
PUBLIC	??_R4CBaseCoder@NZipStrong@NCrypto@@6BICompressSetCoderProperties@@@ ; NCrypto::NZipStrong::CBaseCoder::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@CAesCbcCoder@NCrypto@@W7AGJABU_GUID@@PAPAX@Z ; [thunk]:NCrypto::CAesCbcCoder::QueryInterface`adjustor{8}'
PUBLIC	?AddRef@CAesCbcCoder@NCrypto@@W7AGKXZ		; [thunk]:NCrypto::CAesCbcCoder::AddRef`adjustor{8}'
PUBLIC	?Release@CAesCbcCoder@NCrypto@@W7AGKXZ		; [thunk]:NCrypto::CAesCbcCoder::Release`adjustor{8}'
PUBLIC	??_R4CBaseCoder@NZipStrong@NCrypto@@6B@		; NCrypto::NZipStrong::CBaseCoder::`RTTI Complete Object Locator'
;	COMDAT ??_R4CBaseCoder@NZipStrong@NCrypto@@6B@
rdata$r	SEGMENT
??_R4CBaseCoder@NZipStrong@NCrypto@@6B@ DD 00H		; NCrypto::NZipStrong::CBaseCoder::`RTTI Complete Object Locator'
	DD	014cH
	DD	00H
	DD	FLAT:??_R0?AVCBaseCoder@NZipStrong@NCrypto@@@8
	DD	FLAT:??_R3CBaseCoder@NZipStrong@NCrypto@@8
rdata$r	ENDS
;	COMDAT ??_R4CBaseCoder@NZipStrong@NCrypto@@6BICompressSetCoderProperties@@@
rdata$r	SEGMENT
??_R4CBaseCoder@NZipStrong@NCrypto@@6BICompressSetCoderProperties@@@ DD 00H ; NCrypto::NZipStrong::CBaseCoder::`RTTI Complete Object Locator'
	DD	08H
	DD	00H
	DD	FLAT:??_R0?AVCBaseCoder@NZipStrong@NCrypto@@@8
	DD	FLAT:??_R3CBaseCoder@NZipStrong@NCrypto@@8
rdata$r	ENDS
;	COMDAT ??_R4CBaseCoder@NZipStrong@NCrypto@@6BICryptoProperties@@@
rdata$r	SEGMENT
??_R4CBaseCoder@NZipStrong@NCrypto@@6BICryptoProperties@@@ DD 00H ; NCrypto::NZipStrong::CBaseCoder::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVCBaseCoder@NZipStrong@NCrypto@@@8
	DD	FLAT:??_R3CBaseCoder@NZipStrong@NCrypto@@8
rdata$r	ENDS
;	COMDAT ??_R4CBaseCoder@NZipStrong@NCrypto@@6BICompressFilter@@@
rdata$r	SEGMENT
??_R4CBaseCoder@NZipStrong@NCrypto@@6BICompressFilter@@@ DD 00H ; NCrypto::NZipStrong::CBaseCoder::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCBaseCoder@NZipStrong@NCrypto@@@8
	DD	FLAT:??_R3CBaseCoder@NZipStrong@NCrypto@@8
rdata$r	ENDS
;	COMDAT ??_7CBaseCoder@NZipStrong@NCrypto@@6B@
CONST	SEGMENT
??_7CBaseCoder@NZipStrong@NCrypto@@6B@ DD FLAT:??_R4CBaseCoder@NZipStrong@NCrypto@@6B@ ; NCrypto::NZipStrong::CBaseCoder::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?CryptoSetPassword@CBaseCoder@NZipStrong@NCrypto@@UAGJPBEI@Z
CONST	ENDS
;	COMDAT ??_7CBaseCoder@NZipStrong@NCrypto@@6BICompressSetCoderProperties@@@
CONST	SEGMENT
??_7CBaseCoder@NZipStrong@NCrypto@@6BICompressSetCoderProperties@@@ DD FLAT:??_R4CBaseCoder@NZipStrong@NCrypto@@6BICompressSetCoderProperties@@@ ; NCrypto::NZipStrong::CBaseCoder::`vftable'
	DD	FLAT:?QueryInterface@CAesCbcCoder@NCrypto@@W7AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CAesCbcCoder@NCrypto@@W7AGKXZ
	DD	FLAT:?Release@CAesCbcCoder@NCrypto@@W7AGKXZ
	DD	FLAT:?SetCoderProperties@CAesCbcCoder@NCrypto@@UAGJPBKPBUtagPROPVARIANT@@I@Z
CONST	ENDS
;	COMDAT ??_7CBaseCoder@NZipStrong@NCrypto@@6BICryptoProperties@@@
CONST	SEGMENT
??_7CBaseCoder@NZipStrong@NCrypto@@6BICryptoProperties@@@ DD FLAT:??_R4CBaseCoder@NZipStrong@NCrypto@@6BICryptoProperties@@@ ; NCrypto::NZipStrong::CBaseCoder::`vftable'
	DD	FLAT:?QueryInterface@CAesCbcCoder@NCrypto@@W3AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CAesCbcCoder@NCrypto@@W3AGKXZ
	DD	FLAT:?Release@CAesCbcCoder@NCrypto@@W3AGKXZ
	DD	FLAT:?SetKey@CAesCbcCoder@NCrypto@@UAGJPBEI@Z
	DD	FLAT:?SetInitVector@CAesCbcCoder@NCrypto@@UAGJPBEI@Z
CONST	ENDS
;	COMDAT ??_7CBaseCoder@NZipStrong@NCrypto@@6BICompressFilter@@@
CONST	SEGMENT
??_7CBaseCoder@NZipStrong@NCrypto@@6BICompressFilter@@@ DD FLAT:??_R4CBaseCoder@NZipStrong@NCrypto@@6BICompressFilter@@@ ; NCrypto::NZipStrong::CBaseCoder::`vftable'
	DD	FLAT:?QueryInterface@CAesCbcCoder@NCrypto@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CAesCbcCoder@NCrypto@@UAGKXZ
	DD	FLAT:?Release@CAesCbcCoder@NCrypto@@UAGKXZ
	DD	FLAT:?Init@CBaseCoder@NZipStrong@NCrypto@@UAGJXZ
	DD	FLAT:?Filter@CAesCbcCoder@NCrypto@@UAGIPAEI@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CBaseCoder@NZipStrong@NCrypto@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CBaseCoder@NZipStrong@NCrypto@@QAE@XZ PROC		; NCrypto::NZipStrong::CBaseCoder::CBaseCoder, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CAesCbcDecoder@NCrypto@@QAE@I@Z	; NCrypto::CAesCbcDecoder::CAesCbcDecoder
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 332				; 0000014cH
	call	??0ICryptoSetPassword@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CBaseCoder@NZipStrong@NCrypto@@6BICompressFilter@@@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], OFFSET ??_7CBaseCoder@NZipStrong@NCrypto@@6BICryptoProperties@@@
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], OFFSET ??_7CBaseCoder@NZipStrong@NCrypto@@6BICompressSetCoderProperties@@@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+332], OFFSET ??_7CBaseCoder@NZipStrong@NCrypto@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 372				; 00000174H
	call	??0?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::CBuffer<unsigned char>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CBaseCoder@NZipStrong@NCrypto@@QAE@XZ ENDP		; NCrypto::NZipStrong::CBaseCoder::CBaseCoder
_TEXT	ENDS
EXTRN	_IID_ICompressSetCoderProperties:BYTE
EXTRN	_IID_ICryptoProperties:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@CAesCbcCoder@NCrypto@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
tv128 = -12						; size = 4
tv86 = -8						; size = 4
tv75 = -4						; size = 4
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CAesCbcCoder@NCrypto@@UAGJABU_GUID@@PAPAX@Z PROC ; NCrypto::CAesCbcCoder::QueryInterface, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\crypto\myaes.h
; Line 33
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN6@QueryInter@10
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN9@QueryInter@10
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	mov	DWORD PTR tv75[ebp], edx
	jmp	SHORT $LN10@QueryInter@10
$LN9@QueryInter@10:
	mov	DWORD PTR tv75[ebp], 0
$LN10@QueryInter@10:
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	ecx, DWORD PTR tv75[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN5@QueryInter@10
$LN6@QueryInter@10:
	push	OFFSET _IID_ICryptoProperties
	mov	edx, DWORD PTR _iid$[ebp]
	push	edx
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@QueryInter@10
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN11@QueryInter@10
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR tv86[ebp], eax
	jmp	SHORT $LN12@QueryInter@10
$LN11@QueryInter@10:
	mov	DWORD PTR tv86[ebp], 0
$LN12@QueryInter@10:
	mov	ecx, DWORD PTR _outObject$[ebp]
	mov	edx, DWORD PTR tv86[ebp]
	mov	DWORD PTR [ecx], edx
	jmp	SHORT $LN5@QueryInter@10
$LN4@QueryInter@10:
	push	OFFSET _IID_ICompressSetCoderProperties
	mov	eax, DWORD PTR _iid$[ebp]
	push	eax
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@10
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN13@QueryInter@10
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	mov	DWORD PTR tv128[ebp], ecx
	jmp	SHORT $LN14@QueryInter@10
$LN13@QueryInter@10:
	mov	DWORD PTR tv128[ebp], 0
$LN14@QueryInter@10:
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR tv128[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN5@QueryInter@10
$LN2@QueryInter@10:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN7@QueryInter@10
$LN5@QueryInter@10:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
	xor	eax, eax
$LN7@QueryInter@10:
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CAesCbcCoder@NCrypto@@UAGJABU_GUID@@PAPAX@Z ENDP ; NCrypto::CAesCbcCoder::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CAesCbcCoder@NCrypto@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CAesCbcCoder@NCrypto@@UAGKXZ PROC		; NCrypto::CAesCbcCoder::AddRef, COMDAT
; Line 33
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+12], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CAesCbcCoder@NCrypto@@UAGKXZ ENDP		; NCrypto::CAesCbcCoder::AddRef
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CAesCbcCoder@NCrypto@@UAGKXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
$T77009 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CAesCbcCoder@NCrypto@@UAGKXZ PROC		; NCrypto::CAesCbcCoder::Release, COMDAT
; Line 33
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+12], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@10
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	jmp	SHORT $LN2@Release@10
$LN1@Release@10:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T77009[ebp], edx
	mov	eax, DWORD PTR $T77009[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	xor	eax, eax
$LN2@Release@10:
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CAesCbcCoder@NCrypto@@UAGKXZ ENDP		; NCrypto::CAesCbcCoder::Release
_TEXT	ENDS
PUBLIC	??_7CAesCbcDecoder@NCrypto@@6BICompressSetCoderProperties@@@ ; NCrypto::CAesCbcDecoder::`vftable'
PUBLIC	??_7CAesCbcDecoder@NCrypto@@6BICryptoProperties@@@ ; NCrypto::CAesCbcDecoder::`vftable'
PUBLIC	??_7CAesCbcDecoder@NCrypto@@6BICompressFilter@@@ ; NCrypto::CAesCbcDecoder::`vftable'
PUBLIC	??_R4CAesCbcDecoder@NCrypto@@6BICompressFilter@@@ ; NCrypto::CAesCbcDecoder::`RTTI Complete Object Locator'
PUBLIC	??_R4CAesCbcDecoder@NCrypto@@6BICryptoProperties@@@ ; NCrypto::CAesCbcDecoder::`RTTI Complete Object Locator'
PUBLIC	??_R4CAesCbcDecoder@NCrypto@@6BICompressSetCoderProperties@@@ ; NCrypto::CAesCbcDecoder::`RTTI Complete Object Locator'
EXTRN	??0CAesCbcCoder@NCrypto@@QAE@_NI@Z:PROC		; NCrypto::CAesCbcCoder::CAesCbcCoder
EXTRN	?Init@CAesCbcCoder@NCrypto@@UAGJXZ:PROC		; NCrypto::CAesCbcCoder::Init
;	COMDAT ??_R4CAesCbcDecoder@NCrypto@@6BICompressSetCoderProperties@@@
rdata$r	SEGMENT
??_R4CAesCbcDecoder@NCrypto@@6BICompressSetCoderProperties@@@ DD 00H ; NCrypto::CAesCbcDecoder::`RTTI Complete Object Locator'
	DD	08H
	DD	00H
	DD	FLAT:??_R0?AUCAesCbcDecoder@NCrypto@@@8
	DD	FLAT:??_R3CAesCbcDecoder@NCrypto@@8
rdata$r	ENDS
;	COMDAT ??_R4CAesCbcDecoder@NCrypto@@6BICryptoProperties@@@
rdata$r	SEGMENT
??_R4CAesCbcDecoder@NCrypto@@6BICryptoProperties@@@ DD 00H ; NCrypto::CAesCbcDecoder::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AUCAesCbcDecoder@NCrypto@@@8
	DD	FLAT:??_R3CAesCbcDecoder@NCrypto@@8
rdata$r	ENDS
;	COMDAT ??_R4CAesCbcDecoder@NCrypto@@6BICompressFilter@@@
rdata$r	SEGMENT
??_R4CAesCbcDecoder@NCrypto@@6BICompressFilter@@@ DD 00H ; NCrypto::CAesCbcDecoder::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUCAesCbcDecoder@NCrypto@@@8
	DD	FLAT:??_R3CAesCbcDecoder@NCrypto@@8
rdata$r	ENDS
;	COMDAT ??_7CAesCbcDecoder@NCrypto@@6BICompressSetCoderProperties@@@
CONST	SEGMENT
??_7CAesCbcDecoder@NCrypto@@6BICompressSetCoderProperties@@@ DD FLAT:??_R4CAesCbcDecoder@NCrypto@@6BICompressSetCoderProperties@@@ ; NCrypto::CAesCbcDecoder::`vftable'
	DD	FLAT:?QueryInterface@CAesCbcCoder@NCrypto@@W7AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CAesCbcCoder@NCrypto@@W7AGKXZ
	DD	FLAT:?Release@CAesCbcCoder@NCrypto@@W7AGKXZ
	DD	FLAT:?SetCoderProperties@CAesCbcCoder@NCrypto@@UAGJPBKPBUtagPROPVARIANT@@I@Z
CONST	ENDS
;	COMDAT ??_7CAesCbcDecoder@NCrypto@@6BICryptoProperties@@@
CONST	SEGMENT
??_7CAesCbcDecoder@NCrypto@@6BICryptoProperties@@@ DD FLAT:??_R4CAesCbcDecoder@NCrypto@@6BICryptoProperties@@@ ; NCrypto::CAesCbcDecoder::`vftable'
	DD	FLAT:?QueryInterface@CAesCbcCoder@NCrypto@@W3AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CAesCbcCoder@NCrypto@@W3AGKXZ
	DD	FLAT:?Release@CAesCbcCoder@NCrypto@@W3AGKXZ
	DD	FLAT:?SetKey@CAesCbcCoder@NCrypto@@UAGJPBEI@Z
	DD	FLAT:?SetInitVector@CAesCbcCoder@NCrypto@@UAGJPBEI@Z
CONST	ENDS
;	COMDAT ??_7CAesCbcDecoder@NCrypto@@6BICompressFilter@@@
CONST	SEGMENT
??_7CAesCbcDecoder@NCrypto@@6BICompressFilter@@@ DD FLAT:??_R4CAesCbcDecoder@NCrypto@@6BICompressFilter@@@ ; NCrypto::CAesCbcDecoder::`vftable'
	DD	FLAT:?QueryInterface@CAesCbcCoder@NCrypto@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CAesCbcCoder@NCrypto@@UAGKXZ
	DD	FLAT:?Release@CAesCbcCoder@NCrypto@@UAGKXZ
	DD	FLAT:?Init@CAesCbcCoder@NCrypto@@UAGJXZ
	DD	FLAT:?Filter@CAesCbcCoder@NCrypto@@UAGIPAEI@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CAesCbcDecoder@NCrypto@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_keySize$ = 8						; size = 4
??0CAesCbcDecoder@NCrypto@@QAE@I@Z PROC			; NCrypto::CAesCbcDecoder::CAesCbcDecoder, COMDAT
; _this$ = ecx
; Line 50
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _keySize$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CAesCbcCoder@NCrypto@@QAE@_NI@Z	; NCrypto::CAesCbcCoder::CAesCbcCoder
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7CAesCbcDecoder@NCrypto@@6BICompressFilter@@@
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], OFFSET ??_7CAesCbcDecoder@NCrypto@@6BICryptoProperties@@@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], OFFSET ??_7CAesCbcDecoder@NCrypto@@6BICompressSetCoderProperties@@@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CAesCbcDecoder@NCrypto@@QAE@I@Z ENDP			; NCrypto::CAesCbcDecoder::CAesCbcDecoder
_TEXT	ENDS
PUBLIC	??_7CCipher@NZip@NCrypto@@6BICryptoSetPassword@@@ ; NCrypto::NZip::CCipher::`vftable'
PUBLIC	??_7CCipher@NZip@NCrypto@@6BICompressFilter@@@	; NCrypto::NZip::CCipher::`vftable'
PUBLIC	??_R4CCipher@NZip@NCrypto@@6BICompressFilter@@@	; NCrypto::NZip::CCipher::`RTTI Complete Object Locator'
PUBLIC	??_R4CCipher@NZip@NCrypto@@6BICryptoSetPassword@@@ ; NCrypto::NZip::CCipher::`RTTI Complete Object Locator'
;	COMDAT ??_R4CCipher@NZip@NCrypto@@6BICryptoSetPassword@@@
rdata$r	SEGMENT
??_R4CCipher@NZip@NCrypto@@6BICryptoSetPassword@@@ DD 00H ; NCrypto::NZip::CCipher::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVCCipher@NZip@NCrypto@@@8
	DD	FLAT:??_R3CCipher@NZip@NCrypto@@8
rdata$r	ENDS
;	COMDAT ??_R4CCipher@NZip@NCrypto@@6BICompressFilter@@@
rdata$r	SEGMENT
??_R4CCipher@NZip@NCrypto@@6BICompressFilter@@@ DD 00H	; NCrypto::NZip::CCipher::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCCipher@NZip@NCrypto@@@8
	DD	FLAT:??_R3CCipher@NZip@NCrypto@@8
rdata$r	ENDS
;	COMDAT ??_7CCipher@NZip@NCrypto@@6BICryptoSetPassword@@@
CONST	SEGMENT
??_7CCipher@NZip@NCrypto@@6BICryptoSetPassword@@@ DD FLAT:??_R4CCipher@NZip@NCrypto@@6BICryptoSetPassword@@@ ; NCrypto::NZip::CCipher::`vftable'
	DD	FLAT:?QueryInterface@CCipher@NZip@NCrypto@@W3AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CCipher@NZip@NCrypto@@W3AGKXZ
	DD	FLAT:?Release@CCipher@NZip@NCrypto@@W3AGKXZ
	DD	FLAT:?CryptoSetPassword@CCipher@NZip@NCrypto@@UAGJPBEI@Z
CONST	ENDS
;	COMDAT ??_7CCipher@NZip@NCrypto@@6BICompressFilter@@@
CONST	SEGMENT
??_7CCipher@NZip@NCrypto@@6BICompressFilter@@@ DD FLAT:??_R4CCipher@NZip@NCrypto@@6BICompressFilter@@@ ; NCrypto::NZip::CCipher::`vftable'
	DD	FLAT:?QueryInterface@CCipher@NZip@NCrypto@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CCipher@NZip@NCrypto@@UAGKXZ
	DD	FLAT:?Release@CCipher@NZip@NCrypto@@UAGKXZ
	DD	FLAT:?Init@CCipher@NZip@NCrypto@@UAGJXZ
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CCipher@NZip@NCrypto@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CCipher@NZip@NCrypto@@QAE@XZ PROC			; NCrypto::NZip::CCipher::CCipher, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ICompressFilter@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0ICryptoSetPassword@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CCipher@NZip@NCrypto@@6BICompressFilter@@@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], OFFSET ??_7CCipher@NZip@NCrypto@@6BICryptoSetPassword@@@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CCipher@NZip@NCrypto@@QAE@XZ ENDP			; NCrypto::NZip::CCipher::CCipher
_TEXT	ENDS
PUBLIC	??_7ICompressFilter@@6B@			; ICompressFilter::`vftable'
PUBLIC	??_R4ICompressFilter@@6B@			; ICompressFilter::`RTTI Complete Object Locator'
;	COMDAT ??_R4ICompressFilter@@6B@
rdata$r	SEGMENT
??_R4ICompressFilter@@6B@ DD 00H			; ICompressFilter::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUICompressFilter@@@8
	DD	FLAT:??_R3ICompressFilter@@8
rdata$r	ENDS
;	COMDAT ??_7ICompressFilter@@6B@
CONST	SEGMENT
??_7ICompressFilter@@6B@ DD FLAT:??_R4ICompressFilter@@6B@ ; ICompressFilter::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ICompressFilter@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ICompressFilter@@QAE@XZ PROC				; ICompressFilter::ICompressFilter, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ICompressFilter@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ICompressFilter@@QAE@XZ ENDP				; ICompressFilter::ICompressFilter
_TEXT	ENDS
PUBLIC	??_7ICryptoSetPassword@@6B@			; ICryptoSetPassword::`vftable'
PUBLIC	??_R4ICryptoSetPassword@@6B@			; ICryptoSetPassword::`RTTI Complete Object Locator'
;	COMDAT ??_R4ICryptoSetPassword@@6B@
rdata$r	SEGMENT
??_R4ICryptoSetPassword@@6B@ DD 00H			; ICryptoSetPassword::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUICryptoSetPassword@@@8
	DD	FLAT:??_R3ICryptoSetPassword@@8
rdata$r	ENDS
;	COMDAT ??_7ICryptoSetPassword@@6B@
CONST	SEGMENT
??_7ICryptoSetPassword@@6B@ DD FLAT:??_R4ICryptoSetPassword@@6B@ ; ICryptoSetPassword::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ICryptoSetPassword@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ICryptoSetPassword@@QAE@XZ PROC			; ICryptoSetPassword::ICryptoSetPassword, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ICryptoSetPassword@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ICryptoSetPassword@@QAE@XZ ENDP			; ICryptoSetPassword::ICryptoSetPassword
_TEXT	ENDS
PUBLIC	??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *
PUBLIC	??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ	; CMyComPtr<ISequentialOutStream>::operator!
PUBLIC	?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ; CMyComPtr<ISequentialOutStream>::Release
PUBLIC	??1CItemEx@NZip@NArchive@@QAE@XZ		; NArchive::NZip::CItemEx::~CItemEx
PUBLIC	??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator&
PUBLIC	?IsLocalOffsetOK@CInArchive@NZip@NArchive@@QBE_NABVCItemEx@23@@Z ; NArchive::NZip::CInArchive::IsLocalOffsetOK
PUBLIC	??0CItemEx@NZip@NArchive@@QAE@ABV012@@Z		; NArchive::NZip::CItemEx::CItemEx
PUBLIC	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ	; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
PUBLIC	??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>
PUBLIC	??1CZipDecoder@NZip@NArchive@@QAE@XZ		; NArchive::NZip::CZipDecoder::~CZipDecoder
PUBLIC	??0CZipDecoder@NZip@NArchive@@QAE@XZ		; NArchive::NZip::CZipDecoder::CZipDecoder
EXTRN	?ReadLocalItemAfterCdItem@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z:PROC ; NArchive::NZip::CInArchive::ReadLocalItemAfterCdItem
EXTRN	?SetCur@CLocalProgress@@QAEJXZ:PROC		; CLocalProgress::SetCur
EXTRN	?Init@CLocalProgress@@QAEXPAUIProgress@@_N@Z:PROC ; CLocalProgress::Init
EXTRN	??0CLocalProgress@@QAE@XZ:PROC			; CLocalProgress::CLocalProgress
xdata$x	SEGMENT
__catchsym$?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$7 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$0
__tryblocktable$?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z DD 00H
	DD	05H
	DD	06H
	DD	01H
	DD	FLAT:__catchsym$?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$7
__ehfuncinfo$?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$3
	DD	01H
	DD	FLAT:__unwindfunclet$?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$4
	DD	03H
	DD	FLAT:__unwindfunclet$?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$5
	DD	04H
	DD	FLAT:__unwindfunclet$?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$6
	DD	0ffffffffH
	DD	00H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv467 = -564						; size = 4
tv466 = -560						; size = 4
tv465 = -556						; size = 4
tv464 = -552						; size = 4
tv463 = -548						; size = 4
tv462 = -544						; size = 4
tv461 = -537						; size = 1
tv460 = -536						; size = 4
tv459 = -532						; size = 4
tv458 = -525						; size = 1
tv457 = -524						; size = 4
tv456 = -520						; size = 4
tv455 = -516						; size = 4
tv454 = -509						; size = 1
tv453 = -508						; size = 4
tv452 = -504						; size = 4
tv451 = -500						; size = 4
tv450 = -496						; size = 4
tv449 = -492						; size = 4
tv204 = -488						; size = 4
tv448 = -482						; size = 1
tv447 = -481						; size = 1
tv446 = -480						; size = 4
tv445 = -476						; size = 4
tv181 = -472						; size = 4
tv444 = -468						; size = 4
tv149 = -464						; size = 4
tv148 = -460						; size = 4
tv443 = -456						; size = 4
tv441 = -452						; size = 4
tv440 = -448						; size = 4
tv439 = -444						; size = 4
tv85 = -440						; size = 4
tv438 = -436						; size = 4
tv437 = -432						; size = 4
$T77045 = -428						; size = 4
$T77044 = -424						; size = 4
$T77043 = -420						; size = 4
$T77042 = -416						; size = 4
$T77041 = -412						; size = 4
$T77040 = -408						; size = 4
$T77039 = -404						; size = 4
$T77038 = -400						; size = 4
$T77037 = -396						; size = 4
$T77036 = -392						; size = 4
$T77035 = -388						; size = 4
$T77034 = -384						; size = 4
$T77033 = -380						; size = 4
$T77028 = -376						; size = 4
$T77025 = -372						; size = 4
$T77024 = -368						; size = 4
$T77023 = -364						; size = 4
$T77020 = -360						; size = 4
___result__$75003 = -356				; size = 4
___result__$75000 = -352				; size = 4
_hres$74999 = -348					; size = 4
_res$74998 = -340					; size = 4
___result__$74995 = -332				; size = 4
___result__$74991 = -328				; size = 4
___result__$74988 = -324				; size = 4
___result__$74984 = -320				; size = 4
___result__$74981 = -316				; size = 4
___result__$74978 = -312				; size = 4
_res$74973 = -308					; size = 4
___result__$74969 = -304				; size = 4
___result__$74966 = -300				; size = 4
___result__$74962 = -296				; size = 4
_skip$74960 = -290					; size = 1
_isLocalOffsetOK$74959 = -289				; size = 1
_item$74958 = -284					; size = 104
_index$74957 = -176					; size = 4
_askMode$74956 = -172					; size = 4
_realOutStream$74955 = -164				; size = 4
___result__$74951 = -156				; size = 4
_progress$74947 = -148					; size = 4
_lps$74941 = -140					; size = 4
_currentItemPacked$74940 = -136				; size = 8
_currentItemUnPacked$74939 = -128			; size = 8
_currentTotalPacked$74938 = -120			; size = 8
_currentTotalUnPacked$74937 = -112			; size = 8
___result__$74934 = -104				; size = 4
_item$74933 = -100					; size = 4
_i$74929 = -96						; size = 4
_allFilesMode$74922 = -89				; size = 1
_totalPacked$74921 = -88				; size = 8
_totalUnPacked$74920 = -80				; size = 8
_myDecoder$74919 = -68					; size = 48
__$EHRec$ = -16						; size = 16
_this$ = 8						; size = 4
_indices$ = 12						; size = 4
_numItems$ = 16						; size = 4
_testMode$ = 20						; size = 4
_extractCallback$ = 24					; size = 4
?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z PROC ; NArchive::NZip::CHandler::Extract
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\ziphandler.cpp
; Line 925
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 548				; 00000224H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-564]
	mov	ecx, 137				; 00000089H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
; Line 926
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 927
	lea	ecx, DWORD PTR _myDecoder$74919[ebp]
	call	??0CZipDecoder@NZip@NArchive@@QAE@XZ	; NArchive::NZip::CZipDecoder::CZipDecoder
	mov	DWORD PTR tv437[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 1
; Line 928
	mov	DWORD PTR _totalUnPacked$74920[ebp], 0
	mov	DWORD PTR _totalUnPacked$74920[ebp+4], 0
	mov	DWORD PTR _totalPacked$74921[ebp], 0
	mov	DWORD PTR _totalPacked$74921[ebp+4], 0
; Line 929
	xor	eax, eax
	cmp	DWORD PTR _numItems$[ebp], -1
	sete	al
	mov	BYTE PTR _allFilesMode$74922[ebp], al
; Line 930
	movzx	ecx, BYTE PTR _allFilesMode$74922[ebp]
	test	ecx, ecx
	je	SHORT $LN29@Extract
; Line 931
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?Size@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CItemEx>::Size
	mov	DWORD PTR tv438[ebp], eax
	mov	edx, DWORD PTR tv438[ebp]
	mov	DWORD PTR _numItems$[ebp], edx
$LN29@Extract:
; Line 932
	cmp	DWORD PTR _numItems$[ebp], 0
	jne	SHORT $LN28@Extract
; Line 933
	mov	DWORD PTR $T77020[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _myDecoder$74919[ebp]
	call	??1CZipDecoder@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T77020[ebp]
	jmp	$LN31@Extract
$LN28@Extract:
; Line 935
	mov	DWORD PTR _i$74929[ebp], 0
	jmp	SHORT $LN27@Extract
$LN26@Extract:
	mov	eax, DWORD PTR _i$74929[ebp]
	add	eax, 1
	mov	DWORD PTR _i$74929[ebp], eax
$LN27@Extract:
	mov	ecx, DWORD PTR _i$74929[ebp]
	cmp	ecx, DWORD PTR _numItems$[ebp]
	jae	SHORT $LN25@Extract
; Line 937
	movzx	edx, BYTE PTR _allFilesMode$74922[ebp]
	test	edx, edx
	je	SHORT $LN33@Extract
	mov	eax, DWORD PTR _i$74929[ebp]
	mov	DWORD PTR tv85[ebp], eax
	jmp	SHORT $LN34@Extract
$LN33@Extract:
	mov	ecx, DWORD PTR _i$74929[ebp]
	mov	edx, DWORD PTR _indices$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR tv85[ebp], eax
$LN34@Extract:
	mov	ecx, DWORD PTR tv85[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEAAVCItemEx@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CItemEx>::operator[]
	mov	DWORD PTR tv439[ebp], eax
	mov	edx, DWORD PTR tv439[ebp]
	mov	DWORD PTR _item$74933[ebp], edx
; Line 938
	mov	eax, DWORD PTR _item$74933[ebp]
	mov	ecx, DWORD PTR _totalUnPacked$74920[ebp]
	add	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _totalUnPacked$74920[ebp+4]
	adc	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _totalUnPacked$74920[ebp], ecx
	mov	DWORD PTR _totalUnPacked$74920[ebp+4], edx
; Line 939
	mov	eax, DWORD PTR _item$74933[ebp]
	mov	ecx, DWORD PTR _totalPacked$74921[ebp]
	add	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _totalPacked$74921[ebp+4]
	adc	edx, DWORD PTR [eax+20]
	mov	DWORD PTR _totalPacked$74921[ebp], ecx
	mov	DWORD PTR _totalPacked$74921[ebp+4], edx
; Line 940
	jmp	SHORT $LN26@Extract
$LN25@Extract:
; Line 941
	mov	esi, esp
	mov	eax, DWORD PTR _totalUnPacked$74920[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _totalUnPacked$74920[ebp]
	push	ecx
	mov	edx, DWORD PTR _extractCallback$[ebp]
	push	edx
	mov	eax, DWORD PTR _extractCallback$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv440[ebp], eax
	mov	eax, DWORD PTR tv440[ebp]
	mov	DWORD PTR ___result__$74934[ebp], eax
	cmp	DWORD PTR ___result__$74934[ebp], 0
	je	SHORT $LN24@Extract
	mov	ecx, DWORD PTR ___result__$74934[ebp]
	mov	DWORD PTR $T77023[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _myDecoder$74919[ebp]
	call	??1CZipDecoder@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T77023[ebp]
	jmp	$LN31@Extract
$LN24@Extract:
; Line 943
	mov	DWORD PTR _currentTotalUnPacked$74937[ebp], 0
	mov	DWORD PTR _currentTotalUnPacked$74937[ebp+4], 0
	mov	DWORD PTR _currentTotalPacked$74938[ebp], 0
	mov	DWORD PTR _currentTotalPacked$74938[ebp+4], 0
; Line 946
	push	56					; 00000038H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR tv441[ebp], eax
	mov	edx, DWORD PTR tv441[ebp]
	mov	DWORD PTR $T77025[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	cmp	DWORD PTR $T77025[ebp], 0
	je	SHORT $LN35@Extract
	mov	ecx, DWORD PTR $T77025[ebp]
	call	??0CLocalProgress@@QAE@XZ		; CLocalProgress::CLocalProgress
	mov	DWORD PTR tv443[ebp], eax
	mov	eax, DWORD PTR tv443[ebp]
	mov	DWORD PTR tv148[ebp], eax
	jmp	SHORT $LN36@Extract
$LN35@Extract:
	mov	DWORD PTR tv148[ebp], 0
$LN36@Extract:
	mov	ecx, DWORD PTR tv148[ebp]
	mov	DWORD PTR $T77024[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	mov	edx, DWORD PTR $T77024[ebp]
	mov	DWORD PTR _lps$74941[ebp], edx
; Line 947
	mov	eax, DWORD PTR _lps$74941[ebp]
	push	eax
	lea	ecx, DWORD PTR _progress$74947[ebp]
	call	??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+12], 3
; Line 948
	push	0
	mov	ecx, DWORD PTR _extractCallback$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _lps$74941[ebp]
	call	?Init@CLocalProgress@@QAEXPAUIProgress@@_N@Z ; CLocalProgress::Init
; Line 950
	mov	DWORD PTR _i$74929[ebp], 0
	jmp	SHORT $LN23@Extract
$LN22@Extract:
; Line 952
	mov	edx, DWORD PTR _i$74929[ebp]
	add	edx, 1
	mov	DWORD PTR _i$74929[ebp], edx
	mov	eax, DWORD PTR _currentTotalUnPacked$74937[ebp]
	add	eax, DWORD PTR _currentItemUnPacked$74939[ebp]
	mov	ecx, DWORD PTR _currentTotalUnPacked$74937[ebp+4]
	adc	ecx, DWORD PTR _currentItemUnPacked$74939[ebp+4]
	mov	DWORD PTR _currentTotalUnPacked$74937[ebp], eax
	mov	DWORD PTR _currentTotalUnPacked$74937[ebp+4], ecx
	mov	edx, DWORD PTR _currentTotalPacked$74938[ebp]
	add	edx, DWORD PTR _currentItemPacked$74940[ebp]
	mov	eax, DWORD PTR _currentTotalPacked$74938[ebp+4]
	adc	eax, DWORD PTR _currentItemPacked$74940[ebp+4]
	mov	DWORD PTR _currentTotalPacked$74938[ebp], edx
	mov	DWORD PTR _currentTotalPacked$74938[ebp+4], eax
$LN23@Extract:
	mov	ecx, DWORD PTR _i$74929[ebp]
	cmp	ecx, DWORD PTR _numItems$[ebp]
	jae	$LN21@Extract
; Line 954
	mov	DWORD PTR _currentItemUnPacked$74939[ebp], 0
	mov	DWORD PTR _currentItemUnPacked$74939[ebp+4], 0
; Line 955
	mov	DWORD PTR _currentItemPacked$74940[ebp], 0
	mov	DWORD PTR _currentItemPacked$74940[ebp+4], 0
; Line 957
	mov	edx, DWORD PTR _lps$74941[ebp]
	mov	eax, DWORD PTR _currentTotalPacked$74938[ebp]
	mov	DWORD PTR [edx+32], eax
	mov	ecx, DWORD PTR _currentTotalPacked$74938[ebp+4]
	mov	DWORD PTR [edx+36], ecx
; Line 958
	mov	edx, DWORD PTR _lps$74941[ebp]
	mov	eax, DWORD PTR _currentTotalUnPacked$74937[ebp]
	mov	DWORD PTR [edx+40], eax
	mov	ecx, DWORD PTR _currentTotalUnPacked$74937[ebp+4]
	mov	DWORD PTR [edx+44], ecx
; Line 959
	mov	ecx, DWORD PTR _lps$74941[ebp]
	call	?SetCur@CLocalProgress@@QAEJXZ		; CLocalProgress::SetCur
	mov	DWORD PTR tv149[ebp], eax
	mov	edx, DWORD PTR tv149[ebp]
	mov	DWORD PTR ___result__$74951[ebp], edx
	cmp	DWORD PTR ___result__$74951[ebp], 0
	je	SHORT $LN20@Extract
	mov	eax, DWORD PTR ___result__$74951[ebp]
	mov	DWORD PTR $T77028[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _progress$74947[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _myDecoder$74919[ebp]
	call	??1CZipDecoder@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T77028[ebp]
	jmp	$LN31@Extract
$LN20@Extract:
; Line 961
	lea	ecx, DWORD PTR _realOutStream$74955[ebp]
	call	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
	mov	DWORD PTR tv444[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 4
; Line 964
	xor	ecx, ecx
	cmp	DWORD PTR _testMode$[ebp], 0
	setne	cl
	mov	DWORD PTR _askMode$74956[ebp], ecx
; Line 965
	movzx	edx, BYTE PTR _allFilesMode$74922[ebp]
	test	edx, edx
	je	SHORT $LN37@Extract
	mov	eax, DWORD PTR _i$74929[ebp]
	mov	DWORD PTR tv181[ebp], eax
	jmp	SHORT $LN38@Extract
$LN37@Extract:
	mov	ecx, DWORD PTR _i$74929[ebp]
	mov	edx, DWORD PTR _indices$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR tv181[ebp], eax
$LN38@Extract:
	mov	ecx, DWORD PTR tv181[ebp]
	mov	DWORD PTR _index$74957[ebp], ecx
; Line 967
	mov	edx, DWORD PTR _index$74957[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEAAVCItemEx@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CItemEx>::operator[]
	mov	DWORD PTR tv445[ebp], eax
	mov	eax, DWORD PTR tv445[ebp]
	push	eax
	lea	ecx, DWORD PTR _item$74958[ebp]
	call	??0CItemEx@NZip@NArchive@@QAE@ABV012@@Z
	mov	DWORD PTR tv446[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 5
; Line 968
	lea	ecx, DWORD PTR _item$74958[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?IsLocalOffsetOK@CInArchive@NZip@NArchive@@QBE_NABVCItemEx@23@@Z ; NArchive::NZip::CInArchive::IsLocalOffsetOK
	mov	BYTE PTR tv447[ebp], al
	mov	dl, BYTE PTR tv447[ebp]
	mov	BYTE PTR _isLocalOffsetOK$74959[ebp], dl
; Line 969
	movzx	eax, BYTE PTR _isLocalOffsetOK$74959[ebp]
	test	eax, eax
	jne	SHORT $LN39@Extract
	lea	ecx, DWORD PTR _item$74958[ebp]
	call	?IsDir@CItem@NZip@NArchive@@QBE_NXZ	; NArchive::NZip::CItem::IsDir
	mov	BYTE PTR tv448[ebp], al
	movzx	ecx, BYTE PTR tv448[ebp]
	test	ecx, ecx
	jne	SHORT $LN39@Extract
	mov	DWORD PTR tv204[ebp], 1
	jmp	SHORT $LN40@Extract
$LN39@Extract:
	mov	DWORD PTR tv204[ebp], 0
$LN40@Extract:
	mov	dl, BYTE PTR tv204[ebp]
	mov	BYTE PTR _skip$74960[ebp], dl
; Line 970
	movzx	eax, BYTE PTR _skip$74960[ebp]
	test	eax, eax
	je	SHORT $LN19@Extract
; Line 971
	mov	DWORD PTR _askMode$74956[ebp], 2
$LN19@Extract:
; Line 973
	mov	ecx, DWORD PTR _item$74958[ebp+8]
	mov	DWORD PTR _currentItemUnPacked$74939[ebp], ecx
	mov	edx, DWORD PTR _item$74958[ebp+12]
	mov	DWORD PTR _currentItemUnPacked$74939[ebp+4], edx
; Line 974
	mov	eax, DWORD PTR _item$74958[ebp+16]
	mov	DWORD PTR _currentItemPacked$74940[ebp], eax
	mov	ecx, DWORD PTR _item$74958[ebp+20]
	mov	DWORD PTR _currentItemPacked$74940[ebp+4], ecx
; Line 976
	lea	ecx, DWORD PTR _realOutStream$74955[ebp]
	call	??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator&
	mov	DWORD PTR tv449[ebp], eax
	mov	esi, esp
	mov	edx, DWORD PTR _askMode$74956[ebp]
	push	edx
	mov	eax, DWORD PTR tv449[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$74957[ebp]
	push	ecx
	mov	edx, DWORD PTR _extractCallback$[ebp]
	push	edx
	mov	eax, DWORD PTR _extractCallback$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv450[ebp], eax
	mov	eax, DWORD PTR tv450[ebp]
	mov	DWORD PTR ___result__$74962[ebp], eax
	cmp	DWORD PTR ___result__$74962[ebp], 0
	je	SHORT $LN18@Extract
	mov	ecx, DWORD PTR ___result__$74962[ebp]
	mov	DWORD PTR $T77033[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _item$74958[ebp]
	call	??1CItemEx@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _realOutStream$74955[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _progress$74947[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _myDecoder$74919[ebp]
	call	??1CZipDecoder@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T77033[ebp]
	jmp	$LN31@Extract
$LN18@Extract:
; Line 978
	movzx	edx, BYTE PTR _isLocalOffsetOK$74959[ebp]
	test	edx, edx
	jne	$LN17@Extract
; Line 980
	mov	esi, esp
	mov	eax, DWORD PTR _askMode$74956[ebp]
	push	eax
	mov	ecx, DWORD PTR _extractCallback$[ebp]
	push	ecx
	mov	edx, DWORD PTR _extractCallback$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv451[ebp], eax
	mov	edx, DWORD PTR tv451[ebp]
	mov	DWORD PTR ___result__$74966[ebp], edx
	cmp	DWORD PTR ___result__$74966[ebp], 0
	je	SHORT $LN16@Extract
	mov	eax, DWORD PTR ___result__$74966[ebp]
	mov	DWORD PTR $T77034[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _item$74958[ebp]
	call	??1CItemEx@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _realOutStream$74955[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _progress$74947[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _myDecoder$74919[ebp]
	call	??1CZipDecoder@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T77034[ebp]
	jmp	$LN31@Extract
$LN16@Extract:
; Line 981
	lea	ecx, DWORD PTR _realOutStream$74955[ebp]
	call	?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ; CMyComPtr<ISequentialOutStream>::Release
; Line 982
	mov	esi, esp
	push	4
	mov	ecx, DWORD PTR _extractCallback$[ebp]
	push	ecx
	mov	edx, DWORD PTR _extractCallback$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv452[ebp], eax
	mov	edx, DWORD PTR tv452[ebp]
	mov	DWORD PTR ___result__$74969[ebp], edx
	cmp	DWORD PTR ___result__$74969[ebp], 0
	je	SHORT $LN15@Extract
	mov	eax, DWORD PTR ___result__$74969[ebp]
	mov	DWORD PTR $T77035[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _item$74958[ebp]
	call	??1CItemEx@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _realOutStream$74955[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _progress$74947[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _myDecoder$74919[ebp]
	call	??1CZipDecoder@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T77035[ebp]
	jmp	$LN31@Extract
$LN15@Extract:
; Line 983
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _item$74958[ebp]
	call	??1CItemEx@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _realOutStream$74955[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	jmp	$LN22@Extract
$LN17@Extract:
; Line 985
	movzx	ecx, BYTE PTR _item$74958[ebp+92]
	test	ecx, ecx
	jne	$LN14@Extract
; Line 987
	lea	edx, DWORD PTR _item$74958[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?ReadLocalItemAfterCdItem@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z ; NArchive::NZip::CInArchive::ReadLocalItemAfterCdItem
	mov	DWORD PTR tv453[ebp], eax
	mov	eax, DWORD PTR tv453[ebp]
	mov	DWORD PTR _res$74973[ebp], eax
; Line 988
	cmp	DWORD PTR _res$74973[ebp], 1
	jne	$LN13@Extract
; Line 990
	lea	ecx, DWORD PTR _item$74958[ebp]
	call	?IsDir@CItem@NZip@NArchive@@QBE_NXZ	; NArchive::NZip::CItem::IsDir
	mov	BYTE PTR tv454[ebp], al
	movzx	ecx, BYTE PTR tv454[ebp]
	test	ecx, ecx
	jne	SHORT $LN11@Extract
	lea	ecx, DWORD PTR _realOutStream$74955[ebp]
	call	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
	mov	DWORD PTR tv455[ebp], eax
	cmp	DWORD PTR tv455[ebp], 0
	jne	SHORT $LN11@Extract
	cmp	DWORD PTR _testMode$[ebp], 0
	je	$LN12@Extract
$LN11@Extract:
; Line 992
	mov	esi, esp
	mov	edx, DWORD PTR _askMode$74956[ebp]
	push	edx
	mov	eax, DWORD PTR _extractCallback$[ebp]
	push	eax
	mov	ecx, DWORD PTR _extractCallback$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv456[ebp], eax
	mov	ecx, DWORD PTR tv456[ebp]
	mov	DWORD PTR ___result__$74978[ebp], ecx
	cmp	DWORD PTR ___result__$74978[ebp], 0
	je	SHORT $LN10@Extract
	mov	edx, DWORD PTR ___result__$74978[ebp]
	mov	DWORD PTR $T77036[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _item$74958[ebp]
	call	??1CItemEx@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _realOutStream$74955[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _progress$74947[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _myDecoder$74919[ebp]
	call	??1CZipDecoder@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T77036[ebp]
	jmp	$LN31@Extract
$LN10@Extract:
; Line 993
	lea	ecx, DWORD PTR _realOutStream$74955[ebp]
	call	?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ; CMyComPtr<ISequentialOutStream>::Release
; Line 994
	mov	esi, esp
	push	8
	mov	eax, DWORD PTR _extractCallback$[ebp]
	push	eax
	mov	ecx, DWORD PTR _extractCallback$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv457[ebp], eax
	mov	ecx, DWORD PTR tv457[ebp]
	mov	DWORD PTR ___result__$74981[ebp], ecx
	cmp	DWORD PTR ___result__$74981[ebp], 0
	je	SHORT $LN12@Extract
	mov	edx, DWORD PTR ___result__$74981[ebp]
	mov	DWORD PTR $T77037[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _item$74958[ebp]
	call	??1CItemEx@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _realOutStream$74955[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _progress$74947[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _myDecoder$74919[ebp]
	call	??1CZipDecoder@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T77037[ebp]
	jmp	$LN31@Extract
$LN12@Extract:
; Line 996
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _item$74958[ebp]
	call	??1CItemEx@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _realOutStream$74955[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	jmp	$LN22@Extract
$LN13@Extract:
; Line 998
	mov	eax, DWORD PTR _res$74973[ebp]
	mov	DWORD PTR ___result__$74984[ebp], eax
	cmp	DWORD PTR ___result__$74984[ebp], 0
	je	SHORT $LN14@Extract
	mov	ecx, DWORD PTR ___result__$74984[ebp]
	mov	DWORD PTR $T77038[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _item$74958[ebp]
	call	??1CItemEx@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _realOutStream$74955[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _progress$74947[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _myDecoder$74919[ebp]
	call	??1CZipDecoder@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T77038[ebp]
	jmp	$LN31@Extract
$LN14@Extract:
; Line 1001
	lea	ecx, DWORD PTR _item$74958[ebp]
	call	?IsDir@CItem@NZip@NArchive@@QBE_NXZ	; NArchive::NZip::CItem::IsDir
	mov	BYTE PTR tv458[ebp], al
	movzx	edx, BYTE PTR tv458[ebp]
	test	edx, edx
	je	$LN7@Extract
; Line 1005
	mov	esi, esp
	mov	eax, DWORD PTR _askMode$74956[ebp]
	push	eax
	mov	ecx, DWORD PTR _extractCallback$[ebp]
	push	ecx
	mov	edx, DWORD PTR _extractCallback$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv459[ebp], eax
	mov	edx, DWORD PTR tv459[ebp]
	mov	DWORD PTR ___result__$74988[ebp], edx
	cmp	DWORD PTR ___result__$74988[ebp], 0
	je	SHORT $LN6@Extract
	mov	eax, DWORD PTR ___result__$74988[ebp]
	mov	DWORD PTR $T77039[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _item$74958[ebp]
	call	??1CItemEx@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _realOutStream$74955[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _progress$74947[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _myDecoder$74919[ebp]
	call	??1CZipDecoder@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T77039[ebp]
	jmp	$LN31@Extract
$LN6@Extract:
; Line 1006
	lea	ecx, DWORD PTR _realOutStream$74955[ebp]
	call	?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ; CMyComPtr<ISequentialOutStream>::Release
; Line 1007
	mov	esi, esp
	push	0
	mov	ecx, DWORD PTR _extractCallback$[ebp]
	push	ecx
	mov	edx, DWORD PTR _extractCallback$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv460[ebp], eax
	mov	edx, DWORD PTR tv460[ebp]
	mov	DWORD PTR ___result__$74991[ebp], edx
	cmp	DWORD PTR ___result__$74991[ebp], 0
	je	SHORT $LN5@Extract
	mov	eax, DWORD PTR ___result__$74991[ebp]
	mov	DWORD PTR $T77040[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _item$74958[ebp]
	call	??1CItemEx@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _realOutStream$74955[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _progress$74947[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _myDecoder$74919[ebp]
	call	??1CZipDecoder@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T77040[ebp]
	jmp	$LN31@Extract
$LN5@Extract:
; Line 1009
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _item$74958[ebp]
	call	??1CItemEx@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _realOutStream$74955[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	jmp	$LN22@Extract
$LN7@Extract:
; Line 1012
	cmp	DWORD PTR _testMode$[ebp], 0
	jne	SHORT $LN4@Extract
	lea	ecx, DWORD PTR _realOutStream$74955[ebp]
	call	??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ ; CMyComPtr<ISequentialOutStream>::operator!
	mov	BYTE PTR tv461[ebp], al
	movzx	ecx, BYTE PTR tv461[ebp]
	test	ecx, ecx
	je	SHORT $LN4@Extract
; Line 1013
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _item$74958[ebp]
	call	??1CItemEx@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _realOutStream$74955[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	jmp	$LN22@Extract
$LN4@Extract:
; Line 1015
	mov	esi, esp
	mov	edx, DWORD PTR _askMode$74956[ebp]
	push	edx
	mov	eax, DWORD PTR _extractCallback$[ebp]
	push	eax
	mov	ecx, DWORD PTR _extractCallback$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv462[ebp], eax
	mov	ecx, DWORD PTR tv462[ebp]
	mov	DWORD PTR ___result__$74995[ebp], ecx
	cmp	DWORD PTR ___result__$74995[ebp], 0
	je	SHORT $LN3@Extract
	mov	edx, DWORD PTR ___result__$74995[ebp]
	mov	DWORD PTR $T77041[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _item$74958[ebp]
	call	??1CItemEx@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _realOutStream$74955[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _progress$74947[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _myDecoder$74919[ebp]
	call	??1CZipDecoder@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T77041[ebp]
	jmp	$LN31@Extract
$LN3@Extract:
; Line 1025
	lea	ecx, DWORD PTR _progress$74947[ebp]
	call	??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *
	mov	DWORD PTR tv463[ebp], eax
	lea	ecx, DWORD PTR _realOutStream$74955[ebp]
	call	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
	mov	DWORD PTR tv464[ebp], eax
	lea	eax, DWORD PTR _res$74998[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+184]
	push	edx
	mov	eax, DWORD PTR tv463[ebp]
	push	eax
	mov	ecx, DWORD PTR _extractCallback$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv464[ebp]
	push	edx
	lea	eax, DWORD PTR _item$74958[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	push	ecx
	lea	ecx, DWORD PTR _myDecoder$74919[ebp]
	call	?Decode@CZipDecoder@NZip@NArchive@@QAEJAAVCInArchive@23@ABVCItemEx@23@PAUISequentialOutStream@@PAUIArchiveExtractCallback@@PAUICompressProgressInfo@@IAAH@Z ; NArchive::NZip::CZipDecoder::Decode
	mov	DWORD PTR tv465[ebp], eax
	mov	edx, DWORD PTR tv465[ebp]
	mov	DWORD PTR _hres$74999[ebp], edx
; Line 1026
	mov	eax, DWORD PTR _hres$74999[ebp]
	mov	DWORD PTR ___result__$75000[ebp], eax
	cmp	DWORD PTR ___result__$75000[ebp], 0
	je	SHORT $LN2@Extract
	mov	ecx, DWORD PTR ___result__$75000[ebp]
	mov	DWORD PTR $T77042[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _item$74958[ebp]
	call	??1CItemEx@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _realOutStream$74955[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _progress$74947[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _myDecoder$74919[ebp]
	call	??1CZipDecoder@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T77042[ebp]
	jmp	$LN31@Extract
$LN2@Extract:
; Line 1027
	lea	ecx, DWORD PTR _realOutStream$74955[ebp]
	call	?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ; CMyComPtr<ISequentialOutStream>::Release
; Line 1029
	mov	esi, esp
	mov	edx, DWORD PTR _res$74998[ebp]
	push	edx
	mov	eax, DWORD PTR _extractCallback$[ebp]
	push	eax
	mov	ecx, DWORD PTR _extractCallback$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv466[ebp], eax
	mov	ecx, DWORD PTR tv466[ebp]
	mov	DWORD PTR ___result__$75003[ebp], ecx
	cmp	DWORD PTR ___result__$75003[ebp], 0
	je	SHORT $LN1@Extract
	mov	edx, DWORD PTR ___result__$75003[ebp]
	mov	DWORD PTR $T77043[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _item$74958[ebp]
	call	??1CItemEx@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _realOutStream$74955[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _progress$74947[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _myDecoder$74919[ebp]
	call	??1CZipDecoder@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T77043[ebp]
	jmp	$LN31@Extract
$LN1@Extract:
; Line 1030
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _item$74958[ebp]
	call	??1CItemEx@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _realOutStream$74955[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	jmp	$LN22@Extract
$LN21@Extract:
; Line 1031
	mov	eax, DWORD PTR _lps$74941[ebp]
	mov	ecx, DWORD PTR _currentTotalPacked$74938[ebp]
	mov	DWORD PTR [eax+32], ecx
	mov	edx, DWORD PTR _currentTotalPacked$74938[ebp+4]
	mov	DWORD PTR [eax+36], edx
; Line 1032
	mov	eax, DWORD PTR _lps$74941[ebp]
	mov	ecx, DWORD PTR _currentTotalUnPacked$74937[ebp]
	mov	DWORD PTR [eax+40], ecx
	mov	edx, DWORD PTR _currentTotalUnPacked$74937[ebp+4]
	mov	DWORD PTR [eax+44], edx
; Line 1033
	mov	ecx, DWORD PTR _lps$74941[ebp]
	call	?SetCur@CLocalProgress@@QAEJXZ		; CLocalProgress::SetCur
	mov	DWORD PTR tv467[ebp], eax
	mov	eax, DWORD PTR tv467[ebp]
	mov	DWORD PTR $T77044[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _progress$74947[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _myDecoder$74919[ebp]
	call	??1CZipDecoder@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T77044[ebp]
	jmp	SHORT $LN31@Extract
__catch$?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$0:
; Line 1034
	mov	DWORD PTR $T77045[ebp], -2147024882	; 8007000eH
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN49@Extract
	ret	0
	mov	eax, __tryend$?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$1
	ret	0
__tryend$?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$1:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN31@Extract
$LN49@Extract:
	mov	eax, DWORD PTR $T77045[ebp]
$LN31@Extract:
; Line 1035
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN58@Extract
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 564				; 00000234H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
	npad	1
$LN58@Extract:
	DD	5
	DD	$LN57@Extract
$LN57@Extract:
	DD	-68					; ffffffbcH
	DD	48					; 00000030H
	DD	$LN51@Extract
	DD	-148					; ffffff6cH
	DD	4
	DD	$LN52@Extract
	DD	-164					; ffffff5cH
	DD	4
	DD	$LN53@Extract
	DD	-284					; fffffee4H
	DD	104					; 00000068H
	DD	$LN54@Extract
	DD	-340					; fffffeacH
	DD	4
	DD	$LN55@Extract
$LN55@Extract:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN54@Extract:
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	0
$LN53@Extract:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	79					; 0000004fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN52@Extract:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	103					; 00000067H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	0
$LN51@Extract:
	DB	109					; 0000006dH
	DB	121					; 00000079H
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$2:
	lea	ecx, DWORD PTR _myDecoder$74919[ebp]
	jmp	??1CZipDecoder@NZip@NArchive@@QAE@XZ
__unwindfunclet$?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$3:
	mov	eax, DWORD PTR $T77025[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$4:
	lea	ecx, DWORD PTR _progress$74947[ebp]
	jmp	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
__unwindfunclet$?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$5:
	lea	ecx, DWORD PTR _realOutStream$74955[ebp]
	jmp	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
__unwindfunclet$?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$6:
	lea	ecx, DWORD PTR _item$74958[ebp]
	jmp	??1CItemEx@NZip@NArchive@@QAE@XZ
__ehhandler$?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-568]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Extract@CHandler@NZip@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z ENDP ; NArchive::NZip::CHandler::Extract
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsLocalOffsetOK@CInArchive@NZip@NArchive@@QBE_NABVCItemEx@23@@Z
_TEXT	SEGMENT
tv80 = -16						; size = 4
tv93 = -12						; size = 8
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?IsLocalOffsetOK@CInArchive@NZip@NArchive@@QBE_NABVCItemEx@23@@Z PROC ; NArchive::NZip::CInArchive::IsLocalOffsetOK, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\zipin.h
; Line 156
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 157
	mov	eax, DWORD PTR _item$[ebp]
	movzx	ecx, BYTE PTR [eax+92]
	test	ecx, ecx
	je	SHORT $LN1@IsLocalOff
; Line 158
	mov	al, 1
	jmp	SHORT $LN2@IsLocalOff
$LN1@IsLocalOff:
; Line 159
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _item$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	add	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR [edx+60]
	adc	edx, DWORD PTR [eax+68]
	mov	DWORD PTR tv93[ebp], ecx
	mov	DWORD PTR tv93[ebp+4], edx
	cmp	DWORD PTR tv93[ebp+4], 0
	jl	SHORT $LN4@IsLocalOff
	jg	SHORT $LN6@IsLocalOff
	cmp	DWORD PTR tv93[ebp], 0
	jb	SHORT $LN4@IsLocalOff
$LN6@IsLocalOff:
	mov	DWORD PTR tv80[ebp], 1
	jmp	SHORT $LN5@IsLocalOff
$LN4@IsLocalOff:
	mov	DWORD PTR tv80[ebp], 0
$LN5@IsLocalOff:
	mov	al, BYTE PTR tv80[ebp]
$LN2@IsLocalOff:
; Line 160
	mov	esp, ebp
	pop	ebp
	ret	4
?IsLocalOffsetOK@CInArchive@NZip@NArchive@@QBE_NABVCItemEx@23@@Z ENDP ; NArchive::NZip::CInArchive::IsLocalOffsetOK
_TEXT	ENDS
PUBLIC	??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
PUBLIC	??0?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CMethodItem>::CObjectVector<NArchive::NZip::CMethodItem>
PUBLIC	??0?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::CMyComPtr<ICryptoGetTextPassword>
;	COMDAT xdata$x
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\ziphandler.cpp
xdata$x	SEGMENT
__ehfuncinfo$??0CZipDecoder@NZip@NArchive@@QAE@XZ DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??0CZipDecoder@NZip@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0CZipDecoder@NZip@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CZipDecoder@NZip@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CZipDecoder@NZip@NArchive@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CZipDecoder@NZip@NArchive@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CZipDecoder@NZip@NArchive@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0CZipDecoder@NZip@NArchive@@QAE@XZ$4
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CZipDecoder@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CZipDecoder@NZip@NArchive@@QAE@XZ PROC		; NArchive::NZip::CZipDecoder::CZipDecoder, COMDAT
; _this$ = ecx
; Line 567
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CZipDecoder@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::CMyComPtr<ICompressFilter>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::CMyComPtr<ICompressFilter>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??0?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::CMyComPtr<ICompressFilter>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??0?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::CMyComPtr<ICryptoGetTextPassword>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CMethodItem>::CObjectVector<NArchive::NZip::CMethodItem>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CZipDecoder@NZip@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>
__unwindfunclet$??0CZipDecoder@NZip@NArchive@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	jmp	??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>
__unwindfunclet$??0CZipDecoder@NZip@NArchive@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	jmp	??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>
__unwindfunclet$??0CZipDecoder@NZip@NArchive@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	jmp	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
__unwindfunclet$??0CZipDecoder@NZip@NArchive@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	jmp	??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
__ehhandler$??0CZipDecoder@NZip@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CZipDecoder@NZip@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CZipDecoder@NZip@NArchive@@QAE@XZ ENDP		; NArchive::NZip::CZipDecoder::CZipDecoder
PUBLIC	??1?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CMethodItem>::~CObjectVector<NArchive::NZip::CMethodItem>
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CZipDecoder@NZip@NArchive@@QAE@XZ DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??1CZipDecoder@NZip@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1CZipDecoder@NZip@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CZipDecoder@NZip@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CZipDecoder@NZip@NArchive@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CZipDecoder@NZip@NArchive@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CZipDecoder@NZip@NArchive@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1CZipDecoder@NZip@NArchive@@QAE@XZ$4
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CZipDecoder@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CZipDecoder@NZip@NArchive@@QAE@XZ PROC		; NArchive::NZip::CZipDecoder::~CZipDecoder, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CZipDecoder@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??1?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CMethodItem>::~CObjectVector<NArchive::NZip::CMethodItem>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CZipDecoder@NZip@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>
__unwindfunclet$??1CZipDecoder@NZip@NArchive@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	jmp	??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>
__unwindfunclet$??1CZipDecoder@NZip@NArchive@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	jmp	??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>
__unwindfunclet$??1CZipDecoder@NZip@NArchive@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	jmp	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
__unwindfunclet$??1CZipDecoder@NZip@NArchive@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	jmp	??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
__ehhandler$??1CZipDecoder@NZip@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CZipDecoder@NZip@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CZipDecoder@NZip@NArchive@@QAE@XZ ENDP		; NArchive::NZip::CZipDecoder::~CZipDecoder
PUBLIC	??0CItem@NZip@NArchive@@QAE@ABV012@@Z		; NArchive::NZip::CItem::CItem
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CItemEx@NZip@NArchive@@QAE@ABV012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CItemEx@NZip@NArchive@@QAE@ABV012@@Z PROC		; NArchive::NZip::CItemEx::CItemEx, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CItem@NZip@NArchive@@QAE@ABV012@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	DWORD PTR [ecx+96], eax
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CItemEx@NZip@NArchive@@QAE@ABV012@@Z ENDP		; NArchive::NZip::CItemEx::CItemEx
_TEXT	ENDS
PUBLIC	??1CItem@NZip@NArchive@@QAE@XZ			; NArchive::NZip::CItem::~CItem
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CItemEx@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CItemEx@NZip@NArchive@@QAE@XZ PROC			; NArchive::NZip::CItemEx::~CItemEx, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CItem@NZip@NArchive@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CItemEx@NZip@NArchive@@QAE@XZ ENDP			; NArchive::NZip::CItemEx::~CItemEx
_TEXT	ENDS
PUBLIC	??1CExtraBlock@NZip@NArchive@@QAE@XZ		; NArchive::NZip::CExtraBlock::~CExtraBlock
PUBLIC	??1CLocalItem@NZip@NArchive@@QAE@XZ		; NArchive::NZip::CLocalItem::~CLocalItem
PUBLIC	??0?$CBuffer@E@@QAE@ABV0@@Z			; CBuffer<unsigned char>::CBuffer<unsigned char>
PUBLIC	??0CExtraBlock@NZip@NArchive@@QAE@ABU012@@Z	; NArchive::NZip::CExtraBlock::CExtraBlock
PUBLIC	??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z	; NArchive::NZip::CLocalItem::CLocalItem
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CItem@NZip@NArchive@@QAE@ABV012@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CItem@NZip@NArchive@@QAE@ABV012@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CItem@NZip@NArchive@@QAE@ABV012@@Z$1
__ehfuncinfo$??0CItem@NZip@NArchive@@QAE@ABV012@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CItem@NZip@NArchive@@QAE@ABV012@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CItem@NZip@NArchive@@QAE@ABV012@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0CItem@NZip@NArchive@@QAE@ABV012@@Z PROC		; NArchive::NZip::CItem::CItem, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CItem@NZip@NArchive@@QAE@ABV012@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dx, WORD PTR [ecx+56]
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+56], dx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	ax, WORD PTR [edx+58]
	mov	WORD PTR [ecx+58], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+60]
	mov	DWORD PTR [ecx+60], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+64]
	mov	DWORD PTR [ecx+64], eax
	mov	edx, DWORD PTR [edx+68]
	mov	DWORD PTR [ecx+68], edx
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 72					; 00000048H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	call	??0CExtraBlock@NZip@NArchive@@QAE@ABU012@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 84					; 00000054H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	??0?$CBuffer@E@@QAE@ABV0@@Z		; CBuffer<unsigned char>::CBuffer<unsigned char>
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cl, BYTE PTR [eax+92]
	mov	BYTE PTR [edx+92], cl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cl, BYTE PTR [eax+93]
	mov	BYTE PTR [edx+93], cl
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CItem@NZip@NArchive@@QAE@ABV012@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CLocalItem@NZip@NArchive@@QAE@XZ
__unwindfunclet$??0CItem@NZip@NArchive@@QAE@ABV012@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	jmp	??1CExtraBlock@NZip@NArchive@@QAE@XZ
__ehhandler$??0CItem@NZip@NArchive@@QAE@ABV012@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CItem@NZip@NArchive@@QAE@ABV012@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CItem@NZip@NArchive@@QAE@ABV012@@Z ENDP		; NArchive::NZip::CItem::CItem
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CLocalItem@NZip@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CLocalItem@NZip@NArchive@@QAE@XZ$0
__ehfuncinfo$??1CLocalItem@NZip@NArchive@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CLocalItem@NZip@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CLocalItem@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CLocalItem@NZip@NArchive@@QAE@XZ PROC		; NArchive::NZip::CLocalItem::~CLocalItem, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CLocalItem@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??1CExtraBlock@NZip@NArchive@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CLocalItem@NZip@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	jmp	??1AString@@QAE@XZ			; AString::~AString
__ehhandler$??1CLocalItem@NZip@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CLocalItem@NZip@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CLocalItem@NZip@NArchive@@QAE@XZ ENDP		; NArchive::NZip::CLocalItem::~CLocalItem
PUBLIC	??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CExtraSubBlock>::~CObjectVector<NArchive::NZip::CExtraSubBlock>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CExtraBlock@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CExtraBlock@NZip@NArchive@@QAE@XZ PROC		; NArchive::NZip::CExtraBlock::~CExtraBlock, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CExtraSubBlock>::~CObjectVector<NArchive::NZip::CExtraSubBlock>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CExtraBlock@NZip@NArchive@@QAE@XZ ENDP		; NArchive::NZip::CExtraBlock::~CExtraBlock
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CItem@NZip@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CItem@NZip@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CItem@NZip@NArchive@@QAE@XZ$1
__ehfuncinfo$??1CItem@NZip@NArchive@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CItem@NZip@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CItem@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CItem@NZip@NArchive@@QAE@XZ PROC			; NArchive::NZip::CItem::~CItem, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CItem@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	call	??1CExtraBlock@NZip@NArchive@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CLocalItem@NZip@NArchive@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CItem@NZip@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CLocalItem@NZip@NArchive@@QAE@XZ
__unwindfunclet$??1CItem@NZip@NArchive@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	jmp	??1CExtraBlock@NZip@NArchive@@QAE@XZ
__ehhandler$??1CItem@NZip@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CItem@NZip@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CItem@NZip@NArchive@@QAE@XZ ENDP			; NArchive::NZip::CItem::~CItem
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z$0
__ehfuncinfo$??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z PROC		; NArchive::NZip::CLocalItem::CLocalItem, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dx, WORD PTR [ecx+2]
	mov	WORD PTR [eax+2], dx
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cx, WORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+4], cx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], ecx
	mov	eax, DWORD PTR [eax+20]
	mov	DWORD PTR [edx+20], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [ecx+24], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [ecx+28], eax
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 32					; 00000020H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??0AString@@QAE@ABV0@@Z			; AString::AString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 44					; 0000002cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??0CExtraBlock@NZip@NArchive@@QAE@ABU012@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	jmp	??1AString@@QAE@XZ			; AString::~AString
__ehhandler$??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z ENDP		; NArchive::NZip::CLocalItem::CLocalItem
PUBLIC	??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z ; CObjectVector<NArchive::NZip::CExtraSubBlock>::CObjectVector<NArchive::NZip::CExtraSubBlock>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CExtraBlock@NZip@NArchive@@QAE@ABU012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CExtraBlock@NZip@NArchive@@QAE@ABU012@@Z PROC	; NArchive::NZip::CExtraBlock::CExtraBlock, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z ; CObjectVector<NArchive::NZip::CExtraSubBlock>::CObjectVector<NArchive::NZip::CExtraSubBlock>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CExtraBlock@NZip@NArchive@@QAE@ABU012@@Z ENDP	; NArchive::NZip::CExtraBlock::CExtraBlock
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ PROC ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ENDP ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z PROC ; CMyComPtr<ISequentialInStream>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@2
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@2:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@2
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@2:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ENDP ; CMyComPtr<ISequentialInStream>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lp$ = 8						; size = 4
??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@ABV0@@Z PROC ; CMyComPtr<ISequentialInStream>::operator=, COMDAT
; _this$ = ecx
; Line 36
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _lp$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@ABV0@@Z ENDP ; CMyComPtr<ISequentialInStream>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??7?$CMyComPtr@UISequentialInStream@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??7?$CMyComPtr@UISequentialInStream@@@@QBE_NXZ PROC	; CMyComPtr<ISequentialInStream>::operator!, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
??7?$CMyComPtr@UISequentialInStream@@@@QBE_NXZ ENDP	; CMyComPtr<ISequentialInStream>::operator!
_TEXT	ENDS
PUBLIC	?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ ; CMyComPtr<ISequentialInStream>::Release
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Attach@?$CMyComPtr@UISequentialInStream@@@@QAEXPAUISequentialInStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p2$ = 8						; size = 4
?Attach@?$CMyComPtr@UISequentialInStream@@@@QAEXPAUISequentialInStream@@@Z PROC ; CMyComPtr<ISequentialInStream>::Attach, COMDAT
; _this$ = ecx
; Line 40
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 41
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ ; CMyComPtr<ISequentialInStream>::Release
; Line 42
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p2$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 43
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Attach@?$CMyComPtr@UISequentialInStream@@@@QAEXPAUISequentialInStream@@@Z ENDP ; CMyComPtr<ISequentialInStream>::Attach
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z PROC ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@CMyComPtr@2
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@2:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z ENDP ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@3:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ PROC ; CMyComPtr<ISequentialOutStream>::Release, COMDAT
; _this$ = ecx
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Release@11
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
$LN2@Release@11:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ENDP ; CMyComPtr<ISequentialOutStream>::Release
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ PROC ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ENDP ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ PROC ; CMyComPtr<ISequentialOutStream>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ ENDP ; CMyComPtr<ISequentialOutStream>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z PROC ; CMyComPtr<ISequentialOutStream>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@3
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@3:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@3
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@3:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ENDP ; CMyComPtr<ISequentialOutStream>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ PROC	; CMyComPtr<ISequentialOutStream>::operator!, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ ENDP	; CMyComPtr<ISequentialOutStream>::operator!
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ PROC	; CMyComPtr<ICryptoSetPassword>::CMyComPtr<ICryptoSetPassword>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ ENDP	; CMyComPtr<ICryptoSetPassword>::CMyComPtr<ICryptoSetPassword>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ PROC	; CMyComPtr<ICryptoSetPassword>::~CMyComPtr<ICryptoSetPassword>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@4:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ ENDP	; CMyComPtr<ICryptoSetPassword>::~CMyComPtr<ICryptoSetPassword>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UICryptoSetPassword@@@@QAEPAPAUICryptoSetPassword@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UICryptoSetPassword@@@@QAEPAPAUICryptoSetPassword@@XZ PROC ; CMyComPtr<ICryptoSetPassword>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UICryptoSetPassword@@@@QAEPAPAUICryptoSetPassword@@XZ ENDP ; CMyComPtr<ICryptoSetPassword>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ PROC ; CMyComPtr<ICryptoSetPassword>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ ENDP ; CMyComPtr<ICryptoSetPassword>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ PROC ; CMyComPtr<ICompressSetDecoderProperties2>::CMyComPtr<ICompressSetDecoderProperties2>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ ENDP ; CMyComPtr<ICompressSetDecoderProperties2>::CMyComPtr<ICompressSetDecoderProperties2>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ PROC ; CMyComPtr<ICompressSetDecoderProperties2>::~CMyComPtr<ICompressSetDecoderProperties2>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@5:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ ENDP ; CMyComPtr<ICompressSetDecoderProperties2>::~CMyComPtr<ICompressSetDecoderProperties2>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBEPAUICompressSetDecoderProperties2@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBEPAUICompressSetDecoderProperties2@@XZ PROC ; CMyComPtr<ICompressSetDecoderProperties2>::operator ICompressSetDecoderProperties2 *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBEPAUICompressSetDecoderProperties2@@XZ ENDP ; CMyComPtr<ICompressSetDecoderProperties2>::operator ICompressSetDecoderProperties2 *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAEPAPAUICompressSetDecoderProperties2@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAEPAPAUICompressSetDecoderProperties2@@XZ PROC ; CMyComPtr<ICompressSetDecoderProperties2>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAEPAPAUICompressSetDecoderProperties2@@XZ ENDP ; CMyComPtr<ICompressSetDecoderProperties2>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBEPAUICompressSetDecoderProperties2@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBEPAUICompressSetDecoderProperties2@@XZ PROC ; CMyComPtr<ICompressSetDecoderProperties2>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBEPAUICompressSetDecoderProperties2@@XZ ENDP ; CMyComPtr<ICompressSetDecoderProperties2>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICompressFilter@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UICompressFilter@@@@QAE@XZ PROC		; CMyComPtr<ICompressFilter>::CMyComPtr<ICompressFilter>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UICompressFilter@@@@QAE@XZ ENDP		; CMyComPtr<ICompressFilter>::CMyComPtr<ICompressFilter>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ PROC		; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@6:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ ENDP		; CMyComPtr<ICompressFilter>::~CMyComPtr<ICompressFilter>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@PAU1@@Z PROC ; CMyComPtr<ICompressFilter>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@4
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@4:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@4
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@4:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@PAU1@@Z ENDP ; CMyComPtr<ICompressFilter>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lp$ = 8						; size = 4
??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@ABV0@@Z PROC ; CMyComPtr<ICompressFilter>::operator=, COMDAT
; _this$ = ecx
; Line 36
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _lp$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@PAU1@@Z ; CMyComPtr<ICompressFilter>::operator=
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@ABV0@@Z ENDP ; CMyComPtr<ICompressFilter>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??7?$CMyComPtr@UICompressFilter@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??7?$CMyComPtr@UICompressFilter@@@@QBE_NXZ PROC		; CMyComPtr<ICompressFilter>::operator!, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
??7?$CMyComPtr@UICompressFilter@@@@QBE_NXZ ENDP		; CMyComPtr<ICompressFilter>::operator!
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z PROC ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@CMyComPtr@7
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@7:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z ENDP ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ PROC	; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@8:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ENDP	; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ PROC ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ENDP ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CBuffer@E@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CBuffer@E@@QAE@XZ PROC				; CBuffer<unsigned char>::CBuffer<unsigned char>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mybuffer.h
; Line 24
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CBuffer@E@@QAE@XZ ENDP				; CBuffer<unsigned char>::CBuffer<unsigned char>
_TEXT	ENDS
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CBuffer@E@@QAE@ABV0@@Z
_TEXT	SEGMENT
$T77223 = -12						; size = 4
_size$ = -8						; size = 4
_this$ = -4						; size = 4
_buffer$ = 8						; size = 4
??0?$CBuffer@E@@QAE@ABV0@@Z PROC			; CBuffer<unsigned char>::CBuffer<unsigned char>, COMDAT
; _this$ = ecx
; Line 27
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 28
	mov	edx, DWORD PTR _buffer$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _size$[ebp], eax
; Line 29
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN2@CBuffer
; Line 31
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T77223[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T77223[ebp]
	mov	DWORD PTR [edx], eax
; Line 32
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buffer$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 33
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN2@CBuffer:
; Line 35
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CBuffer@E@@QAE@ABV0@@Z ENDP			; CBuffer<unsigned char>::CBuffer<unsigned char>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CBuffer@E@@QAE@XZ
_TEXT	SEGMENT
$T77226 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CBuffer@E@@QAE@XZ PROC				; CBuffer<unsigned char>::~CBuffer<unsigned char>, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T77226[ebp], ecx
	mov	edx, DWORD PTR $T77226[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CBuffer@E@@QAE@XZ ENDP				; CBuffer<unsigned char>::~CBuffer<unsigned char>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CBuffer@E@@QBEPBEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CBuffer@E@@QBEPBEXZ PROC				; CBuffer<unsigned char>::operator unsigned char const *, COMDAT
; _this$ = ecx
; Line 40
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CBuffer@E@@QBEPBEXZ ENDP				; CBuffer<unsigned char>::operator unsigned char const *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CBuffer@E@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CBuffer@E@@QBEIXZ PROC				; CBuffer<unsigned char>::Size, COMDAT
; _this$ = ecx
; Line 41
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CBuffer@E@@QBEIXZ ENDP				; CBuffer<unsigned char>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ PROC		; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ ENDP		; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ PROC		; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@9
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@9:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ENDP		; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ PROC ; CMyComPtr<ICompressCoder>::operator ICompressCoder *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ENDP ; CMyComPtr<ICompressCoder>::operator ICompressCoder *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ PROC ; CMyComPtr<ICompressCoder>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ENDP ; CMyComPtr<ICompressCoder>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z PROC ; CMyComPtr<ICompressCoder>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@5
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@5:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@5
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@5:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z ENDP ; CMyComPtr<ICompressCoder>::operator=
_TEXT	ENDS
PUBLIC	?Size@?$CRecordVector@PAX@@QBEIXZ		; CRecordVector<void *>::Size
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Size@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEIXZ PROC ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Size, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEIXZ ENDP ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Size
_TEXT	ENDS
PUBLIC	??1?$CRecordVector@PAX@@QAE@XZ			; CRecordVector<void *>::~CRecordVector<void *>
PUBLIC	?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z	; CRecordVector<void *>::AddInReserved
PUBLIC	??0CExtraSubBlock@NZip@NArchive@@QAE@ABU012@@Z	; NArchive::NZip::CExtraSubBlock::CExtraSubBlock
PUBLIC	?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z	; CRecordVector<void *>::ConstructReserve
PUBLIC	??0?$CRecordVector@PAX@@QAE@XZ			; CRecordVector<void *>::CRecordVector<void *>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z$1
__ehfuncinfo$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
tv85 = -36						; size = 4
$T77246 = -32						; size = 4
$T77245 = -28						; size = 4
_i$75191 = -24						; size = 4
_size$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_v$ = 8							; size = 4
??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z PROC ; CObjectVector<NArchive::NZip::CExtraSubBlock>::CObjectVector<NArchive::NZip::CExtraSubBlock>, COMDAT
; _this$ = ecx
; Line 422
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 424
	mov	ecx, DWORD PTR _v$[ebp]
	call	?Size@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Size
	mov	DWORD PTR _size$[ebp], eax
; Line 425
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z ; CRecordVector<void *>::ConstructReserve
; Line 426
	mov	DWORD PTR _i$75191[ebp], 0
	jmp	SHORT $LN3@CObjectVec
$LN2@CObjectVec:
	mov	ecx, DWORD PTR _i$75191[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$75191[ebp], ecx
$LN3@CObjectVec:
	mov	edx, DWORD PTR _i$75191[ebp]
	cmp	edx, DWORD PTR _size$[ebp]
	jae	SHORT $LN4@CObjectVec
; Line 427
	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T77246[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T77246[ebp], 0
	je	SHORT $LN6@CObjectVec
	mov	eax, DWORD PTR _i$75191[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	call	??A?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEABUCExtraSubBlock@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CExtraSubBlock>::operator[]
	push	eax
	mov	ecx, DWORD PTR $T77246[ebp]
	call	??0CExtraSubBlock@NZip@NArchive@@QAE@ABU012@@Z
	mov	DWORD PTR tv85[ebp], eax
	jmp	SHORT $LN7@CObjectVec
$LN6@CObjectVec:
	mov	DWORD PTR tv85[ebp], 0
$LN7@CObjectVec:
	mov	ecx, DWORD PTR tv85[ebp]
	mov	DWORD PTR $T77245[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T77245[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ; CRecordVector<void *>::AddInReserved
	jmp	SHORT $LN2@CObjectVec
$LN4@CObjectVec:
; Line 428
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__unwindfunclet$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z$1:
	mov	eax, DWORD PTR $T77246[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z ENDP ; CObjectVector<NArchive::NZip::CExtraSubBlock>::CObjectVector<NArchive::NZip::CExtraSubBlock>
PUBLIC	??A?$CRecordVector@PAX@@QBEABQAXI@Z		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??A?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEABUCExtraSubBlock@NZip@NArchive@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEABUCExtraSubBlock@NZip@NArchive@@I@Z PROC ; CObjectVector<NArchive::NZip::CExtraSubBlock>::operator[], COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEABUCExtraSubBlock@NZip@NArchive@@I@Z ENDP ; CObjectVector<NArchive::NZip::CExtraSubBlock>::operator[]
_TEXT	ENDS
PUBLIC	??_GCExtraSubBlock@NZip@NArchive@@QAEPAXI@Z	; NArchive::NZip::CExtraSubBlock::`scalar deleting destructor'
PUBLIC	??A?$CRecordVector@PAX@@QAEAAPAXI@Z		; CRecordVector<void *>::operator[]
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T77262 = -28						; size = 4
$T77261 = -24						; size = 4
_i$75207 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ PROC ; CObjectVector<NArchive::NZip::CExtraSubBlock>::~CObjectVector<NArchive::NZip::CExtraSubBlock>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$75207[ebp], eax
$LN2@CObjectVec@2:
	cmp	DWORD PTR _i$75207[ebp], 0
	je	SHORT $LN3@CObjectVec@2
; Line 489
	mov	eax, DWORD PTR _i$75207[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$75207[ebp], eax
	mov	ecx, DWORD PTR _i$75207[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T77262[ebp], edx
	mov	eax, DWORD PTR $T77262[ebp]
	mov	DWORD PTR $T77261[ebp], eax
	cmp	DWORD PTR $T77261[ebp], 0
	je	SHORT $LN5@CObjectVec@2
	push	1
	mov	ecx, DWORD PTR $T77261[ebp]
	call	??_GCExtraSubBlock@NZip@NArchive@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@2
$LN5@CObjectVec@2:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@2:
	jmp	SHORT $LN2@CObjectVec@2
$LN3@CObjectVec@2:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ ENDP ; CObjectVector<NArchive::NZip::CExtraSubBlock>::~CObjectVector<NArchive::NZip::CExtraSubBlock>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CMyComPtr@UIInStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UIInStream@@@@QAE@XZ PROC		; CMyComPtr<IInStream>::CMyComPtr<IInStream>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UIInStream@@@@QAE@XZ ENDP		; CMyComPtr<IInStream>::CMyComPtr<IInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIInStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIInStream@@@@QAE@XZ PROC		; CMyComPtr<IInStream>::~CMyComPtr<IInStream>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@10
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@10:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIInStream@@@@QAE@XZ ENDP		; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ PROC	; CMyComPtr<IInStream>::operator IInStream *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ENDP	; CMyComPtr<IInStream>::operator IInStream *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CObjectVector@UCProp@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@UCProp@@@@QAE@XZ PROC		; CObjectVector<CProp>::CObjectVector<CProp>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@UCProp@@@@QAE@XZ ENDP		; CObjectVector<CProp>::CObjectVector<CProp>
_TEXT	ENDS
PUBLIC	??_GCProp@@QAEPAXI@Z				; CProp::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@UCProp@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@UCProp@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@UCProp@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@UCProp@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T77284 = -28						; size = 4
$T77283 = -24						; size = 4
_i$75254 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@UCProp@@@@QAE@XZ PROC		; CObjectVector<CProp>::~CObjectVector<CProp>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$75254[ebp], eax
$LN2@CObjectVec@3:
	cmp	DWORD PTR _i$75254[ebp], 0
	je	SHORT $LN3@CObjectVec@3
; Line 489
	mov	eax, DWORD PTR _i$75254[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$75254[ebp], eax
	mov	ecx, DWORD PTR _i$75254[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T77284[ebp], edx
	mov	eax, DWORD PTR $T77284[ebp]
	mov	DWORD PTR $T77283[ebp], eax
	cmp	DWORD PTR $T77283[ebp], 0
	je	SHORT $LN5@CObjectVec@3
	push	1
	mov	ecx, DWORD PTR $T77283[ebp]
	call	??_GCProp@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@3
$LN5@CObjectVec@3:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@3:
	jmp	SHORT $LN2@CObjectVec@3
$LN3@CObjectVec@3:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@UCProp@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@UCProp@@@@QAE@XZ ENDP		; CObjectVector<CProp>::~CObjectVector<CProp>
PUBLIC	?Clear@?$CRecordVector@PAX@@QAEXXZ		; CRecordVector<void *>::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Clear@?$CObjectVector@UCProp@@@@QAEXXZ
_TEXT	SEGMENT
tv75 = -20						; size = 4
$T77297 = -16						; size = 4
$T77296 = -12						; size = 4
_i$75263 = -8						; size = 4
_this$ = -4						; size = 4
?Clear@?$CObjectVector@UCProp@@@@QAEXXZ PROC		; CObjectVector<CProp>::Clear, COMDAT
; _this$ = ecx
; Line 499
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 500
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$75263[ebp], eax
$LN2@Clear:
	cmp	DWORD PTR _i$75263[ebp], 0
	je	SHORT $LN1@Clear
; Line 501
	mov	eax, DWORD PTR _i$75263[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$75263[ebp], eax
	mov	ecx, DWORD PTR _i$75263[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T77297[ebp], edx
	mov	eax, DWORD PTR $T77297[ebp]
	mov	DWORD PTR $T77296[ebp], eax
	cmp	DWORD PTR $T77296[ebp], 0
	je	SHORT $LN5@Clear
	push	1
	mov	ecx, DWORD PTR $T77296[ebp]
	call	??_GCProp@@QAEPAXI@Z
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN6@Clear
$LN5@Clear:
	mov	DWORD PTR tv75[ebp], 0
$LN6@Clear:
	jmp	SHORT $LN2@Clear
$LN1@Clear:
; Line 502
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CRecordVector@PAX@@QAEXXZ	; CRecordVector<void *>::Clear
; Line 503
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CObjectVector@UCProp@@@@QAEXXZ ENDP		; CObjectVector<CProp>::Clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEIXZ PROC ; CObjectVector<NArchive::NZip::CItemEx>::Size, COMDAT
; _this$ = ecx
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEIXZ ENDP ; CObjectVector<NArchive::NZip::CItemEx>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ PROC ; CObjectVector<NArchive::NZip::CItemEx>::CObjectVector<NArchive::NZip::CItemEx>, COMDAT
; _this$ = ecx
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ ENDP ; CObjectVector<NArchive::NZip::CItemEx>::CObjectVector<NArchive::NZip::CItemEx>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEAAVCItemEx@NZip@NArchive@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEAAVCItemEx@NZip@NArchive@@I@Z PROC ; CObjectVector<NArchive::NZip::CItemEx>::operator[], COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEAAVCItemEx@NZip@NArchive@@I@Z ENDP ; CObjectVector<NArchive::NZip::CItemEx>::operator[]
_TEXT	ENDS
PUBLIC	??_GCItemEx@NZip@NArchive@@QAEPAXI@Z		; NArchive::NZip::CItemEx::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T77310 = -28						; size = 4
$T77309 = -24						; size = 4
_i$75300 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ PROC ; CObjectVector<NArchive::NZip::CItemEx>::~CObjectVector<NArchive::NZip::CItemEx>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$75300[ebp], eax
$LN2@CObjectVec@4:
	cmp	DWORD PTR _i$75300[ebp], 0
	je	SHORT $LN3@CObjectVec@4
; Line 489
	mov	eax, DWORD PTR _i$75300[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$75300[ebp], eax
	mov	ecx, DWORD PTR _i$75300[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T77310[ebp], edx
	mov	eax, DWORD PTR $T77310[ebp]
	mov	DWORD PTR $T77309[ebp], eax
	cmp	DWORD PTR $T77309[ebp], 0
	je	SHORT $LN5@CObjectVec@4
	push	1
	mov	ecx, DWORD PTR $T77309[ebp]
	call	??_GCItemEx@NZip@NArchive@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@4
$LN5@CObjectVec@4:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@4:
	jmp	SHORT $LN2@CObjectVec@4
$LN3@CObjectVec@4:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ ENDP ; CObjectVector<NArchive::NZip::CItemEx>::~CObjectVector<NArchive::NZip::CItemEx>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Clear@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEXXZ
_TEXT	SEGMENT
tv75 = -20						; size = 4
$T77323 = -16						; size = 4
$T77322 = -12						; size = 4
_i$75309 = -8						; size = 4
_this$ = -4						; size = 4
?Clear@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEXXZ PROC ; CObjectVector<NArchive::NZip::CItemEx>::Clear, COMDAT
; _this$ = ecx
; Line 499
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 500
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$75309[ebp], eax
$LN2@Clear@2:
	cmp	DWORD PTR _i$75309[ebp], 0
	je	SHORT $LN1@Clear@2
; Line 501
	mov	eax, DWORD PTR _i$75309[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$75309[ebp], eax
	mov	ecx, DWORD PTR _i$75309[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T77323[ebp], edx
	mov	eax, DWORD PTR $T77323[ebp]
	mov	DWORD PTR $T77322[ebp], eax
	cmp	DWORD PTR $T77322[ebp], 0
	je	SHORT $LN5@Clear@2
	push	1
	mov	ecx, DWORD PTR $T77322[ebp]
	call	??_GCItemEx@NZip@NArchive@@QAEPAXI@Z
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN6@Clear@2
$LN5@Clear@2:
	mov	DWORD PTR tv75[ebp], 0
$LN6@Clear@2:
	jmp	SHORT $LN2@Clear@2
$LN1@Clear@2:
; Line 502
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CRecordVector@PAX@@QAEXXZ	; CRecordVector<void *>::Clear
; Line 503
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEXXZ ENDP ; CObjectVector<NArchive::NZip::CItemEx>::Clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@PAUIArchiveOpenCallback@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??0?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@PAUIArchiveOpenCallback@@@Z PROC ; CMyComPtr<IArchiveOpenCallback>::CMyComPtr<IArchiveOpenCallback>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@CMyComPtr@11
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@11:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@PAUIArchiveOpenCallback@@@Z ENDP ; CMyComPtr<IArchiveOpenCallback>::CMyComPtr<IArchiveOpenCallback>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ PROC	; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@12
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@12:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIArchiveOpenCallback@@@@QAE@XZ ENDP	; CMyComPtr<IArchiveOpenCallback>::~CMyComPtr<IArchiveOpenCallback>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ PROC ; CMyComPtr<IArchiveOpenCallback>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ ENDP ; CMyComPtr<IArchiveOpenCallback>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ PROC	; CMyComPtr<ICryptoGetTextPassword>::CMyComPtr<ICryptoGetTextPassword>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ENDP	; CMyComPtr<ICryptoGetTextPassword>::CMyComPtr<ICryptoGetTextPassword>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ PROC	; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@13
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@13:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ENDP	; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ PROC ; CMyComPtr<ICryptoGetTextPassword>::operator ICryptoGetTextPassword *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ ENDP ; CMyComPtr<ICryptoGetTextPassword>::operator ICryptoGetTextPassword *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UICryptoGetTextPassword@@@@QAEPAPAUICryptoGetTextPassword@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UICryptoGetTextPassword@@@@QAEPAPAUICryptoGetTextPassword@@XZ PROC ; CMyComPtr<ICryptoGetTextPassword>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UICryptoGetTextPassword@@@@QAEPAPAUICryptoGetTextPassword@@XZ ENDP ; CMyComPtr<ICryptoGetTextPassword>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ PROC ; CMyComPtr<ICryptoGetTextPassword>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ ENDP ; CMyComPtr<ICryptoGetTextPassword>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??7?$CMyComPtr@UICryptoGetTextPassword@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??7?$CMyComPtr@UICryptoGetTextPassword@@@@QBE_NXZ PROC	; CMyComPtr<ICryptoGetTextPassword>::operator!, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
??7?$CMyComPtr@UICryptoGetTextPassword@@@@QBE_NXZ ENDP	; CMyComPtr<ICryptoGetTextPassword>::operator!
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QBEIXZ PROC ; CObjectVector<NArchive::NZip::CMethodItem>::Size, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QBEIXZ ENDP ; CObjectVector<NArchive::NZip::CMethodItem>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QAE@XZ PROC ; CObjectVector<NArchive::NZip::CMethodItem>::CObjectVector<NArchive::NZip::CMethodItem>, COMDAT
; _this$ = ecx
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QAE@XZ ENDP ; CObjectVector<NArchive::NZip::CMethodItem>::CObjectVector<NArchive::NZip::CMethodItem>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QAEAAUCMethodItem@NZip@NArchive@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QAEAAUCMethodItem@NZip@NArchive@@I@Z PROC ; CObjectVector<NArchive::NZip::CMethodItem>::operator[], COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QAEAAUCMethodItem@NZip@NArchive@@I@Z ENDP ; CObjectVector<NArchive::NZip::CMethodItem>::operator[]
_TEXT	ENDS
PUBLIC	?Add@?$CRecordVector@PAX@@QAEIQAX@Z		; CRecordVector<void *>::Add
PUBLIC	??0CMethodItem@NZip@NArchive@@QAE@ABU012@@Z	; NArchive::NZip::CMethodItem::CMethodItem
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QAEIABUCMethodItem@NZip@NArchive@@@Z
_TEXT	SEGMENT
tv72 = -12						; size = 4
$T77353 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?Add@?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QAEIABUCMethodItem@NZip@NArchive@@@Z PROC ; CObjectVector<NArchive::NZip::CMethodItem>::Add, COMDAT
; _this$ = ecx
; Line 459
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	push	8
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T77353[ebp], eax
	cmp	DWORD PTR $T77353[ebp], 0
	je	SHORT $LN3@Add
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T77353[ebp]
	call	??0CMethodItem@NZip@NArchive@@QAE@ABU012@@Z
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Add
$LN3@Add:
	mov	DWORD PTR tv72[ebp], 0
$LN4@Add:
	mov	ecx, DWORD PTR tv72[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QAEIABUCMethodItem@NZip@NArchive@@@Z ENDP ; CObjectVector<NArchive::NZip::CMethodItem>::Add
_TEXT	ENDS
PUBLIC	??_GCMethodItem@NZip@NArchive@@QAEPAXI@Z	; NArchive::NZip::CMethodItem::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T77359 = -28						; size = 4
$T77358 = -24						; size = 4
_i$75351 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QAE@XZ PROC ; CObjectVector<NArchive::NZip::CMethodItem>::~CObjectVector<NArchive::NZip::CMethodItem>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$75351[ebp], eax
$LN2@CObjectVec@5:
	cmp	DWORD PTR _i$75351[ebp], 0
	je	SHORT $LN3@CObjectVec@5
; Line 489
	mov	eax, DWORD PTR _i$75351[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$75351[ebp], eax
	mov	ecx, DWORD PTR _i$75351[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T77359[ebp], edx
	mov	eax, DWORD PTR $T77359[ebp]
	mov	DWORD PTR $T77358[ebp], eax
	cmp	DWORD PTR $T77358[ebp], 0
	je	SHORT $LN5@CObjectVec@5
	push	1
	mov	ecx, DWORD PTR $T77358[ebp]
	call	??_GCMethodItem@NZip@NArchive@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@5
$LN5@CObjectVec@5:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@5:
	jmp	SHORT $LN2@CObjectVec@5
$LN3@CObjectVec@5:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@UCMethodItem@NZip@NArchive@@@@QAE@XZ ENDP ; CObjectVector<NArchive::NZip::CMethodItem>::~CObjectVector<NArchive::NZip::CMethodItem>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ PROC	; CMyComPtr<ICompressSetCoderMt>::CMyComPtr<ICompressSetCoderMt>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ ENDP	; CMyComPtr<ICompressSetCoderMt>::CMyComPtr<ICompressSetCoderMt>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ PROC	; CMyComPtr<ICompressSetCoderMt>::~CMyComPtr<ICompressSetCoderMt>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@14
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@14:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ ENDP	; CMyComPtr<ICompressSetCoderMt>::~CMyComPtr<ICompressSetCoderMt>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ PROC ; CMyComPtr<ICompressSetCoderMt>::operator ICompressSetCoderMt *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ ENDP ; CMyComPtr<ICompressSetCoderMt>::operator ICompressSetCoderMt *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UICompressSetCoderMt@@@@QAEPAPAUICompressSetCoderMt@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UICompressSetCoderMt@@@@QAEPAPAUICompressSetCoderMt@@XZ PROC ; CMyComPtr<ICompressSetCoderMt>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UICompressSetCoderMt@@@@QAEPAPAUICompressSetCoderMt@@XZ ENDP ; CMyComPtr<ICompressSetCoderMt>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ PROC ; CMyComPtr<ICompressSetCoderMt>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ ENDP ; CMyComPtr<ICompressSetCoderMt>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CExtraSubBlock@NZip@NArchive@@QAE@ABU012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CExtraSubBlock@NZip@NArchive@@QAE@ABU012@@Z PROC	; NArchive::NZip::CExtraSubBlock::CExtraSubBlock, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$CBuffer@E@@QAE@ABV0@@Z		; CBuffer<unsigned char>::CBuffer<unsigned char>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CExtraSubBlock@NZip@NArchive@@QAE@ABU012@@Z ENDP	; NArchive::NZip::CExtraSubBlock::CExtraSubBlock
_TEXT	ENDS
PUBLIC	??1CExtraSubBlock@NZip@NArchive@@QAE@XZ		; NArchive::NZip::CExtraSubBlock::~CExtraSubBlock
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCExtraSubBlock@NZip@NArchive@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCExtraSubBlock@NZip@NArchive@@QAEPAXI@Z PROC	; NArchive::NZip::CExtraSubBlock::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CExtraSubBlock@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@8
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@8:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCExtraSubBlock@NZip@NArchive@@QAEPAXI@Z ENDP	; NArchive::NZip::CExtraSubBlock::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1CProp@@QAE@XZ				; CProp::~CProp
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCProp@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCProp@@QAEPAXI@Z PROC				; CProp::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CProp@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@9
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@9:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCProp@@QAEPAXI@Z ENDP				; CProp::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??_GCItemEx@NZip@NArchive@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCItemEx@NZip@NArchive@@QAEPAXI@Z PROC		; NArchive::NZip::CItemEx::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CItemEx@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@10
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@10:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCItemEx@NZip@NArchive@@QAEPAXI@Z ENDP		; NArchive::NZip::CItemEx::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0?$CMyComPtr@UICompressCoder@@@@QAE@ABV0@@Z	; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CMethodItem@NZip@NArchive@@QAE@ABU012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CMethodItem@NZip@NArchive@@QAE@ABU012@@Z PROC	; NArchive::NZip::CMethodItem::CMethodItem, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$CMyComPtr@UICompressCoder@@@@QAE@ABV0@@Z ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CMethodItem@NZip@NArchive@@QAE@ABU012@@Z ENDP	; NArchive::NZip::CMethodItem::CMethodItem
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??_GCMethodItem@NZip@NArchive@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCMethodItem@NZip@NArchive@@QAEPAXI@Z PROC		; NArchive::NZip::CMethodItem::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CMethodItem@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@11
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@11:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCMethodItem@NZip@NArchive@@QAEPAXI@Z ENDP		; NArchive::NZip::CMethodItem::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CExtraSubBlock@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CExtraSubBlock@NZip@NArchive@@QAE@XZ PROC		; NArchive::NZip::CExtraSubBlock::~CExtraSubBlock, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CExtraSubBlock@NZip@NArchive@@QAE@XZ ENDP		; NArchive::NZip::CExtraSubBlock::~CExtraSubBlock
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CProp@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CProp@@QAE@XZ PROC					; CProp::~CProp, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CProp@@QAE@XZ ENDP					; CProp::~CProp
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@PAX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@PAX@@QAE@XZ PROC			; CRecordVector<void *>::CRecordVector<void *>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@PAX@@QAE@XZ ENDP			; CRecordVector<void *>::CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@PAX@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@PAX@@QBEIXZ PROC			; CRecordVector<void *>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@PAX@@QBEIXZ ENDP			; CRecordVector<void *>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z
_TEXT	SEGMENT
$T77403 = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z PROC	; CRecordVector<void *>::ConstructReserve, COMDAT
; _this$ = ecx
; Line 52
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 53
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN2@ConstructR
; Line 55
	xor	ecx, ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T77403[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T77403[ebp]
	mov	DWORD PTR [eax], ecx
; Line 56
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@ConstructR:
; Line 58
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z ENDP	; CRecordVector<void *>::ConstructReserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@PAX@@QAE@XZ
_TEXT	SEGMENT
$T77406 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@PAX@@QAE@XZ PROC			; CRecordVector<void *>::~CRecordVector<void *>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T77406[ebp], ecx
	mov	edx, DWORD PTR $T77406[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@PAX@@QAE@XZ ENDP			; CRecordVector<void *>::~CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Clear@?$CRecordVector@PAX@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$CRecordVector@PAX@@QAEXXZ PROC			; CRecordVector<void *>::Clear, COMDAT
; _this$ = ecx
; Line 131
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CRecordVector@PAX@@QAEXXZ ENDP			; CRecordVector<void *>::Clear
_TEXT	ENDS
PUBLIC	?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ	; CRecordVector<void *>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@PAX@@QAEIQAX@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?Add@?$CRecordVector@PAX@@QAEIQAX@Z PROC		; CRecordVector<void *>::Add, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ; CRecordVector<void *>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 201
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv72[ebp]
; Line 202
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CRecordVector@PAX@@QAEIQAX@Z ENDP		; CRecordVector<void *>::Add
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z PROC	; CRecordVector<void *>::AddInReserved, COMDAT
; _this$ = ecx
; Line 205
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 206
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 207
	mov	esp, ebp
	pop	ebp
	ret	4
?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ENDP	; CRecordVector<void *>::AddInReserved
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@PAX@@QBEABQAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@PAX@@QBEABQAXI@Z PROC		; CRecordVector<void *>::operator[], COMDAT
; _this$ = ecx
; Line 227
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@PAX@@QBEABQAXI@Z ENDP		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@PAX@@QAEAAPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@PAX@@QAEAAPAXI@Z PROC		; CRecordVector<void *>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@PAX@@QAEAAPAXI@Z ENDP		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ PROC ; CMyComPtr<ISequentialInStream>::Release, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Release@12
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
$LN2@Release@12:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ ENDP ; CMyComPtr<ISequentialInStream>::Release
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICompressCoder@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lp$ = 8						; size = 4
??0?$CMyComPtr@UICompressCoder@@@@QAE@ABV0@@Z PROC	; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>, COMDAT
; _this$ = ecx
; Line 20
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _lp$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@15
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@15:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UICompressCoder@@@@QAE@ABV0@@Z ENDP	; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ
_TEXT	SEGMENT
$T77424 = -20						; size = 4
$T77423 = -16						; size = 4
_p$75440 = -12						; size = 4
_newCapacity$75439 = -8					; size = 4
_this$ = -4						; size = 4
?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ PROC	; CRecordVector<void *>::ReserveOnePosition, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@ReserveOne
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$75439[ebp], ecx
; Line 23
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$75439[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T77423[ebp], eax
	mov	eax, DWORD PTR $T77423[ebp]
	mov	DWORD PTR _p$75440[ebp], eax
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@ReserveOne
; Line 25
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$75440[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne:
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T77424[ebp], edx
	mov	eax, DWORD PTR $T77424[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$75440[ebp]
	mov	DWORD PTR [ecx], edx
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$75439[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ReserveOne:
; Line 30
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ENDP	; CRecordVector<void *>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$QueryInterface@UICryptoSetPassword@@@?$CMyComPtr@UICompressFilter@@@@QBEJABU_GUID@@PAPAUICryptoSetPassword@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iid$ = 8						; size = 4
_pp$ = 12						; size = 4
??$QueryInterface@UICryptoSetPassword@@@?$CMyComPtr@UICompressFilter@@@@QBEJABU_GUID@@PAPAUICryptoSetPassword@@@Z PROC ; CMyComPtr<ICompressFilter>::QueryInterface<ICryptoSetPassword>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 70
	mov	esi, esp
	mov	eax, DWORD PTR _pp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 71
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$QueryInterface@UICryptoSetPassword@@@?$CMyComPtr@UICompressFilter@@@@QBEJABU_GUID@@PAPAUICryptoSetPassword@@@Z ENDP ; CMyComPtr<ICompressFilter>::QueryInterface<ICryptoSetPassword>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CDecoder@NZipStrong@NCrypto@@W7AGKXZ
_TEXT	SEGMENT
?AddRef@CDecoder@NZipStrong@NCrypto@@W7AGKXZ PROC	; [thunk]:NCrypto::NZipStrong::CDecoder::AddRef`adjustor{8}', COMDAT
	sub	DWORD PTR [esp+4], 8
	jmp	?AddRef@CDecoder@NZipStrong@NCrypto@@UAGKXZ ; NCrypto::NZipStrong::CDecoder::AddRef
?AddRef@CDecoder@NZipStrong@NCrypto@@W7AGKXZ ENDP	; [thunk]:NCrypto::NZipStrong::CDecoder::AddRef`adjustor{8}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CCopyCoder@NCompress@@W3AGKXZ
_TEXT	SEGMENT
?Release@CCopyCoder@NCompress@@W3AGKXZ PROC		; [thunk]:NCompress::CCopyCoder::Release`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?Release@CCopyCoder@NCompress@@UAGKXZ	; NCompress::CCopyCoder::Release
?Release@CCopyCoder@NCompress@@W3AGKXZ ENDP		; [thunk]:NCompress::CCopyCoder::Release`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CHandler@NZip@NArchive@@W7AGKXZ
_TEXT	SEGMENT
?Release@CHandler@NZip@NArchive@@W7AGKXZ PROC		; [thunk]:NArchive::NZip::CHandler::Release`adjustor{8}', COMDAT
	sub	DWORD PTR [esp+4], 8
	jmp	?Release@CHandler@NZip@NArchive@@UAGKXZ	; NArchive::NZip::CHandler::Release
?Release@CHandler@NZip@NArchive@@W7AGKXZ ENDP		; [thunk]:NArchive::NZip::CHandler::Release`adjustor{8}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CAesCbcCoder@NCrypto@@W3AGKXZ
_TEXT	SEGMENT
?Release@CAesCbcCoder@NCrypto@@W3AGKXZ PROC		; [thunk]:NCrypto::CAesCbcCoder::Release`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?Release@CAesCbcCoder@NCrypto@@UAGKXZ	; NCrypto::CAesCbcCoder::Release
?Release@CAesCbcCoder@NCrypto@@W3AGKXZ ENDP		; [thunk]:NCrypto::CAesCbcCoder::Release`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CBaseCoder@NWzAes@NCrypto@@W3AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CBaseCoder@NWzAes@NCrypto@@W3AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:NCrypto::NWzAes::CBaseCoder::QueryInterface`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?QueryInterface@CBaseCoder@NWzAes@NCrypto@@UAGJABU_GUID@@PAPAX@Z ; NCrypto::NWzAes::CBaseCoder::QueryInterface
?QueryInterface@CBaseCoder@NWzAes@NCrypto@@W3AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:NCrypto::NWzAes::CBaseCoder::QueryInterface`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CDecoder@NZipStrong@NCrypto@@W3AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CDecoder@NZipStrong@NCrypto@@W3AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:NCrypto::NZipStrong::CDecoder::QueryInterface`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?QueryInterface@CDecoder@NZipStrong@NCrypto@@UAGJABU_GUID@@PAPAX@Z ; NCrypto::NZipStrong::CDecoder::QueryInterface
?QueryInterface@CDecoder@NZipStrong@NCrypto@@W3AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:NCrypto::NZipStrong::CDecoder::QueryInterface`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CCipher@NZip@NCrypto@@W3AGKXZ
_TEXT	SEGMENT
?AddRef@CCipher@NZip@NCrypto@@W3AGKXZ PROC		; [thunk]:NCrypto::NZip::CCipher::AddRef`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?AddRef@CCipher@NZip@NCrypto@@UAGKXZ	; NCrypto::NZip::CCipher::AddRef
?AddRef@CCipher@NZip@NCrypto@@W3AGKXZ ENDP		; [thunk]:NCrypto::NZip::CCipher::AddRef`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CCopyCoder@NCompress@@W7AGKXZ
_TEXT	SEGMENT
?Release@CCopyCoder@NCompress@@W7AGKXZ PROC		; [thunk]:NCompress::CCopyCoder::Release`adjustor{8}', COMDAT
	sub	DWORD PTR [esp+4], 8
	jmp	?Release@CCopyCoder@NCompress@@UAGKXZ	; NCompress::CCopyCoder::Release
?Release@CCopyCoder@NCompress@@W7AGKXZ ENDP		; [thunk]:NCompress::CCopyCoder::Release`adjustor{8}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CHandler@NZip@NArchive@@W3AGKXZ
_TEXT	SEGMENT
?AddRef@CHandler@NZip@NArchive@@W3AGKXZ PROC		; [thunk]:NArchive::NZip::CHandler::AddRef`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?AddRef@CHandler@NZip@NArchive@@UAGKXZ	; NArchive::NZip::CHandler::AddRef
?AddRef@CHandler@NZip@NArchive@@W3AGKXZ ENDP		; [thunk]:NArchive::NZip::CHandler::AddRef`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CAesCbcCoder@NCrypto@@W7AGKXZ
_TEXT	SEGMENT
?Release@CAesCbcCoder@NCrypto@@W7AGKXZ PROC		; [thunk]:NCrypto::CAesCbcCoder::Release`adjustor{8}', COMDAT
	sub	DWORD PTR [esp+4], 8
	jmp	?Release@CAesCbcCoder@NCrypto@@UAGKXZ	; NCrypto::CAesCbcCoder::Release
?Release@CAesCbcCoder@NCrypto@@W7AGKXZ ENDP		; [thunk]:NCrypto::CAesCbcCoder::Release`adjustor{8}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CDecoder@NZipStrong@NCrypto@@WBEM@AGKXZ
_TEXT	SEGMENT
?Release@CDecoder@NZipStrong@NCrypto@@WBEM@AGKXZ PROC	; [thunk]:NCrypto::NZipStrong::CDecoder::Release`adjustor{332}', COMDAT
	sub	DWORD PTR [esp+4], 332			; 0000014cH
	jmp	?Release@CDecoder@NZipStrong@NCrypto@@UAGKXZ ; NCrypto::NZipStrong::CDecoder::Release
?Release@CDecoder@NZipStrong@NCrypto@@WBEM@AGKXZ ENDP	; [thunk]:NCrypto::NZipStrong::CDecoder::Release`adjustor{332}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CDecoder@NZipStrong@NCrypto@@W7AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CDecoder@NZipStrong@NCrypto@@W7AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:NCrypto::NZipStrong::CDecoder::QueryInterface`adjustor{8}', COMDAT
	sub	DWORD PTR [esp+4], 8
	jmp	?QueryInterface@CDecoder@NZipStrong@NCrypto@@UAGJABU_GUID@@PAPAX@Z ; NCrypto::NZipStrong::CDecoder::QueryInterface
?QueryInterface@CDecoder@NZipStrong@NCrypto@@W7AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:NCrypto::NZipStrong::CDecoder::QueryInterface`adjustor{8}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CCopyCoder@NCompress@@WM@AGKXZ
_TEXT	SEGMENT
?Release@CCopyCoder@NCompress@@WM@AGKXZ PROC		; [thunk]:NCompress::CCopyCoder::Release`adjustor{12}', COMDAT
	sub	DWORD PTR [esp+4], 12			; 0000000cH
	jmp	?Release@CCopyCoder@NCompress@@UAGKXZ	; NCompress::CCopyCoder::Release
?Release@CCopyCoder@NCompress@@WM@AGKXZ ENDP		; [thunk]:NCompress::CCopyCoder::Release`adjustor{12}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CCopyCoder@NCompress@@W3AGKXZ
_TEXT	SEGMENT
?AddRef@CCopyCoder@NCompress@@W3AGKXZ PROC		; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?AddRef@CCopyCoder@NCompress@@UAGKXZ	; NCompress::CCopyCoder::AddRef
?AddRef@CCopyCoder@NCompress@@W3AGKXZ ENDP		; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CHandler@NZip@NArchive@@W7AGKXZ
_TEXT	SEGMENT
?AddRef@CHandler@NZip@NArchive@@W7AGKXZ PROC		; [thunk]:NArchive::NZip::CHandler::AddRef`adjustor{8}', COMDAT
	sub	DWORD PTR [esp+4], 8
	jmp	?AddRef@CHandler@NZip@NArchive@@UAGKXZ	; NArchive::NZip::CHandler::AddRef
?AddRef@CHandler@NZip@NArchive@@W7AGKXZ ENDP		; [thunk]:NArchive::NZip::CHandler::AddRef`adjustor{8}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CAesCbcCoder@NCrypto@@W3AGKXZ
_TEXT	SEGMENT
?AddRef@CAesCbcCoder@NCrypto@@W3AGKXZ PROC		; [thunk]:NCrypto::CAesCbcCoder::AddRef`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?AddRef@CAesCbcCoder@NCrypto@@UAGKXZ	; NCrypto::CAesCbcCoder::AddRef
?AddRef@CAesCbcCoder@NCrypto@@W3AGKXZ ENDP		; [thunk]:NCrypto::CAesCbcCoder::AddRef`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CCipher@NZip@NCrypto@@W3AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CCipher@NZip@NCrypto@@W3AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:NCrypto::NZip::CCipher::QueryInterface`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?QueryInterface@CCipher@NZip@NCrypto@@UAGJABU_GUID@@PAPAX@Z ; NCrypto::NZip::CCipher::QueryInterface
?QueryInterface@CCipher@NZip@NCrypto@@W3AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:NCrypto::NZip::CCipher::QueryInterface`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CHandler@NZip@NArchive@@W3AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CHandler@NZip@NArchive@@W3AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:NArchive::NZip::CHandler::QueryInterface`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?QueryInterface@CHandler@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::NZip::CHandler::QueryInterface
?QueryInterface@CHandler@NZip@NArchive@@W3AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:NArchive::NZip::CHandler::QueryInterface`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CCopyCoder@NCompress@@W7AGKXZ
_TEXT	SEGMENT
?AddRef@CCopyCoder@NCompress@@W7AGKXZ PROC		; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{8}', COMDAT
	sub	DWORD PTR [esp+4], 8
	jmp	?AddRef@CCopyCoder@NCompress@@UAGKXZ	; NCompress::CCopyCoder::AddRef
?AddRef@CCopyCoder@NCompress@@W7AGKXZ ENDP		; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{8}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CAesCbcCoder@NCrypto@@W7AGKXZ
_TEXT	SEGMENT
?AddRef@CAesCbcCoder@NCrypto@@W7AGKXZ PROC		; [thunk]:NCrypto::CAesCbcCoder::AddRef`adjustor{8}', COMDAT
	sub	DWORD PTR [esp+4], 8
	jmp	?AddRef@CAesCbcCoder@NCrypto@@UAGKXZ	; NCrypto::CAesCbcCoder::AddRef
?AddRef@CAesCbcCoder@NCrypto@@W7AGKXZ ENDP		; [thunk]:NCrypto::CAesCbcCoder::AddRef`adjustor{8}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CDecoder@NZipStrong@NCrypto@@WBEM@AGKXZ
_TEXT	SEGMENT
?AddRef@CDecoder@NZipStrong@NCrypto@@WBEM@AGKXZ PROC	; [thunk]:NCrypto::NZipStrong::CDecoder::AddRef`adjustor{332}', COMDAT
	sub	DWORD PTR [esp+4], 332			; 0000014cH
	jmp	?AddRef@CDecoder@NZipStrong@NCrypto@@UAGKXZ ; NCrypto::NZipStrong::CDecoder::AddRef
?AddRef@CDecoder@NZipStrong@NCrypto@@WBEM@AGKXZ ENDP	; [thunk]:NCrypto::NZipStrong::CDecoder::AddRef`adjustor{332}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::CCopyCoder::QueryInterface
?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CHandler@NZip@NArchive@@W7AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CHandler@NZip@NArchive@@W7AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:NArchive::NZip::CHandler::QueryInterface`adjustor{8}', COMDAT
	sub	DWORD PTR [esp+4], 8
	jmp	?QueryInterface@CHandler@NZip@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::NZip::CHandler::QueryInterface
?QueryInterface@CHandler@NZip@NArchive@@W7AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:NArchive::NZip::CHandler::QueryInterface`adjustor{8}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CAesCbcCoder@NCrypto@@W3AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CAesCbcCoder@NCrypto@@W3AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:NCrypto::CAesCbcCoder::QueryInterface`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?QueryInterface@CAesCbcCoder@NCrypto@@UAGJABU_GUID@@PAPAX@Z ; NCrypto::CAesCbcCoder::QueryInterface
?QueryInterface@CAesCbcCoder@NCrypto@@W3AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:NCrypto::CAesCbcCoder::QueryInterface`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CCopyCoder@NCompress@@WM@AGKXZ
_TEXT	SEGMENT
?AddRef@CCopyCoder@NCompress@@WM@AGKXZ PROC		; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{12}', COMDAT
	sub	DWORD PTR [esp+4], 12			; 0000000cH
	jmp	?AddRef@CCopyCoder@NCompress@@UAGKXZ	; NCompress::CCopyCoder::AddRef
?AddRef@CCopyCoder@NCompress@@WM@AGKXZ ENDP		; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{12}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CBaseCoder@NWzAes@NCrypto@@W3AGKXZ
_TEXT	SEGMENT
?Release@CBaseCoder@NWzAes@NCrypto@@W3AGKXZ PROC	; [thunk]:NCrypto::NWzAes::CBaseCoder::Release`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?Release@CBaseCoder@NWzAes@NCrypto@@UAGKXZ ; NCrypto::NWzAes::CBaseCoder::Release
?Release@CBaseCoder@NWzAes@NCrypto@@W3AGKXZ ENDP	; [thunk]:NCrypto::NWzAes::CBaseCoder::Release`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CDecoder@NZipStrong@NCrypto@@W3AGKXZ
_TEXT	SEGMENT
?Release@CDecoder@NZipStrong@NCrypto@@W3AGKXZ PROC	; [thunk]:NCrypto::NZipStrong::CDecoder::Release`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?Release@CDecoder@NZipStrong@NCrypto@@UAGKXZ ; NCrypto::NZipStrong::CDecoder::Release
?Release@CDecoder@NZipStrong@NCrypto@@W3AGKXZ ENDP	; [thunk]:NCrypto::NZipStrong::CDecoder::Release`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{8}', COMDAT
	sub	DWORD PTR [esp+4], 8
	jmp	?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::CCopyCoder::QueryInterface
?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{8}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CAesCbcCoder@NCrypto@@W7AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CAesCbcCoder@NCrypto@@W7AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:NCrypto::CAesCbcCoder::QueryInterface`adjustor{8}', COMDAT
	sub	DWORD PTR [esp+4], 8
	jmp	?QueryInterface@CAesCbcCoder@NCrypto@@UAGJABU_GUID@@PAPAX@Z ; NCrypto::CAesCbcCoder::QueryInterface
?QueryInterface@CAesCbcCoder@NCrypto@@W7AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:NCrypto::CAesCbcCoder::QueryInterface`adjustor{8}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CDecoder@NZipStrong@NCrypto@@WBEM@AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CDecoder@NZipStrong@NCrypto@@WBEM@AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:NCrypto::NZipStrong::CDecoder::QueryInterface`adjustor{332}', COMDAT
	sub	DWORD PTR [esp+4], 332			; 0000014cH
	jmp	?QueryInterface@CDecoder@NZipStrong@NCrypto@@UAGJABU_GUID@@PAPAX@Z ; NCrypto::NZipStrong::CDecoder::QueryInterface
?QueryInterface@CDecoder@NZipStrong@NCrypto@@WBEM@AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:NCrypto::NZipStrong::CDecoder::QueryInterface`adjustor{332}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CDecoder@NZipStrong@NCrypto@@W7AGKXZ
_TEXT	SEGMENT
?Release@CDecoder@NZipStrong@NCrypto@@W7AGKXZ PROC	; [thunk]:NCrypto::NZipStrong::CDecoder::Release`adjustor{8}', COMDAT
	sub	DWORD PTR [esp+4], 8
	jmp	?Release@CDecoder@NZipStrong@NCrypto@@UAGKXZ ; NCrypto::NZipStrong::CDecoder::Release
?Release@CDecoder@NZipStrong@NCrypto@@W7AGKXZ ENDP	; [thunk]:NCrypto::NZipStrong::CDecoder::Release`adjustor{8}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{12}', COMDAT
	sub	DWORD PTR [esp+4], 12			; 0000000cH
	jmp	?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::CCopyCoder::QueryInterface
?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{12}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CBaseCoder@NWzAes@NCrypto@@W3AGKXZ
_TEXT	SEGMENT
?AddRef@CBaseCoder@NWzAes@NCrypto@@W3AGKXZ PROC		; [thunk]:NCrypto::NWzAes::CBaseCoder::AddRef`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?AddRef@CBaseCoder@NWzAes@NCrypto@@UAGKXZ ; NCrypto::NWzAes::CBaseCoder::AddRef
?AddRef@CBaseCoder@NWzAes@NCrypto@@W3AGKXZ ENDP		; [thunk]:NCrypto::NWzAes::CBaseCoder::AddRef`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CDecoder@NZipStrong@NCrypto@@W3AGKXZ
_TEXT	SEGMENT
?AddRef@CDecoder@NZipStrong@NCrypto@@W3AGKXZ PROC	; [thunk]:NCrypto::NZipStrong::CDecoder::AddRef`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?AddRef@CDecoder@NZipStrong@NCrypto@@UAGKXZ ; NCrypto::NZipStrong::CDecoder::AddRef
?AddRef@CDecoder@NZipStrong@NCrypto@@W3AGKXZ ENDP	; [thunk]:NCrypto::NZipStrong::CDecoder::AddRef`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CCipher@NZip@NCrypto@@W3AGKXZ
_TEXT	SEGMENT
?Release@CCipher@NZip@NCrypto@@W3AGKXZ PROC		; [thunk]:NCrypto::NZip::CCipher::Release`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?Release@CCipher@NZip@NCrypto@@UAGKXZ	; NCrypto::NZip::CCipher::Release
?Release@CCipher@NZip@NCrypto@@W3AGKXZ ENDP		; [thunk]:NCrypto::NZip::CCipher::Release`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CHandler@NZip@NArchive@@W3AGKXZ
_TEXT	SEGMENT
?Release@CHandler@NZip@NArchive@@W3AGKXZ PROC		; [thunk]:NArchive::NZip::CHandler::Release`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?Release@CHandler@NZip@NArchive@@UAGKXZ	; NArchive::NZip::CHandler::Release
?Release@CHandler@NZip@NArchive@@W3AGKXZ ENDP		; [thunk]:NArchive::NZip::CHandler::Release`adjustor{4}'
_TEXT	ENDS
END
