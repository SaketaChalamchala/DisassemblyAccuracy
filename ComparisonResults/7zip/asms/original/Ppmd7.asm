; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\C\Ppmd7.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_PPMD7_kExpEscape
CONST	SEGMENT
_PPMD7_kExpEscape DB 019H
	DB	0eH
	DB	09H
	DB	07H
	DB	05H
	DB	05H
	DB	04H
	DB	04H
	DB	04H
	DB	03H
	DB	03H
	DB	03H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
_kInitBinEsc DW	03cddH
	DW	01f3fH
	DW	059bfH
	DW	048f3H
	DW	064a1H
	DW	05abcH
	DW	06632H
	DW	06051H
CONST	ENDS
PUBLIC	_Ppmd7_Construct@4
EXTRN	_memset:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\c\ppmd7.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
tv70 = -20						; size = 4
_step$2903 = -16					; size = 4
_m$ = -12						; size = 4
_k$ = -8						; size = 4
_i$ = -4						; size = 4
_p$ = 8							; size = 4
_Ppmd7_Construct@4 PROC
; Line 61
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 64
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+48], 0
; Line 66
	mov	DWORD PTR _i$[ebp], 0
	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $LN13@Ppmd7_Cons
$LN12@Ppmd7_Cons:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN13@Ppmd7_Cons:
	cmp	DWORD PTR _i$[ebp], 38			; 00000026H
	jae	SHORT $LN11@Ppmd7_Cons
; Line 68
	cmp	DWORD PTR _i$[ebp], 12			; 0000000cH
	jb	SHORT $LN16@Ppmd7_Cons
	mov	DWORD PTR tv70[ebp], 4
	jmp	SHORT $LN17@Ppmd7_Cons
$LN16@Ppmd7_Cons:
	mov	edx, DWORD PTR _i$[ebp]
	shr	edx, 2
	add	edx, 1
	mov	DWORD PTR tv70[ebp], edx
$LN17@Ppmd7_Cons:
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR _step$2903[ebp], eax
$LN10@Ppmd7_Cons:
; Line 69
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR _k$[ebp]
	mov	dl, BYTE PTR _i$[ebp]
	mov	BYTE PTR [ecx+110], dl
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
	mov	ecx, DWORD PTR _step$2903[ebp]
	sub	ecx, 1
	mov	DWORD PTR _step$2903[ebp], ecx
	jne	SHORT $LN10@Ppmd7_Cons
; Line 70
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	mov	al, BYTE PTR _k$[ebp]
	mov	BYTE PTR [edx+72], al
; Line 71
	jmp	SHORT $LN12@Ppmd7_Cons
$LN11@Ppmd7_Cons:
; Line 73
	mov	ecx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [ecx+648], 0
; Line 74
	mov	edx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [edx+649], 2
; Line 75
	push	9
	push	4
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 650				; 0000028aH
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 76
	push	245					; 000000f5H
	push	6
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 659				; 00000293H
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 78
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@Ppmd7_Cons
$LN6@Ppmd7_Cons:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN7@Ppmd7_Cons:
	cmp	DWORD PTR _i$[ebp], 3
	jae	SHORT $LN5@Ppmd7_Cons
; Line 79
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR _i$[ebp]
	mov	BYTE PTR [eax+392], cl
	jmp	SHORT $LN6@Ppmd7_Cons
$LN5@Ppmd7_Cons:
; Line 80
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _m$[ebp], edx
	mov	DWORD PTR _k$[ebp], 1
	jmp	SHORT $LN4@Ppmd7_Cons
$LN3@Ppmd7_Cons:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@Ppmd7_Cons:
	cmp	DWORD PTR _i$[ebp], 256			; 00000100H
	jae	SHORT $LN2@Ppmd7_Cons
; Line 82
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	dl, BYTE PTR _m$[ebp]
	mov	BYTE PTR [ecx+392], dl
; Line 83
	mov	eax, DWORD PTR _k$[ebp]
	sub	eax, 1
	mov	DWORD PTR _k$[ebp], eax
	jne	SHORT $LN1@Ppmd7_Cons
; Line 84
	mov	ecx, DWORD PTR _m$[ebp]
	add	ecx, 1
	mov	DWORD PTR _m$[ebp], ecx
	mov	edx, DWORD PTR _m$[ebp]
	sub	edx, 2
	mov	DWORD PTR _k$[ebp], edx
$LN1@Ppmd7_Cons:
; Line 85
	jmp	SHORT $LN3@Ppmd7_Cons
$LN2@Ppmd7_Cons:
; Line 87
	push	64					; 00000040H
	push	0
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 904				; 00000388H
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 88
	push	192					; 000000c0H
	push	8
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 968				; 000003c8H
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 89
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_Ppmd7_Construct@4 ENDP
_TEXT	ENDS
PUBLIC	_Ppmd7_Free@8
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = 8							; size = 4
_alloc$ = 12						; size = 4
_Ppmd7_Free@8 PROC
; Line 92
	push	ebp
	mov	ebp, esp
	push	esi
; Line 93
	mov	esi, esp
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	mov	edx, DWORD PTR _alloc$[ebp]
	push	edx
	mov	eax, DWORD PTR _alloc$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 94
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+40], 0
; Line 95
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+48], 0
; Line 96
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_Ppmd7_Free@8 ENDP
_TEXT	ENDS
PUBLIC	_Ppmd7_Alloc@12
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv74 = -4						; size = 4
_p$ = 8							; size = 4
_size$ = 12						; size = 4
_alloc$ = 16						; size = 4
_Ppmd7_Alloc@12 PROC
; Line 99
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 100
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+48], 0
	je	SHORT $LN2@Ppmd7_Allo
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	cmp	edx, DWORD PTR _size$[ebp]
	je	SHORT $LN3@Ppmd7_Allo
$LN2@Ppmd7_Allo:
; Line 102
	mov	eax, DWORD PTR _alloc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_Ppmd7_Free@8
; Line 105
	mov	edx, 4
	sub	edx, DWORD PTR _size$[ebp]
	and	edx, 3
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+68], edx
; Line 113
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	add	edx, DWORD PTR _size$[ebp]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _alloc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _alloc$[ebp]
	mov	edx, DWORD PTR [ecx]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv74[ebp], eax
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR tv74[ebp]
	mov	DWORD PTR [eax+48], ecx
	cmp	DWORD PTR tv74[ebp], 0
	jne	SHORT $LN1@Ppmd7_Allo
; Line 114
	xor	eax, eax
	jmp	SHORT $LN4@Ppmd7_Allo
$LN1@Ppmd7_Allo:
; Line 115
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+40], eax
$LN3@Ppmd7_Allo:
; Line 117
	mov	eax, 1
$LN4@Ppmd7_Allo:
; Line 118
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_Ppmd7_Alloc@12 ENDP
_TEXT	ENDS
PUBLIC	_Ppmd7_Init@8
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = 8							; size = 4
_maxOrder$ = 12						; size = 4
_Ppmd7_Init@8 PROC
; Line 335
	push	ebp
	mov	ebp, esp
; Line 336
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _maxOrder$[ebp]
	mov	DWORD PTR [eax+24], ecx
; Line 337
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_RestartModel@4
; Line 338
	mov	eax, DWORD PTR _p$[ebp]
	mov	BYTE PTR [eax+1162], 7
; Line 339
	xor	ecx, ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	WORD PTR [edx+1160], cx
; Line 340
	mov	eax, DWORD PTR _p$[ebp]
	mov	BYTE PTR [eax+1163], 64			; 00000040H
; Line 341
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_Ppmd7_Init@8 ENDP
; Function compile flags: /Odtp /RTCsu
tv132 = -44						; size = 4
tv95 = -40						; size = 4
tv93 = -36						; size = 4
tv84 = -32						; size = 4
_s$3112 = -28						; size = 4
_val$3101 = -24						; size = 2
_dest$3100 = -20					; size = 4
_s$3092 = -16						; size = 4
_m$ = -12						; size = 4
_k$ = -8						; size = 4
_i$ = -4						; size = 4
_p$ = 8							; size = 4
_RestartModel@4 PROC
; Line 288
	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 291
	push	152					; 00000098H
	push	0
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 240				; 000000f0H
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 292
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR _p$[ebp]
	add	edx, DWORD PTR [eax+68]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+60], edx
; Line 293
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+60]
	mov	ecx, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR [ecx+40]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+56], eax
; Line 294
	mov	eax, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [eax+40]
	shr	eax, 3
	xor	edx, edx
	mov	ecx, 12					; 0000000cH
	div	ecx
	imul	eax, 7
	imul	eax, 12					; 0000000cH
	mov	edx, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	sub	ecx, eax
	mov	DWORD PTR tv84[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR tv84[ebp]
	mov	DWORD PTR [edx+64], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR tv84[ebp]
	mov	DWORD PTR [ecx+52], edx
; Line 295
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+44], 0
; Line 297
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [ecx+12], eax
; Line 298
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [ecx+24], 12			; 0000000cH
	jae	SHORT $LN21@RestartMod
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR tv93[ebp], eax
	jmp	SHORT $LN22@RestartMod
$LN21@RestartMod:
	mov	DWORD PTR tv93[ebp], 12			; 0000000cH
$LN22@RestartMod:
	mov	ecx, DWORD PTR tv93[ebp]
	neg	ecx
	sub	ecx, 1
	mov	DWORD PTR tv95[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR tv95[ebp]
	mov	DWORD PTR [edx+36], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR tv95[ebp]
	mov	DWORD PTR [ecx+32], edx
; Line 299
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+20], 0
; Line 301
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	sub	edx, 12					; 0000000cH
	mov	DWORD PTR tv132[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR tv132[ebp]
	mov	DWORD PTR [eax+56], ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR tv132[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR tv132[ebp]
	mov	DWORD PTR [ecx], edx
; Line 302
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+8], 0
; Line 303
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, 256				; 00000100H
	mov	WORD PTR [eax], cx
; Line 304
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, 257				; 00000101H
	mov	WORD PTR [eax+2], cx
; Line 305
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR [edx+8], ecx
; Line 306
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+52]
	add	eax, 1536				; 00000600H
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+52], eax
; Line 307
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+4], edx
; Line 308
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN18@RestartMod
$LN17@RestartMod:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN18@RestartMod:
	cmp	DWORD PTR _i$[ebp], 256			; 00000100H
	jae	SHORT $LN16@RestartMod
; Line 310
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 6
	mov	edx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR _s$3092[ebp], ecx
; Line 311
	mov	eax, DWORD PTR _s$3092[ebp]
	mov	cl, BYTE PTR _i$[ebp]
	mov	BYTE PTR [eax], cl
; Line 312
	mov	edx, DWORD PTR _s$3092[ebp]
	mov	BYTE PTR [edx+1], 1
; Line 313
	push	0
	mov	eax, DWORD PTR _s$3092[ebp]
	push	eax
	call	_SetSuccessor@8
; Line 314
	jmp	SHORT $LN17@RestartMod
$LN16@RestartMod:
; Line 316
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN15@RestartMod
$LN14@RestartMod:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN15@RestartMod:
	cmp	DWORD PTR _i$[ebp], 128			; 00000080H
	jae	$LN13@RestartMod
; Line 317
	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $LN12@RestartMod
$LN11@RestartMod:
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
$LN12@RestartMod:
	cmp	DWORD PTR _k$[ebp], 8
	jae	SHORT $LN10@RestartMod
; Line 319
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR _p$[ebp]
	lea	edx, DWORD PTR [ecx+eax+2764]
	mov	eax, DWORD PTR _k$[ebp]
	lea	ecx, DWORD PTR [edx+eax*2]
	mov	DWORD PTR _dest$3100[ebp], ecx
; Line 320
	mov	edx, DWORD PTR _k$[ebp]
	movzx	eax, WORD PTR _kInitBinEsc[edx*2]
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 2
	xor	edx, edx
	div	ecx
	mov	edx, 16384				; 00004000H
	sub	edx, eax
	mov	WORD PTR _val$3101[ebp], dx
; Line 321
	mov	DWORD PTR _m$[ebp], 0
	jmp	SHORT $LN9@RestartMod
$LN8@RestartMod:
	mov	eax, DWORD PTR _m$[ebp]
	add	eax, 8
	mov	DWORD PTR _m$[ebp], eax
$LN9@RestartMod:
	cmp	DWORD PTR _m$[ebp], 64			; 00000040H
	jae	SHORT $LN7@RestartMod
; Line 322
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR _dest$3100[ebp]
	mov	ax, WORD PTR _val$3101[ebp]
	mov	WORD PTR [edx+ecx*2], ax
	jmp	SHORT $LN8@RestartMod
$LN7@RestartMod:
; Line 323
	jmp	SHORT $LN11@RestartMod
$LN10@RestartMod:
	jmp	$LN14@RestartMod
$LN13@RestartMod:
; Line 325
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@RestartMod
$LN5@RestartMod:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN6@RestartMod:
	cmp	DWORD PTR _i$[ebp], 25			; 00000019H
	jae	SHORT $LN19@RestartMod
; Line 326
	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $LN3@RestartMod
$LN2@RestartMod:
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
$LN3@RestartMod:
	cmp	DWORD PTR _k$[ebp], 16			; 00000010H
	jae	SHORT $LN1@RestartMod
; Line 328
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR _p$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1164]
	mov	eax, DWORD PTR _k$[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _s$3112[ebp], ecx
; Line 329
	mov	edx, DWORD PTR _s$3112[ebp]
	mov	BYTE PTR [edx+2], 3
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 5
	lea	ecx, DWORD PTR [eax*8+80]
	mov	edx, DWORD PTR _s$3112[ebp]
	mov	WORD PTR [edx], cx
; Line 330
	mov	eax, DWORD PTR _s$3112[ebp]
	mov	BYTE PTR [eax+3], 4
; Line 331
	jmp	SHORT $LN2@RestartMod
$LN1@RestartMod:
	jmp	SHORT $LN5@RestartMod
$LN19@RestartMod:
; Line 332
	pop	edi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_RestartModel@4 ENDP
; Function compile flags: /Odtp /RTCsu
_p$ = 8						; size = 4
_v$ = 12						; size = 4
_SetSuccessor@8 PROC
; Line 282
	push	ebp
	mov	ebp, esp
; Line 283
	mov	eax, DWORD PTR _v$[ebp]
	and	eax, 65535				; 0000ffffH
	mov	ecx, DWORD PTR _p$[ebp]
	mov	WORD PTR [ecx+2], ax
; Line 284
	mov	edx, DWORD PTR _v$[ebp]
	shr	edx, 16					; 00000010H
	and	edx, 65535				; 0000ffffH
	mov	eax, DWORD PTR _p$[ebp]
	mov	WORD PTR [eax+4], dx
; Line 285
	pop	ebp
	ret	8
_SetSuccessor@8 ENDP
_TEXT	ENDS
PUBLIC	_Ppmd7_MakeEscFreq@12
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_r$3316 = -12						; size = 4
_nonMasked$ = -8					; size = 4
_see$ = -4						; size = 4
_p$ = 8							; size = 4
_numMasked$ = 12					; size = 4
_escFreq$ = 16						; size = 4
_Ppmd7_MakeEscFreq@12 PROC
; Line 637
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	ebx
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 639
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, WORD PTR [ecx]
	sub	edx, DWORD PTR _numMasked$[ebp]
	mov	DWORD PTR _nonMasked$[ebp], edx
; Line 640
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, WORD PTR [ecx]
	cmp	edx, 256				; 00000100H
	je	$LN2@Ppmd7_Make
; Line 646
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR _nonMasked$[ebp]
	movzx	ecx, BYTE PTR [eax+391]
	shl	ecx, 6
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx+1164]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+8]
	movzx	edx, WORD PTR [ecx]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [ecx]
	movzx	ecx, WORD PTR [ecx]
	sub	edx, ecx
	cmp	DWORD PTR _nonMasked$[ebp], edx
	sbb	edx, edx
	neg	edx
	lea	eax, DWORD PTR [eax+edx*4]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	ecx, WORD PTR [edx+2]
	mov	edx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [edx]
	movzx	edx, WORD PTR [edx]
	imul	edx, 11					; 0000000bH
	xor	ebx, ebx
	cmp	ecx, edx
	setl	bl
	shl	ebx, 1
	lea	eax, DWORD PTR [eax+ebx*4]
	mov	ecx, DWORD PTR _numMasked$[ebp]
	cmp	DWORD PTR _nonMasked$[ebp], ecx
	sbb	edx, edx
	neg	edx
	shl	edx, 2
	lea	eax, DWORD PTR [eax+edx*4]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _see$[ebp], eax
; Line 648
	mov	ecx, DWORD PTR _see$[ebp]
	movzx	edx, WORD PTR [ecx]
	mov	eax, DWORD PTR _see$[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	sar	edx, cl
	mov	DWORD PTR _r$3316[ebp], edx
; Line 649
	mov	ecx, DWORD PTR _see$[ebp]
	movzx	edx, WORD PTR [ecx]
	sub	edx, DWORD PTR _r$3316[ebp]
	mov	eax, DWORD PTR _see$[ebp]
	mov	WORD PTR [eax], dx
; Line 650
	xor	ecx, ecx
	cmp	DWORD PTR _r$3316[ebp], 0
	sete	cl
	add	ecx, DWORD PTR _r$3316[ebp]
	mov	edx, DWORD PTR _escFreq$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 653
	jmp	SHORT $LN1@Ppmd7_Make
$LN2@Ppmd7_Make:
; Line 655
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1160				; 00000488H
	mov	DWORD PTR _see$[ebp], eax
; Line 656
	mov	ecx, DWORD PTR _escFreq$[ebp]
	mov	DWORD PTR [ecx], 1
$LN1@Ppmd7_Make:
; Line 658
	mov	eax, DWORD PTR _see$[ebp]
; Line 659
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_Ppmd7_MakeEscFreq@12 ENDP
_TEXT	ENDS
PUBLIC	_Ppmd7_Update1@4
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_s$ = -4						; size = 4
_p$ = 8							; size = 4
_Ppmd7_Update1@4 PROC
; Line 671
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 672
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _s$[ebp], ecx
; Line 673
	mov	edx, DWORD PTR _s$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	add	eax, 4
	mov	ecx, DWORD PTR _s$[ebp]
	mov	BYTE PTR [ecx+1], al
; Line 674
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, WORD PTR [eax+2]
	add	ecx, 4
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	WORD PTR [eax+2], cx
; Line 675
	mov	ecx, DWORD PTR _s$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, BYTE PTR [eax-5]
	cmp	edx, ecx
	jle	SHORT $LN2@Ppmd7_Upda
; Line 677
	mov	edx, DWORD PTR _s$[ebp]
	sub	edx, 6
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_SwapStates@8
; Line 678
	mov	ecx, DWORD PTR _s$[ebp]
	sub	ecx, 6
	mov	DWORD PTR _s$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 679
	mov	ecx, DWORD PTR _s$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	cmp	edx, 124				; 0000007cH
	jle	SHORT $LN2@Ppmd7_Upda
; Line 680
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_Rescale@4
$LN2@Ppmd7_Upda:
; Line 682
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_NextContext@4
; Line 683
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_Ppmd7_Update1@4 ENDP
_TEXT	ENDS
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_tmp$ = -12						; size = 6
_t1$ = 8						; size = 4
_t2$ = 12						; size = 4
_SwapStates@8 PROC
; Line 417
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 418
	mov	eax, DWORD PTR _t1$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _tmp$[ebp], ecx
	mov	dx, WORD PTR [eax+4]
	mov	WORD PTR _tmp$[ebp+4], dx
; Line 419
	mov	eax, DWORD PTR _t2$[ebp]
	mov	ecx, DWORD PTR _t1$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR [eax+4]
	mov	WORD PTR [ecx+4], ax
; Line 420
	mov	ecx, DWORD PTR _t2$[ebp]
	mov	edx, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR _tmp$[ebp+4]
	mov	WORD PTR [ecx+4], ax
; Line 421
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@SwapStates
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	esp, ebp
	pop	ebp
	ret	8
$LN5@SwapStates:
	DD	1
	DD	$LN4@SwapStates
$LN4@SwapStates:
	DD	-12					; fffffff4H
	DD	6
	DD	$LN3@SwapStates
$LN3@SwapStates:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
_SwapStates@8 ENDP
; Function compile flags: /Odtp /RTCsu
tv195 = -92						; size = 4
_tmp$3295 = -84						; size = 6
_n1$3289 = -72						; size = 4
_n0$3288 = -68						; size = 4
_numStats$3287 = -64					; size = 4
_tmp$3281 = -56						; size = 6
_s1$3280 = -44						; size = 4
_tmp$3270 = -36						; size = 6
_s$ = -24						; size = 4
_stats$ = -20						; size = 4
_escFreq$ = -16						; size = 4
_sumFreq$ = -12						; size = 4
_adder$ = -8						; size = 4
_i$ = -4						; size = 4
_p$ = 8							; size = 4
_Rescale@4 PROC
; Line 573
	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	edi
	lea	edi, DWORD PTR [ebp-92]
	mov	ecx, 23					; 00000017H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 575
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _stats$[ebp], edx
; Line 576
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _s$[ebp], ecx
; Line 578
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _tmp$3270[ebp], eax
	mov	cx, WORD PTR [edx+4]
	mov	WORD PTR _tmp$3270[ebp+4], cx
; Line 579
	jmp	SHORT $LN20@Rescale
$LN19@Rescale:
	mov	edx, DWORD PTR _s$[ebp]
	sub	edx, 6
	mov	DWORD PTR _s$[ebp], edx
$LN20@Rescale:
	mov	eax, DWORD PTR _s$[ebp]
	cmp	eax, DWORD PTR _stats$[ebp]
	je	SHORT $LN18@Rescale
; Line 580
	mov	ecx, DWORD PTR _s$[ebp]
	sub	ecx, 6
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	cx, WORD PTR [ecx+4]
	mov	WORD PTR [edx+4], cx
	jmp	SHORT $LN19@Rescale
$LN18@Rescale:
; Line 581
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _tmp$3270[ebp]
	mov	DWORD PTR [edx], eax
	mov	cx, WORD PTR _tmp$3270[ebp+4]
	mov	WORD PTR [edx+4], cx
; Line 583
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, WORD PTR [eax+2]
	mov	edx, DWORD PTR _s$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	sub	ecx, eax
	mov	DWORD PTR _escFreq$[ebp], ecx
; Line 584
	mov	ecx, DWORD PTR _s$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	add	edx, 4
	mov	eax, DWORD PTR _s$[ebp]
	mov	BYTE PTR [eax+1], dl
; Line 585
	mov	ecx, DWORD PTR _p$[ebp]
	xor	edx, edx
	cmp	DWORD PTR [ecx+12], 0
	setne	dl
	mov	DWORD PTR _adder$[ebp], edx
; Line 586
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	add	ecx, DWORD PTR _adder$[ebp]
	shr	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	BYTE PTR [edx+1], cl
; Line 587
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	mov	DWORD PTR _sumFreq$[ebp], ecx
; Line 589
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, WORD PTR [eax]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN17@Rescale:
; Line 592
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, 6
	mov	DWORD PTR _s$[ebp], edx
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	mov	edx, DWORD PTR _escFreq$[ebp]
	sub	edx, ecx
	mov	DWORD PTR _escFreq$[ebp], edx
; Line 593
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	add	ecx, DWORD PTR _adder$[ebp]
	shr	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	BYTE PTR [edx+1], cl
; Line 594
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	add	ecx, DWORD PTR _sumFreq$[ebp]
	mov	DWORD PTR _sumFreq$[ebp], ecx
; Line 595
	mov	edx, DWORD PTR _s$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	mov	ecx, DWORD PTR _s$[ebp]
	movzx	edx, BYTE PTR [ecx-5]
	cmp	eax, edx
	jle	SHORT $LN16@Rescale
; Line 597
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR _s1$3280[ebp], eax
; Line 598
	mov	ecx, DWORD PTR _s1$3280[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _tmp$3281[ebp], edx
	mov	ax, WORD PTR [ecx+4]
	mov	WORD PTR _tmp$3281[ebp+4], ax
$LN13@Rescale:
; Line 600
	mov	ecx, DWORD PTR _s1$3280[ebp]
	sub	ecx, 6
	mov	edx, DWORD PTR _s1$3280[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	cx, WORD PTR [ecx+4]
	mov	WORD PTR [edx+4], cx
; Line 601
	mov	edx, DWORD PTR _s1$3280[ebp]
	sub	edx, 6
	mov	DWORD PTR _s1$3280[ebp], edx
	mov	eax, DWORD PTR _s1$3280[ebp]
	cmp	eax, DWORD PTR _stats$[ebp]
	je	SHORT $LN11@Rescale
	movzx	ecx, BYTE PTR _tmp$3281[ebp+1]
	mov	edx, DWORD PTR _s1$3280[ebp]
	movzx	eax, BYTE PTR [edx-5]
	cmp	ecx, eax
	jg	SHORT $LN13@Rescale
$LN11@Rescale:
; Line 602
	mov	ecx, DWORD PTR _s1$3280[ebp]
	mov	edx, DWORD PTR _tmp$3281[ebp]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR _tmp$3281[ebp+4]
	mov	WORD PTR [ecx+4], ax
$LN16@Rescale:
; Line 605
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	jne	$LN17@Rescale
; Line 607
	mov	edx, DWORD PTR _s$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	test	eax, eax
	jne	$LN9@Rescale
; Line 609
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, WORD PTR [edx]
	mov	DWORD PTR _numStats$3287[ebp], eax
$LN8@Rescale:
; Line 611
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	mov	edx, DWORD PTR _s$[ebp]
	sub	edx, 6
	mov	DWORD PTR _s$[ebp], edx
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	test	ecx, ecx
	je	SHORT $LN8@Rescale
; Line 612
	mov	edx, DWORD PTR _escFreq$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _escFreq$[ebp], edx
; Line 613
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, WORD PTR [ecx]
	sub	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	WORD PTR [ecx], dx
; Line 614
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 1
	jne	SHORT $LN5@Rescale
; Line 616
	mov	edx, DWORD PTR _stats$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _tmp$3295[ebp], eax
	mov	cx, WORD PTR [edx+4]
	mov	WORD PTR _tmp$3295[ebp+4], cx
$LN4@Rescale:
; Line 619
	movzx	edx, BYTE PTR _tmp$3295[ebp+1]
	movzx	eax, BYTE PTR _tmp$3295[ebp+1]
	sar	eax, 1
	sub	edx, eax
	mov	BYTE PTR _tmp$3295[ebp+1], dl
; Line 620
	mov	ecx, DWORD PTR _escFreq$[ebp]
	shr	ecx, 1
	mov	DWORD PTR _escFreq$[ebp], ecx
; Line 622
	cmp	DWORD PTR _escFreq$[ebp], 1
	ja	SHORT $LN4@Rescale
; Line 623
	mov	edx, DWORD PTR _numStats$3287[ebp]
	add	edx, 1
	shr	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+109]
	push	ecx
	mov	edx, DWORD PTR _stats$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_InsertNode@12
; Line 624
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 2
	mov	DWORD PTR tv195[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR tv195[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR tv195[ebp]
	mov	eax, DWORD PTR _tmp$3295[ebp]
	mov	DWORD PTR [edx], eax
	mov	cx, WORD PTR _tmp$3295[ebp+4]
	mov	WORD PTR [edx+4], cx
; Line 625
	jmp	SHORT $LN21@Rescale
$LN5@Rescale:
; Line 627
	mov	edx, DWORD PTR _numStats$3287[ebp]
	add	edx, 1
	shr	edx, 1
	mov	DWORD PTR _n0$3288[ebp], edx
; Line 628
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, WORD PTR [ecx]
	add	edx, 1
	sar	edx, 1
	mov	DWORD PTR _n1$3289[ebp], edx
; Line 629
	mov	eax, DWORD PTR _n0$3288[ebp]
	cmp	eax, DWORD PTR _n1$3289[ebp]
	je	SHORT $LN9@Rescale
; Line 630
	mov	ecx, DWORD PTR _n1$3289[ebp]
	push	ecx
	mov	edx, DWORD PTR _n0$3288[ebp]
	push	edx
	mov	eax, DWORD PTR _stats$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_ShrinkUnits@16
	mov	edx, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [ecx+4], eax
$LN9@Rescale:
; Line 632
	mov	edx, DWORD PTR _sumFreq$[ebp]
	add	edx, DWORD PTR _escFreq$[ebp]
	mov	eax, DWORD PTR _escFreq$[ebp]
	shr	eax, 1
	sub	edx, eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	WORD PTR [eax+2], dx
; Line 633
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+8], ecx
$LN21@Rescale:
; Line 634
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN27@Rescale
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 92					; 0000005cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN27@Rescale:
	DD	3
	DD	$LN26@Rescale
$LN26@Rescale:
	DD	-36					; ffffffdcH
	DD	6
	DD	$LN23@Rescale
	DD	-56					; ffffffc8H
	DD	6
	DD	$LN24@Rescale
	DD	-84					; ffffffacH
	DD	6
	DD	$LN25@Rescale
$LN25@Rescale:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
$LN24@Rescale:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
$LN23@Rescale:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
_Rescale@4 ENDP
; Function compile flags: /Odtp /RTCsu
_p$ = 8						; size = 4
_node$ = 12						; size = 4
_indx$ = 16						; size = 4
_InsertNode@12 PROC
; Line 121
	push	ebp
	mov	ebp, esp
; Line 122
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR _indx$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4+240]
	mov	DWORD PTR [eax], ecx
; Line 123
	mov	edx, DWORD PTR _indx$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [eax+edx*4+240], ecx
; Line 124
	pop	ebp
	ret	12					; 0000000cH
_InsertNode@12 ENDP
; Function compile flags: /Odtp /RTCsu
_n$3064 = -24						; size = 4
_s$3062 = -20						; size = 4
_d$3060 = -16						; size = 4
_ptr$3059 = -12						; size = 4
_i1$ = -8						; size = 4
_i0$ = -4						; size = 4
_p$ = 8							; size = 4
_oldPtr$ = 12						; size = 4
_oldNU$ = 16						; size = 4
_newNU$ = 20						; size = 4
_ShrinkUnits@16 PROC
; Line 263
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 264
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR _oldNU$[ebp]
	movzx	ecx, BYTE PTR [eax+109]
	mov	DWORD PTR _i0$[ebp], ecx
; Line 265
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, DWORD PTR _newNU$[ebp]
	movzx	eax, BYTE PTR [edx+109]
	mov	DWORD PTR _i1$[ebp], eax
; Line 266
	mov	ecx, DWORD PTR _i0$[ebp]
	cmp	ecx, DWORD PTR _i1$[ebp]
	jne	SHORT $LN5@ShrinkUnit
; Line 267
	mov	eax, DWORD PTR _oldPtr$[ebp]
	jmp	$LN6@ShrinkUnit
$LN5@ShrinkUnit:
; Line 268
	mov	edx, DWORD PTR _i1$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+edx*4+240], 0
	je	SHORT $LN4@ShrinkUnit
; Line 270
	mov	ecx, DWORD PTR _i1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_RemoveNode@8
	mov	DWORD PTR _ptr$3059[ebp], eax
; Line 271
	mov	eax, DWORD PTR _ptr$3059[ebp]
	mov	DWORD PTR _d$3060[ebp], eax
	mov	ecx, DWORD PTR _oldPtr$[ebp]
	mov	DWORD PTR _s$3062[ebp], ecx
	mov	edx, DWORD PTR _newNU$[ebp]
	mov	DWORD PTR _n$3064[ebp], edx
$LN3@ShrinkUnit:
	mov	eax, DWORD PTR _d$3060[ebp]
	mov	ecx, DWORD PTR _s$3062[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _d$3060[ebp]
	mov	ecx, DWORD PTR _s$3062[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _d$3060[ebp]
	mov	ecx, DWORD PTR _s$3062[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _s$3062[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _s$3062[ebp], eax
	mov	ecx, DWORD PTR _d$3060[ebp]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR _d$3060[ebp], ecx
	mov	edx, DWORD PTR _n$3064[ebp]
	sub	edx, 1
	mov	DWORD PTR _n$3064[ebp], edx
	jne	SHORT $LN3@ShrinkUnit
; Line 272
	mov	eax, DWORD PTR _i0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _oldPtr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_InsertNode@12
; Line 273
	mov	eax, DWORD PTR _ptr$3059[ebp]
	jmp	SHORT $LN6@ShrinkUnit
$LN4@ShrinkUnit:
; Line 275
	mov	eax, DWORD PTR _i1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _oldPtr$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_SplitBlock@16
; Line 276
	mov	eax, DWORD PTR _oldPtr$[ebp]
$LN6@ShrinkUnit:
; Line 277
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_ShrinkUnits@16 ENDP
; Function compile flags: /Odtp /RTCsu
_node$ = -4						; size = 4
_p$ = 8							; size = 4
_indx$ = 12						; size = 4
_RemoveNode@8 PROC
; Line 127
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 128
	mov	eax, DWORD PTR _indx$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+240]
	mov	DWORD PTR _node$[ebp], edx
; Line 129
	mov	eax, DWORD PTR _indx$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR [ecx+eax*4+240], edx
; Line 130
	mov	eax, DWORD PTR _node$[ebp]
; Line 131
	mov	esp, ebp
	pop	ebp
	ret	8
_RemoveNode@8 ENDP
; Function compile flags: /Odtp /RTCsu
_k$2966 = -12						; size = 4
_nu$ = -8						; size = 4
_i$ = -4						; size = 4
_p$ = 8							; size = 4
_ptr$ = 12						; size = 4
_oldIndx$ = 16						; size = 4
_newIndx$ = 20						; size = 4
_SplitBlock@16 PROC
; Line 134
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 135
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR _oldIndx$[ebp]
	movzx	ecx, BYTE PTR [eax+72]
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, DWORD PTR _newIndx$[ebp]
	movzx	eax, BYTE PTR [edx+72]
	sub	ecx, eax
	mov	DWORD PTR _nu$[ebp], ecx
; Line 136
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR _newIndx$[ebp]
	movzx	edx, BYTE PTR [ecx+72]
	imul	edx, 12					; 0000000cH
	add	edx, DWORD PTR _ptr$[ebp]
	mov	DWORD PTR _ptr$[ebp], edx
; Line 137
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR _nu$[ebp]
	movzx	ecx, BYTE PTR [eax+109]
	mov	DWORD PTR _i$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [edx+72]
	cmp	eax, DWORD PTR _nu$[ebp]
	je	SHORT $LN1@SplitBlock
; Line 139
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [edx+72]
	mov	DWORD PTR _k$2966[ebp], eax
; Line 140
	mov	ecx, DWORD PTR _nu$[ebp]
	sub	ecx, DWORD PTR _k$2966[ebp]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _k$2966[ebp]
	imul	edx, 12					; 0000000cH
	add	edx, DWORD PTR _ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_InsertNode@12
$LN1@SplitBlock:
; Line 142
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_InsertNode@12
; Line 143
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_SplitBlock@16 ENDP
; Function compile flags: /Odtp /RTCsu
_c$ = -4						; size = 4
_p$ = 8							; size = 4
_NextContext@4 PROC
; Line 662
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 663
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movzx	edx, WORD PTR [ecx+2]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movzx	eax, WORD PTR [ecx+4]
	shl	eax, 16					; 00000010H
	or	edx, eax
	mov	DWORD PTR _c$[ebp], edx
; Line 664
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	jne	SHORT $LN2@NextContex
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _c$[ebp]
	cmp	eax, DWORD PTR [edx+60]
	jbe	SHORT $LN2@NextContex
; Line 665
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 666
	jmp	SHORT $LN3@NextContex
$LN2@NextContex:
; Line 667
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_UpdateModel@4
$LN3@NextContex:
; Line 668
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_NextContext@4 ENDP
; Function compile flags: /Odtp /RTCsu
tv188 = -88						; size = 4
tv159 = -84						; size = 4
_s$3256 = -80						; size = 4
_s$3244 = -76						; size = 4
_n$3237 = -72						; size = 4
_s$3235 = -68						; size = 4
_d$3233 = -64						; size = 4
_oldPtr$3231 = -60					; size = 4
_ptr$3230 = -56						; size = 4
_i$3228 = -52						; size = 4
_oldNU$3227 = -48					; size = 4
_sf$3224 = -44						; size = 4
_cf$3223 = -40						; size = 4
_ns1$3222 = -36						; size = 4
_cs$3213 = -32						; size = 4
_s$3201 = -28						; size = 4
_s$3197 = -24						; size = 4
_ns$ = -20						; size = 4
_s0$ = -16						; size = 4
_c$ = -12						; size = 4
_fSuccessor$ = -8					; size = 4
_successor$ = -4					; size = 4
_p$ = 8							; size = 4
_UpdateModel@4 PROC
; Line 424
	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-88]
	mov	ecx, 22					; 00000016H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 425
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movzx	edx, WORD PTR [ecx+2]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movzx	eax, WORD PTR [ecx+4]
	shl	eax, 16					; 00000010H
	or	edx, eax
	mov	DWORD PTR _fSuccessor$[ebp], edx
; Line 429
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movzx	eax, BYTE PTR [edx+1]
	cmp	eax, 31					; 0000001fH
	jge	$LN34@UpdateMode
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx+8], 0
	je	$LN34@UpdateMode
; Line 431
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _c$[ebp], edx
; Line 433
	mov	eax, DWORD PTR _c$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 1
	jne	SHORT $LN33@UpdateMode
; Line 435
	mov	edx, DWORD PTR _c$[ebp]
	add	edx, 2
	mov	DWORD PTR _s$3197[ebp], edx
; Line 436
	mov	eax, DWORD PTR _s$3197[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	cmp	ecx, 32					; 00000020H
	jge	SHORT $LN32@UpdateMode
; Line 437
	mov	edx, DWORD PTR _s$3197[ebp]
	mov	al, BYTE PTR [edx+1]
	add	al, 1
	mov	ecx, DWORD PTR _s$3197[ebp]
	mov	BYTE PTR [ecx+1], al
$LN32@UpdateMode:
; Line 439
	jmp	$LN34@UpdateMode
$LN33@UpdateMode:
; Line 441
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _s$3201[ebp], eax
; Line 442
	mov	ecx, DWORD PTR _s$3201[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movzx	eax, BYTE PTR [ecx]
	cmp	edx, eax
	je	SHORT $LN30@UpdateMode
$LN29@UpdateMode:
; Line 444
	mov	ecx, DWORD PTR _s$3201[ebp]
	add	ecx, 6
	mov	DWORD PTR _s$3201[ebp], ecx
	mov	edx, DWORD PTR _s$3201[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movzx	ecx, BYTE PTR [edx]
	cmp	eax, ecx
	jne	SHORT $LN29@UpdateMode
; Line 445
	mov	edx, DWORD PTR _s$3201[ebp]
	movzx	eax, BYTE PTR [edx+1]
	mov	ecx, DWORD PTR _s$3201[ebp]
	movzx	edx, BYTE PTR [ecx-5]
	cmp	eax, edx
	jl	SHORT $LN30@UpdateMode
; Line 447
	mov	eax, DWORD PTR _s$3201[ebp]
	sub	eax, 6
	push	eax
	mov	ecx, DWORD PTR _s$3201[ebp]
	push	ecx
	call	_SwapStates@8
; Line 448
	mov	edx, DWORD PTR _s$3201[ebp]
	sub	edx, 6
	mov	DWORD PTR _s$3201[ebp], edx
$LN30@UpdateMode:
; Line 451
	mov	eax, DWORD PTR _s$3201[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	cmp	ecx, 115				; 00000073H
	jge	SHORT $LN34@UpdateMode
; Line 453
	mov	edx, DWORD PTR _s$3201[ebp]
	movzx	eax, BYTE PTR [edx+1]
	add	eax, 2
	mov	ecx, DWORD PTR _s$3201[ebp]
	mov	BYTE PTR [ecx+1], al
; Line 454
	mov	edx, DWORD PTR _c$[ebp]
	movzx	eax, WORD PTR [edx+2]
	add	eax, 2
	mov	ecx, DWORD PTR _c$[ebp]
	mov	WORD PTR [ecx+2], ax
$LN34@UpdateMode:
; Line 459
	mov	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [edx+12], 0
	jne	SHORT $LN24@UpdateMode
; Line 461
	push	1
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_CreateSuccessors@8
	mov	DWORD PTR tv159[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR tv159[ebp]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR tv159[ebp]
	mov	DWORD PTR [eax], ecx
; Line 462
	mov	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN23@UpdateMode
; Line 464
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_RestartModel@4
; Line 465
	jmp	$LN35@UpdateMode
$LN23@UpdateMode:
; Line 467
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_SetSuccessor@8
; Line 468
	jmp	$LN35@UpdateMode
$LN24@UpdateMode:
; Line 471
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	mov	al, BYTE PTR [eax]
	mov	BYTE PTR [edx], al
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	add	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+60], edx
; Line 472
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	mov	DWORD PTR _successor$[ebp], edx
; Line 473
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [eax+60]
	cmp	edx, DWORD PTR [ecx+64]
	jb	SHORT $LN22@UpdateMode
; Line 475
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_RestartModel@4
; Line 476
	jmp	$LN35@UpdateMode
$LN22@UpdateMode:
; Line 479
	cmp	DWORD PTR _fSuccessor$[ebp], 0
	je	SHORT $LN21@UpdateMode
; Line 481
	mov	ecx, DWORD PTR _fSuccessor$[ebp]
	cmp	ecx, DWORD PTR _successor$[ebp]
	ja	SHORT $LN20@UpdateMode
; Line 483
	push	0
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_CreateSuccessors@8
	mov	DWORD PTR _cs$3213[ebp], eax
; Line 484
	cmp	DWORD PTR _cs$3213[ebp], 0
	jne	SHORT $LN19@UpdateMode
; Line 486
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_RestartModel@4
; Line 487
	jmp	$LN35@UpdateMode
$LN19@UpdateMode:
; Line 489
	mov	ecx, DWORD PTR _cs$3213[ebp]
	mov	DWORD PTR _fSuccessor$[ebp], ecx
$LN20@UpdateMode:
; Line 491
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+12]
	sub	eax, 1
	mov	DWORD PTR tv188[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR tv188[ebp]
	mov	DWORD PTR [ecx+12], edx
	cmp	DWORD PTR tv188[ebp], 0
	jne	SHORT $LN18@UpdateMode
; Line 493
	mov	eax, DWORD PTR _fSuccessor$[ebp]
	mov	DWORD PTR _successor$[ebp], eax
; Line 494
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx]
	setne	cl
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+60]
	sub	eax, ecx
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+60], eax
$LN18@UpdateMode:
; Line 497
	jmp	SHORT $LN17@UpdateMode
$LN21@UpdateMode:
; Line 499
	mov	edx, DWORD PTR _successor$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_SetSuccessor@8
; Line 500
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _fSuccessor$[ebp], eax
$LN17@UpdateMode:
; Line 503
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, WORD PTR [edx]
	mov	DWORD PTR _ns$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movzx	eax, BYTE PTR [edx+1]
	sub	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	ecx, WORD PTR [edx+2]
	sub	ecx, DWORD PTR _ns$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _s0$[ebp], ecx
; Line 505
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _c$[ebp], eax
	jmp	SHORT $LN16@UpdateMode
$LN15@UpdateMode:
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _c$[ebp], edx
$LN16@UpdateMode:
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _c$[ebp]
	cmp	ecx, DWORD PTR [eax]
	je	$LN14@UpdateMode
; Line 509
	mov	edx, DWORD PTR _c$[ebp]
	movzx	eax, WORD PTR [edx]
	mov	DWORD PTR _ns1$3222[ebp], eax
	cmp	DWORD PTR _ns1$3222[ebp], 1
	je	$LN13@UpdateMode
; Line 511
	mov	ecx, DWORD PTR _ns1$3222[ebp]
	and	ecx, 1
	jne	$LN12@UpdateMode
; Line 514
	mov	edx, DWORD PTR _ns1$3222[ebp]
	shr	edx, 1
	mov	DWORD PTR _oldNU$3227[ebp], edx
; Line 515
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR _oldNU$3227[ebp]
	movzx	ecx, BYTE PTR [eax+109]
	mov	DWORD PTR _i$3228[ebp], ecx
; Line 516
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, DWORD PTR _oldNU$3227[ebp]
	movzx	eax, BYTE PTR [edx+110]
	cmp	DWORD PTR _i$3228[ebp], eax
	je	$LN12@UpdateMode
; Line 518
	mov	ecx, DWORD PTR _i$3228[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_AllocUnits@8
	mov	DWORD PTR _ptr$3230[ebp], eax
; Line 520
	cmp	DWORD PTR _ptr$3230[ebp], 0
	jne	SHORT $LN10@UpdateMode
; Line 522
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_RestartModel@4
; Line 523
	jmp	$LN35@UpdateMode
$LN10@UpdateMode:
; Line 525
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _oldPtr$3231[ebp], edx
; Line 526
	mov	eax, DWORD PTR _ptr$3230[ebp]
	mov	DWORD PTR _d$3233[ebp], eax
	mov	ecx, DWORD PTR _oldPtr$3231[ebp]
	mov	DWORD PTR _s$3235[ebp], ecx
	mov	edx, DWORD PTR _oldNU$3227[ebp]
	mov	DWORD PTR _n$3237[ebp], edx
$LN9@UpdateMode:
	mov	eax, DWORD PTR _d$3233[ebp]
	mov	ecx, DWORD PTR _s$3235[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _d$3233[ebp]
	mov	ecx, DWORD PTR _s$3235[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _d$3233[ebp]
	mov	ecx, DWORD PTR _s$3235[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _s$3235[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _s$3235[ebp], eax
	mov	ecx, DWORD PTR _d$3233[ebp]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR _d$3233[ebp], ecx
	mov	edx, DWORD PTR _n$3237[ebp]
	sub	edx, 1
	mov	DWORD PTR _n$3237[ebp], edx
	jne	SHORT $LN9@UpdateMode
; Line 527
	mov	eax, DWORD PTR _i$3228[ebp]
	push	eax
	mov	ecx, DWORD PTR _oldPtr$3231[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_InsertNode@12
; Line 528
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _ptr$3230[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN12@UpdateMode:
; Line 531
	mov	edx, DWORD PTR _c$[ebp]
	movzx	eax, WORD PTR [edx+2]
	mov	ecx, DWORD PTR _ns1$3222[ebp]
	shl	ecx, 1
	cmp	ecx, DWORD PTR _ns$[ebp]
	sbb	edx, edx
	neg	edx
	add	eax, edx
	mov	ecx, DWORD PTR _ns1$3222[ebp]
	shl	ecx, 2
	cmp	DWORD PTR _ns$[ebp], ecx
	sbb	edx, edx
	add	edx, 1
	mov	ecx, DWORD PTR _c$[ebp]
	movzx	ecx, WORD PTR [ecx+2]
	mov	esi, DWORD PTR _ns1$3222[ebp]
	shl	esi, 3
	cmp	esi, ecx
	sbb	ecx, ecx
	add	ecx, 1
	and	edx, ecx
	lea	edx, DWORD PTR [eax+edx*2]
	mov	eax, DWORD PTR _c$[ebp]
	mov	WORD PTR [eax+2], dx
; Line 533
	jmp	$LN6@UpdateMode
$LN13@UpdateMode:
; Line 535
	push	0
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_AllocUnits@8
	mov	DWORD PTR _s$3244[ebp], eax
; Line 536
	cmp	DWORD PTR _s$3244[ebp], 0
	jne	SHORT $LN5@UpdateMode
; Line 538
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_RestartModel@4
; Line 539
	jmp	$LN35@UpdateMode
$LN5@UpdateMode:
; Line 541
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 2
	mov	ecx, DWORD PTR _s$3244[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR [eax+4]
	mov	WORD PTR [ecx+4], ax
; Line 542
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR _s$3244[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 543
	mov	eax, DWORD PTR _s$3244[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	cmp	ecx, 30					; 0000001eH
	jge	SHORT $LN4@UpdateMode
; Line 544
	mov	edx, DWORD PTR _s$3244[ebp]
	mov	al, BYTE PTR [edx+1]
	shl	al, 1
	mov	ecx, DWORD PTR _s$3244[ebp]
	mov	BYTE PTR [ecx+1], al
; Line 545
	jmp	SHORT $LN3@UpdateMode
$LN4@UpdateMode:
; Line 546
	mov	edx, DWORD PTR _s$3244[ebp]
	mov	BYTE PTR [edx+1], 120			; 00000078H
$LN3@UpdateMode:
; Line 547
	mov	eax, DWORD PTR _s$3244[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	mov	edx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR [edx+16]
	mov	eax, 3
	cmp	eax, DWORD PTR _ns$[ebp]
	sbb	edx, edx
	neg	edx
	add	ecx, edx
	mov	eax, DWORD PTR _c$[ebp]
	mov	WORD PTR [eax+2], cx
$LN6@UpdateMode:
; Line 549
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movzx	eax, BYTE PTR [edx+1]
	shl	eax, 1
	mov	ecx, DWORD PTR _c$[ebp]
	movzx	edx, WORD PTR [ecx+2]
	add	edx, 6
	imul	eax, edx
	mov	DWORD PTR _cf$3223[ebp], eax
; Line 550
	mov	eax, DWORD PTR _c$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	add	ecx, DWORD PTR _s0$[ebp]
	mov	DWORD PTR _sf$3224[ebp], ecx
; Line 551
	mov	edx, DWORD PTR _sf$3224[ebp]
	imul	edx, 6
	cmp	DWORD PTR _cf$3223[ebp], edx
	jae	SHORT $LN2@UpdateMode
; Line 553
	mov	eax, DWORD PTR _cf$3223[ebp]
	cmp	DWORD PTR _sf$3224[ebp], eax
	sbb	ecx, ecx
	neg	ecx
	mov	edx, DWORD PTR _sf$3224[ebp]
	shl	edx, 2
	cmp	DWORD PTR _cf$3223[ebp], edx
	sbb	eax, eax
	add	eax, 1
	lea	ecx, DWORD PTR [ecx+eax+1]
	mov	DWORD PTR _cf$3223[ebp], ecx
; Line 554
	mov	edx, DWORD PTR _c$[ebp]
	movzx	eax, WORD PTR [edx+2]
	add	eax, 3
	mov	ecx, DWORD PTR _c$[ebp]
	mov	WORD PTR [ecx+2], ax
; Line 556
	jmp	SHORT $LN1@UpdateMode
$LN2@UpdateMode:
; Line 558
	mov	edx, DWORD PTR _sf$3224[ebp]
	imul	edx, 9
	cmp	DWORD PTR _cf$3223[ebp], edx
	sbb	eax, eax
	add	eax, 1
	mov	ecx, DWORD PTR _sf$3224[ebp]
	imul	ecx, 12					; 0000000cH
	cmp	DWORD PTR _cf$3223[ebp], ecx
	sbb	edx, edx
	add	edx, 1
	lea	eax, DWORD PTR [eax+edx+4]
	mov	ecx, DWORD PTR _sf$3224[ebp]
	imul	ecx, 15					; 0000000fH
	cmp	DWORD PTR _cf$3223[ebp], ecx
	sbb	edx, edx
	add	edx, 1
	add	eax, edx
	mov	DWORD PTR _cf$3223[ebp], eax
; Line 559
	mov	eax, DWORD PTR _c$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	add	ecx, DWORD PTR _cf$3223[ebp]
	mov	edx, DWORD PTR _c$[ebp]
	mov	WORD PTR [edx+2], cx
$LN1@UpdateMode:
; Line 562
	mov	eax, DWORD PTR _ns1$3222[ebp]
	imul	eax, 6
	mov	ecx, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _s$3256[ebp], eax
; Line 563
	mov	edx, DWORD PTR _successor$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$3256[ebp]
	push	eax
	call	_SetSuccessor@8
; Line 564
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _s$3256[ebp]
	mov	cl, BYTE PTR [edx]
	mov	BYTE PTR [eax], cl
; Line 565
	mov	edx, DWORD PTR _s$3256[ebp]
	mov	al, BYTE PTR _cf$3223[ebp]
	mov	BYTE PTR [edx+1], al
; Line 566
	mov	ecx, DWORD PTR _ns1$3222[ebp]
	add	ecx, 1
	mov	edx, DWORD PTR _c$[ebp]
	mov	WORD PTR [edx], cx
; Line 568
	jmp	$LN15@UpdateMode
$LN14@UpdateMode:
; Line 569
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _fSuccessor$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _fSuccessor$[ebp]
	mov	DWORD PTR [edx+4], eax
$LN35@UpdateMode:
; Line 570
	pop	edi
	pop	esi
	add	esp, 88					; 00000058H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_UpdateModel@4 ENDP
; Function compile flags: /Odtp /RTCsu
_retVal$3044 = -8					; size = 4
_numBytes$ = -4						; size = 4
_p$ = 8							; size = 4
_indx$ = 12						; size = 4
_AllocUnits@8 PROC
; Line 244
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 246
	mov	eax, DWORD PTR _indx$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [ecx+eax*4+240], 0
	je	SHORT $LN2@AllocUnits
; Line 247
	mov	edx, DWORD PTR _indx$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_RemoveNode@8
	jmp	SHORT $LN3@AllocUnits
$LN2@AllocUnits:
; Line 248
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR _indx$[ebp]
	movzx	edx, BYTE PTR [ecx+72]
	imul	edx, 12					; 0000000cH
	mov	DWORD PTR _numBytes$[ebp], edx
; Line 249
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [eax+56]
	sub	edx, DWORD PTR [ecx+52]
	cmp	DWORD PTR _numBytes$[ebp], edx
	ja	SHORT $LN1@AllocUnits
; Line 251
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _retVal$3044[ebp], ecx
; Line 252
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+52]
	add	eax, DWORD PTR _numBytes$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+52], eax
; Line 253
	mov	eax, DWORD PTR _retVal$3044[ebp]
	jmp	SHORT $LN3@AllocUnits
$LN1@AllocUnits:
; Line 255
	mov	edx, DWORD PTR _indx$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_AllocUnitsRare@8
$LN3@AllocUnits:
; Line 256
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_AllocUnits@8 ENDP
; Function compile flags: /Odtp /RTCsu
tv91 = -20						; size = 4
tv90 = -16						; size = 4
_numBytes$3029 = -12					; size = 4
_retVal$ = -8						; size = 4
_i$ = -4						; size = 4
_p$ = 8							; size = 4
_indx$ = 12						; size = 4
_AllocUnitsRare@8 PROC
; Line 218
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 221
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+44], 0
	jne	SHORT $LN6@AllocUnits@2
; Line 223
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_GlueFreeBlocks@4
; Line 224
	mov	edx, DWORD PTR _indx$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+edx*4+240], 0
	je	SHORT $LN6@AllocUnits@2
; Line 225
	mov	ecx, DWORD PTR _indx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_RemoveNode@8
	jmp	$LN7@AllocUnits@2
$LN6@AllocUnits@2:
; Line 227
	mov	eax, DWORD PTR _indx$[ebp]
	mov	DWORD PTR _i$[ebp], eax
$LN4@AllocUnits@2:
; Line 230
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	cmp	DWORD PTR _i$[ebp], 38			; 00000026H
	jne	SHORT $LN3@AllocUnits@2
; Line 232
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, DWORD PTR _indx$[ebp]
	movzx	eax, BYTE PTR [edx+72]
	imul	eax, 12					; 0000000cH
	mov	DWORD PTR _numBytes$3029[ebp], eax
; Line 233
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	sub	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+44], edx
; Line 234
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [ecx+64]
	sub	eax, DWORD PTR [edx+60]
	cmp	eax, DWORD PTR _numBytes$3029[ebp]
	jbe	SHORT $LN9@AllocUnits@2
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	sub	edx, DWORD PTR _numBytes$3029[ebp]
	mov	DWORD PTR tv90[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR tv90[ebp]
	mov	DWORD PTR [eax+64], ecx
	mov	edx, DWORD PTR tv90[ebp]
	mov	DWORD PTR tv91[ebp], edx
	jmp	SHORT $LN10@AllocUnits@2
$LN9@AllocUnits@2:
	mov	DWORD PTR tv91[ebp], 0
$LN10@AllocUnits@2:
	mov	eax, DWORD PTR tv91[ebp]
	jmp	SHORT $LN7@AllocUnits@2
$LN3@AllocUnits@2:
; Line 237
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [ecx+eax*4+240], 0
	je	SHORT $LN4@AllocUnits@2
; Line 238
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_RemoveNode@8
	mov	DWORD PTR _retVal$[ebp], eax
; Line 239
	mov	ecx, DWORD PTR _indx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	eax, DWORD PTR _retVal$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_SplitBlock@16
; Line 240
	mov	eax, DWORD PTR _retVal$[ebp]
$LN7@AllocUnits@2:
; Line 241
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_AllocUnitsRare@8 ENDP
; Function compile flags: /Odtp /RTCsu
_k$3014 = -72						; size = 4
_next$3009 = -68					; size = 4
_nu$3008 = -64						; size = 4
_node$3007 = -60					; size = 4
_node2$3000 = -56					; size = 4
_nu$2995 = -52						; size = 4
_node$2994 = -48					; size = 4
_node$2986 = -44					; size = 4
_next$2981 = -40					; size = 4
_nu$2980 = -36						; size = 2
_i$ = -32						; size = 4
_n$ = -28						; size = 4
_head$ = -24						; size = 4
_headItem$ = -16					; size = 12
_p$ = 8							; size = 4
_GlueFreeBlocks@4 PROC
; Line 146
	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	edi
	lea	edi, DWORD PTR [ebp-72]
	mov	ecx, 18					; 00000012H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 149
	lea	eax, DWORD PTR _headItem$[ebp]
	mov	DWORD PTR _head$[ebp], eax
; Line 154
	mov	ecx, DWORD PTR _head$[ebp]
	mov	DWORD PTR _n$[ebp], ecx
; Line 157
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+44], 255			; 000000ffH
; Line 160
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN18@GlueFreeBl
$LN17@GlueFreeBl:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN18@GlueFreeBl:
	cmp	DWORD PTR _i$[ebp], 38			; 00000026H
	jae	SHORT $LN16@GlueFreeBl
; Line 162
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movzx	dx, BYTE PTR [ecx+72]
	mov	WORD PTR _nu$2980[ebp], dx
; Line 163
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+240]
	mov	DWORD PTR _next$2981[ebp], edx
; Line 164
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+eax*4+240], 0
$LN15@GlueFreeBl:
; Line 165
	cmp	DWORD PTR _next$2981[ebp], 0
	je	SHORT $LN14@GlueFreeBl
; Line 167
	mov	edx, DWORD PTR _next$2981[ebp]
	mov	DWORD PTR _node$2986[ebp], edx
; Line 168
	mov	eax, DWORD PTR _node$2986[ebp]
	mov	ecx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 169
	mov	edx, DWORD PTR _n$[ebp]
	mov	eax, DWORD PTR _next$2981[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _next$2981[ebp]
	mov	DWORD PTR _n$[ebp], ecx
; Line 170
	mov	edx, DWORD PTR _node$2986[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _next$2981[ebp], eax
; Line 171
	xor	ecx, ecx
	mov	edx, DWORD PTR _node$2986[ebp]
	mov	WORD PTR [edx], cx
; Line 172
	mov	eax, DWORD PTR _node$2986[ebp]
	mov	cx, WORD PTR _nu$2980[ebp]
	mov	WORD PTR [eax+2], cx
; Line 173
	jmp	SHORT $LN15@GlueFreeBl
$LN14@GlueFreeBl:
; Line 174
	jmp	$LN17@GlueFreeBl
$LN16@GlueFreeBl:
; Line 175
	mov	edx, 1
	mov	eax, DWORD PTR _head$[ebp]
	mov	WORD PTR [eax], dx
; Line 176
	mov	ecx, DWORD PTR _head$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 177
	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR _head$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 178
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [edx+52]
	cmp	ecx, DWORD PTR [eax+56]
	je	SHORT $LN12@GlueFreeBl
; Line 179
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+52]
	mov	ecx, 1
	mov	WORD PTR [eax], cx
$LN12@GlueFreeBl:
; Line 182
	mov	edx, DWORD PTR _n$[ebp]
	cmp	edx, DWORD PTR _head$[ebp]
	je	SHORT $LN11@GlueFreeBl
; Line 184
	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR _node$2994[ebp], eax
; Line 185
	mov	ecx, DWORD PTR _node$2994[ebp]
	movzx	edx, WORD PTR [ecx+2]
	mov	DWORD PTR _nu$2995[ebp], edx
$LN10@GlueFreeBl:
; Line 188
	mov	eax, DWORD PTR _nu$2995[ebp]
	imul	eax, 12					; 0000000cH
	add	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR _node2$3000[ebp], eax
; Line 189
	mov	ecx, DWORD PTR _node2$3000[ebp]
	movzx	edx, WORD PTR [ecx+2]
	add	edx, DWORD PTR _nu$2995[ebp]
	mov	DWORD PTR _nu$2995[ebp], edx
; Line 190
	mov	eax, DWORD PTR _node2$3000[ebp]
	movzx	ecx, WORD PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN7@GlueFreeBl
	cmp	DWORD PTR _nu$2995[ebp], 65536		; 00010000H
	jb	SHORT $LN8@GlueFreeBl
$LN7@GlueFreeBl:
; Line 191
	jmp	SHORT $LN9@GlueFreeBl
$LN8@GlueFreeBl:
; Line 192
	mov	edx, DWORD PTR _node2$3000[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _node2$3000[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
; Line 193
	mov	eax, DWORD PTR _node2$3000[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _node2$3000[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
; Line 194
	mov	ecx, DWORD PTR _node$2994[ebp]
	mov	dx, WORD PTR _nu$2995[ebp]
	mov	WORD PTR [ecx+2], dx
; Line 195
	jmp	SHORT $LN10@GlueFreeBl
$LN9@GlueFreeBl:
; Line 196
	mov	eax, DWORD PTR _node$2994[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _n$[ebp], ecx
; Line 197
	jmp	SHORT $LN12@GlueFreeBl
$LN11@GlueFreeBl:
; Line 200
	mov	edx, DWORD PTR _head$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _n$[ebp], eax
$LN6@GlueFreeBl:
	mov	ecx, DWORD PTR _n$[ebp]
	cmp	ecx, DWORD PTR _head$[ebp]
	je	$LN19@GlueFreeBl
; Line 202
	mov	edx, DWORD PTR _n$[ebp]
	mov	DWORD PTR _node$3007[ebp], edx
; Line 204
	mov	eax, DWORD PTR _node$3007[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _next$3009[ebp], ecx
; Line 205
	mov	edx, DWORD PTR _node$3007[ebp]
	movzx	eax, WORD PTR [edx+2]
	mov	DWORD PTR _nu$3008[ebp], eax
	jmp	SHORT $LN4@GlueFreeBl
$LN3@GlueFreeBl:
	mov	ecx, DWORD PTR _nu$3008[ebp]
	sub	ecx, 128				; 00000080H
	mov	DWORD PTR _nu$3008[ebp], ecx
	mov	edx, DWORD PTR _node$3007[ebp]
	add	edx, 1536				; 00000600H
	mov	DWORD PTR _node$3007[ebp], edx
$LN4@GlueFreeBl:
	cmp	DWORD PTR _nu$3008[ebp], 128		; 00000080H
	jbe	SHORT $LN2@GlueFreeBl
; Line 206
	push	37					; 00000025H
	mov	eax, DWORD PTR _node$3007[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_InsertNode@12
	jmp	SHORT $LN3@GlueFreeBl
$LN2@GlueFreeBl:
; Line 207
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, DWORD PTR _nu$3008[ebp]
	movzx	eax, BYTE PTR [edx+109]
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx+72]
	cmp	edx, DWORD PTR _nu$3008[ebp]
	je	SHORT $LN1@GlueFreeBl
; Line 209
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx+72]
	mov	DWORD PTR _k$3014[ebp], edx
; Line 210
	mov	eax, DWORD PTR _nu$3008[ebp]
	sub	eax, DWORD PTR _k$3014[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _k$3014[ebp]
	imul	ecx, 12					; 0000000cH
	add	ecx, DWORD PTR _node$3007[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_InsertNode@12
$LN1@GlueFreeBl:
; Line 212
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _node$3007[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_InsertNode@12
; Line 213
	mov	eax, DWORD PTR _next$3009[ebp]
	mov	DWORD PTR _n$[ebp], eax
; Line 214
	jmp	$LN6@GlueFreeBl
$LN19@GlueFreeBl:
; Line 215
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN23@GlueFreeBl
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 72					; 00000048H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN23@GlueFreeBl:
	DD	1
	DD	$LN22@GlueFreeBl
$LN22@GlueFreeBl:
	DD	-16					; fffffff0H
	DD	12					; 0000000cH
	DD	$LN21@GlueFreeBl
$LN21@GlueFreeBl:
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	73					; 00000049H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	0
_GlueFreeBlocks@4 ENDP
; Function compile flags: /Odtp /RTCsu
tv172 = -324						; size = 4
tv164 = -320						; size = 4
_c1$3165 = -316						; size = 4
_s$3157 = -312						; size = 4
_s0$3156 = -308						; size = 4
_cf$3155 = -304						; size = 4
_s$3138 = -300						; size = 4
_successor$3137 = -296					; size = 4
_numPs$ = -292						; size = 4
_ps$ = -284						; size = 256
_upBranch$ = -24					; size = 4
_c$ = -20						; size = 4
_upState$ = -12						; size = 6
_p$ = 8							; size = 4
_skip$ = 12						; size = 4
_CreateSuccessors@8 PROC
; Line 344
	push	ebp
	mov	ebp, esp
	sub	esp, 324				; 00000144H
	push	edi
	lea	edi, DWORD PTR [ebp-324]
	mov	ecx, 81					; 00000051H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 346
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _c$[ebp], ecx
; Line 347
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movzx	ecx, WORD PTR [eax+2]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movzx	edx, WORD PTR [eax+4]
	shl	edx, 16					; 00000010H
	or	ecx, edx
	mov	DWORD PTR _upBranch$[ebp], ecx
; Line 349
	mov	DWORD PTR _numPs$[ebp], 0
; Line 351
	cmp	DWORD PTR _skip$[ebp], 0
	jne	SHORT $LN22@CreateSucc
; Line 352
	mov	eax, DWORD PTR _numPs$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _ps$[ebp+eax*4], edx
	mov	eax, DWORD PTR _numPs$[ebp]
	add	eax, 1
	mov	DWORD PTR _numPs$[ebp], eax
$LN22@CreateSucc:
; Line 354
	mov	ecx, DWORD PTR _c$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	$LN21@CreateSucc
; Line 358
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _c$[ebp], eax
; Line 359
	mov	ecx, DWORD PTR _c$[ebp]
	movzx	edx, WORD PTR [ecx]
	cmp	edx, 1
	je	SHORT $LN20@CreateSucc
; Line 361
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _s$3138[ebp], ecx
	jmp	SHORT $LN19@CreateSucc
$LN18@CreateSucc:
	mov	edx, DWORD PTR _s$3138[ebp]
	add	edx, 6
	mov	DWORD PTR _s$3138[ebp], edx
$LN19@CreateSucc:
	mov	eax, DWORD PTR _s$3138[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movzx	edx, BYTE PTR [eax]
	cmp	ecx, edx
	je	SHORT $LN17@CreateSucc
	jmp	SHORT $LN18@CreateSucc
$LN17@CreateSucc:
; Line 363
	jmp	SHORT $LN16@CreateSucc
$LN20@CreateSucc:
; Line 364
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 2
	mov	DWORD PTR _s$3138[ebp], eax
$LN16@CreateSucc:
; Line 365
	mov	ecx, DWORD PTR _s$3138[ebp]
	movzx	edx, WORD PTR [ecx+2]
	mov	eax, DWORD PTR _s$3138[ebp]
	movzx	ecx, WORD PTR [eax+4]
	shl	ecx, 16					; 00000010H
	or	edx, ecx
	mov	DWORD PTR _successor$3137[ebp], edx
; Line 366
	mov	edx, DWORD PTR _successor$3137[ebp]
	cmp	edx, DWORD PTR _upBranch$[ebp]
	je	SHORT $LN15@CreateSucc
; Line 368
	mov	eax, DWORD PTR _successor$3137[ebp]
	mov	DWORD PTR _c$[ebp], eax
; Line 369
	cmp	DWORD PTR _numPs$[ebp], 0
	jne	SHORT $LN14@CreateSucc
; Line 370
	mov	eax, DWORD PTR _c$[ebp]
	jmp	$LN24@CreateSucc
$LN14@CreateSucc:
; Line 371
	jmp	SHORT $LN21@CreateSucc
$LN15@CreateSucc:
; Line 373
	mov	ecx, DWORD PTR _numPs$[ebp]
	mov	edx, DWORD PTR _s$3138[ebp]
	mov	DWORD PTR _ps$[ebp+ecx*4], edx
	mov	eax, DWORD PTR _numPs$[ebp]
	add	eax, 1
	mov	DWORD PTR _numPs$[ebp], eax
; Line 374
	jmp	$LN22@CreateSucc
$LN21@CreateSucc:
; Line 376
	mov	ecx, DWORD PTR _upBranch$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _upState$[ebp], dl
; Line 377
	mov	eax, DWORD PTR _upBranch$[ebp]
	add	eax, 1
	push	eax
	lea	ecx, DWORD PTR _upState$[ebp]
	push	ecx
	call	_SetSuccessor@8
; Line 379
	mov	edx, DWORD PTR _c$[ebp]
	movzx	eax, WORD PTR [edx]
	cmp	eax, 1
	jne	SHORT $LN13@CreateSucc
; Line 380
	mov	ecx, DWORD PTR _c$[ebp]
	mov	dl, BYTE PTR [ecx+3]
	mov	BYTE PTR _upState$[ebp+1], dl
; Line 381
	jmp	$LN8@CreateSucc
$LN13@CreateSucc:
; Line 385
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _s$3157[ebp], ecx
	jmp	SHORT $LN11@CreateSucc
$LN10@CreateSucc:
	mov	edx, DWORD PTR _s$3157[ebp]
	add	edx, 6
	mov	DWORD PTR _s$3157[ebp], edx
$LN11@CreateSucc:
	mov	eax, DWORD PTR _s$3157[ebp]
	movzx	ecx, BYTE PTR [eax]
	movzx	edx, BYTE PTR _upState$[ebp]
	cmp	ecx, edx
	je	SHORT $LN9@CreateSucc
	jmp	SHORT $LN10@CreateSucc
$LN9@CreateSucc:
; Line 386
	mov	eax, DWORD PTR _s$3157[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	sub	ecx, 1
	mov	DWORD PTR _cf$3155[ebp], ecx
; Line 387
	mov	edx, DWORD PTR _c$[ebp]
	movzx	eax, WORD PTR [edx+2]
	mov	ecx, DWORD PTR _c$[ebp]
	movzx	edx, WORD PTR [ecx]
	sub	eax, edx
	sub	eax, DWORD PTR _cf$3155[ebp]
	mov	DWORD PTR _s0$3156[ebp], eax
; Line 388
	mov	eax, DWORD PTR _cf$3155[ebp]
	shl	eax, 1
	cmp	eax, DWORD PTR _s0$3156[ebp]
	ja	SHORT $LN26@CreateSucc
	mov	ecx, DWORD PTR _cf$3155[ebp]
	imul	ecx, 5
	cmp	DWORD PTR _s0$3156[ebp], ecx
	sbb	edx, edx
	neg	edx
	mov	DWORD PTR tv164[ebp], edx
	jmp	SHORT $LN27@CreateSucc
$LN26@CreateSucc:
	mov	eax, DWORD PTR _s0$3156[ebp]
	imul	eax, 3
	mov	ecx, DWORD PTR _cf$3155[ebp]
	lea	eax, DWORD PTR [eax+ecx*2-1]
	mov	ecx, DWORD PTR _s0$3156[ebp]
	shl	ecx, 1
	xor	edx, edx
	div	ecx
	mov	DWORD PTR tv164[ebp], eax
$LN27@CreateSucc:
	mov	edx, DWORD PTR tv164[ebp]
	add	edx, 1
	mov	BYTE PTR _upState$[ebp+1], dl
$LN8@CreateSucc:
; Line 395
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [eax+56]
	cmp	edx, DWORD PTR [ecx+52]
	je	SHORT $LN5@CreateSucc
; Line 396
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	sub	ecx, 12					; 0000000cH
	mov	DWORD PTR tv172[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR tv172[ebp]
	mov	DWORD PTR [edx+56], eax
	mov	ecx, DWORD PTR tv172[ebp]
	mov	DWORD PTR _c1$3165[ebp], ecx
	jmp	SHORT $LN4@CreateSucc
$LN5@CreateSucc:
; Line 397
	mov	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [edx+240], 0
	je	SHORT $LN3@CreateSucc
; Line 398
	push	0
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_RemoveNode@8
	mov	DWORD PTR _c1$3165[ebp], eax
; Line 399
	jmp	SHORT $LN4@CreateSucc
$LN3@CreateSucc:
; Line 401
	push	0
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_AllocUnitsRare@8
	mov	DWORD PTR _c1$3165[ebp], eax
; Line 402
	cmp	DWORD PTR _c1$3165[ebp], 0
	jne	SHORT $LN4@CreateSucc
; Line 403
	xor	eax, eax
	jmp	SHORT $LN24@CreateSucc
$LN4@CreateSucc:
; Line 405
	mov	edx, 1
	mov	eax, DWORD PTR _c1$3165[ebp]
	mov	WORD PTR [eax], dx
; Line 406
	mov	ecx, DWORD PTR _c1$3165[ebp]
	add	ecx, 2
	mov	edx, DWORD PTR _upState$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR _upState$[ebp+4]
	mov	WORD PTR [ecx+4], ax
; Line 407
	mov	ecx, DWORD PTR _c1$3165[ebp]
	mov	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx+8], edx
; Line 408
	mov	eax, DWORD PTR _numPs$[ebp]
	sub	eax, 1
	mov	DWORD PTR _numPs$[ebp], eax
	mov	ecx, DWORD PTR _c1$3165[ebp]
	push	ecx
	mov	edx, DWORD PTR _numPs$[ebp]
	mov	eax, DWORD PTR _ps$[ebp+edx*4]
	push	eax
	call	_SetSuccessor@8
; Line 409
	mov	ecx, DWORD PTR _c1$3165[ebp]
	mov	DWORD PTR _c$[ebp], ecx
; Line 411
	cmp	DWORD PTR _numPs$[ebp], 0
	jne	$LN8@CreateSucc
; Line 413
	mov	eax, DWORD PTR _c$[ebp]
$LN24@CreateSucc:
; Line 414
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN31@CreateSucc
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 324				; 00000144H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN31@CreateSucc:
	DD	2
	DD	$LN30@CreateSucc
$LN30@CreateSucc:
	DD	-12					; fffffff4H
	DD	6
	DD	$LN28@CreateSucc
	DD	-284					; fffffee4H
	DD	256					; 00000100H
	DD	$LN29@CreateSucc
$LN29@CreateSucc:
	DB	112					; 00000070H
	DB	115					; 00000073H
	DB	0
$LN28@CreateSucc:
	DB	117					; 00000075H
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	0
_CreateSuccessors@8 ENDP
_TEXT	ENDS
PUBLIC	_Ppmd7_Update1_0@4
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv87 = -4						; size = 4
_p$ = 8							; size = 4
_Ppmd7_Update1_0@4 PROC
; Line 686
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 687
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movzx	edx, BYTE PTR [ecx+1]
	shl	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	eax, WORD PTR [ecx+2]
	xor	ecx, ecx
	cmp	edx, eax
	setg	cl
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+20], ecx
; Line 688
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR [edx+20]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+32], ecx
; Line 689
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, WORD PTR [edx+2]
	add	eax, 4
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	WORD PTR [edx+2], ax
; Line 690
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movzx	edx, BYTE PTR [ecx+1]
	add	edx, 4
	mov	DWORD PTR tv87[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	dl, BYTE PTR tv87[ebp]
	mov	BYTE PTR [ecx+1], dl
	movzx	eax, BYTE PTR tv87[ebp]
	cmp	eax, 124				; 0000007cH
	jle	SHORT $LN1@Ppmd7_Upda@2
; Line 691
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_Rescale@4
$LN1@Ppmd7_Upda@2:
; Line 692
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_NextContext@4
; Line 693
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_Ppmd7_Update1_0@4 ENDP
_TEXT	ENDS
PUBLIC	_Ppmd7_UpdateBin@4
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = 8							; size = 4
_Ppmd7_UpdateBin@4 PROC
; Line 696
	push	ebp
	mov	ebp, esp
; Line 697
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movzx	edx, BYTE PTR [ecx+1]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movzx	eax, BYTE PTR [ecx+1]
	xor	ecx, ecx
	cmp	eax, 128				; 00000080H
	setl	cl
	add	edx, ecx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx+1], dl
; Line 698
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+20], 1
; Line 699
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	add	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+32], ecx
; Line 700
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_NextContext@4
; Line 701
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
_Ppmd7_UpdateBin@4 ENDP
_TEXT	ENDS
PUBLIC	_Ppmd7_Update2@4
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv74 = -4						; size = 4
_p$ = 8							; size = 4
_Ppmd7_Update2@4 PROC
; Line 704
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 705
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, WORD PTR [ecx+2]
	add	edx, 4
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	WORD PTR [ecx+2], dx
; Line 706
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movzx	ecx, BYTE PTR [eax+1]
	add	ecx, 4
	mov	DWORD PTR tv74[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	cl, BYTE PTR tv74[ebp]
	mov	BYTE PTR [eax+1], cl
	movzx	edx, BYTE PTR tv74[ebp]
	cmp	edx, 124				; 0000007cH
	jle	SHORT $LN1@Ppmd7_Upda@3
; Line 707
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_Rescale@4
$LN1@Ppmd7_Upda@3:
; Line 708
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR [ecx+32], eax
; Line 709
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_UpdateModel@4
; Line 710
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_Ppmd7_Update2@4 ENDP
_TEXT	ENDS
END
