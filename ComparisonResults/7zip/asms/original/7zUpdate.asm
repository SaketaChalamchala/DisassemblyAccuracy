; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\CPP\7zip\Archive\7z\7zUpdate.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_g_Exts	DD	FLAT:$SG75624
_g_ExeExts DD	FLAT:$SG75856
	DD	FLAT:$SG75857
	DD	FLAT:$SG75858
	DD	FLAT:$SG75859
	DD	FLAT:$SG75860
_DATA	ENDS
CONST	SEGMENT
$SG75624 DB	' lzma 7z ace arc arj bz bz2 deb lzo lzx gz pak rpm sit t'
	DB	'gz tbz tbz2 tgz cab ha lha lzh rar zoo zip jar ear war msi 3g'
	DB	'p avi mov mpeg mpg mpe wmv aac ape fla flac la mp3 m4a mp4 of'
	DB	'r ogg pac ra rm rka shn swa tta wv wma wav swf  chm hxi hxs g'
	DB	'if jpeg jpg jp2 png tiff  bmp ico psd psp awg ps eps cgm dxf '
	DB	'svg vrml wmf emf ai md cad dwg pps key sxi max 3ds iso bin nr'
	DB	'g mdf img pdi tar cpio xpi vfd vhd vud vmc vsv vmdk dsk nvram'
	DB	' vmem vmsd vmsn vmss vmtm inl inc idl acf asa h hpp hxx c cpp'
	DB	' cxx rc java cs pas bas vb cls ctl frm dlg def f77 f f90 f95 '
	DB	'asm sql manifest dep  mak clw csproj vcproj sln dsp dsw  clas'
	DB	's  bat cmd xml xsd xsl xslt hxk hxc htm html xhtml xht mht mh'
	DB	'tml htw asp aspx css cgi jsp shtml awk sed hta js php php3 ph'
	DB	'p4 php5 phptml pl pm py pyo rb sh tcl vbs text txt tex ans as'
	DB	'c srt reg ini doc docx mcw dot rtf hlp xls xlr xlt xlw ppt pd'
	DB	'f sxc sxd sxi sxg sxw stc sti stw stm odt ott odg otg odp otp'
	DB	' ods ots odf abw afp cwk lwp wpd wps wpt wrf wri abf afm bdf '
	DB	'fon mgf otf pcf pfa snf ttf dbf mdb nsf ntf wdb db fdb gdb ex'
	DB	'e dll ocx vbx sfx sys tlb awx com obj lib out o so  pdb pch i'
	DB	'db ncb opt', 00H
$SG75856 DB	'dll', 00H
$SG75857 DB	'exe', 00H
$SG75858 DB	'ocx', 00H
$SG75859 DB	'sfx', 00H
$SG75860 DB	'sys', 00H
$SG75951 DB	'wav', 00H
CONST	ENDS
PUBLIC	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ	; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
PUBLIC	?SetDelta@CFilterMode@N7z@NArchive@@QAEXXZ	; NArchive::N7z::CFilterMode::SetDelta
PUBLIC	?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ ; CMyComPtr<ISequentialInStream>::Release
PUBLIC	??B?$CBuffer@E@@QAEPAEXZ			; CBuffer<unsigned char>::operator unsigned char *
PUBLIC	??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
PUBLIC	??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator&
PUBLIC	??C?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator->
PUBLIC	??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ	; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
PUBLIC	?Alloc@?$CBuffer@E@@QAEXI@Z			; CBuffer<unsigned char>::Alloc
PUBLIC	?Size@?$CBuffer@E@@QBEIXZ			; CBuffer<unsigned char>::Size
PUBLIC	??B?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator IArchiveUpdateCallbackFile *
PUBLIC	?RightPtr@UString@@QBEPB_WI@Z			; UString::RightPtr
PUBLIC	?Ptr@UString@@QBEPB_WI@Z			; UString::Ptr
PUBLIC	??7?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBE_NXZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator!
PUBLIC	?ReverseFind_Dot@UString@@QBEHXZ		; UString::ReverseFind_Dot
PUBLIC	?GetFilterGroup@CAnalysis@N7z@NArchive@@QAEJIABUCUpdateItem@23@AAUCFilterMode@23@@Z ; NArchive::N7z::CAnalysis::GetFilterGroup
EXTRN	?ReadStream@@YGJPAUISequentialInStream@@PAXPAI@Z:PROC ; ReadStream
EXTRN	?StringsAreEqualNoCase_Ascii@@YG_NPB_WPBD@Z:PROC ; StringsAreEqualNoCase_Ascii
EXTRN	?ReverseFind_PathSepar@UString@@QBEHXZ:PROC	; UString::ReverseFind_PathSepar
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__aullrem:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
xdata$x	SEGMENT
__unwindtable$?GetFilterGroup@CAnalysis@N7z@NArchive@@QAEJIABUCUpdateItem@23@AAUCFilterMode@23@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetFilterGroup@CAnalysis@N7z@NArchive@@QAEJIABUCUpdateItem@23@AAUCFilterMode@23@@Z$0
__ehfuncinfo$?GetFilterGroup@CAnalysis@N7z@NArchive@@QAEJIABUCUpdateItem@23@AAUCFilterMode@23@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetFilterGroup@CAnalysis@N7z@NArchive@@QAEJIABUCUpdateItem@23@AAUCFilterMode@23@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zupdate.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
tv289 = -100						; size = 8
tv159 = -92						; size = 4
tv236 = -88						; size = 4
_parseRes$75962 = -84					; size = 4
_size$75959 = -76					; size = 4
_result$75956 = -68					; size = 4
_stream$75955 = -60					; size = 4
_st_mode$75946 = -52					; size = 4
_ext$75942 = -48					; size = 4
_probablyIsSameIsa$75939 = -42				; size = 1
_needReadFile$75938 = -41				; size = 1
_dotPos$ = -40						; size = 4
_slashPos$ = -36					; size = 4
_filterModeTemp$ = -28					; size = 8
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_index$ = 8						; size = 4
_ui$ = 12						; size = 4
_filterMode$ = 16					; size = 4
?GetFilterGroup@CAnalysis@N7z@NArchive@@QAEJIABUCUpdateItem@23@AAUCFilterMode@23@@Z PROC ; NArchive::N7z::CAnalysis::GetFilterGroup
; _this$ = ecx
; Line 813
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetFilterGroup@CAnalysis@N7z@NArchive@@QAEJIABUCUpdateItem@23@AAUCFilterMode@23@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 88					; 00000058H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-100]
	mov	ecx, 22					; 00000016H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 814
	mov	eax, DWORD PTR _filterMode$[ebp]
	mov	DWORD PTR [eax], 0
; Line 815
	mov	ecx, DWORD PTR _filterMode$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 817
	mov	edx, DWORD PTR _filterMode$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _filterModeTemp$[ebp], eax
	mov	DWORD PTR _filterModeTemp$[ebp+4], ecx
; Line 819
	mov	ecx, DWORD PTR _ui$[ebp]
	add	ecx, 40					; 00000028H
	call	?ReverseFind_PathSepar@UString@@QBEHXZ	; UString::ReverseFind_PathSepar
	mov	DWORD PTR _slashPos$[ebp], eax
; Line 820
	mov	ecx, DWORD PTR _ui$[ebp]
	add	ecx, 40					; 00000028H
	call	?ReverseFind_Dot@UString@@QBEHXZ	; UString::ReverseFind_Dot
	mov	DWORD PTR _dotPos$[ebp], eax
; Line 824
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+14]
	mov	BYTE PTR _needReadFile$75938[ebp], al
; Line 826
	mov	BYTE PTR _probablyIsSameIsa$75939[ebp], 0
; Line 828
	movzx	ecx, BYTE PTR _needReadFile$75938[ebp]
	test	ecx, ecx
	je	SHORT $LN21@GetFilterG
	mov	ecx, DWORD PTR _this$[ebp]
	call	??7?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBE_NXZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator!
	movzx	edx, al
	test	edx, edx
	je	$LN22@GetFilterG
$LN21@GetFilterG:
; Line 831
	mov	eax, DWORD PTR _dotPos$[ebp]
	cmp	eax, DWORD PTR _slashPos$[ebp]
	jle	SHORT $LN20@GetFilterG
; Line 832
	mov	ecx, DWORD PTR _dotPos$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _ui$[ebp]
	add	ecx, 40					; 00000028H
	call	?Ptr@UString@@QBEPB_WI@Z		; UString::Ptr
	mov	DWORD PTR _ext$75942[ebp], eax
; Line 833
	jmp	SHORT $LN19@GetFilterG
$LN20@GetFilterG:
; Line 834
	push	0
	mov	ecx, DWORD PTR _ui$[ebp]
	add	ecx, 40					; 00000028H
	call	?RightPtr@UString@@QBEPB_WI@Z		; UString::RightPtr
	mov	DWORD PTR _ext$75942[ebp], eax
$LN19@GetFilterG:
; Line 837
	mov	edx, DWORD PTR _ui$[ebp]
	mov	eax, DWORD PTR [edx+52]
	and	eax, 32768				; 00008000H
	je	SHORT $LN18@GetFilterG
; Line 839
	mov	ecx, DWORD PTR _ui$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	shr	edx, 16					; 00000010H
	mov	DWORD PTR _st_mode$75946[ebp], edx
; Line 841
	mov	eax, DWORD PTR _st_mode$75946[ebp]
	and	eax, 73					; 00000049H
	je	SHORT $LN18@GetFilterG
	mov	ecx, DWORD PTR _ui$[ebp]
	mov	DWORD PTR tv236[ebp], ecx
	mov	edx, DWORD PTR tv236[ebp]
	cmp	DWORD PTR [edx+36], 0
	ja	SHORT $LN26@GetFilterG
	mov	eax, DWORD PTR tv236[ebp]
	cmp	DWORD PTR [eax+32], 2048		; 00000800H
	jb	SHORT $LN18@GetFilterG
$LN26@GetFilterG:
; Line 846
	mov	BYTE PTR _needReadFile$75938[ebp], 1
$LN18@GetFilterG:
; Line 850
	mov	ecx, DWORD PTR _ext$75942[ebp]
	push	ecx
	call	?IsExeExt@N7z@NArchive@@YG_NPB_W@Z	; NArchive::N7z::IsExeExt
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN16@GetFilterG
; Line 852
	mov	BYTE PTR _needReadFile$75938[ebp], 1
; Line 854
	mov	BYTE PTR _probablyIsSameIsa$75939[ebp], 1
; Line 855
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+13]
	mov	BYTE PTR _needReadFile$75938[ebp], cl
	jmp	SHORT $LN22@GetFilterG
$LN16@GetFilterG:
; Line 858
	push	OFFSET $SG75951
	mov	edx, DWORD PTR _ext$75942[ebp]
	push	edx
	call	?StringsAreEqualNoCase_Ascii@@YG_NPB_WPBD@Z ; StringsAreEqualNoCase_Ascii
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN22@GetFilterG
; Line 860
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+12]
	mov	BYTE PTR _needReadFile$75938[ebp], dl
$LN22@GetFilterG:
; Line 873
	movzx	eax, BYTE PTR _needReadFile$75938[ebp]
	test	eax, eax
	je	$LN13@GetFilterG
	mov	ecx, DWORD PTR _this$[ebp]
	call	??B?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator IArchiveUpdateCallbackFile *
	test	eax, eax
	je	$LN13@GetFilterG
; Line 875
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Size@?$CBuffer@E@@QBEIXZ		; CBuffer<unsigned char>::Size
	cmp	eax, 16384				; 00004000H
	je	SHORT $LN12@GetFilterG
; Line 877
	push	16384					; 00004000H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Alloc@?$CBuffer@E@@QAEXI@Z		; CBuffer<unsigned char>::Alloc
$LN12@GetFilterG:
; Line 880
	lea	ecx, DWORD PTR _stream$75955[ebp]
	call	??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 881
	mov	ecx, DWORD PTR _this$[ebp]
	call	??C?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator->
	mov	DWORD PTR tv159[ebp], eax
	mov	esi, esp
	push	2
	lea	ecx, DWORD PTR _stream$75955[ebp]
	call	??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator&
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv159[ebp]
	push	edx
	mov	eax, DWORD PTR tv159[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$75956[ebp], eax
; Line 882
	cmp	DWORD PTR _result$75956[ebp], 0
	jne	$LN11@GetFilterG
	lea	ecx, DWORD PTR _stream$75955[ebp]
	call	??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
	test	eax, eax
	je	$LN11@GetFilterG
; Line 884
	mov	DWORD PTR _size$75959[ebp], 16384	; 00004000H
; Line 885
	lea	eax, DWORD PTR _size$75959[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??B?$CBuffer@E@@QAEPAEXZ		; CBuffer<unsigned char>::operator unsigned char *
	push	eax
	lea	ecx, DWORD PTR _stream$75955[ebp]
	call	??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
	push	eax
	call	?ReadStream@@YGJPAUISequentialInStream@@PAXPAI@Z ; ReadStream
	mov	DWORD PTR _result$75956[ebp], eax
; Line 886
	lea	ecx, DWORD PTR _stream$75955[ebp]
	call	?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ ; CMyComPtr<ISequentialInStream>::Release
; Line 888
	cmp	DWORD PTR _result$75956[ebp], 0
	jne	SHORT $LN11@GetFilterG
; Line 890
	lea	ecx, DWORD PTR _filterModeTemp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _size$75959[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??B?$CBuffer@E@@QAEPAEXZ		; CBuffer<unsigned char>::operator unsigned char *
	push	eax
	call	?ParseFile@N7z@NArchive@@YGHPBEIPAUCFilterMode@12@@Z ; NArchive::N7z::ParseFile
	mov	DWORD PTR _parseRes$75962[ebp], eax
; Line 891
	cmp	DWORD PTR _parseRes$75962[ebp], 0
	je	SHORT $LN9@GetFilterG
	cmp	DWORD PTR _filterModeTemp$[ebp+4], 0
	jne	SHORT $LN9@GetFilterG
; Line 893
	lea	ecx, DWORD PTR _filterModeTemp$[ebp]
	call	?SetDelta@CFilterMode@N7z@NArchive@@QAEXXZ ; NArchive::N7z::CFilterMode::SetDelta
; Line 894
	cmp	DWORD PTR _filterModeTemp$[ebp+4], 0
	je	SHORT $LN9@GetFilterG
	cmp	DWORD PTR _filterModeTemp$[ebp], 3
	je	SHORT $LN9@GetFilterG
; Line 896
	mov	eax, DWORD PTR _filterModeTemp$[ebp+4]
	xor	ecx, ecx
	mov	edx, DWORD PTR _ui$[ebp]
	push	ecx
	push	eax
	mov	eax, DWORD PTR [edx+36]
	push	eax
	mov	ecx, DWORD PTR [edx+32]
	push	ecx
	call	__aullrem
	mov	DWORD PTR tv289[ebp], eax
	mov	DWORD PTR tv289[ebp+4], edx
	mov	edx, DWORD PTR tv289[ebp]
	or	edx, DWORD PTR tv289[ebp+4]
	je	SHORT $LN9@GetFilterG
; Line 898
	mov	DWORD PTR _parseRes$75962[ebp], 0
$LN9@GetFilterG:
; Line 902
	cmp	DWORD PTR _parseRes$75962[ebp], 0
	jne	SHORT $LN11@GetFilterG
; Line 904
	mov	DWORD PTR _filterModeTemp$[ebp], 0
; Line 905
	mov	DWORD PTR _filterModeTemp$[ebp+4], 0
$LN11@GetFilterG:
; Line 909
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _stream$75955[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	jmp	SHORT $LN5@GetFilterG
$LN13@GetFilterG:
; Line 911
	movzx	eax, BYTE PTR _needReadFile$75938[ebp]
	test	eax, eax
	je	SHORT $LN2@GetFilterG
	mov	ecx, DWORD PTR _this$[ebp]
	call	??7?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBE_NXZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator!
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@GetFilterG
$LN2@GetFilterG:
	movzx	edx, BYTE PTR _probablyIsSameIsa$75939[ebp]
	test	edx, edx
	je	SHORT $LN5@GetFilterG
$LN3@GetFilterG:
; Line 914
	movzx	eax, BYTE PTR _probablyIsSameIsa$75939[ebp]
	test	eax, eax
	je	SHORT $LN5@GetFilterG
; Line 915
	mov	DWORD PTR _filterModeTemp$[ebp], 50528515 ; 03030103H
$LN5@GetFilterG:
; Line 920
	mov	ecx, DWORD PTR _filterMode$[ebp]
	mov	edx, DWORD PTR _filterModeTemp$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _filterModeTemp$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
; Line 921
	xor	eax, eax
; Line 922
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN32@GetFilterG
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 100				; 00000064H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN32@GetFilterG:
	DD	3
	DD	$LN31@GetFilterG
$LN31@GetFilterG:
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN27@GetFilterG
	DD	-60					; ffffffc4H
	DD	4
	DD	$LN28@GetFilterG
	DD	-76					; ffffffb4H
	DD	4
	DD	$LN29@GetFilterG
$LN29@GetFilterG:
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN28@GetFilterG:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN27@GetFilterG:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	77					; 0000004dH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?GetFilterGroup@CAnalysis@N7z@NArchive@@QAEJIABUCUpdateItem@23@AAUCFilterMode@23@@Z$0:
	lea	ecx, DWORD PTR _stream$75955[ebp]
	jmp	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
__ehhandler$?GetFilterGroup@CAnalysis@N7z@NArchive@@QAEJIABUCUpdateItem@23@AAUCFilterMode@23@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetFilterGroup@CAnalysis@N7z@NArchive@@QAEJIABUCUpdateItem@23@AAUCFilterMode@23@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetFilterGroup@CAnalysis@N7z@NArchive@@QAEJIABUCUpdateItem@23@AAUCFilterMode@23@@Z ENDP ; NArchive::N7z::CAnalysis::GetFilterGroup
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Ptr@UString@@QBEPB_WI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pos$ = 8						; size = 4
?Ptr@UString@@QBEPB_WI@Z PROC				; UString::Ptr, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 478
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pos$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	mov	esp, ebp
	pop	ebp
	ret	4
?Ptr@UString@@QBEPB_WI@Z ENDP				; UString::Ptr
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?RightPtr@UString@@QBEPB_WI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_num$ = 8						; size = 4
?RightPtr@UString@@QBEPB_WI@Z PROC			; UString::RightPtr, COMDAT
; _this$ = ecx
; Line 479
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	eax, DWORD PTR [eax+ecx*2]
	mov	ecx, DWORD PTR _num$[ebp]
	shl	ecx, 1
	sub	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?RightPtr@UString@@QBEPB_WI@Z ENDP			; UString::RightPtr
_TEXT	ENDS
EXTRN	?ReverseFind@UString@@QBEH_W@Z:PROC		; UString::ReverseFind
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ReverseFind_Dot@UString@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ReverseFind_Dot@UString@@QBEHXZ PROC			; UString::ReverseFind_Dot, COMDAT
; _this$ = ecx
; Line 575
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	push	46					; 0000002eH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReverseFind@UString@@QBEH_W@Z		; UString::ReverseFind
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReverseFind_Dot@UString@@QBEHXZ ENDP			; UString::ReverseFind_Dot
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SetDelta@CFilterMode@N7z@NArchive@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SetDelta@CFilterMode@N7z@NArchive@@QAEXXZ PROC		; NArchive::N7z::CFilterMode::SetDelta, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zupdate.cpp
; Line 38
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 39
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 50529281		; 03030401H
	jne	SHORT $LN7@SetDelta
; Line 40
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 16			; 00000010H
	jmp	SHORT $LN8@SetDelta
$LN7@SetDelta:
; Line 41
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx], 50529537		; 03030501H
	je	SHORT $LN4@SetDelta
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 50528773		; 03030205H
	je	SHORT $LN4@SetDelta
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 50528773		; 03030205H
	jne	SHORT $LN5@SetDelta
$LN4@SetDelta:
; Line 42
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 4
	jmp	SHORT $LN8@SetDelta
$LN5@SetDelta:
; Line 43
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 50530049		; 03030701H
	jne	SHORT $LN2@SetDelta
; Line 44
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 2
; Line 45
	jmp	SHORT $LN8@SetDelta
$LN2@SetDelta:
; Line 46
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
$LN8@SetDelta:
; Line 47
	mov	esp, ebp
	pop	ebp
	ret	0
?SetDelta@CFilterMode@N7z@NArchive@@QAEXXZ ENDP		; NArchive::N7z::CFilterMode::SetDelta
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
_TEXT	SEGMENT
_buf$ = 8						; size = 4
_size$ = 12						; size = 4
_filterMode$ = 16					; size = 4
?ParseFile@N7z@NArchive@@YGHPBEIPAUCFilterMode@12@@Z PROC ; NArchive::N7z::ParseFile
; Line 289
	push	ebp
	mov	ebp, esp
; Line 290
	mov	eax, DWORD PTR _filterMode$[ebp]
	mov	DWORD PTR [eax], 0
; Line 291
	mov	ecx, DWORD PTR _filterMode$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 293
	mov	edx, DWORD PTR _filterMode$[ebp]
	push	edx
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	?Parse_EXE@N7z@NArchive@@YGHPBEIPAUCFilterMode@12@@Z ; NArchive::N7z::Parse_EXE
	test	eax, eax
	je	SHORT $LN3@ParseFile
	mov	eax, 1
	jmp	SHORT $LN4@ParseFile
$LN3@ParseFile:
; Line 294
	mov	edx, DWORD PTR _filterMode$[ebp]
	push	edx
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	?Parse_ELF@N7z@NArchive@@YGHPBEIPAUCFilterMode@12@@Z ; NArchive::N7z::Parse_ELF
	test	eax, eax
	je	SHORT $LN2@ParseFile
	mov	eax, 1
	jmp	SHORT $LN4@ParseFile
$LN2@ParseFile:
; Line 295
	mov	edx, DWORD PTR _filterMode$[ebp]
	push	edx
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	?Parse_MACH@N7z@NArchive@@YGIPBEIPAUCFilterMode@12@@Z ; NArchive::N7z::Parse_MACH
	test	eax, eax
	je	SHORT $LN1@ParseFile
	mov	eax, 1
	jmp	SHORT $LN4@ParseFile
$LN1@ParseFile:
; Line 296
	mov	edx, DWORD PTR _filterMode$[ebp]
	push	edx
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	?Parse_WAV@N7z@NArchive@@YGHPBEIPAUCFilterMode@12@@Z ; NArchive::N7z::Parse_WAV
$LN4@ParseFile:
; Line 297
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?ParseFile@N7z@NArchive@@YGHPBEIPAUCFilterMode@12@@Z ENDP ; NArchive::N7z::ParseFile
; Function compile flags: /Odtp /RTCsu
tv90 = -24						; size = 4
tv77 = -20						; size = 4
_filterId$ = -16					; size = 4
_optHeaderSize$ = -12					; size = 4
_peOffset$ = -8						; size = 4
_p$ = -4						; size = 4
_buf$ = 8						; size = 4
_size$ = 12						; size = 4
_filterMode$ = 16					; size = 4
?Parse_EXE@N7z@NArchive@@YGHPBEIPAUCFilterMode@12@@Z PROC ; NArchive::N7z::Parse_EXE
; Line 62
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 63
	cmp	DWORD PTR _size$[ebp], 512		; 00000200H
	jb	SHORT $LN16@Parse_EXE
	mov	eax, DWORD PTR _buf$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 23117				; 00005a4dH
	je	SHORT $LN17@Parse_EXE
$LN16@Parse_EXE:
; Line 64
	xor	eax, eax
	jmp	$LN18@Parse_EXE
$LN17@Parse_EXE:
; Line 69
	mov	edx, DWORD PTR _buf$[ebp]
	mov	eax, DWORD PTR [edx+60]
	mov	DWORD PTR _peOffset$[ebp], eax
; Line 70
	cmp	DWORD PTR _peOffset$[ebp], 4096		; 00001000H
	jae	SHORT $LN14@Parse_EXE
	mov	ecx, DWORD PTR _peOffset$[ebp]
	add	ecx, 512				; 00000200H
	cmp	ecx, DWORD PTR _size$[ebp]
	ja	SHORT $LN14@Parse_EXE
	mov	edx, DWORD PTR _peOffset$[ebp]
	and	edx, 7
	je	SHORT $LN15@Parse_EXE
$LN14@Parse_EXE:
; Line 71
	xor	eax, eax
	jmp	$LN18@Parse_EXE
$LN15@Parse_EXE:
; Line 72
	mov	eax, DWORD PTR _buf$[ebp]
	add	eax, DWORD PTR _peOffset$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 73
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [ecx], 17744			; 00004550H
	je	SHORT $LN13@Parse_EXE
; Line 74
	xor	eax, eax
	jmp	$LN18@Parse_EXE
$LN13@Parse_EXE:
; Line 75
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 4
	mov	DWORD PTR _p$[ebp], edx
; Line 77
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR tv77[ebp], ecx
	cmp	DWORD PTR tv77[ebp], 452		; 000001c4H
	jg	SHORT $LN20@Parse_EXE
	cmp	DWORD PTR tv77[ebp], 452		; 000001c4H
	je	SHORT $LN8@Parse_EXE
	cmp	DWORD PTR tv77[ebp], 332		; 0000014cH
	je	SHORT $LN10@Parse_EXE
	cmp	DWORD PTR tv77[ebp], 448		; 000001c0H
	je	SHORT $LN9@Parse_EXE
	cmp	DWORD PTR tv77[ebp], 450		; 000001c2H
	je	SHORT $LN9@Parse_EXE
	jmp	SHORT $LN6@Parse_EXE
$LN20@Parse_EXE:
	cmp	DWORD PTR tv77[ebp], 512		; 00000200H
	je	SHORT $LN7@Parse_EXE
	cmp	DWORD PTR tv77[ebp], 34404		; 00008664H
	je	SHORT $LN10@Parse_EXE
	jmp	SHORT $LN6@Parse_EXE
$LN10@Parse_EXE:
; Line 80
	mov	DWORD PTR _filterId$[ebp], 50528515	; 03030103H
	jmp	SHORT $LN11@Parse_EXE
$LN9@Parse_EXE:
; Line 90
	mov	DWORD PTR _filterId$[ebp], 50529537	; 03030501H
	jmp	SHORT $LN11@Parse_EXE
$LN8@Parse_EXE:
; Line 91
	mov	DWORD PTR _filterId$[ebp], 50530049	; 03030701H
	jmp	SHORT $LN11@Parse_EXE
$LN7@Parse_EXE:
; Line 93
	mov	DWORD PTR _filterId$[ebp], 50529281	; 03030401H
	jmp	SHORT $LN11@Parse_EXE
$LN6@Parse_EXE:
; Line 94
	xor	eax, eax
	jmp	SHORT $LN18@Parse_EXE
$LN11@Parse_EXE:
; Line 97
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, WORD PTR [edx+16]
	mov	DWORD PTR _optHeaderSize$[ebp], eax
; Line 98
	cmp	DWORD PTR _optHeaderSize$[ebp], 1024	; 00000400H
	jbe	SHORT $LN5@Parse_EXE
; Line 99
	xor	eax, eax
	jmp	SHORT $LN18@Parse_EXE
$LN5@Parse_EXE:
; Line 101
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 20					; 00000014H
	mov	DWORD PTR _p$[ebp], ecx
; Line 103
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, WORD PTR [edx]
	mov	DWORD PTR tv90[ebp], eax
	cmp	DWORD PTR tv90[ebp], 267		; 0000010bH
	je	SHORT $LN2@Parse_EXE
	cmp	DWORD PTR tv90[ebp], 523		; 0000020bH
	je	SHORT $LN2@Parse_EXE
	jmp	SHORT $LN1@Parse_EXE
$LN2@Parse_EXE:
; Line 107
	jmp	SHORT $LN3@Parse_EXE
$LN1@Parse_EXE:
; Line 109
	xor	eax, eax
	jmp	SHORT $LN18@Parse_EXE
$LN3@Parse_EXE:
; Line 112
	mov	ecx, DWORD PTR _filterMode$[ebp]
	mov	edx, DWORD PTR _filterId$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 113
	mov	eax, 1
$LN18@Parse_EXE:
; Line 114
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Parse_EXE@N7z@NArchive@@YGHPBEIPAUCFilterMode@12@@Z ENDP ; NArchive::N7z::Parse_EXE
; Function compile flags: /Odtp /RTCsu
tv88 = -20						; size = 4
tv78 = -16						; size = 4
tv71 = -12						; size = 4
_filterId$ = -8						; size = 4
_be$ = -4						; size = 4
_buf$ = 8						; size = 4
_size$ = 12						; size = 4
_filterMode$ = 16					; size = 4
?Parse_ELF@N7z@NArchive@@YGHPBEIPAUCFilterMode@12@@Z PROC ; NArchive::N7z::Parse_ELF
; Line 132
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 136
	cmp	DWORD PTR _size$[ebp], 512		; 00000200H
	jb	SHORT $LN21@Parse_ELF
	mov	eax, DWORD PTR _buf$[ebp]
	movzx	ecx, BYTE PTR [eax+6]
	cmp	ecx, 1
	je	SHORT $LN22@Parse_ELF
$LN21@Parse_ELF:
; Line 137
	xor	eax, eax
	jmp	$LN23@Parse_ELF
$LN22@Parse_ELF:
; Line 139
	mov	edx, DWORD PTR _buf$[ebp]
	cmp	DWORD PTR [edx], 1179403647		; 464c457fH
	je	SHORT $LN20@Parse_ELF
; Line 140
	xor	eax, eax
	jmp	$LN23@Parse_ELF
$LN20@Parse_ELF:
; Line 142
	mov	eax, DWORD PTR _buf$[ebp]
	mov	cl, BYTE PTR [eax+4]
	mov	BYTE PTR tv71[ebp], cl
	cmp	BYTE PTR tv71[ebp], 1
	je	SHORT $LN17@Parse_ELF
	cmp	BYTE PTR tv71[ebp], 2
	je	SHORT $LN16@Parse_ELF
	jmp	SHORT $LN15@Parse_ELF
$LN17@Parse_ELF:
; Line 144
	jmp	SHORT $LN18@Parse_ELF
$LN16@Parse_ELF:
; Line 145
	jmp	SHORT $LN18@Parse_ELF
$LN15@Parse_ELF:
; Line 146
	xor	eax, eax
	jmp	$LN23@Parse_ELF
$LN18@Parse_ELF:
; Line 149
	mov	edx, DWORD PTR _buf$[ebp]
	mov	al, BYTE PTR [edx+5]
	mov	BYTE PTR tv78[ebp], al
	cmp	BYTE PTR tv78[ebp], 1
	je	SHORT $LN12@Parse_ELF
	cmp	BYTE PTR tv78[ebp], 2
	je	SHORT $LN11@Parse_ELF
	jmp	SHORT $LN10@Parse_ELF
$LN12@Parse_ELF:
; Line 151
	mov	DWORD PTR _be$[ebp], 0
	jmp	SHORT $LN13@Parse_ELF
$LN11@Parse_ELF:
; Line 152
	mov	DWORD PTR _be$[ebp], 1
	jmp	SHORT $LN13@Parse_ELF
$LN10@Parse_ELF:
; Line 153
	xor	eax, eax
	jmp	SHORT $LN23@Parse_ELF
$LN13@Parse_ELF:
; Line 156
	mov	ecx, DWORD PTR _be$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buf$[ebp]
	add	edx, 18					; 00000012H
	push	edx
	call	?Get16@N7z@NArchive@@YGGPBEH@Z		; NArchive::N7z::Get16
	movzx	eax, ax
	mov	DWORD PTR tv88[ebp], eax
	mov	ecx, DWORD PTR tv88[ebp]
	sub	ecx, 2
	mov	DWORD PTR tv88[ebp], ecx
	cmp	DWORD PTR tv88[ebp], 60			; 0000003cH
	ja	SHORT $LN1@Parse_ELF
	mov	edx, DWORD PTR tv88[ebp]
	movzx	eax, BYTE PTR $LN25@Parse_ELF[edx]
	jmp	DWORD PTR $LN26@Parse_ELF[eax*4]
$LN7@Parse_ELF:
; Line 160
	mov	DWORD PTR _filterId$[ebp], 50528515	; 03030103H
	jmp	SHORT $LN8@Parse_ELF
$LN6@Parse_ELF:
; Line 163
	mov	DWORD PTR _filterId$[ebp], 50530309	; 03030805H
	jmp	SHORT $LN8@Parse_ELF
$LN5@Parse_ELF:
; Line 165
	cmp	DWORD PTR _be$[ebp], 0
	jne	SHORT $LN4@Parse_ELF
	xor	eax, eax
	jmp	SHORT $LN23@Parse_ELF
$LN4@Parse_ELF:
	mov	DWORD PTR _filterId$[ebp], 50528773	; 03030205H
	jmp	SHORT $LN8@Parse_ELF
$LN3@Parse_ELF:
; Line 166
	cmp	DWORD PTR _be$[ebp], 0
	je	SHORT $LN2@Parse_ELF
	xor	eax, eax
	jmp	SHORT $LN23@Parse_ELF
$LN2@Parse_ELF:
	mov	DWORD PTR _filterId$[ebp], 50529537	; 03030501H
	jmp	SHORT $LN8@Parse_ELF
$LN1@Parse_ELF:
; Line 172
	xor	eax, eax
	jmp	SHORT $LN23@Parse_ELF
$LN8@Parse_ELF:
; Line 175
	mov	ecx, DWORD PTR _filterMode$[ebp]
	mov	edx, DWORD PTR _filterId$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 176
	mov	eax, 1
$LN23@Parse_ELF:
; Line 177
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN26@Parse_ELF:
	DD	$LN6@Parse_ELF
	DD	$LN7@Parse_ELF
	DD	$LN5@Parse_ELF
	DD	$LN3@Parse_ELF
	DD	$LN1@Parse_ELF
$LN25@Parse_ELF:
	DB	0
	DB	1
	DB	4
	DB	4
	DB	1
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	0
	DB	4
	DB	2
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
	DB	4
	DB	4
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	1
?Parse_ELF@N7z@NArchive@@YGHPBEIPAUCFilterMode@12@@Z ENDP ; NArchive::N7z::Parse_ELF
; Function compile flags: /Odtp /RTCsu
_p$ = 8						; size = 4
_be$ = 12						; size = 4
?Get16@N7z@NArchive@@YGGPBEH@Z PROC			; NArchive::N7z::Get16
; Line 127
	push	ebp
	mov	ebp, esp
	cmp	DWORD PTR _be$[ebp], 0
	je	SHORT $LN1@Get16
	mov	eax, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [eax]
	shl	eax, 8
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	or	eax, edx
	jmp	SHORT $LN2@Get16
$LN1@Get16:
	mov	eax, DWORD PTR _p$[ebp]
	mov	ax, WORD PTR [eax]
$LN2@Get16:
	pop	ebp
	ret	8
?Get16@N7z@NArchive@@YGGPBEH@Z ENDP			; NArchive::N7z::Get16
; Function compile flags: /Odtp /RTCsu
tv75 = -24						; size = 4
tv65 = -20						; size = 4
_be$ = -16						; size = 4
_commandsSize$ = -12					; size = 4
_numCommands$ = -8					; size = 4
_filterId$ = -4						; size = 4
_buf$ = 8						; size = 4
_size$ = 12						; size = 4
_filterMode$ = 16					; size = 4
?Parse_MACH@N7z@NArchive@@YGIPBEIPAUCFilterMode@12@@Z PROC ; NArchive::N7z::Parse_MACH
; Line 197
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 200
	cmp	DWORD PTR _size$[ebp], 512		; 00000200H
	jae	SHORT $LN20@Parse_MACH
; Line 201
	xor	eax, eax
	jmp	$LN21@Parse_MACH
$LN20@Parse_MACH:
; Line 204
	mov	eax, DWORD PTR _buf$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv65[ebp], ecx
	cmp	DWORD PTR tv65[ebp], -17958194		; feedfaceH
	ja	SHORT $LN23@Parse_MACH
	cmp	DWORD PTR tv65[ebp], -17958194		; feedfaceH
	je	SHORT $LN15@Parse_MACH
	cmp	DWORD PTR tv65[ebp], -822415874		; cefaedfeH
	je	SHORT $LN17@Parse_MACH
	cmp	DWORD PTR tv65[ebp], -805638658		; cffaedfeH
	je	SHORT $LN16@Parse_MACH
	jmp	SHORT $LN13@Parse_MACH
$LN23@Parse_MACH:
	cmp	DWORD PTR tv65[ebp], -17958193		; feedfacfH
	je	SHORT $LN14@Parse_MACH
	jmp	SHORT $LN13@Parse_MACH
$LN17@Parse_MACH:
; Line 206
	mov	DWORD PTR _be$[ebp], 1
	jmp	SHORT $LN18@Parse_MACH
$LN16@Parse_MACH:
; Line 207
	mov	DWORD PTR _be$[ebp], 1
	jmp	SHORT $LN18@Parse_MACH
$LN15@Parse_MACH:
; Line 208
	mov	DWORD PTR _be$[ebp], 0
	jmp	SHORT $LN18@Parse_MACH
$LN14@Parse_MACH:
; Line 209
	mov	DWORD PTR _be$[ebp], 0
	jmp	SHORT $LN18@Parse_MACH
$LN13@Parse_MACH:
; Line 210
	xor	eax, eax
	jmp	$LN21@Parse_MACH
$LN18@Parse_MACH:
; Line 213
	mov	edx, DWORD PTR _be$[ebp]
	push	edx
	mov	eax, DWORD PTR _buf$[ebp]
	add	eax, 4
	push	eax
	call	?Get32@N7z@NArchive@@YGIPBEH@Z		; NArchive::N7z::Get32
	mov	DWORD PTR tv75[ebp], eax
	cmp	DWORD PTR tv75[ebp], 18			; 00000012H
	ja	SHORT $LN24@Parse_MACH
	cmp	DWORD PTR tv75[ebp], 18			; 00000012H
	je	SHORT $LN5@Parse_MACH
	cmp	DWORD PTR tv75[ebp], 7
	je	SHORT $LN10@Parse_MACH
	cmp	DWORD PTR tv75[ebp], 12			; 0000000cH
	je	SHORT $LN9@Parse_MACH
	cmp	DWORD PTR tv75[ebp], 14			; 0000000eH
	je	SHORT $LN7@Parse_MACH
	jmp	SHORT $LN3@Parse_MACH
$LN24@Parse_MACH:
	cmp	DWORD PTR tv75[ebp], 16777223		; 01000007H
	je	SHORT $LN10@Parse_MACH
	cmp	DWORD PTR tv75[ebp], 16777234		; 01000012H
	je	SHORT $LN5@Parse_MACH
	jmp	SHORT $LN3@Parse_MACH
$LN10@Parse_MACH:
; Line 216
	mov	DWORD PTR _filterId$[ebp], 50528515	; 03030103H
	jmp	SHORT $LN11@Parse_MACH
$LN9@Parse_MACH:
; Line 217
	cmp	DWORD PTR _be$[ebp], 0
	je	SHORT $LN8@Parse_MACH
	xor	eax, eax
	jmp	SHORT $LN21@Parse_MACH
$LN8@Parse_MACH:
	mov	DWORD PTR _filterId$[ebp], 50529537	; 03030501H
	jmp	SHORT $LN11@Parse_MACH
$LN7@Parse_MACH:
; Line 218
	cmp	DWORD PTR _be$[ebp], 0
	jne	SHORT $LN6@Parse_MACH
	xor	eax, eax
	jmp	SHORT $LN21@Parse_MACH
$LN6@Parse_MACH:
	mov	DWORD PTR _filterId$[ebp], 50530309	; 03030805H
	jmp	SHORT $LN11@Parse_MACH
$LN5@Parse_MACH:
; Line 220
	cmp	DWORD PTR _be$[ebp], 0
	jne	SHORT $LN4@Parse_MACH
	xor	eax, eax
	jmp	SHORT $LN21@Parse_MACH
$LN4@Parse_MACH:
	mov	DWORD PTR _filterId$[ebp], 50528773	; 03030205H
	jmp	SHORT $LN11@Parse_MACH
$LN3@Parse_MACH:
; Line 221
	xor	eax, eax
	jmp	SHORT $LN21@Parse_MACH
$LN11@Parse_MACH:
; Line 224
	mov	ecx, DWORD PTR _be$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buf$[ebp]
	add	edx, 16					; 00000010H
	push	edx
	call	?Get32@N7z@NArchive@@YGIPBEH@Z		; NArchive::N7z::Get32
	mov	DWORD PTR _numCommands$[ebp], eax
; Line 225
	mov	eax, DWORD PTR _be$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	add	ecx, 20					; 00000014H
	push	ecx
	call	?Get32@N7z@NArchive@@YGIPBEH@Z		; NArchive::N7z::Get32
	mov	DWORD PTR _commandsSize$[ebp], eax
; Line 227
	cmp	DWORD PTR _commandsSize$[ebp], 16777216	; 01000000H
	ja	SHORT $LN1@Parse_MACH
	cmp	DWORD PTR _numCommands$[ebp], 262144	; 00040000H
	jbe	SHORT $LN2@Parse_MACH
$LN1@Parse_MACH:
; Line 228
	xor	eax, eax
	jmp	SHORT $LN21@Parse_MACH
$LN2@Parse_MACH:
; Line 230
	mov	edx, DWORD PTR _filterMode$[ebp]
	mov	eax, DWORD PTR _filterId$[ebp]
	mov	DWORD PTR [edx], eax
; Line 231
	mov	eax, 1
$LN21@Parse_MACH:
; Line 232
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Parse_MACH@N7z@NArchive@@YGIPBEIPAUCFilterMode@12@@Z ENDP ; NArchive::N7z::Parse_MACH
; Function compile flags: /Odtp /RTCsu
_p$ = 8						; size = 4
_be$ = 12						; size = 4
?Get32@N7z@NArchive@@YGIPBEH@Z PROC			; NArchive::N7z::Get32
; Line 128
	push	ebp
	mov	ebp, esp
	cmp	DWORD PTR _be$[ebp], 0
	je	SHORT $LN1@Get32
	mov	eax, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [eax]
	bswap	eax
	jmp	SHORT $LN2@Get32
$LN1@Get32:
	mov	ecx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [ecx]
$LN2@Get32:
	pop	ebp
	ret	8
?Get32@N7z@NArchive@@YGIPBEH@Z ENDP			; NArchive::N7z::Get32
; Function compile flags: /Odtp /RTCsu
_delta$75298 = -28					; size = 4
_i$75288 = -24						; size = 4
_kNumSubChunksTests$ = -20				; size = 4
_bitsPerSample$ = -16					; size = 4
_numChannels$ = -12					; size = 4
_pos$ = -8						; size = 4
_subChunkSize$ = -4					; size = 4
_buf$ = 8						; size = 4
_size$ = 12						; size = 4
_filterMode$ = 16					; size = 4
?Parse_WAV@N7z@NArchive@@YGHPBEIPAUCFilterMode@12@@Z PROC ; NArchive::N7z::Parse_WAV
; Line 243
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 245
	cmp	DWORD PTR _size$[ebp], 44		; 0000002cH
	jae	SHORT $LN14@Parse_WAV
; Line 246
	xor	eax, eax
	jmp	$LN15@Parse_WAV
$LN14@Parse_WAV:
; Line 250
	mov	eax, DWORD PTR _buf$[ebp]
	cmp	DWORD PTR [eax], 1179011410		; 46464952H
	jne	SHORT $LN12@Parse_WAV
	mov	ecx, DWORD PTR _buf$[ebp]
	cmp	DWORD PTR [ecx+8], 1163280727		; 45564157H
	jne	SHORT $LN12@Parse_WAV
	mov	edx, DWORD PTR _buf$[ebp]
	cmp	DWORD PTR [edx+12], 544501094		; 20746d66H
	je	SHORT $LN13@Parse_WAV
$LN12@Parse_WAV:
; Line 251
	xor	eax, eax
	jmp	$LN15@Parse_WAV
$LN13@Parse_WAV:
; Line 252
	mov	eax, DWORD PTR _buf$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _subChunkSize$[ebp], ecx
; Line 254
	cmp	DWORD PTR _subChunkSize$[ebp], 16	; 00000010H
	jb	SHORT $LN10@Parse_WAV
	cmp	DWORD PTR _subChunkSize$[ebp], 18	; 00000012H
	ja	SHORT $LN10@Parse_WAV
	mov	edx, DWORD PTR _buf$[ebp]
	movzx	eax, WORD PTR [edx+20]
	cmp	eax, 1
	je	SHORT $LN11@Parse_WAV
$LN10@Parse_WAV:
; Line 255
	xor	eax, eax
	jmp	$LN15@Parse_WAV
$LN11@Parse_WAV:
; Line 257
	mov	ecx, DWORD PTR _buf$[ebp]
	movzx	edx, WORD PTR [ecx+22]
	mov	DWORD PTR _numChannels$[ebp], edx
; Line 258
	mov	eax, DWORD PTR _buf$[ebp]
	movzx	ecx, WORD PTR [eax+34]
	mov	DWORD PTR _bitsPerSample$[ebp], ecx
; Line 260
	mov	edx, DWORD PTR _bitsPerSample$[ebp]
	and	edx, 7
	jne	SHORT $LN8@Parse_WAV
	cmp	DWORD PTR _bitsPerSample$[ebp], 256	; 00000100H
	jae	SHORT $LN8@Parse_WAV
	cmp	DWORD PTR _numChannels$[ebp], 256	; 00000100H
	jb	SHORT $LN9@Parse_WAV
$LN8@Parse_WAV:
; Line 261
	xor	eax, eax
	jmp	$LN15@Parse_WAV
$LN9@Parse_WAV:
; Line 263
	mov	eax, DWORD PTR _subChunkSize$[ebp]
	add	eax, 20					; 00000014H
	mov	DWORD PTR _pos$[ebp], eax
; Line 265
	mov	DWORD PTR _kNumSubChunksTests$[ebp], 10	; 0000000aH
; Line 267
	mov	DWORD PTR _i$75288[ebp], 0
	jmp	SHORT $LN7@Parse_WAV
$LN6@Parse_WAV:
	mov	ecx, DWORD PTR _i$75288[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$75288[ebp], ecx
$LN7@Parse_WAV:
	cmp	DWORD PTR _i$75288[ebp], 10		; 0000000aH
	jge	SHORT $LN5@Parse_WAV
; Line 269
	mov	edx, DWORD PTR _pos$[ebp]
	add	edx, 8
	cmp	edx, DWORD PTR _size$[ebp]
	jbe	SHORT $LN4@Parse_WAV
; Line 270
	xor	eax, eax
	jmp	SHORT $LN15@Parse_WAV
$LN4@Parse_WAV:
; Line 271
	mov	eax, DWORD PTR _buf$[ebp]
	add	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _subChunkSize$[ebp], ecx
; Line 272
	mov	edx, DWORD PTR _buf$[ebp]
	add	edx, DWORD PTR _pos$[ebp]
	cmp	DWORD PTR [edx], 1635017060		; 61746164H
	jne	SHORT $LN3@Parse_WAV
; Line 274
	mov	eax, DWORD PTR _bitsPerSample$[ebp]
	shr	eax, 3
	imul	eax, DWORD PTR _numChannels$[ebp]
	mov	DWORD PTR _delta$75298[ebp], eax
; Line 275
	cmp	DWORD PTR _delta$75298[ebp], 256	; 00000100H
	jb	SHORT $LN2@Parse_WAV
; Line 276
	xor	eax, eax
	jmp	SHORT $LN15@Parse_WAV
$LN2@Parse_WAV:
; Line 277
	mov	ecx, DWORD PTR _filterMode$[ebp]
	mov	DWORD PTR [ecx], 3
; Line 278
	mov	edx, DWORD PTR _filterMode$[ebp]
	mov	eax, DWORD PTR _delta$75298[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 279
	mov	eax, 1
	jmp	SHORT $LN15@Parse_WAV
$LN3@Parse_WAV:
; Line 281
	cmp	DWORD PTR _subChunkSize$[ebp], 65536	; 00010000H
	jbe	SHORT $LN1@Parse_WAV
; Line 282
	xor	eax, eax
	jmp	SHORT $LN15@Parse_WAV
$LN1@Parse_WAV:
; Line 283
	mov	ecx, DWORD PTR _subChunkSize$[ebp]
	mov	edx, DWORD PTR _pos$[ebp]
	lea	eax, DWORD PTR [edx+ecx+8]
	mov	DWORD PTR _pos$[ebp], eax
; Line 284
	jmp	$LN6@Parse_WAV
$LN5@Parse_WAV:
; Line 285
	xor	eax, eax
$LN15@Parse_WAV:
; Line 286
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Parse_WAV@N7z@NArchive@@YGHPBEIPAUCFilterMode@12@@Z ENDP ; NArchive::N7z::Parse_WAV
; Function compile flags: /Odtp /RTCsu
_i$75864 = -4						; size = 4
_ext$ = 8						; size = 4
?IsExeExt@N7z@NArchive@@YG_NPB_W@Z PROC			; NArchive::N7z::IsExeExt
; Line 785
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 786
	mov	DWORD PTR _i$75864[ebp], 0
	jmp	SHORT $LN4@IsExeExt
$LN3@IsExeExt:
	mov	eax, DWORD PTR _i$75864[ebp]
	add	eax, 1
	mov	DWORD PTR _i$75864[ebp], eax
$LN4@IsExeExt:
	cmp	DWORD PTR _i$75864[ebp], 5
	jae	SHORT $LN2@IsExeExt
; Line 787
	mov	ecx, DWORD PTR _i$75864[ebp]
	mov	edx, DWORD PTR _g_ExeExts[ecx*4]
	push	edx
	mov	eax, DWORD PTR _ext$[ebp]
	push	eax
	call	?StringsAreEqualNoCase_Ascii@@YG_NPB_WPBD@Z ; StringsAreEqualNoCase_Ascii
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@IsExeExt
; Line 788
	mov	al, 1
	jmp	SHORT $LN5@IsExeExt
$LN1@IsExeExt:
; Line 789
	jmp	SHORT $LN3@IsExeExt
$LN2@IsExeExt:
	xor	al, al
$LN5@IsExeExt:
; Line 790
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?IsExeExt@N7z@NArchive@@YG_NPB_W@Z ENDP			; NArchive::N7z::IsExeExt
_TEXT	ENDS
PUBLIC	??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator->
PUBLIC	?Read@CRepackInStreamWithSizes@N7z@NArchive@@UAGJPAXIPAI@Z ; NArchive::N7z::CRepackInStreamWithSizes::Read
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv68 = -4						; size = 4
_this$ = 8						; size = 4
_data$ = 12						; size = 4
_size$ = 16						; size = 4
_processedSize$ = 20					; size = 4
?Read@CRepackInStreamWithSizes@N7z@NArchive@@UAGJPAXIPAI@Z PROC ; NArchive::N7z::CRepackInStreamWithSizes::Read
; Line 1132
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1133
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator->
	mov	DWORD PTR tv68[ebp], eax
	mov	esi, esp
	mov	eax, DWORD PTR _processedSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	mov	eax, DWORD PTR tv68[ebp]
	push	eax
	mov	ecx, DWORD PTR tv68[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1142
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Read@CRepackInStreamWithSizes@N7z@NArchive@@UAGJPAXIPAI@Z ENDP ; NArchive::N7z::CRepackInStreamWithSizes::Read
_TEXT	ENDS
PUBLIC	??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEABUCFileItem@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CFileItem>::operator[]
PUBLIC	??A?$CRecordVector@_N@@QBEAB_NI@Z		; CRecordVector<bool>::operator[]
PUBLIC	?Size@?$CRecordVector@_N@@QBEIXZ		; CRecordVector<bool>::Size
PUBLIC	?GetSubStreamSize@CRepackInStreamWithSizes@N7z@NArchive@@UAGJ_KPA_K@Z ; NArchive::N7z::CRepackInStreamWithSizes::GetSubStreamSize
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv134 = -16						; size = 8
_fi$76155 = -8						; size = 4
_index$ = -4						; size = 4
_this$ = 8						; size = 4
_subStream$ = 12					; size = 8
_value$ = 20						; size = 4
?GetSubStreamSize@CRepackInStreamWithSizes@N7z@NArchive@@UAGJ_KPA_K@Z PROC ; NArchive::N7z::CRepackInStreamWithSizes::GetSubStreamSize
; Line 1145
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1146
	mov	eax, DWORD PTR _value$[ebp]
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0
; Line 1147
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	call	?Size@?$CRecordVector@_N@@QBEIXZ	; CRecordVector<bool>::Size
	xor	edx, edx
	mov	DWORD PTR tv134[ebp], eax
	mov	DWORD PTR tv134[ebp+4], edx
	mov	eax, DWORD PTR _subStream$[ebp+4]
	cmp	eax, DWORD PTR tv134[ebp+4]
	jb	SHORT $LN3@GetSubStre
	ja	SHORT $LN6@GetSubStre
	mov	ecx, DWORD PTR _subStream$[ebp]
	cmp	ecx, DWORD PTR tv134[ebp]
	jb	SHORT $LN3@GetSubStre
$LN6@GetSubStre:
; Line 1148
	mov	eax, 1
	jmp	SHORT $LN4@GetSubStre
$LN3@GetSubStre:
; Line 1149
	mov	edx, DWORD PTR _subStream$[ebp]
	mov	DWORD PTR _index$[ebp], edx
; Line 1150
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	call	??A?$CRecordVector@_N@@QBEAB_NI@Z	; CRecordVector<bool>::operator[]
	movzx	edx, BYTE PTR [eax]
	test	edx, edx
	je	SHORT $LN2@GetSubStre
; Line 1152
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	add	ecx, 88					; 00000058H
	call	??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEABUCFileItem@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CFileItem>::operator[]
	mov	DWORD PTR _fi$76155[ebp], eax
; Line 1153
	mov	eax, DWORD PTR _fi$76155[ebp]
	movzx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	je	SHORT $LN2@GetSubStre
; Line 1154
	mov	edx, DWORD PTR _value$[ebp]
	mov	eax, DWORD PTR _fi$76155[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], eax
$LN2@GetSubStre:
; Line 1156
	xor	eax, eax
$LN4@GetSubStre:
; Line 1157
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?GetSubStreamSize@CRepackInStreamWithSizes@N7z@NArchive@@UAGJ_KPA_K@Z ENDP ; NArchive::N7z::CRepackInStreamWithSizes::GetSubStreamSize
_TEXT	ENDS
PUBLIC	?ProcessEmptyFiles@CRepackStreamBase@N7z@NArchive@@IAEJXZ ; NArchive::N7z::CRepackStreamBase::ProcessEmptyFiles
PUBLIC	?Init@CRepackStreamBase@N7z@NArchive@@QAEJIPBV?$CRecordVector@_N@@@Z ; NArchive::N7z::CRepackStreamBase::Init
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_startIndex$ = 8					; size = 4
_extractStatuses$ = 12					; size = 4
?Init@CRepackStreamBase@N7z@NArchive@@QAEJIPBV?$CRecordVector@_N@@@Z PROC ; NArchive::N7z::CRepackStreamBase::Init
; _this$ = ecx
; Line 1187
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1188
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _startIndex$[ebp]
	mov	DWORD PTR [eax+20], ecx
; Line 1189
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _extractStatuses$[ebp]
	mov	DWORD PTR [edx+16], eax
; Line 1191
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], 0
; Line 1192
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1], 0
; Line 1194
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ProcessEmptyFiles@CRepackStreamBase@N7z@NArchive@@IAEJXZ ; NArchive::N7z::CRepackStreamBase::ProcessEmptyFiles
; Line 1195
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Init@CRepackStreamBase@N7z@NArchive@@QAEJIPBV?$CRecordVector@_N@@@Z ENDP ; NArchive::N7z::CRepackStreamBase::Init
_TEXT	ENDS
PUBLIC	?OpenFile@CRepackStreamBase@N7z@NArchive@@IAEJXZ ; NArchive::N7z::CRepackStreamBase::OpenFile
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv140 = -24						; size = 4
tv89 = -20						; size = 4
___result__$76240 = -16					; size = 4
_fi$ = -12						; size = 4
_arcIndex$ = -8						; size = 4
_this$ = -4						; size = 4
?OpenFile@CRepackStreamBase@N7z@NArchive@@IAEJXZ PROC	; NArchive::N7z::CRepackStreamBase::OpenFile
; _this$ = ecx
; Line 1198
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1199
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+24]
	mov	DWORD PTR _arcIndex$[ebp], ecx
; Line 1200
	mov	eax, DWORD PTR _arcIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+28]
	add	ecx, 88					; 00000058H
	call	??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEABUCFileItem@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CFileItem>::operator[]
	mov	DWORD PTR _fi$[ebp], eax
; Line 1202
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+16]
	call	??A?$CRecordVector@_N@@QBEAB_NI@Z	; CRecordVector<bool>::operator[]
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax]
	mov	BYTE PTR [edx], al
; Line 1203
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??B?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator IArchiveUpdateCallbackFile *
	test	eax, eax
	je	SHORT $LN2@OpenFile
; Line 1209
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??C?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator->
	mov	DWORD PTR tv89[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx]
	neg	edx
	sbb	edx, edx
	add	edx, 5
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _arcIndex$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR tv89[ebp]
	push	ecx
	mov	edx, DWORD PTR tv89[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$76240[ebp], eax
	cmp	DWORD PTR ___result__$76240[ebp], 0
	je	SHORT $LN2@OpenFile
	mov	eax, DWORD PTR ___result__$76240[ebp]
	jmp	SHORT $LN3@OpenFile
$LN2@OpenFile:
; Line 1212
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], -1
; Line 1213
	mov	eax, DWORD PTR _fi$[ebp]
	movzx	ecx, BYTE PTR [eax+18]
	test	ecx, ecx
	je	SHORT $LN5@OpenFile
	mov	edx, DWORD PTR _fi$[ebp]
	movzx	eax, BYTE PTR [edx+17]
	test	eax, eax
	jne	SHORT $LN5@OpenFile
	mov	DWORD PTR tv140[ebp], 1
	jmp	SHORT $LN6@OpenFile
$LN5@OpenFile:
	mov	DWORD PTR tv140[ebp], 0
$LN6@OpenFile:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR tv140[ebp]
	mov	BYTE PTR [ecx+2], dl
; Line 1215
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1], 1
; Line 1216
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _fi$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx+8], eax
	mov	edx, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+12], edx
; Line 1217
	xor	eax, eax
$LN3@OpenFile:
; Line 1218
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?OpenFile@CRepackStreamBase@N7z@NArchive@@IAEJXZ ENDP	; NArchive::N7z::CRepackStreamBase::OpenFile
_TEXT	ENDS
PUBLIC	??C?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QBEPAUIArchiveExtractCallbackMessage@@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::operator->
PUBLIC	??B?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QBEPAUIArchiveExtractCallbackMessage@@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::operator IArchiveExtractCallbackMessage *
PUBLIC	?CloseFile@CRepackStreamBase@N7z@NArchive@@IAEJXZ ; NArchive::N7z::CRepackStreamBase::CloseFile
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv128 = -20						; size = 4
___result__$76253 = -16					; size = 4
_fi$ = -12						; size = 4
_arcIndex$ = -8						; size = 4
_this$ = -4						; size = 4
?CloseFile@CRepackStreamBase@N7z@NArchive@@IAEJXZ PROC	; NArchive::N7z::CRepackStreamBase::CloseFile
; _this$ = ecx
; Line 1223
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1224
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+24]
	mov	DWORD PTR _arcIndex$[ebp], ecx
; Line 1225
	mov	eax, DWORD PTR _arcIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+28]
	add	ecx, 88					; 00000058H
	call	??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEABUCFileItem@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CFileItem>::operator[]
	mov	DWORD PTR _fi$[ebp], eax
; Line 1226
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1], 0
; Line 1227
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+24], ecx
; Line 1228
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	test	ecx, ecx
	je	SHORT $LN3@CloseFile
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	xor	eax, -1
	mov	ecx, DWORD PTR _fi$[ebp]
	cmp	DWORD PTR [ecx+12], eax
	jne	SHORT $LN4@CloseFile
$LN3@CloseFile:
; Line 1229
	xor	eax, eax
	jmp	SHORT $LN5@CloseFile
$LN4@CloseFile:
; Line 1231
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??B?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QBEPAUIArchiveExtractCallbackMessage@@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::operator IArchiveExtractCallbackMessage *
	test	eax, eax
	je	SHORT $LN2@CloseFile
; Line 1235
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??C?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QBEPAUIArchiveExtractCallbackMessage@@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::operator->
	mov	DWORD PTR tv128[ebp], eax
	mov	esi, esp
	push	3
	mov	edx, DWORD PTR _arcIndex$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR tv128[ebp]
	push	eax
	mov	ecx, DWORD PTR tv128[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$76253[ebp], eax
	cmp	DWORD PTR ___result__$76253[ebp], 0
	je	SHORT $LN2@CloseFile
	mov	eax, DWORD PTR ___result__$76253[ebp]
	jmp	SHORT $LN5@CloseFile
$LN2@CloseFile:
; Line 1238
	mov	eax, 536870914				; 20000002H
$LN5@CloseFile:
; Line 1239
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?CloseFile@CRepackStreamBase@N7z@NArchive@@IAEJXZ ENDP	; NArchive::N7z::CRepackStreamBase::CloseFile
; Function compile flags: /Odtp /RTCsu
tv130 = -16						; size = 4
___result__$76263 = -12					; size = 4
___result__$76261 = -8					; size = 4
_this$ = -4						; size = 4
?ProcessEmptyFiles@CRepackStreamBase@N7z@NArchive@@IAEJXZ PROC ; NArchive::N7z::CRepackStreamBase::ProcessEmptyFiles
; _this$ = ecx
; Line 1242
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
$LN4@ProcessEmp:
; Line 1243
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	?Size@?$CRecordVector@_N@@QBEIXZ	; CRecordVector<bool>::Size
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+24], eax
	jae	SHORT $LN3@ProcessEmp
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+24]
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	add	ecx, 88					; 00000058H
	call	??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEABUCFileItem@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CFileItem>::operator[]
	mov	DWORD PTR tv130[ebp], eax
	mov	eax, DWORD PTR tv130[ebp]
	mov	ecx, DWORD PTR tv130[ebp]
	mov	edx, DWORD PTR [eax]
	or	edx, DWORD PTR [ecx+4]
	jne	SHORT $LN3@ProcessEmp
; Line 1245
	mov	ecx, DWORD PTR _this$[ebp]
	call	?OpenFile@CRepackStreamBase@N7z@NArchive@@IAEJXZ ; NArchive::N7z::CRepackStreamBase::OpenFile
	mov	DWORD PTR ___result__$76261[ebp], eax
	cmp	DWORD PTR ___result__$76261[ebp], 0
	je	SHORT $LN2@ProcessEmp
	mov	eax, DWORD PTR ___result__$76261[ebp]
	jmp	SHORT $LN5@ProcessEmp
$LN2@ProcessEmp:
; Line 1246
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CloseFile@CRepackStreamBase@N7z@NArchive@@IAEJXZ ; NArchive::N7z::CRepackStreamBase::CloseFile
	mov	DWORD PTR ___result__$76263[ebp], eax
	cmp	DWORD PTR ___result__$76263[ebp], 0
	je	SHORT $LN1@ProcessEmp
	mov	eax, DWORD PTR ___result__$76263[ebp]
	jmp	SHORT $LN5@ProcessEmp
$LN1@ProcessEmp:
; Line 1247
	jmp	SHORT $LN4@ProcessEmp
$LN3@ProcessEmp:
; Line 1248
	xor	eax, eax
$LN5@ProcessEmp:
; Line 1249
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ProcessEmptyFiles@CRepackStreamBase@N7z@NArchive@@IAEJXZ ENDP ; NArchive::N7z::CRepackStreamBase::ProcessEmptyFiles
_TEXT	ENDS
PUBLIC	??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator->
PUBLIC	?Write@CFolderOutStream2@N7z@NArchive@@UAGJPBXIPAI@Z ; NArchive::N7z::CFolderOutStream2::Write
EXTRN	@CrcUpdate@12:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv272 = -60						; size = 4
tv130 = -56						; size = 4
tv86 = -52						; size = 4
tv229 = -48						; size = 4
tv226 = -44						; size = 8
___result__$76345 = -36					; size = 4
___result__$76341 = -32					; size = 4
___result__$76338 = -28					; size = 4
___result__$76336 = -24					; size = 4
___result__$76334 = -20					; size = 4
_result$76327 = -16					; size = 4
_cur$76325 = -8						; size = 4
_this$ = 8						; size = 4
_data$ = 12						; size = 4
_size$ = 16						; size = 4
_processedSize$ = 20					; size = 4
?Write@CFolderOutStream2@N7z@NArchive@@UAGJPBXIPAI@Z PROC ; NArchive::N7z::CFolderOutStream2::Write
; Line 1269
	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1270
	cmp	DWORD PTR _processedSize$[ebp], 0
	je	SHORT $LN14@Write
; Line 1271
	mov	eax, DWORD PTR _processedSize$[ebp]
	mov	DWORD PTR [eax], 0
$LN14@Write:
; Line 1273
	cmp	DWORD PTR _size$[ebp], 0
	je	$LN13@Write
; Line 1275
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+9]
	test	edx, edx
	je	$LN12@Write
; Line 1277
	mov	eax, DWORD PTR _size$[ebp]
	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv226[ebp], eax
	mov	DWORD PTR tv226[ebp+4], ecx
	mov	DWORD PTR tv229[ebp], edx
	mov	eax, DWORD PTR tv229[ebp]
	mov	ecx, DWORD PTR tv226[ebp+4]
	cmp	ecx, DWORD PTR [eax+20]
	ja	SHORT $LN18@Write
	jb	SHORT $LN21@Write
	mov	edx, DWORD PTR tv229[ebp]
	mov	eax, DWORD PTR tv226[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jae	SHORT $LN18@Write
$LN21@Write:
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR tv86[ebp], ecx
	jmp	SHORT $LN19@Write
$LN18@Write:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR tv86[ebp], eax
$LN19@Write:
	mov	ecx, DWORD PTR tv86[ebp]
	mov	DWORD PTR _cur$76325[ebp], ecx
; Line 1278
	mov	DWORD PTR _result$76327[ebp], 0
; Line 1279
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	test	eax, eax
	je	SHORT $LN11@Write
; Line 1280
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator->
	mov	DWORD PTR tv130[ebp], eax
	mov	esi, esp
	lea	ecx, DWORD PTR _cur$76325[ebp]
	push	ecx
	mov	edx, DWORD PTR _cur$76325[ebp]
	push	edx
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv130[ebp]
	push	ecx
	mov	edx, DWORD PTR tv130[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$76327[ebp], eax
$LN11@Write:
; Line 1281
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+10]
	test	eax, eax
	je	SHORT $LN10@Write
; Line 1282
	mov	ecx, DWORD PTR _cur$76325[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	@CrcUpdate@12
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN10@Write:
; Line 1283
	cmp	DWORD PTR _processedSize$[ebp], 0
	je	SHORT $LN9@Write
; Line 1284
	mov	edx, DWORD PTR _processedSize$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, DWORD PTR _cur$76325[ebp]
	mov	ecx, DWORD PTR _processedSize$[ebp]
	mov	DWORD PTR [ecx], eax
$LN9@Write:
; Line 1285
	mov	edx, DWORD PTR _data$[ebp]
	add	edx, DWORD PTR _cur$76325[ebp]
	mov	DWORD PTR _data$[ebp], edx
; Line 1286
	mov	eax, DWORD PTR _size$[ebp]
	sub	eax, DWORD PTR _cur$76325[ebp]
	mov	DWORD PTR _size$[ebp], eax
; Line 1287
	mov	ecx, DWORD PTR _cur$76325[ebp]
	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+16]
	sub	esi, ecx
	mov	ecx, DWORD PTR [eax+20]
	sbb	ecx, edx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], esi
	mov	DWORD PTR [edx+20], ecx
; Line 1288
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv272[ebp], eax
	mov	ecx, DWORD PTR tv272[ebp]
	mov	edx, DWORD PTR tv272[ebp]
	mov	eax, DWORD PTR [ecx+16]
	or	eax, DWORD PTR [edx+20]
	jne	SHORT $LN8@Write
; Line 1290
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?CloseFile@CRepackStreamBase@N7z@NArchive@@IAEJXZ ; NArchive::N7z::CRepackStreamBase::CloseFile
	mov	DWORD PTR ___result__$76334[ebp], eax
	cmp	DWORD PTR ___result__$76334[ebp], 0
	je	SHORT $LN7@Write
	mov	eax, DWORD PTR ___result__$76334[ebp]
	jmp	$LN16@Write
$LN7@Write:
; Line 1291
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?ProcessEmptyFiles@CRepackStreamBase@N7z@NArchive@@IAEJXZ ; NArchive::N7z::CRepackStreamBase::ProcessEmptyFiles
	mov	DWORD PTR ___result__$76336[ebp], eax
	cmp	DWORD PTR ___result__$76336[ebp], 0
	je	SHORT $LN8@Write
	mov	eax, DWORD PTR ___result__$76336[ebp]
	jmp	SHORT $LN16@Write
$LN8@Write:
; Line 1293
	mov	ecx, DWORD PTR _result$76327[ebp]
	mov	DWORD PTR ___result__$76338[ebp], ecx
	cmp	DWORD PTR ___result__$76338[ebp], 0
	je	SHORT $LN5@Write
	mov	eax, DWORD PTR ___result__$76338[ebp]
	jmp	SHORT $LN16@Write
$LN5@Write:
; Line 1294
	cmp	DWORD PTR _cur$76325[ebp], 0
	jne	SHORT $LN4@Write
; Line 1295
	jmp	SHORT $LN13@Write
$LN4@Write:
; Line 1296
	jmp	$LN14@Write
$LN12@Write:
; Line 1299
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?ProcessEmptyFiles@CRepackStreamBase@N7z@NArchive@@IAEJXZ ; NArchive::N7z::CRepackStreamBase::ProcessEmptyFiles
	mov	DWORD PTR ___result__$76341[ebp], eax
	cmp	DWORD PTR ___result__$76341[ebp], 0
	je	SHORT $LN3@Write
	mov	eax, DWORD PTR ___result__$76341[ebp]
	jmp	SHORT $LN16@Write
$LN3@Write:
; Line 1300
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	call	?Size@?$CRecordVector@_N@@QBEIXZ	; CRecordVector<bool>::Size
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+32], eax
	jne	SHORT $LN2@Write
; Line 1303
	mov	eax, -2147467259			; 80004005H
	jmp	SHORT $LN16@Write
$LN2@Write:
; Line 1305
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?OpenFile@CRepackStreamBase@N7z@NArchive@@IAEJXZ ; NArchive::N7z::CRepackStreamBase::OpenFile
	mov	DWORD PTR ___result__$76345[ebp], eax
	cmp	DWORD PTR ___result__$76345[ebp], 0
	je	SHORT $LN1@Write
	mov	eax, DWORD PTR ___result__$76345[ebp]
	jmp	SHORT $LN16@Write
$LN1@Write:
; Line 1306
	jmp	$LN14@Write
$LN13@Write:
; Line 1308
	xor	eax, eax
$LN16@Write:
; Line 1309
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN24@Write
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	3
$LN24@Write:
	DD	1
	DD	$LN23@Write
$LN23@Write:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN22@Write
$LN22@Write:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	0
?Write@CFolderOutStream2@N7z@NArchive@@UAGJPBXIPAI@Z ENDP ; NArchive::N7z::CFolderOutStream2::Write
_TEXT	ENDS
PUBLIC	?Read@CFolderInStream2@N7z@NArchive@@UAGJPAXIPAI@Z ; NArchive::N7z::CFolderInStream2::Read
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv281 = -64						; size = 4
tv132 = -60						; size = 4
tv86 = -56						; size = 4
tv233 = -52						; size = 4
tv230 = -48						; size = 8
___result__$76445 = -40					; size = 4
___result__$76441 = -36					; size = 4
___result__$76437 = -32					; size = 4
___result__$76435 = -28					; size = 4
___result__$76433 = -24					; size = 4
_result$76426 = -20					; size = 4
_buf$76422 = -16					; size = 4
_cur$76420 = -8						; size = 4
_this$ = 8						; size = 4
_data$ = 12						; size = 4
_size$ = 16						; size = 4
_processedSize$ = 20					; size = 4
?Read@CFolderInStream2@N7z@NArchive@@UAGJPAXIPAI@Z PROC	; NArchive::N7z::CFolderInStream2::Read
; Line 1345
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1346
	cmp	DWORD PTR _processedSize$[ebp], 0
	je	SHORT $LN17@Read
; Line 1347
	mov	eax, DWORD PTR _processedSize$[ebp]
	mov	DWORD PTR [eax], 0
$LN17@Read:
; Line 1349
	cmp	DWORD PTR _size$[ebp], 0
	je	$LN16@Read
; Line 1351
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+9]
	test	edx, edx
	je	$LN15@Read
; Line 1353
	mov	eax, DWORD PTR _size$[ebp]
	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv230[ebp], eax
	mov	DWORD PTR tv230[ebp+4], ecx
	mov	DWORD PTR tv233[ebp], edx
	mov	eax, DWORD PTR tv233[ebp]
	mov	ecx, DWORD PTR tv230[ebp+4]
	cmp	ecx, DWORD PTR [eax+20]
	ja	SHORT $LN21@Read
	jb	SHORT $LN24@Read
	mov	edx, DWORD PTR tv233[ebp]
	mov	eax, DWORD PTR tv230[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jae	SHORT $LN21@Read
$LN24@Read:
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR tv86[ebp], ecx
	jmp	SHORT $LN22@Read
$LN21@Read:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR tv86[ebp], eax
$LN22@Read:
	mov	ecx, DWORD PTR tv86[ebp]
	mov	DWORD PTR _cur$76420[ebp], ecx
; Line 1356
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	test	eax, eax
	je	SHORT $LN14@Read
; Line 1357
	mov	ecx, DWORD PTR _data$[ebp]
	mov	DWORD PTR _buf$76422[ebp], ecx
; Line 1358
	jmp	SHORT $LN13@Read
$LN14@Read:
; Line 1360
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+52]
	mov	DWORD PTR _buf$76422[ebp], eax
; Line 1361
	cmp	DWORD PTR _cur$76420[ebp], 65536	; 00010000H
	jbe	SHORT $LN13@Read
; Line 1362
	mov	DWORD PTR _cur$76420[ebp], 65536	; 00010000H
$LN13@Read:
; Line 1365
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator->
	mov	DWORD PTR tv132[ebp], eax
	mov	esi, esp
	lea	ecx, DWORD PTR _cur$76420[ebp]
	push	ecx
	mov	edx, DWORD PTR _cur$76420[ebp]
	push	edx
	mov	eax, DWORD PTR _buf$76422[ebp]
	push	eax
	mov	ecx, DWORD PTR tv132[ebp]
	push	ecx
	mov	edx, DWORD PTR tv132[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$76426[ebp], eax
; Line 1366
	mov	edx, DWORD PTR _cur$76420[ebp]
	push	edx
	mov	edx, DWORD PTR _buf$76422[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	@CrcUpdate@12
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 1367
	mov	edx, DWORD PTR _cur$76420[ebp]
	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [ecx+16]
	sub	esi, edx
	mov	edx, DWORD PTR [ecx+20]
	sbb	edx, eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], esi
	mov	DWORD PTR [eax+20], edx
; Line 1369
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+8]
	test	edx, edx
	je	SHORT $LN11@Read
; Line 1371
	mov	eax, DWORD PTR _data$[ebp]
	add	eax, DWORD PTR _cur$76420[ebp]
	mov	DWORD PTR _data$[ebp], eax
; Line 1372
	mov	ecx, DWORD PTR _size$[ebp]
	sub	ecx, DWORD PTR _cur$76420[ebp]
	mov	DWORD PTR _size$[ebp], ecx
; Line 1373
	cmp	DWORD PTR _processedSize$[ebp], 0
	je	SHORT $LN11@Read
; Line 1374
	mov	edx, DWORD PTR _processedSize$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, DWORD PTR _cur$76420[ebp]
	mov	ecx, DWORD PTR _processedSize$[ebp]
	mov	DWORD PTR [ecx], eax
$LN11@Read:
; Line 1377
	cmp	DWORD PTR _result$76426[ebp], 0
	je	SHORT $LN9@Read
; Line 1378
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _result$76426[ebp]
	mov	DWORD PTR [edx+60], eax
$LN9@Read:
; Line 1380
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv281[ebp], ecx
	mov	edx, DWORD PTR tv281[ebp]
	mov	eax, DWORD PTR tv281[ebp]
	mov	ecx, DWORD PTR [edx+16]
	or	ecx, DWORD PTR [eax+20]
	jne	SHORT $LN8@Read
; Line 1382
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?CloseFile@CRepackStreamBase@N7z@NArchive@@IAEJXZ ; NArchive::N7z::CRepackStreamBase::CloseFile
	mov	DWORD PTR ___result__$76433[ebp], eax
	cmp	DWORD PTR ___result__$76433[ebp], 0
	je	SHORT $LN7@Read
	mov	eax, DWORD PTR ___result__$76433[ebp]
	jmp	$LN19@Read
$LN7@Read:
; Line 1383
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?ProcessEmptyFiles@CRepackStreamBase@N7z@NArchive@@IAEJXZ ; NArchive::N7z::CRepackStreamBase::ProcessEmptyFiles
	mov	DWORD PTR ___result__$76435[ebp], eax
	cmp	DWORD PTR ___result__$76435[ebp], 0
	je	SHORT $LN8@Read
	mov	eax, DWORD PTR ___result__$76435[ebp]
	jmp	SHORT $LN19@Read
$LN8@Read:
; Line 1386
	mov	edx, DWORD PTR _result$76426[ebp]
	mov	DWORD PTR ___result__$76437[ebp], edx
	cmp	DWORD PTR ___result__$76437[ebp], 0
	je	SHORT $LN5@Read
	mov	eax, DWORD PTR ___result__$76437[ebp]
	jmp	SHORT $LN19@Read
$LN5@Read:
; Line 1388
	cmp	DWORD PTR _cur$76420[ebp], 0
	jne	SHORT $LN4@Read
; Line 1389
	mov	eax, -2147467259			; 80004005H
	jmp	SHORT $LN19@Read
$LN4@Read:
; Line 1391
	jmp	$LN17@Read
$LN15@Read:
; Line 1394
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?ProcessEmptyFiles@CRepackStreamBase@N7z@NArchive@@IAEJXZ ; NArchive::N7z::CRepackStreamBase::ProcessEmptyFiles
	mov	DWORD PTR ___result__$76441[ebp], eax
	cmp	DWORD PTR ___result__$76441[ebp], 0
	je	SHORT $LN3@Read
	mov	eax, DWORD PTR ___result__$76441[ebp]
	jmp	SHORT $LN19@Read
$LN3@Read:
; Line 1395
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	?Size@?$CRecordVector@_N@@QBEIXZ	; CRecordVector<bool>::Size
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+32], eax
	jne	SHORT $LN2@Read
; Line 1397
	xor	eax, eax
	jmp	SHORT $LN19@Read
$LN2@Read:
; Line 1399
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?OpenFile@CRepackStreamBase@N7z@NArchive@@IAEJXZ ; NArchive::N7z::CRepackStreamBase::OpenFile
	mov	DWORD PTR ___result__$76445[ebp], eax
	cmp	DWORD PTR ___result__$76445[ebp], 0
	je	SHORT $LN1@Read
	mov	eax, DWORD PTR ___result__$76445[ebp]
	jmp	SHORT $LN19@Read
$LN1@Read:
; Line 1400
	jmp	$LN17@Read
$LN16@Read:
; Line 1402
	xor	eax, eax
$LN19@Read:
; Line 1403
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN27@Read
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 64					; 00000040H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN27@Read:
	DD	1
	DD	$LN26@Read
$LN26@Read:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN25@Read
$LN25@Read:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	0
?Read@CFolderInStream2@N7z@NArchive@@UAGJPAXIPAI@Z ENDP	; NArchive::N7z::CFolderInStream2::Read
_TEXT	ENDS
PUBLIC	?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ; CMyComPtr<ISequentialOutStream>::Release
PUBLIC	??1UString@@QAE@XZ				; UString::~UString
PUBLIC	??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *
PUBLIC	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
PUBLIC	??B?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ ; CMyComPtr<ICryptoGetTextPassword>::operator ICryptoGetTextPassword *
PUBLIC	?Execute@CThreadDecoder@N7z@NArchive@@UAEXXZ	; NArchive::N7z::CThreadDecoder::Execute
EXTRN	?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z:PROC ; NArchive::N7z::CDecoder::Decode
EXTRN	??0UString@@QAE@XZ:PROC				; UString::UString
xdata$x	SEGMENT
__catchsym$?Execute@CThreadDecoder@N7z@NArchive@@UAEXXZ$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?Execute@CThreadDecoder@N7z@NArchive@@UAEXXZ$0
__tryblocktable$?Execute@CThreadDecoder@N7z@NArchive@@UAEXXZ DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$?Execute@CThreadDecoder@N7z@NArchive@@UAEXXZ$3
__unwindtable$?Execute@CThreadDecoder@N7z@NArchive@@UAEXXZ DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$?Execute@CThreadDecoder@N7z@NArchive@@UAEXXZ$2
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?Execute@CThreadDecoder@N7z@NArchive@@UAEXXZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?Execute@CThreadDecoder@N7z@NArchive@@UAEXXZ
	DD	01H
	DD	FLAT:__tryblocktable$?Execute@CThreadDecoder@N7z@NArchive@@UAEXXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv141 = -84						; size = 4
tv140 = -80						; size = 4
tv139 = -76						; size = 4
tv138 = -72						; size = 4
tv137 = -68						; size = 4
_password$76537 = -60					; size = 12
_passwordIsDefined$76536 = -37				; size = 1
_isEncrypted$76535 = -25				; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
?Execute@CThreadDecoder@N7z@NArchive@@UAEXXZ PROC	; NArchive::N7z::CThreadDecoder::Execute
; _this$ = ecx
; Line 1467
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Execute@CThreadDecoder@N7z@NArchive@@UAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-84]
	mov	ecx, 17					; 00000011H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
; Line 1469
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 1471
	mov	BYTE PTR _isEncrypted$76535[ebp], 0
; Line 1472
	mov	BYTE PTR _passwordIsDefined$76536[ebp], 0
; Line 1473
	lea	ecx, DWORD PTR _password$76537[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR tv137[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 1
; Line 1493
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 152				; 00000098H
	call	??B?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ ; CMyComPtr<ICryptoGetTextPassword>::operator ICryptoGetTextPassword *
	mov	DWORD PTR tv138[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 132				; 00000084H
	call	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
	mov	DWORD PTR tv139[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 124				; 0000007cH
	call	??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *
	mov	DWORD PTR tv140[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+160]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+156]
	push	eax
	lea	ecx, DWORD PTR _password$76537[ebp]
	push	ecx
	lea	edx, DWORD PTR _passwordIsDefined$76536[ebp]
	push	edx
	lea	eax, DWORD PTR _isEncrypted$76535[ebp]
	push	eax
	mov	ecx, DWORD PTR tv138[ebp]
	push	ecx
	push	0
	push	0
	mov	edx, DWORD PTR tv139[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+148]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+144]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	push	edx
	mov	eax, DWORD PTR [ecx+136]
	push	eax
	mov	ecx, DWORD PTR tv140[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z ; NArchive::N7z::CDecoder::Decode
	mov	DWORD PTR tv141[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv141[ebp]
	mov	DWORD PTR [edx+120], eax
; Line 1494
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _password$76537[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	jmp	SHORT $LN4@Execute
__catch$?Execute@CThreadDecoder@N7z@NArchive@@UAEXXZ$0:
; Line 1497
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+120], -2147467259	; 80004005H
; Line 1498
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?Execute@CThreadDecoder@N7z@NArchive@@UAEXXZ$1
	ret	0
$LN4@Execute:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?Execute@CThreadDecoder@N7z@NArchive@@UAEXXZ$1:
; Line 1504
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+128]
	add	ecx, 52					; 00000034H
	call	?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ; CMyComPtr<ISequentialOutStream>::Release
; Line 1505
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@Execute
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 84					; 00000054H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN15@Execute:
	DD	3
	DD	$LN14@Execute
$LN14@Execute:
	DD	-25					; ffffffe7H
	DD	1
	DD	$LN10@Execute
	DD	-37					; ffffffdbH
	DD	1
	DD	$LN11@Execute
	DD	-60					; ffffffc4H
	DD	12					; 0000000cH
	DD	$LN12@Execute
$LN12@Execute:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	0
$LN11@Execute:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	73					; 00000049H
	DB	115					; 00000073H
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$LN10@Execute:
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	69					; 00000045H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Execute@CThreadDecoder@N7z@NArchive@@UAEXXZ$2:
	lea	ecx, DWORD PTR _password$76537[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$?Execute@CThreadDecoder@N7z@NArchive@@UAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-88]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Execute@CThreadDecoder@N7z@NArchive@@UAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Execute@CThreadDecoder@N7z@NArchive@@UAEXXZ ENDP	; NArchive::N7z::CThreadDecoder::Execute
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1UString@@QAE@XZ
_TEXT	SEGMENT
$T79364 = -8						; size = 4
_this$ = -4						; size = 4
??1UString@@QAE@XZ PROC					; UString::~UString, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 470
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T79364[ebp], ecx
	mov	edx, DWORD PTR $T79364[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1UString@@QAE@XZ ENDP					; UString::~UString
_TEXT	ENDS
PUBLIC	?StringToBstr@@YGJPB_WPAPA_W@Z			; StringToBstr
PUBLIC	??BUString@@QBEPB_WXZ				; UString::operator wchar_t const *
PUBLIC	?CryptoGetTextPassword@CCryptoGetTextPassword@N7z@NArchive@@UAGJPAPA_W@Z ; NArchive::N7z::CCryptoGetTextPassword::CryptoGetTextPassword
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = 8						; size = 4
_password$ = 12						; size = 4
?CryptoGetTextPassword@CCryptoGetTextPassword@N7z@NArchive@@UAGJPAPA_W@Z PROC ; NArchive::N7z::CCryptoGetTextPassword::CryptoGetTextPassword
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zupdate.cpp
; Line 1523
	push	ebp
	mov	ebp, esp
; Line 1524
	mov	eax, DWORD PTR _password$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	?StringToBstr@@YGJPB_WPAPA_W@Z		; StringToBstr
; Line 1525
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?CryptoGetTextPassword@CCryptoGetTextPassword@N7z@NArchive@@UAGJPAPA_W@Z ENDP ; NArchive::N7z::CCryptoGetTextPassword::CryptoGetTextPassword
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??BUString@@QBEPB_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BUString@@QBEPB_WXZ PROC				; UString::operator wchar_t const *, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 476
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??BUString@@QBEPB_WXZ ENDP				; UString::operator wchar_t const *
_TEXT	ENDS
EXTRN	__imp__SysAllocString@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?StringToBstr@@YGJPB_WPAPA_W@Z
_TEXT	SEGMENT
_src$ = 8						; size = 4
_bstr$ = 12						; size = 4
?StringToBstr@@YGJPB_WPAPA_W@Z PROC			; StringToBstr, COMDAT
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 77
	push	ebp
	mov	ebp, esp
	push	esi
; Line 78
	mov	esi, esp
	mov	eax, DWORD PTR _src$[ebp]
	push	eax
	call	DWORD PTR __imp__SysAllocString@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _bstr$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 79
	mov	edx, DWORD PTR _bstr$[ebp]
	mov	eax, DWORD PTR [edx]
	neg	eax
	sbb	eax, eax
	and	eax, 2147024882				; 7ff8fff2H
	add	eax, -2147024882			; 8007000eH
; Line 80
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?StringToBstr@@YGJPB_WPAPA_W@Z ENDP			; StringToBstr
_TEXT	ENDS
PUBLIC	?ReserveDown@CArchiveDatabaseOut@N7z@NArchive@@QAEXXZ ; NArchive::N7z::CArchiveDatabaseOut::ReserveDown
PUBLIC	??A?$CRecordVector@_N@@QAEAA_NI@Z		; CRecordVector<bool>::operator[]
PUBLIC	?WasFinished@CFolderInStream@N7z@NArchive@@QBE_NXZ ; NArchive::N7z::CFolderInStream::WasFinished
PUBLIC	??0CFolderInStream@N7z@NArchive@@QAE@XZ		; NArchive::N7z::CFolderInStream::CFolderInStream
PUBLIC	??1?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CRefItem>::~CRecordVector<NArchive::N7z::CRefItem>
PUBLIC	??1?$CObjArray@I@@QAE@XZ			; CObjArray<unsigned int>::~CObjArray<unsigned int>
PUBLIC	?Len@UString@@QBEIXZ				; UString::Len
PUBLIC	??B?$CObjArray@I@@QAEPAIXZ			; CObjArray<unsigned int>::operator unsigned int *
PUBLIC	??0?$CObjArray@I@@QAE@I@Z			; CObjArray<unsigned int>::CObjArray<unsigned int>
PUBLIC	?Sort@?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEXP6GHPBUCRefItem@N7z@NArchive@@0PAX@Z1@Z ; CRecordVector<NArchive::N7z::CRefItem>::Sort
PUBLIC	??A?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEAAUCRefItem@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CRefItem>::operator[]
PUBLIC	??0CRefItem@N7z@NArchive@@QAE@IABUCUpdateItem@12@_N@Z ; NArchive::N7z::CRefItem::CRefItem
PUBLIC	??A?$CRecordVector@I@@QBEABII@Z			; CRecordVector<unsigned int>::operator[]
PUBLIC	?ClearAndSetSize@?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEXI@Z ; CRecordVector<NArchive::N7z::CRefItem>::ClearAndSetSize
PUBLIC	??0?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CRefItem>::CRecordVector<NArchive::N7z::CRefItem>
PUBLIC	??A?$CRecordVector@_K@@QAEAA_KI@Z		; CRecordVector<unsigned __int64>::operator[]
PUBLIC	?CheckFinishedState@CRepackStreamBase@N7z@NArchive@@QBEJXZ ; NArchive::N7z::CRepackStreamBase::CheckFinishedState
PUBLIC	?WaitExecuteFinish@CVirtThread@@QAEXXZ		; CVirtThread::WaitExecuteFinish
PUBLIC	?Init@CRepackInStreamWithSizes@N7z@NArchive@@QAEXPAUISequentialInStream@@IPBV?$CRecordVector@_N@@@Z ; NArchive::N7z::CRepackInStreamWithSizes::Init
PUBLIC	??4?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAEPAUIArchiveExtractCallbackMessage@@ABV0@@Z ; CMyComPtr<IArchiveExtractCallbackMessage>::operator=
PUBLIC	??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@ABV0@@Z ; CMyComPtr<ISequentialInStream>::operator=
PUBLIC	??7?$CMyComPtr@UISequentialInStream@@@@QBE_NXZ	; CMyComPtr<ISequentialInStream>::operator!
PUBLIC	??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=
PUBLIC	?Init@CFolderInStream2@N7z@NArchive@@QAEXXZ	; NArchive::N7z::CFolderInStream2::Init
PUBLIC	??0CFolderInStream2@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CFolderInStream2::CFolderInStream2
PUBLIC	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ	; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
PUBLIC	??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ; CMyComPtr<IInStream>::operator=
PUBLIC	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@ABV0@@Z ; CMyComPtr<ISequentialOutStream>::operator=
PUBLIC	??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator&
PUBLIC	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ	; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
PUBLIC	??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
PUBLIC	??0CRepackInStreamWithSizes@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CRepackInStreamWithSizes::CRepackInStreamWithSizes
PUBLIC	?Size@?$CRecordVector@_K@@QBEIXZ		; CRecordVector<unsigned __int64>::Size
PUBLIC	?Add@?$CRecordVector@_N@@QAEI_N@Z		; CRecordVector<bool>::Add
PUBLIC	??1?$CRecordVector@_N@@QAE@XZ			; CRecordVector<bool>::~CRecordVector<bool>
PUBLIC	??0?$CRecordVector@_N@@QAE@XZ			; CRecordVector<bool>::CRecordVector<bool>
PUBLIC	??B?$CObjArray@_K@@QBEPB_KXZ			; CObjArray<unsigned __int64>::operator unsigned __int64 const *
PUBLIC	?Add@?$CRecordVector@_K@@QAEI_K@Z		; CRecordVector<unsigned __int64>::Add
PUBLIC	?GetStreamPackSize@CFolders@N7z@NArchive@@QBE_KI@Z ; NArchive::N7z::CFolders::GetStreamPackSize
PUBLIC	?Size@?$CObjArray2@I@@QBEIXZ			; CObjArray2<unsigned int>::Size
PUBLIC	?AddNew@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEAAUCFolder@N7z@NArchive@@XZ ; CObjectVector<NArchive::N7z::CFolder>::AddNew
PUBLIC	?GetFolderStreamPos@CDbEx@N7z@NArchive@@QBE_KII@Z ; NArchive::N7z::CDbEx::GetFolderStreamPos
PUBLIC	??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *
PUBLIC	??A?$CRecordVector@UCFolderRepack@N7z@NArchive@@@@QBEABUCFolderRepack@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CFolderRepack>::operator[]
PUBLIC	?Size@?$CRecordVector@UCFolderRepack@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CFolderRepack>::Size
PUBLIC	?Empty@UString@@QAEXXZ				; UString::Empty
PUBLIC	??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode
PUBLIC	??0CCompressionMethodMode@N7z@NArchive@@QAE@ABU012@@Z ; NArchive::N7z::CCompressionMethodMode::CCompressionMethodMode
PUBLIC	?Sort2@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAEXXZ ; CRecordVector<NArchive::N7z::CFilterMode2>::Sort2
PUBLIC	??A?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAEAAUCFilterMode2@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CFilterMode2>::operator[]
PUBLIC	?Size@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CFilterMode2>::Size
PUBLIC	??1?$CRecordVector@I@@QAE@XZ			; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
PUBLIC	??0CFileItem@N7z@NArchive@@QAE@XZ		; NArchive::N7z::CFileItem::CFileItem
PUBLIC	??A?$CRecordVector@I@@QAEAAII@Z			; CRecordVector<unsigned int>::operator[]
PUBLIC	?Size@?$CRecordVector@I@@QBEIXZ			; CRecordVector<unsigned int>::Size
PUBLIC	?Sort@?$CRecordVector@I@@QAEXP6GHPBI0PAX@Z1@Z	; CRecordVector<unsigned int>::Sort
PUBLIC	??0?$CRecordVector@I@@QAE@XZ			; CRecordVector<unsigned int>::CRecordVector<unsigned int>
PUBLIC	??BCMyComBSTR@@QBEPB_WXZ			; CMyComBSTR::operator wchar_t const *
PUBLIC	??1CMyComBSTR@@QAE@XZ				; CMyComBSTR::~CMyComBSTR
PUBLIC	??ICMyComBSTR@@QAEPAPA_WXZ			; CMyComBSTR::operator&
PUBLIC	??0CMyComBSTR@@QAE@XZ				; CMyComBSTR::CMyComBSTR
PUBLIC	??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
PUBLIC	??4?$CMyComPtr@UICryptoGetTextPassword@@@@QAEPAUICryptoGetTextPassword@@PAU1@@Z ; CMyComPtr<ICryptoGetTextPassword>::operator=
PUBLIC	??0CCryptoGetTextPassword@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CCryptoGetTextPassword::CCryptoGetTextPassword
PUBLIC	??0?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::CMyComPtr<ICryptoGetTextPassword>
PUBLIC	?Add@?$CRecordVector@I@@QAEII@Z			; CRecordVector<unsigned int>::Add
PUBLIC	??1CAnalysis@N7z@NArchive@@QAE@XZ		; NArchive::N7z::CAnalysis::~CAnalysis
PUBLIC	??0CFilterMode2@N7z@NArchive@@QAE@XZ		; NArchive::N7z::CFilterMode2::CFilterMode2
PUBLIC	?HasStream@CUpdateItem@N7z@NArchive@@QBE_NXZ	; NArchive::N7z::CUpdateItem::HasStream
PUBLIC	??A?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBEABUCMethodFull@N7z@NArchive@@I@Z ; CObjectVector<NArchive::N7z::CMethodFull>::operator[]
PUBLIC	?Size@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::N7z::CMethodFull>::Size
PUBLIC	??4?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAEPAUIArchiveUpdateCallbackFile@@ABV0@@Z ; CMyComPtr<IArchiveUpdateCallbackFile>::operator=
PUBLIC	??0CAnalysis@N7z@NArchive@@QAE@XZ		; NArchive::N7z::CAnalysis::CAnalysis
PUBLIC	??1CThreadDecoder@N7z@NArchive@@QAE@XZ		; NArchive::N7z::CThreadDecoder::~CThreadDecoder
PUBLIC	??0CThreadDecoder@N7z@NArchive@@QAE@_N@Z	; NArchive::N7z::CThreadDecoder::CThreadDecoder
PUBLIC	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ	; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
PUBLIC	??1CStreamBinder@@QAE@XZ			; CStreamBinder::~CStreamBinder
PUBLIC	??0CStreamBinder@@QAE@XZ			; CStreamBinder::CStreamBinder
PUBLIC	??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>
PUBLIC	??1?$CObjArray@H@@QAE@XZ			; CObjArray<int>::~CObjArray<int>
PUBLIC	??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>
PUBLIC	??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>
PUBLIC	??1CFolderEx@N7z@NArchive@@QAE@XZ		; NArchive::N7z::CFolderEx::~CFolderEx
PUBLIC	?GetFolderFullPackSize@CDbEx@N7z@NArchive@@QBE_KI@Z ; NArchive::N7z::CDbEx::GetFolderFullPackSize
PUBLIC	?Add@?$CRecordVector@UCFolderRepack@N7z@NArchive@@@@QAEIUCFolderRepack@N7z@NArchive@@@Z ; CRecordVector<NArchive::N7z::CFolderRepack>::Add
PUBLIC	??A?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAEAAUCSolidGroup@N7z@NArchive@@I@Z ; CObjectVector<NArchive::N7z::CSolidGroup>::operator[]
PUBLIC	?AddNew@?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAEAAUCSolidGroup@N7z@NArchive@@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::AddNew
PUBLIC	?Size@?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::N7z::CSolidGroup>::Size
PUBLIC	?IsEncrypted@CFolder@N7z@NArchive@@QBE_NXZ	; NArchive::N7z::CFolder::IsEncrypted
PUBLIC	?ParseFolderEx@CFolders@N7z@NArchive@@QBEXIAAUCFolderEx@23@@Z ; NArchive::N7z::CFolders::ParseFolderEx
PUBLIC	??0CFolderEx@N7z@NArchive@@QAE@XZ		; NArchive::N7z::CFolderEx::CFolderEx
PUBLIC	??B?$CObjArray@I@@QBEPBIXZ			; CObjArray<unsigned int>::operator unsigned int const *
PUBLIC	??A?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QBEABUCUpdateItem@N7z@NArchive@@I@Z ; CObjectVector<NArchive::N7z::CUpdateItem>::operator[]
PUBLIC	?Size@?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::N7z::CUpdateItem>::Size
PUBLIC	??B?$CObjArray@H@@QAEPAHXZ			; CObjArray<int>::operator int *
PUBLIC	?Alloc@?$CObjArray@H@@QAEXI@Z			; CObjArray<int>::Alloc
PUBLIC	?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CFileItem>::Size
PUBLIC	??0?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::CObjectVector<NArchive::N7z::CSolidGroup>
PUBLIC	??0?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::CRecordVector<NArchive::N7z::CFilterMode2>
PUBLIC	??0?$CObjArray@H@@QAE@XZ			; CObjArray<int>::CObjArray<int>
PUBLIC	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
PUBLIC	??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>
PUBLIC	??I?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAEPAPAUIArchiveExtractCallbackMessage@@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::operator&
PUBLIC	??0?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::CMyComPtr<IArchiveExtractCallbackMessage>
PUBLIC	??I?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAEPAPAUIArchiveUpdateCallbackFile@@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator&
PUBLIC	??0?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::CMyComPtr<IArchiveUpdateCallbackFile>
PUBLIC	__$ArrayPad$
PUBLIC	?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z ; NArchive::N7z::Update
EXTRN	?Init@CFolderInStream@N7z@NArchive@@QAEXPAUIArchiveUpdateCallback@@PBII@Z:PROC ; NArchive::N7z::CFolderInStream::Init
EXTRN	?SetCur@CLocalProgress@@QAEJXZ:PROC		; CLocalProgress::SetCur
EXTRN	?StringsAreEqualNoCase@@YG_NPB_W0@Z:PROC	; StringsAreEqualNoCase
EXTRN	?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z:PROC ; NArchive::N7z::CEncoder::Encode
EXTRN	?Start@CVirtThread@@QAEXXZ:PROC			; CVirtThread::Start
EXTRN	?ReInit@CStreamBinder@@QAEXXZ:PROC		; CStreamBinder::ReInit
EXTRN	?CreateStreams@CStreamBinder@@QAEXPAPAUISequentialInStream@@PAPAUISequentialOutStream@@@Z:PROC ; CStreamBinder::CreateStreams
EXTRN	?ParseFolderInfo@CFolders@N7z@NArchive@@QBEXIAAUCFolder@23@@Z:PROC ; NArchive::N7z::CFolders::ParseFolderInfo
EXTRN	??1CEncoder@N7z@NArchive@@QAE@XZ:PROC		; NArchive::N7z::CEncoder::~CEncoder
EXTRN	??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z:PROC ; NArchive::N7z::CEncoder::CEncoder
EXTRN	?AddFile@CArchiveDatabaseOut@N7z@NArchive@@QAEXABUCFileItem@23@ABUCFileItem2@23@ABVUString@@@Z:PROC ; NArchive::N7z::CArchiveDatabaseOut::AddFile
EXTRN	?GetPath@CDatabase@N7z@NArchive@@QBEXIAAVUString@@@Z:PROC ; NArchive::N7z::CDatabase::GetPath
EXTRN	?SkipPrefixArchiveHeader@COutArchive@N7z@NArchive@@QAEJXZ:PROC ; NArchive::N7z::COutArchive::SkipPrefixArchiveHeader
EXTRN	?Create@COutArchive@N7z@NArchive@@QAEJPAUISequentialOutStream@@_N@Z:PROC ; NArchive::N7z::COutArchive::Create
EXTRN	??4UString@@QAEAAV0@PB_W@Z:PROC			; UString::operator=
EXTRN	??4UString@@QAEAAV0@ABV0@@Z:PROC		; UString::operator=
EXTRN	?Create@CVirtThread@@QAEIXZ:PROC		; CVirtThread::Create
EXTRN	?CreateEvents@CStreamBinder@@QAEIXZ:PROC	; CStreamBinder::CreateEvents
EXTRN	?Init@CLocalProgress@@QAEXPAUIProgress@@_N@Z:PROC ; CLocalProgress::Init
EXTRN	??0CLocalProgress@@QAE@XZ:PROC			; CLocalProgress::CLocalProgress
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	_IID_IArchiveExtractCallbackMessage:BYTE
EXTRN	_IID_IArchiveUpdateCallbackFile:BYTE
xdata$x	SEGMENT
__ehfuncinfo$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z DD 019930522H
	DD	020H
	DD	FLAT:__unwindtable$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$5
	DD	04H
	DD	FLAT:__unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$6
	DD	04H
	DD	FLAT:__unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$7
	DD	07H
	DD	FLAT:__unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$8
	DD	08H
	DD	FLAT:__unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$9
	DD	09H
	DD	FLAT:__unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$10
	DD	09H
	DD	FLAT:__unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$11
	DD	0bH
	DD	FLAT:__unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$12
	DD	0bH
	DD	FLAT:__unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$13
	DD	0bH
	DD	FLAT:__unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$14
	DD	0eH
	DD	FLAT:__unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$15
	DD	0bH
	DD	FLAT:__unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$16
	DD	010H
	DD	FLAT:__unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$17
	DD	011H
	DD	FLAT:__unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$18
	DD	012H
	DD	FLAT:__unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$19
	DD	013H
	DD	FLAT:__unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$20
	DD	013H
	DD	FLAT:__unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$21
	DD	015H
	DD	FLAT:__unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$22
	DD	015H
	DD	FLAT:__unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$23
	DD	015H
	DD	FLAT:__unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$24
	DD	018H
	DD	FLAT:__unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$25
	DD	011H
	DD	FLAT:__unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$26
	DD	011H
	DD	FLAT:__unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$27
	DD	01bH
	DD	FLAT:__unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$28
	DD	01cH
	DD	FLAT:__unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$29
	DD	01cH
	DD	FLAT:__unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$30
	DD	01eH
	DD	FLAT:__unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$31
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv1605 = -1996						; size = 4
tv1445 = -1992						; size = 4
tv1394 = -1988						; size = 4
tv2860 = -1984						; size = 4
tv2841 = -1980						; size = 8
tv1320 = -1972						; size = 4
tv1187 = -1968						; size = 4
tv1163 = -1964						; size = 4
tv1015 = -1960						; size = 4
tv1004 = -1956						; size = 4
tv973 = -1952						; size = 4
tv926 = -1948						; size = 4
tv870 = -1944						; size = 4
tv759 = -1940						; size = 4
tv729 = -1936						; size = 4
tv644 = -1929						; size = 1
tv493 = -1928						; size = 4
tv340 = -1924						; size = 4
tv2219 = -1920						; size = 4
tv129 = -1916						; size = 8
$T79440 = -1908						; size = 4
$T79439 = -1904						; size = 4
$T79438 = -1900						; size = 4
$T79437 = -1896						; size = 4
$T79436 = -1892						; size = 4
$T79435 = -1888						; size = 4
$T79434 = -1884						; size = 4
$T79431 = -1880						; size = 4
$T79430 = -1876						; size = 4
$T79429 = -1872						; size = 4
$T79426 = -1868						; size = 20
$T79423 = -1848						; size = 4
$T79422 = -1844						; size = 4
$T79421 = -1840						; size = 4
$T79420 = -1836						; size = 4
$T79419 = -1832						; size = 4
$T79418 = -1828						; size = 4
$T79417 = -1824						; size = 4
$T79416 = -1820						; size = 4
$T79415 = -1816						; size = 4
$T79414 = -1812						; size = 4
$T79413 = -1808						; size = 4
$T79412 = -1804						; size = 4
$T79411 = -1800						; size = 4
$T79406 = -1796						; size = 4
$T79405 = -1792						; size = 4
$T79400 = -1788						; size = 4
$T79399 = -1784						; size = 4
$T79398 = -1780						; size = 4
$T79397 = -1776						; size = 4
$T79396 = -1772						; size = 4
$T79395 = -1768						; size = 4
$T79394 = -1764						; size = 4
$T79391 = -1760						; size = 4
$T79390 = -1756						; size = 4
$T79389 = -1752						; size = 4
$T79388 = -1748						; size = 4
$T79385 = -1744						; size = 4
$T79384 = -1740						; size = 4
$T79383 = -1736						; size = 4
$T79382 = -1732						; size = 4
$T79381 = -1728						; size = 4
$T79378 = -1724						; size = 4
$T79377 = -1720						; size = 4
$T79376 = -1716						; size = 4
$T79375 = -1712						; size = 4
___result__$77207 = -1708				; size = 4
___result__$77203 = -1704				; size = 4
___result__$77200 = -1700				; size = 4
_name$77189 = -1692					; size = 12
_file2$77188 = -1672					; size = 40
_file$77187 = -1624					; size = 24
_ui$77186 = -1596					; size = 4
_subIndex$77182 = -1592					; size = 4
_skippedSize$77181 = -1588				; size = 8
_numUnpackStreams$77180 = -1580				; size = 4
___result__$77171 = -1576				; size = 4
_curFolderUnpackSize$77170 = -1568			; size = 8
_startPackIndex$77169 = -1556				; size = 4
_solidInStream$77168 = -1548				; size = 4
_inStreamSpec$77162 = -1540				; size = 4
___result__$77159 = -1536				; size = 4
_ext$77154 = -1532					; size = 4
_dotPos$77153 = -1528					; size = 4
_slashPos$77152 = -1524					; size = 4
_ui$77149 = -1520					; size = 4
_prevExtension$77145 = -1516				; size = 4
_numSubFiles$77144 = -1512				; size = 4
_totalSize$77143 = -1508				; size = 8
_index$77139 = -1500					; size = 4
_indices$77135 = -1492					; size = 4
_sortParam$77132 = -1477				; size = 1
_sortByType$77127 = -1469				; size = 1
_refItems$77126 = -1464					; size = 12
_numFiles$77027 = -1448					; size = 4
_uf$77026 = -1440					; size = 24
_ui$77023 = -1412					; size = 4
_updateIndex$77021 = -1408				; size = 4
_name$77019 = -1400					; size = 12
_file2$77018 = -1380					; size = 40
_file$77017 = -1332					; size = 24
_fi$77013 = -1304					; size = 4
_indexInFolder$77012 = -1300				; size = 4
___result__$77003 = -1296				; size = 4
___result__$77000 = -1292				; size = 4
___result__$76997 = -1288				; size = 4
___result__$76991 = -1284				; size = 4
___result__$76980 = -1280				; size = 4
___result__$76975 = -1276				; size = 4
_decodeRes$76971 = -1272				; size = 4
_encodeRes$76966 = -1268				; size = 4
___result__$76962 = -1264				; size = 4
_startIndex$76961 = -1260				; size = 4
___result__$76955 = -1256				; size = 4
_res$76954 = -1252					; size = 4
_decodedStream$76953 = -1244				; size = 4
_password$76951 = -1232					; size = 12
_passwordIsDefined$76950 = -1209			; size = 1
_isEncrypted$76949 = -1197				; size = 1
_sbOutStream$76942 = -1188				; size = 4
_inStreamSizeCount$76939 = -1176			; size = 4
_inStreamSizeCountSpec$76933 = -1168			; size = 4
_FosSpec2$76932 = -1164					; size = 4
_repackBase$76931 = -1160				; size = 4
_sbInStream$76930 = -1152				; size = 4
_curUnpackSize$76928 = -1140				; size = 8
_startPackIndex$76927 = -1128				; size = 4
_updateIndex$76924 = -1124				; size = 4
_file$76922 = -1120					; size = 4
_needExtract$76921 = -1113				; size = 1
_fi$76917 = -1112					; size = 4
_sizeToEncode$76916 = -1108				; size = 8
___result__$76912 = -1100				; size = 4
_indexInFolder$76910 = -1096				; size = 4
_extractStatuses$76909 = -1088				; size = 12
_indexEnd$76904 = -1072					; size = 4
_indexStart$76903 = -1068				; size = 4
_j$76899 = -1064					; size = 4
_startIndex$76898 = -1060				; size = 4
_folder$76897 = -1056					; size = 4
___result__$76894 = -1052				; size = 4
_packSize$76893 = -1048					; size = 8
___result__$76889 = -1040				; size = 4
_fi$76884 = -1036					; size = 4
_indexInFolder$76883 = -1032				; size = 4
___result__$76879 = -1028				; size = 4
_numUnpackStreams$76876 = -1024				; size = 4
_folderIndex$76875 = -1020				; size = 4
_rep$76874 = -1016					; size = 4
_folderRefIndex$76870 = -1012				; size = 4
_group$76869 = -1008					; size = 4
_encoder$76868 = -1000					; size = 180
___result__$76861 = -816				; size = 4
_res$76860 = -812					; size = 4
_method$76859 = -804					; size = 48
_filterMode$76858 = -752				; size = 4
_groupIndex$76854 = -748				; size = 4
_i$76850 = -744						; size = 4
_name$76847 = -736					; size = 12
_file2$76846 = -716					; size = 40
_file$76845 = -668					; size = 24
_ui$76844 = -640					; size = 4
_ui$76835 = -636					; size = 4
_emptyRefs$76831 = -628					; size = 12
___result__$76828 = -612				; size = 4
___result__$76825 = -608				; size = 4
___result__$76821 = -604				; size = 4
_password$76820 = -596					; size = 4
_getTextPassword$ = -584				; size = 4
_getPasswordSpec$ = -576				; size = 4
_groupIndex$76803 = -572				; size = 4
___result__$76800 = -568				; size = 4
_fm$76798 = -560					; size = 16
_ui$76795 = -540					; size = 4
_method$76786 = -536					; size = 4
_useFilters$76785 = -529				; size = 1
_analysis$76779 = -524					; size = 16
___result__$76776 = -504				; size = 4
_threadDecoder$ = -496					; size = 168
___result__$76771 = -324				; size = 4
_sb$ = -316						; size = 32
_progress$ = -276					; size = 4
_lps$ = -268						; size = 4
___result__$76759 = -264				; size = 4
_ui$76753 = -260					; size = 4
_i$ = -256						; size = 4
_inSizeForReduce$ = -248				; size = 8
_groupIndex$76740 = -236				; size = 4
_isEncrypted$76739 = -229				; size = 1
_f$76738 = -224						; size = 28
_rep$76737 = -188					; size = 8
_updateIndex$76734 = -176				; size = 4
_file$76732 = -172					; size = 4
_fi$76728 = -168					; size = 4
_repackSize$76727 = -164				; size = 8
_numUnpackStreams$76726 = -156				; size = 4
_numCopyItems$76725 = -152				; size = 4
_indexInFolder$76724 = -148				; size = 4
_index$76718 = -144					; size = 4
_i$76711 = -140						; size = 4
_thereAreRepacks$ = -133				; size = 1
_groups$ = -128						; size = 12
_filters$ = -108					; size = 12
_needEncryptedRepack$ = -89				; size = 1
_inSizeForReduce2$ = -88				; size = 8
_complexity$ = -80					; size = 8
_fileIndexToUpdateIndexMap$ = -68			; size = 4
___result__$76614 = -60					; size = 4
_startBlockSize$ = -56					; size = 8
_extractCallback$ = -44					; size = 4
_opCallback$ = -32					; size = 4
_numSolidFiles$ = -24					; size = 8
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_inStream$ = 8						; size = 4
_db$ = 12						; size = 4
_updateItems$ = 16					; size = 4
_archive$ = 20						; size = 4
_newDatabase$ = 24					; size = 4
_seqOutStream$ = 28					; size = 4
_updateCallback$ = 32					; size = 4
_options$ = 36						; size = 4
_getDecoderPassword$ = 40				; size = 4
?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z PROC ; NArchive::N7z::Update
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zupdate.cpp
; Line 1557
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 1984				; 000007c0H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1996]
	mov	ecx, 496				; 000001f0H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 1558
	mov	eax, DWORD PTR _options$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _numSolidFiles$[ebp], ecx
	mov	edx, DWORD PTR [eax+28]
	mov	DWORD PTR _numSolidFiles$[ebp+4], edx
; Line 1559
	mov	eax, DWORD PTR _numSolidFiles$[ebp]
	or	eax, DWORD PTR _numSolidFiles$[ebp+4]
	jne	SHORT $LN187@Update
; Line 1560
	mov	DWORD PTR _numSolidFiles$[ebp], 1
	mov	DWORD PTR _numSolidFiles$[ebp+4], 0
$LN187@Update:
; Line 1562
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??0?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::CMyComPtr<IArchiveUpdateCallbackFile>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 1563
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??I?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAEPAPAUIArchiveUpdateCallbackFile@@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator&
	mov	esi, esp
	push	eax
	push	OFFSET _IID_IArchiveUpdateCallbackFile
	mov	ecx, DWORD PTR _updateCallback$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _updateCallback$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1565
	lea	ecx, DWORD PTR _extractCallback$[ebp]
	call	??0?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::CMyComPtr<IArchiveExtractCallbackMessage>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
; Line 1566
	lea	ecx, DWORD PTR _extractCallback$[ebp]
	call	??I?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAEPAPAUIArchiveExtractCallbackMessage@@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::operator&
	mov	esi, esp
	push	eax
	push	OFFSET _IID_IArchiveExtractCallbackMessage
	mov	edx, DWORD PTR _updateCallback$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _updateCallback$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1577
	cmp	DWORD PTR _db$[ebp], 0
	je	SHORT $LN190@Update
	mov	eax, DWORD PTR _db$[ebp]
	mov	ecx, DWORD PTR [eax+232]
	mov	DWORD PTR tv129[ebp], ecx
	mov	edx, DWORD PTR [eax+236]
	mov	DWORD PTR tv129[ebp+4], edx
	jmp	SHORT $LN191@Update
$LN190@Update:
	mov	DWORD PTR tv129[ebp], 0
	mov	DWORD PTR tv129[ebp+4], 0
$LN191@Update:
	mov	eax, DWORD PTR tv129[ebp]
	mov	DWORD PTR _startBlockSize$[ebp], eax
	mov	ecx, DWORD PTR tv129[ebp+4]
	mov	DWORD PTR _startBlockSize$[ebp+4], ecx
; Line 1578
	cmp	DWORD PTR _startBlockSize$[ebp+4], 0
	ja	SHORT $LN244@Update
	cmp	DWORD PTR _startBlockSize$[ebp], 0
	jbe	SHORT $LN186@Update
$LN244@Update:
	mov	edx, DWORD PTR _options$[ebp]
	movzx	eax, BYTE PTR [edx+41]
	test	eax, eax
	jne	SHORT $LN186@Update
; Line 1580
	push	0
	mov	ecx, DWORD PTR _startBlockSize$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _startBlockSize$[ebp]
	push	edx
	push	0
	push	0
	mov	eax, DWORD PTR _seqOutStream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _inStream$[ebp]
	push	ecx
	call	?WriteRange@N7z@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@_K2PAUICompressProgressInfo@@@Z ; NArchive::N7z::WriteRange
	mov	DWORD PTR ___result__$76614[ebp], eax
	cmp	DWORD PTR ___result__$76614[ebp], 0
	je	SHORT $LN186@Update
	mov	edx, DWORD PTR ___result__$76614[ebp]
	mov	DWORD PTR $T79375[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extractCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	eax, DWORD PTR $T79375[ebp]
	jmp	$LN188@Update
$LN186@Update:
; Line 1583
	lea	ecx, DWORD PTR _fileIndexToUpdateIndexMap$[ebp]
	call	??0?$CObjArray@H@@QAE@XZ		; CObjArray<int>::CObjArray<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
; Line 1584
	mov	DWORD PTR _complexity$[ebp], 0
	mov	DWORD PTR _complexity$[ebp+4], 0
; Line 1585
	mov	DWORD PTR _inSizeForReduce2$[ebp], 0
	mov	DWORD PTR _inSizeForReduce2$[ebp+4], 0
; Line 1586
	mov	BYTE PTR _needEncryptedRepack$[ebp], 0
; Line 1588
	lea	ecx, DWORD PTR _filters$[ebp]
	call	??0?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::CRecordVector<NArchive::N7z::CFilterMode2>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
; Line 1589
	lea	ecx, DWORD PTR _groups$[ebp]
	call	??0?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::CObjectVector<NArchive::N7z::CSolidGroup>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
; Line 1590
	mov	BYTE PTR _thereAreRepacks$[ebp], 0
; Line 1592
	cmp	DWORD PTR _db$[ebp], 0
	je	$LN184@Update
; Line 1594
	mov	ecx, DWORD PTR _db$[ebp]
	add	ecx, 88					; 00000058H
	call	?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CFileItem>::Size
	push	eax
	lea	ecx, DWORD PTR _fileIndexToUpdateIndexMap$[ebp]
	call	?Alloc@?$CObjArray@H@@QAEXI@Z		; CObjArray<int>::Alloc
; Line 1597
	mov	DWORD PTR _i$76711[ebp], 0
	jmp	SHORT $LN183@Update
$LN182@Update:
	mov	eax, DWORD PTR _i$76711[ebp]
	add	eax, 1
	mov	DWORD PTR _i$76711[ebp], eax
$LN183@Update:
	mov	ecx, DWORD PTR _db$[ebp]
	add	ecx, 88					; 00000058H
	call	?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CFileItem>::Size
	cmp	DWORD PTR _i$76711[ebp], eax
	jae	SHORT $LN181@Update
; Line 1598
	lea	ecx, DWORD PTR _fileIndexToUpdateIndexMap$[ebp]
	call	??B?$CObjArray@H@@QAEPAHXZ		; CObjArray<int>::operator int *
	mov	ecx, DWORD PTR _i$76711[ebp]
	mov	DWORD PTR [eax+ecx*4], -1
	jmp	SHORT $LN182@Update
$LN181@Update:
; Line 1600
	mov	DWORD PTR _i$76711[ebp], 0
	jmp	SHORT $LN180@Update
$LN179@Update:
	mov	edx, DWORD PTR _i$76711[ebp]
	add	edx, 1
	mov	DWORD PTR _i$76711[ebp], edx
$LN180@Update:
	mov	ecx, DWORD PTR _updateItems$[ebp]
	call	?Size@?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::N7z::CUpdateItem>::Size
	cmp	DWORD PTR _i$76711[ebp], eax
	jae	SHORT $LN178@Update
; Line 1602
	mov	eax, DWORD PTR _i$76711[ebp]
	push	eax
	mov	ecx, DWORD PTR _updateItems$[ebp]
	call	??A?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QBEABUCUpdateItem@N7z@NArchive@@I@Z ; CObjectVector<NArchive::N7z::CUpdateItem>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _index$76718[ebp], ecx
; Line 1603
	cmp	DWORD PTR _index$76718[ebp], -1
	je	SHORT $LN177@Update
; Line 1604
	lea	ecx, DWORD PTR _fileIndexToUpdateIndexMap$[ebp]
	call	??B?$CObjArray@H@@QAEPAHXZ		; CObjArray<int>::operator int *
	mov	edx, DWORD PTR _index$76718[ebp]
	mov	ecx, DWORD PTR _i$76711[ebp]
	mov	DWORD PTR [eax+edx*4], ecx
$LN177@Update:
; Line 1605
	jmp	SHORT $LN179@Update
$LN178@Update:
; Line 1607
	mov	DWORD PTR _i$76711[ebp], 0
	jmp	SHORT $LN176@Update
$LN175@Update:
	mov	edx, DWORD PTR _i$76711[ebp]
	add	edx, 1
	mov	DWORD PTR _i$76711[ebp], edx
$LN176@Update:
	mov	eax, DWORD PTR _db$[ebp]
	mov	ecx, DWORD PTR _i$76711[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	$LN184@Update
; Line 1609
	mov	DWORD PTR _indexInFolder$76724[ebp], 0
; Line 1610
	mov	DWORD PTR _numCopyItems$76725[ebp], 0
; Line 1611
	mov	ecx, DWORD PTR _db$[ebp]
	add	ecx, 36					; 00000024H
	call	??B?$CObjArray@I@@QBEPBIXZ		; CObjArray<unsigned int>::operator unsigned int const *
	mov	edx, DWORD PTR _i$76711[ebp]
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _numUnpackStreams$76726[ebp], eax
; Line 1612
	mov	DWORD PTR _repackSize$76727[ebp], 0
	mov	DWORD PTR _repackSize$76727[ebp+4], 0
; Line 1614
	mov	ecx, DWORD PTR _db$[ebp]
	add	ecx, 280				; 00000118H
	call	??B?$CObjArray@I@@QBEPBIXZ		; CObjArray<unsigned int>::operator unsigned int const *
	mov	ecx, DWORD PTR _i$76711[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _fi$76728[ebp], edx
	jmp	SHORT $LN173@Update
$LN172@Update:
	mov	eax, DWORD PTR _fi$76728[ebp]
	add	eax, 1
	mov	DWORD PTR _fi$76728[ebp], eax
$LN173@Update:
	mov	ecx, DWORD PTR _indexInFolder$76724[ebp]
	cmp	ecx, DWORD PTR _numUnpackStreams$76726[ebp]
	jae	$LN171@Update
; Line 1616
	mov	edx, DWORD PTR _fi$76728[ebp]
	push	edx
	mov	ecx, DWORD PTR _db$[ebp]
	add	ecx, 88					; 00000058H
	call	??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEABUCFileItem@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CFileItem>::operator[]
	mov	DWORD PTR _file$76732[ebp], eax
; Line 1617
	mov	eax, DWORD PTR _file$76732[ebp]
	movzx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	je	SHORT $LN170@Update
; Line 1619
	mov	edx, DWORD PTR _indexInFolder$76724[ebp]
	add	edx, 1
	mov	DWORD PTR _indexInFolder$76724[ebp], edx
; Line 1620
	lea	ecx, DWORD PTR _fileIndexToUpdateIndexMap$[ebp]
	call	??B?$CObjArray@H@@QAEPAHXZ		; CObjArray<int>::operator int *
	mov	ecx, DWORD PTR _fi$76728[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _updateIndex$76734[ebp], edx
; Line 1621
	cmp	DWORD PTR _updateIndex$76734[ebp], 0
	jl	SHORT $LN170@Update
	mov	eax, DWORD PTR _updateIndex$76734[ebp]
	push	eax
	mov	ecx, DWORD PTR _updateItems$[ebp]
	call	??A?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QBEABUCUpdateItem@N7z@NArchive@@I@Z ; CObjectVector<NArchive::N7z::CUpdateItem>::operator[]
	movzx	ecx, BYTE PTR [eax+56]
	test	ecx, ecx
	jne	SHORT $LN170@Update
; Line 1623
	mov	edx, DWORD PTR _numCopyItems$76725[ebp]
	add	edx, 1
	mov	DWORD PTR _numCopyItems$76725[ebp], edx
; Line 1624
	mov	eax, DWORD PTR _file$76732[ebp]
	mov	ecx, DWORD PTR _repackSize$76727[ebp]
	add	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _repackSize$76727[ebp+4]
	adc	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _repackSize$76727[ebp], ecx
	mov	DWORD PTR _repackSize$76727[ebp+4], edx
$LN170@Update:
; Line 1627
	jmp	$LN172@Update
$LN171@Update:
; Line 1629
	cmp	DWORD PTR _numCopyItems$76725[ebp], 0
	jne	SHORT $LN168@Update
; Line 1630
	jmp	$LN175@Update
$LN168@Update:
; Line 1633
	mov	eax, DWORD PTR _i$76711[ebp]
	mov	DWORD PTR _rep$76737[ebp], eax
; Line 1634
	mov	ecx, DWORD PTR _numCopyItems$76725[ebp]
	mov	DWORD PTR _rep$76737[ebp+4], ecx
; Line 1635
	lea	ecx, DWORD PTR _f$76738[ebp]
	call	??0CFolderEx@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 5
; Line 1636
	lea	edx, DWORD PTR _f$76738[ebp]
	push	edx
	mov	eax, DWORD PTR _i$76711[ebp]
	push	eax
	mov	ecx, DWORD PTR _db$[ebp]
	call	?ParseFolderEx@CFolders@N7z@NArchive@@QBEXIAAUCFolderEx@23@@Z ; NArchive::N7z::CFolders::ParseFolderEx
; Line 1638
	lea	ecx, DWORD PTR _f$76738[ebp]
	call	?IsEncrypted@CFolder@N7z@NArchive@@QBE_NXZ ; NArchive::N7z::CFolder::IsEncrypted
	mov	BYTE PTR _isEncrypted$76739[ebp], al
; Line 1640
	lea	ecx, DWORD PTR _f$76738[ebp]
	push	ecx
	lea	edx, DWORD PTR _filters$[ebp]
	push	edx
	call	?Get_FilterGroup_for_Folder@N7z@NArchive@@YGIAAV?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@ABUCFolderEx@12@@Z ; NArchive::N7z::Get_FilterGroup_for_Folder
	mov	DWORD PTR _groupIndex$76740[ebp], eax
$LN167@Update:
; Line 1642
	lea	ecx, DWORD PTR _groups$[ebp]
	call	?Size@?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::N7z::CSolidGroup>::Size
	cmp	DWORD PTR _groupIndex$76740[ebp], eax
	jb	SHORT $LN166@Update
; Line 1643
	lea	ecx, DWORD PTR _groups$[ebp]
	call	?AddNew@?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAEAAUCSolidGroup@N7z@NArchive@@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::AddNew
	jmp	SHORT $LN167@Update
$LN166@Update:
; Line 1645
	mov	eax, DWORD PTR _rep$76737[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _rep$76737[ebp]
	push	ecx
	mov	edx, DWORD PTR _groupIndex$76740[ebp]
	push	edx
	lea	ecx, DWORD PTR _groups$[ebp]
	call	??A?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAEAAUCSolidGroup@N7z@NArchive@@I@Z ; CObjectVector<NArchive::N7z::CSolidGroup>::operator[]
	add	eax, 12					; 0000000cH
	mov	ecx, eax
	call	?Add@?$CRecordVector@UCFolderRepack@N7z@NArchive@@@@QAEIUCFolderRepack@N7z@NArchive@@@Z ; CRecordVector<NArchive::N7z::CFolderRepack>::Add
; Line 1647
	mov	eax, DWORD PTR _numCopyItems$76725[ebp]
	cmp	eax, DWORD PTR _numUnpackStreams$76726[ebp]
	jne	SHORT $LN165@Update
; Line 1648
	mov	ecx, DWORD PTR _i$76711[ebp]
	push	ecx
	mov	ecx, DWORD PTR _db$[ebp]
	call	?GetFolderFullPackSize@CDbEx@N7z@NArchive@@QBE_KI@Z ; NArchive::N7z::CDbEx::GetFolderFullPackSize
	add	eax, DWORD PTR _complexity$[ebp]
	adc	edx, DWORD PTR _complexity$[ebp+4]
	mov	DWORD PTR _complexity$[ebp], eax
	mov	DWORD PTR _complexity$[ebp+4], edx
; Line 1649
	jmp	SHORT $LN164@Update
$LN165@Update:
; Line 1651
	mov	BYTE PTR _thereAreRepacks$[ebp], 1
; Line 1652
	mov	edx, DWORD PTR _complexity$[ebp]
	add	edx, DWORD PTR _repackSize$76727[ebp]
	mov	eax, DWORD PTR _complexity$[ebp+4]
	adc	eax, DWORD PTR _repackSize$76727[ebp+4]
	mov	DWORD PTR _complexity$[ebp], edx
	mov	DWORD PTR _complexity$[ebp+4], eax
; Line 1653
	mov	ecx, DWORD PTR _inSizeForReduce2$[ebp+4]
	cmp	ecx, DWORD PTR _repackSize$76727[ebp+4]
	ja	SHORT $LN163@Update
	jb	SHORT $LN245@Update
	mov	edx, DWORD PTR _inSizeForReduce2$[ebp]
	cmp	edx, DWORD PTR _repackSize$76727[ebp]
	jae	SHORT $LN163@Update
$LN245@Update:
; Line 1654
	mov	eax, DWORD PTR _repackSize$76727[ebp]
	mov	DWORD PTR _inSizeForReduce2$[ebp], eax
	mov	ecx, DWORD PTR _repackSize$76727[ebp+4]
	mov	DWORD PTR _inSizeForReduce2$[ebp+4], ecx
$LN163@Update:
; Line 1655
	movzx	edx, BYTE PTR _isEncrypted$76739[ebp]
	test	edx, edx
	je	SHORT $LN164@Update
; Line 1656
	mov	BYTE PTR _needEncryptedRepack$[ebp], 1
$LN164@Update:
; Line 1658
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _f$76738[ebp]
	call	??1CFolderEx@N7z@NArchive@@QAE@XZ
	jmp	$LN175@Update
$LN184@Update:
; Line 1661
	mov	DWORD PTR _inSizeForReduce$[ebp], 0
	mov	DWORD PTR _inSizeForReduce$[ebp+4], 0
; Line 1663
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN161@Update
$LN160@Update:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN161@Update:
	mov	ecx, DWORD PTR _updateItems$[ebp]
	call	?Size@?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::N7z::CUpdateItem>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	$LN159@Update
; Line 1665
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _updateItems$[ebp]
	call	??A?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QBEABUCUpdateItem@N7z@NArchive@@I@Z ; CObjectVector<NArchive::N7z::CUpdateItem>::operator[]
	mov	DWORD PTR _ui$76753[ebp], eax
; Line 1666
	mov	edx, DWORD PTR _ui$76753[ebp]
	movzx	eax, BYTE PTR [edx+56]
	test	eax, eax
	je	$LN158@Update
; Line 1668
	mov	ecx, DWORD PTR _ui$76753[ebp]
	mov	edx, DWORD PTR _complexity$[ebp]
	add	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _complexity$[ebp+4]
	adc	eax, DWORD PTR [ecx+36]
	mov	DWORD PTR _complexity$[ebp], edx
	mov	DWORD PTR _complexity$[ebp+4], eax
; Line 1669
	cmp	DWORD PTR _numSolidFiles$[ebp], 1
	jne	SHORT $LN246@Update
	cmp	DWORD PTR _numSolidFiles$[ebp+4], 0
	je	SHORT $LN157@Update
$LN246@Update:
; Line 1670
	mov	ecx, DWORD PTR _ui$76753[ebp]
	mov	edx, DWORD PTR _inSizeForReduce$[ebp]
	add	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _inSizeForReduce$[ebp+4]
	adc	eax, DWORD PTR [ecx+36]
	mov	DWORD PTR _inSizeForReduce$[ebp], edx
	mov	DWORD PTR _inSizeForReduce$[ebp+4], eax
	jmp	SHORT $LN158@Update
$LN157@Update:
; Line 1671
	mov	ecx, DWORD PTR _ui$76753[ebp]
	mov	DWORD PTR tv2219[ebp], ecx
	mov	edx, DWORD PTR tv2219[ebp]
	mov	eax, DWORD PTR _inSizeForReduce$[ebp+4]
	cmp	eax, DWORD PTR [edx+36]
	ja	SHORT $LN158@Update
	jb	SHORT $LN247@Update
	mov	ecx, DWORD PTR tv2219[ebp]
	mov	edx, DWORD PTR _inSizeForReduce$[ebp]
	cmp	edx, DWORD PTR [ecx+32]
	jae	SHORT $LN158@Update
$LN247@Update:
; Line 1672
	mov	eax, DWORD PTR _ui$76753[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _inSizeForReduce$[ebp], ecx
	mov	edx, DWORD PTR [eax+36]
	mov	DWORD PTR _inSizeForReduce$[ebp+4], edx
$LN158@Update:
; Line 1674
	jmp	$LN160@Update
$LN159@Update:
; Line 1676
	mov	eax, DWORD PTR _inSizeForReduce$[ebp+4]
	cmp	eax, DWORD PTR _inSizeForReduce2$[ebp+4]
	ja	SHORT $LN154@Update
	jb	SHORT $LN248@Update
	mov	ecx, DWORD PTR _inSizeForReduce$[ebp]
	cmp	ecx, DWORD PTR _inSizeForReduce2$[ebp]
	jae	SHORT $LN154@Update
$LN248@Update:
; Line 1677
	mov	edx, DWORD PTR _inSizeForReduce2$[ebp]
	mov	DWORD PTR _inSizeForReduce$[ebp], edx
	mov	eax, DWORD PTR _inSizeForReduce2$[ebp+4]
	mov	DWORD PTR _inSizeForReduce$[ebp+4], eax
$LN154@Update:
; Line 1679
	mov	esi, esp
	mov	ecx, DWORD PTR _complexity$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _complexity$[ebp]
	push	edx
	mov	eax, DWORD PTR _updateCallback$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _updateCallback$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$76759[ebp], eax
	cmp	DWORD PTR ___result__$76759[ebp], 0
	je	SHORT $LN153@Update
	mov	ecx, DWORD PTR ___result__$76759[ebp]
	mov	DWORD PTR $T79376[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _groups$[ebp]
	call	??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _filters$[ebp]
	call	??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _fileIndexToUpdateIndexMap$[ebp]
	call	??1?$CObjArray@H@@QAE@XZ		; CObjArray<int>::~CObjArray<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extractCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	eax, DWORD PTR $T79376[ebp]
	jmp	$LN188@Update
$LN153@Update:
; Line 1681
	push	56					; 00000038H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T79378[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	cmp	DWORD PTR $T79378[ebp], 0
	je	SHORT $LN192@Update
	mov	ecx, DWORD PTR $T79378[ebp]
	call	??0CLocalProgress@@QAE@XZ		; CLocalProgress::CLocalProgress
	mov	DWORD PTR tv340[ebp], eax
	jmp	SHORT $LN193@Update
$LN192@Update:
	mov	DWORD PTR tv340[ebp], 0
$LN193@Update:
	mov	edx, DWORD PTR tv340[ebp]
	mov	DWORD PTR $T79377[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	eax, DWORD PTR $T79377[ebp]
	mov	DWORD PTR _lps$[ebp], eax
; Line 1682
	mov	ecx, DWORD PTR _lps$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 7
; Line 1683
	push	1
	mov	edx, DWORD PTR _updateCallback$[ebp]
	push	edx
	mov	ecx, DWORD PTR _lps$[ebp]
	call	?Init@CLocalProgress@@QAEXPAUIProgress@@_N@Z ; CLocalProgress::Init
; Line 1687
	lea	ecx, DWORD PTR _sb$[ebp]
	call	??0CStreamBinder@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 8
; Line 1688
	mov	eax, DWORD PTR _options$[ebp]
	movzx	ecx, BYTE PTR [eax+42]
	test	ecx, ecx
	je	$LN152@Update
; Line 1690
	lea	ecx, DWORD PTR _sb$[ebp]
	call	?CreateEvents@CStreamBinder@@QAEIXZ	; CStreamBinder::CreateEvents
	mov	DWORD PTR ___result__$76771[ebp], eax
	cmp	DWORD PTR ___result__$76771[ebp], 0
	je	SHORT $LN152@Update
	mov	edx, DWORD PTR ___result__$76771[ebp]
	mov	DWORD PTR $T79381[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _sb$[ebp]
	call	??1CStreamBinder@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _groups$[ebp]
	call	??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _filters$[ebp]
	call	??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _fileIndexToUpdateIndexMap$[ebp]
	call	??1?$CObjArray@H@@QAE@XZ		; CObjArray<int>::~CObjArray<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extractCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	eax, DWORD PTR $T79381[ebp]
	jmp	$LN188@Update
$LN152@Update:
; Line 1695
	mov	eax, DWORD PTR _options$[ebp]
	movzx	ecx, BYTE PTR [eax+42]
	push	ecx
	lea	ecx, DWORD PTR _threadDecoder$[ebp]
	call	??0CThreadDecoder@N7z@NArchive@@QAE@_N@Z ; NArchive::N7z::CThreadDecoder::CThreadDecoder
	mov	BYTE PTR __$EHRec$[ebp+8], 9
; Line 1698
	mov	edx, DWORD PTR _options$[ebp]
	movzx	eax, BYTE PTR [edx+42]
	test	eax, eax
	je	$LN150@Update
	movzx	ecx, BYTE PTR _thereAreRepacks$[ebp]
	test	ecx, ecx
	je	$LN150@Update
; Line 1703
	lea	ecx, DWORD PTR _threadDecoder$[ebp]
	call	?Create@CVirtThread@@QAEIXZ		; CVirtThread::Create
	mov	DWORD PTR ___result__$76776[ebp], eax
	cmp	DWORD PTR ___result__$76776[ebp], 0
	je	$LN150@Update
	mov	edx, DWORD PTR ___result__$76776[ebp]
	mov	DWORD PTR $T79382[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _threadDecoder$[ebp]
	call	??1CThreadDecoder@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CThreadDecoder::~CThreadDecoder
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _sb$[ebp]
	call	??1CStreamBinder@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _groups$[ebp]
	call	??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _filters$[ebp]
	call	??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _fileIndexToUpdateIndexMap$[ebp]
	call	??1?$CObjArray@H@@QAE@XZ		; CObjArray<int>::~CObjArray<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extractCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	eax, DWORD PTR $T79382[ebp]
	jmp	$LN188@Update
$LN150@Update:
; Line 1708
	lea	ecx, DWORD PTR _analysis$76779[ebp]
	call	??0CAnalysis@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CAnalysis::CAnalysis
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
; Line 1709
	mov	eax, DWORD PTR _options$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN148@Update
; Line 1711
	mov	BYTE PTR _analysis$76779[ebp+12], 0
; Line 1712
	mov	BYTE PTR _analysis$76779[ebp+13], 0
; Line 1713
	mov	BYTE PTR _analysis$76779[ebp+14], 0
; Line 1715
	jmp	SHORT $LN147@Update
$LN148@Update:
; Line 1717
	lea	ecx, DWORD PTR _opCallback$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _analysis$76779[ebp]
	call	??4?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAEPAUIArchiveUpdateCallbackFile@@ABV0@@Z ; CMyComPtr<IArchiveUpdateCallbackFile>::operator=
; Line 1718
	mov	edx, DWORD PTR _options$[ebp]
	cmp	DWORD PTR [edx+12], 0
	jle	SHORT $LN147@Update
; Line 1720
	mov	BYTE PTR _analysis$76779[ebp+12], 1
; Line 1721
	mov	eax, DWORD PTR _options$[ebp]
	cmp	DWORD PTR [eax+12], 7
	jl	SHORT $LN147@Update
; Line 1723
	mov	BYTE PTR _analysis$76779[ebp+13], 1
; Line 1724
	mov	ecx, DWORD PTR _options$[ebp]
	cmp	DWORD PTR [ecx+12], 9
	jl	SHORT $LN147@Update
; Line 1725
	mov	BYTE PTR _analysis$76779[ebp+14], 1
$LN147@Update:
; Line 1732
	mov	edx, DWORD PTR _options$[ebp]
	mov	al, BYTE PTR [edx+8]
	mov	BYTE PTR _useFilters$76785[ebp], al
; Line 1733
	mov	ecx, DWORD PTR _options$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _method$76786[ebp], edx
; Line 1735
	movzx	eax, BYTE PTR _useFilters$76785[ebp]
	test	eax, eax
	je	SHORT $LN143@Update
; Line 1736
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN142@Update
$LN141@Update:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN142@Update:
	mov	ecx, DWORD PTR _method$76786[ebp]
	call	?Size@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::N7z::CMethodFull>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN143@Update
; Line 1737
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _method$76786[ebp]
	call	??A?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBEABUCMethodFull@N7z@NArchive@@I@Z ; CObjectVector<NArchive::N7z::CMethodFull>::operator[]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR [eax+16]
	push	edx
	call	?IsFilterMethod@N7z@NArchive@@YG_N_K@Z	; NArchive::N7z::IsFilterMethod
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN139@Update
; Line 1739
	mov	BYTE PTR _useFilters$76785[ebp], 0
; Line 1740
	jmp	SHORT $LN143@Update
$LN139@Update:
; Line 1741
	jmp	SHORT $LN141@Update
$LN143@Update:
; Line 1748
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN138@Update
$LN137@Update:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN138@Update:
	mov	ecx, DWORD PTR _updateItems$[ebp]
	call	?Size@?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::N7z::CUpdateItem>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	$LN136@Update
; Line 1750
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _updateItems$[ebp]
	call	??A?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QBEABUCUpdateItem@N7z@NArchive@@I@Z ; CObjectVector<NArchive::N7z::CUpdateItem>::operator[]
	mov	DWORD PTR _ui$76795[ebp], eax
; Line 1751
	mov	eax, DWORD PTR _ui$76795[ebp]
	movzx	ecx, BYTE PTR [eax+56]
	test	ecx, ecx
	je	SHORT $LN134@Update
	mov	ecx, DWORD PTR _ui$76795[ebp]
	call	?HasStream@CUpdateItem@N7z@NArchive@@QBE_NXZ ; NArchive::N7z::CUpdateItem::HasStream
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN135@Update
$LN134@Update:
; Line 1752
	jmp	SHORT $LN137@Update
$LN135@Update:
; Line 1754
	lea	ecx, DWORD PTR _fm$76798[ebp]
	call	??0CFilterMode2@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CFilterMode2::CFilterMode2
; Line 1755
	movzx	eax, BYTE PTR _useFilters$76785[ebp]
	test	eax, eax
	je	$LN133@Update
; Line 1757
	lea	ecx, DWORD PTR _fm$76798[ebp]
	push	ecx
	mov	edx, DWORD PTR _ui$76795[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	lea	ecx, DWORD PTR _analysis$76779[ebp]
	call	?GetFilterGroup@CAnalysis@N7z@NArchive@@QAEJIABUCUpdateItem@23@AAUCFilterMode@23@@Z ; NArchive::N7z::CAnalysis::GetFilterGroup
	mov	DWORD PTR ___result__$76800[ebp], eax
	cmp	DWORD PTR ___result__$76800[ebp], 0
	je	$LN133@Update
	mov	ecx, DWORD PTR ___result__$76800[ebp]
	mov	DWORD PTR $T79383[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _analysis$76779[ebp]
	call	??1CAnalysis@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _threadDecoder$[ebp]
	call	??1CThreadDecoder@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CThreadDecoder::~CThreadDecoder
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _sb$[ebp]
	call	??1CStreamBinder@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _groups$[ebp]
	call	??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _filters$[ebp]
	call	??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _fileIndexToUpdateIndexMap$[ebp]
	call	??1?$CObjArray@H@@QAE@XZ		; CObjArray<int>::~CObjArray<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extractCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	eax, DWORD PTR $T79383[ebp]
	jmp	$LN188@Update
$LN133@Update:
; Line 1759
	mov	edx, DWORD PTR _method$76786[ebp]
	mov	al, BYTE PTR [edx+33]
	mov	BYTE PTR _fm$76798[ebp+8], al
; Line 1761
	lea	ecx, DWORD PTR _fm$76798[ebp]
	push	ecx
	lea	edx, DWORD PTR _filters$[ebp]
	push	edx
	call	?GetGroup@N7z@NArchive@@YGIAAV?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@ABUCFilterMode2@12@@Z ; NArchive::N7z::GetGroup
	mov	DWORD PTR _groupIndex$76803[ebp], eax
$LN131@Update:
; Line 1762
	lea	ecx, DWORD PTR _groups$[ebp]
	call	?Size@?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::N7z::CSolidGroup>::Size
	cmp	DWORD PTR _groupIndex$76803[ebp], eax
	jb	SHORT $LN130@Update
; Line 1763
	lea	ecx, DWORD PTR _groups$[ebp]
	call	?AddNew@?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAEAAUCSolidGroup@N7z@NArchive@@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::AddNew
	jmp	SHORT $LN131@Update
$LN130@Update:
; Line 1764
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _groupIndex$76803[ebp]
	push	ecx
	lea	ecx, DWORD PTR _groups$[ebp]
	call	??A?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAEAAUCSolidGroup@N7z@NArchive@@I@Z ; CObjectVector<NArchive::N7z::CSolidGroup>::operator[]
	mov	ecx, eax
	call	?Add@?$CRecordVector@I@@QAEII@Z		; CRecordVector<unsigned int>::Add
; Line 1765
	jmp	$LN137@Update
$LN136@Update:
; Line 1766
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _analysis$76779[ebp]
	call	??1CAnalysis@N7z@NArchive@@QAE@XZ
; Line 1771
	mov	DWORD PTR _getPasswordSpec$[ebp], 0
; Line 1772
	lea	ecx, DWORD PTR _getTextPassword$[ebp]
	call	??0?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::CMyComPtr<ICryptoGetTextPassword>
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
; Line 1773
	movzx	edx, BYTE PTR _needEncryptedRepack$[ebp]
	test	edx, edx
	je	$LN129@Update
; Line 1775
	push	20					; 00000014H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T79385[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	cmp	DWORD PTR $T79385[ebp], 0
	je	SHORT $LN194@Update
	mov	ecx, DWORD PTR $T79385[ebp]
	call	??0CCryptoGetTextPassword@N7z@NArchive@@QAE@XZ
	mov	DWORD PTR tv493[ebp], eax
	jmp	SHORT $LN195@Update
$LN194@Update:
	mov	DWORD PTR tv493[ebp], 0
$LN195@Update:
	mov	eax, DWORD PTR tv493[ebp]
	mov	DWORD PTR $T79384[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	mov	ecx, DWORD PTR $T79384[ebp]
	mov	DWORD PTR _getPasswordSpec$[ebp], ecx
; Line 1776
	mov	edx, DWORD PTR _getPasswordSpec$[ebp]
	push	edx
	lea	ecx, DWORD PTR _getTextPassword$[ebp]
	call	??4?$CMyComPtr@UICryptoGetTextPassword@@@@QAEPAUICryptoGetTextPassword@@PAU1@@Z ; CMyComPtr<ICryptoGetTextPassword>::operator=
; Line 1779
	mov	eax, DWORD PTR _getPasswordSpec$[ebp]
	push	eax
	lea	ecx, DWORD PTR _threadDecoder$[ebp+152]
	call	??4?$CMyComPtr@UICryptoGetTextPassword@@@@QAEPAUICryptoGetTextPassword@@PAU1@@Z ; CMyComPtr<ICryptoGetTextPassword>::operator=
; Line 1782
	mov	ecx, DWORD PTR _options$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx+33]
	test	eax, eax
	je	SHORT $LN128@Update
; Line 1783
	mov	ecx, DWORD PTR _options$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 36					; 00000024H
	push	edx
	mov	ecx, DWORD PTR _getPasswordSpec$[ebp]
	add	ecx, 8
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
; Line 1784
	jmp	$LN129@Update
$LN128@Update:
; Line 1786
	cmp	DWORD PTR _getDecoderPassword$[ebp], 0
	jne	$LN126@Update
; Line 1787
	mov	DWORD PTR $T79388[ebp], -2147467263	; 80004001H
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _getTextPassword$[ebp]
	call	??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _threadDecoder$[ebp]
	call	??1CThreadDecoder@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CThreadDecoder::~CThreadDecoder
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _sb$[ebp]
	call	??1CStreamBinder@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _groups$[ebp]
	call	??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _filters$[ebp]
	call	??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _fileIndexToUpdateIndexMap$[ebp]
	call	??1?$CObjArray@H@@QAE@XZ		; CObjArray<int>::~CObjArray<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extractCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	eax, DWORD PTR $T79388[ebp]
	jmp	$LN188@Update
$LN126@Update:
; Line 1788
	lea	ecx, DWORD PTR _password$76820[ebp]
	call	??0CMyComBSTR@@QAE@XZ			; CMyComBSTR::CMyComBSTR
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH
; Line 1789
	lea	ecx, DWORD PTR _password$76820[ebp]
	call	??ICMyComBSTR@@QAEPAPA_WXZ		; CMyComBSTR::operator&
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _getDecoderPassword$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _getDecoderPassword$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$76821[ebp], eax
	cmp	DWORD PTR ___result__$76821[ebp], 0
	je	$LN125@Update
	mov	ecx, DWORD PTR ___result__$76821[ebp]
	mov	DWORD PTR $T79389[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _password$76820[ebp]
	call	??1CMyComBSTR@@QAE@XZ			; CMyComBSTR::~CMyComBSTR
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _getTextPassword$[ebp]
	call	??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _threadDecoder$[ebp]
	call	??1CThreadDecoder@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CThreadDecoder::~CThreadDecoder
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _sb$[ebp]
	call	??1CStreamBinder@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _groups$[ebp]
	call	??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _filters$[ebp]
	call	??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _fileIndexToUpdateIndexMap$[ebp]
	call	??1?$CObjArray@H@@QAE@XZ		; CObjArray<int>::~CObjArray<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extractCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	eax, DWORD PTR $T79389[ebp]
	jmp	$LN188@Update
$LN125@Update:
; Line 1790
	lea	ecx, DWORD PTR _password$76820[ebp]
	call	??BCMyComBSTR@@QBEPB_WXZ		; CMyComBSTR::operator wchar_t const *
	test	eax, eax
	je	SHORT $LN124@Update
; Line 1791
	lea	ecx, DWORD PTR _password$76820[ebp]
	call	??BCMyComBSTR@@QBEPB_WXZ		; CMyComBSTR::operator wchar_t const *
	push	eax
	mov	ecx, DWORD PTR _getPasswordSpec$[ebp]
	add	ecx, 8
	call	??4UString@@QAEAAV0@PB_W@Z		; UString::operator=
$LN124@Update:
; Line 1792
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _password$76820[ebp]
	call	??1CMyComBSTR@@QAE@XZ			; CMyComBSTR::~CMyComBSTR
$LN129@Update:
; Line 1800
	push	0
	mov	edx, DWORD PTR _seqOutStream$[ebp]
	push	edx
	mov	ecx, DWORD PTR _archive$[ebp]
	call	?Create@COutArchive@N7z@NArchive@@QAEJPAUISequentialOutStream@@_N@Z ; NArchive::N7z::COutArchive::Create
	mov	DWORD PTR ___result__$76825[ebp], eax
	cmp	DWORD PTR ___result__$76825[ebp], 0
	je	$LN123@Update
	mov	eax, DWORD PTR ___result__$76825[ebp]
	mov	DWORD PTR $T79390[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _getTextPassword$[ebp]
	call	??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _threadDecoder$[ebp]
	call	??1CThreadDecoder@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CThreadDecoder::~CThreadDecoder
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _sb$[ebp]
	call	??1CStreamBinder@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _groups$[ebp]
	call	??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _filters$[ebp]
	call	??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _fileIndexToUpdateIndexMap$[ebp]
	call	??1?$CObjArray@H@@QAE@XZ		; CObjArray<int>::~CObjArray<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extractCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	eax, DWORD PTR $T79390[ebp]
	jmp	$LN188@Update
$LN123@Update:
; Line 1801
	mov	ecx, DWORD PTR _archive$[ebp]
	call	?SkipPrefixArchiveHeader@COutArchive@N7z@NArchive@@QAEJXZ ; NArchive::N7z::COutArchive::SkipPrefixArchiveHeader
	mov	DWORD PTR ___result__$76828[ebp], eax
	cmp	DWORD PTR ___result__$76828[ebp], 0
	je	$LN122@Update
	mov	ecx, DWORD PTR ___result__$76828[ebp]
	mov	DWORD PTR $T79391[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _getTextPassword$[ebp]
	call	??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _threadDecoder$[ebp]
	call	??1CThreadDecoder@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CThreadDecoder::~CThreadDecoder
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _sb$[ebp]
	call	??1CStreamBinder@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _groups$[ebp]
	call	??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _filters$[ebp]
	call	??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _fileIndexToUpdateIndexMap$[ebp]
	call	??1?$CObjArray@H@@QAE@XZ		; CObjArray<int>::~CObjArray<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extractCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	eax, DWORD PTR $T79391[ebp]
	jmp	$LN188@Update
$LN122@Update:
; Line 1850
	lea	ecx, DWORD PTR _emptyRefs$76831[ebp]
	call	??0?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 14		; 0000000eH
; Line 1852
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN121@Update
$LN120@Update:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN121@Update:
	mov	ecx, DWORD PTR _updateItems$[ebp]
	call	?Size@?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::N7z::CUpdateItem>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN119@Update
; Line 1854
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _updateItems$[ebp]
	call	??A?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QBEABUCUpdateItem@N7z@NArchive@@I@Z ; CObjectVector<NArchive::N7z::CUpdateItem>::operator[]
	mov	DWORD PTR _ui$76835[ebp], eax
; Line 1855
	mov	ecx, DWORD PTR _ui$76835[ebp]
	movzx	edx, BYTE PTR [ecx+56]
	test	edx, edx
	je	SHORT $LN118@Update
; Line 1857
	mov	ecx, DWORD PTR _ui$76835[ebp]
	call	?HasStream@CUpdateItem@N7z@NArchive@@QBE_NXZ ; NArchive::N7z::CUpdateItem::HasStream
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN117@Update
; Line 1858
	jmp	SHORT $LN120@Update
$LN117@Update:
; Line 1859
	jmp	SHORT $LN116@Update
$LN118@Update:
; Line 1860
	mov	ecx, DWORD PTR _ui$76835[ebp]
	cmp	DWORD PTR [ecx], -1
	je	SHORT $LN116@Update
	mov	edx, DWORD PTR _ui$76835[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _db$[ebp]
	add	ecx, 88					; 00000058H
	call	??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEABUCFileItem@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CFileItem>::operator[]
	movzx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	je	SHORT $LN116@Update
; Line 1861
	jmp	$LN120@Update
$LN116@Update:
; Line 1866
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	lea	ecx, DWORD PTR _emptyRefs$76831[ebp]
	call	?Add@?$CRecordVector@I@@QAEII@Z		; CRecordVector<unsigned int>::Add
; Line 1867
	jmp	$LN120@Update
$LN119@Update:
; Line 1869
	mov	eax, DWORD PTR _updateItems$[ebp]
	push	eax
	push	OFFSET ?CompareEmptyItems@N7z@NArchive@@YGHPBI0PAX@Z ; NArchive::N7z::CompareEmptyItems
	lea	ecx, DWORD PTR _emptyRefs$76831[ebp]
	call	?Sort@?$CRecordVector@I@@QAEXP6GHPBI0PAX@Z1@Z ; CRecordVector<unsigned int>::Sort
; Line 1871
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN114@Update
$LN113@Update:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN114@Update:
	lea	ecx, DWORD PTR _emptyRefs$76831[ebp]
	call	?Size@?$CRecordVector@I@@QBEIXZ		; CRecordVector<unsigned int>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	$LN112@Update
; Line 1873
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	lea	ecx, DWORD PTR _emptyRefs$76831[ebp]
	call	??A?$CRecordVector@I@@QAEAAII@Z		; CRecordVector<unsigned int>::operator[]
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _updateItems$[ebp]
	call	??A?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QBEABUCUpdateItem@N7z@NArchive@@I@Z ; CObjectVector<NArchive::N7z::CUpdateItem>::operator[]
	mov	DWORD PTR _ui$76844[ebp], eax
; Line 1874
	lea	ecx, DWORD PTR _file$76845[ebp]
	call	??0CFileItem@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CFileItem::CFileItem
; Line 1876
	lea	ecx, DWORD PTR _name$76847[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 15		; 0000000fH
; Line 1877
	mov	ecx, DWORD PTR _ui$76844[ebp]
	movzx	edx, BYTE PTR [ecx+57]
	test	edx, edx
	je	SHORT $LN111@Update
; Line 1879
	lea	eax, DWORD PTR _file2$76846[ebp]
	push	eax
	lea	ecx, DWORD PTR _file$76845[ebp]
	push	ecx
	mov	edx, DWORD PTR _ui$76844[ebp]
	push	edx
	call	?FromUpdateItemToFileItem@N7z@NArchive@@YGXABUCUpdateItem@12@AAUCFileItem@12@AAUCFileItem2@12@@Z ; NArchive::N7z::FromUpdateItemToFileItem
; Line 1880
	mov	eax, DWORD PTR _ui$76844[ebp]
	add	eax, 40					; 00000028H
	push	eax
	lea	ecx, DWORD PTR _name$76847[ebp]
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
; Line 1882
	jmp	SHORT $LN110@Update
$LN111@Update:
; Line 1884
	lea	ecx, DWORD PTR _file2$76846[ebp]
	push	ecx
	lea	edx, DWORD PTR _file$76845[ebp]
	push	edx
	mov	eax, DWORD PTR _ui$76844[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _db$[ebp]
	push	edx
	call	?GetFile@N7z@NArchive@@YGXABUCDatabase@12@IAAUCFileItem@12@AAUCFileItem2@12@@Z ; NArchive::N7z::GetFile
; Line 1885
	lea	eax, DWORD PTR _name$76847[ebp]
	push	eax
	mov	ecx, DWORD PTR _ui$76844[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _db$[ebp]
	call	?GetPath@CDatabase@N7z@NArchive@@QBEXIAAVUString@@@Z ; NArchive::N7z::CDatabase::GetPath
$LN110@Update:
; Line 1893
	lea	eax, DWORD PTR _name$76847[ebp]
	push	eax
	lea	ecx, DWORD PTR _file2$76846[ebp]
	push	ecx
	lea	edx, DWORD PTR _file$76845[ebp]
	push	edx
	mov	ecx, DWORD PTR _newDatabase$[ebp]
	call	?AddFile@CArchiveDatabaseOut@N7z@NArchive@@QAEXABUCFileItem@23@ABUCFileItem2@23@ABVUString@@@Z ; NArchive::N7z::CArchiveDatabaseOut::AddFile
; Line 1894
	mov	BYTE PTR __$EHRec$[ebp+8], 14		; 0000000eH
	lea	ecx, DWORD PTR _name$76847[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	jmp	$LN113@Update
$LN112@Update:
; Line 1895
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _emptyRefs$76831[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
; Line 1897
	mov	eax, DWORD PTR _lps$[ebp]
	mov	DWORD PTR [eax+24], 0
	mov	DWORD PTR [eax+28], 0
; Line 1902
	mov	DWORD PTR _i$76850[ebp], 0
	jmp	SHORT $LN109@Update
$LN108@Update:
	mov	ecx, DWORD PTR _i$76850[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$76850[ebp], ecx
$LN109@Update:
	lea	ecx, DWORD PTR _filters$[ebp]
	call	?Size@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CFilterMode2>::Size
	cmp	DWORD PTR _i$76850[ebp], eax
	jae	SHORT $LN107@Update
; Line 1904
	mov	edx, DWORD PTR _i$76850[ebp]
	push	edx
	lea	ecx, DWORD PTR _filters$[ebp]
	call	??A?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAEAAUCFilterMode2@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CFilterMode2>::operator[]
	mov	ecx, DWORD PTR _i$76850[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 1905
	jmp	SHORT $LN108@Update
$LN107@Update:
; Line 1906
	lea	ecx, DWORD PTR _filters$[ebp]
	call	?Sort2@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAEXXZ ; CRecordVector<NArchive::N7z::CFilterMode2>::Sort2
; Line 1909
	mov	DWORD PTR _groupIndex$76854[ebp], 0
	jmp	SHORT $LN106@Update
$LN105@Update:
	mov	edx, DWORD PTR _groupIndex$76854[ebp]
	add	edx, 1
	mov	DWORD PTR _groupIndex$76854[ebp], edx
$LN106@Update:
	lea	ecx, DWORD PTR _filters$[ebp]
	call	?Size@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CFilterMode2>::Size
	cmp	DWORD PTR _groupIndex$76854[ebp], eax
	jae	$LN104@Update
; Line 1911
	mov	eax, DWORD PTR _groupIndex$76854[ebp]
	push	eax
	lea	ecx, DWORD PTR _filters$[ebp]
	call	??A?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAEAAUCFilterMode2@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CFilterMode2>::operator[]
	mov	DWORD PTR _filterMode$76858[ebp], eax
; Line 1913
	mov	ecx, DWORD PTR _options$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	lea	ecx, DWORD PTR _method$76859[ebp]
	call	??0CCompressionMethodMode@N7z@NArchive@@QAE@ABU012@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 16		; 00000010H
; Line 1920
	mov	eax, DWORD PTR _options$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	test	ecx, ecx
	je	SHORT $LN196@Update
	mov	edx, DWORD PTR _options$[ebp]
	movzx	eax, BYTE PTR [edx+42]
	test	eax, eax
	je	SHORT $LN196@Update
	mov	BYTE PTR tv644[ebp], 1
	jmp	SHORT $LN197@Update
$LN196@Update:
	mov	BYTE PTR tv644[ebp], 0
$LN197@Update:
	movzx	ecx, BYTE PTR tv644[ebp]
	push	ecx
	mov	edx, DWORD PTR _filterMode$76858[ebp]
	push	edx
	lea	eax, DWORD PTR _method$76859[ebp]
	push	eax
	call	?MakeExeMethod@N7z@NArchive@@YGJAAUCCompressionMethodMode@12@ABUCFilterMode@12@_N@Z ; NArchive::N7z::MakeExeMethod
	mov	DWORD PTR _res$76860[ebp], eax
; Line 1922
	mov	ecx, DWORD PTR _res$76860[ebp]
	mov	DWORD PTR ___result__$76861[ebp], ecx
	cmp	DWORD PTR ___result__$76861[ebp], 0
	je	$LN103@Update
	mov	edx, DWORD PTR ___result__$76861[ebp]
	mov	DWORD PTR $T79394[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _method$76859[ebp]
	call	??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _getTextPassword$[ebp]
	call	??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _threadDecoder$[ebp]
	call	??1CThreadDecoder@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CThreadDecoder::~CThreadDecoder
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _sb$[ebp]
	call	??1CStreamBinder@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _groups$[ebp]
	call	??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _filters$[ebp]
	call	??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _fileIndexToUpdateIndexMap$[ebp]
	call	??1?$CObjArray@H@@QAE@XZ		; CObjArray<int>::~CObjArray<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extractCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	eax, DWORD PTR $T79394[ebp]
	jmp	$LN188@Update
$LN103@Update:
; Line 1924
	mov	eax, DWORD PTR _filterMode$76858[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	test	ecx, ecx
	je	SHORT $LN102@Update
; Line 1926
	movzx	edx, BYTE PTR _method$76859[ebp+33]
	test	edx, edx
	jne	SHORT $LN101@Update
; Line 1929
	cmp	DWORD PTR _getPasswordSpec$[ebp], 0
	je	SHORT $LN100@Update
; Line 1930
	mov	eax, DWORD PTR _getPasswordSpec$[ebp]
	add	eax, 8
	push	eax
	lea	ecx, DWORD PTR _method$76859[ebp+36]
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
$LN100@Update:
; Line 1932
	mov	BYTE PTR _method$76859[ebp+33], 1
$LN101@Update:
; Line 1935
	jmp	SHORT $LN99@Update
$LN102@Update:
; Line 1937
	mov	BYTE PTR _method$76859[ebp+33], 0
; Line 1938
	lea	ecx, DWORD PTR _method$76859[ebp+36]
	call	?Empty@UString@@QAEXXZ			; UString::Empty
$LN99@Update:
; Line 1941
	lea	ecx, DWORD PTR _method$76859[ebp]
	push	ecx
	lea	ecx, DWORD PTR _encoder$76868[ebp]
	call	??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z ; NArchive::N7z::CEncoder::CEncoder
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
; Line 1945
	mov	edx, DWORD PTR _filterMode$76858[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	lea	ecx, DWORD PTR _groups$[ebp]
	call	??A?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAEAAUCSolidGroup@N7z@NArchive@@I@Z ; CObjectVector<NArchive::N7z::CSolidGroup>::operator[]
	mov	DWORD PTR _group$76869[ebp], eax
; Line 1947
	mov	DWORD PTR _folderRefIndex$76870[ebp], 0
	jmp	SHORT $LN98@Update
$LN97@Update:
	mov	ecx, DWORD PTR _folderRefIndex$76870[ebp]
	add	ecx, 1
	mov	DWORD PTR _folderRefIndex$76870[ebp], ecx
$LN98@Update:
	mov	ecx, DWORD PTR _group$76869[ebp]
	add	ecx, 12					; 0000000cH
	call	?Size@?$CRecordVector@UCFolderRepack@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CFolderRepack>::Size
	cmp	DWORD PTR _folderRefIndex$76870[ebp], eax
	jae	$LN96@Update
; Line 1949
	mov	edx, DWORD PTR _folderRefIndex$76870[ebp]
	push	edx
	mov	ecx, DWORD PTR _group$76869[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$CRecordVector@UCFolderRepack@N7z@NArchive@@@@QBEABUCFolderRepack@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CFolderRepack>::operator[]
	mov	DWORD PTR _rep$76874[ebp], eax
; Line 1951
	mov	eax, DWORD PTR _rep$76874[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _folderIndex$76875[ebp], ecx
; Line 1953
	mov	ecx, DWORD PTR _db$[ebp]
	add	ecx, 36					; 00000024H
	call	??B?$CObjArray@I@@QBEPBIXZ		; CObjArray<unsigned int>::operator unsigned int const *
	mov	edx, DWORD PTR _folderIndex$76875[ebp]
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _numUnpackStreams$76876[ebp], eax
; Line 1955
	mov	ecx, DWORD PTR _rep$76874[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR _numUnpackStreams$76876[ebp]
	jne	$LN95@Update
; Line 1957
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??B?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator IArchiveUpdateCallbackFile *
	test	eax, eax
	je	$LN94@Update
; Line 1961
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??C?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator->
	mov	DWORD PTR tv729[ebp], eax
	mov	esi, esp
	push	3
	mov	eax, DWORD PTR _folderIndex$76875[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR tv729[ebp]
	push	ecx
	mov	edx, DWORD PTR tv729[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$76879[ebp], eax
	cmp	DWORD PTR ___result__$76879[ebp], 0
	je	$LN93@Update
	mov	edx, DWORD PTR ___result__$76879[ebp]
	mov	DWORD PTR $T79395[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 16		; 00000010H
	lea	ecx, DWORD PTR _encoder$76868[ebp]
	call	??1CEncoder@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CEncoder::~CEncoder
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _method$76859[ebp]
	call	??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _getTextPassword$[ebp]
	call	??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _threadDecoder$[ebp]
	call	??1CThreadDecoder@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CThreadDecoder::~CThreadDecoder
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _sb$[ebp]
	call	??1CStreamBinder@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _groups$[ebp]
	call	??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _filters$[ebp]
	call	??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _fileIndexToUpdateIndexMap$[ebp]
	call	??1?$CObjArray@H@@QAE@XZ		; CObjArray<int>::~CObjArray<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extractCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	eax, DWORD PTR $T79395[ebp]
	jmp	$LN188@Update
$LN93@Update:
; Line 1965
	mov	DWORD PTR _indexInFolder$76883[ebp], 0
; Line 1966
	mov	ecx, DWORD PTR _db$[ebp]
	add	ecx, 280				; 00000118H
	call	??B?$CObjArray@I@@QBEPBIXZ		; CObjArray<unsigned int>::operator unsigned int const *
	mov	ecx, DWORD PTR _folderIndex$76875[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _fi$76884[ebp], edx
	jmp	SHORT $LN92@Update
$LN91@Update:
	mov	eax, DWORD PTR _fi$76884[ebp]
	add	eax, 1
	mov	DWORD PTR _fi$76884[ebp], eax
$LN92@Update:
	mov	ecx, DWORD PTR _indexInFolder$76883[ebp]
	cmp	ecx, DWORD PTR _numUnpackStreams$76876[ebp]
	jae	$LN94@Update
; Line 1968
	mov	edx, DWORD PTR _fi$76884[ebp]
	push	edx
	mov	ecx, DWORD PTR _db$[ebp]
	add	ecx, 88					; 00000058H
	call	??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEABUCFileItem@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CFileItem>::operator[]
	movzx	eax, BYTE PTR [eax+16]
	test	eax, eax
	je	$LN89@Update
; Line 1970
	mov	ecx, DWORD PTR _indexInFolder$76883[ebp]
	add	ecx, 1
	mov	DWORD PTR _indexInFolder$76883[ebp], ecx
; Line 1973
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??C?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator->
	mov	DWORD PTR tv759[ebp], eax
	mov	esi, esp
	push	3
	mov	edx, DWORD PTR _fi$76884[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR tv759[ebp]
	push	eax
	mov	ecx, DWORD PTR tv759[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$76889[ebp], eax
	cmp	DWORD PTR ___result__$76889[ebp], 0
	je	$LN89@Update
	mov	ecx, DWORD PTR ___result__$76889[ebp]
	mov	DWORD PTR $T79396[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 16		; 00000010H
	lea	ecx, DWORD PTR _encoder$76868[ebp]
	call	??1CEncoder@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CEncoder::~CEncoder
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _method$76859[ebp]
	call	??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _getTextPassword$[ebp]
	call	??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _threadDecoder$[ebp]
	call	??1CThreadDecoder@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CThreadDecoder::~CThreadDecoder
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _sb$[ebp]
	call	??1CStreamBinder@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _groups$[ebp]
	call	??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _filters$[ebp]
	call	??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _fileIndexToUpdateIndexMap$[ebp]
	call	??1?$CObjArray@H@@QAE@XZ		; CObjArray<int>::~CObjArray<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extractCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	eax, DWORD PTR $T79396[ebp]
	jmp	$LN188@Update
$LN89@Update:
; Line 1975
	jmp	$LN91@Update
$LN94@Update:
; Line 1979
	mov	edx, DWORD PTR _folderIndex$76875[ebp]
	push	edx
	mov	ecx, DWORD PTR _db$[ebp]
	call	?GetFolderFullPackSize@CDbEx@N7z@NArchive@@QBE_KI@Z ; NArchive::N7z::CDbEx::GetFolderFullPackSize
	mov	DWORD PTR _packSize$76893[ebp], eax
	mov	DWORD PTR _packSize$76893[ebp+4], edx
; Line 1981
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *
	push	eax
	mov	eax, DWORD PTR _packSize$76893[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _packSize$76893[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _folderIndex$76875[ebp]
	push	edx
	mov	ecx, DWORD PTR _db$[ebp]
	call	?GetFolderStreamPos@CDbEx@N7z@NArchive@@QBE_KII@Z ; NArchive::N7z::CDbEx::GetFolderStreamPos
	push	edx
	push	eax
	mov	ecx, DWORD PTR _archive$[ebp]
	add	ecx, 84					; 00000054H
	call	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
	push	eax
	mov	eax, DWORD PTR _inStream$[ebp]
	push	eax
	call	?WriteRange@N7z@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@_K2PAUICompressProgressInfo@@@Z ; NArchive::N7z::WriteRange
	mov	DWORD PTR ___result__$76894[ebp], eax
	cmp	DWORD PTR ___result__$76894[ebp], 0
	je	$LN87@Update
	mov	ecx, DWORD PTR ___result__$76894[ebp]
	mov	DWORD PTR $T79397[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 16		; 00000010H
	lea	ecx, DWORD PTR _encoder$76868[ebp]
	call	??1CEncoder@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CEncoder::~CEncoder
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _method$76859[ebp]
	call	??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _getTextPassword$[ebp]
	call	??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _threadDecoder$[ebp]
	call	??1CThreadDecoder@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CThreadDecoder::~CThreadDecoder
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _sb$[ebp]
	call	??1CStreamBinder@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _groups$[ebp]
	call	??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _filters$[ebp]
	call	??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _fileIndexToUpdateIndexMap$[ebp]
	call	??1?$CObjArray@H@@QAE@XZ		; CObjArray<int>::~CObjArray<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extractCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	eax, DWORD PTR $T79397[ebp]
	jmp	$LN188@Update
$LN87@Update:
; Line 1982
	mov	edx, DWORD PTR _lps$[ebp]
	mov	eax, DWORD PTR [edx+24]
	add	eax, DWORD PTR _packSize$76893[ebp]
	mov	ecx, DWORD PTR [edx+28]
	adc	ecx, DWORD PTR _packSize$76893[ebp+4]
	mov	edx, DWORD PTR _lps$[ebp]
	mov	DWORD PTR [edx+24], eax
	mov	DWORD PTR [edx+28], ecx
; Line 1984
	mov	ecx, DWORD PTR _newDatabase$[ebp]
	add	ecx, 84					; 00000054H
	call	?AddNew@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEAAUCFolder@N7z@NArchive@@XZ ; CObjectVector<NArchive::N7z::CFolder>::AddNew
	mov	DWORD PTR _folder$76897[ebp], eax
; Line 1985
	mov	eax, DWORD PTR _folder$76897[ebp]
	push	eax
	mov	ecx, DWORD PTR _folderIndex$76875[ebp]
	push	ecx
	mov	ecx, DWORD PTR _db$[ebp]
	call	?ParseFolderInfo@CFolders@N7z@NArchive@@QBEXIAAUCFolder@23@@Z ; NArchive::N7z::CFolders::ParseFolderInfo
; Line 1986
	mov	ecx, DWORD PTR _db$[ebp]
	add	ecx, 48					; 00000030H
	call	??B?$CObjArray@I@@QBEPBIXZ		; CObjArray<unsigned int>::operator unsigned int const *
	mov	edx, DWORD PTR _folderIndex$76875[ebp]
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _startIndex$76898[ebp], eax
; Line 1987
	mov	DWORD PTR _j$76899[ebp], 0
	jmp	SHORT $LN86@Update
$LN85@Update:
	mov	ecx, DWORD PTR _j$76899[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$76899[ebp], ecx
$LN86@Update:
	mov	ecx, DWORD PTR _folder$76897[ebp]
	add	ecx, 16					; 00000010H
	call	?Size@?$CObjArray2@I@@QBEIXZ		; CObjArray2<unsigned int>::Size
	cmp	DWORD PTR _j$76899[ebp], eax
	jae	SHORT $LN84@Update
; Line 1989
	mov	edx, DWORD PTR _startIndex$76898[ebp]
	add	edx, DWORD PTR _j$76899[ebp]
	push	edx
	mov	ecx, DWORD PTR _db$[ebp]
	call	?GetStreamPackSize@CFolders@N7z@NArchive@@QBE_KI@Z ; NArchive::N7z::CFolders::GetStreamPackSize
	push	edx
	push	eax
	mov	ecx, DWORD PTR _newDatabase$[ebp]
	add	ecx, 48					; 00000030H
	call	?Add@?$CRecordVector@_K@@QAEI_K@Z	; CRecordVector<unsigned __int64>::Add
; Line 1992
	jmp	SHORT $LN85@Update
$LN84@Update:
; Line 1994
	mov	ecx, DWORD PTR _db$[ebp]
	add	ecx, 44					; 0000002cH
	call	??B?$CObjArray@I@@QBEPBIXZ		; CObjArray<unsigned int>::operator unsigned int const *
	mov	ecx, DWORD PTR _folderIndex$76875[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _indexStart$76903[ebp], edx
; Line 1995
	mov	ecx, DWORD PTR _db$[ebp]
	add	ecx, 44					; 0000002cH
	call	??B?$CObjArray@I@@QBEPBIXZ		; CObjArray<unsigned int>::operator unsigned int const *
	mov	ecx, DWORD PTR _folderIndex$76875[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+4]
	mov	DWORD PTR _indexEnd$76904[ebp], edx
; Line 1996
	jmp	SHORT $LN83@Update
$LN82@Update:
	mov	eax, DWORD PTR _indexStart$76903[ebp]
	add	eax, 1
	mov	DWORD PTR _indexStart$76903[ebp], eax
$LN83@Update:
	mov	ecx, DWORD PTR _indexStart$76903[ebp]
	cmp	ecx, DWORD PTR _indexEnd$76904[ebp]
	jae	SHORT $LN81@Update
; Line 1997
	mov	ecx, DWORD PTR _db$[ebp]
	add	ecx, 40					; 00000028H
	call	??B?$CObjArray@_K@@QBEPB_KXZ		; CObjArray<unsigned __int64>::operator unsigned __int64 const *
	mov	edx, DWORD PTR _indexStart$76903[ebp]
	mov	ecx, DWORD PTR [eax+edx*8+4]
	push	ecx
	mov	edx, DWORD PTR [eax+edx*8]
	push	edx
	mov	ecx, DWORD PTR _newDatabase$[ebp]
	add	ecx, 36					; 00000024H
	call	?Add@?$CRecordVector@_K@@QAEI_K@Z	; CRecordVector<unsigned __int64>::Add
	jmp	SHORT $LN82@Update
$LN81@Update:
; Line 1999
	jmp	$LN80@Update
$LN95@Update:
; Line 2003
	lea	ecx, DWORD PTR _extractStatuses$76909[ebp]
	call	??0?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::CRecordVector<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
; Line 2005
	mov	DWORD PTR _indexInFolder$76910[ebp], 0
; Line 2007
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??B?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator IArchiveUpdateCallbackFile *
	test	eax, eax
	je	$LN79@Update
; Line 2011
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??C?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator->
	mov	DWORD PTR tv870[ebp], eax
	mov	esi, esp
	push	4
	mov	eax, DWORD PTR _folderIndex$76875[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR tv870[ebp]
	push	ecx
	mov	edx, DWORD PTR tv870[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$76912[ebp], eax
	cmp	DWORD PTR ___result__$76912[ebp], 0
	je	$LN79@Update
	mov	edx, DWORD PTR ___result__$76912[ebp]
	mov	DWORD PTR $T79398[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	lea	ecx, DWORD PTR _extractStatuses$76909[ebp]
	call	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 16		; 00000010H
	lea	ecx, DWORD PTR _encoder$76868[ebp]
	call	??1CEncoder@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CEncoder::~CEncoder
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _method$76859[ebp]
	call	??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _getTextPassword$[ebp]
	call	??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _threadDecoder$[ebp]
	call	??1CThreadDecoder@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CThreadDecoder::~CThreadDecoder
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _sb$[ebp]
	call	??1CStreamBinder@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _groups$[ebp]
	call	??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _filters$[ebp]
	call	??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _fileIndexToUpdateIndexMap$[ebp]
	call	??1?$CObjArray@H@@QAE@XZ		; CObjArray<int>::~CObjArray<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extractCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	eax, DWORD PTR $T79398[ebp]
	jmp	$LN188@Update
$LN79@Update:
; Line 2018
	mov	DWORD PTR _sizeToEncode$76916[ebp], 0
	mov	DWORD PTR _sizeToEncode$76916[ebp+4], 0
; Line 2026
	mov	ecx, DWORD PTR _db$[ebp]
	add	ecx, 280				; 00000118H
	call	??B?$CObjArray@I@@QBEPBIXZ		; CObjArray<unsigned int>::operator unsigned int const *
	mov	ecx, DWORD PTR _folderIndex$76875[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _fi$76917[ebp], edx
	jmp	SHORT $LN77@Update
$LN76@Update:
	mov	eax, DWORD PTR _fi$76917[ebp]
	add	eax, 1
	mov	DWORD PTR _fi$76917[ebp], eax
$LN77@Update:
	mov	ecx, DWORD PTR _indexInFolder$76910[ebp]
	cmp	ecx, DWORD PTR _numUnpackStreams$76876[ebp]
	jae	$LN75@Update
; Line 2028
	mov	BYTE PTR _needExtract$76921[ebp], 0
; Line 2029
	mov	edx, DWORD PTR _fi$76917[ebp]
	push	edx
	mov	ecx, DWORD PTR _db$[ebp]
	add	ecx, 88					; 00000058H
	call	??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEABUCFileItem@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CFileItem>::operator[]
	mov	DWORD PTR _file$76922[ebp], eax
; Line 2031
	mov	eax, DWORD PTR _file$76922[ebp]
	movzx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	je	SHORT $LN74@Update
; Line 2033
	mov	edx, DWORD PTR _indexInFolder$76910[ebp]
	add	edx, 1
	mov	DWORD PTR _indexInFolder$76910[ebp], edx
; Line 2034
	lea	ecx, DWORD PTR _fileIndexToUpdateIndexMap$[ebp]
	call	??B?$CObjArray@H@@QAEPAHXZ		; CObjArray<int>::operator int *
	mov	ecx, DWORD PTR _fi$76917[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _updateIndex$76924[ebp], edx
; Line 2035
	cmp	DWORD PTR _updateIndex$76924[ebp], 0
	jl	SHORT $LN74@Update
	mov	eax, DWORD PTR _updateIndex$76924[ebp]
	push	eax
	mov	ecx, DWORD PTR _updateItems$[ebp]
	call	??A?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QBEABUCUpdateItem@N7z@NArchive@@I@Z ; CObjectVector<NArchive::N7z::CUpdateItem>::operator[]
	movzx	ecx, BYTE PTR [eax+56]
	test	ecx, ecx
	jne	SHORT $LN74@Update
; Line 2036
	mov	BYTE PTR _needExtract$76921[ebp], 1
$LN74@Update:
; Line 2040
	movzx	edx, BYTE PTR _needExtract$76921[ebp]
	push	edx
	lea	ecx, DWORD PTR _extractStatuses$76909[ebp]
	call	?Add@?$CRecordVector@_N@@QAEI_N@Z	; CRecordVector<bool>::Add
; Line 2041
	movzx	eax, BYTE PTR _needExtract$76921[ebp]
	test	eax, eax
	je	SHORT $LN72@Update
; Line 2043
	mov	ecx, DWORD PTR _file$76922[ebp]
	mov	edx, DWORD PTR _sizeToEncode$76916[ebp]
	add	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _sizeToEncode$76916[ebp+4]
	adc	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _sizeToEncode$76916[ebp], edx
	mov	DWORD PTR _sizeToEncode$76916[ebp+4], eax
$LN72@Update:
; Line 2049
	jmp	$LN76@Update
$LN75@Update:
; Line 2053
	mov	ecx, DWORD PTR _newDatabase$[ebp]
	add	ecx, 48					; 00000030H
	call	?Size@?$CRecordVector@_K@@QBEIXZ	; CRecordVector<unsigned __int64>::Size
	mov	DWORD PTR _startPackIndex$76927[ebp], eax
; Line 2057
	lea	ecx, DWORD PTR _sbInStream$76930[ebp]
	call	??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 19		; 00000013H
; Line 2059
	mov	DWORD PTR _FosSpec2$76932[ebp], 0
; Line 2061
	push	28					; 0000001cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T79400[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 20		; 00000014H
	cmp	DWORD PTR $T79400[ebp], 0
	je	SHORT $LN198@Update
	mov	ecx, DWORD PTR $T79400[ebp]
	call	??0CRepackInStreamWithSizes@N7z@NArchive@@QAE@XZ
	mov	DWORD PTR tv926[ebp], eax
	jmp	SHORT $LN199@Update
$LN198@Update:
	mov	DWORD PTR tv926[ebp], 0
$LN199@Update:
	mov	ecx, DWORD PTR tv926[ebp]
	mov	DWORD PTR $T79399[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 19		; 00000013H
	mov	edx, DWORD PTR $T79399[ebp]
	mov	DWORD PTR _inStreamSizeCountSpec$76933[ebp], edx
; Line 2062
	mov	eax, DWORD PTR _inStreamSizeCountSpec$76933[ebp]
	push	eax
	lea	ecx, DWORD PTR _inStreamSizeCount$76939[ebp]
	call	??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 21		; 00000015H
; Line 2065
	mov	ecx, DWORD PTR _options$[ebp]
	movzx	edx, BYTE PTR [ecx+42]
	test	edx, edx
	je	$LN71@Update
; Line 2067
	cmp	DWORD PTR _threadDecoder$[ebp+128], 0
	je	SHORT $LN200@Update
	mov	eax, DWORD PTR _threadDecoder$[ebp+128]
	add	eax, 8
	mov	DWORD PTR tv973[ebp], eax
	jmp	SHORT $LN201@Update
$LN200@Update:
	mov	DWORD PTR tv973[ebp], 0
$LN201@Update:
	mov	ecx, DWORD PTR tv973[ebp]
	mov	DWORD PTR _repackBase$76931[ebp], ecx
; Line 2068
	lea	ecx, DWORD PTR _sbOutStream$76942[ebp]
	call	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 22		; 00000016H
; Line 2069
	lea	ecx, DWORD PTR _sbOutStream$76942[ebp]
	call	??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator&
	push	eax
	lea	ecx, DWORD PTR _sbInStream$76930[ebp]
	call	??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator&
	push	eax
	lea	ecx, DWORD PTR _sb$[ebp]
	call	?CreateStreams@CStreamBinder@@QAEXPAPAUISequentialInStream@@PAPAUISequentialOutStream@@@Z ; CStreamBinder::CreateStreams
; Line 2070
	lea	ecx, DWORD PTR _sb$[ebp]
	call	?ReInit@CStreamBinder@@QAEXXZ		; CStreamBinder::ReInit
; Line 2072
	lea	edx, DWORD PTR _sbOutStream$76942[ebp]
	push	edx
	mov	ecx, DWORD PTR _threadDecoder$[ebp+128]
	add	ecx, 52					; 00000034H
	call	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@ABV0@@Z ; CMyComPtr<ISequentialOutStream>::operator=
; Line 2074
	mov	eax, DWORD PTR _inStream$[ebp]
	push	eax
	lea	ecx, DWORD PTR _threadDecoder$[ebp+124]
	call	??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ; CMyComPtr<IInStream>::operator=
; Line 2075
	mov	ecx, DWORD PTR _db$[ebp]
	mov	edx, DWORD PTR [ecx+248]
	mov	DWORD PTR _threadDecoder$[ebp+136], edx
	mov	eax, DWORD PTR [ecx+252]
	mov	DWORD PTR _threadDecoder$[ebp+140], eax
; Line 2076
	mov	ecx, DWORD PTR _db$[ebp]
	mov	DWORD PTR _threadDecoder$[ebp+144], ecx
; Line 2077
	mov	edx, DWORD PTR _folderIndex$76875[ebp]
	mov	DWORD PTR _threadDecoder$[ebp+148], edx
; Line 2081
	mov	BYTE PTR __$EHRec$[ebp+8], 21		; 00000015H
	lea	ecx, DWORD PTR _sbOutStream$76942[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
; Line 2082
	jmp	$LN70@Update
$LN71@Update:
; Line 2085
	push	64					; 00000040H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T79406[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 23		; 00000017H
	cmp	DWORD PTR $T79406[ebp], 0
	je	SHORT $LN202@Update
	mov	ecx, DWORD PTR $T79406[ebp]
	call	??0CFolderInStream2@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFolderInStream2::CFolderInStream2
	mov	DWORD PTR tv1004[ebp], eax
	jmp	SHORT $LN203@Update
$LN202@Update:
	mov	DWORD PTR tv1004[ebp], 0
$LN203@Update:
	mov	eax, DWORD PTR tv1004[ebp]
	mov	DWORD PTR $T79405[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 21		; 00000015H
	mov	ecx, DWORD PTR $T79405[ebp]
	mov	DWORD PTR _FosSpec2$76932[ebp], ecx
; Line 2086
	mov	ecx, DWORD PTR _FosSpec2$76932[ebp]
	call	?Init@CFolderInStream2@N7z@NArchive@@QAEXXZ ; NArchive::N7z::CFolderInStream2::Init
; Line 2087
	mov	edx, DWORD PTR _FosSpec2$76932[ebp]
	push	edx
	lea	ecx, DWORD PTR _sbInStream$76930[ebp]
	call	??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=
; Line 2088
	cmp	DWORD PTR _FosSpec2$76932[ebp], 0
	je	SHORT $LN204@Update
	mov	eax, DWORD PTR _FosSpec2$76932[ebp]
	add	eax, 8
	mov	DWORD PTR tv1015[ebp], eax
	jmp	SHORT $LN205@Update
$LN204@Update:
	mov	DWORD PTR tv1015[ebp], 0
$LN205@Update:
	mov	ecx, DWORD PTR tv1015[ebp]
	mov	DWORD PTR _repackBase$76931[ebp], ecx
; Line 2091
	mov	BYTE PTR _isEncrypted$76949[ebp], 0
; Line 2092
	mov	BYTE PTR _passwordIsDefined$76950[ebp], 0
; Line 2093
	lea	ecx, DWORD PTR _password$76951[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 24		; 00000018H
; Line 2096
	lea	ecx, DWORD PTR _decodedStream$76953[ebp]
	call	??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 25		; 00000019H
; Line 2114
	push	1
	push	0
	lea	edx, DWORD PTR _password$76951[ebp]
	push	edx
	lea	eax, DWORD PTR _passwordIsDefined$76950[ebp]
	push	eax
	lea	ecx, DWORD PTR _isEncrypted$76949[ebp]
	push	ecx
	lea	ecx, DWORD PTR _getTextPassword$[ebp]
	call	??B?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ ; CMyComPtr<ICryptoGetTextPassword>::operator ICryptoGetTextPassword *
	push	eax
	lea	ecx, DWORD PTR _decodedStream$76953[ebp]
	call	??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator&
	push	eax
	push	0
	push	0
	push	0
	mov	edx, DWORD PTR _folderIndex$76875[ebp]
	push	edx
	mov	eax, DWORD PTR _db$[ebp]
	push	eax
	mov	ecx, DWORD PTR _db$[ebp]
	mov	edx, DWORD PTR [ecx+252]
	push	edx
	mov	eax, DWORD PTR [ecx+248]
	push	eax
	mov	ecx, DWORD PTR _inStream$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _threadDecoder$[ebp+20]
	call	?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z ; NArchive::N7z::CDecoder::Decode
	mov	DWORD PTR _res$76954[ebp], eax
; Line 2116
	mov	edx, DWORD PTR _res$76954[ebp]
	mov	DWORD PTR ___result__$76955[ebp], edx
	cmp	DWORD PTR ___result__$76955[ebp], 0
	je	$LN69@Update
	mov	eax, DWORD PTR ___result__$76955[ebp]
	mov	DWORD PTR $T79411[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 24		; 00000018H
	lea	ecx, DWORD PTR _decodedStream$76953[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 21		; 00000015H
	lea	ecx, DWORD PTR _password$76951[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 19		; 00000013H
	lea	ecx, DWORD PTR _inStreamSizeCount$76939[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
	lea	ecx, DWORD PTR _sbInStream$76930[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	lea	ecx, DWORD PTR _extractStatuses$76909[ebp]
	call	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 16		; 00000010H
	lea	ecx, DWORD PTR _encoder$76868[ebp]
	call	??1CEncoder@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CEncoder::~CEncoder
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _method$76859[ebp]
	call	??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _getTextPassword$[ebp]
	call	??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _threadDecoder$[ebp]
	call	??1CThreadDecoder@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CThreadDecoder::~CThreadDecoder
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _sb$[ebp]
	call	??1CStreamBinder@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _groups$[ebp]
	call	??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _filters$[ebp]
	call	??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _fileIndexToUpdateIndexMap$[ebp]
	call	??1?$CObjArray@H@@QAE@XZ		; CObjArray<int>::~CObjArray<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extractCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	eax, DWORD PTR $T79411[ebp]
	jmp	$LN188@Update
$LN69@Update:
; Line 2117
	lea	ecx, DWORD PTR _decodedStream$76953[ebp]
	call	??7?$CMyComPtr@UISequentialInStream@@@@QBE_NXZ ; CMyComPtr<ISequentialInStream>::operator!
	movzx	ecx, al
	test	ecx, ecx
	je	$LN68@Update
; Line 2118
	mov	DWORD PTR $T79412[ebp], -2147467259	; 80004005H
	mov	BYTE PTR __$EHRec$[ebp+8], 24		; 00000018H
	lea	ecx, DWORD PTR _decodedStream$76953[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 21		; 00000015H
	lea	ecx, DWORD PTR _password$76951[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 19		; 00000013H
	lea	ecx, DWORD PTR _inStreamSizeCount$76939[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
	lea	ecx, DWORD PTR _sbInStream$76930[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	lea	ecx, DWORD PTR _extractStatuses$76909[ebp]
	call	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 16		; 00000010H
	lea	ecx, DWORD PTR _encoder$76868[ebp]
	call	??1CEncoder@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CEncoder::~CEncoder
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _method$76859[ebp]
	call	??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _getTextPassword$[ebp]
	call	??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _threadDecoder$[ebp]
	call	??1CThreadDecoder@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CThreadDecoder::~CThreadDecoder
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _sb$[ebp]
	call	??1CStreamBinder@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _groups$[ebp]
	call	??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _filters$[ebp]
	call	??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _fileIndexToUpdateIndexMap$[ebp]
	call	??1?$CObjArray@H@@QAE@XZ		; CObjArray<int>::~CObjArray<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extractCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	eax, DWORD PTR $T79412[ebp]
	jmp	$LN188@Update
$LN68@Update:
; Line 2120
	lea	edx, DWORD PTR _decodedStream$76953[ebp]
	push	edx
	mov	ecx, DWORD PTR _FosSpec2$76932[ebp]
	add	ecx, 56					; 00000038H
	call	??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@ABV0@@Z ; CMyComPtr<ISequentialInStream>::operator=
; Line 2121
	mov	BYTE PTR __$EHRec$[ebp+8], 24		; 00000018H
	lea	ecx, DWORD PTR _decodedStream$76953[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 21		; 00000015H
	lea	ecx, DWORD PTR _password$76951[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
$LN70@Update:
; Line 2123
	mov	eax, DWORD PTR _repackBase$76931[ebp]
	mov	ecx, DWORD PTR _db$[ebp]
	mov	DWORD PTR [eax+28], ecx
; Line 2124
	lea	edx, DWORD PTR _opCallback$[ebp]
	push	edx
	mov	ecx, DWORD PTR _repackBase$76931[ebp]
	add	ecx, 32					; 00000020H
	call	??4?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAEPAUIArchiveUpdateCallbackFile@@ABV0@@Z ; CMyComPtr<IArchiveUpdateCallbackFile>::operator=
; Line 2125
	lea	eax, DWORD PTR _extractCallback$[ebp]
	push	eax
	mov	ecx, DWORD PTR _repackBase$76931[ebp]
	add	ecx, 36					; 00000024H
	call	??4?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAEPAUIArchiveExtractCallbackMessage@@ABV0@@Z ; CMyComPtr<IArchiveExtractCallbackMessage>::operator=
; Line 2127
	mov	ecx, DWORD PTR _db$[ebp]
	add	ecx, 280				; 00000118H
	call	??B?$CObjArray@I@@QBEPBIXZ		; CObjArray<unsigned int>::operator unsigned int const *
	mov	ecx, DWORD PTR _folderIndex$76875[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _startIndex$76961[ebp], edx
; Line 2128
	lea	eax, DWORD PTR _extractStatuses$76909[ebp]
	push	eax
	mov	ecx, DWORD PTR _startIndex$76961[ebp]
	push	ecx
	mov	ecx, DWORD PTR _repackBase$76931[ebp]
	call	?Init@CRepackStreamBase@N7z@NArchive@@QAEJIPBV?$CRecordVector@_N@@@Z ; NArchive::N7z::CRepackStreamBase::Init
	mov	DWORD PTR ___result__$76962[ebp], eax
	cmp	DWORD PTR ___result__$76962[ebp], 0
	je	$LN67@Update
	mov	edx, DWORD PTR ___result__$76962[ebp]
	mov	DWORD PTR $T79413[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 19		; 00000013H
	lea	ecx, DWORD PTR _inStreamSizeCount$76939[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
	lea	ecx, DWORD PTR _sbInStream$76930[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	lea	ecx, DWORD PTR _extractStatuses$76909[ebp]
	call	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 16		; 00000010H
	lea	ecx, DWORD PTR _encoder$76868[ebp]
	call	??1CEncoder@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CEncoder::~CEncoder
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _method$76859[ebp]
	call	??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _getTextPassword$[ebp]
	call	??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _threadDecoder$[ebp]
	call	??1CThreadDecoder@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CThreadDecoder::~CThreadDecoder
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _sb$[ebp]
	call	??1CStreamBinder@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _groups$[ebp]
	call	??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _filters$[ebp]
	call	??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _fileIndexToUpdateIndexMap$[ebp]
	call	??1?$CObjArray@H@@QAE@XZ		; CObjArray<int>::~CObjArray<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extractCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	eax, DWORD PTR $T79413[ebp]
	jmp	$LN188@Update
$LN67@Update:
; Line 2130
	mov	eax, DWORD PTR _inStreamSizeCountSpec$76933[ebp]
	mov	ecx, DWORD PTR _db$[ebp]
	mov	DWORD PTR [eax+24], ecx
; Line 2131
	lea	edx, DWORD PTR _extractStatuses$76909[ebp]
	push	edx
	mov	eax, DWORD PTR _startIndex$76961[ebp]
	push	eax
	lea	ecx, DWORD PTR _sbInStream$76930[ebp]
	call	??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
	push	eax
	mov	ecx, DWORD PTR _inStreamSizeCountSpec$76933[ebp]
	call	?Init@CRepackInStreamWithSizes@N7z@NArchive@@QAEXPAUISequentialInStream@@IPBV?$CRecordVector@_N@@@Z ; NArchive::N7z::CRepackInStreamWithSizes::Init
; Line 2134
	mov	ecx, DWORD PTR _options$[ebp]
	movzx	edx, BYTE PTR [ecx+42]
	test	edx, edx
	je	SHORT $LN66@Update
; Line 2136
	lea	ecx, DWORD PTR _threadDecoder$[ebp]
	call	?Start@CVirtThread@@QAEXXZ		; CVirtThread::Start
$LN66@Update:
; Line 2148
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *
	push	eax
	mov	eax, DWORD PTR _newDatabase$[ebp]
	add	eax, 48					; 00000030H
	push	eax
	mov	ecx, DWORD PTR _archive$[ebp]
	add	ecx, 84					; 00000054H
	call	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
	push	eax
	lea	ecx, DWORD PTR _curUnpackSize$76928[ebp]
	push	ecx
	mov	edx, DWORD PTR _newDatabase$[ebp]
	add	edx, 36					; 00000024H
	push	edx
	mov	ecx, DWORD PTR _newDatabase$[ebp]
	add	ecx, 84					; 00000054H
	call	?AddNew@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEAAUCFolder@N7z@NArchive@@XZ ; CObjectVector<NArchive::N7z::CFolder>::AddNew
	push	eax
	lea	eax, DWORD PTR _inSizeForReduce$[ebp]
	push	eax
	lea	ecx, DWORD PTR _inStreamSizeCount$76939[ebp]
	call	??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
	push	eax
	lea	ecx, DWORD PTR _encoder$76868[ebp]
	call	?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z ; NArchive::N7z::CEncoder::Encode
	mov	DWORD PTR _encodeRes$76966[ebp], eax
; Line 2150
	cmp	DWORD PTR _encodeRes$76966[ebp], 536870914 ; 20000002H
	jne	$LN65@Update
; Line 2151
	mov	DWORD PTR $T79414[ebp], -2147467259	; 80004005H
	mov	BYTE PTR __$EHRec$[ebp+8], 19		; 00000013H
	lea	ecx, DWORD PTR _inStreamSizeCount$76939[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
	lea	ecx, DWORD PTR _sbInStream$76930[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	lea	ecx, DWORD PTR _extractStatuses$76909[ebp]
	call	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 16		; 00000010H
	lea	ecx, DWORD PTR _encoder$76868[ebp]
	call	??1CEncoder@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CEncoder::~CEncoder
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _method$76859[ebp]
	call	??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _getTextPassword$[ebp]
	call	??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _threadDecoder$[ebp]
	call	??1CThreadDecoder@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CThreadDecoder::~CThreadDecoder
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _sb$[ebp]
	call	??1CStreamBinder@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _groups$[ebp]
	call	??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _filters$[ebp]
	call	??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _fileIndexToUpdateIndexMap$[ebp]
	call	??1?$CObjArray@H@@QAE@XZ		; CObjArray<int>::~CObjArray<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extractCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	eax, DWORD PTR $T79414[ebp]
	jmp	$LN188@Update
$LN65@Update:
; Line 2154
	mov	ecx, DWORD PTR _options$[ebp]
	movzx	edx, BYTE PTR [ecx+42]
	test	edx, edx
	je	$LN64@Update
; Line 2156
	lea	ecx, DWORD PTR _threadDecoder$[ebp]
	call	?WaitExecuteFinish@CVirtThread@@QAEXXZ	; CVirtThread::WaitExecuteFinish
; Line 2157
	mov	eax, DWORD PTR _threadDecoder$[ebp+120]
	mov	DWORD PTR _decodeRes$76971[ebp], eax
; Line 2159
	cmp	DWORD PTR _decodeRes$76971[ebp], 1
	jne	$LN63@Update
; Line 2161
	lea	ecx, DWORD PTR _extractCallback$[ebp]
	call	??B?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QBEPAUIArchiveExtractCallbackMessage@@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::operator IArchiveExtractCallbackMessage *
	test	eax, eax
	je	$LN62@Update
; Line 2166
	lea	ecx, DWORD PTR _extractCallback$[ebp]
	call	??C?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QBEPAUIArchiveExtractCallbackMessage@@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::operator->
	mov	DWORD PTR tv1163[ebp], eax
	mov	esi, esp
	push	2
	mov	ecx, DWORD PTR _db$[ebp]
	add	ecx, 280				; 00000118H
	call	??B?$CObjArray@I@@QBEPBIXZ		; CObjArray<unsigned int>::operator unsigned int const *
	mov	ecx, DWORD PTR _folderIndex$76875[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	push	edx
	push	1
	mov	eax, DWORD PTR tv1163[ebp]
	push	eax
	mov	ecx, DWORD PTR tv1163[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$76975[ebp], eax
	cmp	DWORD PTR ___result__$76975[ebp], 0
	je	$LN62@Update
	mov	ecx, DWORD PTR ___result__$76975[ebp]
	mov	DWORD PTR $T79415[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 19		; 00000013H
	lea	ecx, DWORD PTR _inStreamSizeCount$76939[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
	lea	ecx, DWORD PTR _sbInStream$76930[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	lea	ecx, DWORD PTR _extractStatuses$76909[ebp]
	call	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 16		; 00000010H
	lea	ecx, DWORD PTR _encoder$76868[ebp]
	call	??1CEncoder@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CEncoder::~CEncoder
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _method$76859[ebp]
	call	??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _getTextPassword$[ebp]
	call	??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _threadDecoder$[ebp]
	call	??1CThreadDecoder@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CThreadDecoder::~CThreadDecoder
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _sb$[ebp]
	call	??1CStreamBinder@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _groups$[ebp]
	call	??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _filters$[ebp]
	call	??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _fileIndexToUpdateIndexMap$[ebp]
	call	??1?$CObjArray@H@@QAE@XZ		; CObjArray<int>::~CObjArray<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extractCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	eax, DWORD PTR $T79415[ebp]
	jmp	$LN188@Update
$LN62@Update:
; Line 2168
	mov	DWORD PTR $T79416[ebp], -2147467259	; 80004005H
	mov	BYTE PTR __$EHRec$[ebp+8], 19		; 00000013H
	lea	ecx, DWORD PTR _inStreamSizeCount$76939[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
	lea	ecx, DWORD PTR _sbInStream$76930[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	lea	ecx, DWORD PTR _extractStatuses$76909[ebp]
	call	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 16		; 00000010H
	lea	ecx, DWORD PTR _encoder$76868[ebp]
	call	??1CEncoder@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CEncoder::~CEncoder
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _method$76859[ebp]
	call	??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _getTextPassword$[ebp]
	call	??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _threadDecoder$[ebp]
	call	??1CThreadDecoder@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CThreadDecoder::~CThreadDecoder
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _sb$[ebp]
	call	??1CStreamBinder@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _groups$[ebp]
	call	??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _filters$[ebp]
	call	??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _fileIndexToUpdateIndexMap$[ebp]
	call	??1?$CObjArray@H@@QAE@XZ		; CObjArray<int>::~CObjArray<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extractCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	eax, DWORD PTR $T79416[ebp]
	jmp	$LN188@Update
$LN63@Update:
; Line 2170
	mov	edx, DWORD PTR _decodeRes$76971[ebp]
	mov	DWORD PTR ___result__$76980[ebp], edx
	cmp	DWORD PTR ___result__$76980[ebp], 0
	je	$LN60@Update
	mov	eax, DWORD PTR ___result__$76980[ebp]
	mov	DWORD PTR $T79417[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 19		; 00000013H
	lea	ecx, DWORD PTR _inStreamSizeCount$76939[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
	lea	ecx, DWORD PTR _sbInStream$76930[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	lea	ecx, DWORD PTR _extractStatuses$76909[ebp]
	call	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 16		; 00000010H
	lea	ecx, DWORD PTR _encoder$76868[ebp]
	call	??1CEncoder@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CEncoder::~CEncoder
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _method$76859[ebp]
	call	??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _getTextPassword$[ebp]
	call	??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _threadDecoder$[ebp]
	call	??1CThreadDecoder@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CThreadDecoder::~CThreadDecoder
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _sb$[ebp]
	call	??1CStreamBinder@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _groups$[ebp]
	call	??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _filters$[ebp]
	call	??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _fileIndexToUpdateIndexMap$[ebp]
	call	??1?$CObjArray@H@@QAE@XZ		; CObjArray<int>::~CObjArray<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extractCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	eax, DWORD PTR $T79417[ebp]
	jmp	$LN188@Update
$LN60@Update:
; Line 2171
	cmp	DWORD PTR _encodeRes$76966[ebp], 0
	jne	SHORT $LN59@Update
; Line 2172
	mov	ecx, DWORD PTR _sb$[ebp+24]
	cmp	ecx, DWORD PTR _sizeToEncode$76916[ebp]
	jne	SHORT $LN249@Update
	mov	edx, DWORD PTR _sb$[ebp+28]
	cmp	edx, DWORD PTR _sizeToEncode$76916[ebp+4]
	je	SHORT $LN59@Update
$LN249@Update:
; Line 2173
	mov	DWORD PTR _encodeRes$76966[ebp], -2147467259 ; 80004005H
$LN59@Update:
; Line 2175
	jmp	$LN57@Update
$LN64@Update:
; Line 2178
	mov	eax, DWORD PTR _FosSpec2$76932[ebp]
	cmp	DWORD PTR [eax+60], 1
	jne	$LN56@Update
; Line 2180
	lea	ecx, DWORD PTR _extractCallback$[ebp]
	call	??B?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QBEPAUIArchiveExtractCallbackMessage@@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::operator IArchiveExtractCallbackMessage *
	test	eax, eax
	je	$LN55@Update
; Line 2184
	lea	ecx, DWORD PTR _extractCallback$[ebp]
	call	??C?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QBEPAUIArchiveExtractCallbackMessage@@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::operator->
	mov	DWORD PTR tv1187[ebp], eax
	mov	esi, esp
	push	2
	mov	ecx, DWORD PTR _folderIndex$76875[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR tv1187[ebp]
	push	edx
	mov	eax, DWORD PTR tv1187[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$76991[ebp], eax
	cmp	DWORD PTR ___result__$76991[ebp], 0
	je	$LN55@Update
	mov	eax, DWORD PTR ___result__$76991[ebp]
	mov	DWORD PTR $T79418[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 19		; 00000013H
	lea	ecx, DWORD PTR _inStreamSizeCount$76939[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
	lea	ecx, DWORD PTR _sbInStream$76930[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	lea	ecx, DWORD PTR _extractStatuses$76909[ebp]
	call	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 16		; 00000010H
	lea	ecx, DWORD PTR _encoder$76868[ebp]
	call	??1CEncoder@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CEncoder::~CEncoder
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _method$76859[ebp]
	call	??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _getTextPassword$[ebp]
	call	??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _threadDecoder$[ebp]
	call	??1CThreadDecoder@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CThreadDecoder::~CThreadDecoder
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _sb$[ebp]
	call	??1CStreamBinder@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _groups$[ebp]
	call	??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _filters$[ebp]
	call	??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _fileIndexToUpdateIndexMap$[ebp]
	call	??1?$CObjArray@H@@QAE@XZ		; CObjArray<int>::~CObjArray<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extractCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	eax, DWORD PTR $T79418[ebp]
	jmp	$LN188@Update
$LN55@Update:
; Line 2186
	mov	DWORD PTR $T79419[ebp], -2147467259	; 80004005H
	mov	BYTE PTR __$EHRec$[ebp+8], 19		; 00000013H
	lea	ecx, DWORD PTR _inStreamSizeCount$76939[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
	lea	ecx, DWORD PTR _sbInStream$76930[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	lea	ecx, DWORD PTR _extractStatuses$76909[ebp]
	call	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 16		; 00000010H
	lea	ecx, DWORD PTR _encoder$76868[ebp]
	call	??1CEncoder@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CEncoder::~CEncoder
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _method$76859[ebp]
	call	??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _getTextPassword$[ebp]
	call	??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _threadDecoder$[ebp]
	call	??1CThreadDecoder@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CThreadDecoder::~CThreadDecoder
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _sb$[ebp]
	call	??1CStreamBinder@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _groups$[ebp]
	call	??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _filters$[ebp]
	call	??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _fileIndexToUpdateIndexMap$[ebp]
	call	??1?$CObjArray@H@@QAE@XZ		; CObjArray<int>::~CObjArray<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extractCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	eax, DWORD PTR $T79419[ebp]
	jmp	$LN188@Update
$LN56@Update:
; Line 2188
	mov	ecx, DWORD PTR _FosSpec2$76932[ebp]
	mov	edx, DWORD PTR [ecx+60]
	mov	DWORD PTR ___result__$76997[ebp], edx
	cmp	DWORD PTR ___result__$76997[ebp], 0
	je	$LN57@Update
	mov	eax, DWORD PTR ___result__$76997[ebp]
	mov	DWORD PTR $T79420[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 19		; 00000013H
	lea	ecx, DWORD PTR _inStreamSizeCount$76939[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
	lea	ecx, DWORD PTR _sbInStream$76930[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	lea	ecx, DWORD PTR _extractStatuses$76909[ebp]
	call	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 16		; 00000010H
	lea	ecx, DWORD PTR _encoder$76868[ebp]
	call	??1CEncoder@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CEncoder::~CEncoder
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _method$76859[ebp]
	call	??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _getTextPassword$[ebp]
	call	??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _threadDecoder$[ebp]
	call	??1CThreadDecoder@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CThreadDecoder::~CThreadDecoder
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _sb$[ebp]
	call	??1CStreamBinder@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _groups$[ebp]
	call	??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _filters$[ebp]
	call	??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _fileIndexToUpdateIndexMap$[ebp]
	call	??1?$CObjArray@H@@QAE@XZ		; CObjArray<int>::~CObjArray<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extractCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	eax, DWORD PTR $T79420[ebp]
	jmp	$LN188@Update
$LN57@Update:
; Line 2191
	mov	ecx, DWORD PTR _encodeRes$76966[ebp]
	mov	DWORD PTR ___result__$77000[ebp], ecx
	cmp	DWORD PTR ___result__$77000[ebp], 0
	je	$LN52@Update
	mov	edx, DWORD PTR ___result__$77000[ebp]
	mov	DWORD PTR $T79421[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 19		; 00000013H
	lea	ecx, DWORD PTR _inStreamSizeCount$76939[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
	lea	ecx, DWORD PTR _sbInStream$76930[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	lea	ecx, DWORD PTR _extractStatuses$76909[ebp]
	call	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 16		; 00000010H
	lea	ecx, DWORD PTR _encoder$76868[ebp]
	call	??1CEncoder@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CEncoder::~CEncoder
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _method$76859[ebp]
	call	??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _getTextPassword$[ebp]
	call	??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _threadDecoder$[ebp]
	call	??1CThreadDecoder@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CThreadDecoder::~CThreadDecoder
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _sb$[ebp]
	call	??1CStreamBinder@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _groups$[ebp]
	call	??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _filters$[ebp]
	call	??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _fileIndexToUpdateIndexMap$[ebp]
	call	??1?$CObjArray@H@@QAE@XZ		; CObjArray<int>::~CObjArray<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extractCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	eax, DWORD PTR $T79421[ebp]
	jmp	$LN188@Update
$LN52@Update:
; Line 2192
	mov	ecx, DWORD PTR _repackBase$76931[ebp]
	call	?CheckFinishedState@CRepackStreamBase@N7z@NArchive@@QBEJXZ ; NArchive::N7z::CRepackStreamBase::CheckFinishedState
	mov	DWORD PTR ___result__$77003[ebp], eax
	cmp	DWORD PTR ___result__$77003[ebp], 0
	je	$LN51@Update
	mov	eax, DWORD PTR ___result__$77003[ebp]
	mov	DWORD PTR $T79422[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 19		; 00000013H
	lea	ecx, DWORD PTR _inStreamSizeCount$76939[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
	lea	ecx, DWORD PTR _sbInStream$76930[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	lea	ecx, DWORD PTR _extractStatuses$76909[ebp]
	call	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 16		; 00000010H
	lea	ecx, DWORD PTR _encoder$76868[ebp]
	call	??1CEncoder@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CEncoder::~CEncoder
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _method$76859[ebp]
	call	??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _getTextPassword$[ebp]
	call	??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _threadDecoder$[ebp]
	call	??1CThreadDecoder@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CThreadDecoder::~CThreadDecoder
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _sb$[ebp]
	call	??1CStreamBinder@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _groups$[ebp]
	call	??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _filters$[ebp]
	call	??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _fileIndexToUpdateIndexMap$[ebp]
	call	??1?$CObjArray@H@@QAE@XZ		; CObjArray<int>::~CObjArray<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extractCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	eax, DWORD PTR $T79422[ebp]
	jmp	$LN188@Update
$LN51@Update:
; Line 2194
	mov	ecx, DWORD PTR _curUnpackSize$76928[ebp]
	cmp	ecx, DWORD PTR _sizeToEncode$76916[ebp]
	jne	SHORT $LN250@Update
	mov	edx, DWORD PTR _curUnpackSize$76928[ebp+4]
	cmp	edx, DWORD PTR _sizeToEncode$76916[ebp+4]
	je	$LN50@Update
$LN250@Update:
; Line 2195
	mov	DWORD PTR $T79423[ebp], -2147467259	; 80004005H
	mov	BYTE PTR __$EHRec$[ebp+8], 19		; 00000013H
	lea	ecx, DWORD PTR _inStreamSizeCount$76939[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
	lea	ecx, DWORD PTR _sbInStream$76930[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	lea	ecx, DWORD PTR _extractStatuses$76909[ebp]
	call	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 16		; 00000010H
	lea	ecx, DWORD PTR _encoder$76868[ebp]
	call	??1CEncoder@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CEncoder::~CEncoder
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _method$76859[ebp]
	call	??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _getTextPassword$[ebp]
	call	??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _threadDecoder$[ebp]
	call	??1CThreadDecoder@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CThreadDecoder::~CThreadDecoder
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _sb$[ebp]
	call	??1CStreamBinder@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _groups$[ebp]
	call	??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _filters$[ebp]
	call	??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _fileIndexToUpdateIndexMap$[ebp]
	call	??1?$CObjArray@H@@QAE@XZ		; CObjArray<int>::~CObjArray<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extractCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	eax, DWORD PTR $T79423[ebp]
	jmp	$LN188@Update
$LN50@Update:
; Line 2196
	mov	BYTE PTR __$EHRec$[ebp+8], 19		; 00000013H
	lea	ecx, DWORD PTR _inStreamSizeCount$76939[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
	lea	ecx, DWORD PTR _sbInStream$76930[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
; Line 2198
	jmp	SHORT $LN49@Update
$LN48@Update:
	mov	eax, DWORD PTR _startPackIndex$76927[ebp]
	add	eax, 1
	mov	DWORD PTR _startPackIndex$76927[ebp], eax
$LN49@Update:
	mov	ecx, DWORD PTR _newDatabase$[ebp]
	add	ecx, 48					; 00000030H
	call	?Size@?$CRecordVector@_K@@QBEIXZ	; CRecordVector<unsigned __int64>::Size
	cmp	DWORD PTR _startPackIndex$76927[ebp], eax
	jae	SHORT $LN47@Update
; Line 2199
	mov	ecx, DWORD PTR _startPackIndex$76927[ebp]
	push	ecx
	mov	ecx, DWORD PTR _newDatabase$[ebp]
	add	ecx, 48					; 00000030H
	call	??A?$CRecordVector@_K@@QAEAA_KI@Z	; CRecordVector<unsigned __int64>::operator[]
	mov	edx, DWORD PTR _lps$[ebp]
	mov	ecx, DWORD PTR [edx+40]
	add	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx+44]
	adc	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _lps$[ebp]
	mov	DWORD PTR [eax+40], ecx
	mov	DWORD PTR [eax+44], edx
	jmp	SHORT $LN48@Update
$LN47@Update:
; Line 2200
	mov	ecx, DWORD PTR _lps$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	add	edx, DWORD PTR _curUnpackSize$76928[ebp]
	mov	eax, DWORD PTR [ecx+36]
	adc	eax, DWORD PTR _curUnpackSize$76928[ebp+4]
	mov	ecx, DWORD PTR _lps$[ebp]
	mov	DWORD PTR [ecx+32], edx
	mov	DWORD PTR [ecx+36], eax
; Line 2201
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	lea	ecx, DWORD PTR _extractStatuses$76909[ebp]
	call	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
$LN80@Update:
; Line 2203
	mov	edx, DWORD PTR _rep$76874[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _newDatabase$[ebp]
	add	ecx, 24					; 00000018H
	call	?Add@?$CRecordVector@I@@QAEII@Z		; CRecordVector<unsigned int>::Add
; Line 2205
	mov	DWORD PTR _indexInFolder$77012[ebp], 0
; Line 2206
	mov	ecx, DWORD PTR _db$[ebp]
	add	ecx, 280				; 00000118H
	call	??B?$CObjArray@I@@QBEPBIXZ		; CObjArray<unsigned int>::operator unsigned int const *
	mov	ecx, DWORD PTR _folderIndex$76875[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _fi$77013[ebp], edx
	jmp	SHORT $LN46@Update
$LN45@Update:
	mov	eax, DWORD PTR _fi$77013[ebp]
	add	eax, 1
	mov	DWORD PTR _fi$77013[ebp], eax
$LN46@Update:
	mov	ecx, DWORD PTR _indexInFolder$77012[ebp]
	cmp	ecx, DWORD PTR _numUnpackStreams$76876[ebp]
	jae	$LN44@Update
; Line 2208
	lea	ecx, DWORD PTR _file$77017[ebp]
	call	??0CFileItem@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CFileItem::CFileItem
; Line 2210
	lea	edx, DWORD PTR _file2$77018[ebp]
	push	edx
	lea	eax, DWORD PTR _file$77017[ebp]
	push	eax
	mov	ecx, DWORD PTR _fi$77013[ebp]
	push	ecx
	mov	edx, DWORD PTR _db$[ebp]
	push	edx
	call	?GetFile@N7z@NArchive@@YGXABUCDatabase@12@IAAUCFileItem@12@AAUCFileItem2@12@@Z ; NArchive::N7z::GetFile
; Line 2211
	lea	ecx, DWORD PTR _name$77019[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 26		; 0000001aH
; Line 2212
	lea	eax, DWORD PTR _name$77019[ebp]
	push	eax
	mov	ecx, DWORD PTR _fi$77013[ebp]
	push	ecx
	mov	ecx, DWORD PTR _db$[ebp]
	call	?GetPath@CDatabase@N7z@NArchive@@QBEXIAAVUString@@@Z ; NArchive::N7z::CDatabase::GetPath
; Line 2213
	movzx	edx, BYTE PTR _file$77017[ebp+16]
	test	edx, edx
	je	$LN43@Update
; Line 2215
	mov	eax, DWORD PTR _indexInFolder$77012[ebp]
	add	eax, 1
	mov	DWORD PTR _indexInFolder$77012[ebp], eax
; Line 2216
	lea	ecx, DWORD PTR _fileIndexToUpdateIndexMap$[ebp]
	call	??B?$CObjArray@H@@QAEPAHXZ		; CObjArray<int>::operator int *
	mov	ecx, DWORD PTR _fi$77013[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _updateIndex$77021[ebp], edx
; Line 2217
	cmp	DWORD PTR _updateIndex$77021[ebp], 0
	jl	$LN43@Update
; Line 2219
	mov	eax, DWORD PTR _updateIndex$77021[ebp]
	push	eax
	mov	ecx, DWORD PTR _updateItems$[ebp]
	call	??A?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QBEABUCUpdateItem@N7z@NArchive@@I@Z ; CObjectVector<NArchive::N7z::CUpdateItem>::operator[]
	mov	DWORD PTR _ui$77023[ebp], eax
; Line 2220
	mov	ecx, DWORD PTR _ui$77023[ebp]
	movzx	edx, BYTE PTR [ecx+56]
	test	edx, edx
	je	SHORT $LN41@Update
; Line 2221
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	lea	ecx, DWORD PTR _name$77019[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	jmp	$LN45@Update
$LN41@Update:
; Line 2222
	mov	eax, DWORD PTR _ui$77023[ebp]
	movzx	ecx, BYTE PTR [eax+57]
	test	ecx, ecx
	je	$LN40@Update
; Line 2224
	lea	ecx, DWORD PTR _uf$77026[ebp]
	call	??0CFileItem@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CFileItem::CFileItem
; Line 2225
	lea	edx, DWORD PTR _file2$77018[ebp]
	push	edx
	lea	eax, DWORD PTR _uf$77026[ebp]
	push	eax
	mov	ecx, DWORD PTR _ui$77023[ebp]
	push	ecx
	call	?FromUpdateItemToFileItem@N7z@NArchive@@YGXABUCUpdateItem@12@AAUCFileItem@12@AAUCFileItem2@12@@Z ; NArchive::N7z::FromUpdateItemToFileItem
; Line 2226
	mov	edx, DWORD PTR _file$77017[ebp]
	mov	DWORD PTR _uf$77026[ebp], edx
	mov	eax, DWORD PTR _file$77017[ebp+4]
	mov	DWORD PTR _uf$77026[ebp+4], eax
; Line 2227
	mov	ecx, DWORD PTR _file$77017[ebp+12]
	mov	DWORD PTR _uf$77026[ebp+12], ecx
; Line 2228
	mov	dl, BYTE PTR _file$77017[ebp+18]
	mov	BYTE PTR _uf$77026[ebp+18], dl
; Line 2229
	mov	al, BYTE PTR _file$77017[ebp+16]
	mov	BYTE PTR _uf$77026[ebp+16], al
; Line 2230
	mov	ecx, DWORD PTR _uf$77026[ebp]
	mov	DWORD PTR _file$77017[ebp], ecx
	mov	edx, DWORD PTR _uf$77026[ebp+4]
	mov	DWORD PTR _file$77017[ebp+4], edx
	mov	eax, DWORD PTR _uf$77026[ebp+8]
	mov	DWORD PTR _file$77017[ebp+8], eax
	mov	ecx, DWORD PTR _uf$77026[ebp+12]
	mov	DWORD PTR _file$77017[ebp+12], ecx
	mov	edx, DWORD PTR _uf$77026[ebp+16]
	mov	DWORD PTR _file$77017[ebp+16], edx
	mov	eax, DWORD PTR _uf$77026[ebp+20]
	mov	DWORD PTR _file$77017[ebp+20], eax
; Line 2231
	mov	ecx, DWORD PTR _ui$77023[ebp]
	add	ecx, 40					; 00000028H
	push	ecx
	lea	ecx, DWORD PTR _name$77019[ebp]
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
$LN40@Update:
; Line 2240
	lea	edx, DWORD PTR _name$77019[ebp]
	push	edx
	lea	eax, DWORD PTR _file2$77018[ebp]
	push	eax
	lea	ecx, DWORD PTR _file$77017[ebp]
	push	ecx
	mov	ecx, DWORD PTR _newDatabase$[ebp]
	call	?AddFile@CArchiveDatabaseOut@N7z@NArchive@@QAEXABUCFileItem@23@ABUCFileItem2@23@ABVUString@@@Z ; NArchive::N7z::CArchiveDatabaseOut::AddFile
$LN43@Update:
; Line 2243
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	lea	ecx, DWORD PTR _name$77019[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	jmp	$LN45@Update
$LN44@Update:
; Line 2244
	jmp	$LN97@Update
$LN96@Update:
; Line 2249
	mov	ecx, DWORD PTR _group$76869[ebp]
	call	?Size@?$CRecordVector@I@@QBEIXZ		; CRecordVector<unsigned int>::Size
	mov	DWORD PTR _numFiles$77027[ebp], eax
; Line 2250
	cmp	DWORD PTR _numFiles$77027[ebp], 0
	jne	SHORT $LN39@Update
; Line 2251
	mov	BYTE PTR __$EHRec$[ebp+8], 16		; 00000010H
	lea	ecx, DWORD PTR _encoder$76868[ebp]
	call	??1CEncoder@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CEncoder::~CEncoder
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _method$76859[ebp]
	call	??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
	jmp	$LN105@Update
$LN39@Update:
; Line 2252
	lea	ecx, DWORD PTR _refItems$77126[ebp]
	call	??0?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CRefItem>::CRecordVector<NArchive::N7z::CRefItem>
	mov	BYTE PTR __$EHRec$[ebp+8], 27		; 0000001bH
; Line 2253
	mov	edx, DWORD PTR _numFiles$77027[ebp]
	push	edx
	lea	ecx, DWORD PTR _refItems$77126[ebp]
	call	?ClearAndSetSize@?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEXI@Z ; CRecordVector<NArchive::N7z::CRefItem>::ClearAndSetSize
; Line 2254
	cmp	DWORD PTR _numSolidFiles$[ebp+4], 0
	ja	SHORT $LN251@Update
	cmp	DWORD PTR _numSolidFiles$[ebp], 1
	jbe	SHORT $LN206@Update
$LN251@Update:
	mov	DWORD PTR tv1320[ebp], 1
	jmp	SHORT $LN207@Update
$LN206@Update:
	mov	DWORD PTR tv1320[ebp], 0
$LN207@Update:
	mov	al, BYTE PTR tv1320[ebp]
	mov	BYTE PTR _sortByType$77127[ebp], al
; Line 2255
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN38@Update
$LN37@Update:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN38@Update:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _numFiles$77027[ebp]
	jae	SHORT $LN36@Update
; Line 2256
	movzx	eax, BYTE PTR _sortByType$77127[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _group$76869[ebp]
	call	??A?$CRecordVector@I@@QBEABII@Z		; CRecordVector<unsigned int>::operator[]
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _updateItems$[ebp]
	call	??A?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QBEABUCUpdateItem@N7z@NArchive@@I@Z ; CObjectVector<NArchive::N7z::CUpdateItem>::operator[]
	push	eax
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _group$76869[ebp]
	call	??A?$CRecordVector@I@@QBEABII@Z		; CRecordVector<unsigned int>::operator[]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR $T79426[ebp]
	call	??0CRefItem@N7z@NArchive@@QAE@IABUCUpdateItem@12@_N@Z ; NArchive::N7z::CRefItem::CRefItem
	mov	esi, eax
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	lea	ecx, DWORD PTR _refItems$77126[ebp]
	call	??A?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEAAUCRefItem@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CRefItem>::operator[]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [esi+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [esi+12]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR [esi+16]
	mov	DWORD PTR [eax+16], ecx
	jmp	$LN37@Update
$LN36@Update:
; Line 2259
	mov	dl, BYTE PTR _sortByType$77127[ebp]
	mov	BYTE PTR _sortParam$77132[ebp], dl
; Line 2260
	lea	eax, DWORD PTR _sortParam$77132[ebp]
	push	eax
	push	OFFSET ?CompareUpdateItems@N7z@NArchive@@YGHPBUCRefItem@12@0PAX@Z ; NArchive::N7z::CompareUpdateItems
	lea	ecx, DWORD PTR _refItems$77126[ebp]
	call	?Sort@?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEXP6GHPBUCRefItem@N7z@NArchive@@0PAX@Z1@Z ; CRecordVector<NArchive::N7z::CRefItem>::Sort
; Line 2262
	mov	ecx, DWORD PTR _numFiles$77027[ebp]
	push	ecx
	lea	ecx, DWORD PTR _indices$77135[ebp]
	call	??0?$CObjArray@I@@QAE@I@Z		; CObjArray<unsigned int>::CObjArray<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 28		; 0000001cH
; Line 2264
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN35@Update
$LN34@Update:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN35@Update:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _numFiles$77027[ebp]
	jae	SHORT $LN33@Update
; Line 2266
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _refItems$77126[ebp]
	call	??A?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEAAUCRefItem@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CRefItem>::operator[]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _index$77139[ebp], edx
; Line 2267
	lea	ecx, DWORD PTR _indices$77135[ebp]
	call	??B?$CObjArray@I@@QAEPAIXZ		; CObjArray<unsigned int>::operator unsigned int *
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _index$77139[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 2279
	jmp	SHORT $LN34@Update
$LN33@Update:
; Line 2281
	mov	DWORD PTR _i$[ebp], 0
$LN32@Update:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _numFiles$77027[ebp]
	jae	$LN31@Update
; Line 2283
	mov	DWORD PTR _totalSize$77143[ebp], 0
	mov	DWORD PTR _totalSize$77143[ebp+4], 0
; Line 2286
	mov	DWORD PTR _prevExtension$77145[ebp], 0
; Line 2288
	mov	DWORD PTR _numSubFiles$77144[ebp], 0
	jmp	SHORT $LN30@Update
$LN29@Update:
	mov	ecx, DWORD PTR _numSubFiles$77144[ebp]
	add	ecx, 1
	mov	DWORD PTR _numSubFiles$77144[ebp], ecx
$LN30@Update:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, DWORD PTR _numSubFiles$77144[ebp]
	cmp	edx, DWORD PTR _numFiles$77027[ebp]
	jae	$LN28@Update
	mov	eax, DWORD PTR _numSubFiles$77144[ebp]
	xor	ecx, ecx
	mov	DWORD PTR tv2841[ebp], eax
	mov	DWORD PTR tv2841[ebp+4], ecx
	mov	edx, DWORD PTR tv2841[ebp+4]
	cmp	edx, DWORD PTR _numSolidFiles$[ebp+4]
	ja	$LN28@Update
	jb	SHORT $LN252@Update
	mov	eax, DWORD PTR tv2841[ebp]
	cmp	eax, DWORD PTR _numSolidFiles$[ebp]
	jae	$LN28@Update
$LN252@Update:
; Line 2290
	lea	ecx, DWORD PTR _indices$77135[ebp]
	call	??B?$CObjArray@I@@QAEPAIXZ		; CObjArray<unsigned int>::operator unsigned int *
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, DWORD PTR _numSubFiles$77144[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	ecx, DWORD PTR _updateItems$[ebp]
	call	??A?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QBEABUCUpdateItem@N7z@NArchive@@I@Z ; CObjectVector<NArchive::N7z::CUpdateItem>::operator[]
	mov	DWORD PTR _ui$77149[ebp], eax
; Line 2291
	mov	eax, DWORD PTR _ui$77149[ebp]
	mov	ecx, DWORD PTR _totalSize$77143[ebp]
	add	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _totalSize$77143[ebp+4]
	adc	edx, DWORD PTR [eax+36]
	mov	DWORD PTR _totalSize$77143[ebp], ecx
	mov	DWORD PTR _totalSize$77143[ebp+4], edx
; Line 2292
	mov	eax, DWORD PTR _options$[ebp]
	mov	DWORD PTR tv2860[ebp], eax
	mov	ecx, DWORD PTR tv2860[ebp]
	mov	edx, DWORD PTR _totalSize$77143[ebp+4]
	cmp	edx, DWORD PTR [ecx+36]
	jb	SHORT $LN27@Update
	ja	SHORT $LN253@Update
	mov	eax, DWORD PTR tv2860[ebp]
	mov	ecx, DWORD PTR _totalSize$77143[ebp]
	cmp	ecx, DWORD PTR [eax+32]
	jbe	SHORT $LN27@Update
$LN253@Update:
; Line 2293
	jmp	$LN28@Update
$LN27@Update:
; Line 2294
	mov	edx, DWORD PTR _options$[ebp]
	movzx	eax, BYTE PTR [edx+40]
	test	eax, eax
	je	$LN26@Update
; Line 2296
	mov	ecx, DWORD PTR _ui$77149[ebp]
	add	ecx, 40					; 00000028H
	call	?ReverseFind_PathSepar@UString@@QBEHXZ	; UString::ReverseFind_PathSepar
	mov	DWORD PTR _slashPos$77152[ebp], eax
; Line 2297
	mov	ecx, DWORD PTR _ui$77149[ebp]
	add	ecx, 40					; 00000028H
	call	?ReverseFind_Dot@UString@@QBEHXZ	; UString::ReverseFind_Dot
	mov	DWORD PTR _dotPos$77153[ebp], eax
; Line 2298
	mov	ecx, DWORD PTR _dotPos$77153[ebp]
	cmp	ecx, DWORD PTR _slashPos$77152[ebp]
	jg	SHORT $LN208@Update
	mov	ecx, DWORD PTR _ui$77149[ebp]
	add	ecx, 40					; 00000028H
	call	?Len@UString@@QBEIXZ			; UString::Len
	mov	DWORD PTR tv1394[ebp], eax
	jmp	SHORT $LN209@Update
$LN208@Update:
	mov	edx, DWORD PTR _dotPos$77153[ebp]
	add	edx, 1
	mov	DWORD PTR tv1394[ebp], edx
$LN209@Update:
	mov	eax, DWORD PTR tv1394[ebp]
	push	eax
	mov	ecx, DWORD PTR _ui$77149[ebp]
	add	ecx, 40					; 00000028H
	call	?Ptr@UString@@QBEPB_WI@Z		; UString::Ptr
	mov	DWORD PTR _ext$77154[ebp], eax
; Line 2299
	cmp	DWORD PTR _numSubFiles$77144[ebp], 0
	jne	SHORT $LN25@Update
; Line 2300
	mov	ecx, DWORD PTR _ext$77154[ebp]
	mov	DWORD PTR _prevExtension$77145[ebp], ecx
	jmp	SHORT $LN26@Update
$LN25@Update:
; Line 2301
	mov	edx, DWORD PTR _prevExtension$77145[ebp]
	push	edx
	mov	eax, DWORD PTR _ext$77154[ebp]
	push	eax
	call	?StringsAreEqualNoCase@@YG_NPB_W0@Z	; StringsAreEqualNoCase
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN26@Update
; Line 2302
	jmp	SHORT $LN28@Update
$LN26@Update:
; Line 2304
	jmp	$LN29@Update
$LN28@Update:
; Line 2306
	cmp	DWORD PTR _numSubFiles$77144[ebp], 1
	jae	SHORT $LN22@Update
; Line 2307
	mov	DWORD PTR _numSubFiles$77144[ebp], 1
$LN22@Update:
; Line 2309
	mov	ecx, DWORD PTR _lps$[ebp]
	call	?SetCur@CLocalProgress@@QAEJXZ		; CLocalProgress::SetCur
	mov	DWORD PTR ___result__$77159[ebp], eax
	cmp	DWORD PTR ___result__$77159[ebp], 0
	je	$LN21@Update
	mov	edx, DWORD PTR ___result__$77159[ebp]
	mov	DWORD PTR $T79429[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 27		; 0000001bH
	lea	ecx, DWORD PTR _indices$77135[ebp]
	call	??1?$CObjArray@I@@QAE@XZ		; CObjArray<unsigned int>::~CObjArray<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	lea	ecx, DWORD PTR _refItems$77126[ebp]
	call	??1?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CRefItem>::~CRecordVector<NArchive::N7z::CRefItem>
	mov	BYTE PTR __$EHRec$[ebp+8], 16		; 00000010H
	lea	ecx, DWORD PTR _encoder$76868[ebp]
	call	??1CEncoder@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CEncoder::~CEncoder
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _method$76859[ebp]
	call	??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _getTextPassword$[ebp]
	call	??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _threadDecoder$[ebp]
	call	??1CThreadDecoder@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CThreadDecoder::~CThreadDecoder
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _sb$[ebp]
	call	??1CStreamBinder@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _groups$[ebp]
	call	??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _filters$[ebp]
	call	??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _fileIndexToUpdateIndexMap$[ebp]
	call	??1?$CObjArray@H@@QAE@XZ		; CObjArray<int>::~CObjArray<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extractCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	eax, DWORD PTR $T79429[ebp]
	jmp	$LN188@Update
$LN21@Update:
; Line 2311
	push	96					; 00000060H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T79431[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 29		; 0000001dH
	cmp	DWORD PTR $T79431[ebp], 0
	je	SHORT $LN210@Update
	mov	ecx, DWORD PTR $T79431[ebp]
	call	??0CFolderInStream@N7z@NArchive@@QAE@XZ
	mov	DWORD PTR tv1445[ebp], eax
	jmp	SHORT $LN211@Update
$LN210@Update:
	mov	DWORD PTR tv1445[ebp], 0
$LN211@Update:
	mov	eax, DWORD PTR tv1445[ebp]
	mov	DWORD PTR $T79430[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 28		; 0000001cH
	mov	ecx, DWORD PTR $T79430[ebp]
	mov	DWORD PTR _inStreamSpec$77162[ebp], ecx
; Line 2312
	mov	edx, DWORD PTR _inStreamSpec$77162[ebp]
	push	edx
	lea	ecx, DWORD PTR _solidInStream$77168[ebp]
	call	??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 30		; 0000001eH
; Line 2313
	mov	eax, DWORD PTR _numSubFiles$77144[ebp]
	push	eax
	lea	ecx, DWORD PTR _indices$77135[ebp]
	call	??B?$CObjArray@I@@QAEPAIXZ		; CObjArray<unsigned int>::operator unsigned int *
	mov	ecx, DWORD PTR _i$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	eax, DWORD PTR _updateCallback$[ebp]
	push	eax
	mov	ecx, DWORD PTR _inStreamSpec$77162[ebp]
	call	?Init@CFolderInStream@N7z@NArchive@@QAEXPAUIArchiveUpdateCallback@@PBII@Z ; NArchive::N7z::CFolderInStream::Init
; Line 2315
	mov	ecx, DWORD PTR _newDatabase$[ebp]
	add	ecx, 48					; 00000030H
	call	?Size@?$CRecordVector@_K@@QBEIXZ	; CRecordVector<unsigned __int64>::Size
	mov	DWORD PTR _startPackIndex$77169[ebp], eax
; Line 2323
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *
	push	eax
	mov	ecx, DWORD PTR _newDatabase$[ebp]
	add	ecx, 48					; 00000030H
	push	ecx
	mov	ecx, DWORD PTR _archive$[ebp]
	add	ecx, 84					; 00000054H
	call	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
	push	eax
	lea	edx, DWORD PTR _curFolderUnpackSize$77170[ebp]
	push	edx
	mov	eax, DWORD PTR _newDatabase$[ebp]
	add	eax, 36					; 00000024H
	push	eax
	mov	ecx, DWORD PTR _newDatabase$[ebp]
	add	ecx, 84					; 00000054H
	call	?AddNew@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEAAUCFolder@N7z@NArchive@@XZ ; CObjectVector<NArchive::N7z::CFolder>::AddNew
	push	eax
	lea	ecx, DWORD PTR _inSizeForReduce$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _solidInStream$77168[ebp]
	call	??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
	push	eax
	lea	ecx, DWORD PTR _encoder$76868[ebp]
	call	?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z ; NArchive::N7z::CEncoder::Encode
	mov	DWORD PTR ___result__$77171[ebp], eax
	cmp	DWORD PTR ___result__$77171[ebp], 0
	je	$LN20@Update
	mov	edx, DWORD PTR ___result__$77171[ebp]
	mov	DWORD PTR $T79434[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 28		; 0000001cH
	lea	ecx, DWORD PTR _solidInStream$77168[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 27		; 0000001bH
	lea	ecx, DWORD PTR _indices$77135[ebp]
	call	??1?$CObjArray@I@@QAE@XZ		; CObjArray<unsigned int>::~CObjArray<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	lea	ecx, DWORD PTR _refItems$77126[ebp]
	call	??1?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CRefItem>::~CRecordVector<NArchive::N7z::CRefItem>
	mov	BYTE PTR __$EHRec$[ebp+8], 16		; 00000010H
	lea	ecx, DWORD PTR _encoder$76868[ebp]
	call	??1CEncoder@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CEncoder::~CEncoder
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _method$76859[ebp]
	call	??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _getTextPassword$[ebp]
	call	??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _threadDecoder$[ebp]
	call	??1CThreadDecoder@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CThreadDecoder::~CThreadDecoder
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _sb$[ebp]
	call	??1CStreamBinder@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _groups$[ebp]
	call	??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _filters$[ebp]
	call	??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _fileIndexToUpdateIndexMap$[ebp]
	call	??1?$CObjArray@H@@QAE@XZ		; CObjArray<int>::~CObjArray<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extractCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	eax, DWORD PTR $T79434[ebp]
	jmp	$LN188@Update
$LN20@Update:
; Line 2325
	mov	ecx, DWORD PTR _inStreamSpec$77162[ebp]
	call	?WasFinished@CFolderInStream@N7z@NArchive@@QBE_NXZ ; NArchive::N7z::CFolderInStream::WasFinished
	movzx	eax, al
	test	eax, eax
	jne	$LN19@Update
; Line 2326
	mov	DWORD PTR $T79435[ebp], -2147467259	; 80004005H
	mov	BYTE PTR __$EHRec$[ebp+8], 28		; 0000001cH
	lea	ecx, DWORD PTR _solidInStream$77168[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 27		; 0000001bH
	lea	ecx, DWORD PTR _indices$77135[ebp]
	call	??1?$CObjArray@I@@QAE@XZ		; CObjArray<unsigned int>::~CObjArray<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	lea	ecx, DWORD PTR _refItems$77126[ebp]
	call	??1?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CRefItem>::~CRecordVector<NArchive::N7z::CRefItem>
	mov	BYTE PTR __$EHRec$[ebp+8], 16		; 00000010H
	lea	ecx, DWORD PTR _encoder$76868[ebp]
	call	??1CEncoder@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CEncoder::~CEncoder
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _method$76859[ebp]
	call	??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _getTextPassword$[ebp]
	call	??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _threadDecoder$[ebp]
	call	??1CThreadDecoder@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CThreadDecoder::~CThreadDecoder
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _sb$[ebp]
	call	??1CStreamBinder@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _groups$[ebp]
	call	??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _filters$[ebp]
	call	??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _fileIndexToUpdateIndexMap$[ebp]
	call	??1?$CObjArray@H@@QAE@XZ		; CObjArray<int>::~CObjArray<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extractCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	eax, DWORD PTR $T79435[ebp]
	jmp	$LN188@Update
$LN19@Update:
; Line 2328
	jmp	SHORT $LN18@Update
$LN17@Update:
	mov	ecx, DWORD PTR _startPackIndex$77169[ebp]
	add	ecx, 1
	mov	DWORD PTR _startPackIndex$77169[ebp], ecx
$LN18@Update:
	mov	ecx, DWORD PTR _newDatabase$[ebp]
	add	ecx, 48					; 00000030H
	call	?Size@?$CRecordVector@_K@@QBEIXZ	; CRecordVector<unsigned __int64>::Size
	cmp	DWORD PTR _startPackIndex$77169[ebp], eax
	jae	SHORT $LN16@Update
; Line 2329
	mov	edx, DWORD PTR _startPackIndex$77169[ebp]
	push	edx
	mov	ecx, DWORD PTR _newDatabase$[ebp]
	add	ecx, 48					; 00000030H
	call	??A?$CRecordVector@_K@@QAEAA_KI@Z	; CRecordVector<unsigned __int64>::operator[]
	mov	ecx, DWORD PTR _lps$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	add	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+44]
	adc	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _lps$[ebp]
	mov	DWORD PTR [eax+40], edx
	mov	DWORD PTR [eax+44], ecx
	jmp	SHORT $LN17@Update
$LN16@Update:
; Line 2331
	mov	ecx, DWORD PTR _lps$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	add	edx, DWORD PTR _curFolderUnpackSize$77170[ebp]
	mov	eax, DWORD PTR [ecx+36]
	adc	eax, DWORD PTR _curFolderUnpackSize$77170[ebp+4]
	mov	ecx, DWORD PTR _lps$[ebp]
	mov	DWORD PTR [ecx+32], edx
	mov	DWORD PTR [ecx+36], eax
; Line 2336
	mov	DWORD PTR _numUnpackStreams$77180[ebp], 0
; Line 2337
	mov	DWORD PTR _skippedSize$77181[ebp], 0
	mov	DWORD PTR _skippedSize$77181[ebp+4], 0
; Line 2339
	mov	DWORD PTR _subIndex$77182[ebp], 0
	jmp	SHORT $LN15@Update
$LN14@Update:
	mov	edx, DWORD PTR _subIndex$77182[ebp]
	add	edx, 1
	mov	DWORD PTR _subIndex$77182[ebp], edx
$LN15@Update:
	mov	eax, DWORD PTR _subIndex$77182[ebp]
	cmp	eax, DWORD PTR _numSubFiles$77144[ebp]
	jae	$LN13@Update
; Line 2341
	lea	ecx, DWORD PTR _indices$77135[ebp]
	call	??B?$CObjArray@I@@QAEPAIXZ		; CObjArray<unsigned int>::operator unsigned int *
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, DWORD PTR _subIndex$77182[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	ecx, DWORD PTR _updateItems$[ebp]
	call	??A?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QBEABUCUpdateItem@N7z@NArchive@@I@Z ; CObjectVector<NArchive::N7z::CUpdateItem>::operator[]
	mov	DWORD PTR _ui$77186[ebp], eax
; Line 2342
	lea	ecx, DWORD PTR _file$77187[ebp]
	call	??0CFileItem@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CFileItem::CFileItem
; Line 2344
	lea	ecx, DWORD PTR _name$77189[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 31		; 0000001fH
; Line 2345
	mov	eax, DWORD PTR _ui$77186[ebp]
	movzx	ecx, BYTE PTR [eax+57]
	test	ecx, ecx
	je	SHORT $LN12@Update
; Line 2347
	lea	edx, DWORD PTR _file2$77188[ebp]
	push	edx
	lea	eax, DWORD PTR _file$77187[ebp]
	push	eax
	mov	ecx, DWORD PTR _ui$77186[ebp]
	push	ecx
	call	?FromUpdateItemToFileItem@N7z@NArchive@@YGXABUCUpdateItem@12@AAUCFileItem@12@AAUCFileItem2@12@@Z ; NArchive::N7z::FromUpdateItemToFileItem
; Line 2348
	mov	edx, DWORD PTR _ui$77186[ebp]
	add	edx, 40					; 00000028H
	push	edx
	lea	ecx, DWORD PTR _name$77189[ebp]
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
; Line 2350
	jmp	SHORT $LN11@Update
$LN12@Update:
; Line 2352
	lea	eax, DWORD PTR _file2$77188[ebp]
	push	eax
	lea	ecx, DWORD PTR _file$77187[ebp]
	push	ecx
	mov	edx, DWORD PTR _ui$77186[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _db$[ebp]
	push	ecx
	call	?GetFile@N7z@NArchive@@YGXABUCDatabase@12@IAAUCFileItem@12@AAUCFileItem2@12@@Z ; NArchive::N7z::GetFile
; Line 2353
	lea	edx, DWORD PTR _name$77189[ebp]
	push	edx
	mov	eax, DWORD PTR _ui$77186[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _db$[ebp]
	call	?GetPath@CDatabase@N7z@NArchive@@QBEXIAAVUString@@@Z ; NArchive::N7z::CDatabase::GetPath
$LN11@Update:
; Line 2355
	movzx	edx, BYTE PTR _file2$77188[ebp+36]
	test	edx, edx
	jne	SHORT $LN9@Update
	movzx	eax, BYTE PTR _file$77187[ebp+17]
	test	eax, eax
	je	$LN10@Update
$LN9@Update:
; Line 2356
	mov	DWORD PTR $T79436[ebp], -2147467259	; 80004005H
	mov	BYTE PTR __$EHRec$[ebp+8], 30		; 0000001eH
	lea	ecx, DWORD PTR _name$77189[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 28		; 0000001cH
	lea	ecx, DWORD PTR _solidInStream$77168[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 27		; 0000001bH
	lea	ecx, DWORD PTR _indices$77135[ebp]
	call	??1?$CObjArray@I@@QAE@XZ		; CObjArray<unsigned int>::~CObjArray<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	lea	ecx, DWORD PTR _refItems$77126[ebp]
	call	??1?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CRefItem>::~CRecordVector<NArchive::N7z::CRefItem>
	mov	BYTE PTR __$EHRec$[ebp+8], 16		; 00000010H
	lea	ecx, DWORD PTR _encoder$76868[ebp]
	call	??1CEncoder@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CEncoder::~CEncoder
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _method$76859[ebp]
	call	??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _getTextPassword$[ebp]
	call	??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _threadDecoder$[ebp]
	call	??1CThreadDecoder@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CThreadDecoder::~CThreadDecoder
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _sb$[ebp]
	call	??1CStreamBinder@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _groups$[ebp]
	call	??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _filters$[ebp]
	call	??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _fileIndexToUpdateIndexMap$[ebp]
	call	??1?$CObjArray@H@@QAE@XZ		; CObjArray<int>::~CObjArray<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extractCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	eax, DWORD PTR $T79436[ebp]
	jmp	$LN188@Update
$LN10@Update:
; Line 2362
	mov	ecx, DWORD PTR _subIndex$77182[ebp]
	push	ecx
	mov	ecx, DWORD PTR _inStreamSpec$77162[ebp]
	add	ecx, 56					; 00000038H
	call	??A?$CRecordVector@_N@@QAEAA_NI@Z	; CRecordVector<bool>::operator[]
	movzx	edx, BYTE PTR [eax]
	test	edx, edx
	jne	SHORT $LN8@Update
; Line 2364
	mov	eax, DWORD PTR _ui$77186[ebp]
	mov	ecx, DWORD PTR _skippedSize$77181[ebp]
	add	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _skippedSize$77181[ebp+4]
	adc	edx, DWORD PTR [eax+36]
	mov	DWORD PTR _skippedSize$77181[ebp], ecx
	mov	DWORD PTR _skippedSize$77181[ebp+4], edx
; Line 2365
	mov	BYTE PTR __$EHRec$[ebp+8], 30		; 0000001eH
	lea	ecx, DWORD PTR _name$77189[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	jmp	$LN14@Update
$LN8@Update:
; Line 2369
	mov	eax, DWORD PTR _subIndex$77182[ebp]
	push	eax
	mov	ecx, DWORD PTR _inStreamSpec$77162[ebp]
	add	ecx, 68					; 00000044H
	call	??A?$CRecordVector@I@@QAEAAII@Z		; CRecordVector<unsigned int>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _file$77187[ebp+12], ecx
; Line 2370
	mov	edx, DWORD PTR _subIndex$77182[ebp]
	push	edx
	mov	ecx, DWORD PTR _inStreamSpec$77162[ebp]
	add	ecx, 80					; 00000050H
	call	??A?$CRecordVector@_K@@QAEAA_KI@Z	; CRecordVector<unsigned __int64>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _file$77187[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _file$77187[ebp+4], edx
; Line 2373
	mov	eax, DWORD PTR _file$77187[ebp]
	or	eax, DWORD PTR _file$77187[ebp+4]
	je	SHORT $LN7@Update
; Line 2375
	mov	BYTE PTR _file$77187[ebp+18], 1
; Line 2376
	mov	BYTE PTR _file$77187[ebp+16], 1
; Line 2377
	mov	ecx, DWORD PTR _numUnpackStreams$77180[ebp]
	add	ecx, 1
	mov	DWORD PTR _numUnpackStreams$77180[ebp], ecx
; Line 2379
	jmp	SHORT $LN6@Update
$LN7@Update:
; Line 2381
	mov	BYTE PTR _file$77187[ebp+18], 0
; Line 2382
	mov	BYTE PTR _file$77187[ebp+16], 0
$LN6@Update:
; Line 2392
	lea	edx, DWORD PTR _name$77189[ebp]
	push	edx
	lea	eax, DWORD PTR _file2$77188[ebp]
	push	eax
	lea	ecx, DWORD PTR _file$77187[ebp]
	push	ecx
	mov	ecx, DWORD PTR _newDatabase$[ebp]
	call	?AddFile@CArchiveDatabaseOut@N7z@NArchive@@QAEXABUCFileItem@23@ABUCFileItem2@23@ABVUString@@@Z ; NArchive::N7z::CArchiveDatabaseOut::AddFile
; Line 2393
	mov	BYTE PTR __$EHRec$[ebp+8], 30		; 0000001eH
	lea	ecx, DWORD PTR _name$77189[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	jmp	$LN14@Update
$LN13@Update:
; Line 2397
	mov	edx, DWORD PTR _numUnpackStreams$77180[ebp]
	push	edx
	mov	ecx, DWORD PTR _newDatabase$[ebp]
	add	ecx, 24					; 00000018H
	call	?Add@?$CRecordVector@I@@QAEII@Z		; CRecordVector<unsigned int>::Add
; Line 2398
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _numSubFiles$77144[ebp]
	mov	DWORD PTR _i$[ebp], eax
; Line 2400
	mov	ecx, DWORD PTR _skippedSize$77181[ebp]
	or	ecx, DWORD PTR _skippedSize$77181[ebp+4]
	je	$LN5@Update
	mov	edx, DWORD PTR _complexity$[ebp+4]
	cmp	edx, DWORD PTR _skippedSize$77181[ebp+4]
	jb	$LN5@Update
	ja	SHORT $LN254@Update
	mov	eax, DWORD PTR _complexity$[ebp]
	cmp	eax, DWORD PTR _skippedSize$77181[ebp]
	jb	$LN5@Update
$LN254@Update:
; Line 2402
	mov	ecx, DWORD PTR _complexity$[ebp]
	sub	ecx, DWORD PTR _skippedSize$77181[ebp]
	mov	edx, DWORD PTR _complexity$[ebp+4]
	sbb	edx, DWORD PTR _skippedSize$77181[ebp+4]
	mov	DWORD PTR _complexity$[ebp], ecx
	mov	DWORD PTR _complexity$[ebp+4], edx
; Line 2403
	mov	esi, esp
	mov	eax, DWORD PTR _complexity$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _complexity$[ebp]
	push	ecx
	mov	edx, DWORD PTR _updateCallback$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _updateCallback$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$77200[ebp], eax
	cmp	DWORD PTR ___result__$77200[ebp], 0
	je	$LN5@Update
	mov	eax, DWORD PTR ___result__$77200[ebp]
	mov	DWORD PTR $T79437[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 28		; 0000001cH
	lea	ecx, DWORD PTR _solidInStream$77168[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 27		; 0000001bH
	lea	ecx, DWORD PTR _indices$77135[ebp]
	call	??1?$CObjArray@I@@QAE@XZ		; CObjArray<unsigned int>::~CObjArray<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	lea	ecx, DWORD PTR _refItems$77126[ebp]
	call	??1?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CRefItem>::~CRecordVector<NArchive::N7z::CRefItem>
	mov	BYTE PTR __$EHRec$[ebp+8], 16		; 00000010H
	lea	ecx, DWORD PTR _encoder$76868[ebp]
	call	??1CEncoder@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CEncoder::~CEncoder
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _method$76859[ebp]
	call	??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _getTextPassword$[ebp]
	call	??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _threadDecoder$[ebp]
	call	??1CThreadDecoder@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CThreadDecoder::~CThreadDecoder
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _sb$[ebp]
	call	??1CStreamBinder@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _groups$[ebp]
	call	??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _filters$[ebp]
	call	??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _fileIndexToUpdateIndexMap$[ebp]
	call	??1?$CObjArray@H@@QAE@XZ		; CObjArray<int>::~CObjArray<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extractCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	eax, DWORD PTR $T79437[ebp]
	jmp	$LN188@Update
$LN5@Update:
; Line 2405
	mov	BYTE PTR __$EHRec$[ebp+8], 28		; 0000001cH
	lea	ecx, DWORD PTR _solidInStream$77168[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	jmp	$LN32@Update
$LN31@Update:
; Line 2406
	mov	BYTE PTR __$EHRec$[ebp+8], 27		; 0000001bH
	lea	ecx, DWORD PTR _indices$77135[ebp]
	call	??1?$CObjArray@I@@QAE@XZ		; CObjArray<unsigned int>::~CObjArray<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	lea	ecx, DWORD PTR _refItems$77126[ebp]
	call	??1?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CRefItem>::~CRecordVector<NArchive::N7z::CRefItem>
	mov	BYTE PTR __$EHRec$[ebp+8], 16		; 00000010H
	lea	ecx, DWORD PTR _encoder$76868[ebp]
	call	??1CEncoder@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CEncoder::~CEncoder
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _method$76859[ebp]
	call	??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
	jmp	$LN105@Update
$LN104@Update:
; Line 2408
	mov	ecx, DWORD PTR _lps$[ebp]
	call	?SetCur@CLocalProgress@@QAEJXZ		; CLocalProgress::SetCur
	mov	DWORD PTR ___result__$77203[ebp], eax
	cmp	DWORD PTR ___result__$77203[ebp], 0
	je	$LN3@Update
	mov	ecx, DWORD PTR ___result__$77203[ebp]
	mov	DWORD PTR $T79438[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _getTextPassword$[ebp]
	call	??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _threadDecoder$[ebp]
	call	??1CThreadDecoder@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CThreadDecoder::~CThreadDecoder
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _sb$[ebp]
	call	??1CStreamBinder@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _groups$[ebp]
	call	??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _filters$[ebp]
	call	??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _fileIndexToUpdateIndexMap$[ebp]
	call	??1?$CObjArray@H@@QAE@XZ		; CObjArray<int>::~CObjArray<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extractCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	eax, DWORD PTR $T79438[ebp]
	jmp	$LN188@Update
$LN3@Update:
; Line 2438
	mov	ecx, DWORD PTR _newDatabase$[ebp]
	call	?ReserveDown@CArchiveDatabaseOut@N7z@NArchive@@QAEXXZ ; NArchive::N7z::CArchiveDatabaseOut::ReserveDown
; Line 2440
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??B?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator IArchiveUpdateCallbackFile *
	test	eax, eax
	je	$LN2@Update
; Line 2441
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??C?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::operator->
	mov	DWORD PTR tv1605[ebp], eax
	mov	esi, esp
	push	7
	push	-1
	push	0
	mov	edx, DWORD PTR tv1605[ebp]
	push	edx
	mov	eax, DWORD PTR tv1605[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$77207[ebp], eax
	cmp	DWORD PTR ___result__$77207[ebp], 0
	je	$LN2@Update
	mov	eax, DWORD PTR ___result__$77207[ebp]
	mov	DWORD PTR $T79439[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _getTextPassword$[ebp]
	call	??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _threadDecoder$[ebp]
	call	??1CThreadDecoder@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CThreadDecoder::~CThreadDecoder
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _sb$[ebp]
	call	??1CStreamBinder@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _groups$[ebp]
	call	??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _filters$[ebp]
	call	??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _fileIndexToUpdateIndexMap$[ebp]
	call	??1?$CObjArray@H@@QAE@XZ		; CObjArray<int>::~CObjArray<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extractCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	eax, DWORD PTR $T79439[ebp]
	jmp	$LN188@Update
$LN2@Update:
; Line 2443
	mov	DWORD PTR $T79440[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _getTextPassword$[ebp]
	call	??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _threadDecoder$[ebp]
	call	??1CThreadDecoder@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CThreadDecoder::~CThreadDecoder
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR _sb$[ebp]
	call	??1CStreamBinder@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _progress$[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _groups$[ebp]
	call	??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _filters$[ebp]
	call	??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _fileIndexToUpdateIndexMap$[ebp]
	call	??1?$CObjArray@H@@QAE@XZ		; CObjArray<int>::~CObjArray<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _extractCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _opCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	eax, DWORD PTR $T79440[ebp]
$LN188@Update:
; Line 2444
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN299@Update
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1996				; 000007ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
	npad	2
$LN299@Update:
	DD	42					; 0000002aH
	DD	$LN298@Update
$LN298@Update:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN255@Update
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN256@Update
	DD	-68					; ffffffbcH
	DD	4
	DD	$LN257@Update
	DD	-108					; ffffff94H
	DD	12					; 0000000cH
	DD	$LN258@Update
	DD	-128					; ffffff80H
	DD	12					; 0000000cH
	DD	$LN259@Update
	DD	-188					; ffffff44H
	DD	8
	DD	$LN260@Update
	DD	-224					; ffffff20H
	DD	28					; 0000001cH
	DD	$LN261@Update
	DD	-248					; ffffff08H
	DD	8
	DD	$LN262@Update
	DD	-276					; fffffeecH
	DD	4
	DD	$LN263@Update
	DD	-316					; fffffec4H
	DD	32					; 00000020H
	DD	$LN264@Update
	DD	-496					; fffffe10H
	DD	168					; 000000a8H
	DD	$LN265@Update
	DD	-524					; fffffdf4H
	DD	16					; 00000010H
	DD	$LN266@Update
	DD	-560					; fffffdd0H
	DD	16					; 00000010H
	DD	$LN267@Update
	DD	-584					; fffffdb8H
	DD	4
	DD	$LN268@Update
	DD	-596					; fffffdacH
	DD	4
	DD	$LN269@Update
	DD	-628					; fffffd8cH
	DD	12					; 0000000cH
	DD	$LN270@Update
	DD	-668					; fffffd64H
	DD	24					; 00000018H
	DD	$LN271@Update
	DD	-716					; fffffd34H
	DD	40					; 00000028H
	DD	$LN272@Update
	DD	-736					; fffffd20H
	DD	12					; 0000000cH
	DD	$LN273@Update
	DD	-804					; fffffcdcH
	DD	48					; 00000030H
	DD	$LN274@Update
	DD	-1000					; fffffc18H
	DD	180					; 000000b4H
	DD	$LN275@Update
	DD	-1088					; fffffbc0H
	DD	12					; 0000000cH
	DD	$LN276@Update
	DD	-1140					; fffffb8cH
	DD	8
	DD	$LN277@Update
	DD	-1152					; fffffb80H
	DD	4
	DD	$LN278@Update
	DD	-1176					; fffffb68H
	DD	4
	DD	$LN279@Update
	DD	-1188					; fffffb5cH
	DD	4
	DD	$LN280@Update
	DD	-1197					; fffffb53H
	DD	1
	DD	$LN281@Update
	DD	-1209					; fffffb47H
	DD	1
	DD	$LN282@Update
	DD	-1232					; fffffb30H
	DD	12					; 0000000cH
	DD	$LN283@Update
	DD	-1244					; fffffb24H
	DD	4
	DD	$LN284@Update
	DD	-1332					; fffffaccH
	DD	24					; 00000018H
	DD	$LN285@Update
	DD	-1380					; fffffa9cH
	DD	40					; 00000028H
	DD	$LN286@Update
	DD	-1400					; fffffa88H
	DD	12					; 0000000cH
	DD	$LN287@Update
	DD	-1440					; fffffa60H
	DD	24					; 00000018H
	DD	$LN288@Update
	DD	-1464					; fffffa48H
	DD	12					; 0000000cH
	DD	$LN289@Update
	DD	-1477					; fffffa3bH
	DD	1
	DD	$LN290@Update
	DD	-1492					; fffffa2cH
	DD	4
	DD	$LN291@Update
	DD	-1548					; fffff9f4H
	DD	4
	DD	$LN292@Update
	DD	-1568					; fffff9e0H
	DD	8
	DD	$LN293@Update
	DD	-1624					; fffff9a8H
	DD	24					; 00000018H
	DD	$LN294@Update
	DD	-1672					; fffff978H
	DD	40					; 00000028H
	DD	$LN295@Update
	DD	-1692					; fffff964H
	DD	12					; 0000000cH
	DD	$LN296@Update
$LN296@Update:
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN295@Update:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	50					; 00000032H
	DB	0
$LN294@Update:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
$LN293@Update:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	70					; 00000046H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	85					; 00000055H
	DB	110					; 0000006eH
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN292@Update:
	DB	115					; 00000073H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN291@Update:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN290@Update:
	DB	115					; 00000073H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN289@Update:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	73					; 00000049H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	115					; 00000073H
	DB	0
$LN288@Update:
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN287@Update:
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN286@Update:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	50					; 00000032H
	DB	0
$LN285@Update:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
$LN284@Update:
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN283@Update:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	0
$LN282@Update:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	73					; 00000049H
	DB	115					; 00000073H
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$LN281@Update:
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	69					; 00000045H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$LN280@Update:
	DB	115					; 00000073H
	DB	98					; 00000062H
	DB	79					; 0000004fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN279@Update:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
$LN278@Update:
	DB	115					; 00000073H
	DB	98					; 00000062H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN277@Update:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	85					; 00000055H
	DB	110					; 0000006eH
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN276@Update:
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN275@Update:
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN274@Update:
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	0
$LN273@Update:
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN272@Update:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	50					; 00000032H
	DB	0
$LN271@Update:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
$LN270@Update:
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	121					; 00000079H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	0
$LN269@Update:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	0
$LN268@Update:
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	0
$LN267@Update:
	DB	102					; 00000066H
	DB	109					; 0000006dH
	DB	0
$LN266@Update:
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	121					; 00000079H
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	0
$LN265@Update:
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN264@Update:
	DB	115					; 00000073H
	DB	98					; 00000062H
	DB	0
$LN263@Update:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	103					; 00000067H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	0
$LN262@Update:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	70					; 00000046H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	117					; 00000075H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	0
$LN261@Update:
	DB	102					; 00000066H
	DB	0
$LN260@Update:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	112					; 00000070H
	DB	0
$LN259@Update:
	DB	103					; 00000067H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	112					; 00000070H
	DB	115					; 00000073H
	DB	0
$LN258@Update:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	0
$LN257@Update:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	84					; 00000054H
	DB	111					; 0000006fH
	DB	85					; 00000055H
	DB	112					; 00000070H
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	77					; 0000004dH
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	0
$LN256@Update:
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	98					; 00000062H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
$LN255@Update:
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	98					; 00000062H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$0:
	lea	ecx, DWORD PTR _opCallback$[ebp]
	jmp	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
__unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$1:
	lea	ecx, DWORD PTR _extractCallback$[ebp]
	jmp	??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>
__unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$2:
	lea	ecx, DWORD PTR _fileIndexToUpdateIndexMap$[ebp]
	jmp	??1?$CObjArray@H@@QAE@XZ		; CObjArray<int>::~CObjArray<int>
__unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$3:
	lea	ecx, DWORD PTR _filters$[ebp]
	jmp	??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>
__unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$4:
	lea	ecx, DWORD PTR _groups$[ebp]
	jmp	??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>
__unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$5:
	lea	ecx, DWORD PTR _f$76738[ebp]
	jmp	??1CFolderEx@N7z@NArchive@@QAE@XZ
__unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$6:
	mov	eax, DWORD PTR $T79378[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$7:
	lea	ecx, DWORD PTR _progress$[ebp]
	jmp	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
__unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$8:
	lea	ecx, DWORD PTR _sb$[ebp]
	jmp	??1CStreamBinder@@QAE@XZ
__unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$9:
	lea	ecx, DWORD PTR _threadDecoder$[ebp]
	jmp	??1CThreadDecoder@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CThreadDecoder::~CThreadDecoder
__unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$10:
	lea	ecx, DWORD PTR _analysis$76779[ebp]
	jmp	??1CAnalysis@N7z@NArchive@@QAE@XZ
__unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$11:
	lea	ecx, DWORD PTR _getTextPassword$[ebp]
	jmp	??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
__unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$12:
	mov	eax, DWORD PTR $T79385[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$13:
	lea	ecx, DWORD PTR _password$76820[ebp]
	jmp	??1CMyComBSTR@@QAE@XZ			; CMyComBSTR::~CMyComBSTR
__unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$14:
	lea	ecx, DWORD PTR _emptyRefs$76831[ebp]
	jmp	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
__unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$15:
	lea	ecx, DWORD PTR _name$76847[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$16:
	lea	ecx, DWORD PTR _method$76859[ebp]
	jmp	??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
__unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$17:
	lea	ecx, DWORD PTR _encoder$76868[ebp]
	jmp	??1CEncoder@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CEncoder::~CEncoder
__unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$18:
	lea	ecx, DWORD PTR _extractStatuses$76909[ebp]
	jmp	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
__unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$19:
	lea	ecx, DWORD PTR _sbInStream$76930[ebp]
	jmp	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
__unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$20:
	mov	eax, DWORD PTR $T79400[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$21:
	lea	ecx, DWORD PTR _inStreamSizeCount$76939[ebp]
	jmp	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
__unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$22:
	lea	ecx, DWORD PTR _sbOutStream$76942[ebp]
	jmp	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
__unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$23:
	mov	eax, DWORD PTR $T79406[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$24:
	lea	ecx, DWORD PTR _password$76951[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$25:
	lea	ecx, DWORD PTR _decodedStream$76953[ebp]
	jmp	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
__unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$26:
	lea	ecx, DWORD PTR _name$77019[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$27:
	lea	ecx, DWORD PTR _refItems$77126[ebp]
	jmp	??1?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CRefItem>::~CRecordVector<NArchive::N7z::CRefItem>
__unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$28:
	lea	ecx, DWORD PTR _indices$77135[ebp]
	jmp	??1?$CObjArray@I@@QAE@XZ		; CObjArray<unsigned int>::~CObjArray<unsigned int>
__unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$29:
	mov	eax, DWORD PTR $T79431[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$30:
	lea	ecx, DWORD PTR _solidInStream$77168[ebp]
	jmp	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
__unwindfunclet$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z$31:
	lea	ecx, DWORD PTR _name$77189[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-1996]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Update@N7z@NArchive@@YGJPAUIInStream@@PBUCDbEx@12@ABV?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@AAVCOutArchive@12@AAUCArchiveDatabaseOut@12@PAUISequentialOutStream@@PAUIArchiveUpdateCallback@@ABUCUpdateOptions@12@PAUICryptoGetTextPassword@@@Z ENDP ; NArchive::N7z::Update
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Len@UString@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Len@UString@@QBEIXZ PROC				; UString::Len, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 472
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Len@UString@@QBEIXZ ENDP				; UString::Len
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Empty@UString@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Empty@UString@@QAEXXZ PROC				; UString::Empty, COMDAT
; _this$ = ecx
; Line 474
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	xor	eax, eax
	mov	WORD PTR [edx], ax
	mov	esp, ebp
	pop	ebp
	ret	0
?Empty@UString@@QAEXXZ ENDP				; UString::Empty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CMyComBSTR@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMyComBSTR@@QAE@XZ PROC				; CMyComBSTR::CMyComBSTR, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 87
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CMyComBSTR@@QAE@XZ ENDP				; CMyComBSTR::CMyComBSTR
_TEXT	ENDS
EXTRN	__imp__SysFreeString@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CMyComBSTR@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CMyComBSTR@@QAE@XZ PROC				; CMyComBSTR::~CMyComBSTR, COMDAT
; _this$ = ecx
; Line 88
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__SysFreeString@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CMyComBSTR@@QAE@XZ ENDP				; CMyComBSTR::~CMyComBSTR
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??ICMyComBSTR@@QAEPAPA_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??ICMyComBSTR@@QAEPAPA_WXZ PROC				; CMyComBSTR::operator&, COMDAT
; _this$ = ecx
; Line 89
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??ICMyComBSTR@@QAEPAPA_WXZ ENDP				; CMyComBSTR::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??BCMyComBSTR@@QBEPB_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BCMyComBSTR@@QBEPB_WXZ PROC				; CMyComBSTR::operator wchar_t const *, COMDAT
; _this$ = ecx
; Line 90
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??BCMyComBSTR@@QBEPB_WXZ ENDP				; CMyComBSTR::operator wchar_t const *
_TEXT	ENDS
PUBLIC	?Lock@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Lock
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?WaitExecuteFinish@CVirtThread@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?WaitExecuteFinish@CVirtThread@@QAEXXZ PROC		; CVirtThread::WaitExecuteFinish, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\virtthread.h
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Lock@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Lock
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?WaitExecuteFinish@CVirtThread@@QAEXXZ ENDP		; CVirtThread::WaitExecuteFinish
_TEXT	ENDS
EXTRN	_Handle_WaitObject@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Lock@CBaseEvent@NSynchronization@NWindows@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Lock@CBaseEvent@NSynchronization@NWindows@@QAEIXZ PROC	; NWindows::NSynchronization::CBaseEvent::Lock, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\synchronization.h
; Line 47
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_Handle_WaitObject@4
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Lock@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ENDP	; NWindows::NSynchronization::CBaseEvent::Lock
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
_TEXT	SEGMENT
tv66 = -4						; size = 4
_m$ = 8							; size = 8
?IsFilterMethod@N7z@NArchive@@YG_N_K@Z PROC		; NArchive::N7z::IsFilterMethod
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zheader.h
; Line 126
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 127
	cmp	DWORD PTR _m$[ebp+4], 0
	ja	SHORT $LN10@IsFilterMe
	cmp	DWORD PTR _m$[ebp], -1
	jbe	SHORT $LN4@IsFilterMe
$LN10@IsFilterMe:
; Line 128
	xor	al, al
	jmp	$LN5@IsFilterMe
$LN4@IsFilterMe:
; Line 129
	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR tv66[ebp], eax
	cmp	DWORD PTR tv66[ebp], 50528773		; 03030205H
	ja	SHORT $LN7@IsFilterMe
	cmp	DWORD PTR tv66[ebp], 50528773		; 03030205H
	je	SHORT $LN1@IsFilterMe
	cmp	DWORD PTR tv66[ebp], 131844		; 00020304H
	ja	SHORT $LN8@IsFilterMe
	cmp	DWORD PTR tv66[ebp], 131844		; 00020304H
	je	SHORT $LN1@IsFilterMe
	cmp	DWORD PTR tv66[ebp], 3
	je	SHORT $LN1@IsFilterMe
	cmp	DWORD PTR tv66[ebp], 131842		; 00020302H
	je	SHORT $LN1@IsFilterMe
	jmp	SHORT $LN2@IsFilterMe
$LN8@IsFilterMe:
	cmp	DWORD PTR tv66[ebp], 50528515		; 03030103H
	je	SHORT $LN1@IsFilterMe
	cmp	DWORD PTR tv66[ebp], 50528539		; 0303011bH
	je	SHORT $LN1@IsFilterMe
	jmp	SHORT $LN2@IsFilterMe
$LN7@IsFilterMe:
	cmp	DWORD PTR tv66[ebp], 50530049		; 03030701H
	ja	SHORT $LN9@IsFilterMe
	cmp	DWORD PTR tv66[ebp], 50530049		; 03030701H
	je	SHORT $LN1@IsFilterMe
	cmp	DWORD PTR tv66[ebp], 50529281		; 03030401H
	je	SHORT $LN1@IsFilterMe
	cmp	DWORD PTR tv66[ebp], 50529537		; 03030501H
	je	SHORT $LN1@IsFilterMe
	jmp	SHORT $LN2@IsFilterMe
$LN9@IsFilterMe:
	cmp	DWORD PTR tv66[ebp], 50530309		; 03030805H
	je	SHORT $LN1@IsFilterMe
	jmp	SHORT $LN2@IsFilterMe
$LN1@IsFilterMe:
; Line 141
	mov	al, 1
	jmp	SHORT $LN5@IsFilterMe
$LN2@IsFilterMe:
; Line 143
	xor	al, al
$LN5@IsFilterMe:
; Line 144
	mov	esp, ebp
	pop	ebp
	ret	8
?IsFilterMethod@N7z@NArchive@@YG_N_K@Z ENDP		; NArchive::N7z::IsFilterMethod
_TEXT	ENDS
PUBLIC	??B?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEPBUCCoderInfo@N7z@NArchive@@XZ ; CObjArray2<NArchive::N7z::CCoderInfo>::operator NArchive::N7z::CCoderInfo const *
PUBLIC	?Size@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEIXZ ; CObjArray2<NArchive::N7z::CCoderInfo>::Size
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsEncrypted@CFolder@N7z@NArchive@@QBE_NXZ
_TEXT	SEGMENT
tv78 = -16						; size = 4
tv77 = -12						; size = 4
_i$72330 = -8						; size = 4
_this$ = -4						; size = 4
?IsEncrypted@CFolder@N7z@NArchive@@QBE_NXZ PROC		; NArchive::N7z::CFolder::IsEncrypted, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zitem.h
; Line 82
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 83
	mov	DWORD PTR _i$72330[ebp], 0
	jmp	SHORT $LN4@IsEncrypte
$LN3@IsEncrypte:
	mov	eax, DWORD PTR _i$72330[ebp]
	add	eax, 1
	mov	DWORD PTR _i$72330[ebp], eax
$LN4@IsEncrypte:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEIXZ ; CObjArray2<NArchive::N7z::CCoderInfo>::Size
	cmp	DWORD PTR _i$72330[ebp], eax
	jae	SHORT $LN2@IsEncrypte
; Line 84
	mov	ecx, DWORD PTR _this$[ebp]
	call	??B?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEPBUCCoderInfo@N7z@NArchive@@XZ ; CObjArray2<NArchive::N7z::CCoderInfo>::operator NArchive::N7z::CCoderInfo const *
	mov	ecx, DWORD PTR _i$72330[ebp]
	imul	ecx, 24					; 00000018H
	mov	DWORD PTR tv77[ebp], eax
	mov	DWORD PTR tv78[ebp], ecx
	mov	edx, DWORD PTR tv78[ebp]
	mov	eax, DWORD PTR tv77[ebp]
	cmp	DWORD PTR [eax+edx], 116459265		; 06f10701H
	jne	SHORT $LN1@IsEncrypte
	mov	ecx, DWORD PTR tv78[ebp]
	mov	edx, DWORD PTR tv77[ebp]
	cmp	DWORD PTR [edx+ecx+4], 0
	jne	SHORT $LN1@IsEncrypte
; Line 85
	mov	al, 1
	jmp	SHORT $LN5@IsEncrypte
$LN1@IsEncrypte:
; Line 86
	jmp	SHORT $LN3@IsEncrypte
$LN2@IsEncrypte:
	xor	al, al
$LN5@IsEncrypte:
; Line 87
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEncrypted@CFolder@N7z@NArchive@@QBE_NXZ ENDP		; NArchive::N7z::CFolder::IsEncrypted
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CFileItem@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CFileItem@N7z@NArchive@@QAE@XZ PROC			; NArchive::N7z::CFileItem::CFileItem, COMDAT
; _this$ = ecx
; Line 173
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+16], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+17], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+18], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+19], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CFileItem@N7z@NArchive@@QAE@XZ ENDP			; NArchive::N7z::CFileItem::CFileItem
_TEXT	ENDS
PUBLIC	??B?$CObjArray@E@@QBEPBEXZ			; CObjArray<unsigned char>::operator unsigned char const *
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ParseFolderEx@CFolders@N7z@NArchive@@QBEXIAAUCFolderEx@23@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_folderIndex$ = 8					; size = 4
_folder$ = 12						; size = 4
?ParseFolderEx@CFolders@N7z@NArchive@@QBEXIAAUCFolderEx@23@@Z PROC ; NArchive::N7z::CFolders::ParseFolderEx, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zin.h
; Line 70
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 71
	mov	eax, DWORD PTR _folder$[ebp]
	push	eax
	mov	ecx, DWORD PTR _folderIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ParseFolderInfo@CFolders@N7z@NArchive@@QBEXIAAUCFolder@23@@Z ; NArchive::N7z::CFolders::ParseFolderInfo
; Line 72
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??B?$CObjArray@E@@QBEPBEXZ		; CObjArray<unsigned char>::operator unsigned char const *
	mov	edx, DWORD PTR _folderIndex$[ebp]
	movzx	eax, BYTE PTR [eax+edx]
	mov	ecx, DWORD PTR _folder$[ebp]
	mov	DWORD PTR [ecx+24], eax
; Line 73
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?ParseFolderEx@CFolders@N7z@NArchive@@QBEXIAAUCFolderEx@23@@Z ENDP ; NArchive::N7z::CFolders::ParseFolderEx
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetStreamPackSize@CFolders@N7z@NArchive@@QBE_KI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?GetStreamPackSize@CFolders@N7z@NArchive@@QBE_KI@Z PROC	; NArchive::N7z::CFolders::GetStreamPackSize, COMDAT
; _this$ = ecx
; Line 86
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 87
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??B?$CObjArray@_K@@QBEPB_KXZ		; CObjArray<unsigned __int64>::operator unsigned __int64 const *
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??B?$CObjArray@_K@@QBEPB_KXZ		; CObjArray<unsigned __int64>::operator unsigned __int64 const *
	mov	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR _index$[ebp]
	mov	edi, DWORD PTR [esi+ecx*8+8]
	sub	edi, DWORD PTR [eax+edx*8]
	mov	ecx, DWORD PTR [esi+ecx*8+12]
	sbb	ecx, DWORD PTR [eax+edx*8+4]
	mov	eax, edi
	mov	edx, ecx
; Line 88
	pop	edi
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetStreamPackSize@CFolders@N7z@NArchive@@QBE_KI@Z ENDP	; NArchive::N7z::CFolders::GetStreamPackSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetFolderStreamPos@CDbEx@N7z@NArchive@@QBE_KII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_folderIndex$ = 8					; size = 4
_indexInFolder$ = 12					; size = 4
?GetFolderStreamPos@CDbEx@N7z@NArchive@@QBE_KII@Z PROC	; NArchive::N7z::CDbEx::GetFolderStreamPos, COMDAT
; _this$ = ecx
; Line 259
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 261
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??B?$CObjArray@_K@@QBEPB_KXZ		; CObjArray<unsigned __int64>::operator unsigned __int64 const *
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??B?$CObjArray@I@@QBEPBIXZ		; CObjArray<unsigned int>::operator unsigned int const *
	mov	ecx, DWORD PTR _folderIndex$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	add	edx, DWORD PTR _indexInFolder$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+248]
	add	ecx, DWORD PTR [esi+edx*8]
	mov	edi, DWORD PTR [eax+252]
	adc	edi, DWORD PTR [esi+edx*8+4]
	mov	eax, ecx
	mov	edx, edi
; Line 262
	pop	edi
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?GetFolderStreamPos@CDbEx@N7z@NArchive@@QBE_KII@Z ENDP	; NArchive::N7z::CDbEx::GetFolderStreamPos
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetFolderFullPackSize@CDbEx@N7z@NArchive@@QBE_KI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_folderIndex$ = 8					; size = 4
?GetFolderFullPackSize@CDbEx@N7z@NArchive@@QBE_KI@Z PROC ; NArchive::N7z::CDbEx::GetFolderFullPackSize, COMDAT
; _this$ = ecx
; Line 265
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 268
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??B?$CObjArray@_K@@QBEPB_KXZ		; CObjArray<unsigned __int64>::operator unsigned __int64 const *
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??B?$CObjArray@I@@QBEPBIXZ		; CObjArray<unsigned int>::operator unsigned int const *
	mov	ecx, DWORD PTR _folderIndex$[ebp]
	mov	edi, DWORD PTR [eax+ecx*4+4]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??B?$CObjArray@_K@@QBEPB_KXZ		; CObjArray<unsigned __int64>::operator unsigned __int64 const *
	mov	ebx, eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??B?$CObjArray@I@@QBEPBIXZ		; CObjArray<unsigned int>::operator unsigned int const *
	mov	edx, DWORD PTR _folderIndex$[ebp]
	mov	eax, DWORD PTR [eax+edx*4]
	mov	ecx, DWORD PTR [esi+edi*8]
	sub	ecx, DWORD PTR [ebx+eax*8]
	mov	edx, DWORD PTR [esi+edi*8+4]
	sbb	edx, DWORD PTR [ebx+eax*8+4]
	mov	eax, ecx
; Line 269
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetFolderFullPackSize@CDbEx@N7z@NArchive@@QBE_KI@Z ENDP ; NArchive::N7z::CDbEx::GetFolderFullPackSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?WasFinished@CFolderInStream@N7z@NArchive@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?WasFinished@CFolderInStream@N7z@NArchive@@QBE_NXZ PROC	; NArchive::N7z::CFolderInStream::WasFinished, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zfolderinstream.h
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+48]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+44]
	sete	al
	mov	esp, ebp
	pop	ebp
	ret	0
?WasFinished@CFolderInStream@N7z@NArchive@@QBE_NXZ ENDP	; NArchive::N7z::CFolderInStream::WasFinished
_TEXT	ENDS
PUBLIC	?ReserveDown@?$CRecordVector@_N@@QAEXXZ		; CRecordVector<bool>::ReserveDown
PUBLIC	?ReserveDown@CUInt64DefVector@N7z@NArchive@@QAEXXZ ; NArchive::N7z::CUInt64DefVector::ReserveDown
PUBLIC	?ReserveDown@?$CObjectVector@VUString@@@@QAEXXZ	; CObjectVector<UString>::ReserveDown
PUBLIC	?ReserveDown@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXXZ ; CRecordVector<NArchive::N7z::CFileItem>::ReserveDown
PUBLIC	?ReserveDown@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEXXZ ; CObjectVector<NArchive::N7z::CFolder>::ReserveDown
PUBLIC	?ReserveDown@CUInt32DefVector@N7z@NArchive@@QAEXXZ ; NArchive::N7z::CUInt32DefVector::ReserveDown
PUBLIC	?ReserveDown@?$CRecordVector@_K@@QAEXXZ		; CRecordVector<unsigned __int64>::ReserveDown
PUBLIC	?OutFoldersReserveDown@COutFolders@N7z@NArchive@@QAEXXZ ; NArchive::N7z::COutFolders::OutFoldersReserveDown
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ReserveDown@CArchiveDatabaseOut@N7z@NArchive@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ReserveDown@CArchiveDatabaseOut@N7z@NArchive@@QAEXXZ PROC ; NArchive::N7z::CArchiveDatabaseOut::ReserveDown, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zout.h
; Line 166
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 167
	mov	ecx, DWORD PTR _this$[ebp]
	call	?OutFoldersReserveDown@COutFolders@N7z@NArchive@@QAEXXZ ; NArchive::N7z::COutFolders::OutFoldersReserveDown
; Line 169
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	?ReserveDown@?$CRecordVector@_K@@QAEXXZ	; CRecordVector<unsigned __int64>::ReserveDown
; Line 170
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	?ReserveDown@CUInt32DefVector@N7z@NArchive@@QAEXXZ ; NArchive::N7z::CUInt32DefVector::ReserveDown
; Line 171
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	?ReserveDown@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEXXZ ; CObjectVector<NArchive::N7z::CFolder>::ReserveDown
; Line 173
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	?ReserveDown@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXXZ ; CRecordVector<NArchive::N7z::CFileItem>::ReserveDown
; Line 174
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 108				; 0000006cH
	call	?ReserveDown@?$CObjectVector@VUString@@@@QAEXXZ ; CObjectVector<UString>::ReserveDown
; Line 175
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	call	?ReserveDown@CUInt64DefVector@N7z@NArchive@@QAEXXZ ; NArchive::N7z::CUInt64DefVector::ReserveDown
; Line 176
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	?ReserveDown@CUInt64DefVector@N7z@NArchive@@QAEXXZ ; NArchive::N7z::CUInt64DefVector::ReserveDown
; Line 177
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 168				; 000000a8H
	call	?ReserveDown@CUInt64DefVector@N7z@NArchive@@QAEXXZ ; NArchive::N7z::CUInt64DefVector::ReserveDown
; Line 178
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 192				; 000000c0H
	call	?ReserveDown@CUInt64DefVector@N7z@NArchive@@QAEXXZ ; NArchive::N7z::CUInt64DefVector::ReserveDown
; Line 179
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 216				; 000000d8H
	call	?ReserveDown@?$CRecordVector@_N@@QAEXXZ	; CRecordVector<bool>::ReserveDown
; Line 184
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveDown@CArchiveDatabaseOut@N7z@NArchive@@QAEXXZ ENDP ; NArchive::N7z::CArchiveDatabaseOut::ReserveDown
_TEXT	ENDS
PUBLIC	?ReserveDown@?$CRecordVector@I@@QAEXXZ		; CRecordVector<unsigned int>::ReserveDown
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ReserveDown@CUInt32DefVector@N7z@NArchive@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ReserveDown@CUInt32DefVector@N7z@NArchive@@QAEXXZ PROC	; NArchive::N7z::CUInt32DefVector::ReserveDown, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zitem.h
; Line 108
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 109
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveDown@?$CRecordVector@_N@@QAEXXZ	; CRecordVector<bool>::ReserveDown
; Line 110
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?ReserveDown@?$CRecordVector@I@@QAEXXZ	; CRecordVector<unsigned int>::ReserveDown
; Line 111
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveDown@CUInt32DefVector@N7z@NArchive@@QAEXXZ ENDP	; NArchive::N7z::CUInt32DefVector::ReserveDown
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReserveDown@CUInt64DefVector@N7z@NArchive@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ReserveDown@CUInt64DefVector@N7z@NArchive@@QAEXXZ PROC	; NArchive::N7z::CUInt64DefVector::ReserveDown, COMDAT
; _this$ = ecx
; Line 128
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 129
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveDown@?$CRecordVector@_N@@QAEXXZ	; CRecordVector<bool>::ReserveDown
; Line 130
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?ReserveDown@?$CRecordVector@_K@@QAEXXZ	; CRecordVector<unsigned __int64>::ReserveDown
; Line 131
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveDown@CUInt64DefVector@N7z@NArchive@@QAEXXZ ENDP	; NArchive::N7z::CUInt64DefVector::ReserveDown
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?OutFoldersReserveDown@COutFolders@N7z@NArchive@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OutFoldersReserveDown@COutFolders@N7z@NArchive@@QAEXXZ PROC ; NArchive::N7z::COutFolders::OutFoldersReserveDown, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zout.h
; Line 107
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 108
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveDown@CUInt32DefVector@N7z@NArchive@@QAEXXZ ; NArchive::N7z::CUInt32DefVector::ReserveDown
; Line 109
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?ReserveDown@?$CRecordVector@I@@QAEXXZ	; CRecordVector<unsigned int>::ReserveDown
; Line 110
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	?ReserveDown@?$CRecordVector@_K@@QAEXXZ	; CRecordVector<unsigned __int64>::ReserveDown
; Line 111
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?OutFoldersReserveDown@COutFolders@N7z@NArchive@@QAEXXZ ENDP ; NArchive::N7z::COutFolders::OutFoldersReserveDown
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?HasStream@CUpdateItem@N7z@NArchive@@QBE_NXZ
_TEXT	SEGMENT
tv72 = -12						; size = 4
tv77 = -8						; size = 4
_this$ = -4						; size = 4
?HasStream@CUpdateItem@N7z@NArchive@@QBE_NXZ PROC	; NArchive::N7z::CUpdateItem::HasStream, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zupdate.h
; Line 67
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+59]
	test	ecx, ecx
	jne	SHORT $LN3@HasStream
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+58]
	test	eax, eax
	jne	SHORT $LN3@HasStream
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv77[ebp], ecx
	mov	edx, DWORD PTR tv77[ebp]
	mov	eax, DWORD PTR tv77[ebp]
	mov	ecx, DWORD PTR [edx+32]
	or	ecx, DWORD PTR [eax+36]
	je	SHORT $LN3@HasStream
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN4@HasStream
$LN3@HasStream:
	mov	DWORD PTR tv72[ebp], 0
$LN4@HasStream:
	mov	al, BYTE PTR tv72[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?HasStream@CUpdateItem@N7z@NArchive@@QBE_NXZ ENDP	; NArchive::N7z::CUpdateItem::HasStream
_TEXT	ENDS
PUBLIC	??0CFilterMode@N7z@NArchive@@QAE@XZ		; NArchive::N7z::CFilterMode::CFilterMode
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CFilterMode2@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CFilterMode2@N7z@NArchive@@QAE@XZ PROC		; NArchive::N7z::CFilterMode2::CFilterMode2, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zupdate.cpp
; Line 307
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CFilterMode@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CFilterMode::CFilterMode
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CFilterMode2@N7z@NArchive@@QAE@XZ ENDP		; NArchive::N7z::CFilterMode2::CFilterMode2
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CFilterMode@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CFilterMode@N7z@NArchive@@QAE@XZ PROC		; NArchive::N7z::CFilterMode::CFilterMode, COMDAT
; _this$ = ecx
; Line 35
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CFilterMode@N7z@NArchive@@QAE@XZ ENDP		; NArchive::N7z::CFilterMode::CFilterMode
_TEXT	ENDS
PUBLIC	?Add@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAEIUCFilterMode2@N7z@NArchive@@@Z ; CRecordVector<NArchive::N7z::CFilterMode2>::Add
PUBLIC	??8CFilterMode2@N7z@NArchive@@QBE_NABU012@@Z	; NArchive::N7z::CFilterMode2::operator==
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_m2$75441 = -8						; size = 4
_i$ = -4						; size = 4
_filters$ = 8						; size = 4
_m$ = 12						; size = 4
?GetGroup@N7z@NArchive@@YGIAAV?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@ABUCFilterMode2@12@@Z PROC ; NArchive::N7z::GetGroup
; Line 335
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 337
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@GetGroup
$LN3@GetGroup:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@GetGroup:
	mov	ecx, DWORD PTR _filters$[ebp]
	call	?Size@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CFilterMode2>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN2@GetGroup
; Line 339
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _filters$[ebp]
	call	??A?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAEAAUCFilterMode2@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CFilterMode2>::operator[]
	mov	DWORD PTR _m2$75441[ebp], eax
; Line 340
	mov	edx, DWORD PTR _m2$75441[ebp]
	push	edx
	mov	ecx, DWORD PTR _m$[ebp]
	call	??8CFilterMode2@N7z@NArchive@@QBE_NABU012@@Z ; NArchive::N7z::CFilterMode2::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@GetGroup
; Line 341
	mov	eax, DWORD PTR _i$[ebp]
	jmp	SHORT $LN5@GetGroup
$LN1@GetGroup:
; Line 356
	jmp	SHORT $LN3@GetGroup
$LN2@GetGroup:
; Line 359
	mov	ecx, DWORD PTR _m$[ebp]
	sub	esp, 16					; 00000010H
	mov	edx, esp
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	ecx, DWORD PTR _filters$[ebp]
	call	?Add@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAEIUCFilterMode2@N7z@NArchive@@@Z ; CRecordVector<NArchive::N7z::CFilterMode2>::Add
$LN5@GetGroup:
; Line 360
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?GetGroup@N7z@NArchive@@YGIAAV?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@ABUCFilterMode2@12@@Z ENDP ; NArchive::N7z::GetGroup
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??8CFilterMode2@N7z@NArchive@@QBE_NABU012@@Z
_TEXT	SEGMENT
tv91 = -8						; size = 4
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??8CFilterMode2@N7z@NArchive@@QBE_NABU012@@Z PROC	; NArchive::N7z::CFilterMode2::operator==, COMDAT
; _this$ = ecx
; Line 329
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 330
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN3@operator
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+4]
	jne	SHORT $LN3@operator
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	mov	edx, DWORD PTR _m$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	cmp	ecx, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv91[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv91[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv91[ebp]
; Line 331
	mov	esp, ebp
	pop	ebp
	ret	4
??8CFilterMode2@N7z@NArchive@@QBE_NABU012@@Z ENDP	; NArchive::N7z::CFilterMode2::operator==
_TEXT	ENDS
PUBLIC	??B?$CBuffer@E@@QBEPBEXZ			; CBuffer<unsigned char>::operator unsigned char const *
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv177 = -32						; size = 4
_coder$ = -28						; size = 4
_m$ = -20						; size = 16
_filters$ = 8						; size = 4
_f$ = 12						; size = 4
?Get_FilterGroup_for_Folder@N7z@NArchive@@YGIAAV?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@ABUCFolderEx@12@@Z PROC ; NArchive::N7z::Get_FilterGroup_for_Folder
; Line 384
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 385
	lea	ecx, DWORD PTR _m$[ebp]
	call	??0CFilterMode2@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CFilterMode2::CFilterMode2
; Line 386
	mov	DWORD PTR _m$[ebp], 0
; Line 387
	mov	DWORD PTR _m$[ebp+4], 0
; Line 388
	mov	ecx, DWORD PTR _f$[ebp]
	call	?IsEncrypted@CFolder@N7z@NArchive@@QBE_NXZ ; NArchive::N7z::CFolder::IsEncrypted
	mov	BYTE PTR _m$[ebp+8], al
; Line 390
	mov	ecx, DWORD PTR _f$[ebp]
	call	??B?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEPBUCCoderInfo@N7z@NArchive@@XZ ; CObjArray2<NArchive::N7z::CCoderInfo>::operator NArchive::N7z::CCoderInfo const *
	mov	ecx, DWORD PTR _f$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	imul	edx, 24					; 00000018H
	add	eax, edx
	mov	DWORD PTR _coder$[ebp], eax
; Line 392
	mov	eax, DWORD PTR _coder$[ebp]
	mov	DWORD PTR tv177[ebp], eax
	mov	ecx, DWORD PTR tv177[ebp]
	cmp	DWORD PTR [ecx], 3
	jne	SHORT $LN5@Get_Filter
	mov	edx, DWORD PTR tv177[ebp]
	cmp	DWORD PTR [edx+4], 0
	jne	SHORT $LN5@Get_Filter
; Line 394
	mov	ecx, DWORD PTR _coder$[ebp]
	add	ecx, 8
	call	?Size@?$CBuffer@E@@QBEIXZ		; CBuffer<unsigned char>::Size
	cmp	eax, 1
	jne	SHORT $LN4@Get_Filter
; Line 396
	mov	ecx, DWORD PTR _coder$[ebp]
	add	ecx, 8
	call	??B?$CBuffer@E@@QBEPBEXZ		; CBuffer<unsigned char>::operator unsigned char const *
	movzx	eax, BYTE PTR [eax]
	add	eax, 1
	mov	DWORD PTR _m$[ebp+4], eax
; Line 397
	mov	DWORD PTR _m$[ebp], 3
$LN4@Get_Filter:
; Line 399
	jmp	SHORT $LN3@Get_Filter
$LN5@Get_Filter:
; Line 400
	mov	ecx, DWORD PTR _coder$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR [ecx]
	push	eax
	call	?IsExeFilter@N7z@NArchive@@YG_N_K@Z	; NArchive::N7z::IsExeFilter
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@Get_Filter
; Line 402
	mov	edx, DWORD PTR _coder$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _m$[ebp], eax
; Line 403
	cmp	DWORD PTR _m$[ebp], 50528539		; 0303011bH
	jne	SHORT $LN1@Get_Filter
; Line 404
	mov	DWORD PTR _m$[ebp], 50528515		; 03030103H
$LN1@Get_Filter:
; Line 405
	lea	ecx, DWORD PTR _m$[ebp]
	call	?SetDelta@CFilterMode@N7z@NArchive@@QAEXXZ ; NArchive::N7z::CFilterMode::SetDelta
$LN3@Get_Filter:
; Line 408
	lea	ecx, DWORD PTR _m$[ebp]
	push	ecx
	mov	edx, DWORD PTR _filters$[ebp]
	push	edx
	call	?GetGroup@N7z@NArchive@@YGIAAV?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@ABUCFilterMode2@12@@Z ; NArchive::N7z::GetGroup
; Line 409
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@Get_Filter
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN10@Get_Filter:
	DD	1
	DD	$LN9@Get_Filter
$LN9@Get_Filter:
	DD	-20					; ffffffecH
	DD	16					; 00000010H
	DD	$LN8@Get_Filter
$LN8@Get_Filter:
	DB	109					; 0000006dH
	DB	0
?Get_FilterGroup_for_Folder@N7z@NArchive@@YGIAAV?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@ABUCFolderEx@12@@Z ENDP ; NArchive::N7z::Get_FilterGroup_for_Folder
; Function compile flags: /Odtp /RTCsu
tv64 = -16						; size = 8
tv65 = -8						; size = 8
_m$ = 8							; size = 8
?IsExeFilter@N7z@NArchive@@YG_N_K@Z PROC		; NArchive::N7z::IsExeFilter
; Line 368
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 369
	mov	eax, DWORD PTR _m$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	mov	ecx, DWORD PTR _m$[ebp+4]
	mov	DWORD PTR tv65[ebp+4], ecx
	cmp	DWORD PTR tv65[ebp+4], 0
	ja	SHORT $LN2@IsExeFilte
	jb	SHORT $LN7@IsExeFilte
	cmp	DWORD PTR tv65[ebp], 50530309		; 03030805H
	ja	SHORT $LN2@IsExeFilte
$LN7@IsExeFilte:
	mov	edx, DWORD PTR tv65[ebp]
	mov	DWORD PTR tv64[ebp], edx
	cmp	DWORD PTR tv64[ebp], 50529281		; 03030401H
	ja	SHORT $LN6@IsExeFilte
	cmp	DWORD PTR tv64[ebp], 50529281		; 03030401H
	je	SHORT $LN1@IsExeFilte
	cmp	DWORD PTR tv64[ebp], 50528515		; 03030103H
	je	SHORT $LN1@IsExeFilte
	cmp	DWORD PTR tv64[ebp], 50528539		; 0303011bH
	je	SHORT $LN1@IsExeFilte
	cmp	DWORD PTR tv64[ebp], 50528773		; 03030205H
	je	SHORT $LN1@IsExeFilte
	jmp	SHORT $LN2@IsExeFilte
$LN6@IsExeFilte:
	cmp	DWORD PTR tv64[ebp], 50529537		; 03030501H
	je	SHORT $LN1@IsExeFilte
	cmp	DWORD PTR tv64[ebp], 50530049		; 03030701H
	je	SHORT $LN1@IsExeFilte
	cmp	DWORD PTR tv64[ebp], 50530309		; 03030805H
	je	SHORT $LN1@IsExeFilte
	jmp	SHORT $LN2@IsExeFilte
$LN1@IsExeFilte:
; Line 378
	mov	al, 1
	jmp	SHORT $LN4@IsExeFilte
$LN2@IsExeFilte:
; Line 380
	xor	al, al
$LN4@IsExeFilte:
; Line 381
	mov	esp, ebp
	pop	ebp
	ret	8
?IsExeFilter@N7z@NArchive@@YG_N_K@Z ENDP		; NArchive::N7z::IsExeFilter
_TEXT	ENDS
PUBLIC	??1?$CMyComPtr@VCLimitedSequentialInStream@@@@QAE@XZ ; CMyComPtr<CLimitedSequentialInStream>::~CMyComPtr<CLimitedSequentialInStream>
PUBLIC	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ	; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
PUBLIC	??B?$CMyComPtr@VCLimitedSequentialInStream@@@@QBEPAVCLimitedSequentialInStream@@XZ ; CMyComPtr<CLimitedSequentialInStream>::operator CLimitedSequentialInStream *
PUBLIC	??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator->
PUBLIC	??0?$CMyComPtr@UICompressCoder@@@@QAE@PAUICompressCoder@@@Z ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>
PUBLIC	??0CCopyCoder@NCompress@@QAE@XZ			; NCompress::CCopyCoder::CCopyCoder
PUBLIC	?Init@CLimitedSequentialInStream@@QAEX_K@Z	; CLimitedSequentialInStream::Init
PUBLIC	?SetStream@CLimitedSequentialInStream@@QAEXPAUISequentialInStream@@@Z ; CLimitedSequentialInStream::SetStream
PUBLIC	??0?$CMyComPtr@VCLimitedSequentialInStream@@@@QAE@PAVCLimitedSequentialInStream@@@Z ; CMyComPtr<CLimitedSequentialInStream>::CMyComPtr<CLimitedSequentialInStream>
PUBLIC	??0CLimitedSequentialInStream@@QAE@XZ		; CLimitedSequentialInStream::CLimitedSequentialInStream
xdata$x	SEGMENT
__unwindtable$?WriteRange@N7z@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@_K2PAUICompressProgressInfo@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?WriteRange@N7z@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@_K2PAUICompressProgressInfo@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?WriteRange@N7z@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@_K2PAUICompressProgressInfo@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?WriteRange@N7z@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@_K2PAUICompressProgressInfo@@@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?WriteRange@N7z@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@_K2PAUICompressProgressInfo@@@Z$3
__ehfuncinfo$?WriteRange@N7z@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@_K2PAUICompressProgressInfo@@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?WriteRange@N7z@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@_K2PAUICompressProgressInfo@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv159 = -96						; size = 4
tv209 = -92						; size = 4
tv141 = -88						; size = 4
tv130 = -84						; size = 4
tv79 = -80						; size = 4
$T79605 = -76						; size = 4
$T79604 = -72						; size = 4
$T79601 = -68						; size = 4
$T79600 = -64						; size = 4
$T79597 = -60						; size = 4
$T79596 = -56						; size = 4
___result__$75527 = -52					; size = 4
_copyCoder$ = -44					; size = 4
_copyCoderSpec$ = -36					; size = 4
_inStreamLimited$ = -28					; size = 4
_streamSpec$ = -20					; size = 4
___result__$75475 = -16					; size = 4
__$EHRec$ = -12						; size = 12
_inStream$ = 8						; size = 4
_outStream$ = 12					; size = 4
_position$ = 16						; size = 8
_size$ = 24						; size = 8
_progress$ = 32						; size = 4
?WriteRange@N7z@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@_K2PAUICompressProgressInfo@@@Z PROC ; NArchive::N7z::WriteRange
; Line 416
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?WriteRange@N7z@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@_K2PAUICompressProgressInfo@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-96]
	mov	ecx, 21					; 00000015H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 417
	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR _position$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _position$[ebp]
	push	ecx
	mov	edx, DWORD PTR _inStream$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _inStream$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$75475[ebp], eax
	cmp	DWORD PTR ___result__$75475[ebp], 0
	je	SHORT $LN2@WriteRange
	mov	eax, DWORD PTR ___result__$75475[ebp]
	jmp	$LN3@WriteRange
$LN2@WriteRange:
; Line 418
	push	40					; 00000028H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T79597[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T79597[ebp], 0
	je	SHORT $LN5@WriteRange
	mov	ecx, DWORD PTR $T79597[ebp]
	call	??0CLimitedSequentialInStream@@QAE@XZ
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN6@WriteRange
$LN5@WriteRange:
	mov	DWORD PTR tv79[ebp], 0
$LN6@WriteRange:
	mov	eax, DWORD PTR tv79[ebp]
	mov	DWORD PTR $T79596[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T79596[ebp]
	mov	DWORD PTR _streamSpec$[ebp], ecx
; Line 419
	mov	edx, DWORD PTR _streamSpec$[ebp]
	push	edx
	lea	ecx, DWORD PTR _inStreamLimited$[ebp]
	call	??0?$CMyComPtr@VCLimitedSequentialInStream@@@@QAE@PAVCLimitedSequentialInStream@@@Z ; CMyComPtr<CLimitedSequentialInStream>::CMyComPtr<CLimitedSequentialInStream>
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 420
	mov	eax, DWORD PTR _inStream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _streamSpec$[ebp]
	call	?SetStream@CLimitedSequentialInStream@@QAEXPAUISequentialInStream@@@Z ; CLimitedSequentialInStream::SetStream
; Line 421
	mov	ecx, DWORD PTR _size$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	ecx, DWORD PTR _streamSpec$[ebp]
	call	?Init@CLimitedSequentialInStream@@QAEX_K@Z ; CLimitedSequentialInStream::Init
; Line 423
	push	40					; 00000028H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T79601[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T79601[ebp], 0
	je	SHORT $LN7@WriteRange
	mov	ecx, DWORD PTR $T79601[ebp]
	call	??0CCopyCoder@NCompress@@QAE@XZ		; NCompress::CCopyCoder::CCopyCoder
	mov	DWORD PTR tv130[ebp], eax
	jmp	SHORT $LN8@WriteRange
$LN7@WriteRange:
	mov	DWORD PTR tv130[ebp], 0
$LN8@WriteRange:
	mov	eax, DWORD PTR tv130[ebp]
	mov	DWORD PTR $T79600[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR $T79600[ebp]
	mov	DWORD PTR _copyCoderSpec$[ebp], ecx
; Line 424
	mov	edx, DWORD PTR _copyCoderSpec$[ebp]
	push	edx
	lea	ecx, DWORD PTR _copyCoder$[ebp]
	call	??0?$CMyComPtr@UICompressCoder@@@@QAE@PAUICompressCoder@@@Z ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
; Line 425
	lea	ecx, DWORD PTR _copyCoder$[ebp]
	call	??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator->
	mov	DWORD PTR tv141[ebp], eax
	mov	esi, esp
	mov	eax, DWORD PTR _progress$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _outStream$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _inStreamLimited$[ebp]
	call	??B?$CMyComPtr@VCLimitedSequentialInStream@@@@QBEPAVCLimitedSequentialInStream@@XZ ; CMyComPtr<CLimitedSequentialInStream>::operator CLimitedSequentialInStream *
	push	eax
	mov	edx, DWORD PTR tv141[ebp]
	push	edx
	mov	eax, DWORD PTR tv141[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$75527[ebp], eax
	cmp	DWORD PTR ___result__$75527[ebp], 0
	je	SHORT $LN1@WriteRange
	mov	eax, DWORD PTR ___result__$75527[ebp]
	mov	DWORD PTR $T79604[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _copyCoder$[ebp]
	call	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inStreamLimited$[ebp]
	call	??1?$CMyComPtr@VCLimitedSequentialInStream@@@@QAE@XZ ; CMyComPtr<CLimitedSequentialInStream>::~CMyComPtr<CLimitedSequentialInStream>
	mov	eax, DWORD PTR $T79604[ebp]
	jmp	SHORT $LN3@WriteRange
$LN1@WriteRange:
; Line 426
	mov	ecx, DWORD PTR _copyCoderSpec$[ebp]
	mov	DWORD PTR tv209[ebp], ecx
	mov	edx, DWORD PTR tv209[ebp]
	mov	eax, DWORD PTR [edx+32]
	cmp	eax, DWORD PTR _size$[ebp]
	jne	SHORT $LN9@WriteRange
	mov	ecx, DWORD PTR tv209[ebp]
	mov	edx, DWORD PTR [ecx+36]
	cmp	edx, DWORD PTR _size$[ebp+4]
	jne	SHORT $LN9@WriteRange
	mov	DWORD PTR tv159[ebp], 0
	jmp	SHORT $LN10@WriteRange
$LN9@WriteRange:
	mov	DWORD PTR tv159[ebp], -2147467259	; 80004005H
$LN10@WriteRange:
	mov	eax, DWORD PTR tv159[ebp]
	mov	DWORD PTR $T79605[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _copyCoder$[ebp]
	call	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inStreamLimited$[ebp]
	call	??1?$CMyComPtr@VCLimitedSequentialInStream@@@@QAE@XZ ; CMyComPtr<CLimitedSequentialInStream>::~CMyComPtr<CLimitedSequentialInStream>
	mov	eax, DWORD PTR $T79605[ebp]
$LN3@WriteRange:
; Line 427
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@WriteRange
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 96					; 00000060H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
	npad	3
$LN19@WriteRange:
	DD	2
	DD	$LN18@WriteRange
$LN18@WriteRange:
	DD	-28					; ffffffe4H
	DD	4
	DD	$LN15@WriteRange
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN16@WriteRange
$LN16@WriteRange:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	121					; 00000079H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN15@WriteRange:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	76					; 0000004cH
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?WriteRange@N7z@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@_K2PAUICompressProgressInfo@@@Z$0:
	mov	eax, DWORD PTR $T79597[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?WriteRange@N7z@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@_K2PAUICompressProgressInfo@@@Z$1:
	lea	ecx, DWORD PTR _inStreamLimited$[ebp]
	jmp	??1?$CMyComPtr@VCLimitedSequentialInStream@@@@QAE@XZ ; CMyComPtr<CLimitedSequentialInStream>::~CMyComPtr<CLimitedSequentialInStream>
__unwindfunclet$?WriteRange@N7z@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@_K2PAUICompressProgressInfo@@@Z$2:
	mov	eax, DWORD PTR $T79601[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?WriteRange@N7z@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@_K2PAUICompressProgressInfo@@@Z$3:
	lea	ecx, DWORD PTR _copyCoder$[ebp]
	jmp	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
__ehhandler$?WriteRange@N7z@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@_K2PAUICompressProgressInfo@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-96]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?WriteRange@N7z@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@_K2PAUICompressProgressInfo@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?WriteRange@N7z@NArchive@@YGJPAUIInStream@@PAUISequentialOutStream@@_K2PAUICompressProgressInfo@@@Z ENDP ; NArchive::N7z::WriteRange
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetStream@CLimitedSequentialInStream@@QAEXPAUISequentialInStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_stream$ = 8						; size = 4
?SetStream@CLimitedSequentialInStream@@QAEXPAUISequentialInStream@@@Z PROC ; CLimitedSequentialInStream::SetStream, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\limitedstreams.h
; Line 20
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetStream@CLimitedSequentialInStream@@QAEXPAUISequentialInStream@@@Z ENDP ; CLimitedSequentialInStream::SetStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Init@CLimitedSequentialInStream@@QAEX_K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_streamSize$ = 8					; size = 8
?Init@CLimitedSequentialInStream@@QAEX_K@Z PROC		; CLimitedSequentialInStream::Init, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 24
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _streamSize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR _streamSize$[ebp+4]
	mov	DWORD PTR [eax+20], edx
; Line 25
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0
	mov	DWORD PTR [eax+28], 0
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+32], 0
; Line 27
	mov	esp, ebp
	pop	ebp
	ret	8
?Init@CLimitedSequentialInStream@@QAEX_K@Z ENDP		; CLimitedSequentialInStream::Init
_TEXT	ENDS
PUBLIC	??_7CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ ; NCompress::CCopyCoder::`vftable'
PUBLIC	??_7CCopyCoder@NCompress@@6BISequentialInStream@@@ ; NCompress::CCopyCoder::`vftable'
PUBLIC	??_7CCopyCoder@NCompress@@6BICompressSetInStream@@@ ; NCompress::CCopyCoder::`vftable'
PUBLIC	??_7CCopyCoder@NCompress@@6BICompressCoder@@@	; NCompress::CCopyCoder::`vftable'
PUBLIC	??0CMyUnknownImp@@QAE@XZ			; CMyUnknownImp::CMyUnknownImp
PUBLIC	??0ICompressGetInStreamProcessedSize@@QAE@XZ	; ICompressGetInStreamProcessedSize::ICompressGetInStreamProcessedSize
PUBLIC	??0ISequentialInStream@@QAE@XZ			; ISequentialInStream::ISequentialInStream
PUBLIC	??0ICompressSetInStream@@QAE@XZ			; ICompressSetInStream::ICompressSetInStream
PUBLIC	??0ICompressCoder@@QAE@XZ			; ICompressCoder::ICompressCoder
PUBLIC	??_R4CCopyCoder@NCompress@@6BICompressCoder@@@	; NCompress::CCopyCoder::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCCopyCoder@NCompress@@@8		; NCompress::CCopyCoder `RTTI Type Descriptor'
PUBLIC	??_R3CCopyCoder@NCompress@@8			; NCompress::CCopyCoder::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCopyCoder@NCompress@@8			; NCompress::CCopyCoder::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCopyCoder@NCompress@@8		; NCompress::CCopyCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ICompressCoder@@8			; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUICompressCoder@@@8			; ICompressCoder `RTTI Type Descriptor'
PUBLIC	??_R3ICompressCoder@@8				; ICompressCoder::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ICompressCoder@@8				; ICompressCoder::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIUnknown@@@8				; IUnknown `RTTI Type Descriptor'
PUBLIC	??_R3IUnknown@@8				; IUnknown::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IUnknown@@8				; IUnknown::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EC@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
PUBLIC	??_R13?0A@EA@ICompressSetInStream@@8		; ICompressSetInStream::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AUICompressSetInStream@@@8		; ICompressSetInStream `RTTI Type Descriptor'
PUBLIC	??_R3ICompressSetInStream@@8			; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ICompressSetInStream@@8			; ICompressSetInStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ICompressSetInStream@@8		; ICompressSetInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EC@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
PUBLIC	??_R17?0A@EA@ISequentialInStream@@8		; ISequentialInStream::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	??_R0?AUISequentialInStream@@@8			; ISequentialInStream `RTTI Type Descriptor'
PUBLIC	??_R3ISequentialInStream@@8			; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ISequentialInStream@@8			; ISequentialInStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ISequentialInStream@@8		; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R17?0A@EC@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
PUBLIC	??_R1M@?0A@EA@ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (12,-1,0,64)'
PUBLIC	??_R0?AUICompressGetInStreamProcessedSize@@@8	; ICompressGetInStreamProcessedSize `RTTI Type Descriptor'
PUBLIC	??_R3ICompressGetInStreamProcessedSize@@8	; ICompressGetInStreamProcessedSize::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ICompressGetInStreamProcessedSize@@8	; ICompressGetInStreamProcessedSize::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1M@?0A@EC@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (12,-1,0,66)'
PUBLIC	??_R1BA@?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (16,-1,0,64)'
PUBLIC	??_R0?AVCMyUnknownImp@@@8			; CMyUnknownImp `RTTI Type Descriptor'
PUBLIC	??_R3CMyUnknownImp@@8				; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMyUnknownImp@@8				; CMyUnknownImp::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::CCopyCoder::QueryInterface
PUBLIC	?AddRef@CCopyCoder@NCompress@@UAGKXZ		; NCompress::CCopyCoder::AddRef
PUBLIC	?Release@CCopyCoder@NCompress@@UAGKXZ		; NCompress::CCopyCoder::Release
PUBLIC	??_R4CCopyCoder@NCompress@@6BICompressSetInStream@@@ ; NCompress::CCopyCoder::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{4}'
PUBLIC	?AddRef@CCopyCoder@NCompress@@W3AGKXZ		; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{4}'
PUBLIC	?Release@CCopyCoder@NCompress@@W3AGKXZ		; [thunk]:NCompress::CCopyCoder::Release`adjustor{4}'
PUBLIC	??_R4CCopyCoder@NCompress@@6BISequentialInStream@@@ ; NCompress::CCopyCoder::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{8}'
PUBLIC	?AddRef@CCopyCoder@NCompress@@W7AGKXZ		; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{8}'
PUBLIC	?Release@CCopyCoder@NCompress@@W7AGKXZ		; [thunk]:NCompress::CCopyCoder::Release`adjustor{8}'
PUBLIC	??_R4CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ ; NCompress::CCopyCoder::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{12}'
PUBLIC	?AddRef@CCopyCoder@NCompress@@WM@AGKXZ		; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{12}'
PUBLIC	?Release@CCopyCoder@NCompress@@WM@AGKXZ		; [thunk]:NCompress::CCopyCoder::Release`adjustor{12}'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?Code@CCopyCoder@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z:PROC ; NCompress::CCopyCoder::Code
EXTRN	?SetInStream@CCopyCoder@NCompress@@UAGJPAUISequentialInStream@@@Z:PROC ; NCompress::CCopyCoder::SetInStream
EXTRN	?ReleaseInStream@CCopyCoder@NCompress@@UAGJXZ:PROC ; NCompress::CCopyCoder::ReleaseInStream
EXTRN	?Read@CCopyCoder@NCompress@@UAGJPAXIPAI@Z:PROC	; NCompress::CCopyCoder::Read
EXTRN	?GetInStreamProcessedSize@CCopyCoder@NCompress@@UAGJPA_K@Z:PROC ; NCompress::CCopyCoder::GetInStreamProcessedSize
;	COMDAT ??_R4CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@
; File c:\workspace\7z1505-src\cpp\7zip\compress\copycoder.h
rdata$r	SEGMENT
??_R4CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ DD 00H ; NCompress::CCopyCoder::`RTTI Complete Object Locator'
	DD	0cH
	DD	00H
	DD	FLAT:??_R0?AVCCopyCoder@NCompress@@@8
	DD	FLAT:??_R3CCopyCoder@NCompress@@8
rdata$r	ENDS
;	COMDAT ??_R4CCopyCoder@NCompress@@6BISequentialInStream@@@
rdata$r	SEGMENT
??_R4CCopyCoder@NCompress@@6BISequentialInStream@@@ DD 00H ; NCompress::CCopyCoder::`RTTI Complete Object Locator'
	DD	08H
	DD	00H
	DD	FLAT:??_R0?AVCCopyCoder@NCompress@@@8
	DD	FLAT:??_R3CCopyCoder@NCompress@@8
rdata$r	ENDS
;	COMDAT ??_R4CCopyCoder@NCompress@@6BICompressSetInStream@@@
rdata$r	SEGMENT
??_R4CCopyCoder@NCompress@@6BICompressSetInStream@@@ DD 00H ; NCompress::CCopyCoder::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVCCopyCoder@NCompress@@@8
	DD	FLAT:??_R3CCopyCoder@NCompress@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R2CMyUnknownImp@@8
rdata$r	SEGMENT
??_R2CMyUnknownImp@@8 DD FLAT:??_R1A@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMyUnknownImp@@8
rdata$r	SEGMENT
??_R3CMyUnknownImp@@8 DD 00H				; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMyUnknownImp@@@8
_DATA	SEGMENT
??_R0?AVCMyUnknownImp@@@8 DD FLAT:??_7type_info@@6B@	; CMyUnknownImp `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMyUnknownImp@@', 00H
_DATA	ENDS
;	COMDAT ??_R1BA@?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R1BA@?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (16,-1,0,64)'
	DD	00H
	DD	010H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R1M@?0A@EC@IUnknown@@8
rdata$r	SEGMENT
??_R1M@?0A@EC@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (12,-1,0,66)'
	DD	00H
	DD	0cH
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8 DD FLAT:??_R0?AUICompressGetInStreamProcessedSize@@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICompressGetInStreamProcessedSize@@8
rdata$r	ENDS
;	COMDAT ??_R2ICompressGetInStreamProcessedSize@@8
rdata$r	SEGMENT
??_R2ICompressGetInStreamProcessedSize@@8 DD FLAT:??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ICompressGetInStreamProcessedSize@@8
rdata$r	SEGMENT
??_R3ICompressGetInStreamProcessedSize@@8 DD 00H	; ICompressGetInStreamProcessedSize::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ICompressGetInStreamProcessedSize@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUICompressGetInStreamProcessedSize@@@8
_DATA	SEGMENT
??_R0?AUICompressGetInStreamProcessedSize@@@8 DD FLAT:??_7type_info@@6B@ ; ICompressGetInStreamProcessedSize `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUICompressGetInStreamProcessedSize@@', 00H
_DATA	ENDS
;	COMDAT ??_R1M@?0A@EA@ICompressGetInStreamProcessedSize@@8
rdata$r	SEGMENT
??_R1M@?0A@EA@ICompressGetInStreamProcessedSize@@8 DD FLAT:??_R0?AUICompressGetInStreamProcessedSize@@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (12,-1,0,64)'
	DD	01H
	DD	0cH
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICompressGetInStreamProcessedSize@@8
rdata$r	ENDS
;	COMDAT ??_R17?0A@EC@IUnknown@@8
rdata$r	SEGMENT
??_R17?0A@EC@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ISequentialInStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ISequentialInStream@@8 DD FLAT:??_R0?AUISequentialInStream@@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ISequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_R2ISequentialInStream@@8
rdata$r	SEGMENT
??_R2ISequentialInStream@@8 DD FLAT:??_R1A@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ISequentialInStream@@8
rdata$r	SEGMENT
??_R3ISequentialInStream@@8 DD 00H			; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ISequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUISequentialInStream@@@8
_DATA	SEGMENT
??_R0?AUISequentialInStream@@@8 DD FLAT:??_7type_info@@6B@ ; ISequentialInStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUISequentialInStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R17?0A@EA@ISequentialInStream@@8
rdata$r	SEGMENT
??_R17?0A@EA@ISequentialInStream@@8 DD FLAT:??_R0?AUISequentialInStream@@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	01H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ISequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_R13?0A@EC@IUnknown@@8
rdata$r	SEGMENT
??_R13?0A@EC@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ICompressSetInStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ICompressSetInStream@@8 DD FLAT:??_R0?AUICompressSetInStream@@@8 ; ICompressSetInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICompressSetInStream@@8
rdata$r	ENDS
;	COMDAT ??_R2ICompressSetInStream@@8
rdata$r	SEGMENT
??_R2ICompressSetInStream@@8 DD FLAT:??_R1A@?0A@EA@ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ICompressSetInStream@@8
rdata$r	SEGMENT
??_R3ICompressSetInStream@@8 DD 00H			; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ICompressSetInStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUICompressSetInStream@@@8
_DATA	SEGMENT
??_R0?AUICompressSetInStream@@@8 DD FLAT:??_7type_info@@6B@ ; ICompressSetInStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUICompressSetInStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@ICompressSetInStream@@8
rdata$r	SEGMENT
??_R13?0A@EA@ICompressSetInStream@@8 DD FLAT:??_R0?AUICompressSetInStream@@@8 ; ICompressSetInStream::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	01H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICompressSetInStream@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EC@IUnknown@@8
rdata$r	SEGMENT
??_R1A@?0A@EC@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R2IUnknown@@8
rdata$r	SEGMENT
??_R2IUnknown@@8 DD FLAT:??_R1A@?0A@EA@IUnknown@@8	; IUnknown::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3IUnknown@@8
rdata$r	SEGMENT
??_R3IUnknown@@8 DD 00H					; IUnknown::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIUnknown@@@8
_DATA	SEGMENT
??_R0?AUIUnknown@@@8 DD FLAT:??_7type_info@@6B@		; IUnknown `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIUnknown@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IUnknown@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R2ICompressCoder@@8
rdata$r	SEGMENT
??_R2ICompressCoder@@8 DD FLAT:??_R1A@?0A@EA@ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ICompressCoder@@8
rdata$r	SEGMENT
??_R3ICompressCoder@@8 DD 00H				; ICompressCoder::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ICompressCoder@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUICompressCoder@@@8
_DATA	SEGMENT
??_R0?AUICompressCoder@@@8 DD FLAT:??_7type_info@@6B@	; ICompressCoder `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUICompressCoder@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ICompressCoder@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ICompressCoder@@8 DD FLAT:??_R0?AUICompressCoder@@@8 ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICompressCoder@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CCopyCoder@NCompress@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CCopyCoder@NCompress@@8 DD FLAT:??_R0?AVCCopyCoder@NCompress@@@8 ; NCompress::CCopyCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	09H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCopyCoder@NCompress@@8
rdata$r	ENDS
;	COMDAT ??_R2CCopyCoder@NCompress@@8
rdata$r	SEGMENT
??_R2CCopyCoder@NCompress@@8 DD FLAT:??_R1A@?0A@EA@CCopyCoder@NCompress@@8 ; NCompress::CCopyCoder::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ICompressCoder@@8
	DD	FLAT:??_R1A@?0A@EC@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@ICompressSetInStream@@8
	DD	FLAT:??_R13?0A@EC@IUnknown@@8
	DD	FLAT:??_R17?0A@EA@ISequentialInStream@@8
	DD	FLAT:??_R17?0A@EC@IUnknown@@8
	DD	FLAT:??_R1M@?0A@EA@ICompressGetInStreamProcessedSize@@8
	DD	FLAT:??_R1M@?0A@EC@IUnknown@@8
	DD	FLAT:??_R1BA@?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CCopyCoder@NCompress@@8
rdata$r	SEGMENT
??_R3CCopyCoder@NCompress@@8 DD 00H			; NCompress::CCopyCoder::`RTTI Class Hierarchy Descriptor'
	DD	05H
	DD	0aH
	DD	FLAT:??_R2CCopyCoder@NCompress@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCopyCoder@NCompress@@@8
_DATA	SEGMENT
??_R0?AVCCopyCoder@NCompress@@@8 DD FLAT:??_7type_info@@6B@ ; NCompress::CCopyCoder `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCopyCoder@NCompress@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CCopyCoder@NCompress@@6BICompressCoder@@@
rdata$r	SEGMENT
??_R4CCopyCoder@NCompress@@6BICompressCoder@@@ DD 00H	; NCompress::CCopyCoder::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCCopyCoder@NCompress@@@8
	DD	FLAT:??_R3CCopyCoder@NCompress@@8
rdata$r	ENDS
;	COMDAT ??_7CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@
CONST	SEGMENT
??_7CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ DD FLAT:??_R4CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ ; NCompress::CCopyCoder::`vftable'
	DD	FLAT:?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CCopyCoder@NCompress@@WM@AGKXZ
	DD	FLAT:?Release@CCopyCoder@NCompress@@WM@AGKXZ
	DD	FLAT:?GetInStreamProcessedSize@CCopyCoder@NCompress@@UAGJPA_K@Z
CONST	ENDS
;	COMDAT ??_7CCopyCoder@NCompress@@6BISequentialInStream@@@
CONST	SEGMENT
??_7CCopyCoder@NCompress@@6BISequentialInStream@@@ DD FLAT:??_R4CCopyCoder@NCompress@@6BISequentialInStream@@@ ; NCompress::CCopyCoder::`vftable'
	DD	FLAT:?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CCopyCoder@NCompress@@W7AGKXZ
	DD	FLAT:?Release@CCopyCoder@NCompress@@W7AGKXZ
	DD	FLAT:?Read@CCopyCoder@NCompress@@UAGJPAXIPAI@Z
CONST	ENDS
;	COMDAT ??_7CCopyCoder@NCompress@@6BICompressSetInStream@@@
CONST	SEGMENT
??_7CCopyCoder@NCompress@@6BICompressSetInStream@@@ DD FLAT:??_R4CCopyCoder@NCompress@@6BICompressSetInStream@@@ ; NCompress::CCopyCoder::`vftable'
	DD	FLAT:?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CCopyCoder@NCompress@@W3AGKXZ
	DD	FLAT:?Release@CCopyCoder@NCompress@@W3AGKXZ
	DD	FLAT:?SetInStream@CCopyCoder@NCompress@@UAGJPAUISequentialInStream@@@Z
	DD	FLAT:?ReleaseInStream@CCopyCoder@NCompress@@UAGJXZ
CONST	ENDS
;	COMDAT ??_7CCopyCoder@NCompress@@6BICompressCoder@@@
CONST	SEGMENT
??_7CCopyCoder@NCompress@@6BICompressCoder@@@ DD FLAT:??_R4CCopyCoder@NCompress@@6BICompressCoder@@@ ; NCompress::CCopyCoder::`vftable'
	DD	FLAT:?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CCopyCoder@NCompress@@UAGKXZ
	DD	FLAT:?Release@CCopyCoder@NCompress@@UAGKXZ
	DD	FLAT:?Code@CCopyCoder@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CCopyCoder@NCompress@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CCopyCoder@NCompress@@QAE@XZ PROC			; NCompress::CCopyCoder::CCopyCoder, COMDAT
; _this$ = ecx
; Line 24
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ICompressCoder@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0ICompressSetInStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0ISequentialInStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0ICompressGetInStreamProcessedSize@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CCopyCoder@NCompress@@6BICompressCoder@@@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], OFFSET ??_7CCopyCoder@NCompress@@6BICompressSetInStream@@@
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], OFFSET ??_7CCopyCoder@NCompress@@6BISequentialInStream@@@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], OFFSET ??_7CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+32], 0
	mov	DWORD PTR [edx+36], 0
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CCopyCoder@NCompress@@QAE@XZ ENDP			; NCompress::CCopyCoder::CCopyCoder
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CMyUnknownImp@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMyUnknownImp@@QAE@XZ PROC				; CMyUnknownImp::CMyUnknownImp, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 167
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CMyUnknownImp@@QAE@XZ ENDP				; CMyUnknownImp::CMyUnknownImp
_TEXT	ENDS
PUBLIC	_==@8
EXTRN	_IID_ICompressGetInStreamProcessedSize:BYTE
EXTRN	_IID_ISequentialInStream:BYTE
EXTRN	_IID_ICompressSetInStream:BYTE
EXTRN	_IID_ICompressCoder:BYTE
EXTRN	_IID_IUnknown:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
tv144 = -12						; size = 4
tv134 = -8						; size = 4
tv92 = -4						; size = 4
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z PROC ; NCompress::CCopyCoder::QueryInterface, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\compress\copycoder.h
; Line 31
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN10@QueryInter
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	$LN9@QueryInter
$LN10@QueryInter:
	push	OFFSET _IID_ICompressCoder
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN8@QueryInter
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	$LN9@QueryInter
$LN8@QueryInter:
	push	OFFSET _IID_ICompressSetInStream
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN6@QueryInter
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN13@QueryInter
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	mov	DWORD PTR tv92[ebp], edx
	jmp	SHORT $LN14@QueryInter
$LN13@QueryInter:
	mov	DWORD PTR tv92[ebp], 0
$LN14@QueryInter:
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	ecx, DWORD PTR tv92[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN9@QueryInter
$LN6@QueryInter:
	push	OFFSET _IID_ISequentialInStream
	mov	edx, DWORD PTR _iid$[ebp]
	push	edx
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@QueryInter
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN15@QueryInter
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	mov	DWORD PTR tv134[ebp], eax
	jmp	SHORT $LN16@QueryInter
$LN15@QueryInter:
	mov	DWORD PTR tv134[ebp], 0
$LN16@QueryInter:
	mov	ecx, DWORD PTR _outObject$[ebp]
	mov	edx, DWORD PTR tv134[ebp]
	mov	DWORD PTR [ecx], edx
	jmp	SHORT $LN9@QueryInter
$LN4@QueryInter:
	push	OFFSET _IID_ICompressGetInStreamProcessedSize
	mov	eax, DWORD PTR _iid$[ebp]
	push	eax
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN17@QueryInter
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR tv144[ebp], ecx
	jmp	SHORT $LN18@QueryInter
$LN17@QueryInter:
	mov	DWORD PTR tv144[ebp], 0
$LN18@QueryInter:
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR tv144[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN9@QueryInter
$LN2@QueryInter:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN11@QueryInter
$LN9@QueryInter:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], edx
	xor	eax, eax
$LN11@QueryInter:
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z ENDP ; NCompress::CCopyCoder::QueryInterface
_TEXT	ENDS
PUBLIC	_IsEqualGUID@8
; Function compile flags: /Odtp /RTCsu
;	COMDAT _==@8
_TEXT	SEGMENT
_guidOne$ = 8						; size = 4
_guidOther$ = 12					; size = 4
_==@8	PROC						; COMDAT
; File c:\program files (x86)\microsoft sdks\windows\v7.0a\include\guiddef.h
; Line 193
	push	ebp
	mov	ebp, esp
; Line 194
	mov	eax, DWORD PTR _guidOther$[ebp]
	push	eax
	mov	ecx, DWORD PTR _guidOne$[ebp]
	push	ecx
	call	_IsEqualGUID@8
; Line 195
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_==@8	ENDP
_TEXT	ENDS
EXTRN	_memcmp:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT _IsEqualGUID@8
_TEXT	SEGMENT
_rguid1$ = 8						; size = 4
_rguid2$ = 12						; size = 4
_IsEqualGUID@8 PROC					; COMDAT
; Line 160
	push	ebp
	mov	ebp, esp
; Line 161
	push	16					; 00000010H
	mov	eax, DWORD PTR _rguid2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rguid1$[ebp]
	push	ecx
	call	_memcmp
	add	esp, 12					; 0000000cH
	neg	eax
	sbb	eax, eax
	add	eax, 1
; Line 162
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_IsEqualGUID@8 ENDP
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CCopyCoder@NCompress@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CCopyCoder@NCompress@@UAGKXZ PROC		; NCompress::CCopyCoder::AddRef, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\compress\copycoder.h
; Line 31
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+16], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CCopyCoder@NCompress@@UAGKXZ ENDP		; NCompress::CCopyCoder::AddRef
_TEXT	ENDS
PUBLIC	??_GCCopyCoder@NCompress@@QAEPAXI@Z		; NCompress::CCopyCoder::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CCopyCoder@NCompress@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T79645 = -8						; size = 4
$T79644 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CCopyCoder@NCompress@@UAGKXZ PROC		; NCompress::CCopyCoder::Release, COMDAT
; Line 31
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+16], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+16]
	jmp	SHORT $LN2@Release
$LN1@Release:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T79645[ebp], edx
	mov	eax, DWORD PTR $T79645[ebp]
	mov	DWORD PTR $T79644[ebp], eax
	cmp	DWORD PTR $T79644[ebp], 0
	je	SHORT $LN4@Release
	push	1
	mov	ecx, DWORD PTR $T79644[ebp]
	call	??_GCCopyCoder@NCompress@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release
$LN4@Release:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release:
	xor	eax, eax
$LN2@Release:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CCopyCoder@NCompress@@UAGKXZ ENDP		; NCompress::CCopyCoder::Release
_TEXT	ENDS
PUBLIC	??_7ICompressCoder@@6B@				; ICompressCoder::`vftable'
PUBLIC	??0IUnknown@@QAE@XZ				; IUnknown::IUnknown
PUBLIC	??_R4ICompressCoder@@6B@			; ICompressCoder::`RTTI Complete Object Locator'
EXTRN	__purecall:PROC
;	COMDAT ??_R4ICompressCoder@@6B@
rdata$r	SEGMENT
??_R4ICompressCoder@@6B@ DD 00H				; ICompressCoder::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUICompressCoder@@@8
	DD	FLAT:??_R3ICompressCoder@@8
rdata$r	ENDS
;	COMDAT ??_7ICompressCoder@@6B@
CONST	SEGMENT
??_7ICompressCoder@@6B@ DD FLAT:??_R4ICompressCoder@@6B@ ; ICompressCoder::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ICompressCoder@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ICompressCoder@@QAE@XZ PROC				; ICompressCoder::ICompressCoder, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ICompressCoder@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ICompressCoder@@QAE@XZ ENDP				; ICompressCoder::ICompressCoder
_TEXT	ENDS
PUBLIC	??_7ICompressSetInStream@@6B@			; ICompressSetInStream::`vftable'
PUBLIC	??_R4ICompressSetInStream@@6B@			; ICompressSetInStream::`RTTI Complete Object Locator'
;	COMDAT ??_R4ICompressSetInStream@@6B@
rdata$r	SEGMENT
??_R4ICompressSetInStream@@6B@ DD 00H			; ICompressSetInStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUICompressSetInStream@@@8
	DD	FLAT:??_R3ICompressSetInStream@@8
rdata$r	ENDS
;	COMDAT ??_7ICompressSetInStream@@6B@
CONST	SEGMENT
??_7ICompressSetInStream@@6B@ DD FLAT:??_R4ICompressSetInStream@@6B@ ; ICompressSetInStream::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ICompressSetInStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ICompressSetInStream@@QAE@XZ PROC			; ICompressSetInStream::ICompressSetInStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ICompressSetInStream@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ICompressSetInStream@@QAE@XZ ENDP			; ICompressSetInStream::ICompressSetInStream
_TEXT	ENDS
PUBLIC	??_7ISequentialInStream@@6B@			; ISequentialInStream::`vftable'
PUBLIC	??_R4ISequentialInStream@@6B@			; ISequentialInStream::`RTTI Complete Object Locator'
;	COMDAT ??_R4ISequentialInStream@@6B@
rdata$r	SEGMENT
??_R4ISequentialInStream@@6B@ DD 00H			; ISequentialInStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUISequentialInStream@@@8
	DD	FLAT:??_R3ISequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_7ISequentialInStream@@6B@
CONST	SEGMENT
??_7ISequentialInStream@@6B@ DD FLAT:??_R4ISequentialInStream@@6B@ ; ISequentialInStream::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ISequentialInStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ISequentialInStream@@QAE@XZ PROC			; ISequentialInStream::ISequentialInStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ISequentialInStream@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ISequentialInStream@@QAE@XZ ENDP			; ISequentialInStream::ISequentialInStream
_TEXT	ENDS
PUBLIC	??_7ICompressGetInStreamProcessedSize@@6B@	; ICompressGetInStreamProcessedSize::`vftable'
PUBLIC	??_R4ICompressGetInStreamProcessedSize@@6B@	; ICompressGetInStreamProcessedSize::`RTTI Complete Object Locator'
;	COMDAT ??_R4ICompressGetInStreamProcessedSize@@6B@
rdata$r	SEGMENT
??_R4ICompressGetInStreamProcessedSize@@6B@ DD 00H	; ICompressGetInStreamProcessedSize::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUICompressGetInStreamProcessedSize@@@8
	DD	FLAT:??_R3ICompressGetInStreamProcessedSize@@8
rdata$r	ENDS
;	COMDAT ??_7ICompressGetInStreamProcessedSize@@6B@
CONST	SEGMENT
??_7ICompressGetInStreamProcessedSize@@6B@ DD FLAT:??_R4ICompressGetInStreamProcessedSize@@6B@ ; ICompressGetInStreamProcessedSize::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ICompressGetInStreamProcessedSize@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ICompressGetInStreamProcessedSize@@QAE@XZ PROC	; ICompressGetInStreamProcessedSize::ICompressGetInStreamProcessedSize, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ICompressGetInStreamProcessedSize@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ICompressGetInStreamProcessedSize@@QAE@XZ ENDP	; ICompressGetInStreamProcessedSize::ICompressGetInStreamProcessedSize
_TEXT	ENDS
EXTRN	??1CCopyCoder@NCompress@@QAE@XZ:PROC		; NCompress::CCopyCoder::~CCopyCoder
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCCopyCoder@NCompress@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCCopyCoder@NCompress@@QAEPAXI@Z PROC		; NCompress::CCopyCoder::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CCopyCoder@NCompress@@QAE@XZ		; NCompress::CCopyCoder::~CCopyCoder
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCCopyCoder@NCompress@@QAEPAXI@Z ENDP		; NCompress::CCopyCoder::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0IUnknown@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IUnknown@@QAE@XZ PROC				; IUnknown::IUnknown, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0IUnknown@@QAE@XZ ENDP				; IUnknown::IUnknown
_TEXT	ENDS
PUBLIC	??_7CLimitedSequentialInStream@@6B@		; CLimitedSequentialInStream::`vftable'
PUBLIC	??_R4CLimitedSequentialInStream@@6B@		; CLimitedSequentialInStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCLimitedSequentialInStream@@@8		; CLimitedSequentialInStream `RTTI Type Descriptor'
PUBLIC	??_R3CLimitedSequentialInStream@@8		; CLimitedSequentialInStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CLimitedSequentialInStream@@8		; CLimitedSequentialInStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CLimitedSequentialInStream@@8	; CLimitedSequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	?QueryInterface@CLimitedSequentialInStream@@UAGJABU_GUID@@PAPAX@Z ; CLimitedSequentialInStream::QueryInterface
PUBLIC	?AddRef@CLimitedSequentialInStream@@UAGKXZ	; CLimitedSequentialInStream::AddRef
PUBLIC	?Release@CLimitedSequentialInStream@@UAGKXZ	; CLimitedSequentialInStream::Release
EXTRN	?Read@CLimitedSequentialInStream@@UAGJPAXIPAI@Z:PROC ; CLimitedSequentialInStream::Read
;	COMDAT ??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R13?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CLimitedSequentialInStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CLimitedSequentialInStream@@8 DD FLAT:??_R0?AVCLimitedSequentialInStream@@@8 ; CLimitedSequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CLimitedSequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_R2CLimitedSequentialInStream@@8
rdata$r	SEGMENT
??_R2CLimitedSequentialInStream@@8 DD FLAT:??_R1A@?0A@EA@CLimitedSequentialInStream@@8 ; CLimitedSequentialInStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ISequentialInStream@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CLimitedSequentialInStream@@8
rdata$r	SEGMENT
??_R3CLimitedSequentialInStream@@8 DD 00H		; CLimitedSequentialInStream::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2CLimitedSequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCLimitedSequentialInStream@@@8
_DATA	SEGMENT
??_R0?AVCLimitedSequentialInStream@@@8 DD FLAT:??_7type_info@@6B@ ; CLimitedSequentialInStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCLimitedSequentialInStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CLimitedSequentialInStream@@6B@
rdata$r	SEGMENT
??_R4CLimitedSequentialInStream@@6B@ DD 00H		; CLimitedSequentialInStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCLimitedSequentialInStream@@@8
	DD	FLAT:??_R3CLimitedSequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_7CLimitedSequentialInStream@@6B@
CONST	SEGMENT
??_7CLimitedSequentialInStream@@6B@ DD FLAT:??_R4CLimitedSequentialInStream@@6B@ ; CLimitedSequentialInStream::`vftable'
	DD	FLAT:?QueryInterface@CLimitedSequentialInStream@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CLimitedSequentialInStream@@UAGKXZ
	DD	FLAT:?Release@CLimitedSequentialInStream@@UAGKXZ
	DD	FLAT:?Read@CLimitedSequentialInStream@@UAGJPAXIPAI@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CLimitedSequentialInStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CLimitedSequentialInStream@@QAE@XZ PROC		; CLimitedSequentialInStream::CLimitedSequentialInStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ISequentialInStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CLimitedSequentialInStream@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CLimitedSequentialInStream@@QAE@XZ ENDP		; CLimitedSequentialInStream::CLimitedSequentialInStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CLimitedSequentialInStream@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CLimitedSequentialInStream@@UAGJABU_GUID@@PAPAX@Z PROC ; CLimitedSequentialInStream::QueryInterface, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\common\limitedstreams.h
; Line 29
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@QueryInter@2
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN3@QueryInter@2
$LN4@QueryInter@2:
	push	OFFSET _IID_ISequentialInStream
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@2
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN3@QueryInter@2
$LN2@QueryInter@2:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN5@QueryInter@2
$LN3@QueryInter@2:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	xor	eax, eax
$LN5@QueryInter@2:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CLimitedSequentialInStream@@UAGJABU_GUID@@PAPAX@Z ENDP ; CLimitedSequentialInStream::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CLimitedSequentialInStream@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CLimitedSequentialInStream@@UAGKXZ PROC		; CLimitedSequentialInStream::AddRef, COMDAT
; Line 29
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CLimitedSequentialInStream@@UAGKXZ ENDP		; CLimitedSequentialInStream::AddRef
_TEXT	ENDS
PUBLIC	??_GCLimitedSequentialInStream@@QAEPAXI@Z	; CLimitedSequentialInStream::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CLimitedSequentialInStream@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T79670 = -8						; size = 4
$T79669 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CLimitedSequentialInStream@@UAGKXZ PROC	; CLimitedSequentialInStream::Release, COMDAT
; Line 29
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	jmp	SHORT $LN2@Release@2
$LN1@Release@2:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T79670[ebp], edx
	mov	eax, DWORD PTR $T79670[ebp]
	mov	DWORD PTR $T79669[ebp], eax
	cmp	DWORD PTR $T79669[ebp], 0
	je	SHORT $LN4@Release@2
	push	1
	mov	ecx, DWORD PTR $T79669[ebp]
	call	??_GCLimitedSequentialInStream@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release@2
$LN4@Release@2:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release@2:
	xor	eax, eax
$LN2@Release@2:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CLimitedSequentialInStream@@UAGKXZ ENDP	; CLimitedSequentialInStream::Release
_TEXT	ENDS
PUBLIC	??1CLimitedSequentialInStream@@QAE@XZ		; CLimitedSequentialInStream::~CLimitedSequentialInStream
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCLimitedSequentialInStream@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCLimitedSequentialInStream@@QAEPAXI@Z PROC		; CLimitedSequentialInStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CLimitedSequentialInStream@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCLimitedSequentialInStream@@QAEPAXI@Z ENDP		; CLimitedSequentialInStream::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CLimitedSequentialInStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CLimitedSequentialInStream@@QAE@XZ PROC		; CLimitedSequentialInStream::~CLimitedSequentialInStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CLimitedSequentialInStream@@QAE@XZ ENDP		; CLimitedSequentialInStream::~CLimitedSequentialInStream
_TEXT	ENDS
EXTRN	?CompareFileNames@@YGHPB_W0@Z:PROC		; CompareFileNames
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv143 = -20						; size = 4
_n$ = -16						; size = 4
_u2$ = -12						; size = 4
_u1$ = -8						; size = 4
_updateItems$ = -4					; size = 4
_p1$ = 8						; size = 4
_p2$ = 12						; size = 4
_param$ = 16						; size = 4
?CompareEmptyItems@N7z@NArchive@@YGHPBI0PAX@Z PROC	; NArchive::N7z::CompareEmptyItems
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zupdate.cpp
; Line 538
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 539
	mov	eax, DWORD PTR _param$[ebp]
	mov	DWORD PTR _updateItems$[ebp], eax
; Line 540
	mov	ecx, DWORD PTR _p1$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _updateItems$[ebp]
	call	??A?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QBEABUCUpdateItem@N7z@NArchive@@I@Z ; CObjectVector<NArchive::N7z::CUpdateItem>::operator[]
	mov	DWORD PTR _u1$[ebp], eax
; Line 541
	mov	eax, DWORD PTR _p2$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _updateItems$[ebp]
	call	??A?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QBEABUCUpdateItem@N7z@NArchive@@I@Z ; CObjectVector<NArchive::N7z::CUpdateItem>::operator[]
	mov	DWORD PTR _u2$[ebp], eax
; Line 543
	mov	edx, DWORD PTR _u1$[ebp]
	movzx	eax, BYTE PTR [edx+58]
	mov	ecx, DWORD PTR _u2$[ebp]
	movzx	edx, BYTE PTR [ecx+58]
	cmp	eax, edx
	je	SHORT $LN3@CompareEmp
; Line 544
	mov	eax, DWORD PTR _u1$[ebp]
	movzx	eax, BYTE PTR [eax+58]
	neg	eax
	sbb	eax, eax
	and	eax, 2
	add	eax, -1
	jmp	$LN4@CompareEmp
$LN3@CompareEmp:
; Line 545
	mov	ecx, DWORD PTR _u1$[ebp]
	movzx	edx, BYTE PTR [ecx+59]
	mov	eax, DWORD PTR _u2$[ebp]
	movzx	ecx, BYTE PTR [eax+59]
	cmp	edx, ecx
	je	SHORT $LN2@CompareEmp
; Line 548
	mov	edx, DWORD PTR _u1$[ebp]
	movzx	eax, BYTE PTR [edx+59]
	test	eax, eax
	je	SHORT $LN1@CompareEmp
; Line 549
	mov	ecx, DWORD PTR _u1$[ebp]
	movzx	eax, BYTE PTR [ecx+58]
	neg	eax
	sbb	eax, eax
	and	eax, 2
	add	eax, -1
	jmp	SHORT $LN4@CompareEmp
$LN1@CompareEmp:
; Line 550
	mov	edx, DWORD PTR _u2$[ebp]
	movzx	eax, BYTE PTR [edx+58]
	neg	eax
	sbb	eax, eax
	and	eax, -2					; fffffffeH
	add	eax, 1
	jmp	SHORT $LN4@CompareEmp
$LN2@CompareEmp:
; Line 552
	mov	ecx, DWORD PTR _u2$[ebp]
	add	ecx, 40					; 00000028H
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	mov	ecx, DWORD PTR _u1$[ebp]
	add	ecx, 40					; 00000028H
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	?CompareFileNames@@YGHPB_W0@Z		; CompareFileNames
	mov	DWORD PTR _n$[ebp], eax
; Line 553
	mov	eax, DWORD PTR _u1$[ebp]
	movzx	ecx, BYTE PTR [eax+59]
	test	ecx, ecx
	je	SHORT $LN6@CompareEmp
	mov	edx, DWORD PTR _u1$[ebp]
	movzx	eax, BYTE PTR [edx+58]
	test	eax, eax
	je	SHORT $LN6@CompareEmp
	mov	ecx, DWORD PTR _n$[ebp]
	neg	ecx
	mov	DWORD PTR tv143[ebp], ecx
	jmp	SHORT $LN7@CompareEmp
$LN6@CompareEmp:
	mov	edx, DWORD PTR _n$[ebp]
	mov	DWORD PTR tv143[ebp], edx
$LN7@CompareEmp:
	mov	eax, DWORD PTR tv143[ebp]
$LN4@CompareEmp:
; Line 554
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?CompareEmptyItems@N7z@NArchive@@YGHPBI0PAX@Z ENDP	; NArchive::N7z::CompareEmptyItems
_TEXT	ENDS
PUBLIC	??1AString@@QAE@XZ				; AString::~AString
PUBLIC	??YAString@@QAEAAV0@D@Z				; AString::operator+=
PUBLIC	?MyCharLower_Ascii@@YGDD@Z			; MyCharLower_Ascii
PUBLIC	??BAString@@QBEPBDXZ				; AString::operator char const *
EXTRN	??0AString@@QAE@XZ:PROC				; AString::AString
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CRefItem@N7z@NArchive@@QAE@IABUCUpdateItem@12@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CRefItem@N7z@NArchive@@QAE@IABUCUpdateItem@12@_N@Z$0
__ehfuncinfo$??0CRefItem@N7z@NArchive@@QAE@IABUCUpdateItem@12@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CRefItem@N7z@NArchive@@QAE@IABUCUpdateItem@12@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CRefItem@N7z@NArchive@@QAE@IABUCUpdateItem@12@_N@Z
_TEXT	SEGMENT
_c$75680 = -52						; size = 2
_pos$75676 = -48					; size = 4
_s$75675 = -40						; size = 12
_dotPos$75671 = -24					; size = 4
_slashPos$75670 = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_index$ = 8						; size = 4
_ui$ = 12						; size = 4
_sortByType$ = 16					; size = 1
??0CRefItem@N7z@NArchive@@QAE@IABUCUpdateItem@12@_N@Z PROC ; NArchive::N7z::CRefItem::CRefItem, COMDAT
; _this$ = ecx
; Line 634
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CRefItem@N7z@NArchive@@QAE@IABUCUpdateItem@12@_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _ui$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _index$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0
; Line 635
	movzx	ecx, BYTE PTR _sortByType$[ebp]
	test	ecx, ecx
	je	$LN10@CRefItem
; Line 637
	mov	ecx, DWORD PTR _ui$[ebp]
	add	ecx, 40					; 00000028H
	call	?ReverseFind_PathSepar@UString@@QBEHXZ	; UString::ReverseFind_PathSepar
	mov	DWORD PTR _slashPos$75670[ebp], eax
; Line 638
	mov	edx, DWORD PTR _slashPos$75670[ebp]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
; Line 639
	mov	ecx, DWORD PTR _ui$[ebp]
	add	ecx, 40					; 00000028H
	call	?ReverseFind_Dot@UString@@QBEHXZ	; UString::ReverseFind_Dot
	mov	DWORD PTR _dotPos$75671[ebp], eax
; Line 640
	mov	ecx, DWORD PTR _dotPos$75671[ebp]
	cmp	ecx, DWORD PTR _slashPos$75670[ebp]
	jg	SHORT $LN8@CRefItem
; Line 641
	mov	ecx, DWORD PTR _ui$[ebp]
	add	ecx, 40					; 00000028H
	call	?Len@UString@@QBEIXZ			; UString::Len
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 642
	jmp	$LN10@CRefItem
$LN8@CRefItem:
; Line 644
	mov	eax, DWORD PTR _dotPos$75671[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 645
	mov	ecx, DWORD PTR _ui$[ebp]
	add	ecx, 40					; 00000028H
	call	?Len@UString@@QBEIXZ			; UString::Len
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+8], eax
	je	$LN10@CRefItem
; Line 647
	lea	ecx, DWORD PTR _s$75675[ebp]
	call	??0AString@@QAE@XZ			; AString::AString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 648
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _pos$75676[ebp], ecx
	jmp	SHORT $LN5@CRefItem
$LN4@CRefItem:
	mov	edx, DWORD PTR _pos$75676[ebp]
	add	edx, 1
	mov	DWORD PTR _pos$75676[ebp], edx
$LN5@CRefItem:
; Line 650
	mov	ecx, DWORD PTR _ui$[ebp]
	add	ecx, 40					; 00000028H
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	ecx, DWORD PTR _pos$75676[ebp]
	mov	dx, WORD PTR [eax+ecx*2]
	mov	WORD PTR _c$75680[ebp], dx
; Line 651
	movzx	eax, WORD PTR _c$75680[ebp]
	cmp	eax, 128				; 00000080H
	jl	SHORT $LN2@CRefItem
; Line 652
	jmp	SHORT $LN3@CRefItem
$LN2@CRefItem:
; Line 653
	movzx	ecx, WORD PTR _c$75680[ebp]
	test	ecx, ecx
	jne	SHORT $LN1@CRefItem
; Line 655
	lea	ecx, DWORD PTR _s$75675[ebp]
	call	??BAString@@QBEPBDXZ			; AString::operator char const *
	push	eax
	call	?GetExtIndex@N7z@NArchive@@YGIPBD@Z	; NArchive::N7z::GetExtIndex
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], eax
; Line 656
	jmp	SHORT $LN3@CRefItem
$LN1@CRefItem:
; Line 658
	movzx	eax, BYTE PTR _c$75680[ebp]
	push	eax
	call	?MyCharLower_Ascii@@YGDD@Z		; MyCharLower_Ascii
	movzx	ecx, al
	push	ecx
	lea	ecx, DWORD PTR _s$75675[ebp]
	call	??YAString@@QAEAAV0@D@Z			; AString::operator+=
; Line 659
	jmp	SHORT $LN4@CRefItem
$LN3@CRefItem:
; Line 660
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _s$75675[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
$LN10@CRefItem:
; Line 663
	mov	eax, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@CRefItem
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	3
$LN16@CRefItem:
	DD	1
	DD	$LN15@CRefItem
$LN15@CRefItem:
	DD	-40					; ffffffd8H
	DD	12					; 0000000cH
	DD	$LN13@CRefItem
$LN13@CRefItem:
	DB	115					; 00000073H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CRefItem@N7z@NArchive@@QAE@IABUCUpdateItem@12@_N@Z$0:
	lea	ecx, DWORD PTR _s$75675[ebp]
	jmp	??1AString@@QAE@XZ			; AString::~AString
__ehhandler$??0CRefItem@N7z@NArchive@@QAE@IABUCUpdateItem@12@_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-48]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CRefItem@N7z@NArchive@@QAE@IABUCUpdateItem@12@_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CRefItem@N7z@NArchive@@QAE@IABUCUpdateItem@12@_N@Z ENDP ; NArchive::N7z::CRefItem::CRefItem
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?MyCharLower_Ascii@@YGDD@Z
_TEXT	SEGMENT
_c$ = 8							; size = 1
?MyCharLower_Ascii@@YGDD@Z PROC				; MyCharLower_Ascii, COMDAT
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 106
	push	ebp
	mov	ebp, esp
; Line 107
	movsx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 65					; 00000041H
	jl	SHORT $LN1@MyCharLowe
	movsx	ecx, BYTE PTR _c$[ebp]
	cmp	ecx, 90					; 0000005aH
	jg	SHORT $LN1@MyCharLowe
; Line 108
	movzx	eax, BYTE PTR _c$[ebp]
	add	eax, 32					; 00000020H
	jmp	SHORT $LN2@MyCharLowe
$LN1@MyCharLowe:
; Line 109
	mov	al, BYTE PTR _c$[ebp]
$LN2@MyCharLowe:
; Line 110
	pop	ebp
	ret	4
?MyCharLower_Ascii@@YGDD@Z ENDP				; MyCharLower_Ascii
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1AString@@QAE@XZ
_TEXT	SEGMENT
$T79697 = -8						; size = 4
_this$ = -4						; size = 4
??1AString@@QAE@XZ PROC					; AString::~AString, COMDAT
; _this$ = ecx
; Line 232
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T79697[ebp], ecx
	mov	edx, DWORD PTR $T79697[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1AString@@QAE@XZ ENDP					; AString::~AString
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??BAString@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BAString@@QBEPBDXZ PROC				; AString::operator char const *, COMDAT
; _this$ = ecx
; Line 238
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??BAString@@QBEPBDXZ ENDP				; AString::operator char const *
_TEXT	ENDS
EXTRN	?Grow_1@AString@@AAEXXZ:PROC			; AString::Grow_1
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??YAString@@QAEAAV0@D@Z
_TEXT	SEGMENT
_chars$ = -12						; size = 4
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_c$ = 8							; size = 1
??YAString@@QAEAAV0@D@Z PROC				; AString::operator+=, COMDAT
; _this$ = ecx
; Line 281
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 282
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+4]
	jne	SHORT $LN1@operator@2
; Line 283
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Grow_1@AString@@AAEXXZ			; AString::Grow_1
$LN1@operator@2:
; Line 284
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _len$[ebp], ecx
; Line 285
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _chars$[ebp], eax
; Line 286
	mov	ecx, DWORD PTR _chars$[ebp]
	add	ecx, DWORD PTR _len$[ebp]
	mov	dl, BYTE PTR _c$[ebp]
	mov	BYTE PTR [ecx], dl
	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 1
	mov	DWORD PTR _len$[ebp], eax
; Line 287
	mov	ecx, DWORD PTR _chars$[ebp]
	add	ecx, DWORD PTR _len$[ebp]
	mov	BYTE PTR [ecx], 0
; Line 288
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 289
	mov	eax, DWORD PTR _this$[ebp]
; Line 290
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??YAString@@QAEAAV0@D@Z ENDP				; AString::operator+=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
_TEXT	SEGMENT
_c2$75640 = -17						; size = 1
_pos$75636 = -16					; size = 4
_c$75633 = -9						; size = 1
_p$ = -8						; size = 4
_extIndex$ = -4						; size = 4
_ext$ = 8						; size = 4
?GetExtIndex@N7z@NArchive@@YGIPBD@Z PROC		; NArchive::N7z::GetExtIndex
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zupdate.cpp
; Line 587
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 588
	mov	DWORD PTR _extIndex$[ebp], 1
; Line 589
	mov	eax, DWORD PTR _g_Exts
	mov	DWORD PTR _p$[ebp], eax
$LN13@GetExtInde:
; Line 592
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _c$75633[ebp], dl
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
; Line 593
	movsx	ecx, BYTE PTR _c$75633[ebp]
	test	ecx, ecx
	jne	SHORT $LN11@GetExtInde
; Line 594
	mov	eax, DWORD PTR _extIndex$[ebp]
	jmp	$LN14@GetExtInde
$LN11@GetExtInde:
; Line 595
	movsx	edx, BYTE PTR _c$75633[ebp]
	cmp	edx, 32					; 00000020H
	jne	SHORT $LN10@GetExtInde
; Line 596
	jmp	SHORT $LN13@GetExtInde
$LN10@GetExtInde:
; Line 597
	mov	DWORD PTR _pos$75636[ebp], 0
$LN9@GetExtInde:
; Line 600
	mov	eax, DWORD PTR _ext$[ebp]
	add	eax, DWORD PTR _pos$75636[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c2$75640[ebp], cl
	mov	edx, DWORD PTR _pos$75636[ebp]
	add	edx, 1
	mov	DWORD PTR _pos$75636[ebp], edx
; Line 601
	movsx	eax, BYTE PTR _c2$75640[ebp]
	test	eax, eax
	jne	SHORT $LN7@GetExtInde
	movsx	ecx, BYTE PTR _c$75633[ebp]
	test	ecx, ecx
	je	SHORT $LN6@GetExtInde
	movsx	edx, BYTE PTR _c$75633[ebp]
	cmp	edx, 32					; 00000020H
	jne	SHORT $LN7@GetExtInde
$LN6@GetExtInde:
; Line 602
	mov	eax, DWORD PTR _extIndex$[ebp]
	jmp	SHORT $LN14@GetExtInde
$LN7@GetExtInde:
; Line 603
	movsx	eax, BYTE PTR _c$75633[ebp]
	movsx	ecx, BYTE PTR _c2$75640[ebp]
	cmp	eax, ecx
	je	SHORT $LN5@GetExtInde
; Line 604
	jmp	SHORT $LN8@GetExtInde
$LN5@GetExtInde:
; Line 605
	mov	edx, DWORD PTR _p$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR _c$75633[ebp], al
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
; Line 606
	jmp	SHORT $LN9@GetExtInde
$LN8@GetExtInde:
; Line 607
	mov	edx, DWORD PTR _extIndex$[ebp]
	add	edx, 1
	mov	DWORD PTR _extIndex$[ebp], edx
$LN4@GetExtInde:
; Line 610
	movsx	eax, BYTE PTR _c$75633[ebp]
	test	eax, eax
	jne	SHORT $LN2@GetExtInde
; Line 611
	mov	eax, DWORD PTR _extIndex$[ebp]
	jmp	SHORT $LN14@GetExtInde
$LN2@GetExtInde:
; Line 612
	movsx	ecx, BYTE PTR _c$75633[ebp]
	cmp	ecx, 32					; 00000020H
	jne	SHORT $LN1@GetExtInde
; Line 613
	jmp	SHORT $LN3@GetExtInde
$LN1@GetExtInde:
; Line 614
	mov	edx, DWORD PTR _p$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR _c$75633[ebp], al
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
; Line 615
	jmp	SHORT $LN4@GetExtInde
$LN3@GetExtInde:
; Line 616
	jmp	$LN13@GetExtInde
$LN14@GetExtInde:
; Line 617
	mov	esp, ebp
	pop	ebp
	ret	4
?GetExtIndex@N7z@NArchive@@YGIPBD@Z ENDP		; NArchive::N7z::GetExtIndex
_TEXT	ENDS
PUBLIC	??$MyCompare@H@@YGHHH@Z				; MyCompare<int>
PUBLIC	??$MyCompare@_K@@YGH_K0@Z			; MyCompare<unsigned __int64>
PUBLIC	??$MyCompare@I@@YGHII@Z				; MyCompare<unsigned int>
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
___tt$75742 = -60					; size = 4
___tt$75735 = -56					; size = 4
___result__$75733 = -52					; size = 4
___tt$75731 = -48					; size = 4
___tt$75724 = -44					; size = 4
___tt$75719 = -40					; size = 4
___tt$75717 = -36					; size = 4
___tt$75710 = -32					; size = 4
_sortByType$ = -25					; size = 1
_sortParam$ = -24					; size = 4
_n$75705 = -20						; size = 4
_u2$ = -16						; size = 4
_u1$ = -12						; size = 4
_a2$ = -8						; size = 4
_a1$ = -4						; size = 4
_p1$ = 8						; size = 4
_p2$ = 12						; size = 4
_param$ = 16						; size = 4
?CompareUpdateItems@N7z@NArchive@@YGHPBUCRefItem@12@0PAX@Z PROC ; NArchive::N7z::CompareUpdateItems
; Line 682
	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 683
	mov	eax, DWORD PTR _p1$[ebp]
	mov	DWORD PTR _a1$[ebp], eax
; Line 684
	mov	ecx, DWORD PTR _p2$[ebp]
	mov	DWORD PTR _a2$[ebp], ecx
; Line 685
	mov	edx, DWORD PTR _a1$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _u1$[ebp], eax
; Line 686
	mov	ecx, DWORD PTR _a2$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _u2$[ebp], edx
; Line 695
	mov	eax, DWORD PTR _u1$[ebp]
	movzx	ecx, BYTE PTR [eax+59]
	mov	edx, DWORD PTR _u2$[ebp]
	movzx	eax, BYTE PTR [edx+59]
	cmp	ecx, eax
	je	SHORT $LN15@CompareUpd
; Line 696
	mov	ecx, DWORD PTR _u1$[ebp]
	movzx	eax, BYTE PTR [ecx+59]
	neg	eax
	sbb	eax, eax
	and	eax, 2
	add	eax, -1
	jmp	$LN16@CompareUpd
$LN15@CompareUpd:
; Line 697
	mov	edx, DWORD PTR _u1$[ebp]
	movzx	eax, BYTE PTR [edx+59]
	test	eax, eax
	je	SHORT $LN14@CompareUpd
; Line 699
	mov	ecx, DWORD PTR _u1$[ebp]
	movzx	edx, BYTE PTR [ecx+58]
	mov	eax, DWORD PTR _u2$[ebp]
	movzx	ecx, BYTE PTR [eax+58]
	cmp	edx, ecx
	je	SHORT $LN13@CompareUpd
; Line 700
	mov	edx, DWORD PTR _u1$[ebp]
	movzx	eax, BYTE PTR [edx+58]
	neg	eax
	sbb	eax, eax
	and	eax, 2
	add	eax, -1
	jmp	$LN16@CompareUpd
$LN13@CompareUpd:
; Line 701
	mov	ecx, DWORD PTR _u2$[ebp]
	add	ecx, 40					; 00000028H
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	mov	ecx, DWORD PTR _u1$[ebp]
	add	ecx, 40					; 00000028H
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	?CompareFileNames@@YGHPB_W0@Z		; CompareFileNames
	mov	DWORD PTR _n$75705[ebp], eax
; Line 702
	mov	eax, DWORD PTR _n$75705[ebp]
	neg	eax
	jmp	$LN16@CompareUpd
$LN14@CompareUpd:
; Line 706
	mov	eax, DWORD PTR _param$[ebp]
	mov	DWORD PTR _sortParam$[ebp], eax
; Line 707
	mov	ecx, DWORD PTR _sortParam$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _sortByType$[ebp], dl
; Line 708
	movzx	eax, BYTE PTR _sortByType$[ebp]
	test	eax, eax
	je	$LN12@CompareUpd
; Line 710
	mov	ecx, DWORD PTR _a2$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _a1$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	??$MyCompare@I@@YGHII@Z			; MyCompare<unsigned int>
	mov	DWORD PTR ___tt$75710[ebp], eax
	cmp	DWORD PTR ___tt$75710[ebp], 0
	je	SHORT $LN11@CompareUpd
	mov	eax, DWORD PTR ___tt$75710[ebp]
	jmp	$LN16@CompareUpd
$LN11@CompareUpd:
; Line 711
	mov	edx, DWORD PTR _a2$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _u2$[ebp]
	add	ecx, 40					; 00000028H
	call	?Ptr@UString@@QBEPB_WI@Z		; UString::Ptr
	push	eax
	mov	ecx, DWORD PTR _a1$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR _u1$[ebp]
	add	ecx, 40					; 00000028H
	call	?Ptr@UString@@QBEPB_WI@Z		; UString::Ptr
	push	eax
	call	?CompareFileNames@@YGHPB_W0@Z		; CompareFileNames
	mov	DWORD PTR ___tt$75717[ebp], eax
	cmp	DWORD PTR ___tt$75717[ebp], 0
	je	SHORT $LN10@CompareUpd
	mov	eax, DWORD PTR ___tt$75717[ebp]
	jmp	$LN16@CompareUpd
$LN10@CompareUpd:
; Line 712
	mov	eax, DWORD PTR _a2$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _u2$[ebp]
	add	ecx, 40					; 00000028H
	call	?Ptr@UString@@QBEPB_WI@Z		; UString::Ptr
	push	eax
	mov	edx, DWORD PTR _a1$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _u1$[ebp]
	add	ecx, 40					; 00000028H
	call	?Ptr@UString@@QBEPB_WI@Z		; UString::Ptr
	push	eax
	call	?CompareFileNames@@YGHPB_W0@Z		; CompareFileNames
	mov	DWORD PTR ___tt$75719[ebp], eax
	cmp	DWORD PTR ___tt$75719[ebp], 0
	je	SHORT $LN9@CompareUpd
	mov	eax, DWORD PTR ___tt$75719[ebp]
	jmp	$LN16@CompareUpd
$LN9@CompareUpd:
; Line 713
	mov	ecx, DWORD PTR _u1$[ebp]
	movzx	edx, BYTE PTR [ecx+63]
	test	edx, edx
	jne	SHORT $LN8@CompareUpd
	mov	eax, DWORD PTR _u2$[ebp]
	movzx	ecx, BYTE PTR [eax+63]
	test	ecx, ecx
	je	SHORT $LN8@CompareUpd
	mov	eax, 1
	jmp	$LN16@CompareUpd
$LN8@CompareUpd:
; Line 714
	mov	edx, DWORD PTR _u1$[ebp]
	movzx	eax, BYTE PTR [edx+63]
	test	eax, eax
	je	SHORT $LN7@CompareUpd
	mov	ecx, DWORD PTR _u2$[ebp]
	movzx	edx, BYTE PTR [ecx+63]
	test	edx, edx
	jne	SHORT $LN7@CompareUpd
	or	eax, -1
	jmp	$LN16@CompareUpd
$LN7@CompareUpd:
; Line 715
	mov	eax, DWORD PTR _u1$[ebp]
	movzx	ecx, BYTE PTR [eax+63]
	test	ecx, ecx
	je	SHORT $LN6@CompareUpd
	mov	edx, DWORD PTR _u2$[ebp]
	movzx	eax, BYTE PTR [edx+63]
	test	eax, eax
	je	SHORT $LN6@CompareUpd
	mov	ecx, DWORD PTR _u2$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	mov	eax, DWORD PTR [ecx+24]
	push	eax
	mov	ecx, DWORD PTR _u1$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	mov	eax, DWORD PTR [ecx+24]
	push	eax
	call	??$MyCompare@_K@@YGH_K0@Z		; MyCompare<unsigned __int64>
	mov	DWORD PTR ___tt$75724[ebp], eax
	cmp	DWORD PTR ___tt$75724[ebp], 0
	je	SHORT $LN6@CompareUpd
	mov	eax, DWORD PTR ___tt$75724[ebp]
	jmp	$LN16@CompareUpd
$LN6@CompareUpd:
; Line 716
	mov	ecx, DWORD PTR _u2$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	mov	eax, DWORD PTR [ecx+32]
	push	eax
	mov	ecx, DWORD PTR _u1$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	mov	eax, DWORD PTR [ecx+32]
	push	eax
	call	??$MyCompare@_K@@YGH_K0@Z		; MyCompare<unsigned __int64>
	mov	DWORD PTR ___tt$75731[ebp], eax
	cmp	DWORD PTR ___tt$75731[ebp], 0
	je	SHORT $LN12@CompareUpd
	mov	eax, DWORD PTR ___tt$75731[ebp]
	jmp	SHORT $LN16@CompareUpd
$LN12@CompareUpd:
; Line 762
	mov	ecx, DWORD PTR _u2$[ebp]
	add	ecx, 40					; 00000028H
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	mov	ecx, DWORD PTR _u1$[ebp]
	add	ecx, 40					; 00000028H
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	?CompareFileNames@@YGHPB_W0@Z		; CompareFileNames
	mov	DWORD PTR ___result__$75733[ebp], eax
	cmp	DWORD PTR ___result__$75733[ebp], 0
	je	SHORT $LN3@CompareUpd
	mov	eax, DWORD PTR ___result__$75733[ebp]
	jmp	SHORT $LN16@CompareUpd
$LN3@CompareUpd:
; Line 763
	mov	ecx, DWORD PTR _a2$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _a1$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	??$MyCompare@H@@YGHHH@Z			; MyCompare<int>
	mov	DWORD PTR ___tt$75735[ebp], eax
	cmp	DWORD PTR ___tt$75735[ebp], 0
	je	SHORT $LN2@CompareUpd
	mov	eax, DWORD PTR ___tt$75735[ebp]
	jmp	SHORT $LN16@CompareUpd
$LN2@CompareUpd:
; Line 764
	mov	ecx, DWORD PTR _a2$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _a1$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	??$MyCompare@H@@YGHHH@Z			; MyCompare<int>
	mov	DWORD PTR ___tt$75742[ebp], eax
	cmp	DWORD PTR ___tt$75742[ebp], 0
	je	SHORT $LN1@CompareUpd
	mov	eax, DWORD PTR ___tt$75742[ebp]
	jmp	SHORT $LN16@CompareUpd
$LN1@CompareUpd:
; Line 765
	xor	eax, eax
$LN16@CompareUpd:
; Line 766
	pop	edi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?CompareUpdateItems@N7z@NArchive@@YGHPBUCRefItem@12@0PAX@Z ENDP ; NArchive::N7z::CompareUpdateItems
_TEXT	ENDS
PUBLIC	??0?$CBuffer@E@@QAE@XZ				; CBuffer<unsigned char>::CBuffer<unsigned char>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CAnalysis@N7z@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CAnalysis@N7z@NArchive@@QAE@XZ$0
__ehfuncinfo$??0CAnalysis@N7z@NArchive@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CAnalysis@N7z@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CAnalysis@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CAnalysis@N7z@NArchive@@QAE@XZ PROC			; NArchive::N7z::CAnalysis::CAnalysis, COMDAT
; _this$ = ecx
; Line 805
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CAnalysis@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::CMyComPtr<IArchiveUpdateCallbackFile>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::CBuffer<unsigned char>
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+13], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+14], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CAnalysis@N7z@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
__ehhandler$??0CAnalysis@N7z@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CAnalysis@N7z@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CAnalysis@N7z@NArchive@@QAE@XZ ENDP			; NArchive::N7z::CAnalysis::CAnalysis
PUBLIC	?Are_Lzma_Model_Props_Defined@CMethodProps@@QBE_NXZ ; CMethodProps::Are_Lzma_Model_Props_Defined
PUBLIC	?Back@?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEAAUCBond2@N7z@NArchive@@XZ ; CRecordVector<NArchive::N7z::CBond2>::Back
PUBLIC	?IsEmpty@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBE_NXZ ; CRecordVector<NArchive::N7z::CBond2>::IsEmpty
PUBLIC	??A?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEAAUCBond2@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CBond2>::operator[]
PUBLIC	?Size@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CBond2>::Size
PUBLIC	?InsertNew@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@I@Z ; CObjectVector<NArchive::N7z::CMethodFull>::InsertNew
PUBLIC	?IsSimpleCoder@CMethodFull@N7z@NArchive@@QBE_NXZ ; NArchive::N7z::CMethodFull::IsSimpleCoder
PUBLIC	??A?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@I@Z ; CObjectVector<NArchive::N7z::CMethodFull>::operator[]
EXTRN	?AddProp32@CProps@@QAEXKI@Z:PROC		; CProps::AddProp32
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv298 = -52						; size = 4
tv293 = -48						; size = 4
_lc$76063 = -44						; size = 4
_nextMethod$76056 = -40					; size = 4
_nextCoder$76053 = -36					; size = 4
_alignBits$76038 = -32					; size = 4
_res$ = -28						; size = 4
_bond$76033 = -24					; size = 4
_k$76029 = -20						; size = 4
_m$ = -16						; size = 4
_id$76022 = -12						; size = 8
_m$76021 = -4						; size = 4
_mode$ = 8						; size = 4
_filterMode$ = 12					; size = 4
_bcj2Filter$ = 16					; size = 1
?MakeExeMethod@N7z@NArchive@@YGJAAUCCompressionMethodMode@12@ABUCFilterMode@12@_N@Z PROC ; NArchive::N7z::MakeExeMethod
; Line 995
	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 996
	mov	eax, DWORD PTR _mode$[ebp]
	movzx	ecx, BYTE PTR [eax+25]
	test	ecx, ecx
	je	SHORT $LN32@MakeExeMet
; Line 998
	push	0
	mov	ecx, DWORD PTR _mode$[ebp]
	call	??A?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@I@Z ; CObjectVector<NArchive::N7z::CMethodFull>::operator[]
	mov	DWORD PTR _m$76021[ebp], eax
; Line 999
	mov	edx, DWORD PTR _m$76021[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _id$76022[ebp], eax
	mov	ecx, DWORD PTR [edx+20]
	mov	DWORD PTR _id$76022[ebp+4], ecx
; Line 1000
	cmp	DWORD PTR _id$76022[ebp], 50528539	; 0303011bH
	jne	SHORT $LN31@MakeExeMet
	cmp	DWORD PTR _id$76022[ebp+4], 0
	jne	SHORT $LN31@MakeExeMet
; Line 1001
	mov	edx, DWORD PTR _mode$[ebp]
	push	edx
	call	?AddBcj2Methods@N7z@NArchive@@YGJAAUCCompressionMethodMode@12@@Z ; NArchive::N7z::AddBcj2Methods
	jmp	$LN33@MakeExeMet
$LN31@MakeExeMet:
; Line 1002
	mov	ecx, DWORD PTR _m$76021[ebp]
	call	?IsSimpleCoder@CMethodFull@N7z@NArchive@@QBE_NXZ ; NArchive::N7z::CMethodFull::IsSimpleCoder
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN30@MakeExeMet
; Line 1003
	mov	eax, -2147467263			; 80004001H
	jmp	$LN33@MakeExeMet
$LN30@MakeExeMet:
; Line 1005
	mov	ecx, DWORD PTR _mode$[ebp]
	push	ecx
	call	?AddFilterBond@N7z@NArchive@@YGJAAUCCompressionMethodMode@12@@Z ; NArchive::N7z::AddFilterBond
	jmp	$LN33@MakeExeMet
$LN32@MakeExeMet:
; Line 1008
	mov	edx, DWORD PTR _filterMode$[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN29@MakeExeMet
; Line 1009
	xor	eax, eax
	jmp	$LN33@MakeExeMet
$LN29@MakeExeMet:
; Line 1011
	push	0
	mov	ecx, DWORD PTR _mode$[ebp]
	call	?InsertNew@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@I@Z ; CObjectVector<NArchive::N7z::CMethodFull>::InsertNew
	mov	DWORD PTR _m$[ebp], eax
; Line 1014
	mov	DWORD PTR _k$76029[ebp], 0
	jmp	SHORT $LN28@MakeExeMet
$LN27@MakeExeMet:
	mov	eax, DWORD PTR _k$76029[ebp]
	add	eax, 1
	mov	DWORD PTR _k$76029[ebp], eax
$LN28@MakeExeMet:
	mov	ecx, DWORD PTR _mode$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Size@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CBond2>::Size
	cmp	DWORD PTR _k$76029[ebp], eax
	jae	SHORT $LN26@MakeExeMet
; Line 1016
	mov	ecx, DWORD PTR _k$76029[ebp]
	push	ecx
	mov	ecx, DWORD PTR _mode$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEAAUCBond2@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CBond2>::operator[]
	mov	DWORD PTR _bond$76033[ebp], eax
; Line 1017
	mov	edx, DWORD PTR _bond$76033[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 1
	mov	ecx, DWORD PTR _bond$76033[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 1018
	mov	edx, DWORD PTR _bond$76033[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _bond$76033[ebp]
	mov	DWORD PTR [ecx], eax
; Line 1019
	jmp	SHORT $LN27@MakeExeMet
$LN26@MakeExeMet:
; Line 1024
	movzx	edx, BYTE PTR _bcj2Filter$[ebp]
	test	edx, edx
	je	SHORT $LN25@MakeExeMet
	mov	eax, DWORD PTR _filterMode$[ebp]
	mov	ecx, DWORD PTR [eax]
	xor	edx, edx
	push	edx
	push	ecx
	call	?Is86Filter@N7z@NArchive@@YG_N_K@Z	; NArchive::N7z::Is86Filter
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN25@MakeExeMet
; Line 1026
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	push	4
	push	0
	push	50528539				; 0303011bH
	call	?GetMethodFull@N7z@NArchive@@YGX_KIAAUCMethodFull@12@@Z ; NArchive::N7z::GetMethodFull
; Line 1027
	mov	edx, DWORD PTR _mode$[ebp]
	push	edx
	call	?AddBcj2Methods@N7z@NArchive@@YGJAAUCCompressionMethodMode@12@@Z ; NArchive::N7z::AddBcj2Methods
	mov	DWORD PTR _res$[ebp], eax
; Line 1029
	jmp	$LN24@MakeExeMet
$LN25@MakeExeMet:
; Line 1031
	mov	eax, DWORD PTR _m$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _filterMode$[ebp]
	mov	edx, DWORD PTR [ecx]
	xor	eax, eax
	push	eax
	push	edx
	call	?GetMethodFull@N7z@NArchive@@YGX_KIAAUCMethodFull@12@@Z ; NArchive::N7z::GetMethodFull
; Line 1032
	mov	ecx, DWORD PTR _filterMode$[ebp]
	cmp	DWORD PTR [ecx], 3
	jne	SHORT $LN23@MakeExeMet
; Line 1033
	mov	edx, DWORD PTR _filterMode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	push	0
	mov	ecx, DWORD PTR _m$[ebp]
	call	?AddProp32@CProps@@QAEXKI@Z		; CProps::AddProp32
$LN23@MakeExeMet:
; Line 1034
	mov	ecx, DWORD PTR _mode$[ebp]
	push	ecx
	call	?AddFilterBond@N7z@NArchive@@YGJAAUCCompressionMethodMode@12@@Z ; NArchive::N7z::AddFilterBond
	mov	DWORD PTR _res$[ebp], eax
; Line 1036
	mov	DWORD PTR _alignBits$76038[ebp], -1
; Line 1037
	mov	edx, DWORD PTR _filterMode$[ebp]
	cmp	DWORD PTR [edx], 3
	je	SHORT $LN21@MakeExeMet
	mov	eax, DWORD PTR _filterMode$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN11@MakeExeMet
$LN21@MakeExeMet:
; Line 1039
	mov	ecx, DWORD PTR _filterMode$[ebp]
	cmp	DWORD PTR [ecx+4], 1
	jne	SHORT $LN20@MakeExeMet
	mov	DWORD PTR _alignBits$76038[ebp], 0
	jmp	SHORT $LN11@MakeExeMet
$LN20@MakeExeMet:
; Line 1040
	mov	edx, DWORD PTR _filterMode$[ebp]
	cmp	DWORD PTR [edx+4], 2
	jne	SHORT $LN18@MakeExeMet
	mov	DWORD PTR _alignBits$76038[ebp], 1
	jmp	SHORT $LN11@MakeExeMet
$LN18@MakeExeMet:
; Line 1041
	mov	eax, DWORD PTR _filterMode$[ebp]
	cmp	DWORD PTR [eax+4], 4
	jne	SHORT $LN16@MakeExeMet
	mov	DWORD PTR _alignBits$76038[ebp], 2
	jmp	SHORT $LN11@MakeExeMet
$LN16@MakeExeMet:
; Line 1042
	mov	ecx, DWORD PTR _filterMode$[ebp]
	cmp	DWORD PTR [ecx+4], 8
	jne	SHORT $LN14@MakeExeMet
	mov	DWORD PTR _alignBits$76038[ebp], 3
	jmp	SHORT $LN11@MakeExeMet
$LN14@MakeExeMet:
; Line 1043
	mov	edx, DWORD PTR _filterMode$[ebp]
	cmp	DWORD PTR [edx+4], 16			; 00000010H
	jne	SHORT $LN11@MakeExeMet
	mov	DWORD PTR _alignBits$76038[ebp], 4
$LN11@MakeExeMet:
; Line 1050
	cmp	DWORD PTR _res$[ebp], 0
	jne	$LN24@MakeExeMet
	cmp	DWORD PTR _alignBits$76038[ebp], 0
	jl	$LN24@MakeExeMet
; Line 1052
	mov	DWORD PTR _nextCoder$76053[ebp], 1
; Line 1053
	mov	ecx, DWORD PTR _mode$[ebp]
	add	ecx, 12					; 0000000cH
	call	?IsEmpty@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBE_NXZ ; CRecordVector<NArchive::N7z::CBond2>::IsEmpty
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN9@MakeExeMet
; Line 1055
	mov	ecx, DWORD PTR _mode$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Back@?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEAAUCBond2@N7z@NArchive@@XZ ; CRecordVector<NArchive::N7z::CBond2>::Back
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _nextCoder$76053[ebp], ecx
$LN9@MakeExeMet:
; Line 1057
	mov	ecx, DWORD PTR _mode$[ebp]
	call	?Size@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::N7z::CMethodFull>::Size
	cmp	DWORD PTR _nextCoder$76053[ebp], eax
	jae	$LN24@MakeExeMet
; Line 1059
	mov	edx, DWORD PTR _nextCoder$76053[ebp]
	push	edx
	mov	ecx, DWORD PTR _mode$[ebp]
	call	??A?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@I@Z ; CObjectVector<NArchive::N7z::CMethodFull>::operator[]
	mov	DWORD PTR _nextMethod$76056[ebp], eax
; Line 1060
	mov	eax, DWORD PTR _nextMethod$76056[ebp]
	mov	DWORD PTR tv293[ebp], eax
	mov	ecx, DWORD PTR tv293[ebp]
	cmp	DWORD PTR [ecx+16], 196865		; 00030101H
	jne	SHORT $LN35@MakeExeMet
	mov	edx, DWORD PTR tv293[ebp]
	cmp	DWORD PTR [edx+20], 0
	je	SHORT $LN6@MakeExeMet
$LN35@MakeExeMet:
	mov	eax, DWORD PTR _nextMethod$76056[ebp]
	mov	DWORD PTR tv298[ebp], eax
	mov	ecx, DWORD PTR tv298[ebp]
	cmp	DWORD PTR [ecx+16], 33			; 00000021H
	jne	SHORT $LN24@MakeExeMet
	mov	edx, DWORD PTR tv298[ebp]
	cmp	DWORD PTR [edx+20], 0
	jne	SHORT $LN24@MakeExeMet
$LN6@MakeExeMet:
; Line 1062
	mov	ecx, DWORD PTR _nextMethod$76056[ebp]
	call	?Are_Lzma_Model_Props_Defined@CMethodProps@@QBE_NXZ ; CMethodProps::Are_Lzma_Model_Props_Defined
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN24@MakeExeMet
; Line 1064
	cmp	DWORD PTR _alignBits$76038[ebp], 0
	je	SHORT $LN24@MakeExeMet
; Line 1066
	cmp	DWORD PTR _alignBits$76038[ebp], 2
	jg	SHORT $LN2@MakeExeMet
	mov	ecx, DWORD PTR _filterMode$[ebp]
	cmp	DWORD PTR [ecx], 3
	jne	SHORT $LN3@MakeExeMet
$LN2@MakeExeMet:
; Line 1067
	mov	edx, DWORD PTR _alignBits$76038[ebp]
	push	edx
	push	5
	mov	ecx, DWORD PTR _nextMethod$76056[ebp]
	call	?AddProp32@CProps@@QAEXKI@Z		; CProps::AddProp32
$LN3@MakeExeMet:
; Line 1068
	mov	DWORD PTR _lc$76063[ebp], 0
; Line 1069
	cmp	DWORD PTR _alignBits$76038[ebp], 3
	jge	SHORT $LN1@MakeExeMet
; Line 1070
	mov	eax, 3
	sub	eax, DWORD PTR _alignBits$76038[ebp]
	mov	DWORD PTR _lc$76063[ebp], eax
$LN1@MakeExeMet:
; Line 1071
	mov	ecx, DWORD PTR _lc$76063[ebp]
	push	ecx
	push	6
	mov	ecx, DWORD PTR _nextMethod$76056[ebp]
	call	?AddProp32@CProps@@QAEXKI@Z		; CProps::AddProp32
; Line 1072
	mov	edx, DWORD PTR _alignBits$76038[ebp]
	push	edx
	push	7
	mov	ecx, DWORD PTR _nextMethod$76056[ebp]
	call	?AddProp32@CProps@@QAEXKI@Z		; CProps::AddProp32
$LN24@MakeExeMet:
; Line 1080
	mov	eax, DWORD PTR _res$[ebp]
$LN33@MakeExeMet:
; Line 1081
	pop	edi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?MakeExeMethod@N7z@NArchive@@YGJAAUCCompressionMethodMode@12@ABUCFilterMode@12@_N@Z ENDP ; NArchive::N7z::MakeExeMethod
_TEXT	ENDS
EXTRN	?FindProp@CMethodProps@@QBEHK@Z:PROC		; CMethodProps::FindProp
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Are_Lzma_Model_Props_Defined@CMethodProps@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Are_Lzma_Model_Props_Defined@CMethodProps@@QBE_NXZ PROC ; CMethodProps::Are_Lzma_Model_Props_Defined, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\methodprops.h
; Line 103
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 104
	push	5
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindProp@CMethodProps@@QBEHK@Z		; CMethodProps::FindProp
	test	eax, eax
	jl	SHORT $LN3@Are_Lzma_M
	mov	al, 1
	jmp	SHORT $LN4@Are_Lzma_M
$LN3@Are_Lzma_M:
; Line 105
	push	6
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindProp@CMethodProps@@QBEHK@Z		; CMethodProps::FindProp
	test	eax, eax
	jl	SHORT $LN2@Are_Lzma_M
	mov	al, 1
	jmp	SHORT $LN4@Are_Lzma_M
$LN2@Are_Lzma_M:
; Line 106
	push	7
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindProp@CMethodProps@@QBEHK@Z		; CMethodProps::FindProp
	test	eax, eax
	jl	SHORT $LN1@Are_Lzma_M
	mov	al, 1
	jmp	SHORT $LN4@Are_Lzma_M
$LN1@Are_Lzma_M:
; Line 107
	xor	al, al
$LN4@Are_Lzma_M:
; Line 108
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Are_Lzma_Model_Props_Defined@CMethodProps@@QBE_NXZ ENDP ; CMethodProps::Are_Lzma_Model_Props_Defined
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsSimpleCoder@CMethodFull@N7z@NArchive@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsSimpleCoder@CMethodFull@N7z@NArchive@@QBE_NXZ PROC	; NArchive::N7z::CMethodFull::IsSimpleCoder, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zcompressionmode.h
; Line 17
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+24], 1
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSimpleCoder@CMethodFull@N7z@NArchive@@QBE_NXZ ENDP	; NArchive::N7z::CMethodFull::IsSimpleCoder
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
_TEXT	SEGMENT
tv66 = -4						; size = 4
_m$ = 8							; size = 8
?Is86Filter@N7z@NArchive@@YG_N_K@Z PROC			; NArchive::N7z::Is86Filter
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zupdate.cpp
; Line 363
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 364
	cmp	DWORD PTR _m$[ebp], 50528515		; 03030103H
	jne	SHORT $LN5@Is86Filter
	cmp	DWORD PTR _m$[ebp+4], 0
	je	SHORT $LN3@Is86Filter
$LN5@Is86Filter:
	cmp	DWORD PTR _m$[ebp], 50528539		; 0303011bH
	jne	SHORT $LN6@Is86Filter
	cmp	DWORD PTR _m$[ebp+4], 0
	je	SHORT $LN3@Is86Filter
$LN6@Is86Filter:
	mov	DWORD PTR tv66[ebp], 0
	jmp	SHORT $LN4@Is86Filter
$LN3@Is86Filter:
	mov	DWORD PTR tv66[ebp], 1
$LN4@Is86Filter:
	mov	al, BYTE PTR tv66[ebp]
; Line 365
	mov	esp, ebp
	pop	ebp
	ret	8
?Is86Filter@N7z@NArchive@@YG_N_K@Z ENDP			; NArchive::N7z::Is86Filter
; Function compile flags: /Odtp /RTCsu
_methodID$ = 8						; size = 8
_numStreams$ = 16					; size = 4
_m$ = 20						; size = 4
?GetMethodFull@N7z@NArchive@@YGX_KIAAUCMethodFull@12@@Z PROC ; NArchive::N7z::GetMethodFull
; Line 925
	push	ebp
	mov	ebp, esp
; Line 926
	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR _methodID$[ebp]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR _methodID$[ebp+4]
	mov	DWORD PTR [eax+20], edx
; Line 927
	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR _numStreams$[ebp]
	mov	DWORD PTR [eax+24], ecx
; Line 928
	pop	ebp
	ret	16					; 00000010H
?GetMethodFull@N7z@NArchive@@YGX_KIAAUCMethodFull@12@@Z ENDP ; NArchive::N7z::GetMethodFull
; Function compile flags: /Odtp /RTCsu
_mode$ = 8						; size = 4
?AddFilterBond@N7z@NArchive@@YGJAAUCCompressionMethodMode@12@@Z PROC ; NArchive::N7z::AddFilterBond
; Line 948
	push	ebp
	mov	ebp, esp
; Line 949
	mov	ecx, DWORD PTR _mode$[ebp]
	add	ecx, 12					; 0000000cH
	call	?IsEmpty@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBE_NXZ ; CRecordVector<NArchive::N7z::CBond2>::IsEmpty
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@AddFilterB
; Line 950
	mov	ecx, DWORD PTR _mode$[ebp]
	push	ecx
	call	?AddBondForFilter@N7z@NArchive@@YGJAAUCCompressionMethodMode@12@@Z ; NArchive::N7z::AddBondForFilter
	jmp	SHORT $LN2@AddFilterB
$LN1@AddFilterB:
; Line 951
	xor	eax, eax
$LN2@AddFilterB:
; Line 952
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
?AddFilterBond@N7z@NArchive@@YGJAAUCCompressionMethodMode@12@@Z ENDP ; NArchive::N7z::AddFilterBond
_TEXT	ENDS
PUBLIC	?Add@?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEIUCBond2@N7z@NArchive@@@Z ; CRecordVector<NArchive::N7z::CBond2>::Add
PUBLIC	?IsThereBond_to_Coder@CCompressionMethodMode@N7z@NArchive@@QBE_NI@Z ; NArchive::N7z::CCompressionMethodMode::IsThereBond_to_Coder
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_bond$75986 = -24					; size = 12
_c$75981 = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_mode$ = 8						; size = 4
?AddBondForFilter@N7z@NArchive@@YGJAAUCCompressionMethodMode@12@@Z PROC ; NArchive::N7z::AddBondForFilter
; Line 931
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 932
	mov	DWORD PTR _c$75981[ebp], 1
	jmp	SHORT $LN4@AddBondFor
$LN3@AddBondFor:
	mov	eax, DWORD PTR _c$75981[ebp]
	add	eax, 1
	mov	DWORD PTR _c$75981[ebp], eax
$LN4@AddBondFor:
	mov	ecx, DWORD PTR _mode$[ebp]
	call	?Size@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::N7z::CMethodFull>::Size
	cmp	DWORD PTR _c$75981[ebp], eax
	jae	SHORT $LN2@AddBondFor
; Line 934
	mov	ecx, DWORD PTR _c$75981[ebp]
	push	ecx
	mov	ecx, DWORD PTR _mode$[ebp]
	call	?IsThereBond_to_Coder@CCompressionMethodMode@N7z@NArchive@@QBE_NI@Z ; NArchive::N7z::CCompressionMethodMode::IsThereBond_to_Coder
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN1@AddBondFor
; Line 937
	mov	DWORD PTR _bond$75986[ebp], 0
; Line 938
	mov	DWORD PTR _bond$75986[ebp+4], 0
; Line 939
	mov	eax, DWORD PTR _c$75981[ebp]
	mov	DWORD PTR _bond$75986[ebp+8], eax
; Line 940
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	edx, DWORD PTR _bond$75986[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _bond$75986[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _bond$75986[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	ecx, DWORD PTR _mode$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Add@?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEIUCBond2@N7z@NArchive@@@Z ; CRecordVector<NArchive::N7z::CBond2>::Add
; Line 941
	xor	eax, eax
	jmp	SHORT $LN5@AddBondFor
$LN1@AddBondFor:
; Line 943
	jmp	SHORT $LN3@AddBondFor
$LN2@AddBondFor:
; Line 944
	mov	eax, -2147024809			; 80070057H
$LN5@AddBondFor:
; Line 945
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@AddBondFor
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN9@AddBondFor:
	DD	1
	DD	$LN8@AddBondFor
$LN8@AddBondFor:
	DD	-24					; ffffffe8H
	DD	12					; 0000000cH
	DD	$LN7@AddBondFor
$LN7@AddBondFor:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
?AddBondForFilter@N7z@NArchive@@YGJAAUCCompressionMethodMode@12@@Z ENDP ; NArchive::N7z::AddBondForFilter
_TEXT	ENDS
PUBLIC	??A?$CRecordVector@UCBond2@N7z@NArchive@@@@QBEABUCBond2@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CBond2>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsThereBond_to_Coder@CCompressionMethodMode@N7z@NArchive@@QBE_NI@Z
_TEXT	SEGMENT
_i$73473 = -8						; size = 4
_this$ = -4						; size = 4
_coderIndex$ = 8					; size = 4
?IsThereBond_to_Coder@CCompressionMethodMode@N7z@NArchive@@QBE_NI@Z PROC ; NArchive::N7z::CCompressionMethodMode::IsThereBond_to_Coder, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zcompressionmode.h
; Line 42
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 43
	mov	DWORD PTR _i$73473[ebp], 0
	jmp	SHORT $LN4@IsThereBon
$LN3@IsThereBon:
	mov	eax, DWORD PTR _i$73473[ebp]
	add	eax, 1
	mov	DWORD PTR _i$73473[ebp], eax
$LN4@IsThereBon:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Size@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CBond2>::Size
	cmp	DWORD PTR _i$73473[ebp], eax
	jae	SHORT $LN2@IsThereBon
; Line 44
	mov	ecx, DWORD PTR _i$73473[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$CRecordVector@UCBond2@N7z@NArchive@@@@QBEABUCBond2@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CBond2>::operator[]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR _coderIndex$[ebp]
	jne	SHORT $LN1@IsThereBon
; Line 45
	mov	al, 1
	jmp	SHORT $LN5@IsThereBon
$LN1@IsThereBon:
; Line 46
	jmp	SHORT $LN3@IsThereBon
$LN2@IsThereBon:
	xor	al, al
$LN5@IsThereBon:
; Line 47
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?IsThereBond_to_Coder@CCompressionMethodMode@N7z@NArchive@@QBE_NI@Z ENDP ; NArchive::N7z::CCompressionMethodMode::IsThereBond_to_Coder
_TEXT	ENDS
PUBLIC	??1CMethodFull@N7z@NArchive@@QAE@XZ		; NArchive::N7z::CMethodFull::~CMethodFull
PUBLIC	?Add@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEIABUCMethodFull@N7z@NArchive@@@Z ; CObjectVector<NArchive::N7z::CMethodFull>::Add
PUBLIC	??0CMethodFull@N7z@NArchive@@QAE@XZ		; NArchive::N7z::CMethodFull::CMethodFull
PUBLIC	__$ArrayPad$
xdata$x	SEGMENT
__unwindtable$?AddBcj2Methods@N7z@NArchive@@YGJAAUCCompressionMethodMode@12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddBcj2Methods@N7z@NArchive@@YGJAAUCCompressionMethodMode@12@@Z$0
__ehfuncinfo$?AddBcj2Methods@N7z@NArchive@@YGJAAUCCompressionMethodMode@12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddBcj2Methods@N7z@NArchive@@YGJAAUCCompressionMethodMode@12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T79739 = -116						; size = 4
$T79738 = -112						; size = 4
_bond$ = -104						; size = 12
___result__$76005 = -88					; size = 4
_bond$76004 = -80					; size = 12
_i$76000 = -64						; size = 4
_methodIndex$ = -60					; size = 4
_m$ = -52						; size = 32
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_mode$ = 8						; size = 4
?AddBcj2Methods@N7z@NArchive@@YGJAAUCCompressionMethodMode@12@@Z PROC ; NArchive::N7z::AddBcj2Methods
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zupdate.cpp
; Line 955
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddBcj2Methods@N7z@NArchive@@YGJAAUCCompressionMethodMode@12@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 104				; 00000068H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-116]
	mov	ecx, 26					; 0000001aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 958
	lea	ecx, DWORD PTR _m$[ebp]
	call	??0CMethodFull@N7z@NArchive@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 959
	lea	eax, DWORD PTR _m$[ebp]
	push	eax
	push	1
	push	0
	push	196865					; 00030101H
	call	?GetMethodFull@N7z@NArchive@@YGX_KIAAUCMethodFull@12@@Z ; NArchive::N7z::GetMethodFull
; Line 961
	push	1048576					; 00100000H
	push	1
	lea	ecx, DWORD PTR _m$[ebp]
	call	?AddProp32@CProps@@QAEXKI@Z		; CProps::AddProp32
; Line 962
	push	128					; 00000080H
	push	8
	lea	ecx, DWORD PTR _m$[ebp]
	call	?AddProp32@CProps@@QAEXKI@Z		; CProps::AddProp32
; Line 963
	push	1
	push	13					; 0000000dH
	lea	ecx, DWORD PTR _m$[ebp]
	call	?AddProp32@CProps@@QAEXKI@Z		; CProps::AddProp32
; Line 964
	push	2
	push	7
	lea	ecx, DWORD PTR _m$[ebp]
	call	?AddProp32@CProps@@QAEXKI@Z		; CProps::AddProp32
; Line 965
	push	0
	push	6
	lea	ecx, DWORD PTR _m$[ebp]
	call	?AddProp32@CProps@@QAEXKI@Z		; CProps::AddProp32
; Line 968
	mov	ecx, DWORD PTR _mode$[ebp]
	call	?Size@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::N7z::CMethodFull>::Size
	mov	DWORD PTR _methodIndex$[ebp], eax
; Line 970
	mov	ecx, DWORD PTR _mode$[ebp]
	add	ecx, 12					; 0000000cH
	call	?IsEmpty@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBE_NXZ ; CRecordVector<NArchive::N7z::CBond2>::IsEmpty
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN5@AddBcj2Met
; Line 972
	mov	DWORD PTR _i$76000[ebp], 1
	jmp	SHORT $LN4@AddBcj2Met
$LN3@AddBcj2Met:
	mov	edx, DWORD PTR _i$76000[ebp]
	add	edx, 1
	mov	DWORD PTR _i$76000[ebp], edx
$LN4@AddBcj2Met:
	mov	esi, DWORD PTR _i$76000[ebp]
	add	esi, 1
	mov	ecx, DWORD PTR _mode$[ebp]
	call	?Size@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::N7z::CMethodFull>::Size
	cmp	esi, eax
	jae	SHORT $LN5@AddBcj2Met
; Line 975
	mov	eax, DWORD PTR _i$76000[ebp]
	mov	DWORD PTR _bond$76004[ebp], eax
; Line 976
	mov	DWORD PTR _bond$76004[ebp+4], 0
; Line 977
	mov	ecx, DWORD PTR _i$76000[ebp]
	add	ecx, 1
	mov	DWORD PTR _bond$76004[ebp+8], ecx
; Line 978
	sub	esp, 12					; 0000000cH
	mov	edx, esp
	mov	eax, DWORD PTR _bond$76004[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _bond$76004[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _bond$76004[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _mode$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Add@?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEIUCBond2@N7z@NArchive@@@Z ; CRecordVector<NArchive::N7z::CBond2>::Add
; Line 979
	jmp	SHORT $LN3@AddBcj2Met
$LN5@AddBcj2Met:
; Line 982
	lea	ecx, DWORD PTR _m$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _mode$[ebp]
	call	?Add@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEIABUCMethodFull@N7z@NArchive@@@Z ; CObjectVector<NArchive::N7z::CMethodFull>::Add
; Line 983
	lea	edx, DWORD PTR _m$[ebp]
	push	edx
	mov	ecx, DWORD PTR _mode$[ebp]
	call	?Add@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEIABUCMethodFull@N7z@NArchive@@@Z ; CObjectVector<NArchive::N7z::CMethodFull>::Add
; Line 985
	mov	eax, DWORD PTR _mode$[ebp]
	push	eax
	call	?AddBondForFilter@N7z@NArchive@@YGJAAUCCompressionMethodMode@12@@Z ; NArchive::N7z::AddBondForFilter
	mov	DWORD PTR ___result__$76005[ebp], eax
	cmp	DWORD PTR ___result__$76005[ebp], 0
	je	SHORT $LN1@AddBcj2Met
	mov	ecx, DWORD PTR ___result__$76005[ebp]
	mov	DWORD PTR $T79738[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _m$[ebp]
	call	??1CMethodFull@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T79738[ebp]
	jmp	SHORT $LN6@AddBcj2Met
$LN1@AddBcj2Met:
; Line 987
	mov	DWORD PTR _bond$[ebp], 0
; Line 988
	mov	edx, DWORD PTR _methodIndex$[ebp]
	mov	DWORD PTR _bond$[ebp+8], edx
	mov	DWORD PTR _bond$[ebp+4], 1
	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	ecx, DWORD PTR _bond$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _bond$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _bond$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR _mode$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Add@?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEIUCBond2@N7z@NArchive@@@Z ; CRecordVector<NArchive::N7z::CBond2>::Add
; Line 989
	mov	edx, DWORD PTR _methodIndex$[ebp]
	add	edx, 1
	mov	DWORD PTR _bond$[ebp+8], edx
	mov	DWORD PTR _bond$[ebp+4], 2
	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	ecx, DWORD PTR _bond$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _bond$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _bond$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR _mode$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Add@?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEIUCBond2@N7z@NArchive@@@Z ; CRecordVector<NArchive::N7z::CBond2>::Add
; Line 990
	mov	DWORD PTR $T79739[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _m$[ebp]
	call	??1CMethodFull@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T79739[ebp]
$LN6@AddBcj2Met:
; Line 991
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@AddBcj2Met
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 116				; 00000074H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN14@AddBcj2Met:
	DD	3
	DD	$LN13@AddBcj2Met
$LN13@AddBcj2Met:
	DD	-52					; ffffffccH
	DD	32					; 00000020H
	DD	$LN9@AddBcj2Met
	DD	-80					; ffffffb0H
	DD	12					; 0000000cH
	DD	$LN10@AddBcj2Met
	DD	-104					; ffffff98H
	DD	12					; 0000000cH
	DD	$LN11@AddBcj2Met
$LN11@AddBcj2Met:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
$LN10@AddBcj2Met:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
$LN9@AddBcj2Met:
	DB	109					; 0000006dH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?AddBcj2Methods@N7z@NArchive@@YGJAAUCCompressionMethodMode@12@@Z$0:
	lea	ecx, DWORD PTR _m$[ebp]
	jmp	??1CMethodFull@N7z@NArchive@@QAE@XZ
__ehhandler$?AddBcj2Methods@N7z@NArchive@@YGJAAUCCompressionMethodMode@12@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-116]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddBcj2Methods@N7z@NArchive@@YGJAAUCCompressionMethodMode@12@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddBcj2Methods@N7z@NArchive@@YGJAAUCCompressionMethodMode@12@@Z ENDP ; NArchive::N7z::AddBcj2Methods
PUBLIC	??0CMethodProps@@QAE@XZ				; CMethodProps::CMethodProps
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CMethodFull@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMethodFull@N7z@NArchive@@QAE@XZ PROC		; NArchive::N7z::CMethodFull::CMethodFull, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CMethodProps@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CMethodFull@N7z@NArchive@@QAE@XZ ENDP		; NArchive::N7z::CMethodFull::CMethodFull
_TEXT	ENDS
PUBLIC	??0CProps@@QAE@XZ				; CProps::CProps
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CMethodProps@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMethodProps@@QAE@XZ PROC				; CMethodProps::CMethodProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CProps@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CMethodProps@@QAE@XZ ENDP				; CMethodProps::CMethodProps
_TEXT	ENDS
PUBLIC	??0?$CObjectVector@UCProp@@@@QAE@XZ		; CObjectVector<CProp>::CObjectVector<CProp>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CProps@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CProps@@QAE@XZ PROC					; CProps::CProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CObjectVector@UCProp@@@@QAE@XZ	; CObjectVector<CProp>::CObjectVector<CProp>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CProps@@QAE@XZ ENDP					; CProps::CProps
_TEXT	ENDS
PUBLIC	??1CMethodProps@@QAE@XZ				; CMethodProps::~CMethodProps
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CMethodFull@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CMethodFull@N7z@NArchive@@QAE@XZ PROC		; NArchive::N7z::CMethodFull::~CMethodFull, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CMethodProps@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CMethodFull@N7z@NArchive@@QAE@XZ ENDP		; NArchive::N7z::CMethodFull::~CMethodFull
_TEXT	ENDS
PUBLIC	??1CProps@@QAE@XZ				; CProps::~CProps
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CMethodProps@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CMethodProps@@QAE@XZ PROC				; CMethodProps::~CMethodProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CProps@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CMethodProps@@QAE@XZ ENDP				; CMethodProps::~CMethodProps
_TEXT	ENDS
PUBLIC	??1?$CObjectVector@UCProp@@@@QAE@XZ		; CObjectVector<CProp>::~CObjectVector<CProp>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CProps@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CProps@@QAE@XZ PROC					; CProps::~CProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CObjectVector@UCProp@@@@QAE@XZ	; CObjectVector<CProp>::~CObjectVector<CProp>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CProps@@QAE@XZ ENDP					; CProps::~CProps
_TEXT	ENDS
PUBLIC	?SetAttrib@CFileItem@N7z@NArchive@@QAEXI@Z	; NArchive::N7z::CFileItem::SetAttrib
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ui$ = 8						; size = 4
_file$ = 12						; size = 4
_file2$ = 16						; size = 4
?FromUpdateItemToFileItem@N7z@NArchive@@YGXABUCUpdateItem@12@AAUCFileItem@12@AAUCFileItem2@12@@Z PROC ; NArchive::N7z::FromUpdateItemToFileItem
; Line 1086
	push	ebp
	mov	ebp, esp
; Line 1087
	mov	eax, DWORD PTR _ui$[ebp]
	movzx	ecx, BYTE PTR [eax+60]
	test	ecx, ecx
	je	SHORT $LN1@FromUpdate
; Line 1088
	mov	edx, DWORD PTR _ui$[ebp]
	mov	eax, DWORD PTR [edx+52]
	push	eax
	mov	ecx, DWORD PTR _file$[ebp]
	call	?SetAttrib@CFileItem@N7z@NArchive@@QAEXI@Z ; NArchive::N7z::CFileItem::SetAttrib
$LN1@FromUpdate:
; Line 1090
	mov	ecx, DWORD PTR _file2$[ebp]
	mov	edx, DWORD PTR _ui$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _file2$[ebp]
	mov	ecx, DWORD PTR _ui$[ebp]
	mov	dl, BYTE PTR [ecx+61]
	mov	BYTE PTR [eax+32], dl
; Line 1091
	mov	eax, DWORD PTR _file2$[ebp]
	mov	ecx, DWORD PTR _ui$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+12], ecx
	mov	edx, DWORD PTR _file2$[ebp]
	mov	eax, DWORD PTR _ui$[ebp]
	mov	cl, BYTE PTR [eax+62]
	mov	BYTE PTR [edx+33], cl
; Line 1092
	mov	edx, DWORD PTR _file2$[ebp]
	mov	eax, DWORD PTR _ui$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR [edx+16], ecx
	mov	eax, DWORD PTR [eax+28]
	mov	DWORD PTR [edx+20], eax
	mov	ecx, DWORD PTR _file2$[ebp]
	mov	edx, DWORD PTR _ui$[ebp]
	mov	al, BYTE PTR [edx+63]
	mov	BYTE PTR [ecx+34], al
; Line 1093
	mov	ecx, DWORD PTR _file2$[ebp]
	mov	edx, DWORD PTR _ui$[ebp]
	mov	al, BYTE PTR [edx+58]
	mov	BYTE PTR [ecx+36], al
; Line 1095
	mov	ecx, DWORD PTR _file2$[ebp]
	mov	BYTE PTR [ecx+35], 0
; Line 1097
	mov	edx, DWORD PTR _file$[ebp]
	mov	eax, DWORD PTR _ui$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR [eax+36]
	mov	DWORD PTR [edx+4], eax
; Line 1098
	mov	ecx, DWORD PTR _file$[ebp]
	mov	edx, DWORD PTR _ui$[ebp]
	mov	al, BYTE PTR [edx+59]
	mov	BYTE PTR [ecx+17], al
; Line 1099
	mov	ecx, DWORD PTR _ui$[ebp]
	call	?HasStream@CUpdateItem@N7z@NArchive@@QBE_NXZ ; NArchive::N7z::CUpdateItem::HasStream
	mov	ecx, DWORD PTR _file$[ebp]
	mov	BYTE PTR [ecx+16], al
; Line 1101
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?FromUpdateItemToFileItem@N7z@NArchive@@YGXABUCUpdateItem@12@AAUCFileItem@12@AAUCFileItem2@12@@Z ENDP ; NArchive::N7z::FromUpdateItemToFileItem
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SetAttrib@CFileItem@N7z@NArchive@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_attrib$ = 8						; size = 4
?SetAttrib@CFileItem@N7z@NArchive@@QAEXI@Z PROC		; NArchive::N7z::CFileItem::SetAttrib, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zitem.h
; Line 175
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 176
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+19], 1
; Line 177
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _attrib$[ebp]
	mov	DWORD PTR [ecx+8], edx
; Line 178
	mov	esp, ebp
	pop	ebp
	ret	4
?SetAttrib@CFileItem@N7z@NArchive@@QAEXI@Z ENDP		; NArchive::N7z::CFileItem::SetAttrib
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Init@CRepackInStreamWithSizes@N7z@NArchive@@QAEXPAUISequentialInStream@@IPBV?$CRecordVector@_N@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_stream$ = 8						; size = 4
_startIndex$ = 12					; size = 4
_extractStatuses$ = 16					; size = 4
?Init@CRepackInStreamWithSizes@N7z@NArchive@@QAEXPAUISequentialInStream@@IPBV?$CRecordVector@_N@@@Z PROC ; NArchive::N7z::CRepackInStreamWithSizes::Init, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zupdate.cpp
; Line 1116
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1117
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _startIndex$[ebp]
	mov	DWORD PTR [eax+20], ecx
; Line 1118
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _extractStatuses$[ebp]
	mov	DWORD PTR [edx+16], eax
; Line 1120
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=
; Line 1121
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Init@CRepackInStreamWithSizes@N7z@NArchive@@QAEXPAUISequentialInStream@@IPBV?$CRecordVector@_N@@@Z ENDP ; NArchive::N7z::CRepackInStreamWithSizes::Init
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?CheckFinishedState@CRepackStreamBase@N7z@NArchive@@QBEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CheckFinishedState@CRepackStreamBase@N7z@NArchive@@QBEJXZ PROC ; NArchive::N7z::CRepackStreamBase::CheckFinishedState, COMDAT
; _this$ = ecx
; Line 1183
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	?Size@?$CRecordVector@_N@@QBEIXZ	; CRecordVector<bool>::Size
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	sub	edx, eax
	neg	edx
	sbb	edx, edx
	and	edx, -2147467259			; 80004005H
	mov	eax, edx
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?CheckFinishedState@CRepackStreamBase@N7z@NArchive@@QBEJXZ ENDP ; NArchive::N7z::CRepackStreamBase::CheckFinishedState
_TEXT	ENDS
PUBLIC	??1CRepackStreamBase@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CRepackStreamBase::~CRepackStreamBase
PUBLIC	??_7CFolderInStream2@N7z@NArchive@@6B@		; NArchive::N7z::CFolderInStream2::`vftable'
PUBLIC	??0CRepackStreamBase@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CRepackStreamBase::CRepackStreamBase
PUBLIC	??_R4CFolderInStream2@N7z@NArchive@@6B@		; NArchive::N7z::CFolderInStream2::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCFolderInStream2@N7z@NArchive@@@8	; NArchive::N7z::CFolderInStream2 `RTTI Type Descriptor'
PUBLIC	??_R3CFolderInStream2@N7z@NArchive@@8		; NArchive::N7z::CFolderInStream2::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CFolderInStream2@N7z@NArchive@@8		; NArchive::N7z::CFolderInStream2::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CFolderInStream2@N7z@NArchive@@8	; NArchive::N7z::CFolderInStream2::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R17?0A@EA@CRepackStreamBase@N7z@NArchive@@8	; NArchive::N7z::CRepackStreamBase::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	??_R0?AVCRepackStreamBase@N7z@NArchive@@@8	; NArchive::N7z::CRepackStreamBase `RTTI Type Descriptor'
PUBLIC	??_R3CRepackStreamBase@N7z@NArchive@@8		; NArchive::N7z::CRepackStreamBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CRepackStreamBase@N7z@NArchive@@8		; NArchive::N7z::CRepackStreamBase::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CRepackStreamBase@N7z@NArchive@@8	; NArchive::N7z::CRepackStreamBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1DA@?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (48,-1,0,64)'
PUBLIC	?QueryInterface@CFolderInStream2@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::N7z::CFolderInStream2::QueryInterface
PUBLIC	?AddRef@CFolderInStream2@N7z@NArchive@@UAGKXZ	; NArchive::N7z::CFolderInStream2::AddRef
PUBLIC	?Release@CFolderInStream2@N7z@NArchive@@UAGKXZ	; NArchive::N7z::CFolderInStream2::Release
;	COMDAT ??_R1DA@?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R1DA@?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (48,-1,0,64)'
	DD	00H
	DD	030H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CRepackStreamBase@N7z@NArchive@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CRepackStreamBase@N7z@NArchive@@8 DD FLAT:??_R0?AVCRepackStreamBase@N7z@NArchive@@@8 ; NArchive::N7z::CRepackStreamBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CRepackStreamBase@N7z@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R2CRepackStreamBase@N7z@NArchive@@8
rdata$r	SEGMENT
??_R2CRepackStreamBase@N7z@NArchive@@8 DD FLAT:??_R1A@?0A@EA@CRepackStreamBase@N7z@NArchive@@8 ; NArchive::N7z::CRepackStreamBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CRepackStreamBase@N7z@NArchive@@8
rdata$r	SEGMENT
??_R3CRepackStreamBase@N7z@NArchive@@8 DD 00H		; NArchive::N7z::CRepackStreamBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CRepackStreamBase@N7z@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCRepackStreamBase@N7z@NArchive@@@8
_DATA	SEGMENT
??_R0?AVCRepackStreamBase@N7z@NArchive@@@8 DD FLAT:??_7type_info@@6B@ ; NArchive::N7z::CRepackStreamBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCRepackStreamBase@N7z@NArchive@@', 00H
_DATA	ENDS
;	COMDAT ??_R17?0A@EA@CRepackStreamBase@N7z@NArchive@@8
rdata$r	SEGMENT
??_R17?0A@EA@CRepackStreamBase@N7z@NArchive@@8 DD FLAT:??_R0?AVCRepackStreamBase@N7z@NArchive@@@8 ; NArchive::N7z::CRepackStreamBase::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CRepackStreamBase@N7z@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CFolderInStream2@N7z@NArchive@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CFolderInStream2@N7z@NArchive@@8 DD FLAT:??_R0?AVCFolderInStream2@N7z@NArchive@@@8 ; NArchive::N7z::CFolderInStream2::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CFolderInStream2@N7z@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R2CFolderInStream2@N7z@NArchive@@8
rdata$r	SEGMENT
??_R2CFolderInStream2@N7z@NArchive@@8 DD FLAT:??_R1A@?0A@EA@CFolderInStream2@N7z@NArchive@@8 ; NArchive::N7z::CFolderInStream2::`RTTI Base Class Array'
	DD	FLAT:??_R17?0A@EA@CRepackStreamBase@N7z@NArchive@@8
	DD	FLAT:??_R1A@?0A@EA@ISequentialInStream@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R1DA@?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CFolderInStream2@N7z@NArchive@@8
rdata$r	SEGMENT
??_R3CFolderInStream2@N7z@NArchive@@8 DD 00H		; NArchive::N7z::CFolderInStream2::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2CFolderInStream2@N7z@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCFolderInStream2@N7z@NArchive@@@8
_DATA	SEGMENT
??_R0?AVCFolderInStream2@N7z@NArchive@@@8 DD FLAT:??_7type_info@@6B@ ; NArchive::N7z::CFolderInStream2 `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCFolderInStream2@N7z@NArchive@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CFolderInStream2@N7z@NArchive@@6B@
rdata$r	SEGMENT
??_R4CFolderInStream2@N7z@NArchive@@6B@ DD 00H		; NArchive::N7z::CFolderInStream2::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCFolderInStream2@N7z@NArchive@@@8
	DD	FLAT:??_R3CFolderInStream2@N7z@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_7CFolderInStream2@N7z@NArchive@@6B@
CONST	SEGMENT
??_7CFolderInStream2@N7z@NArchive@@6B@ DD FLAT:??_R4CFolderInStream2@N7z@NArchive@@6B@ ; NArchive::N7z::CFolderInStream2::`vftable'
	DD	FLAT:?QueryInterface@CFolderInStream2@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CFolderInStream2@N7z@NArchive@@UAGKXZ
	DD	FLAT:?Release@CFolderInStream2@N7z@NArchive@@UAGKXZ
	DD	FLAT:?Read@CFolderInStream2@N7z@NArchive@@UAGJPAXIPAI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CFolderInStream2@N7z@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CFolderInStream2@N7z@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CFolderInStream2@N7z@NArchive@@QAE@XZ$1
__ehfuncinfo$??0CFolderInStream2@N7z@NArchive@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CFolderInStream2@N7z@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CFolderInStream2@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
$T79776 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CFolderInStream2@N7z@NArchive@@QAE@XZ PROC		; NArchive::N7z::CFolderInStream2::CFolderInStream2, COMDAT
; _this$ = ecx
; Line 1331
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CFolderInStream2@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0CRepackStreamBase@N7z@NArchive@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ISequentialInStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CFolderInStream2@N7z@NArchive@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+60], 0
; Line 1332
	push	65536					; 00010000H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T79776[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T79776[ebp]
	mov	DWORD PTR [edx+52], eax
; Line 1333
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CFolderInStream2@N7z@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1CRepackStreamBase@N7z@NArchive@@QAE@XZ
__unwindfunclet$??0CFolderInStream2@N7z@NArchive@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	jmp	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
__ehhandler$??0CFolderInStream2@N7z@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CFolderInStream2@N7z@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CFolderInStream2@N7z@NArchive@@QAE@XZ ENDP		; NArchive::N7z::CFolderInStream2::CFolderInStream2
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CRepackStreamBase@N7z@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CRepackStreamBase@N7z@NArchive@@QAE@XZ$0
__ehfuncinfo$??1CRepackStreamBase@N7z@NArchive@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CRepackStreamBase@N7z@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CRepackStreamBase@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CRepackStreamBase@N7z@NArchive@@QAE@XZ PROC		; NArchive::N7z::CRepackStreamBase::~CRepackStreamBase, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CRepackStreamBase@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CRepackStreamBase@N7z@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	jmp	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
__ehhandler$??1CRepackStreamBase@N7z@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CRepackStreamBase@N7z@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CRepackStreamBase@N7z@NArchive@@QAE@XZ ENDP		; NArchive::N7z::CRepackStreamBase::~CRepackStreamBase
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@CFolderInStream2@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CFolderInStream2@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z PROC ; NArchive::N7z::CFolderInStream2::QueryInterface, COMDAT
; Line 1327
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@3
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN1@QueryInter@3
$LN2@QueryInter@3:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN3@QueryInter@3
$LN1@QueryInter@3:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], edx
	xor	eax, eax
$LN3@QueryInter@3:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CFolderInStream2@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z ENDP ; NArchive::N7z::CFolderInStream2::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CFolderInStream2@N7z@NArchive@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CFolderInStream2@N7z@NArchive@@UAGKXZ PROC	; NArchive::N7z::CFolderInStream2::AddRef, COMDAT
; Line 1327
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+48], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CFolderInStream2@N7z@NArchive@@UAGKXZ ENDP	; NArchive::N7z::CFolderInStream2::AddRef
_TEXT	ENDS
PUBLIC	??_GCFolderInStream2@N7z@NArchive@@QAEPAXI@Z	; NArchive::N7z::CFolderInStream2::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CFolderInStream2@N7z@NArchive@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T79802 = -8						; size = 4
$T79801 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CFolderInStream2@N7z@NArchive@@UAGKXZ PROC	; NArchive::N7z::CFolderInStream2::Release, COMDAT
; Line 1327
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+48], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+48]
	jmp	SHORT $LN2@Release@3
$LN1@Release@3:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T79802[ebp], edx
	mov	eax, DWORD PTR $T79802[ebp]
	mov	DWORD PTR $T79801[ebp], eax
	cmp	DWORD PTR $T79801[ebp], 0
	je	SHORT $LN4@Release@3
	push	1
	mov	ecx, DWORD PTR $T79801[ebp]
	call	??_GCFolderInStream2@N7z@NArchive@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release@3
$LN4@Release@3:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release@3:
	xor	eax, eax
$LN2@Release@3:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CFolderInStream2@N7z@NArchive@@UAGKXZ ENDP	; NArchive::N7z::CFolderInStream2::Release
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Init@CFolderInStream2@N7z@NArchive@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Init@CFolderInStream2@N7z@NArchive@@QAEXXZ PROC	; NArchive::N7z::CFolderInStream2::Init, COMDAT
; _this$ = ecx
; Line 1340
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+60], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Init@CFolderInStream2@N7z@NArchive@@QAEXXZ ENDP	; NArchive::N7z::CFolderInStream2::Init
_TEXT	ENDS
PUBLIC	??1CFolderInStream2@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CFolderInStream2::~CFolderInStream2
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCFolderInStream2@N7z@NArchive@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCFolderInStream2@N7z@NArchive@@QAEPAXI@Z PROC	; NArchive::N7z::CFolderInStream2::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CFolderInStream2@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFolderInStream2::~CFolderInStream2
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@3
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCFolderInStream2@N7z@NArchive@@QAEPAXI@Z ENDP	; NArchive::N7z::CFolderInStream2::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CFolderInStream2@N7z@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CFolderInStream2@N7z@NArchive@@QAE@XZ$0
__ehfuncinfo$??1CFolderInStream2@N7z@NArchive@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CFolderInStream2@N7z@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CFolderInStream2@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
$T79811 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CFolderInStream2@N7z@NArchive@@QAE@XZ PROC		; NArchive::N7z::CFolderInStream2::~CFolderInStream2, COMDAT
; _this$ = ecx
; Line 1336
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CFolderInStream2@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CFolderInStream2@N7z@NArchive@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 1337
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR $T79811[ebp], edx
	mov	eax, DWORD PTR $T79811[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 1338
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1CRepackStreamBase@N7z@NArchive@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CFolderInStream2@N7z@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1CRepackStreamBase@N7z@NArchive@@QAE@XZ
__ehhandler$??1CFolderInStream2@N7z@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CFolderInStream2@N7z@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CFolderInStream2@N7z@NArchive@@QAE@XZ ENDP		; NArchive::N7z::CFolderInStream2::~CFolderInStream2
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CRepackStreamBase@N7z@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CRepackStreamBase@N7z@NArchive@@QAE@XZ$0
__ehfuncinfo$??0CRepackStreamBase@N7z@NArchive@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CRepackStreamBase@N7z@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CRepackStreamBase@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CRepackStreamBase@N7z@NArchive@@QAE@XZ PROC		; NArchive::N7z::CRepackStreamBase::CRepackStreamBase, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CRepackStreamBase@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??0?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::CMyComPtr<IArchiveUpdateCallbackFile>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ; CMyComPtr<IArchiveExtractCallbackMessage>::CMyComPtr<IArchiveExtractCallbackMessage>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CRepackStreamBase@N7z@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	jmp	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
__ehhandler$??0CRepackStreamBase@N7z@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CRepackStreamBase@N7z@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CRepackStreamBase@N7z@NArchive@@QAE@XZ ENDP		; NArchive::N7z::CRepackStreamBase::CRepackStreamBase
PUBLIC	??1?$CMyComPtr@UIInStream@@@@QAE@XZ		; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
PUBLIC	??1CDecoder@N7z@NArchive@@QAE@XZ		; NArchive::N7z::CDecoder::~CDecoder
PUBLIC	??1CVirtThread@@QAE@XZ				; CVirtThread::~CVirtThread
PUBLIC	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=
PUBLIC	??0CFolderOutStream2@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CFolderOutStream2::CFolderOutStream2
PUBLIC	??0?$CMyComPtr@UIInStream@@@@QAE@XZ		; CMyComPtr<IInStream>::CMyComPtr<IInStream>
PUBLIC	??_7CThreadDecoder@N7z@NArchive@@6B@		; NArchive::N7z::CThreadDecoder::`vftable'
PUBLIC	??0CVirtThread@@QAE@XZ				; CVirtThread::CVirtThread
PUBLIC	??_R4CThreadDecoder@N7z@NArchive@@6B@		; NArchive::N7z::CThreadDecoder::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCThreadDecoder@N7z@NArchive@@@8		; NArchive::N7z::CThreadDecoder `RTTI Type Descriptor'
PUBLIC	??_R3CThreadDecoder@N7z@NArchive@@8		; NArchive::N7z::CThreadDecoder::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CThreadDecoder@N7z@NArchive@@8		; NArchive::N7z::CThreadDecoder::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CThreadDecoder@N7z@NArchive@@8	; NArchive::N7z::CThreadDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CVirtThread@@8			; CVirtThread::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUCVirtThread@@@8				; CVirtThread `RTTI Type Descriptor'
PUBLIC	??_R3CVirtThread@@8				; CVirtThread::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CVirtThread@@8				; CVirtThread::`RTTI Base Class Array'
EXTRN	??0CDecoder@N7z@NArchive@@QAE@_N@Z:PROC		; NArchive::N7z::CDecoder::CDecoder
;	COMDAT ??_R2CVirtThread@@8
rdata$r	SEGMENT
??_R2CVirtThread@@8 DD FLAT:??_R1A@?0A@EA@CVirtThread@@8 ; CVirtThread::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CVirtThread@@8
rdata$r	SEGMENT
??_R3CVirtThread@@8 DD 00H				; CVirtThread::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CVirtThread@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUCVirtThread@@@8
_DATA	SEGMENT
??_R0?AUCVirtThread@@@8 DD FLAT:??_7type_info@@6B@	; CVirtThread `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUCVirtThread@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@CVirtThread@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CVirtThread@@8 DD FLAT:??_R0?AUCVirtThread@@@8 ; CVirtThread::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CVirtThread@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CThreadDecoder@N7z@NArchive@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CThreadDecoder@N7z@NArchive@@8 DD FLAT:??_R0?AVCThreadDecoder@N7z@NArchive@@@8 ; NArchive::N7z::CThreadDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CThreadDecoder@N7z@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R2CThreadDecoder@N7z@NArchive@@8
rdata$r	SEGMENT
??_R2CThreadDecoder@N7z@NArchive@@8 DD FLAT:??_R1A@?0A@EA@CThreadDecoder@N7z@NArchive@@8 ; NArchive::N7z::CThreadDecoder::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CVirtThread@@8
rdata$r	ENDS
;	COMDAT ??_R3CThreadDecoder@N7z@NArchive@@8
rdata$r	SEGMENT
??_R3CThreadDecoder@N7z@NArchive@@8 DD 00H		; NArchive::N7z::CThreadDecoder::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CThreadDecoder@N7z@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCThreadDecoder@N7z@NArchive@@@8
_DATA	SEGMENT
??_R0?AVCThreadDecoder@N7z@NArchive@@@8 DD FLAT:??_7type_info@@6B@ ; NArchive::N7z::CThreadDecoder `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCThreadDecoder@N7z@NArchive@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CThreadDecoder@N7z@NArchive@@6B@
rdata$r	SEGMENT
??_R4CThreadDecoder@N7z@NArchive@@6B@ DD 00H		; NArchive::N7z::CThreadDecoder::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCThreadDecoder@N7z@NArchive@@@8
	DD	FLAT:??_R3CThreadDecoder@N7z@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_7CThreadDecoder@N7z@NArchive@@6B@
CONST	SEGMENT
??_7CThreadDecoder@N7z@NArchive@@6B@ DD FLAT:??_R4CThreadDecoder@N7z@NArchive@@6B@ ; NArchive::N7z::CThreadDecoder::`vftable'
	DD	FLAT:?Execute@CThreadDecoder@N7z@NArchive@@UAEXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0CThreadDecoder@N7z@NArchive@@QAE@_N@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??0CThreadDecoder@N7z@NArchive@@QAE@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0CThreadDecoder@N7z@NArchive@@QAE@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CThreadDecoder@N7z@NArchive@@QAE@_N@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CThreadDecoder@N7z@NArchive@@QAE@_N@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CThreadDecoder@N7z@NArchive@@QAE@_N@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CThreadDecoder@N7z@NArchive@@QAE@_N@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0CThreadDecoder@N7z@NArchive@@QAE@_N@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0CThreadDecoder@N7z@NArchive@@QAE@_N@Z$5
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CThreadDecoder@N7z@NArchive@@QAE@_N@Z
_TEXT	SEGMENT
tv145 = -28						; size = 4
$T79833 = -24						; size = 4
$T79832 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_multiThreadMixer$ = 8					; size = 1
??0CThreadDecoder@N7z@NArchive@@QAE@_N@Z PROC		; NArchive::N7z::CThreadDecoder::CThreadDecoder, COMDAT
; _this$ = ecx
; Line 1416
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CThreadDecoder@N7z@NArchive@@QAE@_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CVirtThread@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CThreadDecoder@N7z@NArchive@@6B@
	movzx	ecx, BYTE PTR _multiThreadMixer$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??0CDecoder@N7z@NArchive@@QAE@_N@Z	; NArchive::N7z::CDecoder::CDecoder
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 124				; 0000007cH
	call	??0?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::CMyComPtr<IInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 132				; 00000084H
	call	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 152				; 00000098H
	call	??0?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::CMyComPtr<ICryptoGetTextPassword>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
; Line 1418
	movzx	edx, BYTE PTR _multiThreadMixer$[ebp]
	test	edx, edx
	je	SHORT $LN2@CThreadDec
; Line 1420
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+156], 0
; Line 1421
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+160], 1
; Line 1422
	push	56					; 00000038H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T79833[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	cmp	DWORD PTR $T79833[ebp], 0
	je	SHORT $LN4@CThreadDec
	mov	ecx, DWORD PTR $T79833[ebp]
	call	??0CFolderOutStream2@N7z@NArchive@@QAE@XZ
	mov	DWORD PTR tv145[ebp], eax
	jmp	SHORT $LN5@CThreadDec
$LN4@CThreadDec:
	mov	DWORD PTR tv145[ebp], 0
$LN5@CThreadDec:
	mov	edx, DWORD PTR tv145[ebp]
	mov	DWORD PTR $T79832[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T79832[ebp]
	mov	DWORD PTR [eax+128], ecx
; Line 1423
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+128]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 132				; 00000084H
	call	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=
; Line 1424
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+120], -2147467259	; 80004005H
$LN2@CThreadDec:
; Line 1429
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CThreadDecoder@N7z@NArchive@@QAE@_N@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CVirtThread@@QAE@XZ			; CVirtThread::~CVirtThread
__unwindfunclet$??0CThreadDecoder@N7z@NArchive@@QAE@_N@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	jmp	??1CDecoder@N7z@NArchive@@QAE@XZ
__unwindfunclet$??0CThreadDecoder@N7z@NArchive@@QAE@_N@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 124				; 0000007cH
	jmp	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
__unwindfunclet$??0CThreadDecoder@N7z@NArchive@@QAE@_N@Z$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 132				; 00000084H
	jmp	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
__unwindfunclet$??0CThreadDecoder@N7z@NArchive@@QAE@_N@Z$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 152				; 00000098H
	jmp	??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
__unwindfunclet$??0CThreadDecoder@N7z@NArchive@@QAE@_N@Z$5:
	mov	eax, DWORD PTR $T79833[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??0CThreadDecoder@N7z@NArchive@@QAE@_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CThreadDecoder@N7z@NArchive@@QAE@_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CThreadDecoder@N7z@NArchive@@QAE@_N@Z ENDP		; NArchive::N7z::CThreadDecoder::CThreadDecoder
PUBLIC	??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent
PUBLIC	??1CThread@NWindows@@QAE@XZ			; NWindows::CThread::~CThread
PUBLIC	??_7CVirtThread@@6B@				; CVirtThread::`vftable'
PUBLIC	??_R4CVirtThread@@6B@				; CVirtThread::`RTTI Complete Object Locator'
EXTRN	?WaitThreadFinish@CVirtThread@@QAEXXZ:PROC	; CVirtThread::WaitThreadFinish
;	COMDAT ??_R4CVirtThread@@6B@
; File c:\workspace\7z1505-src\cpp\7zip\common\virtthread.h
rdata$r	SEGMENT
??_R4CVirtThread@@6B@ DD 00H				; CVirtThread::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUCVirtThread@@@8
	DD	FLAT:??_R3CVirtThread@@8
rdata$r	ENDS
;	COMDAT ??_7CVirtThread@@6B@
CONST	SEGMENT
??_7CVirtThread@@6B@ DD FLAT:??_R4CVirtThread@@6B@	; CVirtThread::`vftable'
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CVirtThread@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CVirtThread@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CVirtThread@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CVirtThread@@QAE@XZ$2
__ehfuncinfo$??1CVirtThread@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1CVirtThread@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CVirtThread@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CVirtThread@@QAE@XZ PROC				; CVirtThread::~CVirtThread, COMDAT
; _this$ = ecx
; Line 16
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CVirtThread@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CVirtThread@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WaitThreadFinish@CVirtThread@@QAEXXZ	; CVirtThread::WaitThreadFinish
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1CThread@NWindows@@QAE@XZ		; NWindows::CThread::~CThread
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CVirtThread@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
__unwindfunclet$??1CVirtThread@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
__unwindfunclet$??1CVirtThread@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1CThread@NWindows@@QAE@XZ		; NWindows::CThread::~CThread
__ehhandler$??1CVirtThread@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CVirtThread@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CVirtThread@@QAE@XZ ENDP				; CVirtThread::~CVirtThread
PUBLIC	?Close@CThread@NWindows@@QAEIXZ			; NWindows::CThread::Close
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CThread@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CThread@NWindows@@QAE@XZ PROC			; NWindows::CThread::~CThread, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\thread.h
; Line 17
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Close@CThread@NWindows@@QAEIXZ		; NWindows::CThread::Close
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CThread@NWindows@@QAE@XZ ENDP			; NWindows::CThread::~CThread
_TEXT	ENDS
EXTRN	_HandlePtr_Close@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Close@CThread@NWindows@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Close@CThread@NWindows@@QAEIXZ PROC			; NWindows::CThread::Close, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	_HandlePtr_Close@4
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Close@CThread@NWindows@@QAEIXZ ENDP			; NWindows::CThread::Close
_TEXT	ENDS
PUBLIC	??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ	; NWindows::NSynchronization::CBaseEvent::~CBaseEvent
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ PROC ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CBaseEvent::~CBaseEvent
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ENDP ; NWindows::NSynchronization::CAutoResetEvent::~CAutoResetEvent
_TEXT	ENDS
PUBLIC	?Close@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Close
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ PROC	; NWindows::NSynchronization::CBaseEvent::~CBaseEvent, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\synchronization.h
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Close@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Close
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ ENDP	; NWindows::NSynchronization::CBaseEvent::~CBaseEvent
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Close@CBaseEvent@NSynchronization@NWindows@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Close@CBaseEvent@NSynchronization@NWindows@@QAEIXZ PROC ; NWindows::NSynchronization::CBaseEvent::Close, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	_HandlePtr_Close@4
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Close@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ENDP ; NWindows::NSynchronization::CBaseEvent::Close
_TEXT	ENDS
PUBLIC	??0CThread@NWindows@@QAE@XZ			; NWindows::CThread::CThread
PUBLIC	??0CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CAutoResetEvent::CAutoResetEvent
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CVirtThread@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CVirtThread@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CVirtThread@@QAE@XZ$1
__ehfuncinfo$??0CVirtThread@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CVirtThread@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CVirtThread@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CVirtThread@@QAE@XZ PROC				; CVirtThread::CVirtThread, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CVirtThread@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CVirtThread@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0CThread@NWindows@@QAE@XZ		; NWindows::CThread::CThread
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CVirtThread@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
__unwindfunclet$??0CVirtThread@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
__ehhandler$??0CVirtThread@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CVirtThread@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CVirtThread@@QAE@XZ ENDP				; CVirtThread::CVirtThread
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CThread@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CThread@NWindows@@QAE@XZ PROC			; NWindows::CThread::CThread, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\thread.h
; Line 16
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CThread@NWindows@@QAE@XZ ENDP			; NWindows::CThread::CThread
_TEXT	ENDS
PUBLIC	??0CBaseEvent@NSynchronization@NWindows@@QAE@XZ	; NWindows::NSynchronization::CBaseEvent::CBaseEvent
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ PROC ; NWindows::NSynchronization::CAutoResetEvent::CAutoResetEvent, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CBaseEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CBaseEvent::CBaseEvent
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ ENDP ; NWindows::NSynchronization::CAutoResetEvent::CAutoResetEvent
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CBaseEvent@NSynchronization@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CBaseEvent@NSynchronization@NWindows@@QAE@XZ PROC	; NWindows::NSynchronization::CBaseEvent::CBaseEvent, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\synchronization.h
; Line 24
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CBaseEvent@NSynchronization@NWindows@@QAE@XZ ENDP	; NWindows::NSynchronization::CBaseEvent::CBaseEvent
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zupdate.cpp
xdata$x	SEGMENT
__ehfuncinfo$??1CThreadDecoder@N7z@NArchive@@QAE@XZ DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??1CThreadDecoder@N7z@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1CThreadDecoder@N7z@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CThreadDecoder@N7z@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CThreadDecoder@N7z@NArchive@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CThreadDecoder@N7z@NArchive@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CThreadDecoder@N7z@NArchive@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1CThreadDecoder@N7z@NArchive@@QAE@XZ$4
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CThreadDecoder@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CThreadDecoder@N7z@NArchive@@QAE@XZ PROC		; NArchive::N7z::CThreadDecoder::~CThreadDecoder, COMDAT
; _this$ = ecx
; Line 1458
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CThreadDecoder@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CThreadDecoder@N7z@NArchive@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WaitThreadFinish@CVirtThread@@QAEXXZ	; CVirtThread::WaitThreadFinish
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 152				; 00000098H
	call	??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 132				; 00000084H
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 124				; 0000007cH
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??1CDecoder@N7z@NArchive@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CVirtThread@@QAE@XZ			; CVirtThread::~CVirtThread
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CThreadDecoder@N7z@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CVirtThread@@QAE@XZ			; CVirtThread::~CVirtThread
__unwindfunclet$??1CThreadDecoder@N7z@NArchive@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	jmp	??1CDecoder@N7z@NArchive@@QAE@XZ
__unwindfunclet$??1CThreadDecoder@N7z@NArchive@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 124				; 0000007cH
	jmp	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
__unwindfunclet$??1CThreadDecoder@N7z@NArchive@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 132				; 00000084H
	jmp	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
__unwindfunclet$??1CThreadDecoder@N7z@NArchive@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 152				; 00000098H
	jmp	??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
__ehhandler$??1CThreadDecoder@N7z@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CThreadDecoder@N7z@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CThreadDecoder@N7z@NArchive@@QAE@XZ ENDP		; NArchive::N7z::CThreadDecoder::~CThreadDecoder
PUBLIC	??1CBindInfoEx@N7z@NArchive@@QAE@XZ		; NArchive::N7z::CBindInfoEx::~CBindInfoEx
PUBLIC	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ		; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CDecoder@N7z@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CDecoder@N7z@NArchive@@QAE@XZ$0
__ehfuncinfo$??1CDecoder@N7z@NArchive@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CDecoder@N7z@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CDecoder@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CDecoder@N7z@NArchive@@QAE@XZ PROC			; NArchive::N7z::CDecoder::~CDecoder, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CDecoder@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1CBindInfoEx@N7z@NArchive@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CDecoder@N7z@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1CBindInfoEx@N7z@NArchive@@QAE@XZ
__ehhandler$??1CDecoder@N7z@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CDecoder@N7z@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CDecoder@N7z@NArchive@@QAE@XZ ENDP			; NArchive::N7z::CDecoder::~CDecoder
PUBLIC	??_7CFolderOutStream2@N7z@NArchive@@6B@		; NArchive::N7z::CFolderOutStream2::`vftable'
PUBLIC	??0ISequentialOutStream@@QAE@XZ			; ISequentialOutStream::ISequentialOutStream
PUBLIC	??_R4CFolderOutStream2@N7z@NArchive@@6B@	; NArchive::N7z::CFolderOutStream2::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCFolderOutStream2@N7z@NArchive@@@8	; NArchive::N7z::CFolderOutStream2 `RTTI Type Descriptor'
PUBLIC	??_R3CFolderOutStream2@N7z@NArchive@@8		; NArchive::N7z::CFolderOutStream2::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CFolderOutStream2@N7z@NArchive@@8		; NArchive::N7z::CFolderOutStream2::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CFolderOutStream2@N7z@NArchive@@8	; NArchive::N7z::CFolderOutStream2::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ISequentialOutStream@@8		; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUISequentialOutStream@@@8		; ISequentialOutStream `RTTI Type Descriptor'
PUBLIC	??_R3ISequentialOutStream@@8			; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ISequentialOutStream@@8			; ISequentialOutStream::`RTTI Base Class Array'
PUBLIC	?QueryInterface@CFolderOutStream2@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::N7z::CFolderOutStream2::QueryInterface
PUBLIC	?AddRef@CFolderOutStream2@N7z@NArchive@@UAGKXZ	; NArchive::N7z::CFolderOutStream2::AddRef
PUBLIC	?Release@CFolderOutStream2@N7z@NArchive@@UAGKXZ	; NArchive::N7z::CFolderOutStream2::Release
;	COMDAT ??_R2ISequentialOutStream@@8
rdata$r	SEGMENT
??_R2ISequentialOutStream@@8 DD FLAT:??_R1A@?0A@EA@ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ISequentialOutStream@@8
rdata$r	SEGMENT
??_R3ISequentialOutStream@@8 DD 00H			; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ISequentialOutStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUISequentialOutStream@@@8
_DATA	SEGMENT
??_R0?AUISequentialOutStream@@@8 DD FLAT:??_7type_info@@6B@ ; ISequentialOutStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUISequentialOutStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ISequentialOutStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ISequentialOutStream@@8 DD FLAT:??_R0?AUISequentialOutStream@@@8 ; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ISequentialOutStream@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CFolderOutStream2@N7z@NArchive@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CFolderOutStream2@N7z@NArchive@@8 DD FLAT:??_R0?AVCFolderOutStream2@N7z@NArchive@@@8 ; NArchive::N7z::CFolderOutStream2::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CFolderOutStream2@N7z@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R2CFolderOutStream2@N7z@NArchive@@8
rdata$r	SEGMENT
??_R2CFolderOutStream2@N7z@NArchive@@8 DD FLAT:??_R1A@?0A@EA@CFolderOutStream2@N7z@NArchive@@8 ; NArchive::N7z::CFolderOutStream2::`RTTI Base Class Array'
	DD	FLAT:??_R17?0A@EA@CRepackStreamBase@N7z@NArchive@@8
	DD	FLAT:??_R1A@?0A@EA@ISequentialOutStream@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R1DA@?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CFolderOutStream2@N7z@NArchive@@8
rdata$r	SEGMENT
??_R3CFolderOutStream2@N7z@NArchive@@8 DD 00H		; NArchive::N7z::CFolderOutStream2::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2CFolderOutStream2@N7z@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCFolderOutStream2@N7z@NArchive@@@8
_DATA	SEGMENT
??_R0?AVCFolderOutStream2@N7z@NArchive@@@8 DD FLAT:??_7type_info@@6B@ ; NArchive::N7z::CFolderOutStream2 `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCFolderOutStream2@N7z@NArchive@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CFolderOutStream2@N7z@NArchive@@6B@
rdata$r	SEGMENT
??_R4CFolderOutStream2@N7z@NArchive@@6B@ DD 00H		; NArchive::N7z::CFolderOutStream2::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCFolderOutStream2@N7z@NArchive@@@8
	DD	FLAT:??_R3CFolderOutStream2@N7z@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_7CFolderOutStream2@N7z@NArchive@@6B@
CONST	SEGMENT
??_7CFolderOutStream2@N7z@NArchive@@6B@ DD FLAT:??_R4CFolderOutStream2@N7z@NArchive@@6B@ ; NArchive::N7z::CFolderOutStream2::`vftable'
	DD	FLAT:?QueryInterface@CFolderOutStream2@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CFolderOutStream2@N7z@NArchive@@UAGKXZ
	DD	FLAT:?Release@CFolderOutStream2@N7z@NArchive@@UAGKXZ
	DD	FLAT:?Write@CFolderOutStream2@N7z@NArchive@@UAGJPBXIPAI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CFolderOutStream2@N7z@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CFolderOutStream2@N7z@NArchive@@QAE@XZ$0
__ehfuncinfo$??0CFolderOutStream2@N7z@NArchive@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CFolderOutStream2@N7z@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CFolderOutStream2@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CFolderOutStream2@N7z@NArchive@@QAE@XZ PROC		; NArchive::N7z::CFolderOutStream2::CFolderOutStream2, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CFolderOutStream2@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0CRepackStreamBase@N7z@NArchive@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ISequentialOutStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CFolderOutStream2@N7z@NArchive@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CFolderOutStream2@N7z@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1CRepackStreamBase@N7z@NArchive@@QAE@XZ
__ehhandler$??0CFolderOutStream2@N7z@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CFolderOutStream2@N7z@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CFolderOutStream2@N7z@NArchive@@QAE@XZ ENDP		; NArchive::N7z::CFolderOutStream2::CFolderOutStream2
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@CFolderOutStream2@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CFolderOutStream2@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z PROC ; NArchive::N7z::CFolderOutStream2::QueryInterface, COMDAT
; Line 1263
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@4
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN1@QueryInter@4
$LN2@QueryInter@4:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN3@QueryInter@4
$LN1@QueryInter@4:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], edx
	xor	eax, eax
$LN3@QueryInter@4:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CFolderOutStream2@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z ENDP ; NArchive::N7z::CFolderOutStream2::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CFolderOutStream2@N7z@NArchive@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CFolderOutStream2@N7z@NArchive@@UAGKXZ PROC	; NArchive::N7z::CFolderOutStream2::AddRef, COMDAT
; Line 1263
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+48], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CFolderOutStream2@N7z@NArchive@@UAGKXZ ENDP	; NArchive::N7z::CFolderOutStream2::AddRef
_TEXT	ENDS
PUBLIC	??_GCFolderOutStream2@N7z@NArchive@@QAEPAXI@Z	; NArchive::N7z::CFolderOutStream2::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CFolderOutStream2@N7z@NArchive@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T79928 = -8						; size = 4
$T79927 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CFolderOutStream2@N7z@NArchive@@UAGKXZ PROC	; NArchive::N7z::CFolderOutStream2::Release, COMDAT
; Line 1263
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+48], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+48]
	jmp	SHORT $LN2@Release@4
$LN1@Release@4:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T79928[ebp], edx
	mov	eax, DWORD PTR $T79928[ebp]
	mov	DWORD PTR $T79927[ebp], eax
	cmp	DWORD PTR $T79927[ebp], 0
	je	SHORT $LN4@Release@4
	push	1
	mov	ecx, DWORD PTR $T79927[ebp]
	call	??_GCFolderOutStream2@N7z@NArchive@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release@4
$LN4@Release@4:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release@4:
	xor	eax, eax
$LN2@Release@4:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CFolderOutStream2@N7z@NArchive@@UAGKXZ ENDP	; NArchive::N7z::CFolderOutStream2::Release
_TEXT	ENDS
PUBLIC	??1CFolderOutStream2@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CFolderOutStream2::~CFolderOutStream2
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCFolderOutStream2@N7z@NArchive@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCFolderOutStream2@N7z@NArchive@@QAEPAXI@Z PROC	; NArchive::N7z::CFolderOutStream2::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CFolderOutStream2@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@4:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCFolderOutStream2@N7z@NArchive@@QAEPAXI@Z ENDP	; NArchive::N7z::CFolderOutStream2::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CFolderOutStream2@N7z@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CFolderOutStream2@N7z@NArchive@@QAE@XZ$0
__ehfuncinfo$??1CFolderOutStream2@N7z@NArchive@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CFolderOutStream2@N7z@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CFolderOutStream2@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CFolderOutStream2@N7z@NArchive@@QAE@XZ PROC		; NArchive::N7z::CFolderOutStream2::~CFolderOutStream2, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CFolderOutStream2@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1CRepackStreamBase@N7z@NArchive@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CFolderOutStream2@N7z@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1CRepackStreamBase@N7z@NArchive@@QAE@XZ
__ehhandler$??1CFolderOutStream2@N7z@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CFolderOutStream2@N7z@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CFolderOutStream2@N7z@NArchive@@QAE@XZ ENDP		; NArchive::N7z::CFolderOutStream2::~CFolderOutStream2
PUBLIC	??1CBindInfo@NCoderMixer2@@QAE@XZ		; NCoderMixer2::CBindInfo::~CBindInfo
PUBLIC	??1?$CRecordVector@_K@@QAE@XZ			; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CBindInfoEx@N7z@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CBindInfoEx@N7z@NArchive@@QAE@XZ$0
__ehfuncinfo$??1CBindInfoEx@N7z@NArchive@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CBindInfoEx@N7z@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CBindInfoEx@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CBindInfoEx@N7z@NArchive@@QAE@XZ PROC		; NArchive::N7z::CBindInfoEx::~CBindInfoEx, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CBindInfoEx@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CBindInfo@NCoderMixer2@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CBindInfoEx@N7z@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CBindInfo@NCoderMixer2@@QAE@XZ
__ehhandler$??1CBindInfoEx@N7z@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CBindInfoEx@N7z@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CBindInfoEx@N7z@NArchive@@QAE@XZ ENDP		; NArchive::N7z::CBindInfoEx::~CBindInfoEx
PUBLIC	??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::~CRecordVector<NCoderMixer2::CCoderStreamsInfo>
PUBLIC	??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CBond>::~CRecordVector<NCoderMixer2::CBond>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CBindInfo@NCoderMixer2@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$3
__ehfuncinfo$??1CBindInfo@NCoderMixer2@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??1CBindInfo@NCoderMixer2@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CBindInfo@NCoderMixer2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CBindInfo@NCoderMixer2@@QAE@XZ PROC			; NCoderMixer2::CBindInfo::~CBindInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CBindInfo@NCoderMixer2@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CBond>::~CRecordVector<NCoderMixer2::CBond>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::~CRecordVector<NCoderMixer2::CCoderStreamsInfo>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::~CRecordVector<NCoderMixer2::CCoderStreamsInfo>
__unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CBond>::~CRecordVector<NCoderMixer2::CBond>
__unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
__unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	jmp	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
__ehhandler$??1CBindInfo@NCoderMixer2@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CBindInfo@NCoderMixer2@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CBindInfo@NCoderMixer2@@QAE@XZ ENDP			; NCoderMixer2::CBindInfo::~CBindInfo
PUBLIC	??_7ISequentialOutStream@@6B@			; ISequentialOutStream::`vftable'
PUBLIC	??_R4ISequentialOutStream@@6B@			; ISequentialOutStream::`RTTI Complete Object Locator'
;	COMDAT ??_R4ISequentialOutStream@@6B@
rdata$r	SEGMENT
??_R4ISequentialOutStream@@6B@ DD 00H			; ISequentialOutStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUISequentialOutStream@@@8
	DD	FLAT:??_R3ISequentialOutStream@@8
rdata$r	ENDS
;	COMDAT ??_7ISequentialOutStream@@6B@
CONST	SEGMENT
??_7ISequentialOutStream@@6B@ DD FLAT:??_R4ISequentialOutStream@@6B@ ; ISequentialOutStream::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ISequentialOutStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ISequentialOutStream@@QAE@XZ PROC			; ISequentialOutStream::ISequentialOutStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ISequentialOutStream@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ISequentialOutStream@@QAE@XZ ENDP			; ISequentialOutStream::ISequentialOutStream
_TEXT	ENDS
PUBLIC	?IsItemAnti@CDatabase@N7z@NArchive@@QBE_NI@Z	; NArchive::N7z::CDatabase::IsItemAnti
PUBLIC	?GetItem@CUInt64DefVector@N7z@NArchive@@QBE_NIAA_K@Z ; NArchive::N7z::CUInt64DefVector::GetItem
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_inDb$ = 8						; size = 4
_index$ = 12						; size = 4
_file$ = 16						; size = 4
_file2$ = 20						; size = 4
?GetFile@N7z@NArchive@@YGXABUCDatabase@12@IAAUCFileItem@12@AAUCFileItem2@12@@Z PROC ; NArchive::N7z::GetFile
; Line 1531
	push	ebp
	mov	ebp, esp
; Line 1532
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _inDb$[ebp]
	add	ecx, 88					; 00000058H
	call	??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEABUCFileItem@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CFileItem>::operator[]
	mov	ecx, DWORD PTR _file$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	edx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], edx
	mov	eax, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+20], eax
; Line 1533
	mov	ecx, DWORD PTR _file2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _inDb$[ebp]
	add	ecx, 100				; 00000064H
	call	?GetItem@CUInt64DefVector@N7z@NArchive@@QBE_NIAA_K@Z ; NArchive::N7z::CUInt64DefVector::GetItem
	mov	ecx, DWORD PTR _file2$[ebp]
	mov	BYTE PTR [ecx+32], al
; Line 1534
	mov	edx, DWORD PTR _file2$[ebp]
	add	edx, 8
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _inDb$[ebp]
	add	ecx, 124				; 0000007cH
	call	?GetItem@CUInt64DefVector@N7z@NArchive@@QBE_NIAA_K@Z ; NArchive::N7z::CUInt64DefVector::GetItem
	mov	ecx, DWORD PTR _file2$[ebp]
	mov	BYTE PTR [ecx+33], al
; Line 1535
	mov	edx, DWORD PTR _file2$[ebp]
	add	edx, 16					; 00000010H
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _inDb$[ebp]
	add	ecx, 148				; 00000094H
	call	?GetItem@CUInt64DefVector@N7z@NArchive@@QBE_NIAA_K@Z ; NArchive::N7z::CUInt64DefVector::GetItem
	mov	ecx, DWORD PTR _file2$[ebp]
	mov	BYTE PTR [ecx+34], al
; Line 1536
	mov	edx, DWORD PTR _file2$[ebp]
	add	edx, 24					; 00000018H
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _inDb$[ebp]
	add	ecx, 172				; 000000acH
	call	?GetItem@CUInt64DefVector@N7z@NArchive@@QBE_NIAA_K@Z ; NArchive::N7z::CUInt64DefVector::GetItem
	mov	ecx, DWORD PTR _file2$[ebp]
	mov	BYTE PTR [ecx+35], al
; Line 1537
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _inDb$[ebp]
	call	?IsItemAnti@CDatabase@N7z@NArchive@@QBE_NI@Z ; NArchive::N7z::CDatabase::IsItemAnti
	mov	ecx, DWORD PTR _file2$[ebp]
	mov	BYTE PTR [ecx+36], al
; Line 1539
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	16					; 00000010H
?GetFile@N7z@NArchive@@YGXABUCDatabase@12@IAAUCFileItem@12@AAUCFileItem2@12@@Z ENDP ; NArchive::N7z::GetFile
_TEXT	ENDS
PUBLIC	??A?$CRecordVector@_K@@QBEAB_KI@Z		; CRecordVector<unsigned __int64>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetItem@CUInt64DefVector@N7z@NArchive@@QBE_NIAA_K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
_value$ = 12						; size = 4
?GetItem@CUInt64DefVector@N7z@NArchive@@QBE_NIAA_K@Z PROC ; NArchive::N7z::CUInt64DefVector::GetItem, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zitem.h
; Line 134
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 135
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@_N@@QBEIXZ	; CRecordVector<bool>::Size
	cmp	DWORD PTR _index$[ebp], eax
	jae	SHORT $LN1@GetItem
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@_N@@QBEAB_NI@Z	; CRecordVector<bool>::operator[]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN1@GetItem
; Line 137
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$CRecordVector@_K@@QBEAB_KI@Z	; CRecordVector<unsigned __int64>::operator[]
	mov	ecx, DWORD PTR _value$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], eax
; Line 138
	mov	al, 1
	jmp	SHORT $LN2@GetItem
$LN1@GetItem:
; Line 140
	mov	ecx, DWORD PTR _value$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
; Line 141
	xor	al, al
$LN2@GetItem:
; Line 142
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?GetItem@CUInt64DefVector@N7z@NArchive@@QBE_NIAA_K@Z ENDP ; NArchive::N7z::CUInt64DefVector::GetItem
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsItemAnti@CDatabase@N7z@NArchive@@QBE_NI@Z
_TEXT	SEGMENT
tv74 = -8						; size = 4
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?IsItemAnti@CDatabase@N7z@NArchive@@QBE_NI@Z PROC	; NArchive::N7z::CDatabase::IsItemAnti, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zin.h
; Line 158
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 196				; 000000c4H
	call	?Size@?$CRecordVector@_N@@QBEIXZ	; CRecordVector<bool>::Size
	cmp	DWORD PTR _index$[ebp], eax
	jae	SHORT $LN3@IsItemAnti
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 196				; 000000c4H
	call	??A?$CRecordVector@_N@@QBEAB_NI@Z	; CRecordVector<bool>::operator[]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN3@IsItemAnti
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@IsItemAnti
$LN3@IsItemAnti:
	mov	DWORD PTR tv74[ebp], 0
$LN4@IsItemAnti:
	mov	al, BYTE PTR tv74[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?IsItemAnti@CDatabase@N7z@NArchive@@QBE_NI@Z ENDP	; NArchive::N7z::CDatabase::IsItemAnti
_TEXT	ENDS
PUBLIC	??0CFolder@N7z@NArchive@@QAE@XZ			; NArchive::N7z::CFolder::CFolder
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CFolderEx@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CFolderEx@N7z@NArchive@@QAE@XZ PROC			; NArchive::N7z::CFolderEx::CFolderEx, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CFolder@N7z@NArchive@@QAE@XZ		; NArchive::N7z::CFolder::CFolder
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CFolderEx@N7z@NArchive@@QAE@XZ ENDP			; NArchive::N7z::CFolderEx::CFolderEx
_TEXT	ENDS
PUBLIC	??1?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ	; CObjArray2<NArchive::N7z::CBond>::~CObjArray2<NArchive::N7z::CBond>
PUBLIC	??1?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ ; CObjArray2<NArchive::N7z::CCoderInfo>::~CObjArray2<NArchive::N7z::CCoderInfo>
PUBLIC	??0?$CObjArray2@I@@QAE@XZ			; CObjArray2<unsigned int>::CObjArray2<unsigned int>
PUBLIC	??0?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ	; CObjArray2<NArchive::N7z::CBond>::CObjArray2<NArchive::N7z::CBond>
PUBLIC	??0?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ ; CObjArray2<NArchive::N7z::CCoderInfo>::CObjArray2<NArchive::N7z::CCoderInfo>
;	COMDAT xdata$x
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zitem.h
xdata$x	SEGMENT
__unwindtable$??0CFolder@N7z@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CFolder@N7z@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CFolder@N7z@NArchive@@QAE@XZ$1
__ehfuncinfo$??0CFolder@N7z@NArchive@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CFolder@N7z@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CFolder@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CFolder@N7z@NArchive@@QAE@XZ PROC			; NArchive::N7z::CFolder::CFolder, COMDAT
; _this$ = ecx
; Line 43
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CFolder@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ ; CObjArray2<NArchive::N7z::CCoderInfo>::CObjArray2<NArchive::N7z::CCoderInfo>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ ; CObjArray2<NArchive::N7z::CBond>::CObjArray2<NArchive::N7z::CBond>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0?$CObjArray2@I@@QAE@XZ		; CObjArray2<unsigned int>::CObjArray2<unsigned int>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CFolder@N7z@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ ; CObjArray2<NArchive::N7z::CCoderInfo>::~CObjArray2<NArchive::N7z::CCoderInfo>
__unwindfunclet$??0CFolder@N7z@NArchive@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ ; CObjArray2<NArchive::N7z::CBond>::~CObjArray2<NArchive::N7z::CBond>
__ehhandler$??0CFolder@N7z@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CFolder@N7z@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CFolder@N7z@NArchive@@QAE@XZ ENDP			; NArchive::N7z::CFolder::CFolder
PUBLIC	??1CFolder@N7z@NArchive@@QAE@XZ			; NArchive::N7z::CFolder::~CFolder
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CFolderEx@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CFolderEx@N7z@NArchive@@QAE@XZ PROC			; NArchive::N7z::CFolderEx::~CFolderEx, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CFolder@N7z@NArchive@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CFolderEx@N7z@NArchive@@QAE@XZ ENDP			; NArchive::N7z::CFolderEx::~CFolderEx
_TEXT	ENDS
PUBLIC	??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CManualResetEvent::~CManualResetEvent
PUBLIC	??0CManualResetEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CManualResetEvent::CManualResetEvent
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CStreamBinder@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CStreamBinder@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CStreamBinder@@QAE@XZ$1
__ehfuncinfo$??0CStreamBinder@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CStreamBinder@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CStreamBinder@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CStreamBinder@@QAE@XZ PROC				; CStreamBinder::CStreamBinder, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CStreamBinder@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CManualResetEvent@NSynchronization@NWindows@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0CManualResetEvent@NSynchronization@NWindows@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CStreamBinder@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
__unwindfunclet$??0CStreamBinder@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ
__ehhandler$??0CStreamBinder@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CStreamBinder@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CStreamBinder@@QAE@XZ ENDP				; CStreamBinder::CStreamBinder
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CStreamBinder@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CStreamBinder@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CStreamBinder@@QAE@XZ$1
__ehfuncinfo$??1CStreamBinder@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CStreamBinder@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CStreamBinder@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CStreamBinder@@QAE@XZ PROC				; CStreamBinder::~CStreamBinder, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CStreamBinder@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CStreamBinder@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CAutoResetEvent@NSynchronization@NWindows@@QAE@XZ
__unwindfunclet$??1CStreamBinder@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ
__ehhandler$??1CStreamBinder@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CStreamBinder@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CStreamBinder@@QAE@XZ ENDP				; CStreamBinder::~CStreamBinder
PUBLIC	??1?$CBuffer@E@@QAE@XZ				; CBuffer<unsigned char>::~CBuffer<unsigned char>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CAnalysis@N7z@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CAnalysis@N7z@NArchive@@QAE@XZ$0
__ehfuncinfo$??1CAnalysis@N7z@NArchive@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CAnalysis@N7z@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CAnalysis@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CAnalysis@N7z@NArchive@@QAE@XZ PROC			; NArchive::N7z::CAnalysis::~CAnalysis, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CAnalysis@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CAnalysis@N7z@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
__ehhandler$??1CAnalysis@N7z@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CAnalysis@N7z@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CAnalysis@N7z@NArchive@@QAE@XZ ENDP			; NArchive::N7z::CAnalysis::~CAnalysis
PUBLIC	??_7CCryptoGetTextPassword@N7z@NArchive@@6B@	; NArchive::N7z::CCryptoGetTextPassword::`vftable'
PUBLIC	??0ICryptoGetTextPassword@@QAE@XZ		; ICryptoGetTextPassword::ICryptoGetTextPassword
PUBLIC	??_R4CCryptoGetTextPassword@N7z@NArchive@@6B@	; NArchive::N7z::CCryptoGetTextPassword::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCCryptoGetTextPassword@N7z@NArchive@@@8	; NArchive::N7z::CCryptoGetTextPassword `RTTI Type Descriptor'
PUBLIC	??_R3CCryptoGetTextPassword@N7z@NArchive@@8	; NArchive::N7z::CCryptoGetTextPassword::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCryptoGetTextPassword@N7z@NArchive@@8	; NArchive::N7z::CCryptoGetTextPassword::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCryptoGetTextPassword@N7z@NArchive@@8 ; NArchive::N7z::CCryptoGetTextPassword::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ICryptoGetTextPassword@@8		; ICryptoGetTextPassword::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUICryptoGetTextPassword@@@8		; ICryptoGetTextPassword `RTTI Type Descriptor'
PUBLIC	??_R3ICryptoGetTextPassword@@8			; ICryptoGetTextPassword::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ICryptoGetTextPassword@@8			; ICryptoGetTextPassword::`RTTI Base Class Array'
PUBLIC	?QueryInterface@CCryptoGetTextPassword@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::N7z::CCryptoGetTextPassword::QueryInterface
PUBLIC	?AddRef@CCryptoGetTextPassword@N7z@NArchive@@UAGKXZ ; NArchive::N7z::CCryptoGetTextPassword::AddRef
PUBLIC	?Release@CCryptoGetTextPassword@N7z@NArchive@@UAGKXZ ; NArchive::N7z::CCryptoGetTextPassword::Release
;	COMDAT ??_R2ICryptoGetTextPassword@@8
rdata$r	SEGMENT
??_R2ICryptoGetTextPassword@@8 DD FLAT:??_R1A@?0A@EA@ICryptoGetTextPassword@@8 ; ICryptoGetTextPassword::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ICryptoGetTextPassword@@8
rdata$r	SEGMENT
??_R3ICryptoGetTextPassword@@8 DD 00H			; ICryptoGetTextPassword::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ICryptoGetTextPassword@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUICryptoGetTextPassword@@@8
_DATA	SEGMENT
??_R0?AUICryptoGetTextPassword@@@8 DD FLAT:??_7type_info@@6B@ ; ICryptoGetTextPassword `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUICryptoGetTextPassword@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ICryptoGetTextPassword@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ICryptoGetTextPassword@@8 DD FLAT:??_R0?AUICryptoGetTextPassword@@@8 ; ICryptoGetTextPassword::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICryptoGetTextPassword@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CCryptoGetTextPassword@N7z@NArchive@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CCryptoGetTextPassword@N7z@NArchive@@8 DD FLAT:??_R0?AVCCryptoGetTextPassword@N7z@NArchive@@@8 ; NArchive::N7z::CCryptoGetTextPassword::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCryptoGetTextPassword@N7z@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R2CCryptoGetTextPassword@N7z@NArchive@@8
rdata$r	SEGMENT
??_R2CCryptoGetTextPassword@N7z@NArchive@@8 DD FLAT:??_R1A@?0A@EA@CCryptoGetTextPassword@N7z@NArchive@@8 ; NArchive::N7z::CCryptoGetTextPassword::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ICryptoGetTextPassword@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CCryptoGetTextPassword@N7z@NArchive@@8
rdata$r	SEGMENT
??_R3CCryptoGetTextPassword@N7z@NArchive@@8 DD 00H	; NArchive::N7z::CCryptoGetTextPassword::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2CCryptoGetTextPassword@N7z@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCryptoGetTextPassword@N7z@NArchive@@@8
_DATA	SEGMENT
??_R0?AVCCryptoGetTextPassword@N7z@NArchive@@@8 DD FLAT:??_7type_info@@6B@ ; NArchive::N7z::CCryptoGetTextPassword `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCryptoGetTextPassword@N7z@NArchive@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CCryptoGetTextPassword@N7z@NArchive@@6B@
rdata$r	SEGMENT
??_R4CCryptoGetTextPassword@N7z@NArchive@@6B@ DD 00H	; NArchive::N7z::CCryptoGetTextPassword::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCCryptoGetTextPassword@N7z@NArchive@@@8
	DD	FLAT:??_R3CCryptoGetTextPassword@N7z@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_7CCryptoGetTextPassword@N7z@NArchive@@6B@
CONST	SEGMENT
??_7CCryptoGetTextPassword@N7z@NArchive@@6B@ DD FLAT:??_R4CCryptoGetTextPassword@N7z@NArchive@@6B@ ; NArchive::N7z::CCryptoGetTextPassword::`vftable'
	DD	FLAT:?QueryInterface@CCryptoGetTextPassword@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CCryptoGetTextPassword@N7z@NArchive@@UAGKXZ
	DD	FLAT:?Release@CCryptoGetTextPassword@N7z@NArchive@@UAGKXZ
	DD	FLAT:?CryptoGetTextPassword@CCryptoGetTextPassword@N7z@NArchive@@UAGJPAPA_W@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CCryptoGetTextPassword@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CCryptoGetTextPassword@N7z@NArchive@@QAE@XZ PROC	; NArchive::N7z::CCryptoGetTextPassword::CCryptoGetTextPassword, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ICryptoGetTextPassword@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CCryptoGetTextPassword@N7z@NArchive@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0UString@@QAE@XZ			; UString::UString
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CCryptoGetTextPassword@N7z@NArchive@@QAE@XZ ENDP	; NArchive::N7z::CCryptoGetTextPassword::CCryptoGetTextPassword
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CCryptoGetTextPassword@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CCryptoGetTextPassword@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z PROC ; NArchive::N7z::CCryptoGetTextPassword::QueryInterface, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zupdate.cpp
; Line 1518
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@5
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN1@QueryInter@5
$LN2@QueryInter@5:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN3@QueryInter@5
$LN1@QueryInter@5:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	xor	eax, eax
$LN3@QueryInter@5:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CCryptoGetTextPassword@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z ENDP ; NArchive::N7z::CCryptoGetTextPassword::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CCryptoGetTextPassword@N7z@NArchive@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CCryptoGetTextPassword@N7z@NArchive@@UAGKXZ PROC ; NArchive::N7z::CCryptoGetTextPassword::AddRef, COMDAT
; Line 1518
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CCryptoGetTextPassword@N7z@NArchive@@UAGKXZ ENDP ; NArchive::N7z::CCryptoGetTextPassword::AddRef
_TEXT	ENDS
PUBLIC	??_GCCryptoGetTextPassword@N7z@NArchive@@QAEPAXI@Z ; NArchive::N7z::CCryptoGetTextPassword::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CCryptoGetTextPassword@N7z@NArchive@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T80034 = -8						; size = 4
$T80033 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CCryptoGetTextPassword@N7z@NArchive@@UAGKXZ PROC ; NArchive::N7z::CCryptoGetTextPassword::Release, COMDAT
; Line 1518
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	jmp	SHORT $LN2@Release@5
$LN1@Release@5:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T80034[ebp], edx
	mov	eax, DWORD PTR $T80034[ebp]
	mov	DWORD PTR $T80033[ebp], eax
	cmp	DWORD PTR $T80033[ebp], 0
	je	SHORT $LN4@Release@5
	push	1
	mov	ecx, DWORD PTR $T80033[ebp]
	call	??_GCCryptoGetTextPassword@N7z@NArchive@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release@5
$LN4@Release@5:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release@5:
	xor	eax, eax
$LN2@Release@5:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CCryptoGetTextPassword@N7z@NArchive@@UAGKXZ ENDP ; NArchive::N7z::CCryptoGetTextPassword::Release
_TEXT	ENDS
PUBLIC	??1CCryptoGetTextPassword@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CCryptoGetTextPassword::~CCryptoGetTextPassword
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCCryptoGetTextPassword@N7z@NArchive@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCCryptoGetTextPassword@N7z@NArchive@@QAEPAXI@Z PROC	; NArchive::N7z::CCryptoGetTextPassword::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CCryptoGetTextPassword@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@5
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@5:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCCryptoGetTextPassword@N7z@NArchive@@QAEPAXI@Z ENDP	; NArchive::N7z::CCryptoGetTextPassword::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CCryptoGetTextPassword@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CCryptoGetTextPassword@N7z@NArchive@@QAE@XZ PROC	; NArchive::N7z::CCryptoGetTextPassword::~CCryptoGetTextPassword, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1UString@@QAE@XZ			; UString::~UString
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CCryptoGetTextPassword@N7z@NArchive@@QAE@XZ ENDP	; NArchive::N7z::CCryptoGetTextPassword::~CCryptoGetTextPassword
_TEXT	ENDS
PUBLIC	??1?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CBond2>::~CRecordVector<NArchive::N7z::CBond2>
PUBLIC	??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CMethodFull>::~CObjectVector<NArchive::N7z::CMethodFull>
PUBLIC	??0?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@ABV0@@Z ; CRecordVector<NArchive::N7z::CBond2>::CRecordVector<NArchive::N7z::CBond2>
PUBLIC	??0?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@ABV0@@Z ; CObjectVector<NArchive::N7z::CMethodFull>::CObjectVector<NArchive::N7z::CMethodFull>
EXTRN	??0UString@@QAE@ABV0@@Z:PROC			; UString::UString
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CCompressionMethodMode@N7z@NArchive@@QAE@ABU012@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CCompressionMethodMode@N7z@NArchive@@QAE@ABU012@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CCompressionMethodMode@N7z@NArchive@@QAE@ABU012@@Z$1
__ehfuncinfo$??0CCompressionMethodMode@N7z@NArchive@@QAE@ABU012@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CCompressionMethodMode@N7z@NArchive@@QAE@ABU012@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CCompressionMethodMode@N7z@NArchive@@QAE@ABU012@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0CCompressionMethodMode@N7z@NArchive@@QAE@ABU012@@Z PROC ; NArchive::N7z::CCompressionMethodMode::CCompressionMethodMode, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CCompressionMethodMode@N7z@NArchive@@QAE@ABU012@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@ABV0@@Z ; CObjectVector<NArchive::N7z::CMethodFull>::CObjectVector<NArchive::N7z::CMethodFull>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@ABV0@@Z ; CRecordVector<NArchive::N7z::CBond2>::CRecordVector<NArchive::N7z::CBond2>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cl, BYTE PTR [eax+24]
	mov	BYTE PTR [edx+24], cl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cl, BYTE PTR [eax+25]
	mov	BYTE PTR [edx+25], cl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR [edx+28], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cl, BYTE PTR [eax+32]
	mov	BYTE PTR [edx+32], cl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cl, BYTE PTR [eax+33]
	mov	BYTE PTR [edx+33], cl
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 36					; 00000024H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CCompressionMethodMode@N7z@NArchive@@QAE@ABU012@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CMethodFull>::~CObjectVector<NArchive::N7z::CMethodFull>
__unwindfunclet$??0CCompressionMethodMode@N7z@NArchive@@QAE@ABU012@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CBond2>::~CRecordVector<NArchive::N7z::CBond2>
__ehhandler$??0CCompressionMethodMode@N7z@NArchive@@QAE@ABU012@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CCompressionMethodMode@N7z@NArchive@@QAE@ABU012@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CCompressionMethodMode@N7z@NArchive@@QAE@ABU012@@Z ENDP ; NArchive::N7z::CCompressionMethodMode::CCompressionMethodMode
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ$1
__ehfuncinfo$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ PROC	; NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CBond2>::~CRecordVector<NArchive::N7z::CBond2>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CMethodFull>::~CObjectVector<NArchive::N7z::CMethodFull>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CMethodFull>::~CObjectVector<NArchive::N7z::CMethodFull>
__unwindfunclet$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CBond2>::~CRecordVector<NArchive::N7z::CBond2>
__ehhandler$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ ENDP	; NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode
PUBLIC	??_7CRepackInStreamWithSizes@N7z@NArchive@@6BICompressGetSubStreamSize@@@ ; NArchive::N7z::CRepackInStreamWithSizes::`vftable'
PUBLIC	??_7CRepackInStreamWithSizes@N7z@NArchive@@6BISequentialInStream@@@ ; NArchive::N7z::CRepackInStreamWithSizes::`vftable'
PUBLIC	??0ICompressGetSubStreamSize@@QAE@XZ		; ICompressGetSubStreamSize::ICompressGetSubStreamSize
PUBLIC	??_R4CRepackInStreamWithSizes@N7z@NArchive@@6BISequentialInStream@@@ ; NArchive::N7z::CRepackInStreamWithSizes::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCRepackInStreamWithSizes@N7z@NArchive@@@8 ; NArchive::N7z::CRepackInStreamWithSizes `RTTI Type Descriptor'
PUBLIC	??_R3CRepackInStreamWithSizes@N7z@NArchive@@8	; NArchive::N7z::CRepackInStreamWithSizes::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CRepackInStreamWithSizes@N7z@NArchive@@8	; NArchive::N7z::CRepackInStreamWithSizes::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CRepackInStreamWithSizes@N7z@NArchive@@8 ; NArchive::N7z::CRepackInStreamWithSizes::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@ICompressGetSubStreamSize@@8	; ICompressGetSubStreamSize::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AUICompressGetSubStreamSize@@@8		; ICompressGetSubStreamSize `RTTI Type Descriptor'
PUBLIC	??_R3ICompressGetSubStreamSize@@8		; ICompressGetSubStreamSize::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ICompressGetSubStreamSize@@8		; ICompressGetSubStreamSize::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ICompressGetSubStreamSize@@8	; ICompressGetSubStreamSize::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R17?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	?QueryInterface@CRepackInStreamWithSizes@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::N7z::CRepackInStreamWithSizes::QueryInterface
PUBLIC	?AddRef@CRepackInStreamWithSizes@N7z@NArchive@@UAGKXZ ; NArchive::N7z::CRepackInStreamWithSizes::AddRef
PUBLIC	?Release@CRepackInStreamWithSizes@N7z@NArchive@@UAGKXZ ; NArchive::N7z::CRepackInStreamWithSizes::Release
PUBLIC	??_R4CRepackInStreamWithSizes@N7z@NArchive@@6BICompressGetSubStreamSize@@@ ; NArchive::N7z::CRepackInStreamWithSizes::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@CRepackInStreamWithSizes@N7z@NArchive@@W3AGJABU_GUID@@PAPAX@Z ; [thunk]:NArchive::N7z::CRepackInStreamWithSizes::QueryInterface`adjustor{4}'
PUBLIC	?AddRef@CRepackInStreamWithSizes@N7z@NArchive@@W3AGKXZ ; [thunk]:NArchive::N7z::CRepackInStreamWithSizes::AddRef`adjustor{4}'
PUBLIC	?Release@CRepackInStreamWithSizes@N7z@NArchive@@W3AGKXZ ; [thunk]:NArchive::N7z::CRepackInStreamWithSizes::Release`adjustor{4}'
;	COMDAT ??_R4CRepackInStreamWithSizes@N7z@NArchive@@6BICompressGetSubStreamSize@@@
rdata$r	SEGMENT
??_R4CRepackInStreamWithSizes@N7z@NArchive@@6BICompressGetSubStreamSize@@@ DD 00H ; NArchive::N7z::CRepackInStreamWithSizes::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVCRepackInStreamWithSizes@N7z@NArchive@@@8
	DD	FLAT:??_R3CRepackInStreamWithSizes@N7z@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R17?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R17?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ICompressGetSubStreamSize@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ICompressGetSubStreamSize@@8 DD FLAT:??_R0?AUICompressGetSubStreamSize@@@8 ; ICompressGetSubStreamSize::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICompressGetSubStreamSize@@8
rdata$r	ENDS
;	COMDAT ??_R2ICompressGetSubStreamSize@@8
rdata$r	SEGMENT
??_R2ICompressGetSubStreamSize@@8 DD FLAT:??_R1A@?0A@EA@ICompressGetSubStreamSize@@8 ; ICompressGetSubStreamSize::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ICompressGetSubStreamSize@@8
rdata$r	SEGMENT
??_R3ICompressGetSubStreamSize@@8 DD 00H		; ICompressGetSubStreamSize::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ICompressGetSubStreamSize@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUICompressGetSubStreamSize@@@8
_DATA	SEGMENT
??_R0?AUICompressGetSubStreamSize@@@8 DD FLAT:??_7type_info@@6B@ ; ICompressGetSubStreamSize `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUICompressGetSubStreamSize@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@ICompressGetSubStreamSize@@8
rdata$r	SEGMENT
??_R13?0A@EA@ICompressGetSubStreamSize@@8 DD FLAT:??_R0?AUICompressGetSubStreamSize@@@8 ; ICompressGetSubStreamSize::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	01H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICompressGetSubStreamSize@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CRepackInStreamWithSizes@N7z@NArchive@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CRepackInStreamWithSizes@N7z@NArchive@@8 DD FLAT:??_R0?AVCRepackInStreamWithSizes@N7z@NArchive@@@8 ; NArchive::N7z::CRepackInStreamWithSizes::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	05H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CRepackInStreamWithSizes@N7z@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R2CRepackInStreamWithSizes@N7z@NArchive@@8
rdata$r	SEGMENT
??_R2CRepackInStreamWithSizes@N7z@NArchive@@8 DD FLAT:??_R1A@?0A@EA@CRepackInStreamWithSizes@N7z@NArchive@@8 ; NArchive::N7z::CRepackInStreamWithSizes::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ISequentialInStream@@8
	DD	FLAT:??_R1A@?0A@EC@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@ICompressGetSubStreamSize@@8
	DD	FLAT:??_R13?0A@EC@IUnknown@@8
	DD	FLAT:??_R17?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CRepackInStreamWithSizes@N7z@NArchive@@8
rdata$r	SEGMENT
??_R3CRepackInStreamWithSizes@N7z@NArchive@@8 DD 00H	; NArchive::N7z::CRepackInStreamWithSizes::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	06H
	DD	FLAT:??_R2CRepackInStreamWithSizes@N7z@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCRepackInStreamWithSizes@N7z@NArchive@@@8
_DATA	SEGMENT
??_R0?AVCRepackInStreamWithSizes@N7z@NArchive@@@8 DD FLAT:??_7type_info@@6B@ ; NArchive::N7z::CRepackInStreamWithSizes `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCRepackInStreamWithSizes@N7z@NArchive@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CRepackInStreamWithSizes@N7z@NArchive@@6BISequentialInStream@@@
rdata$r	SEGMENT
??_R4CRepackInStreamWithSizes@N7z@NArchive@@6BISequentialInStream@@@ DD 00H ; NArchive::N7z::CRepackInStreamWithSizes::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCRepackInStreamWithSizes@N7z@NArchive@@@8
	DD	FLAT:??_R3CRepackInStreamWithSizes@N7z@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_7CRepackInStreamWithSizes@N7z@NArchive@@6BICompressGetSubStreamSize@@@
CONST	SEGMENT
??_7CRepackInStreamWithSizes@N7z@NArchive@@6BICompressGetSubStreamSize@@@ DD FLAT:??_R4CRepackInStreamWithSizes@N7z@NArchive@@6BICompressGetSubStreamSize@@@ ; NArchive::N7z::CRepackInStreamWithSizes::`vftable'
	DD	FLAT:?QueryInterface@CRepackInStreamWithSizes@N7z@NArchive@@W3AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CRepackInStreamWithSizes@N7z@NArchive@@W3AGKXZ
	DD	FLAT:?Release@CRepackInStreamWithSizes@N7z@NArchive@@W3AGKXZ
	DD	FLAT:?GetSubStreamSize@CRepackInStreamWithSizes@N7z@NArchive@@UAGJ_KPA_K@Z
CONST	ENDS
;	COMDAT ??_7CRepackInStreamWithSizes@N7z@NArchive@@6BISequentialInStream@@@
CONST	SEGMENT
??_7CRepackInStreamWithSizes@N7z@NArchive@@6BISequentialInStream@@@ DD FLAT:??_R4CRepackInStreamWithSizes@N7z@NArchive@@6BISequentialInStream@@@ ; NArchive::N7z::CRepackInStreamWithSizes::`vftable'
	DD	FLAT:?QueryInterface@CRepackInStreamWithSizes@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CRepackInStreamWithSizes@N7z@NArchive@@UAGKXZ
	DD	FLAT:?Release@CRepackInStreamWithSizes@N7z@NArchive@@UAGKXZ
	DD	FLAT:?Read@CRepackInStreamWithSizes@N7z@NArchive@@UAGJPAXIPAI@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CRepackInStreamWithSizes@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CRepackInStreamWithSizes@N7z@NArchive@@QAE@XZ PROC	; NArchive::N7z::CRepackInStreamWithSizes::CRepackInStreamWithSizes, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ISequentialInStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0ICompressGetSubStreamSize@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CRepackInStreamWithSizes@N7z@NArchive@@6BISequentialInStream@@@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], OFFSET ??_7CRepackInStreamWithSizes@N7z@NArchive@@6BICompressGetSubStreamSize@@@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CRepackInStreamWithSizes@N7z@NArchive@@QAE@XZ ENDP	; NArchive::N7z::CRepackInStreamWithSizes::CRepackInStreamWithSizes
_TEXT	ENDS
EXTRN	_IID_ICompressGetSubStreamSize:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@CRepackInStreamWithSizes@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
tv92 = -4						; size = 4
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CRepackInStreamWithSizes@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z PROC ; NArchive::N7z::CRepackInStreamWithSizes::QueryInterface, COMDAT
; Line 1124
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN6@QueryInter@6
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN5@QueryInter@6
$LN6@QueryInter@6:
	push	OFFSET _IID_ISequentialInStream
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@QueryInter@6
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN5@QueryInter@6
$LN4@QueryInter@6:
	push	OFFSET _IID_ICompressGetSubStreamSize
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@6
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN9@QueryInter@6
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	mov	DWORD PTR tv92[ebp], edx
	jmp	SHORT $LN10@QueryInter@6
$LN9@QueryInter@6:
	mov	DWORD PTR tv92[ebp], 0
$LN10@QueryInter@6:
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	ecx, DWORD PTR tv92[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN5@QueryInter@6
$LN2@QueryInter@6:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN7@QueryInter@6
$LN5@QueryInter@6:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax
	xor	eax, eax
$LN7@QueryInter@6:
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CRepackInStreamWithSizes@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z ENDP ; NArchive::N7z::CRepackInStreamWithSizes::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CRepackInStreamWithSizes@N7z@NArchive@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CRepackInStreamWithSizes@N7z@NArchive@@UAGKXZ PROC ; NArchive::N7z::CRepackInStreamWithSizes::AddRef, COMDAT
; Line 1124
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CRepackInStreamWithSizes@N7z@NArchive@@UAGKXZ ENDP ; NArchive::N7z::CRepackInStreamWithSizes::AddRef
_TEXT	ENDS
PUBLIC	??_GCRepackInStreamWithSizes@N7z@NArchive@@QAEPAXI@Z ; NArchive::N7z::CRepackInStreamWithSizes::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CRepackInStreamWithSizes@N7z@NArchive@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T80076 = -8						; size = 4
$T80075 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CRepackInStreamWithSizes@N7z@NArchive@@UAGKXZ PROC ; NArchive::N7z::CRepackInStreamWithSizes::Release, COMDAT
; Line 1124
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+8], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	jmp	SHORT $LN2@Release@6
$LN1@Release@6:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T80076[ebp], edx
	mov	eax, DWORD PTR $T80076[ebp]
	mov	DWORD PTR $T80075[ebp], eax
	cmp	DWORD PTR $T80075[ebp], 0
	je	SHORT $LN4@Release@6
	push	1
	mov	ecx, DWORD PTR $T80075[ebp]
	call	??_GCRepackInStreamWithSizes@N7z@NArchive@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release@6
$LN4@Release@6:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release@6:
	xor	eax, eax
$LN2@Release@6:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CRepackInStreamWithSizes@N7z@NArchive@@UAGKXZ ENDP ; NArchive::N7z::CRepackInStreamWithSizes::Release
_TEXT	ENDS
PUBLIC	??1CRepackInStreamWithSizes@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CRepackInStreamWithSizes::~CRepackInStreamWithSizes
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCRepackInStreamWithSizes@N7z@NArchive@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCRepackInStreamWithSizes@N7z@NArchive@@QAEPAXI@Z PROC ; NArchive::N7z::CRepackInStreamWithSizes::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CRepackInStreamWithSizes@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@6
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@6:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCRepackInStreamWithSizes@N7z@NArchive@@QAEPAXI@Z ENDP ; NArchive::N7z::CRepackInStreamWithSizes::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CRepackInStreamWithSizes@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CRepackInStreamWithSizes@N7z@NArchive@@QAE@XZ PROC	; NArchive::N7z::CRepackInStreamWithSizes::~CRepackInStreamWithSizes, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CRepackInStreamWithSizes@N7z@NArchive@@QAE@XZ ENDP	; NArchive::N7z::CRepackInStreamWithSizes::~CRepackInStreamWithSizes
_TEXT	ENDS
PUBLIC	??1?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallback>::~CMyComPtr<IArchiveUpdateCallback>
PUBLIC	??0?$CRecordVector@_K@@QAE@XZ			; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>
PUBLIC	??0?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallback>::CMyComPtr<IArchiveUpdateCallback>
PUBLIC	??_7CFolderInStream@N7z@NArchive@@6BICompressGetSubStreamSize@@@ ; NArchive::N7z::CFolderInStream::`vftable'
PUBLIC	??_7CFolderInStream@N7z@NArchive@@6BISequentialInStream@@@ ; NArchive::N7z::CFolderInStream::`vftable'
PUBLIC	??_R4CFolderInStream@N7z@NArchive@@6BISequentialInStream@@@ ; NArchive::N7z::CFolderInStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCFolderInStream@N7z@NArchive@@@8	; NArchive::N7z::CFolderInStream `RTTI Type Descriptor'
PUBLIC	??_R3CFolderInStream@N7z@NArchive@@8		; NArchive::N7z::CFolderInStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CFolderInStream@N7z@NArchive@@8		; NArchive::N7z::CFolderInStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CFolderInStream@N7z@NArchive@@8	; NArchive::N7z::CFolderInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?QueryInterface@CFolderInStream@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::N7z::CFolderInStream::QueryInterface
PUBLIC	?AddRef@CFolderInStream@N7z@NArchive@@UAGKXZ	; NArchive::N7z::CFolderInStream::AddRef
PUBLIC	?Release@CFolderInStream@N7z@NArchive@@UAGKXZ	; NArchive::N7z::CFolderInStream::Release
PUBLIC	??_R4CFolderInStream@N7z@NArchive@@6BICompressGetSubStreamSize@@@ ; NArchive::N7z::CFolderInStream::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@CFolderInStream@N7z@NArchive@@W3AGJABU_GUID@@PAPAX@Z ; [thunk]:NArchive::N7z::CFolderInStream::QueryInterface`adjustor{4}'
PUBLIC	?AddRef@CFolderInStream@N7z@NArchive@@W3AGKXZ	; [thunk]:NArchive::N7z::CFolderInStream::AddRef`adjustor{4}'
PUBLIC	?Release@CFolderInStream@N7z@NArchive@@W3AGKXZ	; [thunk]:NArchive::N7z::CFolderInStream::Release`adjustor{4}'
EXTRN	?Read@CFolderInStream@N7z@NArchive@@UAGJPAXIPAI@Z:PROC ; NArchive::N7z::CFolderInStream::Read
EXTRN	?GetSubStreamSize@CFolderInStream@N7z@NArchive@@UAGJ_KPA_K@Z:PROC ; NArchive::N7z::CFolderInStream::GetSubStreamSize
;	COMDAT ??_R4CFolderInStream@N7z@NArchive@@6BICompressGetSubStreamSize@@@
rdata$r	SEGMENT
??_R4CFolderInStream@N7z@NArchive@@6BICompressGetSubStreamSize@@@ DD 00H ; NArchive::N7z::CFolderInStream::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVCFolderInStream@N7z@NArchive@@@8
	DD	FLAT:??_R3CFolderInStream@N7z@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CFolderInStream@N7z@NArchive@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CFolderInStream@N7z@NArchive@@8 DD FLAT:??_R0?AVCFolderInStream@N7z@NArchive@@@8 ; NArchive::N7z::CFolderInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	05H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CFolderInStream@N7z@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R2CFolderInStream@N7z@NArchive@@8
rdata$r	SEGMENT
??_R2CFolderInStream@N7z@NArchive@@8 DD FLAT:??_R1A@?0A@EA@CFolderInStream@N7z@NArchive@@8 ; NArchive::N7z::CFolderInStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ISequentialInStream@@8
	DD	FLAT:??_R1A@?0A@EC@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@ICompressGetSubStreamSize@@8
	DD	FLAT:??_R13?0A@EC@IUnknown@@8
	DD	FLAT:??_R17?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CFolderInStream@N7z@NArchive@@8
rdata$r	SEGMENT
??_R3CFolderInStream@N7z@NArchive@@8 DD 00H		; NArchive::N7z::CFolderInStream::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	06H
	DD	FLAT:??_R2CFolderInStream@N7z@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCFolderInStream@N7z@NArchive@@@8
_DATA	SEGMENT
??_R0?AVCFolderInStream@N7z@NArchive@@@8 DD FLAT:??_7type_info@@6B@ ; NArchive::N7z::CFolderInStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCFolderInStream@N7z@NArchive@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CFolderInStream@N7z@NArchive@@6BISequentialInStream@@@
rdata$r	SEGMENT
??_R4CFolderInStream@N7z@NArchive@@6BISequentialInStream@@@ DD 00H ; NArchive::N7z::CFolderInStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCFolderInStream@N7z@NArchive@@@8
	DD	FLAT:??_R3CFolderInStream@N7z@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_7CFolderInStream@N7z@NArchive@@6BICompressGetSubStreamSize@@@
CONST	SEGMENT
??_7CFolderInStream@N7z@NArchive@@6BICompressGetSubStreamSize@@@ DD FLAT:??_R4CFolderInStream@N7z@NArchive@@6BICompressGetSubStreamSize@@@ ; NArchive::N7z::CFolderInStream::`vftable'
	DD	FLAT:?QueryInterface@CFolderInStream@N7z@NArchive@@W3AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CFolderInStream@N7z@NArchive@@W3AGKXZ
	DD	FLAT:?Release@CFolderInStream@N7z@NArchive@@W3AGKXZ
	DD	FLAT:?GetSubStreamSize@CFolderInStream@N7z@NArchive@@UAGJ_KPA_K@Z
CONST	ENDS
;	COMDAT ??_7CFolderInStream@N7z@NArchive@@6BISequentialInStream@@@
CONST	SEGMENT
??_7CFolderInStream@N7z@NArchive@@6BISequentialInStream@@@ DD FLAT:??_R4CFolderInStream@N7z@NArchive@@6BISequentialInStream@@@ ; NArchive::N7z::CFolderInStream::`vftable'
	DD	FLAT:?QueryInterface@CFolderInStream@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CFolderInStream@N7z@NArchive@@UAGKXZ
	DD	FLAT:?Release@CFolderInStream@N7z@NArchive@@UAGKXZ
	DD	FLAT:?Read@CFolderInStream@N7z@NArchive@@UAGJPAXIPAI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CFolderInStream@N7z@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CFolderInStream@N7z@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CFolderInStream@N7z@NArchive@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CFolderInStream@N7z@NArchive@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CFolderInStream@N7z@NArchive@@QAE@XZ$3
__ehfuncinfo$??0CFolderInStream@N7z@NArchive@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0CFolderInStream@N7z@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CFolderInStream@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CFolderInStream@N7z@NArchive@@QAE@XZ PROC		; NArchive::N7z::CFolderInStream::CFolderInStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CFolderInStream@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ISequentialInStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0ICompressGetSubStreamSize@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CFolderInStream@N7z@NArchive@@6BISequentialInStream@@@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], OFFSET ??_7CFolderInStream@N7z@NArchive@@6BICompressGetSubStreamSize@@@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??0?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallback>::CMyComPtr<IArchiveUpdateCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	??0?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::CRecordVector<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	call	??0?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	call	??0?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CFolderInStream@N7z@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
__unwindfunclet$??0CFolderInStream@N7z@NArchive@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	jmp	??1?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallback>::~CMyComPtr<IArchiveUpdateCallback>
__unwindfunclet$??0CFolderInStream@N7z@NArchive@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	jmp	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
__unwindfunclet$??0CFolderInStream@N7z@NArchive@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	jmp	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
__ehhandler$??0CFolderInStream@N7z@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CFolderInStream@N7z@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CFolderInStream@N7z@NArchive@@QAE@XZ ENDP		; NArchive::N7z::CFolderInStream::CFolderInStream
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@CFolderInStream@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
tv92 = -4						; size = 4
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CFolderInStream@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z PROC ; NArchive::N7z::CFolderInStream::QueryInterface, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zfolderinstream.h
; Line 42
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN6@QueryInter@7
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN5@QueryInter@7
$LN6@QueryInter@7:
	push	OFFSET _IID_ISequentialInStream
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@QueryInter@7
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN5@QueryInter@7
$LN4@QueryInter@7:
	push	OFFSET _IID_ICompressGetSubStreamSize
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@7
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN9@QueryInter@7
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	mov	DWORD PTR tv92[ebp], edx
	jmp	SHORT $LN10@QueryInter@7
$LN9@QueryInter@7:
	mov	DWORD PTR tv92[ebp], 0
$LN10@QueryInter@7:
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	ecx, DWORD PTR tv92[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN5@QueryInter@7
$LN2@QueryInter@7:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN7@QueryInter@7
$LN5@QueryInter@7:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax
	xor	eax, eax
$LN7@QueryInter@7:
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CFolderInStream@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z ENDP ; NArchive::N7z::CFolderInStream::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CFolderInStream@N7z@NArchive@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CFolderInStream@N7z@NArchive@@UAGKXZ PROC	; NArchive::N7z::CFolderInStream::AddRef, COMDAT
; Line 42
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CFolderInStream@N7z@NArchive@@UAGKXZ ENDP	; NArchive::N7z::CFolderInStream::AddRef
_TEXT	ENDS
PUBLIC	??_GCFolderInStream@N7z@NArchive@@QAEPAXI@Z	; NArchive::N7z::CFolderInStream::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CFolderInStream@N7z@NArchive@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T80106 = -8						; size = 4
$T80105 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CFolderInStream@N7z@NArchive@@UAGKXZ PROC	; NArchive::N7z::CFolderInStream::Release, COMDAT
; Line 42
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+8], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	jmp	SHORT $LN2@Release@7
$LN1@Release@7:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T80106[ebp], edx
	mov	eax, DWORD PTR $T80106[ebp]
	mov	DWORD PTR $T80105[ebp], eax
	cmp	DWORD PTR $T80105[ebp], 0
	je	SHORT $LN4@Release@7
	push	1
	mov	ecx, DWORD PTR $T80105[ebp]
	call	??_GCFolderInStream@N7z@NArchive@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release@7
$LN4@Release@7:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release@7:
	xor	eax, eax
$LN2@Release@7:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CFolderInStream@N7z@NArchive@@UAGKXZ ENDP	; NArchive::N7z::CFolderInStream::Release
_TEXT	ENDS
PUBLIC	??1CFolderInStream@N7z@NArchive@@QAE@XZ		; NArchive::N7z::CFolderInStream::~CFolderInStream
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCFolderInStream@N7z@NArchive@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCFolderInStream@N7z@NArchive@@QAEPAXI@Z PROC	; NArchive::N7z::CFolderInStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CFolderInStream@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@7
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@7:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCFolderInStream@N7z@NArchive@@QAEPAXI@Z ENDP	; NArchive::N7z::CFolderInStream::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CFolderInStream@N7z@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CFolderInStream@N7z@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CFolderInStream@N7z@NArchive@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CFolderInStream@N7z@NArchive@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CFolderInStream@N7z@NArchive@@QAE@XZ$3
__ehfuncinfo$??1CFolderInStream@N7z@NArchive@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??1CFolderInStream@N7z@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CFolderInStream@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CFolderInStream@N7z@NArchive@@QAE@XZ PROC		; NArchive::N7z::CFolderInStream::~CFolderInStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CFolderInStream@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	call	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??1?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallback>::~CMyComPtr<IArchiveUpdateCallback>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CFolderInStream@N7z@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
__unwindfunclet$??1CFolderInStream@N7z@NArchive@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	jmp	??1?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallback>::~CMyComPtr<IArchiveUpdateCallback>
__unwindfunclet$??1CFolderInStream@N7z@NArchive@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	jmp	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
__unwindfunclet$??1CFolderInStream@N7z@NArchive@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	jmp	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
__ehhandler$??1CFolderInStream@N7z@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CFolderInStream@N7z@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CFolderInStream@N7z@NArchive@@QAE@XZ ENDP		; NArchive::N7z::CFolderInStream::~CFolderInStream
PUBLIC	??1?$CObjArray2@I@@QAE@XZ			; CObjArray2<unsigned int>::~CObjArray2<unsigned int>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CFolder@N7z@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CFolder@N7z@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CFolder@N7z@NArchive@@QAE@XZ$1
__ehfuncinfo$??1CFolder@N7z@NArchive@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CFolder@N7z@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CFolder@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CFolder@N7z@NArchive@@QAE@XZ PROC			; NArchive::N7z::CFolder::~CFolder, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CFolder@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??1?$CObjArray2@I@@QAE@XZ		; CObjArray2<unsigned int>::~CObjArray2<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ ; CObjArray2<NArchive::N7z::CBond>::~CObjArray2<NArchive::N7z::CBond>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ ; CObjArray2<NArchive::N7z::CCoderInfo>::~CObjArray2<NArchive::N7z::CCoderInfo>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CFolder@N7z@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ ; CObjArray2<NArchive::N7z::CCoderInfo>::~CObjArray2<NArchive::N7z::CCoderInfo>
__unwindfunclet$??1CFolder@N7z@NArchive@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ ; CObjArray2<NArchive::N7z::CBond>::~CObjArray2<NArchive::N7z::CBond>
__ehhandler$??1CFolder@N7z@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CFolder@N7z@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CFolder@N7z@NArchive@@QAE@XZ ENDP			; NArchive::N7z::CFolder::~CFolder
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CManualResetEvent@NSynchronization@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CManualResetEvent@NSynchronization@NWindows@@QAE@XZ PROC ; NWindows::NSynchronization::CManualResetEvent::CManualResetEvent, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CBaseEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CBaseEvent::CBaseEvent
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CManualResetEvent@NSynchronization@NWindows@@QAE@XZ ENDP ; NWindows::NSynchronization::CManualResetEvent::CManualResetEvent
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ PROC ; NWindows::NSynchronization::CManualResetEvent::~CManualResetEvent, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CBaseEvent@NSynchronization@NWindows@@QAE@XZ ; NWindows::NSynchronization::CBaseEvent::~CBaseEvent
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CManualResetEvent@NSynchronization@NWindows@@QAE@XZ ENDP ; NWindows::NSynchronization::CManualResetEvent::~CManualResetEvent
_TEXT	ENDS
PUBLIC	??_7ICryptoGetTextPassword@@6B@			; ICryptoGetTextPassword::`vftable'
PUBLIC	??_R4ICryptoGetTextPassword@@6B@		; ICryptoGetTextPassword::`RTTI Complete Object Locator'
;	COMDAT ??_R4ICryptoGetTextPassword@@6B@
rdata$r	SEGMENT
??_R4ICryptoGetTextPassword@@6B@ DD 00H			; ICryptoGetTextPassword::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUICryptoGetTextPassword@@@8
	DD	FLAT:??_R3ICryptoGetTextPassword@@8
rdata$r	ENDS
;	COMDAT ??_7ICryptoGetTextPassword@@6B@
CONST	SEGMENT
??_7ICryptoGetTextPassword@@6B@ DD FLAT:??_R4ICryptoGetTextPassword@@6B@ ; ICryptoGetTextPassword::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ICryptoGetTextPassword@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ICryptoGetTextPassword@@QAE@XZ PROC			; ICryptoGetTextPassword::ICryptoGetTextPassword, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ICryptoGetTextPassword@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ICryptoGetTextPassword@@QAE@XZ ENDP			; ICryptoGetTextPassword::ICryptoGetTextPassword
_TEXT	ENDS
PUBLIC	??_7ICompressGetSubStreamSize@@6B@		; ICompressGetSubStreamSize::`vftable'
PUBLIC	??_R4ICompressGetSubStreamSize@@6B@		; ICompressGetSubStreamSize::`RTTI Complete Object Locator'
;	COMDAT ??_R4ICompressGetSubStreamSize@@6B@
rdata$r	SEGMENT
??_R4ICompressGetSubStreamSize@@6B@ DD 00H		; ICompressGetSubStreamSize::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUICompressGetSubStreamSize@@@8
	DD	FLAT:??_R3ICompressGetSubStreamSize@@8
rdata$r	ENDS
;	COMDAT ??_7ICompressGetSubStreamSize@@6B@
CONST	SEGMENT
??_7ICompressGetSubStreamSize@@6B@ DD FLAT:??_R4ICompressGetSubStreamSize@@6B@ ; ICompressGetSubStreamSize::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ICompressGetSubStreamSize@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ICompressGetSubStreamSize@@QAE@XZ PROC		; ICompressGetSubStreamSize::ICompressGetSubStreamSize, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ICompressGetSubStreamSize@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ICompressGetSubStreamSize@@QAE@XZ ENDP		; ICompressGetSubStreamSize::ICompressGetSubStreamSize
_TEXT	ENDS
PUBLIC	?ReserveDown@?$CRecordVector@PAX@@QAEXXZ	; CRecordVector<void *>::ReserveDown
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ReserveDown@?$CObjectVector@VUString@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ReserveDown@?$CObjectVector@VUString@@@@QAEXXZ PROC	; CObjectVector<UString>::ReserveDown, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 417
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveDown@?$CRecordVector@PAX@@QAEXXZ ; CRecordVector<void *>::ReserveDown
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveDown@?$CObjectVector@VUString@@@@QAEXXZ ENDP	; CObjectVector<UString>::ReserveDown
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICompressCoder@@@@QAE@PAUICompressCoder@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??0?$CMyComPtr@UICompressCoder@@@@QAE@PAUICompressCoder@@@Z PROC ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@CMyComPtr
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UICompressCoder@@@@QAE@PAUICompressCoder@@@Z ENDP ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ PROC		; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@2:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ENDP		; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ PROC ; CMyComPtr<ICompressCoder>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ENDP ; CMyComPtr<ICompressCoder>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z PROC ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@CMyComPtr@3
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@3:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z ENDP ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@4:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ PROC ; CMyComPtr<ISequentialInStream>::Release, COMDAT
; _this$ = ecx
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Release@8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
$LN2@Release@8:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ ENDP ; CMyComPtr<ISequentialInStream>::Release
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ PROC ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ENDP ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ PROC ; CMyComPtr<ISequentialInStream>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UISequentialInStream@@@@QAEPAPAUISequentialInStream@@XZ ENDP ; CMyComPtr<ISequentialInStream>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ PROC ; CMyComPtr<ISequentialInStream>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ENDP ; CMyComPtr<ISequentialInStream>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z PROC ; CMyComPtr<ISequentialInStream>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@3
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@3:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@3
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@3:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ENDP ; CMyComPtr<ISequentialInStream>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lp$ = 8						; size = 4
??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@ABV0@@Z PROC ; CMyComPtr<ISequentialInStream>::operator=, COMDAT
; _this$ = ecx
; Line 36
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _lp$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@ABV0@@Z ENDP ; CMyComPtr<ISequentialInStream>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??7?$CMyComPtr@UISequentialInStream@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??7?$CMyComPtr@UISequentialInStream@@@@QBE_NXZ PROC	; CMyComPtr<ISequentialInStream>::operator!, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
??7?$CMyComPtr@UISequentialInStream@@@@QBE_NXZ ENDP	; CMyComPtr<ISequentialInStream>::operator!
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIInStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UIInStream@@@@QAE@XZ PROC		; CMyComPtr<IInStream>::CMyComPtr<IInStream>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UIInStream@@@@QAE@XZ ENDP		; CMyComPtr<IInStream>::CMyComPtr<IInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIInStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIInStream@@@@QAE@XZ PROC		; CMyComPtr<IInStream>::~CMyComPtr<IInStream>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@5:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIInStream@@@@QAE@XZ ENDP		; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ PROC	; CMyComPtr<IInStream>::operator IInStream *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ENDP	; CMyComPtr<IInStream>::operator IInStream *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z PROC ; CMyComPtr<IInStream>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@4
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@4:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@4
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@4:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ENDP ; CMyComPtr<IInStream>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@I@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@I@@QAE@XZ PROC			; CRecordVector<unsigned int>::CRecordVector<unsigned int>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@I@@QAE@XZ ENDP			; CRecordVector<unsigned int>::CRecordVector<unsigned int>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@I@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@I@@QBEIXZ PROC			; CRecordVector<unsigned int>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@I@@QBEIXZ ENDP			; CRecordVector<unsigned int>::Size
_TEXT	ENDS
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ReserveDown@?$CRecordVector@I@@QAEXXZ
_TEXT	SEGMENT
$T80188 = -16						; size = 4
$T80187 = -12						; size = 4
_p$ = -8						; size = 4
_this$ = -4						; size = 4
?ReserveDown@?$CRecordVector@I@@QAEXXZ PROC		; CRecordVector<unsigned int>::ReserveDown, COMDAT
; _this$ = ecx
; Line 107
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 108
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN2@ReserveDow
; Line 109
	jmp	SHORT $LN3@ReserveDow
$LN2@ReserveDow:
; Line 110
	mov	DWORD PTR _p$[ebp], 0
; Line 111
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@ReserveDow
; Line 113
	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T80187[ebp], eax
	mov	eax, DWORD PTR $T80187[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 114
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveDow:
; Line 116
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T80188[ebp], ecx
	mov	edx, DWORD PTR $T80188[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 117
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 118
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx
$LN3@ReserveDow:
; Line 119
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveDown@?$CRecordVector@I@@QAEXXZ ENDP		; CRecordVector<unsigned int>::ReserveDown
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@I@@QAE@XZ
_TEXT	SEGMENT
$T80191 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@I@@QAE@XZ PROC			; CRecordVector<unsigned int>::~CRecordVector<unsigned int>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T80191[ebp], ecx
	mov	edx, DWORD PTR $T80191[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@I@@QAE@XZ ENDP			; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
_TEXT	ENDS
PUBLIC	?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ	; CRecordVector<unsigned int>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@I@@QAEII@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?Add@?$CRecordVector@I@@QAEII@Z PROC			; CRecordVector<unsigned int>::Add, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ ; CRecordVector<unsigned int>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 201
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv72[ebp]
; Line 202
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CRecordVector@I@@QAEII@Z ENDP			; CRecordVector<unsigned int>::Add
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@I@@QBEABII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@I@@QBEABII@Z PROC			; CRecordVector<unsigned int>::operator[], COMDAT
; _this$ = ecx
; Line 227
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@I@@QBEABII@Z ENDP			; CRecordVector<unsigned int>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@I@@QAEAAII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@I@@QAEAAII@Z PROC			; CRecordVector<unsigned int>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@I@@QAEAAII@Z ENDP			; CRecordVector<unsigned int>::operator[]
_TEXT	ENDS
PUBLIC	?SortRefDown@?$CRecordVector@I@@SGXPAIIIP6GHPBI1PAX@Z2@Z ; CRecordVector<unsigned int>::SortRefDown
PUBLIC	?Front@?$CRecordVector@I@@QAEAAIXZ		; CRecordVector<unsigned int>::Front
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Sort@?$CRecordVector@I@@QAEXP6GHPBI0PAX@Z1@Z
_TEXT	SEGMENT
_temp$77403 = -20					; size = 4
_i$77396 = -16						; size = 4
_p$ = -12						; size = 4
_size$ = -8						; size = 4
_this$ = -4						; size = 4
_compare$ = 8						; size = 4
_param$ = 12						; size = 4
?Sort@?$CRecordVector@I@@QAEXP6GHPBI0PAX@Z1@Z PROC	; CRecordVector<unsigned int>::Sort, COMDAT
; _this$ = ecx
; Line 342
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 343
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _size$[ebp], ecx
; Line 344
	cmp	DWORD PTR _size$[ebp], 1
	ja	SHORT $LN7@Sort
; Line 345
	jmp	$LN8@Sort
$LN7@Sort:
; Line 346
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Front@?$CRecordVector@I@@QAEAAIXZ	; CRecordVector<unsigned int>::Front
	sub	eax, 4
	mov	DWORD PTR _p$[ebp], eax
; Line 348
	mov	edx, DWORD PTR _size$[ebp]
	shr	edx, 1
	mov	DWORD PTR _i$77396[ebp], edx
$LN6@Sort:
; Line 350
	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _compare$[ebp]
	push	ecx
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$77396[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	?SortRefDown@?$CRecordVector@I@@SGXPAIIIP6GHPBI1PAX@Z2@Z ; CRecordVector<unsigned int>::SortRefDown
; Line 351
	mov	edx, DWORD PTR _i$77396[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$77396[ebp], edx
	jne	SHORT $LN6@Sort
$LN3@Sort:
; Line 355
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _temp$77403[ebp], edx
; Line 356
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+eax*4], edx
	mov	eax, DWORD PTR _size$[ebp]
	sub	eax, 1
	mov	DWORD PTR _size$[ebp], eax
; Line 357
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _temp$77403[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 358
	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _compare$[ebp]
	push	ecx
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	?SortRefDown@?$CRecordVector@I@@SGXPAIIIP6GHPBI1PAX@Z2@Z ; CRecordVector<unsigned int>::SortRefDown
; Line 360
	cmp	DWORD PTR _size$[ebp], 1
	ja	SHORT $LN3@Sort
$LN8@Sort:
; Line 361
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Sort@?$CRecordVector@I@@QAEXP6GHPBI0PAX@Z1@Z ENDP	; CRecordVector<unsigned int>::Sort
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@6:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ PROC ; CMyComPtr<ISequentialOutStream>::Release, COMDAT
; _this$ = ecx
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Release@9
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
$LN2@Release@9:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ENDP ; CMyComPtr<ISequentialOutStream>::Release
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ PROC ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ENDP ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ PROC ; CMyComPtr<ISequentialOutStream>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ ENDP ; CMyComPtr<ISequentialOutStream>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ PROC ; CMyComPtr<ISequentialOutStream>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ENDP ; CMyComPtr<ISequentialOutStream>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z PROC ; CMyComPtr<ISequentialOutStream>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@5
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@5:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@5
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@5:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ENDP ; CMyComPtr<ISequentialOutStream>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lp$ = 8						; size = 4
??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@ABV0@@Z PROC ; CMyComPtr<ISequentialOutStream>::operator=, COMDAT
; _this$ = ecx
; Line 36
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _lp$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@ABV0@@Z ENDP ; CMyComPtr<ISequentialOutStream>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CBuffer@E@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CBuffer@E@@QAE@XZ PROC				; CBuffer<unsigned char>::CBuffer<unsigned char>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mybuffer.h
; Line 24
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CBuffer@E@@QAE@XZ ENDP				; CBuffer<unsigned char>::CBuffer<unsigned char>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CBuffer@E@@QAE@XZ
_TEXT	SEGMENT
$T80220 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CBuffer@E@@QAE@XZ PROC				; CBuffer<unsigned char>::~CBuffer<unsigned char>, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T80220[ebp], ecx
	mov	edx, DWORD PTR $T80220[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CBuffer@E@@QAE@XZ ENDP				; CBuffer<unsigned char>::~CBuffer<unsigned char>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CBuffer@E@@QAEPAEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CBuffer@E@@QAEPAEXZ PROC				; CBuffer<unsigned char>::operator unsigned char *, COMDAT
; _this$ = ecx
; Line 39
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CBuffer@E@@QAEPAEXZ ENDP				; CBuffer<unsigned char>::operator unsigned char *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CBuffer@E@@QBEPBEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CBuffer@E@@QBEPBEXZ PROC				; CBuffer<unsigned char>::operator unsigned char const *, COMDAT
; _this$ = ecx
; Line 40
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CBuffer@E@@QBEPBEXZ ENDP				; CBuffer<unsigned char>::operator unsigned char const *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CBuffer@E@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CBuffer@E@@QBEIXZ PROC				; CBuffer<unsigned char>::Size, COMDAT
; _this$ = ecx
; Line 41
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CBuffer@E@@QBEIXZ ENDP				; CBuffer<unsigned char>::Size
_TEXT	ENDS
PUBLIC	?Free@?$CBuffer@E@@QAEXXZ			; CBuffer<unsigned char>::Free
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Alloc@?$CBuffer@E@@QAEXI@Z
_TEXT	SEGMENT
$T80229 = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?Alloc@?$CBuffer@E@@QAEXI@Z PROC			; CBuffer<unsigned char>::Alloc, COMDAT
; _this$ = ecx
; Line 44
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 45
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	je	SHORT $LN3@Alloc
; Line 47
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Free@?$CBuffer@E@@QAEXXZ		; CBuffer<unsigned char>::Free
; Line 48
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN3@Alloc
; Line 50
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T80229[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T80229[ebp]
	mov	DWORD PTR [eax], ecx
; Line 51
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+4], eax
$LN3@Alloc:
; Line 54
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Alloc@?$CBuffer@E@@QAEXI@Z ENDP			; CBuffer<unsigned char>::Alloc
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Free@?$CBuffer@E@@QAEXXZ
_TEXT	SEGMENT
$T80232 = -8						; size = 4
_this$ = -4						; size = 4
?Free@?$CBuffer@E@@QAEXXZ PROC				; CBuffer<unsigned char>::Free, COMDAT
; _this$ = ecx
; Line 15
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 16
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@Free
; Line 18
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T80232[ebp], edx
	mov	eax, DWORD PTR $T80232[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 19
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
$LN1@Free:
; Line 21
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 22
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Free@?$CBuffer@E@@QAEXXZ ENDP				; CBuffer<unsigned char>::Free
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z PROC ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@CMyComPtr@7
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@7:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z ENDP ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ PROC	; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@8:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ENDP	; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ PROC ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ENDP ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ
_TEXT	SEGMENT
$T80241 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ PROC ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::~CRecordVector<NCoderMixer2::CCoderStreamsInfo>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T80241[ebp], ecx
	mov	edx, DWORD PTR $T80241[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ ENDP ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::~CRecordVector<NCoderMixer2::CCoderStreamsInfo>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ
_TEXT	SEGMENT
$T80244 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ PROC	; CRecordVector<NCoderMixer2::CBond>::~CRecordVector<NCoderMixer2::CBond>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T80244[ebp], ecx
	mov	edx, DWORD PTR $T80244[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ ENDP	; CRecordVector<NCoderMixer2::CBond>::~CRecordVector<NCoderMixer2::CBond>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@_K@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@_K@@QAE@XZ PROC			; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>, COMDAT
; _this$ = ecx
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@_K@@QAE@XZ ENDP			; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@_K@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@_K@@QBEIXZ PROC			; CRecordVector<unsigned __int64>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@_K@@QBEIXZ ENDP			; CRecordVector<unsigned __int64>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReserveDown@?$CRecordVector@_K@@QAEXXZ
_TEXT	SEGMENT
$T80252 = -16						; size = 4
$T80251 = -12						; size = 4
_p$ = -8						; size = 4
_this$ = -4						; size = 4
?ReserveDown@?$CRecordVector@_K@@QAEXXZ PROC		; CRecordVector<unsigned __int64>::ReserveDown, COMDAT
; _this$ = ecx
; Line 107
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 108
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN2@ReserveDow@2
; Line 109
	jmp	SHORT $LN3@ReserveDow@2
$LN2@ReserveDow@2:
; Line 110
	mov	DWORD PTR _p$[ebp], 0
; Line 111
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@ReserveDow@2
; Line 113
	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, 8
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T80251[ebp], eax
	mov	eax, DWORD PTR $T80251[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 114
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	shl	edx, 3
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveDow@2:
; Line 116
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T80252[ebp], ecx
	mov	edx, DWORD PTR $T80252[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 117
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 118
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx
$LN3@ReserveDow@2:
; Line 119
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveDown@?$CRecordVector@_K@@QAEXXZ ENDP		; CRecordVector<unsigned __int64>::ReserveDown
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@_K@@QAE@XZ
_TEXT	SEGMENT
$T80255 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@_K@@QAE@XZ PROC			; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T80255[ebp], ecx
	mov	edx, DWORD PTR $T80255[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@_K@@QAE@XZ ENDP			; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
_TEXT	ENDS
PUBLIC	?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ	; CRecordVector<unsigned __int64>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@_K@@QAEI_K@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 8
?Add@?$CRecordVector@_K@@QAEI_K@Z PROC			; CRecordVector<unsigned __int64>::Add, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ ; CRecordVector<unsigned __int64>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*8], edx
	mov	edx, DWORD PTR _item$[ebp+4]
	mov	DWORD PTR [eax+ecx*8+4], edx
; Line 201
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv72[ebp]
; Line 202
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Add@?$CRecordVector@_K@@QAEI_K@Z ENDP			; CRecordVector<unsigned __int64>::Add
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@_K@@QBEAB_KI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@_K@@QBEAB_KI@Z PROC			; CRecordVector<unsigned __int64>::operator[], COMDAT
; _this$ = ecx
; Line 227
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@_K@@QBEAB_KI@Z ENDP			; CRecordVector<unsigned __int64>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@_K@@QAEAA_KI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@_K@@QAEAA_KI@Z PROC			; CRecordVector<unsigned __int64>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@_K@@QAEAA_KI@Z ENDP			; CRecordVector<unsigned __int64>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@_N@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@_N@@QAE@XZ PROC			; CRecordVector<bool>::CRecordVector<bool>, COMDAT
; _this$ = ecx
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@_N@@QAE@XZ ENDP			; CRecordVector<bool>::CRecordVector<bool>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@_N@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@_N@@QBEIXZ PROC			; CRecordVector<bool>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@_N@@QBEIXZ ENDP			; CRecordVector<bool>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReserveDown@?$CRecordVector@_N@@QAEXXZ
_TEXT	SEGMENT
$T80269 = -16						; size = 4
$T80268 = -12						; size = 4
_p$ = -8						; size = 4
_this$ = -4						; size = 4
?ReserveDown@?$CRecordVector@_N@@QAEXXZ PROC		; CRecordVector<bool>::ReserveDown, COMDAT
; _this$ = ecx
; Line 107
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 108
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN2@ReserveDow@3
; Line 109
	jmp	SHORT $LN3@ReserveDow@3
$LN2@ReserveDow@3:
; Line 110
	mov	DWORD PTR _p$[ebp], 0
; Line 111
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@ReserveDow@3
; Line 113
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T80268[ebp], eax
	mov	eax, DWORD PTR $T80268[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 114
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveDow@3:
; Line 116
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T80269[ebp], ecx
	mov	edx, DWORD PTR $T80269[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 117
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 118
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx
$LN3@ReserveDow@3:
; Line 119
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveDown@?$CRecordVector@_N@@QAEXXZ ENDP		; CRecordVector<bool>::ReserveDown
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@_N@@QAE@XZ
_TEXT	SEGMENT
$T80272 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@_N@@QAE@XZ PROC			; CRecordVector<bool>::~CRecordVector<bool>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T80272[ebp], ecx
	mov	edx, DWORD PTR $T80272[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@_N@@QAE@XZ ENDP			; CRecordVector<bool>::~CRecordVector<bool>
_TEXT	ENDS
PUBLIC	?ReserveOnePosition@?$CRecordVector@_N@@AAEXXZ	; CRecordVector<bool>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@_N@@QAEI_N@Z
_TEXT	SEGMENT
tv71 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 1
?Add@?$CRecordVector@_N@@QAEI_N@Z PROC			; CRecordVector<bool>::Add, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@_N@@AAEXXZ ; CRecordVector<bool>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	dl, BYTE PTR _item$[ebp]
	mov	BYTE PTR [ecx+eax], dl
; Line 201
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv71[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv71[ebp]
; Line 202
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CRecordVector@_N@@QAEI_N@Z ENDP			; CRecordVector<bool>::Add
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@_N@@QBEAB_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@_N@@QBEAB_NI@Z PROC			; CRecordVector<bool>::operator[], COMDAT
; _this$ = ecx
; Line 227
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	add	eax, DWORD PTR _index$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@_N@@QBEAB_NI@Z ENDP			; CRecordVector<bool>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@_N@@QAEAA_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@_N@@QAEAA_NI@Z PROC			; CRecordVector<bool>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	add	eax, DWORD PTR _index$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@_N@@QAEAA_NI@Z ENDP			; CRecordVector<bool>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIUnknown@@@@QAE@XZ PROC			; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@9
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@9:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIUnknown@@@@QAE@XZ ENDP			; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ PROC	; CObjArray2<NArchive::N7z::CCoderInfo>::CObjArray2<NArchive::N7z::CCoderInfo>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mybuffer.h
; Line 176
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ ENDP	; CObjArray2<NArchive::N7z::CCoderInfo>::CObjArray2<NArchive::N7z::CCoderInfo>
_TEXT	ENDS
PUBLIC	??_ECCoderInfo@N7z@NArchive@@QAEPAXI@Z		; NArchive::N7z::CCoderInfo::`vector deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
tv68 = -16						; size = 4
$T80286 = -12						; size = 4
$T80285 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ PROC	; CObjArray2<NArchive::N7z::CCoderInfo>::~CObjArray2<NArchive::N7z::CCoderInfo>, COMDAT
; _this$ = ecx
; Line 203
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T80286[ebp], ecx
	mov	edx, DWORD PTR $T80286[ebp]
	mov	DWORD PTR $T80285[ebp], edx
	cmp	DWORD PTR $T80285[ebp], 0
	je	SHORT $LN3@CObjArray2
	push	3
	mov	ecx, DWORD PTR $T80285[ebp]
	call	??_ECCoderInfo@N7z@NArchive@@QAEPAXI@Z
	mov	DWORD PTR tv68[ebp], eax
	jmp	SHORT $LN1@CObjArray2
$LN3@CObjArray2:
	mov	DWORD PTR tv68[ebp], 0
$LN1@CObjArray2:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ ENDP	; CObjArray2<NArchive::N7z::CCoderInfo>::~CObjArray2<NArchive::N7z::CCoderInfo>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEPBUCCoderInfo@N7z@NArchive@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEPBUCCoderInfo@N7z@NArchive@@XZ PROC ; CObjArray2<NArchive::N7z::CCoderInfo>::operator NArchive::N7z::CCoderInfo const *, COMDAT
; _this$ = ecx
; Line 206
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEPBUCCoderInfo@N7z@NArchive@@XZ ENDP ; CObjArray2<NArchive::N7z::CCoderInfo>::operator NArchive::N7z::CCoderInfo const *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEIXZ PROC ; CObjArray2<NArchive::N7z::CCoderInfo>::Size, COMDAT
; _this$ = ecx
; Line 208
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEIXZ ENDP ; CObjArray2<NArchive::N7z::CCoderInfo>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ PROC	; CObjArray2<NArchive::N7z::CBond>::CObjArray2<NArchive::N7z::CBond>, COMDAT
; _this$ = ecx
; Line 176
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ ENDP	; CObjArray2<NArchive::N7z::CBond>::CObjArray2<NArchive::N7z::CBond>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
$T80297 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ PROC	; CObjArray2<NArchive::N7z::CBond>::~CObjArray2<NArchive::N7z::CBond>, COMDAT
; _this$ = ecx
; Line 203
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T80297[ebp], ecx
	mov	edx, DWORD PTR $T80297[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ ENDP	; CObjArray2<NArchive::N7z::CBond>::~CObjArray2<NArchive::N7z::CBond>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CObjArray2@I@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjArray2@I@@QAE@XZ PROC				; CObjArray2<unsigned int>::CObjArray2<unsigned int>, COMDAT
; _this$ = ecx
; Line 176
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjArray2@I@@QAE@XZ ENDP				; CObjArray2<unsigned int>::CObjArray2<unsigned int>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CObjArray2@I@@QAE@XZ
_TEXT	SEGMENT
$T80302 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CObjArray2@I@@QAE@XZ PROC				; CObjArray2<unsigned int>::~CObjArray2<unsigned int>, COMDAT
; _this$ = ecx
; Line 203
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T80302[ebp], ecx
	mov	edx, DWORD PTR $T80302[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CObjArray2@I@@QAE@XZ ENDP				; CObjArray2<unsigned int>::~CObjArray2<unsigned int>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CObjArray2@I@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjArray2@I@@QBEIXZ PROC			; CObjArray2<unsigned int>::Size, COMDAT
; _this$ = ecx
; Line 208
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjArray2@I@@QBEIXZ ENDP			; CObjArray2<unsigned int>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CObjArray@_K@@QBEPB_KXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CObjArray@_K@@QBEPB_KXZ PROC			; CObjArray<unsigned __int64>::operator unsigned __int64 const *, COMDAT
; _this$ = ecx
; Line 144
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CObjArray@_K@@QBEPB_KXZ ENDP			; CObjArray<unsigned __int64>::operator unsigned __int64 const *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CObjArray@I@@QAE@I@Z
_TEXT	SEGMENT
$T80309 = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
??0?$CObjArray@I@@QAE@I@Z PROC				; CObjArray<unsigned int>::CObjArray<unsigned int>, COMDAT
; _this$ = ecx
; Line 139
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN2@CObjArray
	xor	ecx, ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T80309[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T80309[ebp]
	mov	DWORD PTR [eax], ecx
$LN2@CObjArray:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CObjArray@I@@QAE@I@Z ENDP				; CObjArray<unsigned int>::CObjArray<unsigned int>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CObjArray@I@@QAE@XZ
_TEXT	SEGMENT
$T80312 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CObjArray@I@@QAE@XZ PROC				; CObjArray<unsigned int>::~CObjArray<unsigned int>, COMDAT
; _this$ = ecx
; Line 141
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T80312[ebp], ecx
	mov	edx, DWORD PTR $T80312[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CObjArray@I@@QAE@XZ ENDP				; CObjArray<unsigned int>::~CObjArray<unsigned int>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CObjArray@I@@QAEPAIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CObjArray@I@@QAEPAIXZ PROC				; CObjArray<unsigned int>::operator unsigned int *, COMDAT
; _this$ = ecx
; Line 143
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CObjArray@I@@QAEPAIXZ ENDP				; CObjArray<unsigned int>::operator unsigned int *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CObjArray@I@@QBEPBIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CObjArray@I@@QBEPBIXZ PROC				; CObjArray<unsigned int>::operator unsigned int const *, COMDAT
; _this$ = ecx
; Line 144
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CObjArray@I@@QBEPBIXZ ENDP				; CObjArray<unsigned int>::operator unsigned int const *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CObjArray@E@@QBEPBEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CObjArray@E@@QBEPBEXZ PROC				; CObjArray<unsigned char>::operator unsigned char const *, COMDAT
; _this$ = ecx
; Line 144
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CObjArray@E@@QBEPBEXZ ENDP				; CObjArray<unsigned char>::operator unsigned char const *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ PROC ; CRecordVector<NArchive::N7z::CFileItem>::Size, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ ENDP ; CRecordVector<NArchive::N7z::CFileItem>::Size
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ReserveDown@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ReserveDown@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXXZ$0
__ehfuncinfo$?ReserveDown@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ReserveDown@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?ReserveDown@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXXZ
_TEXT	SEGMENT
tv84 = -40						; size = 4
$T80328 = -36						; size = 4
$T80325 = -32						; size = 4
$T80324 = -28						; size = 4
$T80323 = -24						; size = 4
_p$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?ReserveDown@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXXZ PROC ; CRecordVector<NArchive::N7z::CFileItem>::ReserveDown, COMDAT
; _this$ = ecx
; Line 107
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ReserveDown@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 108
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN2@ReserveDow@4
; Line 109
	jmp	$LN3@ReserveDow@4
$LN2@ReserveDow@4:
; Line 110
	mov	DWORD PTR _p$[ebp], 0
; Line 111
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	$LN1@ReserveDow@4
; Line 113
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T80323[ebp], edx
	xor	ecx, ecx
	mov	eax, DWORD PTR $T80323[ebp]
	mov	edx, 24					; 00000018H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T80325[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T80325[ebp], 0
	je	SHORT $LN5@ReserveDow@4
	push	OFFSET ??0CFileItem@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFileItem::CFileItem
	mov	eax, DWORD PTR $T80323[ebp]
	push	eax
	push	24					; 00000018H
	mov	ecx, DWORD PTR $T80325[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T80325[ebp]
	mov	DWORD PTR tv84[ebp], edx
	jmp	SHORT $LN6@ReserveDow@4
$LN5@ReserveDow@4:
	mov	DWORD PTR tv84[ebp], 0
$LN6@ReserveDow@4:
	mov	eax, DWORD PTR tv84[ebp]
	mov	DWORD PTR $T80324[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T80324[ebp]
	mov	DWORD PTR _p$[ebp], ecx
; Line 114
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	imul	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveDow@4:
; Line 116
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T80328[ebp], edx
	mov	eax, DWORD PTR $T80328[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 117
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 118
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+8], edx
$LN3@ReserveDow@4:
; Line 119
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ReserveDown@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXXZ$0:
	mov	eax, DWORD PTR $T80325[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?ReserveDown@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ReserveDown@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?ReserveDown@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXXZ ENDP ; CRecordVector<NArchive::N7z::CFileItem>::ReserveDown
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEABUCFileItem@N7z@NArchive@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEABUCFileItem@N7z@NArchive@@I@Z PROC ; CRecordVector<NArchive::N7z::CFileItem>::operator[], COMDAT
; _this$ = ecx
; Line 227
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEABUCFileItem@N7z@NArchive@@I@Z ENDP ; CRecordVector<NArchive::N7z::CFileItem>::operator[]
_TEXT	ENDS
PUBLIC	??0?$CRecordVector@PAX@@QAE@XZ			; CRecordVector<void *>::CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CObjectVector@UCProp@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@UCProp@@@@QAE@XZ PROC		; CObjectVector<CProp>::CObjectVector<CProp>, COMDAT
; _this$ = ecx
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@UCProp@@@@QAE@XZ ENDP		; CObjectVector<CProp>::CObjectVector<CProp>
_TEXT	ENDS
PUBLIC	??1?$CRecordVector@PAX@@QAE@XZ			; CRecordVector<void *>::~CRecordVector<void *>
PUBLIC	??_GCProp@@QAEPAXI@Z				; CProp::`scalar deleting destructor'
PUBLIC	??A?$CRecordVector@PAX@@QAEAAPAXI@Z		; CRecordVector<void *>::operator[]
PUBLIC	?Size@?$CRecordVector@PAX@@QBEIXZ		; CRecordVector<void *>::Size
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@UCProp@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@UCProp@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@UCProp@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@UCProp@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T80344 = -28						; size = 4
$T80343 = -24						; size = 4
_i$77755 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@UCProp@@@@QAE@XZ PROC		; CObjectVector<CProp>::~CObjectVector<CProp>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$77755[ebp], eax
$LN2@CObjectVec:
	cmp	DWORD PTR _i$77755[ebp], 0
	je	SHORT $LN3@CObjectVec
; Line 489
	mov	eax, DWORD PTR _i$77755[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$77755[ebp], eax
	mov	ecx, DWORD PTR _i$77755[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T80344[ebp], edx
	mov	eax, DWORD PTR $T80344[ebp]
	mov	DWORD PTR $T80343[ebp], eax
	cmp	DWORD PTR $T80343[ebp], 0
	je	SHORT $LN5@CObjectVec
	push	1
	mov	ecx, DWORD PTR $T80343[ebp]
	call	??_GCProp@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec
$LN5@CObjectVec:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec:
	jmp	SHORT $LN2@CObjectVec
$LN3@CObjectVec:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@UCProp@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@UCProp@@@@QAE@XZ ENDP		; CObjectVector<CProp>::~CObjectVector<CProp>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Size@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBEIXZ PROC ; CObjectVector<NArchive::N7z::CMethodFull>::Size, COMDAT
; _this$ = ecx
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBEIXZ ENDP ; CObjectVector<NArchive::N7z::CMethodFull>::Size
_TEXT	ENDS
PUBLIC	?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z	; CRecordVector<void *>::AddInReserved
PUBLIC	??0CMethodFull@N7z@NArchive@@QAE@ABU012@@Z	; NArchive::N7z::CMethodFull::CMethodFull
PUBLIC	?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z	; CRecordVector<void *>::ConstructReserve
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@ABV0@@Z$1
__ehfuncinfo$??0?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@ABV0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
tv85 = -36						; size = 4
$T80359 = -32						; size = 4
$T80358 = -28						; size = 4
_i$77780 = -24						; size = 4
_size$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_v$ = 8							; size = 4
??0?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@ABV0@@Z PROC ; CObjectVector<NArchive::N7z::CMethodFull>::CObjectVector<NArchive::N7z::CMethodFull>, COMDAT
; _this$ = ecx
; Line 422
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@ABV0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 424
	mov	ecx, DWORD PTR _v$[ebp]
	call	?Size@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::N7z::CMethodFull>::Size
	mov	DWORD PTR _size$[ebp], eax
; Line 425
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z ; CRecordVector<void *>::ConstructReserve
; Line 426
	mov	DWORD PTR _i$77780[ebp], 0
	jmp	SHORT $LN3@CObjectVec@2
$LN2@CObjectVec@2:
	mov	ecx, DWORD PTR _i$77780[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$77780[ebp], ecx
$LN3@CObjectVec@2:
	mov	edx, DWORD PTR _i$77780[ebp]
	cmp	edx, DWORD PTR _size$[ebp]
	jae	SHORT $LN4@CObjectVec@2
; Line 427
	push	32					; 00000020H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T80359[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T80359[ebp], 0
	je	SHORT $LN6@CObjectVec@2
	mov	eax, DWORD PTR _i$77780[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	call	??A?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBEABUCMethodFull@N7z@NArchive@@I@Z ; CObjectVector<NArchive::N7z::CMethodFull>::operator[]
	push	eax
	mov	ecx, DWORD PTR $T80359[ebp]
	call	??0CMethodFull@N7z@NArchive@@QAE@ABU012@@Z
	mov	DWORD PTR tv85[ebp], eax
	jmp	SHORT $LN7@CObjectVec@2
$LN6@CObjectVec@2:
	mov	DWORD PTR tv85[ebp], 0
$LN7@CObjectVec@2:
	mov	ecx, DWORD PTR tv85[ebp]
	mov	DWORD PTR $T80358[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T80358[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ; CRecordVector<void *>::AddInReserved
	jmp	SHORT $LN2@CObjectVec@2
$LN4@CObjectVec@2:
; Line 428
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@ABV0@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__unwindfunclet$??0?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@ABV0@@Z$1:
	mov	eax, DWORD PTR $T80359[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??0?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@ABV0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@ABV0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@ABV0@@Z ENDP ; CObjectVector<NArchive::N7z::CMethodFull>::CObjectVector<NArchive::N7z::CMethodFull>
PUBLIC	??A?$CRecordVector@PAX@@QBEABQAXI@Z		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??A?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBEABUCMethodFull@N7z@NArchive@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBEABUCMethodFull@N7z@NArchive@@I@Z PROC ; CObjectVector<NArchive::N7z::CMethodFull>::operator[], COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBEABUCMethodFull@N7z@NArchive@@I@Z ENDP ; CObjectVector<NArchive::N7z::CMethodFull>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@I@Z PROC ; CObjectVector<NArchive::N7z::CMethodFull>::operator[], COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@I@Z ENDP ; CObjectVector<NArchive::N7z::CMethodFull>::operator[]
_TEXT	ENDS
PUBLIC	?Add@?$CRecordVector@PAX@@QAEIQAX@Z		; CRecordVector<void *>::Add
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Add@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEIABUCMethodFull@N7z@NArchive@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Add@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEIABUCMethodFull@N7z@NArchive@@@Z$0
__ehfuncinfo$?Add@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEIABUCMethodFull@N7z@NArchive@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Add@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEIABUCMethodFull@N7z@NArchive@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?Add@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEIABUCMethodFull@N7z@NArchive@@@Z
_TEXT	SEGMENT
tv74 = -28						; size = 4
$T80377 = -24						; size = 4
$T80376 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_item$ = 8						; size = 4
?Add@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEIABUCMethodFull@N7z@NArchive@@@Z PROC ; CObjectVector<NArchive::N7z::CMethodFull>::Add, COMDAT
; _this$ = ecx
; Line 459
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Add@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEIABUCMethodFull@N7z@NArchive@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	32					; 00000020H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T80377[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T80377[ebp], 0
	je	SHORT $LN3@Add
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T80377[ebp]
	call	??0CMethodFull@N7z@NArchive@@QAE@ABU012@@Z
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@Add
$LN3@Add:
	mov	DWORD PTR tv74[ebp], 0
$LN4@Add:
	mov	ecx, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T80376[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T80376[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Add@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEIABUCMethodFull@N7z@NArchive@@@Z$0:
	mov	eax, DWORD PTR $T80377[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Add@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEIABUCMethodFull@N7z@NArchive@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Add@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEIABUCMethodFull@N7z@NArchive@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Add@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEIABUCMethodFull@N7z@NArchive@@@Z ENDP ; CObjectVector<NArchive::N7z::CMethodFull>::Add
PUBLIC	?Insert@?$CRecordVector@PAX@@QAEXIQAX@Z		; CRecordVector<void *>::Insert
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?InsertNew@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?InsertNew@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@I@Z$0
__ehfuncinfo$?InsertNew@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?InsertNew@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?InsertNew@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@I@Z
_TEXT	SEGMENT
tv71 = -32						; size = 4
$T80390 = -28						; size = 4
$T80389 = -24						; size = 4
_p$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_index$ = 8						; size = 4
?InsertNew@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@I@Z PROC ; CObjectVector<NArchive::N7z::CMethodFull>::InsertNew, COMDAT
; _this$ = ecx
; Line 480
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?InsertNew@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@I@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 481
	push	32					; 00000020H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T80390[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T80390[ebp], 0
	je	SHORT $LN3@InsertNew
	mov	ecx, DWORD PTR $T80390[ebp]
	call	??0CMethodFull@N7z@NArchive@@QAE@XZ
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN4@InsertNew
$LN3@InsertNew:
	mov	DWORD PTR tv71[ebp], 0
$LN4@InsertNew:
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR $T80389[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T80389[ebp]
	mov	DWORD PTR _p$[ebp], ecx
; Line 482
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Insert@?$CRecordVector@PAX@@QAEXIQAX@Z	; CRecordVector<void *>::Insert
; Line 483
	mov	eax, DWORD PTR _p$[ebp]
; Line 484
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?InsertNew@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@I@Z$0:
	mov	eax, DWORD PTR $T80390[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?InsertNew@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@I@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?InsertNew@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@I@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?InsertNew@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAEAAUCMethodFull@N7z@NArchive@@I@Z ENDP ; CObjectVector<NArchive::N7z::CMethodFull>::InsertNew
PUBLIC	??_GCMethodFull@N7z@NArchive@@QAEPAXI@Z		; NArchive::N7z::CMethodFull::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T80403 = -28						; size = 4
$T80402 = -24						; size = 4
_i$77809 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ PROC ; CObjectVector<NArchive::N7z::CMethodFull>::~CObjectVector<NArchive::N7z::CMethodFull>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$77809[ebp], eax
$LN2@CObjectVec@3:
	cmp	DWORD PTR _i$77809[ebp], 0
	je	SHORT $LN3@CObjectVec@3
; Line 489
	mov	eax, DWORD PTR _i$77809[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$77809[ebp], eax
	mov	ecx, DWORD PTR _i$77809[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T80403[ebp], edx
	mov	eax, DWORD PTR $T80403[ebp]
	mov	DWORD PTR $T80402[ebp], eax
	cmp	DWORD PTR $T80402[ebp], 0
	je	SHORT $LN5@CObjectVec@3
	push	1
	mov	ecx, DWORD PTR $T80402[ebp]
	call	??_GCMethodFull@N7z@NArchive@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@3
$LN5@CObjectVec@3:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@3:
	jmp	SHORT $LN2@CObjectVec@3
$LN3@CObjectVec@3:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ ENDP ; CObjectVector<NArchive::N7z::CMethodFull>::~CObjectVector<NArchive::N7z::CMethodFull>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
$T80415 = -12						; size = 4
_size$ = -8						; size = 4
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??0?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@ABV0@@Z PROC ; CRecordVector<NArchive::N7z::CBond2>::CRecordVector<NArchive::N7z::CBond2>, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
; Line 38
	mov	ecx, DWORD PTR _v$[ebp]
	call	?Size@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CBond2>::Size
	mov	DWORD PTR _size$[ebp], eax
; Line 39
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN2@CRecordVec
; Line 41
	xor	ecx, ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, 12					; 0000000cH
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T80415[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T80415[ebp]
	mov	DWORD PTR [eax], ecx
; Line 42
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 43
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx+8], edx
; Line 44
	mov	eax, DWORD PTR _size$[ebp]
	imul	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN2@CRecordVec:
; Line 46
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@ABV0@@Z ENDP ; CRecordVector<NArchive::N7z::CBond2>::CRecordVector<NArchive::N7z::CBond2>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBEIXZ PROC ; CRecordVector<NArchive::N7z::CBond2>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBEIXZ ENDP ; CRecordVector<NArchive::N7z::CBond2>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsEmpty@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBE_NXZ PROC ; CRecordVector<NArchive::N7z::CBond2>::IsEmpty, COMDAT
; _this$ = ecx
; Line 49
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+4], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@?$CRecordVector@UCBond2@N7z@NArchive@@@@QBE_NXZ ENDP ; CRecordVector<NArchive::N7z::CBond2>::IsEmpty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
$T80422 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ PROC	; CRecordVector<NArchive::N7z::CBond2>::~CRecordVector<NArchive::N7z::CBond2>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T80422[ebp], ecx
	mov	edx, DWORD PTR $T80422[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ ENDP	; CRecordVector<NArchive::N7z::CBond2>::~CRecordVector<NArchive::N7z::CBond2>
_TEXT	ENDS
PUBLIC	?ReserveOnePosition@?$CRecordVector@UCBond2@N7z@NArchive@@@@AAEXXZ ; CRecordVector<NArchive::N7z::CBond2>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEIUCBond2@N7z@NArchive@@@Z
_TEXT	SEGMENT
tv72 = -20						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 12
?Add@?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEIUCBond2@N7z@NArchive@@@Z PROC ; CRecordVector<NArchive::N7z::CBond2>::Add, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@UCBond2@N7z@NArchive@@@@AAEXXZ ; CRecordVector<NArchive::N7z::CBond2>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _item$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _item$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
; Line 201
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR tv72[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR tv72[ebp]
; Line 202
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Add@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN5@Add@2:
	DD	1
	DD	$LN4@Add@2
$LN4@Add@2:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN3@Add@2
$LN3@Add@2:
	DB	95					; 0000005fH
	DB	36					; 00000024H
	DB	65					; 00000041H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	0
?Add@?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEIUCBond2@N7z@NArchive@@@Z ENDP ; CRecordVector<NArchive::N7z::CBond2>::Add
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@UCBond2@N7z@NArchive@@@@QBEABUCBond2@N7z@NArchive@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@UCBond2@N7z@NArchive@@@@QBEABUCBond2@N7z@NArchive@@I@Z PROC ; CRecordVector<NArchive::N7z::CBond2>::operator[], COMDAT
; _this$ = ecx
; Line 227
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@UCBond2@N7z@NArchive@@@@QBEABUCBond2@N7z@NArchive@@I@Z ENDP ; CRecordVector<NArchive::N7z::CBond2>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEAAUCBond2@N7z@NArchive@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEAAUCBond2@N7z@NArchive@@I@Z PROC ; CRecordVector<NArchive::N7z::CBond2>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEAAUCBond2@N7z@NArchive@@I@Z ENDP ; CRecordVector<NArchive::N7z::CBond2>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Back@?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEAAUCBond2@N7z@NArchive@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Back@?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEAAUCBond2@N7z@NArchive@@XZ PROC ; CRecordVector<NArchive::N7z::CBond2>::Back, COMDAT
; _this$ = ecx
; Line 232
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	sub	eax, 1
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	esp, ebp
	pop	ebp
	ret	0
?Back@?$CRecordVector@UCBond2@N7z@NArchive@@@@QAEAAUCBond2@N7z@NArchive@@XZ ENDP ; CRecordVector<NArchive::N7z::CBond2>::Back
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@XZ PROC	; CMyComPtr<IArchiveUpdateCallback>::CMyComPtr<IArchiveUpdateCallback>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@XZ ENDP	; CMyComPtr<IArchiveUpdateCallback>::CMyComPtr<IArchiveUpdateCallback>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@XZ PROC	; CMyComPtr<IArchiveUpdateCallback>::~CMyComPtr<IArchiveUpdateCallback>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@10
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@10:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@XZ ENDP	; CMyComPtr<IArchiveUpdateCallback>::~CMyComPtr<IArchiveUpdateCallback>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReserveDown@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ReserveDown@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEXXZ PROC ; CObjectVector<NArchive::N7z::CFolder>::ReserveDown, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 417
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveDown@?$CRecordVector@PAX@@QAEXXZ ; CRecordVector<void *>::ReserveDown
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveDown@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEXXZ ENDP ; CObjectVector<NArchive::N7z::CFolder>::ReserveDown
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AddNew@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEAAUCFolder@N7z@NArchive@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddNew@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEAAUCFolder@N7z@NArchive@@XZ$0
__ehfuncinfo$?AddNew@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEAAUCFolder@N7z@NArchive@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddNew@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEAAUCFolder@N7z@NArchive@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?AddNew@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEAAUCFolder@N7z@NArchive@@XZ
_TEXT	SEGMENT
tv71 = -32						; size = 4
$T80444 = -28						; size = 4
$T80443 = -24						; size = 4
_p$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?AddNew@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEAAUCFolder@N7z@NArchive@@XZ PROC ; CObjectVector<NArchive::N7z::CFolder>::AddNew, COMDAT
; _this$ = ecx
; Line 464
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddNew@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEAAUCFolder@N7z@NArchive@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 465
	push	24					; 00000018H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T80444[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T80444[ebp], 0
	je	SHORT $LN3@AddNew
	mov	ecx, DWORD PTR $T80444[ebp]
	call	??0CFolder@N7z@NArchive@@QAE@XZ		; NArchive::N7z::CFolder::CFolder
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN4@AddNew
$LN3@AddNew:
	mov	DWORD PTR tv71[ebp], 0
$LN4@AddNew:
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR $T80443[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T80443[ebp]
	mov	DWORD PTR _p$[ebp], ecx
; Line 466
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
; Line 467
	mov	eax, DWORD PTR _p$[ebp]
; Line 468
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddNew@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEAAUCFolder@N7z@NArchive@@XZ$0:
	mov	eax, DWORD PTR $T80444[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?AddNew@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEAAUCFolder@N7z@NArchive@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddNew@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEAAUCFolder@N7z@NArchive@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddNew@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEAAUCFolder@N7z@NArchive@@XZ ENDP ; CObjectVector<NArchive::N7z::CFolder>::AddNew
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ PROC ; CRecordVector<NArchive::N7z::CFilterMode2>::CRecordVector<NArchive::N7z::CFilterMode2>, COMDAT
; _this$ = ecx
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ENDP ; CRecordVector<NArchive::N7z::CFilterMode2>::CRecordVector<NArchive::N7z::CFilterMode2>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QBEIXZ PROC ; CRecordVector<NArchive::N7z::CFilterMode2>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QBEIXZ ENDP ; CRecordVector<NArchive::N7z::CFilterMode2>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
$T80460 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ PROC ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T80460[ebp], ecx
	mov	edx, DWORD PTR $T80460[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAE@XZ ENDP ; CRecordVector<NArchive::N7z::CFilterMode2>::~CRecordVector<NArchive::N7z::CFilterMode2>
_TEXT	ENDS
PUBLIC	?ReserveOnePosition@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@AAEXXZ ; CRecordVector<NArchive::N7z::CFilterMode2>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAEIUCFilterMode2@N7z@NArchive@@@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 16
?Add@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAEIUCFilterMode2@N7z@NArchive@@@Z PROC ; CRecordVector<NArchive::N7z::CFilterMode2>::Add, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@AAEXXZ ; CRecordVector<NArchive::N7z::CFilterMode2>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _item$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _item$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _item$[ebp+12]
	mov	DWORD PTR [eax+12], edx
; Line 201
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv72[ebp]
; Line 202
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Add@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAEIUCFilterMode2@N7z@NArchive@@@Z ENDP ; CRecordVector<NArchive::N7z::CFilterMode2>::Add
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAEAAUCFilterMode2@N7z@NArchive@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAEAAUCFilterMode2@N7z@NArchive@@I@Z PROC ; CRecordVector<NArchive::N7z::CFilterMode2>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAEAAUCFilterMode2@N7z@NArchive@@I@Z ENDP ; CRecordVector<NArchive::N7z::CFilterMode2>::operator[]
_TEXT	ENDS
PUBLIC	?SortRefDown2@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@SGXPAUCFilterMode2@N7z@NArchive@@II@Z ; CRecordVector<NArchive::N7z::CFilterMode2>::SortRefDown2
PUBLIC	?Front@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAEAAUCFilterMode2@N7z@NArchive@@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::Front
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Sort2@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAEXXZ
_TEXT	SEGMENT
_temp$77905 = -36					; size = 16
_i$77898 = -16						; size = 4
_p$ = -12						; size = 4
_size$ = -8						; size = 4
_this$ = -4						; size = 4
?Sort2@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAEXXZ PROC ; CRecordVector<NArchive::N7z::CFilterMode2>::Sort2, COMDAT
; _this$ = ecx
; Line 382
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 383
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _size$[ebp], ecx
; Line 384
	cmp	DWORD PTR _size$[ebp], 1
	ja	SHORT $LN7@Sort2
; Line 385
	jmp	$LN8@Sort2
$LN7@Sort2:
; Line 386
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Front@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAEAAUCFilterMode2@N7z@NArchive@@XZ ; CRecordVector<NArchive::N7z::CFilterMode2>::Front
	sub	eax, 16					; 00000010H
	mov	DWORD PTR _p$[ebp], eax
; Line 388
	mov	edx, DWORD PTR _size$[ebp]
	shr	edx, 1
	mov	DWORD PTR _i$77898[ebp], edx
$LN6@Sort2:
; Line 390
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$77898[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	?SortRefDown2@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@SGXPAUCFilterMode2@N7z@NArchive@@II@Z ; CRecordVector<NArchive::N7z::CFilterMode2>::SortRefDown2
; Line 391
	mov	eax, DWORD PTR _i$77898[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$77898[ebp], eax
	jne	SHORT $LN6@Sort2
$LN3@Sort2:
; Line 395
	mov	ecx, DWORD PTR _size$[ebp]
	shl	ecx, 4
	add	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _temp$77905[ebp], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _temp$77905[ebp+4], eax
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _temp$77905[ebp+8], edx
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _temp$77905[ebp+12], eax
; Line 396
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _size$[ebp]
	shl	edx, 4
	add	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _size$[ebp]
	sub	edx, 1
	mov	DWORD PTR _size$[ebp], edx
; Line 397
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _temp$77905[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$77905[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$77905[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _temp$77905[ebp+12]
	mov	DWORD PTR [eax+12], edx
; Line 398
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	?SortRefDown2@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@SGXPAUCFilterMode2@N7z@NArchive@@II@Z ; CRecordVector<NArchive::N7z::CFilterMode2>::SortRefDown2
; Line 400
	cmp	DWORD PTR _size$[ebp], 1
	ja	SHORT $LN3@Sort2
$LN8@Sort2:
; Line 401
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@Sort2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN12@Sort2:
	DD	1
	DD	$LN11@Sort2
$LN11@Sort2:
	DD	-36					; ffffffdcH
	DD	16					; 00000010H
	DD	$LN10@Sort2
$LN10@Sort2:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
?Sort2@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAEXXZ ENDP ; CRecordVector<NArchive::N7z::CFilterMode2>::Sort2
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@VCLimitedSequentialInStream@@@@QAE@PAVCLimitedSequentialInStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??0?$CMyComPtr@VCLimitedSequentialInStream@@@@QAE@PAVCLimitedSequentialInStream@@@Z PROC ; CMyComPtr<CLimitedSequentialInStream>::CMyComPtr<CLimitedSequentialInStream>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@CMyComPtr@11
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@11:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@VCLimitedSequentialInStream@@@@QAE@PAVCLimitedSequentialInStream@@@Z ENDP ; CMyComPtr<CLimitedSequentialInStream>::CMyComPtr<CLimitedSequentialInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@VCLimitedSequentialInStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@VCLimitedSequentialInStream@@@@QAE@XZ PROC ; CMyComPtr<CLimitedSequentialInStream>::~CMyComPtr<CLimitedSequentialInStream>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@12
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@12:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@VCLimitedSequentialInStream@@@@QAE@XZ ENDP ; CMyComPtr<CLimitedSequentialInStream>::~CMyComPtr<CLimitedSequentialInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@VCLimitedSequentialInStream@@@@QBEPAVCLimitedSequentialInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@VCLimitedSequentialInStream@@@@QBEPAVCLimitedSequentialInStream@@XZ PROC ; CMyComPtr<CLimitedSequentialInStream>::operator CLimitedSequentialInStream *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@VCLimitedSequentialInStream@@@@QBEPAVCLimitedSequentialInStream@@XZ ENDP ; CMyComPtr<CLimitedSequentialInStream>::operator CLimitedSequentialInStream *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QBEIXZ PROC ; CObjectVector<NArchive::N7z::CUpdateItem>::Size, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QBEIXZ ENDP ; CObjectVector<NArchive::N7z::CUpdateItem>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QBEABUCUpdateItem@N7z@NArchive@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QBEABUCUpdateItem@N7z@NArchive@@I@Z PROC ; CObjectVector<NArchive::N7z::CUpdateItem>::operator[], COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCUpdateItem@N7z@NArchive@@@@QBEABUCUpdateItem@N7z@NArchive@@I@Z ENDP ; CObjectVector<NArchive::N7z::CUpdateItem>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@UCFolderRepack@N7z@NArchive@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@UCFolderRepack@N7z@NArchive@@@@QBEIXZ PROC ; CRecordVector<NArchive::N7z::CFolderRepack>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@UCFolderRepack@N7z@NArchive@@@@QBEIXZ ENDP ; CRecordVector<NArchive::N7z::CFolderRepack>::Size
_TEXT	ENDS
PUBLIC	?ReserveOnePosition@?$CRecordVector@UCFolderRepack@N7z@NArchive@@@@AAEXXZ ; CRecordVector<NArchive::N7z::CFolderRepack>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@UCFolderRepack@N7z@NArchive@@@@QAEIUCFolderRepack@N7z@NArchive@@@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 8
?Add@?$CRecordVector@UCFolderRepack@N7z@NArchive@@@@QAEIUCFolderRepack@N7z@NArchive@@@Z PROC ; CRecordVector<NArchive::N7z::CFolderRepack>::Add, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@UCFolderRepack@N7z@NArchive@@@@AAEXXZ ; CRecordVector<NArchive::N7z::CFolderRepack>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*8], edx
	mov	edx, DWORD PTR _item$[ebp+4]
	mov	DWORD PTR [eax+ecx*8+4], edx
; Line 201
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv72[ebp]
; Line 202
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Add@?$CRecordVector@UCFolderRepack@N7z@NArchive@@@@QAEIUCFolderRepack@N7z@NArchive@@@Z ENDP ; CRecordVector<NArchive::N7z::CFolderRepack>::Add
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@UCFolderRepack@N7z@NArchive@@@@QBEABUCFolderRepack@N7z@NArchive@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@UCFolderRepack@N7z@NArchive@@@@QBEABUCFolderRepack@N7z@NArchive@@I@Z PROC ; CRecordVector<NArchive::N7z::CFolderRepack>::operator[], COMDAT
; _this$ = ecx
; Line 227
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@UCFolderRepack@N7z@NArchive@@@@QBEABUCFolderRepack@N7z@NArchive@@I@Z ENDP ; CRecordVector<NArchive::N7z::CFolderRepack>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ PROC ; CMyComPtr<IArchiveUpdateCallbackFile>::CMyComPtr<IArchiveUpdateCallbackFile>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ENDP ; CMyComPtr<IArchiveUpdateCallbackFile>::CMyComPtr<IArchiveUpdateCallbackFile>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ PROC ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@13
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@13:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAE@XZ ENDP ; CMyComPtr<IArchiveUpdateCallbackFile>::~CMyComPtr<IArchiveUpdateCallbackFile>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ PROC ; CMyComPtr<IArchiveUpdateCallbackFile>::operator IArchiveUpdateCallbackFile *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ ENDP ; CMyComPtr<IArchiveUpdateCallbackFile>::operator IArchiveUpdateCallbackFile *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAEPAPAUIArchiveUpdateCallbackFile@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAEPAPAUIArchiveUpdateCallbackFile@@XZ PROC ; CMyComPtr<IArchiveUpdateCallbackFile>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAEPAPAUIArchiveUpdateCallbackFile@@XZ ENDP ; CMyComPtr<IArchiveUpdateCallbackFile>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ PROC ; CMyComPtr<IArchiveUpdateCallbackFile>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBEPAUIArchiveUpdateCallbackFile@@XZ ENDP ; CMyComPtr<IArchiveUpdateCallbackFile>::operator->
_TEXT	ENDS
PUBLIC	??4?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAEPAUIArchiveUpdateCallbackFile@@PAU1@@Z ; CMyComPtr<IArchiveUpdateCallbackFile>::operator=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAEPAUIArchiveUpdateCallbackFile@@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lp$ = 8						; size = 4
??4?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAEPAUIArchiveUpdateCallbackFile@@ABV0@@Z PROC ; CMyComPtr<IArchiveUpdateCallbackFile>::operator=, COMDAT
; _this$ = ecx
; Line 36
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _lp$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAEPAUIArchiveUpdateCallbackFile@@PAU1@@Z ; CMyComPtr<IArchiveUpdateCallbackFile>::operator=
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAEPAUIArchiveUpdateCallbackFile@@ABV0@@Z ENDP ; CMyComPtr<IArchiveUpdateCallbackFile>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??7?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??7?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBE_NXZ PROC ; CMyComPtr<IArchiveUpdateCallbackFile>::operator!, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
??7?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QBE_NXZ ENDP ; CMyComPtr<IArchiveUpdateCallbackFile>::operator!
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ PROC ; CMyComPtr<IArchiveExtractCallbackMessage>::CMyComPtr<IArchiveExtractCallbackMessage>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ENDP ; CMyComPtr<IArchiveExtractCallbackMessage>::CMyComPtr<IArchiveExtractCallbackMessage>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ PROC ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@14
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@14:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAE@XZ ENDP ; CMyComPtr<IArchiveExtractCallbackMessage>::~CMyComPtr<IArchiveExtractCallbackMessage>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QBEPAUIArchiveExtractCallbackMessage@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QBEPAUIArchiveExtractCallbackMessage@@XZ PROC ; CMyComPtr<IArchiveExtractCallbackMessage>::operator IArchiveExtractCallbackMessage *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QBEPAUIArchiveExtractCallbackMessage@@XZ ENDP ; CMyComPtr<IArchiveExtractCallbackMessage>::operator IArchiveExtractCallbackMessage *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAEPAPAUIArchiveExtractCallbackMessage@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAEPAPAUIArchiveExtractCallbackMessage@@XZ PROC ; CMyComPtr<IArchiveExtractCallbackMessage>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAEPAPAUIArchiveExtractCallbackMessage@@XZ ENDP ; CMyComPtr<IArchiveExtractCallbackMessage>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QBEPAUIArchiveExtractCallbackMessage@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QBEPAUIArchiveExtractCallbackMessage@@XZ PROC ; CMyComPtr<IArchiveExtractCallbackMessage>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QBEPAUIArchiveExtractCallbackMessage@@XZ ENDP ; CMyComPtr<IArchiveExtractCallbackMessage>::operator->
_TEXT	ENDS
PUBLIC	??4?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAEPAUIArchiveExtractCallbackMessage@@PAU1@@Z ; CMyComPtr<IArchiveExtractCallbackMessage>::operator=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAEPAUIArchiveExtractCallbackMessage@@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lp$ = 8						; size = 4
??4?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAEPAUIArchiveExtractCallbackMessage@@ABV0@@Z PROC ; CMyComPtr<IArchiveExtractCallbackMessage>::operator=, COMDAT
; _this$ = ecx
; Line 36
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _lp$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAEPAUIArchiveExtractCallbackMessage@@PAU1@@Z ; CMyComPtr<IArchiveExtractCallbackMessage>::operator=
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAEPAUIArchiveExtractCallbackMessage@@ABV0@@Z ENDP ; CMyComPtr<IArchiveExtractCallbackMessage>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ PROC	; CMyComPtr<ICryptoGetTextPassword>::CMyComPtr<ICryptoGetTextPassword>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ENDP	; CMyComPtr<ICryptoGetTextPassword>::CMyComPtr<ICryptoGetTextPassword>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ PROC	; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@15
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@15:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICryptoGetTextPassword@@@@QAE@XZ ENDP	; CMyComPtr<ICryptoGetTextPassword>::~CMyComPtr<ICryptoGetTextPassword>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ PROC ; CMyComPtr<ICryptoGetTextPassword>::operator ICryptoGetTextPassword *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UICryptoGetTextPassword@@@@QBEPAUICryptoGetTextPassword@@XZ ENDP ; CMyComPtr<ICryptoGetTextPassword>::operator ICryptoGetTextPassword *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UICryptoGetTextPassword@@@@QAEPAUICryptoGetTextPassword@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UICryptoGetTextPassword@@@@QAEPAUICryptoGetTextPassword@@PAU1@@Z PROC ; CMyComPtr<ICryptoGetTextPassword>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@6
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@6:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@6
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@6:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UICryptoGetTextPassword@@@@QAEPAUICryptoGetTextPassword@@PAU1@@Z ENDP ; CMyComPtr<ICryptoGetTextPassword>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CObjArray@H@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjArray@H@@QAE@XZ PROC				; CObjArray<int>::CObjArray<int>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mybuffer.h
; Line 140
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjArray@H@@QAE@XZ ENDP				; CObjArray<int>::CObjArray<int>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CObjArray@H@@QAE@XZ
_TEXT	SEGMENT
$T80524 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CObjArray@H@@QAE@XZ PROC				; CObjArray<int>::~CObjArray<int>, COMDAT
; _this$ = ecx
; Line 141
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T80524[ebp], ecx
	mov	edx, DWORD PTR $T80524[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CObjArray@H@@QAE@XZ ENDP				; CObjArray<int>::~CObjArray<int>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CObjArray@H@@QAEPAHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CObjArray@H@@QAEPAHXZ PROC				; CObjArray<int>::operator int *, COMDAT
; _this$ = ecx
; Line 143
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CObjArray@H@@QAEPAHXZ ENDP				; CObjArray<int>::operator int *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Alloc@?$CObjArray@H@@QAEXI@Z
_TEXT	SEGMENT
$T80530 = -12						; size = 4
$T80529 = -8						; size = 4
_this$ = -4						; size = 4
_newSize$ = 8						; size = 4
?Alloc@?$CObjArray@H@@QAEXI@Z PROC			; CObjArray<int>::Alloc, COMDAT
; _this$ = ecx
; Line 147
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 148
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T80529[ebp], ecx
	mov	edx, DWORD PTR $T80529[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 149
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
; Line 150
	xor	ecx, ecx
	mov	eax, DWORD PTR _newSize$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T80530[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T80530[ebp]
	mov	DWORD PTR [eax], ecx
; Line 151
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Alloc@?$CObjArray@H@@QAEXI@Z ENDP			; CObjArray<int>::Alloc
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QBEIXZ PROC ; CObjectVector<NArchive::N7z::CSolidGroup>::Size, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QBEIXZ ENDP ; CObjectVector<NArchive::N7z::CSolidGroup>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ PROC ; CObjectVector<NArchive::N7z::CSolidGroup>::CObjectVector<NArchive::N7z::CSolidGroup>, COMDAT
; _this$ = ecx
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ENDP ; CObjectVector<NArchive::N7z::CSolidGroup>::CObjectVector<NArchive::N7z::CSolidGroup>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAEAAUCSolidGroup@N7z@NArchive@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAEAAUCSolidGroup@N7z@NArchive@@I@Z PROC ; CObjectVector<NArchive::N7z::CSolidGroup>::operator[], COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAEAAUCSolidGroup@N7z@NArchive@@I@Z ENDP ; CObjectVector<NArchive::N7z::CSolidGroup>::operator[]
_TEXT	ENDS
PUBLIC	??0CSolidGroup@N7z@NArchive@@QAE@XZ		; NArchive::N7z::CSolidGroup::CSolidGroup
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AddNew@?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAEAAUCSolidGroup@N7z@NArchive@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddNew@?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAEAAUCSolidGroup@N7z@NArchive@@XZ$0
__ehfuncinfo$?AddNew@?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAEAAUCSolidGroup@N7z@NArchive@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddNew@?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAEAAUCSolidGroup@N7z@NArchive@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?AddNew@?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAEAAUCSolidGroup@N7z@NArchive@@XZ
_TEXT	SEGMENT
tv71 = -32						; size = 4
$T80541 = -28						; size = 4
$T80540 = -24						; size = 4
_p$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?AddNew@?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAEAAUCSolidGroup@N7z@NArchive@@XZ PROC ; CObjectVector<NArchive::N7z::CSolidGroup>::AddNew, COMDAT
; _this$ = ecx
; Line 464
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddNew@?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAEAAUCSolidGroup@N7z@NArchive@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 465
	push	24					; 00000018H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T80541[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T80541[ebp], 0
	je	SHORT $LN3@AddNew@2
	mov	ecx, DWORD PTR $T80541[ebp]
	call	??0CSolidGroup@N7z@NArchive@@QAE@XZ
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN4@AddNew@2
$LN3@AddNew@2:
	mov	DWORD PTR tv71[ebp], 0
$LN4@AddNew@2:
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR $T80540[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T80540[ebp]
	mov	DWORD PTR _p$[ebp], ecx
; Line 466
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
; Line 467
	mov	eax, DWORD PTR _p$[ebp]
; Line 468
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddNew@?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAEAAUCSolidGroup@N7z@NArchive@@XZ$0:
	mov	eax, DWORD PTR $T80541[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?AddNew@?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAEAAUCSolidGroup@N7z@NArchive@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddNew@?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAEAAUCSolidGroup@N7z@NArchive@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddNew@?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAEAAUCSolidGroup@N7z@NArchive@@XZ ENDP ; CObjectVector<NArchive::N7z::CSolidGroup>::AddNew
PUBLIC	??_GCSolidGroup@N7z@NArchive@@QAEPAXI@Z		; NArchive::N7z::CSolidGroup::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T80554 = -28						; size = 4
$T80553 = -24						; size = 4
_i$77996 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ PROC ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$77996[ebp], eax
$LN2@CObjectVec@4:
	cmp	DWORD PTR _i$77996[ebp], 0
	je	SHORT $LN3@CObjectVec@4
; Line 489
	mov	eax, DWORD PTR _i$77996[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$77996[ebp], eax
	mov	ecx, DWORD PTR _i$77996[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T80554[ebp], edx
	mov	eax, DWORD PTR $T80554[ebp]
	mov	DWORD PTR $T80553[ebp], eax
	cmp	DWORD PTR $T80553[ebp], 0
	je	SHORT $LN5@CObjectVec@4
	push	1
	mov	ecx, DWORD PTR $T80553[ebp]
	call	??_GCSolidGroup@N7z@NArchive@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@4
$LN5@CObjectVec@4:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@4:
	jmp	SHORT $LN2@CObjectVec@4
$LN3@CObjectVec@4:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@UCSolidGroup@N7z@NArchive@@@@QAE@XZ ENDP ; CObjectVector<NArchive::N7z::CSolidGroup>::~CObjectVector<NArchive::N7z::CSolidGroup>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAE@XZ PROC ; CRecordVector<NArchive::N7z::CRefItem>::CRecordVector<NArchive::N7z::CRefItem>, COMDAT
; _this$ = ecx
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAE@XZ ENDP ; CRecordVector<NArchive::N7z::CRefItem>::CRecordVector<NArchive::N7z::CRefItem>
_TEXT	ENDS
PUBLIC	?ClearAndReserve@?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEXI@Z ; CRecordVector<NArchive::N7z::CRefItem>::ClearAndReserve
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ClearAndSetSize@?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newSize$ = 8						; size = 4
?ClearAndSetSize@?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEXI@Z PROC ; CRecordVector<NArchive::N7z::CRefItem>::ClearAndSetSize, COMDAT
; _this$ = ecx
; Line 87
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 88
	mov	eax, DWORD PTR _newSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearAndReserve@?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEXI@Z ; CRecordVector<NArchive::N7z::CRefItem>::ClearAndReserve
; Line 89
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _newSize$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 90
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearAndSetSize@?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEXI@Z ENDP ; CRecordVector<NArchive::N7z::CRefItem>::ClearAndSetSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
$T80570 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAE@XZ PROC ; CRecordVector<NArchive::N7z::CRefItem>::~CRecordVector<NArchive::N7z::CRefItem>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T80570[ebp], ecx
	mov	edx, DWORD PTR $T80570[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAE@XZ ENDP ; CRecordVector<NArchive::N7z::CRefItem>::~CRecordVector<NArchive::N7z::CRefItem>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEAAUCRefItem@N7z@NArchive@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEAAUCRefItem@N7z@NArchive@@I@Z PROC ; CRecordVector<NArchive::N7z::CRefItem>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	imul	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEAAUCRefItem@N7z@NArchive@@I@Z ENDP ; CRecordVector<NArchive::N7z::CRefItem>::operator[]
_TEXT	ENDS
PUBLIC	?SortRefDown@?$CRecordVector@UCRefItem@N7z@NArchive@@@@SGXPAUCRefItem@N7z@NArchive@@IIP6GHPBU234@1PAX@Z2@Z ; CRecordVector<NArchive::N7z::CRefItem>::SortRefDown
PUBLIC	?Front@?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEAAUCRefItem@N7z@NArchive@@XZ ; CRecordVector<NArchive::N7z::CRefItem>::Front
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Sort@?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEXP6GHPBUCRefItem@N7z@NArchive@@0PAX@Z1@Z
_TEXT	SEGMENT
_temp$78024 = -40					; size = 20
_i$78017 = -16						; size = 4
_p$ = -12						; size = 4
_size$ = -8						; size = 4
_this$ = -4						; size = 4
_compare$ = 8						; size = 4
_param$ = 12						; size = 4
?Sort@?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEXP6GHPBUCRefItem@N7z@NArchive@@0PAX@Z1@Z PROC ; CRecordVector<NArchive::N7z::CRefItem>::Sort, COMDAT
; _this$ = ecx
; Line 342
	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 343
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _size$[ebp], ecx
; Line 344
	cmp	DWORD PTR _size$[ebp], 1
	ja	SHORT $LN7@Sort@2
; Line 345
	jmp	$LN8@Sort@2
$LN7@Sort@2:
; Line 346
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Front@?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEAAUCRefItem@N7z@NArchive@@XZ ; CRecordVector<NArchive::N7z::CRefItem>::Front
	sub	eax, 20					; 00000014H
	mov	DWORD PTR _p$[ebp], eax
; Line 348
	mov	edx, DWORD PTR _size$[ebp]
	shr	edx, 1
	mov	DWORD PTR _i$78017[ebp], edx
$LN6@Sort@2:
; Line 350
	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _compare$[ebp]
	push	ecx
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$78017[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	?SortRefDown@?$CRecordVector@UCRefItem@N7z@NArchive@@@@SGXPAUCRefItem@N7z@NArchive@@IIP6GHPBU234@1PAX@Z2@Z ; CRecordVector<NArchive::N7z::CRefItem>::SortRefDown
; Line 351
	mov	edx, DWORD PTR _i$78017[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$78017[ebp], edx
	jne	SHORT $LN6@Sort@2
$LN3@Sort@2:
; Line 355
	mov	eax, DWORD PTR _size$[ebp]
	imul	eax, 20					; 00000014H
	add	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _temp$78024[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _temp$78024[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _temp$78024[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _temp$78024[ebp+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR _temp$78024[ebp+16], eax
; Line 356
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 20					; 00000014H
	mov	edx, DWORD PTR _size$[ebp]
	imul	edx, 20					; 00000014H
	add	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], eax
	mov	ecx, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+16], ecx
	mov	edx, DWORD PTR _size$[ebp]
	sub	edx, 1
	mov	DWORD PTR _size$[ebp], edx
; Line 357
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _temp$78024[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$78024[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$78024[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _temp$78024[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR _temp$78024[ebp+16]
	mov	DWORD PTR [eax+16], ecx
; Line 358
	mov	edx, DWORD PTR _param$[ebp]
	push	edx
	mov	eax, DWORD PTR _compare$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	?SortRefDown@?$CRecordVector@UCRefItem@N7z@NArchive@@@@SGXPAUCRefItem@N7z@NArchive@@IIP6GHPBU234@1PAX@Z2@Z ; CRecordVector<NArchive::N7z::CRefItem>::SortRefDown
; Line 360
	cmp	DWORD PTR _size$[ebp], 1
	ja	$LN3@Sort@2
$LN8@Sort@2:
; Line 361
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@Sort@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN12@Sort@2:
	DD	1
	DD	$LN11@Sort@2
$LN11@Sort@2:
	DD	-40					; ffffffd8H
	DD	20					; 00000014H
	DD	$LN10@Sort@2
$LN10@Sort@2:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
?Sort@?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEXP6GHPBUCRefItem@N7z@NArchive@@0PAX@Z1@Z ENDP ; CRecordVector<NArchive::N7z::CRefItem>::Sort
_TEXT	ENDS
PUBLIC	??1CCoderInfo@N7z@NArchive@@QAE@XZ		; NArchive::N7z::CCoderInfo::~CCoderInfo
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_ECCoderInfo@N7z@NArchive@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_ECCoderInfo@N7z@NArchive@@QAEPAXI@Z PROC		; NArchive::N7z::CCoderInfo::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1CCoderInfo@N7z@NArchive@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CCoderInfo@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_ECCoderInfo@N7z@NArchive@@QAEPAXI@Z ENDP		; NArchive::N7z::CCoderInfo::`vector deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	push	esi
$LN2@vector@2:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector@2
	mov	esi, esp
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR ___t$[ebp]
	add	ecx, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], ecx
	jmp	SHORT $LN2@vector@2
$LN3@vector@2:
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??1CProp@@QAE@XZ				; CProp::~CProp
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCProp@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCProp@@QAEPAXI@Z PROC				; CProp::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CProp@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@8
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@8:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCProp@@QAEPAXI@Z ENDP				; CProp::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0CMethodProps@@QAE@ABV0@@Z			; CMethodProps::CMethodProps
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CMethodFull@N7z@NArchive@@QAE@ABU012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CMethodFull@N7z@NArchive@@QAE@ABU012@@Z PROC		; NArchive::N7z::CMethodFull::CMethodFull, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CMethodProps@@QAE@ABV0@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax
	mov	edx, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+20], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CMethodFull@N7z@NArchive@@QAE@ABU012@@Z ENDP		; NArchive::N7z::CMethodFull::CMethodFull
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??_GCMethodFull@N7z@NArchive@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCMethodFull@N7z@NArchive@@QAEPAXI@Z PROC		; NArchive::N7z::CMethodFull::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CMethodFull@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@9
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@9:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCMethodFull@N7z@NArchive@@QAEPAXI@Z ENDP		; NArchive::N7z::CMethodFull::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0?$CRecordVector@UCFolderRepack@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFolderRepack>::CRecordVector<NArchive::N7z::CFolderRepack>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CSolidGroup@N7z@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CSolidGroup@N7z@NArchive@@QAE@XZ$0
__ehfuncinfo$??0CSolidGroup@N7z@NArchive@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CSolidGroup@N7z@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CSolidGroup@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CSolidGroup@N7z@NArchive@@QAE@XZ PROC		; NArchive::N7z::CSolidGroup::CSolidGroup, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CSolidGroup@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::CRecordVector<unsigned int>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0?$CRecordVector@UCFolderRepack@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFolderRepack>::CRecordVector<NArchive::N7z::CFolderRepack>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CSolidGroup@N7z@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
__ehhandler$??0CSolidGroup@N7z@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CSolidGroup@N7z@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CSolidGroup@N7z@NArchive@@QAE@XZ ENDP		; NArchive::N7z::CSolidGroup::CSolidGroup
PUBLIC	??1CSolidGroup@N7z@NArchive@@QAE@XZ		; NArchive::N7z::CSolidGroup::~CSolidGroup
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCSolidGroup@N7z@NArchive@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCSolidGroup@N7z@NArchive@@QAEPAXI@Z PROC		; NArchive::N7z::CSolidGroup::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CSolidGroup@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@10
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@10:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCSolidGroup@N7z@NArchive@@QAEPAXI@Z ENDP		; NArchive::N7z::CSolidGroup::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CCoderInfo@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CCoderInfo@N7z@NArchive@@QAE@XZ PROC			; NArchive::N7z::CCoderInfo::~CCoderInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CCoderInfo@N7z@NArchive@@QAE@XZ ENDP			; NArchive::N7z::CCoderInfo::~CCoderInfo
_TEXT	ENDS
PUBLIC	??1CPropVariant@NCOM@NWindows@@QAE@XZ		; NWindows::NCOM::CPropVariant::~CPropVariant
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CProp@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CProp@@QAE@XZ PROC					; CProp::~CProp, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CProp@@QAE@XZ ENDP					; CProp::~CProp
_TEXT	ENDS
EXTRN	?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ:PROC	; NWindows::NCOM::CPropVariant::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CPropVariant@NCOM@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CPropVariant@NCOM@NWindows@@QAE@XZ PROC		; NWindows::NCOM::CPropVariant::~CPropVariant, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\propvariant.h
; Line 56
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ ; NWindows::NCOM::CPropVariant::Clear
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CPropVariant@NCOM@NWindows@@QAE@XZ ENDP		; NWindows::NCOM::CPropVariant::~CPropVariant
_TEXT	ENDS
PUBLIC	??0CProps@@QAE@ABU0@@Z				; CProps::CProps
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CMethodProps@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CMethodProps@@QAE@ABV0@@Z PROC			; CMethodProps::CMethodProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CProps@@QAE@ABU0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CMethodProps@@QAE@ABV0@@Z ENDP			; CMethodProps::CMethodProps
_TEXT	ENDS
PUBLIC	??1?$CRecordVector@UCFolderRepack@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFolderRepack>::~CRecordVector<NArchive::N7z::CFolderRepack>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CSolidGroup@N7z@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CSolidGroup@N7z@NArchive@@QAE@XZ$0
__ehfuncinfo$??1CSolidGroup@N7z@NArchive@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CSolidGroup@N7z@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CSolidGroup@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CSolidGroup@N7z@NArchive@@QAE@XZ PROC		; NArchive::N7z::CSolidGroup::~CSolidGroup, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CSolidGroup@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1?$CRecordVector@UCFolderRepack@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CFolderRepack>::~CRecordVector<NArchive::N7z::CFolderRepack>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CSolidGroup@N7z@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
__ehhandler$??1CSolidGroup@N7z@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CSolidGroup@N7z@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CSolidGroup@N7z@NArchive@@QAE@XZ ENDP		; NArchive::N7z::CSolidGroup::~CSolidGroup
PUBLIC	??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z	; CObjectVector<CProp>::CObjectVector<CProp>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CProps@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CProps@@QAE@ABU0@@Z PROC				; CProps::CProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z ; CObjectVector<CProp>::CObjectVector<CProp>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CProps@@QAE@ABU0@@Z ENDP				; CProps::CProps
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@PAX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@PAX@@QAE@XZ PROC			; CRecordVector<void *>::CRecordVector<void *>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@PAX@@QAE@XZ ENDP			; CRecordVector<void *>::CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@PAX@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@PAX@@QBEIXZ PROC			; CRecordVector<void *>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@PAX@@QBEIXZ ENDP			; CRecordVector<void *>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z
_TEXT	SEGMENT
$T80630 = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z PROC	; CRecordVector<void *>::ConstructReserve, COMDAT
; _this$ = ecx
; Line 52
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 53
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN2@ConstructR
; Line 55
	xor	ecx, ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T80630[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T80630[ebp]
	mov	DWORD PTR [eax], ecx
; Line 56
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@ConstructR:
; Line 58
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z ENDP	; CRecordVector<void *>::ConstructReserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReserveDown@?$CRecordVector@PAX@@QAEXXZ
_TEXT	SEGMENT
$T80634 = -16						; size = 4
$T80633 = -12						; size = 4
_p$ = -8						; size = 4
_this$ = -4						; size = 4
?ReserveDown@?$CRecordVector@PAX@@QAEXXZ PROC		; CRecordVector<void *>::ReserveDown, COMDAT
; _this$ = ecx
; Line 107
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 108
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN2@ReserveDow@5
; Line 109
	jmp	SHORT $LN3@ReserveDow@5
$LN2@ReserveDow@5:
; Line 110
	mov	DWORD PTR _p$[ebp], 0
; Line 111
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@ReserveDow@5
; Line 113
	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T80633[ebp], eax
	mov	eax, DWORD PTR $T80633[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 114
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveDow@5:
; Line 116
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T80634[ebp], ecx
	mov	edx, DWORD PTR $T80634[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 117
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 118
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx
$LN3@ReserveDow@5:
; Line 119
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveDown@?$CRecordVector@PAX@@QAEXXZ ENDP		; CRecordVector<void *>::ReserveDown
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@PAX@@QAE@XZ
_TEXT	SEGMENT
$T80637 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@PAX@@QAE@XZ PROC			; CRecordVector<void *>::~CRecordVector<void *>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T80637[ebp], ecx
	mov	edx, DWORD PTR $T80637[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@PAX@@QAE@XZ ENDP			; CRecordVector<void *>::~CRecordVector<void *>
_TEXT	ENDS
PUBLIC	?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ	; CRecordVector<void *>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@PAX@@QAEIQAX@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?Add@?$CRecordVector@PAX@@QAEIQAX@Z PROC		; CRecordVector<void *>::Add, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ; CRecordVector<void *>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 201
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv72[ebp]
; Line 202
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CRecordVector@PAX@@QAEIQAX@Z ENDP		; CRecordVector<void *>::Add
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z PROC	; CRecordVector<void *>::AddInReserved, COMDAT
; _this$ = ecx
; Line 205
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 206
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 207
	mov	esp, ebp
	pop	ebp
	ret	4
?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ENDP	; CRecordVector<void *>::AddInReserved
_TEXT	ENDS
PUBLIC	?MoveItems@?$CRecordVector@PAX@@AAEXII@Z	; CRecordVector<void *>::MoveItems
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Insert@?$CRecordVector@PAX@@QAEXIQAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
_item$ = 12						; size = 4
?Insert@?$CRecordVector@PAX@@QAEXIQAX@Z PROC		; CRecordVector<void *>::Insert, COMDAT
; _this$ = ecx
; Line 210
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 211
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ; CRecordVector<void *>::ReserveOnePosition
; Line 212
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MoveItems@?$CRecordVector@PAX@@AAEXII@Z ; CRecordVector<void *>::MoveItems
; Line 213
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 214
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 215
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Insert@?$CRecordVector@PAX@@QAEXIQAX@Z ENDP		; CRecordVector<void *>::Insert
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@PAX@@QBEABQAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@PAX@@QBEABQAXI@Z PROC		; CRecordVector<void *>::operator[], COMDAT
; _this$ = ecx
; Line 227
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@PAX@@QBEABQAXI@Z ENDP		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@PAX@@QAEAAPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@PAX@@QAEAAPAXI@Z PROC		; CRecordVector<void *>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@PAX@@QAEAAPAXI@Z ENDP		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ
_TEXT	SEGMENT
$T80651 = -20						; size = 4
$T80650 = -16						; size = 4
_p$78162 = -12						; size = 4
_newCapacity$78161 = -8					; size = 4
_this$ = -4						; size = 4
?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ PROC	; CRecordVector<unsigned int>::ReserveOnePosition, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@ReserveOne
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$78161[ebp], ecx
; Line 23
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$78161[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T80650[ebp], eax
	mov	eax, DWORD PTR $T80650[ebp]
	mov	DWORD PTR _p$78162[ebp], eax
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@ReserveOne
; Line 25
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$78162[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne:
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T80651[ebp], edx
	mov	eax, DWORD PTR $T80651[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$78162[ebp]
	mov	DWORD PTR [ecx], edx
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$78161[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ReserveOne:
; Line 30
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ ENDP	; CRecordVector<unsigned int>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Front@?$CRecordVector@I@@QAEAAIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Front@?$CRecordVector@I@@QAEAAIXZ PROC			; CRecordVector<unsigned int>::Front, COMDAT
; _this$ = ecx
; Line 230
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
?Front@?$CRecordVector@I@@QAEAAIXZ ENDP			; CRecordVector<unsigned int>::Front
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SortRefDown@?$CRecordVector@I@@SGXPAIIIP6GHPBI1PAX@Z2@Z
_TEXT	SEGMENT
_s$78182 = -16						; size = 4
_temp$ = -8						; size = 4
_p$ = 8							; size = 4
_k$ = 12						; size = 4
_size$ = 16						; size = 4
_compare$ = 20						; size = 4
_param$ = 24						; size = 4
?SortRefDown@?$CRecordVector@I@@SGXPAIIIP6GHPBI1PAX@Z2@Z PROC ; CRecordVector<unsigned int>::SortRefDown, COMDAT
; Line 324
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 325
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _temp$[ebp], edx
$LN5@SortRefDow:
; Line 328
	mov	eax, DWORD PTR _k$[ebp]
	shl	eax, 1
	mov	DWORD PTR _s$78182[ebp], eax
; Line 329
	mov	ecx, DWORD PTR _s$78182[ebp]
	cmp	ecx, DWORD PTR _size$[ebp]
	jbe	SHORT $LN3@SortRefDow
; Line 330
	jmp	SHORT $LN4@SortRefDow
$LN3@SortRefDow:
; Line 331
	mov	edx, DWORD PTR _s$78182[ebp]
	cmp	edx, DWORD PTR _size$[ebp]
	jae	SHORT $LN2@SortRefDow
	mov	esi, esp
	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$78182[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR _s$78182[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4+4]
	push	eax
	call	DWORD PTR _compare$[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jle	SHORT $LN2@SortRefDow
; Line 332
	mov	ecx, DWORD PTR _s$78182[ebp]
	add	ecx, 1
	mov	DWORD PTR _s$78182[ebp], ecx
$LN2@SortRefDow:
; Line 333
	mov	esi, esp
	mov	edx, DWORD PTR _param$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$78182[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	lea	eax, DWORD PTR _temp$[ebp]
	push	eax
	call	DWORD PTR _compare$[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jl	SHORT $LN1@SortRefDow
; Line 334
	jmp	SHORT $LN4@SortRefDow
$LN1@SortRefDow:
; Line 335
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _s$78182[ebp]
	mov	esi, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [esi+eax*4]
	mov	DWORD PTR [edx+ecx*4], eax
; Line 336
	mov	ecx, DWORD PTR _s$78182[ebp]
	mov	DWORD PTR _k$[ebp], ecx
; Line 337
	jmp	$LN5@SortRefDow
$LN4@SortRefDow:
; Line 338
	mov	edx, DWORD PTR _k$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax+edx*4], ecx
; Line 339
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@SortRefDow
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
	npad	1
$LN10@SortRefDow:
	DD	1
	DD	$LN9@SortRefDow
$LN9@SortRefDow:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN8@SortRefDow
$LN8@SortRefDow:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
?SortRefDown@?$CRecordVector@I@@SGXPAIIIP6GHPBI1PAX@Z2@Z ENDP ; CRecordVector<unsigned int>::SortRefDown
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ
_TEXT	SEGMENT
$T80662 = -20						; size = 4
$T80661 = -16						; size = 4
_p$78190 = -12						; size = 4
_newCapacity$78189 = -8					; size = 4
_this$ = -4						; size = 4
?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ PROC	; CRecordVector<unsigned __int64>::ReserveOnePosition, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@ReserveOne@2
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$78189[ebp], ecx
; Line 23
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$78189[ebp]
	mov	edx, 8
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T80661[ebp], eax
	mov	eax, DWORD PTR $T80661[ebp]
	mov	DWORD PTR _p$78190[ebp], eax
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@ReserveOne@2
; Line 25
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$78190[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne@2:
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T80662[ebp], edx
	mov	eax, DWORD PTR $T80662[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$78190[ebp]
	mov	DWORD PTR [ecx], edx
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$78189[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ReserveOne@2:
; Line 30
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ ENDP	; CRecordVector<unsigned __int64>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReserveOnePosition@?$CRecordVector@_N@@AAEXXZ
_TEXT	SEGMENT
$T80666 = -20						; size = 4
$T80665 = -16						; size = 4
_p$78201 = -12						; size = 4
_newCapacity$78200 = -8					; size = 4
_this$ = -4						; size = 4
?ReserveOnePosition@?$CRecordVector@_N@@AAEXXZ PROC	; CRecordVector<bool>::ReserveOnePosition, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN3@ReserveOne@3
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$78200[ebp], ecx
; Line 23
	mov	edx, DWORD PTR _newCapacity$78200[ebp]
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T80665[ebp], eax
	mov	eax, DWORD PTR $T80665[ebp]
	mov	DWORD PTR _p$78201[ebp], eax
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@ReserveOne@3
; Line 25
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$78201[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne@3:
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T80666[ebp], edx
	mov	eax, DWORD PTR $T80666[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$78201[ebp]
	mov	DWORD PTR [ecx], edx
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$78200[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ReserveOne@3:
; Line 30
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveOnePosition@?$CRecordVector@_N@@AAEXXZ ENDP	; CRecordVector<bool>::ReserveOnePosition
_TEXT	ENDS
PUBLIC	??0CProp@@QAE@ABU0@@Z				; CProp::CProp
PUBLIC	??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z	; CObjectVector<CProp>::operator[]
PUBLIC	?Size@?$CObjectVector@UCProp@@@@QBEIXZ		; CObjectVector<CProp>::Size
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$1
__ehfuncinfo$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
tv85 = -36						; size = 4
$T80670 = -32						; size = 4
$T80669 = -28						; size = 4
_i$78217 = -24						; size = 4
_size$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_v$ = 8							; size = 4
??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z PROC		; CObjectVector<CProp>::CObjectVector<CProp>, COMDAT
; _this$ = ecx
; Line 422
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 424
	mov	ecx, DWORD PTR _v$[ebp]
	call	?Size@?$CObjectVector@UCProp@@@@QBEIXZ	; CObjectVector<CProp>::Size
	mov	DWORD PTR _size$[ebp], eax
; Line 425
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z ; CRecordVector<void *>::ConstructReserve
; Line 426
	mov	DWORD PTR _i$78217[ebp], 0
	jmp	SHORT $LN3@CObjectVec@5
$LN2@CObjectVec@5:
	mov	ecx, DWORD PTR _i$78217[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$78217[ebp], ecx
$LN3@CObjectVec@5:
	mov	edx, DWORD PTR _i$78217[ebp]
	cmp	edx, DWORD PTR _size$[ebp]
	jae	SHORT $LN4@CObjectVec@5
; Line 427
	push	24					; 00000018H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T80670[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T80670[ebp], 0
	je	SHORT $LN6@CObjectVec@5
	mov	eax, DWORD PTR _i$78217[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	call	??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ; CObjectVector<CProp>::operator[]
	push	eax
	mov	ecx, DWORD PTR $T80670[ebp]
	call	??0CProp@@QAE@ABU0@@Z
	mov	DWORD PTR tv85[ebp], eax
	jmp	SHORT $LN7@CObjectVec@5
$LN6@CObjectVec@5:
	mov	DWORD PTR tv85[ebp], 0
$LN7@CObjectVec@5:
	mov	ecx, DWORD PTR tv85[ebp]
	mov	DWORD PTR $T80669[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T80669[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ; CRecordVector<void *>::AddInReserved
	jmp	SHORT $LN2@CObjectVec@5
$LN4@CObjectVec@5:
; Line 428
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$1:
	mov	eax, DWORD PTR $T80670[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z ENDP		; CObjectVector<CProp>::CObjectVector<CProp>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Size@?$CObjectVector@UCProp@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@UCProp@@@@QBEIXZ PROC		; CObjectVector<CProp>::Size, COMDAT
; _this$ = ecx
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@UCProp@@@@QBEIXZ ENDP		; CObjectVector<CProp>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z PROC	; CObjectVector<CProp>::operator[], COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ENDP	; CObjectVector<CProp>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReserveOnePosition@?$CRecordVector@UCBond2@N7z@NArchive@@@@AAEXXZ
_TEXT	SEGMENT
$T80688 = -20						; size = 4
$T80687 = -16						; size = 4
_p$78229 = -12						; size = 4
_newCapacity$78228 = -8					; size = 4
_this$ = -4						; size = 4
?ReserveOnePosition@?$CRecordVector@UCBond2@N7z@NArchive@@@@AAEXXZ PROC ; CRecordVector<NArchive::N7z::CBond2>::ReserveOnePosition, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@ReserveOne@4
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$78228[ebp], ecx
; Line 23
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$78228[ebp]
	mov	edx, 12					; 0000000cH
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T80687[ebp], eax
	mov	eax, DWORD PTR $T80687[ebp]
	mov	DWORD PTR _p$78229[ebp], eax
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@ReserveOne@4
; Line 25
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	imul	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$78229[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne@4:
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T80688[ebp], edx
	mov	eax, DWORD PTR $T80688[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$78229[ebp]
	mov	DWORD PTR [ecx], edx
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$78228[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ReserveOne@4:
; Line 30
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveOnePosition@?$CRecordVector@UCBond2@N7z@NArchive@@@@AAEXXZ ENDP ; CRecordVector<NArchive::N7z::CBond2>::ReserveOnePosition
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ReserveOnePosition@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@AAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ReserveOnePosition@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@AAEXXZ$0
__ehfuncinfo$?ReserveOnePosition@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@AAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ReserveOnePosition@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@AAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?ReserveOnePosition@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@AAEXXZ
_TEXT	SEGMENT
tv86 = -44						; size = 4
$T80696 = -40						; size = 4
$T80693 = -36						; size = 4
$T80692 = -32						; size = 4
$T80691 = -28						; size = 4
_p$78240 = -24						; size = 4
_newCapacity$78239 = -20				; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?ReserveOnePosition@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@AAEXXZ PROC ; CRecordVector<NArchive::N7z::CFilterMode2>::ReserveOnePosition, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ReserveOnePosition@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@AAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-44], eax
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@ReserveOne@5
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$78239[ebp], ecx
; Line 23
	mov	edx, DWORD PTR _newCapacity$78239[ebp]
	mov	DWORD PTR $T80691[ebp], edx
	xor	ecx, ecx
	mov	eax, DWORD PTR $T80691[ebp]
	mov	edx, 16					; 00000010H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T80693[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T80693[ebp], 0
	je	SHORT $LN5@ReserveOne@5
	push	OFFSET ??0CFilterMode2@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFilterMode2::CFilterMode2
	mov	eax, DWORD PTR $T80691[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR $T80693[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T80693[ebp]
	mov	DWORD PTR tv86[ebp], edx
	jmp	SHORT $LN6@ReserveOne@5
$LN5@ReserveOne@5:
	mov	DWORD PTR tv86[ebp], 0
$LN6@ReserveOne@5:
	mov	eax, DWORD PTR tv86[ebp]
	mov	DWORD PTR $T80692[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T80692[ebp]
	mov	DWORD PTR _p$78240[ebp], ecx
; Line 24
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	SHORT $LN1@ReserveOne@5
; Line 25
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _p$78240[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne@5:
; Line 26
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T80696[ebp], eax
	mov	ecx, DWORD PTR $T80696[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$78240[ebp]
	mov	DWORD PTR [edx], eax
; Line 28
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _newCapacity$78239[ebp]
	mov	DWORD PTR [ecx+8], edx
$LN3@ReserveOne@5:
; Line 30
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ReserveOnePosition@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@AAEXXZ$0:
	mov	eax, DWORD PTR $T80693[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?ReserveOnePosition@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@AAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ReserveOnePosition@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@AAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?ReserveOnePosition@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@AAEXXZ ENDP ; CRecordVector<NArchive::N7z::CFilterMode2>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Front@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAEAAUCFilterMode2@N7z@NArchive@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Front@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAEAAUCFilterMode2@N7z@NArchive@@XZ PROC ; CRecordVector<NArchive::N7z::CFilterMode2>::Front, COMDAT
; _this$ = ecx
; Line 230
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
?Front@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@QAEAAUCFilterMode2@N7z@NArchive@@XZ ENDP ; CRecordVector<NArchive::N7z::CFilterMode2>::Front
_TEXT	ENDS
PUBLIC	?Compare@CFilterMode2@N7z@NArchive@@QBEHABU123@@Z ; NArchive::N7z::CFilterMode2::Compare
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SortRefDown2@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@SGXPAUCFilterMode2@N7z@NArchive@@II@Z
_TEXT	SEGMENT
_s$78258 = -28						; size = 4
_temp$ = -20						; size = 16
_p$ = 8							; size = 4
_k$ = 12						; size = 4
_size$ = 16						; size = 4
?SortRefDown2@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@SGXPAUCFilterMode2@N7z@NArchive@@II@Z PROC ; CRecordVector<NArchive::N7z::CFilterMode2>::SortRefDown2, COMDAT
; Line 364
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 365
	mov	eax, DWORD PTR _k$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _temp$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _temp$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _temp$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _temp$[ebp+12], edx
$LN5@SortRefDow@2:
; Line 368
	mov	eax, DWORD PTR _k$[ebp]
	shl	eax, 1
	mov	DWORD PTR _s$78258[ebp], eax
; Line 369
	mov	ecx, DWORD PTR _s$78258[ebp]
	cmp	ecx, DWORD PTR _size$[ebp]
	jbe	SHORT $LN3@SortRefDow@2
; Line 370
	jmp	SHORT $LN4@SortRefDow@2
$LN3@SortRefDow@2:
; Line 371
	mov	edx, DWORD PTR _s$78258[ebp]
	cmp	edx, DWORD PTR _size$[ebp]
	jae	SHORT $LN2@SortRefDow@2
	mov	eax, DWORD PTR _s$78258[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$78258[ebp]
	add	ecx, 1
	shl	ecx, 4
	add	ecx, DWORD PTR _p$[ebp]
	call	?Compare@CFilterMode2@N7z@NArchive@@QBEHABU123@@Z ; NArchive::N7z::CFilterMode2::Compare
	test	eax, eax
	jle	SHORT $LN2@SortRefDow@2
; Line 372
	mov	ecx, DWORD PTR _s$78258[ebp]
	add	ecx, 1
	mov	DWORD PTR _s$78258[ebp], ecx
$LN2@SortRefDow@2:
; Line 373
	mov	edx, DWORD PTR _s$78258[ebp]
	shl	edx, 4
	add	edx, DWORD PTR _p$[ebp]
	push	edx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	?Compare@CFilterMode2@N7z@NArchive@@QBEHABU123@@Z ; NArchive::N7z::CFilterMode2::Compare
	test	eax, eax
	jl	SHORT $LN1@SortRefDow@2
; Line 374
	jmp	SHORT $LN4@SortRefDow@2
$LN1@SortRefDow@2:
; Line 375
	mov	eax, DWORD PTR _s$78258[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _k$[ebp]
	shl	ecx, 4
	add	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 376
	mov	ecx, DWORD PTR _s$78258[ebp]
	mov	DWORD PTR _k$[ebp], ecx
; Line 377
	jmp	$LN5@SortRefDow@2
$LN4@SortRefDow@2:
; Line 378
	mov	edx, DWORD PTR _k$[ebp]
	shl	edx, 4
	add	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _temp$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
; Line 379
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@SortRefDow@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN10@SortRefDow@2:
	DD	1
	DD	$LN9@SortRefDow@2
$LN9@SortRefDow@2:
	DD	-20					; ffffffecH
	DD	16					; 00000010H
	DD	$LN8@SortRefDow@2
$LN8@SortRefDow@2:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
?SortRefDown2@?$CRecordVector@UCFilterMode2@N7z@NArchive@@@@SGXPAUCFilterMode2@N7z@NArchive@@II@Z ENDP ; CRecordVector<NArchive::N7z::CFilterMode2>::SortRefDown2
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Compare@CFilterMode2@N7z@NArchive@@QBEHABU123@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
?Compare@CFilterMode2@N7z@NArchive@@QBEHABU123@@Z PROC	; NArchive::N7z::CFilterMode2::Compare, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zupdate.cpp
; Line 310
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 311
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	test	ecx, ecx
	jne	SHORT $LN8@Compare
; Line 313
	mov	edx, DWORD PTR _m$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	test	eax, eax
	je	SHORT $LN7@Compare
; Line 314
	or	eax, -1
	jmp	SHORT $LN9@Compare
$LN7@Compare:
; Line 315
	jmp	SHORT $LN6@Compare
$LN8@Compare:
; Line 316
	mov	ecx, DWORD PTR _m$[ebp]
	movzx	edx, BYTE PTR [ecx+8]
	test	edx, edx
	jne	SHORT $LN6@Compare
; Line 317
	mov	eax, 1
	jmp	SHORT $LN9@Compare
$LN6@Compare:
; Line 319
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jae	SHORT $LN4@Compare
	or	eax, -1
	jmp	SHORT $LN9@Compare
$LN4@Compare:
; Line 320
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jbe	SHORT $LN3@Compare
	mov	eax, 1
	jmp	SHORT $LN9@Compare
$LN3@Compare:
; Line 322
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+4]
	jae	SHORT $LN2@Compare
	or	eax, -1
	jmp	SHORT $LN9@Compare
$LN2@Compare:
; Line 323
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+4]
	jbe	SHORT $LN1@Compare
	mov	eax, 1
	jmp	SHORT $LN9@Compare
$LN1@Compare:
; Line 325
	xor	eax, eax
$LN9@Compare:
; Line 326
	mov	esp, ebp
	pop	ebp
	ret	4
?Compare@CFilterMode2@N7z@NArchive@@QBEHABU123@@Z ENDP	; NArchive::N7z::CFilterMode2::Compare
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReserveOnePosition@?$CRecordVector@UCFolderRepack@N7z@NArchive@@@@AAEXXZ
_TEXT	SEGMENT
$T80716 = -20						; size = 4
$T80715 = -16						; size = 4
_p$78266 = -12						; size = 4
_newCapacity$78265 = -8					; size = 4
_this$ = -4						; size = 4
?ReserveOnePosition@?$CRecordVector@UCFolderRepack@N7z@NArchive@@@@AAEXXZ PROC ; CRecordVector<NArchive::N7z::CFolderRepack>::ReserveOnePosition, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@ReserveOne@6
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$78265[ebp], ecx
; Line 23
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$78265[ebp]
	mov	edx, 8
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T80715[ebp], eax
	mov	eax, DWORD PTR $T80715[ebp]
	mov	DWORD PTR _p$78266[ebp], eax
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@ReserveOne@6
; Line 25
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$78266[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne@6:
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T80716[ebp], edx
	mov	eax, DWORD PTR $T80716[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$78266[ebp]
	mov	DWORD PTR [ecx], edx
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$78265[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ReserveOne@6:
; Line 30
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveOnePosition@?$CRecordVector@UCFolderRepack@N7z@NArchive@@@@AAEXXZ ENDP ; CRecordVector<NArchive::N7z::CFolderRepack>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@UCFolderRepack@N7z@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@UCFolderRepack@N7z@NArchive@@@@QAE@XZ PROC ; CRecordVector<NArchive::N7z::CFolderRepack>::CRecordVector<NArchive::N7z::CFolderRepack>, COMDAT
; _this$ = ecx
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@UCFolderRepack@N7z@NArchive@@@@QAE@XZ ENDP ; CRecordVector<NArchive::N7z::CFolderRepack>::CRecordVector<NArchive::N7z::CFolderRepack>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@UCFolderRepack@N7z@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
$T80721 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@UCFolderRepack@N7z@NArchive@@@@QAE@XZ PROC ; CRecordVector<NArchive::N7z::CFolderRepack>::~CRecordVector<NArchive::N7z::CFolderRepack>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T80721[ebp], ecx
	mov	edx, DWORD PTR $T80721[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@UCFolderRepack@N7z@NArchive@@@@QAE@XZ ENDP ; CRecordVector<NArchive::N7z::CFolderRepack>::~CRecordVector<NArchive::N7z::CFolderRepack>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAEPAUIArchiveUpdateCallbackFile@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAEPAUIArchiveUpdateCallbackFile@@PAU1@@Z PROC ; CMyComPtr<IArchiveUpdateCallbackFile>::operator=, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@7
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@7:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@7
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@7:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UIArchiveUpdateCallbackFile@@@@QAEPAUIArchiveUpdateCallbackFile@@PAU1@@Z ENDP ; CMyComPtr<IArchiveUpdateCallbackFile>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAEPAUIArchiveExtractCallbackMessage@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAEPAUIArchiveExtractCallbackMessage@@PAU1@@Z PROC ; CMyComPtr<IArchiveExtractCallbackMessage>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@8
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@8:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@8
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@8:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UIArchiveExtractCallbackMessage@@@@QAEPAUIArchiveExtractCallbackMessage@@PAU1@@Z ENDP ; CMyComPtr<IArchiveExtractCallbackMessage>::operator=
_TEXT	ENDS
PUBLIC	??0CRefItem@N7z@NArchive@@QAE@XZ		; NArchive::N7z::CRefItem::CRefItem
PUBLIC	?Clear@?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEXXZ ; CRecordVector<NArchive::N7z::CRefItem>::Clear
;	COMDAT xdata$x
; File c:\workspace\7z1505-src\cpp\common\myvector.h
xdata$x	SEGMENT
__unwindtable$?ClearAndReserve@?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ClearAndReserve@?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEXI@Z$0
__ehfuncinfo$?ClearAndReserve@?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ClearAndReserve@?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?ClearAndReserve@?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEXI@Z
_TEXT	SEGMENT
tv83 = -36						; size = 4
$T80731 = -32						; size = 4
$T80730 = -28						; size = 4
$T80729 = -24						; size = 4
$T80728 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_newCapacity$ = 8					; size = 4
?ClearAndReserve@?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEXI@Z PROC ; CRecordVector<NArchive::N7z::CRefItem>::ClearAndReserve, COMDAT
; _this$ = ecx
; Line 74
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ClearAndReserve@?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 75
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEXXZ ; CRecordVector<NArchive::N7z::CRefItem>::Clear
; Line 76
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	$LN2@ClearAndRe
; Line 78
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T80728[ebp], eax
	mov	ecx, DWORD PTR $T80728[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 79
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0
; Line 80
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 81
	mov	ecx, DWORD PTR _newCapacity$[ebp]
	mov	DWORD PTR $T80729[ebp], ecx
	xor	ecx, ecx
	mov	eax, DWORD PTR $T80729[ebp]
	mov	edx, 20					; 00000014H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T80731[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T80731[ebp], 0
	je	SHORT $LN4@ClearAndRe
	push	OFFSET ??0CRefItem@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CRefItem::CRefItem
	mov	eax, DWORD PTR $T80729[ebp]
	push	eax
	push	20					; 00000014H
	mov	ecx, DWORD PTR $T80731[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T80731[ebp]
	mov	DWORD PTR tv83[ebp], edx
	jmp	SHORT $LN5@ClearAndRe
$LN4@ClearAndRe:
	mov	DWORD PTR tv83[ebp], 0
$LN5@ClearAndRe:
	mov	eax, DWORD PTR tv83[ebp]
	mov	DWORD PTR $T80730[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T80730[ebp]
	mov	DWORD PTR [ecx], edx
; Line 82
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN2@ClearAndRe:
; Line 84
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ClearAndReserve@?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEXI@Z$0:
	mov	eax, DWORD PTR $T80731[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?ClearAndReserve@?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ClearAndReserve@?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ClearAndReserve@?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEXI@Z ENDP ; CRecordVector<NArchive::N7z::CRefItem>::ClearAndReserve
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CRefItem@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CRefItem@N7z@NArchive@@QAE@XZ PROC			; NArchive::N7z::CRefItem::CRefItem, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zupdate.cpp
; Line 627
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CRefItem@N7z@NArchive@@QAE@XZ ENDP			; NArchive::N7z::CRefItem::CRefItem
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Front@?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEAAUCRefItem@N7z@NArchive@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Front@?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEAAUCRefItem@N7z@NArchive@@XZ PROC ; CRecordVector<NArchive::N7z::CRefItem>::Front, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 230
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
?Front@?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEAAUCRefItem@N7z@NArchive@@XZ ENDP ; CRecordVector<NArchive::N7z::CRefItem>::Front
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SortRefDown@?$CRecordVector@UCRefItem@N7z@NArchive@@@@SGXPAUCRefItem@N7z@NArchive@@IIP6GHPBU234@1PAX@Z2@Z
_TEXT	SEGMENT
_s$78303 = -32						; size = 4
_temp$ = -24						; size = 20
_p$ = 8							; size = 4
_k$ = 12						; size = 4
_size$ = 16						; size = 4
_compare$ = 20						; size = 4
_param$ = 24						; size = 4
?SortRefDown@?$CRecordVector@UCRefItem@N7z@NArchive@@@@SGXPAUCRefItem@N7z@NArchive@@IIP6GHPBU234@1PAX@Z2@Z PROC ; CRecordVector<NArchive::N7z::CRefItem>::SortRefDown, COMDAT
; Line 324
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 325
	mov	eax, DWORD PTR _k$[ebp]
	imul	eax, 20					; 00000014H
	add	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _temp$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _temp$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _temp$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _temp$[ebp+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR _temp$[ebp+16], eax
$LN5@SortRefDow@3:
; Line 328
	mov	ecx, DWORD PTR _k$[ebp]
	shl	ecx, 1
	mov	DWORD PTR _s$78303[ebp], ecx
; Line 329
	mov	edx, DWORD PTR _s$78303[ebp]
	cmp	edx, DWORD PTR _size$[ebp]
	jbe	SHORT $LN3@SortRefDow@3
; Line 330
	jmp	$LN4@SortRefDow@3
$LN3@SortRefDow@3:
; Line 331
	mov	eax, DWORD PTR _s$78303[ebp]
	cmp	eax, DWORD PTR _size$[ebp]
	jae	SHORT $LN2@SortRefDow@3
	mov	esi, esp
	mov	ecx, DWORD PTR _param$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$78303[ebp]
	imul	edx, 20					; 00000014H
	add	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$78303[ebp]
	imul	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _p$[ebp]
	lea	edx, DWORD PTR [ecx+eax+20]
	push	edx
	call	DWORD PTR _compare$[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jle	SHORT $LN2@SortRefDow@3
; Line 332
	mov	eax, DWORD PTR _s$78303[ebp]
	add	eax, 1
	mov	DWORD PTR _s$78303[ebp], eax
$LN2@SortRefDow@3:
; Line 333
	mov	esi, esp
	mov	ecx, DWORD PTR _param$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$78303[ebp]
	imul	edx, 20					; 00000014H
	add	edx, DWORD PTR _p$[ebp]
	push	edx
	lea	eax, DWORD PTR _temp$[ebp]
	push	eax
	call	DWORD PTR _compare$[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jl	SHORT $LN1@SortRefDow@3
; Line 334
	jmp	SHORT $LN4@SortRefDow@3
$LN1@SortRefDow@3:
; Line 335
	mov	ecx, DWORD PTR _s$78303[ebp]
	imul	ecx, 20					; 00000014H
	add	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _k$[ebp]
	imul	edx, 20					; 00000014H
	add	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], eax
	mov	ecx, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+16], ecx
; Line 336
	mov	edx, DWORD PTR _s$78303[ebp]
	mov	DWORD PTR _k$[ebp], edx
; Line 337
	jmp	$LN5@SortRefDow@3
$LN4@SortRefDow@3:
; Line 338
	mov	eax, DWORD PTR _k$[ebp]
	imul	eax, 20					; 00000014H
	add	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _temp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _temp$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR _temp$[ebp+16]
	mov	DWORD PTR [eax+16], ecx
; Line 339
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@SortRefDow@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
	npad	3
$LN10@SortRefDow@3:
	DD	1
	DD	$LN9@SortRefDow@3
$LN9@SortRefDow@3:
	DD	-24					; ffffffe8H
	DD	20					; 00000014H
	DD	$LN8@SortRefDow@3
$LN8@SortRefDow@3:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
?SortRefDown@?$CRecordVector@UCRefItem@N7z@NArchive@@@@SGXPAUCRefItem@N7z@NArchive@@IIP6GHPBU234@1PAX@Z2@Z ENDP ; CRecordVector<NArchive::N7z::CRefItem>::SortRefDown
_TEXT	ENDS
EXTRN	??0CPropVariant@NCOM@NWindows@@QAE@ABV012@@Z:PROC ; NWindows::NCOM::CPropVariant::CPropVariant
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CProp@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CProp@@QAE@ABU0@@Z PROC				; CProp::CProp, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+4]
	mov	BYTE PTR [eax+4], dl
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0CPropVariant@NCOM@NWindows@@QAE@ABV012@@Z ; NWindows::NCOM::CPropVariant::CPropVariant
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CProp@@QAE@ABU0@@Z ENDP				; CProp::CProp
_TEXT	ENDS
EXTRN	__imp__memmove:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?MoveItems@?$CRecordVector@PAX@@AAEXII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_destIndex$ = 8						; size = 4
_srcIndex$ = 12						; size = 4
?MoveItems@?$CRecordVector@PAX@@AAEXII@Z PROC		; CRecordVector<void *>::MoveItems, COMDAT
; _this$ = ecx
; Line 14
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 15
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR _srcIndex$[ebp]
	shl	ecx, 2
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _srcIndex$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _destIndex$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 16
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?MoveItems@?$CRecordVector@PAX@@AAEXII@Z ENDP		; CRecordVector<void *>::MoveItems
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ
_TEXT	SEGMENT
$T80758 = -20						; size = 4
$T80757 = -16						; size = 4
_p$78318 = -12						; size = 4
_newCapacity$78317 = -8					; size = 4
_this$ = -4						; size = 4
?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ PROC	; CRecordVector<void *>::ReserveOnePosition, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@ReserveOne@7
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$78317[ebp], ecx
; Line 23
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$78317[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T80757[ebp], eax
	mov	eax, DWORD PTR $T80757[ebp]
	mov	DWORD PTR _p$78318[ebp], eax
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@ReserveOne@7
; Line 25
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$78318[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne@7:
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T80758[ebp], edx
	mov	eax, DWORD PTR $T80758[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$78318[ebp]
	mov	DWORD PTR [ecx], edx
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$78317[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ReserveOne@7:
; Line 30
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ENDP	; CRecordVector<void *>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Clear@?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEXXZ PROC ; CRecordVector<NArchive::N7z::CRefItem>::Clear, COMDAT
; _this$ = ecx
; Line 131
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CRecordVector@UCRefItem@N7z@NArchive@@@@QAEXXZ ENDP ; CRecordVector<NArchive::N7z::CRefItem>::Clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$MyCompare@I@@YGHII@Z
_TEXT	SEGMENT
tv67 = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$MyCompare@I@@YGHII@Z PROC				; MyCompare<unsigned int>, COMDAT
; File c:\workspace\7z1505-src\cpp\common\defs.h
; Line 12
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _a$[ebp]
	cmp	eax, DWORD PTR _b$[ebp]
	jae	SHORT $LN3@MyCompare
	mov	DWORD PTR tv67[ebp], -1
	jmp	SHORT $LN4@MyCompare
$LN3@MyCompare:
	mov	ecx, DWORD PTR _a$[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR _b$[ebp]
	setne	dl
	mov	DWORD PTR tv67[ebp], edx
$LN4@MyCompare:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??$MyCompare@I@@YGHII@Z ENDP				; MyCompare<unsigned int>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$MyCompare@_K@@YGH_K0@Z
_TEXT	SEGMENT
tv66 = -8						; size = 4
tv67 = -4						; size = 4
_a$ = 8							; size = 8
_b$ = 16						; size = 8
??$MyCompare@_K@@YGH_K0@Z PROC				; MyCompare<unsigned __int64>, COMDAT
; Line 12
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _a$[ebp+4]
	cmp	eax, DWORD PTR _b$[ebp+4]
	ja	SHORT $LN5@MyCompare@2
	jb	SHORT $LN7@MyCompare@2
	mov	ecx, DWORD PTR _a$[ebp]
	cmp	ecx, DWORD PTR _b$[ebp]
	jae	SHORT $LN5@MyCompare@2
$LN7@MyCompare@2:
	mov	DWORD PTR tv67[ebp], -1
	jmp	SHORT $LN6@MyCompare@2
$LN5@MyCompare@2:
	mov	edx, DWORD PTR _a$[ebp]
	cmp	edx, DWORD PTR _b$[ebp]
	jne	SHORT $LN3@MyCompare@2
	mov	eax, DWORD PTR _a$[ebp+4]
	cmp	eax, DWORD PTR _b$[ebp+4]
	jne	SHORT $LN3@MyCompare@2
	mov	DWORD PTR tv66[ebp], 0
	jmp	SHORT $LN4@MyCompare@2
$LN3@MyCompare@2:
	mov	DWORD PTR tv66[ebp], 1
$LN4@MyCompare@2:
	mov	ecx, DWORD PTR tv66[ebp]
	mov	DWORD PTR tv67[ebp], ecx
$LN6@MyCompare@2:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??$MyCompare@_K@@YGH_K0@Z ENDP				; MyCompare<unsigned __int64>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$MyCompare@H@@YGHHH@Z
_TEXT	SEGMENT
tv67 = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$MyCompare@H@@YGHHH@Z PROC				; MyCompare<int>, COMDAT
; Line 12
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _a$[ebp]
	cmp	eax, DWORD PTR _b$[ebp]
	jge	SHORT $LN3@MyCompare@3
	mov	DWORD PTR tv67[ebp], -1
	jmp	SHORT $LN4@MyCompare@3
$LN3@MyCompare@3:
	mov	ecx, DWORD PTR _a$[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR _b$[ebp]
	setne	dl
	mov	DWORD PTR tv67[ebp], edx
$LN4@MyCompare@3:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??$MyCompare@H@@YGHHH@Z ENDP				; MyCompare<int>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CCopyCoder@NCompress@@W3AGKXZ
_TEXT	SEGMENT
?Release@CCopyCoder@NCompress@@W3AGKXZ PROC		; [thunk]:NCompress::CCopyCoder::Release`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?Release@CCopyCoder@NCompress@@UAGKXZ	; NCompress::CCopyCoder::Release
?Release@CCopyCoder@NCompress@@W3AGKXZ ENDP		; [thunk]:NCompress::CCopyCoder::Release`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CRepackInStreamWithSizes@N7z@NArchive@@W3AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CRepackInStreamWithSizes@N7z@NArchive@@W3AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:NArchive::N7z::CRepackInStreamWithSizes::QueryInterface`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?QueryInterface@CRepackInStreamWithSizes@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::N7z::CRepackInStreamWithSizes::QueryInterface
?QueryInterface@CRepackInStreamWithSizes@N7z@NArchive@@W3AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:NArchive::N7z::CRepackInStreamWithSizes::QueryInterface`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CCopyCoder@NCompress@@W7AGKXZ
_TEXT	SEGMENT
?Release@CCopyCoder@NCompress@@W7AGKXZ PROC		; [thunk]:NCompress::CCopyCoder::Release`adjustor{8}', COMDAT
	sub	DWORD PTR [esp+4], 8
	jmp	?Release@CCopyCoder@NCompress@@UAGKXZ	; NCompress::CCopyCoder::Release
?Release@CCopyCoder@NCompress@@W7AGKXZ ENDP		; [thunk]:NCompress::CCopyCoder::Release`adjustor{8}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CFolderInStream@N7z@NArchive@@W3AGKXZ
_TEXT	SEGMENT
?AddRef@CFolderInStream@N7z@NArchive@@W3AGKXZ PROC	; [thunk]:NArchive::N7z::CFolderInStream::AddRef`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?AddRef@CFolderInStream@N7z@NArchive@@UAGKXZ ; NArchive::N7z::CFolderInStream::AddRef
?AddRef@CFolderInStream@N7z@NArchive@@W3AGKXZ ENDP	; [thunk]:NArchive::N7z::CFolderInStream::AddRef`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CCopyCoder@NCompress@@WM@AGKXZ
_TEXT	SEGMENT
?Release@CCopyCoder@NCompress@@WM@AGKXZ PROC		; [thunk]:NCompress::CCopyCoder::Release`adjustor{12}', COMDAT
	sub	DWORD PTR [esp+4], 12			; 0000000cH
	jmp	?Release@CCopyCoder@NCompress@@UAGKXZ	; NCompress::CCopyCoder::Release
?Release@CCopyCoder@NCompress@@WM@AGKXZ ENDP		; [thunk]:NCompress::CCopyCoder::Release`adjustor{12}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CCopyCoder@NCompress@@W3AGKXZ
_TEXT	SEGMENT
?AddRef@CCopyCoder@NCompress@@W3AGKXZ PROC		; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?AddRef@CCopyCoder@NCompress@@UAGKXZ	; NCompress::CCopyCoder::AddRef
?AddRef@CCopyCoder@NCompress@@W3AGKXZ ENDP		; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CCopyCoder@NCompress@@W7AGKXZ
_TEXT	SEGMENT
?AddRef@CCopyCoder@NCompress@@W7AGKXZ PROC		; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{8}', COMDAT
	sub	DWORD PTR [esp+4], 8
	jmp	?AddRef@CCopyCoder@NCompress@@UAGKXZ	; NCompress::CCopyCoder::AddRef
?AddRef@CCopyCoder@NCompress@@W7AGKXZ ENDP		; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{8}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::CCopyCoder::QueryInterface
?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CCopyCoder@NCompress@@WM@AGKXZ
_TEXT	SEGMENT
?AddRef@CCopyCoder@NCompress@@WM@AGKXZ PROC		; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{12}', COMDAT
	sub	DWORD PTR [esp+4], 12			; 0000000cH
	jmp	?AddRef@CCopyCoder@NCompress@@UAGKXZ	; NCompress::CCopyCoder::AddRef
?AddRef@CCopyCoder@NCompress@@WM@AGKXZ ENDP		; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{12}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CFolderInStream@N7z@NArchive@@W3AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CFolderInStream@N7z@NArchive@@W3AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:NArchive::N7z::CFolderInStream::QueryInterface`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?QueryInterface@CFolderInStream@N7z@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::N7z::CFolderInStream::QueryInterface
?QueryInterface@CFolderInStream@N7z@NArchive@@W3AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:NArchive::N7z::CFolderInStream::QueryInterface`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CRepackInStreamWithSizes@N7z@NArchive@@W3AGKXZ
_TEXT	SEGMENT
?Release@CRepackInStreamWithSizes@N7z@NArchive@@W3AGKXZ PROC ; [thunk]:NArchive::N7z::CRepackInStreamWithSizes::Release`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?Release@CRepackInStreamWithSizes@N7z@NArchive@@UAGKXZ ; NArchive::N7z::CRepackInStreamWithSizes::Release
?Release@CRepackInStreamWithSizes@N7z@NArchive@@W3AGKXZ ENDP ; [thunk]:NArchive::N7z::CRepackInStreamWithSizes::Release`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{8}', COMDAT
	sub	DWORD PTR [esp+4], 8
	jmp	?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::CCopyCoder::QueryInterface
?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{8}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{12}', COMDAT
	sub	DWORD PTR [esp+4], 12			; 0000000cH
	jmp	?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::CCopyCoder::QueryInterface
?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{12}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CRepackInStreamWithSizes@N7z@NArchive@@W3AGKXZ
_TEXT	SEGMENT
?AddRef@CRepackInStreamWithSizes@N7z@NArchive@@W3AGKXZ PROC ; [thunk]:NArchive::N7z::CRepackInStreamWithSizes::AddRef`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?AddRef@CRepackInStreamWithSizes@N7z@NArchive@@UAGKXZ ; NArchive::N7z::CRepackInStreamWithSizes::AddRef
?AddRef@CRepackInStreamWithSizes@N7z@NArchive@@W3AGKXZ ENDP ; [thunk]:NArchive::N7z::CRepackInStreamWithSizes::AddRef`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CFolderInStream@N7z@NArchive@@W3AGKXZ
_TEXT	SEGMENT
?Release@CFolderInStream@N7z@NArchive@@W3AGKXZ PROC	; [thunk]:NArchive::N7z::CFolderInStream::Release`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?Release@CFolderInStream@N7z@NArchive@@UAGKXZ ; NArchive::N7z::CFolderInStream::Release
?Release@CFolderInStream@N7z@NArchive@@W3AGKXZ ENDP	; [thunk]:NArchive::N7z::CFolderInStream::Release`adjustor{4}'
_TEXT	ENDS
END
