; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\CPP\Common\StringToInt.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?ConvertStringToUInt32@@YGIPBDPAPBD@Z		; ConvertStringToUInt32
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\cpp\common\stringtoint.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_v$65821 = -12						; size = 4
_c$65815 = -5						; size = 1
_res$ = -4						; size = 4
_s$ = 8							; size = 4
_end$ = 12						; size = 4
?ConvertStringToUInt32@@YGIPBDPAPBD@Z PROC		; ConvertStringToUInt32
; Line 24
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	cmp	DWORD PTR _end$[ebp], 0
	je	SHORT $LN9@ConvertStr
	mov	eax, DWORD PTR _end$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax], ecx
$LN9@ConvertStr:
	mov	DWORD PTR _res$[ebp], 0
	jmp	SHORT $LN8@ConvertStr
$LN7@ConvertStr:
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, 1
	mov	DWORD PTR _s$[ebp], edx
$LN8@ConvertStr:
	mov	eax, DWORD PTR _s$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c$65815[ebp], cl
	movzx	edx, BYTE PTR _c$65815[ebp]
	cmp	edx, 48					; 00000030H
	jl	SHORT $LN4@ConvertStr
	movzx	eax, BYTE PTR _c$65815[ebp]
	cmp	eax, 57					; 00000039H
	jle	SHORT $LN5@ConvertStr
$LN4@ConvertStr:
	cmp	DWORD PTR _end$[ebp], 0
	je	SHORT $LN3@ConvertStr
	mov	ecx, DWORD PTR _end$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx], edx
$LN3@ConvertStr:
	mov	eax, DWORD PTR _res$[ebp]
	jmp	SHORT $LN10@ConvertStr
$LN5@ConvertStr:
	cmp	DWORD PTR _res$[ebp], 429496729		; 19999999H
	jbe	SHORT $LN2@ConvertStr
	xor	eax, eax
	jmp	SHORT $LN10@ConvertStr
$LN2@ConvertStr:
	mov	eax, DWORD PTR _res$[ebp]
	imul	eax, 10					; 0000000aH
	mov	DWORD PTR _res$[ebp], eax
	movzx	ecx, BYTE PTR _c$65815[ebp]
	sub	ecx, 48					; 00000030H
	mov	DWORD PTR _v$65821[ebp], ecx
	or	edx, -1
	sub	edx, DWORD PTR _v$65821[ebp]
	cmp	DWORD PTR _res$[ebp], edx
	jbe	SHORT $LN1@ConvertStr
	xor	eax, eax
	jmp	SHORT $LN10@ConvertStr
$LN1@ConvertStr:
	mov	eax, DWORD PTR _res$[ebp]
	add	eax, DWORD PTR _v$65821[ebp]
	mov	DWORD PTR _res$[ebp], eax
	jmp	SHORT $LN7@ConvertStr
$LN10@ConvertStr:
	mov	esp, ebp
	pop	ebp
	ret	8
?ConvertStringToUInt32@@YGIPBDPAPBD@Z ENDP		; ConvertStringToUInt32
_TEXT	ENDS
PUBLIC	?ConvertStringToUInt32@@YGIPB_WPAPB_W@Z		; ConvertStringToUInt32
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_v$65838 = -12						; size = 4
_c$65832 = -8						; size = 2
_res$ = -4						; size = 4
_s$ = 8							; size = 4
_end$ = 12						; size = 4
?ConvertStringToUInt32@@YGIPB_WPAPB_W@Z PROC		; ConvertStringToUInt32
; Line 25
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	cmp	DWORD PTR _end$[ebp], 0
	je	SHORT $LN9@ConvertStr@2
	mov	eax, DWORD PTR _end$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax], ecx
$LN9@ConvertStr@2:
	mov	DWORD PTR _res$[ebp], 0
	jmp	SHORT $LN8@ConvertStr@2
$LN7@ConvertStr@2:
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, 2
	mov	DWORD PTR _s$[ebp], edx
$LN8@ConvertStr@2:
	mov	eax, DWORD PTR _s$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _c$65832[ebp], cx
	movzx	edx, WORD PTR _c$65832[ebp]
	cmp	edx, 48					; 00000030H
	jl	SHORT $LN4@ConvertStr@2
	movzx	eax, WORD PTR _c$65832[ebp]
	cmp	eax, 57					; 00000039H
	jle	SHORT $LN5@ConvertStr@2
$LN4@ConvertStr@2:
	cmp	DWORD PTR _end$[ebp], 0
	je	SHORT $LN3@ConvertStr@2
	mov	ecx, DWORD PTR _end$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx], edx
$LN3@ConvertStr@2:
	mov	eax, DWORD PTR _res$[ebp]
	jmp	SHORT $LN10@ConvertStr@2
$LN5@ConvertStr@2:
	cmp	DWORD PTR _res$[ebp], 429496729		; 19999999H
	jbe	SHORT $LN2@ConvertStr@2
	xor	eax, eax
	jmp	SHORT $LN10@ConvertStr@2
$LN2@ConvertStr@2:
	mov	eax, DWORD PTR _res$[ebp]
	imul	eax, 10					; 0000000aH
	mov	DWORD PTR _res$[ebp], eax
	movzx	ecx, WORD PTR _c$65832[ebp]
	sub	ecx, 48					; 00000030H
	mov	DWORD PTR _v$65838[ebp], ecx
	or	edx, -1
	sub	edx, DWORD PTR _v$65838[ebp]
	cmp	DWORD PTR _res$[ebp], edx
	jbe	SHORT $LN1@ConvertStr@2
	xor	eax, eax
	jmp	SHORT $LN10@ConvertStr@2
$LN1@ConvertStr@2:
	mov	eax, DWORD PTR _res$[ebp]
	add	eax, DWORD PTR _v$65838[ebp]
	mov	DWORD PTR _res$[ebp], eax
	jmp	SHORT $LN7@ConvertStr@2
$LN10@ConvertStr@2:
	mov	esp, ebp
	pop	ebp
	ret	8
?ConvertStringToUInt32@@YGIPB_WPAPB_W@Z ENDP		; ConvertStringToUInt32
_TEXT	ENDS
PUBLIC	?ConvertStringToUInt64@@YG_KPBDPAPBD@Z		; ConvertStringToUInt64
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__allmul:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv145 = -24						; size = 8
_v$65855 = -16						; size = 4
_c$65849 = -9						; size = 1
_res$ = -8						; size = 8
_s$ = 8							; size = 4
_end$ = 12						; size = 4
?ConvertStringToUInt64@@YG_KPBDPAPBD@Z PROC		; ConvertStringToUInt64
; Line 26
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	cmp	DWORD PTR _end$[ebp], 0
	je	SHORT $LN9@ConvertStr@3
	mov	eax, DWORD PTR _end$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax], ecx
$LN9@ConvertStr@3:
	mov	DWORD PTR _res$[ebp], 0
	mov	DWORD PTR _res$[ebp+4], 0
	jmp	SHORT $LN8@ConvertStr@3
$LN7@ConvertStr@3:
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, 1
	mov	DWORD PTR _s$[ebp], edx
$LN8@ConvertStr@3:
	mov	eax, DWORD PTR _s$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c$65849[ebp], cl
	movzx	edx, BYTE PTR _c$65849[ebp]
	cmp	edx, 48					; 00000030H
	jl	SHORT $LN4@ConvertStr@3
	movzx	eax, BYTE PTR _c$65849[ebp]
	cmp	eax, 57					; 00000039H
	jle	SHORT $LN5@ConvertStr@3
$LN4@ConvertStr@3:
	cmp	DWORD PTR _end$[ebp], 0
	je	SHORT $LN3@ConvertStr@3
	mov	ecx, DWORD PTR _end$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx], edx
$LN3@ConvertStr@3:
	mov	eax, DWORD PTR _res$[ebp]
	mov	edx, DWORD PTR _res$[ebp+4]
	jmp	$LN10@ConvertStr@3
$LN5@ConvertStr@3:
	cmp	DWORD PTR _res$[ebp+4], 429496729	; 19999999H
	jb	SHORT $LN2@ConvertStr@3
	ja	SHORT $LN12@ConvertStr@3
	cmp	DWORD PTR _res$[ebp], -1717986919	; 99999999H
	jbe	SHORT $LN2@ConvertStr@3
$LN12@ConvertStr@3:
	xor	eax, eax
	xor	edx, edx
	jmp	SHORT $LN10@ConvertStr@3
$LN2@ConvertStr@3:
	push	0
	push	10					; 0000000aH
	mov	eax, DWORD PTR _res$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	__allmul
	mov	DWORD PTR _res$[ebp], eax
	mov	DWORD PTR _res$[ebp+4], edx
	movzx	edx, BYTE PTR _c$65849[ebp]
	sub	edx, 48					; 00000030H
	mov	DWORD PTR _v$65855[ebp], edx
	mov	eax, DWORD PTR _v$65855[ebp]
	xor	ecx, ecx
	or	edx, -1
	sub	edx, eax
	mov	eax, -1
	sbb	eax, ecx
	mov	DWORD PTR tv145[ebp], edx
	mov	DWORD PTR tv145[ebp+4], eax
	mov	ecx, DWORD PTR _res$[ebp+4]
	cmp	ecx, DWORD PTR tv145[ebp+4]
	jb	SHORT $LN1@ConvertStr@3
	ja	SHORT $LN13@ConvertStr@3
	mov	edx, DWORD PTR _res$[ebp]
	cmp	edx, DWORD PTR tv145[ebp]
	jbe	SHORT $LN1@ConvertStr@3
$LN13@ConvertStr@3:
	xor	eax, eax
	xor	edx, edx
	jmp	SHORT $LN10@ConvertStr@3
$LN1@ConvertStr@3:
	mov	eax, DWORD PTR _v$65855[ebp]
	xor	ecx, ecx
	add	eax, DWORD PTR _res$[ebp]
	adc	ecx, DWORD PTR _res$[ebp+4]
	mov	DWORD PTR _res$[ebp], eax
	mov	DWORD PTR _res$[ebp+4], ecx
	jmp	$LN7@ConvertStr@3
$LN10@ConvertStr@3:
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?ConvertStringToUInt64@@YG_KPBDPAPBD@Z ENDP		; ConvertStringToUInt64
_TEXT	ENDS
PUBLIC	?ConvertStringToUInt64@@YG_KPB_WPAPB_W@Z	; ConvertStringToUInt64
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv145 = -24						; size = 8
_v$65872 = -16						; size = 4
_c$65866 = -12						; size = 2
_res$ = -8						; size = 8
_s$ = 8							; size = 4
_end$ = 12						; size = 4
?ConvertStringToUInt64@@YG_KPB_WPAPB_W@Z PROC		; ConvertStringToUInt64
; Line 27
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	cmp	DWORD PTR _end$[ebp], 0
	je	SHORT $LN9@ConvertStr@4
	mov	eax, DWORD PTR _end$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax], ecx
$LN9@ConvertStr@4:
	mov	DWORD PTR _res$[ebp], 0
	mov	DWORD PTR _res$[ebp+4], 0
	jmp	SHORT $LN8@ConvertStr@4
$LN7@ConvertStr@4:
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, 2
	mov	DWORD PTR _s$[ebp], edx
$LN8@ConvertStr@4:
	mov	eax, DWORD PTR _s$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _c$65866[ebp], cx
	movzx	edx, WORD PTR _c$65866[ebp]
	cmp	edx, 48					; 00000030H
	jl	SHORT $LN4@ConvertStr@4
	movzx	eax, WORD PTR _c$65866[ebp]
	cmp	eax, 57					; 00000039H
	jle	SHORT $LN5@ConvertStr@4
$LN4@ConvertStr@4:
	cmp	DWORD PTR _end$[ebp], 0
	je	SHORT $LN3@ConvertStr@4
	mov	ecx, DWORD PTR _end$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx], edx
$LN3@ConvertStr@4:
	mov	eax, DWORD PTR _res$[ebp]
	mov	edx, DWORD PTR _res$[ebp+4]
	jmp	$LN10@ConvertStr@4
$LN5@ConvertStr@4:
	cmp	DWORD PTR _res$[ebp+4], 429496729	; 19999999H
	jb	SHORT $LN2@ConvertStr@4
	ja	SHORT $LN12@ConvertStr@4
	cmp	DWORD PTR _res$[ebp], -1717986919	; 99999999H
	jbe	SHORT $LN2@ConvertStr@4
$LN12@ConvertStr@4:
	xor	eax, eax
	xor	edx, edx
	jmp	SHORT $LN10@ConvertStr@4
$LN2@ConvertStr@4:
	push	0
	push	10					; 0000000aH
	mov	eax, DWORD PTR _res$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	__allmul
	mov	DWORD PTR _res$[ebp], eax
	mov	DWORD PTR _res$[ebp+4], edx
	movzx	edx, WORD PTR _c$65866[ebp]
	sub	edx, 48					; 00000030H
	mov	DWORD PTR _v$65872[ebp], edx
	mov	eax, DWORD PTR _v$65872[ebp]
	xor	ecx, ecx
	or	edx, -1
	sub	edx, eax
	mov	eax, -1
	sbb	eax, ecx
	mov	DWORD PTR tv145[ebp], edx
	mov	DWORD PTR tv145[ebp+4], eax
	mov	ecx, DWORD PTR _res$[ebp+4]
	cmp	ecx, DWORD PTR tv145[ebp+4]
	jb	SHORT $LN1@ConvertStr@4
	ja	SHORT $LN13@ConvertStr@4
	mov	edx, DWORD PTR _res$[ebp]
	cmp	edx, DWORD PTR tv145[ebp]
	jbe	SHORT $LN1@ConvertStr@4
$LN13@ConvertStr@4:
	xor	eax, eax
	xor	edx, edx
	jmp	SHORT $LN10@ConvertStr@4
$LN1@ConvertStr@4:
	mov	eax, DWORD PTR _v$65872[ebp]
	xor	ecx, ecx
	add	eax, DWORD PTR _res$[ebp]
	adc	ecx, DWORD PTR _res$[ebp+4]
	mov	DWORD PTR _res$[ebp], eax
	mov	DWORD PTR _res$[ebp+4], ecx
	jmp	$LN7@ConvertStr@4
$LN10@ConvertStr@4:
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?ConvertStringToUInt64@@YG_KPB_WPAPB_W@Z ENDP		; ConvertStringToUInt64
_TEXT	ENDS
PUBLIC	?ConvertStringToInt32@@YGHPB_WPAPB_W@Z		; ConvertStringToInt32
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_res$ = -20						; size = 4
_end2$ = -12						; size = 4
_s2$ = -4						; size = 4
_s$ = 8							; size = 4
_end$ = 12						; size = 4
?ConvertStringToInt32@@YGHPB_WPAPB_W@Z PROC		; ConvertStringToInt32
; Line 30
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 31
	cmp	DWORD PTR _end$[ebp], 0
	je	SHORT $LN9@ConvertStr@5
; Line 32
	mov	eax, DWORD PTR _end$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax], ecx
$LN9@ConvertStr@5:
; Line 33
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR _s2$[ebp], edx
; Line 34
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 45					; 0000002dH
	jne	SHORT $LN8@ConvertStr@5
; Line 35
	mov	edx, DWORD PTR _s2$[ebp]
	add	edx, 2
	mov	DWORD PTR _s2$[ebp], edx
$LN8@ConvertStr@5:
; Line 36
	mov	eax, DWORD PTR _s2$[ebp]
	movzx	ecx, WORD PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN7@ConvertStr@5
; Line 37
	xor	eax, eax
	jmp	SHORT $LN10@ConvertStr@5
$LN7@ConvertStr@5:
; Line 39
	lea	edx, DWORD PTR _end2$[ebp]
	push	edx
	mov	eax, DWORD PTR _s2$[ebp]
	push	eax
	call	?ConvertStringToUInt32@@YGIPB_WPAPB_W@Z	; ConvertStringToUInt32
	mov	DWORD PTR _res$[ebp], eax
; Line 40
	mov	ecx, DWORD PTR _s$[ebp]
	movzx	edx, WORD PTR [ecx]
	cmp	edx, 45					; 0000002dH
	jne	SHORT $LN6@ConvertStr@5
; Line 42
	cmp	DWORD PTR _res$[ebp], -2147483648	; 80000000H
	jbe	SHORT $LN5@ConvertStr@5
; Line 43
	xor	eax, eax
	jmp	SHORT $LN10@ConvertStr@5
$LN5@ConvertStr@5:
; Line 44
	jmp	SHORT $LN4@ConvertStr@5
$LN6@ConvertStr@5:
; Line 45
	mov	eax, DWORD PTR _res$[ebp]
	and	eax, -2147483648			; 80000000H
	je	SHORT $LN4@ConvertStr@5
; Line 46
	xor	eax, eax
	jmp	SHORT $LN10@ConvertStr@5
$LN4@ConvertStr@5:
; Line 47
	cmp	DWORD PTR _end$[ebp], 0
	je	SHORT $LN2@ConvertStr@5
; Line 48
	mov	ecx, DWORD PTR _end$[ebp]
	mov	edx, DWORD PTR _end2$[ebp]
	mov	DWORD PTR [ecx], edx
$LN2@ConvertStr@5:
; Line 49
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 45					; 0000002dH
	jne	SHORT $LN1@ConvertStr@5
; Line 50
	mov	eax, DWORD PTR _res$[ebp]
	neg	eax
	jmp	SHORT $LN10@ConvertStr@5
$LN1@ConvertStr@5:
; Line 51
	mov	eax, DWORD PTR _res$[ebp]
$LN10@ConvertStr@5:
; Line 52
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@ConvertStr@5
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN14@ConvertStr@5:
	DD	1
	DD	$LN13@ConvertStr@5
$LN13@ConvertStr@5:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN12@ConvertStr@5
$LN12@ConvertStr@5:
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	50					; 00000032H
	DB	0
?ConvertStringToInt32@@YGHPB_WPAPB_W@Z ENDP		; ConvertStringToInt32
_TEXT	ENDS
PUBLIC	?ConvertOctStringToUInt32@@YGIPBDPAPBD@Z	; ConvertOctStringToUInt32
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_c$65903 = -8						; size = 4
_res$ = -4						; size = 4
_s$ = 8							; size = 4
_end$ = 12						; size = 4
?ConvertOctStringToUInt32@@YGIPBDPAPBD@Z PROC		; ConvertOctStringToUInt32
; Line 55
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 56
	cmp	DWORD PTR _end$[ebp], 0
	je	SHORT $LN8@ConvertOct
; Line 57
	mov	eax, DWORD PTR _end$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax], ecx
$LN8@ConvertOct:
; Line 58
	mov	DWORD PTR _res$[ebp], 0
	jmp	SHORT $LN7@ConvertOct
$LN6@ConvertOct:
; Line 59
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, 1
	mov	DWORD PTR _s$[ebp], edx
$LN7@ConvertOct:
; Line 61
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _c$65903[ebp], ecx
; Line 62
	cmp	DWORD PTR _c$65903[ebp], 48		; 00000030H
	jb	SHORT $LN3@ConvertOct
	cmp	DWORD PTR _c$65903[ebp], 55		; 00000037H
	jbe	SHORT $LN4@ConvertOct
$LN3@ConvertOct:
; Line 64
	cmp	DWORD PTR _end$[ebp], 0
	je	SHORT $LN2@ConvertOct
; Line 65
	mov	edx, DWORD PTR _end$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx], eax
$LN2@ConvertOct:
; Line 66
	mov	eax, DWORD PTR _res$[ebp]
	jmp	SHORT $LN9@ConvertOct
$LN4@ConvertOct:
; Line 68
	mov	ecx, DWORD PTR _res$[ebp]
	and	ecx, -536870912				; e0000000H
	je	SHORT $LN1@ConvertOct
; Line 69
	xor	eax, eax
	jmp	SHORT $LN9@ConvertOct
$LN1@ConvertOct:
; Line 70
	mov	edx, DWORD PTR _res$[ebp]
	shl	edx, 3
	mov	DWORD PTR _res$[ebp], edx
; Line 71
	mov	eax, DWORD PTR _c$65903[ebp]
	sub	eax, 48					; 00000030H
	or	eax, DWORD PTR _res$[ebp]
	mov	DWORD PTR _res$[ebp], eax
; Line 72
	jmp	SHORT $LN6@ConvertOct
$LN9@ConvertOct:
; Line 73
	mov	esp, ebp
	pop	ebp
	ret	8
?ConvertOctStringToUInt32@@YGIPBDPAPBD@Z ENDP		; ConvertOctStringToUInt32
_TEXT	ENDS
PUBLIC	?ConvertOctStringToUInt64@@YG_KPBDPAPBD@Z	; ConvertOctStringToUInt64
EXTRN	__allshl:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv88 = -20						; size = 8
_c$65920 = -12						; size = 4
_res$ = -8						; size = 8
_s$ = 8							; size = 4
_end$ = 12						; size = 4
?ConvertOctStringToUInt64@@YG_KPBDPAPBD@Z PROC		; ConvertOctStringToUInt64
; Line 76
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 77
	cmp	DWORD PTR _end$[ebp], 0
	je	SHORT $LN8@ConvertOct@2
; Line 78
	mov	eax, DWORD PTR _end$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax], ecx
$LN8@ConvertOct@2:
; Line 79
	mov	DWORD PTR _res$[ebp], 0
	mov	DWORD PTR _res$[ebp+4], 0
	jmp	SHORT $LN7@ConvertOct@2
$LN6@ConvertOct@2:
; Line 80
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, 1
	mov	DWORD PTR _s$[ebp], edx
$LN7@ConvertOct@2:
; Line 82
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _c$65920[ebp], ecx
; Line 83
	cmp	DWORD PTR _c$65920[ebp], 48		; 00000030H
	jb	SHORT $LN3@ConvertOct@2
	cmp	DWORD PTR _c$65920[ebp], 55		; 00000037H
	jbe	SHORT $LN4@ConvertOct@2
$LN3@ConvertOct@2:
; Line 85
	cmp	DWORD PTR _end$[ebp], 0
	je	SHORT $LN2@ConvertOct@2
; Line 86
	mov	edx, DWORD PTR _end$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx], eax
$LN2@ConvertOct@2:
; Line 87
	mov	eax, DWORD PTR _res$[ebp]
	mov	edx, DWORD PTR _res$[ebp+4]
	jmp	SHORT $LN9@ConvertOct@2
$LN4@ConvertOct@2:
; Line 89
	mov	ecx, DWORD PTR _res$[ebp]
	and	ecx, 0
	mov	edx, DWORD PTR _res$[ebp+4]
	and	edx, -536870912				; e0000000H
	mov	DWORD PTR tv88[ebp], ecx
	mov	DWORD PTR tv88[ebp+4], edx
	mov	eax, DWORD PTR tv88[ebp]
	or	eax, DWORD PTR tv88[ebp+4]
	je	SHORT $LN1@ConvertOct@2
; Line 90
	xor	eax, eax
	xor	edx, edx
	jmp	SHORT $LN9@ConvertOct@2
$LN1@ConvertOct@2:
; Line 91
	mov	eax, DWORD PTR _res$[ebp]
	mov	edx, DWORD PTR _res$[ebp+4]
	mov	cl, 3
	call	__allshl
	mov	DWORD PTR _res$[ebp], eax
	mov	DWORD PTR _res$[ebp+4], edx
; Line 92
	mov	ecx, DWORD PTR _c$65920[ebp]
	sub	ecx, 48					; 00000030H
	xor	edx, edx
	or	ecx, DWORD PTR _res$[ebp]
	or	edx, DWORD PTR _res$[ebp+4]
	mov	DWORD PTR _res$[ebp], ecx
	mov	DWORD PTR _res$[ebp+4], edx
; Line 93
	jmp	SHORT $LN6@ConvertOct@2
$LN9@ConvertOct@2:
; Line 94
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?ConvertOctStringToUInt64@@YG_KPBDPAPBD@Z ENDP		; ConvertOctStringToUInt64
_TEXT	ENDS
PUBLIC	?ConvertHexStringToUInt32@@YGIPBDPAPBD@Z	; ConvertHexStringToUInt32
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_v$65939 = -12						; size = 4
_c$65937 = -8						; size = 4
_res$ = -4						; size = 4
_s$ = 8							; size = 4
_end$ = 12						; size = 4
?ConvertHexStringToUInt32@@YGIPBDPAPBD@Z PROC		; ConvertHexStringToUInt32
; Line 97
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 98
	cmp	DWORD PTR _end$[ebp], 0
	je	SHORT $LN12@ConvertHex
; Line 99
	mov	eax, DWORD PTR _end$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax], ecx
$LN12@ConvertHex:
; Line 100
	mov	DWORD PTR _res$[ebp], 0
	jmp	SHORT $LN11@ConvertHex
$LN10@ConvertHex:
; Line 101
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, 1
	mov	DWORD PTR _s$[ebp], edx
$LN11@ConvertHex:
; Line 103
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _c$65937[ebp], ecx
; Line 105
	cmp	DWORD PTR _c$65937[ebp], 48		; 00000030H
	jb	SHORT $LN8@ConvertHex
	cmp	DWORD PTR _c$65937[ebp], 57		; 00000039H
	ja	SHORT $LN8@ConvertHex
	mov	edx, DWORD PTR _c$65937[ebp]
	sub	edx, 48					; 00000030H
	mov	DWORD PTR _v$65939[ebp], edx
	jmp	SHORT $LN7@ConvertHex
$LN8@ConvertHex:
; Line 106
	cmp	DWORD PTR _c$65937[ebp], 65		; 00000041H
	jb	SHORT $LN6@ConvertHex
	cmp	DWORD PTR _c$65937[ebp], 70		; 00000046H
	ja	SHORT $LN6@ConvertHex
	mov	eax, DWORD PTR _c$65937[ebp]
	sub	eax, 55					; 00000037H
	mov	DWORD PTR _v$65939[ebp], eax
	jmp	SHORT $LN7@ConvertHex
$LN6@ConvertHex:
; Line 107
	cmp	DWORD PTR _c$65937[ebp], 97		; 00000061H
	jb	SHORT $LN4@ConvertHex
	cmp	DWORD PTR _c$65937[ebp], 102		; 00000066H
	ja	SHORT $LN4@ConvertHex
	mov	ecx, DWORD PTR _c$65937[ebp]
	sub	ecx, 87					; 00000057H
	mov	DWORD PTR _v$65939[ebp], ecx
; Line 108
	jmp	SHORT $LN7@ConvertHex
$LN4@ConvertHex:
; Line 110
	cmp	DWORD PTR _end$[ebp], 0
	je	SHORT $LN2@ConvertHex
; Line 111
	mov	edx, DWORD PTR _end$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx], eax
$LN2@ConvertHex:
; Line 112
	mov	eax, DWORD PTR _res$[ebp]
	jmp	SHORT $LN13@ConvertHex
$LN7@ConvertHex:
; Line 114
	mov	ecx, DWORD PTR _res$[ebp]
	and	ecx, -268435456				; f0000000H
	je	SHORT $LN1@ConvertHex
; Line 115
	xor	eax, eax
	jmp	SHORT $LN13@ConvertHex
$LN1@ConvertHex:
; Line 116
	mov	edx, DWORD PTR _res$[ebp]
	shl	edx, 4
	mov	DWORD PTR _res$[ebp], edx
; Line 117
	mov	eax, DWORD PTR _res$[ebp]
	or	eax, DWORD PTR _v$65939[ebp]
	mov	DWORD PTR _res$[ebp], eax
; Line 118
	jmp	$LN10@ConvertHex
$LN13@ConvertHex:
; Line 119
	mov	esp, ebp
	pop	ebp
	ret	8
?ConvertHexStringToUInt32@@YGIPBDPAPBD@Z ENDP		; ConvertHexStringToUInt32
_TEXT	ENDS
PUBLIC	?ConvertHexStringToUInt64@@YG_KPBDPAPBD@Z	; ConvertHexStringToUInt64
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv131 = -24						; size = 8
_v$65960 = -16						; size = 4
_c$65958 = -12						; size = 4
_res$ = -8						; size = 8
_s$ = 8							; size = 4
_end$ = 12						; size = 4
?ConvertHexStringToUInt64@@YG_KPBDPAPBD@Z PROC		; ConvertHexStringToUInt64
; Line 122
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 123
	cmp	DWORD PTR _end$[ebp], 0
	je	SHORT $LN12@ConvertHex@2
; Line 124
	mov	eax, DWORD PTR _end$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax], ecx
$LN12@ConvertHex@2:
; Line 125
	mov	DWORD PTR _res$[ebp], 0
	mov	DWORD PTR _res$[ebp+4], 0
	jmp	SHORT $LN11@ConvertHex@2
$LN10@ConvertHex@2:
; Line 126
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, 1
	mov	DWORD PTR _s$[ebp], edx
$LN11@ConvertHex@2:
; Line 128
	mov	eax, DWORD PTR _s$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _c$65958[ebp], ecx
; Line 130
	cmp	DWORD PTR _c$65958[ebp], 48		; 00000030H
	jb	SHORT $LN8@ConvertHex@2
	cmp	DWORD PTR _c$65958[ebp], 57		; 00000039H
	ja	SHORT $LN8@ConvertHex@2
	mov	edx, DWORD PTR _c$65958[ebp]
	sub	edx, 48					; 00000030H
	mov	DWORD PTR _v$65960[ebp], edx
	jmp	SHORT $LN7@ConvertHex@2
$LN8@ConvertHex@2:
; Line 131
	cmp	DWORD PTR _c$65958[ebp], 65		; 00000041H
	jb	SHORT $LN6@ConvertHex@2
	cmp	DWORD PTR _c$65958[ebp], 70		; 00000046H
	ja	SHORT $LN6@ConvertHex@2
	mov	eax, DWORD PTR _c$65958[ebp]
	sub	eax, 55					; 00000037H
	mov	DWORD PTR _v$65960[ebp], eax
	jmp	SHORT $LN7@ConvertHex@2
$LN6@ConvertHex@2:
; Line 132
	cmp	DWORD PTR _c$65958[ebp], 97		; 00000061H
	jb	SHORT $LN4@ConvertHex@2
	cmp	DWORD PTR _c$65958[ebp], 102		; 00000066H
	ja	SHORT $LN4@ConvertHex@2
	mov	ecx, DWORD PTR _c$65958[ebp]
	sub	ecx, 87					; 00000057H
	mov	DWORD PTR _v$65960[ebp], ecx
; Line 133
	jmp	SHORT $LN7@ConvertHex@2
$LN4@ConvertHex@2:
; Line 135
	cmp	DWORD PTR _end$[ebp], 0
	je	SHORT $LN2@ConvertHex@2
; Line 136
	mov	edx, DWORD PTR _end$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx], eax
$LN2@ConvertHex@2:
; Line 137
	mov	eax, DWORD PTR _res$[ebp]
	mov	edx, DWORD PTR _res$[ebp+4]
	jmp	SHORT $LN13@ConvertHex@2
$LN7@ConvertHex@2:
; Line 139
	mov	ecx, DWORD PTR _res$[ebp]
	and	ecx, 0
	mov	edx, DWORD PTR _res$[ebp+4]
	and	edx, -268435456				; f0000000H
	mov	DWORD PTR tv131[ebp], ecx
	mov	DWORD PTR tv131[ebp+4], edx
	mov	eax, DWORD PTR tv131[ebp]
	or	eax, DWORD PTR tv131[ebp+4]
	je	SHORT $LN1@ConvertHex@2
; Line 140
	xor	eax, eax
	xor	edx, edx
	jmp	SHORT $LN13@ConvertHex@2
$LN1@ConvertHex@2:
; Line 141
	mov	eax, DWORD PTR _res$[ebp]
	mov	edx, DWORD PTR _res$[ebp+4]
	mov	cl, 4
	call	__allshl
	mov	DWORD PTR _res$[ebp], eax
	mov	DWORD PTR _res$[ebp+4], edx
; Line 142
	mov	ecx, DWORD PTR _v$65960[ebp]
	xor	edx, edx
	or	ecx, DWORD PTR _res$[ebp]
	or	edx, DWORD PTR _res$[ebp+4]
	mov	DWORD PTR _res$[ebp], ecx
	mov	DWORD PTR _res$[ebp+4], edx
; Line 143
	jmp	$LN10@ConvertHex@2
$LN13@ConvertHex@2:
; Line 144
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?ConvertHexStringToUInt64@@YG_KPBDPAPBD@Z ENDP		; ConvertHexStringToUInt64
_TEXT	ENDS
END
