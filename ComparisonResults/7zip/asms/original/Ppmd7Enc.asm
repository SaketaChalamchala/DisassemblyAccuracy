; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\C\Ppmd7Enc.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_Ppmd7z_RangeEnc_Init@4
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\c\ppmd7enc.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_p$ = 8							; size = 4
_Ppmd7z_RangeEnc_Init@4 PROC
; Line 12
	push	ebp
	mov	ebp, esp
; Line 13
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0
; Line 14
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+8], -1
; Line 15
	mov	edx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [edx+12], 0
; Line 16
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+16], 1
	mov	DWORD PTR [eax+20], 0
; Line 17
	pop	ebp
	ret	4
_Ppmd7z_RangeEnc_Init@4 ENDP
_TEXT	ENDS
PUBLIC	_Ppmd7z_RangeEnc_FlushData@4
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$ = -4						; size = 4
_p$ = 8							; size = 4
_Ppmd7z_RangeEnc_FlushData@4 PROC
; Line 70
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 72
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@Ppmd7z_Ran
$LN2@Ppmd7z_Ran:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@Ppmd7z_Ran:
	cmp	DWORD PTR _i$[ebp], 5
	jae	SHORT $LN4@Ppmd7z_Ran
; Line 73
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_RangeEnc_ShiftLow@4
	jmp	SHORT $LN2@Ppmd7z_Ran
$LN4@Ppmd7z_Ran:
; Line 74
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_Ppmd7z_RangeEnc_FlushData@4 ENDP
_TEXT	ENDS
EXTRN	__aullshr:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv83 = -12						; size = 8
_temp$2818 = -1						; size = 1
_p$ = 8							; size = 4
_RangeEnc_ShiftLow@4 PROC
; Line 20
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	push	edi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 21
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax], -16777216		; ff000000H
	jb	SHORT $LN4@RangeEnc_S
	mov	ecx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	mov	cl, 32					; 00000020H
	call	__aullshr
	test	eax, eax
	je	SHORT $LN5@RangeEnc_S
$LN4@RangeEnc_S:
; Line 23
	mov	edx, DWORD PTR _p$[ebp]
	mov	al, BYTE PTR [edx+12]
	mov	BYTE PTR _temp$2818[ebp], al
$LN3@RangeEnc_S:
; Line 26
	movzx	esi, BYTE PTR _temp$2818[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	mov	cl, 32					; 00000020H
	call	__aullshr
	movzx	edx, al
	add	esi, edx
	mov	edi, esp
	push	esi
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	edi, esp
	call	__RTC_CheckEsp
; Line 27
	mov	BYTE PTR _temp$2818[ebp], 255		; 000000ffH
; Line 29
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, 1
	mov	DWORD PTR tv83[ebp], eax
	mov	ecx, DWORD PTR [edx+20]
	sbb	ecx, 0
	mov	DWORD PTR tv83[ebp+4], ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR tv83[ebp]
	mov	DWORD PTR [edx+16], eax
	mov	ecx, DWORD PTR tv83[ebp+4]
	mov	DWORD PTR [edx+20], ecx
	mov	edx, DWORD PTR tv83[ebp]
	or	edx, DWORD PTR tv83[ebp+4]
	jne	SHORT $LN3@RangeEnc_S
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	shr	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _p$[ebp]
	mov	BYTE PTR [edx+12], cl
$LN5@RangeEnc_S:
; Line 32
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+20]
	adc	edx, 0
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+16], ecx
	mov	DWORD PTR [eax+20], edx
; Line 33
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	shl	edx, 8
	xor	eax, eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
; Line 34
	pop	edi
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_RangeEnc_ShiftLow@4 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_Ppmd7_EncodeSymbol@12
EXTRN	_Ppmd7_Update2@4:PROC
EXTRN	_Ppmd7_MakeEscFreq@12:PROC
EXTRN	_PPMD7_kExpEscape:BYTE
EXTRN	_Ppmd7_UpdateBin@4:PROC
EXTRN	_Ppmd7_Update1@4:PROC
EXTRN	_Ppmd7_Update1_0@4:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv325 = -345						; size = 1
tv209 = -344						; size = 4
_s1$2929 = -340						; size = 4
_low$2928 = -336					; size = 4
_cur$2926 = -332					; size = 4
_numMasked$2918 = -328					; size = 4
_i$2917 = -324						; size = 4
_sum$2916 = -320					; size = 4
_s$2915 = -316						; size = 4
_see$2914 = -312					; size = 4
_escFreq$2913 = -304					; size = 4
_i$2904 = -296						; size = 4
_s$2898 = -292						; size = 4
_prob$2895 = -288					; size = 4
_i$2884 = -284						; size = 4
_i$2878 = -280						; size = 4
_sum$2877 = -276					; size = 4
_s$2876 = -272						; size = 4
_charMask$ = -264					; size = 256
__$ArrayPad$ = -4					; size = 4
_p$ = 8							; size = 4
_rc$ = 12						; size = 4
_symbol$ = 16						; size = 4
_Ppmd7_EncodeSymbol@12 PROC
; Line 80
	push	ebp
	mov	ebp, esp
	sub	esp, 348				; 0000015cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-348]
	mov	ecx, 87					; 00000057H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 82
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, WORD PTR [ecx]
	cmp	edx, 1
	je	$LN32@Ppmd7_Enco
; Line 84
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _s$2876[ebp], edx
; Line 87
	mov	eax, DWORD PTR _s$2876[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, DWORD PTR _symbol$[ebp]
	jne	SHORT $LN31@Ppmd7_Enco
; Line 89
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, WORD PTR [eax+2]
	push	ecx
	mov	edx, DWORD PTR _s$2876[ebp]
	movzx	eax, BYTE PTR [edx+1]
	push	eax
	push	0
	mov	ecx, DWORD PTR _rc$[ebp]
	push	ecx
	call	_RangeEnc_Encode@16
; Line 90
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _s$2876[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 91
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_Ppmd7_Update1_0@4
; Line 92
	jmp	$LN33@Ppmd7_Enco
$LN31@Ppmd7_Enco:
; Line 94
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+20], 0
; Line 95
	mov	eax, DWORD PTR _s$2876[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	mov	DWORD PTR _sum$2877[ebp], ecx
; Line 96
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, WORD PTR [eax]
	sub	ecx, 1
	mov	DWORD PTR _i$2878[ebp], ecx
$LN30@Ppmd7_Enco:
; Line 99
	mov	edx, DWORD PTR _s$2876[ebp]
	add	edx, 6
	mov	DWORD PTR _s$2876[ebp], edx
	mov	eax, DWORD PTR _s$2876[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, DWORD PTR _symbol$[ebp]
	jne	SHORT $LN27@Ppmd7_Enco
; Line 101
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, WORD PTR [eax+2]
	push	ecx
	mov	edx, DWORD PTR _s$2876[ebp]
	movzx	eax, BYTE PTR [edx+1]
	push	eax
	mov	ecx, DWORD PTR _sum$2877[ebp]
	push	ecx
	mov	edx, DWORD PTR _rc$[ebp]
	push	edx
	call	_RangeEnc_Encode@16
; Line 102
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _s$2876[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 103
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_Ppmd7_Update1@4
; Line 104
	jmp	$LN33@Ppmd7_Enco
$LN27@Ppmd7_Enco:
; Line 106
	mov	eax, DWORD PTR _s$2876[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	add	ecx, DWORD PTR _sum$2877[ebp]
	mov	DWORD PTR _sum$2877[ebp], ecx
; Line 108
	mov	edx, DWORD PTR _i$2878[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$2878[ebp], edx
	jne	$LN30@Ppmd7_Enco
; Line 110
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movzx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+904]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+28], ecx
; Line 111
	mov	DWORD PTR _i$2884[ebp], 0
	jmp	SHORT $LN26@Ppmd7_Enco
$LN25@Ppmd7_Enco:
	mov	eax, DWORD PTR _i$2884[ebp]
	add	eax, 8
	mov	DWORD PTR _i$2884[ebp], eax
$LN26@Ppmd7_Enco:
	cmp	DWORD PTR _i$2884[ebp], 64		; 00000040H
	jae	$LN24@Ppmd7_Enco
	mov	ecx, DWORD PTR _i$2884[ebp]
	mov	DWORD PTR _charMask$[ebp+ecx*4], -1
	mov	edx, DWORD PTR _i$2884[ebp]
	mov	DWORD PTR _charMask$[ebp+edx*4+4], -1
	mov	eax, DWORD PTR _i$2884[ebp]
	mov	DWORD PTR _charMask$[ebp+eax*4+8], -1
	mov	ecx, DWORD PTR _i$2884[ebp]
	mov	DWORD PTR _charMask$[ebp+ecx*4+12], -1
	mov	edx, DWORD PTR _i$2884[ebp]
	mov	DWORD PTR _charMask$[ebp+edx*4+16], -1
	mov	eax, DWORD PTR _i$2884[ebp]
	mov	DWORD PTR _charMask$[ebp+eax*4+20], -1
	mov	ecx, DWORD PTR _i$2884[ebp]
	mov	DWORD PTR _charMask$[ebp+ecx*4+24], -1
	mov	edx, DWORD PTR _i$2884[ebp]
	mov	DWORD PTR _charMask$[ebp+edx*4+28], -1
	jmp	$LN25@Ppmd7_Enco
$LN24@Ppmd7_Enco:
; Line 112
	mov	eax, DWORD PTR _s$2876[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	BYTE PTR _charMask$[ebp+ecx], 0
; Line 113
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, WORD PTR [eax]
	sub	ecx, 1
	mov	DWORD PTR _i$2878[ebp], ecx
$LN23@Ppmd7_Enco:
; Line 114
	mov	edx, DWORD PTR _s$2876[ebp]
	sub	edx, 6
	mov	DWORD PTR _s$2876[ebp], edx
	mov	eax, DWORD PTR _s$2876[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	BYTE PTR _charMask$[ebp+ecx], 0
	mov	edx, DWORD PTR _i$2878[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$2878[ebp], edx
	jne	SHORT $LN23@Ppmd7_Enco
; Line 115
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, WORD PTR [ecx+2]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, WORD PTR [ecx+2]
	sub	edx, DWORD PTR _sum$2877[ebp]
	push	edx
	mov	eax, DWORD PTR _sum$2877[ebp]
	push	eax
	mov	ecx, DWORD PTR _rc$[ebp]
	push	ecx
	call	_RangeEnc_Encode@16
; Line 117
	jmp	$LN14@Ppmd7_Enco
$LN32@Ppmd7_Enco:
; Line 119
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+904]
	mov	DWORD PTR tv209[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR tv209[ebp]
	mov	DWORD PTR [ecx+28], edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	sar	ecx, 26					; 0000001aH
	and	ecx, 32					; 00000020H
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	edx, BYTE PTR [eax+2]
	mov	eax, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [eax+edx+904]
	mov	eax, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+8]
	movzx	eax, WORD PTR [eax]
	mov	esi, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [esi+eax+647]
	mov	esi, DWORD PTR _p$[ebp]
	mov	esi, DWORD PTR [esi+20]
	add	esi, eax
	add	esi, DWORD PTR tv209[ebp]
	lea	edx, DWORD PTR [esi+edx*2]
	add	edx, ecx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	eax, BYTE PTR [ecx+3]
	sub	eax, 1
	shl	eax, 7
	mov	ecx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [ecx+eax+2764]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _prob$2895[ebp], ecx
; Line 120
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 2
	mov	DWORD PTR _s$2898[ebp], eax
; Line 121
	mov	ecx, DWORD PTR _s$2898[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, DWORD PTR _symbol$[ebp]
	jne	SHORT $LN19@Ppmd7_Enco
; Line 123
	mov	eax, DWORD PTR _prob$2895[ebp]
	movzx	ecx, WORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _rc$[ebp]
	push	edx
	call	_RangeEnc_EncodeBit_0@8
; Line 124
	mov	eax, DWORD PTR _prob$2895[ebp]
	movzx	ecx, WORD PTR [eax]
	add	ecx, 128				; 00000080H
	mov	edx, DWORD PTR _prob$2895[ebp]
	movzx	eax, WORD PTR [edx]
	add	eax, 32					; 00000020H
	sar	eax, 7
	sub	ecx, eax
	mov	edx, DWORD PTR _prob$2895[ebp]
	mov	WORD PTR [edx], cx
; Line 125
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _s$2898[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 126
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_Ppmd7_UpdateBin@4
; Line 127
	jmp	$LN33@Ppmd7_Enco
; Line 129
	jmp	$LN14@Ppmd7_Enco
$LN19@Ppmd7_Enco:
; Line 131
	mov	eax, DWORD PTR _prob$2895[ebp]
	movzx	ecx, WORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _rc$[ebp]
	push	edx
	call	_RangeEnc_EncodeBit_1@8
; Line 132
	mov	eax, DWORD PTR _prob$2895[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	edx, DWORD PTR _prob$2895[ebp]
	movzx	eax, WORD PTR [edx]
	add	eax, 32					; 00000020H
	sar	eax, 7
	sub	ecx, eax
	mov	edx, DWORD PTR _prob$2895[ebp]
	mov	WORD PTR [edx], cx
; Line 133
	mov	eax, DWORD PTR _prob$2895[ebp]
	movzx	ecx, WORD PTR [eax]
	sar	ecx, 10					; 0000000aH
	movzx	edx, BYTE PTR _PPMD7_kExpEscape[ecx]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+16], edx
; Line 134
	mov	DWORD PTR _i$2904[ebp], 0
	jmp	SHORT $LN17@Ppmd7_Enco
$LN16@Ppmd7_Enco:
	mov	ecx, DWORD PTR _i$2904[ebp]
	add	ecx, 8
	mov	DWORD PTR _i$2904[ebp], ecx
$LN17@Ppmd7_Enco:
	cmp	DWORD PTR _i$2904[ebp], 64		; 00000040H
	jae	$LN15@Ppmd7_Enco
	mov	edx, DWORD PTR _i$2904[ebp]
	mov	DWORD PTR _charMask$[ebp+edx*4], -1
	mov	eax, DWORD PTR _i$2904[ebp]
	mov	DWORD PTR _charMask$[ebp+eax*4+4], -1
	mov	ecx, DWORD PTR _i$2904[ebp]
	mov	DWORD PTR _charMask$[ebp+ecx*4+8], -1
	mov	edx, DWORD PTR _i$2904[ebp]
	mov	DWORD PTR _charMask$[ebp+edx*4+12], -1
	mov	eax, DWORD PTR _i$2904[ebp]
	mov	DWORD PTR _charMask$[ebp+eax*4+16], -1
	mov	ecx, DWORD PTR _i$2904[ebp]
	mov	DWORD PTR _charMask$[ebp+ecx*4+20], -1
	mov	edx, DWORD PTR _i$2904[ebp]
	mov	DWORD PTR _charMask$[ebp+edx*4+24], -1
	mov	eax, DWORD PTR _i$2904[ebp]
	mov	DWORD PTR _charMask$[ebp+eax*4+28], -1
	jmp	$LN16@Ppmd7_Enco
$LN15@Ppmd7_Enco:
; Line 135
	mov	ecx, DWORD PTR _s$2898[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	BYTE PTR _charMask$[ebp+edx], 0
; Line 136
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+20], 0
$LN14@Ppmd7_Enco:
; Line 145
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, WORD PTR [edx]
	mov	DWORD PTR _numMasked$2918[ebp], eax
$LN12@Ppmd7_Enco:
; Line 148
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+12], edx
; Line 149
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx+8], 0
	jne	SHORT $LN9@Ppmd7_Enco
; Line 150
	jmp	$LN33@Ppmd7_Enco
$LN9@Ppmd7_Enco:
; Line 151
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx], eax
; Line 153
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, WORD PTR [edx]
	cmp	eax, DWORD PTR _numMasked$2918[ebp]
	je	SHORT $LN12@Ppmd7_Enco
; Line 155
	lea	ecx, DWORD PTR _escFreq$2913[ebp]
	push	ecx
	mov	edx, DWORD PTR _numMasked$2918[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_Ppmd7_MakeEscFreq@12
	mov	DWORD PTR _see$2914[ebp], eax
; Line 156
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _s$2915[ebp], eax
; Line 157
	mov	DWORD PTR _sum$2916[ebp], 0
; Line 158
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, WORD PTR [edx]
	mov	DWORD PTR _i$2917[ebp], eax
$LN8@Ppmd7_Enco:
; Line 161
	mov	ecx, DWORD PTR _s$2915[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _cur$2926[ebp], edx
; Line 162
	mov	eax, DWORD PTR _cur$2926[ebp]
	cmp	eax, DWORD PTR _symbol$[ebp]
	jne	$LN5@Ppmd7_Enco
; Line 164
	mov	ecx, DWORD PTR _sum$2916[ebp]
	mov	DWORD PTR _low$2928[ebp], ecx
; Line 165
	mov	edx, DWORD PTR _s$2915[ebp]
	mov	DWORD PTR _s1$2929[ebp], edx
$LN4@Ppmd7_Enco:
; Line 168
	mov	eax, DWORD PTR _s$2915[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	mov	edx, DWORD PTR _s$2915[ebp]
	movzx	eax, BYTE PTR [edx]
	movsx	edx, BYTE PTR _charMask$[ebp+eax]
	and	ecx, edx
	add	ecx, DWORD PTR _sum$2916[ebp]
	mov	DWORD PTR _sum$2916[ebp], ecx
; Line 169
	mov	eax, DWORD PTR _s$2915[ebp]
	add	eax, 6
	mov	DWORD PTR _s$2915[ebp], eax
; Line 171
	mov	ecx, DWORD PTR _i$2917[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$2917[ebp], ecx
	jne	SHORT $LN4@Ppmd7_Enco
; Line 172
	mov	edx, DWORD PTR _sum$2916[ebp]
	add	edx, DWORD PTR _escFreq$2913[ebp]
	push	edx
	mov	eax, DWORD PTR _s1$2929[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	push	ecx
	mov	edx, DWORD PTR _low$2928[ebp]
	push	edx
	mov	eax, DWORD PTR _rc$[ebp]
	push	eax
	call	_RangeEnc_Encode@16
; Line 173
	mov	ecx, DWORD PTR _see$2914[ebp]
	movzx	edx, BYTE PTR [ecx+2]
	cmp	edx, 7
	jge	SHORT $LN1@Ppmd7_Enco
	mov	eax, DWORD PTR _see$2914[ebp]
	mov	cl, BYTE PTR [eax+3]
	sub	cl, 1
	mov	BYTE PTR tv325[ebp], cl
	mov	edx, DWORD PTR _see$2914[ebp]
	mov	al, BYTE PTR tv325[ebp]
	mov	BYTE PTR [edx+3], al
	movzx	ecx, BYTE PTR tv325[ebp]
	test	ecx, ecx
	jne	SHORT $LN1@Ppmd7_Enco
	mov	edx, DWORD PTR _see$2914[ebp]
	mov	ax, WORD PTR [edx]
	shl	ax, 1
	mov	ecx, DWORD PTR _see$2914[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _see$2914[ebp]
	movzx	ecx, BYTE PTR [edx+2]
	mov	eax, 3
	shl	eax, cl
	mov	ecx, DWORD PTR _see$2914[ebp]
	mov	BYTE PTR [ecx+3], al
	mov	edx, DWORD PTR _see$2914[ebp]
	mov	al, BYTE PTR [edx+2]
	add	al, 1
	mov	ecx, DWORD PTR _see$2914[ebp]
	mov	BYTE PTR [ecx+2], al
$LN1@Ppmd7_Enco:
; Line 174
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _s1$2929[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 175
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_Ppmd7_Update2@4
; Line 176
	jmp	$LN33@Ppmd7_Enco
$LN5@Ppmd7_Enco:
; Line 178
	mov	edx, DWORD PTR _s$2915[ebp]
	movzx	eax, BYTE PTR [edx+1]
	mov	ecx, DWORD PTR _cur$2926[ebp]
	movsx	edx, BYTE PTR _charMask$[ebp+ecx]
	and	eax, edx
	add	eax, DWORD PTR _sum$2916[ebp]
	mov	DWORD PTR _sum$2916[ebp], eax
; Line 179
	mov	eax, DWORD PTR _cur$2926[ebp]
	mov	BYTE PTR _charMask$[ebp+eax], 0
; Line 180
	mov	ecx, DWORD PTR _s$2915[ebp]
	add	ecx, 6
	mov	DWORD PTR _s$2915[ebp], ecx
; Line 182
	mov	edx, DWORD PTR _i$2917[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$2917[ebp], edx
	jne	$LN8@Ppmd7_Enco
; Line 184
	mov	eax, DWORD PTR _sum$2916[ebp]
	add	eax, DWORD PTR _escFreq$2913[ebp]
	push	eax
	mov	ecx, DWORD PTR _escFreq$2913[ebp]
	push	ecx
	mov	edx, DWORD PTR _sum$2916[ebp]
	push	edx
	mov	eax, DWORD PTR _rc$[ebp]
	push	eax
	call	_RangeEnc_Encode@16
; Line 185
	mov	ecx, DWORD PTR _see$2914[ebp]
	movzx	edx, WORD PTR [ecx]
	add	edx, DWORD PTR _sum$2916[ebp]
	add	edx, DWORD PTR _escFreq$2913[ebp]
	mov	eax, DWORD PTR _see$2914[ebp]
	mov	WORD PTR [eax], dx
; Line 186
	jmp	$LN14@Ppmd7_Enco
$LN33@Ppmd7_Enco:
; Line 187
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN38@Ppmd7_Enco
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 348				; 0000015cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN38@Ppmd7_Enco:
	DD	2
	DD	$LN37@Ppmd7_Enco
$LN37@Ppmd7_Enco:
	DD	-264					; fffffef8H
	DD	256					; 00000100H
	DD	$LN35@Ppmd7_Enco
	DD	-304					; fffffed0H
	DD	4
	DD	$LN36@Ppmd7_Enco
$LN36@Ppmd7_Enco:
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	70					; 00000046H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	113					; 00000071H
	DB	0
$LN35@Ppmd7_Enco:
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	77					; 0000004dH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	107					; 0000006bH
	DB	0
_Ppmd7_EncodeSymbol@12 ENDP
; Function compile flags: /Odtp /RTCsu
tv66 = -4						; size = 4
_p$ = 8							; size = 4
_start$ = 12						; size = 4
_size$ = 16						; size = 4
_total$ = 20						; size = 4
_RangeEnc_Encode@16 PROC
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 38
	mov	eax, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [eax+8]
	xor	edx, edx
	div	DWORD PTR _total$[ebp]
	mov	DWORD PTR tv66[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR tv66[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _start$[ebp]
	imul	eax, DWORD PTR tv66[ebp]
	xor	ecx, ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR [edx]
	adc	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
; Line 39
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	imul	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN2@RangeEnc_E:
; Line 40
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+8], 16777216		; 01000000H
	jae	SHORT $LN3@RangeEnc_E
; Line 42
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	shl	edx, 8
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+8], edx
; Line 43
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_RangeEnc_ShiftLow@4
; Line 44
	jmp	SHORT $LN2@RangeEnc_E
$LN3@RangeEnc_E:
; Line 45
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_RangeEnc_Encode@16 ENDP
; Function compile flags: /Odtp /RTCsu
_p$ = 8						; size = 4
_size0$ = 12						; size = 4
_RangeEnc_EncodeBit_0@8 PROC
; Line 48
	push	ebp
	mov	ebp, esp
; Line 49
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 14					; 0000000eH
	imul	ecx, DWORD PTR _size0$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN2@RangeEnc_E@2:
; Line 50
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+8], 16777216		; 01000000H
	jae	SHORT $LN3@RangeEnc_E@2
; Line 52
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	shl	edx, 8
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+8], edx
; Line 53
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_RangeEnc_ShiftLow@4
; Line 54
	jmp	SHORT $LN2@RangeEnc_E@2
$LN3@RangeEnc_E@2:
; Line 55
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_RangeEnc_EncodeBit_0@8 ENDP
; Function compile flags: /Odtp /RTCsu
_newBound$ = -4					; size = 4
_p$ = 8							; size = 4
_size0$ = 12						; size = 4
_RangeEnc_EncodeBit_1@8 PROC
; Line 58
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 59
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 14					; 0000000eH
	imul	ecx, DWORD PTR _size0$[ebp]
	mov	DWORD PTR _newBound$[ebp], ecx
; Line 60
	mov	edx, DWORD PTR _newBound$[ebp]
	xor	eax, eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	edx, DWORD PTR [ecx]
	adc	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
; Line 61
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	eax, DWORD PTR _newBound$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+8], eax
$LN2@RangeEnc_E@3:
; Line 62
	mov	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [edx+8], 16777216		; 01000000H
	jae	SHORT $LN3@RangeEnc_E@3
; Line 64
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shl	ecx, 8
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 65
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_RangeEnc_ShiftLow@4
; Line 66
	jmp	SHORT $LN2@RangeEnc_E@3
$LN3@RangeEnc_E@3:
; Line 67
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_RangeEnc_EncodeBit_1@8 ENDP
_TEXT	ENDS
END
