; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\CPP\7zip\Common\UniqBlocks.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?CopyFrom@?$CBuffer@E@@QAEXPBEI@Z		; CBuffer<unsigned char>::CopyFrom
PUBLIC	?AddNew@?$CObjectVector@V?$CBuffer@E@@@@QAEAAV?$CBuffer@E@@XZ ; CObjectVector<CBuffer<unsigned char> >::AddNew
PUBLIC	?Insert@?$CRecordVector@I@@QAEXII@Z		; CRecordVector<unsigned int>::Insert
PUBLIC	?Size@?$CObjectVector@V?$CBuffer@E@@@@QBEIXZ	; CObjectVector<CBuffer<unsigned char> >::Size
PUBLIC	??B?$CBuffer@E@@QBEPBEXZ			; CBuffer<unsigned char>::operator unsigned char const *
PUBLIC	?Size@?$CBuffer@E@@QBEIXZ			; CBuffer<unsigned char>::Size
PUBLIC	??A?$CObjectVector@V?$CBuffer@E@@@@QAEAAV?$CBuffer@E@@I@Z ; CObjectVector<CBuffer<unsigned char> >::operator[]
PUBLIC	??A?$CRecordVector@I@@QAEAAII@Z			; CRecordVector<unsigned int>::operator[]
PUBLIC	?Size@?$CRecordVector@I@@QBEIXZ			; CRecordVector<unsigned int>::Size
PUBLIC	?AddUniq@CUniqBlocks@@QAEIPBEI@Z		; CUniqBlocks::AddUniq
EXTRN	_memcmp:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\cpp\7zip\common\uniqblocks.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_index$ = -36						; size = 4
_cmp$66376 = -32					; size = 4
_sizeMid$66370 = -28					; size = 4
_buf$66369 = -24					; size = 4
_index$66368 = -20					; size = 4
_mid$66367 = -16					; size = 4
_right$ = -12						; size = 4
_left$ = -8						; size = 4
_this$ = -4						; size = 4
_data$ = 8						; size = 4
_size$ = 12						; size = 4
?AddUniq@CUniqBlocks@@QAEIPBEI@Z PROC			; CUniqBlocks::AddUniq
; _this$ = ecx
; Line 8
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 9
	mov	DWORD PTR _left$[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Size@?$CRecordVector@I@@QBEIXZ		; CRecordVector<unsigned int>::Size
	mov	DWORD PTR _right$[ebp], eax
$LN10@AddUniq:
; Line 10
	mov	eax, DWORD PTR _left$[ebp]
	cmp	eax, DWORD PTR _right$[ebp]
	je	$LN9@AddUniq
; Line 12
	mov	ecx, DWORD PTR _left$[ebp]
	add	ecx, DWORD PTR _right$[ebp]
	shr	ecx, 1
	mov	DWORD PTR _mid$66367[ebp], ecx
; Line 13
	mov	edx, DWORD PTR _mid$66367[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$CRecordVector@I@@QAEAAII@Z		; CRecordVector<unsigned int>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _index$66368[ebp], eax
; Line 14
	mov	ecx, DWORD PTR _index$66368[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CObjectVector@V?$CBuffer@E@@@@QAEAAV?$CBuffer@E@@I@Z ; CObjectVector<CBuffer<unsigned char> >::operator[]
	mov	DWORD PTR _buf$66369[ebp], eax
; Line 15
	mov	ecx, DWORD PTR _buf$66369[ebp]
	call	?Size@?$CBuffer@E@@QBEIXZ		; CBuffer<unsigned char>::Size
	mov	DWORD PTR _sizeMid$66370[ebp], eax
; Line 16
	mov	edx, DWORD PTR _size$[ebp]
	cmp	edx, DWORD PTR _sizeMid$66370[ebp]
	jae	SHORT $LN8@AddUniq
; Line 17
	mov	eax, DWORD PTR _mid$66367[ebp]
	mov	DWORD PTR _right$[ebp], eax
	jmp	SHORT $LN7@AddUniq
$LN8@AddUniq:
; Line 18
	mov	ecx, DWORD PTR _size$[ebp]
	cmp	ecx, DWORD PTR _sizeMid$66370[ebp]
	jbe	SHORT $LN6@AddUniq
; Line 19
	mov	edx, DWORD PTR _mid$66367[ebp]
	add	edx, 1
	mov	DWORD PTR _left$[ebp], edx
; Line 20
	jmp	SHORT $LN7@AddUniq
$LN6@AddUniq:
; Line 22
	cmp	DWORD PTR _size$[ebp], 0
	jne	SHORT $LN4@AddUniq
; Line 23
	mov	eax, DWORD PTR _index$66368[ebp]
	jmp	SHORT $LN11@AddUniq
$LN4@AddUniq:
; Line 24
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buf$66369[ebp]
	call	??B?$CBuffer@E@@QBEPBEXZ		; CBuffer<unsigned char>::operator unsigned char const *
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	call	_memcmp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _cmp$66376[ebp], eax
; Line 25
	cmp	DWORD PTR _cmp$66376[ebp], 0
	jne	SHORT $LN3@AddUniq
; Line 26
	mov	eax, DWORD PTR _index$66368[ebp]
	jmp	SHORT $LN11@AddUniq
$LN3@AddUniq:
; Line 27
	cmp	DWORD PTR _cmp$66376[ebp], 0
	jge	SHORT $LN2@AddUniq
; Line 28
	mov	edx, DWORD PTR _mid$66367[ebp]
	mov	DWORD PTR _right$[ebp], edx
; Line 29
	jmp	SHORT $LN7@AddUniq
$LN2@AddUniq:
; Line 30
	mov	eax, DWORD PTR _mid$66367[ebp]
	add	eax, 1
	mov	DWORD PTR _left$[ebp], eax
$LN7@AddUniq:
; Line 32
	jmp	$LN10@AddUniq
$LN9@AddUniq:
; Line 33
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CObjectVector@V?$CBuffer@E@@@@QBEIXZ ; CObjectVector<CBuffer<unsigned char> >::Size
	mov	DWORD PTR _index$[ebp], eax
; Line 34
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _left$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Insert@?$CRecordVector@I@@QAEXII@Z	; CRecordVector<unsigned int>::Insert
; Line 35
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddNew@?$CObjectVector@V?$CBuffer@E@@@@QAEAAV?$CBuffer@E@@XZ ; CObjectVector<CBuffer<unsigned char> >::AddNew
	mov	ecx, eax
	call	?CopyFrom@?$CBuffer@E@@QAEXPBEI@Z	; CBuffer<unsigned char>::CopyFrom
; Line 36
	mov	eax, DWORD PTR _index$[ebp]
$LN11@AddUniq:
; Line 37
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?AddUniq@CUniqBlocks@@QAEIPBEI@Z ENDP			; CUniqBlocks::AddUniq
_TEXT	ENDS
PUBLIC	??A?$CObjectVector@V?$CBuffer@E@@@@QBEABV?$CBuffer@E@@I@Z ; CObjectVector<CBuffer<unsigned char> >::operator[]
PUBLIC	?GetTotalSizeInBytes@CUniqBlocks@@QBE_KXZ	; CUniqBlocks::GetTotalSizeInBytes
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$66385 = -16						; size = 4
_size$ = -12						; size = 8
_this$ = -4						; size = 4
?GetTotalSizeInBytes@CUniqBlocks@@QBE_KXZ PROC		; CUniqBlocks::GetTotalSizeInBytes
; _this$ = ecx
; Line 40
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 41
	mov	DWORD PTR _size$[ebp], 0
	mov	DWORD PTR _size$[ebp+4], 0
; Line 42
	mov	DWORD PTR _i$66385[ebp], 0
	jmp	SHORT $LN3@GetTotalSi
$LN2@GetTotalSi:
	mov	eax, DWORD PTR _i$66385[ebp]
	add	eax, 1
	mov	DWORD PTR _i$66385[ebp], eax
$LN3@GetTotalSi:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CObjectVector@V?$CBuffer@E@@@@QBEIXZ ; CObjectVector<CBuffer<unsigned char> >::Size
	cmp	DWORD PTR _i$66385[ebp], eax
	jae	SHORT $LN1@GetTotalSi
; Line 43
	mov	ecx, DWORD PTR _i$66385[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CObjectVector@V?$CBuffer@E@@@@QBEABV?$CBuffer@E@@I@Z ; CObjectVector<CBuffer<unsigned char> >::operator[]
	mov	ecx, eax
	call	?Size@?$CBuffer@E@@QBEIXZ		; CBuffer<unsigned char>::Size
	xor	edx, edx
	add	eax, DWORD PTR _size$[ebp]
	adc	edx, DWORD PTR _size$[ebp+4]
	mov	DWORD PTR _size$[ebp], eax
	mov	DWORD PTR _size$[ebp+4], edx
	jmp	SHORT $LN2@GetTotalSi
$LN1@GetTotalSi:
; Line 44
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR _size$[ebp+4]
; Line 45
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetTotalSizeInBytes@CUniqBlocks@@QBE_KXZ ENDP		; CUniqBlocks::GetTotalSizeInBytes
_TEXT	ENDS
PUBLIC	?ClearAndSetSize@?$CRecordVector@I@@QAEXI@Z	; CRecordVector<unsigned int>::ClearAndSetSize
PUBLIC	?GetReverseMap@CUniqBlocks@@QAEXXZ		; CUniqBlocks::GetReverseMap
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$66395 = -20						; size = 4
_sorted$ = -16						; size = 4
_p$ = -12						; size = 4
_num$ = -8						; size = 4
_this$ = -4						; size = 4
?GetReverseMap@CUniqBlocks@@QAEXXZ PROC			; CUniqBlocks::GetReverseMap
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 49
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Size@?$CRecordVector@I@@QBEIXZ		; CRecordVector<unsigned int>::Size
	mov	DWORD PTR _num$[ebp], eax
; Line 50
	mov	eax, DWORD PTR _num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?ClearAndSetSize@?$CRecordVector@I@@QAEXI@Z ; CRecordVector<unsigned int>::ClearAndSetSize
; Line 51
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??A?$CRecordVector@I@@QAEAAII@Z		; CRecordVector<unsigned int>::operator[]
	mov	DWORD PTR _p$[ebp], eax
; Line 52
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$CRecordVector@I@@QAEAAII@Z		; CRecordVector<unsigned int>::operator[]
	mov	DWORD PTR _sorted$[ebp], eax
; Line 53
	mov	DWORD PTR _i$66395[ebp], 0
	jmp	SHORT $LN3@GetReverse
$LN2@GetReverse:
	mov	ecx, DWORD PTR _i$66395[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$66395[ebp], ecx
$LN3@GetReverse:
	mov	edx, DWORD PTR _i$66395[ebp]
	cmp	edx, DWORD PTR _num$[ebp]
	jae	SHORT $LN4@GetReverse
; Line 54
	mov	eax, DWORD PTR _i$66395[ebp]
	mov	ecx, DWORD PTR _sorted$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _i$66395[ebp]
	mov	DWORD PTR [eax+edx*4], ecx
	jmp	SHORT $LN2@GetReverse
$LN4@GetReverse:
; Line 55
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetReverseMap@CUniqBlocks@@QAEXXZ ENDP			; CUniqBlocks::GetReverseMap
_TEXT	ENDS
PUBLIC	?Size@?$CRecordVector@PAX@@QBEIXZ		; CRecordVector<void *>::Size
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Size@?$CObjectVector@V?$CBuffer@E@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@V?$CBuffer@E@@@@QBEIXZ PROC	; CObjectVector<CBuffer<unsigned char> >::Size, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@V?$CBuffer@E@@@@QBEIXZ ENDP	; CObjectVector<CBuffer<unsigned char> >::Size
_TEXT	ENDS
PUBLIC	??A?$CRecordVector@PAX@@QBEABQAXI@Z		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??A?$CObjectVector@V?$CBuffer@E@@@@QBEABV?$CBuffer@E@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@V?$CBuffer@E@@@@QBEABV?$CBuffer@E@@I@Z PROC ; CObjectVector<CBuffer<unsigned char> >::operator[], COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@V?$CBuffer@E@@@@QBEABV?$CBuffer@E@@I@Z ENDP ; CObjectVector<CBuffer<unsigned char> >::operator[]
_TEXT	ENDS
PUBLIC	??A?$CRecordVector@PAX@@QAEAAPAXI@Z		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??A?$CObjectVector@V?$CBuffer@E@@@@QAEAAV?$CBuffer@E@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@V?$CBuffer@E@@@@QAEAAV?$CBuffer@E@@I@Z PROC ; CObjectVector<CBuffer<unsigned char> >::operator[], COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@V?$CBuffer@E@@@@QAEAAV?$CBuffer@E@@I@Z ENDP ; CObjectVector<CBuffer<unsigned char> >::operator[]
_TEXT	ENDS
PUBLIC	?Add@?$CRecordVector@PAX@@QAEIQAX@Z		; CRecordVector<void *>::Add
PUBLIC	??0?$CBuffer@E@@QAE@XZ				; CBuffer<unsigned char>::CBuffer<unsigned char>
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AddNew@?$CObjectVector@V?$CBuffer@E@@@@QAEAAV?$CBuffer@E@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddNew@?$CObjectVector@V?$CBuffer@E@@@@QAEAAV?$CBuffer@E@@XZ$0
__ehfuncinfo$?AddNew@?$CObjectVector@V?$CBuffer@E@@@@QAEAAV?$CBuffer@E@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddNew@?$CObjectVector@V?$CBuffer@E@@@@QAEAAV?$CBuffer@E@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?AddNew@?$CObjectVector@V?$CBuffer@E@@@@QAEAAV?$CBuffer@E@@XZ
_TEXT	SEGMENT
tv71 = -32						; size = 4
$T66531 = -28						; size = 4
$T66530 = -24						; size = 4
_p$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?AddNew@?$CObjectVector@V?$CBuffer@E@@@@QAEAAV?$CBuffer@E@@XZ PROC ; CObjectVector<CBuffer<unsigned char> >::AddNew, COMDAT
; _this$ = ecx
; Line 464
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddNew@?$CObjectVector@V?$CBuffer@E@@@@QAEAAV?$CBuffer@E@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 465
	push	8
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T66531[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T66531[ebp], 0
	je	SHORT $LN3@AddNew
	mov	ecx, DWORD PTR $T66531[ebp]
	call	??0?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::CBuffer<unsigned char>
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN4@AddNew
$LN3@AddNew:
	mov	DWORD PTR tv71[ebp], 0
$LN4@AddNew:
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR $T66530[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T66530[ebp]
	mov	DWORD PTR _p$[ebp], ecx
; Line 466
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
; Line 467
	mov	eax, DWORD PTR _p$[ebp]
; Line 468
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddNew@?$CObjectVector@V?$CBuffer@E@@@@QAEAAV?$CBuffer@E@@XZ$0:
	mov	eax, DWORD PTR $T66531[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?AddNew@?$CObjectVector@V?$CBuffer@E@@@@QAEAAV?$CBuffer@E@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddNew@?$CObjectVector@V?$CBuffer@E@@@@QAEAAV?$CBuffer@E@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddNew@?$CObjectVector@V?$CBuffer@E@@@@QAEAAV?$CBuffer@E@@XZ ENDP ; CObjectVector<CBuffer<unsigned char> >::AddNew
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Size@?$CRecordVector@I@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@I@@QBEIXZ PROC			; CRecordVector<unsigned int>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@I@@QBEIXZ ENDP			; CRecordVector<unsigned int>::Size
_TEXT	ENDS
PUBLIC	?ClearAndReserve@?$CRecordVector@I@@QAEXI@Z	; CRecordVector<unsigned int>::ClearAndReserve
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ClearAndSetSize@?$CRecordVector@I@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newSize$ = 8						; size = 4
?ClearAndSetSize@?$CRecordVector@I@@QAEXI@Z PROC	; CRecordVector<unsigned int>::ClearAndSetSize, COMDAT
; _this$ = ecx
; Line 87
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 88
	mov	eax, DWORD PTR _newSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearAndReserve@?$CRecordVector@I@@QAEXI@Z ; CRecordVector<unsigned int>::ClearAndReserve
; Line 89
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _newSize$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 90
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearAndSetSize@?$CRecordVector@I@@QAEXI@Z ENDP	; CRecordVector<unsigned int>::ClearAndSetSize
_TEXT	ENDS
PUBLIC	?MoveItems@?$CRecordVector@I@@AAEXII@Z		; CRecordVector<unsigned int>::MoveItems
PUBLIC	?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ	; CRecordVector<unsigned int>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Insert@?$CRecordVector@I@@QAEXII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
_item$ = 12						; size = 4
?Insert@?$CRecordVector@I@@QAEXII@Z PROC		; CRecordVector<unsigned int>::Insert, COMDAT
; _this$ = ecx
; Line 210
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 211
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ ; CRecordVector<unsigned int>::ReserveOnePosition
; Line 212
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MoveItems@?$CRecordVector@I@@AAEXII@Z	; CRecordVector<unsigned int>::MoveItems
; Line 213
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 214
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 215
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Insert@?$CRecordVector@I@@QAEXII@Z ENDP		; CRecordVector<unsigned int>::Insert
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@I@@QAEAAII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@I@@QAEAAII@Z PROC			; CRecordVector<unsigned int>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@I@@QAEAAII@Z ENDP			; CRecordVector<unsigned int>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CBuffer@E@@QBEPBEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CBuffer@E@@QBEPBEXZ PROC				; CBuffer<unsigned char>::operator unsigned char const *, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mybuffer.h
; Line 40
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CBuffer@E@@QBEPBEXZ ENDP				; CBuffer<unsigned char>::operator unsigned char const *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CBuffer@E@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CBuffer@E@@QBEIXZ PROC				; CBuffer<unsigned char>::Size, COMDAT
; _this$ = ecx
; Line 41
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CBuffer@E@@QBEIXZ ENDP				; CBuffer<unsigned char>::Size
_TEXT	ENDS
PUBLIC	?Alloc@?$CBuffer@E@@QAEXI@Z			; CBuffer<unsigned char>::Alloc
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?CopyFrom@?$CBuffer@E@@QAEXPBEI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_data$ = 8						; size = 4
_size$ = 12						; size = 4
?CopyFrom@?$CBuffer@E@@QAEXPBEI@Z PROC			; CBuffer<unsigned char>::CopyFrom, COMDAT
; _this$ = ecx
; Line 67
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 68
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Alloc@?$CBuffer@E@@QAEXI@Z		; CBuffer<unsigned char>::Alloc
; Line 69
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN2@CopyFrom
; Line 70
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN2@CopyFrom:
; Line 71
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?CopyFrom@?$CBuffer@E@@QAEXPBEI@Z ENDP			; CBuffer<unsigned char>::CopyFrom
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@PAX@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@PAX@@QBEIXZ PROC			; CRecordVector<void *>::Size, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@PAX@@QBEIXZ ENDP			; CRecordVector<void *>::Size
_TEXT	ENDS
PUBLIC	?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ	; CRecordVector<void *>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@PAX@@QAEIQAX@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?Add@?$CRecordVector@PAX@@QAEIQAX@Z PROC		; CRecordVector<void *>::Add, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ; CRecordVector<void *>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 201
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv72[ebp]
; Line 202
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CRecordVector@PAX@@QAEIQAX@Z ENDP		; CRecordVector<void *>::Add
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@PAX@@QBEABQAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@PAX@@QBEABQAXI@Z PROC		; CRecordVector<void *>::operator[], COMDAT
; _this$ = ecx
; Line 227
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@PAX@@QBEABQAXI@Z ENDP		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@PAX@@QAEAAPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@PAX@@QAEAAPAXI@Z PROC		; CRecordVector<void *>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@PAX@@QAEAAPAXI@Z ENDP		; CRecordVector<void *>::operator[]
_TEXT	ENDS
EXTRN	__imp__memmove:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?MoveItems@?$CRecordVector@I@@AAEXII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_destIndex$ = 8						; size = 4
_srcIndex$ = 12						; size = 4
?MoveItems@?$CRecordVector@I@@AAEXII@Z PROC		; CRecordVector<unsigned int>::MoveItems, COMDAT
; _this$ = ecx
; Line 14
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 15
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR _srcIndex$[ebp]
	shl	ecx, 2
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _srcIndex$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _destIndex$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 16
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?MoveItems@?$CRecordVector@I@@AAEXII@Z ENDP		; CRecordVector<unsigned int>::MoveItems
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ
_TEXT	SEGMENT
$T66573 = -20						; size = 4
$T66572 = -16						; size = 4
_p$66446 = -12						; size = 4
_newCapacity$66445 = -8					; size = 4
_this$ = -4						; size = 4
?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ PROC	; CRecordVector<unsigned int>::ReserveOnePosition, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@ReserveOne
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$66445[ebp], ecx
; Line 23
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$66445[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T66572[ebp], eax
	mov	eax, DWORD PTR $T66572[ebp]
	mov	DWORD PTR _p$66446[ebp], eax
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@ReserveOne
; Line 25
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$66446[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne:
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T66573[ebp], edx
	mov	eax, DWORD PTR $T66573[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$66446[ebp]
	mov	DWORD PTR [ecx], edx
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$66445[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ReserveOne:
; Line 30
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ ENDP	; CRecordVector<unsigned int>::ReserveOnePosition
_TEXT	ENDS
PUBLIC	?Clear@?$CRecordVector@I@@QAEXXZ		; CRecordVector<unsigned int>::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ClearAndReserve@?$CRecordVector@I@@QAEXI@Z
_TEXT	SEGMENT
$T66577 = -12						; size = 4
$T66576 = -8						; size = 4
_this$ = -4						; size = 4
_newCapacity$ = 8					; size = 4
?ClearAndReserve@?$CRecordVector@I@@QAEXI@Z PROC	; CRecordVector<unsigned int>::ClearAndReserve, COMDAT
; _this$ = ecx
; Line 74
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 75
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CRecordVector@I@@QAEXXZ	; CRecordVector<unsigned int>::Clear
; Line 76
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	SHORT $LN2@ClearAndRe
; Line 78
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T66576[ebp], eax
	mov	ecx, DWORD PTR $T66576[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 79
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0
; Line 80
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 81
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T66577[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T66577[ebp]
	mov	DWORD PTR [eax], ecx
; Line 82
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _newCapacity$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@ClearAndRe:
; Line 84
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearAndReserve@?$CRecordVector@I@@QAEXI@Z ENDP	; CRecordVector<unsigned int>::ClearAndReserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CBuffer@E@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CBuffer@E@@QAE@XZ PROC				; CBuffer<unsigned char>::CBuffer<unsigned char>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mybuffer.h
; Line 24
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CBuffer@E@@QAE@XZ ENDP				; CBuffer<unsigned char>::CBuffer<unsigned char>
_TEXT	ENDS
PUBLIC	?Free@?$CBuffer@E@@QAEXXZ			; CBuffer<unsigned char>::Free
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Alloc@?$CBuffer@E@@QAEXI@Z
_TEXT	SEGMENT
$T66582 = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?Alloc@?$CBuffer@E@@QAEXI@Z PROC			; CBuffer<unsigned char>::Alloc, COMDAT
; _this$ = ecx
; Line 44
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 45
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	je	SHORT $LN3@Alloc
; Line 47
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Free@?$CBuffer@E@@QAEXXZ		; CBuffer<unsigned char>::Free
; Line 48
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN3@Alloc
; Line 50
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T66582[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T66582[ebp]
	mov	DWORD PTR [eax], ecx
; Line 51
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+4], eax
$LN3@Alloc:
; Line 54
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Alloc@?$CBuffer@E@@QAEXI@Z ENDP			; CBuffer<unsigned char>::Alloc
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ
_TEXT	SEGMENT
$T66586 = -20						; size = 4
$T66585 = -16						; size = 4
_p$66471 = -12						; size = 4
_newCapacity$66470 = -8					; size = 4
_this$ = -4						; size = 4
?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ PROC	; CRecordVector<void *>::ReserveOnePosition, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@ReserveOne@2
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$66470[ebp], ecx
; Line 23
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$66470[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T66585[ebp], eax
	mov	eax, DWORD PTR $T66585[ebp]
	mov	DWORD PTR _p$66471[ebp], eax
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@ReserveOne@2
; Line 25
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$66471[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne@2:
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T66586[ebp], edx
	mov	eax, DWORD PTR $T66586[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$66471[ebp]
	mov	DWORD PTR [ecx], edx
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$66470[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ReserveOne@2:
; Line 30
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ENDP	; CRecordVector<void *>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Clear@?$CRecordVector@I@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$CRecordVector@I@@QAEXXZ PROC			; CRecordVector<unsigned int>::Clear, COMDAT
; _this$ = ecx
; Line 131
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CRecordVector@I@@QAEXXZ ENDP			; CRecordVector<unsigned int>::Clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Free@?$CBuffer@E@@QAEXXZ
_TEXT	SEGMENT
$T66591 = -8						; size = 4
_this$ = -4						; size = 4
?Free@?$CBuffer@E@@QAEXXZ PROC				; CBuffer<unsigned char>::Free, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mybuffer.h
; Line 15
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 16
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@Free
; Line 18
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T66591[ebp], edx
	mov	eax, DWORD PTR $T66591[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 19
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
$LN1@Free:
; Line 21
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 22
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Free@?$CBuffer@E@@QAEXXZ ENDP				; CBuffer<unsigned char>::Free
_TEXT	ENDS
END
