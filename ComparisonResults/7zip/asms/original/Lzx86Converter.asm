; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\CPP\7zip\Compress\Lzx86Converter.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?MakeTranslation@Cx86ConvertOutStream@NLzx@NCompress@@AAEXXZ ; NCompress::NLzx::Cx86ConvertOutStream::MakeTranslation
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\cpp\7zip\compress\lzx86converter.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
tv95 = -40						; size = 4
tv74 = -36						; size = 4
_offset$66089 = -32					; size = 4
_pos$66085 = -28					; size = 4
_j$66080 = -24						; size = 4
_absValue$66079 = -20					; size = 4
_i$66074 = -16						; size = 4
_buf$ = -12						; size = 4
_numBytes$ = -8						; size = 4
_this$ = -4						; size = 4
?MakeTranslation@Cx86ConvertOutStream@NLzx@NCompress@@AAEXXZ PROC ; NCompress::NLzx::Cx86ConvertOutStream::MakeTranslation
; _this$ = ecx
; Line 15
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 16
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 10			; 0000000aH
	ja	SHORT $LN11@MakeTransl
; Line 17
	jmp	$LN12@MakeTransl
$LN11@MakeTransl:
; Line 18
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	sub	edx, 10					; 0000000aH
	mov	DWORD PTR _numBytes$[ebp], edx
; Line 19
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 25					; 00000019H
	mov	DWORD PTR _buf$[ebp], eax
; Line 20
	mov	DWORD PTR _i$66074[ebp], 0
$LN10@MakeTransl:
	mov	ecx, DWORD PTR _i$66074[ebp]
	cmp	ecx, DWORD PTR _numBytes$[ebp]
	jae	$LN12@MakeTransl
; Line 22
	mov	edx, DWORD PTR _buf$[ebp]
	add	edx, DWORD PTR _i$66074[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _i$66074[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$66074[ebp], ecx
	cmp	eax, 232				; 000000e8H
	jne	SHORT $LN14@MakeTransl
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN15@MakeTransl
$LN14@MakeTransl:
	mov	DWORD PTR tv74[ebp], 0
$LN15@MakeTransl:
	cmp	DWORD PTR tv74[ebp], 0
	je	$LN8@MakeTransl
; Line 24
	mov	DWORD PTR _absValue$66079[ebp], 0
; Line 26
	mov	DWORD PTR _j$66080[ebp], 0
	jmp	SHORT $LN7@MakeTransl
$LN6@MakeTransl:
	mov	edx, DWORD PTR _j$66080[ebp]
	add	edx, 1
	mov	DWORD PTR _j$66080[ebp], edx
$LN7@MakeTransl:
	cmp	DWORD PTR _j$66080[ebp], 4
	jae	SHORT $LN5@MakeTransl
; Line 27
	mov	eax, DWORD PTR _i$66074[ebp]
	add	eax, DWORD PTR _j$66080[ebp]
	mov	ecx, DWORD PTR _buf$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	mov	ecx, DWORD PTR _j$66080[ebp]
	shl	ecx, 3
	shl	edx, cl
	add	edx, DWORD PTR _absValue$66079[ebp]
	mov	DWORD PTR _absValue$66079[ebp], edx
	jmp	SHORT $LN6@MakeTransl
$LN5@MakeTransl:
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _i$66074[ebp]
	lea	eax, DWORD PTR [ecx+edx-1]
	mov	DWORD PTR _pos$66085[ebp], eax
; Line 29
	mov	ecx, DWORD PTR _pos$66085[ebp]
	neg	ecx
	cmp	DWORD PTR _absValue$66079[ebp], ecx
	jl	SHORT $LN4@MakeTransl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _absValue$66079[ebp]
	cmp	eax, DWORD PTR [edx+20]
	jge	SHORT $LN4@MakeTransl
; Line 33
	cmp	DWORD PTR _absValue$66079[ebp], 0
	jl	SHORT $LN16@MakeTransl
	mov	ecx, DWORD PTR _absValue$66079[ebp]
	sub	ecx, DWORD PTR _pos$66085[ebp]
	mov	DWORD PTR tv95[ebp], ecx
	jmp	SHORT $LN17@MakeTransl
$LN16@MakeTransl:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _absValue$66079[ebp]
	add	eax, DWORD PTR [edx+20]
	mov	DWORD PTR tv95[ebp], eax
$LN17@MakeTransl:
	mov	ecx, DWORD PTR tv95[ebp]
	mov	DWORD PTR _offset$66089[ebp], ecx
; Line 34
	mov	DWORD PTR _j$66080[ebp], 0
	jmp	SHORT $LN3@MakeTransl
$LN2@MakeTransl:
	mov	edx, DWORD PTR _j$66080[ebp]
	add	edx, 1
	mov	DWORD PTR _j$66080[ebp], edx
$LN3@MakeTransl:
	cmp	DWORD PTR _j$66080[ebp], 4
	jae	SHORT $LN4@MakeTransl
; Line 36
	mov	eax, DWORD PTR _offset$66089[ebp]
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _i$66074[ebp]
	add	ecx, DWORD PTR _j$66080[ebp]
	mov	edx, DWORD PTR _buf$[ebp]
	mov	BYTE PTR [edx+ecx], al
; Line 37
	mov	eax, DWORD PTR _offset$66089[ebp]
	shr	eax, 8
	mov	DWORD PTR _offset$66089[ebp], eax
; Line 38
	jmp	SHORT $LN2@MakeTransl
$LN4@MakeTransl:
; Line 40
	mov	ecx, DWORD PTR _i$66074[ebp]
	add	ecx, 4
	mov	DWORD PTR _i$66074[ebp], ecx
$LN8@MakeTransl:
; Line 42
	jmp	$LN10@MakeTransl
$LN12@MakeTransl:
; Line 43
	pop	edi
	mov	esp, ebp
	pop	ebp
	ret	0
?MakeTranslation@Cx86ConvertOutStream@NLzx@NCompress@@AAEXXZ ENDP ; NCompress::NLzx::Cx86ConvertOutStream::MakeTranslation
_TEXT	ENDS
PUBLIC	?Flush@Cx86ConvertOutStream@NLzx@NCompress@@QAEJXZ ; NCompress::NLzx::Cx86ConvertOutStream::Flush
PUBLIC	??$MyMin@I@@YGIII@Z				; MyMin<unsigned int>
PUBLIC	?Write@Cx86ConvertOutStream@NLzx@NCompress@@UAGJPBXIPAI@Z ; NCompress::NLzx::Cx86ConvertOutStream::Write
EXTRN	_memcpy:PROC
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
___result_$66114 = -12					; size = 4
_writeSize$66106 = -8					; size = 4
_realProcessedSize$ = -4				; size = 4
_this$ = 8						; size = 4
_data$ = 12						; size = 4
_size$ = 16						; size = 4
_processedSize$ = 20					; size = 4
?Write@Cx86ConvertOutStream@NLzx@NCompress@@UAGJPBXIPAI@Z PROC ; NCompress::NLzx::Cx86ConvertOutStream::Write
; Line 46
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 47
	cmp	DWORD PTR _processedSize$[ebp], 0
	je	SHORT $LN7@Write
; Line 48
	mov	eax, DWORD PTR _processedSize$[ebp]
	mov	DWORD PTR [eax], 0
$LN7@Write:
; Line 49
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+24]
	test	edx, edx
	jne	SHORT $LN6@Write
; Line 50
	mov	esi, esp
	mov	eax, DWORD PTR _processedSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN8@Write
$LN6@Write:
; Line 51
	mov	DWORD PTR _realProcessedSize$[ebp], 0
$LN5@Write:
; Line 52
	mov	eax, DWORD PTR _realProcessedSize$[ebp]
	cmp	eax, DWORD PTR _size$[ebp]
	jae	SHORT $LN4@Write
; Line 54
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, 32768				; 00008000H
	sub	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _size$[ebp]
	sub	eax, DWORD PTR _realProcessedSize$[ebp]
	push	eax
	call	??$MyMin@I@@YGIII@Z			; MyMin<unsigned int>
	mov	DWORD PTR _writeSize$66106[ebp], eax
; Line 55
	mov	ecx, DWORD PTR _writeSize$66106[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	add	edx, DWORD PTR _realProcessedSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+25]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 56
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	add	edx, DWORD PTR _writeSize$66106[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], edx
; Line 57
	mov	ecx, DWORD PTR _realProcessedSize$[ebp]
	add	ecx, DWORD PTR _writeSize$66106[ebp]
	mov	DWORD PTR _realProcessedSize$[ebp], ecx
; Line 58
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+16], 32768		; 00008000H
	jne	SHORT $LN3@Write
; Line 60
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Flush@Cx86ConvertOutStream@NLzx@NCompress@@QAEJXZ ; NCompress::NLzx::Cx86ConvertOutStream::Flush
	mov	DWORD PTR ___result_$66114[ebp], eax
	cmp	DWORD PTR ___result_$66114[ebp], 0
	je	SHORT $LN3@Write
	mov	eax, DWORD PTR ___result_$66114[ebp]
	jmp	SHORT $LN8@Write
$LN3@Write:
; Line 62
	jmp	SHORT $LN5@Write
$LN4@Write:
; Line 63
	cmp	DWORD PTR _processedSize$[ebp], 0
	je	SHORT $LN1@Write
; Line 64
	mov	eax, DWORD PTR _processedSize$[ebp]
	mov	ecx, DWORD PTR _realProcessedSize$[ebp]
	mov	DWORD PTR [eax], ecx
$LN1@Write:
; Line 65
	xor	eax, eax
$LN8@Write:
; Line 66
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Write@Cx86ConvertOutStream@NLzx@NCompress@@UAGJPBXIPAI@Z ENDP ; NCompress::NLzx::Cx86ConvertOutStream::Write
_TEXT	ENDS
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv133 = -28						; size = 4
___result_$66130 = -24					; size = 4
_processed$66129 = -16					; size = 4
_pos$ = -8						; size = 4
_this$ = -4						; size = 4
?Flush@Cx86ConvertOutStream@NLzx@NCompress@@QAEJXZ PROC	; NCompress::NLzx::Cx86ConvertOutStream::Flush
; _this$ = ecx
; Line 69
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 70
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN7@Flush
; Line 71
	xor	eax, eax
	jmp	$LN8@Flush
$LN7@Flush:
; Line 72
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+24]
	test	edx, edx
	je	SHORT $LN6@Flush
; Line 73
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MakeTranslation@Cx86ConvertOutStream@NLzx@NCompress@@AAEXXZ ; NCompress::NLzx::Cx86ConvertOutStream::MakeTranslation
$LN6@Flush:
; Line 74
	mov	DWORD PTR _pos$[ebp], 0
$LN5@Flush:
; Line 78
	mov	esi, esp
	lea	eax, DWORD PTR _processed$66129[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	sub	edx, DWORD PTR _pos$[ebp]
	push	edx
	mov	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+25]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result_$66130[ebp], eax
	cmp	DWORD PTR ___result_$66130[ebp], 0
	je	SHORT $LN2@Flush
	mov	eax, DWORD PTR ___result_$66130[ebp]
	jmp	SHORT $LN8@Flush
$LN2@Flush:
; Line 79
	cmp	DWORD PTR _processed$66129[ebp], 0
	jne	SHORT $LN1@Flush
; Line 80
	mov	eax, -2147467259			; 80004005H
	jmp	SHORT $LN8@Flush
$LN1@Flush:
; Line 81
	mov	eax, DWORD PTR _pos$[ebp]
	add	eax, DWORD PTR _processed$66129[ebp]
	mov	DWORD PTR _pos$[ebp], eax
; Line 83
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pos$[ebp]
	cmp	edx, DWORD PTR [ecx+16]
	jb	SHORT $LN5@Flush
; Line 84
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 85
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0
; Line 86
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+24]
	test	eax, eax
	je	SHORT $LN10@Flush
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+12], 1073741824		; 40000000H
	jae	SHORT $LN10@Flush
	mov	DWORD PTR tv133[ebp], 1
	jmp	SHORT $LN11@Flush
$LN10@Flush:
	mov	DWORD PTR tv133[ebp], 0
$LN11@Flush:
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR tv133[ebp]
	mov	BYTE PTR [edx+24], al
; Line 87
	xor	eax, eax
$LN8@Flush:
; Line 88
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@Flush
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN14@Flush:
	DD	1
	DD	$LN13@Flush
$LN13@Flush:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN12@Flush
$LN12@Flush:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
?Flush@Cx86ConvertOutStream@NLzx@NCompress@@QAEJXZ ENDP	; NCompress::NLzx::Cx86ConvertOutStream::Flush
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$MyMin@I@@YGIII@Z
_TEXT	SEGMENT
tv65 = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$MyMin@I@@YGIII@Z PROC				; MyMin<unsigned int>, COMDAT
; File c:\workspace\7z1505-src\cpp\common\defs.h
; Line 7
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _a$[ebp]
	cmp	eax, DWORD PTR _b$[ebp]
	jae	SHORT $LN3@MyMin
	mov	ecx, DWORD PTR _a$[ebp]
	mov	DWORD PTR tv65[ebp], ecx
	jmp	SHORT $LN4@MyMin
$LN3@MyMin:
	mov	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR tv65[ebp], edx
$LN4@MyMin:
	mov	eax, DWORD PTR tv65[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??$MyMin@I@@YGIII@Z ENDP				; MyMin<unsigned int>
_TEXT	ENDS
END
