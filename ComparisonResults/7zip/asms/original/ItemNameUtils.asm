; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\CPP\7zip\Archive\Common\ItemNameUtils.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?ReplaceToOsPathSeparator@NItemName@NArchive@@YGXPA_W@Z ; NArchive::NItemName::ReplaceToOsPathSeparator
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\cpp\7zip\archive\common\itemnameutils.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_c$67080 = -4						; size = 2
_s$ = 8							; size = 4
?ReplaceToOsPathSeparator@NItemName@NArchive@@YGXPA_W@Z PROC ; NArchive::NItemName::ReplaceToOsPathSeparator
; Line 14
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
$LN4@ReplaceToO:
; Line 18
	mov	eax, DWORD PTR _s$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _c$67080[ebp], cx
; Line 19
	movzx	edx, WORD PTR _c$67080[ebp]
	test	edx, edx
	jne	SHORT $LN2@ReplaceToO
; Line 20
	jmp	SHORT $LN5@ReplaceToO
$LN2@ReplaceToO:
; Line 21
	movzx	eax, WORD PTR _c$67080[ebp]
	cmp	eax, 47					; 0000002fH
	jne	SHORT $LN1@ReplaceToO
; Line 22
	mov	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR _s$[ebp]
	mov	WORD PTR [edx], cx
$LN1@ReplaceToO:
; Line 23
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 2
	mov	DWORD PTR _s$[ebp], eax
; Line 24
	jmp	SHORT $LN4@ReplaceToO
$LN5@ReplaceToO:
; Line 26
	mov	esp, ebp
	pop	ebp
	ret	4
?ReplaceToOsPathSeparator@NItemName@NArchive@@YGXPA_W@Z ENDP ; NArchive::NItemName::ReplaceToOsPathSeparator
_TEXT	ENDS
PUBLIC	??1UString@@QAE@XZ				; UString::~UString
PUBLIC	?MakeLegalName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z ; NArchive::NItemName::MakeLegalName
EXTRN	?Replace@UString@@QAEX_W0@Z:PROC		; UString::Replace
EXTRN	??0UString@@QAE@ABV0@@Z:PROC			; UString::UString
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
xdata$x	SEGMENT
__unwindtable$?MakeLegalName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?MakeLegalName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?MakeLegalName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z$0
__ehfuncinfo$?MakeLegalName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?MakeLegalName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T67146 = -36						; size = 4
_zipName$ = -28						; size = 12
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_name$ = 12						; size = 4
?MakeLegalName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z PROC ; NArchive::NItemName::MakeLegalName
; Line 29
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?MakeLegalName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T67146[ebp], 0
; Line 30
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	lea	ecx, DWORD PTR _zipName$[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 31
	push	47					; 0000002fH
	push	92					; 0000005cH
	lea	ecx, DWORD PTR _zipName$[ebp]
	call	?Replace@UString@@QAEX_W0@Z		; UString::Replace
; Line 32
	lea	ecx, DWORD PTR _zipName$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	edx, DWORD PTR $T67146[ebp]
	or	edx, 1
	mov	DWORD PTR $T67146[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _zipName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 33
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@MakeLegalN
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN9@MakeLegalN:
	DD	1
	DD	$LN8@MakeLegalN
$LN8@MakeLegalN:
	DD	-28					; ffffffe4H
	DD	12					; 0000000cH
	DD	$LN6@MakeLegalN
$LN6@MakeLegalN:
	DB	122					; 0000007aH
	DB	105					; 00000069H
	DB	112					; 00000070H
	DB	78					; 0000004eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?MakeLegalName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z$0:
	lea	ecx, DWORD PTR _zipName$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?MakeLegalName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z$1:
	mov	eax, DWORD PTR $T67146[ebp]
	and	eax, 1
	je	$LN5@MakeLegalN
	and	DWORD PTR $T67146[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
$LN5@MakeLegalN:
	ret	0
__ehhandler$?MakeLegalName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?MakeLegalName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?MakeLegalName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z ENDP ; NArchive::NItemName::MakeLegalName
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1UString@@QAE@XZ
_TEXT	SEGMENT
$T67163 = -8						; size = 4
_this$ = -4						; size = 4
??1UString@@QAE@XZ PROC					; UString::~UString, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 470
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T67163[ebp], ecx
	mov	edx, DWORD PTR $T67163[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1UString@@QAE@XZ ENDP					; UString::~UString
_TEXT	ENDS
PUBLIC	?GetOSName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z ; NArchive::NItemName::GetOSName
xdata$x	SEGMENT
__unwindtable$?GetOSName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetOSName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?GetOSName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z$0
__ehfuncinfo$?GetOSName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?GetOSName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T67168 = -36						; size = 4
_newName$ = -28						; size = 12
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_name$ = 12						; size = 4
?GetOSName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z PROC ; NArchive::NItemName::GetOSName
; File c:\workspace\7z1505-src\cpp\7zip\archive\common\itemnameutils.cpp
; Line 36
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetOSName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T67168[ebp], 0
; Line 37
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	lea	ecx, DWORD PTR _newName$[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 38
	push	92					; 0000005cH
	push	47					; 0000002fH
	lea	ecx, DWORD PTR _newName$[ebp]
	call	?Replace@UString@@QAEX_W0@Z		; UString::Replace
; Line 39
	lea	ecx, DWORD PTR _newName$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	edx, DWORD PTR $T67168[ebp]
	or	edx, 1
	mov	DWORD PTR $T67168[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _newName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 40
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@GetOSName
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN9@GetOSName:
	DD	1
	DD	$LN8@GetOSName
$LN8@GetOSName:
	DD	-28					; ffffffe4H
	DD	12					; 0000000cH
	DD	$LN6@GetOSName
$LN6@GetOSName:
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	78					; 0000004eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?GetOSName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z$0:
	lea	ecx, DWORD PTR _newName$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?GetOSName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z$1:
	mov	eax, DWORD PTR $T67168[ebp]
	and	eax, 1
	je	$LN5@GetOSName
	and	DWORD PTR $T67168[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
$LN5@GetOSName:
	ret	0
__ehhandler$?GetOSName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetOSName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetOSName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z ENDP ; NArchive::NItemName::GetOSName
PUBLIC	?DeleteBack@UString@@QAEXXZ			; UString::DeleteBack
PUBLIC	?Back@UString@@QBE_WXZ				; UString::Back
PUBLIC	?IsEmpty@UString@@QBE_NXZ			; UString::IsEmpty
PUBLIC	?GetOSName2@NItemName@NArchive@@YG?AVUString@@ABV3@@Z ; NArchive::NItemName::GetOSName2
EXTRN	??0UString@@QAE@XZ:PROC				; UString::UString
xdata$x	SEGMENT
__unwindtable$?GetOSName2@NItemName@NArchive@@YG?AVUString@@ABV3@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetOSName2@NItemName@NArchive@@YG?AVUString@@ABV3@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetOSName2@NItemName@NArchive@@YG?AVUString@@ABV3@@Z$1
__ehfuncinfo$?GetOSName2@NItemName@NArchive@@YG?AVUString@@ABV3@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?GetOSName2@NItemName@NArchive@@YG?AVUString@@ABV3@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T67179 = -36						; size = 4
_newName$ = -28						; size = 12
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_name$ = 12						; size = 4
?GetOSName2@NItemName@NArchive@@YG?AVUString@@ABV3@@Z PROC ; NArchive::NItemName::GetOSName2
; Line 43
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetOSName2@NItemName@NArchive@@YG?AVUString@@ABV3@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T67179[ebp], 0
; Line 44
	mov	ecx, DWORD PTR _name$[ebp]
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@GetOSName2
; Line 45
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR $T67179[ebp]
	or	ecx, 1
	mov	DWORD PTR $T67179[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@GetOSName2
$LN2@GetOSName2:
; Line 46
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	lea	eax, DWORD PTR _newName$[ebp]
	push	eax
	call	?GetOSName@NItemName@NArchive@@YG?AVUString@@ABV3@@Z ; NArchive::NItemName::GetOSName
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 47
	lea	ecx, DWORD PTR _newName$[ebp]
	call	?Back@UString@@QBE_WXZ			; UString::Back
	movzx	ecx, ax
	cmp	ecx, 92					; 0000005cH
	jne	SHORT $LN1@GetOSName2
; Line 48
	lea	ecx, DWORD PTR _newName$[ebp]
	call	?DeleteBack@UString@@QAEXXZ		; UString::DeleteBack
$LN1@GetOSName2:
; Line 49
	lea	edx, DWORD PTR _newName$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	eax, DWORD PTR $T67179[ebp]
	or	eax, 1
	mov	DWORD PTR $T67179[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _newName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@GetOSName2:
; Line 50
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@GetOSName2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN11@GetOSName2:
	DD	1
	DD	$LN10@GetOSName2
$LN10@GetOSName2:
	DD	-28					; ffffffe4H
	DD	12					; 0000000cH
	DD	$LN8@GetOSName2
$LN8@GetOSName2:
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	78					; 0000004eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?GetOSName2@NItemName@NArchive@@YG?AVUString@@ABV3@@Z$0:
	mov	eax, DWORD PTR $T67179[ebp]
	and	eax, 1
	je	$LN6@GetOSName2
	and	DWORD PTR $T67179[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
$LN6@GetOSName2:
	ret	0
__unwindfunclet$?GetOSName2@NItemName@NArchive@@YG?AVUString@@ABV3@@Z$1:
	lea	ecx, DWORD PTR _newName$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$?GetOSName2@NItemName@NArchive@@YG?AVUString@@ABV3@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetOSName2@NItemName@NArchive@@YG?AVUString@@ABV3@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetOSName2@NItemName@NArchive@@YG?AVUString@@ABV3@@Z ENDP ; NArchive::NItemName::GetOSName2
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsEmpty@UString@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@UString@@QBE_NXZ PROC				; UString::IsEmpty, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 473
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+4], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@UString@@QBE_NXZ ENDP				; UString::IsEmpty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Back@UString@@QBE_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Back@UString@@QBE_WXZ PROC				; UString::Back, COMDAT
; _this$ = ecx
; Line 480
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ax, WORD PTR [eax+ecx*2-2]
	mov	esp, ebp
	pop	ebp
	ret	0
?Back@UString@@QBE_WXZ ENDP				; UString::Back
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?DeleteBack@UString@@QAEXXZ
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
?DeleteBack@UString@@QAEXXZ PROC			; UString::DeleteBack, COMDAT
; _this$ = ecx
; Line 602
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv66[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv66[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	xor	eax, eax
	mov	ecx, DWORD PTR tv66[ebp]
	mov	WORD PTR [edx+ecx*2], ax
	mov	esp, ebp
	pop	ebp
	ret	0
?DeleteBack@UString@@QAEXXZ ENDP			; UString::DeleteBack
_TEXT	ENDS
PUBLIC	?ConvertToOSName2@NItemName@NArchive@@YGXAAVUString@@@Z ; NArchive::NItemName::ConvertToOSName2
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_name$ = 8						; size = 4
?ConvertToOSName2@NItemName@NArchive@@YGXAAVUString@@@Z PROC ; NArchive::NItemName::ConvertToOSName2
; File c:\workspace\7z1505-src\cpp\7zip\archive\common\itemnameutils.cpp
; Line 53
	push	ebp
	mov	ebp, esp
; Line 54
	mov	ecx, DWORD PTR _name$[ebp]
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@ConvertToO
; Line 56
	push	92					; 0000005cH
	push	47					; 0000002fH
	mov	ecx, DWORD PTR _name$[ebp]
	call	?Replace@UString@@QAEX_W0@Z		; UString::Replace
; Line 57
	mov	ecx, DWORD PTR _name$[ebp]
	call	?Back@UString@@QBE_WXZ			; UString::Back
	movzx	ecx, ax
	cmp	ecx, 92					; 0000005cH
	jne	SHORT $LN3@ConvertToO
; Line 58
	mov	ecx, DWORD PTR _name$[ebp]
	call	?DeleteBack@UString@@QAEXXZ		; UString::DeleteBack
$LN3@ConvertToO:
; Line 60
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
?ConvertToOSName2@NItemName@NArchive@@YGXAAVUString@@@Z ENDP ; NArchive::NItemName::ConvertToOSName2
_TEXT	ENDS
PUBLIC	?Len@AString@@QBEIXZ				; AString::Len
PUBLIC	??BAString@@QBEPBDXZ				; AString::operator char const *
PUBLIC	?IsEmpty@AString@@QBE_NXZ			; AString::IsEmpty
PUBLIC	?HasTailSlash@NItemName@NArchive@@YG_NABVAString@@I@Z ; NArchive::NItemName::HasTailSlash
EXTRN	__imp__CharPrevExA@16:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_prev$ = -4						; size = 4
_name$ = 8						; size = 4
_codePage$ = 12						; size = 4
?HasTailSlash@NItemName@NArchive@@YG_NABVAString@@I@Z PROC ; NArchive::NItemName::HasTailSlash
; Line 67
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 68
	mov	ecx, DWORD PTR _name$[ebp]
	call	?IsEmpty@AString@@QBE_NXZ		; AString::IsEmpty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@HasTailSla
; Line 69
	xor	al, al
	jmp	SHORT $LN2@HasTailSla
$LN1@HasTailSla:
; Line 72
	mov	esi, esp
	push	0
	mov	ecx, DWORD PTR _name$[ebp]
	call	??BAString@@QBEPBDXZ			; AString::operator char const *
	mov	edi, eax
	mov	ecx, DWORD PTR _name$[ebp]
	call	?Len@AString@@QBEIXZ			; AString::Len
	add	edi, eax
	push	edi
	mov	ecx, DWORD PTR _name$[ebp]
	call	??BAString@@QBEPBDXZ			; AString::operator char const *
	push	eax
	movzx	ecx, WORD PTR _codePage$[ebp]
	push	ecx
	call	DWORD PTR __imp__CharPrevExA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _prev$[ebp], eax
; Line 76
	mov	edx, DWORD PTR _prev$[ebp]
	movsx	eax, BYTE PTR [edx]
	xor	ecx, ecx
	cmp	eax, 47					; 0000002fH
	sete	cl
	mov	al, cl
$LN2@HasTailSla:
; Line 77
	pop	edi
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?HasTailSlash@NItemName@NArchive@@YG_NABVAString@@I@Z ENDP ; NArchive::NItemName::HasTailSlash
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Len@AString@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Len@AString@@QBEIXZ PROC				; AString::Len, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 234
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Len@AString@@QBEIXZ ENDP				; AString::Len
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsEmpty@AString@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@AString@@QBE_NXZ PROC				; AString::IsEmpty, COMDAT
; _this$ = ecx
; Line 235
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+4], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@AString@@QBE_NXZ ENDP				; AString::IsEmpty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??BAString@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BAString@@QBEPBDXZ PROC				; AString::operator char const *, COMDAT
; _this$ = ecx
; Line 238
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??BAString@@QBEPBDXZ ENDP				; AString::operator char const *
_TEXT	ENDS
END
