; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\CPP\7zip\UI\Common\Update.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_kUpdateIsNotSupoorted DD FLAT:$SG74034
_kTempFolderPrefix DD FLAT:$SG74036
_kDefaultArcType DD FLAT:$SG74380
_kDefaultArcExt DD FLAT:$SG74382
_kSFXExtension DD FLAT:$SG74384
_DATA	ENDS
CONST	SEGMENT
$SG74034 DB	'update operations are not supported for this archive', 00H
	ORG $+3
$SG74036 DB	'7', 00H, 'z', 00H, 'E', 00H, 00H, 00H
$SG74378 DB	'.tmp', 00H
	ORG $+3
$SG74380 DB	'7', 00H, 'z', 00H, 00H, 00H
	ORG $+2
$SG74382 DB	'7', 00H, 'z', 00H, 00H, 00H
	ORG $+2
$SG74384 DB	'exe', 00H
$SG74931 DB	'cannot open file', 00H
	ORG $+3
$SG74957 DB	'cannot open SFX module', 00H
	ORG $+1
$SG74971 DB	'cannot open file', 00H
	ORG $+3
$SG75009 DB	'There are unclosed input file:', 00H
	ORG $+1
$SG75347 DB	'rsfx', 00H
	ORG $+3
$SG75349 DB	'SFX file is not specified', 00H
	ORG $+2
$SG75361 DB	'cannot find specified SFX module', 00H
	ORG $+3
$SG75374 DB	'type of archive is not specified', 00H
	ORG $+3
$SG75380 DB	'can''t find archive', 00H
	ORG $+1
$SG75388 DB	'there is no such archive', 00H
	ORG $+3
$SG75420 DB	'Updating for multivolume archives is not implemented', 00H
	ORG $+3
$SG75427 DB	'There is some data block after the end of the archive', 00H
	ORG $+2
$SG75467 DB	'Scanning error', 00H
	ORG $+1
$SG75502 DB	'The file already exists', 00H
$SG75524 DB	'stdout', 00H
	ORG $+1
$SG75551 DB	'cannot delete the file', 00H
	ORG $+1
$SG75553 DB	'cannot move the file', 00H
	ORG $+3
$SG75558 DB	'M', 00H, 'a', 00H, 'p', 00H, 'i', 00H, '3', 00H, '2', 00H
	DB	'.', 00H, 'd', 00H, 'l', 00H, 'l', 00H, 00H, 00H
	ORG $+2
$SG75559 DB	'cannot load Mapi32.dll', 00H
	ORG $+1
$SG75563 DB	'MAPISendMail', 00H
	ORG $+3
$SG75565 DB	'7-Zip cannot find MAPISendMail function', 00H
$SG75578 DB	'GetFullPathName error', 00H
CONST	ENDS
PUBLIC	?SetFromLastError@CUpdateErrorInfo@@QAEXPBD@Z	; CUpdateErrorInfo::SetFromLastError
EXTRN	??4AString@@QAEAAV0@PBD@Z:PROC			; AString::operator=
EXTRN	__imp__GetLastError@0:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\update.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
_message$ = 8						; size = 4
?SetFromLastError@CUpdateErrorInfo@@QAEXPBD@Z PROC	; CUpdateErrorInfo::SetFromLastError
; _this$ = ecx
; Line 46
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 47
	mov	esi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 48
	mov	edx, DWORD PTR _message$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??4AString@@QAEAAV0@PBD@Z		; AString::operator=
; Line 49
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetFromLastError@CUpdateErrorInfo@@QAEXPBD@Z ENDP	; CUpdateErrorInfo::SetFromLastError
_TEXT	ENDS
PUBLIC	?Get_HRESULT_Error@CUpdateErrorInfo@@QBEJXZ	; CUpdateErrorInfo::Get_HRESULT_Error
PUBLIC	?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z ; CObjectVector<UString>::Add
PUBLIC	?SetFromLastError@CUpdateErrorInfo@@QAEJPBDABVUString@@@Z ; CUpdateErrorInfo::SetFromLastError
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_message$ = 8						; size = 4
_fileName$ = 12						; size = 4
?SetFromLastError@CUpdateErrorInfo@@QAEJPBDABVUString@@@Z PROC ; CUpdateErrorInfo::SetFromLastError
; _this$ = ecx
; Line 52
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 53
	mov	eax, DWORD PTR _message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFromLastError@CUpdateErrorInfo@@QAEXPBD@Z ; CUpdateErrorInfo::SetFromLastError
; Line 54
	mov	ecx, DWORD PTR _fileName$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z ; CObjectVector<UString>::Add
; Line 55
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Get_HRESULT_Error@CUpdateErrorInfo@@QBEJXZ ; CUpdateErrorInfo::Get_HRESULT_Error
; Line 56
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?SetFromLastError@CUpdateErrorInfo@@QAEJPBDABVUString@@@Z ENDP ; CUpdateErrorInfo::SetFromLastError
_TEXT	ENDS
PUBLIC	_HRESULT_FROM_WIN32@4
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Get_HRESULT_Error@CUpdateErrorInfo@@QBEJXZ
_TEXT	SEGMENT
tv67 = -8						; size = 4
_this$ = -4						; size = 4
?Get_HRESULT_Error@CUpdateErrorInfo@@QBEJXZ PROC	; CUpdateErrorInfo::Get_HRESULT_Error, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\update.h
; Line 156
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN3@Get_HRESUL
	mov	DWORD PTR tv67[ebp], -2147467259	; 80004005H
	jmp	SHORT $LN4@Get_HRESUL
$LN3@Get_HRESUL:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_HRESULT_FROM_WIN32@4
	mov	DWORD PTR tv67[ebp], eax
$LN4@Get_HRESUL:
	mov	eax, DWORD PTR tv67[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Get_HRESULT_Error@CUpdateErrorInfo@@QBEJXZ ENDP	; CUpdateErrorInfo::Get_HRESULT_Error
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT _HRESULT_FROM_WIN32@4
_TEXT	SEGMENT
tv68 = -4						; size = 4
_x$ = 8							; size = 4
_HRESULT_FROM_WIN32@4 PROC				; COMDAT
; File c:\program files (x86)\microsoft sdks\windows\v7.0a\include\winerror.h
; Line 23841
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	cmp	DWORD PTR _x$[ebp], 0
	jg	SHORT $LN3@HRESULT_FR
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR tv68[ebp], eax
	jmp	SHORT $LN4@HRESULT_FR
$LN3@HRESULT_FR:
	mov	ecx, DWORD PTR _x$[ebp]
	and	ecx, 65535				; 0000ffffH
	or	ecx, 458752				; 00070000H
	or	ecx, -2147483648			; 80000000H
	mov	DWORD PTR tv68[ebp], ecx
$LN4@HRESULT_FR:
	mov	eax, DWORD PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
_HRESULT_FROM_WIN32@4 ENDP
_TEXT	ENDS
PUBLIC	??A?$CObjectVector@UCAltStreamInfo@COutMultiVolStream@@@@QAEAAUCAltStreamInfo@COutMultiVolStream@@I@Z ; CObjectVector<COutMultiVolStream::CAltStreamInfo>::operator[]
PUBLIC	?Size@?$CObjectVector@UCAltStreamInfo@COutMultiVolStream@@@@QBEIXZ ; CObjectVector<COutMultiVolStream::CAltStreamInfo>::Size
PUBLIC	?Close@COutMultiVolStream@@QAEJXZ		; COutMultiVolStream::Close
EXTRN	?Close@COutFileStream@@QAEJXZ:PROC		; COutFileStream::Close
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_res2$74231 = -20					; size = 4
_s$74229 = -16						; size = 4
_i$74225 = -12						; size = 4
_res$ = -8						; size = 4
_this$ = -4						; size = 4
?Close@COutMultiVolStream@@QAEJXZ PROC			; COutMultiVolStream::Close
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\update.cpp
; Line 129
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 130
	mov	DWORD PTR _res$[ebp], 0
; Line 131
	mov	DWORD PTR _i$74225[ebp], 0
	jmp	SHORT $LN5@Close
$LN4@Close:
	mov	eax, DWORD PTR _i$74225[ebp]
	add	eax, 1
	mov	DWORD PTR _i$74225[ebp], eax
$LN5@Close:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?Size@?$CObjectVector@UCAltStreamInfo@COutMultiVolStream@@@@QBEIXZ ; CObjectVector<COutMultiVolStream::CAltStreamInfo>::Size
	cmp	DWORD PTR _i$74225[ebp], eax
	jae	SHORT $LN3@Close
; Line 133
	mov	ecx, DWORD PTR _i$74225[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??A?$CObjectVector@UCAltStreamInfo@COutMultiVolStream@@@@QAEAAUCAltStreamInfo@COutMultiVolStream@@I@Z ; CObjectVector<COutMultiVolStream::CAltStreamInfo>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _s$74229[ebp], edx
; Line 134
	cmp	DWORD PTR _s$74229[ebp], 0
	je	SHORT $LN2@Close
; Line 136
	mov	ecx, DWORD PTR _s$74229[ebp]
	call	?Close@COutFileStream@@QAEJXZ		; COutFileStream::Close
	mov	DWORD PTR _res2$74231[ebp], eax
; Line 137
	cmp	DWORD PTR _res2$74231[ebp], 0
	je	SHORT $LN2@Close
; Line 138
	mov	eax, DWORD PTR _res2$74231[ebp]
	mov	DWORD PTR _res$[ebp], eax
$LN2@Close:
; Line 140
	jmp	SHORT $LN4@Close
$LN3@Close:
; Line 141
	mov	eax, DWORD PTR _res$[ebp]
; Line 142
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Close@COutMultiVolStream@@QAEJXZ ENDP			; COutMultiVolStream::Close
_TEXT	ENDS
PUBLIC	?SetMTime@COutFileStream@@QAE_NPBU_FILETIME@@@Z	; COutFileStream::SetMTime
PUBLIC	?SetMTime@COutMultiVolStream@@QAE_NPBU_FILETIME@@@Z ; COutMultiVolStream::SetMTime
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_s$74243 = -16						; size = 4
_i$74239 = -12						; size = 4
_res$ = -5						; size = 1
_this$ = -4						; size = 4
_mTime$ = 8						; size = 4
?SetMTime@COutMultiVolStream@@QAE_NPBU_FILETIME@@@Z PROC ; COutMultiVolStream::SetMTime
; _this$ = ecx
; Line 145
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 146
	mov	BYTE PTR _res$[ebp], 1
; Line 147
	mov	DWORD PTR _i$74239[ebp], 0
	jmp	SHORT $LN5@SetMTime
$LN4@SetMTime:
	mov	eax, DWORD PTR _i$74239[ebp]
	add	eax, 1
	mov	DWORD PTR _i$74239[ebp], eax
$LN5@SetMTime:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?Size@?$CObjectVector@UCAltStreamInfo@COutMultiVolStream@@@@QBEIXZ ; CObjectVector<COutMultiVolStream::CAltStreamInfo>::Size
	cmp	DWORD PTR _i$74239[ebp], eax
	jae	SHORT $LN3@SetMTime
; Line 149
	mov	ecx, DWORD PTR _i$74239[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??A?$CObjectVector@UCAltStreamInfo@COutMultiVolStream@@@@QAEAAUCAltStreamInfo@COutMultiVolStream@@I@Z ; CObjectVector<COutMultiVolStream::CAltStreamInfo>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _s$74243[ebp], edx
; Line 150
	cmp	DWORD PTR _s$74243[ebp], 0
	je	SHORT $LN2@SetMTime
; Line 151
	mov	eax, DWORD PTR _mTime$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$74243[ebp]
	call	?SetMTime@COutFileStream@@QAE_NPBU_FILETIME@@@Z ; COutFileStream::SetMTime
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN2@SetMTime
; Line 152
	mov	BYTE PTR _res$[ebp], 0
$LN2@SetMTime:
; Line 153
	jmp	SHORT $LN4@SetMTime
$LN3@SetMTime:
; Line 154
	mov	al, BYTE PTR _res$[ebp]
; Line 155
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetMTime@COutMultiVolStream@@QAE_NPBU_FILETIME@@@Z ENDP ; COutMultiVolStream::SetMTime
_TEXT	ENDS
EXTRN	?SetMTime@COutFile@NIO@NFile@NWindows@@QAE_NPBU_FILETIME@@@Z:PROC ; NWindows::NFile::NIO::COutFile::SetMTime
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetMTime@COutFileStream@@QAE_NPBU_FILETIME@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_mTime$ = 8						; size = 4
?SetMTime@COutFileStream@@QAE_NPBU_FILETIME@@@Z PROC	; COutFileStream::SetMTime, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\filestreams.h
; Line 139
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _mTime$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?SetMTime@COutFile@NIO@NFile@NWindows@@QAE_NPBU_FILETIME@@@Z ; NWindows::NFile::NIO::COutFile::SetMTime
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetMTime@COutFileStream@@QAE_NPBU_FILETIME@@@Z ENDP	; COutFileStream::SetMTime
_TEXT	ENDS
PUBLIC	??$MyMin@_K@@YG_K_K0@Z				; MyMin<unsigned __int64>
PUBLIC	??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator->
PUBLIC	??A?$CRecordVector@_K@@QAEAA_KI@Z		; CRecordVector<unsigned __int64>::operator[]
PUBLIC	?Size@?$CRecordVector@_K@@QBEIXZ		; CRecordVector<unsigned __int64>::Size
PUBLIC	?Add@?$CObjectVector@UCAltStreamInfo@COutMultiVolStream@@@@QAEIABUCAltStreamInfo@COutMultiVolStream@@@Z ; CObjectVector<COutMultiVolStream::CAltStreamInfo>::Add
PUBLIC	??1CAltStreamInfo@COutMultiVolStream@@QAE@XZ	; COutMultiVolStream::CAltStreamInfo::~CAltStreamInfo
PUBLIC	??1UString@@QAE@XZ				; UString::~UString
PUBLIC	?Create@COutFileStream@@QAE_NPB_W_N@Z		; COutFileStream::Create
PUBLIC	??BUString@@QBEPB_WXZ				; UString::operator wchar_t const *
PUBLIC	??4?$CMyComPtr@UIOutStream@@@@QAEPAUIOutStream@@PAU1@@Z ; CMyComPtr<IOutStream>::operator=
PUBLIC	??0COutFileStream@@QAE@XZ			; COutFileStream::COutFileStream
PUBLIC	?Len@UString@@QBEIXZ				; UString::Len
PUBLIC	??0CAltStreamInfo@COutMultiVolStream@@QAE@XZ	; COutMultiVolStream::CAltStreamInfo::CAltStreamInfo
PUBLIC	__$ArrayPad$
PUBLIC	?Write@COutMultiVolStream@@UAGJPBXIPAI@Z	; COutMultiVolStream::Write
EXTRN	??4UString@@QAEAAV0@ABV0@@Z:PROC		; UString::operator=
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	?Insert@UString@@QAEXIABV1@@Z:PROC		; UString::Insert
EXTRN	?InsertAtFront@UString@@QAEX_W@Z:PROC		; UString::InsertAtFront
EXTRN	??0UString@@QAE@PB_W@Z:PROC			; UString::UString
EXTRN	?ConvertUInt32ToString@@YGXIPA_W@Z:PROC		; ConvertUInt32ToString
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv454 = -208						; size = 4
tv436 = -204						; size = 4
tv435 = -200						; size = 4
tv418 = -196						; size = 4
tv417 = -192						; size = 4
tv213 = -188						; size = 4
tv187 = -184						; size = 4
tv327 = -180						; size = 4
tv326 = -176						; size = 4
tv306 = -172						; size = 4
tv130 = -168						; size = 4
$T77278 = -164						; size = 4
$T77275 = -160						; size = 4
$T77274 = -156						; size = 4
___result__$74286 = -152				; size = 4
_realProcessed$74285 = -144				; size = 4
_curSize$74277 = -136					; size = 4
___result__$74275 = -132				; size = 4
_volSize$74272 = -128					; size = 8
_index$74270 = -120					; size = 4
_altStream$74269 = -116					; size = 4
_name$74259 = -108					; size = 12
_temp$74258 = -88					; size = 32
_altStream$74257 = -48					; size = 40
__$ArrayPad$ = -4					; size = 4
_this$ = 8						; size = 4
_data$ = 12						; size = 4
_size$ = 16						; size = 4
_processedSize$ = 20					; size = 4
?Write@COutMultiVolStream@@UAGJPBXIPAI@Z PROC		; COutMultiVolStream::Write
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\update.cpp
; Line 158
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 159
	cmp	DWORD PTR _processedSize$[ebp], 0
	je	SHORT $LN16@Write
; Line 160
	mov	eax, DWORD PTR _processedSize$[ebp]
	mov	DWORD PTR [eax], 0
$LN16@Write:
; Line 161
	cmp	DWORD PTR _size$[ebp], 0
	jbe	$LN15@Write
; Line 163
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?Size@?$CObjectVector@UCAltStreamInfo@COutMultiVolStream@@@@QBEIXZ ; CObjectVector<COutMultiVolStream::CAltStreamInfo>::Size
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+8], eax
	jb	$LN14@Write
; Line 165
	lea	ecx, DWORD PTR _altStream$74257[ebp]
	call	??0CAltStreamInfo@COutMultiVolStream@@QAE@XZ
; Line 168
	lea	edx, DWORD PTR _temp$74258[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	push	ecx
	call	?ConvertUInt32ToString@@YGXIPA_W@Z	; ConvertUInt32ToString
; Line 169
	lea	edx, DWORD PTR _temp$74258[ebp]
	push	edx
	lea	ecx, DWORD PTR _name$74259[ebp]
	call	??0UString@@QAE@PB_W@Z			; UString::UString
$LN13@Write:
; Line 170
	lea	ecx, DWORD PTR _name$74259[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	cmp	eax, 3
	jae	SHORT $LN12@Write
; Line 171
	push	48					; 00000030H
	lea	ecx, DWORD PTR _name$74259[ebp]
	call	?InsertAtFront@UString@@QAEX_W@Z	; UString::InsertAtFront
	jmp	SHORT $LN13@Write
$LN12@Write:
; Line 172
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 64					; 00000040H
	push	eax
	push	0
	lea	ecx, DWORD PTR _name$74259[ebp]
	call	?Insert@UString@@QAEXIABV1@@Z		; UString::Insert
; Line 173
	push	32					; 00000020H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T77275[ebp], eax
	cmp	DWORD PTR $T77275[ebp], 0
	je	SHORT $LN20@Write
	mov	ecx, DWORD PTR $T77275[ebp]
	call	??0COutFileStream@@QAE@XZ
	mov	DWORD PTR tv130[ebp], eax
	jmp	SHORT $LN21@Write
$LN20@Write:
	mov	DWORD PTR tv130[ebp], 0
$LN21@Write:
	mov	ecx, DWORD PTR tv130[ebp]
	mov	DWORD PTR $T77274[ebp], ecx
	mov	edx, DWORD PTR $T77274[ebp]
	mov	DWORD PTR _altStream$74257[ebp], edx
; Line 174
	mov	eax, DWORD PTR _altStream$74257[ebp]
	push	eax
	lea	ecx, DWORD PTR _altStream$74257[ebp+4]
	call	??4?$CMyComPtr@UIOutStream@@@@QAEPAUIOutStream@@PAU1@@Z ; CMyComPtr<IOutStream>::operator=
; Line 175
	push	0
	lea	ecx, DWORD PTR _name$74259[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	mov	ecx, DWORD PTR _altStream$74257[ebp]
	call	?Create@COutFileStream@@QAE_NPB_W_N@Z	; COutFileStream::Create
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN11@Write
; Line 176
	mov	esi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T77278[ebp], eax
	lea	ecx, DWORD PTR _name$74259[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	lea	ecx, DWORD PTR _altStream$74257[ebp]
	call	??1CAltStreamInfo@COutMultiVolStream@@QAE@XZ
	mov	eax, DWORD PTR $T77278[ebp]
	jmp	$LN18@Write
$LN11@Write:
; Line 179
	lea	edx, DWORD PTR _name$74259[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	call	?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z ; CObjectVector<UString>::Add
; Line 182
	mov	DWORD PTR _altStream$74257[ebp+24], 0
	mov	DWORD PTR _altStream$74257[ebp+28], 0
; Line 183
	mov	DWORD PTR _altStream$74257[ebp+32], 0
	mov	DWORD PTR _altStream$74257[ebp+36], 0
; Line 184
	lea	ecx, DWORD PTR _name$74259[ebp]
	push	ecx
	lea	ecx, DWORD PTR _altStream$74257[ebp+8]
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
; Line 185
	lea	edx, DWORD PTR _altStream$74257[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?Add@?$CObjectVector@UCAltStreamInfo@COutMultiVolStream@@@@QAEIABUCAltStreamInfo@COutMultiVolStream@@@Z ; CObjectVector<COutMultiVolStream::CAltStreamInfo>::Add
; Line 186
	lea	ecx, DWORD PTR _name$74259[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	lea	ecx, DWORD PTR _altStream$74257[ebp]
	call	??1CAltStreamInfo@COutMultiVolStream@@QAE@XZ
	jmp	$LN16@Write
$LN14@Write:
; Line 188
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??A?$CObjectVector@UCAltStreamInfo@COutMultiVolStream@@@@QAEAAUCAltStreamInfo@COutMultiVolStream@@I@Z ; CObjectVector<COutMultiVolStream::CAltStreamInfo>::operator[]
	mov	DWORD PTR _altStream$74269[ebp], eax
; Line 190
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _index$74270[ebp], eax
; Line 191
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	?Size@?$CRecordVector@_K@@QBEIXZ	; CRecordVector<unsigned __int64>::Size
	cmp	DWORD PTR _index$74270[ebp], eax
	jb	SHORT $LN10@Write
; Line 192
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	?Size@?$CRecordVector@_K@@QBEIXZ	; CRecordVector<unsigned __int64>::Size
	sub	eax, 1
	mov	DWORD PTR _index$74270[ebp], eax
$LN10@Write:
; Line 193
	mov	ecx, DWORD PTR _index$74270[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??A?$CRecordVector@_K@@QAEAA_KI@Z	; CRecordVector<unsigned __int64>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _volSize$74272[ebp], edx
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR _volSize$74272[ebp+4], eax
; Line 195
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv306[ebp], ecx
	mov	edx, DWORD PTR tv306[ebp]
	mov	eax, DWORD PTR [edx+20]
	cmp	eax, DWORD PTR _volSize$74272[ebp+4]
	jb	SHORT $LN9@Write
	ja	SHORT $LN23@Write
	mov	ecx, DWORD PTR tv306[ebp]
	mov	edx, DWORD PTR [ecx+16]
	cmp	edx, DWORD PTR _volSize$74272[ebp]
	jb	SHORT $LN9@Write
$LN23@Write:
; Line 197
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	sub	ecx, DWORD PTR _volSize$74272[ebp]
	mov	edx, DWORD PTR [eax+20]
	sbb	edx, DWORD PTR _volSize$74272[ebp+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], ecx
	mov	DWORD PTR [eax+20], edx
; Line 198
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx
; Line 199
	jmp	$LN16@Write
$LN9@Write:
; Line 201
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _altStream$74269[ebp]
	mov	DWORD PTR tv326[ebp], ecx
	mov	DWORD PTR tv327[ebp], edx
	mov	eax, DWORD PTR tv326[ebp]
	mov	ecx, DWORD PTR tv327[ebp]
	mov	edx, DWORD PTR [eax+16]
	cmp	edx, DWORD PTR [ecx+24]
	jne	SHORT $LN24@Write
	mov	eax, DWORD PTR tv326[ebp]
	mov	ecx, DWORD PTR tv327[ebp]
	mov	edx, DWORD PTR [eax+20]
	cmp	edx, DWORD PTR [ecx+28]
	je	SHORT $LN8@Write
$LN24@Write:
; Line 205
	mov	ecx, DWORD PTR _altStream$74269[ebp]
	add	ecx, 4
	call	??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator->
	mov	DWORD PTR tv187[ebp], eax
	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR [eax+16]
	push	edx
	mov	eax, DWORD PTR tv187[ebp]
	push	eax
	mov	ecx, DWORD PTR tv187[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$74275[ebp], eax
	cmp	DWORD PTR ___result__$74275[ebp], 0
	je	SHORT $LN7@Write
	mov	eax, DWORD PTR ___result__$74275[ebp]
	jmp	$LN18@Write
$LN7@Write:
; Line 206
	mov	ecx, DWORD PTR _altStream$74269[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+24], eax
	mov	edx, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+28], edx
$LN8@Write:
; Line 209
	mov	eax, DWORD PTR _altStream$74269[ebp]
	mov	ecx, DWORD PTR _volSize$74272[ebp]
	sub	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _volSize$74272[ebp+4]
	sbb	edx, DWORD PTR [eax+28]
	push	edx
	push	ecx
	mov	eax, DWORD PTR _size$[ebp]
	xor	ecx, ecx
	push	ecx
	push	eax
	call	??$MyMin@_K@@YG_K_K0@Z			; MyMin<unsigned __int64>
	mov	DWORD PTR _curSize$74277[ebp], eax
; Line 211
	mov	ecx, DWORD PTR _altStream$74269[ebp]
	add	ecx, 4
	call	??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator->
	mov	DWORD PTR tv213[ebp], eax
	mov	esi, esp
	lea	edx, DWORD PTR _realProcessed$74285[ebp]
	push	edx
	mov	eax, DWORD PTR _curSize$74277[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv213[ebp]
	push	edx
	mov	eax, DWORD PTR tv213[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$74286[ebp], eax
	cmp	DWORD PTR ___result__$74286[ebp], 0
	je	SHORT $LN6@Write
	mov	eax, DWORD PTR ___result__$74286[ebp]
	jmp	$LN18@Write
$LN6@Write:
; Line 212
	mov	eax, DWORD PTR _data$[ebp]
	add	eax, DWORD PTR _realProcessed$74285[ebp]
	mov	DWORD PTR _data$[ebp], eax
; Line 213
	mov	ecx, DWORD PTR _size$[ebp]
	sub	ecx, DWORD PTR _realProcessed$74285[ebp]
	mov	DWORD PTR _size$[ebp], ecx
; Line 214
	mov	edx, DWORD PTR _realProcessed$74285[ebp]
	xor	eax, eax
	mov	ecx, DWORD PTR _altStream$74269[ebp]
	add	edx, DWORD PTR [ecx+24]
	adc	eax, DWORD PTR [ecx+28]
	mov	ecx, DWORD PTR _altStream$74269[ebp]
	mov	DWORD PTR [ecx+24], edx
	mov	DWORD PTR [ecx+28], eax
; Line 215
	mov	edx, DWORD PTR _realProcessed$74285[ebp]
	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [ecx+16]
	adc	eax, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], edx
	mov	DWORD PTR [ecx+20], eax
; Line 216
	mov	edx, DWORD PTR _realProcessed$74285[ebp]
	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [ecx+24]
	adc	eax, DWORD PTR [ecx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], edx
	mov	DWORD PTR [ecx+28], eax
; Line 217
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv417[ebp], edx
	mov	DWORD PTR tv418[ebp], eax
	mov	ecx, DWORD PTR tv417[ebp]
	mov	edx, DWORD PTR tv418[ebp]
	mov	eax, DWORD PTR [ecx+28]
	cmp	eax, DWORD PTR [edx+36]
	jb	SHORT $LN5@Write
	ja	SHORT $LN25@Write
	mov	ecx, DWORD PTR tv417[ebp]
	mov	edx, DWORD PTR tv418[ebp]
	mov	eax, DWORD PTR [ecx+24]
	cmp	eax, DWORD PTR [edx+32]
	jbe	SHORT $LN5@Write
$LN25@Write:
; Line 218
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [ecx+32], eax
	mov	edx, DWORD PTR [edx+28]
	mov	DWORD PTR [ecx+36], edx
$LN5@Write:
; Line 219
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _altStream$74269[ebp]
	mov	DWORD PTR tv435[ebp], eax
	mov	DWORD PTR tv436[ebp], ecx
	mov	edx, DWORD PTR tv435[ebp]
	mov	eax, DWORD PTR tv436[ebp]
	mov	ecx, DWORD PTR [edx+20]
	cmp	ecx, DWORD PTR [eax+36]
	jb	SHORT $LN4@Write
	ja	SHORT $LN26@Write
	mov	edx, DWORD PTR tv435[ebp]
	mov	eax, DWORD PTR tv436[ebp]
	mov	ecx, DWORD PTR [edx+16]
	cmp	ecx, DWORD PTR [eax+32]
	jbe	SHORT $LN4@Write
$LN26@Write:
; Line 220
	mov	edx, DWORD PTR _altStream$74269[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+32], ecx
	mov	eax, DWORD PTR [eax+20]
	mov	DWORD PTR [edx+36], eax
$LN4@Write:
; Line 221
	cmp	DWORD PTR _processedSize$[ebp], 0
	je	SHORT $LN3@Write
; Line 222
	mov	ecx, DWORD PTR _processedSize$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, DWORD PTR _realProcessed$74285[ebp]
	mov	eax, DWORD PTR _processedSize$[ebp]
	mov	DWORD PTR [eax], edx
$LN3@Write:
; Line 223
	mov	ecx, DWORD PTR _altStream$74269[ebp]
	mov	DWORD PTR tv454[ebp], ecx
	mov	edx, DWORD PTR tv454[ebp]
	mov	eax, DWORD PTR [edx+24]
	cmp	eax, DWORD PTR _volSize$74272[ebp]
	jne	SHORT $LN2@Write
	mov	ecx, DWORD PTR tv454[ebp]
	mov	edx, DWORD PTR [ecx+28]
	cmp	edx, DWORD PTR _volSize$74272[ebp+4]
	jne	SHORT $LN2@Write
; Line 225
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx
; Line 226
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0
	mov	DWORD PTR [eax+20], 0
$LN2@Write:
; Line 228
	cmp	DWORD PTR _realProcessed$74285[ebp], 0
	jne	SHORT $LN1@Write
	cmp	DWORD PTR _curSize$74277[ebp], 0
	je	SHORT $LN1@Write
; Line 229
	mov	eax, -2147467259			; 80004005H
	jmp	SHORT $LN18@Write
$LN1@Write:
; Line 230
	jmp	SHORT $LN15@Write
; Line 231
	jmp	$LN16@Write
$LN15@Write:
; Line 232
	xor	eax, eax
$LN18@Write:
; Line 233
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN32@Write
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	1
$LN32@Write:
	DD	4
	DD	$LN31@Write
$LN31@Write:
	DD	-48					; ffffffd0H
	DD	40					; 00000028H
	DD	$LN27@Write
	DD	-88					; ffffffa8H
	DD	32					; 00000020H
	DD	$LN28@Write
	DD	-108					; ffffff94H
	DD	12					; 0000000cH
	DD	$LN29@Write
	DD	-144					; ffffff70H
	DD	4
	DD	$LN30@Write
$LN30@Write:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$LN29@Write:
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN28@Write:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
$LN27@Write:
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
?Write@COutMultiVolStream@@UAGJPBXIPAI@Z ENDP		; COutMultiVolStream::Write
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1UString@@QAE@XZ
_TEXT	SEGMENT
$T77294 = -8						; size = 4
_this$ = -4						; size = 4
??1UString@@QAE@XZ PROC					; UString::~UString, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 470
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T77294[ebp], ecx
	mov	edx, DWORD PTR $T77294[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1UString@@QAE@XZ ENDP					; UString::~UString
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Len@UString@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Len@UString@@QBEIXZ PROC				; UString::Len, COMDAT
; _this$ = ecx
; Line 472
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Len@UString@@QBEIXZ ENDP				; UString::Len
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??BUString@@QBEPB_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BUString@@QBEPB_WXZ PROC				; UString::operator wchar_t const *, COMDAT
; _this$ = ecx
; Line 476
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??BUString@@QBEPB_WXZ ENDP				; UString::operator wchar_t const *
_TEXT	ENDS
EXTRN	?Create@COutFile@NIO@NFile@NWindows@@QAE_NPB_W_N@Z:PROC ; NWindows::NFile::NIO::COutFile::Create
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Create@COutFileStream@@QAE_NPB_W_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_fileName$ = 8						; size = 4
_createAlways$ = 12					; size = 1
?Create@COutFileStream@@QAE_NPB_W_N@Z PROC		; COutFileStream::Create, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\filestreams.h
; Line 120
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 121
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0
	mov	DWORD PTR [eax+28], 0
; Line 122
	movzx	ecx, BYTE PTR _createAlways$[ebp]
	push	ecx
	mov	edx, DWORD PTR _fileName$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Create@COutFile@NIO@NFile@NWindows@@QAE_NPB_W_N@Z ; NWindows::NFile::NIO::COutFile::Create
; Line 123
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Create@COutFileStream@@QAE_NPB_W_N@Z ENDP		; COutFileStream::Create
_TEXT	ENDS
PUBLIC	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ		; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
PUBLIC	??0?$CMyComPtr@UIOutStream@@@@QAE@XZ		; CMyComPtr<IOutStream>::CMyComPtr<IOutStream>
EXTRN	??0UString@@QAE@XZ:PROC				; UString::UString
EXTRN	___CxxFrameHandler3:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CAltStreamInfo@COutMultiVolStream@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CAltStreamInfo@COutMultiVolStream@@QAE@XZ$0
__ehfuncinfo$??0CAltStreamInfo@COutMultiVolStream@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CAltStreamInfo@COutMultiVolStream@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CAltStreamInfo@COutMultiVolStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CAltStreamInfo@COutMultiVolStream@@QAE@XZ PROC	; COutMultiVolStream::CAltStreamInfo::CAltStreamInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CAltStreamInfo@COutMultiVolStream@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::CMyComPtr<IOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CAltStreamInfo@COutMultiVolStream@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
__ehhandler$??0CAltStreamInfo@COutMultiVolStream@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CAltStreamInfo@COutMultiVolStream@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CAltStreamInfo@COutMultiVolStream@@QAE@XZ ENDP	; COutMultiVolStream::CAltStreamInfo::CAltStreamInfo
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CAltStreamInfo@COutMultiVolStream@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CAltStreamInfo@COutMultiVolStream@@QAE@XZ$0
__ehfuncinfo$??1CAltStreamInfo@COutMultiVolStream@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CAltStreamInfo@COutMultiVolStream@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CAltStreamInfo@COutMultiVolStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CAltStreamInfo@COutMultiVolStream@@QAE@XZ PROC	; COutMultiVolStream::CAltStreamInfo::~CAltStreamInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CAltStreamInfo@COutMultiVolStream@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CAltStreamInfo@COutMultiVolStream@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
__ehhandler$??1CAltStreamInfo@COutMultiVolStream@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CAltStreamInfo@COutMultiVolStream@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CAltStreamInfo@COutMultiVolStream@@QAE@XZ ENDP	; COutMultiVolStream::CAltStreamInfo::~CAltStreamInfo
PUBLIC	??0COutFile@NIO@NFile@NWindows@@QAE@XZ		; NWindows::NFile::NIO::COutFile::COutFile
PUBLIC	??_7COutFileStream@@6B@				; COutFileStream::`vftable'
PUBLIC	??0CMyUnknownImp@@QAE@XZ			; CMyUnknownImp::CMyUnknownImp
PUBLIC	??0IOutStream@@QAE@XZ				; IOutStream::IOutStream
PUBLIC	??_R4COutFileStream@@6B@			; COutFileStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCOutFileStream@@@8			; COutFileStream `RTTI Type Descriptor'
PUBLIC	??_R3COutFileStream@@8				; COutFileStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2COutFileStream@@8				; COutFileStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@COutFileStream@@8			; COutFileStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@IOutStream@@8			; IOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIOutStream@@@8				; IOutStream `RTTI Type Descriptor'
PUBLIC	??_R3IOutStream@@8				; IOutStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IOutStream@@8				; IOutStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ISequentialOutStream@@8		; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUISequentialOutStream@@@8		; ISequentialOutStream `RTTI Type Descriptor'
PUBLIC	??_R3ISequentialOutStream@@8			; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ISequentialOutStream@@8			; ISequentialOutStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIUnknown@@@8				; IUnknown `RTTI Type Descriptor'
PUBLIC	??_R3IUnknown@@8				; IUnknown::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IUnknown@@8				; IUnknown::`RTTI Base Class Array'
PUBLIC	??_R13?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AVCMyUnknownImp@@@8			; CMyUnknownImp `RTTI Type Descriptor'
PUBLIC	??_R3CMyUnknownImp@@8				; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMyUnknownImp@@8				; CMyUnknownImp::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?QueryInterface@COutFileStream@@UAGJABU_GUID@@PAPAX@Z ; COutFileStream::QueryInterface
PUBLIC	?AddRef@COutFileStream@@UAGKXZ			; COutFileStream::AddRef
PUBLIC	?Release@COutFileStream@@UAGKXZ			; COutFileStream::Release
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?Write@COutFileStream@@UAGJPBXIPAI@Z:PROC	; COutFileStream::Write
EXTRN	?Seek@COutFileStream@@UAGJ_JIPA_K@Z:PROC	; COutFileStream::Seek
EXTRN	?SetSize@COutFileStream@@UAGJ_K@Z:PROC		; COutFileStream::SetSize
EXTRN	??_ECOutFileStream@@UAEPAXI@Z:PROC		; COutFileStream::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R2CMyUnknownImp@@8
rdata$r	SEGMENT
??_R2CMyUnknownImp@@8 DD FLAT:??_R1A@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMyUnknownImp@@8
rdata$r	SEGMENT
??_R3CMyUnknownImp@@8 DD 00H				; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMyUnknownImp@@@8
_DATA	SEGMENT
??_R0?AVCMyUnknownImp@@@8 DD FLAT:??_7type_info@@6B@	; CMyUnknownImp `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMyUnknownImp@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R13?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R2IUnknown@@8
rdata$r	SEGMENT
??_R2IUnknown@@8 DD FLAT:??_R1A@?0A@EA@IUnknown@@8	; IUnknown::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3IUnknown@@8
rdata$r	SEGMENT
??_R3IUnknown@@8 DD 00H					; IUnknown::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIUnknown@@@8
_DATA	SEGMENT
??_R0?AUIUnknown@@@8 DD FLAT:??_7type_info@@6B@		; IUnknown `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIUnknown@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IUnknown@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R2ISequentialOutStream@@8
rdata$r	SEGMENT
??_R2ISequentialOutStream@@8 DD FLAT:??_R1A@?0A@EA@ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ISequentialOutStream@@8
rdata$r	SEGMENT
??_R3ISequentialOutStream@@8 DD 00H			; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ISequentialOutStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUISequentialOutStream@@@8
_DATA	SEGMENT
??_R0?AUISequentialOutStream@@@8 DD FLAT:??_7type_info@@6B@ ; ISequentialOutStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUISequentialOutStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ISequentialOutStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ISequentialOutStream@@8 DD FLAT:??_R0?AUISequentialOutStream@@@8 ; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ISequentialOutStream@@8
rdata$r	ENDS
;	COMDAT ??_R2IOutStream@@8
rdata$r	SEGMENT
??_R2IOutStream@@8 DD FLAT:??_R1A@?0A@EA@IOutStream@@8	; IOutStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ISequentialOutStream@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3IOutStream@@8
rdata$r	SEGMENT
??_R3IOutStream@@8 DD 00H				; IOutStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2IOutStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIOutStream@@@8
_DATA	SEGMENT
??_R0?AUIOutStream@@@8 DD FLAT:??_7type_info@@6B@	; IOutStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIOutStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IOutStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IOutStream@@8 DD FLAT:??_R0?AUIOutStream@@@8 ; IOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IOutStream@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@COutFileStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@COutFileStream@@8 DD FLAT:??_R0?AVCOutFileStream@@@8 ; COutFileStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3COutFileStream@@8
rdata$r	ENDS
;	COMDAT ??_R2COutFileStream@@8
rdata$r	SEGMENT
??_R2COutFileStream@@8 DD FLAT:??_R1A@?0A@EA@COutFileStream@@8 ; COutFileStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IOutStream@@8
	DD	FLAT:??_R1A@?0A@EA@ISequentialOutStream@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3COutFileStream@@8
rdata$r	SEGMENT
??_R3COutFileStream@@8 DD 00H				; COutFileStream::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2COutFileStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCOutFileStream@@@8
_DATA	SEGMENT
??_R0?AVCOutFileStream@@@8 DD FLAT:??_7type_info@@6B@	; COutFileStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCOutFileStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R4COutFileStream@@6B@
rdata$r	SEGMENT
??_R4COutFileStream@@6B@ DD 00H				; COutFileStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCOutFileStream@@@8
	DD	FLAT:??_R3COutFileStream@@8
rdata$r	ENDS
;	COMDAT ??_7COutFileStream@@6B@
CONST	SEGMENT
??_7COutFileStream@@6B@ DD FLAT:??_R4COutFileStream@@6B@ ; COutFileStream::`vftable'
	DD	FLAT:?QueryInterface@COutFileStream@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@COutFileStream@@UAGKXZ
	DD	FLAT:?Release@COutFileStream@@UAGKXZ
	DD	FLAT:?Write@COutFileStream@@UAGJPBXIPAI@Z
	DD	FLAT:?Seek@COutFileStream@@UAGJ_JIPA_K@Z
	DD	FLAT:?SetSize@COutFileStream@@UAGJ_K@Z
	DD	FLAT:??_ECOutFileStream@@UAEPAXI@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0COutFileStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0COutFileStream@@QAE@XZ PROC				; COutFileStream::COutFileStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IOutStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7COutFileStream@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0COutFile@NIO@NFile@NWindows@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0COutFileStream@@QAE@XZ ENDP				; COutFileStream::COutFileStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CMyUnknownImp@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMyUnknownImp@@QAE@XZ PROC				; CMyUnknownImp::CMyUnknownImp, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 167
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CMyUnknownImp@@QAE@XZ ENDP				; CMyUnknownImp::CMyUnknownImp
_TEXT	ENDS
PUBLIC	_==@8
EXTRN	_IID_IOutStream:BYTE
EXTRN	_IID_IUnknown:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@COutFileStream@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@COutFileStream@@UAGJABU_GUID@@PAPAX@Z PROC ; COutFileStream::QueryInterface, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\common\filestreams.h
; Line 143
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@QueryInter
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN3@QueryInter
$LN4@QueryInter:
	push	OFFSET _IID_IOutStream
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN3@QueryInter
$LN2@QueryInter:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN5@QueryInter
$LN3@QueryInter:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	xor	eax, eax
$LN5@QueryInter:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@COutFileStream@@UAGJABU_GUID@@PAPAX@Z ENDP ; COutFileStream::QueryInterface
_TEXT	ENDS
PUBLIC	_IsEqualGUID@8
; Function compile flags: /Odtp /RTCsu
;	COMDAT _==@8
_TEXT	SEGMENT
_guidOne$ = 8						; size = 4
_guidOther$ = 12					; size = 4
_==@8	PROC						; COMDAT
; File c:\program files (x86)\microsoft sdks\windows\v7.0a\include\guiddef.h
; Line 193
	push	ebp
	mov	ebp, esp
; Line 194
	mov	eax, DWORD PTR _guidOther$[ebp]
	push	eax
	mov	ecx, DWORD PTR _guidOne$[ebp]
	push	ecx
	call	_IsEqualGUID@8
; Line 195
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_==@8	ENDP
_TEXT	ENDS
EXTRN	_memcmp:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT _IsEqualGUID@8
_TEXT	SEGMENT
_rguid1$ = 8						; size = 4
_rguid2$ = 12						; size = 4
_IsEqualGUID@8 PROC					; COMDAT
; Line 160
	push	ebp
	mov	ebp, esp
; Line 161
	push	16					; 00000010H
	mov	eax, DWORD PTR _rguid2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rguid1$[ebp]
	push	ecx
	call	_memcmp
	add	esp, 12					; 0000000cH
	neg	eax
	sbb	eax, eax
	add	eax, 1
; Line 162
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_IsEqualGUID@8 ENDP
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@COutFileStream@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@COutFileStream@@UAGKXZ PROC			; COutFileStream::AddRef, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\common\filestreams.h
; Line 143
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@COutFileStream@@UAGKXZ ENDP			; COutFileStream::AddRef
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@COutFileStream@@UAGKXZ
_TEXT	SEGMENT
tv83 = -16						; size = 4
tv70 = -12						; size = 4
$T77340 = -8						; size = 4
$T77339 = -4						; size = 4
_this$ = 8						; size = 4
?Release@COutFileStream@@UAGKXZ PROC			; COutFileStream::Release, COMDAT
; Line 143
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	jmp	SHORT $LN2@Release
$LN1@Release:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T77340[ebp], edx
	mov	eax, DWORD PTR $T77340[ebp]
	mov	DWORD PTR $T77339[ebp], eax
	cmp	DWORD PTR $T77339[ebp], 0
	je	SHORT $LN4@Release
	mov	esi, esp
	push	1
	mov	ecx, DWORD PTR $T77339[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T77339[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv83[ebp], eax
	jmp	SHORT $LN5@Release
$LN4@Release:
	mov	DWORD PTR tv83[ebp], 0
$LN5@Release:
	xor	eax, eax
$LN2@Release:
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@COutFileStream@@UAGKXZ ENDP			; COutFileStream::Release
_TEXT	ENDS
PUBLIC	??1COutFileStream@@UAE@XZ			; COutFileStream::~COutFileStream
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCOutFileStream@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCOutFileStream@@UAEPAXI@Z PROC			; COutFileStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1COutFileStream@@UAE@XZ		; COutFileStream::~COutFileStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCOutFileStream@@UAEPAXI@Z ENDP			; COutFileStream::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1COutFile@NIO@NFile@NWindows@@QAE@XZ		; NWindows::NFile::NIO::COutFile::~COutFile
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1COutFileStream@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1COutFileStream@@UAE@XZ PROC				; COutFileStream::~COutFileStream, COMDAT
; _this$ = ecx
; Line 118
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7COutFileStream@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1COutFile@NIO@NFile@NWindows@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1COutFileStream@@UAE@XZ ENDP				; COutFileStream::~COutFileStream
_TEXT	ENDS
PUBLIC	??1CFileBase@NIO@NFile@NWindows@@QAE@XZ		; NWindows::NFile::NIO::CFileBase::~CFileBase
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1COutFile@NIO@NFile@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1COutFile@NIO@NFile@NWindows@@QAE@XZ PROC		; NWindows::NFile::NIO::COutFile::~COutFile, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CFileBase@NIO@NFile@NWindows@@QAE@XZ	; NWindows::NFile::NIO::CFileBase::~CFileBase
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1COutFile@NIO@NFile@NWindows@@QAE@XZ ENDP		; NWindows::NFile::NIO::COutFile::~COutFile
_TEXT	ENDS
EXTRN	?Close@CFileBase@NIO@NFile@NWindows@@QAE_NXZ:PROC ; NWindows::NFile::NIO::CFileBase::Close
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CFileBase@NIO@NFile@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CFileBase@NIO@NFile@NWindows@@QAE@XZ PROC		; NWindows::NFile::NIO::CFileBase::~CFileBase, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\fileio.h
; Line 98
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Close@CFileBase@NIO@NFile@NWindows@@QAE_NXZ ; NWindows::NFile::NIO::CFileBase::Close
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CFileBase@NIO@NFile@NWindows@@QAE@XZ ENDP		; NWindows::NFile::NIO::CFileBase::~CFileBase
_TEXT	ENDS
PUBLIC	??_7IOutStream@@6B@				; IOutStream::`vftable'
PUBLIC	??0ISequentialOutStream@@QAE@XZ			; ISequentialOutStream::ISequentialOutStream
PUBLIC	??_R4IOutStream@@6B@				; IOutStream::`RTTI Complete Object Locator'
EXTRN	__purecall:PROC
;	COMDAT ??_R4IOutStream@@6B@
rdata$r	SEGMENT
??_R4IOutStream@@6B@ DD 00H				; IOutStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIOutStream@@@8
	DD	FLAT:??_R3IOutStream@@8
rdata$r	ENDS
;	COMDAT ??_7IOutStream@@6B@
CONST	SEGMENT
??_7IOutStream@@6B@ DD FLAT:??_R4IOutStream@@6B@	; IOutStream::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0IOutStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IOutStream@@QAE@XZ PROC				; IOutStream::IOutStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ISequentialOutStream@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7IOutStream@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0IOutStream@@QAE@XZ ENDP				; IOutStream::IOutStream
_TEXT	ENDS
PUBLIC	??_7ISequentialOutStream@@6B@			; ISequentialOutStream::`vftable'
PUBLIC	??0IUnknown@@QAE@XZ				; IUnknown::IUnknown
PUBLIC	??_R4ISequentialOutStream@@6B@			; ISequentialOutStream::`RTTI Complete Object Locator'
;	COMDAT ??_R4ISequentialOutStream@@6B@
rdata$r	SEGMENT
??_R4ISequentialOutStream@@6B@ DD 00H			; ISequentialOutStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUISequentialOutStream@@@8
	DD	FLAT:??_R3ISequentialOutStream@@8
rdata$r	ENDS
;	COMDAT ??_7ISequentialOutStream@@6B@
CONST	SEGMENT
??_7ISequentialOutStream@@6B@ DD FLAT:??_R4ISequentialOutStream@@6B@ ; ISequentialOutStream::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ISequentialOutStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ISequentialOutStream@@QAE@XZ PROC			; ISequentialOutStream::ISequentialOutStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ISequentialOutStream@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ISequentialOutStream@@QAE@XZ ENDP			; ISequentialOutStream::ISequentialOutStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0IUnknown@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IUnknown@@QAE@XZ PROC				; IUnknown::IUnknown, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0IUnknown@@QAE@XZ ENDP				; IUnknown::IUnknown
_TEXT	ENDS
PUBLIC	??0CFileBase@NIO@NFile@NWindows@@QAE@XZ		; NWindows::NFile::NIO::CFileBase::CFileBase
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0COutFile@NIO@NFile@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0COutFile@NIO@NFile@NWindows@@QAE@XZ PROC		; NWindows::NFile::NIO::COutFile::COutFile, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CFileBase@NIO@NFile@NWindows@@QAE@XZ	; NWindows::NFile::NIO::CFileBase::CFileBase
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0COutFile@NIO@NFile@NWindows@@QAE@XZ ENDP		; NWindows::NFile::NIO::COutFile::COutFile
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CFileBase@NIO@NFile@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CFileBase@NIO@NFile@NWindows@@QAE@XZ PROC		; NWindows::NFile::NIO::CFileBase::CFileBase, COMDAT
; _this$ = ecx
; Line 97
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CFileBase@NIO@NFile@NWindows@@QAE@XZ ENDP		; NWindows::NFile::NIO::CFileBase::CFileBase
_TEXT	ENDS
PUBLIC	?Seek@COutMultiVolStream@@UAGJ_JIPA_K@Z		; COutMultiVolStream::Seek
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv65 = -4						; size = 4
_this$ = 8						; size = 4
_offset$ = 12						; size = 8
_seekOrigin$ = 20					; size = 4
_newPosition$ = 24					; size = 4
?Seek@COutMultiVolStream@@UAGJ_JIPA_K@Z PROC		; COutMultiVolStream::Seek
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\update.cpp
; Line 236
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 237
	cmp	DWORD PTR _seekOrigin$[ebp], 3
	jb	SHORT $LN7@Seek
; Line 238
	mov	eax, -2147287039			; 80030001H
	jmp	$LN8@Seek
$LN7@Seek:
; Line 239
	mov	eax, DWORD PTR _seekOrigin$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	cmp	DWORD PTR tv65[ebp], 0
	je	SHORT $LN4@Seek
	cmp	DWORD PTR tv65[ebp], 1
	je	SHORT $LN3@Seek
	cmp	DWORD PTR tv65[ebp], 2
	je	SHORT $LN2@Seek
	jmp	SHORT $LN5@Seek
$LN4@Seek:
; Line 241
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [ecx+24], edx
	mov	eax, DWORD PTR _offset$[ebp+4]
	mov	DWORD PTR [ecx+28], eax
	jmp	SHORT $LN5@Seek
$LN3@Seek:
; Line 242
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	add	edx, DWORD PTR _offset$[ebp]
	mov	eax, DWORD PTR [ecx+28]
	adc	eax, DWORD PTR _offset$[ebp+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], edx
	mov	DWORD PTR [ecx+28], eax
	jmp	SHORT $LN5@Seek
$LN2@Seek:
; Line 243
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	add	eax, DWORD PTR _offset$[ebp]
	mov	ecx, DWORD PTR [edx+36]
	adc	ecx, DWORD PTR _offset$[ebp+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+24], eax
	mov	DWORD PTR [edx+28], ecx
$LN5@Seek:
; Line 245
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+16], edx
	mov	ecx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+20], ecx
; Line 246
	cmp	DWORD PTR _newPosition$[ebp], 0
	je	SHORT $LN1@Seek
; Line 247
	mov	edx, DWORD PTR _newPosition$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR [eax+28]
	mov	DWORD PTR [edx+4], eax
$LN1@Seek:
; Line 248
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
; Line 249
	xor	eax, eax
$LN8@Seek:
; Line 250
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?Seek@COutMultiVolStream@@UAGJ_JIPA_K@Z ENDP		; COutMultiVolStream::Seek
_TEXT	ENDS
PUBLIC	?DeleteBack@?$CObjectVector@UCAltStreamInfo@COutMultiVolStream@@@@QAEXXZ ; CObjectVector<COutMultiVolStream::CAltStreamInfo>::DeleteBack
PUBLIC	?Release@?$CMyComPtr@UIOutStream@@@@QAEXXZ	; CMyComPtr<IOutStream>::Release
PUBLIC	?Back@?$CObjectVector@UCAltStreamInfo@COutMultiVolStream@@@@QAEAAUCAltStreamInfo@COutMultiVolStream@@XZ ; CObjectVector<COutMultiVolStream::CAltStreamInfo>::Back
PUBLIC	?SetSize@COutMultiVolStream@@UAGJ_K@Z		; COutMultiVolStream::SetSize
EXTRN	?DeleteFileAlways@NDir@NFile@NWindows@@YG_NPB_W@Z:PROC ; NWindows::NFile::NDir::DeleteFileAlways
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv81 = -28						; size = 4
tv153 = -24						; size = 4
tv73 = -20						; size = 4
_altStream$74342 = -16					; size = 4
___result__$74337 = -12					; size = 4
_altStream$74334 = -8					; size = 4
_i$ = -4						; size = 4
_this$ = 8						; size = 4
_newSize$ = 12						; size = 8
?SetSize@COutMultiVolStream@@UAGJ_K@Z PROC		; COutMultiVolStream::SetSize
; Line 253
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 254
	cmp	DWORD PTR _newSize$[ebp+4], 0
	ja	SHORT $LN7@SetSize
	jb	SHORT $LN10@SetSize
	cmp	DWORD PTR _newSize$[ebp], 0
	jae	SHORT $LN7@SetSize
$LN10@SetSize:
; Line 255
	mov	eax, -2147024809			; 80070057H
	jmp	$LN8@SetSize
$LN7@SetSize:
; Line 256
	mov	DWORD PTR _i$[ebp], 0
$LN6@SetSize:
; Line 257
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?Size@?$CObjectVector@UCAltStreamInfo@COutMultiVolStream@@@@QBEIXZ ; CObjectVector<COutMultiVolStream::CAltStreamInfo>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	$LN2@SetSize
; Line 259
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR tv73[ebp], eax
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	mov	edx, DWORD PTR tv73[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??A?$CObjectVector@UCAltStreamInfo@COutMultiVolStream@@@@QAEAAUCAltStreamInfo@COutMultiVolStream@@I@Z ; CObjectVector<COutMultiVolStream::CAltStreamInfo>::operator[]
	mov	DWORD PTR _altStream$74334[ebp], eax
; Line 260
	mov	eax, DWORD PTR _altStream$74334[ebp]
	mov	DWORD PTR tv153[ebp], eax
	mov	ecx, DWORD PTR tv153[ebp]
	mov	edx, DWORD PTR _newSize$[ebp+4]
	cmp	edx, DWORD PTR [ecx+36]
	ja	SHORT $LN4@SetSize
	jb	SHORT $LN11@SetSize
	mov	eax, DWORD PTR tv153[ebp]
	mov	ecx, DWORD PTR _newSize$[ebp]
	cmp	ecx, DWORD PTR [eax+32]
	jae	SHORT $LN4@SetSize
$LN11@SetSize:
; Line 262
	mov	ecx, DWORD PTR _altStream$74334[ebp]
	add	ecx, 4
	call	??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator->
	mov	DWORD PTR tv81[ebp], eax
	mov	esi, esp
	mov	edx, DWORD PTR _newSize$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _newSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv81[ebp]
	push	ecx
	mov	edx, DWORD PTR tv81[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$74337[ebp], eax
	cmp	DWORD PTR ___result__$74337[ebp], 0
	je	SHORT $LN3@SetSize
	mov	eax, DWORD PTR ___result__$74337[ebp]
	jmp	$LN8@SetSize
$LN3@SetSize:
; Line 263
	mov	edx, DWORD PTR _altStream$74334[ebp]
	mov	eax, DWORD PTR _newSize$[ebp]
	mov	DWORD PTR [edx+32], eax
	mov	ecx, DWORD PTR _newSize$[ebp+4]
	mov	DWORD PTR [edx+36], ecx
; Line 264
	jmp	SHORT $LN2@SetSize
$LN4@SetSize:
; Line 266
	mov	edx, DWORD PTR _altStream$74334[ebp]
	mov	eax, DWORD PTR _newSize$[ebp]
	sub	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR _newSize$[ebp+4]
	sbb	ecx, DWORD PTR [edx+36]
	mov	DWORD PTR _newSize$[ebp], eax
	mov	DWORD PTR _newSize$[ebp+4], ecx
; Line 267
	jmp	$LN6@SetSize
$LN2@SetSize:
; Line 268
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?Size@?$CObjectVector@UCAltStreamInfo@COutMultiVolStream@@@@QBEIXZ ; CObjectVector<COutMultiVolStream::CAltStreamInfo>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN1@SetSize
; Line 271
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?Back@?$CObjectVector@UCAltStreamInfo@COutMultiVolStream@@@@QAEAAUCAltStreamInfo@COutMultiVolStream@@XZ ; CObjectVector<COutMultiVolStream::CAltStreamInfo>::Back
	mov	DWORD PTR _altStream$74342[ebp], eax
; Line 272
	mov	ecx, DWORD PTR _altStream$74342[ebp]
	add	ecx, 4
	call	?Release@?$CMyComPtr@UIOutStream@@@@QAEXXZ ; CMyComPtr<IOutStream>::Release
; Line 273
	mov	ecx, DWORD PTR _altStream$74342[ebp]
	add	ecx, 8
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	?DeleteFileAlways@NDir@NFile@NWindows@@YG_NPB_W@Z ; NWindows::NFile::NDir::DeleteFileAlways
; Line 275
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?DeleteBack@?$CObjectVector@UCAltStreamInfo@COutMultiVolStream@@@@QAEXXZ ; CObjectVector<COutMultiVolStream::CAltStreamInfo>::DeleteBack
; Line 276
	jmp	SHORT $LN2@SetSize
$LN1@SetSize:
; Line 277
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR [edx+16], ecx
	mov	eax, DWORD PTR [eax+28]
	mov	DWORD PTR [edx+20], eax
; Line 278
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
; Line 279
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _newSize$[ebp]
	mov	DWORD PTR [edx+32], eax
	mov	ecx, DWORD PTR _newSize$[ebp+4]
	mov	DWORD PTR [edx+36], ecx
; Line 280
	xor	eax, eax
$LN8@SetSize:
; Line 281
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetSize@COutMultiVolStream@@UAGJ_K@Z ENDP		; COutMultiVolStream::SetSize
_TEXT	ENDS
PUBLIC	?DeleteFrom@UString@@QAEXI@Z			; UString::DeleteFrom
PUBLIC	?IsEqualTo_NoCase@UString@@QBE_NPB_W@Z		; UString::IsEqualTo_NoCase
PUBLIC	?Ptr@UString@@QBEPB_WI@Z			; UString::Ptr
PUBLIC	?DeleteBack@UString@@QAEXXZ			; UString::DeleteBack
PUBLIC	?ReverseFind_Dot@UString@@QBEHXZ		; UString::ReverseFind_Dot
PUBLIC	?Empty@UString@@QAEXXZ				; UString::Empty
PUBLIC	?ParseFromPath@CArchivePath@@QAEXABVUString@@W4EArcNameMode@@@Z ; CArchivePath::ParseFromPath
EXTRN	?SplitPathToParts_2@@YGXABVUString@@AAV1@1@Z:PROC ; SplitPathToParts_2
xdata$x	SEGMENT
__unwindtable$?ParseFromPath@CArchivePath@@QAEXABVUString@@W4EArcNameMode@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ParseFromPath@CArchivePath@@QAEXABVUString@@W4EArcNameMode@@@Z$0
__ehfuncinfo$?ParseFromPath@CArchivePath@@QAEXABVUString@@W4EArcNameMode@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ParseFromPath@CArchivePath@@QAEXABVUString@@W4EArcNameMode@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
_ext$ = -36						; size = 12
_dotPos$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_path$ = 8						; size = 4
_mode$ = 12						; size = 4
?ParseFromPath@CArchivePath@@QAEXABVUString@@W4EArcNameMode@@@Z PROC ; CArchivePath::ParseFromPath
; _this$ = ecx
; Line 284
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ParseFromPath@CArchivePath@@QAEXABVUString@@W4EArcNameMode@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 285
	mov	eax, DWORD PTR _path$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
; Line 287
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	eax, DWORD PTR _path$[ebp]
	push	eax
	call	?SplitPathToParts_2@@YGXABVUString@@AAV1@1@Z ; SplitPathToParts_2
; Line 289
	cmp	DWORD PTR _mode$[ebp], 2
	jne	SHORT $LN6@ParseFromP
; Line 290
	jmp	$LN7@ParseFromP
$LN6@ParseFromP:
; Line 291
	cmp	DWORD PTR _mode$[ebp], 1
	jne	SHORT $LN5@ParseFromP
; Line 293
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	?Empty@UString@@QAEXXZ			; UString::Empty
; Line 294
	jmp	$LN7@ParseFromP
$LN5@ParseFromP:
; Line 297
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?ReverseFind_Dot@UString@@QBEHXZ	; UString::ReverseFind_Dot
	mov	DWORD PTR _dotPos$[ebp], eax
; Line 298
	cmp	DWORD PTR _dotPos$[ebp], 0
	jge	SHORT $LN4@ParseFromP
; Line 299
	jmp	$LN7@ParseFromP
$LN4@ParseFromP:
; Line 300
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?Len@UString@@QBEIXZ			; UString::Len
	sub	eax, 1
	cmp	DWORD PTR _dotPos$[ebp], eax
	jne	SHORT $LN3@ParseFromP
; Line 302
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?DeleteBack@UString@@QAEXXZ		; UString::DeleteBack
; Line 303
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	?Empty@UString@@QAEXXZ			; UString::Empty
; Line 304
	jmp	SHORT $LN7@ParseFromP
$LN3@ParseFromP:
; Line 306
	mov	ecx, DWORD PTR _dotPos$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?Ptr@UString@@QBEPB_WI@Z		; UString::Ptr
	push	eax
	lea	ecx, DWORD PTR _ext$[ebp]
	call	??0UString@@QAE@PB_W@Z			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 307
	lea	ecx, DWORD PTR _ext$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	?IsEqualTo_NoCase@UString@@QBE_NPB_W@Z	; UString::IsEqualTo_NoCase
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@ParseFromP
; Line 309
	lea	eax, DWORD PTR _ext$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
; Line 310
	mov	ecx, DWORD PTR _dotPos$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?DeleteFrom@UString@@QAEXI@Z		; UString::DeleteFrom
; Line 312
	jmp	SHORT $LN1@ParseFromP
$LN2@ParseFromP:
; Line 313
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	?Empty@UString@@QAEXXZ			; UString::Empty
$LN1@ParseFromP:
; Line 314
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _ext$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
$LN7@ParseFromP:
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@ParseFromP
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN13@ParseFromP:
	DD	1
	DD	$LN12@ParseFromP
$LN12@ParseFromP:
	DD	-36					; ffffffdcH
	DD	12					; 0000000cH
	DD	$LN10@ParseFromP
$LN10@ParseFromP:
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ParseFromPath@CArchivePath@@QAEXABVUString@@W4EArcNameMode@@@Z$0:
	lea	ecx, DWORD PTR _ext$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$?ParseFromPath@CArchivePath@@QAEXABVUString@@W4EArcNameMode@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ParseFromPath@CArchivePath@@QAEXABVUString@@W4EArcNameMode@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ParseFromPath@CArchivePath@@QAEXABVUString@@W4EArcNameMode@@@Z ENDP ; CArchivePath::ParseFromPath
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Empty@UString@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Empty@UString@@QAEXXZ PROC				; UString::Empty, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 474
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	xor	eax, eax
	mov	WORD PTR [edx], ax
	mov	esp, ebp
	pop	ebp
	ret	0
?Empty@UString@@QAEXXZ ENDP				; UString::Empty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Ptr@UString@@QBEPB_WI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pos$ = 8						; size = 4
?Ptr@UString@@QBEPB_WI@Z PROC				; UString::Ptr, COMDAT
; _this$ = ecx
; Line 478
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pos$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	mov	esp, ebp
	pop	ebp
	ret	4
?Ptr@UString@@QBEPB_WI@Z ENDP				; UString::Ptr
_TEXT	ENDS
EXTRN	?StringsAreEqualNoCase@@YG_NPB_W0@Z:PROC	; StringsAreEqualNoCase
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsEqualTo_NoCase@UString@@QBE_NPB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
?IsEqualTo_NoCase@UString@@QBE_NPB_W@Z PROC		; UString::IsEqualTo_NoCase, COMDAT
; _this$ = ecx
; Line 548
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	?StringsAreEqualNoCase@@YG_NPB_W0@Z	; StringsAreEqualNoCase
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?IsEqualTo_NoCase@UString@@QBE_NPB_W@Z ENDP		; UString::IsEqualTo_NoCase
_TEXT	ENDS
EXTRN	?ReverseFind@UString@@QBEH_W@Z:PROC		; UString::ReverseFind
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ReverseFind_Dot@UString@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ReverseFind_Dot@UString@@QBEHXZ PROC			; UString::ReverseFind_Dot, COMDAT
; _this$ = ecx
; Line 575
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	push	46					; 0000002eH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReverseFind@UString@@QBEH_W@Z		; UString::ReverseFind
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReverseFind_Dot@UString@@QBEHXZ ENDP			; UString::ReverseFind_Dot
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?DeleteBack@UString@@QAEXXZ
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
?DeleteBack@UString@@QAEXXZ PROC			; UString::DeleteBack, COMDAT
; _this$ = ecx
; Line 602
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv66[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv66[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	xor	eax, eax
	mov	ecx, DWORD PTR tv66[ebp]
	mov	WORD PTR [edx+ecx*2], ax
	mov	esp, ebp
	pop	ebp
	ret	0
?DeleteBack@UString@@QAEXXZ ENDP			; UString::DeleteBack
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?DeleteFrom@UString@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?DeleteFrom@UString@@QAEXI@Z PROC			; UString::DeleteFrom, COMDAT
; _this$ = ecx
; Line 604
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 605
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN2@DeleteFrom
; Line 607
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _index$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 608
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	xor	eax, eax
	mov	ecx, DWORD PTR _index$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
$LN2@DeleteFrom:
; Line 610
	mov	esp, ebp
	pop	ebp
	ret	4
?DeleteFrom@UString@@QAEXI@Z ENDP			; UString::DeleteFrom
_TEXT	ENDS
PUBLIC	??YUString@@QAEAAV0@_W@Z			; UString::operator+=
PUBLIC	?IsEmpty@UString@@QBE_NXZ			; UString::IsEmpty
PUBLIC	?GetPathWithoutExt@CArchivePath@@QBE?AVUString@@XZ ; CArchivePath::GetPathWithoutExt
PUBLIC	?GetFinalPath@CArchivePath@@QBE?AVUString@@XZ	; CArchivePath::GetFinalPath
EXTRN	??0UString@@QAE@ABV0@@Z:PROC			; UString::UString
EXTRN	??YUString@@QAEAAV0@ABV0@@Z:PROC		; UString::operator+=
xdata$x	SEGMENT
__unwindtable$?GetFinalPath@CArchivePath@@QBE?AVUString@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetFinalPath@CArchivePath@@QBE?AVUString@@XZ$1
	DD	00H
	DD	FLAT:__unwindfunclet$?GetFinalPath@CArchivePath@@QBE?AVUString@@XZ$0
__ehfuncinfo$?GetFinalPath@CArchivePath@@QBE?AVUString@@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?GetFinalPath@CArchivePath@@QBE?AVUString@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T77393 = -40						; size = 4
_path$ = -32						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?GetFinalPath@CArchivePath@@QBE?AVUString@@XZ PROC	; CArchivePath::GetFinalPath
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\update.cpp
; Line 317
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetFinalPath@CArchivePath@@QBE?AVUString@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T77393[ebp], 0
; Line 318
	lea	eax, DWORD PTR _path$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPathWithoutExt@CArchivePath@@QBE?AVUString@@XZ ; CArchivePath::GetPathWithoutExt
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 319
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN1@GetFinalPa
; Line 321
	push	46					; 0000002eH
	lea	ecx, DWORD PTR _path$[ebp]
	call	??YUString@@QAEAAV0@_W@Z		; UString::operator+=
; Line 322
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 36					; 00000024H
	push	edx
	lea	ecx, DWORD PTR _path$[ebp]
	call	??YUString@@QAEAAV0@ABV0@@Z		; UString::operator+=
$LN1@GetFinalPa:
; Line 324
	lea	eax, DWORD PTR _path$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	ecx, DWORD PTR $T77393[ebp]
	or	ecx, 1
	mov	DWORD PTR $T77393[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _path$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 325
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@GetFinalPa
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN10@GetFinalPa:
	DD	1
	DD	$LN9@GetFinalPa
$LN9@GetFinalPa:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN7@GetFinalPa
$LN7@GetFinalPa:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?GetFinalPath@CArchivePath@@QBE?AVUString@@XZ$0:
	lea	ecx, DWORD PTR _path$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?GetFinalPath@CArchivePath@@QBE?AVUString@@XZ$1:
	mov	eax, DWORD PTR $T77393[ebp]
	and	eax, 1
	je	$LN6@GetFinalPa
	and	DWORD PTR $T77393[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
$LN6@GetFinalPa:
	ret	0
__ehhandler$?GetFinalPath@CArchivePath@@QBE?AVUString@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetFinalPath@CArchivePath@@QBE?AVUString@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetFinalPath@CArchivePath@@QBE?AVUString@@XZ ENDP	; CArchivePath::GetFinalPath
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsEmpty@UString@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@UString@@QBE_NXZ PROC				; UString::IsEmpty, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 473
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+4], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@UString@@QBE_NXZ ENDP				; UString::IsEmpty
_TEXT	ENDS
EXTRN	?Grow_1@UString@@AAEXXZ:PROC			; UString::Grow_1
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??YUString@@QAEAAV0@_W@Z
_TEXT	SEGMENT
_chars$ = -12						; size = 4
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_c$ = 8							; size = 2
??YUString@@QAEAAV0@_W@Z PROC				; UString::operator+=, COMDAT
; _this$ = ecx
; Line 515
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 516
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+4]
	jne	SHORT $LN1@operator
; Line 517
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Grow_1@UString@@AAEXXZ			; UString::Grow_1
$LN1@operator:
; Line 518
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _len$[ebp], ecx
; Line 519
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _chars$[ebp], eax
; Line 520
	mov	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _chars$[ebp]
	mov	ax, WORD PTR _c$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
	mov	ecx, DWORD PTR _len$[ebp]
	add	ecx, 1
	mov	DWORD PTR _len$[ebp], ecx
; Line 521
	xor	edx, edx
	mov	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _chars$[ebp]
	mov	WORD PTR [ecx+eax*2], dx
; Line 522
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 523
	mov	eax, DWORD PTR _this$[ebp]
; Line 524
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??YUString@@QAEAAV0@_W@Z ENDP				; UString::operator+=
_TEXT	ENDS
EXTRN	??H@YG?AVUString@@ABV0@0@Z:PROC			; operator+
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetPathWithoutExt@CArchivePath@@QBE?AVUString@@XZ
_TEXT	SEGMENT
$T77408 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetPathWithoutExt@CArchivePath@@QBE?AVUString@@XZ PROC	; CArchivePath::GetPathWithoutExt, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\update.h
; Line 40
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T77408[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	call	??H@YG?AVUString@@ABV0@0@Z		; operator+
	mov	eax, DWORD PTR $T77408[ebp]
	or	eax, 1
	mov	DWORD PTR $T77408[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetPathWithoutExt@CArchivePath@@QBE?AVUString@@XZ ENDP	; CArchivePath::GetPathWithoutExt
_TEXT	ENDS
PUBLIC	?GetFinalVolPath@CArchivePath@@QBE?AVUString@@XZ ; CArchivePath::GetFinalVolPath
xdata$x	SEGMENT
__unwindtable$?GetFinalVolPath@CArchivePath@@QBE?AVUString@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetFinalVolPath@CArchivePath@@QBE?AVUString@@XZ$1
	DD	00H
	DD	FLAT:__unwindfunclet$?GetFinalVolPath@CArchivePath@@QBE?AVUString@@XZ$0
__ehfuncinfo$?GetFinalVolPath@CArchivePath@@QBE?AVUString@@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?GetFinalVolPath@CArchivePath@@QBE?AVUString@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T77414 = -40						; size = 4
_path$ = -32						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?GetFinalVolPath@CArchivePath@@QBE?AVUString@@XZ PROC	; CArchivePath::GetFinalVolPath
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\update.cpp
; Line 328
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetFinalVolPath@CArchivePath@@QBE?AVUString@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T77414[ebp], 0
; Line 329
	lea	eax, DWORD PTR _path$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPathWithoutExt@CArchivePath@@QBE?AVUString@@XZ ; CArchivePath::GetPathWithoutExt
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 330
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN1@GetFinalVo
; Line 332
	push	46					; 0000002eH
	lea	ecx, DWORD PTR _path$[ebp]
	call	??YUString@@QAEAAV0@_W@Z		; UString::operator+=
; Line 333
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 48					; 00000030H
	push	edx
	lea	ecx, DWORD PTR _path$[ebp]
	call	??YUString@@QAEAAV0@ABV0@@Z		; UString::operator+=
$LN1@GetFinalVo:
; Line 335
	lea	eax, DWORD PTR _path$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	ecx, DWORD PTR $T77414[ebp]
	or	ecx, 1
	mov	DWORD PTR $T77414[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _path$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 336
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@GetFinalVo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN10@GetFinalVo:
	DD	1
	DD	$LN9@GetFinalVo
$LN9@GetFinalVo:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN7@GetFinalVo
$LN7@GetFinalVo:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?GetFinalVolPath@CArchivePath@@QBE?AVUString@@XZ$0:
	lea	ecx, DWORD PTR _path$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?GetFinalVolPath@CArchivePath@@QBE?AVUString@@XZ$1:
	mov	eax, DWORD PTR $T77414[ebp]
	and	eax, 1
	je	$LN6@GetFinalVo
	and	DWORD PTR $T77414[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
$LN6@GetFinalVo:
	ret	0
__ehhandler$?GetFinalVolPath@CArchivePath@@QBE?AVUString@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetFinalVolPath@CArchivePath@@QBE?AVUString@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetFinalVolPath@CArchivePath@@QBE?AVUString@@XZ ENDP	; CArchivePath::GetFinalVolPath
PUBLIC	?GetTempPathA@CArchivePath@@QBE?AVUString@@XZ	; CArchivePath::GetTempPathA
EXTRN	?AddAscii@UString@@QAEXPBD@Z:PROC		; UString::AddAscii
xdata$x	SEGMENT
__unwindtable$?GetTempPathA@CArchivePath@@QBE?AVUString@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetTempPathA@CArchivePath@@QBE?AVUString@@XZ$1
	DD	00H
	DD	FLAT:__unwindfunclet$?GetTempPathA@CArchivePath@@QBE?AVUString@@XZ$0
__ehfuncinfo$?GetTempPathA@CArchivePath@@QBE?AVUString@@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?GetTempPathA@CArchivePath@@QBE?AVUString@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T77426 = -40						; size = 4
_path$ = -32						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?GetTempPathA@CArchivePath@@QBE?AVUString@@XZ PROC	; CArchivePath::GetTempPathA
; _this$ = ecx
; Line 339
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetTempPathA@CArchivePath@@QBE?AVUString@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T77426[ebp], 0
; Line 340
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 64					; 00000040H
	push	eax
	lea	ecx, DWORD PTR _path$[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 341
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	push	ecx
	lea	ecx, DWORD PTR _path$[ebp]
	call	??YUString@@QAEAAV0@ABV0@@Z		; UString::operator+=
; Line 342
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN1@GetTempPat
; Line 344
	push	46					; 0000002eH
	lea	ecx, DWORD PTR _path$[ebp]
	call	??YUString@@QAEAAV0@_W@Z		; UString::operator+=
; Line 345
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 36					; 00000024H
	push	eax
	lea	ecx, DWORD PTR _path$[ebp]
	call	??YUString@@QAEAAV0@ABV0@@Z		; UString::operator+=
$LN1@GetTempPat:
; Line 347
	push	OFFSET $SG74378
	lea	ecx, DWORD PTR _path$[ebp]
	call	?AddAscii@UString@@QAEXPBD@Z		; UString::AddAscii
; Line 348
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	push	ecx
	lea	ecx, DWORD PTR _path$[ebp]
	call	??YUString@@QAEAAV0@ABV0@@Z		; UString::operator+=
; Line 349
	lea	edx, DWORD PTR _path$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	eax, DWORD PTR $T77426[ebp]
	or	eax, 1
	mov	DWORD PTR $T77426[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _path$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 350
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@GetTempPat
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN10@GetTempPat:
	DD	1
	DD	$LN9@GetTempPat
$LN9@GetTempPat:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN7@GetTempPat
$LN7@GetTempPat:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?GetTempPathA@CArchivePath@@QBE?AVUString@@XZ$0:
	lea	ecx, DWORD PTR _path$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?GetTempPathA@CArchivePath@@QBE?AVUString@@XZ$1:
	mov	eax, DWORD PTR $T77426[ebp]
	and	eax, 1
	je	$LN6@GetTempPat
	and	DWORD PTR $T77426[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
$LN6@GetTempPat:
	ret	0
__ehhandler$?GetTempPathA@CArchivePath@@QBE?AVUString@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetTempPathA@CArchivePath@@QBE?AVUString@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetTempPathA@CArchivePath@@QBE?AVUString@@XZ ENDP	; CArchivePath::GetTempPathA
PUBLIC	??0COpenType@@QAE@XZ				; COpenType::COpenType
PUBLIC	??A?$CObjectVector@UCOpenType@@@@QBEABUCOpenType@@I@Z ; CObjectVector<COpenType>::operator[]
PUBLIC	?Size@?$CObjectVector@UCOpenType@@@@QBEIXZ	; CObjectVector<COpenType>::Size
PUBLIC	?InitFormatIndex@CUpdateOptions@@QAE_NPBVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@@Z ; CUpdateOptions::InitFormatIndex
EXTRN	?FindFormatForArchiveName@CCodecs@@QBEHABVUString@@@Z:PROC ; CCodecs::FindFormatForArchiveName
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T77436 = -36						; size = 32
_this$ = -4						; size = 4
_codecs$ = 8						; size = 4
_types$ = 12						; size = 4
_arcPath$ = 16						; size = 4
?InitFormatIndex@CUpdateOptions@@QAE_NPBVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@@Z PROC ; CUpdateOptions::InitFormatIndex
; _this$ = ecx
; Line 363
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	push	edi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 364
	mov	ecx, DWORD PTR _types$[ebp]
	call	?Size@?$CObjectVector@UCOpenType@@@@QBEIXZ ; CObjectVector<COpenType>::Size
	cmp	eax, 1
	jbe	SHORT $LN5@InitFormat
; Line 365
	xor	al, al
	jmp	SHORT $LN6@InitFormat
$LN5@InitFormat:
; Line 367
	mov	ecx, DWORD PTR _types$[ebp]
	call	?Size@?$CObjectVector@UCOpenType@@@@QBEIXZ ; CObjectVector<COpenType>::Size
	test	eax, eax
	je	SHORT $LN4@InitFormat
; Line 369
	push	0
	mov	ecx, DWORD PTR _types$[ebp]
	call	??A?$CObjectVector@UCOpenType@@@@QBEABUCOpenType@@I@Z ; CObjectVector<COpenType>::operator[]
	mov	edi, DWORD PTR _this$[ebp]
	add	edi, 8
	mov	ecx, 8
	mov	esi, eax
	rep movsd
; Line 370
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax], 1
$LN4@InitFormat:
; Line 372
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	jge	SHORT $LN3@InitFormat
; Line 375
	lea	ecx, DWORD PTR $T77436[ebp]
	call	??0COpenType@@QAE@XZ			; COpenType::COpenType
	mov	edi, DWORD PTR _this$[ebp]
	add	edi, 8
	mov	ecx, 8
	mov	esi, eax
	rep movsd
; Line 376
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+160], 2
	je	SHORT $LN3@InitFormat
; Line 378
	mov	eax, DWORD PTR _arcPath$[ebp]
	push	eax
	mov	ecx, DWORD PTR _codecs$[ebp]
	call	?FindFormatForArchiveName@CCodecs@@QBEHABVUString@@@Z ; CCodecs::FindFormatForArchiveName
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 379
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+8], 0
	jl	SHORT $LN3@InitFormat
; Line 380
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax], 1
$LN3@InitFormat:
; Line 383
	mov	al, 1
$LN6@InitFormat:
; Line 384
	pop	edi
	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?InitFormatIndex@CUpdateOptions@@QAE_NPBVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@@Z ENDP ; CUpdateOptions::InitFormatIndex
_TEXT	ENDS
PUBLIC	??0COpenSpecFlags@@QAE@XZ			; COpenSpecFlags::COpenSpecFlags
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0COpenType@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0COpenType@@QAE@XZ PROC				; COpenType::COpenType, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\openarchive.h
; Line 99
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0COpenSpecFlags@@QAE@XZ		; COpenSpecFlags::COpenSpecFlags
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 7
	call	??0COpenSpecFlags@@QAE@XZ		; COpenSpecFlags::COpenSpecFlags
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 10					; 0000000aH
	call	??0COpenSpecFlags@@QAE@XZ		; COpenSpecFlags::COpenSpecFlags
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 13					; 0000000dH
	call	??0COpenSpecFlags@@QAE@XZ		; COpenSpecFlags::COpenSpecFlags
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+16], 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+17], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+18], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+19], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+20], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+21], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
; Line 100
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+4], 1
; Line 101
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+5], 1
; Line 102
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+6], 1
; Line 104
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+7], 1
; Line 106
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+14], 1
; Line 107
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+15], 1
; Line 108
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+13], 1
; Line 111
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0COpenType@@QAE@XZ ENDP				; COpenType::COpenType
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0COpenSpecFlags@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0COpenSpecFlags@@QAE@XZ PROC				; COpenSpecFlags::COpenSpecFlags, COMDAT
; _this$ = ecx
; Line 57
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+2], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0COpenSpecFlags@@QAE@XZ ENDP				; COpenSpecFlags::COpenSpecFlags
_TEXT	ENDS
PUBLIC	??A?$CObjectVector@UCUpdateArchiveCommand@@@@QAEAAUCUpdateArchiveCommand@@I@Z ; CObjectVector<CUpdateArchiveCommand>::operator[]
PUBLIC	?Size@?$CObjectVector@UCUpdateArchiveCommand@@@@QBEIXZ ; CObjectVector<CUpdateArchiveCommand>::Size
PUBLIC	?GetMainExt@CArcInfoEx@@QBE?AVUString@@XZ	; CArcInfoEx::GetMainExt
PUBLIC	??A?$CObjectVector@UCArcInfoEx@@@@QBEABUCArcInfoEx@@I@Z ; CObjectVector<CArcInfoEx>::operator[]
PUBLIC	?SetArcPath@CUpdateOptions@@QAE_NPBVCCodecs@@ABVUString@@@Z ; CUpdateOptions::SetArcPath
EXTRN	?SetFromAscii@UString@@QAEXPBD@Z:PROC		; UString::SetFromAscii
EXTRN	??4UString@@QAEAAV0@PB_W@Z:PROC			; UString::operator=
xdata$x	SEGMENT
__unwindtable$?SetArcPath@CUpdateOptions@@QAE_NPBVCCodecs@@ABVUString@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetArcPath@CUpdateOptions@@QAE_NPBVCCodecs@@ABVUString@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?SetArcPath@CUpdateOptions@@QAE_NPBVCCodecs@@ABVUString@@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?SetArcPath@CUpdateOptions@@QAE_NPBVCCodecs@@ABVUString@@@Z$2
__ehfuncinfo$?SetArcPath@CUpdateOptions@@QAE_NPBVCCodecs@@ABVUString@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?SetArcPath@CUpdateOptions@@QAE_NPBVCCodecs@@ABVUString@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv165 = -100						; size = 4
tv65 = -96						; size = 4
$T77444 = -89						; size = 1
$T77443 = -88						; size = 12
$T77442 = -73						; size = 1
_uc$74481 = -72						; size = 4
_i$74477 = -68						; size = 4
_ext$ = -60						; size = 12
_arcInfo$74471 = -44					; size = 4
_formatIndex$ = -40					; size = 4
_typeExt$ = -32						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_codecs$ = 8						; size = 4
_arcPath$ = 12						; size = 4
?SetArcPath@CUpdateOptions@@QAE_NPBVCCodecs@@ABVUString@@@Z PROC ; CUpdateOptions::SetArcPath
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\update.cpp
; Line 387
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetArcPath@CUpdateOptions@@QAE_NPBVCCodecs@@ABVUString@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 88					; 00000058H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-100]
	mov	ecx, 22					; 00000016H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 388
	lea	ecx, DWORD PTR _typeExt$[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 389
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _formatIndex$[ebp], ecx
; Line 390
	cmp	DWORD PTR _formatIndex$[ebp], 0
	jge	SHORT $LN7@SetArcPath
; Line 392
	mov	edx, DWORD PTR _kDefaultArcExt
	push	edx
	lea	ecx, DWORD PTR _typeExt$[ebp]
	call	??4UString@@QAEAAV0@PB_W@Z		; UString::operator=
; Line 394
	jmp	SHORT $LN6@SetArcPath
$LN7@SetArcPath:
; Line 396
	mov	eax, DWORD PTR _formatIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _codecs$[ebp]
	add	ecx, 8
	call	??A?$CObjectVector@UCArcInfoEx@@@@QBEABUCArcInfoEx@@I@Z ; CObjectVector<CArcInfoEx>::operator[]
	mov	DWORD PTR _arcInfo$74471[ebp], eax
; Line 397
	mov	ecx, DWORD PTR _arcInfo$74471[ebp]
	movzx	edx, BYTE PTR [ecx+40]
	test	edx, edx
	jne	SHORT $LN5@SetArcPath
; Line 398
	mov	BYTE PTR $T77442[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _typeExt$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	al, BYTE PTR $T77442[ebp]
	jmp	$LN8@SetArcPath
$LN5@SetArcPath:
; Line 399
	lea	eax, DWORD PTR $T77443[ebp]
	push	eax
	mov	ecx, DWORD PTR _arcInfo$74471[ebp]
	call	?GetMainExt@CArcInfoEx@@QBE?AVUString@@XZ ; CArcInfoEx::GetMainExt
	mov	DWORD PTR tv65[ebp], eax
	mov	ecx, DWORD PTR tv65[ebp]
	mov	DWORD PTR tv165[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR tv165[ebp]
	push	edx
	lea	ecx, DWORD PTR _typeExt$[ebp]
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T77443[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
$LN6@SetArcPath:
; Line 401
	lea	eax, DWORD PTR _typeExt$[ebp]
	push	eax
	lea	ecx, DWORD PTR _ext$[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 2
; Line 402
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+164]
	test	edx, edx
	je	SHORT $LN4@SetArcPath
; Line 403
	mov	eax, DWORD PTR _kSFXExtension
	push	eax
	lea	ecx, DWORD PTR _ext$[ebp]
	call	?SetFromAscii@UString@@QAEXPBD@Z	; UString::SetFromAscii
$LN4@SetArcPath:
; Line 404
	lea	ecx, DWORD PTR _ext$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 108				; 0000006cH
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
; Line 405
	lea	edx, DWORD PTR _typeExt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
; Line 406
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+160]
	push	ecx
	mov	edx, DWORD PTR _arcPath$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	call	?ParseFromPath@CArchivePath@@QAEXABVUString@@W4EArcNameMode@@@Z ; CArchivePath::ParseFromPath
; Line 407
	mov	DWORD PTR _i$74477[ebp], 0
	jmp	SHORT $LN3@SetArcPath
$LN2@SetArcPath:
	mov	eax, DWORD PTR _i$74477[ebp]
	add	eax, 1
	mov	DWORD PTR _i$74477[ebp], eax
$LN3@SetArcPath:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	?Size@?$CObjectVector@UCUpdateArchiveCommand@@@@QBEIXZ ; CObjectVector<CUpdateArchiveCommand>::Size
	cmp	DWORD PTR _i$74477[ebp], eax
	jae	SHORT $LN1@SetArcPath
; Line 409
	mov	ecx, DWORD PTR _i$74477[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	??A?$CObjectVector@UCUpdateArchiveCommand@@@@QAEAAUCUpdateArchiveCommand@@I@Z ; CObjectVector<CUpdateArchiveCommand>::operator[]
	mov	DWORD PTR _uc$74481[ebp], eax
; Line 410
	lea	edx, DWORD PTR _ext$[ebp]
	push	edx
	mov	ecx, DWORD PTR _uc$74481[ebp]
	add	ecx, 48					; 00000030H
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
; Line 411
	lea	eax, DWORD PTR _typeExt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _uc$74481[ebp]
	add	ecx, 60					; 0000003cH
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
; Line 412
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+160]
	push	edx
	mov	eax, DWORD PTR _uc$74481[ebp]
	push	eax
	mov	ecx, DWORD PTR _uc$74481[ebp]
	add	ecx, 12					; 0000000cH
	call	?ParseFromPath@CArchivePath@@QAEXABVUString@@W4EArcNameMode@@@Z ; CArchivePath::ParseFromPath
; Line 413
	jmp	SHORT $LN2@SetArcPath
$LN1@SetArcPath:
; Line 414
	mov	BYTE PTR $T77444[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _ext$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _typeExt$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	al, BYTE PTR $T77444[ebp]
$LN8@SetArcPath:
; Line 415
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@SetArcPath
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 100				; 00000064H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN17@SetArcPath:
	DD	2
	DD	$LN16@SetArcPath
$LN16@SetArcPath:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN13@SetArcPath
	DD	-60					; ffffffc4H
	DD	12					; 0000000cH
	DD	$LN14@SetArcPath
$LN14@SetArcPath:
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
$LN13@SetArcPath:
	DB	116					; 00000074H
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	69					; 00000045H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SetArcPath@CUpdateOptions@@QAE_NPBVCCodecs@@ABVUString@@@Z$0:
	lea	ecx, DWORD PTR _typeExt$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?SetArcPath@CUpdateOptions@@QAE_NPBVCCodecs@@ABVUString@@@Z$1:
	lea	ecx, DWORD PTR $T77443[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?SetArcPath@CUpdateOptions@@QAE_NPBVCCodecs@@ABVUString@@@Z$2:
	lea	ecx, DWORD PTR _ext$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$?SetArcPath@CUpdateOptions@@QAE_NPBVCCodecs@@ABVUString@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-96]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetArcPath@CUpdateOptions@@QAE_NPBVCCodecs@@ABVUString@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetArcPath@CUpdateOptions@@QAE_NPBVCCodecs@@ABVUString@@@Z ENDP ; CUpdateOptions::SetArcPath
PUBLIC	??A?$CObjectVector@UCArcExtInfo@@@@QBEABUCArcExtInfo@@I@Z ; CObjectVector<CArcExtInfo>::operator[]
PUBLIC	?IsEmpty@?$CObjectVector@UCArcExtInfo@@@@QBE_NXZ ; CObjectVector<CArcExtInfo>::IsEmpty
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetMainExt@CArcInfoEx@@QBE?AVUString@@XZ
_TEXT	SEGMENT
$T77458 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetMainExt@CArcInfoEx@@QBE?AVUString@@XZ PROC		; CArcInfoEx::GetMainExt, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\loadcodecs.h
; Line 137
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T77458[ebp], 0
; Line 138
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?IsEmpty@?$CObjectVector@UCArcExtInfo@@@@QBE_NXZ ; CObjectVector<CArcExtInfo>::IsEmpty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@GetMainExt
; Line 139
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	ecx, DWORD PTR $T77458[ebp]
	or	ecx, 1
	mov	DWORD PTR $T77458[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN2@GetMainExt
$LN1@GetMainExt:
; Line 140
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??A?$CObjectVector@UCArcExtInfo@@@@QBEABUCArcExtInfo@@I@Z ; CObjectVector<CArcExtInfo>::operator[]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	edx, DWORD PTR $T77458[ebp]
	or	edx, 1
	mov	DWORD PTR $T77458[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN2@GetMainExt:
; Line 141
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetMainExt@CArcInfoEx@@QBE?AVUString@@XZ ENDP		; CArcInfoEx::GetMainExt
_TEXT	ENDS
PUBLIC	??A?$CObjectVector@UCArcItem@@@@QBEABUCArcItem@@I@Z ; CObjectVector<CArcItem>::operator[]
PUBLIC	?ShowDeleteFile@CUpdateProduceCallbackImp@@UAEJI@Z ; CUpdateProduceCallbackImp::ShowDeleteFile
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ai$ = -8						; size = 4
_this$ = -4						; size = 4
_arcIndex$ = 8						; size = 4
?ShowDeleteFile@CUpdateProduceCallbackImp@@UAEJI@Z PROC	; CUpdateProduceCallbackImp::ShowDeleteFile
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\update.cpp
; Line 428
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 429
	mov	eax, DWORD PTR _arcIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	??A?$CObjectVector@UCArcItem@@@@QBEABUCArcItem@@I@Z ; CObjectVector<CArcItem>::operator[]
	mov	DWORD PTR _ai$[ebp], eax
; Line 430
	mov	esi, esp
	mov	edx, DWORD PTR _ai$[ebp]
	movzx	eax, BYTE PTR [edx+28]
	push	eax
	mov	ecx, DWORD PTR _ai$[ebp]
	add	ecx, 16					; 00000010H
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+56]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 431
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ShowDeleteFile@CUpdateProduceCallbackImp@@UAEJI@Z ENDP	; CUpdateProduceCallbackImp::ShowDeleteFile
_TEXT	ENDS
PUBLIC	?Prepare@CRenamePair@@QAE_NXZ			; CRenamePair::Prepare
EXTRN	?DoesNameContainWildcard@@YG_NABVUString@@@Z:PROC ; DoesNameContainWildcard
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Prepare@CRenamePair@@QAE_NXZ PROC			; CRenamePair::Prepare
; _this$ = ecx
; Line 434
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 435
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 2
	je	SHORT $LN2@Prepare
; Line 436
	xor	al, al
	jmp	SHORT $LN3@Prepare
$LN2@Prepare:
; Line 437
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+24]
	test	edx, edx
	jne	SHORT $LN1@Prepare
; Line 438
	mov	al, 1
	jmp	SHORT $LN3@Prepare
$LN1@Prepare:
; Line 439
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?DoesNameContainWildcard@@YG_NABVUString@@@Z ; DoesNameContainWildcard
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1
$LN3@Prepare:
; Line 440
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Prepare@CRenamePair@@QAE_NXZ ENDP			; CRenamePair::Prepare
_TEXT	ENDS
PUBLIC	?IsPathSepar@@YG_N_W@Z				; IsPathSepar
PUBLIC	?GetNewPath@CRenamePair@@QBE_N_NABVUString@@AAV2@@Z ; CRenamePair::GetNewPath
EXTRN	??H@YG?AVUString@@ABV0@PB_W@Z:PROC		; operator+
xdata$x	SEGMENT
__unwindtable$?GetNewPath@CRenamePair@@QBE_N_NABVUString@@AAV2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetNewPath@CRenamePair@@QBE_N_NABVUString@@AAV2@@Z$0
__ehfuncinfo$?GetNewPath@CRenamePair@@QBE_N_NABVUString@@AAV2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetNewPath@CRenamePair@@QBE_N_NABVUString@@AAV2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv169 = -40						; size = 4
tv170 = -36						; size = 4
$T77464 = -32						; size = 12
_num$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_isFolder$ = 8						; size = 1
_src$ = 12						; size = 4
_dest$ = 16						; size = 4
?GetNewPath@CRenamePair@@QBE_N_NABVUString@@AAV2@@Z PROC ; CRenamePair::GetNewPath
; _this$ = ecx
; Line 463
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetNewPath@CRenamePair@@QBE_N_NABVUString@@AAV2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 464
	mov	ecx, DWORD PTR _src$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	?CompareTwoNames@@YGIPB_W0@Z		; CompareTwoNames
	mov	DWORD PTR _num$[ebp], eax
; Line 465
	mov	ecx, DWORD PTR _this$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	ecx, DWORD PTR _num$[ebp]
	movzx	edx, WORD PTR [eax+ecx*2]
	test	edx, edx
	jne	SHORT $LN5@GetNewPath
; Line 467
	mov	ecx, DWORD PTR _src$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	ecx, DWORD PTR _num$[ebp]
	movzx	edx, WORD PTR [eax+ecx*2]
	test	edx, edx
	je	SHORT $LN4@GetNewPath
	mov	ecx, DWORD PTR _src$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	ecx, DWORD PTR _num$[ebp]
	movzx	edx, WORD PTR [eax+ecx*2]
	push	edx
	call	?IsPathSepar@@YG_N_W@Z			; IsPathSepar
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN4@GetNewPath
	cmp	DWORD PTR _num$[ebp], 0
	je	SHORT $LN4@GetNewPath
	mov	ecx, DWORD PTR _src$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	ecx, DWORD PTR _num$[ebp]
	movzx	edx, WORD PTR [eax+ecx*2-2]
	push	edx
	call	?IsPathSepar@@YG_N_W@Z			; IsPathSepar
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN4@GetNewPath
; Line 468
	xor	al, al
	jmp	$LN6@GetNewPath
$LN4@GetNewPath:
; Line 470
	jmp	SHORT $LN3@GetNewPath
$LN5@GetNewPath:
; Line 479
	movzx	ecx, BYTE PTR _isFolder$[ebp]
	test	ecx, ecx
	je	SHORT $LN1@GetNewPath
	mov	ecx, DWORD PTR _src$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	edx, DWORD PTR _num$[ebp]
	movzx	eax, WORD PTR [eax+edx*2]
	test	eax, eax
	jne	SHORT $LN1@GetNewPath
	mov	ecx, DWORD PTR _this$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	ecx, DWORD PTR _num$[ebp]
	movzx	edx, WORD PTR [eax+ecx*2]
	push	edx
	call	?IsPathSepar@@YG_N_W@Z			; IsPathSepar
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@GetNewPath
	mov	ecx, DWORD PTR _this$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	ecx, DWORD PTR _num$[ebp]
	movzx	edx, WORD PTR [eax+ecx*2+2]
	test	edx, edx
	je	SHORT $LN3@GetNewPath
$LN1@GetNewPath:
; Line 480
	xor	al, al
	jmp	SHORT $LN6@GetNewPath
$LN3@GetNewPath:
; Line 482
	mov	eax, DWORD PTR _num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src$[ebp]
	call	?Ptr@UString@@QBEPB_WI@Z		; UString::Ptr
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	lea	edx, DWORD PTR $T77464[ebp]
	push	edx
	call	??H@YG?AVUString@@ABV0@PB_W@Z		; operator+
	mov	DWORD PTR tv170[ebp], eax
	mov	eax, DWORD PTR tv170[ebp]
	mov	DWORD PTR tv169[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR tv169[ebp]
	push	ecx
	mov	ecx, DWORD PTR _dest$[ebp]
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T77464[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
; Line 483
	mov	al, 1
$LN6@GetNewPath:
; Line 484
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?GetNewPath@CRenamePair@@QBE_N_NABVUString@@AAV2@@Z$0:
	lea	ecx, DWORD PTR $T77464[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$?GetNewPath@CRenamePair@@QBE_N_NABVUString@@AAV2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetNewPath@CRenamePair@@QBE_N_NABVUString@@AAV2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetNewPath@CRenamePair@@QBE_N_NABVUString@@AAV2@@Z ENDP ; CRenamePair::GetNewPath
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsPathSepar@@YG_N_W@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
_c$ = 8							; size = 2
?IsPathSepar@@YG_N_W@Z PROC				; IsPathSepar, COMDAT
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	movzx	eax, WORD PTR _c$[ebp]
	cmp	eax, 92					; 0000005cH
	je	SHORT $LN3@IsPathSepa
	movzx	ecx, WORD PTR _c$[ebp]
	cmp	ecx, 47					; 0000002fH
	je	SHORT $LN3@IsPathSepa
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@IsPathSepa
$LN3@IsPathSepa:
	mov	DWORD PTR tv68[ebp], 1
$LN4@IsPathSepa:
	mov	al, BYTE PTR tv68[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsPathSepar@@YG_N_W@Z ENDP				; IsPathSepar
_TEXT	ENDS
PUBLIC	?MyCharUpper@@YG_W_W@Z				; MyCharUpper
EXTRN	?g_CaseSensitive@@3_NA:BYTE			; g_CaseSensitive
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_c2$74525 = -12						; size = 2
_c1$74524 = -8						; size = 2
_i$74520 = -4						; size = 4
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
?CompareTwoNames@@YGIPB_W0@Z PROC			; CompareTwoNames
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\update.cpp
; Line 445
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 446
	mov	DWORD PTR _i$74520[ebp], 0
	jmp	SHORT $LN8@CompareTwo
$LN7@CompareTwo:
	mov	eax, DWORD PTR _i$74520[ebp]
	add	eax, 1
	mov	DWORD PTR _i$74520[ebp], eax
$LN8@CompareTwo:
; Line 448
	mov	ecx, DWORD PTR _i$74520[ebp]
	mov	edx, DWORD PTR _s1$[ebp]
	mov	ax, WORD PTR [edx+ecx*2]
	mov	WORD PTR _c1$74524[ebp], ax
; Line 449
	mov	ecx, DWORD PTR _i$74520[ebp]
	mov	edx, DWORD PTR _s2$[ebp]
	mov	ax, WORD PTR [edx+ecx*2]
	mov	WORD PTR _c2$74525[ebp], ax
; Line 450
	movzx	ecx, WORD PTR _c1$74524[ebp]
	test	ecx, ecx
	je	SHORT $LN4@CompareTwo
	movzx	edx, WORD PTR _c2$74525[ebp]
	test	edx, edx
	jne	SHORT $LN5@CompareTwo
$LN4@CompareTwo:
; Line 451
	mov	eax, DWORD PTR _i$74520[ebp]
	jmp	SHORT $LN9@CompareTwo
$LN5@CompareTwo:
; Line 452
	movzx	eax, WORD PTR _c1$74524[ebp]
	movzx	ecx, WORD PTR _c2$74525[ebp]
	cmp	eax, ecx
	jne	SHORT $LN3@CompareTwo
; Line 453
	jmp	SHORT $LN7@CompareTwo
$LN3@CompareTwo:
; Line 454
	movzx	edx, BYTE PTR ?g_CaseSensitive@@3_NA	; g_CaseSensitive
	test	edx, edx
	jne	SHORT $LN2@CompareTwo
	movzx	eax, WORD PTR _c1$74524[ebp]
	push	eax
	call	?MyCharUpper@@YG_W_W@Z			; MyCharUpper
	movzx	esi, ax
	movzx	ecx, WORD PTR _c2$74525[ebp]
	push	ecx
	call	?MyCharUpper@@YG_W_W@Z			; MyCharUpper
	movzx	edx, ax
	cmp	esi, edx
	jne	SHORT $LN2@CompareTwo
; Line 455
	jmp	SHORT $LN7@CompareTwo
$LN2@CompareTwo:
; Line 456
	movzx	eax, WORD PTR _c1$74524[ebp]
	push	eax
	call	?IsPathSepar@@YG_N_W@Z			; IsPathSepar
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@CompareTwo
	movzx	edx, WORD PTR _c2$74525[ebp]
	push	edx
	call	?IsPathSepar@@YG_N_W@Z			; IsPathSepar
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@CompareTwo
; Line 457
	jmp	$LN7@CompareTwo
$LN1@CompareTwo:
; Line 458
	mov	eax, DWORD PTR _i$74520[ebp]
	jmp	SHORT $LN9@CompareTwo
; Line 459
	jmp	$LN7@CompareTwo
$LN9@CompareTwo:
; Line 460
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?CompareTwoNames@@YGIPB_W0@Z ENDP			; CompareTwoNames
_TEXT	ENDS
EXTRN	?MyCharUpper_WIN@@YG_W_W@Z:PROC			; MyCharUpper_WIN
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?MyCharUpper@@YG_W_W@Z
_TEXT	SEGMENT
_c$ = 8							; size = 2
?MyCharUpper@@YG_W_W@Z PROC				; MyCharUpper, COMDAT
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 122
	push	ebp
	mov	ebp, esp
; Line 123
	movzx	eax, WORD PTR _c$[ebp]
	cmp	eax, 97					; 00000061H
	jge	SHORT $LN3@MyCharUppe
	mov	ax, WORD PTR _c$[ebp]
	jmp	SHORT $LN4@MyCharUppe
$LN3@MyCharUppe:
; Line 124
	movzx	ecx, WORD PTR _c$[ebp]
	cmp	ecx, 122				; 0000007aH
	jg	SHORT $LN2@MyCharUppe
	movzx	eax, WORD PTR _c$[ebp]
	sub	eax, 32					; 00000020H
	jmp	SHORT $LN4@MyCharUppe
$LN2@MyCharUppe:
; Line 125
	movzx	edx, WORD PTR _c$[ebp]
	cmp	edx, 127				; 0000007fH
	jg	SHORT $LN1@MyCharUppe
	mov	ax, WORD PTR _c$[ebp]
	jmp	SHORT $LN4@MyCharUppe
$LN1@MyCharUppe:
; Line 130
	movzx	eax, WORD PTR _c$[ebp]
	push	eax
	call	?MyCharUpper_WIN@@YG_W_W@Z		; MyCharUpper_WIN
$LN4@MyCharUppe:
; Line 135
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
?MyCharUpper@@YG_W_W@Z ENDP				; MyCharUpper
_TEXT	ENDS
PUBLIC	??A?$CRecordVector@UCRefSortPair@@@@QAEAAUCRefSortPair@@I@Z ; CRecordVector<CRefSortPair>::operator[]
PUBLIC	?Size@?$CRecordVector@UCRefSortPair@@@@QBEIXZ	; CRecordVector<CRefSortPair>::Size
PUBLIC	?Sort@?$CRecordVector@UCRefSortPair@@@@QAEXP6GHPBUCRefSortPair@@0PAX@Z1@Z ; CRecordVector<CRefSortPair>::Sort
PUBLIC	??1?$CRecordVector@UCRefSortPair@@@@QAE@XZ	; CRecordVector<CRefSortPair>::~CRecordVector<CRefSortPair>
PUBLIC	?Add@?$CRecordVector@UCRefSortPair@@@@QAEIUCRefSortPair@@@Z ; CRecordVector<CRefSortPair>::Add
PUBLIC	?IsDir@CDirItem@@QBE_NXZ			; CDirItem::IsDir
PUBLIC	??A?$CObjectVector@UCDirItem@@@@QAEAAUCDirItem@@I@Z ; CObjectVector<CDirItem>::operator[]
PUBLIC	??0?$CRecordVector@UCRefSortPair@@@@QAE@XZ	; CRecordVector<CRefSortPair>::CRecordVector<CRefSortPair>
PUBLIC	??1CCurrentDirRestorer@NDir@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NDir::CCurrentDirRestorer::~CCurrentDirRestorer
PUBLIC	??1AString@@QAE@XZ				; AString::~AString
PUBLIC	?IsEmpty@AString@@QBE_NXZ			; AString::IsEmpty
PUBLIC	??BAString@@QBEPBDXZ				; AString::operator char const *
PUBLIC	?GetAnsiString@@YG?AVAString@@ABVUString@@@Z	; GetAnsiString
PUBLIC	??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[]
PUBLIC	??0CCurrentDirRestorer@NDir@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NDir::CCurrentDirRestorer::CCurrentDirRestorer
PUBLIC	??1?$CObjectVector@VUString@@@@QAE@XZ		; CObjectVector<UString>::~CObjectVector<UString>
PUBLIC	??0?$CObjectVector@VUString@@@@QAE@XZ		; CObjectVector<UString>::CObjectVector<UString>
PUBLIC	?GetProc@CLibrary@NDLL@NWindows@@QBEP6GHXZPBD@Z	; NWindows::NDLL::CLibrary::GetProc
PUBLIC	??1CLibrary@NDLL@NWindows@@QAE@XZ		; NWindows::NDLL::CLibrary::~CLibrary
PUBLIC	??0CLibrary@NDLL@NWindows@@QAE@XZ		; NWindows::NDLL::CLibrary::CLibrary
PUBLIC	?Clear@?$CObjectVector@VUString@@@@QAEXXZ	; CObjectVector<UString>::Clear
PUBLIC	??0CFinishArchiveStat@@QAE@XZ			; CFinishArchiveStat::CFinishArchiveStat
PUBLIC	??1?$CBuffer@E@@QAE@XZ				; CBuffer<unsigned char>::~CBuffer<unsigned char>
PUBLIC	??B?$CBuffer@E@@QAEPAEXZ			; CBuffer<unsigned char>::operator unsigned char *
PUBLIC	?Alloc@?$CBuffer@E@@QAEXI@Z			; CBuffer<unsigned char>::Alloc
PUBLIC	?Size@?$CObjectVector@UCDirItem@@@@QBEIXZ	; CObjectVector<CDirItem>::Size
PUBLIC	??0?$CBuffer@E@@QAE@XZ				; CBuffer<unsigned char>::CBuffer<unsigned char>
PUBLIC	??1?$CObjectVector@UCArcItem@@@@QAE@XZ		; CObjectVector<CArcItem>::~CObjectVector<CArcItem>
PUBLIC	??0?$CObjectVector@UCArcItem@@@@QAE@XZ		; CObjectVector<CArcItem>::CObjectVector<CArcItem>
PUBLIC	??1CTempDir@NDir@NFile@NWindows@@QAE@XZ		; NWindows::NFile::NDir::CTempDir::~CTempDir
PUBLIC	??1CTempFiles@@QAE@XZ				; CTempFiles::~CTempFiles
PUBLIC	??4CArchivePath@@QAEAAU0@ABU0@@Z		; CArchivePath::operator=
PUBLIC	??0CTempFiles@@QAE@XZ				; CTempFiles::CTempFiles
PUBLIC	?GetPath@CTempDir@NDir@NFile@NWindows@@QBEABVUString@@XZ ; NWindows::NFile::NDir::CTempDir::GetPath
PUBLIC	??0CTempDir@NDir@NFile@NWindows@@QAE@XZ		; NWindows::NFile::NDir::CTempDir::CTempDir
PUBLIC	??A?$CObjectVector@UCPair@NWildcard@@@@QAEAAUCPair@NWildcard@@I@Z ; CObjectVector<NWildcard::CPair>::operator[]
PUBLIC	?Size@?$CObjectVector@UCPair@NWildcard@@@@QBEIXZ ; CObjectVector<NWildcard::CPair>::Size
PUBLIC	??1CDirItems@@QAE@XZ				; CDirItems::~CDirItems
PUBLIC	?NeedScanning@CActionSet@NUpdateArchive@@QBE_NXZ ; NUpdateArchive::CActionSet::NeedScanning
PUBLIC	??1CDirItem@@QAE@XZ				; CDirItem::~CDirItem
PUBLIC	?Add@?$CObjectVector@UCDirItem@@@@QAEIABUCDirItem@@@Z ; CObjectVector<CDirItem>::Add
PUBLIC	??0CDirItem@@QAE@XZ				; CDirItem::CDirItem
PUBLIC	?GetArc@CArchiveLink@@QBEPBVCArc@@XZ		; CArchiveLink::GetArc
PUBLIC	?Back@?$CObjectVector@VCArc@@@@QAEAAVCArc@@XZ	; CObjectVector<CArc>::Back
PUBLIC	?Size@?$CObjectVector@VUString@@@@QBEIXZ	; CObjectVector<UString>::Size
PUBLIC	??1?$CObjectVector@UCOpenType@@@@QAE@XZ		; CObjectVector<COpenType>::~CObjectVector<COpenType>
PUBLIC	??1?$CRecordVector@H@@QAE@XZ			; CRecordVector<int>::~CRecordVector<int>
PUBLIC	??1COpenOptions@@QAE@XZ				; COpenOptions::~COpenOptions
PUBLIC	??0COpenOptions@@QAE@XZ				; COpenOptions::COpenOptions
PUBLIC	??0?$CRecordVector@H@@QAE@XZ			; CRecordVector<int>::CRecordVector<int>
PUBLIC	?Add@?$CObjectVector@UCOpenType@@@@QAEIABUCOpenType@@@Z ; CObjectVector<COpenType>::Add
PUBLIC	??0?$CObjectVector@UCOpenType@@@@QAE@XZ		; CObjectVector<COpenType>::CObjectVector<COpenType>
PUBLIC	?IsDir@CFileInfoBase@NFind@NFile@NWindows@@QBE_NXZ ; NWindows::NFile::NFind::CFileInfoBase::IsDir
PUBLIC	??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ	; NWindows::NFile::NFind::CFileInfo::~CFileInfo
PUBLIC	??0CFileInfo@NFind@NFile@NWindows@@QAE@XZ	; NWindows::NFile::NFind::CFileInfo::CFileInfo
PUBLIC	__TI2PAD
PUBLIC	??1CArchiveLink@@QAE@XZ				; CArchiveLink::~CArchiveLink
PUBLIC	??0CArchiveLink@@QAE@XZ				; CArchiveLink::CArchiveLink
PUBLIC	?Find@UString@@QBEH_W@Z				; UString::Find
PUBLIC	??1CProperty@@QAE@XZ				; CProperty::~CProperty
PUBLIC	?Add@?$CObjectVector@UCProperty@@@@QAEIABUCProperty@@@Z ; CObjectVector<CProperty>::Add
PUBLIC	??0CProperty@@QAE@XZ				; CProperty::CProperty
PUBLIC	?IsEmpty@?$CObjectVector@UCRenamePair@@@@QBE_NXZ ; CObjectVector<CRenamePair>::IsEmpty
PUBLIC	?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z ; UpdateArchive
PUBLIC	__CTA2PAD
PUBLIC	__CT??_R0PAD@84
PUBLIC	??_R0PAD@8					; char * `RTTI Type Descriptor'
PUBLIC	__CT??_R0PAX@84
PUBLIC	??_R0PAX@8					; void * `RTTI Type Descriptor'
EXTRN	?RemoveDir@NDir@NFile@NWindows@@YG_NPB_W@Z:PROC	; NWindows::NFile::NDir::RemoveDir
EXTRN	?DoesDirExist@NFind@NFile@NWindows@@YG_NPB_W@Z:PROC ; NWindows::NFile::NFind::DoesDirExist
EXTRN	?GetPhyPath@CDirItems@@QBE?AVUString@@I@Z:PROC	; CDirItems::GetPhyPath
EXTRN	_memset:PROC
EXTRN	?ExtractFileNameFromPath@@YG?AVUString@@ABV1@@Z:PROC ; ExtractFileNameFromPath
EXTRN	?MyGetFullPathName@NDir@NFile@NWindows@@YG_NPB_WAAVUString@@@Z:PROC ; NWindows::NFile::NDir::MyGetFullPathName
EXTRN	?Load@CLibrary@NDLL@NWindows@@QAE_NPB_W@Z:PROC	; NWindows::NDLL::CLibrary::Load
EXTRN	?MyMoveFile@NDir@NFile@NWindows@@YG_NPB_W0@Z:PROC ; NWindows::NFile::NDir::MyMoveFile
EXTRN	?Release@CArchiveLink@@QAEXXZ:PROC		; CArchiveLink::Release
EXTRN	?Close@CArchiveLink@@QAEJXZ:PROC		; CArchiveLink::Close
EXTRN	?DoesFileOrDirExist@NFind@NFile@NWindows@@YG_NPB_W@Z:PROC ; NWindows::NFile::NFind::DoesFileOrDirExist
EXTRN	?NormalizeDirPathPrefix@NName@NFile@NWindows@@YGXAAVUString@@@Z:PROC ; NWindows::NFile::NName::NormalizeDirPathPrefix
EXTRN	?Create@CTempDir@NDir@NFile@NWindows@@QAE_NPB_W@Z:PROC ; NWindows::NFile::NDir::CTempDir::Create
EXTRN	?AddSecurityItem@CDirItems@@QAEJABVUString@@AAH@Z:PROC ; CDirItems::AddSecurityItem
EXTRN	?EnumerateItems@@YGJABVCCensor@NWildcard@@W4ECensorPathMode@2@ABVUString@@AAVCDirItems@@@Z:PROC ; EnumerateItems
EXTRN	?GetCurUtcFileTime@NTime@NWindows@@YGXAAU_FILETIME@@@Z:PROC ; NWindows::NTime::GetCurUtcFileTime
EXTRN	??0CDirItems@@QAE@XZ:PROC			; CDirItems::CDirItems
EXTRN	?FindFormatForArchiveType@CCodecs@@QBEHABVUString@@@Z:PROC ; CCodecs::FindFormatForArchiveType
EXTRN	?Open3@CArchiveLink@@QAEJAAUCOpenOptions@@PAUIOpenCallbackUI@@@Z:PROC ; CArchiveLink::Open3
EXTRN	?Find@CFileInfo@NFind@NFile@NWindows@@QAE_NPB_W@Z:PROC ; NWindows::NFile::NFind::CFileInfo::Find
EXTRN	?DoesFileExist@NFind@NFile@NWindows@@YG_NPB_W@Z:PROC ; NWindows::NFile::NFind::DoesFileExist
EXTRN	?GetModuleDirPrefix@NDLL@NWindows@@YG?AVUString@@XZ:PROC ; NWindows::NDLL::GetModuleDirPrefix
EXTRN	?ExtendExclude@CCensor@NWildcard@@QAEXXZ:PROC	; NWildcard::CCensor::ExtendExclude
EXTRN	?ConvertToLongNames@@YGXAAVCCensor@NWildcard@@@Z:PROC ; ConvertToLongNames
EXTRN	?AddPathsToCensor@CCensor@NWildcard@@QAEXW4ECensorPathMode@2@@Z:PROC ; NWildcard::CCensor::AddPathsToCensor
EXTRN	__CxxThrowException@8:PROC
;	COMDAT ??_R0PAX@8
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\update.cpp
_DATA	SEGMENT
??_R0PAX@8 DD	FLAT:??_7type_info@@6B@			; void * `RTTI Type Descriptor'
	DD	00H
	DB	'.PAX', 00H
_DATA	ENDS
;	COMDAT __CT??_R0PAX@84
xdata$x	SEGMENT
__CT??_R0PAX@84 DD 01H
	DD	FLAT:??_R0PAX@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	00H
xdata$x	ENDS
;	COMDAT ??_R0PAD@8
_DATA	SEGMENT
??_R0PAD@8 DD	FLAT:??_7type_info@@6B@			; char * `RTTI Type Descriptor'
	DD	00H
	DB	'.PAD', 00H
_DATA	ENDS
;	COMDAT __CT??_R0PAD@84
xdata$x	SEGMENT
__CT??_R0PAD@84 DD 01H
	DD	FLAT:??_R0PAD@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	00H
xdata$x	ENDS
;	COMDAT __CTA2PAD
xdata$x	SEGMENT
__CTA2PAD DD	02H
	DD	FLAT:__CT??_R0PAD@84
	DD	FLAT:__CT??_R0PAX@84
xdata$x	ENDS
;	COMDAT __TI2PAD
xdata$x	SEGMENT
__TI2PAD DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA2PAD
xdata$x	ENDS
xdata$x	SEGMENT
__catchsym$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$40 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$0
__tryblocktable$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z DD 018H
	DD	019H
	DD	01aH
	DD	01H
	DD	FLAT:__catchsym$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$40
__ehfuncinfo$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z DD 019930522H
	DD	029H
	DD	FLAT:__unwindtable$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z
	DD	01H
	DD	FLAT:__tryblocktable$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$3
	DD	01H
	DD	FLAT:__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$4
	DD	00H
	DD	FLAT:__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$5
	DD	04H
	DD	FLAT:__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$6
	DD	05H
	DD	FLAT:__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$7
	DD	06H
	DD	FLAT:__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$8
	DD	07H
	DD	FLAT:__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$9
	DD	08H
	DD	FLAT:__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$10
	DD	05H
	DD	FLAT:__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$11
	DD	05H
	DD	FLAT:__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$12
	DD	0bH
	DD	FLAT:__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$13
	DD	0cH
	DD	FLAT:__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$14
	DD	0cH
	DD	FLAT:__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$15
	DD	0eH
	DD	FLAT:__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$16
	DD	0cH
	DD	FLAT:__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$17
	DD	010H
	DD	FLAT:__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$18
	DD	011H
	DD	FLAT:__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$19
	DD	012H
	DD	FLAT:__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$20
	DD	012H
	DD	FLAT:__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$21
	DD	014H
	DD	FLAT:__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$22
	DD	015H
	DD	FLAT:__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$23
	DD	016H
	DD	FLAT:__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$24
	DD	015H
	DD	00H
	DD	018H
	DD	FLAT:__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$25
	DD	015H
	DD	00H
	DD	015H
	DD	FLAT:__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$26
	DD	01bH
	DD	FLAT:__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$27
	DD	01cH
	DD	FLAT:__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$28
	DD	01dH
	DD	FLAT:__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$29
	DD	01cH
	DD	FLAT:__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$30
	DD	01fH
	DD	FLAT:__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$31
	DD	020H
	DD	FLAT:__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$32
	DD	021H
	DD	FLAT:__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$33
	DD	022H
	DD	FLAT:__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$34
	DD	023H
	DD	FLAT:__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$35
	DD	015H
	DD	FLAT:__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$36
	DD	025H
	DD	FLAT:__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$37
	DD	026H
	DD	FLAT:__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$38
	DD	026H
	DD	FLAT:__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$39
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv1877 = -1832						; size = 4
tv468 = -1828						; size = 4
tv559 = -1821						; size = 1
tv562 = -1820						; size = 4
tv618 = -1816						; size = 4
tv621 = -1812						; size = 4
tv637 = -1805						; size = 1
tv704 = -1804						; size = 4
tv722 = -1800						; size = 4
tv734 = -1796						; size = 4
tv844 = -1792						; size = 4
tv816 = -1788						; size = 4
tv1280 = -1784						; size = 4
tv795 = -1780						; size = 4
tv789 = -1776						; size = 4
tv459 = -1772						; size = 4
tv1173 = -1768						; size = 4
tv151 = -1764						; size = 4
$T77525 = -1760						; size = 4
$T77524 = -1756						; size = 4
$T77523 = -1752						; size = 4
$T77522 = -1748						; size = 4
$T77521 = -1744						; size = 4
$T77520 = -1740						; size = 4
$T77519 = -1736						; size = 4
$T77518 = -1732						; size = 4
$T77517 = -1728						; size = 4
$T77516 = -1724						; size = 4
$T77515 = -1720						; size = 4
$T77514 = -1716						; size = 4
$T77511 = -1712						; size = 4
$T77508 = -1708						; size = 12
$T77505 = -1696						; size = 4
$T77504 = -1692						; size = 4
$T77503 = -1688						; size = 4
$T77502 = -1684						; size = 4
$T77501 = -1680						; size = 4
$T77498 = -1676						; size = 4
$T77497 = -1672						; size = 4
$T77496 = -1668						; size = 12
$T77495 = -1656						; size = 4
$T77494 = -1652						; size = 4
$T77493 = -1648						; size = 4
$T77492 = -1644						; size = 4
$T77491 = -1640						; size = 4
$T77490 = -1636						; size = 4
$T77489 = -1632						; size = 4
$T77488 = -1628						; size = 4
$T77487 = -1624						; size = 4
$T77486 = -1620						; size = 4
$T77485 = -1616						; size = 4
$T77484 = -1612						; size = 4
$T77482 = -1608						; size = 4
$T77481 = -1604						; size = 4
$T77480 = -1600						; size = 4
$T77479 = -1596						; size = 12
$T77478 = -1584						; size = 4
___result__$75727 = -1580				; size = 4
___result__$75724 = -1576				; size = 4
_phyPath$75721 = -1568					; size = 12
___result__$75714 = -1552				; size = 4
_pair$75710 = -1544					; size = 8
_phyPath$75707 = -1528					; size = 12
_dirItem$75706 = -1512					; size = 4
_foldersNames$75702 = -1504				; size = 12
_pairs$75701 = -1484					; size = 12
_rec$75598 = -1464					; size = 24
_addr$75596 = -1432					; size = 12
_m$75595 = -1412					; size = 48
_f$75590 = -1356					; size = 24
_name$75588 = -1324					; size = 12
_path$75586 = -1304					; size = 12
_fileName$75584 = -1284					; size = 12
_arcPath$75583 = -1264					; size = 12
_curDirRestorer$75579 = -1244				; size = 16
_arcPath$75575 = -1220					; size = 12
_finalPath$75573 = -1200				; size = 12
_ap$75572 = -1184					; size = 4
_i$75568 = -1180					; size = 4
_fullPaths$75567 = -1172				; size = 12
_sendMail$75561 = -1156					; size = 4
_mapiLib$75556 = -1148					; size = 4
_$S1$75547 = -1136					; size = 12
_tempPath$75545 = -1120					; size = 4
_ap$75544 = -1116					; size = 4
___result__$75539 = -1112				; size = 4
___result__$75535 = -1108				; size = 4
___result__$75531 = -1104				; size = 4
_st$75530 = -1096					; size = 8
___result__$75527 = -1084				; size = 4
_isUpdating$75522 = -1077				; size = 1
_name$75521 = -1072					; size = 12
_command$75520 = -1056					; size = 4
_arc$75519 = -1052					; size = 4
_num$75512 = -1048					; size = 4
_processedItems$ = -1040				; size = 8
___result__$75507 = -1028				; size = 4
_arcItems$ = -1020					; size = 12
_path$75499 = -1000					; size = 12
_ap$75495 = -984					; size = 4
_i$ = -980						; size = 4
_ap$75486 = -976					; size = 4
_createTempFile$ = -969					; size = 1
_tempFiles$ = -964					; size = 12
_tempDirectory$ = -944					; size = 16
_usesTempDir$ = -921					; size = 1
_tempDirPrefix$ = -916					; size = 12
_secureIndex$75477 = -896				; size = 4
_prefix$75474 = -884					; size = 12
_fi$75473 = -864					; size = 56
___result__$75469 = -804				; size = 4
_res$75462 = -800					; size = 4
___result__$75459 = -796				; size = 4
_i$75453 = -792						; size = 4
_needScanning$75451 = -785				; size = 1
_di$75447 = -780					; size = 80
_parentDirItem_Ptr$ = -696				; size = 4
_parentDirItem$ = -688					; size = 80
_dirItems$ = -600					; size = 160
_thereIsInArchive$ = -433				; size = 1
_arc$75423 = -432					; size = 4
___result__$75414 = -428				; size = 4
___result__$75411 = -424				; size = 4
_res2$75410 = -420					; size = 4
_result$75403 = -416					; size = 4
___result__$75400 = -412				; size = 4
_op$75399 = -404					; size = 88
_excl$75398 = -308					; size = 12
_types$75396 = -288					; size = 12
_fi$75376 = -268					; size = 56
_arcPath$ = -204					; size = 12
_arcLink$ = -184					; size = 96
_fullName$75354 = -80					; size = 12
_found$75352 = -61					; size = 1
_property$75346 = -56					; size = 24
_i$75337 = -28						; size = 4
_as$75336 = -24						; size = 4
_renameMode$ = -17					; size = 1
__$EHRec$ = -16						; size = 16
_codecs$ = 8						; size = 4
_types$ = 12						; size = 4
_cmdArcPath2$ = 16					; size = 4
_censor$ = 20						; size = 4
_options$ = 24						; size = 4
_errorInfo$ = 28					; size = 4
_openCallback$ = 32					; size = 4
_callback$ = 36						; size = 4
_needSetPath$ = 40					; size = 1
?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z PROC ; UpdateArchive
; Line 988
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 1816				; 00000718H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1832]
	mov	ecx, 454				; 000001c6H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
; Line 989
	mov	eax, DWORD PTR _options$[ebp]
	movzx	ecx, BYTE PTR [eax+196]
	test	ecx, ecx
	je	SHORT $LN121@UpdateArch
	mov	edx, DWORD PTR _options$[ebp]
	movzx	eax, BYTE PTR [edx+197]
	test	eax, eax
	je	SHORT $LN121@UpdateArch
; Line 990
	mov	eax, -2147467259			; 80004005H
	jmp	$LN123@UpdateArch
$LN121@UpdateArch:
; Line 992
	mov	ecx, DWORD PTR _types$[ebp]
	call	?Size@?$CObjectVector@UCOpenType@@@@QBEIXZ ; CObjectVector<COpenType>::Size
	cmp	eax, 1
	jbe	SHORT $LN120@UpdateArch
; Line 993
	mov	eax, -2147467263			; 80004001H
	jmp	$LN123@UpdateArch
$LN120@UpdateArch:
; Line 995
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 252				; 000000fcH
	call	?IsEmpty@?$CObjectVector@UCRenamePair@@@@QBE_NXZ ; CObjectVector<CRenamePair>::IsEmpty
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	mov	BYTE PTR _renameMode$[ebp], cl
; Line 996
	movzx	edx, BYTE PTR _renameMode$[ebp]
	test	edx, edx
	je	SHORT $LN119@UpdateArch
; Line 998
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 56					; 00000038H
	call	?Size@?$CObjectVector@UCUpdateArchiveCommand@@@@QBEIXZ ; CObjectVector<CUpdateArchiveCommand>::Size
	cmp	eax, 1
	je	SHORT $LN119@UpdateArch
; Line 999
	mov	eax, -2147467259			; 80004005H
	jmp	$LN123@UpdateArch
$LN119@UpdateArch:
; Line 1002
	mov	eax, DWORD PTR _options$[ebp]
	movzx	ecx, BYTE PTR [eax+248]
	test	ecx, ecx
	je	SHORT $LN117@UpdateArch
; Line 1004
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 56					; 00000038H
	call	?Size@?$CObjectVector@UCUpdateArchiveCommand@@@@QBEIXZ ; CObjectVector<CUpdateArchiveCommand>::Size
	cmp	eax, 1
	je	SHORT $LN116@UpdateArch
; Line 1005
	mov	eax, -2147467263			; 80004001H
	jmp	$LN123@UpdateArch
$LN116@UpdateArch:
; Line 1006
	push	0
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 56					; 00000038H
	call	??A?$CObjectVector@UCUpdateArchiveCommand@@@@QAEAAUCUpdateArchiveCommand@@I@Z ; CObjectVector<CUpdateArchiveCommand>::operator[]
	add	eax, 100				; 00000064H
	mov	DWORD PTR _as$75336[ebp], eax
; Line 1007
	mov	DWORD PTR _i$75337[ebp], 2
	jmp	SHORT $LN115@UpdateArch
$LN114@UpdateArch:
	mov	edx, DWORD PTR _i$75337[ebp]
	add	edx, 1
	mov	DWORD PTR _i$75337[ebp], edx
$LN115@UpdateArch:
	cmp	DWORD PTR _i$75337[ebp], 7
	jae	SHORT $LN117@UpdateArch
; Line 1008
	mov	eax, DWORD PTR _i$75337[ebp]
	mov	ecx, DWORD PTR _as$75336[ebp]
	cmp	DWORD PTR [ecx+eax*4], 2
	je	SHORT $LN112@UpdateArch
; Line 1009
	mov	eax, -2147467263			; 80004001H
	jmp	$LN123@UpdateArch
$LN112@UpdateArch:
; Line 1010
	jmp	SHORT $LN114@UpdateArch
$LN117@UpdateArch:
; Line 1012
	mov	edx, DWORD PTR _options$[ebp]
	mov	eax, DWORD PTR [edx+224]
	push	eax
	mov	ecx, DWORD PTR _censor$[ebp]
	call	?AddPathsToCensor@CCensor@NWildcard@@QAEXW4ECensorPathMode@2@@Z ; NWildcard::CCensor::AddPathsToCensor
; Line 1014
	mov	ecx, DWORD PTR _censor$[ebp]
	push	ecx
	call	?ConvertToLongNames@@YGXAAVCCensor@NWildcard@@@Z ; ConvertToLongNames
; Line 1016
	mov	ecx, DWORD PTR _censor$[ebp]
	call	?ExtendExclude@CCensor@NWildcard@@QAEXXZ ; NWildcard::CCensor::ExtendExclude
; Line 1019
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 264				; 00000108H
	call	?Size@?$CRecordVector@_K@@QBEIXZ	; CRecordVector<unsigned __int64>::Size
	test	eax, eax
	jbe	SHORT $LN111@UpdateArch
	mov	edx, DWORD PTR _options$[ebp]
	movzx	eax, BYTE PTR [edx+197]
	test	eax, eax
	je	SHORT $LN111@UpdateArch
; Line 1020
	mov	eax, -2147467263			; 80004001H
	jmp	$LN123@UpdateArch
$LN111@UpdateArch:
; Line 1022
	mov	ecx, DWORD PTR _options$[ebp]
	movzx	edx, BYTE PTR [ecx+164]
	test	edx, edx
	je	$LN110@UpdateArch
; Line 1024
	lea	ecx, DWORD PTR _property$75346[ebp]
	call	??0CProperty@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 1025
	push	OFFSET $SG75347
	lea	ecx, DWORD PTR _property$75346[ebp]
	call	?SetFromAscii@UString@@QAEXPBD@Z	; UString::SetFromAscii
; Line 1026
	lea	eax, DWORD PTR _property$75346[ebp]
	push	eax
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 40					; 00000028H
	call	?Add@?$CObjectVector@UCProperty@@@@QAEIABUCProperty@@@Z ; CObjectVector<CProperty>::Add
; Line 1027
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 168				; 000000a8H
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN109@UpdateArch
; Line 1029
	push	OFFSET $SG75349
	mov	ecx, DWORD PTR _errorInfo$[ebp]
	add	ecx, 4
	call	??4AString@@QAEAAV0@PBD@Z		; AString::operator=
; Line 1030
	mov	DWORD PTR $T77478[ebp], -2147467259	; 80004005H
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _property$75346[ebp]
	call	??1CProperty@@QAE@XZ
	mov	eax, DWORD PTR $T77478[ebp]
	jmp	$LN123@UpdateArch
$LN109@UpdateArch:
; Line 1032
	mov	BYTE PTR _found$75352[ebp], 0
; Line 1033
	push	92					; 0000005cH
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 168				; 000000a8H
	call	?Find@UString@@QBEH_W@Z			; UString::Find
	test	eax, eax
	jge	$LN108@UpdateArch
; Line 1035
	lea	edx, DWORD PTR $T77479[ebp]
	push	edx
	call	?GetModuleDirPrefix@NDLL@NWindows@@YG?AVUString@@XZ ; NWindows::NDLL::GetModuleDirPrefix
	mov	DWORD PTR tv151[ebp], eax
	mov	eax, DWORD PTR tv151[ebp]
	mov	DWORD PTR tv1173[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 168				; 000000a8H
	push	ecx
	mov	edx, DWORD PTR tv1173[ebp]
	push	edx
	lea	eax, DWORD PTR _fullName$75354[ebp]
	push	eax
	call	??H@YG?AVUString@@ABV0@0@Z		; operator+
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR $T77479[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
; Line 1036
	lea	ecx, DWORD PTR _fullName$75354[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	?DoesFileExist@NFind@NFile@NWindows@@YG_NPB_W@Z ; NWindows::NFile::NFind::DoesFileExist
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN107@UpdateArch
; Line 1038
	lea	edx, DWORD PTR _fullName$75354[ebp]
	push	edx
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 168				; 000000a8H
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
; Line 1039
	mov	BYTE PTR _found$75352[ebp], 1
$LN107@UpdateArch:
; Line 1041
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _fullName$75354[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
$LN108@UpdateArch:
; Line 1042
	movzx	eax, BYTE PTR _found$75352[ebp]
	test	eax, eax
	jne	SHORT $LN106@UpdateArch
; Line 1044
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 168				; 000000a8H
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	?DoesFileExist@NFind@NFile@NWindows@@YG_NPB_W@Z ; NWindows::NFile::NFind::DoesFileExist
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN106@UpdateArch
; Line 1045
	mov	edx, DWORD PTR _options$[ebp]
	add	edx, 168				; 000000a8H
	push	edx
	push	OFFSET $SG75361
	mov	ecx, DWORD PTR _errorInfo$[ebp]
	call	?SetFromLastError@CUpdateErrorInfo@@QAEJPBDABVUString@@@Z ; CUpdateErrorInfo::SetFromLastError
	mov	DWORD PTR $T77480[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _property$75346[ebp]
	call	??1CProperty@@QAE@XZ
	mov	eax, DWORD PTR $T77480[ebp]
	jmp	$LN123@UpdateArch
$LN106@UpdateArch:
; Line 1047
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _property$75346[ebp]
	call	??1CProperty@@QAE@XZ
$LN110@UpdateArch:
; Line 1049
	lea	ecx, DWORD PTR _arcLink$[ebp]
	call	??0CArchiveLink@@QAE@XZ			; CArchiveLink::CArchiveLink
	mov	DWORD PTR __$EHRec$[ebp+12], 4
; Line 1052
	movzx	eax, BYTE PTR _needSetPath$[ebp]
	test	eax, eax
	je	SHORT $LN104@UpdateArch
; Line 1055
	mov	ecx, DWORD PTR _cmdArcPath2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _types$[ebp]
	push	edx
	mov	eax, DWORD PTR _codecs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _options$[ebp]
	call	?InitFormatIndex@CUpdateOptions@@QAE_NPBVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@@Z ; CUpdateOptions::InitFormatIndex
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN102@UpdateArch
	mov	edx, DWORD PTR _cmdArcPath2$[ebp]
	push	edx
	mov	eax, DWORD PTR _codecs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _options$[ebp]
	call	?SetArcPath@CUpdateOptions@@QAE_NPBVCCodecs@@ABVUString@@@Z ; CUpdateOptions::SetArcPath
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN104@UpdateArch
$LN102@UpdateArch:
; Line 1056
	mov	DWORD PTR $T77481[ebp], -2147467263	; 80004001H
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _arcLink$[ebp]
	call	??1CArchiveLink@@QAE@XZ			; CArchiveLink::~CArchiveLink
	mov	eax, DWORD PTR $T77481[ebp]
	jmp	$LN123@UpdateArch
$LN104@UpdateArch:
; Line 1058
	lea	edx, DWORD PTR _arcPath$[ebp]
	push	edx
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 72					; 00000048H
	call	?GetFinalPath@CArchivePath@@QBE?AVUString@@XZ ; CArchivePath::GetFinalPath
	mov	BYTE PTR __$EHRec$[ebp+12], 5
; Line 1060
	mov	ecx, DWORD PTR _cmdArcPath2$[ebp]
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN101@UpdateArch
; Line 1062
	mov	ecx, DWORD PTR _options$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	jge	SHORT $LN100@UpdateArch
; Line 1063
	mov	DWORD PTR $T77482[ebp], OFFSET $SG75374
	push	OFFSET __TI2PAD
	lea	edx, DWORD PTR $T77482[ebp]
	push	edx
	call	__CxxThrowException@8
$LN100@UpdateArch:
; Line 1065
	jmp	$LN99@UpdateArch
$LN101@UpdateArch:
; Line 1067
	lea	ecx, DWORD PTR _fi$75376[ebp]
	call	??0CFileInfo@NFind@NFile@NWindows@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 6
; Line 1068
	lea	ecx, DWORD PTR _arcPath$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	lea	ecx, DWORD PTR _fi$75376[ebp]
	call	?Find@CFileInfo@NFind@NFile@NWindows@@QAE_NPB_W@Z ; NWindows::NFile::NFind::CFileInfo::Find
	movzx	eax, al
	test	eax, eax
	jne	$LN98@UpdateArch
; Line 1070
	movzx	ecx, BYTE PTR _renameMode$[ebp]
	test	ecx, ecx
	je	SHORT $LN97@UpdateArch
; Line 1071
	mov	DWORD PTR $T77484[ebp], OFFSET $SG75380
	push	OFFSET __TI2PAD
	lea	edx, DWORD PTR $T77484[ebp]
	push	edx
	call	__CxxThrowException@8
$LN97@UpdateArch:
; Line 1072
	mov	eax, DWORD PTR _options$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jge	SHORT $LN96@UpdateArch
; Line 1074
	mov	ecx, DWORD PTR _cmdArcPath2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _codecs$[ebp]
	push	edx
	mov	ecx, DWORD PTR _options$[ebp]
	call	?SetArcPath@CUpdateOptions@@QAE_NPBVCCodecs@@ABVUString@@@Z ; CUpdateOptions::SetArcPath
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN96@UpdateArch
; Line 1075
	mov	DWORD PTR $T77485[ebp], -2147467263	; 80004001H
	mov	BYTE PTR __$EHRec$[ebp+12], 5
	lea	ecx, DWORD PTR _fi$75376[ebp]
	call	??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _arcPath$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _arcLink$[ebp]
	call	??1CArchiveLink@@QAE@XZ			; CArchiveLink::~CArchiveLink
	mov	eax, DWORD PTR $T77485[ebp]
	jmp	$LN123@UpdateArch
$LN96@UpdateArch:
; Line 1078
	jmp	$LN94@UpdateArch
$LN98@UpdateArch:
; Line 1080
	lea	ecx, DWORD PTR _fi$75376[ebp]
	call	?IsDir@CFileInfoBase@NFind@NFile@NWindows@@QBE_NXZ ; NWindows::NFile::NFind::CFileInfoBase::IsDir
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN93@UpdateArch
; Line 1081
	mov	DWORD PTR $T77486[ebp], OFFSET $SG75388
	push	OFFSET __TI2PAD
	lea	edx, DWORD PTR $T77486[ebp]
	push	edx
	call	__CxxThrowException@8
$LN93@UpdateArch:
; Line 1082
	movzx	eax, BYTE PTR _fi$75376[ebp+37]
	test	eax, eax
	je	SHORT $LN92@UpdateArch
; Line 1083
	mov	DWORD PTR $T77487[ebp], -2147467263	; 80004001H
	mov	BYTE PTR __$EHRec$[ebp+12], 5
	lea	ecx, DWORD PTR _fi$75376[ebp]
	call	??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _arcPath$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _arcLink$[ebp]
	call	??1CArchiveLink@@QAE@XZ			; CArchiveLink::~CArchiveLink
	mov	eax, DWORD PTR $T77487[ebp]
	jmp	$LN123@UpdateArch
$LN92@UpdateArch:
; Line 1084
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 264				; 00000108H
	call	?Size@?$CRecordVector@_K@@QBEIXZ	; CRecordVector<unsigned __int64>::Size
	test	eax, eax
	jbe	SHORT $LN91@UpdateArch
; Line 1085
	mov	DWORD PTR $T77488[ebp], -2147467263	; 80004001H
	mov	BYTE PTR __$EHRec$[ebp+12], 5
	lea	ecx, DWORD PTR _fi$75376[ebp]
	call	??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _arcPath$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _arcLink$[ebp]
	call	??1CArchiveLink@@QAE@XZ			; CArchiveLink::~CArchiveLink
	mov	eax, DWORD PTR $T77488[ebp]
	jmp	$LN123@UpdateArch
$LN91@UpdateArch:
; Line 1086
	lea	ecx, DWORD PTR _types$75396[ebp]
	call	??0?$CObjectVector@UCOpenType@@@@QAE@XZ	; CObjectVector<COpenType>::CObjectVector<COpenType>
	mov	BYTE PTR __$EHRec$[ebp+12], 7
; Line 1088
	mov	ecx, DWORD PTR _options$[ebp]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN90@UpdateArch
; Line 1089
	mov	eax, DWORD PTR _options$[ebp]
	add	eax, 8
	push	eax
	lea	ecx, DWORD PTR _types$75396[ebp]
	call	?Add@?$CObjectVector@UCOpenType@@@@QAEIABUCOpenType@@@Z ; CObjectVector<COpenType>::Add
$LN90@UpdateArch:
; Line 1092
	lea	ecx, DWORD PTR _excl$75398[ebp]
	call	??0?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+12], 8
; Line 1093
	lea	ecx, DWORD PTR _op$75399[ebp]
	call	??0COpenOptions@@QAE@XZ			; COpenOptions::COpenOptions
	mov	BYTE PTR __$EHRec$[ebp+12], 9
; Line 1095
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 40					; 00000028H
	mov	DWORD PTR _op$75399[ebp+64], ecx
; Line 1097
	mov	edx, DWORD PTR _codecs$[ebp]
	mov	DWORD PTR _op$75399[ebp], edx
; Line 1098
	lea	eax, DWORD PTR _types$75396[ebp]
	mov	DWORD PTR _op$75399[ebp+40], eax
; Line 1099
	lea	ecx, DWORD PTR _excl$75398[ebp]
	mov	DWORD PTR _op$75399[ebp+44], ecx
; Line 1100
	mov	BYTE PTR _op$75399[ebp+68], 0
; Line 1101
	mov	DWORD PTR _op$75399[ebp+48], 0
; Line 1102
	lea	edx, DWORD PTR _arcPath$[ebp]
	push	edx
	lea	ecx, DWORD PTR _op$75399[ebp+72]
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
; Line 1104
	lea	ecx, DWORD PTR _arcPath$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _callback$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _callback$[ebp]
	mov	eax, DWORD PTR [edx+72]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$75400[ebp], eax
	cmp	DWORD PTR ___result__$75400[ebp], 0
	je	SHORT $LN89@UpdateArch
	mov	ecx, DWORD PTR ___result__$75400[ebp]
	mov	DWORD PTR $T77489[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 8
	lea	ecx, DWORD PTR _op$75399[ebp]
	call	??1COpenOptions@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 7
	lea	ecx, DWORD PTR _excl$75398[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+12], 6
	lea	ecx, DWORD PTR _types$75396[ebp]
	call	??1?$CObjectVector@UCOpenType@@@@QAE@XZ	; CObjectVector<COpenType>::~CObjectVector<COpenType>
	mov	BYTE PTR __$EHRec$[ebp+12], 5
	lea	ecx, DWORD PTR _fi$75376[ebp]
	call	??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _arcPath$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _arcLink$[ebp]
	call	??1CArchiveLink@@QAE@XZ			; CArchiveLink::~CArchiveLink
	mov	eax, DWORD PTR $T77489[ebp]
	jmp	$LN123@UpdateArch
$LN89@UpdateArch:
; Line 1106
	mov	edx, DWORD PTR _openCallback$[ebp]
	push	edx
	lea	eax, DWORD PTR _op$75399[ebp]
	push	eax
	lea	ecx, DWORD PTR _arcLink$[ebp]
	call	?Open3@CArchiveLink@@QAEJAAUCOpenOptions@@PAUIOpenCallbackUI@@@Z ; CArchiveLink::Open3
	mov	DWORD PTR _result$75403[ebp], eax
; Line 1108
	cmp	DWORD PTR _result$75403[ebp], -2147467260 ; 80004004H
	jne	SHORT $LN88@UpdateArch
; Line 1109
	mov	ecx, DWORD PTR _result$75403[ebp]
	mov	DWORD PTR $T77490[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 8
	lea	ecx, DWORD PTR _op$75399[ebp]
	call	??1COpenOptions@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 7
	lea	ecx, DWORD PTR _excl$75398[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+12], 6
	lea	ecx, DWORD PTR _types$75396[ebp]
	call	??1?$CObjectVector@UCOpenType@@@@QAE@XZ	; CObjectVector<COpenType>::~CObjectVector<COpenType>
	mov	BYTE PTR __$EHRec$[ebp+12], 5
	lea	ecx, DWORD PTR _fi$75376[ebp]
	call	??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _arcPath$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _arcLink$[ebp]
	call	??1CArchiveLink@@QAE@XZ			; CArchiveLink::~CArchiveLink
	mov	eax, DWORD PTR $T77490[ebp]
	jmp	$LN123@UpdateArch
$LN88@UpdateArch:
; Line 1111
	cmp	DWORD PTR _result$75403[ebp], 0
	jne	SHORT $LN87@UpdateArch
	cmp	DWORD PTR _arcLink$[ebp+60], 0
	jl	SHORT $LN87@UpdateArch
; Line 1112
	mov	DWORD PTR _result$75403[ebp], 1
$LN87@UpdateArch:
; Line 1114
	mov	esi, esp
	mov	edx, DWORD PTR _result$75403[ebp]
	push	edx
	lea	ecx, DWORD PTR _arcPath$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	lea	eax, DWORD PTR _arcLink$[ebp]
	push	eax
	mov	ecx, DWORD PTR _codecs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _callback$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _callback$[ebp]
	mov	edx, DWORD PTR [eax+60]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _res2$75410[ebp], eax
; Line 1119
	mov	eax, DWORD PTR _res2$75410[ebp]
	mov	DWORD PTR ___result__$75411[ebp], eax
	cmp	DWORD PTR ___result__$75411[ebp], 0
	je	SHORT $LN86@UpdateArch
	mov	ecx, DWORD PTR ___result__$75411[ebp]
	mov	DWORD PTR $T77491[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 8
	lea	ecx, DWORD PTR _op$75399[ebp]
	call	??1COpenOptions@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 7
	lea	ecx, DWORD PTR _excl$75398[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+12], 6
	lea	ecx, DWORD PTR _types$75396[ebp]
	call	??1?$CObjectVector@UCOpenType@@@@QAE@XZ	; CObjectVector<COpenType>::~CObjectVector<COpenType>
	mov	BYTE PTR __$EHRec$[ebp+12], 5
	lea	ecx, DWORD PTR _fi$75376[ebp]
	call	??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _arcPath$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _arcLink$[ebp]
	call	??1CArchiveLink@@QAE@XZ			; CArchiveLink::~CArchiveLink
	mov	eax, DWORD PTR $T77491[ebp]
	jmp	$LN123@UpdateArch
$LN86@UpdateArch:
; Line 1120
	mov	edx, DWORD PTR _result$75403[ebp]
	mov	DWORD PTR ___result__$75414[ebp], edx
	cmp	DWORD PTR ___result__$75414[ebp], 0
	je	SHORT $LN85@UpdateArch
	mov	eax, DWORD PTR ___result__$75414[ebp]
	mov	DWORD PTR $T77492[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 8
	lea	ecx, DWORD PTR _op$75399[ebp]
	call	??1COpenOptions@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 7
	lea	ecx, DWORD PTR _excl$75398[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+12], 6
	lea	ecx, DWORD PTR _types$75396[ebp]
	call	??1?$CObjectVector@UCOpenType@@@@QAE@XZ	; CObjectVector<COpenType>::~CObjectVector<COpenType>
	mov	BYTE PTR __$EHRec$[ebp+12], 5
	lea	ecx, DWORD PTR _fi$75376[ebp]
	call	??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _arcPath$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _arcLink$[ebp]
	call	??1CArchiveLink@@QAE@XZ			; CArchiveLink::~CArchiveLink
	mov	eax, DWORD PTR $T77492[ebp]
	jmp	$LN123@UpdateArch
$LN85@UpdateArch:
; Line 1122
	lea	ecx, DWORD PTR _arcLink$[ebp+12]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	cmp	eax, 1
	jbe	$LN84@UpdateArch
; Line 1124
	mov	ecx, DWORD PTR _errorInfo$[ebp]
	mov	DWORD PTR [ecx], -2147467263		; 80004001H
; Line 1125
	push	OFFSET $SG75420
	mov	ecx, DWORD PTR _errorInfo$[ebp]
	add	ecx, 4
	call	??4AString@@QAEAAV0@PBD@Z		; AString::operator=
; Line 1126
	mov	DWORD PTR $T77493[ebp], -2147467263	; 80004001H
	mov	BYTE PTR __$EHRec$[ebp+12], 8
	lea	ecx, DWORD PTR _op$75399[ebp]
	call	??1COpenOptions@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 7
	lea	ecx, DWORD PTR _excl$75398[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+12], 6
	lea	ecx, DWORD PTR _types$75396[ebp]
	call	??1?$CObjectVector@UCOpenType@@@@QAE@XZ	; CObjectVector<COpenType>::~CObjectVector<COpenType>
	mov	BYTE PTR __$EHRec$[ebp+12], 5
	lea	ecx, DWORD PTR _fi$75376[ebp]
	call	??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _arcPath$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _arcLink$[ebp]
	call	??1CArchiveLink@@QAE@XZ			; CArchiveLink::~CArchiveLink
	mov	eax, DWORD PTR $T77493[ebp]
	jmp	$LN123@UpdateArch
$LN84@UpdateArch:
; Line 1129
	lea	ecx, DWORD PTR _arcLink$[ebp]
	call	?Back@?$CObjectVector@VCArc@@@@QAEAAVCArc@@XZ ; CObjectVector<CArc>::Back
	mov	DWORD PTR _arc$75423[ebp], eax
; Line 1130
	movzx	edx, BYTE PTR _fi$75376[ebp+37]
	neg	edx
	sbb	edx, edx
	add	edx, 1
	mov	eax, DWORD PTR _arc$75423[ebp]
	mov	BYTE PTR [eax+164], dl
; Line 1131
	mov	ecx, DWORD PTR _arc$75423[ebp]
	mov	edx, DWORD PTR _fi$75376[ebp+24]
	mov	DWORD PTR [ecx+156], edx
	mov	eax, DWORD PTR _fi$75376[ebp+28]
	mov	DWORD PTR [ecx+160], eax
; Line 1133
	mov	ecx, DWORD PTR _arc$75423[ebp]
	movzx	edx, BYTE PTR [ecx+16]
	test	edx, edx
	je	$LN83@UpdateArch
; Line 1135
	mov	eax, DWORD PTR _errorInfo$[ebp]
	mov	DWORD PTR [eax], -2147467263		; 80004001H
; Line 1136
	push	OFFSET $SG75427
	mov	ecx, DWORD PTR _errorInfo$[ebp]
	add	ecx, 4
	call	??4AString@@QAEAAV0@PBD@Z		; AString::operator=
; Line 1137
	mov	DWORD PTR $T77494[ebp], -2147467263	; 80004001H
	mov	BYTE PTR __$EHRec$[ebp+12], 8
	lea	ecx, DWORD PTR _op$75399[ebp]
	call	??1COpenOptions@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 7
	lea	ecx, DWORD PTR _excl$75398[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+12], 6
	lea	ecx, DWORD PTR _types$75396[ebp]
	call	??1?$CObjectVector@UCOpenType@@@@QAE@XZ	; CObjectVector<COpenType>::~CObjectVector<COpenType>
	mov	BYTE PTR __$EHRec$[ebp+12], 5
	lea	ecx, DWORD PTR _fi$75376[ebp]
	call	??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _arcPath$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _arcLink$[ebp]
	call	??1CArchiveLink@@QAE@XZ			; CArchiveLink::~CArchiveLink
	mov	eax, DWORD PTR $T77494[ebp]
	jmp	$LN123@UpdateArch
$LN83@UpdateArch:
; Line 1139
	mov	ecx, DWORD PTR _options$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	jge	$LN82@UpdateArch
; Line 1141
	lea	ecx, DWORD PTR _arcLink$[ebp]
	call	?GetArc@CArchiveLink@@QBEPBVCArc@@XZ	; CArchiveLink::GetArc
	mov	edx, DWORD PTR _options$[ebp]
	mov	eax, DWORD PTR [eax+148]
	mov	DWORD PTR [edx+8], eax
; Line 1142
	mov	ecx, DWORD PTR _cmdArcPath2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _codecs$[ebp]
	push	edx
	mov	ecx, DWORD PTR _options$[ebp]
	call	?SetArcPath@CUpdateOptions@@QAE_NPBVCCodecs@@ABVUString@@@Z ; CUpdateOptions::SetArcPath
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN82@UpdateArch
; Line 1143
	mov	DWORD PTR $T77495[ebp], -2147467263	; 80004001H
	mov	BYTE PTR __$EHRec$[ebp+12], 8
	lea	ecx, DWORD PTR _op$75399[ebp]
	call	??1COpenOptions@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 7
	lea	ecx, DWORD PTR _excl$75398[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+12], 6
	lea	ecx, DWORD PTR _types$75396[ebp]
	call	??1?$CObjectVector@UCOpenType@@@@QAE@XZ	; CObjectVector<COpenType>::~CObjectVector<COpenType>
	mov	BYTE PTR __$EHRec$[ebp+12], 5
	lea	ecx, DWORD PTR _fi$75376[ebp]
	call	??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _arcPath$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _arcLink$[ebp]
	call	??1CArchiveLink@@QAE@XZ			; CArchiveLink::~CArchiveLink
	mov	eax, DWORD PTR $T77495[ebp]
	jmp	$LN123@UpdateArch
$LN82@UpdateArch:
; Line 1145
	mov	BYTE PTR __$EHRec$[ebp+12], 8
	lea	ecx, DWORD PTR _op$75399[ebp]
	call	??1COpenOptions@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 7
	lea	ecx, DWORD PTR _excl$75398[ebp]
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+12], 6
	lea	ecx, DWORD PTR _types$75396[ebp]
	call	??1?$CObjectVector@UCOpenType@@@@QAE@XZ	; CObjectVector<COpenType>::~CObjectVector<COpenType>
$LN94@UpdateArch:
; Line 1146
	mov	BYTE PTR __$EHRec$[ebp+12], 5
	lea	ecx, DWORD PTR _fi$75376[ebp]
	call	??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ
$LN99@UpdateArch:
; Line 1148
	mov	ecx, DWORD PTR _options$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	jge	SHORT $LN80@UpdateArch
; Line 1150
	mov	edx, DWORD PTR _kDefaultArcType
	push	edx
	lea	ecx, DWORD PTR $T77496[ebp]
	call	??0UString@@QAE@PB_W@Z			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+12], 10		; 0000000aH
	lea	eax, DWORD PTR $T77496[ebp]
	push	eax
	mov	ecx, DWORD PTR _codecs$[ebp]
	call	?FindFormatForArchiveType@CCodecs@@QBEHABVUString@@@Z ; CCodecs::FindFormatForArchiveType
	mov	ecx, DWORD PTR _options$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 5
	lea	ecx, DWORD PTR $T77496[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
; Line 1151
	mov	edx, DWORD PTR _options$[ebp]
	cmp	DWORD PTR [edx+8], 0
	jge	SHORT $LN80@UpdateArch
; Line 1152
	mov	DWORD PTR $T77497[ebp], -2147467263	; 80004001H
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _arcPath$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _arcLink$[ebp]
	call	??1CArchiveLink@@QAE@XZ			; CArchiveLink::~CArchiveLink
	mov	eax, DWORD PTR $T77497[ebp]
	jmp	$LN123@UpdateArch
$LN80@UpdateArch:
; Line 1155
	mov	al, BYTE PTR _arcLink$[ebp+32]
	mov	BYTE PTR _thereIsInArchive$[ebp], al
; Line 1156
	movzx	ecx, BYTE PTR _thereIsInArchive$[ebp]
	test	ecx, ecx
	jne	SHORT $LN78@UpdateArch
	movzx	edx, BYTE PTR _renameMode$[ebp]
	test	edx, edx
	je	SHORT $LN78@UpdateArch
; Line 1157
	mov	DWORD PTR $T77498[ebp], -2147467259	; 80004005H
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _arcPath$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _arcLink$[ebp]
	call	??1CArchiveLink@@QAE@XZ			; CArchiveLink::~CArchiveLink
	mov	eax, DWORD PTR $T77498[ebp]
	jmp	$LN123@UpdateArch
$LN78@UpdateArch:
; Line 1159
	lea	ecx, DWORD PTR _dirItems$[ebp]
	call	??0CDirItems@@QAE@XZ			; CDirItems::CDirItems
	mov	BYTE PTR __$EHRec$[ebp+12], 11		; 0000000bH
; Line 1160
	cmp	DWORD PTR _callback$[ebp], 0
	je	SHORT $LN124@UpdateArch
	mov	eax, DWORD PTR _callback$[ebp]
	add	eax, 4
	mov	DWORD PTR tv459[ebp], eax
	jmp	SHORT $LN125@UpdateArch
$LN124@UpdateArch:
	mov	DWORD PTR tv459[ebp], 0
$LN125@UpdateArch:
	mov	ecx, DWORD PTR tv459[ebp]
	mov	DWORD PTR _dirItems$[ebp+152], ecx
; Line 1162
	lea	ecx, DWORD PTR _parentDirItem$[ebp]
	call	??0CDirItem@@QAE@XZ			; CDirItem::CDirItem
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
; Line 1163
	mov	DWORD PTR _parentDirItem_Ptr$[ebp], 0
; Line 1172
	mov	edx, DWORD PTR _options$[ebp]
	movzx	eax, BYTE PTR [edx+181]
	test	eax, eax
	je	$LN77@UpdateArch
; Line 1174
	lea	ecx, DWORD PTR _di$75447[ebp]
	call	??0CDirItem@@QAE@XZ			; CDirItem::CDirItem
	mov	BYTE PTR __$EHRec$[ebp+12], 13		; 0000000dH
; Line 1175
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 184				; 000000b8H
	push	ecx
	lea	ecx, DWORD PTR _di$75447[ebp+32]
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
; Line 1176
	mov	DWORD PTR _di$75447[ebp], -1
	mov	DWORD PTR _di$75447[ebp+4], -1
; Line 1177
	mov	DWORD PTR _di$75447[ebp+60], 0
; Line 1178
	lea	edx, DWORD PTR _di$75447[ebp+24]
	push	edx
	call	?GetCurUtcFileTime@NTime@NWindows@@YGXAAU_FILETIME@@@Z ; NWindows::NTime::GetCurUtcFileTime
; Line 1179
	mov	eax, DWORD PTR _di$75447[ebp+24]
	mov	DWORD PTR _di$75447[ebp+16], eax
	mov	ecx, DWORD PTR _di$75447[ebp+28]
	mov	DWORD PTR _di$75447[ebp+20], ecx
	mov	edx, DWORD PTR _di$75447[ebp+16]
	mov	DWORD PTR _di$75447[ebp+8], edx
	mov	eax, DWORD PTR _di$75447[ebp+20]
	mov	DWORD PTR _di$75447[ebp+12], eax
; Line 1180
	lea	ecx, DWORD PTR _di$75447[ebp]
	push	ecx
	lea	ecx, DWORD PTR _dirItems$[ebp+36]
	call	?Add@?$CObjectVector@UCDirItem@@@@QAEIABUCDirItem@@@Z ; CObjectVector<CDirItem>::Add
; Line 1181
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR _di$75447[ebp]
	call	??1CDirItem@@QAE@XZ
; Line 1182
	jmp	$LN76@UpdateArch
$LN77@UpdateArch:
; Line 1184
	mov	BYTE PTR _needScanning$75451[ebp], 0
; Line 1186
	movzx	edx, BYTE PTR _renameMode$[ebp]
	test	edx, edx
	jne	SHORT $LN75@UpdateArch
; Line 1187
	mov	DWORD PTR _i$75453[ebp], 0
	jmp	SHORT $LN74@UpdateArch
$LN73@UpdateArch:
	mov	eax, DWORD PTR _i$75453[ebp]
	add	eax, 1
	mov	DWORD PTR _i$75453[ebp], eax
$LN74@UpdateArch:
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 56					; 00000038H
	call	?Size@?$CObjectVector@UCUpdateArchiveCommand@@@@QBEIXZ ; CObjectVector<CUpdateArchiveCommand>::Size
	cmp	DWORD PTR _i$75453[ebp], eax
	jae	SHORT $LN75@UpdateArch
; Line 1188
	mov	ecx, DWORD PTR _i$75453[ebp]
	push	ecx
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 56					; 00000038H
	call	??A?$CObjectVector@UCUpdateArchiveCommand@@@@QAEAAUCUpdateArchiveCommand@@I@Z ; CObjectVector<CUpdateArchiveCommand>::operator[]
	add	eax, 100				; 00000064H
	mov	ecx, eax
	call	?NeedScanning@CActionSet@NUpdateArchive@@QBE_NXZ ; NUpdateArchive::CActionSet::NeedScanning
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN71@UpdateArch
; Line 1189
	mov	BYTE PTR _needScanning$75451[ebp], 1
$LN71@UpdateArch:
; Line 1191
	jmp	SHORT $LN73@UpdateArch
$LN75@UpdateArch:
	movzx	eax, BYTE PTR _needScanning$75451[ebp]
	test	eax, eax
	je	$LN76@UpdateArch
; Line 1193
	mov	esi, esp
	mov	ecx, DWORD PTR _callback$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _callback$[ebp]
	mov	eax, DWORD PTR [edx+64]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$75459[ebp], eax
	cmp	DWORD PTR ___result__$75459[ebp], 0
	je	SHORT $LN69@UpdateArch
	mov	ecx, DWORD PTR ___result__$75459[ebp]
	mov	DWORD PTR $T77501[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 11		; 0000000bH
	lea	ecx, DWORD PTR _parentDirItem$[ebp]
	call	??1CDirItem@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 5
	lea	ecx, DWORD PTR _dirItems$[ebp]
	call	??1CDirItems@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _arcPath$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _arcLink$[ebp]
	call	??1CArchiveLink@@QAE@XZ			; CArchiveLink::~CArchiveLink
	mov	eax, DWORD PTR $T77501[ebp]
	jmp	$LN123@UpdateArch
$LN69@UpdateArch:
; Line 1195
	mov	edx, DWORD PTR _options$[ebp]
	mov	al, BYTE PTR [edx+246]
	mov	BYTE PTR _dirItems$[ebp+48], al
; Line 1198
	mov	ecx, DWORD PTR _options$[ebp]
	mov	dl, BYTE PTR [ecx+240]
	mov	BYTE PTR _dirItems$[ebp+149], dl
; Line 1201
	mov	eax, DWORD PTR _options$[ebp]
	mov	cl, BYTE PTR [eax+242]
	mov	BYTE PTR _dirItems$[ebp+49], cl
; Line 1206
	lea	edx, DWORD PTR _dirItems$[ebp]
	push	edx
	mov	eax, DWORD PTR _options$[ebp]
	add	eax, 228				; 000000e4H
	push	eax
	mov	ecx, DWORD PTR _options$[ebp]
	mov	edx, DWORD PTR [ecx+224]
	push	edx
	mov	eax, DWORD PTR _censor$[ebp]
	push	eax
	call	?EnumerateItems@@YGJABVCCensor@NWildcard@@W4ECensorPathMode@2@ABVUString@@AAVCDirItems@@@Z ; EnumerateItems
	mov	DWORD PTR _res$75462[ebp], eax
; Line 1208
	cmp	DWORD PTR _res$75462[ebp], 0
	je	SHORT $LN68@UpdateArch
; Line 1210
	cmp	DWORD PTR _res$75462[ebp], -2147467260	; 80004004H
	je	SHORT $LN67@UpdateArch
; Line 1211
	push	OFFSET $SG75467
	mov	ecx, DWORD PTR _errorInfo$[ebp]
	add	ecx, 4
	call	??4AString@@QAEAAV0@PBD@Z		; AString::operator=
$LN67@UpdateArch:
; Line 1212
	mov	ecx, DWORD PTR _res$75462[ebp]
	mov	DWORD PTR $T77502[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 11		; 0000000bH
	lea	ecx, DWORD PTR _parentDirItem$[ebp]
	call	??1CDirItem@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 5
	lea	ecx, DWORD PTR _dirItems$[ebp]
	call	??1CDirItems@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _arcPath$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _arcLink$[ebp]
	call	??1CArchiveLink@@QAE@XZ			; CArchiveLink::~CArchiveLink
	mov	eax, DWORD PTR $T77502[ebp]
	jmp	$LN123@UpdateArch
$LN68@UpdateArch:
; Line 1215
	mov	esi, esp
	lea	edx, DWORD PTR _dirItems$[ebp+56]
	push	edx
	mov	eax, DWORD PTR _callback$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _callback$[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$75469[ebp], eax
	cmp	DWORD PTR ___result__$75469[ebp], 0
	je	SHORT $LN66@UpdateArch
	mov	ecx, DWORD PTR ___result__$75469[ebp]
	mov	DWORD PTR $T77503[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 11		; 0000000bH
	lea	ecx, DWORD PTR _parentDirItem$[ebp]
	call	??1CDirItem@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 5
	lea	ecx, DWORD PTR _dirItems$[ebp]
	call	??1CDirItems@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _arcPath$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _arcLink$[ebp]
	call	??1CArchiveLink@@QAE@XZ			; CArchiveLink::~CArchiveLink
	mov	eax, DWORD PTR $T77503[ebp]
	jmp	$LN123@UpdateArch
$LN66@UpdateArch:
; Line 1217
	mov	ecx, DWORD PTR _censor$[ebp]
	call	?Size@?$CObjectVector@UCPair@NWildcard@@@@QBEIXZ ; CObjectVector<NWildcard::CPair>::Size
	cmp	eax, 1
	jne	$LN76@UpdateArch
; Line 1219
	lea	ecx, DWORD PTR _fi$75473[ebp]
	call	??0CFileInfo@NFind@NFile@NWindows@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 14		; 0000000eH
; Line 1220
	push	0
	mov	ecx, DWORD PTR _censor$[ebp]
	call	??A?$CObjectVector@UCPair@NWildcard@@@@QAEAAUCPair@NWildcard@@I@Z ; CObjectVector<NWildcard::CPair>::operator[]
	push	eax
	lea	ecx, DWORD PTR _prefix$75474[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+12], 15		; 0000000fH
; Line 1221
	push	46					; 0000002eH
	lea	ecx, DWORD PTR _prefix$75474[ebp]
	call	??YUString@@QAEAAV0@_W@Z		; UString::operator+=
; Line 1229
	lea	ecx, DWORD PTR _prefix$75474[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	lea	ecx, DWORD PTR _fi$75473[ebp]
	call	?Find@CFileInfo@NFind@NFile@NWindows@@QAE_NPB_W@Z ; NWindows::NFile::NFind::CFileInfo::Find
	movzx	edx, al
	test	edx, edx
	je	$LN64@UpdateArch
; Line 1230
	lea	ecx, DWORD PTR _fi$75473[ebp]
	call	?IsDir@CFileInfoBase@NFind@NFile@NWindows@@QBE_NXZ ; NWindows::NFile::NFind::CFileInfoBase::IsDir
	movzx	eax, al
	test	eax, eax
	je	$LN64@UpdateArch
; Line 1232
	mov	ecx, DWORD PTR _fi$75473[ebp]
	mov	DWORD PTR _parentDirItem$[ebp], ecx
	mov	edx, DWORD PTR _fi$75473[ebp+4]
	mov	DWORD PTR _parentDirItem$[ebp+4], edx
; Line 1233
	mov	eax, DWORD PTR _fi$75473[ebp+8]
	mov	DWORD PTR _parentDirItem$[ebp+8], eax
	mov	ecx, DWORD PTR _fi$75473[ebp+12]
	mov	DWORD PTR _parentDirItem$[ebp+12], ecx
; Line 1234
	mov	edx, DWORD PTR _fi$75473[ebp+16]
	mov	DWORD PTR _parentDirItem$[ebp+16], edx
	mov	eax, DWORD PTR _fi$75473[ebp+20]
	mov	DWORD PTR _parentDirItem$[ebp+20], eax
; Line 1235
	mov	ecx, DWORD PTR _fi$75473[ebp+24]
	mov	DWORD PTR _parentDirItem$[ebp+24], ecx
	mov	edx, DWORD PTR _fi$75473[ebp+28]
	mov	DWORD PTR _parentDirItem$[ebp+28], edx
; Line 1236
	mov	eax, DWORD PTR _fi$75473[ebp+32]
	mov	DWORD PTR _parentDirItem$[ebp+60], eax
; Line 1237
	lea	ecx, DWORD PTR _parentDirItem$[ebp]
	mov	DWORD PTR _parentDirItem_Ptr$[ebp], ecx
; Line 1239
	mov	DWORD PTR _secureIndex$75477[ebp], -1
; Line 1241
	mov	edx, DWORD PTR _options$[ebp]
	movzx	eax, BYTE PTR [edx+240]
	test	eax, eax
	je	SHORT $LN62@UpdateArch
; Line 1242
	lea	ecx, DWORD PTR _secureIndex$75477[ebp]
	push	ecx
	lea	edx, DWORD PTR _prefix$75474[ebp]
	push	edx
	lea	ecx, DWORD PTR _dirItems$[ebp]
	call	?AddSecurityItem@CDirItems@@QAEJABVUString@@AAH@Z ; CDirItems::AddSecurityItem
$LN62@UpdateArch:
; Line 1244
	mov	eax, DWORD PTR _secureIndex$75477[ebp]
	mov	DWORD PTR _parentDirItem$[ebp+72], eax
; Line 1246
	lea	ecx, DWORD PTR _parentDirItem$[ebp]
	mov	DWORD PTR _parentDirItem_Ptr$[ebp], ecx
$LN64@UpdateArch:
; Line 1248
	mov	BYTE PTR __$EHRec$[ebp+12], 14		; 0000000eH
	lea	ecx, DWORD PTR _prefix$75474[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR _fi$75473[ebp]
	call	??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ
$LN76@UpdateArch:
; Line 1252
	lea	ecx, DWORD PTR _tempDirPrefix$[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+12], 16		; 00000010H
; Line 1253
	mov	BYTE PTR _usesTempDir$[ebp], 0
; Line 1256
	lea	ecx, DWORD PTR _tempDirectory$[ebp]
	call	??0CTempDir@NDir@NFile@NWindows@@QAE@XZ	; NWindows::NFile::NDir::CTempDir::CTempDir
	mov	BYTE PTR __$EHRec$[ebp+12], 17		; 00000011H
; Line 1257
	mov	edx, DWORD PTR _options$[ebp]
	movzx	eax, BYTE PTR [edx+197]
	test	eax, eax
	je	SHORT $LN61@UpdateArch
	mov	ecx, DWORD PTR _options$[ebp]
	movzx	edx, BYTE PTR [ecx+198]
	test	edx, edx
	je	SHORT $LN61@UpdateArch
; Line 1259
	mov	eax, DWORD PTR _kTempFolderPrefix
	push	eax
	lea	ecx, DWORD PTR _tempDirectory$[ebp]
	call	?Create@CTempDir@NDir@NFile@NWindows@@QAE_NPB_W@Z ; NWindows::NFile::NDir::CTempDir::Create
; Line 1260
	lea	ecx, DWORD PTR _tempDirectory$[ebp]
	call	?GetPath@CTempDir@NDir@NFile@NWindows@@QBEABVUString@@XZ ; NWindows::NFile::NDir::CTempDir::GetPath
	push	eax
	lea	ecx, DWORD PTR _tempDirPrefix$[ebp]
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
; Line 1261
	lea	ecx, DWORD PTR _tempDirPrefix$[ebp]
	push	ecx
	call	?NormalizeDirPathPrefix@NName@NFile@NWindows@@YGXAAVUString@@@Z ; NWindows::NFile::NName::NormalizeDirPathPrefix
; Line 1262
	mov	BYTE PTR _usesTempDir$[ebp], 1
$LN61@UpdateArch:
; Line 1266
	lea	ecx, DWORD PTR _tempFiles$[ebp]
	call	??0CTempFiles@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 18		; 00000012H
; Line 1268
	mov	BYTE PTR _createTempFile$[ebp], 0
; Line 1270
	mov	edx, DWORD PTR _options$[ebp]
	movzx	eax, BYTE PTR [edx+196]
	test	eax, eax
	jne	$LN60@UpdateArch
	mov	ecx, DWORD PTR _options$[ebp]
	movzx	edx, BYTE PTR [ecx+68]
	test	edx, edx
	je	$LN60@UpdateArch
; Line 1272
	push	0
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 56					; 00000038H
	call	??A?$CObjectVector@UCUpdateArchiveCommand@@@@QAEAAUCUpdateArchiveCommand@@I@Z ; CObjectVector<CUpdateArchiveCommand>::operator[]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _ap$75486[ebp], eax
; Line 1273
	mov	eax, DWORD PTR _options$[ebp]
	add	eax, 72					; 00000048H
	push	eax
	mov	ecx, DWORD PTR _ap$75486[ebp]
	call	??4CArchivePath@@QAEAAU0@ABU0@@Z
; Line 1275
	movzx	ecx, BYTE PTR _thereIsInArchive$[ebp]
	test	ecx, ecx
	jne	SHORT $LN58@UpdateArch
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 212				; 000000d4H
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	edx, al
	test	edx, edx
	jne	$LN60@UpdateArch
$LN58@UpdateArch:
	movzx	eax, BYTE PTR _usesTempDir$[ebp]
	test	eax, eax
	jne	SHORT $LN60@UpdateArch
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 264				; 00000108H
	call	?Size@?$CRecordVector@_K@@QBEIXZ	; CRecordVector<unsigned __int64>::Size
	test	eax, eax
	jne	SHORT $LN60@UpdateArch
; Line 1277
	mov	BYTE PTR _createTempFile$[ebp], 1
; Line 1278
	mov	ecx, DWORD PTR _ap$75486[ebp]
	mov	BYTE PTR [ecx+60], 1
; Line 1279
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 212				; 000000d4H
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN57@UpdateArch
; Line 1280
	mov	eax, DWORD PTR _options$[ebp]
	add	eax, 212				; 000000d4H
	push	eax
	mov	ecx, DWORD PTR _ap$75486[ebp]
	add	ecx, 64					; 00000040H
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
; Line 1281
	jmp	SHORT $LN56@UpdateArch
$LN57@UpdateArch:
; Line 1282
	mov	ecx, DWORD PTR _ap$75486[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	ecx, DWORD PTR _ap$75486[ebp]
	add	ecx, 64					; 00000040H
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
$LN56@UpdateArch:
; Line 1283
	mov	edx, DWORD PTR _ap$75486[ebp]
	add	edx, 64					; 00000040H
	push	edx
	call	?NormalizeDirPathPrefix@NName@NFile@NWindows@@YGXAAVUString@@@Z ; NWindows::NFile::NName::NormalizeDirPathPrefix
$LN60@UpdateArch:
; Line 1288
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN55@UpdateArch
$LN54@UpdateArch:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN55@UpdateArch:
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 56					; 00000038H
	call	?Size@?$CObjectVector@UCUpdateArchiveCommand@@@@QBEIXZ ; CObjectVector<CUpdateArchiveCommand>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	$LN53@UpdateArch
; Line 1290
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 56					; 00000038H
	call	??A?$CObjectVector@UCUpdateArchiveCommand@@@@QAEAAUCUpdateArchiveCommand@@I@Z ; CObjectVector<CUpdateArchiveCommand>::operator[]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _ap$75495[ebp], eax
; Line 1291
	movzx	edx, BYTE PTR _usesTempDir$[ebp]
	test	edx, edx
	je	SHORT $LN52@UpdateArch
; Line 1294
	lea	eax, DWORD PTR _tempDirPrefix$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ap$75495[ebp]
	add	ecx, 12					; 0000000cH
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
$LN52@UpdateArch:
; Line 1299
	mov	ecx, DWORD PTR _options$[ebp]
	movzx	edx, BYTE PTR [ecx+196]
	test	edx, edx
	jne	$LN51@UpdateArch
	cmp	DWORD PTR _i$[ebp], 0
	ja	SHORT $LN50@UpdateArch
	movzx	eax, BYTE PTR _createTempFile$[ebp]
	test	eax, eax
	jne	$LN51@UpdateArch
$LN50@UpdateArch:
; Line 1301
	lea	ecx, DWORD PTR _path$75499[ebp]
	push	ecx
	mov	ecx, DWORD PTR _ap$75495[ebp]
	call	?GetFinalPath@CArchivePath@@QBE?AVUString@@XZ ; CArchivePath::GetFinalPath
	mov	BYTE PTR __$EHRec$[ebp+12], 19		; 00000013H
; Line 1302
	lea	ecx, DWORD PTR _path$75499[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	?DoesFileOrDirExist@NFind@NFile@NWindows@@YG_NPB_W@Z ; NWindows::NFile::NFind::DoesFileOrDirExist
	movzx	edx, al
	test	edx, edx
	je	$LN49@UpdateArch
; Line 1304
	mov	eax, DWORD PTR _errorInfo$[ebp]
	mov	DWORD PTR [eax], 80			; 00000050H
; Line 1305
	push	OFFSET $SG75502
	mov	ecx, DWORD PTR _errorInfo$[ebp]
	add	ecx, 4
	call	??4AString@@QAEAAV0@PBD@Z		; AString::operator=
; Line 1306
	lea	ecx, DWORD PTR _path$75499[ebp]
	push	ecx
	mov	ecx, DWORD PTR _errorInfo$[ebp]
	add	ecx, 16					; 00000010H
	call	?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z ; CObjectVector<UString>::Add
; Line 1307
	mov	ecx, DWORD PTR _errorInfo$[ebp]
	call	?Get_HRESULT_Error@CUpdateErrorInfo@@QBEJXZ ; CUpdateErrorInfo::Get_HRESULT_Error
	mov	DWORD PTR $T77504[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 18		; 00000012H
	lea	ecx, DWORD PTR _path$75499[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 17		; 00000011H
	lea	ecx, DWORD PTR _tempFiles$[ebp]
	call	??1CTempFiles@@QAE@XZ			; CTempFiles::~CTempFiles
	mov	BYTE PTR __$EHRec$[ebp+12], 16		; 00000010H
	lea	ecx, DWORD PTR _tempDirectory$[ebp]
	call	??1CTempDir@NDir@NFile@NWindows@@QAE@XZ	; NWindows::NFile::NDir::CTempDir::~CTempDir
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR _tempDirPrefix$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 11		; 0000000bH
	lea	ecx, DWORD PTR _parentDirItem$[ebp]
	call	??1CDirItem@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 5
	lea	ecx, DWORD PTR _dirItems$[ebp]
	call	??1CDirItems@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _arcPath$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _arcLink$[ebp]
	call	??1CArchiveLink@@QAE@XZ			; CArchiveLink::~CArchiveLink
	mov	eax, DWORD PTR $T77504[ebp]
	jmp	$LN123@UpdateArch
$LN49@UpdateArch:
; Line 1309
	mov	BYTE PTR __$EHRec$[ebp+12], 18		; 00000012H
	lea	ecx, DWORD PTR _path$75499[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
$LN51@UpdateArch:
; Line 1310
	jmp	$LN54@UpdateArch
$LN53@UpdateArch:
; Line 1312
	lea	ecx, DWORD PTR _arcItems$[ebp]
	call	??0?$CObjectVector@UCArcItem@@@@QAE@XZ	; CObjectVector<CArcItem>::CObjectVector<CArcItem>
	mov	BYTE PTR __$EHRec$[ebp+12], 20		; 00000014H
; Line 1313
	movzx	edx, BYTE PTR _thereIsInArchive$[ebp]
	test	edx, edx
	je	$LN48@UpdateArch
; Line 1317
	lea	eax, DWORD PTR _arcItems$[ebp]
	push	eax
	lea	ecx, DWORD PTR _arcLink$[ebp]
	call	?Back@?$CObjectVector@VCArc@@@@QAEAAVCArc@@XZ ; CObjectVector<CArc>::Back
	push	eax
	mov	ecx, DWORD PTR _censor$[ebp]
	push	ecx
	call	?EnumerateInArchiveItems@@YGJABVCCensor@NWildcard@@ABVCArc@@AAV?$CObjectVector@UCArcItem@@@@@Z ; EnumerateInArchiveItems
	mov	DWORD PTR ___result__$75507[ebp], eax
	cmp	DWORD PTR ___result__$75507[ebp], 0
	je	$LN48@UpdateArch
	mov	edx, DWORD PTR ___result__$75507[ebp]
	mov	DWORD PTR $T77505[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 18		; 00000012H
	lea	ecx, DWORD PTR _arcItems$[ebp]
	call	??1?$CObjectVector@UCArcItem@@@@QAE@XZ	; CObjectVector<CArcItem>::~CObjectVector<CArcItem>
	mov	BYTE PTR __$EHRec$[ebp+12], 17		; 00000011H
	lea	ecx, DWORD PTR _tempFiles$[ebp]
	call	??1CTempFiles@@QAE@XZ			; CTempFiles::~CTempFiles
	mov	BYTE PTR __$EHRec$[ebp+12], 16		; 00000010H
	lea	ecx, DWORD PTR _tempDirectory$[ebp]
	call	??1CTempDir@NDir@NFile@NWindows@@QAE@XZ	; NWindows::NFile::NDir::CTempDir::~CTempDir
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR _tempDirPrefix$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 11		; 0000000bH
	lea	ecx, DWORD PTR _parentDirItem$[ebp]
	call	??1CDirItem@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 5
	lea	ecx, DWORD PTR _dirItems$[ebp]
	call	??1CDirItems@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _arcPath$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _arcLink$[ebp]
	call	??1CArchiveLink@@QAE@XZ			; CArchiveLink::~CArchiveLink
	mov	eax, DWORD PTR $T77505[ebp]
	jmp	$LN123@UpdateArch
$LN48@UpdateArch:
; Line 1327
	lea	ecx, DWORD PTR _processedItems$[ebp]
	call	??0?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::CBuffer<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+12], 21		; 00000015H
; Line 1328
	mov	eax, DWORD PTR _options$[ebp]
	movzx	ecx, BYTE PTR [eax+248]
	test	ecx, ecx
	je	SHORT $LN46@UpdateArch
; Line 1330
	lea	ecx, DWORD PTR _dirItems$[ebp+36]
	call	?Size@?$CObjectVector@UCDirItem@@@@QBEIXZ ; CObjectVector<CDirItem>::Size
	mov	DWORD PTR _num$75512[ebp], eax
; Line 1331
	mov	edx, DWORD PTR _num$75512[ebp]
	push	edx
	lea	ecx, DWORD PTR _processedItems$[ebp]
	call	?Alloc@?$CBuffer@E@@QAEXI@Z		; CBuffer<unsigned char>::Alloc
; Line 1332
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN45@UpdateArch
$LN44@UpdateArch:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN45@UpdateArch:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _num$75512[ebp]
	jae	SHORT $LN46@UpdateArch
; Line 1333
	lea	ecx, DWORD PTR _processedItems$[ebp]
	call	??B?$CBuffer@E@@QAEPAEXZ		; CBuffer<unsigned char>::operator unsigned char *
	mov	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [eax+edx], 0
	jmp	SHORT $LN44@UpdateArch
$LN46@UpdateArch:
; Line 1346
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN42@UpdateArch
$LN41@UpdateArch:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN42@UpdateArch:
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 56					; 00000038H
	call	?Size@?$CObjectVector@UCUpdateArchiveCommand@@@@QBEIXZ ; CObjectVector<CUpdateArchiveCommand>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	$LN40@UpdateArch
; Line 1348
	movzx	ecx, BYTE PTR _thereIsInArchive$[ebp]
	test	ecx, ecx
	je	SHORT $LN126@UpdateArch
	lea	ecx, DWORD PTR _arcLink$[ebp]
	call	?GetArc@CArchiveLink@@QBEPBVCArc@@XZ	; CArchiveLink::GetArc
	mov	DWORD PTR tv789[ebp], eax
	jmp	SHORT $LN127@UpdateArch
$LN126@UpdateArch:
	mov	DWORD PTR tv789[ebp], 0
$LN127@UpdateArch:
	mov	edx, DWORD PTR tv789[ebp]
	mov	DWORD PTR _arc$75519[ebp], edx
; Line 1349
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 56					; 00000038H
	call	??A?$CObjectVector@UCUpdateArchiveCommand@@@@QAEAAUCUpdateArchiveCommand@@I@Z ; CObjectVector<CUpdateArchiveCommand>::operator[]
	mov	DWORD PTR _command$75520[ebp], eax
; Line 1350
	lea	ecx, DWORD PTR _name$75521[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+12], 22		; 00000016H
; Line 1353
	mov	ecx, DWORD PTR _options$[ebp]
	movzx	edx, BYTE PTR [ecx+196]
	test	edx, edx
	je	SHORT $LN39@UpdateArch
; Line 1355
	push	OFFSET $SG75524
	lea	ecx, DWORD PTR _name$75521[ebp]
	call	?SetFromAscii@UString@@QAEXPBD@Z	; UString::SetFromAscii
; Line 1356
	mov	al, BYTE PTR _thereIsInArchive$[ebp]
	mov	BYTE PTR _isUpdating$75522[ebp], al
; Line 1358
	jmp	$LN38@UpdateArch
$LN39@UpdateArch:
; Line 1360
	lea	ecx, DWORD PTR $T77508[ebp]
	push	ecx
	mov	ecx, DWORD PTR _command$75520[ebp]
	add	ecx, 12					; 0000000cH
	call	?GetFinalPath@CArchivePath@@QBE?AVUString@@XZ ; CArchivePath::GetFinalPath
	mov	DWORD PTR tv795[ebp], eax
	mov	edx, DWORD PTR tv795[ebp]
	mov	DWORD PTR tv1280[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 23		; 00000017H
	mov	eax, DWORD PTR tv1280[ebp]
	push	eax
	lea	ecx, DWORD PTR _name$75521[ebp]
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
	mov	BYTE PTR __$EHRec$[ebp+12], 22		; 00000016H
	lea	ecx, DWORD PTR $T77508[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
; Line 1361
	cmp	DWORD PTR _i$[ebp], 0
	jne	SHORT $LN128@UpdateArch
	mov	ecx, DWORD PTR _options$[ebp]
	movzx	edx, BYTE PTR [ecx+68]
	test	edx, edx
	je	SHORT $LN128@UpdateArch
	movzx	eax, BYTE PTR _thereIsInArchive$[ebp]
	test	eax, eax
	je	SHORT $LN128@UpdateArch
	mov	DWORD PTR tv816[ebp], 1
	jmp	SHORT $LN129@UpdateArch
$LN128@UpdateArch:
	mov	DWORD PTR tv816[ebp], 0
$LN129@UpdateArch:
	mov	cl, BYTE PTR tv816[ebp]
	mov	BYTE PTR _isUpdating$75522[ebp], cl
$LN38@UpdateArch:
; Line 1364
	mov	esi, esp
	movzx	edx, BYTE PTR _isUpdating$75522[ebp]
	push	edx
	lea	ecx, DWORD PTR _name$75521[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	mov	eax, DWORD PTR _callback$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _callback$[ebp]
	mov	eax, DWORD PTR [edx+76]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$75527[ebp], eax
	cmp	DWORD PTR ___result__$75527[ebp], 0
	je	$LN37@UpdateArch
	mov	ecx, DWORD PTR ___result__$75527[ebp]
	mov	DWORD PTR $T77511[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 21		; 00000015H
	lea	ecx, DWORD PTR _name$75521[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 20		; 00000014H
	lea	ecx, DWORD PTR _processedItems$[ebp]
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+12], 18		; 00000012H
	lea	ecx, DWORD PTR _arcItems$[ebp]
	call	??1?$CObjectVector@UCArcItem@@@@QAE@XZ	; CObjectVector<CArcItem>::~CObjectVector<CArcItem>
	mov	BYTE PTR __$EHRec$[ebp+12], 17		; 00000011H
	lea	ecx, DWORD PTR _tempFiles$[ebp]
	call	??1CTempFiles@@QAE@XZ			; CTempFiles::~CTempFiles
	mov	BYTE PTR __$EHRec$[ebp+12], 16		; 00000010H
	lea	ecx, DWORD PTR _tempDirectory$[ebp]
	call	??1CTempDir@NDir@NFile@NWindows@@QAE@XZ	; NWindows::NFile::NDir::CTempDir::~CTempDir
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR _tempDirPrefix$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 11		; 0000000bH
	lea	ecx, DWORD PTR _parentDirItem$[ebp]
	call	??1CDirItem@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 5
	lea	ecx, DWORD PTR _dirItems$[ebp]
	call	??1CDirItems@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _arcPath$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _arcLink$[ebp]
	call	??1CArchiveLink@@QAE@XZ			; CArchiveLink::~CArchiveLink
	mov	eax, DWORD PTR $T77511[ebp]
	jmp	$LN123@UpdateArch
$LN37@UpdateArch:
; Line 1366
	lea	ecx, DWORD PTR _st$75530[ebp]
	call	??0CFinishArchiveStat@@QAE@XZ		; CFinishArchiveStat::CFinishArchiveStat
; Line 1381
	mov	edx, DWORD PTR _options$[ebp]
	movzx	eax, BYTE PTR [edx+248]
	test	eax, eax
	je	SHORT $LN130@UpdateArch
	lea	ecx, DWORD PTR _processedItems$[ebp]
	call	??B?$CBuffer@E@@QAEPAEXZ		; CBuffer<unsigned char>::operator unsigned char *
	mov	DWORD PTR tv844[ebp], eax
	jmp	SHORT $LN131@UpdateArch
$LN130@UpdateArch:
	mov	DWORD PTR tv844[ebp], 0
$LN131@UpdateArch:
	lea	ecx, DWORD PTR _st$75530[ebp]
	push	ecx
	mov	edx, DWORD PTR _callback$[ebp]
	push	edx
	mov	eax, DWORD PTR _errorInfo$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tempFiles$[ebp]
	push	ecx
	mov	edx, DWORD PTR _parentDirItem_Ptr$[ebp]
	push	edx
	lea	eax, DWORD PTR _dirItems$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv844[ebp]
	push	ecx
	lea	edx, DWORD PTR _arcItems$[ebp]
	push	edx
	mov	eax, DWORD PTR _command$75520[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _arc$75519[ebp]
	push	ecx
	mov	edx, DWORD PTR _command$75520[ebp]
	add	edx, 100				; 00000064H
	push	edx
	mov	eax, DWORD PTR _codecs$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _isUpdating$75522[ebp]
	push	ecx
	mov	edx, DWORD PTR _options$[ebp]
	push	edx
	call	?Compress@@YGJABUCUpdateOptions@@_NPAVCCodecs@@ABUCActionSet@NUpdateArchive@@PBVCArc@@AAUCArchivePath@@ABV?$CObjectVector@UCArcItem@@@@PAEABVCDirItems@@PBUCDirItem@@AAVCTempFiles@@AAUCUpdateErrorInfo@@PAUIUpdateCallbackUI@@AAUCFinishArchiveStat@@@Z ; Compress
	mov	DWORD PTR ___result__$75531[ebp], eax
	cmp	DWORD PTR ___result__$75531[ebp], 0
	je	$LN36@UpdateArch
	mov	eax, DWORD PTR ___result__$75531[ebp]
	mov	DWORD PTR $T77514[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 21		; 00000015H
	lea	ecx, DWORD PTR _name$75521[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 20		; 00000014H
	lea	ecx, DWORD PTR _processedItems$[ebp]
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+12], 18		; 00000012H
	lea	ecx, DWORD PTR _arcItems$[ebp]
	call	??1?$CObjectVector@UCArcItem@@@@QAE@XZ	; CObjectVector<CArcItem>::~CObjectVector<CArcItem>
	mov	BYTE PTR __$EHRec$[ebp+12], 17		; 00000011H
	lea	ecx, DWORD PTR _tempFiles$[ebp]
	call	??1CTempFiles@@QAE@XZ			; CTempFiles::~CTempFiles
	mov	BYTE PTR __$EHRec$[ebp+12], 16		; 00000010H
	lea	ecx, DWORD PTR _tempDirectory$[ebp]
	call	??1CTempDir@NDir@NFile@NWindows@@QAE@XZ	; NWindows::NFile::NDir::CTempDir::~CTempDir
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR _tempDirPrefix$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 11		; 0000000bH
	lea	ecx, DWORD PTR _parentDirItem$[ebp]
	call	??1CDirItem@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 5
	lea	ecx, DWORD PTR _dirItems$[ebp]
	call	??1CDirItems@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _arcPath$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _arcLink$[ebp]
	call	??1CArchiveLink@@QAE@XZ			; CArchiveLink::~CArchiveLink
	mov	eax, DWORD PTR $T77514[ebp]
	jmp	$LN123@UpdateArch
$LN36@UpdateArch:
; Line 1383
	mov	esi, esp
	lea	ecx, DWORD PTR _st$75530[ebp]
	push	ecx
	mov	edx, DWORD PTR _callback$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _callback$[ebp]
	mov	edx, DWORD PTR [eax+80]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$75535[ebp], eax
	cmp	DWORD PTR ___result__$75535[ebp], 0
	je	$LN35@UpdateArch
	mov	eax, DWORD PTR ___result__$75535[ebp]
	mov	DWORD PTR $T77515[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 21		; 00000015H
	lea	ecx, DWORD PTR _name$75521[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 20		; 00000014H
	lea	ecx, DWORD PTR _processedItems$[ebp]
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+12], 18		; 00000012H
	lea	ecx, DWORD PTR _arcItems$[ebp]
	call	??1?$CObjectVector@UCArcItem@@@@QAE@XZ	; CObjectVector<CArcItem>::~CObjectVector<CArcItem>
	mov	BYTE PTR __$EHRec$[ebp+12], 17		; 00000011H
	lea	ecx, DWORD PTR _tempFiles$[ebp]
	call	??1CTempFiles@@QAE@XZ			; CTempFiles::~CTempFiles
	mov	BYTE PTR __$EHRec$[ebp+12], 16		; 00000010H
	lea	ecx, DWORD PTR _tempDirectory$[ebp]
	call	??1CTempDir@NDir@NFile@NWindows@@QAE@XZ	; NWindows::NFile::NDir::CTempDir::~CTempDir
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR _tempDirPrefix$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 11		; 0000000bH
	lea	ecx, DWORD PTR _parentDirItem$[ebp]
	call	??1CDirItem@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 5
	lea	ecx, DWORD PTR _dirItems$[ebp]
	call	??1CDirItems@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _arcPath$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _arcLink$[ebp]
	call	??1CArchiveLink@@QAE@XZ			; CArchiveLink::~CArchiveLink
	mov	eax, DWORD PTR $T77515[ebp]
	jmp	$LN123@UpdateArch
$LN35@UpdateArch:
; Line 1384
	mov	BYTE PTR __$EHRec$[ebp+12], 21		; 00000015H
	lea	ecx, DWORD PTR _name$75521[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	jmp	$LN41@UpdateArch
$LN40@UpdateArch:
; Line 1387
	movzx	ecx, BYTE PTR _thereIsInArchive$[ebp]
	test	ecx, ecx
	je	$LN34@UpdateArch
; Line 1389
	lea	ecx, DWORD PTR _arcLink$[ebp]
	call	?Close@CArchiveLink@@QAEJXZ		; CArchiveLink::Close
	mov	DWORD PTR ___result__$75539[ebp], eax
	cmp	DWORD PTR ___result__$75539[ebp], 0
	je	$LN33@UpdateArch
	mov	edx, DWORD PTR ___result__$75539[ebp]
	mov	DWORD PTR $T77516[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 20		; 00000014H
	lea	ecx, DWORD PTR _processedItems$[ebp]
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+12], 18		; 00000012H
	lea	ecx, DWORD PTR _arcItems$[ebp]
	call	??1?$CObjectVector@UCArcItem@@@@QAE@XZ	; CObjectVector<CArcItem>::~CObjectVector<CArcItem>
	mov	BYTE PTR __$EHRec$[ebp+12], 17		; 00000011H
	lea	ecx, DWORD PTR _tempFiles$[ebp]
	call	??1CTempFiles@@QAE@XZ			; CTempFiles::~CTempFiles
	mov	BYTE PTR __$EHRec$[ebp+12], 16		; 00000010H
	lea	ecx, DWORD PTR _tempDirectory$[ebp]
	call	??1CTempDir@NDir@NFile@NWindows@@QAE@XZ	; NWindows::NFile::NDir::CTempDir::~CTempDir
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR _tempDirPrefix$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 11		; 0000000bH
	lea	ecx, DWORD PTR _parentDirItem$[ebp]
	call	??1CDirItem@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 5
	lea	ecx, DWORD PTR _dirItems$[ebp]
	call	??1CDirItems@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _arcPath$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _arcLink$[ebp]
	call	??1CArchiveLink@@QAE@XZ			; CArchiveLink::~CArchiveLink
	mov	eax, DWORD PTR $T77516[ebp]
	jmp	$LN123@UpdateArch
$LN33@UpdateArch:
; Line 1390
	lea	ecx, DWORD PTR _arcLink$[ebp]
	call	?Release@CArchiveLink@@QAEXXZ		; CArchiveLink::Release
$LN34@UpdateArch:
; Line 1393
	lea	ecx, DWORD PTR _tempFiles$[ebp]
	call	?Clear@?$CObjectVector@VUString@@@@QAEXXZ ; CObjectVector<UString>::Clear
; Line 1394
	movzx	eax, BYTE PTR _createTempFile$[ebp]
	test	eax, eax
	je	$LN32@UpdateArch
; Line 1397
	mov	BYTE PTR __$EHRec$[ebp+12], 24		; 00000018H
; Line 1398
	push	0
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 56					; 00000038H
	call	??A?$CObjectVector@UCUpdateArchiveCommand@@@@QAEAAUCUpdateArchiveCommand@@I@Z ; CObjectVector<CUpdateArchiveCommand>::operator[]
	mov	DWORD PTR tv734[ebp], eax
	mov	ecx, DWORD PTR tv734[ebp]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR _ap$75544[ebp], ecx
; Line 1399
	lea	edx, DWORD PTR _$S1$75547[ebp]
	push	edx
	mov	ecx, DWORD PTR _ap$75544[ebp]
	call	?GetTempPathA@CArchivePath@@QBE?AVUString@@XZ ; CArchivePath::GetTempPathA
	mov	DWORD PTR tv722[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 25		; 00000019H
	lea	eax, DWORD PTR _$S1$75547[ebp]
	mov	DWORD PTR _tempPath$75545[ebp], eax
; Line 1401
	movzx	ecx, BYTE PTR _thereIsInArchive$[ebp]
	test	ecx, ecx
	je	$LN30@UpdateArch
; Line 1402
	lea	ecx, DWORD PTR _arcPath$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	DWORD PTR tv704[ebp], eax
	mov	edx, DWORD PTR tv704[ebp]
	push	edx
	call	?DeleteFileAlways@NDir@NFile@NWindows@@YG_NPB_W@Z ; NWindows::NFile::NDir::DeleteFileAlways
	mov	BYTE PTR tv637[ebp], al
	movzx	eax, BYTE PTR tv637[ebp]
	test	eax, eax
	jne	$LN30@UpdateArch
; Line 1403
	lea	ecx, DWORD PTR _arcPath$[ebp]
	push	ecx
	push	OFFSET $SG75551
	mov	ecx, DWORD PTR _errorInfo$[ebp]
	call	?SetFromLastError@CUpdateErrorInfo@@QAEJPBDABVUString@@@Z ; CUpdateErrorInfo::SetFromLastError
	mov	DWORD PTR tv621[ebp], eax
	mov	edx, DWORD PTR tv621[ebp]
	mov	DWORD PTR $T77517[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 24		; 00000018H
	lea	ecx, DWORD PTR _$S1$75547[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 20		; 00000014H
	lea	ecx, DWORD PTR _processedItems$[ebp]
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+12], 18		; 00000012H
	lea	ecx, DWORD PTR _arcItems$[ebp]
	call	??1?$CObjectVector@UCArcItem@@@@QAE@XZ	; CObjectVector<CArcItem>::~CObjectVector<CArcItem>
	mov	BYTE PTR __$EHRec$[ebp+12], 17		; 00000011H
	lea	ecx, DWORD PTR _tempFiles$[ebp]
	call	??1CTempFiles@@QAE@XZ			; CTempFiles::~CTempFiles
	mov	BYTE PTR __$EHRec$[ebp+12], 16		; 00000010H
	lea	ecx, DWORD PTR _tempDirectory$[ebp]
	call	??1CTempDir@NDir@NFile@NWindows@@QAE@XZ	; NWindows::NFile::NDir::CTempDir::~CTempDir
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR _tempDirPrefix$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 11		; 0000000bH
	lea	ecx, DWORD PTR _parentDirItem$[ebp]
	call	??1CDirItem@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 5
	lea	ecx, DWORD PTR _dirItems$[ebp]
	call	??1CDirItems@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _arcPath$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _arcLink$[ebp]
	call	??1CArchiveLink@@QAE@XZ			; CArchiveLink::~CArchiveLink
	mov	eax, DWORD PTR $T77517[ebp]
	jmp	$LN123@UpdateArch
$LN30@UpdateArch:
; Line 1405
	lea	ecx, DWORD PTR _arcPath$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	DWORD PTR tv618[ebp], eax
	mov	ecx, DWORD PTR _tempPath$75545[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	DWORD PTR tv562[ebp], eax
	mov	eax, DWORD PTR tv618[ebp]
	push	eax
	mov	ecx, DWORD PTR tv562[ebp]
	push	ecx
	call	?MyMoveFile@NDir@NFile@NWindows@@YG_NPB_W0@Z ; NWindows::NFile::NDir::MyMoveFile
	mov	BYTE PTR tv559[ebp], al
	movzx	edx, BYTE PTR tv559[ebp]
	test	edx, edx
	jne	$LN28@UpdateArch
; Line 1407
	mov	eax, DWORD PTR _tempPath$75545[ebp]
	push	eax
	push	OFFSET $SG75553
	mov	ecx, DWORD PTR _errorInfo$[ebp]
	call	?SetFromLastError@CUpdateErrorInfo@@QAEJPBDABVUString@@@Z ; CUpdateErrorInfo::SetFromLastError
; Line 1408
	lea	ecx, DWORD PTR _arcPath$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _errorInfo$[ebp]
	add	ecx, 16					; 00000010H
	call	?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z ; CObjectVector<UString>::Add
; Line 1409
	mov	ecx, DWORD PTR _errorInfo$[ebp]
	call	?Get_HRESULT_Error@CUpdateErrorInfo@@QBEJXZ ; CUpdateErrorInfo::Get_HRESULT_Error
	mov	DWORD PTR tv468[ebp], eax
	mov	edx, DWORD PTR tv468[ebp]
	mov	DWORD PTR $T77518[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 24		; 00000018H
	lea	ecx, DWORD PTR _$S1$75547[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 20		; 00000014H
	lea	ecx, DWORD PTR _processedItems$[ebp]
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+12], 18		; 00000012H
	lea	ecx, DWORD PTR _arcItems$[ebp]
	call	??1?$CObjectVector@UCArcItem@@@@QAE@XZ	; CObjectVector<CArcItem>::~CObjectVector<CArcItem>
	mov	BYTE PTR __$EHRec$[ebp+12], 17		; 00000011H
	lea	ecx, DWORD PTR _tempFiles$[ebp]
	call	??1CTempFiles@@QAE@XZ			; CTempFiles::~CTempFiles
	mov	BYTE PTR __$EHRec$[ebp+12], 16		; 00000010H
	lea	ecx, DWORD PTR _tempDirectory$[ebp]
	call	??1CTempDir@NDir@NFile@NWindows@@QAE@XZ	; NWindows::NFile::NDir::CTempDir::~CTempDir
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR _tempDirPrefix$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 11		; 0000000bH
	lea	ecx, DWORD PTR _parentDirItem$[ebp]
	call	??1CDirItem@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 5
	lea	ecx, DWORD PTR _dirItems$[ebp]
	call	??1CDirItems@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _arcPath$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _arcLink$[ebp]
	call	??1CArchiveLink@@QAE@XZ			; CArchiveLink::~CArchiveLink
	mov	eax, DWORD PTR $T77518[ebp]
	jmp	$LN123@UpdateArch
$LN28@UpdateArch:
; Line 1411
	mov	BYTE PTR __$EHRec$[ebp+12], 24		; 00000018H
	lea	ecx, DWORD PTR _$S1$75547[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	jmp	SHORT $LN132@UpdateArch
__catch$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$0:
; Line 1414
	push	0
	push	0
	call	__CxxThrowException@8
; Line 1415
	mov	DWORD PTR __$EHRec$[ebp+12], 21		; 00000015H
	mov	eax, $LN32@UpdateArch
	ret	0
$LN132@UpdateArch:
	mov	DWORD PTR __$EHRec$[ebp+12], 21		; 00000015H
$LN32@UpdateArch:
; Line 1421
	mov	eax, DWORD PTR _options$[ebp]
	movzx	ecx, BYTE PTR [eax+197]
	test	ecx, ecx
	je	$LN27@UpdateArch
; Line 1423
	lea	ecx, DWORD PTR _mapiLib$75556[ebp]
	call	??0CLibrary@NDLL@NWindows@@QAE@XZ	; NWindows::NDLL::CLibrary::CLibrary
	mov	BYTE PTR __$EHRec$[ebp+12], 27		; 0000001bH
; Line 1424
	push	OFFSET $SG75558
	lea	ecx, DWORD PTR _mapiLib$75556[ebp]
	call	?Load@CLibrary@NDLL@NWindows@@QAE_NPB_W@Z ; NWindows::NDLL::CLibrary::Load
	movzx	edx, al
	test	edx, edx
	jne	$LN26@UpdateArch
; Line 1426
	push	OFFSET $SG75559
	mov	ecx, DWORD PTR _errorInfo$[ebp]
	call	?SetFromLastError@CUpdateErrorInfo@@QAEXPBD@Z ; CUpdateErrorInfo::SetFromLastError
; Line 1427
	mov	ecx, DWORD PTR _errorInfo$[ebp]
	call	?Get_HRESULT_Error@CUpdateErrorInfo@@QBEJXZ ; CUpdateErrorInfo::Get_HRESULT_Error
	mov	DWORD PTR $T77519[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 21		; 00000015H
	lea	ecx, DWORD PTR _mapiLib$75556[ebp]
	call	??1CLibrary@NDLL@NWindows@@QAE@XZ	; NWindows::NDLL::CLibrary::~CLibrary
	mov	BYTE PTR __$EHRec$[ebp+12], 20		; 00000014H
	lea	ecx, DWORD PTR _processedItems$[ebp]
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+12], 18		; 00000012H
	lea	ecx, DWORD PTR _arcItems$[ebp]
	call	??1?$CObjectVector@UCArcItem@@@@QAE@XZ	; CObjectVector<CArcItem>::~CObjectVector<CArcItem>
	mov	BYTE PTR __$EHRec$[ebp+12], 17		; 00000011H
	lea	ecx, DWORD PTR _tempFiles$[ebp]
	call	??1CTempFiles@@QAE@XZ			; CTempFiles::~CTempFiles
	mov	BYTE PTR __$EHRec$[ebp+12], 16		; 00000010H
	lea	ecx, DWORD PTR _tempDirectory$[ebp]
	call	??1CTempDir@NDir@NFile@NWindows@@QAE@XZ	; NWindows::NFile::NDir::CTempDir::~CTempDir
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR _tempDirPrefix$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 11		; 0000000bH
	lea	ecx, DWORD PTR _parentDirItem$[ebp]
	call	??1CDirItem@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 5
	lea	ecx, DWORD PTR _dirItems$[ebp]
	call	??1CDirItems@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _arcPath$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _arcLink$[ebp]
	call	??1CArchiveLink@@QAE@XZ			; CArchiveLink::~CArchiveLink
	mov	eax, DWORD PTR $T77519[ebp]
	jmp	$LN123@UpdateArch
$LN26@UpdateArch:
; Line 1439
	push	OFFSET $SG75563
	lea	ecx, DWORD PTR _mapiLib$75556[ebp]
	call	?GetProc@CLibrary@NDLL@NWindows@@QBEP6GHXZPBD@Z ; NWindows::NDLL::CLibrary::GetProc
	mov	DWORD PTR _sendMail$75561[ebp], eax
; Line 1440
	cmp	DWORD PTR _sendMail$75561[ebp], 0
	jne	$LN25@UpdateArch
; Line 1442
	push	OFFSET $SG75565
	mov	ecx, DWORD PTR _errorInfo$[ebp]
	call	?SetFromLastError@CUpdateErrorInfo@@QAEXPBD@Z ; CUpdateErrorInfo::SetFromLastError
; Line 1443
	mov	ecx, DWORD PTR _errorInfo$[ebp]
	call	?Get_HRESULT_Error@CUpdateErrorInfo@@QBEJXZ ; CUpdateErrorInfo::Get_HRESULT_Error
	mov	DWORD PTR $T77520[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 21		; 00000015H
	lea	ecx, DWORD PTR _mapiLib$75556[ebp]
	call	??1CLibrary@NDLL@NWindows@@QAE@XZ	; NWindows::NDLL::CLibrary::~CLibrary
	mov	BYTE PTR __$EHRec$[ebp+12], 20		; 00000014H
	lea	ecx, DWORD PTR _processedItems$[ebp]
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+12], 18		; 00000012H
	lea	ecx, DWORD PTR _arcItems$[ebp]
	call	??1?$CObjectVector@UCArcItem@@@@QAE@XZ	; CObjectVector<CArcItem>::~CObjectVector<CArcItem>
	mov	BYTE PTR __$EHRec$[ebp+12], 17		; 00000011H
	lea	ecx, DWORD PTR _tempFiles$[ebp]
	call	??1CTempFiles@@QAE@XZ			; CTempFiles::~CTempFiles
	mov	BYTE PTR __$EHRec$[ebp+12], 16		; 00000010H
	lea	ecx, DWORD PTR _tempDirectory$[ebp]
	call	??1CTempDir@NDir@NFile@NWindows@@QAE@XZ	; NWindows::NFile::NDir::CTempDir::~CTempDir
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR _tempDirPrefix$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 11		; 0000000bH
	lea	ecx, DWORD PTR _parentDirItem$[ebp]
	call	??1CDirItem@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 5
	lea	ecx, DWORD PTR _dirItems$[ebp]
	call	??1CDirItems@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _arcPath$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _arcLink$[ebp]
	call	??1CArchiveLink@@QAE@XZ			; CArchiveLink::~CArchiveLink
	mov	eax, DWORD PTR $T77520[ebp]
	jmp	$LN123@UpdateArch
$LN25@UpdateArch:
; Line 1446
	lea	ecx, DWORD PTR _fullPaths$75567[ebp]
	call	??0?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::CObjectVector<UString>
	mov	BYTE PTR __$EHRec$[ebp+12], 28		; 0000001cH
; Line 1449
	mov	DWORD PTR _i$75568[ebp], 0
	jmp	SHORT $LN24@UpdateArch
$LN23@UpdateArch:
	mov	eax, DWORD PTR _i$75568[ebp]
	add	eax, 1
	mov	DWORD PTR _i$75568[ebp], eax
$LN24@UpdateArch:
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 56					; 00000038H
	call	?Size@?$CObjectVector@UCUpdateArchiveCommand@@@@QBEIXZ ; CObjectVector<CUpdateArchiveCommand>::Size
	cmp	DWORD PTR _i$75568[ebp], eax
	jae	$LN22@UpdateArch
; Line 1451
	mov	ecx, DWORD PTR _i$75568[ebp]
	push	ecx
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 56					; 00000038H
	call	??A?$CObjectVector@UCUpdateArchiveCommand@@@@QAEAAUCUpdateArchiveCommand@@I@Z ; CObjectVector<CUpdateArchiveCommand>::operator[]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _ap$75572[ebp], eax
; Line 1452
	lea	edx, DWORD PTR _finalPath$75573[ebp]
	push	edx
	mov	ecx, DWORD PTR _ap$75572[ebp]
	call	?GetFinalPath@CArchivePath@@QBE?AVUString@@XZ ; CArchivePath::GetFinalPath
	mov	BYTE PTR __$EHRec$[ebp+12], 29		; 0000001dH
; Line 1453
	lea	ecx, DWORD PTR _arcPath$75575[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+12], 30		; 0000001eH
; Line 1454
	lea	eax, DWORD PTR _arcPath$75575[ebp]
	push	eax
	lea	ecx, DWORD PTR _finalPath$75573[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	?MyGetFullPathName@NDir@NFile@NWindows@@YG_NPB_WAAVUString@@@Z ; NWindows::NFile::NDir::MyGetFullPathName
	movzx	ecx, al
	test	ecx, ecx
	jne	$LN21@UpdateArch
; Line 1455
	lea	edx, DWORD PTR _finalPath$75573[ebp]
	push	edx
	push	OFFSET $SG75578
	mov	ecx, DWORD PTR _errorInfo$[ebp]
	call	?SetFromLastError@CUpdateErrorInfo@@QAEJPBDABVUString@@@Z ; CUpdateErrorInfo::SetFromLastError
	mov	DWORD PTR $T77521[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 29		; 0000001dH
	lea	ecx, DWORD PTR _arcPath$75575[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 28		; 0000001cH
	lea	ecx, DWORD PTR _finalPath$75573[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 27		; 0000001bH
	lea	ecx, DWORD PTR _fullPaths$75567[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	BYTE PTR __$EHRec$[ebp+12], 21		; 00000015H
	lea	ecx, DWORD PTR _mapiLib$75556[ebp]
	call	??1CLibrary@NDLL@NWindows@@QAE@XZ	; NWindows::NDLL::CLibrary::~CLibrary
	mov	BYTE PTR __$EHRec$[ebp+12], 20		; 00000014H
	lea	ecx, DWORD PTR _processedItems$[ebp]
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+12], 18		; 00000012H
	lea	ecx, DWORD PTR _arcItems$[ebp]
	call	??1?$CObjectVector@UCArcItem@@@@QAE@XZ	; CObjectVector<CArcItem>::~CObjectVector<CArcItem>
	mov	BYTE PTR __$EHRec$[ebp+12], 17		; 00000011H
	lea	ecx, DWORD PTR _tempFiles$[ebp]
	call	??1CTempFiles@@QAE@XZ			; CTempFiles::~CTempFiles
	mov	BYTE PTR __$EHRec$[ebp+12], 16		; 00000010H
	lea	ecx, DWORD PTR _tempDirectory$[ebp]
	call	??1CTempDir@NDir@NFile@NWindows@@QAE@XZ	; NWindows::NFile::NDir::CTempDir::~CTempDir
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR _tempDirPrefix$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 11		; 0000000bH
	lea	ecx, DWORD PTR _parentDirItem$[ebp]
	call	??1CDirItem@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 5
	lea	ecx, DWORD PTR _dirItems$[ebp]
	call	??1CDirItems@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _arcPath$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _arcLink$[ebp]
	call	??1CArchiveLink@@QAE@XZ			; CArchiveLink::~CArchiveLink
	mov	eax, DWORD PTR $T77521[ebp]
	jmp	$LN123@UpdateArch
$LN21@UpdateArch:
; Line 1456
	lea	eax, DWORD PTR _arcPath$75575[ebp]
	push	eax
	lea	ecx, DWORD PTR _fullPaths$75567[ebp]
	call	?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z ; CObjectVector<UString>::Add
; Line 1457
	mov	BYTE PTR __$EHRec$[ebp+12], 29		; 0000001dH
	lea	ecx, DWORD PTR _arcPath$75575[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 28		; 0000001cH
	lea	ecx, DWORD PTR _finalPath$75573[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	jmp	$LN23@UpdateArch
$LN22@UpdateArch:
; Line 1459
	lea	ecx, DWORD PTR _curDirRestorer$75579[ebp]
	call	??0CCurrentDirRestorer@NDir@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NDir::CCurrentDirRestorer::CCurrentDirRestorer
	mov	BYTE PTR __$EHRec$[ebp+12], 31		; 0000001fH
; Line 1461
	mov	DWORD PTR _i$75568[ebp], 0
	jmp	SHORT $LN20@UpdateArch
$LN19@UpdateArch:
	mov	ecx, DWORD PTR _i$75568[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$75568[ebp], ecx
$LN20@UpdateArch:
	lea	ecx, DWORD PTR _fullPaths$75567[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	cmp	DWORD PTR _i$75568[ebp], eax
	jae	$LN18@UpdateArch
; Line 1463
	mov	edx, DWORD PTR _i$75568[ebp]
	push	edx
	lea	ecx, DWORD PTR _fullPaths$75567[ebp]
	call	??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[]
	push	eax
	lea	ecx, DWORD PTR _arcPath$75583[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+12], 32		; 00000020H
; Line 1464
	lea	eax, DWORD PTR _arcPath$75583[ebp]
	push	eax
	lea	ecx, DWORD PTR _fileName$75584[ebp]
	push	ecx
	call	?ExtractFileNameFromPath@@YG?AVUString@@ABV1@@Z ; ExtractFileNameFromPath
	mov	BYTE PTR __$EHRec$[ebp+12], 33		; 00000021H
; Line 1465
	lea	edx, DWORD PTR _arcPath$75583[ebp]
	push	edx
	lea	eax, DWORD PTR _path$75586[ebp]
	push	eax
	call	?GetAnsiString@@YG?AVAString@@ABVUString@@@Z ; GetAnsiString
	mov	BYTE PTR __$EHRec$[ebp+12], 34		; 00000022H
; Line 1466
	lea	ecx, DWORD PTR _fileName$75584[ebp]
	push	ecx
	lea	edx, DWORD PTR _name$75588[ebp]
	push	edx
	call	?GetAnsiString@@YG?AVAString@@ABVUString@@@Z ; GetAnsiString
	mov	BYTE PTR __$EHRec$[ebp+12], 35		; 00000023H
; Line 1471
	push	24					; 00000018H
	push	0
	lea	eax, DWORD PTR _f$75590[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 1472
	mov	DWORD PTR _f$75590[ebp+8], -1
; Line 1473
	lea	ecx, DWORD PTR _path$75586[ebp]
	call	??BAString@@QBEPBDXZ			; AString::operator char const *
	mov	DWORD PTR _f$75590[ebp+12], eax
; Line 1474
	lea	ecx, DWORD PTR _name$75588[ebp]
	call	??BAString@@QBEPBDXZ			; AString::operator char const *
	mov	DWORD PTR _f$75590[ebp+16], eax
; Line 1477
	push	48					; 00000030H
	push	0
	lea	ecx, DWORD PTR _m$75595[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 1478
	mov	DWORD PTR _m$75595[ebp+40], 1
; Line 1479
	lea	edx, DWORD PTR _f$75590[ebp]
	mov	DWORD PTR _m$75595[ebp+44], edx
; Line 1481
	mov	eax, DWORD PTR _options$[ebp]
	add	eax, 200				; 000000c8H
	push	eax
	lea	ecx, DWORD PTR _addr$75596[ebp]
	push	ecx
	call	?GetAnsiString@@YG?AVAString@@ABVUString@@@Z ; GetAnsiString
	mov	BYTE PTR __$EHRec$[ebp+12], 36		; 00000024H
; Line 1483
	lea	ecx, DWORD PTR _addr$75596[ebp]
	call	?IsEmpty@AString@@QBE_NXZ		; AString::IsEmpty
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN17@UpdateArch
; Line 1485
	push	24					; 00000018H
	push	0
	lea	eax, DWORD PTR _rec$75598[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 1486
	mov	DWORD PTR _rec$75598[ebp+4], 1
; Line 1487
	lea	ecx, DWORD PTR _addr$75596[ebp]
	call	??BAString@@QBEPBDXZ			; AString::operator char const *
	mov	DWORD PTR _rec$75598[ebp+12], eax
; Line 1488
	mov	DWORD PTR _m$75595[ebp+32], 1
; Line 1489
	lea	ecx, DWORD PTR _rec$75598[ebp]
	mov	DWORD PTR _m$75595[ebp+36], ecx
$LN17@UpdateArch:
; Line 1492
	mov	esi, esp
	push	0
	push	8
	lea	edx, DWORD PTR _m$75595[ebp]
	push	edx
	push	0
	push	0
	call	DWORD PTR _sendMail$75561[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1493
	mov	BYTE PTR __$EHRec$[ebp+12], 35		; 00000023H
	lea	ecx, DWORD PTR _addr$75596[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	BYTE PTR __$EHRec$[ebp+12], 34		; 00000022H
	lea	ecx, DWORD PTR _name$75588[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	BYTE PTR __$EHRec$[ebp+12], 33		; 00000021H
	lea	ecx, DWORD PTR _path$75586[ebp]
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	BYTE PTR __$EHRec$[ebp+12], 32		; 00000020H
	lea	ecx, DWORD PTR _fileName$75584[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 31		; 0000001fH
	lea	ecx, DWORD PTR _arcPath$75583[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	jmp	$LN19@UpdateArch
$LN18@UpdateArch:
; Line 1494
	mov	BYTE PTR __$EHRec$[ebp+12], 28		; 0000001cH
	lea	ecx, DWORD PTR _curDirRestorer$75579[ebp]
	call	??1CCurrentDirRestorer@NDir@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NDir::CCurrentDirRestorer::~CCurrentDirRestorer
	mov	BYTE PTR __$EHRec$[ebp+12], 27		; 0000001bH
	lea	ecx, DWORD PTR _fullPaths$75567[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	BYTE PTR __$EHRec$[ebp+12], 21		; 00000015H
	lea	ecx, DWORD PTR _mapiLib$75556[ebp]
	call	??1CLibrary@NDLL@NWindows@@QAE@XZ	; NWindows::NDLL::CLibrary::~CLibrary
$LN27@UpdateArch:
; Line 1498
	mov	eax, DWORD PTR _options$[ebp]
	movzx	ecx, BYTE PTR [eax+248]
	test	ecx, ecx
	je	$LN16@UpdateArch
; Line 1500
	lea	ecx, DWORD PTR _pairs$75701[ebp]
	call	??0?$CRecordVector@UCRefSortPair@@@@QAE@XZ ; CRecordVector<CRefSortPair>::CRecordVector<CRefSortPair>
	mov	BYTE PTR __$EHRec$[ebp+12], 37		; 00000025H
; Line 1501
	lea	ecx, DWORD PTR _foldersNames$75702[ebp]
	call	??0?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::CObjectVector<UString>
	mov	BYTE PTR __$EHRec$[ebp+12], 38		; 00000026H
; Line 1503
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN15@UpdateArch
$LN14@UpdateArch:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN15@UpdateArch:
	lea	ecx, DWORD PTR _dirItems$[ebp+36]
	call	?Size@?$CObjectVector@UCDirItem@@@@QBEIXZ ; CObjectVector<CDirItem>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	$LN13@UpdateArch
; Line 1505
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	lea	ecx, DWORD PTR _dirItems$[ebp+36]
	call	??A?$CObjectVector@UCDirItem@@@@QAEAAUCDirItem@@I@Z ; CObjectVector<CDirItem>::operator[]
	mov	DWORD PTR _dirItem$75706[ebp], eax
; Line 1506
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	lea	edx, DWORD PTR _phyPath$75707[ebp]
	push	edx
	lea	ecx, DWORD PTR _dirItems$[ebp]
	call	?GetPhyPath@CDirItems@@QBE?AVUString@@I@Z ; CDirItems::GetPhyPath
	mov	BYTE PTR __$EHRec$[ebp+12], 39		; 00000027H
; Line 1507
	mov	ecx, DWORD PTR _dirItem$75706[ebp]
	call	?IsDir@CDirItem@@QBE_NXZ		; CDirItem::IsDir
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN12@UpdateArch
; Line 1510
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _pair$75710[ebp+4], ecx
; Line 1511
	lea	ecx, DWORD PTR _phyPath$75707[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	?GetNumSlashes@@YGIPB_W@Z		; GetNumSlashes
	mov	DWORD PTR _pair$75710[ebp], eax
; Line 1512
	mov	edx, DWORD PTR _pair$75710[ebp+4]
	push	edx
	mov	eax, DWORD PTR _pair$75710[ebp]
	push	eax
	lea	ecx, DWORD PTR _pairs$75701[ebp]
	call	?Add@?$CRecordVector@UCRefSortPair@@@@QAEIUCRefSortPair@@@Z ; CRecordVector<CRefSortPair>::Add
; Line 1514
	jmp	$LN11@UpdateArch
$LN12@UpdateArch:
; Line 1516
	lea	ecx, DWORD PTR _processedItems$[ebp]
	call	??B?$CBuffer@E@@QAEPAEXZ		; CBuffer<unsigned char>::operator unsigned char *
	mov	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [eax+ecx]
	test	edx, edx
	jne	SHORT $LN9@UpdateArch
	mov	eax, DWORD PTR _dirItem$75706[ebp]
	mov	DWORD PTR tv1877[ebp], eax
	mov	ecx, DWORD PTR tv1877[ebp]
	mov	edx, DWORD PTR tv1877[ebp]
	mov	eax, DWORD PTR [ecx]
	or	eax, DWORD PTR [edx+4]
	jne	$LN11@UpdateArch
$LN9@UpdateArch:
; Line 1518
	mov	esi, esp
	push	0
	lea	ecx, DWORD PTR _phyPath$75707[ebp]
	push	ecx
	mov	edx, DWORD PTR _callback$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _callback$[ebp]
	mov	edx, DWORD PTR [eax+84]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$75714[ebp], eax
	cmp	DWORD PTR ___result__$75714[ebp], 0
	je	$LN8@UpdateArch
	mov	eax, DWORD PTR ___result__$75714[ebp]
	mov	DWORD PTR $T77522[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 38		; 00000026H
	lea	ecx, DWORD PTR _phyPath$75707[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 37		; 00000025H
	lea	ecx, DWORD PTR _foldersNames$75702[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	BYTE PTR __$EHRec$[ebp+12], 21		; 00000015H
	lea	ecx, DWORD PTR _pairs$75701[ebp]
	call	??1?$CRecordVector@UCRefSortPair@@@@QAE@XZ ; CRecordVector<CRefSortPair>::~CRecordVector<CRefSortPair>
	mov	BYTE PTR __$EHRec$[ebp+12], 20		; 00000014H
	lea	ecx, DWORD PTR _processedItems$[ebp]
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+12], 18		; 00000012H
	lea	ecx, DWORD PTR _arcItems$[ebp]
	call	??1?$CObjectVector@UCArcItem@@@@QAE@XZ	; CObjectVector<CArcItem>::~CObjectVector<CArcItem>
	mov	BYTE PTR __$EHRec$[ebp+12], 17		; 00000011H
	lea	ecx, DWORD PTR _tempFiles$[ebp]
	call	??1CTempFiles@@QAE@XZ			; CTempFiles::~CTempFiles
	mov	BYTE PTR __$EHRec$[ebp+12], 16		; 00000010H
	lea	ecx, DWORD PTR _tempDirectory$[ebp]
	call	??1CTempDir@NDir@NFile@NWindows@@QAE@XZ	; NWindows::NFile::NDir::CTempDir::~CTempDir
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR _tempDirPrefix$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 11		; 0000000bH
	lea	ecx, DWORD PTR _parentDirItem$[ebp]
	call	??1CDirItem@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 5
	lea	ecx, DWORD PTR _dirItems$[ebp]
	call	??1CDirItems@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _arcPath$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _arcLink$[ebp]
	call	??1CArchiveLink@@QAE@XZ			; CArchiveLink::~CArchiveLink
	mov	eax, DWORD PTR $T77522[ebp]
	jmp	$LN123@UpdateArch
$LN8@UpdateArch:
; Line 1519
	lea	ecx, DWORD PTR _phyPath$75707[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	?DeleteFileAlways@NDir@NFile@NWindows@@YG_NPB_W@Z ; NWindows::NFile::NDir::DeleteFileAlways
$LN11@UpdateArch:
; Line 1532
	mov	BYTE PTR __$EHRec$[ebp+12], 38		; 00000026H
	lea	ecx, DWORD PTR _phyPath$75707[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	jmp	$LN14@UpdateArch
$LN13@UpdateArch:
; Line 1534
	push	0
	push	OFFSET ?CompareRefSortPair@@YGHPBUCRefSortPair@@0PAX@Z ; CompareRefSortPair
	lea	ecx, DWORD PTR _pairs$75701[ebp]
	call	?Sort@?$CRecordVector@UCRefSortPair@@@@QAEXP6GHPBUCRefSortPair@@0PAX@Z1@Z ; CRecordVector<CRefSortPair>::Sort
; Line 1536
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@UpdateArch
$LN5@UpdateArch:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN6@UpdateArch:
	lea	ecx, DWORD PTR _pairs$75701[ebp]
	call	?Size@?$CRecordVector@UCRefSortPair@@@@QBEIXZ ; CRecordVector<CRefSortPair>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	$LN4@UpdateArch
; Line 1538
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	lea	ecx, DWORD PTR _pairs$75701[ebp]
	call	??A?$CRecordVector@UCRefSortPair@@@@QAEAAUCRefSortPair@@I@Z ; CRecordVector<CRefSortPair>::operator[]
	mov	eax, DWORD PTR [eax+4]
	push	eax
	lea	ecx, DWORD PTR _phyPath$75721[ebp]
	push	ecx
	lea	ecx, DWORD PTR _dirItems$[ebp]
	call	?GetPhyPath@CDirItems@@QBE?AVUString@@I@Z ; CDirItems::GetPhyPath
	mov	BYTE PTR __$EHRec$[ebp+12], 40		; 00000028H
; Line 1539
	lea	ecx, DWORD PTR _phyPath$75721[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	?DoesDirExist@NFind@NFile@NWindows@@YG_NPB_W@Z ; NWindows::NFile::NFind::DoesDirExist
	movzx	edx, al
	test	edx, edx
	je	$LN3@UpdateArch
; Line 1541
	mov	esi, esp
	push	1
	lea	eax, DWORD PTR _phyPath$75721[ebp]
	push	eax
	mov	ecx, DWORD PTR _callback$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _callback$[ebp]
	mov	eax, DWORD PTR [edx+84]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$75724[ebp], eax
	cmp	DWORD PTR ___result__$75724[ebp], 0
	je	$LN2@UpdateArch
	mov	ecx, DWORD PTR ___result__$75724[ebp]
	mov	DWORD PTR $T77523[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 38		; 00000026H
	lea	ecx, DWORD PTR _phyPath$75721[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 37		; 00000025H
	lea	ecx, DWORD PTR _foldersNames$75702[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	BYTE PTR __$EHRec$[ebp+12], 21		; 00000015H
	lea	ecx, DWORD PTR _pairs$75701[ebp]
	call	??1?$CRecordVector@UCRefSortPair@@@@QAE@XZ ; CRecordVector<CRefSortPair>::~CRecordVector<CRefSortPair>
	mov	BYTE PTR __$EHRec$[ebp+12], 20		; 00000014H
	lea	ecx, DWORD PTR _processedItems$[ebp]
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+12], 18		; 00000012H
	lea	ecx, DWORD PTR _arcItems$[ebp]
	call	??1?$CObjectVector@UCArcItem@@@@QAE@XZ	; CObjectVector<CArcItem>::~CObjectVector<CArcItem>
	mov	BYTE PTR __$EHRec$[ebp+12], 17		; 00000011H
	lea	ecx, DWORD PTR _tempFiles$[ebp]
	call	??1CTempFiles@@QAE@XZ			; CTempFiles::~CTempFiles
	mov	BYTE PTR __$EHRec$[ebp+12], 16		; 00000010H
	lea	ecx, DWORD PTR _tempDirectory$[ebp]
	call	??1CTempDir@NDir@NFile@NWindows@@QAE@XZ	; NWindows::NFile::NDir::CTempDir::~CTempDir
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR _tempDirPrefix$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 11		; 0000000bH
	lea	ecx, DWORD PTR _parentDirItem$[ebp]
	call	??1CDirItem@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 5
	lea	ecx, DWORD PTR _dirItems$[ebp]
	call	??1CDirItems@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _arcPath$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _arcLink$[ebp]
	call	??1CArchiveLink@@QAE@XZ			; CArchiveLink::~CArchiveLink
	mov	eax, DWORD PTR $T77523[ebp]
	jmp	$LN123@UpdateArch
$LN2@UpdateArch:
; Line 1542
	lea	ecx, DWORD PTR _phyPath$75721[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	?RemoveDir@NDir@NFile@NWindows@@YG_NPB_W@Z ; NWindows::NFile::NDir::RemoveDir
$LN3@UpdateArch:
; Line 1544
	mov	BYTE PTR __$EHRec$[ebp+12], 38		; 00000026H
	lea	ecx, DWORD PTR _phyPath$75721[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	jmp	$LN5@UpdateArch
$LN4@UpdateArch:
; Line 1546
	mov	esi, esp
	mov	edx, DWORD PTR _callback$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _callback$[ebp]
	mov	edx, DWORD PTR [eax+88]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$75727[ebp], eax
	cmp	DWORD PTR ___result__$75727[ebp], 0
	je	$LN1@UpdateArch
	mov	eax, DWORD PTR ___result__$75727[ebp]
	mov	DWORD PTR $T77524[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 37		; 00000025H
	lea	ecx, DWORD PTR _foldersNames$75702[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	BYTE PTR __$EHRec$[ebp+12], 21		; 00000015H
	lea	ecx, DWORD PTR _pairs$75701[ebp]
	call	??1?$CRecordVector@UCRefSortPair@@@@QAE@XZ ; CRecordVector<CRefSortPair>::~CRecordVector<CRefSortPair>
	mov	BYTE PTR __$EHRec$[ebp+12], 20		; 00000014H
	lea	ecx, DWORD PTR _processedItems$[ebp]
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+12], 18		; 00000012H
	lea	ecx, DWORD PTR _arcItems$[ebp]
	call	??1?$CObjectVector@UCArcItem@@@@QAE@XZ	; CObjectVector<CArcItem>::~CObjectVector<CArcItem>
	mov	BYTE PTR __$EHRec$[ebp+12], 17		; 00000011H
	lea	ecx, DWORD PTR _tempFiles$[ebp]
	call	??1CTempFiles@@QAE@XZ			; CTempFiles::~CTempFiles
	mov	BYTE PTR __$EHRec$[ebp+12], 16		; 00000010H
	lea	ecx, DWORD PTR _tempDirectory$[ebp]
	call	??1CTempDir@NDir@NFile@NWindows@@QAE@XZ	; NWindows::NFile::NDir::CTempDir::~CTempDir
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR _tempDirPrefix$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 11		; 0000000bH
	lea	ecx, DWORD PTR _parentDirItem$[ebp]
	call	??1CDirItem@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 5
	lea	ecx, DWORD PTR _dirItems$[ebp]
	call	??1CDirItems@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _arcPath$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _arcLink$[ebp]
	call	??1CArchiveLink@@QAE@XZ			; CArchiveLink::~CArchiveLink
	mov	eax, DWORD PTR $T77524[ebp]
	jmp	$LN123@UpdateArch
$LN1@UpdateArch:
; Line 1547
	mov	BYTE PTR __$EHRec$[ebp+12], 37		; 00000025H
	lea	ecx, DWORD PTR _foldersNames$75702[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	BYTE PTR __$EHRec$[ebp+12], 21		; 00000015H
	lea	ecx, DWORD PTR _pairs$75701[ebp]
	call	??1?$CRecordVector@UCRefSortPair@@@@QAE@XZ ; CRecordVector<CRefSortPair>::~CRecordVector<CRefSortPair>
$LN16@UpdateArch:
; Line 1549
	mov	DWORD PTR $T77525[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+12], 20		; 00000014H
	lea	ecx, DWORD PTR _processedItems$[ebp]
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+12], 18		; 00000012H
	lea	ecx, DWORD PTR _arcItems$[ebp]
	call	??1?$CObjectVector@UCArcItem@@@@QAE@XZ	; CObjectVector<CArcItem>::~CObjectVector<CArcItem>
	mov	BYTE PTR __$EHRec$[ebp+12], 17		; 00000011H
	lea	ecx, DWORD PTR _tempFiles$[ebp]
	call	??1CTempFiles@@QAE@XZ			; CTempFiles::~CTempFiles
	mov	BYTE PTR __$EHRec$[ebp+12], 16		; 00000010H
	lea	ecx, DWORD PTR _tempDirectory$[ebp]
	call	??1CTempDir@NDir@NFile@NWindows@@QAE@XZ	; NWindows::NFile::NDir::CTempDir::~CTempDir
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR _tempDirPrefix$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+12], 11		; 0000000bH
	lea	ecx, DWORD PTR _parentDirItem$[ebp]
	call	??1CDirItem@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 5
	lea	ecx, DWORD PTR _dirItems$[ebp]
	call	??1CDirItems@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _arcPath$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _arcLink$[ebp]
	call	??1CArchiveLink@@QAE@XZ			; CArchiveLink::~CArchiveLink
	mov	eax, DWORD PTR $T77525[ebp]
$LN123@UpdateArch:
; Line 1550
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN236@UpdateArch
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 1832				; 00000728H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
	npad	2
$LN236@UpdateArch:
	DD	41					; 00000029H
	DD	$LN235@UpdateArch
$LN235@UpdateArch:
	DD	-56					; ffffffc8H
	DD	24					; 00000018H
	DD	$LN193@UpdateArch
	DD	-80					; ffffffb0H
	DD	12					; 0000000cH
	DD	$LN194@UpdateArch
	DD	-184					; ffffff48H
	DD	96					; 00000060H
	DD	$LN195@UpdateArch
	DD	-204					; ffffff34H
	DD	12					; 0000000cH
	DD	$LN196@UpdateArch
	DD	-268					; fffffef4H
	DD	56					; 00000038H
	DD	$LN197@UpdateArch
	DD	-288					; fffffee0H
	DD	12					; 0000000cH
	DD	$LN198@UpdateArch
	DD	-308					; fffffeccH
	DD	12					; 0000000cH
	DD	$LN199@UpdateArch
	DD	-404					; fffffe6cH
	DD	88					; 00000058H
	DD	$LN200@UpdateArch
	DD	-600					; fffffda8H
	DD	160					; 000000a0H
	DD	$LN201@UpdateArch
	DD	-688					; fffffd50H
	DD	80					; 00000050H
	DD	$LN202@UpdateArch
	DD	-780					; fffffcf4H
	DD	80					; 00000050H
	DD	$LN203@UpdateArch
	DD	-864					; fffffca0H
	DD	56					; 00000038H
	DD	$LN204@UpdateArch
	DD	-884					; fffffc8cH
	DD	12					; 0000000cH
	DD	$LN205@UpdateArch
	DD	-896					; fffffc80H
	DD	4
	DD	$LN206@UpdateArch
	DD	-916					; fffffc6cH
	DD	12					; 0000000cH
	DD	$LN207@UpdateArch
	DD	-944					; fffffc50H
	DD	16					; 00000010H
	DD	$LN208@UpdateArch
	DD	-964					; fffffc3cH
	DD	12					; 0000000cH
	DD	$LN209@UpdateArch
	DD	-1000					; fffffc18H
	DD	12					; 0000000cH
	DD	$LN210@UpdateArch
	DD	-1020					; fffffc04H
	DD	12					; 0000000cH
	DD	$LN211@UpdateArch
	DD	-1040					; fffffbf0H
	DD	8
	DD	$LN212@UpdateArch
	DD	-1072					; fffffbd0H
	DD	12					; 0000000cH
	DD	$LN213@UpdateArch
	DD	-1096					; fffffbb8H
	DD	8
	DD	$LN214@UpdateArch
	DD	-1136					; fffffb90H
	DD	12					; 0000000cH
	DD	$LN215@UpdateArch
	DD	-1148					; fffffb84H
	DD	4
	DD	$LN216@UpdateArch
	DD	-1172					; fffffb6cH
	DD	12					; 0000000cH
	DD	$LN217@UpdateArch
	DD	-1200					; fffffb50H
	DD	12					; 0000000cH
	DD	$LN218@UpdateArch
	DD	-1220					; fffffb3cH
	DD	12					; 0000000cH
	DD	$LN219@UpdateArch
	DD	-1244					; fffffb24H
	DD	16					; 00000010H
	DD	$LN220@UpdateArch
	DD	-1264					; fffffb10H
	DD	12					; 0000000cH
	DD	$LN221@UpdateArch
	DD	-1284					; fffffafcH
	DD	12					; 0000000cH
	DD	$LN222@UpdateArch
	DD	-1304					; fffffae8H
	DD	12					; 0000000cH
	DD	$LN223@UpdateArch
	DD	-1324					; fffffad4H
	DD	12					; 0000000cH
	DD	$LN224@UpdateArch
	DD	-1356					; fffffab4H
	DD	24					; 00000018H
	DD	$LN225@UpdateArch
	DD	-1412					; fffffa7cH
	DD	48					; 00000030H
	DD	$LN226@UpdateArch
	DD	-1432					; fffffa68H
	DD	12					; 0000000cH
	DD	$LN227@UpdateArch
	DD	-1464					; fffffa48H
	DD	24					; 00000018H
	DD	$LN228@UpdateArch
	DD	-1484					; fffffa34H
	DD	12					; 0000000cH
	DD	$LN229@UpdateArch
	DD	-1504					; fffffa20H
	DD	12					; 0000000cH
	DD	$LN230@UpdateArch
	DD	-1528					; fffffa08H
	DD	12					; 0000000cH
	DD	$LN231@UpdateArch
	DD	-1544					; fffff9f8H
	DD	8
	DD	$LN232@UpdateArch
	DD	-1568					; fffff9e0H
	DD	12					; 0000000cH
	DD	$LN233@UpdateArch
$LN233@UpdateArch:
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	121					; 00000079H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN232@UpdateArch:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	0
$LN231@UpdateArch:
	DB	112					; 00000070H
	DB	104					; 00000068H
	DB	121					; 00000079H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN230@UpdateArch:
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	78					; 0000004eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN229@UpdateArch:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	0
$LN228@UpdateArch:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	0
$LN227@UpdateArch:
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	100					; 00000064H
	DB	114					; 00000072H
	DB	0
$LN226@UpdateArch:
	DB	109					; 0000006dH
	DB	0
$LN225@UpdateArch:
	DB	102					; 00000066H
	DB	0
$LN224@UpdateArch:
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN223@UpdateArch:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN222@UpdateArch:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	78					; 0000004eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN221@UpdateArch:
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN220@UpdateArch:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	68					; 00000044H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN219@UpdateArch:
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN218@UpdateArch:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN217@UpdateArch:
	DB	102					; 00000066H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	115					; 00000073H
	DB	0
$LN216@UpdateArch:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	105					; 00000069H
	DB	76					; 0000004cH
	DB	105					; 00000069H
	DB	98					; 00000062H
	DB	0
$LN215@UpdateArch:
	DB	36					; 00000024H
	DB	83					; 00000053H
	DB	49					; 00000031H
	DB	0
$LN214@UpdateArch:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN213@UpdateArch:
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN212@UpdateArch:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	73					; 00000049H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	115					; 00000073H
	DB	0
$LN211@UpdateArch:
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	73					; 00000049H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	115					; 00000073H
	DB	0
$LN210@UpdateArch:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN209@UpdateArch:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	70					; 00000046H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN208@UpdateArch:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	68					; 00000044H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	121					; 00000079H
	DB	0
$LN207@UpdateArch:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	68					; 00000044H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	120					; 00000078H
	DB	0
$LN206@UpdateArch:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	0
$LN205@UpdateArch:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	120					; 00000078H
	DB	0
$LN204@UpdateArch:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	0
$LN203@UpdateArch:
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	0
$LN202@UpdateArch:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	68					; 00000044H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	73					; 00000049H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	0
$LN201@UpdateArch:
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	73					; 00000049H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	115					; 00000073H
	DB	0
$LN200@UpdateArch:
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
$LN199@UpdateArch:
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	99					; 00000063H
	DB	108					; 0000006cH
	DB	0
$LN198@UpdateArch:
	DB	116					; 00000074H
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN197@UpdateArch:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	0
$LN196@UpdateArch:
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN195@UpdateArch:
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	76					; 0000004cH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	107					; 0000006bH
	DB	0
$LN194@UpdateArch:
	DB	102					; 00000066H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	78					; 0000004eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN193@UpdateArch:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	121					; 00000079H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$2:
	lea	ecx, DWORD PTR _property$75346[ebp]
	jmp	??1CProperty@@QAE@XZ
__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$3:
	lea	ecx, DWORD PTR $T77479[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$4:
	lea	ecx, DWORD PTR _fullName$75354[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$5:
	lea	ecx, DWORD PTR _arcLink$[ebp]
	jmp	??1CArchiveLink@@QAE@XZ			; CArchiveLink::~CArchiveLink
__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$6:
	lea	ecx, DWORD PTR _arcPath$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$7:
	lea	ecx, DWORD PTR _fi$75376[ebp]
	jmp	??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ
__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$8:
	lea	ecx, DWORD PTR _types$75396[ebp]
	jmp	??1?$CObjectVector@UCOpenType@@@@QAE@XZ	; CObjectVector<COpenType>::~CObjectVector<COpenType>
__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$9:
	lea	ecx, DWORD PTR _excl$75398[ebp]
	jmp	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$10:
	lea	ecx, DWORD PTR _op$75399[ebp]
	jmp	??1COpenOptions@@QAE@XZ
__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$11:
	lea	ecx, DWORD PTR $T77496[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$12:
	lea	ecx, DWORD PTR _dirItems$[ebp]
	jmp	??1CDirItems@@QAE@XZ
__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$13:
	lea	ecx, DWORD PTR _parentDirItem$[ebp]
	jmp	??1CDirItem@@QAE@XZ
__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$14:
	lea	ecx, DWORD PTR _di$75447[ebp]
	jmp	??1CDirItem@@QAE@XZ
__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$15:
	lea	ecx, DWORD PTR _fi$75473[ebp]
	jmp	??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ
__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$16:
	lea	ecx, DWORD PTR _prefix$75474[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$17:
	lea	ecx, DWORD PTR _tempDirPrefix$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$18:
	lea	ecx, DWORD PTR _tempDirectory$[ebp]
	jmp	??1CTempDir@NDir@NFile@NWindows@@QAE@XZ	; NWindows::NFile::NDir::CTempDir::~CTempDir
__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$19:
	lea	ecx, DWORD PTR _tempFiles$[ebp]
	jmp	??1CTempFiles@@QAE@XZ			; CTempFiles::~CTempFiles
__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$20:
	lea	ecx, DWORD PTR _path$75499[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$21:
	lea	ecx, DWORD PTR _arcItems$[ebp]
	jmp	??1?$CObjectVector@UCArcItem@@@@QAE@XZ	; CObjectVector<CArcItem>::~CObjectVector<CArcItem>
__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$22:
	lea	ecx, DWORD PTR _processedItems$[ebp]
	jmp	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$23:
	lea	ecx, DWORD PTR _name$75521[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$24:
	lea	ecx, DWORD PTR $T77508[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$25:
	lea	ecx, DWORD PTR _$S1$75547[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$26:
	lea	ecx, DWORD PTR _mapiLib$75556[ebp]
	jmp	??1CLibrary@NDLL@NWindows@@QAE@XZ	; NWindows::NDLL::CLibrary::~CLibrary
__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$27:
	lea	ecx, DWORD PTR _fullPaths$75567[ebp]
	jmp	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$28:
	lea	ecx, DWORD PTR _finalPath$75573[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$29:
	lea	ecx, DWORD PTR _arcPath$75575[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$30:
	lea	ecx, DWORD PTR _curDirRestorer$75579[ebp]
	jmp	??1CCurrentDirRestorer@NDir@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NDir::CCurrentDirRestorer::~CCurrentDirRestorer
__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$31:
	lea	ecx, DWORD PTR _arcPath$75583[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$32:
	lea	ecx, DWORD PTR _fileName$75584[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$33:
	lea	ecx, DWORD PTR _path$75586[ebp]
	jmp	??1AString@@QAE@XZ			; AString::~AString
__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$34:
	lea	ecx, DWORD PTR _name$75588[ebp]
	jmp	??1AString@@QAE@XZ			; AString::~AString
__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$35:
	lea	ecx, DWORD PTR _addr$75596[ebp]
	jmp	??1AString@@QAE@XZ			; AString::~AString
__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$36:
	lea	ecx, DWORD PTR _pairs$75701[ebp]
	jmp	??1?$CRecordVector@UCRefSortPair@@@@QAE@XZ ; CRecordVector<CRefSortPair>::~CRecordVector<CRefSortPair>
__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$37:
	lea	ecx, DWORD PTR _foldersNames$75702[ebp]
	jmp	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$38:
	lea	ecx, DWORD PTR _phyPath$75707[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z$39:
	lea	ecx, DWORD PTR _phyPath$75721[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-1836]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?UpdateArchive@@YGJPAVCCodecs@@ABV?$CObjectVector@UCOpenType@@@@ABVUString@@AAVCCensor@NWildcard@@AAUCUpdateOptions@@AAUCUpdateErrorInfo@@PAUIOpenCallbackUI@@PAUIUpdateCallbackUI2@@_N@Z ENDP ; UpdateArchive
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1AString@@QAE@XZ
_TEXT	SEGMENT
$T77637 = -8						; size = 4
_this$ = -4						; size = 4
??1AString@@QAE@XZ PROC					; AString::~AString, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 232
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T77637[ebp], ecx
	mov	edx, DWORD PTR $T77637[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1AString@@QAE@XZ ENDP					; AString::~AString
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsEmpty@AString@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@AString@@QBE_NXZ PROC				; AString::IsEmpty, COMDAT
; _this$ = ecx
; Line 235
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+4], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@AString@@QBE_NXZ ENDP				; AString::IsEmpty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??BAString@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BAString@@QBEPBDXZ PROC				; AString::operator char const *, COMDAT
; _this$ = ecx
; Line 238
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??BAString@@QBEPBDXZ ENDP				; AString::operator char const *
_TEXT	ENDS
EXTRN	?FindCharPosInString@@YGHPB_W_W@Z:PROC		; FindCharPosInString
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Find@UString@@QBEH_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_c$ = 8							; size = 2
?Find@UString@@QBEH_W@Z PROC				; UString::Find, COMDAT
; _this$ = ecx
; Line 567
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	movzx	eax, WORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	?FindCharPosInString@@YGHPB_W_W@Z	; FindCharPosInString
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Find@UString@@QBEH_W@Z ENDP				; UString::Find
_TEXT	ENDS
PUBLIC	?MatchesMask@CFileInfoBase@NFind@NFile@NWindows@@ABE_NI@Z ; NWindows::NFile::NFind::CFileInfoBase::MatchesMask
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsDir@CFileInfoBase@NFind@NFile@NWindows@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsDir@CFileInfoBase@NFind@NFile@NWindows@@QBE_NXZ PROC	; NWindows::NFile::NFind::CFileInfoBase::IsDir, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\filefind.h
; Line 51
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MatchesMask@CFileInfoBase@NFind@NFile@NWindows@@ABE_NI@Z ; NWindows::NFile::NFind::CFileInfoBase::MatchesMask
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsDir@CFileInfoBase@NFind@NFile@NWindows@@QBE_NXZ ENDP	; NWindows::NFile::NFind::CFileInfoBase::IsDir
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?MatchesMask@CFileInfoBase@NFind@NFile@NWindows@@ABE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_mask$ = 8						; size = 4
?MatchesMask@CFileInfoBase@NFind@NFile@NWindows@@ABE_NI@Z PROC ; NWindows::NFile::NFind::CFileInfoBase::MatchesMask, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+32]
	and	eax, DWORD PTR _mask$[ebp]
	neg	eax
	sbb	eax, eax
	neg	eax
	mov	esp, ebp
	pop	ebp
	ret	4
?MatchesMask@CFileInfoBase@NFind@NFile@NWindows@@ABE_NI@Z ENDP ; NWindows::NFile::NFind::CFileInfoBase::MatchesMask
_TEXT	ENDS
PUBLIC	??0CFileInfoBase@NFind@NFile@NWindows@@QAE@XZ	; NWindows::NFile::NFind::CFileInfoBase::CFileInfoBase
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CFileInfo@NFind@NFile@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CFileInfo@NFind@NFile@NWindows@@QAE@XZ PROC		; NWindows::NFile::NFind::CFileInfo::CFileInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CFileInfoBase@NFind@NFile@NWindows@@QAE@XZ ; NWindows::NFile::NFind::CFileInfoBase::CFileInfoBase
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CFileInfo@NFind@NFile@NWindows@@QAE@XZ ENDP		; NWindows::NFile::NFind::CFileInfo::CFileInfo
_TEXT	ENDS
EXTRN	?ClearBase@CFileInfoBase@NFind@NFile@NWindows@@QAEXXZ:PROC ; NWindows::NFile::NFind::CFileInfoBase::ClearBase
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CFileInfoBase@NFind@NFile@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CFileInfoBase@NFind@NFile@NWindows@@QAE@XZ PROC	; NWindows::NFile::NFind::CFileInfoBase::CFileInfoBase, COMDAT
; _this$ = ecx
; Line 44
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearBase@CFileInfoBase@NFind@NFile@NWindows@@QAEXXZ ; NWindows::NFile::NFind::CFileInfoBase::ClearBase
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CFileInfoBase@NFind@NFile@NWindows@@QAE@XZ ENDP	; NWindows::NFile::NFind::CFileInfoBase::CFileInfoBase
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ PROC		; NWindows::NFile::NFind::CFileInfo::~CFileInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??1UString@@QAE@XZ			; UString::~UString
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CFileInfo@NFind@NFile@NWindows@@QAE@XZ ENDP		; NWindows::NFile::NFind::CFileInfo::~CFileInfo
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0COpenOptions@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0COpenOptions@@QAE@XZ PROC				; COpenOptions::COpenOptions, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\openarchive.h
; Line 140
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0COpenType@@QAE@XZ			; COpenType::COpenType
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+40], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+44], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+52], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+56], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+60], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+68], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0COpenOptions@@QAE@XZ ENDP				; COpenOptions::COpenOptions
_TEXT	ENDS
PUBLIC	??1?$CObjectVector@VCArc@@@@QAE@XZ		; CObjectVector<CArc>::~CObjectVector<CArc>
PUBLIC	??0CArcErrorInfo@@QAE@XZ			; CArcErrorInfo::CArcErrorInfo
PUBLIC	??0?$CObjectVector@VCArc@@@@QAE@XZ		; CObjectVector<CArc>::CObjectVector<CArc>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CArchiveLink@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CArchiveLink@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CArchiveLink@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CArchiveLink@@QAE@XZ$2
__ehfuncinfo$??0CArchiveLink@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0CArchiveLink@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CArchiveLink@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CArchiveLink@@QAE@XZ PROC				; CArchiveLink::CArchiveLink, COMDAT
; _this$ = ecx
; Line 386
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CArchiveLink@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CObjectVector@VCArc@@@@QAE@XZ	; CObjectVector<CArc>::CObjectVector<CArc>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::CObjectVector<UString>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0
	mov	DWORD PTR [eax+28], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+32], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+33], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??0CArcErrorInfo@@QAE@XZ		; CArcErrorInfo::CArcErrorInfo
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CArchiveLink@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CObjectVector@VCArc@@@@QAE@XZ	; CObjectVector<CArc>::~CObjectVector<CArc>
__unwindfunclet$??0CArchiveLink@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
__unwindfunclet$??0CArchiveLink@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$??0CArchiveLink@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CArchiveLink@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CArchiveLink@@QAE@XZ ENDP				; CArchiveLink::CArchiveLink
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CArcErrorInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CArcErrorInfo@@QAE@XZ$0
__ehfuncinfo$??0CArcErrorInfo@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CArcErrorInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CArcErrorInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CArcErrorInfo@@QAE@XZ PROC				; CArcErrorInfo::CArcErrorInfo, COMDAT
; _this$ = ecx
; Line 183
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CArcErrorInfo@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+2], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+3], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CArcErrorInfo@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$??0CArcErrorInfo@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CArcErrorInfo@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CArcErrorInfo@@QAE@XZ ENDP				; CArcErrorInfo::CArcErrorInfo
PUBLIC	??1CArcErrorInfo@@QAE@XZ			; CArcErrorInfo::~CArcErrorInfo
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CArchiveLink@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CArchiveLink@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CArchiveLink@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CArchiveLink@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CArchiveLink@@QAE@XZ$3
__ehfuncinfo$??1CArchiveLink@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??1CArchiveLink@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CArchiveLink@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CArchiveLink@@QAE@XZ PROC				; CArchiveLink::~CArchiveLink, COMDAT
; _this$ = ecx
; Line 391
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CArchiveLink@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Release@CArchiveLink@@QAEXXZ		; CArchiveLink::Release
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??1CArcErrorInfo@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CObjectVector@VCArc@@@@QAE@XZ	; CObjectVector<CArc>::~CObjectVector<CArc>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CArchiveLink@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CObjectVector@VCArc@@@@QAE@XZ	; CObjectVector<CArc>::~CObjectVector<CArc>
__unwindfunclet$??1CArchiveLink@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
__unwindfunclet$??1CArchiveLink@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??1CArchiveLink@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	jmp	??1CArcErrorInfo@@QAE@XZ
__ehhandler$??1CArchiveLink@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CArchiveLink@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CArchiveLink@@QAE@XZ ENDP				; CArchiveLink::~CArchiveLink
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CArcErrorInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CArcErrorInfo@@QAE@XZ$0
__ehfuncinfo$??1CArcErrorInfo@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CArcErrorInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CArcErrorInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CArcErrorInfo@@QAE@XZ PROC				; CArcErrorInfo::~CArcErrorInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CArcErrorInfo@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CArcErrorInfo@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$??1CArcErrorInfo@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CArcErrorInfo@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CArcErrorInfo@@QAE@XZ ENDP				; CArcErrorInfo::~CArcErrorInfo
PUBLIC	?Back@?$CObjectVector@VCArc@@@@QBEABVCArc@@XZ	; CObjectVector<CArc>::Back
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetArc@CArchiveLink@@QBEPBVCArc@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetArc@CArchiveLink@@QBEPBVCArc@@XZ PROC		; CArchiveLink::GetArc, COMDAT
; _this$ = ecx
; Line 393
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Back@?$CObjectVector@VCArc@@@@QBEABVCArc@@XZ ; CObjectVector<CArc>::Back
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetArc@CArchiveLink@@QBEPBVCArc@@XZ ENDP		; CArchiveLink::GetArc
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?NeedScanning@CActionSet@NUpdateArchive@@QBE_NXZ
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
?NeedScanning@CActionSet@NUpdateArchive@@QBE_NXZ PROC	; NUpdateArchive::CActionSet::NeedScanning, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\updateaction.h
; Line 47
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 49
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN8@NeedScanni
$LN7@NeedScanni:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN8@NeedScanni:
	cmp	DWORD PTR _i$[ebp], 7
	jae	SHORT $LN6@NeedScanni
; Line 50
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+ecx*4], 2
	jne	SHORT $LN5@NeedScanni
; Line 51
	mov	al, 1
	jmp	SHORT $LN9@NeedScanni
$LN5@NeedScanni:
; Line 52
	jmp	SHORT $LN7@NeedScanni
$LN6@NeedScanni:
	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN4@NeedScanni
$LN3@NeedScanni:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@NeedScanni:
	cmp	DWORD PTR _i$[ebp], 7
	jae	SHORT $LN2@NeedScanni
; Line 53
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+ecx*4], 0
	je	SHORT $LN1@NeedScanni
; Line 54
	mov	al, 1
	jmp	SHORT $LN9@NeedScanni
$LN1@NeedScanni:
; Line 55
	jmp	SHORT $LN3@NeedScanni
$LN2@NeedScanni:
	xor	al, al
$LN9@NeedScanni:
; Line 56
	mov	esp, ebp
	pop	ebp
	ret	0
?NeedScanning@CActionSet@NUpdateArchive@@QBE_NXZ ENDP	; NUpdateArchive::CActionSet::NeedScanning
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\diritem.h
xdata$x	SEGMENT
__unwindtable$??0CDirItem@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CDirItem@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CDirItem@@QAE@XZ$1
__ehfuncinfo$??0CDirItem@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CDirItem@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CDirItem@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CDirItem@@QAE@XZ PROC				; CDirItem::CDirItem, COMDAT
; _this$ = ecx
; Line 69
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CDirItem@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??0?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::CBuffer<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??0?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::CBuffer<unsigned char>
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+64], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+68], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+72], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+76], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CDirItem@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??0CDirItem@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	jmp	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
__ehhandler$??0CDirItem@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CDirItem@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CDirItem@@QAE@XZ ENDP				; CDirItem::CDirItem
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsDir@CDirItem@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsDir@CDirItem@@QBE_NXZ PROC				; CDirItem::IsDir, COMDAT
; _this$ = ecx
; Line 70
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+60]
	and	eax, 16					; 00000010H
	neg	eax
	sbb	eax, eax
	neg	eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsDir@CDirItem@@QBE_NXZ ENDP				; CDirItem::IsDir
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CFinishArchiveStat@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CFinishArchiveStat@@QAE@XZ PROC			; CFinishArchiveStat::CFinishArchiveStat, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\update.h
; Line 167
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CFinishArchiveStat@@QAE@XZ ENDP			; CFinishArchiveStat::CFinishArchiveStat
_TEXT	ENDS
EXTRN	?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@I@Z:PROC ; UnicodeStringToMultiByte
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetAnsiString@@YG?AVAString@@ABVUString@@@Z
_TEXT	SEGMENT
$T77725 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_unicodeString$ = 12					; size = 4
?GetAnsiString@@YG?AVAString@@ABVUString@@@Z PROC	; GetAnsiString, COMDAT
; File c:\workspace\7z1505-src\cpp\common\stringconvert.h
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR $T77725[ebp], 0
	push	0
	mov	eax, DWORD PTR _unicodeString$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	call	?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@I@Z ; UnicodeStringToMultiByte
	mov	edx, DWORD PTR $T77725[ebp]
	or	edx, 1
	mov	DWORD PTR $T77725[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?GetAnsiString@@YG?AVAString@@ABVUString@@@Z ENDP	; GetAnsiString
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CLibrary@NDLL@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CLibrary@NDLL@NWindows@@QAE@XZ PROC			; NWindows::NDLL::CLibrary::CLibrary, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\dll.h
; Line 27
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CLibrary@NDLL@NWindows@@QAE@XZ ENDP			; NWindows::NDLL::CLibrary::CLibrary
_TEXT	ENDS
EXTRN	?Free@CLibrary@NDLL@NWindows@@QAE_NXZ:PROC	; NWindows::NDLL::CLibrary::Free
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CLibrary@NDLL@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CLibrary@NDLL@NWindows@@QAE@XZ PROC			; NWindows::NDLL::CLibrary::~CLibrary, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Free@CLibrary@NDLL@NWindows@@QAE_NXZ	; NWindows::NDLL::CLibrary::Free
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CLibrary@NDLL@NWindows@@QAE@XZ ENDP			; NWindows::NDLL::CLibrary::~CLibrary
_TEXT	ENDS
EXTRN	__imp__GetProcAddress@8:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetProc@CLibrary@NDLL@NWindows@@QBEP6GHXZPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_procName$ = 8						; size = 4
?GetProc@CLibrary@NDLL@NWindows@@QBEP6GHXZPBD@Z PROC	; NWindows::NDLL::CLibrary::GetProc, COMDAT
; _this$ = ecx
; Line 49
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _procName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetProc@CLibrary@NDLL@NWindows@@QBEP6GHXZPBD@Z ENDP	; NWindows::NDLL::CLibrary::GetProc
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CTempDir@NDir@NFile@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CTempDir@NDir@NFile@NWindows@@QAE@XZ PROC		; NWindows::NFile::NDir::CTempDir::CTempDir, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\filedir.h
; Line 71
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0UString@@QAE@XZ			; UString::UString
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CTempDir@NDir@NFile@NWindows@@QAE@XZ ENDP		; NWindows::NFile::NDir::CTempDir::CTempDir
_TEXT	ENDS
EXTRN	?Remove@CTempDir@NDir@NFile@NWindows@@QAE_NXZ:PROC ; NWindows::NFile::NDir::CTempDir::Remove
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CTempDir@NDir@NFile@NWindows@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CTempDir@NDir@NFile@NWindows@@QAE@XZ$0
__ehfuncinfo$??1CTempDir@NDir@NFile@NWindows@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CTempDir@NDir@NFile@NWindows@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CTempDir@NDir@NFile@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CTempDir@NDir@NFile@NWindows@@QAE@XZ PROC		; NWindows::NFile::NDir::CTempDir::~CTempDir, COMDAT
; _this$ = ecx
; Line 72
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CTempDir@NDir@NFile@NWindows@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Remove@CTempDir@NDir@NFile@NWindows@@QAE_NXZ ; NWindows::NFile::NDir::CTempDir::Remove
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CTempDir@NDir@NFile@NWindows@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$??1CTempDir@NDir@NFile@NWindows@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CTempDir@NDir@NFile@NWindows@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CTempDir@NDir@NFile@NWindows@@QAE@XZ ENDP		; NWindows::NFile::NDir::CTempDir::~CTempDir
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetPath@CTempDir@NDir@NFile@NWindows@@QBEABVUString@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPath@CTempDir@NDir@NFile@NWindows@@QBEABVUString@@XZ PROC ; NWindows::NFile::NDir::CTempDir::GetPath, COMDAT
; _this$ = ecx
; Line 73
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPath@CTempDir@NDir@NFile@NWindows@@QBEABVUString@@XZ ENDP ; NWindows::NFile::NDir::CTempDir::GetPath
_TEXT	ENDS
EXTRN	?GetCurrentDir@NDir@NFile@NWindows@@YG_NAAVUString@@@Z:PROC ; NWindows::NFile::NDir::GetCurrentDir
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CCurrentDirRestorer@NDir@NFile@NWindows@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CCurrentDirRestorer@NDir@NFile@NWindows@@QAE@XZ$0
__ehfuncinfo$??0CCurrentDirRestorer@NDir@NFile@NWindows@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CCurrentDirRestorer@NDir@NFile@NWindows@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CCurrentDirRestorer@NDir@NFile@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CCurrentDirRestorer@NDir@NFile@NWindows@@QAE@XZ PROC	; NWindows::NFile::NDir::CCurrentDirRestorer::CCurrentDirRestorer, COMDAT
; _this$ = ecx
; Line 87
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CCurrentDirRestorer@NDir@NFile@NWindows@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 1
; Line 88
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?GetCurrentDir@NDir@NFile@NWindows@@YG_NAAVUString@@@Z ; NWindows::NFile::NDir::GetCurrentDir
; Line 89
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CCurrentDirRestorer@NDir@NFile@NWindows@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$??0CCurrentDirRestorer@NDir@NFile@NWindows@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CCurrentDirRestorer@NDir@NFile@NWindows@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CCurrentDirRestorer@NDir@NFile@NWindows@@QAE@XZ ENDP	; NWindows::NFile::NDir::CCurrentDirRestorer::CCurrentDirRestorer
PUBLIC	??9@YG_NABVUString@@0@Z				; operator!=
EXTRN	?SetCurrentDir@NDir@NFile@NWindows@@YG_NPB_W@Z:PROC ; NWindows::NFile::NDir::SetCurrentDir
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CCurrentDirRestorer@NDir@NFile@NWindows@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CCurrentDirRestorer@NDir@NFile@NWindows@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CCurrentDirRestorer@NDir@NFile@NWindows@@QAE@XZ$1
__ehfuncinfo$??1CCurrentDirRestorer@NDir@NFile@NWindows@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CCurrentDirRestorer@NDir@NFile@NWindows@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CCurrentDirRestorer@NDir@NFile@NWindows@@QAE@XZ
_TEXT	SEGMENT
_s$ = -32						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CCurrentDirRestorer@NDir@NFile@NWindows@@QAE@XZ PROC	; NWindows::NFile::NDir::CCurrentDirRestorer::~CCurrentDirRestorer, COMDAT
; _this$ = ecx
; Line 91
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CCurrentDirRestorer@NDir@NFile@NWindows@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 92
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN3@CCurrentDi
; Line 93
	jmp	SHORT $LN4@CCurrentDi
$LN3@CCurrentDi:
; Line 94
	lea	ecx, DWORD PTR _s$[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
; Line 95
	lea	edx, DWORD PTR _s$[ebp]
	push	edx
	call	?GetCurrentDir@NDir@NFile@NWindows@@YG_NAAVUString@@@Z ; NWindows::NFile::NDir::GetCurrentDir
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@CCurrentDi
; Line 96
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR _s$[ebp]
	push	edx
	call	??9@YG_NABVUString@@0@Z			; operator!=
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@CCurrentDi
; Line 97
	mov	ecx, DWORD PTR _this$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	?SetCurrentDir@NDir@NFile@NWindows@@YG_NPB_W@Z ; NWindows::NFile::NDir::SetCurrentDir
$LN2@CCurrentDi:
; Line 98
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _s$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
$LN4@CCurrentDi:
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@CCurrentDi
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN11@CCurrentDi:
	DD	1
	DD	$LN10@CCurrentDi
$LN10@CCurrentDi:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN8@CCurrentDi
$LN8@CCurrentDi:
	DB	115					; 00000073H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CCurrentDirRestorer@NDir@NFile@NWindows@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??1CCurrentDirRestorer@NDir@NFile@NWindows@@QAE@XZ$1:
	lea	ecx, DWORD PTR _s$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$??1CCurrentDirRestorer@NDir@NFile@NWindows@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CCurrentDirRestorer@NDir@NFile@NWindows@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CCurrentDirRestorer@NDir@NFile@NWindows@@QAE@XZ ENDP	; NWindows::NFile::NDir::CCurrentDirRestorer::~CCurrentDirRestorer
EXTRN	__imp__wcscmp:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??9@YG_NABVUString@@0@Z
_TEXT	SEGMENT
tv77 = -4						; size = 4
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
??9@YG_NABVUString@@0@Z PROC				; operator!=, COMDAT
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 620
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, DWORD PTR _s1$[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	mov	esi, eax
	mov	ecx, DWORD PTR _s2$[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	cmp	esi, eax
	jne	SHORT $LN3@operator@2
	mov	ecx, DWORD PTR _s2$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _s1$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	DWORD PTR __imp__wcscmp
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN3@operator@2
	mov	DWORD PTR tv77[ebp], 0
	jmp	SHORT $LN4@operator@2
$LN3@operator@2:
	mov	DWORD PTR tv77[ebp], 1
$LN4@operator@2:
	mov	al, BYTE PTR tv77[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??9@YG_NABVUString@@0@Z ENDP				; operator!=
_TEXT	ENDS
EXTRN	?Clear@CTempFiles@@AAEXXZ:PROC			; CTempFiles::Clear
;	COMDAT xdata$x
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\tempfiles.h
xdata$x	SEGMENT
__unwindtable$??1CTempFiles@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CTempFiles@@QAE@XZ$0
__ehfuncinfo$??1CTempFiles@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CTempFiles@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CTempFiles@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CTempFiles@@QAE@XZ PROC				; CTempFiles::~CTempFiles, COMDAT
; _this$ = ecx
; Line 13
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CTempFiles@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@CTempFiles@@AAEXXZ		; CTempFiles::Clear
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CTempFiles@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
__ehhandler$??1CTempFiles@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CTempFiles@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CTempFiles@@QAE@XZ ENDP				; CTempFiles::~CTempFiles
PUBLIC	?GetSize@COutMultiVolStream@@QBE_KXZ		; COutMultiVolStream::GetSize
PUBLIC	?GetSize@CStdOutFileStream@@QBE_KXZ		; CStdOutFileStream::GetSize
PUBLIC	??A?$CObjectVector@UCDirItem@@@@QBEABUCDirItem@@I@Z ; CObjectVector<CDirItem>::operator[]
PUBLIC	??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z	; CObjectVector<UString>::operator=
PUBLIC	?AreAllFilesClosed@CArchiveUpdateCallback@@QBE_NXZ ; CArchiveUpdateCallback::AreAllFilesClosed
PUBLIC	??B?$CMyComPtr@UIArchiveUpdateCallback@@@@QBEPAUIArchiveUpdateCallback@@XZ ; CMyComPtr<IArchiveUpdateCallback>::operator IArchiveUpdateCallback *
PUBLIC	?Init@CTailOutStream@@QAEXXZ			; CTailOutStream::Init
PUBLIC	??4?$CMyComPtr@UIOutStream@@@@QAEPAUIOutStream@@ABV0@@Z ; CMyComPtr<IOutStream>::operator=
PUBLIC	??0CTailOutStream@@QAE@XZ			; CTailOutStream::CTailOutStream
PUBLIC	??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->
PUBLIC	??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *
PUBLIC	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
PUBLIC	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@ABV0@@Z ; CMyComPtr<ISequentialOutStream>::operator=
PUBLIC	??1?$CMyComPtr@UIInStream@@@@QAE@XZ		; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
PUBLIC	?Open@CInFileStream@@QAE_NPB_W@Z		; CInFileStream::Open
PUBLIC	??0?$CMyComPtr@UIInStream@@@@QAE@PAUIInStream@@@Z ; CMyComPtr<IInStream>::CMyComPtr<IInStream>
PUBLIC	?Init@COutMultiVolStream@@QAEXXZ		; COutMultiVolStream::Init
PUBLIC	??4?$CRecordVector@_K@@QAEAAV0@ABV0@@Z		; CRecordVector<unsigned __int64>::operator=
PUBLIC	??0COutMultiVolStream@@QAE@XZ			; COutMultiVolStream::COutMultiVolStream
PUBLIC	?GetGlobalOffset@CArc@@QBE_JXZ			; CArc::GetGlobalOffset
PUBLIC	??1?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallback>::~CMyComPtr<IArchiveUpdateCallback>
PUBLIC	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ	; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
PUBLIC	??B?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator IOutStream *
PUBLIC	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=
PUBLIC	??0CStdOutFileStream@@QAE@XZ			; CStdOutFileStream::CStdOutFileStream
PUBLIC	__TI1H
PUBLIC	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ	; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
PUBLIC	??4?$CMyComPtr@UIInArchive@@@@QAEPAUIInArchive@@ABV0@@Z ; CMyComPtr<IInArchive>::operator=
PUBLIC	??0?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@PAUIArchiveUpdateCallback@@@Z ; CMyComPtr<IArchiveUpdateCallback>::CMyComPtr<IArchiveUpdateCallback>
PUBLIC	??A?$CRecordVector@UCUpdatePair2@@@@QAEAAUCUpdatePair2@@I@Z ; CRecordVector<CUpdatePair2>::operator[]
PUBLIC	?Size@?$CRecordVector@UCUpdatePair2@@@@QBEIXZ	; CRecordVector<CUpdatePair2>::Size
PUBLIC	??1?$CRecordVector@UCUpdatePair@@@@QAE@XZ	; CRecordVector<CUpdatePair>::~CRecordVector<CUpdatePair>
PUBLIC	??0CUpdateProduceCallbackImp@@QAE@PBV?$CObjectVector@UCArcItem@@@@PAUIUpdateCallbackUI@@@Z ; CUpdateProduceCallbackImp::CUpdateProduceCallbackImp
PUBLIC	??0?$CRecordVector@UCUpdatePair@@@@QAE@XZ	; CRecordVector<CUpdatePair>::CRecordVector<CUpdatePair>
PUBLIC	?Add@?$CRecordVector@UCUpdatePair2@@@@QAEIUCUpdatePair2@@@Z ; CRecordVector<CUpdatePair2>::Add
PUBLIC	??1?$CRecordVector@UCUpdatePair2@@@@QAE@XZ	; CRecordVector<CUpdatePair2>::~CRecordVector<CUpdatePair2>
PUBLIC	?IsItemAnti@CArc@@QBEJIAA_N@Z			; CArc::IsItemAnti
PUBLIC	?SetAs_NoChangeArcItem@CUpdatePair2@@QAEXH@Z	; CUpdatePair2::SetAs_NoChangeArcItem
PUBLIC	??0CUpdatePair2@@QAE@XZ				; CUpdatePair2::CUpdatePair2
PUBLIC	?Left@UString@@QBE?AV1@I@Z			; UString::Left
PUBLIC	??A?$CObjectVector@UCRenamePair@@@@QBEABUCRenamePair@@I@Z ; CObjectVector<CRenamePair>::operator[]
PUBLIC	?Size@?$CObjectVector@UCArcItem@@@@QBEIXZ	; CObjectVector<CArcItem>::Size
PUBLIC	?Size@?$CObjectVector@UCRenamePair@@@@QBEIXZ	; CObjectVector<CRenamePair>::Size
PUBLIC	??0?$CRecordVector@UCUpdatePair2@@@@QAE@XZ	; CRecordVector<CUpdatePair2>::CRecordVector<CUpdatePair2>
PUBLIC	?Flags_NtSecure@CArcInfoEx@@QBE_NXZ		; CArcInfoEx::Flags_NtSecure
PUBLIC	?Flags_AltStreams@CArcInfoEx@@QBE_NXZ		; CArcInfoEx::Flags_AltStreams
PUBLIC	??A?$CObjectVector@UCArcInfoEx@@@@QAEAAUCArcInfoEx@@I@Z ; CObjectVector<CArcInfoEx>::operator[]
PUBLIC	??C?$CMyComPtr@UIOutArchive@@@@QBEPAUIOutArchive@@XZ ; CMyComPtr<IOutArchive>::operator->
PUBLIC	??B?$CMyComPtr@UIOutArchive@@@@QBEPAUIOutArchive@@XZ ; CMyComPtr<IOutArchive>::operator IOutArchive *
PUBLIC	?CreateOutArchive@CCodecs@@QBEJIAAV?$CMyComPtr@UIOutArchive@@@@@Z ; CCodecs::CreateOutArchive
PUBLIC	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ		; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
PUBLIC	__TI2CPAD
PUBLIC	??$QueryInterface@UIOutArchive@@@?$CMyComPtr@UIInArchive@@@@QBEJABU_GUID@@PAPAUIOutArchive@@@Z ; CMyComPtr<IInArchive>::QueryInterface<IOutArchive>
PUBLIC	??I?$CMyComPtr@UIOutArchive@@@@QAEPAPAUIOutArchive@@XZ ; CMyComPtr<IOutArchive>::operator&
PUBLIC	??0?$CMyComPtr@UIInArchive@@@@QAE@ABV0@@Z	; CMyComPtr<IInArchive>::CMyComPtr<IInArchive>
PUBLIC	??1?$CMyComPtr@UIOutArchive@@@@QAE@XZ		; CMyComPtr<IOutArchive>::~CMyComPtr<IOutArchive>
PUBLIC	??0?$CMyComPtr@UIOutArchive@@@@QAE@XZ		; CMyComPtr<IOutArchive>::CMyComPtr<IOutArchive>
PUBLIC	__$ArrayPad$
PUBLIC	__CTA1H
PUBLIC	__CT??_R0H@84
PUBLIC	??_R0H@8					; int `RTTI Type Descriptor'
EXTRN	?GetSize@COutFileStream@@QAEJPA_K@Z:PROC	; COutFileStream::GetSize
EXTRN	__imp__CompareFileTime@8:PROC
EXTRN	?CopyStream_ExactSize@NCompress@@YGJPAUISequentialInStream@@PAUISequentialOutStream@@_KPAUICompressProgressInfo@@@Z:PROC ; NCompress::CopyStream_ExactSize
EXTRN	?CopyStream@NCompress@@YGJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z:PROC ; NCompress::CopyStream
EXTRN	??0CInFileStream@@QAE@XZ:PROC			; CInFileStream::CInFileStream
EXTRN	?SetProperties@@YGJPAUIUnknown@@ABV?$CObjectVector@UCProperty@@@@@Z:PROC ; SetProperties
EXTRN	?CreateComplexDir@NDir@NFile@NWindows@@YG_NPB_W@Z:PROC ; NWindows::NFile::NDir::CreateComplexDir
EXTRN	?GetOnlyDirPrefix@NDir@NFile@NWindows@@YG_NPB_WAAVUString@@@Z:PROC ; NWindows::NFile::NDir::GetOnlyDirPrefix
EXTRN	??0CArchiveUpdateCallback@@QAE@XZ:PROC		; CArchiveUpdateCallback::CArchiveUpdateCallback
EXTRN	?UpdateProduce@@YGXABV?$CRecordVector@UCUpdatePair@@@@ABUCActionSet@NUpdateArchive@@AAV?$CRecordVector@UCUpdatePair2@@@@PAUIUpdateProduceCallback@@@Z:PROC ; UpdateProduce
EXTRN	?GetUpdatePairInfoList@@YGXABVCDirItems@@ABV?$CObjectVector@UCArcItem@@@@W4EEnum@NFileTimeType@@AAV?$CRecordVector@UCUpdatePair@@@@@Z:PROC ; GetUpdatePairInfoList
EXTRN	??YUString@@QAEAAV0@PB_W@Z:PROC			; UString::operator+=
EXTRN	?FindAltStreamColon_in_Path@@YGHPB_W@Z:PROC	; FindAltStreamColon_in_Path
EXTRN	_IID_IOutArchive:BYTE
;	COMDAT ??_R0H@8
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\update.cpp
_DATA	SEGMENT
??_R0H@8 DD	FLAT:??_7type_info@@6B@			; int `RTTI Type Descriptor'
	DD	00H
	DB	'.H', 00H
_DATA	ENDS
;	COMDAT __CT??_R0H@84
xdata$x	SEGMENT
__CT??_R0H@84 DD 01H
	DD	FLAT:??_R0H@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	00H
xdata$x	ENDS
;	COMDAT __CTA1H
xdata$x	SEGMENT
__CTA1H	DD	01H
	DD	FLAT:__CT??_R0H@84
xdata$x	ENDS
;	COMDAT __TI1H
xdata$x	SEGMENT
__TI1H	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA1H
xdata$x	ENDS
;	COMDAT __TI2CPAD
xdata$x	SEGMENT
__TI2CPAD DD	01H
	DD	00H
	DD	00H
	DD	FLAT:__CTA2PAD
xdata$x	ENDS
xdata$x	SEGMENT
__ehfuncinfo$?Compress@@YGJABUCUpdateOptions@@_NPAVCCodecs@@ABUCActionSet@NUpdateArchive@@PBVCArc@@AAUCArchivePath@@ABV?$CObjectVector@UCArcItem@@@@PAEABVCDirItems@@PBUCDirItem@@AAVCTempFiles@@AAUCUpdateErrorInfo@@PAUIUpdateCallbackUI@@AAUCFinishArchiveStat@@@Z DD 019930522H
	DD	01bH
	DD	FLAT:__unwindtable$?Compress@@YGJABUCUpdateOptions@@_NPAVCCodecs@@ABUCActionSet@NUpdateArchive@@PBVCArc@@AAUCArchivePath@@ABV?$CObjectVector@UCArcItem@@@@PAEABVCDirItems@@PBUCDirItem@@AAVCTempFiles@@AAUCUpdateErrorInfo@@PAUIUpdateCallbackUI@@AAUCFinishArchiveStat@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Compress@@YGJABUCUpdateOptions@@_NPAVCCodecs@@ABUCActionSet@NUpdateArchive@@PBVCArc@@AAUCArchivePath@@ABV?$CObjectVector@UCArcItem@@@@PAEABVCDirItems@@PBUCDirItem@@AAVCTempFiles@@AAUCUpdateErrorInfo@@PAUIUpdateCallbackUI@@AAUCFinishArchiveStat@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Compress@@YGJABUCUpdateOptions@@_NPAVCCodecs@@ABUCActionSet@NUpdateArchive@@PBVCArc@@AAUCArchivePath@@ABV?$CObjectVector@UCArcItem@@@@PAEABVCDirItems@@PBUCDirItem@@AAVCTempFiles@@AAUCUpdateErrorInfo@@PAUIUpdateCallbackUI@@AAUCFinishArchiveStat@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Compress@@YGJABUCUpdateOptions@@_NPAVCCodecs@@ABUCActionSet@NUpdateArchive@@PBVCArc@@AAUCArchivePath@@ABV?$CObjectVector@UCArcItem@@@@PAEABVCDirItems@@PBUCDirItem@@AAVCTempFiles@@AAUCUpdateErrorInfo@@PAUIUpdateCallbackUI@@AAUCFinishArchiveStat@@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?Compress@@YGJABUCUpdateOptions@@_NPAVCCodecs@@ABUCActionSet@NUpdateArchive@@PBVCArc@@AAUCArchivePath@@ABV?$CObjectVector@UCArcItem@@@@PAEABVCDirItems@@PBUCDirItem@@AAVCTempFiles@@AAUCUpdateErrorInfo@@PAUIUpdateCallbackUI@@AAUCFinishArchiveStat@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?Compress@@YGJABUCUpdateOptions@@_NPAVCCodecs@@ABUCActionSet@NUpdateArchive@@PBVCArc@@AAUCArchivePath@@ABV?$CObjectVector@UCArcItem@@@@PAEABVCDirItems@@PBUCDirItem@@AAVCTempFiles@@AAUCUpdateErrorInfo@@PAUIUpdateCallbackUI@@AAUCFinishArchiveStat@@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?Compress@@YGJABUCUpdateOptions@@_NPAVCCodecs@@ABUCActionSet@NUpdateArchive@@PBVCArc@@AAUCArchivePath@@ABV?$CObjectVector@UCArcItem@@@@PAEABVCDirItems@@PBUCDirItem@@AAVCTempFiles@@AAUCUpdateErrorInfo@@PAUIUpdateCallbackUI@@AAUCFinishArchiveStat@@@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?Compress@@YGJABUCUpdateOptions@@_NPAVCCodecs@@ABUCActionSet@NUpdateArchive@@PBVCArc@@AAUCArchivePath@@ABV?$CObjectVector@UCArcItem@@@@PAEABVCDirItems@@PBUCDirItem@@AAVCTempFiles@@AAUCUpdateErrorInfo@@PAUIUpdateCallbackUI@@AAUCFinishArchiveStat@@@Z$5
	DD	03H
	DD	FLAT:__unwindfunclet$?Compress@@YGJABUCUpdateOptions@@_NPAVCCodecs@@ABUCActionSet@NUpdateArchive@@PBVCArc@@AAUCArchivePath@@ABV?$CObjectVector@UCArcItem@@@@PAEABVCDirItems@@PBUCDirItem@@AAVCTempFiles@@AAUCUpdateErrorInfo@@PAUIUpdateCallbackUI@@AAUCFinishArchiveStat@@@Z$6
	DD	03H
	DD	FLAT:__unwindfunclet$?Compress@@YGJABUCUpdateOptions@@_NPAVCCodecs@@ABUCActionSet@NUpdateArchive@@PBVCArc@@AAUCArchivePath@@ABV?$CObjectVector@UCArcItem@@@@PAEABVCDirItems@@PBUCDirItem@@AAVCTempFiles@@AAUCUpdateErrorInfo@@PAUIUpdateCallbackUI@@AAUCFinishArchiveStat@@@Z$7
	DD	03H
	DD	FLAT:__unwindfunclet$?Compress@@YGJABUCUpdateOptions@@_NPAVCCodecs@@ABUCActionSet@NUpdateArchive@@PBVCArc@@AAUCArchivePath@@ABV?$CObjectVector@UCArcItem@@@@PAEABVCDirItems@@PBUCDirItem@@AAVCTempFiles@@AAUCUpdateErrorInfo@@PAUIUpdateCallbackUI@@AAUCFinishArchiveStat@@@Z$8
	DD	08H
	DD	FLAT:__unwindfunclet$?Compress@@YGJABUCUpdateOptions@@_NPAVCCodecs@@ABUCActionSet@NUpdateArchive@@PBVCArc@@AAUCArchivePath@@ABV?$CObjectVector@UCArcItem@@@@PAEABVCDirItems@@PBUCDirItem@@AAVCTempFiles@@AAUCUpdateErrorInfo@@PAUIUpdateCallbackUI@@AAUCFinishArchiveStat@@@Z$9
	DD	09H
	DD	FLAT:__unwindfunclet$?Compress@@YGJABUCUpdateOptions@@_NPAVCCodecs@@ABUCActionSet@NUpdateArchive@@PBVCArc@@AAUCArchivePath@@ABV?$CObjectVector@UCArcItem@@@@PAEABVCDirItems@@PBUCDirItem@@AAVCTempFiles@@AAUCUpdateErrorInfo@@PAUIUpdateCallbackUI@@AAUCFinishArchiveStat@@@Z$10
	DD	0aH
	DD	FLAT:__unwindfunclet$?Compress@@YGJABUCUpdateOptions@@_NPAVCCodecs@@ABUCActionSet@NUpdateArchive@@PBVCArc@@AAUCArchivePath@@ABV?$CObjectVector@UCArcItem@@@@PAEABVCDirItems@@PBUCDirItem@@AAVCTempFiles@@AAUCUpdateErrorInfo@@PAUIUpdateCallbackUI@@AAUCFinishArchiveStat@@@Z$11
	DD	0bH
	DD	FLAT:__unwindfunclet$?Compress@@YGJABUCUpdateOptions@@_NPAVCCodecs@@ABUCActionSet@NUpdateArchive@@PBVCArc@@AAUCArchivePath@@ABV?$CObjectVector@UCArcItem@@@@PAEABVCDirItems@@PBUCDirItem@@AAVCTempFiles@@AAUCUpdateErrorInfo@@PAUIUpdateCallbackUI@@AAUCFinishArchiveStat@@@Z$12
	DD	0aH
	DD	FLAT:__unwindfunclet$?Compress@@YGJABUCUpdateOptions@@_NPAVCCodecs@@ABUCActionSet@NUpdateArchive@@PBVCArc@@AAUCArchivePath@@ABV?$CObjectVector@UCArcItem@@@@PAEABVCDirItems@@PBUCDirItem@@AAVCTempFiles@@AAUCUpdateErrorInfo@@PAUIUpdateCallbackUI@@AAUCFinishArchiveStat@@@Z$13
	DD	0aH
	DD	FLAT:__unwindfunclet$?Compress@@YGJABUCUpdateOptions@@_NPAVCCodecs@@ABUCActionSet@NUpdateArchive@@PBVCArc@@AAUCArchivePath@@ABV?$CObjectVector@UCArcItem@@@@PAEABVCDirItems@@PBUCDirItem@@AAVCTempFiles@@AAUCUpdateErrorInfo@@PAUIUpdateCallbackUI@@AAUCFinishArchiveStat@@@Z$14
	DD	0aH
	DD	FLAT:__unwindfunclet$?Compress@@YGJABUCUpdateOptions@@_NPAVCCodecs@@ABUCActionSet@NUpdateArchive@@PBVCArc@@AAUCArchivePath@@ABV?$CObjectVector@UCArcItem@@@@PAEABVCDirItems@@PBUCDirItem@@AAVCTempFiles@@AAUCUpdateErrorInfo@@PAUIUpdateCallbackUI@@AAUCFinishArchiveStat@@@Z$15
	DD	0fH
	DD	FLAT:__unwindfunclet$?Compress@@YGJABUCUpdateOptions@@_NPAVCCodecs@@ABUCActionSet@NUpdateArchive@@PBVCArc@@AAUCArchivePath@@ABV?$CObjectVector@UCArcItem@@@@PAEABVCDirItems@@PBUCDirItem@@AAVCTempFiles@@AAUCUpdateErrorInfo@@PAUIUpdateCallbackUI@@AAUCFinishArchiveStat@@@Z$16
	DD	0fH
	DD	FLAT:__unwindfunclet$?Compress@@YGJABUCUpdateOptions@@_NPAVCCodecs@@ABUCActionSet@NUpdateArchive@@PBVCArc@@AAUCArchivePath@@ABV?$CObjectVector@UCArcItem@@@@PAEABVCDirItems@@PBUCDirItem@@AAVCTempFiles@@AAUCUpdateErrorInfo@@PAUIUpdateCallbackUI@@AAUCFinishArchiveStat@@@Z$17
	DD	0aH
	DD	FLAT:__unwindfunclet$?Compress@@YGJABUCUpdateOptions@@_NPAVCCodecs@@ABUCActionSet@NUpdateArchive@@PBVCArc@@AAUCArchivePath@@ABV?$CObjectVector@UCArcItem@@@@PAEABVCDirItems@@PBUCDirItem@@AAVCTempFiles@@AAUCUpdateErrorInfo@@PAUIUpdateCallbackUI@@AAUCFinishArchiveStat@@@Z$18
	DD	0aH
	DD	FLAT:__unwindfunclet$?Compress@@YGJABUCUpdateOptions@@_NPAVCCodecs@@ABUCActionSet@NUpdateArchive@@PBVCArc@@AAUCArchivePath@@ABV?$CObjectVector@UCArcItem@@@@PAEABVCDirItems@@PBUCDirItem@@AAVCTempFiles@@AAUCUpdateErrorInfo@@PAUIUpdateCallbackUI@@AAUCFinishArchiveStat@@@Z$19
	DD	0aH
	DD	FLAT:__unwindfunclet$?Compress@@YGJABUCUpdateOptions@@_NPAVCCodecs@@ABUCActionSet@NUpdateArchive@@PBVCArc@@AAUCArchivePath@@ABV?$CObjectVector@UCArcItem@@@@PAEABVCDirItems@@PBUCDirItem@@AAVCTempFiles@@AAUCUpdateErrorInfo@@PAUIUpdateCallbackUI@@AAUCFinishArchiveStat@@@Z$20
	DD	0aH
	DD	FLAT:__unwindfunclet$?Compress@@YGJABUCUpdateOptions@@_NPAVCCodecs@@ABUCActionSet@NUpdateArchive@@PBVCArc@@AAUCArchivePath@@ABV?$CObjectVector@UCArcItem@@@@PAEABVCDirItems@@PBUCDirItem@@AAVCTempFiles@@AAUCUpdateErrorInfo@@PAUIUpdateCallbackUI@@AAUCFinishArchiveStat@@@Z$21
	DD	015H
	DD	FLAT:__unwindfunclet$?Compress@@YGJABUCUpdateOptions@@_NPAVCCodecs@@ABUCActionSet@NUpdateArchive@@PBVCArc@@AAUCArchivePath@@ABV?$CObjectVector@UCArcItem@@@@PAEABVCDirItems@@PBUCDirItem@@AAVCTempFiles@@AAUCUpdateErrorInfo@@PAUIUpdateCallbackUI@@AAUCFinishArchiveStat@@@Z$22
	DD	016H
	DD	FLAT:__unwindfunclet$?Compress@@YGJABUCUpdateOptions@@_NPAVCCodecs@@ABUCActionSet@NUpdateArchive@@PBVCArc@@AAUCArchivePath@@ABV?$CObjectVector@UCArcItem@@@@PAEABVCDirItems@@PBUCDirItem@@AAVCTempFiles@@AAUCUpdateErrorInfo@@PAUIUpdateCallbackUI@@AAUCFinishArchiveStat@@@Z$23
	DD	016H
	DD	FLAT:__unwindfunclet$?Compress@@YGJABUCUpdateOptions@@_NPAVCCodecs@@ABUCActionSet@NUpdateArchive@@PBVCArc@@AAUCArchivePath@@ABV?$CObjectVector@UCArcItem@@@@PAEABVCDirItems@@PBUCDirItem@@AAVCTempFiles@@AAUCUpdateErrorInfo@@PAUIUpdateCallbackUI@@AAUCFinishArchiveStat@@@Z$24
	DD	0aH
	DD	FLAT:__unwindfunclet$?Compress@@YGJABUCUpdateOptions@@_NPAVCCodecs@@ABUCActionSet@NUpdateArchive@@PBVCArc@@AAUCArchivePath@@ABV?$CObjectVector@UCArcItem@@@@PAEABVCDirItems@@PBUCDirItem@@AAVCTempFiles@@AAUCUpdateErrorInfo@@PAUIUpdateCallbackUI@@AAUCFinishArchiveStat@@@Z$25
	DD	019H
	DD	FLAT:__unwindfunclet$?Compress@@YGJABUCUpdateOptions@@_NPAVCCodecs@@ABUCActionSet@NUpdateArchive@@PBVCArc@@AAUCArchivePath@@ABV?$CObjectVector@UCArcItem@@@@PAEABVCDirItems@@PBUCDirItem@@AAVCTempFiles@@AAUCUpdateErrorInfo@@PAUIUpdateCallbackUI@@AAUCFinishArchiveStat@@@Z$26
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv777 = -868						; size = 4
tv762 = -864						; size = 4
tv726 = -860						; size = 4
tv1354 = -856						; size = 4
tv619 = -852						; size = 4
tv582 = -848						; size = 4
tv950 = -844						; size = 4
tv209 = -840						; size = 4
tv530 = -836						; size = 4
tv1268 = -832						; size = 8
tv928 = -824						; size = 4
tv325 = -820						; size = 4
tv926 = -816						; size = 4
tv468 = -812						; size = 4
tv453 = -808						; size = 4
tv440 = -804						; size = 4
tv921 = -800						; size = 4
tv371 = -796						; size = 4
tv324 = -792						; size = 4
tv136 = -788						; size = 4
tv130 = -784						; size = 4
$T77843 = -780						; size = 4
$T77842 = -776						; size = 4
$T77841 = -772						; size = 4
$T77838 = -768						; size = 4
$T77837 = -764						; size = 4
$T77836 = -760						; size = 4
$T77835 = -756						; size = 4
$T77834 = -752						; size = 4
$T77833 = -748						; size = 4
$T77832 = -744						; size = 4
$T77831 = -740						; size = 4
$T77830 = -736						; size = 4
$T77827 = -732						; size = 4
$T77826 = -728						; size = 4
$T77825 = -724						; size = 4
$T77822 = -720						; size = 4
$T77821 = -716						; size = 4
$T77820 = -712						; size = 4
$T77819 = -708						; size = 12
$T77816 = -696						; size = 4
$T77815 = -692						; size = 4
$T77814 = -688						; size = 4
$T77813 = -684						; size = 4
$T77812 = -680						; size = 4
$T77811 = -676						; size = 12
$T77810 = -664						; size = 12
$T77807 = -652						; size = 4
$T77806 = -648						; size = 4
$T77803 = -644						; size = 4
$T77802 = -640						; size = 4
$T77801 = -636						; size = 4
$T77800 = -632						; size = 12
$T77799 = -617						; size = 1
$T77796 = -616						; size = 4
$T77795 = -612						; size = 4
$T77794 = -608						; size = 4
$T77793 = -604						; size = 4
$T77792 = -600						; size = 4
$T77791 = -596						; size = 4
$T77790 = -592						; size = 4
$T77789 = -588						; size = 4
$T77788 = -584						; size = 4
$T77787 = -580						; size = 4
$T77786 = -576						; size = 4
$T77785 = -572						; size = 4
_size$75031 = -564					; size = 8
_ft2$75019 = -552					; size = 4
_pair2$75018 = -548					; size = 4
_i$75014 = -544						; size = 4
_ft$75013 = -536					; size = 8
___result__$75005 = -524				; size = 4
_result$ = -520						; size = 4
_tailStreamSpec$74999 = -516				; size = 4
___result__$74994 = -512				; size = 4
___result__$74991 = -508				; size = 4
_tailStream$ = -500					; size = 4
___result__$74983 = -492				; size = 4
___result__$74979 = -488				; size = 4
___result__$74976 = -484				; size = 4
___result__$74973 = -480				; size = 4
_sfxSize$74972 = -472					; size = 8
_realPath$74967 = -456					; size = 12
_outStreamSpec$74960 = -440				; size = 4
_sfxOutStream$74959 = -432				; size = 4
_sfxStream$74954 = -420					; size = 4
_sfxStreamSpec$74948 = -412				; size = 4
___result__$74944 = -408				; size = 4
_s$74922 = -400						; size = 32
_i$74916 = -364						; size = 4
_realPath$74915 = -356					; size = 12
_isOK$74914 = -337					; size = 1
_volStreamSpec$ = -336					; size = 4
_stdOutFileStreamSpec$ = -332				; size = 4
_outStreamSpec$ = -328					; size = 4
_dirPrefix$74895 = -320					; size = 12
_outStream$ = -300					; size = 4
_outSeekStream$ = -288					; size = 4
_updateCallback$ = -276					; size = 4
_updateCallbackSpec$ = -268				; size = 4
___result__$74842 = -264				; size = 4
_i$74837 = -260						; size = 4
_numItems$74836 = -256					; size = 4
_upCallback$74835 = -248				; size = 12
_updatePairs$74834 = -228				; size = 12
___result__$74734 = -212				; size = 4
_up2$74732 = -204					; size = 20
_mainName$74729 = -176					; size = 12
_colonPos$74727 = -160					; size = 4
_rp$74724 = -156					; size = 4
_j$74720 = -152						; size = 4
_dest$74718 = -144					; size = 12
_needRename$74717 = -125				; size = 1
_ai$74716 = -124					; size = 4
_i$74712 = -120						; size = 4
_newNames$ = -112					; size = 12
_updatePairs2$ = -92					; size = 12
_arcInfo$74606 = -76					; size = 4
___result__$74594 = -72					; size = 4
_value$74593 = -64					; size = 4
_fileTimeType$ = -56					; size = 4
___result__$74587 = -52					; size = 4
_result$74572 = -48					; size = 4
_archive2$74571 = -40					; size = 4
_formatIndex$ = -32					; size = 4
_outArchive$ = -24					; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_options$ = 8						; size = 4
_isUpdatingItself$ = 12					; size = 1
_codecs$ = 16						; size = 4
_actionSet$ = 20					; size = 4
_arc$ = 24						; size = 4
_archivePath$ = 28					; size = 4
_arcItems$ = 32						; size = 4
_processedItemsStatuses$ = 36				; size = 4
_dirItems$ = 40						; size = 4
_parentDirItem$ = 44					; size = 4
_tempFiles$ = 48					; size = 4
_errorInfo$ = 52					; size = 4
_callback$ = 56						; size = 4
_st$ = 60						; size = 4
?Compress@@YGJABUCUpdateOptions@@_NPAVCCodecs@@ABUCActionSet@NUpdateArchive@@PBVCArc@@AAUCArchivePath@@ABV?$CObjectVector@UCArcItem@@@@PAEABVCDirItems@@PBUCDirItem@@AAVCTempFiles@@AAUCUpdateErrorInfo@@PAUIUpdateCallbackUI@@AAUCFinishArchiveStat@@@Z PROC ; Compress
; Line 505
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Compress@@YGJABUCUpdateOptions@@_NPAVCCodecs@@ABUCActionSet@NUpdateArchive@@PBVCArc@@AAUCArchivePath@@ABV?$CObjectVector@UCArcItem@@@@PAEABVCDirItems@@PBUCDirItem@@AAVCTempFiles@@AAUCUpdateErrorInfo@@PAUIUpdateCallbackUI@@AAUCFinishArchiveStat@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 856				; 00000358H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-868]
	mov	ecx, 214				; 000000d6H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 506
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	??0?$CMyComPtr@UIOutArchive@@@@QAE@XZ	; CMyComPtr<IOutArchive>::CMyComPtr<IOutArchive>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 507
	mov	eax, DWORD PTR _options$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _formatIndex$[ebp], ecx
; Line 509
	cmp	DWORD PTR _arc$[ebp], 0
	je	$LN95@Compress
; Line 511
	mov	edx, DWORD PTR _arc$[ebp]
	mov	eax, DWORD PTR [edx+148]
	mov	DWORD PTR _formatIndex$[ebp], eax
; Line 512
	cmp	DWORD PTR _formatIndex$[ebp], 0
	jge	SHORT $LN94@Compress
; Line 513
	mov	DWORD PTR $T77785[ebp], -2147467263	; 80004001H
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	??1?$CMyComPtr@UIOutArchive@@@@QAE@XZ	; CMyComPtr<IOutArchive>::~CMyComPtr<IOutArchive>
	mov	eax, DWORD PTR $T77785[ebp]
	jmp	$LN97@Compress
$LN94@Compress:
; Line 514
	mov	ecx, DWORD PTR _arc$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _archive2$74571[ebp]
	call	??0?$CMyComPtr@UIInArchive@@@@QAE@ABV0@@Z ; CMyComPtr<IInArchive>::CMyComPtr<IInArchive>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
; Line 515
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	??I?$CMyComPtr@UIOutArchive@@@@QAEPAPAUIOutArchive@@XZ ; CMyComPtr<IOutArchive>::operator&
	push	eax
	push	OFFSET _IID_IOutArchive
	lea	ecx, DWORD PTR _archive2$74571[ebp]
	call	??$QueryInterface@UIOutArchive@@@?$CMyComPtr@UIInArchive@@@@QBEJABU_GUID@@PAPAUIOutArchive@@@Z ; CMyComPtr<IInArchive>::QueryInterface<IOutArchive>
	mov	DWORD PTR _result$74572[ebp], eax
; Line 516
	cmp	DWORD PTR _result$74572[ebp], 0
	je	SHORT $LN93@Compress
; Line 517
	mov	edx, DWORD PTR _kUpdateIsNotSupoorted
	mov	DWORD PTR $T77786[ebp], edx
	push	OFFSET __TI2CPAD
	lea	eax, DWORD PTR $T77786[ebp]
	push	eax
	call	__CxxThrowException@8
$LN93@Compress:
; Line 518
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _archive2$74571[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
; Line 519
	jmp	SHORT $LN92@Compress
$LN95@Compress:
; Line 521
	lea	ecx, DWORD PTR _outArchive$[ebp]
	push	ecx
	mov	edx, DWORD PTR _formatIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _codecs$[ebp]
	call	?CreateOutArchive@CCodecs@@QBEJIAAV?$CMyComPtr@UIOutArchive@@@@@Z ; CCodecs::CreateOutArchive
	mov	DWORD PTR ___result__$74587[ebp], eax
	cmp	DWORD PTR ___result__$74587[ebp], 0
	je	SHORT $LN92@Compress
	mov	eax, DWORD PTR ___result__$74587[ebp]
	mov	DWORD PTR $T77787[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	??1?$CMyComPtr@UIOutArchive@@@@QAE@XZ	; CMyComPtr<IOutArchive>::~CMyComPtr<IOutArchive>
	mov	eax, DWORD PTR $T77787[ebp]
	jmp	$LN97@Compress
$LN92@Compress:
; Line 535
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	??B?$CMyComPtr@UIOutArchive@@@@QBEPAUIOutArchive@@XZ ; CMyComPtr<IOutArchive>::operator IOutArchive *
	test	eax, eax
	jne	SHORT $LN90@Compress
; Line 536
	mov	ecx, DWORD PTR _kUpdateIsNotSupoorted
	mov	DWORD PTR $T77788[ebp], ecx
	push	OFFSET __TI2CPAD
	lea	edx, DWORD PTR $T77788[ebp]
	push	edx
	call	__CxxThrowException@8
$LN90@Compress:
; Line 541
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	??C?$CMyComPtr@UIOutArchive@@@@QBEPAUIOutArchive@@XZ ; CMyComPtr<IOutArchive>::operator->
	mov	DWORD PTR tv130[ebp], eax
	mov	esi, esp
	lea	eax, DWORD PTR _value$74593[ebp]
	push	eax
	mov	ecx, DWORD PTR tv130[ebp]
	push	ecx
	mov	edx, DWORD PTR tv130[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$74594[ebp], eax
	cmp	DWORD PTR ___result__$74594[ebp], 0
	je	SHORT $LN89@Compress
	mov	edx, DWORD PTR ___result__$74594[ebp]
	mov	DWORD PTR $T77789[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	??1?$CMyComPtr@UIOutArchive@@@@QAE@XZ	; CMyComPtr<IOutArchive>::~CMyComPtr<IOutArchive>
	mov	eax, DWORD PTR $T77789[ebp]
	jmp	$LN97@Compress
$LN89@Compress:
; Line 543
	mov	eax, DWORD PTR _value$74593[ebp]
	mov	DWORD PTR tv136[ebp], eax
	cmp	DWORD PTR tv136[ebp], 0
	jb	SHORT $LN85@Compress
	cmp	DWORD PTR tv136[ebp], 2
	jbe	SHORT $LN86@Compress
	jmp	SHORT $LN85@Compress
$LN86@Compress:
; Line 548
	mov	ecx, DWORD PTR _value$74593[ebp]
	mov	DWORD PTR _fileTimeType$[ebp], ecx
; Line 549
	jmp	SHORT $LN87@Compress
$LN85@Compress:
; Line 551
	mov	DWORD PTR $T77790[ebp], -2147467259	; 80004005H
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	??1?$CMyComPtr@UIOutArchive@@@@QAE@XZ	; CMyComPtr<IOutArchive>::~CMyComPtr<IOutArchive>
	mov	eax, DWORD PTR $T77790[ebp]
	jmp	$LN97@Compress
$LN87@Compress:
; Line 556
	mov	edx, DWORD PTR _formatIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _codecs$[ebp]
	add	ecx, 8
	call	??A?$CObjectVector@UCArcInfoEx@@@@QAEAAUCArcInfoEx@@I@Z ; CObjectVector<CArcInfoEx>::operator[]
	mov	DWORD PTR _arcInfo$74606[ebp], eax
; Line 557
	mov	eax, DWORD PTR _options$[ebp]
	movzx	ecx, BYTE PTR [eax+242]
	test	ecx, ecx
	je	SHORT $LN84@Compress
	mov	ecx, DWORD PTR _arcInfo$74606[ebp]
	call	?Flags_AltStreams@CArcInfoEx@@QBE_NXZ	; CArcInfoEx::Flags_AltStreams
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN84@Compress
; Line 558
	mov	DWORD PTR $T77791[ebp], -2147467263	; 80004001H
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	??1?$CMyComPtr@UIOutArchive@@@@QAE@XZ	; CMyComPtr<IOutArchive>::~CMyComPtr<IOutArchive>
	mov	eax, DWORD PTR $T77791[ebp]
	jmp	$LN97@Compress
$LN84@Compress:
; Line 559
	mov	eax, DWORD PTR _options$[ebp]
	movzx	ecx, BYTE PTR [eax+240]
	test	ecx, ecx
	je	SHORT $LN83@Compress
	mov	ecx, DWORD PTR _arcInfo$74606[ebp]
	call	?Flags_NtSecure@CArcInfoEx@@QBE_NXZ	; CArcInfoEx::Flags_NtSecure
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN83@Compress
; Line 560
	mov	DWORD PTR $T77792[ebp], -2147467263	; 80004001H
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	??1?$CMyComPtr@UIOutArchive@@@@QAE@XZ	; CMyComPtr<IOutArchive>::~CMyComPtr<IOutArchive>
	mov	eax, DWORD PTR $T77792[ebp]
	jmp	$LN97@Compress
$LN83@Compress:
; Line 563
	lea	ecx, DWORD PTR _updatePairs2$[ebp]
	call	??0?$CRecordVector@UCUpdatePair2@@@@QAE@XZ ; CRecordVector<CUpdatePair2>::CRecordVector<CUpdatePair2>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
; Line 565
	lea	ecx, DWORD PTR _newNames$[ebp]
	call	??0?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::CObjectVector<UString>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
; Line 567
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 252				; 000000fcH
	call	?Size@?$CObjectVector@UCRenamePair@@@@QBEIXZ ; CObjectVector<CRenamePair>::Size
	test	eax, eax
	je	$LN82@Compress
; Line 569
	mov	DWORD PTR _i$74712[ebp], 0
	jmp	SHORT $LN81@Compress
$LN80@Compress:
	mov	eax, DWORD PTR _i$74712[ebp]
	add	eax, 1
	mov	DWORD PTR _i$74712[ebp], eax
$LN81@Compress:
	mov	ecx, DWORD PTR _arcItems$[ebp]
	call	?Size@?$CObjectVector@UCArcItem@@@@QBEIXZ ; CObjectVector<CArcItem>::Size
	cmp	DWORD PTR _i$74712[ebp], eax
	jae	$LN79@Compress
; Line 571
	mov	ecx, DWORD PTR _i$74712[ebp]
	push	ecx
	mov	ecx, DWORD PTR _arcItems$[ebp]
	call	??A?$CObjectVector@UCArcItem@@@@QBEABUCArcItem@@I@Z ; CObjectVector<CArcItem>::operator[]
	mov	DWORD PTR _ai$74716[ebp], eax
; Line 572
	mov	BYTE PTR _needRename$74717[ebp], 0
; Line 573
	lea	ecx, DWORD PTR _dest$74718[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 4
; Line 574
	mov	edx, DWORD PTR _ai$74716[ebp]
	movzx	eax, BYTE PTR [edx+32]
	test	eax, eax
	je	$LN78@Compress
; Line 576
	mov	DWORD PTR _j$74720[ebp], 0
	jmp	SHORT $LN77@Compress
$LN76@Compress:
	mov	ecx, DWORD PTR _j$74720[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$74720[ebp], ecx
$LN77@Compress:
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 252				; 000000fcH
	call	?Size@?$CObjectVector@UCRenamePair@@@@QBEIXZ ; CObjectVector<CRenamePair>::Size
	cmp	DWORD PTR _j$74720[ebp], eax
	jae	$LN78@Compress
; Line 578
	mov	edx, DWORD PTR _j$74720[ebp]
	push	edx
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 252				; 000000fcH
	call	??A?$CObjectVector@UCRenamePair@@@@QBEABUCRenamePair@@I@Z ; CObjectVector<CRenamePair>::operator[]
	mov	DWORD PTR _rp$74724[ebp], eax
; Line 579
	lea	eax, DWORD PTR _dest$74718[ebp]
	push	eax
	mov	ecx, DWORD PTR _ai$74716[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	edx, DWORD PTR _ai$74716[ebp]
	movzx	eax, BYTE PTR [edx+28]
	push	eax
	mov	ecx, DWORD PTR _rp$74724[ebp]
	call	?GetNewPath@CRenamePair@@QBE_N_NABVUString@@AAV2@@Z ; CRenamePair::GetNewPath
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN74@Compress
; Line 581
	mov	BYTE PTR _needRename$74717[ebp], 1
; Line 582
	jmp	$LN78@Compress
$LN74@Compress:
; Line 584
	mov	edx, DWORD PTR _ai$74716[ebp]
	movzx	eax, BYTE PTR [edx+29]
	test	eax, eax
	je	$LN73@Compress
; Line 586
	mov	ecx, DWORD PTR _ai$74716[ebp]
	add	ecx, 16					; 00000010H
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	?FindAltStreamColon_in_Path@@YGHPB_W@Z	; FindAltStreamColon_in_Path
	mov	DWORD PTR _colonPos$74727[ebp], eax
; Line 587
	cmp	DWORD PTR _colonPos$74727[ebp], 0
	jl	$LN73@Compress
; Line 589
	mov	ecx, DWORD PTR _colonPos$74727[ebp]
	push	ecx
	lea	edx, DWORD PTR _mainName$74729[ebp]
	push	edx
	mov	ecx, DWORD PTR _ai$74716[ebp]
	add	ecx, 16					; 00000010H
	call	?Left@UString@@QBE?AV1@I@Z		; UString::Left
	mov	BYTE PTR __$EHRec$[ebp+8], 5
; Line 594
	lea	eax, DWORD PTR _dest$74718[ebp]
	push	eax
	lea	ecx, DWORD PTR _mainName$74729[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _rp$74724[ebp]
	call	?GetNewPath@CRenamePair@@QBE_N_NABVUString@@AAV2@@Z ; CRenamePair::GetNewPath
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN71@Compress
; Line 596
	mov	BYTE PTR _needRename$74717[ebp], 1
; Line 597
	push	58					; 0000003aH
	lea	ecx, DWORD PTR _dest$74718[ebp]
	call	??YUString@@QAEAAV0@_W@Z		; UString::operator+=
; Line 598
	mov	eax, DWORD PTR _colonPos$74727[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _ai$74716[ebp]
	add	ecx, 16					; 00000010H
	call	?Ptr@UString@@QBEPB_WI@Z		; UString::Ptr
	push	eax
	lea	ecx, DWORD PTR _dest$74718[ebp]
	call	??YUString@@QAEAAV0@PB_W@Z		; UString::operator+=
; Line 599
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _mainName$74729[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	jmp	SHORT $LN78@Compress
$LN71@Compress:
; Line 601
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _mainName$74729[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
$LN73@Compress:
; Line 603
	jmp	$LN76@Compress
$LN78@Compress:
; Line 605
	lea	ecx, DWORD PTR _up2$74732[ebp]
	call	??0CUpdatePair2@@QAE@XZ			; CUpdatePair2::CUpdatePair2
; Line 606
	mov	ecx, DWORD PTR _ai$74716[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	lea	ecx, DWORD PTR _up2$74732[ebp]
	call	?SetAs_NoChangeArcItem@CUpdatePair2@@QAEXH@Z ; CUpdatePair2::SetAs_NoChangeArcItem
; Line 607
	movzx	eax, BYTE PTR _needRename$74717[ebp]
	test	eax, eax
	je	$LN70@Compress
; Line 609
	mov	BYTE PTR _up2$74732[ebp+1], 1
; Line 610
	lea	ecx, DWORD PTR _up2$74732[ebp+3]
	push	ecx
	mov	edx, DWORD PTR _i$74712[ebp]
	push	edx
	mov	ecx, DWORD PTR _arc$[ebp]
	call	?IsItemAnti@CArc@@QBEJIAA_N@Z		; CArc::IsItemAnti
	mov	DWORD PTR ___result__$74734[ebp], eax
	cmp	DWORD PTR ___result__$74734[ebp], 0
	je	SHORT $LN69@Compress
	mov	eax, DWORD PTR ___result__$74734[ebp]
	mov	DWORD PTR $T77793[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _dest$74718[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _newNames$[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _updatePairs2$[ebp]
	call	??1?$CRecordVector@UCUpdatePair2@@@@QAE@XZ ; CRecordVector<CUpdatePair2>::~CRecordVector<CUpdatePair2>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	??1?$CMyComPtr@UIOutArchive@@@@QAE@XZ	; CMyComPtr<IOutArchive>::~CMyComPtr<IOutArchive>
	mov	eax, DWORD PTR $T77793[ebp]
	jmp	$LN97@Compress
$LN69@Compress:
; Line 611
	lea	ecx, DWORD PTR _dest$74718[ebp]
	push	ecx
	lea	ecx, DWORD PTR _newNames$[ebp]
	call	?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z ; CObjectVector<UString>::Add
	mov	DWORD PTR _up2$74732[ebp+12], eax
$LN70@Compress:
; Line 613
	sub	esp, 20					; 00000014H
	mov	edx, esp
	mov	eax, DWORD PTR _up2$74732[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _up2$74732[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _up2$74732[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _up2$74732[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _up2$74732[ebp+16]
	mov	DWORD PTR [edx+16], eax
	lea	ecx, DWORD PTR _updatePairs2$[ebp]
	call	?Add@?$CRecordVector@UCUpdatePair2@@@@QAEIUCUpdatePair2@@@Z ; CRecordVector<CUpdatePair2>::Add
; Line 614
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _dest$74718[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	jmp	$LN80@Compress
$LN79@Compress:
; Line 616
	jmp	SHORT $LN68@Compress
$LN82@Compress:
; Line 618
	lea	ecx, DWORD PTR _updatePairs$74834[ebp]
	call	??0?$CRecordVector@UCUpdatePair@@@@QAE@XZ ; CRecordVector<CUpdatePair>::CRecordVector<CUpdatePair>
	mov	BYTE PTR __$EHRec$[ebp+8], 6
; Line 619
	lea	ecx, DWORD PTR _updatePairs$74834[ebp]
	push	ecx
	mov	edx, DWORD PTR _fileTimeType$[ebp]
	push	edx
	mov	eax, DWORD PTR _arcItems$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dirItems$[ebp]
	push	ecx
	call	?GetUpdatePairInfoList@@YGXABVCDirItems@@ABV?$CObjectVector@UCArcItem@@@@W4EEnum@NFileTimeType@@AAV?$CRecordVector@UCUpdatePair@@@@@Z ; GetUpdatePairInfoList
; Line 620
	mov	edx, DWORD PTR _callback$[ebp]
	push	edx
	mov	eax, DWORD PTR _arcItems$[ebp]
	push	eax
	lea	ecx, DWORD PTR _upCallback$74835[ebp]
	call	??0CUpdateProduceCallbackImp@@QAE@PBV?$CObjectVector@UCArcItem@@@@PAUIUpdateCallbackUI@@@Z ; CUpdateProduceCallbackImp::CUpdateProduceCallbackImp
; Line 622
	movzx	ecx, BYTE PTR _isUpdatingItself$[ebp]
	neg	ecx
	sbb	ecx, ecx
	lea	edx, DWORD PTR _upCallback$74835[ebp]
	and	ecx, edx
	push	ecx
	lea	eax, DWORD PTR _updatePairs2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _actionSet$[ebp]
	push	ecx
	lea	edx, DWORD PTR _updatePairs$74834[ebp]
	push	edx
	call	?UpdateProduce@@YGXABV?$CRecordVector@UCUpdatePair@@@@ABUCActionSet@NUpdateArchive@@AAV?$CRecordVector@UCUpdatePair2@@@@PAUIUpdateProduceCallback@@@Z ; UpdateProduce
; Line 623
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _updatePairs$74834[ebp]
	call	??1?$CRecordVector@UCUpdatePair@@@@QAE@XZ ; CRecordVector<CUpdatePair>::~CRecordVector<CUpdatePair>
$LN68@Compress:
; Line 626
	mov	DWORD PTR _numItems$74836[ebp], 0
; Line 627
	mov	DWORD PTR _i$74837[ebp], 0
	jmp	SHORT $LN67@Compress
$LN66@Compress:
	mov	eax, DWORD PTR _i$74837[ebp]
	add	eax, 1
	mov	DWORD PTR _i$74837[ebp], eax
$LN67@Compress:
	lea	ecx, DWORD PTR _updatePairs2$[ebp]
	call	?Size@?$CRecordVector@UCUpdatePair2@@@@QBEIXZ ; CRecordVector<CUpdatePair2>::Size
	cmp	DWORD PTR _i$74837[ebp], eax
	jae	SHORT $LN65@Compress
; Line 628
	mov	ecx, DWORD PTR _i$74837[ebp]
	push	ecx
	lea	ecx, DWORD PTR _updatePairs2$[ebp]
	call	??A?$CRecordVector@UCUpdatePair2@@@@QAEAAUCUpdatePair2@@I@Z ; CRecordVector<CUpdatePair2>::operator[]
	movzx	edx, BYTE PTR [eax]
	test	edx, edx
	je	SHORT $LN64@Compress
; Line 629
	mov	eax, DWORD PTR _numItems$74836[ebp]
	add	eax, 1
	mov	DWORD PTR _numItems$74836[ebp], eax
$LN64@Compress:
; Line 630
	jmp	SHORT $LN66@Compress
$LN65@Compress:
	mov	ecx, DWORD PTR _numItems$74836[ebp]
	xor	edx, edx
	mov	esi, esp
	push	edx
	push	ecx
	mov	eax, DWORD PTR _callback$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _callback$[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$74842[ebp], eax
	cmp	DWORD PTR ___result__$74842[ebp], 0
	je	SHORT $LN63@Compress
	mov	ecx, DWORD PTR ___result__$74842[ebp]
	mov	DWORD PTR $T77794[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _newNames$[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _updatePairs2$[ebp]
	call	??1?$CRecordVector@UCUpdatePair2@@@@QAE@XZ ; CRecordVector<CUpdatePair2>::~CRecordVector<CUpdatePair2>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	??1?$CMyComPtr@UIOutArchive@@@@QAE@XZ	; CMyComPtr<IOutArchive>::~CMyComPtr<IOutArchive>
	mov	eax, DWORD PTR $T77794[ebp]
	jmp	$LN97@Compress
$LN63@Compress:
; Line 633
	push	168					; 000000a8H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T77796[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	cmp	DWORD PTR $T77796[ebp], 0
	je	SHORT $LN98@Compress
	mov	ecx, DWORD PTR $T77796[ebp]
	call	??0CArchiveUpdateCallback@@QAE@XZ	; CArchiveUpdateCallback::CArchiveUpdateCallback
	mov	DWORD PTR tv324[ebp], eax
	jmp	SHORT $LN99@Compress
$LN98@Compress:
	mov	DWORD PTR tv324[ebp], 0
$LN99@Compress:
	mov	edx, DWORD PTR tv324[ebp]
	mov	DWORD PTR $T77795[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	eax, DWORD PTR $T77795[ebp]
	mov	DWORD PTR _updateCallbackSpec$[ebp], eax
; Line 634
	mov	ecx, DWORD PTR _updateCallbackSpec$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _updateCallback$[ebp]
	call	??0?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@PAUIArchiveUpdateCallback@@@Z ; CMyComPtr<IArchiveUpdateCallback>::CMyComPtr<IArchiveUpdateCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 8
; Line 636
	mov	edx, DWORD PTR _updateCallbackSpec$[ebp]
	mov	eax, DWORD PTR _options$[ebp]
	mov	cl, BYTE PTR [eax+180]
	mov	BYTE PTR [edx+156], cl
; Line 637
	mov	edx, DWORD PTR _updateCallbackSpec$[ebp]
	mov	eax, DWORD PTR _options$[ebp]
	mov	cl, BYTE PTR [eax+181]
	mov	BYTE PTR [edx+157], cl
; Line 638
	mov	edx, DWORD PTR _updateCallbackSpec$[ebp]
	mov	eax, DWORD PTR _callback$[ebp]
	mov	DWORD PTR [edx+124], eax
; Line 640
	cmp	DWORD PTR _arc$[ebp], 0
	je	SHORT $LN62@Compress
; Line 643
	mov	ecx, DWORD PTR _arc$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _updateCallbackSpec$[ebp]
	add	ecx, 140				; 0000008cH
	call	??4?$CMyComPtr@UIInArchive@@@@QAEPAUIInArchive@@ABV0@@Z ; CMyComPtr<IInArchive>::operator=
$LN62@Compress:
; Line 646
	mov	edx, DWORD PTR _updateCallbackSpec$[ebp]
	mov	eax, DWORD PTR _dirItems$[ebp]
	mov	DWORD PTR [edx+128], eax
; Line 647
	mov	ecx, DWORD PTR _updateCallbackSpec$[ebp]
	mov	edx, DWORD PTR _parentDirItem$[ebp]
	mov	DWORD PTR [ecx+132], edx
; Line 649
	mov	eax, DWORD PTR _updateCallbackSpec$[ebp]
	mov	ecx, DWORD PTR _options$[ebp]
	mov	dl, BYTE PTR [ecx+240]
	mov	BYTE PTR [eax+159], dl
; Line 650
	mov	eax, DWORD PTR _updateCallbackSpec$[ebp]
	mov	ecx, DWORD PTR _options$[ebp]
	mov	dl, BYTE PTR [ecx+244]
	mov	BYTE PTR [eax+160], dl
; Line 651
	mov	eax, DWORD PTR _updateCallbackSpec$[ebp]
	mov	ecx, DWORD PTR _options$[ebp]
	mov	dl, BYTE PTR [ecx+246]
	mov	BYTE PTR [eax+161], dl
; Line 653
	mov	eax, DWORD PTR _updateCallbackSpec$[ebp]
	mov	ecx, DWORD PTR _arc$[ebp]
	mov	DWORD PTR [eax+136], ecx
; Line 654
	mov	edx, DWORD PTR _updateCallbackSpec$[ebp]
	mov	eax, DWORD PTR _arcItems$[ebp]
	mov	DWORD PTR [edx+144], eax
; Line 655
	mov	ecx, DWORD PTR _updateCallbackSpec$[ebp]
	lea	edx, DWORD PTR _updatePairs2$[ebp]
	mov	DWORD PTR [ecx+148], edx
; Line 657
	mov	eax, DWORD PTR _updateCallbackSpec$[ebp]
	mov	ecx, DWORD PTR _processedItemsStatuses$[ebp]
	mov	DWORD PTR [eax+164], ecx
; Line 659
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 252				; 000000fcH
	call	?Size@?$CObjectVector@UCRenamePair@@@@QBEIXZ ; CObjectVector<CRenamePair>::Size
	test	eax, eax
	je	SHORT $LN61@Compress
; Line 660
	mov	edx, DWORD PTR _updateCallbackSpec$[ebp]
	lea	eax, DWORD PTR _newNames$[ebp]
	mov	DWORD PTR [edx+152], eax
$LN61@Compress:
; Line 662
	lea	ecx, DWORD PTR _outSeekStream$[ebp]
	call	??0?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::CMyComPtr<IOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 9
; Line 663
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
; Line 665
	mov	ecx, DWORD PTR _options$[ebp]
	movzx	edx, BYTE PTR [ecx+196]
	test	edx, edx
	jne	$LN60@Compress
; Line 667
	lea	ecx, DWORD PTR _dirPrefix$74895[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
; Line 668
	lea	eax, DWORD PTR _dirPrefix$74895[ebp]
	push	eax
	lea	ecx, DWORD PTR $T77800[ebp]
	push	ecx
	mov	ecx, DWORD PTR _archivePath$[ebp]
	call	?GetFinalPath@CArchivePath@@QBE?AVUString@@XZ ; CArchivePath::GetFinalPath
	mov	DWORD PTR tv371[ebp], eax
	mov	edx, DWORD PTR tv371[ebp]
	mov	DWORD PTR tv921[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	mov	ecx, DWORD PTR tv921[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	?GetOnlyDirPrefix@NDir@NFile@NWindows@@YG_NPB_WAAVUString@@@Z ; NWindows::NFile::NDir::GetOnlyDirPrefix
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1
	mov	BYTE PTR $T77799[ebp], al
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR $T77800[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	movzx	ecx, BYTE PTR $T77799[ebp]
	test	ecx, ecx
	je	SHORT $LN59@Compress
; Line 669
	mov	DWORD PTR $T77801[ebp], 1417161		; 00159fc9H
	push	OFFSET __TI1H
	lea	edx, DWORD PTR $T77801[ebp]
	push	edx
	call	__CxxThrowException@8
$LN59@Compress:
; Line 670
	lea	ecx, DWORD PTR _dirPrefix$74895[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	?CreateComplexDir@NDir@NFile@NWindows@@YG_NPB_W@Z ; NWindows::NFile::NDir::CreateComplexDir
; Line 671
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _dirPrefix$74895[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
$LN60@Compress:
; Line 673
	mov	DWORD PTR _outStreamSpec$[ebp], 0
; Line 674
	mov	DWORD PTR _stdOutFileStreamSpec$[ebp], 0
; Line 675
	mov	DWORD PTR _volStreamSpec$[ebp], 0
; Line 677
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 264				; 00000108H
	call	?Size@?$CRecordVector@_K@@QBEIXZ	; CRecordVector<unsigned __int64>::Size
	test	eax, eax
	jne	$LN58@Compress
; Line 679
	mov	eax, DWORD PTR _options$[ebp]
	movzx	ecx, BYTE PTR [eax+196]
	test	ecx, ecx
	je	SHORT $LN57@Compress
; Line 681
	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T77803[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH
	cmp	DWORD PTR $T77803[ebp], 0
	je	SHORT $LN100@Compress
	mov	ecx, DWORD PTR $T77803[ebp]
	call	??0CStdOutFileStream@@QAE@XZ		; CStdOutFileStream::CStdOutFileStream
	mov	DWORD PTR tv440[ebp], eax
	jmp	SHORT $LN101@Compress
$LN100@Compress:
	mov	DWORD PTR tv440[ebp], 0
$LN101@Compress:
	mov	edx, DWORD PTR tv440[ebp]
	mov	DWORD PTR $T77802[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	mov	eax, DWORD PTR $T77802[ebp]
	mov	DWORD PTR _stdOutFileStreamSpec$[ebp], eax
; Line 682
	mov	ecx, DWORD PTR _stdOutFileStreamSpec$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=
; Line 684
	jmp	$LN56@Compress
$LN57@Compress:
; Line 686
	push	32					; 00000020H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T77807[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 14		; 0000000eH
	cmp	DWORD PTR $T77807[ebp], 0
	je	SHORT $LN102@Compress
	mov	ecx, DWORD PTR $T77807[ebp]
	call	??0COutFileStream@@QAE@XZ
	mov	DWORD PTR tv453[ebp], eax
	jmp	SHORT $LN103@Compress
$LN102@Compress:
	mov	DWORD PTR tv453[ebp], 0
$LN103@Compress:
	mov	edx, DWORD PTR tv453[ebp]
	mov	DWORD PTR $T77806[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	mov	eax, DWORD PTR $T77806[ebp]
	mov	DWORD PTR _outStreamSpec$[ebp], eax
; Line 687
	mov	ecx, DWORD PTR _outStreamSpec$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _outSeekStream$[ebp]
	call	??4?$CMyComPtr@UIOutStream@@@@QAEPAUIOutStream@@PAU1@@Z ; CMyComPtr<IOutStream>::operator=
; Line 688
	lea	ecx, DWORD PTR _outSeekStream$[ebp]
	call	??B?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator IOutStream *
	push	eax
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=
; Line 689
	mov	BYTE PTR _isOK$74914[ebp], 0
; Line 690
	lea	ecx, DWORD PTR _realPath$74915[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 15		; 0000000fH
; Line 692
	mov	DWORD PTR _i$74916[ebp], 0
	jmp	SHORT $LN55@Compress
$LN54@Compress:
	mov	edx, DWORD PTR _i$74916[ebp]
	add	edx, 1
	mov	DWORD PTR _i$74916[ebp], edx
$LN55@Compress:
	cmp	DWORD PTR _i$74916[ebp], 65536		; 00010000H
	jae	$LN53@Compress
; Line 694
	mov	eax, DWORD PTR _archivePath$[ebp]
	movzx	ecx, BYTE PTR [eax+60]
	test	ecx, ecx
	je	SHORT $LN52@Compress
; Line 696
	cmp	DWORD PTR _i$74916[ebp], 0
	jbe	SHORT $LN51@Compress
; Line 699
	lea	edx, DWORD PTR _s$74922[ebp]
	push	edx
	mov	eax, DWORD PTR _i$74916[ebp]
	push	eax
	call	?ConvertUInt32ToString@@YGXIPA_W@Z	; ConvertUInt32ToString
; Line 700
	lea	ecx, DWORD PTR _s$74922[ebp]
	push	ecx
	mov	ecx, DWORD PTR _archivePath$[ebp]
	add	ecx, 76					; 0000004cH
	call	??4UString@@QAEAAV0@PB_W@Z		; UString::operator=
$LN51@Compress:
; Line 702
	lea	edx, DWORD PTR $T77810[ebp]
	push	edx
	mov	ecx, DWORD PTR _archivePath$[ebp]
	call	?GetTempPathA@CArchivePath@@QBE?AVUString@@XZ ; CArchivePath::GetTempPathA
	mov	DWORD PTR tv468[ebp], eax
	mov	eax, DWORD PTR tv468[ebp]
	mov	DWORD PTR tv926[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 16		; 00000010H
	mov	ecx, DWORD PTR tv926[ebp]
	push	ecx
	lea	ecx, DWORD PTR _realPath$74915[ebp]
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
	mov	BYTE PTR __$EHRec$[ebp+8], 15		; 0000000fH
	lea	ecx, DWORD PTR $T77810[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
; Line 704
	jmp	SHORT $LN50@Compress
$LN52@Compress:
; Line 705
	lea	edx, DWORD PTR $T77811[ebp]
	push	edx
	mov	ecx, DWORD PTR _archivePath$[ebp]
	call	?GetFinalPath@CArchivePath@@QBE?AVUString@@XZ ; CArchivePath::GetFinalPath
	mov	DWORD PTR tv325[ebp], eax
	mov	eax, DWORD PTR tv325[ebp]
	mov	DWORD PTR tv928[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	mov	ecx, DWORD PTR tv928[ebp]
	push	ecx
	lea	ecx, DWORD PTR _realPath$74915[ebp]
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
	mov	BYTE PTR __$EHRec$[ebp+8], 15		; 0000000fH
	lea	ecx, DWORD PTR $T77811[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
$LN50@Compress:
; Line 706
	push	0
	lea	ecx, DWORD PTR _realPath$74915[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	mov	ecx, DWORD PTR _outStreamSpec$[ebp]
	call	?Create@COutFileStream@@QAE_NPB_W_N@Z	; COutFileStream::Create
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN49@Compress
; Line 708
	lea	eax, DWORD PTR _realPath$74915[ebp]
	push	eax
	mov	ecx, DWORD PTR _tempFiles$[ebp]
	call	?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z ; CObjectVector<UString>::Add
; Line 709
	mov	BYTE PTR _isOK$74914[ebp], 1
; Line 710
	jmp	SHORT $LN53@Compress
$LN49@Compress:
; Line 712
	mov	esi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 80					; 00000050H
	je	SHORT $LN48@Compress
; Line 713
	jmp	SHORT $LN53@Compress
$LN48@Compress:
; Line 714
	mov	ecx, DWORD PTR _archivePath$[ebp]
	movzx	edx, BYTE PTR [ecx+60]
	test	edx, edx
	jne	SHORT $LN47@Compress
; Line 715
	jmp	SHORT $LN53@Compress
$LN47@Compress:
; Line 716
	jmp	$LN54@Compress
$LN53@Compress:
; Line 718
	movzx	eax, BYTE PTR _isOK$74914[ebp]
	test	eax, eax
	jne	$LN46@Compress
; Line 719
	lea	ecx, DWORD PTR _realPath$74915[ebp]
	push	ecx
	push	OFFSET $SG74931
	mov	ecx, DWORD PTR _errorInfo$[ebp]
	call	?SetFromLastError@CUpdateErrorInfo@@QAEJPBDABVUString@@@Z ; CUpdateErrorInfo::SetFromLastError
	mov	DWORD PTR $T77812[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _realPath$74915[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _outSeekStream$[ebp]
	call	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _updateCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallback>::~CMyComPtr<IArchiveUpdateCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _newNames$[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _updatePairs2$[ebp]
	call	??1?$CRecordVector@UCUpdatePair2@@@@QAE@XZ ; CRecordVector<CUpdatePair2>::~CRecordVector<CUpdatePair2>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	??1?$CMyComPtr@UIOutArchive@@@@QAE@XZ	; CMyComPtr<IOutArchive>::~CMyComPtr<IOutArchive>
	mov	eax, DWORD PTR $T77812[ebp]
	jmp	$LN97@Compress
$LN46@Compress:
; Line 720
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _realPath$74915[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
$LN56@Compress:
; Line 722
	jmp	$LN45@Compress
$LN58@Compress:
; Line 724
	mov	edx, DWORD PTR _options$[ebp]
	movzx	eax, BYTE PTR [edx+196]
	test	eax, eax
	je	SHORT $LN44@Compress
; Line 725
	mov	DWORD PTR $T77813[ebp], -2147467259	; 80004005H
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _outSeekStream$[ebp]
	call	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _updateCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallback>::~CMyComPtr<IArchiveUpdateCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _newNames$[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _updatePairs2$[ebp]
	call	??1?$CRecordVector@UCUpdatePair2@@@@QAE@XZ ; CRecordVector<CUpdatePair2>::~CRecordVector<CUpdatePair2>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	??1?$CMyComPtr@UIOutArchive@@@@QAE@XZ	; CMyComPtr<IOutArchive>::~CMyComPtr<IOutArchive>
	mov	eax, DWORD PTR $T77813[ebp]
	jmp	$LN97@Compress
$LN44@Compress:
; Line 726
	cmp	DWORD PTR _arc$[ebp], 0
	je	$LN43@Compress
	mov	ecx, DWORD PTR _arc$[ebp]
	call	?GetGlobalOffset@CArc@@QBE_JXZ		; CArc::GetGlobalOffset
	mov	DWORD PTR tv1268[ebp], eax
	mov	DWORD PTR tv1268[ebp+4], edx
	cmp	DWORD PTR tv1268[ebp+4], 0
	jl	SHORT $LN43@Compress
	jg	SHORT $LN139@Compress
	cmp	DWORD PTR tv1268[ebp], 0
	jbe	SHORT $LN43@Compress
$LN139@Compress:
; Line 727
	mov	DWORD PTR $T77814[ebp], -2147467263	; 80004001H
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _outSeekStream$[ebp]
	call	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _updateCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallback>::~CMyComPtr<IArchiveUpdateCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _newNames$[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _updatePairs2$[ebp]
	call	??1?$CRecordVector@UCUpdatePair2@@@@QAE@XZ ; CRecordVector<CUpdatePair2>::~CRecordVector<CUpdatePair2>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	??1?$CMyComPtr@UIOutArchive@@@@QAE@XZ	; CMyComPtr<IOutArchive>::~CMyComPtr<IOutArchive>
	mov	eax, DWORD PTR $T77814[ebp]
	jmp	$LN97@Compress
$LN43@Compress:
; Line 729
	push	80					; 00000050H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T77816[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 18		; 00000012H
	cmp	DWORD PTR $T77816[ebp], 0
	je	SHORT $LN104@Compress
	mov	ecx, DWORD PTR $T77816[ebp]
	call	??0COutMultiVolStream@@QAE@XZ
	mov	DWORD PTR tv530[ebp], eax
	jmp	SHORT $LN105@Compress
$LN104@Compress:
	mov	DWORD PTR tv530[ebp], 0
$LN105@Compress:
	mov	ecx, DWORD PTR tv530[ebp]
	mov	DWORD PTR $T77815[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	mov	edx, DWORD PTR $T77815[ebp]
	mov	DWORD PTR _volStreamSpec$[ebp], edx
; Line 730
	mov	eax, DWORD PTR _volStreamSpec$[ebp]
	push	eax
	lea	ecx, DWORD PTR _outSeekStream$[ebp]
	call	??4?$CMyComPtr@UIOutStream@@@@QAEPAUIOutStream@@PAU1@@Z ; CMyComPtr<IOutStream>::operator=
; Line 731
	lea	ecx, DWORD PTR _outSeekStream$[ebp]
	call	??B?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator IOutStream *
	push	eax
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=
; Line 732
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 264				; 00000108H
	push	ecx
	mov	ecx, DWORD PTR _volStreamSpec$[ebp]
	add	ecx, 52					; 00000034H
	call	??4?$CRecordVector@_K@@QAEAAV0@ABV0@@Z	; CRecordVector<unsigned __int64>::operator=
; Line 733
	lea	edx, DWORD PTR $T77819[ebp]
	push	edx
	mov	ecx, DWORD PTR _archivePath$[ebp]
	call	?GetFinalVolPath@CArchivePath@@QBE?AVUString@@XZ ; CArchivePath::GetFinalVolPath
	mov	DWORD PTR tv209[ebp], eax
	mov	eax, DWORD PTR tv209[ebp]
	mov	DWORD PTR tv950[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 19		; 00000013H
	mov	ecx, DWORD PTR tv950[ebp]
	push	ecx
	mov	ecx, DWORD PTR _volStreamSpec$[ebp]
	add	ecx, 64					; 00000040H
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR $T77819[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
; Line 734
	push	46					; 0000002eH
	mov	ecx, DWORD PTR _volStreamSpec$[ebp]
	add	ecx, 64					; 00000040H
	call	??YUString@@QAEAAV0@_W@Z		; UString::operator+=
; Line 735
	mov	edx, DWORD PTR _volStreamSpec$[ebp]
	mov	eax, DWORD PTR _tempFiles$[ebp]
	mov	DWORD PTR [edx+76], eax
; Line 736
	mov	ecx, DWORD PTR _volStreamSpec$[ebp]
	call	?Init@COutMultiVolStream@@QAEXXZ	; COutMultiVolStream::Init
$LN45@Compress:
; Line 746
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 40					; 00000028H
	push	ecx
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	??B?$CMyComPtr@UIOutArchive@@@@QBEPAUIOutArchive@@XZ ; CMyComPtr<IOutArchive>::operator IOutArchive *
	push	eax
	call	?SetProperties@@YGJPAUIUnknown@@ABV?$CObjectVector@UCProperty@@@@@Z ; SetProperties
	mov	DWORD PTR ___result__$74944[ebp], eax
	cmp	DWORD PTR ___result__$74944[ebp], 0
	je	SHORT $LN42@Compress
	mov	edx, DWORD PTR ___result__$74944[ebp]
	mov	DWORD PTR $T77820[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _outSeekStream$[ebp]
	call	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _updateCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallback>::~CMyComPtr<IArchiveUpdateCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _newNames$[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _updatePairs2$[ebp]
	call	??1?$CRecordVector@UCUpdatePair2@@@@QAE@XZ ; CRecordVector<CUpdatePair2>::~CRecordVector<CUpdatePair2>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	??1?$CMyComPtr@UIOutArchive@@@@QAE@XZ	; CMyComPtr<IOutArchive>::~CMyComPtr<IOutArchive>
	mov	eax, DWORD PTR $T77820[ebp]
	jmp	$LN97@Compress
$LN42@Compress:
; Line 748
	mov	eax, DWORD PTR _options$[ebp]
	movzx	ecx, BYTE PTR [eax+164]
	test	ecx, ecx
	je	$LN41@Compress
; Line 750
	push	88					; 00000058H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T77822[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 20		; 00000014H
	cmp	DWORD PTR $T77822[ebp], 0
	je	SHORT $LN106@Compress
	mov	ecx, DWORD PTR $T77822[ebp]
	call	??0CInFileStream@@QAE@XZ		; CInFileStream::CInFileStream
	mov	DWORD PTR tv582[ebp], eax
	jmp	SHORT $LN107@Compress
$LN106@Compress:
	mov	DWORD PTR tv582[ebp], 0
$LN107@Compress:
	mov	edx, DWORD PTR tv582[ebp]
	mov	DWORD PTR $T77821[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	mov	eax, DWORD PTR $T77821[ebp]
	mov	DWORD PTR _sfxStreamSpec$74948[ebp], eax
; Line 751
	mov	ecx, DWORD PTR _sfxStreamSpec$74948[ebp]
	push	ecx
	lea	ecx, DWORD PTR _sfxStream$74954[ebp]
	call	??0?$CMyComPtr@UIInStream@@@@QAE@PAUIInStream@@@Z ; CMyComPtr<IInStream>::CMyComPtr<IInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 21		; 00000015H
; Line 752
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 168				; 000000a8H
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	mov	ecx, DWORD PTR _sfxStreamSpec$74948[ebp]
	call	?Open@CInFileStream@@QAE_NPB_W@Z	; CInFileStream::Open
	movzx	edx, al
	test	edx, edx
	jne	$LN40@Compress
; Line 753
	mov	eax, DWORD PTR _options$[ebp]
	add	eax, 168				; 000000a8H
	push	eax
	push	OFFSET $SG74957
	mov	ecx, DWORD PTR _errorInfo$[ebp]
	call	?SetFromLastError@CUpdateErrorInfo@@QAEJPBDABVUString@@@Z ; CUpdateErrorInfo::SetFromLastError
	mov	DWORD PTR $T77825[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _sfxStream$74954[ebp]
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _outSeekStream$[ebp]
	call	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _updateCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallback>::~CMyComPtr<IArchiveUpdateCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _newNames$[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _updatePairs2$[ebp]
	call	??1?$CRecordVector@UCUpdatePair2@@@@QAE@XZ ; CRecordVector<CUpdatePair2>::~CRecordVector<CUpdatePair2>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	??1?$CMyComPtr@UIOutArchive@@@@QAE@XZ	; CMyComPtr<IOutArchive>::~CMyComPtr<IOutArchive>
	mov	eax, DWORD PTR $T77825[ebp]
	jmp	$LN97@Compress
$LN40@Compress:
; Line 755
	lea	ecx, DWORD PTR _sfxOutStream$74959[ebp]
	call	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 22		; 00000016H
; Line 756
	mov	DWORD PTR _outStreamSpec$74960[ebp], 0
; Line 757
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 264				; 00000108H
	call	?Size@?$CRecordVector@_K@@QBEIXZ	; CRecordVector<unsigned __int64>::Size
	test	eax, eax
	jne	SHORT $LN39@Compress
; Line 758
	lea	ecx, DWORD PTR _outStream$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _sfxOutStream$74959[ebp]
	call	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@ABV0@@Z ; CMyComPtr<ISequentialOutStream>::operator=
; Line 759
	jmp	$LN38@Compress
$LN39@Compress:
; Line 761
	push	32					; 00000020H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T77827[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 23		; 00000017H
	cmp	DWORD PTR $T77827[ebp], 0
	je	SHORT $LN108@Compress
	mov	ecx, DWORD PTR $T77827[ebp]
	call	??0COutFileStream@@QAE@XZ
	mov	DWORD PTR tv619[ebp], eax
	jmp	SHORT $LN109@Compress
$LN108@Compress:
	mov	DWORD PTR tv619[ebp], 0
$LN109@Compress:
	mov	edx, DWORD PTR tv619[ebp]
	mov	DWORD PTR $T77826[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 22		; 00000016H
	mov	eax, DWORD PTR $T77826[ebp]
	mov	DWORD PTR _outStreamSpec$74960[ebp], eax
; Line 762
	mov	ecx, DWORD PTR _outStreamSpec$74960[ebp]
	push	ecx
	lea	ecx, DWORD PTR _sfxOutStream$74959[ebp]
	call	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=
; Line 763
	lea	edx, DWORD PTR _realPath$74967[ebp]
	push	edx
	mov	ecx, DWORD PTR _archivePath$[ebp]
	call	?GetFinalPath@CArchivePath@@QBE?AVUString@@XZ ; CArchivePath::GetFinalPath
	mov	BYTE PTR __$EHRec$[ebp+8], 24		; 00000018H
; Line 764
	push	0
	lea	ecx, DWORD PTR _realPath$74967[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	mov	ecx, DWORD PTR _outStreamSpec$74960[ebp]
	call	?Create@COutFileStream@@QAE_NPB_W_N@Z	; COutFileStream::Create
	movzx	eax, al
	test	eax, eax
	jne	$LN37@Compress
; Line 765
	lea	ecx, DWORD PTR _realPath$74967[ebp]
	push	ecx
	push	OFFSET $SG74971
	mov	ecx, DWORD PTR _errorInfo$[ebp]
	call	?SetFromLastError@CUpdateErrorInfo@@QAEJPBDABVUString@@@Z ; CUpdateErrorInfo::SetFromLastError
	mov	DWORD PTR $T77830[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 22		; 00000016H
	lea	ecx, DWORD PTR _realPath$74967[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 21		; 00000015H
	lea	ecx, DWORD PTR _sfxOutStream$74959[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _sfxStream$74954[ebp]
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _outSeekStream$[ebp]
	call	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _updateCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallback>::~CMyComPtr<IArchiveUpdateCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _newNames$[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _updatePairs2$[ebp]
	call	??1?$CRecordVector@UCUpdatePair2@@@@QAE@XZ ; CRecordVector<CUpdatePair2>::~CRecordVector<CUpdatePair2>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	??1?$CMyComPtr@UIOutArchive@@@@QAE@XZ	; CMyComPtr<IOutArchive>::~CMyComPtr<IOutArchive>
	mov	eax, DWORD PTR $T77830[ebp]
	jmp	$LN97@Compress
$LN37@Compress:
; Line 766
	mov	BYTE PTR __$EHRec$[ebp+8], 22		; 00000016H
	lea	ecx, DWORD PTR _realPath$74967[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
$LN38@Compress:
; Line 770
	mov	esi, esp
	lea	edx, DWORD PTR _sfxSize$74972[ebp]
	push	edx
	mov	eax, DWORD PTR _sfxStreamSpec$74948[ebp]
	add	eax, 4
	mov	ecx, DWORD PTR _sfxStreamSpec$74948[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	eax
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$74973[ebp], eax
	cmp	DWORD PTR ___result__$74973[ebp], 0
	je	$LN36@Compress
	mov	ecx, DWORD PTR ___result__$74973[ebp]
	mov	DWORD PTR $T77831[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 21		; 00000015H
	lea	ecx, DWORD PTR _sfxOutStream$74959[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _sfxStream$74954[ebp]
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _outSeekStream$[ebp]
	call	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _updateCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallback>::~CMyComPtr<IArchiveUpdateCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _newNames$[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _updatePairs2$[ebp]
	call	??1?$CRecordVector@UCUpdatePair2@@@@QAE@XZ ; CRecordVector<CUpdatePair2>::~CRecordVector<CUpdatePair2>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	??1?$CMyComPtr@UIOutArchive@@@@QAE@XZ	; CMyComPtr<IOutArchive>::~CMyComPtr<IOutArchive>
	mov	eax, DWORD PTR $T77831[ebp]
	jmp	$LN97@Compress
$LN36@Compress:
; Line 771
	mov	esi, esp
	mov	edx, DWORD PTR _sfxSize$74972[ebp+4]
	push	edx
	mov	eax, DWORD PTR _sfxSize$74972[ebp]
	push	eax
	mov	ecx, DWORD PTR _options$[ebp]
	add	ecx, 168				; 000000a8H
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	mov	ecx, DWORD PTR _callback$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _callback$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$74976[ebp], eax
	cmp	DWORD PTR ___result__$74976[ebp], 0
	je	$LN35@Compress
	mov	ecx, DWORD PTR ___result__$74976[ebp]
	mov	DWORD PTR $T77832[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 21		; 00000015H
	lea	ecx, DWORD PTR _sfxOutStream$74959[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _sfxStream$74954[ebp]
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _outSeekStream$[ebp]
	call	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _updateCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallback>::~CMyComPtr<IArchiveUpdateCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _newNames$[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _updatePairs2$[ebp]
	call	??1?$CRecordVector@UCUpdatePair2@@@@QAE@XZ ; CRecordVector<CUpdatePair2>::~CRecordVector<CUpdatePair2>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	??1?$CMyComPtr@UIOutArchive@@@@QAE@XZ	; CMyComPtr<IOutArchive>::~CMyComPtr<IOutArchive>
	mov	eax, DWORD PTR $T77832[ebp]
	jmp	$LN97@Compress
$LN35@Compress:
; Line 774
	push	0
	lea	ecx, DWORD PTR _sfxOutStream$74959[ebp]
	call	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
	push	eax
	lea	ecx, DWORD PTR _sfxStream$74954[ebp]
	call	??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *
	push	eax
	call	?CopyStream@NCompress@@YGJPAUISequentialInStream@@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z ; NCompress::CopyStream
	mov	DWORD PTR ___result__$74979[ebp], eax
	cmp	DWORD PTR ___result__$74979[ebp], 0
	je	$LN34@Compress
	mov	edx, DWORD PTR ___result__$74979[ebp]
	mov	DWORD PTR $T77833[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 21		; 00000015H
	lea	ecx, DWORD PTR _sfxOutStream$74959[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _sfxStream$74954[ebp]
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _outSeekStream$[ebp]
	call	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _updateCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallback>::~CMyComPtr<IArchiveUpdateCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _newNames$[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _updatePairs2$[ebp]
	call	??1?$CRecordVector@UCUpdatePair2@@@@QAE@XZ ; CRecordVector<CUpdatePair2>::~CRecordVector<CUpdatePair2>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	??1?$CMyComPtr@UIOutArchive@@@@QAE@XZ	; CMyComPtr<IOutArchive>::~CMyComPtr<IOutArchive>
	mov	eax, DWORD PTR $T77833[ebp]
	jmp	$LN97@Compress
$LN34@Compress:
; Line 776
	cmp	DWORD PTR _outStreamSpec$74960[ebp], 0
	je	$LN33@Compress
; Line 778
	mov	ecx, DWORD PTR _outStreamSpec$74960[ebp]
	call	?Close@COutFileStream@@QAEJXZ		; COutFileStream::Close
	mov	DWORD PTR ___result__$74983[ebp], eax
	cmp	DWORD PTR ___result__$74983[ebp], 0
	je	$LN33@Compress
	mov	eax, DWORD PTR ___result__$74983[ebp]
	mov	DWORD PTR $T77834[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 21		; 00000015H
	lea	ecx, DWORD PTR _sfxOutStream$74959[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _sfxStream$74954[ebp]
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _outSeekStream$[ebp]
	call	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _updateCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallback>::~CMyComPtr<IArchiveUpdateCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _newNames$[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _updatePairs2$[ebp]
	call	??1?$CRecordVector@UCUpdatePair2@@@@QAE@XZ ; CRecordVector<CUpdatePair2>::~CRecordVector<CUpdatePair2>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	??1?$CMyComPtr@UIOutArchive@@@@QAE@XZ	; CMyComPtr<IOutArchive>::~CMyComPtr<IOutArchive>
	mov	eax, DWORD PTR $T77834[ebp]
	jmp	$LN97@Compress
$LN33@Compress:
; Line 780
	mov	BYTE PTR __$EHRec$[ebp+8], 21		; 00000015H
	lea	ecx, DWORD PTR _sfxOutStream$74959[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _sfxStream$74954[ebp]
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
$LN41@Compress:
; Line 782
	lea	ecx, DWORD PTR _tailStream$[ebp]
	call	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 25		; 00000019H
; Line 784
	mov	ecx, DWORD PTR _options$[ebp]
	movzx	edx, BYTE PTR [ecx+164]
	test	edx, edx
	jne	SHORT $LN30@Compress
	cmp	DWORD PTR _arc$[ebp], 0
	je	SHORT $LN30@Compress
	mov	eax, DWORD PTR _arc$[ebp]
	mov	DWORD PTR tv1354[ebp], eax
	mov	ecx, DWORD PTR tv1354[ebp]
	mov	edx, DWORD PTR tv1354[ebp]
	mov	eax, DWORD PTR [ecx+208]
	or	eax, DWORD PTR [edx+212]
	jne	SHORT $LN31@Compress
$LN30@Compress:
; Line 785
	lea	ecx, DWORD PTR _outStream$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _tailStream$[ebp]
	call	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@ABV0@@Z ; CMyComPtr<ISequentialOutStream>::operator=
; Line 786
	jmp	$LN29@Compress
$LN31@Compress:
; Line 789
	mov	ecx, DWORD PTR _arc$[ebp]
	add	ecx, 4
	call	??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->
	mov	DWORD PTR tv726[ebp], eax
	mov	esi, esp
	push	0
	push	0
	push	0
	push	0
	mov	edx, DWORD PTR tv726[ebp]
	push	edx
	mov	eax, DWORD PTR tv726[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$74991[ebp], eax
	cmp	DWORD PTR ___result__$74991[ebp], 0
	je	SHORT $LN28@Compress
	mov	eax, DWORD PTR ___result__$74991[ebp]
	mov	DWORD PTR $T77835[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _tailStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _outSeekStream$[ebp]
	call	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _updateCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallback>::~CMyComPtr<IArchiveUpdateCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _newNames$[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _updatePairs2$[ebp]
	call	??1?$CRecordVector@UCUpdatePair2@@@@QAE@XZ ; CRecordVector<CUpdatePair2>::~CRecordVector<CUpdatePair2>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	??1?$CMyComPtr@UIOutArchive@@@@QAE@XZ	; CMyComPtr<IOutArchive>::~CMyComPtr<IOutArchive>
	mov	eax, DWORD PTR $T77835[ebp]
	jmp	$LN97@Compress
$LN28@Compress:
; Line 790
	push	0
	mov	ecx, DWORD PTR _arc$[ebp]
	mov	edx, DWORD PTR [ecx+212]
	push	edx
	mov	eax, DWORD PTR [ecx+208]
	push	eax
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
	push	eax
	mov	ecx, DWORD PTR _arc$[ebp]
	add	ecx, 4
	call	??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *
	push	eax
	call	?CopyStream_ExactSize@NCompress@@YGJPAUISequentialInStream@@PAUISequentialOutStream@@_KPAUICompressProgressInfo@@@Z ; NCompress::CopyStream_ExactSize
	mov	DWORD PTR ___result__$74994[ebp], eax
	cmp	DWORD PTR ___result__$74994[ebp], 0
	je	SHORT $LN27@Compress
	mov	ecx, DWORD PTR ___result__$74994[ebp]
	mov	DWORD PTR $T77836[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _tailStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _outSeekStream$[ebp]
	call	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _updateCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallback>::~CMyComPtr<IArchiveUpdateCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _newNames$[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _updatePairs2$[ebp]
	call	??1?$CRecordVector@UCUpdatePair2@@@@QAE@XZ ; CRecordVector<CUpdatePair2>::~CRecordVector<CUpdatePair2>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	??1?$CMyComPtr@UIOutArchive@@@@QAE@XZ	; CMyComPtr<IOutArchive>::~CMyComPtr<IOutArchive>
	mov	eax, DWORD PTR $T77836[ebp]
	jmp	$LN97@Compress
$LN27@Compress:
; Line 791
	mov	edx, DWORD PTR _options$[ebp]
	movzx	eax, BYTE PTR [edx+196]
	test	eax, eax
	je	SHORT $LN26@Compress
; Line 792
	lea	ecx, DWORD PTR _outStream$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _tailStream$[ebp]
	call	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@ABV0@@Z ; CMyComPtr<ISequentialOutStream>::operator=
; Line 793
	jmp	$LN29@Compress
$LN26@Compress:
; Line 795
	push	40					; 00000028H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T77838[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 26		; 0000001aH
	cmp	DWORD PTR $T77838[ebp], 0
	je	SHORT $LN110@Compress
	mov	ecx, DWORD PTR $T77838[ebp]
	call	??0CTailOutStream@@QAE@XZ
	mov	DWORD PTR tv762[ebp], eax
	jmp	SHORT $LN111@Compress
$LN110@Compress:
	mov	DWORD PTR tv762[ebp], 0
$LN111@Compress:
	mov	edx, DWORD PTR tv762[ebp]
	mov	DWORD PTR $T77837[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 25		; 00000019H
	mov	eax, DWORD PTR $T77837[ebp]
	mov	DWORD PTR _tailStreamSpec$74999[ebp], eax
; Line 796
	mov	ecx, DWORD PTR _tailStreamSpec$74999[ebp]
	push	ecx
	lea	ecx, DWORD PTR _tailStream$[ebp]
	call	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=
; Line 797
	lea	edx, DWORD PTR _outSeekStream$[ebp]
	push	edx
	mov	ecx, DWORD PTR _tailStreamSpec$74999[ebp]
	add	ecx, 24					; 00000018H
	call	??4?$CMyComPtr@UIOutStream@@@@QAEPAUIOutStream@@ABV0@@Z ; CMyComPtr<IOutStream>::operator=
; Line 798
	mov	eax, DWORD PTR _tailStreamSpec$74999[ebp]
	mov	ecx, DWORD PTR _arc$[ebp]
	mov	edx, DWORD PTR [ecx+208]
	mov	DWORD PTR [eax+32], edx
	mov	ecx, DWORD PTR [ecx+212]
	mov	DWORD PTR [eax+36], ecx
; Line 799
	mov	ecx, DWORD PTR _tailStreamSpec$74999[ebp]
	call	?Init@CTailOutStream@@QAEXXZ		; CTailOutStream::Init
$LN29@Compress:
; Line 804
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	??C?$CMyComPtr@UIOutArchive@@@@QBEPAUIOutArchive@@XZ ; CMyComPtr<IOutArchive>::operator->
	mov	DWORD PTR tv777[ebp], eax
	lea	ecx, DWORD PTR _updateCallback$[ebp]
	call	??B?$CMyComPtr@UIArchiveUpdateCallback@@@@QBEPAUIArchiveUpdateCallback@@XZ ; CMyComPtr<IArchiveUpdateCallback>::operator IArchiveUpdateCallback *
	mov	esi, esp
	push	eax
	lea	ecx, DWORD PTR _updatePairs2$[ebp]
	call	?Size@?$CRecordVector@UCUpdatePair2@@@@QBEIXZ ; CRecordVector<CUpdatePair2>::Size
	push	eax
	lea	ecx, DWORD PTR _tailStream$[ebp]
	call	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
	push	eax
	mov	edx, DWORD PTR tv777[ebp]
	push	edx
	mov	eax, DWORD PTR tv777[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
; Line 806
	mov	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR ___result__$75005[ebp], eax
	cmp	DWORD PTR ___result__$75005[ebp], 0
	je	SHORT $LN24@Compress
	mov	ecx, DWORD PTR ___result__$75005[ebp]
	mov	DWORD PTR $T77841[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _tailStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _outSeekStream$[ebp]
	call	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _updateCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallback>::~CMyComPtr<IArchiveUpdateCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _newNames$[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _updatePairs2$[ebp]
	call	??1?$CRecordVector@UCUpdatePair2@@@@QAE@XZ ; CRecordVector<CUpdatePair2>::~CRecordVector<CUpdatePair2>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	??1?$CMyComPtr@UIOutArchive@@@@QAE@XZ	; CMyComPtr<IOutArchive>::~CMyComPtr<IOutArchive>
	mov	eax, DWORD PTR $T77841[ebp]
	jmp	$LN97@Compress
$LN24@Compress:
; Line 808
	mov	ecx, DWORD PTR _updateCallbackSpec$[ebp]
	call	?AreAllFilesClosed@CArchiveUpdateCallback@@QBE_NXZ ; CArchiveUpdateCallback::AreAllFilesClosed
	movzx	edx, al
	test	edx, edx
	jne	$LN23@Compress
; Line 810
	push	OFFSET $SG75009
	mov	ecx, DWORD PTR _errorInfo$[ebp]
	add	ecx, 4
	call	??4AString@@QAEAAV0@PBD@Z		; AString::operator=
; Line 811
	mov	eax, DWORD PTR _updateCallbackSpec$[ebp]
	add	eax, 76					; 0000004cH
	push	eax
	mov	ecx, DWORD PTR _errorInfo$[ebp]
	add	ecx, 16					; 00000010H
	call	??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z ; CObjectVector<UString>::operator=
; Line 812
	mov	DWORD PTR $T77842[ebp], -2147467259	; 80004005H
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _tailStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _outSeekStream$[ebp]
	call	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _updateCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallback>::~CMyComPtr<IArchiveUpdateCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _newNames$[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _updatePairs2$[ebp]
	call	??1?$CRecordVector@UCUpdatePair2@@@@QAE@XZ ; CRecordVector<CUpdatePair2>::~CRecordVector<CUpdatePair2>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	??1?$CMyComPtr@UIOutArchive@@@@QAE@XZ	; CMyComPtr<IOutArchive>::~CMyComPtr<IOutArchive>
	mov	eax, DWORD PTR $T77842[ebp]
	jmp	$LN97@Compress
$LN23@Compress:
; Line 815
	mov	ecx, DWORD PTR _options$[ebp]
	movzx	edx, BYTE PTR [ecx+249]
	test	edx, edx
	je	$LN22@Compress
; Line 818
	mov	DWORD PTR _ft$75013[ebp], 0
; Line 819
	mov	DWORD PTR _ft$75013[ebp+4], 0
; Line 820
	mov	DWORD PTR _i$75014[ebp], 0
	jmp	SHORT $LN21@Compress
$LN20@Compress:
	mov	eax, DWORD PTR _i$75014[ebp]
	add	eax, 1
	mov	DWORD PTR _i$75014[ebp], eax
$LN21@Compress:
	lea	ecx, DWORD PTR _updatePairs2$[ebp]
	call	?Size@?$CRecordVector@UCUpdatePair2@@@@QBEIXZ ; CRecordVector<CUpdatePair2>::Size
	cmp	DWORD PTR _i$75014[ebp], eax
	jae	$LN19@Compress
; Line 822
	mov	ecx, DWORD PTR _i$75014[ebp]
	push	ecx
	lea	ecx, DWORD PTR _updatePairs2$[ebp]
	call	??A?$CRecordVector@UCUpdatePair2@@@@QAEAAUCUpdatePair2@@I@Z ; CRecordVector<CUpdatePair2>::operator[]
	mov	DWORD PTR _pair2$75018[ebp], eax
; Line 823
	mov	DWORD PTR _ft2$75019[ebp], 0
; Line 824
	mov	edx, DWORD PTR _pair2$75018[ebp]
	movzx	eax, BYTE PTR [edx+1]
	test	eax, eax
	je	SHORT $LN18@Compress
	mov	ecx, DWORD PTR _pair2$75018[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jl	SHORT $LN18@Compress
; Line 825
	mov	edx, DWORD PTR _pair2$75018[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _dirItems$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$CObjectVector@UCDirItem@@@@QBEABUCDirItem@@I@Z ; CObjectVector<CDirItem>::operator[]
	add	eax, 24					; 00000018H
	mov	DWORD PTR _ft2$75019[ebp], eax
	jmp	SHORT $LN17@Compress
$LN18@Compress:
; Line 826
	mov	ecx, DWORD PTR _pair2$75018[ebp]
	movzx	edx, BYTE PTR [ecx+2]
	test	edx, edx
	je	SHORT $LN17@Compress
	mov	eax, DWORD PTR _pair2$75018[ebp]
	cmp	DWORD PTR [eax+8], 0
	jl	SHORT $LN17@Compress
; Line 827
	mov	ecx, DWORD PTR _pair2$75018[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR _arcItems$[ebp]
	call	??A?$CObjectVector@UCArcItem@@@@QBEABUCArcItem@@I@Z ; CObjectVector<CArcItem>::operator[]
	add	eax, 8
	mov	DWORD PTR _ft2$75019[ebp], eax
$LN17@Compress:
; Line 828
	cmp	DWORD PTR _ft2$75019[ebp], 0
	je	SHORT $LN15@Compress
; Line 830
	mov	esi, esp
	mov	eax, DWORD PTR _ft2$75019[ebp]
	push	eax
	lea	ecx, DWORD PTR _ft$75013[ebp]
	push	ecx
	call	DWORD PTR __imp__CompareFileTime@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jge	SHORT $LN15@Compress
; Line 831
	mov	edx, DWORD PTR _ft2$75019[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _ft$75013[ebp], eax
	mov	DWORD PTR _ft$75013[ebp+4], ecx
$LN15@Compress:
; Line 833
	jmp	$LN20@Compress
$LN19@Compress:
; Line 834
	cmp	DWORD PTR _ft$75013[ebp], 0
	jne	SHORT $LN12@Compress
	cmp	DWORD PTR _ft$75013[ebp+4], 0
	je	SHORT $LN22@Compress
$LN12@Compress:
; Line 836
	cmp	DWORD PTR _outStreamSpec$[ebp], 0
	je	SHORT $LN11@Compress
; Line 837
	lea	edx, DWORD PTR _ft$75013[ebp]
	push	edx
	mov	ecx, DWORD PTR _outStreamSpec$[ebp]
	call	?SetMTime@COutFileStream@@QAE_NPBU_FILETIME@@@Z ; COutFileStream::SetMTime
	jmp	SHORT $LN22@Compress
$LN11@Compress:
; Line 838
	cmp	DWORD PTR _volStreamSpec$[ebp], 0
	je	SHORT $LN22@Compress
; Line 839
	lea	eax, DWORD PTR _ft$75013[ebp]
	push	eax
	mov	ecx, DWORD PTR _volStreamSpec$[ebp]
	call	?SetMTime@COutMultiVolStream@@QAE_NPBU_FILETIME@@@Z ; COutMultiVolStream::SetMTime
$LN22@Compress:
; Line 843
	cmp	DWORD PTR _callback$[ebp], 0
	je	SHORT $LN8@Compress
; Line 845
	mov	DWORD PTR _size$75031[ebp], 0
	mov	DWORD PTR _size$75031[ebp+4], 0
; Line 846
	cmp	DWORD PTR _outStreamSpec$[ebp], 0
	je	SHORT $LN7@Compress
; Line 847
	lea	ecx, DWORD PTR _size$75031[ebp]
	push	ecx
	mov	ecx, DWORD PTR _outStreamSpec$[ebp]
	call	?GetSize@COutFileStream@@QAEJPA_K@Z	; COutFileStream::GetSize
	jmp	SHORT $LN6@Compress
$LN7@Compress:
; Line 848
	cmp	DWORD PTR _stdOutFileStreamSpec$[ebp], 0
	je	SHORT $LN5@Compress
; Line 849
	mov	ecx, DWORD PTR _stdOutFileStreamSpec$[ebp]
	call	?GetSize@CStdOutFileStream@@QBE_KXZ	; CStdOutFileStream::GetSize
	mov	DWORD PTR _size$75031[ebp], eax
	mov	DWORD PTR _size$75031[ebp+4], edx
; Line 850
	jmp	SHORT $LN6@Compress
$LN5@Compress:
; Line 851
	mov	ecx, DWORD PTR _volStreamSpec$[ebp]
	call	?GetSize@COutMultiVolStream@@QBE_KXZ	; COutMultiVolStream::GetSize
	mov	DWORD PTR _size$75031[ebp], eax
	mov	DWORD PTR _size$75031[ebp+4], edx
$LN6@Compress:
; Line 853
	mov	edx, DWORD PTR _st$[ebp]
	mov	eax, DWORD PTR _size$75031[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _size$75031[ebp+4]
	mov	DWORD PTR [edx+4], ecx
$LN8@Compress:
; Line 856
	cmp	DWORD PTR _outStreamSpec$[ebp], 0
	je	SHORT $LN3@Compress
; Line 857
	mov	ecx, DWORD PTR _outStreamSpec$[ebp]
	call	?Close@COutFileStream@@QAEJXZ		; COutFileStream::Close
	mov	DWORD PTR _result$[ebp], eax
	jmp	SHORT $LN2@Compress
$LN3@Compress:
; Line 858
	cmp	DWORD PTR _volStreamSpec$[ebp], 0
	je	SHORT $LN2@Compress
; Line 859
	mov	ecx, DWORD PTR _volStreamSpec$[ebp]
	call	?Close@COutMultiVolStream@@QAEJXZ	; COutMultiVolStream::Close
	mov	DWORD PTR _result$[ebp], eax
$LN2@Compress:
; Line 860
	mov	edx, DWORD PTR _result$[ebp]
	mov	DWORD PTR $T77843[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR _tailStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _outStream$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _outSeekStream$[ebp]
	call	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _updateCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallback>::~CMyComPtr<IArchiveUpdateCallback>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _newNames$[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _updatePairs2$[ebp]
	call	??1?$CRecordVector@UCUpdatePair2@@@@QAE@XZ ; CRecordVector<CUpdatePair2>::~CRecordVector<CUpdatePair2>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _outArchive$[ebp]
	call	??1?$CMyComPtr@UIOutArchive@@@@QAE@XZ	; CMyComPtr<IOutArchive>::~CMyComPtr<IOutArchive>
	mov	eax, DWORD PTR $T77843[ebp]
$LN97@Compress:
; Line 861
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN165@Compress
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 868				; 00000364H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	56					; 00000038H
$LN165@Compress:
	DD	23					; 00000017H
	DD	$LN164@Compress
$LN164@Compress:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN140@Compress
	DD	-40					; ffffffd8H
	DD	4
	DD	$LN141@Compress
	DD	-64					; ffffffc0H
	DD	4
	DD	$LN142@Compress
	DD	-92					; ffffffa4H
	DD	12					; 0000000cH
	DD	$LN143@Compress
	DD	-112					; ffffff90H
	DD	12					; 0000000cH
	DD	$LN144@Compress
	DD	-144					; ffffff70H
	DD	12					; 0000000cH
	DD	$LN145@Compress
	DD	-176					; ffffff50H
	DD	12					; 0000000cH
	DD	$LN146@Compress
	DD	-204					; ffffff34H
	DD	20					; 00000014H
	DD	$LN147@Compress
	DD	-228					; ffffff1cH
	DD	12					; 0000000cH
	DD	$LN148@Compress
	DD	-248					; ffffff08H
	DD	12					; 0000000cH
	DD	$LN149@Compress
	DD	-276					; fffffeecH
	DD	4
	DD	$LN150@Compress
	DD	-288					; fffffee0H
	DD	4
	DD	$LN151@Compress
	DD	-300					; fffffed4H
	DD	4
	DD	$LN152@Compress
	DD	-320					; fffffec0H
	DD	12					; 0000000cH
	DD	$LN153@Compress
	DD	-356					; fffffe9cH
	DD	12					; 0000000cH
	DD	$LN154@Compress
	DD	-400					; fffffe70H
	DD	32					; 00000020H
	DD	$LN155@Compress
	DD	-420					; fffffe5cH
	DD	4
	DD	$LN156@Compress
	DD	-432					; fffffe50H
	DD	4
	DD	$LN157@Compress
	DD	-456					; fffffe38H
	DD	12					; 0000000cH
	DD	$LN158@Compress
	DD	-472					; fffffe28H
	DD	8
	DD	$LN159@Compress
	DD	-500					; fffffe0cH
	DD	4
	DD	$LN160@Compress
	DD	-536					; fffffde8H
	DD	8
	DD	$LN161@Compress
	DD	-564					; fffffdccH
	DD	8
	DD	$LN162@Compress
$LN162@Compress:
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN161@Compress:
	DB	102					; 00000066H
	DB	116					; 00000074H
	DB	0
$LN160@Compress:
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN159@Compress:
	DB	115					; 00000073H
	DB	102					; 00000066H
	DB	120					; 00000078H
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN158@Compress:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN157@Compress:
	DB	115					; 00000073H
	DB	102					; 00000066H
	DB	120					; 00000078H
	DB	79					; 0000004fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN156@Compress:
	DB	115					; 00000073H
	DB	102					; 00000066H
	DB	120					; 00000078H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN155@Compress:
	DB	115					; 00000073H
	DB	0
$LN154@Compress:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN153@Compress:
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	120					; 00000078H
	DB	0
$LN152@Compress:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN151@Compress:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	101					; 00000065H
	DB	101					; 00000065H
	DB	107					; 0000006bH
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN150@Compress:
	DB	117					; 00000075H
	DB	112					; 00000070H
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	98					; 00000062H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
$LN149@Compress:
	DB	117					; 00000075H
	DB	112					; 00000070H
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	98					; 00000062H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
$LN148@Compress:
	DB	117					; 00000075H
	DB	112					; 00000070H
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	0
$LN147@Compress:
	DB	117					; 00000075H
	DB	112					; 00000070H
	DB	50					; 00000032H
	DB	0
$LN146@Compress:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	78					; 0000004eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN145@Compress:
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN144@Compress:
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	78					; 0000004eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN143@Compress:
	DB	117					; 00000075H
	DB	112					; 00000070H
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	50					; 00000032H
	DB	0
$LN142@Compress:
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	0
$LN141@Compress:
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	50					; 00000032H
	DB	0
$LN140@Compress:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	65					; 00000041H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Compress@@YGJABUCUpdateOptions@@_NPAVCCodecs@@ABUCActionSet@NUpdateArchive@@PBVCArc@@AAUCArchivePath@@ABV?$CObjectVector@UCArcItem@@@@PAEABVCDirItems@@PBUCDirItem@@AAVCTempFiles@@AAUCUpdateErrorInfo@@PAUIUpdateCallbackUI@@AAUCFinishArchiveStat@@@Z$0:
	lea	ecx, DWORD PTR _outArchive$[ebp]
	jmp	??1?$CMyComPtr@UIOutArchive@@@@QAE@XZ	; CMyComPtr<IOutArchive>::~CMyComPtr<IOutArchive>
__unwindfunclet$?Compress@@YGJABUCUpdateOptions@@_NPAVCCodecs@@ABUCActionSet@NUpdateArchive@@PBVCArc@@AAUCArchivePath@@ABV?$CObjectVector@UCArcItem@@@@PAEABVCDirItems@@PBUCDirItem@@AAVCTempFiles@@AAUCUpdateErrorInfo@@PAUIUpdateCallbackUI@@AAUCFinishArchiveStat@@@Z$1:
	lea	ecx, DWORD PTR _archive2$74571[ebp]
	jmp	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
__unwindfunclet$?Compress@@YGJABUCUpdateOptions@@_NPAVCCodecs@@ABUCActionSet@NUpdateArchive@@PBVCArc@@AAUCArchivePath@@ABV?$CObjectVector@UCArcItem@@@@PAEABVCDirItems@@PBUCDirItem@@AAVCTempFiles@@AAUCUpdateErrorInfo@@PAUIUpdateCallbackUI@@AAUCFinishArchiveStat@@@Z$2:
	lea	ecx, DWORD PTR _updatePairs2$[ebp]
	jmp	??1?$CRecordVector@UCUpdatePair2@@@@QAE@XZ ; CRecordVector<CUpdatePair2>::~CRecordVector<CUpdatePair2>
__unwindfunclet$?Compress@@YGJABUCUpdateOptions@@_NPAVCCodecs@@ABUCActionSet@NUpdateArchive@@PBVCArc@@AAUCArchivePath@@ABV?$CObjectVector@UCArcItem@@@@PAEABVCDirItems@@PBUCDirItem@@AAVCTempFiles@@AAUCUpdateErrorInfo@@PAUIUpdateCallbackUI@@AAUCFinishArchiveStat@@@Z$3:
	lea	ecx, DWORD PTR _newNames$[ebp]
	jmp	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
__unwindfunclet$?Compress@@YGJABUCUpdateOptions@@_NPAVCCodecs@@ABUCActionSet@NUpdateArchive@@PBVCArc@@AAUCArchivePath@@ABV?$CObjectVector@UCArcItem@@@@PAEABVCDirItems@@PBUCDirItem@@AAVCTempFiles@@AAUCUpdateErrorInfo@@PAUIUpdateCallbackUI@@AAUCFinishArchiveStat@@@Z$4:
	lea	ecx, DWORD PTR _dest$74718[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?Compress@@YGJABUCUpdateOptions@@_NPAVCCodecs@@ABUCActionSet@NUpdateArchive@@PBVCArc@@AAUCArchivePath@@ABV?$CObjectVector@UCArcItem@@@@PAEABVCDirItems@@PBUCDirItem@@AAVCTempFiles@@AAUCUpdateErrorInfo@@PAUIUpdateCallbackUI@@AAUCFinishArchiveStat@@@Z$5:
	lea	ecx, DWORD PTR _mainName$74729[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?Compress@@YGJABUCUpdateOptions@@_NPAVCCodecs@@ABUCActionSet@NUpdateArchive@@PBVCArc@@AAUCArchivePath@@ABV?$CObjectVector@UCArcItem@@@@PAEABVCDirItems@@PBUCDirItem@@AAVCTempFiles@@AAUCUpdateErrorInfo@@PAUIUpdateCallbackUI@@AAUCFinishArchiveStat@@@Z$6:
	lea	ecx, DWORD PTR _updatePairs$74834[ebp]
	jmp	??1?$CRecordVector@UCUpdatePair@@@@QAE@XZ ; CRecordVector<CUpdatePair>::~CRecordVector<CUpdatePair>
__unwindfunclet$?Compress@@YGJABUCUpdateOptions@@_NPAVCCodecs@@ABUCActionSet@NUpdateArchive@@PBVCArc@@AAUCArchivePath@@ABV?$CObjectVector@UCArcItem@@@@PAEABVCDirItems@@PBUCDirItem@@AAVCTempFiles@@AAUCUpdateErrorInfo@@PAUIUpdateCallbackUI@@AAUCFinishArchiveStat@@@Z$7:
	mov	eax, DWORD PTR $T77796[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Compress@@YGJABUCUpdateOptions@@_NPAVCCodecs@@ABUCActionSet@NUpdateArchive@@PBVCArc@@AAUCArchivePath@@ABV?$CObjectVector@UCArcItem@@@@PAEABVCDirItems@@PBUCDirItem@@AAVCTempFiles@@AAUCUpdateErrorInfo@@PAUIUpdateCallbackUI@@AAUCFinishArchiveStat@@@Z$8:
	lea	ecx, DWORD PTR _updateCallback$[ebp]
	jmp	??1?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@XZ ; CMyComPtr<IArchiveUpdateCallback>::~CMyComPtr<IArchiveUpdateCallback>
__unwindfunclet$?Compress@@YGJABUCUpdateOptions@@_NPAVCCodecs@@ABUCActionSet@NUpdateArchive@@PBVCArc@@AAUCArchivePath@@ABV?$CObjectVector@UCArcItem@@@@PAEABVCDirItems@@PBUCDirItem@@AAVCTempFiles@@AAUCUpdateErrorInfo@@PAUIUpdateCallbackUI@@AAUCFinishArchiveStat@@@Z$9:
	lea	ecx, DWORD PTR _outSeekStream$[ebp]
	jmp	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
__unwindfunclet$?Compress@@YGJABUCUpdateOptions@@_NPAVCCodecs@@ABUCActionSet@NUpdateArchive@@PBVCArc@@AAUCArchivePath@@ABV?$CObjectVector@UCArcItem@@@@PAEABVCDirItems@@PBUCDirItem@@AAVCTempFiles@@AAUCUpdateErrorInfo@@PAUIUpdateCallbackUI@@AAUCFinishArchiveStat@@@Z$10:
	lea	ecx, DWORD PTR _outStream$[ebp]
	jmp	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
__unwindfunclet$?Compress@@YGJABUCUpdateOptions@@_NPAVCCodecs@@ABUCActionSet@NUpdateArchive@@PBVCArc@@AAUCArchivePath@@ABV?$CObjectVector@UCArcItem@@@@PAEABVCDirItems@@PBUCDirItem@@AAVCTempFiles@@AAUCUpdateErrorInfo@@PAUIUpdateCallbackUI@@AAUCFinishArchiveStat@@@Z$11:
	lea	ecx, DWORD PTR _dirPrefix$74895[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?Compress@@YGJABUCUpdateOptions@@_NPAVCCodecs@@ABUCActionSet@NUpdateArchive@@PBVCArc@@AAUCArchivePath@@ABV?$CObjectVector@UCArcItem@@@@PAEABVCDirItems@@PBUCDirItem@@AAVCTempFiles@@AAUCUpdateErrorInfo@@PAUIUpdateCallbackUI@@AAUCFinishArchiveStat@@@Z$12:
	lea	ecx, DWORD PTR $T77800[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?Compress@@YGJABUCUpdateOptions@@_NPAVCCodecs@@ABUCActionSet@NUpdateArchive@@PBVCArc@@AAUCArchivePath@@ABV?$CObjectVector@UCArcItem@@@@PAEABVCDirItems@@PBUCDirItem@@AAVCTempFiles@@AAUCUpdateErrorInfo@@PAUIUpdateCallbackUI@@AAUCFinishArchiveStat@@@Z$13:
	mov	eax, DWORD PTR $T77803[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Compress@@YGJABUCUpdateOptions@@_NPAVCCodecs@@ABUCActionSet@NUpdateArchive@@PBVCArc@@AAUCArchivePath@@ABV?$CObjectVector@UCArcItem@@@@PAEABVCDirItems@@PBUCDirItem@@AAVCTempFiles@@AAUCUpdateErrorInfo@@PAUIUpdateCallbackUI@@AAUCFinishArchiveStat@@@Z$14:
	mov	eax, DWORD PTR $T77807[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Compress@@YGJABUCUpdateOptions@@_NPAVCCodecs@@ABUCActionSet@NUpdateArchive@@PBVCArc@@AAUCArchivePath@@ABV?$CObjectVector@UCArcItem@@@@PAEABVCDirItems@@PBUCDirItem@@AAVCTempFiles@@AAUCUpdateErrorInfo@@PAUIUpdateCallbackUI@@AAUCFinishArchiveStat@@@Z$15:
	lea	ecx, DWORD PTR _realPath$74915[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?Compress@@YGJABUCUpdateOptions@@_NPAVCCodecs@@ABUCActionSet@NUpdateArchive@@PBVCArc@@AAUCArchivePath@@ABV?$CObjectVector@UCArcItem@@@@PAEABVCDirItems@@PBUCDirItem@@AAVCTempFiles@@AAUCUpdateErrorInfo@@PAUIUpdateCallbackUI@@AAUCFinishArchiveStat@@@Z$16:
	lea	ecx, DWORD PTR $T77810[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?Compress@@YGJABUCUpdateOptions@@_NPAVCCodecs@@ABUCActionSet@NUpdateArchive@@PBVCArc@@AAUCArchivePath@@ABV?$CObjectVector@UCArcItem@@@@PAEABVCDirItems@@PBUCDirItem@@AAVCTempFiles@@AAUCUpdateErrorInfo@@PAUIUpdateCallbackUI@@AAUCFinishArchiveStat@@@Z$17:
	lea	ecx, DWORD PTR $T77811[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?Compress@@YGJABUCUpdateOptions@@_NPAVCCodecs@@ABUCActionSet@NUpdateArchive@@PBVCArc@@AAUCArchivePath@@ABV?$CObjectVector@UCArcItem@@@@PAEABVCDirItems@@PBUCDirItem@@AAVCTempFiles@@AAUCUpdateErrorInfo@@PAUIUpdateCallbackUI@@AAUCFinishArchiveStat@@@Z$18:
	mov	eax, DWORD PTR $T77816[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Compress@@YGJABUCUpdateOptions@@_NPAVCCodecs@@ABUCActionSet@NUpdateArchive@@PBVCArc@@AAUCArchivePath@@ABV?$CObjectVector@UCArcItem@@@@PAEABVCDirItems@@PBUCDirItem@@AAVCTempFiles@@AAUCUpdateErrorInfo@@PAUIUpdateCallbackUI@@AAUCFinishArchiveStat@@@Z$19:
	lea	ecx, DWORD PTR $T77819[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?Compress@@YGJABUCUpdateOptions@@_NPAVCCodecs@@ABUCActionSet@NUpdateArchive@@PBVCArc@@AAUCArchivePath@@ABV?$CObjectVector@UCArcItem@@@@PAEABVCDirItems@@PBUCDirItem@@AAVCTempFiles@@AAUCUpdateErrorInfo@@PAUIUpdateCallbackUI@@AAUCFinishArchiveStat@@@Z$20:
	mov	eax, DWORD PTR $T77822[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Compress@@YGJABUCUpdateOptions@@_NPAVCCodecs@@ABUCActionSet@NUpdateArchive@@PBVCArc@@AAUCArchivePath@@ABV?$CObjectVector@UCArcItem@@@@PAEABVCDirItems@@PBUCDirItem@@AAVCTempFiles@@AAUCUpdateErrorInfo@@PAUIUpdateCallbackUI@@AAUCFinishArchiveStat@@@Z$21:
	lea	ecx, DWORD PTR _sfxStream$74954[ebp]
	jmp	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
__unwindfunclet$?Compress@@YGJABUCUpdateOptions@@_NPAVCCodecs@@ABUCActionSet@NUpdateArchive@@PBVCArc@@AAUCArchivePath@@ABV?$CObjectVector@UCArcItem@@@@PAEABVCDirItems@@PBUCDirItem@@AAVCTempFiles@@AAUCUpdateErrorInfo@@PAUIUpdateCallbackUI@@AAUCFinishArchiveStat@@@Z$22:
	lea	ecx, DWORD PTR _sfxOutStream$74959[ebp]
	jmp	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
__unwindfunclet$?Compress@@YGJABUCUpdateOptions@@_NPAVCCodecs@@ABUCActionSet@NUpdateArchive@@PBVCArc@@AAUCArchivePath@@ABV?$CObjectVector@UCArcItem@@@@PAEABVCDirItems@@PBUCDirItem@@AAVCTempFiles@@AAUCUpdateErrorInfo@@PAUIUpdateCallbackUI@@AAUCFinishArchiveStat@@@Z$23:
	mov	eax, DWORD PTR $T77827[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Compress@@YGJABUCUpdateOptions@@_NPAVCCodecs@@ABUCActionSet@NUpdateArchive@@PBVCArc@@AAUCArchivePath@@ABV?$CObjectVector@UCArcItem@@@@PAEABVCDirItems@@PBUCDirItem@@AAVCTempFiles@@AAUCUpdateErrorInfo@@PAUIUpdateCallbackUI@@AAUCFinishArchiveStat@@@Z$24:
	lea	ecx, DWORD PTR _realPath$74967[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?Compress@@YGJABUCUpdateOptions@@_NPAVCCodecs@@ABUCActionSet@NUpdateArchive@@PBVCArc@@AAUCArchivePath@@ABV?$CObjectVector@UCArcItem@@@@PAEABVCDirItems@@PBUCDirItem@@AAVCTempFiles@@AAUCUpdateErrorInfo@@PAUIUpdateCallbackUI@@AAUCFinishArchiveStat@@@Z$25:
	lea	ecx, DWORD PTR _tailStream$[ebp]
	jmp	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
__unwindfunclet$?Compress@@YGJABUCUpdateOptions@@_NPAVCCodecs@@ABUCActionSet@NUpdateArchive@@PBVCArc@@AAUCArchivePath@@ABV?$CObjectVector@UCArcItem@@@@PAEABVCDirItems@@PBUCDirItem@@AAVCTempFiles@@AAUCUpdateErrorInfo@@PAUIUpdateCallbackUI@@AAUCFinishArchiveStat@@@Z$26:
	mov	eax, DWORD PTR $T77838[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Compress@@YGJABUCUpdateOptions@@_NPAVCCodecs@@ABUCActionSet@NUpdateArchive@@PBVCArc@@AAUCArchivePath@@ABV?$CObjectVector@UCArcItem@@@@PAEABVCDirItems@@PBUCDirItem@@AAVCTempFiles@@AAUCUpdateErrorInfo@@PAUIUpdateCallbackUI@@AAUCFinishArchiveStat@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-868]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Compress@@YGJABUCUpdateOptions@@_NPAVCCodecs@@ABUCActionSet@NUpdateArchive@@PBVCArc@@AAUCArchivePath@@ABV?$CObjectVector@UCArcItem@@@@PAEABVCDirItems@@PBUCDirItem@@AAVCTempFiles@@AAUCUpdateErrorInfo@@PAUIUpdateCallbackUI@@AAUCFinishArchiveStat@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Compress@@YGJABUCUpdateOptions@@_NPAVCCodecs@@ABUCActionSet@NUpdateArchive@@PBVCArc@@AAUCArchivePath@@ABV?$CObjectVector@UCArcItem@@@@PAEABVCDirItems@@PBUCDirItem@@AAVCTempFiles@@AAUCUpdateErrorInfo@@PAUIUpdateCallbackUI@@AAUCFinishArchiveStat@@@Z ENDP ; Compress
EXTRN	??0UString@@AAE@IABV0@@Z:PROC			; UString::UString
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Left@UString@@QBE?AV1@I@Z
_TEXT	SEGMENT
$T77903 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_count$ = 12						; size = 4
?Left@UString@@QBE?AV1@I@Z PROC				; UString::Left, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 540
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T77903[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0UString@@AAE@IABV0@@Z		; UString::UString
	mov	edx, DWORD PTR $T77903[ebp]
	or	edx, 1
	mov	DWORD PTR $T77903[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Left@UString@@QBE?AV1@I@Z ENDP				; UString::Left
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Flags_AltStreams@CArcInfoEx@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Flags_AltStreams@CArcInfoEx@@QBE_NXZ PROC		; CArcInfoEx::Flags_AltStreams, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\loadcodecs.h
; Line 125
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	and	eax, 2
	neg	eax
	sbb	eax, eax
	neg	eax
	mov	esp, ebp
	pop	ebp
	ret	0
?Flags_AltStreams@CArcInfoEx@@QBE_NXZ ENDP		; CArcInfoEx::Flags_AltStreams
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Flags_NtSecure@CArcInfoEx@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Flags_NtSecure@CArcInfoEx@@QBE_NXZ PROC		; CArcInfoEx::Flags_NtSecure, COMDAT
; _this$ = ecx
; Line 126
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	and	eax, 4
	neg	eax
	sbb	eax, eax
	neg	eax
	mov	esp, ebp
	pop	ebp
	ret	0
?Flags_NtSecure@CArcInfoEx@@QBE_NXZ ENDP		; CArcInfoEx::Flags_NtSecure
_TEXT	ENDS
PUBLIC	??4?$CMyComPtr@UIOutArchive@@@@QAEPAUIOutArchive@@PAU1@@Z ; CMyComPtr<IOutArchive>::operator=
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?CreateOutArchive@CCodecs@@QBEJIAAV?$CMyComPtr@UIOutArchive@@@@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?CreateOutArchive@CCodecs@@QBEJIAAV?$CMyComPtr@UIOutArchive@@@@@Z$0
__unwindtable$?CreateOutArchive@CCodecs@@QBEJIAAV?$CMyComPtr@UIOutArchive@@@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?CreateOutArchive@CCodecs@@QBEJIAAV?$CMyComPtr@UIOutArchive@@@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?CreateOutArchive@CCodecs@@QBEJIAAV?$CMyComPtr@UIOutArchive@@@@@Z$2
__ehfuncinfo$?CreateOutArchive@CCodecs@@QBEJIAAV?$CMyComPtr@UIOutArchive@@@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?CreateOutArchive@CCodecs@@QBEJIAAV?$CMyComPtr@UIOutArchive@@@@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?CreateOutArchive@CCodecs@@QBEJIAAV?$CMyComPtr@UIOutArchive@@@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?CreateOutArchive@CCodecs@@QBEJIAAV?$CMyComPtr@UIOutArchive@@@@@Z
_TEXT	SEGMENT
tv73 = -32						; size = 4
$T77911 = -28						; size = 4
_ai$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
_formatIndex$ = 8					; size = 4
_archive$ = 12						; size = 4
?CreateOutArchive@CCodecs@@QBEJIAAV?$CMyComPtr@UIOutArchive@@@@@Z PROC ; CCodecs::CreateOutArchive, COMDAT
; _this$ = ecx
; Line 377
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateOutArchive@CCodecs@@QBEJIAAV?$CMyComPtr@UIOutArchive@@@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
; Line 378
	mov	eax, DWORD PTR _formatIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??A?$CObjectVector@UCArcInfoEx@@@@QBEABUCArcInfoEx@@I@Z ; CObjectVector<CArcInfoEx>::operator[]
	mov	DWORD PTR _ai$[ebp], eax
; Line 383
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 384
	mov	ecx, DWORD PTR _ai$[ebp]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv73[ebp], eax
	mov	eax, DWORD PTR tv73[ebp]
	push	eax
	mov	ecx, DWORD PTR _archive$[ebp]
	call	??4?$CMyComPtr@UIOutArchive@@@@QAEPAUIOutArchive@@PAU1@@Z ; CMyComPtr<IOutArchive>::operator=
; Line 385
	xor	eax, eax
	jmp	SHORT $LN2@CreateOutA
__catch$?CreateOutArchive@CCodecs@@QBEJIAAV?$CMyComPtr@UIOutArchive@@@@@Z$0:
; Line 386
	mov	DWORD PTR $T77911[ebp], -2147024882	; 8007000eH
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN7@CreateOutA
	ret	0
	mov	eax, __tryend$?CreateOutArchive@CCodecs@@QBEJIAAV?$CMyComPtr@UIOutArchive@@@@@Z$1
	ret	0
__tryend$?CreateOutArchive@CCodecs@@QBEJIAAV?$CMyComPtr@UIOutArchive@@@@@Z$1:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN2@CreateOutA
$LN7@CreateOutA:
	mov	eax, DWORD PTR $T77911[ebp]
$LN2@CreateOutA:
; Line 392
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?CreateOutArchive@CCodecs@@QBEJIAAV?$CMyComPtr@UIOutArchive@@@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateOutArchive@CCodecs@@QBEJIAAV?$CMyComPtr@UIOutArchive@@@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateOutArchive@CCodecs@@QBEJIAAV?$CMyComPtr@UIOutArchive@@@@@Z ENDP ; CCodecs::CreateOutArchive
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetGlobalOffset@CArc@@QBE_JXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGlobalOffset@CArc@@QBE_JXZ PROC			; CArc::GetGlobalOffset, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\openarchive.h
; Line 303
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+208]
	add	edx, DWORD PTR [ecx+168]
	mov	esi, DWORD PTR [eax+212]
	adc	esi, DWORD PTR [ecx+172]
	mov	eax, edx
	mov	edx, esi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?GetGlobalOffset@CArc@@QBE_JXZ ENDP			; CArc::GetGlobalOffset
_TEXT	ENDS
PUBLIC	??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator IInArchive *
EXTRN	?Archive_GetItemBoolProp@@YGJPAUIInArchive@@IKAA_N@Z:PROC ; Archive_GetItemBoolProp
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsItemAnti@CArc@@QBEJIAA_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
_result$ = 12						; size = 4
?IsItemAnti@CArc@@QBEJIAA_N@Z PROC			; CArc::IsItemAnti, COMDAT
; _this$ = ecx
; Line 353
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _result$[ebp]
	push	eax
	push	21					; 00000015H
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator IInArchive *
	push	eax
	call	?Archive_GetItemBoolProp@@YGJPAUIInArchive@@IKAA_N@Z ; Archive_GetItemBoolProp
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?IsItemAnti@CArc@@QBEJIAA_N@Z ENDP			; CArc::IsItemAnti
_TEXT	ENDS
EXTRN	?Open@CInFile@NIO@NFile@NWindows@@QAE_NPB_W@Z:PROC ; NWindows::NFile::NIO::CInFile::Open
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Open@CInFileStream@@QAE_NPB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_fileName$ = 8						; size = 4
?Open@CInFileStream@@QAE_NPB_W@Z PROC			; CInFileStream::Open, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\filestreams.h
; Line 69
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 70
	mov	eax, DWORD PTR _fileName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?Open@CInFile@NIO@NFile@NWindows@@QAE_NPB_W@Z ; NWindows::NFile::NIO::CInFile::Open
; Line 71
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Open@CInFileStream@@QAE_NPB_W@Z ENDP			; CInFileStream::Open
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetSize@CStdOutFileStream@@QBE_KXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSize@CStdOutFileStream@@QBE_KXZ PROC		; CStdOutFileStream::GetSize, COMDAT
; _this$ = ecx
; Line 160
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR [ecx+12]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSize@CStdOutFileStream@@QBE_KXZ ENDP		; CStdOutFileStream::GetSize
_TEXT	ENDS
PUBLIC	??_7CStdOutFileStream@@6B@			; CStdOutFileStream::`vftable'
PUBLIC	??_R4CStdOutFileStream@@6B@			; CStdOutFileStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCStdOutFileStream@@@8			; CStdOutFileStream `RTTI Type Descriptor'
PUBLIC	??_R3CStdOutFileStream@@8			; CStdOutFileStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CStdOutFileStream@@8			; CStdOutFileStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CStdOutFileStream@@8		; CStdOutFileStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?QueryInterface@CStdOutFileStream@@UAGJABU_GUID@@PAPAX@Z ; CStdOutFileStream::QueryInterface
PUBLIC	?AddRef@CStdOutFileStream@@UAGKXZ		; CStdOutFileStream::AddRef
PUBLIC	?Release@CStdOutFileStream@@UAGKXZ		; CStdOutFileStream::Release
EXTRN	?Write@CStdOutFileStream@@UAGJPBXIPAI@Z:PROC	; CStdOutFileStream::Write
EXTRN	??_ECStdOutFileStream@@UAEPAXI@Z:PROC		; CStdOutFileStream::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CStdOutFileStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CStdOutFileStream@@8 DD FLAT:??_R0?AVCStdOutFileStream@@@8 ; CStdOutFileStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CStdOutFileStream@@8
rdata$r	ENDS
;	COMDAT ??_R2CStdOutFileStream@@8
rdata$r	SEGMENT
??_R2CStdOutFileStream@@8 DD FLAT:??_R1A@?0A@EA@CStdOutFileStream@@8 ; CStdOutFileStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ISequentialOutStream@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CStdOutFileStream@@8
rdata$r	SEGMENT
??_R3CStdOutFileStream@@8 DD 00H			; CStdOutFileStream::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2CStdOutFileStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCStdOutFileStream@@@8
_DATA	SEGMENT
??_R0?AVCStdOutFileStream@@@8 DD FLAT:??_7type_info@@6B@ ; CStdOutFileStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCStdOutFileStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CStdOutFileStream@@6B@
rdata$r	SEGMENT
??_R4CStdOutFileStream@@6B@ DD 00H			; CStdOutFileStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCStdOutFileStream@@@8
	DD	FLAT:??_R3CStdOutFileStream@@8
rdata$r	ENDS
;	COMDAT ??_7CStdOutFileStream@@6B@
CONST	SEGMENT
??_7CStdOutFileStream@@6B@ DD FLAT:??_R4CStdOutFileStream@@6B@ ; CStdOutFileStream::`vftable'
	DD	FLAT:?QueryInterface@CStdOutFileStream@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CStdOutFileStream@@UAGKXZ
	DD	FLAT:?Release@CStdOutFileStream@@UAGKXZ
	DD	FLAT:?Write@CStdOutFileStream@@UAGJPBXIPAI@Z
	DD	FLAT:??_ECStdOutFileStream@@UAEPAXI@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CStdOutFileStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CStdOutFileStream@@QAE@XZ PROC			; CStdOutFileStream::CStdOutFileStream, COMDAT
; _this$ = ecx
; Line 161
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ISequentialOutStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CStdOutFileStream@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CStdOutFileStream@@QAE@XZ ENDP			; CStdOutFileStream::CStdOutFileStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CStdOutFileStream@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CStdOutFileStream@@UAGJABU_GUID@@PAPAX@Z PROC ; CStdOutFileStream::QueryInterface, COMDAT
; Line 158
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@2
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN1@QueryInter@2
$LN2@QueryInter@2:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN3@QueryInter@2
$LN1@QueryInter@2:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	xor	eax, eax
$LN3@QueryInter@2:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CStdOutFileStream@@UAGJABU_GUID@@PAPAX@Z ENDP ; CStdOutFileStream::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CStdOutFileStream@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CStdOutFileStream@@UAGKXZ PROC			; CStdOutFileStream::AddRef, COMDAT
; Line 158
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CStdOutFileStream@@UAGKXZ ENDP			; CStdOutFileStream::AddRef
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CStdOutFileStream@@UAGKXZ
_TEXT	SEGMENT
tv83 = -16						; size = 4
tv70 = -12						; size = 4
$T77942 = -8						; size = 4
$T77941 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CStdOutFileStream@@UAGKXZ PROC			; CStdOutFileStream::Release, COMDAT
; Line 158
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	jmp	SHORT $LN2@Release@2
$LN1@Release@2:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T77942[ebp], edx
	mov	eax, DWORD PTR $T77942[ebp]
	mov	DWORD PTR $T77941[ebp], eax
	cmp	DWORD PTR $T77941[ebp], 0
	je	SHORT $LN4@Release@2
	mov	esi, esp
	push	1
	mov	ecx, DWORD PTR $T77941[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T77941[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv83[ebp], eax
	jmp	SHORT $LN5@Release@2
$LN4@Release@2:
	mov	DWORD PTR tv83[ebp], 0
$LN5@Release@2:
	xor	eax, eax
$LN2@Release@2:
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CStdOutFileStream@@UAGKXZ ENDP			; CStdOutFileStream::Release
_TEXT	ENDS
PUBLIC	??1CStdOutFileStream@@UAE@XZ			; CStdOutFileStream::~CStdOutFileStream
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCStdOutFileStream@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCStdOutFileStream@@UAEPAXI@Z PROC			; CStdOutFileStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CStdOutFileStream@@UAE@XZ		; CStdOutFileStream::~CStdOutFileStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCStdOutFileStream@@UAEPAXI@Z ENDP			; CStdOutFileStream::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CStdOutFileStream@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CStdOutFileStream@@UAE@XZ PROC			; CStdOutFileStream::~CStdOutFileStream, COMDAT
; _this$ = ecx
; Line 162
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CStdOutFileStream@@6B@
	mov	esp, ebp
	pop	ebp
	ret	0
??1CStdOutFileStream@@UAE@XZ ENDP			; CStdOutFileStream::~CStdOutFileStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SetAs_NoChangeArcItem@CUpdatePair2@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_arcIndex$ = 8						; size = 4
?SetAs_NoChangeArcItem@CUpdatePair2@@QAEXH@Z PROC	; CUpdatePair2::SetAs_NoChangeArcItem, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\updateproduce.h
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 23
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx], 0
; Line 24
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+2], 1
; Line 25
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+3], 0
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _arcIndex$[ebp]
	mov	DWORD PTR [ecx+8], edx
; Line 27
	mov	esp, ebp
	pop	ebp
	ret	4
?SetAs_NoChangeArcItem@CUpdatePair2@@QAEXH@Z ENDP	; CUpdatePair2::SetAs_NoChangeArcItem
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CUpdatePair2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CUpdatePair2@@QAE@XZ PROC				; CUpdatePair2::CUpdatePair2, COMDAT
; _this$ = ecx
; Line 41
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+2], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+3], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+16], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CUpdatePair2@@QAE@XZ ENDP				; CUpdatePair2::CUpdatePair2
_TEXT	ENDS
PUBLIC	?IsEmpty@?$CRecordVector@I@@QBE_NXZ		; CRecordVector<unsigned int>::IsEmpty
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?AreAllFilesClosed@CArchiveUpdateCallback@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?AreAllFilesClosed@CArchiveUpdateCallback@@QBE_NXZ PROC	; CArchiveUpdateCallback::AreAllFilesClosed, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\updatecallback.h
; Line 105
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?IsEmpty@?$CRecordVector@I@@QBE_NXZ	; CRecordVector<unsigned int>::IsEmpty
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?AreAllFilesClosed@CArchiveUpdateCallback@@QBE_NXZ ENDP	; CArchiveUpdateCallback::AreAllFilesClosed
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Init@CTailOutStream@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Init@CTailOutStream@@QAEXXZ PROC			; CTailOutStream::Init, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\limitedstreams.h
; Line 241
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 242
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	DWORD PTR [eax+12], 0
; Line 243
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
; Line 244
	mov	esp, ebp
	pop	ebp
	ret	0
?Init@CTailOutStream@@QAEXXZ ENDP			; CTailOutStream::Init
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Init@COutMultiVolStream@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Init@COutMultiVolStream@@QAEXXZ PROC			; COutMultiVolStream::Init, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\update.cpp
; Line 107
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 108
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 109
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
; Line 110
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
; Line 111
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0
	mov	DWORD PTR [eax+36], 0
; Line 112
	mov	esp, ebp
	pop	ebp
	ret	0
?Init@COutMultiVolStream@@QAEXXZ ENDP			; COutMultiVolStream::Init
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetSize@COutMultiVolStream@@QBE_KXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSize@COutMultiVolStream@@QBE_KXZ PROC		; COutMultiVolStream::GetSize, COMDAT
; _this$ = ecx
; Line 117
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+32]
	mov	edx, DWORD PTR [ecx+36]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSize@COutMultiVolStream@@QBE_KXZ ENDP		; COutMultiVolStream::GetSize
_TEXT	ENDS
PUBLIC	??_7CUpdateProduceCallbackImp@@6B@		; CUpdateProduceCallbackImp::`vftable'
PUBLIC	??0IUpdateProduceCallback@@QAE@XZ		; IUpdateProduceCallback::IUpdateProduceCallback
PUBLIC	??_R4CUpdateProduceCallbackImp@@6B@		; CUpdateProduceCallbackImp::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUCUpdateProduceCallbackImp@@@8		; CUpdateProduceCallbackImp `RTTI Type Descriptor'
PUBLIC	??_R3CUpdateProduceCallbackImp@@8		; CUpdateProduceCallbackImp::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CUpdateProduceCallbackImp@@8		; CUpdateProduceCallbackImp::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CUpdateProduceCallbackImp@@8	; CUpdateProduceCallbackImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@IUpdateProduceCallback@@8		; IUpdateProduceCallback::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIUpdateProduceCallback@@@8		; IUpdateProduceCallback `RTTI Type Descriptor'
PUBLIC	??_R3IUpdateProduceCallback@@8			; IUpdateProduceCallback::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IUpdateProduceCallback@@8			; IUpdateProduceCallback::`RTTI Base Class Array'
;	COMDAT ??_R2IUpdateProduceCallback@@8
rdata$r	SEGMENT
??_R2IUpdateProduceCallback@@8 DD FLAT:??_R1A@?0A@EA@IUpdateProduceCallback@@8 ; IUpdateProduceCallback::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3IUpdateProduceCallback@@8
rdata$r	SEGMENT
??_R3IUpdateProduceCallback@@8 DD 00H			; IUpdateProduceCallback::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2IUpdateProduceCallback@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIUpdateProduceCallback@@@8
_DATA	SEGMENT
??_R0?AUIUpdateProduceCallback@@@8 DD FLAT:??_7type_info@@6B@ ; IUpdateProduceCallback `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIUpdateProduceCallback@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IUpdateProduceCallback@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IUpdateProduceCallback@@8 DD FLAT:??_R0?AUIUpdateProduceCallback@@@8 ; IUpdateProduceCallback::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IUpdateProduceCallback@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CUpdateProduceCallbackImp@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CUpdateProduceCallbackImp@@8 DD FLAT:??_R0?AUCUpdateProduceCallbackImp@@@8 ; CUpdateProduceCallbackImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CUpdateProduceCallbackImp@@8
rdata$r	ENDS
;	COMDAT ??_R2CUpdateProduceCallbackImp@@8
rdata$r	SEGMENT
??_R2CUpdateProduceCallbackImp@@8 DD FLAT:??_R1A@?0A@EA@CUpdateProduceCallbackImp@@8 ; CUpdateProduceCallbackImp::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUpdateProduceCallback@@8
rdata$r	ENDS
;	COMDAT ??_R3CUpdateProduceCallbackImp@@8
rdata$r	SEGMENT
??_R3CUpdateProduceCallbackImp@@8 DD 00H		; CUpdateProduceCallbackImp::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CUpdateProduceCallbackImp@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUCUpdateProduceCallbackImp@@@8
_DATA	SEGMENT
??_R0?AUCUpdateProduceCallbackImp@@@8 DD FLAT:??_7type_info@@6B@ ; CUpdateProduceCallbackImp `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUCUpdateProduceCallbackImp@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CUpdateProduceCallbackImp@@6B@
rdata$r	SEGMENT
??_R4CUpdateProduceCallbackImp@@6B@ DD 00H		; CUpdateProduceCallbackImp::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUCUpdateProduceCallbackImp@@@8
	DD	FLAT:??_R3CUpdateProduceCallbackImp@@8
rdata$r	ENDS
;	COMDAT ??_7CUpdateProduceCallbackImp@@6B@
CONST	SEGMENT
??_7CUpdateProduceCallbackImp@@6B@ DD FLAT:??_R4CUpdateProduceCallbackImp@@6B@ ; CUpdateProduceCallbackImp::`vftable'
	DD	FLAT:?ShowDeleteFile@CUpdateProduceCallbackImp@@UAEJI@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CUpdateProduceCallbackImp@@QAE@PBV?$CObjectVector@UCArcItem@@@@PAUIUpdateCallbackUI@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_a$ = 8							; size = 4
_callback$ = 12						; size = 4
??0CUpdateProduceCallbackImp@@QAE@PBV?$CObjectVector@UCArcItem@@@@PAUIUpdateCallbackUI@@@Z PROC ; CUpdateProduceCallbackImp::CUpdateProduceCallbackImp, COMDAT
; _this$ = ecx
; Line 422
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUpdateProduceCallback@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CUpdateProduceCallbackImp@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _callback$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0CUpdateProduceCallbackImp@@QAE@PBV?$CObjectVector@UCArcItem@@@@PAUIUpdateCallbackUI@@@Z ENDP ; CUpdateProduceCallbackImp::CUpdateProduceCallbackImp
_TEXT	ENDS
PUBLIC	??_7IUpdateProduceCallback@@6B@			; IUpdateProduceCallback::`vftable'
PUBLIC	??_R4IUpdateProduceCallback@@6B@		; IUpdateProduceCallback::`RTTI Complete Object Locator'
;	COMDAT ??_R4IUpdateProduceCallback@@6B@
rdata$r	SEGMENT
??_R4IUpdateProduceCallback@@6B@ DD 00H			; IUpdateProduceCallback::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIUpdateProduceCallback@@@8
	DD	FLAT:??_R3IUpdateProduceCallback@@8
rdata$r	ENDS
;	COMDAT ??_7IUpdateProduceCallback@@6B@
CONST	SEGMENT
??_7IUpdateProduceCallback@@6B@ DD FLAT:??_R4IUpdateProduceCallback@@6B@ ; IUpdateProduceCallback::`vftable'
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0IUpdateProduceCallback@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IUpdateProduceCallback@@QAE@XZ PROC			; IUpdateProduceCallback::IUpdateProduceCallback, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7IUpdateProduceCallback@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0IUpdateProduceCallback@@QAE@XZ ENDP			; IUpdateProduceCallback::IUpdateProduceCallback
_TEXT	ENDS
PUBLIC	??1?$CRecordVector@_K@@QAE@XZ			; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
PUBLIC	??1?$CObjectVector@UCAltStreamInfo@COutMultiVolStream@@@@QAE@XZ ; CObjectVector<COutMultiVolStream::CAltStreamInfo>::~CObjectVector<COutMultiVolStream::CAltStreamInfo>
PUBLIC	??0?$CRecordVector@_K@@QAE@XZ			; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>
PUBLIC	??0?$CObjectVector@UCAltStreamInfo@COutMultiVolStream@@@@QAE@XZ ; CObjectVector<COutMultiVolStream::CAltStreamInfo>::CObjectVector<COutMultiVolStream::CAltStreamInfo>
PUBLIC	??_7COutMultiVolStream@@6B@			; COutMultiVolStream::`vftable'
PUBLIC	??_R4COutMultiVolStream@@6B@			; COutMultiVolStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCOutMultiVolStream@@@8			; COutMultiVolStream `RTTI Type Descriptor'
PUBLIC	??_R3COutMultiVolStream@@8			; COutMultiVolStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2COutMultiVolStream@@8			; COutMultiVolStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@COutMultiVolStream@@8		; COutMultiVolStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?QueryInterface@COutMultiVolStream@@UAGJABU_GUID@@PAPAX@Z ; COutMultiVolStream::QueryInterface
PUBLIC	?AddRef@COutMultiVolStream@@UAGKXZ		; COutMultiVolStream::AddRef
PUBLIC	?Release@COutMultiVolStream@@UAGKXZ		; COutMultiVolStream::Release
;	COMDAT ??_R1A@?0A@EA@COutMultiVolStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@COutMultiVolStream@@8 DD FLAT:??_R0?AVCOutMultiVolStream@@@8 ; COutMultiVolStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3COutMultiVolStream@@8
rdata$r	ENDS
;	COMDAT ??_R2COutMultiVolStream@@8
rdata$r	SEGMENT
??_R2COutMultiVolStream@@8 DD FLAT:??_R1A@?0A@EA@COutMultiVolStream@@8 ; COutMultiVolStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IOutStream@@8
	DD	FLAT:??_R1A@?0A@EA@ISequentialOutStream@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3COutMultiVolStream@@8
rdata$r	SEGMENT
??_R3COutMultiVolStream@@8 DD 00H			; COutMultiVolStream::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2COutMultiVolStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCOutMultiVolStream@@@8
_DATA	SEGMENT
??_R0?AVCOutMultiVolStream@@@8 DD FLAT:??_7type_info@@6B@ ; COutMultiVolStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCOutMultiVolStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R4COutMultiVolStream@@6B@
rdata$r	SEGMENT
??_R4COutMultiVolStream@@6B@ DD 00H			; COutMultiVolStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCOutMultiVolStream@@@8
	DD	FLAT:??_R3COutMultiVolStream@@8
rdata$r	ENDS
;	COMDAT ??_7COutMultiVolStream@@6B@
CONST	SEGMENT
??_7COutMultiVolStream@@6B@ DD FLAT:??_R4COutMultiVolStream@@6B@ ; COutMultiVolStream::`vftable'
	DD	FLAT:?QueryInterface@COutMultiVolStream@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@COutMultiVolStream@@UAGKXZ
	DD	FLAT:?Release@COutMultiVolStream@@UAGKXZ
	DD	FLAT:?Write@COutMultiVolStream@@UAGJPBXIPAI@Z
	DD	FLAT:?Seek@COutMultiVolStream@@UAGJ_JIPA_K@Z
	DD	FLAT:?SetSize@COutMultiVolStream@@UAGJ_K@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0COutMultiVolStream@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0COutMultiVolStream@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0COutMultiVolStream@@QAE@XZ$1
__ehfuncinfo$??0COutMultiVolStream@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0COutMultiVolStream@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0COutMultiVolStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0COutMultiVolStream@@QAE@XZ PROC			; COutMultiVolStream::COutMultiVolStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0COutMultiVolStream@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IOutStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7COutMultiVolStream@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??0?$CObjectVector@UCAltStreamInfo@COutMultiVolStream@@@@QAE@XZ ; CObjectVector<COutMultiVolStream::CAltStreamInfo>::CObjectVector<COutMultiVolStream::CAltStreamInfo>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??0?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0COutMultiVolStream@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	jmp	??1?$CObjectVector@UCAltStreamInfo@COutMultiVolStream@@@@QAE@XZ ; CObjectVector<COutMultiVolStream::CAltStreamInfo>::~CObjectVector<COutMultiVolStream::CAltStreamInfo>
__unwindfunclet$??0COutMultiVolStream@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	jmp	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
__ehhandler$??0COutMultiVolStream@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0COutMultiVolStream@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0COutMultiVolStream@@QAE@XZ ENDP			; COutMultiVolStream::COutMultiVolStream
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@COutMultiVolStream@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@COutMultiVolStream@@UAGJABU_GUID@@PAPAX@Z PROC ; COutMultiVolStream::QueryInterface, COMDAT
; Line 119
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@QueryInter@3
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN3@QueryInter@3
$LN4@QueryInter@3:
	push	OFFSET _IID_IOutStream
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@3
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN3@QueryInter@3
$LN2@QueryInter@3:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN5@QueryInter@3
$LN3@QueryInter@3:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	xor	eax, eax
$LN5@QueryInter@3:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@COutMultiVolStream@@UAGJABU_GUID@@PAPAX@Z ENDP ; COutMultiVolStream::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@COutMultiVolStream@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@COutMultiVolStream@@UAGKXZ PROC			; COutMultiVolStream::AddRef, COMDAT
; Line 119
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@COutMultiVolStream@@UAGKXZ ENDP			; COutMultiVolStream::AddRef
_TEXT	ENDS
PUBLIC	??_GCOutMultiVolStream@@QAEPAXI@Z		; COutMultiVolStream::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@COutMultiVolStream@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T77983 = -8						; size = 4
$T77982 = -4						; size = 4
_this$ = 8						; size = 4
?Release@COutMultiVolStream@@UAGKXZ PROC		; COutMultiVolStream::Release, COMDAT
; Line 119
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	jmp	SHORT $LN2@Release@3
$LN1@Release@3:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T77983[ebp], edx
	mov	eax, DWORD PTR $T77983[ebp]
	mov	DWORD PTR $T77982[ebp], eax
	cmp	DWORD PTR $T77982[ebp], 0
	je	SHORT $LN4@Release@3
	push	1
	mov	ecx, DWORD PTR $T77982[ebp]
	call	??_GCOutMultiVolStream@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release@3
$LN4@Release@3:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release@3:
	xor	eax, eax
$LN2@Release@3:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@COutMultiVolStream@@UAGKXZ ENDP		; COutMultiVolStream::Release
_TEXT	ENDS
PUBLIC	??1COutMultiVolStream@@QAE@XZ			; COutMultiVolStream::~COutMultiVolStream
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCOutMultiVolStream@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCOutMultiVolStream@@QAEPAXI@Z PROC			; COutMultiVolStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1COutMultiVolStream@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@3
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCOutMultiVolStream@@QAEPAXI@Z ENDP			; COutMultiVolStream::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1COutMultiVolStream@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1COutMultiVolStream@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1COutMultiVolStream@@QAE@XZ$1
__ehfuncinfo$??1COutMultiVolStream@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1COutMultiVolStream@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1COutMultiVolStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1COutMultiVolStream@@QAE@XZ PROC			; COutMultiVolStream::~COutMultiVolStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1COutMultiVolStream@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??1?$CObjectVector@UCAltStreamInfo@COutMultiVolStream@@@@QAE@XZ ; CObjectVector<COutMultiVolStream::CAltStreamInfo>::~CObjectVector<COutMultiVolStream::CAltStreamInfo>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1COutMultiVolStream@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	jmp	??1?$CObjectVector@UCAltStreamInfo@COutMultiVolStream@@@@QAE@XZ ; CObjectVector<COutMultiVolStream::CAltStreamInfo>::~CObjectVector<COutMultiVolStream::CAltStreamInfo>
__unwindfunclet$??1COutMultiVolStream@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	jmp	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
__ehhandler$??1COutMultiVolStream@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1COutMultiVolStream@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1COutMultiVolStream@@QAE@XZ ENDP			; COutMultiVolStream::~COutMultiVolStream
PUBLIC	??_7CTailOutStream@@6B@				; CTailOutStream::`vftable'
PUBLIC	??_R4CTailOutStream@@6B@			; CTailOutStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCTailOutStream@@@8			; CTailOutStream `RTTI Type Descriptor'
PUBLIC	??_R3CTailOutStream@@8				; CTailOutStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CTailOutStream@@8				; CTailOutStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CTailOutStream@@8			; CTailOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?QueryInterface@CTailOutStream@@UAGJABU_GUID@@PAPAX@Z ; CTailOutStream::QueryInterface
PUBLIC	?AddRef@CTailOutStream@@UAGKXZ			; CTailOutStream::AddRef
PUBLIC	?Release@CTailOutStream@@UAGKXZ			; CTailOutStream::Release
EXTRN	?Write@CTailOutStream@@UAGJPBXIPAI@Z:PROC	; CTailOutStream::Write
EXTRN	?Seek@CTailOutStream@@UAGJ_JIPA_K@Z:PROC	; CTailOutStream::Seek
EXTRN	?SetSize@CTailOutStream@@UAGJ_K@Z:PROC		; CTailOutStream::SetSize
EXTRN	??_ECTailOutStream@@UAEPAXI@Z:PROC		; CTailOutStream::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CTailOutStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CTailOutStream@@8 DD FLAT:??_R0?AVCTailOutStream@@@8 ; CTailOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CTailOutStream@@8
rdata$r	ENDS
;	COMDAT ??_R2CTailOutStream@@8
rdata$r	SEGMENT
??_R2CTailOutStream@@8 DD FLAT:??_R1A@?0A@EA@CTailOutStream@@8 ; CTailOutStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IOutStream@@8
	DD	FLAT:??_R1A@?0A@EA@ISequentialOutStream@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CTailOutStream@@8
rdata$r	SEGMENT
??_R3CTailOutStream@@8 DD 00H				; CTailOutStream::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2CTailOutStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCTailOutStream@@@8
_DATA	SEGMENT
??_R0?AVCTailOutStream@@@8 DD FLAT:??_7type_info@@6B@	; CTailOutStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCTailOutStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CTailOutStream@@6B@
rdata$r	SEGMENT
??_R4CTailOutStream@@6B@ DD 00H				; CTailOutStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCTailOutStream@@@8
	DD	FLAT:??_R3CTailOutStream@@8
rdata$r	ENDS
;	COMDAT ??_7CTailOutStream@@6B@
CONST	SEGMENT
??_7CTailOutStream@@6B@ DD FLAT:??_R4CTailOutStream@@6B@ ; CTailOutStream::`vftable'
	DD	FLAT:?QueryInterface@CTailOutStream@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CTailOutStream@@UAGKXZ
	DD	FLAT:?Release@CTailOutStream@@UAGKXZ
	DD	FLAT:?Write@CTailOutStream@@UAGJPBXIPAI@Z
	DD	FLAT:?Seek@CTailOutStream@@UAGJ_JIPA_K@Z
	DD	FLAT:?SetSize@CTailOutStream@@UAGJ_K@Z
	DD	FLAT:??_ECTailOutStream@@UAEPAXI@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CTailOutStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CTailOutStream@@QAE@XZ PROC				; CTailOutStream::CTailOutStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IOutStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CTailOutStream@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::CMyComPtr<IOutStream>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CTailOutStream@@QAE@XZ ENDP				; CTailOutStream::CTailOutStream
_TEXT	ENDS
EXTRN	_IID_ISequentialOutStream:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@CTailOutStream@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CTailOutStream@@UAGJABU_GUID@@PAPAX@Z PROC ; CTailOutStream::QueryInterface, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\common\limitedstreams.h
; Line 238
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN6@QueryInter@4
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN5@QueryInter@4
$LN6@QueryInter@4:
	push	OFFSET _IID_ISequentialOutStream
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@QueryInter@4
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN5@QueryInter@4
$LN4@QueryInter@4:
	push	OFFSET _IID_IOutStream
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@4
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN5@QueryInter@4
$LN2@QueryInter@4:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN7@QueryInter@4
$LN5@QueryInter@4:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	xor	eax, eax
$LN7@QueryInter@4:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CTailOutStream@@UAGJABU_GUID@@PAPAX@Z ENDP ; CTailOutStream::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CTailOutStream@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CTailOutStream@@UAGKXZ PROC			; CTailOutStream::AddRef, COMDAT
; Line 238
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CTailOutStream@@UAGKXZ ENDP			; CTailOutStream::AddRef
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CTailOutStream@@UAGKXZ
_TEXT	SEGMENT
tv83 = -16						; size = 4
tv70 = -12						; size = 4
$T78009 = -8						; size = 4
$T78008 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CTailOutStream@@UAGKXZ PROC			; CTailOutStream::Release, COMDAT
; Line 238
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	jmp	SHORT $LN2@Release@4
$LN1@Release@4:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T78009[ebp], edx
	mov	eax, DWORD PTR $T78009[ebp]
	mov	DWORD PTR $T78008[ebp], eax
	cmp	DWORD PTR $T78008[ebp], 0
	je	SHORT $LN4@Release@4
	mov	esi, esp
	push	1
	mov	ecx, DWORD PTR $T78008[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T78008[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv83[ebp], eax
	jmp	SHORT $LN5@Release@4
$LN4@Release@4:
	mov	DWORD PTR tv83[ebp], 0
$LN5@Release@4:
	xor	eax, eax
$LN2@Release@4:
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CTailOutStream@@UAGKXZ ENDP			; CTailOutStream::Release
_TEXT	ENDS
PUBLIC	??1CTailOutStream@@UAE@XZ			; CTailOutStream::~CTailOutStream
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCTailOutStream@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCTailOutStream@@UAEPAXI@Z PROC			; CTailOutStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CTailOutStream@@UAE@XZ		; CTailOutStream::~CTailOutStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@4:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCTailOutStream@@UAEPAXI@Z ENDP			; CTailOutStream::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CTailOutStream@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CTailOutStream@@UAE@XZ PROC				; CTailOutStream::~CTailOutStream, COMDAT
; _this$ = ecx
; Line 236
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CTailOutStream@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CTailOutStream@@UAE@XZ ENDP				; CTailOutStream::~CTailOutStream
_TEXT	ENDS
PUBLIC	?AddInReserved@?$CObjectVector@UCArcItem@@@@QAEXABUCArcItem@@@Z ; CObjectVector<CArcItem>::AddInReserved
PUBLIC	??1CPropVariant@NCOM@NWindows@@QAE@XZ		; NWindows::NCOM::CPropVariant::~CPropVariant
PUBLIC	??0CPropVariant@NCOM@NWindows@@QAE@XZ		; NWindows::NCOM::CPropVariant::CPropVariant
PUBLIC	??1CReadArcItem@@QAE@XZ				; CReadArcItem::~CReadArcItem
PUBLIC	??1CArcItem@@QAE@XZ				; CArcItem::~CArcItem
PUBLIC	??0CArcItem@@QAE@XZ				; CArcItem::CArcItem
PUBLIC	??0CReadArcItem@@QAE@XZ				; CReadArcItem::CReadArcItem
PUBLIC	?ClearAndReserve@?$CObjectVector@UCArcItem@@@@QAEXI@Z ; CObjectVector<CArcItem>::ClearAndReserve
PUBLIC	?Clear@?$CObjectVector@UCArcItem@@@@QAEXXZ	; CObjectVector<CArcItem>::Clear
EXTRN	?GetItemSize@CArc@@QBEJIAA_KAA_N@Z:PROC		; CArc::GetItemSize
EXTRN	?GetItemMTime@CArc@@QBEJIAAU_FILETIME@@AA_N@Z:PROC ; CArc::GetItemMTime
EXTRN	?GetItem@CArc@@QBEJIAAUCReadArcItem@@@Z:PROC	; CArc::GetItem
xdata$x	SEGMENT
__unwindtable$?EnumerateInArchiveItems@@YGJABVCCensor@NWildcard@@ABVCArc@@AAV?$CObjectVector@UCArcItem@@@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?EnumerateInArchiveItems@@YGJABVCCensor@NWildcard@@ABVCArc@@AAV?$CObjectVector@UCArcItem@@@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?EnumerateInArchiveItems@@YGJABVCCensor@NWildcard@@ABVCArc@@AAV?$CObjectVector@UCArcItem@@@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?EnumerateInArchiveItems@@YGJABVCCensor@NWildcard@@ABVCArc@@AAV?$CObjectVector@UCArcItem@@@@@Z$2
__ehfuncinfo$?EnumerateInArchiveItems@@YGJABVCCensor@NWildcard@@ABVCArc@@AAV?$CObjectVector@UCArcItem@@@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?EnumerateInArchiveItems@@YGJABVCCensor@NWildcard@@ABVCArc@@AAV?$CObjectVector@UCArcItem@@@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv196 = -232						; size = 4
$T78024 = -228						; size = 4
$T78023 = -224						; size = 4
$T78022 = -220						; size = 4
$T78021 = -216						; size = 4
$T78020 = -212						; size = 4
$T78019 = -208						; size = 4
___result__$75086 = -204				; size = 4
_prop$75085 = -196					; size = 16
___result__$75082 = -176				; size = 4
___result__$75079 = -172				; size = 4
___result__$75076 = -168				; size = 4
_ai$75075 = -160					; size = 48
_i$75071 = -108						; size = 4
_item$ = -100						; size = 64
___result__$75068 = -32					; size = 4
_archive$ = -28						; size = 4
_numItems$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_censor$ = 8						; size = 4
_arc$ = 12						; size = 4
_arcItems$ = 16						; size = 4
?EnumerateInArchiveItems@@YGJABVCCensor@NWildcard@@ABVCArc@@AAV?$CObjectVector@UCArcItem@@@@@Z PROC ; EnumerateInArchiveItems
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\update.cpp
; Line 886
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?EnumerateInArchiveItems@@YGJABVCCensor@NWildcard@@ABVCArc@@AAV?$CObjectVector@UCArcItem@@@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 220				; 000000dcH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 887
	mov	ecx, DWORD PTR _arcItems$[ebp]
	call	?Clear@?$CObjectVector@UCArcItem@@@@QAEXXZ ; CObjectVector<CArcItem>::Clear
; Line 889
	mov	ecx, DWORD PTR _arc$[ebp]
	call	??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ; CMyComPtr<IInArchive>::operator IInArchive *
	mov	DWORD PTR _archive$[ebp], eax
; Line 890
	mov	esi, esp
	lea	eax, DWORD PTR _numItems$[ebp]
	push	eax
	mov	ecx, DWORD PTR _archive$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _archive$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+20]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$75068[ebp], eax
	cmp	DWORD PTR ___result__$75068[ebp], 0
	je	SHORT $LN13@EnumerateI
	mov	eax, DWORD PTR ___result__$75068[ebp]
	jmp	$LN14@EnumerateI
$LN13@EnumerateI:
; Line 891
	mov	edx, DWORD PTR _numItems$[ebp]
	push	edx
	mov	ecx, DWORD PTR _arcItems$[ebp]
	call	?ClearAndReserve@?$CObjectVector@UCArcItem@@@@QAEXI@Z ; CObjectVector<CArcItem>::ClearAndReserve
; Line 893
	lea	ecx, DWORD PTR _item$[ebp]
	call	??0CReadArcItem@@QAE@XZ			; CReadArcItem::CReadArcItem
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 895
	mov	DWORD PTR _i$75071[ebp], 0
	jmp	SHORT $LN12@EnumerateI
$LN11@EnumerateI:
	mov	eax, DWORD PTR _i$75071[ebp]
	add	eax, 1
	mov	DWORD PTR _i$75071[ebp], eax
$LN12@EnumerateI:
	mov	ecx, DWORD PTR _i$75071[ebp]
	cmp	ecx, DWORD PTR _numItems$[ebp]
	jae	$LN10@EnumerateI
; Line 897
	lea	ecx, DWORD PTR _ai$75075[ebp]
	call	??0CArcItem@@QAE@XZ			; CArcItem::CArcItem
	mov	BYTE PTR __$EHRec$[ebp+8], 1
; Line 899
	lea	edx, DWORD PTR _item$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$75071[ebp]
	push	eax
	mov	ecx, DWORD PTR _arc$[ebp]
	call	?GetItem@CArc@@QBEJIAAUCReadArcItem@@@Z	; CArc::GetItem
	mov	DWORD PTR ___result__$75076[ebp], eax
	cmp	DWORD PTR ___result__$75076[ebp], 0
	je	SHORT $LN9@EnumerateI
	mov	ecx, DWORD PTR ___result__$75076[ebp]
	mov	DWORD PTR $T78019[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _ai$75075[ebp]
	call	??1CArcItem@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _item$[ebp]
	call	??1CReadArcItem@@QAE@XZ
	mov	eax, DWORD PTR $T78019[ebp]
	jmp	$LN14@EnumerateI
$LN9@EnumerateI:
; Line 900
	lea	edx, DWORD PTR _item$[ebp]
	push	edx
	lea	ecx, DWORD PTR _ai$75075[ebp+16]
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
; Line 901
	mov	al, BYTE PTR _item$[ebp+50]
	mov	BYTE PTR _ai$75075[ebp+28], al
; Line 904
	mov	cl, BYTE PTR _item$[ebp+48]
	mov	BYTE PTR _ai$75075[ebp+29], cl
; Line 913
	lea	edx, DWORD PTR _item$[ebp]
	push	edx
	mov	eax, DWORD PTR _censor$[ebp]
	push	eax
	call	?Censor_CheckPath@@YG_NABVCCensor@NWildcard@@ABUCReadArcItem@@@Z ; Censor_CheckPath
	mov	BYTE PTR _ai$75075[ebp+32], al
; Line 915
	lea	ecx, DWORD PTR _ai$75075[ebp+31]
	push	ecx
	lea	edx, DWORD PTR _ai$75075[ebp+8]
	push	edx
	mov	eax, DWORD PTR _i$75071[ebp]
	push	eax
	mov	ecx, DWORD PTR _arc$[ebp]
	call	?GetItemMTime@CArc@@QBEJIAAU_FILETIME@@AA_N@Z ; CArc::GetItemMTime
	mov	DWORD PTR ___result__$75079[ebp], eax
	cmp	DWORD PTR ___result__$75079[ebp], 0
	je	SHORT $LN8@EnumerateI
	mov	ecx, DWORD PTR ___result__$75079[ebp]
	mov	DWORD PTR $T78020[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _ai$75075[ebp]
	call	??1CArcItem@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _item$[ebp]
	call	??1CReadArcItem@@QAE@XZ
	mov	eax, DWORD PTR $T78020[ebp]
	jmp	$LN14@EnumerateI
$LN8@EnumerateI:
; Line 916
	lea	edx, DWORD PTR _ai$75075[ebp+30]
	push	edx
	lea	eax, DWORD PTR _ai$75075[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$75071[ebp]
	push	ecx
	mov	ecx, DWORD PTR _arc$[ebp]
	call	?GetItemSize@CArc@@QBEJIAA_KAA_N@Z	; CArc::GetItemSize
	mov	DWORD PTR ___result__$75082[ebp], eax
	cmp	DWORD PTR ___result__$75082[ebp], 0
	je	SHORT $LN7@EnumerateI
	mov	edx, DWORD PTR ___result__$75082[ebp]
	mov	DWORD PTR $T78021[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _ai$75075[ebp]
	call	??1CArcItem@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _item$[ebp]
	call	??1CReadArcItem@@QAE@XZ
	mov	eax, DWORD PTR $T78021[ebp]
	jmp	$LN14@EnumerateI
$LN7@EnumerateI:
; Line 919
	lea	ecx, DWORD PTR _prop$75085[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
	mov	BYTE PTR __$EHRec$[ebp+8], 2
; Line 920
	mov	esi, esp
	lea	eax, DWORD PTR _prop$75085[ebp]
	push	eax
	push	40					; 00000028H
	mov	ecx, DWORD PTR _i$75071[ebp]
	push	ecx
	mov	edx, DWORD PTR _archive$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _archive$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+24]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$75086[ebp], eax
	cmp	DWORD PTR ___result__$75086[ebp], 0
	je	SHORT $LN6@EnumerateI
	mov	eax, DWORD PTR ___result__$75086[ebp]
	mov	DWORD PTR $T78022[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _prop$75085[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _ai$75075[ebp]
	call	??1CArcItem@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _item$[ebp]
	call	??1CReadArcItem@@QAE@XZ
	mov	eax, DWORD PTR $T78022[ebp]
	jmp	$LN14@EnumerateI
$LN6@EnumerateI:
; Line 921
	movzx	ecx, WORD PTR _prop$75085[ebp]
	cmp	ecx, 19					; 00000013H
	jne	SHORT $LN5@EnumerateI
; Line 923
	mov	edx, DWORD PTR _prop$75085[ebp+8]
	mov	DWORD PTR _ai$75075[ebp+40], edx
; Line 924
	mov	eax, DWORD PTR _ai$75075[ebp+40]
	mov	DWORD PTR tv196[ebp], eax
	cmp	DWORD PTR tv196[ebp], 0
	jl	SHORT $LN1@EnumerateI
	cmp	DWORD PTR tv196[ebp], 2
	jle	SHORT $LN2@EnumerateI
	jmp	SHORT $LN1@EnumerateI
$LN2@EnumerateI:
; Line 929
	jmp	SHORT $LN5@EnumerateI
$LN1@EnumerateI:
; Line 931
	mov	DWORD PTR $T78023[ebp], -2147467259	; 80004005H
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _prop$75085[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _ai$75075[ebp]
	call	??1CArcItem@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _item$[ebp]
	call	??1CReadArcItem@@QAE@XZ
	mov	eax, DWORD PTR $T78023[ebp]
	jmp	SHORT $LN14@EnumerateI
$LN5@EnumerateI:
; Line 934
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _prop$75085[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
; Line 936
	mov	ecx, DWORD PTR _i$75071[ebp]
	mov	DWORD PTR _ai$75075[ebp+36], ecx
; Line 937
	lea	edx, DWORD PTR _ai$75075[ebp]
	push	edx
	mov	ecx, DWORD PTR _arcItems$[ebp]
	call	?AddInReserved@?$CObjectVector@UCArcItem@@@@QAEXABUCArcItem@@@Z ; CObjectVector<CArcItem>::AddInReserved
; Line 938
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _ai$75075[ebp]
	call	??1CArcItem@@QAE@XZ
	jmp	$LN11@EnumerateI
$LN10@EnumerateI:
; Line 939
	mov	DWORD PTR $T78024[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _item$[ebp]
	call	??1CReadArcItem@@QAE@XZ
	mov	eax, DWORD PTR $T78024[ebp]
$LN14@EnumerateI:
; Line 940
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN25@EnumerateI
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	3
$LN25@EnumerateI:
	DD	4
	DD	$LN24@EnumerateI
$LN24@EnumerateI:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN19@EnumerateI
	DD	-100					; ffffff9cH
	DD	64					; 00000040H
	DD	$LN20@EnumerateI
	DD	-160					; ffffff60H
	DD	48					; 00000030H
	DD	$LN21@EnumerateI
	DD	-196					; ffffff3cH
	DD	16					; 00000010H
	DD	$LN22@EnumerateI
$LN22@EnumerateI:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
$LN21@EnumerateI:
	DB	97					; 00000061H
	DB	105					; 00000069H
	DB	0
$LN20@EnumerateI:
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	0
$LN19@EnumerateI:
	DB	110					; 0000006eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	73					; 00000049H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	115					; 00000073H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?EnumerateInArchiveItems@@YGJABVCCensor@NWildcard@@ABVCArc@@AAV?$CObjectVector@UCArcItem@@@@@Z$0:
	lea	ecx, DWORD PTR _item$[ebp]
	jmp	??1CReadArcItem@@QAE@XZ
__unwindfunclet$?EnumerateInArchiveItems@@YGJABVCCensor@NWildcard@@ABVCArc@@AAV?$CObjectVector@UCArcItem@@@@@Z$1:
	lea	ecx, DWORD PTR _ai$75075[ebp]
	jmp	??1CArcItem@@QAE@XZ
__unwindfunclet$?EnumerateInArchiveItems@@YGJABVCCensor@NWildcard@@ABVCArc@@AAV?$CObjectVector@UCArcItem@@@@@Z$2:
	lea	ecx, DWORD PTR _prop$75085[ebp]
	jmp	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
__ehhandler$?EnumerateInArchiveItems@@YGJABVCCensor@NWildcard@@ABVCArc@@AAV?$CObjectVector@UCArcItem@@@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-232]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?EnumerateInArchiveItems@@YGJABVCCensor@NWildcard@@ABVCArc@@AAV?$CObjectVector@UCArcItem@@@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?EnumerateInArchiveItems@@YGJABVCCensor@NWildcard@@ABVCArc@@AAV?$CObjectVector@UCArcItem@@@@@Z ENDP ; EnumerateInArchiveItems
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CPropVariant@NCOM@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CPropVariant@NCOM@NWindows@@QAE@XZ PROC		; NWindows::NCOM::CPropVariant::CPropVariant, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\propvariant.h
; Line 47
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 49
	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx], ax
; Line 50
	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+2], dx
; Line 54
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
; Line 55
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CPropVariant@NCOM@NWindows@@QAE@XZ ENDP		; NWindows::NCOM::CPropVariant::CPropVariant
_TEXT	ENDS
EXTRN	?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ:PROC	; NWindows::NCOM::CPropVariant::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CPropVariant@NCOM@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CPropVariant@NCOM@NWindows@@QAE@XZ PROC		; NWindows::NCOM::CPropVariant::~CPropVariant, COMDAT
; _this$ = ecx
; Line 56
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ ; NWindows::NCOM::CPropVariant::Clear
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CPropVariant@NCOM@NWindows@@QAE@XZ ENDP		; NWindows::NCOM::CPropVariant::~CPropVariant
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\openarchive.h
xdata$x	SEGMENT
__unwindtable$??0CReadArcItem@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CReadArcItem@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CReadArcItem@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CReadArcItem@@QAE@XZ$2
__ehfuncinfo$??0CReadArcItem@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0CReadArcItem@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CReadArcItem@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CReadArcItem@@QAE@XZ PROC				; CReadArcItem::CReadArcItem, COMDAT
; _this$ = ecx
; Line 248
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CReadArcItem@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::CObjectVector<UString>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0UString@@QAE@XZ			; UString::UString
; Line 251
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+49], 0
; Line 255
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+56], 0
; Line 256
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+60], -1
; Line 258
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CReadArcItem@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??0CReadArcItem@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
__unwindfunclet$??0CReadArcItem@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$??0CReadArcItem@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CReadArcItem@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CReadArcItem@@QAE@XZ ENDP				; CReadArcItem::CReadArcItem
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CArcItem@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CArcItem@@QAE@XZ PROC				; CArcItem::CArcItem, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\diritem.h
; Line 154
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+28], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+29], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+30], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+31], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+32], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+40], -1
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CArcItem@@QAE@XZ ENDP				; CArcItem::CArcItem
_TEXT	ENDS
PUBLIC	??A?$CObjectVector@UCPair@NWildcard@@@@QBEABUCPair@NWildcard@@I@Z ; CObjectVector<NWildcard::CPair>::operator[]
EXTRN	?CensorNode_CheckPath2@@YG_NABVCCensorNode@NWildcard@@ABUCReadArcItem@@AA_N@Z:PROC ; CensorNode_CheckPath2
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_include$75057 = -13					; size = 1
_i$75053 = -8						; size = 4
_finded$ = -1						; size = 1
_censor$ = 8						; size = 4
_item$ = 12						; size = 4
?Censor_CheckPath@@YG_NABVCCensor@NWildcard@@ABUCReadArcItem@@@Z PROC ; Censor_CheckPath
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\update.cpp
; Line 866
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 867
	mov	BYTE PTR _finded$[ebp], 0
; Line 868
	mov	DWORD PTR _i$75053[ebp], 0
	jmp	SHORT $LN5@Censor_Che
$LN4@Censor_Che:
	mov	eax, DWORD PTR _i$75053[ebp]
	add	eax, 1
	mov	DWORD PTR _i$75053[ebp], eax
$LN5@Censor_Che:
	mov	ecx, DWORD PTR _censor$[ebp]
	call	?Size@?$CObjectVector@UCPair@NWildcard@@@@QBEIXZ ; CObjectVector<NWildcard::CPair>::Size
	cmp	DWORD PTR _i$75053[ebp], eax
	jae	SHORT $LN3@Censor_Che
; Line 871
	lea	ecx, DWORD PTR _include$75057[ebp]
	push	ecx
	mov	edx, DWORD PTR _item$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$75053[ebp]
	push	eax
	mov	ecx, DWORD PTR _censor$[ebp]
	call	??A?$CObjectVector@UCPair@NWildcard@@@@QBEABUCPair@NWildcard@@I@Z ; CObjectVector<NWildcard::CPair>::operator[]
	add	eax, 12					; 0000000cH
	push	eax
	call	?CensorNode_CheckPath2@@YG_NABVCCensorNode@NWildcard@@ABUCReadArcItem@@AA_N@Z ; CensorNode_CheckPath2
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@Censor_Che
; Line 873
	movzx	edx, BYTE PTR _include$75057[ebp]
	test	edx, edx
	jne	SHORT $LN1@Censor_Che
; Line 874
	xor	al, al
	jmp	SHORT $LN6@Censor_Che
$LN1@Censor_Che:
; Line 875
	mov	BYTE PTR _finded$[ebp], 1
$LN2@Censor_Che:
; Line 877
	jmp	SHORT $LN4@Censor_Che
$LN3@Censor_Che:
; Line 878
	mov	al, BYTE PTR _finded$[ebp]
$LN6@Censor_Che:
; Line 879
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@Censor_Che
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN10@Censor_Che:
	DD	1
	DD	$LN9@Censor_Che
$LN9@Censor_Che:
	DD	-13					; fffffff3H
	DD	1
	DD	$LN8@Censor_Che
$LN8@Censor_Che:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
?Censor_CheckPath@@YG_NABVCCensor@NWildcard@@ABUCReadArcItem@@@Z ENDP ; Censor_CheckPath
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CReadArcItem@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CReadArcItem@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CReadArcItem@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CReadArcItem@@QAE@XZ$2
__ehfuncinfo$??1CReadArcItem@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1CReadArcItem@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CReadArcItem@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CReadArcItem@@QAE@XZ PROC				; CReadArcItem::~CReadArcItem, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CReadArcItem@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CReadArcItem@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??1CReadArcItem@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
__unwindfunclet$??1CReadArcItem@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$??1CReadArcItem@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CReadArcItem@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CReadArcItem@@QAE@XZ ENDP				; CReadArcItem::~CReadArcItem
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CArcItem@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CArcItem@@QAE@XZ PROC				; CArcItem::~CArcItem, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??1UString@@QAE@XZ			; UString::~UString
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CArcItem@@QAE@XZ ENDP				; CArcItem::~CArcItem
_TEXT	ENDS
PUBLIC	??$MyCompare@I@@YGHII@Z				; MyCompare<unsigned int>
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
___tt$75293 = -4					; size = 4
_a1$ = 8						; size = 4
_a2$ = 12						; size = 4
___formal$ = 16						; size = 4
?CompareRefSortPair@@YGHPBUCRefSortPair@@0PAX@Z PROC	; CompareRefSortPair
; Line 957
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 958
	mov	eax, DWORD PTR _a2$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _a1$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	??$MyCompare@I@@YGHII@Z			; MyCompare<unsigned int>
	neg	eax
	mov	DWORD PTR ___tt$75293[ebp], eax
	je	SHORT $LN1@CompareRef
	mov	eax, DWORD PTR ___tt$75293[ebp]
	jmp	SHORT $LN2@CompareRef
$LN1@CompareRef:
; Line 959
	mov	ecx, DWORD PTR _a2$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _a1$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	??$MyCompare@I@@YGHII@Z			; MyCompare<unsigned int>
$LN2@CompareRef:
; Line 960
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?CompareRefSortPair@@YGHPBUCRefSortPair@@0PAX@Z ENDP	; CompareRefSortPair
; Function compile flags: /Odtp /RTCsu
_c$75307 = -8						; size = 2
_numSlashes$75303 = -4					; size = 4
_s$ = 8							; size = 4
?GetNumSlashes@@YGIPB_W@Z PROC				; GetNumSlashes
; Line 963
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 964
	mov	DWORD PTR _numSlashes$75303[ebp], 0
$LN5@GetNumSlas:
; Line 966
	mov	eax, DWORD PTR _s$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _c$75307[ebp], cx
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, 2
	mov	DWORD PTR _s$[ebp], edx
; Line 967
	movzx	eax, WORD PTR _c$75307[ebp]
	test	eax, eax
	jne	SHORT $LN3@GetNumSlas
; Line 968
	mov	eax, DWORD PTR _numSlashes$75303[ebp]
	jmp	SHORT $LN6@GetNumSlas
$LN3@GetNumSlas:
; Line 969
	movzx	ecx, WORD PTR _c$75307[ebp]
	cmp	ecx, 92					; 0000005cH
	je	SHORT $LN1@GetNumSlas
	movzx	edx, WORD PTR _c$75307[ebp]
	cmp	edx, 47					; 0000002fH
	jne	SHORT $LN2@GetNumSlas
$LN1@GetNumSlas:
; Line 970
	mov	eax, DWORD PTR _numSlashes$75303[ebp]
	add	eax, 1
	mov	DWORD PTR _numSlashes$75303[ebp], eax
$LN2@GetNumSlas:
; Line 971
	jmp	SHORT $LN5@GetNumSlas
$LN6@GetNumSlas:
; Line 972
	mov	esp, ebp
	pop	ebp
	ret	4
?GetNumSlashes@@YGIPB_W@Z ENDP				; GetNumSlashes
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CProperty@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CProperty@@QAE@XZ$0
__ehfuncinfo$??0CProperty@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CProperty@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CProperty@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CProperty@@QAE@XZ PROC				; CProperty::CProperty, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CProperty@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CProperty@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$??0CProperty@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CProperty@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CProperty@@QAE@XZ ENDP				; CProperty::CProperty
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CProperty@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CProperty@@QAE@XZ$0
__ehfuncinfo$??1CProperty@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CProperty@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CProperty@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CProperty@@QAE@XZ PROC				; CProperty::~CProperty, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CProperty@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CProperty@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$??1CProperty@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CProperty@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CProperty@@QAE@XZ ENDP				; CProperty::~CProperty
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1COpenOptions@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1COpenOptions@@QAE@XZ PROC				; COpenOptions::~COpenOptions, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	call	??1UString@@QAE@XZ			; UString::~UString
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1COpenOptions@@QAE@XZ ENDP				; COpenOptions::~COpenOptions
_TEXT	ENDS
PUBLIC	??1?$CObjectVector@UCDirItem@@@@QAE@XZ		; CObjectVector<CDirItem>::~CObjectVector<CDirItem>
PUBLIC	??1CUniqBlocks@@QAE@XZ				; CUniqBlocks::~CUniqBlocks
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CDirItems@@QAE@XZ DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??1CDirItems@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1CDirItems@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CDirItems@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CDirItems@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CDirItems@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CDirItems@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1CDirItems@@QAE@XZ$4
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CDirItems@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CDirItems@@QAE@XZ PROC				; CDirItems::~CDirItems, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CDirItems@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 140				; 0000008cH
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 104				; 00000068H
	call	??1CUniqBlocks@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??1?$CObjectVector@UCDirItem@@@@QAE@XZ	; CObjectVector<CDirItem>::~CObjectVector<CDirItem>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CDirItems@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
__unwindfunclet$??1CDirItems@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
__unwindfunclet$??1CDirItems@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1?$CRecordVector@H@@QAE@XZ		; CRecordVector<int>::~CRecordVector<int>
__unwindfunclet$??1CDirItems@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	jmp	??1?$CObjectVector@UCDirItem@@@@QAE@XZ	; CObjectVector<CDirItem>::~CObjectVector<CDirItem>
__unwindfunclet$??1CDirItems@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 104				; 00000068H
	jmp	??1CUniqBlocks@@QAE@XZ
__ehhandler$??1CDirItems@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CDirItems@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CDirItems@@QAE@XZ ENDP				; CDirItems::~CDirItems
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CDirItem@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CDirItem@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CDirItem@@QAE@XZ$1
__ehfuncinfo$??1CDirItem@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CDirItem@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CDirItem@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CDirItem@@QAE@XZ PROC				; CDirItem::~CDirItem, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CDirItem@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CDirItem@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??1CDirItem@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	jmp	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
__ehhandler$??1CDirItem@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CDirItem@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CDirItem@@QAE@XZ ENDP				; CDirItem::~CDirItem
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CTempFiles@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CTempFiles@@QAE@XZ PROC				; CTempFiles::CTempFiles, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::CObjectVector<UString>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CTempFiles@@QAE@XZ ENDP				; CTempFiles::CTempFiles
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4CArchivePath@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4CArchivePath@@QAEAAU0@ABU0@@Z PROC			; CArchivePath::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 24					; 00000018H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 36					; 00000024H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 48					; 00000030H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cl, BYTE PTR [eax+60]
	mov	BYTE PTR [edx+60], cl
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 64					; 00000040H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 76					; 0000004cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4CArchivePath@@QAEAAU0@ABU0@@Z ENDP			; CArchivePath::operator=
_TEXT	ENDS
PUBLIC	??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ	; CObjectVector<CBuffer<unsigned char> >::~CObjectVector<CBuffer<unsigned char> >
PUBLIC	??1?$CRecordVector@I@@QAE@XZ			; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CUniqBlocks@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CUniqBlocks@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CUniqBlocks@@QAE@XZ$1
__ehfuncinfo$??1CUniqBlocks@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CUniqBlocks@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CUniqBlocks@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CUniqBlocks@@QAE@XZ PROC				; CUniqBlocks::~CUniqBlocks, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CUniqBlocks@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ ; CObjectVector<CBuffer<unsigned char> >::~CObjectVector<CBuffer<unsigned char> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CUniqBlocks@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ ; CObjectVector<CBuffer<unsigned char> >::~CObjectVector<CBuffer<unsigned char> >
__unwindfunclet$??1CUniqBlocks@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
__ehhandler$??1CUniqBlocks@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CUniqBlocks@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CUniqBlocks@@QAE@XZ ENDP				; CUniqBlocks::~CUniqBlocks
PUBLIC	?Size@?$CRecordVector@PAX@@QBEIXZ		; CRecordVector<void *>::Size
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Size@?$CObjectVector@VUString@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@VUString@@@@QBEIXZ PROC		; CObjectVector<UString>::Size, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@VUString@@@@QBEIXZ ENDP		; CObjectVector<UString>::Size
_TEXT	ENDS
PUBLIC	??0?$CRecordVector@PAX@@QAE@XZ			; CRecordVector<void *>::CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CObjectVector@VUString@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@VUString@@@@QAE@XZ PROC		; CObjectVector<UString>::CObjectVector<UString>, COMDAT
; _this$ = ecx
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@VUString@@@@QAE@XZ ENDP		; CObjectVector<UString>::CObjectVector<UString>
_TEXT	ENDS
PUBLIC	?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z	; CRecordVector<void *>::AddInReserved
PUBLIC	??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[]
PUBLIC	?Reserve@?$CRecordVector@PAX@@QAEXI@Z		; CRecordVector<void *>::Reserve
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z$0
__ehfuncinfo$??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
tv84 = -36						; size = 4
$T78149 = -32						; size = 4
$T78148 = -28						; size = 4
_i$75759 = -24						; size = 4
_size$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_v$ = 8							; size = 4
??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z PROC	; CObjectVector<UString>::operator=, COMDAT
; _this$ = ecx
; Line 430
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 431
	mov	eax, DWORD PTR _v$[ebp]
	cmp	eax, DWORD PTR _this$[ebp]
	jne	SHORT $LN4@operator@3
; Line 432
	mov	eax, DWORD PTR _this$[ebp]
	jmp	$LN5@operator@3
$LN4@operator@3:
; Line 433
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CObjectVector@VUString@@@@QAEXXZ ; CObjectVector<UString>::Clear
; Line 434
	mov	ecx, DWORD PTR _v$[ebp]
	call	?Size@?$CObjectVector@VUString@@@@QBEIXZ ; CObjectVector<UString>::Size
	mov	DWORD PTR _size$[ebp], eax
; Line 435
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reserve@?$CRecordVector@PAX@@QAEXI@Z	; CRecordVector<void *>::Reserve
; Line 436
	mov	DWORD PTR _i$75759[ebp], 0
	jmp	SHORT $LN3@operator@3
$LN2@operator@3:
	mov	edx, DWORD PTR _i$75759[ebp]
	add	edx, 1
	mov	DWORD PTR _i$75759[ebp], edx
$LN3@operator@3:
	mov	eax, DWORD PTR _i$75759[ebp]
	cmp	eax, DWORD PTR _size$[ebp]
	jae	SHORT $LN1@operator@3
; Line 437
	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T78149[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T78149[ebp], 0
	je	SHORT $LN7@operator@3
	mov	ecx, DWORD PTR _i$75759[ebp]
	push	ecx
	mov	ecx, DWORD PTR _v$[ebp]
	call	??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[]
	push	eax
	mov	ecx, DWORD PTR $T78149[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	DWORD PTR tv84[ebp], eax
	jmp	SHORT $LN8@operator@3
$LN7@operator@3:
	mov	DWORD PTR tv84[ebp], 0
$LN8@operator@3:
	mov	edx, DWORD PTR tv84[ebp]
	mov	DWORD PTR $T78148[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T78148[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ; CRecordVector<void *>::AddInReserved
	jmp	SHORT $LN2@operator@3
$LN1@operator@3:
; Line 438
	mov	eax, DWORD PTR _this$[ebp]
$LN5@operator@3:
; Line 439
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z$0:
	mov	eax, DWORD PTR $T78149[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??4?$CObjectVector@VUString@@@@QAEAAV0@ABV0@@Z ENDP	; CObjectVector<UString>::operator=
PUBLIC	??A?$CRecordVector@PAX@@QBEABQAXI@Z		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z PROC	; CObjectVector<UString>::operator[], COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ENDP	; CObjectVector<UString>::operator[]
_TEXT	ENDS
PUBLIC	??A?$CRecordVector@PAX@@QAEAAPAXI@Z		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z PROC	; CObjectVector<UString>::operator[], COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ENDP	; CObjectVector<UString>::operator[]
_TEXT	ENDS
PUBLIC	?Add@?$CRecordVector@PAX@@QAEIQAX@Z		; CRecordVector<void *>::Add
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z$0
__ehfuncinfo$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
_TEXT	SEGMENT
tv74 = -28						; size = 4
$T78166 = -24						; size = 4
$T78165 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_item$ = 8						; size = 4
?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z PROC ; CObjectVector<UString>::Add, COMDAT
; _this$ = ecx
; Line 459
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T78166[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T78166[ebp], 0
	je	SHORT $LN3@Add
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T78166[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@Add
$LN3@Add:
	mov	DWORD PTR tv74[ebp], 0
$LN4@Add:
	mov	ecx, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T78165[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T78165[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z$0:
	mov	eax, DWORD PTR $T78166[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z ENDP ; CObjectVector<UString>::Add
PUBLIC	??1?$CRecordVector@PAX@@QAE@XZ			; CRecordVector<void *>::~CRecordVector<void *>
PUBLIC	??_GUString@@QAEPAXI@Z				; UString::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@VUString@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@VUString@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@VUString@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@VUString@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@VUString@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T78179 = -28						; size = 4
$T78178 = -24						; size = 4
_i$75781 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@VUString@@@@QAE@XZ PROC		; CObjectVector<UString>::~CObjectVector<UString>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@VUString@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$75781[ebp], eax
$LN2@CObjectVec:
	cmp	DWORD PTR _i$75781[ebp], 0
	je	SHORT $LN3@CObjectVec
; Line 489
	mov	eax, DWORD PTR _i$75781[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$75781[ebp], eax
	mov	ecx, DWORD PTR _i$75781[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T78179[ebp], edx
	mov	eax, DWORD PTR $T78179[ebp]
	mov	DWORD PTR $T78178[ebp], eax
	cmp	DWORD PTR $T78178[ebp], 0
	je	SHORT $LN5@CObjectVec
	push	1
	mov	ecx, DWORD PTR $T78178[ebp]
	call	??_GUString@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec
$LN5@CObjectVec:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec:
	jmp	SHORT $LN2@CObjectVec
$LN3@CObjectVec:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@VUString@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@VUString@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@VUString@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@VUString@@@@QAE@XZ ENDP		; CObjectVector<UString>::~CObjectVector<UString>
PUBLIC	?Clear@?$CRecordVector@PAX@@QAEXXZ		; CRecordVector<void *>::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Clear@?$CObjectVector@VUString@@@@QAEXXZ
_TEXT	SEGMENT
tv75 = -20						; size = 4
$T78192 = -16						; size = 4
$T78191 = -12						; size = 4
_i$75790 = -8						; size = 4
_this$ = -4						; size = 4
?Clear@?$CObjectVector@VUString@@@@QAEXXZ PROC		; CObjectVector<UString>::Clear, COMDAT
; _this$ = ecx
; Line 499
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 500
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$75790[ebp], eax
$LN2@Clear:
	cmp	DWORD PTR _i$75790[ebp], 0
	je	SHORT $LN1@Clear
; Line 501
	mov	eax, DWORD PTR _i$75790[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$75790[ebp], eax
	mov	ecx, DWORD PTR _i$75790[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T78192[ebp], edx
	mov	eax, DWORD PTR $T78192[ebp]
	mov	DWORD PTR $T78191[ebp], eax
	cmp	DWORD PTR $T78191[ebp], 0
	je	SHORT $LN5@Clear
	push	1
	mov	ecx, DWORD PTR $T78191[ebp]
	call	??_GUString@@QAEPAXI@Z
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN6@Clear
$LN5@Clear:
	mov	DWORD PTR tv75[ebp], 0
$LN6@Clear:
	jmp	SHORT $LN2@Clear
$LN1@Clear:
; Line 502
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CRecordVector@PAX@@QAEXXZ	; CRecordVector<void *>::Clear
; Line 503
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CObjectVector@VUString@@@@QAEXXZ ENDP		; CObjectVector<UString>::Clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CObjectVector@UCPair@NWildcard@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@UCPair@NWildcard@@@@QBEIXZ PROC	; CObjectVector<NWildcard::CPair>::Size, COMDAT
; _this$ = ecx
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@UCPair@NWildcard@@@@QBEIXZ ENDP	; CObjectVector<NWildcard::CPair>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@UCPair@NWildcard@@@@QBEABUCPair@NWildcard@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCPair@NWildcard@@@@QBEABUCPair@NWildcard@@I@Z PROC ; CObjectVector<NWildcard::CPair>::operator[], COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCPair@NWildcard@@@@QBEABUCPair@NWildcard@@I@Z ENDP ; CObjectVector<NWildcard::CPair>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@UCPair@NWildcard@@@@QAEAAUCPair@NWildcard@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCPair@NWildcard@@@@QAEAAUCPair@NWildcard@@I@Z PROC ; CObjectVector<NWildcard::CPair>::operator[], COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCPair@NWildcard@@@@QAEAAUCPair@NWildcard@@I@Z ENDP ; CObjectVector<NWildcard::CPair>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@_K@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@_K@@QAE@XZ PROC			; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>, COMDAT
; _this$ = ecx
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@_K@@QAE@XZ ENDP			; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@_K@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@_K@@QBEIXZ PROC			; CRecordVector<unsigned __int64>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@_K@@QBEIXZ ENDP			; CRecordVector<unsigned __int64>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@_K@@QAE@XZ
_TEXT	SEGMENT
$T78207 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@_K@@QAE@XZ PROC			; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T78207[ebp], ecx
	mov	edx, DWORD PTR $T78207[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@_K@@QAE@XZ ENDP			; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
_TEXT	ENDS
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4?$CRecordVector@_K@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
$T78211 = -16						; size = 4
$T78210 = -12						; size = 4
_size$ = -8						; size = 4
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??4?$CRecordVector@_K@@QAEAAV0@ABV0@@Z PROC		; CRecordVector<unsigned __int64>::operator=, COMDAT
; _this$ = ecx
; Line 168
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 169
	mov	eax, DWORD PTR _v$[ebp]
	cmp	eax, DWORD PTR _this$[ebp]
	jne	SHORT $LN3@operator@4
; Line 170
	mov	eax, DWORD PTR _this$[ebp]
	jmp	$LN4@operator@4
$LN3@operator@4:
; Line 171
	mov	ecx, DWORD PTR _v$[ebp]
	call	?Size@?$CRecordVector@_K@@QBEIXZ	; CRecordVector<unsigned __int64>::Size
	mov	DWORD PTR _size$[ebp], eax
; Line 172
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jbe	SHORT $LN2@operator@4
; Line 174
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T78210[ebp], ecx
	mov	edx, DWORD PTR $T78210[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 175
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 176
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 177
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0
; Line 178
	xor	ecx, ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, 8
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T78211[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T78211[ebp]
	mov	DWORD PTR [eax], ecx
; Line 179
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@operator@4:
; Line 181
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 182
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN1@operator@4
; Line 183
	mov	eax, DWORD PTR _size$[ebp]
	shl	eax, 3
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@operator@4:
; Line 184
	mov	eax, DWORD PTR _this$[ebp]
$LN4@operator@4:
; Line 185
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CRecordVector@_K@@QAEAAV0@ABV0@@Z ENDP		; CRecordVector<unsigned __int64>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@_K@@QAEAA_KI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@_K@@QAEAA_KI@Z PROC			; CRecordVector<unsigned __int64>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@_K@@QAEAA_KI@Z ENDP			; CRecordVector<unsigned __int64>::operator[]
_TEXT	ENDS
PUBLIC	?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ		; CRecordVector<void *>::IsEmpty
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsEmpty@?$CObjectVector@UCArcExtInfo@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@?$CObjectVector@UCArcExtInfo@@@@QBE_NXZ PROC	; CObjectVector<CArcExtInfo>::IsEmpty, COMDAT
; _this$ = ecx
; Line 416
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ	; CRecordVector<void *>::IsEmpty
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@?$CObjectVector@UCArcExtInfo@@@@QBE_NXZ ENDP	; CObjectVector<CArcExtInfo>::IsEmpty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@UCArcExtInfo@@@@QBEABUCArcExtInfo@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCArcExtInfo@@@@QBEABUCArcExtInfo@@I@Z PROC ; CObjectVector<CArcExtInfo>::operator[], COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCArcExtInfo@@@@QBEABUCArcExtInfo@@I@Z ENDP ; CObjectVector<CArcExtInfo>::operator[]
_TEXT	ENDS
PUBLIC	??_G?$CBuffer@E@@QAEPAXI@Z			; CBuffer<unsigned char>::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T78221 = -28						; size = 4
$T78220 = -24						; size = 4
_i$75888 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ PROC		; CObjectVector<CBuffer<unsigned char> >::~CObjectVector<CBuffer<unsigned char> >, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$75888[ebp], eax
$LN2@CObjectVec@2:
	cmp	DWORD PTR _i$75888[ebp], 0
	je	SHORT $LN3@CObjectVec@2
; Line 489
	mov	eax, DWORD PTR _i$75888[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$75888[ebp], eax
	mov	ecx, DWORD PTR _i$75888[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T78221[ebp], edx
	mov	eax, DWORD PTR $T78221[ebp]
	mov	DWORD PTR $T78220[ebp], eax
	cmp	DWORD PTR $T78220[ebp], 0
	je	SHORT $LN5@CObjectVec@2
	push	1
	mov	ecx, DWORD PTR $T78220[ebp]
	call	??_G?$CBuffer@E@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@2
$LN5@CObjectVec@2:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@2:
	jmp	SHORT $LN2@CObjectVec@2
$LN3@CObjectVec@2:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ ENDP		; CObjectVector<CBuffer<unsigned char> >::~CObjectVector<CBuffer<unsigned char> >
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??A?$CObjectVector@UCArcInfoEx@@@@QBEABUCArcInfoEx@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCArcInfoEx@@@@QBEABUCArcInfoEx@@I@Z PROC ; CObjectVector<CArcInfoEx>::operator[], COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCArcInfoEx@@@@QBEABUCArcInfoEx@@I@Z ENDP ; CObjectVector<CArcInfoEx>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@UCArcInfoEx@@@@QAEAAUCArcInfoEx@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCArcInfoEx@@@@QAEAAUCArcInfoEx@@I@Z PROC ; CObjectVector<CArcInfoEx>::operator[], COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCArcInfoEx@@@@QAEAAUCArcInfoEx@@I@Z ENDP ; CObjectVector<CArcInfoEx>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIInArchive@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lp$ = 8						; size = 4
??0?$CMyComPtr@UIInArchive@@@@QAE@ABV0@@Z PROC		; CMyComPtr<IInArchive>::CMyComPtr<IInArchive>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 20
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _lp$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UIInArchive@@@@QAE@ABV0@@Z ENDP		; CMyComPtr<IInArchive>::CMyComPtr<IInArchive>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIInArchive@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIInArchive@@@@QAE@XZ PROC		; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@2:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIInArchive@@@@QAE@XZ ENDP		; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ PROC	; CMyComPtr<IInArchive>::operator IInArchive *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UIInArchive@@@@QBEPAUIInArchive@@XZ ENDP	; CMyComPtr<IInArchive>::operator IInArchive *
_TEXT	ENDS
PUBLIC	??4?$CMyComPtr@UIInArchive@@@@QAEPAUIInArchive@@PAU1@@Z ; CMyComPtr<IInArchive>::operator=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4?$CMyComPtr@UIInArchive@@@@QAEPAUIInArchive@@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lp$ = 8						; size = 4
??4?$CMyComPtr@UIInArchive@@@@QAEPAUIInArchive@@ABV0@@Z PROC ; CMyComPtr<IInArchive>::operator=, COMDAT
; _this$ = ecx
; Line 36
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _lp$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$CMyComPtr@UIInArchive@@@@QAEPAUIInArchive@@PAU1@@Z ; CMyComPtr<IInArchive>::operator=
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UIInArchive@@@@QAEPAUIInArchive@@ABV0@@Z ENDP ; CMyComPtr<IInArchive>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UIInArchive@@@@QAEPAUIInArchive@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UIInArchive@@@@QAEPAUIInArchive@@PAU1@@Z PROC ; CMyComPtr<IInArchive>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@5
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@5:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@5
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@5:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UIInArchive@@@@QAEPAUIInArchive@@PAU1@@Z ENDP ; CMyComPtr<IInArchive>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIOutArchive@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UIOutArchive@@@@QAE@XZ PROC		; CMyComPtr<IOutArchive>::CMyComPtr<IOutArchive>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UIOutArchive@@@@QAE@XZ ENDP		; CMyComPtr<IOutArchive>::CMyComPtr<IOutArchive>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIOutArchive@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIOutArchive@@@@QAE@XZ PROC		; CMyComPtr<IOutArchive>::~CMyComPtr<IOutArchive>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@3:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIOutArchive@@@@QAE@XZ ENDP		; CMyComPtr<IOutArchive>::~CMyComPtr<IOutArchive>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UIOutArchive@@@@QBEPAUIOutArchive@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UIOutArchive@@@@QBEPAUIOutArchive@@XZ PROC ; CMyComPtr<IOutArchive>::operator IOutArchive *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UIOutArchive@@@@QBEPAUIOutArchive@@XZ ENDP ; CMyComPtr<IOutArchive>::operator IOutArchive *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UIOutArchive@@@@QAEPAPAUIOutArchive@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UIOutArchive@@@@QAEPAPAUIOutArchive@@XZ PROC ; CMyComPtr<IOutArchive>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UIOutArchive@@@@QAEPAPAUIOutArchive@@XZ ENDP ; CMyComPtr<IOutArchive>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UIOutArchive@@@@QBEPAUIOutArchive@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UIOutArchive@@@@QBEPAUIOutArchive@@XZ PROC ; CMyComPtr<IOutArchive>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UIOutArchive@@@@QBEPAUIOutArchive@@XZ ENDP ; CMyComPtr<IOutArchive>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UIOutArchive@@@@QAEPAUIOutArchive@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UIOutArchive@@@@QAEPAUIOutArchive@@PAU1@@Z PROC ; CMyComPtr<IOutArchive>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@6
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@6:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@6
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@6:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UIOutArchive@@@@QAEPAUIOutArchive@@PAU1@@Z ENDP ; CMyComPtr<IOutArchive>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIInStream@@@@QAE@PAUIInStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??0?$CMyComPtr@UIInStream@@@@QAE@PAUIInStream@@@Z PROC	; CMyComPtr<IInStream>::CMyComPtr<IInStream>, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@CMyComPtr@4
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@4:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UIInStream@@@@QAE@PAUIInStream@@@Z ENDP	; CMyComPtr<IInStream>::CMyComPtr<IInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIInStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIInStream@@@@QAE@XZ PROC		; CMyComPtr<IInStream>::~CMyComPtr<IInStream>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@5:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIInStream@@@@QAE@XZ ENDP		; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ PROC	; CMyComPtr<IInStream>::operator IInStream *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ENDP	; CMyComPtr<IInStream>::operator IInStream *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ PROC	; CMyComPtr<IInStream>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ENDP	; CMyComPtr<IInStream>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CObjectVector@VCArc@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@VCArc@@@@QAE@XZ PROC			; CObjectVector<CArc>::CObjectVector<CArc>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@VCArc@@@@QAE@XZ ENDP			; CObjectVector<CArc>::CObjectVector<CArc>
_TEXT	ENDS
PUBLIC	??A?$CObjectVector@VCArc@@@@QBEABVCArc@@I@Z	; CObjectVector<CArc>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Back@?$CObjectVector@VCArc@@@@QBEABVCArc@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Back@?$CObjectVector@VCArc@@@@QBEABVCArc@@XZ PROC	; CObjectVector<CArc>::Back, COMDAT
; _this$ = ecx
; Line 454
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CObjectVector@VCArc@@@@QBEABVCArc@@I@Z ; CObjectVector<CArc>::operator[]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Back@?$CObjectVector@VCArc@@@@QBEABVCArc@@XZ ENDP	; CObjectVector<CArc>::Back
_TEXT	ENDS
PUBLIC	??A?$CObjectVector@VCArc@@@@QAEAAVCArc@@I@Z	; CObjectVector<CArc>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Back@?$CObjectVector@VCArc@@@@QAEAAVCArc@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Back@?$CObjectVector@VCArc@@@@QAEAAVCArc@@XZ PROC	; CObjectVector<CArc>::Back, COMDAT
; _this$ = ecx
; Line 455
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CObjectVector@VCArc@@@@QAEAAVCArc@@I@Z ; CObjectVector<CArc>::operator[]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Back@?$CObjectVector@VCArc@@@@QAEAAVCArc@@XZ ENDP	; CObjectVector<CArc>::Back
_TEXT	ENDS
PUBLIC	??_GCArc@@QAEPAXI@Z				; CArc::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@VCArc@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@VCArc@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@VCArc@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@VCArc@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@VCArc@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T78275 = -28						; size = 4
$T78274 = -24						; size = 4
_i$75993 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@VCArc@@@@QAE@XZ PROC			; CObjectVector<CArc>::~CObjectVector<CArc>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@VCArc@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$75993[ebp], eax
$LN2@CObjectVec@3:
	cmp	DWORD PTR _i$75993[ebp], 0
	je	SHORT $LN3@CObjectVec@3
; Line 489
	mov	eax, DWORD PTR _i$75993[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$75993[ebp], eax
	mov	ecx, DWORD PTR _i$75993[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T78275[ebp], edx
	mov	eax, DWORD PTR $T78275[ebp]
	mov	DWORD PTR $T78274[ebp], eax
	cmp	DWORD PTR $T78274[ebp], 0
	je	SHORT $LN5@CObjectVec@3
	push	1
	mov	ecx, DWORD PTR $T78274[ebp]
	call	??_GCArc@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@3
$LN5@CObjectVec@3:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@3:
	jmp	SHORT $LN2@CObjectVec@3
$LN3@CObjectVec@3:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@VCArc@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@VCArc@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@VCArc@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@VCArc@@@@QAE@XZ ENDP			; CObjectVector<CArc>::~CObjectVector<CArc>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsEmpty@?$CRecordVector@I@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@?$CRecordVector@I@@QBE_NXZ PROC		; CRecordVector<unsigned int>::IsEmpty, COMDAT
; _this$ = ecx
; Line 49
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+4], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@?$CRecordVector@I@@QBE_NXZ ENDP		; CRecordVector<unsigned int>::IsEmpty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@I@@QAE@XZ
_TEXT	SEGMENT
$T78289 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@I@@QAE@XZ PROC			; CRecordVector<unsigned int>::~CRecordVector<unsigned int>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T78289[ebp], ecx
	mov	edx, DWORD PTR $T78289[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@I@@QAE@XZ ENDP			; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CBuffer@E@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CBuffer@E@@QAE@XZ PROC				; CBuffer<unsigned char>::CBuffer<unsigned char>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mybuffer.h
; Line 24
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CBuffer@E@@QAE@XZ ENDP				; CBuffer<unsigned char>::CBuffer<unsigned char>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CBuffer@E@@QAE@XZ
_TEXT	SEGMENT
$T78294 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CBuffer@E@@QAE@XZ PROC				; CBuffer<unsigned char>::~CBuffer<unsigned char>, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T78294[ebp], ecx
	mov	edx, DWORD PTR $T78294[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CBuffer@E@@QAE@XZ ENDP				; CBuffer<unsigned char>::~CBuffer<unsigned char>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CBuffer@E@@QAEPAEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CBuffer@E@@QAEPAEXZ PROC				; CBuffer<unsigned char>::operator unsigned char *, COMDAT
; _this$ = ecx
; Line 39
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CBuffer@E@@QAEPAEXZ ENDP				; CBuffer<unsigned char>::operator unsigned char *
_TEXT	ENDS
PUBLIC	?Free@?$CBuffer@E@@QAEXXZ			; CBuffer<unsigned char>::Free
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Alloc@?$CBuffer@E@@QAEXI@Z
_TEXT	SEGMENT
$T78299 = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?Alloc@?$CBuffer@E@@QAEXI@Z PROC			; CBuffer<unsigned char>::Alloc, COMDAT
; _this$ = ecx
; Line 44
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 45
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	je	SHORT $LN3@Alloc
; Line 47
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Free@?$CBuffer@E@@QAEXXZ		; CBuffer<unsigned char>::Free
; Line 48
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN3@Alloc
; Line 50
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T78299[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T78299[ebp]
	mov	DWORD PTR [eax], ecx
; Line 51
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+4], eax
$LN3@Alloc:
; Line 54
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Alloc@?$CBuffer@E@@QAEXI@Z ENDP			; CBuffer<unsigned char>::Alloc
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@H@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@H@@QAE@XZ PROC			; CRecordVector<int>::CRecordVector<int>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@H@@QAE@XZ ENDP			; CRecordVector<int>::CRecordVector<int>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@H@@QAE@XZ
_TEXT	SEGMENT
$T78304 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@H@@QAE@XZ PROC			; CRecordVector<int>::~CRecordVector<int>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T78304[ebp], ecx
	mov	edx, DWORD PTR $T78304[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@H@@QAE@XZ ENDP			; CRecordVector<int>::~CRecordVector<int>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CObjectVector@UCDirItem@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@UCDirItem@@@@QBEIXZ PROC		; CObjectVector<CDirItem>::Size, COMDAT
; _this$ = ecx
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@UCDirItem@@@@QBEIXZ ENDP		; CObjectVector<CDirItem>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@UCDirItem@@@@QBEABUCDirItem@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCDirItem@@@@QBEABUCDirItem@@I@Z PROC ; CObjectVector<CDirItem>::operator[], COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCDirItem@@@@QBEABUCDirItem@@I@Z ENDP ; CObjectVector<CDirItem>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@UCDirItem@@@@QAEAAUCDirItem@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCDirItem@@@@QAEAAUCDirItem@@I@Z PROC ; CObjectVector<CDirItem>::operator[], COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCDirItem@@@@QAEAAUCDirItem@@I@Z ENDP ; CObjectVector<CDirItem>::operator[]
_TEXT	ENDS
PUBLIC	??0CDirItem@@QAE@ABU0@@Z			; CDirItem::CDirItem
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Add@?$CObjectVector@UCDirItem@@@@QAEIABUCDirItem@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Add@?$CObjectVector@UCDirItem@@@@QAEIABUCDirItem@@@Z$0
__ehfuncinfo$?Add@?$CObjectVector@UCDirItem@@@@QAEIABUCDirItem@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Add@?$CObjectVector@UCDirItem@@@@QAEIABUCDirItem@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?Add@?$CObjectVector@UCDirItem@@@@QAEIABUCDirItem@@@Z
_TEXT	SEGMENT
tv74 = -28						; size = 4
$T78314 = -24						; size = 4
$T78313 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_item$ = 8						; size = 4
?Add@?$CObjectVector@UCDirItem@@@@QAEIABUCDirItem@@@Z PROC ; CObjectVector<CDirItem>::Add, COMDAT
; _this$ = ecx
; Line 459
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Add@?$CObjectVector@UCDirItem@@@@QAEIABUCDirItem@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	80					; 00000050H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T78314[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T78314[ebp], 0
	je	SHORT $LN3@Add@2
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T78314[ebp]
	call	??0CDirItem@@QAE@ABU0@@Z
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@Add@2
$LN3@Add@2:
	mov	DWORD PTR tv74[ebp], 0
$LN4@Add@2:
	mov	ecx, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T78313[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T78313[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Add@?$CObjectVector@UCDirItem@@@@QAEIABUCDirItem@@@Z$0:
	mov	eax, DWORD PTR $T78314[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Add@?$CObjectVector@UCDirItem@@@@QAEIABUCDirItem@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Add@?$CObjectVector@UCDirItem@@@@QAEIABUCDirItem@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Add@?$CObjectVector@UCDirItem@@@@QAEIABUCDirItem@@@Z ENDP ; CObjectVector<CDirItem>::Add
PUBLIC	??_GCDirItem@@QAEPAXI@Z				; CDirItem::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@UCDirItem@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@UCDirItem@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@UCDirItem@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@UCDirItem@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@UCDirItem@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T78327 = -28						; size = 4
$T78326 = -24						; size = 4
_i$76045 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@UCDirItem@@@@QAE@XZ PROC		; CObjectVector<CDirItem>::~CObjectVector<CDirItem>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@UCDirItem@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$76045[ebp], eax
$LN2@CObjectVec@4:
	cmp	DWORD PTR _i$76045[ebp], 0
	je	SHORT $LN3@CObjectVec@4
; Line 489
	mov	eax, DWORD PTR _i$76045[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$76045[ebp], eax
	mov	ecx, DWORD PTR _i$76045[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T78327[ebp], edx
	mov	eax, DWORD PTR $T78327[ebp]
	mov	DWORD PTR $T78326[ebp], eax
	cmp	DWORD PTR $T78326[ebp], 0
	je	SHORT $LN5@CObjectVec@4
	push	1
	mov	ecx, DWORD PTR $T78326[ebp]
	call	??_GCDirItem@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@4
$LN5@CObjectVec@4:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@4:
	jmp	SHORT $LN2@CObjectVec@4
$LN3@CObjectVec@4:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@UCDirItem@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@UCDirItem@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@UCDirItem@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@UCDirItem@@@@QAE@XZ ENDP		; CObjectVector<CDirItem>::~CObjectVector<CDirItem>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Size@?$CObjectVector@UCArcItem@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@UCArcItem@@@@QBEIXZ PROC		; CObjectVector<CArcItem>::Size, COMDAT
; _this$ = ecx
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@UCArcItem@@@@QBEIXZ ENDP		; CObjectVector<CArcItem>::Size
_TEXT	ENDS
PUBLIC	?ClearAndReserve@?$CRecordVector@PAX@@QAEXI@Z	; CRecordVector<void *>::ClearAndReserve
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ClearAndReserve@?$CObjectVector@UCArcItem@@@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newCapacity$ = 8					; size = 4
?ClearAndReserve@?$CObjectVector@UCArcItem@@@@QAEXI@Z PROC ; CObjectVector<CArcItem>::ClearAndReserve, COMDAT
; _this$ = ecx
; Line 419
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CObjectVector@UCArcItem@@@@QAEXXZ ; CObjectVector<CArcItem>::Clear
	mov	eax, DWORD PTR _newCapacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearAndReserve@?$CRecordVector@PAX@@QAEXI@Z ; CRecordVector<void *>::ClearAndReserve
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearAndReserve@?$CObjectVector@UCArcItem@@@@QAEXI@Z ENDP ; CObjectVector<CArcItem>::ClearAndReserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CObjectVector@UCArcItem@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@UCArcItem@@@@QAE@XZ PROC		; CObjectVector<CArcItem>::CObjectVector<CArcItem>, COMDAT
; _this$ = ecx
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@UCArcItem@@@@QAE@XZ ENDP		; CObjectVector<CArcItem>::CObjectVector<CArcItem>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@UCArcItem@@@@QBEABUCArcItem@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCArcItem@@@@QBEABUCArcItem@@I@Z PROC ; CObjectVector<CArcItem>::operator[], COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCArcItem@@@@QBEABUCArcItem@@I@Z ENDP ; CObjectVector<CArcItem>::operator[]
_TEXT	ENDS
PUBLIC	??0CArcItem@@QAE@ABU0@@Z			; CArcItem::CArcItem
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AddInReserved@?$CObjectVector@UCArcItem@@@@QAEXABUCArcItem@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddInReserved@?$CObjectVector@UCArcItem@@@@QAEXABUCArcItem@@@Z$0
__ehfuncinfo$?AddInReserved@?$CObjectVector@UCArcItem@@@@QAEXABUCArcItem@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddInReserved@?$CObjectVector@UCArcItem@@@@QAEXABUCArcItem@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?AddInReserved@?$CObjectVector@UCArcItem@@@@QAEXABUCArcItem@@@Z
_TEXT	SEGMENT
tv73 = -28						; size = 4
$T78349 = -24						; size = 4
$T78348 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_item$ = 8						; size = 4
?AddInReserved@?$CObjectVector@UCArcItem@@@@QAEXABUCArcItem@@@Z PROC ; CObjectVector<CArcItem>::AddInReserved, COMDAT
; _this$ = ecx
; Line 461
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddInReserved@?$CObjectVector@UCArcItem@@@@QAEXABUCArcItem@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	48					; 00000030H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T78349[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T78349[ebp], 0
	je	SHORT $LN3@AddInReser
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T78349[ebp]
	call	??0CArcItem@@QAE@ABU0@@Z
	mov	DWORD PTR tv73[ebp], eax
	jmp	SHORT $LN4@AddInReser
$LN3@AddInReser:
	mov	DWORD PTR tv73[ebp], 0
$LN4@AddInReser:
	mov	ecx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T78348[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T78348[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ; CRecordVector<void *>::AddInReserved
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddInReserved@?$CObjectVector@UCArcItem@@@@QAEXABUCArcItem@@@Z$0:
	mov	eax, DWORD PTR $T78349[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?AddInReserved@?$CObjectVector@UCArcItem@@@@QAEXABUCArcItem@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddInReserved@?$CObjectVector@UCArcItem@@@@QAEXABUCArcItem@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddInReserved@?$CObjectVector@UCArcItem@@@@QAEXABUCArcItem@@@Z ENDP ; CObjectVector<CArcItem>::AddInReserved
PUBLIC	??_GCArcItem@@QAEPAXI@Z				; CArcItem::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@UCArcItem@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@UCArcItem@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@UCArcItem@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@UCArcItem@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@UCArcItem@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T78362 = -28						; size = 4
$T78361 = -24						; size = 4
_i$76072 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@UCArcItem@@@@QAE@XZ PROC		; CObjectVector<CArcItem>::~CObjectVector<CArcItem>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@UCArcItem@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$76072[ebp], eax
$LN2@CObjectVec@5:
	cmp	DWORD PTR _i$76072[ebp], 0
	je	SHORT $LN3@CObjectVec@5
; Line 489
	mov	eax, DWORD PTR _i$76072[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$76072[ebp], eax
	mov	ecx, DWORD PTR _i$76072[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T78362[ebp], edx
	mov	eax, DWORD PTR $T78362[ebp]
	mov	DWORD PTR $T78361[ebp], eax
	cmp	DWORD PTR $T78361[ebp], 0
	je	SHORT $LN5@CObjectVec@5
	push	1
	mov	ecx, DWORD PTR $T78361[ebp]
	call	??_GCArcItem@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@5
$LN5@CObjectVec@5:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@5:
	jmp	SHORT $LN2@CObjectVec@5
$LN3@CObjectVec@5:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@UCArcItem@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@UCArcItem@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@UCArcItem@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@UCArcItem@@@@QAE@XZ ENDP		; CObjectVector<CArcItem>::~CObjectVector<CArcItem>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Clear@?$CObjectVector@UCArcItem@@@@QAEXXZ
_TEXT	SEGMENT
tv75 = -20						; size = 4
$T78375 = -16						; size = 4
$T78374 = -12						; size = 4
_i$76081 = -8						; size = 4
_this$ = -4						; size = 4
?Clear@?$CObjectVector@UCArcItem@@@@QAEXXZ PROC		; CObjectVector<CArcItem>::Clear, COMDAT
; _this$ = ecx
; Line 499
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 500
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$76081[ebp], eax
$LN2@Clear@2:
	cmp	DWORD PTR _i$76081[ebp], 0
	je	SHORT $LN1@Clear@2
; Line 501
	mov	eax, DWORD PTR _i$76081[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$76081[ebp], eax
	mov	ecx, DWORD PTR _i$76081[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T78375[ebp], edx
	mov	eax, DWORD PTR $T78375[ebp]
	mov	DWORD PTR $T78374[ebp], eax
	cmp	DWORD PTR $T78374[ebp], 0
	je	SHORT $LN5@Clear@2
	push	1
	mov	ecx, DWORD PTR $T78374[ebp]
	call	??_GCArcItem@@QAEPAXI@Z
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN6@Clear@2
$LN5@Clear@2:
	mov	DWORD PTR tv75[ebp], 0
$LN6@Clear@2:
	jmp	SHORT $LN2@Clear@2
$LN1@Clear@2:
; Line 502
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CRecordVector@PAX@@QAEXXZ	; CRecordVector<void *>::Clear
; Line 503
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CObjectVector@UCArcItem@@@@QAEXXZ ENDP		; CObjectVector<CArcItem>::Clear
_TEXT	ENDS
PUBLIC	??0CProperty@@QAE@ABU0@@Z			; CProperty::CProperty
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Add@?$CObjectVector@UCProperty@@@@QAEIABUCProperty@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Add@?$CObjectVector@UCProperty@@@@QAEIABUCProperty@@@Z$0
__ehfuncinfo$?Add@?$CObjectVector@UCProperty@@@@QAEIABUCProperty@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Add@?$CObjectVector@UCProperty@@@@QAEIABUCProperty@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?Add@?$CObjectVector@UCProperty@@@@QAEIABUCProperty@@@Z
_TEXT	SEGMENT
tv74 = -28						; size = 4
$T78381 = -24						; size = 4
$T78380 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_item$ = 8						; size = 4
?Add@?$CObjectVector@UCProperty@@@@QAEIABUCProperty@@@Z PROC ; CObjectVector<CProperty>::Add, COMDAT
; _this$ = ecx
; Line 459
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Add@?$CObjectVector@UCProperty@@@@QAEIABUCProperty@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	24					; 00000018H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T78381[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T78381[ebp], 0
	je	SHORT $LN3@Add@3
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T78381[ebp]
	call	??0CProperty@@QAE@ABU0@@Z
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@Add@3
$LN3@Add@3:
	mov	DWORD PTR tv74[ebp], 0
$LN4@Add@3:
	mov	ecx, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T78380[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T78380[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Add@?$CObjectVector@UCProperty@@@@QAEIABUCProperty@@@Z$0:
	mov	eax, DWORD PTR $T78381[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Add@?$CObjectVector@UCProperty@@@@QAEIABUCProperty@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Add@?$CObjectVector@UCProperty@@@@QAEIABUCProperty@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Add@?$CObjectVector@UCProperty@@@@QAEIABUCProperty@@@Z ENDP ; CObjectVector<CProperty>::Add
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Size@?$CObjectVector@UCUpdateArchiveCommand@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@UCUpdateArchiveCommand@@@@QBEIXZ PROC ; CObjectVector<CUpdateArchiveCommand>::Size, COMDAT
; _this$ = ecx
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@UCUpdateArchiveCommand@@@@QBEIXZ ENDP ; CObjectVector<CUpdateArchiveCommand>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@UCUpdateArchiveCommand@@@@QAEAAUCUpdateArchiveCommand@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCUpdateArchiveCommand@@@@QAEAAUCUpdateArchiveCommand@@I@Z PROC ; CObjectVector<CUpdateArchiveCommand>::operator[], COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCUpdateArchiveCommand@@@@QAEAAUCUpdateArchiveCommand@@I@Z ENDP ; CObjectVector<CUpdateArchiveCommand>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CObjectVector@UCRenamePair@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@UCRenamePair@@@@QBEIXZ PROC	; CObjectVector<CRenamePair>::Size, COMDAT
; _this$ = ecx
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@UCRenamePair@@@@QBEIXZ ENDP	; CObjectVector<CRenamePair>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsEmpty@?$CObjectVector@UCRenamePair@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@?$CObjectVector@UCRenamePair@@@@QBE_NXZ PROC	; CObjectVector<CRenamePair>::IsEmpty, COMDAT
; _this$ = ecx
; Line 416
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ	; CRecordVector<void *>::IsEmpty
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@?$CObjectVector@UCRenamePair@@@@QBE_NXZ ENDP	; CObjectVector<CRenamePair>::IsEmpty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@UCRenamePair@@@@QBEABUCRenamePair@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCRenamePair@@@@QBEABUCRenamePair@@I@Z PROC ; CObjectVector<CRenamePair>::operator[], COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCRenamePair@@@@QBEABUCRenamePair@@I@Z ENDP ; CObjectVector<CRenamePair>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@6:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ PROC ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ENDP ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z PROC ; CMyComPtr<ISequentialOutStream>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@7
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@7:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@7
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@7:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ENDP ; CMyComPtr<ISequentialOutStream>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lp$ = 8						; size = 4
??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@ABV0@@Z PROC ; CMyComPtr<ISequentialOutStream>::operator=, COMDAT
; _this$ = ecx
; Line 36
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _lp$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@ABV0@@Z ENDP ; CMyComPtr<ISequentialOutStream>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIOutStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UIOutStream@@@@QAE@XZ PROC		; CMyComPtr<IOutStream>::CMyComPtr<IOutStream>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UIOutStream@@@@QAE@XZ ENDP		; CMyComPtr<IOutStream>::CMyComPtr<IOutStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIOutStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIOutStream@@@@QAE@XZ PROC		; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@7:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIOutStream@@@@QAE@XZ ENDP		; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@?$CMyComPtr@UIOutStream@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Release@?$CMyComPtr@UIOutStream@@@@QAEXXZ PROC		; CMyComPtr<IOutStream>::Release, COMDAT
; _this$ = ecx
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Release@5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
$LN2@Release@5:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Release@?$CMyComPtr@UIOutStream@@@@QAEXXZ ENDP		; CMyComPtr<IOutStream>::Release
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ PROC	; CMyComPtr<IOutStream>::operator IOutStream *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ENDP	; CMyComPtr<IOutStream>::operator IOutStream *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ PROC	; CMyComPtr<IOutStream>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ENDP	; CMyComPtr<IOutStream>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UIOutStream@@@@QAEPAUIOutStream@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UIOutStream@@@@QAEPAUIOutStream@@PAU1@@Z PROC ; CMyComPtr<IOutStream>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@8
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@8:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@8
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@8:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UIOutStream@@@@QAEPAUIOutStream@@PAU1@@Z ENDP ; CMyComPtr<IOutStream>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UIOutStream@@@@QAEPAUIOutStream@@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lp$ = 8						; size = 4
??4?$CMyComPtr@UIOutStream@@@@QAEPAUIOutStream@@ABV0@@Z PROC ; CMyComPtr<IOutStream>::operator=, COMDAT
; _this$ = ecx
; Line 36
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _lp$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$CMyComPtr@UIOutStream@@@@QAEPAUIOutStream@@PAU1@@Z ; CMyComPtr<IOutStream>::operator=
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UIOutStream@@@@QAEPAUIOutStream@@ABV0@@Z ENDP ; CMyComPtr<IOutStream>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CObjectVector@UCAltStreamInfo@COutMultiVolStream@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@UCAltStreamInfo@COutMultiVolStream@@@@QBEIXZ PROC ; CObjectVector<COutMultiVolStream::CAltStreamInfo>::Size, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@UCAltStreamInfo@COutMultiVolStream@@@@QBEIXZ ENDP ; CObjectVector<COutMultiVolStream::CAltStreamInfo>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CObjectVector@UCAltStreamInfo@COutMultiVolStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@UCAltStreamInfo@COutMultiVolStream@@@@QAE@XZ PROC ; CObjectVector<COutMultiVolStream::CAltStreamInfo>::CObjectVector<COutMultiVolStream::CAltStreamInfo>, COMDAT
; _this$ = ecx
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@UCAltStreamInfo@COutMultiVolStream@@@@QAE@XZ ENDP ; CObjectVector<COutMultiVolStream::CAltStreamInfo>::CObjectVector<COutMultiVolStream::CAltStreamInfo>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@UCAltStreamInfo@COutMultiVolStream@@@@QAEAAUCAltStreamInfo@COutMultiVolStream@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCAltStreamInfo@COutMultiVolStream@@@@QAEAAUCAltStreamInfo@COutMultiVolStream@@I@Z PROC ; CObjectVector<COutMultiVolStream::CAltStreamInfo>::operator[], COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCAltStreamInfo@COutMultiVolStream@@@@QAEAAUCAltStreamInfo@COutMultiVolStream@@I@Z ENDP ; CObjectVector<COutMultiVolStream::CAltStreamInfo>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Back@?$CObjectVector@UCAltStreamInfo@COutMultiVolStream@@@@QAEAAUCAltStreamInfo@COutMultiVolStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Back@?$CObjectVector@UCAltStreamInfo@COutMultiVolStream@@@@QAEAAUCAltStreamInfo@COutMultiVolStream@@XZ PROC ; CObjectVector<COutMultiVolStream::CAltStreamInfo>::Back, COMDAT
; _this$ = ecx
; Line 455
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CObjectVector@UCAltStreamInfo@COutMultiVolStream@@@@QAEAAUCAltStreamInfo@COutMultiVolStream@@I@Z ; CObjectVector<COutMultiVolStream::CAltStreamInfo>::operator[]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Back@?$CObjectVector@UCAltStreamInfo@COutMultiVolStream@@@@QAEAAUCAltStreamInfo@COutMultiVolStream@@XZ ENDP ; CObjectVector<COutMultiVolStream::CAltStreamInfo>::Back
_TEXT	ENDS
PUBLIC	??0CAltStreamInfo@COutMultiVolStream@@QAE@ABU01@@Z ; COutMultiVolStream::CAltStreamInfo::CAltStreamInfo
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Add@?$CObjectVector@UCAltStreamInfo@COutMultiVolStream@@@@QAEIABUCAltStreamInfo@COutMultiVolStream@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Add@?$CObjectVector@UCAltStreamInfo@COutMultiVolStream@@@@QAEIABUCAltStreamInfo@COutMultiVolStream@@@Z$0
__ehfuncinfo$?Add@?$CObjectVector@UCAltStreamInfo@COutMultiVolStream@@@@QAEIABUCAltStreamInfo@COutMultiVolStream@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Add@?$CObjectVector@UCAltStreamInfo@COutMultiVolStream@@@@QAEIABUCAltStreamInfo@COutMultiVolStream@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?Add@?$CObjectVector@UCAltStreamInfo@COutMultiVolStream@@@@QAEIABUCAltStreamInfo@COutMultiVolStream@@@Z
_TEXT	SEGMENT
tv74 = -28						; size = 4
$T78437 = -24						; size = 4
$T78436 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_item$ = 8						; size = 4
?Add@?$CObjectVector@UCAltStreamInfo@COutMultiVolStream@@@@QAEIABUCAltStreamInfo@COutMultiVolStream@@@Z PROC ; CObjectVector<COutMultiVolStream::CAltStreamInfo>::Add, COMDAT
; _this$ = ecx
; Line 459
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Add@?$CObjectVector@UCAltStreamInfo@COutMultiVolStream@@@@QAEIABUCAltStreamInfo@COutMultiVolStream@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	40					; 00000028H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T78437[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T78437[ebp], 0
	je	SHORT $LN3@Add@4
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T78437[ebp]
	call	??0CAltStreamInfo@COutMultiVolStream@@QAE@ABU01@@Z
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@Add@4
$LN3@Add@4:
	mov	DWORD PTR tv74[ebp], 0
$LN4@Add@4:
	mov	ecx, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T78436[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T78436[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Add@?$CObjectVector@UCAltStreamInfo@COutMultiVolStream@@@@QAEIABUCAltStreamInfo@COutMultiVolStream@@@Z$0:
	mov	eax, DWORD PTR $T78437[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Add@?$CObjectVector@UCAltStreamInfo@COutMultiVolStream@@@@QAEIABUCAltStreamInfo@COutMultiVolStream@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Add@?$CObjectVector@UCAltStreamInfo@COutMultiVolStream@@@@QAEIABUCAltStreamInfo@COutMultiVolStream@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Add@?$CObjectVector@UCAltStreamInfo@COutMultiVolStream@@@@QAEIABUCAltStreamInfo@COutMultiVolStream@@@Z ENDP ; CObjectVector<COutMultiVolStream::CAltStreamInfo>::Add
PUBLIC	??_GCAltStreamInfo@COutMultiVolStream@@QAEPAXI@Z ; COutMultiVolStream::CAltStreamInfo::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@UCAltStreamInfo@COutMultiVolStream@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@UCAltStreamInfo@COutMultiVolStream@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@UCAltStreamInfo@COutMultiVolStream@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@UCAltStreamInfo@COutMultiVolStream@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@UCAltStreamInfo@COutMultiVolStream@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T78450 = -28						; size = 4
$T78449 = -24						; size = 4
_i$76222 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@UCAltStreamInfo@COutMultiVolStream@@@@QAE@XZ PROC ; CObjectVector<COutMultiVolStream::CAltStreamInfo>::~CObjectVector<COutMultiVolStream::CAltStreamInfo>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@UCAltStreamInfo@COutMultiVolStream@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$76222[ebp], eax
$LN2@CObjectVec@6:
	cmp	DWORD PTR _i$76222[ebp], 0
	je	SHORT $LN3@CObjectVec@6
; Line 489
	mov	eax, DWORD PTR _i$76222[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$76222[ebp], eax
	mov	ecx, DWORD PTR _i$76222[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T78450[ebp], edx
	mov	eax, DWORD PTR $T78450[ebp]
	mov	DWORD PTR $T78449[ebp], eax
	cmp	DWORD PTR $T78449[ebp], 0
	je	SHORT $LN5@CObjectVec@6
	push	1
	mov	ecx, DWORD PTR $T78449[ebp]
	call	??_GCAltStreamInfo@COutMultiVolStream@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@6
$LN5@CObjectVec@6:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@6:
	jmp	SHORT $LN2@CObjectVec@6
$LN3@CObjectVec@6:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@UCAltStreamInfo@COutMultiVolStream@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@UCAltStreamInfo@COutMultiVolStream@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@UCAltStreamInfo@COutMultiVolStream@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@UCAltStreamInfo@COutMultiVolStream@@@@QAE@XZ ENDP ; CObjectVector<COutMultiVolStream::CAltStreamInfo>::~CObjectVector<COutMultiVolStream::CAltStreamInfo>
PUBLIC	?DeleteBack@?$CRecordVector@PAX@@QAEXXZ		; CRecordVector<void *>::DeleteBack
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?DeleteBack@?$CObjectVector@UCAltStreamInfo@COutMultiVolStream@@@@QAEXXZ
_TEXT	SEGMENT
tv74 = -16						; size = 4
$T78463 = -12						; size = 4
$T78462 = -8						; size = 4
_this$ = -4						; size = 4
?DeleteBack@?$CObjectVector@UCAltStreamInfo@COutMultiVolStream@@@@QAEXXZ PROC ; CObjectVector<COutMultiVolStream::CAltStreamInfo>::DeleteBack, COMDAT
; _this$ = ecx
; Line 521
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 522
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR $T78463[ebp], eax
	mov	ecx, DWORD PTR $T78463[ebp]
	mov	DWORD PTR $T78462[ebp], ecx
	cmp	DWORD PTR $T78462[ebp], 0
	je	SHORT $LN3@DeleteBack
	push	1
	mov	ecx, DWORD PTR $T78462[ebp]
	call	??_GCAltStreamInfo@COutMultiVolStream@@QAEPAXI@Z
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@DeleteBack
$LN3@DeleteBack:
	mov	DWORD PTR tv74[ebp], 0
$LN4@DeleteBack:
; Line 523
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DeleteBack@?$CRecordVector@PAX@@QAEXXZ	; CRecordVector<void *>::DeleteBack
; Line 524
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?DeleteBack@?$CObjectVector@UCAltStreamInfo@COutMultiVolStream@@@@QAEXXZ ENDP ; CObjectVector<COutMultiVolStream::CAltStreamInfo>::DeleteBack
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CObjectVector@UCOpenType@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@UCOpenType@@@@QBEIXZ PROC		; CObjectVector<COpenType>::Size, COMDAT
; _this$ = ecx
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@UCOpenType@@@@QBEIXZ ENDP		; CObjectVector<COpenType>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CObjectVector@UCOpenType@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@UCOpenType@@@@QAE@XZ PROC		; CObjectVector<COpenType>::CObjectVector<COpenType>, COMDAT
; _this$ = ecx
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@UCOpenType@@@@QAE@XZ ENDP		; CObjectVector<COpenType>::CObjectVector<COpenType>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@UCOpenType@@@@QBEABUCOpenType@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCOpenType@@@@QBEABUCOpenType@@I@Z PROC ; CObjectVector<COpenType>::operator[], COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCOpenType@@@@QBEABUCOpenType@@I@Z ENDP ; CObjectVector<COpenType>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Add@?$CObjectVector@UCOpenType@@@@QAEIABUCOpenType@@@Z
_TEXT	SEGMENT
tv70 = -12						; size = 4
$T78475 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?Add@?$CObjectVector@UCOpenType@@@@QAEIABUCOpenType@@@Z PROC ; CObjectVector<COpenType>::Add, COMDAT
; _this$ = ecx
; Line 459
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	push	edi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	push	32					; 00000020H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T78475[ebp], eax
	cmp	DWORD PTR $T78475[ebp], 0
	je	SHORT $LN3@Add@5
	mov	esi, DWORD PTR _item$[ebp]
	mov	ecx, 8
	mov	edi, DWORD PTR $T78475[ebp]
	rep movsd
	mov	eax, DWORD PTR $T78475[ebp]
	mov	DWORD PTR tv70[ebp], eax
	jmp	SHORT $LN4@Add@5
$LN3@Add@5:
	mov	DWORD PTR tv70[ebp], 0
$LN4@Add@5:
	mov	ecx, DWORD PTR tv70[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
	pop	edi
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CObjectVector@UCOpenType@@@@QAEIABUCOpenType@@@Z ENDP ; CObjectVector<COpenType>::Add
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@UCOpenType@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@UCOpenType@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@UCOpenType@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@UCOpenType@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@UCOpenType@@@@QAE@XZ
_TEXT	SEGMENT
$T78480 = -24						; size = 4
_i$76247 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@UCOpenType@@@@QAE@XZ PROC		; CObjectVector<COpenType>::~CObjectVector<COpenType>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@UCOpenType@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-24], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$76247[ebp], eax
$LN2@CObjectVec@7:
	cmp	DWORD PTR _i$76247[ebp], 0
	je	SHORT $LN3@CObjectVec@7
; Line 489
	mov	eax, DWORD PTR _i$76247[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$76247[ebp], eax
	mov	ecx, DWORD PTR _i$76247[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T78480[ebp], edx
	mov	eax, DWORD PTR $T78480[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	jmp	SHORT $LN2@CObjectVec@7
$LN3@CObjectVec@7:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@UCOpenType@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@UCOpenType@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@UCOpenType@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@UCOpenType@@@@QAE@XZ ENDP		; CObjectVector<COpenType>::~CObjectVector<COpenType>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CRecordVector@UCUpdatePair2@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@UCUpdatePair2@@@@QAE@XZ PROC		; CRecordVector<CUpdatePair2>::CRecordVector<CUpdatePair2>, COMDAT
; _this$ = ecx
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@UCUpdatePair2@@@@QAE@XZ ENDP		; CRecordVector<CUpdatePair2>::CRecordVector<CUpdatePair2>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@UCUpdatePair2@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@UCUpdatePair2@@@@QBEIXZ PROC	; CRecordVector<CUpdatePair2>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@UCUpdatePair2@@@@QBEIXZ ENDP	; CRecordVector<CUpdatePair2>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@UCUpdatePair2@@@@QAE@XZ
_TEXT	SEGMENT
$T78494 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@UCUpdatePair2@@@@QAE@XZ PROC		; CRecordVector<CUpdatePair2>::~CRecordVector<CUpdatePair2>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T78494[ebp], ecx
	mov	edx, DWORD PTR $T78494[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@UCUpdatePair2@@@@QAE@XZ ENDP		; CRecordVector<CUpdatePair2>::~CRecordVector<CUpdatePair2>
_TEXT	ENDS
PUBLIC	?ReserveOnePosition@?$CRecordVector@UCUpdatePair2@@@@AAEXXZ ; CRecordVector<CUpdatePair2>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@UCUpdatePair2@@@@QAEIUCUpdatePair2@@@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 20
?Add@?$CRecordVector@UCUpdatePair2@@@@QAEIUCUpdatePair2@@@Z PROC ; CRecordVector<CUpdatePair2>::Add, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@UCUpdatePair2@@@@AAEXXZ ; CRecordVector<CUpdatePair2>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	imul	ecx, 20					; 00000014H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _item$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _item$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _item$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR _item$[ebp+16]
	mov	DWORD PTR [eax+16], ecx
; Line 201
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR tv72[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR tv72[ebp]
; Line 202
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?Add@?$CRecordVector@UCUpdatePair2@@@@QAEIUCUpdatePair2@@@Z ENDP ; CRecordVector<CUpdatePair2>::Add
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@UCUpdatePair2@@@@QAEAAUCUpdatePair2@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@UCUpdatePair2@@@@QAEAAUCUpdatePair2@@I@Z PROC ; CRecordVector<CUpdatePair2>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	imul	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@UCUpdatePair2@@@@QAEAAUCUpdatePair2@@I@Z ENDP ; CRecordVector<CUpdatePair2>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@UCUpdatePair@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@UCUpdatePair@@@@QAE@XZ PROC		; CRecordVector<CUpdatePair>::CRecordVector<CUpdatePair>, COMDAT
; _this$ = ecx
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@UCUpdatePair@@@@QAE@XZ ENDP		; CRecordVector<CUpdatePair>::CRecordVector<CUpdatePair>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@UCUpdatePair@@@@QAE@XZ
_TEXT	SEGMENT
$T78503 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@UCUpdatePair@@@@QAE@XZ PROC		; CRecordVector<CUpdatePair>::~CRecordVector<CUpdatePair>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T78503[ebp], ecx
	mov	edx, DWORD PTR $T78503[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@UCUpdatePair@@@@QAE@XZ ENDP		; CRecordVector<CUpdatePair>::~CRecordVector<CUpdatePair>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@PAUIArchiveUpdateCallback@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??0?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@PAUIArchiveUpdateCallback@@@Z PROC ; CMyComPtr<IArchiveUpdateCallback>::CMyComPtr<IArchiveUpdateCallback>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@CMyComPtr@8
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@8:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@PAUIArchiveUpdateCallback@@@Z ENDP ; CMyComPtr<IArchiveUpdateCallback>::CMyComPtr<IArchiveUpdateCallback>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@XZ PROC	; CMyComPtr<IArchiveUpdateCallback>::~CMyComPtr<IArchiveUpdateCallback>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@9
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@9:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIArchiveUpdateCallback@@@@QAE@XZ ENDP	; CMyComPtr<IArchiveUpdateCallback>::~CMyComPtr<IArchiveUpdateCallback>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UIArchiveUpdateCallback@@@@QBEPAUIArchiveUpdateCallback@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UIArchiveUpdateCallback@@@@QBEPAUIArchiveUpdateCallback@@XZ PROC ; CMyComPtr<IArchiveUpdateCallback>::operator IArchiveUpdateCallback *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UIArchiveUpdateCallback@@@@QBEPAUIArchiveUpdateCallback@@XZ ENDP ; CMyComPtr<IArchiveUpdateCallback>::operator IArchiveUpdateCallback *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@UCRefSortPair@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@UCRefSortPair@@@@QAE@XZ PROC		; CRecordVector<CRefSortPair>::CRecordVector<CRefSortPair>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@UCRefSortPair@@@@QAE@XZ ENDP		; CRecordVector<CRefSortPair>::CRecordVector<CRefSortPair>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@UCRefSortPair@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@UCRefSortPair@@@@QBEIXZ PROC	; CRecordVector<CRefSortPair>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@UCRefSortPair@@@@QBEIXZ ENDP	; CRecordVector<CRefSortPair>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@UCRefSortPair@@@@QAE@XZ
_TEXT	SEGMENT
$T78516 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@UCRefSortPair@@@@QAE@XZ PROC		; CRecordVector<CRefSortPair>::~CRecordVector<CRefSortPair>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T78516[ebp], ecx
	mov	edx, DWORD PTR $T78516[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@UCRefSortPair@@@@QAE@XZ ENDP		; CRecordVector<CRefSortPair>::~CRecordVector<CRefSortPair>
_TEXT	ENDS
PUBLIC	?ReserveOnePosition@?$CRecordVector@UCRefSortPair@@@@AAEXXZ ; CRecordVector<CRefSortPair>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@UCRefSortPair@@@@QAEIUCRefSortPair@@@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 8
?Add@?$CRecordVector@UCRefSortPair@@@@QAEIUCRefSortPair@@@Z PROC ; CRecordVector<CRefSortPair>::Add, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@UCRefSortPair@@@@AAEXXZ ; CRecordVector<CRefSortPair>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*8], edx
	mov	edx, DWORD PTR _item$[ebp+4]
	mov	DWORD PTR [eax+ecx*8+4], edx
; Line 201
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv72[ebp]
; Line 202
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Add@?$CRecordVector@UCRefSortPair@@@@QAEIUCRefSortPair@@@Z ENDP ; CRecordVector<CRefSortPair>::Add
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@UCRefSortPair@@@@QAEAAUCRefSortPair@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@UCRefSortPair@@@@QAEAAUCRefSortPair@@I@Z PROC ; CRecordVector<CRefSortPair>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@UCRefSortPair@@@@QAEAAUCRefSortPair@@I@Z ENDP ; CRecordVector<CRefSortPair>::operator[]
_TEXT	ENDS
PUBLIC	?SortRefDown@?$CRecordVector@UCRefSortPair@@@@SGXPAUCRefSortPair@@IIP6GHPBU2@1PAX@Z2@Z ; CRecordVector<CRefSortPair>::SortRefDown
PUBLIC	?Front@?$CRecordVector@UCRefSortPair@@@@QAEAAUCRefSortPair@@XZ ; CRecordVector<CRefSortPair>::Front
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Sort@?$CRecordVector@UCRefSortPair@@@@QAEXP6GHPBUCRefSortPair@@0PAX@Z1@Z
_TEXT	SEGMENT
_temp$76301 = -28					; size = 8
_i$76294 = -16						; size = 4
_p$ = -12						; size = 4
_size$ = -8						; size = 4
_this$ = -4						; size = 4
_compare$ = 8						; size = 4
_param$ = 12						; size = 4
?Sort@?$CRecordVector@UCRefSortPair@@@@QAEXP6GHPBUCRefSortPair@@0PAX@Z1@Z PROC ; CRecordVector<CRefSortPair>::Sort, COMDAT
; _this$ = ecx
; Line 342
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 343
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _size$[ebp], ecx
; Line 344
	cmp	DWORD PTR _size$[ebp], 1
	ja	SHORT $LN7@Sort
; Line 345
	jmp	$LN8@Sort
$LN7@Sort:
; Line 346
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Front@?$CRecordVector@UCRefSortPair@@@@QAEAAUCRefSortPair@@XZ ; CRecordVector<CRefSortPair>::Front
	sub	eax, 8
	mov	DWORD PTR _p$[ebp], eax
; Line 348
	mov	edx, DWORD PTR _size$[ebp]
	shr	edx, 1
	mov	DWORD PTR _i$76294[ebp], edx
$LN6@Sort:
; Line 350
	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _compare$[ebp]
	push	ecx
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$76294[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	?SortRefDown@?$CRecordVector@UCRefSortPair@@@@SGXPAUCRefSortPair@@IIP6GHPBU2@1PAX@Z2@Z ; CRecordVector<CRefSortPair>::SortRefDown
; Line 351
	mov	edx, DWORD PTR _i$76294[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$76294[ebp], edx
	jne	SHORT $LN6@Sort
$LN3@Sort:
; Line 355
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8]
	mov	eax, DWORD PTR [ecx+eax*8+4]
	mov	DWORD PTR _temp$76301[ebp], edx
	mov	DWORD PTR _temp$76301[ebp+4], eax
; Line 356
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	esi, DWORD PTR _p$[ebp]
	mov	DWORD PTR [esi+ecx*8], edx
	mov	DWORD PTR [esi+ecx*8+4], eax
	mov	edx, DWORD PTR _size$[ebp]
	sub	edx, 1
	mov	DWORD PTR _size$[ebp], edx
; Line 357
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _temp$76301[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _temp$76301[ebp+4]
	mov	DWORD PTR [eax+12], edx
; Line 358
	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _compare$[ebp]
	push	ecx
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	?SortRefDown@?$CRecordVector@UCRefSortPair@@@@SGXPAUCRefSortPair@@IIP6GHPBU2@1PAX@Z2@Z ; CRecordVector<CRefSortPair>::SortRefDown
; Line 360
	cmp	DWORD PTR _size$[ebp], 1
	ja	SHORT $LN3@Sort
$LN8@Sort:
; Line 361
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@Sort
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN12@Sort:
	DD	1
	DD	$LN11@Sort
$LN11@Sort:
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN10@Sort
$LN10@Sort:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
?Sort@?$CRecordVector@UCRefSortPair@@@@QAEXP6GHPBUCRefSortPair@@0PAX@Z1@Z ENDP ; CRecordVector<CRefSortPair>::Sort
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??_GUString@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GUString@@QAEPAXI@Z PROC				; UString::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@5
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@5:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GUString@@QAEPAXI@Z ENDP				; UString::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??_G?$CBuffer@E@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$CBuffer@E@@QAEPAXI@Z PROC				; CBuffer<unsigned char>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@6
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@6:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$CBuffer@E@@QAEPAXI@Z ENDP				; CBuffer<unsigned char>::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1CArc@@QAE@XZ					; CArc::~CArc
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCArc@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCArc@@QAEPAXI@Z PROC				; CArc::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CArc@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@7
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@7:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCArc@@QAEPAXI@Z ENDP				; CArc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0?$CBuffer@E@@QAE@ABV0@@Z			; CBuffer<unsigned char>::CBuffer<unsigned char>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CDirItem@@QAE@ABU0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CDirItem@@QAE@ABU0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CDirItem@@QAE@ABU0@@Z$1
__ehfuncinfo$??0CDirItem@@QAE@ABU0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CDirItem@@QAE@ABU0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CDirItem@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0CDirItem@@QAE@ABU0@@Z PROC				; CDirItem::CDirItem, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CDirItem@@QAE@ABU0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], ecx
	mov	DWORD PTR [eax+20], edx
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR [ecx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], edx
	mov	DWORD PTR [ecx+28], eax
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 32					; 00000020H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 44					; 0000002cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??0?$CBuffer@E@@QAE@ABV0@@Z		; CBuffer<unsigned char>::CBuffer<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 52					; 00000034H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??0?$CBuffer@E@@QAE@ABV0@@Z		; CBuffer<unsigned char>::CBuffer<unsigned char>
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR [edx+60], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR [edx+64], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	DWORD PTR [edx+68], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	DWORD PTR [edx+72], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cl, BYTE PTR [eax+76]
	mov	BYTE PTR [edx+76], cl
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CDirItem@@QAE@ABU0@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??0CDirItem@@QAE@ABU0@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	jmp	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
__ehhandler$??0CDirItem@@QAE@ABU0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CDirItem@@QAE@ABU0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CDirItem@@QAE@ABU0@@Z ENDP				; CDirItem::CDirItem
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCDirItem@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCDirItem@@QAEPAXI@Z PROC				; CDirItem::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CDirItem@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@8
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@8:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCDirItem@@QAEPAXI@Z ENDP				; CDirItem::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CArcItem@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CArcItem@@QAE@ABU0@@Z PROC				; CArcItem::CArcItem, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx+28]
	mov	BYTE PTR [ecx+28], al
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx+29]
	mov	BYTE PTR [ecx+29], al
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx+30]
	mov	BYTE PTR [ecx+30], al
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx+31]
	mov	BYTE PTR [ecx+31], al
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	al, BYTE PTR [edx+32]
	mov	BYTE PTR [ecx+32], al
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR [ecx+36], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR [ecx+40], eax
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CArcItem@@QAE@ABU0@@Z ENDP				; CArcItem::CArcItem
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??_GCArcItem@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCArcItem@@QAEPAXI@Z PROC				; CArcItem::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CArcItem@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@9
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@9:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCArcItem@@QAEPAXI@Z ENDP				; CArcItem::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CProperty@@QAE@ABU0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CProperty@@QAE@ABU0@@Z$0
__ehfuncinfo$??0CProperty@@QAE@ABU0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CProperty@@QAE@ABU0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CProperty@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0CProperty@@QAE@ABU0@@Z PROC				; CProperty::CProperty, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CProperty@@QAE@ABU0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CProperty@@QAE@ABU0@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$??0CProperty@@QAE@ABU0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CProperty@@QAE@ABU0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CProperty@@QAE@ABU0@@Z ENDP				; CProperty::CProperty
PUBLIC	??0?$CMyComPtr@UIOutStream@@@@QAE@ABV0@@Z	; CMyComPtr<IOutStream>::CMyComPtr<IOutStream>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CAltStreamInfo@COutMultiVolStream@@QAE@ABU01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CAltStreamInfo@COutMultiVolStream@@QAE@ABU01@@Z$0
__ehfuncinfo$??0CAltStreamInfo@COutMultiVolStream@@QAE@ABU01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CAltStreamInfo@COutMultiVolStream@@QAE@ABU01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CAltStreamInfo@COutMultiVolStream@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0CAltStreamInfo@COutMultiVolStream@@QAE@ABU01@@Z PROC	; COutMultiVolStream::CAltStreamInfo::CAltStreamInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CAltStreamInfo@COutMultiVolStream@@QAE@ABU01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$CMyComPtr@UIOutStream@@@@QAE@ABV0@@Z ; CMyComPtr<IOutStream>::CMyComPtr<IOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 8
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR [edx+24], ecx
	mov	eax, DWORD PTR [eax+28]
	mov	DWORD PTR [edx+28], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR [ecx+32], eax
	mov	edx, DWORD PTR [edx+36]
	mov	DWORD PTR [ecx+36], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CAltStreamInfo@COutMultiVolStream@@QAE@ABU01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$CMyComPtr@UIOutStream@@@@QAE@XZ	; CMyComPtr<IOutStream>::~CMyComPtr<IOutStream>
__ehhandler$??0CAltStreamInfo@COutMultiVolStream@@QAE@ABU01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CAltStreamInfo@COutMultiVolStream@@QAE@ABU01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CAltStreamInfo@COutMultiVolStream@@QAE@ABU01@@Z ENDP	; COutMultiVolStream::CAltStreamInfo::CAltStreamInfo
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCAltStreamInfo@COutMultiVolStream@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCAltStreamInfo@COutMultiVolStream@@QAEPAXI@Z PROC	; COutMultiVolStream::CAltStreamInfo::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CAltStreamInfo@COutMultiVolStream@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@10
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@10:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCAltStreamInfo@COutMultiVolStream@@QAEPAXI@Z ENDP	; COutMultiVolStream::CAltStreamInfo::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1?$CMyComPtr@UIArchiveGetRawProps@@@@QAE@XZ	; CMyComPtr<IArchiveGetRawProps>::~CMyComPtr<IArchiveGetRawProps>
PUBLIC	??1?$CMyComPtr@UIArchiveGetRootProps@@@@QAE@XZ	; CMyComPtr<IArchiveGetRootProps>::~CMyComPtr<IArchiveGetRootProps>
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CArc@@QAE@XZ DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$??1CArc@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1CArc@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CArc@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CArc@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CArc@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CArc@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1CArc@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??1CArc@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??1CArc@@QAE@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??1CArc@@QAE@XZ$7
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CArc@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CArc@@QAE@XZ PROC					; CArc::~CArc, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CArc@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 7
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 136				; 00000088H
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 124				; 0000007cH
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??1CArcErrorInfo@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??1CArcErrorInfo@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1?$CMyComPtr@UIArchiveGetRootProps@@@@QAE@XZ ; CMyComPtr<IArchiveGetRootProps>::~CMyComPtr<IArchiveGetRootProps>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$CMyComPtr@UIArchiveGetRawProps@@@@QAE@XZ ; CMyComPtr<IArchiveGetRawProps>::~CMyComPtr<IArchiveGetRawProps>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CArc@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CMyComPtr@UIInArchive@@@@QAE@XZ	; CMyComPtr<IInArchive>::~CMyComPtr<IInArchive>
__unwindfunclet$??1CArc@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
__unwindfunclet$??1CArc@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1?$CMyComPtr@UIArchiveGetRawProps@@@@QAE@XZ ; CMyComPtr<IArchiveGetRawProps>::~CMyComPtr<IArchiveGetRawProps>
__unwindfunclet$??1CArc@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$CMyComPtr@UIArchiveGetRootProps@@@@QAE@XZ ; CMyComPtr<IArchiveGetRootProps>::~CMyComPtr<IArchiveGetRootProps>
__unwindfunclet$??1CArc@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	jmp	??1CArcErrorInfo@@QAE@XZ
__unwindfunclet$??1CArc@@QAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	jmp	??1CArcErrorInfo@@QAE@XZ
__unwindfunclet$??1CArc@@QAE@XZ$6:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$??1CArc@@QAE@XZ$7:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 124				; 0000007cH
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$??1CArc@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CArc@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CArc@@QAE@XZ ENDP					; CArc::~CArc
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$CMyComPtr@UIArchiveGetRawProps@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIArchiveGetRawProps@@@@QAE@XZ PROC	; CMyComPtr<IArchiveGetRawProps>::~CMyComPtr<IArchiveGetRawProps>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@10
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@10:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIArchiveGetRawProps@@@@QAE@XZ ENDP	; CMyComPtr<IArchiveGetRawProps>::~CMyComPtr<IArchiveGetRawProps>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIArchiveGetRootProps@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIArchiveGetRootProps@@@@QAE@XZ PROC	; CMyComPtr<IArchiveGetRootProps>::~CMyComPtr<IArchiveGetRootProps>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@11
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@11:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIArchiveGetRootProps@@@@QAE@XZ ENDP	; CMyComPtr<IArchiveGetRootProps>::~CMyComPtr<IArchiveGetRootProps>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@PAX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@PAX@@QAE@XZ PROC			; CRecordVector<void *>::CRecordVector<void *>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@PAX@@QAE@XZ ENDP			; CRecordVector<void *>::CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@PAX@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@PAX@@QBEIXZ PROC			; CRecordVector<void *>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@PAX@@QBEIXZ ENDP			; CRecordVector<void *>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ PROC		; CRecordVector<void *>::IsEmpty, COMDAT
; _this$ = ecx
; Line 49
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+4], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ ENDP		; CRecordVector<void *>::IsEmpty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Reserve@?$CRecordVector@PAX@@QAEXI@Z
_TEXT	SEGMENT
$T78602 = -16						; size = 4
$T78601 = -12						; size = 4
_p$76391 = -8						; size = 4
_this$ = -4						; size = 4
_newCapacity$ = 8					; size = 4
?Reserve@?$CRecordVector@PAX@@QAEXI@Z PROC		; CRecordVector<void *>::Reserve, COMDAT
; _this$ = ecx
; Line 61
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 62
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	SHORT $LN3@Reserve
; Line 64
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T78601[ebp], eax
	mov	eax, DWORD PTR $T78601[ebp]
	mov	DWORD PTR _p$76391[ebp], eax
; Line 65
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@Reserve
; Line 66
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$76391[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@Reserve:
; Line 67
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T78602[ebp], edx
	mov	eax, DWORD PTR $T78602[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 68
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$76391[ebp]
	mov	DWORD PTR [ecx], edx
; Line 69
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@Reserve:
; Line 71
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Reserve@?$CRecordVector@PAX@@QAEXI@Z ENDP		; CRecordVector<void *>::Reserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ClearAndReserve@?$CRecordVector@PAX@@QAEXI@Z
_TEXT	SEGMENT
$T78606 = -12						; size = 4
$T78605 = -8						; size = 4
_this$ = -4						; size = 4
_newCapacity$ = 8					; size = 4
?ClearAndReserve@?$CRecordVector@PAX@@QAEXI@Z PROC	; CRecordVector<void *>::ClearAndReserve, COMDAT
; _this$ = ecx
; Line 74
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 75
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CRecordVector@PAX@@QAEXXZ	; CRecordVector<void *>::Clear
; Line 76
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	SHORT $LN2@ClearAndRe
; Line 78
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T78605[ebp], eax
	mov	ecx, DWORD PTR $T78605[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 79
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0
; Line 80
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 81
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T78606[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T78606[ebp]
	mov	DWORD PTR [eax], ecx
; Line 82
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _newCapacity$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@ClearAndRe:
; Line 84
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearAndReserve@?$CRecordVector@PAX@@QAEXI@Z ENDP	; CRecordVector<void *>::ClearAndReserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@PAX@@QAE@XZ
_TEXT	SEGMENT
$T78609 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@PAX@@QAE@XZ PROC			; CRecordVector<void *>::~CRecordVector<void *>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T78609[ebp], ecx
	mov	edx, DWORD PTR $T78609[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@PAX@@QAE@XZ ENDP			; CRecordVector<void *>::~CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Clear@?$CRecordVector@PAX@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$CRecordVector@PAX@@QAEXXZ PROC			; CRecordVector<void *>::Clear, COMDAT
; _this$ = ecx
; Line 131
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CRecordVector@PAX@@QAEXXZ ENDP			; CRecordVector<void *>::Clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?DeleteBack@?$CRecordVector@PAX@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DeleteBack@?$CRecordVector@PAX@@QAEXXZ PROC		; CRecordVector<void *>::DeleteBack, COMDAT
; _this$ = ecx
; Line 133
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
?DeleteBack@?$CRecordVector@PAX@@QAEXXZ ENDP		; CRecordVector<void *>::DeleteBack
_TEXT	ENDS
PUBLIC	?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ	; CRecordVector<void *>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@PAX@@QAEIQAX@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?Add@?$CRecordVector@PAX@@QAEIQAX@Z PROC		; CRecordVector<void *>::Add, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ; CRecordVector<void *>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 201
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv72[ebp]
; Line 202
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CRecordVector@PAX@@QAEIQAX@Z ENDP		; CRecordVector<void *>::Add
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z PROC	; CRecordVector<void *>::AddInReserved, COMDAT
; _this$ = ecx
; Line 205
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 206
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 207
	mov	esp, ebp
	pop	ebp
	ret	4
?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ENDP	; CRecordVector<void *>::AddInReserved
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@PAX@@QBEABQAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@PAX@@QBEABQAXI@Z PROC		; CRecordVector<void *>::operator[], COMDAT
; _this$ = ecx
; Line 227
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@PAX@@QBEABQAXI@Z ENDP		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@PAX@@QAEAAPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@PAX@@QAEAAPAXI@Z PROC		; CRecordVector<void *>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@PAX@@QAEAAPAXI@Z ENDP		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@VCArc@@@@QBEABVCArc@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@VCArc@@@@QBEABVCArc@@I@Z PROC	; CObjectVector<CArc>::operator[], COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@VCArc@@@@QBEABVCArc@@I@Z ENDP	; CObjectVector<CArc>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@VCArc@@@@QAEAAVCArc@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@VCArc@@@@QAEAAVCArc@@I@Z PROC	; CObjectVector<CArc>::operator[], COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@VCArc@@@@QAEAAVCArc@@I@Z ENDP	; CObjectVector<CArc>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Free@?$CBuffer@E@@QAEXXZ
_TEXT	SEGMENT
$T78628 = -8						; size = 4
_this$ = -4						; size = 4
?Free@?$CBuffer@E@@QAEXXZ PROC				; CBuffer<unsigned char>::Free, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mybuffer.h
; Line 15
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 16
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@Free
; Line 18
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T78628[ebp], edx
	mov	eax, DWORD PTR $T78628[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 19
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
$LN1@Free:
; Line 21
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 22
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Free@?$CBuffer@E@@QAEXXZ ENDP				; CBuffer<unsigned char>::Free
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CBuffer@E@@QAE@ABV0@@Z
_TEXT	SEGMENT
$T78631 = -12						; size = 4
_size$ = -8						; size = 4
_this$ = -4						; size = 4
_buffer$ = 8						; size = 4
??0?$CBuffer@E@@QAE@ABV0@@Z PROC			; CBuffer<unsigned char>::CBuffer<unsigned char>, COMDAT
; _this$ = ecx
; Line 27
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 28
	mov	edx, DWORD PTR _buffer$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _size$[ebp], eax
; Line 29
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN2@CBuffer
; Line 31
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T78631[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T78631[ebp]
	mov	DWORD PTR [edx], eax
; Line 32
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buffer$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 33
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN2@CBuffer:
; Line 35
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CBuffer@E@@QAE@ABV0@@Z ENDP			; CBuffer<unsigned char>::CBuffer<unsigned char>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIOutStream@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lp$ = 8						; size = 4
??0?$CMyComPtr@UIOutStream@@@@QAE@ABV0@@Z PROC		; CMyComPtr<IOutStream>::CMyComPtr<IOutStream>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 20
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _lp$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@12
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@12:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UIOutStream@@@@QAE@ABV0@@Z ENDP		; CMyComPtr<IOutStream>::CMyComPtr<IOutStream>
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
;	COMDAT xdata$x
; File c:\workspace\7z1505-src\cpp\common\myvector.h
xdata$x	SEGMENT
__unwindtable$?ReserveOnePosition@?$CRecordVector@UCUpdatePair2@@@@AAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ReserveOnePosition@?$CRecordVector@UCUpdatePair2@@@@AAEXXZ$0
__ehfuncinfo$?ReserveOnePosition@?$CRecordVector@UCUpdatePair2@@@@AAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ReserveOnePosition@?$CRecordVector@UCUpdatePair2@@@@AAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?ReserveOnePosition@?$CRecordVector@UCUpdatePair2@@@@AAEXXZ
_TEXT	SEGMENT
tv86 = -44						; size = 4
$T78641 = -40						; size = 4
$T78638 = -36						; size = 4
$T78637 = -32						; size = 4
$T78636 = -28						; size = 4
_p$76443 = -24						; size = 4
_newCapacity$76442 = -20				; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?ReserveOnePosition@?$CRecordVector@UCUpdatePair2@@@@AAEXXZ PROC ; CRecordVector<CUpdatePair2>::ReserveOnePosition, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ReserveOnePosition@?$CRecordVector@UCUpdatePair2@@@@AAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-44], eax
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@ReserveOne
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$76442[ebp], ecx
; Line 23
	mov	edx, DWORD PTR _newCapacity$76442[ebp]
	mov	DWORD PTR $T78636[ebp], edx
	xor	ecx, ecx
	mov	eax, DWORD PTR $T78636[ebp]
	mov	edx, 20					; 00000014H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T78638[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T78638[ebp], 0
	je	SHORT $LN5@ReserveOne
	push	OFFSET ??0CUpdatePair2@@QAE@XZ		; CUpdatePair2::CUpdatePair2
	mov	eax, DWORD PTR $T78636[ebp]
	push	eax
	push	20					; 00000014H
	mov	ecx, DWORD PTR $T78638[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T78638[ebp]
	mov	DWORD PTR tv86[ebp], edx
	jmp	SHORT $LN6@ReserveOne
$LN5@ReserveOne:
	mov	DWORD PTR tv86[ebp], 0
$LN6@ReserveOne:
	mov	eax, DWORD PTR tv86[ebp]
	mov	DWORD PTR $T78637[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T78637[ebp]
	mov	DWORD PTR _p$76443[ebp], ecx
; Line 24
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	SHORT $LN1@ReserveOne
; Line 25
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	imul	ecx, 20					; 00000014H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _p$76443[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne:
; Line 26
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T78641[ebp], eax
	mov	ecx, DWORD PTR $T78641[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$76443[ebp]
	mov	DWORD PTR [edx], eax
; Line 28
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _newCapacity$76442[ebp]
	mov	DWORD PTR [ecx+8], edx
$LN3@ReserveOne:
; Line 30
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ReserveOnePosition@?$CRecordVector@UCUpdatePair2@@@@AAEXXZ$0:
	mov	eax, DWORD PTR $T78638[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?ReserveOnePosition@?$CRecordVector@UCUpdatePair2@@@@AAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ReserveOnePosition@?$CRecordVector@UCUpdatePair2@@@@AAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?ReserveOnePosition@?$CRecordVector@UCUpdatePair2@@@@AAEXXZ ENDP ; CRecordVector<CUpdatePair2>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ReserveOnePosition@?$CRecordVector@UCRefSortPair@@@@AAEXXZ
_TEXT	SEGMENT
$T78652 = -20						; size = 4
$T78651 = -16						; size = 4
_p$76458 = -12						; size = 4
_newCapacity$76457 = -8					; size = 4
_this$ = -4						; size = 4
?ReserveOnePosition@?$CRecordVector@UCRefSortPair@@@@AAEXXZ PROC ; CRecordVector<CRefSortPair>::ReserveOnePosition, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@ReserveOne@2
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$76457[ebp], ecx
; Line 23
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$76457[ebp]
	mov	edx, 8
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T78651[ebp], eax
	mov	eax, DWORD PTR $T78651[ebp]
	mov	DWORD PTR _p$76458[ebp], eax
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@ReserveOne@2
; Line 25
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$76458[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne@2:
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T78652[ebp], edx
	mov	eax, DWORD PTR $T78652[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$76458[ebp]
	mov	DWORD PTR [ecx], edx
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$76457[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ReserveOne@2:
; Line 30
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveOnePosition@?$CRecordVector@UCRefSortPair@@@@AAEXXZ ENDP ; CRecordVector<CRefSortPair>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Front@?$CRecordVector@UCRefSortPair@@@@QAEAAUCRefSortPair@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Front@?$CRecordVector@UCRefSortPair@@@@QAEAAUCRefSortPair@@XZ PROC ; CRecordVector<CRefSortPair>::Front, COMDAT
; _this$ = ecx
; Line 230
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
?Front@?$CRecordVector@UCRefSortPair@@@@QAEAAUCRefSortPair@@XZ ENDP ; CRecordVector<CRefSortPair>::Front
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SortRefDown@?$CRecordVector@UCRefSortPair@@@@SGXPAUCRefSortPair@@IIP6GHPBU2@1PAX@Z2@Z
_TEXT	SEGMENT
_s$76472 = -20						; size = 4
_temp$ = -12						; size = 8
_p$ = 8							; size = 4
_k$ = 12						; size = 4
_size$ = 16						; size = 4
_compare$ = 20						; size = 4
_param$ = 24						; size = 4
?SortRefDown@?$CRecordVector@UCRefSortPair@@@@SGXPAUCRefSortPair@@IIP6GHPBU2@1PAX@Z2@Z PROC ; CRecordVector<CRefSortPair>::SortRefDown, COMDAT
; Line 324
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 325
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8]
	mov	eax, DWORD PTR [ecx+eax*8+4]
	mov	DWORD PTR _temp$[ebp], edx
	mov	DWORD PTR _temp$[ebp+4], eax
$LN5@SortRefDow:
; Line 328
	mov	ecx, DWORD PTR _k$[ebp]
	shl	ecx, 1
	mov	DWORD PTR _s$76472[ebp], ecx
; Line 329
	mov	edx, DWORD PTR _s$76472[ebp]
	cmp	edx, DWORD PTR _size$[ebp]
	jbe	SHORT $LN3@SortRefDow
; Line 330
	jmp	$LN4@SortRefDow
$LN3@SortRefDow:
; Line 331
	mov	eax, DWORD PTR _s$76472[ebp]
	cmp	eax, DWORD PTR _size$[ebp]
	jae	SHORT $LN2@SortRefDow
	mov	esi, esp
	mov	ecx, DWORD PTR _param$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$76472[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	push	ecx
	mov	edx, DWORD PTR _s$76472[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	lea	ecx, DWORD PTR [eax+edx*8+8]
	push	ecx
	call	DWORD PTR _compare$[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jle	SHORT $LN2@SortRefDow
; Line 332
	mov	edx, DWORD PTR _s$76472[ebp]
	add	edx, 1
	mov	DWORD PTR _s$76472[ebp], edx
$LN2@SortRefDow:
; Line 333
	mov	esi, esp
	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$76472[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	push	eax
	lea	ecx, DWORD PTR _temp$[ebp]
	push	ecx
	call	DWORD PTR _compare$[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jl	SHORT $LN1@SortRefDow
; Line 334
	jmp	SHORT $LN4@SortRefDow
$LN1@SortRefDow:
; Line 335
	mov	edx, DWORD PTR _s$76472[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+edx*8]
	mov	edx, DWORD PTR [eax+edx*8+4]
	mov	eax, DWORD PTR _k$[ebp]
	mov	esi, DWORD PTR _p$[ebp]
	mov	DWORD PTR [esi+eax*8], ecx
	mov	DWORD PTR [esi+eax*8+4], edx
; Line 336
	mov	ecx, DWORD PTR _s$76472[ebp]
	mov	DWORD PTR _k$[ebp], ecx
; Line 337
	jmp	$LN5@SortRefDow
$LN4@SortRefDow:
; Line 338
	mov	edx, DWORD PTR _k$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax+edx*8], ecx
	mov	ecx, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [eax+edx*8+4], ecx
; Line 339
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@SortRefDow
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
	npad	1
$LN10@SortRefDow:
	DD	1
	DD	$LN9@SortRefDow
$LN9@SortRefDow:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN8@SortRefDow
$LN8@SortRefDow:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
?SortRefDown@?$CRecordVector@UCRefSortPair@@@@SGXPAUCRefSortPair@@IIP6GHPBU2@1PAX@Z2@Z ENDP ; CRecordVector<CRefSortPair>::SortRefDown
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	push	esi
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector
	mov	esi, esp
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR ___t$[ebp]
	add	ecx, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], ecx
	jmp	SHORT $LN2@vector
$LN3@vector:
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ
_TEXT	SEGMENT
$T78665 = -20						; size = 4
$T78664 = -16						; size = 4
_p$76491 = -12						; size = 4
_newCapacity$76490 = -8					; size = 4
_this$ = -4						; size = 4
?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ PROC	; CRecordVector<void *>::ReserveOnePosition, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@ReserveOne@3
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$76490[ebp], ecx
; Line 23
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$76490[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T78664[ebp], eax
	mov	eax, DWORD PTR $T78664[ebp]
	mov	DWORD PTR _p$76491[ebp], eax
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@ReserveOne@3
; Line 25
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$76491[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne@3:
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T78665[ebp], edx
	mov	eax, DWORD PTR $T78665[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$76491[ebp]
	mov	DWORD PTR [ecx], edx
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$76490[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ReserveOne@3:
; Line 30
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ENDP	; CRecordVector<void *>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$MyMin@_K@@YG_K_K0@Z
_TEXT	SEGMENT
tv65 = -8						; size = 8
_a$ = 8							; size = 8
_b$ = 16						; size = 8
??$MyMin@_K@@YG_K_K0@Z PROC				; MyMin<unsigned __int64>, COMDAT
; File c:\workspace\7z1505-src\cpp\common\defs.h
; Line 7
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _a$[ebp+4]
	cmp	eax, DWORD PTR _b$[ebp+4]
	ja	SHORT $LN3@MyMin
	jb	SHORT $LN5@MyMin
	mov	ecx, DWORD PTR _a$[ebp]
	cmp	ecx, DWORD PTR _b$[ebp]
	jae	SHORT $LN3@MyMin
$LN5@MyMin:
	mov	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR tv65[ebp], edx
	mov	eax, DWORD PTR _a$[ebp+4]
	mov	DWORD PTR tv65[ebp+4], eax
	jmp	SHORT $LN4@MyMin
$LN3@MyMin:
	mov	ecx, DWORD PTR _b$[ebp]
	mov	DWORD PTR tv65[ebp], ecx
	mov	edx, DWORD PTR _b$[ebp+4]
	mov	DWORD PTR tv65[ebp+4], edx
$LN4@MyMin:
	mov	eax, DWORD PTR tv65[ebp]
	mov	edx, DWORD PTR tv65[ebp+4]
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??$MyMin@_K@@YG_K_K0@Z ENDP				; MyMin<unsigned __int64>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$QueryInterface@UIOutArchive@@@?$CMyComPtr@UIInArchive@@@@QBEJABU_GUID@@PAPAUIOutArchive@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iid$ = 8						; size = 4
_pp$ = 12						; size = 4
??$QueryInterface@UIOutArchive@@@?$CMyComPtr@UIInArchive@@@@QBEJABU_GUID@@PAPAUIOutArchive@@@Z PROC ; CMyComPtr<IInArchive>::QueryInterface<IOutArchive>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 70
	mov	esi, esp
	mov	eax, DWORD PTR _pp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 71
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$QueryInterface@UIOutArchive@@@?$CMyComPtr@UIInArchive@@@@QBEJABU_GUID@@PAPAUIOutArchive@@@Z ENDP ; CMyComPtr<IInArchive>::QueryInterface<IOutArchive>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$MyCompare@I@@YGHII@Z
_TEXT	SEGMENT
tv67 = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$MyCompare@I@@YGHII@Z PROC				; MyCompare<unsigned int>, COMDAT
; File c:\workspace\7z1505-src\cpp\common\defs.h
; Line 12
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _a$[ebp]
	cmp	eax, DWORD PTR _b$[ebp]
	jae	SHORT $LN3@MyCompare
	mov	DWORD PTR tv67[ebp], -1
	jmp	SHORT $LN4@MyCompare
$LN3@MyCompare:
	mov	ecx, DWORD PTR _a$[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR _b$[ebp]
	setne	dl
	mov	DWORD PTR tv67[ebp], edx
$LN4@MyCompare:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??$MyCompare@I@@YGHII@Z ENDP				; MyCompare<unsigned int>
_TEXT	ENDS
END
