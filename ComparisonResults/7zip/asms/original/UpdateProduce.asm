; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\CPP\7zip\UI\Common\UpdateProduce.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_kUpdateActionSetCollision DD FLAT:$SG68833
_DATA	ENDS
CONST	SEGMENT
$SG68833 DB	'Internal collision in update action set', 00H
CONST	ENDS
PUBLIC	?ReserveDown@?$CRecordVector@UCUpdatePair2@@@@QAEXXZ ; CRecordVector<CUpdatePair2>::ReserveDown
PUBLIC	?Add@?$CRecordVector@UCUpdatePair2@@@@QAEIUCUpdatePair2@@@Z ; CRecordVector<CUpdatePair2>::Add
PUBLIC	__TI2CPAD
PUBLIC	??0CUpdatePair2@@QAE@XZ				; CUpdatePair2::CUpdatePair2
PUBLIC	??A?$CRecordVector@UCUpdatePair@@@@QBEABUCUpdatePair@@I@Z ; CRecordVector<CUpdatePair>::operator[]
PUBLIC	?Size@?$CRecordVector@UCUpdatePair@@@@QBEIXZ	; CRecordVector<CUpdatePair>::Size
PUBLIC	?UpdateProduce@@YGXABV?$CRecordVector@UCUpdatePair@@@@ABUCActionSet@NUpdateArchive@@AAV?$CRecordVector@UCUpdatePair2@@@@PAUIUpdateProduceCallback@@@Z ; UpdateProduce
PUBLIC	__CTA2PAD
PUBLIC	__CT??_R0PAD@84
PUBLIC	??_R0PAD@8					; char * `RTTI Type Descriptor'
PUBLIC	__CT??_R0PAX@84
PUBLIC	??_R0PAX@8					; void * `RTTI Type Descriptor'
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_R0PAX@8
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\updateproduce.cpp
_DATA	SEGMENT
??_R0PAX@8 DD	FLAT:??_7type_info@@6B@			; void * `RTTI Type Descriptor'
	DD	00H
	DB	'.PAX', 00H
_DATA	ENDS
;	COMDAT __CT??_R0PAX@84
xdata$x	SEGMENT
__CT??_R0PAX@84 DD 01H
	DD	FLAT:??_R0PAX@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	00H
xdata$x	ENDS
;	COMDAT ??_R0PAD@8
_DATA	SEGMENT
??_R0PAD@8 DD	FLAT:??_7type_info@@6B@			; char * `RTTI Type Descriptor'
	DD	00H
	DB	'.PAD', 00H
_DATA	ENDS
;	COMDAT __CT??_R0PAD@84
xdata$x	SEGMENT
__CT??_R0PAD@84 DD 01H
	DD	FLAT:??_R0PAD@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	00H
xdata$x	ENDS
;	COMDAT __CTA2PAD
xdata$x	SEGMENT
__CTA2PAD DD	02H
	DD	FLAT:__CT??_R0PAD@84
	DD	FLAT:__CT??_R0PAX@84
xdata$x	ENDS
;	COMDAT __TI2CPAD
xdata$x	SEGMENT
__TI2CPAD DD	01H
	DD	00H
	DD	00H
	DD	FLAT:__CTA2PAD
xdata$x	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
tv76 = -48						; size = 4
$T69175 = -44						; size = 4
$T69173 = -40						; size = 4
_up2$68942 = -32					; size = 20
_pair$68941 = -8					; size = 4
_i$68842 = -4						; size = 4
_updatePairs$ = 8					; size = 4
_actionSet$ = 12					; size = 4
_operationChain$ = 16					; size = 4
_callback$ = 20						; size = 4
?UpdateProduce@@YGXABV?$CRecordVector@UCUpdatePair@@@@ABUCActionSet@NUpdateArchive@@AAV?$CRecordVector@UCUpdatePair2@@@@PAUIUpdateProduceCallback@@@Z PROC ; UpdateProduce
; Line 16
	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 17
	mov	DWORD PTR _i$68842[ebp], 0
	jmp	SHORT $LN16@UpdateProd
$LN15@UpdateProd:
	mov	eax, DWORD PTR _i$68842[ebp]
	add	eax, 1
	mov	DWORD PTR _i$68842[ebp], eax
$LN16@UpdateProd:
	mov	ecx, DWORD PTR _updatePairs$[ebp]
	call	?Size@?$CRecordVector@UCUpdatePair@@@@QBEIXZ ; CRecordVector<CUpdatePair>::Size
	cmp	DWORD PTR _i$68842[ebp], eax
	jae	$LN14@UpdateProd
; Line 19
	mov	ecx, DWORD PTR _i$68842[ebp]
	push	ecx
	mov	ecx, DWORD PTR _updatePairs$[ebp]
	call	??A?$CRecordVector@UCUpdatePair@@@@QBEABUCUpdatePair@@I@Z ; CRecordVector<CUpdatePair>::operator[]
	mov	DWORD PTR _pair$68941[ebp], eax
; Line 21
	lea	ecx, DWORD PTR _up2$68942[ebp]
	call	??0CUpdatePair2@@QAE@XZ			; CUpdatePair2::CUpdatePair2
; Line 22
	mov	edx, DWORD PTR _pair$68941[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _up2$68942[ebp+4], eax
; Line 23
	mov	ecx, DWORD PTR _pair$68941[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _up2$68942[ebp+8], edx
; Line 24
	mov	BYTE PTR _up2$68942[ebp+1], 1
	mov	al, BYTE PTR _up2$68942[ebp+1]
	mov	BYTE PTR _up2$68942[ebp], al
; Line 25
	mov	BYTE PTR _up2$68942[ebp+2], 0
; Line 27
	mov	ecx, DWORD PTR _pair$68941[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _actionSet$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR tv76[ebp], ecx
	cmp	DWORD PTR tv76[ebp], 3
	ja	$LN12@UpdateProd
	mov	edx, DWORD PTR tv76[ebp]
	jmp	DWORD PTR $LN22@UpdateProd[edx*4]
$LN11@UpdateProd:
; Line 30
	mov	eax, DWORD PTR _pair$68941[ebp]
	cmp	DWORD PTR [eax+4], 0
	jl	SHORT $LN10@UpdateProd
	cmp	DWORD PTR _callback$[ebp], 0
	je	SHORT $LN10@UpdateProd
; Line 31
	mov	esi, esp
	mov	ecx, DWORD PTR _pair$68941[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _callback$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _callback$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN10@UpdateProd:
; Line 32
	jmp	$LN15@UpdateProd
$LN9@UpdateProd:
; Line 35
	mov	ecx, DWORD PTR _pair$68941[ebp]
	cmp	DWORD PTR [ecx], 2
	jne	SHORT $LN8@UpdateProd
; Line 36
	mov	edx, DWORD PTR _kUpdateActionSetCollision
	mov	DWORD PTR $T69173[ebp], edx
	push	OFFSET __TI2CPAD
	lea	eax, DWORD PTR $T69173[ebp]
	push	eax
	call	__CxxThrowException@8
$LN8@UpdateProd:
; Line 37
	mov	ecx, DWORD PTR _pair$68941[ebp]
	cmp	DWORD PTR [ecx], 1
	jne	SHORT $LN7@UpdateProd
; Line 39
	mov	edx, DWORD PTR _pair$68941[ebp]
	cmp	DWORD PTR [edx+12], 0
	jl	SHORT $LN7@UpdateProd
; Line 46
	mov	eax, DWORD PTR _pair$68941[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _updatePairs$[ebp]
	call	??A?$CRecordVector@UCUpdatePair@@@@QBEABUCUpdatePair@@I@Z ; CRecordVector<CUpdatePair>::operator[]
	cmp	DWORD PTR [eax+8], 0
	jl	SHORT $LN7@UpdateProd
; Line 47
	jmp	$LN15@UpdateProd
$LN7@UpdateProd:
; Line 50
	mov	BYTE PTR _up2$68942[ebp+1], 0
	mov	dl, BYTE PTR _up2$68942[ebp+1]
	mov	BYTE PTR _up2$68942[ebp], dl
; Line 51
	mov	BYTE PTR _up2$68942[ebp+2], 1
; Line 52
	jmp	SHORT $LN12@UpdateProd
$LN4@UpdateProd:
; Line 56
	mov	eax, DWORD PTR _pair$68941[ebp]
	cmp	DWORD PTR [eax], 1
	je	SHORT $LN2@UpdateProd
	mov	ecx, DWORD PTR _pair$68941[ebp]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN3@UpdateProd
$LN2@UpdateProd:
; Line 57
	mov	edx, DWORD PTR _kUpdateActionSetCollision
	mov	DWORD PTR $T69175[ebp], edx
	push	OFFSET __TI2CPAD
	lea	eax, DWORD PTR $T69175[ebp]
	push	eax
	call	__CxxThrowException@8
$LN3@UpdateProd:
; Line 58
	jmp	SHORT $LN12@UpdateProd
$LN1@UpdateProd:
; Line 61
	mov	BYTE PTR _up2$68942[ebp+3], 1
; Line 62
	mov	ecx, DWORD PTR _pair$68941[ebp]
	xor	edx, edx
	cmp	DWORD PTR [ecx+4], 0
	setge	dl
	mov	BYTE PTR _up2$68942[ebp+2], dl
$LN12@UpdateProd:
; Line 66
	sub	esp, 20					; 00000014H
	mov	eax, esp
	mov	ecx, DWORD PTR _up2$68942[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _up2$68942[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _up2$68942[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _up2$68942[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR _up2$68942[ebp+16]
	mov	DWORD PTR [eax+16], ecx
	mov	ecx, DWORD PTR _operationChain$[ebp]
	call	?Add@?$CRecordVector@UCUpdatePair2@@@@QAEIUCUpdatePair2@@@Z ; CRecordVector<CUpdatePair2>::Add
; Line 67
	jmp	$LN15@UpdateProd
$LN14@UpdateProd:
; Line 69
	mov	ecx, DWORD PTR _operationChain$[ebp]
	call	?ReserveDown@?$CRecordVector@UCUpdatePair2@@@@QAEXXZ ; CRecordVector<CUpdatePair2>::ReserveDown
$LN18@UpdateProd:
; Line 70
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN21@UpdateProd
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	1
$LN21@UpdateProd:
	DD	1
	DD	$LN20@UpdateProd
$LN20@UpdateProd:
	DD	-32					; ffffffe0H
	DD	20					; 00000014H
	DD	$LN19@UpdateProd
$LN19@UpdateProd:
	DB	117					; 00000075H
	DB	112					; 00000070H
	DB	50					; 00000032H
	DB	0
$LN22@UpdateProd:
	DD	$LN11@UpdateProd
	DD	$LN9@UpdateProd
	DD	$LN4@UpdateProd
	DD	$LN1@UpdateProd
?UpdateProduce@@YGXABV?$CRecordVector@UCUpdatePair@@@@ABUCActionSet@NUpdateArchive@@AAV?$CRecordVector@UCUpdatePair2@@@@PAUIUpdateProduceCallback@@@Z ENDP ; UpdateProduce
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CUpdatePair2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CUpdatePair2@@QAE@XZ PROC				; CUpdatePair2::CUpdatePair2, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\updateproduce.h
; Line 41
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+2], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+3], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+16], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CUpdatePair2@@QAE@XZ ENDP				; CUpdatePair2::CUpdatePair2
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@UCUpdatePair@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@UCUpdatePair@@@@QBEIXZ PROC	; CRecordVector<CUpdatePair>::Size, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@UCUpdatePair@@@@QBEIXZ ENDP	; CRecordVector<CUpdatePair>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@UCUpdatePair@@@@QBEABUCUpdatePair@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@UCUpdatePair@@@@QBEABUCUpdatePair@@I@Z PROC ; CRecordVector<CUpdatePair>::operator[], COMDAT
; _this$ = ecx
; Line 227
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@UCUpdatePair@@@@QBEABUCUpdatePair@@I@Z ENDP ; CRecordVector<CUpdatePair>::operator[]
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_memcpy:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ReserveDown@?$CRecordVector@UCUpdatePair2@@@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ReserveDown@?$CRecordVector@UCUpdatePair2@@@@QAEXXZ$0
__ehfuncinfo$?ReserveDown@?$CRecordVector@UCUpdatePair2@@@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ReserveDown@?$CRecordVector@UCUpdatePair2@@@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?ReserveDown@?$CRecordVector@UCUpdatePair2@@@@QAEXXZ
_TEXT	SEGMENT
tv84 = -40						; size = 4
$T69200 = -36						; size = 4
$T69197 = -32						; size = 4
$T69196 = -28						; size = 4
$T69195 = -24						; size = 4
_p$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?ReserveDown@?$CRecordVector@UCUpdatePair2@@@@QAEXXZ PROC ; CRecordVector<CUpdatePair2>::ReserveDown, COMDAT
; _this$ = ecx
; Line 107
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ReserveDown@?$CRecordVector@UCUpdatePair2@@@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 108
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN2@ReserveDow
; Line 109
	jmp	$LN3@ReserveDow
$LN2@ReserveDow:
; Line 110
	mov	DWORD PTR _p$[ebp], 0
; Line 111
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	$LN1@ReserveDow
; Line 113
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T69195[ebp], edx
	xor	ecx, ecx
	mov	eax, DWORD PTR $T69195[ebp]
	mov	edx, 20					; 00000014H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T69197[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T69197[ebp], 0
	je	SHORT $LN5@ReserveDow
	push	OFFSET ??0CUpdatePair2@@QAE@XZ		; CUpdatePair2::CUpdatePair2
	mov	eax, DWORD PTR $T69195[ebp]
	push	eax
	push	20					; 00000014H
	mov	ecx, DWORD PTR $T69197[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T69197[ebp]
	mov	DWORD PTR tv84[ebp], edx
	jmp	SHORT $LN6@ReserveDow
$LN5@ReserveDow:
	mov	DWORD PTR tv84[ebp], 0
$LN6@ReserveDow:
	mov	eax, DWORD PTR tv84[ebp]
	mov	DWORD PTR $T69196[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T69196[ebp]
	mov	DWORD PTR _p$[ebp], ecx
; Line 114
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	imul	eax, 20					; 00000014H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveDow:
; Line 116
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T69200[ebp], edx
	mov	eax, DWORD PTR $T69200[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 117
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 118
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+8], edx
$LN3@ReserveDow:
; Line 119
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ReserveDown@?$CRecordVector@UCUpdatePair2@@@@QAEXXZ$0:
	mov	eax, DWORD PTR $T69197[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?ReserveDown@?$CRecordVector@UCUpdatePair2@@@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ReserveDown@?$CRecordVector@UCUpdatePair2@@@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?ReserveDown@?$CRecordVector@UCUpdatePair2@@@@QAEXXZ ENDP ; CRecordVector<CUpdatePair2>::ReserveDown
PUBLIC	?ReserveOnePosition@?$CRecordVector@UCUpdatePair2@@@@AAEXXZ ; CRecordVector<CUpdatePair2>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@UCUpdatePair2@@@@QAEIUCUpdatePair2@@@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 20
?Add@?$CRecordVector@UCUpdatePair2@@@@QAEIUCUpdatePair2@@@Z PROC ; CRecordVector<CUpdatePair2>::Add, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@UCUpdatePair2@@@@AAEXXZ ; CRecordVector<CUpdatePair2>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	imul	ecx, 20					; 00000014H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _item$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _item$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _item$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR _item$[ebp+16]
	mov	DWORD PTR [eax+16], ecx
; Line 201
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR tv72[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR tv72[ebp]
; Line 202
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?Add@?$CRecordVector@UCUpdatePair2@@@@QAEIUCUpdatePair2@@@Z ENDP ; CRecordVector<CUpdatePair2>::Add
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	push	esi
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector
	mov	esi, esp
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR ___t$[ebp]
	add	ecx, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], ecx
	jmp	SHORT $LN2@vector
$LN3@vector:
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ReserveOnePosition@?$CRecordVector@UCUpdatePair2@@@@AAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ReserveOnePosition@?$CRecordVector@UCUpdatePair2@@@@AAEXXZ$0
__ehfuncinfo$?ReserveOnePosition@?$CRecordVector@UCUpdatePair2@@@@AAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ReserveOnePosition@?$CRecordVector@UCUpdatePair2@@@@AAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?ReserveOnePosition@?$CRecordVector@UCUpdatePair2@@@@AAEXXZ
_TEXT	SEGMENT
tv86 = -44						; size = 4
$T69224 = -40						; size = 4
$T69221 = -36						; size = 4
$T69220 = -32						; size = 4
$T69219 = -28						; size = 4
_p$69115 = -24						; size = 4
_newCapacity$69114 = -20				; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?ReserveOnePosition@?$CRecordVector@UCUpdatePair2@@@@AAEXXZ PROC ; CRecordVector<CUpdatePair2>::ReserveOnePosition, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ReserveOnePosition@?$CRecordVector@UCUpdatePair2@@@@AAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-44], eax
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@ReserveOne
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$69114[ebp], ecx
; Line 23
	mov	edx, DWORD PTR _newCapacity$69114[ebp]
	mov	DWORD PTR $T69219[ebp], edx
	xor	ecx, ecx
	mov	eax, DWORD PTR $T69219[ebp]
	mov	edx, 20					; 00000014H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T69221[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T69221[ebp], 0
	je	SHORT $LN5@ReserveOne
	push	OFFSET ??0CUpdatePair2@@QAE@XZ		; CUpdatePair2::CUpdatePair2
	mov	eax, DWORD PTR $T69219[ebp]
	push	eax
	push	20					; 00000014H
	mov	ecx, DWORD PTR $T69221[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T69221[ebp]
	mov	DWORD PTR tv86[ebp], edx
	jmp	SHORT $LN6@ReserveOne
$LN5@ReserveOne:
	mov	DWORD PTR tv86[ebp], 0
$LN6@ReserveOne:
	mov	eax, DWORD PTR tv86[ebp]
	mov	DWORD PTR $T69220[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T69220[ebp]
	mov	DWORD PTR _p$69115[ebp], ecx
; Line 24
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	SHORT $LN1@ReserveOne
; Line 25
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	imul	ecx, 20					; 00000014H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _p$69115[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne:
; Line 26
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T69224[ebp], eax
	mov	ecx, DWORD PTR $T69224[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$69115[ebp]
	mov	DWORD PTR [edx], eax
; Line 28
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _newCapacity$69114[ebp]
	mov	DWORD PTR [ecx+8], edx
$LN3@ReserveOne:
; Line 30
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ReserveOnePosition@?$CRecordVector@UCUpdatePair2@@@@AAEXXZ$0:
	mov	eax, DWORD PTR $T69221[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?ReserveOnePosition@?$CRecordVector@UCUpdatePair2@@@@AAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ReserveOnePosition@?$CRecordVector@UCUpdatePair2@@@@AAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?ReserveOnePosition@?$CRecordVector@UCUpdatePair2@@@@AAEXXZ ENDP ; CRecordVector<CUpdatePair2>::ReserveOnePosition
END
