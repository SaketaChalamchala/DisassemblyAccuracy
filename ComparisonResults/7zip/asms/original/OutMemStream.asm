; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\CPP\7zip\Common\OutMemStream.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?Free@COutMemStream@@QAEXXZ			; COutMemStream::Free
EXTRN	?Free@CMemLockBlocks@@QAEXPAVCMemBlockManagerMt@@@Z:PROC ; CMemLockBlocks::Free
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\cpp\7zip\common\outmemstream.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Free@COutMemStream@@QAEXXZ PROC			; COutMemStream::Free
; _this$ = ecx
; Line 8
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 9
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?Free@CMemLockBlocks@@QAEXPAVCMemBlockManagerMt@@@Z ; CMemLockBlocks::Free
; Line 10
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+64], 1
; Line 11
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Free@COutMemStream@@QAEXXZ ENDP			; COutMemStream::Free
_TEXT	ENDS
PUBLIC	?Reset@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Reset
PUBLIC	?Init@COutMemStream@@QAEXXZ			; COutMemStream::Init
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Init@COutMemStream@@QAEXXZ PROC			; COutMemStream::Init
; _this$ = ecx
; Line 14
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 15
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	?Reset@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ; NWindows::NSynchronization::CBaseEvent::Reset
; Line 16
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+21], 0
; Line 17
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+20], 0
; Line 18
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Free@COutMemStream@@QAEXXZ		; COutMemStream::Free
; Line 19
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
; Line 21
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Init@COutMemStream@@QAEXXZ ENDP			; COutMemStream::Init
_TEXT	ENDS
EXTRN	_Event_Reset@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Reset@CBaseEvent@NSynchronization@NWindows@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Reset@CBaseEvent@NSynchronization@NWindows@@QAEIXZ PROC ; NWindows::NSynchronization::CBaseEvent::Reset, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\synchronization.h
; Line 46
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	_Event_Reset@4
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Reset@CBaseEvent@NSynchronization@NWindows@@QAEIXZ ENDP ; NWindows::NSynchronization::CBaseEvent::Reset
_TEXT	ENDS
PUBLIC	?DetachData@COutMemStream@@QAEXAAUCMemLockBlocks@@@Z ; COutMemStream::DetachData
EXTRN	?Detach@CMemLockBlocks@@QAEXAAU1@PAVCMemBlockManagerMt@@@Z:PROC ; CMemLockBlocks::Detach
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_blocks$ = 8						; size = 4
?DetachData@COutMemStream@@QAEXAAUCMemLockBlocks@@@Z PROC ; COutMemStream::DetachData
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\outmemstream.cpp
; Line 24
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 25
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _blocks$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?Detach@CMemLockBlocks@@QAEXAAU1@PAVCMemBlockManagerMt@@@Z ; CMemLockBlocks::Detach
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Free@COutMemStream@@QAEXXZ		; COutMemStream::Free
; Line 27
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?DetachData@COutMemStream@@QAEXAAUCMemLockBlocks@@@Z ENDP ; COutMemStream::DetachData
_TEXT	ENDS
PUBLIC	?GetBlockSize@CMemBlockManager@@QBEIXZ		; CMemBlockManager::GetBlockSize
PUBLIC	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
PUBLIC	?WriteToRealStream@COutMemStream@@QAEJXZ	; COutMemStream::WriteToRealStream
EXTRN	?WriteToStream@CMemBlocks@@QBEJIPAUISequentialOutStream@@@Z:PROC ; CMemBlocks::WriteToStream
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
___result_$66905 = -8					; size = 4
_this$ = -4						; size = 4
?WriteToRealStream@COutMemStream@@QAEJXZ PROC		; COutMemStream::WriteToRealStream
; _this$ = ecx
; Line 31
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 32
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	call	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?GetBlockSize@CMemBlockManager@@QBEIXZ	; CMemBlockManager::GetBlockSize
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?WriteToStream@CMemBlocks@@QBEJIPAUISequentialOutStream@@@Z ; CMemBlocks::WriteToStream
	mov	DWORD PTR ___result_$66905[ebp], eax
	cmp	DWORD PTR ___result_$66905[ebp], 0
	je	SHORT $LN1@WriteToRea
	mov	eax, DWORD PTR ___result_$66905[ebp]
	jmp	SHORT $LN2@WriteToRea
$LN1@WriteToRea:
; Line 33
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?Free@CMemLockBlocks@@QAEXPAVCMemBlockManagerMt@@@Z ; CMemLockBlocks::Free
; Line 34
	xor	eax, eax
$LN2@WriteToRea:
; Line 35
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?WriteToRealStream@COutMemStream@@QAEJXZ ENDP		; COutMemStream::WriteToRealStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetBlockSize@CMemBlockManager@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetBlockSize@CMemBlockManager@@QBEIXZ PROC		; CMemBlockManager::GetBlockSize, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\memblocks.h
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetBlockSize@CMemBlockManager@@QBEIXZ ENDP		; CMemBlockManager::GetBlockSize
_TEXT	ENDS
PUBLIC	?Back@?$CRecordVector@PAX@@QAEAAPAXXZ		; CRecordVector<void *>::Back
PUBLIC	?Add@?$CRecordVector@PAX@@QAEIQAX@Z		; CRecordVector<void *>::Add
PUBLIC	??BCSemaphore@NSynchronization@NWindows@@QAEPAXXZ ; NWindows::NSynchronization::CSemaphore::operator void *
PUBLIC	??BCBaseEvent@NSynchronization@NWindows@@QAEPAXXZ ; NWindows::NSynchronization::CBaseEvent::operator void *
PUBLIC	?GetPos@COutMemStream@@ABE_KXZ			; COutMemStream::GetPos
PUBLIC	??A?$CRecordVector@PAX@@QAEAAPAXI@Z		; CRecordVector<void *>::operator[]
PUBLIC	?Size@?$CRecordVector@PAX@@QBEIXZ		; CRecordVector<void *>::Size
PUBLIC	??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator->
PUBLIC	?Write@COutMemStream@@UAGJPBXIPAI@Z		; COutMemStream::Write
EXTRN	?AllocateBlock@CMemBlockManagerMt@@QAEPAXXZ:PROC ; CMemBlockManagerMt::AllocateBlock
EXTRN	__imp__WaitForMultipleObjects@16:PROC
EXTRN	_memcpy:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv221 = -76						; size = 4
tv211 = -72						; size = 4
tv304 = -68						; size = 4
tv71 = -64						; size = 4
_res$66947 = -60					; size = 4
_processedSize2$66946 = -52				; size = 4
___result_$66943 = -44					; size = 4
_waitResult$66934 = -40					; size = 4
_events$66933 = -32					; size = 12
_pos64$66930 = -16					; size = 8
_curSize$66923 = -8					; size = 4
_p$66921 = -4						; size = 4
_this$ = 8						; size = 4
_data$ = 12						; size = 4
_size$ = 16						; size = 4
_processedSize$ = 20					; size = 4
?Write@COutMemStream@@UAGJPBXIPAI@Z PROC		; COutMemStream::Write
; File c:\workspace\7z1505-src\cpp\7zip\common\outmemstream.cpp
; Line 38
	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-76]
	mov	ecx, 19					; 00000013H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 39
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+20]
	test	ecx, ecx
	je	SHORT $LN18@Write
; Line 40
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	call	??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator->
	mov	DWORD PTR tv71[ebp], eax
	mov	esi, esp
	mov	edx, DWORD PTR _processedSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv71[ebp]
	push	edx
	mov	eax, DWORD PTR tv71[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN19@Write
$LN18@Write:
; Line 41
	cmp	DWORD PTR _processedSize$[ebp], 0
	je	SHORT $LN16@Write
; Line 42
	mov	eax, DWORD PTR _processedSize$[ebp]
	mov	DWORD PTR [eax], 0
$LN16@Write:
; Line 43
	cmp	DWORD PTR _size$[ebp], 0
	je	$LN15@Write
; Line 45
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+12], eax
	jae	$LN14@Write
; Line 47
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+16]
	mov	DWORD PTR _p$66921[ebp], ecx
; Line 48
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?GetBlockSize@CMemBlockManager@@QBEIXZ	; CMemBlockManager::GetBlockSize
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx+16]
	mov	DWORD PTR _curSize$66923[ebp], eax
; Line 49
	mov	edx, DWORD PTR _size$[ebp]
	cmp	edx, DWORD PTR _curSize$66923[ebp]
	jae	SHORT $LN13@Write
; Line 50
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR _curSize$66923[ebp], eax
$LN13@Write:
; Line 51
	mov	ecx, DWORD PTR _curSize$66923[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$66921[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 52
	cmp	DWORD PTR _processedSize$[ebp], 0
	je	SHORT $LN12@Write
; Line 53
	mov	ecx, DWORD PTR _processedSize$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, DWORD PTR _curSize$66923[ebp]
	mov	eax, DWORD PTR _processedSize$[ebp]
	mov	DWORD PTR [eax], edx
$LN12@Write:
; Line 54
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, DWORD PTR _curSize$66923[ebp]
	mov	DWORD PTR _data$[ebp], ecx
; Line 55
	mov	edx, DWORD PTR _size$[ebp]
	sub	edx, DWORD PTR _curSize$66923[ebp]
	mov	DWORD PTR _size$[ebp], edx
; Line 56
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, DWORD PTR _curSize$66923[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], ecx
; Line 58
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPos@COutMemStream@@ABE_KXZ		; COutMemStream::GetPos
	mov	DWORD PTR _pos64$66930[ebp], eax
	mov	DWORD PTR _pos64$66930[ebp+4], edx
; Line 59
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv304[ebp], eax
	mov	ecx, DWORD PTR tv304[ebp]
	mov	edx, DWORD PTR _pos64$66930[ebp+4]
	cmp	edx, DWORD PTR [ecx+60]
	jb	SHORT $LN11@Write
	ja	SHORT $LN22@Write
	mov	eax, DWORD PTR tv304[ebp]
	mov	ecx, DWORD PTR _pos64$66930[ebp]
	cmp	ecx, DWORD PTR [eax+56]
	jbe	SHORT $LN11@Write
$LN22@Write:
; Line 60
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pos64$66930[ebp]
	mov	DWORD PTR [edx+56], eax
	mov	ecx, DWORD PTR _pos64$66930[ebp+4]
	mov	DWORD PTR [edx+60], ecx
$LN11@Write:
; Line 61
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?GetBlockSize@CMemBlockManager@@QBEIXZ	; CMemBlockManager::GetBlockSize
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+16], eax
	jne	SHORT $LN10@Write
; Line 63
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 64
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0
$LN10@Write:
; Line 66
	jmp	$LN16@Write
$LN14@Write:
; Line 68
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??BCBaseEvent@NSynchronization@NWindows@@QAEPAXXZ ; NWindows::NSynchronization::CBaseEvent::operator void *
	mov	DWORD PTR _events$66933[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??BCBaseEvent@NSynchronization@NWindows@@QAEPAXXZ ; NWindows::NSynchronization::CBaseEvent::operator void *
	mov	DWORD PTR _events$66933[ebp+4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 36					; 00000024H
	call	??BCSemaphore@NSynchronization@NWindows@@QAEPAXXZ ; NWindows::NSynchronization::CSemaphore::operator void *
	mov	DWORD PTR _events$66933[ebp+8], eax
; Line 69
	mov	esi, esp
	push	-1
	push	0
	lea	ecx, DWORD PTR _events$66933[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+64]
	neg	eax
	sbb	eax, eax
	neg	eax
	add	eax, 2
	push	eax
	call	DWORD PTR __imp__WaitForMultipleObjects@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _waitResult$66934[ebp], eax
; Line 70
	mov	ecx, DWORD PTR _waitResult$66934[ebp]
	mov	DWORD PTR tv211[ebp], ecx
	cmp	DWORD PTR tv211[ebp], 0
	je	SHORT $LN7@Write
	cmp	DWORD PTR tv211[ebp], 1
	je	SHORT $LN6@Write
	cmp	DWORD PTR tv211[ebp], 2
	je	SHORT $LN3@Write
	jmp	SHORT $LN2@Write
$LN7@Write:
; Line 73
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	jmp	$LN19@Write
$LN6@Write:
; Line 76
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+20], 1
; Line 77
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteToRealStream@COutMemStream@@QAEJXZ ; COutMemStream::WriteToRealStream
	mov	DWORD PTR ___result_$66943[ebp], eax
	cmp	DWORD PTR ___result_$66943[ebp], 0
	je	SHORT $LN5@Write
	mov	eax, DWORD PTR ___result_$66943[ebp]
	jmp	$LN19@Write
$LN5@Write:
; Line 79
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	call	??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator->
	mov	DWORD PTR tv221[ebp], eax
	mov	esi, esp
	lea	ecx, DWORD PTR _processedSize2$66946[ebp]
	push	ecx
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv221[ebp]
	push	ecx
	mov	edx, DWORD PTR tv221[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _res$66947[ebp], eax
; Line 80
	cmp	DWORD PTR _processedSize$[ebp], 0
	je	SHORT $LN4@Write
; Line 81
	mov	edx, DWORD PTR _processedSize$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, DWORD PTR _processedSize2$66946[ebp]
	mov	ecx, DWORD PTR _processedSize$[ebp]
	mov	DWORD PTR [ecx], eax
$LN4@Write:
; Line 82
	mov	eax, DWORD PTR _res$66947[ebp]
	jmp	SHORT $LN19@Write
$LN3@Write:
; Line 94
	jmp	SHORT $LN8@Write
$LN2@Write:
; Line 96
	mov	eax, -2147467259			; 80004005H
	jmp	SHORT $LN19@Write
$LN8@Write:
; Line 98
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?AllocateBlock@CMemBlockManagerMt@@QAEPAXXZ ; CMemBlockManagerMt::AllocateBlock
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
; Line 99
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?Back@?$CRecordVector@PAX@@QAEAAPAXXZ	; CRecordVector<void *>::Back
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN1@Write
; Line 100
	mov	eax, -2147467259			; 80004005H
	jmp	SHORT $LN19@Write
$LN1@Write:
; Line 101
	jmp	$LN16@Write
$LN15@Write:
; Line 102
	xor	eax, eax
$LN19@Write:
; Line 103
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN26@Write
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 76					; 0000004cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	3
$LN26@Write:
	DD	2
	DD	$LN25@Write
$LN25@Write:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN23@Write
	DD	-52					; ffffffccH
	DD	4
	DD	$LN24@Write
$LN24@Write:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	50					; 00000032H
	DB	0
$LN23@Write:
	DB	101					; 00000065H
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
?Write@COutMemStream@@UAGJPBXIPAI@Z ENDP		; COutMemStream::Write
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??BCBaseEvent@NSynchronization@NWindows@@QAEPAXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BCBaseEvent@NSynchronization@NWindows@@QAEPAXXZ PROC	; NWindows::NSynchronization::CBaseEvent::operator void *, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\synchronization.h
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??BCBaseEvent@NSynchronization@NWindows@@QAEPAXXZ ENDP	; NWindows::NSynchronization::CBaseEvent::operator void *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??BCSemaphore@NSynchronization@NWindows@@QAEPAXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BCSemaphore@NSynchronization@NWindows@@QAEPAXXZ PROC	; NWindows::NSynchronization::CSemaphore::operator void *, COMDAT
; _this$ = ecx
; Line 133
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??BCSemaphore@NSynchronization@NWindows@@QAEPAXXZ ENDP	; NWindows::NSynchronization::CSemaphore::operator void *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetPos@COutMemStream@@ABE_KXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPos@COutMemStream@@ABE_KXZ PROC			; COutMemStream::GetPos, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\outmemstream.h
; Line 27
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?GetBlockSize@CMemBlockManager@@QBEIXZ	; CMemBlockManager::GetBlockSize
	mov	edx, eax
	mov	eax, esi
	mul	edx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+16]
	xor	esi, esi
	add	eax, ecx
	adc	edx, esi
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPos@COutMemStream@@ABE_KXZ ENDP			; COutMemStream::GetPos
_TEXT	ENDS
PUBLIC	??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator->
PUBLIC	??7?$CMyComPtr@UIOutStream@@@@QBE_NXZ		; CMyComPtr<IOutStream>::operator!
PUBLIC	?Seek@COutMemStream@@UAGJ_JIPA_K@Z		; COutMemStream::Seek
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv76 = -4						; size = 4
_this$ = 8						; size = 4
_offset$ = 12						; size = 8
_seekOrigin$ = 20					; size = 4
_newPosition$ = 24					; size = 4
?Seek@COutMemStream@@UAGJ_JIPA_K@Z PROC			; COutMemStream::Seek
; File c:\workspace\7z1505-src\cpp\7zip\common\outmemstream.cpp
; Line 106
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 107
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+20]
	test	ecx, ecx
	je	SHORT $LN9@Seek
; Line 109
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	call	??7?$CMyComPtr@UIOutStream@@@@QBE_NXZ	; CMyComPtr<IOutStream>::operator!
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN8@Seek
; Line 110
	mov	eax, -2147467259			; 80004005H
	jmp	$LN10@Seek
$LN8@Seek:
; Line 111
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	call	??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator->
	mov	DWORD PTR tv76[ebp], eax
	mov	esi, esp
	mov	eax, DWORD PTR _newPosition$[ebp]
	push	eax
	mov	ecx, DWORD PTR _seekOrigin$[ebp]
	push	ecx
	mov	edx, DWORD PTR _offset$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv76[ebp]
	push	ecx
	mov	edx, DWORD PTR tv76[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN10@Seek
$LN9@Seek:
; Line 113
	cmp	DWORD PTR _seekOrigin$[ebp], 1
	jne	SHORT $LN7@Seek
; Line 115
	mov	edx, DWORD PTR _offset$[ebp]
	or	edx, DWORD PTR _offset$[ebp+4]
	je	SHORT $LN6@Seek
; Line 116
	mov	eax, -2147467263			; 80004001H
	jmp	SHORT $LN10@Seek
$LN6@Seek:
; Line 117
	jmp	SHORT $LN5@Seek
$LN7@Seek:
; Line 118
	cmp	DWORD PTR _seekOrigin$[ebp], 0
	jne	SHORT $LN4@Seek
; Line 120
	mov	eax, DWORD PTR _offset$[ebp]
	or	eax, DWORD PTR _offset$[ebp+4]
	je	SHORT $LN3@Seek
; Line 121
	mov	eax, -2147467263			; 80004001H
	jmp	SHORT $LN10@Seek
$LN3@Seek:
; Line 122
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
; Line 123
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0
; Line 125
	jmp	SHORT $LN5@Seek
$LN4@Seek:
; Line 126
	mov	eax, -2147467263			; 80004001H
	jmp	SHORT $LN10@Seek
$LN5@Seek:
; Line 127
	cmp	DWORD PTR _newPosition$[ebp], 0
	je	SHORT $LN1@Seek
; Line 128
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPos@COutMemStream@@ABE_KXZ		; COutMemStream::GetPos
	mov	ecx, DWORD PTR _newPosition$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
$LN1@Seek:
; Line 129
	xor	eax, eax
$LN10@Seek:
; Line 130
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?Seek@COutMemStream@@UAGJ_JIPA_K@Z ENDP			; COutMemStream::Seek
_TEXT	ENDS
PUBLIC	?SetSize@COutMemStream@@UAGJ_K@Z		; COutMemStream::SetSize
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv76 = -4						; size = 4
_this$ = 8						; size = 4
_newSize$ = 12						; size = 8
?SetSize@COutMemStream@@UAGJ_K@Z PROC			; COutMemStream::SetSize
; Line 133
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 134
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+20]
	test	ecx, ecx
	je	SHORT $LN2@SetSize
; Line 136
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	call	??7?$CMyComPtr@UIOutStream@@@@QBE_NXZ	; CMyComPtr<IOutStream>::operator!
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@SetSize
; Line 137
	mov	eax, -2147467259			; 80004005H
	jmp	SHORT $LN3@SetSize
$LN1@SetSize:
; Line 138
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	call	??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator->
	mov	DWORD PTR tv76[ebp], eax
	mov	esi, esp
	mov	eax, DWORD PTR _newSize$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _newSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv76[ebp]
	push	edx
	mov	eax, DWORD PTR tv76[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN3@SetSize
$LN2@SetSize:
; Line 140
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newSize$[ebp]
	mov	DWORD PTR [eax+56], ecx
	mov	edx, DWORD PTR _newSize$[ebp+4]
	mov	DWORD PTR [eax+60], edx
; Line 141
	xor	eax, eax
$LN3@SetSize:
; Line 142
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetSize@COutMemStream@@UAGJ_K@Z ENDP			; COutMemStream::SetSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@PAX@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@PAX@@QBEIXZ PROC			; CRecordVector<void *>::Size, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@PAX@@QBEIXZ ENDP			; CRecordVector<void *>::Size
_TEXT	ENDS
PUBLIC	?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ	; CRecordVector<void *>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@PAX@@QAEIQAX@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?Add@?$CRecordVector@PAX@@QAEIQAX@Z PROC		; CRecordVector<void *>::Add, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ; CRecordVector<void *>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 201
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv72[ebp]
; Line 202
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CRecordVector@PAX@@QAEIQAX@Z ENDP		; CRecordVector<void *>::Add
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@PAX@@QAEAAPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@PAX@@QAEAAPAXI@Z PROC		; CRecordVector<void *>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@PAX@@QAEAAPAXI@Z ENDP		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Back@?$CRecordVector@PAX@@QAEAAPAXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Back@?$CRecordVector@PAX@@QAEAAPAXXZ PROC		; CRecordVector<void *>::Back, COMDAT
; _this$ = ecx
; Line 232
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	eax, DWORD PTR [eax+ecx*4-4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Back@?$CRecordVector@PAX@@QAEAAPAXXZ ENDP		; CRecordVector<void *>::Back
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ PROC ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ENDP ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ PROC ; CMyComPtr<ISequentialOutStream>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ENDP ; CMyComPtr<ISequentialOutStream>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ PROC	; CMyComPtr<IOutStream>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ENDP	; CMyComPtr<IOutStream>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??7?$CMyComPtr@UIOutStream@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??7?$CMyComPtr@UIOutStream@@@@QBE_NXZ PROC		; CMyComPtr<IOutStream>::operator!, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
??7?$CMyComPtr@UIOutStream@@@@QBE_NXZ ENDP		; CMyComPtr<IOutStream>::operator!
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??2@YAPAXI@Z:PROC				; operator new
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ
_TEXT	SEGMENT
$T67230 = -20						; size = 4
$T67229 = -16						; size = 4
_p$67034 = -12						; size = 4
_newCapacity$67033 = -8					; size = 4
_this$ = -4						; size = 4
?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ PROC	; CRecordVector<void *>::ReserveOnePosition, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@ReserveOne
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$67033[ebp], ecx
; Line 23
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$67033[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T67229[ebp], eax
	mov	eax, DWORD PTR $T67229[ebp]
	mov	DWORD PTR _p$67034[ebp], eax
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@ReserveOne
; Line 25
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$67034[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne:
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T67230[ebp], edx
	mov	eax, DWORD PTR $T67230[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$67034[ebp]
	mov	DWORD PTR [ecx], edx
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$67033[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ReserveOne:
; Line 30
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ENDP	; CRecordVector<void *>::ReserveOnePosition
_TEXT	ENDS
END
