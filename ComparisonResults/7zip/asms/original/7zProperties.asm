; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\CPP\7zip\Archive\7z\7zProperties.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
_kPropMap DD	011H
	DD	00H
	DD	03H
	DW	08H
	ORG $+2
	DD	09H
	DD	00H
	DD	07H
	DW	015H
	ORG $+2
	DD	06H
	DD	00H
	DD	08H
	DW	015H
	ORG $+2
	DD	012H
	DD	00H
	DD	0aH
	DW	040H
	ORG $+2
	DD	014H
	DD	00H
	DD	0cH
	DW	040H
	ORG $+2
	DD	013H
	DD	00H
	DD	0bH
	DW	040H
	ORG $+2
	DD	015H
	DD	00H
	DD	09H
	DW	013H
	ORG $+2
	DD	018H
	DD	00H
	DD	01dH
	DW	015H
	ORG $+2
	DD	0aH
	DD	00H
	DD	013H
	DW	013H
	ORG $+2
	DD	010H
	DD	00H
	DD	015H
	DW	0bH
	ORG $+2
	DD	061H
	DD	00H
	DD	0fH
	DW	0bH
	ORG $+2
	DD	062H
	DD	00H
	DD	016H
	DW	08H
	ORG $+2
	DD	063H
	DD	00H
	DD	01bH
	DW	013H
	ORG $+2
CONST	ENDS
PUBLIC	??1?$CRecordVector@_K@@QAE@XZ			; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
PUBLIC	?Add@?$CRecordVector@_K@@QAEI_K@Z		; CRecordVector<unsigned __int64>::Add
PUBLIC	??Y?$CRecordVector@_K@@QAEAAV0@ABV0@@Z		; CRecordVector<unsigned __int64>::operator+=
PUBLIC	??0?$CRecordVector@_K@@QAE@ABV0@@Z		; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>
PUBLIC	?Clear@?$CRecordVector@_K@@QAEXXZ		; CRecordVector<unsigned __int64>::Clear
PUBLIC	?FillPopIDs@CHandler@N7z@NArchive@@AAEXXZ	; NArchive::N7z::CHandler::FillPopIDs
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
xdata$x	SEGMENT
__unwindtable$?FillPopIDs@CHandler@N7z@NArchive@@AAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FillPopIDs@CHandler@N7z@NArchive@@AAEXXZ$0
__ehfuncinfo$?FillPopIDs@CHandler@N7z@NArchive@@AAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?FillPopIDs@CHandler@N7z@NArchive@@AAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zproperties.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_fileInfoPopIDs$ = -32					; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?FillPopIDs@CHandler@N7z@NArchive@@AAEXXZ PROC		; NArchive::N7z::CHandler::FillPopIDs
; _this$ = ecx
; Line 89
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?FillPopIDs@CHandler@N7z@NArchive@@AAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 90
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 484				; 000001e4H
	call	?Clear@?$CRecordVector@_K@@QAEXXZ	; CRecordVector<unsigned __int64>::Clear
; Line 99
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 408				; 00000198H
	push	eax
	lea	ecx, DWORD PTR _fileInfoPopIDs$[ebp]
	call	??0?$CRecordVector@_K@@QAE@ABV0@@Z	; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 101
	push	14					; 0000000eH
	lea	ecx, DWORD PTR _fileInfoPopIDs$[ebp]
	push	ecx
	call	?RemoveOneItem@N7z@NArchive@@YGXAAV?$CRecordVector@_K@@I@Z ; NArchive::N7z::RemoveOneItem
; Line 102
	push	15					; 0000000fH
	lea	edx, DWORD PTR _fileInfoPopIDs$[ebp]
	push	edx
	call	?RemoveOneItem@N7z@NArchive@@YGXAAV?$CRecordVector@_K@@I@Z ; NArchive::N7z::RemoveOneItem
; Line 108
	push	17					; 00000011H
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 484				; 000001e4H
	push	eax
	lea	ecx, DWORD PTR _fileInfoPopIDs$[ebp]
	push	ecx
	call	?CopyOneItem@N7z@NArchive@@YGXAAV?$CRecordVector@_K@@0I@Z ; NArchive::N7z::CopyOneItem
; Line 109
	push	16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 484				; 000001e4H
	push	edx
	lea	eax, DWORD PTR _fileInfoPopIDs$[ebp]
	push	eax
	call	?CopyOneItem@N7z@NArchive@@YGXAAV?$CRecordVector@_K@@0I@Z ; NArchive::N7z::CopyOneItem
; Line 110
	push	9
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 484				; 000001e4H
	push	ecx
	lea	edx, DWORD PTR _fileInfoPopIDs$[ebp]
	push	edx
	call	?CopyOneItem@N7z@NArchive@@YGXAAV?$CRecordVector@_K@@0I@Z ; NArchive::N7z::CopyOneItem
; Line 111
	push	6
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 484				; 000001e4H
	push	eax
	lea	ecx, DWORD PTR _fileInfoPopIDs$[ebp]
	push	ecx
	call	?CopyOneItem@N7z@NArchive@@YGXAAV?$CRecordVector@_K@@0I@Z ; NArchive::N7z::CopyOneItem
; Line 112
	push	18					; 00000012H
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 484				; 000001e4H
	push	edx
	lea	eax, DWORD PTR _fileInfoPopIDs$[ebp]
	push	eax
	call	?CopyOneItem@N7z@NArchive@@YGXAAV?$CRecordVector@_K@@0I@Z ; NArchive::N7z::CopyOneItem
; Line 113
	push	20					; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 484				; 000001e4H
	push	ecx
	lea	edx, DWORD PTR _fileInfoPopIDs$[ebp]
	push	edx
	call	?CopyOneItem@N7z@NArchive@@YGXAAV?$CRecordVector@_K@@0I@Z ; NArchive::N7z::CopyOneItem
; Line 114
	push	19					; 00000013H
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 484				; 000001e4H
	push	eax
	lea	ecx, DWORD PTR _fileInfoPopIDs$[ebp]
	push	ecx
	call	?CopyOneItem@N7z@NArchive@@YGXAAV?$CRecordVector@_K@@0I@Z ; NArchive::N7z::CopyOneItem
; Line 115
	push	21					; 00000015H
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 484				; 000001e4H
	push	edx
	lea	eax, DWORD PTR _fileInfoPopIDs$[ebp]
	push	eax
	call	?CopyOneItem@N7z@NArchive@@YGXAAV?$CRecordVector@_K@@0I@Z ; NArchive::N7z::CopyOneItem
; Line 116
	push	10					; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 484				; 000001e4H
	push	ecx
	lea	edx, DWORD PTR _fileInfoPopIDs$[ebp]
	push	edx
	call	?CopyOneItem@N7z@NArchive@@YGXAAV?$CRecordVector@_K@@0I@Z ; NArchive::N7z::CopyOneItem
; Line 117
	push	22					; 00000016H
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 484				; 000001e4H
	push	eax
	lea	ecx, DWORD PTR _fileInfoPopIDs$[ebp]
	push	ecx
	call	?CopyOneItem@N7z@NArchive@@YGXAAV?$CRecordVector@_K@@0I@Z ; NArchive::N7z::CopyOneItem
; Line 119
	lea	edx, DWORD PTR _fileInfoPopIDs$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 484				; 000001e4H
	call	??Y?$CRecordVector@_K@@QAEAAV0@ABV0@@Z	; CRecordVector<unsigned __int64>::operator+=
; Line 122
	push	0
	push	97					; 00000061H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 484				; 000001e4H
	call	?Add@?$CRecordVector@_K@@QAEI_K@Z	; CRecordVector<unsigned __int64>::Add
; Line 123
	push	0
	push	98					; 00000062H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 484				; 000001e4H
	call	?Add@?$CRecordVector@_K@@QAEI_K@Z	; CRecordVector<unsigned __int64>::Add
; Line 124
	push	0
	push	99					; 00000063H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 484				; 000001e4H
	call	?Add@?$CRecordVector@_K@@QAEI_K@Z	; CRecordVector<unsigned __int64>::Add
; Line 136
	push	20					; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 484				; 000001e4H
	push	eax
	call	?InsertToHead@N7z@NArchive@@YGXAAV?$CRecordVector@_K@@I@Z ; NArchive::N7z::InsertToHead
; Line 137
	push	6
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 484				; 000001e4H
	push	ecx
	call	?InsertToHead@N7z@NArchive@@YGXAAV?$CRecordVector@_K@@I@Z ; NArchive::N7z::InsertToHead
; Line 138
	push	9
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 484				; 000001e4H
	push	edx
	call	?InsertToHead@N7z@NArchive@@YGXAAV?$CRecordVector@_K@@I@Z ; NArchive::N7z::InsertToHead
; Line 139
	push	17					; 00000011H
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 484				; 000001e4H
	push	eax
	call	?InsertToHead@N7z@NArchive@@YGXAAV?$CRecordVector@_K@@I@Z ; NArchive::N7z::InsertToHead
; Line 141
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _fileInfoPopIDs$[ebp]
	call	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@FillPopIDs
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@FillPopIDs:
	DD	1
	DD	$LN6@FillPopIDs
$LN6@FillPopIDs:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN4@FillPopIDs
$LN4@FillPopIDs:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	73					; 00000049H
	DB	68					; 00000044H
	DB	115					; 00000073H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?FillPopIDs@CHandler@N7z@NArchive@@AAEXXZ$0:
	lea	ecx, DWORD PTR _fileInfoPopIDs$[ebp]
	jmp	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
__ehhandler$?FillPopIDs@CHandler@N7z@NArchive@@AAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?FillPopIDs@CHandler@N7z@NArchive@@AAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?FillPopIDs@CHandler@N7z@NArchive@@AAEXXZ ENDP		; NArchive::N7z::CHandler::FillPopIDs
PUBLIC	?Delete@?$CRecordVector@_K@@QAEXI@Z		; CRecordVector<unsigned __int64>::Delete
PUBLIC	??A?$CRecordVector@_K@@QAEAA_KI@Z		; CRecordVector<unsigned __int64>::operator[]
PUBLIC	?Size@?$CRecordVector@_K@@QBEIXZ		; CRecordVector<unsigned __int64>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv85 = -16						; size = 8
tv84 = -8						; size = 4
_i$70761 = -4						; size = 4
_src$ = 8						; size = 4
_dest$ = 12						; size = 4
_item$ = 16						; size = 4
?CopyOneItem@N7z@NArchive@@YGXAAV?$CRecordVector@_K@@0I@Z PROC ; NArchive::N7z::CopyOneItem
; Line 55
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 56
	mov	DWORD PTR _i$70761[ebp], 0
	jmp	SHORT $LN4@CopyOneIte
$LN3@CopyOneIte:
	mov	eax, DWORD PTR _i$70761[ebp]
	add	eax, 1
	mov	DWORD PTR _i$70761[ebp], eax
$LN4@CopyOneIte:
	mov	ecx, DWORD PTR _src$[ebp]
	call	?Size@?$CRecordVector@_K@@QBEIXZ	; CRecordVector<unsigned __int64>::Size
	cmp	DWORD PTR _i$70761[ebp], eax
	jae	SHORT $LN5@CopyOneIte
; Line 57
	mov	ecx, DWORD PTR _i$70761[ebp]
	push	ecx
	mov	ecx, DWORD PTR _src$[ebp]
	call	??A?$CRecordVector@_K@@QAEAA_KI@Z	; CRecordVector<unsigned __int64>::operator[]
	mov	edx, DWORD PTR _item$[ebp]
	xor	ecx, ecx
	mov	DWORD PTR tv84[ebp], eax
	mov	DWORD PTR tv85[ebp], edx
	mov	DWORD PTR tv85[ebp+4], ecx
	mov	edx, DWORD PTR tv84[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR tv85[ebp]
	jne	SHORT $LN1@CopyOneIte
	mov	ecx, DWORD PTR tv84[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR tv85[ebp+4]
	jne	SHORT $LN1@CopyOneIte
; Line 59
	mov	eax, DWORD PTR _item$[ebp]
	xor	ecx, ecx
	push	ecx
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	call	?Add@?$CRecordVector@_K@@QAEI_K@Z	; CRecordVector<unsigned __int64>::Add
; Line 60
	mov	edx, DWORD PTR _i$70761[ebp]
	push	edx
	mov	ecx, DWORD PTR _src$[ebp]
	call	?Delete@?$CRecordVector@_K@@QAEXI@Z	; CRecordVector<unsigned __int64>::Delete
; Line 61
	jmp	SHORT $LN5@CopyOneIte
$LN1@CopyOneIte:
; Line 63
	jmp	SHORT $LN3@CopyOneIte
$LN5@CopyOneIte:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?CopyOneItem@N7z@NArchive@@YGXAAV?$CRecordVector@_K@@0I@Z ENDP ; NArchive::N7z::CopyOneItem
; Function compile flags: /Odtp /RTCsu
tv82 = -16						; size = 8
tv81 = -8						; size = 4
_i$70771 = -4						; size = 4
_src$ = 8						; size = 4
_item$ = 12						; size = 4
?RemoveOneItem@N7z@NArchive@@YGXAAV?$CRecordVector@_K@@I@Z PROC ; NArchive::N7z::RemoveOneItem
; Line 66
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 67
	mov	DWORD PTR _i$70771[ebp], 0
	jmp	SHORT $LN4@RemoveOneI
$LN3@RemoveOneI:
	mov	eax, DWORD PTR _i$70771[ebp]
	add	eax, 1
	mov	DWORD PTR _i$70771[ebp], eax
$LN4@RemoveOneI:
	mov	ecx, DWORD PTR _src$[ebp]
	call	?Size@?$CRecordVector@_K@@QBEIXZ	; CRecordVector<unsigned __int64>::Size
	cmp	DWORD PTR _i$70771[ebp], eax
	jae	SHORT $LN5@RemoveOneI
; Line 68
	mov	ecx, DWORD PTR _i$70771[ebp]
	push	ecx
	mov	ecx, DWORD PTR _src$[ebp]
	call	??A?$CRecordVector@_K@@QAEAA_KI@Z	; CRecordVector<unsigned __int64>::operator[]
	mov	edx, DWORD PTR _item$[ebp]
	xor	ecx, ecx
	mov	DWORD PTR tv81[ebp], eax
	mov	DWORD PTR tv82[ebp], edx
	mov	DWORD PTR tv82[ebp+4], ecx
	mov	edx, DWORD PTR tv81[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR tv82[ebp]
	jne	SHORT $LN1@RemoveOneI
	mov	ecx, DWORD PTR tv81[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR tv82[ebp+4]
	jne	SHORT $LN1@RemoveOneI
; Line 70
	mov	eax, DWORD PTR _i$70771[ebp]
	push	eax
	mov	ecx, DWORD PTR _src$[ebp]
	call	?Delete@?$CRecordVector@_K@@QAEXI@Z	; CRecordVector<unsigned __int64>::Delete
; Line 71
	jmp	SHORT $LN5@RemoveOneI
$LN1@RemoveOneI:
; Line 73
	jmp	SHORT $LN3@RemoveOneI
$LN5@RemoveOneI:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?RemoveOneItem@N7z@NArchive@@YGXAAV?$CRecordVector@_K@@I@Z ENDP ; NArchive::N7z::RemoveOneItem
_TEXT	ENDS
PUBLIC	?Insert@?$CRecordVector@_K@@QAEXI_K@Z		; CRecordVector<unsigned __int64>::Insert
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv86 = -16						; size = 8
tv85 = -8						; size = 4
_i$70781 = -4						; size = 4
_dest$ = 8						; size = 4
_item$ = 12						; size = 4
?InsertToHead@N7z@NArchive@@YGXAAV?$CRecordVector@_K@@I@Z PROC ; NArchive::N7z::InsertToHead
; Line 76
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 77
	mov	DWORD PTR _i$70781[ebp], 0
	jmp	SHORT $LN4@InsertToHe
$LN3@InsertToHe:
	mov	eax, DWORD PTR _i$70781[ebp]
	add	eax, 1
	mov	DWORD PTR _i$70781[ebp], eax
$LN4@InsertToHe:
	mov	ecx, DWORD PTR _dest$[ebp]
	call	?Size@?$CRecordVector@_K@@QBEIXZ	; CRecordVector<unsigned __int64>::Size
	cmp	DWORD PTR _i$70781[ebp], eax
	jae	SHORT $LN2@InsertToHe
; Line 78
	mov	ecx, DWORD PTR _i$70781[ebp]
	push	ecx
	mov	ecx, DWORD PTR _dest$[ebp]
	call	??A?$CRecordVector@_K@@QAEAA_KI@Z	; CRecordVector<unsigned __int64>::operator[]
	mov	edx, DWORD PTR _item$[ebp]
	xor	ecx, ecx
	mov	DWORD PTR tv85[ebp], eax
	mov	DWORD PTR tv86[ebp], edx
	mov	DWORD PTR tv86[ebp+4], ecx
	mov	edx, DWORD PTR tv85[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR tv86[ebp]
	jne	SHORT $LN1@InsertToHe
	mov	ecx, DWORD PTR tv85[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR tv86[ebp+4]
	jne	SHORT $LN1@InsertToHe
; Line 80
	mov	eax, DWORD PTR _i$70781[ebp]
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	call	?Delete@?$CRecordVector@_K@@QAEXI@Z	; CRecordVector<unsigned __int64>::Delete
; Line 81
	jmp	SHORT $LN2@InsertToHe
$LN1@InsertToHe:
; Line 82
	jmp	SHORT $LN3@InsertToHe
$LN2@InsertToHe:
; Line 83
	mov	ecx, DWORD PTR _item$[ebp]
	xor	edx, edx
	push	edx
	push	ecx
	push	0
	mov	ecx, DWORD PTR _dest$[ebp]
	call	?Insert@?$CRecordVector@_K@@QAEXI_K@Z	; CRecordVector<unsigned __int64>::Insert
; Line 84
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?InsertToHead@N7z@NArchive@@YGXAAV?$CRecordVector@_K@@I@Z ENDP ; NArchive::N7z::InsertToHead
_TEXT	ENDS
PUBLIC	?GetNumberOfProperties@CHandler@N7z@NArchive@@UAGJPAI@Z ; NArchive::N7z::CHandler::GetNumberOfProperties
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = 8						; size = 4
_numProps$ = 12						; size = 4
?GetNumberOfProperties@CHandler@N7z@NArchive@@UAGJPAI@Z PROC ; NArchive::N7z::CHandler::GetNumberOfProperties
; Line 144
	push	ebp
	mov	ebp, esp
; Line 145
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 484				; 000001e4H
	call	?Size@?$CRecordVector@_K@@QBEIXZ	; CRecordVector<unsigned __int64>::Size
	mov	ecx, DWORD PTR _numProps$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 146
	xor	eax, eax
; Line 147
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?GetNumberOfProperties@CHandler@N7z@NArchive@@UAGJPAI@Z ENDP ; NArchive::N7z::CHandler::GetNumberOfProperties
_TEXT	ENDS
PUBLIC	?GetPropertyInfo@CHandler@N7z@NArchive@@UAGJIPAPA_WPAKPAG@Z ; NArchive::N7z::CHandler::GetPropertyInfo
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv95 = -28						; size = 8
_st$70812 = -20						; size = 4
_pr$70810 = -16						; size = 4
_i$70806 = -12						; size = 4
_id$ = -8						; size = 8
_this$ = 8						; size = 4
_index$ = 12						; size = 4
_name$ = 16						; size = 4
_propID$ = 20						; size = 4
_varType$ = 24						; size = 4
?GetPropertyInfo@CHandler@N7z@NArchive@@UAGJIPAPA_WPAKPAG@Z PROC ; NArchive::N7z::CHandler::GetPropertyInfo
; Line 150
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 151
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 484				; 000001e4H
	call	?Size@?$CRecordVector@_K@@QBEIXZ	; CRecordVector<unsigned __int64>::Size
	cmp	DWORD PTR _index$[ebp], eax
	jb	SHORT $LN5@GetPropert
; Line 152
	mov	eax, -2147024809			; 80070057H
	jmp	$LN6@GetPropert
$LN5@GetPropert:
; Line 153
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 484				; 000001e4H
	call	??A?$CRecordVector@_K@@QAEAA_KI@Z	; CRecordVector<unsigned __int64>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _id$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _id$[ebp+4], edx
; Line 154
	mov	DWORD PTR _i$70806[ebp], 0
	jmp	SHORT $LN4@GetPropert
$LN3@GetPropert:
	mov	eax, DWORD PTR _i$70806[ebp]
	add	eax, 1
	mov	DWORD PTR _i$70806[ebp], eax
$LN4@GetPropert:
	cmp	DWORD PTR _i$70806[ebp], 13		; 0000000dH
	jae	SHORT $LN2@GetPropert
; Line 156
	mov	ecx, DWORD PTR _i$70806[ebp]
	shl	ecx, 4
	add	ecx, OFFSET _kPropMap
	mov	DWORD PTR _pr$70810[ebp], ecx
; Line 157
	mov	edx, DWORD PTR _pr$70810[ebp]
	mov	eax, DWORD PTR [edx]
	xor	ecx, ecx
	mov	DWORD PTR tv95[ebp], eax
	mov	DWORD PTR tv95[ebp+4], ecx
	mov	edx, DWORD PTR tv95[ebp]
	cmp	edx, DWORD PTR _id$[ebp]
	jne	SHORT $LN1@GetPropert
	mov	eax, DWORD PTR tv95[ebp+4]
	cmp	eax, DWORD PTR _id$[ebp+4]
	jne	SHORT $LN1@GetPropert
; Line 159
	mov	ecx, DWORD PTR _pr$70810[ebp]
	add	ecx, 4
	mov	DWORD PTR _st$70812[ebp], ecx
; Line 160
	mov	edx, DWORD PTR _propID$[ebp]
	mov	eax, DWORD PTR _st$70812[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx], ecx
; Line 161
	mov	edx, DWORD PTR _varType$[ebp]
	mov	eax, DWORD PTR _st$70812[ebp]
	mov	cx, WORD PTR [eax+8]
	mov	WORD PTR [edx], cx
; Line 167
	mov	edx, DWORD PTR _name$[ebp]
	mov	DWORD PTR [edx], 0
; Line 168
	xor	eax, eax
	jmp	SHORT $LN6@GetPropert
$LN1@GetPropert:
; Line 170
	jmp	SHORT $LN3@GetPropert
$LN2@GetPropert:
; Line 171
	mov	eax, -2147024809			; 80070057H
$LN6@GetPropert:
; Line 172
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?GetPropertyInfo@CHandler@N7z@NArchive@@UAGJIPAPA_WPAKPAG@Z ENDP ; NArchive::N7z::CHandler::GetPropertyInfo
_TEXT	ENDS
EXTRN	_memcpy:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CRecordVector@_K@@QAE@ABV0@@Z
_TEXT	SEGMENT
$T71308 = -12						; size = 4
_size$ = -8						; size = 4
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??0?$CRecordVector@_K@@QAE@ABV0@@Z PROC			; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 37
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
; Line 38
	mov	ecx, DWORD PTR _v$[ebp]
	call	?Size@?$CRecordVector@_K@@QBEIXZ	; CRecordVector<unsigned __int64>::Size
	mov	DWORD PTR _size$[ebp], eax
; Line 39
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN2@CRecordVec
; Line 41
	xor	ecx, ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, 8
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T71308[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T71308[ebp]
	mov	DWORD PTR [eax], ecx
; Line 42
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 43
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx+8], edx
; Line 44
	mov	eax, DWORD PTR _size$[ebp]
	shl	eax, 3
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN2@CRecordVec:
; Line 46
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CRecordVector@_K@@QAE@ABV0@@Z ENDP			; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@_K@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@_K@@QBEIXZ PROC			; CRecordVector<unsigned __int64>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@_K@@QBEIXZ ENDP			; CRecordVector<unsigned __int64>::Size
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$CRecordVector@_K@@QAE@XZ
_TEXT	SEGMENT
$T71313 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@_K@@QAE@XZ PROC			; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T71313[ebp], ecx
	mov	edx, DWORD PTR $T71313[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@_K@@QAE@XZ ENDP			; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Clear@?$CRecordVector@_K@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$CRecordVector@_K@@QAEXXZ PROC			; CRecordVector<unsigned __int64>::Clear, COMDAT
; _this$ = ecx
; Line 131
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CRecordVector@_K@@QAEXXZ ENDP			; CRecordVector<unsigned __int64>::Clear
_TEXT	ENDS
PUBLIC	?MoveItems@?$CRecordVector@_K@@AAEXII@Z		; CRecordVector<unsigned __int64>::MoveItems
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Delete@?$CRecordVector@_K@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?Delete@?$CRecordVector@_K@@QAEXI@Z PROC		; CRecordVector<unsigned __int64>::Delete, COMDAT
; _this$ = ecx
; Line 151
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 152
	mov	eax, DWORD PTR _index$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MoveItems@?$CRecordVector@_K@@AAEXII@Z	; CRecordVector<unsigned __int64>::MoveItems
; Line 153
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	sub	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 154
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Delete@?$CRecordVector@_K@@QAEXI@Z ENDP		; CRecordVector<unsigned __int64>::Delete
_TEXT	ENDS
PUBLIC	?Reserve@?$CRecordVector@_K@@QAEXI@Z		; CRecordVector<unsigned __int64>::Reserve
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??Y?$CRecordVector@_K@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_size$ = -8						; size = 4
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??Y?$CRecordVector@_K@@QAEAAV0@ABV0@@Z PROC		; CRecordVector<unsigned __int64>::operator+=, COMDAT
; _this$ = ecx
; Line 188
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 189
	mov	ecx, DWORD PTR _v$[ebp]
	call	?Size@?$CRecordVector@_K@@QBEIXZ	; CRecordVector<unsigned __int64>::Size
	mov	DWORD PTR _size$[ebp], eax
; Line 190
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reserve@?$CRecordVector@_K@@QAEXI@Z	; CRecordVector<unsigned __int64>::Reserve
; Line 191
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN1@operator
; Line 192
	mov	edx, DWORD PTR _size$[ebp]
	shl	edx, 3
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	lea	eax, DWORD PTR [edx+eax*8]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@operator:
; Line 193
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
; Line 194
	mov	eax, DWORD PTR _this$[ebp]
; Line 195
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$CRecordVector@_K@@QAEAAV0@ABV0@@Z ENDP		; CRecordVector<unsigned __int64>::operator+=
_TEXT	ENDS
PUBLIC	?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ	; CRecordVector<unsigned __int64>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@_K@@QAEI_K@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 8
?Add@?$CRecordVector@_K@@QAEI_K@Z PROC			; CRecordVector<unsigned __int64>::Add, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ ; CRecordVector<unsigned __int64>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*8], edx
	mov	edx, DWORD PTR _item$[ebp+4]
	mov	DWORD PTR [eax+ecx*8+4], edx
; Line 201
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv72[ebp]
; Line 202
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Add@?$CRecordVector@_K@@QAEI_K@Z ENDP			; CRecordVector<unsigned __int64>::Add
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Insert@?$CRecordVector@_K@@QAEXI_K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
_item$ = 12						; size = 8
?Insert@?$CRecordVector@_K@@QAEXI_K@Z PROC		; CRecordVector<unsigned __int64>::Insert, COMDAT
; _this$ = ecx
; Line 210
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 211
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ ; CRecordVector<unsigned __int64>::ReserveOnePosition
; Line 212
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MoveItems@?$CRecordVector@_K@@AAEXII@Z	; CRecordVector<unsigned __int64>::MoveItems
; Line 213
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*8], edx
	mov	edx, DWORD PTR _item$[ebp+4]
	mov	DWORD PTR [eax+ecx*8+4], edx
; Line 214
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 215
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Insert@?$CRecordVector@_K@@QAEXI_K@Z ENDP		; CRecordVector<unsigned __int64>::Insert
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@_K@@QAEAA_KI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@_K@@QAEAA_KI@Z PROC			; CRecordVector<unsigned __int64>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@_K@@QAEAA_KI@Z ENDP			; CRecordVector<unsigned __int64>::operator[]
_TEXT	ENDS
EXTRN	__imp__memmove:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?MoveItems@?$CRecordVector@_K@@AAEXII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_destIndex$ = 8						; size = 4
_srcIndex$ = 12						; size = 4
?MoveItems@?$CRecordVector@_K@@AAEXII@Z PROC		; CRecordVector<unsigned __int64>::MoveItems, COMDAT
; _this$ = ecx
; Line 14
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 15
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR _srcIndex$[ebp]
	shl	ecx, 3
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _srcIndex$[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _destIndex$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 16
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?MoveItems@?$CRecordVector@_K@@AAEXII@Z ENDP		; CRecordVector<unsigned __int64>::MoveItems
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ
_TEXT	SEGMENT
$T71331 = -20						; size = 4
$T71330 = -16						; size = 4
_p$71102 = -12						; size = 4
_newCapacity$71101 = -8					; size = 4
_this$ = -4						; size = 4
?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ PROC	; CRecordVector<unsigned __int64>::ReserveOnePosition, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@ReserveOne
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$71101[ebp], ecx
; Line 23
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$71101[ebp]
	mov	edx, 8
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T71330[ebp], eax
	mov	eax, DWORD PTR $T71330[ebp]
	mov	DWORD PTR _p$71102[ebp], eax
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@ReserveOne
; Line 25
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$71102[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne:
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T71331[ebp], edx
	mov	eax, DWORD PTR $T71331[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$71102[ebp]
	mov	DWORD PTR [ecx], edx
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$71101[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ReserveOne:
; Line 30
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ ENDP	; CRecordVector<unsigned __int64>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Reserve@?$CRecordVector@_K@@QAEXI@Z
_TEXT	SEGMENT
$T71335 = -16						; size = 4
$T71334 = -12						; size = 4
_p$71112 = -8						; size = 4
_this$ = -4						; size = 4
_newCapacity$ = 8					; size = 4
?Reserve@?$CRecordVector@_K@@QAEXI@Z PROC		; CRecordVector<unsigned __int64>::Reserve, COMDAT
; _this$ = ecx
; Line 61
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 62
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	SHORT $LN3@Reserve
; Line 64
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$[ebp]
	mov	edx, 8
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T71334[ebp], eax
	mov	eax, DWORD PTR $T71334[ebp]
	mov	DWORD PTR _p$71112[ebp], eax
; Line 65
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@Reserve
; Line 66
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$71112[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@Reserve:
; Line 67
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T71335[ebp], edx
	mov	eax, DWORD PTR $T71335[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 68
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$71112[ebp]
	mov	DWORD PTR [ecx], edx
; Line 69
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@Reserve:
; Line 71
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Reserve@?$CRecordVector@_K@@QAEXI@Z ENDP		; CRecordVector<unsigned __int64>::Reserve
_TEXT	ENDS
END
