; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\C\CpuArch.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
_kVendors DD	0756e6547H
	DD	049656e69H
	DD	06c65746eH
	DD	068747541H
	DD	069746e65H
	DD	0444d4163H
	DD	0746e6543H
	DD	048727561H
	DD	0736c7561H
CONST	ENDS
PUBLIC	_MyCPUID@20
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\c\cpuarch.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_d2$ = -16						; size = 4
_c2$ = -12						; size = 4
_b2$ = -8						; size = 4
_a2$ = -4						; size = 4
_function$ = 8						; size = 4
_a$ = 12						; size = 4
_b$ = 16						; size = 4
_c$ = 20						; size = 4
_d$ = 24						; size = 4
_MyCPUID@20 PROC
; Line 58
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	ebx
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 64
	xor	ebx, ebx
; Line 65
	xor	ecx, ecx
; Line 66
	xor	edx, edx
; Line 67
	mov	eax, DWORD PTR _function$[ebp]
; Line 68
	cpuid
; Line 69
	mov	DWORD PTR _a2$[ebp], eax
; Line 70
	mov	DWORD PTR _b2$[ebp], ebx
; Line 71
	mov	DWORD PTR _c2$[ebp], ecx
; Line 72
	mov	DWORD PTR _d2$[ebp], edx
; Line 74
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _a2$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 75
	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR _b2$[ebp]
	mov	DWORD PTR [edx], eax
; Line 76
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR _c2$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 77
	mov	eax, DWORD PTR _d$[ebp]
	mov	ecx, DWORD PTR _d2$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 109
	pop	ebx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_MyCPUID@20 ENDP
_TEXT	ENDS
PUBLIC	_x86cpuid_CheckAndRead@4
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = 8							; size = 4
_x86cpuid_CheckAndRead@4 PROC
; Line 112
	push	ebp
	mov	ebp, esp
; Line 113
	push	262144					; 00040000H
	call	_CheckFlag@4
	test	eax, eax
	je	SHORT $LN1@x86cpuid_C
	push	2097152					; 00200000H
	call	_CheckFlag@4
	test	eax, eax
	jne	SHORT $LN2@x86cpuid_C
$LN1@x86cpuid_C:
	xor	eax, eax
	jmp	SHORT $LN3@x86cpuid_C
$LN2@x86cpuid_C:
; Line 114
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 4
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	push	0
	call	_MyCPUID@20
; Line 115
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 28					; 0000001cH
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 24					; 00000018H
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	push	1
	call	_MyCPUID@20
; Line 116
	mov	eax, 1
$LN3@x86cpuid_C:
; Line 117
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
_x86cpuid_CheckAndRead@4 ENDP
; Function compile flags: /Odtp /RTCsu
_flag$ = 8						; size = 4
_CheckFlag@4 PROC
; Line 20
	push	ebp
	mov	ebp, esp
; Line 22
	pushfd
; Line 23
	pop	eax
; Line 24
	mov	edx, eax
; Line 25
	xor	eax, DWORD PTR _flag$[ebp]
; Line 26
	push	eax
; Line 27
	popfd
; Line 28
	pushfd
; Line 29
	pop	eax
; Line 30
	xor	eax, edx
; Line 31
	push	edx
; Line 32
	popfd
; Line 33
	and	DWORD PTR _flag$[ebp], eax
; Line 50
	mov	eax, DWORD PTR _flag$[ebp]
; Line 51
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
_CheckFlag@4 ENDP
_TEXT	ENDS
PUBLIC	_x86cpuid_GetFirm@4
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_v$2690 = -8						; size = 4
_i$ = -4						; size = 4
_p$ = 8							; size = 4
_x86cpuid_GetFirm@4 PROC
; Line 127
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 129
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@x86cpuid_G
$LN3@x86cpuid_G:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@x86cpuid_G:
	cmp	DWORD PTR _i$[ebp], 3
	jae	SHORT $LN2@x86cpuid_G
; Line 131
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	add	ecx, OFFSET _kVendors
	mov	DWORD PTR _v$2690[ebp], ecx
; Line 134
	mov	edx, DWORD PTR _v$2690[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN1@x86cpuid_G
	mov	edx, DWORD PTR _v$2690[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN1@x86cpuid_G
	mov	edx, DWORD PTR _v$2690[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	cmp	ecx, DWORD PTR [eax+12]
	jne	SHORT $LN1@x86cpuid_G
; Line 135
	mov	eax, DWORD PTR _i$[ebp]
	jmp	SHORT $LN5@x86cpuid_G
$LN1@x86cpuid_G:
; Line 136
	jmp	SHORT $LN3@x86cpuid_G
$LN2@x86cpuid_G:
; Line 137
	or	eax, -1
$LN5@x86cpuid_G:
; Line 138
	mov	esp, ebp
	pop	ebp
	ret	4
_x86cpuid_GetFirm@4 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_CPU_Is_InOrder@0
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv128 = -72						; size = 4
tv92 = -68						; size = 4
tv87 = -64						; size = 4
tv79 = -60						; size = 4
_model$ = -56						; size = 4
_family$ = -52						; size = 4
_firm$ = -48						; size = 4
_p$ = -40						; size = 32
__$ArrayPad$ = -4					; size = 4
_CPU_Is_InOrder@0 PROC
; Line 141
	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	edi
	lea	edi, DWORD PTR [ebp-72]
	mov	ecx, 18					; 00000012H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 145
	lea	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_x86cpuid_CheckAndRead@4
	test	eax, eax
	jne	SHORT $LN6@CPU_Is_InO
; Line 146
	mov	eax, 1
	jmp	$LN7@CPU_Is_InO
$LN6@CPU_Is_InO:
; Line 148
	mov	ecx, DWORD PTR _p$[ebp+16]
	shr	ecx, 16					; 00000010H
	and	ecx, 4080				; 00000ff0H
	mov	edx, DWORD PTR _p$[ebp+16]
	shr	edx, 8
	and	edx, 15					; 0000000fH
	or	ecx, edx
	mov	DWORD PTR _family$[ebp], ecx
; Line 149
	mov	eax, DWORD PTR _p$[ebp+16]
	shr	eax, 12					; 0000000cH
	and	eax, 240				; 000000f0H
	mov	ecx, DWORD PTR _p$[ebp+16]
	shr	ecx, 4
	and	ecx, 15					; 0000000fH
	or	eax, ecx
	mov	DWORD PTR _model$[ebp], eax
; Line 151
	lea	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_x86cpuid_GetFirm@4
	mov	DWORD PTR _firm$[ebp], eax
; Line 153
	mov	eax, DWORD PTR _firm$[ebp]
	mov	DWORD PTR tv79[ebp], eax
	cmp	DWORD PTR tv79[ebp], 0
	je	SHORT $LN3@CPU_Is_InO
	cmp	DWORD PTR tv79[ebp], 1
	je	SHORT $LN2@CPU_Is_InO
	cmp	DWORD PTR tv79[ebp], 2
	je	SHORT $LN1@CPU_Is_InO
	jmp	$LN4@CPU_Is_InO
$LN3@CPU_Is_InO:
; Line 162
	cmp	DWORD PTR _family$[ebp], 6
	jb	SHORT $LN9@CPU_Is_InO
	cmp	DWORD PTR _family$[ebp], 6
	jne	SHORT $LN10@CPU_Is_InO
	cmp	DWORD PTR _model$[ebp], 28		; 0000001cH
	je	SHORT $LN9@CPU_Is_InO
	cmp	DWORD PTR _model$[ebp], 38		; 00000026H
	je	SHORT $LN9@CPU_Is_InO
	cmp	DWORD PTR _model$[ebp], 39		; 00000027H
	je	SHORT $LN9@CPU_Is_InO
	cmp	DWORD PTR _model$[ebp], 53		; 00000035H
	je	SHORT $LN9@CPU_Is_InO
	cmp	DWORD PTR _model$[ebp], 54		; 00000036H
	je	SHORT $LN9@CPU_Is_InO
$LN10@CPU_Is_InO:
	mov	DWORD PTR tv87[ebp], 0
	jmp	SHORT $LN12@CPU_Is_InO
$LN9@CPU_Is_InO:
	mov	DWORD PTR tv87[ebp], 1
$LN12@CPU_Is_InO:
	mov	eax, DWORD PTR tv87[ebp]
	jmp	SHORT $LN7@CPU_Is_InO
$LN2@CPU_Is_InO:
; Line 163
	cmp	DWORD PTR _family$[ebp], 5
	jb	SHORT $LN13@CPU_Is_InO
	cmp	DWORD PTR _family$[ebp], 5
	jne	SHORT $LN14@CPU_Is_InO
	cmp	DWORD PTR _model$[ebp], 6
	jb	SHORT $LN13@CPU_Is_InO
	cmp	DWORD PTR _model$[ebp], 10		; 0000000aH
	je	SHORT $LN13@CPU_Is_InO
$LN14@CPU_Is_InO:
	mov	DWORD PTR tv92[ebp], 0
	jmp	SHORT $LN16@CPU_Is_InO
$LN13@CPU_Is_InO:
	mov	DWORD PTR tv92[ebp], 1
$LN16@CPU_Is_InO:
	mov	eax, DWORD PTR tv92[ebp]
	jmp	SHORT $LN7@CPU_Is_InO
$LN1@CPU_Is_InO:
; Line 164
	cmp	DWORD PTR _family$[ebp], 6
	jb	SHORT $LN18@CPU_Is_InO
	cmp	DWORD PTR _family$[ebp], 6
	jne	SHORT $LN17@CPU_Is_InO
	cmp	DWORD PTR _model$[ebp], 15		; 0000000fH
	jb	SHORT $LN18@CPU_Is_InO
$LN17@CPU_Is_InO:
	mov	DWORD PTR tv128[ebp], 0
	jmp	SHORT $LN19@CPU_Is_InO
$LN18@CPU_Is_InO:
	mov	DWORD PTR tv128[ebp], 1
$LN19@CPU_Is_InO:
	mov	eax, DWORD PTR tv128[ebp]
	jmp	SHORT $LN7@CPU_Is_InO
$LN4@CPU_Is_InO:
; Line 166
	mov	eax, 1
$LN7@CPU_Is_InO:
; Line 167
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN22@CPU_Is_InO
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 72					; 00000048H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN22@CPU_Is_InO:
	DD	1
	DD	$LN21@CPU_Is_InO
$LN21@CPU_Is_InO:
	DD	-40					; ffffffd8H
	DD	32					; 00000020H
	DD	$LN20@CPU_Is_InO
$LN20@CPU_Is_InO:
	DB	112					; 00000070H
	DB	0
_CPU_Is_InOrder@0 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_CPU_Is_Aes_Supported@0
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = -40						; size = 32
__$ArrayPad$ = -4					; size = 4
_CPU_Is_Aes_Supported@0 PROC
; Line 185
	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 187
	call	_CPU_Sys_Is_SSE_Supported@0
	test	eax, eax
	jne	SHORT $LN2@CPU_Is_Aes
	xor	eax, eax
	jmp	SHORT $LN3@CPU_Is_Aes
$LN2@CPU_Is_Aes:
; Line 188
	lea	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_x86cpuid_CheckAndRead@4
	test	eax, eax
	jne	SHORT $LN1@CPU_Is_Aes
; Line 189
	xor	eax, eax
	jmp	SHORT $LN3@CPU_Is_Aes
$LN1@CPU_Is_Aes:
; Line 190
	mov	eax, DWORD PTR _p$[ebp+24]
	shr	eax, 25					; 00000019H
	and	eax, 1
$LN3@CPU_Is_Aes:
; Line 191
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@CPU_Is_Aes
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@CPU_Is_Aes:
	DD	1
	DD	$LN6@CPU_Is_Aes
$LN6@CPU_Is_Aes:
	DD	-40					; ffffffd8H
	DD	32					; 00000020H
	DD	$LN5@CPU_Is_Aes
$LN5@CPU_Is_Aes:
	DB	112					; 00000070H
	DB	0
_CPU_Is_Aes_Supported@0 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	__imp__GetVersionExA@4:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_vi$ = -156						; size = 148
__$ArrayPad$ = -4					; size = 4
_CPU_Sys_Is_SSE_Supported@0 PROC
; Line 172
	push	ebp
	mov	ebp, esp
	sub	esp, 160				; 000000a0H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-160]
	mov	ecx, 40					; 00000028H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 174
	mov	DWORD PTR _vi$[ebp], 148		; 00000094H
; Line 175
	mov	esi, esp
	lea	eax, DWORD PTR _vi$[ebp]
	push	eax
	call	DWORD PTR __imp__GetVersionExA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN1@CPU_Sys_Is
; Line 176
	xor	eax, eax
	jmp	SHORT $LN2@CPU_Sys_Is
$LN1@CPU_Sys_Is:
; Line 177
	cmp	DWORD PTR _vi$[ebp+4], 5
	sbb	eax, eax
	add	eax, 1
$LN2@CPU_Sys_Is:
; Line 178
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@CPU_Sys_Is
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 160				; 000000a0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN6@CPU_Sys_Is:
	DD	1
	DD	$LN5@CPU_Sys_Is
$LN5@CPU_Sys_Is:
	DD	-156					; ffffff64H
	DD	148					; 00000094H
	DD	$LN4@CPU_Sys_Is
$LN4@CPU_Sys_Is:
	DB	118					; 00000076H
	DB	105					; 00000069H
	DB	0
_CPU_Sys_Is_SSE_Supported@0 ENDP
_TEXT	ENDS
END
