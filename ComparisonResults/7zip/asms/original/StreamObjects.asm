; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\CPP\7zip\Common\StreamObjects.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??B?$CBuffer@E@@QAEPAEXZ			; CBuffer<unsigned char>::operator unsigned char *
PUBLIC	?Size@?$CBuffer@E@@QBEIXZ			; CBuffer<unsigned char>::Size
PUBLIC	?Read@CBufferInStream@@UAGJPAXIPAI@Z		; CBufferInStream::Read
EXTRN	_memcpy:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\cpp\7zip\common\streamobjects.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
tv133 = -16						; size = 8
tv132 = -8						; size = 4
_rem$ = -4						; size = 4
_this$ = 8						; size = 4
_data$ = 12						; size = 4
_size$ = 16						; size = 4
_processedSize$ = 20					; size = 4
?Read@CBufferInStream@@UAGJPAXIPAI@Z PROC		; CBufferInStream::Read
; Line 12
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 13
	cmp	DWORD PTR _processedSize$[ebp], 0
	je	SHORT $LN5@Read
; Line 14
	mov	eax, DWORD PTR _processedSize$[ebp]
	mov	DWORD PTR [eax], 0
$LN5@Read:
; Line 15
	cmp	DWORD PTR _size$[ebp], 0
	jne	SHORT $LN4@Read
; Line 16
	xor	eax, eax
	jmp	$LN6@Read
$LN4@Read:
; Line 17
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?Size@?$CBuffer@E@@QBEIXZ		; CBuffer<unsigned char>::Size
	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv132[ebp], edx
	mov	DWORD PTR tv133[ebp], eax
	mov	DWORD PTR tv133[ebp+4], ecx
	mov	eax, DWORD PTR tv132[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, DWORD PTR tv133[ebp+4]
	jb	SHORT $LN3@Read
	ja	SHORT $LN8@Read
	mov	edx, DWORD PTR tv132[ebp]
	mov	eax, DWORD PTR [edx+8]
	cmp	eax, DWORD PTR tv133[ebp]
	jb	SHORT $LN3@Read
$LN8@Read:
; Line 18
	xor	eax, eax
	jmp	SHORT $LN6@Read
$LN3@Read:
; Line 19
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?Size@?$CBuffer@E@@QBEIXZ		; CBuffer<unsigned char>::Size
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	eax, edx
	mov	DWORD PTR _rem$[ebp], eax
; Line 20
	mov	eax, DWORD PTR _rem$[ebp]
	cmp	eax, DWORD PTR _size$[ebp]
	jbe	SHORT $LN2@Read
; Line 21
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR _rem$[ebp], ecx
$LN2@Read:
; Line 22
	mov	edx, DWORD PTR _rem$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??B?$CBuffer@E@@QAEPAEXZ		; CBuffer<unsigned char>::operator unsigned char *
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	eax, edx
	push	eax
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 23
	mov	ecx, DWORD PTR _rem$[ebp]
	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+8]
	adc	edx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
; Line 24
	cmp	DWORD PTR _processedSize$[ebp], 0
	je	SHORT $LN1@Read
; Line 25
	mov	ecx, DWORD PTR _processedSize$[ebp]
	mov	edx, DWORD PTR _rem$[ebp]
	mov	DWORD PTR [ecx], edx
$LN1@Read:
; Line 26
	xor	eax, eax
$LN6@Read:
; Line 27
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Read@CBufferInStream@@UAGJPAXIPAI@Z ENDP		; CBufferInStream::Read
_TEXT	ENDS
PUBLIC	?Seek@CBufferInStream@@UAGJ_JIPA_K@Z		; CBufferInStream::Seek
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv64 = -4						; size = 4
_this$ = 8						; size = 4
_offset$ = 12						; size = 8
_seekOrigin$ = 20					; size = 4
_newPosition$ = 24					; size = 4
?Seek@CBufferInStream@@UAGJ_JIPA_K@Z PROC		; CBufferInStream::Seek
; Line 30
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 31
	mov	eax, DWORD PTR _seekOrigin$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 0
	je	SHORT $LN6@Seek
	cmp	DWORD PTR tv64[ebp], 1
	je	SHORT $LN5@Seek
	cmp	DWORD PTR tv64[ebp], 2
	je	SHORT $LN4@Seek
	jmp	SHORT $LN3@Seek
$LN6@Seek:
; Line 33
	jmp	SHORT $LN7@Seek
$LN5@Seek:
; Line 34
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _offset$[ebp]
	add	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _offset$[ebp+4]
	adc	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _offset$[ebp], edx
	mov	DWORD PTR _offset$[ebp+4], eax
	jmp	SHORT $LN7@Seek
$LN4@Seek:
; Line 35
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?Size@?$CBuffer@E@@QBEIXZ		; CBuffer<unsigned char>::Size
	xor	ecx, ecx
	add	eax, DWORD PTR _offset$[ebp]
	adc	ecx, DWORD PTR _offset$[ebp+4]
	mov	DWORD PTR _offset$[ebp], eax
	mov	DWORD PTR _offset$[ebp+4], ecx
	jmp	SHORT $LN7@Seek
$LN3@Seek:
; Line 36
	mov	eax, -2147287039			; 80030001H
	jmp	SHORT $LN9@Seek
$LN7@Seek:
; Line 38
	cmp	DWORD PTR _offset$[ebp+4], 0
	jg	SHORT $LN2@Seek
	jl	SHORT $LN11@Seek
	cmp	DWORD PTR _offset$[ebp], 0
	jae	SHORT $LN2@Seek
$LN11@Seek:
; Line 39
	mov	eax, -2147024765			; 80070083H
	jmp	SHORT $LN9@Seek
$LN2@Seek:
; Line 40
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _offset$[ebp+4]
	mov	DWORD PTR [edx+12], ecx
; Line 41
	cmp	DWORD PTR _newPosition$[ebp], 0
	je	SHORT $LN1@Seek
; Line 42
	mov	edx, DWORD PTR _newPosition$[ebp]
	mov	eax, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _offset$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
$LN1@Seek:
; Line 43
	xor	eax, eax
$LN9@Seek:
; Line 44
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?Seek@CBufferInStream@@UAGJ_JIPA_K@Z ENDP		; CBufferInStream::Seek
_TEXT	ENDS
PUBLIC	?Read@CBufInStream@@UAGJPAXIPAI@Z		; CBufInStream::Read
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv95 = -16						; size = 8
tv94 = -8						; size = 4
_rem$ = -4						; size = 4
_this$ = 8						; size = 4
_data$ = 12						; size = 4
_size$ = 16						; size = 4
_processedSize$ = 20					; size = 4
?Read@CBufInStream@@UAGJPAXIPAI@Z PROC			; CBufInStream::Read
; Line 47
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 48
	cmp	DWORD PTR _processedSize$[ebp], 0
	je	SHORT $LN5@Read@2
; Line 49
	mov	eax, DWORD PTR _processedSize$[ebp]
	mov	DWORD PTR [eax], 0
$LN5@Read@2:
; Line 50
	cmp	DWORD PTR _size$[ebp], 0
	jne	SHORT $LN4@Read@2
; Line 51
	xor	eax, eax
	jmp	$LN6@Read@2
$LN4@Read@2:
; Line 52
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv94[ebp], ecx
	mov	DWORD PTR tv95[ebp], edx
	mov	DWORD PTR tv95[ebp+4], eax
	mov	edx, DWORD PTR tv94[ebp]
	mov	eax, DWORD PTR [edx+20]
	cmp	eax, DWORD PTR tv95[ebp+4]
	jb	SHORT $LN3@Read@2
	ja	SHORT $LN8@Read@2
	mov	ecx, DWORD PTR tv94[ebp]
	mov	edx, DWORD PTR [ecx+16]
	cmp	edx, DWORD PTR tv95[ebp]
	jb	SHORT $LN3@Read@2
$LN8@Read@2:
; Line 53
	xor	eax, eax
	jmp	SHORT $LN6@Read@2
$LN3@Read@2:
; Line 54
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	sub	eax, ecx
	mov	DWORD PTR _rem$[ebp], eax
; Line 55
	mov	ecx, DWORD PTR _rem$[ebp]
	cmp	ecx, DWORD PTR _size$[ebp]
	jbe	SHORT $LN2@Read@2
; Line 56
	mov	edx, DWORD PTR _size$[ebp]
	mov	DWORD PTR _rem$[ebp], edx
$LN2@Read@2:
; Line 57
	mov	eax, DWORD PTR _rem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+8]
	push	edx
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 58
	mov	edx, DWORD PTR _rem$[ebp]
	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [ecx+16]
	adc	eax, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], edx
	mov	DWORD PTR [ecx+20], eax
; Line 59
	cmp	DWORD PTR _processedSize$[ebp], 0
	je	SHORT $LN1@Read@2
; Line 60
	mov	edx, DWORD PTR _processedSize$[ebp]
	mov	eax, DWORD PTR _rem$[ebp]
	mov	DWORD PTR [edx], eax
$LN1@Read@2:
; Line 61
	xor	eax, eax
$LN6@Read@2:
; Line 62
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Read@CBufInStream@@UAGJPAXIPAI@Z ENDP			; CBufInStream::Read
_TEXT	ENDS
PUBLIC	?Seek@CBufInStream@@UAGJ_JIPA_K@Z		; CBufInStream::Seek
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv64 = -4						; size = 4
_this$ = 8						; size = 4
_offset$ = 12						; size = 8
_seekOrigin$ = 20					; size = 4
_newPosition$ = 24					; size = 4
?Seek@CBufInStream@@UAGJ_JIPA_K@Z PROC			; CBufInStream::Seek
; Line 65
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 66
	mov	eax, DWORD PTR _seekOrigin$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 0
	je	SHORT $LN6@Seek@2
	cmp	DWORD PTR tv64[ebp], 1
	je	SHORT $LN5@Seek@2
	cmp	DWORD PTR tv64[ebp], 2
	je	SHORT $LN4@Seek@2
	jmp	SHORT $LN3@Seek@2
$LN6@Seek@2:
; Line 68
	jmp	SHORT $LN7@Seek@2
$LN5@Seek@2:
; Line 69
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _offset$[ebp]
	add	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _offset$[ebp+4]
	adc	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR _offset$[ebp], edx
	mov	DWORD PTR _offset$[ebp+4], eax
	jmp	SHORT $LN7@Seek@2
$LN4@Seek@2:
; Line 70
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	xor	eax, eax
	add	edx, DWORD PTR _offset$[ebp]
	adc	eax, DWORD PTR _offset$[ebp+4]
	mov	DWORD PTR _offset$[ebp], edx
	mov	DWORD PTR _offset$[ebp+4], eax
	jmp	SHORT $LN7@Seek@2
$LN3@Seek@2:
; Line 71
	mov	eax, -2147287039			; 80030001H
	jmp	SHORT $LN9@Seek@2
$LN7@Seek@2:
; Line 73
	cmp	DWORD PTR _offset$[ebp+4], 0
	jg	SHORT $LN2@Seek@2
	jl	SHORT $LN11@Seek@2
	cmp	DWORD PTR _offset$[ebp], 0
	jae	SHORT $LN2@Seek@2
$LN11@Seek@2:
; Line 74
	mov	eax, -2147024765			; 80070083H
	jmp	SHORT $LN9@Seek@2
$LN2@Seek@2:
; Line 75
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [ecx+16], edx
	mov	eax, DWORD PTR _offset$[ebp+4]
	mov	DWORD PTR [ecx+20], eax
; Line 76
	cmp	DWORD PTR _newPosition$[ebp], 0
	je	SHORT $LN1@Seek@2
; Line 77
	mov	ecx, DWORD PTR _newPosition$[ebp]
	mov	edx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _offset$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
$LN1@Seek@2:
; Line 78
	xor	eax, eax
$LN9@Seek@2:
; Line 79
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?Seek@CBufInStream@@UAGJ_JIPA_K@Z ENDP			; CBufInStream::Seek
_TEXT	ENDS
PUBLIC	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ	; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
PUBLIC	?Detach@?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::Detach
PUBLIC	?Init@CBufInStream@@QAEXPBEIPAUIUnknown@@@Z	; CBufInStream::Init
PUBLIC	??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
PUBLIC	??0CBufInStream@@QAE@XZ				; CBufInStream::CBufInStream
PUBLIC	?Create_BufInStream_WithReference@@YGXPBXIPAUIUnknown@@PAPAUISequentialInStream@@@Z ; Create_BufInStream_WithReference
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
xdata$x	SEGMENT
__unwindtable$?Create_BufInStream_WithReference@@YGXPBXIPAUIUnknown@@PAPAUISequentialInStream@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Create_BufInStream_WithReference@@YGXPBXIPAUIUnknown@@PAPAUISequentialInStream@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Create_BufInStream_WithReference@@YGXPBXIPAUIUnknown@@PAPAUISequentialInStream@@@Z$1
__ehfuncinfo$?Create_BufInStream_WithReference@@YGXPBXIPAUIUnknown@@PAPAUISequentialInStream@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Create_BufInStream_WithReference@@YGXPBXIPAUIUnknown@@PAPAUISequentialInStream@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv71 = -40						; size = 4
$T67525 = -36						; size = 4
$T67524 = -32						; size = 4
_streamTemp$ = -24					; size = 4
_inStreamSpec$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_data$ = 8						; size = 4
_size$ = 12						; size = 4
_ref$ = 16						; size = 4
_stream$ = 20						; size = 4
?Create_BufInStream_WithReference@@YGXPBXIPAUIUnknown@@PAPAUISequentialInStream@@@Z PROC ; Create_BufInStream_WithReference
; Line 82
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Create_BufInStream_WithReference@@YGXPBXIPAUIUnknown@@PAPAUISequentialInStream@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 83
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax], 0
; Line 84
	push	32					; 00000020H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T67525[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T67525[ebp], 0
	je	SHORT $LN3@Create_Buf
	mov	ecx, DWORD PTR $T67525[ebp]
	call	??0CBufInStream@@QAE@XZ
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN4@Create_Buf
$LN3@Create_Buf:
	mov	DWORD PTR tv71[ebp], 0
$LN4@Create_Buf:
	mov	ecx, DWORD PTR tv71[ebp]
	mov	DWORD PTR $T67524[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T67524[ebp]
	mov	DWORD PTR _inStreamSpec$[ebp], edx
; Line 85
	mov	eax, DWORD PTR _inStreamSpec$[ebp]
	push	eax
	lea	ecx, DWORD PTR _streamTemp$[ebp]
	call	??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 86
	mov	ecx, DWORD PTR _ref$[ebp]
	push	ecx
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	mov	ecx, DWORD PTR _inStreamSpec$[ebp]
	call	?Init@CBufInStream@@QAEXPBEIPAUIUnknown@@@Z ; CBufInStream::Init
; Line 87
	lea	ecx, DWORD PTR _streamTemp$[ebp]
	call	?Detach@?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::Detach
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 88
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _streamTemp$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@Create_Buf
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN10@Create_Buf:
	DD	1
	DD	$LN9@Create_Buf
$LN9@Create_Buf:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN7@Create_Buf
$LN7@Create_Buf:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Create_BufInStream_WithReference@@YGXPBXIPAUIUnknown@@PAPAUISequentialInStream@@@Z$0:
	mov	eax, DWORD PTR $T67525[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Create_BufInStream_WithReference@@YGXPBXIPAUIUnknown@@PAPAUISequentialInStream@@@Z$1:
	lea	ecx, DWORD PTR _streamTemp$[ebp]
	jmp	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
__ehhandler$?Create_BufInStream_WithReference@@YGXPBXIPAUIUnknown@@PAPAUISequentialInStream@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Create_BufInStream_WithReference@@YGXPBXIPAUIUnknown@@PAPAUISequentialInStream@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Create_BufInStream_WithReference@@YGXPBXIPAUIUnknown@@PAPAUISequentialInStream@@@Z ENDP ; Create_BufInStream_WithReference
PUBLIC	??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z ; CMyComPtr<IUnknown>::operator=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Init@CBufInStream@@QAEXPBEIPAUIUnknown@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_data$ = 8						; size = 4
_size$ = 12						; size = 4
_ref$ = 16						; size = 4
?Init@CBufInStream@@QAEXPBEIPAUIUnknown@@@Z PROC	; CBufInStream::Init, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\streamobjects.h
; Line 45
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 46
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 47
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+24], eax
; Line 48
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
; Line 49
	mov	edx, DWORD PTR _ref$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z ; CMyComPtr<IUnknown>::operator=
; Line 50
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Init@CBufInStream@@QAEXPBEIPAUIUnknown@@@Z ENDP	; CBufInStream::Init
_TEXT	ENDS
PUBLIC	??0?$CMyComPtr@UIUnknown@@@@QAE@XZ		; CMyComPtr<IUnknown>::CMyComPtr<IUnknown>
PUBLIC	??_7CBufInStream@@6B@				; CBufInStream::`vftable'
PUBLIC	??0CMyUnknownImp@@QAE@XZ			; CMyUnknownImp::CMyUnknownImp
PUBLIC	??0IInStream@@QAE@XZ				; IInStream::IInStream
PUBLIC	??_R4CBufInStream@@6B@				; CBufInStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCBufInStream@@@8			; CBufInStream `RTTI Type Descriptor'
PUBLIC	??_R3CBufInStream@@8				; CBufInStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CBufInStream@@8				; CBufInStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CBufInStream@@8			; CBufInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@IInStream@@8			; IInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIInStream@@@8				; IInStream `RTTI Type Descriptor'
PUBLIC	??_R3IInStream@@8				; IInStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IInStream@@8				; IInStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ISequentialInStream@@8		; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUISequentialInStream@@@8			; ISequentialInStream `RTTI Type Descriptor'
PUBLIC	??_R3ISequentialInStream@@8			; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ISequentialInStream@@8			; ISequentialInStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIUnknown@@@8				; IUnknown `RTTI Type Descriptor'
PUBLIC	??_R3IUnknown@@8				; IUnknown::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IUnknown@@8				; IUnknown::`RTTI Base Class Array'
PUBLIC	??_R13?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AVCMyUnknownImp@@@8			; CMyUnknownImp `RTTI Type Descriptor'
PUBLIC	??_R3CMyUnknownImp@@8				; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMyUnknownImp@@8				; CMyUnknownImp::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?QueryInterface@CBufInStream@@UAGJABU_GUID@@PAPAX@Z ; CBufInStream::QueryInterface
PUBLIC	?AddRef@CBufInStream@@UAGKXZ			; CBufInStream::AddRef
PUBLIC	?Release@CBufInStream@@UAGKXZ			; CBufInStream::Release
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_R1A@?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R2CMyUnknownImp@@8
rdata$r	SEGMENT
??_R2CMyUnknownImp@@8 DD FLAT:??_R1A@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMyUnknownImp@@8
rdata$r	SEGMENT
??_R3CMyUnknownImp@@8 DD 00H				; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMyUnknownImp@@@8
_DATA	SEGMENT
??_R0?AVCMyUnknownImp@@@8 DD FLAT:??_7type_info@@6B@	; CMyUnknownImp `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMyUnknownImp@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R13?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R2IUnknown@@8
rdata$r	SEGMENT
??_R2IUnknown@@8 DD FLAT:??_R1A@?0A@EA@IUnknown@@8	; IUnknown::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3IUnknown@@8
rdata$r	SEGMENT
??_R3IUnknown@@8 DD 00H					; IUnknown::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIUnknown@@@8
_DATA	SEGMENT
??_R0?AUIUnknown@@@8 DD FLAT:??_7type_info@@6B@		; IUnknown `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIUnknown@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IUnknown@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R2ISequentialInStream@@8
rdata$r	SEGMENT
??_R2ISequentialInStream@@8 DD FLAT:??_R1A@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ISequentialInStream@@8
rdata$r	SEGMENT
??_R3ISequentialInStream@@8 DD 00H			; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ISequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUISequentialInStream@@@8
_DATA	SEGMENT
??_R0?AUISequentialInStream@@@8 DD FLAT:??_7type_info@@6B@ ; ISequentialInStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUISequentialInStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ISequentialInStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ISequentialInStream@@8 DD FLAT:??_R0?AUISequentialInStream@@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ISequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_R2IInStream@@8
rdata$r	SEGMENT
??_R2IInStream@@8 DD FLAT:??_R1A@?0A@EA@IInStream@@8	; IInStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ISequentialInStream@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3IInStream@@8
rdata$r	SEGMENT
??_R3IInStream@@8 DD 00H				; IInStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2IInStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIInStream@@@8
_DATA	SEGMENT
??_R0?AUIInStream@@@8 DD FLAT:??_7type_info@@6B@	; IInStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIInStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IInStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IInStream@@8 DD FLAT:??_R0?AUIInStream@@@8 ; IInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IInStream@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CBufInStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CBufInStream@@8 DD FLAT:??_R0?AVCBufInStream@@@8 ; CBufInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CBufInStream@@8
rdata$r	ENDS
;	COMDAT ??_R2CBufInStream@@8
rdata$r	SEGMENT
??_R2CBufInStream@@8 DD FLAT:??_R1A@?0A@EA@CBufInStream@@8 ; CBufInStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IInStream@@8
	DD	FLAT:??_R1A@?0A@EA@ISequentialInStream@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CBufInStream@@8
rdata$r	SEGMENT
??_R3CBufInStream@@8 DD 00H				; CBufInStream::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2CBufInStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCBufInStream@@@8
_DATA	SEGMENT
??_R0?AVCBufInStream@@@8 DD FLAT:??_7type_info@@6B@	; CBufInStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCBufInStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CBufInStream@@6B@
rdata$r	SEGMENT
??_R4CBufInStream@@6B@ DD 00H				; CBufInStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCBufInStream@@@8
	DD	FLAT:??_R3CBufInStream@@8
rdata$r	ENDS
;	COMDAT ??_7CBufInStream@@6B@
CONST	SEGMENT
??_7CBufInStream@@6B@ DD FLAT:??_R4CBufInStream@@6B@	; CBufInStream::`vftable'
	DD	FLAT:?QueryInterface@CBufInStream@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CBufInStream@@UAGKXZ
	DD	FLAT:?Release@CBufInStream@@UAGKXZ
	DD	FLAT:?Read@CBufInStream@@UAGJPAXIPAI@Z
	DD	FLAT:?Seek@CBufInStream@@UAGJ_JIPA_K@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CBufInStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CBufInStream@@QAE@XZ PROC				; CBufInStream::CBufInStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IInStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CBufInStream@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??0?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::CMyComPtr<IUnknown>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CBufInStream@@QAE@XZ ENDP				; CBufInStream::CBufInStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CMyUnknownImp@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMyUnknownImp@@QAE@XZ PROC				; CMyUnknownImp::CMyUnknownImp, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 167
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CMyUnknownImp@@QAE@XZ ENDP				; CMyUnknownImp::CMyUnknownImp
_TEXT	ENDS
PUBLIC	_==@8
EXTRN	_IID_IInStream:BYTE
EXTRN	_IID_ISequentialInStream:BYTE
EXTRN	_IID_IUnknown:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@CBufInStream@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CBufInStream@@UAGJABU_GUID@@PAPAX@Z PROC ; CBufInStream::QueryInterface, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\common\streamobjects.h
; Line 53
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN6@QueryInter
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN5@QueryInter
$LN6@QueryInter:
	push	OFFSET _IID_ISequentialInStream
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@QueryInter
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN5@QueryInter
$LN4@QueryInter:
	push	OFFSET _IID_IInStream
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN5@QueryInter
$LN2@QueryInter:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN7@QueryInter
$LN5@QueryInter:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	xor	eax, eax
$LN7@QueryInter:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CBufInStream@@UAGJABU_GUID@@PAPAX@Z ENDP ; CBufInStream::QueryInterface
_TEXT	ENDS
PUBLIC	_IsEqualGUID@8
; Function compile flags: /Odtp /RTCsu
;	COMDAT _==@8
_TEXT	SEGMENT
_guidOne$ = 8						; size = 4
_guidOther$ = 12					; size = 4
_==@8	PROC						; COMDAT
; File c:\program files (x86)\microsoft sdks\windows\v7.0a\include\guiddef.h
; Line 193
	push	ebp
	mov	ebp, esp
; Line 194
	mov	eax, DWORD PTR _guidOther$[ebp]
	push	eax
	mov	ecx, DWORD PTR _guidOne$[ebp]
	push	ecx
	call	_IsEqualGUID@8
; Line 195
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_==@8	ENDP
_TEXT	ENDS
EXTRN	_memcmp:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT _IsEqualGUID@8
_TEXT	SEGMENT
_rguid1$ = 8						; size = 4
_rguid2$ = 12						; size = 4
_IsEqualGUID@8 PROC					; COMDAT
; Line 160
	push	ebp
	mov	ebp, esp
; Line 161
	push	16					; 00000010H
	mov	eax, DWORD PTR _rguid2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rguid1$[ebp]
	push	ecx
	call	_memcmp
	add	esp, 12					; 0000000cH
	neg	eax
	sbb	eax, eax
	add	eax, 1
; Line 162
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_IsEqualGUID@8 ENDP
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CBufInStream@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CBufInStream@@UAGKXZ PROC			; CBufInStream::AddRef, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\common\streamobjects.h
; Line 53
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CBufInStream@@UAGKXZ ENDP			; CBufInStream::AddRef
_TEXT	ENDS
PUBLIC	??_GCBufInStream@@QAEPAXI@Z			; CBufInStream::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CBufInStream@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T67560 = -8						; size = 4
$T67559 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CBufInStream@@UAGKXZ PROC			; CBufInStream::Release, COMDAT
; Line 53
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	jmp	SHORT $LN2@Release
$LN1@Release:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T67560[ebp], edx
	mov	eax, DWORD PTR $T67560[ebp]
	mov	DWORD PTR $T67559[ebp], eax
	cmp	DWORD PTR $T67559[ebp], 0
	je	SHORT $LN4@Release
	push	1
	mov	ecx, DWORD PTR $T67559[ebp]
	call	??_GCBufInStream@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release
$LN4@Release:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release:
	xor	eax, eax
$LN2@Release:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CBufInStream@@UAGKXZ ENDP			; CBufInStream::Release
_TEXT	ENDS
PUBLIC	??1CBufInStream@@QAE@XZ				; CBufInStream::~CBufInStream
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCBufInStream@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCBufInStream@@QAEPAXI@Z PROC			; CBufInStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CBufInStream@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCBufInStream@@QAEPAXI@Z ENDP			; CBufInStream::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ		; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CBufInStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CBufInStream@@QAE@XZ PROC				; CBufInStream::~CBufInStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CBufInStream@@QAE@XZ ENDP				; CBufInStream::~CBufInStream
_TEXT	ENDS
PUBLIC	??_7IInStream@@6B@				; IInStream::`vftable'
PUBLIC	??0ISequentialInStream@@QAE@XZ			; ISequentialInStream::ISequentialInStream
PUBLIC	??_R4IInStream@@6B@				; IInStream::`RTTI Complete Object Locator'
EXTRN	__purecall:PROC
;	COMDAT ??_R4IInStream@@6B@
rdata$r	SEGMENT
??_R4IInStream@@6B@ DD 00H				; IInStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIInStream@@@8
	DD	FLAT:??_R3IInStream@@8
rdata$r	ENDS
;	COMDAT ??_7IInStream@@6B@
CONST	SEGMENT
??_7IInStream@@6B@ DD FLAT:??_R4IInStream@@6B@		; IInStream::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0IInStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IInStream@@QAE@XZ PROC				; IInStream::IInStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ISequentialInStream@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7IInStream@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0IInStream@@QAE@XZ ENDP				; IInStream::IInStream
_TEXT	ENDS
PUBLIC	??_7ISequentialInStream@@6B@			; ISequentialInStream::`vftable'
PUBLIC	??0IUnknown@@QAE@XZ				; IUnknown::IUnknown
PUBLIC	??_R4ISequentialInStream@@6B@			; ISequentialInStream::`RTTI Complete Object Locator'
;	COMDAT ??_R4ISequentialInStream@@6B@
rdata$r	SEGMENT
??_R4ISequentialInStream@@6B@ DD 00H			; ISequentialInStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUISequentialInStream@@@8
	DD	FLAT:??_R3ISequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_7ISequentialInStream@@6B@
CONST	SEGMENT
??_7ISequentialInStream@@6B@ DD FLAT:??_R4ISequentialInStream@@6B@ ; ISequentialInStream::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ISequentialInStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ISequentialInStream@@QAE@XZ PROC			; ISequentialInStream::ISequentialInStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ISequentialInStream@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ISequentialInStream@@QAE@XZ ENDP			; ISequentialInStream::ISequentialInStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0IUnknown@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IUnknown@@QAE@XZ PROC				; IUnknown::IUnknown, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0IUnknown@@QAE@XZ ENDP				; IUnknown::IUnknown
_TEXT	ENDS
PUBLIC	?Init@CBufferInStream@@QAEXXZ			; CBufferInStream::Init
PUBLIC	?CopyFrom@?$CBuffer@E@@QAEXPBEI@Z		; CBuffer<unsigned char>::CopyFrom
PUBLIC	??0CBufferInStream@@QAE@XZ			; CBufferInStream::CBufferInStream
PUBLIC	?Create_BufInStream_WithNewBuffer@@YGXPBXIPAPAUISequentialInStream@@@Z ; Create_BufInStream_WithNewBuffer
xdata$x	SEGMENT
__unwindtable$?Create_BufInStream_WithNewBuffer@@YGXPBXIPAPAUISequentialInStream@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Create_BufInStream_WithNewBuffer@@YGXPBXIPAPAUISequentialInStream@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Create_BufInStream_WithNewBuffer@@YGXPBXIPAPAUISequentialInStream@@@Z$1
__ehfuncinfo$?Create_BufInStream_WithNewBuffer@@YGXPBXIPAPAUISequentialInStream@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Create_BufInStream_WithNewBuffer@@YGXPBXIPAPAUISequentialInStream@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv71 = -40						; size = 4
$T67577 = -36						; size = 4
$T67576 = -32						; size = 4
_streamTemp$ = -24					; size = 4
_inStreamSpec$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_data$ = 8						; size = 4
_size$ = 12						; size = 4
_stream$ = 16						; size = 4
?Create_BufInStream_WithNewBuffer@@YGXPBXIPAPAUISequentialInStream@@@Z PROC ; Create_BufInStream_WithNewBuffer
; File c:\workspace\7z1505-src\cpp\7zip\common\streamobjects.cpp
; Line 91
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Create_BufInStream_WithNewBuffer@@YGXPBXIPAPAUISequentialInStream@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 92
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax], 0
; Line 93
	push	24					; 00000018H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T67577[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T67577[ebp], 0
	je	SHORT $LN3@Create_Buf@2
	mov	ecx, DWORD PTR $T67577[ebp]
	call	??0CBufferInStream@@QAE@XZ
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN4@Create_Buf@2
$LN3@Create_Buf@2:
	mov	DWORD PTR tv71[ebp], 0
$LN4@Create_Buf@2:
	mov	ecx, DWORD PTR tv71[ebp]
	mov	DWORD PTR $T67576[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T67576[ebp]
	mov	DWORD PTR _inStreamSpec$[ebp], edx
; Line 94
	mov	eax, DWORD PTR _inStreamSpec$[ebp]
	push	eax
	lea	ecx, DWORD PTR _streamTemp$[ebp]
	call	??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 95
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	mov	ecx, DWORD PTR _inStreamSpec$[ebp]
	add	ecx, 16					; 00000010H
	call	?CopyFrom@?$CBuffer@E@@QAEXPBEI@Z	; CBuffer<unsigned char>::CopyFrom
; Line 96
	mov	ecx, DWORD PTR _inStreamSpec$[ebp]
	call	?Init@CBufferInStream@@QAEXXZ		; CBufferInStream::Init
; Line 97
	lea	ecx, DWORD PTR _streamTemp$[ebp]
	call	?Detach@?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::Detach
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 98
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _streamTemp$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@Create_Buf@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN10@Create_Buf@2:
	DD	1
	DD	$LN9@Create_Buf@2
$LN9@Create_Buf@2:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN7@Create_Buf@2
$LN7@Create_Buf@2:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Create_BufInStream_WithNewBuffer@@YGXPBXIPAPAUISequentialInStream@@@Z$0:
	mov	eax, DWORD PTR $T67577[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Create_BufInStream_WithNewBuffer@@YGXPBXIPAPAUISequentialInStream@@@Z$1:
	lea	ecx, DWORD PTR _streamTemp$[ebp]
	jmp	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
__ehhandler$?Create_BufInStream_WithNewBuffer@@YGXPBXIPAPAUISequentialInStream@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Create_BufInStream_WithNewBuffer@@YGXPBXIPAPAUISequentialInStream@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Create_BufInStream_WithNewBuffer@@YGXPBXIPAPAUISequentialInStream@@@Z ENDP ; Create_BufInStream_WithNewBuffer
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Init@CBufferInStream@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Init@CBufferInStream@@QAEXXZ PROC			; CBufferInStream::Init, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\streamobjects.h
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	DWORD PTR [eax+12], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Init@CBufferInStream@@QAEXXZ ENDP			; CBufferInStream::Init
_TEXT	ENDS
PUBLIC	??0?$CBuffer@E@@QAE@XZ				; CBuffer<unsigned char>::CBuffer<unsigned char>
PUBLIC	??_7CBufferInStream@@6B@			; CBufferInStream::`vftable'
PUBLIC	??_R4CBufferInStream@@6B@			; CBufferInStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCBufferInStream@@@8			; CBufferInStream `RTTI Type Descriptor'
PUBLIC	??_R3CBufferInStream@@8				; CBufferInStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CBufferInStream@@8				; CBufferInStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CBufferInStream@@8		; CBufferInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?QueryInterface@CBufferInStream@@UAGJABU_GUID@@PAPAX@Z ; CBufferInStream::QueryInterface
PUBLIC	?AddRef@CBufferInStream@@UAGKXZ			; CBufferInStream::AddRef
PUBLIC	?Release@CBufferInStream@@UAGKXZ		; CBufferInStream::Release
;	COMDAT ??_R1A@?0A@EA@CBufferInStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CBufferInStream@@8 DD FLAT:??_R0?AVCBufferInStream@@@8 ; CBufferInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CBufferInStream@@8
rdata$r	ENDS
;	COMDAT ??_R2CBufferInStream@@8
rdata$r	SEGMENT
??_R2CBufferInStream@@8 DD FLAT:??_R1A@?0A@EA@CBufferInStream@@8 ; CBufferInStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IInStream@@8
	DD	FLAT:??_R1A@?0A@EA@ISequentialInStream@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CBufferInStream@@8
rdata$r	SEGMENT
??_R3CBufferInStream@@8 DD 00H				; CBufferInStream::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2CBufferInStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCBufferInStream@@@8
_DATA	SEGMENT
??_R0?AVCBufferInStream@@@8 DD FLAT:??_7type_info@@6B@	; CBufferInStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCBufferInStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CBufferInStream@@6B@
rdata$r	SEGMENT
??_R4CBufferInStream@@6B@ DD 00H			; CBufferInStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCBufferInStream@@@8
	DD	FLAT:??_R3CBufferInStream@@8
rdata$r	ENDS
;	COMDAT ??_7CBufferInStream@@6B@
CONST	SEGMENT
??_7CBufferInStream@@6B@ DD FLAT:??_R4CBufferInStream@@6B@ ; CBufferInStream::`vftable'
	DD	FLAT:?QueryInterface@CBufferInStream@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CBufferInStream@@UAGKXZ
	DD	FLAT:?Release@CBufferInStream@@UAGKXZ
	DD	FLAT:?Read@CBufferInStream@@UAGJPAXIPAI@Z
	DD	FLAT:?Seek@CBufferInStream@@UAGJ_JIPA_K@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CBufferInStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CBufferInStream@@QAE@XZ PROC				; CBufferInStream::CBufferInStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IInStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CBufferInStream@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::CBuffer<unsigned char>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CBufferInStream@@QAE@XZ ENDP				; CBufferInStream::CBufferInStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CBufferInStream@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CBufferInStream@@UAGJABU_GUID@@PAPAX@Z PROC ; CBufferInStream::QueryInterface, COMDAT
; Line 21
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN6@QueryInter@2
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN5@QueryInter@2
$LN6@QueryInter@2:
	push	OFFSET _IID_ISequentialInStream
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@QueryInter@2
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN5@QueryInter@2
$LN4@QueryInter@2:
	push	OFFSET _IID_IInStream
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@2
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN5@QueryInter@2
$LN2@QueryInter@2:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN7@QueryInter@2
$LN5@QueryInter@2:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	xor	eax, eax
$LN7@QueryInter@2:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CBufferInStream@@UAGJABU_GUID@@PAPAX@Z ENDP ; CBufferInStream::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CBufferInStream@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CBufferInStream@@UAGKXZ PROC			; CBufferInStream::AddRef, COMDAT
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CBufferInStream@@UAGKXZ ENDP			; CBufferInStream::AddRef
_TEXT	ENDS
PUBLIC	??_GCBufferInStream@@QAEPAXI@Z			; CBufferInStream::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CBufferInStream@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T67600 = -8						; size = 4
$T67599 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CBufferInStream@@UAGKXZ PROC			; CBufferInStream::Release, COMDAT
; Line 21
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	jmp	SHORT $LN2@Release@2
$LN1@Release@2:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T67600[ebp], edx
	mov	eax, DWORD PTR $T67600[ebp]
	mov	DWORD PTR $T67599[ebp], eax
	cmp	DWORD PTR $T67599[ebp], 0
	je	SHORT $LN4@Release@2
	push	1
	mov	ecx, DWORD PTR $T67599[ebp]
	call	??_GCBufferInStream@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release@2
$LN4@Release@2:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release@2:
	xor	eax, eax
$LN2@Release@2:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CBufferInStream@@UAGKXZ ENDP			; CBufferInStream::Release
_TEXT	ENDS
PUBLIC	??1CBufferInStream@@QAE@XZ			; CBufferInStream::~CBufferInStream
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCBufferInStream@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCBufferInStream@@QAEPAXI@Z PROC			; CBufferInStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CBufferInStream@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCBufferInStream@@QAEPAXI@Z ENDP			; CBufferInStream::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1?$CBuffer@E@@QAE@XZ				; CBuffer<unsigned char>::~CBuffer<unsigned char>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CBufferInStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CBufferInStream@@QAE@XZ PROC				; CBufferInStream::~CBufferInStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CBufferInStream@@QAE@XZ ENDP				; CBufferInStream::~CBufferInStream
_TEXT	ENDS
PUBLIC	?Free@CByteDynBuffer@@QAEXXZ			; CByteDynBuffer::Free
EXTRN	__imp__free:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Free@CByteDynBuffer@@QAEXXZ PROC			; CByteDynBuffer::Free
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\streamobjects.cpp
; Line 101
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 102
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 103
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 104
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
; Line 105
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Free@CByteDynBuffer@@QAEXXZ ENDP			; CByteDynBuffer::Free
_TEXT	ENDS
PUBLIC	??$MyMax@I@@YGIII@Z				; MyMax<unsigned int>
PUBLIC	?EnsureCapacity@CByteDynBuffer@@QAE_NI@Z	; CByteDynBuffer::EnsureCapacity
EXTRN	__imp__realloc:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_buf$ = -12						; size = 4
_delta$ = -8						; size = 4
_this$ = -4						; size = 4
_cap$ = 8						; size = 4
?EnsureCapacity@CByteDynBuffer@@QAE_NI@Z PROC		; CByteDynBuffer::EnsureCapacity
; _this$ = ecx
; Line 108
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 109
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _cap$[ebp]
	cmp	ecx, DWORD PTR [eax]
	ja	SHORT $LN6@EnsureCapa
; Line 110
	mov	al, 1
	jmp	SHORT $LN7@EnsureCapa
$LN6@EnsureCapa:
; Line 112
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx], 64			; 00000040H
	jbe	SHORT $LN5@EnsureCapa
; Line 113
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	shr	ecx, 2
	mov	DWORD PTR _delta$[ebp], ecx
	jmp	SHORT $LN4@EnsureCapa
$LN5@EnsureCapa:
; Line 114
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx], 8
	jbe	SHORT $LN3@EnsureCapa
; Line 115
	mov	DWORD PTR _delta$[ebp], 16		; 00000010H
; Line 116
	jmp	SHORT $LN4@EnsureCapa
$LN3@EnsureCapa:
; Line 117
	mov	DWORD PTR _delta$[ebp], 4
$LN4@EnsureCapa:
; Line 118
	mov	eax, DWORD PTR _cap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, DWORD PTR _delta$[ebp]
	push	edx
	call	??$MyMax@I@@YGIII@Z			; MyMax<unsigned int>
	mov	DWORD PTR _cap$[ebp], eax
; Line 119
	mov	esi, esp
	mov	eax, DWORD PTR _cap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	DWORD PTR __imp__realloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _buf$[ebp], eax
; Line 120
	cmp	DWORD PTR _buf$[ebp], 0
	jne	SHORT $LN1@EnsureCapa
; Line 121
	xor	al, al
	jmp	SHORT $LN7@EnsureCapa
$LN1@EnsureCapa:
; Line 122
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 123
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _cap$[ebp]
	mov	DWORD PTR [edx], eax
; Line 124
	mov	al, 1
$LN7@EnsureCapa:
; Line 125
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?EnsureCapacity@CByteDynBuffer@@QAE_NI@Z ENDP		; CByteDynBuffer::EnsureCapacity
_TEXT	ENDS
PUBLIC	??BCByteDynBuffer@@QBEPAEXZ			; CByteDynBuffer::operator unsigned char *
PUBLIC	?GetBufPtrForWriting@CDynBufSeqOutStream@@QAEPAEI@Z ; CDynBufSeqOutStream::GetBufPtrForWriting
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_addSize$ = 8						; size = 4
?GetBufPtrForWriting@CDynBufSeqOutStream@@QAEPAEI@Z PROC ; CDynBufSeqOutStream::GetBufPtrForWriting
; _this$ = ecx
; Line 128
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 129
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _addSize$[ebp]
	add	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _addSize$[ebp], ecx
; Line 130
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _addSize$[ebp]
	cmp	eax, DWORD PTR [edx+16]
	jae	SHORT $LN2@GetBufPtrF
; Line 131
	xor	eax, eax
	jmp	SHORT $LN3@GetBufPtrF
$LN2@GetBufPtrF:
; Line 132
	mov	ecx, DWORD PTR _addSize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?EnsureCapacity@CByteDynBuffer@@QAE_NI@Z ; CByteDynBuffer::EnsureCapacity
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN1@GetBufPtrF
; Line 133
	xor	eax, eax
	jmp	SHORT $LN3@GetBufPtrF
$LN1@GetBufPtrF:
; Line 134
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??BCByteDynBuffer@@QBEPAEXZ		; CByteDynBuffer::operator unsigned char *
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
$LN3@GetBufPtrF:
; Line 135
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetBufPtrForWriting@CDynBufSeqOutStream@@QAEPAEI@Z ENDP ; CDynBufSeqOutStream::GetBufPtrForWriting
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??BCByteDynBuffer@@QBEPAEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BCByteDynBuffer@@QBEPAEXZ PROC			; CByteDynBuffer::operator unsigned char *, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\streamobjects.h
; Line 73
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
??BCByteDynBuffer@@QBEPAEXZ ENDP			; CByteDynBuffer::operator unsigned char *
_TEXT	ENDS
PUBLIC	??BCByteDynBuffer@@QBEPBEXZ			; CByteDynBuffer::operator unsigned char const *
PUBLIC	?CopyToBuffer@CDynBufSeqOutStream@@QBEXAAV?$CBuffer@E@@@Z ; CDynBufSeqOutStream::CopyToBuffer
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dest$ = 8						; size = 4
?CopyToBuffer@CDynBufSeqOutStream@@QBEXAAV?$CBuffer@E@@@Z PROC ; CDynBufSeqOutStream::CopyToBuffer
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\streamobjects.cpp
; Line 138
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 139
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??BCByteDynBuffer@@QBEPBEXZ		; CByteDynBuffer::operator unsigned char const *
	push	eax
	mov	ecx, DWORD PTR _dest$[ebp]
	call	?CopyFrom@?$CBuffer@E@@QAEXPBEI@Z	; CBuffer<unsigned char>::CopyFrom
; Line 140
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?CopyToBuffer@CDynBufSeqOutStream@@QBEXAAV?$CBuffer@E@@@Z ENDP ; CDynBufSeqOutStream::CopyToBuffer
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??BCByteDynBuffer@@QBEPBEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BCByteDynBuffer@@QBEPBEXZ PROC			; CByteDynBuffer::operator unsigned char const *, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\streamobjects.h
; Line 74
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
??BCByteDynBuffer@@QBEPBEXZ ENDP			; CByteDynBuffer::operator unsigned char const *
_TEXT	ENDS
PUBLIC	?UpdateSize@CDynBufSeqOutStream@@QAEXI@Z	; CDynBufSeqOutStream::UpdateSize
PUBLIC	?Write@CDynBufSeqOutStream@@UAGJPBXIPAI@Z	; CDynBufSeqOutStream::Write
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_buf$ = -4						; size = 4
_this$ = 8						; size = 4
_data$ = 12						; size = 4
_size$ = 16						; size = 4
_processedSize$ = 20					; size = 4
?Write@CDynBufSeqOutStream@@UAGJPBXIPAI@Z PROC		; CDynBufSeqOutStream::Write
; File c:\workspace\7z1505-src\cpp\7zip\common\streamobjects.cpp
; Line 143
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 144
	cmp	DWORD PTR _processedSize$[ebp], 0
	je	SHORT $LN4@Write
; Line 145
	mov	eax, DWORD PTR _processedSize$[ebp]
	mov	DWORD PTR [eax], 0
$LN4@Write:
; Line 146
	cmp	DWORD PTR _size$[ebp], 0
	jne	SHORT $LN3@Write
; Line 147
	xor	eax, eax
	jmp	SHORT $LN5@Write
$LN3@Write:
; Line 148
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetBufPtrForWriting@CDynBufSeqOutStream@@QAEPAEI@Z ; CDynBufSeqOutStream::GetBufPtrForWriting
	mov	DWORD PTR _buf$[ebp], eax
; Line 149
	cmp	DWORD PTR _buf$[ebp], 0
	jne	SHORT $LN2@Write
; Line 150
	mov	eax, -2147024882			; 8007000eH
	jmp	SHORT $LN5@Write
$LN2@Write:
; Line 151
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 152
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateSize@CDynBufSeqOutStream@@QAEXI@Z ; CDynBufSeqOutStream::UpdateSize
; Line 153
	cmp	DWORD PTR _processedSize$[ebp], 0
	je	SHORT $LN1@Write
; Line 154
	mov	eax, DWORD PTR _processedSize$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax], ecx
$LN1@Write:
; Line 155
	xor	eax, eax
$LN5@Write:
; Line 156
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Write@CDynBufSeqOutStream@@UAGJPBXIPAI@Z ENDP		; CDynBufSeqOutStream::Write
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?UpdateSize@CDynBufSeqOutStream@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_addSize$ = 8						; size = 4
?UpdateSize@CDynBufSeqOutStream@@QAEXI@Z PROC		; CDynBufSeqOutStream::UpdateSize, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\streamobjects.h
; Line 91
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, DWORD PTR _addSize$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?UpdateSize@CDynBufSeqOutStream@@QAEXI@Z ENDP		; CDynBufSeqOutStream::UpdateSize
_TEXT	ENDS
PUBLIC	?Write@CBufPtrSeqOutStream@@UAGJPBXIPAI@Z	; CBufPtrSeqOutStream::Write
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv81 = -8						; size = 4
_rem$ = -4						; size = 4
_this$ = 8						; size = 4
_data$ = 12						; size = 4
_size$ = 16						; size = 4
_processedSize$ = 20					; size = 4
?Write@CBufPtrSeqOutStream@@UAGJPBXIPAI@Z PROC		; CBufPtrSeqOutStream::Write
; File c:\workspace\7z1505-src\cpp\7zip\common\streamobjects.cpp
; Line 159
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 160
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _rem$[ebp], edx
; Line 161
	mov	eax, DWORD PTR _rem$[ebp]
	cmp	eax, DWORD PTR _size$[ebp]
	jbe	SHORT $LN3@Write@2
; Line 162
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR _rem$[ebp], ecx
$LN3@Write@2:
; Line 163
	cmp	DWORD PTR _rem$[ebp], 0
	je	SHORT $LN2@Write@2
; Line 165
	mov	edx, DWORD PTR _rem$[ebp]
	push	edx
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+16]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 166
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	add	edx, DWORD PTR _rem$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], edx
$LN2@Write@2:
; Line 168
	cmp	DWORD PTR _processedSize$[ebp], 0
	je	SHORT $LN1@Write@2
; Line 169
	mov	ecx, DWORD PTR _processedSize$[ebp]
	mov	edx, DWORD PTR _rem$[ebp]
	mov	DWORD PTR [ecx], edx
$LN1@Write@2:
; Line 170
	cmp	DWORD PTR _rem$[ebp], 0
	jne	SHORT $LN6@Write@2
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN6@Write@2
	mov	DWORD PTR tv81[ebp], -2147467259	; 80004005H
	jmp	SHORT $LN7@Write@2
$LN6@Write@2:
	mov	DWORD PTR tv81[ebp], 0
$LN7@Write@2:
	mov	eax, DWORD PTR tv81[ebp]
; Line 171
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Write@CBufPtrSeqOutStream@@UAGJPBXIPAI@Z ENDP		; CBufPtrSeqOutStream::Write
_TEXT	ENDS
PUBLIC	??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator->
PUBLIC	?Write@CSequentialOutStreamSizeCount@@UAGJPBXIPAI@Z ; CSequentialOutStreamSizeCount::Write
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv68 = -20						; size = 4
_result$ = -16						; size = 4
_realProcessedSize$ = -8				; size = 4
_this$ = 8						; size = 4
_data$ = 12						; size = 4
_size$ = 16						; size = 4
_processedSize$ = 20					; size = 4
?Write@CSequentialOutStreamSizeCount@@UAGJPBXIPAI@Z PROC ; CSequentialOutStreamSizeCount::Write
; Line 174
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 176
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator->
	mov	DWORD PTR tv68[ebp], eax
	mov	esi, esp
	lea	eax, DWORD PTR _realProcessedSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	mov	eax, DWORD PTR tv68[ebp]
	push	eax
	mov	ecx, DWORD PTR tv68[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
; Line 177
	mov	ecx, DWORD PTR _realProcessedSize$[ebp]
	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+16]
	adc	edx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], ecx
	mov	DWORD PTR [eax+20], edx
; Line 178
	cmp	DWORD PTR _processedSize$[ebp], 0
	je	SHORT $LN1@Write@3
; Line 179
	mov	ecx, DWORD PTR _processedSize$[ebp]
	mov	edx, DWORD PTR _realProcessedSize$[ebp]
	mov	DWORD PTR [ecx], edx
$LN1@Write@3:
; Line 180
	mov	eax, DWORD PTR _result$[ebp]
; Line 181
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@Write@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	3
$LN6@Write@3:
	DD	1
	DD	$LN5@Write@3
$LN5@Write@3:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@Write@3
$LN4@Write@3:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
?Write@CSequentialOutStreamSizeCount@@UAGJPBXIPAI@Z ENDP ; CSequentialOutStreamSizeCount::Write
_TEXT	ENDS
PUBLIC	?Free@CCachedInStream@@QAEXXZ			; CCachedInStream::Free
EXTRN	_MidFree@4:PROC
EXTRN	_MyFree@4:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Free@CCachedInStream@@QAEXXZ PROC			; CCachedInStream::Free
; _this$ = ecx
; Line 186
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 187
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_MyFree@4
; Line 188
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
; Line 189
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_MidFree@4
; Line 190
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
; Line 191
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Free@CCachedInStream@@QAEXXZ ENDP			; CCachedInStream::Free
_TEXT	ENDS
PUBLIC	?Alloc@CCachedInStream@@QAE_NII@Z		; CCachedInStream::Alloc
EXTRN	_MyAlloc@4:PROC
EXTRN	_MidAlloc@4:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_dataSize$ = -12					; size = 4
_sizeLog$ = -8						; size = 4
_this$ = -4						; size = 4
_blockSizeLog$ = 8					; size = 4
_numBlocksLog$ = 12					; size = 4
?Alloc@CCachedInStream@@QAE_NII@Z PROC			; CCachedInStream::Alloc
; _this$ = ecx
; Line 194
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 195
	mov	eax, DWORD PTR _blockSizeLog$[ebp]
	add	eax, DWORD PTR _numBlocksLog$[ebp]
	mov	DWORD PTR _sizeLog$[ebp], eax
; Line 196
	cmp	DWORD PTR _sizeLog$[ebp], 32		; 00000020H
	jb	SHORT $LN7@Alloc
; Line 197
	xor	al, al
	jmp	$LN8@Alloc
$LN7@Alloc:
; Line 198
	mov	edx, 1
	mov	ecx, DWORD PTR _sizeLog$[ebp]
	shl	edx, cl
	mov	DWORD PTR _dataSize$[ebp], edx
; Line 199
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN5@Alloc
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _dataSize$[ebp]
	cmp	edx, DWORD PTR [ecx+16]
	je	SHORT $LN6@Alloc
$LN5@Alloc:
; Line 201
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_MidFree@4
; Line 202
	mov	edx, DWORD PTR _dataSize$[ebp]
	push	edx
	call	_MidAlloc@4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 203
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	jne	SHORT $LN4@Alloc
; Line 204
	xor	al, al
	jmp	SHORT $LN8@Alloc
$LN4@Alloc:
; Line 205
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _dataSize$[ebp]
	mov	DWORD PTR [eax+16], ecx
$LN6@Alloc:
; Line 207
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN2@Alloc
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _numBlocksLog$[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	je	SHORT $LN3@Alloc
$LN2@Alloc:
; Line 209
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_MyFree@4
; Line 210
	mov	edx, 8
	mov	ecx, DWORD PTR _numBlocksLog$[ebp]
	shl	edx, cl
	push	edx
	call	_MyAlloc@4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 211
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+8], 0
	jne	SHORT $LN1@Alloc
; Line 212
	xor	al, al
	jmp	SHORT $LN8@Alloc
$LN1@Alloc:
; Line 213
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _numBlocksLog$[ebp]
	mov	DWORD PTR [eax+24], ecx
$LN3@Alloc:
; Line 215
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _blockSizeLog$[ebp]
	mov	DWORD PTR [edx+20], eax
; Line 216
	mov	al, 1
$LN8@Alloc:
; Line 217
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Alloc@CCachedInStream@@QAE_NII@Z ENDP			; CCachedInStream::Alloc
_TEXT	ENDS
PUBLIC	?Init@CCachedInStream@@QAEX_K@Z			; CCachedInStream::Init
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$67213 = -12						; size = 4
_numBlocks$ = -8					; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 8
?Init@CCachedInStream@@QAEX_K@Z PROC			; CCachedInStream::Init
; _this$ = ecx
; Line 220
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 221
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+32], ecx
	mov	edx, DWORD PTR _size$[ebp+4]
	mov	DWORD PTR [eax+36], edx
; Line 222
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+40], 0
	mov	DWORD PTR [eax+44], 0
; Line 223
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, 1
	mov	ecx, DWORD PTR [ecx+24]
	shl	edx, cl
	mov	DWORD PTR _numBlocks$[ebp], edx
; Line 224
	mov	DWORD PTR _i$67213[ebp], 0
	jmp	SHORT $LN3@Init
$LN2@Init:
	mov	eax, DWORD PTR _i$67213[ebp]
	add	eax, 1
	mov	DWORD PTR _i$67213[ebp], eax
$LN3@Init:
	mov	ecx, DWORD PTR _i$67213[ebp]
	cmp	ecx, DWORD PTR _numBlocks$[ebp]
	jae	SHORT $LN4@Init
; Line 225
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _i$67213[ebp]
	mov	DWORD PTR [eax+ecx*8], -1
	mov	DWORD PTR [eax+ecx*8+4], -1
	jmp	SHORT $LN2@Init
$LN4@Init:
; Line 226
	mov	esp, ebp
	pop	ebp
	ret	8
?Init@CCachedInStream@@QAEX_K@Z ENDP			; CCachedInStream::Init
_TEXT	ENDS
PUBLIC	??$MyMin@I@@YGIII@Z				; MyMin<unsigned int>
PUBLIC	?Read@CCachedInStream@@UAGJPAXIPAI@Z		; CCachedInStream::Read
EXTRN	__allshl:PROC
EXTRN	__aullshr:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv261 = -80						; size = 8
tv230 = -72						; size = 4
tv229 = -68						; size = 4
tv199 = -64						; size = 8
tv178 = -56						; size = 4
tv177 = -52						; size = 4
_cur$67250 = -48					; size = 4
_offset$67247 = -44					; size = 4
___result__$67245 = -40					; size = 4
_blockSize$67241 = -36					; size = 4
_remInBlock$67240 = -32					; size = 8
_p$67238 = -24						; size = 4
_cacheIndex$67235 = -20					; size = 4
_cacheTag$67234 = -16					; size = 8
_rem$67228 = -8						; size = 8
_this$ = 8						; size = 4
_data$ = 12						; size = 4
_size$ = 16						; size = 4
_processedSize$ = 20					; size = 4
?Read@CCachedInStream@@UAGJPAXIPAI@Z PROC		; CCachedInStream::Read
; Line 229
	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-80]
	mov	ecx, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 230
	cmp	DWORD PTR _processedSize$[ebp], 0
	je	SHORT $LN10@Read@3
; Line 231
	mov	eax, DWORD PTR _processedSize$[ebp]
	mov	DWORD PTR [eax], 0
$LN10@Read@3:
; Line 232
	cmp	DWORD PTR _size$[ebp], 0
	jne	SHORT $LN9@Read@3
; Line 233
	xor	eax, eax
	jmp	$LN11@Read@3
$LN9@Read@3:
; Line 234
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv177[ebp], ecx
	mov	DWORD PTR tv178[ebp], edx
	mov	eax, DWORD PTR tv177[ebp]
	mov	ecx, DWORD PTR tv178[ebp]
	mov	edx, DWORD PTR [eax+44]
	cmp	edx, DWORD PTR [ecx+36]
	jb	SHORT $LN8@Read@3
	ja	SHORT $LN13@Read@3
	mov	eax, DWORD PTR tv177[ebp]
	mov	ecx, DWORD PTR tv178[ebp]
	mov	edx, DWORD PTR [eax+40]
	cmp	edx, DWORD PTR [ecx+32]
	jb	SHORT $LN8@Read@3
$LN13@Read@3:
; Line 235
	xor	eax, eax
	jmp	$LN11@Read@3
$LN8@Read@3:
; Line 238
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+32]
	sub	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR [eax+36]
	sbb	eax, DWORD PTR [ecx+44]
	mov	DWORD PTR _rem$67228[ebp], edx
	mov	DWORD PTR _rem$67228[ebp+4], eax
; Line 239
	mov	ecx, DWORD PTR _size$[ebp]
	xor	edx, edx
	mov	DWORD PTR tv199[ebp], ecx
	mov	DWORD PTR tv199[ebp+4], edx
	mov	eax, DWORD PTR tv199[ebp+4]
	cmp	eax, DWORD PTR _rem$67228[ebp+4]
	jb	SHORT $LN6@Read@3
	ja	SHORT $LN14@Read@3
	mov	ecx, DWORD PTR tv199[ebp]
	cmp	ecx, DWORD PTR _rem$67228[ebp]
	jbe	SHORT $LN6@Read@3
$LN14@Read@3:
; Line 240
	mov	edx, DWORD PTR _rem$67228[ebp]
	mov	DWORD PTR _size$[ebp], edx
$LN6@Read@3:
; Line 243
	cmp	DWORD PTR _size$[ebp], 0
	je	$LN5@Read@3
; Line 245
	mov	ecx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+40]
	mov	edx, DWORD PTR [ecx+44]
	mov	ecx, DWORD PTR [esi+20]
	call	__aullshr
	mov	DWORD PTR _cacheTag$67234[ebp], eax
	mov	DWORD PTR _cacheTag$67234[ebp+4], edx
; Line 246
	mov	edx, DWORD PTR _cacheTag$67234[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, 1
	mov	ecx, DWORD PTR [eax+24]
	shl	esi, cl
	sub	esi, 1
	and	edx, esi
	mov	DWORD PTR _cacheIndex$67235[ebp], edx
; Line 247
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _cacheIndex$67235[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	shl	edx, cl
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _p$67238[ebp], edx
; Line 248
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _cacheIndex$67235[ebp]
	mov	DWORD PTR tv229[ebp], edx
	mov	DWORD PTR tv230[ebp], eax
	mov	ecx, DWORD PTR tv230[ebp]
	mov	edx, DWORD PTR tv229[ebp]
	mov	eax, DWORD PTR [edx+ecx*8]
	cmp	eax, DWORD PTR _cacheTag$67234[ebp]
	jne	SHORT $LN15@Read@3
	mov	ecx, DWORD PTR tv230[ebp]
	mov	edx, DWORD PTR tv229[ebp]
	mov	eax, DWORD PTR [edx+ecx*8+4]
	cmp	eax, DWORD PTR _cacheTag$67234[ebp+4]
	je	$LN4@Read@3
$LN15@Read@3:
; Line 250
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _cacheTag$67234[ebp]
	mov	edx, DWORD PTR _cacheTag$67234[ebp+4]
	mov	ecx, DWORD PTR [ecx+20]
	call	__allshl
	mov	ecx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [ecx+32]
	sub	esi, eax
	mov	eax, DWORD PTR [ecx+36]
	sbb	eax, edx
	mov	DWORD PTR _remInBlock$67240[ebp], esi
	mov	DWORD PTR _remInBlock$67240[ebp+4], eax
; Line 251
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, 1
	mov	ecx, DWORD PTR [ecx+20]
	shl	edx, cl
	mov	DWORD PTR _blockSize$67241[ebp], edx
; Line 252
	mov	eax, DWORD PTR _blockSize$67241[ebp]
	xor	ecx, ecx
	mov	DWORD PTR tv261[ebp], eax
	mov	DWORD PTR tv261[ebp+4], ecx
	mov	edx, DWORD PTR tv261[ebp+4]
	cmp	edx, DWORD PTR _remInBlock$67240[ebp+4]
	jb	SHORT $LN3@Read@3
	ja	SHORT $LN16@Read@3
	mov	eax, DWORD PTR tv261[ebp]
	cmp	eax, DWORD PTR _remInBlock$67240[ebp]
	jbe	SHORT $LN3@Read@3
$LN16@Read@3:
; Line 253
	mov	ecx, DWORD PTR _remInBlock$67240[ebp]
	mov	DWORD PTR _blockSize$67241[ebp], ecx
$LN3@Read@3:
; Line 254
	mov	esi, esp
	mov	edx, DWORD PTR _blockSize$67241[ebp]
	push	edx
	mov	eax, DWORD PTR _p$67238[ebp]
	push	eax
	mov	ecx, DWORD PTR _cacheTag$67234[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _cacheTag$67234[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$67245[ebp], eax
	cmp	DWORD PTR ___result__$67245[ebp], 0
	je	SHORT $LN2@Read@3
	mov	eax, DWORD PTR ___result__$67245[ebp]
	jmp	$LN11@Read@3
$LN2@Read@3:
; Line 255
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _cacheIndex$67235[ebp]
	mov	ecx, DWORD PTR _cacheTag$67234[ebp]
	mov	DWORD PTR [edx+eax*8], ecx
	mov	ecx, DWORD PTR _cacheTag$67234[ebp+4]
	mov	DWORD PTR [edx+eax*8+4], ecx
$LN4@Read@3:
; Line 257
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, 1
	mov	ecx, DWORD PTR [ecx+20]
	shl	edx, cl
	sub	edx, 1
	and	eax, edx
	mov	DWORD PTR _offset$67247[ebp], eax
; Line 258
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, 1
	mov	ecx, DWORD PTR [ecx+20]
	shl	edx, cl
	sub	edx, DWORD PTR _offset$67247[ebp]
	push	edx
	call	??$MyMin@I@@YGIII@Z			; MyMin<unsigned int>
	mov	DWORD PTR _cur$67250[ebp], eax
; Line 259
	mov	eax, DWORD PTR _cur$67250[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$67238[ebp]
	add	ecx, DWORD PTR _offset$67247[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 260
	cmp	DWORD PTR _processedSize$[ebp], 0
	je	SHORT $LN1@Read@3
; Line 261
	mov	eax, DWORD PTR _processedSize$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _cur$67250[ebp]
	mov	edx, DWORD PTR _processedSize$[ebp]
	mov	DWORD PTR [edx], ecx
$LN1@Read@3:
; Line 262
	mov	eax, DWORD PTR _data$[ebp]
	add	eax, DWORD PTR _cur$67250[ebp]
	mov	DWORD PTR _data$[ebp], eax
; Line 263
	mov	ecx, DWORD PTR _cur$67250[ebp]
	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+40]
	adc	edx, DWORD PTR [eax+44]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+40], ecx
	mov	DWORD PTR [eax+44], edx
; Line 264
	mov	ecx, DWORD PTR _size$[ebp]
	sub	ecx, DWORD PTR _cur$67250[ebp]
	mov	DWORD PTR _size$[ebp], ecx
; Line 265
	jmp	$LN6@Read@3
$LN5@Read@3:
; Line 267
	xor	eax, eax
$LN11@Read@3:
; Line 268
	pop	edi
	pop	esi
	add	esp, 80					; 00000050H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Read@CCachedInStream@@UAGJPAXIPAI@Z ENDP		; CCachedInStream::Read
_TEXT	ENDS
PUBLIC	?Seek@CCachedInStream@@UAGJ_JIPA_K@Z		; CCachedInStream::Seek
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv64 = -4						; size = 4
_this$ = 8						; size = 4
_offset$ = 12						; size = 8
_seekOrigin$ = 20					; size = 4
_newPosition$ = 24					; size = 4
?Seek@CCachedInStream@@UAGJ_JIPA_K@Z PROC		; CCachedInStream::Seek
; Line 271
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 272
	mov	eax, DWORD PTR _seekOrigin$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 0
	je	SHORT $LN6@Seek@3
	cmp	DWORD PTR tv64[ebp], 1
	je	SHORT $LN5@Seek@3
	cmp	DWORD PTR tv64[ebp], 2
	je	SHORT $LN4@Seek@3
	jmp	SHORT $LN3@Seek@3
$LN6@Seek@3:
; Line 274
	jmp	SHORT $LN7@Seek@3
$LN5@Seek@3:
; Line 275
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _offset$[ebp]
	add	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR _offset$[ebp+4]
	adc	eax, DWORD PTR [ecx+44]
	mov	DWORD PTR _offset$[ebp], edx
	mov	DWORD PTR _offset$[ebp+4], eax
	jmp	SHORT $LN7@Seek@3
$LN4@Seek@3:
; Line 276
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _offset$[ebp]
	add	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _offset$[ebp+4]
	adc	eax, DWORD PTR [ecx+36]
	mov	DWORD PTR _offset$[ebp], edx
	mov	DWORD PTR _offset$[ebp+4], eax
	jmp	SHORT $LN7@Seek@3
$LN3@Seek@3:
; Line 277
	mov	eax, -2147287039			; 80030001H
	jmp	SHORT $LN9@Seek@3
$LN7@Seek@3:
; Line 279
	cmp	DWORD PTR _offset$[ebp+4], 0
	jg	SHORT $LN2@Seek@3
	jl	SHORT $LN11@Seek@3
	cmp	DWORD PTR _offset$[ebp], 0
	jae	SHORT $LN2@Seek@3
$LN11@Seek@3:
; Line 280
	mov	eax, -2147024765			; 80070083H
	jmp	SHORT $LN9@Seek@3
$LN2@Seek@3:
; Line 281
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [ecx+40], edx
	mov	eax, DWORD PTR _offset$[ebp+4]
	mov	DWORD PTR [ecx+44], eax
; Line 282
	cmp	DWORD PTR _newPosition$[ebp], 0
	je	SHORT $LN1@Seek@3
; Line 283
	mov	ecx, DWORD PTR _newPosition$[ebp]
	mov	edx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _offset$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
$LN1@Seek@3:
; Line 284
	xor	eax, eax
$LN9@Seek@3:
; Line 285
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?Seek@CCachedInStream@@UAGJ_JIPA_K@Z ENDP		; CCachedInStream::Seek
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CBuffer@E@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CBuffer@E@@QAE@XZ PROC				; CBuffer<unsigned char>::CBuffer<unsigned char>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mybuffer.h
; Line 24
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CBuffer@E@@QAE@XZ ENDP				; CBuffer<unsigned char>::CBuffer<unsigned char>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CBuffer@E@@QAE@XZ
_TEXT	SEGMENT
$T67642 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CBuffer@E@@QAE@XZ PROC				; CBuffer<unsigned char>::~CBuffer<unsigned char>, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T67642[ebp], ecx
	mov	edx, DWORD PTR $T67642[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CBuffer@E@@QAE@XZ ENDP				; CBuffer<unsigned char>::~CBuffer<unsigned char>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CBuffer@E@@QAEPAEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CBuffer@E@@QAEPAEXZ PROC				; CBuffer<unsigned char>::operator unsigned char *, COMDAT
; _this$ = ecx
; Line 39
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CBuffer@E@@QAEPAEXZ ENDP				; CBuffer<unsigned char>::operator unsigned char *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CBuffer@E@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CBuffer@E@@QBEIXZ PROC				; CBuffer<unsigned char>::Size, COMDAT
; _this$ = ecx
; Line 41
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CBuffer@E@@QBEIXZ ENDP				; CBuffer<unsigned char>::Size
_TEXT	ENDS
PUBLIC	?Alloc@?$CBuffer@E@@QAEXI@Z			; CBuffer<unsigned char>::Alloc
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?CopyFrom@?$CBuffer@E@@QAEXPBEI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_data$ = 8						; size = 4
_size$ = 12						; size = 4
?CopyFrom@?$CBuffer@E@@QAEXPBEI@Z PROC			; CBuffer<unsigned char>::CopyFrom, COMDAT
; _this$ = ecx
; Line 67
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 68
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Alloc@?$CBuffer@E@@QAEXI@Z		; CBuffer<unsigned char>::Alloc
; Line 69
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN2@CopyFrom
; Line 70
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN2@CopyFrom:
; Line 71
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?CopyFrom@?$CBuffer@E@@QAEXPBEI@Z ENDP			; CBuffer<unsigned char>::CopyFrom
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIUnknown@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UIUnknown@@@@QAE@XZ PROC			; CMyComPtr<IUnknown>::CMyComPtr<IUnknown>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UIUnknown@@@@QAE@XZ ENDP			; CMyComPtr<IUnknown>::CMyComPtr<IUnknown>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIUnknown@@@@QAE@XZ PROC			; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIUnknown@@@@QAE@XZ ENDP			; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z PROC ; CMyComPtr<IUnknown>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z ENDP ; CMyComPtr<IUnknown>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ PROC ; CMyComPtr<ISequentialOutStream>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ENDP ; CMyComPtr<ISequentialOutStream>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z PROC ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@CMyComPtr@2
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@2:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z ENDP ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@3:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Detach@?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@XZ
_TEXT	SEGMENT
_pt$ = -8						; size = 4
_this$ = -4						; size = 4
?Detach@?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@XZ PROC ; CMyComPtr<ISequentialInStream>::Detach, COMDAT
; _this$ = ecx
; Line 45
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 46
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pt$[ebp], ecx
; Line 47
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0
; Line 48
	mov	eax, DWORD PTR _pt$[ebp]
; Line 49
	mov	esp, ebp
	pop	ebp
	ret	0
?Detach@?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@XZ ENDP ; CMyComPtr<ISequentialInStream>::Detach
_TEXT	ENDS
PUBLIC	?Free@?$CBuffer@E@@QAEXXZ			; CBuffer<unsigned char>::Free
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Alloc@?$CBuffer@E@@QAEXI@Z
_TEXT	SEGMENT
$T67665 = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?Alloc@?$CBuffer@E@@QAEXI@Z PROC			; CBuffer<unsigned char>::Alloc, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mybuffer.h
; Line 44
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 45
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	je	SHORT $LN3@Alloc@2
; Line 47
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Free@?$CBuffer@E@@QAEXXZ		; CBuffer<unsigned char>::Free
; Line 48
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN3@Alloc@2
; Line 50
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T67665[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T67665[ebp]
	mov	DWORD PTR [eax], ecx
; Line 51
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+4], eax
$LN3@Alloc@2:
; Line 54
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Alloc@?$CBuffer@E@@QAEXI@Z ENDP			; CBuffer<unsigned char>::Alloc
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Free@?$CBuffer@E@@QAEXXZ
_TEXT	SEGMENT
$T67668 = -8						; size = 4
_this$ = -4						; size = 4
?Free@?$CBuffer@E@@QAEXXZ PROC				; CBuffer<unsigned char>::Free, COMDAT
; _this$ = ecx
; Line 15
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 16
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@Free
; Line 18
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T67668[ebp], edx
	mov	eax, DWORD PTR $T67668[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 19
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
$LN1@Free:
; Line 21
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 22
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Free@?$CBuffer@E@@QAEXXZ ENDP				; CBuffer<unsigned char>::Free
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$MyMax@I@@YGIII@Z
_TEXT	SEGMENT
tv65 = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$MyMax@I@@YGIII@Z PROC				; MyMax<unsigned int>, COMDAT
; File c:\workspace\7z1505-src\cpp\common\defs.h
; Line 9
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _a$[ebp]
	cmp	eax, DWORD PTR _b$[ebp]
	jbe	SHORT $LN3@MyMax
	mov	ecx, DWORD PTR _a$[ebp]
	mov	DWORD PTR tv65[ebp], ecx
	jmp	SHORT $LN4@MyMax
$LN3@MyMax:
	mov	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR tv65[ebp], edx
$LN4@MyMax:
	mov	eax, DWORD PTR tv65[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??$MyMax@I@@YGIII@Z ENDP				; MyMax<unsigned int>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$MyMin@I@@YGIII@Z
_TEXT	SEGMENT
tv65 = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$MyMin@I@@YGIII@Z PROC				; MyMin<unsigned int>, COMDAT
; Line 7
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _a$[ebp]
	cmp	eax, DWORD PTR _b$[ebp]
	jae	SHORT $LN3@MyMin
	mov	ecx, DWORD PTR _a$[ebp]
	mov	DWORD PTR tv65[ebp], ecx
	jmp	SHORT $LN4@MyMin
$LN3@MyMin:
	mov	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR tv65[ebp], edx
$LN4@MyMin:
	mov	eax, DWORD PTR tv65[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??$MyMin@I@@YGIII@Z ENDP				; MyMin<unsigned int>
_TEXT	ENDS
END
